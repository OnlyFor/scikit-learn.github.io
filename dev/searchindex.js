Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.1", "Version 1.4.0"], "terms": {"click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 361, 362, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 421, 423, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 473, 474, 475, 476, 478, 480, 481, 484, 487, 488, 489, 490, 492, 493, 494, 496, 499, 500, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 568, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 691, 692, 693, 694, 695, 697, 698, 700, 703, 704, 705, 707, 708, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 722, 726, 727, 728, 729, 730, 731, 732, 733, 738, 744, 745, 746, 747, 748, 749, 751, 752, 753, 755, 758, 759, 764, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 910, 911, 916, 917, 919, 921, 922, 927, 929, 934, 935, 936, 937, 938, 939, 941, 944, 945, 946, 948, 949, 952, 953, 962, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "wa": [0, 4, 8, 13, 16, 34, 40, 70, 71, 80, 86, 92, 127, 130, 159, 168, 174, 177, 202, 223, 250, 253, 255, 257, 259, 265, 266, 297, 306, 311, 312, 316, 322, 323, 345, 347, 354, 356, 360, 369, 371, 372, 374, 378, 379, 387, 390, 391, 394, 396, 397, 400, 403, 404, 408, 412, 431, 432, 436, 437, 441, 445, 448, 451, 460, 465, 506, 514, 526, 527, 529, 531, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 576, 577, 579, 581, 582, 593, 618, 621, 632, 641, 642, 645, 646, 647, 649, 655, 656, 676, 677, 704, 719, 720, 758, 773, 774, 777, 785, 786, 787, 790, 791, 801, 813, 815, 827, 837, 863, 864, 883, 887, 893, 894, 896, 921, 922, 945, 966, 967, 968, 977, 978, 981, 984, 988, 991, 994, 998, 1004, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "start": [0, 4, 7, 10, 12, 20, 26, 53, 58, 64, 67, 74, 86, 98, 109, 115, 121, 123, 144, 147, 155, 157, 169, 174, 178, 179, 187, 198, 199, 200, 206, 216, 219, 223, 232, 234, 247, 259, 267, 279, 315, 317, 321, 345, 354, 356, 360, 361, 362, 363, 367, 374, 375, 376, 378, 379, 380, 385, 387, 390, 397, 400, 404, 405, 409, 410, 431, 433, 441, 445, 447, 529, 601, 608, 623, 636, 644, 650, 657, 659, 667, 668, 669, 681, 685, 771, 772, 779, 785, 786, 787, 790, 791, 801, 832, 833, 834, 836, 838, 846, 932, 962, 967, 974, 977, 982, 983, 992, 999, 1002, 1004, 1012, 1013, 1023, 1025, 1028, 1030, 1032, 1033, 1034, 1035, 1036], "2007": [0, 38, 186, 369, 400, 409, 431, 443, 445, 451, 453, 557, 647, 682, 708, 724, 727, 748, 749, 783, 970, 974, 976, 978], "googl": [0, 17, 385, 400, 433, 997, 1009, 1020], "summer": [0, 4, 48, 1020], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 361, 368, 372, 373, 375, 377, 378, 383, 385, 387, 388, 390, 391, 394, 396, 399, 400, 407, 408, 433, 434, 438, 440, 450, 487, 517, 521, 522, 528, 529, 533, 534, 536, 537, 539, 557, 563, 572, 573, 576, 577, 637, 638, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 655, 656, 673, 674, 676, 677, 818, 819, 820, 857, 864, 946, 975, 979, 988, 990, 992, 993, 998, 999, 1001, 1002, 1005, 1013, 1020, 1022, 1023], "david": [0, 2, 37, 57, 81, 116, 177, 182, 200, 260, 262, 306, 345, 346, 347, 369, 400, 407, 410, 453, 523, 527, 558, 559, 613, 614, 619, 715, 785, 887, 968, 974, 982, 991, 1002, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "cournapeau": [0, 2, 1020, 1023], "later": [0, 11, 34, 53, 110, 115, 124, 150, 169, 174, 177, 292, 347, 356, 380, 385, 386, 390, 394, 836, 859, 860, 868, 870, 988, 1008, 1013, 1023, 1026, 1028, 1032], "year": [0, 4, 133, 147, 155, 167, 168, 169, 198, 199, 216, 371, 373, 378, 385, 404, 408, 410, 789, 794, 796, 869, 974, 978, 999, 1002, 1011], "matthieu": [0, 2, 1020, 1024, 1035], "brucher": [0, 2, 1020], "work": [0, 4, 9, 17, 32, 44, 45, 48, 52, 67, 78, 113, 120, 133, 147, 156, 157, 167, 168, 169, 187, 202, 215, 234, 244, 246, 257, 285, 286, 307, 312, 314, 315, 317, 334, 346, 347, 356, 361, 362, 363, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 382, 386, 387, 388, 390, 396, 397, 398, 400, 401, 402, 405, 407, 408, 409, 412, 413, 414, 415, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 451, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 499, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 686, 699, 732, 764, 768, 769, 770, 771, 778, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 878, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 927, 931, 967, 968, 970, 972, 973, 974, 975, 977, 978, 980, 981, 984, 985, 988, 991, 992, 998, 999, 1002, 1004, 1005, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "part": [0, 31, 36, 61, 68, 71, 82, 113, 116, 119, 123, 128, 136, 137, 138, 139, 144, 155, 165, 177, 234, 247, 254, 256, 273, 295, 303, 306, 308, 347, 362, 369, 371, 374, 376, 380, 382, 386, 387, 390, 396, 398, 400, 404, 405, 407, 408, 410, 437, 440, 484, 485, 486, 512, 522, 528, 533, 565, 575, 576, 577, 604, 616, 781, 855, 873, 875, 876, 877, 878, 879, 880, 881, 967, 968, 970, 975, 979, 997, 998, 999, 1000, 1002, 1006, 1013, 1015, 1020, 1028, 1029, 1031, 1033, 1035], "hi": [0, 401, 978, 1013], "thesi": [0, 371, 400, 407], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 37, 39, 48, 49, 53, 55, 57, 58, 60, 66, 67, 71, 72, 74, 75, 78, 80, 81, 82, 86, 89, 95, 97, 100, 103, 104, 109, 110, 113, 115, 116, 117, 118, 119, 120, 123, 125, 126, 127, 128, 130, 133, 143, 144, 146, 147, 150, 154, 155, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 182, 186, 187, 189, 193, 198, 199, 200, 201, 202, 203, 206, 215, 216, 227, 228, 229, 230, 232, 233, 234, 235, 238, 239, 240, 241, 247, 249, 253, 255, 256, 257, 259, 260, 261, 262, 264, 265, 268, 269, 271, 273, 274, 277, 279, 285, 286, 288, 298, 301, 302, 303, 304, 306, 307, 308, 311, 312, 313, 315, 316, 322, 324, 332, 340, 345, 346, 347, 350, 354, 356, 360, 361, 362, 367, 368, 369, 370, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 428, 431, 432, 433, 434, 435, 438, 439, 440, 443, 453, 454, 455, 460, 463, 466, 484, 487, 494, 499, 500, 502, 514, 525, 527, 529, 531, 532, 533, 535, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 582, 593, 597, 600, 601, 602, 621, 623, 624, 625, 627, 634, 635, 636, 638, 639, 640, 642, 644, 646, 649, 650, 652, 654, 656, 657, 659, 660, 665, 666, 667, 670, 671, 675, 676, 677, 687, 694, 703, 709, 711, 716, 718, 719, 724, 725, 728, 730, 732, 744, 746, 747, 771, 773, 775, 778, 782, 784, 785, 786, 787, 790, 791, 793, 801, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 824, 825, 826, 827, 828, 829, 832, 833, 834, 836, 837, 838, 840, 841, 842, 847, 855, 857, 863, 864, 868, 869, 871, 875, 876, 878, 879, 880, 881, 882, 883, 885, 886, 887, 890, 891, 892, 895, 898, 900, 905, 909, 911, 927, 946, 967, 968, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 993, 994, 999, 1001, 1002, 1004, 1011, 1012, 1013, 1017, 1020, 1021, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "2010": [0, 47, 67, 79, 169, 264, 265, 397, 400, 402, 404, 405, 413, 466, 527, 695, 699, 710, 711, 730, 815, 847, 848, 970, 974, 978, 982, 992, 997, 1020], "fabian": [0, 2, 185, 203, 220, 291, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1029], "pedregosa": [0, 2, 185, 203, 220, 291, 1020, 1021, 1022, 1023, 1024, 1026], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 66, 67, 82, 97, 101, 187, 188, 220, 232, 246, 997, 999, 1002, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 66, 67, 73, 82, 89, 90, 97, 101, 102, 181, 187, 188, 195, 196, 220, 222, 230, 232, 246, 303, 336, 337, 388, 997, 1002, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 183, 185, 186, 187, 189, 191, 192, 227, 230, 265, 272, 291, 388, 1002, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 183, 185, 186, 187, 189, 191, 192, 227, 230, 265, 272, 291, 388, 1002, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "vincent": [0, 2, 47, 67, 153, 157, 1002, 1020, 1022, 1024, 1025, 1027, 1030, 1035, 1036], "michel": [0, 2, 47, 67, 1020, 1022, 1023, 1025, 1027, 1034, 1035], "inria": [0, 5, 9, 30, 37, 52, 54, 57, 75, 82, 116, 156, 177, 182, 183, 185, 189, 191, 192, 203, 220, 221, 227, 230, 260, 262, 265, 272, 291, 306, 340, 345, 346, 347, 649, 996, 1020], "took": [0, 42, 267], "leadership": 0, "made": [0, 70, 81, 89, 100, 110, 116, 133, 157, 168, 169, 198, 216, 250, 263, 307, 312, 332, 351, 360, 369, 371, 374, 378, 387, 388, 400, 407, 408, 412, 434, 437, 438, 440, 450, 487, 494, 579, 580, 582, 621, 622, 647, 656, 676, 677, 725, 773, 787, 790, 791, 801, 805, 806, 807, 827, 830, 831, 979, 984, 994, 998, 1002, 1010, 1012, 1020, 1021, 1022, 1023, 1024, 1027, 1029, 1030, 1033, 1034], "first": [0, 4, 5, 7, 8, 11, 17, 20, 25, 26, 30, 31, 32, 39, 55, 56, 58, 61, 64, 65, 66, 67, 70, 71, 72, 75, 80, 85, 86, 89, 90, 91, 100, 104, 110, 111, 115, 117, 118, 119, 120, 122, 124, 127, 130, 131, 132, 133, 143, 144, 147, 150, 151, 152, 155, 156, 157, 158, 163, 167, 168, 169, 171, 174, 177, 179, 181, 187, 194, 195, 196, 199, 200, 206, 207, 212, 220, 223, 231, 232, 234, 235, 236, 238, 240, 241, 246, 250, 254, 259, 261, 262, 266, 268, 270, 271, 277, 279, 281, 282, 284, 288, 289, 290, 295, 297, 301, 303, 306, 307, 308, 312, 313, 321, 324, 328, 329, 332, 334, 345, 346, 347, 350, 351, 354, 356, 361, 362, 368, 369, 371, 372, 373, 376, 378, 379, 380, 382, 385, 387, 397, 398, 400, 403, 404, 405, 407, 408, 409, 410, 412, 434, 437, 438, 441, 450, 451, 455, 463, 474, 478, 479, 481, 482, 483, 485, 488, 491, 493, 495, 499, 500, 501, 519, 524, 525, 529, 532, 544, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 573, 575, 579, 580, 581, 582, 584, 601, 602, 608, 612, 615, 622, 623, 624, 625, 637, 643, 650, 657, 659, 665, 667, 679, 686, 689, 691, 693, 703, 707, 726, 753, 754, 772, 782, 785, 786, 790, 791, 792, 793, 794, 799, 801, 808, 809, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 855, 863, 867, 868, 869, 872, 879, 880, 892, 895, 898, 899, 900, 901, 903, 905, 910, 911, 912, 929, 931, 945, 949, 952, 964, 967, 968, 972, 973, 974, 975, 977, 978, 979, 980, 981, 985, 988, 989, 992, 993, 994, 1002, 1004, 1010, 1011, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036], "public": [0, 79, 368, 374, 376, 378, 379, 385, 386, 387, 388, 404, 407, 459, 655, 662, 676, 677, 683, 888, 974, 982, 1020, 1025, 1026, 1031, 1032, 1033, 1036], "releas": [0, 34, 234, 318, 361, 363, 372, 374, 375, 377, 382, 385, 387, 408, 434, 437, 438, 455, 458, 481, 482, 487, 492, 493, 495, 503, 506, 512, 515, 529, 552, 553, 555, 556, 558, 590, 593, 619, 621, 623, 625, 631, 637, 639, 643, 649, 660, 671, 679, 692, 693, 708, 738, 778, 783, 787, 790, 791, 793, 801, 809, 812, 816, 832, 834, 851, 855, 860, 863, 864, 865, 869, 870, 871, 887, 888, 890, 895, 898, 899, 922, 946, 994, 996, 1020, 1021, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "februari": [0, 402, 464, 978, 1021, 1025], "1st": [0, 4, 60, 90, 158, 199, 306, 868, 869], "sinc": [0, 4, 5, 11, 25, 27, 37, 49, 53, 55, 66, 70, 71, 72, 96, 120, 136, 144, 147, 150, 155, 168, 169, 174, 180, 198, 200, 202, 215, 228, 232, 233, 234, 246, 249, 255, 259, 261, 262, 268, 269, 279, 281, 307, 314, 315, 325, 329, 332, 340, 345, 346, 347, 356, 361, 369, 372, 374, 375, 376, 378, 379, 382, 385, 386, 387, 390, 391, 398, 400, 401, 402, 403, 404, 405, 407, 408, 410, 417, 428, 432, 436, 437, 438, 440, 441, 444, 447, 460, 469, 487, 517, 527, 528, 529, 530, 531, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 558, 560, 579, 580, 582, 601, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 623, 624, 629, 635, 636, 641, 642, 645, 646, 647, 649, 650, 655, 656, 657, 659, 665, 666, 667, 670, 698, 700, 725, 731, 758, 779, 790, 791, 793, 818, 819, 820, 821, 825, 826, 827, 828, 829, 832, 837, 840, 847, 848, 855, 863, 880, 881, 885, 886, 890, 892, 893, 894, 895, 896, 898, 900, 924, 927, 967, 970, 971, 972, 974, 975, 979, 980, 981, 982, 984, 986, 988, 992, 993, 994, 1002, 1004, 1013, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "sever": [0, 4, 9, 12, 25, 31, 37, 55, 56, 57, 61, 74, 91, 113, 121, 128, 130, 133, 144, 150, 155, 156, 165, 168, 174, 182, 187, 198, 202, 218, 219, 225, 231, 246, 254, 259, 264, 281, 296, 301, 314, 345, 346, 360, 368, 369, 371, 374, 376, 379, 385, 387, 397, 399, 400, 401, 404, 406, 407, 408, 410, 438, 440, 455, 478, 490, 499, 500, 529, 546, 547, 550, 551, 554, 555, 556, 561, 579, 580, 582, 601, 636, 637, 643, 679, 680, 681, 682, 683, 684, 785, 786, 787, 790, 791, 801, 818, 819, 825, 826, 827, 828, 829, 849, 850, 857, 874, 898, 899, 900, 901, 913, 946, 967, 970, 975, 978, 979, 981, 986, 988, 992, 994, 995, 997, 998, 1001, 1002, 1004, 1011, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1033, 1036], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 43, 45, 46, 47, 50, 53, 55, 57, 60, 62, 64, 65, 70, 71, 78, 80, 86, 89, 91, 92, 100, 102, 110, 117, 119, 120, 121, 123, 143, 144, 147, 150, 151, 155, 156, 157, 163, 167, 168, 169, 170, 171, 174, 177, 182, 198, 199, 200, 202, 216, 223, 227, 229, 234, 235, 237, 238, 245, 246, 247, 249, 253, 259, 260, 262, 265, 266, 273, 279, 281, 285, 286, 301, 306, 307, 308, 311, 313, 314, 321, 322, 323, 329, 335, 337, 345, 346, 354, 356, 360, 361, 362, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 390, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 478, 483, 485, 486, 487, 499, 500, 505, 514, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 678, 679, 680, 681, 682, 683, 695, 696, 703, 706, 711, 716, 721, 726, 732, 746, 747, 748, 749, 772, 775, 776, 780, 783, 785, 786, 787, 790, 791, 792, 793, 798, 801, 805, 809, 811, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 910, 912, 914, 916, 927, 953, 967, 968, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 998, 999, 1002, 1004, 1005, 1008, 1009, 1011, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "appear": [0, 8, 46, 48, 113, 168, 254, 256, 257, 285, 286, 295, 297, 302, 321, 345, 346, 347, 369, 372, 374, 379, 387, 402, 405, 479, 480, 546, 558, 559, 570, 601, 618, 619, 621, 688, 691, 693, 703, 707, 709, 772, 779, 788, 805, 825, 826, 827, 828, 829, 892, 895, 929, 974, 980, 984, 1020, 1028, 1032, 1033], "follow": [0, 4, 7, 19, 26, 32, 37, 45, 54, 55, 57, 63, 67, 71, 72, 92, 95, 105, 110, 113, 123, 127, 142, 155, 162, 167, 168, 169, 170, 177, 179, 182, 186, 187, 196, 198, 199, 213, 216, 228, 234, 235, 237, 250, 259, 268, 269, 301, 307, 308, 311, 312, 314, 315, 316, 329, 340, 345, 346, 347, 350, 354, 356, 360, 361, 368, 369, 371, 372, 373, 374, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 390, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 421, 424, 432, 434, 436, 437, 438, 439, 440, 444, 452, 454, 455, 456, 459, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 506, 525, 529, 531, 532, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 561, 572, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 622, 624, 625, 637, 643, 649, 650, 661, 662, 671, 683, 685, 696, 700, 704, 709, 806, 827, 832, 833, 834, 836, 838, 840, 841, 842, 849, 853, 854, 855, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 879, 888, 890, 891, 898, 899, 900, 901, 905, 906, 926, 946, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 997, 998, 999, 1004, 1013, 1017, 1020, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 78, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 142, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 168, 169, 170, 174, 176, 177, 178, 179, 180, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 227, 231, 232, 233, 234, 235, 237, 239, 241, 244, 245, 246, 248, 249, 250, 254, 257, 258, 259, 260, 261, 262, 263, 265, 267, 268, 269, 270, 271, 272, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 323, 324, 325, 328, 329, 331, 332, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 351, 352, 354, 356, 361, 362, 368, 369, 371, 372, 374, 375, 376, 379, 380, 385, 386, 387, 390, 392, 393, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 425, 428, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 484, 485, 487, 488, 493, 495, 496, 497, 498, 501, 503, 506, 507, 508, 509, 510, 512, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 568, 572, 573, 574, 575, 578, 579, 581, 582, 584, 585, 593, 594, 598, 599, 601, 602, 603, 608, 618, 619, 620, 621, 622, 623, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 683, 684, 685, 691, 693, 694, 695, 696, 698, 700, 704, 707, 708, 712, 713, 714, 716, 718, 719, 720, 721, 724, 725, 726, 727, 731, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 746, 747, 758, 759, 765, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 878, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 916, 925, 926, 927, 929, 930, 931, 932, 934, 935, 936, 937, 938, 941, 942, 944, 945, 946, 952, 967, 968, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 984, 985, 988, 989, 991, 993, 994, 996, 997, 1004, 1005, 1008, 1009, 1011, 1012, 1016, 1018, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1030, 1032, 1033, 1035, 1037], "month": [0, 4, 155, 169, 307, 369, 374, 378, 388, 1020], "cycl": [0, 4, 42, 44, 50, 62, 95, 183, 245, 250, 266, 268, 314, 315, 374, 378, 391, 399, 405, 570, 571, 618, 790, 791, 906, 967, 968, 1028, 1029, 1030, 1032, 1033, 1034, 1035], "thrive": [0, 374], "intern": [0, 26, 71, 82, 100, 116, 124, 136, 151, 162, 165, 198, 279, 281, 300, 309, 322, 347, 356, 361, 369, 371, 376, 380, 383, 385, 387, 391, 394, 397, 400, 404, 405, 407, 408, 410, 411, 428, 430, 435, 456, 459, 502, 525, 526, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 584, 585, 601, 602, 629, 631, 634, 637, 643, 659, 663, 667, 669, 687, 699, 721, 724, 748, 749, 773, 816, 830, 831, 846, 847, 848, 850, 851, 855, 869, 871, 885, 886, 888, 890, 891, 892, 895, 898, 899, 900, 901, 946, 974, 975, 976, 978, 981, 984, 988, 990, 993, 994, 1002, 1020, 1023, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 56, 57, 60, 74, 80, 81, 86, 95, 115, 119, 121, 123, 127, 132, 146, 150, 155, 156, 157, 163, 168, 169, 170, 174, 191, 195, 198, 199, 200, 204, 215, 216, 219, 227, 231, 233, 234, 238, 241, 244, 245, 247, 249, 250, 254, 257, 258, 259, 262, 263, 265, 270, 271, 277, 285, 286, 287, 289, 297, 301, 302, 304, 306, 311, 312, 313, 314, 315, 317, 320, 323, 332, 337, 339, 345, 354, 356, 360, 361, 362, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 382, 383, 385, 386, 387, 388, 390, 391, 394, 397, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 412, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 452, 453, 454, 456, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 484, 485, 488, 489, 499, 500, 507, 517, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 610, 618, 619, 620, 621, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 678, 679, 680, 681, 682, 683, 686, 702, 704, 711, 731, 753, 764, 768, 769, 770, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 801, 805, 808, 809, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 850, 853, 854, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 905, 909, 910, 911, 929, 947, 963, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 990, 991, 992, 993, 994, 999, 1002, 1004, 1008, 1011, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "been": [0, 4, 9, 16, 26, 44, 53, 60, 81, 100, 110, 147, 150, 155, 157, 168, 223, 227, 229, 234, 235, 257, 259, 265, 311, 312, 313, 314, 315, 317, 322, 345, 356, 361, 368, 369, 371, 372, 373, 374, 376, 378, 380, 382, 383, 385, 386, 387, 388, 391, 394, 397, 398, 400, 402, 404, 405, 407, 410, 425, 428, 460, 462, 463, 465, 469, 478, 514, 525, 527, 540, 541, 558, 559, 572, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 602, 624, 625, 649, 650, 657, 659, 664, 666, 667, 668, 669, 711, 768, 769, 770, 781, 787, 790, 791, 793, 801, 809, 814, 815, 839, 887, 890, 968, 970, 971, 973, 974, 975, 978, 979, 981, 984, 988, 990, 992, 993, 999, 1002, 1004, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "lead": [0, 7, 25, 31, 37, 52, 55, 61, 72, 116, 120, 123, 146, 147, 168, 169, 170, 177, 182, 187, 189, 198, 202, 232, 234, 259, 260, 262, 266, 284, 285, 297, 301, 303, 306, 307, 313, 332, 346, 350, 356, 360, 361, 368, 373, 382, 383, 386, 387, 394, 397, 398, 400, 402, 404, 405, 406, 407, 409, 443, 453, 456, 459, 487, 506, 518, 526, 529, 530, 531, 534, 538, 542, 548, 549, 550, 551, 554, 555, 556, 557, 597, 621, 637, 638, 641, 643, 644, 645, 651, 652, 653, 654, 670, 682, 686, 736, 785, 790, 791, 818, 830, 831, 835, 854, 861, 871, 882, 883, 888, 890, 898, 899, 900, 901, 967, 972, 974, 975, 977, 978, 979, 981, 982, 984, 986, 988, 991, 992, 994, 1002, 1004, 1023, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1035, 1036], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 27, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 88, 91, 92, 93, 95, 98, 100, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 133, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 169, 170, 171, 174, 177, 179, 180, 181, 182, 183, 186, 187, 189, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 204, 206, 207, 215, 216, 218, 222, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 249, 250, 253, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 277, 279, 281, 284, 285, 286, 287, 288, 289, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 322, 323, 329, 330, 332, 336, 337, 338, 340, 341, 342, 345, 346, 347, 350, 352, 353, 354, 356, 360, 361, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 422, 423, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 742, 743, 744, 745, 746, 747, 748, 749, 752, 754, 755, 756, 757, 760, 761, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 921, 922, 923, 924, 925, 926, 927, 929, 930, 934, 935, 938, 941, 943, 944, 945, 946, 947, 948, 949, 952, 962, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 991, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1013, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "decis": [0, 4, 16, 25, 27, 31, 34, 56, 58, 60, 108, 109, 112, 113, 115, 128, 134, 154, 168, 180, 181, 190, 207, 208, 211, 212, 227, 228, 230, 238, 262, 282, 287, 290, 295, 301, 302, 303, 306, 319, 326, 328, 329, 330, 331, 332, 333, 334, 338, 341, 342, 345, 355, 360, 363, 370, 371, 374, 387, 398, 400, 407, 428, 460, 491, 495, 510, 527, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 584, 585, 622, 623, 624, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 689, 691, 693, 694, 698, 711, 716, 717, 725, 729, 730, 732, 746, 772, 778, 779, 782, 787, 790, 791, 801, 816, 818, 819, 821, 832, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 972, 978, 979, 980, 981, 982, 984, 985, 986, 991, 992, 993, 996, 998, 999, 1000, 1002, 1011, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1033, 1034, 1036], "make": [0, 4, 7, 8, 11, 14, 17, 20, 21, 25, 26, 27, 39, 40, 43, 44, 56, 61, 62, 67, 73, 100, 110, 116, 120, 123, 128, 144, 147, 150, 155, 158, 167, 168, 169, 170, 177, 182, 184, 187, 190, 191, 192, 194, 198, 199, 200, 202, 204, 216, 220, 229, 231, 233, 234, 235, 244, 246, 249, 250, 254, 259, 261, 262, 268, 269, 270, 288, 297, 301, 302, 307, 315, 317, 332, 342, 345, 346, 347, 356, 360, 361, 362, 363, 368, 369, 372, 373, 375, 376, 377, 379, 380, 382, 385, 387, 390, 394, 397, 398, 400, 401, 402, 404, 405, 407, 408, 409, 410, 412, 431, 432, 433, 434, 436, 438, 440, 442, 443, 444, 449, 450, 451, 453, 479, 494, 505, 506, 513, 514, 518, 523, 525, 532, 542, 543, 546, 547, 574, 575, 598, 599, 622, 640, 646, 647, 662, 682, 686, 720, 727, 732, 758, 759, 771, 785, 786, 787, 789, 792, 798, 802, 803, 804, 806, 807, 812, 813, 820, 821, 824, 857, 866, 869, 870, 874, 878, 880, 881, 882, 883, 896, 904, 910, 911, 921, 927, 933, 939, 964, 967, 968, 970, 972, 974, 975, 977, 978, 979, 980, 981, 983, 984, 985, 986, 988, 991, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1004, 1009, 1011, 1013, 1017, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "process": [0, 4, 5, 19, 26, 30, 31, 45, 46, 47, 48, 50, 66, 70, 72, 74, 79, 81, 96, 97, 99, 110, 120, 127, 136, 137, 138, 139, 160, 167, 177, 200, 202, 234, 235, 244, 245, 250, 259, 261, 262, 271, 301, 313, 317, 321, 346, 347, 350, 360, 361, 362, 363, 369, 373, 374, 376, 378, 380, 383, 385, 386, 387, 394, 400, 401, 402, 404, 405, 406, 407, 408, 409, 413, 439, 440, 466, 487, 495, 514, 525, 526, 527, 528, 529, 552, 553, 554, 579, 580, 582, 601, 602, 604, 605, 606, 608, 609, 610, 613, 614, 616, 618, 623, 624, 630, 634, 655, 663, 676, 677, 694, 713, 731, 771, 785, 787, 790, 791, 801, 811, 812, 813, 822, 823, 839, 853, 857, 859, 860, 861, 870, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 944, 946, 967, 970, 974, 978, 981, 988, 990, 992, 994, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1012, 1013, 1015, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 43, 44, 55, 68, 82, 106, 126, 149, 160, 165, 219, 223, 229, 234, 250, 254, 265, 284, 306, 312, 315, 319, 326, 332, 349, 351, 355, 360, 369, 371, 374, 376, 379, 385, 387, 388, 390, 397, 400, 402, 403, 404, 405, 407, 408, 409, 410, 432, 433, 436, 437, 441, 442, 443, 444, 445, 448, 453, 454, 463, 487, 494, 495, 499, 502, 504, 505, 512, 521, 526, 532, 535, 554, 601, 602, 603, 607, 608, 609, 680, 687, 700, 704, 816, 838, 843, 870, 882, 883, 886, 898, 899, 900, 901, 904, 926, 927, 949, 952, 975, 977, 978, 981, 983, 984, 988, 991, 994, 998, 999, 1007, 1012, 1013, 1020, 1021, 1023, 1024, 1026, 1030], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 146, 147, 150, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 330, 331, 332, 337, 338, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 763, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 926, 927, 929, 932, 933, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 959, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "laid": [0, 167, 374], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 55, 70, 71, 103, 108, 114, 116, 117, 124, 134, 139, 165, 167, 170, 182, 198, 200, 202, 206, 216, 244, 246, 257, 259, 262, 267, 271, 277, 306, 307, 314, 323, 325, 328, 329, 332, 345, 359, 369, 371, 372, 374, 376, 377, 378, 380, 385, 387, 400, 403, 405, 407, 410, 416, 426, 427, 433, 434, 436, 437, 438, 440, 463, 473, 474, 475, 476, 490, 506, 507, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 579, 580, 582, 595, 598, 599, 625, 630, 631, 632, 633, 642, 646, 657, 659, 664, 666, 667, 679, 680, 683, 692, 717, 731, 732, 787, 789, 790, 791, 792, 794, 795, 796, 797, 801, 816, 825, 826, 827, 828, 829, 834, 839, 842, 846, 847, 848, 856, 860, 867, 879, 882, 883, 905, 940, 942, 947, 968, 972, 973, 977, 978, 979, 981, 986, 988, 999, 1000, 1001, 1002, 1008, 1011, 1013, 1015, 1020, 1022, 1024, 1026, 1028, 1029, 1032, 1033, 1036], "document": [0, 3, 14, 15, 18, 22, 31, 45, 51, 57, 71, 73, 89, 90, 92, 95, 127, 179, 181, 195, 196, 213, 231, 234, 235, 260, 297, 324, 337, 347, 348, 360, 361, 362, 363, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 382, 385, 387, 388, 390, 391, 394, 397, 399, 400, 405, 408, 411, 435, 438, 439, 440, 441, 444, 448, 455, 479, 480, 490, 492, 502, 512, 514, 527, 535, 555, 579, 580, 581, 582, 585, 595, 622, 630, 634, 649, 650, 657, 659, 664, 665, 666, 667, 687, 688, 694, 696, 702, 708, 727, 748, 749, 759, 768, 769, 770, 781, 783, 787, 790, 791, 793, 801, 809, 812, 814, 817, 820, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 851, 862, 890, 895, 906, 909, 911, 924, 944, 967, 974, 976, 978, 979, 980, 981, 982, 986, 992, 995, 996, 997, 1002, 1006, 1011, 1013, 1021, 1022, 1026], "peopl": [0, 6, 70, 168, 236, 262, 345, 346, 361, 362, 369, 371, 373, 374, 378, 388, 406, 484, 485, 632, 827, 998, 1009], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 32, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 92, 95, 97, 100, 103, 106, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 143, 144, 146, 147, 150, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 202, 207, 209, 216, 219, 220, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 241, 245, 246, 247, 249, 253, 254, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 277, 279, 281, 284, 285, 289, 292, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 315, 316, 317, 320, 322, 323, 324, 325, 330, 332, 334, 336, 340, 341, 345, 346, 347, 350, 354, 356, 360, 361, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 421, 424, 425, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 479, 480, 484, 486, 487, 489, 491, 492, 493, 494, 495, 499, 500, 501, 503, 506, 507, 508, 509, 510, 511, 514, 515, 517, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 691, 692, 693, 695, 696, 698, 700, 703, 704, 706, 707, 708, 709, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 730, 731, 733, 735, 736, 738, 740, 741, 743, 744, 746, 747, 751, 752, 753, 755, 757, 758, 759, 763, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 799, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 914, 915, 916, 919, 921, 926, 927, 928, 931, 932, 934, 938, 941, 942, 944, 946, 949, 952, 953, 957, 958, 959, 962, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "current": [0, 8, 46, 110, 155, 168, 216, 301, 311, 361, 362, 369, 372, 374, 375, 376, 379, 383, 385, 387, 388, 396, 397, 399, 400, 404, 407, 408, 409, 410, 431, 437, 441, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 523, 526, 532, 544, 545, 548, 549, 550, 551, 553, 555, 556, 557, 567, 582, 584, 601, 608, 617, 618, 637, 649, 658, 662, 666, 667, 668, 669, 778, 785, 786, 835, 839, 847, 848, 866, 878, 888, 898, 899, 900, 901, 904, 945, 953, 967, 972, 974, 978, 981, 982, 988, 999, 1011, 1028, 1032, 1034, 1035, 1036], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 20, 24, 27, 30, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 67, 70, 71, 78, 79, 82, 85, 90, 91, 92, 95, 96, 97, 100, 101, 104, 105, 106, 109, 110, 112, 116, 117, 119, 120, 122, 123, 124, 126, 127, 128, 129, 131, 139, 142, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 165, 168, 169, 171, 174, 178, 179, 180, 182, 184, 186, 187, 188, 189, 190, 196, 198, 200, 202, 204, 205, 207, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 227, 228, 231, 233, 234, 235, 237, 244, 246, 247, 249, 254, 259, 260, 261, 262, 263, 266, 270, 272, 273, 279, 282, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 298, 300, 301, 304, 307, 309, 311, 313, 314, 315, 316, 317, 321, 322, 329, 330, 331, 332, 333, 336, 337, 338, 339, 342, 345, 346, 347, 351, 352, 353, 354, 356, 360, 361, 362, 363, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 380, 381, 382, 383, 387, 388, 389, 390, 391, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 408, 410, 412, 414, 421, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 480, 487, 489, 491, 495, 501, 502, 510, 516, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 563, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 699, 702, 707, 711, 725, 731, 732, 748, 749, 769, 770, 785, 786, 787, 789, 790, 791, 796, 801, 805, 806, 812, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 905, 908, 910, 911, 914, 927, 929, 936, 938, 962, 966, 967, 969, 970, 972, 974, 975, 976, 979, 980, 981, 982, 983, 985, 986, 988, 990, 991, 992, 993, 994, 998, 999, 1002, 1004, 1008, 1009, 1011, 1012, 1013, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "mainten": [0, 374, 382, 385, 390, 393, 974, 999, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "j\u00e9r\u00e9mie": [0, 1, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "du": [0, 1, 2, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "boisberrang": [0, 1, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "jori": [0, 1, 1027, 1028, 1029, 1032, 1033], "van": [0, 1, 368, 402, 460, 465, 525, 618, 683, 687, 968, 975, 978, 984, 1002, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1031, 1032, 1033, 1035, 1036], "den": [0, 1, 1021, 1022, 1027, 1028, 1029, 1032, 1033], "bossch": [0, 1, 1027, 1028, 1029, 1033], "lo\u00efc": [0, 1, 1028, 1031, 1033, 1034, 1035], "est\u00e8v": [0, 1, 1028, 1031, 1033, 1034, 1035], "thoma": [0, 1, 103, 227, 301, 361, 364, 388, 886, 974, 988, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "j": [0, 1, 11, 17, 37, 38, 40, 43, 61, 70, 79, 80, 81, 109, 110, 113, 114, 125, 151, 163, 169, 210, 222, 236, 244, 258, 259, 264, 270, 283, 289, 292, 305, 316, 354, 361, 368, 369, 371, 378, 380, 385, 397, 398, 400, 402, 404, 405, 407, 408, 410, 411, 428, 431, 435, 437, 444, 445, 460, 465, 489, 504, 507, 508, 509, 511, 519, 522, 525, 527, 528, 529, 531, 532, 538, 550, 551, 584, 585, 623, 624, 628, 635, 636, 639, 640, 657, 658, 660, 671, 679, 680, 681, 683, 684, 685, 687, 696, 699, 701, 705, 707, 709, 712, 713, 714, 716, 745, 746, 748, 749, 764, 768, 778, 779, 780, 781, 819, 820, 827, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 861, 870, 898, 899, 967, 968, 972, 974, 975, 976, 978, 979, 980, 981, 982, 984, 985, 986, 988, 990, 992, 993, 994, 996, 1013, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "fan": [0, 1, 361, 388, 993, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "olivi": [0, 1, 14, 17, 37, 48, 61, 187, 198, 216, 220, 260, 262, 345, 346, 347, 388, 886, 991, 997, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "grisel": [0, 1, 14, 17, 37, 48, 61, 187, 198, 216, 220, 260, 262, 345, 346, 347, 388, 997, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "yaroslav": [0, 1, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1036], "halchenko": [0, 1, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1036], "tim": [0, 1, 115, 129, 1020, 1025, 1026, 1029, 1030, 1031, 1033, 1035, 1036], "head": [0, 1, 26, 71, 115, 129, 155, 168, 186, 187, 216, 241, 249, 307, 311, 316, 374, 382, 405, 1002, 1025, 1026, 1035, 1036], "nicola": [0, 1, 147, 305, 649, 974, 991, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "hug": [0, 1, 147, 305, 996, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "adrin": [0, 1, 65, 341, 388, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "jalali": [0, 1, 65, 341, 388, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "julien": [0, 1, 649, 974, 1002, 1020, 1023, 1027, 1028, 1032, 1033, 1034, 1035, 1036], "jerphanion": [0, 1, 1032, 1033, 1034, 1035, 1036], "guillaum": [0, 1, 5, 7, 72, 75, 100, 130, 150, 155, 156, 157, 159, 186, 187, 200, 220, 301, 1002, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "lemaitr": [0, 1, 5, 7, 72, 75, 100, 130, 150, 155, 156, 157, 159, 186, 187, 200, 220, 301, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "christian": [0, 1, 19, 198, 199, 200, 216, 345, 346, 369, 1002, 1013, 1020, 1021, 1024, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "lorentzen": [0, 1, 198, 199, 200, 216, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "jan": [0, 1, 24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 199, 233, 869, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1032, 1036], "hendrik": [0, 1, 24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233, 1020, 1023, 1024, 1025, 1026], "metzen": [0, 1, 24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233, 1020, 1023, 1024, 1025, 1026], "andrea": [0, 1, 31, 74, 100, 114, 189, 232, 302, 303, 322, 340, 341, 388, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "mueller": [0, 1, 74, 100, 114, 189, 232, 322, 340, 341, 1002, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "vlad": [0, 1, 95, 235, 298, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029], "nicula": [0, 1, 95, 235, 298, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029], "joel": [0, 1, 72, 388, 408, 526, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "nothman": [0, 1, 72, 388, 408, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "hanmin": [0, 1, 302, 1027, 1028, 1029, 1030, 1031], "qin": [0, 1, 302, 371, 408, 1027, 1028, 1029, 1030, 1031], "omar": [0, 1, 1030, 1035, 1036], "salman": [0, 1, 1035, 1036], "bertrand": [0, 1, 1020, 1026, 1027, 1032, 1033], "thirion": [0, 1, 1020, 1026, 1027, 1033], "tom": [0, 1, 190, 206, 279, 281, 303, 304, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "dupr\u00e9": [0, 1, 303, 304, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "la": [0, 1, 190, 206, 279, 281, 303, 304, 307, 371, 1002, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "tour": [0, 1, 190, 206, 279, 281, 303, 304, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "nell": [0, 1, 39, 222, 230, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1032], "roman": [0, 1, 198, 216, 618, 904, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "yurchak": [0, 1, 198, 216, 408, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "meekail": [0, 1, 1034, 1035, 1036], "zain": [0, 1, 1034, 1035, 1036], "pleas": [0, 12, 17, 26, 71, 72, 109, 115, 117, 118, 124, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 202, 228, 229, 230, 232, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 279, 289, 298, 307, 311, 312, 313, 314, 315, 316, 317, 322, 354, 361, 368, 369, 372, 374, 375, 376, 378, 382, 385, 386, 387, 390, 394, 396, 399, 400, 407, 408, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 487, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 618, 619, 620, 621, 622, 623, 624, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 813, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 879, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 967, 978, 982, 988, 992, 993, 998, 999, 1001, 1004, 1011, 1013, 1020, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "do": [0, 4, 10, 25, 42, 55, 61, 67, 74, 90, 99, 101, 102, 105, 114, 117, 119, 121, 123, 124, 130, 137, 144, 155, 162, 168, 169, 170, 195, 198, 202, 216, 219, 221, 234, 235, 250, 254, 257, 260, 262, 277, 279, 281, 285, 314, 325, 329, 332, 337, 340, 345, 346, 347, 354, 356, 360, 361, 362, 369, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 387, 388, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 441, 452, 494, 527, 529, 533, 535, 543, 546, 572, 573, 579, 580, 582, 623, 624, 636, 637, 643, 646, 647, 650, 657, 659, 667, 727, 753, 768, 772, 804, 807, 822, 823, 827, 854, 855, 857, 864, 868, 870, 875, 876, 878, 879, 880, 881, 898, 899, 900, 901, 909, 952, 967, 970, 972, 974, 975, 978, 979, 981, 982, 986, 988, 993, 994, 998, 999, 1002, 1004, 1011, 1012, 1013, 1020, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "email": [0, 345, 374, 385, 408, 825, 980, 1002], "directli": [0, 6, 19, 27, 45, 46, 56, 71, 115, 147, 158, 182, 186, 198, 204, 216, 228, 264, 298, 301, 315, 347, 356, 360, 372, 374, 375, 376, 378, 380, 386, 387, 388, 396, 397, 398, 400, 401, 402, 403, 404, 408, 410, 433, 443, 453, 455, 460, 465, 518, 558, 559, 560, 561, 588, 602, 611, 623, 634, 637, 638, 643, 644, 651, 652, 653, 654, 655, 668, 672, 675, 681, 764, 768, 771, 780, 781, 787, 790, 791, 801, 835, 849, 850, 851, 857, 867, 869, 872, 879, 946, 967, 974, 976, 981, 983, 985, 988, 993, 994, 999, 1005, 1008, 1009, 1020, 1028, 1029, 1031, 1032, 1033, 1036], "ask": [0, 162, 163, 259, 363, 373, 374, 378, 379, 382, 387, 388, 409, 832, 833, 834, 836, 838, 840, 841, 842, 996, 1001, 1036], "assist": [0, 374, 385, 988, 1002], "report": [0, 4, 8, 32, 70, 75, 144, 158, 186, 257, 267, 311, 320, 356, 369, 373, 375, 376, 377, 380, 382, 385, 387, 390, 394, 400, 404, 602, 640, 649, 655, 676, 677, 691, 704, 719, 720, 728, 773, 774, 777, 819, 828, 847, 848, 885, 903, 921, 974, 981, 998, 999, 1001, 1021, 1024, 1027, 1028, 1030, 1031, 1033, 1035, 1036], "issu": [0, 4, 25, 79, 86, 198, 216, 264, 308, 361, 363, 368, 377, 378, 379, 382, 383, 385, 387, 388, 389, 390, 391, 394, 396, 400, 402, 403, 408, 410, 440, 443, 453, 464, 473, 474, 475, 525, 530, 534, 564, 576, 577, 579, 580, 582, 602, 618, 682, 686, 759, 861, 866, 878, 917, 967, 968, 975, 981, 986, 988, 993, 998, 999, 1001, 1012, 1013, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1035], "instead": [0, 4, 5, 6, 20, 34, 48, 53, 55, 56, 57, 71, 100, 113, 118, 127, 144, 147, 150, 198, 200, 213, 216, 223, 250, 255, 256, 260, 261, 277, 284, 301, 311, 312, 313, 314, 315, 332, 334, 345, 347, 356, 360, 361, 368, 369, 372, 373, 374, 375, 376, 378, 379, 382, 383, 385, 386, 387, 394, 396, 400, 401, 403, 404, 405, 406, 407, 408, 409, 411, 423, 428, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 447, 450, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 500, 501, 524, 525, 526, 528, 529, 530, 531, 532, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 585, 598, 599, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 618, 621, 623, 626, 629, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 681, 685, 698, 736, 764, 768, 769, 770, 773, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 799, 801, 805, 806, 807, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 851, 852, 853, 855, 856, 857, 862, 863, 868, 869, 870, 880, 881, 884, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 903, 904, 916, 922, 927, 953, 967, 968, 970, 974, 975, 977, 978, 979, 982, 983, 988, 992, 993, 994, 998, 1001, 1009, 1011, 1013, 1017, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "see": [0, 4, 5, 7, 20, 24, 25, 27, 37, 44, 49, 50, 53, 55, 57, 58, 62, 64, 65, 67, 69, 80, 86, 89, 90, 95, 100, 102, 106, 110, 111, 112, 113, 116, 117, 118, 119, 120, 122, 124, 127, 130, 136, 143, 144, 145, 147, 150, 155, 156, 157, 162, 165, 168, 169, 171, 174, 177, 178, 179, 182, 189, 199, 200, 201, 202, 204, 215, 216, 219, 221, 229, 231, 234, 238, 239, 241, 245, 246, 247, 253, 254, 256, 258, 259, 260, 261, 262, 266, 268, 269, 270, 273, 274, 279, 285, 286, 288, 292, 301, 307, 308, 311, 312, 313, 314, 315, 316, 317, 322, 332, 345, 346, 347, 350, 351, 352, 353, 356, 360, 361, 362, 366, 367, 368, 369, 371, 372, 373, 374, 376, 378, 380, 381, 382, 385, 386, 387, 390, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 424, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 478, 479, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 600, 601, 602, 605, 610, 613, 614, 618, 619, 620, 621, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 692, 697, 699, 702, 704, 733, 753, 764, 768, 769, 770, 771, 778, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 798, 799, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 926, 927, 947, 949, 952, 967, 968, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1002, 1004, 1006, 1011, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036], "what": [0, 4, 9, 12, 40, 45, 52, 53, 86, 96, 100, 119, 167, 168, 187, 204, 206, 214, 229, 234, 241, 297, 345, 347, 350, 356, 361, 369, 374, 375, 376, 378, 380, 382, 386, 387, 388, 389, 391, 400, 406, 407, 408, 494, 527, 579, 580, 582, 637, 643, 687, 875, 876, 878, 879, 880, 881, 898, 899, 900, 901, 977, 978, 979, 981, 994, 999, 1001, 1004, 1020, 1027], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 55, 61, 70, 71, 72, 73, 78, 85, 95, 99, 103, 104, 105, 113, 116, 120, 121, 122, 123, 124, 130, 133, 147, 150, 151, 156, 162, 168, 177, 182, 186, 187, 194, 212, 213, 214, 219, 222, 227, 232, 233, 237, 246, 250, 253, 257, 258, 259, 260, 263, 266, 267, 270, 271, 273, 277, 283, 288, 302, 307, 313, 314, 332, 335, 340, 345, 346, 347, 353, 360, 361, 363, 368, 371, 373, 374, 377, 380, 386, 387, 390, 391, 397, 398, 400, 404, 405, 407, 408, 409, 410, 423, 434, 437, 438, 440, 442, 443, 444, 450, 453, 456, 463, 473, 474, 475, 529, 536, 537, 543, 545, 547, 548, 549, 550, 551, 553, 555, 556, 557, 559, 561, 584, 585, 588, 593, 601, 602, 626, 628, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 666, 667, 669, 670, 671, 679, 680, 681, 684, 685, 694, 699, 710, 711, 712, 713, 714, 718, 719, 729, 730, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 773, 774, 775, 777, 780, 781, 782, 784, 785, 786, 787, 790, 791, 801, 813, 815, 818, 823, 824, 833, 841, 847, 848, 891, 893, 896, 898, 899, 900, 901, 967, 972, 973, 974, 975, 978, 981, 982, 984, 992, 994, 998, 999, 1002, 1004, 1009, 1013, 1020, 1023, 1026, 1028, 1029, 1030, 1033, 1034, 1035, 1036], "wai": [0, 4, 17, 27, 50, 60, 71, 74, 115, 122, 126, 128, 147, 157, 168, 170, 171, 199, 202, 203, 213, 229, 230, 233, 234, 238, 254, 259, 266, 268, 301, 302, 314, 316, 317, 356, 360, 361, 362, 368, 370, 372, 373, 376, 377, 382, 383, 387, 388, 390, 391, 394, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 415, 434, 435, 442, 443, 444, 450, 451, 453, 454, 460, 487, 546, 547, 554, 563, 580, 590, 591, 602, 623, 657, 658, 667, 668, 669, 695, 697, 708, 726, 727, 744, 745, 747, 753, 764, 768, 778, 783, 811, 819, 836, 857, 863, 868, 874, 900, 901, 949, 952, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979, 981, 983, 984, 985, 986, 988, 990, 992, 993, 994, 998, 999, 1001, 1002, 1004, 1012, 1013, 1020, 1022, 1028, 1033, 1034], "question": [0, 136, 167, 259, 340, 363, 373, 374, 379, 382, 404, 407, 819, 892, 895, 974, 977, 978, 984, 996, 1002], "faq": [0, 382, 404, 683, 975, 988], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 57, 60, 69, 70, 71, 74, 78, 80, 86, 101, 105, 110, 111, 114, 118, 119, 120, 121, 123, 124, 128, 130, 144, 155, 157, 165, 168, 169, 170, 171, 174, 179, 187, 188, 194, 199, 200, 201, 202, 205, 206, 212, 216, 223, 224, 229, 232, 234, 236, 237, 238, 240, 250, 254, 255, 257, 259, 260, 261, 266, 268, 269, 271, 272, 273, 279, 281, 283, 285, 286, 297, 306, 308, 312, 313, 314, 317, 329, 330, 332, 335, 340, 345, 346, 350, 354, 360, 361, 362, 363, 369, 372, 373, 375, 376, 377, 379, 382, 386, 387, 388, 391, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 414, 424, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 613, 614, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 695, 711, 747, 780, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 813, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 967, 968, 972, 973, 974, 975, 977, 978, 984, 985, 986, 988, 990, 991, 993, 994, 997, 999, 1001, 1002, 1004, 1006, 1008, 1013, 1015, 1020, 1022, 1025, 1031, 1034, 1035, 1036], "you": [0, 14, 16, 20, 24, 71, 118, 119, 122, 124, 144, 147, 163, 169, 186, 199, 200, 202, 229, 234, 241, 247, 254, 259, 260, 266, 274, 285, 311, 312, 315, 317, 321, 324, 345, 356, 360, 361, 362, 368, 369, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 386, 387, 390, 391, 394, 396, 398, 399, 400, 401, 402, 404, 407, 408, 409, 411, 412, 417, 428, 434, 435, 437, 438, 440, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 487, 491, 494, 495, 500, 501, 523, 524, 525, 527, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 570, 571, 572, 573, 579, 580, 581, 582, 585, 598, 599, 601, 602, 618, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 681, 691, 775, 786, 787, 788, 789, 790, 791, 792, 794, 796, 801, 802, 803, 804, 805, 806, 807, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 840, 841, 847, 848, 849, 850, 853, 854, 855, 856, 857, 862, 863, 864, 869, 870, 875, 876, 878, 879, 880, 881, 883, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 927, 944, 967, 968, 973, 974, 978, 979, 982, 984, 985, 988, 989, 992, 993, 994, 997, 998, 1001, 1002, 1004, 1005, 1008, 1011, 1013, 1020, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 20, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 70, 71, 72, 73, 78, 79, 80, 81, 82, 86, 96, 98, 99, 100, 101, 103, 105, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 142, 143, 144, 146, 147, 150, 155, 156, 157, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 182, 183, 186, 187, 189, 191, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 206, 214, 215, 216, 219, 220, 221, 227, 228, 229, 230, 231, 233, 234, 238, 241, 244, 245, 246, 247, 249, 250, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 266, 268, 270, 271, 273, 274, 277, 279, 281, 283, 284, 285, 286, 288, 296, 297, 298, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 325, 329, 330, 332, 335, 340, 345, 346, 347, 352, 353, 354, 356, 360, 361, 362, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 386, 387, 388, 389, 390, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 423, 425, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 445, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 463, 473, 474, 475, 478, 487, 490, 494, 499, 500, 503, 512, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 570, 571, 572, 573, 574, 575, 579, 580, 582, 583, 585, 588, 593, 594, 595, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 623, 625, 626, 629, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 680, 682, 683, 684, 685, 686, 689, 691, 692, 693, 695, 698, 700, 702, 703, 709, 711, 712, 713, 714, 716, 717, 719, 720, 722, 723, 727, 728, 729, 730, 732, 733, 736, 742, 745, 746, 747, 748, 749, 753, 769, 770, 772, 773, 774, 775, 777, 778, 779, 782, 783, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 847, 848, 849, 850, 853, 854, 855, 857, 858, 859, 863, 864, 865, 868, 869, 870, 875, 882, 883, 888, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 902, 903, 906, 908, 910, 914, 916, 921, 926, 927, 933, 938, 941, 944, 946, 948, 949, 952, 959, 962, 963, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "contribut": [0, 13, 20, 124, 155, 182, 202, 268, 306, 363, 371, 372, 376, 377, 378, 382, 387, 388, 390, 405, 406, 407, 410, 438, 440, 544, 545, 550, 551, 716, 719, 746, 972, 978, 981, 986, 993, 996, 998, 999, 1002, 1011, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "activ": [0, 165, 206, 244, 250, 260, 319, 326, 347, 368, 369, 372, 374, 375, 380, 382, 385, 387, 388, 390, 401, 487, 493, 517, 623, 626, 628, 641, 642, 644, 645, 646, 654, 655, 656, 673, 674, 675, 676, 677, 704, 709, 785, 846, 847, 848, 886, 944, 974, 975, 976, 977, 981, 982, 983, 991], "who": [0, 70, 361, 363, 369, 374, 381, 388, 390, 832, 833, 834, 836, 838, 840, 841, 842, 996, 998, 1022, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "also": [0, 4, 7, 11, 17, 19, 20, 24, 25, 26, 27, 32, 46, 48, 53, 57, 58, 60, 64, 70, 71, 78, 80, 85, 86, 95, 103, 105, 110, 113, 116, 118, 120, 122, 123, 124, 128, 130, 143, 144, 145, 147, 150, 152, 155, 163, 168, 169, 170, 171, 174, 178, 179, 181, 187, 190, 191, 194, 198, 199, 200, 202, 203, 207, 215, 216, 219, 230, 232, 234, 238, 250, 257, 259, 260, 261, 262, 265, 266, 268, 269, 270, 279, 282, 287, 290, 292, 295, 301, 302, 303, 305, 306, 311, 312, 313, 314, 325, 328, 329, 330, 332, 334, 345, 346, 347, 350, 351, 354, 356, 360, 361, 362, 367, 368, 369, 371, 372, 373, 374, 376, 377, 380, 382, 383, 385, 386, 387, 388, 390, 394, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 428, 429, 430, 432, 433, 436, 437, 438, 439, 441, 443, 453, 454, 456, 458, 473, 475, 483, 487, 489, 494, 499, 523, 524, 526, 527, 532, 537, 540, 542, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 598, 599, 600, 601, 602, 613, 623, 624, 626, 634, 635, 636, 637, 638, 641, 643, 644, 645, 647, 651, 652, 653, 654, 663, 667, 669, 672, 675, 678, 682, 685, 686, 701, 704, 713, 719, 720, 728, 733, 753, 769, 770, 773, 774, 777, 785, 786, 787, 790, 791, 801, 804, 807, 812, 813, 814, 815, 816, 817, 819, 829, 832, 833, 834, 836, 837, 838, 840, 841, 842, 846, 847, 848, 850, 852, 853, 858, 859, 863, 867, 870, 875, 879, 892, 895, 898, 899, 900, 901, 910, 929, 942, 946, 967, 968, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 989, 991, 992, 993, 994, 998, 999, 1001, 1002, 1004, 1009, 1011, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "help": [0, 4, 9, 11, 16, 55, 70, 74, 100, 106, 169, 182, 216, 219, 260, 262, 298, 329, 332, 346, 347, 356, 360, 361, 372, 375, 376, 377, 378, 379, 380, 382, 383, 387, 388, 389, 394, 400, 401, 404, 408, 410, 424, 527, 568, 618, 641, 645, 656, 676, 677, 683, 705, 826, 898, 899, 900, 901, 968, 972, 973, 975, 977, 978, 980, 982, 988, 989, 994, 997, 998, 999, 1001, 1002, 1013, 1026, 1027, 1028, 1031, 1034], "triag": [0, 363, 374, 377, 388], "pr": [0, 132, 361, 374, 377, 382, 408, 731, 978, 1030, 1032], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 65, 70, 71, 72, 73, 74, 75, 79, 81, 85, 86, 88, 89, 90, 93, 95, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 144, 145, 147, 151, 152, 153, 154, 155, 158, 162, 163, 167, 168, 169, 170, 171, 174, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 250, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 295, 296, 297, 301, 302, 303, 304, 305, 306, 307, 308, 311, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 360, 361, 363, 366, 367, 369, 371, 375, 376, 377, 378, 379, 380, 382, 383, 385, 386, 394, 397, 398, 400, 404, 406, 408, 409, 410, 412, 416, 421, 423, 428, 431, 434, 437, 438, 440, 443, 445, 449, 450, 451, 453, 455, 456, 458, 460, 463, 465, 473, 474, 475, 479, 482, 483, 486, 487, 488, 494, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 529, 531, 532, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 573, 574, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 601, 602, 605, 606, 609, 610, 611, 613, 614, 618, 619, 620, 621, 623, 624, 625, 626, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 676, 677, 680, 681, 682, 683, 684, 685, 686, 692, 695, 697, 708, 712, 713, 714, 727, 733, 747, 768, 771, 775, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 820, 821, 822, 823, 824, 830, 831, 833, 835, 836, 838, 839, 840, 841, 842, 846, 847, 848, 850, 853, 854, 855, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 890, 891, 892, 893, 895, 896, 899, 901, 902, 903, 904, 921, 922, 926, 927, 930, 931, 943, 947, 949, 952, 967, 968, 970, 972, 973, 975, 977, 978, 979, 981, 983, 984, 985, 986, 990, 991, 993, 994, 996, 998, 1000, 1001, 1002, 1004, 1007, 1011, 1012, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036], "arturo": [0, 37, 57, 116, 177, 182, 260, 262, 306, 345, 346, 347, 364, 1034, 1035, 1036], "amor": [0, 37, 57, 116, 177, 182, 260, 262, 306, 345, 346, 347, 364, 1034, 1035, 1036], "juan": [0, 364, 1020, 1031, 1032, 1033, 1034, 1035], "carlo": [0, 232, 364, 407, 410, 602, 632, 633, 970, 983, 1020, 1031, 1032, 1033, 1034, 1035, 1036], "alfaro": [0, 364, 1031, 1032, 1033, 1034, 1035], "jim\u00e9nez": [0, 364, 1028, 1031, 1032, 1033, 1034, 1035], "luci": [0, 265, 364, 1031, 1032, 1033, 1034, 1035, 1036], "liu": [0, 265, 364, 554, 716, 746, 978, 984, 1023, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036], "maxwel": [0, 364, 1030, 1033, 1034, 1035, 1036], "martin": [0, 364, 712, 713, 714, 974, 978, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035], "loyola": [0, 364, 1033, 1034], "sylvain": [0, 364, 1024, 1029, 1030, 1031, 1032, 1033, 1034], "mari\u00e9": [0, 364, 1029, 1030, 1031, 1032, 1033, 1034], "norbert": [0, 364, 1022, 1032, 1033, 1034], "prein": [0, 364, 1032, 1033, 1034], "reshama": [0, 358, 364, 1028, 1029, 1031, 1032, 1033, 1034, 1035], "shaikh": [0, 358, 364, 1028, 1029, 1031, 1032, 1033, 1034, 1035], "albert": [0, 227, 364, 1027, 1028, 1029, 1032, 1033], "maren": [0, 364, 1031, 1032, 1033, 1034, 1035, 1036], "westermann": [0, 364, 1031, 1032, 1033, 1034, 1035, 1036], "around": [0, 4, 26, 37, 52, 85, 110, 113, 123, 156, 169, 174, 234, 262, 298, 320, 322, 323, 332, 335, 345, 346, 347, 356, 369, 371, 374, 380, 385, 391, 400, 404, 405, 408, 410, 462, 463, 506, 535, 611, 631, 640, 695, 785, 793, 809, 836, 838, 840, 841, 842, 870, 974, 975, 977, 978, 984, 988, 992, 998, 999, 1002, 1011, 1013, 1024, 1025], "lauren": [0, 357, 683, 687, 975, 1032, 1035], "burk": [0, 357, 1035], "francoisgoupil": [0, 357, 1034], "longer": [0, 4, 53, 113, 169, 183, 297, 314, 374, 376, 400, 404, 407, 408, 410, 440, 527, 554, 973, 977, 978, 980, 983, 993, 1002, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "mathieu": [0, 2, 24, 48, 100, 189, 199, 220, 235, 260, 345, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1033], "blondel": [0, 2, 24, 48, 100, 189, 199, 220, 235, 260, 345, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1033], "lar": [0, 2, 14, 98, 147, 165, 176, 187, 217, 345, 346, 347, 371, 462, 463, 469, 492, 522, 528, 530, 533, 534, 536, 537, 539, 642, 643, 644, 645, 646, 647, 654, 655, 656, 669, 673, 674, 675, 676, 677, 1000, 1011, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1033], "buitinck": [0, 2, 14, 345, 346, 347, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "noel": [0, 2, 109, 110, 111, 112, 1020, 1021, 1022, 1023, 1024, 1032], "daw": [0, 2, 109, 110, 111, 112, 1020, 1021, 1022, 1023, 1024], "dubourg": [0, 2, 153, 157, 1002, 1020, 1024], "edouard": [0, 2, 1020], "duchesnai": [0, 2, 1020], "alexand": [0, 2, 400, 405, 526, 856, 1022, 1023, 1024, 1026, 1027, 1028, 1032, 1033, 1034], "fabisch": [0, 2, 1022, 1023, 1024, 1026], "virgil": [0, 2, 9, 1020, 1021, 1023], "fritsch": [0, 2, 9, 1020, 1021, 1023], "satrajit": [0, 2, 1020, 1021], "ghosh": [0, 2, 400, 1020, 1021], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1020, 1023, 1028, 1029, 1030, 1031, 1034], "gorgolewski": [0, 2, 1020, 1023], "jaqu": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 181, 194, 195, 196, 221, 337, 340, 1020, 1021, 1022, 1023], "grobler": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 181, 194, 195, 196, 221, 337, 340, 1020, 1021, 1022, 1023], "brian": [0, 2, 46, 699, 978, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1030, 1031, 1033, 1034], "holt": [0, 2, 1020], "arnaud": [0, 2, 1021, 1022, 1023, 1024, 1025, 1026], "joli": [0, 2, 1021, 1022, 1023, 1024, 1025, 1026], "thoui": [0, 2, 1020], "rai": [0, 2, 946, 978, 1020, 1030, 1032, 1033], "jone": [0, 2, 369, 1020], "kyle": [0, 2, 99, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032], "kastner": [0, 2, 99, 1022, 1023, 1024, 1031, 1032], "manoj": [0, 2, 42, 147, 180, 1023, 1024, 1025, 1026, 1027], "kumar": [0, 2, 42, 147, 180, 369, 400, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "robert": [0, 2, 48, 72, 147, 186, 371, 405, 519, 526, 619, 647, 712, 713, 714, 725, 856, 968, 974, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1035], "layton": [0, 2, 48, 1020, 1021, 1022, 1023, 1025], "wei": [0, 2, 992, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1033, 1036], "li": [0, 2, 323, 369, 630, 633, 687, 716, 746, 883, 967, 970, 978, 981, 988, 990, 993, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "paolo": [0, 2, 1020, 1024, 1030], "losi": [0, 2, 1020], "gill": [0, 2, 113, 114, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "loupp": [0, 2, 113, 114, 407, 546, 547, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "chiara": [0, 2, 365, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "marmo": [0, 2, 365, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "jarrod": [0, 2, 1029, 1036], "millman": [0, 2, 1029, 1036], "passo": [0, 2, 1020, 1021], "peter": [0, 2, 11, 16, 63, 109, 122, 124, 125, 260, 345, 346, 400, 439, 441, 448, 640, 780, 781, 974, 978, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1035, 1036], "prettenhof": [0, 2, 11, 16, 109, 122, 124, 125, 260, 345, 346, 1020, 1021, 1022, 1023, 1024, 1025], "venkat": [0, 2], "raghav": [0, 2, 121, 263, 301, 1024, 1025, 1026, 1027, 1028, 1032], "rajagopalan": [0, 2, 1028, 1032], "jacob": [0, 2, 1025, 1026, 1027], "schreiber": [0, 2, 1025, 1026, 1027], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1020, 1021], "jake": [0, 2, 11, 157, 199, 219, 247, 284, 292, 997, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1034], "vanderpla": [0, 2, 11, 157, 199, 219, 247, 284, 292, 997, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028], "ward": [0, 2, 36, 39, 44, 52, 54, 56, 62, 68, 165, 171, 408, 432, 436, 454, 521, 843, 1020, 1023, 1025], "farlei": [0, 2, 1020], "ron": [0, 2, 246, 1020], "weiss": [0, 2, 246, 400, 682, 1020], "respons": [0, 147, 169, 194, 198, 201, 234, 269, 345, 371, 380, 387, 399, 400, 401, 407, 410, 437, 455, 473, 474, 475, 622, 623, 624, 665, 666, 689, 691, 693, 785, 786, 979, 985, 996, 1004], "If": [0, 4, 11, 16, 27, 32, 42, 49, 55, 71, 82, 98, 118, 123, 130, 159, 163, 168, 179, 198, 213, 215, 234, 259, 266, 274, 284, 292, 301, 306, 307, 332, 340, 341, 345, 346, 347, 354, 356, 360, 361, 368, 369, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 387, 388, 390, 391, 394, 397, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 421, 424, 425, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 503, 505, 506, 510, 513, 514, 515, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 698, 702, 703, 704, 705, 707, 708, 709, 716, 717, 718, 719, 720, 721, 722, 726, 728, 731, 732, 735, 736, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 751, 753, 754, 756, 757, 758, 759, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 793, 799, 801, 804, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 919, 925, 927, 929, 931, 937, 941, 944, 946, 947, 949, 952, 953, 959, 962, 963, 964, 965, 967, 968, 970, 972, 973, 974, 975, 976, 978, 981, 982, 984, 985, 988, 990, 992, 993, 994, 995, 998, 999, 1001, 1004, 1005, 1011, 1012, 1013, 1020, 1023, 1024, 1025, 1026, 1029, 1030, 1032, 1033, 1034, 1036], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 86, 90, 91, 92, 94, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134, 136, 137, 138, 139, 143, 144, 146, 147, 150, 151, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 191, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 210, 213, 215, 216, 217, 219, 220, 221, 222, 224, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 245, 246, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 275, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 321, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 347, 348, 350, 352, 353, 354, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 381, 383, 386, 387, 388, 389, 390, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 406, 410, 411, 412, 413, 416, 418, 419, 421, 422, 430, 447, 448, 450, 452, 454, 462, 469, 471, 472, 476, 484, 494, 499, 500, 507, 522, 536, 537, 538, 539, 546, 563, 565, 566, 568, 569, 574, 576, 577, 583, 586, 587, 589, 592, 594, 600, 607, 611, 612, 615, 620, 627, 629, 633, 641, 642, 645, 651, 652, 654, 658, 666, 674, 676, 677, 678, 685, 686, 687, 690, 702, 705, 706, 707, 712, 713, 714, 716, 718, 720, 722, 725, 726, 729, 733, 736, 741, 746, 748, 749, 753, 754, 756, 757, 758, 759, 761, 764, 765, 766, 767, 770, 771, 773, 782, 794, 795, 796, 797, 798, 799, 800, 810, 818, 820, 822, 824, 826, 830, 831, 840, 841, 842, 844, 852, 853, 856, 858, 861, 872, 873, 875, 877, 878, 880, 881, 882, 885, 889, 891, 900, 901, 902, 903, 906, 909, 910, 911, 916, 917, 926, 927, 934, 941, 945, 946, 947, 949, 950, 954, 955, 956, 960, 961, 967, 968, 970, 971, 973, 976, 977, 979, 980, 981, 983, 984, 985, 986, 988, 989, 990, 991, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "scientif": [0, 32, 136, 137, 138, 139, 232, 363, 368, 372, 385, 390, 400, 443, 453, 492, 1002, 1005], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 24, 25, 26, 27, 30, 32, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 56, 57, 58, 62, 64, 65, 66, 70, 71, 72, 73, 75, 78, 80, 81, 82, 86, 89, 90, 92, 95, 96, 97, 98, 100, 103, 104, 106, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 127, 128, 130, 132, 133, 136, 142, 143, 144, 146, 147, 150, 152, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 181, 182, 184, 186, 187, 189, 191, 193, 195, 198, 199, 200, 201, 202, 204, 206, 207, 210, 211, 212, 213, 214, 216, 219, 220, 223, 224, 227, 228, 230, 231, 232, 234, 235, 238, 240, 241, 244, 245, 246, 247, 249, 250, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 273, 277, 279, 281, 282, 284, 287, 288, 289, 290, 292, 295, 296, 297, 298, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 325, 328, 329, 330, 332, 333, 334, 335, 337, 340, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 361, 362, 368, 369, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 385, 386, 387, 388, 391, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 441, 460, 461, 462, 463, 464, 465, 466, 467, 492, 514, 522, 523, 525, 528, 540, 552, 553, 554, 560, 561, 573, 574, 580, 602, 608, 618, 623, 624, 629, 631, 642, 646, 649, 650, 657, 659, 664, 665, 666, 667, 668, 683, 702, 709, 711, 716, 736, 746, 754, 771, 793, 809, 811, 832, 833, 834, 836, 838, 839, 840, 841, 842, 853, 862, 863, 864, 870, 875, 876, 878, 879, 880, 881, 883, 886, 890, 894, 942, 944, 967, 968, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1002, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1036], "would": [0, 4, 6, 9, 26, 32, 45, 53, 55, 58, 70, 78, 80, 81, 86, 92, 100, 101, 110, 123, 147, 150, 155, 156, 168, 169, 170, 171, 174, 182, 188, 198, 199, 200, 213, 216, 227, 234, 246, 255, 259, 260, 265, 267, 269, 279, 285, 297, 301, 302, 306, 307, 314, 317, 323, 332, 341, 345, 347, 356, 360, 369, 370, 374, 375, 376, 380, 382, 383, 385, 386, 387, 388, 391, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 423, 437, 456, 459, 473, 474, 475, 480, 523, 525, 527, 532, 535, 543, 545, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 561, 574, 575, 578, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 602, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 661, 663, 664, 665, 666, 667, 669, 670, 691, 693, 699, 703, 704, 711, 746, 772, 775, 779, 787, 789, 801, 815, 823, 824, 833, 841, 848, 875, 876, 878, 879, 880, 881, 882, 883, 888, 890, 891, 893, 896, 898, 899, 900, 901, 938, 967, 968, 971, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 988, 993, 998, 999, 1002, 1004, 1009, 1011, 1013, 1017, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "appreci": [0, 374], "citat": [0, 368, 371, 385], "paper": [0, 147, 174, 259, 371, 380, 385, 400, 402, 433, 440, 469, 495, 525, 532, 554, 632, 649, 657, 658, 662, 667, 670, 683, 778, 827, 836, 839, 882, 883, 974, 978, 981, 984, 993, 1013, 1020, 1027, 1028], "machin": [0, 4, 6, 8, 9, 27, 63, 116, 143, 144, 150, 155, 166, 170, 172, 210, 240, 259, 262, 265, 294, 299, 301, 306, 308, 313, 316, 328, 333, 340, 345, 347, 360, 361, 363, 367, 368, 369, 371, 372, 374, 377, 380, 381, 385, 386, 387, 389, 394, 398, 400, 404, 405, 407, 408, 410, 428, 430, 439, 462, 463, 469, 493, 495, 501, 507, 508, 509, 521, 523, 525, 532, 535, 546, 547, 548, 549, 550, 551, 555, 556, 557, 584, 585, 601, 602, 605, 610, 613, 625, 629, 630, 632, 634, 635, 636, 641, 642, 645, 646, 647, 648, 649, 650, 667, 673, 674, 683, 699, 704, 715, 725, 731, 733, 775, 778, 785, 815, 816, 830, 831, 836, 839, 846, 847, 848, 850, 868, 870, 876, 890, 891, 892, 893, 895, 896, 900, 901, 967, 968, 970, 971, 974, 975, 976, 978, 979, 981, 984, 985, 986, 988, 992, 994, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1009, 1013, 1014, 1015, 1017, 1020, 1022, 1032, 1033, 1034, 1035], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 360, 362, 368, 372, 374, 375, 376, 377, 378, 379, 382, 383, 385, 387, 390, 401, 408, 487, 499, 500, 572, 798, 864, 946, 978, 988, 994, 996, 999, 1001, 1002, 1004, 1005, 1007, 1013, 1015, 1020, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035], "et": [0, 11, 78, 79, 109, 110, 125, 186, 292, 371, 397, 400, 402, 405, 407, 408, 409, 442, 489, 510, 511, 519, 526, 532, 535, 554, 673, 674, 710, 711, 825, 827, 847, 848, 883, 926, 927, 974, 975, 978, 984, 988, 990, 993, 994, 1028, 1036], "al": [0, 11, 78, 79, 109, 110, 125, 186, 292, 371, 397, 400, 402, 405, 407, 408, 409, 442, 489, 510, 511, 519, 526, 532, 535, 554, 673, 674, 710, 711, 825, 827, 847, 848, 883, 926, 927, 974, 975, 978, 984, 988, 990, 993, 994, 1028, 1033, 1036], "jmlr": [0, 400, 657, 658, 667, 695, 974, 993], "12": [0, 4, 6, 15, 20, 40, 42, 43, 53, 55, 56, 57, 73, 74, 85, 98, 119, 120, 124, 153, 154, 155, 163, 168, 169, 171, 172, 178, 182, 184, 198, 206, 216, 219, 222, 223, 225, 227, 228, 230, 238, 241, 246, 247, 258, 259, 261, 262, 265, 271, 298, 305, 306, 307, 313, 316, 318, 340, 345, 347, 348, 371, 372, 379, 386, 388, 390, 392, 393, 400, 404, 408, 434, 438, 440, 473, 474, 475, 476, 523, 525, 532, 561, 655, 660, 662, 676, 677, 680, 683, 684, 785, 786, 788, 805, 808, 821, 842, 858, 967, 968, 974, 976, 979, 988, 992, 993, 996, 1004, 1009, 1018, 1021, 1023, 1027, 1028, 1030, 1031], "pp": [0, 63, 258, 371, 400, 402, 408, 411, 412, 435, 439, 443, 453, 502, 524, 525, 532, 581, 626, 634, 655, 676, 677, 711, 716, 720, 730, 746, 759, 773, 825, 827, 829, 846, 866, 878, 971, 978, 980, 981, 991], "2825": 0, "2830": 0, "2011": [0, 47, 169, 220, 380, 405, 408, 526, 529, 531, 532, 538, 581, 618, 629, 649, 720, 968, 982, 992, 997, 1020], "bibtex": 0, "entri": [0, 16, 71, 75, 130, 163, 168, 169, 255, 311, 346, 356, 378, 380, 382, 386, 387, 397, 398, 400, 405, 407, 410, 454, 463, 522, 523, 528, 536, 537, 552, 553, 579, 582, 585, 602, 611, 623, 629, 631, 638, 642, 644, 646, 647, 650, 652, 654, 655, 656, 664, 666, 673, 674, 676, 677, 695, 698, 700, 703, 706, 707, 709, 716, 719, 720, 721, 724, 725, 728, 733, 746, 748, 749, 773, 775, 778, 779, 780, 781, 800, 814, 830, 831, 838, 839, 840, 841, 842, 861, 867, 879, 964, 967, 968, 974, 978, 981, 988, 993, 999, 1004, 1027, 1030, 1031, 1033], "articl": [0, 17, 70, 345, 369, 373, 374, 382, 404, 413, 466, 696, 974, 978, 1013, 1033], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 78, 79, 81, 82, 85, 86, 91, 95, 96, 97, 98, 99, 103, 104, 105, 111, 112, 113, 116, 118, 119, 120, 123, 124, 126, 129, 132, 133, 139, 142, 143, 145, 146, 147, 150, 151, 152, 154, 155, 156, 157, 158, 168, 177, 178, 180, 182, 183, 185, 186, 187, 190, 191, 197, 198, 200, 202, 203, 204, 206, 207, 212, 215, 216, 219, 220, 221, 227, 231, 232, 233, 235, 236, 244, 245, 246, 247, 248, 249, 250, 253, 254, 258, 259, 260, 262, 263, 264, 268, 269, 273, 281, 282, 285, 286, 287, 288, 290, 291, 292, 301, 305, 306, 307, 322, 325, 328, 329, 330, 331, 332, 335, 341, 342, 345, 351, 352, 353, 373, 374, 378, 382, 401, 978, 1001, 1009], "p": [0, 11, 13, 24, 26, 27, 41, 61, 80, 81, 85, 92, 103, 122, 143, 153, 174, 210, 215, 216, 219, 221, 231, 247, 259, 265, 266, 292, 368, 369, 371, 372, 379, 382, 397, 398, 400, 402, 403, 405, 407, 409, 410, 411, 413, 433, 435, 437, 438, 441, 448, 460, 462, 465, 466, 469, 489, 519, 525, 529, 531, 532, 538, 540, 541, 542, 544, 546, 547, 548, 549, 550, 552, 555, 556, 557, 581, 583, 584, 585, 586, 587, 589, 590, 591, 595, 596, 597, 598, 599, 600, 606, 607, 618, 631, 634, 679, 681, 683, 685, 696, 706, 714, 731, 742, 776, 778, 789, 795, 796, 797, 800, 815, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 846, 850, 851, 866, 878, 884, 900, 901, 902, 971, 972, 974, 975, 976, 978, 980, 981, 982, 983, 984, 985, 988, 992, 993, 996, 1008, 1011, 1020, 1021, 1023, 1026, 1028, 1035, 1036], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 20, 26, 32, 37, 43, 47, 48, 49, 52, 53, 55, 58, 64, 67, 71, 75, 86, 98, 110, 113, 116, 117, 118, 120, 123, 130, 131, 138, 141, 143, 146, 147, 148, 150, 156, 157, 159, 165, 167, 168, 169, 170, 174, 182, 184, 187, 198, 199, 200, 202, 208, 216, 220, 231, 233, 234, 237, 241, 249, 257, 259, 260, 261, 262, 265, 266, 268, 269, 271, 279, 295, 296, 297, 303, 306, 307, 311, 313, 315, 317, 320, 321, 340, 345, 346, 347, 356, 369, 374, 375, 376, 378, 380, 385, 398, 401, 405, 407, 408, 409, 410, 478, 499, 500, 522, 523, 528, 529, 557, 572, 573, 574, 583, 586, 587, 589, 590, 591, 595, 596, 597, 598, 599, 600, 608, 618, 623, 626, 649, 704, 713, 716, 719, 720, 746, 773, 774, 777, 778, 788, 789, 792, 794, 795, 796, 797, 800, 802, 803, 804, 805, 806, 807, 808, 814, 847, 848, 852, 861, 864, 865, 869, 870, 905, 910, 911, 970, 973, 982, 985, 986, 988, 992, 1022, 1028, 1029, 1030, 1032, 1034], "g": [0, 4, 7, 8, 9, 10, 12, 16, 24, 25, 26, 27, 32, 53, 55, 65, 70, 73, 82, 86, 103, 110, 113, 114, 122, 123, 130, 137, 150, 151, 152, 153, 155, 157, 158, 159, 163, 167, 180, 183, 198, 199, 200, 202, 216, 220, 224, 233, 234, 244, 259, 263, 264, 270, 277, 285, 301, 306, 323, 339, 347, 356, 360, 366, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 385, 387, 391, 394, 398, 399, 400, 402, 404, 405, 407, 408, 409, 410, 412, 428, 434, 435, 438, 440, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 494, 519, 522, 524, 525, 528, 529, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 580, 581, 582, 584, 585, 588, 595, 601, 602, 608, 613, 614, 621, 624, 625, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 677, 681, 683, 688, 711, 718, 728, 730, 753, 775, 787, 788, 789, 790, 791, 793, 794, 796, 801, 805, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 837, 839, 840, 841, 842, 846, 847, 848, 850, 853, 855, 856, 857, 860, 862, 863, 866, 868, 869, 870, 873, 875, 876, 877, 878, 879, 880, 881, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 926, 927, 938, 946, 967, 968, 972, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 988, 992, 993, 994, 999, 1001, 1002, 1013, 1020, 1024, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 60, 68, 75, 78, 81, 86, 92, 96, 97, 98, 103, 111, 112, 117, 118, 120, 129, 133, 136, 137, 138, 139, 144, 145, 146, 150, 153, 155, 157, 158, 159, 165, 168, 169, 182, 186, 199, 202, 208, 212, 213, 216, 220, 234, 259, 260, 262, 266, 273, 295, 301, 303, 306, 311, 313, 316, 321, 323, 325, 332, 337, 345, 346, 347, 352, 354, 356, 360, 362, 363, 368, 369, 371, 372, 374, 376, 377, 379, 382, 385, 386, 387, 388, 389, 391, 395, 397, 398, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 423, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 479, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 499, 501, 502, 503, 504, 505, 511, 513, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 598, 599, 601, 602, 608, 611, 618, 619, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 695, 696, 701, 702, 703, 707, 708, 710, 712, 713, 714, 715, 716, 721, 726, 727, 730, 733, 734, 737, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 754, 756, 757, 764, 765, 766, 767, 768, 771, 778, 781, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 878, 879, 880, 881, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 925, 926, 927, 937, 938, 963, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 991, 992, 993, 994, 997, 998, 999, 1004, 1005, 1011, 1012, 1013, 1015, 1020, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "v": [0, 4, 16, 17, 19, 27, 30, 33, 34, 36, 37, 38, 49, 55, 58, 68, 70, 75, 77, 80, 83, 84, 85, 87, 95, 97, 98, 101, 114, 116, 123, 165, 166, 171, 172, 176, 187, 198, 202, 213, 217, 231, 245, 246, 249, 250, 252, 255, 274, 275, 311, 329, 346, 356, 361, 366, 371, 372, 374, 380, 382, 387, 397, 398, 399, 402, 403, 405, 408, 423, 432, 436, 443, 453, 454, 455, 456, 461, 464, 465, 466, 467, 468, 473, 474, 475, 487, 503, 515, 521, 522, 528, 532, 536, 537, 541, 543, 545, 547, 549, 551, 553, 555, 556, 559, 561, 572, 580, 584, 585, 591, 597, 602, 621, 622, 625, 626, 630, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 661, 663, 664, 667, 669, 670, 679, 686, 692, 695, 708, 726, 727, 729, 744, 745, 747, 778, 783, 787, 792, 799, 801, 812, 816, 818, 819, 820, 823, 824, 825, 833, 841, 843, 846, 848, 850, 851, 854, 857, 863, 864, 865, 870, 874, 884, 890, 891, 892, 893, 895, 896, 899, 901, 905, 972, 973, 974, 975, 978, 979, 980, 983, 986, 992, 993, 995, 1015, 1020, 1023, 1024, 1025, 1028, 1030, 1031, 1034, 1035], "b": [0, 8, 9, 10, 24, 26, 59, 65, 80, 101, 103, 112, 113, 119, 123, 124, 133, 136, 137, 151, 152, 153, 158, 163, 180, 182, 183, 198, 199, 204, 216, 235, 237, 258, 262, 264, 269, 273, 277, 314, 323, 356, 369, 371, 374, 378, 379, 380, 397, 398, 400, 403, 404, 405, 408, 428, 473, 491, 532, 537, 557, 579, 580, 581, 582, 598, 599, 601, 602, 619, 637, 638, 639, 640, 649, 660, 663, 665, 667, 671, 678, 679, 696, 710, 720, 721, 780, 781, 798, 799, 837, 863, 864, 865, 866, 869, 870, 878, 905, 927, 928, 941, 968, 970, 974, 975, 976, 978, 981, 983, 988, 992, 993, 1008, 1020, 1028, 1031, 1033, 1034, 1035], "o": [0, 17, 19, 27, 30, 38, 49, 55, 60, 61, 63, 64, 82, 85, 91, 97, 127, 158, 186, 191, 196, 198, 213, 233, 244, 259, 261, 268, 301, 302, 306, 312, 315, 324, 350, 360, 369, 371, 374, 390, 400, 402, 405, 407, 411, 413, 435, 438, 439, 441, 464, 466, 525, 595, 618, 657, 658, 683, 818, 846, 861, 902, 946, 947, 970, 972, 974, 975, 978, 979, 981, 982, 992, 993, 994, 1020, 1023, 1026, 1028, 1029, 1032, 1033, 1035, 1037], "m": [0, 8, 9, 11, 19, 26, 27, 44, 58, 59, 63, 64, 65, 80, 81, 95, 110, 133, 155, 180, 198, 216, 259, 263, 292, 324, 328, 339, 345, 360, 361, 368, 369, 371, 372, 378, 380, 387, 390, 397, 398, 400, 402, 405, 407, 409, 411, 435, 436, 437, 441, 448, 464, 465, 491, 504, 519, 523, 525, 527, 532, 630, 636, 640, 655, 662, 676, 677, 680, 684, 699, 707, 716, 731, 746, 748, 749, 785, 786, 836, 861, 927, 957, 958, 968, 970, 972, 974, 975, 976, 978, 979, 980, 981, 982, 986, 988, 992, 994, 1002, 1028, 1029, 1030, 1031, 1034, 1035, 1036], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 65, 75, 78, 79, 80, 81, 86, 95, 103, 106, 110, 113, 114, 119, 123, 124, 125, 133, 143, 151, 152, 153, 157, 158, 159, 162, 163, 168, 180, 182, 183, 187, 198, 205, 208, 216, 224, 230, 233, 244, 247, 250, 258, 259, 262, 264, 265, 266, 269, 272, 274, 277, 281, 286, 290, 292, 307, 315, 334, 347, 356, 369, 371, 375, 378, 385, 387, 397, 398, 400, 402, 403, 404, 405, 407, 408, 417, 423, 428, 437, 442, 444, 456, 460, 465, 469, 473, 474, 475, 489, 495, 504, 511, 525, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 579, 580, 581, 582, 597, 600, 601, 602, 618, 626, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 676, 677, 683, 687, 707, 712, 713, 714, 718, 720, 771, 775, 778, 787, 801, 804, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 839, 840, 841, 847, 848, 861, 866, 878, 885, 886, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 903, 944, 968, 970, 972, 974, 975, 978, 979, 980, 981, 982, 985, 986, 988, 992, 993, 994, 998, 1013, 1020, 1024, 1027, 1030, 1031, 1032, 1033, 1035], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 30, 31, 32, 37, 38, 42, 48, 49, 50, 60, 61, 63, 70, 71, 82, 89, 92, 95, 98, 103, 105, 121, 150, 158, 198, 206, 212, 214, 216, 224, 228, 230, 231, 232, 233, 247, 258, 259, 267, 277, 285, 286, 292, 297, 320, 321, 324, 331, 332, 337, 347, 368, 369, 371, 376, 380, 385, 398, 400, 402, 403, 405, 407, 408, 410, 411, 435, 437, 438, 443, 451, 454, 479, 484, 494, 517, 525, 527, 548, 549, 556, 557, 572, 573, 581, 605, 606, 610, 613, 614, 635, 636, 639, 660, 661, 662, 671, 679, 680, 683, 684, 688, 696, 699, 712, 713, 714, 716, 746, 754, 758, 768, 771, 778, 799, 825, 827, 829, 830, 831, 846, 857, 861, 863, 864, 866, 878, 883, 900, 901, 905, 970, 972, 974, 975, 976, 977, 978, 980, 986, 988, 990, 993, 994, 1001, 1009, 1010, 1011, 1023, 1025, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036], "perrot": [0, 1020], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 53, 55, 57, 61, 70, 78, 80, 81, 82, 85, 86, 98, 100, 101, 110, 113, 120, 122, 123, 126, 136, 143, 146, 147, 158, 167, 168, 169, 174, 178, 182, 187, 188, 198, 199, 200, 202, 216, 219, 220, 233, 234, 255, 259, 260, 262, 264, 265, 273, 274, 285, 292, 303, 306, 311, 313, 340, 347, 352, 353, 354, 356, 360, 361, 362, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 385, 386, 387, 390, 391, 394, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 428, 430, 432, 434, 435, 436, 438, 440, 441, 445, 454, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 487, 489, 491, 492, 493, 494, 515, 524, 525, 526, 527, 529, 531, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 568, 572, 573, 579, 580, 581, 582, 584, 585, 588, 594, 595, 597, 598, 599, 600, 601, 602, 608, 613, 614, 621, 624, 625, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 679, 681, 683, 685, 688, 692, 695, 696, 699, 700, 718, 719, 720, 721, 728, 731, 732, 745, 753, 757, 775, 778, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 800, 801, 805, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 846, 847, 848, 850, 853, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 873, 875, 876, 877, 878, 879, 880, 881, 885, 886, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 905, 921, 926, 927, 929, 932, 933, 938, 946, 953, 964, 967, 968, 970, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 988, 989, 992, 993, 994, 999, 1001, 1002, 1011, 1012, 1013, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "journal": [0, 81, 169, 259, 265, 368, 369, 371, 398, 400, 402, 407, 443, 453, 464, 525, 532, 618, 626, 636, 680, 683, 684, 696, 706, 721, 724, 725, 748, 749, 776, 815, 820, 866, 878, 967, 968, 972, 974, 975, 976, 979, 985, 990, 992, 993], "research": [0, 167, 259, 265, 369, 371, 385, 400, 492, 504, 626, 636, 683, 725, 815, 820, 967, 975, 979, 981, 993, 998, 999, 1002], "volum": [0, 66, 79, 155, 369, 371, 400, 402, 410, 464, 525, 759, 974, 993, 1002], "page": [0, 12, 17, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 219, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 322, 354, 360, 369, 371, 374, 376, 378, 380, 382, 388, 399, 400, 402, 464, 507, 508, 509, 619, 635, 820, 885, 927, 968, 978, 979, 1004, 1013, 1018, 1020, 1024, 1025], "want": [0, 4, 12, 20, 24, 25, 26, 55, 64, 71, 147, 163, 168, 198, 199, 200, 234, 250, 259, 273, 297, 325, 329, 345, 356, 360, 361, 362, 372, 373, 375, 376, 378, 379, 380, 385, 386, 387, 388, 390, 391, 394, 398, 399, 400, 401, 402, 407, 408, 409, 491, 494, 495, 501, 526, 540, 645, 646, 647, 649, 650, 657, 659, 665, 666, 667, 754, 836, 839, 855, 862, 883, 890, 967, 974, 977, 978, 979, 982, 984, 988, 989, 993, 998, 999, 1004, 1012, 1020, 1034], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 55, 65, 66, 78, 80, 82, 86, 91, 92, 100, 110, 116, 119, 123, 136, 147, 150, 155, 157, 168, 169, 171, 174, 177, 187, 211, 215, 216, 221, 227, 234, 236, 239, 241, 244, 249, 250, 258, 262, 264, 266, 268, 279, 281, 285, 286, 303, 314, 323, 329, 342, 345, 346, 350, 354, 356, 361, 362, 367, 368, 369, 370, 374, 375, 376, 378, 379, 382, 385, 386, 387, 388, 390, 391, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 416, 431, 432, 433, 435, 436, 437, 441, 445, 447, 451, 454, 455, 456, 458, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 488, 494, 514, 522, 524, 525, 528, 529, 531, 532, 533, 535, 541, 546, 547, 548, 549, 550, 551, 555, 556, 557, 574, 576, 577, 578, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 618, 635, 636, 662, 663, 665, 676, 677, 678, 679, 683, 687, 699, 715, 719, 720, 726, 727, 731, 768, 771, 773, 785, 786, 787, 811, 818, 819, 832, 833, 834, 836, 837, 838, 840, 841, 842, 849, 850, 854, 859, 862, 863, 865, 882, 883, 886, 890, 891, 898, 900, 910, 911, 916, 922, 946, 948, 967, 973, 974, 975, 977, 978, 979, 980, 981, 984, 985, 986, 991, 992, 993, 994, 998, 1002, 1004, 1006, 1008, 1011, 1012, 1013, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "api": [0, 12, 50, 165, 226, 228, 234, 238, 242, 279, 346, 347, 362, 363, 367, 368, 374, 375, 377, 378, 383, 384, 385, 386, 388, 390, 394, 405, 407, 408, 418, 419, 422, 424, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 487, 495, 499, 501, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 554, 555, 557, 558, 559, 560, 561, 570, 571, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 602, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 649, 668, 679, 680, 681, 682, 683, 693, 785, 786, 790, 791, 793, 809, 816, 834, 836, 838, 839, 842, 846, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 888, 894, 895, 944, 946, 967, 976, 977, 978, 981, 988, 992, 998, 999, 1002, 1004, 1008, 1010, 1015, 1017, 1018, 1019, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "design": [0, 13, 20, 80, 110, 130, 153, 167, 168, 179, 249, 301, 307, 354, 362, 368, 374, 379, 385, 386, 387, 388, 389, 400, 407, 409, 410, 506, 519, 623, 624, 639, 656, 660, 667, 671, 676, 787, 805, 806, 825, 827, 968, 974, 975, 978, 979, 988, 998, 999, 1002, 1006, 1022, 1029], "mai": [0, 8, 19, 25, 39, 44, 46, 56, 71, 86, 95, 109, 120, 147, 154, 156, 158, 168, 174, 178, 182, 187, 202, 204, 224, 234, 262, 264, 266, 267, 295, 306, 321, 332, 345, 346, 347, 356, 360, 361, 362, 366, 368, 369, 370, 371, 373, 374, 376, 378, 379, 382, 385, 387, 388, 391, 394, 397, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 423, 430, 431, 432, 434, 435, 436, 437, 438, 440, 442, 443, 444, 445, 450, 453, 456, 460, 463, 473, 474, 475, 478, 479, 480, 487, 499, 500, 506, 525, 526, 529, 531, 535, 538, 539, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 565, 572, 585, 588, 593, 601, 602, 608, 611, 625, 626, 628, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 661, 663, 664, 665, 667, 668, 669, 670, 672, 675, 677, 679, 680, 682, 683, 684, 686, 688, 696, 703, 706, 707, 709, 710, 712, 713, 714, 716, 728, 746, 753, 775, 776, 787, 789, 790, 791, 792, 801, 802, 803, 804, 806, 807, 811, 815, 818, 823, 824, 825, 826, 827, 829, 832, 833, 834, 836, 838, 840, 841, 842, 848, 849, 850, 853, 855, 865, 867, 868, 869, 870, 871, 873, 879, 882, 883, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 903, 908, 930, 931, 946, 967, 968, 970, 972, 974, 975, 978, 979, 980, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 999, 1004, 1010, 1011, 1020, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "consid": [0, 4, 12, 13, 20, 25, 39, 55, 66, 71, 81, 95, 99, 120, 121, 123, 142, 146, 147, 163, 169, 198, 200, 234, 259, 262, 266, 270, 279, 285, 286, 301, 313, 329, 337, 340, 345, 356, 360, 361, 362, 366, 373, 374, 376, 380, 382, 385, 387, 396, 400, 405, 406, 407, 408, 409, 410, 411, 412, 429, 435, 437, 441, 448, 465, 499, 500, 512, 524, 540, 541, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 576, 577, 579, 580, 582, 584, 598, 599, 611, 623, 624, 637, 643, 649, 650, 651, 653, 662, 670, 679, 680, 681, 683, 684, 685, 687, 691, 693, 696, 698, 700, 706, 716, 720, 724, 746, 776, 778, 782, 832, 833, 834, 836, 838, 840, 841, 842, 845, 847, 848, 853, 863, 864, 871, 885, 886, 895, 896, 898, 899, 900, 901, 962, 967, 973, 974, 975, 976, 978, 979, 981, 984, 985, 986, 988, 992, 993, 994, 999, 1004, 1011, 1023, 1024, 1028, 1032, 1033, 1035, 1036], "softwar": [0, 360, 371, 374, 382, 385, 387, 408, 618, 626, 649, 968, 1002], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 308, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 362, 366, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 423, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 493, 495, 497, 498, 499, 500, 501, 503, 506, 510, 512, 514, 515, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 678, 679, 680, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 706, 708, 709, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 753, 754, 758, 759, 761, 763, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 917, 918, 919, 920, 921, 922, 925, 927, 929, 930, 931, 932, 937, 939, 940, 941, 942, 943, 945, 946, 947, 949, 952, 966, 967, 968, 970, 972, 973, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 997, 998, 999, 1002, 1005, 1007, 1008, 1009, 1010, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "2013": [0, 174, 371, 400, 404, 405, 527, 716, 746, 970, 978, 997, 1021, 1022], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 66, 67, 81, 113, 170, 190, 193, 202, 207, 208, 264, 265, 266, 296, 305, 340, 371, 372, 380, 382, 397, 398, 400, 404, 405, 407, 410, 465, 507, 508, 509, 529, 531, 538, 546, 547, 548, 549, 556, 557, 581, 598, 599, 601, 602, 606, 610, 613, 614, 625, 639, 640, 649, 660, 663, 665, 671, 678, 680, 683, 684, 696, 706, 715, 716, 721, 746, 776, 827, 861, 898, 899, 900, 901, 967, 972, 974, 975, 978, 980, 981, 982, 986, 990, 992, 994, 1012, 1023, 1028, 1032, 1033, 1034, 1035], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 400, 408, 825, 980, 997], "languag": [0, 347, 379, 394, 405, 408, 992, 998, 999, 1002, 1005], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 21, 25, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 56, 59, 60, 62, 65, 68, 69, 71, 72, 74, 76, 79, 81, 90, 92, 94, 95, 98, 99, 104, 106, 107, 110, 112, 113, 115, 116, 119, 120, 121, 122, 123, 127, 128, 129, 131, 133, 136, 137, 138, 139, 144, 149, 150, 151, 152, 154, 157, 159, 160, 162, 165, 168, 169, 176, 177, 180, 181, 182, 183, 187, 188, 190, 193, 194, 196, 197, 198, 199, 200, 201, 204, 206, 207, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 227, 230, 231, 232, 234, 236, 238, 241, 244, 245, 246, 247, 248, 250, 253, 257, 259, 261, 262, 263, 264, 267, 273, 277, 279, 282, 283, 285, 287, 288, 289, 290, 292, 296, 297, 300, 302, 303, 304, 308, 309, 311, 313, 315, 316, 317, 321, 322, 324, 325, 328, 329, 331, 336, 337, 340, 345, 351, 352, 353, 354, 359, 361, 363, 366, 367, 368, 370, 371, 374, 376, 377, 380, 381, 382, 383, 386, 390, 391, 394, 396, 397, 398, 399, 402, 405, 406, 407, 408, 411, 412, 413, 415, 417, 418, 419, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 504, 505, 506, 511, 512, 513, 514, 515, 517, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 606, 608, 609, 613, 614, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 701, 702, 704, 708, 709, 711, 715, 717, 718, 719, 720, 721, 724, 726, 727, 728, 730, 731, 732, 744, 745, 747, 751, 753, 754, 759, 773, 774, 775, 777, 778, 779, 781, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 914, 915, 916, 926, 927, 941, 944, 949, 950, 952, 953, 954, 955, 956, 959, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1011, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "mine": [0, 259, 346, 369, 400, 411, 435, 502, 554, 711, 724, 730, 773, 974, 978, 984, 990], "108": [0, 8, 1021], "122": [0, 112, 155, 163, 169, 232, 380, 979], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 55, 57, 62, 65, 70, 74, 80, 81, 97, 98, 113, 115, 116, 117, 118, 123, 124, 126, 128, 138, 139, 147, 150, 156, 163, 167, 169, 170, 171, 182, 193, 199, 200, 202, 212, 219, 220, 221, 227, 231, 244, 250, 257, 261, 265, 266, 274, 285, 286, 295, 297, 303, 305, 306, 307, 308, 317, 323, 329, 331, 332, 345, 346, 352, 353, 360, 369, 371, 374, 379, 382, 383, 385, 386, 397, 398, 399, 400, 404, 406, 407, 408, 409, 410, 435, 438, 440, 441, 443, 460, 473, 474, 475, 544, 545, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 635, 661, 662, 670, 680, 683, 684, 716, 721, 732, 736, 746, 779, 780, 795, 797, 830, 831, 835, 864, 865, 869, 871, 892, 894, 895, 898, 899, 900, 901, 947, 967, 972, 973, 974, 975, 977, 978, 981, 982, 984, 986, 988, 990, 993, 994, 995, 998, 999, 1004, 1005, 1007, 1013, 1020, 1021, 1023, 1024, 1028, 1031, 1032, 1033, 1034, 1035], "qualiti": [0, 6, 20, 24, 37, 46, 48, 49, 58, 98, 119, 168, 204, 253, 257, 266, 267, 268, 374, 382, 385, 387, 394, 395, 399, 400, 402, 405, 443, 453, 460, 465, 548, 549, 550, 551, 555, 556, 733, 801, 882, 883, 898, 899, 900, 901, 927, 973, 975, 983, 990, 994, 998, 999, 1002, 1008, 1009, 1015], "png": [0, 32, 902], "svg": 0, "logo": [0, 404, 794], "avail": [0, 5, 11, 12, 13, 41, 56, 57, 98, 118, 121, 122, 147, 150, 155, 159, 167, 168, 169, 187, 198, 206, 216, 220, 234, 237, 256, 257, 262, 263, 266, 284, 285, 286, 292, 306, 311, 312, 313, 314, 316, 317, 323, 325, 356, 360, 368, 369, 371, 372, 373, 374, 375, 379, 383, 386, 387, 390, 394, 397, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 438, 441, 442, 443, 444, 460, 461, 462, 463, 464, 465, 466, 467, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 499, 526, 540, 546, 547, 548, 549, 550, 551, 555, 556, 579, 582, 584, 585, 601, 602, 623, 624, 648, 656, 661, 663, 664, 665, 667, 680, 687, 690, 722, 723, 787, 790, 791, 801, 812, 813, 818, 819, 821, 822, 823, 824, 836, 847, 848, 857, 866, 869, 874, 878, 883, 934, 939, 946, 968, 972, 975, 977, 978, 979, 980, 981, 984, 988, 991, 992, 993, 997, 998, 999, 1002, 1004, 1008, 1013, 1015, 1020, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1036], "doc": [0, 4, 8, 19, 345, 347, 361, 372, 374, 378, 379, 382, 387, 390, 393, 394, 408, 579, 580, 582, 768, 771, 780, 781, 813, 1013, 1020, 1024, 1034], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 368, 371, 373, 374, 375, 377, 378, 380, 382, 383, 385, 386, 390, 394, 397, 401, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 944, 945, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 963, 964, 965, 966, 975, 988, 994, 998, 1002, 1012, 1013, 1030, 1034], "directori": [0, 8, 281, 368, 372, 374, 376, 380, 382, 387, 390, 401, 432, 436, 441, 477, 490, 850, 851, 1034], "driven": [0, 998, 1002], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 49, 53, 55, 60, 72, 75, 78, 82, 85, 100, 103, 113, 115, 116, 120, 123, 124, 130, 144, 147, 150, 155, 156, 169, 170, 179, 187, 198, 202, 220, 223, 224, 227, 233, 234, 259, 266, 273, 277, 279, 284, 296, 301, 313, 340, 345, 346, 356, 360, 361, 362, 368, 369, 371, 372, 373, 374, 376, 380, 382, 385, 387, 391, 394, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 431, 434, 438, 440, 442, 445, 450, 487, 499, 523, 542, 558, 572, 573, 574, 580, 597, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 634, 646, 647, 663, 678, 683, 686, 691, 753, 755, 787, 790, 791, 801, 813, 817, 818, 829, 847, 848, 853, 862, 863, 868, 892, 893, 895, 906, 947, 967, 968, 971, 972, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 988, 992, 993, 994, 1004, 1008, 1011, 1029, 1030, 1032, 1033, 1036], "institut": [0, 371, 981], "privat": [0, 378, 387, 388, 906, 1002, 1020, 1028, 1030, 1031, 1033, 1034], "grant": [0, 374], "assur": [0, 387, 785, 786, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "sustain": 0, "like": [0, 4, 12, 19, 52, 55, 58, 60, 70, 89, 92, 98, 103, 105, 110, 112, 117, 123, 126, 150, 156, 168, 178, 198, 250, 259, 262, 263, 266, 267, 273, 288, 298, 301, 306, 307, 311, 323, 332, 345, 346, 356, 360, 362, 366, 368, 369, 372, 373, 374, 376, 378, 381, 382, 383, 385, 386, 387, 394, 396, 398, 400, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 503, 504, 506, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 570, 572, 573, 574, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 908, 915, 916, 924, 929, 932, 941, 942, 946, 949, 950, 951, 963, 965, 967, 970, 972, 973, 974, 975, 978, 980, 981, 982, 984, 985, 988, 993, 994, 998, 999, 1001, 1002, 1004, 1011, 1013, 1017, 1020, 1023, 1024, 1027, 1028, 1030, 1031, 1032, 1034, 1035, 1036], "thank": [0, 4, 17, 25, 55, 86, 170, 174, 198, 268, 345, 346, 373, 382, 1002, 1020, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "funder": 0, "member": [0, 345, 346, 369, 374, 377, 388, 400, 415, 433, 437, 439, 442, 444, 483, 546, 547, 554, 572, 649, 650, 657, 659, 667, 668, 669, 695, 696, 706, 708, 721, 726, 727, 747, 776, 783, 787, 890, 974, 981, 1004, 1020, 1032, 1035], "consortium": [0, 1002], "foundat": [0, 130, 374, 398, 981], "face": [0, 3, 15, 36, 53, 68, 94, 98, 107, 118, 165, 226, 242, 367, 374, 378, 400, 405, 407, 409, 440, 463, 484, 485, 486, 512, 523, 524, 528, 530, 531, 532, 534, 549, 575, 648, 664, 688, 704, 801, 816, 833, 870, 895, 913, 981, 994, 995, 996, 1007, 1012, 1015, 1020, 1028], "2022": [0, 361, 407, 696, 988, 1034, 1035], "microsoft": [0, 12, 372, 375, 390], "m\u00fcller": [0, 31, 302, 303, 388, 405, 526, 856, 982, 988, 992, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1034], "2020": [0, 369, 1030, 1031, 1032, 1033], "quansight": 0, "lab": [0, 369, 459, 527, 888, 1002, 1031], "2021": [0, 372, 374, 390, 662, 1032, 1033], "columbia": 0, "univers": [0, 158, 345, 369, 371, 377, 400, 405, 408, 581, 778, 825, 829, 885, 974, 976, 978, 980], "2016": [0, 224, 368, 400, 967, 1025, 1026], "sydnei": 0, "2017": [0, 259, 368, 398, 400, 411, 435, 978, 1026, 1027], "receiv": [0, 19, 136, 165, 234, 252, 256, 275, 347, 356, 374, 376, 382, 387, 404, 407, 495, 649, 693, 697, 699, 717, 772, 778, 779, 806, 816, 818, 819, 857, 895, 979, 982, 983, 992, 1030, 1031], "improv": [0, 4, 24, 25, 33, 78, 79, 82, 100, 106, 110, 111, 116, 119, 121, 122, 123, 125, 130, 143, 163, 168, 174, 184, 198, 206, 216, 260, 262, 279, 298, 306, 317, 335, 346, 356, 361, 372, 377, 379, 380, 382, 383, 385, 387, 388, 394, 399, 405, 407, 409, 440, 441, 522, 523, 525, 528, 529, 530, 532, 533, 534, 537, 545, 548, 549, 550, 551, 552, 553, 555, 556, 601, 602, 634, 643, 655, 657, 658, 659, 663, 664, 665, 666, 667, 669, 676, 678, 683, 719, 720, 774, 777, 778, 839, 847, 848, 864, 866, 878, 898, 899, 901, 927, 972, 974, 975, 978, 981, 982, 992, 993, 994, 997, 998, 999, 1002, 1011, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 34, 67, 106, 127, 132, 167, 168, 182, 183, 193, 198, 199, 200, 202, 216, 222, 231, 237, 256, 259, 262, 266, 268, 269, 301, 312, 313, 317, 345, 354, 360, 369, 373, 374, 376, 381, 383, 387, 388, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 412, 429, 430, 433, 437, 438, 440, 455, 458, 485, 489, 491, 495, 499, 500, 501, 516, 518, 520, 521, 522, 524, 526, 527, 528, 533, 536, 537, 539, 540, 541, 548, 552, 553, 554, 555, 583, 584, 585, 586, 587, 589, 590, 591, 597, 601, 602, 611, 623, 634, 637, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 660, 663, 664, 665, 666, 668, 671, 672, 673, 674, 675, 678, 681, 689, 691, 693, 698, 700, 703, 704, 706, 709, 711, 714, 717, 719, 720, 721, 725, 726, 728, 729, 730, 731, 732, 733, 734, 742, 744, 748, 756, 772, 773, 774, 777, 778, 779, 785, 786, 790, 791, 813, 830, 831, 836, 853, 854, 857, 863, 866, 869, 874, 878, 882, 883, 885, 886, 890, 891, 894, 895, 896, 898, 900, 907, 925, 927, 943, 945, 969, 970, 974, 976, 978, 979, 981, 982, 983, 985, 988, 993, 1009, 1011, 1013, 1021, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "It": [0, 4, 7, 8, 9, 16, 20, 25, 37, 40, 53, 55, 58, 72, 78, 80, 82, 95, 98, 99, 105, 110, 113, 115, 116, 119, 123, 130, 147, 155, 156, 157, 162, 163, 168, 169, 170, 178, 182, 186, 187, 195, 198, 202, 212, 215, 216, 219, 220, 227, 232, 234, 254, 255, 257, 259, 260, 262, 265, 266, 279, 282, 285, 286, 287, 289, 290, 292, 301, 305, 306, 308, 311, 317, 328, 332, 340, 345, 346, 347, 354, 356, 360, 361, 362, 367, 369, 371, 372, 374, 376, 378, 379, 380, 382, 383, 385, 386, 387, 390, 391, 394, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 425, 428, 429, 432, 433, 434, 435, 436, 438, 439, 440, 443, 450, 453, 458, 459, 460, 465, 469, 476, 478, 487, 499, 506, 515, 524, 526, 527, 529, 531, 532, 540, 541, 544, 545, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 580, 587, 593, 597, 598, 599, 602, 605, 606, 610, 611, 613, 614, 618, 621, 622, 623, 624, 632, 633, 634, 637, 638, 641, 643, 644, 645, 646, 649, 651, 652, 653, 654, 657, 658, 659, 661, 662, 663, 665, 667, 668, 669, 672, 673, 674, 675, 678, 680, 682, 683, 684, 686, 687, 688, 689, 691, 693, 695, 699, 700, 701, 707, 713, 724, 732, 733, 737, 748, 749, 752, 755, 771, 773, 787, 789, 790, 791, 793, 799, 800, 801, 809, 811, 814, 817, 826, 827, 832, 833, 834, 836, 839, 840, 841, 842, 846, 847, 848, 852, 853, 854, 858, 859, 860, 864, 867, 869, 879, 882, 883, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 914, 927, 936, 946, 949, 952, 954, 955, 956, 957, 958, 959, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 989, 991, 992, 993, 994, 998, 1002, 1004, 1010, 1011, 1012, 1013, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "provid": [0, 5, 8, 11, 24, 27, 37, 42, 55, 60, 81, 95, 112, 117, 118, 128, 130, 150, 156, 168, 169, 177, 184, 186, 187, 190, 199, 202, 207, 220, 224, 228, 229, 234, 249, 259, 260, 261, 265, 289, 292, 297, 301, 305, 311, 312, 314, 316, 330, 337, 345, 346, 350, 351, 356, 360, 362, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 380, 382, 383, 385, 386, 387, 389, 390, 391, 394, 396, 397, 399, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 412, 421, 428, 431, 433, 434, 435, 437, 438, 440, 441, 443, 450, 451, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 484, 485, 487, 489, 492, 523, 524, 525, 526, 529, 531, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 581, 582, 584, 585, 592, 596, 601, 602, 618, 623, 624, 625, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 681, 685, 702, 725, 731, 754, 764, 768, 778, 780, 782, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 799, 800, 801, 805, 806, 807, 808, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 847, 848, 850, 853, 855, 856, 857, 860, 861, 862, 865, 867, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 905, 916, 921, 937, 954, 955, 956, 967, 968, 970, 973, 974, 975, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 991, 992, 993, 994, 995, 998, 999, 1002, 1004, 1008, 1011, 1013, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "2012": [0, 81, 398, 407, 546, 547, 554, 630, 733, 967, 971, 978, 997, 1020], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 360, 361, 362, 367, 369, 372, 374, 379, 382, 385, 387, 388, 390, 396, 399, 400, 402, 404, 405, 408, 432, 436, 438, 440, 450, 479, 480, 483, 487, 488, 491, 492, 493, 494, 495, 496, 498, 501, 526, 528, 532, 550, 551, 558, 559, 623, 639, 641, 645, 660, 671, 712, 713, 718, 735, 736, 738, 740, 741, 743, 775, 785, 786, 798, 827, 916, 967, 974, 977, 980, 981, 985, 988, 991, 999, 1011, 1020, 1024, 1026, 1028, 1030, 1031, 1033, 1034], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 346, 347, 350, 351, 352, 353, 354, 356, 360, 361, 362, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 385, 387, 388, 390, 391, 396, 397, 398, 399, 400, 402, 403, 405, 407, 408, 410, 411, 428, 432, 434, 435, 436, 437, 438, 441, 443, 446, 448, 449, 450, 452, 453, 454, 455, 456, 458, 459, 463, 487, 490, 492, 510, 514, 525, 527, 529, 531, 538, 553, 558, 559, 560, 561, 581, 601, 610, 618, 619, 620, 621, 625, 630, 631, 634, 637, 641, 643, 645, 651, 653, 655, 657, 658, 664, 667, 668, 669, 676, 677, 681, 683, 685, 692, 782, 785, 786, 787, 789, 790, 791, 792, 794, 796, 801, 802, 803, 806, 808, 811, 812, 813, 814, 815, 818, 820, 825, 826, 827, 828, 829, 830, 831, 838, 840, 841, 842, 846, 847, 848, 849, 850, 851, 852, 854, 855, 857, 860, 863, 864, 865, 869, 874, 882, 883, 887, 888, 892, 895, 896, 904, 929, 944, 967, 968, 970, 971, 974, 975, 977, 978, 979, 980, 981, 982, 983, 985, 986, 988, 990, 991, 992, 993, 994, 998, 1002, 1004, 1009, 1011, 1012, 1013, 1020, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "host": [0, 116, 317, 345, 369, 374, 378, 382, 383, 883, 946, 1013, 1036], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 57, 66, 69, 72, 86, 97, 98, 100, 103, 113, 115, 116, 119, 120, 124, 126, 132, 142, 162, 163, 165, 167, 168, 169, 170, 174, 177, 191, 198, 202, 216, 219, 220, 221, 223, 227, 228, 229, 231, 233, 234, 238, 246, 249, 254, 256, 259, 260, 261, 268, 269, 284, 285, 286, 300, 301, 305, 306, 309, 311, 312, 314, 320, 332, 339, 342, 345, 346, 350, 354, 356, 360, 366, 367, 369, 370, 371, 374, 376, 378, 379, 380, 382, 383, 386, 387, 388, 390, 391, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 428, 434, 435, 437, 438, 439, 440, 441, 443, 448, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 479, 487, 488, 494, 524, 525, 526, 529, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 580, 581, 582, 585, 588, 593, 601, 602, 603, 604, 611, 618, 619, 621, 626, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 681, 683, 687, 695, 709, 753, 764, 768, 775, 780, 787, 788, 789, 790, 791, 792, 793, 794, 796, 801, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 845, 847, 848, 850, 851, 853, 855, 856, 857, 862, 863, 864, 866, 869, 870, 871, 878, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 921, 967, 968, 970, 971, 972, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 991, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1004, 1008, 1011, 1012, 1015, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1033, 1034, 1035, 1036], "event": [0, 4, 16, 198, 216, 262, 398, 400, 579, 580, 627, 825, 915, 974, 979, 980, 998, 1002, 1026], "pari": [0, 371, 401, 457, 754, 858, 989, 1034], "saclai": 0, "center": [0, 4, 7, 8, 9, 13, 24, 26, 33, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 56, 59, 60, 61, 63, 64, 81, 91, 100, 102, 105, 121, 122, 123, 124, 147, 163, 169, 179, 190, 192, 198, 199, 209, 210, 222, 223, 227, 228, 244, 247, 248, 254, 260, 270, 284, 287, 289, 296, 301, 303, 304, 315, 322, 330, 332, 333, 334, 339, 346, 347, 369, 370, 371, 379, 399, 400, 402, 403, 405, 406, 407, 413, 431, 433, 434, 437, 438, 439, 440, 443, 445, 450, 451, 452, 453, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 492, 503, 515, 525, 526, 532, 535, 541, 597, 600, 601, 602, 623, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 669, 681, 685, 785, 855, 856, 859, 868, 870, 880, 881, 890, 891, 972, 974, 975, 977, 985, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1034], "scienc": [0, 38, 80, 158, 368, 371, 385, 400, 431, 445, 529, 531, 538, 679, 680, 684, 837, 968, 970, 974, 975, 978, 981, 990, 999, 1002, 1007, 1028], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 32, 33, 37, 40, 47, 53, 55, 57, 58, 60, 61, 64, 66, 71, 81, 89, 91, 95, 98, 100, 101, 105, 115, 116, 123, 126, 130, 133, 146, 147, 150, 157, 158, 162, 167, 168, 169, 170, 171, 174, 177, 178, 182, 187, 188, 190, 191, 192, 194, 198, 200, 207, 208, 213, 216, 221, 227, 234, 235, 246, 249, 255, 256, 257, 259, 260, 262, 263, 266, 267, 268, 269, 277, 279, 284, 298, 302, 303, 306, 307, 311, 313, 314, 315, 323, 331, 332, 341, 345, 346, 347, 350, 354, 356, 360, 361, 362, 368, 369, 370, 371, 373, 374, 376, 378, 379, 380, 381, 382, 383, 385, 387, 388, 389, 390, 391, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 432, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 451, 453, 455, 460, 465, 478, 479, 481, 482, 483, 484, 485, 486, 487, 491, 492, 493, 494, 495, 496, 499, 500, 501, 503, 505, 525, 530, 531, 534, 538, 542, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 572, 574, 575, 579, 580, 581, 582, 601, 602, 606, 607, 611, 618, 621, 623, 624, 625, 626, 634, 638, 639, 640, 641, 645, 648, 649, 650, 652, 657, 659, 660, 662, 664, 665, 666, 667, 669, 671, 679, 683, 686, 694, 700, 711, 724, 740, 741, 744, 753, 761, 764, 768, 769, 770, 771, 773, 778, 780, 781, 784, 785, 786, 787, 790, 791, 793, 794, 795, 797, 799, 801, 805, 806, 809, 811, 813, 814, 816, 817, 818, 819, 820, 822, 823, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 846, 850, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 869, 870, 871, 874, 876, 890, 892, 893, 894, 895, 896, 898, 899, 900, 901, 906, 916, 919, 929, 949, 967, 968, 970, 972, 973, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 992, 993, 994, 995, 997, 998, 1002, 1004, 1008, 1010, 1011, 1012, 1013, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "2014": [0, 52, 368, 405, 407, 410, 521, 598, 599, 613, 614, 649, 683, 847, 848, 926, 927, 975, 982, 1002, 1023], "2015": [0, 169, 368, 410, 699, 712, 713, 714, 847, 848, 978, 985, 1002, 1024, 1025], "50": [0, 4, 7, 10, 14, 16, 24, 32, 33, 38, 50, 52, 59, 60, 65, 66, 70, 71, 85, 92, 95, 98, 105, 110, 113, 116, 123, 128, 129, 151, 153, 154, 155, 156, 167, 168, 169, 178, 182, 193, 198, 201, 205, 206, 210, 212, 214, 216, 219, 223, 224, 230, 231, 233, 241, 254, 259, 261, 262, 272, 279, 298, 301, 305, 313, 315, 321, 323, 325, 330, 339, 340, 346, 369, 371, 374, 379, 404, 407, 408, 409, 412, 433, 464, 491, 495, 514, 524, 530, 535, 544, 545, 560, 584, 585, 606, 608, 649, 650, 657, 659, 661, 667, 668, 669, 683, 704, 787, 801, 819, 839, 890, 899, 973, 974, 978, 979, 981, 984, 988, 1020], "2018": [0, 198, 216, 408, 441, 967, 978, 996, 1002, 1027, 1028], "nyu": [0, 121, 180, 839], "moor": [0, 725, 978, 1002], "environ": [0, 12, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 322, 354, 360, 369, 371, 372, 374, 380, 382, 385, 390, 394, 396, 401, 490, 998, 999, 1002, 1027, 1028], "student": [0, 97, 259, 975, 999, 1002], "t\u00e9l\u00e9com": [0, 996], "paristech": [0, 24, 25, 42, 227, 996], "rv": [0, 121, 263, 301, 791, 799, 801, 967, 1020, 1021, 1024, 1025, 1026, 1027, 1028], "thierri": [0, 244, 246, 1002, 1026, 1027, 1034], "guillemot": [0, 244, 246, 1026, 1027], "labex": 0, "digicosm": 0, "goix": [0, 1024, 1026, 1027, 1028, 1029], "mathurin": [0, 1031, 1033, 1034], "massia": [0, 1031, 1033, 1034], "2019": [0, 169, 372, 400, 443, 453, 683, 975, 985, 988, 1028, 1029, 1030], "dure": [0, 4, 5, 12, 50, 55, 58, 72, 75, 86, 100, 114, 120, 127, 144, 150, 155, 168, 169, 171, 187, 199, 206, 257, 261, 279, 313, 314, 360, 362, 372, 374, 376, 379, 387, 388, 400, 401, 405, 407, 408, 410, 411, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 450, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 604, 605, 606, 608, 610, 611, 613, 614, 616, 618, 619, 620, 621, 623, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 691, 779, 785, 786, 787, 790, 791, 801, 811, 812, 813, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 881, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 967, 968, 970, 974, 975, 981, 988, 990, 994, 1008, 1013, 1015, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "phd": [0, 400, 407, 999, 1002], "chan": [0, 828, 870], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 57, 58, 60, 64, 68, 81, 124, 131, 132, 133, 151, 156, 165, 168, 178, 191, 213, 219, 220, 224, 243, 245, 246, 251, 259, 279, 313, 322, 332, 346, 356, 361, 369, 374, 376, 382, 383, 385, 387, 400, 405, 407, 409, 410, 412, 433, 434, 438, 439, 440, 441, 442, 443, 444, 450, 451, 452, 453, 469, 503, 506, 522, 523, 524, 528, 529, 531, 534, 536, 537, 538, 539, 544, 545, 550, 551, 584, 598, 599, 601, 602, 610, 611, 618, 631, 636, 637, 638, 639, 643, 644, 649, 651, 652, 653, 654, 657, 658, 659, 660, 662, 667, 668, 669, 671, 672, 675, 681, 682, 683, 685, 686, 785, 786, 820, 839, 846, 847, 848, 886, 913, 926, 927, 947, 952, 953, 970, 974, 975, 982, 983, 984, 992, 994, 998, 1010, 1012, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "were": [0, 4, 32, 70, 71, 74, 80, 81, 116, 120, 123, 144, 147, 155, 163, 198, 199, 202, 228, 268, 270, 297, 298, 306, 312, 313, 315, 316, 317, 323, 345, 347, 354, 356, 368, 369, 371, 374, 375, 378, 385, 387, 391, 397, 401, 407, 408, 455, 458, 459, 487, 552, 553, 579, 582, 593, 790, 791, 806, 814, 887, 888, 924, 967, 978, 979, 994, 1001, 1012, 1013, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "through": [0, 7, 115, 120, 158, 168, 202, 219, 232, 234, 254, 259, 262, 284, 305, 306, 330, 337, 347, 354, 371, 372, 374, 376, 381, 383, 387, 388, 390, 391, 400, 403, 405, 407, 409, 410, 437, 455, 458, 463, 526, 548, 549, 552, 555, 556, 557, 572, 584, 585, 588, 638, 642, 644, 646, 649, 650, 652, 654, 656, 659, 667, 668, 679, 682, 711, 793, 809, 866, 878, 882, 883, 898, 899, 900, 901, 933, 936, 967, 968, 975, 978, 980, 981, 982, 984, 986, 988, 992, 993, 994, 1002, 1004, 1011, 1013, 1020, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1035, 1036, 1037], "program": [0, 50, 346, 356, 361, 362, 371, 372, 374, 380, 385, 499, 626, 661, 880, 881, 974, 993, 994, 998, 999, 1020, 1022], "immanuel": [0, 1020, 1021, 1025], "bayer": [0, 1020, 1021, 1025], "kemal": [0, 20, 21, 1022, 1023], "eren": [0, 20, 21, 1022, 1023], "tr\u00e9segni": [0, 1022], "hamzeh": [0, 1023, 1024], "alsalhi": [0, 1023, 1024], "issam": [0, 295, 1026], "laradji": [0, 295, 1026], "maheshakya": [0, 1023, 1024, 1025], "wijewardena": [0, 1023, 1024, 1025], "xue": [0, 1024, 1025, 1026, 1028, 1029, 1032], "nelson": [0, 1026, 1027, 1032], "yenchen": [0, 1026], "lin": [0, 525, 649, 993, 1025, 1026, 1027, 1028], "neurodebian": 0, "debian": [0, 360, 372, 380], "packag": [0, 46, 53, 162, 234, 279, 361, 367, 368, 371, 372, 374, 375, 376, 378, 380, 383, 385, 387, 390, 402, 407, 408, 443, 469, 637, 638, 946, 968, 974, 977, 981, 988, 994, 1002, 1007, 1020, 1026, 1028, 1029, 1030], "dr": [0, 371, 400, 1034], "jame": [0, 371, 404, 820, 979, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1036], "haxbi": 0, "dartmouth": 0, "colleg": [0, 167], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 53, 55, 56, 58, 62, 67, 71, 74, 78, 80, 81, 86, 90, 95, 111, 112, 123, 126, 127, 130, 131, 143, 150, 152, 155, 156, 157, 158, 159, 162, 163, 165, 168, 169, 170, 171, 174, 177, 179, 181, 182, 186, 187, 188, 192, 193, 198, 199, 202, 206, 207, 212, 215, 216, 219, 221, 227, 231, 234, 237, 245, 246, 247, 253, 254, 259, 260, 261, 262, 265, 267, 282, 285, 290, 296, 297, 301, 306, 312, 313, 314, 315, 316, 317, 328, 329, 331, 332, 340, 342, 345, 346, 347, 354, 356, 360, 361, 362, 367, 368, 369, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 390, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 423, 428, 434, 435, 438, 440, 442, 444, 450, 454, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 487, 490, 499, 500, 506, 514, 515, 524, 525, 527, 529, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 572, 573, 579, 581, 582, 585, 597, 600, 601, 602, 623, 624, 626, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 680, 681, 683, 684, 688, 689, 691, 692, 693, 698, 699, 706, 711, 716, 717, 728, 729, 730, 736, 744, 746, 747, 753, 772, 774, 777, 778, 779, 782, 785, 787, 788, 789, 790, 791, 794, 796, 801, 805, 806, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 869, 870, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 910, 911, 946, 967, 968, 970, 973, 974, 975, 977, 978, 979, 980, 981, 982, 984, 985, 988, 991, 992, 993, 994, 997, 998, 999, 1001, 1002, 1004, 1009, 1011, 1012, 1013, 1017, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "particip": [0, 373, 374, 388, 1002], "could": [0, 4, 9, 13, 27, 37, 42, 53, 71, 72, 95, 98, 111, 112, 120, 123, 144, 150, 155, 163, 167, 168, 169, 198, 199, 202, 207, 216, 223, 232, 233, 234, 253, 259, 282, 287, 290, 314, 328, 329, 345, 350, 362, 374, 380, 382, 387, 390, 394, 398, 404, 407, 408, 412, 465, 524, 529, 598, 599, 620, 662, 789, 794, 796, 967, 968, 974, 975, 985, 986, 988, 993, 999, 1012, 1017, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "attend": 0, "psf": [0, 374], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 49, 55, 71, 78, 95, 113, 116, 127, 150, 168, 169, 170, 198, 215, 216, 232, 234, 259, 260, 261, 262, 264, 265, 266, 268, 269, 277, 311, 332, 340, 345, 346, 356, 360, 361, 362, 367, 368, 369, 372, 374, 375, 376, 377, 378, 380, 382, 385, 386, 387, 390, 394, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 410, 412, 414, 423, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 453, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 487, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 679, 680, 681, 682, 683, 700, 712, 713, 714, 718, 746, 768, 773, 775, 778, 785, 786, 787, 789, 790, 791, 793, 799, 800, 801, 805, 806, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 908, 910, 911, 914, 919, 946, 949, 952, 967, 970, 973, 974, 975, 977, 978, 979, 980, 981, 986, 988, 993, 994, 999, 1002, 1004, 1011, 1012, 1013, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1036], "tinyclu": 0, "french": [0, 216, 307], "associ": [0, 11, 24, 25, 80, 110, 150, 167, 168, 202, 247, 307, 320, 322, 345, 382, 400, 402, 404, 405, 407, 408, 437, 440, 460, 461, 462, 463, 464, 465, 466, 467, 484, 485, 486, 515, 548, 552, 555, 596, 597, 621, 636, 649, 650, 657, 659, 665, 666, 667, 680, 686, 721, 729, 813, 833, 841, 855, 867, 879, 887, 896, 898, 900, 916, 977, 978, 981, 988, 991, 1002, 1012, 1020, 1032, 1036], "fond": [0, 1002], "de": [0, 12, 24, 25, 26, 27, 74, 114, 130, 150, 151, 153, 154, 155, 156, 157, 159, 189, 232, 233, 307, 322, 340, 371, 626, 679, 754, 974, 975, 999, 1021, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 55, 62, 66, 72, 110, 118, 123, 130, 144, 147, 155, 162, 169, 170, 187, 198, 199, 200, 216, 220, 232, 253, 256, 259, 260, 262, 268, 332, 340, 346, 354, 360, 369, 371, 374, 379, 380, 382, 385, 388, 400, 402, 405, 408, 410, 484, 485, 491, 495, 501, 637, 638, 890, 968, 974, 975, 978, 983, 984, 985, 999, 1002, 1009, 1011, 1012, 1020], "our": [0, 4, 5, 7, 11, 12, 42, 53, 56, 70, 71, 80, 81, 86, 95, 96, 109, 110, 111, 117, 120, 123, 124, 142, 147, 150, 155, 157, 167, 168, 169, 170, 171, 198, 202, 216, 221, 223, 234, 253, 259, 262, 265, 266, 297, 301, 307, 312, 314, 325, 329, 335, 336, 337, 340, 345, 346, 347, 356, 361, 373, 378, 379, 382, 385, 386, 387, 388, 391, 400, 404, 407, 408, 411, 435, 441, 554, 635, 683, 699, 711, 716, 728, 746, 832, 833, 834, 836, 838, 840, 841, 842, 967, 968, 974, 975, 978, 984, 988, 991, 992, 993, 999, 1002, 1004, 1011, 1012, 1013, 1027, 1028, 1030, 1031, 1034, 1035, 1037], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 361, 366, 371, 372, 375, 376, 378, 382, 385, 386, 387, 388, 390, 391, 394, 397, 398, 400, 401, 403, 404, 405, 409, 410, 428, 492, 526, 530, 532, 534, 537, 550, 551, 602, 607, 612, 615, 629, 630, 631, 632, 647, 657, 659, 664, 667, 678, 680, 683, 684, 700, 787, 810, 818, 819, 820, 822, 828, 836, 847, 851, 870, 967, 972, 974, 975, 977, 978, 979, 985, 986, 992, 993, 999, 1002, 1004, 1015, 1020, 1024, 1025, 1028, 1032, 1033, 1034, 1035, 1036], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 43, 48, 52, 53, 54, 55, 60, 64, 75, 82, 91, 95, 97, 98, 115, 116, 118, 119, 123, 132, 133, 147, 155, 156, 158, 165, 167, 168, 169, 177, 182, 184, 190, 191, 192, 198, 199, 200, 201, 202, 207, 209, 213, 215, 216, 219, 220, 227, 233, 234, 238, 241, 245, 247, 249, 257, 260, 261, 262, 263, 265, 266, 267, 269, 271, 277, 279, 284, 297, 301, 302, 306, 311, 312, 313, 314, 316, 317, 320, 322, 323, 324, 329, 332, 337, 341, 345, 346, 347, 351, 354, 356, 360, 361, 362, 367, 369, 370, 371, 372, 374, 376, 378, 379, 380, 382, 383, 385, 386, 387, 388, 391, 396, 397, 398, 399, 400, 401, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 422, 423, 424, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 499, 500, 506, 518, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 574, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 691, 692, 693, 696, 700, 704, 705, 706, 707, 708, 709, 711, 712, 713, 716, 718, 719, 720, 722, 723, 725, 726, 727, 728, 735, 736, 738, 740, 741, 743, 746, 751, 759, 764, 768, 771, 772, 773, 774, 775, 776, 777, 778, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 797, 799, 801, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 916, 918, 919, 920, 921, 932, 941, 946, 953, 962, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 983, 985, 988, 991, 992, 993, 994, 998, 999, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "handl": [0, 4, 71, 116, 120, 126, 130, 174, 182, 233, 234, 261, 266, 268, 279, 286, 307, 311, 345, 347, 360, 366, 368, 372, 374, 375, 376, 383, 385, 387, 391, 407, 408, 487, 535, 568, 572, 573, 576, 577, 579, 580, 582, 601, 626, 637, 638, 643, 649, 650, 651, 652, 653, 659, 666, 667, 669, 672, 711, 778, 854, 863, 864, 890, 895, 902, 928, 935, 938, 975, 978, 979, 980, 981, 984, 986, 993, 994, 998, 999, 1002, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 37, 49, 57, 62, 71, 75, 80, 82, 96, 97, 98, 100, 109, 112, 120, 127, 128, 130, 143, 144, 146, 154, 156, 163, 165, 168, 169, 170, 176, 177, 182, 184, 191, 192, 197, 199, 200, 204, 213, 214, 216, 217, 222, 223, 228, 229, 230, 231, 233, 244, 246, 250, 252, 253, 259, 268, 275, 279, 283, 298, 301, 303, 305, 306, 308, 312, 313, 314, 315, 317, 324, 327, 329, 334, 335, 340, 341, 343, 345, 346, 347, 354, 356, 360, 361, 366, 369, 370, 374, 375, 376, 379, 380, 382, 383, 385, 387, 388, 398, 399, 400, 401, 404, 406, 407, 408, 409, 410, 412, 428, 432, 436, 437, 441, 443, 447, 453, 454, 455, 456, 458, 459, 479, 487, 488, 494, 495, 499, 517, 523, 526, 527, 529, 531, 535, 538, 540, 542, 543, 544, 548, 549, 550, 551, 552, 553, 555, 556, 557, 563, 579, 580, 582, 583, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 626, 629, 634, 641, 643, 648, 649, 650, 651, 655, 656, 657, 659, 660, 663, 667, 668, 669, 676, 677, 678, 679, 680, 681, 682, 683, 685, 689, 693, 697, 698, 703, 706, 708, 710, 711, 716, 717, 718, 725, 727, 729, 730, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 772, 775, 778, 779, 782, 785, 786, 787, 788, 792, 794, 795, 796, 797, 799, 805, 812, 816, 819, 838, 840, 841, 842, 845, 850, 851, 853, 854, 855, 858, 862, 863, 864, 865, 866, 867, 869, 870, 877, 878, 879, 880, 881, 883, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 910, 911, 925, 927, 931, 933, 941, 967, 968, 969, 970, 971, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 989, 990, 991, 992, 993, 994, 999, 1011, 1012, 1013, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "profit": 0, "organ": [0, 11, 70, 80, 345, 368, 373, 374, 388, 838, 998], "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 37, 39, 40, 43, 44, 46, 49, 53, 55, 56, 57, 58, 65, 67, 70, 71, 72, 75, 78, 80, 81, 86, 92, 97, 99, 100, 101, 106, 110, 113, 114, 115, 116, 120, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 136, 142, 144, 146, 147, 150, 151, 155, 156, 157, 162, 163, 167, 168, 169, 171, 174, 177, 178, 182, 187, 191, 198, 199, 200, 202, 204, 206, 212, 214, 215, 216, 219, 220, 221, 223, 227, 228, 231, 232, 233, 234, 235, 237, 238, 244, 245, 249, 250, 253, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 273, 274, 277, 279, 284, 285, 286, 296, 301, 303, 304, 305, 306, 307, 308, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 332, 342, 345, 346, 347, 350, 354, 356, 360, 361, 362, 366, 368, 369, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 478, 514, 522, 523, 524, 525, 528, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 570, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 599, 601, 602, 603, 604, 605, 606, 608, 610, 613, 618, 619, 620, 621, 623, 624, 625, 631, 633, 634, 635, 638, 639, 640, 643, 645, 646, 647, 649, 650, 652, 657, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 671, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 700, 707, 708, 710, 711, 713, 715, 716, 724, 725, 726, 727, 733, 736, 746, 748, 768, 769, 770, 771, 772, 773, 779, 785, 786, 787, 790, 791, 792, 793, 795, 797, 801, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 817, 818, 819, 820, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 847, 850, 854, 857, 861, 863, 864, 865, 868, 869, 870, 871, 872, 874, 882, 883, 885, 886, 887, 890, 892, 895, 896, 898, 899, 900, 901, 902, 906, 919, 922, 926, 927, 929, 934, 935, 938, 946, 947, 950, 953, 959, 962, 967, 968, 969, 970, 971, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 990, 991, 992, 993, 994, 997, 998, 999, 1002, 1004, 1006, 1008, 1011, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "manag": [0, 86, 241, 359, 368, 372, 375, 376, 378, 382, 385, 387, 388, 407, 441, 459, 617, 888, 972, 994, 999, 1002, 1013, 1015, 1033, 1036], "board": 0, "scipi": [0, 6, 13, 17, 19, 34, 41, 46, 47, 53, 54, 78, 79, 82, 96, 98, 101, 103, 122, 150, 168, 171, 184, 188, 200, 245, 249, 250, 256, 259, 267, 271, 279, 284, 289, 298, 312, 313, 320, 321, 360, 368, 369, 372, 374, 376, 380, 383, 385, 386, 387, 390, 393, 400, 405, 408, 441, 442, 443, 444, 448, 453, 454, 487, 494, 499, 523, 525, 526, 532, 535, 572, 573, 576, 577, 579, 580, 601, 602, 639, 640, 644, 648, 649, 650, 654, 657, 659, 660, 661, 663, 665, 667, 668, 669, 671, 675, 678, 682, 683, 686, 750, 753, 768, 769, 770, 771, 780, 781, 791, 799, 801, 816, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 853, 862, 868, 869, 870, 873, 877, 880, 881, 890, 892, 893, 895, 896, 929, 949, 952, 967, 968, 974, 976, 979, 981, 982, 988, 992, 993, 997, 999, 1007, 1009, 1012, 1013, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "mission": [0, 346, 1002], "foster": [0, 1028], "comput": [0, 4, 6, 7, 11, 13, 20, 26, 37, 39, 41, 42, 46, 52, 54, 57, 58, 60, 61, 70, 72, 79, 80, 81, 82, 96, 105, 109, 113, 117, 118, 122, 123, 124, 125, 146, 150, 155, 157, 158, 162, 168, 169, 170, 171, 174, 178, 179, 182, 183, 184, 185, 186, 187, 198, 200, 202, 206, 212, 215, 216, 220, 223, 228, 230, 231, 233, 237, 238, 240, 255, 257, 259, 260, 261, 262, 266, 268, 270, 279, 281, 283, 285, 286, 288, 289, 292, 301, 311, 315, 316, 321, 323, 332, 340, 345, 346, 347, 354, 361, 362, 363, 368, 369, 371, 374, 379, 380, 381, 383, 385, 386, 387, 389, 390, 394, 395, 397, 398, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 448, 450, 452, 453, 454, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 507, 522, 523, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 573, 576, 577, 580, 581, 582, 584, 585, 594, 595, 596, 597, 600, 601, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 708, 709, 710, 711, 715, 716, 717, 719, 720, 721, 724, 726, 728, 729, 730, 732, 733, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 847, 848, 855, 856, 859, 860, 865, 866, 867, 868, 869, 870, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 924, 925, 926, 927, 943, 944, 951, 953, 959, 967, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 988, 990, 991, 992, 993, 994, 998, 999, 1002, 1008, 1009, 1012, 1013, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "particular": [0, 4, 11, 13, 37, 39, 40, 60, 71, 78, 92, 100, 104, 120, 123, 126, 154, 162, 168, 169, 198, 200, 206, 232, 237, 256, 260, 262, 268, 279, 288, 292, 301, 311, 312, 315, 346, 347, 356, 360, 368, 369, 372, 373, 374, 376, 378, 379, 380, 382, 383, 386, 387, 390, 400, 404, 405, 407, 408, 409, 410, 437, 460, 464, 487, 535, 554, 600, 644, 649, 654, 663, 665, 675, 678, 703, 718, 775, 822, 837, 909, 911, 968, 970, 972, 974, 978, 981, 982, 983, 984, 986, 988, 999, 1002, 1012, 1020, 1023, 1027, 1028, 1029, 1031, 1033, 1034, 1035], "As": [0, 4, 7, 20, 25, 27, 30, 40, 43, 53, 55, 57, 58, 66, 82, 86, 100, 110, 111, 117, 120, 122, 124, 129, 142, 150, 155, 163, 168, 170, 174, 177, 180, 182, 187, 189, 198, 202, 206, 216, 224, 234, 247, 254, 256, 257, 259, 260, 262, 272, 277, 284, 302, 314, 323, 332, 346, 347, 350, 352, 353, 356, 360, 361, 369, 372, 373, 374, 376, 378, 379, 386, 387, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 437, 484, 545, 553, 557, 610, 623, 646, 647, 663, 665, 678, 725, 748, 754, 832, 833, 834, 836, 838, 869, 967, 972, 974, 975, 977, 978, 979, 981, 985, 988, 992, 993, 994, 999, 1002, 1004, 1008, 1011, 1012, 1013, 1020, 1026, 1031, 1036], "fiscal": 0, "home": [0, 12, 27, 34, 53, 112, 130, 154, 156, 158, 159, 177, 190, 207, 245, 304, 308, 311, 316, 324, 337, 351, 369, 372, 382, 390, 399, 477, 490, 670, 1002], "ensur": [0, 20, 41, 57, 82, 92, 110, 116, 117, 171, 198, 220, 254, 262, 297, 354, 356, 360, 361, 374, 376, 378, 379, 380, 388, 390, 391, 398, 400, 401, 404, 412, 460, 524, 525, 532, 602, 618, 687, 696, 772, 779, 811, 883, 910, 911, 927, 933, 944, 974, 975, 978, 988, 994, 1008, 1022, 1024, 1025, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "monei": [0, 216, 1002], "when": [0, 4, 9, 10, 11, 20, 24, 25, 26, 27, 39, 40, 43, 56, 60, 67, 70, 71, 72, 78, 80, 81, 86, 95, 98, 99, 100, 103, 113, 116, 119, 120, 121, 123, 126, 130, 131, 132, 144, 150, 162, 167, 168, 169, 170, 171, 177, 178, 182, 187, 189, 191, 195, 198, 200, 202, 203, 214, 227, 228, 229, 233, 234, 241, 245, 247, 255, 258, 259, 260, 261, 262, 266, 268, 269, 279, 281, 285, 286, 287, 301, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 322, 323, 325, 332, 335, 336, 340, 345, 346, 347, 350, 356, 360, 361, 362, 368, 369, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 390, 391, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 416, 423, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 473, 474, 475, 476, 480, 481, 482, 483, 487, 491, 492, 493, 494, 495, 496, 499, 500, 501, 503, 506, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 569, 572, 573, 574, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 597, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 691, 692, 693, 695, 696, 698, 699, 703, 704, 707, 717, 718, 719, 720, 722, 724, 725, 728, 732, 736, 738, 741, 744, 745, 747, 751, 753, 757, 758, 759, 761, 764, 768, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 783, 785, 786, 787, 790, 791, 792, 793, 801, 805, 806, 809, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 876, 877, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 909, 910, 911, 917, 921, 925, 926, 927, 928, 930, 931, 936, 939, 946, 947, 967, 968, 970, 972, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 990, 991, 992, 993, 994, 999, 1002, 1004, 1010, 1011, 1012, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "need": [0, 4, 9, 12, 32, 46, 48, 53, 55, 57, 82, 97, 116, 120, 122, 123, 124, 130, 147, 150, 155, 162, 163, 168, 186, 200, 215, 216, 220, 227, 230, 232, 234, 238, 244, 245, 249, 250, 257, 259, 261, 262, 264, 279, 281, 306, 311, 323, 332, 340, 345, 346, 356, 360, 361, 362, 368, 369, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 394, 396, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 416, 428, 432, 436, 440, 456, 494, 532, 542, 563, 573, 574, 579, 580, 581, 582, 618, 626, 629, 630, 631, 633, 640, 657, 659, 662, 667, 670, 683, 711, 712, 713, 714, 771, 775, 785, 786, 787, 790, 791, 801, 802, 803, 811, 819, 822, 830, 831, 847, 850, 853, 857, 862, 863, 867, 885, 892, 895, 967, 968, 970, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 989, 991, 992, 993, 994, 999, 1002, 1010, 1011, 1012, 1013, 1020, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "keep": [0, 6, 42, 75, 98, 100, 116, 146, 162, 167, 168, 169, 170, 171, 182, 198, 199, 200, 206, 216, 249, 254, 257, 305, 306, 314, 321, 332, 345, 346, 350, 356, 360, 361, 366, 374, 378, 386, 387, 398, 400, 401, 402, 403, 404, 405, 423, 441, 456, 473, 474, 475, 476, 484, 485, 525, 531, 532, 535, 538, 545, 547, 549, 551, 553, 556, 559, 561, 586, 589, 591, 594, 602, 625, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 667, 668, 669, 670, 699, 805, 823, 824, 833, 841, 847, 848, 886, 891, 893, 896, 899, 901, 974, 979, 983, 986, 988, 999, 1002, 1004, 1009, 1011, 1013, 1015, 1020, 1025, 1028, 1029, 1033, 1034, 1036], "while": [0, 4, 7, 8, 10, 12, 17, 20, 24, 27, 34, 37, 39, 43, 44, 48, 55, 62, 66, 70, 73, 75, 92, 99, 100, 110, 113, 116, 117, 127, 130, 147, 151, 156, 158, 159, 162, 167, 168, 169, 170, 174, 177, 179, 182, 187, 192, 198, 200, 202, 214, 227, 230, 231, 234, 235, 245, 246, 250, 253, 254, 258, 259, 260, 262, 266, 267, 268, 269, 270, 272, 281, 301, 302, 303, 306, 307, 308, 311, 314, 317, 329, 332, 345, 347, 354, 356, 361, 366, 367, 368, 369, 370, 373, 374, 376, 378, 379, 380, 382, 383, 385, 387, 388, 394, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 412, 435, 455, 458, 459, 474, 476, 487, 512, 523, 543, 548, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 566, 573, 579, 580, 581, 582, 585, 588, 593, 597, 625, 634, 637, 638, 640, 647, 648, 649, 650, 667, 668, 669, 670, 699, 719, 720, 728, 744, 764, 768, 773, 774, 777, 778, 782, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 809, 811, 812, 813, 814, 815, 817, 825, 836, 838, 840, 841, 842, 849, 850, 851, 852, 853, 866, 878, 883, 888, 890, 891, 898, 899, 900, 901, 906, 931, 967, 968, 971, 972, 974, 975, 977, 978, 979, 980, 981, 984, 985, 988, 990, 993, 994, 998, 999, 1004, 1010, 1011, 1013, 1020, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 46, 70, 198, 216, 306, 382, 385, 387, 405, 407, 408, 512, 769, 770, 993, 998, 1002, 1028, 1029, 1030, 1036], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 369, 374, 376, 379, 383, 388, 390, 401, 405, 407, 409, 434, 552, 553, 576, 577, 711, 930, 931, 988, 994, 998, 999, 1004, 1013, 1031], "toward": [0, 26, 27, 63, 82, 117, 123, 129, 150, 170, 177, 202, 203, 224, 374, 387, 400, 439, 443, 453, 667, 669, 686, 864, 977, 992, 994, 997, 999], "cover": [0, 52, 174, 198, 216, 356, 366, 369, 374, 386, 626, 711, 782, 978, 979, 997], "travel": 0, "expens": [0, 56, 116, 130, 150, 167, 169, 228, 256, 268, 332, 345, 346, 347, 362, 380, 387, 400, 401, 404, 407, 408, 440, 459, 499, 787, 790, 791, 801, 813, 888, 890, 975, 977, 988, 993, 998, 1002, 1013, 1024], "well": [0, 4, 9, 12, 20, 24, 25, 27, 39, 48, 53, 57, 58, 62, 70, 78, 86, 110, 111, 113, 116, 121, 123, 128, 130, 147, 155, 157, 167, 168, 169, 170, 174, 182, 186, 196, 198, 199, 200, 202, 206, 219, 220, 221, 224, 227, 231, 234, 237, 246, 259, 266, 268, 270, 274, 279, 284, 285, 286, 308, 312, 313, 314, 315, 316, 317, 340, 345, 346, 347, 356, 369, 371, 373, 374, 378, 380, 382, 383, 385, 386, 387, 388, 398, 400, 402, 404, 405, 407, 410, 411, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 450, 451, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 691, 712, 713, 714, 775, 778, 780, 783, 785, 786, 787, 790, 791, 801, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 925, 926, 967, 968, 970, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 988, 991, 992, 994, 995, 998, 999, 1002, 1012, 1013, 1020, 1021, 1024, 1026, 1027, 1028, 1031], "budget": [0, 120, 825, 826, 827, 828, 829, 967], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 170, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 318, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 361, 362, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 386, 387, 388, 390, 391, 392, 393, 394, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 418, 421, 422, 423, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 482, 484, 486, 487, 488, 491, 492, 493, 495, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 568, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 753, 754, 756, 758, 759, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 911, 916, 921, 924, 925, 927, 929, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 949, 952, 953, 959, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 996, 998, 999, 1001, 1002, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1022], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 20, 26, 32, 37, 53, 66, 71, 72, 80, 82, 85, 86, 92, 98, 113, 114, 116, 119, 123, 124, 127, 147, 150, 157, 162, 167, 168, 169, 170, 174, 186, 187, 191, 198, 199, 200, 202, 206, 212, 214, 216, 219, 220, 221, 223, 227, 228, 230, 232, 233, 234, 235, 245, 254, 255, 259, 262, 265, 266, 267, 277, 279, 281, 285, 286, 296, 301, 302, 305, 311, 312, 313, 314, 315, 316, 317, 321, 323, 325, 332, 345, 354, 360, 361, 368, 371, 372, 374, 375, 376, 378, 380, 381, 385, 386, 387, 390, 391, 395, 398, 399, 400, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 423, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 478, 481, 487, 489, 495, 500, 506, 510, 518, 521, 524, 525, 529, 530, 531, 532, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 576, 577, 579, 580, 581, 582, 584, 585, 588, 590, 591, 593, 594, 595, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 623, 624, 626, 627, 629, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 691, 694, 698, 699, 704, 706, 711, 712, 713, 714, 718, 719, 720, 722, 724, 728, 731, 732, 736, 744, 745, 748, 753, 754, 758, 760, 764, 768, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 811, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 903, 906, 916, 917, 926, 927, 941, 946, 953, 967, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 981, 982, 984, 985, 986, 988, 991, 992, 993, 994, 995, 997, 998, 999, 1001, 1004, 1011, 1012, 1013, 1015, 1018, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036], "regard": [0, 5, 7, 11, 53, 55, 71, 100, 138, 150, 155, 169, 170, 187, 195, 200, 221, 233, 261, 268, 269, 340, 346, 370, 374, 375, 379, 385, 387, 394, 399, 400, 405, 407, 408, 410, 434, 438, 443, 450, 453, 492, 605, 610, 647, 649, 692, 733, 786, 793, 809, 814, 832, 833, 971, 974, 978, 980, 981, 983, 985, 992, 993, 994, 1006, 1013, 1027, 1030], "might": [0, 4, 5, 31, 42, 44, 60, 62, 70, 119, 128, 144, 156, 163, 168, 169, 170, 174, 198, 216, 227, 259, 261, 296, 313, 342, 356, 360, 361, 368, 372, 374, 375, 376, 378, 379, 380, 382, 385, 387, 388, 390, 394, 398, 401, 404, 405, 406, 407, 408, 410, 425, 434, 479, 487, 492, 494, 499, 506, 514, 527, 546, 547, 548, 555, 570, 571, 573, 601, 602, 618, 641, 645, 646, 647, 649, 650, 667, 669, 683, 747, 782, 790, 791, 814, 839, 855, 870, 883, 902, 904, 906, 910, 911, 927, 947, 967, 968, 970, 972, 974, 975, 977, 978, 980, 981, 985, 986, 988, 993, 994, 1013, 1021, 1023, 1028, 1029, 1031, 1034, 1035, 1036], "pai": [0, 216, 374], "dn": [0, 981], "continu": [0, 17, 19, 42, 120, 121, 150, 165, 169, 199, 206, 216, 220, 223, 240, 245, 249, 250, 297, 300, 306, 307, 309, 313, 314, 354, 369, 372, 376, 377, 378, 379, 382, 385, 387, 388, 390, 400, 405, 407, 459, 483, 583, 586, 587, 590, 591, 598, 599, 600, 623, 637, 638, 643, 644, 648, 651, 652, 653, 654, 716, 732, 746, 799, 801, 853, 855, 857, 859, 860, 869, 870, 871, 887, 888, 899, 941, 967, 974, 975, 978, 979, 981, 982, 988, 994, 999, 1001, 1002, 1004, 1011, 1017, 1020, 1022, 1023, 1028, 1033, 1034, 1035], "integr": [0, 42, 71, 144, 158, 187, 297, 313, 372, 376, 377, 378, 380, 382, 387, 390, 405, 410, 437, 706, 745, 776, 953, 977, 985, 1002, 1007, 1021, 1023, 1024, 1032, 1033], "servic": [0, 4, 228, 374, 378, 1002, 1028], "azur": [0, 374], "cirru": [0, 374], "cl": [0, 8, 12, 16, 381, 387, 900], "circlecl": 0, "free": [0, 5, 55, 155, 156, 163, 197, 249, 301, 368, 373, 374, 375, 382, 385, 390, 408, 410, 443, 600, 662, 846, 896, 967, 970, 974, 978, 999, 1028], "cpu": [0, 61, 260, 279, 316, 360, 361, 372, 380, 387, 390, 408, 487, 623, 638, 642, 644, 646, 649, 650, 652, 654, 656, 657, 659, 667, 670, 787, 801, 811, 812, 813, 834, 842, 883, 946, 978, 1004, 1008, 1013, 1025, 1034, 1035], "server": [0, 360, 371, 372, 487, 1028], "anaconda": [0, 361, 372, 378], "inc": [0, 70, 258, 968, 990, 1002], "storag": [0, 347, 387, 649, 650, 657, 659, 667, 668, 669, 890, 981, 993, 1023, 1028], "thei": [0, 4, 26, 27, 37, 50, 57, 82, 97, 111, 117, 118, 120, 122, 124, 126, 143, 146, 150, 151, 155, 168, 169, 182, 184, 187, 193, 198, 199, 216, 220, 223, 227, 233, 234, 253, 256, 259, 260, 262, 268, 279, 281, 296, 301, 306, 313, 315, 345, 346, 352, 353, 356, 360, 361, 362, 367, 369, 370, 371, 372, 373, 374, 375, 376, 378, 382, 383, 385, 386, 387, 388, 397, 399, 400, 401, 402, 403, 405, 407, 409, 410, 412, 431, 433, 437, 438, 444, 445, 450, 458, 487, 499, 500, 524, 526, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 579, 582, 601, 610, 620, 634, 637, 638, 643, 649, 650, 651, 652, 653, 661, 663, 667, 669, 672, 678, 752, 753, 755, 758, 764, 779, 787, 801, 819, 825, 826, 827, 828, 829, 847, 850, 852, 858, 869, 870, 892, 895, 898, 899, 900, 901, 905, 967, 968, 970, 972, 974, 977, 978, 979, 980, 981, 983, 984, 985, 986, 988, 989, 990, 992, 993, 994, 1002, 1004, 1008, 1010, 1011, 1013, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "stage": [0, 7, 26, 72, 110, 115, 121, 124, 372, 378, 396, 400, 407, 439, 544, 545, 550, 551, 552, 553, 579, 580, 582, 593, 975, 988, 997, 1028, 1032], "nightli": [0, 361, 377, 378], "build": [0, 4, 7, 17, 32, 43, 55, 67, 74, 99, 110, 119, 121, 127, 133, 144, 146, 161, 162, 164, 165, 168, 206, 264, 267, 279, 297, 298, 302, 307, 308, 347, 356, 360, 361, 362, 370, 376, 377, 378, 379, 380, 387, 390, 393, 399, 400, 401, 404, 407, 408, 433, 481, 492, 494, 515, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 576, 577, 579, 580, 582, 618, 619, 621, 682, 704, 705, 788, 792, 796, 805, 810, 812, 851, 868, 870, 898, 899, 900, 901, 903, 923, 967, 968, 975, 978, 982, 984, 988, 993, 994, 998, 999, 1002, 1005, 1007, 1011, 1012, 1020, 1023, 1025, 1026, 1027, 1029, 1032], "applic": [3, 5, 19, 49, 55, 80, 165, 174, 198, 215, 221, 253, 262, 301, 360, 362, 369, 371, 374, 376, 380, 382, 383, 385, 387, 398, 400, 404, 405, 406, 407, 410, 412, 435, 437, 443, 487, 489, 523, 524, 525, 544, 545, 620, 679, 680, 681, 685, 703, 719, 720, 728, 773, 774, 777, 816, 967, 974, 975, 976, 977, 978, 982, 984, 990, 994, 998, 999, 1002, 1011, 1013, 1020, 1021, 1026, 1028, 1031], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 55, 57, 66, 95, 110, 113, 116, 118, 123, 124, 150, 165, 170, 174, 177, 182, 184, 187, 191, 192, 198, 200, 202, 215, 216, 221, 227, 228, 235, 240, 257, 259, 264, 268, 269, 273, 279, 284, 291, 305, 314, 329, 332, 340, 341, 345, 346, 356, 360, 369, 370, 371, 372, 373, 375, 376, 379, 380, 383, 385, 387, 398, 399, 400, 402, 404, 406, 407, 408, 409, 410, 411, 412, 435, 438, 440, 441, 443, 448, 453, 456, 469, 494, 499, 500, 506, 507, 508, 509, 514, 515, 519, 522, 524, 528, 530, 533, 534, 535, 536, 537, 538, 539, 542, 543, 548, 552, 555, 558, 562, 564, 580, 601, 622, 634, 639, 641, 643, 645, 646, 647, 648, 649, 650, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 670, 671, 676, 677, 678, 679, 680, 682, 684, 686, 699, 707, 719, 720, 725, 729, 774, 777, 778, 785, 786, 788, 789, 790, 791, 792, 794, 795, 796, 797, 802, 803, 804, 805, 806, 807, 810, 818, 819, 820, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 856, 857, 863, 871, 874, 880, 881, 890, 891, 898, 900, 916, 927, 968, 969, 973, 974, 975, 977, 978, 979, 980, 981, 982, 986, 988, 992, 995, 999, 1000, 1002, 1005, 1006, 1007, 1013, 1014, 1015, 1020, 1021, 1023, 1025, 1026, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "medium": [3, 165, 233, 274, 308, 332, 400, 405, 410, 634, 864, 971, 974], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 24, 30, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 55, 57, 58, 60, 61, 62, 66, 67, 73, 78, 79, 80, 81, 82, 85, 86, 92, 95, 96, 97, 98, 99, 101, 103, 105, 113, 122, 123, 126, 127, 143, 150, 152, 153, 156, 157, 165, 167, 169, 170, 177, 178, 179, 180, 184, 188, 193, 196, 199, 200, 201, 204, 211, 212, 219, 224, 227, 230, 231, 232, 233, 234, 236, 237, 246, 253, 255, 257, 259, 261, 262, 264, 265, 266, 285, 286, 287, 295, 298, 302, 303, 304, 305, 308, 312, 315, 317, 321, 325, 328, 330, 331, 332, 342, 345, 346, 347, 350, 360, 361, 362, 369, 370, 374, 379, 383, 385, 386, 387, 390, 391, 397, 398, 399, 402, 404, 405, 408, 410, 411, 435, 436, 437, 439, 440, 441, 448, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 484, 485, 486, 506, 518, 525, 527, 529, 531, 538, 548, 549, 550, 551, 552, 553, 555, 556, 574, 578, 579, 582, 585, 623, 624, 634, 648, 657, 658, 670, 674, 683, 686, 696, 710, 728, 730, 733, 771, 781, 789, 792, 793, 797, 804, 807, 808, 811, 814, 816, 825, 826, 827, 829, 832, 833, 834, 835, 836, 838, 840, 841, 842, 847, 848, 865, 867, 879, 884, 888, 892, 893, 894, 895, 896, 898, 899, 900, 901, 904, 926, 930, 931, 941, 942, 944, 947, 953, 968, 970, 971, 973, 974, 975, 977, 978, 979, 980, 981, 982, 985, 988, 990, 992, 993, 994, 1002, 1007, 1009, 1011, 1012, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1035, 1036], "interact": [3, 90, 124, 165, 198, 224, 229, 260, 312, 373, 375, 376, 378, 380, 385, 387, 388, 401, 550, 551, 552, 553, 623, 624, 865, 869, 967, 970, 974, 975, 976, 983, 985, 988, 997, 999, 1022, 1027, 1034, 1035], "user": [3, 25, 55, 69, 95, 116, 159, 165, 168, 186, 219, 234, 249, 256, 266, 268, 279, 285, 286, 289, 307, 311, 312, 313, 314, 315, 316, 317, 356, 360, 361, 363, 368, 372, 373, 374, 376, 378, 380, 381, 382, 385, 386, 387, 390, 391, 394, 398, 399, 400, 401, 402, 404, 405, 407, 408, 409, 411, 412, 413, 414, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 688, 689, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 923, 927, 967, 968, 974, 975, 977, 978, 979, 981, 988, 992, 996, 999, 1002, 1006, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "interfac": [3, 109, 110, 165, 367, 368, 375, 376, 383, 385, 387, 404, 410, 411, 432, 436, 441, 487, 787, 790, 791, 801, 850, 851, 876, 963, 967, 981, 993, 998, 999, 1002, 1020, 1022, 1025, 1026, 1028, 1029, 1034], "compress": [3, 11, 15, 48, 165, 301, 369, 400, 405, 408, 643, 663, 683, 820, 949, 952, 974, 988, 1012, 1020, 1029], "sens": [3, 4, 15, 25, 55, 156, 165, 168, 174, 231, 234, 301, 307, 321, 332, 345, 356, 360, 374, 375, 387, 400, 402, 404, 453, 460, 461, 462, 463, 464, 465, 466, 467, 643, 646, 647, 663, 788, 798, 887, 972, 974, 981, 982, 984, 988, 991], "tomographi": [3, 15, 165, 643, 663, 974], "reconstruct": [3, 15, 20, 95, 96, 100, 165, 197, 222, 223, 315, 405, 408, 473, 474, 475, 522, 524, 526, 528, 529, 530, 531, 533, 534, 539, 574, 578, 643, 663, 679, 680, 684, 882, 883, 974, 975, 1034], "l1": [3, 7, 15, 30, 40, 82, 85, 165, 176, 183, 187, 209, 213, 217, 229, 260, 279, 314, 383, 385, 399, 400, 402, 405, 432, 436, 441, 448, 455, 460, 461, 462, 463, 464, 465, 466, 467, 469, 487, 493, 495, 522, 528, 529, 530, 531, 533, 534, 538, 539, 549, 556, 580, 581, 582, 588, 635, 636, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 659, 661, 663, 667, 668, 669, 670, 672, 679, 725, 752, 758, 763, 768, 769, 770, 775, 801, 808, 816, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 862, 870, 877, 890, 891, 897, 899, 901, 913, 960, 974, 976, 978, 981, 988, 992, 993, 994, 1011, 1025, 1027, 1033, 1036], "prior": [3, 15, 46, 47, 57, 67, 149, 150, 160, 165, 170, 177, 179, 182, 243, 245, 249, 250, 251, 259, 374, 376, 378, 387, 390, 400, 403, 405, 407, 410, 456, 514, 527, 539, 540, 541, 542, 550, 576, 577, 602, 604, 605, 606, 610, 613, 614, 621, 635, 636, 637, 638, 642, 643, 645, 646, 647, 651, 652, 653, 663, 669, 672, 707, 785, 825, 826, 827, 828, 829, 850, 851, 865, 892, 895, 945, 967, 970, 972, 974, 977, 978, 980, 986, 994, 995, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1036], "lasso": [3, 15, 105, 130, 136, 165, 168, 176, 217, 314, 360, 385, 402, 403, 405, 407, 408, 409, 462, 463, 469, 492, 515, 522, 528, 530, 533, 534, 536, 537, 539, 588, 637, 638, 640, 641, 642, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 669, 672, 673, 674, 675, 676, 677, 712, 713, 714, 811, 812, 813, 851, 870, 967, 978, 992, 1000, 1008, 1011, 1015, 1020, 1024, 1025, 1026, 1028, 1029, 1031, 1033, 1034], "recognit": [3, 9, 15, 165, 298, 306, 367, 379, 405, 407, 409, 485, 493, 523, 525, 532, 688, 699, 704, 731, 759, 778, 779, 785, 801, 816, 870, 895, 970, 974, 978, 979, 983, 993, 995, 1004, 1007, 1015, 1020], "eigenfac": [3, 15, 165, 369, 405, 485, 532, 688, 704, 801, 816, 870, 895, 995, 1007, 1020], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 70, 72, 74, 131, 135, 137, 140, 141, 145, 148, 165, 176, 191, 217, 227, 233, 235, 239, 240, 253, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 269, 270, 274, 303, 311, 313, 319, 323, 326, 327, 330, 339, 340, 343, 345, 360, 363, 369, 376, 380, 387, 394, 401, 404, 405, 407, 409, 428, 485, 495, 503, 506, 532, 546, 547, 554, 558, 559, 568, 584, 585, 590, 591, 596, 622, 630, 634, 659, 667, 668, 669, 680, 688, 689, 691, 693, 704, 725, 732, 787, 801, 807, 812, 813, 816, 818, 819, 836, 850, 851, 863, 870, 886, 887, 966, 967, 970, 973, 975, 976, 978, 979, 983, 991, 993, 995, 1000, 1004, 1007, 1008, 1009, 1013, 1015, 1017, 1020, 1021, 1022, 1024, 1025, 1026, 1027], "imag": [3, 6, 13, 15, 20, 32, 36, 46, 48, 51, 54, 58, 68, 70, 89, 94, 95, 107, 118, 145, 154, 165, 189, 220, 229, 232, 236, 257, 288, 297, 298, 312, 320, 321, 345, 346, 366, 367, 369, 371, 374, 379, 382, 385, 387, 390, 393, 400, 405, 432, 436, 443, 453, 484, 485, 486, 487, 493, 494, 497, 498, 525, 526, 528, 532, 598, 599, 682, 688, 728, 816, 860, 974, 978, 979, 981, 983, 990, 994, 998, 1002, 1004, 1009, 1010, 1012, 1013, 1015, 1020, 1023, 1028, 1029, 1033, 1035, 1036], "denois": [3, 15, 94, 107, 165, 405, 487, 526, 528, 532, 575, 578, 816, 860], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 74, 94, 105, 107, 131, 137, 139, 145, 149, 151, 152, 153, 154, 157, 160, 162, 175, 199, 212, 226, 227, 235, 239, 242, 253, 257, 259, 261, 264, 265, 269, 274, 280, 293, 314, 322, 325, 327, 329, 332, 333, 334, 337, 338, 341, 343, 356, 360, 363, 366, 376, 385, 387, 398, 400, 401, 404, 407, 408, 423, 431, 439, 443, 452, 453, 456, 473, 474, 475, 482, 487, 489, 493, 495, 505, 524, 525, 526, 532, 535, 545, 547, 549, 551, 553, 556, 559, 561, 584, 585, 601, 602, 622, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 667, 668, 669, 670, 679, 681, 682, 683, 686, 725, 748, 749, 751, 756, 757, 764, 765, 766, 767, 787, 793, 798, 801, 816, 818, 823, 824, 830, 831, 833, 835, 841, 848, 850, 851, 856, 860, 862, 863, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 899, 901, 967, 973, 974, 975, 978, 979, 981, 984, 991, 992, 998, 1000, 1004, 1008, 1009, 1014, 1015, 1020, 1021, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "pca": [3, 6, 15, 69, 72, 74, 76, 86, 90, 94, 97, 106, 107, 165, 220, 222, 232, 235, 239, 258, 279, 283, 288, 314, 356, 366, 376, 387, 399, 400, 401, 406, 416, 464, 467, 487, 493, 495, 505, 523, 524, 525, 526, 530, 531, 534, 535, 540, 634, 649, 679, 681, 683, 787, 812, 816, 839, 846, 849, 850, 852, 860, 868, 870, 970, 972, 975, 981, 988, 992, 994, 1009, 1014, 1015, 1020, 1022, 1023, 1024, 1026, 1027, 1028, 1031, 1033, 1034, 1035], "libsvm": [3, 15, 165, 174, 330, 367, 380, 478, 499, 554, 890, 891, 892, 893, 894, 895, 896, 993, 998, 1015, 1020, 1022, 1028, 1031, 1034], "gui": [3, 15, 165, 478, 894, 895, 1011, 1020, 1021, 1031], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 49, 54, 55, 56, 58, 61, 69, 71, 76, 78, 82, 86, 94, 95, 107, 108, 110, 113, 115, 119, 121, 122, 123, 125, 127, 129, 130, 133, 134, 136, 137, 139, 141, 143, 148, 153, 154, 156, 157, 158, 159, 163, 166, 167, 171, 172, 178, 180, 184, 188, 189, 191, 193, 194, 195, 199, 200, 202, 204, 206, 210, 211, 213, 214, 215, 217, 227, 230, 235, 244, 246, 247, 248, 251, 253, 254, 255, 257, 260, 262, 264, 265, 267, 268, 272, 273, 275, 277, 279, 281, 283, 285, 288, 292, 302, 305, 307, 308, 311, 313, 315, 316, 317, 320, 321, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 346, 347, 351, 352, 353, 356, 363, 366, 368, 369, 377, 380, 387, 389, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 409, 410, 419, 423, 425, 428, 433, 440, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 479, 480, 481, 487, 489, 492, 493, 494, 500, 513, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 579, 580, 582, 584, 585, 588, 593, 597, 600, 601, 602, 606, 618, 623, 624, 625, 626, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 692, 697, 702, 712, 713, 714, 724, 725, 731, 732, 740, 743, 775, 778, 779, 780, 785, 786, 787, 790, 791, 792, 793, 801, 802, 803, 804, 808, 809, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 833, 835, 836, 837, 839, 841, 846, 847, 848, 850, 851, 853, 855, 857, 862, 863, 865, 866, 867, 869, 870, 871, 875, 876, 878, 879, 880, 881, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 905, 968, 970, 971, 972, 975, 976, 979, 981, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 998, 999, 1000, 1002, 1005, 1007, 1009, 1013, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1025], "complex": [3, 9, 14, 15, 16, 150, 155, 162, 165, 202, 212, 215, 226, 233, 234, 242, 252, 268, 275, 302, 311, 314, 315, 319, 326, 332, 347, 349, 355, 370, 374, 379, 385, 401, 405, 407, 410, 411, 431, 435, 438, 439, 441, 458, 480, 491, 492, 493, 505, 525, 532, 542, 548, 549, 550, 551, 553, 555, 556, 595, 621, 629, 647, 649, 667, 668, 724, 740, 787, 816, 818, 846, 850, 851, 855, 863, 870, 886, 890, 893, 896, 898, 899, 900, 901, 967, 968, 970, 971, 973, 977, 979, 984, 988, 991, 999, 1000, 1002, 1015, 1021, 1023, 1029, 1030, 1033], "influenc": [3, 9, 15, 80, 81, 110, 165, 168, 180, 244, 267, 301, 308, 332, 340, 356, 362, 402, 405, 407, 423, 431, 445, 456, 473, 474, 475, 480, 492, 545, 547, 549, 551, 553, 556, 559, 561, 602, 619, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 667, 669, 670, 724, 740, 816, 823, 824, 832, 833, 840, 841, 848, 867, 868, 879, 891, 893, 896, 899, 901, 910, 967, 972, 973, 981, 984, 988, 992, 993, 1002, 1023, 1028, 1029], "core": [3, 15, 49, 55, 65, 71, 110, 116, 118, 119, 165, 168, 169, 316, 359, 361, 363, 372, 374, 377, 382, 387, 390, 400, 405, 407, 411, 435, 437, 440, 441, 446, 448, 490, 529, 580, 585, 649, 650, 657, 659, 667, 825, 826, 827, 828, 829, 834, 842, 974, 981, 984, 993, 996, 999, 1000, 1002, 1011, 1013, 1015, 1022, 1024, 1025, 1027, 1030, 1034, 1035, 1036], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 34, 35, 45, 71, 72, 73, 88, 93, 98, 109, 110, 112, 114, 116, 117, 118, 119, 121, 124, 128, 135, 140, 143, 144, 145, 146, 149, 160, 168, 169, 174, 176, 190, 191, 198, 206, 217, 226, 228, 232, 237, 240, 242, 247, 252, 256, 257, 258, 259, 260, 268, 274, 275, 280, 281, 287, 289, 292, 293, 294, 299, 303, 320, 326, 328, 332, 335, 338, 340, 341, 344, 346, 347, 348, 356, 360, 362, 363, 367, 368, 369, 371, 376, 379, 383, 386, 387, 395, 398, 400, 401, 404, 405, 408, 409, 417, 428, 460, 466, 473, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 493, 494, 495, 501, 503, 505, 506, 510, 511, 513, 514, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 595, 596, 597, 600, 601, 602, 604, 605, 613, 622, 623, 624, 634, 649, 650, 657, 659, 665, 666, 667, 688, 694, 696, 699, 703, 704, 706, 707, 709, 716, 717, 719, 720, 724, 728, 731, 732, 733, 744, 746, 748, 749, 772, 773, 774, 776, 777, 778, 779, 782, 784, 787, 788, 790, 791, 792, 793, 801, 805, 806, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 832, 837, 839, 840, 846, 847, 848, 850, 854, 857, 862, 863, 864, 870, 871, 874, 876, 885, 886, 887, 890, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 913, 916, 924, 967, 968, 970, 971, 972, 975, 976, 980, 983, 985, 986, 988, 989, 991, 997, 998, 1000, 1001, 1002, 1004, 1005, 1009, 1010, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 53, 57, 60, 62, 64, 70, 80, 81, 116, 121, 178, 192, 193, 227, 231, 238, 239, 244, 246, 252, 265, 266, 270, 275, 284, 287, 289, 295, 303, 314, 319, 321, 326, 339, 348, 350, 360, 362, 363, 366, 367, 368, 374, 379, 385, 387, 398, 400, 401, 403, 404, 405, 407, 410, 438, 440, 459, 478, 479, 480, 490, 494, 499, 512, 527, 535, 555, 606, 616, 643, 649, 657, 659, 665, 667, 688, 694, 696, 698, 704, 708, 719, 727, 781, 783, 787, 801, 816, 825, 827, 829, 832, 837, 850, 851, 853, 854, 862, 886, 887, 888, 890, 902, 903, 904, 924, 967, 970, 974, 976, 978, 979, 980, 982, 985, 988, 990, 992, 993, 997, 999, 1002, 1005, 1015, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "outlier": [3, 15, 44, 80, 81, 123, 126, 165, 176, 200, 201, 202, 204, 217, 226, 242, 280, 293, 300, 309, 342, 369, 387, 400, 402, 407, 422, 437, 460, 461, 464, 465, 466, 467, 481, 482, 483, 487, 501, 503, 513, 515, 554, 630, 640, 661, 662, 663, 667, 668, 669, 670, 683, 693, 836, 840, 851, 857, 859, 860, 862, 866, 867, 868, 870, 876, 879, 893, 894, 896, 978, 992, 993, 998, 1000, 1014, 1015, 1020, 1025, 1026, 1028], "detect": [3, 8, 10, 15, 20, 63, 65, 80, 82, 117, 126, 165, 179, 202, 226, 242, 252, 259, 262, 275, 280, 293, 307, 331, 369, 372, 374, 378, 385, 387, 398, 399, 400, 402, 404, 408, 422, 437, 440, 460, 461, 464, 465, 466, 467, 479, 480, 482, 483, 487, 501, 503, 506, 513, 528, 529, 530, 537, 554, 555, 579, 582, 587, 630, 668, 689, 693, 717, 779, 816, 836, 840, 851, 857, 870, 890, 894, 970, 974, 999, 1000, 1002, 1008, 1013, 1014, 1015, 1020, 1023, 1026, 1027, 1028, 1030, 1032, 1033, 1035, 1036], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 20, 25, 26, 27, 30, 31, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 55, 57, 58, 60, 62, 64, 65, 66, 70, 71, 73, 80, 81, 82, 86, 90, 94, 95, 100, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 132, 136, 143, 144, 147, 150, 156, 157, 158, 159, 165, 167, 168, 169, 170, 171, 177, 182, 183, 186, 187, 189, 191, 193, 194, 197, 198, 199, 200, 203, 206, 211, 212, 216, 219, 220, 221, 227, 228, 229, 230, 232, 233, 234, 241, 244, 246, 248, 249, 253, 254, 257, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 273, 277, 281, 285, 286, 287, 288, 289, 292, 296, 297, 298, 301, 303, 304, 305, 306, 307, 308, 311, 313, 314, 320, 321, 324, 325, 329, 331, 334, 340, 345, 346, 347, 352, 353, 356, 360, 361, 362, 366, 367, 369, 371, 372, 374, 376, 378, 379, 381, 382, 386, 387, 388, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 417, 424, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 479, 480, 484, 486, 487, 488, 490, 493, 494, 495, 499, 500, 501, 506, 514, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 688, 689, 691, 692, 693, 694, 704, 705, 710, 712, 713, 716, 717, 718, 719, 720, 721, 724, 728, 730, 731, 735, 736, 738, 740, 741, 743, 746, 769, 770, 772, 773, 774, 775, 777, 779, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 910, 911, 921, 922, 927, 931, 946, 947, 948, 949, 952, 953, 959, 962, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1005, 1007, 1008, 1009, 1012, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 56, 58, 62, 70, 71, 72, 73, 75, 85, 106, 108, 109, 110, 112, 113, 114, 116, 118, 119, 120, 121, 124, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 144, 147, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 165, 168, 169, 170, 174, 177, 180, 181, 182, 190, 193, 194, 195, 196, 199, 200, 201, 202, 204, 205, 206, 207, 212, 213, 215, 216, 227, 228, 230, 232, 234, 236, 245, 246, 247, 248, 249, 250, 252, 253, 257, 259, 261, 262, 265, 268, 269, 273, 275, 277, 282, 285, 286, 287, 290, 291, 298, 301, 302, 306, 307, 311, 312, 313, 314, 315, 317, 321, 323, 324, 325, 328, 329, 331, 332, 338, 339, 340, 341, 345, 346, 351, 352, 353, 354, 356, 359, 361, 363, 366, 369, 371, 374, 376, 381, 383, 387, 389, 391, 394, 395, 396, 398, 399, 400, 401, 405, 407, 408, 409, 417, 423, 428, 429, 430, 431, 433, 434, 435, 438, 439, 440, 456, 460, 473, 474, 475, 478, 492, 499, 515, 525, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 568, 573, 584, 585, 593, 597, 601, 602, 604, 605, 606, 607, 613, 616, 618, 619, 621, 622, 623, 624, 625, 626, 628, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 705, 706, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 724, 725, 728, 731, 732, 733, 736, 738, 740, 742, 746, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 784, 785, 786, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 836, 837, 840, 841, 847, 848, 850, 857, 870, 871, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 952, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 979, 980, 981, 982, 984, 985, 986, 988, 991, 992, 993, 994, 997, 998, 999, 1001, 1002, 1005, 1007, 1008, 1009, 1013, 1015, 1017, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "latenc": [3, 7, 15, 121, 165, 359, 515, 556, 663, 669, 816, 870, 896, 943, 952, 998, 1015, 1023], "speci": [3, 15, 165, 280, 293, 345, 369, 406, 489, 697, 779, 835, 894, 905, 978, 984, 1020], "distribut": [3, 4, 8, 9, 10, 15, 20, 27, 37, 39, 44, 52, 53, 55, 57, 62, 75, 79, 80, 81, 92, 110, 112, 123, 126, 142, 150, 159, 165, 167, 168, 174, 177, 198, 200, 202, 221, 223, 227, 231, 244, 249, 250, 255, 259, 265, 267, 280, 284, 293, 300, 301, 303, 306, 309, 317, 320, 321, 337, 340, 345, 360, 361, 369, 370, 371, 372, 374, 375, 378, 379, 380, 387, 394, 398, 399, 400, 402, 404, 405, 406, 410, 412, 438, 440, 460, 461, 462, 463, 464, 465, 466, 467, 479, 489, 494, 506, 507, 508, 509, 510, 514, 523, 524, 527, 541, 542, 543, 554, 602, 616, 631, 633, 635, 636, 639, 649, 650, 660, 670, 671, 679, 680, 681, 683, 697, 699, 714, 742, 779, 785, 786, 791, 792, 799, 801, 805, 806, 816, 826, 829, 835, 839, 846, 853, 866, 867, 868, 869, 870, 878, 879, 880, 885, 886, 894, 905, 929, 946, 967, 972, 974, 976, 977, 978, 980, 981, 983, 984, 990, 991, 996, 998, 999, 1004, 1008, 1012, 1014, 1015, 1020, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1036], "relat": [3, 7, 12, 15, 17, 44, 62, 96, 98, 100, 165, 166, 168, 193, 202, 234, 237, 252, 266, 316, 345, 354, 363, 369, 370, 373, 377, 378, 379, 381, 382, 383, 385, 387, 388, 389, 391, 394, 399, 400, 401, 402, 403, 404, 405, 407, 410, 441, 455, 460, 487, 540, 541, 553, 554, 630, 664, 668, 683, 692, 713, 733, 808, 813, 848, 849, 851, 854, 855, 860, 863, 864, 865, 866, 869, 878, 894, 967, 972, 978, 979, 981, 982, 985, 988, 993, 994, 995, 996, 999, 1015, 1020, 1024, 1025, 1026, 1028, 1029, 1032, 1033, 1036], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 20, 25, 26, 27, 30, 33, 36, 42, 58, 60, 63, 68, 69, 70, 71, 72, 76, 80, 81, 86, 89, 90, 91, 92, 95, 97, 99, 103, 104, 106, 108, 109, 116, 119, 125, 129, 130, 131, 133, 134, 142, 144, 148, 150, 151, 152, 155, 156, 158, 162, 163, 166, 167, 168, 169, 172, 176, 181, 182, 184, 185, 187, 194, 198, 199, 200, 202, 203, 207, 213, 214, 215, 217, 226, 229, 231, 234, 240, 241, 242, 252, 256, 259, 265, 266, 268, 269, 273, 275, 277, 282, 287, 288, 290, 294, 297, 299, 300, 301, 304, 308, 309, 310, 312, 315, 316, 317, 327, 328, 329, 332, 340, 343, 344, 347, 348, 351, 353, 354, 356, 363, 366, 367, 368, 369, 370, 371, 372, 376, 377, 379, 381, 382, 383, 385, 386, 387, 388, 389, 390, 394, 398, 400, 402, 403, 404, 405, 406, 410, 411, 412, 413, 416, 421, 423, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 570, 571, 572, 573, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 609, 610, 611, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 676, 677, 678, 679, 680, 681, 682, 683, 688, 692, 693, 694, 704, 712, 713, 714, 731, 748, 749, 753, 754, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 771, 775, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 910, 911, 924, 943, 953, 954, 955, 959, 967, 970, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 989, 990, 991, 992, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1009, 1010, 1011, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "engin": [3, 15, 40, 115, 155, 165, 360, 368, 371, 400, 406, 408, 410, 455, 487, 553, 630, 664, 692, 808, 813, 848, 849, 851, 854, 855, 860, 863, 864, 865, 869, 968, 978, 988, 996, 1026], "topic": [3, 7, 8, 15, 70, 165, 345, 346, 347, 369, 370, 404, 405, 408, 479, 488, 527, 529, 531, 538, 579, 582, 974, 979, 998, 999, 1013, 1025, 1027], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 55, 69, 70, 71, 76, 85, 95, 165, 213, 252, 275, 298, 345, 347, 356, 363, 366, 369, 371, 376, 380, 383, 385, 400, 401, 404, 405, 441, 443, 446, 447, 453, 455, 479, 480, 484, 485, 494, 495, 522, 525, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 574, 575, 579, 580, 582, 584, 585, 588, 590, 622, 709, 778, 787, 801, 827, 849, 850, 895, 927, 942, 967, 975, 979, 983, 988, 992, 998, 1002, 1005, 1009, 1010, 1015, 1020, 1021, 1029, 1032], "neg": [3, 4, 15, 16, 24, 60, 75, 78, 86, 116, 122, 123, 127, 165, 168, 176, 198, 216, 217, 248, 249, 256, 259, 262, 266, 268, 269, 279, 301, 305, 315, 345, 380, 387, 388, 400, 404, 407, 408, 409, 411, 412, 423, 431, 435, 443, 456, 460, 473, 474, 475, 479, 522, 524, 526, 527, 528, 529, 531, 533, 535, 538, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 579, 582, 583, 586, 587, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 660, 661, 663, 664, 668, 669, 670, 671, 678, 689, 695, 696, 703, 704, 706, 709, 710, 712, 713, 714, 717, 719, 720, 721, 725, 728, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 772, 773, 774, 775, 777, 781, 785, 786, 793, 809, 811, 816, 823, 824, 833, 836, 841, 848, 857, 866, 868, 869, 874, 878, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 925, 927, 946, 976, 978, 979, 981, 982, 983, 984, 992, 993, 1013, 1014, 1015, 1020, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 62, 70, 79, 80, 81, 82, 85, 95, 96, 97, 106, 157, 165, 171, 176, 184, 199, 203, 217, 228, 231, 232, 249, 252, 266, 275, 297, 315, 320, 321, 345, 346, 347, 354, 360, 363, 369, 370, 371, 374, 376, 380, 383, 385, 386, 387, 397, 401, 402, 403, 408, 409, 410, 411, 412, 422, 423, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 445, 448, 450, 451, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 483, 487, 488, 491, 492, 493, 494, 495, 496, 499, 500, 501, 510, 512, 514, 515, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 576, 577, 579, 580, 581, 582, 584, 585, 594, 595, 596, 597, 598, 599, 600, 602, 611, 620, 621, 622, 624, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 698, 703, 704, 705, 706, 707, 709, 719, 720, 721, 724, 728, 729, 730, 731, 744, 745, 748, 749, 750, 751, 753, 754, 756, 757, 758, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 777, 778, 780, 781, 784, 785, 786, 787, 790, 791, 801, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 859, 861, 862, 863, 865, 867, 868, 869, 870, 872, 873, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 906, 908, 909, 910, 911, 916, 925, 926, 927, 928, 931, 932, 933, 941, 942, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 964, 968, 970, 972, 974, 975, 979, 980, 981, 982, 988, 989, 990, 991, 992, 994, 995, 1012, 1013, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "factor": [3, 15, 26, 31, 44, 46, 53, 55, 62, 94, 100, 105, 107, 128, 165, 168, 224, 227, 237, 270, 271, 279, 280, 293, 295, 296, 301, 303, 313, 315, 360, 361, 374, 380, 383, 387, 397, 399, 400, 407, 408, 410, 431, 433, 445, 460, 462, 463, 464, 465, 467, 469, 479, 495, 505, 506, 518, 523, 526, 527, 529, 531, 532, 535, 536, 537, 538, 540, 541, 552, 553, 554, 579, 582, 588, 604, 640, 641, 642, 645, 646, 647, 673, 674, 683, 710, 773, 787, 790, 791, 812, 836, 870, 884, 886, 894, 926, 927, 967, 974, 975, 981, 988, 991, 995, 998, 1014, 1015, 1020, 1021, 1023, 1024, 1026, 1034, 1036], "latent": [3, 15, 17, 106, 165, 298, 346, 403, 408, 410, 479, 523, 527, 529, 530, 531, 534, 535, 579, 582, 846, 977, 998, 1013, 1014, 1015, 1022, 1025], "dirichlet": [3, 15, 165, 244, 245, 250, 254, 408, 479, 527, 529, 531, 579, 582, 785, 998, 1014, 1015, 1020, 1025, 1026], "alloc": [3, 15, 25, 61, 165, 271, 313, 370, 374, 375, 400, 408, 434, 438, 450, 479, 527, 529, 531, 575, 579, 582, 637, 643, 651, 653, 790, 791, 793, 809, 814, 817, 967, 988, 998, 1014, 1015, 1024, 1025, 1030, 1031], "visual": [3, 4, 9, 15, 16, 20, 25, 30, 32, 43, 46, 49, 52, 57, 60, 61, 80, 91, 94, 97, 99, 105, 107, 116, 124, 126, 128, 132, 133, 158, 163, 165, 169, 171, 182, 189, 198, 200, 216, 224, 226, 229, 232, 238, 239, 242, 249, 252, 253, 255, 256, 260, 269, 275, 284, 288, 289, 294, 296, 299, 301, 305, 306, 311, 313, 321, 363, 366, 370, 372, 380, 381, 397, 402, 404, 405, 406, 407, 429, 432, 436, 437, 445, 463, 487, 493, 495, 498, 501, 505, 513, 523, 525, 532, 555, 557, 562, 622, 624, 649, 680, 683, 688, 689, 691, 692, 693, 709, 717, 772, 779, 788, 789, 792, 793, 804, 805, 806, 807, 808, 809, 816, 847, 851, 870, 895, 904, 923, 973, 975, 976, 981, 982, 984, 985, 988, 994, 998, 1004, 1015, 1023, 1030, 1031, 1032, 1034], "stock": [3, 15, 165, 400, 402, 445, 463, 680, 1007], "market": [3, 15, 165, 400, 402, 445, 463, 680, 1002, 1007], "wikipedia": [3, 15, 24, 165, 382, 399, 400, 586, 598, 599, 627, 647, 659, 662, 673, 674, 686, 695, 696, 698, 700, 703, 707, 709, 716, 719, 720, 721, 724, 725, 728, 733, 746, 773, 775, 776, 778, 779, 780, 781, 832, 833, 838, 839, 840, 841, 868, 884, 898, 899, 970, 974, 978, 981, 990, 994, 1013, 1020, 1027], "princip": [3, 15, 84, 87, 94, 97, 99, 100, 102, 104, 107, 128, 165, 219, 232, 235, 288, 306, 313, 366, 400, 403, 412, 475, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 541, 648, 679, 680, 681, 683, 684, 816, 839, 851, 870, 926, 927, 975, 981, 1014, 1015, 1020], "eigenvector": [3, 15, 46, 86, 90, 165, 244, 400, 443, 453, 525, 526, 532, 541, 679, 680, 682, 686, 975, 1020, 1024, 1034], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 372, 374, 376, 378, 385, 387, 388, 390, 397, 400, 401, 403, 407, 441, 447, 459, 479, 480, 499, 500, 528, 537, 548, 549, 550, 551, 555, 556, 557, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 652, 653, 654, 672, 673, 674, 675, 787, 790, 791, 801, 808, 811, 848, 850, 888, 898, 899, 900, 901, 931, 932, 962, 967, 974, 975, 977, 978, 988, 990, 992, 998, 1002, 1010, 1013, 1025, 1027, 1030, 1033, 1034], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 367, 369, 371, 372, 378, 379, 382, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 501, 994, 1009, 1011, 1013, 1015, 1024, 1025, 1028, 1032, 1033, 1034], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 360, 361, 363, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 390, 393, 394, 399, 411, 412, 416, 430, 447, 452, 462, 476, 498, 499, 522, 538, 546, 563, 564, 568, 574, 583, 586, 587, 589, 592, 594, 603, 607, 611, 612, 615, 620, 629, 633, 641, 642, 645, 651, 652, 654, 658, 666, 699, 706, 712, 713, 714, 716, 718, 720, 721, 725, 729, 733, 734, 736, 737, 741, 744, 746, 753, 754, 758, 759, 761, 763, 771, 773, 782, 794, 795, 796, 797, 798, 799, 800, 818, 820, 822, 824, 826, 830, 831, 840, 841, 842, 844, 852, 853, 856, 858, 861, 872, 875, 877, 878, 880, 881, 882, 885, 891, 900, 901, 902, 903, 916, 925, 927, 929, 930, 932, 940, 941, 942, 949, 966, 968, 976, 999, 1000, 1002, 1005, 1008, 1009, 1013, 1015, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1033, 1035, 1036], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 361, 372, 374, 375, 376, 378, 379, 380, 381, 382, 385, 387, 388, 390, 396, 400, 402, 404, 407, 410, 411, 412, 428, 434, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 453, 455, 458, 459, 462, 463, 522, 523, 524, 525, 526, 528, 530, 532, 533, 534, 536, 537, 539, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 573, 583, 585, 586, 587, 589, 590, 591, 593, 601, 602, 625, 631, 637, 638, 640, 642, 643, 644, 646, 647, 651, 652, 653, 654, 673, 674, 679, 680, 681, 682, 683, 684, 685, 771, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 822, 823, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 847, 848, 849, 852, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 921, 922, 946, 949, 952, 967, 977, 979, 982, 991, 993, 994, 998, 999, 1002, 1004, 1011, 1013, 1020, 1023, 1025, 1027, 1028, 1029, 1030, 1034, 1035, 1036], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 361, 362, 368, 372, 373, 374, 375, 377, 378, 380, 382, 383, 385, 386, 387, 390, 394, 396, 399, 400, 401, 402, 407, 408, 411, 412, 435, 437, 494, 524, 552, 553, 593, 625, 637, 678, 787, 790, 791, 793, 801, 809, 813, 815, 921, 975, 982, 988, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1006, 1013, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 374, 382, 988], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 375, 380, 401, 459, 888, 994, 997, 998, 999, 1031, 1034], "introduc": [4, 78, 80, 81, 100, 146, 165, 170, 177, 182, 202, 226, 231, 234, 242, 266, 316, 317, 347, 367, 370, 372, 374, 376, 378, 379, 382, 385, 387, 390, 391, 398, 400, 402, 404, 405, 407, 408, 424, 432, 433, 434, 436, 438, 440, 450, 455, 459, 473, 474, 475, 476, 487, 495, 506, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 546, 547, 557, 558, 559, 560, 561, 572, 573, 574, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 649, 655, 676, 677, 679, 680, 683, 816, 834, 839, 842, 846, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 884, 888, 972, 974, 977, 980, 981, 984, 988, 990, 992, 993, 1004, 1011, 1020, 1021, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 20, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 49, 53, 57, 58, 64, 65, 66, 67, 68, 70, 71, 72, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 103, 104, 105, 109, 110, 113, 115, 116, 119, 120, 123, 125, 130, 131, 132, 133, 136, 139, 142, 147, 149, 150, 151, 152, 155, 156, 157, 160, 162, 163, 165, 167, 168, 170, 174, 177, 178, 184, 185, 186, 187, 189, 195, 198, 199, 200, 202, 203, 204, 205, 206, 216, 219, 220, 221, 224, 227, 229, 232, 233, 234, 237, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 273, 274, 279, 285, 286, 288, 295, 296, 300, 305, 306, 309, 311, 327, 331, 332, 336, 340, 341, 343, 345, 346, 347, 356, 360, 361, 362, 368, 369, 371, 372, 373, 374, 377, 379, 381, 383, 386, 387, 390, 394, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 425, 428, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 449, 450, 453, 455, 466, 469, 481, 484, 485, 487, 494, 495, 499, 500, 503, 505, 513, 528, 529, 530, 531, 537, 538, 540, 541, 546, 547, 554, 579, 580, 581, 582, 585, 602, 604, 605, 606, 610, 613, 614, 618, 622, 623, 624, 625, 629, 634, 635, 638, 640, 642, 644, 646, 649, 652, 657, 658, 659, 663, 665, 667, 668, 669, 671, 681, 683, 685, 689, 691, 692, 695, 696, 697, 698, 700, 706, 708, 709, 717, 718, 719, 720, 721, 724, 727, 733, 747, 748, 749, 758, 768, 772, 773, 774, 776, 777, 779, 780, 781, 783, 786, 787, 789, 790, 791, 792, 793, 796, 801, 802, 803, 804, 805, 806, 807, 809, 811, 813, 814, 817, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 843, 846, 850, 855, 859, 860, 862, 866, 867, 868, 870, 875, 876, 877, 878, 879, 880, 881, 890, 892, 895, 898, 899, 900, 901, 942, 967, 968, 970, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 991, 992, 993, 994, 995, 998, 999, 1002, 1004, 1006, 1007, 1008, 1012, 1013, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "strategi": [4, 52, 54, 58, 61, 71, 120, 125, 130, 146, 162, 163, 165, 170, 182, 187, 198, 206, 216, 229, 239, 252, 260, 262, 264, 268, 269, 275, 294, 299, 300, 307, 308, 309, 311, 312, 315, 347, 359, 376, 380, 386, 387, 404, 407, 408, 409, 412, 428, 429, 430, 443, 453, 463, 493, 495, 503, 505, 513, 524, 529, 542, 543, 552, 553, 558, 559, 562, 579, 580, 582, 583, 585, 593, 618, 619, 621, 625, 636, 638, 642, 644, 646, 652, 654, 656, 664, 666, 682, 686, 695, 704, 745, 747, 783, 787, 790, 791, 793, 801, 804, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 847, 855, 860, 871, 885, 890, 892, 895, 898, 899, 900, 901, 949, 967, 968, 977, 979, 980, 981, 982, 984, 986, 988, 992, 993, 994, 998, 1008, 1013, 1015, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "leverag": [4, 8, 37, 49, 86, 216, 345, 346, 360, 361, 372, 404, 407, 865, 967, 974, 1004, 1023, 1035], "task": [4, 7, 98, 109, 117, 118, 124, 145, 146, 158, 165, 176, 198, 214, 217, 219, 256, 347, 360, 362, 369, 371, 372, 373, 374, 378, 379, 380, 383, 385, 386, 387, 405, 407, 408, 409, 410, 439, 452, 484, 496, 506, 583, 586, 587, 589, 590, 591, 595, 596, 597, 600, 623, 624, 637, 638, 643, 644, 651, 652, 653, 654, 665, 672, 675, 717, 719, 720, 744, 772, 774, 777, 779, 788, 792, 805, 810, 944, 945, 975, 978, 979, 980, 981, 989, 991, 993, 994, 996, 997, 999, 1000, 1001, 1002, 1004, 1011, 1012, 1013, 1015, 1020, 1025, 1029, 1035], "highli": [4, 9, 72, 80, 81, 97, 106, 126, 182, 193, 203, 259, 262, 268, 296, 346, 360, 361, 374, 376, 380, 398, 400, 404, 407, 408, 443, 453, 487, 554, 662, 683, 799, 801, 846, 974, 978, 981, 982, 984, 992, 993, 997], "depend": [4, 5, 7, 37, 53, 75, 99, 116, 120, 123, 124, 127, 130, 142, 146, 156, 162, 165, 166, 168, 172, 174, 178, 182, 216, 220, 226, 227, 233, 242, 249, 259, 260, 264, 265, 266, 279, 296, 301, 306, 313, 316, 329, 340, 346, 347, 356, 360, 361, 362, 367, 374, 376, 377, 382, 383, 385, 386, 387, 388, 389, 390, 393, 394, 396, 399, 400, 402, 404, 405, 407, 408, 409, 410, 411, 429, 430, 431, 435, 437, 438, 440, 441, 443, 445, 448, 450, 451, 453, 455, 460, 475, 480, 481, 482, 484, 487, 491, 492, 493, 495, 496, 501, 525, 526, 532, 535, 542, 550, 551, 553, 579, 580, 581, 582, 593, 595, 598, 599, 602, 618, 623, 624, 629, 631, 639, 649, 650, 660, 662, 664, 667, 668, 669, 671, 678, 681, 682, 685, 686, 719, 731, 768, 771, 780, 781, 785, 786, 806, 815, 832, 833, 834, 836, 838, 839, 840, 841, 842, 848, 849, 851, 863, 864, 867, 870, 884, 891, 892, 895, 899, 908, 967, 968, 970, 971, 972, 974, 975, 977, 978, 980, 981, 982, 983, 986, 990, 992, 993, 994, 1004, 1011, 1013, 1015, 1017, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1035, 1036], "busi": [4, 198, 259, 382, 385, 778, 974, 978, 1002], "dai": [4, 12, 155, 169, 199, 361, 371, 374, 869, 1002, 1026, 1027, 1034, 1035], "week": [4, 373, 374, 388, 1002, 1034], "yearli": 4, "season": [4, 155, 169, 199, 373, 410], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 49, 53, 57, 58, 62, 64, 66, 67, 68, 70, 71, 74, 78, 86, 98, 105, 109, 110, 116, 118, 120, 122, 124, 125, 129, 130, 136, 146, 147, 151, 162, 163, 165, 168, 169, 170, 171, 174, 182, 187, 198, 200, 202, 204, 205, 206, 215, 216, 220, 221, 223, 227, 232, 235, 237, 246, 249, 252, 254, 255, 256, 257, 259, 260, 261, 264, 265, 267, 268, 270, 272, 274, 275, 277, 279, 292, 298, 301, 303, 305, 307, 308, 311, 317, 319, 326, 332, 335, 338, 345, 347, 356, 359, 361, 362, 369, 371, 376, 377, 378, 380, 382, 383, 385, 386, 387, 389, 391, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 418, 422, 431, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 450, 452, 459, 460, 473, 474, 475, 476, 485, 493, 503, 506, 522, 523, 524, 526, 528, 530, 533, 534, 535, 536, 537, 539, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 572, 573, 574, 579, 580, 581, 582, 592, 593, 594, 601, 602, 618, 621, 622, 629, 631, 636, 642, 645, 646, 647, 649, 655, 656, 657, 658, 659, 661, 664, 666, 667, 668, 669, 673, 674, 676, 678, 680, 681, 684, 685, 688, 694, 695, 696, 698, 699, 703, 704, 716, 719, 720, 728, 730, 732, 745, 746, 747, 768, 773, 774, 776, 777, 778, 782, 783, 784, 785, 786, 787, 790, 791, 798, 799, 801, 805, 811, 812, 813, 815, 816, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 837, 839, 845, 846, 847, 848, 850, 851, 853, 856, 857, 859, 860, 862, 863, 864, 866, 867, 870, 871, 873, 875, 876, 877, 878, 879, 880, 881, 885, 886, 888, 892, 893, 894, 895, 896, 898, 899, 900, 901, 910, 911, 951, 962, 967, 968, 970, 972, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 991, 992, 993, 994, 998, 999, 1002, 1004, 1005, 1008, 1011, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 360, 361, 362, 363, 367, 368, 369, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 385, 386, 387, 389, 390, 391, 394, 396, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 967, 968, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 998, 999, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "preprocess": [4, 5, 6, 10, 31, 42, 44, 49, 53, 55, 58, 62, 70, 71, 72, 73, 75, 86, 95, 106, 115, 120, 143, 155, 159, 170, 174, 177, 179, 186, 187, 189, 198, 199, 204, 214, 216, 220, 228, 229, 238, 241, 256, 266, 268, 273, 287, 288, 295, 296, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 324, 332, 335, 346, 362, 363, 366, 368, 371, 374, 379, 386, 387, 397, 400, 401, 404, 407, 408, 409, 455, 456, 457, 458, 480, 558, 572, 573, 579, 580, 582, 621, 649, 650, 663, 665, 667, 669, 678, 819, 850, 851, 890, 891, 892, 893, 895, 896, 968, 974, 979, 982, 989, 992, 993, 995, 998, 1001, 1002, 1004, 1009, 1010, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "splinetransform": [4, 199, 314, 865, 988, 1033, 1035, 1036], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 56, 58, 71, 72, 91, 92, 100, 104, 108, 109, 116, 118, 126, 131, 134, 150, 151, 154, 158, 159, 162, 165, 168, 169, 174, 176, 188, 189, 190, 206, 210, 213, 214, 217, 220, 227, 234, 235, 237, 244, 245, 246, 252, 253, 254, 259, 261, 265, 269, 270, 275, 277, 279, 282, 284, 287, 288, 289, 290, 306, 311, 315, 317, 320, 322, 323, 327, 328, 332, 333, 341, 343, 345, 346, 347, 362, 363, 366, 368, 369, 370, 371, 374, 375, 376, 378, 379, 380, 381, 383, 385, 386, 390, 396, 398, 400, 401, 403, 405, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 452, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 491, 493, 494, 495, 499, 500, 501, 503, 505, 506, 510, 513, 514, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 703, 704, 705, 706, 707, 708, 709, 711, 717, 719, 720, 721, 725, 726, 727, 728, 729, 730, 731, 732, 733, 744, 745, 747, 772, 773, 774, 776, 777, 778, 779, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 915, 916, 917, 918, 919, 921, 922, 934, 935, 936, 939, 944, 946, 948, 949, 962, 967, 968, 969, 970, 972, 973, 974, 975, 979, 980, 982, 985, 986, 988, 989, 991, 994, 999, 1000, 1002, 1004, 1008, 1011, 1013, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "extrapol": [4, 150, 177, 199, 230, 262, 869, 978, 988, 994, 1033, 1035], "option": [4, 30, 46, 52, 103, 116, 124, 156, 163, 179, 182, 199, 262, 268, 312, 345, 350, 356, 362, 368, 369, 370, 372, 374, 375, 377, 379, 380, 382, 383, 385, 387, 388, 390, 394, 400, 401, 403, 404, 405, 407, 408, 411, 424, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 450, 452, 453, 454, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 487, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 619, 621, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 678, 679, 680, 681, 683, 685, 686, 702, 704, 708, 719, 720, 725, 726, 727, 747, 748, 749, 754, 756, 757, 761, 764, 765, 766, 767, 768, 771, 773, 774, 777, 780, 781, 783, 787, 788, 789, 790, 791, 793, 794, 796, 801, 805, 809, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 859, 860, 862, 863, 864, 865, 867, 868, 869, 870, 882, 883, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 917, 964, 967, 968, 974, 977, 978, 981, 988, 991, 993, 994, 999, 1001, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 53, 71, 72, 89, 95, 106, 109, 115, 117, 119, 126, 127, 130, 131, 133, 144, 145, 155, 168, 169, 174, 179, 194, 195, 198, 206, 214, 229, 230, 234, 236, 237, 238, 239, 241, 249, 255, 257, 259, 264, 266, 271, 277, 279, 283, 288, 296, 297, 298, 312, 313, 315, 316, 322, 323, 324, 351, 354, 360, 363, 366, 369, 371, 377, 380, 386, 394, 399, 403, 404, 405, 407, 473, 474, 475, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 523, 525, 534, 830, 831, 927, 988, 999, 1005, 1007, 1009, 1015, 1020, 1025, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "openml": [4, 71, 130, 155, 168, 198, 206, 214, 216, 228, 277, 297, 367, 390, 487, 1015, 1028, 1030, 1033], "repositori": [4, 8, 174, 317, 367, 369, 371, 372, 374, 376, 378, 382, 388, 390, 495, 998, 1001, 1015], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 169, 172, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 361, 362, 368, 369, 372, 373, 374, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 473, 474, 475, 476, 479, 486, 487, 491, 493, 494, 495, 497, 498, 499, 501, 503, 506, 512, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 568, 570, 571, 572, 573, 574, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 675, 679, 680, 681, 682, 683, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 706, 708, 709, 712, 713, 714, 716, 717, 718, 719, 720, 721, 724, 725, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 753, 754, 758, 759, 761, 763, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 878, 879, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 917, 922, 925, 927, 929, 930, 931, 932, 939, 940, 941, 942, 946, 949, 952, 966, 967, 968, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 988, 989, 990, 991, 992, 993, 994, 999, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035], "fetch_openml": [4, 5, 71, 75, 120, 130, 155, 168, 169, 170, 198, 206, 214, 216, 228, 237, 241, 277, 279, 297, 307, 311, 315, 368, 378, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "bike_shar": 4, "bike_sharing_demand": [4, 169], "version": [4, 46, 53, 55, 71, 95, 100, 110, 152, 163, 169, 170, 174, 177, 182, 196, 199, 200, 206, 212, 214, 234, 237, 241, 277, 297, 304, 306, 308, 311, 312, 313, 314, 316, 317, 332, 345, 360, 363, 369, 373, 374, 375, 376, 377, 380, 382, 383, 385, 387, 388, 390, 393, 394, 399, 400, 403, 405, 407, 408, 410, 411, 412, 418, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 491, 492, 493, 495, 496, 499, 500, 501, 503, 505, 513, 514, 517, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 692, 693, 695, 698, 699, 704, 705, 709, 712, 713, 714, 715, 717, 718, 719, 720, 721, 724, 729, 730, 731, 733, 736, 743, 744, 746, 747, 748, 749, 751, 756, 757, 758, 759, 768, 772, 773, 774, 775, 777, 779, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 800, 801, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 876, 878, 879, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 908, 910, 911, 921, 922, 924, 926, 927, 934, 935, 936, 937, 938, 941, 944, 945, 946, 948, 953, 959, 964, 965, 967, 970, 972, 975, 978, 980, 982, 984, 986, 991, 992, 994, 996, 999, 1001, 1012, 1016, 1018], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 136, 139, 143, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 361, 362, 368, 369, 371, 372, 374, 376, 378, 379, 380, 381, 383, 385, 386, 387, 390, 391, 392, 393, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 423, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 453, 454, 455, 456, 459, 460, 462, 463, 464, 465, 466, 469, 473, 474, 475, 476, 484, 487, 491, 492, 495, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 568, 572, 573, 575, 576, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 594, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 694, 695, 696, 697, 698, 699, 704, 706, 707, 708, 709, 712, 713, 714, 715, 716, 718, 719, 720, 721, 724, 725, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 753, 754, 758, 759, 761, 763, 766, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 874, 878, 883, 884, 886, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 903, 905, 910, 911, 916, 924, 925, 926, 927, 929, 930, 931, 932, 939, 940, 941, 942, 943, 944, 946, 949, 951, 952, 965, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 996, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1036], "as_fram": [4, 5, 71, 75, 116, 120, 130, 155, 168, 169, 170, 186, 187, 198, 206, 214, 216, 237, 241, 279, 297, 306, 307, 311, 313, 315, 316, 368, 369, 480, 481, 482, 483, 487, 491, 492, 493, 495, 496, 501, 1030, 1031, 1032, 1033, 1036], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 55, 57, 58, 60, 63, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 92, 95, 96, 97, 98, 100, 106, 109, 110, 114, 116, 120, 121, 122, 123, 125, 126, 127, 130, 131, 133, 136, 137, 138, 143, 146, 150, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 174, 182, 183, 185, 186, 187, 189, 191, 193, 194, 195, 198, 200, 201, 202, 205, 206, 212, 213, 214, 216, 219, 222, 223, 227, 228, 231, 233, 234, 235, 236, 237, 240, 241, 244, 247, 249, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 284, 285, 288, 292, 295, 296, 297, 298, 302, 306, 307, 308, 311, 313, 315, 316, 317, 321, 323, 324, 325, 335, 339, 340, 341, 345, 346, 347, 350, 351, 354, 356, 360, 361, 367, 369, 370, 374, 375, 376, 379, 380, 381, 383, 386, 387, 389, 391, 394, 396, 397, 398, 400, 401, 402, 404, 405, 407, 408, 409, 410, 412, 413, 414, 417, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 450, 452, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 510, 513, 514, 515, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 691, 692, 693, 694, 696, 698, 699, 700, 703, 704, 705, 706, 709, 711, 714, 716, 717, 718, 719, 720, 721, 724, 725, 728, 729, 730, 731, 732, 733, 740, 741, 742, 744, 746, 751, 757, 758, 759, 768, 772, 773, 774, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 798, 799, 801, 805, 806, 810, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 908, 909, 910, 911, 921, 927, 928, 939, 940, 943, 944, 948, 949, 951, 959, 964, 966, 967, 968, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 990, 991, 992, 993, 994, 998, 1004, 1008, 1009, 1011, 1012, 1013, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "parser": [4, 5, 8, 71, 75, 120, 130, 155, 168, 169, 170, 198, 206, 214, 216, 228, 237, 241, 277, 279, 297, 307, 311, 315, 487, 1035, 1036], "panda": [4, 5, 12, 25, 70, 71, 72, 73, 75, 110, 116, 117, 120, 123, 127, 130, 155, 162, 167, 168, 169, 170, 177, 182, 187, 198, 202, 206, 214, 216, 228, 237, 238, 241, 249, 257, 259, 260, 262, 270, 271, 277, 279, 297, 306, 307, 308, 311, 314, 315, 340, 345, 346, 368, 369, 372, 373, 374, 376, 377, 387, 390, 393, 401, 424, 433, 434, 436, 438, 440, 455, 457, 459, 473, 474, 475, 476, 480, 481, 482, 483, 487, 491, 492, 493, 495, 496, 501, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 557, 558, 559, 560, 561, 572, 573, 574, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 623, 624, 626, 629, 630, 631, 632, 633, 679, 680, 683, 787, 790, 791, 801, 816, 834, 839, 842, 846, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 888, 906, 967, 968, 988, 998, 999, 1013, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "df": [4, 25, 27, 130, 167, 169, 177, 182, 198, 216, 249, 259, 305, 307, 346, 379, 408, 581, 582, 967, 968, 1037], "frame": [4, 16, 71, 155, 168, 169, 198, 307, 369, 374, 385, 388, 480, 481, 482, 483, 487, 491, 492, 493, 495, 496, 501, 998, 1009, 1032], "To": [4, 8, 16, 26, 27, 32, 46, 55, 57, 78, 80, 82, 86, 90, 100, 110, 120, 123, 124, 132, 136, 147, 155, 156, 159, 162, 163, 167, 168, 174, 179, 182, 186, 198, 199, 200, 202, 206, 216, 231, 232, 234, 239, 241, 249, 254, 256, 257, 259, 261, 262, 264, 266, 277, 297, 301, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 342, 346, 350, 356, 360, 361, 367, 368, 372, 374, 375, 376, 378, 379, 380, 382, 385, 387, 388, 391, 394, 396, 397, 400, 401, 402, 403, 404, 405, 407, 408, 437, 439, 440, 441, 452, 455, 458, 483, 487, 493, 494, 498, 499, 522, 528, 529, 530, 532, 534, 535, 536, 537, 548, 549, 550, 551, 555, 556, 560, 588, 618, 623, 637, 638, 643, 644, 647, 649, 650, 651, 652, 653, 654, 675, 691, 703, 718, 753, 775, 781, 790, 791, 812, 819, 861, 880, 881, 890, 891, 898, 899, 900, 901, 917, 927, 946, 965, 967, 968, 973, 974, 975, 976, 978, 979, 980, 981, 984, 985, 988, 992, 993, 994, 1001, 1002, 1004, 1008, 1010, 1011, 1013, 1020, 1023, 1025, 1026, 1027, 1029, 1031], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 56, 96, 100, 123, 132, 144, 147, 150, 155, 156, 162, 168, 169, 170, 171, 191, 200, 213, 216, 219, 235, 257, 260, 261, 263, 267, 270, 277, 279, 284, 292, 302, 311, 321, 324, 329, 332, 334, 337, 342, 345, 347, 350, 361, 363, 367, 368, 369, 372, 374, 375, 376, 379, 380, 381, 382, 387, 390, 394, 396, 398, 400, 401, 402, 404, 405, 407, 408, 409, 410, 414, 415, 416, 421, 423, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 453, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 686, 690, 712, 713, 714, 716, 722, 723, 732, 746, 753, 754, 759, 775, 778, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 905, 918, 919, 920, 926, 927, 937, 967, 973, 974, 975, 977, 978, 988, 991, 992, 993, 994, 999, 1001, 1008, 1011, 1012, 1013, 1017, 1020, 1023, 1026, 1028, 1031, 1033, 1034], "quick": [4, 100, 240, 374, 376, 380, 390, 597, 816, 978, 979, 988, 1002, 1011, 1017], "understand": [4, 9, 90, 110, 155, 165, 169, 234, 254, 257, 313, 314, 329, 345, 349, 355, 356, 373, 374, 375, 380, 385, 389, 400, 407, 408, 495, 816, 847, 848, 898, 899, 900, 901, 904, 967, 968, 975, 977, 994, 997, 998, 1002, 1020, 1034], "pattern": [4, 16, 20, 63, 82, 94, 107, 150, 162, 165, 169, 182, 202, 234, 314, 345, 346, 347, 356, 371, 374, 376, 388, 397, 400, 401, 405, 407, 408, 439, 455, 457, 495, 523, 525, 532, 546, 547, 629, 699, 715, 731, 759, 778, 779, 785, 870, 970, 972, 974, 978, 979, 985, 993, 995, 999, 1002, 1032], "let": [4, 5, 53, 55, 64, 71, 75, 95, 100, 109, 117, 120, 123, 124, 127, 150, 156, 157, 163, 168, 169, 170, 179, 187, 198, 200, 216, 219, 223, 234, 241, 254, 259, 262, 266, 345, 347, 354, 356, 369, 374, 376, 380, 385, 397, 400, 404, 407, 408, 491, 495, 501, 525, 637, 638, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 672, 675, 856, 863, 864, 974, 975, 976, 977, 978, 985, 986, 988, 993, 994, 1002, 1011, 1013, 1030], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 56, 95, 103, 120, 121, 150, 159, 167, 168, 169, 195, 199, 202, 206, 216, 220, 223, 231, 234, 240, 241, 245, 246, 250, 254, 259, 262, 266, 305, 307, 345, 354, 361, 363, 369, 374, 378, 380, 382, 385, 390, 397, 400, 403, 405, 407, 408, 423, 454, 456, 473, 474, 475, 522, 528, 536, 537, 541, 543, 545, 547, 549, 551, 553, 556, 559, 561, 579, 580, 582, 602, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 669, 670, 672, 675, 680, 684, 695, 711, 730, 745, 823, 824, 833, 841, 848, 870, 884, 891, 893, 896, 899, 901, 927, 972, 977, 978, 985, 988, 996, 1002, 1013, 1017, 1030], "look": [4, 5, 53, 55, 95, 98, 100, 123, 124, 150, 155, 156, 163, 168, 169, 200, 219, 223, 227, 234, 250, 254, 259, 261, 297, 345, 346, 356, 361, 362, 368, 369, 372, 374, 376, 378, 380, 382, 385, 386, 400, 403, 405, 406, 407, 408, 439, 479, 480, 548, 549, 550, 551, 555, 556, 593, 594, 622, 650, 683, 870, 898, 899, 900, 901, 974, 975, 988, 992, 993, 995, 1013, 1020, 1028, 1030], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 60, 62, 113, 114, 119, 123, 126, 131, 132, 133, 147, 155, 169, 179, 187, 198, 205, 216, 237, 262, 264, 267, 269, 277, 301, 311, 317, 324, 345, 356, 360, 369, 371, 376, 397, 398, 402, 404, 408, 410, 411, 412, 428, 429, 432, 435, 436, 437, 438, 440, 481, 484, 485, 514, 522, 523, 524, 528, 529, 531, 532, 538, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 560, 561, 578, 623, 624, 639, 649, 650, 657, 658, 660, 663, 665, 667, 668, 669, 671, 678, 691, 694, 695, 697, 698, 699, 704, 711, 712, 713, 715, 716, 718, 719, 720, 724, 725, 726, 728, 729, 730, 733, 735, 736, 738, 740, 741, 743, 746, 754, 771, 772, 773, 774, 775, 777, 778, 783, 784, 785, 786, 814, 836, 856, 871, 964, 968, 973, 974, 979, 982, 984, 985, 992, 993, 994, 1011, 1013, 1020, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036], "per": [4, 10, 20, 48, 53, 64, 91, 115, 116, 120, 155, 157, 168, 169, 198, 213, 216, 241, 245, 255, 266, 268, 301, 307, 313, 340, 345, 347, 360, 369, 370, 374, 379, 380, 383, 385, 387, 398, 400, 404, 405, 406, 407, 408, 410, 437, 439, 441, 448, 452, 455, 459, 478, 491, 493, 494, 495, 499, 501, 503, 506, 514, 523, 525, 526, 527, 530, 532, 534, 540, 541, 552, 553, 560, 574, 579, 582, 601, 602, 623, 624, 632, 633, 649, 650, 657, 659, 662, 664, 665, 666, 667, 669, 683, 687, 704, 707, 711, 731, 744, 748, 749, 771, 773, 785, 786, 811, 818, 819, 820, 822, 823, 826, 828, 846, 849, 855, 857, 859, 860, 863, 864, 870, 871, 888, 890, 891, 892, 893, 894, 895, 896, 915, 916, 927, 953, 967, 970, 974, 977, 978, 979, 982, 985, 992, 993, 994, 998, 999, 1011, 1013, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1034, 1036], "hour": [4, 168, 169, 374, 380, 975, 997], "sundai": 4, "weekend": 4, "clearli": [4, 60, 98, 169, 232, 373, 374, 385, 387, 405, 407, 979, 985], "distinguish": [4, 20, 40, 80, 92, 100, 200, 256, 369, 376, 387, 388, 410, 967, 978, 981, 984], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 75, 86, 98, 116, 123, 156, 168, 169, 170, 187, 198, 199, 206, 216, 223, 224, 233, 245, 265, 301, 303, 305, 306, 325, 345, 346, 347, 356, 362, 369, 373, 374, 375, 376, 378, 379, 382, 385, 387, 398, 399, 400, 401, 402, 404, 405, 407, 408, 410, 432, 434, 436, 437, 438, 439, 440, 450, 452, 523, 526, 548, 549, 550, 551, 555, 556, 573, 580, 585, 618, 619, 621, 630, 649, 650, 686, 691, 696, 703, 733, 751, 757, 764, 768, 771, 776, 778, 813, 850, 851, 882, 883, 898, 899, 900, 901, 927, 947, 967, 968, 970, 972, 974, 977, 978, 981, 983, 984, 986, 988, 990, 992, 993, 994, 1002, 1013, 1027, 1028, 1029, 1032, 1034], "leisur": 4, "spread": [4, 40, 221, 260, 301, 320, 321, 322, 325, 360, 374, 400, 443, 453, 506, 867, 879, 887, 978], "peak": [4, 27, 169, 398, 404, 1034], "middl": [4, 24, 60, 100, 182, 341, 371, 985, 988], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 171, 174, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 315, 316, 320, 321, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 368, 377, 381, 390, 393, 429, 493, 622, 623, 688, 689, 691, 692, 693, 793, 809, 904, 973, 998, 1007, 1009, 1010, 1011, 1017, 1029, 1032, 1033, 1034, 1035], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 171, 174, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 315, 316, 320, 321, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 374, 381, 429, 493, 622, 623, 688, 689, 691, 692, 693, 793, 809, 1009, 1010, 1011, 1017, 1034], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 171, 174, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 315, 316, 320, 321, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 381, 429, 493, 622, 623, 688, 689, 691, 692, 693, 793, 809, 904, 985, 1009, 1010, 1011, 1017], "fig": [4, 5, 7, 8, 10, 14, 25, 27, 42, 43, 45, 53, 55, 57, 60, 64, 66, 73, 78, 80, 86, 90, 95, 100, 101, 102, 106, 109, 110, 115, 116, 117, 120, 123, 124, 127, 128, 130, 132, 153, 159, 162, 169, 171, 174, 178, 186, 189, 192, 193, 195, 196, 198, 199, 202, 206, 211, 213, 216, 219, 220, 221, 222, 223, 224, 228, 230, 237, 238, 249, 254, 255, 256, 259, 260, 261, 262, 265, 268, 269, 270, 277, 279, 281, 283, 284, 292, 296, 297, 301, 302, 303, 305, 306, 307, 311, 315, 316, 329, 339, 340, 341, 342, 345, 346, 347, 350, 381, 1009], "ax": [4, 5, 7, 8, 10, 12, 14, 16, 25, 27, 30, 31, 32, 40, 42, 43, 45, 53, 55, 56, 57, 64, 66, 72, 73, 75, 80, 82, 86, 90, 92, 95, 101, 102, 106, 109, 110, 112, 115, 117, 120, 127, 128, 130, 131, 132, 153, 154, 159, 162, 167, 168, 169, 170, 171, 174, 177, 178, 181, 182, 187, 189, 190, 193, 195, 196, 198, 199, 200, 202, 203, 206, 207, 209, 211, 213, 216, 219, 220, 221, 222, 223, 224, 228, 233, 237, 238, 240, 244, 246, 249, 254, 255, 256, 259, 261, 262, 263, 265, 266, 268, 269, 270, 271, 273, 277, 279, 281, 282, 283, 284, 287, 289, 290, 295, 296, 297, 301, 303, 304, 305, 306, 307, 311, 312, 315, 316, 328, 329, 330, 333, 334, 339, 340, 341, 342, 345, 346, 347, 350, 351, 376, 377, 405, 410, 429, 525, 532, 541, 622, 623, 688, 689, 691, 692, 693, 709, 793, 809, 904, 978, 981, 985, 1017, 1030, 1036], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 57, 60, 62, 65, 66, 73, 75, 79, 80, 81, 82, 85, 86, 91, 92, 95, 96, 97, 98, 100, 105, 106, 110, 112, 113, 115, 116, 117, 119, 120, 124, 127, 128, 130, 131, 132, 142, 152, 154, 159, 162, 163, 168, 169, 171, 174, 178, 181, 189, 190, 192, 193, 196, 197, 198, 199, 200, 202, 206, 211, 214, 216, 219, 220, 223, 224, 227, 228, 230, 232, 233, 235, 236, 237, 238, 244, 245, 246, 247, 249, 250, 254, 255, 256, 259, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 277, 279, 281, 282, 283, 284, 287, 288, 290, 291, 292, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 311, 315, 316, 323, 325, 329, 330, 332, 339, 340, 341, 342, 345, 346, 347, 350, 351, 381, 1009], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64, 65, 66, 73, 75, 80, 82, 85, 86, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 105, 106, 110, 112, 113, 120, 121, 122, 123, 124, 128, 130, 131, 142, 152, 154, 158, 159, 162, 163, 168, 169, 171, 174, 177, 178, 181, 182, 188, 192, 195, 196, 197, 198, 199, 200, 202, 204, 206, 209, 212, 214, 216, 219, 220, 221, 223, 224, 227, 228, 230, 232, 235, 236, 237, 238, 244, 246, 247, 250, 254, 255, 256, 261, 262, 263, 266, 268, 269, 273, 277, 279, 281, 295, 296, 298, 301, 302, 303, 304, 305, 306, 307, 315, 316, 320, 322, 330, 332, 336, 337, 339, 340, 341, 342, 345, 346, 347, 904, 1009], "4": [4, 5, 6, 7, 8, 9, 10, 12, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 64, 65, 66, 70, 71, 72, 73, 74, 81, 82, 85, 86, 91, 92, 96, 97, 98, 99, 100, 101, 102, 104, 105, 109, 110, 111, 113, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 136, 137, 143, 150, 153, 155, 156, 158, 159, 162, 163, 168, 169, 171, 174, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 195, 196, 197, 198, 199, 202, 204, 205, 206, 208, 211, 212, 216, 219, 221, 227, 231, 232, 233, 234, 235, 236, 237, 239, 241, 244, 245, 246, 247, 249, 250, 254, 255, 256, 257, 259, 260, 261, 262, 264, 266, 267, 268, 270, 273, 277, 279, 281, 283, 284, 285, 286, 289, 295, 297, 298, 301, 302, 304, 305, 307, 311, 312, 314, 316, 317, 320, 321, 322, 323, 324, 329, 331, 335, 336, 337, 340, 341, 342, 345, 346, 354, 356, 361, 368, 369, 371, 372, 374, 379, 380, 383, 385, 386, 387, 390, 391, 392, 393, 398, 400, 401, 402, 404, 405, 407, 408, 409, 410, 412, 418, 422, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 450, 451, 453, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 487, 495, 503, 504, 507, 508, 509, 519, 523, 524, 525, 526, 528, 529, 530, 531, 535, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 561, 568, 572, 573, 580, 581, 582, 584, 585, 594, 598, 599, 605, 608, 610, 613, 618, 619, 620, 621, 624, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 668, 670, 671, 675, 678, 680, 681, 683, 684, 689, 693, 697, 698, 706, 707, 716, 717, 724, 733, 734, 736, 737, 738, 739, 741, 742, 746, 758, 759, 771, 772, 778, 779, 782, 784, 785, 786, 787, 788, 789, 792, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 814, 816, 819, 820, 821, 824, 825, 826, 827, 829, 838, 847, 848, 849, 855, 856, 857, 862, 863, 864, 865, 866, 868, 871, 874, 878, 884, 890, 891, 893, 894, 896, 898, 899, 900, 901, 916, 924, 926, 927, 929, 931, 932, 942, 946, 949, 967, 968, 971, 972, 973, 974, 976, 978, 979, 980, 981, 988, 989, 992, 993, 996, 1001, 1004, 1008, 1009, 1010, 1011, 1013, 1016, 1018, 1021, 1022, 1023, 1025, 1026, 1027, 1029, 1033, 1034, 1035], "average_week_demand": 4, "groupbi": [4, 73, 169, 206, 216], "weekdai": [4, 169], "count": [4, 14, 25, 27, 41, 49, 53, 70, 71, 92, 131, 132, 168, 169, 198, 200, 231, 241, 268, 279, 312, 313, 346, 347, 369, 371, 378, 383, 387, 388, 398, 399, 400, 405, 407, 408, 437, 440, 480, 527, 535, 572, 579, 580, 581, 582, 585, 595, 608, 631, 688, 696, 706, 709, 719, 720, 728, 744, 773, 774, 776, 777, 825, 829, 830, 831, 839, 842, 853, 902, 904, 929, 943, 967, 970, 974, 978, 980, 981, 988, 994, 1002, 1013, 1020, 1023, 1025, 1028, 1029, 1031, 1032], "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 55, 68, 71, 79, 80, 81, 82, 86, 92, 95, 98, 99, 100, 102, 103, 110, 112, 113, 116, 119, 120, 123, 124, 130, 131, 132, 137, 146, 147, 150, 155, 157, 159, 162, 165, 168, 169, 178, 180, 187, 189, 191, 194, 198, 200, 204, 205, 207, 213, 214, 215, 216, 222, 224, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 244, 245, 246, 247, 249, 250, 255, 256, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 274, 277, 279, 290, 301, 304, 306, 307, 308, 311, 314, 317, 323, 332, 335, 340, 342, 344, 345, 347, 348, 356, 360, 366, 368, 369, 371, 374, 375, 376, 378, 379, 380, 382, 383, 385, 386, 387, 391, 397, 398, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 423, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 452, 453, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 479, 492, 493, 495, 497, 503, 510, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 574, 579, 580, 581, 582, 585, 588, 593, 597, 598, 599, 600, 601, 602, 604, 613, 618, 619, 621, 623, 624, 625, 626, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 675, 679, 680, 681, 682, 683, 684, 685, 686, 695, 696, 698, 700, 703, 704, 707, 708, 714, 716, 719, 720, 721, 726, 727, 728, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 747, 764, 768, 769, 771, 773, 774, 775, 777, 778, 780, 781, 783, 785, 786, 787, 790, 791, 793, 801, 805, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 836, 837, 838, 840, 841, 843, 844, 846, 847, 848, 849, 851, 852, 854, 855, 859, 860, 862, 866, 868, 870, 871, 876, 878, 879, 881, 883, 885, 886, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 906, 910, 911, 913, 952, 953, 959, 963, 967, 968, 969, 972, 974, 975, 977, 980, 981, 982, 983, 985, 986, 991, 992, 993, 994, 998, 1002, 1008, 1011, 1013, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "plot": [4, 5, 6, 9, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 56, 58, 59, 60, 61, 62, 65, 68, 72, 73, 75, 79, 80, 81, 86, 88, 90, 93, 95, 98, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 117, 122, 123, 125, 127, 128, 129, 134, 137, 139, 142, 143, 145, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 165, 166, 167, 168, 170, 171, 172, 174, 176, 180, 181, 183, 185, 186, 187, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 210, 211, 212, 213, 215, 216, 217, 221, 222, 223, 224, 226, 227, 230, 231, 233, 235, 236, 241, 242, 244, 245, 246, 248, 250, 252, 253, 254, 259, 260, 262, 264, 265, 269, 270, 271, 273, 275, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 295, 296, 297, 301, 302, 303, 304, 305, 306, 308, 312, 315, 316, 317, 321, 322, 325, 327, 328, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 349, 350, 352, 353, 354, 355, 363, 374, 377, 383, 385, 389, 390, 395, 398, 400, 402, 404, 406, 407, 429, 432, 437, 441, 447, 455, 462, 487, 492, 493, 495, 503, 506, 510, 514, 544, 548, 551, 553, 555, 556, 560, 561, 601, 613, 622, 623, 624, 648, 649, 663, 667, 688, 689, 691, 692, 693, 694, 709, 717, 772, 774, 777, 778, 779, 793, 804, 809, 811, 812, 813, 814, 817, 828, 832, 848, 851, 863, 864, 867, 870, 890, 895, 898, 899, 904, 971, 972, 974, 975, 977, 978, 981, 982, 984, 992, 993, 994, 998, 999, 1008, 1009, 1011, 1015, 1021, 1023, 1024, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "_": [4, 5, 7, 8, 11, 12, 14, 20, 25, 26, 27, 32, 33, 40, 43, 50, 53, 55, 58, 63, 67, 70, 82, 92, 95, 100, 101, 103, 105, 113, 114, 115, 142, 150, 155, 156, 157, 167, 168, 169, 174, 177, 181, 182, 183, 185, 186, 187, 190, 195, 196, 198, 200, 202, 211, 215, 220, 223, 228, 233, 241, 254, 259, 261, 262, 263, 265, 266, 268, 282, 287, 290, 298, 303, 306, 307, 308, 312, 315, 316, 317, 321, 322, 340, 345, 347, 351, 376, 380, 387, 405, 407, 408, 437, 523, 524, 525, 526, 527, 529, 530, 531, 534, 538, 557, 588, 643, 644, 654, 675, 679, 680, 681, 682, 687, 689, 691, 754, 787, 793, 801, 809, 834, 842, 863, 864, 968, 974, 975, 978, 980, 981, 982, 985, 986, 988, 993, 994, 1011, 1027], "hourli": [4, 168], "xtick": [4, 6, 8, 11, 30, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 90, 98, 120, 121, 122, 152, 153, 154, 158, 181, 188, 194, 211, 227, 235, 245, 246, 247, 250, 258, 259, 273, 283, 292, 298, 307, 320, 332, 335, 336, 337, 338, 688, 1009], "24": [4, 5, 8, 66, 165, 169, 182, 224, 279, 307, 309, 310, 311, 318, 320, 321, 378, 390, 400, 407, 408, 428, 431, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 444, 451, 453, 455, 460, 461, 462, 463, 464, 465, 466, 467, 480, 481, 482, 483, 487, 495, 506, 507, 508, 509, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 535, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 572, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 604, 618, 619, 620, 621, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 689, 691, 693, 699, 705, 717, 736, 743, 785, 786, 787, 790, 791, 801, 808, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 851, 853, 854, 855, 856, 859, 860, 862, 864, 865, 866, 867, 868, 870, 880, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 921, 922, 953, 959, 967, 985, 988, 996, 1016, 1018, 1020, 1028, 1029, 1030, 1031, 1033], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 20, 25, 26, 27, 30, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 55, 60, 61, 63, 64, 65, 78, 79, 81, 82, 110, 112, 113, 114, 117, 123, 129, 142, 146, 151, 168, 169, 174, 182, 187, 188, 192, 196, 198, 199, 202, 205, 206, 214, 216, 220, 222, 230, 231, 236, 244, 246, 249, 250, 254, 258, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 277, 283, 289, 292, 298, 301, 306, 307, 311, 315, 316, 321, 332, 345, 346, 351, 354, 361, 368, 369, 371, 374, 376, 380, 383, 387, 394, 400, 404, 407, 410, 431, 452, 460, 462, 463, 464, 465, 466, 467, 469, 472, 482, 485, 486, 505, 518, 532, 544, 545, 550, 551, 554, 579, 580, 582, 620, 623, 629, 631, 639, 640, 660, 662, 667, 671, 683, 703, 721, 736, 778, 816, 822, 836, 838, 840, 841, 846, 860, 867, 868, 869, 875, 876, 879, 880, 883, 884, 926, 927, 946, 967, 974, 978, 982, 992, 999, 1002, 1007, 1008, 1009, 1011, 1025, 1026, 1027, 1028, 1030, 1033], "7": [4, 6, 8, 12, 13, 14, 16, 19, 26, 30, 32, 33, 34, 39, 42, 44, 46, 53, 54, 55, 56, 60, 64, 65, 67, 71, 72, 74, 80, 82, 85, 98, 109, 110, 113, 122, 123, 125, 126, 130, 131, 159, 167, 168, 169, 171, 174, 179, 180, 197, 198, 199, 200, 212, 214, 216, 219, 227, 232, 233, 239, 241, 244, 245, 248, 249, 254, 259, 263, 265, 266, 270, 272, 277, 279, 281, 284, 285, 287, 297, 298, 301, 305, 311, 314, 315, 316, 320, 321, 323, 324, 329, 331, 336, 340, 341, 346, 347, 356, 369, 371, 372, 378, 379, 380, 390, 392, 393, 398, 404, 405, 407, 408, 409, 410, 430, 435, 439, 441, 442, 443, 444, 453, 462, 463, 482, 523, 524, 525, 526, 527, 529, 535, 552, 553, 579, 582, 591, 618, 619, 621, 638, 640, 649, 652, 683, 698, 712, 713, 714, 716, 718, 734, 735, 736, 740, 741, 743, 775, 782, 785, 788, 789, 794, 797, 804, 805, 808, 813, 816, 820, 830, 831, 839, 848, 849, 862, 863, 885, 886, 927, 930, 931, 942, 967, 968, 973, 974, 976, 978, 979, 981, 982, 984, 988, 992, 993, 996, 1004, 1008, 1011, 1016, 1018, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1033], "xticklabel": [4, 10, 120, 169, 307], "sun": [4, 169, 1028, 1033, 1034], "mon": [4, 169], "tue": [4, 169, 1026], "wed": [4, 169], "thu": [4, 5, 24, 25, 26, 27, 40, 53, 55, 60, 78, 82, 98, 100, 113, 115, 116, 118, 120, 143, 150, 155, 156, 169, 182, 186, 187, 198, 200, 216, 227, 233, 238, 246, 257, 259, 264, 265, 266, 308, 311, 314, 350, 356, 360, 361, 369, 376, 380, 385, 387, 398, 400, 404, 405, 407, 408, 410, 411, 428, 430, 454, 506, 518, 544, 545, 546, 547, 548, 549, 554, 555, 556, 594, 597, 601, 613, 618, 623, 624, 634, 636, 649, 668, 696, 709, 715, 778, 783, 789, 794, 796, 808, 821, 824, 859, 890, 969, 970, 971, 972, 973, 974, 975, 978, 979, 984, 985, 986, 988, 990, 991, 992, 993, 999, 1001, 1002, 1020, 1022, 1026, 1028, 1029, 1030, 1032, 1036], "fri": [4, 169, 369], "sat": [4, 169, 408], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 111, 112, 114, 120, 121, 122, 123, 124, 125, 129, 133, 136, 137, 142, 143, 146, 150, 151, 152, 153, 155, 156, 157, 168, 177, 180, 181, 182, 183, 185, 186, 187, 188, 191, 192, 198, 200, 201, 203, 205, 207, 208, 212, 216, 231, 233, 235, 254, 258, 259, 263, 264, 268, 269, 272, 273, 281, 282, 285, 286, 307, 329, 331, 332, 335, 345, 351, 352, 353, 622], "ylabel": [4, 8, 9, 24, 25, 26, 27, 30, 33, 34, 37, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 111, 112, 114, 121, 122, 123, 124, 125, 129, 133, 136, 137, 142, 143, 146, 150, 151, 152, 153, 155, 156, 157, 168, 177, 180, 181, 182, 183, 185, 186, 187, 188, 191, 192, 198, 200, 201, 203, 205, 207, 208, 216, 231, 233, 235, 254, 258, 259, 262, 263, 264, 268, 269, 272, 273, 282, 329, 332, 335, 345, 351, 352, 353, 622], "number": [4, 5, 7, 8, 10, 12, 13, 19, 20, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 57, 61, 62, 63, 67, 68, 70, 71, 72, 73, 75, 82, 85, 86, 91, 92, 95, 97, 99, 100, 103, 109, 110, 111, 113, 116, 118, 119, 121, 122, 123, 124, 126, 130, 132, 143, 144, 147, 158, 159, 163, 165, 168, 169, 174, 182, 187, 197, 198, 199, 200, 205, 206, 212, 213, 214, 215, 216, 219, 227, 231, 235, 238, 244, 245, 247, 249, 250, 253, 254, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 279, 281, 285, 286, 301, 303, 304, 307, 311, 312, 313, 314, 315, 316, 317, 324, 332, 336, 337, 340, 346, 347, 350, 354, 356, 361, 362, 366, 368, 369, 370, 371, 372, 374, 377, 378, 380, 381, 382, 383, 385, 386, 387, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 423, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 572, 573, 574, 575, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 694, 695, 696, 698, 703, 704, 705, 707, 709, 711, 714, 718, 719, 720, 721, 724, 725, 728, 730, 742, 745, 764, 768, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 879, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 910, 911, 914, 926, 927, 930, 931, 946, 947, 949, 952, 953, 970, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 990, 992, 993, 994, 995, 998, 999, 1001, 1004, 1011, 1012, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "rental": [4, 169, 985], "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 69, 74, 76, 86, 90, 99, 102, 104, 109, 111, 118, 119, 120, 123, 124, 127, 129, 130, 131, 133, 139, 142, 145, 147, 150, 152, 155, 156, 163, 165, 167, 168, 169, 170, 171, 177, 181, 182, 191, 194, 198, 200, 202, 203, 206, 207, 220, 228, 230, 231, 232, 233, 236, 237, 238, 246, 253, 257, 260, 262, 264, 265, 268, 269, 279, 282, 287, 290, 291, 296, 300, 301, 309, 312, 313, 315, 317, 320, 321, 324, 325, 328, 329, 332, 336, 338, 339, 345, 346, 351, 352, 353, 354, 356, 360, 362, 363, 366, 367, 368, 369, 370, 371, 376, 378, 379, 382, 383, 386, 389, 400, 404, 407, 410, 424, 428, 429, 430, 433, 436, 455, 456, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 499, 501, 511, 515, 522, 523, 525, 527, 528, 530, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 564, 573, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 675, 676, 677, 678, 688, 689, 691, 692, 693, 698, 699, 700, 703, 704, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 725, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 772, 773, 774, 775, 777, 778, 779, 782, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 837, 839, 840, 841, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 867, 868, 869, 870, 871, 874, 879, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 910, 940, 941, 942, 969, 970, 971, 974, 975, 978, 982, 985, 986, 992, 993, 994, 999, 1001, 1002, 1004, 1009, 1011, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "absolut": [4, 75, 99, 120, 147, 168, 198, 200, 204, 216, 376, 400, 402, 404, 405, 407, 408, 409, 410, 411, 435, 441, 447, 448, 522, 528, 533, 536, 537, 539, 540, 541, 549, 551, 552, 553, 556, 579, 581, 582, 584, 588, 593, 610, 618, 623, 637, 640, 641, 643, 645, 647, 662, 663, 665, 667, 669, 673, 674, 695, 708, 712, 726, 727, 735, 736, 738, 743, 745, 747, 758, 783, 789, 793, 804, 807, 814, 816, 828, 830, 831, 835, 854, 859, 862, 875, 899, 901, 964, 974, 975, 988, 992, 994, 1011, 1012, 1021, 1026, 1031, 1032, 1033, 1034], "basi": [4, 6, 13, 100, 150, 155, 157, 199, 297, 314, 332, 366, 372, 375, 400, 405, 407, 443, 525, 613, 623, 630, 682, 869, 976, 988, 993, 1000, 1008, 1009, 1012, 1015, 1028, 1030, 1033], "max": [4, 8, 9, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 58, 62, 67, 72, 77, 82, 83, 90, 95, 98, 106, 110, 112, 119, 128, 136, 138, 139, 142, 143, 152, 154, 155, 163, 165, 168, 180, 185, 186, 187, 191, 193, 200, 201, 204, 212, 214, 216, 222, 231, 235, 257, 258, 259, 270, 272, 277, 279, 281, 285, 286, 292, 295, 297, 301, 303, 304, 306, 314, 323, 325, 331, 338, 341, 360, 400, 402, 405, 460, 461, 462, 463, 464, 465, 466, 467, 468, 503, 527, 546, 547, 548, 549, 550, 551, 554, 555, 556, 597, 618, 622, 623, 639, 640, 660, 663, 665, 671, 682, 683, 687, 695, 696, 731, 747, 780, 781, 787, 847, 848, 859, 860, 862, 869, 876, 877, 898, 899, 900, 901, 946, 974, 976, 981, 988, 992, 993, 1011, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "977": [4, 404], "rescal": [4, 46, 47, 55, 100, 179, 186, 222, 301, 342, 402, 412, 460, 461, 462, 463, 464, 465, 466, 467, 524, 529, 637, 640, 643, 862, 868, 892, 893, 894, 895, 896, 978, 988, 1012, 1024, 1025], "variabl": [4, 9, 11, 12, 16, 37, 70, 113, 117, 120, 123, 124, 138, 139, 142, 147, 157, 158, 162, 163, 169, 170, 174, 182, 187, 198, 202, 203, 216, 221, 250, 259, 262, 269, 306, 307, 308, 356, 360, 362, 369, 371, 372, 374, 376, 378, 379, 382, 387, 400, 401, 402, 403, 405, 407, 408, 409, 441, 473, 474, 475, 478, 490, 492, 499, 506, 523, 525, 527, 532, 535, 544, 550, 551, 595, 597, 598, 599, 631, 641, 642, 645, 646, 652, 673, 674, 686, 700, 737, 788, 789, 792, 794, 795, 796, 797, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 815, 818, 822, 823, 853, 864, 867, 871, 879, 891, 967, 968, 970, 974, 977, 978, 979, 980, 981, 983, 985, 986, 988, 992, 994, 998, 999, 1001, 1004, 1005, 1007, 1009, 1020, 1025, 1028, 1030, 1033, 1035], "rel": [4, 6, 8, 17, 20, 27, 55, 61, 100, 117, 155, 174, 178, 198, 216, 247, 285, 286, 302, 308, 312, 315, 332, 345, 346, 369, 373, 376, 382, 387, 398, 400, 404, 407, 408, 410, 431, 434, 438, 440, 450, 512, 515, 522, 525, 528, 532, 548, 549, 550, 551, 555, 556, 557, 595, 640, 649, 650, 662, 663, 665, 681, 685, 719, 737, 787, 790, 791, 793, 801, 809, 814, 817, 830, 831, 835, 847, 848, 859, 860, 870, 886, 890, 891, 892, 895, 897, 898, 899, 900, 901, 974, 975, 978, 980, 981, 982, 984, 1001, 1009], "so": [4, 9, 12, 16, 17, 42, 48, 55, 56, 61, 65, 81, 116, 119, 122, 129, 150, 155, 168, 170, 174, 178, 198, 199, 227, 234, 259, 279, 285, 286, 289, 296, 297, 302, 307, 308, 312, 323, 332, 340, 345, 347, 354, 356, 360, 361, 362, 368, 369, 373, 374, 376, 378, 379, 380, 382, 383, 387, 391, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 413, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 487, 499, 500, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 686, 696, 699, 707, 716, 731, 746, 778, 785, 786, 787, 790, 791, 793, 794, 801, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 880, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 927, 944, 953, 967, 968, 970, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 984, 988, 990, 991, 992, 993, 999, 1002, 1011, 1012, 1013, 1020, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1036], "error": [4, 5, 7, 13, 17, 27, 75, 78, 79, 81, 99, 105, 108, 109, 113, 116, 117, 120, 124, 134, 150, 162, 165, 168, 182, 187, 194, 198, 200, 204, 205, 212, 216, 230, 233, 234, 250, 252, 255, 259, 260, 264, 273, 275, 285, 286, 315, 331, 340, 345, 346, 371, 372, 374, 376, 377, 378, 379, 383, 385, 387, 391, 394, 398, 399, 400, 401, 402, 404, 405, 407, 408, 409, 410, 428, 434, 435, 438, 440, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 487, 494, 506, 515, 522, 524, 525, 528, 529, 533, 534, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 566, 572, 573, 579, 581, 582, 583, 585, 586, 587, 589, 590, 591, 597, 601, 602, 620, 623, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 679, 680, 681, 683, 684, 687, 689, 692, 693, 700, 703, 711, 712, 713, 717, 730, 733, 734, 735, 736, 737, 738, 740, 741, 743, 746, 754, 768, 772, 778, 779, 787, 788, 789, 790, 791, 793, 794, 796, 801, 805, 809, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 838, 840, 841, 842, 845, 847, 848, 850, 851, 853, 855, 856, 857, 862, 863, 864, 869, 870, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 908, 909, 910, 911, 914, 941, 962, 965, 967, 968, 969, 971, 972, 973, 975, 979, 982, 986, 988, 992, 993, 994, 1000, 1011, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "easili": [4, 9, 31, 144, 171, 201, 214, 232, 234, 238, 241, 259, 261, 268, 284, 303, 374, 376, 387, 388, 401, 407, 408, 410, 440, 972, 974, 975, 988, 992, 993, 994, 1005, 1008, 1013, 1026], "interpret": [4, 27, 147, 157, 165, 166, 167, 169, 172, 198, 199, 214, 216, 253, 259, 261, 262, 298, 302, 305, 313, 345, 347, 360, 372, 374, 375, 380, 382, 383, 387, 389, 398, 400, 401, 406, 408, 443, 455, 456, 458, 487, 532, 563, 602, 630, 634, 644, 663, 664, 682, 683, 686, 692, 719, 743, 748, 749, 773, 780, 781, 793, 802, 813, 814, 816, 819, 851, 863, 870, 946, 972, 974, 978, 979, 985, 988, 994, 998, 1004, 1012, 1020, 1021, 1025, 1028, 1033, 1034, 1035], "fraction": [4, 25, 27, 121, 123, 198, 206, 216, 340, 346, 398, 404, 407, 429, 430, 440, 441, 447, 448, 506, 518, 548, 549, 550, 551, 555, 556, 557, 581, 584, 593, 657, 658, 659, 662, 667, 668, 669, 694, 712, 713, 714, 724, 782, 784, 789, 793, 814, 815, 829, 857, 892, 893, 894, 898, 899, 900, 901, 944, 974, 978, 981, 985, 986, 988, 993, 994, 999, 1021, 1022, 1023, 1034], "maximum": [4, 8, 11, 27, 33, 37, 57, 78, 79, 80, 81, 82, 97, 110, 115, 116, 119, 121, 151, 157, 165, 176, 186, 217, 269, 281, 285, 286, 292, 301, 327, 343, 346, 350, 352, 353, 360, 379, 380, 386, 387, 397, 398, 400, 402, 403, 405, 407, 408, 410, 411, 412, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 445, 448, 450, 452, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 489, 500, 502, 503, 504, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 574, 575, 588, 601, 618, 622, 623, 626, 628, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 665, 667, 668, 669, 670, 673, 674, 676, 677, 678, 679, 680, 681, 683, 684, 685, 707, 734, 771, 785, 787, 790, 791, 793, 801, 808, 814, 839, 846, 847, 848, 854, 855, 859, 860, 862, 865, 866, 867, 869, 878, 879, 884, 885, 886, 887, 890, 891, 895, 898, 899, 900, 901, 902, 904, 907, 914, 967, 973, 974, 975, 977, 978, 980, 981, 982, 984, 988, 992, 993, 994, 1012, 1027, 1028, 1030, 1031, 1034, 1035], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 139, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 165, 167, 168, 169, 170, 171, 174, 176, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 222, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 295, 296, 297, 298, 300, 302, 303, 304, 305, 306, 307, 309, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 345, 346, 350, 351, 352, 353, 354, 360, 362, 363, 366, 369, 371, 374, 377, 379, 380, 383, 385, 387, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 416, 418, 422, 423, 424, 425, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 492, 500, 501, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 566, 568, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 685, 688, 689, 691, 692, 693, 702, 713, 725, 740, 778, 785, 786, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 919, 938, 962, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 985, 986, 988, 989, 990, 991, 992, 993, 994, 998, 999, 1000, 1002, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 49, 50, 53, 54, 56, 57, 58, 61, 65, 68, 69, 76, 79, 80, 84, 87, 95, 98, 100, 104, 105, 106, 110, 115, 117, 118, 124, 130, 142, 147, 162, 174, 185, 187, 199, 206, 215, 218, 220, 225, 227, 233, 234, 241, 243, 251, 261, 266, 268, 279, 285, 286, 288, 301, 305, 308, 311, 313, 314, 345, 346, 347, 354, 356, 360, 361, 362, 363, 366, 371, 372, 374, 375, 376, 380, 381, 383, 385, 386, 389, 391, 394, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 453, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 495, 503, 505, 513, 516, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 701, 702, 721, 722, 725, 726, 731, 732, 753, 758, 759, 764, 768, 773, 778, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 878, 879, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 905, 913, 927, 934, 936, 937, 938, 939, 944, 947, 962, 963, 966, 967, 968, 972, 973, 974, 975, 978, 979, 980, 981, 982, 983, 986, 988, 990, 991, 992, 993, 994, 995, 998, 1002, 1004, 1008, 1010, 1011, 1013, 1014, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "minim": [4, 12, 57, 66, 78, 79, 123, 150, 158, 177, 194, 196, 198, 200, 202, 206, 216, 219, 230, 231, 244, 249, 260, 268, 269, 301, 311, 314, 329, 340, 350, 363, 373, 374, 377, 382, 385, 387, 398, 400, 402, 405, 407, 431, 432, 436, 437, 441, 454, 529, 531, 538, 548, 549, 550, 551, 555, 556, 600, 601, 602, 632, 637, 640, 648, 649, 658, 662, 663, 665, 669, 670, 678, 683, 685, 686, 738, 770, 837, 839, 848, 866, 878, 884, 898, 899, 900, 901, 969, 974, 975, 978, 981, 982, 988, 990, 991, 992, 993, 998, 1000, 1011, 1012, 1015, 1024, 1029, 1030], "squar": [4, 5, 61, 71, 79, 80, 81, 84, 87, 96, 106, 113, 124, 126, 147, 150, 155, 165, 168, 176, 177, 179, 182, 187, 194, 198, 200, 203, 208, 215, 216, 217, 230, 231, 233, 247, 268, 269, 273, 305, 313, 314, 316, 329, 345, 366, 371, 374, 380, 383, 387, 400, 402, 403, 405, 406, 407, 411, 412, 423, 431, 433, 434, 435, 437, 438, 440, 441, 448, 450, 451, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 492, 522, 528, 530, 532, 534, 538, 540, 543, 545, 547, 549, 550, 551, 553, 556, 559, 561, 581, 582, 583, 586, 587, 589, 590, 591, 595, 596, 597, 600, 602, 606, 613, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 673, 674, 677, 678, 679, 681, 683, 685, 687, 700, 712, 713, 714, 740, 741, 748, 749, 753, 759, 760, 775, 816, 823, 824, 832, 833, 836, 838, 840, 841, 848, 851, 870, 890, 891, 893, 895, 896, 897, 899, 901, 925, 951, 964, 969, 971, 972, 981, 982, 986, 992, 994, 1000, 1011, 1012, 1015, 1020, 1023, 1025, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 37, 38, 44, 45, 49, 54, 55, 56, 57, 58, 61, 63, 71, 72, 74, 83, 85, 86, 95, 96, 97, 103, 105, 108, 109, 110, 115, 116, 117, 119, 121, 123, 127, 130, 131, 132, 133, 134, 136, 137, 145, 146, 147, 149, 150, 155, 157, 160, 161, 162, 164, 167, 168, 176, 179, 182, 186, 187, 193, 198, 200, 202, 203, 205, 206, 215, 216, 217, 226, 227, 228, 233, 239, 241, 242, 243, 244, 246, 247, 249, 251, 252, 253, 256, 257, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 275, 279, 280, 286, 293, 301, 303, 314, 315, 317, 335, 340, 346, 347, 351, 360, 361, 362, 363, 366, 372, 374, 377, 378, 381, 382, 383, 384, 390, 391, 394, 395, 398, 400, 403, 405, 408, 409, 411, 412, 413, 414, 415, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 452, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 481, 482, 483, 486, 487, 489, 492, 493, 515, 518, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 566, 567, 568, 570, 571, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 675, 678, 679, 680, 681, 682, 683, 688, 689, 691, 692, 693, 698, 699, 702, 703, 704, 707, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 772, 773, 774, 775, 777, 778, 779, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 798, 799, 801, 805, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 878, 879, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 909, 910, 911, 913, 915, 916, 919, 921, 922, 923, 934, 936, 938, 962, 966, 973, 975, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 999, 1000, 1002, 1004, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "condit": [4, 12, 25, 27, 82, 118, 123, 165, 166, 168, 172, 187, 200, 203, 216, 234, 262, 314, 354, 380, 385, 389, 397, 398, 400, 402, 405, 407, 409, 442, 455, 462, 463, 464, 469, 487, 504, 514, 515, 527, 530, 531, 532, 534, 536, 538, 540, 541, 553, 618, 623, 624, 634, 641, 642, 643, 645, 646, 647, 661, 663, 664, 665, 666, 673, 674, 678, 688, 703, 708, 709, 726, 727, 783, 825, 826, 827, 828, 829, 848, 851, 854, 863, 864, 867, 871, 927, 972, 974, 975, 976, 978, 980, 981, 983, 988, 994, 998, 1011, 1015, 1021, 1023, 1024, 1025, 1027, 1028, 1030, 1032, 1034, 1035, 1036], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 66, 68, 70, 71, 72, 73, 75, 78, 79, 80, 81, 89, 95, 96, 97, 98, 99, 100, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 130, 133, 137, 138, 139, 143, 147, 150, 151, 152, 155, 156, 157, 159, 161, 162, 164, 165, 167, 168, 169, 170, 174, 176, 177, 178, 181, 182, 186, 193, 198, 199, 200, 202, 203, 205, 206, 212, 214, 215, 216, 217, 219, 220, 221, 222, 224, 227, 228, 230, 231, 232, 233, 234, 235, 241, 244, 245, 249, 250, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 272, 274, 277, 279, 282, 285, 286, 287, 290, 292, 301, 306, 307, 308, 312, 313, 314, 316, 317, 321, 325, 328, 329, 331, 332, 334, 335, 345, 346, 347, 350, 353, 354, 356, 360, 361, 362, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 421, 424, 425, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 494, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 601, 602, 603, 610, 613, 614, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 695, 696, 697, 700, 702, 703, 709, 711, 712, 717, 719, 720, 724, 725, 727, 732, 733, 735, 736, 738, 740, 741, 743, 746, 748, 749, 753, 754, 756, 757, 758, 759, 760, 763, 765, 766, 767, 768, 771, 772, 773, 774, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 798, 799, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 905, 907, 908, 910, 911, 913, 914, 917, 921, 922, 923, 925, 926, 927, 929, 931, 935, 936, 937, 938, 939, 941, 942, 943, 946, 948, 949, 952, 953, 959, 962, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1002, 1005, 1007, 1008, 1012, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "median": [4, 37, 71, 75, 80, 81, 123, 162, 163, 168, 200, 204, 215, 229, 301, 312, 314, 315, 369, 402, 407, 409, 431, 445, 449, 452, 465, 543, 545, 549, 556, 588, 618, 621, 626, 661, 662, 670, 712, 743, 837, 868, 880, 899, 901, 968, 988, 994, 1023, 1024], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 58, 60, 61, 96, 113, 114, 123, 126, 133, 147, 150, 155, 165, 167, 168, 169, 174, 187, 192, 197, 198, 202, 204, 216, 252, 257, 259, 265, 266, 272, 275, 306, 345, 346, 360, 369, 371, 376, 380, 387, 397, 399, 402, 404, 405, 406, 407, 408, 440, 443, 453, 489, 506, 529, 531, 538, 542, 548, 549, 550, 551, 554, 555, 556, 595, 598, 599, 602, 618, 622, 649, 681, 683, 689, 693, 695, 696, 698, 700, 703, 704, 707, 708, 711, 715, 716, 717, 719, 721, 726, 727, 729, 730, 733, 737, 745, 746, 747, 772, 773, 774, 776, 777, 779, 780, 783, 811, 813, 816, 836, 867, 879, 898, 899, 900, 901, 968, 974, 976, 981, 983, 984, 986, 992, 994, 1008, 1011, 1020, 1023, 1025, 1026, 1028, 1030], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 70, 71, 85, 100, 109, 110, 113, 115, 116, 117, 118, 121, 122, 123, 124, 125, 136, 139, 141, 143, 146, 148, 150, 151, 165, 167, 168, 169, 170, 171, 174, 182, 187, 193, 194, 198, 199, 200, 202, 205, 206, 213, 214, 216, 223, 228, 233, 234, 236, 246, 252, 253, 254, 257, 258, 259, 260, 261, 263, 264, 266, 267, 269, 270, 271, 275, 277, 287, 288, 295, 297, 303, 306, 307, 308, 324, 332, 340, 347, 356, 360, 361, 368, 369, 371, 377, 378, 379, 380, 385, 386, 387, 389, 390, 393, 395, 396, 398, 401, 402, 405, 407, 408, 409, 410, 417, 419, 423, 426, 427, 428, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 479, 480, 484, 488, 489, 493, 495, 515, 522, 528, 530, 534, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 583, 585, 586, 587, 589, 590, 591, 593, 595, 596, 597, 599, 600, 601, 602, 618, 619, 621, 626, 627, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 703, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 837, 840, 841, 847, 848, 850, 875, 876, 878, 879, 880, 881, 885, 886, 888, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 919, 921, 922, 973, 974, 977, 978, 981, 982, 986, 988, 992, 993, 994, 998, 999, 1001, 1002, 1005, 1008, 1009, 1015, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "discuss": [4, 53, 58, 168, 187, 219, 224, 262, 345, 356, 362, 369, 371, 374, 379, 380, 382, 385, 387, 388, 400, 402, 406, 407, 410, 489, 673, 674, 832, 833, 838, 840, 841, 968, 972, 974, 975, 978, 981, 988, 995, 999, 1023], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 60, 62, 66, 78, 101, 102, 119, 130, 136, 137, 147, 168, 171, 191, 235, 237, 254, 264, 271, 350, 356, 360, 361, 362, 363, 376, 379, 382, 387, 400, 402, 404, 407, 408, 410, 411, 434, 435, 438, 440, 450, 514, 523, 529, 550, 551, 573, 593, 649, 650, 663, 665, 670, 678, 679, 680, 684, 716, 746, 787, 790, 791, 801, 857, 890, 891, 898, 899, 900, 901, 968, 969, 973, 974, 975, 976, 977, 981, 988, 991, 992, 993, 1005, 1007, 1011, 1012, 1022, 1023, 1027, 1029, 1031], "focu": [4, 9, 27, 95, 110, 150, 250, 289, 360, 379, 398, 407, 544, 545, 550, 552, 553, 669, 975, 981, 988, 998, 999], "intuit": [4, 31, 44, 52, 62, 100, 110, 113, 120, 142, 150, 168, 169, 199, 200, 221, 227, 260, 284, 303, 306, 329, 332, 346, 374, 387, 398, 400, 402, 404, 406, 772, 773, 774, 777, 861, 970, 974, 975, 978, 979, 985, 988, 989, 993, 1002, 1011, 1013, 1020], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 53, 55, 72, 75, 80, 82, 86, 92, 95, 98, 100, 103, 109, 110, 112, 113, 115, 116, 117, 119, 120, 123, 147, 150, 156, 159, 162, 168, 169, 170, 174, 177, 182, 184, 187, 198, 200, 204, 214, 215, 216, 223, 227, 233, 234, 235, 245, 256, 257, 259, 260, 261, 262, 265, 268, 277, 279, 285, 286, 298, 301, 305, 306, 307, 313, 315, 317, 321, 345, 346, 347, 356, 360, 361, 362, 368, 369, 370, 373, 374, 376, 379, 380, 382, 387, 388, 394, 397, 398, 399, 400, 402, 403, 404, 405, 407, 408, 409, 410, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 443, 445, 448, 451, 454, 455, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 484, 485, 487, 500, 505, 506, 514, 522, 525, 526, 527, 528, 529, 531, 532, 533, 535, 538, 539, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 564, 572, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 618, 619, 621, 625, 631, 633, 634, 635, 636, 637, 638, 643, 644, 646, 649, 650, 651, 652, 653, 654, 657, 658, 659, 662, 663, 665, 667, 668, 669, 670, 673, 678, 683, 685, 687, 695, 696, 703, 711, 712, 713, 714, 725, 726, 729, 754, 769, 770, 771, 773, 775, 783, 785, 786, 787, 790, 791, 797, 801, 806, 808, 811, 812, 813, 814, 815, 818, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 847, 848, 853, 863, 864, 865, 867, 868, 870, 873, 879, 880, 884, 887, 890, 891, 892, 895, 896, 898, 899, 900, 901, 902, 916, 927, 929, 930, 941, 947, 949, 952, 967, 968, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 992, 993, 994, 998, 999, 1004, 1008, 1011, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "root": [4, 16, 80, 147, 179, 354, 371, 374, 382, 400, 433, 492, 532, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 630, 741, 898, 899, 900, 901, 902, 904, 984, 994, 1022, 1028, 1029, 1030, 1031, 1034, 1035], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 58, 60, 64, 68, 70, 75, 82, 109, 110, 115, 122, 124, 125, 130, 144, 151, 162, 165, 167, 168, 170, 182, 187, 193, 194, 198, 200, 202, 204, 216, 222, 228, 231, 232, 237, 240, 252, 253, 255, 256, 257, 259, 260, 262, 266, 268, 269, 275, 277, 279, 281, 289, 292, 298, 301, 306, 311, 312, 314, 315, 316, 317, 320, 321, 323, 324, 345, 346, 356, 360, 363, 366, 369, 374, 376, 385, 386, 387, 389, 391, 395, 398, 405, 406, 407, 410, 411, 417, 428, 432, 435, 436, 437, 441, 448, 460, 511, 526, 540, 541, 542, 544, 546, 548, 549, 550, 552, 553, 555, 556, 558, 560, 569, 593, 601, 611, 619, 622, 625, 629, 630, 631, 632, 633, 634, 649, 650, 654, 657, 659, 665, 666, 667, 679, 681, 683, 685, 687, 787, 790, 791, 793, 801, 809, 811, 812, 813, 815, 818, 819, 820, 821, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 856, 862, 885, 886, 890, 892, 895, 898, 900, 968, 970, 973, 979, 984, 986, 998, 999, 1008, 1009, 1013, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "studi": [4, 60, 123, 198, 216, 262, 265, 266, 345, 369, 371, 404, 409, 687, 699, 748, 749, 815, 976, 978, 992, 1004], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 56, 57, 60, 61, 62, 65, 66, 71, 72, 73, 74, 75, 81, 85, 86, 90, 91, 92, 97, 99, 100, 101, 102, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 168, 169, 170, 171, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 216, 219, 220, 221, 224, 228, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 244, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 350, 351, 352, 353, 354, 356, 366, 367, 368, 369, 372, 374, 376, 379, 381, 383, 386, 387, 391, 394, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 419, 422, 423, 424, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 478, 489, 491, 493, 496, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 517, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 689, 691, 692, 693, 697, 702, 716, 725, 731, 732, 746, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 778, 779, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 910, 915, 916, 938, 940, 941, 942, 949, 952, 965, 967, 968, 969, 970, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 985, 988, 992, 993, 994, 999, 1004, 1008, 1009, 1011, 1015, 1017, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "hist": [4, 25, 27, 53, 75, 112, 116, 198, 200, 231, 265, 284, 301, 305, 307, 315, 407], "bin": [4, 24, 25, 27, 53, 75, 112, 116, 198, 231, 265, 284, 301, 302, 303, 304, 305, 307, 308, 372, 382, 390, 398, 406, 407, 429, 430, 439, 452, 552, 553, 853, 855, 869, 929, 1012, 1028, 1029, 1030, 1034], "30": [4, 8, 10, 14, 19, 34, 39, 40, 54, 60, 71, 73, 78, 101, 103, 110, 119, 123, 129, 136, 150, 151, 154, 156, 169, 174, 177, 192, 196, 198, 216, 219, 220, 224, 232, 236, 248, 259, 264, 273, 279, 288, 289, 305, 306, 307, 316, 317, 320, 321, 325, 330, 333, 335, 338, 360, 369, 371, 379, 380, 404, 408, 411, 435, 441, 448, 491, 526, 529, 530, 532, 534, 561, 583, 586, 587, 589, 639, 683, 725, 773, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 871, 886, 899, 967, 972, 978, 979, 981, 986, 1009, 1020, 1021, 1027, 1028, 1029], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 73, 95, 99, 109, 119, 123, 124, 156, 157, 158, 168, 174, 177, 198, 201, 202, 206, 213, 216, 230, 231, 233, 234, 241, 254, 283, 284, 297, 302, 303, 304, 305, 311, 314, 316, 332, 338, 341, 347, 368, 371, 374, 377, 379, 383, 384, 385, 386, 387, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 412, 418, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 436, 439, 440, 441, 445, 448, 449, 452, 455, 456, 458, 459, 460, 462, 463, 473, 474, 475, 480, 494, 500, 507, 508, 509, 511, 515, 519, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 602, 611, 613, 618, 619, 620, 621, 622, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 676, 677, 678, 679, 680, 681, 683, 684, 687, 688, 689, 691, 692, 693, 712, 713, 714, 718, 735, 736, 738, 740, 741, 743, 744, 751, 757, 758, 761, 762, 764, 768, 769, 770, 771, 775, 785, 786, 787, 790, 791, 793, 801, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 836, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 907, 908, 909, 910, 911, 912, 916, 921, 926, 937, 938, 942, 951, 953, 959, 964, 965, 968, 970, 972, 974, 975, 976, 977, 978, 980, 981, 982, 983, 985, 986, 990, 991, 992, 993, 994, 998, 999, 1002, 1004, 1008, 1009, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "annot": [4, 9, 26, 132, 174, 220, 263, 266, 345, 374, 375, 376, 400, 707, 904, 978, 994, 1029], "log": [4, 20, 25, 26, 27, 78, 95, 110, 123, 130, 143, 147, 151, 152, 154, 155, 156, 159, 183, 186, 187, 191, 198, 203, 208, 216, 231, 233, 248, 289, 306, 345, 369, 371, 372, 374, 378, 382, 383, 387, 397, 398, 400, 401, 402, 405, 407, 408, 410, 439, 442, 451, 456, 461, 462, 463, 464, 465, 466, 467, 523, 527, 532, 540, 541, 542, 544, 546, 548, 550, 553, 555, 581, 582, 584, 585, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 633, 636, 639, 649, 650, 660, 662, 667, 671, 731, 741, 745, 785, 786, 787, 790, 791, 801, 825, 826, 827, 828, 829, 830, 831, 835, 846, 847, 854, 855, 884, 887, 892, 895, 897, 898, 900, 925, 967, 970, 972, 974, 975, 980, 981, 983, 986, 988, 992, 994, 998, 999, 1011, 1022, 1023, 1024, 1029, 1030, 1031, 1034], "describ": [4, 56, 130, 168, 216, 232, 259, 268, 356, 360, 361, 367, 369, 371, 373, 374, 376, 379, 382, 387, 388, 397, 400, 402, 403, 404, 405, 407, 408, 453, 460, 464, 465, 482, 484, 486, 487, 488, 491, 492, 493, 494, 495, 496, 501, 507, 508, 509, 519, 598, 599, 636, 650, 705, 785, 786, 825, 827, 865, 927, 967, 970, 973, 974, 977, 978, 980, 984, 992, 993, 994, 1001, 1004, 1010, 1011, 1028, 1030], "weather": [4, 155, 169, 410, 974, 978], "includ": [4, 32, 55, 80, 116, 120, 122, 167, 168, 170, 182, 198, 202, 216, 234, 260, 279, 296, 301, 314, 315, 317, 332, 337, 345, 347, 356, 360, 361, 368, 370, 372, 374, 375, 376, 378, 379, 380, 382, 383, 387, 388, 390, 397, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 435, 437, 441, 447, 457, 460, 461, 462, 463, 464, 465, 466, 467, 480, 481, 482, 487, 491, 492, 493, 495, 496, 501, 525, 532, 548, 555, 565, 623, 629, 637, 638, 643, 651, 652, 653, 656, 672, 679, 680, 688, 704, 719, 720, 725, 727, 728, 761, 773, 774, 777, 783, 787, 789, 790, 791, 800, 801, 804, 807, 813, 816, 838, 840, 841, 842, 863, 864, 865, 869, 887, 898, 900, 902, 904, 910, 911, 914, 916, 919, 938, 967, 974, 977, 978, 979, 981, 982, 988, 992, 993, 994, 998, 999, 1001, 1002, 1011, 1013, 1020, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "both": [4, 5, 7, 9, 10, 14, 16, 20, 25, 26, 42, 54, 55, 64, 71, 78, 80, 85, 86, 100, 103, 109, 113, 116, 117, 120, 129, 130, 133, 142, 143, 147, 150, 157, 159, 167, 168, 169, 170, 177, 182, 184, 186, 187, 198, 199, 200, 202, 203, 204, 206, 216, 223, 233, 234, 235, 244, 245, 246, 247, 248, 249, 259, 260, 261, 262, 266, 268, 270, 274, 279, 291, 301, 305, 306, 311, 313, 317, 322, 323, 329, 334, 340, 345, 346, 347, 354, 356, 360, 361, 362, 367, 368, 369, 370, 372, 374, 376, 380, 381, 383, 385, 386, 387, 388, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 413, 428, 437, 438, 443, 450, 453, 459, 466, 473, 474, 475, 476, 479, 480, 487, 488, 491, 493, 496, 498, 499, 500, 525, 529, 531, 538, 542, 546, 547, 548, 554, 555, 556, 557, 558, 568, 579, 580, 582, 588, 598, 599, 618, 623, 624, 634, 648, 649, 650, 663, 665, 667, 669, 678, 695, 703, 707, 721, 726, 747, 751, 757, 764, 768, 773, 778, 779, 783, 790, 791, 793, 809, 819, 847, 848, 862, 864, 866, 878, 883, 888, 890, 891, 898, 900, 914, 928, 941, 953, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 991, 992, 993, 994, 998, 999, 1001, 1002, 1008, 1011, 1012, 1013, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "numer": [4, 19, 66, 71, 75, 116, 118, 120, 130, 147, 155, 158, 169, 170, 187, 198, 216, 239, 241, 289, 307, 314, 347, 368, 369, 371, 377, 379, 380, 385, 386, 387, 400, 402, 407, 408, 409, 410, 412, 413, 431, 434, 438, 450, 462, 463, 466, 469, 480, 481, 482, 487, 491, 492, 493, 495, 496, 501, 522, 524, 526, 531, 538, 558, 572, 581, 602, 608, 611, 618, 621, 623, 624, 637, 643, 645, 663, 678, 681, 685, 705, 778, 782, 787, 790, 791, 793, 801, 809, 812, 813, 814, 817, 825, 826, 827, 828, 829, 847, 848, 853, 858, 863, 864, 871, 902, 903, 904, 910, 911, 926, 927, 967, 968, 974, 975, 979, 986, 988, 989, 994, 1001, 1002, 1004, 1013, 1020, 1021, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "categor": [4, 71, 108, 115, 130, 134, 165, 168, 169, 170, 198, 216, 239, 241, 308, 314, 316, 317, 362, 366, 368, 369, 376, 379, 387, 401, 408, 457, 458, 480, 481, 487, 496, 552, 553, 572, 573, 598, 599, 623, 624, 639, 649, 650, 660, 671, 700, 813, 825, 826, 827, 828, 829, 851, 853, 857, 858, 861, 863, 864, 871, 885, 886, 968, 974, 985, 986, 994, 998, 999, 1000, 1001, 1002, 1013, 1015, 1020, 1021, 1024, 1025, 1028, 1030, 1032, 1035, 1036], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 37, 38, 49, 53, 58, 66, 67, 70, 71, 86, 89, 90, 91, 102, 116, 117, 118, 141, 143, 144, 146, 147, 148, 150, 155, 165, 168, 169, 171, 174, 176, 177, 178, 182, 199, 202, 213, 215, 216, 217, 234, 238, 246, 247, 249, 254, 256, 259, 260, 261, 264, 266, 268, 285, 286, 289, 308, 314, 335, 340, 345, 346, 347, 351, 354, 356, 360, 363, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 382, 385, 386, 387, 388, 394, 397, 404, 405, 407, 408, 409, 410, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 453, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 483, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 501, 506, 515, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 597, 598, 599, 600, 601, 602, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 679, 680, 681, 682, 683, 686, 688, 692, 695, 696, 706, 716, 720, 733, 745, 746, 747, 776, 778, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 813, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 935, 968, 970, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 988, 989, 992, 994, 999, 1002, 1010, 1011, 1012, 1013, 1020, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "alreadi": [4, 6, 10, 16, 55, 58, 100, 110, 130, 147, 168, 228, 235, 240, 260, 266, 279, 314, 317, 374, 375, 379, 385, 387, 398, 402, 404, 406, 407, 412, 428, 490, 514, 524, 558, 559, 625, 637, 640, 655, 656, 657, 658, 659, 665, 667, 668, 669, 676, 677, 758, 825, 845, 853, 859, 860, 862, 867, 873, 875, 876, 877, 879, 880, 881, 887, 890, 891, 913, 937, 967, 984, 988, 989, 999, 1004, 1009, 1013, 1017, 1021, 1025, 1028, 1032, 1033, 1034, 1035], "expand": [4, 16, 49, 65, 229, 307, 312, 356, 366, 407, 435, 441, 490, 548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901, 978, 1021, 1028, 1029, 1036], "complementari": [4, 408], "column": [4, 20, 21, 60, 69, 72, 75, 76, 90, 117, 119, 120, 123, 127, 130, 147, 155, 162, 165, 167, 168, 169, 170, 187, 198, 199, 202, 206, 216, 236, 238, 249, 259, 260, 270, 271, 297, 306, 308, 313, 314, 315, 316, 345, 346, 347, 360, 368, 369, 371, 374, 376, 380, 383, 385, 386, 387, 397, 400, 401, 403, 405, 407, 408, 409, 412, 415, 442, 444, 455, 457, 458, 462, 463, 469, 478, 479, 480, 481, 482, 483, 485, 487, 491, 492, 493, 495, 496, 499, 500, 501, 502, 504, 506, 517, 522, 525, 528, 533, 535, 539, 546, 548, 549, 555, 556, 557, 558, 572, 573, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 618, 621, 623, 624, 625, 637, 639, 643, 649, 651, 653, 655, 656, 660, 671, 676, 677, 688, 704, 709, 710, 719, 720, 728, 744, 753, 758, 759, 760, 763, 773, 774, 777, 778, 787, 790, 791, 801, 811, 816, 821, 824, 825, 826, 827, 828, 829, 830, 831, 850, 854, 855, 856, 857, 863, 864, 865, 869, 870, 871, 872, 874, 890, 892, 895, 898, 900, 906, 910, 911, 916, 927, 941, 954, 955, 957, 965, 967, 968, 974, 976, 978, 979, 986, 988, 993, 999, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 219, 220, 221, 224, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 367, 368, 369, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 391, 394, 398, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 421, 422, 423, 424, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 478, 484, 485, 486, 489, 491, 492, 493, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 691, 692, 693, 697, 701, 702, 715, 725, 732, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 778, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 914, 926, 927, 929, 938, 939, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 967, 968, 969, 970, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 988, 990, 991, 992, 993, 994, 999, 1004, 1008, 1009, 1011, 1012, 1013, 1017, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "drop": [4, 5, 71, 75, 86, 155, 167, 168, 169, 171, 198, 202, 216, 241, 269, 307, 313, 316, 346, 378, 382, 401, 405, 407, 455, 458, 558, 559, 560, 561, 686, 691, 693, 772, 779, 849, 863, 869, 968, 974, 978, 986, 988, 998, 1020, 1021, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 34, 37, 39, 40, 47, 48, 50, 52, 53, 54, 55, 61, 71, 72, 75, 82, 86, 91, 92, 95, 96, 97, 98, 99, 105, 112, 113, 117, 119, 126, 129, 133, 139, 143, 154, 155, 159, 162, 167, 168, 179, 183, 185, 187, 190, 191, 192, 198, 203, 207, 210, 212, 213, 215, 216, 220, 221, 224, 227, 231, 232, 236, 237, 244, 246, 248, 249, 255, 256, 260, 261, 266, 268, 269, 277, 279, 284, 285, 286, 289, 290, 291, 298, 301, 305, 308, 321, 323, 325, 328, 331, 332, 335, 336, 337, 338, 339, 340, 342, 345, 346, 351, 352, 353, 354, 376, 383, 387, 398, 400, 408, 412, 429, 436, 455, 458, 522, 524, 527, 528, 530, 532, 534, 541, 576, 603, 622, 623, 676, 677, 692, 753, 769, 770, 771, 772, 793, 809, 818, 859, 860, 867, 868, 870, 873, 875, 876, 877, 879, 880, 881, 904, 906, 910, 911, 929, 953, 959, 968, 978, 985, 988, 993, 1010, 1012, 1028, 1030, 1032], "holidai": [4, 169], "workingdai": [4, 169], "temp": [4, 169], "feel_temp": [4, 169], "humid": [4, 169, 985], "windspe": [4, 169], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 360, 361, 368, 369, 371, 372, 374, 375, 376, 378, 379, 380, 381, 383, 385, 386, 387, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 423, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 749, 750, 751, 753, 754, 756, 757, 758, 759, 761, 763, 765, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 910, 911, 916, 921, 922, 924, 926, 927, 929, 930, 931, 932, 939, 940, 941, 943, 944, 946, 947, 948, 949, 952, 953, 959, 967, 968, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 996, 999, 1000, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018], "spring": [4, 169], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 39, 42, 44, 46, 47, 54, 55, 64, 67, 70, 71, 72, 73, 79, 81, 92, 99, 101, 104, 105, 109, 110, 116, 117, 120, 123, 124, 133, 136, 150, 155, 156, 157, 158, 168, 169, 170, 171, 177, 178, 182, 184, 198, 199, 203, 204, 206, 214, 216, 219, 222, 234, 235, 237, 241, 244, 256, 257, 259, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 279, 283, 289, 292, 296, 297, 301, 302, 307, 308, 311, 313, 314, 315, 316, 322, 332, 334, 340, 341, 345, 346, 368, 374, 375, 376, 379, 387, 391, 398, 400, 401, 402, 404, 405, 407, 408, 409, 410, 412, 413, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 450, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 499, 500, 501, 503, 506, 514, 515, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 626, 628, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 685, 686, 688, 689, 691, 692, 693, 694, 699, 700, 702, 703, 704, 705, 706, 709, 716, 717, 718, 719, 720, 721, 728, 732, 733, 740, 741, 744, 746, 751, 753, 757, 758, 759, 764, 768, 772, 773, 774, 775, 777, 779, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 798, 801, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 908, 909, 910, 911, 921, 928, 939, 940, 943, 944, 948, 949, 952, 959, 964, 965, 967, 968, 974, 978, 981, 988, 992, 993, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "6": [4, 6, 8, 9, 10, 11, 12, 16, 19, 26, 31, 32, 40, 44, 46, 49, 50, 52, 56, 57, 60, 61, 62, 63, 64, 65, 67, 73, 74, 75, 78, 79, 80, 82, 90, 95, 97, 105, 111, 119, 123, 124, 127, 129, 136, 142, 147, 150, 153, 155, 157, 158, 162, 163, 168, 169, 170, 174, 177, 178, 179, 182, 187, 191, 196, 198, 199, 200, 202, 212, 216, 219, 220, 223, 227, 230, 231, 235, 238, 239, 244, 245, 246, 247, 249, 250, 253, 254, 258, 259, 260, 261, 262, 264, 268, 269, 270, 271, 272, 274, 277, 281, 284, 292, 295, 297, 298, 301, 303, 305, 306, 308, 311, 314, 315, 316, 317, 320, 321, 324, 325, 332, 333, 335, 337, 340, 342, 345, 346, 347, 353, 356, 368, 369, 371, 372, 374, 379, 380, 386, 390, 392, 393, 398, 400, 401, 404, 405, 407, 408, 409, 437, 439, 440, 441, 442, 443, 444, 453, 473, 474, 475, 476, 496, 515, 521, 529, 531, 532, 538, 554, 560, 561, 584, 585, 602, 605, 606, 616, 618, 619, 621, 635, 636, 661, 680, 684, 712, 718, 728, 735, 736, 740, 741, 743, 759, 775, 778, 785, 786, 788, 789, 794, 796, 797, 799, 804, 805, 808, 814, 816, 825, 826, 827, 829, 830, 831, 838, 840, 841, 842, 857, 858, 860, 863, 865, 868, 869, 874, 905, 927, 930, 932, 941, 967, 968, 972, 974, 975, 978, 988, 989, 992, 993, 994, 996, 1004, 1008, 1009, 1011, 1016, 1018, 1021, 1022, 1023, 1028, 1033, 1037], "clear": [4, 16, 55, 60, 72, 168, 169, 306, 369, 373, 374, 376, 385, 386, 387, 398, 401, 406, 904, 905, 967, 972, 1031, 1032, 1033], "9": [4, 5, 7, 9, 12, 13, 24, 26, 27, 30, 31, 32, 42, 44, 50, 55, 58, 62, 64, 74, 82, 85, 91, 98, 109, 119, 120, 121, 122, 123, 128, 130, 136, 138, 139, 153, 157, 163, 167, 168, 169, 179, 180, 189, 198, 211, 212, 215, 216, 219, 222, 231, 232, 237, 241, 244, 245, 246, 247, 253, 262, 266, 268, 277, 281, 283, 284, 287, 288, 289, 295, 296, 298, 301, 303, 304, 305, 307, 308, 316, 317, 320, 321, 323, 324, 325, 332, 336, 342, 356, 371, 372, 380, 386, 390, 392, 393, 398, 401, 402, 404, 407, 408, 430, 434, 441, 448, 473, 474, 475, 476, 481, 511, 518, 525, 529, 530, 531, 538, 551, 558, 561, 574, 582, 598, 599, 618, 621, 625, 630, 638, 649, 652, 683, 700, 713, 716, 731, 738, 759, 768, 769, 770, 785, 788, 790, 791, 805, 808, 814, 816, 819, 827, 828, 832, 833, 838, 841, 847, 848, 856, 862, 865, 927, 931, 967, 973, 974, 978, 982, 988, 992, 993, 996, 1004, 1008, 1013, 1016, 1018, 1021, 1022, 1023, 1025, 1034, 1036], "84": [4, 6, 70, 144, 189, 216, 298, 303, 320, 356, 371, 407, 408, 778, 801, 978, 988, 1009], "14": [4, 11, 38, 49, 50, 60, 62, 63, 66, 74, 81, 100, 142, 169, 182, 187, 189, 216, 221, 227, 232, 258, 264, 265, 273, 277, 279, 298, 304, 305, 316, 339, 342, 361, 369, 371, 372, 386, 390, 392, 393, 400, 404, 489, 501, 544, 545, 576, 577, 626, 634, 683, 801, 805, 856, 971, 974, 978, 988, 993, 996, 1004, 1018, 1020, 1021, 1023, 1024, 1028, 1033], "395": 4, "81": [4, 50, 241, 320, 321, 400, 778, 787, 801, 978, 979, 981, 988], "0000": [4, 316], "02": [4, 8, 12, 28, 35, 44, 50, 52, 58, 62, 64, 68, 76, 82, 83, 85, 95, 98, 107, 112, 119, 134, 152, 157, 160, 167, 168, 172, 179, 216, 227, 231, 235, 242, 254, 260, 266, 275, 278, 284, 295, 298, 299, 301, 303, 309, 325, 328, 343, 346, 351, 368, 371, 379, 404, 432, 436, 588, 649, 667, 787, 801, 869, 885, 899, 974], "13": [4, 6, 10, 11, 44, 55, 68, 74, 98, 100, 105, 119, 121, 122, 124, 162, 168, 174, 184, 207, 224, 253, 260, 263, 265, 293, 298, 301, 305, 332, 347, 369, 371, 374, 380, 386, 404, 412, 501, 504, 523, 524, 542, 543, 573, 626, 630, 724, 805, 834, 849, 856, 882, 883, 974, 978, 979, 984, 985, 988, 993, 996, 1004, 1018, 1020, 1022, 1023, 1026, 1027, 1028, 1029, 1032], "635": [4, 607], "80": [4, 6, 11, 16, 27, 67, 81, 101, 130, 139, 144, 169, 177, 235, 298, 303, 307, 320, 335, 336, 337, 345, 352, 356, 369, 371, 374, 398, 404, 409, 435, 501, 532, 704, 787, 801, 871, 884, 903, 967, 973, 974, 978, 985, 991, 994, 1013], "75": [4, 6, 7, 10, 33, 44, 55, 82, 113, 144, 157, 158, 163, 168, 174, 177, 180, 189, 205, 216, 241, 246, 247, 259, 268, 272, 284, 301, 314, 342, 345, 356, 440, 542, 649, 697, 703, 724, 729, 735, 743, 746, 782, 787, 868, 880, 887, 903, 978, 980, 988, 994, 997, 1009, 1022], "17374": 4, "19": [4, 8, 9, 155, 160, 168, 202, 221, 224, 249, 305, 306, 321, 343, 371, 378, 387, 400, 401, 408, 411, 435, 483, 507, 508, 509, 527, 531, 532, 538, 540, 541, 548, 549, 550, 551, 555, 556, 557, 573, 580, 639, 649, 650, 657, 658, 659, 662, 663, 665, 667, 669, 678, 698, 771, 775, 787, 801, 813, 818, 819, 821, 822, 836, 837, 856, 867, 888, 892, 895, 898, 899, 900, 901, 967, 978, 988, 996, 1016, 1018, 1020, 1021, 1022, 1023, 1025, 1028], "misti": [4, 169], "10": [4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 20, 25, 26, 27, 30, 31, 32, 34, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 82, 85, 86, 92, 97, 98, 99, 100, 101, 105, 106, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 127, 128, 131, 133, 137, 139, 140, 144, 147, 151, 152, 154, 156, 157, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 182, 188, 189, 191, 192, 196, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 214, 215, 216, 220, 221, 227, 230, 231, 232, 233, 234, 236, 237, 238, 240, 247, 248, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 273, 275, 277, 284, 295, 296, 297, 298, 301, 302, 304, 305, 306, 311, 312, 313, 314, 315, 317, 320, 321, 322, 324, 330, 332, 334, 335, 336, 337, 339, 340, 342, 345, 346, 347, 356, 360, 368, 369, 370, 371, 372, 374, 376, 379, 380, 385, 386, 387, 390, 391, 392, 393, 397, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 413, 429, 434, 438, 440, 442, 443, 444, 450, 451, 453, 466, 483, 484, 491, 492, 493, 495, 501, 502, 503, 504, 507, 511, 512, 515, 519, 522, 526, 527, 528, 529, 530, 532, 533, 535, 537, 539, 543, 546, 547, 548, 549, 552, 553, 555, 556, 557, 558, 559, 561, 573, 574, 584, 585, 590, 591, 602, 608, 610, 618, 621, 623, 625, 626, 631, 633, 634, 635, 640, 650, 655, 656, 657, 658, 660, 661, 663, 664, 666, 667, 668, 669, 676, 677, 682, 683, 696, 706, 716, 732, 746, 759, 785, 786, 787, 788, 789, 790, 791, 798, 801, 802, 803, 804, 805, 807, 808, 809, 814, 816, 818, 819, 825, 826, 827, 829, 830, 831, 837, 846, 847, 848, 850, 856, 860, 863, 864, 867, 879, 887, 893, 896, 898, 899, 903, 927, 931, 942, 946, 948, 964, 967, 968, 973, 974, 975, 976, 978, 979, 981, 982, 984, 985, 988, 992, 993, 996, 1004, 1008, 1009, 1011, 1012, 1013, 1017, 1018, 1021, 1022, 1023, 1028, 1030, 1031, 1032, 1034, 1035], "66": [4, 92, 221, 223, 307, 371, 400, 523, 623, 703, 773, 774, 783, 869, 978, 990], "880": 4, "60": [4, 6, 16, 59, 73, 82, 198, 210, 216, 219, 220, 241, 247, 267, 272, 298, 321, 335, 345, 368, 400, 404, 441, 448, 704, 787, 978, 988, 1009, 1020, 1023], "11": [4, 9, 14, 15, 19, 35, 74, 81, 97, 98, 147, 153, 164, 168, 169, 182, 198, 199, 200, 203, 221, 231, 242, 256, 264, 265, 271, 275, 283, 285, 305, 313, 316, 317, 331, 335, 345, 347, 368, 371, 372, 380, 386, 400, 403, 404, 407, 441, 448, 473, 474, 475, 476, 492, 508, 509, 603, 641, 647, 661, 706, 712, 713, 714, 768, 769, 770, 788, 791, 805, 808, 815, 842, 899, 942, 974, 976, 988, 992, 993, 996, 1004, 1011, 1013, 1018, 1022, 1026, 1028, 1029, 1031, 1034, 1035], "0014": 4, "17375": 4, "20": [4, 7, 8, 14, 16, 19, 25, 26, 27, 33, 34, 39, 40, 43, 46, 47, 50, 54, 55, 61, 67, 78, 82, 92, 95, 101, 103, 105, 112, 116, 119, 120, 123, 126, 130, 131, 133, 139, 142, 143, 144, 156, 167, 169, 170, 180, 187, 188, 190, 194, 195, 197, 198, 199, 202, 207, 210, 211, 212, 213, 215, 217, 222, 231, 237, 246, 248, 249, 259, 260, 262, 263, 265, 267, 270, 271, 273, 279, 283, 284, 285, 286, 287, 290, 298, 305, 306, 307, 312, 313, 314, 315, 317, 318, 320, 321, 324, 329, 331, 335, 337, 342, 346, 347, 352, 353, 367, 371, 374, 376, 378, 379, 380, 390, 400, 407, 408, 432, 437, 438, 440, 455, 456, 460, 462, 463, 469, 479, 480, 481, 482, 483, 485, 487, 488, 491, 493, 495, 496, 503, 506, 507, 514, 522, 527, 528, 533, 536, 537, 539, 543, 546, 547, 550, 551, 552, 553, 554, 560, 561, 573, 580, 583, 585, 588, 590, 620, 621, 636, 640, 649, 657, 658, 659, 667, 669, 687, 695, 699, 704, 707, 715, 716, 729, 746, 747, 757, 780, 781, 785, 786, 787, 801, 812, 813, 814, 817, 819, 822, 823, 824, 827, 828, 835, 836, 847, 848, 849, 850, 852, 854, 855, 863, 864, 865, 866, 871, 885, 886, 888, 889, 894, 902, 908, 910, 911, 967, 974, 978, 981, 984, 985, 988, 991, 996, 1001, 1002, 1005, 1011, 1015, 1016, 1018, 1020, 1026, 1029, 1032, 1034, 1035], "17376": 4, "21": [4, 168, 187, 199, 216, 224, 249, 279, 298, 303, 305, 317, 324, 371, 372, 376, 378, 390, 397, 407, 408, 432, 436, 465, 523, 552, 553, 554, 560, 561, 579, 580, 582, 618, 660, 678, 744, 787, 789, 801, 813, 856, 863, 865, 871, 888, 904, 974, 979, 988, 996, 1016, 1018, 1020, 1021, 1023, 1027, 1028, 1030], "17377": 4, "22": [4, 42, 165, 168, 169, 215, 249, 298, 301, 305, 310, 318, 321, 347, 374, 378, 379, 390, 397, 428, 439, 463, 479, 480, 486, 487, 495, 506, 515, 522, 528, 533, 536, 537, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 585, 618, 619, 623, 625, 636, 638, 642, 644, 646, 649, 650, 652, 654, 656, 660, 679, 683, 693, 695, 704, 747, 759, 768, 773, 774, 778, 787, 788, 792, 801, 806, 808, 810, 811, 812, 813, 814, 815, 816, 817, 834, 836, 838, 840, 841, 842, 847, 848, 849, 851, 854, 870, 890, 892, 893, 894, 895, 896, 898, 899, 900, 901, 921, 922, 978, 988, 996, 1016, 1018, 1020, 1023, 1028, 1031, 1033], "56": [4, 207, 216, 231, 380, 704, 725, 978, 988, 1016, 1020], "8": [4, 5, 6, 7, 8, 9, 12, 13, 19, 25, 26, 27, 31, 32, 34, 37, 43, 44, 45, 48, 50, 53, 55, 60, 62, 64, 65, 70, 72, 74, 75, 81, 85, 90, 91, 92, 95, 96, 99, 100, 104, 106, 110, 113, 115, 116, 120, 122, 123, 125, 128, 131, 132, 136, 146, 147, 151, 153, 155, 156, 158, 159, 163, 167, 168, 169, 171, 174, 177, 178, 183, 184, 189, 192, 198, 199, 202, 205, 206, 208, 214, 216, 219, 220, 221, 223, 224, 228, 231, 232, 233, 235, 237, 239, 240, 241, 244, 245, 246, 248, 249, 250, 254, 255, 257, 258, 259, 260, 262, 263, 264, 266, 269, 270, 277, 281, 283, 287, 291, 295, 297, 298, 301, 303, 304, 305, 306, 307, 311, 316, 320, 321, 322, 324, 325, 329, 332, 336, 337, 339, 341, 345, 346, 347, 353, 356, 361, 368, 369, 371, 372, 374, 379, 380, 390, 398, 400, 404, 405, 407, 408, 409, 410, 430, 434, 435, 438, 440, 441, 443, 453, 460, 461, 462, 463, 464, 465, 466, 467, 474, 475, 476, 478, 481, 493, 494, 505, 522, 525, 529, 531, 534, 536, 538, 540, 541, 546, 547, 556, 561, 573, 579, 580, 581, 582, 619, 620, 639, 649, 661, 667, 680, 683, 684, 685, 686, 693, 697, 698, 700, 706, 712, 717, 718, 719, 731, 735, 736, 740, 741, 743, 772, 773, 775, 778, 779, 783, 785, 788, 789, 794, 797, 804, 805, 808, 809, 816, 819, 828, 830, 831, 837, 847, 848, 849, 855, 862, 869, 871, 892, 895, 925, 927, 931, 967, 968, 974, 975, 976, 978, 981, 986, 988, 992, 996, 1002, 1004, 1008, 1009, 1010, 1011, 1012, 1016, 1017, 1018, 1021, 1022, 1023, 1027, 1028, 1033, 1034, 1036], "9981": 4, "17378": 4, "23": [4, 8, 19, 26, 34, 50, 92, 98, 165, 169, 172, 206, 217, 224, 241, 249, 298, 305, 310, 313, 314, 318, 321, 371, 372, 374, 380, 390, 392, 393, 407, 413, 423, 431, 438, 443, 445, 453, 456, 458, 459, 466, 473, 474, 475, 481, 483, 491, 492, 493, 495, 496, 501, 503, 505, 513, 515, 529, 530, 531, 534, 538, 545, 547, 549, 551, 552, 553, 556, 559, 560, 561, 598, 599, 602, 618, 621, 623, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 660, 661, 663, 664, 666, 669, 670, 671, 708, 720, 768, 816, 822, 823, 824, 833, 841, 848, 851, 863, 870, 878, 879, 888, 891, 893, 896, 899, 901, 908, 910, 911, 921, 922, 927, 978, 996, 1016, 1018, 1020, 1021, 1027, 1028, 1029, 1032], "65": [4, 33, 169, 198, 268, 307, 400, 430, 493, 588, 731, 780, 781, 985, 1009, 1020, 1021, 1022], "17379": [4, 1032], "row": [4, 19, 20, 21, 25, 27, 44, 60, 75, 90, 92, 116, 119, 128, 131, 162, 198, 199, 200, 228, 231, 237, 238, 303, 354, 360, 369, 376, 383, 386, 387, 397, 400, 403, 408, 415, 433, 434, 438, 440, 441, 442, 444, 447, 448, 450, 455, 459, 479, 481, 482, 483, 484, 485, 486, 491, 492, 493, 495, 496, 501, 502, 504, 525, 533, 539, 542, 581, 582, 611, 623, 634, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 683, 687, 688, 701, 709, 710, 715, 748, 749, 753, 756, 758, 759, 760, 761, 763, 764, 766, 768, 769, 770, 771, 785, 786, 819, 825, 826, 827, 828, 829, 835, 838, 839, 840, 841, 842, 845, 856, 860, 862, 865, 877, 880, 881, 884, 888, 906, 910, 911, 927, 949, 952, 956, 958, 960, 961, 965, 967, 968, 972, 974, 976, 978, 979, 981, 988, 989, 992, 993, 999, 1027, 1028, 1029, 1030, 1035], "onli": [4, 7, 11, 13, 14, 20, 24, 25, 26, 27, 30, 33, 37, 39, 40, 45, 49, 53, 55, 58, 66, 70, 71, 72, 74, 75, 81, 90, 98, 99, 106, 110, 112, 117, 118, 119, 120, 122, 129, 130, 142, 143, 144, 147, 150, 152, 155, 157, 159, 163, 165, 167, 168, 169, 174, 176, 181, 182, 187, 194, 198, 199, 201, 204, 206, 207, 216, 217, 219, 220, 227, 229, 231, 233, 234, 238, 241, 244, 245, 246, 249, 250, 255, 257, 259, 261, 262, 265, 266, 267, 268, 270, 271, 279, 282, 285, 287, 290, 292, 297, 301, 302, 306, 307, 313, 314, 320, 321, 323, 328, 329, 332, 337, 340, 341, 345, 346, 347, 350, 351, 354, 356, 360, 361, 362, 367, 368, 369, 371, 372, 374, 376, 378, 379, 380, 381, 382, 383, 385, 387, 388, 390, 391, 394, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 480, 481, 482, 483, 485, 487, 488, 491, 492, 493, 494, 495, 496, 499, 500, 501, 503, 507, 510, 514, 515, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 698, 700, 704, 716, 719, 720, 724, 726, 727, 728, 731, 732, 733, 746, 748, 750, 764, 768, 769, 770, 771, 773, 774, 777, 778, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 801, 805, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 908, 910, 911, 914, 916, 919, 927, 929, 932, 934, 939, 944, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 992, 993, 994, 998, 999, 1002, 1011, 1012, 1013, 1017, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036], "present": [4, 5, 43, 49, 92, 95, 103, 115, 116, 123, 126, 146, 156, 159, 177, 180, 182, 187, 198, 227, 230, 234, 249, 257, 262, 265, 268, 269, 279, 301, 304, 306, 346, 371, 372, 376, 379, 385, 387, 391, 400, 402, 405, 407, 408, 418, 419, 422, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 480, 481, 482, 483, 487, 491, 492, 493, 494, 495, 496, 501, 522, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 540, 541, 554, 557, 560, 561, 572, 573, 574, 579, 580, 582, 608, 618, 619, 620, 621, 641, 645, 668, 679, 680, 681, 682, 703, 719, 720, 728, 732, 759, 773, 774, 777, 785, 786, 787, 790, 791, 799, 801, 814, 832, 833, 834, 836, 838, 840, 841, 842, 849, 854, 862, 863, 864, 865, 866, 868, 882, 883, 894, 902, 904, 905, 927, 962, 977, 978, 979, 980, 985, 988, 997, 999, 1023, 1028, 1030, 1031, 1032, 1034, 1035], "date": [4, 70, 155, 169, 369, 371, 374, 378, 388, 401, 999], "datetim": [4, 17, 155, 169], "http": [4, 6, 7, 8, 12, 17, 24, 71, 124, 130, 147, 159, 163, 174, 198, 206, 214, 216, 224, 228, 237, 277, 279, 297, 368, 369, 371, 372, 374, 378, 379, 380, 382, 385, 387, 390, 400, 404, 409, 433, 440, 443, 453, 478, 483, 487, 491, 493, 499, 500, 501, 521, 522, 525, 527, 528, 532, 586, 627, 632, 635, 640, 649, 655, 657, 658, 659, 662, 667, 670, 673, 674, 676, 677, 682, 683, 686, 696, 712, 713, 714, 748, 749, 759, 825, 827, 828, 829, 832, 833, 838, 839, 840, 841, 846, 868, 883, 884, 885, 898, 899, 974, 976, 978, 981, 991, 994, 1001, 1002, 1009, 1025, 1030], "pydata": [4, 997, 1002], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 61, 66, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 159, 168, 169, 170, 174, 179, 189, 190, 198, 206, 214, 216, 220, 228, 229, 230, 232, 234, 238, 239, 240, 241, 249, 257, 259, 260, 262, 266, 271, 277, 297, 298, 307, 312, 313, 315, 316, 320, 321, 322, 325, 345, 346, 347, 354, 361, 367, 372, 374, 377, 380, 382, 388, 390, 404, 586, 627, 659, 662, 667, 686, 696, 759, 832, 833, 838, 839, 840, 841, 868, 884, 898, 899, 974, 978, 994, 996, 1015, 1028, 1032], "stabl": [4, 159, 168, 192, 196, 200, 279, 312, 346, 372, 374, 378, 380, 383, 387, 390, 404, 408, 412, 462, 463, 469, 524, 646, 663, 665, 678, 683, 714, 742, 926, 927, 974, 980, 981, 988, 999, 1016, 1020, 1021, 1026, 1031, 1033], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 147, 155, 159, 168, 169, 170, 174, 179, 228, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 322, 354, 369, 371, 374, 375, 378, 382, 401, 404, 408, 478, 499, 500, 649, 825, 829, 923, 976, 998, 999, 1031, 1032, 1033, 1034, 1035], "compon": [4, 5, 17, 44, 58, 62, 70, 73, 84, 85, 87, 94, 96, 97, 99, 100, 102, 103, 104, 106, 107, 128, 155, 165, 167, 182, 219, 231, 232, 235, 244, 245, 248, 249, 250, 258, 260, 280, 293, 298, 306, 313, 360, 366, 369, 374, 376, 380, 383, 385, 399, 400, 401, 403, 408, 410, 412, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 453, 454, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 493, 495, 506, 512, 517, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 564, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 686, 719, 720, 728, 773, 774, 777, 785, 786, 787, 790, 791, 801, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 926, 927, 970, 975, 988, 990, 993, 998, 999, 1000, 1002, 1007, 1013, 1014, 1015, 1020, 1022, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "now": [4, 5, 7, 17, 20, 53, 57, 71, 86, 100, 109, 110, 111, 115, 117, 119, 120, 123, 124, 130, 133, 147, 150, 155, 156, 157, 163, 167, 168, 169, 170, 174, 177, 179, 184, 186, 187, 199, 200, 202, 223, 232, 234, 255, 259, 262, 270, 271, 306, 312, 313, 315, 316, 317, 322, 332, 340, 345, 346, 347, 356, 360, 362, 369, 374, 375, 376, 380, 385, 386, 387, 397, 400, 404, 405, 407, 408, 412, 484, 499, 500, 503, 527, 540, 570, 571, 573, 618, 621, 640, 644, 649, 654, 675, 716, 746, 785, 786, 790, 791, 822, 837, 953, 967, 968, 974, 978, 984, 987, 988, 993, 994, 997, 999, 1004, 1011, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "introspect": [4, 6, 71, 380, 550, 551, 579, 580, 582, 988, 1009], "value_count": [4, 169], "11413": 4, "4544": 4, "rain": [4, 169, 974], "1419": 4, "heavy_rain": [4, 169], "name": [4, 6, 7, 10, 11, 12, 17, 19, 25, 27, 30, 31, 34, 37, 44, 45, 58, 62, 71, 73, 75, 82, 96, 102, 113, 114, 115, 116, 120, 121, 123, 130, 168, 169, 170, 187, 196, 198, 200, 202, 204, 205, 213, 215, 216, 219, 220, 227, 233, 234, 236, 237, 241, 246, 254, 256, 257, 260, 262, 263, 266, 268, 269, 279, 287, 288, 295, 296, 303, 305, 307, 315, 316, 324, 337, 345, 346, 347, 361, 362, 368, 369, 372, 374, 376, 378, 379, 381, 382, 387, 390, 394, 397, 400, 401, 404, 407, 408, 410, 414, 416, 421, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 479, 480, 481, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 567, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 679, 680, 681, 682, 683, 688, 689, 690, 691, 693, 699, 700, 704, 722, 723, 769, 770, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 799, 801, 805, 809, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 909, 910, 911, 914, 918, 919, 920, 922, 934, 935, 936, 938, 941, 948, 962, 966, 967, 972, 974, 978, 979, 985, 986, 988, 994, 999, 1008, 1009, 1011, 1013, 1020, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 65, 70, 71, 122, 124, 125, 126, 151, 152, 153, 163, 168, 169, 200, 216, 237, 241, 244, 257, 263, 267, 286, 292, 307, 314, 315, 317, 321, 354, 368, 369, 374, 376, 385, 387, 396, 401, 404, 415, 418, 433, 434, 438, 439, 440, 441, 442, 444, 455, 457, 458, 460, 463, 465, 479, 480, 481, 482, 487, 488, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 505, 513, 533, 548, 549, 550, 551, 554, 555, 556, 557, 572, 573, 576, 577, 579, 580, 582, 584, 585, 593, 597, 618, 619, 620, 621, 623, 624, 631, 632, 635, 636, 637, 643, 647, 648, 651, 652, 653, 654, 655, 656, 662, 664, 666, 688, 690, 696, 705, 706, 721, 728, 731, 745, 776, 793, 811, 813, 814, 826, 830, 831, 833, 841, 855, 861, 863, 864, 870, 871, 884, 892, 893, 894, 895, 896, 898, 899, 900, 901, 907, 908, 910, 911, 943, 953, 954, 955, 956, 959, 965, 968, 988, 991, 993, 1004, 1021, 1023, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "int64": [4, 13, 54, 71, 168, 169, 307, 354, 387, 408, 418, 433, 439, 441, 579, 631, 705, 706, 826, 1028, 1031, 1033, 1035, 1036], "cannot": [4, 40, 56, 75, 82, 95, 100, 118, 168, 169, 182, 198, 216, 234, 301, 332, 362, 373, 375, 380, 387, 388, 400, 401, 402, 404, 405, 407, 408, 410, 456, 512, 529, 530, 531, 534, 538, 601, 604, 605, 606, 608, 610, 611, 613, 614, 616, 642, 646, 673, 683, 702, 708, 768, 790, 791, 837, 838, 840, 841, 842, 850, 851, 860, 861, 872, 908, 910, 911, 967, 968, 972, 974, 975, 979, 984, 988, 993, 994, 999, 1002, 1008, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 56, 58, 64, 70, 71, 75, 85, 86, 90, 95, 98, 100, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 127, 130, 131, 132, 136, 144, 150, 151, 152, 155, 156, 157, 158, 159, 165, 167, 168, 169, 170, 171, 174, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 198, 199, 200, 205, 206, 207, 210, 212, 213, 216, 227, 230, 232, 236, 237, 246, 248, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 277, 279, 282, 285, 286, 287, 288, 290, 292, 295, 296, 297, 301, 303, 305, 306, 311, 314, 319, 320, 321, 324, 325, 326, 328, 331, 339, 340, 347, 349, 352, 353, 355, 356, 360, 361, 362, 366, 371, 376, 379, 385, 386, 387, 394, 396, 398, 400, 401, 402, 403, 405, 407, 408, 409, 410, 412, 428, 431, 432, 434, 435, 438, 440, 442, 443, 444, 445, 450, 456, 460, 461, 463, 464, 465, 466, 467, 473, 474, 475, 476, 478, 479, 480, 484, 488, 489, 491, 495, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 618, 619, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 678, 679, 680, 682, 683, 687, 694, 731, 778, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 850, 855, 856, 859, 860, 863, 864, 868, 869, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 952, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 988, 992, 993, 994, 998, 999, 1000, 1002, 1005, 1008, 1009, 1015, 1017, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 25, 26, 27, 31, 32, 34, 36, 37, 49, 56, 67, 68, 70, 75, 81, 82, 94, 100, 105, 107, 109, 110, 113, 114, 115, 116, 118, 119, 125, 127, 128, 129, 130, 136, 137, 138, 139, 144, 147, 150, 153, 155, 159, 162, 163, 166, 170, 172, 173, 175, 184, 186, 187, 202, 212, 216, 223, 225, 226, 227, 232, 235, 240, 252, 256, 258, 259, 262, 264, 265, 267, 273, 275, 279, 283, 284, 285, 286, 287, 292, 294, 297, 298, 299, 301, 302, 306, 308, 310, 318, 319, 323, 325, 326, 331, 338, 340, 345, 346, 347, 350, 351, 352, 353, 356, 361, 363, 366, 367, 368, 369, 371, 373, 377, 380, 381, 382, 383, 386, 387, 389, 391, 394, 395, 396, 397, 398, 400, 401, 402, 404, 406, 408, 409, 410, 414, 415, 417, 418, 419, 422, 423, 424, 428, 429, 430, 433, 434, 437, 438, 440, 441, 448, 450, 455, 456, 458, 459, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 499, 500, 501, 503, 505, 506, 507, 508, 509, 511, 512, 513, 515, 516, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 562, 567, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 590, 593, 594, 601, 602, 605, 610, 613, 617, 619, 621, 623, 625, 629, 631, 632, 634, 635, 636, 637, 639, 643, 648, 649, 659, 660, 667, 668, 669, 671, 679, 680, 681, 682, 683, 687, 691, 692, 693, 699, 704, 708, 709, 712, 713, 714, 716, 725, 731, 733, 738, 746, 768, 769, 770, 775, 778, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 824, 825, 826, 827, 828, 829, 832, 834, 839, 846, 847, 848, 849, 851, 853, 855, 857, 860, 862, 863, 864, 865, 868, 869, 870, 871, 874, 882, 883, 885, 886, 887, 888, 890, 891, 892, 895, 898, 899, 900, 901, 913, 921, 922, 944, 945, 967, 968, 970, 971, 972, 974, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 989, 992, 993, 994, 995, 997, 1001, 1006, 1008, 1009, 1015, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "simplifi": [4, 71, 186, 332, 373, 375, 379, 400, 403, 506, 553, 849, 850, 978, 980, 988], "represent": [4, 12, 17, 20, 26, 53, 71, 72, 95, 98, 109, 115, 117, 118, 126, 127, 128, 130, 133, 144, 155, 168, 170, 174, 179, 182, 219, 220, 221, 228, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 289, 298, 307, 313, 315, 316, 322, 346, 347, 354, 356, 366, 368, 376, 387, 394, 400, 401, 405, 406, 407, 454, 522, 526, 528, 531, 533, 539, 557, 579, 581, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 621, 634, 637, 643, 649, 650, 651, 653, 657, 659, 667, 668, 669, 759, 785, 786, 793, 809, 846, 859, 863, 864, 868, 870, 883, 890, 902, 904, 907, 923, 944, 970, 975, 977, 979, 981, 982, 983, 985, 988, 993, 999, 1004, 1005, 1007, 1011, 1013, 1020, 1021, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "collaps": [4, 169, 301, 332, 385], "those": [4, 7, 12, 17, 19, 55, 60, 71, 111, 123, 147, 159, 167, 169, 170, 171, 198, 200, 202, 216, 224, 231, 234, 236, 237, 250, 253, 259, 262, 265, 296, 301, 306, 329, 332, 345, 346, 347, 360, 361, 368, 374, 376, 378, 379, 380, 381, 385, 387, 388, 390, 397, 398, 400, 404, 405, 407, 408, 410, 439, 441, 452, 455, 459, 485, 486, 487, 494, 548, 549, 555, 556, 560, 561, 572, 683, 688, 703, 709, 726, 787, 790, 791, 799, 801, 808, 832, 833, 834, 836, 838, 839, 840, 841, 842, 892, 895, 898, 899, 900, 901, 938, 967, 970, 974, 977, 978, 980, 981, 982, 985, 988, 994, 997, 998, 1002, 1004, 1013, 1020, 1023, 1026, 1027, 1028, 1033, 1034, 1035, 1036], "replac": [4, 25, 80, 99, 110, 150, 157, 162, 169, 184, 199, 237, 262, 279, 303, 308, 313, 334, 372, 374, 376, 378, 380, 383, 387, 394, 401, 404, 407, 408, 432, 436, 494, 506, 546, 547, 554, 573, 579, 580, 581, 582, 598, 599, 618, 621, 625, 630, 632, 718, 775, 793, 799, 801, 809, 849, 850, 853, 873, 886, 893, 947, 949, 952, 967, 968, 974, 978, 988, 993, 994, 998, 999, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1035, 1036], "to_replac": [4, 169], "valu": [4, 5, 7, 9, 11, 12, 13, 16, 17, 19, 20, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 55, 60, 61, 62, 66, 71, 73, 75, 78, 80, 82, 95, 98, 106, 110, 112, 114, 115, 116, 117, 118, 120, 123, 124, 126, 127, 129, 130, 142, 143, 146, 147, 150, 153, 154, 156, 158, 164, 167, 168, 169, 170, 171, 174, 177, 178, 180, 182, 184, 186, 187, 188, 189, 191, 196, 198, 199, 200, 202, 204, 213, 216, 218, 222, 225, 227, 228, 229, 230, 231, 232, 233, 237, 240, 241, 244, 250, 253, 255, 257, 259, 260, 262, 264, 265, 266, 268, 270, 271, 272, 274, 279, 292, 295, 296, 298, 301, 302, 303, 304, 305, 306, 307, 308, 313, 323, 324, 332, 337, 340, 345, 346, 347, 350, 354, 356, 360, 361, 362, 363, 366, 367, 368, 369, 371, 375, 376, 377, 379, 380, 381, 383, 385, 386, 387, 389, 390, 391, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 411, 412, 413, 414, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 478, 481, 482, 484, 487, 488, 489, 492, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 691, 692, 693, 695, 696, 698, 699, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 759, 761, 764, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 798, 799, 801, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 911, 914, 915, 916, 917, 919, 927, 929, 938, 939, 940, 941, 942, 946, 954, 955, 956, 967, 970, 971, 972, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 989, 991, 992, 993, 1000, 1002, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "inplac": [4, 169, 216, 271, 445, 473, 474, 475, 476, 845, 853, 856, 859, 860, 862, 866, 867, 868, 870, 873, 875, 876, 877, 878, 879, 880, 881, 951, 954, 955, 956, 960, 961, 1029], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 53, 86, 92, 100, 110, 113, 115, 117, 120, 123, 144, 150, 156, 165, 166, 170, 172, 184, 189, 198, 199, 200, 202, 206, 216, 231, 234, 238, 245, 246, 249, 250, 266, 279, 306, 345, 346, 356, 360, 361, 374, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 391, 396, 398, 400, 401, 402, 404, 407, 408, 409, 423, 455, 456, 458, 459, 460, 473, 474, 475, 487, 514, 523, 527, 529, 532, 543, 545, 546, 547, 549, 551, 553, 554, 556, 558, 559, 561, 563, 576, 577, 579, 580, 582, 586, 588, 597, 602, 618, 623, 624, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 665, 666, 669, 670, 686, 695, 696, 707, 725, 778, 782, 823, 824, 825, 826, 827, 828, 829, 833, 836, 841, 848, 851, 856, 863, 864, 867, 870, 871, 880, 881, 888, 890, 891, 892, 893, 894, 895, 896, 899, 901, 941, 967, 974, 978, 980, 984, 988, 992, 993, 994, 1001, 1009, 1012, 1013, 1015, 1020, 1021, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "balanc": [4, 6, 53, 66, 110, 165, 202, 203, 252, 262, 275, 301, 362, 385, 387, 398, 404, 405, 407, 493, 506, 525, 531, 532, 538, 548, 552, 555, 631, 649, 650, 657, 659, 665, 666, 667, 694, 699, 719, 733, 772, 777, 787, 788, 805, 850, 890, 892, 895, 898, 900, 915, 916, 967, 993, 994, 1009, 1020, 1022, 1025, 1026, 1029, 1030, 1034], "fall": [4, 123, 157, 258, 259, 374, 376, 399, 400, 408, 425, 437, 438, 499, 500, 717, 718, 782, 867, 879, 977, 978, 988, 1004, 1012, 1029], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 20, 24, 47, 55, 64, 65, 72, 78, 89, 105, 118, 119, 120, 124, 139, 155, 167, 168, 171, 174, 187, 191, 194, 198, 199, 204, 212, 216, 221, 231, 234, 241, 246, 254, 257, 259, 266, 277, 298, 301, 306, 307, 308, 313, 314, 340, 345, 347, 356, 360, 361, 369, 374, 376, 379, 380, 383, 387, 390, 391, 394, 400, 401, 402, 404, 405, 406, 407, 408, 410, 412, 431, 434, 437, 438, 440, 441, 446, 447, 448, 450, 455, 479, 480, 481, 486, 488, 506, 525, 526, 530, 531, 532, 534, 538, 542, 544, 546, 547, 548, 550, 554, 555, 558, 572, 579, 582, 584, 585, 588, 597, 598, 599, 601, 613, 618, 622, 631, 649, 650, 656, 667, 676, 677, 679, 680, 684, 688, 691, 693, 695, 703, 704, 709, 716, 719, 720, 728, 730, 731, 744, 746, 768, 772, 773, 774, 777, 778, 779, 782, 787, 788, 790, 791, 792, 794, 798, 801, 805, 806, 811, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 840, 847, 850, 861, 863, 864, 865, 869, 870, 871, 874, 875, 876, 878, 879, 880, 881, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 910, 911, 916, 927, 942, 947, 968, 974, 975, 978, 979, 981, 982, 988, 991, 992, 993, 994, 999, 1008, 1010, 1011, 1013, 1020, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "sensit": [4, 44, 55, 80, 81, 113, 123, 169, 200, 201, 202, 227, 301, 332, 361, 362, 388, 402, 407, 443, 453, 683, 703, 704, 778, 973, 974, 975, 977, 978, 982, 984, 992, 993, 1004, 1012, 1024], "splitter": [4, 317, 387, 391, 404, 428, 463, 558, 559, 585, 593, 638, 642, 644, 646, 652, 654, 656, 664, 666, 787, 789, 790, 791, 792, 793, 801, 802, 803, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 821, 824, 898, 899, 900, 901, 994, 999, 1026, 1027, 1028, 1029, 1036], "evalu": [4, 5, 6, 10, 11, 24, 32, 36, 49, 55, 68, 71, 72, 98, 109, 110, 117, 118, 120, 121, 123, 143, 153, 165, 171, 174, 178, 187, 200, 205, 216, 226, 242, 252, 253, 256, 257, 259, 262, 264, 265, 266, 268, 270, 271, 273, 275, 277, 288, 292, 306, 308, 313, 317, 332, 345, 356, 363, 367, 369, 376, 380, 387, 389, 399, 401, 408, 409, 410, 438, 440, 479, 482, 483, 484, 487, 500, 511, 527, 542, 552, 553, 554, 558, 559, 582, 585, 593, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 622, 623, 624, 625, 638, 644, 650, 664, 666, 688, 692, 693, 694, 695, 696, 702, 704, 705, 706, 708, 709, 716, 717, 726, 727, 732, 744, 745, 746, 747, 776, 783, 785, 786, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 821, 827, 830, 831, 836, 848, 850, 857, 875, 876, 878, 879, 880, 881, 892, 895, 898, 913, 921, 952, 970, 974, 976, 980, 981, 984, 985, 986, 989, 992, 994, 998, 1002, 1004, 1005, 1008, 1009, 1011, 1014, 1015, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033], "forecast": [4, 259, 398, 978, 998], "realist": [4, 8, 261, 268, 269, 329, 978], "gap": [4, 345, 369, 404, 462, 463, 469, 579, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 808, 898, 899, 900, 901, 974, 975, 1028, 1032, 1034], "between": [4, 5, 8, 9, 11, 12, 20, 37, 38, 39, 40, 42, 43, 53, 60, 61, 66, 85, 98, 100, 104, 109, 110, 113, 116, 120, 123, 142, 150, 155, 156, 158, 165, 167, 168, 169, 170, 177, 182, 184, 189, 193, 194, 198, 199, 200, 202, 203, 206, 216, 219, 227, 232, 234, 237, 252, 255, 258, 259, 260, 261, 262, 264, 265, 266, 268, 275, 281, 285, 286, 288, 289, 301, 306, 308, 314, 323, 332, 340, 345, 346, 347, 354, 356, 360, 361, 369, 374, 376, 383, 385, 386, 387, 388, 391, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 421, 431, 432, 435, 436, 437, 441, 443, 444, 445, 447, 448, 449, 454, 460, 461, 462, 463, 464, 465, 466, 467, 482, 484, 485, 486, 487, 488, 489, 493, 505, 506, 512, 515, 518, 525, 527, 528, 529, 530, 531, 532, 537, 538, 540, 544, 545, 550, 551, 553, 554, 555, 556, 575, 579, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 611, 618, 623, 624, 625, 630, 633, 636, 637, 638, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 667, 669, 670, 672, 675, 679, 681, 683, 685, 686, 687, 692, 694, 695, 696, 698, 700, 701, 705, 706, 707, 708, 710, 714, 715, 716, 719, 720, 721, 724, 726, 727, 733, 742, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 776, 777, 780, 781, 783, 784, 785, 786, 787, 789, 790, 796, 804, 805, 807, 815, 816, 818, 820, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 854, 857, 858, 860, 861, 863, 864, 867, 868, 869, 871, 876, 879, 880, 884, 895, 898, 899, 900, 901, 903, 924, 936, 947, 967, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 992, 993, 994, 995, 999, 1011, 1012, 1020, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "side": [4, 16, 27, 59, 123, 191, 202, 216, 221, 230, 301, 345, 356, 369, 385, 398, 401, 404, 405, 408, 506, 974, 975, 978, 980, 993, 1029], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 70, 100, 109, 110, 115, 116, 117, 119, 122, 123, 124, 125, 126, 136, 143, 167, 168, 182, 193, 194, 198, 201, 206, 216, 228, 234, 245, 246, 253, 254, 257, 259, 264, 266, 269, 288, 295, 297, 302, 303, 308, 315, 317, 323, 332, 345, 347, 354, 369, 374, 381, 386, 387, 390, 391, 398, 400, 405, 407, 408, 428, 433, 434, 463, 464, 470, 471, 488, 522, 528, 530, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 579, 580, 582, 585, 593, 638, 642, 644, 646, 652, 654, 656, 664, 666, 686, 695, 696, 708, 721, 727, 747, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 824, 830, 831, 847, 848, 871, 875, 876, 878, 879, 880, 881, 898, 899, 900, 901, 949, 967, 974, 975, 981, 984, 985, 986, 988, 992, 994, 999, 1004, 1008, 1009, 1011, 1012, 1013, 1015, 1020, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "limit": [4, 8, 17, 37, 42, 57, 66, 82, 110, 117, 118, 124, 130, 162, 168, 169, 170, 177, 198, 199, 215, 231, 266, 303, 307, 314, 347, 356, 361, 375, 376, 379, 385, 387, 388, 398, 400, 403, 405, 409, 437, 454, 459, 550, 551, 552, 553, 623, 641, 649, 650, 670, 673, 674, 679, 768, 808, 838, 840, 841, 842, 863, 864, 888, 892, 893, 894, 895, 896, 946, 967, 974, 975, 977, 978, 985, 986, 988, 999, 1004, 1015, 1028, 1030, 1033, 1034], "cv": [4, 12, 24, 25, 26, 54, 71, 72, 73, 74, 78, 103, 116, 120, 122, 136, 137, 146, 162, 163, 168, 187, 197, 200, 255, 257, 258, 259, 260, 261, 262, 264, 265, 269, 273, 307, 308, 316, 332, 340, 386, 387, 391, 398, 404, 407, 428, 463, 558, 559, 585, 593, 638, 642, 644, 646, 650, 652, 654, 656, 664, 666, 787, 789, 790, 791, 792, 793, 801, 802, 803, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 821, 824, 871, 898, 899, 967, 970, 973, 974, 978, 988, 999, 1008, 1009, 1013, 1022, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1036], "fold": [4, 67, 74, 78, 116, 119, 122, 136, 146, 168, 187, 246, 254, 255, 257, 259, 260, 262, 269, 323, 340, 356, 369, 374, 377, 378, 386, 387, 391, 400, 409, 428, 463, 484, 527, 558, 559, 585, 593, 638, 642, 644, 646, 650, 652, 654, 656, 664, 666, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 821, 824, 871, 892, 895, 967, 974, 978, 988, 993, 1008, 1020, 1022, 1024, 1025, 1026, 1028, 1029, 1031, 1032], "1000": [4, 7, 8, 14, 26, 31, 37, 50, 72, 75, 85, 105, 113, 115, 117, 122, 123, 127, 132, 138, 142, 156, 174, 184, 190, 201, 221, 230, 231, 233, 244, 248, 257, 259, 265, 268, 270, 284, 286, 302, 305, 312, 313, 315, 317, 333, 334, 341, 345, 346, 379, 380, 386, 398, 408, 428, 464, 470, 471, 522, 523, 528, 533, 534, 536, 537, 539, 544, 555, 623, 637, 638, 642, 643, 644, 646, 651, 652, 653, 654, 657, 658, 659, 663, 667, 668, 669, 678, 683, 689, 692, 754, 867, 879, 885, 890, 891, 967, 971, 993, 1008, 1011, 1027, 1029], "datapoint": [4, 42, 52, 56, 154, 157, 181, 232, 233, 254, 259, 277, 338, 410, 437, 493, 548, 549, 550, 551, 555, 556, 557, 602, 898, 899, 900, 901, 971], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 53, 110, 113, 116, 120, 123, 147, 162, 168, 174, 177, 178, 182, 198, 200, 216, 227, 232, 233, 234, 259, 262, 265, 266, 268, 279, 302, 303, 308, 322, 332, 340, 346, 356, 360, 361, 362, 369, 372, 373, 374, 376, 378, 379, 381, 382, 383, 386, 387, 390, 391, 394, 398, 400, 402, 404, 405, 407, 408, 409, 410, 411, 412, 414, 428, 431, 433, 434, 435, 436, 438, 440, 441, 443, 445, 448, 449, 450, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 478, 487, 494, 499, 500, 507, 512, 514, 515, 518, 523, 524, 525, 527, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 576, 577, 579, 580, 581, 582, 584, 585, 588, 593, 598, 599, 601, 602, 611, 618, 619, 620, 622, 623, 624, 626, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 675, 678, 680, 681, 682, 683, 684, 685, 686, 687, 692, 700, 717, 718, 756, 761, 764, 768, 769, 770, 771, 772, 775, 778, 779, 780, 787, 788, 789, 790, 791, 794, 795, 796, 797, 801, 804, 805, 806, 807, 812, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 847, 848, 850, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 869, 870, 871, 873, 877, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 910, 914, 916, 919, 927, 939, 944, 947, 949, 952, 953, 954, 955, 956, 957, 958, 959, 967, 968, 972, 973, 974, 975, 978, 979, 981, 983, 984, 985, 988, 991, 992, 993, 994, 999, 1001, 1002, 1009, 1013, 1017, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "enough": [4, 37, 44, 62, 116, 119, 150, 162, 169, 170, 187, 198, 232, 235, 305, 345, 347, 356, 372, 374, 378, 388, 398, 399, 400, 402, 404, 407, 558, 559, 580, 787, 790, 791, 793, 801, 814, 927, 967, 972, 975, 977, 984, 988, 993, 998, 1002, 1026, 1036], "quantifi": [4, 37, 49, 78, 155, 216, 266, 376, 387, 395, 399, 564, 853, 973, 986, 988, 1015], "repres": [4, 8, 10, 12, 14, 20, 26, 32, 44, 48, 49, 50, 53, 91, 95, 97, 104, 105, 117, 118, 126, 168, 177, 185, 190, 200, 202, 203, 207, 221, 223, 232, 237, 247, 253, 256, 259, 262, 266, 284, 303, 345, 347, 354, 362, 366, 369, 371, 376, 385, 386, 387, 388, 394, 398, 400, 404, 405, 406, 407, 408, 409, 429, 433, 437, 443, 454, 461, 462, 463, 464, 465, 466, 467, 479, 481, 482, 483, 485, 487, 489, 491, 492, 493, 495, 496, 501, 525, 527, 529, 531, 532, 538, 546, 554, 572, 579, 582, 620, 623, 625, 631, 667, 669, 688, 692, 720, 733, 779, 787, 789, 800, 801, 804, 807, 813, 815, 816, 819, 820, 826, 832, 833, 834, 836, 837, 838, 840, 841, 842, 847, 848, 857, 863, 864, 887, 910, 911, 931, 968, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 986, 988, 989, 991, 992, 994, 1004, 1009, 1010, 1012, 1026, 1028, 1031, 1032, 1035], "bit": [4, 48, 53, 78, 98, 196, 200, 301, 332, 346, 356, 360, 369, 372, 407, 408, 573, 580, 649, 820, 910, 911, 975, 979, 997, 1006, 1013, 1020, 1023, 1026, 1028, 1029, 1032, 1033, 1034], "less": [4, 5, 8, 52, 53, 60, 92, 95, 98, 106, 110, 117, 123, 124, 150, 157, 168, 180, 182, 198, 200, 202, 233, 245, 247, 259, 260, 268, 270, 273, 302, 305, 306, 307, 313, 315, 345, 346, 356, 360, 362, 369, 374, 376, 385, 387, 400, 404, 405, 407, 408, 412, 430, 432, 434, 436, 439, 441, 443, 448, 451, 453, 454, 473, 474, 475, 487, 506, 522, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 581, 587, 610, 618, 625, 638, 652, 667, 669, 683, 692, 712, 713, 714, 715, 726, 742, 754, 769, 770, 775, 783, 785, 786, 789, 790, 791, 797, 814, 825, 826, 827, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 853, 865, 867, 868, 870, 873, 879, 880, 890, 891, 898, 899, 900, 901, 916, 930, 967, 968, 970, 971, 972, 975, 977, 978, 981, 983, 988, 992, 993, 994, 998, 1011, 1013, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1030, 1034, 1035], "half": [4, 24, 98, 232, 236, 257, 259, 271, 369, 370, 405, 454, 513, 553, 584, 588, 593, 760, 849, 857, 978, 981, 994], "contigu": [4, 21, 376, 385, 397, 404, 408, 434, 438, 440, 450, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 771, 806, 830, 831, 890, 892, 893, 894, 895, 896, 993, 1023, 1030, 1034], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 71, 72, 73, 74, 75, 78, 86, 100, 103, 109, 110, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 129, 130, 136, 137, 143, 144, 146, 150, 162, 163, 165, 167, 168, 170, 171, 174, 182, 193, 198, 200, 205, 206, 213, 214, 216, 228, 233, 239, 240, 241, 246, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 281, 283, 287, 288, 295, 297, 298, 303, 305, 306, 307, 308, 311, 312, 313, 316, 323, 324, 332, 335, 340, 350, 354, 356, 363, 374, 376, 379, 386, 387, 391, 401, 404, 407, 428, 429, 549, 551, 558, 559, 570, 650, 688, 689, 691, 693, 732, 818, 821, 839, 847, 848, 850, 898, 899, 900, 901, 967, 968, 973, 978, 980, 981, 986, 988, 993, 999, 1008, 1009, 1013, 1017, 1024, 1026, 1027], "timeseriessplit": [4, 182, 254, 404, 1026, 1027, 1032], "ts_cv": 4, "n_split": [4, 116, 122, 162, 163, 168, 246, 254, 259, 261, 264, 269, 323, 332, 340, 356, 404, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 802, 803, 804, 805, 806, 807, 808, 813, 1008, 1026, 1028], "5": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 70, 71, 73, 74, 75, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 109, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 136, 139, 142, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 190, 192, 193, 195, 196, 198, 199, 200, 201, 204, 206, 209, 210, 211, 212, 213, 214, 216, 220, 221, 222, 224, 227, 230, 231, 232, 233, 235, 236, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 270, 271, 272, 273, 274, 277, 279, 281, 283, 284, 285, 286, 288, 289, 291, 292, 295, 296, 297, 298, 301, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 323, 324, 325, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 369, 371, 372, 374, 376, 379, 380, 385, 386, 387, 390, 392, 393, 398, 400, 401, 404, 405, 407, 408, 409, 410, 411, 412, 428, 429, 430, 431, 433, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 453, 455, 457, 460, 463, 469, 473, 474, 475, 476, 481, 484, 485, 495, 507, 508, 512, 514, 515, 517, 519, 522, 524, 525, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 543, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 573, 583, 584, 585, 588, 593, 601, 604, 605, 606, 607, 610, 611, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 629, 632, 634, 635, 636, 637, 638, 642, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 663, 667, 668, 669, 671, 672, 675, 679, 680, 682, 683, 686, 687, 694, 696, 698, 700, 703, 704, 712, 713, 714, 716, 717, 718, 720, 725, 728, 729, 731, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 759, 771, 772, 774, 775, 777, 778, 779, 782, 784, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 847, 848, 849, 850, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 869, 870, 871, 878, 879, 884, 890, 891, 892, 893, 894, 895, 896, 898, 900, 916, 925, 926, 927, 929, 931, 932, 941, 942, 946, 949, 967, 968, 970, 973, 974, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 990, 992, 993, 996, 1000, 1004, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1021, 1022, 1023, 1025, 1027, 1028, 1030, 1034, 1035, 1036], "48": [4, 42, 45, 102, 155, 172, 241, 307, 345, 371, 380, 400, 501, 588, 736, 814, 825, 967, 980, 988, 1016], "max_train_s": [4, 404, 808, 1027], "10000": [4, 11, 30, 43, 63, 72, 73, 124, 136, 184, 191, 198, 206, 214, 231, 233, 272, 313, 329, 356, 362, 407, 408, 552, 553, 635, 670, 867, 896, 990, 1009, 1013], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 71, 109, 115, 121, 122, 124, 125, 129, 167, 174, 182, 193, 198, 205, 206, 213, 214, 256, 257, 261, 266, 268, 272, 277, 287, 288, 295, 297, 298, 303, 305, 306, 313, 332, 340, 356, 379, 404, 689, 789, 804, 807, 808, 816, 818, 839, 968, 980, 981, 1008, 1009, 1020, 1021, 1026, 1027, 1032], "manual": [4, 46, 55, 168, 169, 171, 199, 209, 261, 279, 323, 330, 345, 347, 360, 361, 369, 374, 378, 379, 386, 390, 400, 404, 405, 406, 428, 440, 558, 840, 863, 869, 967, 972, 973, 974, 977, 978, 981, 988, 999, 1004, 1005, 1013, 1028, 1030, 1036], "inspect": [4, 31, 56, 61, 112, 117, 124, 126, 127, 131, 144, 150, 155, 156, 168, 169, 170, 171, 181, 190, 207, 238, 259, 262, 271, 282, 287, 290, 306, 311, 312, 313, 314, 316, 328, 329, 330, 333, 334, 345, 351, 361, 363, 376, 387, 400, 401, 407, 408, 455, 544, 545, 548, 549, 550, 551, 555, 556, 557, 819, 850, 851, 898, 899, 900, 901, 966, 978, 979, 982, 985, 986, 993, 998, 1013, 1015, 1023], "variou": [4, 12, 36, 37, 55, 58, 60, 61, 68, 81, 85, 98, 165, 168, 176, 208, 217, 218, 219, 220, 225, 231, 305, 312, 345, 347, 354, 356, 360, 368, 369, 370, 371, 374, 376, 379, 386, 388, 398, 399, 400, 402, 428, 432, 463, 493, 505, 506, 516, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 585, 593, 638, 642, 644, 646, 649, 652, 654, 656, 657, 659, 664, 666, 667, 682, 683, 787, 790, 791, 793, 801, 809, 810, 811, 812, 813, 814, 815, 816, 817, 850, 890, 891, 967, 968, 975, 978, 981, 985, 988, 992, 994, 998, 1002, 1012, 1013, 1020, 1023, 1024], "check": [4, 5, 8, 17, 46, 53, 56, 99, 116, 130, 150, 165, 167, 169, 170, 184, 186, 187, 198, 220, 234, 245, 252, 268, 275, 314, 322, 340, 354, 360, 361, 372, 373, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 387, 390, 391, 394, 401, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 493, 499, 500, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 678, 679, 680, 681, 682, 683, 684, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 910, 911, 912, 921, 922, 933, 939, 940, 962, 963, 964, 966, 973, 974, 975, 978, 993, 994, 999, 1002, 1015, 1020, 1021, 1023, 1027, 1031, 1032, 1033, 1034, 1035], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 16, 17, 19, 20, 25, 32, 40, 44, 49, 62, 70, 105, 106, 114, 116, 122, 130, 137, 171, 202, 238, 254, 257, 259, 260, 262, 263, 268, 272, 288, 303, 307, 311, 312, 313, 314, 315, 316, 317, 324, 335, 346, 347, 362, 368, 369, 372, 373, 374, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 390, 398, 399, 400, 401, 404, 406, 407, 408, 423, 425, 428, 441, 447, 448, 455, 456, 457, 462, 463, 469, 473, 474, 475, 479, 480, 481, 482, 483, 487, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 514, 523, 541, 542, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 580, 582, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 623, 625, 626, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 661, 663, 664, 669, 670, 672, 675, 677, 683, 687, 688, 690, 701, 703, 704, 707, 709, 715, 723, 736, 744, 768, 771, 773, 778, 782, 785, 786, 787, 790, 791, 793, 798, 799, 801, 809, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 854, 858, 861, 863, 864, 869, 871, 887, 891, 893, 896, 898, 899, 900, 901, 904, 906, 910, 911, 912, 916, 918, 919, 920, 922, 930, 931, 933, 949, 952, 962, 967, 968, 974, 978, 980, 981, 982, 985, 986, 989, 994, 996, 998, 999, 1002, 1004, 1008, 1010, 1013, 1016, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "train_0": 4, "test_0": 4, "iloc": [4, 130, 168, 169, 216, 259], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 19, 24, 26, 42, 45, 54, 55, 80, 85, 91, 101, 103, 105, 114, 123, 130, 134, 143, 144, 151, 162, 168, 178, 188, 202, 217, 224, 227, 246, 259, 292, 295, 298, 301, 303, 316, 320, 321, 345, 348, 353, 356, 360, 380, 404, 407, 408, 435, 468, 492, 495, 561, 588, 669, 724, 784, 804, 816, 842, 860, 865, 867, 868, 871, 879, 880, 882, 883, 974, 978, 979, 981, 988, 1009, 1020, 1022, 1028, 1031], "760": [4, 236, 242], "68": [4, 159, 189, 298, 320, 400, 526, 532, 581, 1020], "27": [4, 6, 19, 31, 47, 54, 320, 321, 341, 371, 400, 408, 410, 515, 704, 778, 779, 871, 891, 978, 988, 1012, 1020, 1022], "9993": [4, 644, 646, 1028], "12380": 4, "32": [4, 5, 51, 167, 170, 236, 311, 315, 321, 368, 372, 379, 387, 397, 407, 408, 436, 555, 556, 573, 580, 625, 667, 869, 871, 910, 911, 943, 986, 988, 1012, 1020, 1023, 1026, 1028, 1029, 1032, 1033, 1034], "000": [4, 5, 15, 16, 17, 21, 25, 27, 42, 74, 151, 170, 174, 231, 257, 259, 261, 279, 293, 306, 314, 343, 345, 346, 356, 369, 380, 407, 408, 481, 552, 553, 635, 668, 992, 1013, 1031], "77": [4, 6, 8, 44, 174, 268, 321, 368, 371, 525, 698], "0028": 4, "12381": 4, "72": [4, 6, 7, 116, 153, 379, 814], "9995": 4, "12382": 4, "240": [4, 44, 345, 986, 1020], "82": [4, 30, 53, 58, 92, 144, 201, 290, 298, 320, 778, 787, 801, 978, 981, 1009, 1020], "9980": [4, 1028], "12383": 4, "13374": 4, "34": [4, 92, 123, 150, 284, 298, 320, 321, 371, 404, 410, 511, 561, 588, 640, 658, 707, 754, 1009, 1020], "44": [4, 85, 155, 168, 169, 182, 283, 410, 771, 871, 891, 894, 978, 985, 1020], "40": [4, 14, 54, 66, 78, 90, 95, 101, 126, 132, 150, 182, 189, 190, 192, 215, 221, 223, 235, 248, 260, 285, 291, 297, 303, 320, 321, 330, 331, 333, 335, 337, 339, 354, 361, 369, 404, 437, 486, 508, 509, 830, 831, 835, 847, 848, 967, 979, 988, 1020, 1021], "150": [4, 6, 90, 92, 114, 123, 136, 220, 224, 227, 272, 371, 404, 409, 495, 593, 811, 812, 813, 978, 1008, 1009, 1010], "53": [4, 53, 68, 177, 400, 407, 526, 532, 780, 781], "15": [4, 6, 7, 10, 12, 13, 14, 15, 30, 31, 34, 40, 44, 53, 54, 61, 62, 66, 73, 74, 80, 82, 92, 105, 109, 114, 116, 119, 120, 123, 134, 142, 144, 146, 150, 154, 162, 167, 168, 169, 187, 195, 200, 212, 216, 221, 224, 227, 246, 247, 254, 262, 264, 267, 270, 271, 273, 282, 283, 287, 295, 296, 301, 303, 305, 317, 321, 324, 326, 330, 332, 335, 339, 342, 351, 368, 369, 374, 386, 404, 407, 408, 431, 445, 481, 488, 522, 528, 546, 547, 589, 635, 643, 652, 654, 659, 667, 669, 683, 731, 805, 819, 842, 871, 967, 973, 974, 975, 978, 981, 982, 988, 993, 996, 1004, 1009, 1016, 1018, 1022, 1032, 1034, 1035], "0013": [4, 345], "13375": 4, "39": [4, 237, 241, 369, 371, 372, 378, 400, 408, 486, 899], "49": [4, 42, 92, 202, 368, 369, 371, 379, 400, 441, 448, 704, 716, 746, 754, 785, 787, 871, 978, 988, 1023], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 97, 156, 168, 216, 335, 371, 380, 407, 408, 546, 547, 561, 725, 978, 1013, 1020], "08": [4, 15, 44, 50, 98, 107, 134, 164, 168, 169, 182, 217, 242, 251, 298, 309, 371, 522, 534, 536, 554, 632, 649, 787, 847, 848, 869, 984], "910": 4, "42": [4, 5, 6, 20, 24, 25, 26, 27, 31, 46, 56, 78, 92, 97, 103, 107, 110, 117, 118, 120, 123, 124, 126, 130, 143, 144, 163, 168, 170, 171, 174, 177, 187, 190, 192, 193, 200, 204, 205, 206, 212, 213, 215, 220, 227, 233, 234, 237, 240, 258, 260, 263, 279, 285, 286, 287, 295, 302, 303, 304, 306, 308, 311, 313, 315, 323, 330, 332, 345, 346, 356, 361, 376, 379, 380, 387, 391, 400, 404, 407, 408, 411, 428, 435, 479, 483, 515, 522, 528, 535, 548, 549, 556, 557, 558, 559, 561, 668, 785, 789, 814, 816, 830, 831, 835, 839, 842, 882, 883, 885, 886, 887, 900, 901, 981, 988, 1009, 1013, 1016, 1017, 1020], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 55, 71, 92, 112, 132, 168, 169, 177, 186, 227, 306, 320, 321, 535, 639, 640, 647, 693, 697, 698, 717, 731, 746, 772, 779, 823, 967, 974, 978, 984, 985, 988, 1009, 1013, 1020, 1022], "26": [4, 46, 54, 80, 97, 98, 155, 168, 236, 261, 272, 275, 321, 380, 561, 639, 719, 773, 866, 878, 927, 978, 988, 1020, 1023, 1024, 1032], "47": [4, 46, 85, 159, 190, 194, 242, 369, 484, 485, 526, 532], "16": [4, 5, 19, 27, 43, 50, 51, 54, 66, 74, 80, 95, 98, 142, 169, 191, 197, 198, 199, 216, 219, 220, 221, 224, 225, 232, 236, 261, 262, 263, 283, 298, 299, 301, 305, 311, 346, 352, 369, 371, 372, 380, 386, 390, 392, 393, 404, 405, 408, 433, 462, 463, 469, 488, 493, 525, 526, 561, 580, 586, 587, 598, 599, 630, 641, 642, 645, 646, 647, 648, 673, 674, 800, 805, 816, 865, 891, 899, 967, 974, 978, 988, 993, 996, 1004, 1013, 1016, 1018, 1020, 1021, 1025, 1026, 1028, 1029], "9979": 4, "2331": 4, "31": [4, 70, 79, 134, 213, 216, 260, 275, 284, 314, 320, 321, 397, 408, 491, 552, 553, 588, 640, 662, 670, 943, 979, 1020], "060": [4, 251, 741], "0032": 4, "2332": 4, "2333": 4, "78": [4, 53, 174, 216, 298, 303, 321, 484, 485, 644, 646, 655, 656, 787, 793, 814, 978, 999, 1009], "275": [4, 97, 107, 321, 1023], "2334": 4, "96": [4, 32, 48, 62, 157, 227, 257, 298, 303, 306, 307, 320, 321, 371, 404, 967, 973, 978, 988, 1020], "515": 4, "64": [4, 8, 32, 46, 48, 53, 58, 89, 95, 155, 168, 220, 231, 232, 236, 257, 268, 283, 288, 360, 361, 371, 372, 380, 405, 486, 493, 590, 591, 637, 649, 679, 680, 681, 682, 891, 981, 1010, 1016, 1020, 1022, 1028, 1029, 1032, 1033, 1034], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1029], "12329": 4, "46": [4, 53, 198, 356, 380, 584, 585, 707, 894, 899, 988, 1016], "12330": [4, 1028], "52": [4, 76, 116, 134, 155, 198, 624, 785, 1020], "last": [4, 20, 44, 58, 89, 121, 123, 168, 177, 198, 199, 206, 211, 227, 250, 262, 270, 271, 306, 313, 315, 323, 350, 360, 369, 372, 376, 378, 379, 382, 387, 390, 400, 401, 408, 412, 429, 433, 438, 450, 455, 459, 506, 524, 550, 551, 552, 553, 574, 575, 578, 584, 585, 588, 601, 673, 674, 676, 677, 688, 689, 691, 692, 693, 698, 772, 785, 786, 790, 791, 806, 830, 831, 835, 850, 851, 855, 863, 869, 905, 930, 953, 967, 973, 974, 975, 977, 979, 982, 992, 999, 1004, 1011, 1020, 1027, 1028, 1029, 1034, 1036], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 32, 54, 97, 119, 197, 235, 272, 298, 303, 320, 321, 407, 654, 778, 973, 978, 979, 988, 1013, 1020], "665": 4, "16380": 4, "71": [4, 202, 216, 324, 371, 501, 720, 978, 1011, 1016, 1022], "16381": 4, "76": [4, 8, 174, 198, 298, 321, 345, 356, 371, 380, 771, 850, 1011], "16382": 4, "16383": 4, "18": [4, 7, 8, 11, 19, 40, 44, 49, 53, 60, 62, 74, 92, 103, 123, 159, 168, 174, 175, 209, 223, 225, 227, 232, 259, 305, 307, 321, 345, 346, 347, 372, 374, 380, 390, 392, 393, 401, 404, 405, 408, 438, 450, 483, 491, 492, 493, 495, 496, 501, 526, 527, 529, 531, 532, 548, 549, 550, 551, 554, 555, 556, 557, 560, 562, 563, 564, 565, 566, 568, 569, 580, 585, 590, 591, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 637, 640, 649, 650, 662, 705, 709, 721, 724, 725, 731, 733, 785, 786, 808, 823, 846, 847, 848, 854, 860, 868, 869, 880, 890, 891, 898, 899, 900, 901, 902, 926, 927, 967, 976, 978, 988, 996, 1016, 1018, 1020, 1021, 1024, 1025, 1027, 1028, 1030, 1031], "940": 4, "6331": 4, "28": [4, 66, 98, 107, 123, 168, 214, 224, 267, 268, 297, 320, 321, 371, 380, 400, 404, 441, 448, 988, 1009, 1020, 1023, 1026], "790": [4, 70], "89": [4, 8, 32, 155, 189, 298, 320, 321, 973, 978, 988, 1013, 1020, 1023, 1031], "6332": 4, "6333": 4, "88": [4, 6, 8, 32, 189, 202, 258, 298, 320, 321, 350, 369, 371, 374, 402, 464, 850, 1009, 1020], "820": [4, 830, 831], "79": [4, 6, 30, 32, 80, 81, 98, 174, 298, 321, 371, 379, 402, 465, 515, 588, 828, 1020, 1022], "6334": 4, "6335": 4, "70": [4, 6, 11, 66, 71, 73, 110, 169, 244, 259, 321, 369, 371, 404, 484, 485, 704, 716, 746, 787, 801, 967, 988, 1009, 1016], "33": [4, 15, 80, 198, 316, 321, 369, 371, 372, 378, 379, 380, 390, 392, 393, 400, 408, 523, 639, 703, 704, 719, 720, 728, 733, 773, 774, 777, 793, 814, 816, 818, 901, 974, 978, 988, 1009, 1020, 1028], "335": 4, "74": [4, 214, 320, 321, 371, 581, 787, 801, 869], "16326": [4, 1032], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 155, 199, 369, 378, 382], "tree": [4, 7, 26, 27, 31, 41, 44, 55, 62, 108, 109, 112, 113, 114, 116, 120, 121, 122, 123, 124, 126, 130, 131, 134, 158, 162, 169, 171, 220, 234, 236, 238, 263, 279, 284, 292, 301, 302, 306, 313, 355, 356, 360, 363, 369, 371, 380, 386, 387, 389, 398, 400, 406, 411, 428, 432, 433, 434, 435, 436, 437, 439, 441, 448, 454, 486, 491, 495, 505, 506, 510, 535, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 622, 623, 624, 625, 649, 679, 683, 693, 694, 778, 793, 814, 816, 825, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 851, 854, 863, 922, 968, 975, 978, 979, 984, 985, 998, 999, 1000, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "often": [4, 19, 24, 25, 33, 70, 74, 116, 128, 154, 162, 168, 169, 199, 216, 220, 246, 261, 264, 301, 306, 332, 342, 345, 346, 347, 360, 361, 368, 369, 371, 374, 376, 379, 382, 385, 386, 387, 389, 394, 398, 400, 401, 402, 404, 405, 407, 408, 410, 412, 459, 512, 515, 524, 527, 623, 637, 638, 643, 644, 651, 652, 653, 654, 663, 665, 678, 718, 860, 868, 876, 888, 967, 968, 970, 973, 974, 975, 976, 977, 978, 980, 981, 983, 984, 985, 988, 991, 992, 994, 1004, 1006, 1011, 1012, 1013, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "flexibl": [4, 25, 120, 162, 198, 302, 329, 347, 376, 381, 404, 410, 665, 890, 891, 967, 972, 974, 978, 982, 988, 999, 1002, 1029, 1033], "effici": [4, 5, 12, 13, 42, 46, 53, 55, 95, 116, 128, 174, 187, 191, 200, 206, 284, 345, 360, 366, 368, 374, 376, 377, 379, 380, 385, 387, 394, 397, 399, 400, 405, 406, 407, 410, 412, 433, 434, 437, 438, 440, 441, 443, 445, 448, 450, 452, 453, 487, 524, 525, 526, 529, 531, 532, 535, 554, 557, 565, 579, 582, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 623, 624, 625, 629, 631, 646, 649, 650, 655, 657, 659, 664, 666, 667, 668, 669, 670, 676, 677, 679, 716, 746, 753, 769, 770, 785, 786, 787, 801, 819, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 855, 867, 879, 883, 890, 899, 901, 927, 946, 967, 970, 972, 974, 975, 977, 978, 979, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 998, 1002, 1004, 1008, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "heteorogen": 4, "tabular": [4, 169, 376, 407, 986], "mix": [4, 62, 69, 76, 96, 97, 165, 198, 301, 368, 376, 385, 387, 401, 405, 412, 455, 457, 458, 487, 524, 529, 531, 538, 591, 595, 621, 637, 638, 643, 649, 650, 651, 652, 653, 654, 659, 667, 669, 672, 787, 801, 816, 850, 863, 864, 870, 871, 942, 949, 952, 974, 983, 1012, 1032, 1034, 1035], "long": [4, 11, 12, 44, 62, 123, 155, 163, 168, 170, 198, 234, 235, 262, 292, 301, 312, 345, 346, 356, 361, 374, 382, 385, 387, 388, 394, 399, 400, 410, 444, 489, 529, 667, 668, 669, 790, 791, 825, 826, 827, 828, 829, 847, 848, 858, 978, 984, 988, 989, 991, 992, 997, 1001, 1022, 1026, 1032, 1034], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 56, 57, 58, 59, 60, 65, 80, 81, 82, 86, 90, 92, 95, 99, 100, 104, 105, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 126, 131, 132, 133, 144, 146, 150, 155, 156, 157, 159, 162, 165, 168, 169, 174, 176, 182, 184, 186, 187, 198, 200, 202, 206, 212, 214, 215, 216, 217, 219, 227, 231, 232, 235, 237, 244, 245, 247, 248, 249, 250, 252, 254, 259, 261, 262, 263, 265, 267, 271, 273, 275, 277, 279, 282, 283, 284, 285, 286, 288, 289, 290, 301, 303, 304, 305, 306, 308, 311, 313, 314, 316, 320, 322, 323, 324, 325, 327, 328, 330, 332, 334, 340, 343, 345, 346, 351, 354, 360, 363, 367, 369, 370, 373, 374, 376, 377, 385, 386, 391, 397, 398, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 417, 419, 422, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 445, 447, 448, 449, 452, 453, 454, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 575, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 601, 602, 618, 619, 620, 621, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 678, 679, 682, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 724, 725, 726, 727, 728, 729, 730, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 750, 751, 753, 754, 758, 759, 760, 761, 763, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 910, 911, 915, 916, 927, 931, 947, 949, 952, 953, 956, 959, 967, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 998, 999, 1001, 1004, 1010, 1011, 1012, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "larg": [4, 12, 13, 21, 26, 37, 39, 43, 47, 49, 50, 52, 53, 55, 73, 75, 95, 99, 113, 115, 116, 123, 126, 128, 143, 155, 156, 170, 177, 178, 187, 189, 198, 200, 202, 203, 204, 216, 232, 256, 262, 265, 268, 281, 288, 297, 301, 303, 314, 315, 332, 337, 346, 347, 360, 369, 374, 380, 383, 385, 386, 387, 390, 394, 399, 402, 404, 405, 406, 407, 409, 410, 411, 413, 433, 435, 437, 438, 441, 442, 443, 444, 449, 453, 464, 466, 490, 505, 525, 527, 529, 531, 535, 538, 540, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 573, 579, 580, 582, 625, 632, 634, 641, 645, 648, 649, 650, 655, 662, 663, 665, 668, 670, 676, 678, 680, 682, 683, 684, 686, 736, 769, 770, 787, 795, 797, 801, 805, 815, 825, 826, 827, 828, 829, 830, 831, 836, 847, 848, 855, 859, 860, 868, 870, 882, 883, 890, 891, 895, 896, 898, 899, 900, 901, 926, 927, 967, 970, 972, 974, 975, 977, 980, 981, 982, 986, 988, 991, 992, 993, 994, 998, 999, 1002, 1009, 1011, 1012, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "here": [4, 8, 9, 12, 13, 17, 24, 57, 58, 66, 78, 82, 89, 90, 92, 97, 98, 100, 102, 103, 104, 106, 110, 113, 116, 120, 124, 130, 144, 147, 150, 158, 159, 168, 169, 170, 174, 177, 182, 187, 191, 198, 202, 204, 213, 214, 216, 219, 221, 227, 232, 234, 238, 245, 246, 247, 253, 256, 257, 259, 261, 262, 264, 268, 269, 271, 279, 281, 288, 296, 297, 298, 303, 306, 313, 315, 320, 322, 332, 340, 342, 347, 350, 356, 360, 361, 362, 368, 369, 372, 373, 374, 375, 376, 378, 379, 380, 382, 385, 386, 391, 394, 396, 397, 400, 401, 403, 404, 405, 406, 407, 408, 411, 413, 428, 431, 432, 433, 434, 435, 436, 438, 440, 443, 455, 463, 466, 527, 529, 530, 534, 535, 558, 559, 560, 561, 572, 573, 575, 579, 582, 585, 593, 619, 621, 638, 642, 644, 646, 652, 654, 656, 664, 666, 680, 682, 686, 703, 716, 736, 746, 782, 787, 790, 791, 793, 801, 809, 810, 811, 812, 813, 814, 815, 817, 826, 830, 831, 854, 862, 865, 868, 882, 883, 893, 944, 967, 970, 974, 975, 976, 977, 978, 981, 984, 988, 990, 991, 992, 993, 998, 999, 1001, 1002, 1004, 1005, 1011, 1020, 1028, 1033], "ordin": [4, 53, 71, 130, 304, 307, 308, 313, 316, 368, 387, 407, 487, 558, 700, 855, 858, 863, 864, 871, 974, 975, 988, 999, 1028, 1034], "encod": [4, 8, 11, 48, 55, 71, 95, 115, 130, 165, 168, 169, 170, 197, 198, 268, 300, 302, 303, 304, 309, 313, 315, 316, 332, 345, 347, 366, 368, 370, 376, 379, 385, 387, 401, 404, 405, 407, 408, 410, 455, 478, 487, 494, 517, 522, 528, 530, 531, 533, 535, 536, 537, 539, 542, 553, 557, 558, 560, 572, 579, 580, 582, 621, 639, 649, 650, 660, 663, 671, 725, 789, 794, 796, 813, 816, 850, 851, 853, 855, 857, 858, 861, 863, 864, 871, 874, 888, 967, 968, 974, 975, 978, 980, 981, 983, 992, 998, 999, 1015, 1021, 1022, 1028, 1032, 1034, 1035, 1036], "know": [4, 53, 66, 120, 144, 147, 150, 159, 168, 216, 234, 235, 259, 277, 315, 320, 340, 346, 360, 374, 385, 391, 394, 400, 403, 404, 405, 408, 491, 495, 501, 637, 643, 649, 650, 716, 746, 787, 801, 875, 876, 878, 879, 880, 881, 898, 899, 900, 901, 967, 977, 978, 979, 981, 990, 1026, 1027, 1030, 1032], "treat": [4, 6, 71, 120, 130, 162, 168, 198, 268, 307, 313, 323, 356, 374, 385, 387, 397, 407, 408, 433, 552, 553, 579, 580, 582, 598, 599, 623, 629, 636, 662, 665, 744, 778, 859, 860, 866, 867, 870, 871, 875, 878, 879, 881, 968, 970, 974, 978, 979, 985, 988, 992, 994, 1009, 1024, 1032, 1036], "dedic": [4, 257, 342, 372, 378, 380, 385, 388, 396, 400, 575, 663, 665, 678, 967, 998, 1004, 1028], "rule": [4, 116, 174, 351, 354, 356, 360, 371, 374, 375, 376, 385, 387, 388, 395, 398, 399, 400, 404, 405, 407, 409, 527, 540, 541, 542, 543, 544, 552, 553, 560, 561, 593, 625, 636, 649, 650, 657, 659, 667, 668, 669, 697, 698, 787, 790, 791, 793, 801, 809, 813, 815, 839, 890, 903, 967, 972, 980, 981, 992, 994, 999, 1004, 1011, 1015, 1022, 1025, 1032], "pass": [4, 7, 8, 20, 21, 38, 116, 120, 127, 144, 179, 182, 199, 228, 230, 231, 234, 238, 240, 249, 257, 260, 308, 311, 314, 337, 347, 356, 360, 361, 362, 369, 374, 375, 376, 379, 380, 381, 382, 383, 385, 387, 391, 394, 396, 400, 401, 404, 405, 407, 408, 410, 411, 412, 418, 422, 428, 429, 431, 433, 434, 435, 437, 438, 439, 440, 441, 443, 445, 448, 450, 451, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 479, 482, 483, 486, 487, 488, 494, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 572, 573, 579, 580, 581, 582, 584, 585, 588, 598, 599, 601, 602, 608, 611, 617, 622, 623, 625, 626, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 722, 723, 732, 753, 764, 768, 769, 770, 771, 778, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 799, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 867, 869, 870, 871, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 910, 911, 917, 921, 922, 926, 927, 929, 931, 933, 938, 939, 946, 948, 949, 952, 967, 968, 974, 976, 978, 979, 980, 981, 982, 985, 988, 991, 992, 993, 999, 1002, 1004, 1008, 1017, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "explicitli": [4, 46, 53, 117, 150, 157, 162, 163, 199, 230, 234, 304, 308, 311, 347, 356, 361, 368, 370, 374, 375, 376, 378, 385, 387, 391, 396, 404, 408, 410, 526, 540, 541, 570, 571, 588, 618, 639, 649, 650, 660, 671, 700, 717, 772, 778, 779, 790, 791, 821, 824, 830, 831, 856, 880, 881, 938, 946, 967, 968, 970, 972, 974, 975, 978, 980, 981, 988, 1002, 1013, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1034], "logic": [4, 361, 375, 376, 381, 396, 407, 994, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "integ": [4, 17, 48, 53, 71, 168, 198, 216, 312, 313, 356, 360, 368, 369, 371, 376, 379, 383, 386, 387, 400, 401, 404, 405, 407, 408, 425, 428, 453, 455, 458, 463, 478, 487, 489, 492, 493, 494, 496, 499, 500, 503, 505, 506, 510, 513, 541, 550, 551, 552, 553, 554, 558, 559, 563, 573, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 623, 624, 635, 642, 646, 650, 656, 664, 666, 667, 705, 725, 787, 789, 790, 791, 792, 794, 796, 801, 802, 803, 804, 806, 807, 810, 813, 821, 824, 826, 829, 830, 831, 855, 863, 864, 869, 870, 871, 874, 884, 886, 898, 899, 900, 901, 906, 941, 942, 943, 947, 968, 974, 979, 981, 988, 991, 993, 994, 1004, 1011, 1013, 1020, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1037], "lexicograph": [4, 387, 558, 778, 782, 832, 840], "ad": [4, 13, 20, 75, 103, 105, 109, 110, 116, 121, 143, 150, 156, 157, 177, 182, 200, 202, 223, 233, 234, 259, 260, 261, 301, 312, 313, 314, 315, 316, 317, 324, 346, 373, 374, 378, 380, 385, 387, 388, 405, 407, 408, 409, 410, 432, 433, 434, 436, 438, 440, 443, 450, 453, 455, 505, 513, 523, 526, 529, 531, 538, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 573, 580, 581, 582, 584, 593, 598, 599, 602, 604, 618, 620, 632, 633, 639, 641, 645, 649, 650, 660, 667, 669, 671, 686, 704, 705, 719, 720, 765, 767, 773, 774, 777, 779, 785, 786, 787, 801, 811, 818, 828, 847, 848, 849, 863, 869, 872, 887, 890, 891, 898, 899, 900, 901, 917, 967, 971, 973, 974, 975, 979, 981, 982, 984, 999, 1002, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "benefit": [4, 56, 74, 75, 110, 168, 212, 223, 230, 232, 281, 315, 360, 374, 383, 387, 398, 400, 439, 452, 459, 499, 558, 559, 649, 650, 657, 659, 667, 668, 669, 888, 890, 967, 973, 981, 986, 988, 999, 1002, 1020, 1023, 1024, 1025, 1032, 1033, 1034, 1035], "prevent": [4, 55, 123, 144, 167, 199, 202, 301, 307, 308, 332, 345, 350, 356, 374, 376, 378, 385, 386, 400, 405, 408, 433, 440, 479, 480, 581, 582, 602, 718, 775, 847, 848, 875, 876, 878, 879, 880, 881, 978, 980, 983, 984, 988, 994, 1011, 1022, 1023, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "ani": [4, 8, 9, 13, 19, 30, 44, 46, 55, 57, 67, 127, 142, 147, 155, 156, 157, 167, 168, 169, 170, 187, 198, 202, 216, 227, 230, 231, 234, 245, 249, 250, 259, 260, 262, 265, 268, 292, 301, 302, 305, 308, 311, 313, 314, 316, 332, 347, 356, 360, 361, 362, 368, 369, 371, 372, 374, 376, 378, 379, 380, 382, 386, 387, 388, 390, 391, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 425, 431, 437, 439, 440, 441, 443, 445, 447, 448, 452, 455, 458, 479, 480, 499, 500, 514, 525, 528, 530, 537, 542, 548, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 570, 571, 573, 579, 580, 582, 584, 594, 601, 602, 611, 618, 623, 624, 636, 639, 649, 650, 657, 659, 660, 667, 668, 669, 670, 671, 683, 687, 691, 695, 707, 708, 710, 714, 726, 727, 742, 745, 747, 764, 768, 769, 770, 771, 780, 781, 783, 787, 790, 791, 799, 800, 819, 822, 830, 831, 836, 840, 849, 850, 854, 855, 859, 861, 863, 864, 871, 880, 881, 884, 887, 890, 898, 899, 900, 901, 902, 904, 906, 910, 911, 948, 962, 967, 968, 970, 973, 974, 975, 978, 979, 980, 981, 984, 985, 986, 988, 990, 991, 992, 993, 994, 998, 1004, 1006, 1010, 1011, 1013, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "unknown": [4, 16, 56, 168, 234, 259, 320, 322, 362, 369, 387, 394, 397, 408, 857, 863, 864, 941, 977, 988, 1004, 1024, 1028, 1032, 1033], "sake": [4, 123, 163, 168, 198, 306, 345, 347, 382, 385, 661], "simplic": [4, 13, 31, 182, 345, 347, 387, 406, 981, 982, 983, 993], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 71, 72, 98, 109, 110, 115, 116, 117, 118, 119, 126, 127, 130, 133, 144, 150, 155, 163, 167, 168, 169, 170, 174, 177, 179, 187, 228, 229, 230, 234, 238, 239, 240, 241, 245, 246, 249, 257, 259, 260, 266, 271, 279, 292, 298, 307, 312, 313, 315, 316, 322, 334, 345, 346, 354, 369, 372, 373, 374, 376, 379, 380, 382, 385, 387, 391, 394, 400, 403, 404, 407, 408, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 494, 558, 568, 580, 649, 664, 666, 680, 684, 787, 790, 791, 799, 801, 811, 812, 813, 815, 868, 870, 890, 967, 974, 975, 984, 993, 994, 999, 1001, 1002, 1004, 1006, 1009, 1011, 1012, 1013, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "default": [4, 14, 25, 27, 30, 42, 45, 46, 48, 53, 55, 59, 95, 116, 143, 150, 162, 169, 177, 178, 187, 198, 199, 216, 229, 231, 239, 241, 247, 254, 262, 268, 277, 279, 301, 304, 305, 308, 311, 312, 316, 341, 345, 346, 347, 350, 356, 360, 361, 368, 369, 372, 376, 377, 378, 379, 380, 381, 383, 385, 386, 387, 390, 391, 394, 398, 400, 401, 404, 405, 407, 408, 409, 411, 412, 413, 414, 416, 417, 421, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 914, 916, 917, 919, 921, 926, 927, 928, 929, 930, 931, 932, 941, 943, 946, 947, 948, 949, 951, 952, 953, 959, 962, 964, 965, 967, 968, 970, 972, 974, 977, 978, 979, 981, 982, 984, 985, 988, 990, 992, 993, 994, 1004, 1008, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "hyper": [4, 71, 116, 253, 259, 264, 298, 332, 356, 376, 385, 386, 387, 395, 404, 407, 409, 459, 635, 636, 791, 799, 801, 846, 888, 973, 974, 978, 981, 992, 993, 1004, 1015, 1020, 1034], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 44, 54, 55, 58, 60, 61, 62, 71, 72, 73, 79, 81, 82, 92, 95, 110, 112, 114, 116, 119, 124, 125, 136, 137, 144, 147, 150, 154, 155, 156, 157, 158, 159, 162, 163, 165, 168, 169, 177, 178, 179, 180, 182, 183, 185, 186, 187, 189, 190, 198, 200, 202, 203, 206, 207, 215, 216, 223, 224, 227, 229, 232, 233, 234, 237, 244, 245, 246, 247, 249, 250, 253, 258, 259, 260, 263, 264, 267, 270, 271, 272, 274, 279, 281, 285, 286, 292, 295, 296, 298, 301, 302, 303, 311, 312, 314, 315, 316, 317, 324, 327, 329, 334, 337, 341, 342, 343, 345, 346, 347, 350, 351, 352, 353, 356, 360, 361, 362, 363, 366, 367, 369, 377, 379, 380, 381, 382, 383, 385, 391, 395, 398, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 567, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 975, 977, 980, 981, 982, 983, 984, 985, 986, 988, 990, 991, 992, 994, 998, 999, 1005, 1007, 1009, 1010, 1011, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "compos": [4, 5, 25, 69, 70, 71, 75, 86, 112, 120, 130, 165, 168, 169, 170, 198, 200, 216, 229, 239, 241, 307, 312, 314, 315, 316, 363, 386, 400, 401, 404, 410, 506, 603, 977, 1020], "columntransform": [4, 70, 71, 130, 168, 169, 170, 198, 216, 229, 239, 241, 307, 312, 314, 315, 316, 366, 368, 385, 386, 457, 458, 620, 855, 967, 968, 999, 1015, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "ensembl": [4, 7, 10, 26, 27, 31, 56, 109, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 162, 163, 169, 170, 171, 198, 220, 227, 236, 237, 239, 240, 256, 271, 277, 303, 307, 311, 312, 313, 314, 316, 317, 345, 356, 360, 363, 378, 379, 386, 387, 398, 400, 404, 409, 428, 495, 506, 623, 624, 626, 649, 693, 790, 791, 816, 820, 851, 854, 863, 894, 898, 900, 901, 967, 978, 979, 984, 985, 994, 998, 999, 1000, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "histgradientboostingregressor": [4, 7, 116, 120, 123, 124, 127, 130, 162, 169, 198, 307, 311, 312, 313, 314, 316, 317, 378, 407, 551, 556, 623, 624, 626, 968, 985, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "cross_valid": [4, 120, 130, 168, 200, 255, 262, 307, 374, 386, 391, 566, 811, 812, 978, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1035, 1036], "pipelin": [4, 31, 54, 58, 71, 74, 76, 86, 115, 120, 141, 143, 148, 162, 163, 169, 170, 174, 177, 186, 187, 198, 199, 204, 212, 216, 220, 226, 227, 228, 232, 238, 241, 242, 252, 256, 258, 266, 273, 275, 279, 281, 287, 288, 295, 298, 303, 306, 308, 311, 312, 313, 314, 315, 316, 317, 324, 345, 346, 356, 360, 363, 366, 368, 369, 374, 377, 387, 391, 404, 408, 410, 414, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 479, 493, 506, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 596, 598, 601, 602, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 688, 689, 691, 692, 693, 704, 785, 786, 787, 788, 789, 790, 791, 794, 796, 801, 805, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 967, 968, 974, 981, 982, 987, 988, 992, 993, 998, 999, 1000, 1002, 1005, 1007, 1015, 1020, 1021, 1023, 1024, 1025, 1026, 1027], "make_pipelin": [4, 31, 58, 86, 115, 120, 130, 143, 144, 162, 163, 168, 169, 174, 177, 186, 187, 198, 199, 204, 212, 216, 220, 227, 228, 229, 238, 239, 241, 256, 266, 279, 288, 295, 303, 306, 307, 308, 311, 312, 313, 314, 315, 316, 346, 356, 386, 391, 401, 404, 558, 667, 669, 842, 850, 875, 876, 878, 879, 880, 881, 890, 891, 892, 893, 895, 896, 968, 981, 988, 992, 993, 1023, 1030, 1033], "ordinalencod": [4, 120, 130, 169, 170, 198, 307, 316, 368, 387, 407, 572, 826, 858, 863, 871, 980, 988, 1028, 1029, 1032, 1033, 1034, 1035, 1036], "categorical_column": [4, 120, 168, 170, 458], "ordinal_encod": [4, 120], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 57, 62, 69, 74, 76, 86, 89, 97, 98, 100, 102, 104, 105, 108, 120, 130, 134, 144, 156, 163, 165, 168, 169, 170, 174, 190, 198, 199, 206, 212, 214, 216, 220, 223, 227, 229, 232, 234, 235, 241, 246, 256, 257, 260, 268, 279, 281, 287, 288, 289, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 316, 332, 335, 345, 347, 356, 363, 368, 369, 370, 371, 374, 376, 379, 383, 387, 391, 396, 398, 399, 400, 402, 405, 407, 408, 409, 410, 416, 421, 424, 428, 432, 433, 434, 436, 438, 440, 443, 455, 456, 457, 458, 459, 473, 474, 475, 476, 479, 480, 487, 494, 499, 500, 505, 506, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 548, 550, 552, 555, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 627, 629, 630, 631, 632, 633, 644, 649, 654, 664, 667, 675, 679, 680, 681, 682, 683, 685, 692, 693, 704, 743, 744, 775, 787, 790, 791, 801, 816, 819, 825, 834, 839, 842, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 888, 890, 892, 895, 896, 919, 921, 967, 968, 970, 972, 974, 975, 978, 979, 982, 992, 993, 995, 998, 999, 1000, 1004, 1009, 1010, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "remaind": [4, 120, 168, 187, 198, 200, 216, 316, 340, 350, 401, 455, 458, 1020, 1027, 1028, 1029, 1032, 1033, 1036], "passthrough": [4, 72, 120, 168, 169, 198, 216, 307, 316, 401, 455, 458, 558, 559, 849, 850, 988, 1029, 1031, 1034, 1035], "short": [4, 5, 120, 126, 189, 257, 297, 345, 374, 382, 404, 408, 412, 974, 975, 981, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "easier": [4, 44, 62, 66, 82, 120, 177, 183, 229, 256, 257, 301, 332, 345, 356, 369, 374, 376, 379, 382, 385, 390, 402, 404, 459, 506, 888, 921, 973, 978, 985, 994, 999, 1002, 1013, 1029, 1034], "specifi": [4, 20, 55, 95, 120, 121, 151, 154, 156, 157, 158, 187, 199, 206, 244, 267, 360, 361, 368, 372, 374, 376, 383, 386, 387, 391, 394, 400, 401, 404, 405, 407, 409, 410, 412, 414, 428, 432, 436, 441, 443, 454, 455, 458, 460, 461, 463, 464, 465, 466, 467, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 506, 522, 524, 528, 529, 531, 532, 537, 538, 543, 548, 550, 551, 552, 553, 555, 558, 559, 574, 575, 584, 585, 588, 593, 601, 602, 611, 622, 623, 624, 629, 634, 637, 638, 639, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 654, 656, 659, 660, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 678, 682, 689, 691, 693, 700, 702, 719, 720, 728, 744, 761, 769, 770, 773, 774, 777, 787, 789, 790, 791, 793, 794, 796, 800, 801, 804, 809, 810, 811, 812, 813, 814, 815, 817, 821, 824, 825, 826, 828, 829, 830, 831, 835, 863, 864, 865, 868, 869, 871, 886, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 922, 929, 962, 968, 974, 975, 977, 978, 981, 985, 986, 988, 991, 992, 993, 1008, 1012, 1020, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1036], "next": [4, 7, 25, 60, 80, 119, 120, 124, 133, 157, 167, 171, 191, 195, 198, 228, 236, 240, 241, 246, 254, 265, 277, 306, 307, 308, 313, 321, 345, 350, 354, 356, 363, 372, 374, 376, 378, 397, 400, 401, 404, 407, 499, 500, 601, 625, 683, 689, 691, 693, 771, 785, 786, 816, 944, 967, 971, 977, 978, 988, 1002, 1017, 1020, 1033, 1034], "verbose_feature_names_out": [4, 120, 168, 169, 170, 241, 307, 314, 315, 316, 401, 455, 458, 1033], "categorical_featur": [4, 71, 120, 169, 307, 313, 314, 315, 316, 379, 407, 552, 553, 623, 624, 985, 1028, 1032, 1035], "random_st": [4, 5, 6, 7, 10, 12, 14, 19, 20, 21, 24, 25, 26, 27, 30, 31, 38, 42, 43, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 70, 71, 75, 82, 86, 92, 95, 97, 100, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 136, 143, 144, 146, 150, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 179, 180, 184, 190, 197, 198, 201, 202, 204, 205, 206, 210, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 232, 235, 236, 237, 238, 240, 241, 244, 246, 247, 250, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 277, 279, 283, 287, 288, 289, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 323, 330, 332, 333, 334, 340, 341, 345, 346, 350, 354, 356, 376, 379, 383, 386, 387, 396, 400, 401, 404, 405, 407, 408, 412, 425, 428, 429, 431, 434, 438, 440, 442, 443, 444, 445, 449, 450, 451, 453, 460, 465, 479, 482, 483, 486, 488, 494, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 574, 575, 584, 585, 598, 599, 601, 602, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 623, 624, 625, 626, 629, 630, 631, 632, 633, 637, 638, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 665, 667, 668, 669, 670, 678, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 725, 778, 781, 785, 786, 789, 790, 791, 792, 793, 799, 801, 802, 803, 804, 805, 806, 807, 809, 814, 815, 816, 818, 820, 821, 822, 823, 824, 835, 839, 846, 847, 848, 850, 855, 867, 871, 879, 882, 883, 890, 891, 892, 895, 898, 899, 900, 901, 903, 904, 926, 927, 947, 949, 952, 967, 968, 970, 973, 978, 979, 980, 981, 982, 985, 986, 988, 993, 994, 1004, 1008, 1009, 1013, 1017, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "set_output": [4, 120, 165, 169, 226, 242, 306, 307, 377, 424, 433, 434, 436, 438, 440, 455, 459, 473, 474, 475, 476, 487, 495, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 557, 558, 559, 560, 561, 572, 573, 574, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 649, 679, 680, 683, 816, 834, 839, 842, 846, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 888, 1035, 1036], "across": [4, 55, 61, 67, 85, 116, 136, 168, 187, 192, 220, 254, 256, 259, 279, 301, 306, 375, 376, 383, 387, 394, 399, 400, 404, 408, 412, 428, 431, 441, 443, 445, 448, 451, 453, 460, 463, 465, 479, 482, 483, 486, 488, 494, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 579, 582, 585, 593, 598, 599, 601, 602, 623, 624, 625, 630, 631, 632, 633, 637, 638, 641, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 667, 669, 670, 676, 677, 680, 681, 682, 683, 684, 685, 686, 695, 696, 708, 721, 747, 778, 781, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 799, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 835, 839, 846, 847, 848, 855, 859, 860, 867, 868, 870, 871, 879, 882, 883, 885, 886, 890, 891, 892, 895, 898, 899, 926, 927, 949, 952, 967, 974, 976, 978, 988, 992, 994, 999, 1002, 1013, 1020, 1023, 1026, 1027, 1028, 1029, 1030], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 56, 58, 61, 70, 75, 92, 95, 97, 98, 101, 103, 105, 110, 113, 115, 120, 121, 122, 123, 130, 153, 156, 158, 159, 163, 178, 186, 187, 190, 195, 198, 199, 206, 207, 208, 216, 219, 220, 234, 235, 237, 244, 245, 246, 247, 249, 250, 254, 257, 258, 259, 260, 262, 267, 270, 273, 279, 284, 286, 289, 292, 296, 298, 301, 303, 306, 307, 311, 324, 328, 332, 342, 345, 346, 347, 360, 369, 374, 376, 380, 381, 385, 401, 404, 408, 412, 499, 524, 588, 601, 602, 771, 863, 917, 922, 939, 978, 985, 993, 1009], "cv_result": [4, 71, 116, 257, 258, 260, 262, 391, 801, 813, 978], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 58, 60, 70, 71, 72, 73, 74, 75, 78, 82, 86, 103, 109, 110, 112, 119, 120, 122, 123, 126, 129, 130, 137, 138, 143, 144, 147, 162, 165, 167, 168, 169, 170, 171, 174, 182, 189, 190, 193, 198, 200, 204, 206, 214, 216, 227, 232, 233, 234, 237, 241, 248, 252, 257, 259, 260, 261, 262, 263, 264, 267, 268, 270, 271, 272, 273, 274, 275, 277, 286, 287, 288, 295, 296, 297, 298, 303, 306, 307, 308, 311, 312, 313, 314, 320, 321, 323, 324, 332, 340, 345, 346, 350, 356, 369, 374, 376, 379, 386, 387, 394, 395, 397, 398, 399, 401, 403, 405, 407, 409, 417, 419, 423, 428, 434, 438, 440, 443, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 493, 495, 523, 527, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 583, 584, 585, 586, 587, 589, 590, 591, 593, 594, 595, 597, 600, 601, 602, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 689, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 727, 728, 729, 730, 732, 745, 746, 747, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 790, 791, 793, 801, 806, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 836, 837, 839, 840, 841, 846, 847, 848, 850, 870, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 929, 967, 970, 974, 976, 981, 984, 986, 988, 992, 999, 1007, 1009, 1011, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "neg_mean_absolute_error": [4, 130, 200, 978], "neg_root_mean_squared_error": [4, 307, 978], "mae": [4, 130, 198, 200, 549, 556, 735, 899, 901, 978, 994, 1027, 1028, 1032, 1033], "test_neg_mean_absolute_error": [4, 200], "rmse": [4, 81, 307, 740, 1031], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 58, 60, 61, 63, 67, 70, 71, 73, 74, 75, 80, 85, 86, 92, 95, 98, 103, 104, 106, 110, 113, 116, 117, 118, 119, 120, 122, 124, 136, 138, 143, 144, 146, 147, 150, 151, 153, 155, 159, 167, 169, 170, 171, 174, 182, 183, 184, 185, 189, 190, 193, 194, 198, 200, 201, 202, 205, 206, 213, 214, 216, 220, 221, 224, 229, 231, 233, 234, 237, 241, 247, 253, 257, 258, 259, 260, 262, 264, 267, 268, 272, 279, 283, 290, 292, 296, 297, 298, 303, 306, 308, 311, 312, 313, 315, 317, 320, 321, 324, 332, 345, 346, 347, 350, 354, 356, 360, 368, 369, 372, 375, 376, 382, 387, 391, 394, 401, 404, 407, 408, 410, 455, 458, 459, 463, 469, 493, 503, 532, 535, 540, 541, 550, 551, 552, 553, 555, 556, 560, 561, 568, 574, 575, 579, 580, 582, 603, 608, 621, 637, 638, 640, 641, 643, 644, 645, 647, 651, 652, 653, 654, 657, 658, 667, 668, 675, 704, 708, 727, 783, 785, 786, 788, 789, 792, 794, 795, 796, 797, 800, 802, 803, 804, 805, 806, 807, 808, 812, 813, 814, 819, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 847, 848, 849, 850, 851, 852, 860, 866, 870, 878, 888, 889, 890, 891, 892, 895, 903, 914, 939, 946, 968, 978, 979, 980, 981, 986, 994, 1004, 1008, 1009, 1011, 1012, 1013, 1020, 1022, 1028, 1029, 1031, 1035], "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 58, 71, 73, 75, 86, 110, 117, 118, 143, 147, 150, 151, 152, 154, 159, 167, 169, 170, 178, 182, 184, 190, 198, 200, 204, 213, 214, 216, 220, 231, 233, 257, 259, 260, 262, 265, 267, 270, 279, 295, 324, 345, 346, 347, 986, 1009], "std": [4, 11, 12, 37, 46, 50, 54, 61, 66, 79, 81, 82, 96, 97, 98, 117, 119, 120, 130, 137, 159, 162, 163, 168, 178, 183, 207, 231, 257, 258, 259, 261, 262, 264, 267, 269, 273, 307, 323, 335, 346, 356, 387, 400, 404, 407, 506, 597, 600, 870, 881, 988, 1012, 1028, 1032], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 34, 37, 39, 40, 58, 70, 75, 80, 85, 92, 95, 98, 100, 103, 105, 106, 110, 112, 113, 117, 121, 132, 142, 147, 150, 154, 159, 169, 178, 182, 194, 198, 199, 202, 213, 215, 216, 219, 230, 231, 232, 235, 244, 246, 247, 257, 259, 262, 264, 265, 266, 268, 269, 279, 284, 298, 303, 305, 306, 313, 316, 321, 340, 354, 360, 368, 371, 372, 374, 378, 380, 383, 387, 390, 391, 397, 398, 400, 403, 404, 405, 406, 407, 408, 410, 411, 435, 436, 438, 439, 441, 460, 462, 465, 469, 480, 506, 507, 508, 509, 514, 519, 529, 531, 532, 538, 548, 549, 550, 551, 554, 555, 556, 557, 579, 580, 581, 582, 598, 599, 605, 618, 640, 662, 670, 683, 687, 697, 698, 745, 792, 795, 797, 802, 803, 806, 826, 830, 831, 835, 855, 882, 884, 898, 899, 900, 901, 925, 930, 931, 953, 957, 958, 967, 970, 972, 974, 975, 978, 979, 980, 981, 982, 984, 985, 988, 990, 992, 993, 994, 1004, 1011, 1013, 1020, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "044": [4, 257, 741, 978], "003": 4, "068": [4, 259], "005": [4, 259, 263, 267, 284, 301, 346, 380], "quit": [4, 53, 57, 86, 113, 136, 147, 168, 169, 196, 216, 267, 314, 345, 360, 379, 386, 400, 408, 973, 975, 980, 1002, 1028], "good": [4, 9, 20, 25, 27, 40, 44, 46, 49, 52, 53, 55, 58, 74, 81, 86, 105, 116, 119, 122, 123, 151, 155, 162, 168, 182, 187, 198, 199, 204, 213, 224, 227, 231, 234, 237, 245, 247, 253, 259, 265, 274, 298, 306, 307, 313, 320, 325, 332, 345, 346, 356, 360, 361, 362, 373, 375, 376, 377, 378, 380, 385, 387, 394, 397, 398, 400, 402, 404, 405, 407, 408, 409, 410, 428, 430, 435, 525, 550, 552, 553, 581, 621, 631, 638, 639, 647, 649, 650, 652, 660, 671, 681, 685, 713, 721, 732, 754, 815, 884, 927, 967, 973, 974, 975, 978, 979, 981, 982, 983, 985, 986, 988, 992, 993, 994, 999, 1002, 1004, 1008, 1011, 1013, 1026], "trial": [4, 264, 438, 440, 451, 662, 785, 786, 974, 1026], "without": [4, 5, 13, 24, 36, 42, 55, 56, 67, 68, 75, 100, 116, 122, 125, 127, 130, 143, 147, 157, 165, 167, 168, 169, 182, 187, 206, 227, 231, 234, 235, 238, 240, 253, 260, 264, 266, 280, 293, 301, 302, 306, 308, 311, 340, 346, 362, 369, 370, 372, 374, 375, 376, 378, 379, 380, 383, 385, 386, 387, 391, 394, 400, 401, 405, 407, 408, 409, 410, 425, 430, 432, 437, 449, 460, 465, 487, 495, 506, 523, 525, 546, 547, 554, 570, 571, 602, 618, 622, 625, 630, 650, 683, 691, 771, 790, 791, 792, 799, 801, 815, 816, 832, 839, 843, 849, 850, 853, 856, 859, 860, 862, 866, 867, 868, 870, 875, 890, 906, 946, 947, 967, 968, 972, 974, 975, 978, 981, 984, 988, 992, 993, 994, 998, 999, 1004, 1005, 1013, 1017, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036], "tune": [4, 44, 55, 71, 100, 110, 116, 146, 150, 162, 169, 187, 202, 203, 215, 223, 253, 264, 281, 302, 332, 345, 356, 360, 361, 362, 386, 387, 395, 399, 400, 404, 407, 409, 410, 443, 453, 550, 551, 585, 604, 605, 606, 608, 610, 611, 613, 614, 616, 634, 650, 681, 685, 846, 972, 973, 974, 975, 977, 978, 981, 982, 984, 992, 1005, 1015, 1020, 1034, 1036], "just": [4, 31, 70, 86, 95, 116, 120, 147, 188, 195, 220, 232, 259, 266, 270, 279, 295, 332, 345, 346, 356, 369, 373, 374, 375, 376, 378, 379, 382, 385, 386, 387, 397, 400, 401, 404, 407, 409, 410, 412, 459, 524, 526, 533, 537, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 570, 575, 601, 602, 637, 643, 648, 649, 651, 653, 657, 658, 659, 667, 668, 669, 793, 809, 839, 847, 848, 967, 974, 977, 978, 979, 982, 986, 988, 992, 999, 1011, 1020, 1024, 1026, 1028, 1032], "had": [4, 9, 47, 123, 155, 234, 301, 307, 314, 356, 374, 375, 408, 411, 435, 968, 978, 1002, 1004, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1035], "explicit": [4, 165, 169, 174, 226, 234, 242, 360, 361, 362, 373, 375, 385, 387, 388, 401, 408, 414, 463, 490, 492, 493, 532, 542, 543, 629, 630, 632, 667, 787, 788, 795, 834, 842, 850, 890, 895, 942, 946, 970, 972, 974, 978, 988, 994, 998, 1020, 1024, 1029, 1030, 1033], "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 56, 60, 65, 66, 70, 71, 86, 95, 97, 100, 109, 111, 126, 142, 147, 150, 162, 163, 168, 169, 170, 174, 177, 182, 193, 199, 200, 202, 216, 231, 234, 238, 257, 259, 260, 262, 268, 281, 301, 306, 308, 314, 324, 332, 347, 354, 360, 362, 369, 372, 374, 375, 376, 377, 378, 382, 385, 387, 388, 389, 394, 398, 399, 400, 401, 404, 405, 407, 408, 410, 435, 438, 440, 441, 448, 455, 458, 484, 485, 499, 537, 558, 559, 560, 561, 598, 599, 607, 611, 612, 615, 623, 630, 655, 683, 758, 761, 764, 768, 769, 770, 771, 779, 787, 801, 808, 815, 854, 864, 868, 870, 871, 880, 881, 887, 898, 899, 944, 967, 968, 974, 977, 978, 979, 981, 982, 983, 988, 993, 994, 997, 998, 1001, 1002, 1004, 1011, 1012, 1013, 1020, 1021, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "But": [4, 9, 53, 167, 199, 200, 259, 279, 301, 374, 385, 400, 403, 406, 407, 453, 736, 898, 899, 967, 978, 993, 999], "much": [4, 6, 7, 9, 19, 25, 39, 40, 55, 80, 82, 92, 98, 105, 115, 123, 124, 130, 131, 132, 150, 162, 163, 168, 169, 170, 171, 174, 195, 196, 200, 231, 234, 259, 261, 262, 265, 270, 297, 302, 306, 307, 313, 314, 316, 332, 337, 345, 346, 356, 360, 362, 369, 374, 375, 376, 379, 382, 385, 386, 390, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 438, 439, 487, 525, 526, 527, 529, 550, 551, 552, 553, 649, 650, 657, 659, 667, 668, 669, 683, 769, 770, 790, 791, 805, 865, 883, 890, 967, 970, 973, 974, 975, 977, 978, 979, 981, 982, 984, 986, 990, 991, 993, 994, 999, 1002, 1008, 1009, 1011, 1012, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "monoton": [4, 25, 108, 134, 165, 169, 216, 230, 312, 398, 548, 549, 552, 553, 555, 556, 623, 626, 627, 685, 697, 866, 878, 892, 895, 898, 899, 900, 901, 975, 979, 988, 993, 1027, 1031, 1035, 1037], "relationship": [4, 20, 110, 111, 156, 167, 168, 177, 182, 198, 200, 201, 266, 302, 308, 387, 400, 402, 404, 410, 453, 627, 705, 975, 978, 980, 981, 985, 986, 1011, 1025], "case": [4, 7, 8, 25, 27, 37, 49, 52, 55, 57, 61, 66, 71, 72, 81, 86, 100, 103, 113, 115, 116, 123, 124, 130, 144, 146, 147, 150, 157, 168, 169, 182, 184, 187, 189, 198, 199, 200, 202, 203, 206, 212, 214, 215, 216, 227, 231, 232, 233, 234, 238, 249, 253, 256, 258, 259, 260, 262, 265, 266, 268, 279, 286, 297, 301, 303, 306, 308, 311, 314, 345, 346, 347, 354, 356, 360, 361, 362, 368, 369, 372, 374, 375, 376, 378, 379, 380, 381, 383, 385, 386, 387, 388, 390, 391, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 428, 431, 434, 435, 437, 438, 442, 444, 454, 455, 458, 465, 487, 499, 500, 506, 530, 532, 533, 534, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 572, 573, 579, 582, 584, 585, 588, 593, 597, 600, 601, 602, 616, 618, 619, 621, 623, 638, 639, 644, 647, 648, 649, 650, 652, 654, 657, 659, 660, 663, 665, 666, 667, 671, 673, 674, 675, 676, 677, 678, 694, 699, 700, 703, 709, 711, 712, 713, 716, 718, 719, 724, 725, 728, 732, 733, 735, 736, 738, 740, 743, 744, 746, 753, 768, 771, 773, 775, 778, 779, 782, 784, 786, 787, 790, 791, 793, 801, 805, 809, 810, 811, 812, 813, 814, 815, 817, 819, 827, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 850, 857, 859, 860, 863, 864, 865, 868, 869, 870, 871, 874, 880, 881, 882, 883, 890, 892, 895, 898, 899, 905, 906, 916, 927, 928, 946, 967, 968, 970, 972, 973, 975, 976, 977, 979, 980, 981, 982, 984, 985, 988, 992, 993, 994, 998, 999, 1001, 1002, 1004, 1013, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "usual": [4, 40, 78, 79, 81, 122, 123, 125, 130, 167, 169, 184, 198, 199, 253, 256, 259, 268, 269, 302, 314, 332, 356, 360, 361, 372, 374, 376, 382, 385, 386, 387, 391, 397, 400, 401, 404, 405, 407, 408, 409, 441, 447, 529, 531, 533, 538, 550, 551, 598, 599, 621, 631, 649, 650, 657, 659, 667, 668, 669, 683, 716, 748, 793, 814, 818, 890, 927, 967, 968, 970, 973, 974, 975, 977, 978, 979, 982, 983, 984, 985, 988, 992, 993, 994, 1004, 1010, 1011, 1035], "hot": [4, 71, 115, 118, 130, 168, 198, 268, 302, 303, 307, 313, 332, 387, 407, 408, 542, 557, 572, 639, 649, 650, 660, 671, 853, 855, 857, 858, 861, 863, 864, 871, 974, 988, 1028, 1034, 1035], "For": [4, 8, 9, 12, 13, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 55, 57, 58, 60, 67, 73, 80, 86, 91, 96, 113, 115, 116, 118, 123, 124, 126, 128, 143, 144, 147, 150, 152, 157, 162, 163, 168, 169, 182, 186, 187, 198, 199, 202, 203, 206, 215, 216, 219, 221, 224, 227, 228, 230, 231, 232, 234, 241, 249, 256, 259, 260, 266, 274, 277, 279, 289, 295, 297, 298, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 323, 325, 332, 334, 340, 345, 346, 347, 350, 351, 354, 356, 360, 362, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 391, 394, 396, 397, 398, 399, 400, 401, 404, 405, 407, 408, 409, 410, 411, 416, 423, 428, 431, 433, 434, 435, 436, 437, 438, 440, 441, 442, 445, 447, 448, 449, 451, 452, 453, 455, 456, 457, 459, 463, 465, 473, 474, 475, 476, 480, 487, 489, 494, 505, 506, 514, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 572, 574, 575, 576, 577, 579, 580, 582, 583, 584, 585, 588, 593, 598, 599, 600, 601, 602, 605, 610, 613, 614, 618, 619, 620, 621, 622, 623, 624, 626, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 678, 679, 680, 683, 684, 686, 692, 695, 697, 698, 719, 720, 728, 731, 732, 753, 759, 768, 773, 774, 777, 778, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 801, 809, 810, 811, 812, 813, 814, 815, 817, 819, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 856, 859, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 875, 876, 877, 878, 879, 880, 881, 882, 883, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 910, 916, 941, 962, 967, 968, 970, 971, 972, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 992, 993, 994, 997, 1001, 1002, 1004, 1011, 1012, 1013, 1020, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "consist": [4, 7, 26, 32, 37, 56, 57, 70, 80, 90, 92, 95, 116, 120, 126, 133, 147, 153, 155, 158, 163, 198, 216, 233, 265, 268, 297, 306, 311, 314, 340, 346, 356, 360, 367, 369, 371, 374, 376, 380, 381, 382, 383, 386, 387, 388, 398, 400, 402, 406, 407, 408, 410, 418, 419, 422, 423, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 481, 488, 522, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 545, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 582, 602, 618, 619, 620, 621, 626, 629, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 665, 668, 669, 670, 678, 679, 680, 681, 682, 691, 725, 785, 786, 794, 818, 819, 820, 822, 823, 824, 825, 833, 834, 836, 838, 841, 842, 848, 853, 854, 855, 857, 861, 862, 865, 866, 868, 869, 871, 882, 883, 886, 890, 891, 893, 894, 896, 899, 901, 910, 912, 933, 949, 952, 967, 970, 971, 972, 974, 975, 977, 978, 979, 981, 982, 988, 991, 993, 994, 997, 998, 999, 1002, 1004, 1011, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "scale": [4, 5, 12, 25, 27, 37, 40, 43, 46, 47, 56, 58, 61, 71, 72, 79, 82, 86, 97, 100, 101, 127, 147, 150, 151, 152, 155, 156, 157, 159, 165, 169, 174, 178, 179, 186, 198, 200, 202, 212, 213, 214, 216, 218, 221, 225, 227, 233, 249, 256, 259, 260, 261, 266, 296, 297, 298, 300, 301, 309, 312, 315, 317, 325, 327, 329, 332, 343, 356, 359, 360, 366, 367, 368, 371, 374, 379, 383, 385, 386, 387, 399, 400, 401, 405, 407, 409, 410, 437, 438, 441, 442, 448, 455, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 492, 501, 505, 506, 515, 525, 529, 531, 532, 538, 540, 541, 552, 553, 573, 581, 582, 588, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 622, 623, 632, 635, 636, 637, 638, 640, 643, 649, 650, 651, 652, 653, 663, 665, 667, 668, 669, 672, 678, 679, 680, 681, 683, 685, 694, 707, 731, 737, 747, 749, 759, 765, 767, 793, 801, 804, 816, 817, 818, 830, 831, 832, 847, 848, 851, 854, 859, 860, 862, 865, 867, 868, 870, 875, 876, 877, 879, 880, 882, 883, 890, 891, 892, 893, 894, 895, 896, 954, 955, 956, 967, 970, 971, 974, 978, 979, 980, 981, 982, 986, 992, 993, 999, 1002, 1004, 1011, 1012, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "same": [4, 7, 8, 16, 20, 26, 34, 37, 40, 44, 53, 55, 57, 58, 64, 70, 71, 72, 92, 95, 97, 100, 103, 105, 111, 113, 117, 120, 121, 123, 124, 128, 147, 150, 168, 169, 171, 184, 186, 187, 192, 198, 199, 200, 206, 216, 234, 237, 238, 249, 254, 255, 256, 257, 259, 260, 262, 264, 265, 267, 272, 279, 284, 297, 301, 302, 304, 306, 307, 311, 313, 323, 332, 340, 345, 346, 347, 354, 356, 360, 361, 362, 368, 369, 371, 373, 374, 376, 378, 380, 383, 385, 386, 387, 388, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 421, 425, 429, 430, 437, 441, 447, 456, 460, 461, 462, 463, 464, 465, 466, 467, 469, 484, 486, 487, 489, 495, 499, 500, 522, 523, 526, 527, 528, 529, 530, 531, 534, 538, 540, 542, 543, 544, 545, 548, 550, 551, 552, 553, 555, 556, 558, 559, 580, 581, 593, 594, 597, 601, 602, 604, 613, 618, 619, 620, 623, 624, 637, 640, 643, 644, 646, 649, 650, 654, 657, 658, 659, 663, 664, 665, 666, 667, 668, 669, 675, 678, 695, 696, 703, 704, 706, 708, 716, 721, 722, 726, 745, 746, 747, 768, 769, 770, 776, 778, 780, 782, 783, 785, 786, 787, 788, 790, 791, 793, 795, 796, 801, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 832, 833, 834, 838, 840, 841, 842, 853, 854, 855, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 879, 890, 891, 898, 900, 912, 916, 927, 944, 949, 952, 953, 963, 967, 968, 970, 972, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 992, 993, 994, 999, 1008, 1013, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "minmaxscal": [4, 5, 72, 143, 174, 220, 296, 313, 362, 401, 455, 876, 968, 988, 1022, 1025, 1028, 1030, 1031, 1032, 1036], "although": [4, 9, 25, 117, 130, 167, 195, 216, 227, 246, 277, 356, 362, 376, 387, 400, 401, 405, 408, 487, 804, 807, 861, 977, 979, 980, 981, 984, 994, 1004, 1011, 1012, 1013, 1020, 1028, 1035], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 40, 46, 53, 55, 57, 70, 72, 73, 86, 106, 110, 115, 116, 119, 125, 130, 147, 156, 168, 169, 182, 195, 198, 204, 216, 219, 220, 221, 224, 227, 230, 231, 232, 234, 235, 246, 247, 254, 259, 261, 262, 266, 268, 269, 277, 279, 292, 301, 303, 305, 307, 308, 314, 315, 323, 324, 330, 332, 340, 342, 345, 346, 347, 360, 368, 372, 374, 375, 376, 378, 382, 386, 387, 391, 394, 398, 399, 400, 401, 404, 405, 407, 408, 409, 410, 425, 431, 433, 437, 438, 440, 441, 445, 447, 458, 464, 470, 478, 490, 494, 499, 518, 526, 528, 529, 530, 532, 535, 537, 540, 541, 548, 549, 550, 551, 552, 553, 555, 556, 572, 573, 574, 579, 580, 582, 584, 585, 588, 593, 597, 601, 623, 629, 640, 641, 642, 645, 646, 647, 650, 662, 673, 674, 689, 691, 693, 698, 718, 719, 720, 724, 726, 728, 733, 736, 768, 773, 774, 777, 778, 782, 787, 790, 791, 801, 847, 851, 852, 853, 855, 857, 859, 862, 863, 864, 867, 870, 871, 879, 882, 883, 887, 890, 891, 898, 899, 900, 901, 905, 910, 914, 927, 930, 931, 944, 946, 962, 967, 968, 970, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 984, 986, 988, 992, 993, 994, 1013, 1020, 1021, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 32, 37, 40, 42, 43, 44, 45, 46, 48, 53, 54, 55, 60, 62, 66, 71, 73, 75, 81, 86, 95, 98, 100, 102, 106, 113, 114, 115, 117, 120, 123, 124, 126, 128, 129, 139, 146, 147, 150, 152, 154, 158, 162, 168, 169, 170, 171, 178, 183, 184, 187, 188, 193, 199, 200, 202, 206, 212, 213, 216, 219, 220, 223, 227, 230, 232, 238, 244, 249, 250, 253, 254, 257, 259, 260, 262, 265, 266, 267, 268, 270, 271, 274, 279, 281, 285, 295, 296, 297, 301, 302, 303, 306, 311, 313, 315, 316, 317, 320, 323, 325, 332, 336, 337, 340, 345, 347, 352, 353, 360, 361, 362, 368, 369, 371, 374, 376, 378, 379, 380, 382, 385, 386, 387, 388, 394, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 425, 431, 432, 434, 436, 437, 438, 441, 442, 443, 444, 445, 446, 448, 450, 453, 455, 458, 460, 461, 462, 463, 464, 465, 466, 467, 470, 480, 499, 500, 502, 504, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 570, 571, 572, 573, 575, 579, 580, 582, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 621, 622, 623, 625, 627, 631, 634, 643, 644, 649, 655, 656, 657, 658, 667, 668, 669, 677, 680, 681, 682, 683, 684, 685, 686, 699, 701, 703, 708, 715, 716, 718, 719, 720, 721, 722, 726, 727, 728, 744, 746, 747, 754, 761, 764, 768, 769, 770, 771, 773, 774, 775, 777, 781, 782, 785, 786, 787, 789, 790, 791, 792, 797, 801, 802, 803, 804, 806, 807, 811, 817, 818, 819, 821, 822, 823, 824, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 852, 854, 855, 863, 864, 867, 868, 871, 879, 883, 887, 890, 892, 895, 898, 899, 900, 901, 902, 903, 910, 911, 926, 927, 929, 933, 943, 949, 952, 968, 970, 972, 973, 974, 975, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 990, 992, 993, 994, 998, 999, 1001, 1004, 1008, 1009, 1011, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 71, 82, 86, 110, 115, 118, 123, 147, 151, 154, 157, 168, 169, 171, 178, 184, 191, 198, 202, 204, 206, 216, 233, 234, 245, 256, 259, 260, 265, 277, 279, 296, 297, 298, 301, 305, 306, 307, 308, 322, 332, 340, 345, 346, 347, 350, 356, 360, 361, 369, 372, 376, 379, 382, 385, 386, 387, 391, 394, 397, 398, 400, 404, 405, 406, 407, 408, 410, 413, 423, 438, 439, 452, 456, 466, 473, 474, 475, 525, 527, 543, 545, 547, 549, 551, 553, 556, 559, 561, 579, 582, 598, 599, 602, 623, 624, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 663, 664, 667, 668, 669, 670, 671, 680, 700, 703, 704, 712, 713, 714, 736, 753, 775, 778, 782, 787, 801, 814, 818, 823, 824, 833, 836, 838, 840, 841, 842, 848, 859, 860, 868, 870, 871, 875, 876, 878, 879, 880, 881, 891, 893, 896, 899, 901, 942, 968, 970, 971, 972, 973, 974, 975, 976, 978, 979, 981, 983, 985, 988, 993, 994, 1002, 1012, 1026, 1027, 1029, 1030, 1031, 1032, 1034, 1036], "compar": [4, 5, 19, 20, 24, 25, 27, 36, 37, 43, 49, 54, 55, 57, 58, 64, 68, 72, 81, 84, 86, 87, 98, 103, 105, 108, 110, 111, 113, 119, 120, 123, 128, 130, 134, 147, 154, 162, 163, 165, 168, 170, 171, 176, 180, 182, 186, 187, 193, 195, 198, 201, 202, 204, 206, 208, 215, 216, 217, 219, 220, 223, 226, 229, 232, 238, 240, 242, 246, 247, 252, 254, 256, 264, 266, 268, 270, 275, 280, 284, 288, 289, 293, 294, 299, 300, 302, 306, 309, 313, 345, 346, 347, 354, 356, 362, 369, 371, 374, 376, 397, 398, 400, 402, 403, 404, 405, 407, 409, 410, 431, 432, 433, 435, 436, 437, 439, 440, 441, 443, 449, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 481, 487, 493, 495, 503, 505, 513, 515, 519, 522, 528, 542, 543, 552, 553, 554, 555, 556, 562, 622, 630, 635, 636, 644, 646, 648, 649, 654, 657, 659, 667, 668, 675, 686, 696, 703, 706, 721, 728, 733, 776, 786, 787, 792, 801, 813, 816, 823, 832, 836, 839, 843, 847, 850, 851, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 870, 871, 876, 879, 892, 894, 895, 967, 970, 971, 972, 974, 975, 977, 978, 979, 980, 981, 982, 984, 988, 989, 992, 993, 994, 997, 998, 1011, 1012, 1020, 1022, 1027, 1028, 1033], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 139, 142, 143, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 224, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 283, 284, 285, 286, 288, 289, 290, 291, 292, 295, 298, 301, 302, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 351, 352, 353, 354, 356, 360, 367, 368, 369, 372, 374, 375, 376, 377, 378, 380, 382, 383, 385, 386, 387, 390, 391, 393, 394, 396, 397, 400, 401, 404, 405, 406, 407, 408, 430, 431, 432, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 451, 453, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 476, 481, 484, 485, 487, 494, 497, 499, 500, 522, 525, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 560, 561, 572, 573, 579, 580, 582, 618, 619, 620, 621, 622, 623, 624, 634, 637, 638, 640, 643, 644, 648, 649, 650, 651, 652, 653, 654, 657, 659, 661, 663, 667, 668, 669, 675, 679, 682, 683, 684, 686, 693, 694, 697, 698, 700, 703, 705, 716, 717, 719, 720, 724, 725, 728, 729, 744, 746, 763, 769, 771, 772, 773, 774, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 813, 816, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 853, 854, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 890, 892, 893, 895, 896, 898, 913, 925, 927, 931, 932, 933, 940, 941, 947, 949, 952, 965, 967, 968, 973, 974, 976, 978, 979, 981, 984, 988, 990, 993, 994, 997, 999, 1001, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1020, 1023, 1024, 1026, 1027, 1028, 1030, 1032, 1033, 1034, 1035, 1036], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 139, 142, 143, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 224, 227, 230, 231, 232, 233, 234, 235, 236, 237, 239, 244, 245, 246, 247, 248, 249, 250, 253, 254, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 283, 284, 285, 286, 288, 289, 290, 291, 292, 295, 298, 301, 302, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 351, 352, 353, 354, 356, 360, 368, 369, 374, 376, 379, 380, 383, 385, 387, 391, 397, 400, 401, 404, 405, 406, 407, 408, 410, 413, 415, 418, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 451, 453, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 476, 487, 488, 499, 500, 511, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 548, 549, 550, 551, 552, 554, 555, 556, 557, 560, 561, 572, 573, 576, 577, 579, 580, 584, 585, 588, 597, 600, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 632, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 659, 661, 662, 663, 665, 666, 667, 668, 669, 672, 673, 674, 675, 682, 683, 686, 690, 693, 694, 697, 698, 700, 703, 704, 705, 706, 716, 717, 719, 720, 724, 725, 728, 729, 731, 744, 746, 753, 759, 763, 768, 771, 772, 773, 774, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 816, 817, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 840, 841, 842, 846, 847, 854, 855, 857, 863, 864, 865, 866, 867, 869, 870, 871, 878, 879, 882, 883, 885, 886, 887, 890, 892, 893, 895, 896, 898, 899, 900, 901, 908, 910, 911, 913, 915, 916, 925, 927, 932, 940, 941, 943, 947, 949, 952, 954, 955, 956, 967, 968, 973, 974, 976, 978, 979, 981, 982, 984, 988, 989, 990, 992, 993, 994, 1004, 1008, 1009, 1011, 1012, 1013, 1021, 1023, 1026, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 71, 73, 75, 86, 115, 130, 132, 133, 136, 138, 146, 147, 150, 162, 165, 167, 168, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 227, 228, 229, 230, 234, 236, 239, 241, 255, 262, 267, 268, 272, 273, 277, 298, 302, 303, 306, 308, 311, 312, 313, 314, 315, 317, 324, 345, 356, 360, 362, 363, 373, 374, 376, 380, 382, 383, 386, 387, 391, 401, 407, 429, 456, 528, 530, 533, 534, 536, 537, 539, 558, 559, 560, 561, 588, 622, 623, 625, 626, 629, 631, 632, 633, 634, 691, 692, 778, 801, 809, 811, 812, 813, 821, 822, 823, 824, 848, 865, 869, 890, 891, 894, 897, 922, 970, 974, 978, 979, 984, 986, 988, 992, 1008, 1009, 1011, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "ridgecv": [4, 75, 130, 147, 168, 236, 387, 407, 559, 634, 663, 666, 974, 1020, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "onehotencod": [4, 71, 115, 120, 130, 168, 169, 198, 216, 229, 239, 241, 307, 312, 314, 317, 368, 387, 401, 407, 457, 458, 557, 572, 573, 853, 857, 858, 861, 864, 871, 988, 1021, 1024, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "one_hot_encod": [4, 120], "handle_unknown": [4, 71, 115, 120, 130, 169, 170, 229, 239, 241, 307, 312, 315, 863, 864, 988, 1024, 1028, 1032, 1033], "ignor": [4, 6, 8, 17, 44, 49, 55, 62, 71, 110, 112, 115, 120, 127, 130, 169, 186, 190, 198, 207, 213, 229, 234, 239, 241, 250, 296, 297, 306, 307, 312, 315, 337, 346, 351, 374, 376, 378, 380, 387, 390, 400, 401, 407, 408, 418, 419, 422, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 451, 452, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 479, 494, 499, 500, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 570, 572, 573, 574, 579, 580, 581, 582, 585, 593, 594, 601, 602, 618, 619, 620, 621, 623, 624, 626, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 698, 704, 705, 716, 719, 720, 728, 745, 746, 753, 759, 764, 768, 773, 774, 777, 778, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 847, 848, 849, 850, 853, 854, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 882, 883, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 924, 953, 974, 975, 978, 980, 984, 988, 993, 1009, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035], "sparse_output": [4, 120, 241, 307, 315, 557, 857, 861, 863, 869, 874, 988, 1035, 1036], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 37, 40, 42, 45, 52, 56, 60, 65, 75, 82, 86, 95, 97, 98, 100, 101, 102, 104, 105, 110, 112, 113, 119, 123, 126, 127, 129, 130, 131, 147, 150, 153, 155, 156, 157, 158, 159, 162, 163, 168, 177, 178, 179, 180, 182, 183, 184, 186, 187, 192, 193, 195, 196, 198, 199, 200, 202, 203, 207, 210, 211, 216, 219, 220, 223, 232, 233, 240, 244, 259, 260, 261, 262, 263, 266, 267, 269, 271, 272, 277, 279, 282, 284, 287, 289, 295, 297, 301, 302, 303, 304, 306, 308, 312, 314, 315, 322, 324, 329, 330, 333, 334, 337, 341, 342, 345, 360, 369, 376, 380, 385, 402, 403, 405, 407, 409, 410, 412, 437, 462, 463, 469, 518, 522, 524, 526, 527, 528, 529, 530, 531, 533, 534, 536, 537, 538, 539, 551, 586, 587, 589, 602, 604, 606, 607, 614, 622, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 678, 713, 738, 825, 826, 827, 829, 847, 848, 886, 898, 899, 900, 901, 967, 974, 978, 980, 982, 986, 991, 992, 993, 994, 1008, 1011, 1013, 1017, 1020, 1022, 1023, 1024, 1025, 1027, 1028, 1032, 1033, 1034, 1035, 1036], "logspac": [4, 12, 73, 78, 103, 136, 137, 147, 151, 156, 168, 191, 202, 203, 231, 233, 248, 260, 272, 274, 283, 295, 303, 306, 332, 340, 809, 973, 974, 1008, 1009, 1011], "naive_linear_pipelin": 4, "142": [4, 58, 407], "014": [4, 380], "184": [4, 198, 298, 380, 1011], "020": [4, 986], "three": [4, 7, 26, 40, 41, 46, 55, 58, 78, 90, 91, 110, 115, 117, 120, 122, 131, 132, 133, 144, 158, 168, 182, 190, 195, 198, 200, 207, 209, 233, 234, 244, 247, 307, 308, 312, 336, 361, 367, 371, 378, 390, 397, 400, 404, 405, 406, 408, 442, 453, 489, 700, 929, 971, 973, 974, 975, 978, 981, 988, 992, 993, 997, 1004, 1012, 1020], "higher": [4, 57, 80, 98, 103, 110, 113, 115, 116, 123, 126, 150, 152, 157, 158, 168, 169, 170, 174, 198, 199, 202, 216, 223, 224, 250, 253, 257, 259, 262, 273, 284, 306, 332, 345, 346, 347, 356, 360, 369, 372, 376, 397, 400, 402, 407, 409, 410, 411, 435, 439, 440, 462, 469, 500, 523, 530, 534, 539, 544, 545, 548, 549, 550, 551, 552, 553, 555, 556, 557, 564, 579, 582, 598, 599, 610, 618, 622, 626, 628, 637, 638, 643, 644, 651, 652, 653, 654, 667, 669, 670, 695, 714, 718, 742, 775, 785, 787, 790, 791, 793, 801, 808, 809, 814, 817, 836, 839, 865, 882, 883, 884, 892, 893, 894, 895, 896, 903, 970, 974, 975, 977, 978, 981, 985, 988, 992, 993, 1011, 1013, 1021, 1026, 1028, 1035], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 30, 46, 47, 48, 51, 56, 58, 74, 75, 95, 97, 98, 105, 128, 143, 144, 150, 152, 154, 155, 162, 163, 169, 174, 186, 187, 202, 219, 220, 221, 223, 224, 231, 232, 233, 250, 256, 262, 287, 298, 302, 306, 317, 321, 338, 345, 347, 356, 369, 371, 373, 374, 376, 378, 379, 385, 387, 394, 397, 400, 401, 404, 405, 407, 408, 410, 411, 412, 413, 425, 428, 432, 434, 435, 436, 437, 438, 440, 441, 450, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 484, 485, 486, 492, 510, 522, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 567, 572, 573, 575, 579, 581, 582, 585, 598, 599, 601, 602, 605, 621, 623, 626, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 683, 687, 692, 718, 753, 759, 787, 788, 789, 790, 791, 794, 796, 801, 805, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 836, 837, 840, 841, 847, 848, 850, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 866, 867, 868, 869, 870, 879, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 908, 910, 911, 915, 916, 937, 949, 952, 971, 972, 974, 975, 977, 978, 981, 984, 989, 990, 991, 992, 995, 998, 1002, 1004, 1013, 1023, 1024, 1026, 1028, 1030, 1032, 1034, 1036], "mere": [4, 259, 387, 817, 992], "min": [4, 9, 10, 11, 12, 13, 25, 27, 31, 52, 58, 75, 90, 95, 98, 110, 112, 119, 122, 123, 128, 139, 152, 154, 155, 156, 163, 168, 180, 186, 187, 193, 200, 201, 204, 212, 220, 231, 232, 235, 277, 285, 286, 292, 295, 297, 301, 303, 304, 306, 325, 331, 338, 341, 383, 400, 403, 405, 473, 474, 475, 476, 503, 525, 526, 529, 531, 532, 540, 541, 554, 618, 622, 623, 645, 646, 647, 648, 673, 674, 695, 731, 747, 770, 790, 791, 839, 847, 848, 860, 869, 876, 927, 943, 974, 978, 981, 988, 1026, 1029, 1031, 1032, 1035], "properli": [4, 25, 55, 127, 155, 254, 311, 362, 372, 374, 378, 382, 390, 406, 890, 891, 892, 893, 894, 895, 896, 967, 1023, 1025, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "automat": [4, 8, 12, 46, 63, 65, 71, 103, 136, 146, 177, 201, 244, 245, 257, 260, 301, 308, 312, 316, 324, 334, 361, 363, 369, 372, 374, 376, 378, 382, 387, 390, 396, 400, 401, 402, 405, 407, 408, 409, 424, 441, 443, 447, 453, 455, 456, 458, 487, 490, 506, 529, 531, 532, 538, 540, 542, 548, 552, 555, 574, 579, 582, 585, 593, 634, 636, 637, 638, 643, 644, 649, 650, 651, 652, 653, 654, 657, 658, 659, 663, 665, 666, 667, 669, 672, 675, 678, 679, 682, 686, 789, 804, 807, 816, 826, 847, 848, 851, 852, 854, 863, 864, 871, 882, 883, 890, 891, 892, 895, 898, 900, 904, 916, 949, 952, 967, 969, 972, 977, 982, 988, 992, 994, 998, 999, 1008, 1020, 1023, 1024, 1025, 1031, 1034, 1035, 1036, 1037], "term": [4, 13, 14, 25, 32, 58, 100, 113, 116, 120, 123, 155, 167, 182, 186, 187, 198, 200, 202, 212, 215, 216, 257, 261, 279, 295, 314, 340, 345, 347, 362, 363, 374, 376, 378, 385, 394, 398, 399, 400, 402, 404, 405, 407, 410, 434, 438, 440, 443, 450, 453, 515, 526, 529, 531, 535, 538, 540, 579, 580, 581, 582, 595, 598, 599, 623, 624, 631, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 665, 666, 667, 669, 671, 678, 686, 847, 848, 865, 869, 872, 890, 891, 892, 893, 894, 895, 896, 967, 969, 972, 973, 974, 975, 978, 979, 980, 982, 983, 988, 992, 993, 1004, 1013, 1028, 1034, 1035, 1036], "raw": [4, 12, 14, 37, 81, 97, 130, 155, 168, 174, 298, 308, 322, 347, 360, 369, 382, 387, 398, 399, 400, 402, 405, 408, 460, 465, 492, 493, 494, 550, 551, 552, 554, 573, 579, 580, 581, 582, 625, 668, 681, 685, 696, 776, 836, 894, 975, 978, 982, 984, 985, 988, 991, 1010, 1012, 1021, 1025, 1028, 1031], "recogn": [4, 29, 35, 86, 118, 165, 199, 314, 380, 391, 400, 408, 493, 688, 704, 816, 895, 978, 1004, 1037], "increas": [4, 7, 14, 26, 37, 43, 55, 57, 58, 61, 75, 98, 110, 111, 113, 116, 119, 127, 143, 150, 154, 155, 156, 159, 168, 169, 174, 178, 180, 189, 198, 199, 200, 202, 216, 224, 231, 245, 246, 259, 260, 261, 266, 272, 295, 302, 303, 306, 313, 321, 332, 340, 346, 347, 350, 360, 361, 362, 373, 382, 383, 398, 400, 402, 405, 407, 408, 411, 431, 435, 437, 443, 454, 462, 463, 469, 523, 527, 544, 545, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 579, 582, 618, 626, 627, 628, 636, 641, 642, 645, 646, 647, 649, 650, 657, 659, 667, 668, 669, 673, 674, 676, 677, 683, 697, 698, 703, 772, 779, 790, 791, 819, 838, 840, 841, 842, 845, 847, 848, 864, 890, 891, 898, 899, 900, 901, 927, 967, 969, 973, 974, 975, 977, 978, 981, 988, 992, 993, 994, 1002, 1020, 1022, 1025, 1029, 1031, 1032, 1035], "strong": [4, 165, 167, 168, 176, 191, 195, 202, 204, 217, 233, 308, 399, 405, 407, 410, 515, 640, 663, 971, 972, 974, 975, 977, 985, 993, 1011], "similar": [4, 5, 7, 12, 17, 20, 25, 26, 37, 49, 51, 57, 60, 75, 86, 95, 99, 110, 123, 146, 150, 157, 167, 168, 169, 170, 182, 198, 200, 212, 219, 221, 222, 223, 227, 233, 234, 250, 256, 259, 262, 265, 266, 267, 277, 279, 301, 314, 331, 340, 346, 347, 356, 360, 366, 368, 370, 372, 373, 374, 376, 379, 380, 383, 385, 387, 394, 397, 398, 400, 403, 404, 405, 407, 408, 409, 410, 411, 431, 432, 434, 435, 436, 441, 443, 445, 446, 494, 499, 500, 527, 573, 580, 581, 582, 601, 668, 683, 686, 694, 696, 706, 710, 715, 718, 719, 721, 724, 728, 730, 745, 750, 751, 776, 780, 781, 784, 785, 786, 812, 817, 862, 883, 886, 890, 891, 892, 893, 911, 967, 970, 971, 973, 974, 975, 977, 979, 981, 982, 984, 985, 988, 990, 991, 992, 993, 994, 998, 999, 1004, 1012, 1015, 1020, 1024, 1025, 1026, 1028, 1032, 1033], "magnitud": [4, 105, 112, 151, 163, 168, 215, 264, 301, 306, 314, 360, 369, 380, 400, 407, 410, 604, 643, 695, 870, 974, 978, 982, 988, 992, 994, 1022, 1029], "discret": [4, 46, 105, 108, 110, 134, 149, 160, 165, 169, 198, 216, 300, 304, 309, 362, 366, 369, 370, 378, 386, 387, 400, 405, 407, 408, 410, 429, 430, 439, 443, 451, 452, 453, 483, 505, 506, 511, 513, 544, 550, 562, 579, 580, 583, 586, 587, 590, 591, 598, 599, 601, 602, 603, 607, 608, 609, 648, 649, 732, 784, 787, 798, 816, 825, 826, 829, 851, 855, 863, 864, 867, 870, 879, 890, 895, 898, 899, 941, 967, 974, 975, 976, 978, 979, 981, 994, 998, 1004, 1015, 1022, 1025, 1033, 1034, 1035], "manner": [4, 75, 95, 144, 169, 174, 246, 315, 316, 361, 374, 380, 400, 405, 407, 408, 700, 830, 831, 967, 978, 994, 1023, 1030], "uniqu": [4, 16, 24, 30, 42, 47, 48, 57, 58, 63, 67, 117, 118, 124, 125, 168, 170, 182, 213, 216, 246, 268, 288, 307, 308, 317, 323, 345, 346, 347, 368, 376, 383, 387, 400, 401, 404, 407, 408, 431, 441, 445, 447, 455, 458, 487, 540, 541, 542, 544, 545, 548, 549, 550, 551, 552, 553, 555, 556, 557, 601, 624, 625, 626, 657, 659, 667, 688, 700, 744, 772, 787, 789, 801, 813, 818, 819, 822, 828, 837, 842, 847, 861, 863, 864, 871, 874, 890, 892, 898, 899, 900, 901, 915, 927, 941, 942, 974, 979, 988, 1002, 1011, 1028, 1031, 1032, 1034, 1035, 1036], "decid": [4, 11, 57, 60, 71, 250, 256, 259, 266, 369, 374, 388, 408, 410, 441, 448, 550, 551, 602, 626, 637, 638, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 662, 672, 675, 785, 832, 833, 834, 836, 838, 840, 841, 842, 853, 977, 984, 1002, 1033, 1036], "therebi": [4, 168, 404, 407, 970, 1030], "assumpt": [4, 9, 25, 27, 36, 68, 78, 79, 98, 155, 165, 167, 198, 227, 301, 380, 385, 386, 389, 398, 399, 400, 402, 404, 405, 408, 410, 438, 442, 444, 479, 494, 503, 523, 525, 532, 641, 645, 786, 787, 790, 791, 801, 827, 882, 883, 972, 974, 978, 979, 980, 981, 983, 984, 985, 988, 991, 994, 1027, 1033], "impli": [4, 150, 345, 346, 347, 405, 407, 410, 465, 564, 573, 601, 602, 613, 725, 914, 974, 975, 1013, 1031], "give": [4, 12, 13, 24, 25, 39, 44, 49, 60, 62, 64, 70, 71, 75, 97, 122, 150, 155, 159, 162, 168, 169, 187, 189, 195, 198, 199, 200, 227, 250, 256, 261, 268, 281, 285, 288, 298, 314, 315, 324, 360, 362, 369, 371, 373, 374, 376, 380, 382, 385, 386, 387, 388, 394, 397, 398, 399, 400, 401, 402, 405, 407, 408, 412, 425, 437, 438, 440, 442, 450, 463, 487, 490, 494, 524, 529, 540, 541, 542, 543, 548, 549, 555, 556, 557, 584, 585, 588, 598, 599, 629, 638, 652, 656, 667, 711, 720, 726, 729, 782, 787, 790, 791, 801, 811, 812, 813, 815, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 867, 868, 870, 871, 879, 974, 978, 981, 982, 983, 985, 986, 988, 992, 993, 994, 998, 1002, 1004, 1006, 1011, 1012, 1013, 1020, 1024, 1027, 1028, 1030, 1031, 1032, 1034, 1036], "lot": [4, 82, 168, 202, 369, 374, 375, 376, 382, 405, 407, 790, 791, 882, 883, 967, 990, 992, 993, 998, 999, 1002, 1012, 1013, 1020, 1025, 1027, 1028, 1029, 1030, 1032], "addit": [4, 5, 7, 12, 13, 14, 66, 71, 82, 95, 98, 110, 114, 116, 117, 120, 121, 146, 155, 156, 157, 163, 168, 169, 177, 182, 187, 199, 200, 202, 223, 238, 261, 268, 273, 277, 301, 312, 313, 322, 347, 352, 356, 360, 361, 366, 367, 368, 369, 370, 372, 373, 374, 376, 379, 380, 382, 385, 386, 388, 390, 394, 399, 400, 402, 404, 405, 408, 409, 410, 411, 424, 432, 433, 435, 436, 437, 441, 448, 460, 465, 487, 494, 523, 525, 527, 528, 530, 532, 533, 534, 540, 544, 545, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 573, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 602, 603, 610, 619, 621, 622, 626, 629, 630, 631, 632, 633, 634, 635, 636, 661, 678, 679, 683, 689, 690, 693, 732, 748, 749, 778, 780, 785, 786, 793, 809, 819, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 867, 868, 869, 870, 872, 882, 883, 890, 891, 921, 927, 946, 967, 972, 974, 978, 979, 981, 982, 985, 988, 990, 991, 992, 993, 994, 998, 1004, 1015, 1020, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "level": [4, 9, 11, 12, 16, 27, 41, 53, 95, 115, 119, 139, 147, 149, 154, 155, 157, 160, 165, 168, 169, 209, 210, 211, 212, 213, 216, 227, 231, 232, 248, 259, 262, 268, 269, 285, 292, 330, 331, 333, 334, 336, 338, 346, 354, 360, 369, 371, 372, 374, 380, 387, 389, 390, 391, 398, 405, 408, 414, 445, 459, 484, 485, 494, 512, 522, 527, 528, 538, 552, 553, 558, 559, 602, 613, 616, 657, 658, 659, 667, 668, 669, 678, 681, 683, 685, 691, 693, 707, 713, 718, 775, 811, 812, 813, 815, 818, 819, 846, 847, 848, 888, 903, 967, 974, 978, 979, 981, 986, 992, 994, 998, 999, 1013, 1023, 1031, 1034, 1035, 1036], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": 4, "011": [4, 267, 279, 346, 380], "131": [4, 13, 56, 309, 380, 978, 1021], "rate": [4, 109, 110, 114, 120, 142, 169, 198, 205, 216, 231, 237, 256, 259, 266, 268, 269, 296, 297, 298, 362, 374, 400, 401, 405, 409, 437, 457, 527, 544, 545, 550, 551, 552, 553, 583, 586, 587, 589, 590, 591, 597, 635, 636, 659, 667, 668, 669, 683, 689, 693, 717, 772, 779, 846, 847, 848, 884, 967, 974, 975, 978, 981, 982, 992, 994, 1002, 1024, 1028, 1029], "better": [4, 5, 9, 19, 20, 24, 31, 50, 55, 74, 75, 78, 79, 80, 81, 86, 90, 95, 98, 113, 116, 122, 123, 130, 142, 154, 155, 156, 158, 162, 170, 178, 182, 184, 187, 198, 199, 200, 206, 213, 215, 216, 223, 232, 233, 234, 249, 253, 259, 261, 262, 265, 268, 269, 298, 305, 306, 315, 316, 332, 345, 346, 347, 350, 356, 360, 369, 373, 374, 375, 376, 378, 379, 380, 382, 387, 389, 394, 398, 400, 402, 404, 405, 406, 407, 408, 410, 440, 441, 529, 531, 538, 550, 551, 552, 553, 598, 599, 621, 662, 668, 683, 700, 715, 724, 729, 732, 753, 786, 815, 825, 826, 827, 828, 829, 830, 831, 836, 847, 848, 867, 868, 871, 879, 882, 883, 890, 891, 946, 967, 968, 970, 971, 972, 974, 975, 977, 978, 980, 981, 982, 986, 988, 991, 992, 994, 999, 1001, 1002, 1006, 1008, 1013, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "confirm": [4, 86, 113, 120, 123, 170, 198, 200, 262, 265, 268, 306, 347, 378, 967, 988, 1028], "progress": [4, 7, 8, 95, 133, 147, 163, 191, 284, 315, 371, 374, 378, 379, 388, 390, 396, 400, 550, 551, 683, 819, 821, 824, 839, 847, 848, 1002, 1011, 1013, 1020, 1022, 1029, 1034], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 60, 62, 80, 81, 82, 85, 92, 98, 101, 123, 128, 136, 155, 162, 168, 169, 170, 187, 198, 199, 200, 203, 206, 216, 223, 227, 233, 234, 244, 261, 262, 265, 266, 268, 269, 274, 279, 297, 301, 314, 320, 323, 332, 342, 345, 347, 356, 360, 369, 373, 374, 376, 379, 380, 382, 385, 386, 387, 394, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 433, 438, 443, 453, 462, 463, 469, 491, 495, 501, 548, 549, 552, 553, 555, 556, 558, 559, 580, 581, 613, 641, 642, 645, 646, 647, 655, 673, 674, 676, 682, 683, 686, 696, 733, 736, 780, 785, 787, 795, 797, 801, 804, 807, 830, 831, 855, 859, 860, 861, 870, 882, 883, 892, 895, 898, 899, 900, 901, 927, 967, 970, 971, 973, 974, 975, 976, 977, 978, 981, 982, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1011, 1012, 1020, 1025, 1026, 1028, 1031, 1033, 1035, 1036], "new": [4, 7, 8, 10, 50, 56, 58, 60, 70, 71, 103, 109, 110, 112, 114, 115, 116, 123, 129, 130, 144, 147, 150, 156, 163, 170, 171, 198, 204, 212, 227, 258, 261, 266, 283, 285, 307, 312, 315, 321, 324, 331, 356, 361, 362, 368, 369, 371, 372, 373, 376, 377, 378, 380, 382, 383, 386, 387, 388, 390, 398, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 422, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 491, 492, 493, 495, 496, 499, 500, 501, 503, 514, 517, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 692, 693, 695, 699, 704, 705, 709, 712, 713, 714, 715, 717, 718, 719, 720, 721, 724, 729, 730, 731, 733, 736, 743, 744, 747, 751, 756, 757, 759, 768, 772, 773, 774, 775, 777, 778, 779, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 800, 801, 805, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 876, 878, 879, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 908, 910, 911, 913, 921, 922, 926, 927, 934, 935, 936, 937, 938, 941, 944, 946, 948, 953, 959, 965, 967, 968, 970, 974, 978, 979, 981, 982, 983, 984, 988, 990, 991, 992, 993, 999, 1002, 1004, 1005, 1008, 1011, 1013, 1018, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 369, 374, 975, 997], "1440": 4, "caus": [4, 25, 27, 123, 151, 168, 196, 198, 202, 203, 216, 308, 347, 356, 372, 379, 398, 400, 405, 406, 408, 410, 434, 438, 440, 450, 500, 523, 573, 580, 601, 602, 825, 826, 827, 829, 854, 863, 865, 868, 869, 910, 911, 967, 968, 974, 978, 986, 988, 991, 999, 1004, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1036], "signific": [4, 55, 116, 123, 143, 165, 202, 216, 252, 259, 275, 277, 279, 345, 356, 368, 369, 385, 400, 403, 404, 407, 495, 523, 525, 540, 541, 618, 649, 650, 657, 659, 667, 668, 669, 806, 815, 890, 892, 893, 894, 895, 896, 977, 978, 981, 1020, 1022, 1023, 1024, 1028], "overfit": [4, 115, 123, 165, 169, 170, 177, 202, 227, 246, 252, 254, 260, 264, 274, 275, 295, 302, 303, 305, 306, 307, 308, 332, 350, 352, 353, 369, 387, 398, 404, 407, 428, 479, 480, 558, 559, 648, 787, 790, 791, 801, 812, 813, 847, 848, 850, 865, 869, 973, 982, 984, 986, 988, 994, 1002, 1011, 1023], "avoid": [4, 7, 12, 44, 57, 62, 72, 115, 116, 168, 169, 200, 202, 207, 216, 222, 234, 254, 260, 264, 282, 287, 289, 290, 305, 306, 328, 329, 346, 361, 372, 374, 375, 376, 378, 379, 380, 387, 388, 390, 394, 398, 400, 402, 404, 407, 408, 411, 431, 433, 435, 443, 453, 459, 484, 485, 486, 490, 499, 500, 525, 530, 534, 537, 576, 577, 625, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 680, 682, 684, 686, 703, 780, 787, 788, 792, 798, 801, 811, 812, 813, 850, 853, 859, 860, 862, 867, 868, 869, 870, 873, 875, 876, 877, 879, 880, 881, 883, 888, 927, 972, 975, 977, 978, 981, 982, 984, 986, 988, 993, 994, 999, 1013, 1015, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "kbinsdiscret": [4, 53, 165, 198, 216, 300, 303, 308, 309, 316, 503, 648, 853, 869, 899, 988, 1028, 1032, 1033, 1034, 1036], "re": [4, 8, 13, 26, 56, 70, 71, 110, 120, 153, 167, 216, 234, 245, 249, 262, 264, 268, 312, 345, 347, 361, 374, 375, 378, 382, 386, 388, 391, 398, 404, 408, 460, 461, 462, 463, 464, 465, 466, 467, 546, 547, 552, 553, 554, 637, 643, 651, 653, 789, 804, 807, 898, 899, 900, 901, 974, 979, 981, 988, 993, 999, 1002, 1013, 1020, 1024, 1025, 1027, 1029], "fine": [4, 37, 119, 202, 214, 250, 257, 352, 353, 371, 378, 387, 408, 437, 927, 981, 984, 999, 1030], "grain": [4, 31, 37, 232, 250, 303, 380, 408, 437, 999], "still": [4, 32, 44, 53, 55, 57, 62, 82, 99, 118, 120, 123, 130, 150, 156, 167, 168, 170, 177, 182, 198, 200, 216, 232, 262, 268, 301, 313, 314, 317, 345, 346, 356, 362, 368, 373, 374, 376, 378, 379, 380, 382, 385, 387, 400, 404, 407, 408, 411, 431, 435, 445, 465, 487, 618, 623, 626, 628, 708, 746, 768, 771, 780, 781, 790, 791, 804, 807, 868, 870, 890, 908, 967, 968, 972, 974, 977, 981, 984, 986, 993, 994, 997, 999, 1002, 1020, 1022, 1025, 1026, 1028, 1029, 1030, 1033, 1034, 1035, 1036], "express": [4, 7, 12, 110, 116, 150, 155, 168, 259, 260, 307, 313, 329, 347, 368, 369, 374, 375, 380, 400, 405, 408, 441, 447, 448, 579, 580, 582, 707, 787, 793, 801, 809, 811, 812, 813, 814, 817, 837, 974, 978, 982, 988, 989, 994, 1028], "advantag": [4, 5, 39, 55, 57, 95, 100, 198, 199, 227, 245, 260, 315, 356, 387, 398, 404, 405, 408, 410, 432, 436, 451, 525, 580, 640, 665, 666, 753, 818, 819, 820, 850, 851, 890, 891, 892, 893, 894, 895, 896, 967, 970, 973, 974, 975, 978, 979, 981, 982, 988, 992, 993, 994, 1023], "final": [4, 26, 40, 42, 55, 70, 71, 80, 82, 86, 91, 100, 109, 110, 111, 113, 115, 120, 121, 124, 130, 133, 144, 155, 163, 167, 169, 174, 177, 182, 186, 187, 195, 198, 200, 215, 216, 220, 227, 241, 248, 257, 265, 279, 307, 308, 311, 312, 332, 360, 362, 372, 374, 375, 378, 386, 387, 397, 398, 400, 401, 404, 407, 408, 428, 433, 438, 439, 443, 450, 453, 455, 527, 546, 547, 558, 559, 561, 618, 638, 644, 650, 670, 681, 685, 710, 787, 818, 819, 850, 851, 887, 890, 967, 968, 974, 975, 978, 981, 984, 985, 988, 991, 1002, 1011, 1025, 1028, 1029, 1030, 1031, 1033], "observ": [4, 5, 7, 9, 11, 13, 16, 20, 24, 27, 37, 40, 43, 53, 62, 71, 78, 80, 81, 82, 96, 97, 100, 103, 109, 110, 113, 114, 116, 117, 123, 126, 129, 138, 139, 147, 150, 153, 155, 156, 157, 159, 168, 169, 170, 177, 178, 193, 194, 196, 198, 199, 200, 202, 212, 216, 223, 224, 230, 231, 255, 259, 261, 262, 266, 279, 285, 292, 306, 317, 323, 331, 332, 337, 340, 345, 346, 347, 352, 353, 369, 371, 387, 390, 398, 400, 401, 402, 403, 404, 405, 406, 409, 410, 432, 434, 436, 437, 438, 440, 450, 451, 460, 461, 462, 463, 464, 465, 466, 467, 515, 523, 542, 543, 554, 601, 602, 637, 643, 648, 692, 707, 709, 748, 808, 828, 836, 869, 871, 974, 977, 978, 982, 983, 984, 985, 988, 991, 992, 993, 994, 1001, 1005, 1007, 1008, 1010, 1021, 1033, 1034, 1035, 1036], "complet": [4, 37, 38, 39, 44, 49, 52, 58, 62, 86, 128, 142, 144, 147, 165, 170, 171, 204, 226, 227, 234, 242, 257, 306, 308, 311, 346, 356, 369, 374, 378, 379, 382, 385, 401, 404, 405, 407, 408, 432, 436, 440, 443, 453, 454, 455, 458, 486, 527, 528, 529, 530, 535, 537, 549, 560, 561, 572, 578, 579, 580, 582, 618, 619, 620, 621, 636, 640, 648, 662, 664, 695, 696, 706, 707, 708, 721, 726, 727, 747, 776, 783, 818, 821, 824, 833, 849, 850, 851, 852, 913, 963, 967, 972, 974, 978, 979, 981, 993, 994, 1004, 1013, 1020, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "induct": [4, 36, 68, 123, 165, 387, 400, 407, 414, 432, 503, 555, 618, 622, 885, 886, 939, 962, 974, 991, 1022], "bia": [4, 27, 78, 108, 117, 118, 123, 134, 165, 168, 170, 177, 178, 180, 264, 295, 340, 356, 369, 376, 387, 398, 402, 406, 407, 410, 515, 547, 550, 551, 598, 599, 605, 633, 639, 640, 649, 650, 660, 661, 671, 847, 848, 863, 865, 869, 875, 876, 878, 879, 880, 881, 899, 973, 974, 977, 978, 982, 983, 986, 992, 1011], "preserv": [4, 48, 100, 223, 231, 254, 376, 377, 399, 404, 405, 408, 572, 579, 580, 582, 637, 643, 687, 764, 768, 805, 806, 807, 874, 910, 911, 968, 974, 975, 988, 990, 1008, 1020, 1023, 1024, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036], "smooth": [4, 46, 47, 54, 155, 191, 199, 214, 307, 332, 371, 388, 400, 406, 410, 439, 440, 528, 529, 530, 537, 548, 549, 550, 551, 555, 556, 557, 581, 582, 610, 613, 667, 825, 826, 827, 829, 867, 871, 879, 898, 899, 900, 901, 974, 980, 988, 992, 993, 994, 1013], "local": [4, 20, 39, 57, 61, 95, 98, 116, 127, 155, 156, 165, 169, 199, 218, 221, 223, 225, 227, 237, 280, 293, 352, 353, 361, 371, 372, 374, 378, 380, 382, 390, 400, 405, 407, 408, 410, 438, 443, 453, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 493, 529, 531, 535, 538, 540, 550, 551, 554, 557, 601, 602, 679, 680, 681, 682, 683, 684, 686, 687, 748, 749, 833, 836, 839, 841, 851, 860, 883, 886, 894, 944, 976, 977, 981, 982, 994, 1012, 1014, 1015, 1024, 1028, 1032, 1035], "attempt": [4, 54, 169, 194, 204, 254, 345, 360, 373, 387, 400, 412, 437, 441, 448, 459, 622, 679, 680, 684, 805, 832, 833, 834, 836, 838, 840, 841, 842, 868, 870, 888, 910, 911, 974, 975, 981, 994, 1004, 1027, 1032], "each": [4, 7, 8, 10, 11, 12, 14, 17, 20, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 55, 58, 60, 61, 70, 71, 73, 74, 75, 85, 86, 89, 91, 92, 95, 96, 100, 103, 104, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 143, 145, 147, 152, 154, 159, 162, 163, 167, 168, 169, 171, 174, 177, 184, 185, 187, 192, 196, 198, 199, 200, 202, 203, 206, 213, 216, 220, 227, 228, 231, 232, 233, 234, 235, 238, 239, 241, 244, 247, 249, 253, 254, 255, 257, 259, 260, 262, 264, 265, 268, 269, 277, 279, 282, 284, 288, 290, 292, 295, 296, 298, 301, 302, 303, 304, 306, 307, 308, 311, 313, 314, 315, 317, 320, 321, 322, 325, 332, 338, 340, 346, 347, 350, 351, 354, 356, 360, 361, 362, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 382, 383, 385, 386, 387, 391, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 417, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 452, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 510, 513, 514, 517, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 698, 699, 701, 704, 710, 715, 718, 719, 720, 728, 729, 735, 736, 738, 740, 741, 743, 744, 748, 749, 752, 753, 754, 755, 756, 758, 759, 760, 761, 763, 764, 766, 768, 769, 770, 771, 773, 774, 775, 777, 778, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 879, 880, 881, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 916, 921, 922, 927, 929, 930, 934, 946, 954, 955, 956, 959, 968, 970, 972, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 1002, 1004, 1008, 1010, 1011, 1012, 1013, 1020, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "sine": [4, 150, 155, 156, 165, 192, 204, 243, 251, 352, 370, 606, 785, 786, 977, 994], "cosin": [4, 40, 273, 279, 284, 366, 369, 387, 400, 405, 406, 432, 436, 441, 448, 526, 581, 582, 611, 687, 750, 751, 752, 755, 760, 761, 764, 768, 769, 770, 830, 831, 835, 862, 981, 994, 1015, 1030], "match": [4, 20, 37, 45, 95, 98, 102, 116, 165, 174, 176, 198, 217, 221, 230, 347, 369, 372, 376, 378, 400, 405, 407, 408, 421, 440, 455, 457, 499, 500, 506, 517, 522, 528, 533, 539, 542, 558, 559, 563, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 649, 655, 656, 676, 677, 694, 695, 696, 704, 706, 710, 724, 768, 769, 770, 776, 830, 831, 835, 839, 853, 854, 855, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 890, 897, 903, 914, 946, 975, 977, 978, 980, 981, 1000, 1004, 1013, 1015, 1020, 1026, 1027, 1028, 1030, 1032, 1033, 1036], "togeth": [4, 12, 51, 60, 71, 119, 130, 150, 156, 168, 179, 220, 223, 255, 307, 315, 335, 351, 356, 376, 378, 385, 386, 387, 394, 400, 407, 408, 415, 442, 444, 558, 559, 680, 706, 787, 801, 850, 851, 864, 974, 975, 979, 985, 988, 994, 995, 1002, 1005, 1007, 1026], "equival": [4, 14, 55, 57, 120, 126, 146, 150, 155, 168, 182, 216, 249, 268, 279, 306, 347, 356, 360, 372, 380, 383, 386, 387, 400, 401, 402, 403, 404, 405, 407, 409, 410, 432, 434, 435, 436, 437, 438, 440, 441, 448, 460, 465, 500, 525, 532, 549, 552, 553, 554, 556, 579, 582, 604, 607, 610, 612, 615, 637, 638, 639, 643, 645, 649, 650, 657, 658, 659, 660, 663, 667, 668, 671, 674, 678, 679, 684, 699, 700, 713, 724, 731, 737, 738, 739, 751, 760, 769, 770, 785, 786, 790, 791, 795, 797, 821, 824, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 847, 853, 859, 860, 862, 865, 866, 867, 868, 870, 878, 880, 881, 914, 925, 964, 967, 972, 974, 975, 976, 978, 984, 988, 992, 993, 994, 1028, 1029, 1030, 1031, 1033, 1034], "importantli": [4, 13, 96, 169, 174, 301, 400], "jump": [4, 199, 301, 371, 374, 408, 869], "functiontransform": [4, 70, 115, 198, 216, 324, 456, 988, 1025, 1026, 1028, 1033, 1034, 1035], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 56, 61, 70, 75, 92, 101, 103, 105, 110, 113, 115, 122, 123, 126, 130, 153, 156, 158, 163, 177, 178, 186, 187, 190, 198, 199, 206, 207, 208, 216, 234, 237, 240, 241, 247, 249, 254, 255, 256, 257, 258, 259, 260, 262, 263, 266, 273, 279, 284, 289, 292, 298, 301, 303, 306, 311, 328, 332, 345, 347, 350, 354, 360, 367, 368, 369, 374, 375, 376, 380, 381, 383, 385, 387, 398, 399, 400, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 932, 933, 934, 937, 938, 939, 940, 941, 942, 944, 945, 947, 948, 949, 950, 951, 952, 953, 959, 962, 963, 964, 965, 966, 968, 978, 981, 985, 986, 993, 994, 999, 1004, 1009, 1011, 1013, 1017, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "lambda": [4, 7, 8, 10, 19, 56, 73, 122, 137, 178, 216, 259, 260, 305, 324, 396, 400, 405, 407, 408, 635, 636, 637, 638, 854, 866, 974, 988, 1008, 1028, 1034], "sin": [4, 13, 19, 39, 96, 111, 122, 123, 127, 129, 142, 150, 156, 157, 159, 177, 178, 182, 192, 199, 204, 221, 233, 250, 291, 302, 312, 339, 352, 353, 410, 507, 606, 754, 1012], "pi": [4, 13, 34, 39, 40, 96, 105, 127, 129, 142, 150, 178, 182, 186, 192, 199, 221, 244, 245, 246, 249, 250, 273, 292, 312, 353, 390, 406, 410, 507, 508, 509, 606, 633, 972, 973, 974, 980, 1012], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 127, 129, 155, 165, 168, 199, 221, 259, 273, 315, 353, 378, 406, 408, 440, 442, 444, 479, 502, 582, 710, 754, 783, 973, 988, 1002, 1014, 1015], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 57, 62, 69, 76, 86, 98, 100, 110, 123, 125, 127, 146, 150, 151, 155, 157, 165, 166, 168, 169, 171, 172, 182, 198, 199, 200, 202, 203, 204, 218, 223, 225, 241, 245, 249, 259, 260, 261, 264, 267, 268, 298, 300, 302, 309, 312, 319, 326, 332, 337, 340, 341, 342, 345, 346, 347, 356, 361, 372, 374, 376, 379, 385, 387, 398, 400, 401, 405, 406, 407, 408, 410, 411, 428, 434, 435, 437, 438, 440, 441, 456, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 481, 487, 491, 505, 515, 516, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 580, 581, 582, 585, 597, 600, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 681, 682, 683, 692, 694, 743, 775, 785, 787, 788, 789, 790, 791, 792, 794, 796, 798, 801, 805, 806, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 836, 837, 840, 841, 847, 848, 850, 853, 854, 855, 856, 857, 859, 860, 862, 866, 867, 868, 869, 870, 871, 876, 879, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 910, 911, 927, 944, 952, 967, 972, 974, 975, 977, 978, 979, 985, 988, 991, 993, 994, 1009, 1011, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "expans": [4, 162, 313, 441, 865, 1029], "synthet": [4, 13, 25, 27, 31, 37, 42, 49, 117, 123, 128, 150, 155, 157, 169, 188, 200, 215, 295, 303, 340, 356, 360, 367, 377, 388, 400, 402, 409, 649, 650, 890, 891, 897, 972, 1011, 1026], "beyond": [4, 27, 199, 200, 360, 362, 373, 374, 385, 398, 407, 895, 975, 979, 988, 993, 999, 1028], "pd": [4, 12, 25, 71, 72, 73, 110, 116, 117, 123, 127, 155, 162, 167, 168, 169, 170, 177, 182, 187, 198, 202, 206, 216, 237, 238, 241, 249, 257, 259, 260, 262, 270, 271, 306, 307, 308, 314, 315, 340, 345, 346, 379, 387, 401, 455, 457, 618, 619, 620, 621, 623, 768, 908, 910, 911, 967, 968, 985, 988, 1031, 1033, 1034, 1035], "hour_df": 4, "datafram": [4, 25, 70, 71, 72, 73, 110, 116, 120, 123, 127, 155, 162, 167, 168, 169, 170, 177, 182, 187, 202, 206, 216, 238, 241, 249, 257, 259, 260, 262, 270, 271, 306, 307, 308, 314, 315, 316, 340, 345, 346, 368, 369, 374, 376, 379, 387, 401, 424, 433, 434, 436, 438, 440, 455, 457, 458, 459, 473, 474, 475, 476, 480, 481, 482, 483, 487, 491, 492, 493, 495, 496, 501, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 557, 558, 559, 560, 561, 572, 573, 574, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 679, 680, 683, 787, 790, 791, 801, 816, 834, 839, 842, 846, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 888, 906, 933, 949, 952, 967, 968, 999, 1013, 1023, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "arang": [4, 11, 13, 16, 40, 58, 60, 65, 73, 79, 80, 103, 106, 109, 119, 120, 121, 122, 124, 125, 128, 132, 143, 150, 152, 157, 158, 162, 163, 171, 182, 198, 201, 203, 207, 222, 230, 232, 254, 259, 262, 267, 270, 277, 279, 292, 295, 303, 314, 320, 321, 323, 325, 332, 339, 345, 347, 352, 353, 354, 356, 385, 397, 404, 408, 456, 535, 816, 865, 869, 973, 974, 982, 988, 992, 1009], "reshap": [4, 5, 6, 9, 13, 16, 24, 30, 32, 34, 46, 47, 48, 50, 51, 53, 54, 58, 72, 80, 85, 95, 98, 105, 113, 118, 119, 128, 139, 145, 150, 152, 153, 154, 155, 156, 157, 159, 177, 189, 195, 211, 212, 214, 215, 220, 222, 224, 227, 232, 236, 248, 257, 283, 285, 292, 295, 297, 298, 302, 303, 304, 308, 311, 314, 315, 317, 325, 331, 332, 336, 337, 338, 341, 342, 385, 397, 405, 407, 408, 436, 456, 575, 622, 816, 865, 869, 974, 988, 994, 1009, 1012, 1025], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 53, 58, 62, 90, 96, 99, 106, 128, 174, 189, 214, 216, 219, 220, 221, 222, 223, 224, 230, 231, 234, 235, 237, 241, 279, 283, 296, 301, 302, 306, 307, 308, 311, 314, 316, 317, 332, 345, 346, 347, 356, 366, 369, 376, 379, 380, 387, 396, 401, 405, 408, 409, 416, 424, 433, 434, 436, 438, 440, 455, 457, 459, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 679, 680, 681, 682, 683, 834, 839, 842, 846, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 888, 968, 970, 974, 979, 981, 988, 989, 990, 1004, 1009, 1012, 1013, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1034, 1036], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 49, 53, 61, 62, 68, 94, 107, 128, 165, 192, 199, 204, 219, 221, 224, 227, 230, 231, 329, 332, 368, 370, 374, 376, 383, 387, 400, 401, 405, 408, 410, 432, 443, 453, 455, 458, 479, 481, 482, 483, 484, 485, 491, 492, 493, 495, 501, 505, 524, 532, 540, 575, 577, 626, 634, 648, 663, 682, 728, 769, 811, 815, 819, 857, 906, 910, 911, 926, 941, 964, 965, 972, 974, 975, 978, 985, 989, 994, 1004, 1010, 1020, 1024, 1027, 1028, 1029, 1032, 1034], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 56, 57, 58, 59, 60, 62, 67, 80, 86, 90, 91, 92, 97, 99, 100, 101, 102, 104, 111, 112, 116, 119, 126, 128, 129, 131, 139, 142, 150, 151, 152, 154, 156, 157, 158, 159, 167, 168, 174, 178, 181, 188, 190, 194, 195, 196, 199, 200, 201, 207, 210, 211, 212, 215, 219, 220, 221, 222, 223, 224, 227, 232, 233, 235, 244, 245, 246, 247, 248, 249, 250, 254, 260, 262, 273, 279, 285, 286, 287, 288, 289, 290, 291, 295, 301, 303, 304, 306, 315, 322, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 345, 351, 352, 353, 402, 622, 692, 972, 974, 1011], "color": [4, 7, 8, 9, 10, 11, 12, 16, 20, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 78, 79, 80, 81, 82, 86, 91, 92, 95, 96, 97, 99, 102, 103, 104, 105, 109, 110, 111, 116, 119, 120, 121, 122, 125, 126, 127, 128, 130, 132, 136, 139, 150, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 168, 170, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 190, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 215, 216, 220, 221, 222, 224, 227, 231, 232, 233, 235, 238, 244, 245, 246, 247, 248, 249, 250, 254, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 277, 281, 282, 284, 285, 286, 287, 290, 291, 292, 295, 301, 302, 303, 305, 306, 307, 312, 322, 323, 325, 330, 331, 332, 333, 334, 336, 338, 339, 341, 351, 352, 368, 369, 371, 382, 400, 407, 408, 438, 484, 485, 497, 574, 575, 769, 952, 992, 994, 1025, 1030, 1032], "map": [4, 5, 10, 11, 17, 19, 26, 53, 100, 114, 122, 125, 128, 137, 150, 165, 174, 198, 219, 221, 226, 234, 242, 260, 263, 268, 282, 287, 290, 292, 300, 301, 309, 324, 332, 338, 346, 347, 368, 375, 385, 387, 391, 398, 399, 400, 401, 404, 405, 407, 408, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 487, 489, 493, 500, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 752, 755, 785, 786, 787, 790, 791, 798, 799, 801, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 878, 879, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 932, 936, 967, 970, 975, 978, 980, 990, 993, 994, 1028, 1029, 1030, 1032, 1033, 1034, 1035], "space": [4, 8, 10, 19, 31, 46, 48, 53, 57, 58, 60, 61, 63, 65, 70, 71, 74, 86, 95, 97, 104, 106, 115, 119, 123, 128, 144, 150, 156, 174, 182, 199, 219, 220, 221, 223, 231, 232, 233, 237, 238, 245, 250, 267, 270, 271, 279, 288, 289, 303, 313, 345, 346, 347, 354, 356, 360, 366, 369, 370, 371, 374, 381, 385, 386, 387, 397, 399, 400, 403, 405, 406, 407, 408, 410, 434, 438, 439, 440, 443, 453, 455, 456, 457, 458, 473, 474, 475, 489, 523, 525, 526, 529, 530, 531, 532, 534, 535, 540, 564, 573, 579, 580, 582, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 623, 624, 629, 631, 632, 633, 634, 679, 680, 681, 683, 684, 685, 687, 787, 790, 791, 793, 801, 809, 820, 830, 831, 838, 839, 840, 841, 850, 855, 856, 862, 867, 882, 883, 884, 903, 931, 970, 971, 972, 973, 974, 976, 978, 979, 981, 982, 983, 984, 988, 989, 990, 991, 992, 993, 994, 998, 999, 1004, 1011, 1013, 1014, 1015, 1020, 1021, 1023, 1028, 1029, 1030, 1034, 1035, 1036], "akin": [4, 199, 387], "sort": [4, 8, 10, 12, 19, 20, 24, 60, 70, 113, 120, 123, 129, 147, 177, 182, 198, 199, 216, 236, 259, 260, 263, 273, 291, 339, 345, 352, 353, 374, 378, 382, 383, 387, 404, 407, 408, 410, 525, 532, 546, 557, 572, 601, 608, 688, 703, 709, 719, 720, 728, 744, 773, 774, 777, 779, 787, 813, 825, 826, 827, 828, 829, 830, 831, 838, 840, 841, 842, 845, 855, 861, 863, 864, 867, 869, 871, 879, 892, 895, 927, 932, 974, 981, 984, 988, 1002, 1013, 1020, 1024, 1030, 1031, 1032, 1034, 1035], "analog": [4, 19, 125, 380, 407, 978, 979, 993, 1029], "clock": 4, "25th": [4, 868], "back": [4, 100, 239, 361, 374, 376, 388, 394, 401, 408, 425, 434, 437, 438, 450, 473, 474, 475, 499, 500, 524, 525, 526, 529, 531, 532, 535, 572, 621, 649, 650, 657, 659, 667, 668, 669, 718, 855, 857, 858, 859, 863, 864, 865, 867, 868, 870, 882, 883, 890, 974, 978, 982, 999, 1004, 1013, 1023, 1028, 1030, 1031, 1034], "natur": [4, 31, 116, 123, 157, 168, 169, 174, 182, 198, 199, 215, 216, 223, 244, 250, 268, 345, 374, 376, 387, 405, 407, 408, 411, 435, 441, 448, 542, 581, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 683, 695, 731, 745, 747, 832, 833, 834, 836, 838, 840, 841, 842, 869, 925, 974, 975, 977, 978, 981, 983, 988, 992, 998, 1001, 1020, 1028], "sp": [4, 168, 968, 1012], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 56, 57, 59, 60, 61, 65, 71, 72, 74, 86, 90, 91, 92, 100, 101, 102, 110, 112, 113, 119, 120, 126, 128, 129, 131, 132, 137, 139, 145, 151, 152, 153, 154, 158, 174, 181, 183, 188, 189, 190, 191, 193, 195, 196, 205, 207, 209, 210, 211, 212, 214, 215, 219, 220, 221, 223, 224, 232, 233, 235, 239, 245, 247, 248, 249, 250, 253, 254, 256, 257, 258, 259, 262, 264, 268, 270, 279, 282, 284, 285, 287, 288, 289, 290, 291, 292, 295, 296, 298, 301, 302, 303, 306, 311, 312, 313, 314, 315, 316, 317, 322, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 345, 351, 352, 353, 360, 361, 368, 369, 371, 372, 374, 375, 376, 377, 379, 382, 383, 385, 390, 391, 397, 398, 400, 401, 402, 403, 404, 405, 407, 409, 413, 428, 433, 434, 437, 438, 440, 450, 459, 466, 514, 519, 525, 529, 531, 532, 538, 540, 541, 581, 598, 599, 601, 622, 630, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 663, 664, 670, 676, 677, 679, 680, 683, 684, 699, 705, 706, 709, 721, 725, 731, 732, 748, 749, 787, 801, 809, 815, 825, 826, 827, 828, 829, 830, 831, 837, 839, 846, 861, 863, 864, 865, 869, 885, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 905, 910, 911, 941, 967, 970, 971, 973, 974, 975, 976, 978, 980, 981, 983, 985, 988, 990, 992, 993, 994, 998, 1002, 1004, 1008, 1009, 1011, 1012, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1036], "colorbar": [4, 11, 30, 40, 95, 106, 118, 126, 145, 151, 153, 154, 156, 169, 219, 231, 248, 270, 301, 332, 688, 1032], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 53, 80, 98, 248, 251, 314, 525, 967, 978, 988], "166": [4, 298, 380, 978, 1020], "simpl": [4, 16, 27, 55, 71, 75, 78, 85, 86, 95, 116, 121, 157, 165, 169, 182, 199, 215, 240, 260, 280, 293, 315, 328, 345, 347, 351, 356, 372, 374, 376, 377, 378, 379, 381, 385, 386, 387, 388, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 414, 421, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 453, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 505, 513, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 776, 778, 785, 786, 787, 790, 791, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 934, 970, 972, 973, 974, 975, 977, 978, 981, 988, 990, 992, 994, 999, 1002, 1004, 1013, 1017, 1020], "wors": [4, 86, 110, 151, 169, 204, 259, 267, 306, 356, 398, 400, 410, 423, 456, 473, 474, 475, 543, 545, 547, 549, 551, 553, 556, 559, 561, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 660, 661, 663, 664, 669, 670, 671, 696, 712, 713, 714, 718, 775, 823, 824, 833, 841, 848, 891, 893, 896, 899, 901, 978, 988, 1029], "further": [4, 25, 42, 71, 78, 86, 95, 113, 119, 121, 146, 150, 155, 168, 170, 177, 182, 219, 224, 234, 256, 259, 260, 266, 316, 332, 346, 354, 360, 374, 385, 387, 399, 400, 402, 405, 407, 408, 410, 443, 453, 506, 523, 526, 573, 605, 613, 619, 649, 650, 657, 659, 667, 668, 669, 682, 686, 727, 764, 768, 771, 780, 781, 826, 832, 833, 840, 841, 868, 870, 890, 892, 895, 927, 977, 978, 980, 981, 982, 984, 988, 992, 993, 1011, 1013, 1029, 1033], "analyz": [4, 7, 17, 182, 261, 268, 316, 345, 347, 379, 380, 400, 408, 494, 579, 580, 582, 778, 975, 978, 985, 986, 994, 1013, 1020, 1029], "reason": [4, 8, 12, 42, 53, 70, 123, 147, 168, 169, 174, 198, 199, 206, 216, 227, 231, 232, 234, 237, 256, 259, 260, 265, 279, 302, 306, 346, 347, 356, 360, 361, 362, 369, 373, 374, 376, 378, 382, 385, 386, 387, 388, 400, 401, 402, 405, 407, 408, 410, 499, 523, 565, 629, 637, 643, 645, 663, 678, 683, 753, 787, 801, 834, 839, 846, 865, 887, 967, 968, 973, 974, 975, 978, 980, 981, 982, 984, 988, 992, 993, 1002, 1013, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "disappoint": 4, "outcom": [4, 116, 168, 387, 407, 560, 649, 700, 732, 782, 818, 885, 886, 887, 892, 895, 974, 978, 994, 1001, 1013, 1024, 1028, 1030], "altern": [4, 26, 71, 86, 117, 118, 124, 130, 170, 182, 198, 216, 228, 247, 250, 268, 311, 345, 346, 347, 356, 369, 377, 378, 380, 385, 387, 388, 390, 395, 397, 398, 400, 401, 402, 404, 405, 407, 408, 410, 432, 433, 436, 437, 438, 443, 449, 454, 490, 529, 531, 532, 538, 544, 545, 548, 549, 550, 551, 555, 556, 557, 573, 579, 580, 582, 608, 611, 634, 683, 697, 699, 761, 764, 768, 771, 789, 819, 854, 860, 863, 876, 883, 885, 898, 899, 900, 901, 945, 946, 972, 974, 975, 977, 978, 981, 982, 986, 988, 990, 991, 993, 994, 999, 1008, 1013, 1015, 1025, 1027, 1033, 1034], "larger": [4, 7, 27, 37, 39, 42, 47, 55, 80, 82, 92, 105, 113, 124, 151, 156, 157, 163, 168, 169, 174, 178, 182, 213, 214, 215, 224, 231, 233, 244, 250, 260, 262, 268, 269, 279, 281, 295, 296, 298, 301, 332, 346, 347, 367, 369, 374, 380, 385, 387, 397, 398, 400, 401, 402, 404, 405, 407, 408, 410, 431, 434, 440, 441, 443, 445, 447, 506, 518, 532, 535, 552, 553, 554, 558, 559, 573, 580, 634, 643, 663, 664, 665, 666, 670, 678, 683, 695, 710, 726, 785, 835, 836, 867, 869, 870, 871, 879, 884, 926, 927, 949, 952, 970, 971, 974, 975, 977, 978, 981, 982, 986, 988, 992, 993, 1011, 1013, 1024, 1025, 1028, 1029, 1030, 1033, 1034], "periodic_spline_transform": 4, "n_spline": [4, 869], "none": [4, 8, 9, 10, 16, 17, 26, 33, 39, 41, 42, 44, 52, 53, 54, 55, 56, 62, 97, 100, 105, 114, 119, 120, 122, 125, 139, 151, 157, 158, 171, 177, 198, 199, 206, 209, 216, 219, 233, 234, 235, 253, 259, 260, 271, 284, 286, 290, 304, 305, 308, 313, 314, 321, 324, 330, 332, 333, 336, 337, 339, 345, 346, 369, 371, 374, 376, 381, 383, 387, 391, 400, 404, 407, 410, 411, 412, 416, 417, 418, 419, 421, 422, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 494, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 698, 699, 700, 702, 703, 704, 705, 707, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 722, 724, 725, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 879, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 910, 911, 913, 914, 915, 916, 919, 921, 926, 927, 930, 931, 932, 933, 937, 938, 941, 944, 946, 947, 949, 952, 953, 959, 962, 963, 965, 967, 974, 978, 988, 991, 994, 1004, 1008, 1013, 1015, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "degre": [4, 16, 34, 97, 112, 155, 162, 167, 169, 174, 177, 182, 186, 187, 199, 202, 233, 239, 244, 245, 246, 249, 250, 259, 273, 298, 313, 314, 329, 339, 405, 409, 437, 443, 489, 526, 532, 630, 631, 634, 647, 765, 785, 787, 836, 865, 869, 892, 893, 894, 895, 896, 970, 971, 973, 974, 975, 976, 978, 979, 981, 984, 985, 988, 991, 993, 1011, 1023, 1029, 1033, 1034], "n_knot": [4, 199, 314, 869, 988, 1033], "include_bia": [4, 177, 273, 865, 869, 1034], "knot": [4, 199, 314, 869, 988, 1033], "linspac": [4, 8, 9, 10, 11, 13, 24, 26, 30, 34, 37, 38, 40, 42, 49, 55, 80, 81, 96, 105, 111, 121, 123, 150, 151, 153, 154, 155, 156, 157, 159, 169, 177, 178, 180, 182, 188, 192, 198, 199, 200, 204, 208, 209, 210, 211, 212, 216, 224, 227, 230, 231, 233, 235, 248, 259, 261, 262, 266, 267, 268, 269, 273, 284, 285, 291, 292, 302, 304, 315, 316, 331, 332, 335, 337, 338, 340, 341, 342, 622, 623, 793, 814, 830, 831, 1012], "again": [4, 20, 67, 72, 123, 154, 156, 158, 168, 223, 260, 345, 356, 378, 383, 387, 388, 400, 401, 402, 407, 408, 463, 558, 559, 625, 638, 642, 644, 646, 652, 654, 656, 683, 967, 974, 978, 992, 1017, 1020, 1028], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 41, 46, 47, 48, 51, 52, 53, 54, 55, 58, 60, 61, 66, 70, 74, 75, 80, 95, 96, 98, 101, 111, 116, 117, 118, 119, 120, 123, 124, 125, 128, 129, 139, 143, 145, 151, 152, 154, 156, 157, 162, 163, 165, 169, 170, 186, 187, 198, 200, 205, 207, 210, 211, 212, 213, 214, 218, 220, 222, 225, 227, 230, 231, 232, 233, 234, 236, 237, 244, 246, 248, 249, 250, 257, 259, 261, 262, 265, 266, 268, 269, 279, 284, 285, 289, 292, 295, 297, 303, 304, 311, 313, 316, 317, 322, 323, 325, 329, 331, 332, 335, 336, 337, 338, 341, 342, 345, 346, 354, 360, 367, 368, 369, 374, 376, 387, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 418, 419, 422, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 912, 915, 916, 921, 925, 927, 929, 932, 940, 942, 947, 949, 953, 954, 955, 956, 957, 958, 959, 968, 973, 974, 978, 979, 980, 981, 982, 984, 988, 989, 990, 991, 992, 993, 994, 1009, 1010, 1012, 1013, 1020, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1034, 1036, 1037], "concat": [4, 162, 167, 187, 216, 863], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 58, 80, 82, 89, 90, 95, 98, 102, 106, 112, 118, 119, 139, 145, 153, 154, 169, 177, 181, 182, 189, 190, 207, 210, 211, 212, 214, 220, 221, 222, 231, 232, 236, 253, 254, 279, 282, 283, 285, 287, 288, 290, 292, 295, 297, 298, 301, 303, 320, 321, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 341, 342, 351, 688, 1009, 1010], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 31, 32, 34, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 60, 61, 67, 80, 82, 89, 90, 95, 98, 102, 112, 118, 119, 139, 145, 153, 154, 169, 181, 190, 207, 210, 211, 212, 214, 220, 221, 222, 228, 231, 232, 236, 241, 253, 254, 279, 283, 285, 289, 292, 295, 297, 298, 301, 303, 313, 316, 320, 321, 325, 328, 329, 330, 331, 332, 333, 334, 336, 338, 341, 342, 351, 371, 401, 688, 903, 978, 988, 994, 1009, 1010], "tab20b": 4, "stai": [4, 26, 37, 105, 168, 346, 373, 374, 378, 387, 388, 983, 1026], "midnight": 4, "fewer": [4, 13, 26, 55, 110, 119, 121, 198, 360, 375, 400, 409, 410, 439, 452, 544, 585, 687, 820, 931, 974, 979, 981, 1025, 1026, 1027], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 53, 55, 62, 78, 85, 86, 104, 110, 116, 117, 124, 130, 142, 143, 144, 146, 147, 155, 163, 167, 168, 169, 170, 171, 174, 182, 198, 199, 216, 234, 238, 244, 250, 256, 257, 262, 266, 267, 269, 288, 301, 307, 308, 311, 314, 317, 321, 332, 345, 346, 347, 356, 360, 361, 362, 369, 370, 372, 374, 376, 378, 379, 380, 382, 385, 387, 388, 390, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 434, 435, 437, 441, 447, 448, 451, 459, 487, 494, 512, 515, 523, 525, 530, 534, 540, 542, 552, 553, 557, 558, 579, 580, 582, 584, 595, 602, 618, 621, 640, 649, 663, 665, 667, 669, 678, 679, 683, 686, 715, 718, 736, 748, 749, 753, 775, 782, 785, 786, 790, 791, 806, 818, 819, 832, 833, 834, 836, 838, 839, 840, 841, 842, 865, 867, 875, 876, 878, 879, 880, 881, 888, 926, 927, 929, 941, 946, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979, 981, 984, 985, 986, 991, 992, 993, 994, 997, 998, 999, 1002, 1009, 1011, 1013, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1035], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 371], "132": [4, 8, 13, 56, 407], "013": [4, 58, 110, 134], "successfulli": [4, 13, 305, 373, 378, 400, 408, 992], "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 71, 72, 78, 113, 121, 123, 125, 128, 144, 168, 177, 178, 182, 196, 202, 203, 206, 229, 231, 234, 237, 260, 266, 288, 303, 306, 307, 316, 346, 347, 356, 366, 368, 371, 374, 380, 385, 387, 398, 399, 400, 402, 404, 405, 407, 408, 409, 411, 435, 436, 441, 448, 451, 484, 525, 535, 540, 546, 547, 548, 549, 554, 555, 556, 564, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 601, 618, 634, 643, 663, 664, 665, 666, 678, 683, 686, 771, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 817, 867, 879, 882, 883, 898, 899, 900, 901, 967, 970, 972, 973, 974, 975, 978, 981, 990, 991, 995, 1004, 1012, 1020, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1034, 1036], "choic": [4, 7, 40, 46, 55, 65, 70, 78, 103, 150, 151, 157, 162, 187, 199, 237, 253, 257, 259, 262, 284, 308, 313, 345, 346, 356, 360, 372, 376, 379, 385, 390, 400, 402, 404, 406, 407, 409, 410, 443, 453, 462, 463, 464, 465, 466, 467, 469, 529, 531, 532, 538, 550, 629, 638, 639, 647, 649, 650, 652, 660, 671, 683, 696, 819, 832, 833, 838, 840, 841, 867, 870, 879, 881, 890, 891, 914, 967, 972, 974, 975, 976, 978, 979, 984, 986, 991, 992, 993, 994, 1027, 1030, 1031, 1035, 1036], "arbitrari": [4, 55, 86, 95, 96, 97, 115, 157, 177, 198, 215, 216, 257, 301, 305, 307, 313, 345, 354, 361, 374, 385, 387, 401, 404, 405, 407, 408, 412, 437, 441, 446, 448, 456, 523, 524, 550, 551, 572, 630, 639, 660, 671, 679, 779, 788, 789, 794, 796, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 854, 856, 869, 967, 969, 970, 974, 975, 978, 981, 988, 999, 1013, 1020, 1021, 1024, 1026, 1027, 1028, 1030, 1034, 1036], "held": [4, 8, 71, 103, 124, 170, 206, 246, 262, 267, 277, 407, 550, 551, 552, 553, 692, 787, 790, 791, 801, 847, 848, 860, 967, 968, 977, 986, 1013], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 55, 58, 60, 64, 67, 80, 81, 85, 90, 91, 92, 94, 98, 100, 101, 107, 110, 112, 116, 119, 120, 128, 152, 157, 158, 165, 168, 169, 170, 177, 181, 187, 190, 192, 194, 196, 198, 199, 200, 202, 204, 207, 210, 211, 215, 216, 219, 220, 221, 222, 223, 227, 230, 232, 237, 246, 250, 253, 256, 260, 261, 266, 268, 269, 277, 279, 282, 283, 284, 285, 286, 287, 288, 290, 292, 295, 302, 303, 305, 307, 320, 321, 325, 328, 331, 332, 333, 334, 336, 337, 341, 342, 345, 346, 347, 351, 356, 360, 361, 362, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 382, 385, 387, 388, 399, 400, 405, 406, 407, 408, 411, 412, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 449, 451, 452, 460, 463, 465, 489, 495, 503, 505, 506, 510, 513, 516, 521, 524, 526, 532, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 601, 602, 619, 622, 623, 624, 628, 629, 630, 635, 636, 642, 646, 648, 661, 662, 664, 666, 667, 669, 670, 673, 674, 679, 680, 681, 682, 683, 684, 685, 692, 697, 698, 701, 704, 708, 713, 715, 721, 726, 727, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 754, 769, 770, 785, 786, 787, 801, 811, 820, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 855, 869, 884, 885, 886, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 908, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 988, 990, 991, 993, 994, 998, 999, 1008, 1011, 1012, 1013, 1020, 1021, 1022, 1024, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 115, 301], "insight": [4, 7, 168, 169, 199, 200, 216, 297, 301, 345, 354, 398, 787, 790, 791, 801, 813, 985, 994, 1002], "last_hour": 4, "slice": [4, 17, 119, 207, 221, 224, 232, 282, 287, 290, 314, 315, 328, 369, 375, 376, 383, 401, 455, 458, 484, 485, 499, 537, 630, 764, 768, 771, 906, 930, 931, 949, 1032, 1034], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 53, 57, 60, 67, 75, 95, 98, 106, 110, 119, 120, 127, 130, 159, 168, 169, 192, 197, 213, 214, 219, 220, 221, 236, 247, 255, 298, 301, 303, 311, 313, 320, 321, 325, 339, 340, 351], "label": [4, 6, 7, 11, 12, 13, 16, 20, 24, 25, 26, 27, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 73, 75, 78, 79, 80, 81, 85, 86, 91, 92, 97, 99, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 137, 143, 150, 151, 155, 156, 157, 158, 159, 162, 165, 168, 171, 174, 177, 178, 180, 181, 182, 186, 187, 188, 192, 198, 199, 200, 201, 204, 205, 206, 207, 208, 213, 215, 216, 220, 221, 222, 227, 232, 233, 235, 237, 238, 246, 253, 254, 257, 258, 260, 261, 262, 263, 265, 268, 269, 270, 271, 272, 273, 277, 284, 286, 288, 291, 296, 298, 301, 302, 306, 311, 312, 315, 319, 323, 324, 325, 326, 339, 340, 345, 346, 350, 351, 352, 353, 362, 366, 367, 368, 373, 374, 376, 379, 383, 387, 388, 397, 398, 399, 410, 411, 417, 418, 422, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 456, 460, 478, 479, 480, 484, 485, 486, 487, 493, 494, 499, 500, 503, 505, 506, 510, 513, 514, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 558, 560, 561, 583, 584, 585, 586, 587, 589, 590, 591, 595, 596, 597, 600, 601, 622, 649, 650, 657, 658, 659, 664, 665, 666, 667, 668, 669, 688, 689, 691, 693, 694, 695, 696, 698, 700, 701, 703, 704, 705, 706, 707, 708, 709, 711, 715, 716, 717, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 744, 745, 746, 747, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 836, 837, 839, 840, 847, 848, 850, 854, 857, 858, 861, 863, 864, 874, 885, 886, 887, 890, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 910, 915, 916, 941, 942, 949, 967, 974, 975, 979, 980, 981, 982, 984, 985, 988, 992, 993, 994, 998, 1000, 1004, 1009, 1011, 1012, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "actual": [4, 27, 46, 60, 75, 86, 116, 174, 187, 198, 202, 206, 246, 255, 262, 347, 356, 360, 362, 371, 372, 374, 376, 379, 380, 385, 386, 387, 398, 400, 405, 408, 409, 425, 500, 506, 507, 518, 526, 529, 531, 538, 553, 554, 635, 636, 639, 649, 650, 657, 658, 659, 660, 661, 663, 665, 667, 668, 669, 671, 678, 682, 686, 692, 695, 700, 706, 712, 713, 714, 775, 785, 790, 791, 806, 807, 836, 867, 890, 896, 918, 919, 920, 953, 970, 977, 978, 981, 985, 986, 1027, 1028, 1034, 1035, 1036], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 56, 80, 81, 92, 95, 119, 142, 150, 151, 155, 156, 159, 163, 168, 169, 177, 186, 187, 188, 190, 194, 198, 199, 200, 204, 207, 210, 211, 216, 227, 244, 247, 282, 284, 295, 296, 298, 325, 342, 351, 352, 353, 374, 390, 393, 400, 407, 410, 546, 547, 622, 984, 985, 994, 998, 1004], "One": [4, 9, 12, 24, 30, 49, 55, 91, 100, 103, 118, 120, 123, 126, 165, 168, 171, 176, 202, 213, 217, 227, 238, 249, 259, 266, 269, 288, 302, 327, 329, 343, 346, 360, 371, 374, 386, 387, 400, 403, 405, 406, 407, 408, 411, 435, 440, 463, 465, 469, 503, 557, 622, 630, 649, 657, 659, 664, 666, 667, 668, 778, 794, 795, 818, 819, 820, 851, 852, 863, 894, 941, 968, 970, 974, 975, 976, 977, 978, 979, 981, 982, 985, 986, 988, 993, 1000, 1015, 1024, 1026, 1033, 1035], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 61, 72, 73, 75, 78, 79, 80, 81, 85, 86, 97, 99, 103, 104, 105, 109, 110, 111, 112, 113, 114, 116, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 133, 143, 150, 151, 155, 156, 157, 158, 159, 168, 169, 174, 177, 178, 180, 183, 186, 187, 188, 192, 198, 199, 200, 201, 204, 205, 206, 207, 208, 211, 212, 213, 215, 216, 222, 230, 231, 232, 233, 235, 238, 246, 254, 256, 258, 259, 261, 262, 263, 264, 266, 268, 269, 271, 272, 273, 284, 285, 286, 291, 296, 302, 306, 312, 315, 322, 331, 334, 339, 345, 350, 351, 352, 353, 691, 1009], "draw": [4, 7, 16, 60, 159, 168, 194, 238, 261, 266, 332, 381, 403, 405, 406, 407, 546, 547, 548, 549, 554, 555, 556, 557, 602, 625, 692, 793, 809, 902, 904, 977, 998, 1007, 1033, 1034], "conclus": [4, 100, 168, 170, 198, 200, 259, 261, 356, 407, 1007], "abov": [4, 25, 26, 37, 44, 66, 70, 112, 115, 116, 121, 123, 133, 146, 147, 168, 169, 171, 184, 198, 200, 204, 209, 231, 234, 235, 259, 265, 284, 303, 306, 307, 312, 314, 346, 347, 354, 356, 360, 361, 362, 368, 369, 371, 372, 373, 374, 376, 378, 380, 385, 387, 388, 400, 401, 402, 404, 405, 406, 408, 410, 432, 436, 455, 458, 480, 486, 487, 488, 514, 581, 625, 695, 745, 787, 799, 801, 811, 853, 854, 867, 873, 879, 887, 941, 967, 968, 970, 972, 974, 975, 978, 981, 983, 985, 988, 992, 993, 994, 999, 1004, 1005, 1011, 1012, 1013, 1026], "problemat": [4, 255, 401, 968, 1028], "captur": [4, 9, 12, 37, 39, 86, 123, 127, 142, 155, 168, 177, 182, 198, 202, 250, 312, 332, 382, 400, 407, 408, 409, 562, 579, 580, 582, 836, 945, 978, 983, 991, 995, 1011, 1032], "big": [4, 44, 60, 62, 203, 220, 250, 361, 374, 380, 388, 402, 408, 412, 529, 552, 553, 555, 556, 793, 814, 825, 826, 827, 828, 829, 999, 1002, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "goe": [4, 37, 115, 354, 374, 407, 462, 463, 469, 548, 549, 555, 556, 557, 898, 899, 900, 901, 988, 992], "artifact": [4, 13, 46, 47, 301, 362, 378], "discontinu": [4, 385], "fail": [4, 54, 66, 96, 103, 158, 159, 177, 182, 202, 234, 259, 311, 361, 372, 374, 376, 377, 382, 388, 390, 403, 404, 431, 463, 465, 667, 668, 669, 847, 848, 921, 967, 975, 1020, 1021, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "intra": [4, 579, 582, 780, 781], "variat": [4, 12, 37, 127, 155, 156, 165, 168, 203, 243, 245, 250, 251, 256, 277, 312, 332, 371, 404, 405, 410, 434, 438, 450, 527, 634, 663, 665, 666, 785, 786, 805, 806, 808, 967, 978, 988, 991, 994, 998, 1009, 1011, 1014, 1015, 1023, 1025, 1026], "harmon": [4, 37, 266, 346, 400, 526, 532, 719, 720, 726, 773, 783, 978], "phase": [4, 182, 192, 360, 618, 970, 975, 981, 1002, 1028, 1030], "potenti": [4, 55, 78, 163, 167, 169, 177, 285, 286, 295, 317, 347, 360, 361, 387, 390, 391, 400, 404, 407, 408, 459, 473, 474, 475, 476, 487, 515, 540, 548, 549, 552, 553, 555, 556, 564, 597, 602, 625, 753, 880, 881, 888, 898, 899, 900, 901, 946, 984, 992, 994, 998, 1013, 1023, 1030, 1031, 1034], "fix": [4, 8, 20, 25, 34, 46, 71, 105, 115, 116, 119, 150, 151, 155, 158, 168, 182, 200, 216, 250, 262, 295, 311, 312, 313, 314, 315, 316, 317, 346, 360, 361, 368, 370, 372, 373, 374, 376, 377, 382, 385, 387, 388, 391, 400, 401, 404, 405, 407, 408, 410, 443, 453, 463, 495, 503, 522, 528, 531, 533, 539, 540, 550, 551, 555, 556, 579, 582, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 621, 644, 654, 661, 675, 678, 682, 686, 698, 775, 785, 801, 808, 832, 833, 835, 838, 840, 841, 857, 874, 898, 899, 927, 945, 967, 974, 977, 978, 981, 988, 999, 1001, 1013, 1018, 1019, 1021, 1022, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "two": [4, 7, 9, 11, 14, 20, 24, 26, 30, 34, 37, 39, 40, 43, 55, 60, 64, 70, 71, 75, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 104, 108, 110, 111, 118, 119, 120, 123, 126, 127, 128, 131, 134, 144, 147, 150, 151, 152, 153, 156, 157, 162, 163, 165, 168, 169, 170, 177, 181, 182, 186, 187, 188, 189, 194, 198, 199, 200, 206, 207, 210, 215, 216, 221, 223, 224, 227, 232, 234, 235, 237, 244, 245, 246, 248, 249, 250, 254, 256, 260, 266, 282, 284, 287, 288, 290, 292, 301, 303, 306, 311, 312, 314, 315, 322, 328, 329, 332, 333, 334, 341, 345, 346, 347, 351, 356, 367, 368, 369, 370, 371, 372, 374, 376, 378, 380, 381, 382, 385, 387, 388, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 432, 433, 434, 435, 436, 438, 441, 442, 443, 444, 448, 450, 455, 460, 461, 462, 463, 464, 465, 466, 467, 479, 481, 482, 483, 484, 485, 487, 489, 491, 492, 493, 494, 495, 496, 498, 501, 505, 510, 513, 527, 529, 531, 535, 538, 540, 541, 544, 551, 561, 572, 575, 581, 582, 583, 586, 587, 589, 590, 591, 593, 594, 597, 598, 599, 601, 602, 611, 612, 615, 619, 622, 623, 630, 634, 636, 661, 662, 664, 683, 694, 695, 696, 703, 706, 707, 710, 712, 713, 714, 721, 722, 725, 726, 728, 731, 733, 744, 745, 747, 753, 754, 761, 764, 767, 768, 769, 770, 771, 775, 776, 782, 783, 784, 785, 819, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 847, 848, 854, 855, 862, 863, 864, 865, 884, 885, 886, 890, 898, 900, 901, 941, 957, 958, 964, 967, 968, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 1004, 1008, 1011, 1012, 1013, 1017, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "onc": [4, 8, 50, 144, 147, 150, 220, 234, 257, 260, 279, 307, 311, 315, 345, 347, 354, 356, 360, 362, 368, 369, 374, 378, 379, 380, 381, 382, 386, 387, 388, 400, 401, 403, 404, 405, 407, 408, 409, 410, 440, 442, 444, 463, 499, 500, 529, 535, 542, 550, 551, 581, 582, 588, 602, 610, 618, 638, 642, 644, 646, 652, 654, 656, 657, 658, 659, 667, 668, 669, 688, 703, 707, 709, 726, 771, 788, 792, 795, 805, 825, 826, 827, 828, 829, 902, 974, 975, 981, 988, 992, 993, 994, 1004, 1013, 1017, 1020, 1028, 1030, 1031, 1032, 1033], "specif": [4, 11, 12, 20, 27, 44, 55, 62, 65, 70, 72, 116, 130, 155, 158, 168, 169, 174, 202, 216, 254, 259, 301, 311, 312, 316, 345, 346, 347, 356, 360, 361, 369, 374, 377, 379, 380, 382, 385, 387, 390, 396, 399, 400, 401, 404, 405, 407, 408, 409, 410, 487, 494, 525, 542, 548, 555, 558, 559, 560, 561, 565, 579, 582, 584, 588, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 616, 631, 634, 637, 638, 643, 649, 663, 678, 688, 703, 704, 736, 787, 788, 789, 794, 795, 796, 801, 813, 826, 919, 921, 922, 941, 954, 955, 956, 972, 974, 975, 977, 978, 980, 981, 983, 985, 988, 992, 994, 995, 996, 997, 1013, 1015, 1020, 1024, 1028, 1029, 1030, 1031, 1034, 1035], "furthermor": [4, 37, 116, 156, 169, 170, 238, 240, 279, 345, 346, 360, 362, 381, 400, 405, 407, 408, 553, 581, 597, 610, 695, 726, 736, 745, 747, 783, 890, 974, 986, 1023, 1027], "enforc": [4, 12, 53, 95, 155, 192, 288, 360, 374, 402, 405, 407, 410, 499, 518, 522, 528, 530, 533, 534, 536, 537, 539, 548, 549, 552, 553, 555, 556, 869, 898, 899, 900, 901, 910, 911, 968, 975, 1022, 1028, 1030, 1032, 1036], "behav": [4, 12, 48, 52, 57, 202, 254, 301, 313, 332, 356, 374, 380, 385, 386, 400, 404, 870, 974, 988, 993, 995, 999, 1013, 1020, 1027, 1029, 1033, 1034], "similarli": [4, 12, 37, 55, 92, 126, 169, 182, 187, 198, 228, 259, 295, 301, 317, 332, 356, 361, 370, 372, 376, 379, 387, 397, 403, 404, 408, 973, 975, 976, 978, 985, 992, 993, 995, 1004, 1008, 1028, 1034, 1036], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 53, 56, 58, 113, 144, 147, 163, 169, 170, 181, 182, 229, 234, 255, 257, 268, 270, 271, 282, 290, 311, 325, 328, 329, 335, 345, 346, 347, 359, 360, 361, 368, 369, 371, 372, 373, 374, 376, 378, 379, 380, 382, 383, 385, 387, 390, 391, 397, 398, 400, 401, 404, 405, 407, 408, 409, 410, 411, 412, 414, 424, 425, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 453, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 479, 482, 483, 486, 487, 488, 494, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 568, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 601, 602, 611, 618, 619, 620, 621, 623, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 698, 711, 719, 720, 728, 761, 764, 768, 769, 770, 771, 773, 774, 777, 778, 779, 780, 781, 785, 786, 787, 789, 790, 791, 792, 793, 794, 796, 799, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 879, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 910, 911, 913, 921, 922, 926, 927, 934, 935, 936, 937, 946, 947, 948, 949, 952, 962, 963, 967, 968, 974, 975, 978, 980, 981, 984, 986, 988, 992, 993, 994, 999, 1001, 1004, 1011, 1012, 1013, 1015, 1020, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "shorter": [4, 156, 247, 385, 400, 405, 410, 441, 448, 554, 688, 980, 984, 1013, 1031], "necessarili": [4, 31, 72, 98, 168, 198, 206, 216, 232, 233, 245, 303, 345, 346, 368, 378, 398, 400, 407, 618, 838, 840, 841, 842, 972, 975, 977, 978], "59": [4, 174, 182, 216, 298, 337, 371, 380, 401, 501, 978, 1016, 1020], "37": [4, 182, 262, 320, 369, 407, 515, 707, 870, 988, 1020], "creat": [4, 5, 8, 11, 16, 20, 21, 26, 27, 30, 32, 37, 39, 41, 43, 44, 46, 49, 52, 58, 60, 62, 71, 72, 80, 86, 97, 100, 112, 115, 119, 120, 123, 126, 129, 145, 146, 150, 152, 155, 156, 157, 159, 163, 167, 169, 177, 179, 181, 184, 194, 199, 200, 210, 211, 221, 232, 234, 238, 240, 249, 254, 255, 257, 259, 269, 277, 282, 287, 289, 290, 303, 305, 306, 311, 314, 315, 325, 328, 329, 333, 334, 337, 340, 341, 342, 347, 350, 352, 353, 356, 361, 369, 370, 372, 373, 374, 376, 378, 379, 380, 381, 382, 383, 386, 387, 390, 398, 400, 401, 404, 406, 407, 408, 410, 429, 442, 444, 456, 457, 490, 506, 507, 508, 509, 537, 544, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 579, 580, 582, 588, 619, 621, 622, 623, 624, 688, 689, 691, 692, 693, 772, 779, 787, 789, 793, 797, 801, 805, 809, 811, 812, 820, 851, 863, 892, 895, 898, 899, 900, 901, 905, 908, 930, 931, 937, 951, 963, 968, 974, 977, 978, 979, 981, 985, 988, 989, 990, 992, 993, 994, 998, 999, 1002, 1009, 1011, 1012, 1017, 1020, 1021, 1023, 1026, 1030, 1033, 1034, 1035, 1036], "turn": [4, 32, 78, 162, 163, 168, 182, 213, 214, 232, 259, 283, 347, 360, 362, 369, 385, 387, 388, 399, 400, 401, 403, 405, 408, 409, 410, 572, 573, 580, 598, 599, 819, 823, 892, 895, 913, 968, 972, 980, 983, 988, 1002, 1013, 1025, 1027, 1028, 1033], "downstream": [4, 80, 308, 347, 408, 522, 525, 528, 532, 533, 597, 863, 988, 1030], "freedom": [4, 97, 155, 186, 187, 189, 259, 532, 647, 785, 974, 1023], "underfit": [4, 123, 150, 165, 170, 202, 252, 274, 275, 295, 307, 407, 648, 787, 790, 791, 801, 812, 813, 850, 865, 973, 974], "approxim": [4, 5, 27, 33, 46, 53, 80, 99, 100, 105, 114, 122, 123, 151, 168, 175, 178, 194, 198, 199, 212, 216, 226, 227, 230, 233, 242, 250, 259, 264, 273, 280, 288, 293, 301, 303, 304, 306, 311, 314, 345, 347, 352, 353, 356, 363, 366, 371, 383, 385, 387, 397, 398, 401, 403, 404, 405, 407, 410, 412, 413, 414, 424, 440, 460, 461, 464, 465, 466, 467, 473, 474, 475, 482, 487, 493, 512, 515, 524, 525, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 550, 551, 573, 580, 601, 602, 610, 629, 630, 631, 632, 633, 648, 649, 650, 663, 665, 667, 668, 670, 678, 683, 748, 749, 754, 785, 788, 805, 811, 815, 816, 830, 831, 834, 838, 840, 841, 842, 846, 850, 851, 856, 860, 862, 863, 867, 879, 890, 895, 896, 926, 927, 952, 971, 972, 973, 974, 975, 977, 981, 982, 983, 984, 985, 986, 990, 992, 993, 994, 998, 999, 1013, 1015, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034], "especi": [4, 8, 55, 56, 120, 123, 168, 198, 234, 307, 316, 336, 346, 356, 361, 368, 374, 382, 385, 387, 398, 400, 408, 434, 440, 492, 529, 548, 549, 550, 551, 555, 556, 557, 637, 638, 639, 641, 643, 644, 645, 649, 650, 651, 652, 653, 654, 660, 671, 686, 696, 736, 825, 826, 827, 828, 829, 898, 899, 900, 901, 974, 980, 981, 986, 988, 1002, 1023, 1028, 1032, 1033, 1034], "sharp": [4, 169, 985, 988], "rush": [4, 374], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 80, 95, 125, 150, 157, 168, 169, 202, 213, 216, 259, 266, 270, 315, 345, 346, 356, 373, 398, 400, 402, 405, 407, 408, 409, 428, 434, 438, 442, 444, 450, 522, 529, 531, 533, 534, 536, 537, 538, 598, 599, 625, 790, 791, 830, 831, 926, 927, 970, 975, 978, 994, 1034], "tend": [4, 12, 27, 37, 39, 43, 52, 55, 57, 168, 169, 187, 198, 203, 216, 244, 247, 256, 260, 277, 298, 347, 360, 362, 374, 376, 387, 398, 400, 402, 405, 407, 409, 428, 439, 644, 836, 867, 879, 927, 974, 975, 981, 994, 1013], "under": [4, 7, 11, 24, 25, 27, 41, 67, 78, 79, 103, 120, 123, 169, 198, 227, 237, 259, 266, 268, 269, 302, 317, 340, 363, 368, 374, 376, 378, 380, 382, 387, 390, 394, 398, 400, 402, 404, 405, 408, 409, 437, 442, 444, 461, 462, 463, 464, 465, 466, 467, 523, 530, 532, 534, 645, 646, 647, 693, 697, 698, 699, 706, 732, 744, 778, 779, 785, 786, 835, 934, 974, 975, 976, 978, 981, 988, 992, 993, 994, 998, 999, 1013, 1020, 1022, 1023, 1025, 1028, 1032], "These": [4, 5, 7, 27, 51, 95, 97, 101, 115, 119, 165, 169, 187, 198, 199, 200, 228, 266, 277, 279, 283, 298, 301, 308, 310, 315, 321, 323, 356, 360, 361, 367, 370, 371, 374, 376, 378, 381, 383, 385, 387, 390, 394, 397, 398, 399, 400, 403, 405, 407, 408, 409, 410, 433, 437, 439, 489, 499, 500, 506, 529, 558, 559, 593, 594, 659, 667, 668, 697, 723, 746, 768, 782, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 835, 836, 855, 967, 969, 972, 974, 975, 978, 979, 989, 991, 993, 998, 1004, 1008, 1013, 1020, 1026, 1028, 1029, 1030, 1033], "systemat": [4, 259, 376, 703, 718, 978, 1035], "reveal": [4, 168, 170, 345, 380, 397, 975, 1036], "form": [4, 9, 19, 32, 42, 60, 67, 95, 133, 157, 158, 168, 233, 234, 250, 259, 320, 356, 368, 371, 374, 376, 378, 387, 388, 397, 399, 400, 403, 404, 405, 406, 407, 408, 410, 412, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 450, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 678, 679, 680, 681, 682, 683, 684, 785, 786, 787, 790, 791, 792, 795, 797, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 916, 935, 938, 967, 969, 971, 972, 974, 975, 978, 979, 982, 983, 984, 988, 993, 998, 1004, 1011, 1026, 1030, 1032], "explain": [4, 5, 12, 56, 73, 85, 86, 104, 123, 150, 155, 156, 169, 170, 198, 216, 227, 234, 250, 269, 272, 307, 345, 346, 361, 372, 374, 378, 394, 396, 403, 405, 410, 484, 512, 515, 525, 532, 535, 540, 616, 639, 647, 660, 671, 712, 713, 714, 718, 775, 974, 981, 994, 997, 998, 1009, 1011, 1012, 1031, 1033, 1034], "lack": [4, 374, 376, 385, 404, 815, 905, 993, 1034], "deriv": [4, 19, 105, 106, 122, 155, 158, 170, 186, 187, 191, 199, 361, 369, 376, 402, 404, 406, 407, 408, 410, 412, 432, 436, 437, 456, 524, 597, 608, 613, 639, 660, 667, 671, 847, 848, 863, 869, 890, 891, 972, 974, 975, 978, 982, 984, 993, 1020, 1021, 1022, 1027, 1028, 1029, 1035], "address": [4, 48, 202, 345, 369, 374, 400, 408, 648, 974, 975, 980, 981, 982, 983, 984, 988, 1002, 1011, 1028], "section": [4, 37, 95, 100, 113, 130, 136, 137, 138, 139, 155, 159, 167, 168, 169, 177, 182, 186, 187, 200, 223, 228, 234, 239, 257, 259, 262, 268, 306, 307, 308, 313, 345, 346, 347, 356, 367, 369, 372, 374, 375, 376, 378, 379, 380, 381, 382, 388, 391, 394, 398, 399, 401, 403, 404, 405, 407, 408, 409, 410, 430, 434, 450, 525, 605, 610, 613, 628, 636, 778, 786, 892, 895, 967, 972, 974, 978, 979, 981, 982, 984, 985, 992, 993, 995, 997, 1011, 1013, 1020, 1022, 1023, 1024, 1027], "margin": [4, 12, 25, 27, 151, 152, 154, 155, 156, 165, 168, 169, 176, 217, 259, 301, 307, 327, 330, 332, 334, 343, 371, 398, 399, 405, 407, 410, 503, 601, 602, 622, 636, 667, 725, 819, 867, 879, 892, 895, 974, 978, 980, 984, 985, 988, 992, 993, 1011, 1027, 1029], "construct": [4, 11, 70, 72, 110, 112, 114, 118, 130, 216, 228, 234, 239, 241, 277, 292, 302, 304, 312, 315, 368, 371, 376, 383, 387, 400, 404, 405, 407, 408, 411, 425, 432, 433, 435, 436, 441, 443, 448, 454, 456, 458, 510, 526, 532, 535, 546, 547, 572, 578, 630, 679, 681, 682, 801, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 849, 850, 851, 852, 854, 895, 909, 911, 926, 927, 937, 941, 967, 968, 970, 974, 975, 978, 979, 981, 988, 991, 993, 994, 999, 1004, 1008, 1025, 1027, 1028, 1031, 1034], "polynomialfeatur": [4, 177, 198, 199, 204, 239, 273, 313, 869, 974, 988, 1024, 1028, 1029, 1030, 1033, 1034, 1036], "coars": [4, 119, 380, 439, 452], "too": [4, 7, 12, 17, 44, 50, 55, 57, 62, 70, 74, 82, 99, 123, 162, 170, 182, 199, 202, 220, 231, 245, 253, 257, 266, 274, 297, 307, 332, 345, 352, 353, 360, 371, 374, 380, 382, 385, 387, 400, 402, 404, 407, 408, 409, 412, 428, 440, 529, 579, 582, 670, 683, 698, 825, 826, 827, 828, 829, 855, 868, 870, 973, 975, 977, 978, 980, 981, 985, 1011, 1021, 1024, 1027, 1028, 1029, 1030, 1032], "mani": [4, 7, 10, 19, 55, 56, 74, 78, 82, 110, 116, 117, 118, 119, 121, 124, 143, 147, 170, 198, 219, 231, 245, 253, 259, 266, 267, 271, 279, 301, 306, 307, 311, 312, 313, 314, 315, 317, 345, 356, 360, 362, 369, 371, 373, 374, 386, 387, 388, 390, 391, 397, 398, 400, 401, 402, 405, 407, 408, 409, 410, 412, 494, 544, 545, 548, 549, 550, 551, 555, 556, 557, 579, 582, 597, 600, 618, 630, 641, 645, 649, 650, 657, 659, 667, 668, 669, 683, 686, 764, 768, 787, 791, 801, 847, 848, 863, 868, 870, 890, 898, 899, 900, 901, 967, 968, 970, 974, 975, 977, 978, 979, 980, 981, 984, 985, 986, 988, 991, 993, 995, 997, 998, 999, 1002, 1011, 1013, 1020, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1034, 1035, 1036], "featureunion": [4, 74, 366, 387, 399, 455, 620, 852, 968, 999, 1002, 1015, 1021, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "hour_workday_interact": 4, "interaction_onli": [4, 865, 974, 988], "combin": [4, 12, 20, 25, 27, 61, 70, 71, 73, 74, 95, 104, 105, 108, 121, 125, 134, 150, 156, 163, 165, 168, 182, 198, 202, 215, 216, 223, 227, 232, 259, 260, 268, 270, 271, 288, 296, 307, 313, 314, 316, 335, 347, 351, 360, 366, 370, 371, 374, 379, 386, 387, 397, 398, 400, 401, 404, 405, 406, 407, 408, 409, 410, 412, 413, 436, 455, 457, 458, 464, 466, 467, 470, 471, 472, 480, 487, 499, 500, 506, 512, 515, 517, 522, 528, 529, 531, 533, 538, 540, 551, 553, 556, 558, 559, 601, 605, 607, 612, 615, 621, 625, 634, 637, 638, 643, 644, 649, 650, 651, 652, 653, 654, 657, 659, 663, 664, 665, 666, 667, 669, 670, 672, 675, 692, 720, 778, 787, 790, 791, 798, 799, 811, 813, 817, 849, 851, 855, 863, 864, 865, 870, 890, 952, 967, 970, 971, 974, 978, 979, 981, 984, 988, 991, 992, 995, 1002, 1009, 1011, 1013, 1020, 1025, 1028, 1031, 1032, 1033, 1035, 1036], "ones": [4, 11, 34, 43, 55, 71, 81, 126, 150, 174, 182, 202, 203, 227, 230, 234, 259, 267, 270, 286, 305, 321, 342, 360, 361, 374, 382, 387, 400, 402, 404, 407, 441, 523, 557, 572, 601, 602, 635, 636, 649, 650, 661, 667, 694, 784, 789, 794, 805, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 865, 869, 932, 974, 978, 983, 984, 988, 993, 1011, 1020, 1028, 1029, 1030], "previou": [4, 43, 53, 71, 95, 113, 120, 123, 130, 150, 155, 156, 167, 168, 169, 182, 184, 199, 231, 233, 234, 259, 262, 266, 301, 306, 315, 345, 346, 347, 356, 360, 369, 374, 376, 379, 380, 382, 385, 387, 388, 390, 400, 407, 408, 459, 537, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 621, 637, 639, 643, 644, 649, 651, 653, 657, 658, 659, 660, 667, 668, 669, 671, 698, 806, 821, 824, 839, 847, 848, 887, 904, 974, 978, 982, 988, 999, 1004, 1013, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "nice": [4, 67, 199, 234, 301, 360, 405, 1013], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "078": 4, "009": [4, 267, 346, 380], "104": [4, 24], "highlight": [4, 80, 92, 150, 151, 156, 216, 305, 318, 345, 347, 363, 374, 378, 379, 382, 385, 410, 434, 437, 438, 455, 458, 481, 482, 487, 492, 493, 495, 503, 506, 512, 515, 529, 552, 553, 555, 556, 558, 590, 593, 619, 621, 623, 625, 631, 637, 639, 643, 649, 660, 671, 679, 692, 693, 708, 738, 778, 783, 787, 790, 791, 793, 801, 809, 812, 816, 832, 834, 851, 855, 860, 863, 864, 865, 869, 870, 871, 887, 888, 890, 895, 898, 899, 922, 975, 978, 986, 988, 993, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "anoth": [4, 37, 95, 100, 110, 125, 147, 150, 158, 163, 168, 187, 202, 206, 224, 227, 234, 238, 245, 259, 261, 262, 265, 269, 289, 345, 347, 350, 356, 360, 362, 368, 369, 372, 374, 376, 380, 385, 387, 391, 394, 397, 400, 404, 405, 407, 408, 409, 411, 433, 435, 443, 446, 453, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 499, 529, 531, 538, 664, 667, 683, 700, 710, 793, 809, 849, 850, 871, 967, 973, 974, 975, 978, 979, 981, 984, 988, 992, 993, 1004, 1011, 1012, 1013, 1029, 1030], "either": [4, 10, 30, 71, 116, 119, 120, 168, 186, 188, 228, 254, 263, 268, 284, 345, 354, 360, 361, 366, 369, 372, 374, 375, 376, 380, 387, 391, 394, 398, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 433, 438, 443, 478, 487, 503, 515, 524, 525, 527, 535, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 573, 574, 575, 579, 580, 581, 582, 584, 585, 588, 593, 598, 599, 601, 602, 613, 618, 621, 623, 624, 641, 645, 647, 655, 667, 669, 673, 674, 681, 688, 689, 693, 697, 698, 702, 703, 711, 714, 716, 717, 718, 725, 729, 730, 732, 742, 746, 759, 764, 768, 772, 775, 778, 779, 782, 787, 790, 791, 793, 801, 809, 810, 811, 812, 813, 814, 815, 817, 820, 880, 881, 887, 890, 891, 898, 899, 900, 901, 905, 935, 939, 967, 974, 978, 979, 980, 981, 982, 983, 986, 988, 992, 993, 1004, 1012, 1013, 1020, 1023, 1029, 1030, 1031, 1034], "after": [4, 17, 20, 21, 26, 46, 53, 55, 70, 71, 75, 81, 97, 110, 121, 128, 130, 133, 143, 147, 155, 157, 159, 162, 168, 174, 191, 198, 237, 238, 241, 247, 259, 268, 279, 287, 289, 301, 302, 305, 306, 345, 346, 362, 369, 371, 372, 373, 374, 376, 378, 380, 381, 382, 385, 387, 394, 396, 397, 398, 400, 401, 404, 405, 408, 409, 410, 412, 433, 438, 441, 442, 443, 444, 447, 453, 506, 523, 527, 544, 545, 550, 551, 552, 553, 588, 618, 621, 649, 650, 657, 658, 659, 664, 666, 667, 668, 669, 683, 703, 716, 746, 782, 785, 786, 790, 791, 839, 846, 850, 863, 869, 890, 895, 896, 967, 968, 972, 974, 978, 982, 983, 988, 990, 992, 993, 994, 999, 1004, 1011, 1013, 1020, 1023, 1027, 1028, 1031, 1032, 1035], "quadrat": [4, 29, 35, 155, 159, 165, 212, 261, 314, 399, 431, 449, 452, 540, 541, 614, 639, 649, 650, 660, 667, 671, 707, 895, 896, 974, 975, 978, 981, 984, 988, 992, 993, 1000, 1015, 1021], "tractabl": [4, 404, 625, 998, 1033], "nystr\u00f6m": 4, "latter": [4, 14, 249, 259, 268, 269, 287, 306, 340, 362, 371, 387, 404, 407, 408, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 732, 785, 786, 787, 790, 791, 796, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 945, 981, 1029], "kernel_approxim": [4, 162, 165, 173, 174, 212, 227, 232, 313, 363, 668, 748, 749, 856, 970, 1004, 1021, 1027], "nystroem": [4, 162, 212, 227, 232, 366, 631, 632, 633, 668, 856, 895, 896, 1015, 1021, 1027, 1030, 1032, 1033, 1034], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 139, 174, 259, 329, 336, 339, 443, 526, 611, 755, 764, 787, 865, 892, 893, 894, 895, 896, 974, 988, 1011], "n_compon": [4, 5, 6, 12, 14, 44, 52, 57, 58, 59, 70, 72, 73, 74, 85, 86, 90, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 128, 174, 197, 219, 220, 221, 222, 223, 224, 227, 231, 232, 235, 239, 244, 245, 246, 247, 248, 249, 250, 258, 283, 288, 298, 306, 313, 315, 346, 376, 379, 380, 387, 403, 405, 412, 442, 443, 453, 455, 473, 474, 475, 476, 517, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 630, 631, 632, 633, 679, 680, 681, 682, 683, 684, 685, 686, 687, 785, 786, 839, 846, 849, 882, 883, 884, 927, 970, 972, 975, 977, 981, 1009, 1012, 1021, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1037], "300": [4, 20, 21, 34, 35, 38, 50, 58, 98, 110, 111, 112, 116, 163, 188, 224, 227, 231, 248, 262, 289, 304, 313, 320, 338, 340, 376, 434, 438, 439, 450, 452, 630, 635, 636, 670, 681, 683, 685, 847, 974, 1030], "053": [4, 371, 380], "002": [4, 12, 147, 150, 325, 326, 371], "076": [4, 48, 878], "004": [4, 346], "almost": [4, 116, 121, 122, 200, 206, 234, 273, 306, 323, 356, 367, 369, 378, 380, 385, 386, 387, 391, 400, 404, 405, 461, 462, 463, 464, 466, 467, 468, 785, 967, 973, 974, 977, 978, 993, 1012, 1013, 1028, 1033], "rival": [4, 887, 991], "intermedi": [4, 7, 52, 55, 115, 123, 332, 408, 550, 551, 610, 850, 978, 1032], "compound": [4, 216, 408, 601, 603, 671, 714, 742, 974, 1013], "one_hot_poly_pipelin": 4, "082": [4, 14, 185, 217], "006": [4, 380], "111": [4, 7, 8, 16, 67, 90, 101, 102, 109, 195, 213, 223, 259, 279, 842, 1023], "competit": [4, 123, 345, 407, 635, 981], "low": [4, 11, 12, 37, 50, 81, 86, 97, 99, 103, 110, 113, 126, 147, 170, 191, 193, 198, 200, 202, 212, 219, 221, 227, 231, 237, 244, 245, 247, 250, 253, 259, 261, 265, 266, 274, 285, 286, 297, 305, 307, 308, 317, 323, 331, 332, 345, 354, 370, 371, 374, 379, 382, 387, 390, 397, 398, 399, 404, 405, 408, 433, 440, 459, 512, 515, 526, 573, 580, 594, 670, 683, 687, 696, 716, 732, 779, 835, 864, 871, 888, 927, 943, 946, 967, 970, 973, 974, 975, 977, 978, 981, 983, 984, 985, 986, 988, 990, 993, 994, 1000, 1015, 1021, 1024, 1025, 1026, 1028, 1029, 1034, 1035], "rank": [4, 17, 25, 80, 99, 103, 117, 145, 170, 171, 216, 257, 259, 267, 370, 395, 397, 398, 402, 403, 405, 407, 408, 499, 500, 512, 515, 540, 541, 584, 585, 597, 639, 648, 660, 671, 687, 711, 716, 717, 729, 730, 746, 782, 790, 791, 927, 967, 969, 970, 975, 986, 988, 1002, 1015, 1021, 1026, 1029, 1030, 1034, 1035], "fact": [4, 11, 19, 25, 81, 86, 110, 123, 170, 231, 241, 345, 368, 381, 385, 387, 403, 405, 406, 407, 408, 640, 659, 661, 695, 972, 974, 981, 988, 992, 993, 999, 1002, 1034], "smoother": [4, 5, 123, 169, 297, 406], "allow": [4, 20, 56, 58, 74, 75, 99, 100, 113, 114, 128, 150, 155, 157, 159, 192, 198, 202, 216, 220, 228, 231, 238, 240, 241, 244, 259, 277, 311, 312, 313, 314, 316, 337, 345, 354, 356, 360, 368, 372, 374, 375, 376, 378, 381, 383, 387, 388, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 428, 432, 434, 435, 436, 437, 438, 440, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 487, 514, 515, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 584, 585, 588, 594, 601, 602, 606, 618, 619, 621, 625, 626, 629, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 679, 681, 683, 752, 755, 764, 768, 771, 780, 781, 785, 786, 787, 788, 789, 790, 791, 794, 796, 798, 801, 805, 808, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 836, 837, 840, 841, 845, 847, 848, 850, 852, 853, 855, 856, 857, 862, 869, 870, 874, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 908, 910, 911, 921, 922, 942, 967, 968, 970, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 988, 990, 991, 992, 993, 994, 998, 999, 1002, 1004, 1017, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 53, 55, 57, 65, 73, 80, 81, 95, 97, 99, 100, 106, 121, 130, 150, 154, 156, 158, 169, 182, 186, 187, 200, 206, 219, 221, 223, 224, 230, 249, 258, 259, 260, 270, 287, 288, 289, 306, 311, 317, 334, 335, 340, 345, 346, 350, 361, 371, 372, 374, 375, 376, 379, 380, 383, 385, 386, 387, 388, 397, 400, 402, 403, 405, 407, 408, 409, 411, 432, 435, 436, 437, 441, 442, 443, 444, 453, 522, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 549, 556, 573, 580, 601, 602, 638, 641, 644, 645, 646, 647, 649, 650, 662, 679, 698, 719, 720, 728, 772, 773, 774, 777, 778, 782, 787, 801, 832, 833, 834, 836, 838, 840, 841, 842, 863, 864, 869, 882, 883, 884, 898, 899, 901, 907, 926, 927, 929, 967, 968, 970, 973, 974, 975, 977, 978, 979, 982, 984, 988, 992, 993, 994, 997, 999, 1002, 1004, 1006, 1008, 1009, 1011, 1012, 1013, 1020, 1027, 1028, 1029, 1030, 1032, 1034, 1035], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 53, 54, 55, 57, 59, 66, 70, 71, 72, 75, 95, 98, 100, 109, 115, 116, 120, 122, 123, 124, 125, 143, 150, 153, 154, 155, 156, 157, 158, 163, 165, 167, 168, 169, 176, 177, 180, 182, 185, 196, 198, 199, 204, 206, 211, 212, 214, 216, 217, 219, 228, 230, 233, 234, 238, 240, 241, 249, 257, 259, 260, 261, 262, 267, 268, 273, 279, 295, 301, 311, 312, 314, 315, 317, 325, 329, 330, 331, 332, 333, 334, 338, 340, 342, 345, 346, 351, 356, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 385, 386, 387, 390, 394, 398, 400, 401, 402, 403, 405, 406, 408, 409, 411, 412, 428, 431, 434, 435, 436, 438, 439, 441, 443, 445, 448, 449, 450, 451, 452, 455, 456, 459, 460, 462, 463, 465, 469, 479, 480, 482, 483, 486, 488, 494, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 563, 566, 572, 573, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 595, 598, 599, 600, 601, 602, 606, 608, 610, 611, 613, 614, 618, 619, 622, 623, 624, 625, 626, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 689, 691, 693, 694, 695, 697, 702, 703, 707, 710, 712, 713, 714, 718, 722, 724, 725, 728, 730, 731, 732, 740, 745, 747, 751, 752, 753, 755, 758, 761, 764, 768, 769, 770, 771, 772, 773, 775, 779, 780, 781, 782, 784, 785, 786, 787, 789, 790, 791, 792, 793, 798, 799, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 859, 860, 862, 866, 867, 868, 869, 870, 871, 874, 876, 879, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 908, 917, 919, 920, 921, 926, 927, 937, 938, 944, 945, 946, 948, 949, 952, 953, 962, 967, 968, 969, 971, 973, 975, 976, 979, 981, 982, 983, 984, 985, 986, 988, 991, 992, 994, 998, 999, 1000, 1004, 1007, 1008, 1009, 1013, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "abl": [4, 5, 9, 24, 47, 55, 61, 82, 86, 99, 100, 127, 156, 168, 182, 187, 198, 214, 216, 223, 265, 270, 332, 356, 360, 361, 362, 368, 372, 374, 376, 378, 379, 385, 400, 402, 404, 408, 476, 494, 525, 815, 862, 967, 968, 974, 977, 978, 979, 984, 988, 991, 994, 995, 999, 1004, 1012, 1013, 1026, 1027, 1031], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 174, 182, 281, 340, 347, 360, 396, 402, 408, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 797, 830, 831, 898, 899, 900, 901, 967, 978, 981, 994, 1002, 1007, 1011, 1023, 1024], "depth": [4, 109, 115, 120, 124, 126, 131, 350, 352, 353, 354, 360, 372, 374, 378, 386, 407, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 830, 831, 835, 898, 899, 900, 901, 902, 904, 932, 983, 984, 994, 1022, 1023, 1031], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 70, 71, 72, 73, 110, 116, 117, 121, 122, 128, 143, 144, 146, 151, 171, 174, 198, 202, 206, 213, 214, 246, 257, 258, 259, 260, 261, 263, 265, 274, 281, 287, 288, 289, 298, 303, 306, 317, 320, 321, 323, 332, 335, 356, 360, 376, 386, 387, 399, 400, 404, 407, 408, 409, 417, 428, 440, 460, 462, 463, 469, 523, 525, 532, 540, 541, 542, 544, 546, 548, 549, 550, 552, 555, 556, 558, 560, 601, 625, 649, 650, 657, 659, 662, 665, 666, 667, 683, 688, 694, 699, 704, 709, 724, 728, 733, 744, 753, 777, 782, 784, 814, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 832, 837, 839, 840, 847, 885, 886, 890, 892, 895, 898, 900, 926, 927, 967, 972, 973, 974, 975, 979, 981, 982, 986, 990, 992, 994, 1008, 1013, 1028, 1029], "On": [4, 12, 17, 26, 67, 71, 72, 85, 86, 100, 109, 110, 113, 115, 117, 118, 123, 126, 127, 130, 133, 142, 144, 154, 155, 168, 169, 170, 179, 186, 187, 200, 202, 228, 229, 230, 231, 233, 234, 238, 239, 240, 241, 244, 246, 249, 254, 255, 256, 257, 259, 260, 261, 262, 264, 266, 271, 298, 301, 303, 305, 306, 307, 312, 313, 315, 316, 322, 332, 354, 360, 372, 375, 376, 378, 385, 387, 394, 398, 400, 404, 405, 407, 409, 410, 634, 647, 682, 725, 751, 871, 967, 971, 974, 977, 978, 980, 984, 991, 993, 1008, 1011], "contrari": [4, 13, 168, 220, 224, 244, 262, 301, 345, 368, 400, 487, 535, 597, 804, 871, 974, 980, 984], "significantli": [4, 24, 25, 37, 78, 79, 110, 116, 121, 123, 147, 168, 169, 170, 198, 202, 206, 214, 216, 259, 279, 312, 313, 346, 347, 356, 361, 378, 400, 405, 407, 408, 413, 460, 465, 470, 471, 529, 531, 538, 549, 556, 637, 638, 643, 644, 651, 652, 653, 654, 675, 683, 830, 831, 970, 974, 975, 981, 986, 993, 1020, 1022, 1023, 1027, 1028, 1033, 1034, 1035], "over": [4, 7, 8, 9, 16, 20, 24, 26, 27, 31, 37, 50, 55, 56, 72, 74, 95, 113, 116, 126, 142, 146, 150, 158, 162, 167, 169, 180, 192, 198, 206, 216, 227, 259, 260, 262, 264, 266, 267, 268, 271, 284, 292, 295, 296, 303, 314, 315, 317, 320, 345, 346, 360, 361, 362, 369, 370, 373, 374, 375, 376, 380, 386, 387, 396, 398, 399, 400, 401, 404, 405, 406, 407, 408, 410, 412, 437, 440, 455, 463, 500, 524, 525, 527, 528, 529, 530, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 572, 573, 579, 580, 582, 585, 593, 623, 624, 625, 635, 636, 637, 638, 643, 644, 649, 651, 652, 653, 654, 656, 657, 658, 659, 667, 668, 669, 676, 677, 688, 707, 709, 729, 753, 778, 781, 785, 787, 790, 791, 793, 798, 799, 801, 809, 811, 812, 813, 814, 815, 817, 846, 847, 848, 849, 865, 869, 890, 898, 900, 907, 916, 946, 967, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 991, 992, 993, 994, 998, 999, 1002, 1009, 1012, 1020, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1033], "compet": 4, "access": [4, 49, 78, 245, 250, 345, 354, 360, 361, 374, 375, 376, 382, 385, 387, 388, 400, 402, 403, 407, 408, 410, 441, 448, 455, 527, 558, 559, 560, 561, 608, 848, 849, 850, 905, 974, 977, 978, 984, 985, 986, 992, 993, 999, 1002, 1004, 1012, 1013, 1020, 1022, 1026, 1027, 1028, 1029, 1032, 1034, 1035, 1036], "requir": [4, 7, 13, 25, 45, 46, 48, 53, 55, 57, 58, 67, 70, 90, 99, 101, 102, 115, 116, 120, 124, 126, 130, 147, 169, 182, 187, 195, 198, 216, 219, 221, 228, 231, 234, 241, 260, 268, 270, 279, 281, 301, 306, 313, 314, 345, 346, 347, 368, 371, 372, 374, 376, 378, 380, 382, 385, 387, 388, 390, 391, 396, 399, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 417, 428, 429, 430, 435, 437, 441, 443, 448, 453, 455, 458, 460, 473, 474, 475, 487, 499, 512, 515, 526, 532, 540, 541, 542, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 563, 570, 571, 572, 601, 602, 610, 618, 623, 624, 625, 634, 649, 650, 657, 659, 662, 665, 666, 667, 668, 669, 677, 680, 682, 683, 684, 686, 714, 719, 720, 732, 737, 739, 742, 753, 774, 777, 787, 790, 791, 794, 796, 801, 813, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 847, 850, 851, 852, 854, 864, 865, 866, 868, 870, 878, 882, 883, 885, 886, 890, 891, 892, 895, 898, 899, 900, 901, 938, 944, 964, 967, 972, 973, 974, 975, 978, 979, 980, 981, 982, 984, 985, 988, 992, 993, 994, 999, 1004, 1011, 1013, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "geograph": [4, 11, 292, 369, 489], "repartit": 4, "immobil": 4, "quant": 4, "predictionerrordisplai": [4, 75, 130, 168, 255, 316, 978, 1035], "nrow": [4, 5, 32, 57, 66, 73, 95, 159, 169, 198, 200, 206, 216, 219, 220, 223, 261, 262, 279, 303, 305, 306, 316, 321, 339, 340, 1009], "ncol": [4, 5, 32, 53, 57, 66, 95, 100, 106, 169, 198, 199, 200, 206, 216, 219, 220, 230, 255, 261, 262, 270, 279, 296, 302, 303, 305, 306, 316, 339, 340, 346], "sharex": [4, 7, 14, 73, 92, 100, 131, 159, 169, 200, 237, 261, 284, 323, 1009], "sharei": [4, 75, 92, 100, 106, 131, 159, 169, 198, 200, 206, 237, 261, 270, 284, 302, 307, 339, 340, 346], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 75, 130, 168, 255, 316, 692], "residual_vs_predict": [4, 75, 255, 316, 692], "axis_idx": 4, "kind": [4, 9, 12, 24, 25, 75, 104, 116, 130, 142, 168, 169, 249, 253, 255, 268, 308, 313, 316, 329, 332, 345, 361, 362, 367, 369, 374, 376, 380, 385, 386, 398, 400, 403, 404, 405, 407, 408, 409, 479, 480, 494, 499, 500, 512, 515, 579, 623, 624, 692, 919, 974, 980, 985, 994, 1023, 1032, 1034, 1035], "enumer": [4, 8, 9, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 34, 37, 39, 40, 41, 42, 43, 44, 45, 50, 55, 59, 60, 61, 62, 70, 79, 81, 82, 86, 96, 98, 105, 109, 113, 116, 121, 122, 124, 125, 136, 152, 154, 159, 171, 178, 180, 189, 198, 220, 221, 224, 227, 232, 236, 237, 244, 245, 246, 247, 249, 250, 254, 261, 262, 268, 269, 284, 288, 289, 291, 298, 303, 304, 320, 321, 323, 325, 330, 332, 339, 340, 345, 351, 369, 550, 551, 555, 556, 771, 788, 789, 792, 794, 795, 796, 797, 800, 802, 803, 804, 805, 806, 807, 808], "pred": [4, 7, 11, 32, 341, 345, 369, 639, 660, 671, 688, 693, 697, 709, 719, 720, 728, 773, 774, 777, 778, 978], "zip": [4, 5, 8, 12, 24, 26, 31, 32, 37, 38, 40, 42, 45, 49, 55, 63, 64, 65, 75, 86, 92, 95, 96, 99, 104, 105, 106, 112, 114, 130, 131, 156, 162, 165, 168, 169, 170, 183, 189, 190, 198, 206, 207, 219, 231, 245, 249, 250, 257, 261, 262, 263, 266, 268, 279, 284, 287, 295, 296, 297, 303, 305, 306, 307, 324, 329, 340, 341, 351, 372, 407, 814, 988, 1013, 1016], "disp": [4, 32, 112, 126, 127, 253, 262, 274, 306, 312, 329, 334, 429, 622, 688, 691, 692, 839], "from_predict": [4, 32, 75, 130, 168, 237, 255, 266, 268, 314, 320, 345, 381, 429, 622, 689, 709, 717, 772, 774, 777, 778, 779, 978, 1017, 1033, 1034, 1035, 1036], "y_true": [4, 19, 32, 59, 75, 110, 130, 153, 198, 208, 216, 247, 323, 374, 423, 429, 430, 456, 473, 474, 475, 543, 545, 547, 548, 549, 551, 553, 555, 556, 559, 561, 602, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 669, 670, 688, 689, 691, 692, 693, 694, 698, 699, 700, 703, 704, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 772, 773, 774, 775, 777, 778, 779, 782, 784, 823, 824, 833, 841, 848, 891, 893, 896, 899, 901, 978, 1021, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1035], "y_pred": [4, 6, 7, 25, 30, 32, 34, 44, 57, 62, 70, 75, 109, 110, 123, 124, 130, 144, 168, 198, 200, 205, 208, 213, 215, 216, 227, 228, 237, 255, 257, 262, 286, 290, 298, 306, 323, 324, 356, 374, 381, 387, 407, 423, 430, 456, 473, 474, 475, 540, 543, 545, 547, 548, 549, 551, 553, 555, 556, 558, 559, 561, 602, 622, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 669, 670, 671, 688, 689, 691, 692, 693, 694, 699, 703, 704, 709, 712, 713, 714, 718, 719, 720, 724, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 773, 774, 775, 777, 778, 784, 787, 790, 791, 801, 811, 821, 823, 824, 833, 841, 848, 850, 890, 891, 892, 893, 894, 895, 896, 899, 901, 978, 980, 1009, 1026, 1027, 1029, 1031, 1035, 1036], "scatter_kwarg": [4, 75, 130, 168, 692], "set_xtick": [4, 8, 10, 16, 31, 34, 43, 60, 64, 106, 128, 132, 169, 171, 189, 214, 232, 244, 270, 271, 277, 295, 297, 303, 304, 329], "num": [4, 12, 71, 147, 150, 155, 156, 157, 169, 170, 200, 266, 267, 315, 317, 623], "set_ytick": [4, 16, 31, 34, 43, 60, 64, 106, 128, 162, 163, 171, 189, 214, 244, 270, 295, 297, 303, 304, 329, 347], "loc": [4, 7, 8, 9, 24, 26, 33, 40, 72, 75, 79, 80, 81, 85, 97, 99, 103, 104, 105, 109, 110, 112, 113, 114, 121, 122, 123, 124, 125, 127, 130, 132, 133, 137, 143, 150, 151, 157, 159, 168, 169, 180, 183, 188, 192, 198, 199, 200, 201, 204, 205, 208, 211, 212, 215, 216, 222, 230, 231, 232, 233, 235, 246, 247, 254, 257, 258, 259, 262, 263, 266, 269, 272, 273, 284, 285, 296, 302, 305, 306, 312, 315, 322, 331, 334, 339, 345, 351, 353, 801, 867, 879], "upper": [4, 7, 9, 24, 72, 75, 79, 80, 81, 109, 112, 113, 114, 122, 123, 124, 125, 130, 132, 143, 154, 156, 159, 168, 192, 198, 204, 205, 208, 212, 215, 216, 231, 235, 236, 258, 259, 260, 284, 285, 296, 306, 323, 331, 334, 339, 400, 406, 454, 579, 580, 582, 586, 604, 605, 606, 608, 610, 611, 613, 614, 616, 623, 624, 626, 628, 641, 645, 668, 725, 863, 864, 892, 893, 894, 914, 977, 978, 981, 988, 992, 993, 994, 1028], "bbox_to_anchor": [4, 37, 159, 264, 339], "set_aspect": [4, 153, 209, 246, 341], "equal": [4, 11, 12, 26, 37, 39, 53, 60, 80, 86, 110, 123, 153, 168, 199, 200, 209, 215, 238, 246, 249, 253, 257, 259, 268, 289, 303, 307, 332, 334, 341, 346, 369, 370, 374, 376, 387, 397, 398, 400, 404, 405, 407, 408, 413, 428, 431, 432, 433, 434, 436, 438, 440, 445, 450, 451, 454, 460, 465, 470, 471, 494, 503, 506, 510, 523, 524, 525, 530, 532, 534, 535, 540, 541, 542, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 579, 584, 585, 588, 590, 591, 598, 599, 616, 619, 620, 623, 624, 625, 626, 628, 632, 633, 636, 640, 649, 650, 662, 694, 709, 711, 719, 758, 773, 777, 778, 782, 784, 787, 788, 790, 791, 800, 801, 805, 811, 818, 822, 823, 830, 831, 832, 833, 838, 839, 840, 841, 842, 847, 848, 853, 854, 855, 862, 865, 868, 869, 870, 871, 873, 880, 887, 890, 891, 897, 898, 899, 900, 901, 916, 927, 953, 959, 972, 974, 978, 979, 981, 982, 984, 988, 992, 993, 994, 1012, 1013, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "adjust": [4, 9, 36, 38, 49, 58, 68, 78, 110, 123, 165, 202, 227, 232, 240, 260, 311, 324, 340, 346, 381, 400, 405, 407, 408, 515, 544, 545, 548, 550, 552, 553, 555, 649, 650, 657, 659, 665, 666, 667, 695, 696, 699, 705, 706, 745, 747, 776, 783, 825, 826, 828, 829, 860, 882, 883, 890, 891, 892, 895, 898, 900, 916, 977, 978, 982, 988, 1011, 1017, 1020, 1026, 1036], "box": [4, 10, 30, 55, 169, 170, 220, 301, 305, 381, 405, 407, 503, 546, 547, 866, 878, 902, 904, 978, 979, 985, 988, 994, 998, 1004, 1028, 1036], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 139, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 158, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 350, 351, 352, 353, 354, 361, 362, 374, 380, 385, 386, 390, 391, 397, 398, 402, 404, 405, 406, 407, 409, 410, 429, 493, 550, 584, 585, 622, 623, 688, 689, 691, 692, 693, 704, 793, 809, 902, 903, 904, 967, 972, 973, 975, 977, 978, 980, 981, 982, 984, 985, 988, 992, 993, 999, 1008, 1009, 1013, 1022, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1034], "seem": [4, 9, 46, 55, 123, 169, 198, 223, 227, 260, 296, 305, 345, 346, 373, 374, 379, 404, 492, 974, 978], "regim": [4, 387, 890, 891, 977], "overal": [4, 43, 48, 110, 113, 116, 130, 155, 216, 256, 279, 306, 307, 346, 360, 373, 374, 380, 397, 398, 407, 410, 438, 440, 455, 462, 463, 469, 540, 871, 975, 978, 994, 1002, 1030], "closer": [4, 27, 37, 98, 100, 129, 150, 169, 177, 202, 347, 398, 400, 405, 440, 544, 619, 703, 832, 833, 838, 840, 841, 842, 993, 1027], "diagon": [4, 25, 40, 82, 85, 216, 237, 246, 249, 250, 253, 332, 397, 400, 402, 410, 444, 462, 463, 469, 472, 502, 504, 518, 523, 541, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 641, 642, 645, 646, 647, 673, 674, 692, 706, 780, 785, 786, 834, 842, 972, 974, 977, 978, 981, 988, 1026, 1028, 1029, 1030], "obtain": [4, 7, 9, 12, 20, 27, 48, 55, 57, 58, 71, 74, 75, 100, 103, 110, 120, 123, 124, 128, 136, 147, 152, 154, 168, 169, 182, 198, 200, 202, 212, 223, 244, 245, 246, 255, 259, 260, 261, 265, 268, 306, 314, 330, 346, 347, 354, 356, 369, 371, 385, 387, 394, 398, 400, 402, 403, 405, 407, 408, 409, 410, 428, 433, 460, 487, 523, 524, 546, 547, 548, 549, 550, 551, 554, 555, 556, 584, 597, 605, 636, 650, 652, 657, 659, 663, 665, 667, 668, 678, 699, 703, 716, 729, 746, 781, 793, 809, 815, 818, 819, 822, 836, 847, 867, 879, 892, 895, 898, 899, 927, 968, 970, 972, 974, 975, 977, 978, 979, 981, 982, 984, 985, 988, 992, 993, 1026, 1028, 1031, 1033, 1034, 1035, 1036], "slightli": [4, 25, 64, 82, 113, 120, 123, 126, 130, 147, 150, 151, 152, 170, 177, 198, 216, 222, 224, 234, 267, 279, 311, 329, 347, 373, 374, 385, 398, 400, 407, 408, 410, 412, 437, 579, 580, 582, 629, 649, 790, 791, 890, 892, 895, 926, 927, 967, 974, 988, 992, 993, 1029, 1033, 1034], "cost": [4, 39, 98, 116, 150, 165, 174, 219, 232, 261, 268, 311, 332, 346, 347, 349, 355, 374, 380, 382, 385, 400, 407, 469, 491, 528, 529, 530, 537, 548, 549, 550, 551, 555, 556, 593, 601, 610, 618, 637, 638, 643, 644, 651, 652, 653, 654, 659, 663, 665, 667, 669, 678, 679, 683, 816, 890, 891, 892, 895, 898, 899, 900, 901, 927, 970, 974, 975, 978, 981, 991, 992, 993, 1000, 1015, 1026, 1029, 1030], "durat": [4, 8, 198, 216, 281, 347, 361, 944, 945, 974], "regressor": [4, 75, 86, 124, 129, 130, 133, 150, 155, 163, 165, 168, 176, 178, 180, 182, 198, 201, 215, 216, 217, 234, 312, 313, 360, 374, 376, 385, 387, 398, 401, 410, 423, 427, 456, 473, 474, 475, 476, 515, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 556, 557, 558, 559, 560, 561, 596, 597, 600, 602, 623, 624, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 658, 660, 661, 663, 664, 669, 670, 692, 818, 819, 822, 823, 824, 833, 841, 846, 847, 848, 851, 857, 865, 870, 871, 891, 893, 896, 898, 899, 900, 901, 904, 919, 921, 967, 968, 974, 978, 979, 981, 986, 992, 998, 1000, 1008, 1015, 1020, 1021, 1025, 1026, 1027, 1029, 1030, 1033, 1034, 1035], "mlpregressor": [4, 169, 238, 362, 846, 847, 982, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "hidden": [4, 169, 297, 298, 374, 382, 397, 405, 846, 847, 848, 982, 983, 998, 1020, 1031], "layer": [4, 165, 214, 238, 294, 297, 298, 299, 360, 382, 407, 505, 506, 513, 558, 816, 846, 847, 848, 851, 870, 983, 1000, 1015, 1026], "cyclic": [4, 637, 638, 643, 644, 651, 652, 653, 654, 1032], "within": [4, 20, 60, 115, 117, 118, 129, 144, 146, 147, 194, 199, 200, 210, 216, 238, 257, 258, 262, 272, 301, 302, 313, 330, 333, 340, 347, 356, 360, 369, 374, 378, 383, 385, 387, 388, 397, 398, 400, 401, 404, 406, 407, 411, 435, 439, 452, 454, 455, 460, 465, 506, 540, 558, 559, 560, 561, 584, 585, 623, 683, 687, 701, 715, 771, 785, 786, 792, 793, 805, 806, 814, 815, 830, 831, 832, 833, 838, 840, 841, 842, 849, 850, 851, 863, 871, 875, 876, 878, 879, 880, 881, 892, 893, 894, 895, 896, 898, 899, 900, 901, 967, 972, 974, 975, 981, 984, 988, 991, 993, 994, 999, 1002, 1004, 1008, 1011, 1013, 1022, 1023, 1027, 1028, 1033, 1034], "finer": [4, 37, 281, 332, 361, 400, 404, 967, 981, 1030], "resolut": [4, 11, 17, 105, 169, 291, 292, 332, 388, 398, 1004, 1030], "taken": [4, 7, 31, 42, 53, 55, 125, 155, 168, 231, 232, 247, 265, 303, 369, 371, 373, 374, 378, 387, 394, 399, 400, 404, 408, 410, 412, 431, 524, 574, 575, 637, 638, 641, 643, 644, 645, 649, 650, 651, 652, 653, 654, 668, 670, 672, 675, 686, 863, 864, 884, 887, 893, 894, 937, 978, 980, 988, 990, 1026, 1029, 1032, 1033], "everi": [4, 95, 162, 196, 199, 220, 233, 245, 250, 268, 314, 356, 369, 372, 374, 376, 378, 382, 387, 400, 402, 404, 405, 408, 431, 445, 499, 522, 527, 530, 536, 548, 550, 551, 555, 581, 582, 594, 637, 638, 640, 643, 644, 650, 651, 652, 653, 654, 655, 656, 657, 659, 663, 664, 665, 666, 667, 676, 677, 678, 683, 687, 744, 761, 769, 770, 800, 839, 898, 900, 902, 904, 916, 971, 973, 978, 979, 980, 988, 994, 1002, 1008, 1020, 1024, 1026, 1029, 1033], "offer": [4, 116, 376, 382, 385, 386, 390, 404, 405, 407, 408, 967, 968, 979, 982, 994, 998, 999, 1002, 1026], "view": [4, 16, 30, 42, 46, 78, 97, 169, 195, 239, 360, 362, 374, 400, 408, 527, 636, 648, 830, 831, 905, 974, 975], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 55, 57, 61, 78, 79, 80, 81, 82, 91, 96, 97, 98, 105, 111, 112, 123, 126, 160, 163, 177, 182, 188, 227, 231, 246, 247, 251, 284, 292, 305, 329, 363, 366, 370, 376, 379, 387, 400, 402, 405, 406, 412, 443, 460, 461, 462, 463, 464, 465, 466, 467, 487, 495, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 521, 523, 535, 540, 541, 554, 601, 602, 604, 605, 606, 608, 609, 610, 613, 614, 616, 618, 634, 635, 663, 668, 671, 694, 714, 731, 742, 766, 785, 786, 787, 801, 825, 826, 827, 828, 829, 830, 831, 835, 866, 870, 878, 882, 883, 884, 972, 974, 975, 976, 984, 1000, 1002, 1012, 1014, 1015, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1030, 1032, 1034], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 57, 58, 60, 61, 62, 64, 65, 66, 71, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 101, 102, 103, 108, 111, 113, 115, 117, 118, 119, 122, 123, 125, 126, 127, 130, 133, 134, 139, 142, 143, 146, 150, 151, 154, 156, 157, 159, 162, 163, 165, 166, 167, 172, 177, 178, 179, 180, 182, 187, 188, 192, 193, 196, 197, 198, 199, 200, 201, 204, 205, 207, 211, 212, 215, 216, 219, 220, 222, 223, 224, 226, 227, 232, 233, 234, 236, 237, 242, 244, 245, 247, 248, 249, 250, 252, 254, 256, 259, 260, 262, 264, 266, 268, 269, 270, 271, 273, 275, 277, 279, 284, 285, 286, 291, 295, 302, 304, 305, 308, 312, 313, 315, 317, 320, 321, 324, 325, 331, 332, 334, 335, 337, 338, 339, 340, 342, 345, 346, 352, 353, 360, 361, 363, 366, 370, 377, 379, 385, 386, 387, 391, 395, 398, 400, 408, 409, 425, 431, 434, 438, 440, 442, 443, 444, 445, 449, 450, 451, 453, 455, 460, 461, 462, 463, 464, 465, 466, 467, 479, 480, 481, 482, 483, 486, 487, 488, 493, 494, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 526, 527, 529, 530, 531, 532, 535, 538, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 564, 573, 574, 575, 580, 598, 599, 601, 602, 618, 621, 623, 625, 630, 631, 632, 633, 634, 637, 638, 640, 641, 643, 644, 645, 649, 651, 652, 653, 654, 661, 662, 663, 667, 668, 669, 670, 680, 681, 682, 683, 684, 685, 686, 692, 695, 696, 699, 721, 733, 771, 781, 785, 786, 787, 789, 790, 791, 792, 799, 801, 802, 803, 804, 805, 806, 807, 808, 815, 816, 821, 823, 824, 825, 826, 827, 829, 830, 831, 835, 839, 846, 847, 848, 850, 853, 855, 864, 867, 871, 879, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 913, 926, 927, 949, 952, 968, 970, 973, 975, 977, 978, 982, 983, 984, 986, 988, 993, 994, 998, 999, 1000, 1004, 1008, 1009, 1011, 1012, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "constant": [4, 105, 113, 153, 157, 163, 168, 186, 199, 200, 202, 216, 229, 234, 239, 262, 291, 296, 298, 302, 304, 312, 340, 342, 356, 366, 376, 383, 387, 397, 407, 410, 423, 437, 456, 473, 474, 475, 502, 504, 525, 529, 531, 538, 540, 541, 542, 543, 545, 547, 549, 551, 553, 556, 559, 561, 581, 597, 600, 602, 604, 618, 621, 623, 624, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 678, 680, 684, 686, 712, 713, 714, 718, 765, 767, 775, 823, 824, 833, 841, 847, 848, 855, 866, 869, 878, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 972, 974, 975, 978, 980, 981, 988, 992, 994, 1015, 1023, 1028, 1030, 1032, 1033, 1034, 1036], "varianc": [4, 5, 27, 44, 55, 57, 62, 73, 78, 80, 85, 86, 95, 96, 97, 100, 103, 104, 106, 108, 125, 134, 157, 159, 165, 168, 176, 178, 182, 187, 198, 200, 203, 216, 217, 249, 256, 259, 262, 268, 269, 272, 288, 295, 301, 306, 346, 356, 366, 370, 383, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 410, 412, 432, 436, 440, 454, 512, 515, 523, 524, 525, 532, 535, 540, 541, 546, 547, 549, 550, 551, 556, 594, 598, 599, 602, 616, 634, 635, 636, 643, 647, 648, 651, 653, 663, 664, 665, 666, 667, 678, 701, 718, 775, 785, 786, 828, 839, 854, 860, 866, 868, 870, 876, 878, 880, 881, 899, 901, 953, 954, 955, 959, 972, 973, 974, 976, 981, 982, 983, 990, 992, 993, 994, 995, 1000, 1009, 1011, 1012, 1015, 1020, 1028, 1030, 1031, 1032, 1033, 1034, 1035], "poisson": [4, 165, 176, 217, 235, 370, 407, 455, 456, 487, 514, 543, 549, 553, 556, 639, 660, 663, 671, 697, 714, 735, 739, 740, 742, 816, 850, 851, 854, 855, 863, 864, 865, 870, 899, 901, 931, 974, 994, 1030, 1031, 1032, 1033, 1034, 1036], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 100, 131, 139, 174, 212, 227, 232, 233, 257, 259, 261, 264, 270, 274, 313, 320, 321, 323, 325, 329, 331, 332, 335, 336, 338, 339, 342, 403, 405, 410, 443, 526, 553, 610, 611, 630, 631, 632, 634, 635, 636, 639, 671, 676, 682, 714, 737, 742, 749, 756, 765, 766, 767, 785, 798, 801, 885, 886, 887, 892, 893, 894, 895, 896, 967, 970, 973, 974, 976, 991, 993, 1004, 1008, 1009, 1011, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1030, 1031, 1034, 1035, 1036], "achiev": [4, 12, 17, 19, 27, 31, 98, 110, 119, 121, 128, 158, 174, 198, 206, 256, 259, 266, 306, 323, 332, 335, 340, 345, 356, 360, 362, 368, 369, 371, 376, 380, 385, 387, 397, 398, 400, 404, 405, 407, 408, 544, 549, 556, 631, 640, 667, 669, 698, 730, 753, 790, 791, 826, 870, 967, 968, 970, 974, 978, 988, 991, 993, 1001, 1013, 1033], "gridsearchcv": [4, 54, 69, 71, 73, 74, 76, 78, 103, 116, 165, 233, 239, 249, 252, 257, 258, 259, 260, 264, 267, 270, 275, 281, 283, 298, 303, 313, 317, 332, 356, 361, 376, 385, 387, 391, 401, 404, 410, 493, 511, 531, 532, 566, 590, 598, 644, 694, 732, 798, 801, 850, 860, 890, 898, 967, 974, 978, 982, 992, 993, 998, 999, 1008, 1009, 1013, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035], "tweedieregressor": [4, 312, 315, 639, 660, 974, 1031, 1034, 1035], "power": [4, 7, 17, 116, 121, 167, 199, 216, 250, 262, 267, 283, 301, 302, 305, 320, 329, 360, 361, 386, 398, 400, 403, 406, 407, 408, 411, 435, 473, 474, 475, 523, 526, 532, 535, 621, 671, 685, 714, 737, 739, 742, 832, 833, 840, 841, 843, 844, 865, 866, 867, 878, 879, 926, 927, 974, 975, 978, 986, 988, 992, 993, 1002, 1023, 1026, 1028, 1030, 1031, 1033], "param_grid": [4, 6, 71, 72, 73, 74, 116, 123, 233, 239, 249, 257, 258, 259, 263, 264, 267, 270, 281, 303, 332, 387, 391, 401, 407, 732, 787, 790, 798, 799, 967, 978, 1008, 1009], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 351, 352, 353, 354, 355, 361, 368, 369, 371, 380, 387, 397, 400, 406, 408, 411, 423, 435, 456, 473, 474, 475, 479, 480, 481, 482, 483, 484, 485, 486, 488, 491, 492, 493, 495, 496, 501, 503, 505, 506, 510, 513, 514, 527, 528, 535, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 561, 574, 575, 581, 585, 587, 602, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 667, 668, 669, 670, 688, 695, 696, 704, 719, 720, 721, 724, 728, 729, 747, 759, 773, 774, 777, 782, 783, 784, 787, 801, 811, 812, 813, 823, 824, 825, 826, 833, 835, 841, 848, 865, 869, 891, 893, 896, 898, 899, 900, 901, 927, 967, 974, 975, 978, 979, 980, 981, 988, 992, 993, 994, 1009, 1013, 1021, 1026, 1028, 1036], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 361, 374, 375, 376, 377, 378, 380, 385, 387, 390, 408, 999, 1001, 1013], "155": [4, 15, 249, 251], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 356, 360, 369, 376, 378, 380, 387, 397, 400, 404, 405, 407, 408, 410, 455, 458, 479, 481, 482, 483, 485, 487, 491, 493, 495, 501, 544, 574, 579, 580, 581, 582, 612, 615, 622, 623, 703, 707, 748, 749, 753, 754, 756, 757, 764, 765, 766, 767, 768, 771, 787, 790, 791, 801, 814, 820, 821, 824, 827, 838, 840, 841, 842, 847, 848, 967, 968, 972, 973, 974, 975, 978, 979, 980, 981, 982, 985, 988, 989, 994, 1004, 1010, 1012, 1035], "plot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 361, 372, 374, 375, 378, 380, 382, 387, 390, 408, 411, 431, 435, 445, 452, 456, 489, 521, 635, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 859, 860, 862, 865, 866, 867, 868, 869, 870, 875, 876, 877, 878, 879, 880, 881, 922, 978, 998, 1011, 1013, 1020, 1022, 1026, 1030, 1034], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 375, 401, 459, 888, 994, 998, 999, 1031, 1034], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 369, 374, 376, 387, 390, 393, 1009, 1020, 1024, 1027], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 353, 354, 374, 378, 387, 390, 393, 1013, 1020, 1027], "kernelpca": [5, 401, 405, 524, 525, 532, 535, 679, 681, 683, 856, 988, 1021, 1022, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "take": [5, 8, 20, 27, 30, 46, 53, 55, 57, 66, 75, 80, 90, 92, 95, 110, 119, 150, 152, 155, 159, 168, 174, 181, 202, 206, 207, 223, 234, 246, 247, 254, 260, 264, 268, 269, 277, 279, 282, 285, 286, 287, 289, 290, 301, 315, 323, 328, 329, 332, 342, 346, 347, 351, 360, 361, 362, 368, 369, 372, 374, 376, 379, 380, 381, 382, 385, 387, 388, 398, 400, 401, 403, 404, 405, 407, 408, 409, 410, 412, 428, 434, 437, 438, 440, 441, 443, 448, 449, 450, 452, 454, 460, 510, 524, 529, 530, 531, 537, 538, 572, 583, 586, 587, 589, 590, 591, 601, 602, 607, 611, 612, 615, 623, 634, 640, 662, 664, 665, 666, 667, 670, 682, 683, 696, 698, 700, 710, 719, 720, 728, 732, 733, 746, 761, 764, 768, 769, 770, 771, 773, 774, 777, 778, 787, 788, 792, 793, 801, 805, 814, 832, 833, 834, 836, 838, 839, 840, 841, 842, 854, 864, 885, 886, 890, 891, 892, 893, 894, 895, 896, 914, 948, 967, 970, 974, 975, 977, 978, 979, 981, 983, 984, 985, 988, 993, 994, 1002, 1004, 1008, 1010, 1017, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "exact": [5, 7, 82, 100, 116, 155, 202, 232, 279, 356, 360, 361, 368, 374, 376, 383, 385, 386, 387, 400, 407, 409, 410, 425, 473, 474, 475, 479, 487, 525, 526, 532, 552, 553, 629, 633, 637, 683, 787, 801, 811, 812, 813, 892, 895, 967, 970, 974, 975, 984, 988, 992, 993, 1027, 1028, 1030], "usp": 5, "digit": [5, 29, 35, 36, 51, 68, 72, 88, 93, 135, 140, 145, 165, 189, 205, 214, 218, 223, 225, 231, 232, 257, 258, 261, 283, 288, 294, 296, 297, 299, 317, 319, 326, 367, 374, 380, 400, 406, 407, 409, 432, 436, 438, 493, 532, 535, 540, 557, 649, 679, 680, 681, 682, 683, 688, 695, 696, 704, 708, 709, 727, 781, 783, 812, 816, 832, 839, 846, 850, 851, 860, 870, 876, 883, 886, 895, 902, 903, 904, 967, 973, 975, 978, 981, 983, 991, 1004, 1008, 1011, 1012, 1015, 1024], "reproduc": [5, 12, 60, 110, 168, 174, 186, 268, 298, 361, 363, 373, 374, 376, 377, 382, 385, 387, 394, 400, 404, 405, 408, 412, 431, 445, 451, 460, 465, 479, 482, 483, 486, 488, 494, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 542, 544, 545, 546, 547, 550, 551, 552, 553, 554, 598, 599, 601, 602, 625, 630, 631, 632, 633, 637, 638, 641, 643, 644, 645, 651, 652, 653, 654, 657, 658, 659, 662, 667, 669, 670, 680, 681, 683, 684, 685, 781, 785, 786, 789, 790, 791, 792, 793, 799, 801, 802, 803, 804, 805, 806, 807, 814, 815, 816, 820, 821, 824, 835, 839, 846, 847, 848, 855, 867, 871, 879, 882, 883, 890, 891, 892, 895, 926, 927, 949, 952, 970, 998, 1001, 1020, 1028, 1033, 1034], "sect": 5, "bak\u0131r": [5, 405, 526], "g\u00f6khan": [5, 405, 526], "h": [5, 6, 48, 58, 95, 96, 109, 110, 111, 128, 152, 168, 246, 284, 287, 295, 303, 315, 325, 328, 347, 371, 380, 398, 400, 402, 405, 406, 407, 408, 411, 435, 510, 523, 526, 529, 531, 538, 544, 558, 559, 573, 581, 598, 599, 680, 684, 695, 699, 747, 825, 829, 830, 831, 836, 846, 861, 870, 970, 972, 974, 975, 976, 978, 980, 982, 983, 992, 994, 1009, 1026, 1031, 1035, 1036, 1037], "jason": [5, 405, 526, 886, 1026, 1028, 1032, 1035], "weston": [5, 405, 526, 584, 585, 886], "bernhard": [5, 405, 526, 821, 856, 886, 979, 984, 993, 1026], "sch\u00f6lkopf": [5, 405, 526, 856, 984, 988, 993], "pre": [5, 71, 120, 168, 187, 301, 347, 363, 372, 374, 387, 390, 402, 404, 405, 407, 408, 409, 411, 412, 434, 435, 438, 450, 524, 526, 681, 703, 753, 853, 895, 978, 983, 988, 993, 994, 998, 999, 1015, 1023, 1028, 1034], "advanc": [5, 165, 226, 228, 242, 259, 362, 400, 405, 480, 492, 526, 623, 630, 773, 785, 839, 848, 851, 870, 899, 970, 978, 981, 988, 1002, 1017, 1022], "neural": [5, 6, 31, 259, 297, 363, 385, 387, 394, 404, 405, 407, 412, 524, 526, 529, 531, 538, 558, 559, 630, 636, 687, 731, 785, 839, 846, 847, 848, 856, 970, 974, 975, 976, 978, 981, 984, 988, 992, 994, 998, 1000, 1002, 1009, 1014, 1015, 1020, 1032], "system": [5, 100, 182, 259, 266, 356, 360, 361, 362, 369, 371, 374, 375, 376, 377, 382, 385, 390, 400, 405, 407, 411, 435, 462, 463, 469, 526, 530, 534, 541, 630, 636, 641, 642, 645, 646, 647, 673, 674, 716, 746, 759, 785, 839, 885, 886, 946, 974, 978, 981, 990, 998, 999, 1002, 1013, 1020, 1028, 1029], "2004": [5, 147, 259, 369, 371, 400, 402, 405, 464, 526, 598, 599, 680, 684, 696, 733, 773, 886, 972, 974, 975, 980, 993, 1011], "449": [5, 405, 526], "456": [5, 270, 275, 405, 526], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 56, 57, 61, 65, 66, 67, 70, 71, 72, 74, 75, 82, 95, 97, 99, 100, 101, 103, 106, 109, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 129, 130, 147, 150, 151, 153, 154, 155, 156, 157, 159, 163, 174, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 191, 192, 198, 199, 200, 202, 203, 205, 206, 213, 214, 215, 216, 219, 220, 221, 222, 224, 227, 230, 232, 233, 235, 237, 244, 246, 247, 258, 260, 262, 263, 265, 272, 277, 279, 281, 284, 291, 292, 295, 298, 301, 302, 304, 305, 306, 320, 321, 322, 323, 325, 340, 345, 346, 347, 368, 374, 378, 382, 385, 387, 388, 404, 442, 525, 857, 970, 996, 998, 1023], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 57, 75, 82, 116, 156, 177, 182, 183, 185, 189, 191, 192, 203, 220, 221, 227, 230, 260, 262, 265, 272, 291, 306, 340, 345, 346, 347, 522, 528, 649, 655, 676, 677, 748, 749, 976, 978], "licenc": [5, 368], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 129, 130, 147, 150, 151, 153, 154, 155, 156, 157, 159, 163, 174, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 203, 205, 206, 214, 215, 216, 220, 221, 222, 224, 227, 230, 232, 233, 235, 237, 244, 246, 260, 263, 265, 272, 277, 279, 281, 287, 288, 289, 291, 292, 295, 298, 301, 302, 303, 304, 305, 306, 320, 321, 322, 323, 325, 336, 337, 340, 341, 345, 346, 347, 380], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 129, 130, 147, 150, 151, 153, 154, 155, 156, 157, 159, 163, 174, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 203, 205, 206, 214, 215, 216, 220, 221, 227, 232, 233, 235, 237, 244, 246, 260, 265, 272, 277, 279, 281, 287, 288, 289, 291, 292, 295, 301, 302, 303, 304, 305, 306, 336, 337, 340, 341, 345, 346, 347], "normal": [5, 12, 17, 19, 20, 26, 29, 34, 35, 37, 40, 44, 46, 57, 61, 62, 66, 73, 75, 78, 79, 80, 85, 86, 96, 101, 110, 111, 113, 116, 122, 123, 126, 127, 142, 153, 156, 157, 163, 165, 167, 168, 176, 177, 178, 179, 180, 182, 188, 191, 193, 196, 200, 201, 202, 204, 212, 217, 222, 237, 244, 249, 250, 253, 256, 259, 265, 284, 285, 300, 302, 306, 309, 312, 315, 323, 332, 346, 347, 356, 363, 366, 369, 370, 371, 374, 379, 383, 386, 387, 397, 398, 400, 401, 403, 406, 407, 408, 412, 431, 440, 442, 443, 444, 453, 455, 456, 466, 473, 474, 475, 480, 487, 503, 506, 510, 517, 518, 524, 527, 532, 533, 535, 539, 540, 543, 544, 545, 548, 549, 550, 551, 553, 554, 555, 556, 557, 570, 571, 573, 579, 580, 581, 582, 602, 616, 618, 630, 641, 642, 645, 646, 647, 649, 650, 655, 656, 660, 663, 667, 671, 678, 682, 686, 688, 694, 695, 697, 709, 714, 716, 724, 726, 731, 735, 739, 740, 742, 745, 746, 747, 751, 760, 782, 783, 784, 790, 791, 816, 818, 827, 829, 835, 836, 839, 850, 851, 854, 855, 858, 859, 860, 863, 864, 865, 866, 867, 868, 870, 875, 876, 878, 879, 880, 881, 885, 886, 898, 899, 900, 901, 926, 927, 931, 954, 955, 960, 961, 967, 972, 974, 975, 976, 977, 980, 984, 989, 991, 993, 994, 1009, 1011, 1012, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "pixel": [5, 6, 13, 20, 32, 47, 48, 53, 95, 108, 134, 145, 165, 174, 231, 257, 297, 298, 371, 400, 405, 407, 408, 409, 484, 485, 486, 555, 576, 577, 598, 599, 625, 981, 983, 994, 1009, 1012], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 71, 75, 86, 100, 109, 110, 115, 117, 121, 122, 123, 124, 125, 126, 129, 143, 144, 167, 168, 170, 171, 174, 182, 193, 198, 205, 206, 213, 214, 216, 228, 240, 241, 253, 256, 257, 262, 266, 268, 272, 277, 287, 288, 295, 297, 298, 303, 305, 306, 308, 311, 312, 313, 324, 350, 354, 356, 379, 386, 401, 404, 407, 428, 429, 549, 551, 558, 559, 688, 689, 691, 693, 787, 818, 821, 839, 847, 848, 850, 900, 901, 967, 968, 978, 980, 981, 986, 988, 993, 1009, 1017, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1029, 1033], "data_id": [5, 120, 155, 168, 198, 216, 228, 307, 368, 487], "41082": 5, "return_x_i": [5, 7, 14, 58, 70, 71, 72, 73, 95, 116, 120, 121, 133, 136, 137, 138, 143, 162, 163, 170, 174, 183, 185, 186, 187, 189, 194, 195, 205, 213, 214, 228, 236, 240, 241, 255, 258, 261, 266, 267, 274, 277, 281, 288, 296, 297, 298, 306, 311, 313, 315, 316, 317, 323, 335, 347, 350, 367, 379, 380, 386, 394, 400, 401, 404, 407, 409, 437, 479, 480, 481, 482, 483, 485, 486, 487, 488, 491, 492, 493, 495, 496, 501, 523, 524, 525, 526, 549, 552, 553, 558, 559, 583, 586, 587, 589, 590, 591, 593, 601, 610, 611, 613, 614, 629, 630, 649, 650, 659, 664, 665, 666, 679, 680, 681, 682, 692, 778, 790, 791, 793, 818, 823, 834, 839, 842, 899, 900, 901, 968, 973, 978, 979, 980, 981, 988, 1004, 1008, 1009, 1011, 1012, 1017, 1026, 1028, 1030, 1033], "idea": [5, 53, 80, 81, 116, 147, 155, 168, 199, 219, 284, 332, 350, 360, 361, 374, 379, 380, 402, 403, 404, 405, 406, 407, 409, 598, 599, 974, 975, 978, 981, 984, 997, 1002, 1013], "noisi": [5, 33, 49, 55, 62, 96, 110, 143, 150, 156, 182, 197, 200, 222, 230, 250, 260, 266, 268, 269, 306, 352, 353, 356, 400, 408, 411, 435, 437, 441, 512, 515, 927, 973, 975, 981, 993, 998], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 30, 34, 37, 42, 50, 53, 57, 61, 66, 71, 72, 75, 79, 80, 95, 97, 98, 105, 111, 116, 126, 129, 132, 151, 155, 158, 159, 168, 169, 171, 174, 177, 178, 180, 182, 184, 188, 189, 190, 192, 197, 198, 199, 200, 201, 202, 207, 208, 209, 211, 213, 214, 216, 217, 221, 222, 224, 230, 231, 232, 233, 234, 238, 244, 246, 250, 254, 255, 257, 259, 262, 264, 269, 270, 273, 284, 285, 286, 298, 302, 303, 305, 307, 308, 314, 324, 325, 330, 331, 333, 334, 335, 339, 340, 342, 345, 346, 350, 353, 354, 360, 362, 369, 371, 374, 376, 379, 380, 391, 397, 400, 401, 404, 405, 406, 407, 408, 428, 432, 436, 440, 462, 463, 469, 481, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 519, 521, 522, 525, 527, 528, 530, 535, 536, 537, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 601, 622, 623, 624, 630, 631, 632, 633, 637, 638, 639, 640, 643, 644, 649, 650, 651, 652, 653, 654, 656, 658, 660, 662, 671, 672, 675, 679, 680, 681, 682, 684, 736, 785, 786, 789, 814, 815, 820, 825, 826, 827, 829, 830, 831, 835, 847, 848, 866, 868, 871, 880, 967, 968, 971, 975, 978, 979, 985, 988, 990, 1004, 1008, 1012, 1013, 1028, 1029, 1030, 1033, 1034], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 55, 61, 62, 67, 75, 86, 95, 96, 98, 100, 103, 111, 113, 123, 127, 128, 149, 150, 155, 160, 165, 177, 179, 180, 182, 187, 188, 193, 196, 197, 200, 201, 202, 203, 215, 222, 224, 227, 229, 230, 233, 259, 267, 272, 273, 291, 295, 296, 303, 308, 312, 339, 352, 353, 356, 370, 376, 379, 398, 400, 405, 407, 409, 411, 435, 437, 443, 502, 504, 505, 506, 507, 508, 509, 513, 515, 516, 521, 523, 525, 532, 598, 599, 602, 604, 605, 606, 607, 608, 612, 613, 615, 616, 635, 636, 640, 641, 642, 644, 645, 646, 647, 654, 655, 656, 662, 670, 683, 867, 879, 885, 971, 973, 974, 975, 978, 981, 991, 1011, 1012, 1021, 1026, 1031, 1033, 1034], "approach": [5, 8, 58, 63, 66, 99, 147, 150, 162, 168, 171, 180, 186, 198, 200, 206, 216, 219, 307, 345, 346, 347, 362, 373, 374, 380, 383, 387, 390, 394, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 428, 434, 437, 439, 443, 453, 511, 523, 573, 580, 626, 649, 650, 665, 666, 819, 835, 927, 967, 968, 974, 975, 978, 979, 981, 982, 988, 992, 993, 997, 998, 1002, 1006, 1011, 1012, 1024, 1036], "copi": [5, 12, 17, 44, 62, 75, 98, 113, 162, 163, 168, 169, 170, 184, 191, 204, 214, 216, 220, 279, 320, 321, 323, 325, 346, 351, 361, 371, 374, 376, 378, 379, 380, 385, 387, 425, 428, 431, 433, 434, 435, 437, 438, 440, 445, 450, 473, 474, 475, 476, 491, 493, 501, 523, 524, 525, 526, 532, 539, 544, 545, 550, 552, 553, 563, 581, 588, 598, 599, 601, 602, 619, 621, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 656, 662, 663, 665, 670, 672, 675, 676, 677, 722, 759, 780, 787, 801, 830, 831, 845, 853, 856, 859, 860, 861, 862, 866, 867, 868, 870, 873, 875, 876, 877, 878, 879, 880, 881, 885, 886, 890, 892, 893, 894, 895, 896, 905, 908, 910, 911, 937, 949, 951, 952, 988, 993, 994, 999, 1005, 1008, 1013, 1020, 1023, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "add": [5, 12, 16, 17, 20, 25, 26, 27, 32, 33, 40, 44, 54, 75, 80, 81, 86, 96, 119, 122, 143, 147, 150, 155, 156, 157, 162, 163, 180, 187, 193, 199, 201, 202, 213, 222, 227, 231, 233, 234, 266, 268, 269, 279, 291, 303, 305, 311, 313, 314, 335, 339, 340, 346, 360, 372, 373, 374, 375, 376, 378, 380, 382, 387, 390, 396, 398, 404, 407, 408, 409, 506, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 593, 618, 619, 621, 623, 649, 650, 685, 688, 808, 830, 831, 887, 917, 946, 967, 968, 977, 984, 988, 991, 992, 999, 1011, 1012, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "corrupt": [5, 103, 182, 204, 215, 385, 846, 974, 986], "uncorrupt": 5, "base": [5, 12, 14, 17, 20, 25, 26, 27, 49, 56, 57, 58, 67, 70, 71, 75, 80, 95, 96, 109, 110, 111, 116, 122, 123, 124, 128, 130, 133, 141, 144, 148, 150, 155, 156, 158, 169, 170, 171, 176, 187, 198, 199, 206, 215, 216, 217, 219, 227, 234, 235, 256, 257, 262, 279, 292, 298, 301, 302, 304, 306, 313, 315, 325, 330, 346, 350, 360, 361, 363, 368, 369, 370, 371, 372, 375, 376, 377, 382, 387, 388, 389, 398, 401, 405, 406, 408, 410, 411, 412, 428, 435, 437, 438, 439, 440, 441, 443, 447, 448, 452, 454, 455, 456, 457, 458, 478, 492, 499, 500, 523, 524, 526, 527, 528, 529, 530, 532, 537, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 569, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 597, 598, 599, 601, 602, 607, 608, 609, 612, 615, 623, 624, 626, 627, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 655, 660, 662, 663, 664, 665, 666, 671, 673, 674, 676, 677, 678, 681, 683, 695, 708, 716, 725, 726, 727, 729, 731, 745, 746, 747, 775, 783, 787, 789, 790, 791, 793, 794, 796, 801, 805, 806, 807, 808, 814, 816, 820, 821, 824, 832, 833, 834, 836, 838, 840, 841, 842, 847, 848, 852, 855, 862, 863, 865, 869, 871, 879, 882, 883, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 913, 921, 946, 947, 967, 969, 970, 972, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 988, 990, 991, 992, 993, 994, 997, 998, 999, 1002, 1008, 1015, 1016, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031], "solv": [5, 6, 66, 150, 187, 232, 259, 373, 374, 375, 376, 379, 385, 400, 402, 404, 405, 410, 438, 444, 453, 469, 522, 528, 529, 530, 534, 536, 537, 538, 539, 626, 628, 637, 643, 645, 646, 655, 656, 661, 663, 665, 668, 676, 677, 678, 820, 890, 891, 894, 927, 969, 972, 974, 975, 978, 979, 992, 993, 994, 997, 998, 1002, 1006, 1009, 1013, 1026, 1030, 1033], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 109, 110, 113, 117, 121, 122, 123, 124, 125, 126, 129, 138, 139, 143, 144, 156, 157, 158, 159, 167, 168, 169, 170, 171, 174, 178, 182, 193, 195, 196, 199, 205, 206, 212, 213, 214, 216, 228, 236, 240, 241, 246, 248, 253, 256, 257, 262, 266, 268, 272, 277, 285, 287, 288, 295, 297, 298, 303, 305, 306, 308, 311, 312, 313, 323, 324, 331, 345, 350, 354, 356, 360, 368, 376, 379, 386, 401, 404, 407, 428, 429, 500, 549, 550, 551, 558, 559, 688, 689, 691, 693, 816, 818, 821, 839, 847, 848, 850, 864, 900, 901, 968, 978, 980, 981, 982, 984, 986, 988, 992, 993, 1008, 1009, 1017], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 109, 110, 113, 115, 117, 121, 122, 123, 124, 125, 126, 129, 138, 139, 143, 144, 155, 158, 167, 168, 169, 170, 171, 174, 178, 182, 188, 193, 195, 196, 204, 205, 206, 212, 213, 214, 216, 228, 230, 236, 240, 241, 246, 253, 256, 257, 262, 266, 268, 272, 273, 277, 285, 287, 288, 295, 297, 298, 303, 305, 306, 308, 311, 312, 313, 323, 324, 331, 345, 350, 352, 353, 354, 356, 360, 368, 376, 379, 386, 401, 404, 407, 429, 461, 462, 463, 464, 465, 466, 467, 500, 549, 550, 551, 558, 559, 688, 689, 691, 693, 816, 818, 821, 839, 847, 848, 850, 864, 900, 901, 968, 978, 980, 981, 982, 984, 988, 992, 993, 994, 1008, 1009, 1011, 1017, 1020], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 109, 110, 113, 117, 121, 122, 123, 124, 125, 126, 129, 138, 139, 143, 144, 156, 157, 158, 159, 167, 168, 169, 170, 171, 174, 178, 182, 193, 195, 196, 199, 205, 206, 213, 214, 228, 236, 240, 241, 246, 253, 256, 257, 262, 266, 268, 272, 277, 287, 288, 295, 297, 298, 303, 306, 308, 311, 312, 313, 320, 321, 323, 324, 325, 345, 350, 354, 356, 360, 368, 376, 379, 386, 401, 404, 407, 428, 429, 549, 550, 551, 558, 559, 688, 689, 691, 693, 816, 818, 821, 839, 847, 848, 850, 900, 901, 968, 978, 980, 981, 986, 988, 993, 1008, 1009, 1017], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 109, 110, 113, 115, 117, 121, 122, 123, 124, 125, 126, 129, 138, 139, 143, 144, 158, 167, 168, 169, 170, 171, 174, 182, 193, 195, 198, 204, 205, 206, 213, 214, 216, 228, 236, 240, 241, 246, 253, 256, 257, 262, 266, 268, 272, 277, 287, 288, 295, 297, 298, 303, 306, 308, 311, 312, 313, 323, 324, 345, 350, 354, 356, 368, 379, 386, 401, 404, 407, 429, 549, 550, 551, 558, 559, 688, 689, 691, 693, 816, 818, 821, 839, 847, 848, 850, 900, 901, 978, 980, 981, 988, 993, 1008, 1009, 1017, 1020], "stratifi": [5, 100, 117, 126, 143, 170, 213, 228, 241, 254, 259, 262, 268, 287, 288, 311, 376, 387, 542, 550, 558, 559, 593, 650, 657, 659, 667, 787, 790, 791, 793, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 824, 839, 847, 949, 978, 981, 1008, 1025, 1026, 1027, 1029, 1030, 1033], "train_siz": [5, 7, 10, 110, 129, 151, 174, 214, 233, 261, 272, 313, 316, 340, 789, 793, 804, 807, 814, 816, 973, 1008, 1020, 1021, 1026, 1027], "1_000": [5, 48, 72, 100, 150, 155, 157, 169, 231, 256, 692, 809], "rng": [5, 20, 21, 31, 37, 50, 81, 86, 95, 97, 103, 111, 123, 126, 127, 129, 150, 151, 154, 156, 157, 159, 162, 163, 167, 170, 177, 178, 179, 180, 182, 187, 192, 199, 200, 205, 212, 227, 233, 234, 236, 237, 244, 254, 262, 265, 270, 271, 295, 305, 308, 312, 313, 315, 317, 320, 321, 325, 335, 340, 352, 353, 356, 361, 376, 379, 391, 461, 465, 466, 467, 634, 640, 661, 663, 669, 799, 825, 826, 827, 829, 830, 831, 835, 838, 840, 841, 842, 867, 879, 882, 883, 885, 886, 887, 896, 1004], "randomst": [5, 13, 20, 21, 24, 31, 37, 50, 61, 81, 82, 86, 95, 97, 103, 111, 122, 123, 126, 127, 129, 143, 150, 151, 154, 156, 157, 159, 162, 163, 167, 170, 177, 178, 179, 180, 182, 187, 192, 199, 200, 205, 212, 222, 227, 233, 234, 237, 244, 247, 254, 262, 265, 266, 268, 269, 270, 271, 295, 302, 304, 305, 308, 312, 313, 315, 317, 320, 321, 325, 335, 340, 352, 353, 376, 379, 383, 387, 391, 405, 412, 431, 434, 438, 440, 442, 443, 444, 445, 449, 450, 451, 453, 460, 461, 465, 466, 467, 479, 482, 483, 486, 488, 494, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 574, 575, 598, 599, 601, 602, 618, 623, 625, 630, 631, 632, 633, 634, 637, 638, 640, 641, 643, 644, 645, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 663, 665, 667, 668, 669, 670, 678, 680, 681, 682, 683, 684, 685, 686, 692, 771, 781, 785, 786, 789, 790, 791, 792, 793, 799, 801, 802, 803, 804, 805, 806, 807, 814, 815, 816, 820, 821, 824, 825, 826, 827, 829, 830, 831, 835, 839, 846, 847, 848, 855, 867, 871, 879, 882, 883, 885, 886, 887, 890, 891, 892, 895, 896, 898, 899, 900, 901, 913, 926, 927, 947, 949, 952, 988, 1004, 1015], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 98, 216, 270, 367, 376, 377, 386, 387, 404, 459, 566, 888, 1008, 1009, 1020, 1027, 1028, 1029, 1033], "qualit": [5, 6, 53, 55, 61, 116, 123, 198, 316, 369, 400, 430, 692, 1009, 1035], "assess": [5, 37, 60, 110, 121, 123, 168, 198, 216, 237, 255, 256, 258, 262, 398, 407, 692, 733, 977, 978, 984, 999, 1035], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 49, 53, 55, 70, 78, 82, 86, 91, 100, 111, 113, 120, 122, 123, 155, 157, 168, 169, 178, 184, 188, 189, 199, 202, 204, 213, 215, 216, 246, 259, 266, 271, 281, 292, 296, 298, 301, 303, 305, 313, 320, 325, 332, 337, 345, 346, 362, 367, 369, 371, 374, 377, 383, 387, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 432, 434, 436, 437, 438, 440, 449, 450, 454, 466, 487, 489, 529, 531, 538, 546, 547, 548, 552, 553, 555, 573, 580, 581, 593, 598, 599, 641, 645, 646, 647, 649, 650, 670, 673, 674, 736, 790, 791, 805, 815, 818, 847, 848, 855, 883, 892, 895, 927, 967, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 985, 986, 988, 990, 991, 994, 999, 1002, 1011, 1012, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1036], "img": [5, 50, 66, 497, 577], "ravel": [5, 9, 13, 16, 17, 19, 26, 30, 34, 42, 53, 54, 58, 80, 105, 111, 113, 119, 123, 128, 129, 130, 139, 150, 152, 154, 155, 156, 157, 168, 177, 188, 189, 191, 198, 211, 212, 220, 224, 227, 231, 233, 241, 246, 248, 262, 266, 268, 279, 284, 285, 291, 292, 295, 296, 297, 298, 303, 304, 315, 325, 331, 332, 336, 337, 338, 339, 341, 342, 345, 352, 353, 456, 484, 485, 486, 622, 709, 965, 978], "imshow": [5, 6, 13, 30, 32, 40, 46, 47, 48, 50, 51, 53, 54, 58, 82, 89, 95, 98, 106, 152, 153, 154, 158, 171, 189, 214, 220, 236, 270, 283, 298, 320, 321, 332, 338, 341, 368, 623, 688, 1009, 1010, 1034], "grei": [5, 34, 269, 301, 369], "off": [5, 12, 13, 37, 39, 40, 47, 48, 52, 53, 78, 82, 85, 95, 116, 202, 220, 232, 236, 253, 258, 260, 261, 301, 321, 325, 332, 342, 345, 369, 374, 376, 400, 402, 409, 433, 544, 545, 550, 551, 579, 582, 625, 647, 683, 706, 785, 786, 787, 790, 791, 801, 813, 931, 977, 983, 993, 999, 1020, 1024, 1025, 1027], "fontsiz": [5, 8, 10, 14, 34, 50, 60, 91, 98, 119, 142, 153, 154, 156, 159, 169, 178, 188, 197, 209, 220, 221, 247, 254, 263, 264, 265, 270, 271, 298, 305, 339, 904], "mse": [5, 7, 78, 79, 123, 124, 162, 163, 198, 200, 202, 204, 273, 638, 644, 740, 978, 994, 1031, 1033], "quantit": [5, 6, 25, 61, 123, 133, 147, 255, 273, 371, 1009], "nmse": [5, 273], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 62, 64, 67, 85, 92, 98, 105, 123, 129, 130, 142, 168, 169, 171, 174, 178, 187, 189, 194, 198, 213, 214, 215, 216, 227, 231, 258, 262, 263, 265, 267, 268, 269, 287, 288, 295, 303, 306, 315, 332, 345, 346, 356, 401, 404, 407, 814], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 57, 74, 75, 86, 95, 100, 104, 109, 113, 115, 128, 130, 133, 136, 137, 139, 142, 145, 147, 154, 156, 162, 163, 166, 167, 169, 172, 174, 180, 182, 184, 186, 187, 188, 193, 195, 196, 199, 200, 202, 206, 210, 212, 214, 215, 216, 217, 218, 221, 223, 225, 230, 233, 235, 236, 239, 253, 255, 256, 257, 259, 262, 264, 265, 266, 267, 268, 269, 273, 284, 287, 288, 298, 301, 302, 303, 308, 313, 314, 327, 329, 332, 333, 334, 336, 337, 340, 341, 343, 345, 352, 353, 361, 363, 366, 370, 371, 372, 376, 377, 379, 387, 389, 400, 403, 404, 405, 406, 407, 408, 409, 410, 412, 433, 446, 456, 458, 466, 473, 474, 475, 487, 492, 493, 503, 506, 512, 515, 523, 524, 525, 526, 527, 530, 532, 534, 535, 539, 540, 541, 545, 557, 573, 580, 584, 585, 597, 600, 605, 611, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 684, 692, 698, 707, 740, 743, 755, 757, 764, 775, 787, 798, 802, 813, 816, 830, 831, 835, 839, 846, 847, 848, 851, 856, 857, 860, 863, 865, 867, 868, 869, 870, 879, 883, 890, 891, 892, 893, 894, 895, 896, 967, 969, 970, 971, 973, 978, 981, 982, 983, 984, 985, 986, 992, 993, 998, 1000, 1002, 1004, 1007, 1008, 1013, 1014, 1015, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1034], "radial": [5, 100, 150, 155, 157, 332, 366, 443, 613, 682, 976, 993, 1015], "rbf": [5, 6, 10, 11, 16, 30, 31, 100, 131, 139, 150, 151, 152, 154, 155, 156, 157, 159, 165, 212, 226, 227, 233, 242, 257, 259, 261, 264, 274, 325, 327, 329, 336, 338, 339, 343, 366, 401, 405, 407, 443, 493, 495, 526, 532, 601, 602, 603, 604, 607, 610, 611, 612, 614, 615, 630, 631, 632, 633, 634, 667, 682, 755, 764, 766, 787, 798, 801, 807, 850, 870, 885, 886, 890, 892, 893, 894, 895, 896, 967, 970, 971, 973, 975, 978, 984, 988, 991, 1004, 1009, 1015, 1026, 1031], "decomposit": [5, 6, 14, 17, 58, 70, 72, 73, 74, 86, 87, 90, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 128, 134, 219, 220, 222, 232, 235, 239, 258, 283, 288, 306, 315, 346, 362, 363, 367, 380, 383, 387, 397, 398, 401, 407, 440, 442, 443, 444, 453, 473, 474, 475, 486, 540, 547, 602, 641, 642, 643, 644, 645, 646, 647, 654, 655, 656, 663, 664, 665, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 785, 786, 839, 846, 849, 852, 868, 899, 926, 927, 974, 975, 978, 995, 998, 1000, 1007, 1009, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "kernel_pca": [5, 100, 401], "400": [5, 26, 50, 95, 109, 125, 129, 150, 163, 204, 224, 271, 296, 346, 369, 405, 486, 1013], "1e": [5, 6, 7, 10, 17, 26, 46, 95, 150, 153, 155, 156, 157, 158, 159, 162, 168, 178, 191, 198, 199, 205, 212, 216, 222, 227, 233, 238, 244, 247, 250, 257, 267, 270, 297, 308, 314, 317, 324, 330, 332, 340, 345, 380, 412, 434, 438, 443, 450, 453, 462, 463, 469, 473, 474, 475, 522, 523, 524, 527, 528, 529, 530, 531, 533, 534, 536, 537, 538, 550, 551, 552, 553, 583, 588, 602, 604, 605, 606, 610, 611, 613, 614, 616, 618, 629, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643, 644, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 678, 680, 681, 682, 683, 684, 685, 686, 718, 731, 775, 785, 786, 801, 825, 826, 827, 828, 829, 830, 831, 839, 847, 848, 855, 885, 886, 890, 891, 892, 893, 894, 895, 896, 964, 967, 978, 982, 986, 988, 992, 1009, 1013, 1028, 1033, 1034, 1035], "fit_inverse_transform": [5, 100, 526, 1029], "5e": [5, 95, 183, 586, 587, 589], "inde": [5, 7, 25, 39, 40, 53, 55, 58, 82, 86, 100, 110, 113, 146, 147, 150, 168, 170, 177, 182, 186, 187, 198, 200, 261, 262, 266, 268, 279, 301, 306, 346, 356, 360, 373, 379, 386, 387, 388, 400, 402, 407, 558, 559, 974, 988, 992, 1034], "least": [5, 14, 80, 81, 84, 87, 98, 121, 124, 147, 158, 165, 176, 177, 182, 191, 198, 200, 202, 203, 206, 215, 216, 217, 231, 259, 277, 306, 313, 314, 332, 346, 347, 360, 367, 369, 371, 373, 374, 378, 380, 382, 385, 387, 388, 391, 399, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 435, 439, 441, 447, 448, 449, 452, 465, 473, 474, 475, 476, 485, 507, 522, 528, 530, 532, 533, 534, 536, 537, 538, 539, 540, 548, 549, 550, 551, 553, 555, 556, 557, 584, 593, 626, 634, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 654, 655, 656, 657, 658, 659, 660, 662, 663, 665, 667, 669, 670, 671, 673, 674, 675, 676, 677, 678, 683, 688, 703, 707, 709, 775, 788, 792, 793, 799, 801, 802, 803, 805, 806, 808, 811, 814, 815, 816, 847, 848, 851, 862, 870, 895, 898, 899, 900, 901, 919, 941, 968, 971, 975, 978, 981, 990, 992, 993, 994, 999, 1000, 1002, 1011, 1015, 1020, 1022, 1023, 1026, 1027, 1031], "hope": [5, 216, 387, 399, 1029], "remov": [5, 14, 16, 17, 34, 54, 55, 70, 75, 147, 162, 163, 168, 171, 177, 260, 301, 308, 311, 312, 313, 345, 346, 350, 356, 366, 369, 373, 374, 375, 378, 379, 383, 387, 400, 401, 404, 407, 408, 410, 411, 428, 433, 435, 438, 440, 441, 448, 450, 469, 479, 480, 517, 525, 526, 528, 530, 532, 537, 544, 545, 546, 547, 558, 559, 560, 561, 570, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 602, 621, 624, 629, 635, 636, 641, 642, 645, 646, 647, 649, 655, 656, 731, 758, 768, 769, 770, 793, 809, 814, 837, 849, 850, 854, 855, 863, 867, 868, 870, 879, 893, 894, 896, 905, 921, 922, 924, 968, 975, 981, 994, 1000, 1005, 1015, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "think": [5, 37, 169, 345, 346, 374, 406, 977, 999, 1001, 1002, 1004], "happen": [5, 115, 186, 301, 307, 346, 356, 360, 361, 372, 373, 374, 378, 379, 380, 385, 387, 388, 390, 400, 402, 404, 407, 428, 506, 563, 649, 775, 868, 870, 890, 974, 978, 979, 993, 999, 1013, 1028, 1032, 1033, 1035, 1036], "ridg": [5, 10, 13, 54, 75, 130, 147, 149, 160, 162, 165, 168, 169, 176, 177, 182, 198, 199, 217, 226, 236, 242, 345, 360, 363, 385, 405, 407, 515, 526, 530, 534, 602, 606, 613, 616, 634, 635, 636, 638, 640, 648, 652, 664, 665, 666, 669, 678, 692, 740, 787, 793, 801, 823, 896, 978, 986, 988, 992, 993, 1000, 1011, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1029, 1030, 1033, 1034, 1035], "x_reconstructed_kernel_pca": [5, 100], "inverse_transform": [5, 51, 54, 100, 144, 234, 283, 346, 391, 405, 408, 436, 456, 473, 474, 475, 524, 525, 526, 529, 530, 531, 532, 534, 535, 572, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 621, 787, 790, 791, 801, 850, 854, 855, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 870, 882, 883, 988, 989, 990, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "x_reconstructed_pca": [5, 100], "lower": [5, 16, 26, 30, 31, 33, 58, 79, 86, 95, 97, 103, 109, 110, 113, 116, 119, 123, 126, 150, 152, 154, 156, 158, 169, 170, 182, 183, 184, 188, 198, 199, 200, 201, 211, 219, 223, 230, 231, 236, 246, 250, 258, 259, 261, 262, 266, 267, 269, 272, 283, 285, 286, 303, 306, 315, 323, 332, 338, 345, 346, 347, 351, 369, 374, 398, 399, 400, 403, 404, 405, 406, 407, 408, 411, 435, 439, 455, 458, 489, 500, 523, 525, 532, 535, 544, 550, 551, 552, 553, 554, 579, 580, 582, 594, 602, 604, 605, 606, 608, 610, 611, 613, 614, 616, 623, 624, 626, 628, 668, 670, 703, 707, 715, 718, 724, 729, 785, 786, 836, 838, 840, 841, 842, 844, 871, 892, 893, 894, 897, 914, 973, 974, 975, 977, 978, 979, 981, 982, 983, 984, 985, 986, 990, 992, 993, 994, 1011, 1022, 1023, 1028, 1035], "analysi": [5, 7, 9, 25, 29, 35, 36, 57, 63, 68, 94, 96, 97, 99, 100, 102, 104, 107, 120, 165, 168, 187, 220, 243, 251, 256, 259, 260, 264, 280, 293, 301, 306, 346, 363, 366, 369, 371, 374, 376, 388, 397, 400, 402, 407, 408, 412, 430, 438, 439, 464, 466, 467, 473, 474, 476, 493, 495, 503, 506, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 546, 547, 622, 629, 679, 681, 682, 683, 684, 701, 710, 715, 716, 746, 778, 779, 780, 781, 785, 787, 812, 816, 832, 839, 850, 851, 856, 866, 870, 878, 926, 927, 968, 974, 975, 977, 978, 988, 997, 998, 1000, 1002, 1005, 1014, 1015, 1020, 1021, 1022, 1024, 1029], "favor": [5, 82, 116, 244, 250, 385, 402, 407, 624, 720, 795, 797, 849, 967, 986, 1022, 1024, 1026, 1027, 1029, 1032, 1033, 1034, 1035, 1036], "background": [5, 11, 47, 66, 126, 298, 303, 369, 374, 382, 400, 484, 485, 975, 983, 992, 1030], "597": [5, 15, 168, 172, 198], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 67, 68, 71, 72, 73, 74, 75, 80, 81, 82, 86, 93, 94, 98, 99, 100, 102, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 149, 158, 160, 162, 163, 170, 171, 174, 176, 179, 181, 183, 184, 185, 186, 188, 189, 190, 191, 194, 195, 197, 201, 202, 205, 206, 210, 211, 212, 213, 214, 215, 217, 221, 223, 224, 226, 228, 231, 233, 235, 236, 237, 240, 241, 242, 244, 246, 247, 248, 250, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 274, 277, 279, 281, 282, 283, 287, 288, 289, 290, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 326, 327, 328, 330, 332, 333, 334, 335, 336, 340, 341, 342, 343, 346, 347, 349, 350, 352, 353, 354, 355, 356, 361, 362, 363, 376, 377, 378, 380, 386, 387, 389, 390, 394, 396, 397, 398, 400, 401, 404, 405, 406, 407, 408, 409, 415, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 449, 450, 460, 461, 464, 465, 466, 467, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 537, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 574, 575, 579, 580, 581, 583, 584, 585, 586, 587, 589, 590, 591, 593, 594, 601, 602, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 622, 623, 624, 625, 626, 629, 630, 631, 634, 636, 637, 638, 640, 642, 643, 644, 646, 648, 649, 650, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 670, 679, 680, 681, 682, 683, 688, 689, 691, 692, 693, 694, 695, 699, 719, 745, 747, 777, 778, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 851, 854, 855, 863, 864, 868, 870, 872, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 910, 911, 915, 916, 967, 968, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 990, 991, 992, 993, 994, 998, 999, 1001, 1002, 1005, 1007, 1008, 1009, 1012, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "excerpt": [6, 990, 1009], "wild": [6, 367, 484, 485, 499, 500, 1009, 1015, 1020], "aka": [6, 295, 345, 385, 408, 443, 527, 529, 531, 535, 538, 572, 573, 606, 613, 642, 643, 645, 646, 647, 649, 650, 653, 657, 658, 659, 661, 667, 668, 669, 731, 857, 861, 863, 974, 982, 992, 1004, 1009, 1022, 1034], "lfw": [6, 369, 484, 485, 1009, 1020], "vi": [6, 8, 369, 1009, 1028, 1031], "www": [6, 71, 174, 198, 214, 216, 228, 277, 297, 368, 369, 374, 382, 390, 400, 404, 433, 440, 478, 499, 500, 522, 525, 528, 532, 635, 649, 655, 662, 676, 677, 839, 846, 898, 899, 974, 991, 1009], "umass": [6, 19, 369, 1009], "edu": [6, 8, 11, 17, 46, 121, 147, 157, 174, 180, 219, 247, 258, 284, 292, 305, 345, 368, 369, 371, 400, 440, 478, 491, 493, 499, 500, 501, 525, 632, 635, 640, 649, 657, 658, 667, 670, 673, 674, 825, 827, 828, 829, 839, 846, 883, 885, 898, 899, 974, 976, 1009], "funnel": [6, 484, 485, 1009], "tgz": [6, 1009], "233mb": [6, 1009], "stat": [6, 8, 10, 70, 80, 101, 147, 150, 171, 256, 259, 267, 271, 284, 313, 320, 321, 371, 383, 386, 402, 465, 583, 586, 587, 589, 590, 591, 595, 596, 597, 600, 673, 674, 791, 799, 801, 898, 899, 929, 967, 974, 988, 1009, 1027, 1029, 1033], "loguniform": [6, 150, 267, 967, 1009, 1030], "fetch_lfw_peopl": [6, 369, 1009, 1035], "confusionmatrixdisplai": [6, 32, 253, 314, 320, 345, 622, 709, 978, 1009, 1030, 1031, 1033, 1034, 1035], "classification_report": [6, 32, 70, 144, 257, 298, 320, 321, 978, 1009, 1013, 1022, 1024, 1028, 1029, 1030, 1032, 1036], "randomizedsearchcv": [6, 71, 150, 260, 267, 313, 356, 386, 566, 967, 978, 992, 998, 1009, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035], "standardscal": [6, 10, 31, 44, 49, 55, 58, 62, 71, 73, 86, 106, 130, 168, 177, 186, 187, 189, 198, 214, 216, 228, 229, 238, 239, 241, 256, 266, 287, 288, 295, 303, 306, 311, 312, 314, 315, 316, 332, 335, 356, 362, 374, 376, 379, 383, 386, 401, 404, 421, 457, 458, 558, 641, 642, 645, 646, 647, 655, 656, 667, 669, 850, 851, 854, 867, 881, 890, 891, 892, 893, 895, 896, 968, 975, 982, 988, 992, 993, 995, 1009, 1022, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1036], "svc": [6, 16, 25, 27, 30, 31, 32, 70, 74, 131, 137, 139, 145, 165, 174, 232, 235, 239, 253, 257, 259, 261, 264, 265, 266, 269, 270, 274, 303, 311, 313, 323, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 360, 376, 380, 387, 394, 398, 401, 404, 407, 459, 506, 546, 688, 689, 691, 693, 787, 804, 817, 819, 850, 887, 888, 890, 892, 966, 967, 973, 976, 978, 979, 988, 1004, 1008, 1009, 1011, 1017, 1020, 1021, 1022, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "disk": [6, 13, 369, 372, 374, 379, 387, 394, 1009], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 61, 62, 64, 70, 72, 81, 85, 92, 96, 97, 122, 124, 126, 129, 132, 137, 144, 147, 151, 152, 153, 158, 168, 177, 179, 182, 191, 192, 195, 198, 199, 205, 215, 220, 221, 227, 231, 234, 238, 241, 244, 245, 246, 248, 249, 254, 255, 257, 259, 260, 263, 264, 268, 277, 292, 304, 311, 314, 315, 317, 321, 328, 335, 345, 353, 354, 356, 360, 361, 367, 368, 369, 374, 375, 376, 377, 379, 380, 382, 384, 385, 386, 387, 394, 397, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 485, 487, 488, 489, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 506, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 572, 573, 574, 575, 577, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 910, 911, 912, 915, 916, 924, 925, 926, 927, 928, 929, 931, 932, 933, 940, 941, 942, 949, 950, 951, 952, 953, 954, 955, 956, 964, 965, 968, 973, 974, 976, 978, 979, 981, 982, 984, 985, 988, 989, 990, 992, 993, 994, 997, 1002, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "lfw_peopl": [6, 369, 1009], "min_faces_per_person": [6, 369, 485, 1009], "resiz": [6, 46, 47, 238, 369, 484, 485, 1009], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 67, 70, 75, 78, 79, 80, 81, 82, 86, 92, 95, 96, 100, 103, 109, 110, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 138, 139, 146, 147, 159, 162, 163, 167, 177, 179, 180, 182, 184, 186, 188, 190, 192, 193, 197, 198, 199, 201, 202, 206, 210, 213, 215, 216, 219, 220, 221, 222, 223, 224, 227, 231, 232, 234, 245, 247, 248, 249, 250, 256, 257, 259, 262, 263, 266, 268, 269, 270, 271, 272, 273, 279, 289, 303, 304, 305, 308, 312, 313, 315, 317, 322, 330, 333, 334, 340, 345, 346, 356, 367, 371, 374, 376, 379, 383, 385, 386, 387, 391, 400, 402, 403, 404, 405, 407, 411, 412, 413, 415, 417, 418, 419, 422, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 492, 495, 499, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 760, 761, 762, 763, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 915, 916, 927, 929, 931, 940, 947, 949, 952, 953, 954, 955, 956, 957, 958, 959, 967, 970, 974, 978, 979, 981, 982, 988, 989, 990, 992, 993, 994, 1004, 1009, 1010, 1011, 1012, 1013, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "w": [6, 12, 13, 16, 30, 34, 40, 42, 45, 48, 58, 64, 102, 105, 162, 197, 202, 215, 234, 235, 244, 245, 246, 249, 250, 270, 298, 314, 315, 337, 340, 347, 356, 369, 371, 380, 394, 400, 401, 405, 407, 408, 412, 417, 423, 428, 456, 460, 463, 465, 473, 474, 475, 514, 529, 531, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 579, 580, 582, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 715, 716, 746, 787, 801, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 832, 833, 836, 837, 840, 841, 847, 848, 883, 885, 886, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 924, 929, 974, 978, 982, 983, 988, 990, 992, 993, 1009, 1013, 1030, 1034, 1035, 1036, 1037], "info": [6, 42, 71, 95, 168, 169, 234, 257, 371, 373, 378, 387, 408, 934, 1009], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 40, 52, 58, 60, 61, 78, 79, 80, 81, 82, 91, 92, 95, 103, 110, 112, 114, 116, 117, 144, 146, 147, 162, 163, 174, 177, 180, 182, 184, 192, 193, 197, 201, 202, 213, 215, 220, 227, 231, 232, 234, 244, 249, 256, 262, 266, 268, 269, 271, 272, 289, 295, 303, 311, 312, 313, 315, 317, 340, 345, 346, 347, 356, 360, 367, 368, 374, 376, 379, 385, 386, 387, 391, 400, 402, 403, 405, 407, 408, 411, 412, 413, 415, 417, 418, 419, 422, 423, 424, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 452, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 481, 482, 483, 485, 492, 495, 499, 500, 503, 506, 507, 510, 512, 514, 515, 517, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 691, 692, 693, 701, 715, 748, 749, 750, 751, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 927, 953, 954, 955, 956, 957, 958, 959, 970, 974, 979, 981, 982, 988, 992, 993, 994, 1004, 1009, 1010, 1012, 1013, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "id": [6, 19, 216, 292, 354, 368, 369, 374, 382, 402, 404, 408, 485, 486, 487, 902, 904, 922, 1009, 1013, 1028, 1029, 1032], "person": [6, 262, 369, 373, 404, 408, 484, 485, 486, 988, 1009, 1028], "target_nam": [6, 19, 52, 99, 104, 167, 207, 220, 246, 253, 260, 268, 269, 282, 307, 324, 345, 351, 367, 369, 479, 480, 482, 483, 484, 485, 487, 488, 491, 493, 494, 495, 496, 501, 704, 978, 994, 1004, 1009, 1013, 1030], "n_class": [6, 30, 37, 91, 92, 110, 112, 117, 119, 144, 146, 213, 220, 232, 235, 246, 266, 267, 268, 288, 289, 311, 351, 356, 374, 376, 387, 407, 428, 479, 480, 493, 506, 510, 514, 540, 541, 542, 544, 546, 548, 550, 552, 555, 558, 560, 584, 585, 595, 601, 625, 630, 649, 650, 657, 658, 659, 665, 666, 667, 668, 688, 698, 707, 709, 725, 728, 731, 744, 778, 782, 787, 790, 791, 801, 811, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 832, 837, 839, 840, 847, 850, 857, 858, 861, 864, 874, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 900, 902, 903, 915, 916, 974, 978, 979, 982, 989, 992, 993, 1001, 1009, 1025, 1026, 1027, 1029, 1030, 1031], "1288": [6, 369], "1850": [6, 369], "scaler": [6, 71, 73, 165, 214, 232, 239, 241, 287, 300, 306, 309, 316, 332, 335, 356, 379, 401, 404, 481, 649, 650, 663, 665, 678, 850, 859, 860, 862, 866, 867, 868, 870, 875, 876, 877, 878, 879, 880, 881, 982, 988, 992, 1009, 1020, 1025, 1028, 1033], "unlabel": [6, 235, 313, 320, 321, 322, 324, 325, 387, 399, 400, 885, 886, 887, 977, 1004, 1007, 1009, 1011, 1032], "unsupervis": [6, 12, 37, 49, 72, 73, 86, 95, 115, 128, 227, 235, 285, 286, 331, 345, 346, 356, 363, 366, 369, 376, 386, 387, 399, 400, 403, 405, 406, 407, 408, 424, 433, 436, 523, 525, 527, 528, 530, 533, 534, 540, 554, 557, 558, 560, 561, 573, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 619, 621, 625, 626, 629, 630, 631, 632, 633, 668, 732, 787, 790, 791, 793, 801, 809, 814, 817, 832, 833, 836, 838, 839, 840, 841, 846, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 867, 868, 869, 870, 871, 882, 883, 887, 894, 975, 978, 984, 991, 1000, 1004, 1005, 1007, 1009, 1015, 1020, 1023, 1033], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 55, 57, 58, 62, 69, 71, 73, 74, 76, 85, 86, 92, 95, 103, 110, 115, 128, 138, 139, 150, 152, 153, 157, 165, 182, 194, 199, 215, 218, 220, 221, 223, 225, 227, 231, 232, 235, 245, 246, 280, 283, 293, 303, 329, 345, 356, 360, 366, 369, 370, 371, 374, 383, 387, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 436, 438, 440, 456, 460, 464, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 488, 491, 492, 493, 495, 496, 501, 506, 510, 523, 525, 526, 529, 530, 531, 532, 535, 538, 540, 554, 557, 564, 590, 598, 622, 631, 632, 633, 643, 679, 680, 681, 682, 683, 684, 685, 687, 701, 715, 785, 786, 787, 816, 830, 831, 832, 835, 838, 839, 846, 850, 851, 854, 860, 865, 870, 882, 883, 884, 890, 894, 927, 964, 969, 970, 973, 974, 979, 980, 984, 990, 991, 992, 993, 994, 1000, 1002, 1004, 1005, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1029, 1032, 1035], "reduct": [6, 19, 54, 57, 69, 73, 76, 86, 95, 113, 128, 165, 218, 220, 221, 225, 231, 235, 280, 293, 315, 329, 356, 360, 366, 399, 400, 401, 403, 405, 407, 409, 459, 473, 474, 475, 476, 493, 521, 523, 525, 526, 529, 530, 531, 532, 535, 538, 540, 544, 545, 548, 549, 550, 551, 555, 556, 557, 590, 598, 649, 650, 679, 680, 681, 682, 683, 684, 771, 787, 816, 832, 839, 846, 850, 851, 860, 870, 888, 890, 898, 899, 900, 901, 970, 975, 990, 994, 999, 1000, 1002, 1009, 1015, 1021, 1022, 1023, 1026, 1034, 1035, 1036], "top": [6, 12, 13, 14, 16, 17, 30, 34, 37, 39, 41, 42, 43, 44, 45, 51, 62, 64, 71, 91, 97, 115, 116, 119, 130, 133, 168, 198, 200, 209, 213, 227, 237, 238, 244, 246, 247, 250, 256, 260, 268, 269, 284, 301, 303, 307, 312, 320, 321, 332, 345, 356, 372, 374, 380, 385, 397, 398, 400, 405, 406, 407, 478, 578, 579, 582, 590, 716, 746, 782, 902, 904, 967, 970, 974, 976, 986, 1002, 1009, 1012, 1013, 1034], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 58, 62, 64, 98, 182, 184, 213, 214, 215, 221, 224, 227, 231, 233, 260, 345, 346, 347, 667, 668, 669, 1009], "svd_solver": [6, 95, 103, 405, 526, 532, 1009, 1026], "whiten": [6, 95, 96, 97, 283, 405, 412, 524, 525, 532, 868, 870, 1009, 1024, 1026, 1034, 1035], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 53, 98, 144, 147, 155, 168, 169, 174, 177, 182, 184, 202, 215, 233, 234, 249, 257, 260, 263, 268, 279, 304, 313, 345, 346, 347, 356, 361, 368, 372, 374, 376, 378, 381, 382, 383, 385, 387, 391, 400, 402, 404, 405, 407, 432, 433, 436, 441, 443, 463, 473, 474, 475, 476, 480, 526, 552, 553, 573, 597, 619, 621, 623, 625, 634, 635, 636, 650, 731, 785, 786, 787, 801, 806, 807, 854, 868, 963, 967, 968, 971, 974, 975, 978, 980, 981, 982, 988, 991, 992, 993, 994, 999, 1004, 1008, 1009, 1011, 1013, 1020, 1022, 1027, 1030, 1032, 1036], "components_": [6, 14, 58, 86, 95, 97, 98, 101, 106, 231, 232, 298, 306, 315, 387, 401, 405, 435, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 534, 535, 630, 839, 846, 882, 883, 990, 1009, 1024, 1026, 1032, 1035], "project": [6, 8, 11, 13, 17, 27, 34, 45, 53, 58, 67, 90, 94, 95, 97, 99, 101, 102, 107, 112, 154, 156, 158, 159, 165, 169, 177, 190, 195, 207, 219, 220, 221, 223, 226, 232, 235, 242, 245, 283, 288, 292, 304, 308, 311, 324, 329, 337, 346, 351, 360, 363, 366, 368, 372, 373, 379, 380, 383, 387, 388, 390, 397, 403, 405, 406, 412, 431, 437, 442, 443, 453, 465, 473, 474, 475, 476, 480, 493, 495, 522, 524, 525, 526, 528, 530, 532, 533, 534, 535, 539, 540, 564, 573, 580, 632, 633, 640, 663, 665, 679, 682, 686, 687, 820, 839, 867, 882, 883, 884, 926, 927, 972, 974, 975, 976, 979, 981, 982, 984, 991, 994, 996, 1001, 1002, 1004, 1009, 1012, 1015, 1020, 1021, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "orthonorm": [6, 383, 926, 1009], "x_train_pca": [6, 1009], "x_test_pca": [6, 100, 1009], "966": 6, "065": [6, 257, 380], "007": [6, 117, 244, 264, 267, 275, 279, 346], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 35, 56, 70, 71, 72, 73, 100, 109, 110, 111, 112, 114, 117, 118, 119, 122, 128, 131, 132, 143, 144, 146, 165, 170, 174, 176, 188, 189, 190, 196, 205, 207, 210, 213, 217, 227, 232, 234, 240, 253, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 274, 276, 278, 281, 282, 287, 288, 290, 295, 298, 303, 313, 314, 319, 320, 321, 323, 324, 326, 327, 328, 331, 333, 334, 335, 340, 341, 342, 343, 347, 369, 371, 374, 376, 379, 385, 387, 400, 401, 404, 408, 409, 410, 417, 426, 428, 429, 430, 479, 480, 487, 495, 503, 505, 506, 513, 522, 527, 528, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 584, 585, 593, 597, 601, 613, 620, 622, 623, 624, 640, 649, 650, 657, 659, 662, 663, 664, 665, 666, 667, 688, 689, 691, 693, 694, 698, 699, 700, 703, 704, 709, 711, 716, 717, 719, 720, 724, 725, 728, 729, 730, 731, 732, 733, 744, 746, 772, 773, 774, 777, 778, 779, 782, 784, 787, 790, 791, 793, 801, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 837, 838, 840, 841, 846, 847, 848, 850, 851, 857, 870, 871, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 919, 921, 967, 968, 970, 973, 974, 975, 978, 979, 980, 983, 986, 988, 991, 992, 993, 994, 998, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035], "1e3": [6, 7, 10, 150, 156, 162, 233, 270, 317, 967, 1009], "1e5": [6, 155, 179, 181, 188, 270, 604, 605, 606, 610, 611, 613, 614, 616, 879, 884, 990, 1009, 1011], "clf": [6, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 58, 63, 71, 90, 101, 102, 114, 122, 125, 126, 131, 136, 139, 143, 144, 146, 152, 154, 171, 188, 190, 191, 195, 196, 202, 205, 207, 210, 211, 212, 214, 222, 228, 229, 232, 235, 237, 241, 248, 256, 260, 264, 265, 267, 270, 271, 282, 285, 286, 287, 290, 295, 303, 306, 311, 312, 313, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 345, 350, 351, 354, 360, 369, 386, 387, 394, 401, 404, 407, 409, 429, 540, 541, 544, 546, 548, 550, 552, 554, 555, 558, 584, 585, 588, 623, 625, 629, 630, 631, 632, 633, 635, 636, 639, 643, 649, 650, 651, 652, 653, 657, 659, 660, 663, 664, 665, 666, 667, 668, 671, 688, 689, 691, 693, 778, 787, 790, 791, 801, 818, 819, 820, 822, 825, 826, 827, 828, 829, 836, 837, 847, 890, 892, 894, 895, 898, 902, 904, 968, 970, 974, 978, 979, 981, 982, 984, 985, 992, 993, 994, 1004, 1008, 1009, 1013], "class_weight": [6, 334, 387, 548, 552, 555, 649, 650, 657, 659, 665, 666, 667, 668, 890, 892, 893, 894, 895, 896, 897, 898, 900, 967, 992, 993, 1009, 1020, 1021, 1023, 1024, 1025, 1026, 1028, 1034, 1035], "n_iter": [6, 17, 71, 150, 177, 206, 219, 220, 224, 260, 267, 279, 298, 334, 376, 380, 386, 412, 445, 469, 523, 524, 528, 530, 535, 536, 537, 538, 635, 636, 637, 638, 643, 644, 651, 652, 653, 654, 672, 673, 674, 675, 676, 677, 678, 683, 685, 790, 791, 799, 801, 846, 848, 926, 927, 967, 992, 1009, 1021, 1026, 1027, 1028, 1032, 1034, 1035, 1036], "found": [6, 19, 20, 21, 106, 117, 146, 150, 154, 156, 158, 202, 235, 257, 260, 261, 262, 306, 311, 314, 316, 317, 332, 347, 360, 362, 368, 371, 373, 374, 376, 385, 387, 388, 397, 400, 403, 404, 405, 407, 408, 410, 425, 432, 435, 436, 450, 463, 548, 549, 550, 551, 555, 556, 579, 581, 601, 602, 619, 627, 638, 642, 644, 646, 652, 654, 656, 662, 663, 665, 667, 669, 678, 679, 703, 710, 787, 790, 791, 801, 827, 832, 833, 839, 861, 863, 864, 898, 899, 900, 901, 905, 962, 966, 967, 970, 974, 975, 977, 979, 980, 981, 982, 988, 992, 993, 994, 999, 1001, 1004, 1009, 1013, 1020, 1023, 1024, 1027, 1028, 1030, 1034], "grid": [6, 8, 10, 11, 20, 25, 26, 27, 42, 54, 61, 71, 72, 74, 78, 82, 119, 121, 128, 154, 165, 167, 168, 169, 187, 216, 224, 232, 233, 234, 238, 244, 249, 252, 256, 258, 260, 263, 264, 275, 277, 281, 283, 284, 292, 298, 303, 304, 306, 329, 332, 338, 345, 376, 381, 385, 387, 395, 401, 404, 406, 407, 408, 410, 439, 452, 455, 463, 489, 493, 506, 513, 622, 623, 624, 638, 641, 644, 645, 647, 650, 652, 654, 667, 704, 718, 732, 775, 778, 787, 790, 791, 798, 801, 803, 816, 817, 895, 971, 973, 978, 981, 985, 999, 1004, 1005, 1007, 1009, 1011, 1015, 1020, 1023, 1024, 1025, 1027, 1028, 1034, 1036], "search": [6, 46, 54, 71, 72, 73, 74, 123, 144, 150, 165, 216, 233, 234, 249, 252, 260, 263, 264, 271, 275, 279, 281, 283, 298, 303, 316, 332, 345, 356, 363, 371, 372, 374, 376, 385, 387, 395, 400, 401, 404, 407, 408, 409, 410, 411, 434, 439, 441, 443, 448, 449, 452, 455, 462, 463, 469, 493, 506, 513, 548, 549, 550, 551, 555, 556, 557, 570, 590, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 619, 644, 667, 679, 680, 683, 684, 704, 718, 775, 778, 787, 790, 791, 798, 799, 801, 803, 816, 817, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 895, 898, 899, 900, 901, 932, 966, 971, 973, 975, 978, 981, 982, 992, 994, 998, 999, 1004, 1005, 1007, 1009, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1034, 1035], "best_estimator_": [6, 54, 73, 74, 78, 103, 233, 249, 260, 263, 283, 787, 790, 791, 801, 967, 1008, 1009, 1027], "392": [6, 346], "76823": 6, "03433306453": 6, "003418945823095797": 6, "from_estim": [6, 25, 27, 31, 56, 112, 115, 126, 127, 131, 169, 181, 190, 207, 233, 238, 240, 253, 256, 261, 262, 266, 269, 274, 282, 287, 290, 306, 311, 312, 313, 314, 316, 317, 328, 329, 330, 333, 334, 351, 381, 398, 624, 709, 717, 772, 774, 777, 778, 779, 973, 978, 985, 1009, 1017, 1033, 1034, 1035, 1036], "display_label": [6, 253, 688, 1009, 1032], "xticks_rot": [6, 688, 1009], "vertic": [6, 17, 60, 122, 171, 187, 231, 232, 263, 277, 301, 304, 337, 339, 387, 397, 400, 405, 506, 688, 771, 1009], "tight_layout": [6, 8, 25, 27, 31, 34, 40, 52, 55, 65, 73, 75, 86, 95, 96, 106, 110, 112, 117, 119, 124, 128, 130, 132, 152, 154, 159, 162, 167, 168, 170, 171, 177, 178, 182, 188, 196, 198, 206, 209, 213, 216, 219, 232, 237, 254, 255, 271, 277, 279, 281, 291, 302, 303, 304, 305, 306, 311, 315, 330, 346, 350, 351, 1009], "045": [6, 713], "precis": [6, 25, 32, 70, 75, 82, 95, 144, 156, 157, 165, 174, 228, 252, 253, 257, 275, 298, 301, 320, 321, 374, 376, 387, 397, 398, 399, 400, 402, 405, 407, 434, 460, 461, 462, 463, 464, 465, 466, 467, 469, 495, 514, 523, 525, 532, 535, 635, 636, 637, 639, 641, 642, 643, 645, 646, 647, 660, 663, 665, 671, 673, 674, 678, 691, 697, 698, 699, 704, 717, 719, 720, 721, 729, 753, 772, 773, 774, 777, 778, 785, 786, 816, 819, 830, 831, 836, 851, 870, 874, 890, 895, 902, 904, 927, 972, 974, 981, 982, 993, 1009, 1013, 1020, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "recal": [6, 25, 32, 70, 100, 144, 165, 228, 252, 257, 275, 298, 320, 321, 374, 387, 400, 495, 595, 691, 697, 698, 699, 703, 704, 717, 719, 720, 721, 772, 773, 774, 777, 778, 816, 819, 851, 870, 874, 890, 974, 994, 1009, 1013, 1023, 1024, 1027, 1029, 1030, 1032, 1033, 1034, 1036], "f1": [6, 25, 32, 70, 144, 257, 298, 320, 321, 324, 404, 704, 719, 720, 728, 773, 978, 979, 1009, 1013, 1024, 1036], "support": [6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 70, 72, 108, 114, 121, 129, 134, 143, 144, 169, 199, 208, 209, 210, 216, 232, 233, 234, 240, 253, 257, 264, 266, 279, 298, 301, 305, 315, 320, 321, 324, 325, 328, 329, 332, 333, 335, 337, 340, 343, 360, 361, 362, 363, 368, 372, 374, 376, 378, 379, 380, 381, 383, 384, 386, 387, 388, 391, 400, 404, 405, 408, 410, 428, 431, 441, 443, 444, 455, 457, 458, 460, 465, 478, 487, 503, 529, 531, 532, 535, 538, 540, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 604, 605, 606, 608, 610, 611, 613, 614, 616, 618, 622, 623, 624, 634, 636, 648, 649, 650, 661, 662, 663, 665, 666, 667, 668, 669, 678, 681, 685, 698, 704, 719, 720, 728, 733, 758, 768, 769, 770, 773, 774, 777, 778, 787, 790, 791, 793, 801, 813, 814, 822, 823, 828, 830, 831, 834, 836, 837, 842, 850, 851, 855, 861, 863, 864, 866, 870, 878, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 916, 921, 922, 966, 967, 968, 970, 971, 972, 974, 977, 978, 979, 980, 981, 982, 984, 985, 988, 989, 992, 996, 998, 999, 1000, 1002, 1004, 1007, 1009, 1013, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "ariel": [6, 369, 1020, 1026], "sharon": [6, 369], "69": [6, 189, 306, 321, 400, 462, 463, 598, 599, 746, 978, 988, 1011], "colin": [6, 369, 1026], "powel": [6, 369], "87": [6, 8, 32, 70, 159, 257, 298, 321, 588, 658, 778, 787, 866, 878, 978, 1013], "donald": [6, 369, 400, 715, 968], "rumsfeld": [6, 369], "63": [6, 351, 371, 407, 548, 549, 556, 557, 716, 787, 801, 900, 901, 978], "georg": [6, 369, 400, 1026, 1032, 1033, 1034, 1035], "bush": [6, 369], "95": [6, 14, 30, 32, 44, 52, 57, 67, 91, 101, 102, 119, 123, 157, 168, 177, 198, 200, 205, 216, 246, 247, 250, 259, 260, 284, 292, 298, 303, 307, 315, 321, 332, 356, 407, 518, 623, 624, 627, 638, 652, 738, 887, 974, 978, 979, 991, 1013, 1023], "91": [6, 32, 51, 155, 298, 320, 321, 407, 973, 1009, 1013], "146": [6, 407], "gerhard": [6, 369], "schroeder": [6, 369], "hugo": [6, 369, 1026, 1031, 1032, 1033, 1034], "chavez": [6, 369], "90": [6, 10, 14, 32, 74, 105, 106, 122, 123, 124, 144, 155, 171, 178, 189, 195, 197, 200, 205, 216, 244, 268, 270, 298, 303, 307, 317, 320, 321, 356, 360, 374, 380, 404, 554, 771, 787, 814, 819, 871, 973, 978, 1009, 1013, 1035, 1036], "toni": [6, 369, 554, 870, 984, 1033, 1034], "blair": [6, 369], "93": [6, 32, 198, 241, 257, 298, 321, 345, 371, 778, 787, 814, 898, 973, 978, 1009, 1013], "83": [6, 30, 34, 39, 70, 298, 320, 371, 376, 410, 698, 776, 973, 978, 1009, 1013, 1023], "322": [6, 91, 346, 462, 463], "macro": [6, 32, 70, 144, 257, 298, 311, 320, 321, 369, 404, 698, 704, 719, 720, 728, 773, 774, 777, 778, 978, 1013, 1020, 1028, 1036], "avg": [6, 32, 70, 144, 257, 298, 320, 321, 560, 695, 704, 978, 1009, 1013, 1036], "weight": [6, 13, 14, 19, 24, 32, 54, 70, 106, 123, 131, 132, 143, 144, 155, 163, 165, 168, 176, 182, 187, 189, 198, 202, 203, 212, 213, 214, 216, 217, 239, 244, 257, 262, 266, 268, 282, 291, 294, 295, 298, 299, 306, 308, 311, 314, 320, 321, 327, 334, 343, 345, 346, 347, 356, 370, 371, 383, 385, 387, 400, 402, 403, 405, 406, 409, 411, 417, 423, 428, 431, 434, 435, 437, 438, 440, 444, 450, 451, 454, 455, 456, 458, 460, 465, 473, 474, 475, 487, 506, 515, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 577, 580, 581, 582, 584, 588, 593, 594, 601, 602, 619, 623, 624, 625, 626, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 680, 684, 688, 689, 691, 693, 694, 698, 699, 700, 703, 704, 707, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 724, 725, 726, 728, 729, 730, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 748, 749, 759, 772, 773, 774, 775, 777, 778, 779, 782, 783, 784, 785, 786, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 847, 848, 849, 852, 855, 869, 870, 871, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 915, 916, 929, 953, 959, 968, 969, 974, 975, 977, 978, 980, 981, 982, 983, 985, 988, 991, 992, 993, 994, 999, 1004, 1011, 1013, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "85": [6, 16, 17, 32, 50, 55, 70, 98, 144, 213, 216, 270, 298, 321, 356, 407, 430, 491, 546, 547, 588, 643, 649, 735, 743, 778, 787, 814, 978, 979, 1009, 1020], "plot_galleri": [6, 95, 1009], "n_row": [6, 19, 95, 397, 415, 442, 444, 502, 504, 1009], "n_col": [6, 19, 95, 236, 415, 442, 444, 502, 504, 623, 1009], "portrait": [6, 405, 1009], "figur": [6, 7, 8, 9, 10, 12, 13, 16, 24, 25, 26, 27, 30, 31, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 58, 59, 61, 62, 63, 64, 65, 67, 78, 82, 85, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 121, 122, 123, 124, 125, 128, 129, 133, 136, 137, 139, 142, 143, 146, 151, 152, 153, 154, 157, 158, 163, 168, 169, 170, 177, 182, 183, 188, 191, 192, 195, 197, 199, 200, 204, 209, 212, 213, 214, 215, 221, 222, 223, 227, 231, 232, 233, 235, 236, 238, 244, 246, 247, 250, 253, 258, 263, 264, 273, 284, 288, 289, 292, 295, 298, 301, 303, 304, 308, 311, 313, 320, 321, 322, 330, 332, 336, 337, 351, 352, 353, 374, 400, 406, 407, 408, 410, 429, 622, 623, 688, 689, 691, 692, 693, 793, 809, 904, 967, 971, 974, 977, 978, 981, 982, 985, 992, 993, 994, 1009, 1011, 1012, 1033], "subplots_adjust": [6, 7, 13, 14, 30, 34, 39, 42, 44, 45, 50, 51, 54, 62, 64, 80, 82, 91, 92, 97, 98, 105, 112, 113, 130, 168, 197, 198, 213, 216, 227, 235, 244, 246, 247, 250, 254, 270, 272, 284, 292, 295, 298, 303, 313, 321, 329, 332, 1009], "bottom": [6, 8, 12, 13, 14, 30, 37, 39, 42, 44, 45, 51, 53, 62, 64, 91, 92, 121, 128, 133, 198, 209, 227, 244, 246, 247, 250, 256, 259, 270, 284, 301, 321, 323, 332, 374, 398, 400, 406, 578, 902, 972, 974, 978, 999, 1009, 1012], "left": [6, 7, 12, 13, 14, 16, 24, 33, 39, 42, 44, 45, 51, 55, 62, 64, 72, 75, 81, 82, 91, 92, 97, 98, 110, 113, 115, 116, 117, 120, 123, 130, 132, 153, 159, 163, 168, 183, 191, 198, 199, 200, 202, 209, 211, 212, 215, 216, 227, 231, 235, 237, 238, 244, 246, 247, 250, 255, 256, 257, 258, 260, 268, 269, 271, 284, 285, 292, 295, 298, 301, 315, 317, 321, 331, 332, 354, 374, 376, 378, 397, 400, 403, 404, 406, 407, 408, 410, 437, 463, 473, 474, 475, 476, 484, 489, 540, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 578, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 626, 630, 634, 642, 646, 785, 786, 787, 790, 791, 794, 801, 863, 870, 898, 899, 900, 901, 902, 914, 927, 949, 952, 967, 970, 972, 974, 976, 978, 980, 985, 990, 992, 994, 1008, 1009, 1011, 1012, 1027, 1029, 1034], "01": [6, 8, 10, 13, 15, 16, 28, 35, 40, 44, 51, 62, 68, 76, 85, 95, 97, 98, 113, 121, 122, 124, 127, 128, 134, 147, 155, 159, 160, 168, 169, 179, 182, 189, 205, 210, 211, 216, 217, 219, 220, 227, 231, 232, 233, 238, 242, 246, 250, 251, 253, 258, 259, 260, 264, 266, 267, 275, 284, 293, 296, 301, 309, 312, 318, 326, 334, 343, 346, 352, 353, 355, 369, 371, 379, 400, 409, 440, 462, 506, 523, 530, 534, 586, 587, 589, 633, 637, 645, 649, 669, 687, 706, 787, 801, 884, 947, 974, 978, 982, 988, 990, 992, 1009, 1013], "right": [6, 7, 11, 12, 13, 14, 16, 31, 39, 42, 43, 44, 45, 51, 53, 60, 62, 64, 79, 80, 82, 91, 92, 97, 98, 100, 103, 105, 109, 110, 112, 113, 114, 123, 124, 125, 132, 143, 150, 153, 163, 188, 199, 200, 201, 202, 204, 205, 208, 209, 227, 230, 231, 234, 244, 246, 247, 249, 250, 254, 255, 259, 262, 266, 269, 270, 272, 284, 292, 295, 298, 301, 303, 306, 317, 321, 332, 334, 340, 342, 345, 351, 354, 356, 363, 374, 385, 388, 397, 400, 403, 405, 406, 407, 410, 455, 473, 474, 475, 476, 525, 532, 535, 548, 549, 550, 551, 552, 553, 555, 556, 557, 578, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 618, 626, 667, 669, 855, 898, 899, 900, 901, 902, 914, 927, 967, 970, 972, 974, 976, 978, 980, 981, 985, 990, 992, 993, 994, 998, 999, 1002, 1005, 1009, 1011, 1012, 1022, 1028, 1034, 1036], "99": [6, 25, 32, 44, 51, 62, 95, 216, 227, 231, 244, 246, 257, 260, 298, 301, 321, 361, 367, 371, 378, 404, 407, 408, 483, 638, 652, 662, 778, 837, 947, 973, 978, 988, 992, 1009, 1015, 1022], "hspace": [6, 13, 14, 44, 45, 62, 95, 216, 227, 244, 246, 247, 250, 284, 313, 321, 329, 1009], "grai": [6, 13, 46, 47, 50, 51, 53, 95, 98, 125, 196, 198, 216, 231, 235, 236, 266, 297, 371, 405, 484, 485, 493, 512, 1009, 1012, 1031], "ytick": [6, 11, 30, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 90, 98, 121, 124, 137, 143, 152, 153, 154, 158, 181, 188, 194, 211, 227, 235, 245, 246, 247, 250, 254, 273, 283, 292, 298, 320, 332, 336, 337, 338, 345, 1009], "portion": [6, 8, 81, 268, 360, 369, 371, 374, 380, 387, 778, 811, 828, 967, 977, 981, 1009, 1013], "pred_nam": [6, 1009], "rsplit": [6, 17, 260, 1009], "true_nam": [6, 1009], "ntrue": [6, 320, 321, 1009], "prediction_titl": [6, 1009], "signif": [6, 1009], "eigenface_titl": [6, 1009], "convolut": [6, 158, 1009], "network": [6, 297, 360, 361, 362, 363, 368, 369, 385, 387, 388, 394, 400, 405, 407, 412, 487, 524, 526, 558, 559, 687, 731, 847, 848, 946, 974, 976, 978, 992, 994, 998, 1000, 1009, 1014, 1015, 1020, 1034], "famili": [6, 360, 362, 387, 400, 403, 405, 408, 409, 583, 586, 587, 589, 590, 591, 597, 847, 848, 866, 878, 974, 988, 992, 1009, 1011, 1024, 1034], "outsid": [6, 9, 19, 119, 199, 200, 230, 241, 385, 408, 437, 626, 869, 984, 1009, 1028], "scope": [6, 19, 360, 362, 374, 385, 408, 998, 999, 1009], "scikit": [6, 8, 10, 12, 16, 17, 31, 32, 50, 70, 115, 116, 130, 144, 147, 159, 163, 165, 168, 186, 187, 216, 226, 240, 252, 256, 275, 279, 284, 286, 310, 318, 345, 346, 350, 351, 356, 361, 362, 363, 366, 368, 369, 370, 371, 373, 374, 377, 380, 381, 382, 383, 386, 387, 391, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 414, 415, 417, 418, 419, 422, 423, 424, 429, 434, 437, 438, 441, 448, 450, 455, 456, 458, 459, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 503, 506, 512, 515, 529, 552, 553, 555, 556, 558, 567, 572, 573, 574, 576, 577, 580, 590, 593, 602, 617, 619, 621, 623, 625, 629, 631, 637, 639, 643, 649, 660, 671, 679, 691, 692, 693, 708, 738, 768, 769, 770, 778, 783, 787, 788, 789, 790, 791, 792, 793, 801, 804, 805, 806, 807, 808, 809, 812, 816, 818, 819, 832, 834, 851, 853, 855, 857, 860, 862, 863, 864, 865, 869, 870, 871, 874, 887, 888, 890, 895, 898, 899, 921, 922, 944, 945, 967, 968, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 988, 991, 992, 993, 994, 997, 1001, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "librari": [6, 259, 314, 316, 352, 356, 366, 368, 369, 372, 373, 374, 375, 380, 385, 386, 387, 390, 396, 649, 890, 891, 892, 893, 895, 896, 946, 974, 978, 993, 994, 998, 999, 1002, 1009, 1013, 1018, 1023, 1027, 1028, 1029, 1030, 1031, 1033], "reader": [6, 42, 314, 362, 374, 1009], "pytorch": [6, 385, 998, 999, 1009, 1036], "tensorflow": [6, 385, 998, 1009], "implement": [6, 7, 13, 16, 17, 46, 56, 81, 95, 116, 163, 174, 182, 183, 187, 212, 216, 219, 227, 233, 234, 257, 259, 268, 279, 281, 284, 304, 311, 312, 313, 314, 315, 317, 345, 347, 360, 361, 362, 368, 369, 371, 372, 374, 375, 376, 379, 380, 382, 383, 387, 390, 391, 394, 396, 397, 399, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 428, 433, 434, 435, 437, 438, 439, 440, 441, 466, 484, 487, 499, 523, 524, 525, 526, 527, 529, 532, 533, 534, 544, 545, 546, 548, 549, 552, 553, 554, 558, 563, 573, 579, 580, 582, 584, 588, 592, 601, 602, 623, 624, 631, 632, 636, 637, 644, 648, 649, 650, 654, 655, 659, 662, 663, 665, 666, 667, 668, 669, 675, 676, 677, 678, 679, 682, 683, 686, 698, 702, 711, 725, 728, 768, 772, 778, 779, 785, 787, 790, 791, 793, 801, 805, 806, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 832, 833, 835, 838, 840, 841, 846, 847, 848, 850, 872, 880, 881, 887, 890, 891, 892, 893, 894, 895, 896, 926, 927, 938, 943, 946, 947, 949, 967, 968, 970, 972, 974, 975, 976, 977, 979, 980, 982, 983, 984, 988, 990, 991, 994, 995, 996, 998, 999, 1000, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "250": [6, 10, 15, 65, 123, 174, 219, 484, 683, 967, 990, 1027], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 55, 61, 68, 70, 72, 110, 114, 124, 144, 158, 165, 199, 234, 240, 241, 246, 250, 252, 262, 265, 268, 273, 275, 281, 284, 291, 300, 303, 305, 308, 309, 313, 319, 321, 322, 325, 326, 330, 340, 345, 346, 347, 356, 362, 369, 370, 374, 379, 385, 391, 396, 400, 404, 407, 438, 493, 503, 511, 688, 694, 704, 732, 786, 787, 855, 886, 898, 967, 968, 972, 978, 979, 980, 981, 988, 991, 994, 997], "diabet": [7, 124, 133, 135, 140, 147, 163, 165, 185, 186, 187, 194, 195, 255, 367, 407, 492, 643, 644, 787, 792, 811, 812, 813, 986, 1004, 1008, 1015], "regress": [7, 10, 13, 25, 27, 30, 54, 69, 71, 76, 80, 81, 84, 87, 98, 108, 113, 115, 116, 121, 129, 134, 147, 149, 160, 162, 163, 165, 167, 168, 169, 176, 180, 182, 184, 188, 192, 193, 195, 199, 201, 202, 203, 214, 217, 226, 228, 236, 241, 242, 255, 272, 273, 277, 280, 293, 298, 302, 306, 313, 314, 315, 316, 327, 343, 345, 349, 355, 361, 362, 363, 366, 367, 369, 371, 374, 376, 379, 382, 383, 385, 386, 387, 395, 398, 402, 403, 404, 405, 409, 423, 428, 455, 456, 465, 475, 480, 481, 483, 487, 492, 493, 495, 496, 503, 507, 508, 509, 515, 519, 522, 526, 528, 530, 532, 533, 534, 536, 537, 539, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 561, 562, 583, 584, 585, 586, 587, 588, 589, 590, 591, 595, 596, 597, 600, 601, 602, 605, 606, 613, 614, 616, 622, 623, 624, 625, 626, 628, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 692, 697, 712, 713, 714, 718, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 775, 787, 790, 791, 793, 801, 809, 813, 814, 816, 817, 821, 823, 824, 832, 833, 838, 840, 841, 847, 848, 850, 851, 854, 855, 857, 863, 864, 865, 867, 870, 871, 874, 879, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 904, 910, 913, 915, 931, 967, 968, 970, 973, 975, 985, 986, 988, 989, 998, 999, 1000, 1001, 1002, 1004, 1007, 1010, 1015, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "patient": [7, 133, 147, 163, 371, 382, 404, 974, 1011], "diseas": [7, 133, 147, 163, 262, 371, 703, 978, 1011], "newsgroup": [7, 14, 19, 231, 260, 324, 346, 347, 367, 397, 408, 479, 480, 1005, 1015], "post": [7, 14, 19, 70, 165, 315, 345, 346, 347, 349, 355, 360, 369, 373, 374, 378, 379, 386, 400, 439, 479, 480, 491, 703, 816, 898, 978, 994, 1002, 1013, 1031], "written": [7, 29, 35, 89, 165, 205, 314, 361, 371, 374, 375, 376, 380, 382, 385, 387, 401, 406, 478, 493, 499, 688, 704, 816, 895, 902, 972, 974, 978, 982, 983, 992, 997, 1004, 1005, 1010, 1013, 1029], "about": [7, 11, 29, 44, 53, 57, 62, 70, 86, 89, 119, 144, 159, 165, 167, 168, 171, 202, 215, 227, 234, 256, 257, 259, 261, 266, 284, 306, 311, 313, 314, 315, 316, 317, 321, 345, 347, 354, 356, 360, 361, 363, 367, 369, 373, 374, 378, 379, 380, 386, 387, 388, 394, 404, 405, 408, 410, 429, 483, 485, 486, 487, 488, 491, 492, 493, 495, 496, 501, 506, 552, 553, 584, 585, 598, 599, 605, 624, 631, 667, 669, 733, 787, 793, 801, 809, 819, 911, 968, 974, 975, 977, 979, 981, 984, 985, 988, 989, 991, 993, 994, 996, 998, 1002, 1004, 1005, 1011, 1013, 1025, 1026, 1036], "sgdclassifi": [7, 8, 205, 206, 207, 208, 209, 210, 211, 232, 267, 324, 334, 345, 356, 360, 362, 380, 387, 398, 399, 408, 629, 631, 632, 633, 637, 649, 657, 659, 890, 895, 970, 974, 979, 992, 993, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1036], "stochast": [7, 58, 122, 125, 165, 174, 176, 217, 221, 223, 227, 232, 287, 288, 294, 299, 314, 400, 405, 407, 453, 479, 487, 493, 494, 495, 505, 513, 527, 535, 550, 551, 562, 595, 618, 630, 649, 650, 659, 663, 665, 667, 668, 669, 670, 678, 679, 680, 681, 683, 816, 839, 846, 847, 848, 851, 860, 894, 926, 927, 952, 967, 981, 982, 984, 1000, 1014, 1015, 1020, 1021, 1024, 1025, 1027, 1029, 1031], "gradient": [7, 46, 66, 108, 115, 127, 130, 133, 134, 155, 156, 165, 176, 217, 227, 232, 301, 307, 387, 399, 400, 410, 443, 453, 457, 458, 479, 481, 487, 492, 494, 495, 506, 511, 544, 545, 550, 551, 552, 553, 555, 556, 562, 577, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 625, 626, 630, 639, 640, 649, 650, 659, 660, 663, 665, 667, 668, 669, 671, 678, 683, 685, 686, 731, 732, 738, 740, 787, 790, 791, 792, 813, 816, 846, 847, 848, 851, 863, 864, 894, 952, 975, 978, 981, 982, 983, 984, 998, 1000, 1015, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1033, 1035], "descent": [7, 13, 165, 176, 183, 217, 227, 232, 314, 405, 407, 462, 463, 469, 479, 487, 494, 522, 528, 529, 530, 531, 533, 534, 536, 537, 538, 539, 562, 630, 637, 638, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 659, 663, 665, 667, 668, 669, 672, 673, 674, 675, 678, 685, 816, 847, 848, 851, 890, 894, 952, 975, 982, 984, 993, 1000, 1011, 1015, 1020, 1023, 1024, 1025, 1027, 1029, 1031, 1033, 1034, 1035], "nusvr": [7, 360, 896, 993, 1022, 1028, 1030, 1031, 1032, 1034, 1035], "nu": [7, 9, 11, 159, 212, 227, 331, 360, 407, 410, 610, 668, 892, 893, 894, 984, 992, 993, 1031, 1035], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 68, 72, 89, 95, 97, 143, 150, 158, 179, 185, 202, 203, 210, 214, 232, 233, 237, 240, 257, 259, 260, 264, 285, 298, 301, 325, 328, 329, 331, 332, 333, 335, 336, 337, 340, 342, 343, 346, 360, 362, 363, 379, 380, 383, 385, 387, 397, 398, 400, 402, 403, 404, 405, 407, 410, 411, 412, 428, 434, 435, 436, 438, 440, 441, 442, 444, 455, 456, 458, 459, 473, 474, 475, 476, 478, 480, 488, 500, 503, 512, 515, 522, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 540, 541, 542, 543, 558, 559, 560, 561, 572, 573, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 613, 614, 616, 622, 629, 631, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 682, 683, 684, 686, 710, 725, 753, 758, 759, 760, 761, 763, 764, 765, 767, 768, 787, 790, 791, 801, 814, 817, 818, 819, 825, 826, 827, 828, 829, 832, 833, 834, 836, 837, 838, 840, 841, 842, 847, 848, 855, 857, 862, 870, 874, 877, 888, 890, 891, 892, 893, 894, 895, 896, 897, 910, 924, 926, 927, 941, 947, 967, 970, 971, 972, 974, 975, 976, 978, 979, 980, 982, 983, 984, 988, 992, 994, 1000, 1004, 1007, 1010, 1013, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1026, 1028, 1029, 1031, 1033], "gradientboostingregressor": [7, 123, 124, 130, 133, 360, 379, 385, 545, 553, 623, 624, 974, 978, 979, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "forward": [7, 110, 147, 234, 313, 360, 374, 391, 409, 499, 500, 530, 534, 544, 550, 551, 576, 577, 593, 676, 677, 854, 974, 999, 1032], "wise": [7, 26, 48, 158, 199, 227, 269, 301, 346, 360, 387, 398, 400, 404, 405, 409, 449, 522, 525, 528, 532, 536, 537, 540, 541, 544, 546, 547, 550, 551, 583, 586, 587, 589, 590, 591, 597, 631, 643, 691, 744, 818, 867, 880, 881, 884, 951, 953, 954, 955, 956, 959, 970, 972, 978, 979, 992, 999, 1020, 1025, 1028, 1029, 1030], "fashion": [7, 115, 121, 206, 268, 361, 387, 397, 398, 400, 405, 407, 544, 548, 549, 550, 551, 555, 556, 557, 593, 618, 816, 839, 854, 857, 863, 874, 898, 899, 900, 901, 949, 968, 974, 978, 988, 1029], "notic": [7, 25, 26, 53, 57, 80, 113, 115, 116, 123, 146, 177, 182, 227, 240, 256, 257, 259, 260, 262, 268, 269, 279, 306, 345, 346, 347, 356, 379, 388, 404, 487, 532, 554, 967, 977, 978, 984, 1013, 1017, 1033], "faster": [7, 19, 39, 64, 73, 95, 115, 116, 120, 123, 147, 169, 174, 184, 198, 200, 213, 214, 216, 233, 279, 281, 297, 312, 314, 315, 345, 346, 347, 360, 368, 374, 382, 383, 387, 399, 400, 405, 409, 410, 412, 434, 438, 440, 442, 443, 444, 453, 499, 522, 523, 524, 527, 528, 529, 530, 531, 533, 534, 536, 537, 538, 539, 544, 550, 551, 552, 553, 634, 637, 638, 643, 644, 649, 650, 651, 652, 653, 654, 663, 665, 675, 678, 682, 686, 716, 746, 768, 769, 770, 830, 831, 835, 847, 848, 865, 867, 869, 879, 883, 927, 947, 967, 971, 974, 979, 981, 982, 985, 990, 992, 993, 994, 998, 1001, 1009, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "10_000": [7, 25, 75, 115, 123, 167, 174, 231, 262, 279, 550, 551, 555, 556, 867], "vari": [7, 34, 44, 46, 55, 62, 75, 116, 117, 119, 146, 165, 168, 169, 187, 189, 192, 196, 224, 232, 249, 255, 259, 262, 294, 299, 301, 306, 317, 319, 326, 332, 335, 356, 360, 362, 369, 387, 432, 436, 437, 491, 499, 505, 506, 513, 550, 551, 555, 556, 637, 638, 641, 642, 643, 644, 645, 646, 651, 652, 653, 654, 672, 675, 694, 753, 806, 809, 814, 816, 817, 847, 851, 855, 870, 887, 895, 898, 899, 952, 970, 973, 974, 978, 981, 982, 991, 994, 1002, 1027, 1028, 1036], "relev": [7, 9, 19, 77, 83, 145, 165, 177, 192, 259, 260, 266, 356, 360, 362, 369, 371, 373, 374, 376, 378, 379, 380, 387, 388, 391, 402, 403, 409, 410, 428, 434, 435, 438, 440, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 524, 525, 529, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 581, 582, 585, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 716, 730, 746, 787, 788, 789, 790, 791, 794, 796, 801, 805, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 868, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 978, 979, 984, 995, 999, 1023, 1028, 1032, 1034], "select": [7, 9, 36, 44, 55, 57, 62, 68, 69, 71, 74, 76, 82, 92, 94, 107, 110, 112, 118, 120, 123, 130, 137, 144, 148, 155, 157, 168, 169, 171, 174, 176, 178, 182, 202, 206, 213, 216, 217, 220, 227, 231, 233, 243, 244, 251, 257, 258, 259, 260, 264, 283, 301, 306, 307, 313, 317, 320, 321, 324, 327, 332, 340, 343, 345, 346, 347, 356, 360, 361, 363, 369, 371, 372, 374, 376, 382, 386, 387, 397, 400, 401, 402, 405, 407, 408, 410, 434, 436, 437, 438, 440, 442, 444, 449, 450, 451, 455, 457, 458, 463, 464, 467, 479, 480, 483, 484, 487, 488, 492, 493, 495, 503, 506, 523, 525, 526, 531, 532, 535, 540, 542, 549, 550, 551, 554, 556, 572, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 618, 622, 623, 636, 637, 638, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 662, 664, 667, 669, 673, 674, 682, 683, 688, 703, 707, 709, 744, 780, 781, 785, 786, 787, 790, 791, 792, 793, 801, 812, 813, 814, 816, 818, 832, 833, 834, 836, 838, 840, 841, 842, 850, 851, 855, 860, 866, 870, 887, 890, 891, 895, 898, 899, 900, 901, 906, 947, 948, 972, 973, 975, 978, 979, 981, 982, 984, 988, 991, 992, 993, 994, 995, 998, 999, 1000, 1002, 1004, 1005, 1007, 1011, 1012, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "ham": [7, 441, 448, 572, 694, 700, 724, 731, 768, 769, 770, 784, 981], "loss": [7, 24, 25, 26, 27, 116, 121, 122, 123, 124, 125, 150, 151, 165, 176, 180, 188, 191, 200, 202, 203, 205, 206, 210, 216, 217, 233, 267, 296, 297, 306, 314, 324, 329, 330, 334, 340, 345, 385, 387, 398, 399, 405, 410, 455, 456, 487, 499, 500, 523, 529, 530, 531, 534, 538, 543, 544, 545, 549, 550, 551, 552, 553, 556, 634, 637, 640, 649, 650, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 694, 697, 700, 713, 724, 725, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 784, 787, 790, 791, 801, 812, 813, 816, 847, 848, 850, 851, 854, 855, 863, 864, 865, 870, 890, 891, 896, 897, 899, 901, 927, 931, 971, 974, 982, 986, 991, 992, 993, 994, 1013, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "eustach": [7, 8, 10, 1002, 1022, 1023], "diemert": [7, 8, 10, 1002, 1022, 1023], "maria": [7, 124, 130, 147, 163, 400, 1031, 1032, 1033, 1034, 1035], "telenczuk": [7, 124, 130, 147, 163, 1029, 1032, 1033, 1035], "github": [7, 8, 12, 26, 71, 72, 109, 115, 117, 118, 124, 126, 127, 130, 133, 144, 155, 163, 168, 169, 170, 179, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 279, 298, 307, 312, 313, 315, 316, 322, 354, 368, 372, 373, 377, 378, 379, 380, 382, 385, 387, 388, 390, 394, 396, 443, 453, 499, 527, 682, 683, 686, 981, 997, 998, 1001, 1002, 1013, 1025, 1030], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 57, 65, 70, 71, 109, 110, 111, 112, 113, 114, 115, 121, 122, 124, 125, 129, 130, 150, 153, 155, 157, 159, 163, 178, 198, 200, 205, 215, 216, 220, 222, 224, 230, 244, 246, 247, 260, 263, 279, 301, 302, 305, 306, 345, 346, 368, 369, 372, 374, 378, 379, 380, 382, 385, 390, 400, 433, 443, 453, 499, 525, 527, 532, 662, 682, 686, 696, 981, 996, 1001, 1025, 1027, 1030], "maikia": [7, 124, 130, 163, 1028, 1029, 1031, 1032], "lemaitre58": [7, 130, 150, 155, 157, 159, 220, 301], "gmail": [7, 11, 14, 16, 24, 42, 48, 57, 65, 70, 71, 109, 110, 111, 112, 113, 114, 115, 121, 122, 124, 125, 129, 130, 150, 153, 155, 157, 159, 178, 198, 200, 215, 216, 220, 222, 230, 244, 246, 247, 260, 263, 301, 306, 345, 346], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 129, 130, 147, 150, 151, 153, 154, 155, 156, 157, 159, 163, 174, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 203, 205, 206, 214, 215, 216, 220, 221, 222, 224, 227, 230, 232, 233, 235, 237, 244, 246, 260, 263, 265, 272, 277, 279, 281, 287, 288, 289, 291, 292, 295, 298, 301, 302, 303, 304, 305, 306, 320, 321, 322, 323, 325, 336, 337, 340, 341, 345, 346, 347, 368, 387, 394, 994, 1002], "hamming_loss": [7, 694, 784, 978, 1022, 1026, 1029], "mean_squared_error": [7, 123, 124, 194, 198, 200, 202, 204, 216, 356, 407, 732, 742, 978, 1021, 1023, 1030, 1031], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 54, 57, 59, 60, 62, 64, 65, 71, 78, 79, 80, 92, 96, 101, 102, 113, 119, 139, 142, 170, 188, 193, 196, 201, 204, 207, 211, 215, 222, 245, 247, 248, 249, 250, 262, 265, 273, 284, 285, 286, 291, 337, 338, 342, 346, 356, 361, 376, 383, 385, 387, 400, 404, 405, 434, 438, 439, 441, 443, 448, 450, 451, 452, 453, 462, 463, 464, 527, 535, 544, 545, 546, 547, 550, 551, 618, 637, 638, 643, 644, 651, 652, 653, 654, 668, 680, 682, 684, 686, 785, 786, 791, 821, 824, 839, 893, 913, 926, 927, 943, 947, 967, 968, 973, 975, 1011, 1024, 1025, 1029, 1030, 1036], "fetch_20newsgroups_vector": [7, 213, 231, 369, 1020, 1030, 1032], "spars": [7, 12, 13, 17, 39, 40, 54, 55, 57, 77, 83, 94, 107, 115, 128, 165, 176, 193, 197, 214, 217, 231, 233, 260, 279, 312, 316, 340, 344, 347, 348, 354, 360, 366, 368, 369, 370, 374, 376, 377, 378, 379, 385, 386, 387, 399, 400, 401, 407, 408, 410, 411, 415, 422, 429, 431, 433, 434, 435, 437, 438, 440, 441, 442, 443, 444, 448, 450, 451, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 478, 479, 480, 487, 488, 494, 499, 514, 515, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 572, 573, 576, 577, 579, 580, 581, 582, 584, 585, 594, 595, 596, 597, 598, 599, 600, 620, 621, 622, 624, 629, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 703, 704, 705, 719, 720, 721, 724, 728, 729, 730, 744, 745, 750, 751, 753, 754, 756, 757, 758, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 777, 780, 781, 784, 787, 790, 791, 801, 808, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 872, 873, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 906, 908, 909, 910, 911, 916, 924, 927, 928, 931, 932, 933, 941, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 964, 968, 971, 974, 975, 976, 978, 979, 981, 991, 993, 994, 999, 1000, 1011, 1012, 1013, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "generate_data": [7, 33], "load_diabet": [7, 124, 133, 136, 147, 163, 183, 185, 186, 187, 194, 195, 238, 255, 316, 407, 549, 553, 559, 664, 692, 811, 812, 813, 899, 901, 986, 1008, 1011, 1026, 1031, 1034], "elif": [7, 8, 16, 34, 178, 200, 235, 237, 246, 284, 866], "subset": [7, 19, 20, 26, 27, 32, 70, 71, 80, 81, 117, 119, 120, 136, 144, 169, 187, 199, 213, 214, 215, 216, 230, 232, 236, 237, 257, 260, 262, 268, 269, 271, 306, 307, 313, 320, 324, 345, 346, 347, 356, 369, 374, 382, 385, 387, 397, 398, 400, 401, 404, 407, 408, 410, 417, 428, 440, 455, 457, 458, 460, 479, 480, 483, 484, 488, 499, 540, 541, 542, 544, 546, 547, 548, 550, 552, 553, 554, 555, 558, 560, 593, 601, 620, 630, 631, 632, 633, 642, 646, 649, 657, 659, 662, 665, 666, 667, 668, 669, 670, 688, 694, 695, 704, 707, 709, 721, 724, 745, 747, 781, 784, 789, 814, 816, 818, 819, 820, 821, 825, 826, 827, 828, 829, 832, 837, 840, 847, 856, 885, 886, 890, 892, 895, 898, 900, 906, 947, 967, 974, 978, 979, 989, 991, 993, 994, 1013, 1023, 1028, 1029, 1031, 1033], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 59, 80, 108, 110, 114, 131, 134, 163, 165, 171, 194, 202, 203, 215, 232, 234, 258, 259, 265, 269, 273, 277, 330, 337, 356, 360, 381, 387, 397, 398, 400, 404, 405, 407, 411, 429, 432, 434, 435, 436, 437, 439, 441, 442, 444, 446, 447, 462, 463, 469, 472, 527, 538, 544, 555, 560, 588, 602, 611, 623, 624, 625, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 666, 670, 672, 675, 679, 681, 683, 685, 698, 707, 719, 720, 725, 726, 728, 734, 744, 754, 759, 761, 762, 763, 764, 768, 771, 773, 774, 777, 778, 779, 780, 781, 783, 794, 796, 811, 815, 828, 830, 831, 868, 869, 870, 876, 880, 890, 891, 916, 929, 970, 972, 974, 975, 976, 978, 980, 981, 982, 986, 988, 991, 993, 1008, 1011, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "given": [7, 10, 11, 27, 37, 49, 58, 60, 78, 85, 96, 100, 116, 126, 128, 130, 150, 157, 168, 169, 182, 198, 199, 202, 216, 220, 227, 231, 232, 234, 236, 238, 255, 259, 260, 261, 262, 268, 285, 286, 287, 303, 307, 314, 340, 345, 346, 347, 353, 360, 362, 369, 373, 374, 376, 378, 380, 382, 383, 385, 387, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 417, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 449, 450, 451, 452, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 478, 487, 492, 494, 496, 514, 524, 525, 527, 529, 530, 531, 534, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 580, 581, 582, 584, 585, 592, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 622, 623, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 678, 679, 681, 682, 688, 689, 690, 691, 692, 693, 695, 696, 697, 703, 705, 708, 709, 711, 714, 716, 717, 724, 726, 727, 730, 742, 745, 746, 748, 749, 754, 764, 768, 771, 772, 774, 777, 778, 779, 782, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 799, 801, 805, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 876, 877, 879, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 905, 914, 915, 916, 937, 962, 966, 967, 970, 972, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 988, 991, 992, 993, 994, 1002, 1004, 1008, 1009, 1011, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "round": [7, 9, 25, 85, 116, 162, 163, 205, 216, 259, 265, 303, 305, 345, 441, 447, 448, 555, 556, 584, 585, 588, 618, 683, 704, 789, 799, 855, 887, 902, 904, 968, 982, 994, 1022, 1024, 1026, 1028, 1029, 1031, 1033, 1034, 1036], "changing_param": 7, "collect": [7, 9, 10, 12, 16, 19, 25, 80, 114, 126, 133, 147, 155, 163, 171, 186, 191, 212, 222, 230, 262, 266, 285, 331, 334, 346, 347, 360, 369, 371, 378, 390, 404, 405, 407, 408, 410, 437, 455, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 560, 561, 572, 574, 575, 579, 580, 581, 582, 623, 789, 793, 794, 796, 809, 936, 949, 952, 967, 973, 974, 978, 984, 989, 999, 1002, 1008, 1013, 1022, 1032], "chang": [7, 16, 25, 26, 95, 99, 100, 113, 116, 124, 151, 162, 167, 168, 171, 199, 200, 202, 203, 238, 239, 254, 259, 266, 269, 305, 311, 312, 313, 314, 315, 316, 317, 321, 332, 347, 356, 360, 361, 362, 369, 372, 376, 377, 378, 379, 382, 385, 387, 391, 400, 404, 407, 408, 410, 412, 425, 428, 431, 434, 435, 438, 440, 443, 445, 450, 453, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 484, 485, 487, 495, 499, 500, 503, 504, 505, 513, 517, 522, 524, 525, 526, 527, 528, 529, 530, 531, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 579, 580, 581, 582, 584, 585, 588, 593, 601, 602, 604, 605, 606, 608, 610, 611, 613, 614, 616, 618, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 681, 683, 691, 695, 698, 703, 707, 708, 719, 720, 726, 727, 731, 745, 746, 747, 768, 774, 775, 777, 783, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 801, 805, 806, 808, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 840, 841, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 862, 863, 869, 870, 878, 879, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 908, 910, 911, 922, 927, 937, 944, 945, 946, 948, 967, 968, 969, 977, 978, 979, 981, 988, 991, 992, 993, 994, 996, 999, 1004, 1011, 1013, 1018, 1019], "affect": [7, 25, 80, 157, 167, 168, 202, 223, 238, 262, 269, 306, 317, 356, 360, 361, 362, 370, 387, 389, 398, 400, 403, 404, 406, 408, 411, 413, 435, 441, 448, 464, 466, 470, 540, 541, 560, 703, 778, 787, 790, 791, 792, 801, 805, 806, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 870, 871, 881, 895, 977, 981, 993, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 378, 398, 404, 825, 980, 1034], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 16, 17, 25, 33, 37, 40, 44, 50, 61, 71, 103, 113, 114, 116, 121, 123, 137, 163, 171, 191, 202, 203, 205, 206, 213, 216, 232, 233, 259, 262, 268, 269, 272, 277, 295, 296, 307, 323, 332, 335, 345, 346, 347, 350, 354, 380, 387, 401, 408, 649, 650, 890, 891, 897, 917, 988, 1008], "start_tim": [7, 10, 19, 117, 118, 130, 150, 187, 220], "elapsed_tim": [7, 39, 67, 117, 118, 130, 215], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 53, 60, 61, 65, 66, 67, 71, 98, 102, 139, 158, 168, 184, 188, 222, 258, 259, 263, 267, 340, 347, 360, 368, 369, 374, 383, 387, 400, 401, 408, 409, 411, 412, 413, 417, 419, 423, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 478, 483, 484, 485, 487, 489, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 574, 575, 579, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 601, 602, 604, 605, 606, 607, 608, 610, 611, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 749, 756, 759, 765, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 793, 801, 804, 807, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 853, 856, 857, 863, 864, 866, 868, 870, 871, 872, 873, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 908, 910, 911, 914, 924, 925, 941, 953, 959, 964, 968, 978, 979, 981, 982, 988, 993, 994, 1020, 1021, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 113, 122, 124, 213, 214, 216, 306], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 68, 94, 107, 127, 165, 197, 234, 346, 347, 367, 368, 369, 376, 385, 387, 400, 408, 440, 455, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 498, 501, 517, 522, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 558, 559, 560, 561, 572, 573, 575, 578, 579, 580, 623, 624, 625, 655, 676, 677, 692, 704, 787, 790, 791, 798, 799, 801, 813, 849, 854, 863, 898, 899, 900, 901, 905, 915, 935, 938, 967, 974, 978, 993, 1004, 1013, 1014, 1015, 1020, 1028, 1031, 1032, 1033, 1034, 1035], "necessari": [7, 13, 114, 182, 198, 203, 244, 259, 260, 266, 281, 352, 360, 369, 372, 373, 374, 375, 376, 377, 378, 382, 385, 400, 402, 407, 443, 453, 479, 480, 482, 483, 484, 485, 486, 488, 525, 635, 636, 637, 643, 647, 648, 651, 652, 653, 654, 655, 656, 662, 664, 666, 667, 682, 686, 783, 853, 862, 873, 877, 883, 967, 970, 974, 977, 980, 988, 994, 1013, 1020, 1028], "defin": [7, 9, 12, 27, 53, 55, 57, 66, 70, 71, 73, 86, 95, 100, 109, 110, 111, 130, 147, 150, 157, 158, 159, 169, 170, 177, 199, 206, 215, 216, 227, 231, 234, 238, 240, 244, 249, 259, 260, 262, 266, 268, 269, 270, 271, 279, 301, 312, 332, 340, 345, 346, 360, 370, 373, 374, 375, 376, 380, 381, 383, 385, 386, 387, 394, 395, 396, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 410, 416, 421, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 450, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 480, 510, 511, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 613, 614, 618, 619, 620, 621, 623, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 687, 688, 699, 701, 707, 712, 713, 714, 715, 718, 721, 728, 731, 735, 736, 738, 740, 741, 743, 744, 747, 750, 756, 771, 775, 780, 781, 785, 786, 787, 790, 791, 793, 801, 809, 813, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 877, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 914, 916, 919, 925, 936, 938, 962, 967, 968, 974, 975, 976, 977, 979, 980, 981, 983, 984, 985, 986, 988, 990, 992, 993, 994, 999, 1009, 1012, 1015, 1017, 1022, 1026, 1027, 1028, 1030, 1031, 1032, 1034, 1035, 1036], "complexity_label": [7, 10], "type": [7, 16, 53, 54, 69, 70, 76, 81, 90, 105, 119, 122, 155, 165, 167, 168, 169, 174, 182, 198, 200, 234, 241, 243, 246, 249, 251, 254, 265, 266, 268, 269, 336, 340, 345, 347, 354, 356, 361, 363, 367, 368, 369, 371, 372, 374, 375, 377, 378, 379, 380, 385, 386, 390, 394, 396, 397, 401, 408, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 487, 499, 500, 506, 558, 563, 572, 573, 576, 577, 579, 580, 582, 591, 595, 608, 618, 620, 621, 629, 647, 649, 663, 665, 670, 678, 680, 683, 684, 692, 698, 705, 707, 719, 720, 728, 731, 773, 774, 777, 778, 785, 786, 787, 793, 801, 809, 814, 816, 817, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 850, 851, 852, 855, 857, 863, 864, 870, 871, 888, 892, 893, 894, 895, 896, 906, 908, 910, 911, 914, 918, 919, 941, 942, 949, 952, 965, 968, 970, 975, 977, 978, 979, 980, 981, 982, 988, 990, 994, 1001, 1002, 1006, 1011, 1012, 1013, 1020, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 85, 143, 144, 147, 167, 168, 177, 180, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 197, 201, 202, 203, 207, 213, 214, 235, 241, 272, 308, 315, 330, 337, 341, 345, 356, 369, 376, 387, 403, 409, 456, 473, 474, 475, 540, 584, 585, 588, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 890, 891, 892, 893, 894, 895, 896, 962, 972, 974, 992, 993, 1011, 1020, 1022, 1025, 1027, 1032, 1034], "toarrai": [7, 324, 354, 401, 408, 557, 573, 579, 581, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 863, 880, 881, 949, 952, 968, 981, 988], "count_nonzero": [7, 10, 360], "configur": [7, 10, 71, 72, 169, 239, 241, 308, 345, 359, 372, 374, 376, 380, 382, 385, 387, 390, 391, 396, 401, 408, 409, 424, 433, 434, 436, 438, 440, 443, 453, 455, 459, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 557, 558, 559, 560, 561, 572, 573, 574, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 617, 618, 619, 620, 621, 623, 626, 629, 630, 631, 632, 633, 679, 680, 681, 682, 683, 685, 686, 778, 834, 839, 842, 846, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 888, 944, 945, 975, 978, 988, 993, 998, 1013, 1015, 1024, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036], "penalti": [7, 10, 30, 82, 165, 176, 177, 182, 187, 191, 198, 202, 213, 214, 217, 229, 267, 295, 314, 324, 337, 345, 360, 382, 385, 399, 402, 405, 409, 462, 463, 464, 465, 466, 467, 469, 493, 522, 528, 529, 530, 531, 533, 534, 538, 539, 588, 634, 637, 638, 639, 640, 643, 644, 645, 648, 649, 650, 651, 652, 653, 659, 660, 661, 663, 667, 669, 671, 672, 678, 801, 870, 890, 891, 893, 895, 896, 897, 967, 974, 977, 982, 988, 992, 993, 1011, 1013, 1022, 1025, 1027, 1029, 1030, 1032, 1033, 1035, 1036], "elasticnet": [7, 10, 179, 189, 267, 272, 360, 380, 385, 405, 638, 643, 648, 649, 650, 651, 652, 653, 654, 659, 667, 669, 672, 974, 992, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1031, 1032, 1033, 1034], "001": [7, 13, 32, 44, 62, 150, 155, 160, 168, 182, 207, 227, 244, 257, 259, 261, 323, 346, 371, 380, 404, 527, 528, 530, 537, 618, 635, 636, 637, 638, 643, 644, 651, 652, 653, 654, 657, 658, 659, 667, 668, 669, 670, 672, 675, 680, 681, 684, 685, 785, 786, 847, 848, 885, 886, 892, 893, 894, 895, 896, 967, 1004, 1013], "modified_hub": [7, 667, 992], "fit_intercept": [7, 177, 178, 184, 203, 212, 227, 267, 308, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 890, 891, 897, 974, 992, 1024, 1028, 1029, 1030, 1032, 1033, 1034], "tol": [7, 10, 17, 73, 95, 121, 162, 178, 189, 191, 205, 206, 212, 214, 227, 238, 245, 247, 298, 314, 340, 345, 376, 380, 407, 412, 434, 438, 440, 443, 450, 453, 462, 463, 469, 473, 474, 475, 522, 523, 524, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 540, 541, 550, 551, 552, 553, 593, 618, 629, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 663, 665, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 682, 684, 686, 785, 786, 801, 839, 847, 848, 885, 886, 890, 891, 892, 893, 894, 895, 896, 964, 974, 992, 993, 1009, 1013, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035], "n_iter_no_chang": [7, 116, 121, 206, 314, 345, 379, 387, 407, 550, 551, 552, 553, 657, 658, 659, 667, 668, 669, 847, 848, 992, 1028, 1031], "l1_ratio": [7, 10, 14, 182, 183, 189, 267, 272, 360, 385, 405, 529, 531, 538, 637, 638, 643, 649, 650, 651, 652, 653, 654, 659, 667, 669, 672, 974, 992, 1021, 1023, 1025, 1032, 1034], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 58, 60, 78, 79, 82, 95, 98, 144, 165, 166, 167, 172, 176, 182, 183, 184, 185, 189, 191, 192, 193, 194, 195, 196, 200, 201, 213, 216, 217, 241, 297, 308, 313, 314, 315, 345, 346, 347, 360, 370, 374, 376, 387, 389, 399, 402, 403, 405, 409, 410, 413, 423, 443, 456, 458, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 487, 515, 517, 518, 522, 526, 528, 530, 533, 534, 539, 543, 545, 547, 549, 551, 553, 556, 559, 561, 573, 580, 584, 588, 600, 602, 605, 618, 626, 627, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 692, 694, 707, 710, 719, 724, 728, 733, 740, 743, 765, 767, 775, 776, 780, 781, 784, 802, 813, 816, 823, 824, 833, 841, 848, 851, 863, 870, 890, 891, 892, 893, 894, 895, 896, 899, 901, 969, 972, 974, 992, 993, 1011, 1020, 1024, 1025, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "misclassif": [7, 110, 784, 992, 993, 994, 1021], "ratio": [7, 53, 66, 73, 104, 165, 231, 233, 247, 252, 275, 360, 374, 400, 402, 404, 407, 441, 447, 484, 485, 506, 532, 540, 541, 542, 622, 649, 701, 703, 707, 715, 720, 726, 729, 772, 773, 774, 777, 783, 813, 816, 836, 883, 947, 972, 984, 994, 1009, 1035], "sparsifi": [7, 182, 360, 649, 650, 657, 659, 667, 668, 669, 890, 962, 1022], "05": [7, 8, 14, 22, 24, 26, 28, 30, 37, 44, 52, 60, 62, 64, 65, 67, 75, 85, 91, 100, 113, 116, 121, 123, 128, 136, 140, 143, 148, 155, 158, 159, 160, 168, 178, 179, 197, 200, 212, 217, 223, 224, 225, 227, 244, 246, 247, 250, 251, 259, 260, 266, 268, 269, 270, 275, 284, 287, 292, 301, 303, 311, 315, 321, 323, 326, 337, 343, 348, 371, 409, 441, 447, 583, 586, 587, 589, 604, 605, 606, 610, 611, 613, 614, 616, 623, 624, 640, 681, 685, 746, 787, 839, 890, 891, 974, 982, 988], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 55, 60, 61, 62, 63, 64, 65, 70, 72, 98, 101, 105, 106, 113, 116, 119, 120, 121, 138, 139, 145, 146, 150, 158, 163, 169, 171, 197, 198, 216, 222, 227, 230, 231, 232, 234, 236, 237, 244, 246, 247, 254, 257, 259, 260, 267, 268, 270, 273, 277, 279, 286, 288, 289, 295, 302, 303, 304, 307, 317, 320, 321, 324, 332, 339, 342, 345, 346, 347, 354, 385, 387, 410, 428, 436, 441, 447, 455, 498, 506, 541, 560, 561, 573, 588, 623, 624, 772, 787, 801, 812, 816, 818, 821, 885, 886, 1011, 1012, 1013, 1029, 1032], "support_vectors_": [7, 10, 16, 333, 336, 337, 892, 893, 894, 895, 896, 993], "squared_error": [7, 105, 123, 124, 314, 407, 549, 550, 551, 553, 556, 662, 667, 669, 684, 899, 901, 992, 994, 1033, 1036], "learning_r": [7, 109, 110, 122, 123, 124, 125, 224, 279, 296, 298, 312, 314, 407, 544, 545, 550, 551, 552, 553, 659, 667, 668, 669, 683, 846, 847, 848, 975, 985, 992, 1021, 1029, 1033], "max_depth": [7, 31, 109, 111, 112, 115, 119, 122, 123, 124, 125, 128, 129, 131, 162, 220, 256, 271, 313, 314, 350, 352, 353, 354, 386, 387, 407, 544, 545, 548, 549, 550, 551, 552, 553, 555, 556, 557, 790, 791, 814, 898, 899, 900, 901, 902, 903, 904, 967, 985, 994, 1029, 1031], "n_estim": [7, 10, 26, 31, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 128, 129, 132, 162, 171, 220, 236, 240, 246, 256, 271, 303, 311, 313, 360, 386, 387, 407, 409, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 623, 790, 791, 967, 984, 985, 1017, 1028, 1036], "n_tree": 7, "loop": [7, 8, 113, 123, 168, 254, 264, 345, 354, 360, 374, 375, 380, 400, 404, 409, 637, 638, 643, 644, 650, 651, 652, 653, 654, 967, 991, 992, 1008, 1023, 1024, 1027, 1032, 1033], "previous": [7, 53, 57, 71, 110, 156, 168, 257, 266, 315, 369, 382, 385, 390, 400, 405, 408, 431, 434, 445, 515, 525, 532, 640, 649, 650, 657, 659, 667, 668, 669, 890, 946, 974, 988, 998, 1017, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "subsequ": [7, 32, 58, 75, 98, 110, 144, 186, 200, 261, 264, 279, 281, 332, 356, 374, 376, 380, 387, 400, 401, 407, 410, 428, 487, 499, 544, 545, 550, 552, 553, 657, 659, 667, 790, 791, 818, 819, 822, 825, 826, 827, 828, 829, 847, 865, 869, 968, 977, 979, 1029, 1030, 1034, 1036], "relax": [7, 400, 408, 444, 991, 1027], "sgd": [7, 8, 165, 176, 205, 212, 217, 227, 267, 296, 297, 314, 345, 356, 362, 495, 503, 622, 640, 657, 658, 659, 662, 667, 668, 669, 670, 847, 848, 967, 982, 1000, 1015, 1020, 1023, 1024, 1025, 1027, 1031, 1033], "svr": [7, 10, 165, 226, 242, 311, 327, 343, 360, 547, 558, 559, 584, 585, 634, 669, 787, 793, 891, 893, 895, 971, 1011, 1020, 1022, 1024, 1025, 1028, 1030, 1031, 1032, 1033, 1034, 1035], "optim": [7, 13, 27, 53, 54, 57, 60, 72, 78, 79, 95, 109, 122, 124, 146, 150, 151, 154, 155, 156, 157, 158, 182, 186, 187, 191, 206, 214, 233, 257, 264, 267, 272, 277, 283, 298, 301, 306, 315, 323, 334, 340, 345, 346, 347, 356, 360, 363, 368, 371, 374, 376, 377, 385, 387, 390, 395, 397, 400, 402, 404, 405, 407, 409, 410, 411, 435, 439, 440, 441, 443, 448, 452, 453, 463, 464, 470, 522, 525, 526, 528, 530, 534, 548, 549, 550, 551, 565, 601, 602, 610, 611, 626, 629, 631, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 674, 675, 678, 681, 683, 685, 686, 692, 713, 720, 787, 801, 832, 833, 834, 836, 838, 839, 840, 841, 842, 847, 848, 866, 878, 882, 883, 890, 891, 892, 893, 894, 895, 896, 970, 971, 972, 973, 974, 978, 979, 980, 981, 982, 983, 992, 993, 994, 998, 1002, 1008, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1034, 1035, 1036], "few": [7, 14, 19, 39, 46, 52, 99, 120, 153, 156, 157, 187, 196, 198, 200, 216, 233, 234, 244, 261, 262, 266, 297, 301, 305, 311, 312, 313, 314, 315, 316, 317, 320, 340, 347, 360, 369, 370, 371, 374, 376, 386, 388, 391, 394, 397, 398, 400, 404, 405, 407, 409, 410, 428, 440, 552, 553, 579, 582, 646, 683, 686, 883, 927, 946, 974, 975, 977, 978, 981, 982, 991, 993, 994, 1002, 1004, 1011, 1012, 1013, 1026, 1036], "drawn": [7, 52, 80, 113, 146, 150, 159, 167, 238, 266, 283, 345, 370, 400, 406, 407, 410, 412, 460, 461, 462, 463, 464, 465, 466, 467, 506, 514, 524, 546, 547, 554, 602, 618, 623, 632, 826, 882, 883, 900, 901, 974, 988, 990, 1023], "boost": [7, 108, 109, 110, 111, 115, 127, 130, 133, 134, 165, 307, 380, 387, 399, 409, 439, 457, 458, 481, 487, 492, 495, 506, 511, 544, 545, 550, 551, 552, 553, 555, 556, 623, 624, 625, 626, 731, 732, 738, 740, 787, 790, 791, 792, 813, 816, 851, 863, 864, 974, 978, 998, 1000, 1015, 1020, 1021, 1023, 1025, 1026, 1027, 1029, 1033], "detriment": [7, 146, 361, 409, 974], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 57, 60, 65, 67, 73, 75, 80, 92, 120, 163, 171, 198, 228, 230, 238, 244, 262, 270, 302, 306, 307, 323, 345, 346, 1009], "add_subplot": [7, 16, 25, 27, 42, 45, 64, 67, 90, 101, 102, 109, 169, 195, 213, 221, 223, 320, 321, 381], "line1": [7, 12, 222], "tab": [7, 53, 110, 127, 130, 150, 155, 157, 186, 187, 312, 401, 1027], "blue": [7, 20, 21, 26, 34, 92, 95, 110, 113, 117, 125, 127, 130, 132, 145, 155, 157, 174, 178, 186, 187, 194, 196, 222, 231, 253, 254, 259, 296, 306, 312, 322, 371, 400, 405], "set_xlabel": [7, 10, 45, 53, 60, 72, 73, 75, 90, 92, 100, 109, 159, 162, 163, 167, 169, 170, 174, 187, 193, 195, 196, 198, 200, 213, 214, 232, 259, 261, 265, 270, 271, 274, 284, 301, 302, 306, 323, 346, 347, 350], "y1_label": 7, "set_ylabel": [7, 8, 10, 45, 53, 60, 65, 72, 73, 75, 80, 90, 92, 100, 106, 109, 110, 117, 159, 169, 174, 187, 189, 193, 195, 196, 198, 200, 202, 213, 232, 244, 259, 261, 265, 270, 271, 277, 284, 301, 302, 306, 311, 323, 340, 346, 350, 1009], "spine": [7, 14, 209, 301], "set_color": [7, 209], "get_color": 7, "yaxi": [7, 10, 45, 60, 90, 101, 102, 116, 195, 219, 221, 224, 244, 279, 284, 345], "tick_param": [7, 14, 133, 244, 259, 305, 323], "ax2": [7, 57, 60, 65, 67, 80, 92, 120, 163, 171, 198, 228, 238, 244, 262, 270, 289, 302, 306, 307, 323, 345], "frameon": [7, 204], "line2": [7, 12, 222, 341], "orang": [7, 53, 92, 96, 97, 103, 110, 125, 127, 157, 163, 186, 187, 208, 235, 247, 282, 290, 312, 353, 979], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 16, 25, 61, 162, 198, 200, 234, 241, 254, 261, 303, 324, 345, 346, 347, 381, 385, 863], "prediction_perform": 7, "4948": 7, "2675": 7, "057806": 7, "1847": 7, "3264": 7, "042103": 7, "997": [7, 40], "3383": 7, "034842": 7, "802": [7, 371], "3582": 7, "032861": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000184": 7, "5289": 7, "8022": [7, 387, 464, 1029], "000256": 7, "5193": 7, "8353": 7, "000415": 7, "124": [7, 169, 205, 217, 407, 1022], "5131": [7, 1025], "3279": 7, "000641": 7, "178": [7, 184, 217, 371, 380, 501, 834], "5149": 7, "0779": 7, "000880": 7, "4066": 7, "4812": 7, "000157": 7, "3551": 7, "1723": 7, "000175": 7, "3445": 7, "2171": 7, "000215": 7, "3433": 7, "0358": 7, "000250": 7, "3456": 7, "0602": 7, "000283": 7, "deduc": 7, "guarante": [7, 8, 80, 81, 168, 206, 231, 277, 279, 301, 346, 356, 362, 368, 382, 383, 400, 404, 405, 408, 437, 527, 636, 649, 650, 659, 663, 665, 667, 669, 678, 685, 804, 807, 830, 831, 868, 870, 883, 884, 897, 970, 974, 975, 977, 981, 986, 990, 994, 1012, 1030], "aspect": [7, 58, 86, 95, 154, 169, 219, 227, 288, 338, 360, 361, 362, 374, 387, 388, 400, 649, 650, 994, 1002], "705": [7, 15], "plot_model_complexity_influ": [7, 15], "doesn": [8, 198, 234, 245, 297, 332, 382, 387, 390, 391, 400, 408, 409, 413, 425, 466, 623, 624, 657, 659, 667, 707, 814, 817, 822, 832, 833, 847, 977, 978, 994, 1024], "t": [8, 11, 12, 16, 17, 26, 30, 34, 39, 40, 42, 43, 44, 52, 54, 58, 70, 72, 78, 79, 80, 82, 85, 92, 96, 97, 101, 103, 105, 106, 109, 110, 113, 114, 121, 122, 123, 124, 125, 129, 130, 147, 151, 153, 154, 155, 158, 159, 165, 168, 169, 170, 171, 177, 179, 182, 185, 192, 195, 196, 197, 198, 199, 216, 218, 220, 221, 222, 223, 225, 234, 235, 245, 248, 250, 258, 259, 279, 291, 292, 297, 311, 314, 315, 317, 320, 321, 323, 328, 329, 332, 333, 336, 337, 340, 345, 346, 347, 353, 354, 356, 360, 361, 368, 369, 371, 374, 376, 378, 380, 382, 385, 386, 387, 390, 391, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 413, 417, 423, 425, 428, 438, 439, 441, 447, 454, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 486, 487, 504, 505, 506, 510, 511, 516, 521, 523, 525, 532, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 581, 582, 585, 598, 599, 601, 602, 618, 619, 621, 622, 623, 624, 626, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 687, 695, 701, 707, 708, 716, 726, 727, 745, 746, 747, 757, 778, 779, 782, 783, 787, 790, 791, 801, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 836, 837, 840, 841, 846, 847, 848, 856, 861, 863, 864, 870, 871, 883, 885, 886, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 927, 942, 967, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 992, 993, 994, 1001, 1004, 1011, 1012, 1013, 1014, 1015, 1021, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "memori": [8, 54, 71, 72, 99, 121, 168, 169, 281, 307, 311, 313, 315, 316, 345, 346, 347, 361, 362, 368, 374, 377, 383, 387, 401, 404, 405, 408, 411, 412, 432, 433, 434, 435, 436, 437, 438, 440, 441, 445, 448, 450, 459, 464, 470, 487, 494, 499, 524, 525, 526, 529, 546, 547, 548, 549, 554, 555, 556, 572, 573, 579, 580, 582, 637, 638, 639, 643, 644, 649, 650, 651, 652, 653, 654, 657, 659, 660, 667, 668, 669, 670, 671, 672, 675, 768, 769, 770, 771, 787, 793, 801, 809, 811, 812, 813, 814, 817, 818, 819, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 850, 851, 868, 870, 880, 881, 883, 888, 890, 891, 898, 899, 900, 901, 911, 947, 963, 974, 980, 981, 988, 990, 991, 993, 994, 998, 999, 1002, 1004, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "onlin": [8, 14, 36, 68, 95, 98, 165, 176, 212, 217, 362, 369, 373, 379, 387, 400, 405, 408, 410, 433, 437, 438, 440, 486, 493, 522, 527, 528, 529, 530, 536, 537, 573, 575, 649, 657, 658, 659, 667, 669, 816, 825, 826, 827, 828, 829, 832, 833, 838, 840, 841, 859, 860, 870, 890, 891, 970, 974, 982, 984, 997, 1000, 1002, 1011, 1015, 1020, 1024, 1025, 1027, 1035], "partial_fit": [8, 50, 95, 234, 315, 362, 376, 387, 400, 405, 433, 440, 525, 527, 528, 529, 580, 588, 649, 650, 657, 658, 659, 667, 668, 669, 818, 819, 822, 823, 825, 826, 827, 828, 829, 846, 847, 848, 859, 860, 870, 890, 974, 980, 982, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1033, 1034, 1035, 1036], "fed": [8, 130, 356, 369, 408, 967, 983, 988, 1031], "batch": [8, 11, 64, 95, 99, 292, 315, 362, 383, 387, 408, 431, 433, 438, 440, 442, 444, 522, 524, 525, 527, 528, 529, 530, 531, 533, 534, 536, 537, 655, 676, 677, 792, 805, 806, 825, 826, 827, 828, 829, 847, 848, 859, 860, 870, 883, 930, 944, 982, 983, 992, 1020, 1024, 1025, 1028, 1029, 1030, 1031, 1033, 1035, 1036], "remain": [8, 25, 27, 71, 110, 117, 122, 124, 146, 168, 198, 202, 214, 244, 257, 261, 265, 268, 397, 400, 401, 402, 404, 408, 437, 455, 458, 506, 507, 512, 519, 525, 561, 601, 602, 753, 759, 789, 790, 791, 792, 795, 797, 825, 826, 827, 829, 931, 967, 968, 977, 978, 982, 988, 994, 999, 1022, 1028, 1034], "hashingvector": [8, 347, 362, 480, 579, 581, 1021, 1027, 1028, 1029, 1030, 1033], "where": [8, 11, 12, 13, 16, 17, 19, 20, 24, 25, 26, 32, 53, 55, 57, 80, 86, 92, 95, 98, 101, 105, 106, 109, 110, 112, 114, 116, 120, 121, 123, 127, 144, 147, 150, 156, 159, 163, 168, 177, 182, 190, 199, 202, 207, 208, 209, 211, 215, 216, 219, 221, 222, 227, 228, 231, 234, 235, 239, 250, 255, 256, 259, 261, 265, 266, 268, 270, 271, 298, 301, 303, 304, 305, 306, 307, 308, 311, 313, 314, 321, 322, 330, 340, 341, 342, 345, 350, 351, 356, 360, 361, 362, 368, 370, 371, 373, 374, 376, 378, 380, 381, 382, 385, 386, 387, 388, 390, 394, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 423, 428, 435, 438, 439, 443, 452, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 478, 487, 522, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 573, 574, 575, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 600, 601, 602, 604, 606, 610, 613, 614, 616, 618, 619, 620, 621, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 679, 682, 683, 684, 687, 698, 703, 707, 715, 719, 720, 721, 729, 732, 745, 753, 758, 759, 760, 763, 771, 772, 773, 774, 777, 780, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 815, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 833, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 853, 860, 863, 865, 866, 869, 870, 876, 878, 884, 885, 886, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 918, 919, 920, 921, 927, 935, 963, 967, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 992, 993, 994, 999, 1001, 1004, 1005, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "word": [8, 14, 19, 70, 150, 231, 235, 332, 346, 347, 360, 369, 370, 374, 376, 379, 387, 397, 400, 402, 403, 404, 405, 444, 502, 514, 525, 527, 532, 579, 580, 582, 687, 819, 829, 887, 972, 976, 980, 983, 988, 991, 992, 1002, 1011, 1012, 1020, 1028], "federicov": 8, "itertool": [8, 42, 44, 62, 131, 169, 183, 245, 250, 259, 266, 268, 407], "sy": [8, 12, 16, 19, 206, 231, 279, 324, 347, 369, 385, 608], "tarfil": 8, "hashlib": 8, "sha256": [8, 1035], "htmlparser": 8, "pathlib": [8, 1035], "path": [8, 16, 17, 165, 176, 183, 187, 217, 350, 368, 372, 374, 378, 382, 383, 387, 432, 436, 441, 477, 478, 479, 490, 491, 492, 494, 495, 496, 499, 500, 539, 548, 549, 554, 555, 556, 557, 584, 585, 588, 637, 638, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 672, 673, 674, 675, 676, 677, 679, 850, 851, 897, 898, 899, 900, 901, 932, 967, 974, 975, 984, 998, 999, 1020, 1021, 1024, 1026, 1027, 1029, 1030, 1032, 1033, 1035, 1036], "urllib": [8, 17], "request": [8, 17, 46, 198, 216, 234, 314, 361, 368, 372, 373, 377, 387, 388, 391, 394, 405, 408, 409, 428, 434, 435, 438, 440, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 572, 573, 579, 581, 582, 585, 601, 602, 623, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 690, 787, 788, 789, 790, 791, 794, 796, 801, 805, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 934, 935, 937, 978, 981, 1013, 1026, 1027, 1028], "urlretriev": 8, "rcparam": [8, 227, 232, 308], "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 66, 70, 98, 165, 260, 324, 344, 345, 346, 347, 362, 363, 369, 400, 401, 408, 455, 535, 863, 976, 1012, 1013, 1020, 1021, 1022, 1023, 1026, 1027], "passiveaggressiveclassifi": [8, 205, 360, 362, 974, 979, 1021, 1024, 1025, 1027, 1028, 1031, 1033], "perceptron": [8, 165, 205, 208, 214, 238, 294, 299, 362, 385, 408, 505, 506, 513, 657, 667, 816, 846, 847, 848, 851, 870, 976, 979, 983, 992, 1000, 1015, 1024, 1026, 1027, 1028, 1032], "naive_bay": [8, 24, 25, 27, 31, 128, 132, 260, 261, 345, 356, 362, 363, 369, 401, 407, 428, 560, 851, 972, 979, 980, 1013, 1021, 1022, 1024, 1025, 1026, 1027], "multinomialnb": [8, 362, 369, 401, 408, 825, 826, 827, 828, 980, 1013, 1022, 1024, 1027, 1028, 1032, 1033, 1035], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 71, 126, 153, 156, 158, 168, 169, 198, 202, 216, 220, 228, 234, 257, 301, 354, 356, 361, 369, 372, 373, 374, 376, 378, 379, 380, 387, 391, 400, 401, 402, 404, 405, 407, 409, 412, 431, 433, 442, 444, 445, 450, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 478, 479, 482, 483, 487, 488, 494, 499, 500, 505, 513, 518, 522, 523, 528, 529, 530, 531, 533, 536, 537, 539, 543, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 572, 579, 580, 581, 582, 588, 593, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 622, 623, 624, 626, 627, 628, 629, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 681, 685, 686, 688, 689, 691, 693, 695, 703, 732, 751, 757, 764, 768, 772, 779, 787, 790, 791, 792, 793, 801, 805, 806, 809, 810, 813, 814, 816, 819, 821, 824, 825, 826, 827, 829, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 847, 848, 854, 871, 877, 890, 891, 892, 893, 894, 895, 896, 902, 904, 908, 910, 911, 912, 914, 926, 927, 951, 962, 966, 967, 968, 973, 974, 978, 983, 984, 990, 992, 993, 1002, 1027, 1028, 1029], "builder": [8, 10, 378], "__file__": [8, 10, 1033], "global": [8, 10, 42, 57, 95, 198, 219, 220, 241, 268, 297, 312, 356, 360, 361, 380, 385, 387, 400, 410, 433, 443, 453, 459, 581, 617, 623, 679, 682, 683, 686, 698, 719, 720, 728, 773, 774, 777, 778, 805, 871, 886, 888, 946, 948, 967, 975, 978, 984, 988, 994, 1002, 1028, 1035], "21578": [8, 1033], "uci": [8, 306, 368, 371, 491, 493, 495, 501], "ml": [8, 368, 371, 379, 491, 493, 501, 974, 976, 998, 999, 1002], "uncompress": [8, 499, 500, 1013], "reuterspars": 8, "util": [8, 10, 11, 48, 55, 56, 61, 89, 110, 130, 198, 200, 206, 214, 221, 230, 234, 236, 247, 265, 267, 279, 303, 311, 323, 324, 332, 345, 361, 363, 368, 369, 372, 374, 375, 376, 377, 385, 386, 387, 396, 400, 401, 404, 405, 408, 428, 434, 435, 438, 440, 444, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 572, 573, 579, 581, 582, 585, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 787, 788, 789, 790, 791, 794, 796, 801, 805, 810, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 967, 973, 976, 978, 979, 988, 989, 998, 1002, 1005, 1015, 1020, 1021, 1023, 1024, 1026, 1027], "pars": [8, 17, 360, 368, 369, 375, 499], "sgml": [8, 360], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 68, 76, 83, 87, 93, 107, 134, 140, 148, 160, 164, 172, 175, 217, 225, 242, 251, 275, 278, 293, 299, 309, 318, 326, 343, 345, 346, 348, 355, 360, 362, 368, 369, 371, 372, 374, 378, 379, 380, 382, 385, 394, 401, 405, 478, 484, 485, 487, 494, 499, 500, 525, 570, 571, 579, 580, 582, 902, 981, 994, 998, 1001, 1005, 1020, 1021, 1023, 1026, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1036], "yield": [8, 9, 25, 45, 55, 78, 79, 80, 81, 121, 123, 182, 193, 198, 213, 216, 264, 277, 295, 301, 329, 334, 345, 346, 356, 360, 362, 368, 379, 387, 397, 400, 402, 404, 405, 407, 408, 409, 410, 428, 440, 459, 463, 499, 500, 528, 529, 530, 532, 537, 544, 545, 550, 551, 552, 553, 558, 559, 585, 593, 638, 642, 643, 644, 646, 652, 654, 656, 664, 666, 677, 716, 771, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 813, 814, 815, 817, 821, 824, 882, 883, 921, 928, 930, 931, 936, 970, 972, 974, 975, 978, 993, 994, 1008, 1025, 1026, 1028, 1031, 1033], "__init__": [8, 16, 56, 158, 234, 279, 332, 374, 376, 378, 379, 380, 381, 387, 408, 414, 939, 1021, 1026, 1028, 1033, 1034, 1035, 1036], "self": [8, 16, 19, 25, 27, 56, 158, 165, 234, 279, 319, 325, 326, 332, 345, 368, 374, 375, 376, 379, 380, 381, 382, 400, 408, 410, 414, 417, 423, 424, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 491, 499, 500, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 694, 785, 786, 787, 788, 789, 790, 791, 794, 796, 801, 805, 806, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 938, 939, 944, 952, 981, 999, 1000, 1002, 1015, 1022, 1027, 1034], "latin": [8, 408], "_reset": 8, "handle_starttag": 8, "tag": [8, 49, 71, 227, 322, 368, 373, 377, 378, 382, 385, 387, 396, 408, 487, 818, 999, 1001, 1025, 1029, 1030, 1031, 1034, 1035, 1036], "attr": [8, 56], "start_": 8, "getattr": [8, 301, 376, 387, 1036], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 70, 147, 238, 316, 371], "topic_d": 8, "fd": 8, "chunk": [8, 50, 360, 361, 400, 405, 411, 435, 440, 459, 529, 768, 771, 818, 819, 825, 826, 827, 828, 829, 888, 980, 1027, 1028, 1029, 1030, 1031], "feed": [8, 86, 199, 347, 369, 379, 385, 400, 408, 863, 979], "decod": [8, 292, 369, 387, 494, 560, 579, 580, 582, 1020, 1021], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 60, 66, 78, 79, 82, 100, 113, 120, 123, 126, 130, 150, 151, 154, 155, 156, 157, 158, 168, 170, 182, 202, 204, 220, 227, 233, 237, 244, 250, 259, 260, 285, 286, 301, 311, 332, 337, 346, 356, 369, 374, 376, 382, 385, 387, 388, 398, 399, 400, 403, 404, 407, 410, 441, 446, 463, 499, 500, 523, 554, 619, 634, 638, 652, 663, 665, 678, 696, 736, 785, 805, 806, 825, 826, 827, 829, 836, 911, 967, 971, 972, 974, 975, 977, 978, 979, 981, 984, 985, 988, 993, 1002, 1011, 1023, 1027, 1028, 1029], "handle_data": 8, "start_reut": 8, "attribut": [8, 25, 32, 49, 71, 104, 110, 117, 118, 121, 143, 147, 198, 206, 234, 237, 249, 257, 258, 263, 271, 288, 292, 314, 347, 354, 362, 363, 367, 368, 369, 371, 374, 377, 381, 385, 396, 397, 398, 400, 401, 402, 403, 405, 407, 408, 409, 410, 415, 416, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 498, 501, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 688, 689, 691, 692, 693, 726, 783, 785, 786, 787, 790, 791, 793, 801, 809, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 905, 939, 962, 972, 974, 979, 981, 982, 984, 988, 991, 992, 993, 994, 1002, 1004, 1010, 1013, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "end_reut": 8, "sub": [8, 37, 48, 53, 55, 57, 60, 70, 105, 234, 236, 244, 313, 320, 321, 329, 332, 341, 369, 374, 376, 380, 387, 401, 407, 408, 428, 434, 435, 438, 440, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 524, 525, 527, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 581, 582, 585, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 787, 788, 789, 790, 791, 794, 796, 801, 805, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 936, 974, 978, 992, 1013, 1030, 1034], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 72, 82, 95, 98, 110, 113, 116, 119, 121, 122, 124, 125, 147, 159, 162, 165, 177, 178, 206, 213, 246, 247, 252, 254, 270, 275, 295, 297, 298, 303, 313, 321, 323, 324, 332, 374, 376, 380, 382, 383, 386, 387, 395, 400, 403, 405, 407, 409, 412, 428, 431, 432, 434, 436, 438, 439, 440, 443, 445, 450, 452, 453, 454, 462, 463, 469, 473, 474, 475, 506, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 544, 545, 550, 551, 552, 553, 555, 558, 559, 572, 573, 579, 580, 582, 584, 585, 593, 601, 618, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 821, 824, 839, 846, 847, 848, 849, 850, 854, 861, 863, 865, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 905, 926, 927, 933, 936, 944, 968, 974, 975, 977, 978, 981, 982, 983, 991, 992, 993, 994, 999, 1002, 1008, 1012, 1013, 1015, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "archiv": [8, 368, 369, 371, 372, 394, 400, 433, 491, 493, 501, 748, 749, 976, 993, 1013], "exist": [8, 9, 17, 19, 53, 216, 259, 297, 301, 368, 373, 376, 377, 380, 385, 387, 388, 390, 394, 400, 404, 405, 407, 408, 410, 415, 425, 428, 434, 435, 438, 440, 442, 444, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 490, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 576, 579, 580, 581, 582, 585, 588, 594, 601, 602, 623, 624, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 689, 691, 693, 752, 755, 759, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 863, 864, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 962, 970, 975, 977, 978, 982, 984, 985, 988, 998, 1002, 1012, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "str": [8, 10, 16, 58, 60, 104, 106, 119, 216, 237, 259, 271, 279, 289, 330, 345, 368, 369, 383, 408, 411, 412, 416, 421, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 448, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 567, 572, 573, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 608, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 683, 687, 688, 689, 690, 691, 693, 698, 700, 702, 704, 717, 719, 720, 722, 723, 728, 761, 764, 768, 769, 770, 771, 772, 773, 774, 777, 779, 780, 781, 787, 788, 789, 790, 791, 793, 794, 796, 798, 799, 801, 805, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 909, 910, 911, 914, 917, 919, 923, 934, 935, 938, 941, 962, 963, 966, 1035], "kei": [8, 9, 10, 17, 19, 42, 116, 120, 130, 162, 167, 216, 234, 240, 260, 262, 263, 312, 313, 314, 315, 316, 317, 362, 367, 376, 379, 380, 381, 385, 387, 388, 390, 391, 400, 401, 404, 410, 455, 463, 552, 553, 558, 559, 560, 561, 579, 582, 585, 608, 617, 623, 624, 625, 650, 787, 790, 791, 799, 801, 813, 849, 850, 905, 915, 943, 999, 1013, 1017, 1026, 1032, 1033, 1035, 1036], "download_url": 8, "ic": [8, 313, 368, 371, 389, 491, 493, 501, 623, 624, 1015, 1032, 1033], "databas": [8, 306, 360, 362, 369, 371, 400, 405, 407, 408, 411, 433, 435, 501, 546, 547, 883, 990], "reuters21578": 8, "mld": 8, "tar": [8, 378], "gz": [8, 378, 390, 499, 500], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 16, 19, 41, 44, 49, 55, 56, 62, 82, 99, 113, 119, 123, 158, 168, 169, 187, 200, 216, 220, 227, 231, 233, 234, 235, 236, 259, 260, 263, 270, 279, 284, 292, 295, 296, 303, 345, 346, 354, 374, 378, 380, 407, 408, 410, 412, 428, 440, 499, 511, 524, 560, 616, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 663, 664, 665, 667, 670, 672, 673, 674, 675, 694, 700, 758, 778, 782, 784, 790, 791, 816, 854, 863, 866, 869, 877, 890, 891, 905, 940, 942, 944, 965, 994], "mkdir": [8, 380, 382], "parent": [8, 167, 234, 374, 378, 387, 400, 433, 454, 1020], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 134, 140, 148, 160, 164, 172, 175, 217, 225, 231, 242, 251, 275, 278, 293, 299, 309, 318, 326, 343, 345, 347, 348, 355, 369, 380, 892, 893, 894, 895, 896, 993, 1016], "1e6": [8, 10, 191, 231, 345, 347, 360, 527, 884, 978, 990], "current_sz_mb": 8, "stdout": [8, 95, 206, 819, 839, 847, 848], "write": [8, 17, 163, 234, 345, 360, 361, 368, 372, 373, 377, 378, 379, 380, 382, 383, 385, 387, 390, 401, 405, 408, 989, 999, 1013, 1021, 1033], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 324, 369, 380, 394, 479, 491, 494, 495, 498, 579, 580, 582, 1013, 1020, 1025, 1028, 1029], "reporthook": 8, "tamper": 8, "assert": [8, 17, 48, 96, 231, 259, 268, 361, 377, 999], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 221, 368, 369, 373, 374, 378, 380, 385, 386, 388, 390, 394, 401, 408, 478, 487, 499, 500, 968, 1002, 1007, 1023, 1027, 1028, 1030, 1036], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 408, 494, 579, 580, 582, 1022], "alternate_sign": [8, 408, 573, 580, 1027], "data_stream": 8, "binari": [8, 13, 25, 27, 109, 114, 116, 126, 128, 144, 158, 168, 174, 189, 191, 198, 206, 220, 228, 240, 256, 257, 262, 268, 274, 277, 283, 332, 338, 354, 356, 368, 369, 370, 376, 378, 379, 387, 390, 394, 397, 398, 399, 400, 407, 408, 410, 428, 429, 430, 443, 478, 491, 499, 500, 511, 514, 540, 541, 544, 546, 550, 552, 553, 557, 558, 559, 572, 579, 580, 582, 584, 585, 593, 601, 618, 619, 620, 621, 623, 624, 649, 650, 657, 659, 664, 665, 666, 667, 691, 694, 698, 699, 700, 703, 704, 706, 709, 711, 717, 719, 720, 724, 725, 728, 729, 730, 731, 732, 733, 772, 773, 774, 777, 778, 779, 782, 784, 787, 788, 790, 791, 792, 793, 801, 805, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 825, 836, 846, 857, 861, 863, 871, 874, 890, 892, 895, 941, 968, 979, 980, 981, 982, 983, 985, 986, 988, 989, 990, 992, 993, 994, 1001, 1004, 1017, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1034, 1035], "acq": 8, "chosen": [8, 20, 46, 73, 130, 151, 168, 169, 187, 199, 215, 235, 253, 254, 256, 262, 346, 356, 360, 385, 400, 402, 403, 407, 410, 431, 437, 440, 442, 444, 445, 451, 487, 514, 526, 548, 549, 550, 551, 555, 556, 638, 644, 647, 649, 650, 652, 654, 662, 667, 668, 669, 670, 671, 681, 685, 782, 785, 786, 787, 790, 791, 801, 820, 839, 890, 891, 898, 899, 900, 901, 927, 967, 970, 972, 974, 975, 977, 979, 984, 985, 992, 1008, 1009, 1011, 1012, 1028, 1036], "evenli": [8, 39, 52, 123, 202, 254, 408, 931, 1013], "care": [8, 55, 124, 360, 362, 378, 380, 385, 387, 388, 400, 402, 408, 428, 451, 460, 631, 649, 650, 657, 659, 667, 668, 669, 686, 890, 975, 993, 1002, 1036], "all_class": 8, "positive_class": [8, 703], "partial_fit_classifi": 8, "max_it": [8, 14, 17, 25, 30, 31, 72, 73, 95, 98, 115, 116, 132, 136, 138, 159, 162, 163, 168, 169, 177, 184, 190, 191, 205, 206, 207, 210, 211, 213, 219, 220, 221, 222, 238, 239, 244, 245, 246, 247, 250, 272, 289, 295, 296, 297, 307, 313, 314, 315, 320, 321, 329, 345, 346, 380, 387, 407, 412, 431, 434, 438, 439, 440, 445, 450, 452, 462, 463, 469, 473, 474, 475, 522, 523, 524, 526, 527, 528, 529, 530, 531, 534, 536, 537, 538, 539, 552, 553, 618, 629, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 663, 665, 667, 668, 669, 670, 671, 673, 674, 678, 679, 680, 681, 684, 685, 785, 786, 801, 839, 847, 848, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 968, 970, 974, 981, 982, 991, 992, 1009, 1013, 1021, 1024, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036], "nb": [8, 103, 128, 356, 827, 980], "multinomi": [8, 30, 165, 176, 213, 217, 235, 254, 268, 369, 370, 374, 405, 407, 487, 503, 514, 542, 544, 550, 552, 560, 622, 649, 650, 731, 816, 824, 825, 826, 827, 828, 829, 870, 913, 978, 979, 994, 1000, 1013, 1015, 1020, 1024, 1026, 1027, 1028, 1033, 1034], "passiv": [8, 205, 657, 658, 1000, 1015, 1021], "aggress": [8, 205, 657, 658, 790, 791, 1000, 1015, 1021], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 400, 405, 440, 525, 667, 846, 847, 848, 998, 1020], "tupl": [8, 48, 49, 55, 105, 169, 216, 367, 368, 369, 376, 387, 404, 412, 425, 442, 444, 455, 458, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 495, 496, 499, 501, 502, 503, 504, 505, 513, 524, 537, 552, 553, 558, 559, 560, 561, 573, 574, 575, 578, 579, 580, 582, 618, 623, 624, 625, 703, 710, 771, 773, 785, 787, 801, 813, 830, 831, 849, 850, 860, 861, 865, 868, 876, 880, 892, 893, 894, 895, 896, 905, 911, 912, 914, 918, 919, 920, 921, 936, 945, 962, 985, 1026, 1027, 1031, 1032, 1033], "x_text": 8, "befor": [8, 12, 25, 42, 70, 72, 75, 86, 130, 143, 157, 159, 161, 164, 165, 168, 169, 171, 179, 182, 186, 187, 191, 234, 259, 266, 281, 302, 305, 306, 308, 314, 335, 356, 360, 361, 369, 372, 374, 376, 377, 379, 380, 382, 383, 385, 387, 388, 389, 394, 398, 400, 401, 402, 404, 405, 409, 412, 413, 434, 438, 439, 440, 450, 452, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 481, 492, 525, 528, 529, 530, 531, 532, 535, 537, 538, 552, 553, 556, 558, 560, 561, 568, 579, 580, 582, 602, 618, 619, 621, 636, 641, 642, 645, 646, 647, 655, 656, 657, 658, 659, 662, 667, 669, 678, 683, 685, 785, 786, 792, 793, 805, 806, 808, 812, 814, 816, 830, 831, 838, 839, 840, 841, 842, 845, 850, 851, 854, 857, 864, 868, 869, 870, 871, 875, 876, 878, 879, 880, 881, 887, 898, 899, 927, 962, 968, 974, 975, 978, 984, 988, 992, 993, 994, 999, 1013, 1020, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "exclud": [8, 19, 167, 301, 374, 378, 387, 437, 455, 457, 719, 720, 728, 773, 774, 777, 800, 808, 865, 953, 978, 981, 1029, 1036], "invalid": [8, 198, 324, 387, 437, 569, 662, 703, 764, 974, 978, 1026, 1028, 1030, 1031, 1033, 1034, 1036], "assign": [8, 17, 20, 37, 46, 49, 57, 58, 60, 110, 115, 126, 128, 143, 152, 211, 216, 227, 232, 235, 295, 303, 308, 325, 340, 346, 369, 374, 376, 387, 397, 404, 405, 407, 408, 409, 410, 431, 432, 433, 434, 436, 437, 438, 439, 440, 443, 445, 447, 450, 451, 452, 453, 506, 527, 552, 553, 584, 585, 598, 599, 601, 649, 650, 657, 658, 659, 667, 668, 669, 695, 696, 706, 707, 708, 711, 721, 729, 733, 745, 747, 776, 781, 782, 783, 787, 790, 791, 793, 796, 801, 809, 811, 812, 813, 814, 817, 834, 840, 842, 843, 844, 857, 885, 886, 890, 891, 892, 893, 894, 895, 896, 972, 977, 978, 979, 980, 981, 982, 983, 988, 991, 1002, 1004, 1013, 1020, 1025, 1027, 1028], "format": [8, 11, 12, 19, 21, 48, 54, 58, 61, 70, 80, 95, 105, 113, 119, 122, 124, 136, 142, 143, 171, 174, 178, 184, 189, 198, 216, 254, 264, 266, 267, 270, 273, 283, 284, 287, 288, 305, 311, 339, 350, 354, 360, 367, 373, 374, 376, 377, 382, 383, 386, 387, 401, 404, 407, 408, 424, 433, 434, 436, 438, 440, 441, 443, 450, 455, 459, 473, 474, 475, 476, 478, 480, 487, 488, 489, 499, 500, 501, 514, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 542, 548, 549, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 575, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 637, 643, 649, 650, 651, 653, 657, 659, 667, 668, 669, 679, 680, 683, 688, 704, 711, 729, 730, 741, 758, 780, 819, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 877, 882, 883, 888, 890, 902, 910, 911, 932, 940, 944, 949, 952, 954, 955, 956, 957, 958, 959, 968, 978, 981, 986, 988, 989, 992, 994, 998, 1004, 1005, 1015, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1033, 1035], "islic": [8, 44, 62], "asarrai": [8, 17, 198, 216, 298, 322, 345, 346, 376, 387, 396, 576, 577, 716, 746, 838, 840, 841, 842, 988, 993, 1037], "int": [8, 10, 13, 16, 17, 19, 37, 44, 62, 81, 113, 122, 126, 138, 139, 151, 152, 153, 159, 163, 167, 179, 189, 191, 198, 216, 224, 227, 233, 237, 244, 254, 257, 258, 259, 279, 284, 286, 292, 308, 321, 347, 369, 374, 376, 385, 387, 398, 401, 404, 408, 411, 412, 415, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 473, 474, 475, 476, 479, 482, 483, 485, 486, 487, 488, 493, 494, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 598, 599, 601, 602, 608, 618, 619, 620, 621, 622, 623, 624, 625, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 691, 692, 693, 694, 695, 696, 698, 700, 704, 716, 717, 719, 720, 721, 724, 728, 746, 747, 759, 764, 768, 769, 770, 771, 772, 773, 774, 777, 779, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 879, 880, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 910, 911, 913, 914, 926, 927, 929, 930, 931, 932, 943, 947, 949, 952, 957, 958, 974, 985, 1020, 1026, 1030, 1031], "iter_minibatch": 8, "minibatch_s": [8, 362], "statist": [8, 81, 109, 110, 113, 114, 125, 136, 137, 138, 139, 142, 146, 147, 165, 167, 168, 169, 170, 182, 186, 202, 252, 256, 258, 261, 268, 275, 301, 307, 313, 356, 363, 367, 369, 371, 374, 380, 387, 398, 400, 401, 402, 404, 405, 407, 409, 425, 460, 465, 484, 485, 507, 508, 509, 511, 513, 532, 537, 550, 551, 553, 595, 596, 597, 600, 618, 621, 625, 626, 635, 640, 647, 681, 685, 687, 701, 707, 712, 713, 714, 721, 733, 778, 787, 803, 820, 847, 848, 866, 867, 868, 870, 875, 878, 879, 881, 895, 898, 899, 953, 967, 968, 972, 974, 975, 977, 978, 979, 980, 985, 988, 992, 993, 994, 995, 996, 997, 1005, 1011, 1012, 1025, 1028, 1031, 1032, 1034, 1035], "test_stat": 8, "n_test": [8, 10, 33, 113, 259, 1020, 1023], "n_test_po": 8, "hold": [8, 16, 26, 27, 198, 202, 260, 354, 367, 374, 375, 376, 398, 400, 404, 407, 408, 410, 494, 548, 552, 553, 555, 580, 623, 624, 625, 726, 787, 790, 791, 801, 826, 857, 858, 863, 864, 871, 874, 898, 900, 968, 972, 978, 982, 992, 993, 994, 1001, 1004, 1013, 1028, 1032], "n_test_docu": 8, "tick": [8, 43, 60, 153, 238, 270, 623, 814], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 61, 81, 92, 98, 105, 122, 123, 143, 147, 158, 168, 179, 185, 194, 198, 202, 213, 216, 220, 222, 268, 279, 286, 289, 315, 324, 337, 340, 345, 346, 347, 354, 371, 380, 387, 397, 398, 399, 400, 402, 403, 405, 406, 407, 408, 410, 423, 433, 434, 438, 440, 450, 455, 456, 473, 474, 475, 506, 511, 514, 522, 525, 527, 528, 532, 535, 536, 537, 540, 541, 543, 545, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 581, 582, 602, 604, 614, 616, 626, 632, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 661, 663, 664, 667, 668, 669, 670, 672, 675, 681, 685, 687, 700, 701, 710, 716, 731, 746, 748, 749, 753, 778, 818, 819, 823, 824, 833, 837, 841, 848, 849, 869, 870, 890, 891, 893, 896, 898, 899, 900, 901, 929, 953, 959, 964, 974, 978, 979, 980, 981, 993, 994, 1011, 1023, 1024, 1026, 1028, 1029, 1031], "cls_name": [8, 10], "string": [8, 27, 71, 119, 158, 216, 229, 263, 314, 347, 360, 368, 369, 374, 375, 376, 380, 387, 394, 401, 404, 407, 408, 409, 411, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 478, 480, 481, 487, 496, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 572, 573, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 608, 611, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 690, 700, 702, 710, 722, 752, 755, 761, 764, 768, 769, 770, 771, 780, 781, 785, 786, 787, 790, 791, 793, 801, 809, 813, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 908, 910, 911, 918, 919, 920, 942, 946, 962, 963, 967, 968, 978, 991, 993, 1004, 1011, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "n_train": [8, 10, 33, 113, 259, 1020, 1023], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 55, 179, 262, 360, 397, 402, 409, 499, 500, 540, 588, 618, 621, 635, 863, 867, 879, 968, 974, 1028, 1032], "mini": [8, 64, 95, 315, 362, 387, 408, 431, 433, 438, 440, 442, 444, 522, 524, 527, 528, 529, 530, 531, 533, 534, 536, 537, 982, 983, 1020, 1031, 1033], "smaller": [8, 24, 40, 46, 55, 82, 110, 155, 156, 159, 162, 183, 187, 189, 202, 231, 285, 286, 295, 301, 332, 340, 346, 374, 397, 399, 400, 402, 404, 405, 407, 409, 410, 430, 431, 437, 441, 445, 447, 505, 525, 526, 548, 549, 550, 551, 555, 556, 584, 601, 610, 624, 637, 638, 640, 641, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 663, 665, 673, 674, 683, 700, 785, 790, 791, 836, 839, 863, 864, 882, 883, 890, 898, 899, 900, 901, 927, 972, 974, 975, 977, 978, 979, 981, 982, 984, 988, 990, 992, 993, 994, 999, 1013, 1028, 1033], "bigger": [8, 40, 60, 211, 259, 298, 342, 346, 359, 361, 408, 429, 430, 499, 529, 836, 1008, 1015], "overhead": [8, 279, 361, 362, 374, 380, 383, 385, 387, 407, 432, 436, 440, 525, 822, 823, 825, 826, 827, 828, 829, 830, 831, 946, 980, 981, 1023, 1028, 1029, 1032], "partial": [8, 12, 50, 84, 87, 127, 165, 166, 172, 216, 226, 242, 313, 316, 371, 387, 389, 402, 403, 405, 407, 410, 455, 473, 474, 475, 476, 487, 492, 525, 527, 532, 553, 580, 623, 624, 648, 778, 816, 818, 819, 846, 847, 848, 851, 863, 864, 867, 870, 899, 975, 982, 992, 1013, 1015, 1017, 1021, 1028, 1029, 1033], "stream": [8, 400, 405, 408, 453, 580, 859, 860, 870, 970, 998, 1028, 1031], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 55, 75, 114, 116, 120, 123, 130, 168, 196, 200, 206, 220, 233, 234, 236, 246, 256, 262, 315, 321, 346, 367, 374, 375, 376, 383, 401, 455, 517, 552, 553, 579, 580, 582, 623, 799, 863, 885, 886, 905, 906, 932, 970, 991, 999, 1004], "updat": [8, 16, 44, 62, 110, 116, 125, 232, 311, 347, 372, 373, 374, 378, 382, 387, 400, 405, 407, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 454, 456, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 788, 789, 790, 791, 794, 796, 801, 805, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 905, 953, 974, 981, 982, 983, 992, 1001, 1002, 1021, 1027, 1028, 1029, 1031, 1033, 1035, 1036, 1037], "accumul": [8, 50, 117, 118, 187, 378, 380, 400, 408, 978, 1021, 1028], "acc_histori": 8, "run_histori": 8, "878": 8, "962": 8, "915": [8, 95, 107], "61": [8, 81, 169, 216, 368, 371, 380, 401, 532, 551, 704], "1570": 8, "855": 8, "62": [8, 169, 174, 216, 253, 298, 316, 321, 356, 369, 400, 484, 485, 830, 831, 1016, 1023], "1557": 8, "877": [8, 257], "1505": 8, "933": [8, 74, 404], "1498": 8, "3911": 8, "517": [8, 443, 453, 1011], "938": [8, 194, 775, 978, 1008], "2227": 8, "936": [8, 428, 978], "2223": 8, "885": [8, 241, 371], "2212": 8, "941": 8, "2209": 8, "6821": 8, "891": 8, "952": [8, 49], "2372": 8, "2370": 8, "900": [8, 50, 74, 75], "2364": 8, "953": [8, 49], "2362": 8, "9759": 8, "1276": 8, "949": [8, 151, 160], "00": [8, 15, 22, 28, 32, 35, 68, 76, 80, 83, 87, 93, 98, 107, 134, 140, 148, 155, 160, 164, 168, 169, 172, 175, 189, 216, 217, 225, 231, 242, 251, 257, 260, 275, 278, 293, 298, 299, 309, 318, 320, 321, 326, 343, 346, 348, 355, 368, 371, 380, 400, 407, 408, 704, 706, 778, 787, 801, 814, 899, 974, 978, 988, 990, 992, 1012], "2441": [8, 216], "2440": 8, "909": 8, "2435": 8, "958": 8, "2433": 8, "11680": 8, "1499": 8, "944": [8, 1008], "2324": 8, "956": [8, 1008], "03": [8, 12, 19, 52, 67, 68, 76, 80, 83, 85, 95, 134, 148, 155, 160, 164, 168, 179, 216, 225, 231, 242, 244, 250, 260, 293, 309, 321, 346, 371, 408, 738, 787, 974, 978], "2323": [8, 680, 684, 975], "04": [8, 15, 30, 40, 42, 54, 68, 97, 105, 134, 140, 155, 160, 168, 172, 179, 197, 216, 235, 244, 250, 259, 260, 272, 275, 292, 293, 299, 318, 339, 371, 407, 409, 462, 463, 778, 787, 801, 974, 978, 982, 992], "2319": 8, "950": [8, 37, 68], "2318": 8, "14625": 8, "1865": 8, "965": [8, 978], "2363": 8, "903": [8, 133, 134], "924": [8, 73], "2359": 8, "957": [8, 410, 718, 978], "2358": 8, "17360": [8, 1031], "2179": 8, "2400": [8, 50], "2399": 8, "932": 8, "2397": 8, "2396": 8, "curv": [8, 11, 23, 28, 37, 75, 78, 113, 115, 116, 122, 165, 176, 177, 188, 198, 216, 217, 219, 221, 224, 226, 228, 237, 238, 242, 243, 251, 252, 259, 269, 275, 296, 311, 352, 381, 395, 399, 404, 406, 428, 429, 430, 493, 501, 506, 512, 516, 555, 623, 636, 649, 689, 691, 693, 697, 698, 699, 700, 717, 719, 731, 732, 772, 774, 777, 778, 779, 785, 786, 793, 804, 809, 814, 816, 817, 828, 851, 870, 890, 895, 974, 975, 977, 978, 984, 994, 1000, 1002, 1015, 1017, 1022, 1023, 1026, 1030, 1032, 1033, 1034, 1035, 1036], "evolut": [8, 10, 271, 360, 362, 537], "cours": [8, 9, 174, 360, 374, 376, 405, 408, 409, 968, 973, 974, 1002], "valid": [8, 13, 26, 54, 55, 56, 71, 74, 78, 82, 103, 114, 116, 119, 120, 121, 122, 123, 135, 140, 141, 145, 147, 148, 158, 165, 168, 170, 176, 182, 186, 198, 200, 206, 216, 217, 234, 236, 246, 249, 252, 256, 259, 260, 261, 263, 265, 267, 268, 273, 275, 283, 298, 302, 307, 308, 311, 313, 323, 332, 340, 350, 361, 369, 374, 377, 385, 386, 387, 391, 394, 395, 398, 400, 401, 402, 405, 406, 407, 408, 409, 410, 416, 428, 433, 434, 436, 437, 438, 440, 441, 448, 454, 455, 459, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 484, 492, 493, 495, 506, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 563, 566, 568, 573, 574, 580, 584, 585, 588, 593, 623, 625, 629, 630, 631, 632, 633, 634, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 683, 692, 693, 697, 704, 718, 752, 755, 764, 768, 769, 770, 775, 780, 781, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 824, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 854, 856, 862, 870, 882, 883, 885, 886, 888, 890, 892, 895, 897, 898, 899, 900, 901, 910, 911, 914, 921, 933, 938, 968, 977, 978, 979, 982, 986, 988, 990, 992, 993, 994, 998, 999, 1002, 1004, 1007, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "consumpt": [8, 360, 525, 548, 549, 555, 556, 787, 801, 811, 812, 813, 898, 899, 900, 901, 944, 1004, 1020, 1022, 1026, 1028, 1029, 1034], "queue": [8, 981, 1023], "up": [8, 11, 37, 44, 46, 47, 48, 52, 55, 57, 62, 70, 80, 81, 89, 92, 115, 163, 169, 177, 182, 191, 199, 214, 215, 237, 246, 261, 264, 279, 292, 298, 302, 307, 315, 321, 329, 345, 347, 362, 368, 369, 374, 378, 380, 381, 382, 383, 385, 387, 388, 398, 400, 405, 407, 408, 434, 438, 439, 440, 441, 443, 447, 450, 451, 452, 499, 500, 527, 540, 541, 548, 549, 550, 551, 552, 553, 555, 556, 557, 601, 618, 623, 624, 630, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 655, 672, 673, 674, 675, 683, 696, 759, 785, 786, 789, 790, 791, 793, 814, 864, 865, 868, 880, 898, 899, 900, 901, 904, 927, 930, 931, 967, 974, 975, 978, 981, 988, 992, 993, 999, 1001, 1002, 1012, 1013, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "amount": [8, 12, 45, 53, 66, 78, 81, 95, 99, 111, 113, 156, 168, 182, 202, 216, 232, 313, 320, 323, 325, 332, 340, 347, 360, 361, 362, 385, 399, 400, 402, 405, 407, 408, 409, 434, 445, 460, 529, 530, 532, 534, 554, 587, 637, 638, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 656, 672, 675, 683, 790, 791, 830, 831, 836, 871, 886, 887, 900, 901, 973, 974, 977, 980, 982, 988, 990, 991, 992, 993, 1011, 1012, 1033], "learner": [8, 109, 111, 121, 130, 362, 548, 549, 550, 551, 555, 556, 557, 573, 580, 621, 832, 833, 838, 840, 841, 980, 983, 994, 998, 999, 1013], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 62, 86, 153, 203, 207, 209, 227, 240, 263, 287, 289, 302, 328, 330, 333, 334, 985, 1017], "set_ylim": [8, 10, 16, 31, 42, 60, 72, 92, 109, 115, 127, 128, 159, 169, 171, 178, 196, 198, 199, 232, 244, 263, 266, 274, 277, 284, 295, 301, 303, 304, 306, 312, 323, 341], "runtim": [8, 10, 58, 110, 184, 213, 215, 232, 298, 303, 361, 376, 377, 385, 387, 399, 400, 407, 441, 554, 670, 801, 890, 891, 892, 893, 894, 895, 896, 992, 993, 1023, 1027, 1028, 1034, 1035], "gcf": [8, 985], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 72, 116, 117, 120, 121, 124, 132, 143, 147, 158, 162, 169, 177, 244, 249, 258, 260, 264, 277, 306, 307, 315, 316, 346, 376, 403, 572, 623, 639, 660, 671, 978, 985, 992, 994, 1026, 1027, 1028, 1029], "width": [8, 10, 16, 45, 53, 80, 90, 97, 98, 104, 105, 106, 113, 119, 120, 123, 132, 143, 152, 158, 181, 241, 244, 258, 301, 303, 304, 307, 313, 316, 329, 371, 401, 429, 430, 443, 455, 484, 485, 497, 512, 577, 855, 903, 988, 992, 994, 1010, 1011, 1028], "set_xticklabel": [8, 10, 80, 106, 132, 153, 169, 171, 270, 271, 277], "ymax": [8, 10, 11, 78, 185, 187, 190, 191, 199, 207, 259, 292], "set_titl": [8, 10, 14, 25, 27, 31, 32, 42, 43, 45, 53, 55, 57, 60, 64, 65, 72, 75, 80, 90, 92, 100, 106, 110, 115, 117, 126, 128, 130, 131, 159, 162, 163, 167, 168, 169, 170, 177, 178, 187, 189, 196, 198, 199, 200, 206, 219, 220, 223, 224, 230, 232, 233, 237, 238, 244, 253, 254, 255, 256, 259, 261, 262, 266, 270, 271, 274, 277, 279, 283, 284, 289, 295, 296, 301, 302, 303, 304, 305, 306, 311, 315, 320, 321, 329, 340, 341, 342, 345, 350], "autolabel": [8, 121], "attach": [8, 121, 345, 425, 835, 1021, 1031], "rect": [8, 52, 121, 177], "height": [8, 14, 53, 98, 120, 147, 171, 301, 307, 345, 406, 437, 484, 485, 497, 577], "get_height": [8, 121], "get_x": [8, 121], "get_width": [8, 121], "va": [8, 121, 270, 287, 289, 339], "setp": [8, 10, 270, 273], "rotat": [8, 40, 94, 97, 100, 107, 122, 132, 165, 171, 222, 270, 271, 277, 332, 339, 403, 405, 410, 412, 495, 523, 532, 541, 605, 688, 870, 902, 974, 1031, 1032], "read": [8, 17, 95, 219, 266, 311, 312, 313, 315, 317, 360, 368, 372, 375, 376, 377, 378, 379, 381, 382, 385, 386, 387, 400, 411, 412, 413, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 450, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 604, 605, 606, 607, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 923, 967, 974, 978, 979, 998, 1002, 1013, 1021, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033], "feat": [8, 10, 378, 408], "extr": 8, "hash": [8, 108, 134, 165, 346, 347, 360, 362, 366, 374, 377, 385, 407, 505, 535, 548, 557, 572, 573, 580, 631, 825, 943, 970, 1013, 1015, 1021, 1024, 1027], "vect": [8, 70, 260, 324, 408, 1013], "173": [8, 15, 118, 134, 380, 575], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 56, 57, 70, 71, 74, 75, 78, 80, 86, 92, 97, 101, 109, 110, 113, 118, 121, 125, 127, 129, 130, 142, 147, 149, 150, 151, 152, 155, 156, 157, 158, 160, 165, 167, 169, 170, 174, 187, 194, 195, 198, 200, 202, 206, 212, 215, 216, 219, 220, 222, 224, 227, 229, 230, 232, 233, 234, 236, 259, 266, 271, 272, 280, 293, 306, 310, 311, 313, 323, 332, 333, 337, 338, 340, 341, 346, 347, 353, 356, 360, 371, 374, 379, 382, 386, 403, 405, 407, 408, 506, 601, 602, 604, 605, 606, 610, 613, 614, 839, 967, 974, 978, 981, 984, 990, 991, 992, 993, 1002, 1004], "robust": [9, 61, 63, 77, 83, 123, 163, 165, 168, 169, 176, 200, 202, 215, 217, 227, 301, 317, 362, 371, 376, 382, 400, 407, 408, 437, 439, 460, 461, 464, 465, 466, 467, 515, 525, 550, 551, 640, 648, 661, 662, 669, 670, 740, 820, 851, 865, 867, 868, 879, 885, 925, 978, 982, 984, 988, 991, 992, 998, 1000, 1002, 1014, 1015, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1036], "covari": [9, 12, 29, 33, 35, 79, 83, 85, 103, 106, 126, 150, 157, 227, 243, 245, 248, 249, 250, 251, 363, 383, 387, 400, 403, 405, 410, 473, 474, 475, 476, 495, 506, 510, 518, 523, 525, 532, 537, 539, 540, 541, 554, 601, 602, 604, 613, 614, 635, 636, 641, 645, 647, 673, 674, 677, 680, 684, 785, 786, 787, 806, 977, 984, 988, 1000, 1014, 1015, 1020, 1022, 1023, 1024, 1025, 1027, 1029], "wine": [9, 240, 306, 307, 367, 501, 1015], "tool": [9, 11, 168, 234, 257, 262, 356, 367, 368, 369, 372, 374, 376, 377, 378, 379, 380, 381, 382, 386, 387, 388, 389, 390, 394, 399, 400, 401, 402, 478, 683, 692, 967, 973, 974, 978, 984, 988, 993, 995, 998, 999, 1002, 1004, 1013, 1027, 1030, 1033, 1034, 1035], "purpos": [9, 12, 16, 37, 86, 162, 212, 213, 214, 219, 221, 235, 247, 249, 255, 256, 332, 333, 345, 346, 356, 369, 374, 376, 386, 387, 388, 390, 393, 397, 400, 401, 405, 407, 408, 409, 410, 537, 629, 812, 813, 850, 975, 978, 979, 981, 984, 996, 998, 1004, 1032, 1034], "awar": [9, 14, 109, 144, 159, 329, 345, 372, 374, 376, 385, 388, 404, 408, 558, 559, 639, 645, 646, 647, 649, 650, 660, 671, 836, 865, 984, 988, 994, 1017, 1020, 1021, 1034], "thing": [9, 220, 254, 345, 361, 362, 369, 373, 374, 376, 385, 400, 402, 408, 550, 551, 974, 988, 1002, 1026], "trivial": [9, 200, 350, 374, 400, 805, 892, 895, 975, 999, 1020], "dimens": [9, 12, 14, 37, 40, 53, 82, 85, 90, 95, 152, 154, 156, 158, 169, 181, 182, 196, 221, 223, 227, 231, 232, 238, 245, 246, 283, 284, 288, 304, 345, 346, 347, 369, 371, 375, 387, 399, 400, 405, 406, 410, 412, 433, 434, 436, 438, 439, 440, 443, 455, 456, 473, 474, 475, 484, 485, 506, 515, 516, 520, 521, 524, 532, 540, 573, 574, 575, 576, 578, 580, 588, 602, 610, 613, 632, 635, 650, 681, 682, 683, 685, 686, 754, 811, 830, 831, 835, 849, 882, 883, 884, 892, 893, 894, 895, 896, 910, 911, 912, 941, 949, 952, 968, 970, 972, 974, 975, 976, 979, 981, 982, 984, 990, 993, 1004, 1011, 1012, 1027, 1029, 1030, 1032], "below": [9, 25, 26, 27, 32, 55, 60, 70, 75, 80, 89, 90, 95, 114, 117, 118, 123, 142, 167, 169, 181, 194, 195, 198, 200, 214, 215, 220, 224, 229, 239, 241, 254, 257, 262, 264, 265, 266, 301, 305, 311, 312, 313, 314, 315, 316, 317, 336, 337, 345, 354, 356, 361, 367, 368, 372, 374, 376, 378, 379, 383, 387, 388, 390, 400, 402, 403, 404, 405, 407, 408, 409, 410, 437, 439, 462, 463, 469, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 495, 496, 501, 522, 528, 533, 539, 573, 586, 587, 588, 589, 590, 591, 624, 637, 643, 649, 650, 658, 664, 666, 683, 696, 733, 753, 785, 786, 787, 798, 801, 819, 850, 853, 863, 864, 867, 873, 879, 967, 968, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 992, 993, 994, 995, 998, 1006, 1013, 1016, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "main": [9, 16, 32, 62, 86, 99, 120, 165, 227, 268, 310, 340, 345, 360, 361, 362, 367, 372, 374, 376, 378, 380, 382, 385, 386, 387, 389, 390, 398, 399, 400, 405, 407, 408, 410, 494, 516, 521, 540, 541, 616, 704, 820, 967, 975, 977, 978, 985, 990, 999, 1001, 1010, 1013, 1020, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "empir": [9, 24, 25, 36, 68, 77, 80, 82, 83, 165, 216, 265, 301, 398, 404, 407, 410, 438, 440, 451, 460, 461, 462, 465, 468, 469, 523, 525, 530, 532, 534, 540, 542, 556, 581, 594, 630, 640, 658, 662, 669, 670, 707, 712, 713, 714, 815, 825, 826, 827, 829, 848, 871, 913, 952, 970, 972, 978, 980, 982, 988, 990, 992, 1014, 1015], "heterogen": [9, 24, 55, 69, 71, 76, 165, 169, 198, 241, 306, 311, 366, 368, 385, 455, 479, 535, 572, 582, 704, 850, 854, 890, 975, 985, 988, 998, 1015, 1024, 1028, 1030, 1031], "mode": [9, 10, 46, 47, 80, 198, 227, 279, 281, 298, 311, 374, 377, 382, 383, 385, 397, 403, 407, 411, 434, 435, 438, 440, 443, 450, 453, 462, 463, 469, 473, 478, 499, 500, 548, 552, 555, 583, 586, 587, 589, 590, 591, 601, 618, 635, 636, 649, 650, 657, 659, 664, 665, 666, 667, 670, 673, 674, 680, 684, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 846, 890, 892, 895, 898, 900, 916, 926, 927, 929, 981, 984, 998, 1004, 1005, 1012, 1021, 1029, 1034], "stick": [9, 785, 977], "bias": [9, 27, 82, 98, 123, 129, 167, 168, 170, 264, 369, 389, 398, 407, 515, 540, 846, 870, 881, 973, 977, 986, 992, 994], "yet": [9, 57, 182, 216, 249, 260, 347, 362, 369, 373, 378, 385, 389, 390, 391, 404, 405, 407, 408, 410, 439, 443, 452, 453, 568, 768, 962, 967, 974, 978, 984, 992, 999, 1029], "extent": [9, 30, 58, 152, 153, 154, 231, 338, 341, 431, 526, 687, 785, 978], "assum": [9, 55, 57, 157, 163, 167, 168, 187, 198, 216, 227, 230, 237, 250, 259, 268, 301, 347, 361, 373, 374, 376, 378, 380, 385, 386, 387, 389, 394, 397, 398, 400, 402, 404, 405, 407, 408, 410, 411, 416, 421, 428, 430, 435, 437, 441, 448, 454, 460, 461, 462, 463, 464, 465, 466, 467, 494, 499, 500, 523, 533, 539, 540, 552, 553, 558, 559, 578, 579, 580, 582, 611, 623, 634, 635, 637, 638, 643, 649, 650, 651, 652, 653, 657, 658, 659, 662, 663, 667, 668, 669, 672, 676, 678, 679, 683, 700, 716, 725, 731, 746, 754, 759, 764, 768, 771, 787, 790, 791, 801, 826, 832, 833, 836, 837, 838, 840, 841, 846, 857, 870, 938, 954, 955, 956, 968, 972, 974, 976, 977, 978, 980, 981, 983, 984, 985, 988, 992, 993, 994, 1026, 1032], "parametr": [9, 24, 25, 82, 230, 283, 305, 314, 398, 401, 406, 407, 428, 542, 544, 626, 676, 687, 866, 878, 921, 922, 974, 977, 980, 981, 988, 991, 994, 1028, 1030, 1033], "therefor": [9, 13, 20, 24, 37, 52, 53, 71, 72, 75, 80, 86, 100, 105, 110, 113, 115, 123, 128, 130, 146, 167, 170, 198, 202, 214, 215, 244, 249, 250, 260, 262, 297, 301, 306, 320, 332, 341, 345, 346, 354, 360, 368, 372, 379, 385, 391, 400, 401, 402, 404, 405, 407, 408, 428, 487, 526, 540, 542, 544, 545, 550, 551, 555, 556, 595, 597, 649, 650, 656, 659, 662, 667, 669, 670, 692, 703, 725, 747, 785, 850, 851, 863, 867, 871, 879, 890, 891, 968, 972, 974, 975, 978, 980, 981, 982, 983, 986, 988, 993, 994, 999, 1004, 1011, 1012, 1013, 1029, 1030, 1033, 1034, 1035, 1036], "minimum": [9, 55, 57, 80, 123, 124, 146, 187, 208, 231, 269, 285, 286, 376, 383, 390, 393, 397, 400, 407, 408, 432, 436, 437, 441, 445, 447, 460, 461, 464, 465, 466, 467, 502, 504, 532, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 585, 618, 622, 623, 626, 628, 659, 662, 667, 669, 670, 673, 674, 683, 696, 715, 769, 770, 790, 791, 811, 826, 847, 848, 859, 860, 863, 864, 865, 869, 883, 884, 897, 898, 899, 900, 901, 907, 910, 911, 914, 930, 975, 978, 982, 984, 988, 990, 994, 1020, 1023, 1027, 1028, 1032, 1033], "determin": [9, 11, 13, 19, 46, 55, 80, 110, 112, 116, 155, 168, 177, 178, 194, 201, 259, 301, 306, 347, 354, 356, 373, 374, 376, 383, 386, 387, 397, 398, 400, 404, 405, 407, 408, 409, 410, 423, 428, 432, 433, 434, 436, 438, 440, 441, 447, 450, 451, 452, 456, 460, 461, 463, 464, 465, 466, 467, 473, 474, 475, 479, 482, 483, 486, 488, 494, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 528, 530, 533, 534, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 556, 558, 559, 561, 573, 574, 575, 579, 582, 585, 593, 598, 599, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 618, 626, 627, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 665, 666, 667, 669, 670, 671, 678, 680, 681, 683, 684, 685, 698, 702, 713, 719, 720, 728, 773, 774, 775, 777, 778, 781, 787, 789, 790, 791, 793, 801, 809, 810, 811, 812, 813, 814, 815, 817, 821, 823, 824, 826, 833, 835, 836, 841, 846, 847, 848, 854, 855, 863, 864, 865, 867, 871, 879, 890, 891, 893, 896, 899, 901, 904, 925, 941, 947, 949, 952, 967, 970, 972, 977, 981, 983, 984, 988, 991, 992, 994, 1004, 1020, 1025, 1028, 1029, 1031, 1032, 1033], "concentr": [9, 100, 110, 128, 155, 165, 224, 243, 250, 251, 303, 322, 370, 374, 407, 410, 434, 510, 785, 977, 984], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 57, 59, 61, 62, 68, 80, 91, 102, 112, 119, 126, 171, 224, 244, 245, 246, 247, 260, 285, 286, 288, 304, 312, 316, 334, 344, 345, 347, 348, 362, 363, 367, 369, 371, 374, 376, 379, 385, 387, 395, 406, 408, 414, 415, 418, 479, 493, 494, 495, 502, 503, 504, 505, 506, 513, 521, 532, 535, 555, 557, 580, 581, 582, 622, 682, 683, 686, 695, 696, 701, 708, 710, 715, 721, 726, 727, 745, 747, 768, 769, 776, 780, 781, 783, 785, 786, 842, 843, 851, 855, 862, 870, 919, 921, 939, 946, 962, 968, 975, 977, 981, 984, 986, 988, 991, 995, 998, 999, 1002, 1004, 1007, 1010, 1013, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "outli": [9, 80, 387, 460, 465, 974, 984], "skew": [9, 123, 201, 231, 301, 317, 366, 404, 630, 631, 632, 633, 866, 878, 974, 988, 1015, 1023, 1027, 1036], "Of": [9, 25, 27, 162, 360, 376, 400, 408, 968], "screen": [9, 1033], "presenc": [9, 60, 62, 80, 81, 167, 182, 202, 301, 372, 375, 387, 402, 405, 703, 716, 746, 759, 819, 853, 861, 863, 962, 968, 974, 978, 979, 992, 1023, 1024, 1026, 1030, 1032, 1034], "mixtur": [9, 44, 55, 57, 246, 247, 251, 363, 369, 370, 387, 400, 405, 406, 410, 614, 787, 998, 999, 1014, 1015, 1020, 1024, 1025, 1026, 1027], "univari": [9, 36, 68, 72, 74, 141, 142, 148, 165, 213, 327, 343, 366, 399, 400, 401, 408, 436, 495, 516, 521, 583, 586, 587, 589, 590, 591, 593, 596, 597, 598, 599, 600, 618, 619, 620, 621, 636, 787, 792, 812, 816, 850, 851, 860, 865, 869, 870, 890, 895, 974, 993, 995, 1000, 1012, 1015, 1020, 1026], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 56, 58, 62, 71, 73, 75, 86, 95, 96, 102, 104, 106, 115, 116, 123, 143, 150, 168, 170, 182, 187, 202, 203, 212, 219, 220, 221, 227, 232, 234, 259, 260, 262, 271, 277, 288, 301, 305, 306, 312, 332, 347, 354, 356, 360, 366, 374, 376, 382, 385, 386, 387, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 409, 410, 412, 431, 437, 443, 453, 455, 456, 458, 460, 465, 473, 474, 475, 476, 499, 500, 507, 508, 509, 515, 522, 523, 524, 525, 526, 528, 530, 532, 533, 534, 539, 540, 541, 544, 545, 548, 549, 550, 551, 555, 556, 557, 579, 580, 581, 582, 618, 623, 624, 629, 630, 632, 633, 649, 650, 659, 667, 668, 669, 682, 690, 692, 698, 716, 746, 748, 749, 771, 778, 780, 781, 787, 801, 816, 819, 825, 826, 827, 828, 829, 839, 849, 850, 859, 866, 867, 870, 875, 876, 878, 879, 880, 881, 886, 897, 898, 899, 900, 901, 910, 916, 919, 926, 927, 950, 968, 970, 974, 975, 976, 977, 978, 980, 982, 984, 988, 992, 993, 994, 995, 997, 1002, 1021, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1034], "font_manag": [9, 81, 285, 331], "ellipticenvelop": [9, 227, 461, 464, 465, 466, 467, 554, 984, 1020, 1023, 1027, 1028, 1033], "load_win": [9, 240, 306, 834, 842, 1017, 1031], "oneclasssvm": [9, 11, 16, 212, 227, 314, 331, 554, 668, 836, 984, 992, 993, 1022, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035], "support_fract": [9, 460, 465], "contamin": [9, 80, 81, 227, 237, 285, 286, 460, 554, 836, 984, 1028, 1036], "ocsvm": [9, 212], "legend1": 9, "legend2": 9, "x1": [9, 12, 16, 34, 85, 91, 112, 122, 153, 210, 222, 237, 301, 329, 376, 387, 421, 455, 500, 558, 559, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 853, 854, 855, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 1012], "frontier": [9, 212, 285, 331, 984, 1011], "xx1": [9, 112, 622], "yy1": 9, "meshgrid": [9, 11, 16, 26, 30, 34, 42, 58, 80, 119, 128, 151, 152, 153, 154, 156, 169, 209, 210, 211, 212, 224, 227, 248, 285, 292, 295, 303, 304, 325, 331, 332, 337, 338, 341, 342, 622], "500": [9, 10, 44, 50, 57, 60, 61, 63, 79, 83, 85, 86, 103, 105, 114, 116, 124, 146, 150, 174, 211, 212, 220, 238, 239, 244, 245, 249, 259, 262, 272, 279, 285, 291, 305, 312, 317, 331, 338, 342, 360, 407, 460, 461, 465, 466, 467, 473, 474, 475, 602, 604, 605, 607, 612, 615, 616, 641, 642, 645, 646, 647, 671, 673, 674, 848, 967, 993], "clf_name": [9, 10, 345], "z1": 9, "decision_funct": [9, 11, 16, 25, 27, 56, 112, 126, 139, 210, 211, 212, 228, 234, 237, 266, 285, 286, 295, 303, 330, 331, 332, 336, 337, 338, 342, 376, 387, 398, 407, 428, 460, 540, 541, 544, 546, 550, 552, 554, 558, 584, 585, 622, 623, 624, 649, 650, 657, 659, 665, 666, 667, 668, 689, 691, 693, 698, 711, 716, 717, 725, 729, 730, 732, 746, 772, 778, 779, 782, 787, 790, 791, 801, 811, 818, 819, 820, 821, 836, 850, 857, 887, 890, 892, 894, 895, 974, 978, 984, 985, 992, 993, 1011, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033], "c_": [9, 11, 16, 25, 26, 27, 30, 34, 58, 80, 96, 101, 119, 122, 127, 128, 137, 139, 152, 196, 211, 212, 214, 227, 237, 285, 304, 306, 325, 331, 332, 336, 338, 341, 342, 400, 650, 705, 706, 709, 978, 1008, 1011, 1012], "contour": [9, 11, 16, 34, 46, 47, 80, 119, 139, 153, 154, 156, 209, 210, 211, 212, 227, 232, 248, 285, 292, 330, 331, 333, 334, 336, 337, 338, 371, 381, 622, 623, 984, 992], "linewidth": [9, 24, 33, 34, 37, 40, 58, 73, 78, 86, 92, 111, 123, 127, 150, 154, 158, 187, 188, 192, 193, 194, 196, 199, 201, 204, 212, 215, 227, 235, 237, 268, 272, 285, 289, 302, 312, 330, 331, 333, 338, 352, 1009], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 43, 85, 94, 101, 107, 165, 382, 405, 524, 532, 683, 978, 997, 998, 1012], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 70, 73, 74, 102, 116, 123, 125, 196, 204, 227, 236, 246, 257, 258, 260, 263, 266, 268, 279, 283, 303, 307, 315, 324, 332, 346, 347, 362, 366, 368, 376, 385, 387, 401, 404, 411, 412, 414, 418, 422, 424, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 487, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 688, 689, 691, 692, 693, 704, 752, 755, 761, 769, 770, 785, 786, 787, 790, 791, 793, 798, 799, 801, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 905, 915, 916, 932, 938, 967, 978, 988, 1008, 1009, 1013, 1015, 1020, 1026, 1027], "boxstyl": [9, 303], "fc": [9, 284, 369], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 266, 292, 337, 390, 637, 638, 641, 642, 643, 644, 645, 646, 651, 652, 653, 654, 655, 672, 673, 674, 675, 677], "xycoord": [9, 26], "textcoord": [9, 174], "xytext": [9, 26, 174], "bbox": [9, 12, 34, 45, 102, 244, 245, 246, 249, 250, 303], "arrowprop": [9, 26], "xlim": [9, 12, 26, 34, 44, 58, 62, 73, 78, 79, 80, 90, 97, 112, 113, 114, 129, 136, 151, 152, 168, 177, 188, 190, 197, 204, 207, 212, 227, 235, 245, 250, 254, 269, 273, 285, 286, 331, 336, 337, 341, 353], "ylim": [9, 12, 24, 26, 33, 34, 37, 44, 58, 62, 78, 79, 80, 90, 97, 112, 113, 120, 121, 123, 129, 132, 137, 151, 152, 168, 185, 187, 188, 190, 191, 192, 204, 207, 208, 212, 227, 235, 245, 250, 254, 258, 262, 269, 272, 273, 285, 286, 331, 336, 337, 341, 345, 353], "prop": [9, 73, 81, 204, 246, 285, 331, 354, 391, 938, 1009], "fontproperti": [9, 81, 285, 331], "ash": [9, 371, 1023, 1026], "malic_acid": 9, "abil": [9, 61, 80, 123, 156, 162, 167, 168, 170, 198, 202, 216, 227, 345, 362, 390, 407, 408, 772, 773, 774, 777, 975, 978, 981, 984, 994, 999, 1020, 1022, 1027, 1029, 1033, 1034], "locat": [9, 25, 53, 54, 72, 80, 81, 192, 292, 313, 332, 367, 372, 374, 378, 379, 382, 383, 390, 400, 402, 406, 439, 451, 452, 460, 461, 462, 463, 464, 465, 466, 467, 479, 491, 492, 495, 496, 503, 506, 963, 968, 974, 979, 984, 988, 994, 1028], "hard": [9, 198, 227, 231, 259, 261, 362, 373, 385, 387, 400, 405, 408, 525, 532, 560, 667, 892, 893, 894, 895, 896, 974, 991, 993, 994, 999, 1011, 1012, 1013, 1029, 1030], "due": [9, 26, 27, 53, 55, 60, 75, 110, 113, 150, 168, 169, 177, 182, 189, 196, 198, 200, 215, 216, 231, 245, 267, 268, 279, 306, 307, 345, 346, 347, 372, 374, 380, 387, 390, 398, 400, 404, 405, 407, 410, 434, 437, 438, 450, 526, 530, 534, 535, 565, 662, 787, 790, 791, 795, 797, 801, 811, 812, 815, 818, 822, 823, 855, 859, 860, 870, 968, 974, 975, 977, 978, 979, 981, 985, 992, 999, 1012, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "banana": [9, 978], "anywai": [9, 345, 376, 656, 676, 677], "rid": [9, 992], "difficulti": [9, 27, 216, 301, 362, 374, 398, 847, 848, 977, 981], "bandwidth": [9, 44, 63, 233, 283, 284, 292, 385, 387, 400, 406, 439, 449, 452, 830, 831, 835, 971, 984, 998, 1031, 1035], "compromis": [9, 169, 360, 374, 638, 670, 981, 1023], "risk": [9, 55, 198, 202, 216, 302, 340, 356, 373, 374, 387, 399, 404, 407, 558, 559, 875, 876, 878, 879, 880, 881, 974, 978, 1002, 1027], "x2": [9, 16, 85, 91, 112, 122, 153, 210, 237, 376, 401, 579, 620, 1012], "xx2": 9, "yy2": 9, "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 371], "278": [9, 15, 371, 830, 831], "plot_outlier_detection_win": [9, 15], "goal": [10, 17, 20, 52, 57, 86, 162, 169, 174, 198, 213, 216, 236, 237, 256, 257, 345, 361, 362, 369, 376, 379, 380, 387, 388, 389, 405, 409, 533, 539, 581, 584, 729, 978, 981, 983, 984, 992, 993, 994, 996, 1002, 1004, 1007, 1011, 1013, 1028], "boxplot": [10, 80, 124, 168, 171, 311], "gc": 10, "defaultdict": [10, 19, 25, 171, 262, 346, 347], "make_regress": [10, 75, 177, 179, 180, 184, 201, 202, 272, 312, 356, 370, 376, 377, 386, 545, 547, 551, 556, 626, 637, 638, 640, 642, 644, 646, 654, 655, 656, 658, 662, 670, 848, 891, 978, 979, 981], "randomforestregressor": [10, 116, 129, 130, 133, 162, 163, 313, 386, 407, 548, 549, 551, 553, 557, 559, 561, 623, 624, 900, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037], "sgdregressor": [10, 209, 360, 362, 385, 399, 637, 640, 658, 662, 667, 670, 848, 891, 896, 974, 992, 1022, 1024, 1026, 1027, 1028, 1031, 1033, 1034, 1035, 1036], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 60, 61, 95, 109, 116, 117, 119, 130, 163, 182, 206, 207, 212, 227, 260, 264, 265, 272, 279, 308, 320, 321, 322, 323, 334, 345, 346, 356, 369, 383, 387, 395, 460, 465, 479, 480, 482, 483, 486, 488, 494, 502, 503, 504, 505, 506, 510, 513, 515, 522, 528, 530, 531, 537, 538, 544, 545, 546, 547, 555, 556, 558, 559, 593, 649, 650, 657, 658, 659, 663, 665, 667, 668, 669, 678, 787, 789, 790, 791, 792, 793, 801, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 820, 847, 848, 871, 890, 891, 892, 895, 926, 927, 947, 949, 973, 974, 979, 986, 992, 993, 1008, 1013, 1015, 1020, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 64, 70, 72, 74, 130, 185, 260, 297, 298, 301, 314, 324, 345, 372, 378, 387, 394, 431, 434, 438, 440, 443, 445, 450, 453, 455, 458, 462, 463, 469, 522, 527, 528, 529, 530, 531, 534, 536, 537, 538, 539, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 584, 585, 618, 623, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 681, 683, 685, 755, 768, 785, 786, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 819, 821, 824, 839, 846, 847, 848, 849, 850, 851, 852, 887, 890, 891, 892, 893, 894, 895, 896, 944, 999, 1022, 1023, 1025, 1027, 1028, 1029, 1031, 1032, 1034, 1035], "n_instanc": [10, 624], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 79, 81, 82, 95, 98, 100, 109, 112, 113, 122, 124, 125, 129, 144, 163, 177, 182, 184, 189, 191, 192, 197, 198, 199, 202, 203, 204, 208, 213, 216, 231, 234, 235, 244, 248, 250, 256, 259, 264, 268, 269, 284, 301, 312, 313, 340, 346, 347, 350, 354, 360, 361, 369, 376, 380, 387, 398, 399, 400, 402, 405, 407, 408, 409, 410, 413, 437, 443, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 478, 488, 499, 500, 514, 517, 518, 522, 523, 526, 528, 529, 530, 531, 533, 534, 538, 539, 543, 548, 549, 550, 551, 552, 553, 555, 556, 557, 572, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 602, 627, 630, 634, 635, 636, 641, 649, 650, 655, 656, 657, 659, 662, 667, 668, 669, 676, 677, 694, 700, 703, 704, 706, 707, 715, 719, 720, 724, 728, 730, 736, 773, 774, 775, 777, 784, 785, 802, 803, 806, 807, 819, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 853, 860, 862, 863, 865, 866, 867, 869, 870, 876, 877, 878, 879, 883, 890, 898, 899, 900, 901, 925, 964, 968, 974, 976, 977, 980, 981, 982, 988, 989, 990, 992, 993, 994, 1004, 1011, 1013, 1020, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "atomic_benchmark": 10, "percentil": [10, 71, 123, 241, 301, 360, 583, 586, 587, 589, 590, 591, 594, 597, 623, 624, 738, 988, 1025, 1033], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 74, 121, 133, 163, 199, 237, 256, 263, 332, 350, 360, 372, 374, 385, 386, 401, 403, 407, 410, 440, 474, 529, 546, 547, 548, 549, 554, 555, 556, 557, 561, 676, 677, 787, 790, 791, 801, 814, 825, 826, 827, 828, 829, 967, 978, 988, 1013, 1028, 1030], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 66, 79, 81, 122, 147, 150, 156, 157, 169, 174, 200, 254, 259, 260, 271, 321, 340, 346, 347, 376, 383, 387, 388, 397, 398, 399, 400, 405, 408, 409, 410, 579, 584, 598, 599, 606, 618, 625, 650, 792, 802, 803, 806, 916, 968, 977, 1015, 1028, 1030], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 58, 64, 100, 112, 114, 119, 123, 139, 154, 158, 178, 181, 190, 207, 210, 216, 231, 254, 259, 266, 268, 325, 328, 330, 332, 333, 334, 336, 338, 346, 351, 369, 385, 387, 397, 398, 401, 404, 408, 410, 428, 431, 432, 436, 441, 448, 454, 462, 463, 469, 484, 499, 500, 573, 583, 586, 587, 589, 590, 591, 601, 604, 605, 606, 608, 610, 611, 613, 614, 616, 618, 623, 624, 634, 683, 691, 696, 697, 698, 706, 721, 730, 748, 749, 753, 756, 759, 760, 761, 762, 763, 764, 766, 768, 769, 770, 771, 772, 776, 818, 830, 831, 905, 978, 979, 980, 981, 988, 994, 1020, 1032, 1033, 1035, 1036], "contain": [10, 19, 24, 27, 33, 40, 49, 56, 58, 70, 71, 112, 114, 118, 126, 156, 168, 169, 171, 174, 189, 202, 216, 227, 234, 237, 238, 241, 249, 257, 259, 265, 268, 269, 277, 285, 286, 288, 301, 314, 321, 324, 345, 346, 367, 368, 369, 371, 374, 376, 378, 379, 380, 381, 382, 383, 386, 387, 394, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 412, 414, 424, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 453, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 487, 491, 493, 494, 495, 499, 500, 501, 505, 506, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 677, 679, 680, 681, 682, 683, 687, 688, 689, 691, 692, 693, 700, 703, 725, 726, 727, 758, 762, 769, 770, 778, 782, 785, 786, 787, 790, 791, 793, 801, 805, 806, 809, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 930, 931, 933, 934, 941, 945, 947, 967, 968, 970, 976, 979, 982, 984, 988, 989, 991, 994, 1004, 1013, 1020, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "generate_dataset": 10, "coef": [10, 54, 105, 167, 168, 177, 182, 185, 189, 190, 192, 197, 201, 202, 203, 207, 214, 241, 272, 297, 317, 341, 515, 637, 638, 640, 643, 644, 650, 651, 652, 653, 654, 660, 663, 665, 671, 672, 673, 674, 675, 676, 677, 678, 982], "random_se": [10, 92, 119], "x_scaler": 10, "y_scaler": 10, "ok": [10, 374, 984], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 292, 324, 360, 698, 704, 719, 720, 728, 773, 774, 777, 778, 978, 1020, 1028, 1029, 1035], "bp": [10, 124, 147, 186, 187, 371, 986], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "red": [10, 11, 26, 33, 34, 60, 80, 92, 95, 96, 97, 113, 130, 133, 159, 174, 177, 178, 188, 196, 224, 238, 254, 265, 292, 296, 302, 306, 307, 322, 332, 353, 372, 387, 400, 405, 979], "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 55, 58, 59, 60, 63, 64, 85, 91, 92, 97, 101, 116, 129, 157, 158, 174, 186, 191, 193, 195, 196, 198, 200, 201, 213, 215, 220, 244, 246, 247, 254, 259, 261, 262, 263, 286, 301, 306, 322, 350, 374, 378, 408, 1028, 1030, 1031, 1036], "linestyl": [10, 11, 16, 33, 60, 73, 80, 103, 105, 110, 122, 132, 136, 139, 150, 153, 155, 157, 159, 170, 183, 185, 186, 187, 198, 199, 200, 204, 208, 210, 211, 216, 235, 237, 256, 258, 262, 263, 268, 284, 292, 296, 302, 330, 333, 334, 336, 337, 338, 1009], "major": [10, 14, 116, 266, 301, 305, 311, 312, 313, 314, 315, 316, 317, 347, 360, 369, 373, 374, 377, 380, 385, 388, 400, 404, 406, 408, 410, 542, 560, 561, 685, 719, 720, 728, 773, 774, 777, 902, 904, 978, 981, 992, 999, 1002, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25, 793, 809], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 206, 381, 429, 567, 689, 691, 693, 909], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 655, 676, 677, 974, 978], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 206, 221, 224, 279], "1e2": [10, 150, 157, 233, 250, 332, 736], "randomforest": [10, 119, 360, 407, 898, 899, 1025], "0001": [10, 206, 257, 376, 412, 434, 438, 450, 462, 463, 469, 524, 529, 531, 538, 540, 541, 550, 551, 637, 638, 639, 640, 643, 644, 649, 650, 651, 652, 653, 654, 659, 660, 663, 665, 667, 669, 671, 678, 680, 684, 847, 848, 890, 891, 967], "481": [10, 15, 159, 283, 293], "plot_prediction_lat": [10, 15], "conserv": [11, 573, 580, 882, 883, 977, 990], "biologi": 11, "south": [11, 168, 292, 406], "american": [11, 12, 70, 81, 369, 400, 402, 406, 407, 408, 460, 465, 721, 870], "mammal": 11, "past": [11, 378, 379, 382, 385, 388, 404, 405, 407, 529, 546, 547, 669, 1002, 1005, 1036], "environment": [11, 182, 216], "unsuccess": 11, "cast": [11, 53, 198, 220, 368, 387, 388, 408, 487, 635, 636, 637, 643, 647, 648, 651, 652, 653, 654, 655, 656, 664, 666, 943, 1027, 1028, 1029, 1030, 1033, 1035], "densiti": [11, 49, 55, 60, 65, 75, 101, 105, 147, 165, 184, 198, 213, 216, 223, 227, 231, 243, 250, 251, 259, 265, 280, 285, 286, 293, 301, 332, 345, 371, 383, 387, 400, 407, 411, 419, 435, 437, 439, 441, 443, 455, 458, 489, 493, 527, 532, 540, 541, 785, 786, 787, 830, 831, 835, 836, 883, 972, 974, 977, 981, 983, 984, 990, 998, 1000, 1004, 1014, 1015, 1022, 1024, 1028, 1029, 1035, 1036], "phillip": [11, 292, 489], "2006": [11, 292, 407, 410, 453, 489, 548, 549, 556, 557, 601, 602, 605, 610, 613, 640, 657, 658, 731, 778, 779, 785, 825, 883, 900, 901, 974, 978, 980, 983, 990, 991], "basemap": [11, 292], "coast": [11, 292], "line": [11, 17, 40, 43, 60, 70, 95, 100, 110, 116, 122, 149, 160, 162, 163, 165, 168, 169, 186, 187, 188, 190, 193, 194, 196, 199, 200, 201, 206, 207, 209, 210, 227, 231, 232, 235, 237, 256, 263, 265, 266, 289, 292, 302, 313, 331, 336, 337, 341, 342, 345, 368, 369, 372, 374, 375, 376, 378, 379, 380, 381, 382, 385, 405, 406, 407, 429, 478, 479, 480, 499, 500, 533, 544, 545, 546, 547, 601, 604, 605, 623, 661, 677, 691, 692, 693, 793, 809, 946, 972, 978, 982, 985, 992, 998, 1001, 1011, 1013, 1022, 1031, 1033, 1036], "nation": [11, 80, 292, 369, 837], "boundari": [11, 13, 25, 26, 27, 31, 34, 58, 60, 108, 112, 119, 128, 134, 151, 154, 165, 169, 181, 199, 227, 232, 235, 262, 282, 287, 289, 290, 292, 295, 301, 303, 306, 319, 326, 329, 330, 332, 334, 341, 342, 351, 370, 398, 407, 408, 410, 441, 447, 495, 527, 540, 541, 560, 579, 580, 582, 622, 819, 832, 838, 840, 841, 842, 869, 886, 887, 894, 895, 898, 914, 972, 981, 984, 988, 991, 992, 993, 1020, 1022, 1024, 1033, 1034, 1035], "america": [11, 12, 80, 292, 837, 988], "bradypu": [11, 292, 489], "variegatu": [11, 292, 489], "brown": [11, 92, 292, 489, 619, 968, 1025, 1027, 1028, 1029, 1032], "throat": [11, 292, 489], "sloth": [11, 292, 489], "microryzomi": [11, 292, 489], "minutu": [11, 292, 489], "known": [11, 17, 25, 27, 39, 49, 57, 58, 81, 104, 105, 130, 155, 157, 163, 182, 198, 199, 216, 227, 259, 261, 268, 288, 292, 302, 314, 320, 329, 346, 362, 371, 372, 374, 377, 382, 385, 387, 390, 396, 397, 398, 400, 401, 402, 403, 404, 405, 407, 408, 410, 429, 454, 473, 475, 489, 499, 500, 535, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 579, 580, 582, 585, 600, 613, 624, 649, 650, 663, 673, 674, 685, 695, 701, 704, 709, 719, 733, 745, 747, 783, 819, 825, 826, 827, 828, 829, 832, 837, 840, 846, 874, 898, 899, 900, 901, 968, 970, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 988, 993, 994, 1004, 1009, 1011, 1012], "forest": [11, 27, 31, 108, 115, 119, 125, 126, 128, 130, 133, 134, 162, 165, 166, 172, 174, 227, 237, 256, 292, 313, 345, 356, 367, 386, 387, 398, 399, 409, 454, 455, 481, 482, 486, 487, 489, 506, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 621, 625, 787, 792, 816, 823, 850, 864, 894, 898, 899, 900, 967, 968, 979, 986, 998, 999, 1000, 1015, 1017, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1029], "rice": [11, 292, 489, 1033], "rat": [11, 292, 489], "rodent": [11, 292, 489], "live": [11, 70, 168, 292, 374, 400, 489, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616], "peru": [11, 292, 489], "colombia": [11, 292, 489], "ecuador": [11, 292, 489], "venezuela": [11, 292, 489], "entropi": [11, 239, 271, 292, 313, 320, 321, 356, 400, 407, 412, 489, 524, 548, 555, 598, 599, 649, 708, 726, 727, 731, 783, 898, 900, 974, 975, 978, 982, 994, 1022, 1024, 1028, 1029, 1034, 1036], "anderson": [11, 292, 489, 1026, 1032], "schapir": [11, 292, 407, 489, 544, 545], "ecolog": [11, 292, 489], "190": [11, 122, 216, 256, 268, 275, 292, 380, 489], "231": [11, 142, 148, 158, 160, 292, 400, 411, 435, 489, 575], "259": [11, 221, 292, 407, 489, 558, 559], "________________________________________________________________________________": [11, 54, 345], "coastlin": [11, 292, 371], "coverag": [11, 123, 198, 216, 292, 377, 396, 489, 618, 711], "area": [11, 34, 126, 198, 216, 237, 256, 259, 266, 268, 269, 332, 337, 341, 371, 374, 378, 385, 400, 408, 693, 697, 698, 699, 732, 778, 779, 975, 978, 981, 997, 1022], "roc": [11, 25, 115, 165, 226, 228, 237, 238, 242, 252, 275, 381, 398, 404, 495, 501, 555, 649, 693, 697, 698, 699, 717, 732, 772, 778, 779, 806, 816, 819, 857, 895, 984, 1017, 1022, 1023, 1025, 1026, 1030, 1032, 1036], "868443": 11, "993919": 11, "elaps": [11, 47, 67, 116, 117, 118, 360, 455, 458, 560, 561, 849, 850, 851, 852], "astro": [11, 157, 219, 247], "washington": [11, 157, 219, 247, 284, 292], "fetch_species_distribut": [11, 292, 1029], "bunch": [11, 367, 368, 369, 455, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 498, 501, 558, 559, 560, 561, 623, 624, 625, 849, 850, 898, 899, 900, 901, 938, 1002, 1013, 1025, 1027, 1030, 1032, 1036], "ll": [11, 55, 118, 254, 292, 374, 385, 523, 532, 981, 994, 1004], "otherwis": [11, 56, 62, 112, 159, 163, 179, 200, 206, 292, 356, 362, 372, 376, 378, 380, 387, 391, 400, 402, 404, 408, 410, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 442, 444, 445, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 487, 517, 524, 525, 526, 527, 529, 531, 532, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 581, 582, 585, 588, 593, 601, 602, 605, 622, 623, 624, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 677, 681, 683, 687, 688, 689, 691, 693, 694, 698, 700, 704, 705, 714, 716, 717, 718, 719, 720, 728, 731, 742, 744, 745, 746, 756, 764, 768, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 801, 805, 806, 809, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 845, 847, 848, 850, 853, 854, 855, 856, 857, 861, 862, 869, 870, 871, 872, 875, 876, 877, 879, 880, 881, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 903, 905, 911, 913, 926, 927, 937, 939, 962, 964, 973, 974, 975, 978, 981, 982, 984, 985, 988, 990, 992, 993, 998, 1002, 1004, 1022, 1028, 1029, 1030, 1033, 1036], "improvis": [11, 292], "mpl_toolkit": [11, 45, 67, 90, 101, 102, 169, 195, 219, 221, 292], "except": [11, 16, 44, 53, 98, 116, 206, 213, 227, 234, 267, 279, 292, 296, 297, 301, 303, 316, 363, 367, 374, 376, 377, 378, 379, 385, 387, 391, 394, 397, 401, 404, 405, 407, 408, 410, 423, 451, 456, 459, 473, 474, 475, 500, 545, 547, 548, 549, 551, 553, 555, 556, 559, 561, 602, 618, 621, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 669, 670, 678, 702, 768, 794, 823, 824, 830, 831, 833, 836, 841, 847, 848, 854, 868, 870, 888, 891, 893, 896, 899, 901, 931, 964, 974, 978, 993, 1004, 1012, 1013, 1021, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033], "importerror": [11, 16, 53, 98, 279, 292, 382, 487], "construct_grid": [11, 292], "object": [11, 13, 14, 19, 26, 44, 50, 62, 66, 70, 71, 98, 130, 136, 145, 146, 155, 165, 169, 182, 194, 198, 214, 216, 226, 234, 238, 240, 241, 242, 257, 271, 292, 307, 314, 315, 317, 320, 346, 347, 356, 367, 368, 369, 374, 375, 377, 379, 380, 381, 383, 386, 387, 388, 391, 394, 400, 401, 402, 405, 408, 409, 410, 414, 416, 421, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 691, 692, 693, 702, 709, 722, 723, 732, 748, 749, 771, 772, 779, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 905, 910, 911, 912, 913, 914, 917, 921, 923, 933, 934, 935, 936, 937, 938, 939, 941, 943, 944, 946, 963, 964, 966, 974, 975, 976, 977, 981, 984, 985, 988, 991, 992, 993, 998, 999, 1004, 1005, 1007, 1008, 1011, 1013, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "func": [11, 75, 115, 168, 178, 216, 292, 374, 401, 456, 854, 988, 1024, 1026, 1028, 1029], "xgrid": [11, 292], "ygrid": [11, 292], "correspond": [11, 13, 16, 20, 26, 32, 41, 53, 65, 78, 82, 97, 110, 113, 116, 117, 119, 126, 143, 146, 147, 151, 156, 159, 168, 187, 190, 198, 199, 202, 207, 216, 228, 233, 234, 241, 249, 258, 260, 262, 263, 268, 269, 292, 306, 313, 314, 315, 346, 350, 351, 356, 361, 368, 369, 370, 373, 374, 376, 378, 381, 382, 386, 387, 388, 397, 398, 400, 402, 403, 404, 405, 407, 408, 409, 410, 415, 421, 428, 430, 432, 436, 439, 442, 444, 450, 452, 454, 455, 463, 473, 474, 475, 481, 482, 483, 484, 485, 486, 487, 525, 532, 535, 536, 537, 540, 541, 543, 546, 548, 550, 551, 552, 555, 573, 575, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 608, 621, 623, 624, 626, 634, 635, 636, 637, 638, 639, 643, 649, 650, 651, 652, 653, 659, 660, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 678, 681, 682, 683, 685, 694, 701, 704, 714, 715, 724, 728, 742, 744, 764, 768, 772, 778, 779, 782, 784, 785, 786, 787, 790, 791, 793, 801, 809, 811, 819, 822, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 847, 848, 857, 861, 863, 864, 867, 871, 879, 892, 895, 898, 899, 900, 901, 915, 921, 938, 953, 967, 968, 970, 971, 972, 974, 975, 977, 978, 979, 981, 982, 983, 984, 985, 988, 989, 992, 993, 997, 1004, 1010, 1013, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "coordin": [11, 12, 13, 54, 100, 129, 154, 183, 219, 260, 292, 360, 405, 410, 434, 438, 439, 440, 452, 462, 463, 469, 522, 528, 529, 530, 531, 533, 534, 536, 537, 538, 539, 541, 605, 637, 638, 642, 643, 644, 645, 646, 647, 649, 651, 652, 653, 654, 672, 673, 674, 675, 679, 680, 681, 684, 685, 697, 754, 759, 890, 974, 975, 993, 1011, 1020, 1023, 1024, 1025, 1029, 1031, 1033, 1034, 1035], "corner": [11, 13, 26, 53, 167, 256, 260, 268, 269, 292, 374, 489, 902, 904, 978, 1034], "cell": [11, 12, 20, 26, 32, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 292, 298, 307, 312, 313, 315, 316, 322, 354, 371, 379, 683, 978, 979, 1026, 1034], "xmin": [11, 78, 188, 190, 207, 208, 292], "x_left_lower_corn": [11, 292, 489], "grid_siz": [11, 61, 292, 489], "xmax": [11, 78, 188, 190, 207, 208, 292], "nx": [11, 34, 292, 489], "ymin": [11, 78, 185, 187, 190, 191, 199, 207, 259, 292], "y_left_lower_corn": [11, 292, 489], "ny": [11, 34, 258, 292, 371, 489, 968, 990], "create_species_bunch": 11, "species_nam": [11, 292], "record": [11, 96, 114, 170, 234, 307, 347, 360, 374, 400, 402, 441, 448, 489, 611, 634, 683, 761, 764, 768, 769, 770, 771, 813, 836, 1033, 1034], "join": [11, 12, 19, 55, 162, 216, 259, 303, 369, 388, 454, 1013, 1020, 1028], "ascii": [11, 292, 408, 478, 579, 580, 582], "pt": [11, 369, 409, 866, 988], "desir": [11, 24, 112, 147, 163, 198, 200, 301, 305, 367, 374, 376, 378, 382, 394, 397, 400, 403, 404, 405, 409, 494, 529, 531, 535, 538, 558, 584, 593, 594, 655, 661, 676, 677, 699, 726, 830, 831, 835, 855, 857, 860, 861, 863, 864, 866, 867, 871, 874, 876, 878, 879, 914, 947, 970, 972, 975, 981, 988, 992, 993, 994, 1004, 1020, 1028, 1029, 1030, 1033], "pts_": 11, "ix": [11, 268, 339], "searchsort": 11, "dd": [11, 12, 128, 292, 489], "ii": [11, 96, 169, 205, 254, 371, 408, 573, 574, 580, 629, 657, 658, 853, 862, 974, 988, 997], "lat": [11, 292, 489, 754], "cov_": [11, 82], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 37, 81, 92, 122, 163, 170, 222, 230, 234, 236, 271, 313, 376, 379, 386, 391, 791, 808, 825, 826, 827, 829, 967, 968], "land": [11, 292, 388, 407], "water": 11, "land_refer": [11, 292], "standard": [11, 12, 20, 26, 32, 34, 55, 61, 70, 71, 73, 80, 81, 86, 96, 110, 113, 115, 116, 117, 118, 119, 126, 130, 147, 150, 155, 157, 159, 168, 177, 183, 187, 196, 198, 207, 219, 220, 221, 232, 249, 254, 257, 258, 259, 260, 262, 301, 306, 330, 345, 360, 361, 366, 367, 368, 370, 371, 372, 374, 376, 377, 379, 380, 383, 385, 387, 390, 394, 396, 400, 402, 403, 404, 408, 410, 437, 459, 463, 479, 487, 492, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 515, 516, 521, 523, 526, 532, 543, 581, 585, 602, 625, 635, 636, 641, 642, 645, 646, 647, 655, 656, 663, 664, 665, 666, 667, 669, 678, 680, 684, 778, 793, 808, 809, 827, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 854, 859, 860, 863, 866, 867, 868, 870, 878, 879, 880, 881, 888, 890, 891, 910, 967, 970, 974, 975, 978, 980, 981, 982, 984, 992, 993, 999, 1002, 1004, 1009, 1011, 1012, 1013, 1015, 1026, 1027, 1028, 1029, 1031, 1032, 1033], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 292], "llcrnrlat": [11, 292], "urcrnrlat": [11, 292], "llcrnrlon": [11, 292], "urcrnrlon": [11, 292], "drawcoastlin": [11, 292], "drawcountri": [11, 292], "9998": [11, 292], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 56, 60, 63, 65, 68, 74, 75, 80, 90, 91, 92, 95, 102, 103, 109, 110, 112, 119, 123, 126, 128, 129, 131, 132, 136, 139, 143, 144, 151, 153, 154, 158, 163, 165, 168, 169, 170, 180, 181, 183, 192, 195, 202, 210, 212, 231, 233, 235, 236, 244, 247, 259, 262, 263, 268, 269, 272, 279, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 302, 303, 304, 305, 311, 315, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 344, 345, 347, 348, 356, 361, 368, 369, 371, 374, 382, 383, 387, 391, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 412, 431, 434, 437, 438, 439, 440, 441, 442, 443, 444, 450, 451, 453, 460, 463, 479, 493, 495, 497, 503, 514, 522, 528, 532, 535, 536, 537, 540, 541, 544, 546, 548, 549, 550, 572, 580, 581, 582, 583, 585, 586, 587, 589, 590, 591, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 622, 630, 631, 639, 641, 642, 644, 645, 646, 647, 649, 650, 654, 655, 656, 657, 658, 660, 670, 671, 673, 674, 675, 676, 677, 679, 682, 686, 687, 695, 696, 699, 708, 716, 727, 733, 746, 748, 749, 751, 756, 759, 764, 765, 766, 767, 769, 781, 782, 783, 785, 786, 788, 792, 794, 795, 796, 799, 802, 803, 805, 806, 808, 814, 825, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 851, 855, 856, 857, 861, 862, 863, 865, 866, 870, 878, 883, 897, 905, 913, 922, 927, 952, 967, 968, 970, 971, 972, 974, 975, 976, 977, 980, 982, 983, 984, 986, 991, 992, 993, 994, 998, 1001, 1008, 1014, 1015, 1020, 1021, 1022, 1023, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035], "solid": [11, 16, 31, 33, 122, 153, 210, 211, 227, 292, 303, 1002], "z": [11, 16, 34, 58, 101, 119, 139, 152, 154, 169, 208, 210, 211, 212, 219, 221, 227, 232, 248, 285, 292, 295, 303, 306, 325, 331, 332, 336, 337, 338, 342, 371, 397, 405, 407, 544, 545, 576, 630, 655, 662, 676, 677, 680, 684, 714, 775, 870, 974, 975, 982, 983, 1035], "float64": [11, 13, 48, 53, 71, 122, 124, 125, 168, 169, 270, 315, 316, 361, 368, 374, 376, 387, 408, 462, 463, 469, 487, 488, 499, 500, 533, 572, 573, 580, 582, 632, 649, 664, 666, 690, 728, 855, 863, 864, 892, 893, 895, 896, 899, 901, 908, 910, 949, 952, 954, 955, 956, 993, 1004, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "idx": [11, 16, 19, 30, 45, 55, 105, 112, 116, 119, 131, 159, 169, 171, 182, 190, 197, 198, 207, 220, 237, 351, 401, 404], "9999": [11, 216, 292, 323, 489, 618, 1028], "coverages_land": 11, "contourf": [11, 16, 119, 212, 232, 285, 292, 295, 303, 304, 325, 331, 337, 342, 622, 623], "pts_train": 11, "pts_test": 11, "auc": [11, 25, 198, 216, 237, 256, 259, 263, 266, 268, 269, 398, 693, 699, 778, 978, 1025, 1028, 1032], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 34, 101, 105, 211, 212, 245, 266, 285, 286, 331, 337, 342, 400, 698, 978, 994], "fpr": [11, 228, 237, 256, 268, 269, 381, 583, 587, 689, 693, 697, 717, 779, 978, 1017, 1020, 1036], "tpr": [11, 228, 237, 256, 268, 269, 381, 693, 697, 779, 978, 1017, 1020, 1036], "threshold": [11, 25, 42, 65, 98, 105, 147, 165, 169, 171, 193, 228, 230, 256, 257, 258, 266, 277, 317, 319, 326, 351, 354, 387, 400, 405, 407, 409, 432, 433, 436, 437, 460, 491, 499, 500, 522, 528, 533, 539, 540, 541, 554, 579, 582, 584, 588, 593, 594, 635, 658, 662, 667, 669, 683, 689, 691, 693, 694, 697, 698, 711, 716, 717, 729, 730, 746, 772, 778, 779, 782, 785, 786, 806, 825, 836, 837, 853, 855, 857, 873, 885, 886, 887, 895, 902, 904, 952, 974, 978, 981, 982, 984, 988, 991, 993, 994, 999, 1020, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1036], "roc_curv": [11, 228, 256, 268, 693, 697, 717, 772, 778, 978, 1020, 1021, 1022, 1025, 1026, 1028, 1033, 1036], "roc_auc": [11, 259, 263, 268, 269, 381, 625, 693, 978, 1017], "ntime": [11, 270], "360": [11, 15, 110], "plot_species_distribution_model": [11, 15, 489], "emploi": [12, 150, 233, 402, 408, 410, 441, 469, 573, 580, 986, 1002, 1012, 1026], "techniqu": [12, 18, 70, 72, 97, 106, 111, 121, 138, 146, 163, 165, 167, 206, 221, 223, 264, 283, 314, 321, 350, 362, 371, 385, 387, 398, 399, 400, 404, 405, 406, 407, 408, 409, 438, 439, 440, 441, 525, 545, 668, 680, 684, 685, 716, 746, 970, 974, 975, 977, 978, 981, 984, 986, 990, 992, 994, 999, 1002, 1007, 1012, 1013, 1033], "histor": [12, 198, 999], "quot": [12, 14, 70, 260, 345, 346, 361, 368, 369, 372, 378, 399, 479, 480, 487, 978, 990, 993, 1013, 1035], "quantiti": [12, 120, 259, 266, 313, 360, 387, 400, 407, 712, 713, 714, 775, 846, 967, 969, 972, 974, 1025], "daili": [12, 1002], "price": [12, 75, 120, 130, 307, 968, 974, 1002, 1009], "link": [12, 17, 110, 168, 169, 177, 198, 202, 216, 244, 262, 289, 350, 361, 372, 373, 374, 375, 378, 382, 387, 398, 400, 402, 405, 410, 552, 553, 601, 639, 660, 671, 679, 696, 909, 911, 974, 981, 994, 995, 998, 1001, 1007, 1011, 1013, 1018, 1020, 1023, 1024, 1027, 1028, 1031], "fluctuat": [12, 60, 198, 266, 1028], "normalesup": [12, 32, 46, 66, 232], "2003": [12, 397, 400, 405, 408, 442, 443, 453, 504, 506, 680, 684, 825, 827, 974, 975, 980, 990, 1028], "2008": [12, 402, 404, 405, 469, 525, 554, 581, 636, 655, 676, 677, 683, 707, 716, 746, 820, 825, 829, 846, 972, 975, 976, 978, 979, 980, 983, 984, 993], "calm": 12, "ago": [12, 999], "tech": [12, 371, 828], "firm": [12, 400], "crash": [12, 374, 459, 880, 881, 888, 988, 1024, 1028, 1036], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 382, 846, 983, 1011], "msft": 12, "ibm": [12, 19, 324, 347, 369], "twx": 12, "warner": [12, 1035, 1036], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 1013], "amzn": 12, "amazon": 12, "tm": [12, 981], "toyota": 12, "caj": 12, "canon": [12, 387, 398, 407, 473, 474, 476, 758, 999, 1000, 1015], "sne": [12, 165, 218, 219, 220, 221, 223, 225, 505, 516, 683, 1014, 1015], "soni": [12, 1030, 1032], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 847, 848, 982], "boe": 12, "ko": [12, 26, 151], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 80, 81, 402, 460, 465], "mcdonald": 12, "pep": [12, 382, 1020], "pepsi": 12, "kellogg": 12, "un": [12, 374, 398, 408, 412, 524, 580, 783, 853, 862, 873, 877, 1029], "unilev": 12, "mar": [12, 996], "marriott": 12, "pg": [12, 380, 640, 974, 1025], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 969, 980, 1032], "electr": [12, 371, 400], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 1002], "chase": [12, 1020], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 1002], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 360, 372, 385, 979, 996], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 70], "instrument": [12, 70, 96, 167], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1030], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 133], "dynam": [12, 169, 546, 547, 554, 570, 571, 667, 668, 669, 994, 998, 1002, 1026, 1032], "rtn": 12, "raytheon": 12, "cat": [12, 71, 169, 170, 314, 315, 316, 317, 369, 408, 573, 703, 709, 744, 773, 871, 978, 988, 1029, 1030, 1032], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 347, 361, 376, 380, 402, 408, 490, 573, 579, 580, 582, 902, 904, 998], "fetch": [12, 17, 130, 168, 216, 367, 368, 369, 374, 378, 379, 382, 399, 405, 487, 546, 547, 554, 579, 580, 582, 1028, 1036], "histori": [12, 363, 537, 550, 551, 996, 1020], "stderr": [12, 819], "url": [12, 17, 147, 368, 371, 378], "githubusercont": 12, "master": [12, 16, 279, 316, 374, 378, 1002, 1025], "financi": [12, 400, 407, 974], "csv": [12, 368, 371, 379, 1001, 1028, 1033], "read_csv": [12, 379, 487, 1035], "close_pric": 12, "vstack": [12, 26, 57, 65, 153, 154, 180, 244, 248, 279, 292, 337, 622, 979, 1028], "q": [12, 71, 85, 123, 198, 314, 397, 400, 405, 926, 974, 993], "open_pric": 12, "carri": [12, 31, 110, 163, 259, 262, 267, 296, 303, 347, 388, 394, 408, 548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901, 1002, 1012], "invers": [12, 54, 77, 83, 110, 165, 249, 268, 274, 332, 346, 347, 366, 387, 399, 401, 403, 404, 405, 408, 412, 436, 456, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 518, 524, 525, 526, 530, 532, 534, 548, 552, 555, 580, 581, 582, 619, 635, 636, 649, 650, 657, 659, 665, 666, 667, 668, 669, 671, 714, 733, 742, 785, 786, 832, 833, 840, 841, 847, 848, 850, 854, 857, 863, 864, 866, 882, 883, 890, 891, 892, 895, 896, 898, 900, 916, 972, 974, 978, 981, 982, 988, 992, 993, 1011, 1013, 1014, 1015, 1020, 1023, 1028, 1031, 1032, 1034], "correl": [12, 27, 82, 85, 86, 106, 127, 143, 146, 155, 165, 166, 167, 169, 170, 172, 182, 187, 193, 216, 259, 277, 307, 312, 313, 340, 367, 370, 371, 379, 387, 389, 397, 402, 404, 409, 410, 441, 448, 473, 474, 476, 484, 485, 491, 515, 555, 597, 600, 618, 625, 626, 627, 673, 674, 733, 747, 768, 769, 770, 816, 830, 831, 867, 868, 870, 879, 969, 974, 979, 985, 988, 992, 994, 999, 1000, 1015, 1020, 1021, 1022, 1033, 1034], "condition": [12, 27, 198, 398, 402, 748, 972], "connect": [12, 39, 44, 47, 51, 54, 62, 66, 67, 372, 374, 383, 387, 402, 432, 436, 443, 453, 454, 576, 577, 686, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 976, 981, 983, 991, 1024, 1033], "edge_model": 12, "graphicallassocv": [12, 82, 402, 462, 464, 465, 466, 467, 469, 1028, 1032, 1034, 1036], "seri": [12, 20, 82, 117, 167, 170, 180, 198, 202, 219, 237, 241, 264, 308, 315, 320, 366, 369, 379, 387, 400, 480, 481, 482, 483, 487, 491, 492, 493, 495, 496, 501, 532, 681, 685, 808, 906, 969, 974, 975, 979, 981, 992, 998, 1023, 1026, 1027, 1028, 1032, 1035], "rather": [12, 53, 82, 110, 113, 162, 168, 198, 199, 212, 305, 306, 345, 346, 356, 361, 370, 374, 376, 379, 380, 382, 385, 386, 387, 388, 400, 404, 405, 407, 408, 410, 439, 452, 454, 556, 572, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 620, 637, 638, 643, 644, 651, 652, 653, 654, 771, 801, 821, 823, 824, 853, 890, 891, 902, 927, 972, 974, 975, 978, 980, 981, 985, 999, 1008, 1011, 1020, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1035, 1036], "former": [12, 347, 407, 408, 556, 789, 796, 805, 980, 1020, 1026, 1029], "recoveri": [12, 82, 182, 197, 402], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 322, 354, 382], "trust": [12, 26, 71, 72, 81, 109, 110, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 322, 354, 378, 388, 394, 398, 1008, 1034], "unabl": [12, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 167, 168, 169, 170, 179, 182, 198, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 322, 354, 362, 870, 988, 1029], "render": [12, 26, 53, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 193, 202, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 322, 354, 374, 378, 379, 380, 387, 542, 580, 622, 691, 693, 867, 879, 902, 904, 977, 994, 1033], "nbviewer": [12, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 322, 354], "graphicallassocvgraphicallassocv": 12, "group": [12, 37, 40, 55, 58, 60, 132, 169, 171, 198, 220, 234, 250, 254, 307, 322, 346, 354, 369, 379, 387, 388, 391, 400, 406, 407, 408, 425, 437, 486, 579, 580, 582, 585, 709, 778, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 817, 863, 864, 900, 901, 974, 975, 977, 978, 979, 988, 994, 995, 996, 998, 1004, 1007, 1008, 1026, 1027, 1028, 1029, 1032, 1033, 1034, 1036], "amongst": [12, 994], "indic": [12, 19, 20, 25, 26, 27, 48, 59, 60, 66, 75, 86, 95, 110, 115, 155, 158, 163, 167, 169, 195, 221, 231, 234, 253, 261, 262, 265, 266, 279, 292, 320, 321, 324, 345, 346, 347, 354, 361, 369, 374, 375, 376, 378, 382, 383, 385, 387, 396, 397, 398, 400, 402, 404, 405, 407, 408, 410, 411, 415, 428, 431, 435, 441, 442, 443, 444, 446, 447, 448, 451, 455, 458, 463, 478, 499, 500, 502, 503, 504, 514, 523, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 572, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 611, 618, 619, 620, 621, 623, 624, 630, 638, 641, 642, 644, 645, 646, 652, 654, 656, 664, 666, 673, 674, 681, 683, 685, 687, 694, 698, 703, 704, 709, 710, 711, 715, 718, 719, 720, 721, 724, 728, 729, 730, 731, 744, 761, 768, 769, 770, 771, 773, 774, 775, 777, 778, 780, 781, 782, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 821, 823, 824, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 854, 857, 861, 863, 871, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 906, 910, 911, 916, 931, 941, 942, 968, 973, 974, 975, 978, 979, 980, 981, 982, 985, 986, 988, 989, 992, 993, 999, 1004, 1008, 1011, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1030, 1031, 1033, 1035, 1036], "reflect": [12, 40, 46, 47, 80, 92, 96, 120, 169, 170, 198, 216, 268, 283, 346, 370, 373, 378, 387, 389, 397, 441, 447, 975, 978, 984, 986, 1012, 1021, 1029], "properti": [12, 25, 157, 158, 200, 215, 245, 281, 306, 354, 360, 363, 367, 374, 376, 390, 397, 398, 400, 402, 405, 407, 409, 410, 415, 433, 436, 442, 443, 444, 455, 456, 533, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 581, 582, 584, 585, 588, 601, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 623, 637, 643, 646, 651, 653, 665, 666, 695, 696, 699, 787, 790, 791, 801, 818, 819, 849, 850, 863, 864, 865, 871, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 967, 970, 973, 974, 975, 978, 979, 981, 984, 988, 991, 993, 994, 995, 999, 1004, 1025, 1029, 1030, 1033, 1034], "impact": [12, 25, 36, 37, 68, 75, 110, 143, 165, 167, 168, 169, 200, 202, 216, 253, 306, 316, 346, 356, 360, 361, 367, 385, 388, 398, 400, 405, 438, 440, 527, 531, 538, 581, 657, 658, 659, 663, 665, 667, 668, 669, 683, 782, 787, 790, 791, 801, 813, 830, 831, 867, 879, 913, 927, 949, 952, 967, 977, 985, 993, 1027, 1030, 1033], "affinity_propag": [12, 44], "covariance_": [12, 34, 80, 82, 460, 461, 462, 463, 464, 465, 466, 467, 540, 541, 972, 1027], "n_label": [12, 92, 235, 387, 478, 514, 704, 711, 716, 729, 730, 744, 746, 780, 781, 807, 978, 1026, 1028], "lai": [12, 306, 984], "canva": [12, 16], "manifold": [12, 39, 52, 67, 222, 223, 224, 225, 279, 311, 315, 316, 322, 363, 367, 387, 400, 405, 407, 493, 516, 521, 535, 540, 557, 839, 851, 860, 883, 913, 981, 1014, 1015, 1020, 1021, 1023, 1024, 1025, 1026, 1027], "dens": [12, 55, 165, 176, 217, 315, 316, 324, 360, 383, 387, 400, 405, 407, 409, 434, 437, 438, 440, 455, 458, 487, 514, 515, 525, 526, 535, 557, 576, 577, 598, 599, 620, 643, 648, 649, 650, 657, 659, 663, 664, 667, 668, 669, 678, 679, 680, 683, 684, 750, 751, 757, 769, 780, 847, 848, 855, 862, 863, 865, 867, 868, 869, 870, 879, 880, 881, 882, 883, 890, 891, 892, 893, 895, 896, 928, 949, 952, 968, 971, 974, 975, 978, 979, 981, 984, 988, 990, 991, 992, 993, 994, 1020, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036], "eigen_solv": [12, 44, 46, 66, 219, 220, 405, 443, 453, 526, 679, 680, 682, 684, 686, 975, 1021, 1030, 1033, 1034, 1035], "arpack": [12, 19, 44, 46, 66, 220, 405, 442, 443, 444, 453, 526, 532, 535, 679, 680, 682, 684, 686, 975, 1026, 1027, 1032], "don": [12, 54, 70, 121, 168, 220, 234, 235, 259, 279, 323, 329, 333, 340, 345, 346, 360, 368, 374, 376, 378, 380, 382, 385, 386, 391, 401, 408, 637, 643, 818, 898, 899, 900, 901, 942, 967, 974, 977, 979, 982, 984, 992, 1001, 1013, 1024, 1029, 1036], "control": [12, 16, 61, 99, 100, 116, 136, 155, 157, 182, 199, 202, 206, 230, 231, 260, 262, 281, 312, 314, 350, 352, 353, 360, 361, 367, 370, 374, 376, 379, 382, 385, 387, 390, 394, 399, 400, 403, 404, 405, 406, 409, 410, 425, 431, 440, 445, 462, 463, 469, 522, 527, 528, 529, 530, 531, 534, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 584, 585, 587, 605, 610, 616, 618, 623, 625, 630, 632, 633, 637, 638, 640, 641, 642, 643, 645, 646, 647, 663, 665, 667, 668, 673, 674, 678, 683, 692, 700, 785, 786, 787, 789, 790, 791, 792, 793, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 814, 816, 817, 820, 821, 824, 847, 848, 869, 871, 882, 883, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 904, 944, 965, 967, 974, 975, 977, 978, 979, 981, 984, 985, 988, 990, 992, 993, 994, 998, 999, 1000, 1011, 1015, 1020, 1022, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "neighbor": [12, 31, 39, 44, 47, 60, 128, 131, 138, 162, 163, 220, 221, 223, 227, 236, 237, 283, 284, 285, 286, 288, 289, 290, 292, 293, 313, 315, 316, 345, 363, 366, 371, 383, 387, 390, 400, 406, 407, 408, 411, 414, 424, 432, 435, 436, 439, 441, 443, 448, 449, 452, 454, 487, 493, 495, 554, 561, 593, 598, 599, 618, 619, 622, 679, 680, 681, 682, 683, 684, 687, 771, 787, 816, 850, 851, 870, 886, 894, 952, 979, 984, 999, 1000, 1007, 1012, 1014, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1027], "node": [12, 41, 120, 124, 182, 311, 317, 350, 354, 382, 383, 400, 402, 405, 407, 432, 433, 436, 454, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 641, 645, 647, 673, 674, 683, 830, 831, 898, 899, 900, 901, 902, 904, 932, 946, 981, 983, 984, 985, 994, 1023, 1024, 1025, 1026, 1027, 1029, 1032, 1033, 1034, 1035], "plane": [12, 210, 232, 285, 331, 334, 336, 337, 342, 371, 443, 453, 972, 974, 993, 1011], "node_position_model": 12, "locallylinearembed": [12, 219, 220, 221, 315, 679, 681, 683, 975, 981, 1025, 1026, 1034, 1035, 1036], "n_neighbor": [12, 44, 62, 67, 131, 162, 219, 220, 221, 223, 227, 237, 279, 281, 282, 285, 286, 287, 288, 291, 306, 311, 313, 345, 407, 443, 593, 598, 599, 619, 679, 680, 682, 684, 687, 832, 833, 834, 836, 838, 839, 843, 885, 886, 968, 975, 981, 984, 991, 1027, 1034, 1036], "output": [12, 14, 16, 25, 27, 37, 53, 59, 98, 108, 110, 113, 119, 120, 130, 134, 138, 139, 150, 158, 162, 163, 165, 168, 194, 226, 234, 241, 242, 247, 253, 257, 259, 262, 266, 268, 269, 279, 302, 305, 307, 308, 311, 314, 315, 317, 346, 347, 349, 354, 355, 367, 368, 369, 371, 374, 376, 380, 382, 385, 386, 387, 398, 399, 400, 401, 403, 404, 407, 408, 409, 416, 421, 424, 428, 432, 433, 434, 436, 437, 438, 440, 441, 443, 450, 451, 453, 454, 455, 456, 457, 458, 459, 473, 474, 475, 476, 479, 482, 483, 484, 485, 486, 487, 488, 494, 496, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 602, 618, 619, 620, 621, 622, 623, 624, 626, 629, 630, 631, 632, 633, 637, 638, 641, 643, 644, 645, 648, 649, 651, 652, 653, 654, 657, 658, 659, 662, 664, 665, 667, 669, 670, 672, 673, 674, 675, 679, 680, 681, 683, 685, 687, 691, 704, 705, 712, 713, 714, 716, 718, 725, 732, 735, 736, 738, 740, 741, 742, 743, 744, 746, 751, 757, 762, 775, 778, 785, 786, 789, 790, 791, 792, 793, 799, 801, 802, 803, 804, 805, 806, 807, 811, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 833, 834, 835, 839, 840, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 878, 879, 882, 883, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 911, 913, 916, 927, 928, 934, 937, 945, 965, 967, 968, 970, 972, 974, 975, 978, 979, 980, 981, 982, 985, 988, 993, 1000, 1004, 1005, 1007, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "edg": [12, 26, 46, 66, 98, 120, 222, 266, 382, 387, 397, 400, 402, 444, 552, 553, 576, 577, 579, 580, 582, 785, 827, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 855, 903, 988, 991, 1002, 1026, 1028, 1031, 1034], "displai": [12, 25, 27, 34, 37, 46, 48, 60, 71, 81, 82, 85, 86, 89, 95, 116, 121, 126, 127, 130, 165, 168, 169, 183, 185, 216, 226, 227, 237, 242, 248, 256, 260, 261, 266, 273, 289, 307, 312, 313, 336, 351, 360, 374, 377, 381, 383, 390, 401, 405, 408, 409, 429, 455, 458, 459, 487, 532, 555, 621, 622, 623, 649, 678, 688, 689, 691, 692, 693, 704, 709, 772, 779, 787, 793, 801, 809, 816, 850, 851, 863, 865, 870, 888, 895, 902, 903, 904, 918, 944, 965, 978, 982, 998, 1015, 1029, 1031, 1032, 1034, 1035], "strength": [12, 130, 157, 198, 202, 260, 311, 360, 403, 407, 437, 558, 559, 634, 639, 640, 643, 649, 650, 660, 663, 664, 665, 666, 667, 669, 671, 678, 773, 847, 848, 890, 891, 895, 896, 967, 974, 981, 984, 992, 993], "plan": [12, 368, 372, 374, 375, 388, 988, 1023], "fair": [12, 407, 681, 685, 819, 979, 1002], "crucial": [12, 167, 202, 254, 360, 373, 374, 388, 400, 410, 993], "challeng": [12, 130, 150, 169, 177, 216, 227, 362, 369, 370, 400, 402, 453, 463, 978, 984, 1002, 1004], "overlap": [12, 37, 55, 124, 146, 222, 246, 346, 372, 397, 400, 404, 407, 408, 578, 780, 781, 788, 792, 794, 795, 796, 797, 805, 975, 988, 1026], "heurist": [12, 14, 122, 345, 361, 400, 409, 440, 443, 452, 453, 499, 500, 528, 530, 537, 667, 668, 669, 682, 686, 790, 791, 892, 893, 894, 895, 896, 915, 975, 976, 981, 992, 994, 1002, 1011, 1020, 1021, 1025, 1029, 1032, 1033], "direct": [12, 85, 86, 90, 95, 97, 101, 104, 147, 204, 244, 250, 256, 288, 298, 306, 332, 337, 372, 374, 375, 378, 382, 388, 390, 400, 403, 405, 408, 409, 443, 453, 462, 463, 469, 525, 532, 540, 579, 580, 582, 593, 632, 679, 839, 972, 973, 974, 979, 981, 983, 999, 1012, 1020, 1023], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 58, 61, 82, 89, 95, 98, 154, 163, 189, 210, 214, 236, 283, 285, 288, 289, 293, 298, 331, 332, 336, 337, 338, 342, 363, 366, 371, 383, 387, 400, 406, 407, 411, 414, 424, 435, 437, 439, 441, 443, 448, 452, 453, 487, 493, 495, 598, 599, 618, 619, 621, 622, 626, 679, 680, 682, 683, 687, 780, 781, 787, 816, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 850, 851, 855, 870, 952, 975, 984, 993, 999, 1000, 1007, 1015, 1020, 1022, 1023, 1024, 1025, 1027, 1029, 1030, 1032], "along": [12, 13, 56, 59, 66, 86, 117, 123, 185, 198, 232, 234, 263, 308, 311, 346, 347, 356, 374, 378, 380, 382, 383, 387, 390, 391, 394, 397, 405, 407, 408, 409, 410, 412, 524, 541, 578, 602, 603, 621, 637, 638, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 667, 669, 672, 673, 674, 675, 676, 677, 769, 770, 780, 787, 801, 859, 860, 863, 864, 867, 868, 869, 870, 875, 876, 877, 879, 880, 881, 906, 929, 953, 959, 967, 974, 981, 988, 991, 1002, 1020, 1025, 1026, 1028, 1032, 1033], "linecollect": [12, 222, 230, 623], "facecolor": [12, 16, 26, 34, 45, 60, 95, 102, 112, 139, 158, 219, 235, 259, 286, 303, 330, 333, 336, 337, 339], "partial_correl": 12, "precision_": [12, 82, 460, 461, 462, 463, 464, 465, 466, 467], "sqrt": [12, 80, 81, 82, 98, 101, 105, 114, 136, 177, 179, 222, 224, 239, 244, 245, 246, 249, 250, 259, 337, 400, 407, 408, 410, 454, 460, 461, 462, 463, 464, 465, 466, 467, 529, 531, 538, 548, 549, 550, 551, 555, 556, 610, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 721, 753, 754, 759, 870, 883, 898, 899, 900, 901, 970, 974, 975, 978, 980, 990, 1034], "diag": [12, 82, 158, 246, 249, 405, 410, 523, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 785, 786, 974, 1035], "newaxi": [12, 13, 19, 24, 42, 82, 105, 111, 151, 179, 188, 194, 199, 200, 201, 203, 204, 215, 230, 232, 273, 284, 291, 340, 352, 353, 397, 527, 974], "ab": [12, 17, 40, 75, 99, 106, 112, 120, 130, 143, 147, 171, 185, 189, 209, 211, 214, 216, 222, 259, 301, 330, 342, 400, 529, 531, 538, 618, 736, 830, 831, 865, 978], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 60, 61, 102], "start_idx": [12, 222], "end_idx": [12, 222], "sequenc": [12, 110, 119, 186, 222, 376, 387, 401, 404, 405, 407, 408, 494, 503, 552, 553, 560, 561, 572, 573, 579, 580, 582, 637, 787, 790, 798, 816, 874, 930, 931, 941, 949, 952, 998, 1020, 1023, 1025, 1026], "line0": [12, 222], "linen": [12, 222], "x0": [12, 34, 190, 207, 222, 301, 329, 387, 421, 455, 558, 559, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 853, 854, 855, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871], "y0": [12, 222], "y1": [12, 91, 112, 222, 500, 707, 979, 980], "xm": [12, 222], "ym": [12, 222], "segment": [12, 36, 47, 68, 165, 222, 230, 369, 382, 400, 408, 443, 453, 499, 500, 682, 846, 978, 998, 1002, 1028, 1030, 1032], "stop": [12, 17, 44, 62, 108, 116, 134, 155, 157, 165, 169, 176, 200, 217, 312, 374, 376, 382, 383, 387, 400, 405, 407, 409, 431, 432, 434, 436, 438, 440, 443, 445, 453, 454, 462, 463, 469, 473, 474, 475, 487, 495, 499, 500, 506, 511, 523, 527, 528, 529, 530, 531, 534, 536, 537, 538, 544, 545, 548, 549, 550, 551, 552, 553, 555, 556, 562, 579, 580, 582, 593, 608, 618, 635, 636, 637, 639, 640, 643, 647, 649, 650, 657, 658, 659, 660, 662, 667, 668, 669, 671, 682, 683, 686, 705, 785, 786, 816, 847, 848, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 932, 952, 967, 974, 982, 983, 993, 994, 999, 1000, 1002, 1015, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036], "lc": [12, 222, 230], "zorder": [12, 34, 58, 97, 127, 139, 151, 159, 188, 196, 220, 222, 230, 233, 244, 312, 336, 337], "hot_r": [12, 301], "norm": [12, 13, 14, 17, 34, 40, 54, 98, 101, 153, 156, 177, 182, 184, 189, 222, 244, 245, 246, 248, 250, 256, 260, 284, 301, 332, 346, 380, 383, 387, 400, 408, 409, 433, 434, 438, 450, 451, 455, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 480, 522, 525, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 580, 581, 582, 588, 634, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 663, 665, 667, 669, 672, 675, 676, 677, 681, 683, 684, 685, 760, 827, 862, 877, 890, 892, 895, 960, 961, 971, 974, 976, 978, 988, 992, 1023, 1025, 1027, 1031], "set_arrai": [12, 222, 230], "set_linewidth": [12, 222, 230], "add_collect": [12, 222, 230], "index": [12, 14, 17, 30, 37, 38, 39, 40, 41, 49, 50, 58, 71, 72, 110, 115, 117, 121, 144, 147, 155, 162, 167, 168, 169, 170, 198, 202, 216, 238, 241, 245, 246, 250, 254, 257, 258, 259, 260, 262, 270, 271, 279, 301, 306, 307, 308, 315, 320, 321, 346, 347, 369, 371, 372, 374, 376, 378, 383, 385, 387, 397, 401, 404, 405, 407, 408, 415, 434, 438, 439, 440, 441, 442, 444, 445, 448, 450, 451, 455, 458, 494, 500, 548, 549, 550, 551, 555, 556, 557, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 608, 623, 624, 631, 688, 695, 696, 703, 707, 709, 721, 728, 747, 769, 770, 776, 778, 782, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 816, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 863, 898, 899, 900, 901, 931, 949, 952, 957, 958, 978, 980, 981, 982, 992, 994, 998, 1011, 1013, 1020, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "dx": [12, 13, 517], "dy": 12, "this_dx": 12, "argmin": [12, 122, 258, 376, 402, 522, 528, 536, 537, 676, 769, 770, 994], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 62, 102, 227, 244, 295, 303], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 56, 60, 67, 90, 91, 92, 102, 112, 119, 126, 128, 129, 131, 132, 139, 142, 151, 152, 154, 158, 169, 181, 190, 200, 207, 210, 211, 212, 231, 232, 233, 235, 244, 247, 259, 262, 273, 282, 285, 286, 287, 290, 295, 303, 304, 306, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 342, 351, 352, 353, 622], "ptp": 12, "197": [12, 15, 143, 148, 245, 251, 347, 410], "plot_stock_market": [12, 15], "parallel": [13, 108, 114, 116, 119, 134, 165, 169, 200, 260, 312, 313, 315, 337, 354, 359, 366, 374, 375, 377, 378, 385, 387, 401, 409, 411, 412, 428, 435, 437, 439, 440, 441, 443, 448, 449, 452, 455, 458, 463, 486, 522, 524, 525, 526, 528, 530, 532, 533, 534, 536, 537, 539, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 580, 585, 593, 601, 623, 625, 630, 649, 679, 680, 681, 682, 683, 684, 685, 764, 768, 771, 787, 790, 791, 793, 798, 801, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 849, 852, 885, 886, 946, 948, 999, 1008, 1013, 1015, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1035, 1036], "acquir": [13, 118, 261, 1032], "angl": [13, 34, 98, 147, 244, 245, 246, 249, 250, 371, 405, 522, 528, 530, 533, 534, 536, 537, 539, 641, 642, 643, 644, 645, 646, 647, 654, 655, 656, 669, 673, 674, 675, 676, 677, 683, 975, 976, 1000, 1015, 1020], "Such": [13, 126, 150, 155, 167, 177, 182, 187, 199, 262, 345, 387, 388, 404, 405, 407, 546, 547, 647, 968, 978, 981, 988, 994, 1011, 1030, 1035], "ct": [13, 158, 241, 401, 455, 457, 458], "cellular": 13, "materi": [13, 388, 572, 880, 881, 997], "haar": 13, "wavelet": [13, 105, 405], "sparsiti": [13, 82, 165, 176, 182, 191, 213, 214, 217, 233, 346, 360, 387, 402, 405, 407, 409, 492, 493, 518, 522, 528, 529, 530, 531, 534, 536, 537, 538, 637, 643, 648, 649, 667, 669, 712, 713, 714, 859, 865, 870, 875, 971, 974, 981, 988, 1007, 1012, 1022], "oper": [13, 19, 158, 165, 233, 252, 256, 266, 275, 347, 360, 361, 371, 372, 374, 377, 380, 385, 387, 388, 390, 394, 396, 404, 405, 407, 408, 409, 413, 439, 452, 459, 466, 473, 474, 475, 476, 495, 524, 525, 532, 542, 543, 557, 563, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 607, 612, 615, 621, 626, 634, 649, 680, 684, 693, 697, 698, 699, 717, 764, 771, 772, 778, 779, 806, 816, 819, 830, 831, 853, 857, 862, 873, 874, 888, 895, 898, 929, 946, 951, 974, 981, 988, 993, 998, 1002, 1011, 1024, 1026, 1027, 1028, 1030, 1031, 1036], "fidel": 13, "penal": [13, 30, 82, 130, 182, 187, 191, 198, 202, 214, 216, 306, 340, 400, 402, 405, 409, 460, 461, 462, 463, 464, 465, 466, 467, 469, 638, 643, 644, 652, 654, 667, 696, 706, 724, 776, 783, 863, 890, 897, 974, 978, 980, 982, 992, 993, 1011], "account": [13, 55, 97, 104, 110, 155, 162, 168, 216, 234, 259, 288, 340, 342, 346, 360, 370, 374, 387, 388, 394, 400, 403, 404, 405, 407, 408, 454, 558, 559, 618, 619, 621, 623, 624, 640, 664, 670, 695, 698, 718, 719, 720, 728, 733, 746, 773, 774, 777, 778, 788, 792, 805, 864, 970, 972, 976, 978, 979, 980, 981, 988, 992, 994, 1025, 1027, 1028, 1029, 1032, 1033, 1035], "call": [13, 17, 46, 48, 50, 54, 71, 92, 115, 122, 144, 150, 154, 156, 158, 167, 169, 186, 198, 199, 202, 216, 234, 238, 240, 241, 259, 260, 268, 273, 274, 279, 281, 306, 308, 313, 314, 345, 346, 347, 354, 360, 361, 362, 369, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 390, 391, 398, 400, 401, 402, 403, 404, 405, 407, 408, 410, 412, 423, 431, 434, 437, 438, 440, 441, 442, 443, 444, 445, 448, 451, 453, 455, 456, 459, 460, 465, 473, 474, 475, 479, 482, 483, 486, 488, 494, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 568, 573, 574, 576, 577, 579, 580, 582, 588, 593, 598, 599, 601, 602, 605, 608, 611, 618, 619, 620, 621, 622, 623, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 680, 681, 682, 683, 684, 685, 686, 688, 691, 692, 695, 722, 732, 745, 761, 764, 768, 769, 770, 771, 781, 785, 786, 787, 789, 790, 791, 792, 793, 799, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 836, 839, 841, 846, 847, 848, 849, 850, 853, 854, 855, 857, 859, 860, 862, 867, 870, 871, 874, 879, 880, 881, 882, 883, 887, 890, 891, 892, 893, 895, 896, 899, 901, 917, 921, 926, 927, 938, 944, 945, 946, 949, 952, 962, 967, 968, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 986, 988, 990, 991, 993, 994, 998, 1002, 1004, 1008, 1011, 1012, 1013, 1015, 1017, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "algorithm": [13, 17, 18, 22, 29, 36, 37, 42, 43, 45, 46, 56, 57, 61, 62, 66, 68, 79, 85, 95, 97, 109, 110, 111, 112, 116, 165, 174, 185, 187, 201, 214, 221, 223, 226, 230, 237, 242, 245, 246, 247, 250, 256, 259, 268, 279, 285, 286, 288, 292, 301, 303, 306, 311, 312, 313, 316, 331, 345, 346, 356, 360, 362, 367, 368, 369, 370, 371, 374, 375, 376, 377, 382, 383, 386, 387, 389, 396, 397, 399, 400, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 460, 465, 466, 469, 473, 474, 475, 479, 494, 502, 503, 504, 505, 506, 513, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 535, 536, 537, 538, 539, 544, 545, 546, 547, 550, 551, 554, 582, 594, 595, 601, 602, 626, 628, 630, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 665, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 695, 696, 699, 708, 710, 725, 727, 733, 764, 768, 769, 781, 783, 785, 786, 818, 827, 828, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 846, 851, 855, 857, 870, 874, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 910, 926, 927, 929, 943, 947, 953, 968, 970, 973, 975, 976, 978, 980, 983, 984, 988, 991, 992, 993, 997, 998, 999, 1000, 1002, 1004, 1007, 1008, 1010, 1012, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "computation": [13, 78, 95, 116, 122, 130, 150, 279, 345, 359, 375, 399, 400, 401, 404, 405, 407, 410, 529, 623, 624, 662, 753, 787, 789, 790, 791, 801, 813, 974, 975, 977, 985, 986, 990, 1012, 1015, 1024], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 68, 79, 94, 96, 97, 107, 110, 116, 123, 128, 133, 141, 148, 149, 160, 165, 170, 180, 182, 184, 186, 189, 196, 202, 213, 218, 221, 225, 226, 230, 242, 246, 252, 254, 256, 275, 277, 295, 303, 305, 306, 311, 313, 325, 329, 344, 346, 348, 356, 369, 371, 387, 398, 402, 403, 405, 409, 428, 429, 434, 437, 438, 440, 479, 495, 503, 505, 506, 513, 516, 532, 540, 541, 544, 555, 556, 572, 573, 579, 580, 581, 582, 597, 599, 601, 602, 606, 613, 616, 622, 630, 634, 649, 663, 679, 680, 681, 682, 683, 695, 728, 733, 769, 778, 787, 790, 793, 801, 803, 816, 825, 828, 832, 847, 851, 859, 860, 862, 866, 867, 868, 870, 875, 876, 877, 878, 879, 880, 881, 890, 892, 893, 895, 896, 898, 967, 972, 975, 978, 980, 981, 984, 993, 1017], "l2": [13, 30, 40, 82, 85, 165, 176, 182, 183, 189, 198, 209, 213, 214, 216, 217, 260, 279, 301, 324, 345, 346, 376, 383, 385, 400, 402, 405, 408, 432, 436, 441, 448, 515, 529, 531, 538, 549, 552, 553, 556, 580, 581, 582, 634, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 663, 667, 669, 671, 672, 677, 678, 679, 725, 740, 751, 752, 768, 769, 770, 801, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 847, 848, 862, 870, 877, 890, 891, 895, 896, 897, 899, 901, 961, 967, 971, 974, 976, 981, 982, 988, 992, 994, 1011, 1013, 1022, 1024, 1025, 1027, 1029], "produc": [13, 25, 26, 44, 57, 70, 98, 123, 124, 125, 126, 182, 265, 298, 323, 356, 369, 370, 374, 376, 379, 387, 388, 400, 401, 404, 405, 407, 431, 434, 437, 443, 510, 527, 550, 554, 572, 579, 584, 585, 623, 624, 789, 790, 791, 799, 804, 807, 811, 855, 865, 892, 895, 969, 970, 974, 976, 977, 978, 981, 984, 985, 989, 991, 992, 993, 1004, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 55, 60, 62, 66, 73, 80, 94, 95, 100, 107, 110, 112, 115, 118, 128, 163, 165, 169, 170, 174, 176, 199, 217, 220, 235, 246, 259, 262, 268, 269, 301, 303, 306, 313, 323, 327, 332, 336, 337, 343, 345, 356, 360, 370, 371, 376, 379, 382, 385, 387, 398, 400, 401, 402, 405, 407, 408, 410, 455, 503, 510, 524, 529, 531, 532, 538, 540, 572, 579, 580, 582, 601, 622, 629, 637, 638, 664, 667, 668, 681, 685, 715, 722, 735, 736, 738, 743, 780, 806, 822, 823, 849, 850, 892, 894, 895, 900, 901, 967, 968, 970, 972, 974, 975, 977, 984, 985, 988, 992, 993, 1009, 1011, 1012, 1020, 1023, 1025, 1026, 1030, 1032, 1033, 1036], "central": [13, 200, 400, 984, 998], "emmanuel": [13, 66, 1020, 1027, 1028, 1029], "gouillart": [13, 66, 1020], "nsup": 13, "ndimag": [13, 46, 47, 54, 298, 1012], "_weight": [13, 216], "orig": [13, 286], "floor_x": 13, "floor": 13, "astyp": [13, 37, 41, 44, 45, 53, 60, 62, 66, 81, 102, 120, 122, 139, 167, 188, 189, 216, 222, 233, 237, 270, 279, 308, 408, 968, 974, 1027], "hstack": [13, 33, 34, 42, 132, 143, 224, 236, 254, 335, 404, 849], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 139, 336], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 302, 335, 626], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 122, 132, 346, 830, 831], "mask": [13, 42, 66, 118, 198, 206, 257, 258, 324, 383, 387, 401, 407, 460, 465, 552, 553, 572, 576, 577, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 620, 621, 623, 624, 640, 662, 787, 790, 791, 801, 950, 968, 985, 1020, 1023, 1025, 1026, 1028, 1030], "logical_and": [13, 123], "proj_oper": 13, "coo_matrix": [13, 184, 443, 576, 577, 949, 952], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 58, 62, 103, 113, 127, 129, 142, 177, 182, 221, 222, 227, 233, 234, 273, 291, 312, 313, 324, 325, 339, 340, 346, 352, 353, 383, 391, 535, 695, 696, 706, 747, 771, 776, 882, 883, 885, 886, 887, 990, 1004, 1020, 1031, 1032], "gaussian_filt": [13, 46, 47, 54, 1012], "sigma": [13, 46, 47, 54, 80, 103, 123, 257, 259, 397, 402, 405, 407, 605, 640, 972, 974, 976, 980, 983, 1012], "logical_xor": [13, 154, 338], "binary_eros": 13, "128": [13, 14, 198, 360, 527], "proj": [13, 640], "randn": [13, 33, 34, 39, 54, 65, 66, 80, 81, 98, 103, 126, 142, 150, 154, 167, 170, 187, 192, 193, 197, 211, 212, 215, 245, 248, 249, 254, 266, 268, 269, 273, 285, 286, 308, 312, 313, 331, 337, 338, 340, 342, 376, 379, 634, 661, 663, 669, 808, 893, 896], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 54, 58, 71, 74, 78, 82, 87, 103, 116, 119, 120, 122, 123, 135, 140, 141, 145, 147, 148, 168, 169, 176, 182, 186, 198, 200, 216, 217, 246, 247, 249, 252, 256, 259, 260, 261, 263, 265, 268, 273, 275, 283, 298, 300, 302, 307, 309, 311, 313, 323, 332, 340, 363, 369, 374, 376, 383, 385, 386, 387, 391, 394, 395, 398, 401, 402, 405, 407, 408, 409, 410, 428, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 484, 492, 493, 495, 506, 532, 558, 559, 566, 584, 585, 588, 593, 597, 600, 633, 634, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 677, 692, 693, 697, 704, 718, 731, 775, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 824, 850, 851, 855, 870, 871, 888, 890, 892, 895, 933, 977, 978, 981, 982, 986, 988, 993, 994, 998, 999, 1000, 1002, 1004, 1007, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "lassocv": [13, 130, 136, 168, 182, 187, 407, 409, 642, 643, 645, 646, 647, 654, 675, 974, 1008, 1020, 1023, 1027, 1030, 1031, 1033, 1034], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 58, 82, 89, 95, 98, 154, 157, 165, 176, 189, 214, 217, 230, 236, 268, 283, 291, 298, 321, 332, 338, 410, 626, 636, 644, 654, 663, 675, 691, 698, 833, 841, 851, 865, 869, 969, 974, 978, 988, 1027, 1032], "133": [13, 56], "wspace": [13, 14, 39, 44, 45, 62, 80, 95, 112, 198, 216, 227, 244, 246, 247, 250, 284, 292, 321, 329], "465": [13, 15], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 72, 380, 399, 408, 526, 529, 535, 538, 1014, 1015, 1020, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037], "latentdirichletalloc": [14, 362, 379, 405, 998, 1025, 1027, 1034, 1035], "corpu": [14, 346, 347, 369, 405, 579, 580, 581, 582, 1013, 1021], "frobeniu": [14, 98, 434, 438, 450, 460, 461, 462, 463, 464, 465, 466, 467, 522, 528, 529, 531, 536, 537, 538, 974, 1027], "kullback": [14, 219, 405, 529, 531, 538, 683, 975, 1027], "leibler": [14, 219, 405, 529, 531, 538, 683, 975, 1027], "diverg": [14, 122, 219, 224, 284, 529, 531, 538, 683, 846, 975, 977, 978, 983, 985, 1027, 1028, 1033], "probabilist": [14, 27, 30, 82, 94, 107, 149, 150, 153, 157, 160, 165, 345, 387, 398, 406, 407, 428, 464, 467, 523, 525, 526, 532, 550, 579, 580, 601, 613, 634, 636, 667, 694, 731, 787, 812, 857, 892, 893, 895, 896, 971, 972, 974, 977, 978, 983, 988, 993, 994, 998, 1002, 1020, 1023, 1027], "semant": [14, 345, 346, 387, 535, 1013, 1014, 1015, 1022], "runnabl": [14, 378, 379], "coupl": [14, 52, 53, 55, 220, 368, 369, 397, 398, 400, 409, 580, 896, 967, 993], "ten": [14, 19, 110, 116, 147, 220, 250, 369, 371, 407, 511, 895, 1029], "polynomi": [14, 162, 165, 173, 175, 176, 198, 204, 217, 239, 259, 273, 313, 314, 329, 336, 339, 366, 370, 443, 482, 611, 630, 631, 632, 634, 663, 755, 764, 765, 816, 851, 860, 862, 865, 869, 890, 892, 893, 894, 895, 896, 973, 993, 1000, 1015, 1032, 1033], "lda": [14, 33, 34, 94, 107, 165, 288, 356, 371, 396, 495, 527, 532, 540, 541, 839, 998, 1000, 1014, 1015, 1025], "proport": [14, 26, 40, 146, 184, 198, 205, 211, 227, 262, 286, 289, 342, 360, 369, 398, 400, 402, 404, 405, 407, 408, 429, 430, 437, 460, 465, 506, 540, 541, 546, 548, 550, 551, 552, 553, 554, 555, 574, 575, 579, 582, 618, 623, 649, 650, 657, 658, 659, 665, 666, 667, 669, 687, 692, 703, 788, 789, 790, 791, 804, 807, 816, 836, 847, 848, 864, 890, 891, 892, 895, 896, 898, 900, 902, 904, 916, 967, 977, 978, 981, 984, 992, 993, 994, 1025], "187": [14, 259, 269, 275, 380, 575, 979, 1011, 1022], "tf": [14, 19, 231, 345, 346, 347, 369, 405, 512, 535, 579, 580, 581, 582, 829, 837, 862, 967, 976, 980, 988, 998, 1013], "idf": [14, 19, 231, 345, 346, 347, 369, 405, 512, 535, 579, 580, 581, 582, 829, 837, 862, 967, 976, 980, 988, 1013, 1020], "253": [14, 122, 209, 217, 525], "2000": [14, 26, 40, 50, 75, 96, 103, 121, 174, 247, 250, 259, 295, 315, 346, 369, 371, 400, 401, 407, 412, 443, 453, 524, 525, 550, 680, 682, 684, 733, 778, 785, 836, 866, 878, 975, 978, 984, 990, 1004, 1012], "077": [14, 211, 217, 279, 305, 309], "418": 14, "minibatchnmf": [14, 362, 405, 1034, 1036, 1037], "batch_siz": [14, 19, 42, 64, 95, 98, 99, 346, 405, 440, 525, 527, 528, 529, 530, 537, 846, 847, 848, 930, 931, 944, 1021, 1028, 1031, 1033, 1034], "222": [14, 85, 128, 329, 343, 993], "129": [14, 200, 1009, 1020], "ensta": [14, 17, 37, 48, 61, 198, 216, 220, 260, 262, 345, 346, 347], "chyi": [14, 1023, 1024, 1025, 1026, 1027], "kwei": [14, 1023, 1024, 1025, 1026, 1027], "yau": [14, 1023, 1024, 1025, 1026, 1027], "chyikwei": 14, "fetch_20newsgroup": [14, 19, 70, 260, 324, 345, 346, 347, 369, 480, 1013, 1025, 1030], "countvector": [14, 324, 347, 369, 379, 401, 405, 408, 480, 527, 573, 580, 581, 582, 1013, 1020, 1022, 1025, 1028, 1029, 1030, 1031, 1032, 1033], "tfidfvector": [14, 19, 70, 260, 345, 369, 405, 408, 480, 579, 580, 581, 1020, 1022, 1028, 1029, 1030, 1033, 1034], "n_top_word": 14, "init": [14, 42, 45, 58, 59, 61, 64, 169, 178, 219, 220, 222, 223, 224, 245, 247, 279, 346, 377, 382, 400, 405, 407, 434, 438, 440, 442, 444, 450, 451, 529, 531, 538, 539, 550, 551, 623, 624, 681, 683, 685, 839, 975, 1020, 1029, 1032, 1034, 1035, 1036], "nndsvda": [14, 405, 529, 531, 538, 1029, 1032], "plot_top_word": 14, "feature_nam": [14, 19, 106, 117, 124, 127, 147, 168, 170, 171, 207, 238, 282, 301, 311, 312, 313, 329, 345, 351, 367, 369, 379, 401, 481, 482, 483, 487, 491, 492, 493, 495, 496, 501, 573, 622, 623, 624, 902, 903, 904, 986, 994, 1036], "flatten": [14, 32, 222, 232, 257, 305, 329, 341, 380, 493, 560, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 839], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 122, 124, 170, 171, 198, 216, 311, 320, 321, 345, 346, 369, 986], "top_featur": 14, "barh": [14, 124, 162, 163, 167, 168, 170, 171, 241, 308, 345, 346, 347], "fontdict": [14, 39], "labels": [14, 305], "set_vis": [14, 283, 289, 301], "filter": [14, 46, 47, 204, 216, 257, 259, 281, 345, 376, 380, 383, 399, 400, 408, 439, 479, 480, 494, 579, 582, 586, 587, 588, 589, 764, 825, 919, 943, 980, 981, 1010, 1013, 1030], "useless": [14, 119, 262, 380, 409, 506, 519, 649, 703, 974, 988, 1029], "earli": [14, 44, 62, 108, 116, 119, 134, 165, 176, 217, 312, 387, 407, 432, 436, 440, 454, 487, 495, 506, 511, 527, 528, 529, 530, 537, 544, 545, 550, 551, 552, 553, 562, 618, 636, 647, 657, 658, 659, 667, 669, 683, 816, 847, 848, 952, 975, 981, 988, 997, 999, 1002, 1020, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035], "strip": [14, 216, 346, 360, 368, 369, 487], "header": [14, 70, 260, 345, 346, 369, 372, 408, 479, 480, 787, 790, 791, 801], "footer": [14, 70, 260, 345, 346, 369, 479, 480], "repli": [14, 345, 373, 374, 377], "common": [14, 17, 19, 98, 144, 147, 165, 166, 172, 254, 266, 313, 345, 347, 354, 360, 363, 368, 374, 376, 382, 384, 385, 386, 389, 391, 397, 398, 399, 400, 401, 404, 406, 409, 410, 456, 458, 487, 581, 623, 644, 663, 664, 692, 736, 743, 759, 802, 813, 816, 851, 853, 861, 862, 863, 868, 870, 875, 876, 878, 879, 880, 881, 929, 967, 968, 974, 981, 984, 988, 993, 994, 998, 999, 1002, 1004, 1015, 1020, 1028, 1030, 1031, 1035], "english": [14, 19, 70, 345, 346, 347, 379, 408, 579, 580, 582, 998, 999, 1013, 1033], "occur": [14, 70, 198, 202, 216, 356, 374, 376, 382, 388, 397, 400, 402, 404, 408, 499, 500, 563, 572, 579, 581, 582, 618, 662, 786, 787, 790, 791, 793, 801, 809, 812, 813, 814, 817, 915, 978, 980, 988, 1013, 1020, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 260, 324, 345, 346, 579, 582, 1031], "min_df": [14, 19, 70, 260, 324, 345, 346, 408, 579, 582, 1020, 1022, 1031], "max_featur": [14, 31, 114, 125, 236, 256, 271, 313, 407, 409, 546, 547, 548, 549, 550, 551, 554, 555, 556, 579, 582, 588, 898, 899, 900, 901, 967, 974, 1020, 1022, 1023, 1027, 1028, 1031, 1034], "stop_word": [14, 19, 345, 346, 408, 579, 580, 582], "tfidf": [14, 70, 324, 408, 582, 1013], "tf_vector": 14, "beta_loss": [14, 529, 531, 538, 1027], "alpha_w": [14, 405, 529, 531, 538, 1033], "00005": 14, "alpha_h": [14, 405, 529, 531, 538, 1033], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 168, 170, 314, 345, 346, 347, 369, 376, 387, 401, 408, 416, 421, 424, 433, 434, 436, 438, 440, 455, 458, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 557, 558, 559, 560, 561, 572, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 679, 680, 683, 834, 839, 842, 846, 849, 850, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 988, 1033, 1034, 1035, 1036], "solver": [14, 30, 33, 34, 46, 66, 165, 176, 187, 189, 190, 191, 198, 200, 213, 214, 216, 217, 295, 296, 297, 298, 308, 345, 380, 385, 387, 390, 396, 400, 412, 443, 453, 462, 463, 469, 493, 524, 526, 531, 532, 535, 538, 540, 637, 638, 639, 643, 644, 649, 650, 651, 652, 653, 654, 657, 659, 660, 661, 663, 665, 667, 671, 672, 675, 678, 679, 680, 682, 684, 686, 778, 801, 816, 821, 824, 847, 848, 892, 893, 894, 895, 896, 972, 975, 978, 982, 992, 993, 998, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "mu": [14, 80, 81, 259, 405, 413, 464, 466, 467, 470, 471, 472, 531, 538, 972, 974, 1027, 1030], "mbnmf": 14, "learning_method": [14, 379, 527], "learning_offset": [14, 527], "tf_feature_nam": 14, "559": [14, 15, 607], "plot_topics_extraction_with_nmf_lda": [14, 15], "220": [15, 44, 1020], "execut": [15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 134, 140, 148, 160, 162, 164, 172, 175, 182, 187, 217, 225, 233, 242, 251, 264, 275, 278, 293, 299, 309, 318, 326, 343, 348, 355, 361, 374, 380, 394, 396, 400, 405, 411, 434, 452, 787, 793, 801, 809, 811, 812, 813, 814, 817, 835, 944, 945, 988, 991, 1005, 1013, 1022, 1025, 1028], "auto_examples_appl": 15, "09": [15, 97, 105, 168, 231, 235, 272, 298, 400, 725, 828, 978, 988, 992], "06": [15, 22, 68, 83, 85, 134, 159, 168, 172, 189, 197, 198, 259, 260, 275, 298, 303, 339, 343, 380, 473, 474, 475, 635, 636, 680, 684, 785, 786, 787, 801, 899, 974, 988, 990], "real": [15, 31, 55, 57, 70, 74, 78, 80, 108, 110, 134, 153, 168, 202, 223, 237, 253, 265, 273, 283, 302, 303, 347, 360, 363, 367, 368, 371, 378, 380, 383, 385, 386, 387, 397, 398, 400, 402, 404, 405, 407, 408, 460, 480, 481, 484, 485, 486, 487, 488, 491, 492, 495, 501, 511, 542, 543, 544, 546, 547, 548, 549, 550, 551, 555, 556, 583, 585, 586, 587, 588, 589, 590, 591, 695, 714, 718, 742, 745, 747, 775, 783, 784, 815, 816, 847, 848, 892, 893, 894, 895, 896, 898, 899, 901, 968, 969, 970, 975, 978, 980, 982, 983, 984, 994, 997, 1015, 1020, 1033], "svm_gui": [15, 16, 1011], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 81, 169, 324, 345, 346, 347, 369, 380, 399, 400, 402, 405, 780, 781, 785, 820, 902, 978, 979, 985, 998, 1013], "frontend": [16, 380], "mainli": [16, 27, 53, 110, 113, 150, 268, 360, 376, 398, 602, 980, 985], "intend": [16, 57, 58, 99, 199, 345, 374, 375, 376, 381, 385, 404, 459, 573, 664, 859, 860, 870, 888, 973, 974, 978, 982, 989], "didact": [16, 374, 999], "region": [16, 25, 36, 47, 49, 53, 56, 66, 68, 131, 157, 165, 168, 198, 216, 227, 231, 232, 250, 304, 332, 371, 381, 387, 400, 407, 410, 439, 441, 447, 453, 578, 975, 978, 981, 984, 988, 992, 994, 1012], "induc": [16, 26, 56, 168, 182, 189, 191, 196, 199, 213, 233, 347, 397, 399, 405, 407, 410, 437, 440, 530, 534, 544, 548, 549, 550, 551, 555, 556, 557, 634, 716, 746, 863, 898, 899, 900, 901, 971, 978, 992, 1011], "mous": [16, 368], "button": [16, 374, 382, 1011], "prettenho": 16, "tkagg": 16, "backend": [16, 361, 387, 459, 888, 944, 946, 948, 978, 1023, 1028, 1029, 1030, 1031], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 34, 314, 363, 377, 378, 383, 387, 391, 428, 432, 436, 438, 440, 441, 448, 450, 469, 517, 527, 528, 529, 530, 531, 537, 544, 545, 546, 547, 560, 561, 570, 571, 573, 618, 624, 629, 635, 636, 641, 642, 645, 646, 647, 649, 655, 656, 731, 746, 758, 768, 769, 770, 790, 791, 793, 825, 826, 827, 829, 837, 849, 863, 892, 893, 894, 895, 896, 906, 921, 922, 924, 967, 968, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "tkinter": 16, "tk": 16, "contourset": 16, "dump_svmlight_fil": [16, 1020, 1021, 1025, 1035], "y_min": [16, 31, 34, 58, 90, 112, 119, 128, 139, 152, 232, 295, 303, 325, 336, 337, 626, 628], "y_max": [16, 31, 34, 58, 90, 112, 119, 128, 139, 152, 216, 232, 295, 303, 325, 336, 337, 626, 628], "x_min": [16, 31, 34, 52, 58, 90, 112, 119, 123, 128, 139, 152, 187, 232, 295, 303, 325, 336, 337], "x_max": [16, 31, 34, 52, 58, 90, 112, 119, 128, 139, 152, 232, 295, 303, 325, 336, 337], "notifi": [16, 563, 564, 565, 1001, 1018, 1030], "regist": [16, 34, 182, 345, 380, 946, 948], "surfac": [16, 108, 134, 165, 190, 207, 328, 329, 349, 355, 407, 495, 544, 548, 555, 622, 754, 898, 904, 972, 977, 992, 993, 994], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 174, 339, 443, 526, 630, 631, 634, 765, 767, 892, 893, 894, 895, 896, 976, 993], "kernel_map": 16, "hasattr": [16, 44, 56, 62, 82, 119, 216, 231, 295, 303, 345, 387, 939, 1030], "decision_surfac": 16, "delta": [16, 403, 443], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 117, 136, 165, 252, 258, 260, 263, 275, 387, 404, 410, 493, 558, 618, 650, 656, 704, 787, 790, 791, 801, 816, 895, 967, 974, 978, 1027, 1028, 1029], "docstr": [16, 374, 376, 380, 387, 439, 452, 463, 690, 692, 917, 967, 978, 981, 982, 992, 1020, 1027, 1028, 1033, 1034], "set_xlim": [16, 31, 42, 60, 75, 80, 92, 115, 128, 163, 169, 196, 198, 203, 232, 244, 263, 265, 266, 284, 295, 301, 303, 304, 305, 306, 312, 341], "attributeerror": [16, 401, 550, 568, 939, 1012, 1029, 1030, 1032, 1036], "get_tk_widget": 16, "pack": [16, 383, 1028], "fill": [16, 34, 119, 136, 170, 254, 284, 351, 387, 401, 405, 506, 518, 529, 531, 538, 578, 621, 902, 904, 968, 981, 994], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 66, 101, 105, 113, 123, 151, 182, 208, 284, 289, 292, 312, 313, 317, 398, 400, 401, 406, 412, 443, 456, 512, 524, 527, 606, 607, 613, 632, 749, 756, 766, 847, 848, 866, 972, 974, 976, 980, 981, 982, 991, 992, 993, 1011], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 216, 374, 378, 380, 400, 459, 527, 637, 643, 888, 975, 999, 1001, 1020, 1025, 1026, 1028, 1033, 1034, 1035], "isinst": [16, 119, 216, 387], "lineset": 16, "support_vector": [16, 330], "place": [16, 60, 228, 238, 283, 360, 372, 374, 375, 376, 379, 381, 388, 398, 408, 410, 432, 436, 437, 473, 474, 475, 506, 572, 581, 619, 621, 622, 758, 771, 785, 957, 958, 998, 1020, 1027, 1030, 1031, 1033], "circl": [16, 60, 100, 128, 129, 139, 224, 235, 286, 289, 296, 301, 303, 322, 353, 370, 378, 382, 400, 443, 453, 505, 513, 754, 993], "dash": [16, 33, 80, 110, 122, 132, 150, 153, 155, 168, 185, 190, 193, 199, 200, 207, 210, 211, 237, 259, 269, 334, 338, 992], "bone": [16, 211, 342], "rais": [16, 199, 234, 235, 262, 305, 314, 374, 376, 378, 379, 380, 383, 385, 387, 391, 394, 401, 404, 428, 434, 435, 438, 440, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 500, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 567, 568, 572, 573, 579, 580, 581, 582, 585, 594, 601, 602, 608, 620, 623, 626, 627, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 687, 689, 693, 700, 702, 703, 704, 705, 717, 719, 720, 728, 746, 768, 772, 773, 774, 777, 778, 779, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 801, 805, 809, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 839, 840, 841, 845, 847, 848, 849, 850, 853, 854, 855, 856, 857, 862, 863, 864, 868, 869, 870, 877, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 905, 908, 910, 911, 913, 914, 931, 939, 962, 963, 964, 965, 978, 988, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "valueerror": [16, 234, 235, 376, 380, 391, 459, 568, 594, 608, 626, 662, 705, 822, 840, 849, 855, 869, 909, 913, 914, 963, 964, 965, 988, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 231, 360, 361, 372, 374, 378, 380, 382, 390, 408, 499, 998, 1013, 1022], "anchor": [16, 270], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 165, 176, 190, 207, 217, 235, 262, 327, 329, 332, 337, 343, 503, 622, 649, 650, 657, 659, 665, 666, 667, 668, 890, 892, 894, 895, 992, 993], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 378, 649, 650, 657, 659, 667, 668, 669, 847, 848, 890, 988], "add_opt": 16, "action": [16, 314, 345, 373, 377, 378, 390, 988, 1030], "store": [16, 32, 53, 54, 70, 72, 81, 90, 144, 158, 174, 184, 187, 202, 220, 228, 238, 249, 264, 268, 320, 347, 354, 360, 368, 369, 374, 376, 381, 382, 383, 385, 387, 401, 403, 405, 407, 408, 410, 411, 429, 431, 435, 437, 441, 448, 460, 461, 464, 465, 466, 467, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 499, 525, 526, 532, 540, 541, 546, 547, 554, 560, 561, 580, 601, 602, 618, 622, 623, 626, 629, 640, 641, 645, 651, 652, 653, 654, 657, 658, 664, 666, 667, 668, 669, 679, 680, 681, 683, 688, 689, 691, 692, 693, 771, 785, 786, 787, 793, 801, 809, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 845, 861, 868, 870, 871, 885, 886, 887, 910, 911, 935, 936, 949, 952, 968, 970, 974, 981, 990, 993, 994, 998, 1004, 1013, 1017, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "dest": [16, 316], "dump": [16, 17, 394, 478, 830, 831], "argv": [16, 231], "opt": [16, 372, 376], "arg": [16, 234, 296, 375, 387, 405, 407, 414, 562, 563, 564, 565, 566, 567, 568, 569, 608, 854, 974, 980, 981], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 324, 385], "classic": [17, 193, 223, 237, 244, 250, 371, 378, 402, 404, 405, 434, 438, 440, 450, 483, 491, 495, 501, 623, 624, 900, 901, 972, 974, 980, 988, 1007, 1020, 1021, 1025, 1034], "graph": [17, 25, 39, 44, 46, 66, 67, 158, 219, 256, 279, 281, 323, 360, 374, 377, 387, 397, 402, 411, 432, 435, 436, 443, 444, 448, 453, 454, 462, 463, 469, 502, 576, 577, 679, 682, 683, 686, 772, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 845, 886, 975, 978, 981, 983, 991, 994, 998, 1002, 1009, 1012, 1020, 1027, 1028, 1030, 1033, 1035], "vertex": [17, 26, 400, 444, 1033], "en": [17, 24, 382, 522, 528, 586, 627, 655, 659, 662, 676, 677, 686, 696, 832, 833, 838, 839, 840, 841, 868, 884, 898, 899, 974, 978, 993, 994], "wiki": [17, 24, 380, 382, 586, 627, 659, 662, 686, 696, 832, 833, 838, 839, 840, 841, 868, 884, 898, 899, 974, 994], "eigenvector_centr": 17, "webpag": [17, 174, 374], "pagerank": 17, "insid": [17, 19, 26, 169, 200, 234, 259, 322, 332, 362, 368, 369, 376, 380, 400, 408, 428, 434, 435, 438, 440, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 580, 581, 582, 585, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 787, 788, 789, 790, 791, 794, 796, 801, 805, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 938, 946, 985, 1002], "accord": [17, 24, 26, 37, 49, 78, 116, 122, 147, 151, 181, 198, 216, 231, 311, 346, 356, 374, 376, 385, 386, 387, 388, 397, 400, 402, 404, 405, 407, 408, 410, 428, 441, 443, 447, 451, 453, 456, 460, 495, 507, 508, 509, 516, 521, 523, 526, 527, 529, 531, 541, 544, 545, 552, 553, 554, 557, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 632, 633, 635, 636, 640, 649, 650, 661, 671, 682, 686, 725, 769, 770, 787, 788, 789, 790, 791, 794, 795, 796, 801, 811, 825, 826, 827, 828, 829, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 853, 860, 868, 880, 882, 883, 890, 891, 892, 893, 895, 896, 972, 974, 978, 980, 981, 988, 991, 992, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "tradit": [17, 55, 198, 213, 346, 362, 398, 407, 408, 623, 685, 974, 977, 988, 1002], "power_iter": 17, "martinsson": [17, 526, 532, 927], "dbpedia": 17, "content": [17, 306, 345, 347, 369, 374, 378, 380, 394, 399, 408, 477, 494, 499, 500, 579, 580, 582, 662, 904, 987, 1002, 1013, 1021, 1030], "bz2": [17, 499, 500], "bz2file": 17, "pprint": [17, 123, 234, 260, 369, 922], "urlopen": 17, "randomized_svd": [17, 383, 442, 444, 523, 532, 535, 537, 1020, 1021, 1026, 1033, 1034, 1035], "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 123, 162, 198, 297, 313, 359, 363, 377, 386, 407, 790, 791, 979, 996, 999, 1002, 1005, 1015, 1028, 1033, 1034], "wait": [17, 374, 378, 387, 657, 658, 659, 667, 669, 1032], "wb": 17, "index_map": 17, "setdefault": [17, 905], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 70, 260, 281, 311, 374, 378, 380, 382, 410, 416, 433, 434, 436, 438, 440, 455, 458, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 630, 631, 632, 633, 679, 680, 683, 793, 814, 834, 839, 842, 846, 850, 856, 882, 883, 1026, 1027, 1033, 1035], "get_redirect": 17, "transit": [17, 378, 1031], "malform": [17, 1024], "1000000": [17, 527], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 55, 66, 82, 98, 105, 117, 123, 168, 169, 194, 223, 230, 234, 296, 301, 332, 345, 369, 376, 378, 386, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 416, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 512, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 614, 618, 619, 620, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 790, 791, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 953, 959, 967, 973, 981, 982, 988, 994, 1002, 1008, 1009, 1011, 1012, 1032, 1033, 1034, 1035, 1036], "break": [17, 39, 46, 70, 81, 165, 187, 204, 234, 246, 314, 321, 327, 343, 345, 347, 374, 376, 378, 380, 386, 400, 460, 503, 630, 764, 768, 771, 785, 863, 870, 875, 892, 895, 974, 977, 986, 988, 993, 999, 1020, 1021, 1027, 1028, 1030, 1032, 1036], "get_adjacency_matrix": 17, "resolv": [17, 373, 374, 378, 382, 388, 408, 437, 443, 453, 682, 686, 927, 968, 978, 1027, 1029, 1030, 1033], "lil_matrix": 17, "float32": [17, 122, 222, 298, 316, 361, 369, 374, 376, 396, 548, 549, 550, 551, 554, 555, 556, 557, 584, 585, 631, 632, 649, 690, 753, 855, 898, 899, 900, 901, 908, 954, 955, 956, 994, 1004, 1013, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "del": [17, 380, 1032, 1033], "convert": [17, 34, 46, 48, 66, 71, 98, 155, 171, 198, 219, 240, 245, 246, 249, 250, 292, 360, 368, 383, 385, 387, 394, 408, 431, 434, 435, 438, 440, 441, 442, 443, 450, 455, 456, 487, 525, 532, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 563, 572, 573, 579, 580, 581, 582, 584, 585, 597, 618, 619, 620, 621, 637, 643, 649, 650, 651, 653, 657, 659, 661, 665, 667, 668, 669, 683, 768, 845, 854, 855, 857, 861, 863, 864, 865, 867, 890, 898, 899, 900, 901, 908, 910, 911, 933, 963, 964, 967, 974, 975, 976, 978, 988, 989, 993, 994, 1013, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1032, 1035, 1036], "csr": [17, 347, 360, 368, 369, 383, 385, 387, 408, 411, 434, 437, 438, 440, 441, 450, 488, 499, 514, 544, 545, 548, 549, 555, 556, 557, 621, 649, 683, 705, 758, 780, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 845, 853, 857, 859, 861, 862, 865, 868, 869, 870, 873, 874, 875, 877, 880, 883, 898, 899, 900, 901, 906, 910, 911, 933, 941, 953, 954, 955, 956, 957, 958, 959, 981, 988, 992, 1020, 1021, 1026, 1028, 1029, 1035, 1036], "tocsr": 17, "convers": [17, 123, 189, 345, 356, 362, 368, 374, 376, 382, 385, 394, 408, 563, 845, 854, 862, 910, 911, 964, 975, 999, 1002, 1028, 1029, 1030, 1033, 1036], "5m": 17, "ram": [17, 53, 362, 407, 882, 883, 980, 993, 1013, 1026, 1032, 1035, 1036], "5000000": 17, "strongest": [17, 191], "highest": [17, 19, 26, 82, 143, 147, 202, 257, 259, 270, 313, 345, 374, 385, 398, 400, 404, 407, 409, 428, 546, 548, 555, 583, 586, 587, 589, 590, 591, 594, 595, 597, 626, 628, 716, 746, 782, 785, 787, 790, 791, 801, 887, 898, 929, 967, 974, 978, 979, 982, 992, 994, 1032], "centrality_scor": 17, "networkx": [17, 383], "copyright": [17, 82], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 371], "dan": [17, 1020, 1024, 1025, 1026, 1028, 1029], "schult": 17, "dschult": 17, "pieter": [17, 1026, 1027, 1034], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 105, 197, 231, 263, 347, 397, 411, 435, 514, 515, 522, 528, 533, 539, 579, 582, 676, 677, 832, 833, 836, 838, 840, 841, 974, 978], "indptr": [17, 279, 354, 1028, 1036], "dangl": 17, "isclos": 17, "guess": [17, 110, 119, 404, 407, 408, 469, 523, 529, 531, 532, 538, 978, 992], "prev_scor": 17, "dot": [17, 32, 33, 34, 44, 49, 54, 57, 62, 78, 79, 80, 82, 85, 86, 96, 97, 98, 103, 105, 110, 113, 150, 151, 157, 158, 168, 179, 182, 190, 192, 193, 205, 232, 245, 246, 248, 249, 263, 328, 330, 360, 376, 380, 383, 387, 397, 405, 408, 524, 529, 531, 538, 581, 582, 605, 637, 638, 641, 643, 644, 645, 648, 651, 652, 653, 654, 672, 675, 678, 751, 753, 862, 902, 928, 976, 980, 988, 992, 993, 1012, 1029], "converg": [17, 57, 61, 78, 79, 121, 123, 150, 156, 159, 191, 200, 206, 214, 245, 247, 296, 297, 301, 306, 321, 362, 383, 387, 397, 400, 405, 408, 410, 412, 431, 434, 437, 438, 439, 440, 443, 445, 450, 451, 452, 453, 462, 463, 469, 473, 474, 475, 524, 526, 527, 528, 529, 530, 537, 544, 562, 601, 635, 636, 637, 638, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 659, 663, 665, 667, 669, 673, 674, 678, 679, 681, 682, 685, 686, 785, 786, 839, 847, 848, 885, 886, 892, 968, 973, 974, 975, 977, 982, 992, 1020, 1023, 1024, 1025, 1027, 1028, 1031, 1033, 1034, 1035, 1036], "l_inf": 17, "scores_max": 17, "err": [17, 85, 99, 110], "6f": [17, 99, 264, 727, 783], "concern": [18, 36, 77, 84, 88, 94, 108, 141, 149, 161, 165, 173, 176, 218, 243, 249, 276, 280, 294, 300, 319, 327, 344, 349, 360, 376, 399, 975, 990], "demo": [18, 22, 36, 68, 126, 165, 182, 204, 249, 260, 268, 306, 345, 346, 376, 397, 400, 408, 431, 432, 435, 437, 438, 439, 441, 442, 444, 446, 449, 493, 502, 503, 504, 532, 695, 696, 708, 710, 727, 781, 783, 851, 870], "spectral": [18, 22, 36, 44, 46, 49, 55, 68, 165, 220, 221, 374, 408, 440, 442, 443, 444, 453, 460, 461, 462, 463, 464, 465, 466, 467, 479, 502, 504, 582, 679, 680, 681, 682, 683, 686, 710, 783, 981, 991, 1014, 1015, 1020, 1021], "twenti": [19, 231, 371, 397, 400, 1013], "comp": [19, 85, 86, 98, 106, 298, 324, 345, 346, 347, 369, 1013], "window": [19, 324, 369, 374, 376, 377, 408, 998, 1020, 1023, 1027, 1031, 1033, 1034], "misc": [19, 53, 98, 260, 324, 345, 346, 347, 369, 1012], "categori": [19, 44, 62, 70, 71, 120, 130, 168, 169, 198, 206, 213, 237, 260, 296, 297, 303, 307, 308, 313, 316, 324, 345, 346, 347, 368, 369, 383, 399, 400, 401, 407, 408, 410, 479, 487, 488, 494, 552, 553, 639, 649, 650, 660, 671, 733, 748, 749, 826, 863, 864, 871, 968, 974, 975, 976, 980, 986, 1004, 1013, 1026, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "noth": [19, 70, 345, 346, 379, 533, 705, 853, 862, 911, 988], "frequenc": [19, 27, 150, 169, 182, 192, 198, 231, 312, 313, 345, 346, 347, 369, 385, 398, 404, 405, 407, 408, 409, 542, 548, 550, 551, 552, 555, 579, 580, 581, 582, 595, 649, 650, 655, 657, 659, 665, 666, 667, 676, 677, 819, 854, 863, 864, 890, 892, 895, 898, 900, 916, 974, 975, 980, 988, 992, 994, 1022, 1024, 1025, 1031], "dhillon": [19, 397, 442, 444, 502], "cut": [19, 43, 46, 65, 66, 221, 378, 385, 397, 400, 437, 443, 444, 453, 579, 582, 682, 686, 988], "minibatchkmean": [19, 36, 44, 50, 61, 68, 165, 346, 362, 400, 405, 431, 433, 438, 503, 769, 1021, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036], "coclust": [19, 397, 442, 504], "4415": 19, "3015": 19, "talk": [19, 70, 260, 345, 346, 347, 363, 369, 387, 394, 1002, 1005, 1013], "polit": [19, 345, 369, 373, 974, 979], "mideast": [19, 369], "cosmo": 19, "angmar": 19, "alfalfa": 19, "alphalpha": 19, "prolin": [19, 306, 371], "benson": 19, "1948": 19, "4325": 19, "gun": [19, 369], "17": [19, 39, 52, 74, 80, 151, 168, 197, 213, 231, 237, 242, 262, 295, 305, 369, 372, 379, 390, 392, 393, 400, 404, 410, 435, 452, 478, 488, 491, 514, 522, 527, 531, 538, 540, 541, 546, 550, 551, 560, 561, 588, 619, 640, 648, 649, 650, 657, 660, 663, 665, 678, 683, 719, 720, 730, 751, 756, 774, 777, 779, 805, 828, 839, 854, 859, 860, 868, 870, 876, 892, 895, 898, 899, 900, 901, 967, 968, 979, 981, 988, 996, 1016, 1018, 1020, 1021, 1022, 1023, 1026, 1029, 1034], "sci": [19, 70, 345, 346, 347, 369, 385, 680, 684, 861, 975, 988, 1013], "med": [19, 70, 268, 369, 988, 1013], "geb": 19, "gordon": [19, 247, 1026, 1030, 1032, 1034], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1259": 19, "3534": 19, "soc": [19, 369, 1013], "religion": [19, 260, 345, 346, 347, 369, 979, 1013], "alt": [19, 260, 324, 345, 346, 347, 369, 382, 1013], "atheism": [19, 260, 324, 345, 346, 347, 369, 1013], "god": [19, 345, 346, 1013], "jesu": [19, 345, 346], "kent": 19, "belief": [19, 259, 846, 983], "christ": 19, "faith": [19, 156, 337], "moral": [19, 71, 345, 649, 1028, 1032, 1033], "775": [19, 318], "1623": 19, "pc": [19, 324, 347, 369], "hardwar": [19, 324, 347, 360, 361, 369, 372, 996, 998, 1034, 1035], "scsi": 19, "nada": 19, "vga": 19, "esdi": 19, "isa": 19, "kth": [19, 808], "s3": [19, 96, 147, 186, 187, 371, 1012], "vlb": 19, "bmug": 19, "2180": 19, "2802": 19, "mac": [19, 307, 324, 369, 374, 699, 978], "electron": [19, 369, 371, 529, 531, 538, 618], "voltag": 19, "ship": [19, 130, 163, 351, 361, 372, 390, 408, 974, 1020, 1029], "circuit": [19, 975], "mpce": 19, "kolstad": 19, "spectralcoclust": [19, 21, 397, 442, 1022, 1027, 1031], "v_measure_scor": [19, 37, 38, 49, 58, 317, 346, 400, 708, 726, 727, 747, 978, 1029], "number_norm": 19, "token": [19, 347, 360, 369, 378, 408, 527, 579, 580, 581, 582, 1020, 1028, 1032], "placehold": [19, 378, 618, 619, 620, 621, 802, 803, 806, 807, 968], "begin": [19, 150, 254, 261, 277, 314, 345, 356, 374, 379, 380, 387, 397, 400, 407, 544, 545, 550, 552, 553, 657, 658, 667, 668, 669, 967, 974, 978, 988, 990, 992, 1028, 1034, 1035], "By": [19, 45, 95, 126, 127, 177, 202, 234, 268, 301, 311, 317, 345, 361, 374, 380, 381, 387, 391, 400, 401, 403, 404, 405, 406, 407, 409, 429, 432, 436, 437, 441, 455, 458, 459, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 515, 517, 540, 541, 548, 549, 550, 551, 555, 556, 576, 577, 579, 580, 582, 597, 600, 623, 624, 662, 664, 666, 668, 681, 683, 685, 688, 691, 693, 694, 709, 719, 720, 724, 728, 773, 774, 777, 782, 784, 790, 791, 836, 850, 851, 863, 864, 866, 868, 878, 880, 888, 893, 894, 898, 899, 900, 901, 910, 911, 946, 967, 968, 970, 974, 978, 985, 988, 990, 994, 1004, 1008, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1034], "isdigit": [19, 408], "numbernormalizingvector": 19, "build_token": [19, 408, 579, 580, 582], "super": [19, 25, 27, 376, 408, 1028], "forsal": [19, 347, 369], "rec": [19, 347, 369, 632], "auto": [19, 25, 27, 33, 44, 45, 48, 57, 58, 60, 92, 95, 143, 144, 154, 174, 181, 219, 220, 221, 222, 224, 232, 237, 239, 256, 258, 266, 279, 282, 287, 303, 311, 312, 313, 314, 315, 316, 328, 329, 330, 335, 338, 339, 347, 368, 369, 376, 407, 409, 410, 411, 432, 435, 436, 437, 438, 440, 441, 443, 448, 450, 453, 487, 499, 500, 526, 529, 531, 532, 535, 538, 540, 548, 549, 552, 553, 554, 555, 556, 558, 559, 584, 585, 588, 593, 598, 599, 620, 622, 623, 624, 626, 630, 637, 638, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 691, 693, 725, 731, 790, 791, 818, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 847, 848, 863, 864, 871, 882, 883, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 926, 927, 944, 947, 969, 972, 974, 975, 978, 979, 981, 988, 993, 998, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "motorcycl": [19, 369], "sport": [19, 369], "basebal": [19, 369], "hockei": [19, 369], "crypt": [19, 369], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 95, 315, 346, 374, 387, 400, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 450, 451, 452, 453, 454, 502, 504, 1012, 1020, 1024, 1026, 1028, 1029, 1031, 1034], "svd_method": [19, 442, 444, 523, 1023], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 57, 58, 61, 68, 165, 247, 250, 304, 315, 346, 383, 400, 431, 434, 439, 440, 443, 453, 503, 780, 781, 785, 786, 855, 981, 988, 999, 1012, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "20000": [19, 97], "n_init": [19, 42, 43, 44, 45, 48, 50, 57, 58, 60, 61, 64, 95, 219, 220, 221, 222, 312, 315, 346, 400, 434, 438, 440, 442, 443, 444, 450, 453, 681, 685, 785, 786, 1012, 1020, 1028, 1034, 1035, 1036], "y_coclust": 19, "row_labels_": [19, 20, 21, 397, 442, 444], "y_kmean": 19, "fit_predict": [19, 56, 57, 60, 227, 234, 286, 376, 387, 400, 418, 422, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 460, 554, 668, 785, 786, 836, 842, 850, 894, 984, 1025, 1028, 1029, 1033, 1035, 1037], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 55, 59, 63, 64, 70, 116, 131, 219, 237, 341, 502, 504], "get_indic": [19, 415, 442, 444], "float_info": 19, "row_compl": 19, "logical_not": [19, 64, 105, 201], "rows_": [19, 397, 415, 442, 444], "col_compl": 19, "columns_": [19, 397, 415, 442, 444], "ident": [19, 64, 122, 193, 198, 216, 227, 231, 325, 345, 369, 376, 387, 397, 400, 401, 402, 404, 410, 413, 429, 430, 443, 455, 456, 464, 466, 467, 470, 471, 472, 479, 494, 542, 550, 551, 555, 556, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 634, 670, 671, 695, 696, 726, 775, 783, 789, 792, 802, 803, 804, 806, 807, 832, 833, 839, 847, 848, 854, 855, 867, 879, 898, 899, 971, 972, 975, 978, 981, 982, 993, 1024, 1028, 1029, 1030, 1034], "most_common": 19, "counter": [19, 110, 266, 400, 667, 668, 669, 1033], "itemgett": 19, "revers": [19, 75, 147, 203, 259, 525, 532, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 602, 779, 850, 978, 1020, 1021, 1030, 1032, 1036], "best_idx": [19, 258], "get_shap": [19, 415, 442, 444], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 58], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "816": [19, 22, 83, 260, 462, 463], "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 397, 442, 444, 502, 504], "simultan": [20, 55, 96, 263, 267, 317, 353, 366, 397, 400, 967, 978, 979, 994, 1002, 1027], "aim": [20, 81, 163, 202, 287, 322, 362, 369, 372, 374, 387, 394, 400, 402, 408, 439, 974, 978, 981, 988, 993, 998, 1004, 1012, 1034], "identifi": [20, 97, 104, 123, 124, 167, 168, 198, 201, 202, 247, 249, 257, 262, 268, 288, 308, 313, 345, 346, 368, 369, 373, 374, 378, 379, 387, 400, 401, 404, 407, 408, 437, 441, 448, 478, 487, 499, 500, 546, 547, 554, 597, 634, 640, 690, 703, 764, 815, 836, 855, 885, 886, 967, 974, 978, 984, 991, 1002, 1011, 1027, 1029, 1034, 1035], "particularli": [20, 31, 70, 71, 74, 105, 128, 199, 229, 259, 303, 312, 342, 356, 360, 374, 383, 387, 400, 401, 403, 406, 408, 487, 793, 809, 827, 927, 946, 947, 974, 975, 978, 980, 999, 1002, 1012, 1020, 1025, 1027, 1028, 1034], "suit": [20, 95, 128, 168, 198, 199, 227, 249, 314, 315, 317, 345, 361, 374, 376, 379, 380, 382, 385, 390, 403, 405, 407, 410, 441, 443, 494, 668, 827, 871, 921, 967, 970, 975, 978, 980, 981, 992, 998, 999, 1002, 1006, 1027, 1034], "arrang": [20, 277, 623, 821, 822, 823, 824, 978], "genom": [20, 504], "rearrang": [20, 21, 397], "kemaleren": [20, 21], "make_checkerboard": [20, 502, 1022], "uniform": [20, 31, 37, 53, 122, 123, 126, 143, 151, 156, 159, 177, 178, 212, 224, 227, 230, 267, 282, 285, 286, 291, 295, 302, 304, 305, 308, 315, 317, 331, 376, 379, 400, 429, 430, 542, 560, 561, 601, 602, 619, 630, 640, 641, 645, 659, 667, 668, 669, 712, 713, 718, 735, 736, 738, 740, 741, 743, 775, 791, 799, 801, 825, 826, 829, 832, 833, 840, 841, 855, 867, 869, 879, 915, 929, 967, 968, 977, 978, 981, 1026, 1028, 1030, 1034, 1036], "deviat": [20, 34, 61, 80, 113, 116, 117, 118, 119, 147, 150, 155, 157, 159, 168, 177, 204, 256, 257, 258, 259, 260, 262, 285, 286, 301, 306, 366, 370, 371, 379, 383, 387, 404, 407, 441, 463, 492, 502, 503, 504, 505, 507, 508, 509, 513, 515, 516, 521, 543, 585, 602, 625, 635, 636, 662, 714, 742, 793, 809, 836, 859, 860, 870, 879, 880, 881, 974, 978, 984, 988, 1011, 1026, 1027, 1028, 1031, 1032, 1033], "matshow": [20, 21, 66, 118, 145, 297, 493], "afterward": [20, 378, 526, 532, 814], "row_idx_shuffl": 20, "permut": [20, 21, 37, 81, 118, 124, 139, 165, 166, 172, 214, 252, 275, 308, 389, 395, 400, 407, 455, 487, 491, 495, 550, 551, 555, 556, 618, 621, 625, 670, 695, 696, 708, 726, 727, 745, 747, 783, 804, 806, 815, 816, 850, 864, 895, 898, 899, 927, 947, 949, 952, 978, 992, 1008, 1011, 1015, 1020, 1026, 1033, 1035], "col_idx_shuffl": 20, "redefin": [20, 123, 168], "lost": [20, 57, 82, 369, 375, 385, 975, 978], "strucutur": 20, "ground": [20, 32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 126, 158, 182, 192, 198, 199, 250, 262, 346, 387, 399, 400, 694, 695, 696, 699, 703, 704, 705, 706, 708, 709, 712, 713, 714, 718, 719, 720, 724, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 773, 774, 775, 776, 777, 783, 784, 978, 991, 1004, 1012, 1028], "truth": [20, 32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 103, 126, 158, 182, 192, 198, 199, 250, 262, 346, 387, 399, 400, 694, 695, 696, 699, 703, 704, 705, 706, 708, 709, 712, 713, 714, 716, 718, 719, 720, 724, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 773, 774, 775, 776, 777, 783, 784, 978, 1004, 1012, 1028, 1034], "consensus_scor": [20, 21, 397, 1022], "biclusters_": [20, 21, 415, 442, 444], "consensu": [20, 21, 37, 373, 374, 388, 397, 400, 640, 662, 669, 670, 710, 978], "1f": [20, 30, 50, 53, 98, 178, 198, 231, 244, 246, 266, 311, 346, 347], "perfect": [20, 26, 37, 70, 81, 98, 100, 194, 198, 345, 346, 374, 378, 400, 404, 544, 545, 681, 685, 695, 696, 699, 708, 716, 718, 721, 727, 733, 746, 747, 775, 776, 783, 974, 978, 981, 993, 1002, 1011, 1034], "ascend": [20, 71, 170, 307, 407, 441, 447, 618, 626, 902, 903, 904, 992, 1030, 1036], "column_labels_": [20, 21, 397, 442, 444], "reorder": [20, 45, 102, 387, 688, 709, 999, 1028], "reordered_row": 20, "reordered_data": 20, "step": [20, 26, 33, 42, 54, 55, 58, 67, 70, 71, 72, 73, 74, 81, 86, 98, 103, 110, 115, 119, 120, 130, 144, 145, 146, 152, 155, 168, 170, 198, 206, 216, 228, 229, 232, 238, 241, 250, 257, 260, 266, 268, 279, 281, 287, 295, 298, 303, 306, 307, 312, 315, 325, 328, 332, 346, 347, 350, 356, 360, 363, 369, 372, 373, 374, 376, 378, 379, 382, 385, 387, 397, 398, 400, 402, 403, 405, 407, 408, 409, 433, 438, 440, 527, 528, 529, 530, 537, 554, 579, 580, 582, 584, 585, 588, 597, 618, 635, 639, 657, 658, 660, 667, 669, 670, 671, 685, 691, 785, 786, 787, 790, 791, 801, 821, 822, 823, 824, 846, 847, 848, 850, 851, 853, 890, 891, 892, 893, 895, 896, 926, 927, 949, 953, 968, 974, 977, 982, 983, 988, 992, 994, 995, 998, 1001, 1009, 1013, 1020, 1024, 1025, 1027, 1028, 1029, 1031, 1032, 1033, 1036], "outer": [20, 100, 264, 322, 442, 505, 631, 641, 642, 645, 970, 1021], "product": [20, 71, 95, 131, 150, 155, 169, 356, 360, 376, 377, 380, 383, 394, 397, 405, 407, 442, 529, 531, 538, 573, 580, 581, 582, 604, 605, 624, 631, 655, 656, 676, 677, 751, 753, 765, 767, 862, 865, 882, 883, 928, 967, 970, 974, 976, 988, 990, 992, 993, 998, 1002, 1028], "shade": [20, 53, 181, 282, 287, 328, 405], "492": [20, 22, 634, 971, 1011], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 363, 408, 415, 440, 442, 444, 479, 502, 504, 582, 710, 783, 978, 1014, 1015, 1022, 1026], "make_biclust": [21, 504, 1022], "implant": 21, "row_idx": [21, 198], "col_idx": 21, "fit_data": 21, "332": [21, 22, 231, 346, 878], "plot_spectral_coclust": [21, 22], "640": [22, 398, 481, 497, 498, 574, 575, 967], "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 35, 55, 75, 92, 108, 109, 131, 134, 142, 149, 150, 151, 152, 160, 165, 168, 219, 223, 228, 231, 259, 262, 265, 266, 269, 301, 305, 311, 313, 323, 325, 360, 363, 369, 370, 376, 380, 385, 387, 400, 404, 405, 408, 409, 410, 426, 427, 428, 429, 430, 437, 438, 440, 495, 503, 506, 514, 518, 540, 541, 542, 544, 546, 548, 550, 552, 553, 555, 558, 560, 561, 584, 585, 601, 604, 605, 613, 618, 623, 624, 649, 650, 662, 667, 683, 689, 691, 693, 694, 697, 698, 700, 703, 707, 711, 716, 717, 719, 729, 730, 731, 732, 746, 772, 774, 777, 778, 779, 782, 785, 786, 787, 790, 791, 801, 815, 816, 819, 821, 822, 825, 826, 827, 828, 829, 832, 835, 840, 846, 847, 883, 884, 885, 886, 887, 890, 892, 895, 898, 900, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 988, 990, 991, 992, 994, 999, 1000, 1001, 1013, 1015, 1020, 1022, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1034], "confid": [24, 25, 26, 27, 155, 157, 245, 259, 262, 323, 388, 398, 410, 627, 649, 650, 657, 659, 662, 665, 666, 667, 689, 693, 698, 711, 716, 717, 729, 730, 746, 779, 818, 857, 890, 892, 895, 974, 977, 978, 979, 984, 991, 992, 993, 1002, 1013, 1030], "being": [24, 27, 45, 52, 55, 82, 86, 90, 100, 110, 114, 127, 150, 155, 168, 170, 174, 192, 234, 253, 259, 305, 306, 332, 345, 347, 372, 373, 374, 376, 378, 379, 385, 387, 388, 394, 400, 402, 404, 407, 408, 409, 410, 411, 413, 432, 433, 435, 436, 441, 447, 460, 466, 484, 514, 560, 631, 640, 647, 663, 665, 678, 681, 685, 703, 709, 719, 724, 726, 773, 779, 785, 830, 831, 836, 838, 840, 841, 842, 865, 883, 928, 967, 968, 974, 977, 978, 981, 984, 985, 986, 988, 990, 992, 993, 994, 1020, 1021, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1036], "postprocess": [24, 398, 526, 532], "brier": [24, 25, 398, 700], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 366, 407, 428, 443, 526, 552, 611, 630, 634, 755, 764, 767, 847, 848, 892, 893, 894, 895, 896, 983, 993, 1011, 1015, 1033], "isoton": [24, 25, 165, 226, 242, 363, 428, 648, 913, 1000, 1015, 1021, 1022, 1023, 1024, 1026, 1033, 1036], "belong": [24, 27, 55, 60, 237, 259, 311, 317, 322, 368, 369, 397, 398, 400, 403, 404, 407, 415, 431, 434, 438, 439, 440, 442, 444, 514, 703, 721, 794, 800, 811, 837, 857, 871, 934, 935, 974, 977, 978, 980, 981, 982, 984, 993, 998, 1004, 1011], "mblondel": [24, 48, 189, 220, 260, 345, 368, 499], "telecom": [24, 25, 42, 227, 1002], "balaz": [24, 1024], "kegl": [24, 1024], "jhm": [24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233], "informatik": [24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233, 978], "uni": [24, 25, 26, 27, 74, 114, 150, 151, 153, 154, 155, 156, 157, 159, 189, 232, 233, 322, 340], "bremen": [24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233], "style": [24, 26, 81, 123, 187, 206, 216, 263, 374, 381, 400, 408, 434, 438, 450, 691, 793, 809, 910, 911, 1020, 1023, 1034], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 91, 190, 210, 227, 247, 304, 312, 315, 330, 333, 334, 341, 370, 376, 377, 407, 506, 1028, 1031, 1034], "50000": 24, "n_bin": [24, 25, 27, 53, 198, 216, 302, 304, 308, 429, 430, 855, 988], "calibration_curv": [24, 398, 428, 429, 1029, 1034], "blob": [24, 33, 42, 44, 57, 62, 64, 91, 400, 439, 503, 1025], "sample_weight": [24, 179, 198, 211, 216, 234, 312, 317, 342, 374, 387, 391, 400, 407, 411, 417, 423, 428, 434, 435, 438, 440, 450, 451, 456, 460, 473, 474, 475, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 601, 602, 623, 624, 625, 626, 628, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 688, 689, 691, 693, 694, 698, 699, 700, 703, 704, 707, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 724, 725, 728, 729, 730, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 772, 773, 774, 775, 777, 778, 779, 782, 784, 787, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 855, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 938, 966, 978, 992, 993, 994, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "sw_train": [24, 312], "sw_test": [24, 312], "calibratedclassifiercv": [24, 25, 26, 356, 387, 398, 667, 967, 993, 999, 1024, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "brier_score_loss": [24, 25, 398, 978, 1028, 1029, 1030], "gaussiannb": [24, 25, 27, 31, 132, 261, 356, 398, 407, 428, 560, 825, 826, 827, 829, 851, 972, 979, 980, 1024, 1025, 1026, 1028, 1033, 1036], "With": [24, 34, 44, 67, 75, 100, 121, 143, 165, 169, 198, 200, 226, 228, 233, 235, 241, 242, 259, 283, 360, 363, 369, 374, 376, 387, 400, 401, 404, 407, 409, 428, 430, 492, 573, 623, 624, 649, 758, 848, 851, 853, 864, 870, 871, 897, 899, 971, 974, 975, 978, 979, 981, 982, 985, 992, 994, 1004, 1005, 1012, 1017, 1023, 1027, 1028, 1030, 1032, 1034], "itself": [24, 49, 55, 110, 123, 126, 169, 182, 196, 234, 240, 268, 279, 308, 332, 346, 360, 362, 373, 374, 376, 378, 387, 391, 399, 400, 411, 431, 432, 435, 436, 437, 460, 461, 462, 463, 464, 465, 466, 467, 518, 522, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 542, 557, 560, 574, 583, 586, 587, 589, 590, 591, 593, 594, 630, 631, 632, 633, 634, 636, 646, 680, 682, 780, 781, 825, 826, 827, 828, 829, 830, 831, 835, 843, 844, 855, 856, 857, 885, 886, 970, 974, 975, 977, 981, 982, 986, 998, 1024, 1035], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 128, 132, 151, 152, 153, 154, 234, 268, 295, 303, 306, 311, 313, 345, 376, 381, 387, 398, 399, 407, 428, 429, 540, 541, 542, 544, 546, 548, 550, 552, 555, 558, 560, 584, 585, 601, 610, 611, 613, 614, 622, 623, 624, 649, 650, 667, 689, 691, 693, 731, 732, 778, 785, 786, 787, 790, 791, 801, 811, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 832, 840, 847, 850, 857, 885, 886, 887, 892, 895, 898, 900, 974, 978, 980, 982, 985, 991, 992, 993, 994, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 112, 125, 182, 190, 204, 206, 207, 234, 321, 337, 340, 351, 371, 382, 385, 390, 400, 465, 550, 551, 581, 582, 626, 636, 655, 667, 669, 676, 677, 785, 974], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": [24, 60, 68, 102, 107], "109": [24, 53, 979, 1022], "y_uniqu": 24, "rainbow": [24, 221], "this_i": [24, 204], "this_x": [24, 196, 204, 1011], "this_sw": 24, "lexsort": 24, "51": [24, 92, 155, 216, 279, 400, 401, 771, 974, 1016], "uncalibr": [24, 25, 26, 428], "gnb": [24, 25, 27, 132, 407, 560, 980], "381": [24, 28], "plot_calibr": [24, 28], "reliabl": [25, 27, 398, 404, 429, 430, 637, 994, 1002], "diagram": [25, 27, 71, 239, 312, 398, 400, 429, 430, 459, 888, 988, 1031, 1032], "redund": [25, 27, 106, 146, 245, 250, 356, 370, 373, 374, 379, 387, 398, 506, 625, 999, 1013, 1032], "uninform": [25, 27, 308, 370, 379, 408, 967, 974, 1028], "rest": [25, 30, 120, 124, 165, 176, 182, 213, 217, 234, 247, 311, 324, 329, 380, 387, 399, 410, 503, 601, 622, 635, 649, 650, 667, 744, 778, 818, 819, 820, 839, 890, 892, 895, 974, 978, 979, 982, 985, 993, 1002, 1024, 1025, 1034, 1035, 1036], "make_classif": [25, 27, 31, 91, 114, 115, 117, 121, 144, 146, 256, 262, 270, 271, 289, 295, 303, 311, 313, 317, 340, 356, 370, 377, 396, 428, 429, 503, 544, 546, 548, 555, 657, 688, 689, 691, 693, 809, 814, 820, 847, 850, 890, 967, 978, 979, 988, 993, 1026, 1027, 1028, 1030], "100_000": [25, 27, 168], "n_inform": [25, 27, 31, 91, 114, 117, 144, 146, 177, 182, 201, 202, 256, 262, 272, 289, 295, 303, 311, 340, 376, 379, 506, 515, 544, 545, 546, 547, 555, 556, 656, 820, 979, 1028], "n_redund": [25, 27, 31, 91, 117, 144, 146, 256, 262, 289, 295, 303, 379, 428, 506, 544, 546, 555, 820], "logisticregress": [25, 27, 30, 71, 73, 115, 132, 138, 146, 181, 188, 189, 190, 191, 205, 213, 214, 228, 229, 239, 241, 262, 268, 277, 298, 303, 311, 312, 313, 314, 315, 317, 345, 360, 374, 376, 380, 382, 386, 391, 398, 401, 407, 409, 429, 558, 560, 588, 622, 625, 634, 643, 650, 663, 664, 665, 666, 667, 678, 691, 778, 801, 809, 821, 822, 824, 875, 876, 878, 879, 880, 881, 897, 922, 974, 978, 979, 988, 992, 993, 1009, 1011, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "baselin": [25, 110, 120, 123, 133, 147, 177, 216, 269, 277, 313, 346, 371, 400, 409, 542, 543, 625, 978, 981, 1013, 1036], "regular": [25, 36, 68, 71, 73, 79, 100, 108, 134, 157, 162, 165, 176, 177, 178, 182, 183, 185, 186, 187, 189, 198, 212, 216, 217, 233, 245, 253, 260, 263, 272, 284, 285, 294, 297, 298, 299, 306, 307, 327, 329, 331, 332, 333, 343, 345, 347, 350, 360, 374, 385, 386, 398, 400, 402, 403, 405, 406, 407, 410, 428, 434, 438, 462, 463, 467, 469, 470, 471, 472, 495, 503, 505, 506, 511, 513, 515, 519, 529, 530, 531, 534, 538, 539, 541, 550, 552, 553, 579, 580, 582, 629, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 680, 684, 725, 731, 740, 785, 786, 804, 816, 817, 847, 848, 851, 870, 890, 891, 892, 893, 895, 896, 897, 967, 968, 970, 971, 972, 975, 977, 983, 984, 988, 991, 992, 993, 1000, 1002, 1008, 1009, 1011, 1015, 1020, 1021, 1022, 1024, 1025, 1029, 1030, 1032, 1033], "logist": [25, 27, 30, 69, 71, 76, 115, 138, 165, 176, 217, 228, 241, 277, 298, 306, 315, 345, 387, 388, 398, 401, 407, 409, 410, 428, 480, 487, 493, 495, 503, 532, 550, 552, 562, 601, 622, 637, 648, 649, 650, 657, 659, 667, 731, 787, 801, 816, 846, 847, 848, 850, 870, 897, 913, 915, 978, 982, 983, 992, 993, 1000, 1002, 1009, 1015, 1024, 1027, 1028, 1030, 1031], "guid": [25, 55, 69, 95, 116, 159, 165, 168, 169, 186, 219, 266, 285, 286, 289, 307, 311, 312, 313, 314, 315, 316, 317, 363, 372, 373, 374, 379, 380, 381, 386, 387, 388, 391, 399, 401, 407, 411, 412, 413, 414, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 450, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 923, 978, 979, 1006, 1013, 1020, 1021, 1022, 1023, 1025, 1027, 1029, 1030], "gridspec": [25, 27, 65, 244, 381], "calibrationdisplai": [25, 27, 398, 1033, 1034], "lr": [25, 27, 115, 132, 133, 201, 213, 229, 230, 255, 262, 386, 391, 407, 559, 560, 561, 703], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 337], "dark2": [25, 27, 220], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 108, 134, 165, 198, 231, 265, 284, 301, 313, 398, 481, 550, 551, 552, 553, 555, 556, 633, 748, 749, 787, 792, 970, 976, 988, 1014, 1015, 1032, 1035], "grid_posit": [25, 27], "y_prob": [25, 27, 153, 429, 430, 700, 821, 847, 978, 1034], "poorli": [25, 62, 78, 86, 113, 125, 223, 361, 400, 407, 519, 621, 974, 975, 1026], "violat": [25, 332, 382, 385, 387, 626, 914, 985, 992, 994], "independ": [25, 27, 37, 46, 96, 97, 99, 115, 119, 157, 169, 236, 259, 262, 264, 268, 277, 301, 308, 311, 346, 356, 360, 361, 370, 376, 378, 386, 387, 390, 397, 398, 399, 400, 401, 402, 403, 404, 408, 412, 440, 455, 479, 494, 506, 507, 508, 509, 511, 523, 524, 526, 528, 530, 531, 537, 538, 542, 543, 595, 598, 599, 616, 631, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 663, 664, 665, 666, 695, 696, 708, 726, 727, 745, 747, 783, 789, 815, 819, 821, 823, 824, 862, 866, 867, 868, 870, 874, 875, 876, 877, 879, 880, 881, 884, 892, 893, 894, 895, 896, 921, 967, 970, 972, 974, 975, 978, 979, 980, 983, 985, 988, 993, 994, 1014, 1015, 1020, 1021, 1026, 1028, 1030, 1035], "overli": [25, 26, 187, 264, 356, 405, 978], "typic": [25, 27, 99, 174, 182, 198, 202, 216, 233, 261, 262, 266, 268, 269, 285, 286, 313, 332, 346, 360, 367, 368, 369, 372, 376, 377, 378, 383, 386, 387, 398, 399, 400, 401, 404, 405, 407, 408, 410, 434, 438, 440, 487, 542, 544, 546, 547, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 620, 629, 631, 634, 645, 646, 647, 662, 673, 674, 703, 857, 864, 868, 871, 926, 927, 938, 963, 967, 971, 974, 975, 977, 978, 979, 980, 984, 986, 1002, 1013, 1029, 1033, 1036], "transpos": [25, 259, 412, 517, 529, 531, 538, 651, 652, 653, 654, 778, 927, 964, 978, 990, 1012, 1020, 1034], "nearli": [25, 262, 369, 387, 399, 754, 978, 981, 990, 1013], "albeit": 25, "strongli": [25, 27, 82, 86, 98, 120, 124, 168, 180, 213, 234, 265, 345, 374, 389, 390, 398, 407, 649, 726, 783, 974, 975, 1015, 1029, 1036], "plenti": 25, "greater": [25, 92, 110, 112, 168, 215, 232, 247, 265, 277, 285, 286, 350, 360, 370, 379, 387, 398, 400, 403, 407, 432, 436, 440, 443, 454, 463, 527, 532, 548, 549, 550, 551, 552, 553, 555, 556, 557, 584, 585, 588, 601, 602, 619, 631, 633, 636, 655, 657, 658, 662, 667, 668, 669, 683, 700, 703, 711, 725, 726, 729, 732, 778, 783, 785, 786, 820, 832, 833, 840, 841, 847, 848, 853, 868, 880, 884, 887, 898, 899, 900, 901, 927, 947, 967, 973, 974, 975, 978, 979, 984, 988, 993, 994, 1023, 1028, 1031, 1033, 1034, 1035], "exploit": [25, 277, 979, 999, 1023], "f1_score": [25, 266, 324, 369, 728, 978, 1020, 1022, 1023, 1024, 1025, 1029, 1030, 1036], "log_loss": [25, 26, 122, 125, 151, 306, 324, 345, 387, 398, 407, 548, 550, 552, 555, 637, 649, 667, 898, 900, 967, 974, 978, 992, 994, 1022, 1024, 1026, 1034, 1035, 1036], "precision_scor": [25, 266, 699, 777, 978, 1020, 1022, 1023, 1024, 1025, 1030, 1036], "recall_scor": [25, 266, 404, 699, 774, 978, 1020, 1022, 1023, 1024, 1025, 1030, 1036], "roc_auc_scor": [25, 259, 268, 311, 693, 697, 698, 699, 779, 978, 1022, 1023, 1028, 1030, 1034, 1035], "score_nam": [25, 37, 233, 261, 274, 317, 346, 793, 809], "score_df": 25, "set_index": [25, 110, 123, 155, 187, 216, 259, 307, 346], "decim": [25, 156, 462, 463, 903, 1027, 1028], "098921": 25, "323178": 25, "937457": 25, "872009": 25, "851408": 25, "861586": 25, "117608": 25, "782755": 25, "940374": 25, "857400": 25, "875941": 25, "866571": 25, "098332": 25, "370738": 25, "938613": 25, "883065": 25, "836224": 25, "859007": 25, "108880": 25, "368896": 25, "940201": 25, "861106": 25, "871277": 25, "866161": 25, "refin": [25, 82, 463, 700, 978, 1013], "alter": [25, 163, 376, 387, 719, 720, 728, 773, 774, 777, 1025, 1029, 1032], "uncertainti": [25, 150, 157, 177, 261, 398, 400, 558, 559, 634, 850, 968, 990], "linearsvc": [25, 27, 70, 72, 143, 144, 165, 174, 232, 256, 258, 266, 303, 311, 327, 329, 340, 343, 345, 360, 376, 380, 398, 408, 409, 428, 503, 558, 568, 622, 630, 634, 643, 663, 664, 665, 666, 667, 678, 725, 732, 813, 818, 891, 892, 895, 897, 974, 978, 979, 993, 1020, 1021, 1022, 1026, 1028, 1031, 1036], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 216, 230, 301, 332, 626, 667, 731, 860, 988, 1024, 1031, 1032], "proba_neg_class": [25, 27], "proba": [25, 27, 30, 132, 428, 898, 900], "dual": [25, 27, 70, 72, 143, 144, 174, 232, 256, 258, 266, 303, 311, 329, 330, 340, 345, 408, 409, 462, 463, 469, 558, 559, 602, 630, 637, 638, 643, 644, 649, 650, 651, 652, 653, 654, 672, 675, 725, 818, 830, 831, 890, 891, 892, 895, 978, 979, 993, 1022, 1031, 1034, 1036], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 53, 67, 100, 168, 169, 187, 266, 387, 398, 402, 404, 409, 434, 438, 440, 460, 529, 531, 538, 554, 703, 720, 836, 894, 1020], "behavior": [25, 27, 37, 39, 52, 162, 165, 168, 169, 198, 216, 234, 250, 252, 262, 275, 297, 301, 303, 308, 332, 356, 361, 368, 371, 374, 376, 378, 382, 383, 387, 398, 400, 404, 408, 527, 542, 557, 657, 658, 659, 667, 668, 669, 692, 719, 720, 773, 774, 777, 788, 789, 792, 804, 805, 806, 807, 808, 827, 863, 967, 974, 979, 984, 988, 1002, 1004, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "hing": [25, 205, 208, 210, 267, 329, 330, 334, 387, 657, 667, 725, 890, 897, 974, 992, 993, 1013], "focus": [25, 78, 187, 369, 385, 975, 988, 998], "far": [25, 60, 82, 120, 151, 157, 168, 198, 216, 332, 345, 347, 374, 383, 410, 711, 870, 953, 983, 984, 993, 1002, 1011], "awai": [25, 26, 27, 60, 78, 119, 150, 151, 155, 201, 337, 369, 398, 410, 619, 832, 833, 840, 841, 977, 978, 993, 1011], "shown": [25, 48, 57, 89, 112, 116, 123, 159, 167, 169, 182, 188, 196, 216, 224, 227, 232, 246, 259, 262, 265, 268, 284, 296, 297, 301, 302, 303, 320, 345, 346, 374, 379, 388, 398, 400, 401, 404, 405, 406, 408, 410, 429, 451, 623, 689, 691, 692, 693, 704, 787, 801, 902, 904, 973, 974, 975, 978, 981, 986, 988, 992, 993, 994, 1013, 1024, 1029, 1030, 1031, 1034], "varieti": [25, 162, 246, 307, 332, 382, 385, 399, 400, 402, 408, 634, 981, 994, 998, 1002, 1022, 1035, 1036], "niculescu": [25, 27, 398, 428, 430], "mizil": [25, 27, 398, 428, 430], "caruana": [25, 27, 398, 428, 430], "144943": 25, "465660": 25, "937597": 25, "872186": 25, "851792": 25, "861868": 25, "099820": 25, "376999": 25, "936480": 25, "853174": 25, "877981": 25, "865400": 25, "098758": 25, "321301": 25, "937532": 25, "873724": 25, "848743": 25, "861053": 25, "deal": [25, 57, 71, 162, 168, 182, 223, 347, 374, 379, 399, 401, 408, 409, 410, 465, 487, 694, 699, 753, 777, 856, 927, 974, 1002, 1010, 1023, 1035, 1036], "situat": [25, 44, 57, 72, 167, 168, 204, 227, 262, 374, 382, 402, 404, 405, 407, 459, 519, 525, 573, 863, 866, 878, 888, 972, 974, 980, 981, 991, 994, 1028], "supervis": [25, 27, 37, 49, 54, 58, 86, 104, 115, 138, 139, 220, 235, 246, 259, 288, 313, 323, 326, 346, 360, 363, 369, 376, 386, 387, 398, 400, 403, 404, 405, 407, 408, 410, 428, 430, 455, 479, 494, 495, 544, 579, 581, 584, 585, 625, 667, 719, 788, 789, 792, 794, 795, 796, 797, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 815, 816, 839, 849, 850, 854, 864, 871, 885, 886, 887, 895, 972, 975, 978, 980, 981, 984, 988, 989, 993, 994, 995, 998, 999, 1001, 1004, 1005, 1007, 1013, 1015, 1020, 1026, 1032], "icml": [25, 27, 398, 400, 408, 428, 430, 825, 827, 846, 978, 980, 992, 997], "2005": [25, 27, 81, 371, 398, 428, 430, 839, 974, 981, 991], "216": [25, 28, 313, 317, 318, 991], "plot_calibration_curv": [25, 28], "simplex": [26, 661, 785, 865], "arrow": [26, 1034], "green": [26, 34, 81, 92, 113, 127, 132, 150, 174, 224, 296, 302, 306, 312, 387, 979, 1028, 1029, 1031, 1032], "600": [26, 50, 129, 130, 369, 671], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 210, 227, 247, 304, 334, 503], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 56, 114, 115, 116, 117, 118, 119, 132, 170, 171, 239, 240, 256, 271, 311, 313, 345, 356, 386, 387, 398, 407, 409, 548, 549, 550, 552, 557, 558, 560, 790, 791, 820, 900, 967, 979, 1002, 1017, 1024, 1025, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037], "concaten": [26, 39, 50, 61, 69, 76, 81, 112, 126, 158, 165, 177, 180, 220, 227, 237, 244, 248, 249, 255, 266, 268, 269, 284, 298, 305, 308, 321, 345, 401, 455, 458, 495, 500, 522, 528, 532, 533, 590, 771, 787, 849, 850, 852, 855, 863, 895, 979, 1008, 1021], "randomforestclassifierrandomforestclassifi": [26, 117, 118, 170, 239, 271], "cal_clf": 26, "prefit": [26, 387, 398, 409, 428, 558, 559, 588, 999, 1032, 1033, 1034], "x27": [26, 71, 72, 109, 115, 130, 133, 144, 168, 169, 170, 228, 229, 238, 239, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 322], "calibratedclassifiercvcalibratedclassifiercv": 26, "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "ro": 26, "bo": [26, 1032], "unit": [26, 70, 80, 168, 174, 198, 216, 284, 297, 301, 346, 369, 374, 375, 376, 380, 382, 383, 405, 408, 412, 455, 480, 481, 510, 515, 523, 524, 525, 532, 533, 580, 581, 582, 602, 649, 650, 667, 676, 760, 837, 846, 847, 848, 854, 860, 862, 866, 868, 870, 876, 877, 878, 880, 881, 890, 891, 974, 976, 977, 983, 988, 994, 998, 1011, 1024, 1028, 1034, 1035], "mid": [26, 332, 978, 980], "frac": [26, 80, 81, 110, 259, 266, 268, 314, 397, 398, 400, 402, 405, 406, 407, 408, 410, 423, 454, 456, 473, 474, 475, 545, 547, 549, 551, 553, 556, 559, 561, 602, 606, 610, 613, 614, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 660, 661, 663, 664, 669, 670, 671, 687, 745, 759, 823, 824, 833, 841, 848, 891, 893, 896, 899, 901, 970, 972, 973, 974, 975, 976, 978, 980, 981, 982, 983, 985, 986, 988, 990, 992, 993, 994, 1011], "shrink": [26, 82, 95, 124, 169, 182, 193, 196, 202, 219, 248, 301, 405, 550, 551, 667, 669, 837, 847, 848, 892, 893, 894, 895, 896, 981, 993, 1011], "perfectli": [26, 37, 262, 273, 389, 400, 407, 429, 558, 597, 695, 696, 706, 708, 726, 727, 747, 776, 783, 863, 973, 975, 978, 993, 1033, 1034], "incur": [26, 610, 890, 993, 1028], "correct": [26, 27, 57, 81, 110, 158, 168, 182, 187, 198, 216, 244, 253, 259, 266, 268, 332, 334, 345, 356, 371, 374, 376, 378, 388, 398, 399, 400, 404, 405, 407, 408, 441, 447, 460, 465, 479, 492, 494, 626, 658, 667, 669, 694, 695, 699, 703, 704, 709, 712, 713, 714, 718, 719, 720, 724, 728, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 773, 774, 775, 777, 782, 784, 818, 819, 820, 827, 835, 861, 963, 974, 978, 979, 993, 1004, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037], "decreas": [26, 39, 46, 55, 58, 66, 75, 127, 146, 158, 168, 169, 206, 230, 231, 261, 266, 272, 295, 303, 306, 311, 350, 360, 362, 374, 398, 400, 407, 432, 436, 454, 512, 525, 526, 532, 548, 549, 550, 551, 552, 553, 555, 556, 557, 593, 626, 627, 628, 667, 668, 669, 697, 703, 717, 772, 779, 847, 848, 898, 899, 900, 901, 967, 969, 974, 975, 978, 981, 982, 985, 986, 992, 993, 1002, 1011, 1022, 1027, 1030, 1033], "cal_scor": 26, "327": [26, 720, 1011], "549": 26, "p1d": 26, "p0": 26, "p1": [26, 132], "p2": [26, 132, 216], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 398, 428], "this_p": 26, "sure": [26, 56, 191, 204, 234, 235, 356, 360, 361, 368, 372, 373, 374, 375, 376, 378, 379, 382, 385, 398, 401, 408, 484, 514, 640, 910, 911, 921, 964, 968, 975, 992, 998, 999, 1027, 1028, 1030, 1035], "renorm": 26, "multiclass": [26, 30, 116, 165, 176, 217, 235, 252, 266, 269, 275, 277, 329, 341, 363, 369, 370, 376, 377, 379, 387, 400, 407, 428, 443, 453, 480, 495, 548, 550, 552, 555, 558, 559, 562, 585, 593, 601, 622, 623, 624, 649, 650, 657, 659, 664, 665, 666, 667, 693, 697, 699, 719, 720, 724, 725, 728, 733, 744, 773, 774, 777, 778, 779, 782, 787, 788, 790, 791, 792, 793, 801, 805, 809, 810, 811, 812, 813, 814, 815, 816, 817, 857, 871, 890, 892, 895, 898, 900, 972, 974, 989, 993, 994, 1000, 1001, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1035, 1036], "argmax": [26, 103, 258, 272, 376, 407, 560, 818, 898, 993, 1033], "494": [26, 28], "plot_calibration_multiclass": [26, 28], "gave": [27, 398, 787, 790, 791, 801, 857], "four": [27, 143, 158, 174, 180, 199, 246, 247, 321, 329, 370, 374, 387, 548, 555, 710, 898, 900, 916, 974, 976, 977, 978, 988, 997], "naiv": [27, 31, 128, 259, 261, 345, 347, 363, 369, 398, 407, 408, 428, 535, 825, 826, 827, 828, 829, 972, 973, 981, 1000, 1015, 1020, 1021, 1022, 1023, 1028, 1030, 1033, 1035], "bay": [27, 31, 113, 128, 150, 187, 249, 261, 345, 363, 369, 398, 405, 407, 408, 410, 527, 540, 541, 647, 825, 826, 827, 828, 829, 871, 972, 973, 974, 988, 1000, 1013, 1015, 1020, 1021, 1022, 1023, 1028, 1030, 1033, 1035], "train_sampl": [27, 213, 214], "against": [27, 37, 86, 105, 113, 124, 142, 174, 189, 190, 207, 215, 234, 268, 307, 311, 332, 369, 374, 388, 398, 400, 404, 408, 429, 500, 533, 539, 542, 667, 669, 745, 747, 778, 789, 794, 796, 815, 819, 944, 970, 974, 978, 979, 981, 993, 997, 1004], "rfc": [27, 240, 311, 1017], "circleci": [27, 34, 53, 112, 154, 156, 158, 159, 177, 190, 207, 245, 304, 308, 311, 324, 337, 351, 374], "1198": 27, "userwarn": [27, 44, 62, 112, 159, 190, 207, 337, 351, 379, 703, 988, 1026, 1028, 1033], "redundantli": [27, 387], "keyword": [27, 345, 368, 374, 376, 379, 381, 387, 400, 411, 414, 429, 435, 436, 441, 443, 448, 455, 458, 487, 494, 526, 529, 531, 550, 551, 558, 559, 560, 561, 611, 619, 622, 623, 630, 634, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 679, 683, 688, 689, 691, 692, 693, 764, 768, 769, 770, 771, 780, 781, 793, 809, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 850, 854, 922, 924, 945, 967, 975, 978, 981, 991, 1020, 1024, 1026, 1027, 1028, 1030, 1032, 1034, 1035, 1036], "argument": [27, 72, 199, 228, 231, 234, 361, 368, 369, 374, 375, 377, 379, 380, 382, 383, 385, 387, 400, 401, 404, 405, 407, 409, 411, 412, 414, 418, 422, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 445, 448, 450, 452, 454, 459, 460, 484, 487, 494, 499, 524, 526, 527, 529, 531, 542, 550, 551, 554, 558, 559, 560, 561, 568, 572, 573, 579, 580, 582, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 622, 630, 634, 637, 638, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 657, 659, 667, 668, 672, 675, 679, 683, 687, 689, 690, 691, 692, 693, 705, 710, 725, 732, 753, 769, 770, 793, 809, 818, 819, 822, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 847, 850, 854, 888, 894, 904, 908, 917, 922, 924, 945, 946, 947, 948, 962, 967, 970, 974, 975, 976, 978, 981, 985, 986, 993, 994, 1004, 1008, 1020, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036], "fmt": [27, 61, 209], "preced": [27, 277, 361, 374, 478, 978, 1020], "contrast": [27, 104, 169, 200, 233, 259, 261, 288, 306, 346, 387, 398, 400, 401, 403, 407, 410, 440, 443, 453, 610, 634, 801, 846, 968, 971, 973, 974, 978, 981, 983, 986, 988, 991, 992, 994, 1030], "push": [27, 374, 378, 398, 1001], "equat": [27, 340, 374, 400, 405, 407, 548, 549, 550, 551, 555, 556, 557, 581, 618, 673, 674, 678, 753, 870, 898, 899, 900, 901, 968, 975, 978, 983, 1028], "twice": [27, 271, 345, 347, 376, 410, 610, 720, 722, 929, 1029], "approx": [27, 95, 232, 405, 407, 408, 978, 985, 992], "rare": [27, 169, 307, 356, 378, 385, 387, 389, 398, 400, 404, 580, 639, 649, 650, 660, 671, 890, 915, 946, 974, 988, 1002, 1027, 1028, 1029, 1033, 1035], "explan": [27, 86, 234, 360, 373, 374, 398, 408, 967, 977, 979, 994, 1002, 1023], "bag": [27, 70, 108, 114, 116, 125, 134, 165, 170, 346, 347, 370, 398, 399, 507, 508, 509, 546, 547, 548, 549, 550, 551, 554, 555, 556, 731, 792, 816, 899, 976, 979, 1000, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1033, 1034, 1036], "underli": [27, 56, 80, 129, 147, 199, 201, 202, 234, 264, 283, 284, 353, 361, 374, 385, 387, 389, 391, 396, 398, 400, 402, 404, 405, 406, 407, 409, 410, 428, 442, 443, 444, 453, 455, 456, 462, 463, 469, 515, 558, 559, 560, 561, 584, 585, 588, 593, 649, 659, 671, 682, 686, 787, 790, 791, 801, 818, 819, 820, 821, 822, 823, 824, 835, 890, 898, 899, 900, 901, 943, 974, 975, 979, 984, 991, 993, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1036], "restrict": [27, 66, 67, 162, 165, 215, 294, 299, 376, 380, 385, 398, 400, 407, 408, 456, 484, 493, 523, 572, 601, 644, 645, 646, 647, 649, 673, 674, 704, 772, 778, 779, 816, 838, 840, 841, 842, 844, 846, 847, 848, 850, 876, 978, 994, 1014, 1015, 1020, 1022, 1030, 1032], "interv": [27, 108, 134, 157, 165, 182, 198, 199, 200, 216, 259, 369, 387, 398, 404, 407, 410, 429, 430, 507, 508, 509, 548, 549, 551, 553, 555, 556, 626, 627, 629, 668, 732, 738, 740, 791, 808, 816, 853, 855, 869, 892, 893, 894, 914, 970, 974, 978, 988, 994, 1027, 1031], "move": [27, 119, 260, 298, 332, 373, 374, 378, 380, 398, 400, 540, 541, 562, 563, 564, 566, 568, 569, 945, 1012, 1020, 1021, 1025, 1028, 1030, 1033, 1034], "characterist": [27, 44, 62, 147, 155, 165, 227, 252, 256, 275, 301, 356, 369, 371, 379, 398, 404, 407, 410, 494, 495, 614, 629, 649, 693, 697, 699, 717, 772, 778, 779, 806, 816, 819, 857, 895, 974], "difficult": [27, 55, 110, 168, 206, 374, 382, 398, 405, 407, 544, 545, 550, 552, 553, 973, 975, 977, 981, 983, 985, 994, 1002, 1020, 1034], "bayesian": [27, 54, 165, 176, 182, 186, 217, 243, 245, 249, 250, 251, 405, 428, 515, 519, 523, 635, 636, 647, 648, 785, 786, 851, 853, 865, 870, 967, 998, 1000, 1014, 1015, 1026, 1033], "domingo": [27, 778, 978], "pazzani": 27, "proc": [27, 79, 398, 408, 441, 680, 684, 825, 967, 975, 980, 984], "13th": 27, "intl": [27, 404], "1996": [27, 400, 407, 411, 435, 507, 508, 509, 546, 547, 988], "zadrozni": [27, 398, 428, 667], "bianca": 27, "charl": [27, 754, 1020, 1023, 1026, 1030, 1032, 1035], "elkan": [27, 312, 398, 428, 434, 438, 450, 667, 1026, 1030, 1031, 1033, 1034], "vol": [27, 158, 182, 265, 371, 400, 465, 550, 551, 619, 626, 636, 655, 676, 677, 785, 815, 827, 968, 980, 981], "2001": [27, 155, 170, 258, 397, 400, 407, 428, 442, 443, 444, 453, 502, 550, 551, 555, 556, 619, 625, 630, 636, 682, 687, 725, 778, 871, 883, 915, 968, 974, 978, 984, 986, 988, 990, 993], "261": [27, 28], "plot_compare_calibr": [27, 28], "352": [28, 259, 380], "auto_examples_calibr": 28, "calibr": [28, 30, 216, 363, 387, 503, 506, 555, 560, 649, 667, 700, 719, 731, 774, 777, 778, 816, 828, 887, 890, 967, 974, 978, 991, 993, 1000, 1015, 1017, 1024, 1026], "discrimin": [29, 35, 104, 142, 144, 165, 174, 213, 220, 235, 288, 363, 371, 398, 407, 466, 503, 540, 541, 557, 773, 839, 967, 975, 978, 981, 992, 994, 1000, 1011, 1015, 1023], "ellipsoid": [29, 35, 165, 243, 244, 251, 540, 541, 785, 786, 972, 977], "ledoit": [29, 35, 77, 78, 82, 83, 165, 464, 466, 470, 471, 503, 540, 972], "wolf": [29, 35, 77, 78, 82, 83, 165, 464, 466, 470, 471, 503, 540, 972, 1027], "oa": [29, 35, 77, 83, 165, 402, 460, 461, 464, 465, 467, 468, 503, 540, 787, 972], "hand": [29, 35, 86, 89, 97, 100, 116, 123, 142, 155, 165, 168, 169, 191, 202, 205, 223, 230, 231, 233, 234, 256, 261, 268, 332, 360, 368, 369, 371, 374, 376, 380, 382, 386, 394, 405, 406, 407, 409, 493, 634, 688, 704, 778, 816, 871, 895, 967, 971, 974, 978, 980, 982, 986, 991, 993, 1002, 1004, 1007, 1010, 1011], "built": [30, 86, 110, 111, 119, 121, 170, 206, 262, 292, 311, 351, 360, 372, 374, 375, 376, 378, 380, 382, 383, 385, 386, 387, 390, 394, 399, 400, 401, 404, 407, 409, 436, 494, 544, 545, 546, 547, 552, 553, 579, 580, 584, 588, 630, 631, 632, 633, 634, 637, 638, 643, 649, 651, 652, 653, 654, 663, 664, 665, 666, 672, 790, 791, 798, 821, 824, 830, 831, 900, 901, 962, 974, 978, 979, 991, 992, 994, 998, 1002, 1013, 1020, 1023, 1024, 1026, 1032], "enabl": [30, 50, 72, 121, 169, 206, 221, 234, 303, 312, 314, 315, 317, 341, 372, 374, 379, 382, 385, 387, 390, 391, 396, 399, 400, 401, 405, 407, 408, 440, 459, 525, 526, 532, 550, 551, 552, 553, 554, 570, 571, 581, 582, 593, 601, 785, 786, 787, 790, 850, 851, 863, 864, 887, 888, 890, 891, 892, 893, 894, 895, 896, 905, 945, 968, 970, 975, 977, 978, 981, 988, 989, 992, 993, 999, 1002, 1020, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "troubl": [30, 408], "ovr": [30, 190, 213, 277, 311, 341, 649, 650, 778, 819, 890, 892, 895, 974, 978, 979, 993, 1020, 1025, 1026, 1028, 1029, 1030, 1034, 1035], "gpc": [30, 149, 160, 165, 495, 601, 602, 604, 605, 610, 611, 613, 614, 694, 731, 1000, 1015, 1030], "gaussian_process": [30, 31, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 363, 387, 410, 634, 979, 1023, 1026, 1027], "gaussianprocessclassifi": [30, 31, 151, 152, 153, 154, 158, 387, 410, 602, 610, 611, 613, 614, 979, 1026, 1028, 1030, 1034], "accuracy_scor": [30, 110, 151, 263, 306, 323, 345, 356, 386, 391, 548, 555, 699, 719, 720, 724, 728, 732, 773, 774, 777, 782, 784, 967, 978, 1021, 1022, 1023, 1032], "iri": [30, 41, 45, 74, 88, 93, 94, 99, 106, 107, 108, 121, 131, 134, 139, 143, 149, 160, 165, 176, 181, 191, 217, 241, 246, 253, 264, 265, 268, 269, 282, 290, 296, 313, 319, 326, 327, 328, 332, 335, 343, 349, 354, 355, 367, 368, 386, 400, 401, 404, 405, 407, 487, 495, 532, 540, 544, 548, 555, 601, 613, 622, 667, 787, 801, 885, 886, 887, 890, 895, 898, 902, 903, 904, 967, 968, 972, 977, 978, 981, 985, 988, 991, 992, 993, 994, 1004, 1011, 1012, 1015, 1033], "load_iri": [30, 41, 45, 74, 90, 99, 102, 104, 106, 119, 121, 131, 139, 143, 152, 181, 191, 207, 241, 246, 253, 264, 265, 266, 268, 269, 282, 287, 290, 296, 311, 313, 316, 325, 328, 329, 332, 335, 351, 354, 386, 394, 400, 401, 404, 407, 409, 552, 558, 593, 601, 610, 611, 613, 614, 622, 649, 650, 778, 787, 790, 791, 793, 801, 818, 839, 885, 886, 887, 898, 900, 902, 903, 904, 968, 973, 978, 979, 980, 981, 985, 988, 994, 1004, 1010, 1011, 1012, 1026, 1028, 1031], "saga": [30, 189, 213, 214, 649, 650, 663, 665, 678, 801, 974, 1027, 1029], "multi_class": [30, 190, 213, 268, 311, 560, 601, 649, 650, 778, 824, 890, 974, 979, 993, 1020, 1024, 1028, 1033, 1035], "n_classifi": [30, 560, 561], "xx": [30, 34, 42, 58, 80, 119, 123, 128, 139, 152, 153, 154, 169, 185, 205, 208, 209, 210, 211, 212, 224, 227, 235, 248, 285, 295, 303, 304, 325, 331, 332, 336, 337, 338, 341, 342, 378], "yy": [30, 34, 42, 58, 80, 119, 128, 139, 152, 154, 169, 205, 209, 210, 211, 212, 224, 227, 235, 285, 295, 303, 304, 325, 331, 332, 336, 337, 338, 341, 342], "xfull": 30, "imshow_handl": 30, "cax": [30, 153, 270], "orient": [30, 95, 168, 219, 301, 387, 902, 975], "horizont": [30, 95, 219, 232, 301, 304, 379, 387, 455, 506, 688, 692], "087": [30, 35, 352, 355], "plot_classification_prob": [30, 35], "salt": [31, 232, 303, 1034], "convei": [31, 224, 303, 1011], "linearli": [31, 100, 112, 168, 177, 212, 220, 227, 268, 269, 303, 306, 336, 345, 360, 371, 385, 405, 407, 506, 633, 698, 978, 981, 984, 993, 1011, 1027, 1036], "semi": [31, 235, 303, 313, 326, 363, 369, 387, 479, 495, 526, 579, 581, 667, 719, 816, 850, 854, 885, 886, 887, 895, 976, 981, 984, 1000, 1015, 1020, 1032, 1035], "transpar": [31, 303, 963, 1002], "ga\u00ebl": [31, 45, 51, 73, 89, 90, 102, 181, 195, 196, 303, 336, 337, 388, 1002], "modifi": [31, 45, 51, 73, 75, 89, 90, 181, 182, 195, 196, 208, 219, 220, 221, 234, 246, 317, 337, 342, 372, 374, 376, 378, 387, 400, 407, 410, 434, 438, 445, 450, 459, 473, 474, 475, 476, 486, 501, 572, 601, 602, 604, 610, 667, 669, 680, 684, 719, 720, 758, 773, 774, 777, 908, 974, 991, 992, 999, 1010, 1014, 1015, 1020, 1022, 1023, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1035], "listedcolormap": [31, 119, 282, 287, 290, 295, 303], "make_circl": [31, 44, 62, 100, 128, 224, 295, 296, 303, 322, 370, 1021, 1028, 1031], "make_moon": [31, 44, 62, 227, 259, 295, 296, 303, 370, 967, 1027, 1031], "discriminant_analysi": [31, 33, 34, 104, 220, 288, 356, 363, 396, 527, 839, 972, 979, 1020, 1023, 1024, 1025, 1026, 1027], "quadraticdiscriminantanalysi": [31, 34, 540, 972, 979, 981, 1020, 1025, 1027, 1035], "adaboostclassifi": [31, 109, 112, 119, 407, 545, 550, 552, 1022, 1023, 1026, 1027, 1029, 1030, 1033, 1035, 1036], "decisionboundarydisplai": [31, 56, 112, 126, 131, 181, 190, 207, 262, 282, 287, 290, 306, 328, 329, 330, 333, 334, 351, 1034, 1035], "kneighborsclassifi": [31, 131, 138, 281, 282, 287, 288, 306, 313, 315, 345, 407, 593, 833, 837, 838, 839, 840, 841, 979, 981, 1011, 1020, 1030, 1032, 1033, 1034, 1035, 1036], "neural_network": [31, 165, 169, 238, 294, 295, 296, 297, 298, 362, 363, 385, 979, 982, 1022], "mlpclassifi": [31, 165, 294, 295, 297, 299, 362, 493, 495, 505, 513, 562, 846, 848, 860, 979, 982, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "decisiontreeclassifi": [31, 109, 110, 112, 119, 131, 263, 317, 350, 351, 354, 387, 407, 544, 546, 548, 550, 552, 555, 622, 793, 814, 899, 900, 902, 903, 904, 968, 979, 994, 1021, 1022, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "net": [31, 165, 176, 182, 189, 209, 217, 272, 380, 399, 404, 462, 463, 469, 492, 515, 548, 549, 550, 551, 555, 556, 557, 637, 638, 643, 648, 649, 650, 651, 652, 653, 654, 659, 667, 669, 672, 675, 846, 898, 899, 900, 901, 967, 978, 983, 992, 1000, 1002, 1015, 1020, 1025, 1029, 1030, 1032], "adaboost": [31, 108, 119, 134, 165, 510, 511, 542, 544, 545, 550, 622, 694, 784, 816, 898, 899, 1000, 1015, 1022], "qda": [31, 34, 371, 540, 541, 1000, 1015, 1025], "025": [31, 200, 256, 681, 685], "n_clusters_per_class": [31, 91, 114, 144, 146, 256, 289, 295, 303, 379, 506], "linearly_separ": [31, 295], "ds_cnt": [31, 303, 304], "rdbu": [31, 95, 214, 295, 332, 337], "cm_bright": [31, 295, 303], "ff0000": [31, 287, 295], "0000ff": [31, 287, 295], "ep": [31, 44, 46, 49, 55, 65, 181, 183, 222, 231, 385, 400, 411, 435, 441, 446, 462, 463, 469, 622, 637, 638, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 672, 673, 674, 675, 681, 685, 705, 731, 842, 882, 883, 884, 990, 1035, 1036], "lstrip": [31, 44, 62, 227, 295, 303], "596": [31, 35, 339, 343, 707], "plot_classifier_comparison": [31, 35, 303], "8x8": [32, 89, 189, 231, 288, 298, 371, 493, 1010], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 58, 72, 73, 89, 137, 138, 145, 189, 205, 220, 231, 232, 257, 258, 261, 267, 274, 281, 283, 288, 296, 298, 317, 320, 321, 380, 401, 436, 437, 523, 524, 525, 526, 590, 591, 629, 630, 659, 679, 680, 681, 682, 1004, 1008, 1009, 1010, 1011, 1012, 1026, 1031], "set_axis_off": 32, "gray_r": [32, 89, 98, 153, 220, 298, 320, 321, 1010], "entir": [32, 162, 198, 206, 298, 301, 312, 354, 356, 368, 375, 376, 387, 394, 400, 404, 406, 408, 463, 483, 525, 579, 580, 581, 582, 638, 642, 644, 646, 649, 650, 652, 654, 656, 657, 659, 667, 673, 674, 724, 784, 818, 819, 822, 847, 849, 850, 863, 875, 876, 878, 879, 880, 881, 947, 967, 968, 978, 988, 992, 994, 1011, 1029, 1030], "97": [32, 105, 171, 235, 250, 298, 321, 332, 371, 380, 386, 404, 649, 973, 979, 988, 1020], "98": [32, 34, 42, 44, 54, 62, 64, 82, 98, 227, 257, 295, 298, 303, 321, 371, 378, 404, 407, 650, 825, 973, 980, 1008, 1013], "86": [32, 70, 144, 189, 303, 320, 321, 778, 898, 978, 1009], "92": [32, 34, 50, 98, 144, 174, 257, 298, 320, 321, 332, 369, 371, 529, 531, 538, 553, 588, 787, 801, 973, 1013], "899": [32, 257, 324], "confus": [32, 165, 252, 268, 275, 320, 321, 345, 387, 459, 495, 622, 643, 688, 704, 706, 709, 719, 720, 728, 744, 774, 777, 816, 888, 895, 1013, 1020, 1021, 1025, 1029, 1030, 1032, 1033, 1034, 1035], "figure_": [32, 169, 238, 311, 313, 381, 429, 622, 623, 688, 689, 691, 692, 693, 793, 809], "confusion_matrix": [32, 228, 253, 320, 321, 688, 704, 744, 813, 978, 1013, 1021, 1026, 1027, 1030, 1031, 1033], "gt": [32, 71, 72, 115, 130, 168, 249, 257, 271, 372, 374, 378], "rebuilt": [32, 830, 831], "484": [32, 35, 159], "plot_digits_classif": [32, 35], "oracl": [33, 198, 216, 413, 460, 461, 464, 465, 466, 467, 972, 1020], "shrinkag": [33, 77, 79, 82, 83, 103, 125, 165, 290, 413, 460, 461, 464, 465, 466, 467, 468, 470, 471, 472, 530, 534, 540, 552, 553, 787, 974, 988, 1000, 1015, 1020, 1024, 1025, 1027], "lineardiscriminantanalysi": [33, 34, 104, 220, 288, 356, 396, 527, 541, 839, 972, 979, 981, 1020, 1023, 1024, 1025, 1026, 1027, 1029, 1032, 1034, 1035, 1036], "200": [33, 34, 44, 50, 54, 60, 75, 98, 104, 107, 112, 121, 123, 129, 154, 184, 193, 199, 202, 203, 204, 210, 215, 220, 235, 239, 242, 244, 260, 266, 268, 269, 301, 304, 322, 324, 331, 332, 353, 356, 369, 376, 385, 405, 407, 412, 431, 445, 459, 462, 463, 524, 525, 526, 529, 530, 531, 534, 538, 575, 640, 642, 662, 670, 683, 801, 847, 848, 888, 892, 893, 894, 895, 896, 993], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 131, 132, 407, 560], "lsqr": [33, 308, 540, 663, 665, 678, 972, 1021, 1027, 1034], "clf2": [33, 131, 132, 376, 394, 407, 560], "store_precis": [33, 79, 460, 461, 464, 465, 466, 467], "assume_cent": [33, 79, 402, 413, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471], "clf3": [33, 131, 132, 376, 407, 560], "covariance_estim": [33, 540, 972, 1032], "features_samples_ratio": 33, "gold": [33, 192, 199, 201, 204, 208, 212, 215, 245, 250, 266, 285, 331, 380], "navi": [33, 70, 79, 99, 104, 105, 129, 177, 201, 209, 222, 245, 246, 247, 250, 266, 268, 284, 291, 322, 353], "217": [33, 35, 346, 526, 532], "plot_lda": [33, 35], "doubl": [34, 116, 271, 374, 387, 405, 529, 531, 538, 830, 831, 841, 962, 968, 993, 994, 1020, 1030, 1031], "own": [34, 116, 216, 234, 249, 279, 281, 322, 346, 361, 368, 377, 378, 379, 382, 383, 390, 399, 400, 412, 416, 431, 445, 524, 548, 555, 637, 785, 786, 832, 833, 834, 836, 838, 840, 841, 842, 864, 898, 900, 916, 921, 946, 974, 980, 981, 984, 988, 993, 1002, 1012, 1013, 1027, 1028, 1030], "mpl": [34, 244, 245, 246, 250, 301], "linearsegmentedcolormap": 34, "red_blue_class": 34, "register_cmap": 34, "plot_lda_qda": [34, 35], "matplotlibdeprecationwarn": 34, "minor": [34, 262, 266, 369, 377, 388, 487, 978, 1020, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "dataset_fixed_cov": 34, "dim": [34, 207, 231, 282, 287, 288, 290, 328, 329, 518], "dataset_cov": 34, "matric": [34, 40, 80, 82, 95, 203, 245, 246, 248, 249, 250, 279, 292, 312, 324, 345, 346, 366, 368, 376, 377, 385, 386, 387, 399, 400, 401, 402, 403, 405, 408, 409, 415, 441, 442, 444, 455, 464, 473, 474, 475, 525, 526, 529, 531, 532, 535, 538, 540, 541, 546, 547, 554, 557, 572, 573, 580, 634, 649, 655, 663, 665, 678, 744, 750, 758, 764, 768, 769, 770, 771, 780, 785, 786, 816, 834, 837, 842, 853, 857, 859, 862, 865, 867, 868, 870, 873, 875, 877, 879, 880, 881, 882, 883, 892, 893, 895, 896, 906, 927, 933, 942, 949, 951, 952, 968, 972, 975, 976, 977, 979, 981, 982, 990, 992, 993, 998, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "linalg": [34, 54, 78, 79, 82, 101, 103, 105, 184, 244, 245, 246, 249, 250, 374, 380, 405, 442, 443, 444, 453, 523, 526, 532, 535, 648, 663, 665, 678, 682, 686, 925], "plot_data": 34, "fig_index": 34, "splot": [34, 245, 250], "tp": [34, 400, 703, 709, 721, 772, 773, 774, 777, 902, 978], "tp0": 34, "tp1": 34, "x0_tp": 34, "x0_fp": 34, "x1_tp": 34, "x1_fp": 34, "990000": 34, "dark": [34, 113, 168, 332, 369], "000099": 34, "pcolormesh": [34, 128, 139, 181, 282, 287, 328, 332, 336, 622], "white": [34, 58, 60, 95, 155, 168, 212, 219, 285, 298, 303, 325, 331, 405, 408, 410, 616, 994, 1020, 1023, 1026, 1030, 1034], "means_": [34, 244, 245, 246, 247, 249, 250, 540, 541, 785, 786], "yellow": [34, 92, 332, 979], "markers": [34, 49, 55, 58, 61, 63, 64, 123, 153, 157, 230, 315], "markeredgecolor": [34, 49, 55, 61, 63, 64], "plot_ellips": [34, 244], "cov": [34, 82, 86, 112, 249, 374, 387, 390, 393, 403, 413, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 510, 523, 525, 532, 539], "eigh": [34, 244, 245, 246, 249, 250, 405, 412, 524, 526, 1035], "arctan": [34, 245, 250, 370, 509], "180": [34, 244, 245, 246, 249, 250, 288, 292, 346, 380, 410, 493], "ell": [34, 244, 245, 246, 250, 397], "patch": [34, 50, 244, 245, 246, 249, 250, 254, 369, 378, 385, 405, 407, 546, 547, 574, 575, 578, 1020, 1028], "ellips": [34, 227, 244, 245, 246, 249, 250, 984], "set_clip_box": [34, 244, 245, 246, 249, 250], "set_alpha": [34, 109, 244, 245, 246, 249, 250], "add_artist": [34, 220, 244, 245, 246, 249, 250], "plot_lda_cov": 34, "plot_qda_cov": 34, "svd": [34, 101, 103, 128, 220, 346, 383, 396, 403, 412, 442, 444, 473, 474, 476, 523, 524, 525, 526, 530, 531, 532, 535, 537, 540, 541, 655, 663, 664, 665, 676, 677, 678, 849, 927, 972, 1013, 1022, 1026, 1027, 1033, 1035], "store_covari": [34, 540, 541, 1025, 1027], "tight": [34, 40, 105, 112, 119, 139, 143, 183, 185, 190, 191, 192, 203, 207, 210, 212, 215, 221, 224, 248, 279, 285, 286, 290, 291, 328, 331, 332, 335, 336, 337, 351, 573, 683, 1032], "685": [35, 711, 730, 978], "auto_examples_classif": 35, "07": [35, 105, 134, 168, 194, 216, 217, 268, 275, 299, 306, 326, 348, 356, 369, 400, 522, 552, 553, 683, 978, 992], "modul": [36, 37, 49, 53, 77, 84, 88, 94, 95, 108, 141, 149, 159, 161, 165, 166, 173, 176, 213, 218, 219, 243, 252, 276, 280, 294, 296, 297, 300, 319, 327, 344, 349, 352, 368, 369, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 385, 387, 389, 390, 394, 398, 399, 400, 403, 407, 408, 409, 411, 435, 494, 526, 570, 571, 650, 919, 967, 972, 974, 976, 978, 979, 982, 984, 985, 988, 990, 992, 994, 995, 1002, 1007, 1008, 1013, 1021, 1022, 1023, 1025, 1026, 1030, 1032, 1034], "handwritten": [36, 68, 165, 218, 223, 225, 231, 257, 297, 298, 320, 321, 367, 400, 407, 438, 493, 532, 535, 540, 557, 679, 680, 681, 682, 683, 695, 696, 708, 727, 781, 783, 839, 851, 860, 870, 883, 975, 981, 1004, 1015], "hierarch": [36, 40, 54, 68, 165, 171, 315, 387, 408, 432, 434, 436, 437, 495, 503, 505, 513, 521, 538, 721, 843, 870, 995, 999, 1014, 1015, 1020, 1023, 1024, 1036], "coin": [36, 68, 165, 400, 408, 432, 453, 990, 1012], "shift": [36, 44, 68, 165, 177, 222, 249, 284, 298, 301, 402, 406, 431, 439, 449, 452, 460, 503, 506, 680, 684, 836, 859, 988, 1014, 1015, 1020, 1024, 1028], "chanc": [36, 49, 68, 110, 165, 198, 206, 213, 216, 259, 265, 268, 269, 307, 346, 356, 373, 400, 404, 691, 693, 695, 696, 699, 707, 745, 747, 776, 783, 815, 978, 986, 994, 1036], "agglom": [36, 44, 47, 68, 165, 400, 432, 436, 493, 682, 768, 843, 1023], "bisect": [36, 68, 165, 434, 438, 503, 1034], "quantiz": [36, 68, 165, 368, 369, 400, 434, 438, 440, 497, 769, 855, 952, 988], "birch": [36, 44, 68, 165, 315, 362, 387, 437, 440, 503, 1014, 1015, 1024, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036], "toi": [36, 49, 53, 57, 68, 86, 99, 113, 126, 131, 132, 165, 180, 188, 202, 212, 226, 242, 244, 296, 329, 339, 367, 380, 385, 407, 408, 431, 432, 433, 435, 437, 439, 440, 441, 443, 449, 460, 503, 505, 513, 554, 630, 668, 716, 746, 786, 836, 843, 851, 870, 894, 975, 977, 978, 984, 988, 1015], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 56, 67, 68, 165, 171, 431, 432, 436, 437, 454, 503, 505, 513, 870, 998, 1012, 1023, 1028, 1031], "dbscan": [36, 44, 55, 65, 68, 165, 317, 385, 387, 437, 441, 443, 446, 503, 695, 696, 708, 727, 781, 783, 842, 870, 981, 1014, 1015, 1020, 1022, 1024, 1025, 1027, 1028, 1029, 1036], "hdbscan": [36, 44, 68, 165, 435, 503, 870, 968, 998, 1014, 1015, 1036], "optic": [36, 44, 68, 165, 315, 367, 411, 435, 437, 446, 447, 448, 493, 1014, 1015, 1029, 1033, 1034, 1035, 1036], "affin": [36, 44, 68, 165, 301, 366, 376, 387, 399, 405, 431, 432, 436, 443, 445, 453, 503, 526, 682, 686, 695, 696, 708, 727, 781, 783, 886, 972, 975, 978, 1014, 1015, 1020, 1021, 1024, 1030, 1031, 1033, 1035], "propag": [36, 68, 165, 319, 326, 369, 399, 431, 445, 493, 503, 505, 688, 695, 696, 704, 705, 708, 709, 727, 781, 783, 850, 864, 885, 886, 887, 944, 945, 982, 1000, 1014, 1015, 1020, 1032, 1035], "agglomer": [36, 68, 165, 366, 400, 408, 436, 493, 591, 597, 636, 787, 792, 850, 1015], "unstructur": [36, 68, 165, 297, 400, 432, 436, 454, 494, 521, 843, 990, 1002, 1024], "dendrogram": [36, 68, 165, 171, 400, 432, 436, 495, 1032], "pictur": [36, 68, 165, 231, 250, 369, 388, 400, 405, 408, 453, 484, 485, 512, 999], "greek": [36, 68, 165, 400, 453], "silhouett": [36, 38, 49, 57, 58, 68, 165, 346, 374, 438, 503, 780, 781, 1020, 1024], "embed": [36, 44, 46, 68, 115, 150, 165, 218, 221, 223, 225, 226, 242, 279, 288, 380, 387, 399, 400, 432, 443, 453, 480, 493, 535, 540, 557, 573, 630, 679, 680, 681, 682, 683, 684, 685, 686, 687, 839, 851, 860, 882, 883, 884, 970, 981, 984, 990, 995, 1014, 1015, 1020, 1021, 1031, 1032, 1034], "explor": [37, 113, 114, 223, 224, 260, 261, 267, 268, 308, 313, 332, 346, 356, 368, 371, 373, 380, 394, 400, 407, 463, 787, 790, 798, 871, 967, 974, 975, 977, 983, 985, 986, 988, 1002, 1007, 1013, 1026], "uniformli": [37, 116, 123, 142, 227, 244, 311, 376, 507, 508, 509, 542, 633, 791, 799, 801, 869, 967, 968, 978, 981, 988, 1024, 1029], "divid": [37, 43, 48, 91, 95, 144, 155, 198, 244, 346, 356, 370, 371, 397, 400, 404, 405, 460, 461, 462, 463, 464, 465, 466, 467, 503, 510, 525, 532, 641, 642, 645, 646, 647, 655, 656, 667, 668, 669, 710, 716, 724, 728, 746, 782, 784, 847, 848, 892, 895, 927, 930, 931, 967, 975, 977, 978, 981, 988, 992, 1013, 1020, 1027, 1028, 1031], "randomli": [37, 48, 50, 61, 71, 88, 93, 113, 126, 162, 165, 169, 215, 231, 235, 249, 254, 265, 277, 320, 356, 361, 383, 385, 386, 400, 404, 407, 410, 440, 449, 503, 506, 510, 514, 522, 528, 536, 537, 542, 550, 551, 554, 555, 556, 601, 602, 662, 670, 681, 685, 707, 785, 786, 846, 884, 898, 899, 900, 901, 977, 979, 981, 984, 986, 990, 994, 1011, 1013, 1031, 1035], "quiroz": [37, 57, 116, 177, 182, 260, 262, 306, 345, 346, 347], "fundament": [37, 49, 81, 346, 372, 386, 403, 487, 529, 531, 538, 699, 974, 978], "homogen": [37, 38, 39, 44, 46, 49, 55, 58, 346, 369, 385, 387, 402, 407, 410, 437, 605, 695, 708, 721, 726, 727, 747, 783, 975, 976, 978, 1029], "frequent": [37, 110, 163, 262, 268, 269, 346, 363, 371, 374, 408, 542, 581, 621, 840, 863, 864, 867, 879, 968, 970, 978, 992, 996, 999], "ari": [37, 58, 346, 400, 696, 1025, 1031], "mutual": [37, 38, 49, 55, 58, 141, 148, 165, 407, 409, 437, 583, 586, 587, 590, 591, 597, 598, 599, 600, 695, 696, 706, 745, 747, 776, 783, 967, 974, 978, 979, 1020, 1026, 1036], "mi": [37, 142, 400, 598, 599, 695, 745, 747, 968, 978, 992], "theoret": [37, 57, 150, 399, 400, 407, 544, 545, 630, 695, 716, 746, 890, 967, 975, 977, 978, 980, 990, 992, 993, 1001, 1002], "nmi": [37, 400, 708, 726, 727, 747], "ami": [37, 49, 58, 400, 695], "score_func": [37, 71, 72, 583, 586, 587, 589, 590, 591, 732, 1020, 1022], "rand_scor": [37, 400, 706, 978, 1032], "adjusted_rand_scor": [37, 38, 49, 58, 346, 400, 695, 706, 732, 747, 776, 978, 1033], "mutual_info_scor": [37, 400, 695, 978, 1028, 1031, 1032], "normalized_mutual_info_scor": [37, 400, 726, 745, 783, 978, 1028, 1034], "adjusted_mutual_info_scor": [37, 38, 49, 58, 400, 696, 706, 745, 747, 776, 978, 1020, 1028, 1032, 1036], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 61, 174, 346], "seaborn": [37, 109, 111, 167, 168, 177, 182, 249, 259, 282, 374, 390, 393, 998], "sn": [37, 109, 111, 167, 168, 177, 182, 249, 259, 282], "color_palett": [37, 109, 111, 249], "colorblind": [37, 109, 111], "vx": 37, "errorbar": [37, 61, 79, 81, 146, 156, 157, 281, 323, 335, 793, 809], "refer": [37, 38, 60, 63, 71, 124, 130, 147, 159, 216, 234, 266, 289, 301, 311, 312, 313, 314, 315, 316, 317, 346, 361, 363, 372, 374, 375, 376, 378, 379, 380, 381, 382, 385, 386, 387, 388, 390, 394, 401, 411, 412, 413, 428, 429, 430, 431, 433, 435, 437, 438, 439, 441, 442, 443, 444, 445, 448, 453, 454, 455, 458, 459, 460, 463, 464, 465, 466, 489, 494, 502, 504, 506, 507, 508, 509, 510, 511, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 535, 538, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 581, 584, 585, 586, 593, 598, 599, 601, 602, 605, 610, 613, 614, 618, 619, 622, 623, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 638, 640, 642, 644, 646, 647, 649, 652, 654, 656, 657, 658, 659, 662, 664, 666, 667, 669, 670, 673, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 695, 696, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 724, 725, 726, 727, 728, 730, 731, 733, 746, 748, 749, 759, 773, 775, 776, 778, 779, 780, 781, 783, 785, 786, 787, 789, 790, 791, 793, 801, 809, 810, 811, 812, 813, 814, 815, 817, 820, 821, 825, 826, 827, 829, 835, 836, 837, 839, 846, 847, 848, 856, 857, 866, 867, 871, 878, 883, 884, 885, 886, 887, 888, 890, 892, 893, 895, 896, 898, 899, 900, 901, 915, 927, 944, 989, 999, 1004, 1008, 1012, 1013, 1020, 1024, 1025, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "satur": [37, 168, 301], "uniform_labelings_scor": 37, "nwith": [37, 57, 61, 146, 346], "constantli": [37, 198, 1002], "unbound": [37, 977, 1034], "cardin": [37, 117, 118, 124, 170, 307, 308, 317, 400, 407, 454, 544, 545, 548, 549, 550, 551, 555, 556, 557, 670, 863, 864, 871, 898, 899, 900, 901, 978, 979, 986, 988, 1034, 1035], "why": [37, 52, 95, 110, 116, 168, 170, 174, 187, 256, 259, 345, 346, 374, 382, 387, 400, 402, 405, 411, 435, 438, 442, 978, 980, 993, 1008, 1011, 1023], "chart": [37, 264, 979, 1006, 1023], "henc": [37, 60, 72, 168, 202, 231, 268, 332, 345, 346, 360, 369, 376, 378, 380, 387, 400, 404, 407, 408, 478, 499, 530, 532, 533, 534, 554, 581, 634, 637, 643, 651, 653, 663, 678, 695, 696, 700, 706, 721, 747, 776, 783, 806, 807, 825, 826, 827, 828, 829, 865, 975, 977, 978, 979, 984, 985, 988, 999, 1027, 1028, 1031, 1032, 1034], "safe": [37, 168, 187, 234, 346, 374, 376, 400, 401, 425, 499, 500, 579, 582, 764, 768, 884, 944, 950, 981, 1026, 1027, 1028, 1033, 1034], "stabil": [37, 114, 168, 220, 264, 301, 346, 387, 397, 437, 641, 645, 661, 828, 847, 848, 866, 878, 926, 968, 974, 977, 988, 999, 1004, 1020, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "mislead": [37, 117, 118, 124, 168, 375, 389, 407, 544, 545, 548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901, 1015, 1033], "meaning": [37, 224, 288, 347, 397, 404, 408, 409, 410, 539, 719, 720, 728, 773, 774, 777, 839, 982, 992, 993, 1020, 1036], "plot_adjusted_for_chance_measur": [37, 68], "brendan": [38, 431, 445, 1036], "frei": [38, 431, 445, 1030], "delbert": [38, 431, 445], "dueck": [38, 431, 445], "messag": [38, 44, 62, 70, 95, 234, 345, 346, 369, 372, 373, 374, 378, 379, 382, 383, 400, 431, 445, 459, 530, 534, 539, 565, 618, 703, 787, 790, 791, 793, 801, 809, 814, 817, 819, 839, 847, 848, 888, 909, 910, 911, 914, 917, 941, 962, 978, 988, 1020, 1024, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "feb": [38, 431, 445], "affinitypropag": [38, 44, 315, 400, 1020, 1023, 1024, 1028, 1031, 1033, 1034, 1035, 1036], "labels_tru": [38, 49, 55, 64, 400, 695, 696, 705, 706, 708, 721, 726, 727, 745, 747, 776, 783], "af": 38, "prefer": [38, 44, 55, 250, 268, 301, 356, 360, 361, 362, 372, 374, 375, 376, 387, 400, 404, 405, 407, 408, 431, 445, 462, 463, 469, 478, 499, 500, 618, 623, 624, 645, 649, 650, 692, 716, 718, 747, 748, 839, 865, 890, 891, 932, 944, 967, 970, 972, 974, 978, 983, 993, 994, 998, 1011, 1021, 1027, 1029, 1033, 1034], "cluster_centers_indic": [38, 445], "cluster_centers_indices_": [38, 431], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 55, 58, 61, 62, 63, 65, 67, 315, 317, 346, 374, 387, 400, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 446, 1012, 1025], "n_clusters_": [38, 49, 55, 63, 432, 436], "homogeneity_scor": [38, 49, 58, 346, 400, 708, 726, 783, 978], "completeness_scor": [38, 49, 58, 312, 346, 400, 726, 727, 783, 978], "silhouette_scor": [38, 49, 58, 60, 346, 374, 400, 1020, 1024, 1026, 1028, 1030, 1034], "sqeuclidean": [38, 441, 448, 768, 769, 770], "872": [38, 986], "912": 38, "871": [38, 80, 81, 402, 465], "753": [38, 345], "cycler": 38, "viridi": [38, 279, 688], "class_memb": 38, "cluster_cent": [38, 61, 63, 64, 452], "303": [38, 68, 216, 626], "plot_affinity_propag": [38, 68, 431, 445], "impos": [39, 57, 127, 192, 202, 307, 385, 400, 405, 407, 408, 518, 648, 974], "simpli": [39, 86, 128, 150, 158, 223, 235, 268, 292, 313, 314, 360, 369, 374, 376, 379, 385, 387, 402, 403, 404, 405, 407, 408, 476, 686, 752, 755, 857, 929, 970, 978, 979, 980, 981, 992, 1005, 1013, 1027, 1028, 1029], "There": [39, 46, 116, 150, 216, 223, 234, 237, 250, 254, 256, 259, 345, 367, 369, 371, 374, 375, 376, 379, 385, 387, 388, 390, 397, 399, 400, 405, 407, 408, 409, 437, 443, 453, 525, 544, 545, 550, 551, 579, 580, 582, 597, 636, 968, 974, 975, 976, 977, 978, 981, 985, 988, 992, 993, 994, 997, 1001, 1012, 1020, 1028], "singl": [39, 48, 52, 53, 55, 58, 61, 62, 72, 108, 110, 111, 119, 120, 121, 129, 134, 147, 150, 156, 162, 165, 169, 171, 174, 182, 198, 200, 202, 238, 240, 249, 255, 268, 297, 315, 317, 332, 345, 346, 347, 351, 353, 356, 360, 361, 368, 369, 374, 379, 381, 382, 383, 385, 386, 387, 398, 399, 401, 403, 404, 405, 407, 408, 409, 425, 428, 431, 432, 436, 437, 438, 440, 445, 455, 457, 458, 484, 485, 487, 497, 500, 525, 544, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 573, 583, 590, 591, 593, 597, 618, 623, 625, 634, 657, 658, 664, 667, 668, 669, 681, 683, 685, 701, 712, 713, 714, 715, 726, 727, 728, 731, 764, 775, 785, 786, 787, 790, 791, 801, 808, 812, 813, 815, 816, 819, 827, 830, 831, 835, 847, 848, 849, 859, 860, 863, 864, 865, 870, 871, 885, 886, 898, 899, 900, 901, 906, 942, 946, 965, 967, 973, 974, 975, 978, 979, 981, 983, 985, 986, 988, 992, 993, 994, 998, 1002, 1004, 1011, 1013, 1020, 1021, 1022, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "unstabl": [39, 66, 168, 400, 402, 403, 680, 684, 926, 927, 994, 1024, 1025, 1027, 1032, 1034], "quickli": [39, 238, 296, 311, 371, 374, 375, 404, 407, 683, 974, 981, 982, 1002, 1013, 1031], "fight": [39, 202, 1002], "percol": 39, "distanc": [39, 40, 55, 57, 60, 61, 65, 67, 77, 81, 83, 100, 162, 165, 171, 184, 199, 219, 221, 224, 231, 279, 281, 282, 287, 289, 291, 292, 301, 306, 311, 315, 316, 345, 346, 360, 371, 383, 385, 387, 397, 400, 402, 405, 406, 410, 411, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 446, 447, 448, 449, 450, 452, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 529, 531, 538, 598, 599, 606, 610, 611, 613, 614, 619, 649, 650, 657, 659, 665, 666, 667, 668, 669, 679, 680, 681, 683, 684, 685, 686, 687, 690, 694, 715, 724, 748, 750, 752, 753, 754, 755, 758, 759, 760, 761, 762, 763, 768, 769, 770, 771, 780, 781, 784, 819, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 869, 884, 888, 890, 892, 894, 895, 896, 898, 899, 900, 901, 968, 972, 975, 976, 978, 984, 988, 990, 992, 993, 999, 1011, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "merg": [39, 41, 46, 51, 314, 372, 374, 377, 382, 385, 388, 400, 431, 432, 433, 436, 437, 454, 807, 1012, 1020, 1027], "exagger": [39, 168, 683, 975], "behaviour": [39, 100, 199, 200, 216, 334, 374, 387, 400, 407, 550, 551, 555, 556, 593, 888, 898, 899, 951, 967, 968, 978, 988, 1028, 1031, 1032, 1035, 1036], "shortest": [39, 379, 383, 679, 932, 975, 1033], "mechan": [39, 234, 341, 345, 361, 374, 376, 400, 408, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 976, 994, 1002], "resembl": [39, 202], "brittl": [39, 400], "pronounc": [39, 40, 52, 155], "kneighbors_graph": [39, 44, 62, 67, 279, 387, 400, 432, 436, 832, 833, 834, 836, 838, 840, 841, 842, 844, 981, 1020, 1024, 1029], "geometri": [39, 400, 975, 981], "instabl": [39, 168, 289, 443, 526, 530, 534, 686, 1027, 1030, 1033], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 56, 62, 67, 387, 400, 431, 433, 436, 1012, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1035], "1500": [39, 50, 57, 62, 67, 92, 219, 223, 244], "knn_graph": 39, "include_self": [39, 44, 67, 843, 844, 1024], "844": [39, 68, 407, 546, 547], "plot_agglomerative_clust": [39, 68], "waveform": 40, "euclidean": [40, 57, 58, 184, 231, 279, 287, 311, 316, 346, 397, 399, 400, 405, 406, 407, 408, 410, 431, 432, 435, 436, 437, 441, 443, 448, 451, 454, 522, 528, 580, 606, 610, 613, 614, 667, 669, 681, 683, 686, 687, 752, 753, 759, 760, 761, 762, 768, 769, 770, 771, 780, 781, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 884, 968, 972, 976, 979, 981, 990, 999, 1024, 1027, 1028, 1029, 1030, 1036], "cityblock": [40, 44, 400, 441, 448, 752, 768, 769, 770, 981], "invari": [40, 371, 387, 400, 410, 605, 680, 737, 805, 806, 974, 975, 978, 993, 999, 1028, 1031, 1032, 1033], "ie": [40, 66, 96, 431, 695, 758, 974, 988], "inter": [40, 117, 356, 407, 707, 933], "character": [40, 216, 350, 400, 404, 975], "ill": [40, 82, 203, 462, 463, 469, 641, 642, 645, 646, 647, 673, 674, 974, 977, 1012, 1030], "recov": [40, 65, 82, 96, 97, 103, 120, 150, 167, 182, 197, 198, 202, 219, 347, 402, 406, 409, 412, 451, 524, 550, 974, 975, 977, 999, 1012, 1026], "put": [40, 58, 139, 150, 152, 232, 239, 244, 295, 303, 315, 325, 336, 337, 342, 362, 376, 378, 379, 382, 410, 434, 438, 450, 506, 605, 638, 652, 785, 867, 871, 879, 892, 893, 894, 895, 896, 917, 968, 975, 977, 978, 979, 985, 988, 1001, 1005, 1007, 1013, 1032], "cc": [40, 372], "patheffect": 40, "pairwise_dist": [40, 387, 400, 411, 432, 435, 436, 437, 441, 448, 679, 687, 752, 761, 769, 770, 780, 781, 834, 836, 838, 842, 976, 1020, 1024, 1026, 1028, 1029, 1031, 1032], "sqr": 40, "sign": [40, 79, 86, 96, 99, 112, 182, 249, 295, 340, 374, 400, 405, 408, 535, 573, 580, 597, 626, 627, 649, 650, 657, 659, 665, 666, 667, 668, 725, 732, 890, 894, 925, 927, 943, 974, 978, 983, 988, 992, 993, 1012, 1020, 1024, 1029, 1033, 1035], "phi": [40, 405, 733, 856, 970, 978, 988, 993], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "f7bd01": 40, "377eb8": [40, 44, 62, 63, 227], "f781bf": [40, 44, 62, 63], "set_label": [40, 153, 231], "avg_dist": [40, 771], "set_path_effect": 40, "withstrok": 40, "foreground": [40, 66], "cividi": 40, "vmin": [40, 82, 95, 98, 106, 153, 156, 177, 182, 189, 214, 232, 248, 254, 297, 332], "45": [40, 64, 73, 143, 155, 170, 187, 198, 216, 266, 270, 271, 321, 332, 356, 404, 407, 408, 555, 556, 618, 625, 778, 785, 894, 968, 978, 986, 997, 1009, 1016, 1020, 1023], "interclass": 40, "976": [40, 68, 190], "plot_agglomerative_clustering_metr": [40, 68], "hierarchi": [41, 171, 374, 441, 447, 454, 983, 1012], "plot_dendrogram": 41, "kwarg": [41, 98, 234, 376, 381, 414, 418, 422, 429, 433, 439, 441, 455, 460, 526, 529, 531, 554, 608, 622, 637, 638, 643, 644, 651, 652, 653, 654, 668, 672, 675, 689, 690, 691, 693, 732, 830, 831, 849, 850, 854, 894, 905, 924, 938, 1027, 1031, 1033, 1037], "children_": [41, 432, 436, 454], "current_count": 41, "child_idx": 41, "leaf": [41, 115, 126, 128, 350, 354, 400, 407, 411, 432, 433, 434, 435, 436, 437, 441, 448, 454, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 898, 899, 900, 901, 902, 903, 981, 994, 1023, 1025, 1027, 1031, 1034], "linkage_matrix": 41, "column_stack": [41, 295, 303], "distances_": [41, 432, 436, 1032], "distance_threshold": [41, 432, 436, 1029, 1032], "truncate_mod": 41, "parenthesi": [41, 374], "101": [41, 68, 371, 836, 1021], "plot_agglomerative_dendrogram": [41, 68], "scalabl": [42, 44, 62, 165, 173, 175, 252, 275, 316, 346, 374, 400, 407, 408, 439, 482, 493, 580, 631, 793, 804, 814, 816, 828, 851, 860, 862, 890, 892, 895, 896, 970, 973, 975, 978, 991, 993, 1002, 1020, 1023, 1024, 1030, 1031, 1034, 1035], "hundr": [42, 122, 220, 305, 369, 404, 407, 552, 553, 975, 1031], "thousand": [42, 116, 231, 233, 305, 346, 369, 400, 407, 847, 848, 895, 975, 1013, 1029, 1031], "million": [42, 56, 155, 174, 408, 410, 683, 975, 993, 1002, 1034, 1035], "chose": [42, 168, 1008], "usag": [42, 53, 71, 74, 85, 99, 121, 144, 168, 169, 228, 232, 234, 253, 282, 288, 290, 297, 328, 347, 360, 373, 374, 376, 377, 381, 382, 384, 387, 388, 390, 400, 404, 405, 410, 411, 435, 437, 441, 480, 552, 553, 600, 639, 649, 650, 651, 657, 659, 660, 667, 668, 669, 670, 671, 768, 771, 780, 781, 890, 898, 899, 900, 901, 927, 967, 970, 977, 978, 979, 981, 993, 1000, 1004, 1008, 1015, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "enjoi": 42, "edit": [42, 371, 373, 374, 377, 378, 382, 385, 390, 521, 525, 820, 972, 974, 979, 985, 1013], "158": [42, 407, 660], "manojkumarsivaraj334": 42, "joblib": [42, 54, 72, 116, 279, 312, 369, 372, 374, 377, 383, 385, 387, 390, 393, 394, 399, 401, 411, 428, 432, 435, 436, 437, 439, 441, 443, 448, 449, 452, 455, 458, 463, 499, 522, 526, 527, 528, 530, 533, 534, 536, 537, 539, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 585, 593, 601, 623, 625, 630, 638, 642, 644, 646, 648, 649, 650, 652, 654, 656, 657, 659, 667, 670, 679, 680, 681, 682, 683, 684, 685, 764, 768, 771, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 832, 833, 836, 838, 840, 841, 843, 844, 849, 850, 851, 852, 885, 886, 944, 945, 946, 948, 963, 978, 999, 1020, 1021, 1023, 1025, 1027, 1028, 1029, 1031, 1032, 1035], "cpu_count": [42, 116, 279, 946], "n_center": [42, 503], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 57, 58, 165, 280, 293, 304, 315, 346, 370, 400, 433, 434, 437, 438, 439, 440, 443, 450, 451, 453, 495, 540, 622, 837, 1000, 1015, 1020, 1024, 1027, 1032, 1036], "subcluster_centers_": [42, 433], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 64], "256": [42, 48, 53, 122, 124, 134, 307, 361, 369, 400, 407, 440, 459, 528, 537, 554, 846, 878, 888, 1013, 1034], "max_no_improv": [42, 61, 64, 440, 528, 529, 530, 537, 1034, 1035], "t_mini_batch": [42, 64], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 58, 60, 61, 63, 64, 95, 315, 346, 431, 434, 438, 439, 440, 1012], "513": [42, 68, 839, 981], "plot_birch_vs_minibatchkmean": [42, 68], "bisectingkmean": [43, 400, 1034, 1035, 1036], "__doc__": [43, 75, 155, 237, 247, 387], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 62], "variant": [43, 95, 161, 164, 165, 259, 314, 315, 346, 347, 380, 400, 403, 405, 408, 410, 440, 451, 481, 484, 485, 503, 506, 534, 550, 551, 556, 606, 610, 613, 614, 618, 621, 629, 630, 632, 636, 663, 695, 788, 792, 794, 795, 796, 805, 812, 833, 851, 887, 968, 974, 975, 976, 977, 978, 980, 981, 992, 999, 1013, 1020, 1028], "algorithm_nam": 43, "algo": [43, 105], "hide": [43, 374, 382, 825, 826, 827, 828, 829, 1023, 1028, 1036], "flat": [43, 95, 101, 169, 219, 220, 221, 257, 400, 408, 431, 437, 439, 452, 500, 985, 1012, 1020, 1021, 1036], "label_out": 43, "037": [43, 68, 700], "plot_bisect_kmean": [43, 68], "null": [44, 71, 168, 169, 170, 259, 265, 400, 404, 639, 660, 671, 695, 721, 747, 783, 815, 974, 975, 978, 993, 1030], "mismatch": [44, 977, 1029], "warn": [44, 53, 62, 72, 198, 213, 234, 262, 279, 296, 297, 304, 305, 308, 311, 360, 363, 374, 377, 378, 379, 387, 394, 408, 438, 440, 450, 487, 529, 531, 538, 541, 544, 545, 548, 549, 550, 551, 555, 556, 557, 562, 563, 564, 565, 566, 567, 569, 593, 627, 661, 681, 684, 685, 703, 704, 719, 720, 728, 773, 774, 777, 825, 826, 827, 829, 854, 855, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 910, 911, 917, 927, 944, 946, 948, 964, 965, 967, 978, 988, 1011, 1020, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "noisy_circl": [44, 62], "noisy_moon": [44, 62], "no_structur": [44, 62], "anisotropicli": [44, 62], "170": [44, 57, 58, 62, 380], "x_aniso": [44, 57, 62], "aniso": [44, 62], "plot_num": [44, 62, 227], "default_bas": [44, 62], "quantil": [44, 53, 63, 91, 110, 112, 165, 176, 217, 301, 304, 305, 385, 407, 429, 430, 449, 510, 543, 551, 553, 648, 661, 713, 735, 738, 740, 813, 855, 867, 868, 869, 879, 880, 978, 988, 1000, 1015, 1020, 1024, 1027, 1029, 1033, 1034, 1036], "damp": [44, 400, 431, 445], "min_sampl": [44, 49, 65, 385, 387, 400, 411, 435, 437, 441, 447, 448, 662, 974, 1029, 1033], "xi": [44, 65, 371, 400, 403, 408, 441, 447, 500, 992, 1031], "min_cluster_s": [44, 65, 317, 400, 437, 441, 447, 1029], "allow_single_clust": [44, 437], "hdbscan_min_cluster_s": 44, "hdbscan_min_sampl": 44, "i_dataset": [44, 62, 227], "algo_param": [44, 62], "param": [44, 55, 61, 62, 71, 122, 124, 125, 219, 233, 234, 257, 259, 267, 271, 283, 296, 374, 376, 387, 407, 410, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 679, 680, 681, 682, 683, 785, 786, 787, 790, 791, 799, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 967, 1026, 1030, 1031, 1033, 1034], "estimate_bandwidth": [44, 63, 400, 439, 452], "symmetr": [44, 123, 171, 200, 387, 398, 400, 443, 453, 454, 465, 510, 518, 520, 681, 685, 686, 695, 696, 706, 707, 708, 714, 718, 726, 727, 745, 747, 753, 775, 783, 785, 786, 964, 967, 974, 978, 981], "meanshift": [44, 315, 400, 431, 1023, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1036], "bin_seed": [44, 63, 439, 452, 1031], "two_mean": 44, "spectralclust": [44, 315, 400, 431, 981, 1020, 1021, 1030, 1032, 1033, 1034, 1035, 1036], "nearest_neighbor": [44, 443, 682], "average_linkag": 44, "gmm": [44, 165, 243, 245, 248, 249, 250, 251, 495, 503, 786, 806, 977, 1020, 1021, 1024, 1025, 1026], "gaussianmixtur": [44, 57, 245, 246, 247, 248, 249, 250, 406, 785, 1026, 1028, 1029, 1033, 1034], "covariance_typ": [44, 245, 246, 248, 249, 250, 785, 786], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 62, 297, 382, 383], "catch_warn": [44, 62, 234, 296, 297], "filterwarn": [44, 62, 213, 296, 297, 374, 988], "fulli": [44, 55, 117, 123, 360, 368, 369, 387, 400, 406, 407, 409, 434, 438, 548, 549, 555, 556, 898, 899, 900, 901, 902, 904, 967, 968, 974, 983, 991, 998, 1033, 1034], "t1": [44, 46, 62, 213, 221, 224, 227], "ff7f00": [44, 62, 227], "4daf4a": [44, 62], "a65628": [44, 62], "984ea3": [44, 62], "999999": [44, 62], "e41a1c": [44, 62], "dede00": [44, 62, 63], "000000": [44, 168, 187, 216, 259, 305, 727], "transax": [44, 62, 223, 227, 246, 287, 303], "486": [44, 68, 169, 200, 267, 275], "plot_cluster_comparison": [44, 68], "bad": [45, 60, 61, 151, 168, 345, 356, 374, 400, 410, 683, 736, 967, 974, 975, 980, 986, 1012, 1020], "eight": [45, 1013], "deliv": [45, 360, 1002], "though": [45, 55, 116, 147, 174, 177, 265, 284, 303, 305, 346, 347, 356, 360, 368, 371, 374, 376, 386, 387, 400, 405, 406, 407, 408, 409, 794, 796, 890, 967, 968, 970, 975, 978, 981, 988, 992, 1013, 1028], "3d": [45, 48, 67, 90, 101, 102, 195, 219, 221, 223, 408, 497, 577, 941, 1027, 1028, 1030], "mplot3d": [45, 67, 90, 101, 102, 169, 195, 219, 221], "noqa": [45, 67, 90, 101, 102, 123, 147, 162, 163, 169, 195, 219, 221, 270, 271, 313, 345, 378, 570, 571, 618, 790, 791, 967, 1029], "f401": [45, 67, 90, 101, 102, 169, 195, 219, 221], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "est": [45, 130, 168, 234, 236, 303, 313, 356, 394, 407, 553, 725, 855, 967, 978, 988, 992, 1031, 1032], "elev": [45, 67, 90, 101, 102, 169, 195, 219, 223], "azim": [45, 67, 90, 101, 102, 169, 195, 219, 223], "134": [45, 53, 102, 122, 259, 1023], "xaxi": [45, 90, 101, 102, 116, 195, 219, 221, 224, 279, 284, 345], "set_ticklabel": [45, 90, 101, 102, 195, 345], "zaxi": [45, 90, 101, 102, 195, 219], "petal": [45, 90, 104, 106, 119, 241, 313, 316, 371, 401, 903, 994, 1010, 1011], "sepal": [45, 90, 104, 106, 119, 152, 181, 241, 313, 316, 329, 371, 988, 1010, 1011], "length": [45, 70, 89, 90, 92, 104, 106, 119, 150, 151, 152, 155, 156, 158, 174, 181, 234, 235, 238, 241, 313, 316, 329, 347, 367, 371, 374, 382, 383, 387, 401, 405, 407, 408, 410, 436, 481, 499, 500, 503, 506, 514, 542, 554, 572, 573, 580, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 623, 637, 638, 641, 642, 643, 644, 645, 647, 648, 651, 652, 653, 654, 672, 675, 771, 787, 790, 791, 801, 816, 818, 821, 822, 824, 832, 833, 834, 836, 838, 877, 903, 910, 912, 916, 932, 933, 949, 952, 977, 984, 988, 1004, 1010, 1011, 1020, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1036], "set_zlabel": [45, 90, 195], "setosa": [45, 90, 102, 104, 268, 269, 371, 495, 1004, 1011], "versicolour": [45, 90, 102, 104, 371, 1011], "virginica": [45, 90, 102, 104, 268, 269, 371, 495, 978, 1011], "text3d": [45, 102], "292": [45, 68, 105, 107, 346, 390, 407, 725], "plot_cluster_iri": [45, 68], "voxel": [46, 66, 576], "multipl": [46, 69, 76, 92, 105, 110, 116, 118, 119, 165, 168, 192, 232, 259, 271, 281, 311, 317, 360, 361, 362, 368, 370, 371, 374, 376, 377, 378, 379, 385, 387, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 435, 451, 455, 457, 458, 460, 465, 479, 482, 483, 486, 487, 488, 494, 495, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 542, 544, 545, 546, 547, 550, 551, 552, 553, 554, 572, 590, 598, 599, 601, 602, 618, 623, 625, 630, 631, 632, 633, 637, 638, 641, 643, 644, 645, 648, 651, 652, 653, 654, 657, 658, 659, 662, 664, 667, 669, 670, 680, 681, 683, 684, 685, 712, 713, 718, 735, 736, 738, 740, 741, 743, 775, 778, 781, 785, 786, 787, 789, 790, 791, 792, 793, 799, 801, 802, 803, 804, 805, 806, 807, 812, 813, 814, 816, 820, 821, 822, 823, 824, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 852, 855, 867, 871, 879, 882, 883, 890, 891, 892, 895, 906, 921, 926, 927, 949, 952, 970, 973, 974, 975, 979, 980, 981, 985, 986, 991, 992, 994, 998, 999, 1004, 1013, 1020, 1021, 1023, 1026, 1027, 1030, 1031, 1032, 1033, 1035, 1036], "partli": [46, 759], "procedur": [46, 56, 116, 123, 147, 178, 186, 249, 261, 304, 308, 332, 345, 356, 374, 376, 385, 386, 387, 388, 398, 399, 402, 404, 405, 407, 409, 522, 528, 529, 531, 536, 537, 538, 544, 545, 546, 547, 550, 551, 584, 586, 593, 600, 635, 663, 665, 678, 718, 775, 847, 848, 867, 879, 949, 967, 974, 980, 986, 988, 991, 992, 993, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "solut": [46, 177, 182, 187, 189, 203, 212, 227, 233, 314, 332, 372, 376, 387, 397, 400, 402, 404, 405, 408, 409, 410, 440, 442, 444, 522, 528, 529, 530, 531, 533, 534, 536, 537, 538, 539, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 601, 637, 639, 641, 643, 645, 646, 647, 649, 651, 653, 655, 656, 657, 658, 659, 660, 663, 665, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 785, 786, 801, 839, 847, 848, 971, 972, 974, 975, 977, 982, 984, 992, 993, 997, 1002, 1008, 1011, 1013, 1020, 1023, 1033, 1034, 1035], "closest": [46, 64, 202, 376, 400, 431, 433, 434, 438, 439, 440, 450, 644, 769, 770, 820, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 969, 972, 979, 981, 1011], "partit": [46, 66, 70, 126, 128, 259, 297, 397, 398, 400, 404, 407, 440, 442, 444, 453, 502, 548, 549, 550, 551, 554, 555, 556, 695, 696, 706, 776, 838, 898, 899, 900, 901, 977, 981, 984, 988, 994, 1013], "cluster_qr": [46, 400, 443, 453, 1034], "qr": [46, 200, 525, 532, 535, 926, 927, 975, 1026], "pivot": [46, 270, 271], "cheung": [46, 1021], "andrew": [46, 400, 453, 682, 686, 708, 727, 783, 865, 982, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "knyazev": [46, 400, 443, 453, 686, 1030, 1033, 1034], "ucdenv": 46, "skimag": [46, 47, 368, 1012], "spectral_clust": [46, 66, 1028, 1030, 1032, 1033, 1034, 1035], "orig_coin": [46, 47], "speed": [46, 47, 57, 70, 98, 116, 163, 169, 184, 187, 191, 237, 279, 313, 321, 345, 347, 362, 363, 374, 377, 383, 385, 387, 398, 400, 405, 407, 408, 411, 434, 435, 438, 439, 440, 441, 443, 448, 450, 451, 452, 453, 522, 523, 601, 618, 623, 624, 625, 630, 637, 638, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 655, 672, 675, 683, 785, 786, 793, 814, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 865, 927, 967, 975, 977, 979, 992, 1002, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "down": [46, 47, 81, 110, 213, 214, 221, 231, 232, 234, 262, 298, 301, 356, 368, 377, 382, 402, 405, 434, 441, 447, 581, 584, 585, 630, 640, 764, 768, 771, 865, 868, 869, 880, 892, 895, 902, 974, 1004, 1012, 1028], "alias": [46, 47, 234, 372, 374, 377, 391, 438, 450, 1020, 1024, 1034], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 1012], "anti_alias": [46, 47, 1012], "img_to_graph": [46, 66, 408, 1023, 1033], "exponenti": [46, 75, 150, 155, 284, 289, 406, 407, 410, 440, 527, 545, 550, 605, 610, 613, 630, 634, 748, 749, 830, 831, 835, 847, 848, 865, 970, 974, 978, 993, 1011, 1027, 1033], "beta": [46, 85, 167, 202, 380, 398, 400, 403, 527, 529, 531, 538, 635, 719, 720, 726, 732, 773, 783, 785, 978, 1011, 1022, 1025, 1027, 1029, 1030], "voronoi": [46, 66, 400], "n_region": 46, "extra": [46, 119, 236, 279, 347, 372, 373, 375, 378, 387, 407, 408, 429, 434, 438, 450, 455, 523, 548, 549, 557, 581, 582, 691, 692, 693, 811, 834, 900, 901, 917, 938, 977, 978, 981, 1020, 1023, 1025, 1026, 1028, 1033, 1035], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 443, 453, 679, 682, 686, 1030, 1033, 1034, 1035], "amg": [46, 66, 400, 443, 453, 682, 686, 1030, 1034, 1035], "pyamg": [46, 390, 393, 400, 443, 453, 682, 686], "toler": [46, 73, 162, 189, 191, 214, 215, 347, 369, 376, 383, 400, 412, 434, 438, 443, 450, 453, 462, 463, 469, 473, 474, 475, 522, 523, 524, 526, 527, 531, 532, 533, 534, 535, 536, 538, 539, 550, 551, 552, 553, 618, 637, 638, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 667, 669, 670, 672, 673, 674, 675, 679, 680, 681, 682, 684, 685, 686, 830, 831, 835, 839, 847, 848, 885, 886, 890, 891, 892, 893, 894, 895, 896, 964, 974, 978, 992, 993, 1009, 1032, 1033, 1034, 1035], "eigen_tol": [46, 443, 453, 682, 686, 1021, 1034, 1035], "todo": [46, 231, 378, 382, 387, 400, 1037], "21243": 46, "assign_label": [46, 400, 443, 453], "individu": [46, 60, 80, 108, 113, 130, 134, 142, 159, 165, 166, 172, 198, 216, 228, 262, 264, 311, 340, 361, 375, 378, 381, 383, 387, 389, 397, 401, 404, 407, 408, 428, 443, 453, 455, 487, 492, 494, 500, 546, 547, 550, 551, 553, 554, 556, 558, 559, 560, 561, 594, 600, 601, 623, 624, 634, 636, 648, 649, 650, 659, 662, 663, 664, 665, 666, 667, 668, 669, 678, 703, 710, 718, 724, 740, 741, 775, 787, 801, 818, 822, 823, 825, 826, 827, 828, 829, 848, 851, 859, 860, 862, 863, 864, 867, 869, 870, 875, 876, 877, 890, 891, 978, 979, 988, 993, 1008, 1013, 1015, 1021, 1024, 1026, 1032, 1034, 1036], "comment": [46, 345, 372, 373, 374, 375, 377, 378, 382, 478, 570, 978], "paus": 46, "21194": [46, 1033], "43": [46, 72, 76, 157, 195, 231, 259, 279, 371, 379, 787, 801, 871], "861": [46, 68, 371, 778, 779, 978], "plot_coin_segment": [46, 68], "spatial": [47, 49, 55, 171, 182, 215, 297, 369, 387, 400, 411, 435, 437, 441, 443, 448, 670, 683, 750, 753, 768, 769, 770, 771, 780, 781, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 974, 981, 988, 1022, 1026, 1033, 1036], "constrain": [47, 95, 120, 127, 169, 189, 295, 312, 330, 332, 367, 387, 399, 400, 405, 407, 500, 552, 553, 626, 649, 681, 685, 815, 974, 977, 1024], "piec": [47, 199, 361, 977], "grid_to_graph": [47, 51, 54, 400, 408, 1012, 1033], "st": [47, 67, 259, 316, 1023, 1026, 1028], "156": [47, 168, 371], "4697": 47, "396": [47, 68, 70, 106, 107, 371, 1013], "plot_coin_ward_segment": [47, 68], "vq": [48, 58], "palac": 48, "china": [48, 400, 497, 498, 575], "615": 48, "literatur": [48, 155, 259, 346, 371, 374, 380, 382, 385, 386, 400, 403, 405, 407, 434, 438, 440, 492, 527, 529, 531, 538, 546, 547, 579, 582, 699, 785, 967, 970, 974, 978, 1030], "codebook": [48, 557, 820], "palett": [48, 168, 259, 282], "byte": [48, 53, 408, 478, 494, 499, 500, 573, 579, 580, 582, 943, 1011, 1013, 1020, 1027, 1028, 1035], "wherea": [48, 53, 67, 80, 109, 126, 212, 260, 261, 262, 268, 306, 341, 362, 388, 404, 407, 556, 649, 650, 789, 805, 818, 970, 977, 979, 981, 988, 994, 1033], "rgb": [48, 369, 408, 484, 485, 574, 575, 578], "gif": 48, "pick": [48, 55, 60, 171, 235, 267, 315, 320, 369, 374, 378, 400, 407, 434, 451, 514, 664, 900, 901, 967, 974, 975, 977, 992, 1031], "017": [48, 198, 217, 380, 462, 463], "040": [48, 120, 134, 194, 217], "robertlayton": 48, "load_sample_imag": [48, 574, 575, 1029], "pairwise_distances_argmin": [48, 64, 315, 770, 1028, 1034, 1035, 1036], "n_color": 48, "photo": 48, "jpg": [48, 497, 575], "255": [48, 98, 231, 279, 297, 307, 314, 369, 484, 485, 552, 553], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 238], "book": [48, 70, 434, 438, 440, 820, 825, 829, 974, 975, 976, 979, 996, 1032], "alongsid": [48, 374, 380, 387, 390, 409, 978, 985, 998, 999], "510": [48, 68, 1011], "plot_color_quant": [48, 68], "750": [49, 55, 118, 259], "math": [49, 70, 237, 259, 260, 371, 390, 754], "db": [49, 55, 400], "n_noise_": 49, "come": [49, 67, 70, 80, 86, 100, 101, 150, 232, 311, 340, 345, 346, 360, 362, 367, 371, 374, 375, 378, 382, 385, 387, 390, 400, 404, 407, 408, 430, 441, 447, 463, 541, 696, 783, 808, 892, 895, 967, 968, 972, 975, 977, 981, 984, 993, 1004, 1020, 1031, 1034, 1036], "handi": [49, 71, 346, 347, 375, 1036], "883": 49, "917": 49, "916": 49, "626": [49, 184], "unique_label": [49, 55, 346, 376, 383], "core_samples_mask": 49, "zeros_lik": [49, 200, 268], "bool": [49, 66, 81, 163, 216, 354, 374, 412, 413, 414, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 450, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 510, 513, 514, 515, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 691, 693, 694, 698, 699, 700, 702, 703, 704, 705, 716, 717, 718, 719, 720, 721, 728, 731, 732, 740, 741, 744, 746, 751, 753, 757, 758, 759, 764, 768, 772, 773, 774, 775, 777, 779, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 801, 805, 806, 809, 810, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 921, 927, 928, 940, 943, 949, 951, 959, 964, 965, 966, 968, 1029, 1032, 1033], "core_sample_indices_": [49, 435], "class_member_mask": 49, "markerfacecolor": [49, 55, 61, 63, 64], "175": [49, 68, 216, 217, 380, 988], "plot_dbscan": [49, 68, 411, 435], "constitut": [50, 387, 404, 407, 441, 447, 579, 580, 582, 982], "standpoint": 50, "proce": [50, 144, 179, 372, 378, 403, 404, 407, 431, 974], "reassign": [50, 374, 438, 440, 1021, 1025], "success": [50, 165, 252, 266, 275, 356, 395, 400, 404, 405, 407, 506, 555, 570, 787, 790, 791, 808, 895, 981, 1002, 1008, 1012, 1015, 1032], "becom": [50, 55, 57, 72, 80, 200, 202, 234, 261, 279, 302, 306, 332, 345, 356, 368, 374, 376, 378, 382, 387, 388, 400, 402, 407, 408, 410, 431, 441, 445, 446, 448, 572, 579, 580, 582, 610, 618, 649, 650, 667, 669, 864, 890, 891, 897, 973, 974, 975, 977, 981, 988, 993, 1011, 1013, 1021, 1028, 1029, 1032, 1033, 1034, 1035], "fetch_olivetti_fac": [50, 95, 118, 236, 369, 1028, 1029, 1030], "extract_patches_2d": [50, 98, 408, 1028], "patch_siz": [50, 98, 408, 574, 575], "buffer": [50, 1033], "max_patch": [50, 408, 574, 575, 1028], "4i": 50, "dt": [50, 98, 109, 131, 407, 408, 994], "700": [50, 313], "800": [50, 121, 298, 299, 314, 369, 575, 683], "1100": 50, "1200": [50, 122, 301, 407], "1300": 50, "1400": [50, 465], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 314], "2200": [50, 369, 484], "2300": [50, 187], "ntrain": 50, "537": [50, 68], "plot_dict_face_patch": [50, 68], "agglo": [51, 436, 1012], "featureagglomer": [51, 54, 431, 432, 995, 1012, 1023, 1029, 1030, 1033, 1034, 1036], "x_reduc": [51, 90, 128, 436, 1012], "x_restor": 51, "images_restor": 51, "vmax": [51, 82, 95, 98, 106, 153, 156, 177, 182, 189, 214, 232, 248, 254, 297, 332], "163": [51, 68, 101, 107, 322, 326, 371, 986], "plot_digits_agglomer": [51, 68], "rich": [52, 382, 385, 400, 430, 1002, 1031, 1034], "richer": [52, 105, 400], "uneven": [52, 254, 400, 404], "patholog": [52, 977, 1026], "clean": [52, 71, 197, 356, 366, 372, 406, 984, 988, 1030], "fring": [52, 400], "sensibl": [52, 162, 346, 376, 974, 988], "resampl": [52, 123, 155, 168, 216, 283, 383, 385, 546, 547, 952, 999, 1029, 1033], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 219, 220, 221, 679, 680, 681, 683, 975, 1021, 1026, 1030, 1034, 1035], "479": [52, 68], "plot_digits_linkag": [52, 68], "raccoon": [53, 98, 405], "addition": [53, 72, 112, 168, 198, 216, 234, 312, 314, 346, 374, 385, 398, 408, 601, 602, 637, 643, 662, 867, 967, 968, 978, 986, 998, 1026], "adapt": [53, 55, 109, 110, 122, 123, 153, 244, 245, 303, 361, 372, 373, 374, 383, 400, 407, 410, 506, 507, 508, 509, 667, 668, 669, 847, 848, 974, 980, 982, 988, 992, 998, 999, 1028, 1029, 1036], "pooch": [53, 374, 390, 393], "instal": [53, 241, 279, 311, 312, 313, 314, 315, 316, 317, 360, 361, 363, 374, 375, 377, 378, 380, 382, 385, 386, 393, 396, 400, 408, 443, 453, 487, 682, 686, 946, 994, 996, 1013, 1027, 1028, 1029, 1033, 1034], "raccoon_fac": [53, 98], "nbyte": [53, 231], "768": 53, "1024": [53, 105, 440, 459, 529, 888, 1033], "uint8": [53, 98, 368, 488, 497, 498, 1032], "786432": 53, "unsign": [53, 99, 369, 573, 943], "786": [53, 71], "kilobyt": 53, "behind": [53, 80, 110, 376, 378, 382, 399, 402, 407, 977, 981, 990, 1036], "simplest": [53, 404, 975, 978, 1011, 1012], "certainli": [53, 70, 346], "compressed_raccoon_uniform": 53, "_discret": [53, 304, 308], "239": [53, 304, 308, 1020], "futurewarn": [53, 177, 304, 308, 311, 374, 382, 1027, 1028, 1029, 1031, 1033, 1036], "onward": [53, 304, 308, 864, 1024], "subsampl": [53, 105, 122, 125, 169, 198, 215, 216, 255, 304, 308, 313, 449, 550, 551, 552, 553, 554, 623, 670, 692, 790, 791, 816, 855, 867, 879, 906, 916, 970, 974, 999, 1001, 1020, 1030, 1034, 1036], "200_000": [53, 304, 308, 855, 1036], "silenc": [53, 234, 304, 308, 487], "disabl": [53, 114, 304, 308, 345, 372, 374, 408, 440, 451, 459, 528, 529, 530, 537, 550, 551, 552, 553, 849, 888, 910, 911, 988, 1026, 1029, 1033, 1035], "spot": [53, 229, 400], "leav": [53, 110, 115, 124, 169, 171, 216, 266, 306, 354, 356, 360, 371, 373, 379, 387, 400, 407, 410, 432, 433, 436, 437, 454, 494, 548, 549, 550, 551, 552, 553, 555, 556, 557, 664, 666, 789, 794, 795, 796, 797, 805, 806, 830, 831, 879, 898, 899, 900, 901, 967, 975, 981, 985, 994, 1008, 1011, 1020, 1027, 1029, 1031, 1032, 1036], "bin_edg": 53, "bin_edges_": [53, 302, 855], "bin_cent": [53, 198], "625": [53, 198, 699], "875": [53, 151, 660], "375": [53, 440, 740, 978], "140": [53, 153, 160, 271, 275, 407, 501, 507, 508, 509, 546, 547, 979], "171": [53, 195, 217, 371, 380, 778, 978], "203": 53, "234": [53, 258, 275, 825, 829, 847, 848, 980], "axvlin": [53, 60, 73, 82, 103, 122, 132, 168, 170, 187, 265, 1009], "get_ybound": 53, "state": [53, 57, 70, 72, 80, 200, 231, 239, 245, 265, 313, 356, 361, 362, 374, 376, 380, 382, 385, 387, 388, 399, 408, 413, 431, 434, 438, 440, 445, 450, 466, 535, 580, 670, 790, 791, 799, 801, 803, 830, 831, 837, 885, 886, 913, 967, 968, 974, 980, 983, 990, 998, 999, 1002, 1022, 1024, 1026, 1028, 1030, 1033, 1036], "compressed_raccoon_kmean": 53, "9141241": 53, "3627656": 53, "65000752": 53, "26055499": 53, "68738405": 53, "159": [53, 255, 275, 369, 1020], "79431128": 53, "185": [53, 159, 371, 380, 847, 848], "18557327": 53, "224": [53, 85, 128, 400, 715], "01945707": 53, "save": [53, 70, 72, 298, 373, 374, 378, 380, 381, 382, 387, 394, 404, 412, 459, 525, 526, 618, 830, 831, 888, 974, 978, 988, 994, 1002, 1013, 1020, 1023, 1027, 1030], "verifi": [53, 60, 168, 198, 374, 379, 396, 962, 981], "6291456": 53, "surpris": [53, 169, 974, 998, 1022], "x8": 53, "ndarrai": [53, 58, 90, 198, 241, 257, 258, 259, 374, 375, 376, 380, 381, 396, 408, 411, 412, 415, 416, 418, 421, 422, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 488, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 691, 692, 693, 706, 709, 712, 713, 714, 717, 718, 728, 735, 736, 738, 740, 741, 743, 744, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 779, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 908, 909, 910, 915, 916, 926, 927, 928, 929, 933, 940, 942, 943, 947, 950, 951, 953, 954, 955, 956, 959, 964, 965, 978, 993, 999, 1023, 1027, 1030, 1031, 1034, 1035, 1036], "practic": [53, 71, 80, 86, 98, 116, 120, 150, 167, 168, 174, 182, 200, 227, 233, 260, 267, 285, 286, 313, 332, 361, 363, 374, 376, 377, 380, 382, 386, 387, 400, 402, 404, 405, 406, 407, 408, 410, 438, 443, 453, 512, 515, 580, 623, 624, 661, 785, 829, 883, 890, 967, 968, 972, 977, 978, 979, 980, 981, 984, 985, 988, 998, 999, 1000, 1002, 1004, 1013, 1014, 1015, 1022, 1026, 1028, 1030, 1032], "gain": [53, 221, 266, 279, 281, 321, 345, 346, 354, 373, 380, 382, 385, 407, 523, 548, 552, 553, 555, 716, 746, 785, 786, 819, 898, 900, 979, 983, 991, 994, 1023, 1027, 1030], "529": [53, 68], "plot_face_compress": [53, 68], "anova": [54, 141, 148, 165, 327, 343, 401, 495, 506, 583, 586, 587, 589, 590, 591, 595, 596, 597, 600, 704, 812, 816, 850, 851, 870, 890, 895, 993], "bayesianridg": [54, 162, 177, 178, 182, 313, 618, 635, 974, 1027, 1028, 1029, 1030, 1033, 1034, 1036], "shutil": [54, 72, 401], "tempfil": [54, 281, 311, 401, 981], "feature_select": [54, 71, 72, 74, 141, 142, 143, 144, 145, 146, 147, 165, 241, 313, 315, 335, 356, 363, 387, 391, 401, 409, 572, 967, 1020, 1021, 1023, 1024, 1025, 1026, 1027], "kfold": [54, 116, 122, 136, 254, 264, 356, 404, 428, 463, 558, 559, 585, 593, 638, 642, 644, 646, 652, 654, 656, 664, 787, 790, 791, 793, 795, 797, 801, 806, 808, 809, 810, 811, 812, 813, 814, 815, 817, 821, 824, 871, 1008, 1021, 1022, 1023, 1025, 1026, 1028, 1030], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 78, 270, 998], "cachedir": [54, 72, 383, 401], "mkdtemp": [54, 401], "mem": [54, 380, 499], "n_x": [54, 576], "n_y": [54, 576, 980, 988], "parcel": [54, 67, 400], "ward__n_clust": 54, "n_job": [54, 72, 73, 116, 117, 118, 123, 124, 130, 137, 146, 162, 168, 169, 170, 220, 222, 239, 258, 260, 261, 263, 274, 279, 311, 312, 313, 316, 361, 374, 387, 407, 411, 428, 435, 437, 439, 441, 443, 448, 449, 452, 455, 458, 463, 522, 526, 527, 528, 530, 533, 534, 536, 537, 539, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 585, 593, 601, 623, 625, 630, 638, 642, 644, 646, 648, 649, 650, 652, 654, 656, 657, 659, 667, 670, 679, 680, 681, 682, 683, 684, 685, 764, 768, 771, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 849, 852, 885, 886, 944, 946, 967, 978, 979, 981, 1008, 1009, 1013, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 432, 436, 1020, 1024], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 95, 109, 113, 114, 125, 229, 253, 258, 266, 268, 312, 346, 350, 354, 363, 371, 373, 374, 376, 383, 388, 397, 399, 400, 404, 405, 407, 408, 411, 435, 437, 443, 455, 478, 499, 503, 505, 511, 513, 517, 518, 522, 528, 529, 531, 541, 548, 549, 550, 551, 555, 556, 557, 558, 559, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 608, 623, 649, 650, 657, 659, 667, 668, 669, 698, 708, 717, 724, 726, 736, 753, 759, 768, 772, 778, 779, 820, 830, 831, 832, 833, 834, 836, 838, 840, 841, 845, 847, 848, 853, 869, 870, 873, 877, 890, 895, 898, 899, 900, 901, 929, 930, 931, 949, 951, 952, 972, 974, 978, 979, 982, 985, 988, 989, 990, 994, 1002, 1004, 1025, 1026, 1028, 1030, 1031, 1032, 1034, 1036], "return_dist": [54, 454, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 981, 1024], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 142, 409, 583, 586, 587, 589, 590, 591, 595, 596, 600, 1023, 1027, 1034], "cach": [54, 165, 260, 279, 280, 293, 360, 361, 369, 387, 432, 436, 441, 459, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 493, 499, 787, 832, 834, 850, 851, 888, 892, 893, 894, 895, 896, 963, 981, 993, 1023, 1027, 1028, 1029, 1030, 1032, 1033, 1035, 1036], "selectpercentil": [54, 71, 241, 335, 409, 583, 586, 587, 589, 590, 594, 597, 1021, 1026, 1036], "percentag": [54, 104, 120, 189, 216, 254, 262, 265, 404, 409, 525, 532, 535, 540, 584, 585, 639, 660, 671, 694, 724, 736, 805, 806, 807, 820, 902, 904, 979, 994, 1022, 1026, 1032, 1033], "anova__percentil": [54, 335], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "112": [54, 369, 371, 1022], "638768": 54, "rdbu_r": [54, 82, 106, 332], "temporari": [54, 70, 72, 360, 459, 678, 771, 888, 981, 1023, 1024, 1027, 1033, 1034], "worri": [54, 975, 1005], "rmtree": [54, 72, 401], "ignore_error": 54, "497": [54, 68, 266, 275, 338, 342, 343], "plot_feature_agglomeration_vs_univariate_select": [54, 68], "perspect": [55, 60, 198, 360, 369, 385, 388, 521, 634, 890, 971], "certain": [55, 168, 203, 215, 234, 259, 279, 305, 356, 369, 370, 372, 378, 387, 389, 400, 405, 409, 629, 640, 644, 649, 654, 675, 855, 890, 967, 970, 974, 975, 978, 979, 982, 988, 993, 998, 1004, 1008, 1025, 1029, 1032, 1035], "conveni": [55, 202, 366, 382, 385, 401, 404, 408, 410, 415, 434, 438, 440, 442, 444, 455, 480, 602, 667, 669, 718, 775, 849, 850, 952, 968, 970, 974, 975, 985, 1002, 1013, 1020], "ground_truth": [55, 286], "proba_map": 55, "class_index": 55, "ci": [55, 361, 377, 378, 382, 980, 1026, 1028], "preambl": 55, "parameters_str": 55, "greatest": [55, 390, 400, 857, 1028], "remark": [55, 86, 147, 362, 374, 988], "unlik": [55, 56, 116, 168, 169, 219, 221, 249, 301, 330, 374, 376, 380, 385, 387, 391, 402, 404, 405, 408, 437, 441, 526, 641, 642, 645, 646, 647, 673, 674, 775, 808, 830, 831, 870, 881, 893, 974, 977, 978, 985, 993, 1020, 1026], "bi": [55, 408], "isotrop": [55, 57, 61, 100, 152, 154, 219, 221, 400, 402, 410, 503, 510, 523, 606, 610, 611, 613, 614], "worth": [55, 119, 169, 198, 374, 382, 1002], "rememb": [55, 376, 379, 390, 408, 981, 985, 994], "hardli": [55, 598, 599], "proper": [55, 187, 216, 362, 380, 398, 407, 440, 532, 544, 667, 927, 953, 973, 974, 975, 978, 993, 1020, 1030, 1031, 1032, 1033, 1034, 1035], "must": [55, 168, 169, 171, 179, 182, 215, 216, 227, 238, 254, 285, 302, 307, 345, 356, 369, 373, 374, 375, 376, 378, 380, 382, 387, 388, 391, 396, 398, 400, 401, 404, 405, 407, 408, 409, 410, 411, 421, 429, 432, 435, 436, 437, 438, 440, 441, 442, 446, 448, 450, 452, 453, 455, 457, 458, 460, 465, 478, 499, 500, 503, 514, 522, 528, 529, 530, 531, 532, 534, 535, 538, 544, 545, 550, 551, 552, 553, 558, 559, 572, 573, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 602, 608, 611, 618, 619, 620, 621, 623, 624, 629, 633, 634, 639, 640, 643, 649, 650, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 694, 697, 700, 725, 736, 754, 761, 764, 768, 771, 778, 780, 781, 782, 784, 785, 786, 787, 788, 790, 791, 792, 794, 796, 797, 799, 801, 802, 803, 805, 806, 808, 811, 814, 816, 817, 825, 826, 827, 828, 829, 832, 833, 834, 836, 838, 839, 840, 841, 842, 845, 846, 847, 848, 850, 853, 854, 855, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 890, 891, 892, 893, 894, 895, 896, 897, 903, 946, 953, 962, 964, 967, 968, 974, 975, 976, 978, 981, 982, 984, 985, 992, 993, 994, 1004, 1013, 1020, 1023, 1027, 1031, 1033, 1034], "maintain": [55, 203, 216, 219, 234, 259, 361, 363, 373, 377, 380, 381, 382, 385, 387, 390, 400, 407, 431, 433, 859, 860, 866, 867, 870, 875, 878, 879, 881, 974, 975, 988, 998, 999, 1004, 1015, 1035], "mitig": [55, 170, 308, 361, 362, 975, 994, 1011, 1012, 1032], "great": [55, 167, 168, 196, 356, 374, 385, 405, 754, 999, 1002, 1020, 1027], "appropri": [55, 57, 103, 155, 168, 202, 268, 340, 350, 356, 372, 374, 376, 382, 387, 399, 400, 404, 406, 407, 411, 435, 441, 448, 480, 481, 482, 487, 491, 492, 493, 495, 496, 501, 568, 573, 582, 583, 586, 587, 589, 590, 591, 663, 665, 678, 700, 832, 833, 834, 836, 838, 840, 841, 842, 962, 974, 977, 978, 988, 1024, 1027, 1033, 1036], "immedi": [55, 374, 385, 787, 801, 811, 812, 1028], "hdb": [55, 437], "probabilities_": [55, 437], "capabl": [55, 56, 86, 155, 202, 223, 376, 387, 390, 979, 982, 993, 994, 1002, 1020, 1029], "constraint": [55, 57, 67, 95, 108, 134, 165, 193, 202, 254, 296, 297, 298, 312, 374, 385, 405, 408, 478, 499, 500, 548, 549, 552, 553, 555, 556, 623, 626, 805, 806, 898, 899, 900, 901, 947, 967, 969, 974, 975, 992, 1024, 1027, 1028, 1031, 1033, 1035, 1037], "reachabl": [55, 65, 437, 441, 446, 447, 448, 836, 932], "extend": [55, 56, 67, 199, 248, 266, 332, 371, 372, 385, 387, 398, 399, 400, 405, 407, 622, 711, 819, 822, 823, 855, 857, 874, 905, 970, 978, 979, 993, 999, 1000, 1015, 1025, 1026, 1027, 1028, 1030, 1035], "fragment": [55, 98], "sparser": [55, 177, 189, 405, 462, 469, 530, 534, 974, 981, 992], "Not": [55, 136, 169, 360, 385, 400, 418, 419, 422, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 460, 461, 462, 463, 464, 465, 466, 467, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 554, 557, 560, 561, 572, 573, 574, 579, 580, 582, 618, 619, 620, 621, 668, 679, 680, 681, 682, 684, 758, 782, 785, 786, 787, 790, 791, 801, 827, 830, 831, 834, 835, 836, 838, 842, 854, 862, 865, 866, 868, 882, 883, 894, 978, 984, 998, 1029], "mention": [55, 86, 110, 216, 312, 356, 360, 374, 378, 379, 385, 387, 400, 687, 882, 883, 967, 972, 974, 999, 1002, 1013, 1027, 1028, 1029], "until": [55, 121, 147, 206, 271, 313, 315, 379, 387, 388, 397, 400, 404, 409, 410, 499, 500, 548, 549, 550, 551, 555, 556, 557, 584, 637, 638, 643, 644, 649, 650, 651, 652, 653, 654, 657, 659, 662, 667, 668, 669, 685, 785, 786, 790, 791, 847, 848, 887, 890, 898, 899, 900, 901, 953, 967, 974, 975, 983, 991, 994, 1013, 1023, 1027, 1028, 1034], "tradeoff": [55, 113, 165, 232, 252, 266, 267, 275, 345, 360, 374, 382, 406, 506, 555, 689, 693, 717, 779, 816, 851, 870, 890, 975, 1011, 1029, 1032], "comfort": [55, 407], "epsilon": [55, 65, 180, 222, 233, 317, 339, 405, 437, 446, 634, 640, 658, 667, 669, 736, 847, 848, 891, 893, 896, 971, 974, 978, 982, 992, 993, 1011, 1020], "incap": 55, "suffici": [55, 121, 130, 206, 273, 332, 360, 387, 400, 409, 523, 537, 648, 673, 674, 806, 807, 979, 981, 999, 1029, 1035, 1036], "intervent": 55, "inaccess": 55, "ultim": [55, 223, 375], "world": [55, 70, 74, 168, 202, 223, 237, 345, 360, 363, 367, 371, 400, 405, 408, 968, 978, 980, 997, 999, 1002, 1007, 1015, 1020], "whose": [55, 79, 80, 81, 147, 155, 198, 330, 369, 382, 383, 387, 398, 400, 402, 407, 409, 410, 413, 428, 429, 430, 439, 452, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 506, 525, 529, 531, 532, 535, 538, 540, 563, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 631, 662, 686, 709, 787, 794, 801, 815, 836, 855, 882, 883, 926, 957, 958, 972, 979, 983, 984, 985, 993, 1023, 1028, 1029, 1031, 1034], "respect": [55, 67, 100, 110, 114, 116, 119, 127, 158, 174, 177, 182, 187, 200, 212, 215, 219, 221, 228, 231, 233, 249, 268, 285, 286, 298, 306, 315, 329, 360, 361, 369, 370, 374, 398, 400, 403, 405, 407, 408, 410, 437, 455, 458, 461, 462, 463, 464, 465, 466, 467, 525, 531, 532, 538, 544, 552, 553, 588, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 627, 634, 662, 681, 685, 703, 718, 772, 775, 785, 786, 826, 836, 847, 848, 902, 904, 967, 971, 972, 974, 975, 978, 981, 982, 983, 984, 988, 993, 998, 1002, 1023, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "neighborhood": [55, 82, 165, 219, 280, 293, 371, 387, 400, 405, 411, 435, 437, 441, 448, 493, 495, 506, 532, 540, 619, 622, 687, 816, 832, 833, 836, 838, 839, 840, 841, 842, 844, 850, 851, 870, 975, 984, 1000, 1015, 1029], "recomput": [55, 56, 238, 240, 281, 311, 460, 465, 974, 990, 1025, 1036], "span": [55, 78, 123, 232, 256, 369, 400, 408, 540, 627, 787, 790, 978, 1012], "cut_dist": [55, 437], "708": [55, 68, 103, 107, 529, 531, 538, 740], "plot_hdbscan": [55, 68], "intract": [56, 405, 975, 983], "inferenti": 56, "meta": [56, 70, 108, 133, 134, 165, 198, 234, 268, 317, 356, 368, 372, 376, 378, 385, 387, 391, 396, 398, 399, 409, 410, 428, 434, 435, 438, 440, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 566, 572, 573, 579, 581, 582, 585, 588, 594, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 787, 788, 789, 790, 791, 794, 796, 801, 805, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 938, 967, 979, 999, 1000, 1015, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1034, 1035], "chirag": 56, "nagpal": 56, "christo": [56, 1029, 1030, 1032, 1034], "arida": [56, 1029, 1030, 1032, 1034], "baseestim": [56, 234, 279, 374, 386, 387, 410, 424, 623, 624, 919, 1020, 1027, 1030, 1032, 1034, 1035], "clone": [56, 123, 158, 169, 234, 298, 356, 372, 374, 377, 378, 380, 382, 387, 398, 401, 410, 428, 456, 560, 561, 588, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 793, 809, 814, 817, 821, 824, 850, 851, 887, 999, 1020, 1026, 1028, 1032, 1036], "metaestim": [56, 376, 387, 887, 1024, 1033, 1034], "available_if": [56, 387, 1033, 1034], "check_is_fit": [56, 234, 376, 383, 387, 1030, 1033, 1034], "5000": [56, 184, 213, 214, 216, 313, 871], "_classifier_ha": 56, "deleg": [56, 380, 425, 903, 1024, 1026, 1032], "unfit": [56, 401, 425, 455, 560, 561, 593, 602, 1028, 1030], "classifier_": [56, 234], "inductivecluster": 56, "clusterer_": 56, "plot_scatt": 56, "cluster_label": [56, 60], "x_new": [56, 401, 405, 409, 424, 433, 434, 436, 438, 440, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 540, 558, 560, 561, 573, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 619, 621, 626, 629, 630, 631, 632, 633, 679, 680, 681, 682, 683, 839, 846, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 882, 883, 990, 1004], "y_new": 56, "declar": [56, 220, 234, 356, 374, 375, 376, 380, 387, 434, 437, 438, 450, 462, 463, 469, 681, 685, 1027, 1031], "membership": [56, 388, 397, 399, 400, 502, 503, 504, 505, 506, 510, 513, 993], "inductive_learn": 56, "probable_clust": 56, "response_method": [56, 112, 126, 131, 181, 190, 207, 262, 282, 287, 290, 306, 328, 329, 351, 622, 623, 624, 689, 691, 693], "388": [56, 68], "plot_inductive_clust": [56, 68], "meant": [57, 147, 369, 376, 383, 465, 484, 668, 836, 944, 945, 968, 982, 984, 988, 1021], "unintuit": 57, "possibli": [57, 86, 147, 198, 213, 346, 371, 373, 382, 394, 400, 407, 408, 442, 444, 580, 825, 826, 827, 828, 829, 895, 896, 898, 899, 900, 901, 967, 970, 975, 981, 988, 1035], "undesir": [57, 151, 410], "phil": [57, 1025, 1036], "roth": [57, 1025, 1028, 1035], "mr": [57, 316, 1021, 1024, 1034], "spheric": [57, 85, 126, 221, 246, 248, 249, 292, 370, 754, 785, 786, 974, 977, 981, 998], "anisotrop": [57, 152, 410, 608, 610, 613], "ellipt": [57, 974], "60834549": 57, "63667341": 57, "40887718": 57, "85253229": 57, "x_vari": 57, "y_vari": 57, "unequ": [57, 1028], "x_filter": 57, "unevenli": [57, 198, 254], "y_filter": 57, "set_i": 57, "scenario": [57, 70, 150, 174, 202, 262, 356, 381, 390, 404, 407, 528, 534, 536, 537, 972, 978, 988, 1030], "criteria": [57, 116, 165, 176, 187, 206, 217, 249, 259, 382, 400, 409, 457, 473, 474, 475, 492, 548, 549, 550, 551, 555, 556, 637, 643, 647, 649, 650, 662, 683, 851, 870, 890, 891, 898, 899, 900, 901, 968, 977, 982, 992, 1012, 1023, 1028, 1031], "knowledg": [57, 118, 168, 215, 237, 259, 363, 369, 374, 377, 380, 386, 387, 400, 404, 407, 411, 435, 502, 546, 547, 554, 711, 726, 730, 773, 819, 978, 979, 990, 1013], "consequ": [57, 103, 216, 259, 260, 301, 329, 356, 405, 407, 552, 553, 557, 646, 647, 968, 974, 978, 994, 1029, 1031, 1036], "likelihood": [57, 77, 79, 80, 81, 83, 103, 150, 151, 152, 154, 155, 156, 157, 159, 165, 186, 216, 248, 252, 259, 265, 275, 298, 301, 376, 387, 398, 402, 405, 407, 410, 428, 460, 461, 462, 463, 464, 465, 466, 467, 468, 506, 523, 527, 532, 540, 541, 542, 601, 602, 622, 636, 649, 703, 731, 785, 786, 787, 813, 816, 835, 846, 866, 878, 892, 893, 895, 896, 974, 977, 980, 988, 993, 1023, 1024, 1029, 1035], "inertia": [57, 58, 61, 346, 400, 434, 438, 440, 443, 450, 451, 453, 454, 1031], "common_param": [57, 123, 169, 233, 261, 262], "unexpect": [57, 234, 356, 374, 379, 382, 394, 526, 687, 978, 993, 1022, 1028, 1029, 1032, 1034, 1036], "suffic": [57, 58, 376, 1013], "propos": [57, 78, 79, 279, 369, 374, 376, 385, 387, 400, 402, 407, 412, 413, 441, 466, 526, 598, 599, 667, 668, 669, 847, 848, 974, 977, 981, 992, 996, 1027], "inflat": [57, 167, 168, 170, 400, 404, 978, 988], "allevi": [57, 177, 182, 400, 980], "fastest": [57, 257, 347, 438, 661, 663, 665, 678, 926, 927, 977], "restart": [57, 377, 382, 438, 522, 528, 529, 534, 536, 537, 601, 602, 975, 1033], "116": [57, 68, 1020], "plot_kmeans_assumpt": [57, 68], "judg": [58, 204, 400, 1008], "definit": [58, 81, 186, 198, 266, 279, 346, 374, 375, 376, 387, 389, 400, 402, 403, 405, 518, 520, 526, 602, 619, 683, 699, 709, 718, 748, 785, 786, 967, 970, 972, 974, 976, 978, 981, 992, 997, 1015, 1024, 1028, 1035], "shorthand": [58, 387, 401, 458, 552, 553, 851, 852, 1023], "homo": 58, "compl": 58, "mea": 58, "context": [58, 237, 241, 279, 360, 361, 368, 373, 375, 386, 387, 400, 401, 406, 407, 408, 410, 411, 428, 435, 437, 439, 441, 443, 448, 449, 452, 455, 458, 459, 463, 522, 526, 527, 528, 530, 533, 534, 535, 536, 537, 539, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 585, 593, 601, 617, 618, 621, 623, 625, 630, 638, 642, 644, 646, 648, 649, 650, 652, 654, 656, 657, 659, 667, 670, 679, 680, 681, 682, 683, 684, 685, 764, 768, 771, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 832, 833, 836, 838, 840, 841, 843, 844, 849, 852, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 968, 974, 978, 984, 988, 992, 999, 1002, 1011, 1020, 1027, 1028, 1033, 1036], "n_digit": 58, "1797": [58, 89, 257, 298, 320, 371, 436, 493, 523, 524, 525, 526, 590, 591, 679, 680, 681, 682, 981, 1010], "bench_k_mean": 58, "tabl": [58, 216, 259, 374, 375, 378, 383, 400, 408, 573, 649, 671, 787, 801, 827, 943, 974, 978, 979, 984, 998, 1021], "fit_tim": [58, 120, 187, 206, 261, 404, 813, 814], "inertia_": [58, 61, 64, 434, 438, 440, 1031], "clustering_metr": 58, "sample_s": [58, 232, 346, 781], "formatter_result": 58, "determinist": [58, 123, 361, 370, 376, 387, 400, 434, 438, 440, 442, 443, 444, 449, 450, 453, 542, 550, 551, 555, 556, 574, 575, 682, 686, 798, 799, 846, 898, 899, 970, 974, 1021, 1024, 1026, 1028, 1029, 1032, 1035], "ttime": 58, "tinertia": 58, "thomo": 58, "tcompl": 58, "tv": 58, "tari": 58, "tami": 58, "tsilhouett": 58, "__________________________________________________________________________________": 58, "035": [58, 116, 134], "69545": 58, "598": [58, 103, 151, 532], "645": 58, "621": [58, 759], "469": 58, "617": [58, 262, 400, 759], "152": [58, 380], "046": [58, 221, 346], "69735": 58, "681": [58, 380], "723": [58, 233], "701": 58, "574": [58, 525, 532], "698": 58, "72686": 58, "636": [58, 182, 346, 380], "658": [58, 86], "647": [58, 242, 324], "521": [58, 303, 309], "643": [58, 257], "reduced_data": 58, "mesh": [58, 119, 128, 152, 232, 287, 295, 303, 325, 328], "169": [58, 298], "mark": [58, 92, 142, 163, 263, 270, 366, 374, 376, 378, 382, 383, 387, 400, 526, 598, 599, 602, 623, 649, 843, 844, 885, 886, 903, 917, 922, 927, 974, 1002, 1015, 1020, 1021, 1026, 1028, 1029, 1036], "819": [58, 68, 408], "plot_kmeans_digit": [58, 68], "kmeans_plusplu": [59, 400, 1032], "4000": [59, 125, 247], "centers_init": 59, "4eacc5": [59, 64], "ff9c34": [59, 64], "4e9a06": [59, 64], "cluster_data": 59, "062": [59, 68], "plot_kmeans_plusplu": [59, 68], "wrong": [60, 198, 285, 345, 356, 371, 374, 376, 408, 495, 716, 746, 781, 978, 984, 993, 1023, 1025, 1027, 1028, 1029, 1030, 1033], "wide": [60, 61, 113, 231, 302, 385, 400, 405, 408, 967, 974, 998, 1002, 1013, 1020, 1022, 1036], "ambival": 60, "thick": [60, 289, 981], "ow": 60, "7049787496083262": 60, "5882004012129721": 60, "6505186632729437": 60, "561464362648773": 60, "4857596147013469": 60, "silhouette_sampl": [60, 781, 1024, 1026, 1028, 1036], "distinct": [60, 259, 322, 345, 347, 369, 376, 379, 387, 388, 404, 407, 408, 580, 788, 797, 805, 864, 865, 885, 886, 967, 974, 981, 984, 1013, 1028], "center_box": [60, 503], "range_n_clust": 60, "set_size_inch": [60, 136, 238], "lie": [60, 85, 146, 168, 232, 301, 322, 330, 332, 405, 407, 597, 838, 840, 841, 842, 972, 975, 978, 988, 993], "insert": [60, 168, 198, 385, 400, 478, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 905], "blank": [60, 379, 968, 994], "demarc": 60, "silhouette_avg": 60, "sample_silhouette_valu": 60, "y_lower": [60, 123], "aggreg": [60, 114, 216, 262, 268, 308, 315, 317, 400, 407, 525, 546, 547, 712, 713, 718, 735, 736, 738, 740, 741, 743, 775, 979, 981, 988, 1036], "ith_cluster_silhouette_valu": 60, "size_cluster_i": 60, "y_upper": [60, 123], "fill_betweenx": 60, "2nd": [60, 90, 158, 306, 400, 411, 435, 521, 988, 1035], "lw": [60, 78, 79, 81, 99, 104, 105, 192, 199, 201, 204, 208, 215, 222, 247, 254, 269, 284, 301, 322, 339], "fontweight": [60, 193], "bold": [60, 123, 187, 193, 374], "plot_kmeans_silhouette_analysi": [60, 68], "reach": [61, 116, 147, 198, 200, 214, 216, 261, 315, 332, 354, 379, 388, 390, 400, 405, 409, 441, 448, 499, 500, 584, 585, 618, 635, 636, 637, 638, 643, 644, 645, 646, 647, 651, 652, 653, 654, 657, 658, 659, 667, 668, 669, 670, 672, 673, 674, 675, 719, 720, 773, 785, 786, 847, 848, 887, 967, 978, 982, 992, 994, 1002, 1031, 1035, 1036], "optimum": [61, 156, 168, 174, 272, 405, 463, 974, 977], "stuck": [61, 683, 975], "check_random_st": [61, 214, 221, 230, 236, 376, 383, 387], "trade": [61, 78, 116, 170, 202, 258, 260, 261, 332, 345, 399, 400, 402, 544, 545, 550, 551, 625, 647, 683, 787, 790, 791, 801, 813, 975, 982, 990, 992, 993, 999], "n_init_rang": 61, "n_samples_per_cent": 61, "make_data": 61, "n_clusters_tru": 61, "init_s": [61, 346, 440], "factori": [61, 259, 408, 732, 948, 978], "empti": [61, 70, 105, 210, 323, 360, 369, 376, 378, 400, 412, 474, 524, 552, 553, 622, 798, 855, 897, 905, 910, 911, 917, 937, 968, 993, 1011, 1022, 1024, 1028, 1029, 1031, 1032, 1034, 1035, 1036], "run_id": 61, "km": [61, 315, 346], "my_memb": [61, 63, 64], "210": [61, 68, 75, 76], "plot_kmeans_stability_low_dim_dens": [61, 68], "fast": [62, 174, 182, 187, 213, 214, 232, 233, 302, 347, 360, 369, 374, 383, 400, 402, 404, 405, 407, 408, 410, 412, 437, 438, 460, 465, 499, 523, 524, 526, 529, 531, 535, 538, 555, 556, 557, 579, 580, 582, 623, 624, 631, 649, 650, 663, 665, 678, 787, 801, 811, 812, 822, 823, 830, 831, 835, 846, 927, 947, 970, 974, 977, 980, 981, 983, 984, 994, 998, 1002, 1013, 1020, 1021, 1026, 1027, 1030, 1031], "globular": [62, 400], "cleanli": [62, 1020], "990": [62, 68, 660, 978], "plot_linkage_comparison": [62, 68], "dorin": [63, 439], "comaniciu": [63, 400, 439], "meer": [63, 400, 439], "ieee": [63, 79, 81, 371, 400, 402, 409, 413, 439, 466, 525, 554, 655, 676, 677, 715, 759, 974, 978, 984], "transact": [63, 371, 400, 402, 411, 413, 435, 439, 466, 525, 529, 531, 538, 554, 635, 655, 676, 677, 715, 716, 746, 759, 974, 978], "intellig": [63, 345, 371, 400, 407, 439, 546, 547, 629, 687, 715, 820, 847, 848, 979, 990, 999, 1002], "2002": [63, 398, 400, 407, 428, 439, 584, 585, 716, 746, 837, 885, 970, 978], "603": [63, 260, 439], "619": [63, 346, 439], "labels_uniqu": 63, "448": [63, 68, 279], "plot_mean_shift": [63, 68, 452], "3000": [64, 222, 882, 883], "k_mean": [64, 383, 387, 1012, 1028, 1036], "t_batch": 64, "pairwis": [64, 167, 168, 231, 268, 311, 315, 316, 345, 360, 366, 376, 387, 400, 405, 410, 437, 449, 452, 453, 459, 478, 499, 500, 526, 552, 553, 611, 629, 630, 631, 632, 633, 634, 679, 681, 683, 685, 687, 768, 771, 778, 780, 781, 818, 834, 838, 842, 856, 888, 970, 978, 981, 990, 993, 1015, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036], "k_means_cluster_cent": 64, "mbk_means_cluster_cent": 64, "k_means_label": 64, "mbk_means_label": 64, "ninertia": 64, "bbbbbb": 64, "188": [64, 68, 155, 233, 371, 380, 575], "plot_mini_batch_kmean": [64, 68], "shane": [65, 1029, 1032, 1035], "grigsbi": 65, "refug": 65, "rocktalu": 65, "cluster_optics_dbscan": [65, 400], "n_points_per_clust": 65, "c1": [65, 120, 158, 230, 307], "c2": [65, 120, 158, 230, 307], "c3": [65, 120, 307], "c4": [65, 307, 1000, 1015], "c5": [65, 1000, 1015], "c6": 65, "clust": [65, 441, 448], "labels_050": 65, "reachability_": [65, 400, 441, 446, 447, 448], "core_dist": [65, 446], "core_distances_": [65, 441, 446, 448], "ordering_": [65, 400, 441, 446, 447, 448], "labels_200": 65, "ax3": [65, 323], "ax4": 65, "klass": 65, "xk": [65, 541], "rk": 65, "full_lik": 65, "noptic": 65, "ndbscan": 65, "458": [65, 68], "plot_opt": [65, 68], "tri": [66, 104, 219, 288, 361, 376, 379, 385, 388, 398, 440, 442, 444, 622, 623, 624, 661, 683, 689, 691, 693, 801, 946, 983, 1001, 1004, 1022, 1028, 1032], "intens": [66, 98, 279, 371, 375, 405, 434, 438, 450, 598, 599, 623, 624, 789, 967, 985, 1002, 1028], "weakli": 66, "outlin": [66, 119, 374, 376, 387, 388, 389, 400, 967, 1015], "center1": 66, "center2": 66, "center3": 66, "67": [66, 168, 216, 298, 371, 507, 508, 509, 618, 658, 704, 801, 968, 978, 992, 1016, 1020], "58": [66, 79, 298, 371, 402, 413, 466, 754, 988, 1009], "center4": 66, "radius1": 66, "radius2": 66, "radius3": 66, "radius4": 66, "circle1": 66, "circle2": 66, "circle3": 66, "circle4": 66, "label_im": 66, "cleaner": 66, "527": [66, 68], "plot_segmentation_toi": [66, 68], "swiss": [67, 165, 218, 225, 400, 521, 683, 684, 1034], "roll": [67, 165, 218, 225, 377, 400, 521, 683, 684, 921, 1002, 1030, 1035], "sole": [67, 385, 400], "oppos": [67, 234, 378, 396, 400, 886, 981, 993, 1004, 1020], "make_swiss_rol": [67, 223, 1034], "thinner": 67, "fig1": 67, "set_posit": [67, 101, 102, 209, 301], "jet": 67, "fig2": 67, "121": [67, 112, 163, 232, 660, 988], "337": [67, 68, 380], "plot_ward_structured_vs_unstructur": [67, 68], "986": 68, "auto_examples_clust": 68, "chain": [69, 76, 110, 165, 276, 278, 279, 356, 363, 366, 385, 387, 399, 410, 487, 493, 532, 602, 618, 649, 728, 787, 816, 819, 821, 822, 823, 824, 850, 851, 870, 967, 968, 979, 983, 995, 998, 1002, 1013, 1015], "raster": 70, "caption": 70, "serv": [70, 99, 110, 156, 262, 401, 537, 542, 629, 970, 1034], "matt": [70, 1023, 1024, 1025, 1030, 1031, 1035, 1036], "terri": [70, 1024], "truncatedsvd": [70, 128, 220, 346, 405, 525, 526, 530, 531, 532, 683, 849, 852, 975, 1022, 1027, 1031, 1032, 1034], "dictvector": [70, 165, 344, 346, 348, 369, 408, 479, 573, 579, 580, 581, 582, 863, 1020, 1021, 1024, 1030, 1032, 1033, 1036], "compris": [70, 123, 257, 345, 346, 347, 369, 385, 405, 407, 506, 794, 975], "subject": [70, 127, 250, 262, 345, 369, 374, 376, 378, 385, 387, 388, 398, 399, 402, 404, 405, 486, 649, 650, 676, 853, 890, 891, 946, 948, 969, 974, 993, 997, 1013, 1029, 1030, 1033, 1035], "mccall": 70, "mksol": 70, "dseg": 70, "ti": [70, 198, 246, 249, 257, 341, 360, 398, 400, 590, 591, 626, 711, 716, 746, 785, 786, 892, 895, 898, 977, 978, 993, 1021, 1023, 1024, 1028, 1030, 1034, 1035], "fred": [70, 1020, 1033], "575": [70, 123, 134, 198, 346], "3539": 70, "1993apr6": 70, "131900": 70, "8407": 70, "perhap": [70, 119, 371, 373, 382, 387, 406, 999], "militari": 70, "slug": 70, "school": [70, 371, 400, 778, 978], "physic": [70, 116, 361, 496, 943, 974, 1036], "teacher": 70, "ex": [70, 372, 375, 390, 1024, 1025], "fighter": 70, "jock": 70, "wasn": [70, 234, 1029], "poundal": 70, "flink": 70, "funni": 70, "propon": 70, "si": 70, "insist": 70, "safeti": [70, 385, 401, 944, 999, 1030], "ball": [70, 284, 292, 400, 406, 439, 683, 830, 831, 835, 838, 840, 841, 842, 1020, 1022, 1025, 1031], "mari": [70, 1028, 1029, 1030, 1031, 1034], "shafer": 70, "nasa": [70, 345, 346, 371], "am": [70, 75, 80, 130, 169, 345, 379, 402, 465, 484, 1027], "dryden": 70, "stateless": [70, 346, 362, 376, 387, 408, 573, 574, 580, 629, 853, 854, 862, 988, 1036], "subject_body_extractor": 70, "startswith": [70, 220, 292], "subject_body_transform": 70, "sentenc": [70, 345, 347, 369, 388, 408], "text_stat": 70, "num_sent": 70, "text_stats_transform": 70, "subjectbodyextractor": 70, "subjectbodi": 70, "union": [70, 168, 401, 428, 434, 435, 438, 440, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 487, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 581, 582, 585, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 728, 744, 787, 788, 789, 790, 791, 794, 796, 801, 805, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 849, 850, 853, 855, 856, 857, 862, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 1027], "body_bow": 70, "pull": [70, 314, 361, 372, 377, 387, 388, 1030], "body_stat": 70, "transformer_weight": [70, 455, 458, 849, 1025, 1032], "394": [70, 159], "654": [70, 76], "plot_column_transform": [70, 76], "imput": [71, 130, 164, 170, 229, 239, 241, 312, 315, 363, 366, 378, 386, 387, 401, 407, 481, 492, 556, 571, 630, 636, 663, 812, 833, 851, 909, 911, 998, 999, 1015, 1022, 1023], "miss": [71, 130, 164, 170, 229, 239, 259, 279, 312, 316, 356, 360, 363, 366, 369, 371, 373, 374, 376, 378, 379, 387, 396, 399, 400, 401, 402, 437, 463, 481, 487, 489, 492, 548, 549, 552, 553, 555, 556, 557, 618, 619, 620, 621, 630, 636, 663, 681, 685, 717, 759, 812, 833, 851, 859, 860, 864, 866, 867, 870, 871, 875, 878, 879, 881, 898, 899, 900, 901, 974, 975, 978, 998, 999, 1000, 1002, 1015, 1022, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "chi": [71, 80, 110, 305, 366, 409, 510, 583, 586, 587, 589, 590, 591, 595, 596, 597, 600, 629, 630, 631, 632, 633, 748, 749, 1015, 1020, 1025, 1026], "dispatch": [71, 363, 396, 459, 787, 801, 811, 812, 813, 888, 944, 945, 1008, 1015, 1035], "processor": [71, 130, 168, 363, 411, 428, 435, 437, 439, 441, 443, 448, 449, 452, 455, 458, 463, 522, 526, 527, 528, 530, 533, 534, 536, 537, 539, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 585, 593, 601, 623, 625, 630, 638, 642, 644, 646, 648, 649, 650, 652, 654, 656, 657, 659, 667, 670, 679, 680, 681, 682, 683, 684, 685, 764, 768, 771, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 832, 833, 836, 838, 840, 841, 843, 844, 849, 852, 885, 886], "pedro": [71, 1021, 1023, 1024, 1028], "chi2": [71, 408, 409, 443, 572, 583, 586, 587, 589, 590, 591, 596, 597, 600, 611, 629, 630, 631, 632, 633, 634, 749, 755, 764, 1020, 1027, 1034], "simpleimput": [71, 130, 162, 163, 170, 229, 239, 241, 312, 315, 356, 387, 618, 619, 620, 968, 988, 1028, 1029, 1031, 1032, 1034, 1035, 1036], "40945": 71, "titan": [71, 170, 241, 311, 315, 316], "surviv": [71, 170, 967, 998], "ag": [71, 147, 168, 170, 186, 187, 198, 216, 238, 239, 241, 301, 314, 315, 316, 369, 371, 1002, 1004, 1011], "fare": [71, 170, 241, 315, 316, 1024, 1025], "embark": [71, 170, 241, 311, 315, 316], "sex": [71, 147, 168, 170, 186, 187, 241, 316, 371, 986, 1011], "femal": [71, 168, 316, 379, 863, 864, 988], "male": [71, 168, 316, 379, 863, 864, 988], "pclass": [71, 170, 241, 311, 315, 316], "numeric_featur": [71, 315], "numeric_transform": [71, 315], "categorical_transform": 71, "selector": [71, 143, 144, 382, 408, 457, 572, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 1022, 1030, 1032, 1036], "preprocessor": [71, 130, 168, 198, 229, 239, 307, 312, 314, 315, 316, 401, 408, 579, 580, 582, 998, 1013, 1020, 1023, 1028, 1030], "798": [71, 107, 324, 326, 407], "lt": [71, 72, 115, 130, 168, 249, 257, 271, 372, 374], "0x7f6be881e040": 71, "pipelinepipelin": [71, 72, 115, 130, 144, 168, 170, 228, 229, 238, 239, 241, 260, 266, 307, 312, 315], "columntransformercolumntransform": [71, 130, 168, 169, 170, 229, 239, 307, 312, 315], "simpleimputersimpleimput": [71, 130, 170, 229, 239, 312, 315], "standardscalerstandardscal": [71, 130, 168, 228, 229, 238, 239, 241, 266, 312, 315], "onehotencoderonehotencod": [71, 115, 130, 168, 169, 229, 239, 312, 315], "selectpercentileselectpercentil": [71, 241], "logisticregressionlogisticregress": [71, 115, 228, 229, 239, 241, 298, 312, 315], "make_column_selector": [71, 120, 130, 401, 455, 458, 1030], "subset_featur": 71, "Then": [71, 109, 111, 115, 118, 130, 133, 144, 168, 174, 182, 186, 198, 202, 223, 228, 234, 240, 261, 262, 345, 368, 378, 380, 382, 390, 397, 398, 400, 403, 405, 408, 409, 561, 584, 710, 746, 787, 801, 850, 968, 977, 978, 984, 993, 1013, 1029], "1047": 71, "1118": 71, "684": [71, 80], "1045": 71, "841": 71, "1046": [71, 249], "kb": [71, 168, 169], "numerical_transform": 71, "yourself": [71, 373, 374, 375, 379, 382, 982], "dtype_exclud": [71, 457], "dtype_includ": [71, 120, 130, 401, 457], "_column_transform": [71, 130], "0x7f6ba344e9d0": 71, "0x7f6ba344e490": 71, "exactli": [71, 110, 167, 177, 182, 191, 198, 202, 250, 267, 302, 345, 374, 376, 397, 400, 404, 405, 408, 413, 437, 444, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 506, 517, 581, 582, 606, 667, 669, 694, 696, 753, 788, 805, 811, 970, 974, 975, 976, 978, 979, 994, 1012, 1013, 1020, 1026, 1027, 1033], "hyperparamet": [71, 109, 150, 151, 157, 158, 162, 165, 169, 177, 182, 187, 212, 216, 227, 252, 257, 262, 264, 275, 281, 298, 345, 376, 387, 400, 404, 405, 407, 410, 493, 526, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 634, 644, 650, 656, 664, 667, 718, 775, 787, 801, 967, 972, 973, 974, 977, 978, 980, 982, 984, 992, 999, 1013, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1036], "cartesian": [71, 397, 624, 981, 1035], "preprocessor__num__imputer__strategi": 71, "preprocessor__cat__selector__percentil": 71, "classifier__c": 71, "search_cv": 71, "param_distribut": [71, 150, 260, 267, 271, 313, 386, 791, 799, 801], "randomizedsearchcvrandomizedsearchcv": 71, "trigger": [71, 72, 378, 401, 847, 848, 850, 851, 910, 911, 927, 974, 1013, 1028, 1034, 1035], "best_params_": [71, 73, 123, 150, 233, 249, 257, 263, 313, 332, 386, 787, 790, 791, 801, 967, 1009, 1013], "best_score_": [71, 73, 233, 260, 263, 264, 332, 664, 666, 787, 790, 791, 801, 1008, 1009, 1013, 1031], "cv_results_": [71, 72, 73, 82, 116, 136, 146, 249, 257, 258, 259, 260, 263, 267, 270, 271, 281, 332, 463, 585, 787, 790, 791, 801, 1013, 1026, 1030, 1032, 1033], "sort_valu": [71, 170, 241, 249, 259, 270, 307, 308], "mean_test_scor": [71, 72, 73, 82, 116, 136, 146, 249, 258, 259, 260, 267, 270, 271, 281, 332, 463, 585, 787, 801, 967, 1026, 1033], "std_test_scor": [71, 73, 116, 136, 146, 258, 259, 260, 267, 281, 463, 585, 787, 801, 1026, 1033], "param_preprocessor__num__imputer__strategi": 71, "param_preprocessor__cat__selector__percentil": 71, "param_classifier__c": 71, "786015": 71, "031020": 71, "785063": 71, "030498": 71, "783149": 71, "030462": 71, "195": [71, 76, 302, 309, 324, 484, 485], "plot_column_transformer_mixed_typ": [71, 76], "instanti": [72, 153, 314, 377, 391, 407, 441, 558, 559, 593, 621, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 917, 984, 1010, 1020, 1028, 1032, 1036], "memoiz": [72, 369, 387], "costli": [72, 78, 117, 162, 260, 341, 361, 375, 380, 400, 434, 618, 795, 797, 882, 883, 927, 978, 981, 990, 999], "mcgibbon": [72, 1022, 1023, 1026], "selectkbest": [72, 74, 143, 144, 315, 356, 374, 391, 401, 409, 572, 583, 586, 587, 589, 591, 597, 967, 1021, 1026, 1036], "mutual_info_classif": [72, 409, 583, 586, 587, 590, 591, 1026, 1032, 1035], "pipe": [72, 73, 120, 239, 258, 307, 313, 314, 386, 391, 401, 408, 581, 850, 875, 876, 878, 879, 880, 881, 967, 988, 1009], "reduce_dim": [72, 239, 258, 401], "popul": [72, 78, 80, 168, 198, 262, 301, 369, 383, 387, 402, 431, 703, 709, 832, 833, 834, 836, 838, 840, 841, 842, 947, 978, 984, 988, 994], "n_features_opt": 72, "c_option": 72, "iterated_pow": [72, 523, 526, 532, 1026], "reduce_dim__n_compon": [72, 258, 401], "classify__c": 72, "reduce_dim__k": 72, "reducer_label": 72, "kbest": [72, 583], "0x7f6be8a1c4c0": 72, "gridsearchcvgridsearchcv": [72, 239, 249, 257, 259], "minmaxscalerminmaxscal": 72, "passthroughpassthroughlinearsvclinearsvc": 72, "mean_scor": [72, 268, 271, 346, 1033], "alphabet": [72, 387, 731], "eas": [72, 249, 306, 374, 377, 380, 974, 992, 998, 999, 1002, 1031, 1032, 1034], "sometim": [72, 130, 167, 259, 297, 346, 356, 361, 362, 374, 376, 378, 380, 386, 387, 390, 400, 402, 405, 407, 408, 440, 525, 526, 529, 531, 532, 855, 856, 857, 905, 973, 974, 975, 978, 983, 988, 989, 993, 1004, 1012, 1017, 1021, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1036], "worthwhil": [72, 387], "slower": [72, 98, 116, 120, 162, 233, 268, 347, 407, 408, 409, 437, 442, 444, 529, 531, 538, 546, 547, 549, 554, 556, 579, 580, 582, 622, 623, 624, 634, 650, 663, 665, 678, 683, 695, 818, 822, 823, 971, 975, 976, 977, 979, 981, 994, 1013, 1024, 1031], "constructor": [72, 230, 361, 376, 387, 399, 401, 408, 455, 458, 540, 541, 546, 558, 559, 560, 561, 572, 573, 579, 580, 588, 659, 667, 668, 832, 833, 834, 836, 837, 838, 840, 841, 842, 849, 850, 851, 852, 946, 967, 979, 988, 993, 999, 1004, 1020, 1021, 1023, 1024, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035], "folder": [72, 369, 372, 374, 378, 382, 390, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 494, 981, 1013], "cached_pip": [72, 401], "delet": [72, 321, 323, 378, 379, 460, 465, 477], "exit": [72, 279, 378, 382, 459], "benefici": [72, 74, 78, 95, 128, 301, 302, 372, 975], "614": [72, 76], "plot_compare_reduct": [72, 76], "logistic__c": [73, 1009], "046415888336127774": 73, "pca__n_compon": [73, 849, 1009], "truncat": [73, 128, 220, 383, 525, 526, 530, 531, 532, 535, 667, 669, 716, 746, 785, 839, 903, 927, 967, 977, 978, 992, 1009, 1013, 1014, 1015, 1026, 1028], "x_digit": [73, 138, 296, 401, 1008, 1009, 1011], "y_digit": [73, 138, 296, 401, 1008, 1009, 1011], "__": [73, 260, 387, 401, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 790, 791, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 967, 1009, 1028, 1029], "spectrum": [73, 515, 535, 686, 927, 1002, 1009, 1028], "ax0": [73, 75, 198, 230, 346, 1009], "n_components_": [73, 103, 387, 432, 436, 525, 529, 530, 531, 532, 533, 534, 882, 883, 1009, 1029, 1031], "explained_variance_ratio_": [73, 104, 346, 405, 525, 532, 535, 540, 1009, 1023, 1026], "named_step": [73, 86, 401, 584, 585, 588, 850, 851, 890, 891, 974, 1009, 1027, 1029], "components_col": 73, "param_pca__n_compon": 73, "best_clf": 73, "nlargest": 73, "yerr": [73, 79, 81, 117, 120, 146, 281, 307, 323], "val": [73, 210, 259, 929], "691": [73, 76, 712], "plot_digits_pip": [73, 76], "candid": [74, 249, 257, 260, 267, 313, 362, 374, 378, 400, 407, 439, 441, 787, 790, 791, 799, 801, 974, 981, 994, 1026], "features__pca__n_compon": 74, "features__univ_select__k": 74, "svm__c": 74, "867": 74, "967": [74, 978, 982], "transformer_list": [74, 401, 849, 852, 968, 1031, 1032], "univ_select": 74, "amuel": [74, 114, 189, 232, 322, 340], "ai": [74, 114, 189, 232, 322, 340, 404], "bonn": [74, 114, 189, 232, 322, 340], "mayb": [74, 297, 387, 408, 993, 999], "combined_featur": 74, "x_featur": [74, 631, 632, 633, 970], "grid_search": [74, 116, 239, 249, 257, 267, 401, 1022, 1023, 1024, 1025, 1026, 1027], "390": [74, 76], "plot_feature_union": [74, 76], "overview": [75, 375, 377, 386, 387, 724, 733, 980, 992, 1014, 1015], "transformedtargetregressor": [75, 168, 198, 385, 401, 584, 585, 588, 1028, 1030, 1033], "hous": [75, 130, 162, 163, 301, 313, 367, 481, 1015], "translat": [75, 376, 410, 518, 605, 859, 860, 876, 975, 978, 996, 1002], "lowest": [75, 86, 169, 182, 249, 368, 400, 404, 626, 628, 790, 791, 794, 897, 898, 975, 978, 994, 1035], "logarithm": [75, 130, 168, 202, 231, 260, 332, 387, 409, 451, 581, 649, 650, 667, 695, 716, 731, 741, 745, 746, 747, 793, 830, 831, 925, 994, 1008, 1027], "log1p": [75, 230, 854, 978, 988], "expm1": 75, "y_tran": 75, "At": [75, 110, 203, 271, 320, 323, 360, 361, 378, 388, 390, 396, 403, 407, 428, 431, 456, 579, 580, 582, 593, 818, 820, 857, 942, 967, 974, 977, 979, 983, 992, 1002], "meda": [75, 168, 978], "median_absolute_error": [75, 168, 978, 1024, 1030, 1032], "r2_score": [75, 167, 182, 193, 194, 407, 423, 456, 473, 474, 475, 545, 547, 549, 551, 553, 556, 559, 561, 602, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 669, 670, 714, 718, 823, 824, 833, 841, 848, 891, 893, 896, 899, 901, 967, 978, 1021, 1023, 1029, 1033, 1034], "compute_scor": [75, 103, 177, 178, 635, 636, 1029], "r2": [75, 111, 116, 130, 167, 169, 193, 233, 376, 401, 407, 545, 561, 664, 813, 848, 978, 986, 1029], "ridge_cv": 75, "y_pred_ridg": 75, "ridge_cv_with_trans_target": 75, "inverse_func": [75, 168, 401, 456, 854, 988, 1028], "y_pred_ridge_with_trans_target": 75, "sell": 75, "quantile_transform": [75, 867, 878, 988, 1027, 1028, 1029], "house_pric": [75, 130], "select_dtyp": [75, 120, 316, 457], "nan": [75, 120, 162, 163, 168, 216, 239, 254, 262, 307, 311, 316, 317, 360, 366, 376, 383, 387, 407, 437, 459, 487, 546, 547, 548, 552, 553, 555, 584, 585, 588, 594, 597, 600, 618, 619, 620, 621, 626, 703, 704, 705, 712, 713, 714, 718, 719, 720, 759, 768, 773, 774, 775, 777, 787, 790, 791, 793, 801, 809, 812, 813, 814, 817, 859, 860, 864, 866, 867, 870, 871, 875, 878, 879, 881, 908, 909, 910, 911, 953, 967, 978, 988, 994, 1015, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "inf": [75, 153, 289, 383, 400, 410, 437, 441, 448, 452, 462, 463, 469, 544, 545, 550, 551, 584, 585, 588, 597, 598, 599, 610, 618, 626, 628, 639, 640, 641, 643, 660, 662, 663, 667, 671, 678, 718, 720, 736, 768, 775, 779, 846, 855, 862, 908, 910, 911, 925, 978, 988, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "lotfrontag": 75, "garageyrblt": 75, "masvnrarea": [75, 130], "to_fram": 75, "n_quantil": [75, 169, 305, 867, 879, 1029], "output_distribut": [75, 301, 305, 401, 866, 867, 878, 879, 988], "squeez": [75, 156, 157, 279, 301, 1012], "quantiletransform": [75, 169, 305, 401, 456, 866, 879, 968, 988, 1027, 1028, 1029, 1030, 1031, 1036], "weaker": 75, "residu": [75, 194, 200, 255, 423, 456, 473, 474, 475, 543, 545, 547, 549, 551, 553, 556, 559, 561, 602, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 662, 663, 664, 665, 669, 670, 676, 677, 692, 734, 775, 823, 824, 833, 841, 848, 891, 893, 896, 899, 901, 974, 978, 1011, 1032, 1033, 1035], "smile": [75, 369, 1034], "plot_transformed_target": [75, 76, 456], "755": 76, "auto_examples_compos": 76, "mahalanobi": [77, 83, 165, 400, 402, 441, 448, 460, 461, 462, 463, 464, 465, 466, 467, 768, 769, 770, 837, 972, 984, 1028, 1031, 1032], "ledoitwolf": [77, 79, 83, 103, 165, 402, 460, 461, 465, 466, 467, 468, 787, 1024], "empiricalcovari": [78, 80, 81, 402, 460, 464, 465, 466, 467, 984], "unbias": [78, 398, 402, 405, 428, 541, 647, 663, 665, 678, 974, 1008], "shrunk": [78, 103, 301, 317, 413, 464, 466, 467, 470, 471, 472, 540, 871, 972, 992, 1014, 1015], "base_x_train": 78, "base_x_test": 78, "coloring_matrix": [78, 79], "shrunkcovari": [78, 103, 402, 460, 461, 464, 465, 466], "empirical_covari": [78, 402, 1036], "log_likelihood": [78, 601, 602, 785, 786], "negative_loglik": 78, "real_cov": [78, 79, 461, 464, 465, 466, 467], "emp_cov": [78, 80, 82, 469, 472], "loglik_r": 78, "inv": [78, 82, 296], "formula": [78, 79, 397, 400, 402, 413, 464, 466, 507, 508, 509, 581, 634, 637, 638, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 655, 667, 669, 695, 719, 745, 754, 967, 972, 974, 978, 983, 984, 988, 992, 1025, 1027, 1029], "asymptot": [78, 79, 187, 360, 402, 465, 527, 720, 974, 977, 1030], "criterion": [78, 79, 171, 186, 206, 249, 271, 312, 376, 383, 387, 400, 405, 432, 436, 440, 443, 450, 453, 523, 528, 530, 537, 544, 545, 548, 549, 550, 551, 555, 556, 557, 597, 618, 635, 636, 639, 647, 657, 658, 659, 660, 662, 663, 665, 667, 668, 669, 671, 682, 686, 701, 786, 887, 892, 893, 894, 895, 896, 898, 899, 900, 901, 974, 977, 978, 986, 991, 994, 1000, 1012, 1015, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1036], "chen": [78, 79, 402, 407, 413, 466, 716, 746, 970, 978, 1023, 1026, 1027, 1028, 1030, 1033, 1034, 1035, 1036], "Its": [78, 109, 257, 261, 370, 376, 387, 405, 410, 529, 973, 974, 983, 986, 992, 998, 1002, 1023], "tuned_paramet": [78, 136, 257], "loglik_lw": 78, "loglik_oa": 78, "unseen": [78, 121, 144, 187, 202, 206, 272, 285, 362, 366, 376, 386, 387, 400, 404, 836, 867, 879, 969, 978, 984, 986, 988, 994, 1004, 1023, 1028, 1032], "loglog": [78, 231], "lik_max": 78, "amax": [78, 121], "lik_min": 78, "amin": 78, "vline": [78, 97, 185, 186, 187, 199, 259, 272, 302], "shrinkage_": [78, 79, 464, 466], "magenta": [78, 125], "purpl": [78, 92, 223], "cyan": [78, 113, 168, 282, 290], "realli": [78, 170, 187, 378, 379, 380, 978, 984, 1002, 1034], "interestingli": [78, 147, 988], "outperform": [78, 86, 130, 306, 385, 404, 407, 443, 453, 980, 988], "435": [78, 83, 111, 134, 306, 309, 346], "plot_covariance_estim": [78, 83], "inspir": [79, 127, 169, 216, 374, 385, 407, 552, 553, 915, 968, 998, 1029], "mmse": [79, 402, 413, 466], "tran": 79, "octob": [79, 369, 1020, 1027, 1033, 1034], "choleski": [79, 198, 216, 383, 462, 463, 469, 518, 602, 639, 641, 642, 645, 646, 647, 649, 650, 660, 663, 665, 671, 673, 674, 678, 785, 786, 974, 1023, 1027, 1029, 1032, 1035, 1036], "toeplitz": 79, "simul": [79, 97, 168, 192, 235, 259, 1002], "n_samples_rang": [79, 231], "lw_mse": 79, "oa_ms": 79, "lw_shrinkag": 79, "oa_shrinkag": 79, "error_norm": [79, 81, 460, 461, 462, 463, 464, 465, 466, 467], "darkorang": [79, 99, 104, 105, 199, 209, 222, 245, 246, 247, 250, 266, 268, 282, 284, 290, 291, 322, 352], "plot_lw_vs_oa": [79, 83], "x_i": [80, 114, 142, 168, 199, 314, 340, 400, 405, 406, 407, 410, 605, 606, 610, 613, 614, 616, 825, 826, 829, 969, 970, 974, 980, 981, 982, 988, 992, 993, 994], "d_": [80, 400, 405, 639, 660, 671, 768, 975, 980], "mle": [80, 103, 532, 1028, 1031], "resist": [80, 81, 374], "erron": [80, 81, 405, 974, 1021, 1028, 1032], "breakdown": [80, 81, 215, 670, 974], "n_": [80, 81, 259, 314, 400, 405, 407, 637, 643, 676, 687, 970, 974, 978, 980, 981, 985, 988, 990, 993, 994], "smallest": [80, 81, 198, 279, 350, 369, 400, 402, 409, 518, 532, 621, 645, 646, 647, 673, 674, 681, 685, 686, 787, 790, 791, 801, 806, 994, 1033], "pure": [80, 81, 86, 182, 198, 387, 400, 464, 470, 487, 548, 549, 550, 551, 555, 556, 557, 696, 706, 776, 783, 898, 899, 900, 901, 988], "rousseuw": [80, 81], "rousseeuw": [80, 81, 400, 402, 460, 465, 780, 781, 984], "ass": [80, 81, 402, 465], "1984": [80, 81, 402, 465, 898, 899, 994], "wilson": [80, 371, 1020, 1023], "hilferti": 80, "1931": 80, "proceed": [80, 369, 371, 400, 411, 430, 435, 502, 687, 699, 716, 746, 837, 887, 978, 990, 991, 992], "academi": [80, 837], "688": 80, "n_outlier": [80, 81, 126, 201, 227, 286], "gen_cov": 80, "ey": [80, 81, 246, 250, 332, 369, 525, 532, 541], "outliers_cov": 80, "mincovdet": [80, 81, 402, 460, 461, 464, 466, 467, 984, 1020, 1027], "robust_cov": 80, "nmcd": 80, "nmle": 80, "26253567e": 80, "06695631e": 80, "22747343e": 80, "23773583": 80, "24640578": 80, "51963999": 80, "inlier": [80, 126, 201, 227, 237, 301, 387, 402, 422, 460, 554, 662, 668, 836, 867, 879, 893, 894, 896, 974, 984, 1027, 1028, 1033], "inlier_plot": 80, "outlier_plot": 80, "get_xlim": [80, 193, 203, 301], "zz": 80, "mahal_emp_cov": 80, "emp_cov_contour": 80, "pubu_r": 80, "mahal_robust_cov": 80, "robust_contour": 80, "ylorbr_r": 80, "dist": [80, 220, 231, 378, 460, 461, 462, 463, 464, 465, 466, 467, 753, 759, 830, 831], "borderaxespad": 80, "cubic": [80, 410], "suggest": [80, 98, 113, 117, 168, 171, 259, 332, 360, 373, 374, 381, 387, 404, 405, 407, 460, 465, 556, 636, 815, 972, 974, 975, 983, 993, 1013, 1024, 1031, 1034], "emp_mah": 80, "markeredgewidth": [80, 263], "rm": [80, 153, 378, 382, 402], "mahal": 80, "robust_mah": 80, "location_": [80, 81, 460, 461, 462, 463, 464, 465, 466, 467], "316": [80, 83, 155, 159, 183, 217, 602, 605, 616, 866], "plot_mahalanobis_dist": [80, 83], "compens": [81, 167, 169, 174, 198, 216, 260, 402, 405], "soon": [81, 387, 1011], "5n_": 81, "johanna": 81, "hardin": 81, "rock": 81, "decemb": [81, 155, 369, 655, 676, 677, 1020, 1028, 1030, 1032, 1035], "928": [81, 428], "946": 81, "zoubir": 81, "koivunen": 81, "chakhchoukh": 81, "muma": 81, "signal": [81, 95, 96, 97, 105, 123, 150, 155, 156, 165, 176, 197, 199, 217, 250, 314, 399, 400, 402, 408, 409, 410, 413, 466, 494, 512, 517, 522, 525, 528, 532, 616, 635, 636, 637, 638, 643, 644, 654, 655, 663, 675, 676, 677, 775, 808, 816, 864, 974, 978, 995, 1002, 1007, 1014, 1015], "tutori": [81, 136, 137, 138, 139, 187, 200, 216, 259, 363, 374, 375, 380, 382, 386, 394, 400, 443, 453, 682, 993, 1011, 1023], "treatment": [81, 167, 368, 405, 460, 465], "concept": [81, 116, 121, 234, 268, 363, 374, 385, 399, 400, 406, 408, 970, 978, 981, 994, 1002], "magazin": [81, 409], "29": [81, 151, 155, 189, 198, 202, 215, 260, 316, 321, 371, 372, 390, 392, 393, 407, 550, 551, 681, 685, 771, 785, 842, 974, 975, 992], "range_n_outli": 81, "err_loc_mcd": 81, "err_cov_mcd": 81, "err_loc_emp_ful": 81, "err_cov_emp_ful": 81, "err_loc_emp_pur": 81, "err_cov_emp_pur": 81, "outliers_index": 81, "outliers_offset": 81, "inliers_mask": 81, "pure_x": 81, "pure_loc": 81, "pure_emp_cov": 81, "font_prop": 81, "hat": [81, 105, 255, 259, 284, 314, 372, 398, 402, 406, 407, 969, 974, 975, 978, 980, 982], "_2": [81, 155, 405, 408, 522, 528, 536, 537, 637, 643, 974, 982, 992, 993], "x_size": 81, "028": [81, 83, 257, 346], "plot_robust_vs_empirical_covari": [81, 83], "graphicallasso": [82, 402, 460, 461, 463, 464, 465, 466, 467, 469, 1028, 1036], "largest": [82, 97, 116, 200, 371, 400, 402, 405, 434, 518, 532, 548, 549, 550, 551, 555, 556, 579, 700, 785, 786, 806, 828, 898, 899, 900, 901, 927, 975, 978, 988, 993, 994], "invert": [82, 100, 144, 220, 346, 347, 385, 402, 408, 621, 680, 684, 988, 1029], "fairli": [82, 122, 221, 274, 296, 382, 400, 550, 551, 979, 1011], "tweak": [82, 234, 404, 944, 977, 1013, 1031], "readabl": [82, 260, 314, 379, 380, 382, 394, 525, 1029, 1032, 1033, 1034, 1035], "make_sparse_spd_matrix": [82, 520], "prng": 82, "prec": [82, 228, 518, 978], "smallest_coef": [82, 518], "largest_coef": [82, 518], "multivariate_norm": [82, 86, 244, 460, 461, 462, 463, 464, 465, 466, 467], "ledoit_wolf": [82, 402, 1033], "prec_": 82, "lw_cov_": 82, "lw_prec_": 82, "this_cov": 82, "this_prec": 82, "ma": [82, 307, 332, 974, 1026, 1031], "masked_equ": 82, "set_facecolor": [82, 244], "set_axis_bgcolor": 82, "alpha_": [82, 136, 168, 178, 186, 187, 463, 602, 635, 636, 638, 642, 644, 646, 647, 652, 654, 664, 666, 974, 994, 1008, 1020, 1027], "536": [82, 83, 155, 279], "plot_sparse_cov": [82, 83], "auto_examples_covari": 83, "cross_decomposit": [84, 85, 86, 165, 235, 363, 1024, 1025, 1027, 1028, 1029], "plscanon": [85, 473, 475, 476, 1000, 1015, 1024, 1028, 1030, 1032, 1034], "plsregress": [85, 86, 1000, 1015, 1027, 1030, 1032, 1034], "share": [85, 128, 168, 249, 345, 354, 356, 360, 361, 376, 382, 400, 405, 408, 540, 659, 695, 699, 785, 786, 790, 791, 972, 985, 1020, 1022, 1028, 1030, 1032, 1035], "appar": [85, 980, 1002], "scatterplot": [85, 177, 259, 282], "maxim": [85, 86, 95, 106, 123, 177, 249, 250, 260, 264, 268, 269, 289, 306, 313, 332, 350, 354, 371, 387, 397, 400, 403, 405, 409, 410, 540, 601, 602, 635, 636, 639, 660, 670, 671, 711, 787, 790, 791, 801, 859, 865, 875, 972, 974, 978, 981, 983, 993, 1008, 1011, 1023, 1025, 1030, 1033, 1035], "weak": [85, 109, 121, 124, 202, 216, 265, 404, 548, 549, 550, 555, 556, 557, 621, 981, 1002], "var": [85, 86, 101, 113, 147, 178, 259, 371, 375, 409, 632, 636, 892, 893, 894, 895, 896, 978, 1028], "corr": [85, 171, 259], "corrcoef": [85, 106], "plsca": [85, 474], "x_train_r": 85, "y_train_r": 85, "x_test_r": 85, "y_test_r": 85, "221": [85, 128, 1023], "223": [85, 128, 371], "yj": [85, 305], "noiz": 85, "xb": [85, 869], "50210309": 85, "55301008": 85, "72528805": 85, "03429511": 85, "83576671": 85, "74902647": 85, "03916339": 85, "84652988": 85, "78629756": 85, "11231897": 85, "1905275": 85, "33508757": 85, "35433161": 85, "32686504": 85, "39877158": 85, "47827435": 85, "38004088": 85, "35574845": 85, "exce": [85, 277, 312, 410, 433, 506, 593, 640, 649, 1029, 1032, 1034], "214": [85, 87, 151, 197, 217, 410, 575], "plot_compare_cross_decomposit": [85, 87], "pcr": [86, 403], "pl": [86, 202, 371, 403, 473, 474, 475, 476, 1025], "greedili": [86, 147, 400, 404, 409, 451], "despit": [86, 196, 198, 216, 233, 288, 387, 391, 402, 618, 619, 621, 974, 981, 1002, 1028, 1029], "suffer": [86, 118, 170, 279, 301, 346, 360, 400, 407, 410, 535, 753, 973, 974, 978, 981, 1012, 1029], "dive": [86, 374, 380], "explained_variance_": [86, 525, 532, 535, 1012, 1027], "onto": [86, 220, 221, 232, 301, 385, 405, 408, 412, 437, 439, 452, 524, 530, 534, 618, 619, 621, 679, 972, 976, 981], "recommend": [86, 118, 162, 215, 228, 234, 255, 268, 305, 313, 360, 361, 363, 368, 372, 374, 376, 380, 382, 385, 390, 403, 404, 405, 407, 409, 429, 438, 440, 442, 451, 487, 499, 526, 529, 535, 540, 552, 553, 560, 573, 574, 580, 597, 602, 622, 623, 629, 661, 667, 683, 688, 689, 691, 693, 793, 799, 801, 809, 846, 853, 855, 862, 869, 870, 875, 876, 878, 879, 880, 881, 883, 892, 895, 927, 946, 967, 975, 978, 980, 982, 985, 988, 990, 992, 993, 994, 997, 1002, 1015, 1022, 1023, 1029, 1030, 1031, 1032, 1034, 1036], "linearregress": [86, 133, 167, 177, 188, 193, 194, 195, 196, 201, 204, 215, 230, 234, 236, 255, 273, 302, 356, 374, 385, 386, 401, 407, 456, 561, 623, 626, 637, 640, 643, 645, 662, 663, 678, 974, 978, 988, 1011, 1024, 1025, 1029, 1032, 1033, 1034, 1036], "retriev": [86, 168, 202, 266, 346, 354, 378, 387, 401, 405, 408, 409, 459, 487, 581, 584, 585, 617, 644, 654, 675, 716, 720, 722, 723, 746, 771, 825, 829, 862, 888, 944, 974, 976, 978, 980, 998, 999, 1012, 1025, 1030, 1032, 1034], "026": [86, 152, 160, 229, 242], "predit": 86, "pca_2": 86, "673": [86, 380], "438": [86, 87, 168, 250, 251, 986], "plot_pcr_vs_pl": [86, 87], "652": 87, "auto_examples_cross_decomposit": 87, "multilabel": [88, 93, 165, 226, 242, 266, 277, 369, 376, 377, 387, 395, 473, 478, 488, 499, 500, 506, 514, 532, 548, 555, 558, 665, 666, 694, 698, 704, 716, 719, 720, 724, 725, 728, 729, 744, 746, 773, 774, 777, 778, 782, 784, 819, 823, 847, 854, 857, 861, 863, 874, 895, 898, 900, 916, 940, 941, 942, 989, 1000, 1001, 1013, 1015, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1033, 1034, 1035], "056": [89, 93, 986], "plot_digits_last_imag": [89, 93], "iris": [90, 265, 266, 1010], "150x4": 90, "unus": [90, 101, 102, 169, 195, 219, 221, 454, 570, 753, 761, 967, 975, 1020, 1028, 1030, 1031, 1033, 1035], "plai": [90, 96, 124, 152, 181, 207, 253, 282, 290, 328, 329, 360, 385, 1013], "set1": [90, 259, 288, 289], "getter": [90, 460, 461, 462, 463, 464, 465, 466, 467, 584, 585, 588], "110": [90, 177, 195, 205, 230, 307, 428, 972, 973], "3rd": [90, 158, 825, 868, 980, 988], "143": [90, 93, 138, 140, 371, 462, 463, 990, 1020, 1021], "plot_iris_dataset": [90, 93], "easi": [91, 169, 206, 216, 247, 257, 259, 332, 345, 356, 369, 380, 382, 385, 386, 400, 407, 491, 495, 501, 857, 967, 973, 977, 985, 988, 998, 999, 1002, 1013, 1030, 1035, 1036], "make_gaussian_quantil": [91, 110, 112, 370, 461, 465, 466, 467, 511], "321": 91, "323": [91, 132, 134], "y2": [91, 112, 707, 979], "324": [91, 369], "multi": [91, 108, 109, 134, 165, 176, 214, 217, 218, 221, 225, 226, 227, 235, 238, 242, 252, 256, 268, 275, 277, 294, 299, 311, 316, 345, 349, 355, 361, 369, 371, 376, 377, 383, 387, 390, 400, 407, 408, 410, 417, 428, 443, 453, 460, 465, 486, 487, 495, 496, 501, 505, 506, 510, 511, 513, 532, 540, 541, 542, 544, 546, 548, 549, 550, 552, 555, 556, 558, 560, 601, 622, 624, 634, 637, 638, 643, 644, 648, 649, 651, 652, 653, 654, 657, 659, 663, 664, 665, 666, 667, 672, 675, 681, 694, 704, 711, 719, 724, 730, 732, 773, 787, 801, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 837, 838, 840, 846, 847, 848, 851, 857, 870, 874, 885, 886, 890, 892, 895, 898, 899, 900, 902, 903, 904, 910, 913, 916, 967, 979, 981, 985, 988, 992, 998, 999, 1000, 1004, 1010, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1036, 1037], "325": 91, "326": 91, "313": [91, 93, 1011], "plot_random_dataset": [91, 93], "make_multilabel_classif": [92, 235, 370, 506, 527, 778, 821, 822, 978, 1022, 1023, 1025, 1031], "star": [92, 133, 374], "degener": [92, 245, 412, 431, 445, 524, 711, 974, 978, 1029, 1033, 1034], "vocabulari": [92, 213, 345, 346, 385, 408, 579, 580, 581, 582, 980, 1004, 1013, 1020, 1022, 1025, 1028, 1031, 1033], "757": [92, 257, 279, 371], "w0": 92, "w1": [92, 407, 648], "make_ml_clf": 92, "ff3333": 92, "0198e1": 92, "bf5fff": 92, "fcd116": 92, "ff7216": 92, "4dbd33": 92, "87421f": 92, "plot_2d": [92, 219], "p_c": [92, 514], "p_w_c": [92, 514], "allow_unlabel": [92, 235, 514], "return_distribut": [92, 514], "sep": [92, 268], "p_w": 92, "126": [92, 93, 184, 407], "plot_random_multilabel_dataset": [92, 93], "638": [93, 232, 242, 380], "auto_examples_dataset": 93, "blind": [94, 107, 165, 345, 405, 524, 532], "fastica": [94, 107, 165, 405, 523, 526, 532, 1012, 1020, 1022, 1028, 1034, 1035], "increment": [94, 107, 165, 262, 378, 380, 433, 438, 454, 495, 524, 525, 526, 527, 530, 532, 535, 593, 637, 649, 657, 793, 814, 822, 823, 825, 826, 827, 828, 829, 859, 860, 870, 890, 891, 953, 974, 980, 1023, 1024], "fa": [94, 106, 107, 165, 380, 405, 464, 467, 523, 532, 787, 812], "precomput": [94, 107, 165, 176, 217, 222, 279, 281, 376, 383, 385, 387, 400, 408, 411, 423, 431, 432, 435, 436, 437, 441, 443, 448, 456, 462, 473, 474, 475, 515, 522, 526, 528, 531, 533, 539, 545, 547, 549, 551, 553, 556, 559, 561, 601, 602, 611, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 669, 670, 672, 673, 675, 676, 679, 681, 682, 683, 687, 764, 768, 771, 780, 781, 823, 824, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 848, 891, 892, 893, 894, 895, 896, 899, 901, 954, 955, 956, 970, 976, 981, 993, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1036], "olivetti": [95, 118, 367, 405, 486, 1015, 1020, 1028], "chapter": [95, 356, 376, 400, 405, 407, 410, 521, 523, 525, 605, 610, 613, 634, 968, 971, 974, 993, 994], "decompos": [95, 99, 113, 303, 399, 525, 529, 700, 811, 927, 973, 974, 978, 995, 1014, 1015], "basicconfig": 95, "asctim": 95, "levelnam": 95, "faces_cent": 95, "image_shap": [95, 236], "constrained_layout": [95, 169, 219, 307, 308, 316], "set_constrained_layout_pad": 95, "w_pad": [95, 119, 351], "h_pad": [95, 119, 351], "set_edgecolor": 95, "vec": [95, 408, 529, 531, 538], "im": [95, 106, 270, 283, 1001], "pad": [95, 119, 162, 169, 219, 237, 345, 351, 408, 579, 580, 582], "initialis": [95, 529, 531, 538, 1020, 1028, 1029], "mathbb": [95, 113, 153, 403, 978, 985, 993], "4096": [95, 369, 405, 486], "human": [95, 169, 345, 394, 400, 405, 847, 848, 978, 985, 1029], "friendli": [95, 361, 374, 382, 405, 883, 990, 991, 998, 999], "visualis": [95, 98, 106, 235, 535, 981, 999], "64x64": [95, 369, 405], "singular": [95, 383, 397, 400, 403, 442, 444, 473, 474, 475, 476, 512, 515, 525, 529, 531, 532, 535, 538, 540, 541, 648, 663, 664, 665, 678, 927, 974, 975, 977, 1014, 1015, 1026, 1027], "scalar": [95, 314, 380, 387, 401, 410, 412, 455, 458, 515, 524, 606, 607, 608, 613, 614, 618, 619, 728, 732, 906, 914, 970, 982, 984, 988, 992, 998, 1030, 1031, 1034, 1036], "noise_variance_": [95, 186, 523, 525, 532, 647, 1027, 1034], "pixelwis": 95, "pca_estim": 95, "nmf_estim": 95, "multivari": [95, 168, 366, 402, 405, 408, 464, 507, 508, 509, 618, 619, 620, 621, 640, 662, 669, 670, 825, 826, 827, 828, 829, 972, 974, 977, 980, 998, 1004, 1012, 1015], "subcompon": [95, 405], "ica_estim": 95, "15e": 95, "sparsepca": [95, 522, 524, 525, 526, 528, 530, 531, 532, 533, 536, 537, 1020, 1027, 1028, 1030, 1031, 1033, 1034, 1035], "batch_pca_estim": 95, "minibatchdictionarylearn": [95, 98, 362, 405, 522, 529, 533, 536, 537, 1021, 1023, 1030, 1031, 1033, 1034, 1035, 1036], "batch_dict_estim": 95, "That": [95, 110, 147, 187, 227, 259, 263, 346, 347, 361, 368, 382, 387, 404, 409, 410, 434, 437, 438, 548, 555, 584, 805, 898, 899, 967, 975, 976, 978, 984, 994, 1029, 1030], "enhanc": [95, 202, 373, 374, 378, 385, 387, 400, 978, 996, 1018, 1019, 1020, 1021, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "consum": [95, 356, 368, 376, 387, 391, 400, 404, 407, 440, 790, 791, 850, 851, 934, 974, 1002, 1025], "kmeans_estim": 95, "factoranalysi": [95, 103, 106, 405, 535, 1021, 1023, 1032, 1034], "heteroscedast": [95, 103, 123, 200, 405, 866, 878], "fa_estim": 95, "wrap": [95, 115, 123, 279, 368, 376, 387, 424, 499, 576, 577, 648, 667, 732, 816, 874, 968, 978, 981, 993, 998, 1020, 1025, 1028, 1030, 1031, 1033, 1035], "colormap": [95, 112, 158, 190, 207, 332, 337, 351, 688, 1033], "uv": [95, 405], "x_1": [95, 142, 153, 195, 199, 403, 405, 407, 410, 604, 616, 648, 863, 974, 980, 982, 988, 992], "x_n": [95, 405, 980, 982, 992], "dict_pos_dict_estim": 95, "positive_dict": [95, 522, 528, 536, 537], "dict_pos_code_estim": 95, "fit_algorithm": [95, 522, 528, 1035, 1036], "cd": [95, 371, 372, 374, 378, 380, 405, 462, 463, 469, 522, 528, 530, 531, 534, 536, 537, 538, 974, 1013, 1025, 1035], "positive_cod": [95, 522, 528, 533, 536, 537], "dict_pos_estim": 95, "plot_faces_decomposit": [95, 107], "imagin": [96, 150, 234, 404, 405, 408, 974], "microphon": 96, "s1": [96, 147, 158, 186, 187, 371, 1012], "sinusoid": [96, 111, 123, 182, 233, 410, 971, 1012], "s2": [96, 147, 158, 186, 187, 371, 541, 1012], "sawtooth": [96, 1012], "saw": [96, 199, 202, 1012], "tooth": [96, 1012], "s_": [96, 263, 975, 986, 1012], "a_": [96, 397, 400, 529, 531, 538, 974, 1012], "mixing_": [96, 97, 524, 1012], "prove": [96, 1002], "revert": [96, 621, 623, 624, 1027, 1032], "unmix": [96, 412, 524], "allclos": [96, 127, 990, 1012], "mean_": [96, 263, 523, 524, 525, 530, 532, 534, 870, 988, 1012, 1028], "orthogon": [96, 97, 98, 165, 176, 217, 399, 405, 517, 522, 528, 530, 533, 534, 539, 655, 656, 676, 677, 990, 1000, 1015, 1020], "steelblu": [96, 97, 132], "sig": 96, "299": [96, 107, 111, 671], "plot_ica_blind_source_separ": [96, 107], "ica": [97, 399, 412, 994, 1014, 1015], "geometr": [97, 400, 679, 695, 721, 747, 975, 1028], "standard_t": 97, "s_pca_": 97, "s_ica_": 97, "plot_sampl": [97, 250], "axis_list": 97, "x_axi": [97, 206, 263], "y_axi": [97, 206], "quiver": 97, "hline": 97, "set_zord": 97, "plot_ica_vs_pca": [97, 107], "firstli": [98, 360, 385, 648, 1013], "undistort": 98, "noiseless": [98, 976], "pursuit": [98, 165, 176, 217, 405, 465, 517, 522, 528, 533, 539, 655, 656, 676, 677, 1000, 1015, 1020], "omp": [98, 105, 197, 405, 522, 528, 533, 539, 655, 656, 676, 677, 1000, 1015, 1020, 1028], "promin": [98, 387], "reminisc": 98, "downsampl": [98, 237], "075": [98, 346], "show_with_diff": 98, "puor": 98, "22692": 98, "dico": 98, "n_iter_": [98, 206, 247, 387, 431, 438, 439, 440, 462, 463, 473, 474, 475, 522, 523, 524, 527, 528, 529, 530, 531, 534, 552, 553, 618, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 667, 668, 669, 670, 671, 681, 683, 785, 786, 839, 847, 848, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 1024, 1027, 1028, 1030, 1033, 1034, 1036], "n_steps_": [98, 440, 528, 529, 1033], "reconstruct_from_patches_2d": [98, 408, 574], "intercept": [98, 190, 207, 215, 341, 387, 473, 474, 475, 540, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 865, 869, 872, 890, 891, 897, 974, 976, 978, 983, 992, 993, 1023, 1025, 1029, 1030], "transform_algorithm": [98, 105, 522, 528, 533, 1036], "n1": 98, "atom": [98, 105, 405, 522, 528, 530, 533, 534, 536, 537, 644, 654, 675, 974, 1020, 1033], "transform_n_nonzero_coef": [98, 105, 522, 528, 533], "n2": 98, "n4": 98, "transform_alpha": [98, 105, 522, 528, 533, 1033], "set_param": [98, 106, 114, 120, 123, 169, 170, 178, 186, 187, 191, 202, 206, 232, 272, 311, 335, 346, 377, 387, 400, 401, 407, 410, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 790, 791, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 968, 984, 1004, 1011, 1020, 1026, 1027, 1028, 1033, 1034], "55": [98, 168, 174, 193, 198, 216, 221, 321, 379, 400, 404, 482, 588, 787, 793, 801, 814, 978, 1020], "637": [98, 107], "plot_image_denois": [98, 107], "ipca": [99, 524, 525], "flip": [99, 573, 732, 927, 980, 1024, 1033], "incrementalpca": [99, 362, 405, 524, 526, 530, 532, 535, 1024, 1027, 1028, 1030, 1031, 1034], "x_ipca": 99, "x_pca": 99, "turquois": [99, 104, 105, 125, 204, 215, 222, 246, 247, 266], "x_transform": [99, 128, 234, 476, 522, 523, 524, 525, 526, 528, 530, 534, 557, 629, 630, 679, 680, 681, 682], "nmean": 99, "shadow": [99, 104, 105, 222, 322, 339, 347, 408], "scatterpoint": [99, 104, 222, 246, 322], "243": [99, 107, 575], "plot_incremental_pca": [99, 107], "nest": [100, 110, 165, 187, 234, 252, 275, 361, 380, 387, 390, 400, 404, 410, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 453, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 495, 510, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 790, 791, 792, 801, 812, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 946, 967, 978, 981, 1020, 1021, 1024, 1026, 1027, 1028, 1034], "train_ax": 100, "test_ax": 100, "straight": [100, 188, 194, 196, 256, 360], "inner": [100, 123, 260, 264, 322, 360, 408, 434, 505, 537, 573, 580, 639, 660, 671, 765, 767, 970, 978, 988, 993, 1021, 1024, 1034], "x_test_kernel_pca": 100, "orig_data_ax": 100, "pca_proj_ax": 100, "kernel_pca_proj_ax": 100, "unfold": [100, 377, 975], "untangl": 100, "mind": [100, 167, 168, 169, 216, 305, 306, 345, 346, 356, 374, 394, 402, 404, 407, 637, 638, 695, 974, 993, 998, 1004, 1011], "investig": [100, 106, 110, 163, 340, 374, 974], "pca_back_proj_ax": 100, "kernel_pca_back_proj_ax": 100, "reli": [100, 116, 120, 147, 171, 186, 187, 279, 312, 316, 345, 360, 361, 376, 379, 382, 383, 385, 387, 396, 397, 400, 405, 407, 408, 540, 576, 577, 584, 588, 598, 599, 814, 817, 855, 944, 967, 970, 972, 974, 978, 981, 988, 993, 1002, 1028, 1029, 1030, 1034, 1036], "analyt": [100, 405, 410, 523, 611, 699, 968, 972, 978, 997, 1002], "kernelridg": [100, 150, 233, 663, 971, 1024], "kernal": 100, "relianc": [100, 202], "588": [100, 107], "plot_kernel_pca": [100, 107], "aid": [101, 256, 400, 780, 781, 975, 1002, 1020, 1032], "kevin": [101, 634, 1022, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1035], "hugh": [101, 865, 1022, 1033], "pdf": [101, 147, 259, 284, 301, 371, 374, 400, 409, 433, 440, 522, 525, 528, 532, 632, 635, 640, 649, 655, 657, 658, 662, 667, 670, 673, 674, 676, 677, 683, 827, 828, 839, 846, 883, 885, 974, 991, 994, 1001, 1016, 1020], "30000": [101, 369], "pdf_z": 101, "plot_fig": [101, 195], "fig_num": [101, 195], "pca_scor": [101, 103], "vt": [101, 541], "full_matric": 101, "x_pca_axi": 101, "y_pca_axi": 101, "z_pca_axi": 101, "x_pca_plan": 101, "y_pca_plan": 101, "z_pca_plan": 101, "plot_surfac": [101, 169, 195], "plot_pca_3d": [101, 107], "cla": 102, "plot_pca_iri": [102, 107], "homoscedast": [103, 230, 305, 978, 1028], "succe": [103, 182], "subspac": [103, 403, 407, 443, 506, 546, 547, 682, 686, 927, 972, 981, 984, 990, 1002, 1012], "overestim": [103, 356, 404], "circumst": [103, 216, 981, 998], "nip": [103, 371, 506, 532, 557, 632, 978], "604": [103, 532], "minka": [103, 532, 974], "deni": [103, 1022, 1023, 1027, 1028, 1029, 1035, 1036], "engemann": [103, 1022, 1023, 1027], "x_homo": 103, "x_hetero": 103, "cross_val_scor": [103, 137, 162, 163, 165, 252, 255, 264, 273, 275, 317, 335, 356, 374, 376, 385, 404, 407, 511, 566, 694, 732, 787, 811, 813, 898, 899, 967, 978, 1008, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1032, 1033], "fa_scor": 103, "shrunk_cov_scor": 103, "lw_score": 103, "n_components_pca": 103, "n_components_fa": 103, "n_components_pca_ml": 103, "axhlin": [103, 136, 188, 258, 262], "violet": [103, 1036], "plot_pca_vs_fa_model_select": [103, 107], "flower": [104, 268, 497, 498, 978, 998], "92461872": 104, "05306648": 104, "x_r": [104, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594], "x_r2": 104, "plot_pca_vs_lda": [104, 107], "ricker": 105, "sparsecod": [105, 405, 522, 528, 531, 539, 1027, 1028, 1030, 1032, 1034], "mexican": 105, "piecewis": [105, 314, 397, 969, 974, 988, 994], "matter": [105, 250, 356, 400, 407, 558, 659, 667, 669, 974, 1024], "motiv": [105, 374, 376, 387, 970, 978, 988, 1002, 1033], "heavier": [105, 402, 974], "ricker_funct": 105, "ricker_matrix": 105, "d_fix": 105, "d_multi": 105, "first_quart": 105, "transform_n_nozero_coef": 105, "lasso_lar": [105, 522, 528, 533, 539, 1030], "n_nonzero": 105, "coder": [105, 533, 707], "flatnonzero": [105, 186, 258, 267, 268, 771], "soft": [105, 131, 132, 374, 387, 560, 561, 886, 894, 992, 1002, 1025], "debias": 105, "lstsq": [105, 374, 648, 661], "rcond": 105, "plot_sparse_cod": [105, 107], "uncov": [106, 686], "inher": [106, 193, 356, 400, 405, 968, 970, 972, 973, 975, 979], "varimax": [106, 405, 523, 1032], "jona": [106, 1032], "sassenhagen": [106, 1032], "set_yticklabel": [106, 153, 162, 163, 171, 270, 347], "n_comp": [106, 174], "unrot": 106, "52106591": 106, "37741762": 106, "26934744": 106, "92329566": 106, "5804131": 106, "02449161": 106, "56485654": 106, "06694199": 106, "88096009": 106, "4472869": 106, "41691605": 106, "55390036": 106, "99918858": 106, "01915283": 106, "96228895": 106, "05840206": 106, "98633022": 106, "05752333": 106, "16052385": 106, "67443065": 106, "90809432": 106, "41726413": 106, "85857475": 106, "43847489": 106, "plot_varimax_fa": [106, 107], "auto_examples_decomposit": 107, "predictor": [108, 134, 165, 198, 216, 376, 386, 387, 401, 403, 404, 407, 410, 457, 458, 473, 474, 475, 487, 507, 508, 509, 546, 547, 553, 556, 559, 593, 601, 621, 623, 624, 639, 644, 648, 660, 664, 671, 692, 811, 813, 822, 823, 851, 863, 864, 870, 952, 974, 979, 1021, 1027, 1030], "stack": [108, 134, 165, 284, 354, 373, 382, 385, 387, 399, 406, 455, 457, 458, 487, 506, 553, 556, 558, 559, 603, 618, 619, 621, 644, 664, 692, 811, 813, 851, 855, 863, 864, 870, 952, 968, 998, 999, 1000, 1001, 1015, 1020, 1023, 1027, 1028, 1029, 1030, 1031], "versu": [108, 130, 134, 165, 168, 176, 207, 213, 217, 233, 247, 252, 275, 287, 319, 326, 400, 404, 407, 410, 495, 511, 525, 544, 547, 601, 630, 649, 650, 657, 659, 665, 666, 667, 668, 773, 784, 787, 792, 812, 816, 822, 851, 886, 887, 894, 895, 898, 899, 967, 974, 978, 979, 984, 991, 992, 993, 1011, 1028], "isolationforest": [108, 134, 165, 227, 237, 622, 816, 894, 984, 1026, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1036], "oob": [108, 122, 134, 165, 407, 506, 555, 999, 1022, 1033], "votingclassifi": [108, 134, 165, 495, 555, 561, 622, 649, 828, 832, 895, 898, 967, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "vote": [108, 116, 131, 132, 134, 165, 277, 387, 388, 399, 492, 546, 547, 548, 551, 555, 556, 560, 561, 648, 818, 832, 833, 838, 840, 979, 981, 1000, 1011, 1015, 1020, 1023, 1025, 1030], "hasti": [109, 110, 113, 114, 121, 125, 147, 186, 258, 371, 404, 407, 510, 511, 544, 550, 551, 619, 647, 712, 713, 714, 820, 837, 883, 898, 899, 968, 972, 974, 979, 985, 990, 992, 994], "2009": [109, 110, 113, 114, 125, 182, 400, 404, 405, 407, 408, 510, 511, 519, 522, 528, 529, 531, 532, 535, 538, 544, 550, 551, 626, 662, 670, 687, 821, 898, 899, 926, 927, 974, 978, 979, 985, 994], "tibshirani": [109, 113, 114, 125, 147, 186, 258, 371, 404, 407, 511, 550, 551, 619, 647, 712, 713, 714, 820, 837, 898, 899, 968, 972, 974, 979, 985, 994], "friedman": [109, 113, 114, 125, 258, 402, 404, 407, 469, 507, 508, 509, 511, 549, 550, 551, 556, 584, 585, 820, 898, 899, 901, 972, 974, 979, 985, 994], "ed": [109, 114, 125, 400, 407, 511, 550, 551, 990, 1020, 1027], "springer": [109, 113, 114, 125, 258, 398, 400, 404, 405, 407, 511, 526, 550, 551, 681, 685, 687, 696, 711, 716, 730, 731, 746, 785, 898, 899, 975, 978, 979, 985, 994], "zhu": [109, 110, 407, 510, 544, 649, 885], "zou": [109, 110, 186, 407, 510, 544, 647, 974, 992], "rosset": [109, 110, 407, 510, 544], "make_hastie_10_2": [109, 121, 125, 263, 370, 407, 550, 985], "12_000": 109, "Be": [109, 144, 159, 345, 374, 402, 558, 559, 639, 645, 646, 647, 649, 650, 660, 671, 695, 805, 806, 865, 988, 1017, 1021], "stump": [109, 112, 407, 550, 1031], "2_000": [109, 110], "dt_stump": 109, "min_samples_leaf": [109, 116, 122, 123, 170, 311, 314, 350, 407, 548, 549, 550, 551, 552, 553, 555, 556, 557, 898, 899, 900, 901, 994, 1026], "dt_stump_err": 109, "dt_err": 109, "ada_discret": 109, "adaboostclassifieradaboostclassifi": 109, "decisiontreeclassifierdecisiontreeclassifi": [109, 354], "ada_r": 109, "zero_one_loss": [109, 374, 694, 724, 978, 1021, 1022, 1023], "ada_discrete_err": 109, "staged_predict": [109, 110, 124, 407, 544, 545, 550, 551, 552, 553, 1020, 1032], "ada_discrete_err_train": 109, "ada_real_err": 109, "ada_real_err_train": 109, "leg": 109, "fancybox": [109, 339], "get_fram": 109, "650": [109, 134, 261, 275, 398], "plot_adaboost_hastie_10_2": [109, 134], "experi": [110, 153, 157, 167, 168, 169, 170, 174, 200, 306, 340, 346, 347, 361, 368, 374, 377, 399, 404, 506, 718, 775, 974, 979, 990, 996, 997, 998, 1002, 1011, 1013], "depict": [110, 261, 407, 977], "principl": [110, 157, 284, 306, 347, 374, 385, 387, 388, 404, 407, 410, 927, 967, 977, 981, 992, 1027], "repeatedli": [110, 315, 356, 387, 400, 407, 410, 499, 537, 657, 658, 667, 668, 669, 771, 968, 982, 1008], "misclassifi": [110, 253, 345, 993], "349": [110, 380], "sphere": [110, 165, 218, 219, 225, 346, 406, 510, 580, 679, 680, 681, 682, 683, 754, 913, 972, 976, 981], "roughli": [110, 123, 187, 250, 269, 279, 306, 360, 387, 405, 408, 510, 975, 1020], "percent": [110, 483, 591, 991], "base_estim": [110, 313, 376, 398, 428, 544, 545, 546, 547, 821, 824, 887, 967, 974, 1031, 1033, 1034, 1035, 1036], "predecessor": [110, 441, 447, 448], "mistak": [110, 144, 321, 356, 400, 404, 725, 861, 875, 876, 878, 879, 880, 881, 974, 979], "samm": [110, 112, 407, 544], "incorrect": [110, 167, 266, 323, 356, 374, 400, 598, 599, 623, 624, 724, 1020, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "consecut": [110, 199, 398, 404, 408, 434, 438, 440, 441, 443, 447, 450, 453, 528, 529, 530, 537, 593, 636, 657, 658, 659, 667, 668, 669, 785, 786, 792, 825, 826, 827, 828, 829, 847, 848, 967, 988, 1013, 1028], "weak_learn": 110, "max_leaf_nod": [110, 116, 125, 198, 314, 354, 407, 548, 549, 550, 551, 552, 553, 555, 556, 557, 898, 899, 900, 901, 1023, 1029, 1031], "adaboost_clf": 110, "misclassification_error": 110, "dummyclassifi": [110, 262, 543, 978, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030], "preval": [110, 311, 387, 691, 703, 978], "dummi": [110, 111, 198, 216, 234, 262, 363, 376, 379, 395, 863, 872, 988, 994, 1015, 1021, 1023, 1024, 1025, 1027], "dummy_clf": [110, 542], "weak_learners_misclassification_error": 110, "dummy_classifiers_misclassification_error": 110, "475": [110, 159], "692": 110, "surpass": [110, 847, 848], "conclud": [110, 168, 178, 216, 259, 347, 356, 388], "boosting_error": 110, "missclassif": 110, "jitter": [110, 641, 645, 1031], "stagewis": 110, "estimator_errors_": [110, 544, 545], "estimator_weights_": [110, 544, 545], "weak_learners_info": 110, "layout": [110, 301, 385, 890, 891, 892, 895, 911, 993, 1023, 1025], "get_figur": 110, "reweight": [110, 346, 387, 402, 407, 581, 582, 639, 660, 671], "formul": [110, 150, 159, 202, 268, 374, 402, 405, 408, 410, 413, 466, 540, 541, 548, 555, 641, 642, 645, 646, 647, 649, 650, 656, 661, 753, 759, 786, 892, 895, 898, 900, 978, 979, 988, 1000, 1015], "mathemat": [110, 168, 186, 215, 262, 366, 371, 374, 387, 389, 399, 402, 405, 406, 540, 541, 548, 555, 626, 637, 647, 780, 781, 786, 848, 892, 895, 898, 900, 978, 988, 990, 1000, 1002, 1011, 1015, 1034], "th": [110, 237, 314, 354, 386, 400, 404, 407, 415, 432, 436, 442, 444, 450, 454, 463, 548, 549, 550, 551, 552, 553, 555, 556, 557, 584, 585, 623, 639, 640, 660, 662, 671, 687, 709, 770, 808, 871, 915, 968, 974, 978, 982, 985, 992, 993, 1035], "boil": [110, 377, 402], "forc": [110, 150, 183, 202, 279, 305, 345, 368, 372, 378, 395, 404, 407, 441, 448, 487, 597, 600, 637, 638, 643, 644, 648, 651, 652, 653, 654, 663, 664, 665, 672, 675, 678, 744, 768, 771, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 892, 893, 894, 895, 896, 908, 910, 911, 988, 1015, 1025, 1028, 1029, 1030, 1032, 1033, 1034], "plot_adaboost_multiclass": [110, 134], "1d": [111, 113, 165, 169, 199, 231, 280, 293, 339, 352, 374, 381, 383, 386, 387, 401, 406, 455, 458, 608, 624, 644, 648, 651, 654, 675, 694, 703, 704, 710, 719, 720, 724, 728, 732, 773, 774, 777, 784, 832, 833, 834, 835, 836, 838, 840, 841, 842, 855, 906, 910, 911, 941, 965, 979, 1004, 1011, 1020, 1025, 1026, 1027, 1029, 1033, 1034], "drucker": [111, 407, 545], "1997": [111, 369, 405, 407, 410, 526, 545, 681, 685, 974, 975, 978], "decisiontreeregressor": [111, 113, 238, 302, 311, 317, 352, 353, 379, 545, 547, 549, 550, 551, 553, 556, 623, 624, 898, 901, 903, 922, 968, 994, 1021, 1022, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "adaboostregressor": [111, 407, 544, 553, 1022, 1023, 1026, 1029, 1030, 1033, 1035, 1036], "regr_1": [111, 352, 353], "regr_2": [111, 352, 353], "y_1": [111, 352, 353, 403, 978, 982, 992], "y_2": [111, 352, 353, 982], "plot_adaboost_regress": [111, 134], "puriti": [112, 902, 904], "plot_adaboost_twoclass": [112, 134], "73": [112, 263, 321, 386, 787, 801, 836, 899, 988, 1009, 1020, 1022], "bdt": 112, "plot_color": [112, 351], "br": 112, "plot_step": [112, 119, 351], "class_nam": [112, 253, 902, 903, 904, 994, 1036], "xx0": [112, 622], "twoclass_output": 112, "plot_rang": 112, "585": [112, 134, 293, 1011], "irreduc": [113, 978], "light": [113, 369], "beam": [113, 1020], "pointwis": [113, 157, 411, 435], "offset": [113, 174, 385, 402, 405, 460, 499, 500, 554, 623, 624, 632, 633, 635, 636, 668, 718, 765, 767, 836, 894, 978, 992, 1011, 1028], "narrow": [113, 123, 301, 303, 379, 830, 831], "bootstrap": [113, 114, 122, 162, 262, 271, 313, 404, 407, 545, 546, 547, 548, 549, 554, 555, 556, 916, 949, 974, 1020, 1021, 1023, 1025, 1028, 1030, 1033], "stem": [113, 170, 197, 250, 404, 408, 970, 980], "0255": 113, "0003": 113, "0152": 113, "0098": 113, "0196": 113, "0004": [113, 306], "0092": 113, "baggingregressor": [113, 407, 546, 901, 968, 1023, 1026, 1028, 1031, 1035, 1036], "n_repeat": [113, 117, 124, 146, 168, 170, 171, 259, 311, 404, 506, 625, 802, 803, 986], "knn": [113, 131, 138, 162, 287, 288, 291, 306, 313, 322, 345, 407, 593, 839, 885, 886, 981, 991, 1011, 1026], "y_predict": [113, 376, 1020], "y_error": [113, 204], "y_nois": 113, "y_bia": 113, "y_var": 113, "119": [113, 134, 233, 972, 1023], "plot_bias_vari": [113, 134], "z_i": [114, 982], "y_i": [114, 314, 340, 398, 407, 969, 970, 974, 978, 982, 992, 993, 994], "whilst": [114, 221], "practition": [114, 202], "suitabl": [114, 123, 182, 184, 202, 296, 347, 368, 369, 380, 383, 400, 405, 408, 443, 453, 459, 478, 496, 499, 618, 626, 825, 826, 829, 864, 865, 888, 943, 947, 972, 974, 977, 988, 990, 992, 998, 1001, 1013, 1034, 1035], "p592": 114, "593": 114, "kian": [114, 1025, 1035, 1036], "ho": [114, 407, 546, 547, 978, 1025, 1028, 1029, 1034], "hui": [114, 186, 529, 531, 538, 647, 974], "ordereddict": 114, "123": [114, 132, 346, 356, 407, 507, 508, 509, 546, 547, 823, 979, 986], "warm_start": [114, 154, 191, 314, 376, 380, 387, 407, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 601, 637, 639, 640, 643, 649, 651, 653, 657, 658, 659, 660, 667, 668, 669, 671, 785, 786, 839, 847, 848, 984, 1000, 1015, 1020, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1034, 1036], "track": [114, 122, 321, 374, 377, 378, 390, 396, 525, 947, 979, 998, 999, 1027, 1030], "trajectori": 114, "ensemble_clf": 114, "oob_scor": [114, 407, 546, 547, 548, 549, 555, 556, 1025, 1027], "log2": [114, 208, 239, 548, 549, 550, 551, 555, 556, 898, 899, 900, 901, 979], "error_r": 114, "min_estim": 114, "max_estim": 114, "oob_error": 114, "oob_score_": [114, 546, 547, 548, 549, 550, 551, 555, 556, 1022, 1036], "clf_err": 114, "550": [114, 134], "plot_ensemble_oob": [114, 134], "betatim": [115, 129, 1035], "leak": [115, 264, 345, 356, 401, 404, 850, 875, 876, 878, 879, 880, 881, 988, 1020, 1027, 1030], "80_000": 115, "x_full_train": 115, "y_full_train": 115, "x_train_ensembl": 115, "x_train_linear": 115, "y_train_ensembl": 115, "y_train_linear": 115, "gradientboostingclassifi": [115, 121, 122, 125, 303, 356, 385, 544, 552, 623, 624, 979, 985, 1020, 1021, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "random_forest": 115, "gradient_boost": [115, 1022, 1023, 1029], "histgradientboostingclassifi": [115, 116, 311, 312, 313, 314, 316, 361, 550, 555, 623, 624, 968, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "randomtreesembed": [115, 128, 220, 407, 900, 1021, 1028, 1029, 1033, 1034, 1035], "random_tree_embed": 115, "rt_model": 115, "randomtreesembeddingrandomtreesembed": 115, "rf_appli": 115, "rf_leaves_yield": 115, "kw_arg": [115, 854, 988, 1026], "rf_model": 115, "0x7f6bc8a24a60": 115, "functiontransformerfunctiontransform": 115, "gbdt_appli": 115, "gbdt_leaves_yield": 115, "gbdt_model": 115, "0x7f6bc8e7d670": 115, "roccurvedisplai": [115, 237, 240, 256, 268, 269, 311, 381, 778, 779, 984, 1017, 1030, 1036], "rt": 115, "rf": [115, 116, 129, 132, 133, 170, 311, 356, 407, 558, 560, 561], "gbdt": [115, 169, 311, 312, 317, 379, 407], "model_displai": 115, "018": [115, 134, 169, 237, 242, 259, 463], "plot_feature_transform": [115, 134], "hgbt": [116, 407], "fetch_california_h": [116, 162, 163, 301, 313, 369, 386, 401, 1029, 1031], "20640": [116, 163, 369, 481], "n_core": 116, "only_physical_cor": 116, "unnecessari": [116, 244, 379, 434, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 696, 981, 988, 999, 1002, 1023, 1025, 1030, 1031, 1033, 1036], "early_stop": [116, 169, 206, 295, 314, 345, 387, 407, 552, 553, 657, 658, 659, 667, 668, 669, 847, 848, 992, 1028, 1031, 1034, 1035], "return_train_scor": [116, 263, 307, 404, 787, 790, 791, 801, 813, 1026, 1027, 1029], "wast": [116, 380, 404, 405, 967], "plotli": [116, 260, 374, 390, 393], "cursor": [116, 260], "px": [116, 260], "make_subplot": 116, "shared_yax": 116, "subplot_titl": 116, "model_nam": [116, 237, 277], "colors_list": 116, "param_nam": [116, 260, 274, 317, 340, 391, 809, 817, 973, 1013], "param_": 116, "scatter_fig": 116, "mean_fit_tim": [116, 281, 787, 801], "error_x": [116, 260], "std_fit_tim": [116, 281, 787, 801], "error_i": [116, 260], "hover_data": [116, 260], "line_fig": 116, "scatter_trac": 116, "line_trac": 116, "add_trac": 116, "mean_score_tim": [116, 257, 260, 787, 801], "std_score_tim": [116, 260, 787, 801], "update_layout": [116, 260], "xaxis2": 116, "traceord": 116, "borderwidth": 116, "plateau": [116, 146, 257, 261], "earlier": [116, 169, 202, 368, 374, 403, 821, 824, 988, 996, 1018, 1021, 1033, 1035], "never": [116, 235, 356, 374, 383, 385, 394, 400, 401, 403, 404, 441, 448, 514, 537, 546, 547, 548, 555, 850, 851, 970, 988, 1030, 1033], "hgbdt": 116, "sightli": 116, "domin": [116, 163, 198, 203, 268, 306, 369, 380, 398, 870, 980, 988, 994, 1036], "ever": [116, 129, 383, 407, 1002], "disput": 116, "alwai": [116, 120, 123, 177, 198, 216, 224, 231, 262, 265, 269, 308, 329, 346, 356, 360, 361, 368, 374, 375, 376, 380, 386, 387, 390, 398, 400, 401, 404, 407, 408, 409, 410, 423, 434, 440, 455, 456, 458, 460, 473, 474, 475, 479, 487, 499, 500, 535, 540, 542, 543, 545, 547, 549, 550, 551, 552, 553, 555, 556, 559, 561, 572, 579, 580, 582, 585, 602, 618, 619, 621, 623, 624, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 662, 663, 664, 667, 669, 670, 686, 696, 700, 706, 712, 713, 714, 722, 724, 725, 729, 772, 775, 776, 785, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 823, 824, 833, 834, 841, 842, 848, 855, 863, 868, 870, 883, 891, 892, 893, 895, 896, 898, 899, 901, 928, 937, 967, 968, 970, 972, 974, 977, 978, 981, 984, 986, 990, 991, 993, 994, 1002, 1004, 1011, 1020, 1022, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035], "thumb": [116, 174, 360, 374, 375, 385, 400, 649, 650, 657, 659, 667, 668, 669, 890, 978], "plot_forest_hist_grad_boosting_comparison": [116, 134], "artifici": [117, 120, 127, 163, 202, 219, 233, 298, 345, 369, 370, 371, 379, 397, 399, 400, 404, 405, 410, 526, 687, 820, 847, 848, 971, 975, 977, 979, 985, 990, 994, 999, 1002, 1020], "feature_importances_": [117, 118, 124, 147, 170, 171, 387, 407, 409, 544, 545, 548, 549, 550, 551, 555, 556, 557, 584, 585, 588, 898, 899, 900, 901, 1022, 1025, 1029], "estimators_": [117, 119, 235, 311, 387, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 818, 819, 820, 821, 822, 823, 824, 1021, 1027, 1034], "forest_import": 117, "mdi": [117, 124, 165, 166, 171, 172, 407, 455, 487, 555, 621, 625, 816, 850, 864, 986], "overcom": [117, 202, 360, 408], "permutation_import": [117, 118, 124, 170, 171, 311, 407, 544, 545, 548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901, 986, 1030, 1032, 1033], "importances_mean": [117, 124, 170, 171, 311, 625, 986], "630": [117, 284, 293, 714], "importances_std": [117, 625, 986], "omit": [117, 167, 168, 325, 379, 413, 466, 525, 657, 659, 667, 794, 796, 818, 819, 822, 825, 826, 827, 828, 829, 847, 976, 983], "089": [117, 134], "plot_forest_import": [117, 134], "hotter": 118, "job": [118, 247, 374, 378, 382, 407, 411, 428, 435, 437, 439, 441, 443, 448, 449, 452, 455, 458, 459, 463, 522, 526, 527, 528, 530, 533, 534, 536, 537, 539, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 593, 601, 625, 630, 648, 679, 680, 681, 682, 683, 684, 685, 764, 768, 771, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 849, 852, 885, 886, 888, 944, 1002, 1006], "five": [118, 245, 321, 324, 369, 522, 530, 536, 975, 981, 993, 1002, 1020], "drawback": [118, 215, 970, 973], "img_shap": 118, "imp_reshap": 118, "106": [118, 241, 371, 866, 972, 1021], "met": [118, 234, 376, 409, 525, 532, 618, 662, 974, 978, 1028], "plot_forest_importances_fac": [118, 134], "third": [119, 124, 142, 147, 158, 216, 227, 250, 284, 303, 317, 361, 369, 373, 385, 388, 408, 525, 579, 580, 581, 582, 789, 790, 791, 796, 832, 833, 834, 836, 838, 868, 880, 946, 967, 989, 996, 1020, 1031, 1036], "fourth": [119, 1004], "descend": [119, 618, 1030], "extratreesclassifi": [119, 128, 407, 409, 549, 555, 557, 900, 901, 979, 1023, 1024, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037], "decisiontre": [119, 1025], "consol": [119, 372, 1005], "extratre": [119, 128, 360, 1023], "sequenti": [119, 141, 148, 165, 192, 260, 313, 372, 405, 407, 408, 492, 525, 584, 588, 593, 594, 596, 597, 637, 638, 643, 644, 651, 652, 653, 654, 664, 850, 968, 986, 992, 998, 1000, 1015, 1020, 1029, 1032], "9266666666666666": 119, "8666666666666667": 119, "9933333333333333": 119, "rdylbu": [119, 351], "plot_step_coars": 119, "plot_idx": 119, "model_titl": 119, "model_detail": 119, "blend": [119, 130, 307, 387, 404, 998], "estimator_alpha": 119, "coarser": [119, 123], "regularli": [119, 385, 980], "xx_coarser": 119, "yy_coars": 119, "z_points_coars": 119, "cs_point": 119, "971": [119, 134], "plot_forest_iri": [119, 134], "equidist": [120, 683], "lowa": 120, "sale": [120, 259, 978, 1002], "42165": 120, "categorical_columns_subset": 120, "bldgtype": 120, "garagefinish": 120, "lotconfig": 120, "masvnrtyp": [120, 130], "housestyl": [120, 130], "fireplacequ": 120, "extercond": 120, "exterqu": [120, 130], "poolqc": 120, "numerical_columns_subset": 120, "3ssnporch": 120, "fireplac": 120, "bsmthalfbath": 120, "halfbath": 120, "garagecar": [120, 130], "totrmsabvgrd": 120, "bsmtfinsf1": [120, 130], "bsmtfinsf2": 120, "grlivarea": 120, "screenporch": 120, "n_categorical_featur": [120, 552, 553, 623, 624], "n_numerical_featur": 120, "1460": [120, 130], "make_column_transform": [120, 130, 168, 229, 312, 401, 455, 457, 1028], "dropper": 120, "hist_drop": 120, "hist_one_hot": 120, "etc": [120, 198, 216, 254, 263, 264, 356, 360, 362, 374, 376, 378, 379, 385, 386, 387, 391, 397, 401, 404, 408, 480, 494, 548, 549, 555, 556, 659, 667, 683, 709, 761, 787, 801, 821, 824, 854, 865, 898, 899, 900, 901, 902, 904, 910, 911, 921, 967, 968, 972, 978, 981, 998, 999, 1002, 1020, 1027, 1029, 1030], "use_encoded_valu": [120, 130, 170, 307, 864, 988, 1032], "unknown_valu": [120, 130, 170, 307, 864, 988, 1032, 1034, 1035], "hist_ordin": 120, "n_unique_categori": [120, 307], "hist_n": 120, "mean_absolute_percentage_error": [120, 978, 1032, 1034], "neg_mean_absolute_percentage_error": [120, 978, 986], "n_cv_fold": [120, 307, 793, 809, 814, 817], "dropped_result": 120, "one_hot_result": 120, "ordinal_result": 120, "native_result": 120, "plot_result": [120, 244, 245, 250], "figure_titl": 120, "plot_info": 120, "test_scor": [120, 122, 124, 206, 258, 261, 307, 340, 350, 386, 404, 793, 809, 813, 814, 817], "y_limit": 120, "mape_cv_mean": 120, "mape_cv_std": 120, "c0": [120, 230, 307], "slowest": [120, 926, 927], "theori": [120, 233, 249, 340, 371, 399, 400, 404, 407, 681, 685, 716, 746, 882, 883, 927, 967, 974, 975, 977, 978, 979, 993, 994], "poorer": [120, 356, 405], "slight": [120, 203, 313, 407, 440, 1030], "acf": 120, "bde": 120, "isol": [120, 126, 227, 237, 346, 372, 374, 380, 390, 554, 836, 894, 1029, 1030], "bcde": 120, "histgradientboostingregressor__max_depth": 120, "histgradientboostingregressor__max_it": 120, "altogeth": [120, 380, 1028], "plot_gradient_boosting_categor": [120, 134], "validation_fract": [121, 206, 314, 407, 550, 551, 552, 553, 657, 658, 659, 667, 669, 847, 848, 992, 1028, 1034], "denot": [121, 383, 387, 390, 398, 400, 404, 407, 579, 580, 582, 787, 793, 801, 809, 863, 864, 963, 967, 970, 974, 976, 978, 979, 988, 991, 1004], "kept": [121, 249, 279, 340, 368, 378, 394, 410, 487, 526, 529, 531, 532, 537, 538, 588, 601, 602, 610, 611, 635, 686, 785, 786, 911, 988, 1028, 1029], "asid": [121, 206, 394, 550, 551, 552, 553, 657, 658, 659, 667, 669, 847, 848], "n_estimators_": [121, 550, 551], "vighnesh": [121, 1025, 1026, 1028], "birodkar": [121, 1025, 1026, 1028], "vighneshbirodkar": 121, "rvraghav93": [121, 263, 301], "data_list": 121, "n_gb": 121, "score_gb": 121, "time_gb": 121, "n_gbe": 121, "gbe": 121, "gb": [121, 133, 407, 544, 624], "bar_width": 121, "bar1": 121, "crimson": 121, "bar2": 121, "coral": 121, "n_est": 121, "max_i": [121, 235, 980], "498": [121, 134], "plot_gradient_boosting_early_stop": [121, 134], "fly": [122, 379, 382, 499, 500, 573, 1020, 1022, 1029], "pessimist": [122, 407], "cumul": [122, 198, 216, 400, 716, 725, 746, 867, 879, 988, 992, 1027, 1029, 1030], "demand": [122, 408, 787, 801, 811, 812], "6820": 122, "special": [122, 168, 188, 216, 289, 307, 332, 368, 370, 376, 380, 385, 387, 400, 403, 405, 455, 458, 544, 546, 550, 811, 902, 967, 972, 974, 976, 977, 978, 979, 981, 994, 1027, 1030, 1032, 1034], "expit": [122, 188, 407, 552, 974, 1027], "ridgewai": [122, 407], "gbm": [122, 407, 1023], "x3": [122, 237, 401, 1012], "binomi": [122, 125, 407, 544, 550, 552, 974, 1034], "acc": 122, "heldout_scor": 122, "devianc": [122, 125, 198, 216, 317, 407, 544, 549, 550, 552, 553, 556, 639, 660, 671, 712, 713, 714, 737, 739, 742, 899, 901, 974, 994, 1021, 1030, 1031, 1033, 1034, 1036], "y_proba": [122, 125, 306, 387, 850], "staged_predict_proba": [122, 125, 544, 550, 552, 1020], "cv_estim": 122, "cv_clf": 122, "val_scor": 122, "cv_score": 122, "cumsum": [122, 198, 216, 1027], "oob_improvement_": [122, 407, 550, 551, 1022], "oob_best_it": 122, "test_best_it": 122, "cv_best_it": 122, "brew": [122, 372, 390], "oob_color": 122, "174": [122, 290, 293, 298, 334, 343, 380, 575], "212": [122, 264, 273, 275, 323, 371, 460, 491, 984, 1011], "test_color": 122, "127": [122, 1020], "201": [122, 231, 371, 575], "cv_color": 122, "192": [122, 380, 1020], "oob_lin": 122, "test_lin": 122, "cv_line": 122, "dashdot": [122, 150, 153], "xticks_po": 122, "tolist": [122, 162, 171, 258, 313, 369], "xticks_label": 122, "886": [122, 134], "plot_gradient_boosting_oob": [122, 134], "atleast_2d": [123, 376], "expected_i": 123, "amplitud": [123, 155, 157, 192, 410, 974], "lognorm": [123, 156, 179, 248, 305, 988], "tail": [123, 163, 168, 198, 200, 259, 301, 512, 515, 974], "imposs": [123, 347, 999], "mean_pinball_loss": [123, 314, 974, 978, 1033], "all_model": 123, "min_samples_split": [123, 124, 125, 263, 271, 302, 313, 407, 548, 549, 550, 551, 555, 556, 557, 790, 791, 898, 899, 900, 901, 967, 994, 1026], "gbr": 123, "gbr_l": 123, "5th": [123, 158, 400], "95th": [123, 738], "y_med": 123, "fill_between": [123, 136, 150, 155, 157, 159, 177, 178, 216, 259, 261, 262, 263, 269, 793, 809], "unfortun": [123, 167, 168, 216, 382, 385, 407, 499, 500], "sinoisoid": 123, "highlight_min": [123, 187], "font": [123, 187, 212, 232, 902, 904], "pbl": 123, "nbsp": [123, 187], "715413": 123, "750348": 123, "127128": 123, "253445": 123, "379763": 123, "933253": 123, "305438": 123, "622811": 123, "940184": 123, "827917": 123, "909909": 123, "145957": 123, "382005": 123, "667219": 123, "asymmetr": [123, 200, 387, 1025], "nor": [123, 262, 345, 356, 360, 379, 385, 408, 428, 437, 585, 914, 982, 994, 1031], "917281": 123, "767498": 123, "617715": 123, "692901": 123, "144204": 123, "245961": 123, "347717": 123, "648026": 123, "412021": 123, "607752": 123, "803483": 123, "874771": 123, "354394": 123, "355445": 123, "356497": 123, "852774": 123, "underestim": [123, 169, 198, 216, 259, 374], "extrem": [123, 198, 200, 236, 301, 308, 323, 346, 374, 377, 400, 405, 548, 549, 555, 556, 557, 623, 624, 670, 714, 742, 900, 901, 902, 904, 978, 980], "coverage_fract": 123, "y_low": 123, "y_high": 123, "868": [123, 143], "hypothesi": [123, 259, 265, 340, 404, 681, 685, 815, 975], "pinbal": [123, 314, 553, 661, 713, 738, 974, 1033, 1034], "experiment": [123, 162, 163, 198, 270, 271, 313, 314, 363, 374, 376, 377, 384, 385, 387, 391, 404, 487, 540, 618, 687, 790, 791, 946, 948, 967, 968, 974, 977, 978, 998, 999, 1007, 1015, 1028, 1029, 1032, 1033, 1034, 1035], "enable_halving_search_cv": [123, 270, 271, 313, 378, 790, 791, 967], "halvingrandomsearchcv": [123, 271, 313, 570, 790, 967, 1032, 1034, 1035], "make_scor": [123, 263, 391, 404, 787, 812, 813, 978, 1029], "neg_mean_pinball_loss_05p_scor": 123, "greater_is_bett": [123, 732, 978], "search_05p": 123, "max_resourc": [123, 790, 791, 967], "min_resourc": [123, 790, 791], "neg_mean_pinball_loss_95p_scor": 123, "search_95p": 123, "estimator__alpha": 123, "did": [123, 150, 168, 171, 198, 206, 216, 245, 369, 618, 703, 806, 892, 1012, 1021, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1035], "untun": 123, "joint": [123, 165, 169, 176, 217, 219, 401, 602, 643, 653, 683, 825, 826, 827, 828, 829, 890, 974, 975, 979, 983, 985, 989, 1020], "9026666666666666": 123, "796": 123, "sadli": 123, "plot_gradient_boosting_quantil": [123, 134], "tackl": [124, 259, 361, 374, 400, 827, 980, 1002, 1007], "katrina": [124, 1031], "ni": [124, 1026, 1031], "nilichen": 124, "reg": [124, 168, 178, 234, 302, 312, 337, 407, 549, 551, 559, 641, 642, 644, 645, 646, 647, 648, 654, 655, 656, 661, 662, 669, 670, 680, 684, 901, 974, 1025], "3025": 124, "7877": 124, "train_score_": [124, 407, 550, 551, 552, 553], "impur": [124, 354, 389, 407, 409, 544, 545, 548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901, 902, 904, 994, 1015, 1025, 1026, 1027, 1028], "feature_import": 124, "sorted_idx": [124, 311], "po": [124, 222, 408], "align": [124, 163, 219, 244, 270, 347, 387, 680, 684, 981, 992, 1014, 1015, 1036], "vert": [124, 170, 171, 311, 992], "plot_gradient_boosting_regress": [124, 134], "consider": [125, 151, 154, 254, 260, 266, 374, 410, 610, 787, 801, 967, 980, 984, 992, 1002], "return_invers": [125, 376], "original_param": 125, "test_devi": 125, "141": [125, 134, 525, 890, 979], "plot_gradient_boosting_regular": [125, 134], "anomali": [126, 165, 226, 237, 242, 285, 286, 369, 399, 460, 503, 513, 554, 630, 668, 836, 851, 894, 984, 1026, 1027], "recurs": [126, 141, 148, 165, 350, 376, 399, 400, 404, 431, 432, 433, 436, 454, 493, 506, 554, 584, 585, 588, 593, 623, 624, 649, 806, 895, 978, 981, 984, 985, 994, 1000, 1012, 1015, 1020, 1030, 1031], "deform": [126, 249, 342], "notat": [126, 387, 401, 405, 408, 581, 703, 974, 978, 1004, 1029, 1036], "120": [126, 220, 409, 581, 1020], "cluster_1": 126, "cluster_2": 126, "legend_el": [126, 211, 262], "nuniformli": 126, "max_sampl": [126, 162, 407, 546, 547, 548, 549, 554, 555, 556, 625, 1030, 1033, 1036], "isolationforestisolationforest": 126, "ax_": [126, 253, 262, 266, 274, 306, 311, 381, 429, 622, 688, 689, 691, 692, 693, 793, 809], "nof": 126, "444": [126, 134], "plot_isolation_forest": [126, 134], "trend": [127, 155, 169, 230, 296, 410, 1002, 1027], "xgboost": [127, 407, 998], "partialdependencedisplai": [127, 169, 238, 312, 313, 314, 316, 381, 624, 985, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "f_0": 127, "f_1": [127, 266, 978], "gbdt_no_cst": [127, 312], "histgradientboostingregressorhistgradientboostingregressor": [127, 130, 307, 316], "gbdt_with_monotonic_cst": 127, "monotonic_cst": [127, 312, 314, 407, 548, 549, 552, 553, 555, 556, 898, 899, 900, 901, 1035], "line_kw": [127, 238, 261, 312, 623, 793, 809], "unconstrain": [127, 169, 312, 369, 992], "axes_": [127, 238, 312, 381, 623], "f_idx": 127, "oscil": [127, 169, 203, 400, 431], "x_df": 127, "gbdt_with_monotonic_cst_df": 127, "589": [127, 134], "plot_monotonic_constraint": [127, 134], "excel": [128, 368, 374, 407, 681, 685, 974, 1002], "bernoullinb": [128, 362, 826, 827, 828, 829, 979, 980, 1021, 1022, 1024, 1027, 1032, 1033, 1035], "hasher": [128, 347, 408], "transformed_grid": 128, "y_grid_pr": 128, "357": [128, 134, 346, 371, 491, 891], "plot_random_forest_embed": [128, 134], "multioutput": [129, 268, 277, 363, 376, 387, 423, 456, 473, 474, 475, 542, 545, 547, 548, 549, 551, 553, 555, 556, 559, 561, 602, 623, 624, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 669, 670, 712, 713, 718, 735, 736, 738, 740, 741, 743, 775, 778, 811, 819, 833, 841, 848, 857, 891, 893, 896, 898, 899, 900, 901, 916, 941, 942, 978, 1000, 1015, 1020, 1021, 1022, 1026, 1027, 1033, 1034], "multioutputregressor": [129, 423, 456, 473, 474, 475, 545, 547, 549, 551, 553, 556, 559, 561, 602, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 669, 670, 822, 824, 833, 841, 848, 891, 893, 896, 899, 901, 1026, 1027, 1029, 1031, 1032, 1036], "nativ": [129, 162, 361, 369, 387, 407, 552, 553, 822, 823, 946, 974, 978, 998, 1030, 1032], "centr": 129, "regr_multirf": 129, "regr_rf": 129, "y_multirf": 129, "y_rf": 129, "cornflowerblu": [129, 192, 201, 208, 245, 247, 250, 266, 268, 282, 284, 290, 352, 353], "530": [129, 134, 156, 160, 259, 275], "plot_random_forest_regression_multioutput": [129, 134], "compil": [130, 279, 347, 360, 361, 374, 375, 376, 377, 382, 383, 385, 998, 1020], "dean": [130, 1028, 1034, 1036], "cock": [130, 1029], "becam": [130, 388, 1028], "kaggl": [130, 386], "residenti": 130, "iowa": 130, "won": [130, 297, 346, 378, 400, 459, 487, 618, 619, 621, 678, 695, 708, 726, 727, 745, 747, 783, 977, 988, 1025, 1026, 1031], "load_ames_h": 130, "yrsold": 130, "heatingqc": 130, "street": [130, 371], "yearremodadd": 130, "heat": [130, 332, 400, 443, 453, 686], "bsmtunfsf": 130, "mssubclass": 130, "condition2": 130, "garagetyp": 130, "overallqu": 130, "totalbsmtsf": 130, "miscfeatur": 130, "mosold": 130, "cat_selector": 130, "num_selector": 130, "besid": [130, 230, 374, 379, 580, 967, 1028], "cat_tree_processor": 130, "encoded_missing_valu": [130, 170, 864, 988, 1034, 1035], "num_tree_processor": 130, "add_ind": [130, 163, 618, 619, 621, 968, 1029, 1032], "tree_preprocessor": [130, 198], "0x7f6bb7c428e0": 130, "0x7f6bc985e0d0": 130, "ordinalencoderordinalencod": [130, 169, 170, 307], "cat_linear_processor": 130, "num_linear_processor": 130, "linear_preprocessor": 130, "tediou": 130, "wrote": [130, 369], "lasso_pipelin": 130, "lassocvlassocv": 130, "rf_pipelin": 130, "randomforestregressorrandomforestregressor": 130, "gbdt_pipelin": 130, "stackingregressor": [130, 311, 407, 558, 1030, 1031, 1032, 1033, 1034], "stacking_regressor": 130, "final_estim": [130, 311, 407, 558, 559], "unknown_v": 130, "stackingregressorstackingregressor": 130, "forestcolumntransform": 130, "lassocolumntransform": 130, "boostingcolumntransform": 130, "final_estimatorridgecvridgecv": 130, "cross_val_predict": [130, 255, 311, 398, 404, 407, 428, 558, 559, 812, 813, 1024, 1025, 1026, 1027, 1029, 1031, 1033], "scorer": [130, 216, 263, 376, 387, 391, 404, 407, 552, 553, 585, 593, 625, 650, 664, 666, 702, 722, 723, 732, 787, 790, 791, 793, 801, 809, 812, 813, 814, 817, 936, 967, 974, 978, 986, 999, 1024, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035], "test_": [130, 404], "line_kwarg": [130, 692], "nevalu": 130, "704": [130, 134, 345, 346], "plot_stack_predictor": [130, 134], "exemplari": 131, "eclf": [131, 132, 407], "axarr": [131, 301], "tt": [131, 254, 456], "508": [131, 134, 1011], "plot_voting_decision_region": [131, 134], "examplari": 132, "class1_1": 132, "class2_1": 132, "lightgreen": [132, 204, 215], "p3": 132, "p4": 132, "nweight": 132, "plot_voting_proba": [132, 134], "votingregressor": [133, 407, 560, 1029, 1030, 1031, 1034], "cohort": 133, "reg1": [133, 407], "reg2": [133, 407], "reg3": [133, 407], "ereg": [133, 407], "votingregressorvotingregressor": 133, "gbgradientboostingregressorgradientboostingregressor": 133, "rfrandomforestregressorrandomforestregressor": 133, "lrlinearregressionlinearregress": 133, "xt": [133, 279, 387, 436, 529, 531, 618, 620, 787, 790, 791, 801, 834, 842, 850, 855, 860, 867, 879, 908, 1036], "pred1": 133, "pred2": 133, "pred3": 133, "pred4": 133, "labelbottom": [133, 259], "plot_voting_regressor": [133, 134], "391": [134, 687], "auto_examples_ensembl": 134, "n_fold": [136, 638, 642, 644, 646, 650, 652, 654, 1021, 1022, 1026], "scores_std": [136, 137], "semilogx": [136, 137, 187, 272], "std_error": 136, "transluc": 136, "999999999999999e": 136, "31622776601683794": 136, "answer": [136, 167, 259, 374, 385, 716, 746, 978, 1002], "extern": [136, 150, 362, 363, 367, 371, 374, 376, 379, 385, 387, 397, 400, 408, 409, 410, 584, 601, 602, 708, 727, 783, 974, 977, 978, 981, 994, 999, 1005, 1011, 1015, 1028, 1032], "lasso_cv": 136, "k_fold": [136, 1008], "maximis": [136, 245, 287, 972, 981], "5f": [136, 315], "moreov": [136, 156, 303, 315, 356, 378, 400, 404, 410, 883, 948, 978, 1002, 1028, 1034, 1035], "substanti": [136, 281, 285, 286, 302, 374, 836, 984, 1024, 1027], "05968": 136, "54209": 136, "04520": 136, "15521": 136, "07880": 136, "45192": 136, "558": [136, 140], "plot_cv_diabet": [136, 140], "this_scor": [137, 335], "623": [137, 140, 827, 980], "plot_cv_digit": [137, 140], "961111": 138, "933333": [138, 839], "plot_digits_classification_exercis": [138, 140], "200j": [139, 336], "402": [139, 140, 263], "plot_iris_exercis": [139, 140], "726": [140, 986], "auto_examples_exercis": 140, "exercis": [140, 362, 363, 371, 374, 492, 493, 495, 496, 643, 644, 649, 787, 792, 812, 832, 895, 1005, 1023], "elimin": [141, 148, 165, 399, 400, 404, 439, 493, 506, 584, 585, 588, 593, 649, 790, 791, 806, 895, 964, 978, 1000, 1002, 1015, 1020], "x_2": [142, 153, 195, 405, 407, 408, 410, 604, 616, 974, 982, 988], "x_3": [142, 988], "irrelev": [142, 182, 356, 380, 402, 407, 409, 595, 730, 978], "agre": [142, 382, 388, 399, 400, 776, 1004], "percept": [142, 169, 985], "correctli": [142, 146, 198, 216, 234, 266, 268, 273, 289, 308, 322, 332, 374, 383, 405, 407, 417, 428, 460, 484, 540, 541, 542, 544, 546, 548, 550, 552, 555, 558, 560, 601, 649, 657, 659, 665, 666, 667, 694, 782, 784, 818, 819, 820, 821, 825, 826, 827, 828, 829, 832, 837, 840, 847, 870, 885, 886, 890, 892, 893, 894, 895, 896, 898, 900, 928, 975, 978, 981, 982, 988, 993, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "mutual_info_regress": [142, 315, 409, 583, 586, 587, 590, 591, 600, 1026, 1027, 1032, 1034, 1035, 1036, 1037], "f_test": 142, "x_": [142, 151, 250, 259, 311, 376, 400, 403, 405, 618, 626, 754, 885, 886, 974, 980, 985, 1026], "plot_f_test_vs_mi": [142, 148], "examin": [143, 380, 382, 400, 839], "f_classif": [143, 144, 335, 409, 583, 586, 587, 589, 590, 591, 595, 597, 600], "log10": [143, 156, 168, 183, 191, 260, 332], "pvalues_": [143, 583, 586, 587, 589, 590, 591, 1020], "x_indic": 143, "p_": [143, 978, 981, 994], "svm_weight": 143, "789": [143, 407], "clf_select": 143, "svm_weights_select": 143, "get_support": [143, 147, 313, 572, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 1022], "plot_feature_select": [143, 148], "anova_filt": 144, "anova_svm": 144, "selectkbestselectkbest": [144, 315], "linearsvclinearsvc": [144, 266], "75788833": 144, "27161955": 144, "26113448": 144, "012": [144, 148, 171, 174], "plot_feature_selection_pipelin": [144, 148], "rfe": [145, 146, 409, 585, 588, 593, 1020, 1024, 1030, 1031, 1032, 1033, 1034, 1036], "n_features_to_select": [145, 147, 313, 409, 584, 593, 1032, 1034], "ranking_": [145, 584, 585], "656": [145, 148, 220, 225, 369], "plot_rfe_digit": [145, 148], "introduct": [146, 216, 257, 363, 374, 404, 405, 408, 581, 778, 779, 825, 829, 974, 976, 978, 980, 997, 1005, 1011, 1014, 1015], "class_sep": [146, 289, 506], "rfecv": [146, 409, 584, 588, 593, 1024, 1026, 1028, 1030, 1031, 1032, 1033, 1036], "stratifiedkfold": [146, 246, 254, 265, 269, 323, 404, 428, 558, 559, 585, 593, 650, 664, 787, 788, 790, 791, 792, 793, 795, 797, 801, 805, 807, 809, 810, 811, 812, 813, 814, 815, 817, 871, 1008, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1033], "min_features_to_select": [146, 585, 1028], "n_features_": [146, 532, 584, 585, 1033, 1035], "n_score": 146, "505": [146, 148], "plot_rfe_with_cross_valid": [146, 148], "selectfrommodel": [147, 387, 584, 593, 594, 1000, 1015, 1025, 1026, 1027, 1028, 1030, 1032, 1033, 1034, 1036], "sequentialfeatureselector": [147, 409, 584, 588, 594, 1032, 1033, 1034, 1035, 1036], "greedi": [147, 407, 409, 438, 440, 451, 550, 551, 593, 974, 994], "442": [147, 163, 371, 492, 1011], "descript": [147, 168, 307, 367, 368, 373, 374, 378, 379, 382, 387, 400, 408, 443, 453, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 498, 501, 535, 621, 667, 752, 755, 768, 978, 992, 993, 999, 1001, 1013, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "descr": [147, 367, 368, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 498, 501, 1010, 1028], "_diabetes_dataset": 147, "mass": [147, 238, 371, 437, 785, 974, 985], "blood": [147, 228, 371, 1011], "pressur": [147, 371, 1011], "six": [147, 199, 220, 305, 371, 1029], "serum": [147, 371], "bmi": [147, 186, 187, 238, 371, 986], "tc": [147, 371, 388], "cholesterol": [147, 371], "ldl": [147, 371], "lipoprotein": [147, 371], "hdl": [147, 371], "s4": [147, 186, 187, 371], "tch": [147, 371], "s5": [147, 186, 187, 371, 986], "ltg": [147, 371, 492], "triglycerid": [147, 371], "s6": [147, 186, 187, 371], "glu": [147, 371], "sugar": [147, 371], "www4": [147, 371], "ncsu": [147, 371], "boo": [147, 371], "bradlei": [147, 371, 974], "efron": [147, 371, 673, 674, 974], "trevor": [147, 186, 316, 371, 619, 647, 712, 713, 714, 968, 974, 990, 1024, 1025, 1028, 1029, 1030, 1032], "iain": [147, 371, 974], "johnston": [147, 371, 974, 1029], "annal": [147, 182, 186, 371, 407, 465, 507, 508, 509, 550, 551, 647, 974], "407": [147, 371], "499": [147, 371, 380], "web": [147, 368, 369, 371, 374, 377, 382, 400, 408, 512, 883, 978, 988, 1016, 1020], "stanford": [147, 371, 640, 673, 674, 825, 828, 829, 883, 976], "leastangle_2002": [147, 371], "pitfal": [147, 165, 166, 170, 172, 313, 363, 386, 387, 389, 404, 456, 458, 487, 644, 663, 664, 692, 743, 802, 813, 816, 851, 863, 870, 974, 1015], "e501": [147, 345], "accept": [147, 150, 234, 256, 311, 332, 345, 347, 356, 360, 361, 368, 374, 376, 383, 385, 386, 387, 388, 391, 394, 396, 400, 405, 408, 428, 432, 435, 436, 439, 452, 455, 458, 499, 500, 546, 547, 552, 553, 560, 561, 572, 573, 584, 585, 588, 619, 626, 630, 634, 670, 717, 732, 768, 785, 786, 790, 791, 832, 833, 840, 841, 854, 908, 910, 911, 914, 938, 974, 976, 978, 981, 986, 988, 993, 998, 999, 1008, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "tic": [147, 169, 270, 980], "sfm": 147, "toc": 147, "sf": [147, 237, 259, 313, 369, 409, 483, 593], "backward": [147, 234, 313, 377, 387, 409, 487, 568, 593, 605, 606, 609, 610, 611, 613, 614, 903, 906, 978, 982, 999, 1020, 1023, 1028, 1029, 1030, 1032, 1034, 1036], "tic_fwd": 147, "sfs_forward": 147, "toc_fwd": 147, "tic_bwd": 147, "sfs_backward": 147, "toc_bwd": 147, "162": [147, 371], "463": [147, 150, 216], "isn": [147, 311, 345, 347, 356, 361, 374, 382, 506, 552, 553, 585, 782, 790, 791, 863, 981, 993, 1030], "sound": [147, 356], "finish": [147, 247, 975], "expos": [147, 234, 314, 316, 361, 367, 371, 387, 391, 398, 407, 409, 410, 428, 455, 544, 545, 558, 559, 560, 561, 584, 585, 593, 602, 787, 790, 791, 801, 819, 820, 821, 822, 823, 824, 905, 946, 974, 978, 980, 1008, 1010, 1012, 1017, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "709": [147, 148, 260], "plot_select_from_model_diabet": [147, 148], "310": 148, "auto_examples_feature_select": 148, "basic": [149, 160, 163, 165, 196, 308, 337, 360, 362, 363, 374, 376, 378, 385, 387, 400, 404, 405, 407, 602, 613, 886, 898, 899, 900, 901, 967, 968, 981, 992, 997, 998, 999, 1002, 1011], "introductori": [149, 160, 165, 226, 602, 613, 1002], "gpr": [149, 159, 160, 165, 487, 601, 602, 604, 605, 606, 607, 612, 613, 614, 615, 616, 1000, 1015, 1030], "mauna": [149, 160, 165, 487, 602, 606, 613, 614, 616], "loa": [149, 160, 165, 487, 602, 606, 613, 614, 616], "co2": [149, 160, 165, 487, 602, 606, 613, 614, 616, 1027], "xor": [149, 160, 165, 338, 601, 605, 613, 974, 994, 1027], "posterior": [149, 150, 151, 160, 165, 177, 259, 405, 410, 540, 541, 543, 601, 602, 604, 605, 606, 610, 613, 614, 618, 635, 636, 699, 785, 972, 998, 1026, 1029], "iso": [149, 160, 165, 221, 601, 604, 605], "trick": [150, 233, 289, 347, 359, 362, 363, 377, 385, 401, 410, 573, 580, 634, 663, 970, 971, 982, 992, 993, 1011, 1012, 1015, 1021, 1029], "drastic": [150, 231, 267, 400, 404, 981, 991], "theorem": [150, 399, 410, 980], "period": [150, 155, 159, 378, 387, 388, 398, 410, 606, 808, 869, 1028, 1033, 1035], "reus": [150, 191, 260, 311, 347, 376, 387, 400, 401, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 625, 637, 639, 640, 643, 649, 651, 653, 657, 658, 659, 660, 667, 668, 669, 671, 847, 848, 986, 990, 1002, 1027], "training_sample_indic": 150, "training_data": 150, "training_noisy_target": 150, "newer": [150, 373, 390, 405], "expsinesquar": [150, 155, 159, 410], "emb": [150, 220, 231, 288, 367, 368, 453, 686, 975], "kernel_ridg": [150, 233, 363, 1024], "length_scal": [150, 151, 154, 155, 156, 157, 159, 410, 603, 606, 610, 612, 613, 614, 615], "tell": [150, 168, 169, 234, 259, 332, 337, 361, 369, 400, 408, 554, 570, 967, 972, 985, 1013], "1e0": [150, 233, 250, 267, 967], "kernel__length_scal": 150, "kernel__period": 150, "1e1": [150, 156, 198, 233, 332], "kernel_ridge_tun": 150, "9915849773450223": 150, "7986499491396728": 150, "607275806426108": 150, "predictions_kr": 150, "gaussianprocessregressor": [150, 155, 156, 157, 158, 159, 410, 601, 604, 605, 606, 607, 608, 612, 615, 616, 634, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "whitekernel": [150, 155, 156, 410, 602, 603, 605, 1031], "periodicity_bound": [150, 155, 159, 606], "029": [150, 986], "kernel_": [150, 151, 152, 153, 154, 155, 156, 157, 159, 601, 602], "675": [150, 202, 217], "57": [150, 168, 214, 225, 268, 298, 371, 372, 390, 392, 393, 401, 696, 771, 823, 978, 988, 1020], "noise_level": [150, 155, 156, 410, 603, 616], "182": [150, 298, 380, 407], "mean_predictions_gpr": 150, "std_predictions_gpr": 150, "return_std": [150, 155, 156, 157, 159, 177, 178, 387, 543, 558, 559, 602, 604, 605, 606, 607, 616, 618, 635, 636, 850, 1027, 1028, 1032], "capac": [150, 170], "length_scale_bound": [150, 156, 157, 159, 410, 602, 606, 610, 613, 614], "attenu": 150, "114": [150, 160, 225, 254, 275, 316, 1020], "plot_compare_gpr_krr": [150, 160], "arbitrarili": [151, 245, 250, 345, 387, 410, 423, 456, 473, 474, 475, 543, 545, 547, 549, 551, 553, 556, 559, 561, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 660, 661, 663, 664, 669, 670, 671, 712, 713, 714, 736, 775, 779, 823, 824, 833, 841, 848, 871, 891, 893, 896, 899, 901, 978, 981, 988, 994], "lml": [151, 152, 156, 410], "exhibit": [151, 203, 345, 389, 404, 405, 407, 410, 986], "steep": [151, 169, 268, 269, 400, 404, 410, 441, 447], "laplac": [151, 410, 601, 602, 825, 826, 827, 829, 980], "319": [151, 1013], "gp_fix": 151, "gp_opt": 151, "log_marginal_likelihood": [151, 152, 154, 156, 159, 410, 601, 602, 1030], "theta": [151, 152, 154, 156, 158, 159, 235, 405, 410, 514, 527, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 683, 980, 994], "landscap": [151, 410], "theta0": 151, "theta1": 151, "pcolor": 151, "xscale": [151, 156, 233, 793], "yscale": [151, 156, 198, 233, 345, 793], "plot_gpc": [151, 160], "gpc_rbf_isotrop": 152, "gpc_rbf_anisotrop": 152, "m_max": 152, "plot_gpc_iri": [152, 160], "0256": 153, "dotproduct": [153, 154, 159, 410, 602, 616], "sigma_0": [153, 154, 159, 410, 605], "constantkernel": [153, 159, 410, 602, 608, 612, 615], "lim": [153, 525], "61611719": 153, "00099547": 153, "10469096": 153, "32782448": 153, "00000000": 153, "50000000": 153, "17289014": 153, "6984743": 153, "3109306": 153, "93271427": 153, "03823144": 153, "10584743": 153, "87600388": 153, "74310541": 153, "21301203": 153, "26386883": 153, "gp": [153, 158, 410, 601, 602, 613, 1026], "cb": [153, 231, 248], "widehat": 153, "mathbf": [153, 405, 974, 978, 982, 983, 992], "leq": [153, 405, 407, 974, 978, 981, 992, 993, 994], "clim": 153, "666": [153, 832, 968], "clabel": [153, 209], "334": [153, 241], "plot_gpc_isoprob": [153, 160], "stationari": [154, 410, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616], "coincid": [154, 200, 410], "429": [154, 156, 206, 217], "convergencewarn": [154, 156, 158, 159, 206, 213, 245, 296, 297, 303, 383, 387, 785, 786, 1028, 1029, 1032], "k1__constant_valu": 154, "bound": [154, 156, 158, 165, 200, 216, 226, 242, 258, 372, 381, 400, 405, 408, 410, 411, 435, 480, 493, 503, 514, 527, 586, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 623, 626, 628, 641, 645, 649, 668, 696, 725, 785, 786, 830, 831, 867, 879, 882, 883, 884, 892, 893, 894, 897, 914, 946, 974, 977, 978, 981, 990, 992, 993, 995, 1028, 1031, 1032, 1034], "100000": [154, 233, 244, 374, 604, 605, 606, 610, 611, 613, 614, 616, 879, 971, 1011, 1013], "puor_r": [154, 338], "437": [154, 160, 346], "plot_gpc_xor": [154, 160], "rw2006": [155, 410, 601, 602], "ascent": [155, 410], "monthli": [155, 388, 410, 978], "atmospher": [155, 410], "ppm": 155, "observatori": [155, 410], "hawaii": [155, 410], "1958": [155, 405, 407, 410, 523], "air": [155, 754], "41187": 155, "flag": [155, 372, 374, 375, 377, 391, 455, 601, 602, 618, 664, 666, 718, 775, 993, 1026, 1030, 1031, 1033, 1034, 1035, 1036], "station": 155, "mlo": 155, "317": 155, "co2_data": 155, "to_datetim": 155, "timestamp": 155, "march": [155, 716, 746, 978, 1020, 1024, 1028, 1030, 1035], "dropna": 155, "nfrom": 155, "upcom": [155, 372], "to_numpi": 155, "rise": [155, 410], "irregular": [155, 400, 410, 981], "long_term_trend_kernel": 155, "decai": [155, 410, 535, 847, 848, 927, 978, 992, 1024], "seasonal_kernel": 155, "ration": [155, 614, 976], "diffus": [155, 410], "accommod": [155, 410, 1028], "rationalquadrat": [155, 159, 410, 607], "irregularities_kernel": 155, "shall": [155, 410], "phenomena": [155, 410], "noise_kernel": 155, "noise_level_bound": [155, 156, 616], "co2_kernel": 155, "subtract": [155, 168, 403, 405, 410, 434, 438, 450, 525, 635, 636, 641, 642, 645, 646, 647, 655, 656, 1027], "normalize_i": [155, 410, 602, 1034], "y_mean": [155, 156, 159, 602, 635, 636], "gaussianprocessregressorgaussianprocessregressor": 155, "futur": [155, 199, 240, 314, 317, 372, 374, 376, 378, 385, 387, 388, 394, 404, 408, 487, 525, 626, 946, 948, 978, 979, 993, 994, 1002, 1017, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "todai": [155, 385, 1013], "current_month": 155, "mean_y_pr": 155, "std_y_pr": 155, "968": [155, 167, 257], "0367": 155, "6ppm": 155, "plot_gpr_co2": [155, 160], "target_gener": 156, "add_nois": 156, "minima": [156, 186, 405, 438, 683, 975, 1012, 1028], "y_std": [156, 159, 543, 602, 635, 636, 1033], "k1__k2__length_scal": [156, 410], "noptimum": 156, "nlog": 156, "length_scale_grid": 156, "noise_level_grid": 156, "newshap": 156, "plot_gpr_noisi": [156, 160], "tikhonov": [157, 410, 663], "training_indic": 157, "n_restarts_optim": [157, 410, 601, 602], "mean_predict": 157, "std_predict": 157, "whenev": [157, 167, 356, 368, 382, 387, 390, 398, 473, 474, 475, 487, 619, 621, 969, 977, 999, 1030], "noise_std": 157, "y_train_noisi": 157, "468": [157, 160], "plot_gpr_noisy_target": [157, 160], "gene": [158, 368, 397, 442, 504, 584, 585, 837, 870], "letter": [158, 369, 371, 378, 408, 778, 779, 793, 809, 978], "among": [158, 169, 174, 198, 249, 277, 354, 362, 369, 376, 387, 388, 398, 399, 403, 438, 440, 503, 510, 782, 815, 833, 838, 840, 892, 895, 898, 899, 900, 901, 967, 970, 978, 979, 985, 988, 993, 1020, 1026, 1027, 1030], "brighter": 158, "4th": [158, 371], "6th": 158, "haussler": 158, "1999": [158, 369, 398, 400, 402, 405, 407, 428, 441, 448, 460, 465, 525, 532, 546, 547, 550, 551, 713, 884, 892, 893, 895, 896, 984, 990], "646": 158, "technic": [158, 199, 220, 315, 369, 371, 374, 387, 407, 643, 655, 676, 677, 885, 974, 975, 981], "depart": [158, 400], "california": [158, 162, 163, 301, 307, 313, 367, 371, 481, 1015], "santa": [158, 1035], "cruz": 158, "generickernelmixin": [158, 1030], "sequencekernel": 158, "baseline_similar": 158, "baseline_similarity_bound": 158, "hyperparameter_baseline_similar": 158, "_f": [158, 974], "_g": 158, "__call__": [158, 332, 387, 408, 410, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 1027], "eval_gradi": [158, 410, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616], "is_stationari": [158, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616], "clone_with_theta": [158, 410, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616], "agct": 158, "agc": 158, "aact": 158, "taa": 158, "aaa": 158, "gaaca": 158, "training_idx": 158, "cga": 158, "taac": 158, "tcg": 158, "cttt": 158, "tgct": 158, "atag": 158, "ctc": 158, "419": [158, 607], "plot_gpr_on_structured_data": [158, 160], "plot_gpr_sampl": 159, "gpr_model": 159, "y_sampl": [159, 602], "sample_i": [159, 410, 602, 1034], "single_prior": 159, "pm": [159, 169, 269, 407, 978], "dev": [159, 168, 216, 264, 269, 372, 374, 378, 380, 382, 978, 1002, 1016, 1027, 1032, 1035, 1036], "594": [159, 198], "279": [159, 974], "067": 159, "alpha_bound": [159, 614], "1e15": 159, "05e": 159, "799": [159, 346], "791": 159, "sigma_0_bound": [159, 605], "_gpr": 159, "659": 159, "lbfg": [159, 295, 376, 639, 640, 649, 650, 660, 663, 665, 671, 678, 821, 824, 847, 848, 974, 982, 1024, 1025, 1027, 1028, 1033, 1034, 1035], "statu": [159, 368, 378, 390, 487, 830, 831], "abnormal_termination_in_lnsrch": 159, "7337046907": 159, "matern": [159, 410, 1031, 1035], "609": [159, 177, 217, 346, 380], "330": [159, 160, 321], "plot_gpr_prior_posterior": [159, 160], "227": [160, 259, 400, 715], "auto_examples_gaussian_process": 160, "iterativeimput": [161, 163, 164, 165, 481, 556, 571, 619, 620, 621, 630, 636, 663, 812, 833, 851, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "robin": [162, 163, 618, 968, 1026, 1029, 1034, 1035], "kneighborsregressor": [162, 236, 291, 315, 407, 561, 832, 838, 840, 841, 981, 1020, 1022, 1024, 1030, 1032, 1033, 1034, 1035, 1036], "mimic": [162, 198, 345, 805], "missforest": [162, 968], "popular": [162, 223, 369, 372, 379, 382, 385, 387, 399, 406, 407, 408, 410, 443, 453, 968, 970, 974, 976, 983, 992, 999, 1008, 1013], "enable_iterative_imput": [162, 163, 378, 618, 968, 1029], "x_full": [162, 163, 301], "y_full": [162, 163, 301], "2k": 162, "br_estim": 162, "score_full_data": 162, "neg_mean_squared_error": [162, 163, 200, 233, 273, 813, 978, 986, 1026], "x_miss": [162, 163], "y_miss": [162, 163], "missing_sampl": [162, 163], "missing_featur": [162, 163], "score_simple_imput": 162, "missing_valu": [162, 163, 239, 387, 618, 619, 620, 621, 759, 968, 1028, 1029], "score_iterative_imput": 162, "stricter": 162, "impute_estim": 162, "__class__": [162, 198, 200, 234, 261, 303, 345, 346, 347, 381], "xerr": [162, 163, 346], "572": [162, 164, 272, 275], "plot_iterative_imputer_variants_comparison": [162, 164], "ness": [163, 216], "auxiliari": [163, 372, 1002, 1035], "district": [163, 369], "neither": [163, 168, 311, 345, 356, 385, 428, 585, 619, 914, 981, 994], "feel": [163, 301, 373, 374, 382, 400, 437, 994], "x_diabet": [163, 1008], "y_diabet": [163, 1008], "x_california": 163, "y_california": 163, "add_missing_valu": 163, "missing_r": 163, "n_missing_sampl": 163, "x_miss_california": 163, "y_miss_california": 163, "x_miss_diabet": 163, "y_miss_diabet": 163, "knnimput": [163, 311, 618, 621, 968, 1030, 1031, 1034, 1035, 1036], "get_scores_for_imput": 163, "impute_scor": 163, "x_label": 163, "mses_california": 163, "stds_california": 163, "mses_diabet": 163, "stds_diabet": 163, "get_full_scor": 163, "full_scor": 163, "get_impute_zero_scor": 163, "fill_valu": [163, 229, 239, 312, 618, 621, 988, 1028, 1036], "zero_impute_scor": 163, "unweight": [163, 211, 454, 638, 644, 669, 698, 704, 719, 720, 728, 773, 774, 777, 778, 825, 826, 827, 828, 829, 968], "get_impute_knn_scor": 163, "knn_impute_scor": 163, "get_impute_mean": 163, "mean_impute_scor": 163, "obvious": [163, 360, 1013], "get_impute_it": 163, "n_nearest_featur": [163, 618], "sample_posterior": [163, 618, 968], "iterative_impute_scor": 163, "n_bar": 163, "xval": 163, "invert_yaxi": [163, 347], "306": [163, 164, 618], "plot_missing_valu": [163, 164], "879": 164, "auto_examples_imput": 164, "prune": [165, 349, 355, 409, 491, 548, 549, 550, 551, 555, 556, 584, 635, 816, 898, 899, 900, 901, 981, 1000, 1015, 1020, 1023, 1030, 1031], "elast": [165, 176, 182, 189, 209, 217, 272, 399, 462, 463, 469, 492, 515, 637, 638, 643, 648, 649, 650, 651, 652, 653, 654, 659, 667, 669, 672, 675, 967, 978, 992, 1000, 1015, 1020, 1025, 1029, 1030], "gram": [165, 176, 217, 376, 405, 408, 480, 515, 539, 579, 580, 581, 582, 637, 638, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 655, 656, 672, 673, 674, 675, 676, 677, 757, 765, 767, 967, 988, 1013, 1020, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1031, 1033, 1034], "huberregressor": [165, 176, 202, 204, 217, 515, 661, 662, 663, 669, 670, 974, 1026, 1027, 1028, 1029], "aic": [165, 176, 186, 217, 249, 492, 642, 644, 645, 646, 647, 786, 851, 870, 967, 974, 1020, 1027, 1033, 1034], "bic": [165, 176, 186, 217, 409, 492, 642, 644, 645, 646, 647, 786, 851, 870, 967, 974, 977, 1020, 1027, 1033, 1034], "mnist": [165, 176, 206, 217, 279, 294, 299, 487, 562, 649, 816, 847, 870, 913, 974, 982], "20newgroup": [165, 176, 217, 480, 562, 649, 816, 974], "ordinari": [165, 176, 177, 182, 200, 201, 203, 215, 217, 314, 626, 637, 643, 645, 646, 647, 648, 663, 669, 673, 674, 678, 992, 1000, 1015], "spline": [165, 176, 217, 507, 508, 509, 663, 851, 865, 869, 998, 1033], "ransac": [165, 176, 204, 215, 217, 515, 640, 648, 662, 669, 670], "convex": [165, 176, 217, 219, 341, 346, 400, 402, 405, 413, 437, 443, 453, 464, 466, 467, 470, 471, 472, 649, 667, 683, 974, 975, 981, 982, 992, 1033], "theil": [165, 176, 204, 217, 640, 648, 662, 669, 670], "sen": [165, 176, 204, 217, 640, 648, 662, 669, 670], "tweedi": [165, 176, 217, 455, 487, 543, 639, 660, 671, 697, 714, 735, 737, 739, 740, 742, 816, 851, 854, 855, 863, 870, 974, 1030, 1031, 1033], "insur": [165, 176, 198, 217, 455, 487, 543, 639, 660, 671, 697, 735, 740, 742, 816, 851, 854, 855, 863, 870, 974], "claim": [165, 176, 217, 374, 455, 487, 543, 639, 660, 671, 697, 735, 740, 742, 816, 851, 854, 855, 863, 870, 974], "failur": [165, 166, 168, 172, 374, 382, 648, 775, 816, 910, 911, 1001, 1002, 1033, 1034], "infer": [165, 166, 168, 172, 245, 249, 250, 259, 351, 368, 376, 385, 399, 404, 405, 487, 499, 500, 506, 525, 527, 529, 531, 538, 540, 541, 544, 550, 551, 623, 626, 648, 700, 713, 731, 775, 785, 786, 793, 809, 816, 826, 864, 871, 885, 886, 898, 899, 900, 901, 941, 968, 974, 978, 983, 988, 991, 994, 998, 999, 1007, 1021, 1025, 1026, 1031, 1034, 1037], "causal": [165, 166, 172, 648, 775, 816], "multicollinear": [165, 166, 172, 403, 491, 555, 625, 646, 816, 974, 986], "isomap": [165, 218, 221, 225, 311, 315, 407, 493, 535, 540, 557, 680, 681, 682, 683, 839, 851, 860, 883, 981, 1014, 1015, 1028, 1030, 1033, 1034, 1035, 1036], "And": [165, 218, 225, 234, 259, 345, 382, 394, 400, 404, 408, 521, 579, 580, 582, 683, 684, 974, 978, 996, 1027], "hole": [165, 218, 225, 521, 683, 684, 1034], "perplex": [165, 218, 219, 223, 225, 279, 505, 516, 527, 683, 975, 1025, 1027, 1034], "metadata": [165, 226, 242, 346, 363, 368, 369, 394, 414, 417, 420, 423, 424, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 479, 480, 487, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 934, 935, 936, 937, 938, 962, 978, 998, 999, 1004, 1015, 1036], "rout": [165, 226, 242, 363, 414, 417, 420, 423, 424, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 935, 936, 937, 938, 962, 1015, 1034, 1036], "johnson": [165, 226, 242, 301, 305, 366, 399, 480, 493, 866, 878, 882, 883, 884, 988, 995, 1015, 1028, 1034, 1036], "lindenstrauss": [165, 226, 242, 366, 399, 480, 493, 882, 883, 884, 995, 1015], "halv": [165, 252, 275, 395, 506, 555, 570, 787, 790, 791, 895, 1015, 1032], "custom": [165, 238, 252, 260, 275, 281, 286, 311, 327, 332, 343, 345, 347, 366, 369, 372, 376, 381, 382, 383, 385, 386, 387, 399, 400, 401, 404, 410, 459, 480, 484, 485, 493, 495, 529, 531, 538, 540, 548, 549, 555, 556, 562, 564, 593, 622, 681, 704, 787, 816, 854, 888, 895, 962, 967, 972, 978, 981, 993, 998, 999, 1002, 1013, 1015, 1020, 1024, 1025, 1027, 1028, 1030, 1031, 1032, 1035, 1036, 1037], "det": [165, 252, 275, 374, 402, 506, 555, 689, 693, 717, 779, 816, 851, 870, 890, 925, 1032], "tsne": [165, 219, 220, 221, 223, 224, 280, 293, 315, 387, 414, 424, 487, 679, 680, 681, 834, 838, 851, 952, 975, 981, 1023, 1025, 1026, 1027, 1028, 1030, 1032, 1033, 1034, 1035, 1036], "novelti": [165, 227, 280, 286, 293, 331, 836, 1000, 1014, 1015, 1020, 1028], "lof": [165, 227, 237, 280, 293, 554, 836, 894, 984], "boltzmann": [165, 294, 299, 493, 649, 704, 816, 846, 847, 848, 850, 876, 1014, 1015, 1022], "mlp": [165, 169, 238, 294, 296, 299, 487, 562, 816, 847, 848, 982], "semi_supervis": [165, 313, 315, 319, 320, 321, 322, 323, 324, 325, 363, 979, 991, 1021, 1026, 1027, 1034, 1035], "tie": [165, 327, 343, 385, 407, 503, 818, 895, 979, 993, 994, 1021, 1036], "unbalanc": [165, 262, 327, 343, 404, 503, 622, 895, 915, 916, 967, 992], "featurehash": [165, 344, 346, 348, 362, 369, 408, 455, 479, 572, 579, 580, 581, 582, 863, 1021, 1026, 1027, 1028, 1034, 1035], "auto_examples_python": 165, "auto_examples_jupyt": 165, "unless": [167, 234, 245, 250, 374, 376, 377, 385, 387, 398, 400, 403, 411, 428, 435, 437, 439, 441, 443, 448, 449, 452, 455, 458, 463, 480, 487, 499, 500, 522, 526, 527, 528, 530, 533, 534, 536, 537, 538, 539, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 585, 593, 601, 602, 623, 625, 630, 637, 638, 642, 643, 644, 646, 648, 649, 650, 652, 654, 656, 657, 659, 667, 670, 679, 680, 681, 682, 683, 684, 685, 700, 705, 764, 768, 771, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 832, 833, 836, 838, 840, 841, 843, 844, 847, 848, 849, 852, 875, 876, 878, 879, 880, 881, 885, 886, 898, 899, 900, 901, 906, 910, 911, 927, 946, 974, 977, 979, 1020, 1022, 1026, 1028, 1031, 1032], "willing": [167, 256], "econom": [167, 168, 259], "educ": [167, 168, 374, 707, 979], "earn": [167, 168, 388], "polici": [167, 168, 198, 216, 387, 526, 532, 974, 1035], "maker": [167, 168], "ovb": [167, 168], "parent_hourly_wag": 167, "college_degre": 167, "true_coef": [167, 182, 193], "hourly_wag": 167, "stori": [167, 259, 369, 977], "pairplot": [167, 168], "diag_kind": [167, 168], "kde": [167, 168, 283, 284, 292, 406, 835], "features_nam": [167, 1027], "regressor_with_": 167, "y_pred_with_": 167, "r2_with_abl": 167, "975": [167, 993], "model_coef": 167, "intellectu": 167, "proxi": [167, 168, 405, 846, 1008, 1025], "inadvert": [167, 387], "iq": 167, "regressor_without_": 167, "y_pred_without_": 167, "r2_without_": 167, "brought": [167, 544, 545, 548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901], "unobserv": [167, 168, 405], "confound": [167, 168], "conduct": [167, 259, 410, 998, 1034], "prohibit": [167, 404, 407, 618, 983, 991, 1027], "uneth": 167, "iv": [167, 978], "405": [167, 172, 346], "plot_causal_interpret": [167, 172], "hint": [168, 360, 375, 379, 394, 439, 978, 1011], "aris": [168, 262, 340, 361, 379, 400, 706, 974, 975, 1032], "survei": [168, 403], "1985": [168, 400, 696, 706, 776], "534": 168, "race": [168, 369, 1023], "occup": [168, 301], "sector": 168, "marr": 168, "not_memb": 168, "marri": 168, "freq": [168, 182, 347], "378": [168, 346, 407, 1013, 1020], "289": 168, "440": 168, "411": [168, 402, 412, 464, 524], "350": 168, "018727": 168, "822097": 168, "833333": 168, "615373": 168, "379710": 168, "726573": 168, "thereaft": [168, 177], "hispan": 168, "manufactur": 168, "unmarri": 168, "dollar": [168, 369], "exploratori": [168, 1002], "emul": [168, 382], "train_dataset": [168, 368], "rangeindex": 168, "533": [168, 217], "normalis": [168, 602, 1013], "numerical_column": [168, 170, 458], "if_binari": [168, 241, 863, 988, 1031], "prepend": [168, 1020], "exp10": 168, "ufunc": 168, "passthroughpassthroughtransformedtargetregressor": 168, "transformedtargetregressortransformedtargetregressor": 168, "ridgeridg": 168, "mae_train": 168, "mae_test": 168, "learnt": [168, 356, 387, 404, 871, 967], "obviou": [168, 356, 360, 397, 405], "regressor_": [168, 456, 584, 585, 588], "race_hispan": 168, "013519": 168, "race_oth": 168, "009075": 168, "race_whit": 168, "022594": 168, "occupation_cler": 168, "000045": 168, "occupation_manag": 168, "090528": 168, "occupation_oth": 168, "025102": 168, "occupation_profession": 168, "071964": 168, "occupation_sal": 168, "046636": 168, "occupation_servic": 168, "091053": 168, "sector_construct": 168, "000198": 168, "sector_manufactur": 168, "031255": 168, "sector_oth": 168, "031025": 168, "marr_unmarri": 168, "032405": 168, "union_not_memb": 168, "117154": 168, "sex_mal": 168, "090808": 168, "south_y": 168, "033823": 168, "054699": 168, "035005": 168, "030867": 168, "adimension": 168, "Their": [168, 369, 371, 388, 400, 635, 1020], "visibl": [168, 169, 200, 342, 368, 374, 400, 846, 983, 1025, 1035], "gaug": 168, "decad": [168, 999], "x_train_preprocess": 168, "multipli": [168, 202, 216, 259, 360, 383, 387, 405, 407, 408, 413, 455, 466, 506, 529, 531, 532, 538, 548, 552, 555, 637, 639, 643, 645, 649, 650, 651, 653, 659, 660, 661, 663, 667, 668, 669, 671, 677, 678, 680, 684, 754, 892, 893, 894, 895, 896, 898, 900, 916, 954, 955, 956, 967, 974, 978, 992, 1031], "coef_i": 168, "std_i": 168, "emphas": [168, 342, 380, 405, 978], "perturb": [168, 215, 298, 405, 407, 977], "caution": [168, 378, 431, 445, 1028], "repeatedkfold": [168, 404, 792, 803, 1027], "cv_model": 168, "return_estim": [168, 404, 813, 1028], "train_idx": [168, 387], "stripplot": 168, "whi": [168, 170], "collinear": [168, 171, 203, 216, 407, 558, 639, 660, 671, 863, 974, 1020], "teas": 168, "apart": [168, 314, 332, 385, 387, 401, 403, 409, 715, 993, 1002, 1028], "vice": [168, 256, 345, 400, 410, 433, 598, 599, 819, 1024], "versa": [168, 256, 345, 400, 410, 433, 598, 599, 819, 1024], "column_to_drop": 168, "said": [168, 227, 260, 369, 374, 780, 976, 984, 1004, 1011], "unchang": [168, 216, 266, 407, 424, 428, 433, 434, 435, 436, 437, 438, 440, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 683, 753, 787, 788, 789, 790, 791, 794, 796, 801, 805, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 837, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 879, 882, 883, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 981, 1004, 1028, 1034, 1036], "neglig": [168, 981, 1023], "littl": [168, 169, 170, 171, 227, 369, 408, 453, 635, 787, 801, 927, 968, 975, 977, 993, 994, 1011, 1021, 1032], "ridgecvridgecv": 168, "alon": [168, 202, 265, 332, 387, 394, 398, 639, 660, 671, 732, 1027, 1029], "suppress": [168, 311, 360, 382, 683, 981, 1027], "themselv": [168, 301, 370, 382, 387, 391, 397, 400, 407, 408, 410, 437, 606, 780, 994, 1013, 1030], "bring": [168, 301, 405, 667, 669, 975, 1002], "entic": 168, "pursu": 168, "tempt": 168, "deflat": [168, 403, 412, 524], "presum": [168, 277, 400, 408, 825], "respond": [168, 374, 400], "plot_linear_model_coefficient_interpret": [168, 172], "complement": [169, 269, 345, 623, 624, 789, 804, 807, 816, 825, 826, 827, 828, 829, 985, 1000, 1015, 1028], "molnar": [169, 985], "christoph": [169, 405, 410, 523, 601, 602, 605, 610, 613, 785, 974, 979, 1021, 1025, 1028, 1031, 1032, 1033, 1034, 1035], "goldstein": [169, 985], "kapeln": [169, 985], "bleich": [169, 985], "pitkin": [169, 985], "peek": [169, 374, 985], "settingwithcopywarn": 169, "2284": 169, "904": [169, 257, 401], "287": [169, 990], "1747": 169, "1729": 169, "mask_train": [169, 216], "accordingli": [169, 374, 378, 379, 1027, 1028, 1035], "8640": 169, "115": [169, 986], "nomin": [169, 368, 387, 388, 407, 408, 572, 573, 707, 988, 999], "numerical_featur": [169, 307], "xtick_start": 169, "xtick_period": 169, "average_bike_rent": 169, "numeric_onli": 169, "decor": [169, 311, 374, 375, 376, 383, 793, 809, 917, 921, 922, 939, 945, 1030, 1033, 1036], "strike": [169, 202], "mlp_preprocessor": 169, "quantiletransformerquantiletransform": 169, "catindex": 169, "hgbdt_preprocessor": 169, "sparse_threshold": [169, 455, 458, 1028], "passthroughpassthrough": 169, "mlp_model": 169, "hidden_layer_s": [169, 238, 295, 297, 847, 848, 982], "learning_rate_init": [169, 296, 297, 847, 848], "748": [169, 345, 380], "forget": [169, 356, 361, 368, 378, 385, 405, 975, 1001], "poor": [169, 174, 265, 274, 323, 398, 404, 405, 681, 685, 728, 827, 830, 831, 972, 973, 975, 980, 999, 1004, 1027, 1028, 1029, 1031, 1033], "grid_resolut": [169, 313, 330, 622, 623, 624], "features_info": 169, "hgbdt_model": 169, "cheaper": [169, 400, 410, 664, 970, 974], "temperatur": [169, 408, 985], "wind": [169, 979], "meaningless": [169, 408, 892, 895, 1023], "450": 169, "celsiu": [169, 985], "interaction_cst": [169, 316, 407, 552, 553, 1035], "hgbdt_model_without_interact": 169, "histgradientboostingregressor__interaction_cst": 169, "38": [169, 189, 197, 202, 253, 268, 284, 317, 407, 623, 720, 871, 978, 988, 1020, 1021, 1022], "heatmap": [169, 171, 177, 182, 270, 316, 332, 623, 985], "302": [169, 259, 618], "slope": [169, 196, 200, 215, 400, 713, 738, 976, 978], "dry": 169, "wetter": 169, "spike": 169, "degrad": [169, 227, 301, 346, 406], "somehow": 169, "forbidden": [169, 407], "noisili": 169, "339": 169, "partial_depend": [169, 623, 985, 1021, 1029, 1030, 1031, 1032, 1035, 1036], "grid_valu": [169, 624, 1036], "add_ax": [169, 223, 270], "surf": 169, "rstride": 169, "cstride": 169, "bupu": 169, "nthe": [169, 257, 354], "pretti": [169, 223, 257, 345, 360, 374, 385, 847, 848, 982, 1029], "view_init": [169, 219, 221, 223], "clb": 169, "ndepend": 169, "016": [169, 172], "plot_partial_depend": [169, 172, 311, 312, 313, 1025, 1029, 1030, 1031, 1032, 1033, 1034], "breiman": [170, 404, 407, 507, 508, 509, 546, 547, 555, 556, 625, 898, 899, 986, 994], "random_num": 170, "random_cat": 170, "sibsp": [170, 316], "parch": [170, 316], "categorical_encod": 170, "numerical_pip": 170, "memor": 170, "814": [170, 1011], "mdi_import": 170, "sorted_importances_idx": 170, "retri": [170, 487, 1028, 1034], "classifier__min_samples_leaf": 170, "anymor": [170, 198, 261, 311, 312, 332, 356, 378, 401, 661, 1026, 1029, 1032, 1033, 1034, 1036], "810": 170, "832": [170, 407, 546, 547], "train_result": 170, "test_result": 170, "train_import": 170, "test_import": 170, "051": [170, 172, 463], "plot_permutation_import": [170, 172], "wisconsin": [171, 367, 491, 1015, 1025], "spearman": [171, 626, 627, 969], "squareform": 171, "spearmanr": 171, "load_breast_canc": [171, 323, 350, 379, 583, 586, 587, 589, 665, 666, 778, 978, 1025, 1026, 1031], "contradict": [171, 999], "perm_sorted_idx": 171, "tree_importance_sorted_idx": 171, "tree_indic": 171, "fill_diagon": [171, 222], "distance_matrix": 171, "dist_linkag": 171, "dendro": 171, "leaf_rot": 171, "dendro_idx": 171, "ivl": 171, "cluster_id": [171, 346], "fcluster": 171, "cluster_id_to_feature_id": 171, "selected_featur": 171, "x_train_sel": 171, "x_test_sel": 171, "clf_sel": 171, "660": [171, 172], "plot_permutation_importance_multicollinear": [171, 172], "729": 172, "auto_examples_inspect": 172, "polynomialcountsketch": [174, 630, 632, 970, 1032, 1034], "covtyp": 174, "tensor": [174, 366, 396, 405, 529, 531, 538, 630, 631, 632, 1015, 1032], "sketch": [174, 362, 366, 383, 399, 630, 631, 632, 943, 1015, 1032], "daniel": [174, 316, 360, 871, 988, 1002, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1030, 1032, 1034], "lopez": 174, "sanchez": [174, 1028, 1029], "lope": 174, "usal": 174, "581": [174, 233, 242], "54": [174, 182, 198, 201, 369, 371, 400, 482, 1021, 1022], "cartograph": 174, "remot": [174, 321, 374, 377], "fetch_covtyp": [174, 237, 313, 369, 1029, 1032, 1034], "5_000": 174, "mm": 174, "lsvm": 174, "lsvm_time": 174, "lsvm_score": 174, "condens": [174, 437], "compact": [174, 301, 360, 371, 830, 831, 994, 1022], "ps_lsvm_time": 174, "ps_lsvm_score": 174, "ksvm": 174, "ksvm_time": 174, "ksvm_score": 174, "pham": [174, 970, 1027], "ninh": 174, "rasmu": [174, 1027], "pagh": [174, 970], "kdd": [174, 369, 398, 428, 990], "doi": [174, 198, 216, 374, 400, 667], "1145": [174, 400, 667], "2487575": 174, "2487591": 174, "csie": [174, 368, 478, 499, 500, 649], "ntu": [174, 368, 478, 499, 500, 649], "tw": [174, 368, 478, 499, 500, 649, 993], "cjlin": [174, 368, 478, 499, 500, 649, 1023], "libsvmtool": [174, 368, 478, 499, 500], "993": [174, 175, 267], "plot_scalable_poly_kernel": [174, 175], "auto_examples_kernel_approxim": 175, "ard": [177, 635, 636], "ol": [177, 188, 193, 195, 196, 204, 215, 314, 647, 974], "true_weight": 177, "ardregress": [177, 182, 636, 974, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1036], "olr": 177, "brr": 177, "_bay": 177, "renam": [177, 249, 260, 374, 378, 400, 432, 436, 438, 450, 462, 463, 469, 527, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 863, 1020, 1021, 1022, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "symlognorm": [177, 182], "linthresh": [177, 182], "10e": [177, 182], "cbar_kw": [177, 182], "seismic_r": [177, 182], "stabilis": 177, "retain": [177, 387, 400, 403, 404, 408, 428, 434, 435, 438, 440, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 485, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 686, 687, 787, 788, 789, 790, 791, 794, 796, 801, 805, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 863, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 967, 991, 1020], "ard_scor": 177, "scores_": [177, 178, 583, 586, 587, 589, 590, 591, 635, 636, 650, 1020, 1030], "brr_score": 177, "cutoff": [177, 932, 988, 1029], "full_data": 177, "input_featur": [177, 376, 387, 416, 421, 433, 434, 436, 438, 440, 455, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 557, 558, 559, 560, 561, 572, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 679, 680, 683, 834, 839, 842, 846, 849, 850, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 1036], "x_plot": [177, 199, 204, 233, 262, 284, 306], "y_plot": [177, 199, 204, 262], "ard_poli": 177, "brr_poli": 177, "y_ard": 177, "y_ard_std": 177, "y_brr": 177, "y_brr_std": 177, "queri": [177, 292, 360, 378, 406, 411, 435, 437, 441, 448, 543, 601, 602, 619, 635, 636, 716, 746, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 978, 981, 994, 998, 1022, 1024, 1025, 1028], "lambda_init": [177, 178, 636, 974, 1030], "intrins": [177, 387, 405, 407, 981, 986, 992, 1032], "plot_ard": [177, 217, 635], "alpha_init": [178, 636, 974, 1030], "yoshihiro": [178, 1030], "uchida": [178, 1030], "nimbus1after2a1sun7show": 178, "1234": [178, 247, 262, 374], "n_order": 178, "vander": 178, "ymean": 178, "ystd": 178, "pink": 178, "_init": 178, "lambda_": [178, 635, 636, 866, 974, 1027], "232": [178, 217, 353, 355, 978], "plot_bayesian_ridge_curvefit": [178, 217], "normalized_weight": 179, "x_offset": 179, "x_center": 179, "x_scale": [179, 860, 876, 988], "uncent": 179, "incorrectli": [179, 407, 408, 544, 550, 552, 724, 730, 978, 1021, 1026, 1028, 1029, 1031, 1036], "lm": 179, "98809919e": 179, "48938813e": 179, "03237920e": 179, "25349312e": 179, "53959628e": 179, "67451144e": 179, "00768662e": 179, "19112072e": 179, "07963978e": 179, "47987268e": 179, "76195467e": 179, "00393284e": 179, "07582983e": 179, "66670169e": 179, "65799352e": 179, "99891212e": 179, "58195950e": 179, "58667835e": 179, "98350372e": 179, "60836363e": 179, "00911944e": 179, "elasticnetelasticnet": 179, "889": [179, 217, 257, 428], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [179, 217], "huber": [180, 208, 399, 407, 551, 640, 667, 669, 992, 1020, 1022, 1023, 1032], "mks542": 180, "x_outlier": [180, 212, 285, 286, 331], "y_outlier": 180, "epsilon_valu": 180, "intercept_": [180, 188, 190, 207, 235, 330, 337, 341, 376, 387, 473, 474, 475, 540, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 890, 891, 892, 893, 894, 895, 896, 972, 974, 992, 993, 1020, 1027, 1032, 1034], "coef_ridg": 180, "113": [180, 217, 380, 1023], "plot_huber_vs_ridg": [180, 217], "logreg": [181, 824], "plot_method": [181, 282, 287, 328, 330, 333, 334, 622], "054": [181, 217], "plot_iris_logist": [181, 217], "underdetermin": 182, "time_step": [182, 848], "anti": [182, 356, 597, 825, 980], "9502547": 182, "8059798": 182, "63394388": 182, "70359377": 182, "62241605": 182, "84077985": 182, "30506066": 182, "63327171": 182, "74495357": 182, "02456369": 182, "random_sampl": [182, 830, 831, 835], "sensor": 182, "monitor": [182, 206, 377, 387, 544, 545, 550, 551, 552, 553, 982, 1023, 1028, 1030, 1032], "superposit": 182, "tempor": [182, 998, 999], "y_pred_lasso": 182, "r2_score_lasso": 182, "480": [182, 287, 293], "y_pred_ard": 182, "r2_score_ard": 182, "094": [182, 463], "542": [182, 371], "elasticnetcv": [182, 387, 637, 643, 651, 652, 653, 654, 672, 974, 1020, 1023, 1031, 1033, 1034], "enet": [182, 272], "y_pred_enet": 182, "r2_score_enet": 182, "nlasso": 182, "meinshausen": 182, "yu": [182, 400, 443, 453, 649, 974, 982, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "246": [182, 986, 1020], "270": [182, 321], "477": [182, 217], "plot_lasso_and_elasticnet": [182, 217], "penalis": [183, 196, 213, 687], "enet_path": [183, 387, 638, 1022, 1024, 1033], "lasso_path": [183, 642, 643, 644, 645, 646, 647, 654, 673, 674, 974, 1020, 1022, 1024, 1033], "alphas_lasso": 183, "coefs_lasso": 183, "alphas_positive_lasso": 183, "coefs_positive_lasso": 183, "alphas_enet": 183, "coefs_enet": 183, "alphas_positive_enet": 183, "coefs_positive_enet": 183, "neg_log_alphas_lasso": 183, "neg_log_alphas_enet": 183, "coef_l": 183, "neg_log_alphas_positive_lasso": 183, "coef_pl": 183, "neg_log_alphas_positive_enet": 183, "coef_p": 183, "plot_lasso_coordinate_descent_path": [183, 217, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675], "sai": [184, 227, 340, 345, 346, 374, 398, 400, 401, 405, 407, 408, 437, 438, 491, 495, 501, 668, 967, 984, 991, 1002, 1010, 1011, 1013], "x_sp": 184, "sparse_lasso": 184, "dense_lasso": 184, "coeff_diff": 184, "2e": [184, 273], "103": [184, 277, 279, 369, 407, 488, 546, 547, 1020], "034": [184, 462], "01e": 184, "xs_sp": 184, "tocsc": 184, "nnz": [184, 346, 369], "847": 184, "65e": 184, "plot_lasso_dense_vs_sparse_data": [184, 217], "lars_path": [185, 383, 522, 528, 530, 533, 534, 536, 537, 539, 641, 642, 643, 644, 645, 646, 647, 654, 655, 656, 674, 675, 676, 677, 974, 1020, 1022, 1025, 1029, 1031], "plot_lasso_lar": [185, 217], "zht2007": 186, "lassolars": [186, 187, 409, 642, 645, 646, 974, 1020, 1027, 1029, 1033, 1034], "2173": [186, 647, 974], "2192": [186, 647, 974], "038076": [186, 187], "050680": [186, 187], "061696": [186, 187], "021872": [186, 187], "044223": [186, 187], "034821": [186, 187], "043401": [186, 187], "002592": [186, 187], "019907": [186, 187], "017646": [186, 187], "001882": [186, 187], "044642": [186, 187], "051474": [186, 187], "026328": [186, 187], "008449": [186, 187], "019163": [186, 187], "074412": [186, 187], "039493": [186, 187], "068332": [186, 187], "092204": [186, 187], "085299": [186, 187], "044451": [186, 187], "005670": [186, 187], "045599": [186, 187], "034194": [186, 187], "032356": [186, 187], "002861": [186, 187], "025930": [186, 187], "089063": [186, 187], "011595": [186, 187], "036656": [186, 187], "012191": [186, 187], "024991": [186, 187], "036038": [186, 187], "034309": [186, 187], "022688": [186, 187], "009362": [186, 187], "005383": [186, 187], "036385": [186, 187], "003935": [186, 187], "015596": [186, 187], "008142": [186, 187], "031988": [186, 187], "046641": [186, 187], "akaik": [186, 187, 249, 647, 786, 967, 974], "lasso_lars_": [186, 187], "zou_et_al_criterion_resc": 186, "noise_vari": [186, 523, 647, 974, 1034], "aic_criterion": 186, "criterion_": [186, 187, 647], "index_alpha_path_a": 186, "alphas_": [186, 187, 638, 641, 642, 644, 645, 646, 647, 652, 654, 673, 674, 1020, 1023, 1033], "lassolarsic__criterion": [186, 187], "bic_criterion": 186, "index_alpha_path_b": 186, "105": [186, 191, 217, 305], "plot_lasso_lars_": [186, 217], "n_random_featur": 187, "x_random": 187, "random_": 187, "02d": 187, "random_02": 187, "random_05": 187, "random_08": 187, "random_11": 187, "647689": 187, "234137": 187, "469474": 187, "465730": 187, "012831": 187, "412304": 187, "067528": 187, "110923": 187, "601707": 187, "057711": 187, "208864": 187, "196861": 187, "478522": 187, "057122": 187, "324084": 187, "611676": 187, "331263": 187, "185659": 187, "812526": 187, "003533": 187, "alpha_a": 187, "alpha_b": 187, "160030": 187, "5244": 187, "764779": 187, "300343": 187, "5208": 187, "250639": 187, "5212": 187, "341949": 187, "542052": 187, "4928": 187, "018900": 187, "4936": 187, "201520": 187, "034077": 187, "4869": 187, "678359": 187, "4881": [187, 1025], "952289": 187, "189631": 187, "4815": 187, "437362": 187, "4831": [187, 646], "802601": 187, "329616": 187, "4810": 187, "423641": 187, "4830": 187, "880191": 187, "306012": 187, "4803": 187, "573491": 187, "4828": 187, "121351": 187, "124225": 187, "4804": 187, "126502": 187, "4832": 187, "765671": 187, "820705": 187, "621645": 187, "4836": 187, "352124": 187, "750389": 187, "4805": 187, "012521": 187, "4841": 187, "834310": 187, "570655": 187, "290075": 187, "4846": 187, "203174": 187, "550213": 187, "4807": 187, "075887": 187, "4852": 187, "080295": 187, "358295": 187, "4806": 187, "878051": 187, "4855": 187, "973770": 187, "259297": 187, "706026": 187, "4860": 187, "893055": 187, "237703": 187, "4809": [187, 262], "440409": 187, "4866": 187, "718747": 187, "850031": 187, "989341": 187, "4867": 187, "358990": 187, "384338": 187, "4801": 187, "702266": 187, "163224": 187, "296575": 187, "4802": 187, "594754": 187, "4872": 187, "147022": 187, "031555": 187, "236720": 187, "4874": 187, "880298": 187, "618263": 187, "4798": 187, "484109": 187, "4876": 187, "218997": 187, "526599": 187, "4799": 187, "543841": 187, "370039": 187, "586798": 187, "4794": 187, "238744": 187, "4880": 187, "156252": 187, "445978": 187, "4795": 187, "589715": 187, "4885": 187, "598533": 187, "259031": 187, "4796": 187, "966981": 187, "4891": 187, "067109": 187, "032179": 187, "662409": 187, "4894": 187, "853846": 187, "019069": 187, "652739": 187, "4888": 187, "752867": 187, "626286": 187, "817724": 187, "set_xscal": [187, 203, 793], "optimist": [187, 264, 345, 356, 698, 974, 978], "badli": [187, 198, 345, 362, 870, 974, 988], "lassolarscv": [187, 409, 643, 644, 645, 647, 654, 656, 673, 674, 675, 974, 1020, 1027, 1033], "3800": 187, "mse_path_": [187, 638, 642, 644, 646, 652, 654], "cv_alphas_": [187, 642, 646, 1032], "kink": 187, "heavili": [187, 360, 361, 374, 382, 640, 646, 995], "efficaci": 187, "937": [187, 217], "plot_lasso_model_select": [187, 217, 638, 644], "093": [188, 217, 462, 1025], "plot_logist": [188, 217], "axes_row": 189, "clf_l1_lr": 189, "clf_l2_lr": 189, "clf_en_lr": 189, "coef_l1_lr": 189, "coef_l2_lr": 189, "coef_en_lr": 189, "sparsity_l1_lr": 189, "sparsity_l2_lr": 189, "sparsity_en_lr": 189, "nl1_ratio": 189, "516": [189, 217], "plot_logistic_l1_l2_spars": [189, 217], "995": 190, "plot_logistic_multinomi": [190, 217], "dupr": [190, 206, 279, 281, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "m4x": [190, 214], "sag": [190, 205, 649, 650, 663, 665, 678, 974, 992, 998, 1025, 1026, 1027, 1029, 1030], "bry": [190, 207], "classes_": [190, 207, 228, 234, 268, 320, 321, 374, 376, 387, 428, 429, 540, 541, 542, 544, 546, 548, 550, 552, 555, 558, 560, 584, 585, 601, 649, 650, 657, 659, 665, 666, 667, 688, 691, 693, 778, 787, 790, 791, 801, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 832, 837, 840, 847, 850, 857, 858, 861, 885, 886, 887, 890, 892, 895, 898, 900, 903, 978, 989, 992, 1021, 1024, 1025, 1027, 1030, 1032], "plot_hyperplan": [190, 207, 235], "198": [190, 217, 1020], "looser": 191, "liblinear": [191, 330, 380, 649, 650, 778, 890, 891, 892, 895, 896, 978, 993, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1036], "l1_min_c": [191, 974, 993, 1020], "intercept_sc": [191, 649, 650, 890, 891, 897, 974], "coefs_": [191, 297, 847, 848, 982, 1025], "plot_logistic_path": [191, 217], "jointli": [192, 266, 399, 400, 405, 974], "instant": 192, "wave": [192, 374, 977], "n_task": [192, 974], "n_relevant_featur": 192, "multitasklasso": [192, 643, 651, 654, 974, 1020, 1028, 1031, 1033], "coef_lasso_": 192, "coef_multi_task_lasso_": 192, "spy": 192, "feature_to_plot": 192, "seagreen": 192, "281": [192, 217], "plot_multi_task_lasso_support": [192, 217], "reg_nnl": 193, "y_pred_nnl": 193, "r2_score_nnl": 193, "nnl": [193, 648], "8225220806196526": 193, "reg_ol": 193, "y_pred_ol": 193, "r2_score_ol": 193, "7436926291700353": 193, "low_x": 193, "high_x": 193, "low_i": 193, "high_i": 193, "get_ylim": [193, 301, 302], "847222222222214": 193, "066": [193, 217, 257, 639], "plot_nnl": [193, 217], "23786125": 194, "2548": 194, "diabetes_x": [194, 1011], "diabetes_i": [194, 1011], "diabetes_x_train": [194, 1011], "diabetes_x_test": [194, 1011], "diabetes_y_train": [194, 1011], "diabetes_y_test": [194, 1011], "regr": [194, 401, 545, 547, 556, 637, 638, 658, 823, 848, 891, 893, 896, 993, 1011], "diabetes_y_pr": 194, "plot_ol": [194, 217], "plot_ols_3d": [195, 217], "greatli": [196, 232, 316, 374, 382, 443, 981, 994, 1026, 1034], "218": [196, 217, 371, 462, 706, 776], "plot_ols_ridge_vari": [196, 217], "make_sparse_coded_sign": [197, 522, 528, 1034, 1036], "orthogonalmatchingpursuit": [197, 656, 676, 677, 974, 1020, 1022, 1025, 1028, 1033], "orthogonalmatchingpursuitcv": [197, 655, 1022, 1033], "512": 197, "n_nonzero_coef": [197, 517, 522, 528, 533, 539, 641, 655, 676, 677], "xw": [197, 314, 637, 638, 640, 643, 644, 645, 646, 647, 651, 652, 653, 654, 663, 672, 673, 674, 675, 974], "_0": [197, 676, 974, 978, 993], "distort": [197, 231, 371, 398, 399, 867, 879, 884, 975, 988, 990], "y_noisi": 197, "idx_r": 197, "omp_cv": 197, "plot_omp": [197, 217], "gbrt": [198, 407], "contract": [198, 216, 361, 387, 999], "compani": [198, 216, 400, 1002], "policyhold": [198, 216, 974], "vehicl": [198, 216], "driver": [198, 216, 1035], "exposur": [198, 216, 974], "car": 198, "accid": [198, 216], "noll": [198, 216], "salzmann": [198, 216], "wuthrich": [198, 216], "novemb": [198, 216, 371, 1025, 1026, 1028], "2139": [198, 216], "ssrn": [198, 216], "3164764": [198, 216], "ch": [198, 200, 216, 323, 325], "rth": [198, 216], "41214": [198, 216], "idpol": [198, 216], "claimnb": [198, 216], "vehpow": [198, 216], "vehag": [198, 216], "drivag": [198, 216], "bonusmalu": [198, 216], "vehbrand": [198, 216], "vehga": [198, 216], "b12": [198, 216], "1217": 198, "r82": 198, "77000": 198, "75000": 198, "diesel": [198, 216], "r22": 198, "09000": 198, "r72": 198, "84000": 198, "678008": 198, "6114326": 198, "00274": 198, "3317": 198, "r93": 198, "678009": 198, "6114327": 198, "41": [198, 309, 369, 371, 410, 460, 483, 522, 612, 615, 626, 649, 655, 676, 677, 771, 825, 980, 984], "9850": 198, "r11": [198, 216], "678010": 198, "6114328": 198, "1323": 198, "678011": 198, "6114329": 198, "r26": 198, "678012": 198, "6114330": 198, "678013": [198, 216], "10070308464041304": 198, "log_scale_transform": [198, 216], "linear_model_preprocessor": 198, "passthrough_numer": [198, 216], "binned_numer": [198, 216], "2e5": [198, 216], "log_scaled_numer": [198, 216], "onehot_categor": [198, 216], "imbalanc": [198, 262, 266, 268, 346, 385, 398, 404, 694, 699, 777, 788, 792, 827, 978, 980, 986, 998], "simplist": [198, 408], "pertin": 198, "dummyregressor": [198, 216, 542, 978, 1021, 1023, 1024, 1027, 1028, 1030, 1033, 1034], "df_train": [198, 216], "df_test": [198, 216], "regressor__sample_weight": 198, "mean_absolute_error": [198, 200, 216, 978, 1021, 1023], "mean_poisson_devi": [198, 978, 1030], "score_estim": [198, 216], "n_mask": 198, "564": [198, 347], "189": [198, 222, 225, 253, 275, 295, 299, 380, 887, 991], "comonli": 198, "ridge_glm": 198, "strictli": [198, 216, 234, 301, 317, 346, 379, 387, 398, 403, 405, 408, 499, 500, 526, 532, 535, 552, 553, 579, 582, 633, 661, 662, 686, 691, 729, 756, 787, 790, 791, 797, 801, 813, 839, 866, 878, 882, 883, 885, 886, 890, 891, 895, 896, 925, 967, 969, 974, 978, 988, 992, 1021, 1031, 1036], "domain": [198, 307, 387, 389, 404, 626, 712, 713, 714, 788, 789, 794, 795, 796, 974, 999], "560": [198, 508, 509], "186": [198, 203, 217, 224, 225, 298, 380, 778, 978], "595": 198, "223745": 198, "glm": [198, 216, 312, 639, 660, 671, 974, 1020, 1031], "vanilla": [198, 396, 400, 438, 440, 451, 620], "poissonregressor": [198, 216, 312, 315, 639, 671, 974, 1031, 1034, 1035], "poisson_glm": 198, "newton": [198, 216, 298, 601, 639, 649, 650, 660, 671, 847, 848, 974, 1024, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036], "deep": [198, 376, 387, 407, 414, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 759, 785, 786, 787, 790, 791, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 982, 983, 998, 999, 1002, 1025, 1031, 1032, 1034], "implicit": [198, 387, 407, 408, 563, 673, 674, 972, 977, 998, 1029], "concis": [198, 374, 379, 1031, 1033], "poisson_gbrt": 198, "566": 198, "prone": [198, 246, 305, 385, 398], "set_yscal": [198, 793], "5e5": 198, "realiz": [198, 1002], "priori": [198, 215, 268, 277, 301, 387, 400, 407, 579, 585, 977, 1036], "wrongli": [198, 332], "gen_even_slic": [198, 383, 930], "_mean_frequency_by_risk_group": 198, "y_true_bin": 198, "y_pred_bin": 198, "idx_sort": 198, "sl": 198, "y_true_seg": 198, "y_pred_seg": 198, "11935": 198, "11933": 198, "11932": 198, "12196": 198, "11931": 198, "portfolio": [198, 216, 972], "riskiest": [198, 216], "safest": [198, 216, 356, 368], "irrespect": [198, 231, 268, 279, 597], "lorenz": [198, 216, 1025], "summar": [198, 250, 266, 268, 347, 374, 376, 389, 407, 512, 649, 685, 697, 698, 974, 975, 978, 984], "gini": [198, 216, 239, 271, 313, 544, 545, 548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901, 967, 986, 994, 1028, 1029, 1036], "lorenz_curv": [198, 216], "ranked_frequ": 198, "ranked_exposur": [198, 216], "cumulated_claim": 198, "cumulated_exposur": 198, "cum_exposur": 198, "cum_claim": [198, 216], "0x7f6be22e1eb0": 198, "worst": [198, 307, 371, 400, 438, 699, 719, 720, 773, 774, 777, 780, 781, 815, 978, 1002, 1020, 1033], "occurr": [198, 307, 346, 347, 369, 374, 400, 408, 560, 561, 572, 580, 581, 608, 618, 619, 620, 621, 773, 825, 853, 980, 1021, 1026], "circumstanti": 198, "extractor": [198, 298, 362, 369, 387, 408, 494, 967, 1020], "discrim": 198, "profil": [198, 360, 374, 377, 512, 515, 974, 1002], "ideal": [198, 200, 216, 256, 259, 266, 268, 269, 356, 373, 374, 378, 379, 382, 385, 387, 398, 716, 746, 967, 977, 992, 993, 999], "meaningfulli": [198, 978], "plot_poisson_regression_non_normal_loss": [198, 217], "monomi": 199, "vandermond": [199, 988], "x_0": [199, 648], "pseudo": [199, 298, 376, 404, 412, 431, 443, 445, 453, 460, 461, 462, 464, 465, 466, 467, 524, 552, 553, 554, 618, 625, 630, 632, 633, 637, 638, 643, 644, 651, 652, 653, 654, 668, 682, 686, 790, 791, 799, 801, 839, 846, 882, 883, 887, 890, 891, 892, 895, 926, 927, 974, 990, 1025, 1034], "basis_1": 199, "basis_2": 199, "infinit": [199, 244, 262, 360, 410, 437, 613, 614, 768, 785, 908, 910, 911, 970, 977, 988, 993, 1028, 1030, 1033, 1034, 1035], "malt": [199, 1033, 1034, 1035], "londschien": [199, 1033], "prepar": [199, 234, 345, 360, 376, 377, 380, 382, 994, 1002, 1028, 1036], "set_prop_cycl": 199, "teal": [199, 208, 266], "yellowgreen": [199, 201, 208, 352], "tomato": 199, "unwant": [199, 345], "oscillatori": [199, 988], "danger": [199, 404], "pft": 199, "splt": 199, "bsplines_": [199, 869], "refrain": [199, 374], "dec": [199, 668, 869, 894, 993], "31st": [199, 869], "advis": [199, 234, 356, 372, 374, 400, 408, 428, 637, 643, 645, 651, 653, 663, 678, 970, 974, 980, 982, 993, 1034], "x_plot_ext": 199, "y_plot_ext": 199, "462": [199, 217], "plot_polynomial_interpol": [199, 217, 865, 869], "pareto": 200, "dale": [200, 1033], "mail": [200, 306, 369, 374, 378, 382, 385, 388, 996, 1028, 1029], "ru": 200, "glemaitre58": 200, "y_true_mean": 200, "y_normal": 200, "y_pareto": 200, "huge": [200, 203, 360, 380, 618, 1023], "heavi": [200, 397, 999], "parse_vers": [200, 661], "sp_version": [200, 661], "incompat": [200, 378, 487, 968, 1028, 1029], "older": [200, 234, 373, 378, 1023, 1030, 1032], "recent": [200, 234, 363, 372, 375, 379, 382, 387, 390, 400, 459, 529, 556, 992, 1002, 1023, 1032], "interior": [200, 661, 974, 1035], "out_bounds_predict": 200, "bool_": 200, "logical_or": [200, 206, 268, 380], "hit": [200, 380], "wider": [200, 408, 903, 974], "asymmetri": [200, 345], "linger": 200, "linear_regress": [200, 273], "quantile_regress": 200, "y_pred_lr": 200, "y_pred_qr": 200, "805": 200, "670": 200, "cv_results_lr": 200, "cv_results_qr": 200, "test_neg_mean_squared_error": [200, 813], "732": 200, "690": 200, "679": [200, 890], "592": [200, 217, 602, 605, 616, 985], "plot_quantile_regress": [200, 217], "robustli": [201, 399], "faulti": [201, 1020], "1903908407869": 201, "17236387": 201, "08533159": 201, "ransacregressor": [201, 204, 215, 640, 669, 670, 974, 1023, 1025, 1026, 1027, 1028, 1031, 1033, 1034], "inlier_mask": 201, "inlier_mask_": [201, 662], "outlier_mask": 201, "line_x": [201, 215], "line_i": 201, "line_y_ransac": 201, "estimator_": [201, 234, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 584, 585, 588, 662, 962, 1035], "plot_ransac": [201, 217], "mathcal": [202, 340, 405, 407, 618, 687, 970, 972, 974, 978, 992, 1033], "discourag": [202, 385, 390, 680], "beta_": [202, 405], "excess": [202, 437, 988, 1027], "encourag": [202, 295, 332, 373, 374, 385, 993, 998], "kornel": [202, 1026], "kielczewski": [202, 1026], "plusnet": 202, "32634568": 202, "49665188": 202, "75747153": 202, "08699432": 202, "44381023": 202, "69892343": 202, "28808734": 202, "75949622": 202, "errors_coef": 202, "regularis": [202, 413, 464, 466], "logx": [202, 340], "gradual": [202, 847, 848, 992], "formerli": [202, 1021, 1024, 1026, 1027], "intric": [202, 503], "rapidli": [202, 261, 993, 1002, 1007], "influenti": [202, 346, 1002], "pose": [202, 267, 974, 1012], "loos": [202, 250, 256, 993, 1028], "concret": [202, 375, 388, 409, 659, 665, 666, 667, 668, 882, 883, 974, 992], "plot_ridge_coeff": [202, 217], "practis": 203, "10x10": 203, "hilbert": [203, 856, 970, 988], "n_alpha": [203, 463, 637, 638, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 664, 666, 672, 673, 674, 675, 1023], "plot_ridge_path": [203, 217], "theilsen": 204, "lessen": [204, 649, 650, 890, 891], "theilsenregressor": [204, 215, 640, 662, 669, 974, 1024, 1032, 1034], "x_error": 204, "y_errors_larg": 204, "x_errors_larg": 204, "deviant": [204, 984], "legend_titl": 204, "nabsolut": 204, "nto": [204, 268], "822": [204, 217, 740], "plot_robust_fit": [204, 217], "asgd": [205, 992], "rob": [205, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1032, 1035], "zinkov": [205, 1020, 1021, 1022, 1024, 1025], "heldout": 205, "squared_hing": [205, 340, 657, 667, 890, 897, 974], "0e4": 205, "yy_": 205, "plot_sgd_comparison": [205, 217], "_test": [206, 303, 376, 1033], "ignore_warn": [206, 303, 1026], "load_mnist": [206, 279], "class_0": [206, 371, 501], "class_1": [206, 371, 501], "554": [206, 214, 297], "mnist_784": [206, 214, 279, 297], "fit_and_scor": 206, "train_scor": [206, 307, 340, 350, 793, 809, 813, 814, 817, 973], "estimator_dict": 206, "flush": 206, "results_df": [206, 259, 307], "group_df": 206, "plot_sgd_early_stop": [206, 217], "ova": [207, 657, 659, 667, 992], "plot_sgd_iri": [207, 217], "ugli": [207, 282, 287, 290, 328], "117": [207, 217, 1021], "modified_huber_loss": 208, "darkorchid": 208, "098": [208, 217], "plot_sgd_loss_funct": [208, 217], "l1_color": 209, "l2_color": 209, "elastic_net_color": 209, "1001": 209, "rho": [209, 405, 668, 974, 992, 1021], "elastic_net": 209, "dpi": [209, 904, 1033], "elastic_net_contour": 209, "l2_contour": 209, "l1_contour": 209, "inlin": [209, 374, 375, 994], "plot_sgd_penalti": [209, 217], "ndenumer": 210, "072": [210, 217, 333, 343, 428, 639], "plot_sgd_separating_hyperplan": [210, 217], "no_weight": 211, "samples_weight": 211, "no_weights_handl": 211, "weights_handl": 211, "plot_sgd_weighted_sampl": [211, 217], "sgdoneclasssvm": [212, 227, 314, 894, 984, 992, 1033, 1035, 1036], "rc": [212, 378], "novel": [212, 285, 331, 356, 398, 967], "abnorm": [212, 227, 285, 331, 369, 483, 554, 836, 984, 1028], "y_pred_train": [212, 331], "y_pred_test": [212, 285, 331], "y_pred_outli": [212, 285, 331], "n_error_train": [212, 331], "n_error_test": [212, 285, 331], "n_error_outli": [212, 285, 331], "clf_sgd": 212, "pipe_sgd": 212, "y_pred_train_sgd": 212, "y_pred_test_sgd": 212, "y_pred_outliers_sgd": 212, "n_error_train_sgd": 212, "n_error_test_sgd": 212, "n_error_outliers_sgd": 212, "z_sgd": 212, "pubu": [212, 231, 285, 331], "darkr": [212, 285, 331], "palevioletr": [212, 285, 331], "b1": [212, 285, 331], "b2": [212, 285, 331], "blueviolet": [212, 285, 331], "307": [212, 217], "plot_sgdocsvm_vs_ocsvm": [212, 217], "newgroups20": 213, "trim": [213, 400, 830, 831], "20newsgroup": [213, 367, 1020], "4500": 213, "130107": [213, 231, 480], "epoch": [213, 387, 527, 657, 658, 659, 667, 668, 669, 847, 848, 992, 1027, 1028, 1033], "5960": 213, "26593496": 213, "43348936": 213, "26362917": 213, "31973683": 213, "37815029": 213, "2928359": 213, "27054655": 213, "62717609": 213, "19522393": 213, "30897646": 213, "34586917": 213, "28207552": 213, "34125758": 213, "29898468": 213, "34279478": 213, "59489497": 213, "38353048": 213, "35278655": 213, "19829832": 213, "14603365": 213, "6440": 213, "36047253": 213, "1268187": 213, "10606655": 213, "17985197": 213, "5395559": 213, "07993421": 213, "06686804": 213, "21443888": 213, "11528972": 213, "2075215": 213, "10914094": 213, "11144673": 213, "13988486": 213, "09684337": 213, "26286057": 213, "11682692": 213, "55800226": 213, "17370318": 213, "11452112": 213, "734": 213, "arthur": [213, 214, 400, 438, 451, 1025, 1026, 1027, 1028, 1029, 1032, 1034], "mensch": [213, 214, 1025, 1026, 1027, 1028], "timeit": [213, 247, 380], "default_tim": [213, 247], "model_param": 213, "this_max_it": 213, "train_tim": [213, 233, 345, 346], "ndataset": [213, 303], "run_tim": [213, 214], "785": [213, 214, 217], "plot_sparse_logistic_regression_20newsgroup": [213, 217], "8253": 214, "714": 214, "l1_plot": 214, "plot_sparse_logistic_regression_mnist": [214, 217], "subpopul": [215, 670, 974], "residual_threshold": [215, 662, 974, 1033], "remedi": 215, "max_subpopul": [215, 670, 1034], "lose": [215, 347, 369, 387, 403, 408, 410, 537, 926, 927, 968, 974, 1013], "florian": [215, 1002, 1020, 1024, 1026, 1030], "wilhelm": [215, 1024, 1026, 1030], "indigo": 215, "561": [215, 217, 400], "plot_theilsen": [215, 217], "motor": 216, "parti": [216, 317, 361, 373, 385, 789, 796, 946, 996, 1020, 1031, 1036], "liabil": 216, "functool": 216, "mean_tweedie_devi": [216, 978, 1030], "load_mtpl2": 216, "fremtpl2freq": 216, "df_freq": 216, "fremtpl2sev": 216, "41215": 216, "df_sev": 216, "claimamount": 216, "fillna": 216, "unquot": 216, "field": [216, 371, 397, 400, 401, 408, 489, 492, 608, 974, 976, 985, 993, 998, 1001, 1013, 1021], "column_nam": 216, "plot_obs_pr": 216, "y_label": 216, "fill_legend": 216, "df_": 216, "tweedie_pow": 216, "d\u00b2": 216, "subset_label": 216, "score_label": [216, 265], "est_freq": 216, "est_sev": 216, "unstack": [216, 262], "fremtpl2": 216, "unreason": [216, 404], "exception": 216, "200000": 216, "column_tran": [216, 401], "purepremium": 216, "indirectli": 216, "avgclaimamount": 216, "fmax": 216, "option_context": 216, "max_column": 216, "139": [216, 279, 380, 407, 443, 453, 682, 686, 979], "414": [216, 401, 716, 746, 866, 878, 978], "424": 216, "27000": 216, "404": 216, "333333": 216, "r25": 216, "1981": [216, 974], "14156": 216, "142857": 216, "4792": 216, "1456": 216, "10403": 216, "928571": 216, "10834": 216, "17474": 216, "193548": 216, "225806": 216, "r73": 216, "3986": 216, "12860": [216, 1029], "5417": 216, "seemingli": [216, 356, 385], "169504": 216, "6237": 216, "upon": [216, 224, 292, 369, 374, 385, 387, 394, 552, 553, 618, 621, 662, 779, 785, 786, 830, 831, 967, 974, 994, 1004, 1013, 1034], "glm_freq": 216, "0201": 216, "0219": 216, "1379": 216, "1378": 216, "2246": 216, "surprisingli": [216, 369, 408], "bonu": [216, 374, 1008, 1013], "malu": 216, "younger": 216, "infti": [216, 410, 610, 974, 988, 1027], "gammaregressor": [216, 312, 315, 671, 974, 1031, 1034, 1035], "mask_test": 216, "glm_sev": 216, "400000e": 216, "700000e": 216, "756746e": 216, "744042e": 216, "801770e": 216, "030677e": 216, "dummy_sev": 216, "000000e": 216, "756687e": 216, "744497e": 216, "803882e": 216, "033764e": 216, "avgclaim": 216, "nbclaim": 216, "1951": 216, "1940": 216, "1978": [216, 974], "apriori": 216, "regardless": [216, 260, 261, 262, 361, 374, 400, 526, 623, 624, 649, 695, 706, 978, 990, 1028, 1035, 1036], "glm_pure_premium": 216, "999": [216, 259, 378, 407, 708, 847, 848], "scores_product_model": 216, "scores_glm_pure_premium": 216, "expand_frame_repr": 216, "690000e": 216, "420000e": 216, "669930e": 216, "617050e": 216, "640770e": 216, "640880e": 216, "7000": 216, "695740e": 216, "683980e": 216, "682880e": 216, "692270e": 216, "8000": [216, 262, 263], "046010e": 216, "040530e": 216, "037600e": 216, "045390e": 216, "9000": 216, "387580e": 216, "385000e": 216, "382120e": 216, "387830e": 216, "9900": 216, "015716e": 216, "015414e": 216, "015347e": 216, "015587e": 216, "9990": 216, "914573e": 216, "914370e": 216, "914538e": 216, "914387e": 216, "904751e": 216, "904556e": 216, "904747e": 216, "904558e": 216, "730119e": 216, "722128e": 216, "739865e": 216, "731249e": 216, "295040e": 216, "212197e": 216, "295505e": 216, "213056e": 216, "917618e": 216, "299546e": 216, "916555e": 216, "313276e": 216, "951751e": 216, "325198e": 216, "riski": 216, "operation": [216, 1002], "simpler": [216, 332, 360, 373, 400, 405, 974, 979, 1011, 1025], "develop": [216, 257, 259, 311, 317, 345, 360, 363, 369, 373, 374, 380, 385, 387, 388, 389, 391, 394, 397, 399, 402, 403, 407, 408, 424, 484, 787, 974, 978, 981, 994, 996, 998, 999, 1001, 1002, 1011, 1020, 1028, 1029, 1030, 1033, 1035, 1037], "ranked_pure_premium": 216, "cumulated_claim_amount": 216, "cumulated_sampl": 216, "y_pred_product": 216, "y_pred_tot": 216, "ordered_sampl": 216, "plot_tweedie_regression_insurance_claim": [216, 217], "auto_examples_linear_model": 217, "md": [219, 220, 221, 222, 378, 679, 683, 685, 1014, 1015, 1020, 1032, 1035], "seek": [219, 221, 223, 373, 374, 385, 388, 499, 500, 975, 1005, 1007], "ticker": [219, 221, 224, 279], "s_point": 219, "s_color": 219, "make_s_curv": [219, 224], "plot_3d": 219, "points_color": 219, "subplot_kw": [219, 283], "set_major_loc": [219, 284], "multipleloc": [219, 284], "add_2d_scatt": 219, "set_major_formatt": [219, 221, 224, 279, 284], "nullformatt": [219, 221, 224, 279], "lle": [219, 220, 221, 223, 521, 680, 684, 975, 1032], "thought": [219, 284, 387, 400, 437, 975, 979], "analys": [219, 354, 405, 790, 791, 975, 998, 1002], "lle_standard": 219, "s_standard": 219, "lle_ltsa": 219, "ltsa": [219, 220, 221, 680, 684, 975], "s_ltsa": 219, "lle_hessian": 219, "hessian": [219, 220, 221, 407, 639, 649, 650, 660, 671, 680, 684, 974, 982, 1014, 1015, 1035], "s_hessian": 219, "lle_mod": 219, "s_mod": 219, "lle_method": 219, "tangent": [219, 680, 684, 976, 1014, 1015], "eigenmap": [219, 680, 682, 684, 686, 1014, 1015, 1021], "isometr": [219, 679, 681, 682, 683, 975], "geodes": [219, 679, 975], "s_isomap": 219, "md_scale": 219, "normalized_stress": [219, 220, 221, 222, 681, 685, 975, 1035], "s_scale": 219, "laplacian": [219, 366, 397, 431, 443, 453, 611, 630, 634, 682, 686, 755, 756, 764, 886, 974, 975, 991, 1015, 1021, 1026], "s_spectral": 219, "t_sne": [219, 1028], "s_t_sne": 219, "674": [219, 225], "plot_compare_method": [219, 225], "offsetbox": 220, "plot_embed": 220, "425": [220, 606], "shown_imag": 220, "someth": [220, 234, 345, 374, 376, 377, 378, 382, 408, 978, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "4e": 220, "imagebox": 220, "annotationbbox": 220, "offsetimag": 220, "neighborhoodcomponentsanalysi": [220, 287, 288, 289, 981, 1029, 1034], "random_project": [220, 231, 363, 990, 995, 1021, 1026, 1036], "sparserandomproject": [220, 231, 882, 990, 1021, 1026, 1034, 1036], "embeed": 220, "n_iter_without_progress": [220, 683, 1025, 1026], "nca": [220, 287, 288, 289, 839, 981], "plot_lle_digit": [220, 225], "pole": 221, "thin": [221, 611], "earth": [221, 346, 754, 998], "074": [221, 257], "251": [221, 371], "sphere_data": 221, "trans_data": 221, "2g": [221, 224, 688, 1031], "252": [221, 371, 525, 866, 878], "257": [221, 257], "258": 221, "se": [221, 371, 390], "988": [221, 225, 281, 293], "plot_manifold_spher": [221, 225], "euclidean_dist": [222, 231, 376, 441, 448, 679, 752, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 1020, 1025, 1028, 1029], "finfo": [222, 462, 463, 469, 597, 641, 642, 645, 646, 647, 673, 674, 731, 1035], "x_true": 222, "dissimilar": [222, 387, 397, 443, 681, 685, 975, 1026, 1036], "embedding_": [222, 387, 679, 680, 681, 682, 683], "nmd": 222, "npo": 222, "plot_md": [222, 225], "sr_point": 223, "sr_color": 223, "ambient": 223, "text2d": 223, "unrol": 223, "unnecessarili": [223, 1027, 1030], "clump": 223, "sr_lle": 223, "sr_err": 223, "locally_linear_embed": [223, 975], "sr_tsne": 223, "stretch": [223, 248], "byproduct": 223, "sh_point": 223, "sh_color": 223, "topologi": [223, 224], "sh_lle": 223, "sh_err": 223, "sh_tsne": 223, "422": [223, 225, 584, 585, 716, 746, 978], "plot_swissrol": [223, 225], "tendenc": [224, 974, 975, 977, 980, 983], "clearer": [224, 993], "distil": 224, "pub": [224, 828, 885], "misread": 224, "narin": [224, 1027, 1028], "kokhlikyan": [224, 1027, 1028], "plot_t_sne_perplex": [224, 225], "auto_examples_manifold": 225, "cope": [227, 362, 369, 974], "multimod": 227, "inli": [227, 974, 984], "unimod": [227, 465], "localoutlierfactor": [227, 237, 285, 286, 315, 387, 554, 894, 984, 1027, 1028, 1030, 1034, 1035, 1036], "modal": [227, 465, 929], "hypercub": [227, 506], "decent": [227, 258, 369, 980], "handpick": 227, "absenc": [227, 262, 387, 703, 853, 977, 978], "negative_linestyl": 227, "outliers_fract": 227, "n_inlier": 227, "anomaly_algorithm": 227, "blobs_param": 227, "268": [227, 242, 245], "plot_anomaly_comparison": [227, 242], "transfus": 228, "1464": 228, "donat": 228, "confust": 228, "cm_displai": 228, "y_score": [228, 266, 268, 387, 473, 474, 475, 698, 711, 716, 717, 729, 730, 746, 772, 778, 779, 782, 787, 790, 791, 801, 850, 978, 1026, 1034, 1036], "pos_label": [228, 237, 387, 429, 430, 689, 691, 693, 697, 698, 700, 717, 719, 720, 728, 772, 773, 774, 777, 779, 857, 874, 978, 1028, 1032, 1034], "roc_displai": 228, "previs": 228, "precision_recall_curv": [228, 266, 691, 697, 698, 717, 978, 1021, 1022, 1026, 1033, 1034, 1036], "pr_displai": 228, "easlii": 228, "358": [228, 242, 346], "plot_display_object_visu": [228, 242], "summaris": [229, 312], "composit": [229, 312, 363, 366, 404, 649, 778, 968, 974, 987, 1015, 1021], "num_proc": [229, 312], "cat_proc": [229, 312], "feat1": [229, 312, 408], "feat3": [229, 312, 408], "feat0": [229, 312], "feat2": [229, 312, 408], "plot_estimator_represent": [229, 242], "isotonicregress": [230, 969, 1021, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1032, 1034, 1035, 1036], "ir": [230, 405, 581, 716, 746, 825, 829, 976, 978], "out_of_bound": [230, 626], "y_": [230, 245, 249, 250, 291, 376, 403, 405, 628, 639, 660, 671, 719, 720, 728, 754, 773, 774, 777, 974, 978, 1026], "linearregressionlinearregress": 230, "x_thresholds_": [230, 626, 1032], "y_thresholds_": [230, 626, 1032], "154": [230, 242, 298, 642, 979], "plot_isotonic_regress": [230, 242], "lemma": [231, 366, 399, 525, 532, 540, 882, 883, 884, 972, 1015, 1023], "johnson_lindenstrauss_min_dim": [231, 990, 1021], "achliopta": [231, 883, 884, 990], "_compon": [231, 527], "geq": [231, 398, 405, 407, 974, 978, 988, 992, 993], "_sampl": [231, 405, 529, 531, 538], "admiss": [231, 361], "eps_rang": 231, "min_n_compon": 231, "nn_sampl": [231, 271], "semilogi": 231, "nn_compon": [231, 232], "100k": 231, "n_components_rang": 231, "rp": 231, "projected_data": 231, "n_byte": 231, "projected_dist": 231, "min_dist": 231, "max_dist": 231, "hexbin": 231, "gridsiz": 231, "298": [231, 986], "854": [231, 257], "271": 231, "jl": [231, 883], "436": [231, 346], "579": [231, 242, 515], "plot_johnson_lindenstrauss_bound": [231, 242], "rbfsampler": [232, 630, 631, 633, 970, 1004, 1024, 1034, 1035], "mont": [232, 410, 602, 632, 633, 970, 983], "fourier": [232, 399, 629, 630, 631, 632, 633, 748, 749, 970], "acceler": [232, 316, 360, 385, 400, 459, 683, 888, 975, 998, 1002, 1029, 1033, 1035], "data_train": [232, 260, 345], "targets_train": 232, "data_test": [232, 260, 345], "targets_test": 232, "kernel_svm": 232, "linear_svm": 232, "feature_map_fouri": 232, "feature_map_nystroem": [232, 630], "fourier_approx_svm": 232, "feature_map": [232, 301], "nystroem_approx_svm": 232, "kernel_svm_tim": 232, "kernel_svm_scor": 232, "linear_svm_tim": 232, "linear_svm_scor": 232, "fourier_scor": 232, "nystroem_scor": 232, "fourier_tim": 232, "nystroem_tim": 232, "feature_map__n_compon": 232, "timescal": 232, "ly": [232, 838, 840, 841, 842, 1024], "flat_grid": 232, "lv_ep": 232, "tab10": [232, 249], "plot_kernel_approxim": [232, 242], "krr": [233, 410, 634, 971], "insensit": [233, 634, 667, 669, 778, 891, 971, 992, 993, 1020], "fifth": [233, 971, 1004], "kr": [233, 259, 1034], "svr_fit": 233, "kr_fit": 233, "sv_ratio": 233, "support_": [233, 339, 460, 465, 584, 585, 593, 892, 893, 894, 895, 896, 993], "y_svr": 233, "svr_predict": 233, "y_kr": 233, "kr_predict": 233, "09999999999999999": [233, 267, 332], "737": [233, 515], "540": 233, "340": [233, 320], "079": [233, 371], "sv_ind": 233, "arithmet": [233, 380, 382, 400, 542, 639, 660, 671, 695, 708, 726, 727, 747, 783, 978, 1028], "test_tim": [233, 345], "train_test_s": 233, "learningcurvedisplai": [233, 261, 316, 973, 1035, 1036], "negate_scor": [233, 793, 809], "score_typ": [233, 261, 274, 317, 793, 809, 1036], "std_display_styl": [233, 261, 793, 809], "get_legend_handles_label": [233, 261, 266], "plot_kernel_ridge_regress": [233, 242], "set_config": [234, 239, 241, 308, 312, 360, 361, 391, 401, 428, 434, 435, 438, 440, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 581, 582, 585, 601, 602, 617, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 787, 788, 789, 790, 791, 794, 796, 801, 805, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 1029, 1031, 1034, 1036], "classifiermixin": [234, 374, 376, 387, 404, 1031], "metaestimatormixin": 234, "regressormixin": [234, 376, 387, 456, 1031], "transformermixin": [234, 279, 376, 387, 456, 1028, 1035, 1036], "metadata_rout": [234, 428, 434, 435, 438, 440, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 581, 582, 585, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 787, 788, 789, 790, 791, 794, 796, 801, 805, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901], "metadatarout": [234, 428, 821, 822, 823, 824, 937], "methodmap": [234, 935], "get_routing_for_object": 234, "process_rout": 234, "my_group": [234, 391], "my_weight": [234, 391], "my_other_weight": [234, 391], "enable_metadata_rout": [234, 391, 428, 434, 435, 438, 440, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 581, 582, 585, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 787, 788, 789, 790, 791, 794, 796, 801, 805, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 869, 870, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 1036], "check_metadata": 234, "obj": [234, 394, 558, 559, 937, 938, 939, 944], "print_rout": 234, "get_metadata_rout": [234, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 934, 936, 937, 938, 978], "_serial": 234, "exampleclassifi": 234, "smart": [234, 434, 450, 451, 581], "accomplish": [234, 376, 398, 537, 975, 979, 981, 1002], "magic": [234, 375, 380, 410, 607, 612, 615], "set_fit_request": [234, 391, 428, 434, 435, 438, 440, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 579, 582, 585, 626, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 681, 787, 790, 791, 801, 822, 823, 825, 826, 827, 828, 829, 835, 855, 856, 869, 870, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901], "set_predict_request": [234, 434, 438, 440, 473, 474, 475, 543, 602, 626, 635, 636, 898, 899, 900, 901], "set_score_request": [234, 391, 428, 434, 438, 440, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 601, 602, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 669, 670, 671, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 832, 833, 837, 840, 841, 847, 848, 850, 885, 886, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 978], "inherit": [234, 374, 376, 386, 387, 568, 667, 919, 921, 974, 1020, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1035, 1036], "metaclassifi": [234, 235], "owner": [234, 369, 371, 934, 935], "method_map": [234, 935], "fit_param": [234, 387, 424, 428, 433, 436, 456, 523, 525, 527, 528, 530, 533, 534, 540, 558, 560, 561, 573, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 619, 621, 626, 629, 630, 631, 632, 633, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 821, 822, 823, 824, 834, 839, 842, 846, 849, 850, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 867, 868, 869, 870, 882, 883, 938, 1027, 1030, 1031, 1032, 1034, 1036], "metadatarequest": [234, 414, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 818, 819, 820, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 935, 937], "request_rout": 234, "validate_metadata": 234, "routed_param": [234, 938], "route_param": 234, "caller": [234, 401, 637, 638, 643, 651, 652, 653, 672, 880, 881, 936, 946, 954, 955, 956, 1029], "predict_param": [234, 456, 558, 559, 850, 1033], "object_nam": [234, 935, 938], "method_nam": [234, 938], "silent": [234, 408, 572, 846, 988, 1025, 1026, 1028, 1029, 1033, 1034], "bug": [234, 311, 312, 313, 314, 315, 316, 317, 363, 372, 376, 377, 379, 382, 385, 387, 996, 999, 1020, 1021, 1022, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "notabl": [234, 301, 368, 387, 487, 718, 863, 975, 977, 981, 1024, 1027, 1034], "metaclassifiermetaclassifi": 234, "exampleclassifierexampleclassifi": 234, "typeerror": [234, 314, 379, 702, 914, 962, 1027, 1028, 1031, 1033], "got": [234, 266, 356, 379, 542, 640, 656, 1033, 1035], "sample_weight1": 234, "sample_weight2": 234, "aliased_sample_weight": 234, "alia": [234, 375, 378, 382, 387, 428, 434, 435, 438, 440, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 524, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 579, 581, 582, 585, 601, 602, 608, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 787, 788, 789, 790, 791, 794, 796, 801, 805, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 837, 840, 841, 847, 848, 850, 853, 855, 856, 857, 862, 869, 870, 885, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 952, 984, 999, 1020, 1034], "calle": [234, 936], "predict_log_proba": [234, 376, 387, 540, 541, 542, 544, 546, 548, 550, 555, 584, 585, 649, 650, 667, 787, 790, 791, 801, 811, 825, 826, 827, 828, 829, 847, 850, 887, 892, 895, 898, 900, 993, 1020, 1033], "meta_est": 234, "routerconsumerclassifi": 234, "add_self_request": 234, "self_request": 234, "bellow": 234, "clf_sample_weight": 234, "meta_clf_sample_weight": 234, "routerconsumerclassifierrouterconsumerclassifi": 234, "complic": [234, 295, 380, 410, 685, 981], "simplepipelin": 234, "_required_paramet": [234, 376], "transformer_": [234, 456], "child": [234, 345, 354, 361, 385, 387, 391, 400, 407, 433, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 898, 899, 900, 901, 938, 946, 994, 1027], "boilerpl": [234, 376, 1002, 1013], "exampletransform": 234, "set_transform_request": [234, 473, 474, 475, 524, 573, 579, 581, 582, 626, 853, 856, 862, 870], "metaregressor": 234, "weightedmetaregressor": 234, "__metadata_request__fit": 234, "compat": [234, 262, 279, 312, 368, 377, 383, 384, 385, 387, 390, 391, 408, 454, 460, 499, 557, 568, 576, 577, 580, 594, 605, 606, 609, 610, 611, 613, 614, 623, 624, 625, 649, 650, 664, 666, 764, 768, 788, 789, 792, 794, 795, 796, 797, 800, 802, 803, 804, 805, 806, 807, 808, 834, 835, 855, 863, 864, 902, 903, 906, 941, 975, 978, 981, 983, 998, 999, 1002, 1015, 1020, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "exampleregressor": 234, "commun": [234, 367, 373, 377, 379, 382, 387, 390, 400, 407, 529, 531, 538, 683, 701, 862, 968, 975, 981, 988, 992, 996, 998, 1002, 1028, 1029], "vendor": [234, 1025, 1028, 1029], "NOT": [234, 285, 371, 377, 797, 830, 831], "signatur": [234, 345, 346, 369, 479, 480, 548, 549, 555, 556, 585, 601, 602, 650, 664, 666, 702, 732, 793, 809, 812, 814, 817, 863, 938, 967, 1027, 1033], "048": [234, 242, 986], "plot_metadata_rout": [234, 242], "theta_c": [235, 514], "reject": [235, 387, 388, 514, 662, 717, 910, 911, 974, 978, 1028], "likewis": [235, 400, 514], "surround": [235, 374, 836, 984], "cca": [235, 403, 474, 476, 1024, 1028, 1029, 1030, 1032, 1034], "onevsrestclassifi": [235, 266, 268, 277, 398, 818, 820, 890, 1004, 1021, 1022, 1024, 1026, 1027, 1033, 1034], "min_x": 235, "max_x": 235, "plot_subfigur": 235, "min_i": 235, "zero_class": 235, "one_class": 235, "160": [235, 289, 293, 967, 1011], "nfor": 235, "plot_multilabel": [235, 242], "extratreesregressor": [236, 407, 548, 556, 557, 900, 901, 1023, 1026, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037], "n_face": 236, "face_id": 236, "n_pixel": [236, 257], "nn": [236, 408, 686, 1011], "y_test_predict": 236, "true_fac": 236, "completed_fac": 236, "plot_multioutput_face_complet": [236, 242], "benchmark": [237, 279, 313, 346, 347, 360, 367, 369, 374, 385, 390, 393, 398, 459, 506, 888], "iforest": 237, "pharuj": 237, "rajborirug": 237, "ra": 237, "kmitl": 237, "ac": [237, 521, 655, 676, 677, 974, 991, 1013], "preprocess_dataset": 237, "fetch_kddcup99": [237, 369, 1027, 1028, 1029, 1032, 1033], "labelbinar": [237, 268, 387, 731, 819, 854, 863, 874, 979, 1004, 1023, 1024, 1025, 1029, 1034], "dataset_nam": [237, 279], "smtp": [237, 369, 483], "sa": [237, 369, 483], "percent10": [237, 483], "lb": [237, 857, 989], "forestcov": 237, "glass": [237, 369], "wdbc": [237, 371], "cardiotocographi": 237, "tablewar": 237, "x_mal": 237, "y_mal": 237, "x_ben": 237, "y_ben": 237, "x_mal2": 237, "y_mal2": 237, "compute_predict": 237, "negative_outlier_factor_": [237, 286, 836, 984], "datasets_nam": 237, "models_nam": 237, "ceil": [237, 548, 549, 550, 551, 554, 555, 556, 557, 585, 662, 790, 791, 898, 899, 900, 901, 992], "model_idx": 237, "plot_chance_level": [237, 266, 268, 269, 691, 693, 1036], "chance_level_kw": [237, 691, 693, 1036], "plot_outlier_detection_bench": [237, 242], "recalcul": [238, 240, 400, 1017, 1020], "mlpregressormlpregressor": 238, "tree_disp": 238, "mlp_disp": 238, "0x7f6bb29bbe20": 238, "622": [238, 242, 532], "plot_partial_dependence_visualization_api": [238, 242], "deactiv": [239, 368, 372, 375, 380, 390, 401, 790, 791, 1034], "standard_scal": 239, "polynomialfeaturespolynomialfeatur": 239, "pcapca": 239, "svcsvc": [239, 240, 257, 259, 313], "numeric_preprocessor": 239, "imputation_mean": 239, "categorical_preprocessor": [239, 307], "imputation_const": 239, "onehot": [239, 302, 303, 401, 855, 988], "gender": [239, 863, 988], "classifier__n_estim": 239, "classifier__max_featur": 239, "classifier__max_depth": 239, "classifier__criterion": 239, "092": [239, 242, 346], "plot_pipeline_displai": [239, 242], "svc_disp": [240, 311, 1017], "rfc_disp": [240, 311, 1017], "165": [240, 242, 330, 343, 979], "plot_roc_curve_visualization_api": [240, 242], "transform_output": [241, 308, 459, 888, 1035, 1036], "slep018": [241, 376, 1035], "x_test_scal": 241, "894264": 241, "798301": 241, "271411": 241, "327605": 241, "244466": 241, "086944": 241, "327407": 241, "459074": 241, "660797": 241, "462234": 241, "576989": 241, "159419": 241, "933197": 241, "427329": 241, "414810": 241, "039497": 241, "275851": 241, "scaler2": 241, "x_test_np": 241, "x_test_df": 241, "feature_names_in_": [241, 308, 314, 387, 421, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 618, 619, 620, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 790, 791, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 1033, 1034, 1035, 1036], "num_pip": 241, "num_col": 241, "7621951219512195": 241, "log_reg": [241, 315], "config_context": [241, 360, 361, 396, 617, 888, 1027, 1033, 1036], "reset": [241, 356, 382, 525, 667, 668, 669, 830, 831, 859, 860, 870, 1022], "133660": 241, "438059": 241, "894273": 241, "506893": 241, "478": [241, 347], "000619": 241, "182778": 241, "671": [241, 990], "548540": 241, "461032": 241, "817": 241, "487001": 241, "13366001": 241, "4380594": 241, "89427284": 241, "50689261": 241, "00061876": 241, "18277786": 241, "54853974": 241, "46103177": 241, "48700054": 241, "138": [241, 242, 380, 407, 410, 978], "plot_set_output": [241, 242], "auto_examples_miscellan": 242, "bayesiangaussianmixtur": [244, 245, 250, 786, 1026, 1028, 1029, 1033, 1034], "weight_concentration_prior_typ": [244, 250, 785, 977, 1026], "dirichlet_distribut": [244, 785, 977, 1026], "dirichlet_process": [244, 250, 785, 977, 1026], "weight_concentration_prior": [244, 250, 785, 977], "finit": [244, 250, 360, 369, 387, 459, 529, 542, 573, 597, 600, 601, 602, 649, 718, 768, 775, 785, 811, 888, 908, 910, 911, 974, 977, 978, 1002, 1004, 1011, 1027, 1028, 1032, 1034, 1035], "covar": [244, 245, 250], "eig_val": 244, "eig_vec": 244, "unit_eig_vec": 244, "arctan2": [244, 246, 249], "56b4e9": 244, "plot_titl": 244, "weights_": [244, 785, 786, 1034], "covariances_": [244, 245, 246, 249, 250, 785, 786, 1027], "get_xaxi": [244, 289, 301], "set_tick_param": 244, "labelleft": 244, "0072b2": 244, "f0e442": 244, "d55e00": 244, "mean_precision_prior": [244, 250, 785], "nprior": 244, "gamma_0": [244, 250], "reg_covar": [244, 785, 786], "init_param": [244, 247, 250, 785, 786], "concentrations_prior": 244, "387": [244, 251, 1020], "plot_concentration_prior": [244, 251], "_base": [245, 376], "color_it": [245, 249, 250], "dp": [245, 250], "shouldn": [245, 250, 374], "em": [245, 246, 250, 434, 438, 450, 527, 785, 786, 977, 1034], "dpgmm": [245, 250, 1020, 1024, 1026], "plot_gmm": [245, 251], "ronweiss": 246, "make_ellips": 246, "datalim": 246, "skf": [246, 404, 806], "train_index": [246, 323, 404, 788, 789, 792, 794, 795, 796, 797, 800, 802, 803, 804, 805, 806, 807, 808], "test_index": [246, 323, 404, 788, 789, 792, 794, 795, 796, 797, 800, 802, 803, 804, 805, 806, 807, 808], "cov_typ": 246, "means_init": [246, 247, 786], "y_train_pr": 246, "train_accuraci": 246, "y_test_pr": 246, "test_accuraci": [246, 260], "207": [246, 251, 298, 1020], "plot_gmm_covari": [246, 251], "random_from_data": [247, 785, 786, 977], "diamond": 247, "colour": [247, 371, 408, 578, 979], "eventu": [247, 399, 400, 409, 584, 1002], "walsh": [247, 1032, 1034], "timer": [247, 380], "_samples_gener": 247, "extmath": [247, 324, 345, 383, 444, 1020, 1021, 1026, 1027, 1030, 1034, 1035], "row_norm": 247, "x_squared_norm": [247, 451], "get_initial_mean": 247, "times_init": 247, "relative_tim": 247, "ini": 247, "init_tim": 247, "2fx": 247, "551": [247, 251], "plot_gmm_init": [247, 251], "shifted_gaussian": 248, "stretched_gaussian": 248, "score_sampl": [248, 284, 285, 286, 292, 387, 406, 460, 523, 532, 554, 668, 785, 786, 787, 790, 791, 801, 835, 836, 846, 850, 894, 984, 1023, 1028, 1030, 1032], "plot_gmm_pdf": [248, 251], "component_1": 249, "component_2": 249, "best_parameters_": 249, "gmm_bic_scor": 249, "callabl": [249, 263, 387, 404, 408, 409, 411, 412, 432, 434, 435, 436, 437, 438, 440, 441, 443, 448, 450, 451, 455, 456, 457, 458, 522, 524, 526, 528, 530, 536, 537, 548, 549, 550, 551, 552, 553, 555, 556, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 601, 602, 611, 619, 625, 630, 634, 650, 657, 662, 664, 666, 679, 682, 683, 687, 702, 710, 722, 732, 761, 764, 768, 769, 770, 771, 780, 781, 787, 790, 791, 793, 801, 809, 812, 813, 814, 815, 817, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 854, 863, 885, 886, 892, 893, 894, 895, 896, 939, 945, 948, 962, 967, 978, 988, 1020, 1024, 1027, 1028, 1029, 1030, 1032, 1034, 1036], "0x7f6bca02b4c0": 249, "gaussianmixturegaussianmixtur": 249, "param_n_compon": 249, "param_covariance_typ": 249, "829429": 249, "1084": 249, "038689": 249, "1114": 249, "517272": 249, "1148": 249, "512281": 249, "1179": 249, "977890": 249, "catplot": 249, "hue": [249, 259, 282, 306, 371], "eigenvalu": [249, 397, 400, 402, 443, 453, 460, 461, 462, 463, 464, 465, 466, 467, 526, 532, 540, 664, 679, 680, 682, 684, 686, 856, 975, 988, 1022, 1026, 1029, 1030, 1031, 1032], "plot_gmm_select": [249, 251], "liberti": 250, "judgment": [250, 978], "panel": [250, 284, 301, 406, 998], "primarili": [250, 264, 374, 387, 396, 400, 936, 1002, 1029, 1030], "covariance_prior": [250, 785], "plot_gmm_sin": [250, 251], "auto_examples_mixtur": 251, "mislabel": [253, 407, 980], "imbal": [253, 262, 404, 698, 719, 720, 728, 773, 774, 777, 778, 978], "life": [253, 382, 975], "set_printopt": 253, "titles_opt": 253, "plot_confusion_matrix": [253, 275, 311, 1030, 1031, 1032, 1033], "groupkfold": [254, 264, 391, 404, 585, 787, 790, 791, 792, 793, 794, 795, 796, 801, 805, 809, 811, 812, 813, 814, 817, 1008, 1026, 1033], "groupshufflesplit": [254, 404, 1008, 1026], "shufflesplit": [254, 261, 340, 404, 789, 795, 797, 807, 816, 1008, 1020, 1021, 1023, 1025, 1026], "stratifiedgroupkfold": [254, 1033], "stratifiedshufflesplit": [254, 332, 404, 1008, 1020, 1021, 1026, 1027, 1033], "1338": 254, "cmap_data": 254, "cmap_cv": 254, "coolwarm": [254, 329], "n_point": [254, 830, 831], "percentiles_class": 254, "perc": 254, "group_prior": 254, "visualize_group": 254, "yticklabel": [254, 345], "ngroup": 254, "nclass": 254, "plot_cv_indic": [254, 275], "tr": [254, 371, 378, 400, 402, 460, 461, 462, 463, 464, 465, 466, 467, 828], "this_cv": 254, "plot_cv_predict": [255, 275], "fnr": [256, 689, 717], "det_curv": [256, 689, 772, 779, 978, 1032, 1033], "commonli": [256, 367, 387, 400, 401, 410, 605, 748, 749, 785, 819, 862, 975, 976, 978, 979, 981, 1036], "detcurvedisplai": [256, 314, 717, 1032, 1033], "ax_roc": 256, "ax_det": 256, "feedback": [256, 373, 374, 375, 388, 998, 1028], "plot_det": [256, 275], "n_imag": 257, "print_datafram": 257, "filtered_cv_result": 257, "mean_precis": 257, "std_precis": 257, "mean_recal": 257, "std_recal": 257, "mean_test_precis": [257, 263], "std_test_precis": 257, "mean_test_recal": 257, "std_test_recal": 257, "03f": 257, "refit_strategi": 257, "best_index": [257, 263], "precision_threshold": 257, "high_precision_cv_result": 257, "rank_test_recal": 257, "rank_test_precis": [257, 263], "best_recall_std": 257, "best_recal": 257, "best_recall_threshold": 257, "high_recall_cv_result": 257, "fastest_top_recall_high_precision_index": 257, "idxmin": 257, "063": [257, 259, 428], "061": 257, "069": 257, "039": [257, 297, 299, 741, 771, 978], "780": 257, "083": 257, "905": [257, 315, 318], "058": [257, 371], "890": 257, "073": [257, 462, 463], "695": 257, "743": [257, 1011], "611": [257, 259, 532], "744": [257, 279], "618": 257, "004859": 257, "877206": 257, "069196": 257, "0x7f6bc86350d0": 257, "807": [257, 259], "994": [257, 275, 279], "plot_grid_search_digit": [257, 275], "minimis": [258, 400, 404, 649, 650, 994], "219": 258, "260": [258, 1033], "york": [258, 778, 785, 968, 978, 990], "usa": [258, 369, 887, 968, 975, 990, 991], "best_index_": [258, 263, 787, 790, 791, 801], "wenhao": [258, 1028, 1029], "zhang": [258, 400, 433, 655, 670, 676, 677, 680, 684, 748, 749, 974, 975, 976, 980, 992, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1036], "wenhaoz": 258, "ucla": [258, 974], "lower_bound": 258, "best_score_idx": 258, "best_low_complex": 258, "fewest": [258, 618], "candidate_idx": 258, "param_reduce_dim__n_compon": 258, "plot_grid_search_refit_cal": [258, 275], "moon": [259, 296, 303, 345, 346, 513], "moder": [259, 374, 410, 445, 984], "repeatedstratifiedkfold": [259, 404, 802, 806, 1027], "repetit": [259, 379, 404, 802, 803, 986, 1034], "rank_test_scor": [259, 267, 787, 801, 1026], "rename_axi": 259, "9400": 259, "079297": 259, "9300": 259, "077846": 259, "3_poli": 259, "9044": [259, 1027], "098776": 259, "2_poli": 259, "6852": 259, "169106": 259, "certainti": [259, 376, 732, 978], "repreat": 259, "model_scor": [259, 277], "regex": [259, 347, 455, 457], "_test_scor": [259, 463, 585, 1033], "lineplot": 259, "labelpad": 259, "882561": 259, "783392": 259, "351390": 259, "746492": 259, "298688": 259, "355440": 259, "nadeau": [259, 1028], "bengio": [259, 847, 848, 967, 991], "framework": [259, 360, 376, 385, 387, 394, 400, 628, 679, 785, 974, 975, 982, 996, 999, 1002, 1020, 1026], "diebold": 259, "mariano": 259, "proven": [259, 972, 976, 1002], "replic": [259, 373, 376], "cdot": [259, 397, 400, 405, 406, 410, 605, 606, 610, 613, 614, 856, 970, 972, 978, 982, 988], "sum_": [259, 268, 340, 397, 398, 400, 405, 406, 407, 529, 531, 538, 687, 745, 972, 974, 975, 978, 980, 982, 983, 985, 986, 988, 992, 993, 994], "ij": [259, 289, 397, 400, 405, 529, 531, 538, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 974, 975, 978, 980, 983, 993], "corrected_std": 259, "crossvalid": [259, 273], "corrected_var": 259, "ddof": [259, 870, 881], "compute_corrected_ttest": 259, "t_stat": 259, "p_val": 259, "model_1_scor": 259, "model_2_scor": 259, "ncorrect": 259, "uncorrect": [259, 586, 589], "t_stat_uncorrect": 259, "p_val_uncorrect": 259, "convent": [259, 363, 374, 376, 377, 378, 380, 387, 418, 419, 422, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 460, 461, 462, 463, 464, 465, 466, 467, 499, 500, 522, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 538, 554, 557, 560, 561, 572, 573, 574, 579, 580, 582, 618, 619, 620, 621, 668, 679, 680, 681, 682, 709, 785, 786, 818, 819, 834, 836, 838, 842, 854, 862, 865, 866, 868, 882, 883, 894, 921, 922, 978, 1005, 1020, 1027, 1028, 1031, 1033, 1034, 1036], "benavoli": 259, "colleagu": 259, "conjug": [259, 443, 453, 663, 665, 678, 686, 974], "overlin": [259, 397], "t_post": 259, "ppf": 259, "infin": [259, 532, 673, 674, 703, 811, 897, 909, 981], "minu": [259, 750, 978], "better_prob": 259, "cdf": 259, "773": [259, 345, 639, 828], "essenti": [259, 316, 372, 376, 400, 404, 405, 500, 970, 978, 981, 999, 1002, 1028], "rope": 259, "rope_interv": 259, "rope_prob": 259, "432": [259, 402], "x_rope": 259, "uncertain": [259, 321, 373], "credibl": 259, "cred_interv": 259, "cred_int_df": 259, "000977": 259, "019023": 259, "005422": 259, "025422": 259, "016445": 259, "036445": 259, "bonferroni": 259, "n_comparison": 259, "pairwise_t_test": 259, "model_i": 259, "model_k": 259, "model_i_scor": 259, "model_k_scor": 259, "pairwise_comp_df": 259, "model_1": 259, "model_2": 259, "657": 259, "565": 259, "276": 259, "851": 259, "pairwise_bayesian": 259, "worse_prob": 259, "pairwise_bayesian_df": 259, "882": 259, "dietterich": [259, 820, 979], "1998": [259, 369, 371, 405, 407, 546, 547, 820, 825, 856, 979, 980, 982, 988, 992], "bouckaert": 259, "frank": [259, 821, 979, 1025, 1029, 1030], "pacif": 259, "asia": [259, 988], "confer": [259, 369, 400, 405, 411, 430, 435, 441, 502, 526, 554, 687, 699, 716, 746, 846, 847, 848, 978, 984, 990, 994], "discoveri": [259, 369, 380, 383, 400, 407, 409, 411, 435, 502, 546, 547, 554, 583, 586, 587, 589, 590, 591, 597, 711, 730, 773, 978, 990, 1002, 1034, 1035], "corani": 259, "dem\u0161ar": 259, "zaffalon": 259, "accompani": [259, 1028], "1995": [259, 371, 398, 407, 544, 545, 820, 887, 979], "144": [259, 380, 1020], "plot_grid_search_stat": [259, 275], "loader": [260, 324, 345, 367, 368, 369, 489, 490, 499, 998, 999, 1013, 1020, 1025, 1027, 1028, 1031], "857": [260, 346], "complementnb": [260, 345, 825, 826, 828, 829, 980, 1028, 1032, 1033, 1035], "tfidfvectorizertfidfvector": 260, "complementnbcomplementnb": 260, "vect__": 260, "clf__": 260, "parameter_grid": 260, "vect__max_df": 260, "vect__min_df": 260, "vect__ngram_rang": [260, 1013], "unigram": [260, 369, 408, 579, 580, 582, 1027], "bigram": [260, 408, 579, 580, 582, 1013], "vect__norm": 260, "clf__alpha": [260, 1013], "exhaust": [260, 311, 312, 313, 314, 315, 316, 317, 360, 371, 379, 386, 395, 400, 787, 790, 791, 801, 880, 881, 883, 974, 1013, 1015], "parallelis": [260, 459, 888, 1027], "random_search": [260, 267], "best_paramet": 260, "get_param": [260, 377, 387, 410, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 790, 791, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 967, 1030, 1031, 1032, 1034, 1035], "ambigu": [260, 379, 408, 563, 703, 927, 981, 1029, 1031, 1033], "shorten_param": 260, "xanchor": 260, "yanchor": 260, "autom": [260, 378, 390, 683, 967, 974, 975, 978, 998, 1002], "parallel_coordin": 260, "understood": [260, 374, 400, 1010], "column_result": 260, "transform_func": 260, "fromkei": [260, 905], "ngram_rang": [260, 324, 408, 579, 580, 582], "color_continuous_scal": 260, "viridis_r": 260, "slide": [260, 635, 974, 997, 998], "intersect": [260, 329, 397, 400, 728], "undo": [260, 860, 1024], "stronger": [260, 634, 643, 649, 650, 663, 664, 665, 666, 667, 669, 678], "742": [260, 275], "plot_grid_search_text_feature_extract": [260, 275], "ax_idx": 261, "resort": [261, 369, 546, 1030], "learning_curv": [261, 316, 793, 973, 1023, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1035], "return_tim": [261, 814, 1030], "test_scores_nb": 261, "fit_times_nb": 261, "score_times_nb": 261, "test_scores_svm": 261, "fit_times_svm": 261, "score_times_svm": 261, "score_tim": [261, 404, 813, 814], "inflect": 261, "plot_learning_curv": [261, 275], "class_likelihood_ratio": [262, 978, 1035], "medicin": [262, 703, 978], "medic": [262, 404, 703, 974, 1002], "truli": [262, 266, 362, 703, 978], "odd": [262, 407, 505, 703, 978, 1027, 1028], "suppos": [262, 320, 360, 361, 376, 380, 402, 407, 408, 409, 548, 552, 555, 649, 650, 657, 659, 665, 666, 667, 732, 836, 890, 892, 895, 898, 900, 916, 982, 1029, 1031, 1037], "physiolog": [262, 371, 1011], "hopefulli": [262, 382, 1020], "indirect": [262, 375, 387], "bio": 262, "diagnos": [262, 371, 382, 389, 401], "diagnosi": [262, 371, 837], "pos_lr": 262, "neg_lr": 262, "raise_warn": [262, 703, 964], "positive_likelihood_ratio": [262, 703], "negative_likelihood_ratio": [262, 703], "extract_scor": 262, "test_positive_likelihood_ratio": 262, "test_negative_likelihood_ratio": 262, "718894": 262, "724619": 262, "321091": 262, "054054": 262, "108843": 262, "986989": 262, "268147": 262, "034278": 262, "diagnost": [262, 367, 387, 491, 703, 812, 813, 978, 998, 999, 1015], "most_frequ": [262, 542, 618, 621, 840, 968, 978, 1028, 1030, 1032], "undefin": [262, 387, 703, 719, 728, 731, 773, 947, 978, 1028, 1032, 1036], "373333": 262, "5557": 262, "235430": 262, "stand": [262, 347, 378, 385, 405, 522, 528, 536, 537, 587, 600, 669, 696, 708, 726, 727, 747, 776, 778, 783, 977, 978, 984], "lr_base": 262, "pos_lr_bas": 262, "pos_lr_base_std": 262, "neg_lr_bas": 262, "neg_lr_base_std": 262, "plot_indic": 262, "scoring_on_bootstrap": 262, "n_bootstrap": [262, 1021], "results_for_preval": 262, "bootstrap_indic": 262, "default_rng": 262, "2039": 262, "507943": 262, "113516": 262, "207667": 262, "009778": 262, "3419": 262, "445329": 262, "125197": 262, "198280": 262, "008907": 262, "422287": 262, "123864": 262, "192630": 262, "006340": 262, "6196": [262, 1025], "410507": 262, "163975": 262, "193761": 262, "005864": 262, "7578": [262, 1027], "335398": 262, "175224": 262, "189120": 262, "005820": 262, "8963": 262, "198284": 262, "238943": 262, "185496": 262, "005020": 262, "band": [262, 303, 988], "088": [262, 275, 354, 355, 660, 986], "plot_likelihood_ratio": [262, 275], "scorer_nam": [263, 787, 801], "predefin": [263, 800, 967, 981, 1008, 1035], "403": 263, "maskedarrai": [263, 1026], "param_min_samples_split": 263, "sample_score_mean": 263, "sample_score_std": 263, "std_": [263, 1025], "rank_test_": 263, "best_scor": 263, "mean_test_": 263, "713": [263, 275], "plot_multi_metric_evalu": [263, 275], "cawlei": [264, 978], "talbot": 264, "mach": [264, 398, 404, 584, 585], "2079": 264, "2107": 264, "007581": 264, "007833": 264, "num_trial": 264, "x_iri": [264, 1012], "y_iri": [264, 1012], "p_grid": 264, "non_nested_scor": 264, "nested_scor": 264, "leaveoneout": [264, 404, 1008], "leaveonegroupout": [264, 404, 788, 795, 796, 1008, 1026], "inner_cv": 264, "outer_cv": 264, "non_nest": 264, "score_differ": 264, "211": [264, 311, 316, 318, 323, 866, 878], "non_nested_scores_lin": 264, "nested_lin": 264, "difference_plot": 264, "plot_nested_cross_validation_iri": [264, 275], "permutation_test_scor": [265, 404, 1020, 1027, 1032], "plant": [265, 268, 269, 367, 978, 1015], "uncorrel": [265, 370, 519, 525, 532, 978, 1011], "n_uncorrelated_featur": 265, "x_rand": 265, "undergo": 265, "score_iri": 265, "perm_scores_iri": 265, "pvalue_iri": 265, "n_permut": [265, 404, 815], "score_rand": 265, "perm_scores_rand": 265, "pvalue_rand": 265, "evid": [265, 345, 382, 400, 404, 405, 407, 635, 785, 977], "ndata": 265, "destroi": [265, 408, 783, 859, 988], "ojala": [265, 404, 815], "garriga": [265, 404, 815], "362": [265, 275], "plot_permutation_tests_for_classif": [265, 275], "t_p": 266, "plu": [266, 371, 379, 670, 821, 824, 979, 992], "f_p": 266, "f_n": 266, "denomin": [266, 408, 413, 466, 581, 695, 747, 972], "stairstep": 266, "ap": [266, 698, 699, 978], "sum_n": [266, 698, 978], "r_n": [266, 698, 978], "p_n": [266, 698, 978], "nth": [266, 698, 978], "r_k": 266, "p_k": [266, 978], "trapezoid": [266, 697, 698, 978], "binar": [266, 268, 269, 366, 368, 399, 401, 744, 825, 854, 855, 857, 861, 863, 874, 978, 980, 1004, 1015, 1034, 1036], "average_precision_scor": [266, 691, 697, 699, 732, 772, 778, 978, 1020, 1023, 1027, 1028, 1034, 1036], "differenti": [266, 407, 410, 550, 551, 610, 613], "mt19937": [266, 271, 1031], "0x7f6bcb94be40": [266, 271], "precisionrecalldisplai": [266, 314, 772, 774, 777, 978, 1030, 1033, 1036], "label_binar": [266, 268, 857, 1024], "average_precis": [266, 691, 698, 732, 978], "prevalence_pos_label": [266, 691], "setup": [266, 268, 360, 372, 376, 380, 382, 981, 1005], "f_score": 266, "extens": [266, 268, 284, 360, 361, 368, 369, 372, 375, 377, 378, 382, 383, 385, 394, 400, 405, 487, 494, 525, 731, 921, 929, 975, 977, 978, 997, 998, 1002, 1020, 1026, 1033, 1034, 1036], "plot_precision_recal": [266, 275], "deem": [267, 268, 525, 986, 1033], "01761326452827255": 267, "14458295175799263": 267, "981": [267, 371, 978], "015": [267, 314, 318, 346, 350, 986], "2610311314285183": 267, "003999234857448686": 267, "980": 267, "01672701940764589": 267, "5720620992012775": 267, "996": 267, "6666666666666666": 267, "2222222222222222": 267, "1111111111111111": 267, "n_top": 267, "param_dist": [267, 271, 313], "n_iter_search": 267, "plot_randomized_search": [267, 275], "unambigu": [268, 979, 1026], "notion": [268, 346, 362, 385, 400, 405, 407, 974, 978], "scheme": [268, 284, 307, 308, 369, 387, 400, 404, 406, 408, 557, 581, 649, 650, 696, 800, 857, 858, 861, 863, 867, 871, 874, 879, 890, 895, 967, 974, 988, 992, 1020, 1028, 1031, 1032], "harder": [268, 269, 305, 369, 373, 376, 382, 400, 506, 552, 553, 1001], "bulk": [268, 411, 435], "scrutin": 268, "y_onehot_test": 268, "class_id": [268, 269], "class_of_interest": 268, "nvirginica": 268, "versicolor": [268, 269, 495], "tp_c": 268, "fn_c": 268, "fp_c": 268, "tn_c": 268, "briefli": [268, 373, 386, 407, 967, 1030], "nreceiv": 268, "micro_roc_auc_ovr": 268, "mcclish": [268, 778], "deci": 268, "1989": [268, 626, 778, 847, 848, 974, 981], "jul": 268, "fpr_grid": 268, "mean_tpr": [268, 269], "interp": [268, 269, 332], "macro_roc_auc_ovr": 268, "deeppink": 268, "aqua": 268, "role": [268, 360, 373, 385, 405, 996], "pair_list": 268, "pair_scor": 268, "label_a": 268, "label_b": 268, "a_mask": 268, "b_mask": 268, "ab_mask": 268, "a_tru": 268, "b_true": 268, "idx_a": 268, "idx_b": 268, "fpr_a": 268, "tpr_a": 268, "fpr_b": 268, "tpr_b": 268, "macro_roc_auc_ovo": 268, "ovo_tpr": 268, "pool": [268, 385, 436, 626, 947, 999, 1031], "731": [268, 275], "plot_roc": [268, 275], "mean_fpr": 269, "viz": [269, 381], "interp_tpr": 269, "mean_auc": 269, "std_auc": 269, "std_tpr": 269, "tprs_upper": 269, "tprs_lower": 269, "plot_roc_crossv": [269, 275], "halvinggridsearchcv": [270, 271, 313, 570, 791, 967, 1032, 1034, 1035], "1e4": [270, 650, 670, 884, 990], "gsh": 270, "gsh_time": 270, "gs_time": 270, "make_heatmap": 270, "is_sh": 270, "make_cbar": 270, "param_c": [270, 787], "param_gamma": [270, 787, 801], "sh": [270, 378, 382, 967], "scores_matrix": 270, "pivot_t": 270, "aggfunc": 270, "0e": [270, 540, 541], "get_xticklabel": 270, "rotation_mod": 270, "cbar_ax": 270, "plot_successive_halving_heatmap": [270, 275], "rsh": [271, 313], "_distn_infrastructur": 271, "rv_discrete_frozen": 271, "0x7f6bc9cd1c70": 271, "0x7f6bb6c238e0": 271, "halvingrandomsearchcvhalvingrandomsearchcv": 271, "params_str": 271, "drop_dupl": 271, "n_resources_": [271, 790, 791, 967], "nn_candid": 271, "n_candidates_": [271, 790, 791, 967], "n_iterations_": [271, 790, 791], "multialign": 271, "plot_successive_halving_iter": [271, 275], "n_samples_train": [272, 892, 893, 894, 895, 896], "n_samples_test": [272, 892, 893, 894, 895, 896, 981, 988], "train_error": 272, "test_error": 272, "i_alpha_optim": 272, "alpha_optim": 272, "0002652948464431897": 272, "plot_train_error_vs_test_error": [272, 275], "nonlinear": [273, 314, 635, 679, 680, 684, 687, 856, 974, 975, 983, 988], "true_fun": 273, "polynomial_featur": 273, "plot_underfitting_overfit": [273, 275], "validationcurvedisplai": [274, 973, 1036], "subset_mask": 274, "isin": 274, "param_rang": [274, 317, 340, 809, 817, 973], "radiu": [274, 286, 332, 371, 400, 433, 441, 679, 754, 771, 830, 831, 832, 833, 834, 838, 840, 841, 842, 844, 981, 1022, 1024, 1034], "672": [274, 275], "plot_validation_curv": [274, 275], "926": 275, "auto_examples_model_select": 275, "yeast": 277, "2417": 277, "jaccard": [277, 397, 441, 448, 694, 710, 719, 724, 728, 768, 769, 770, 784, 981, 1028, 1029], "adam": [277, 296, 847, 848, 982, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "kleczewski": [277, 1027, 1028], "jaccard_scor": [277, 694, 719, 724, 784, 978, 1029, 1032], "classifierchain": [277, 387, 822, 824, 1027, 1032, 1035], "40597": 277, "wrapper": [277, 279, 380, 383, 404, 410, 535, 611, 662, 890, 994, 998, 1024, 1032], "base_lr": [277, 821], "y_pred_ovr": 277, "ovr_jaccard_scor": 277, "y_pred_chain": 277, "chain_jaccard_scor": 277, "y_pred_ensembl": 277, "ensemble_jaccard_scor": 277, "x_po": 277, "431": [277, 278, 371], "plot_classifier_chain_yeast": [277, 278], "auto_examples_multioutput": 278, "kneighborstransform": [279, 281, 311, 842, 981, 1030, 1034, 1035], "nmslib": 279, "pynndesc": 279, "pip": [279, 311, 312, 313, 314, 315, 316, 317, 361, 372, 374, 378, 380, 390, 994], "pynndescenttransform": 279, "csr_matrix": [279, 312, 431, 435, 443, 487, 525, 535, 548, 549, 550, 551, 554, 555, 556, 557, 579, 584, 585, 705, 816, 865, 892, 893, 895, 896, 898, 899, 900, 901, 979, 988, 992, 993, 994, 1035], "nmslibtransform": 279, "sw": 279, "n_samples_fit_": [279, 832, 833, 834, 836, 838, 840, 841, 842], "cosinesimil": 279, "nmslib_": 279, "adddatapointbatch": 279, "createindex": 279, "n_samples_transform": [279, 834, 842], "thread": [279, 312, 315, 372, 385, 387, 400, 407, 822, 823, 944, 945, 946, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1035, 1036], "num_thread": 279, "knnquerybatch": 279, "mnist_10000": 279, "mnist_20000": 279, "20_000": 279, "tsne_param": 279, "barnes_hut": [279, 683, 1027, 1028], "parallel_batch_queri": 279, "msg": [279, 962], "transformer_nam": 279, "longest": 279, "fit_dur": 279, "transform_dur": 279, "208": [279, 371], "315": [279, 371], "823": 279, "884": 279, "769": [279, 351, 355], "733": 279, "759": 279, "numba": [279, 999], "cold": 279, "nearestneighbor": [279, 315, 390, 400, 411, 435, 437, 439, 452, 679, 680, 684, 832, 833, 834, 836, 840, 841, 842, 981, 1020, 1024, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "i_ax": 279, "int32": [279, 308, 374, 387, 434, 438, 440, 442, 444, 892, 893, 894, 895, 896, 943, 993, 1029, 1035, 1036], "828": 279, "955": [279, 404, 645], "brute": [279, 385, 395, 404, 411, 435, 437, 441, 448, 623, 624, 679, 680, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 985, 1015, 1024, 1028, 1032, 1035, 1036], "spent": [279, 307, 375, 380, 814, 1035], "approximate_nearest_neighbor": [279, 293], "slow": [281, 301, 345, 360, 368, 372, 374, 405, 408, 438, 864, 865, 869, 892, 895, 927, 975, 981, 999, 1012, 1027], "temporarydirectori": [281, 311], "n_neighbors_list": 281, "graph_model": 281, "classifier_model": 281, "sklearn_graph_cache_": 281, "tmpdir": [281, 311], "full_model": 281, "classifier__n_neighbor": 281, "grid_model": 281, "plot_caching_nearest_neighbor": [281, 293], "cmap_light": [282, 287, 290], "cmap_bold": [282, 287, 290], "darkblu": [282, 290], "neighbour": [282, 437, 453, 683, 983], "488": [282, 293], "plot_classif": [282, 293], "79269019073225": 283, "kerneldens": [283, 284, 292, 406, 1022, 1028, 1029, 1033, 1034, 1035], "new_data": [283, 376], "4x11": 283, "real_data": 283, "set_clim": 283, "plot_digits_kde_sampl": [283, 293], "block": [284, 301, 315, 369, 371, 374, 379, 382, 387, 397, 400, 403, 406, 443, 444, 453, 464, 470, 471, 479, 480, 502, 504, 686, 946, 981, 983], "wildli": [284, 977], "kd": [284, 400, 406, 981, 1028, 1029, 1030], "jakevdp": [284, 292], "aaaaff": [284, 287], "tophat": [284, 406, 830, 831, 835], "log_den": 284, "x_src": 284, "format_func": 284, "ih": 284, "epanechnikov": [284, 406, 830, 831, 835], "funcformatt": 284, "nullloc": 284, "true_den": 284, "plot_kde_1d": [284, 293], "631": [285, 293], "plot_lof_novelty_detect": [285, 293], "x_inlier": 286, "n_error": 286, "x_score": [286, 473, 474, 475, 476], "legend_handl": 286, "handlerpathcollect": 286, "update_legend_marker_s": 286, "update_from": 286, "set_siz": 286, "handler_map": 286, "update_func": 286, "086": [286, 293], "plot_lof_outlier_detect": [286, 293], "ffaaaa": 287, "aaffaa": 287, "00ff00": 287, "plot_nca_classif": [287, 293], "neighborhoodcomponentanalysi": 288, "dim_reduction_method": 288, "acc_knn": 288, "x_embed": [288, 289, 683, 687, 839, 981], "ntest": 288, "781": [288, 293], "plot_nca_dim_reduct": [288, 293], "logsumexp": [289, 1027], "get_yaxi": [289, 301], "link_thickness_i": 289, "diff_embed": 289, "dist_embed": 289, "einsum": 289, "exp_dist_embed": 289, "relate_point": 289, "pt_i": 289, "pt_j": 289, "plot_nca_illustr": [289, 293], "8133333333333334": 290, "nearestcentroid": [290, 345, 979, 981, 1020, 1024, 1027, 1032, 1035], "shrink_threshold": [290, 837, 981, 1020, 1032], "plot_nearest_centroid": [290, 293], "barycent": [291, 1020], "176": [291, 293, 380, 823, 979, 986], "plot_regress": [291, 293], "geospati": [292, 406], "haversin": [292, 406, 752, 754, 981, 1029, 1032], "latitud": [292, 301, 369, 489, 754], "longitud": [292, 301, 369, 489, 754], "xtrain": 292, "ytrain": 292, "radian": [292, 754], "land_mask": 292, "ball_tre": [292, 411, 435, 441, 448, 679, 680, 832, 833, 834, 835, 836, 838, 840, 841, 842, 981, 1020], "ocean": 292, "511": [292, 293], "plot_species_kd": [292, 293], "auto_examples_neighbor": 293, "combat": [295, 405], "lesser": [295, 387, 433, 532, 974], "curvatur": 295, "plot_mlp_alpha": [295, 299], "bfg": [296, 601, 602, 639, 640, 649, 660, 663, 665, 671, 678, 981, 982, 1035], "980000": 296, "096950": 296, "momentum": [296, 847, 848, 982], "049530": 296, "nesterov": [296, 847, 848, 982, 1036], "049540": 296, "360000": 296, "978444": 296, "860000": 296, "503452": 296, "504185": 296, "045311": 296, "956038": 296, "243802": 296, "992766": 296, "041297": 296, "993879": 296, "042898": 296, "638843": 296, "855465": 296, "912632": 296, "290584": 296, "909293": 296, "318387": 296, "991653": 296, "045934": 296, "840000": 296, "601052": 296, "940000": 296, "157334": 296, "154453": 296, "500000": 296, "692470": 296, "689143": 296, "689751": 296, "150527": 296, "850000": 296, "341523": 296, "336188": 296, "335919": 296, "689015": 296, "830000": 296, "512595": 296, "513034": 296, "930000": 296, "170087": 296, "schedul": [296, 361, 667, 668, 669, 847, 848, 946, 992, 1002, 1027], "nesterovs_momentum": [296, 847, 848], "invscal": [296, 667, 668, 669, 847, 848, 992], "plot_arg": 296, "plot_on_dataset": 296, "nlearn": 296, "loss_": [296, 550, 847, 848, 982, 1034], "loss_curve_": [296, 847, 848], "data_set": 296, "get_lin": 296, "881": [296, 299], "plot_mlp_training_curv": [296, 299], "28x28": 297, "784": 297, "throw": [297, 383, 909, 1024, 1027, 1028, 1029, 1030, 1034], "infrastructur": [297, 317, 996, 998, 999], "44139186": 297, "19174891": 297, "13983521": 297, "11378556": 297, "09443967": 297, "07846529": 297, "06506307": 297, "05534985": 297, "986429": 297, "953061": 297, "plot_mnist_filt": [297, 299], "greyscal": 298, "bernoulli": [298, 408, 409, 825, 826, 827, 828, 829, 846, 847, 848, 853, 974, 988, 1000, 1015, 1020], "bernoullirbm": [298, 847, 848, 983, 988, 1022, 1023, 1032, 1034], "yann": [298, 1020, 1022], "dauphin": [298, 1022], "gabriel": [298, 1028, 1029, 1030, 1033, 1034], "synnaev": 298, "convolv": 298, "minmax_scal": [298, 301, 860, 1025, 1028], "nudge_dataset": 298, "1px": 298, "direction_vector": 298, "apply_along_axi": 298, "feature_rang": [298, 860, 876, 988, 1022, 1032], "cg": [298, 649, 650, 663, 665, 678, 974, 1024, 1025, 1027, 1031, 1033, 1034], "rbm": [298, 846, 847, 848, 983], "rbm_features_classifi": 298, "6000": [298, 618], "raw_pixel_classifi": 298, "194": [298, 336, 343], "181": [298, 380], "plot_rbm_logistic_classif": [298, 299], "908": [299, 978], "auto_examples_neural_network": 299, "incom": [301, 369, 431], "unscal": [301, 306, 974, 978, 1028, 1034], "unterthin": [301, 1023, 1024, 1025], "medinc": [301, 313, 369], "houseag": [301, 313, 369], "averoom": [301, 313, 369], "room": [301, 369, 379, 400, 1001], "avebedrm": [301, 369], "bedroom": [301, 369], "aveoccup": [301, 313, 369], "features_idx": 301, "quantile_rang": [301, 868, 880, 1026], "yeo": [301, 305, 866, 878, 988, 1028, 1034, 1036], "cox": [301, 305, 866, 878, 988, 1028, 1036], "plasma": 301, "plasma_r": 301, "create_ax": 301, "bottom_h": 301, "left_h": 301, "rect_scatt": 301, "rect_histx": 301, "rect_histi": 301, "ax_scatt": 301, "ax_histx": 301, "ax_histi": 301, "ax_scatter_zoom": 301, "ax_histx_zoom": 301, "ax_histy_zoom": 301, "rect_colorbar": 301, "ax_colorbar": 301, "plot_distribut": 301, "hist_nbin": 301, "x0_label": 301, "x1_label": 301, "hist_x1": 301, "hist_x0": 301, "aesthet": [301, 994, 1025], "tick_bottom": 301, "tick_left": 301, "outward": 301, "ec": [301, 521], "make_plot": 301, "item_idx": 301, "ax_zoom_out": 301, "ax_zoom_in": 301, "zoom_in_percentile_rang": 301, "cutoffs_x0": 301, "cutoffs_x1": 301, "non_outliers_mask": 301, "colorbarbas": 301, "OR": [301, 400, 411, 435, 1031], "indistinguish": 301, "quadrant": 301, "509": [301, 309], "plot_all_sc": [301, 309, 859, 860, 862, 866, 867, 868, 870, 875, 876, 877, 878, 879, 880, 881], "straightforward": [302, 373, 405, 1002], "anywher": 302, "qinhanmin2005": 302, "sina": [302, 1033], "rnd": 302, "enc": [302, 304, 315, 317, 863, 864, 988], "x_bin": 302, "line_bin": 302, "plot_discret": [302, 309], "get_nam": 303, "broader": [303, 974], "logisticregression__c": 303, "linearsvc__c": 303, "kbinsdiscretizer__n_bin": 303, "gradientboostingclassifier__learning_r": 303, "svc__c": [303, 850], "cm_piyg": 303, "piyg": 303, "b30065": 303, "178000": 303, "est_idx": 303, "plot_discretization_classif": [303, 309], "centers_0": 304, "centers_1": 304, "x_list": 304, "grid_encod": 304, "stripe": 304, "682": [304, 309, 380], "plot_discretization_strategi": [304, 309], "powertransform": [305, 867, 878, 968, 988, 1028, 1031, 1034, 1036], "johnwon": 305, "weibul": 305, "bimod": [305, 406], "ineffect": [305, 988, 1028, 1029], "eric": [305, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "ericchang2017": 305, "northwestern": [305, 649], "contact": [305, 385, 998], "font_siz": 305, "304": [305, 371], "bc": 305, "qt": [305, 867], "x_lognorm": [305, 988], "x_chisq": 305, "chisquar": 305, "x_weibul": 305, "x_gaussian": 305, "x_uniform": 305, "loc_a": 305, "loc_b": 305, "x_a": 305, "x_b": 305, "x_bimod": 305, "d81b60": 305, "0188ff": 305, "ffc107": 305, "b7a2ff": 305, "2ec5ac": 305, "figaspect": 305, "axes_idx": 305, "axes_list": 305, "x_trans_bc": 305, "lmbda_bc": 305, "lambdas_": [305, 866, 1033, 1036], "x_trans_yj": 305, "lmbda_yj": 305, "x_trans_qt": 305, "ax_origin": 305, "ax_bc": 305, "ax_yj": 305, "ax_qt": 305, "x_tran": [305, 317, 376, 396, 433, 455, 866, 871, 878, 988], "meth_nam": 305, "lmbda": 305, "plot_map_data_to_norm": [305, 309], "involv": [306, 311, 332, 360, 362, 369, 374, 378, 387, 388, 403, 410, 818, 819, 975, 979, 981, 985, 993, 998, 1002, 1011, 1028], "kneighbor": [306, 315, 832, 833, 834, 836, 838, 981, 1024, 1029, 1033, 1034, 1035, 1036], "obatin": 306, "tyler": [306, 1027, 1033, 1034, 1035], "lanigan": [306, 1027], "tylerlanigan": 306, "sebastian": [306, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "raschka": [306, 1025, 1026, 1027, 1028, 1029, 1032], "sebastianraschka": 306, "alcohol": [306, 371], "malic": [306, 371], "acid": [306, 371], "scaled_x_train": 306, "x_plot_scal": 306, "fit_and_plot_model": 306, "scaled_pca": 306, "x_train_transform": [306, 356, 404], "x_train_std_transform": 306, "first_pca_compon": 306, "target_class": 306, "repercuss": 306, "logisticregressioncv": [306, 387, 391, 649, 974, 979, 1024, 1025, 1026, 1028, 1029, 1030, 1034, 1035], "unscaled_clf": 306, "scaled_clf": 306, "y_pred_scal": 306, "y_proba_sc": 306, "0824": 306, "vastli": 306, "plot_scaling_import": [306, 309], "targetencod": [307, 308, 863, 864, 988, 1036], "review": [307, 360, 369, 376, 377, 378, 379, 380, 385, 388, 404, 405, 526, 532, 978, 988, 1005], "wine_review": 307, "42074": 307, "countri": [307, 975], "provinc": 307, "region_1": 307, "region_2": 307, "wineri": 307, "tremend": [307, 407], "variet": 307, "hail": 307, "martha": 307, "vineyard": 307, "235": 307, "napa": 307, "vallei": 307, "cabernet": 307, "sauvignon": 307, "heitz": 307, "spain": 307, "ripe": 307, "aroma": 307, "blackberri": 307, "cassi": 307, "carodorum": 307, "selecci\u00f3n": 307, "reserva": 307, "northern": 307, "toro": 307, "tinta": 307, "bodega": 307, "carmen": 307, "rodr\u00edguez": 307, "watson": [307, 401, 998], "honor": 307, "late": [307, 362], "harvest": 307, "knight": 307, "sonoma": 307, "blanc": 307, "macaulei": 307, "oak": 307, "reserv": [307, 552, 553, 1002, 1004], "oregon": 307, "willamett": 307, "pinot": 307, "noir": 307, "ponzi": 307, "franc": [307, 754], "b\u00e9gude": 307, "aft": [307, 1023], "br\u00fblade": 307, "provenc": 307, "bandol": 307, "one_hot": 307, "max_categori": [307, 315, 317, 863, 864, 988, 1034, 1036], "target_typ": [307, 871, 914, 941], "evaluate_model_and_stor": 307, "rmse_test_scor": 307, "rmse_train_scor": 307, "rmse_test_mean": 307, "rmse_test_std": 307, "rmse_train_mean": 307, "rmse_train_std": 307, "nuniqu": 307, "14810": 307, "1236": 307, "632": 307, "455": 307, "workaround": [307, 374, 787, 801], "high_cardinality_featur": 307, "low_cardinality_featur": 307, "mixed_encoded_preprocessor": 307, "high_cardin": 307, "low_cardin": 307, "mixed_pip": 307, "passthroughpassthroughhigh_cardinalityindex": 307, "targetencodertargetencod": 307, "low_cardinalityindex": 307, "mixed_target": 307, "name_to_color": 307, "rmse_": 307, "_mean": 307, "_std": 307, "explod": 307, "unrel": [307, 361, 379, 382, 408, 506], "433": [307, 309, 371], "plot_target_encod": [307, 309], "50_000": [308, 346], "n_categori": [308, 826, 864, 988], "kbin": [308, 316], "x_inform": 308, "permuted_categori": 308, "x_shuffl": 308, "catastroph": [308, 753, 999], "x_near_unique_categori": 308, "assembl": [308, 347, 850], "near_uniqu": 308, "raw_model": 308, "0049896314219657345": 308, "00457762158159003": 308, "model_with_cv": 308, "8000184677460285": 308, "7927845601690948": 308, "coefs_cv": 308, "target_encod": 308, "x_train_no_cv_encod": 308, "x_test_no_cv_encod": 308, "model_no_cv": 308, "858486250088675": 308, "6338211367110066": 308, "coefs_no_cv": 308, "280": [308, 309, 321], "plot_target_encoder_cross_v": [308, 309], "auto_examples_preprocess": 309, "announc": [311, 312, 313, 314, 315, 316, 317, 378], "latest": [311, 312, 313, 314, 315, 316, 317, 372, 374, 378, 380, 382, 994, 996, 1034], "upgrad": [311, 312, 313, 314, 315, 316, 317, 390, 999, 1020, 1025, 1028], "conda": [311, 312, 313, 314, 315, 316, 317, 361, 374, 375, 377, 378, 380, 382, 390, 393, 994], "forg": [311, 312, 313, 314, 315, 316, 317, 361, 375, 377, 378, 382, 390], "plot_roc_curv": [311, 1030, 1032], "plot_precision_recall_curv": [311, 1030, 1032, 1033], "stackingclassifi": [311, 356, 407, 559, 1030, 1031, 1032, 1033, 1034, 1035], "_class": [311, 978], "9473684210526315": 311, "radiusneighborstransform": [311, 834, 981, 1030, 1032, 1034, 1035], "sklearn_cache_": 311, "isomap__n_neighbor": 311, "nan_euclidean_dist": [311, 752, 968, 1030], "ccp_alpha": [311, 350, 548, 549, 550, 551, 555, 556, 898, 899, 900, 901, 994, 1030], "tree_": [311, 350, 354, 835, 898, 899, 900, 901], "node_count": [311, 350, 354, 898, 899, 900, 901], "check_estim": [311, 376, 387, 922, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035], "pytest": [311, 361, 372, 374, 376, 377, 390, 393, 921, 922, 1030, 1033], "estimator_check": [311, 376, 387, 1027, 1028, 1030, 1031, 1034, 1035, 1036], "parametrize_with_check": [311, 376, 921, 1030, 1031], "test_sklearn_compatible_estim": [311, 922], "ovo": [311, 778, 818, 892, 895, 978, 979, 993], "decision_function_shap": [311, 341, 892, 895, 993, 1025, 1026, 1029, 1030], "9914209401709401": 311, "plot_release_highlights_0_22_0": [311, 318], "await": 312, "lam": [312, 313, 1031], "35776189065725783": 312, "42425183539869404": 312, "openmp": [312, 372, 377, 385, 387, 400, 407, 946, 1031, 1033, 1036], "740575686247884": 312, "10k": [312, 438], "monotoinc": 312, "gbdt_cst": 312, "999791942438998": 312, "583": [312, 318, 400, 1011], "plot_release_highlights_0_23_0": [312, 318], "art": [313, 380, 640, 683, 998, 1002], "footprint": [313, 316, 360, 362, 400, 405, 546, 547, 554, 1022, 1025, 1026, 1031, 1032, 1035], "yarowski": [313, 887, 991], "selftrainingclassifi": [313, 323, 324, 325, 991, 1032], "random_unlabeled_point": [313, 885, 886, 887], "self_training_model": [313, 887], "selftrainingclassifierselftrainingclassifi": 313, "7357": 313, "linear_baselin": 313, "7137": 313, "decisiontreeregressordecisiontreeregressor": 313, "effort": [313, 374, 380, 998, 1002, 1031, 1033], "plot_release_highlights_0_24_0": [313, 318], "l2_regular": [314, 407, 552, 553], "max_bin": [314, 315, 407, 552, 553], "quantileregressor": [314, 974, 978, 1033, 1034, 1035], "min_": [314, 400, 407, 860, 974, 988, 992, 993, 994], "sum_i": [314, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 969, 970, 974, 976, 978, 983], "pb_q": [314, 974], "_1": [314, 402, 405, 408, 522, 528, 529, 531, 536, 537, 538, 637, 638, 643, 644, 645, 646, 647, 651, 652, 653, 654, 672, 673, 674, 675, 756, 974, 976, 978, 993], "get_feature_nam": [314, 1028, 1029, 1031, 1032, 1033], "pet": [314, 778, 978], "dog": [314, 315, 317, 573, 773, 871, 988], "fish": 314, "pet_cat": 314, "pet_dog": 314, "pet_fish": 314, "plot_": [314, 390], "plot_release_highlights_1_0_0": [314, 318], "x_1d": 315, "hist_quantil": 315, "log_reg_input_featur": 315, "gather": [315, 317, 382, 388, 399, 400, 988, 1002], "min_frequ": [315, 317, 863, 864, 988, 1034, 1036], "rabbit": [315, 317, 988], "snake": [315, 317, 573, 871, 988], "infrequent_categories_": [315, 317, 863, 864, 871, 988], "x0_cat": [315, 988], "x0_rabbit": [315, 988], "x0_infrequent_sklearn": [315, 988], "refactor": [315, 1020, 1022, 1023, 1024, 1030, 1033, 1034, 1035], "radius_neighbor": [315, 838, 840, 841, 842, 1024, 1029, 1030, 1032, 1033, 1034, 1035], "summari": [315, 356, 371, 385, 683, 704, 903, 976, 979, 998, 1013], "pairwise_distances_argmin_min": [315, 769, 1023, 1028, 1034, 1035, 1036], "radiusneighborsclassifi": [315, 832, 833, 838, 841, 979, 981, 1020, 1022, 1026, 1028, 1030, 1032, 1033, 1034, 1035, 1036], "radiusneighborsregressor": [315, 832, 833, 838, 840, 981, 1020, 1022, 1028, 1030, 1032, 1033, 1034, 1035, 1036], "trustworthi": [315, 1028, 1029, 1034, 1035, 1036], "labelpropag": [315, 322, 886, 887, 979, 991, 1021, 1026, 1027, 1030, 1031, 1032, 1034, 1035, 1036], "labelspread": [315, 320, 321, 322, 324, 325, 885, 887, 979, 991, 1021, 1026, 1027, 1030, 1031, 1034, 1035, 1036], "blog": [315, 360, 374, 380, 382, 388, 1031], "cython": [315, 360, 361, 363, 372, 374, 377, 383, 385, 390, 393, 396, 400, 407, 499, 988, 989, 992, 993, 998, 999, 1020, 1023, 1024, 1026, 1032, 1035, 1036], "readili": [315, 405, 994, 1002], "true_w": 315, "true_h": 315, "x_reconstruct": [315, 473, 474, 475, 574], "00364": 315, "divis": [315, 400, 408, 581, 582, 585, 703, 704, 719, 720, 728, 736, 773, 774, 777, 978, 1012, 1024, 1028, 1029, 1032, 1036], "bisect_km": 315, "plot_release_highlights_1_1_0": [315, 318], "video": [316, 363, 368, 377, 494, 979, 1002, 1005], "sepal_col": 316, "petal_col": 316, "x_out": [316, 854, 863, 864], "052506": 316, "592373": 316, "189830": 316, "973554": 316, "416010": 316, "630382": 316, "107": [316, 400, 885, 979, 1022], "765012": 316, "362176": 316, "021849": 316, "788808": 316, "hist_no_interact": 316, "v1": [316, 368, 390, 746, 785, 786, 825, 826, 827, 829, 1032, 1035, 1036], "liac": [316, 368, 374, 487, 1035, 1036], "arff": [316, 374, 487, 1032, 1035, 1036], "ticket": [316, 374], "cabin": 316, "boat": 316, "allen": [316, 1023, 1025, 1027, 1030], "elisabeth": 316, "walton": 316, "24160": 316, "3375": 316, "b5": 316, "loui": [316, 1025, 1026, 1030, 1032, 1034, 1036], "mo": [316, 1031], "allison": 316, "hudson": 316, "9167": 316, "113781": 316, "151": [316, 380, 407, 990], "5500": [316, 679, 975], "c22": 316, "c26": 316, "montreal": 316, "pq": 316, "chestervil": 316, "ON": 316, "helen": 316, "lorain": 316, "joshua": [316, 369, 1022, 1023, 1025, 1026, 1032, 1035, 1036], "creighton": 316, "135": [316, 371], "bessi": 316, "waldo": 316, "compliant": [316, 374], "cupi": [316, 396], "gpu": [316, 396, 982, 999, 1013], "changelog": [316, 378, 387], "629": [316, 318], "plot_release_highlights_1_2_0": [316, 318], "throughout": [317, 356, 387, 618, 788, 847, 848, 1004, 1023, 1028], "codebas": [317, 356, 374, 375, 376, 408, 1020, 1026], "ongo": [317, 375, 388], "incorpor": [317, 374, 401, 407, 977, 998, 1002], "contrib": [317, 374, 376, 382, 385, 387, 400, 998, 999, 1036], "adpot": 317, "true_label": [317, 320, 321], "non_noisy_label": 317, "9694149248180188": 317, "encodings_": [317, 871, 988], "validation_curv": [317, 340, 809, 973, 1027, 1028, 1029, 1032, 1036], "geomspac": 317, "make_low_rank_matrix": [317, 515], "46858513287221654": 317, "plot_release_highlights_1_3_0": [317, 318], "auto_examples_release_highlight": 318, "semisupervis": [320, 387], "clai": [320, 321, 322, 325, 1020], "woolam": [320, 321, 322, 325, 1020], "n_total_sampl": [320, 321], "n_labeled_point": [320, 321], "unlabeled_set": 320, "everyth": [320, 356, 378, 380, 385, 455, 933, 998, 999, 1020], "lp_model": [320, 321], "predicted_label": [320, 321], "transduction_": [320, 321, 322, 885, 886, 887], "_plot": 320, "0x7f6b98f62be0": 320, "pred_entropi": [320, 321], "label_distributions_": [320, 321, 885, 886, 1031], "uncertainty_index": [320, 321], "image_index": [320, 321], "408": [320, 326], "plot_label_propagation_digit": [320, 326], "max_iter": 321, "______________________________________________________________________": 321, "290": [321, 679, 680, 684, 975], "285": [321, 714], "unlabeled_indic": 321, "transduc": 321, "in1d": [321, 1027], "delete_indic": 321, "183": [321, 380, 979, 1020], "nfit": 321, "delete_index": 321, "607": [321, 326], "plot_label_propagation_digits_active_learn": [321, 326], "label_spread": 322, "labelspreadinglabelspread": 322, "output_label": 322, "output_label_arrai": 322, "outer_numb": 322, "inner_numb": 322, "plot_label_propagation_structur": [322, 326], "breast_canc": 323, "569": [323, 371, 491, 583, 586, 587, 589], "augment": [323, 621, 872, 1002], "oliv": [323, 325, 1028, 1029, 1031, 1032, 1033], "rausch": [323, 325, 1028, 1029, 1032], "rauscho": [323, 325], "ethz": [323, 325], "total_sampl": [323, 527], "base_classifi": [323, 325, 991], "x_valu": 323, "99999": 323, "amount_label": 323, "amount_iter": 323, "self_training_clf": 323, "skfold": 323, "y_test_tru": 323, "labeled_iter_": [323, 887], "return_count": [323, 346, 842], "capsiz": 323, "twinx": 323, "761": [323, 324, 326], "plot_self_training_varying_threshold": [323, 326], "2823": 324, "2117": 324, "420": 324, "1697": 324, "1071": 324, "850": 324, "runtimewarn": 324, "encount": [324, 361, 372, 394, 400, 407, 408, 487, 552, 553, 572, 825, 826, 827, 829, 863, 953, 988, 992, 998, 1001, 1002, 1013, 1028, 1031], "matmul": 324, "tfidftransform": [324, 346, 347, 408, 480, 582, 1013, 1027, 1028, 1034, 1036], "sdg_param": 324, "vectorizer_param": 324, "selftrain": 324, "st_pipelin": 324, "ls_pipelin": 324, "eval_and_print_metr": 324, "y_mask": 324, "x_20": 324, "y_20": 324, "plot_semi_supervised_newsgroup": [324, 326], "y_rand": 325, "y_30": 325, "y_50": 325, "ls30": 325, "ls50": 325, "ls100": 325, "st30": 325, "st50": 325, "rbf_svc": [325, 993], "color_map": 325, "plot_semi_supervised_versus_svm_iri": [325, 326], "739": 326, "auto_examples_semi_supervis": 326, "my_kernel": [328, 993], "096": [328, 343], "plot_custom_kernel": [328, 343], "2x2": [329, 400, 744], "plot_iris_svc": [329, 343], "convention": [330, 387, 886], "support_vector_indic": 330, "plot_linearsvc_support_vector": [330, 343], "377": [331, 343], "plot_oneclass": [331, 343], "midpoint": 332, "blink": 332, "act": [332, 345, 374, 386, 406, 407, 704, 719, 720, 728, 773, 774, 777, 865, 869, 975, 978, 981, 993, 1028], "spuriou": [332, 382, 988, 1033, 1034, 1035], "c_rang": 332, "gamma_rang": 332, "midpointnorm": 332, "masked_arrai": [332, 787, 801], "x_2d": 332, "y_2d": 332, "cheat": [332, 982, 992, 1022], "c_2d_rang": 332, "gamma_2d_rang": 332, "bright": 332, "brutal": 332, "148": [332, 343, 1023], "plot_rbf_paramet": [332, 343], "plot_separating_hyperplan": [333, 343], "plain": [334, 410, 648, 992], "n_samples_1": [334, 993], "n_samples_2": [334, 993], "clusters_std": 334, "wclf": 334, "wdisp": 334, "surface_": [334, 622], "plot_separating_hyperplane_unbalanc": [334, 343], "blown": 335, "score_mean": 335, "score_std": 335, "311": [335, 343, 346], "plot_svm_anova": [335, 343], "fignum": [336, 337], "plot_svm_kernel": [336, 343], "plot_svm_margin": [337, 343], "unreg": 337, "perpendicular": 337, "yy_down": 337, "yy_up": 337, "080": [337, 343], "nusvc": [338, 360, 893, 979, 993, 1020, 1021, 1022, 1025, 1028, 1030, 1031, 1032, 1034], "plot_svm_nonlinear": [338, 343], "svr_rbf": 339, "svr_lin": 339, "svr_poli": 339, "kernel_label": 339, "model_color": 339, "setdiff1d": 339, "plot_svm_regress": [339, 343], "omega": [340, 403, 972], "model_l1": 340, "train_size_idx": 340, "results_sc": 340, "c_scale": 340, "model_l2": 340, "591": [340, 343, 355], "plot_svm_scale_c": [340, 343], "break_ti": [341, 892, 895, 993, 1030], "accent": [341, 579, 580, 582, 1030], "982": [341, 343], "plot_svm_tie_break": [341, 343], "emphasi": [342, 403, 892, 893, 894, 895, 896, 985, 998], "subtl": [342, 356, 977, 999], "plot_decision_funct": 342, "sample_weight_last_ten": 342, "sample_weight_const": 342, "clf_no_weight": 342, "clf_weight": 342, "plot_weighted_sampl": [342, 343], "auto_examples_svm": 343, "size_mb": 345, "utf": [345, 347, 408, 478, 494, 573, 579, 580, 582], "load_dataset": 345, "sublinear_tf": [345, 405, 408, 581, 582], "duration_train": 345, "duration_test": 345, "data_train_size_mb": 345, "data_test_size_mb": 345, "2034": [345, 369], "98mb": 345, "1353": 345, "87mb": 345, "376": [345, 346, 986], "576mb": 345, "7831": 345, "933mb": 345, "ridgeclassifi": [345, 360, 663, 664, 666, 974, 979, 1025, 1029, 1033, 1034, 1035], "sparse_cg": [345, 663, 665, 678, 974, 1021, 1027, 1029, 1030, 1034], "rarer": [345, 347, 408], "deeper": [345, 994], "plot_feature_effect": 345, "average_feature_effect": 345, "top5": 345, "top_indic": 345, "predictive_word": 345, "bar_siz": 345, "y_loc": 345, "keith": [345, 1020, 1025], "atheist": 345, "orbit": [345, 346], "caltech": 345, "expectedli": 345, "pollut": [345, 718, 775, 978, 984], "sender": [345, 369], "livesei": 345, "solntz": 345, "wpd": 345, "sgi": 345, "jon": [345, 1027, 1030, 1031, 1033, 1034], "nntp": [345, 369, 1013], "1qlettinn8oi": 345, "cco": 345, "allan": [345, 398, 1032], "schneider": [345, 1033], "me": 345, "instinct": 345, "happi": [345, 385, 388, 805, 806], "listen": 345, "murder": 345, "voluntari": 345, "disregard": [345, 387, 408, 423, 456, 473, 474, 475, 543, 545, 547, 549, 551, 553, 556, 559, 561, 602, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 669, 670, 712, 713, 714, 775, 823, 824, 833, 841, 848, 859, 860, 866, 867, 870, 875, 878, 879, 881, 891, 893, 896, 899, 901, 978, 1028], "beings": 345, "bahavior": 345, "theirs": 345, "mimicri": 345, "imit": 345, "parrot": 345, "polli": 345, "pulchritud": 345, "anim": [345, 408], "kill": 345, "Or": [345, 354, 404, 405, 863, 978, 984, 992], "sigh": 345, "wonder": 345, "bahaviour": 345, "believ": [345, 346, 382, 385, 1002], "primat": 345, "arbitarili": 345, "poster": [345, 373, 374, 1012], "weren": [345, 864, 1029], "slai": 345, "mate": 345, "ritual": 345, "whatnot": 345, "aren": [345, 369, 378, 390, 399, 716, 746, 983, 1030, 1032], "ye": [345, 382, 387, 857, 874, 974], "gorilla": 345, "dolphin": 345, "platypu": 345, "writer": 345, "launch": [345, 346, 390, 1002], "custom_nam": 345, "clf_descr": 345, "rocchio": [345, 837], "308": [345, 626], "000594": 345, "5316": 345, "0387": 345, "000589": 345, "000869": 345, "0628": 345, "0322": 345, "000618": 345, "752": 345, "0278": 345, "000585": 345, "762": 345, "00257": 345, "0017": 345, "000463": 345, "779": 345, "training_tim": 345, "txt": [345, 368, 484, 494], "curs": [345, 346, 400, 406, 410, 980, 981, 1007, 1012], "harm": [345, 376, 408, 783], "525": [345, 348, 430, 619, 968], "plot_document_classification_20newsgroup": [345, 348], "discov": [346, 400, 405, 408, 411, 435, 439, 1004, 1035], "category_s": 346, "true_k": 346, "3387": 346, "evaluations_std": 346, "fit_and_evalu": 346, "evaluation_std": 346, "score_valu": 346, "std_score": [346, 1033], "collis": [346, 347, 408, 573, 580], "x_tfidf": 346, "7929": [346, 1027], "prod": [346, 612], "phenomenon": [346, 988], "cluster_s": 346, "2050": 346, "711": 346, "446": [346, 410, 716, 746, 978], "485": [346, 687], "1708": 346, "3384": 346, "1887": 346, "1688": 346, "454": 346, "973": [346, 404], "987": 346, "628": 346, "380": [346, 1013], "redo": 346, "x_lsa": 346, "explained_vari": [346, 978], "399": 346, "398": [346, 638, 1013], "010": [346, 380, 986], "416": [346, 729, 978], "320": [346, 369, 967, 992, 1020], "019": [346, 371, 380, 462], "030": 346, "minibatch_kmean": 346, "348": 346, "047": [346, 380], "027": [346, 371], "original_space_centroid": 346, "order_centroid": 346, "ve": [346, 374, 408, 1001, 1002, 1013, 1027], "shuttl": 346, "bibl": 346, "sparciti": 346, "lsa_vector": 346, "x_hashed_lsa": 346, "008": [346, 371, 380], "413": 346, "328": [346, 720], "022": [346, 986], "043": [346, 380], "367": [346, 407, 1020], "df_std": 346, "speak": [346, 360, 374, 992], "safer": [346, 356, 400, 404, 1020], "749": [346, 348], "plot_document_clust": [346, 348], "18000": [347, 369], "raw_data": 347, "data_size_mb": 347, "3803": 347, "245mb": 347, "anyth": [347, 378, 380, 387, 391, 404, 942, 1034], "unicod": [347, 408, 478, 494, 573, 579, 580, 582, 943, 1020, 1028, 1032], "charact": [347, 374, 379, 387, 408, 494, 499, 500, 579, 580, 582, 902, 983, 1013, 1020, 1033, 1035], "underscor": [347, 376, 387, 962, 1010, 1020, 1030, 1033], "tok": [347, 408], "findal": 347, "token_freq": 347, "dict_count_vector": 347, "47928": 347, "vocabulary_": [347, 408, 572, 579, 582, 1013, 1020], "19145": 347, "n_nonzero_column": 347, "563": 347, "43873": 347, "inact": [347, 368, 374], "586": 347, "47668": 347, "input_typ": [347, 408, 455, 573], "y_po": 347, "downsid": 347, "featureheash": 347, "implicitli": [347, 383, 407, 588, 623, 624, 869, 968, 970, 985, 988, 993], "token_pattern": [347, 408, 579, 580, 582], "738": 347, "47885": 347, "710": [347, 398], "369": [347, 348], "plot_hashing_vs_dict_vector": [347, 348], "644": 348, "auto_examples_text": 348, "parameter": [350, 410, 605, 606, 613, 614, 785, 786, 974, 975, 983, 988, 994], "weakest": [350, 994], "cost_complexity_pruning_path": [350, 898, 899, 900, 901], "drawstyl": [350, 691], "3272984419327777": 350, "415": [350, 355], "plot_cost_complexity_prun": [350, 355], "ryb": 351, "pairidx": 351, "borderpad": 351, "handletextpad": 351, "plot_iris_dtc": [351, 355], "plot_tre": [351, 354, 994, 1029, 1031, 1032, 1033, 1035], "plot_tree_regress": [352, 355], "regr_3": 353, "y_3": 353, "plot_tree_regression_multioutput": [353, 355], "decision_path": [354, 548, 549, 555, 556, 557, 898, 899, 900, 901, 1026, 1031], "children_left": 354, "children_right": 354, "n_node_sampl": 354, "travers": [354, 981, 985], "n_node": [354, 432, 436, 454, 548, 549, 555, 556, 557, 898, 899, 900, 901, 932], "node_depth": 354, "is_leav": 354, "pop": [354, 385, 905, 1008, 1028], "visit": [354, 374, 985], "node_id": [354, 902, 904], "is_split_nod": 354, "children": [354, 400, 407, 432, 436, 454, 557, 1024], "800000011920929": 354, "950000047683716": 354, "node_index": 354, "node_ind": 354, "leaf_id": 354, "sample_id": [354, 369, 488], "threshold_sign": 354, "inequ": [354, 387, 400, 434, 438, 450, 975, 976, 981], "boolean": [354, 369, 374, 376, 383, 401, 407, 408, 409, 455, 552, 553, 572, 573, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 599, 620, 623, 624, 627, 640, 662, 819, 825, 846, 853, 873, 906, 962, 968, 974, 980, 985, 988, 994, 1020, 1023, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1034, 1035], "common_nod": 354, "common_node_id": 354, "plot_unveil_tree_structur": [354, 355], "auto_examples_tre": 355, "x_test_transform": [356, 404], "standard_norm": 356, "unfair": 356, "x_select": 356, "gbc": 356, "x_train_select": 356, "x_test_select": 356, "tip": [356, 359, 363, 374, 377, 380, 395, 408, 525, 532, 636, 683, 974, 1000, 1014, 1015, 1018, 1023], "glossari": [356, 363, 374, 376, 380, 399, 411, 412, 428, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 455, 458, 460, 463, 465, 479, 482, 483, 486, 488, 494, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 574, 575, 585, 593, 598, 599, 601, 602, 618, 623, 625, 630, 631, 632, 633, 637, 638, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 678, 679, 680, 681, 682, 683, 684, 685, 686, 692, 764, 768, 771, 781, 785, 786, 787, 789, 790, 791, 792, 793, 799, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 832, 833, 835, 836, 838, 839, 840, 841, 843, 844, 846, 847, 848, 849, 852, 855, 867, 871, 879, 882, 883, 885, 886, 890, 891, 892, 895, 898, 899, 900, 901, 926, 927, 949, 952, 967, 968, 974, 1004, 1028], "mtrand": 356, "_rand": 356, "85418642": 356, "79084103": 356, "13077794": 356, "11915045": 356, "56479934": 356, "70814003": 356, "25291366": 356, "55212743": 356, "18197458": 356, "37845099": 356, "snippet": [356, 374, 379, 382, 385, 396, 407, 408, 409, 968, 988, 1001, 1033], "mutat": [356, 1028], "somewhat": [356, 362, 374, 376, 405, 407, 892, 895, 974, 993, 994], "debug": [356, 361, 375, 377, 380, 387, 389, 618, 889, 944, 998, 1013, 1028, 1032], "govern": [356, 360, 363, 374, 387, 996, 1002], "implic": [356, 374], "rf_123": 356, "rf_inst": 356, "didn": [356, 387, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "strict": [356, 372, 387, 405, 494, 526, 579, 580, 582, 974, 1020, 1029, 1032], "pervas": [356, 374], "unlucki": 356, "lucki": 356, "fairer": 356, "temptat": [356, 374], "throughput": [359, 998, 1015, 1023], "switch": [359, 669, 695, 708, 727, 745, 747, 783, 830, 831, 926, 927, 978, 981, 1015, 1020], "offlin": [360, 374], "bottleneck": [360, 380, 407, 439, 847, 848], "hurt": [360, 525, 1028], "toolkit": [360, 998, 1002], "branch": [360, 372, 374, 377, 378, 400, 407, 433, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 898, 899, 900, 901, 903, 981, 985, 994], "sklearn_assume_finit": 360, "assume_finit": [360, 361, 459, 888], "assert_all_finit": [360, 383, 459], "nm": 360, "csc": [360, 385, 387, 408, 542, 544, 545, 661, 683, 857, 859, 865, 870, 873, 875, 881, 906, 910, 911, 941, 953, 954, 956, 957, 958, 959, 981, 988, 1028, 1029, 1031, 1034], "32bit": [360, 943], "speedup": [360, 405, 407, 641, 645, 648, 1020, 1021, 1022, 1023, 1035], "multithread": [360, 400, 890, 891, 892, 893, 894, 895, 896], "bla": [360, 361, 372, 375, 380, 1020, 1028, 1029, 1031, 1032], "sparsity_ratio": 360, "gbt": 360, "speedi": 360, "packet": 360, "reuter": [360, 369], "carefulli": [360, 405], "spawn": [360, 385, 787, 801, 811, 812, 813, 1031], "gil": [360, 361, 375, 946, 1023, 1028, 1029, 1032, 1033], "ought": 360, "lapack": [360, 361, 372, 523, 526, 532, 679, 1035], "dgemm": 360, "show_vers": [360, 372, 374, 382, 390, 1028], "atla": [360, 372], "rebuild": [360, 394, 408, 433], "openbla": [360, 361, 372, 385, 946, 1033], "mkl": [360, 361, 372, 385, 946, 1020], "veclib": [360, 385], "osx": 360, "nouri": [360, 1021, 1023], "instruct": [360, 374, 375, 376, 377, 378, 379, 382, 385, 386, 494, 579, 580, 582, 1004, 1013, 1020], "ubuntu": [360, 372, 380, 382], "1gb": 360, "mib": [360, 459, 888], "working_memori": [360, 361, 459, 771, 888, 1028], "adher": [360, 376, 387, 921, 922, 1020, 1021], "pairwise_distances_chunk": [360, 768, 1028, 1031], "facilit": [360, 387, 394, 998, 999, 1026, 1029], "moment": [360, 405, 410, 431, 606, 614, 847, 848, 942, 982, 983], "000024": 360, "027400": 360, "mileag": 360, "deploi": [360, 389, 394, 999, 1002], "upstream": [360, 374, 378, 382, 385, 988, 1029], "lighter": [360, 691, 693, 772, 779, 1036], "threadpoolctl": [361, 372, 390, 393], "subsect": [361, 374, 399], "worker": [361, 387, 408, 944, 945, 946, 1035], "14228": 361, "loki": [361, 946, 978, 1028, 1031], "duplic": [361, 373, 374, 387, 400, 411, 435, 439, 440, 506, 626, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 814, 861, 964, 981, 1020, 1023, 1032, 1034, 1036], "memmap": [361, 369, 387, 405, 499, 525, 1028], "1mb": [361, 1025], "parallel_backend": [361, 411, 428, 435, 437, 439, 441, 443, 448, 449, 452, 455, 458, 463, 522, 526, 527, 528, 530, 533, 534, 536, 537, 539, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 585, 593, 601, 623, 625, 630, 638, 642, 644, 646, 648, 649, 650, 652, 654, 656, 657, 659, 667, 670, 679, 680, 681, 682, 683, 684, 685, 764, 768, 771, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 832, 833, 836, 838, 840, 841, 843, 844, 849, 852, 885, 886, 1028], "exclus": [361, 385, 405, 407, 618, 619, 621, 967, 974, 978, 979, 1002, 1027, 1031], "omp_num_thread": 361, "my_script": 361, "algebra": [361, 372, 377, 385, 405, 408, 453, 856, 988], "bli": [361, 372, 385], "mkl_num_thread": 361, "openblas_num_thread": 361, "blis_num_thread": 361, "bash": [361, 382], "zsh": 361, "termin": [361, 379, 380, 382, 390, 400, 439, 452, 544, 545, 549, 550, 551, 554, 556, 657, 658, 659, 667, 669, 847, 848, 899, 901, 984, 994], "prompt": [361, 372, 374, 390, 393, 408, 1004], "pypi": [361, 372, 374, 376, 378, 380, 390, 994, 1028, 1032, 1034, 1035], "channel": [361, 369, 372, 385, 390, 408, 484, 485, 574, 575, 577, 578], "subscript": [361, 946, 1033], "max_thread": [361, 375], "n_cpu": [361, 387], "lib": [361, 372, 390, 998], "_num_thread": 361, "singleton": [361, 795, 913, 1033], "aforement": [361, 979], "global_random_se": 361, "fixtur": [361, 374], "build_numb": 361, "disrupt": 361, "config": [361, 374, 375, 382, 617, 1028], "contributor": [361, 377, 378, 379, 382, 385, 387, 978, 996, 999, 1021, 1022, 1023], "watch": 361, "annoi": 361, "test_your_test_nam": 361, "skip": [361, 374, 376, 383, 396, 408, 459, 559, 637, 638, 643, 651, 652, 653, 662, 672, 888, 1013, 1024, 1027, 1030, 1032, 1034, 1036], "global_dtyp": 361, "boundscheck": [361, 375], "segfault": [361, 375, 1020, 1028, 1033], "posix": [361, 385], "pairwisedistancesreduct": 361, "adequ": [361, 380, 558, 1004, 1033], "drive": [362, 405, 406, 540, 992, 1002, 1013], "passiveaggressiveregressor": [362, 974, 1021, 1024, 1027, 1028, 1031, 1033], "maxabsscal": [362, 854, 875, 968, 988, 1025, 1028, 1029, 1030, 1031, 1036], "routin": [362, 368, 371, 374, 375, 376, 377, 382, 385, 387, 409, 663, 665, 678, 892, 893, 894, 895, 896, 975, 981, 988, 989, 992, 998, 1002, 1020, 1034, 1035, 1036], "passiveaggress": [362, 408, 657], "fledg": [362, 408], "naivebay": 362, "dramat": 362, "welcom": [363, 373, 374, 382, 388, 999, 1001], "roadmap": [363, 996], "persist": [363, 382, 385, 405, 437, 601, 602, 846, 983, 998, 1015, 1026, 1029], "miscellan": [363, 367, 368, 1026, 1027, 1034, 1035, 1037], "craft": [363, 377], "curat": [363, 374, 377, 378], "fetcher": [367, 1025, 1027], "linnerrud": [367, 1015], "breast": [367, 491, 1015, 1025], "cancer": [367, 491, 584, 585, 837, 1015, 1025], "covertyp": [367, 482, 1015], "rcv1": [367, 488, 1015, 1025], "kddcup": [367, 483, 1015], "svmlight": [367, 478, 499, 500, 998, 1015, 1020, 1021, 1027, 1029], "jpeg": [368, 369, 484, 485], "publish": [368, 369, 376, 378, 382, 387, 990, 999, 1032], "creativ": 368, "spare": [368, 665, 666], "pyplpt": 368, "load_svmlight_fil": [368, 1020, 1021, 1026, 1027, 1028, 1035], "test_dataset": 368, "everybodi": [368, 374], "upload": [368, 372, 378, 385, 662], "mice": [368, 618, 968], "brain": 368, "miceprotein": 368, "1080": [368, 400], "sc": [368, 400], "clara": [368, 1032], "higuera": 368, "katheleen": 368, "gardin": 368, "krzysztof": 368, "cio": 368, "protein": [368, 998], "cite": [368, 400, 996], "kj": [368, 980], "critic": [368, 374, 386, 394, 407, 683, 975, 978, 986, 993, 1002, 1031], "syndrom": 368, "plo": [368, 598, 599], "ONE": [368, 598, 599], "e0129126": 368, "40966": 368, "upload_d": 368, "08t16": 368, "17928620": 368, "file_id": 368, "default_target_attribut": 368, "row_id_attribut": 368, "mouseid": 368, "ignore_attribut": 368, "genotyp": 368, "cc18": 368, "study_135": 368, "study_98": 368, "study_99": 368, "md5_checksum": 368, "3c479a6885bfa0438971388283a1ce32": 368, "websit": [368, 369, 371, 374, 388, 982, 992, 1002, 1013, 1021, 1022, 1023], "4550": 368, "creator": [368, 371], "17t14": 368, "1804243": 368, "pone": 368, "0129126": 368, "openml100": 368, "study_14": 368, "study_34": 368, "earliest": [368, 975], "iris_61": 368, "iris_969": 368, "969": 368, "iris_version_3": 368, "vanschoren": [368, 1032], "rijn": [368, 1028], "bischl": 368, "torgo": 368, "acm": [368, 369, 400, 411, 435, 441, 448, 451, 502, 554, 667, 716, 746, 836, 978, 981, 984, 990], "sigkdd": [368, 369, 502, 667, 871, 988, 990], "newslett": 368, "legaci": [368, 378, 387, 946, 1020, 1027, 1032], "my": [368, 374, 379, 382, 487], "columnar": [368, 455, 998], "usabl": [368, 374, 376, 387, 394, 408, 787, 946, 1020, 1027, 1034, 1035], "io": [368, 371, 372, 374, 378, 380, 382, 387, 394, 683, 998, 1018], "json": [368, 374, 390], "sql": 368, "smoothli": 368, "manipul": [368, 396, 498, 946, 998, 1026], "mat": [368, 408], "load_fil": [368, 369, 1013, 1022, 1034], "audio": [368, 494], "wish": [368, 374, 381, 383, 390, 400, 641, 642, 645, 646, 647, 655, 656, 927, 1005, 1013, 1027], "imageio": 368, "wavfil": 368, "wav": 368, "hdf5": 368, "h5py": 368, "pytabl": 368, "april": [369, 655, 676, 677, 1024, 1032], "1992": [369, 371, 404, 407, 558, 559, 636, 974], "1994": [369, 371, 635], "AT": [369, 486], "laboratori": [369, 998], "cambridg": [369, 405, 581, 825, 829, 974, 976, 980], "facial": 369, "upright": 369, "frontal": 369, "movement": 369, "credit": [369, 382, 407, 974, 1002], "18846": [369, 479, 480], "scikit_learn_data": [369, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490], "20news_hom": 369, "newsgroups_train": 369, "11314": 369, "1073": 369, "20new": [369, 1013], "34118": 369, "01327": 369, "newsgroups_test": 369, "vectors_test": 369, "class_prior": [369, 825, 826, 827, 829, 1021, 1024], "fit_prior": [369, 825, 826, 827, 829], "88213": 369, "suspici": 369, "show_top10": 369, "top10": 369, "affili": 369, "abund": 369, "clue": [369, 382, 975], "bare": [369, 975, 1013], "quotat": 369, "77310": 369, "76995": 369, "cleveland": 369, "indian": 369, "leagu": 369, "team": [369, 377, 385, 387, 996, 998, 1002, 1020], "ohio": 369, "spark": [369, 999], "death": 369, "floyd": [369, 679, 975], "reckon": 369, "coloni": 369, "paul": [369, 1023, 1026, 1027, 1028, 1029, 1033, 1034], "dolan": 369, "nicknam": 369, "tribe": 369, "theme": [369, 1020], "mlb": [369, 861], "inappropri": [369, 404, 410, 700, 808], "nlp": [369, 405, 408, 825, 829, 976, 1002], "cultur": 369, "inflammatori": 369, "famou": [369, 371, 407, 993], "internet": [369, 379, 988, 1011], "offici": [369, 376, 387, 390, 484, 488, 998, 1013, 1028, 1029, 1032], "verif": [369, 978, 1002], "identif": [369, 374, 488, 967, 1005], "viola": [369, 1028], "opencv": 369, "detector": [369, 387, 836], "5749": [369, 484, 485], "13233": [369, 484, 485], "5828": [369, 484, 485], "200m": 369, "lfw_home": 369, "rectangular": [369, 387, 927, 999], "1140": 369, "fetch_lfw_pair": [369, 1025, 1035], "lfw_pairs_train": 369, "subdivid": [369, 410], "10_fold": [369, 484], "gari": [369, 1027], "huang": [369, 649, 1026, 1031], "manu": 369, "ramesh": [369, 1002, 1023, 1026, 1030], "tamara": 369, "berg": [369, 1021, 1022, 1032], "erik": [369, 1002, 1023], "miller": [369, 1028, 1029, 1033], "massachusett": 369, "amherst": 369, "30m": 369, "seven": [369, 971], "homepag": [369, 521, 994], "581012": [369, 482], "newswir": 369, "ltd": [369, 1002], "804414": [369, 488], "47236": [369, 488], "fetch_rcv1": [369, 1025, 1029], "v2": [369, 488, 655, 676, 677, 974], "chronolog": [369, 488], "23149": [369, 488, 1034], "781265": [369, 488], "lyrl2004": [369, 488], "2286": 369, "810596": 369, "2287": 369, "2288": 369, "uint32": [369, 488], "gmil": 369, "381327": 369, "ccat": 369, "e11": 369, "ecat": 369, "m11": 369, "lewi": [369, 1027, 1031], "yang": [369, 400, 405, 525, 630, 1026, 1027, 1030, 1032, 1033, 1034], "rose": 369, "361": [369, 407, 546, 547], "397": 369, "cup": [369, 978], "tcpdump": 369, "darpa": 369, "intrus": 369, "mit": [369, 380, 400, 410, 601, 602, 605, 610, 613, 634, 657, 658, 667, 827, 971], "lincoln": 369, "inject": [369, 407], "attack": 369, "unrealist": 369, "logged_in": 369, "resp": [369, 407, 588, 785, 786, 992, 1028], "4898431": [369, 483], "976158": 369, "699691": 369, "619052": 369, "95373": 369, "kddcup99": [369, 483], "richard": [369, 409, 649, 1021, 1030, 1032, 1034, 1035], "lippmann": 369, "hain": 369, "jonathan": [369, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1036], "korba": 369, "da": [369, 1035, 1036], "yamanishi": 369, "takeuchi": 369, "william": [369, 371, 410, 601, 602, 605, 610, 613, 630, 978, 982, 1027, 1028, 1029, 1030, 1035, 1036], "miln": 369, "discount": [369, 400, 716, 746, 1027, 1030], "sixth": 369, "press": [369, 400, 405, 410, 411, 435, 581, 601, 602, 605, 610, 613, 634, 825, 829, 971, 974, 976, 980], "household": 369, "statlib": 369, "dcc": 369, "ltorgo": 369, "cal_hous": 369, "1990": 369, "censu": 369, "bureau": 369, "resid": 369, "vacat": 369, "pace": 369, "kellei": [369, 1022, 1023], "ronald": [369, 982, 1023, 1033], "barri": [369, 1028], "autoregress": 369, "291": [369, 371], "297": 369, "hyperspher": [370, 998], "interleav": [370, 513], "simplif": [370, 373, 379, 1020, 1026], "realiti": 370, "make_sparse_uncorrel": 370, "make_friedman1": [370, 407, 530, 534, 584, 585, 623], "make_friedman2": [370, 602, 604, 605, 606, 607, 608, 612, 615, 616], "reciproc": [370, 978], "make_friedman3": 370, "7826": 371, "4194": 371, "9490": 371, "9565": 371, "fisher": [371, 407, 495, 627, 998], "donor": 371, "michael": [371, 398, 400, 441, 619, 628, 682, 785, 968, 974, 1002, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1034, 1035], "marshal": 371, "arc": [371, 407], "juli": [371, 409, 724, 871, 988, 1023, 1027, 1028, 1029], "1988": 371, "sir": 371, "referenc": [371, 374, 376, 382, 387, 882, 883, 981, 1027, 1033], "duda": [371, 972], "hart": [371, 972, 1028], "taxonom": 371, "annual": [371, 400, 716, 746, 887, 978, 991], "eugen": [371, 1021, 1026], "179": [371, 380, 407, 1020], "1936": 371, "john": [371, 408, 527, 699, 725, 759, 865, 892, 893, 895, 896, 968, 974, 978, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1033, 1035, 1036], "wilei": [371, 968], "1950": [371, 978], "1973": [371, 398], "scene": [371, 981, 983, 1033], "q327": 371, "d83": 371, "son": [371, 968], "isbn": [371, 400, 974], "471": 371, "22361": 371, "dasarathi": 371, "1980": 371, "nose": [371, 1023, 1027], "pami": [371, 400, 715], "gate": [371, 1033], "1972": 371, "mlc": 371, "cheeseman": 371, "autoclass": 371, "conceptu": [371, 407, 976], "alpaydin": 371, "boun": 371, "nist": [371, 978], "bitmap": 371, "preprint": 371, "32x32": 371, "nonoverlap": 371, "4x4": [371, 405, 408], "garri": 371, "candela": 371, "dimmick": 371, "geist": 371, "grother": 371, "janet": 371, "handprint": 371, "nistir": 371, "5469": 371, "kaynak": 371, "msc": 371, "graduat": 371, "bogazici": 371, "cascad": 371, "kybernetika": 371, "ken": [371, 1013, 1022, 1029], "tang": [371, 1030, 1031, 1032], "ponnuthurai": 371, "suganthan": 371, "yao": [371, 1026, 1027, 1028, 1029, 1036, 1037], "kai": [371, 554, 984, 1027], "dimensionalityreduct": 371, "nanyang": 371, "technolog": 371, "claudio": [371, 1034, 1035], "gentil": [371, 1032], "linnerud": [371, 496], "men": 371, "club": 371, "waist": 371, "puls": 371, "chin": [371, 1024], "situp": 371, "tenenhau": 371, "pratiqu": 371, "alcalin": 371, "magnesium": 371, "phenol": 371, "nonflavanoid": 371, "proanthocyanin": 371, "od280": 371, "od315": 371, "dilut": 371, "class_2": [371, 501], "1680": 371, "746": 371, "chemic": 371, "grown": [371, 407, 544, 545, 546, 547, 548, 549, 555, 556, 898, 899, 900, 901, 994], "itali": 371, "cultiv": 371, "thirteen": 371, "constitu": 371, "forina": 371, "parvu": 371, "pharmaceut": 371, "food": 371, "technologi": [371, 400, 998, 1002], "brigata": 371, "salerno": 371, "16147": 371, "genoa": 371, "lichman": 371, "irvin": 371, "ca": [371, 400, 433, 898, 899, 990, 994], "aeberhard": 371, "cooman": 371, "vel": 371, "rep": [371, 998], "dept": 371, "cook": [371, 1020, 1026], "north": [371, 400], "queensland": 371, "submit": [371, 372, 373, 376, 377, 378, 379, 382, 387, 388], "technometr": [371, 402, 460, 465, 984], "rda": 371, "1nn": 371, "THE": 371, "OF": 371, "chemometr": 371, "perimet": 371, "textur": [371, 748, 749, 976], "concav": 371, "symmetri": [371, 863, 866, 878, 976], "fractal": 371, "malign": [371, 491], "benign": [371, 491], "2501": 371, "345": 371, "427": [371, 497, 498, 574, 575], "873": 371, "031": 371, "4254": 371, "071": [371, 428], "664": 371, "055": [371, 978], "wolberg": 371, "nick": [371, 1020, 1026, 1027, 1028, 1029], "olvi": 371, "mangasarian": 371, "goo": 371, "gl": 371, "u2uwz2": 371, "needl": 371, "aspir": [371, 374], "fna": 371, "nuclei": 371, "multisurfac": 371, "msm": 371, "bennett": [371, 978], "midwest": 371, "cognit": 371, "societi": [371, 400, 402, 460, 465, 532, 618, 866, 878, 974, 992], "insepar": 371, "uw": [371, 1032], "ftp": [371, 673, 674], "wisc": [371, 885], "prog": 371, "cpo": 371, "nuclear": 371, "tumor": 371, "spie": 371, "1993": [371, 465, 655, 676, 677, 994], "symposium": [371, 400, 451], "1905": 371, "870": 371, "san": [371, 408, 990], "jose": [371, 649, 978, 1028, 1030], "prognosi": 371, "570": [371, 1011], "577": 371, "august": [371, 400, 502, 525, 993, 1020, 1022, 1023, 1027, 1034], "272": [372, 390, 392, 393], "wheel": [372, 374, 378, 390, 1030, 1032, 1034], "quickest": 372, "registri": [372, 390], "uninstal": 372, "git": [372, 376, 378, 380, 382, 1001, 1016, 1020, 1036], "fork": [372, 374, 378, 382, 385], "miniforge3": [372, 382], "miniforg": [372, 382, 390], "env": [372, 382, 390], "virtualenv": [372, 374], "python3": [372, 390], "venv": [372, 390], "pep517": [372, 374], "dev0": [372, 378, 1001, 1016], "pyx": [372, 374, 375, 380, 382], "pxd": [372, 374], "sklearn_fail_no_openmp": 372, "checkout": [372, 374, 378, 382], "cumbersom": 372, "reinstal": [372, 390], "setuptool": 372, "unix": [372, 408], "makefil": 372, "studio": [372, 1002], "vs_buildtool": 372, "desktop": 372, "screenshot": 372, "secondli": [372, 385, 400, 407, 648, 974, 1013], "architectur": [372, 376, 382, 385, 390, 394, 459, 888, 982, 996, 1002, 1020], "cmd": 372, "powershel": 372, "struct": [372, 387, 1023], "calcsiz": 372, "distutils_use_sdk": 372, "x86": 372, "buildtool": 372, "vc": 372, "vcvarsal": 372, "bat": 372, "x64": 372, "clang": [372, 375], "confusingli": 372, "usr": 372, "gcc": [372, 375, 380, 385], "libomp": [372, 1032], "silicon": [372, 996], "m1": [372, 996], "januari": [372, 374, 390, 1020, 1021, 1030, 1032, 1035], "arm64": [372, 377, 390], "llvm": 372, "toolchain": 372, "xcode": 372, "conflict": [372, 374, 378, 382, 390, 1027, 1028], "condarc": 372, "channel_prior": 372, "reactiv": [372, 380], "echo": [372, 378], "cxx": 372, "cflag": 372, "cxxflag": 372, "ldflag": 372, "subfold": [372, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 1033], "fopenmp": [372, 375], "export": [372, 375, 376, 390, 394, 902, 903, 994, 998, 1001, 1029], "cppflag": 372, "xpreprocessor": 372, "wl": 372, "rpath": 372, "lomp": 372, "sudo": [372, 390], "apt": [372, 382, 390], "pip3": 372, "pythonx": 372, "site": [372, 374, 377, 382, 390, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 1002, 1028], "precompil": 372, "arm": [372, 374, 382, 967], "cython3": 372, "cento": 372, "yum": 372, "devel": 372, "gnu": 372, "port": [372, 390, 1030], "pkg": 372, "build_ext": [372, 380], "build_clib": 372, "linker": [372, 375], "sysconfig": 372, "counterpart": [372, 967, 975, 993, 1008], "get_config_var": 372, "sklearn_build_parallel": 372, "tracker": [373, 377, 382, 385, 388, 390, 394, 996, 999], "prioriti": [373, 623, 818, 819, 999, 1023], "guidelin": [373, 377, 379, 380, 382, 399, 400, 407], "reformul": 373, "xyz": 373, "someestim": 373, "glanc": 373, "relabel": [373, 805, 806, 887], "stall": [373, 377], "sprint": [373, 374, 996, 1020], "unfinish": [373, 374], "supersed": [373, 1025], "overflow": [373, 382, 385, 1023, 1027, 1028, 1029, 1030, 1031, 1033], "submitt": 373, "strive": [373, 388, 1002], "expertis": [373, 374, 385], "unclear": [373, 374, 492], "pleasant": [373, 1002], "chime": 373, "permiss": [373, 378, 388, 390, 1002, 1035], "matthew": [373, 379, 527, 733, 1020, 1023, 1027, 1029, 1033, 1034], "rocklin": [373, 379], "acknowledg": [373, 600], "struggl": [373, 388, 400], "everyon": [374, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "underrepres": 374, "merit": [374, 378, 388], "teach": 374, "priceless": 374, "abid": 374, "codeofconduct": 374, "hesit": 374, "typo": [374, 388, 391, 1020], "send": [374, 400, 412, 524], "valuabl": [374, 968, 1002], "burden": [374, 862, 999], "slep": [374, 387, 996], "templat": [374, 378, 379, 387, 388, 548, 549, 554, 555, 556, 557, 998], "ecosystem": [374, 968, 997, 1002], "numpydoc": [374, 387, 390, 393], "compli": [374, 387, 921, 999], "fulfil": [374, 400, 407, 787, 790, 791, 801, 850, 854, 974], "anyon": [374, 388, 1002], "gist": [374, 382, 1001], "repo": [374, 378, 999], "feasibl": [374, 859, 860, 870], "traceback": [374, 379, 382, 385, 459, 1001], "doubt": [374, 375, 378, 974, 984, 998], "companion": [374, 988], "transcript": 374, "inclus": [374, 376, 382, 441, 447, 744, 776, 978, 979, 1020, 1034], "yourlogin": 374, "ruff": [374, 390, 393], "mypi": [374, 378, 390, 393, 1031], "synchron": [374, 408], "my_featur": 374, "commit": [374, 378, 382, 1001, 1020, 1021, 1022, 1023], "modified_fil": 374, "committ": [374, 1020], "modif": [374, 403, 407, 408, 437, 991], "approv": [374, 388, 407], "mrg": [374, 382], "incomplet": [374, 390, 400, 696, 783, 968, 975, 1013, 1024, 1026], "wip": [374, 382, 390], "matur": [374, 998, 999], "broad": [374, 387, 998], "collabor": 374, "_logist": 374, "doctest": [374, 387, 1005, 1020], "test_logist": [374, 382], "rst": [374, 378, 382, 1013, 1020, 1025], "test_common": [374, 382], "caught": [374, 382, 394], "submodul": [374, 378, 380, 399, 970, 976, 1020], "intricaci": 374, "narr": [374, 387, 649, 890, 895, 1020, 1021], "unittest": 374, "tests_for_packag": 374, "static": [374, 376, 380, 382, 637, 638, 643, 644, 651, 652, 653, 654], "astropi": 374, "linux": [374, 376, 377, 382, 998, 1020], "gh": 374, "lint": [374, 382], "nogil": [374, 375], "cpython": [374, 375, 380, 1035], "pyodid": 374, "sklearn_run_float32_test": 374, "lengthi": [374, 385], "etiquett": 374, "she": [374, 880, 881, 1030], "he": [374, 716, 746, 847, 848, 880, 881, 978, 1013, 1027, 1034, 1035], "shorten": [374, 993, 1033], "leader": [374, 1002], "grab": 374, "familiar": [374, 406, 1028], "acquaint": 374, "experienc": 374, "abandon": 374, "someon": [374, 378, 387, 1020], "glad": 374, "restructuredtext": 374, "some_param": 374, "hello": [374, 382, 939], "goodby": 374, "liter": [374, 378, 1002], "array_paramet": 374, "list_param": 374, "typed_ndarrai": 374, "multioutput_arrai": 374, "bracket": [374, 974], "delimit": [374, 984, 1035], "colon": 374, "selectfpr": [374, 409, 583, 586, 589, 590, 591, 597, 1036], "defer": 374, "backtick": [374, 379], "nowadai": 374, "dropdown": 374, "syntax": [374, 379, 382, 401, 459, 849, 850, 888, 967, 1004, 1031, 1033], "pragmat": 374, "bibliograph": 374, "arxiv": [374, 453], "_my": 374, "ref": [374, 381, 382, 968, 1026], "currentmodul": 374, "succeed": 374, "editor": [374, 382, 385], "_build": 374, "viewabl": 374, "pillow": [374, 390, 393], "sphinxext": [374, 390, 393], "opengraph": [374, 390, 393], "copybutton": [374, 390, 393], "vast": 374, "examples_pattern": 374, "your_regex_goes_her": 374, "no_mathjax": 374, "latexpdf": 374, "stone": [374, 898, 899, 994], "subdirectori": 374, "subpackag": [374, 378, 996, 1024, 1029], "cleanup": [374, 1020], "charg": 374, "test_requiring_mpl_fixtur": 374, "hang": [374, 1001, 1030, 1031], "fruit": [374, 979], "asv": 374, "asv_benchmark": 374, "airspe": 374, "veloc": 374, "publicli": [374, 1030], "zero_on": [374, 1021], "example_funct": 374, "exampleestim": 374, "_n_cluster": 374, "versionchang": 374, "meet": [374, 385, 388, 409, 563, 594, 847, 848, 887, 978, 991, 1002, 1028, 1029, 1030], "nit": 374, "retract": 374, "grammar": 374, "disambigu": [374, 818, 887, 991, 1035], "Will": [374, 488, 525, 618, 635, 636, 637, 643, 647, 648, 651, 652, 653, 654, 655, 656, 664, 666, 698, 705, 778, 855, 859, 863, 869, 870, 1023, 1024, 1026, 1028], "clariti": [374, 382], "unhelp": 374, "extran": 374, "rewritten": [374, 640, 1022, 1024], "generos": 374, "reward": 374, "heard": 374, "enemi": 374, "courtesi": 374, "justifi": [374, 380, 398, 556], "occas": 374, "deserv": [374, 380], "digest": [374, 1035], "overwhelm": 374, "sheer": [374, 1002], "myself": 374, "trickiest": 374, "buri": 374, "mixin": [374, 387, 415, 416, 417, 418, 419, 421, 422, 423, 424, 592, 921, 1022, 1031, 1035], "grep": 374, "delai": [374, 487, 787, 801, 811, 812, 946, 1034, 1035], "some_funct": [374, 917], "some_iter": 374, "flavor": [374, 981], "pointer": [374, 382, 433, 1029], "mandatori": [374, 408], "favorit": [374, 385, 1002], "Being": [374, 387, 388, 394, 974, 981], "killer": [374, 1002], "blame": 374, "migrat": [374, 1020], "ignorerevsfil": 374, "rev": [374, 598, 599], "ruin": 374, "maco": [375, 377, 390, 1028, 1032, 1034], "sklearn_enable_debug_cython_direct": 375, "scratch": [375, 433, 978, 1022], "gdb": [375, 377, 1001], "entrypoint_to_bug_reproduc": 375, "cdef": 375, "state_to_print": 375, "test_val": 375, "unifi": [375, 383, 385, 386, 407, 628, 998, 1020], "fuse": [375, 1026, 1036], "shell": [375, 382, 385, 1004, 1013], "cythonx": 375, "language_level": 375, "wraparound": 375, "initializedcheck": 375, "nonecheck": 375, "cdivis": 375, "recompil": [375, 380, 390], "pep073": 375, "pathwai": 375, "memoryview": 375, "cnp": 375, "lightweight": [375, 787, 801, 811, 812, 998], "virtual": [375, 390, 404, 1002], "enter": [375, 378, 400, 433, 985], "prang": 375, "void": 375, "my_func": [375, 380], "st\u00e9fan": 375, "benhel": 375, "_cython_bla": 375, "protect": [375, 378, 944], "_openmp_help": 375, "cimport": [375, 383, 1028], "omp_get_max_thread": 375, "prolifer": 376, "adopt": [376, 387, 886, 978, 992, 1028, 1035, 1037], "predomin": [376, 1021], "overrid": [376, 408, 437, 441, 448, 533, 539, 579, 580, 582, 584, 585, 588, 647, 655, 676, 677, 793, 809, 832, 833, 834, 836, 838, 840, 841, 842, 1020, 1028, 1030, 1034, 1036], "creation": [376, 502, 503, 504, 506, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 647, 830, 831, 1002, 1027, 1028, 1029, 1033], "optimis": [376, 400, 981, 998, 1023, 1033, 1035], "param1": [376, 1010], "param2": [376, 1010], "param3": 376, "postpon": [376, 378], "requisit": 376, "liner": [376, 816], "ipython": [376, 379, 380, 382, 1005, 1013], "session": [376, 380, 385, 390, 997, 1002, 1013], "trainabl": 376, "trail": [376, 962], "overridden": [376, 387, 410, 533, 539, 607, 612, 615, 685, 1028, 1029], "n_features_in_": [376, 387, 421, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 618, 619, 620, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 790, 791, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 1031, 1033, 1035], "slep010": [376, 1031], "duck": [376, 387, 1030], "check_x_i": [376, 383, 1024, 1028, 1029, 1034], "check_arrai": [376, 383, 459, 525, 888, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "templateclassifi": 376, "demo_param": 376, "myestim": 376, "subestim": 376, "my_extra_param": 376, "my_estim": [376, 401], "subestimator__c": 376, "subestimator__class_weight": 376, "subestimator__du": 376, "subestimator__fit_intercept": 376, "subestimator__intercept_sc": 376, "subestimator__l1_ratio": 376, "subestimator__max_it": 376, "subestimator__multi_class": 376, "subestimator__n_job": 376, "subestimator__penalti": 376, "subestimator__random_st": 376, "subestimator__solv": 376, "subestimator__tol": 376, "subestimator__verbos": 376, "subestimator__warm_start": 376, "__c": 376, "__class_weight": 376, "unpack": 376, "easiest": [376, 382, 401, 975], "__repr__": [376, 999, 1029], "setattr": 376, "deepcopi": 376, "__sklearn_clone__": [376, 425, 1036], "frozen": 376, "frozentransform": 376, "fitted_transform": [376, 455], "__getattr__": 376, "_estimator_typ": [376, 387, 1025], "clustermixin": [376, 1037], "is_classifi": [376, 387], "programmat": [376, 490, 1029], "_get_tag": [376, 1031], "allow_nan": [376, 909, 911, 1036], "array_api_support": [376, 396], "binary_onli": [376, 1030, 1031], "multioutput_onli": 376, "no_valid": 376, "non_determinist": [376, 1034], "primari": [376, 387, 405, 506, 985, 1002], "_safe_split": 376, "preserves_dtyp": 376, "poor_scor": 376, "requires_fit": 376, "requires_positive_x": [376, 1030, 1035], "requires_i": [376, 1031], "requires_positive_i": 376, "_skip_test": 376, "_xfail_check": 376, "check_nam": 376, "xfail": [376, 382], "skiptestwarn": 376, "x_type": 376, "2darrai": 376, "signifi": [376, 400, 572, 798, 983], "1dlabel": 376, "2dlabel": 376, "_more_tag": 376, "mymultioutputestim": 376, "ridgeregress": 376, "idiosyncrat": 376, "subclass": [376, 410, 565, 944, 1025, 1028, 1033], "onetoonefeaturemixin": [376, 424], "classnameprefixfeaturesoutmixin": [376, 424, 1035], "auto_wrap_output_kei": 376, "mytransform": 376, "__init_subclass__": 376, "ownership": 376, "pep8": [376, 378, 382], "indent": [376, 944], "nsampl": [376, 785, 786], "statement": [376, 379, 382, 385, 387, 405, 996, 1013], "flow": 376, "client": 376, "corollari": 376, "foo": [376, 572, 982], "baz": [376, 572], "pyflak": 376, "asanyarrai": 376, "hadamard": 376, "choose_random_sampl": 376, "freestand": 376, "unmodifi": [376, 387], "random_state_": [376, 527, 618, 839, 1034], "gaussiannois": 376, "showcas": 376, "quasi": [376, 847, 848, 974], "assert_allclos": 376, "rtol": [376, 830, 831, 835], "atol": [376, 663, 665, 830, 831, 835], "checklist": 377, "unclaim": 377, "workflow": [377, 378, 386, 404], "markdown": 377, "saniti": [377, 854, 978, 1020, 1021], "outdat": 377, "diff": [377, 978], "valgrind": 377, "platform": [377, 385, 387, 388, 394, 1002, 1025, 1028, 1029, 1031, 1033, 1034], "x86_64": [377, 390], "yep": 377, "gperftool": 377, "debugg": [377, 382], "gprof": 377, "callgrind": 377, "kcachegrind": 377, "warm": [377, 387, 522, 528, 534, 536, 537, 601, 644, 650, 657, 659, 667, 668, 669, 974, 999, 1030, 1032, 1034], "homebrew": [377, 390], "freebsd": 377, "rrrcn": 378, "pep101": 378, "build_tool": 378, "blocker": 378, "mileston": 378, "maint_tool": 378, "sort_whats_new": 378, "whats_miss": 378, "fixm": [378, 387], "feedstock": 378, "recip": [378, 975, 1002], "yaml": 378, "whats_new": [378, 382], "v0": [378, 462, 463, 469, 503, 579, 580, 582, 787, 801, 849, 852, 1021, 1028, 1029, 1030], "freez": [378, 390, 394, 999, 1002, 1028], "0rc1": 378, "__version__": 378, "draft": [378, 388], "rebas": 378, "bugfix": [378, 1020, 1034], "backport": [378, 383, 1027], "maint": 378, "enh": 378, "blindli": 378, "invit": 378, "cherri": 378, "shortlog": 378, "f2": [378, 979], "sed": [378, 1020], "front": [378, 1027], "rc1": 378, "suffix": [378, 813, 978, 1030], "brows": 378, "3a": 378, "22wheel": 378, "pyproject": 378, "toml": 378, "oldest": [378, 487], "abi": 378, "acronym": 378, "deliveri": 378, "whl": 378, "22publish": 378, "went": [378, 978], "bot": [378, 983, 1034], "sync": 378, "testpypi": 378, "tarbal": [378, 1035], "wheelhouse_upload": 378, "twine": 378, "rrr": 378, "symlink": 378, "latestst": 378, "tmp": 378, "ln": [378, 974, 982, 988], "versionwarn": 378, "secur": [378, 387, 998, 999, 1002, 1015], "twitter": 378, "linkedin": 378, "squash": [378, 410, 522, 528, 533, 539], "authorship": 378, "permalink": 378, "_hist_gradient_boost": 378, "_iter": 378, "pickl": [378, 387, 394, 408, 579, 580, 582, 830, 831, 998, 999, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036], "checker": [378, 810], "type_check": 378, "test_enable_hist_gradient_boost": 378, "enable_hist_gradient_boost": [378, 1029], "enable_my_experimental_featur": 378, "indefinit": 378, "incentiv": 378, "workabl": 379, "stackoverflow": [379, 382, 385, 1001], "blogpost": 379, "mcve": [379, 382, 385], "my_data": 379, "with_mean": [379, 870, 881, 988, 1028, 1033], "default_scor": 379, "other_scor": 379, "scrollbar": 379, "tripl": 379, "fenc": 379, "qualifi": 379, "a674e682c281": 379, "lda_featur": 379, "lda_model": 379, "n_topic": [379, 527, 1027], "minimalist": [379, 408, 1001], "continuous_featur": 379, "positive_featur": 379, "invest": [380, 1002], "idiom": 380, "crunch": 380, "performancetip": 380, "reimplement": [380, 387, 1026, 1030], "spottabl": 380, "amen": [380, 410, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 967], "cpp": 380, "engag": [380, 388], "tent": 380, "somewher": [380, 978, 1013], "prun": 380, "14496": [380, 1029], "ncall": 380, "tottim": 380, "percal": 380, "cumtim": 380, "lineno": 380, "042": 380, "_nls_subproblem": 380, "1263": 380, "157": 380, "_po": 380, "057": [380, 528], "_initialize_nmf": 380, "_spars": 380, "_neg": 380, "461": 380, "hotspot": 380, "16159": [380, 1031], "840": 380, "2833": 380, "653": [380, 602, 605, 616], "_dotbla": 380, "651": 380, "036": [380, 463], "1397": 380, "2780": 380, "167": [380, 1020], "064": [380, 986], "1542": 380, "2734": 380, "fromnumer": 380, "1185": 380, "lapack_lit": 380, "dgesdd": 380, "rewrit": [380, 994, 1012, 1020], "shallow": [380, 407, 552, 553, 905], "4x": [380, 1035], "line_profil": 380, "wire": [380, 525, 532], "profile_default": 380, "ipython_config": 380, "terminalipythonapp": 380, "interactiveshellapp": 380, "lprun": 380, "qtconsol": 380, "_nmf": 380, "137": [380, 1021], "73153": 380, "h_init": 380, "5863": 380, "172": [380, 484, 485, 640, 974], "nl": 380, "112141": 380, "2336": 380, "wtv": 380, "16144": 380, "336": [380, 988], "wtw": 380, "177": 380, "1880": 380, "195133": 380, "305": 380, "grad": [380, 1002], "495761": 380, "777": 380, "proj_gradi": 380, "2449": 380, "130": 380, "1474": 380, "4474": 380, "inner_it": 380, "83833": 380, "hn": 380, "194239": 380, "191": [380, 979], "48858": 380, "150407": 380, "102": [380, 1011, 1022], "gradd": 380, "193": [380, 407, 706, 776, 991], "515390": 380, "dqd": 380, "pin": 380, "memory_profil": [380, 390, 393], "memit": 380, "mprun": 380, "1e7": 380, "402344": 380, "standalon": [380, 649, 890, 1001], "bianp": 380, "conda_prefix": 380, "pydebug": 380, "extra_cflag": 380, "dpy_debug": 380, "num_cor": 380, "dbg": 380, "fortun": [380, 407, 1013, 1033, 1034], "my_fil": 380, "callgrin": 380, "prof": 380, "encapsul": [381, 401, 414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901], "artist": [381, 429, 623, 689, 691, 692, 693, 793, 809, 904], "classmethod": [381, 429, 622, 623, 688, 689, 691, 692, 693, 793, 809], "line_": [381, 429, 689, 691, 692, 693, 793, 809], "gridspecfromsubplotspec": 381, "subplot_spec": 381, "get_subplotspec": 381, "ax_top_left": 381, "ax_top_right": 381, "ax_bottom": 381, "bounding_ax_": [381, 623], "lines_": [381, 623, 793, 809], "contours_": [381, 623], "advic": [382, 410, 613, 614], "forth": 382, "userscript": 382, "tampermonkei": 382, "greasemonkei": 382, "shortcut": [382, 410], "pr_number": 382, "navig": [382, 1022], "overlai": [382, 623], "codecov": 382, "test_sparsifi": 382, "pdb": 382, "ipdb": [382, 1013], "pdbcl": 382, "terminalpdb": 382, "lf": 382, "ff": 382, "tb": [382, 562, 563, 564, 565, 566, 567, 568, 569], "runxfail": 382, "werror": 382, "mailman": 382, "listinfo": 382, "crowd": [382, 388, 975, 999, 1001], "imped": 382, "attent": [382, 598, 599, 992], "pytb": 382, "stdin": [382, 1013], "perman": 382, "25163598": 382, "issuenumb": 382, "1506": 382, "volunt": 382, "establish": [382, 385, 388, 968], "clarifi": [382, 388, 781], "regression_test": 382, "0008": 382, "patienc": [382, 387], "crop": [382, 1035], "manifest": [382, 975, 981], "fault": [382, 1028, 1030, 1032], "glibc": 382, "uniniti": 382, "trace": [382, 400, 413, 464, 466, 467, 470, 471, 472, 680, 684, 975, 1031], "supp": 382, "readm": [382, 408, 484], "my_test_script": 382, "mobil": 382, "deploy": [382, 998, 999, 1002], "scalewai": 382, "aw": 382, "graviton": 382, "laptop": [382, 459, 888, 1034, 1035, 1036], "workstat": 382, "qemu": 382, "docker": [382, 394, 1033, 1034], "multiarch": 382, "ppc64le": 382, "filesystem": [382, 390, 1033], "pushd": 382, "wget": 382, "aarch64": [382, 390], "arm64v8": 382, "mount": 382, "privileg": 382, "pwd": 382, "reinit": 382, "bashrc": 382, "ephemer": 382, "evolv": [383, 1035], "as_float_arrai": 383, "column_or_1d": [383, 1031, 1035], "multitarget": 383, "multi_output": [383, 910], "safe_index": [383, 1030], "check_memori": [383, 387, 1027], "5488135": 383, "71518937": 383, "60276338": 383, "54488318": 383, "has_fit_paramet": 383, "randomized_range_find": [383, 1021, 1026], "arrayfunc": 383, "cholesky_delet": 383, "min_po": 383, "least_angl": 383, "fast_logdet": 383, "safe_sparse_dot": [383, 1030], "weighted_mod": 383, "sample_without_replac": [383, 1026], "n_popul": [383, 947], "sparsefunc": [383, 1033], "mean_variance_axi": [383, 1026, 1033], "sparsefuncs_fast": 383, "inplace_csr_row_normalize_l1": 383, "inplace_csr_row_normalize_l2": 383, "inplace_csr_column_scal": 383, "sort_graph_by_row_valu": [383, 1035], "single_source_shortest_path_length": 383, "dijkstra": [383, 679, 975], "graph_shortest_path": [383, 1033], "all_estim": [383, 1030, 1031, 1035], "all_displai": [383, 1035], "all_funct": [383, 1035], "is_multilabel": 383, "dict_learn": [383, 522, 528, 537, 1021, 1028, 1030, 1033, 1034, 1036], "gen_batch": [383, 931], "safe_mask": 383, "safe_sqr": 383, "murmurhash3_32": 383, "murmurhash3_x86_32": [383, 943], "cryptograph": 383, "lookup": [383, 943, 1029], "bloom": [383, 943], "384616559": 383, "3910350737": 383, "murmurhash": 383, "graphical_lasso": [383, 462, 463, 1028, 1036], "kit": 385, "toolbox": [385, 998, 1002], "multilay": [385, 976], "kera": [385, 998], "forese": 385, "redesign": [385, 1020], "pystruct": [385, 998], "ssvm": 385, "seqlearn": 385, "4143": 385, "meanwhil": [385, 993], "pipegraph": 385, "squared_loss": [385, 1033], "undertak": 385, "slowli": [385, 387, 535, 927], "ordinarili": [385, 387], "corrobor": 385, "proof": [385, 407, 884, 990], "road": 385, "bridg": [385, 975, 998], "reproduct": [385, 974, 1001], "guidanc": [385, 410], "gitter": [385, 996, 1027, 1028], "value_kei": [385, 905], "levenshtein": 385, "dna": [385, 619, 968], "rna": 385, "pain": 385, "suppli": [385, 400, 637, 910, 911, 981, 1002, 1024, 1026, 1028, 1033], "leven": 385, "acctcctagaag": 385, "acctactagaagtt": 385, "gaatattaggccga": 385, "lev_metr": 385, "multiprocess": [385, 387, 944, 946, 981, 1020, 1028, 1034], "exec": 385, "nvidia": 385, "cuda": [385, 396], "reiniti": 385, "culprit": 385, "refus": [385, 880, 881], "forkserv": 385, "joblib_start_method": 385, "set_start_method": 385, "dozen": [386, 410], "newli": [386, 407, 454, 985, 1026, 1027, 1035], "leakag": [386, 387, 401, 1015], "disclos": 386, "entail": [386, 868, 870, 992], "r_squar": 386, "searchcv": [386, 1035], "tacit": 387, "inconsist": [387, 394, 408, 499, 500, 567, 892, 895, 914, 984, 993, 1015, 1020, 1025, 1026, 1027, 1028, 1030, 1033, 1035, 1036], "elsewher": [387, 453, 454, 462, 463, 469], "formal": [387, 388, 400, 407, 830, 831, 975, 978, 979, 982], "thereof": 387, "transduct": [387, 400, 885, 886, 999], "position": 387, "serial": [387, 934, 998, 999, 1015, 1020, 1028, 1032], "unpickl": [387, 394, 567, 830, 831, 1026, 1032, 1036], "pep257": 387, "nuanc": 387, "flaw": [387, 407], "terminologi": [387, 1028], "est1": [387, 623], "est2": [387, 623], "exemplifi": 387, "_score": [387, 787, 801, 813, 978, 1020, 1033], "_loss": [387, 978], "divers": [387, 407], "abstract": [387, 405, 410, 609, 759, 998, 1020], "notfittederror": [387, 839, 962, 1024, 1026, 1029, 1030, 1036], "descriptor": [387, 499, 500], "hoc": 387, "spectral_embed": [387, 975, 1021, 1024, 1026, 1028, 1030, 1033, 1034, 1035], "maxabs_scal": [387, 859, 1028], "astrai": 387, "readthedoc": 387, "entireti": 387, "shield": 387, "n_output": [387, 407, 417, 423, 424, 428, 433, 436, 456, 460, 473, 474, 475, 523, 525, 527, 528, 530, 533, 534, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 573, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 619, 621, 624, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 661, 663, 664, 665, 666, 667, 669, 670, 712, 713, 718, 735, 736, 738, 740, 741, 743, 744, 775, 778, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 837, 839, 840, 841, 846, 847, 848, 849, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 867, 868, 869, 870, 882, 883, 885, 886, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 916, 949, 978, 979, 994, 1027, 1030], "n_target": [387, 403, 473, 474, 475, 476, 515, 547, 602, 634, 637, 638, 641, 642, 643, 644, 645, 647, 648, 651, 652, 653, 654, 655, 656, 662, 663, 664, 665, 666, 672, 673, 674, 675, 676, 677, 678, 979, 1032, 1034, 1036], "synonym": [387, 832, 833, 834, 840, 841, 842], "themat": 387, "alphanumer": [387, 579, 580, 582], "statistician": [387, 870], "prescrib": 387, "baggingclassifi": [387, 407, 547, 900, 968, 1023, 1026, 1027, 1028, 1031, 1035, 1036], "estimator__max_depth": [387, 967], "improp": [387, 1027], "pairwise_kernel": [387, 410, 443, 634, 755, 856, 976, 1020, 1027], "distancemetr": [387, 406, 981, 1028, 1032, 1033, 1034], "di": [387, 400, 405, 522, 528, 655, 676, 677, 883, 1024, 1033], "vectori": [387, 1030], "noun": 387, "venu": [387, 1001], "broadli": [387, 400], "consolid": [387, 388, 1020], "coo": [387, 544, 545, 683, 857, 906, 910, 911, 981, 1021], "lil": [387, 544, 545, 857, 906, 932, 981], "csgraph": [387, 1033], "absent": [387, 408, 744, 811], "densifi": [387, 405, 649, 650, 657, 659, 667, 668, 669, 890, 968, 1022], "lossili": 387, "unnorm": [387, 527, 975, 1026, 1027], "encompass": [387, 441, 447, 546, 547, 975], "is_regressor": 387, "get_n_split": [387, 788, 789, 792, 794, 795, 796, 797, 800, 802, 803, 804, 805, 806, 807, 808], "estimatorcv": [387, 999], "loo": [387, 795, 1031], "router": [387, 391, 935, 936, 937, 938], "metadta": 387, "type_of_target": [387, 857, 871, 979, 1034, 1035], "hashabl": [387, 858, 861, 989], "labelencod": [387, 560, 864, 989, 1020, 1028, 1035], "canonic": 387, "xxx": 387, "everywher": 387, "multilabelbinar": [387, 819, 854, 863, 979, 1004, 1023, 1025, 1026, 1028, 1029], "nonetheless": [387, 978], "wherein": 387, "amber": 387, "return_cov": [387, 558, 559, 602, 850], "test_idx": 387, "_idx": 387, "label1": 387, "label2": 387, "class_label": [387, 548, 552, 555, 649, 650, 657, 659, 665, 666, 667, 898, 900, 916, 993], "bincount": [387, 404, 548, 552, 555, 649, 650, 657, 659, 665, 666, 667, 890, 892, 895, 898, 900, 915, 916, 1027], "rebalanc": 387, "compute_class_weight": [387, 1023, 1034], "check_cv": [387, 1025], "obei": [387, 976], "triangl": [387, 405, 434, 438, 450, 976, 981], "concurr": [387, 408, 944, 1032, 1034], "unset": [387, 1028], "get_scor": [387, 723, 1027], "check_scor": 387, "uppercas": [387, 1033], "unavail": [387, 649, 650, 939, 1027, 1033], "deadlock": 388, "meritocrat": 388, "somebodi": 388, "unanim": 388, "emeritu": [388, 996], "recant": 388, "outreach": 388, "brand": [388, 390], "social": [388, 400, 1002], "strateg": 388, "entiti": [388, 716, 746], "duti": 388, "resign": 388, "occasion": [388, 717, 1029], "escal": 388, "fallback": [388, 390, 818, 819, 978], "hereaft": 388, "lazi": [388, 408, 992, 1024], "opinion": 388, "slep020": 388, "veto": 388, "appeal": 388, "revis": [388, 661], "slep000": 388, "insuffici": [389, 977, 1012], "afraid": 390, "64bit": [390, 1020], "miniconda": 390, "administr": 390, "venvpython": 390, "venvsourc": 390, "activatesourc": 390, "activatesklearn": 390, "activatepip": 390, "learnpip": 390, "learnpip3": 390, "learnconda": 390, "installedpython3": 390, "virtualenvpython3": 390, "installedpython": 390, "virtualenvpython": 390, "installedconda": 390, "environmentpython": 390, "dnf": 390, "pacman": 390, "raspberri": 390, "polar": [390, 393, 1013], "pyarrow": [390, 393], "lock": [390, 393, 944, 946], "19137": 390, "py3": 390, "apk": 390, "bind": [390, 1020, 1027, 1028], "buster": 390, "fedora30": 390, "pkgsrc": 390, "py39": 390, "intelex": [390, 998], "oned": 390, "sklearnex": 390, "plugin": 390, "appdata": 390, "usernam": 390, "windowsapp": 390, "oserror": [390, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489], "errno": 390, "pythonsoftwarefound": 390, "7_qbz5n2kfra8p0": 390, "localcach": 390, "python37": 390, "data_nam": 390, "australian": 390, "data_vers": 390, "lift": 390, "regedit": 390, "menu": 390, "hkey_local_machin": 390, "currentcontrolset": 390, "longpathsen": 390, "broken": [390, 404, 590, 591, 626, 711, 906, 978, 994, 1023, 1027, 1028, 1029, 1031, 1034], "set_": 391, "_request": 391, "weighted_acc": 391, "sample_weigh": 391, "sel": [391, 409], "scoring_weight": 391, "fitting_weight": 391, "hasn": 391, "retrain": [394, 999, 1036], "inconsistentversionwarn": [394, 1036], "simplefilt": 394, "model_from_prevision_vers": 394, "original_sklearn_vers": [394, 567], "untrust": 394, "malici": 394, "unsupport": [394, 484, 1028, 1033], "inadvis": 394, "immut": 394, "snapshot": [394, 550, 551, 999], "portabl": 394, "alex": [394, 408, 993, 1020, 1023, 1028, 1030, 1031, 1032, 1034, 1035, 1036], "gaynor": 394, "sio": 394, "get_untrusted_typ": 394, "unknown_typ": 394, "exchang": [394, 1001], "markup": 394, "pmml": [394, 998], "onnx": [394, 998, 999], "xml": 394, "sklearn2pmml": [394, 998], "affero": 394, "gplv3": 394, "datastructur": [396, 1028, 1032], "namespac": 396, "array_api": 396, "x_np": 396, "y_np": 396, "x_cu": 396, "y_cu": 396, "devic": [396, 404, 573], "array_api_dispatch": [396, 459, 888], "_estimator_with_converted_arrai": 396, "transfer": [396, 974, 999], "_array_api": 396, "cupy_to_ndarrai": 396, "lda_np": 396, "torch": 396, "x_torch": 396, "y_torch": 396, "array_api_compat": 396, "submatrix": [397, 415, 442, 444], "unusu": [397, 984, 988, 1028], "submatric": 397, "bipartit": [397, 444, 502, 983], "subgraph": 397, "a_n": 397, "lceil": [397, 984], "log_2": [397, 554, 984], "rceil": [397, 984], "bmatrix": 397, "u_2": 397, "u_": [397, 473, 474, 475], "n_column": [397, 442, 444], "inderjit": [397, 444], "spectralbiclust": [397, 444, 1022, 1026, 1027, 1031], "blockwis": [397, 974], "bistochast": [397, 442], "l_": [397, 602, 643, 731, 978], "k_": [397, 410, 607, 610, 612, 615, 764, 988], "u_1": 397, "v_1": 397, "v_2": 397, "v_": [397, 408], "kluger": [397, 442, 504], "yuval": [397, 442], "microarrai": [397, 442, 504, 619, 968], "cap": [397, 400, 745, 978, 1029], "hochreit": [397, 710], "hungarian": [397, 710], "bodenhof": [397, 710], "fabia": [397, 710], "acquisit": [397, 710], "murphi": [398, 634, 971], "discriminatori": 398, "wilk": 398, "tricki": [398, 975], "logit": [398, 410, 649, 650, 974], "f_i": 398, "train_set": 398, "test_set": 398, "disjoint": [398, 400, 401, 428, 695, 721, 745, 747, 975], "platt": [398, 428, 892, 893, 895, 896, 993], "_i": [398, 407, 969, 974, 978, 982, 993], "_j": [398, 969], "f_j": [398, 986], "meteorologi": 398, "climatologi": 398, "precipit": 398, "wea": 398, "1990a": 398, "menon": 398, "ak": [398, 1034, 1035], "jiang": [398, 1024, 1031], "xj": 398, "vembu": 398, "ohno": 398, "machado": [398, 713], "703": [398, 504], "kull": [398, 978], "silva": [398, 679, 975, 1031, 1033], "filho": 398, "flach": [398, 978], "mario": [398, 1024, 1026, 1034, 1035, 1036], "w\u00fcthrich": 398, "merz": 398, "2023": [398, 1035, 1036], "actuari": 398, "refurbish": 399, "rough": [399, 984, 1006], "uniti": 399, "lipschitz": [399, 990], "usecas": 400, "mu_j": 400, "coher": 400, "elong": 400, "lloyd": [400, 434, 438, 440, 450, 1034, 1035], "distant": [400, 683, 700, 981], "sergei": [400, 1022, 1026, 1027, 1028, 1029, 1030], "vassilvitskii": [400, 438, 451], "eighteenth": 400, "siam": [400, 404, 443, 451, 453, 526, 532], "industri": [400, 998], "predetermin": [400, 975], "scullei": 400, "19th": 400, "exemplar": [400, 431, 445, 1012], "sent": [400, 819], "leftarrow": [400, 982, 992], "foral": [400, 410, 604], "neq": [400, 978, 980, 988], "notin": 400, "hill": [400, 439, 452, 1030], "climb": [400, 439, 452], "maxima": [400, 410], "x_j": [400, 410, 605, 606, 610, 613, 614, 616, 969, 970, 974, 981, 993, 994], "dictat": 400, "solvabl": 400, "stella": [400, 443, 453], "jianbo": [400, 443, 453, 682], "shi": [400, 443, 453, 682], "anil": [400, 443, 453], "daml": [400, 443, 453], "victor": [400, 443, 453, 1027, 1030], "minden": [400, 443, 453], "lex": [400, 443, 453], "ying": [400, 443, 453, 1034], "adjac": [400, 405, 443, 453, 576, 577, 626, 682, 686, 932, 975, 981, 1012], "adjacency_matrix": 400, "ulrik": [400, 443, 453, 682], "von": [400, 443, 453, 682, 998, 1027, 1028], "luxburg": [400, 443, 453, 682], "jitendra": [400, 443, 453, 682], "malik": [400, 443, 453, 682], "walk": [400, 406, 1023], "marina": 400, "meila": 400, "ng": [400, 405, 682, 836, 982, 984, 1031], "jordan": [400, 405, 682, 785, 1030, 1031, 1034, 1035], "yair": [400, 682], "precondit": [400, 443, 453, 686, 994, 1036], "zhuzhunashvili": [400, 453], "forbid": [400, 407], "macroscop": 400, "occupi": [400, 978], "manhattan": [400, 432, 436, 441, 448, 752, 761, 768, 769, 770, 837, 976, 981, 1024, 1029, 1036], "bisecting_strategi": [400, 434], "largest_clust": [400, 434], "biggest_inertia": [400, 434], "biggest": [400, 403, 405, 434], "steinbach": [400, 1035], "karypi": 400, "vipin": 400, "egin": 400, "minnesota": 400, "june": [400, 975, 1026, 1036], "weblog": 400, "abirami": 400, "mayilvahanan": 400, "emerg": [400, 1002], "ijet": 400, "jian": 400, "xinyu": 400, "gou": 400, "baod": 400, "hebei": 400, "knee": 400, "triangular": [400, 454, 602, 975], "whichev": [400, 407, 437, 535, 552, 553, 624, 641, 645, 647, 655, 673, 674, 688], "conjunct": [400, 585, 787, 790, 791, 793, 801, 809, 811, 812, 813, 814, 817, 945, 968, 974, 1035], "extract_dbscan": 400, "radius_neighbors_graph": [400, 411, 435, 832, 833, 834, 836, 838, 840, 841, 842, 843, 981, 1024, 1029, 1032], "ester": [400, 411, 435], "kriegel": [400, 411, 435, 441, 448, 836, 984], "sander": [400, 411, 435, 437, 441, 448, 836, 984, 1029, 1030], "xu": [400, 403, 411, 435, 992, 1033, 1034], "portland": [400, 411, 435], "aaai": [400, 411, 435, 825, 980], "226": [400, 411, 435], "revisit": [400, 411, 435], "schubert": [400, 411, 435, 441, 1024, 1025, 1028, 1029, 1031, 1032, 1033, 1034], "tod": [400, 411, 435], "lj2017": 400, "d_c": 400, "x_p": [400, 974], "d_m": 400, "x_q": 400, "g_": 400, "varepsilon": [400, 992, 993], "cm2013": 400, "mst": 400, "minimum_cluster_s": 400, "campello": [400, 437], "moulavi": [400, 437], "pei": [400, 1027], "tseng": 400, "cao": 400, "motoda": 400, "pakdd": 400, "lectur": [400, 635, 970, 997], "7819": [400, 1027], "berlin": [400, 405, 526, 687, 716, 746, 978], "heidelberg": [400, 405, 526, 687, 716, 746, 978], "mcinn": [400, 1026, 1027, 1028, 1030, 1031, 1036], "heali": 400, "icdmw": 400, "max_ep": [400, 441, 446, 448], "nearbi": [400, 981], "cluster_hierarchy_": [400, 441], "planar": 400, "peripheri": 400, "wall": 400, "ankerst": [400, 441, 448], "mihael": [400, 441, 448], "marku": [400, 441, 448, 1028, 1030, 1031, 1032], "breunig": [400, 441, 448, 836, 984], "han": [400, 433, 441, 448, 1020, 1028, 1029, 1033], "j\u00f6rg": [400, 441, 448, 1028], "sigmod": [400, 441, 448, 836, 984], "cft": 400, "lossi": 400, "cf": [400, 403, 433, 691, 974, 988, 999], "subclust": [400, 433], "till": [400, 433, 778, 978], "temporarili": [400, 1025], "farthest": 400, "brc": [400, 433], "tian": [400, 433, 1025, 1026, 1027], "raghu": [400, 433], "ramakrishnan": [400, 433], "maron": [400, 433], "livni": [400, 433], "sfu": [400, 433], "coursecentr": [400, 433], "459": [400, 433], "zhang96": [400, 433], "roberto": [400, 433], "perdisci": [400, 433], "jbirch": [400, 433], "java": [400, 433, 998], "satisfi": [400, 641, 645, 708, 726, 727, 830, 831], "labels_pr": [400, 695, 696, 705, 706, 708, 721, 726, 727, 745, 747, 776, 783], "unadjust": [400, 978, 1032], "swap": [400, 405, 707, 726, 957, 958, 1020], "ri": [400, 696, 776], "c_2": [400, 975], "unord": [400, 407, 988], "esp": [400, 1020], "hubert": [400, 696, 706, 776], "arabi": [400, 696, 706, 776], "steinlei": [400, 696], "psycholog": [400, 696, 707], "agreement": [400, 695, 707, 745, 747, 783, 978], "22504": 400, "10526": 400, "u_i": [400, 473, 474, 475, 745], "v_j": [400, 745, 983], "veb2009": 400, "a_i": 400, "b_j": 400, "yat2016": 400, "average_method": [400, 695, 747, 1028], "vinh": [400, 695], "veb2010": 400, "strehl": 400, "joydeep": 400, "1162": 400, "153244303321897735": 400, "epp": [400, 695], "bailei": [400, 695], "26th": [400, 716, 746, 978], "1553374": 400, "1553511": 400, "9781605585161": 400, "csail": [400, 657, 658, 667, 827], "volume11": 400, "vinh10a": 400, "algesheim": 400, "tesson": 400, "30750": 400, "1038": 400, "srep30750": 400, "rosenberg": [400, 708, 727, 783], "hirschberg": [400, 708, 727, 783], "b2011": 400, "homogeneity_completeness_v_measur": [400, 1029], "n_k": [400, 541], "n_c": [400, 650], "julia": [400, 708, 727, 783], "media": [400, 1002], "hila": 400, "becker": [400, 1002, 1023, 1032], "fowlkes_mallows_scor": [400, 978, 1026, 1028], "fmi": [400, 721], "fp": [400, 703, 709, 721, 772, 773, 774, 777, 978], "fn": [400, 703, 709, 721, 772, 773, 774, 777, 978, 979], "47140": 400, "fowkl": [400, 721], "1983": [400, 721, 870], "tandfonlin": 400, "01621459": 400, "10478008": 400, "kmeans_model": 400, "1987": [400, 598, 599, 780, 781], "calinski_harabasz_scor": [400, 1028], "dispers": [400, 701, 715, 974], "n_e": 400, "mathrm": [400, 402, 405, 409, 974, 994], "b_k": 400, "w_k": [400, 974], "c_q": 400, "n_q": 400, "c_e": 400, "cali\u0144ski": 400, "1974": [400, 408, 701], "dendrit": [400, 701], "davies_bouldin_scor": [400, 1028], "6619": 400, "bould": 400, "c_i": [400, 981], "c_j": [400, 983], "s_i": [400, 988], "diamet": 400, "nonneg": [400, 405, 444, 529, 531, 538, 867], "s_j": 400, "max_": [400, 978], "1979": [400, 715, 759], "halkidi": 400, "batistaki": 400, "yanni": 400, "vazirgianni": 400, "michali": 400, "145": 400, "contingency_matrix": [400, 745, 1028], "pair_confusion_matrix": [400, 1032], "permit": [401, 458, 579, 580, 582, 787, 790, 791, 801, 812, 851, 852, 978, 979, 980, 1026], "clf__c": 401, "pca1": [401, 416], "svm1": 401, "77484909e": 401, "07058917e": 401, "pca2": [401, 416], "svm2": 401, "raw_target_regr": 401, "bypass": [401, 590, 637, 643, 898, 899, 900, 901], "check_invers": [401, 456, 854, 988, 1028, 1034, 1035], "linear_pca": 401, "make_union": [401, 849, 1023, 1027], "unreli": 401, "citi": [401, 408, 457, 1013], "london": [401, 408, 457], "sallisaw": [401, 457], "bow": 401, "moveabl": 401, "feast": 401, "grape": 401, "wrath": 401, "expert_r": 401, "user_r": 401, "city_categori": 401, "title_bow": 401, "city_london": 401, "city_pari": 401, "city_sallisaw": 401, "507": 401, "301": [401, 992], "ignored_new_col": 401, "estimator_html_repr": [401, 1031, 1032, 1033, 1034], "shrunk_covari": 402, "sigma_": [402, 635, 636, 1033], "365": [402, 464], "wiesel": [402, 413, 466], "eldar": [402, 413, 466], "hero": [402, 413, 466], "5016": [402, 413, 466], "5029": [402, 413, 466], "_k": [402, 972, 974], "glasso": [402, 469], "biostatist": [402, 469], "uncommon": [402, 649, 890, 993], "downweight": [402, 527], "driessen": [402, 460, 465, 984], "fastmcd": [402, 460, 465], "raw_location_": [402, 460, 465], "raw_covariance_": [402, 460, 465], "multidimension": [403, 679, 681, 683, 685, 975, 981], "plsw2a": 403, "u_k": [403, 405], "v_k": [403, 405, 522, 528, 536, 537], "x_k": [403, 405, 972, 981], "y_k": [403, 988], "xi_k": 403, "omega_k": [403, 972], "gamma_k": 403, "delta_k": 403, "nipal": [403, 474, 475], "xp": [403, 865], "x_rotations_": [403, 473, 474, 475], "y_rotations_": [403, 473, 474, 475], "ty": 403, "x_weights_": [403, 473, 474, 475, 476], "y_weights_": [403, 473, 474, 475, 476], "yv": 403, "tx": 403, "pls1": [403, 475], "pls2": [403, 475], "tx_k": [403, 972], "ty_k": 403, "ja": [403, 1027], "wegelin": 403, "methodolog": [404, 1001], "academ": [404, 1002], "commerci": [404, 1002], "flowchart": [404, 1006], "f1_macro": [404, 978, 1024], "custom_cv_2fold": 404, "custom_cv": 404, "9333": 404, "scorer1_nam": 404, "scorer2_nam": 404, "return_indic": [404, 813, 1036], "precision_macro": [404, 1008], "recall_macro": [404, 978], "test_precision_macro": 404, "test_recall_macro": 404, "prec_macro": 404, "rec_macro": 404, "test_prec_macro": 404, "test_rec_macro": 404, "train_prec_macro": 404, "train_rec_macro": 404, "undistinguish": 404, "kf": [404, 792], "12883823": 404, "rkf": [404, 802], "weigh": [404, 1027], "caveat": [404, 410], "part3": 404, "spector": 404, "submodel": 404, "kohavi": 404, "jnt": 404, "bharat": [404, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "rao": [404, 1032, 1035], "fung": 404, "rosal": 404, "witten": 404, "leavepout": [404, 795, 1008], "ss": 404, "gkf": 404, "sgkf": [404, 805], "suboptim": [404, 691, 693, 772, 779, 981, 1028, 1036], "leavepgroupsout": [404, 789, 1008, 1026], "n_group": [404, 796, 1008, 1026], "lpgo": [404, 796], "gss": [404, 789], "withheld": 404, "predefinedsplit": [404, 1008, 1024], "test_fold": [404, 800], "train_indx": 404, "test_indx": 404, "autocorrel": 404, "superset": [404, 808, 978], "surplu": 404, "tscv": [404, 808], "inbuilt": 404, "some_integ": 404, "n_cv": [404, 428], "isotropi": 405, "alik": [405, 976], "halko": [405, 526, 532, 535, 926, 927], "szlam": [405, 926, 927], "disadvantag": [405, 410, 974, 975, 982, 992, 993, 994], "parsimoni": [405, 988], "jen09": 405, "mrl09": 405, "ell_1": [405, 974], "underset": [405, 974, 981, 994], "operatornam": [405, 731, 974, 978, 994], "fro": [405, 529, 531, 538, 684, 974], "gentli": 405, "spirit": 405, "mairal": [405, 522, 528], "bach": [405, 522, 527, 528, 529, 649, 974], "ponc": [405, 522, 528], "sapiro": [405, 522, 528], "jenatton": 405, "obozinski": 405, "scholkopf1997": 405, "bakir2003": 405, "smola": [405, 408, 526, 856, 988, 993], "klau": [405, 526, 856], "eigendecompos": 405, "eigensolv": [405, 443, 453, 526, 535, 686, 975], "eigsh": [405, 526, 1026, 1027], "lehoucq": 405, "sorensen": 405, "lsa": [405, 535, 1022], "synonymi": 405, "polysemi": 405, "lsi": 405, "sigma_k": [405, 972], "columnwis": 405, "sublinear": [405, 581, 582], "use_idf": [405, 408, 581, 582, 1013], "textual": [405, 994, 1029], "man": [405, 581, 759, 825, 829, 976, 978, 980], "prabhakar": 405, "raghavan": [405, 581, 825, 829, 976, 978, 980], "hinrich": 405, "sch\u00fctze": [405, 581, 976, 978, 980], "transform_method": 405, "split_cod": 405, "dictionarylearn": [405, 528, 530, 531, 533, 534, 535, 536, 537, 1021, 1025, 1027, 1030, 1033, 1034, 1035, 1036], "overcomplet": 405, "mammalian": 405, "cortex": 405, "inpaint": 405, "h_i": [405, 983], "psi": 405, "sim": [405, 1011], "wh_i": 405, "ww": 405, "superflu": 405, "psi_1": 405, "psi_2": 405, "psi_n": 405, "superimpos": 405, "plug": [405, 974, 1002, 1013], "wh": [405, 529, 531, 538], "hoyer": [405, 1023], "nndsvd": [405, 529, 531, 538, 1029, 1032], "nndsvdar": [405, 529, 531, 538, 1029], "elementwis": [405, 529, 531, 538], "_featur": [405, 529, 531, 538], "kl": [405, 975, 1028], "itakura": [405, 529, 531, 538, 1027], "saito": [405, 529, 531, 538, 1027], "w_new": 405, "forget_factor": [405, 529], "lee": [405, 1020, 1021, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1035], "seung": 405, "boutsidi": 405, "gallopoulo": 405, "cichocki": [405, 529, 531, 538], "phan": 405, "fevott": [405, 529, 531, 538], "idier": [405, 529, 531, 538], "lefevr": [405, 529], "corpora": 405, "hoffman": [405, 527, 1025, 1032], "unshad": 405, "beta_k": 405, "eta": [405, 527, 667, 668, 669, 982, 992, 1025], "topic_word_prior": [405, 527], "theta_d": 405, "doc_topic_prior": [405, 527], "z_": 405, "w_": [405, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 974, 978, 980, 983], "elbo": 405, "overset": [405, 985], "e_": 405, "blei": [405, 527, 785], "wang": [405, 527, 670, 680, 684, 716, 746, 974, 975, 978, 1023, 1025, 1026, 1027, 1028, 1032, 1035, 1036], "paislei": [405, 527], "kaiser": [405, 523], "talli": 406, "disproportion": 406, "41075698": 406, "41076071": 406, "rho_k": 406, "unsmooth": 406, "scott": [406, 835, 1020, 1021, 1026, 1028, 1029, 1030, 1035, 1036], "silvermann": 406, "propto": [406, 980], "2h": 406, "angular": [406, 683, 754], "contin": [406, 705, 988], "generaliz": 407, "semin": 407, "friedman2001": 407, "lightgbm": [407, 552, 553, 1029, 1036], "8965": 407, "absolute_error": [407, 549, 551, 553, 556, 662, 899, 901, 1033], "grower": [407, 552, 553], "missing": [407, 618, 619, 621, 1029], "fisher1958": 407, "loan": [407, 525, 974, 1002], "nevertheless": 407, "mayer2022": 407, "mayer": [407, 1032, 1034], "bourassa": 407, "hoesli": 407, "scognamiglio": 407, "valuat": 407, "tianqi": 407, "guestrin": 407, "ke": [407, 1031, 1032], "boostingdecis": 407, "913": [407, 550], "nr": 407, "f_m": 407, "h_m": 407, "f_": [407, 626, 978], "l_m": 407, "taylor": [407, 1028, 1030, 1031, 1034], "g_i": [407, 640], "sum_m": 407, "softmax": [407, 552, 649, 650, 974, 981, 982], "superior": 407, "ineffici": [407, 434, 565, 818, 819, 981, 983], "htf": 407, "r2007": 407, "friedman2002": 407, "1189": 407, "1232": 407, "b1998": 407, "decoupl": [407, 980], "cancel": [407, 408, 753], "b2001": 407, "bear": [407, 998], "geurt": [407, 546, 547, 548, 549, 556, 557, 900, 901], "ernst": [407, 548, 549, 556, 557, 900, 901], "wehenkel": [407, 548, 549, 556, 557, 900, 901], "l2014": 407, "lieg": 407, "flavour": 407, "b1999": 407, "b1996": 407, "h1998": 407, "lg2012": 407, "bootstrap_featur": [407, 546, 547], "346": [407, 492, 546, 547], "w2": 407, "w3": 407, "lr__c": 407, "rf__n_estim": 407, "w1992": 407, "knr": 407, "stack_method": [407, 558], "286": 407, "225": 407, "164": 407, "stack_method_": [407, 558, 559], "final_layer_rfr": 407, "final_layer_gbr": 407, "final_lay": 407, "multi_layer_regressor": 407, "wolpert": [407, 558, 559], "241": [407, 558, 559], "freund": [407, 544, 545], "fs1995": 407, "w_1": [407, 974, 982], "w_2": [407, 974, 982], "w_n": 407, "w_i": [407, 969, 978], "reappli": 407, "zzrh2009": 407, "d1997": 407, "dubai": 408, "francisco": [408, 990], "movi": [408, 1005], "movie_entri": 408, "thriller": [408, 861], "drama": 408, "000e": 408, "003e": 408, "011e": 408, "974e": 408, "unseen_featur": [408, 572], "speech": [408, 978], "chunker": 408, "pos_window": 408, "pos_vector": 408, "1x6": 408, "part_of_speech": 408, "token_featur": 408, "isupp": 408, "uppercase_initi": 408, "all_uppercas": 408, "raw_x": [408, 573], "pos_tagg": 408, "comprehens": [408, 748, 749, 976, 1002, 1028], "murmurhash3": [408, 573, 580, 943], "weinberg": 408, "modulo": [408, 1031], "kilian": [408, 1035, 1036], "anirban": 408, "dasgupta": [408, 437, 884, 990], "langford": [408, 679, 975], "josh": [408, 1027], "attenberg": 408, "multitask": [408, 979], "punctuat": [408, 579, 580, 582], "diminish": 408, "4x9": 408, "build_analyz": [408, 579, 580, 582, 1030], "interrog": 408, "bigram_vector": 408, "cool": [408, 1020], "feature_index": 408, "him": 408, "constru": 408, "nqy18": 408, "smooth_idf": [408, 581, 582], "_n": [408, 978], "textbook": [408, 581], "6x3": 408, "81940995": 408, "57320793": 408, "47330339": 408, "88089948": 408, "58149261": 408, "81355169": 408, "term1": 408, "term2": 408, "term3": 408, "0986": [408, 854], "573": 408, "8473": 408, "8515": [408, 1027], "5243": 408, "85151335": 408, "52433293": 408, "55422893": 408, "83236428": 408, "63035731": 408, "77630514": 408, "idf_": [408, 581, 582, 1028], "western": 408, "europ": [408, 988], "koi8": 408, "russian": 408, "modern": [408, 459, 494, 581, 681, 685, 720, 888, 975, 999, 1036], "unicodedecodeerror": [408, 579, 580, 582], "told": 408, "chardet": 408, "chardetect": 408, "damag": 408, "sloppili": 408, "ftfy": 408, "mish": 408, "mash": 408, "text1": 408, "sei": 408, "mir": 408, "gegr": 408, "xc3": 408, "xbc": 408, "x9ft": 408, "mein": 408, "sauerkraut": 408, "text2": 408, "holdselig": 408, "sind": 408, "dein": 408, "ger": 408, "xfcche": 408, "text3": 408, "xff": 408, "xfea": 408, "x00u": 408, "x00f": 408, "x00": 408, "x00l": 408, "xfc": 408, "x00g": 408, "x00e": 408, "x00n": 408, "x00d": 408, "x00a": 408, "x00h": 408, "x00r": 408, "x00z": 408, "x00i": 408, "x00b": 408, "x00c": 408, "x00t": 408, "x00o": 408, "spolski": 408, "nnmf": [408, 1014, 1015, 1020], "phrase": 408, "misspel": 408, "rescu": 408, "resili": 408, "wprd": 408, "ngram_vector": 408, "char_wb": [408, 579, 580, 582], "rd": 408, "wo": 408, "wp": [408, 648, 662], "char": [408, 579, 580, 582, 1020], "jumpi": 408, "fox": [408, 1036], "1x4": 408, "umpi": 408, "1x5": 408, "mpy": 408, "fo": 408, "paragraph": [408, 494, 1013], "barrier": 408, "hv": 408, "4x10": 408, "discrep": [408, 1013, 1024], "4x1048576": 408, "collid": 408, "ingest": 408, "spend": 408, "my_token": 408, "lowercas": [408, 416, 433, 434, 436, 438, 440, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 579, 580, 582, 630, 631, 632, 633, 679, 680, 683, 834, 839, 842, 846, 851, 856, 882, 883, 1033], "lucen": 408, "build_preprocessor": [408, 579, 580, 582, 1030], "whitespac": 408, "fanci": 408, "lemmat": 408, "nltk": [408, 997, 998], "word_token": 408, "wordnetlemmat": 408, "lemmatoken": 408, "wnl": 408, "british": 408, "spell": 408, "to_british": 408, "1or": 408, "bt": 408, "1er": 408, "ing": 408, "ation": 408, "1z": 408, "ogu": 408, "og": 408, "customvector": 408, "asian": 408, "one_imag": [408, 575], "fake": 408, "assert_array_equ": 408, "patchextractor": [408, 1036], "five_imag": 408, "variancethreshold": [409, 855, 968, 1023, 1030, 1033, 1036], "selectfdr": [409, 583, 587, 589, 590, 591, 597, 1024, 1026, 1027, 1036], "selectfw": [409, 583, 586, 587, 590, 591, 597, 1036], "genericunivariateselect": [409, 586, 587, 589, 590, 591, 593, 1034, 1036], "r_regress": [409, 597, 1033, 1034], "nonparametr": [409, 598, 599], "bewar": 409, "importance_gett": [409, 584, 585, 588, 1032], "unimport": 409, "lsvc": 409, "baraniuk": 409, "isr": 409, "ist": 409, "utl": 409, "aguiar": 409, "cs_note": 409, "ferri": [409, 978], "versatil": [410, 993, 1002], "optima": 410, "markov": [410, 602, 983, 998, 1020], "ppmv": 410, "0336": 410, "4ppm": 410, "27ppm": 410, "197ppm": 410, "nuisanc": 410, "one_vs_on": [410, 601, 979], "ingredi": 410, "duv2014": 410, "theta_l": 410, "x_bound": [410, 608], "operand": 410, "k1__": 410, "k2__": 410, "constant_valu": [410, 604, 608], "constant_value_bound": [410, 602, 604, 608], "k1__k1__constant_valu": 410, "value_typ": [410, 608], "n_element": [410, 608], "k2__length_scal": 410, "k1": [410, 612, 615], "k1__k1": 410, "k1__k1__constant_value_bound": 410, "k1__k2": 410, "k1__k2__length_scale_bound": 410, "k2": [410, 612, 615], "k2__length_scale_bound": 410, "69314718": [410, 603, 988], "30258509": 410, "interoper": [410, 996, 999, 1015], "pairwisekernel": 410, "_valu": [410, 604], "_level": [410, 616], "k_1": [410, 612, 615], "k_2": [410, 612, 615], "__add__": [410, 615], "__mul___": 410, "__pow__": [410, 607], "2l": [410, 613], "bigg": [410, 610], "bessel": [410, 610], "rightarrow": [410, 610, 982], "quad": [410, 981, 992], "tfrac": 410, "3l": 410, "pp84": 410, "x_d": [410, 605], "inhomogen": [410, 605], "expon": [410, 607, 667, 668, 669, 799, 847, 848, 865, 967], "carl": [410, 601, 602, 605, 610, 613], "rasmussen": [410, 601, 602, 605, 610, 613], "duvenaud": [410, 613, 614], "cookbook": [410, 613, 614], "minkowski": [411, 435, 441, 448, 679, 768, 769, 770, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 981, 1020, 1023, 1034, 1035], "metric_param": [411, 435, 437, 441, 448, 679, 683, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 1024, 1027, 1034], "leaf_siz": [411, 435, 437, 441, 448, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842], "kd_tree": [411, 435, 441, 448, 679, 680, 832, 833, 834, 835, 836, 838, 840, 841, 842, 981, 1033], "balltre": [411, 435, 437, 441, 448, 679, 680, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 975, 1020, 1022, 1024, 1028, 1033, 1036], "ckdtree": [411, 435, 1022], "inhibit": [411, 435], "core_sampl": 411, "n_core_sampl": [411, 435], "attract": [411, 435, 972, 981, 998], "fun": [412, 524, 1002], "logcosh": [412, 524], "fun_arg": [412, 524], "w_init": [412, 524], "whiten_solv": [412, 524, 1035], "return_x_mean": 412, "compute_sourc": 412, "return_n_it": [412, 445, 450, 469, 536, 537, 637, 638, 643, 644, 651, 652, 653, 654, 672, 673, 674, 675, 676, 677, 678, 685, 1034], "cube": [412, 524], "my_g": [412, 524], "x_mean": 412, "AS": 412, "fortran": [412, 532, 637, 638, 643, 644, 651, 652, 653, 654, 656, 672, 675, 676, 677, 910, 911, 1020, 1023, 1024, 1028], "hyvarinen": [412, 524], "oja": [412, 524], "430": [412, 524], "shrunk_cov": [413, 470, 472], "eq": [413, 466, 712, 713, 714], "subobject": [414, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 683, 785, 786, 787, 790, 791, 801, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901], "row_ind": [415, 442, 444], "intp": [415, 442, 444], "col_ind": [415, 442, 444], "get_submatrix": [415, 442, 444], "pca0": 416, "_n_features_out": 416, "class_name0": [416, 433, 434, 436, 438, 440, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 630, 631, 632, 633, 679, 680, 683, 834, 839, 842, 846, 856, 882, 883], "class_name1": [416, 433, 434, 436, 438, 440, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 630, 631, 632, 633, 679, 680, 683, 834, 839, 842, 846, 856, 882, 883], "class_name2": [416, 433, 434, 436, 438, 440, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 630, 631, 632, 633, 679, 680, 683, 834, 839, 842, 846, 856, 882, 883], "feature_names_out": [416, 421, 433, 434, 436, 438, 440, 455, 473, 474, 475, 476, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 557, 558, 559, 560, 561, 572, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 618, 619, 620, 621, 626, 629, 630, 631, 632, 633, 679, 680, 683, 834, 839, 842, 846, 849, 850, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 882, 883, 1034], "harsh": [417, 428, 460, 540, 541, 542, 544, 546, 548, 550, 552, 555, 558, 560, 601, 649, 657, 659, 665, 666, 667, 818, 819, 820, 821, 825, 826, 827, 828, 829, 832, 837, 840, 847, 885, 886, 890, 892, 895, 898, 900, 1030, 1032, 1035], "n_samples_fit": [423, 456, 473, 474, 475, 545, 547, 549, 551, 553, 556, 559, 561, 602, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 669, 670, 679, 823, 824, 832, 833, 834, 836, 838, 840, 841, 842, 848, 891, 893, 896, 899, 901], "uniform_averag": [423, 456, 473, 474, 475, 545, 547, 549, 551, 553, 556, 559, 561, 602, 626, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 669, 670, 712, 713, 718, 735, 736, 738, 740, 741, 743, 775, 823, 824, 833, 841, 848, 891, 893, 896, 899, 901, 978, 1029], "n_features_new": [424, 433, 436, 523, 525, 527, 528, 530, 533, 534, 540, 558, 560, 561, 573, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 619, 621, 626, 629, 630, 631, 632, 633, 839, 846, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 867, 868, 869, 870, 882, 883], "base_clf": 428, "calibrated_clf": 428, "927": 428, "x_calib": 428, "y_calib": 428, "prob_tru": [429, 430], "prob_pr": [429, 430], "ref_lin": 429, "alexandru": 430, "22nd": 430, "convergence_it": [431, 445], "hardcod": [431, 445, 1028], "affinity_matrix_": [431, 443, 682], "cluster_center_indic": [431, 445], "compute_full_tre": [432, 436, 1024], "compute_dist": [432, 436, 1032], "inferior": [432, 436, 1031], "n_leaves_": [432, 436], "n_connected_components_": [432, 436, 1029], "branching_factor": 433, "compute_label": [433, 440], "promot": [433, 699, 998, 1031, 1033], "redistribut": 433, "overwritten": [433, 523, 524, 525, 527, 532, 539, 598, 599, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 663, 665, 670, 672, 673, 674, 675, 677, 946, 948, 1033], "root_": 433, "_cfnode": 433, "cftree": 433, "dummy_leaf_": 433, "subcluster_labels_": 433, "centroids_": [433, 437, 837], "copy_x": [434, 438, 450, 526, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 663, 665, 670, 672, 673, 674, 675, 676, 1022, 1028, 1029], "k_init": [434, 450], "sse": 434, "bisect_mean": 434, "pooling_func": [436, 1028], "xred": [436, 1036], "cluster_selection_epsilon": 437, "max_cluster_s": 437, "cluster_selection_method": 437, "eom": 437, "store_cent": 437, "kdtree": [437, 441, 448, 679, 680, 830, 832, 833, 834, 835, 836, 838, 840, 841, 842, 1022, 1024, 1028, 1032, 1033, 1036], "medoid": 437, "overwrit": [437, 487, 622, 1004, 1020, 1031, 1036], "medoids_": 437, "zimek": 437, "chaudhuri": 437, "jaskowiak": 437, "malzer": 437, "baum": 437, "hybrid": [437, 640, 998], "dbscan_clust": 437, "border": [437, 1030], "unclust": 437, "socg2006": 438, "min_bin_freq": [439, 452], "cluster_al": [439, 452], "get_bin_se": 439, "orphan": [439, 452, 1020], "reassignment_ratio": 440, "eec": [440, 632], "tuft": 440, "dscullei": 440, "fastkmean": 440, "55102041": 440, "48979592": 440, "06896552": 440, "set_partial_fit_request": [440, 525, 529, 657, 659, 667, 668, 669, 818, 819, 822, 823, 825, 826, 827, 828, 829, 847, 870], "cluster_method": 441, "predecessor_correct": [441, 447], "unprocess": [441, 579, 580, 582], "heap": 441, "braycurti": [441, 448, 768, 769, 770, 981], "canberra": [441, 448, 768, 769, 770, 981], "chebyshev": [441, 448, 768, 769, 770, 981], "dice": [441, 448, 768, 769, 770, 981], "kulsinski": [441, 448, 768, 769, 770], "rogerstanimoto": [441, 448, 768, 769, 770, 981], "russellrao": [441, 448, 768, 769, 770, 981], "seuclidean": [441, 448, 768, 769, 770, 837, 981, 1028, 1031, 1032], "sokalmichen": [441, 448, 768, 769, 770, 981], "sokalsneath": [441, 448, 768, 769, 770, 981], "yule": [441, 448, 768, 769, 770], "manhattan_dist": [441, 448, 679, 752, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 1020, 1030, 1035, 1036], "minkowski_dist": [441, 448, 679, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844], "l_p": [441, 448, 679, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844], "upward": [441, 447], "successor": [441, 447, 994, 998], "predecessor_": [441, 448], "erich": [441, 1024, 1025, 1028, 1029, 1031, 1032, 1033, 1034], "gertz": 441, "lernen": 441, "wissen": 441, "daten": [441, 1028, 1029], "analysen": 441, "lwda": 441, "318": 441, "329": 441, "n_best": 442, "n_svd_vec": [442, 444], "mini_batch": [442, 444], "n_row_clust": [442, 444, 504], "n_column_clust": [442, 444, 504], "ncv": [442, 444], "n_oversampl": [442, 444, 532, 535, 927, 1034], "kernel_param": [443, 526, 630, 634], "precomputed_nearest_neighbor": [443, 682], "eigen": [443, 540, 664, 682, 686, 972, 1026, 1029], "dist_matrix": 443, "541": [443, 453], "csc_matrix": [443, 548, 549, 554, 555, 556, 557, 867, 898, 899, 900, 901, 968, 988, 994, 1025], "best_n_it": 450, "n_local_tri": 451, "n_seed": 452, "multigrid": 453, "eigendecomposit": [453, 664, 682, 686, 856], "multiscal": 453, "preliminari": 453, "heapq": 454, "topolog": [454, 998], "n_connected_compon": 454, "n_leav": [454, 898, 899, 900, 901], "untransform": [455, 458, 989], "transformers_": 455, "remaining_column": 455, "named_transformers_": 455, "sparse_output_": [455, 542], "output_indices_": [455, 1033], "datatyp": [455, 457, 1027, 1030], "norm1": 455, "norm2": 455, "text_preprocess": 455, "num_preprocess": 455, "x_t": [455, 618, 849], "sum_n_compon": [455, 849], "y_hat": 456, "90453403": 457, "50755672": 457, "30151134": 457, "print_changed_onli": [459, 888, 1029, 1031, 1032], "pairwise_dist_chunk_s": [459, 888], "enable_cython_pairwise_dist": [459, 888], "skip_parameter_valid": [459, 888, 1036], "cache_s": [459, 888, 892, 893, 894, 895, 896, 993], "get_config": [459, 771, 888, 945, 1035], "offset_": [460, 554, 668, 836, 894, 1028], "raw_support_": [460, 465], "dist_": [460, 465], "true_cov": [460, 462, 463], "7411": [460, 465, 1026], "2535": [460, 465], "3053": [460, 465], "0813": [460, 465], "0427": [460, 465], "correct_covari": [460, 465], "rvd": [460, 465], "covariance_correct": [460, 465], "comp_cov": [460, 461, 462, 463, 464, 465, 466, 467], "get_precis": [460, 461, 462, 463, 464, 465, 466, 467, 523, 525, 532], "is_inli": [460, 554, 836], "reweight_covari": [460, 465], "rvdriessen": [460, 465], "location_reweight": [460, 465], "covariance_reweight": [460, 465], "support_reweight": [460, 465], "negative_mahal_dist": 460, "7569": 461, "2818": 461, "3928": 461, "0622": [461, 467], "0193": [461, 467], "enet_tol": [462, 463, 469, 1025], "220446049250313e": [462, 463, 469, 641, 642, 645, 646, 647, 673, 674], "graphlasso": [462, 1025, 1028], "costs_": [462, 463, 1036], "dual_gap": [462, 463, 469, 637, 638, 643, 644, 651, 652, 653, 654, 672, 675], "return_cost": [462, 463, 469], "049": 462, "364": [462, 463, 1021], "038": [462, 463, 847], "n_refin": 463, "graphlassocv": [463, 1022, 1028], "dualiti": [463, 974], "block_siz": [464, 470, 471, 1024], "4406": 464, "1616": 464, "0595": 464, "0075": [464, 532], "rouseeuw1984": 465, "butlerdavi": 465, "butler": [465, 1023, 1031, 1032], "davi": [465, 715, 978, 1024], "jhun": 465, "1385": 465, "7533": [466, 1027], "2763": 466, "3964": 466, "7833": 466, "2431": 466, "3889": 466, "0195": 466, "7387": 467, "2536": 467, "4110": 467, "cov_init": [469, 1036], "graph_lasso": [469, 1028], "x_loadings_": [473, 474, 475], "y_loadings_": [473, 474, 475], "plssvd": [473, 474, 1000, 1015, 1032, 1034], "x_c": [473, 474, 476, 985], "y_c": [473, 474, 476], "y_reconstruct": [473, 474, 475], "x_scores_": [475, 1032], "y_scores_": [475, 1032], "y_transform": 476, "data_hom": [477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 1027], "sklearn_learn_data": [477, 490], "zero_bas": [478, 499, 500], "query_id": [478, 499, 500], "grok": 478, "qid": [478, 499, 500, 1021, 1026], "download_if_miss": [479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 1027], "stopword": [480, 1013], "target_column": [480, 481, 487], "494021": 483, "slice_": [484, 485, 1035], "unrestrict": 484, "2914": 485, "5748": 485, "n_retri": [487, 1034], "read_csv_kwarg": [487, 1036], "timeout": [487, 944, 1034], "412": [487, 974], "ith": [487, 764, 768, 826, 847, 848, 863, 864], "1592": 489, "1212": 489, "1624": 489, "620": 489, "data_filenam": [492, 496], "target_filenam": [492, 496], "container_path": 494, "load_cont": 494, "allowed_extens": 494, "container_fold": 494, "category_1_fold": 494, "file_1": 494, "file_2": 494, "file_42": 494, "category_2_fold": 494, "file_43": 494, "file_44": 494, "image_nam": 497, "first_img_data": 498, "backup": [499, 1020], "instantan": 499, "mycach": 499, "get_data": 499, "mysvmlightfil": 499, "xn": 500, "yn": [500, 979, 980], "q1": 500, "qn": 500, "yi": [500, 980, 1024, 1028, 1029, 1032], "qi": [500, 1032], "triplet": 500, "minval": [502, 504], "maxval": [502, 504], "seventh": [502, 990], "269": 502, "274": 502, "return_cent": [503, 1031], "basri": 504, "gerstein": 504, "716": 504, "flip_i": 506, "interdepend": 506, "polytop": 506, "guyon": [506, 584, 585, 978], "madelon": 506, "1991": [507, 508, 509], "12000": 511, "effective_rank": [512, 515], "tail_strength": [512, 515], "bell": [512, 1028, 1030, 1032, 1033], "fat": [512, 515], "crawl": [512, 919], "return_ind": 514, "4967": 515, "1382": 515, "6476": 515, "523": 515, "2341": 515, "4694": 515, "5425": 515, "7674": [515, 1027], "4017": 515, "data_transpos": [517, 1034, 1036], "norm_diag": 518, "make_spd_matrix": 518, "celeux": 519, "el": [519, 1033, 1035, 1036], "anbari": 519, "marin": 519, "frequentist": 519, "n_dim": [520, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616], "marsland": 521, "vuw": 521, "nz": 521, "marslast": 521, "ch6": 521, "code_init": [522, 536], "dict_init": [522, 528, 536, 537], "callback": [522, 528, 530, 536, 537, 839, 944, 999, 1036], "split_sign": [522, 528, 533], "transform_max_it": [522, 528, 529, 533, 1030], "_fro": [522, 528, 536, 537, 637, 638, 643, 651, 652, 653, 672], "lasso_cd": [522, 528, 533, 539], "invok": [522, 528, 530, 536, 537, 558, 560, 561, 811, 887, 1032], "error_": [522, 534], "minibatchsparsepca": [522, 524, 528, 531, 533, 534, 536, 537, 1020, 1021, 1031, 1033, 1034, 1035, 1036], "sierra": [522, 528], "icml09": [522, 528], "x_hat": [522, 528], "noise_variance_init": 523, "quartimax": [523, 1032], "loglike_": 523, "barber": 523, "bishop": [523, 525, 532, 731, 785, 974, 979, 993], "get_covari": [523, 525, 532], "unmixing_matrix": 524, "whitening_": 524, "kpca": [524, 525, 526, 1014, 1015, 1020], "set_inverse_transform_request": [524, 572, 857, 870], "unsaf": 525, "singular_values_": [525, 532, 535, 1027], "var_": [525, 828, 870, 1033], "miketip": [525, 532], "mppca": [525, 532], "n_samples_seen_": [525, 859, 860, 870, 1028], "batch_size_": 525, "ross": [525, 598, 599, 994, 1034, 1035], "vision": [525, 748, 749, 970, 974, 976, 994, 998, 1002, 1021], "toronto": [525, 635, 846], "dross": 525, "ivt": 525, "rosslimlinyang_ijcv": 525, "karhunen": 525, "loev": 525, "levi": [525, 1027], "lindenbaum": 525, "1371": 525, "1374": 525, "abstain": 525, "holub": 525, "opportun": [525, 992], "golub": [525, 828, 870], "x_spars": [525, 949, 952], "sigma2": [525, 532], "x_origin": [525, 530, 532, 534, 535, 621, 882, 883], "check_input": [525, 539, 637, 638, 643, 651, 652, 653, 672, 678, 898, 899, 900, 901, 1028], "remove_zero_eig": [526, 1022, 1029], "x_fit_": [526, 634], "eigenvalues_": [526, 1033], "eigenvectors_": [526, 1033], "dual_coef_": [526, 634, 892, 893, 894, 895, 896, 993, 1024], "x_transformed_fit_": 526, "gamma_": [526, 1036], "nathan": [526, 1028, 1032, 1035], "gunnar": [526, 927], "tropp": [526, 532], "288": [526, 532], "vladimir": [526, 927, 974, 1030, 1034], "rokhlin": [526, 532, 927], "tygert": [526, 532, 927], "learning_decai": 527, "evaluate_everi": 527, "perp_tol": 527, "mean_change_tol": 527, "max_doc_update_it": 527, "kappa": [527, 707], "tau_0": 527, "pseudocount": [527, 1028], "exp_dirichlet_component_": 527, "n_batch_iter_": 527, "bound_": 527, "doc_topic_prior_": 527, "topic_word_prior_": 527, "franci": [527, 649, 974, 1026], "onlineldavb": 527, "chong": 527, "00360392": 527, "25499205": 527, "0036211": 527, "64236448": 527, "09541846": 527, "15297572": 527, "00362644": 527, "44412786": 527, "39568399": 527, "003586": 527, "vb": 527, "sub_sampl": 527, "doc_topic_distr": [527, 1027], "fresh_restart": 529, "fresh_restarts_max_it": 529, "_w": [529, 531, 538], "_ratio": [529, 531, 538], "_h": [529, 531, 538], "fresh": [529, 999, 1030], "reconstruction_err_": [529, 531], "andrzej": [529, 531, 538], "anh": [529, 531, 538], "ieic": [529, 531, 538], "721": [529, 531, 538], "waspa": 529, "ridge_alpha": [530, 534, 1027], "power_iteration_norm": [532, 535, 926, 927, 1034], "500x500": 532, "lu": [532, 535, 926, 927, 1026, 1027, 1028, 1029, 1036], "n_samples_": 532, "royal": [532, 618, 866, 878, 992], "methodologi": [532, 863, 968, 978, 1002], "9924": 532, "30061": 532, "54980": 532, "00755": 532, "99244": 532, "ascontiguousarrai": 532, "sparse_encod": [533, 641, 642, 643, 644, 645, 646, 647, 654, 655, 656, 673, 674, 675, 676, 677, 1020, 1027, 1028, 1030, 1034], "u_init": 534, "v_init": 534, "9666": 534, "oversampl": [535, 1020], "indeterminaci": 535, "x_dens": 535, "0157": 535, "0512": 535, "0499": 535, "0479": 535, "0453": 535, "2102": 535, "2410": 535, "5981": 535, "5420": 535, "4486": 535, "3288": 535, "method_max_it": [536, 537, 1030], "dict_learning_onlin": [536, 1021, 1030, 1033, 1034], "return_cod": 537, "iter_offset": [537, 1034], "return_inner_stat": [537, 1034], "inner_stat": [537, 1034], "update_h": 538, "_n_compon": 538, "hal": [538, 649, 748, 749, 976], "copy_cov": 539, "orthogonal_mp": [539, 655, 656, 677, 974], "sum_k": [540, 994], "prior_k": 540, "c_k": 540, "priors_": [540, 541], "scalings_": [540, 541], "xbar_": 540, "reg_param": 541, "scaling_": 541, "colinear": 541, "rotations_": 541, "n_classes_": [542, 544, 546, 548, 550, 555, 601, 818, 819, 898, 900, 1021, 1030, 1032], "class_prior_": [542, 828], "n_outputs_": [542, 543, 548, 549, 555, 556, 557, 847, 848, 898, 899, 900, 901], "constant_": 543, "dummy_regr": 543, "base_estimator_": [544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 601, 887, 1035], "983": [544, 718], "dok": [544, 545, 857, 1033], "staged_decision_funct": [544, 550, 552], "staged_scor": [544, 545], "7972": 545, "9771": 545, "estimators_samples_": [546, 547, 554, 1026, 1028, 1031], "estimators_features_": [546, 547, 554], "oob_decision_function_": [546, 548, 555], "oob_prediction_": [547, 549, 556], "8720": [547, 1028], "min_weight_fraction_leaf": [548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901, 994, 1023, 1026, 1027], "min_impurity_decreas": [548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901, 994, 1027], "shannon": [548, 555, 898, 900, 975, 994], "unlimit": [548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901], "n_t": [548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901], "n_t_r": [548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901], "right_impur": [548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901], "n_t_l": [548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901], "left_impur": [548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901], "balanced_subsampl": [548, 555, 1028], "subtre": [548, 549, 550, 551, 555, 556, 898, 899, 900, 901, 994], "extratreeclassifi": [548, 557, 901, 979, 1024, 1029, 1030, 1031, 1033, 1034, 1035, 1037], "unprun": [548, 549, 555, 556, 898, 899, 900, 901], "x_leav": [548, 549, 550, 551, 555, 556, 557, 898, 899, 900, 901], "n_nodes_ptr": [548, 549, 555, 556, 557], "friedman_ms": [549, 550, 551, 556, 899, 901, 994, 1036], "extratreeregressor": [549, 554, 557, 900, 984, 1029, 1030, 1031, 1033, 1034, 1035, 1037], "2727": 549, "dummyestim": [550, 551], "eras": [550, 551, 637, 643, 649, 651, 653, 657, 658, 659, 667, 668, 669, 847, 848], "oob_scores_": [550, 551, 1036], "init_": [550, 551], "init_estim": [550, 551], "max_features_": [550, 551, 588, 898, 899, 900, 901, 1034], "_fit_stag": [550, 551], "crossentropi": 552, "deepest": [552, 553, 1031], "no_interact": [552, 553, 1035], "do_early_stopping_": [552, 553], "n_trees_per_iteration_": [552, 553], "validation_score_": [552, 553], "is_categorical_": [552, 553], "n_trees_per_iter": 552, "max_samples_": 554, "fei": [554, 984], "ting": [554, 984, 1028, 1029], "ming": [554, 984, 1024, 1028, 1029, 1030, 1034], "zhou": [554, 630, 886, 984, 1028, 1036], "zhi": [554, 984], "hua": [554, 984], "icdm": [554, 984], "eighth": [554, 984], "tkdd": 554, "n_left": 554, "32987858": 556, "n_out": 557, "one_hot_encoder_": 557, "moosmann": 557, "trigg": 557, "juri": 557, "random_tre": 557, "x_sparse_embed": 557, "randomtreesembedding_": 557, "final_estimator_": [558, 559], "named_estimators_": [558, 559, 560, 561, 1028, 1030], "named_estim": [558, 559, 560, 561], "parameter_nam": [558, 559, 560, 561], "new_valu": [558, 559, 560, 561], "linearsvr": [559, 896, 993, 1024, 1026, 1031, 1036], "flatten_transform": [560, 1027], "le_": 560, "eclf1": 560, "array_equ": [560, 1027], "eclf2": 560, "eclf3": 560, "maj": 560, "probabilities_or_label": 560, "n_regressor": 561, "r1": 561, "r3": 561, "er": 561, "with_traceback": [562, 563, 564, 565, 566, 567, 568, 569], "__traceback__": [562, 563, 564, 565, 566, 567, 568, 569], "current_sklearn_vers": 567, "repr": [568, 1031, 1032, 1034], "linter": 570, "flake8": 570, "spam": [572, 700, 731, 825, 978, 980, 1002], "feature_names_": 572, "xa": 572, "dict_typ": 572, "conform": [572, 619, 818, 819, 978, 998, 999, 1027, 1033], "1048576": [573, 580], "non_neg": [573, 1027], "eleph": 573, "bird": [573, 709, 744, 978], "patch_height": [574, 575, 578], "patch_width": [574, 575, 578], "img_height": 574, "img_width": 574, "pe": 574, "pe_tran": 574, "263758": 574, "image_height": [574, 575, 578], "image_width": [574, 575, 578], "n_channel": [574, 575, 578], "n_patch": [574, 575, 578], "272214": 575, "230": 575, "215": 575, "244": 575, "n_z": 576, "return_a": [576, 577, 1023], "_coo": [576, 577], "image_s": 578, "strip_acc": [579, 580, 582], "nfkd": [579, 580, 582, 1030], "unicodedata": [579, 580, 582], "regexp": [579, 580, 582], "min_n": [579, 580, 582, 1020], "max_n": [579, 580, 582, 1020], "fixed_vocabulary_": [579, 582], "stop_words_": [579, 582], "delattr": [579, 582, 1032], "vectorizer2": 579, "raw_docu": [579, 582], "get_stop_word": [579, 580, 582], "x_inv": [579, 582], "con": 580, "yates2011": 581, "baeza": [581, 720, 1023], "yate": [581, 720], "ribeiro": [581, 720, 1033], "neto": [581, 720], "addison": [581, 720], "weslei": [581, 720], "mrs2008": 581, "118": 581, "tfid": 581, "22314355": 581, "51082562": 581, "91629073": 581, "_check_stop_list": 582, "pvalu": [583, 586, 587, 589, 590, 591, 815], "k_best": [583, 887, 991], "fdr": 583, "fwe": 583, "iff": [583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 861], "retent": [583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594], "n_selected_featur": [583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594], "n_original_featur": [583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594], "attrgett": [584, 588], "barnhil": [584, 585], "vapnik": [584, 585], "389": [584, 585, 1013], "n_subsets_of_featur": 585, "narrai": 585, "benjamini": [586, 1026, 1027], "hochberg": [586, 1026, 1027], "false_discovery_r": 586, "norm_ord": [588, 1027], "threshold_": [588, 1027], "3252302": 588, "83462377": 588, "49750423": 588, "55245": 588, "half_cal": 588, "half_selector": 588, "unspecifi": [590, 591, 789, 975], "_get_support_mask": 592, "n_features_to_select_": 593, "variances_": 594, "weed": 595, "p_valu": [595, 596, 597], "f_statist": [596, 597], "force_finit": [597, 600, 718, 775, 978, 1034], "pearson": [597, 600, 1033], "discrete_featur": [598, 599], "essenc": [598, 599, 733, 975, 978], "kraskov": [598, 599], "stogbauer": [598, 599], "grassberg": [598, 599], "phy": [598, 599], "kozachenko": [598, 599], "leonenko": [598, 599], "probl": [598, 599], "peredachi": [598, 599], "correlation_coeffici": 600, "fmin_l_bfgs_b": [601, 602], "max_iter_predict": 601, "copy_x_train": [601, 602], "one_vs_rest": [601, 979], "compoundkernel": [601, 1034], "obj_func": [601, 602], "initial_theta": [601, 602], "theta_opt": [601, 602], "func_min": [601, 602], "_posterior_mod": 601, "log_marginal_likelihood_value_": [601, 602], "9866": [601, 610, 613], "83548752": 601, "03228706": 601, "13222543": 601, "79064206": 601, "06525643": 601, "14410151": 601, "clone_kernel": [601, 602, 1030], "n_kernel_param": [601, 602], "log_likelihood_gradi": [601, 602], "x_train_": 602, "y_train_": 602, "3680": [602, 605, 616], "y_cov": 602, "n_samples_x": [602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 764, 765, 766, 767, 768, 769, 770, 771], "requires_vector_input": [603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616], "51292546": 603, "09861229": [603, 988], "n_samples_i": [603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 764, 765, 766, 767, 768, 769, 770, 771], "n_kernel": 603, "k_gradient": [603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616], "k_diag": [603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616], "hyperparameter_constant_valu": 604, "3696": 604, "606": [604, 820, 979], "hyperparameter_sigma_0": 605, "edward": [605, 610, 613, 1023, 1028, 1029, 1030, 1031, 1035], "hyperparameter_length_scal": [606, 610, 613, 614], "hyperparameter_period": 606, "0144": 606, "457": 606, "3894": 606, "3467": 606, "namedtupl": [608, 936, 1036], "maxsiz": 608, "mat\u00e9rn": 610, "appr": 610, "8513": 610, "0368": 610, "1117": 610, "8086": [610, 1027], "0693": 610, "1220": 610, "gamma_bound": 611, "pairwise_kernels_kwarg": 611, "additive_chi2": [611, 629, 755, 764], "pairwise_kernel_funct": [611, 634, 764], "hyperparameter_gamma": 611, "9733": [611, 614], "8880": 611, "05663": 611, "05532": 611, "8676": [611, 1027], "07073": 611, "06165": 611, "__mul__": 612, "8354": [613, 1027], "03228": 613, "1322": 613, "7906": [613, 640], "0652": 613, "1441": 613, "hyperparameter_alpha": 614, "8881": 614, "0566": 614, "05518": 614, "8678": 614, "0707": 614, "0614": 614, "hyperparameter_noise_level": 616, "initial_strategi": 618, "imputation_ord": [618, 1030], "skip_complet": 618, "min_valu": [618, 1031, 1032], "max_valu": [618, 1031, 1032], "keep_empty_featur": [618, 619, 621, 968, 1035], "nullabl": [618, 619, 620, 621, 1031, 1035], "na": [618, 619, 620, 621, 759, 768, 908, 910, 911, 1030, 1031, 1034, 1035, 1036], "known_val": 618, "Nearness": 618, "arab": 618, "broadcast": 618, "missingind": [618, 619, 621, 968, 1028, 1029, 1030, 1034, 1036], "initial_imputer_": 618, "imputation_sequence_": 618, "feat_idx": 618, "neighbor_feat_idx": 618, "n_features_with_missing_": 618, "indicator_": [618, 619, 621], "knp": 618, "stef": [618, 968], "buuren": [618, 968], "karin": [618, 968], "groothui": [618, 968], "oudshoorn": [618, 968], "buck": 618, "1960": [618, 707], "imp_mean": [618, 621], "9584": [618, 1027], "nan_euclidean": [619, 752, 768], "_pairwise_cal": 619, "kwd": [619, 761, 764, 768, 771, 780, 781], "olga": [619, 968], "troyanskaya": [619, 968], "cantor": [619, 968], "gavin": [619, 968], "sherlock": [619, 968], "pat": [619, 968], "botstein": [619, 968], "russ": [619, 968], "altman": [619, 968], "bioinformat": [619, 968], "520": [619, 839, 968, 981], "n_output_featur": 619, "error_on_new": 620, "features_": [620, 968], "n_missing_featur": 620, "x2_tr": 620, "n_features_with_miss": 620, "statistics_": 621, "n_features_missing_ind": 621, "x_imput": 621, "n_features_out": 621, "quadcontourset": 622, "quadmesh": 622, "feature_1": [622, 903], "feature_2": 622, "nicer": 622, "pd_result": 623, "target_idx": 623, "decil": [623, 1031], "is_categor": 623, "pdp": [623, 985, 1034], "nonexist": 623, "deciles_vlines_": 623, "vlines_": 623, "deciles_hlines_": 623, "bars_": 623, "heatmaps_": 623, "pdp_lim": 623, "ice_lines_kw": 623, "pd_line_kw": 623, "contour_kw": 623, "disp1": 623, "disp2": 623, "pdp_line_kw": 623, "bar_kw": 623, "heatmap_kw": 623, "seq": 624, "n_values_feature_j": 624, "bre": [625, 994], "4666": 625, "2211": 625, "x_min_": 626, "x_max_": 626, "n_threshold": [626, 717, 772, 779], "stepwis": [626, 645, 646, 647, 673, 674, 974], "increasing_": 626, "isotonic_regress": [626, 1033], "secondari": [626, 1024], "leeuw": 626, "1977": 626, "nilotp": [626, 628], "chakravarti": [626, 628], "pava": 626, "hornik": 626, "mair": 626, "kruskal": [626, 681, 685, 975], "psychometrica": 626, "iso_reg": 626, "8628": 626, "7256": 626, "isotonicregression0": 626, "increasing_bool": 627, "fisher_transform": 627, "sample_step": 629, "sample_interv": 629, "sample_interval_": [629, 1036], "skewedchi2sampl": [629, 630, 631, 632, 970, 1027, 1034, 1035], "chi2_kernel": [629, 633, 748, 755, 976, 1021], "additive_chi2_kernel": [629, 749, 755, 970], "vedaldi": [629, 970], "zisserman": [629, 970, 978], "chi2sampl": 629, "9499": 629, "component_indices_": [630, 1033], "normalization_": 630, "additivechi2sampl": [630, 631, 632, 633, 748, 749, 970, 1034, 1036], "kernel_metr": [630, 631, 632, 633], "seeger": 630, "mahdavi": 630, "jin": [630, 1031, 1032], "data_transform": 630, "9987": 630, "fft": 631, "indexhash": 631, "bithash": 631, "indexhash_": 631, "bithash_": 631, "kitchen": [632, 970], "sink": [632, 970], "random_offset_": [632, 633], "random_weights_": [632, 633], "rahimi": [632, 970], "benjamin": [632, 1022, 1023, 1031, 1032, 1033, 1034, 1035, 1036], "recht": [632, 970], "berkelei": [632, 898, 899], "brecht": 632, "rah": 632, "rbf_featur": [632, 970], "skewed": [633, 1027], "secant": 633, "hyperbol": [633, 847, 848, 976, 982], "fuxin": 633, "catalin": 633, "ionescu": [633, 970, 1030], "cristian": 633, "sminchisescu": [633, 970], "chi2_featur": 633, "2c": [634, 643, 663, 664, 665, 666, 678, 970], "493": [634, 890, 971], "alpha_1": [635, 636, 974], "alpha_2": [635, 636, 974], "lambda_1": [635, 636, 974], "lambda_2": [635, 636, 974], "threshold_lambda": 635, "x_offset_": [635, 636, 1032], "x_scale_": [635, 636, 1032], "mackai": [635, 636, 974], "ashra": 635, "salakhutdinov": [635, 839, 981], "utstat": 635, "rsalakhu": 635, "sta4273": 635, "lecture2": 635, "computed_scor": 636, "appendix": [636, 667, 974, 988], "wipf": [636, 974], "nagarajan": [636, 974], "2_2": [637, 638, 643, 644, 645, 646, 647, 651, 652, 653, 654, 663, 672, 673, 674, 675], "glmnet": [637, 638, 1020], "sparse_coef_": [637, 643, 651, 653, 1020], "dual_gap_": [637, 638, 643, 644, 651, 652, 653, 654, 1033], "max_j": [637, 643], "w_j": [637, 643, 978, 992], "ext": 637, "83816048": 637, "55968825": 637, "451": 637, "coef_init": [637, 638, 643, 644, 651, 652, 653, 654, 657, 659, 667, 668, 669, 672, 675], "mono": [637, 638, 643, 644, 651, 652, 653, 654, 672, 675], "_21": [637, 638, 643, 644, 651, 652, 653, 654, 672, 675], "sum_j": [637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 974, 978, 983], "alpha_min": [637, 638, 641, 643, 644, 645, 647, 651, 652, 653, 654, 672, 673, 674, 675], "alpha_max": [637, 638, 643, 644, 651, 652, 653, 654, 672, 675], "ndim": [637, 638, 643, 644, 651, 652, 653, 654, 672, 675, 910, 911], "multitaskelasticnet": [637, 638, 643, 652, 653, 654, 672, 974, 1020, 1027, 1028, 1031, 1033], "multitaskelasticnetcv": [637, 638, 643, 651, 653, 654, 672, 974, 1023, 1030, 1031, 1033], "l1_ratio_": [638, 650, 652], "n_l1_ratio": [638, 650, 652, 1023], "199": [638, 741, 993], "unpen": [639, 660, 671, 974], "raphson": [639, 660, 671], "g_j": [639, 660, 671], "896": 639, "483": 639, "795": 639, "pg_i": 640, "scale_": [640, 859, 860, 868, 870, 880, 988, 1025], "outliers_": 640, "elvezio": [640, 974], "ronchetti": [640, 974], "concomit": [640, 974], "owen": [640, 1029, 1030], "statweb": [640, 673, 674], "hhu": [640, 1029], "284": 640, "806": 640, "7200": 640, "4923": 640, "1698": 640, "0106": 640, "9221": 640, "0226": 640, "fit_path": [641, 645, 646, 647, 673, 674], "coef_path_": [641, 642, 645, 646, 974], "active_": [641, 642, 645, 646], "larscv": [641, 656, 673, 674, 1027, 1033], "1111": [641, 647], "max_n_alpha": [642, 646], "n_cv_alpha": [642, 646], "cv_alpha": [642, 646], "lassolar": [642, 643, 644, 646, 647, 654, 655, 656, 673, 674, 675, 974, 1011, 1020, 1021, 1023, 1027, 1030, 1031, 1033], "9996": 642, "2961": 642, "3996": 642, "2_f": 643, "_11": 643, "4951": 644, "2_fro": [644, 653, 654, 675], "coef_path": [644, 654, 675], "46874778": [644, 654, 675], "2159048": [644, 654, 675], "4425765": [644, 654, 675], "23689075": [644, 654, 675], "coef_path_lar": [644, 654, 675], "coef_path_continu": [644, 654, 675], "interp1d": [644, 654, 675], "46915237": [644, 654, 675], "23668876": [644, 654, 675], "congruenc": [645, 646, 647, 673, 674], "fragil": 646, "3972": 646, "2222": 647, "rank_": 648, "singular_": 648, "maxent": [649, 650, 974], "primal": [649, 650, 668, 890, 891, 992, 993], "synthetic_feature_weight": [649, 650], "ciyou": 649, "byrd": 649, "jorg": [649, 1023, 1032, 1034], "noced": 649, "lui": [649, 1021, 1023, 1024, 1028], "iem": 649, "lbfgsb": 649, "schmidt": [649, 974, 1023], "le": [649, 858, 969, 974, 981, 989, 991, 1028, 1032, 1033], "roux": [649, 974, 991], "00860051": 649, "defazio": [649, 974], "lacost": [649, 974], "hsiang": [649, 1024], "fu": [649, 1024], "fang": [649, 1027, 1028], "lan": [649, 1035, 1036], "chih": [649, 1025], "jen": [649, 1028], "maxent_du": 649, "cs_": 650, "l1_ratios_": 650, "coefs_paths_": [650, 1030], "coefs_path": 650, "n_l1_ratios_": 650, "w_ij": 651, "eps_": [651, 653], "45663524": 651, "45612256": 651, "0872422": 651, "fro_2": [652, 654], "multitasklassocv": [652, 1023, 1030, 1031, 1033], "52875032": 652, "46958558": 652, "00166409": 652, "60809415": 653, "94592424": 653, "41888636": 653, "87382323": 653, "9994": 654, "5713": 654, "153": 654, "7971": 654, "9015": [654, 1028], "n_nonzero_coefs_": [655, 656], "orthogonal_mp_gram": [655, 656, 676, 1034], "mallat": [655, 676, 677, 974], "3397": [655, 676, 677], "3415": [655, 676, 677], "papier": [655, 676, 677], "mallatpursuit93": [655, 676, 677], "rubinstein": [655, 676, 677], "zibulevski": [655, 676, 677], "elad": [655, 676, 677], "technion": [655, 676, 677, 974], "ronrubin": [655, 676, 677, 974], "ksvd": [655, 676, 677, 974], "9991": [655, 656, 1028], "3854": [655, 656], "previous_loss": [657, 658, 659, 668], "pa": [657, 658, 887, 974, 978, 991], "preset": [657, 659, 667, 982], "t_": [657, 658, 659, 667, 668, 669, 847, 848, 992], "loss_function_": [657, 659, 667, 668], "volume7": [657, 658], "crammer06a": [657, 658], "crammer": [657, 658, 725, 974, 978, 993], "dekel": [657, 658, 974], "keshat": [657, 658, 974], "shalev": [657, 658, 974, 992], "shwartz": [657, 658, 974, 992], "singer": [657, 658, 725, 974, 978, 992, 993], "26642044": 657, "45070924": 657, "67251877": 657, "64185414": 657, "84127814": 657, "intercept_init": [657, 659, 667, 669], "y_all": [657, 659, 667, 818, 819, 847], "epsilon_insensit": [658, 667, 669, 891, 974, 992], "squared_epsilon_insensit": [658, 667, 669, 891, 974, 1026], "48736655": 658, "18818427": 658, "59122734": 658, "94731329": 658, "02306214": 658, "eta0": [659, 667, 668, 669, 992], "lossfunct": [659, 667, 668, 1029], "therein": 659, "939": [659, 1008], "676": 660, "solver_opt": 661, "ipm": 661, "linprog": [661, 974], "is_data_valid": [662, 974], "is_model_valid": [662, 974], "max_trial": [662, 974], "max_skip": 662, "stop_n_inli": [662, 974], "stop_scor": [662, 974], "stop_prob": 662, "mad": [662, 1026], "costlier": 662, "n_trials_": 662, "n_skips_no_inliers_": 662, "n_skips_invalid_data_": 662, "n_skips_invalid_model_": 662, "sri": [662, 974, 1027, 1028], "bmva": 662, "bmvc": [662, 974], "paper355": 662, "9885": 662, "9417": 662, "15000": [663, 678, 847, 848], "btol": [663, 665], "gcv_mode": [664, 1022], "store_cv_valu": [664, 666, 1028, 1031], "alpha_per_target": [664, 1032], "cv_values_": [664, 666], "ridgeclassifiercv": [664, 665, 778, 978, 979, 1028, 1030, 1031, 1033, 1034], "5166": 664, "gcv": [664, 666], "9595": 665, "9630": 666, "power_t": [667, 668, 669, 847, 848, 992], "best_loss": [667, 669], "leon": [667, 668, 669, 1020], "bottou": [667, 668, 669, 982, 992], "pow": [667, 668, 669, 847, 848], "dl": 667, "775047": 667, "775151": 667, "justif": 667, "volume2": 667, "zhang02c": 667, "offset_init": 668, "unshifft": 668, "n_subsampl": [670, 916], "breakdown_": 670, "n_subpopulation_": 670, "xin": [670, 974, 1028], "dang": [670, 974], "hanxiang": [670, 974], "peng": [670, 974, 1026, 1027, 1028, 1030, 1032], "xueqin": [670, 974], "hepe": [670, 974], "olemiss": 670, "xdang": 670, "mtse": 670, "9884": 670, "5871": 670, "coeff": 671, "839": 671, "599": 671, "copy_gram": [673, 674, 677], "return_path": [673, 674, 676, 677], "lars_path_gram": [673, 974, 1029], "tib": [673, 674], "xgamma": 676, "norms_squar": 677, "copy_xi": 677, "return_intercept": [678, 1029], "linearoper": 678, "_preprocess_data": 678, "path_method": [679, 975], "neighbors_algorithm": [679, 680], "arnoldi": [679, 680, 684], "fw": 679, "warshal": [679, 975], "kernel_pca_": 679, "nbrs_": [679, 680], "dist_matrix_": 679, "tenenbaum": [679, 975], "reconstruction_error": 679, "frobenius_norm": 679, "d_fit": 679, "x_fit": 679, "n_queri": [679, 832, 833, 834, 836, 838, 840, 841, 842], "hessian_tol": [680, 684], "modified_tol": [680, 684], "reconstruction_error_": 680, "rowei": [680, 684, 839, 975, 981], "saul": [680, 684, 975, 1027, 1028, 1030], "donoho": [680, 684, 975], "grime": [680, 684, 975], "natl": [680, 684, 975], "acad": [680, 684, 975], "5591": [680, 684, 975], "mlle": [680, 684, 975], "zha": [680, 684, 975], "shanghai": [680, 684, 975], "univ": [680, 684, 975], "406": [680, 684, 975], "immers": [681, 685], "nonmetr": [681, 685], "smacof": [681, 1035], "stress": [681, 685, 975, 1035], "stress_": 681, "dispar": [681, 685, 975], "dissimilarity_matrix_": 681, "psychometrika": [681, 685, 975], "1964": [681, 685, 866, 878, 975], "borg": [681, 685, 975], "groenen": [681, 685, 975], "affinity_matrix": 682, "n_neighbors_": [682, 836], "early_exagger": 683, "min_grad_norm": [683, 1026], "der": [683, 687, 975, 1023, 1024, 1028], "maaten": [683, 687, 975], "bhtsne": [683, 1027], "opentsn": 683, "abort": 683, "pdist": [683, 768, 771], "pairwise_distance_funct": [683, 687, 768, 771, 981], "barn": [683, 1025, 1027, 1030], "hut": [683, 1025, 1027, 1030], "nlogn": 683, "kl_divergence_": [683, 1027], "learning_rate_": [683, 848], "hinton": [683, 839, 846, 847, 848, 975, 981, 982, 983], "2579": 683, "2605": 683, "lvdmaaten": [683, 1027], "oct": [683, 759, 975, 981], "3221": [683, 975], "3245": [683, 975], "jmlr_2014": 683, "belkina": [683, 975], "ciccolella": [683, 975], "anno": [683, 975], "halpert": [683, 975], "spidlen": [683, 975], "snyder": [683, 975], "cappion": [683, 975], "kobak": [683, 1033], "beren": 683, "transcriptom": 683, "guttman": 685, "norm_laplacian": 686, "drop_first": 686, "nk": 687, "2n": [687, 970, 982], "3k": 687, "cosine_dist": [687, 752, 981, 1026], "jarkko": 687, "venna": 687, "samuel": [687, 1002, 1023, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037], "kaski": 687, "icann": 687, "verlag": 687, "491": 687, "twelfth": 687, "pmlr": 687, "384": [687, 891], "im_": 688, "axesimag": 688, "text_": 688, "include_valu": 688, "values_format": [688, 1030], "im_kw": [688, 1034], "text_kw": [688, 1035], "get_metr": 690, "chance_level_": [691, 693, 1036], "drop_intermedi": [691, 693, 772, 779, 1036], "errors_lines_": 692, "with_error": 692, "scatter_": 692, "balanced_accuracy_scor": [694, 777, 978, 1028], "imperfectli": [694, 724, 978], "label_tru": [695, 708, 727, 745, 747, 783], "upperlimit": 695, "nat": [695, 745, 747, 1034], "expected_ri": 696, "discord": 696, "hubert1985": 696, "1007": 696, "2fbf01908075": 696, "steinley2004": 696, "wk": 696, "rand_index": 696, "adjusted_rand_index": 696, "chacon": 696, "chac\u00f3n": 696, "rastrojo": 696, "balanced_accuraci": [699, 978, 1028], "brodersen": 699, "ong": 699, "stephan": [699, 1023, 1029, 1030, 1032], "buhmann": 699, "20th": 699, "3121": 699, "kelleh": [699, 978], "aoif": [699, 978], "arci": [699, 978], "y_true_categor": [700, 978], "calinski": [701, 1026], "harabasz": 701, "allow_non": 702, "thrown": [702, 1029, 1030], "tn": [703, 709, 978], "negative_class": 703, "zebra": 703, "output_dict": [704, 1028, 1032], "zero_divis": [704, 719, 720, 728, 773, 774, 777, 1030, 1032, 1036], "precision_recall_fscore_support": [704, 719, 720, 774, 777, 978, 1024, 1028, 1030, 1036], "multilabel_confusion_matrix": [704, 719, 720, 728, 774, 777, 978, 1029], "conting": [705, 706, 721, 745, 1026], "n_classes_tru": [705, 745], "n_classes_pr": [705, 745], "cohen": [707, 1028], "p_o": 707, "p_e": 707, "artstein": 707, "poesio": 707, "linguist": [707, 887, 991], "555": 707, "label_pr": [708, 726, 727, 745, 747, 783], "ant": [709, 744, 978], "a_row": 710, "a_column": 710, "b_row": 710, "b_column": 710, "tsoumaka": [711, 724, 730, 978], "kataki": [711, 724, 730, 978], "vlahava": [711, 730, 978], "handbook": [711, 730, 978], "667": [711, 730, 978], "raw_valu": [712, 713, 718, 735, 736, 738, 740, 741, 743, 775, 978, 1028, 1031], "wainwright": [712, 713, 714], "su": [712, 713, 714], "statlearnspars": [712, 713, 714], "764": [712, 978], "8125": 712, "57142857": 712, "d2": 713, "d2_absolute_error_scor": [713, 978, 1034], "koenker": [713, 974], "roger": [713, 1027, 1028, 1032], "jos\u00e9": [713, 1023, 1033], "772": 713, "487": 714, "bouldin": 715, "farther": 715, "log_bas": 716, "ignore_ti": [716, 746], "ndcg": [716, 746, 978, 1027], "ndcg_score": [716, 978, 1027, 1030, 1035, 1036], "sharper": 716, "discounted_cumulative_gain": 716, "dcg": [716, 746, 978, 1027], "jarvelin": [716, 746, 978], "kekalainen": [716, 746, 978], "colt": [716, 746, 978], "mcsherri": [716, 746, 978], "najork": [716, 746, 978], "european": [716, 746, 978], "421": [716, 746, 978], "groud": [716, 746], "true_relev": [716, 746], "propabl": 717, "imperfect": [718, 775, 978, 1022], "variance_weight": [718, 775, 978], "n_unique_label": [719, 720, 728, 773, 774, 777, 942], "fbeta_scor": [719, 732, 773, 978, 1022, 1023, 1024, 1025, 1030, 1036], "undefinedmetricwarn": [719, 720, 773, 774, 777, 1029], "y_true_empti": 719, "y_pred_empti": [719, 720], "66666667": [719, 772, 840, 988], "fowlk": [721, 1026], "mallow": [721, 1026], "get_scorer_nam": [722, 978, 1034], "forgiv": 724, "upperbound": 724, "grigorio": 724, "ioanni": 724, "wareh": 724, "septemb": [724, 978, 1020, 1023, 1026, 1028, 1033], "pred_decis": [725, 978, 1033], "disagre": [725, 985], "kobi": 725, "yoram": 725, "265": [725, 825, 829, 980], "AND": 725, "denero": 725, "gluster": 726, "v_measur": [726, 783], "6666": [728, 978, 1026], "5833": [728, 978], "lrap": [729, 978], "209": [731, 866], "21616": 731, "needs_proba": [732, 1029], "needs_threshold": [732, 978], "ftwo_scor": [732, 978], "mcc": [733, 978, 1034], "baldi": 733, "brunak": 733, "chauvin": 733, "andersen": [733, 1034], "nielsen": [733, 1028], "gorodkin": 733, "jurman": 733, "riccadonna": 733, "furlanello": 733, "cen": 733, "mape": [736, 978], "3273": 736, "5515": 736, "6198": 736, "112589990684262": 736, "0568": 737, "4260": [739, 742], "612": 740, "41666667": 740, "825": 740, "msle": [741, 978], "rmsle": 741, "00462428": 741, "08377444": 741, "samplewis": [744, 978], "mcm": [744, 978], "mcm_": 744, "multi_confus": 744, "normalized_discounted_cumulative_gain": 746, "dcg_score": [746, 978, 1027, 1030], "kernel_matrix": [748, 749, 756, 766], "marszalek": [748, 749, 976], "lazebnik": [748, 749, 976], "schmid": [748, 749, 976], "ouvert": [748, 749, 976], "00171412": [748, 749, 976], "cosine_similar": [750, 755, 976, 1025], "dense_output": [751, 757, 883, 928, 1028], "linear_kernel": [751, 755, 976, 1028], "haversine_dist": [752, 1029], "y_norm_squar": 753, "x_norm_squar": [753, 1025], "paired_dist": [753, 759, 768, 1024], "41421356": [753, 759, 981], "arcsin": 754, "lon": 754, "ezeiza": 754, "airport": 754, "bueno": 754, "argentina": 754, "gaull": 754, "bsa": 754, "83333": 754, "5166646": 754, "0083899664": 754, "53844117956": 754, "bsas_in_radian": 754, "paris_in_radian": 754, "6371000": 754, "kilomet": 754, "11099": 754, "54035582": 754, "polynomial_kernel": [755, 976], "rbf_kernel": [755, 976, 1024], "laplacian_kernel": [755, 976, 1025], "sigmoid_kernel": [755, 976], "sum_over_featur": [758, 1020, 1035], "componentwis": 758, "sq": 759, "dixon": [759, 1030, 1031], "cybernet": 759, "ieeexplor": 759, "4310090": 759, "filter_param": 764, "jth": [764, 768], "tanh": [767, 847, 848, 976, 993], "force_all_finit": [768, 908, 910, 911, 1031, 1034], "distance_metr": [768, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844], "metric_kwarg": [769, 770], "reduce_func": [771, 1031], "d_chunk": 771, "sought": 771, "neigh": [771, 832, 833, 834, 836, 838, 840, 841, 842], "gen": 771, "probas_pr": 772, "warn_for": 773, "shantanu": 773, "godbol": 773, "sunita": 773, "sarawagi": 773, "pig": 773, "948": [775, 978], "max_fpr": [778, 978, 1028], "provost": [778, 978], "ceder": [778, 978], "stern": [778, 978], "fawcett": [778, 779, 978], "874": [778, 779, 978], "generalis": [778, 978, 999], "multioutputclassifi": [778, 819, 821, 823, 978, 1027, 1029, 1030, 1031, 1032, 1036], "n_samples_a": [780, 781], "favour": [780, 975, 977, 1029], "mean_prior": 785, "degrees_of_freedom_prior": 785, "verbose_interv": [785, 786], "wishart": 785, "emipr": 785, "precisions_": [785, 786], "precisions_cholesky_": [785, 786, 1034], "converged_": [785, 786], "lower_bound_": [785, 786, 1028], "weight_concentration_prior_": 785, "weight_concentration_": 785, "mean_precision_prior_": 785, "mean_precision_": 785, "mean_prior_": 785, "degrees_of_freedom_prior_": 785, "degrees_of_freedom_": 785, "covariance_prior_": 785, "hagai": 785, "attia": 785, "bgm": 785, "n_dimens": [785, 786], "log_prob": [785, 786], "weights_init": 786, "precisions_init": [786, 1034], "gm": 786, "pre_dispatch": [787, 793, 801, 809, 811, 812, 813, 814, 817, 944, 1023], "error_scor": [787, 790, 791, 793, 801, 809, 812, 813, 814, 817, 967, 1024, 1028, 1032, 1035], "explos": [787, 801, 811, 812, 813], "fitfailedwarn": [787, 790, 791, 793, 801, 809, 812, 813, 814, 817], "param_kernel": [787, 801], "param_degre": 787, "split0_test_scor": [787, 801, 1026], "rank_t": 787, "split1_test_scor": [787, 801], "split0_train_scor": [787, 801, 1026], "split1_train_scor": [787, 801], "mean_train_scor": [787, 801, 1026], "std_train_scor": [787, 801, 1026], "split0_test_precis": [787, 801], "mean_train_precis": [787, 801], "best_estim": [787, 790, 791, 801], "scorer_": [787, 790, 791, 801], "n_splits_": [787, 790, 791, 801], "refit_time_": [787, 790, 791, 801, 1028], "multimetric_": [787, 790, 791, 801], "parametergrid": [787, 1022, 1028], "split2_test_scor": 787, "num_sampl": [787, 801, 1035], "stratif": [788, 789, 795, 796, 805, 806, 807, 949, 1029], "group_kfold": 788, "set_split_request": [788, 789, 794, 796, 805], "aggressive_elimin": [790, 791, 967], "r0": [790, 791], "replai": [790, 791], "n_remaining_candidates_": [790, 791], "n_candid": [790, 791, 967], "max_resources_": [790, 791], "min_resources_": [790, 791], "n_required_iterations_": [790, 791], "n_possible_iterations_": [790, 791], "exceed": [790, 791, 1026], "n_unique_tick": [793, 814], "n_tick": [793, 809, 814, 817], "neg_": [793, 809, 1026], "errorbar_": [793, 809], "errorbarcontain": [793, 809], "line2d": [793, 809], "fill_between_": [793, 809], "polycollect": [793, 809], "exploit_incremental_learn": [793, 814], "log_scal": [793, 1036], "fill_between_kw": [793, 809], "errorbar_kw": [793, 809], "predispatch": [793, 809, 814, 817], "negat": [793, 809, 978], "combinator": 797, "lpo": 797, "param_list": 799, "rounded_list": 799, "89856": 799, "923223": 799, "878964": 799, "038159": 799, "parametersampl": [801, 1022, 1028, 1032], "2652124": 802, "rskf": 803, "36851234": 803, "sizeabl": [804, 807], "sad": [805, 806], "sss": 807, "logistic_regress": 809, "n_valu": [809, 817, 1028], "checked_cv": 810, "3315057": [812, 813], "08022103": [812, 813], "03531816": [812, 813], "test_r2": 813, "test_auc": 813, "train_r2": 813, "train_auc": 813, "3635": 813, "3573": 813, "6114": 813, "28009951": 813, "3908844": 813, "22784907": 813, "train_sizes_ab": 814, "train_size_ab": 814, "cv_train_scor": 814, "cv_test_scor": 814, "permutation_scor": 815, "pairwise_indices_": 818, "outputcodeclassifi": [818, 819, 1027, 1032, 1036], "label_binarizer_": 819, "multilabel_": [819, 1025], "onevsoneclassifi": [819, 820, 1021, 1023, 1024, 1026, 1027, 1029, 1032, 1034], "code_s": [820, 979], "code_book_": 820, "bakiri": [820, 979], "pict": [820, 979], "order_": [821, 824], "regressorchain": [821, 823, 1028, 1031, 1035], "jess": [821, 979, 1033], "pfahring": [821, 979], "geoff": [821, 979], "holm": [821, 979], "eib": [821, 979], "8387": 821, "9431": 821, "4576": 821, "8878": 821, "3684": 821, "2640": 821, "0321": 821, "9935": 821, "0625": 821, "y_decis": 821, "partial_fit_param": [822, 823], "load_linnerud": [823, 1026, 1031], "force_alpha": [825, 826, 827, 829, 1035], "lidston": [825, 826, 827, 829, 980], "class_count_": [825, 826, 827, 828, 829], "class_log_prior_": [825, 826, 827, 829], "feature_count_": [825, 827, 829], "feature_log_prob_": [825, 826, 827, 829], "categoricalnb": [825, 827, 828, 829, 980, 1030, 1031, 1032, 1033, 1035], "renni": [825, 827, 980, 1028], "schuetz": [825, 829], "htmledit": [825, 829, 976], "mccallum": [825, 980], "nigam": [825, 980], "metsi": [825, 980], "androutsopoulo": [825, 980], "palioura": [825, 980], "cea": [825, 980], "predict_joint_log_proba": [825, 826, 827, 828, 829, 1035], "min_categori": [826, 1032], "category_count_": 826, "n_categories_": 826, "mirror": [827, 967], "mahout": 827, "weka": 827, "feature_all_": 827, "shih": [827, 980], "teevan": [827, 980], "karger": [827, 980], "616": [827, 980, 988], "jrenni": 827, "icml03": 827, "var_smooth": [828, 1028], "stan": 828, "levequ": [828, 870], "cstr": 828, "epsilon_": 828, "theta_": [828, 980], "clf_pf": 828, "distancemetric64": [830, 831], "valid_metr": [830, 831, 981, 1036], "19662693": [830, 831], "29473397": [830, 831], "tree_copi": [830, 831], "query_radiu": [830, 831], "count_onli": [830, 831], "kernel_dens": [830, 831], "94114649": [830, 831], "83281226": [830, 831], "2071716": [830, 831], "two_point_correl": [830, 831], "580": [830, 831], "get_arrai": [830, 831], "get_n_cal": [830, 831], "n_call": [830, 831], "get_tree_stat": [830, 831], "tree_stat": [830, 831], "breadth_first": [830, 831, 835], "return_log": [830, 831], "k_true": [830, 831], "k_ret": [830, 831], "breadth": [830, 831, 835, 1002, 1022], "dualtre": [830, 831], "sort_result": [830, 831, 838, 840, 841, 842, 1032], "radii": [830, 831], "reset_n_cal": [830, 831], "effective_metric_": [832, 833, 834, 836, 838, 840, 841, 842, 981], "callbl": 832, "effective_metric_params_": [832, 833, 834, 836, 838, 840, 841, 842], "outputs_2d_": [832, 840, 1030], "nearest_neighbor_algorithm": [832, 840, 841], "333": 832, "n_index": [832, 833, 834, 836, 838, 840, 841], "neigh_dist": [832, 833, 834, 836, 838, 840, 841, 842], "neigh_ind": [832, 833, 834, 836, 838, 840, 841, 842], "nearest_neighbors_algorithm": [833, 838], "nearer": [834, 842, 981], "x_dist_graph": 834, "silverman": [835, 1035], "binarytre": [835, 1024, 1028, 1032], "bandwidth_": 835, "log_dens": 835, "52955942": 835, "51462041": 835, "60244657": 835, "logprob": 835, "negative_outlier_factor": 836, "9821": 836, "0370": 836, "3697": 836, "shifted_opposite_lof_scor": 836, "opposite_lof_scor": 836, "wminkowski": [837, 1032, 1034], "narasimhan": 837, "chu": [837, 1036], "shrunken": [837, 1020], "6567": 837, "6572": 837, "nbr": [838, 981], "neighborsclassifi": [838, 840, 841, 842, 1020], "n_features_a": 839, "n_features_b": 839, "goldberg": [839, 981], "neighbourhood": [839, 981], "ncanip": 839, "neighbourhood_components_analysi": 839, "961904": 839, "outlier_label": [840, 1030], "outlier_label_": 840, "33333333": [840, 988], "x_cluster": 842, "warn_when_not_sort": 845, "efficiencywarn": [845, 1035], "sml": [846, 983], "pcd": [846, 983], "sweep": 846, "gibb": [846, 983, 998], "intercept_hidden_": 846, "intercept_visible_": 846, "h_samples_": 846, "osindero": [846, 983], "teh": [846, 983], "1527": 846, "1554": 846, "absp": 846, "fastnc": 846, "tieleman": [846, 983], "v_new": 846, "pseudo_likelihood": 846, "relu": [847, 848], "beta_1": [847, 848], "beta_2": [847, 848], "max_fun": [847, 848, 1030], "n_layer": [847, 848], "neuron": [847, 848, 976, 982], "tan": [847, 848, 982, 1027], "rectifi": [847, 848], "kingma": [847, 848, 982], "diederik": [847, 848, 982, 1035], "jimmi": [847, 848, 982, 1026, 1028], "effective_learning_r": [847, 848], "best_loss_": [847, 848, 1035], "best_validation_score_": [847, 848, 1035], "validation_scores_": [847, 848, 1035], "intercepts_": [847, 848, 982], "n_layers_": [847, 848], "out_activation_": [847, 848], "geoffrei": [847, 848, 982, 1031, 1032, 1033, 1034, 1036], "connectionist": [847, 848], "glorot": [847, 848], "xavier": [847, 848, 1028, 1029, 1030, 1032, 1033], "yoshua": [847, 848, 991], "feedforward": [847, 848], "kaim": [847, 848], "delv": [847, 848], "imagenet": [847, 848], "961": 847, "log_y_prob": 847, "named_transform": [849, 1035], "transform_list": 849, "s__p": 850, "n_transformed_featur": 850, "predict_log_proba_param": 850, "y_log_proba": 850, "predict_proba_param": 850, "analyst": 853, "x_tr": [853, 859, 862, 863, 864, 868, 870, 873, 875, 876, 880, 881], "accept_spars": [854, 910, 911, 1027], "inv_kw_arg": 854, "pickleabl": [854, 1026], "6931": 854, "3862": 854, "n_bins_": 855, "int_": 855, "regener": 855, "xinv": 855, "tild": [856, 986, 988], "k_fit_rows_": 856, "k_fit_all_": 856, "1299": [856, 988], "1319": [856, 988], "n_samples1": 856, "n_samples2": 856, "k_new": 856, "neg_label": [857, 874], "y_type_": 857, "sparse_input_": 857, "tokyo": [858, 989], "amsterdam": [858, 989], "max_abs_": 859, "x_std": [860, 876, 988], "data_min_": [860, 1025], "data_max_": [860, 1025], "data_range_": [860, 1025], "unwieldi": 861, "fi": 861, "comedi": 861, "y_indic": 861, "yt": 861, "ands": 861, "feature_name_combin": [863, 1036], "categories_": [863, 864, 871, 988, 1028, 1035], "unregular": [863, 886, 1011, 1029], "intact": [863, 1013], "infrequ": [863, 864, 871, 978, 1020, 1034, 1035, 1036], "infrequent_if_exist": [863, 988], "x_6": 863, "x_7": 863, "drop_idx_": [863, 1031, 1035], "drop_idx": 863, "gender_femal": 863, "gender_mal": 863, "group_1": 863, "group_2": 863, "group_3": 863, "drop_enc": [863, 988], "drop_binary_enc": 863, "custom_combin": 863, "custom_fnames_enc": 863, "x0_str_femal": 863, "x0_str_male": 863, "x1_int_1": 863, "x1_int_2": 863, "x1_int_3": 863, "oh": [863, 1030], "infrequent_sklearn": [863, 988], "n_encoded_featur": [863, 864], "bpo": 864, "43475": 864, "lenient": [864, 999], "min_degre": [865, 1033], "max_degre": [865, 1033], "powers_": 865, "n_output_features_": 865, "nystrom": [865, 1029, 1030], "featurewis": 866, "power_transform": [866, 879, 1028], "biometrika": [866, 878], "954": [866, 878], "959": [866, 878], "386": 866, "707": [866, 878], "ignore_implicit_zero": [867, 879], "landmark": [867, 879, 988], "n_quantiles_": 867, "quantiles_": [867, 988, 1030], "references_": 867, "robustscal": [867, 880, 968, 988, 1025, 1026, 1028, 1030, 1031, 1032, 1036], "with_cent": [868, 880], "with_scal": [868, 880], "unit_vari": [868, 880, 1032], "iqr": [868, 880], "interquartil": [868, 880], "quartil": 868, "75th": 868, "q_min": [868, 880], "q_max": [868, 880], "center_": 868, "robust_scal": [868, 879, 1028], "interquartile_rang": 868, "bspline": 869, "n_features_out_": 869, "with_std": [870, 881, 988, 1028], "n_samples_seen": 870, "5a": 870, "randal": [870, 1024, 1034], "242": [870, 1020], "247": 870, "mic": [871, 988], "target_mean_": [871, 988], "target_type_": 871, "micci": [871, 988], "barreca": [871, 988], "newsl": [871, 988], "enc_auto": 871, "enc_high_smooth": 871, "enc_low_smooth": 871, "ahead": 874, "return_norm": [877, 1027], "notimplementederror": [877, 1027], "compute_inverse_compon": [882, 883, 990], "inverse_components_": [882, 883, 990, 1034], "2759": [882, 883], "afor": [882, 883], "baserandomproject": [882, 883], "ping": [883, 990, 1026, 1027], "density_": 883, "gaussianrandomproject": [883, 990, 1021, 1034, 1036], "church": [883, 990], "kdd06_rp": 883, "cgi": 883, "uoa": 883, "gr": 883, "opta": 883, "0182": 883, "e2": [884, 974], "93lindenstrauss_lemma": 884, "sanjoi": [884, 990], "anupam": [884, 990, 1035], "gupta": [884, 990, 1027, 1028, 1031, 1032, 1033, 1034, 1036], "elementari": [884, 990], "663": [884, 986, 990], "11841": [884, 990], "1112658": [884, 990], "7894": [884, 990], "9868": [884, 990], "steadi": [885, 886], "xiaojin": 885, "zoubin": 885, "ghahramani": 885, "cmu": 885, "cald": 885, "carnegi": 885, "mellon": 885, "jerryzhu": 885, "label_prop_model": [885, 886], "clamp": [886, 991], "dengyong": 886, "bousquet": 886, "navin": 886, "lal": 886, "schoelkopf": 886, "termination_condition_": 887, "no_chang": 887, "all_label": 887, "33rd": [887, 991], "acl": [887, 991, 992], "stroudsburg": [887, 991], "196": [887, 991], "optmiz": [890, 891], "crammer_sing": [890, 979, 993, 1020], "seldom": 890, "readonli": [890, 891, 1033, 1035, 1036], "raw_coef_": [890, 891], "smo": [890, 891], "526": 890, "1693": 890, "unsur": 891, "582": 891, "023": [891, 986], "522": 891, "class_weight_": [892, 893, 894, 895, 896, 1035], "n_sv": [892, 893, 894, 895, 896, 993, 1030], "fit_status_": [892, 893, 894, 895, 896], "n_support_": [892, 893, 894, 895, 896, 993, 1030], "proba_": [892, 895, 1031], "probb_": [892, 895, 1031], "shape_fit_": [892, 893, 894, 895, 896], "n_dimensions_of_x": [892, 893, 894, 895, 896], "7798": 894, "0547": 894, "0556": 894, "0561": 894, "7332": 894, "unshift": 894, "impract": 895, "tube": [896, 993], "_tree": [898, 899, 900, 901, 1021, 1023], "decision_tree_learn": [898, 899, 994], "olshen": [898, 899, 994], "wadsworth": [898, 899, 994], "belmont": [898, 899, 994], "cutler": [898, 899], "cc_home": [898, 899], "htm": [898, 899], "ccp_path": [898, 899, 900, 901], "get_depth": [898, 899, 900, 901, 1029], "get_n_leav": [898, 899, 900, 901, 1029], "set_predict_proba_request": [898, 900], "extra_tre": [900, 901], "8947": 900, "decision_tre": [902, 903, 904, 994], "out_fil": [902, 994], "leaves_parallel": 902, "special_charact": [902, 994], "fontnam": [902, 1033], "helvetica": [902, 904], "graphviz": [902, 994], "postscript": 902, "tpng": 902, "paint": [902, 904], "dot_data": [902, 994], "digraph": 902, "show_weight": 903, "feature_0": 903, "unrepresent": 905, "keyerror": [905, 1030], "popitem": 905, "lifo": 905, "input_nam": [909, 911, 941, 1034], "accept_large_spars": [910, 911, 1028], "ensure_2d": [910, 911], "allow_nd": [910, 911], "ensure_min_sampl": [910, 911], "ensure_min_featur": [910, 911], "y_numer": 910, "bsr": [910, 911, 1033], "x_convert": 910, "y_convert": 910, "array_convert": 911, "min_val": 914, "max_val": 914, "include_boundari": [914, 1034], "y_org": 915, "class_weight_vect": 915, "king": 915, "zen": 915, "sample_weight_vect": 916, "parenthes": 917, "type_filt": 919, "generate_onli": [921, 1030], "checks_gener": 921, "test_check_estim": 922, "check_estimators_fit_returns_self": 922, "array_lik": 925, "logdet": 925, "slogdet": 925, "6375861597263857": 925, "flip_sign": 927, "svd_lapack_driv": 927, "gesdd": 927, "p5": 927, "transposit": 927, "gesvd": 927, "conquer": 927, "unitari": 927, "vh": 927, "dot_product": 928, "deweight": 929, "min_batch_s": 930, "n_pack": [930, 931], "path_length": 932, "sliceabl": 933, "methodmetadatarequest": 934, "routemappingpair": 935, "routing_info": 935, "methodpair": 936, "other_param": 938, "truthi": 939, "helloifeven": 939, "_x_is_even": 939, "say_hello": 939, "temp_fold": 944, "max_nbyt": 944, "1m": 944, "mmap_mod": 944, "dispatch_next": 944, "dispatch_one_batch": 944, "unprotect": 944, "prefetch": 944, "print_progress": 944, "inner_max_num_thread": 946, "backend_param": 946, "register_parallel_backend": [946, 1028], "pyiodin": 946, "dask": [946, 999, 1028], "workload": [946, 998], "register_rai": 946, "backend_nam": 946, "oversubscript": [946, 1034], "threadpool": 946, "effective_n_job": 946, "tracking_select": 947, "reservoir_sampl": 947, "reservoir": 947, "make_default": 948, "parallelbackendbas": 948, "resampled_arrai": 949, "3x2": [949, 952], "shuffled_arrai": 952, "last_mean": 953, "last_var": 953, "last_n": 953, "return_sum_weight": 959, "sum_weight": 959, "all_or_ani": [962, 1030], "is_fit": 962, "__sklearn_is_fitted__": [962, 1033, 1034], "eg": 962, "substitut": [962, 999, 1026], "raise_except": 964, "array_sym": 964, "is_paramet": 966, "enclos": 967, "set_stat": 967, "bergstra": [967, 1020, 1021], "tournament": 967, "dispos": [967, 1013], "n_resources_i": 967, "n_resources_0": 967, "n_candidates_i": 967, "n_candidates_0": 967, "r_0": 967, "n_resourc": 967, "983667": 967, "951958": 967, "947958": 967, "961009": 967, "955989": 967, "jamieson": 967, "talwalkar": 967, "desalvo": 967, "rostamizadeh": 967, "hyperband": 967, "bandit": 967, "multimetr": [967, 1030, 1035], "calibrated_forest": 967, "select__k": 967, "model__estimator__max_depth": 967, "imp": 968, "sophist": [968, 980], "14338": 968, "13286": 968, "15611": 968, "amelia": 968, "scientist": [968, 1002], "roderick": 968, "rubin": 968, "1986": [968, 994], "ol2001": 968, "mask_missing_values_onli": 968, "mask_al": 968, "rr2007": 970, "2x_iy_i": 970, "vz2010": 970, "vvz2010": 970, "prod_i": 970, "ls2010": 970, "c_0": [970, 976], "tensorsketch": 970, "pp2013": 970, "wikic": 970, "ccf2002": 970, "mercer": 970, "langl": [970, 978, 992, 993], "rangl": [970, 978, 992, 993], "y_j": [970, 978, 980, 993], "obviat": 970, "dagm": 970, "vempati": 970, "jawahar": 970, "charikar": 970, "farach": 970, "colton": 970, "m2012": 971, "mu_k": 972, "cst": 972, "omega_": 972, "k0": 972, "h_l": 972, "extrema": 972, "honei": 972, "stork": 972, "dilemma": 973, "valid_scor": 973, "w_0": 974, "w_p": 974, "34545455": 974, "13636": [974, 1029], "rifkin": 974, "lippert": 974, "2n_": 974, "softw": 974, "kim": [974, 1028, 1029, 1030, 1034], "koh": [974, 1002], "lustig": 974, "boyd": 974, "gorinevski": 974, "c_p": 974, "cherkasski": 974, "yunqian": 974, "1691": 974, "1714": 974, "ell_2": 974, "equiangular": 974, "weisberg": 974, "ell_0": [974, 978], "_coef": 974, "mp": 974, "ell_": 974, "posteriori": [974, 980], "radford": 974, "neal": [974, 1033], "50000013": 974, "49999993": 974, "lambda_i": [974, 988], "srikantan": 974, "tristan": 974, "fletcher": [974, 1020, 1024], "nomenclatur": [974, 1026], "deliber": 974, "overparameter": 974, "ldot": [974, 978, 980, 982, 992], "w_l": 974, "min_w": 974, "iverson": 974, "hood": [974, 993], "broyden": 974, "goldfarb": 974, "shanno": 974, "shortcom": 974, "statsmodel": [974, 998], "aaron": [974, 1023, 1024, 1025, 1030], "simon": [974, 1002, 1023, 1024, 1033, 1034, 1035, 1036], "93fletcher": 974, "93goldfarb": 974, "93shanno_algorithm": 974, "noah": 974, "multirespons": 974, "edm": 974, "agricultur": 974, "rainfal": 974, "paid": 974, "bernouli": 974, "fraud": [974, 1002], "cash": 974, "fraudul": [974, 1002], "interrupt": 974, "drug": 974, "cure": 974, "entertain": 974, "mccullagh": 974, "nelder": 974, "boca": 974, "raton": 974, "chapman": 974, "hall": [974, 1027, 1031], "crc": 974, "31760": 974, "j\u00f8rgensen": 974, "monografia": 974, "matem\u00e1tica": 974, "2463": 974, "4337": 974, "7638": 974, "disappear": [974, 1020], "photogrammetr": 974, "hypothes": 974, "paradigm": 974, "cartographi": 974, "fischler": 974, "boll": 974, "sunglok": 974, "choi": 974, "taemin": 974, "wonpil": 974, "93sen_estim": 974, "binom": 974, "infeas": [974, 981, 983], "k\u00e4rkk\u00e4inen": 974, "\u00e4yr\u00e4m\u00f6": 974, "h_": 974, "oarc": 974, "dae": 974, "bassett": 974, "jr": 974, "econometrica": 974, "econometr": 974, "portnoi": 974, "hare": 974, "tortois": 974, "paraboloid": 974, "w_3": 974, "w_4": 974, "w_5": 974, "z_1": 974, "z_2": 974, "z_3": 974, "z_4": 974, "z_5": 974, "streamlin": 974, "gotten": [974, 988], "necess": [975, 981], "strife": 975, "mother": 975, "baloo": 975, "song": 975, "jungl": 975, "rubric": 975, "defici": [975, 992], "hlle": 975, "revolv": 975, "belkin": 975, "niyogi": 975, "1373": 975, "1396": 975, "molecul": 975, "jk": 975, "delta_": 975, "c_1": 975, "disentangl": 975, "legitim": 975, "die": 975, "noisier": 975, "5415": 975, "brief": 976, "num_featur": [976, 1035], "quantum": 976, "nutshel": 976, "36787944": 976, "89483932": 976, "58364548": 976, "51341712": 976, "83822343": 976, "7768366": 976, "facil": 977, "equi": 977, "agnost": [977, 986], "cue": 977, "came": 977, "quicker": 977, "unpract": 977, "analogi": [977, 978], "top_k_accuraci": 978, "top_k_accuracy_scor": [978, 1032, 1034], "neg_brier_scor": [978, 1030], "f1_micro": [978, 1024], "f1_weight": [978, 1024], "f1_sampl": 978, "neg_log_loss": 978, "roc_auc_ovr": [978, 1030], "roc_auc_ovo": [978, 1030], "roc_auc_ovr_weight": [978, 1030], "roc_auc_ovo_weight": [978, 1030], "explained_variance_scor": [978, 1023, 1027, 1034], "max_error": [978, 1029], "neg_mean_squared_log_error": 978, "mean_squared_log_error": [978, 1027, 1033], "neg_median_absolute_error": 978, "neg_mean_poisson_devi": 978, "neg_mean_gamma_devi": 978, "mean_gamma_devi": [978, 1030], "d2_pinball_scor": [978, 1034], "d2_tweedie_scor": [978, 1033], "invalidparametererror": 978, "_error": 978, "my_custom_loss_func": 978, "693": 978, "protocol": [978, 1023, 1036, 1037], "custom_scoring_funct": 978, "custom_scorer_modul": 978, "confusion_matrix_scor": 978, "test_tp": 978, "test_fn": 978, "untru": 978, "dividend": 978, "divisor": 978, "quotient": 978, "texttt": 978, "youden": 978, "informed": 978, "mosley2013": 978, "kelleher2015": 978, "guyon2015": 978, "urbanowicz2015": 978, "escalant": 978, "escalera": 978, "maci\u00e0": [978, 1033, 1035], "saeed": 978, "statnikov": 978, "viega": 978, "chalearn": 978, "automl": [978, 998], "ijcnn": 978, "moslei": 978, "ijcv": 978, "urbanowicz": 978, "exstrac": 978, "evol": 978, "intel": [978, 998], "cohen_kappa_scor": [978, 1025, 1027], "4285714285714286": 978, "manning2008": 978, "everingham2010": 978, "davis2006": 978, "flach2015": 978, "everingham": 978, "gool": 978, "winn": 978, "pascal": 978, "voc": 978, "goadrich": 978, "y_l": 978, "_l": 978, "emptyset": 978, "f_beta": 978, "hinge_loss": [978, 1024, 1032, 1033], "ne": [978, 981], "1738": 978, "matthews_corrcoef": [978, 1020, 1026, 1027, 1034], "t_k": [978, 994], "ik": 978, "ki": 978, "kk": 978, "auroc": 978, "ht2001": 978, "fc2009": 978, "pd2000": 978, "f2006": 978, "f2001": 978, "inner_clf": 978, "c\u00e8sar": 978, "hernandez": 978, "orallo": 978, "modroiu": 978, "wikipediadet2017": 978, "martin1997": 978, "navratil2007": 978, "consult": 978, "encyclopedia": 978, "utc": 978, "php": [978, 998], "detection_error_tradeoff": 978, "oldid": 978, "798982054": 978, "doddington": 978, "kamm": 978, "ordowski": 978, "przybocki": 978, "navractil": 978, "klusacek": 978, "acoust": 978, "icassp": 978, "honolulu": 978, "229": 978, "brier1950": 978, "p_i": [978, 981], "bella2012": 978, "flach2008": 978, "bella": 978, "hern\u00e1ndez": 978, "ram\u00edrez": 978, "quintana": 978, "khosrow": 978, "pour": 978, "hershei": 978, "edson": [978, 1025], "matsubara": 978, "dagstuhl": 978, "seminar": 978, "schloss": 978, "leibniz": 978, "zentrum": 978, "lr_": 978, "brenner": 978, "gefel": 978, "991": 978, "coverage_error": [978, 1024, 1034], "label_ranking_average_precision_scor": [978, 1024, 1028, 1029, 1035], "label_ranking_loss": [978, 1025], "grade": 978, "unalt": 978, "epsilon_i": 978, "925": [978, 1008], "7083": 978, "log_": 978, "growth": [978, 1025, 1026], "commod": 978, "mapd": 978, "2e6": 978, "2666": 978, "y_n": [978, 982, 992], "elicit": 978, "2500": 978, "mean_pinball_loss_95p": 978, "skill": 978, "mcfadden": 978, "d2_tweedie_score_15": 978, "d2_pinball_score_08": 978, "heteroschedast": 978, "homoschedast": 978, "pear": 979, "y_dens": 979, "y_spars": 979, "advoc": 979, "elabor": 979, "financ": 979, "f3": 979, "y3": 979, "multi_target_forest": 979, "75474165": 979, "147": 979, "03498585": 979, "03812219": 979, "12165031": 979, "12914884": 979, "46081961": 979, "8948621": 979, "44373091": 979, "88978285": 979, "62745778": 979, "02891072": 979, "48204257": 979, "03260883": 979, "34867495": 979, "52003279": 979, "92529176": 979, "25719016": 979, "84253": 979, "25193977": 979, "16443186": 979, "12274212": 979, "170388": 979, "80956739": 979, "16979946": 979, "72667194": 979, "50941682": 979, "50447799": 979, "149": [979, 1020], "37967282": 979, "15699552": 979, "72850319": 979, "prod_": 980, "downarrow": 980, "spite": 980, "famous": 980, "serious": 980, "flair": 980, "2_y": 980, "mu_i": 980, "sigma_i": [980, 988], "theta_i": 980, "cnb": 980, "mnb": 980, "inventor": 980, "alpha_i": [980, 993], "cj": [980, 1023, 1024, 1025, 1026, 1027], "summat": [980, 982], "min_c": 980, "t_i": 980, "poorest": 980, "n_i": [980, 988], "satellit": 981, "kdt": 981, "pyfunc": 981, "farawai": 981, "invent": 981, "orthotrop": 981, "bentlei": 981, "1975": 981, "omohundro": 981, "characteris": 981, "unaffect": 981, "amort": 981, "cache_path": 981, "gettempdir": 981, "unsort": [981, 1021, 1024, 1028], "5807": 981, "nca_pip": 981, "96190476": 981, "limits_": 981, "lx": 981, "x_m": 982, "leftmost": 982, "w_1x_1": 982, "w_2x_2": 982, "w_mx_m": 982, "backpropag": 982, "998": 982, "b_1": 982, "b_2": 982, "z_l": 982, "dfrac": [982, 988], "nabla": 982, "deduct": 982, "rumelhart": 982, "jiquan": 982, "ngiam": 982, "chuan": 982, "yifan": 982, "carolin": 982, "suen": 982, "backprop": [982, 992], "lecun": [982, 992], "orr": [982, 992], "strai": 983, "v_ih_j": 983, "b_iv_i": 983, "c_jh_j": 983, "h_j": 983, "v_i": 983, "b_i": 983, "sum_h": 983, "fantasi": 983, "particl": 983, "thoroughli": 983, "hereund": 984, "1443": 984, "1471": 984, "outlying": 984, "h2009": 985, "g2015": 985, "absurd": 985, "m2019": 985, "bike": 985, "mc_clf": 985, "466": 985, "624": 985, "overlaid": 985, "obscur": [985, 1036], "cice": [985, 1034], "pd_": 985, "dx_c": 985, "footnot": [985, 998], "opaqu": 986, "x_val": 986, "y_val": 986, "356": 986, "probe": 986, "204": [986, 991], "050": 986, "033": 986, "r_multi": 986, "081": 986, "1013": 986, "866": 986, "445": 986, "277": [986, 1022], "i_j": 986, "min_max_scal": 988, "x_train_minmax": 988, "x_test_minmax": 988, "max_abs_scal": 988, "x_train_maxab": 988, "x_test_maxab": 988, "unintention": 988, "kernelcenter": [988, 1030, 1034], "semidefinit": [988, 993], "scholkopf1998": 988, "1_": 988, "x_train_tran": 988, "x_test_tran": 988, "8pt": 988, "x_normal": 988, "firefox": 988, "chrome": 988, "safari": 988, "africa": 988, "dragon": 988, "lexicon": 988, "par": 988, "tau": 988, "l_i": 988, "pargent": 988, "pfister": 988, "2671": 988, "2692": 988, "infant": 988, "kid": 988, "teen": 988, "adult": 988, "senior": [988, 1002], "citizen": 988, "retbin": 988, "x_1x_2": 988, "x_1x_3": 988, "x_2x_3": 988, "x_1x_2x_3": 988, "rung": 988, "eiler": 988, "marx": 988, "perperogl": 988, "sauerbrei": 988, "abrahamowicz": 988, "bmc": 988, "methodol": 988, "38629436": 988, "sixteenth": 990, "uai": 990, "craig": [990, 1023, 1028], "boutili": 990, "mois\u00e9": 990, "goldszmidt": 990, "morgan": [990, 994, 996], "kaufmann": [990, 994, 1032], "ella": 990, "bingham": 990, "heikki": 990, "mannila": 990, "245": [990, 1022], "explic": 990, "3947": 990, "687": 990, "kenneth": [990, 1020, 1021, 1026, 1027, 1034, 1035], "12th": 990, "296": 990, "x_new_invers": 990, "x_new_again": 990, "delalleau": 991, "aistat": 991, "gatsbi": 991, "ucl": 991, "uk": [991, 1013], "fullpap": 991, "xi_i": 992, "slack": 992, "t_0": 992, "l\u00e9on": [992, 1034, 1035, 1036], "_init_t": 992, "basesgd": 992, "eta_0": 992, "_t": 992, "svmsgd": 992, "pegaso": 992, "srebro": 992, "tsuruoka": 992, "tsujii": 992, "ananiad": 992, "afnlp": 992, "lin_clf": 993, "grasp": [993, 999], "sv": 993, "builtin": 993, "qp": 993, "linear_svc": 993, "gram_train": 993, "gram_test": 993, "zeta": 993, "zeta_i": 993, "textrm": [993, 1011], "q_": 993, "equiv": 993, "reparameter": 993, "wu": [993, 1024, 1032], "weng": 993, "1005": 993, "rong": 993, "aug": 993, "1871": 993, "1874": 993, "ofmulticlass": 993, "fitter": 994, "pariti": 994, "multiplex": 994, "export_graphviz": [994, 1025, 1027, 1033, 1035, 1036], "export_text": [994, 1029, 1036], "dumont": 994, "subwindow": 994, "beforehand": 994, "dichotomis": 994, "quinlan": 994, "multiwai": 994, "proprietari": 994, "ruleset": 994, "q_m": 994, "n_m": 994, "t_m": 994, "setminu": 994, "mk": 994, "_m": 994, "ge0": 994, "widetild": 994, "tradition": 994, "t_t": 994, "eff": 994, "predictive_analyt": 994, "troubleshoot": 996, "artwork": 996, "fund": 996, "spotifi": 996, "betawork": 996, "evernot": 996, "aweb": 996, "yhat": 996, "rangespan": 996, "birchbox": 996, "bestofmedia": 996, "phimeca": 996, "howaboutw": 996, "peerindex": 996, "datarobot": 996, "okcupid": 996, "love": [996, 1013], "publica": 996, "machinali": 996, "solido": 996, "infonea": 996, "dataiku": 996, "otto": 996, "zopa": 996, "bnp": 996, "pariba": 996, "cardif": 996, "post1": [996, 1018], "foot": 997, "gear": 997, "neuroimag": [997, 1002], "astronom": 997, "pycon": 997, "thirti": 997, "nyc": [997, 1002], "sister": 998, "sklearn_panda": 998, "sklearn_xarrai": 998, "xarrai": 998, "autoviml": 998, "tpot": 998, "featuretool": 998, "neuraxl": 998, "neat": [998, 1020], "checkpoint": 998, "funki": 998, "saver": 998, "evalml": 998, "neptun": 998, "mlop": 998, "sacr": 998, "dtreeviz": 998, "eli5": 998, "mlxtend": 998, "yellowbrick": 998, "deap": 998, "evolutionari": 998, "interchang": [998, 1037], "skop": [998, 1015], "jpmml": 998, "porter": 998, "transpil": 998, "javascript": 998, "m2cgen": 998, "dart": 998, "haskel": 998, "rust": 998, "treelit": 998, "tslearn": 998, "sktime": 998, "hmmlearn": 998, "pomegran": 998, "crfsuit": 998, "skforecast": 998, "nolearn": 998, "lasagn": 998, "theano": 998, "skorch": 998, "scikera": 998, "scikit_learn": 998, "feder": 998, "lego": 998, "subsembl": 998, "lightn": 998, "sdca": 998, "adagrad": 998, "svrg": 998, "nadaraya": 998, "gplearn": 998, "genet": 998, "multilearn": 998, "seglearn": 998, "libopf": 998, "fastfm": 998, "kmode": 998, "sphereclust": 998, "mise": 998, "giotto": 998, "tda": 998, "pymc": 998, "censor": 998, "lightfm": 998, "openrec": 998, "spotlight": 998, "gensim": 998, "nilearn": 998, "neuro": 998, "astroml": 998, "astronomi": 998, "msmbuilder": 998, "dissemin": 998, "chines": 998, "persian": 998, "spanish": 998, "korean": 998, "disclaim": 998, "promis": 999, "eleven": 999, "incept": 999, "scala": 999, "reinforc": 999, "era": 999, "7242": 999, "12147": 999, "5523": 999, "10733": 999, "13902": [999, 1030], "12800": 999, "12866": 999, "15550": 999, "5853": 999, "11805": 999, "15319": 999, "11977": 999, "12852": [999, 1030], "13911": [999, 1030], "amput": 999, "6284": 999, "beginn": 999, "priorit": [999, 1027], "4497": 999, "7646": 999, "6425": 999, "6424": 999, "8480": 999, "6231": 999, "8100": 999, "6599": 999, "6715": 999, "14582": 999, "3855": 999, "13227": 999, "6323": 999, "14180": [999, 1031], "9173": 999, "13146": [999, 1030], "8614": 999, "7608": 999, "5082": 999, "8243": 999, "searchgrid": 999, "6929": 999, "__array_function__": [999, 1030], "etl": [999, 1002], "8370": 999, "6451": 999, "lifecycl": 999, "8157": 999, "7382": 999, "drift": 999, "11047": [999, 1030], "9326": 999, "slep011": 999, "1626": 999, "10463": 999, "id3": [1000, 1015], "cart": [1000, 1015], "touch": 1001, "savetxt": 1001, "cloneabl": 1001, "datafil": 1001, "printabl": 1001, "indispens": 1002, "stephen": [1002, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1033], "simmon": 1002, "vp": 1002, "athena": 1002, "music": 1002, "bernhardsson": 1002, "pariet": [1002, 1020], "lear": 1002, "visag": 1002, "fantast": 1002, "startup": 1002, "bitli": 1002, "chartbeat": 1002, "digg": [1002, 1027], "poncho": 1002, "gilad": 1002, "lotan": 1002, "chief": 1002, "chat": 1002, "bread": 1002, "butter": 1002, "chaumond": [1002, 1028], "offic": 1002, "ayzenshtat": [1002, 1028], "undergrad": 1002, "professor": 1002, "hotel": 1002, "destin": 1002, "agent": 1002, "melani": [1002, 1027, 1028], "awesom": 1002, "stuff": 1002, "randomizedpca": [1002, 1020, 1022, 1023, 1025, 1026, 1027], "boston": 1002, "mdbecker": 1002, "pydata_2013": 1002, "ninja": 1002, "thorough": 1002, "notch": 1002, "production": 1002, "greg": [1002, 1026, 1027, 1029, 1030], "lamp": 1002, "founder": 1002, "prototyp": 1002, "jurgen": 1002, "director": 1002, "commerc": 1002, "inventori": 1002, "bertin": 1002, "mahieux": 1002, "invalu": 1002, "vijai": [1002, 1023], "surrog": 1002, "traine": 1002, "impress": 1002, "traffic": 1002, "tenur": 1002, "matchmak": 1002, "weitzenfeld": 1002, "tweet": 1002, "ferenc": 1002, "huszar": 1002, "shop": 1002, "ourselv": 1002, "jeremi": [1002, 1025, 1026, 1027, 1028, 1031, 1032], "achin": 1002, "ceo": 1002, "marketplac": 1002, "frid": [1002, 1023], "radar": 1002, "partnership": 1002, "lebourgeoi": 1002, "charron": [1002, 1023, 1024, 1031, 1032, 1033], "cornerston": 1002, "sheep": 1002, "featureforg": 1002, "rafael": [1002, 1021, 1022, 1024, 1027], "carrascosa": [1002, 1024], "law": 1002, "semiconductor": 1002, "fab": [1002, 1030, 1031], "bleed": 1002, "chip": 1002, "smartphon": 1002, "automobil": 1002, "trent": [1002, 1026], "mcconaghi": 1002, "rapid": 1002, "immens": 1002, "thorsten": 1002, "kranz": 1002, "coma": 1002, "dss": 1002, "douetteau": 1002, "b2c": 1002, "retail": 1002, "palladium": 1002, "rammig": [1002, 1026], "peer": 1002, "lend": 1002, "billion": 1002, "gbp": 1002, "grate": 1002, "vlasio": [1002, 1027], "vasilei": [1002, 1027], "petfood": 1002, "cocoa": 1002, "worldwid": 1002, "toolset": 1002, "equip": 1002, "fitzk": 1002, "sr": 1002, "fondat": 1002, "s\u00e9bastien": [1002, 1026, 1028], "conort": 1002, "salmon": 1004, "nine": 1004, "sentiment": 1005, "cli": 1005, "doctest_mod": 1005, "hardest": 1006, "tightli": 1007, "knit": 1007, "x_fold": 1008, "array_split": 1008, "y_fold": 1008, "934": 1008, "train_indic": 1008, "test_indic": 1008, "963": 1008, "922": 1008, "930": 1008, "96388889": 1008, "92222222": 1008, "9637883": 1008, "93036212": 1008, "96578289": 1008, "92708922": 1008, "96681476": 1008, "96362897": 1008, "93192644": 1008, "0077": 1008, "943": 1008, "00375": 1008, "lfw_": 1009, "_lfw": 1009, "gerhard_schroed": 1009, "donald_rumsfeld": 1009, "tony_blair": 1009, "colin_powel": 1009, "george_w_bush": 1009, "282": [1009, 1020], "estimated_param_": 1010, "iris_x": 1011, "iris_i": 1011, "iris_x_train": 1011, "iris_y_train": 1011, "iris_x_test": 1011, "iris_y_test": 1011, "pave": 1011, "paltri": 1011, "exabyt": 1011, "30349955": 1011, "237": 1011, "63931533": 1011, "53060544": 1011, "73698041": 1011, "13170937": 1011, "81458798": 1011, "84845219": 1011, "60648906": 1011, "51961675": 1011, "09517222": 1011, "5854": 1011, "5855": 1011, "occam": 1011, "razor": 1011, "best_alpha": [1011, 1020], "025118864315095794": 1011, "knew": 1012, "taxonomist": 1012, "face_compress": 1012, "x_approx": 1012, "images_approx": 1012, "18565811e": 1012, "19346747e": 1012, "43026679e": 1012, "text_analyt": 1013, "skeleton": [1013, 1023], "sklearn_tut_workspac": 1013, "cp": 1013, "work_directori": 1013, "tutorial_hom": 1013, "fetch_data": 1013, "lang": 1013, "newsweed": 1013, "netnew": 1013, "bydat": 1013, "twenty_train": 1013, "holder": 1013, "2257": 1013, "sd345": 1013, "collier": 1013, "laserjet": 1013, "iii": [1013, 1034], "hampton": 1013, "4gb": 1013, "count_vect": 1013, "x_train_count": 1013, "35788": 1013, "4690": 1013, "downscal": 1013, "tf_transform": 1013, "x_train_tf": 1013, "tfidf_transform": 1013, "x_train_tfidf": 1013, "na\u00efv": 1013, "docs_new": 1013, "opengl": 1013, "x_new_count": 1013, "x_new_tfidf": 1013, "text_clf": 1013, "twenty_test": 1013, "docs_test": 1013, "8348": 1013, "9101": [1013, 1028], "1502": 1013, "353": 1013, "tfidf__use_idf": 1013, "searcher": 1013, "gs_clf": 1013, "workspac": 1013, "fear": 1013, "fire": 1013, "exercise_xx_script": 1013, "arg1": 1013, "arg2": 1013, "arg3": 1013, "mortem": 1013, "charngramanalyz": 1013, "exercise_01_language_train_model": 1013, "exercise_02_senti": 1013, "movie_review": 1013, "txt_sentoken": 1013, "cpickl": 1013, "subtleti": 1015, "subscrib": 1018, "gzip": 1020, "bzip2": 1020, "decompress": 1020, "auc_scor": [1020, 1022], "kernc": [1020, 1034, 1035], "led": 1020, "probabilisticpca": [1020, 1023], "hmm": [1020, 1021, 1022, 1023, 1025], "gaussianhmm": 1020, "multinomialhmm": 1020, "n_gram_rang": 1020, "267": 1020, "alexi": [1020, 1023, 1024, 1027], "mignon": [1020, 1023, 1024, 1027], "subhodeep": [1020, 1021, 1022], "moitra": [1020, 1021, 1022], "yannick": [1020, 1022], "schwartz": [1020, 1022, 1034], "duckworth": 1020, "benediktsson": [1020, 1021, 1022], "marko": [1020, 1029, 1030, 1036], "burjek": 1020, "pinto": 1020, "abraham": [1020, 1021, 1026, 1030], "hoenig": 1020, "flyingimmidev": 1020, "francoi": [1020, 1033], "savard": 1020, "hann": 1020, "schulz": 1020, "welind": 1020, "companioni": 1020, "brandyn": 1020, "bussonni": [1020, 1032], "matthia": [1020, 1022, 1023, 1026, 1027, 1028, 1032, 1035], "pierr": [1020, 1028, 1029, 1031, 1033, 1035], "astolfi": 1020, "huiginn": 1020, "goodman": [1020, 1025], "ludwig": 1020, "schwardt": 1020, "hervieu": 1020, "sergio": [1020, 1022, 1023, 1032, 1035], "medina": [1020, 1022], "sheerman": 1020, "buguen": 1020, "seq_dataset": [1020, 1030], "weight_vector": [1020, 1030], "reuben": 1020, "costin": 1020, "_basehmm": 1020, "neighborsregressor": 1020, "gone": [1020, 1021], "vbgmm": [1020, 1024, 1026], "_pvalu": 1020, "charset": [1020, 1022], "test_fract": 1020, "train_fract": 1020, "marek": 1020, "fcostin": 1020, "adrien": 1020, "gaidon": 1020, "joona": 1020, "sillanp\u00e4\u00e4": 1020, "mccarthi": [1020, 1028], "roi": [1020, 1034], "hyunjin": 1020, "ibay": 1020, "scheidegg": 1020, "clair": 1020, "revillet": 1020, "conrad": [1020, 1021, 1035], "meng": [1020, 1021, 1024, 1026, 1027], "xinfan": [1020, 1021, 1024], "udi": 1020, "weinsberg": 1020, "janso": 1020, "palafox": 1020, "overwrite_": 1020, "copy_": 1020, "buffer_mb": 1020, "sparse_encode_parallel": 1020, "accident": [1020, 1024, 1029], "basedictionarylearn": 1020, "sparsecodingmixin": 1020, "fast_svd": 1020, "arnold": [1020, 1021], "bala": [1020, 1023], "subrahmanyam": [1020, 1023], "varanasi": [1020, 1023], "draxu": 1020, "eickenberg": [1020, 1022, 1023, 1024, 1025], "bogdan": 1020, "trach": 1020, "f\u00e9lix": [1020, 1022, 1023, 1024, 1028], "antoin": [1020, 1022, 1023, 1024, 1027], "fortin": [1020, 1022, 1023, 1024], "manuel": [1020, 1024, 1028, 1029, 1032, 1033], "caicedo": 1020, "carvaj": 1020, "tiziano": 1020, "zito": [1020, 1033], "jean": [1020, 1023, 1024, 1025, 1026, 1027, 1033], "kossaifi": [1020, 1024, 1025], "thumbnail": 1020, "mldata": [1020, 1028], "pietro": [1020, 1023], "berk": 1020, "macosx": 1020, "xarg": 1020, "bscikit": 1020, "cross_val": 1020, "bcross_val": 1020, "lurk": 1020, "l1_distanc": 1020, "168": 1020, "andi": [1020, 1027], "amit": [1020, 1034, 1035], "salvator": [1020, 1034, 1035], "masecchia": 1020, "schut": 1020, "metaireau": [1020, 1023], "bryan": [1020, 1023, 1029, 1030, 1033], "silverthorn": 1020, "minwoo": 1020, "luca": [1020, 1030, 1031, 1032, 1033], "wiman": 1020, "schl\u00fcter": [1020, 1028], "malet": 1020, "miott": [1020, 1023], "feth": 1020, "arezki": 1020, "yamin": 1020, "notes_neighbor": 1020, "netbsd": 1020, "kamel": 1020, "ibn": 1020, "hassen": 1020, "derouich": 1020, "virgilefritsch": 1020, "example_gaussian_process_plot_gp_regress": 1020, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1020, "tast": 1020, "2x": 1020, "10x": 1020, "200x": 1020, "ann": [1020, 1032, 1034], "laur": 1020, "fouqu": 1020, "ronan": [1020, 1023, 1028], "amicel": [1020, 1023], "osendorf": [1020, 1021], "gmmhmm": [1020, 1021], "latex": 1020, "mlcomp": 1020, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1020, "pybrain": 1020, "262": 1020, "rokem": [1020, 1026], "100x": [1020, 1023], "obsolet": [1020, 1036], "attrselect": 1020, "unmaintain": 1020, "lite": 1020, "filo": [1020, 1023], "mailhot": 1020, "huard": 1020, "dave": [1020, 1027, 1028, 1034, 1036], "morril": 1020, "schofield": 1020, "travi": [1020, 1028], "oliph": 1020, "pearu": 1020, "peterson": [1020, 1022], "0d": 1021, "marchman": [1021, 1022], "hrishikesh": [1021, 1022], "huilgolkar": [1021, 1022], "bastiaan": [1021, 1022], "diego": [1021, 1022], "molla": [1021, 1022], "cunha": [1021, 1022], "almeida": [1021, 1022, 1033], "rolando": [1021, 1022], "espinoza": [1021, 1022], "fuent": [1021, 1022], "beauchamp": [1021, 1024], "longstand": [1021, 1027], "shaun": 1021, "jackman": 1021, "winterman": 1021, "seberg": 1021, "n_atom": 1021, "label_propag": 1021, "learn_rat": 1021, "basegradientboost": 1021, "mean_square_error": 1021, "gmm_": 1021, "eig_tol": 1021, "chunk_siz": 1021, "zero_one_scor": 1021, "aymer": 1021, "masurel": 1021, "syhw": [1021, 1022], "corei": [1021, 1028, 1029], "lynch": [1021, 1027], "shu": [1021, 1024, 1028], "tadej": [1021, 1022], "jane\u017e": [1021, 1022], "caje": 1021, "tiago": [1021, 1025], "nune": 1021, "cow": 1021, "anz": 1021, "jauvin": 1021, "jacqu": [1021, 1023], "kvam": [1021, 1023], "doug": [1021, 1022, 1032], "coleman": [1021, 1022], "dickerson": 1021, "approximateident": 1021, "veronda": 1021, "matti": [1021, 1024, 1025], "lyra": [1021, 1024, 1025], "mikhail": [1021, 1022, 1023, 1026, 1027, 1035, 1036], "korobov": [1021, 1022, 1023, 1026, 1027], "alejandro": [1021, 1026], "weinstein": 1021, "deil": [1021, 1031, 1032], "nizhibitski": 1021, "coelho": [1021, 1023, 1024, 1028], "miroslav": [1021, 1022, 1025], "batchkarov": [1021, 1025], "pavel": [1021, 1029], "bob": [1021, 1027], "dengemann": 1021, "emanuel": 1021, "x006": 1021, "justin": [1022, 1028, 1032], "stochastic_gradi": [1022, 1023, 1029], "crombach": 1022, "sheet": 1022, "jaccard_similarity_scor": [1022, 1024, 1029], "jochen": 1022, "wersd\u00f6rfer": 1022, "sinayev": 1022, "unpleas": 1022, "novic": 1022, "tini": [1022, 1035], "hyperlink": 1022, "luessi": 1022, "philipp": [1022, 1023, 1026, 1035], "gervai": [1022, 1023], "cleverless": 1022, "nosetest": 1022, "compute_import": 1022, "return_model": [1022, 1024], "itergrid": 1022, "tacitli": 1022, "charset_error": 1022, "precompute_gram": 1022, "2224": 1022, "jim": 1022, "holmstr\u00f6m": 1022, "steven": [1022, 1023, 1025, 1027, 1028, 1033, 1035, 1036], "gryze": [1022, 1025], "sergeyf": 1022, "ben": [1022, 1023, 1024, 1027, 1028, 1029, 1032], "speer": 1022, "federico": [1022, 1023, 1028, 1029, 1034], "vaggi": [1022, 1023], "raul": [1022, 1023], "garreta": [1022, 1023], "gei": 1022, "flaxman": [1022, 1024], "denton": 1022, "cockburn": 1022, "dougal": [1022, 1024, 1025, 1027, 1028, 1029, 1030], "sutherland": [1022, 1024, 1025, 1027, 1028, 1029, 1030], "ian": [1022, 1024, 1029, 1030, 1032, 1035, 1036], "ozsvald": 1022, "johann": [1022, 1023, 1028, 1030, 1031, 1034], "sch\u00f6nberger": [1022, 1023], "szabo": [1022, 1023], "roland": [1022, 1023], "imran": [1022, 1023, 1024], "haqu": [1022, 1023, 1024], "karayev": 1022, "jamestwebb": [1022, 1023], "abhijeet": 1022, "kolh": 1022, "velkov": 1022, "fazlul": 1022, "shahriar": 1022, "felix": [1022, 1027, 1028, 1030, 1032, 1033, 1034], "brockherd": 1022, "harikrishnan": 1022, "jack": [1022, 1025, 1033, 1034, 1035, 1036], "hale": [1022, 1034], "jakemick": 1022, "mcdermott": 1022, "zwinck": 1022, "vredevoogd": [1022, 1023], "pati": 1022, "ekman": [1022, 1026], "shubernetskii": 1022, "naoki": [1022, 1032], "orii": 1022, "seamu": 1022, "absher": 1022, "feldman": [1022, 1027, 1028, 1029, 1030], "stefano": 1022, "lattarini": 1022, "steve": [1022, 1024, 1028, 1033, 1035], "koch": [1022, 1028, 1029, 1031, 1032], "sturla": 1022, "molden": 1022, "jarosch": 1022, "nikolai": [1023, 1024, 1025, 1026, 1028, 1029, 1034, 1036], "mayorov": [1023, 1024, 1025, 1026], "msvc": 1023, "mingw": 1023, "resourcewarn": 1023, "calvin": [1023, 1024], "gile": [1023, 1024], "billing": [1023, 1024, 1025], "safe_realloc": 1023, "bradshaw": [1023, 1024, 1027], "pico": [1023, 1024], "restor": [1023, 1028, 1029, 1030, 1031, 1035], "raff": 1023, "__array__": [1023, 1030], "jeffrei": [1023, 1026], "blackburn": [1023, 1026], "danni": [1023, 1024, 1025], "sullivan": [1023, 1024, 1025], "wignal": [1023, 1024, 1030, 1031], "grid_tograph": 1023, "gracefulli": [1023, 1024], "gaussianprocess": 1023, "novak": 1023, "tulloch": [1023, 1024], "wardagglomer": 1023, "wardclust": 1023, "mean_l1_ratio": 1023, "phlypo": 1023, "312": 1023, "bommarito": [1023, 1024], "brook": [1023, 1024, 1032], "osborn": [1023, 1024], "eltermann": 1023, "bwignal": 1023, "ankit": [1023, 1030, 1032, 1034], "agraw": [1023, 1028, 1034, 1035], "carei": [1023, 1024, 1025, 1026, 1027], "ugurthemast": [1023, 1024], "schumach": [1023, 1024, 1025], "baptist": [1023, 1031], "lagard": 1023, "rajat": [1023, 1030], "khanduja": 1023, "pascual": 1023, "ignacio": 1023, "rossi": 1023, "s\u00e4ger": [1023, 1026], "ilambharathi": [1023, 1024], "kanniah": [1023, 1024], "sdenton4": 1023, "alyssa": [1023, 1027], "amo": 1023, "waterland": 1023, "murad": 1023, "maud": 1023, "karol": 1023, "pysniak": 1023, "cgohlk": [1023, 1024], "jacobsen": 1023, "collin": 1023, "kaushik94": 1023, "erwin": 1023, "marsi": 1023, "csytraci": 1023, "lk": 1023, "laurent": [1023, 1024, 1027, 1028, 1035, 1036], "direr": [1023, 1024, 1027, 1028], "shilt": 1023, "yoshiki": [1023, 1026], "v\u00e1zquez": 1023, "yung": [1023, 1026], "siang": 1023, "liau": 1023, "abhishek": [1023, 1024, 1030, 1034, 1036], "thakur": [1023, 1024], "rohit": [1023, 1024, 1028, 1029], "sivaprasad": [1023, 1024], "amormachin": 1023, "oscar": [1023, 1027], "carlsson": 1023, "nanta": 1023, "nardelli": 1023, "jess010": 1023, "kowalski87": 1023, "clegg": 1023, "ralf": [1023, 1026, 1027, 1035, 1036], "gommer": [1023, 1026, 1027, 1035, 1036], "rupesh": 1023, "srivastava": [1023, 1035], "ryan": [1023, 1026, 1028, 1029], "skipper": [1023, 1025, 1026], "seabold": [1023, 1025, 1026], "stefan": [1023, 1024, 1028, 1030], "walt": [1023, 1024, 1028], "riddel": [1023, 1025, 1027], "valentin": [1023, 1025, 1035, 1036], "haenel": 1023, "myer": [1023, 1027], "yoni": 1023, "meshulam": 1023, "yuri": [1023, 1025], "zaytsev": 1023, "adrinjalali": [1023, 1032], "ai8rahim": 1023, "alemagnani": 1023, "chalmerlow": 1023, "dziki": 1023, "dro\u017cd\u017c": 1023, "matrixorz": 1023, "popo": 1023, "samuela": 1023, "fran\u00e7oi": 1023, "boulogn": 1023, "ethan": [1023, 1026], "guilherm": 1023, "trein": 1023, "heuer": 1023, "ivicajov": 1023, "rouli": 1023, "eduardo": [1023, 1025, 1033, 1034], "ari\u00f1o": 1023, "rubia": 1023, "jell": 1023, "zijlstra": 1023, "eddi": 1023, "jansson": [1023, 1035], "ca\u00f1ardo": 1023, "alastuei": 1023, "joseph": [1023, 1024, 1025, 1026, 1032, 1034, 1035], "perla": 1023, "ricardo": [1023, 1033, 1034], "kenta": 1023, "sato": 1023, "medri": 1023, "luce": 1023, "pierron": 1023, "danielweitzenfeld": 1023, "thompson": [1023, 1035, 1036], "brett": [1023, 1025, 1026, 1027, 1028, 1035], "feurer": [1023, 1028], "earl": 1023, "hank": 1023, "orr\u00f9": 1023, "lunt": 1023, "kearn": 1023, "pawe\u0142": [1023, 1027, 1032, 1033], "mandera": 1023, "zambelli": 1023, "staubda": 1023, "dedupl": 1024, "heilman": [1024, 1025], "precompute_dist": [1024, 1031], "lshforest": [1024, 1027], "qiang": 1024, "luo": 1024, "clemen": 1024, "brunner": 1024, "matteo": [1024, 1026, 1034], "visconti": 1024, "oleggio": 1024, "castello": 1024, "linkage_tre": 1024, "jatin": [1024, 1026], "shah": [1024, 1025, 1026, 1032], "saurabh": [1024, 1025, 1026, 1027, 1028, 1032], "jha": [1024, 1030, 1034], "blanchard": [1024, 1025], "michal": [1024, 1027, 1033, 1034], "romaniuk": 1024, "gilmor": 1024, "stapl": 1024, "hedyati": 1024, "antoni": [1024, 1026, 1032, 1035], "parel": 1024, "herv\u00e9": 1024, "bredin": 1024, "hasil": 1024, "sharma": [1024, 1026, 1028, 1029, 1031, 1032, 1034], "ducktyp": 1024, "download_20newsgroup": 1024, "friend": 1024, "cathi": [1024, 1030], "deng": [1024, 1025, 1026], "dawson": 1024, "garret": 1024, "hanna": [1024, 1025, 1031], "wallach": [1024, 1025], "yan": [1024, 1032], "artem": [1024, 1027], "sobolev": 1024, "fit_ovr": 1024, "predict_ovr": 1024, "predict_proba_ovr": 1024, "fit_ovo": 1024, "predict_ovo": 1024, "fit_ecoc": 1024, "predict_ecoc": 1024, "lamond": 1024, "outweigh": 1024, "thresh": 1024, "akshai": [1024, 1027, 1032], "akshayah3": 1024, "aldrian": 1024, "obaja": 1024, "ander": [1024, 1030], "aagaard": 1024, "cranenburgh": 1024, "walker": 1024, "banilo": [1024, 1025], "barmalei": [1024, 1025], "benedikt": 1024, "koehler": 1024, "bhsu": 1024, "bori": [1024, 1032, 1036], "feld": [1024, 1036], "borja": 1024, "ayerdi": 1024, "boyuan": [1024, 1025, 1026], "brent": [1024, 1028, 1029], "pedersen": [1024, 1036], "celeo": 1024, "chebee7i": 1024, "stade": 1024, "schuldt": 1024, "christof": [1024, 1025], "angermuel": [1024, 1025], "daiki": 1024, "aminaka": 1024, "danfrankj": 1024, "dmitrij": 1024, "milajev": 1024, "floydsoft": 1024, "garrett": 1024, "gpassino": 1024, "gwulf": [1024, 1025], "hampu": 1024, "bengtsson": 1024, "harri": [1024, 1026, 1032, 1033], "mavroforaki": [1024, 1026], "helder": [1024, 1033, 1034], "herv": 1024, "hugu": 1024, "salamin": 1024, "ism": 1024, "dlabal": 1024, "javier": 1024, "l\u00f3pez": [1024, 1028, 1029, 1032], "pe\u00f1a": 1024, "jdcaballero": 1024, "jeff": [1024, 1026, 1033, 1034], "hammerbach": 1024, "helmu": 1024, "kaicheng": 1024, "markham": [1024, 1031, 1032], "lagacheri": 1024, "leepei": 1024, "loic": [1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036], "estev": [1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036], "luka": [1024, 1031], "michelbach": 1024, "krell": [1024, 1026], "ku": [1024, 1025], "mateusz": [1024, 1031, 1032], "susik": 1024, "mehdi": [1024, 1033], "cherti": 1024, "mlg": 1024, "montecchio": 1024, "okal": 1024, "billi": 1024, "\u00f3scar": [1024, 1025, 1026, 1027], "n\u00e1jera": [1024, 1025, 1026, 1027], "puggioni": 1024, "pratap": [1024, 1027, 1034], "vardhan": 1024, "pvnguyen": 1024, "queqichao": 1024, "rahiel": 1024, "kasim": 1024, "mason": 1024, "saket": [1024, 1025, 1032], "choudhari": [1024, 1025, 1034, 1036], "sam": [1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035], "nichol": 1024, "sethdandridg": 1024, "sinhrk": [1024, 1025], "snuderl": 1024, "ott": 1024, "tjoa": 1024, "swu": 1024, "zimmer": [1024, 1034], "tejesh95": 1024, "terrycojon": 1024, "delteil": 1024, "toma": 1024, "kazmar": 1024, "trevorstephen": [1024, 1026], "tttthomasssss": 1024, "tzu": 1024, "kuo": 1024, "ugurcaliskan": 1024, "vinayak": [1024, 1025, 1026, 1028, 1029, 1035, 1036], "mehta": [1024, 1025, 1026, 1028, 1029, 1030, 1031, 1035, 1036], "vjacheslav": 1024, "murashkin": 1024, "wadawson": 1024, "x0l": 1024, "6147": 1025, "presort": [1025, 1030], "5857": 1025, "mcculloh": [1025, 1026], "6258": 1025, "giorgio": [1025, 1026, 1027], "patrini": [1025, 1026, 1027], "joe": 1025, "jevnik": 1025, "labelkfold": [1025, 1026], "labelshufflesplit": [1025, 1026], "mcfee": [1025, 1026], "3659": 1025, "4738": 1025, "projectedgradientnmf": 1025, "nls_max_it": 1025, "erick": 1025, "moodi": 1025, "4025": 1025, "mean_shift": [1025, 1028], "martino": 1025, "sorbaro": 1025, "cori": 1025, "konstantin": [1025, 1026, 1027], "shmelkov": 1025, "backlink": 1025, "jaidev": 1025, "deshpand": [1025, 1026], "dictlearn": 1025, "kashif": 1025, "rasul": [1025, 1027, 1028], "galvez": 1025, "sonni": 1025, "hu": [1025, 1028, 1030], "santi": [1025, 1027, 1028], "villalba": [1025, 1028, 1032], "5186": 1025, "stolbunov": 1025, "booster": 1025, "graham": [1025, 1026], "clenaghan": [1025, 1026], "clyde": 1025, "subproblem": 1025, "forestclassifi": 1025, "ankur": [1025, 1036], "ankan": 1025, "henri": [1025, 1026, 1027, 1028, 1030, 1031, 1032, 1034, 1035], "5431": 1025, "buddha": 1025, "prakash": [1025, 1027, 1033], "5182": 1025, "lamb": [1025, 1033], "5282": 1025, "5355": 1025, "5360": 1025, "4478": 1025, "5337": 1025, "4362": 1025, "5495": 1025, "elvi": [1025, 1026, 1027], "dohmatob": [1025, 1026, 1027], "data_min": 1025, "data_max": 1025, "data_rang": 1025, "_learntselectormixin": 1025, "gradientboost": 1025, "metatransfom": 1025, "load_lfw_pair": 1025, "wardagglom": 1025, "residues_": 1025, "indicator_matrix_": 1025, "adithya": 1025, "ganesh": 1025, "akitti": 1025, "alexei": 1025, "grigorev": 1025, "ali": [1025, 1028, 1029, 1032, 1033, 1035, 1036], "baharev": 1025, "ando": 1025, "saaba": 1025, "anish": [1025, 1026], "anthoni": [1025, 1027, 1028], "erling": 1025, "rouvinen": 1025, "rachez": [1025, 1026], "benjaminirv": 1025, "naul": [1025, 1026], "gohlk": 1025, "bourguignat": 1025, "cindi": [1025, 1033], "sridharan": 1025, "kronovet": 1025, "data1010": 1025, "dotson": 1025, "djipei": [1025, 1026], "dmitri": [1025, 1027, 1028, 1029, 1033, 1036], "spikhalskii": 1025, "donn": 1025, "duart": [1025, 1033, 1035], "caro": 1025, "larson": [1025, 1029, 1030, 1032, 1034], "fernando": [1025, 1032], "carrillo": 1025, "eckert": 1025, "zalkow": 1025, "ganiev": [1025, 1026, 1027], "ibraim": [1025, 1026, 1027], "giorgiop": 1025, "gryllo": [1025, 1028], "prokopi": [1025, 1028], "hsuan": 1025, "tien": 1025, "ishank": [1025, 1026, 1027], "gulati": [1025, 1026, 1027], "jeffrey04": [1025, 1026], "jfraj": 1025, "jiali": 1025, "mei": [1025, 1030], "kirkham": [1025, 1026, 1028], "wittenau": 1025, "loyal": 1025, "jungkook": 1025, "park": [1025, 1030, 1032, 1035, 1036], "kamalakerdadi": [1025, 1026], "kyler": 1025, "lilian": [1025, 1026], "besson": [1025, 1026], "tiao": [1025, 1026], "marktab": 1025, "spacek": 1025, "martinbpr": [1025, 1026], "martinosorb": 1025, "maryanmorel": [1025, 1026], "masafumi": 1025, "oyamada": 1025, "krump": 1025, "kolganov": 1025, "mbilling": 1025, "mhg": 1025, "patterson": 1025, "omer": 1025, "katz": [1025, 1032, 1033], "pauli": 1025, "virtanen": 1025, "fischer": [1025, 1026], "pianomania": 1025, "preston": [1025, 1026, 1027], "parri": [1025, 1026, 1027], "rohan": [1025, 1026, 1028, 1029, 1033], "ramanath": 1025, "bansod": [1025, 1026, 1027], "scls19fr": 1025, "saeger": [1025, 1026, 1027], "shivan": 1025, "sornarajah": 1025, "simonpl": 1025, "sseg": 1025, "hoover": [1025, 1026, 1027, 1029], "seguin": 1025, "theodor": 1025, "vasiloudi": 1025, "freita": [1025, 1027, 1028], "pereira": [1025, 1028, 1029], "timothi": [1025, 1033], "hopper": 1025, "tokoroten": 1025, "vstolbunov": 1025, "wangz10": 1025, "yucheng": 1025, "zhauniarovich": 1025, "zac": 1025, "stewart": [1025, 1030, 1033, 1035], "zhai_pro": 1025, "zichen": 1025, "7946": 1026, "8355": 1026, "9010": 1026, "8040": 1026, "9149": 1026, "aman": [1026, 1027, 1028, 1034, 1035], "dalmia": [1026, 1027, 1028], "nate": [1026, 1027, 1033], "guerin": [1026, 1027], "lebedev": [1026, 1027], "utilis": 1026, "6497": 1026, "7724": 1026, "bing": [1026, 1027], "explained_variance_ratio": 1026, "7632": 1026, "jpfrancoia": [1026, 1027], "7676": 1026, "moham": [1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "affan": 1026, "7756": 1026, "7786": 1026, "srivatsan": [1026, 1027, 1030], "7799": 1026, "7490": [1026, 1027], "6282": 1026, "7301": 1026, "6178": 1026, "7680": 1026, "n_iters_": 1026, "7553": 1026, "ekaterina": [1026, 1027, 1028, 1029, 1031, 1036], "krivich": [1026, 1027, 1029], "5874": 1026, "7593": 1026, "7594": 1026, "7660": 1026, "7750": 1026, "7732": 1026, "artsion": 1026, "lieu": [1026, 1027], "grid_scores_": [1026, 1032, 1033], "leaveonelabelout": 1026, "leaveplabelout": 1026, "plural": 1026, "mean_tim": 1026, "std_time": 1026, "3204": 1026, "5291": 1026, "sounder": 1026, "7295": 1026, "5299": 1026, "bravi": 1026, "fouchet": 1026, "calinski_harabaz_scor": [1026, 1028], "harabaz": 1026, "6586": 1026, "4294": 1026, "6667": 1026, "6954": 1026, "unveil": 1026, "yelit": 1026, "basebag": [1026, 1028], "staub": 1026, "5805": 1026, "5251": 1026, "imacul": 1026, "1000x": 1026, "arfa": 1026, "6691": 1026, "6913": 1026, "5762": 1026, "utkarsh": [1026, 1027, 1028, 1029], "upadhyai": [1026, 1027, 1028, 1029], "6846": 1026, "5929": 1026, "podshumok": [1026, 1027], "6173": 1026, "ryad": 1026, "zenin": 1026, "devashish": 1026, "asish": [1026, 1027], "dowl": 1026, "6697": 1026, "ori": 1026, "ziv": 1026, "sear": 1026, "merritt": 1026, "7325": 1026, "7239": 1026, "hong": [1026, 1028, 1032, 1033, 1034, 1036], "guangguo": 1026, "jensen": [1026, 1032], "7419": 1026, "gregori": [1026, 1030, 1031, 1032, 1033], "stupp": [1026, 1027], "bernardo": 1026, "stein": 1026, "sparse_func": [1026, 1032], "incr_mean_variance_axi": [1026, 1032], "7049": 1026, "7152": 1026, "load_boston": [1026, 1028, 1033], "7154": 1026, "manvendra": [1026, 1027], "singh": [1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "5540": 1026, "7248": 1026, "6764": 1026, "wenhua": 1026, "6817": 1026, "6902": 1026, "leonieborn": 1026, "5141": 1026, "4995": 1026, "5012": 1026, "_transform_select": 1026, "7194": 1026, "caio": [1026, 1028, 1030], "oliveira": [1026, 1028, 1030, 1034], "6182": 1026, "6121": 1026, "6472": 1026, "7350": 1026, "russel": [1026, 1027], "smith": [1026, 1027, 1028, 1029, 1030, 1032], "7159": 1026, "yichuan": [1026, 1027], "5460": 1026, "document_clust": 1026, "7353": 1026, "_search": 1026, "_check_param_grid": 1026, "xrang": 1026, "7323": 1026, "viacheslav": 1026, "kovalevskyi": 1026, "7101": 1026, "residual_metr": 1026, "6651": 1026, "reorgan": 1026, "7187": 1026, "7260": 1026, "sebasti\u00e1n": 1026, "vanrel": 1026, "leaveplabelsout": 1026, "6660": 1026, "unprefix": 1026, "7261": 1026, "aditya": [1026, 1028, 1029, 1030, 1034, 1035], "joshi": [1026, 1028, 1034], "loginov": 1026, "minyushkin": 1026, "rudi": 1026, "abadi": [1026, 1027], "saint": 1026, "alexfield": 1026, "alvaro": [1026, 1028], "ulloa": 1026, "alyssaq": 1026, "amlan": 1026, "kar": 1026, "giessel": 1026, "jackson": [1026, 1027, 1029], "murrai": [1026, 1027], "arafat": 1026, "archit": 1026, "asnt": 1026, "b0noi": 1026, "behzad": 1026, "tabibian": 1026, "kratzwald": 1026, "bhargav": 1026, "mangipudi": 1026, "blakeflei": 1026, "brandon": [1026, 1027, 1034, 1035], "carter": [1026, 1027, 1035], "camilo": 1026, "lamu": 1026, "carol": [1026, 1027], "Willing": [1026, 1027], "cass": 1026, "ceshin": 1026, "truong": 1026, "codevig": 1026, "shiebler": 1026, "hnyk": [1026, 1027], "elli": [1026, 1029], "nicholson": [1026, 1027, 1028], "thaler": 1026, "warshaw": 1026, "lasagna": 1026, "deborah": [1026, 1027], "definitelyuncertain": 1026, "didi": [1026, 1027, 1028, 1029], "zev": [1026, 1027, 1028, 1029], "dsquareindia": 1026, "edwinensa": 1026, "elia": 1026, "kuth": 1026, "fabio": 1026, "ticconi": 1026, "fisach": 1026, "donovan": 1026, "ghg": 1026, "giovanni": [1026, 1028], "cherubin": 1026, "lanzani": 1026, "glenn": 1026, "qian": [1026, 1031], "mohr": 1026, "govin": 1026, "vatsan": 1026, "reda": 1026, "gustav": 1026, "m\u00f6rtberg": 1026, "halwai": 1026, "harizo": [1026, 1027], "rajaona": [1026, 1027], "hashcode55": 1026, "hdmetor": 1026, "hobson": 1026, "lane": 1026, "bown": 1026, "igor": [1026, 1027, 1033], "andriushchenko": [1026, 1027], "inki": 1026, "hwang": 1026, "isaac": [1026, 1027, 1029, 1030], "sijaranamu": 1026, "iver": 1026, "jordal": 1026, "jackmartin": 1026, "fiedler": 1026, "routlei": 1026, "zike": 1026, "janna": 1026, "brettingen": 1026, "jarfa": 1026, "laska": 1026, "jblackburn": 1026, "levesqu": 1026, "hintz": 1026, "jeremynixon": 1026, "jeroen": 1026, "jessica": 1026, "jill": 1026, "j\u00eann": 1026, "vie": 1026, "jia": 1026, "jiyuan": 1026, "johannah": 1026, "boersma": 1026, "moeller": 1026, "striebel": [1026, 1027], "joncral": 1026, "jordi": 1026, "munoz": [1026, 1032], "jrfiedler": 1026, "juliankahnert": 1026, "juliathebrav": 1026, "kaichogami": 1026, "lyon": [1026, 1027], "kingjr": 1026, "kjell": 1026, "krishna": [1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035], "kalyan": 1026, "krishnakalyan3": 1026, "kvle": 1026, "putnam": 1026, "ldavid": 1026, "leig": 1026, "leightonzhang": 1026, "leland": [1026, 1027, 1028, 1030, 1031, 1036], "liang": [1026, 1031, 1032], "hsieh": 1026, "lizsz": 1026, "l\u00e9oni": 1026, "born": 1026, "maniteja": [1026, 1027, 1028], "nandana": [1026, 1027, 1028], "marco": [1026, 1028, 1029, 1033, 1034, 1035], "bao": [1026, 1034], "szepieniec": 1026, "madsen": [1026, 1028], "massil": 1026, "matheu": 1026, "duboi": [1026, 1028], "moroz": 1026, "scherer": 1026, "michiaki": 1026, "ariga": 1026, "moussa": 1026, "taifi": 1026, "mrandrewandrad": 1026, "mridul": 1026, "seth": 1026, "nadya": 1026, "naoya": [1026, 1027, 1028, 1029], "kanai": [1026, 1027, 1028], "nickledav": 1026, "nico": [1026, 1033], "ningchi": 1026, "nlathia": 1026, "okbalefthand": 1026, "okhlopkov": [1026, 1027], "pano": 1026, "lourida": 1026, "strickland": 1026, "perrin": 1026, "letelli": 1026, "pestrickland": 1026, "practicalswift": 1026, "qimu": 1026, "zheng": [1026, 1027, 1032], "rachit": [1026, 1032, 1035], "kansal": 1026, "ramana": [1026, 1027], "randi": 1026, "olson": 1026, "lutz": [1026, 1030, 1033], "schucker": 1026, "jain": [1026, 1027, 1028, 1032, 1034, 1035], "ruifeng": [1026, 1027, 1032], "r\u00e9my": 1026, "l\u00e9one": 1026, "saihttam": 1026, "saiw": 1026, "yeung": 1026, "shleifer": [1026, 1027], "sartaj": 1026, "sasank": 1026, "chilamkurthi": 1026, "seal": 1026, "shagun": 1026, "sodhani": 1026, "shanmuga": 1026, "shashank": [1026, 1032], "shekhar": 1026, "shawpan": 1026, "shengxiduan": 1026, "shota": 1026, "shuckle16": 1026, "smedbergm": 1026, "srvanrel": 1026, "leriqu": [1026, 1028], "taranjeet": 1026, "themrmax": [1026, 1027], "hallock": 1026, "moreau": [1026, 1027, 1028, 1029, 1030], "tkammi": 1026, "toastedcornflak": [1026, 1027], "tomdlt": 1026, "toshihiro": [1026, 1027, 1033], "kamishima": [1026, 1027], "tracer0tong": 1026, "hauck": 1026, "vo": [1026, 1034], "varun": [1026, 1027, 1028, 1034, 1035], "jewalikar": 1026, "vikram": [1026, 1035, 1036], "villu": 1026, "ruusmann": 1026, "walter": 1026, "waterponei": [1026, 1027], "wenjian": 1026, "welch": 1026, "wyseguy7": 1026, "xyguo": [1026, 1028], "yanlend": 1026, "yen": [1026, 1027], "yenchenlin": 1026, "yoav": 1026, "zivori": 1026, "10723": [1027, 1028], "9623": 1027, "undocu": 1027, "deleteri": 1027, "9677": 1027, "ashutosh": [1027, 1028, 1030, 1032], "correlation_model": 1027, "regression_model": 1027, "belatedli": 1027, "9717": 1027, "9693": 1027, "steingold": [1027, 1028], "9711": 1027, "goncalo": [1027, 1028], "rodrigu": [1027, 1028, 1033], "9641": 1027, "bourbeau": [1027, 1028, 1029], "9865": 1027, "sachin": [1027, 1028, 1034], "kelkar": [1027, 1028, 1030], "9922": 1027, "charli": [1027, 1028, 1036], "brummitt": [1027, 1028], "9945": 1027, "9830": 1027, "9600": 1027, "kerimov": [1027, 1028], "9593": 1027, "reiichiro": [1027, 1028], "nakano": [1027, 1028], "9604": 1027, "interim": 1027, "9558": 1027, "9847": 1027, "joan": [1027, 1028, 1029, 1030], "massich": [1027, 1028, 1029, 1030], "oli": 1027, "blum": 1027, "9697": 1027, "9750": 1027, "9788": 1027, "9815": 1027, "9802": 1027, "vrishank": [1027, 1028], "bhardwaj": [1027, 1028], "nagarjuna": [1027, 1028], "nathaniel": [1027, 1028, 1030], "diegodlh": [1027, 1028], "jkleint": [1027, 1028], "oliblum90": [1027, 1028], "pasbi": [1027, 1028], "lawson": [1027, 1028, 1029], "nielsenmarkus11": [1027, 1028], "excit": 1027, "cautiou": 1027, "min_impurity_split": 1027, "7823": [1027, 1028], "8446": 1027, "5279": 1027, "8363": 1027, "5295": 1027, "7388": 1027, "userguid": 1027, "7655": 1027, "karan": [1027, 1028, 1029], "desai": [1027, 1029, 1032, 1033, 1035, 1036], "7739": 1027, "gasquez": 1027, "8120": 1027, "neeraj": 1027, "gangwar": 1027, "7548": 1027, "9206": 1027, "7441": 1027, "6101": 1027, "8698": 1027, "7794": 1027, "herilalaina": [1027, 1028, 1030], "rakotoarison": [1027, 1028, 1030], "5036": 1027, "4939": 1027, "esuli": [1027, 1032], "n_skips_": 1027, "7914": 1027, "horrel": 1027, "8591": 1027, "hadrien": [1027, 1030], "7838": 1027, "8835": 1027, "8061": 1027, "cordier": 1027, "6288": 1027, "9145": 1027, "reddi": [1027, 1028, 1029, 1034], "chinthala": 1027, "7721": 1027, "crall": [1027, 1033], "7685": 1027, "tommi": [1027, 1028, 1029], "l\u00f6fstedt": 1027, "9277": 1027, "hongkahjun": 1027, "7089": 1027, "randomized_svd_low_rank": 1027, "9067": 1027, "6181": 1027, "wendling": 1027, "8065": 1027, "lejeun": 1027, "7567": 1027, "jay": 1027, "doepk": 1027, "7573": 1027, "romain": [1027, 1032], "brault": 1027, "5229": 1027, "7990": 1027, "8586": 1027, "7723": 1027, "8028": 1027, "booth": 1027, "8005": 1027, "7863": 1027, "7506": 1027, "5991": 1027, "8845": 1027, "8053": 1027, "8282": 1027, "8117": 1027, "9259": 1027, "8094": 1027, "8335": 1027, "poughon": 1027, "7880": 1027, "karnofski": 1027, "935": 1027, "8931": 1027, "attractador": [1027, 1028], "8002": 1027, "8549": 1027, "zerodivisionerror": [1027, 1030, 1036], "7501": 1027, "dominik": [1027, 1036], "krzeminski": 1027, "7970": 1027, "8006": 1027, "p\u00f6lsterl": [1027, 1030, 1033], "8936": 1027, "8672": 1027, "mike": 1027, "benfield": 1027, "broke": 1027, "8068": 1027, "5732": 1027, "ytrue": 1027, "ypred": 1027, "8087": 1027, "7983": 1027, "8512": 1027, "8251": 1027, "aivision2020": 1027, "5814": 1027, "7849": 1027, "jair": 1027, "montoya": 1027, "martinez": 1027, "randomizedlasso": 1027, "5359": 1027, "9302": 1027, "8160": 1027, "8224": 1027, "gedeck": 1027, "vathsala": [1027, 1028, 1029, 1030], "achar": [1027, 1028, 1029, 1030], "9022": 1027, "mehmet": [1027, 1033], "basbug": 1027, "9024": 1027, "8973": 1027, "paulo": [1027, 1033, 1035], "haddad": 1027, "unmeaning": 1027, "6573": 1027, "quazi": [1027, 1028], "marufur": 1027, "rahman": [1027, 1028, 1032], "baselabelpropag": 1027, "9239": 1027, "andr": [1027, 1034], "ambrosio": 1027, "boechat": 1027, "early_exager": 1027, "assertionerror": 1027, "8992": 1027, "7954": 1027, "foreman": 1027, "9105": 1027, "9108": 1027, "8306": 1027, "7872": 1027, "_c_step": 1027, "3367": 1027, "steward": 1027, "8768": 1027, "detomaso": 1027, "6507": 1027, "jayzed82": 1027, "6126": 1027, "7814": 1027, "7702": 1027, "9219": 1027, "7771": 1027, "ang": 1027, "randomizedlogisticregress": 1027, "8259": 1027, "mandatorili": 1027, "7565": 1027, "8181": 1027, "basesearchcv": [1027, 1028], "8344": 1027, "eriksson": 1027, "7661": 1027, "8295": 1027, "batula": 1027, "dylan": [1027, 1030], "werner": [1027, 1032], "meier": 1027, "7365": 1027, "aleksandr": 1027, "sandrovskii": 1027, "5697": 1027, "stijn": 1027, "tonk": 1027, "6250": 1027, "8093": 1027, "bull": 1027, "9507": 1027, "7356": 1027, "dingwal": 1027, "_check_target": 1027, "8377": 1027, "5211": 1027, "rhinehart": 1027, "8159": 1027, "8198": 1027, "fetch_": 1027, "7944": 1027, "7825": 1027, "kathleen": 1027, "7376": 1027, "7331": 1027, "yangarbit": 1027, "__getstate__": [1027, 1035], "obstruct": 1027, "8316": 1027, "holger": 1027, "8010": 1027, "7986": 1027, "najera": 1027, "9289": 1027, "makedir": 1027, "9284": 1027, "sebastin": [1027, 1028], "alert": 1027, "lgtm": 1027, "9278": 1027, "heli": 1027, "8449": 1027, "9078": 1027, "purport": 1027, "sergul": [1027, 1028, 1031], "aydor": [1027, 1028, 1031], "8922": 1027, "8137": 1027, "8139": 1027, "8995": 1027, "2879": 1027, "7459": 1027, "7812": 1027, "9100": 1027, "8481": 1027, "8174": 1027, "tahar": 1027, "zanouda": 1027, "8854": 1027, "8874": 1027, "7998": 1027, "jiacheng": 1027, "argpartit": 1027, "frombuffer_empti": 1027, "rankdata": 1027, "safe_copi": 1027, "eig": 1027, "fast_dot": 1027, "pinvh": [1027, 1029], "graph_laplacian": 1027, "sparsetool": 1027, "connected_compon": 1027, "check_decision_proba_consist": 1027, "shubham": [1027, 1030], "9019": 1027, "baseensembl": [1027, 1030], "7464": 1027, "rishikesh": 1027, "taehoon": [1027, 1028], "aashil": 1027, "balakumaran": [1027, 1028], "manoharan": [1027, 1028], "petrov": [1027, 1028, 1036], "minghui": [1027, 1028], "jc": [1027, 1028], "alexandercbooth": 1027, "chkoar": 1027, "aarshai": [1027, 1028], "gilliam": 1027, "subramanyam": 1027, "clement": [1027, 1028, 1032], "joudet": [1027, 1028], "robl": 1027, "kati": 1027, "luangkot": 1027, "lacchia": 1027, "akshay0724": 1027, "omtcyfz": 1027, "rickiepark": 1027, "jbdelafoss": 1027, "vivek": [1027, 1028, 1029], "elliott": 1027, "ldirer": 1027, "sid": 1027, "kapur": 1027, "midina": 1027, "mikebenfield": 1027, "sourav": [1027, 1030], "aseem": 1027, "bansal": 1027, "aishwaryark": 1027, "howel": 1027, "dokato": 1027, "kathi": [1027, 1030], "ferria": 1027, "nikita": [1027, 1028, 1030, 1033, 1034, 1035], "basil": 1027, "beirouti": 1027, "possa": 1027, "bednar": 1027, "janin": 1027, "harper": 1027, "artsiom": 1027, "ligo": 1027, "rahn": [1027, 1030], "seanpwilliam": 1027, "julian": [1027, 1028], "kuhlmann": [1027, 1028], "aubert": 1027, "j\u00f6rn": 1027, "hee": [1027, 1030], "shivamgargsya": [1027, 1031, 1033], "kat": 1027, "hempstalk": 1027, "kaushik": [1027, 1034, 1035, 1036], "lakshmikanth": 1027, "kennedi": [1027, 1030], "yap": 1027, "kiril": [1027, 1028, 1030, 1032], "bobyrev": 1027, "imbert": [1027, 1029, 1032, 1034], "lera": 1027, "douillard": 1027, "mainak": 1027, "tobychees": [1027, 1028], "manraj": 1027, "marc": [1027, 1029, 1030, 1036], "meketon": 1027, "marcofalk": 1027, "gilch": 1027, "mehul": 1027, "ahuja": [1027, 1034, 1035], "goetz": [1027, 1028], "dezub": 1027, "baumgartn": 1027, "vibrantabhi19": 1027, "golubin": 1027, "milen": 1027, "paskov": 1027, "antonin": 1027, "carett": 1027, "morikko": 1027, "mrmjauh": 1027, "nalepa": 1027, "namiya": 1027, "narinek": [1027, 1028], "angu": [1027, 1028, 1034], "nicol": 1027, "vavrova": 1027, "nitish": 1027, "pandei": [1027, 1032], "daniil": 1027, "olegovich": 1027, "craze": 1027, "om": 1027, "parmind": 1027, "patrick": [1027, 1028, 1033, 1034, 1037], "carlson": 1027, "ganssl": 1027, "lorek": 1027, "pete": [1027, 1031, 1032], "bachant": 1027, "csizsek": 1027, "jong": 1027, "puneet": 1027, "mathur": [1027, 1029, 1030, 1035, 1036], "quentin": [1027, 1028, 1029, 1036], "hibon": 1027, "1kastner": 1027, "rameshwar": [1027, 1028], "bhaskaran": [1027, 1028], "rebecca": 1027, "bilbro": 1027, "remi": 1027, "rampin": 1027, "pratik": 1027, "agarw": [1027, 1028, 1030], "sailesh": [1027, 1028], "choyal": [1027, 1028], "samson": 1027, "samu\u00ebl": 1027, "weber": 1027, "sarah": [1027, 1029, 1032], "abhyudai": 1027, "sharan": [1027, 1028], "yalburgi": [1027, 1028], "willduan": 1027, "siddharth": [1027, 1031], "almer": 1027, "theofilo": 1027, "papapanagiot": 1027, "alison": 1027, "boucher": 1027, "folkman": 1027, "jung": [1027, 1031, 1035], "shenoi": 1027, "vilhelm": [1027, 1028], "ehrenheim": [1027, 1028], "alan": [1027, 1028, 1031, 1033, 1034], "yee": [1027, 1028], "warut": [1027, 1028], "vijitbenjaronk": [1027, 1028], "yuichi": 1027, "fujikawa": 1027, "affanv14": 1027, "andreh7": 1027, "bradi": 1027, "salz": 1027, "campustrampu": 1027, "agamemnon": [1027, 1028, 1029, 1030, 1032, 1033], "krasouli": [1027, 1028, 1029, 1030, 1032, 1033], "ditenberg": 1027, "elena": 1027, "sharova": 1027, "filipj8": [1027, 1028], "fukatani": 1027, "guiniol": 1027, "guoci": 1027, "hakaa1": [1027, 1028], "xhy": 1027, "jakirkham": [1027, 1028, 1029, 1035, 1036], "jaroslaw": 1027, "jeroko": 1027, "jmontoyam": 1027, "josephsalmon": [1027, 1028, 1029], "jschendel": [1027, 1028], "leereev": 1027, "hahn": [1027, 1028], "mathurinm": [1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "mehak": 1027, "sachdeva": 1027, "mlewis1729": 1027, "mlliou112": 1027, "mthorrel": [1027, 1030], "ndingwal": 1027, "nuff": 1027, "plagre": 1027, "pldtc325": 1027, "breno": [1027, 1028], "olsen": 1027, "alfano": 1027, "burn": [1027, 1028], "polmauri": 1027, "charlton": 1027, "austin": 1027, "chayant": 1027, "t15h": 1027, "chinmaya": 1027, "pancholi": 1027, "danielsen": 1027, "chung": [1027, 1028], "pravarmahajan": [1027, 1028], "dariu": [1027, 1028], "morawiec": [1027, 1028], "haberth\u00fcr": 1027, "heryanto": 1027, "kirkbi": [1027, 1028], "rashchedrin": 1027, "gertrud": 1027, "devansh": [1027, 1028], "dickson": 1027, "baxlei": 1027, "don86": 1027, "klarup": 1027, "elizabeth": [1027, 1029, 1032], "ferriss": 1027, "ellen": 1027, "egli": 1027, "chieh": [1027, 1028], "chou": [1027, 1028], "grzegorz": [1027, 1030], "szpak": [1027, 1030], "zxcvbniu": 1027, "icyblad": 1027, "ilya": 1027, "laughlin": 1027, "iv\u00e1n": [1027, 1033], "vall\u00e9": 1027, "aur\u00e9lien": [1027, 1028, 1029, 1033, 1034], "bellet": [1027, 1028, 1029], "mahapatra": 1027, "bundl": [1028, 1029], "indexerror": [1028, 1029], "11756": [1028, 1029], "14237": [1028, 1029], "schuder": [1028, 1029, 1030], "13903": [1028, 1029], "13124": [1028, 1029], "13772": [1028, 1029], "vya": [1028, 1029, 1030], "12949": 1028, "prabakaran": [1028, 1029, 1032, 1034, 1035], "kumaresshan": [1028, 1029, 1032], "12946": 1028, "tallott": 1028, "13276": 1028, "13005": 1028, "13312": 1028, "11295": 1028, "vacaliuc": [1028, 1029], "13046": 1028, "12360": 1028, "aakanksha": 1028, "13134": 1028, "sandro": [1028, 1035], "casagrand": [1028, 1029], "12881": 1028, "13165": 1028, "13221": 1028, "bertrandhaut": [1028, 1029], "raghunathan": [1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "dowon": [1028, 1029], "aria": [1028, 1029, 1035], "fibins": [1028, 1029], "finn": [1028, 1029], "shea": [1028, 1029], "joaak": [1028, 1029], "m\u00e9hault": [1028, 1029], "kms15": [1028, 1029], "kossori": [1028, 1029], "aruku": [1028, 1029], "lakshya": [1028, 1029, 1030], "ib\u00e1\u00f1ez": [1028, 1029, 1032], "gorelli": [1028, 1029, 1033, 1035], "marcogorelli": [1028, 1029], "mferrari3": [1028, 1029], "micka\u00ebl": [1028, 1029], "schoentgen": [1028, 1029], "pavlo": [1028, 1029], "kalli": [1028, 1029], "glaser": [1028, 1029], "pierretallott": [1028, 1029, 1030], "kapoor": [1028, 1029], "sandrocasagrand": [1028, 1029], "tashai": [1028, 1029], "vishaal": [1028, 1029], "zhuyi": [1028, 1029], "ziji": [1028, 1029], "zj": [1028, 1029], "poh": [1028, 1029], "12704": 1028, "12701": 1028, "12685": 1028, "12699": 1028, "adanhawth": [1028, 1029], "stine": [1028, 1029], "feda": [1028, 1029], "curic": [1028, 1029], "jeremiedbb": [1028, 1029, 1030], "katrin": [1028, 1029], "leinweb": [1028, 1029], "muhammad": [1028, 1029, 1033], "hassaan": [1028, 1029], "rafiqu": [1028, 1029], "paczuski": [1028, 1029], "waterburi": [1028, 1029], "shivam": [1028, 1029, 1030], "kotwalia": [1028, 1029], "12159": 1028, "12105": 1028, "11912": 1028, "12304": 1028, "12339": 1028, "12246": 1028, "10811": 1028, "feldbauer": [1028, 1029, 1030, 1031, 1034], "12441": 1028, "12517": 1028, "12234": 1028, "12165": 1028, "12388": 1028, "connor": [1028, 1033], "tann": [1028, 1033], "12393": 1028, "12122": 1028, "sharedmem": 1028, "12518": 1028, "12481": 1028, "12612": 1028, "12211": 1028, "lisa": [1028, 1029, 1031, 1032, 1034, 1035], "hannel": [1028, 1029], "melissa": 1028, "ferrari": 1028, "12451": 1028, "12171": 1028, "12365": 1028, "_encod": 1028, "12514": 1028, "12522": 1028, "12471": 1028, "marzinotto": [1028, 1029], "12317": 1028, "12338": 1028, "bauk": [1028, 1029], "12625": 1028, "sklearn_site_joblib": 1028, "12350": 1028, "12467": 1028, "unvendor": 1028, "12345": 1028, "navarret": [1028, 1029, 1030], "benjastudio": [1028, 1029], "cheuk": [1028, 1029], "connossor": [1028, 1029], "levinson": [1028, 1029], "kieker": [1028, 1029], "kataev": [1028, 1029], "dillon": [1028, 1029, 1030], "gardner": [1028, 1029], "vukolov": [1028, 1029], "caselli": [1028, 1029], "gauravahlawat": [1028, 1029], "gustavo": [1028, 1029, 1034], "haroldfox": [1028, 1029], "jacklangerman": [1028, 1029], "jacopo": [1028, 1029], "notarstefano": [1028, 1029], "janvanrijn": [1028, 1029], "jdethuren": [1028, 1029], "koen": [1028, 1029], "kushal": [1028, 1029], "chauhan": [1028, 1029, 1035, 1036], "jie": [1028, 1029, 1032], "lili": [1028, 1029], "xiong": [1028, 1029, 1034], "liam": [1028, 1029], "melsyt": [1028, 1029], "nichola": [1028, 1029, 1031], "shebanov": [1028, 1029], "oleksandr": [1028, 1029, 1030, 1031, 1034], "pavlyk": [1028, 1029, 1030, 1031], "hausamann": [1028, 1029], "pulkit": [1028, 1029, 1031], "maloo": [1028, 1029], "batista": [1028, 1029, 1033], "radostin": [1028, 1029], "stoyanov": [1028, 1029], "ramil": [1028, 1029], "nugmanov": [1028, 1029], "rebekah": [1028, 1029, 1030], "roopam": [1028, 1029], "tiernei": [1028, 1029, 1030], "sylvainlan": [1028, 1029, 1030, 1031, 1032], "takingitcasu": [1028, 1029], "tulio": [1028, 1029], "xing": [1028, 1029], "zach": [1028, 1029, 1034], "mountain": 1028, "sorri": 1028, "basemultilayerperceptron": [1028, 1030], "11924": 1028, "macbook": 1028, "9354": 1028, "9372": 1028, "astel": 1028, "10933": 1028, "hansen": 1028, "10471": 1028, "gaurav": [1028, 1029, 1030, 1031, 1032, 1034], "dhingra": [1028, 1029, 1032], "8003": 1028, "jo\u00ebl": 1028, "billaud": 1028, "10059": 1028, "braun": 1028, "9612": 1028, "jonatan": 1028, "samoocha": 1028, "8129": 1028, "margeta": 1028, "k_means_elkan": 1028, "11353": 1028, "11901": 1028, "9875": 1028, "9012": 1028, "11315": 1028, "9041": 1028, "9858": 1028, "artiem": 1028, "krinitsyn": 1028, "9908": 1028, "8617": 1028, "maskani": [1028, 1030, 1031, 1032], "filali": 1028, "konstantino": 1028, "katriopla": 1028, "10774": 1028, "catalfo": 1028, "10795": 1028, "takeshi": [1028, 1033, 1034, 1035], "yoshizawa": 1028, "11082": 1028, "sadhana": 1028, "srinivasan": [1028, 1031], "9731": 1028, "10045": 1028, "fetch_mldata": 1028, "11466": 1028, "6374": 1028, "normalize_compon": [1028, 1030], "11585": 1028, "ivan": [1028, 1029, 1032, 1035], "panico": [1028, 1032], "11420": 1028, "6452": 1028, "walli": 1028, "gauz": 1028, "9492": 1028, "8484": 1028, "9886": 1028, "underflow": [1028, 1033], "10142": 1028, "5956": 1028, "_class_mean": 1028, "_class_cov": 1028, "10898": 1028, "nanxin": 1028, "9832": 1028, "11951": 1028, "r\u00fcdiger": [1028, 1029, 1031], "busch": [1028, 1029, 1031], "9707": 1028, "wan": 1028, "7071": 1028, "9157": 1028, "11176": 1028, "forsyth": 1028, "11542": 1028, "anna": 1028, "9524": 1028, "9723": 1028, "10908": 1028, "10899": 1028, "melderi": 1028, "10101": 1028, "10\u2079": 1028, "9147": 1028, "clae": 1028, "fredrik": 1028, "mannbi": 1028, "10441": 1028, "mayur": 1028, "kulkarni": 1028, "6689": 1028, "nihar": 1028, "sheth": 1028, "11293": 1028, "9656": 1028, "greenhal": 1028, "n_features_to_comput": 1028, "9222": 1028, "hoh": 1028, "9234": 1028, "andrewww": 1028, "8075": 1028, "11211": 1028, "9484": 1028, "dalla": 1028, "card": 1028, "9043": 1028, "10112": 1028, "logistic_regression_path": [1028, 1029], "11724": 1028, "9939": 1028, "westov": 1028, "10998": 1028, "vazelh": [1028, 1029, 1030], "10071": 1028, "10153": 1028, "d\u00f6pfert": 1028, "10095": 1028, "cv_valu": 1028, "10297": 1028, "mabel": [1028, 1032], "10581": 1028, "yacin": 1028, "mazari": 1028, "10687": 1028, "10836": 1028, "aishwarya": 1028, "10397": 1028, "10992": 1028, "11327": 1028, "11905": 1028, "9837": 1028, "10593": 1028, "10610": 1028, "8554": 1028, "9775": 1028, "10827": 1028, "osa": 1028, "8066": 1028, "10587": 1028, "3840": 1028, "niederb\u00fchl": 1028, "9521": 1028, "11124": 1028, "arya": 1028, "11160": 1028, "barkhorn": 1028, "11679": 1028, "pacha": 1028, "10845": 1028, "perez": [1028, 1035], "parra": 1028, "toledano": 1028, "10999": 1028, "memoryerror": [1028, 1032], "11135": 1028, "10377": 1028, "9786": 1028, "10093": 1028, "alexryndin": 1028, "9772": 1028, "9515": 1028, "liddel": 1028, "manh": 1028, "dao": 1028, "9851": 1028, "10280": 1028, "10336": 1028, "haoran": 1028, "basemixtur": [1028, 1029], "10740": 1028, "10869": 1028, "g\u00e9ron": 1028, "9686": 1028, "11310": 1028, "_fit_and_scor": 1028, "11576": 1028, "ronsin": [1028, 1029, 1037], "_run_search": 1028, "9599": 1028, "11006": 1028, "11557": 1028, "boucaud": 1028, "iid": 1028, "9085": 1028, "10677": 1028, "zhdanovich": 1028, "10982": 1028, "juliet": 1028, "lawton": 1028, "10928": 1028, "solutu": 1028, "immensu": 1028, "9257": 1028, "8190": 1028, "alcorn": 1028, "9681": 1028, "mottl": [1028, 1029], "10005": 1028, "10346": 1028, "tobia": [1028, 1033, 1035], "10887": 1028, "11136": 1028, "4394": 1028, "9579": 1028, "kober": 1028, "9655": 1028, "bjerr": 1028, "11556": 1028, "11774": 1028, "9456": 1028, "unexpectedli": 1028, "9304": 1028, "11144": [1028, 1029], "9151": 1028, "10521": 1028, "7668": 1028, "9647": 1028, "10195": 1028, "10192": 1028, "11272": 1028, "11467": 1028, "11505": 1028, "giusepp": [1028, 1029], "costa": [1028, 1033], "10210": 1028, "11520": 1028, "11011": 1028, "11005": 1028, "11308": 1028, "11206": 1028, "11306": 1028, "10437": 1028, "lucija": 1028, "gregov": 1028, "10452": 1028, "10181": 1028, "nirvan": [1028, 1032], "anjirbag": 1028, "9399": 1028, "10913": 1028, "rodrigo": 1028, "agundez": 1028, "10458": 1028, "9816": 1028, "newei": 1028, "11042": 1028, "11235": 1028, "active_features_": 1028, "feature_indices_": 1028, "n_values_": 1028, "9726": 1028, "10829": 1028, "gilberto": 1028, "olimpio": 1028, "10655": 1028, "python2": 1028, "10412": 1028, "jiongyan": 1028, "9497": 1028, "8361": 1028, "neo": 1028, "_criterion": 1028, "classificationcriterion": 1028, "regressioncriterion": 1028, "10325": 1028, "camil": [1028, 1036], "stap": 1028, "basedecisiontre": [1028, 1029, 1032], "10536": 1028, "ohayon": [1028, 1029, 1036], "11464": 1028, "stott": 1028, "10663": 1028, "10229": 1028, "11553": 1028, "10881": 1028, "sevin": 1028, "ridge_regress": [1028, 1029, 1035], "10306": 1028, "siebert": 1028, "11741": 1028, "11166": 1028, "pypy3": 1028, "v5": 1028, "11010": 1028, "lami": 1028, "11596": 1028, "marcu": 1028, "voss": 1028, "9569": 1028, "12462": 1028, "zachariah": 1028, "10474": 1028, "10500": 1028, "9701": 1028, "9378": 1028, "check_set_param": 1028, "7738": 1028, "alvin": 1028, "chiang": 1028, "8102": 1028, "ankita": 1028, "sinha": 1028, "check_methods_subset_invari": [1028, 1034], "10428": 1028, "check_sample_weights_pandas_seri": 1028, "11558": 1028, "211217613": 1028, "absolutelynowarranti": 1028, "richi": 1028, "halford": [1028, 1035, 1036], "adelr": 1028, "adityadaflapurkar": 1028, "aidan": 1028, "fitzgerald": 1028, "aishgrt1": 1028, "akash": 1028, "shivram": 1028, "lenail": [1028, 1032], "egg": 1028, "diaz": 1028, "amanda": [1028, 1031, 1032, 1033, 1034], "aniruddha": 1028, "annaayzenshtat": 1028, "antonio": [1028, 1030], "quinonez": 1028, "anubhav": 1028, "marwaha": 1028, "arik": 1028, "pamnani": 1028, "ozga": 1028, "arunava": 1028, "geron": [1028, 1033, 1034], "ayush": [1028, 1033], "bangda": 1028, "bastian": 1028, "venthur": 1028, "benn": 1028, "koonc": 1028, "cclauss": 1028, "chadi": 1028, "kamar": 1028, "holdgraf": 1028, "hirsch": 1028, "hogan": 1028, "cnx": 1028, "cwitt": 1028, "ferreira": [1028, 1033, 1034], "gomez": [1028, 1035], "klevebr": 1028, "shwed": 1028, "mohn": [1028, 1032], "danil": 1028, "baibak": [1028, 1029], "beach": 1028, "pickup": 1028, "derek": 1028, "niederhut": [1028, 1030], "dilutedsauc": 1028, "dlovel": 1028, "dor": 1028, "dougla": 1028, "duhaim": 1028, "tuzova": 1028, "eunji": 1028, "farahsae": 1028, "raimundo": 1028, "fenx": 1028, "frankhui": 1028, "franz": 1028, "wompner": 1028, "freija": 1028, "descamp": 1028, "frsi": 1028, "calvo": [1028, 1029], "georgi": [1028, 1031], "peev": [1028, 1031], "gkevinyen5418": 1028, "vermeil": 1028, "hongh": 1028, "hossein": [1028, 1029, 1030], "pourbozorg": [1028, 1029, 1030], "hristo": [1028, 1035], "hunan": 1028, "rostomyan": 1028, "iampat": 1028, "jaewon": 1028, "malcolm": 1028, "jami": 1028, "wolosonovich": 1028, "jeb": 1028, "bearer": 1028, "jinkun": 1028, "jjabl": 1028, "johnstott": 1028, "jotasi": 1028, "julietcl": 1028, "shenk": 1028, "karl": 1028, "kasper": 1028, "primdal": 1028, "lauritzen": 1028, "ksemb": 1028, "kuai": [1028, 1029], "kyeongpil": 1028, "kang": [1028, 1030], "kye": 1028, "kyledrogo": 1028, "l\u00e9o": 1028, "liutong": 1028, "lizao": 1028, "lkjcalc": 1028, "louib": [1028, 1029], "luciano": [1028, 1035], "luke": 1028, "persola": 1028, "markiwanchyshyn": 1028, "marsgui": 1028, "gubri": [1028, 1029], "koko": [1028, 1034, 1035], "copeland": [1028, 1029], "meghann": [1028, 1030], "minh": 1028, "jamaoui": [1028, 1029, 1032], "mohammad": [1028, 1029], "shahebaz": 1028, "muayyad": 1028, "alsadi": 1028, "nabarun": 1028, "pal": [1028, 1034], "narendran": 1028, "santhanam": 1028, "suh": 1028, "eng": 1028, "av": 1028, "nicolau": 1028, "werneck": 1028, "titov": [1028, 1030, 1033, 1034], "nilesh": 1028, "kevlani": 1028, "notmatthancock": [1028, 1030], "nzw": 1028, "oren": 1028, "milman": 1028, "osaid": 1028, "rehman": 1028, "nasir": 1028, "fernand": [1028, 1034, 1035], "olden": 1028, "pierreablin": 1028, "pietruh": 1028, "pinaki": 1028, "nath": 1028, "chowdhuri": [1028, 1034], "piotr": [1028, 1029], "szyma\u0144ski": [1028, 1029], "pradeep": [1028, 1029], "raamana": [1028, 1029], "pravar": 1028, "mahajan": [1028, 1030], "qingi": 1028, "rajendra": 1028, "arora": [1028, 1035], "rankylau": 1028, "kosobrodov": 1028, "rragundez": 1028, "sagnik": 1028, "bhattacharya": 1028, "radhakrishnan": 1028, "saqib": 1028, "nizam": 1028, "shamsi": 1028, "satish": 1028, "gigant": [1028, 1030, 1035, 1036], "flennerhag": 1028, "sebastien": 1028, "shalil": 1028, "awalei": 1028, "shangwu": [1028, 1029], "sharad": 1028, "vijalapuram": 1028, "shenhanc78": 1028, "rastogi": 1028, "siftikha": 1028, "sinclert": 1028, "p\u00e9rez": 1028, "solutusimmensu": 1028, "somya": 1028, "anand": [1028, 1032], "srajan": 1028, "paliw": 1028, "sriharsha": [1028, 1029], "hatwar": [1028, 1029], "mcdowel": 1028, "syonekura": 1028, "takanori": 1028, "hayashi": 1028, "tarcusx": 1028, "theriley106": 1028, "heavei": 1028, "augspurg": [1028, 1030], "trishnendu": 1028, "ghorai": 1028, "twosigmajab": 1028, "umar": [1028, 1029], "farouk": [1028, 1029], "urvang": [1028, 1030], "patel": [1028, 1030, 1031, 1032, 1034], "vadim": [1028, 1032, 1033], "markovtsev": 1028, "vinit": 1028, "vinod": 1028, "viraj": 1028, "mavani": 1028, "navkal": 1028, "vqean3": [1028, 1029], "vufg": 1028, "wallygauz": 1028, "wdevazelh": 1028, "barnett": 1028, "rosenfeld": 1028, "yime": 1028, "ymazari": 1028, "yufeng": 1028, "griffith": [1028, 1029], "z\u00e9": 1028, "vin\u00edciu": 1028, "zhenq": 1028, "zhiqe": 1028, "xiao": [1028, 1030, 1033, 1034, 1035, 1036, 1037], "couldn": [1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "12955": 1029, "klopfer": 1029, "14197": 1029, "14024": 1029, "nicolashug": 1029, "13974": 1029, "hoang": [1029, 1030], "fhoang7": 1029, "14393": 1029, "guillem": [1029, 1030, 1035], "subi": [1029, 1030, 1035], "14087": 1029, "14067": 1029, "stalei": [1029, 1030], "14092": 1029, "14053": 1029, "13947": 1029, "instanci": 1029, "13910": 1029, "13894": 1029, "myatt": [1029, 1030], "min_max_axi": 1029, "13741": 1029, "roddi": [1029, 1030], "macsween": [1029, 1030], "14309": 1029, "13864": 1029, "paresh": [1029, 1030], "13877": 1029, "_sag": 1029, "sag_solv": 1029, "3591": 1029, "13317": 1029, "13157": 1029, "13086": 1029, "cole": 1029, "13485": 1029, "assia": 1029, "benbihi": 1029, "13651": 1029, "reloc": 1029, "13486": 1029, "13427": 1029, "couvreur": [1029, 1030], "9069": 1029, "13835": 1029, "10727": 1029, "wood": 1029, "13250": 1029, "13241": 1029, "12143": 1029, "11650": 1029, "non_negative_factor": [1029, 1031, 1032, 1033, 1037], "12988": 1029, "8769": 1029, "11000": 1029, "thibault": 1029, "sejourn": 1029, "changedbehaviourwarn": 1029, "11526": 1029, "6848": 1029, "glemaitr": [1029, 1030, 1032], "11727": 1029, "13266": 1029, "13545": 1029, "sorro": 1029, "12807": 1029, "12513": 1029, "12543": 1029, "storch": 1029, "13260": 1029, "13283": 1029, "13524": 1029, "13174": 1029, "13496": 1029, "13620": 1029, "12436": 1029, "12983": 1029, "13251": 1029, "joshuakennethjon": 1029, "12715": 1029, "13164": 1029, "12834": 1029, "leastsquareserror": 1029, "update_terminal_region": 1029, "6463": 1029, "movelikeriv": 1029, "13193": 1029, "12599": 1029, "13779": 1029, "13780": 1029, "12916": 1029, "13641": 1029, "8478": 1029, "12177": 1029, "12583": 1029, "13601": 1029, "danylo": 1029, "densif": 1029, "13240": 1029, "bartosz": 1029, "13562": 1029, "11646": 1029, "11699": 1029, "make_dataset": 1029, "13336": 1029, "toleranbc": 1029, "11754": 1029, "13397": 1029, "fagan": 1029, "12174": 1029, "12972": 1029, "lucio": 1029, "fernandez": 1029, "arjona": 1029, "coeffeci": 1029, "13279": 1029, "13328": 1029, "13389": 1029, "basesgdclassifi": 1029, "13422": 1029, "cl\u00e9ment": [1029, 1033, 1035], "doumouro": 1029, "unhandl": 1029, "13363": 1029, "12821": 1029, "13350": 1029, "j\u00e9r\u00f4me": [1029, 1030, 1031], "dock\u00e8": [1029, 1030, 1031], "9907": 1029, "12232": 1029, "sangeeth": 1029, "11179": 1029, "13151": 1029, "12568": 1029, "8216": 1029, "romuald": 1029, "menuet": 1029, "12732": 1029, "12334": 1029, "13607": 1029, "12855": 1029, "pawel": 1029, "sendyk": 1029, "13628": 1029, "13447": 1029, "10580": 1029, "sandra": [1029, 1035], "mitrov": 1029, "13554": 1029, "celelibi": 1029, "13142": 1029, "11354": 1029, "12613": 1029, "12669": 1029, "torrella": [1029, 1030, 1036], "12861": 1029, "8773": 1029, "13366": 1029, "fournier": 1029, "10440": 1029, "12222": 1029, "10058": 1029, "chiotelli": 1029, "12279": 1029, "12582": 1029, "my_pipelin": 1029, "2568": 1029, "make_": 1029, "11364": 1029, "baze": 1029, "petrushev": 1029, "__len__": 1029, "13439": 1029, "12908": 1029, "drew": 1029, "13253": 1029, "12116": 1029, "12197": 1029, "12251": 1029, "float16": 1029, "13007": 1029, "raffaello": 1029, "baluyot": 1029, "13333": 1029, "13459": 1029, "hunter": 1029, "mcgushion": 1029, "8508": 1029, "6261": 1029, "vettigli": 1029, "justglow": 1029, "12300": 1029, "11458": 1029, "mitar": 1029, "milutinov": 1029, "12344": 1029, "13549": 1029, "warn_on_dtyp": 1029, "check_pairwise_arrai": 1029, "13382": 1029, "prathmesh": 1029, "saval": 1029, "11705": 1029, "11973": 1029, "our_rand_r": 1029, "madhura": [1029, 1031, 1032, 1035, 1036], "parikh": [1029, 1034, 1035, 1036], "13531": 1029, "check_fit_idempot": 1029, "alberto": [1029, 1033, 1034], "torr": 1029, "amourav": 1029, "assiaben": 1029, "micha\u0142owski": 1029, "brentfagan": 1029, "chenal": [1029, 1030, 1032], "choe": 1029, "drewmjohnston": 1029, "dror": 1029, "atariah": 1029, "esvhd": 1029, "falak": 1029, "gandenberg": 1029, "luqi": 1029, "jf": 1029, "kulbear": 1029, "leandro": [1029, 1033], "hermida": [1029, 1033], "luk": 1029, "manimaran": [1029, 1031, 1032, 1033, 1034], "gaido": 1029, "marinelm": 1029, "masstran": 1029, "roeschk": 1029, "aftab": 1029, "abdela": 1029, "ibraheem": 1029, "mwestt": 1029, "iijima": 1029, "oresti": 1029, "osman": [1029, 1035], "flanagan": [1029, 1030], "soriano": 1029, "peai": 1029, "pim": 1029, "haan": 1029, "raf": 1029, "rajdeep": 1029, "dua": 1029, "ra\u00fal": 1029, "garc\u00eda": [1029, 1030, 1035], "lekhwani": 1029, "varma": 1029, "shiyu": 1029, "duan": [1029, 1031], "smari": [1029, 1030, 1031], "st\u00e9phane": [1029, 1030, 1034, 1035], "surgan12": 1029, "thibsej": 1029, "xhan": 1029, "xinyuliu12": 1029, "zayd": 1029, "hammoudeh": 1029, "16397": [1030, 1031], "16500": 1030, "16505": 1030, "16076": 1030, "shack": [1030, 1031, 1032], "15930": 1030, "inder128": 1030, "15810": 1030, "15898": 1030, "gargsya": 1030, "15933": 1030, "15760": 1030, "15888": 1030, "15936": 1030, "dizietasahi": 1030, "15879": 1030, "bibhash": [1030, 1031], "chandra": [1030, 1031, 1034], "mitra": [1030, 1031, 1035], "15937": 1030, "blyston": [1030, 1031], "15863": 1030, "abstractmethod": 1030, "_check_x": 1030, "basenb": 1030, "15996": 1030, "brigitta": [1030, 1031, 1032, 1036], "sip\u0151cz": [1030, 1031, 1032, 1036], "15751": 1030, "tirth": [1030, 1031], "15868": 1030, "nikla": [1030, 1031], "smedemark": 1030, "marguli": 1030, "15797": 1030, "15947": 1030, "revamp": 1030, "14849": 1030, "_name_estim": 1030, "_gb": 1030, "facto": 1030, "_birch": 1030, "9250": 1030, "12927": 1030, "deprecationwarn": 1030, "interfer": 1030, "hinder": 1030, "15080": 1030, "14464": 1030, "13575": 1030, "10482": 1030, "13726": 1030, "shuzh": 1030, "9288": 1030, "15057": 1030, "korolev": 1030, "15120": 1030, "7943": 1030, "12303": 1030, "14510": 1030, "14890": 1030, "miguel": 1030, "cabrera": 1030, "14544": 1030, "15304": 1030, "jaim": 1030, "ferrando": 1030, "huerta": 1030, "12068": 1030, "12145": 1030, "13609": 1030, "camila": 1030, "williamson": 1030, "15661": 1030, "15160": 1030, "14259": 1030, "14764": 1030, "14740": 1030, "st\u00e9phan": 1030, "tulken": 1030, "14623": 1030, "sarra": 1030, "habchi": 1030, "15257": 1030, "willocx": 1030, "12650": 1030, "13960": 1030, "multiouput": 1030, "14908": 1030, "martina": [1030, 1032], "vila": [1030, 1032], "15382": 1030, "14933": 1030, "15138": 1030, "cusick": 1030, "14406": 1030, "14012": 1030, "faouzi": [1030, 1031], "13769": 1030, "14194": 1030, "least_absolute_devi": [1030, 1032, 1033], "13896": 1030, "13933": 1030, "14710": 1030, "categorical_crossentropi": [1030, 1034], "14869": 1030, "14682": 1030, "hancock": 1030, "5963": 1030, "pablo": [1030, 1033, 1034], "dubou": 1030, "14287": 1030, "15375": 1030, "14305": 1030, "14114": 1030, "15084": 1030, "14294": 1030, "14907": 1030, "14602": 1030, "chawla": 1030, "vectorizermixin": 1030, "14430": 1030, "strip_accents_unicod": 1030, "15100": 1030, "gradi": 1030, "overflowerror": 1030, "15463": 1030, "norvan": 1030, "sahin": 1030, "14520": 1030, "11635": 1030, "alec": 1030, "13704": 1030, "15557": 1030, "14378": 1030, "masashi": [1030, 1032], "shibata": 1030, "ashim": 1030, "bhattarai": 1030, "15010": 1030, "skip_comput": 1030, "13773": 1030, "14356": 1030, "15393": 1030, "venkatachalam": [1030, 1031, 1032, 1033, 1034], "14646": 1030, "14028": 1030, "15429": 1030, "14706": 1030, "14108": 1030, "14170": 1030, "14296": 1030, "13618": 1030, "13995": 1030, "14458": 1030, "14591": 1030, "14864": 1030, "15044": 1030, "15086": 1030, "15038": 1030, "15082": 1030, "13213": 1030, "14647": 1030, "linalgerror": 1030, "13393": 1030, "13707": 1030, "training_data_": 1030, "14357": 1030, "14900": 1030, "socastro": [1030, 1036], "9951": 1030, "14936": 1030, "15083": 1030, "12789": 1030, "15274": 1030, "13938": 1030, "15049": 1030, "toccac": 1030, "ptocca": 1030, "13231": 1030, "dong": 1030, "13467": 1030, "14595": 1030, "14865": 1030, "l\u00e9onard": [1030, 1035], "binet": [1030, 1035], "14732": 1030, "14417": 1030, "15625": 1030, "12258": 1030, "14898": 1030, "matcovici": 1030, "14593": 1030, "reboul": 1030, "14549": 1030, "14704": 1030, "15096": 1030, "14629": 1030, "15488": 1030, "15490": 1030, "12569": 1030, "bicker": 1030, "9597": 1030, "wenbo": [1030, 1032], "zhao": [1030, 1032, 1033, 1034, 1035], "14336": 1030, "dexter": 1030, "9274": 1030, "perri": 1030, "13806": 1030, "ana\u00ebl": 1030, "beaugnon": 1030, "15119": 1030, "15053": 1030, "13290": 1030, "13987": 1030, "_pairwis": [1030, 1032], "13925": 1030, "robson": 1030, "15524": 1030, "xun": [1030, 1032], "12557": 1030, "14286": 1030, "15099": 1030, "baselibsvm": 1030, "_sparse_fit": 1030, "14894": 1030, "danna": 1030, "naser": 1030, "12887": 1030, "15028": 1030, "guan": 1030, "14381": 1030, "11232": 1030, "sievert": 1030, "10815": 1030, "14035": 1030, "14475": 1030, "14538": 1030, "14872": 1030, "upcast": [1030, 1034], "15094": 1030, "choose_check_classifiers_label": 1030, "enforce_estimator_tags_i": 1030, "mock": 1030, "mockdatafram": 1030, "checkingclassifi": 1030, "newton_cg": 1030, "random_choice_csc": 1030, "fast_dict": 1030, "parallel_help": 1030, "14902": 1030, "14971": 1030, "nep": 1030, "14702": 1030, "13013": 1030, "13875": 1030, "14680": 1030, "check_classifier_multioutput": 1030, "check_regressor_multioutput": 1030, "13392": 1030, "rok": 1030, "mihevc": 1030, "check_transformer_data_not_an_arrai": 1030, "mro": [1030, 1031], "14884": 1030, "alphonsu": 1030, "abbi": [1030, 1031], "popa": [1030, 1031], "abdur": 1030, "rahmaan": 1030, "janhang": 1030, "abenbihi": 1030, "abhinav": [1030, 1033], "sagar": 1030, "jana": 1030, "lagat": 1030, "alessandro": [1030, 1032, 1035], "surac": 1030, "siqueira": 1030, "alexgoryainov": 1030, "itk": [1030, 1031, 1032], "alexshack": [1030, 1031, 1032], "akinkunl": 1030, "kaseorg": 1030, "maldonado": [1030, 1033], "angela": [1030, 1031, 1035], "ambroz": [1030, 1031], "anisha": 1030, "keshavan": 1030, "gutierrez": 1030, "anuja": 1030, "archana": [1030, 1032], "alva": 1030, "arnaudstiegl": 1030, "arpanchowdhri": 1030, "ashimb9": 1030, "ayomid": 1030, "bamidel": 1030, "baran": 1030, "buluttekin": 1030, "barrycg": 1030, "bill": [1030, 1031], "mill": 1030, "biswadip": 1030, "mandal": 1030, "blackd0t": 1030, "barklei": 1030, "c56poni": 1030, "camilaagw": 1030, "cartman_nabana": 1030, "catajara": 1030, "cgsavard": [1030, 1031], "vesteghem": 1030, "dakota": 1030, "grusak": 1030, "datenbergwerk": 1030, "dormagen": 1030, "deeplook": 1030, "drgfreeman": 1030, "cashman": 1030, "edvardlindelof": 1030, "ndirangu": [1030, 1034], "eunseop": 1030, "jeong": 1030, "fanni": 1030, "federicopisanu": 1030, "divo": 1030, "flaviomorelli": 1030, "francidona": 1030, "franco": 1030, "luqu": 1030, "freder": 1030, "haas": 1030, "g0g0gadget": 1030, "altai": 1030, "vale": 1030, "rio": [1030, 1032, 1033, 1034], "ganevgv": 1030, "gdex1": 1030, "getgaurav2": 1030, "gideon": 1030, "sonoiya": 1030, "gpapadok": [1030, 1034], "mogavero": 1030, "h4dr1en": 1030, "hadshirt": 1030, "hailei": [1030, 1031], "nguyen": [1030, 1031, 1034, 1035], "hannah": [1030, 1032, 1034], "bruce": [1030, 1031], "macdonald": [1030, 1031], "honglu": 1030, "ingrid": 1030, "spielman": 1030, "a16": [1030, 1031], "jaehong": 1030, "jai": [1030, 1034], "jeromedock": 1030, "jesper": 1030, "dramsch": 1030, "joanna": 1030, "ortiz": [1030, 1036], "kanika": 1030, "sabharw": 1030, "katarina": [1030, 1032], "slama": [1030, 1032], "kellycarmodi": 1030, "eth": 1030, "kensuk": 1030, "arai": 1030, "kesshi": [1030, 1031], "kevad": 1030, "lofti": [1030, 1031], "winata": [1030, 1032], "sheng": 1030, "dolmatov": 1030, "kirthi": 1030, "shankar": 1030, "sivamani": 1030, "katyal": 1030, "lakshmi": 1030, "krishnan": 1030, "lalliacqua": [1030, 1033], "lbfin": 1030, "loopym": 1030, "lostcoast": 1030, "huynh": [1030, 1032], "lrjball": [1030, 1031], "roeder": 1030, "maggiecheg": [1030, 1034], "maithreyi": 1030, "venkatesh": 1030, "maltimor": 1030, "maocx": 1030, "douriez": [1030, 1031], "oywa": 1030, "aladago": 1030, "mbillingr": 1030, "clare": 1030, "micah": 1030, "miguelbarao": 1030, "mina": [1030, 1031], "naghshhnejad": [1030, 1031], "motmoti": 1030, "mschaffenroth": 1030, "natasha": 1030, "nezar": 1030, "nidhin": 1030, "pattaniyil": 1030, "nishan": 1030, "mann": 1030, "nitya": 1030, "mandyam": 1030, "novaya": [1030, 1033], "nxorabl": 1030, "oleg": 1030, "stikhin": 1030, "saleem": 1030, "panpiort8": [1030, 1032], "paula": [1030, 1031], "poorna": [1030, 1032], "pspachtholz": [1030, 1031, 1032], "qdeffens": [1030, 1033], "garg": [1030, 1031], "rapha\u00ebl": 1030, "bournhonesqu": 1030, "reza": 1030, "gharibi": 1030, "payn": 1030, "rlm": 1030, "juergen": [1030, 1035], "sanjabi": 1030, "ruchitagard": 1030, "ruth": 1030, "waithera": 1030, "sackei": 1030, "samesh": [1030, 1031], "lakhotia": [1030, 1031], "sewook": 1030, "dare": 1030, "shreya": 1030, "simoncw": 1030, "smujjiga": 1030, "s\u00f6nke": 1030, "behrend": 1030, "soumirai": 1030, "steinfurt": [1030, 1032], "cowlei": 1030, "th0rwa": [1030, 1031], "theoptip": [1030, 1031], "theotheo": 1030, "thierno": 1030, "ibrahima": 1030, "diop": 1030, "schmitt": [1030, 1031], "tilen": 1030, "kusterl": 1030, "timsaur": 1030, "tola": 1030, "topisan": 1030, "ttang131": 1030, "veerlosar": 1030, "luzgin": 1030, "jeanselm": 1030, "lostanlen": 1030, "vnherdeiro": 1030, "wendi": 1030, "willdarnel": 1030, "wolframalpha": 1030, "xcjason": 1030, "martian": 1030, "xsat": 1030, "yinglr": 1030, "yokasr": 1030, "maxin": [1030, 1031], "yulia": 1030, "zamrii": 1030, "feng": [1030, 1032, 1033, 1034], "17959": 1031, "17848": 1031, "17742": 1031, "17995": 1031, "thomaz": 1031, "santana": [1031, 1034], "dsouza": [1031, 1032, 1033, 1034], "17433": 1031, "17985": 1031, "multinomialdevi": 1031, "logloss": 1031, "17694": 1031, "rempfler": 1031, "tsutomu": 1031, "kusanagi": [1031, 1033], "17357": 1031, "18016": 1031, "x_copi": 1031, "17914": 1031, "15730": 1031, "forrest": [1031, 1032], "17309": 1031, "swier": [1031, 1032], "heer": 1031, "17812": 1031, "bruno": [1031, 1032, 1033], "idl": 1031, "17210": 1031, "17235": 1031, "17204": 1031, "changed_onli": 1031, "17205": 1031, "15005": [1031, 1033], "slep009": [1031, 1033, 1034], "estimator_samples_": 1031, "16149": 1031, "11950": 1031, "11514": 1031, "16075": 1031, "16484": 1031, "16257": 1031, "simona": [1031, 1032, 1033], "maggio": [1031, 1032, 1033], "16801": 1031, "rcwoolston": 1031, "16431": 1031, "14048": 1031, "15963": 1031, "16084": 1031, "15950": 1031, "stephani": 1031, "15980": 1031, "wconnel": 1031, "15709": 1031, "15707": 1031, "maciej": 1031, "mikulski": 1031, "16006": 1031, "rushabh": 1031, "vasani": 1031, "streamhandl": 1031, "logger": 1031, "handler": 1031, "16451": 1031, "16280": 1031, "16837": 1031, "wornbb": 1031, "15669": 1031, "chaitanya": 1031, "16224": 1031, "schwetlick": [1031, 1032], "gelavizh": 1031, "ahmadi": 1031, "marija": [1031, 1032], "vlajic": [1031, 1032], "wheeler": [1031, 1032], "16841": 1031, "16655": 1031, "16718": 1031, "miotto": 1031, "16981": 1031, "g\u00f3rski": [1031, 1032], "14696": 1031, "14516": 1031, "15582": 1031, "16069": 1031, "bail": 1031, "16183": 1031, "16182": 1031, "santhosh": 1031, "16437": 1031, "hwan": 1031, "cho": 1031, "16539": 1031, "deros": 1031, "16692": 1031, "16663": 1031, "15834": 1031, "santiago": 1031, "mola": 1031, "16103": 1031, "divyaprabha": 1031, "selectormixin": 1031, "16132": 1031, "trimeta": 1031, "15503": 1031, "15782": 1031, "plgreenliru": 1031, "16403": 1031, "narendra": 1031, "mukherje": 1031, "16508": 1031, "15864": 1031, "14300": 1031, "15436": 1031, "15652": 1031, "15179": 1031, "angelaambroz": 1031, "15773": 1031, "15655": 1031, "14848": 1031, "absgrad": 1031, "_newton_cg": 1031, "16266": 1031, "standard_coef_": 1031, "standard_intercept_": 1031, "average_coef_": 1031, "average_intercept_": 1031, "16261": 1031, "brandt": 1031, "16849": 1031, "14264": 1031, "17021": 1031, "16323": 1031, "16362": 1031, "16442": 1031, "parson": [1031, 1033], "rick": 1031, "mackenbach": 1031, "16993": 1031, "emit": 1031, "15622": 1031, "mors": 1031, "15918": 1031, "kubin": 1031, "fit_grid_point": 1031, "16401": 1031, "pratama": 1031, "sutiono": 1031, "15953": 1031, "15959": 1031, "16111": 1031, "16090": 1031, "jayaratn": [1031, 1032, 1035, 1036], "14075": 1031, "meyer89": 1031, "16117": 1031, "15785": 1031, "16245": 1031, "16585": 1031, "15762": 1031, "16466": 1031, "16632": 1031, "maura": 1031, "pintor": 1031, "battista": 1031, "biggio": 1031, "15946": 1031, "ngshya": 1031, "32767": 1031, "mersenn": 1031, "twister": 1031, "31bit": 1031, "63bit": 1031, "crude": 1031, "postprocessor": 1031, "lemir": 1031, "13511": 1031, "kennel": 1031, "11296": 1031, "15558": 1031, "15806": 1031, "16331": 1031, "batiss": 1031, "15926": 1031, "16021": 1031, "sparsearrai": 1031, "16728": 1031, "uint": 1031, "17032": 1031, "_safe_tag": 1031, "16950": 1031, "15380": 1031, "acitiv": 1031, "16726": 1031, "16112": 1031, "16622": 1031, "17061": 1031, "aleksandra": 1031, "kocot": 1031, "alonso": [1031, 1033], "allend": [1031, 1033], "ana": [1031, 1033], "casado": 1031, "ankit810": 1031, "arunav": 1031, "konwar": 1031, "maingret": 1031, "beier": 1031, "berni": 1031, "bharathi": 1031, "brigi": [1031, 1032], "castachick": 1031, "castor": 1031, "corri": 1031, "bartelheim": 1031, "dani\u00ebl": 1031, "gelder": 1031, "daphn": 1031, "breuer": 1031, "cort": [1031, 1032, 1035, 1036], "dbauer9": 1031, "borovikova": 1031, "eln": 1031, "emili": [1031, 1032], "leung": 1031, "evgeni": 1031, "chasnovski": 1031, "fabiana": 1031, "facundo": [1031, 1034], "ferr\u00edn": 1031, "franziska": 1031, "boenisch": 1031, "bolmier": [1031, 1032, 1036], "gholdman1": 1031, "gonthier": 1031, "hao": [1031, 1032, 1034, 1035], "chun": [1031, 1032, 1034, 1035, 1036], "haoyin": [1031, 1033, 1034], "h\u00e9lion": 1031, "bourboux": 1031, "himanshu": [1031, 1034], "hirofumi": [1031, 1032], "suzuki": [1031, 1032], "huangk10": 1031, "kemenad": 1031, "hye": 1031, "sung": 1031, "indecisiveus": [1031, 1032], "inderjeet": 1031, "jjmistri": 1031, "haitz": [1031, 1033, 1034], "legarreta": [1031, 1033, 1034], "gorro\u00f1o": [1031, 1033, 1034], "judithabk6": 1031, "jumon": 1031, "kathryn": 1031, "krishnachaitanya9": 1031, "gia": 1031, "thuan": 1031, "lkubin": 1031, "lopusz": 1031, "lucgiffon": 1031, "lucyleeow": 1031, "kemk": 1031, "magda": 1031, "zielinska": 1031, "mandi": [1031, 1034], "gu": [1031, 1032, 1034], "manish": 1031, "aradwad": 1031, "mariana": 1031, "meirel": 1031, "mariel": 1031, "mc4229": 1031, "shoemak": 1031, "micha\u0142": 1031, "s\u0142apek": 1031, "mojca": 1031, "bertoncelj": 1031, "narendramukherje": 1031, "nicolasservel": 1031, "nkish": 1031, "noa": 1031, "tamir": [1031, 1034], "olicairn": 1031, "ur": 1031, "lenz": [1031, 1035], "delanou": 1031, "qizhi": 1031, "quang": 1031, "rachelcjordan": 1031, "raduspaimoc": 1031, "riccardo": 1031, "folloni": 1031, "ritchi": 1031, "rori": 1031, "hartong": 1031, "redden": 1031, "sambhav": 1031, "kothari": 1031, "santhoshbala18": 1031, "sarat": 1031, "addep": 1031, "scibol": 1031, "kie\u00dfl": 1031, "sergiodsr": 1031, "shiki": 1031, "shubh": 1031, "chatterje": 1031, "simonamaggio": [1031, 1032, 1033], "snowhit": 1031, "stareh": 1031, "marsh": 1031, "sunmi": 1031, "yoon": 1031, "talgatomarov": 1031, "tamirlan1": 1031, "nonner": 1031, "vink": [1031, 1033], "tiphain": 1031, "viard": 1031, "titu": 1031, "vachan": 1031, "vandana": 1031, "iyer": 1031, "waelbenamara": 1031, "wderos": 1031, "wenliwyan": 1031, "windber": 1031, "19579": 1032, "19646": 1032, "stopiter": 1032, "19922": 1032, "19732": 1032, "ishikawa": [1032, 1033], "19407": 1032, "ushtanit": [1032, 1033], "19982": 1032, "19939": 1032, "halvic": 1032, "19703": 1032, "sobkevich": 1032, "villaz\u00f3n": 1032, "terraza": 1032, "fonari": [1032, 1033], "19182": 1032, "yosuk": [1032, 1033], "kobayashi": [1032, 1033], "19721": 1032, "19659": 1032, "19211": 1032, "19847": 1032, "xiaoyu": 1032, "chai": [1032, 1035, 1036], "19308": 1032, "19234": 1032, "19727": 1032, "delong": [1032, 1033], "19888": 1032, "19924": 1032, "19271": 1032, "zhaowei": 1032, "19580": 1032, "brice": [1032, 1033], "adamson": 1032, "wil": 1032, "yegelwel": 1032, "css": 1032, "19417": 1032, "19179": 1032, "19126": 1032, "17448": 1032, "17107": 1032, "17546": 1032, "17856": 1032, "17984": 1032, "riedmann": 1032, "francesco": [1032, 1035], "casalegno": 1032, "18052": 1032, "sean": [1032, 1033, 1035], "stallei": 1032, "17937": 1032, "counts_": 1032, "init_size_": 1032, "17864": 1032, "17616": 1032, "18167": 1032, "18256": 1032, "jayratn": 1032, "16392": 1032, "17095": 1032, "18746": 1032, "norm_y_weight": 1032, "x_mean_": 1032, "y_mean_": 1032, "x_std_": 1032, "y_std_": 1032, "18768": 1032, "18302": 1032, "md5": 1032, "checksum": 1032, "14800": 1032, "17396": 1032, "jiaxiang": 1032, "17491": 1032, "18280": 1032, "17499": 1032, "17610": 1032, "18525": 1032, "11064": 1032, "17414": 1032, "18149": 1032, "17679": 1032, "18528": 1032, "villanova": [1032, 1033], "14446": 1032, "18394": 1032, "16985": 1032, "garbag": 1032, "18334": 1032, "multicor": [1032, 1033], "18341": 1032, "egor": 1032, "smirnov": 1032, "18410": 1032, "17702": 1032, "18326": 1032, "changedbehaviorwarn": 1032, "nonblasdotwarn": 1032, "17804": 1032, "17367": 1032, "15427": 1032, "gangesh": 1032, "gudmalwar": 1032, "erin": 1032, "6545": 1032, "17159": 1032, "15361": 1032, "17878": 1032, "17090": 1032, "_check_bounds_param": 1032, "12638": 1032, "lannuzel": 1032, "17526": 1032, "ayako": 1032, "yagi": 1032, "17612": 1032, "srimukh": 1032, "sripada": 1032, "16493": 1032, "darshan": 1032, "15636": 1032, "18987": 1032, "16619": 1032, "16906": 1032, "roei": 1032, "kahni": 1032, "18293": 1032, "16289": 1032, "kishimoto": 1032, "18639": 1032, "13003": 1032, "s\u00e1nchez": 1032, "18545": 1032, "laurenz": 1032, "reitsam": 1032, "17578": 1032, "knox": 1032, "6624": 1032, "marijn": 1032, "vliet": 1032, "18121": 1032, "18607": 1032, "fhaselbeck": 1032, "18622": 1032, "haesun": [1032, 1035, 1036], "10493": 1032, "17997": 1032, "maisonneuv": 1032, "square_dist": 1032, "17662": 1032, "18278": 1032, "17412": 1032, "16625": 1032, "10591": 1032, "karnowski": 1032, "plot_det_curv": [1032, 1033], "18176": 1032, "10708": 1032, "15007": 1032, "hathidara": 1032, "10711": 1032, "17192": 1032, "avi": [1032, 1033], "17225": 1032, "17569": 1032, "17651": 1032, "mato": 1032, "17777": 1032, "shubhanshu": 1032, "mishra": [1032, 1033], "17826": 1032, "decal": 1032, "willard": 1032, "17935": 1032, "cari": 1032, "goltermann": 1032, "18114": 1032, "18405": 1032, "yakov": 1032, "pchelintsev": 1032, "13900": 1032, "17478": 1032, "teon": 1032, "13204": 1032, "kosic": 1032, "18527": 1032, "18343": 1032, "devi": 1032, "sandeep": 1032, "18595": 1032, "18222": 1032, "18266": 1032, "subrat": 1032, "sahu": 1032, "15126": 1032, "17987": 1032, "17233": 1032, "zolisa": 1032, "bleki": 1032, "histgradientboost": 1032, "18124": 1032, "brocchini": 1032, "armstrong": 1032, "17427": 1032, "17038": 1032, "neighborsbas": [1032, 1035], "17148": 1032, "18691": 1032, "18370": 1032, "18612": 1032, "17603": 1032, "17604": 1032, "17606": 1032, "17608": 1032, "17609": 1032, "17633": 1032, "17661": 1032, "17932": 1032, "16352": 1032, "17759": 1032, "18269": 1032, "17876": 1032, "18429": 1032, "biernat": 1032, "17317": 1032, "17406": 1032, "wick": 1032, "18406": 1032, "17833": 1032, "yashika": 1032, "18510": 1032, "18447": 1032, "16066": 1032, "18682": 1032, "16935": 1032, "17193": 1032, "16335": 1032, "14982": 1032, "11682": 1032, "patric": [1032, 1033], "15763": 1032, "16530": 1032, "shuhua": 1032, "17386": 1032, "17187": 1032, "x_idx_sort": 1032, "17614": 1032, "check_methods_sample_order_invari": [1032, 1034], "17598": 1032, "ngo": 1032, "17992": 1032, "endian": 1032, "17644": 1032, "18508": 1032, "abo7atm": 1032, "spannbauer": 1032, "deodhar": 1032, "alexandracraciun": 1032, "amy12xx": 1032, "tiwari": 1032, "choraria": 1032, "subramaniyan": 1032, "kushwaha": 1032, "atsushi": [1032, 1033], "nukariya": [1032, 1033], "aura": 1032, "autoviz": 1032, "auto_viml": 1032, "avinash": 1032, "anak": 1032, "barankaraku": 1032, "barberogaston": 1032, "beatrizsmg": 1032, "mainy": 1032, "bossan": [1032, 1034, 1035, 1036], "pedigo": [1032, 1033], "bhavika": 1032, "devnani": 1032, "biprateep": 1032, "dei": 1032, "bmaisonn": 1032, "byron": 1032, "ceethinwa": [1032, 1033], "chaitanyamog": 1032, "clmbst": 1032, "coelhudo": 1032, "crispinlogan": [1032, 1035, 1036], "cristina": 1032, "mula": 1032, "darioka": [1032, 1034, 1035], "declan": 1032, "neill": 1032, "deeksha": 1032, "madan": 1032, "fiegel": [1032, 1033, 1035], "khoo": 1032, "eschibli": 1032, "fran": [1032, 1033, 1034], "larsson": [1032, 1033, 1034], "sheni": 1032, "genvalen": [1032, 1033, 1034, 1035, 1036], "kiragu": 1032, "gesa": 1032, "stupperich": 1032, "ghislain": 1032, "vaillant": 1032, "gim": 1032, "seng": 1032, "chevali": 1032, "bohl": [1032, 1034], "schole": 1032, "hitesh": 1032, "somani": 1032, "hoda1394": 1032, "moin": 1032, "hugorichard": 1032, "isuru": 1032, "wiryadi": 1032, "j0rd1smit": 1032, "jaehyun": 1032, "ahn": 1032, "tae": 1032, "hoctor": 1032, "vese": 1032, "jeevan": 1032, "jeroenpeterbo": 1032, "jhay": 1032, "jigna": 1032, "panchal": 1032, "jim0421": 1032, "joaquin": 1032, "gorb": 1032, "moya": 1032, "kartik": 1032, "chugh": 1032, "kaylani2": 1032, "kendrick": 1032, "cetina": 1032, "kenni": 1032, "isakov": 1032, "koki": 1032, "nishihara": 1032, "krum": [1032, 1034], "arnaudov": [1032, 1034], "oldja": 1032, "guitton": 1032, "mariam": 1032, "l\u00f6ning": 1032, "scheubrein": 1032, "megasari": 1032, "mathschi": 1032, "giudic": 1032, "milan": 1032, "straka": 1032, "muoki": 1032, "caleb": 1032, "haiat": 1032, "nadia": 1032, "tahiri": 1032, "ph": 1032, "hamada": 1032, "neil": 1032, "botelho": 1032, "nil": 1032, "noelano": 1032, "oj_lappi": 1032, "oleh": [1032, 1034], "kozynet": [1032, 1034], "pankaj": 1032, "jindal": 1032, "pardeep": 1032, "parthiv": 1032, "chigurupati": 1032, "pgithub": 1032, "probinette4": 1032, "pwalchessen": 1032, "rachel": [1032, 1035], "fischoff": 1032, "toshniw": 1032, "rafei": 1032, "iqbal": 1032, "rahul": 1032, "jakhar": 1032, "rachum": 1032, "ramyanp": [1032, 1033], "rauwuckl": 1032, "ravi": [1032, 1035], "kiran": 1032, "boggavarapu": 1032, "rishi": 1032, "advani": 1032, "rithvik": 1032, "romijnd": 1032, "tavenard": 1032, "rubi": 1032, "werman": 1032, "ryotaro": 1032, "tsukada": 1032, "sadak": 1032, "khandelw": 1032, "ezebunandu": 1032, "kimbinyi": 1032, "shail": 1032, "keller": 1032, "shao": [1032, 1033, 1034], "shooter23": [1032, 1033], "soledad": 1032, "galli": 1032, "subrat93": 1032, "sunitha": 1032, "selvan": 1032, "kusanagi2": 1032, "terenc": [1032, 1033], "honl": [1032, 1033], "thij": [1032, 1035, 1036], "thomas9292": 1032, "thorben": 1032, "tijanajovanov": 1032, "timo": 1032, "tnwei": 1032, "ufmay": 1032, "umberto": 1032, "lupo": 1032, "vika": [1032, 1034], "viniciu": [1032, 1033], "fuck": [1032, 1033], "violeta": 1032, "watchtheblur": 1032, "willpeppo": 1032, "xethan": 1032, "qianm": 1032, "yue": 1032, "yutaro": 1032, "ikeda": 1032, "zacchari": 1032, "ramzi": 1032, "zoj613": 1032, "21271": 1033, "21833": 1033, "siavash": 1033, "rezazadeh": 1033, "19210": 1033, "21295": 1033, "22050": 1033, "21991": 1033, "19869": 1033, "21481": [1033, 1034], "andr\u00e9": [1033, 1034, 1036], "babino": [1033, 1034], "disconnect": 1033, "21915": 1033, "21694": 1033, "minkowskidist": 1033, "minknowski": 1033, "cdist": 1033, "21741": 1033, "21871": 1033, "21845": 1033, "21517": 1033, "21917": 1033, "21552": 1033, "escap": [1033, 1035], "21493": 1033, "21199": 1033, "20638": 1033, "bohn\u00e9": 1033, "21179": 1033, "21195": 1033, "21130": 1033, "20761": 1033, "21251": 1033, "min_idf": 1033, "max_idf": 1033, "20752": 1033, "alek": [1033, 1034], "lefebvr": [1033, 1034], "21340": 1033, "21093": 1033, "21351": 1033, "cve": 1033, "28975": 1033, "21336": 1033, "_check_sample_weight": 1033, "only_non_neg": 1033, "20880": 1033, "andr\u00e1": [1033, 1034, 1035, 1036], "if_delegate_has_method": [1033, 1034], "21145": 1033, "zahlii": 1033, "21389": 1033, "20002": 1033, "19310": 1033, "least_squar": 1033, "19733": 1033, "lad": 1033, "absolute_loss": 1033, "20165": 1033, "18444": 1033, "18010": 1033, "threadsaf": 1033, "18736": 1033, "17443": 1033, "19641": 1033, "20087": 1033, "fauchereau": 1033, "19002": 1033, "19052": 1033, "yusuk": 1033, "nagasaka": 1033, "17622": 1033, "19024": 1033, "franki": 1033, "robertson": 1033, "20117": 1033, "natchiappan": [1033, 1034], "19883": 1033, "20597": 1033, "20899": 1033, "20200": 1033, "fit_": 1033, "partial_fit_": 1033, "19297": 1033, "20560": 1033, "18393": 1033, "bittarello": 1033, "19263": 1033, "19244": 1033, "18459": 1033, "nd": 1033, "18898": 1033, "ora": 1033, "phongpanagnam": 1033, "21080": 1033, "ledoit_wolf_shrinkag": 1033, "20416": 1033, "defoi": 1033, "20583": 1033, "19365": 1033, "ateif": 1033, "sara": 1033, "19669": 1033, "importlib": 1033, "pyoxid": 1033, "20297": 1033, "20209": 1033, "19011": 1033, "20729": 1033, "12069": 1033, "19046": 1033, "surya": [1033, 1034], "18433": 1033, "19198": 1033, "19159": 1033, "beno\u00eet": 1033, "mal\u00e9zieux": 1033, "19908": 1033, "20512": 1033, "20960": 1033, "cgroup": [1033, 1034], "quota": [1033, 1034], "20477": 1033, "19799": 1033, "19564": 1033, "19836": 1033, "19162": 1033, "10096": 1033, "fenil": 1033, "suchak": 1033, "20159": 1033, "murata": [1033, 1034], "20534": 1033, "19296": 1033, "19035": 1033, "19520": 1033, "18964": 1033, "19401": 1033, "relova": 1033, "17169": 1033, "dmytro": 1033, "lituiev": 1033, "20380": 1033, "pulido": 1033, "felip": [1033, 1034, 1035, 1036], "bidu": [1033, 1034], "rutter": 1033, "20515": 1033, "carsten": 1033, "allefeld": 1033, "19568": 1033, "shyam": 1033, "20207": 1033, "tomohiro": 1033, "endo": 1033, "20161": 1033, "shuhei": 1033, "kayawari": 1033, "arka204": [1033, 1035], "20431": 1033, "pfaffel": 1033, "19428": 1033, "hamoumi": 1033, "19411": 1033, "20959": 1033, "20554": 1033, "xiangyin": 1033, "kong": 1033, "9978": 1033, "10027": 1033, "16449": 1033, "20231": 1033, "naka": 1033, "19571": 1033, "20155": 1033, "oura": [1033, 1034, 1035], "19004": 1033, "midvidi": 1033, "19055": 1033, "19172": 1033, "19426": 1033, "19499": 1033, "strubel": 1033, "19616": 1033, "19391": 1033, "19390": 1033, "linearmodel": 1033, "17743": 1033, "17772": 1033, "17746": 1033, "17785": 1033, "17750": 1033, "17769": 1033, "20683": 1033, "19491": 1033, "19472": 1033, "shortest_path": 1033, "20531": 1033, "19415": 1033, "17036": 1033, "20326": 1033, "uttam": 1033, "9843": 1033, "19643": 1033, "attard": 1033, "19784": 1033, "18328": 1033, "20312": 1033, "divyanshu": 1033, "deoli": 1033, "18543": 1033, "20552": 1033, "19278": 1033, "20030": 1033, "tingshan": 1033, "18649": 1033, "rodion": 1033, "martynov": 1033, "20619": 1033, "baseshufflesplit": 1033, "20056": 1033, "pabloduque0": 1033, "prematur": 1033, "20904": 1033, "tomasz": 1033, "jakubek": [1033, 1034], "18925": 1033, "poznik": [1033, 1034, 1035], "18842": 1033, "19473": 1033, "jiefangxuanyan": 1033, "20072": 1033, "20842": 1033, "mart\u00edn": [1033, 1034], "19631": 1033, "19790": 1033, "flynn": [1033, 1035], "18368": 1033, "19483": 1033, "20526": 1033, "19069": 1033, "19041": 1033, "20250": 1033, "20652": 1033, "19934": 1033, "gleb": [1033, 1035, 1036], "levitskii": 1033, "19734": 1033, "robinson": 1033, "19752": 1033, "zhehao": [1033, 1034, 1035, 1036], "19527": 1033, "19788": 1033, "19356": 1033, "makoeppel": 1033, "19879": 1033, "19906": 1033, "20727": 1033, "20961": 1033, "n_input_features_": 1033, "20240": 1033, "20843": 1033, "18959": 1033, "wstate": 1033, "20023": 1033, "19336": 1033, "20272": 1033, "19459": 1033, "bezuidenhout": 1033, "clifford": 1033, "akai": 1033, "nettei": 1033, "19948": 1033, "20657": 1033, "19766": 1033, "20385": 1033, "_weighted_percentil": 1033, "huberlossfunct": 1033, "20528": 1033, "_safe_index": 1033, "20673": 1033, "is_scalar_nan": 1033, "assert_warn": 1033, "assert_warns_messag": 1033, "20521": 1033, "abdulelah": 1033, "mesfer": 1033, "adrian": [1033, 1034, 1035], "garcia": 1033, "badaracco": 1033, "sad\u0142ocha": 1033, "rubial": 1033, "alessia": 1033, "marcolini": 1033, "alihan": 1033, "zihna": 1033, "alin": 1033, "amol": 1033, "deshmukh": 1033, "pessoa": 1033, "anavelyz": 1033, "ashish": [1033, 1036], "ashvith": 1033, "shetti": 1033, "baam": [1033, 1034], "baptbillard": 1033, "bmalezieux": 1033, "bumblebe": 1033, "caherrera": 1033, "meli": [1033, 1034, 1035], "chrissobel": 1033, "yeh": 1033, "chuliang": 1033, "cliffordemmanuel": 1033, "conner": 1033, "shen": 1033, "dimitri": [1033, 1034, 1035, 1036], "papadopoulo": [1033, 1034, 1035, 1036], "orfano": [1033, 1034, 1035, 1036], "dmallia17": 1033, "ds_ana": 1033, "jardim": 1033, "edwinwenink": 1033, "eleni": 1033, "markou": 1033, "ericellwang": [1033, 1034], "ezri": 1033, "mudd": 1033, "fato": 1033, "morina": 1033, "hafner": 1033, "flyingdutchman23": 1033, "uwha": [1033, 1034], "bereng": 1033, "frederick": 1033, "frellwan": 1033, "vicent": [1033, 1034, 1035], "geroldcsend": 1033, "glen": 1033, "gl\u00f2ria": [1033, 1035], "mu\u00f1oz": [1033, 1035], "gregorystrubel": 1033, "groceryheist": 1033, "guiweb": 1033, "haidar": [1033, 1034], "almubarak": [1033, 1034], "moritz": [1033, 1035], "g\u00fcnther": 1033, "mirza": 1033, "harutaka": 1033, "kawamura": 1033, "hassan": 1033, "alsawadi": 1033, "geovan": [1033, 1034], "gome": [1033, 1034], "lima": [1033, 1034], "ilic": 1033, "ikko": 1033, "ashimin": 1033, "isaack": 1033, "mungui": 1033, "ishaan": 1033, "bhat": [1033, 1035, 1036], "ishan": [1033, 1034], "iwhalv": 1033, "preiss": 1033, "budarz": 1033, "jannik": 1033, "jennif": 1033, "jianzhu": 1033, "guo": 1033, "jnboehm": 1033, "johanwork": 1033, "paton": 1033, "n\u00e1pole": 1033, "julio": 1033, "julyrashchenko": 1033, "jvm": 1033, "kadatatlu": 1033, "kishor": 1033, "karen": 1033, "palacio": 1033, "kmatt10": 1033, "kobaski": 1033, "kot271828": 1033, "kunj": 1033, "kurumeyuta": 1033, "kxytim": 1033, "lacrosse91": 1033, "laveen": 1033, "bagai": 1033, "leonardo": 1033, "rocco": [1033, 1034, 1035], "uieda": 1033, "leopoldo": 1033, "corona": 1033, "lsturtew": 1033, "lucca": 1033, "quadro": 1033, "ly648499246": 1033, "mabu": 1033, "manaileng": 1033, "mariangela": 1033, "marielaraj": 1033, "hirzel": 1033, "mateo": 1033, "nore\u00f1a": 1033, "mathi": 1033, "batoul": 1033, "calcot": 1033, "prieur": 1033, "\u00f6zer": 1033, "miao": 1033, "cai": 1033, "karbownik": 1033, "michalkrawczyk": [1033, 1034], "mitzi": [1033, 1034], "mlondschien": 1033, "haseeb": [1033, 1034], "khoual": 1033, "jarir": 1033, "kanji": 1033, "nadim": 1033, "kawwa": 1033, "nanshan": 1033, "naozin555": 1033, "fultz": 1033, "nic": 1033, "annau": 1033, "stefani": [1033, 1035, 1036], "nigel": 1033, "bosch": 1033, "nodar": 1033, "okroshiashvili": 1033, "ogbonna": 1033, "chibuik": 1033, "ogordon100": 1033, "phongpanangam": 1033, "duqu": 1033, "ibieta": 1033, "jimenez": [1033, 1034], "lacouth": 1033, "olszewski": 1033, "dye": 1033, "pierreattard": [1033, 1034], "yve": 1033, "borgn": 1033, "pranayanchuri": 1033, "princ": 1033, "canuma": 1033, "putschblo": 1033, "ranjanikrishnan": 1033, "rene": 1033, "corneil": 1033, "ricardojnf": 1033, "richardscottoz": 1033, "sandi": 1033, "khosasi": 1033, "benhur": 1033, "flore": 1033, "shinehid": 1033, "shinnar": 1033, "tootoonian": 1033, "solosil": 1033, "kolawol": 1033, "stagg": 1033, "swpeas": 1033, "tfifi": 1033, "caswel": [1033, 1036], "timotheemathieu": 1033, "wolodzko": 1033, "tliu68": 1033, "uhmann": 1033, "tom1092": 1033, "tom\u00e1": [1033, 1034], "moreyra": 1033, "tommaso": 1033, "noto": 1033, "tsuga": 1033, "vang": 1033, "gkiasta": 1033, "vil\u00e9m": 1033, "zouhar": 1033, "vlasovet": 1033, "waijean": 1033, "whidou": 1033, "xiaoyuchai": 1033, "yasmeen": 1033, "alsaedi": 1033, "yoch": 1033, "yusukenagasaka": 1033, "yzhenman": 1033, "zeyusun": 1033, "zhaoweiwang": 1033, "msvcp140": 1034, "dll": 1034, "24631": 1034, "24446": 1034, "10805": 1034, "mathia": 1034, "23471": 1034, "24015": 1034, "23990": 1034, "23833": 1034, "24017": 1034, "sorski": [1034, 1035], "23395": 1034, "23636": 1034, "22063": 1034, "22059": 1034, "kurz": [1034, 1035], "23608": 1034, "23548": 1034, "24087": 1034, "23273": 1034, "23194": 1034, "23198": 1034, "lise": 1034, "kleiber": 1034, "23358": 1034, "23264": 1034, "feature_names_in": 1034, "23299": 1034, "23214": 1034, "collot": [1034, 1035], "baak": 1034, "23370": 1034, "23410": 1034, "compute_sample_weight": 1034, "23115": 1034, "22868": 1034, "multiindex": 1034, "22410": 1034, "23271": 1034, "21987": 1034, "22064": 1034, "22065": 1034, "22288": 1034, "22320": 1034, "21219": 1034, "21542": 1034, "23098": 1034, "22318": 1034, "23036": 1034, "binary_crossentropi": 1034, "23040": 1034, "23046": 1034, "22856": 1034, "21032": 1034, "18170": 1034, "21038": 1034, "14975": 1034, "22526": 1034, "23095": 1034, "silk": 1034, "20031": 1034, "krawczyk": 1034, "21148": 1034, "22255": 1034, "21881": 1034, "vassard": 1034, "22217": 1034, "21735": 1034, "22154": 1034, "22537": 1034, "iofal": 1034, "arisa": [1034, 1035], "22775": 1034, "22913": 1034, "randomgeek78": 1034, "22493": 1034, "19680": 1034, "thibaut": 1034, "22119": 1034, "22016": 1034, "22015": 1034, "19747": 1034, "attalla": 1034, "22498": 1034, "21482": 1034, "pujalt": 1034, "22412": 1034, "16605": 1034, "21901": 1034, "rileran": 1034, "23113": 1034, "ilion": 1034, "beyst": 1034, "21425": 1034, "stefanini": 1034, "16948": 1034, "patricio": 1034, "cerda": 1034, "22002": 1034, "21109": 1034, "inner_stats_": 1034, "iter_offset_": 1034, "18975": 1034, "22111": 1034, "22181": 1034, "21334": 1034, "21705": 1034, "stanlei": [1034, 1035, 1036], "21432": 1034, "22806": 1034, "jihan": 1034, "benni": 1034, "21713": 1034, "haya": 1034, "21567": 1034, "maggi": 1034, "chege": 1034, "22300": 1034, "15948": 1034, "sysuresh": 1034, "22553": 1034, "19490": 1034, "ferrin": 1034, "22120": 1034, "15984": 1034, "okon": 1034, "22696": 1034, "22486": 1034, "21800": 1034, "20567": 1034, "22159": 1034, "20811": 1034, "21814": 1034, "16748": 1034, "siqi": 1034, "22215": 1034, "23047": 1034, "22695": 1034, "22697": 1034, "21762": 1034, "22106": 1034, "gijsber": 1034, "21632": 1034, "genesi": [1034, 1036], "valencia": [1034, 1036], "22566": 1034, "22908": 1034, "23097": 1034, "23079": 1034, "20803": 1034, "23023": 1034, "21573": 1034, "21832": 1034, "20145": 1034, "22356": 1034, "18482": 1034, "gameiro": 1034, "kharsa": 1034, "22370": 1034, "17819": 1034, "22235": 1034, "21837": 1034, "wagner": 1034, "22199": 1034, "aidar": 1034, "shakerimoff": 1034, "tenavi": 1034, "nakamura": 1034, "22223": 1034, "marcom": 1034, "21617": 1034, "ritter": [1034, 1035], "21114": 1034, "21078": 1034, "21448": 1034, "16061": 1034, "19438": 1034, "18310": 1034, "elfner": 1034, "22249": 1034, "22137": 1034, "22694": 1034, "22808": 1034, "22950": 1034, "21086": 1034, "22206": 1034, "21808": 1034, "22548": 1034, "22062": 1034, "trujillo": [1034, 1035], "22148": 1034, "22240": 1034, "9087": 1034, "22525": 1034, "19689": 1034, "21606": 1034, "21341": 1034, "preservs": 1034, "21767": 1034, "21724": 1034, "yar": 1034, "khine": 1034, "phyo": 1034, "21998": 1034, "22891": 1034, "22899": 1034, "23256": 1034, "19794": 1034, "21534": 1034, "22254": 1034, "21805": 1034, "jeann": 1034, "dionisi": 1034, "22685": 1034, "n_neighbour": 1034, "18832": 1034, "23033": 1034, "21565": 1034, "17266": 1034, "22118": 1034, "ohad": 1034, "22284": 1034, "19158": 1034, "nicki": 1034, "skaft": 1034, "20753": 1034, "22108": 1034, "22635": 1034, "19085": 1034, "22866": 1034, "21576": 1034, "emil": 1034, "dugnat": 1034, "21873": 1034, "21177": 1034, "20408": 1034, "ceballo": 1034, "22058": 1034, "23034": 1034, "22203": 1034, "21026": 1034, "21880": 1034, "mrinal": 1034, "tyagi": 1034, "22982": 1034, "22508": 1034, "comb": 1034, "22604": 1034, "22212": 1034, "21430": 1034, "desislava": 1034, "vasileva": 1034, "22687": 1034, "22150": 1034, "22248": 1034, "20860": 1034, "shubhraneel": 1034, "21888": 1034, "21954": 1034, "22953": 1034, "16018": 1034, "21445": 1034, "21988": 1034, "get_output_feature_nam": 1034, "21569": 1034, "21079": 1034, "20653": 1034, "21434": 1034, "19916": 1034, "22735": 1034, "compute_inverse_transform": 1034, "21701": 1034, "22114": 1034, "21330": 1034, "21408": 1034, "22149": 1034, "21436": 1034, "22191": 1034, "22476": 1034, "21278": 1034, "21316": 1034, "clickabl": 1034, "21298": 1034, "22237": 1034, "check_scalar": 1034, "22218": 1034, "validationerror": 1034, "check_requires_y_non": 1034, "22578": 1034, "arcidiacono": [1034, 1035], "22595": 1034, "21310": 1034, "22027": 1034, "lanterni": 1034, "23077": 1034, "22188": 1034, "22830": 1034, "2357juan": [1034, 1035, 1036], "adamgonzo": 1034, "adijohar": 1034, "kumawat": 1034, "raghuwanshi": 1034, "duron": 1034, "ahmadjubair33": 1034, "aj": 1034, "druck": 1034, "peixinho": 1034, "arroyo": 1034, "alexanmv": 1034, "almeidayoel": 1034, "amar": [1034, 1035, 1036], "amrcod": 1034, "griva": [1034, 1035], "andrii": 1034, "herrou": 1034, "ducout": 1034, "arth": 1034, "arthurmello": 1034, "arturoamor": 1034, "atharva": 1034, "patil": 1034, "aufarkari": 1034, "avm19": [1034, 1035], "ayan": 1034, "bardiya": [1034, 1035], "behrouz": 1034, "ben3940": 1034, "bijil": 1034, "subhash": 1034, "bmreinig": 1034, "brenden": 1034, "kadota": 1034, "cdrig": 1034, "chalmer": 1034, "chitteti": 1034, "srinath": [1034, 1035], "chloe": 1034, "agath": 1034, "azencott": 1034, "christopherlim98": 1034, "weidemann": 1034, "combsccod": 1034, "daniela": [1034, 1035], "darren": [1034, 1035], "eargl": 1034, "gilbertson": [1034, 1035], "dea": [1034, 1035, 1036], "mar\u00eda": [1034, 1035, 1036], "denni": 1034, "osei": 1034, "dessyvv": 1034, "dev514": 1034, "diwakar": 1034, "ries": 1034, "drskd": 1034, "emiko": 1034, "sano": 1034, "emmanouil": 1034, "gionanidi": 1034, "ermolaevpa": [1034, 1035], "estefania": 1034, "barreto": 1034, "ojeda": 1034, "eyast": 1034, "fatima": 1034, "gasmi": 1034, "luna": 1034, "glushchenkov": 1034, "fkaren27": 1034, "fpgawesom": 1034, "ftorres16": [1034, 1035], "gabor": 1034, "berei": 1034, "kertesz": 1034, "gauthier": 1034, "giancarlo": 1034, "glennfrutiz": 1034, "guillermo": 1034, "fern\u00e1ndez": 1034, "hansin": [1034, 1035], "henrymooresc": [1034, 1035], "hideaki": 1034, "imamura": 1034, "hind": 1034, "hmasdev": 1034, "hvassard": 1034, "aki": [1034, 1035, 1036], "iasoon": 1034, "ingela": 1034, "cowton": 1034, "jalexand3r": 1034, "jauhar": 1034, "jaya": 1034, "kommireddi": 1034, "je": 1034, "jelfner": 1034, "jenni": 1034, "jirka": 1034, "borovec": 1034, "cipri\u00e1n": 1034, "loayza": 1034, "chazalon": 1034, "mess": 1034, "jovan": [1034, 1035], "stojanov": [1034, 1035], "jschuerz": 1034, "katotten": 1034, "ken4git": 1034, "doucet": 1034, "kimayoung": 1034, "koushik": 1034, "kranthi": 1034, "sedamaki": 1034, "krumetoft": 1034, "lesne": 1034, "casino": [1034, 1035], "logan": [1034, 1035, 1036], "lucieclair": 1034, "luiz": 1034, "magali": 1034, "mandjev": 1034, "wurp": [1034, 1035], "boerner": 1034, "wimld": 1034, "martel": 1034, "corentin": 1034, "mat\u00eda": 1034, "matjansen": 1034, "francia": 1034, "megabyt": 1034, "mehrdad": 1034, "moradizadeh": 1034, "melemo2": 1034, "micky774": [1034, 1035], "milana2": 1034, "millawel": 1034, "miwojc": 1034, "mizuki": 1034, "mlant": 1034, "mohit": 1034, "moonkyung94": 1034, "mpoemsl": 1034, "mrinaltyagi": 1034, "leu": 1034, "msabati": 1034, "nadirhan": 1034, "\u015fahin": 1034, "naipawat": [1034, 1035], "poolsawat": [1034, 1035], "nartayxd": 1034, "nastegiano": 1034, "nathansquan": 1034, "detlefsen": 1034, "niket": 1034, "nikhil": 1034, "suresh": 1034, "kondratyev": 1034, "husak": 1034, "partev": [1034, 1035, 1036], "pelennor": 1034, "piet": [1034, 1035], "br\u00f6mmel": [1034, 1035], "pinki": 1034, "poloso": 1034, "pramod": 1034, "anantharam": 1034, "puhuk": [1034, 1035], "purna": 1034, "mansingh": 1034, "quadv": 1034, "rahil": [1034, 1035, 1036], "boy": 1034, "raz": 1034, "hoshia": 1034, "rishabh": 1034, "barnowski": [1034, 1035], "rsnegrin": 1034, "yadav": 1034, "sakinaouisrani": 1034, "sanjai": 1034, "marreddi": 1034, "seel": 1034, "sele": [1034, 1035], "seyedsaman": 1034, "emami": 1034, "shandeng123": 1034, "sharmadharmp": 1034, "shaymernaturalint": 1034, "shuangchi": [1034, 1035], "siavrez": 1034, "slishak": 1034, "spikebh": 1034, "sply88": 1034, "kailasa": [1034, 1035], "sultan": 1034, "orazbayev": 1034, "sumit": 1034, "saha": 1034, "sven": [1034, 1035], "eschlbeck": 1034, "stehl": [1034, 1035], "swapnil": 1034, "teunp": 1034, "ferr\u00e9": 1034, "hjortkj\u00e6r": 1034, "thiruvenkadam": 1034, "toastedyeast": [1034, 1035], "mctiernan": [1034, 1035], "udit": 1034, "ugo": 1034, "marchand": 1034, "vera": [1034, 1035], "komey": [1034, 1035], "victoireloui": 1034, "vishwakarma": 1034, "vikrant": 1034, "khedkar": 1034, "chernyi": 1034, "weijiadu": 1034, "yuan": [1034, 1035, 1036], "yiyangq": 1034, "yosshi999": 1034, "yuki": 1034, "koyama": 1034, "zeel": 1034, "zempleni": 1034, "zhenfish": 1034, "\u8d75\u4e30": 1034, "25747": 1035, "base_estimator__": 1035, "25477": 1035, "25563": 1035, "25570": 1035, "25664": 1035, "25774": 1035, "25500": 1035, "25589": 1035, "25704": 1035, "min_sample_split": 1035, "25744": 1035, "25619": 1035, "25638": 1035, "25354": 1035, "25174": 1035, "25089": 1035, "25129": 1035, "25363": 1035, "25188": 1035, "25295": 1035, "spec": [1035, 1036], "25312": 1035, "backslash": 1035, "25511": 1035, "25172": 1035, "25341": 1035, "25094": 1035, "25250": 1035, "25370": 1035, "23101": 1035, "24873": 1035, "25694": 1035, "25274": 1035, "25296": 1035, "25147": 1035, "23619": 1035, "24354": 1035, "safiuddin": 1035, "khaja": 1035, "gsiisg": 1035, "23935": 1035, "22527": 1035, "_sgd_fast": 1035, "_plain_sgd": 1035, "oversc": 1035, "23798": 1035, "24543": 1035, "24465": 1035, "23734": 1035, "24699": 1035, "23865": 1035, "simd": 1035, "primit": 1035, "23446": 1035, "23197": 1035, "23604": 1035, "23585": 1035, "24556": 1035, "maladi\u00e8r": [1035, 1036], "24617": 1035, "sim4n6": 1035, "24688": 1035, "22054": 1035, "roic": 1035, "24264": 1035, "maladier": 1035, "14736": 1035, "hunt": 1035, "zhan": 1035, "20802": 1035, "pokorni": 1035, "22965": 1035, "22968": 1035, "23038": 1035, "23210": 1035, "24258": 1035, "23470": 1035, "21938": 1035, "23127": 1035, "19075": 1035, "ramo": 1035, "carre\u00f1o": 1035, "24951": 1035, "22268": 1035, "mohamedbsh": 1035, "23905": 1035, "11860": 1035, "ablin": 1035, "24528": 1035, "23726": 1035, "24421": 1035, "kshitij": [1035, 1036], "22554": 1035, "24218": 1035, "molin": 1035, "21020": 1035, "24856": 1035, "22014": 1035, "23252": 1035, "24538": 1035, "24889": 1035, "24146": 1035, "peretti": 1035, "nestor": 1035, "navarro": 1035, "nati": 1035, "tomatti": 1035, "24855": 1035, "24849": 1035, "20415": 1035, "24283": 1035, "24894": 1035, "23819": [1035, 1036], "edoardo": 1035, "abati": 1035, "24747": 1035, "24245": 1035, "24405": 1035, "16695": 1035, "vitor": 1035, "rosa": 1035, "18298": 1035, "25077": 1035, "24317": 1035, "24350": 1035, "24755": 1035, "levitski": [1035, 1036], "24637": 1035, "24767": 1035, "23275": 1035, "maxwelllzh": 1035, "24433": 1035, "yogendrasingh": 1035, "23637": 1035, "23877": 1035, "10168": 1035, "\u0142ukasz": 1035, "borchmann": 1035, "12285": 1035, "miltenberg": 1035, "13042": 1035, "parizi": 1035, "18094": 1035, "22562": 1035, "24714": 1035, "23834": 1035, "24051": 1035, "22518": 1035, "18020": 1035, "24338": 1035, "23442": 1035, "atukorala": 1035, "22710": 1035, "conroi": 1035, "trinh": 1035, "23461": 1035, "24365": 1035, "24630": 1035, "rushil": [1035, 1036], "24084": 1035, "iinfo": 1035, "24141": 1035, "24539": 1035, "23977": 1035, "23683": 1035, "andrei": 1035, "melnik": 1035, "16747": 1035, "18805": 1035, "hongshaoyang": 1035, "22269": 1035, "23139": 1035, "24645": 1035, "10468": 1035, "ruben": 1035, "22993": 1035, "24750": 1035, "rudresh": 1035, "veerkhar": 1035, "23874": 1035, "24075": 1035, "22665": 1035, "24683": 1035, "24058": 1035, "perdok": 1035, "20331": 1035, "23993": 1035, "22629": 1035, "24412": 1035, "22898": 1035, "23480": 1035, "21469": 1035, "lapack_svd_driv": 1035, "20617": 1035, "25067": 1035, "14862": 1035, "24512": 1035, "24667": 1035, "25080": 1035, "24523": 1035, "mia": 1035, "bajic": 1035, "3llobo": 1035, "kania": [1035, 1036], "anulekh": 1035, "admir": [1035, 1036], "demiraj": [1035, 1036], "adoublet": [1035, 1036], "ahmedbgh": [1035, 1036], "aiko": 1035, "akshita": 1035, "prasanth": 1035, "ala": [1035, 1036], "miola": 1035, "lebel": 1035, "buzenet": [1035, 1036], "kassa": [1035, 1036], "bera": 1035, "maennel": 1035, "aniket": 1035, "shirsat": 1035, "anthony22": [1035, 1036], "apostolo": 1035, "tsetogl": 1035, "aravindh": 1035, "artur": [1035, 1036], "hermano": [1035, 1036], "ashah002": [1035, 1036], "ashwin": [1035, 1036], "azaria": [1035, 1036], "gebremichael": [1035, 1036], "b0rxington": 1035, "badr": 1035, "moufad": 1035, "bart\u0142omiej": 1035, "go\u0144da": 1035, "bdegraaff": 1035, "berkecanrizai": 1035, "bernd": 1035, "fritzk": 1035, "bhoomika": 1035, "biswaroop": 1035, "cannon": 1035, "bsh": 1035, "ceh": 1035, "chalulu": 1035, "changyao": [1035, 1036], "zablit": 1035, "veenhui": [1035, 1036], "christianwaldmann": 1035, "christin": [1035, 1036], "verrier": 1035, "dangonite57": [1035, 1036], "danielgaerb": 1035, "davidblnc": [1035, 1036], "dayn": [1035, 1036], "khant": 1035, "dhanshre": 1035, "diadochokinet": 1035, "diederikwp": 1035, "litsidi": [1035, 1036], "drewhogg": 1035, "oc": 1035, "dwight": 1035, "lindquist": 1035, "eden": 1035, "brekk": 1035, "edern": [1035, 1036], "eleanor": 1035, "eliaschiavon": 1035, "emir": [1035, 1036], "fabrizio": 1035, "damicelli": 1035, "fcharra": 1035, "siola": [1035, 1036], "tuveri": 1035, "franck": 1035, "charra": 1035, "geevarghes": 1035, "georgiamaydai": 1035, "gianr": 1035, "lazz": 1035, "guitar": 1035, "gunesbayir": [1035, 1036], "harshit5674": 1035, "hasan": 1035, "yaman": 1035, "vrigazov": 1035, "htsedebenham": 1035, "humahn": 1035, "ido": [1035, 1036], "iglesi": 1035, "iliya": 1035, "zhechev": 1035, "iren": [1035, 1036], "ivanllt": 1035, "sedykh": 1035, "mcivor": [1035, 1036], "janfidor": [1035, 1036], "jiten": 1035, "sidhpura": 1035, "jkarolczak": 1035, "jo\u00e3o": 1035, "johnathanpi": [1035, 1036], "koumenti": 1035, "panga": [1035, 1036], "johnthagen": 1035, "fleme": 1035, "choo": [1035, 1036], "yun": [1035, 1036], "keat": [1035, 1036], "juanfe88": 1035, "juliaschoepp": [1035, 1036], "jygerardi": [1035, 1036], "ka00ri": [1035, 1036], "kanishk": 1035, "sachdev": 1035, "kanissh": 1035, "kendal": 1035, "kento": [1035, 1036], "nozawa": [1035, 1036], "eliasi": [1035, 1036], "kluge": [1035, 1036], "lieret": 1035, "kirandevraj": 1035, "kraig": 1035, "vamsi": 1035, "kapadni": 1035, "lingyi1110": 1035, "mantovani": 1035, "maascha": 1035, "madinak": 1035, "maksym": 1035, "mansi": 1035, "kostelac": [1035, 1036], "marvin": [1035, 1036], "krawutschk": [1035, 1036], "masanori": [1035, 1036], "kanazu": [1035, 1036], "haberland": [1035, 1036], "mauroantonioserrano": 1035, "maxi": 1035, "marufo": 1035, "maximesaur": [1035, 1036], "smolskii": 1035, "bou": [1035, 1036], "mehgarg": 1035, "mehmetcanakbai": 1035, "baji\u0107": 1035, "flak": 1035, "hornstein": 1035, "ruiter": 1035, "paradi": 1035, "iljin": [1035, 1036], "misa": 1035, "ogura": 1035, "wilksch": 1035, "mrastgoo": 1035, "naois": 1035, "holohan": 1035, "nass": 1035, "jacobi": 1035, "nawazish": [1035, 1036], "alam": [1035, 1036], "nguy\u1ec5n": 1035, "v\u0103n": 1035, "di\u1ec5n": 1035, "fanelli": [1035, 1036], "nihal": 1035, "thukarama": 1035, "jare": 1035, "nima10khodaveisi": 1035, "nima": 1035, "sarajpoor": 1035, "nitinramvelraj": 1035, "nnlnr": [1035, 1036], "npach": [1035, 1036], "nwanna": 1035, "nymark": 1035, "kho": 1035, "holman": 1035, "oll": 1035, "lukowski": 1035, "hassoun": 1035, "tamer": 1035, "ouss1508": [1035, 1036], "oyindamola": 1035, "olatunji": 1035, "pab": [1035, 1036], "pandata": [1035, 1036], "soar": 1035, "petar": 1035, "mlinari\u0107": 1035, "pooja": [1035, 1036], "subramaniam": [1035, 1036], "priyam": 1035, "kakati": 1035, "freeland": 1035, "keerti": 1035, "rafal": [1035, 1036], "wojdyla": [1035, 1036], "raghuv": [1035, 1036], "makhija": 1035, "rehan": 1035, "guha": 1035, "klima": 1035, "crockett": 1035, "homm": 1035, "roman4oo": 1035, "rowan": 1035, "mankoo": 1035, "sabri": 1035, "monaf": 1035, "safikh": 1035, "salahuddin": 1035, "yojana": 1035, "menes": 1035, "ephrem": 1035, "sangam": 1035, "sangamswadik": 1035, "sanjai_3": [1035, 1036], "sarahremu": 1035, "sashka": [1035, 1036], "savkomax": 1035, "gustafson": [1035, 1036], "sec65": 1035, "seljak": 1035, "shadi": [1035, 1036], "gewili": [1035, 1036], "shellyfung": 1035, "shinsuk": 1035, "mori": 1035, "shiva": [1035, 1036], "shoaib": 1035, "khan": [1035, 1036], "shogo": [1035, 1036], "hida": [1035, 1036], "shrankhla": 1035, "sonniv": [1035, 1036], "sortofamudkip": [1035, 1036], "stanislav": [1035, 1036], "modrak": [1035, 1036], "stellalin7": 1035, "vaerenbergh": [1035, 1036], "schmerler": 1035, "tabea": [1035, 1036], "kossen": [1035, 1036], "thedevpanda": 1035, "syd": 1035, "sre": 1035, "weezel": [1035, 1036], "bonald": 1035, "germer": [1035, 1036], "ion": 1035, "timofei": 1035, "kornev": 1035, "pitter": 1035, "tomiock": [1035, 1036], "mathew": 1035, "tspeng": [1035, 1036], "egashira": 1035, "rey": 1035, "puerta": 1035, "vishal": 1035, "vyom": [1035, 1036], "pathak": [1035, 1036], "wattai": 1035, "wchathura": 1035, "wen": 1035, "x110": 1035, "xuniu": 1035, "yanhong": 1035, "ef": 1035, "yusuf": [1035, 1036], "raji": [1035, 1036], "adil": 1035, "khwaja": 1035, "zeeshan": [1035, 1036], "lone": [1035, 1036], "26772": 1036, "reintroduc": 1036, "26754": 1036, "25196": 1036, "24871": 1036, "25752": 1036, "25438": 1036, "yotam": 1036, "avidar": 1036, "constantini": 1036, "26337": 1036, "25120": 1036, "25294": 1036, "25308": 1036, "25291": 1036, "25367": 1036, "25402": 1036, "25044": 1036, "smt": 1036, "26082": 1036, "24027": 1036, "25815": 1036, "24568": 1036, "26121": 1036, "25805": 1036, "26385": 1036, "26657": 1036, "binesh": 1036, "bannerje": 1036, "25251": 1036, "26503": 1036, "26286": 1036, "26323": 1036, "26033": 1036, "26108": 1036, "barth\u00e9lemi": 1036, "26433": 1036, "26386": 1036, "26551": 1036, "consistenli": 1036, "26579": 1036, "25784": 1036, "25490": 1036, "25956": 1036, "22409": 1036, "25177": 1036, "24882": 1036, "25186": 1036, "breve": 1036, "26318": 1036, "25506": 1036, "25601": 1036, "fidor": 1036, "25931": 1036, "25629": 1036, "26242": 1036, "toplak": 1036, "sckit": 1036, "25297": 1036, "24230": 1036, "25102": 1036, "25973": 1036, "25232": 1036, "26454": 1036, "25209": 1036, "26644": 1036, "lemo": 1036, "21809": 1036, "25732": 1036, "25190": 1036, "26207": 1036, "25587": 1036, "25697": 1036, "25214": 1036, "26653": 1036, "25531": 1036, "17388": 1036, "24769": 1036, "25713": 1036, "18723": 1036, "sahil": 1036, "24677": 1036, "24668": 1036, "dberenbaum": 1036, "25987": 1036, "26019": 1036, "25432": 1036, "25672": 1036, "lene": 1036, "preuss": 1036, "25299": 1036, "omarmanzoor": 1036, "26194": 1036, "26264": 1036, "barata": 1036, "onggo": 1036, "23099": 1036, "overriden": 1036, "25659": 1036, "26333": 1036, "24140": 1036, "24076": 1036, "kulsinskidist": 1036, "25417": 1036, "24083": 1036, "25443": 1036, "feature_union": 1036, "25093": 1036, "25220": 1036, "26325": 1036, "25334": 1036, "25677": 1036, "20524": 1036, "niuk": 1036, "23731": 1036, "24145": 1036, "22506": 1036, "24935": 1036, "seladu": 1036, "25257": 1036, "26424": 1036, "correcli": 1036, "26400": 1036, "26566": 1036, "26093": 1036, "23595": 1036, "26376": 1036, "25387": 1036, "26289": 1036, "25813": 1036, "26106": 1036, "25814": 1036, "check_transformers_unfitted_stateless": 1036, "25733": 1036, "19664": 1036, "environmenterror": 1036, "ioerror": 1036, "windowserror": 1036, "26466": 1036, "kushwah": 1036, "handk": 1036, "adien": 1036, "mansouri": 1036, "alexl": 1036, "amai": 1036, "annegnx": 1036, "ansam": 1036, "zedan": 1036, "dutt": 1036, "aymericbasset": 1036, "tripramudya": 1036, "benedek": 1036, "harsanyi": 1036, "brevin": 1036, "kund": 1036, "troillard": 1036, "carla": 1036, "berenbaum": 1036, "proding": 1036, "butyugina": 1036, "elabonga": 1036, "atuo": 1036, "farhan": 1036, "hujiahong726": 1036, "ili": 1036, "jb": 1036, "mountford": 1036, "jessicakk0711": 1036, "jiawei": 1036, "joei": 1036, "hedlund": 1036, "linu": 1036, "fouquet": 1036, "harfouch": 1036, "mdarii": 1036, "murezzda": 1036, "nightwalkx": 1036, "nishu": 1036, "piontek": 1036, "pnucci": 1036, "sadra": 1036, "barikbin": 1036, "searchforpass": 1036, "seoeun": 1036, "shreesha": 1036, "senger": 1036, "th\u00e9ophil": 1036, "barang": 1036, "veghit": 1036, "vignesh": 1036, "vijeth": 1036, "moudgalya": 1036, "windiana42": 1036, "yuchen": 1036, "26464": 1037, "outliermixin": 1037, "26506": 1037, "26634": 1037, "landeau": 1037, "vigni": 1037, "13649": 1037, "reilli": 1037, "26748": 1037}, "objects": {"sklearn": [[399, 0, 0, "-", "base"], [399, 0, 0, "-", "calibration"], [399, 0, 0, "-", "cluster"], [399, 0, 0, "-", "compose"], [459, 4, 1, "", "config_context"], [399, 0, 0, "-", "covariance"], [399, 0, 0, "-", "cross_decomposition"], [399, 0, 0, "-", "datasets"], [399, 0, 0, "-", "decomposition"], [399, 0, 0, "-", "discriminant_analysis"], [399, 0, 0, "-", "dummy"], [399, 0, 0, "-", "ensemble"], [399, 0, 0, "-", "exceptions"], [399, 0, 0, "-", "experimental"], [399, 0, 0, "-", "feature_extraction"], [399, 0, 0, "-", "feature_selection"], [399, 0, 0, "-", "gaussian_process"], [617, 4, 1, "", "get_config"], [399, 0, 0, "-", "impute"], [399, 0, 0, "-", "inspection"], [399, 0, 0, "-", "isotonic"], [399, 0, 0, "-", "kernel_approximation"], [399, 0, 0, "-", "kernel_ridge"], [399, 0, 0, "-", "linear_model"], [399, 0, 0, "-", "manifold"], [399, 0, 0, "-", "metrics"], [399, 0, 0, "-", "mixture"], [399, 0, 0, "-", "model_selection"], [399, 0, 0, "-", "multiclass"], [399, 0, 0, "-", "multioutput"], [399, 0, 0, "-", "naive_bayes"], [399, 0, 0, "-", "neighbors"], [399, 0, 0, "-", "neural_network"], [399, 0, 0, "-", "pipeline"], [399, 0, 0, "-", "preprocessing"], [399, 0, 0, "-", "random_projection"], [399, 0, 0, "-", "semi_supervised"], [888, 4, 1, "", "set_config"], [889, 4, 1, "", "show_versions"], [399, 0, 0, "-", "svm"], [399, 0, 0, "-", "tree"], [399, 0, 0, "-", "utils"]], "sklearn.base": [[414, 1, 1, "", "BaseEstimator"], [415, 1, 1, "", "BiclusterMixin"], [416, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [417, 1, 1, "", "ClassifierMixin"], [418, 1, 1, "", "ClusterMixin"], [419, 1, 1, "", "DensityMixin"], [420, 1, 1, "", "MetaEstimatorMixin"], [421, 1, 1, "", "OneToOneFeatureMixin"], [422, 1, 1, "", "OutlierMixin"], [423, 1, 1, "", "RegressorMixin"], [424, 1, 1, "", "TransformerMixin"], [425, 4, 1, "", "clone"], [426, 4, 1, "", "is_classifier"], [427, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[414, 2, 1, "", "get_metadata_routing"], [414, 2, 1, "", "get_params"], [414, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[415, 3, 1, "", "biclusters_"], [415, 2, 1, "", "get_indices"], [415, 2, 1, "", "get_shape"], [415, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[416, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[417, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[418, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[419, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[421, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[422, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[423, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[424, 2, 1, "", "fit_transform"], [424, 2, 1, "", "set_output"]], "sklearn.calibration": [[428, 1, 1, "", "CalibratedClassifierCV"], [429, 1, 1, "", "CalibrationDisplay"], [430, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[428, 2, 1, "", "fit"], [428, 2, 1, "", "get_metadata_routing"], [428, 2, 1, "", "get_params"], [428, 2, 1, "", "predict"], [428, 2, 1, "", "predict_proba"], [428, 2, 1, "", "score"], [428, 2, 1, "", "set_fit_request"], [428, 2, 1, "", "set_params"], [428, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[429, 2, 1, "", "from_estimator"], [429, 2, 1, "", "from_predictions"], [429, 2, 1, "", "plot"]], "sklearn.cluster": [[431, 1, 1, "", "AffinityPropagation"], [432, 1, 1, "", "AgglomerativeClustering"], [433, 1, 1, "", "Birch"], [434, 1, 1, "", "BisectingKMeans"], [435, 1, 1, "", "DBSCAN"], [436, 1, 1, "", "FeatureAgglomeration"], [437, 1, 1, "", "HDBSCAN"], [438, 1, 1, "", "KMeans"], [439, 1, 1, "", "MeanShift"], [440, 1, 1, "", "MiniBatchKMeans"], [441, 1, 1, "", "OPTICS"], [442, 1, 1, "", "SpectralBiclustering"], [443, 1, 1, "", "SpectralClustering"], [444, 1, 1, "", "SpectralCoclustering"], [445, 4, 1, "", "affinity_propagation"], [446, 4, 1, "", "cluster_optics_dbscan"], [447, 4, 1, "", "cluster_optics_xi"], [448, 4, 1, "", "compute_optics_graph"], [411, 4, 1, "", "dbscan"], [449, 4, 1, "", "estimate_bandwidth"], [450, 4, 1, "", "k_means"], [451, 4, 1, "", "kmeans_plusplus"], [452, 4, 1, "", "mean_shift"], [453, 4, 1, "", "spectral_clustering"], [454, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[431, 2, 1, "", "fit"], [431, 2, 1, "", "fit_predict"], [431, 2, 1, "", "get_metadata_routing"], [431, 2, 1, "", "get_params"], [431, 2, 1, "", "predict"], [431, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[432, 2, 1, "", "fit"], [432, 2, 1, "", "fit_predict"], [432, 2, 1, "", "get_metadata_routing"], [432, 2, 1, "", "get_params"], [432, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[433, 2, 1, "", "fit"], [433, 2, 1, "", "fit_predict"], [433, 2, 1, "", "fit_transform"], [433, 2, 1, "", "get_feature_names_out"], [433, 2, 1, "", "get_metadata_routing"], [433, 2, 1, "", "get_params"], [433, 2, 1, "", "partial_fit"], [433, 2, 1, "", "predict"], [433, 2, 1, "", "set_output"], [433, 2, 1, "", "set_params"], [433, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[434, 2, 1, "", "fit"], [434, 2, 1, "", "fit_predict"], [434, 2, 1, "", "fit_transform"], [434, 2, 1, "", "get_feature_names_out"], [434, 2, 1, "", "get_metadata_routing"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "predict"], [434, 2, 1, "", "score"], [434, 2, 1, "", "set_fit_request"], [434, 2, 1, "", "set_output"], [434, 2, 1, "", "set_params"], [434, 2, 1, "", "set_predict_request"], [434, 2, 1, "", "set_score_request"], [434, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[435, 2, 1, "", "fit"], [435, 2, 1, "", "fit_predict"], [435, 2, 1, "", "get_metadata_routing"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "set_fit_request"], [435, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[436, 2, 1, "", "fit"], [436, 3, 1, "", "fit_predict"], [436, 2, 1, "", "fit_transform"], [436, 2, 1, "", "get_feature_names_out"], [436, 2, 1, "", "get_metadata_routing"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "inverse_transform"], [436, 2, 1, "", "set_output"], [436, 2, 1, "", "set_params"], [436, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[437, 2, 1, "", "dbscan_clustering"], [437, 2, 1, "", "fit"], [437, 2, 1, "", "fit_predict"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[438, 2, 1, "", "fit"], [438, 2, 1, "", "fit_predict"], [438, 2, 1, "", "fit_transform"], [438, 2, 1, "", "get_feature_names_out"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "predict"], [438, 2, 1, "", "score"], [438, 2, 1, "", "set_fit_request"], [438, 2, 1, "", "set_output"], [438, 2, 1, "", "set_params"], [438, 2, 1, "", "set_predict_request"], [438, 2, 1, "", "set_score_request"], [438, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[439, 2, 1, "", "fit"], [439, 2, 1, "", "fit_predict"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "predict"], [439, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "fit_transform"], [440, 2, 1, "", "get_feature_names_out"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "partial_fit"], [440, 2, 1, "", "predict"], [440, 2, 1, "", "score"], [440, 2, 1, "", "set_fit_request"], [440, 2, 1, "", "set_output"], [440, 2, 1, "", "set_params"], [440, 2, 1, "", "set_partial_fit_request"], [440, 2, 1, "", "set_predict_request"], [440, 2, 1, "", "set_score_request"], [440, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[442, 3, 1, "", "biclusters_"], [442, 2, 1, "", "fit"], [442, 2, 1, "", "get_indices"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "get_shape"], [442, 2, 1, "", "get_submatrix"], [442, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[444, 3, 1, "", "biclusters_"], [444, 2, 1, "", "fit"], [444, 2, 1, "", "get_indices"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "get_shape"], [444, 2, 1, "", "get_submatrix"], [444, 2, 1, "", "set_params"]], "sklearn.compose": [[455, 1, 1, "", "ColumnTransformer"], [456, 1, 1, "", "TransformedTargetRegressor"], [457, 4, 1, "", "make_column_selector"], [458, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[455, 2, 1, "", "fit"], [455, 2, 1, "", "fit_transform"], [455, 2, 1, "", "get_feature_names_out"], [455, 2, 1, "", "get_metadata_routing"], [455, 2, 1, "", "get_params"], [455, 3, 1, "", "named_transformers_"], [455, 2, 1, "", "set_output"], [455, 2, 1, "", "set_params"], [455, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[456, 2, 1, "", "fit"], [456, 2, 1, "", "get_metadata_routing"], [456, 2, 1, "", "get_params"], [456, 3, 1, "", "n_features_in_"], [456, 2, 1, "", "predict"], [456, 2, 1, "", "score"], [456, 2, 1, "", "set_params"], [456, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[460, 1, 1, "", "EllipticEnvelope"], [461, 1, 1, "", "EmpiricalCovariance"], [462, 1, 1, "", "GraphicalLasso"], [463, 1, 1, "", "GraphicalLassoCV"], [464, 1, 1, "", "LedoitWolf"], [465, 1, 1, "", "MinCovDet"], [466, 1, 1, "", "OAS"], [467, 1, 1, "", "ShrunkCovariance"], [468, 4, 1, "", "empirical_covariance"], [469, 4, 1, "", "graphical_lasso"], [470, 4, 1, "", "ledoit_wolf"], [471, 4, 1, "", "ledoit_wolf_shrinkage"], [413, 4, 1, "", "oas"], [472, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[460, 2, 1, "", "correct_covariance"], [460, 2, 1, "", "decision_function"], [460, 2, 1, "", "error_norm"], [460, 2, 1, "", "fit"], [460, 2, 1, "", "fit_predict"], [460, 2, 1, "", "get_metadata_routing"], [460, 2, 1, "", "get_params"], [460, 2, 1, "", "get_precision"], [460, 2, 1, "", "mahalanobis"], [460, 2, 1, "", "predict"], [460, 2, 1, "", "reweight_covariance"], [460, 2, 1, "", "score"], [460, 2, 1, "", "score_samples"], [460, 2, 1, "", "set_params"], [460, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[461, 2, 1, "", "error_norm"], [461, 2, 1, "", "fit"], [461, 2, 1, "", "get_metadata_routing"], [461, 2, 1, "", "get_params"], [461, 2, 1, "", "get_precision"], [461, 2, 1, "", "mahalanobis"], [461, 2, 1, "", "score"], [461, 2, 1, "", "set_params"], [461, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[462, 2, 1, "", "error_norm"], [462, 2, 1, "", "fit"], [462, 2, 1, "", "get_metadata_routing"], [462, 2, 1, "", "get_params"], [462, 2, 1, "", "get_precision"], [462, 2, 1, "", "mahalanobis"], [462, 2, 1, "", "score"], [462, 2, 1, "", "set_params"], [462, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[463, 2, 1, "", "error_norm"], [463, 2, 1, "", "fit"], [463, 2, 1, "", "get_metadata_routing"], [463, 2, 1, "", "get_params"], [463, 2, 1, "", "get_precision"], [463, 2, 1, "", "mahalanobis"], [463, 2, 1, "", "score"], [463, 2, 1, "", "set_params"], [463, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[464, 2, 1, "", "error_norm"], [464, 2, 1, "", "fit"], [464, 2, 1, "", "get_metadata_routing"], [464, 2, 1, "", "get_params"], [464, 2, 1, "", "get_precision"], [464, 2, 1, "", "mahalanobis"], [464, 2, 1, "", "score"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[465, 2, 1, "", "correct_covariance"], [465, 2, 1, "", "error_norm"], [465, 2, 1, "", "fit"], [465, 2, 1, "", "get_metadata_routing"], [465, 2, 1, "", "get_params"], [465, 2, 1, "", "get_precision"], [465, 2, 1, "", "mahalanobis"], [465, 2, 1, "", "reweight_covariance"], [465, 2, 1, "", "score"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[466, 2, 1, "", "error_norm"], [466, 2, 1, "", "fit"], [466, 2, 1, "", "get_metadata_routing"], [466, 2, 1, "", "get_params"], [466, 2, 1, "", "get_precision"], [466, 2, 1, "", "mahalanobis"], [466, 2, 1, "", "score"], [466, 2, 1, "", "set_params"], [466, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[467, 2, 1, "", "error_norm"], [467, 2, 1, "", "fit"], [467, 2, 1, "", "get_metadata_routing"], [467, 2, 1, "", "get_params"], [467, 2, 1, "", "get_precision"], [467, 2, 1, "", "mahalanobis"], [467, 2, 1, "", "score"], [467, 2, 1, "", "set_params"], [467, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[473, 1, 1, "", "CCA"], [474, 1, 1, "", "PLSCanonical"], [475, 1, 1, "", "PLSRegression"], [476, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[473, 2, 1, "", "fit"], [473, 2, 1, "", "fit_transform"], [473, 2, 1, "", "get_feature_names_out"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "inverse_transform"], [473, 2, 1, "", "predict"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_output"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_predict_request"], [473, 2, 1, "", "set_score_request"], [473, 2, 1, "", "set_transform_request"], [473, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[474, 2, 1, "", "fit"], [474, 2, 1, "", "fit_transform"], [474, 2, 1, "", "get_feature_names_out"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "inverse_transform"], [474, 2, 1, "", "predict"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_output"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_predict_request"], [474, 2, 1, "", "set_score_request"], [474, 2, 1, "", "set_transform_request"], [474, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[475, 2, 1, "", "fit"], [475, 2, 1, "", "fit_transform"], [475, 2, 1, "", "get_feature_names_out"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "inverse_transform"], [475, 2, 1, "", "predict"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_output"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_predict_request"], [475, 2, 1, "", "set_score_request"], [475, 2, 1, "", "set_transform_request"], [475, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[476, 2, 1, "", "fit"], [476, 2, 1, "", "fit_transform"], [476, 2, 1, "", "get_feature_names_out"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "set_output"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "transform"]], "sklearn.datasets": [[477, 4, 1, "", "clear_data_home"], [478, 4, 1, "", "dump_svmlight_file"], [479, 4, 1, "", "fetch_20newsgroups"], [480, 4, 1, "", "fetch_20newsgroups_vectorized"], [481, 4, 1, "", "fetch_california_housing"], [482, 4, 1, "", "fetch_covtype"], [483, 4, 1, "", "fetch_kddcup99"], [484, 4, 1, "", "fetch_lfw_pairs"], [485, 4, 1, "", "fetch_lfw_people"], [486, 4, 1, "", "fetch_olivetti_faces"], [487, 4, 1, "", "fetch_openml"], [488, 4, 1, "", "fetch_rcv1"], [489, 4, 1, "", "fetch_species_distributions"], [490, 4, 1, "", "get_data_home"], [491, 4, 1, "", "load_breast_cancer"], [492, 4, 1, "", "load_diabetes"], [493, 4, 1, "", "load_digits"], [494, 4, 1, "", "load_files"], [495, 4, 1, "", "load_iris"], [496, 4, 1, "", "load_linnerud"], [497, 4, 1, "", "load_sample_image"], [498, 4, 1, "", "load_sample_images"], [499, 4, 1, "", "load_svmlight_file"], [500, 4, 1, "", "load_svmlight_files"], [501, 4, 1, "", "load_wine"], [502, 4, 1, "", "make_biclusters"], [503, 4, 1, "", "make_blobs"], [504, 4, 1, "", "make_checkerboard"], [505, 4, 1, "", "make_circles"], [506, 4, 1, "", "make_classification"], [507, 4, 1, "", "make_friedman1"], [508, 4, 1, "", "make_friedman2"], [509, 4, 1, "", "make_friedman3"], [510, 4, 1, "", "make_gaussian_quantiles"], [511, 4, 1, "", "make_hastie_10_2"], [512, 4, 1, "", "make_low_rank_matrix"], [513, 4, 1, "", "make_moons"], [514, 4, 1, "", "make_multilabel_classification"], [515, 4, 1, "", "make_regression"], [516, 4, 1, "", "make_s_curve"], [517, 4, 1, "", "make_sparse_coded_signal"], [518, 4, 1, "", "make_sparse_spd_matrix"], [519, 4, 1, "", "make_sparse_uncorrelated"], [520, 4, 1, "", "make_spd_matrix"], [521, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[522, 1, 1, "", "DictionaryLearning"], [523, 1, 1, "", "FactorAnalysis"], [524, 1, 1, "", "FastICA"], [525, 1, 1, "", "IncrementalPCA"], [526, 1, 1, "", "KernelPCA"], [527, 1, 1, "", "LatentDirichletAllocation"], [528, 1, 1, "", "MiniBatchDictionaryLearning"], [529, 1, 1, "", "MiniBatchNMF"], [530, 1, 1, "", "MiniBatchSparsePCA"], [531, 1, 1, "", "NMF"], [532, 1, 1, "", "PCA"], [533, 1, 1, "", "SparseCoder"], [534, 1, 1, "", "SparsePCA"], [535, 1, 1, "", "TruncatedSVD"], [536, 4, 1, "", "dict_learning"], [537, 4, 1, "", "dict_learning_online"], [412, 4, 1, "", "fastica"], [538, 4, 1, "", "non_negative_factorization"], [539, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[522, 2, 1, "", "fit"], [522, 2, 1, "", "fit_transform"], [522, 2, 1, "", "get_feature_names_out"], [522, 2, 1, "", "get_metadata_routing"], [522, 2, 1, "", "get_params"], [522, 2, 1, "", "set_output"], [522, 2, 1, "", "set_params"], [522, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[523, 2, 1, "", "fit"], [523, 2, 1, "", "fit_transform"], [523, 2, 1, "", "get_covariance"], [523, 2, 1, "", "get_feature_names_out"], [523, 2, 1, "", "get_metadata_routing"], [523, 2, 1, "", "get_params"], [523, 2, 1, "", "get_precision"], [523, 2, 1, "", "score"], [523, 2, 1, "", "score_samples"], [523, 2, 1, "", "set_output"], [523, 2, 1, "", "set_params"], [523, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[524, 2, 1, "", "fit"], [524, 2, 1, "", "fit_transform"], [524, 2, 1, "", "get_feature_names_out"], [524, 2, 1, "", "get_metadata_routing"], [524, 2, 1, "", "get_params"], [524, 2, 1, "", "inverse_transform"], [524, 2, 1, "", "set_inverse_transform_request"], [524, 2, 1, "", "set_output"], [524, 2, 1, "", "set_params"], [524, 2, 1, "", "set_transform_request"], [524, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[525, 2, 1, "", "fit"], [525, 2, 1, "", "fit_transform"], [525, 2, 1, "", "get_covariance"], [525, 2, 1, "", "get_feature_names_out"], [525, 2, 1, "", "get_metadata_routing"], [525, 2, 1, "", "get_params"], [525, 2, 1, "", "get_precision"], [525, 2, 1, "", "inverse_transform"], [525, 2, 1, "", "partial_fit"], [525, 2, 1, "", "set_output"], [525, 2, 1, "", "set_params"], [525, 2, 1, "", "set_partial_fit_request"], [525, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[526, 2, 1, "", "fit"], [526, 2, 1, "", "fit_transform"], [526, 2, 1, "", "get_feature_names_out"], [526, 2, 1, "", "get_metadata_routing"], [526, 2, 1, "", "get_params"], [526, 2, 1, "", "inverse_transform"], [526, 2, 1, "", "set_output"], [526, 2, 1, "", "set_params"], [526, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[527, 2, 1, "", "fit"], [527, 2, 1, "", "fit_transform"], [527, 2, 1, "", "get_feature_names_out"], [527, 2, 1, "", "get_metadata_routing"], [527, 2, 1, "", "get_params"], [527, 2, 1, "", "partial_fit"], [527, 2, 1, "", "perplexity"], [527, 2, 1, "", "score"], [527, 2, 1, "", "set_output"], [527, 2, 1, "", "set_params"], [527, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[528, 2, 1, "", "fit"], [528, 2, 1, "", "fit_transform"], [528, 2, 1, "", "get_feature_names_out"], [528, 2, 1, "", "get_metadata_routing"], [528, 2, 1, "", "get_params"], [528, 2, 1, "", "partial_fit"], [528, 2, 1, "", "set_output"], [528, 2, 1, "", "set_params"], [528, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "fit_transform"], [529, 2, 1, "", "get_feature_names_out"], [529, 2, 1, "", "get_metadata_routing"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "inverse_transform"], [529, 2, 1, "", "partial_fit"], [529, 2, 1, "", "set_output"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "set_partial_fit_request"], [529, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_metadata_routing"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "inverse_transform"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "inverse_transform"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_covariance"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "get_precision"], [532, 2, 1, "", "inverse_transform"], [532, 2, 1, "", "score"], [532, 2, 1, "", "score_samples"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 3, 1, "", "n_components_"], [533, 3, 1, "", "n_features_in_"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "inverse_transform"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "inverse_transform"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[540, 1, 1, "", "LinearDiscriminantAnalysis"], [541, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[540, 2, 1, "", "decision_function"], [540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "predict"], [540, 2, 1, "", "predict_log_proba"], [540, 2, 1, "", "predict_proba"], [540, 2, 1, "", "score"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "set_score_request"], [540, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[541, 2, 1, "", "decision_function"], [541, 2, 1, "", "fit"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "predict"], [541, 2, 1, "", "predict_log_proba"], [541, 2, 1, "", "predict_proba"], [541, 2, 1, "", "score"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[542, 1, 1, "", "DummyClassifier"], [543, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "predict"], [542, 2, 1, "", "predict_log_proba"], [542, 2, 1, "", "predict_proba"], [542, 2, 1, "", "score"], [542, 2, 1, "", "set_fit_request"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "predict"], [543, 2, 1, "", "score"], [543, 2, 1, "", "set_fit_request"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "set_predict_request"], [543, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[544, 1, 1, "", "AdaBoostClassifier"], [545, 1, 1, "", "AdaBoostRegressor"], [546, 1, 1, "", "BaggingClassifier"], [547, 1, 1, "", "BaggingRegressor"], [548, 1, 1, "", "ExtraTreesClassifier"], [549, 1, 1, "", "ExtraTreesRegressor"], [550, 1, 1, "", "GradientBoostingClassifier"], [551, 1, 1, "", "GradientBoostingRegressor"], [552, 1, 1, "", "HistGradientBoostingClassifier"], [553, 1, 1, "", "HistGradientBoostingRegressor"], [554, 1, 1, "", "IsolationForest"], [555, 1, 1, "", "RandomForestClassifier"], [556, 1, 1, "", "RandomForestRegressor"], [557, 1, 1, "", "RandomTreesEmbedding"], [558, 1, 1, "", "StackingClassifier"], [559, 1, 1, "", "StackingRegressor"], [560, 1, 1, "", "VotingClassifier"], [561, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[544, 3, 1, "", "base_estimator_"], [544, 2, 1, "", "decision_function"], [544, 3, 1, "", "feature_importances_"], [544, 2, 1, "", "fit"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "predict_log_proba"], [544, 2, 1, "", "predict_proba"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_fit_request"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "set_score_request"], [544, 2, 1, "", "staged_decision_function"], [544, 2, 1, "", "staged_predict"], [544, 2, 1, "", "staged_predict_proba"], [544, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[545, 3, 1, "", "base_estimator_"], [545, 3, 1, "", "feature_importances_"], [545, 2, 1, "", "fit"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_fit_request"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "set_score_request"], [545, 2, 1, "", "staged_predict"], [545, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[546, 3, 1, "", "base_estimator_"], [546, 2, 1, "", "decision_function"], [546, 3, 1, "", "estimators_samples_"], [546, 2, 1, "", "fit"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "predict"], [546, 2, 1, "", "predict_log_proba"], [546, 2, 1, "", "predict_proba"], [546, 2, 1, "", "score"], [546, 2, 1, "", "set_fit_request"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[547, 3, 1, "", "base_estimator_"], [547, 3, 1, "", "estimators_samples_"], [547, 2, 1, "", "fit"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_fit_request"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[548, 2, 1, "", "apply"], [548, 3, 1, "", "base_estimator_"], [548, 2, 1, "", "decision_path"], [548, 3, 1, "", "feature_importances_"], [548, 2, 1, "", "fit"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "predict_log_proba"], [548, 2, 1, "", "predict_proba"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_fit_request"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[549, 2, 1, "", "apply"], [549, 3, 1, "", "base_estimator_"], [549, 2, 1, "", "decision_path"], [549, 3, 1, "", "feature_importances_"], [549, 2, 1, "", "fit"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_fit_request"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[550, 2, 1, "", "apply"], [550, 3, 1, "", "base_estimator_"], [550, 2, 1, "", "decision_function"], [550, 3, 1, "", "feature_importances_"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_log_proba"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_fit_request"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"], [550, 2, 1, "", "staged_decision_function"], [550, 2, 1, "", "staged_predict"], [550, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[551, 2, 1, "", "apply"], [551, 3, 1, "", "base_estimator_"], [551, 3, 1, "", "feature_importances_"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"], [551, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[552, 2, 1, "", "decision_function"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 3, 1, "", "n_iter_"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "predict_proba"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"], [552, 2, 1, "", "staged_decision_function"], [552, 2, 1, "", "staged_predict"], [552, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 3, 1, "", "n_iter_"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"], [553, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[554, 3, 1, "", "base_estimator_"], [554, 2, 1, "", "decision_function"], [554, 3, 1, "", "estimators_samples_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "fit_predict"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "score_samples"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[555, 2, 1, "", "apply"], [555, 3, 1, "", "base_estimator_"], [555, 2, 1, "", "decision_path"], [555, 3, 1, "", "feature_importances_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[556, 2, 1, "", "apply"], [556, 3, 1, "", "base_estimator_"], [556, 2, 1, "", "decision_path"], [556, 3, 1, "", "feature_importances_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[557, 2, 1, "", "apply"], [557, 3, 1, "", "base_estimator_"], [557, 2, 1, "", "decision_path"], [557, 3, 1, "", "feature_importances_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "fit_transform"], [557, 2, 1, "", "get_feature_names_out"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_output"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[558, 2, 1, "", "decision_function"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "fit_transform"], [558, 2, 1, "", "get_feature_names_out"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 3, 1, "", "n_features_in_"], [558, 3, 1, "", "named_estimators"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_output"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"], [558, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[559, 2, 1, "", "fit"], [559, 2, 1, "", "fit_transform"], [559, 2, 1, "", "get_feature_names_out"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 3, 1, "", "n_features_in_"], [559, 3, 1, "", "named_estimators"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_output"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[560, 2, 1, "", "fit"], [560, 2, 1, "", "fit_transform"], [560, 2, 1, "", "get_feature_names_out"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 3, 1, "", "n_features_in_"], [560, 3, 1, "", "named_estimators"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_output"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[561, 2, 1, "", "fit"], [561, 2, 1, "", "fit_transform"], [561, 2, 1, "", "get_feature_names_out"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 3, 1, "", "n_features_in_"], [561, 3, 1, "", "named_estimators"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_output"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "transform"]], "sklearn.exceptions": [[562, 1, 1, "", "ConvergenceWarning"], [563, 1, 1, "", "DataConversionWarning"], [564, 1, 1, "", "DataDimensionalityWarning"], [565, 1, 1, "", "EfficiencyWarning"], [566, 1, 1, "", "FitFailedWarning"], [567, 1, 1, "", "InconsistentVersionWarning"], [568, 1, 1, "", "NotFittedError"], [569, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[562, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[563, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[564, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[565, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[566, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[567, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[568, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[569, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[570, 0, 0, "-", "enable_halving_search_cv"], [571, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[572, 1, 1, "", "DictVectorizer"], [573, 1, 1, "", "FeatureHasher"], [399, 0, 0, "-", "image"], [399, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_feature_names_out"], [572, 2, 1, "", "get_metadata_routing"], [572, 2, 1, "", "get_params"], [572, 2, 1, "", "inverse_transform"], [572, 2, 1, "", "restrict"], [572, 2, 1, "", "set_inverse_transform_request"], [572, 2, 1, "", "set_output"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_metadata_routing"], [573, 2, 1, "", "get_params"], [573, 2, 1, "", "set_output"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "set_transform_request"], [573, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[574, 1, 1, "", "PatchExtractor"], [575, 4, 1, "", "extract_patches_2d"], [576, 4, 1, "", "grid_to_graph"], [577, 4, 1, "", "img_to_graph"], [578, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_metadata_routing"], [574, 2, 1, "", "get_params"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[579, 1, 1, "", "CountVectorizer"], [580, 1, 1, "", "HashingVectorizer"], [581, 1, 1, "", "TfidfTransformer"], [582, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[579, 2, 1, "", "build_analyzer"], [579, 2, 1, "", "build_preprocessor"], [579, 2, 1, "", "build_tokenizer"], [579, 2, 1, "", "decode"], [579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_metadata_routing"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "get_stop_words"], [579, 2, 1, "", "inverse_transform"], [579, 2, 1, "", "set_fit_request"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "set_transform_request"], [579, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[580, 2, 1, "", "build_analyzer"], [580, 2, 1, "", "build_preprocessor"], [580, 2, 1, "", "build_tokenizer"], [580, 2, 1, "", "decode"], [580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_metadata_routing"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "get_stop_words"], [580, 2, 1, "", "partial_fit"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_metadata_routing"], [581, 2, 1, "", "get_params"], [581, 3, 1, "", "idf_"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "set_transform_request"], [581, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[582, 2, 1, "", "build_analyzer"], [582, 2, 1, "", "build_preprocessor"], [582, 2, 1, "", "build_tokenizer"], [582, 2, 1, "", "decode"], [582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_feature_names_out"], [582, 2, 1, "", "get_metadata_routing"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "get_stop_words"], [582, 3, 1, "", "idf_"], [582, 2, 1, "", "inverse_transform"], [582, 2, 1, "", "set_fit_request"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "set_transform_request"], [582, 2, 1, "", "transform"]], "sklearn.feature_selection": [[583, 1, 1, "", "GenericUnivariateSelect"], [584, 1, 1, "", "RFE"], [585, 1, 1, "", "RFECV"], [586, 1, 1, "", "SelectFdr"], [587, 1, 1, "", "SelectFpr"], [588, 1, 1, "", "SelectFromModel"], [589, 1, 1, "", "SelectFwe"], [590, 1, 1, "", "SelectKBest"], [591, 1, 1, "", "SelectPercentile"], [592, 1, 1, "", "SelectorMixin"], [593, 1, 1, "", "SequentialFeatureSelector"], [594, 1, 1, "", "VarianceThreshold"], [595, 4, 1, "", "chi2"], [596, 4, 1, "", "f_classif"], [597, 4, 1, "", "f_regression"], [598, 4, 1, "", "mutual_info_classif"], [599, 4, 1, "", "mutual_info_regression"], [600, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_feature_names_out"], [583, 2, 1, "", "get_metadata_routing"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "get_support"], [583, 2, 1, "", "inverse_transform"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[584, 3, 1, "", "classes_"], [584, 2, 1, "", "decision_function"], [584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_feature_names_out"], [584, 2, 1, "", "get_metadata_routing"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "get_support"], [584, 2, 1, "", "inverse_transform"], [584, 2, 1, "", "predict"], [584, 2, 1, "", "predict_log_proba"], [584, 2, 1, "", "predict_proba"], [584, 2, 1, "", "score"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[585, 3, 1, "", "classes_"], [585, 2, 1, "", "decision_function"], [585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_feature_names_out"], [585, 2, 1, "", "get_metadata_routing"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "get_support"], [585, 2, 1, "", "inverse_transform"], [585, 2, 1, "", "predict"], [585, 2, 1, "", "predict_log_proba"], [585, 2, 1, "", "predict_proba"], [585, 2, 1, "", "score"], [585, 2, 1, "", "set_fit_request"], [585, 2, 1, "", "set_output"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "get_support"], [586, 2, 1, "", "inverse_transform"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_feature_names_out"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "get_support"], [587, 2, 1, "", "inverse_transform"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_support"], [588, 2, 1, "", "inverse_transform"], [588, 3, 1, "", "n_features_in_"], [588, 2, 1, "", "partial_fit"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 3, 1, "", "threshold_"], [588, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_support"], [589, 2, 1, "", "inverse_transform"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "get_support"], [590, 2, 1, "", "inverse_transform"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_support"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[601, 1, 1, "", "GaussianProcessClassifier"], [602, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 3, 1, "", "kernel_"], [601, 2, 1, "", "log_marginal_likelihood"], [601, 2, 1, "", "predict"], [601, 2, 1, "", "predict_proba"], [601, 2, 1, "", "score"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "log_marginal_likelihood"], [602, 2, 1, "", "predict"], [602, 2, 1, "", "sample_y"], [602, 2, 1, "", "score"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "set_predict_request"], [602, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[603, 1, 1, "", "CompoundKernel"], [604, 1, 1, "", "ConstantKernel"], [605, 1, 1, "", "DotProduct"], [606, 1, 1, "", "ExpSineSquared"], [607, 1, 1, "", "Exponentiation"], [608, 1, 1, "", "Hyperparameter"], [609, 1, 1, "", "Kernel"], [610, 1, 1, "", "Matern"], [611, 1, 1, "", "PairwiseKernel"], [612, 1, 1, "", "Product"], [613, 1, 1, "", "RBF"], [614, 1, 1, "", "RationalQuadratic"], [615, 1, 1, "", "Sum"], [616, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[603, 2, 1, "", "__call__"], [603, 3, 1, "", "bounds"], [603, 2, 1, "", "clone_with_theta"], [603, 2, 1, "", "diag"], [603, 2, 1, "", "get_params"], [603, 3, 1, "", "hyperparameters"], [603, 2, 1, "", "is_stationary"], [603, 3, 1, "", "n_dims"], [603, 3, 1, "", "requires_vector_input"], [603, 2, 1, "", "set_params"], [603, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[604, 2, 1, "", "__call__"], [604, 3, 1, "", "bounds"], [604, 2, 1, "", "clone_with_theta"], [604, 2, 1, "", "diag"], [604, 2, 1, "", "get_params"], [604, 3, 1, "", "hyperparameters"], [604, 2, 1, "", "is_stationary"], [604, 3, 1, "", "n_dims"], [604, 3, 1, "", "requires_vector_input"], [604, 2, 1, "", "set_params"], [604, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[605, 2, 1, "", "__call__"], [605, 3, 1, "", "bounds"], [605, 2, 1, "", "clone_with_theta"], [605, 2, 1, "", "diag"], [605, 2, 1, "", "get_params"], [605, 3, 1, "", "hyperparameters"], [605, 2, 1, "", "is_stationary"], [605, 3, 1, "", "n_dims"], [605, 3, 1, "", "requires_vector_input"], [605, 2, 1, "", "set_params"], [605, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[606, 2, 1, "", "__call__"], [606, 3, 1, "", "bounds"], [606, 2, 1, "", "clone_with_theta"], [606, 2, 1, "", "diag"], [606, 2, 1, "", "get_params"], [606, 3, 1, "", "hyperparameter_length_scale"], [606, 3, 1, "", "hyperparameters"], [606, 2, 1, "", "is_stationary"], [606, 3, 1, "", "n_dims"], [606, 3, 1, "", "requires_vector_input"], [606, 2, 1, "", "set_params"], [606, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[607, 2, 1, "", "__call__"], [607, 3, 1, "", "bounds"], [607, 2, 1, "", "clone_with_theta"], [607, 2, 1, "", "diag"], [607, 2, 1, "", "get_params"], [607, 3, 1, "", "hyperparameters"], [607, 2, 1, "", "is_stationary"], [607, 3, 1, "", "n_dims"], [607, 3, 1, "", "requires_vector_input"], [607, 2, 1, "", "set_params"], [607, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[608, 2, 1, "", "__call__"], [608, 5, 1, "", "bounds"], [608, 2, 1, "", "count"], [608, 5, 1, "", "fixed"], [608, 2, 1, "", "index"], [608, 5, 1, "", "n_elements"], [608, 5, 1, "", "name"], [608, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[609, 2, 1, "", "__call__"], [609, 3, 1, "", "bounds"], [609, 2, 1, "", "clone_with_theta"], [609, 2, 1, "", "diag"], [609, 2, 1, "", "get_params"], [609, 3, 1, "", "hyperparameters"], [609, 2, 1, "", "is_stationary"], [609, 3, 1, "", "n_dims"], [609, 3, 1, "", "requires_vector_input"], [609, 2, 1, "", "set_params"], [609, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[610, 2, 1, "", "__call__"], [610, 3, 1, "", "bounds"], [610, 2, 1, "", "clone_with_theta"], [610, 2, 1, "", "diag"], [610, 2, 1, "", "get_params"], [610, 3, 1, "", "hyperparameters"], [610, 2, 1, "", "is_stationary"], [610, 3, 1, "", "n_dims"], [610, 3, 1, "", "requires_vector_input"], [610, 2, 1, "", "set_params"], [610, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[611, 2, 1, "", "__call__"], [611, 3, 1, "", "bounds"], [611, 2, 1, "", "clone_with_theta"], [611, 2, 1, "", "diag"], [611, 2, 1, "", "get_params"], [611, 3, 1, "", "hyperparameters"], [611, 2, 1, "", "is_stationary"], [611, 3, 1, "", "n_dims"], [611, 3, 1, "", "requires_vector_input"], [611, 2, 1, "", "set_params"], [611, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[612, 2, 1, "", "__call__"], [612, 3, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 3, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 3, 1, "", "n_dims"], [612, 3, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.impute": [[618, 1, 1, "", "IterativeImputer"], [619, 1, 1, "", "KNNImputer"], [620, 1, 1, "", "MissingIndicator"], [621, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[618, 2, 1, "", "fit"], [618, 2, 1, "", "fit_transform"], [618, 2, 1, "", "get_feature_names_out"], [618, 2, 1, "", "get_metadata_routing"], [618, 2, 1, "", "get_params"], [618, 2, 1, "", "set_output"], [618, 2, 1, "", "set_params"], [618, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[619, 2, 1, "", "fit"], [619, 2, 1, "", "fit_transform"], [619, 2, 1, "", "get_feature_names_out"], [619, 2, 1, "", "get_metadata_routing"], [619, 2, 1, "", "get_params"], [619, 2, 1, "", "set_output"], [619, 2, 1, "", "set_params"], [619, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "fit_transform"], [620, 2, 1, "", "get_feature_names_out"], [620, 2, 1, "", "get_metadata_routing"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "set_output"], [620, 2, 1, "", "set_params"], [620, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "fit_transform"], [621, 2, 1, "", "get_feature_names_out"], [621, 2, 1, "", "get_metadata_routing"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "inverse_transform"], [621, 2, 1, "", "set_output"], [621, 2, 1, "", "set_params"], [621, 2, 1, "", "transform"]], "sklearn.inspection": [[622, 1, 1, "", "DecisionBoundaryDisplay"], [623, 1, 1, "", "PartialDependenceDisplay"], [624, 4, 1, "", "partial_dependence"], [625, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[622, 2, 1, "", "from_estimator"], [622, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[623, 2, 1, "", "from_estimator"], [623, 2, 1, "", "plot"]], "sklearn.isotonic": [[626, 1, 1, "", "IsotonicRegression"], [627, 4, 1, "", "check_increasing"], [628, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "fit_transform"], [626, 2, 1, "", "get_feature_names_out"], [626, 2, 1, "", "get_metadata_routing"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "predict"], [626, 2, 1, "", "score"], [626, 2, 1, "", "set_fit_request"], [626, 2, 1, "", "set_output"], [626, 2, 1, "", "set_params"], [626, 2, 1, "", "set_predict_request"], [626, 2, 1, "", "set_score_request"], [626, 2, 1, "", "set_transform_request"], [626, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[629, 1, 1, "", "AdditiveChi2Sampler"], [630, 1, 1, "", "Nystroem"], [631, 1, 1, "", "PolynomialCountSketch"], [632, 1, 1, "", "RBFSampler"], [633, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "fit_transform"], [629, 2, 1, "", "get_feature_names_out"], [629, 2, 1, "", "get_metadata_routing"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "set_output"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "fit_transform"], [630, 2, 1, "", "get_feature_names_out"], [630, 2, 1, "", "get_metadata_routing"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "set_output"], [630, 2, 1, "", "set_params"], [630, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "fit_transform"], [631, 2, 1, "", "get_feature_names_out"], [631, 2, 1, "", "get_metadata_routing"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "set_output"], [631, 2, 1, "", "set_params"], [631, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "fit_transform"], [632, 2, 1, "", "get_feature_names_out"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "set_output"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "fit_transform"], [633, 2, 1, "", "get_feature_names_out"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "set_output"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[634, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_fit_request"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[635, 1, 1, "", "ARDRegression"], [636, 1, 1, "", "BayesianRidge"], [637, 1, 1, "", "ElasticNet"], [638, 1, 1, "", "ElasticNetCV"], [639, 1, 1, "", "GammaRegressor"], [640, 1, 1, "", "HuberRegressor"], [641, 1, 1, "", "Lars"], [642, 1, 1, "", "LarsCV"], [643, 1, 1, "", "Lasso"], [644, 1, 1, "", "LassoCV"], [645, 1, 1, "", "LassoLars"], [646, 1, 1, "", "LassoLarsCV"], [647, 1, 1, "", "LassoLarsIC"], [648, 1, 1, "", "LinearRegression"], [649, 1, 1, "", "LogisticRegression"], [650, 1, 1, "", "LogisticRegressionCV"], [651, 1, 1, "", "MultiTaskElasticNet"], [652, 1, 1, "", "MultiTaskElasticNetCV"], [653, 1, 1, "", "MultiTaskLasso"], [654, 1, 1, "", "MultiTaskLassoCV"], [655, 1, 1, "", "OrthogonalMatchingPursuit"], [656, 1, 1, "", "OrthogonalMatchingPursuitCV"], [657, 1, 1, "", "PassiveAggressiveClassifier"], [658, 4, 1, "", "PassiveAggressiveRegressor"], [659, 1, 1, "", "Perceptron"], [660, 1, 1, "", "PoissonRegressor"], [661, 1, 1, "", "QuantileRegressor"], [662, 1, 1, "", "RANSACRegressor"], [663, 1, 1, "", "Ridge"], [664, 1, 1, "", "RidgeCV"], [665, 1, 1, "", "RidgeClassifier"], [666, 1, 1, "", "RidgeClassifierCV"], [667, 1, 1, "", "SGDClassifier"], [668, 1, 1, "", "SGDOneClassSVM"], [669, 1, 1, "", "SGDRegressor"], [670, 1, 1, "", "TheilSenRegressor"], [671, 1, 1, "", "TweedieRegressor"], [672, 4, 1, "", "enet_path"], [673, 4, 1, "", "lars_path"], [674, 4, 1, "", "lars_path_gram"], [675, 4, 1, "", "lasso_path"], [676, 4, 1, "", "orthogonal_mp"], [677, 4, 1, "", "orthogonal_mp_gram"], [678, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "set_predict_request"], [635, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_fit_request"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "set_predict_request"], [636, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "path"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_fit_request"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "set_score_request"], [637, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "path"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_fit_request"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_fit_request"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_fit_request"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_fit_request"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_fit_request"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "path"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_score_request"], [643, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "path"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[649, 2, 1, "", "decision_function"], [649, 2, 1, "", "densify"], [649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "predict_log_proba"], [649, 2, 1, "", "predict_proba"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"], [649, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[650, 2, 1, "", "decision_function"], [650, 2, 1, "", "densify"], [650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "predict_log_proba"], [650, 2, 1, "", "predict_proba"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"], [650, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "path"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"], [651, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "path"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "path"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"], [653, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "path"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[657, 2, 1, "", "decision_function"], [657, 2, 1, "", "densify"], [657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "partial_fit"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_partial_fit_request"], [657, 2, 1, "", "set_score_request"], [657, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[659, 2, 1, "", "decision_function"], [659, 2, 1, "", "densify"], [659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "partial_fit"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_partial_fit_request"], [659, 2, 1, "", "set_score_request"], [659, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[665, 3, 1, "", "classes_"], [665, 2, 1, "", "decision_function"], [665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[666, 3, 1, "", "classes_"], [666, 2, 1, "", "decision_function"], [666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[667, 2, 1, "", "decision_function"], [667, 2, 1, "", "densify"], [667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "partial_fit"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "predict_log_proba"], [667, 2, 1, "", "predict_proba"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_partial_fit_request"], [667, 2, 1, "", "set_score_request"], [667, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[668, 2, 1, "", "decision_function"], [668, 2, 1, "", "densify"], [668, 2, 1, "", "fit"], [668, 2, 1, "", "fit_predict"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "partial_fit"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score_samples"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_partial_fit_request"], [668, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[669, 2, 1, "", "densify"], [669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "partial_fit"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_partial_fit_request"], [669, 2, 1, "", "set_score_request"], [669, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[679, 1, 1, "", "Isomap"], [680, 1, 1, "", "LocallyLinearEmbedding"], [681, 1, 1, "", "MDS"], [682, 1, 1, "", "SpectralEmbedding"], [683, 1, 1, "", "TSNE"], [684, 4, 1, "", "locally_linear_embedding"], [685, 4, 1, "", "smacof"], [686, 4, 1, "", "spectral_embedding"], [687, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[679, 2, 1, "", "fit"], [679, 2, 1, "", "fit_transform"], [679, 2, 1, "", "get_feature_names_out"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "reconstruction_error"], [679, 2, 1, "", "set_output"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[680, 2, 1, "", "fit"], [680, 2, 1, "", "fit_transform"], [680, 2, 1, "", "get_feature_names_out"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "set_output"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[681, 2, 1, "", "fit"], [681, 2, 1, "", "fit_transform"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[682, 2, 1, "", "fit"], [682, 2, 1, "", "fit_transform"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[683, 2, 1, "", "fit"], [683, 2, 1, "", "fit_transform"], [683, 2, 1, "", "get_feature_names_out"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "set_output"], [683, 2, 1, "", "set_params"]], "sklearn.metrics": [[688, 1, 1, "", "ConfusionMatrixDisplay"], [689, 1, 1, "", "DetCurveDisplay"], [690, 1, 1, "", "DistanceMetric"], [691, 1, 1, "", "PrecisionRecallDisplay"], [692, 1, 1, "", "PredictionErrorDisplay"], [693, 1, 1, "", "RocCurveDisplay"], [694, 4, 1, "", "accuracy_score"], [695, 4, 1, "", "adjusted_mutual_info_score"], [696, 4, 1, "", "adjusted_rand_score"], [697, 4, 1, "", "auc"], [698, 4, 1, "", "average_precision_score"], [699, 4, 1, "", "balanced_accuracy_score"], [700, 4, 1, "", "brier_score_loss"], [701, 4, 1, "", "calinski_harabasz_score"], [702, 4, 1, "", "check_scoring"], [703, 4, 1, "", "class_likelihood_ratios"], [704, 4, 1, "", "classification_report"], [399, 0, 0, "-", "cluster"], [707, 4, 1, "", "cohen_kappa_score"], [708, 4, 1, "", "completeness_score"], [709, 4, 1, "", "confusion_matrix"], [710, 4, 1, "", "consensus_score"], [711, 4, 1, "", "coverage_error"], [712, 4, 1, "", "d2_absolute_error_score"], [713, 4, 1, "", "d2_pinball_score"], [714, 4, 1, "", "d2_tweedie_score"], [715, 4, 1, "", "davies_bouldin_score"], [716, 4, 1, "", "dcg_score"], [717, 4, 1, "", "det_curve"], [718, 4, 1, "", "explained_variance_score"], [719, 4, 1, "", "f1_score"], [720, 4, 1, "", "fbeta_score"], [721, 4, 1, "", "fowlkes_mallows_score"], [722, 4, 1, "", "get_scorer"], [723, 4, 1, "", "get_scorer_names"], [724, 4, 1, "", "hamming_loss"], [725, 4, 1, "", "hinge_loss"], [726, 4, 1, "", "homogeneity_completeness_v_measure"], [727, 4, 1, "", "homogeneity_score"], [728, 4, 1, "", "jaccard_score"], [729, 4, 1, "", "label_ranking_average_precision_score"], [730, 4, 1, "", "label_ranking_loss"], [731, 4, 1, "", "log_loss"], [732, 4, 1, "", "make_scorer"], [733, 4, 1, "", "matthews_corrcoef"], [734, 4, 1, "", "max_error"], [735, 4, 1, "", "mean_absolute_error"], [736, 4, 1, "", "mean_absolute_percentage_error"], [737, 4, 1, "", "mean_gamma_deviance"], [738, 4, 1, "", "mean_pinball_loss"], [739, 4, 1, "", "mean_poisson_deviance"], [740, 4, 1, "", "mean_squared_error"], [741, 4, 1, "", "mean_squared_log_error"], [742, 4, 1, "", "mean_tweedie_deviance"], [743, 4, 1, "", "median_absolute_error"], [744, 4, 1, "", "multilabel_confusion_matrix"], [745, 4, 1, "", "mutual_info_score"], [746, 4, 1, "", "ndcg_score"], [747, 4, 1, "", "normalized_mutual_info_score"], [399, 0, 0, "-", "pairwise"], [768, 4, 1, "", "pairwise_distances"], [769, 4, 1, "", "pairwise_distances_argmin"], [770, 4, 1, "", "pairwise_distances_argmin_min"], [771, 4, 1, "", "pairwise_distances_chunked"], [772, 4, 1, "", "precision_recall_curve"], [773, 4, 1, "", "precision_recall_fscore_support"], [774, 4, 1, "", "precision_score"], [775, 4, 1, "", "r2_score"], [776, 4, 1, "", "rand_score"], [777, 4, 1, "", "recall_score"], [778, 4, 1, "", "roc_auc_score"], [779, 4, 1, "", "roc_curve"], [780, 4, 1, "", "silhouette_samples"], [781, 4, 1, "", "silhouette_score"], [782, 4, 1, "", "top_k_accuracy_score"], [783, 4, 1, "", "v_measure_score"], [784, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[688, 2, 1, "", "from_estimator"], [688, 2, 1, "", "from_predictions"], [688, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[689, 2, 1, "", "from_estimator"], [689, 2, 1, "", "from_predictions"], [689, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[690, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[691, 2, 1, "", "from_estimator"], [691, 2, 1, "", "from_predictions"], [691, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[692, 2, 1, "", "from_estimator"], [692, 2, 1, "", "from_predictions"], [692, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[693, 2, 1, "", "from_estimator"], [693, 2, 1, "", "from_predictions"], [693, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[705, 4, 1, "", "contingency_matrix"], [706, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[748, 4, 1, "", "additive_chi2_kernel"], [749, 4, 1, "", "chi2_kernel"], [750, 4, 1, "", "cosine_distances"], [751, 4, 1, "", "cosine_similarity"], [752, 4, 1, "", "distance_metrics"], [753, 4, 1, "", "euclidean_distances"], [754, 4, 1, "", "haversine_distances"], [755, 4, 1, "", "kernel_metrics"], [756, 4, 1, "", "laplacian_kernel"], [757, 4, 1, "", "linear_kernel"], [758, 4, 1, "", "manhattan_distances"], [759, 4, 1, "", "nan_euclidean_distances"], [760, 4, 1, "", "paired_cosine_distances"], [761, 4, 1, "", "paired_distances"], [762, 4, 1, "", "paired_euclidean_distances"], [763, 4, 1, "", "paired_manhattan_distances"], [764, 4, 1, "", "pairwise_kernels"], [765, 4, 1, "", "polynomial_kernel"], [766, 4, 1, "", "rbf_kernel"], [767, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[785, 1, 1, "", "BayesianGaussianMixture"], [786, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[785, 2, 1, "", "fit"], [785, 2, 1, "", "fit_predict"], [785, 2, 1, "", "get_metadata_routing"], [785, 2, 1, "", "get_params"], [785, 2, 1, "", "predict"], [785, 2, 1, "", "predict_proba"], [785, 2, 1, "", "sample"], [785, 2, 1, "", "score"], [785, 2, 1, "", "score_samples"], [785, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[786, 2, 1, "", "aic"], [786, 2, 1, "", "bic"], [786, 2, 1, "", "fit"], [786, 2, 1, "", "fit_predict"], [786, 2, 1, "", "get_metadata_routing"], [786, 2, 1, "", "get_params"], [786, 2, 1, "", "predict"], [786, 2, 1, "", "predict_proba"], [786, 2, 1, "", "sample"], [786, 2, 1, "", "score"], [786, 2, 1, "", "score_samples"], [786, 2, 1, "", "set_params"]], "sklearn.model_selection": [[787, 1, 1, "", "GridSearchCV"], [788, 1, 1, "", "GroupKFold"], [789, 1, 1, "", "GroupShuffleSplit"], [790, 1, 1, "", "HalvingGridSearchCV"], [791, 1, 1, "", "HalvingRandomSearchCV"], [792, 1, 1, "", "KFold"], [793, 1, 1, "", "LearningCurveDisplay"], [794, 1, 1, "", "LeaveOneGroupOut"], [795, 1, 1, "", "LeaveOneOut"], [796, 1, 1, "", "LeavePGroupsOut"], [797, 1, 1, "", "LeavePOut"], [798, 1, 1, "", "ParameterGrid"], [799, 1, 1, "", "ParameterSampler"], [800, 1, 1, "", "PredefinedSplit"], [801, 1, 1, "", "RandomizedSearchCV"], [802, 1, 1, "", "RepeatedKFold"], [803, 1, 1, "", "RepeatedStratifiedKFold"], [804, 1, 1, "", "ShuffleSplit"], [805, 1, 1, "", "StratifiedGroupKFold"], [806, 1, 1, "", "StratifiedKFold"], [807, 1, 1, "", "StratifiedShuffleSplit"], [808, 1, 1, "", "TimeSeriesSplit"], [809, 1, 1, "", "ValidationCurveDisplay"], [810, 4, 1, "", "check_cv"], [811, 4, 1, "", "cross_val_predict"], [812, 4, 1, "", "cross_val_score"], [813, 4, 1, "", "cross_validate"], [814, 4, 1, "", "learning_curve"], [815, 4, 1, "", "permutation_test_score"], [816, 4, 1, "", "train_test_split"], [817, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[787, 3, 1, "", "classes_"], [787, 2, 1, "", "decision_function"], [787, 2, 1, "", "fit"], [787, 2, 1, "", "get_metadata_routing"], [787, 2, 1, "", "get_params"], [787, 2, 1, "", "inverse_transform"], [787, 3, 1, "", "n_features_in_"], [787, 2, 1, "", "predict"], [787, 2, 1, "", "predict_log_proba"], [787, 2, 1, "", "predict_proba"], [787, 2, 1, "", "score"], [787, 2, 1, "", "score_samples"], [787, 2, 1, "", "set_fit_request"], [787, 2, 1, "", "set_params"], [787, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[788, 2, 1, "", "get_metadata_routing"], [788, 2, 1, "", "get_n_splits"], [788, 2, 1, "", "set_split_request"], [788, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[789, 2, 1, "", "get_metadata_routing"], [789, 2, 1, "", "get_n_splits"], [789, 2, 1, "", "set_split_request"], [789, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[790, 3, 1, "", "classes_"], [790, 2, 1, "", "decision_function"], [790, 2, 1, "", "fit"], [790, 2, 1, "", "get_metadata_routing"], [790, 2, 1, "", "get_params"], [790, 2, 1, "", "inverse_transform"], [790, 3, 1, "", "n_features_in_"], [790, 2, 1, "", "predict"], [790, 2, 1, "", "predict_log_proba"], [790, 2, 1, "", "predict_proba"], [790, 2, 1, "", "score"], [790, 2, 1, "", "score_samples"], [790, 2, 1, "", "set_fit_request"], [790, 2, 1, "", "set_params"], [790, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[791, 3, 1, "", "classes_"], [791, 2, 1, "", "decision_function"], [791, 2, 1, "", "fit"], [791, 2, 1, "", "get_metadata_routing"], [791, 2, 1, "", "get_params"], [791, 2, 1, "", "inverse_transform"], [791, 3, 1, "", "n_features_in_"], [791, 2, 1, "", "predict"], [791, 2, 1, "", "predict_log_proba"], [791, 2, 1, "", "predict_proba"], [791, 2, 1, "", "score"], [791, 2, 1, "", "score_samples"], [791, 2, 1, "", "set_fit_request"], [791, 2, 1, "", "set_params"], [791, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[792, 2, 1, "", "get_metadata_routing"], [792, 2, 1, "", "get_n_splits"], [792, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[793, 2, 1, "", "from_estimator"], [793, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[794, 2, 1, "", "get_metadata_routing"], [794, 2, 1, "", "get_n_splits"], [794, 2, 1, "", "set_split_request"], [794, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[795, 2, 1, "", "get_metadata_routing"], [795, 2, 1, "", "get_n_splits"], [795, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[796, 2, 1, "", "get_metadata_routing"], [796, 2, 1, "", "get_n_splits"], [796, 2, 1, "", "set_split_request"], [796, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_n_splits"], [797, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_n_splits"], [800, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[801, 3, 1, "", "classes_"], [801, 2, 1, "", "decision_function"], [801, 2, 1, "", "fit"], [801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "inverse_transform"], [801, 3, 1, "", "n_features_in_"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "predict_log_proba"], [801, 2, 1, "", "predict_proba"], [801, 2, 1, "", "score"], [801, 2, 1, "", "score_samples"], [801, 2, 1, "", "set_fit_request"], [801, 2, 1, "", "set_params"], [801, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_n_splits"], [803, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_n_splits"], [804, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "set_split_request"], [805, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_n_splits"], [807, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[809, 2, 1, "", "from_estimator"], [809, 2, 1, "", "plot"]], "sklearn.multiclass": [[818, 1, 1, "", "OneVsOneClassifier"], [819, 1, 1, "", "OneVsRestClassifier"], [820, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[818, 2, 1, "", "decision_function"], [818, 2, 1, "", "fit"], [818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_params"], [818, 3, 1, "", "n_classes_"], [818, 2, 1, "", "partial_fit"], [818, 2, 1, "", "predict"], [818, 2, 1, "", "score"], [818, 2, 1, "", "set_params"], [818, 2, 1, "", "set_partial_fit_request"], [818, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[819, 2, 1, "", "decision_function"], [819, 2, 1, "", "fit"], [819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_params"], [819, 3, 1, "", "multilabel_"], [819, 3, 1, "", "n_classes_"], [819, 2, 1, "", "partial_fit"], [819, 2, 1, "", "predict"], [819, 2, 1, "", "predict_proba"], [819, 2, 1, "", "score"], [819, 2, 1, "", "set_params"], [819, 2, 1, "", "set_partial_fit_request"], [819, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[820, 2, 1, "", "fit"], [820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_params"], [820, 2, 1, "", "predict"], [820, 2, 1, "", "score"], [820, 2, 1, "", "set_params"], [820, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[821, 1, 1, "", "ClassifierChain"], [822, 1, 1, "", "MultiOutputClassifier"], [823, 1, 1, "", "MultiOutputRegressor"], [824, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[821, 2, 1, "", "decision_function"], [821, 2, 1, "", "fit"], [821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_params"], [821, 2, 1, "", "predict"], [821, 2, 1, "", "predict_proba"], [821, 2, 1, "", "score"], [821, 2, 1, "", "set_params"], [821, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "partial_fit"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "predict_proba"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_fit_request"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "partial_fit"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "score"], [823, 2, 1, "", "set_fit_request"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "set_partial_fit_request"], [823, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[824, 2, 1, "", "fit"], [824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_params"], [824, 2, 1, "", "predict"], [824, 2, 1, "", "score"], [824, 2, 1, "", "set_params"], [824, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[825, 1, 1, "", "BernoulliNB"], [826, 1, 1, "", "CategoricalNB"], [827, 1, 1, "", "ComplementNB"], [828, 1, 1, "", "GaussianNB"], [829, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[825, 2, 1, "", "fit"], [825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "partial_fit"], [825, 2, 1, "", "predict"], [825, 2, 1, "", "predict_joint_log_proba"], [825, 2, 1, "", "predict_log_proba"], [825, 2, 1, "", "predict_proba"], [825, 2, 1, "", "score"], [825, 2, 1, "", "set_fit_request"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "set_partial_fit_request"], [825, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[826, 2, 1, "", "fit"], [826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "partial_fit"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "predict_joint_log_proba"], [826, 2, 1, "", "predict_log_proba"], [826, 2, 1, "", "predict_proba"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_fit_request"], [826, 2, 1, "", "set_params"], [826, 2, 1, "", "set_partial_fit_request"], [826, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "partial_fit"], [827, 2, 1, "", "predict"], [827, 2, 1, "", "predict_joint_log_proba"], [827, 2, 1, "", "predict_log_proba"], [827, 2, 1, "", "predict_proba"], [827, 2, 1, "", "score"], [827, 2, 1, "", "set_fit_request"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "set_partial_fit_request"], [827, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "partial_fit"], [828, 2, 1, "", "predict"], [828, 2, 1, "", "predict_joint_log_proba"], [828, 2, 1, "", "predict_log_proba"], [828, 2, 1, "", "predict_proba"], [828, 2, 1, "", "score"], [828, 2, 1, "", "set_fit_request"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "set_partial_fit_request"], [828, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "partial_fit"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "predict_joint_log_proba"], [829, 2, 1, "", "predict_log_proba"], [829, 2, 1, "", "predict_proba"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_fit_request"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "set_partial_fit_request"], [829, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[830, 1, 1, "", "BallTree"], [831, 1, 1, "", "KDTree"], [832, 1, 1, "", "KNeighborsClassifier"], [833, 1, 1, "", "KNeighborsRegressor"], [834, 1, 1, "", "KNeighborsTransformer"], [835, 1, 1, "", "KernelDensity"], [836, 1, 1, "", "LocalOutlierFactor"], [837, 1, 1, "", "NearestCentroid"], [838, 1, 1, "", "NearestNeighbors"], [839, 1, 1, "", "NeighborhoodComponentsAnalysis"], [840, 1, 1, "", "RadiusNeighborsClassifier"], [841, 1, 1, "", "RadiusNeighborsRegressor"], [842, 1, 1, "", "RadiusNeighborsTransformer"], [843, 4, 1, "", "kneighbors_graph"], [844, 4, 1, "", "radius_neighbors_graph"], [845, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[830, 2, 1, "", "get_arrays"], [830, 2, 1, "", "get_n_calls"], [830, 2, 1, "", "get_tree_stats"], [830, 2, 1, "", "kernel_density"], [830, 2, 1, "", "query"], [830, 2, 1, "", "query_radius"], [830, 2, 1, "", "reset_n_calls"], [830, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[831, 2, 1, "", "get_arrays"], [831, 2, 1, "", "get_n_calls"], [831, 2, 1, "", "get_tree_stats"], [831, 2, 1, "", "kernel_density"], [831, 2, 1, "", "query"], [831, 2, 1, "", "query_radius"], [831, 2, 1, "", "reset_n_calls"], [831, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "kneighbors"], [832, 2, 1, "", "kneighbors_graph"], [832, 2, 1, "", "predict"], [832, 2, 1, "", "predict_proba"], [832, 2, 1, "", "score"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "kneighbors"], [833, 2, 1, "", "kneighbors_graph"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "fit_transform"], [834, 2, 1, "", "get_feature_names_out"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "kneighbors"], [834, 2, 1, "", "kneighbors_graph"], [834, 2, 1, "", "set_output"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "sample"], [835, 2, 1, "", "score"], [835, 2, 1, "", "score_samples"], [835, 2, 1, "", "set_fit_request"], [835, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[836, 2, 1, "", "decision_function"], [836, 2, 1, "", "fit"], [836, 2, 1, "", "fit_predict"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "kneighbors"], [836, 2, 1, "", "kneighbors_graph"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "score_samples"], [836, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "kneighbors"], [838, 2, 1, "", "kneighbors_graph"], [838, 2, 1, "", "radius_neighbors"], [838, 2, 1, "", "radius_neighbors_graph"], [838, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "fit_transform"], [839, 2, 1, "", "get_feature_names_out"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "set_output"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "radius_neighbors"], [840, 2, 1, "", "radius_neighbors_graph"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "radius_neighbors"], [841, 2, 1, "", "radius_neighbors_graph"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "fit_transform"], [842, 2, 1, "", "get_feature_names_out"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "radius_neighbors"], [842, 2, 1, "", "radius_neighbors_graph"], [842, 2, 1, "", "set_output"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "transform"]], "sklearn.neural_network": [[846, 1, 1, "", "BernoulliRBM"], [847, 1, 1, "", "MLPClassifier"], [848, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "fit_transform"], [846, 2, 1, "", "get_feature_names_out"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "gibbs"], [846, 2, 1, "", "partial_fit"], [846, 2, 1, "", "score_samples"], [846, 2, 1, "", "set_output"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "partial_fit"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "predict_log_proba"], [847, 2, 1, "", "predict_proba"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_partial_fit_request"], [847, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "partial_fit"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[849, 1, 1, "", "FeatureUnion"], [850, 1, 1, "", "Pipeline"], [851, 4, 1, "", "make_pipeline"], [852, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[849, 3, 1, "", "feature_names_in_"], [849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 3, 1, "", "n_features_in_"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[850, 3, 1, "", "classes_"], [850, 2, 1, "", "decision_function"], [850, 3, 1, "", "feature_names_in_"], [850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_predict"], [850, 2, 1, "", "fit_transform"], [850, 2, 1, "", "get_feature_names_out"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "inverse_transform"], [850, 3, 1, "", "n_features_in_"], [850, 3, 1, "", "named_steps"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "predict_log_proba"], [850, 2, 1, "", "predict_proba"], [850, 2, 1, "", "score"], [850, 2, 1, "", "score_samples"], [850, 2, 1, "", "set_output"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_score_request"], [850, 2, 1, "", "transform"]], "sklearn.preprocessing": [[853, 1, 1, "", "Binarizer"], [854, 1, 1, "", "FunctionTransformer"], [855, 1, 1, "", "KBinsDiscretizer"], [856, 1, 1, "", "KernelCenterer"], [857, 1, 1, "", "LabelBinarizer"], [858, 1, 1, "", "LabelEncoder"], [859, 1, 1, "", "MaxAbsScaler"], [860, 1, 1, "", "MinMaxScaler"], [861, 1, 1, "", "MultiLabelBinarizer"], [862, 1, 1, "", "Normalizer"], [863, 1, 1, "", "OneHotEncoder"], [864, 1, 1, "", "OrdinalEncoder"], [865, 1, 1, "", "PolynomialFeatures"], [866, 1, 1, "", "PowerTransformer"], [867, 1, 1, "", "QuantileTransformer"], [868, 1, 1, "", "RobustScaler"], [869, 1, 1, "", "SplineTransformer"], [870, 1, 1, "", "StandardScaler"], [871, 1, 1, "", "TargetEncoder"], [872, 4, 1, "", "add_dummy_feature"], [873, 4, 1, "", "binarize"], [874, 4, 1, "", "label_binarize"], [875, 4, 1, "", "maxabs_scale"], [876, 4, 1, "", "minmax_scale"], [877, 4, 1, "", "normalize"], [878, 4, 1, "", "power_transform"], [879, 4, 1, "", "quantile_transform"], [880, 4, 1, "", "robust_scale"], [881, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "set_transform_request"], [853, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_transform"], [854, 2, 1, "", "get_feature_names_out"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "inverse_transform"], [854, 2, 1, "", "set_output"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_feature_names_out"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "inverse_transform"], [855, 2, 1, "", "set_fit_request"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "set_fit_request"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "set_transform_request"], [856, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "inverse_transform"], [857, 2, 1, "", "set_inverse_transform_request"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "inverse_transform"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "inverse_transform"], [859, 2, 1, "", "partial_fit"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "inverse_transform"], [860, 2, 1, "", "partial_fit"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "inverse_transform"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "set_transform_request"], [862, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 3, 1, "", "infrequent_categories_"], [863, 2, 1, "", "inverse_transform"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 3, 1, "", "infrequent_categories_"], [864, 2, 1, "", "inverse_transform"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 3, 1, "", "powers_"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_feature_names_out"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "inverse_transform"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "inverse_transform"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "set_fit_request"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "partial_fit"], [870, 2, 1, "", "set_fit_request"], [870, 2, 1, "", "set_inverse_transform_request"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "set_partial_fit_request"], [870, 2, 1, "", "set_transform_request"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 3, 1, "", "infrequent_categories_"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.random_projection": [[882, 1, 1, "", "GaussianRandomProjection"], [883, 1, 1, "", "SparseRandomProjection"], [884, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "inverse_transform"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[885, 1, 1, "", "LabelPropagation"], [886, 1, 1, "", "LabelSpreading"], [887, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "predict"], [885, 2, 1, "", "predict_proba"], [885, 2, 1, "", "score"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 2, 1, "", "predict"], [886, 2, 1, "", "predict_proba"], [886, 2, 1, "", "score"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[887, 2, 1, "", "decision_function"], [887, 2, 1, "", "fit"], [887, 2, 1, "", "get_metadata_routing"], [887, 2, 1, "", "get_params"], [887, 2, 1, "", "predict"], [887, 2, 1, "", "predict_log_proba"], [887, 2, 1, "", "predict_proba"], [887, 2, 1, "", "score"], [887, 2, 1, "", "set_params"]], "sklearn.svm": [[890, 1, 1, "", "LinearSVC"], [891, 1, 1, "", "LinearSVR"], [892, 1, 1, "", "NuSVC"], [893, 1, 1, "", "NuSVR"], [894, 1, 1, "", "OneClassSVM"], [895, 1, 1, "", "SVC"], [896, 1, 1, "", "SVR"], [897, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[890, 2, 1, "", "decision_function"], [890, 2, 1, "", "densify"], [890, 2, 1, "", "fit"], [890, 2, 1, "", "get_metadata_routing"], [890, 2, 1, "", "get_params"], [890, 2, 1, "", "predict"], [890, 2, 1, "", "score"], [890, 2, 1, "", "set_fit_request"], [890, 2, 1, "", "set_params"], [890, 2, 1, "", "set_score_request"], [890, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[891, 2, 1, "", "fit"], [891, 2, 1, "", "get_metadata_routing"], [891, 2, 1, "", "get_params"], [891, 2, 1, "", "predict"], [891, 2, 1, "", "score"], [891, 2, 1, "", "set_fit_request"], [891, 2, 1, "", "set_params"], [891, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[892, 3, 1, "", "coef_"], [892, 2, 1, "", "decision_function"], [892, 2, 1, "", "fit"], [892, 2, 1, "", "get_metadata_routing"], [892, 2, 1, "", "get_params"], [892, 3, 1, "", "n_support_"], [892, 2, 1, "", "predict"], [892, 2, 1, "", "predict_log_proba"], [892, 2, 1, "", "predict_proba"], [892, 3, 1, "", "probA_"], [892, 3, 1, "", "probB_"], [892, 2, 1, "", "score"], [892, 2, 1, "", "set_fit_request"], [892, 2, 1, "", "set_params"], [892, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[893, 3, 1, "", "coef_"], [893, 2, 1, "", "fit"], [893, 2, 1, "", "get_metadata_routing"], [893, 2, 1, "", "get_params"], [893, 3, 1, "", "n_support_"], [893, 2, 1, "", "predict"], [893, 2, 1, "", "score"], [893, 2, 1, "", "set_fit_request"], [893, 2, 1, "", "set_params"], [893, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[894, 3, 1, "", "coef_"], [894, 2, 1, "", "decision_function"], [894, 2, 1, "", "fit"], [894, 2, 1, "", "fit_predict"], [894, 2, 1, "", "get_metadata_routing"], [894, 2, 1, "", "get_params"], [894, 3, 1, "", "n_support_"], [894, 2, 1, "", "predict"], [894, 2, 1, "", "score_samples"], [894, 2, 1, "", "set_fit_request"], [894, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[895, 3, 1, "", "coef_"], [895, 2, 1, "", "decision_function"], [895, 2, 1, "", "fit"], [895, 2, 1, "", "get_metadata_routing"], [895, 2, 1, "", "get_params"], [895, 3, 1, "", "n_support_"], [895, 2, 1, "", "predict"], [895, 2, 1, "", "predict_log_proba"], [895, 2, 1, "", "predict_proba"], [895, 3, 1, "", "probA_"], [895, 3, 1, "", "probB_"], [895, 2, 1, "", "score"], [895, 2, 1, "", "set_fit_request"], [895, 2, 1, "", "set_params"], [895, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[896, 3, 1, "", "coef_"], [896, 2, 1, "", "fit"], [896, 2, 1, "", "get_metadata_routing"], [896, 2, 1, "", "get_params"], [896, 3, 1, "", "n_support_"], [896, 2, 1, "", "predict"], [896, 2, 1, "", "score"], [896, 2, 1, "", "set_fit_request"], [896, 2, 1, "", "set_params"], [896, 2, 1, "", "set_score_request"]], "sklearn.tree": [[898, 1, 1, "", "DecisionTreeClassifier"], [899, 1, 1, "", "DecisionTreeRegressor"], [900, 1, 1, "", "ExtraTreeClassifier"], [901, 1, 1, "", "ExtraTreeRegressor"], [902, 4, 1, "", "export_graphviz"], [903, 4, 1, "", "export_text"], [904, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[898, 2, 1, "", "apply"], [898, 2, 1, "", "cost_complexity_pruning_path"], [898, 2, 1, "", "decision_path"], [898, 3, 1, "", "feature_importances_"], [898, 2, 1, "", "fit"], [898, 2, 1, "", "get_depth"], [898, 2, 1, "", "get_metadata_routing"], [898, 2, 1, "", "get_n_leaves"], [898, 2, 1, "", "get_params"], [898, 2, 1, "", "predict"], [898, 2, 1, "", "predict_log_proba"], [898, 2, 1, "", "predict_proba"], [898, 2, 1, "", "score"], [898, 2, 1, "", "set_fit_request"], [898, 2, 1, "", "set_params"], [898, 2, 1, "", "set_predict_proba_request"], [898, 2, 1, "", "set_predict_request"], [898, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[899, 2, 1, "", "apply"], [899, 2, 1, "", "cost_complexity_pruning_path"], [899, 2, 1, "", "decision_path"], [899, 3, 1, "", "feature_importances_"], [899, 2, 1, "", "fit"], [899, 2, 1, "", "get_depth"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_n_leaves"], [899, 2, 1, "", "get_params"], [899, 2, 1, "", "predict"], [899, 2, 1, "", "score"], [899, 2, 1, "", "set_fit_request"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "set_predict_request"], [899, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[900, 2, 1, "", "apply"], [900, 2, 1, "", "cost_complexity_pruning_path"], [900, 2, 1, "", "decision_path"], [900, 3, 1, "", "feature_importances_"], [900, 2, 1, "", "fit"], [900, 2, 1, "", "get_depth"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_n_leaves"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "predict"], [900, 2, 1, "", "predict_log_proba"], [900, 2, 1, "", "predict_proba"], [900, 2, 1, "", "score"], [900, 2, 1, "", "set_fit_request"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "set_predict_proba_request"], [900, 2, 1, "", "set_predict_request"], [900, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[901, 2, 1, "", "apply"], [901, 2, 1, "", "cost_complexity_pruning_path"], [901, 2, 1, "", "decision_path"], [901, 3, 1, "", "feature_importances_"], [901, 2, 1, "", "fit"], [901, 2, 1, "", "get_depth"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_n_leaves"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_fit_request"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "set_predict_request"], [901, 2, 1, "", "set_score_request"]], "sklearn.utils": [[905, 1, 1, "", "Bunch"], [906, 4, 1, "", "_safe_indexing"], [908, 4, 1, "", "as_float_array"], [909, 4, 1, "", "assert_all_finite"], [910, 4, 1, "", "check_X_y"], [911, 4, 1, "", "check_array"], [912, 4, 1, "", "check_consistent_length"], [913, 4, 1, "", "check_random_state"], [914, 4, 1, "", "check_scalar"], [917, 4, 1, "", "deprecated"], [923, 4, 1, "", "estimator_html_repr"], [930, 4, 1, "", "gen_batches"], [931, 4, 1, "", "gen_even_slices"], [933, 4, 1, "", "indexable"], [943, 4, 1, "", "murmurhash3_32"], [946, 4, 1, "", "parallel_backend"], [948, 4, 1, "", "register_parallel_backend"], [949, 4, 1, "", "resample"], [950, 4, 1, "", "safe_mask"], [951, 4, 1, "", "safe_sqr"], [952, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[905, 2, 1, "", "clear"], [905, 2, 1, "", "copy"], [905, 2, 1, "", "fromkeys"], [905, 2, 1, "", "get"], [905, 2, 1, "", "items"], [905, 2, 1, "", "keys"], [905, 2, 1, "", "pop"], [905, 2, 1, "", "popitem"], [905, 2, 1, "", "setdefault"], [905, 2, 1, "", "update"], [905, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[907, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[915, 4, 1, "", "compute_class_weight"], [916, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[918, 4, 1, "", "all_displays"], [919, 4, 1, "", "all_estimators"], [920, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[921, 4, 1, "", "check_estimator"], [922, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[924, 4, 1, "", "density"], [925, 4, 1, "", "fast_logdet"], [926, 4, 1, "", "randomized_range_finder"], [927, 4, 1, "", "randomized_svd"], [928, 4, 1, "", "safe_sparse_dot"], [929, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[932, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[934, 4, 1, "", "MetadataRequest"], [935, 4, 1, "", "MetadataRouter"], [936, 4, 1, "", "MethodMapping"], [937, 4, 1, "", "get_routing_for_object"], [938, 4, 1, "", "process_routing"]], "sklearn.utils.metaestimators": [[939, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[940, 4, 1, "", "is_multilabel"], [941, 4, 1, "", "type_of_target"], [942, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[944, 1, 1, "", "Parallel"], [945, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[944, 2, 1, "", "dispatch_next"], [944, 2, 1, "", "dispatch_one_batch"], [944, 2, 1, "", "format"], [944, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[947, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[953, 4, 1, "", "incr_mean_variance_axis"], [954, 4, 1, "", "inplace_column_scale"], [955, 4, 1, "", "inplace_csr_column_scale"], [956, 4, 1, "", "inplace_row_scale"], [957, 4, 1, "", "inplace_swap_column"], [958, 4, 1, "", "inplace_swap_row"], [959, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[960, 4, 1, "", "inplace_csr_row_normalize_l1"], [961, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[962, 4, 1, "", "check_is_fitted"], [963, 4, 1, "", "check_memory"], [964, 4, 1, "", "check_symmetric"], [965, 4, 1, "", "column_or_1d"], [966, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 385], "u": 0, "histori": [0, 1018], "govern": [0, 388], "author": [0, 1020], "contributor": [0, 373, 374, 388, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "experi": [0, 37, 373, 388], "team": [0, 373, 388], "commun": [0, 374, 388], "emeritu": 0, "core": [0, 8, 362, 373, 378, 380, 385, 388, 408, 980], "develop": [0, 234, 372, 375, 376, 377, 378, 381, 382, 383, 967, 1015, 1036], "cite": 0, "scikit": [0, 234, 254, 311, 312, 313, 314, 315, 316, 317, 359, 360, 372, 375, 376, 378, 379, 385, 388, 390, 996, 998, 999, 1002, 1004, 1005, 1010, 1013, 1016], "learn": [0, 5, 12, 50, 95, 98, 149, 165, 167, 168, 169, 174, 218, 219, 220, 221, 233, 234, 254, 261, 289, 296, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 359, 360, 362, 370, 372, 374, 375, 376, 378, 379, 385, 388, 390, 399, 405, 407, 973, 975, 983, 991, 996, 998, 999, 1000, 1002, 1004, 1005, 1007, 1010, 1011, 1012, 1013, 1014, 1016], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 86, 100, 104, 231, 374, 376, 385, 399, 990, 995, 998], "infrastructur": 0, "support": [0, 25, 120, 165, 192, 307, 311, 312, 313, 314, 316, 317, 327, 330, 339, 385, 390, 396, 398, 399, 407, 993, 994, 1001, 1011, 1026], "exampl": [3, 6, 9, 53, 59, 75, 88, 102, 126, 157, 165, 194, 195, 202, 337, 341, 362, 368, 369, 379, 385, 389, 391, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 417, 420, 423, 424, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 451, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 473, 474, 475, 478, 479, 480, 481, 482, 483, 485, 486, 487, 489, 490, 491, 492, 493, 495, 497, 501, 502, 503, 504, 505, 506, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 572, 573, 575, 578, 579, 580, 581, 582, 584, 585, 588, 590, 591, 593, 595, 596, 597, 598, 599, 601, 602, 604, 605, 606, 608, 609, 610, 613, 614, 616, 618, 619, 621, 622, 623, 624, 625, 626, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 643, 644, 646, 647, 648, 649, 650, 653, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 675, 679, 680, 681, 682, 683, 684, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 700, 703, 704, 708, 709, 710, 717, 719, 724, 727, 728, 731, 732, 735, 738, 739, 740, 742, 743, 745, 747, 768, 769, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 821, 823, 825, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 843, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 876, 879, 883, 884, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 904, 905, 913, 922, 924, 931, 935, 936, 937, 938, 939, 952, 962, 967, 970, 972, 973, 974, 975, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 1004, 1010, 1011, 1012, 1017, 1020], "base": [3, 4, 85, 117, 118, 147, 165, 182, 233, 311, 312, 314, 316, 317, 374, 399, 400, 404, 407, 409, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 974, 986, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037], "real": [3, 9, 75, 109, 165, 369], "world": [3, 75, 165, 369], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 34, 44, 58, 62, 70, 85, 88, 89, 90, 91, 92, 95, 104, 110, 116, 119, 120, 130, 136, 137, 150, 152, 154, 155, 157, 159, 165, 167, 168, 169, 177, 180, 182, 187, 198, 200, 207, 216, 219, 220, 227, 232, 238, 257, 265, 266, 308, 324, 325, 329, 345, 351, 366, 367, 368, 369, 370, 371, 379, 385, 399, 410, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 1004, 1010, 1011, 1013, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "time": [4, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 116, 121, 134, 140, 148, 160, 164, 172, 175, 192, 217, 225, 232, 233, 242, 251, 275, 278, 293, 299, 309, 318, 326, 343, 345, 348, 355, 404], "relat": [4, 8, 368, 374, 986, 998, 1027], "featur": [4, 51, 54, 74, 100, 115, 117, 118, 120, 124, 127, 128, 141, 143, 145, 146, 147, 165, 170, 171, 174, 177, 192, 195, 216, 232, 238, 260, 298, 302, 303, 306, 307, 311, 313, 314, 335, 345, 346, 360, 362, 374, 378, 391, 399, 401, 407, 408, 409, 968, 986, 988, 995, 1012, 1013, 1023, 1024, 1025, 1026, 1027], "engin": [4, 170, 998, 1002], "data": [4, 7, 9, 12, 17, 20, 24, 26, 38, 47, 49, 50, 55, 57, 58, 63, 64, 66, 67, 70, 75, 78, 80, 82, 85, 86, 96, 97, 100, 101, 102, 103, 109, 111, 117, 118, 124, 126, 130, 143, 146, 147, 155, 156, 158, 163, 167, 170, 171, 174, 178, 184, 191, 192, 202, 228, 233, 237, 240, 249, 254, 256, 260, 265, 266, 268, 269, 272, 286, 291, 298, 301, 305, 306, 307, 320, 332, 335, 339, 346, 347, 356, 360, 362, 369, 379, 385, 387, 400, 401, 403, 404, 409, 410, 988, 992, 1002, 1004, 1007, 1010, 1012, 1013], "explor": 4, "bike": [4, 169], "share": [4, 169], "demand": 4, "cross": [4, 84, 85, 136, 137, 146, 165, 187, 254, 255, 257, 258, 262, 264, 269, 308, 335, 356, 399, 403, 404, 967, 974, 1008], "valid": [4, 136, 137, 146, 187, 231, 254, 255, 257, 258, 262, 264, 269, 274, 335, 356, 360, 376, 383, 399, 404, 962, 963, 964, 965, 966, 967, 973, 974, 981, 1008], "gradient": [4, 116, 120, 121, 122, 123, 124, 125, 169, 198, 206, 212, 311, 312, 314, 316, 317, 407, 974, 992], "boost": [4, 116, 120, 121, 122, 123, 124, 125, 169, 198, 311, 312, 314, 316, 317, 407], "naiv": [4, 24, 25, 399, 980], "linear": [4, 25, 33, 34, 123, 150, 165, 168, 176, 177, 194, 198, 201, 204, 219, 220, 232, 312, 331, 338, 339, 360, 383, 385, 399, 972, 974, 975, 976, 988, 1011], "regress": [4, 73, 75, 85, 86, 111, 123, 124, 133, 150, 155, 156, 157, 158, 177, 178, 181, 187, 189, 190, 191, 194, 196, 198, 200, 213, 215, 216, 230, 233, 291, 339, 352, 353, 370, 399, 401, 407, 410, 969, 971, 974, 978, 979, 981, 982, 992, 993, 994, 1011], "step": [4, 239, 386, 401], "categori": [4, 315, 317, 988], "trigonometr": 4, "period": [4, 199], "spline": [4, 199, 314, 988], "qualit": 4, "analysi": [4, 33, 34, 60, 95, 101, 103, 106, 110, 123, 169, 182, 244, 261, 262, 269, 287, 288, 289, 345, 399, 403, 405, 972, 981, 995, 1012, 1013], "impact": [4, 61, 1035, 1036, 1037], "model": [4, 7, 11, 57, 75, 85, 96, 103, 109, 116, 117, 118, 120, 124, 126, 146, 147, 150, 155, 165, 168, 169, 170, 174, 176, 177, 182, 186, 187, 192, 198, 201, 216, 228, 233, 238, 243, 245, 249, 250, 252, 258, 259, 261, 266, 286, 291, 298, 306, 312, 314, 339, 345, 360, 376, 385, 386, 388, 394, 395, 399, 404, 967, 973, 974, 977, 978, 980, 982, 983, 1004, 1008, 1011, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "predict": [4, 10, 24, 86, 111, 123, 133, 151, 167, 178, 198, 233, 237, 255, 266, 320, 360, 385, 386, 403, 404, 410, 978, 989, 1004, 1011], "pairwis": [4, 259, 399, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 976], "interact": [4, 169, 316, 407, 1011], "polynomi": [4, 174, 177, 178, 199, 970, 974, 976, 988, 1011], "non": [4, 14, 95, 123, 193, 198, 202, 219, 264, 331, 338, 339, 405, 974, 988], "kernel": [4, 5, 100, 150, 155, 156, 158, 159, 165, 173, 174, 232, 233, 283, 284, 292, 313, 328, 331, 336, 339, 399, 405, 406, 410, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 970, 971, 976, 988, 993, 1011], "conclud": [4, 109, 223], "remark": [4, 57, 109, 223, 231], "imag": [5, 47, 50, 53, 66, 98, 368, 399, 408, 574, 575, 576, 577, 578], "denois": [5, 98], "us": [5, 6, 12, 17, 48, 95, 96, 98, 127, 128, 130, 185, 201, 212, 214, 259, 263, 268, 302, 339, 345, 346, 356, 362, 375, 379, 380, 382, 385, 404, 405, 407, 408, 409, 414, 417, 420, 423, 424, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 451, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 473, 474, 475, 478, 479, 480, 481, 482, 483, 485, 486, 487, 489, 490, 491, 492, 493, 495, 497, 501, 502, 503, 504, 505, 506, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 572, 573, 575, 578, 579, 580, 581, 582, 584, 585, 588, 590, 591, 593, 595, 596, 597, 598, 599, 601, 602, 604, 605, 606, 608, 609, 610, 613, 614, 616, 618, 619, 621, 622, 623, 624, 625, 626, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 643, 644, 646, 647, 648, 649, 650, 653, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 675, 679, 680, 681, 682, 683, 684, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 700, 703, 704, 708, 709, 710, 717, 719, 724, 727, 728, 731, 732, 735, 738, 739, 740, 742, 743, 745, 747, 768, 769, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 821, 823, 825, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 843, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 876, 879, 883, 884, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 904, 905, 913, 922, 924, 931, 935, 936, 937, 938, 939, 952, 962, 972, 974, 975, 978, 982, 992, 993, 994, 1002, 1011, 1013, 1030], "pca": [5, 58, 73, 95, 96, 99, 100, 101, 102, 103, 104, 306, 405, 532, 995, 1012], "refer": [5, 11, 25, 27, 80, 81, 98, 110, 113, 170, 174, 182, 186, 259, 264, 265, 292, 368, 369, 371, 397, 398, 399, 400, 402, 403, 404, 405, 407, 408, 409, 410, 967, 968, 970, 971, 972, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 990, 991, 992, 993, 994], "load": [5, 7, 17, 50, 58, 116, 118, 120, 124, 136, 147, 170, 191, 216, 220, 228, 232, 240, 260, 268, 269, 306, 307, 332, 335, 345, 346, 347, 367, 368, 379, 385, 408, 1004, 1012, 1013], "via": [5, 53, 186, 187, 216, 407, 970], "openml": [5, 307, 311, 368], "basi": [5, 159, 410, 970, 974, 1011], "reconstruct": [5, 13, 98], "test": [5, 78, 142, 262, 265, 272, 345, 350, 372, 374, 376, 382, 383, 404, 1004, 1011, 1013], "face": [6, 50, 95, 236, 369, 1002, 1009], "recognit": [6, 369, 371, 1009], "eigenfac": [6, 95, 1009], "svm": [6, 139, 143, 144, 174, 212, 232, 314, 325, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 399, 890, 891, 892, 893, 894, 895, 896, 897, 974, 984, 992, 1011, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "complex": [7, 229, 239, 258, 261, 322, 350, 360, 400, 974, 975, 981, 982, 992, 993, 994], "influenc": [7, 10, 360], "benchmark": [7, 10, 58, 345], "choos": [7, 967, 1004, 1006, 1008], "paramet": [7, 78, 123, 257, 313, 332, 340, 374, 376, 386, 387, 399, 401, 407, 967, 974, 978, 993, 1004, 1008, 1013], "run": [7, 58, 263], "code": [7, 95, 105, 374, 376, 379, 380, 382, 405, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "plot": [7, 8, 10, 20, 24, 30, 34, 38, 41, 47, 49, 50, 57, 63, 64, 66, 67, 78, 82, 85, 91, 92, 96, 97, 101, 109, 111, 116, 119, 124, 126, 130, 131, 132, 133, 136, 146, 163, 169, 177, 178, 182, 190, 191, 192, 202, 203, 207, 220, 228, 232, 237, 238, 240, 249, 255, 256, 261, 263, 266, 268, 272, 274, 286, 298, 307, 311, 313, 314, 320, 329, 330, 335, 345, 351, 381, 399, 973, 985, 1017], "result": [7, 8, 20, 38, 47, 49, 50, 57, 58, 63, 64, 67, 78, 80, 82, 96, 97, 109, 111, 116, 130, 133, 163, 174, 182, 203, 233, 237, 263, 272, 286, 307, 339, 346, 356, 967], "conclus": [7, 150, 182, 187, 308], "out": [8, 122, 362, 382, 404, 408, 967, 974, 980], "classif": [8, 26, 29, 30, 32, 33, 70, 91, 138, 151, 152, 153, 154, 158, 165, 214, 235, 262, 265, 266, 269, 282, 290, 298, 311, 319, 324, 345, 370, 399, 407, 410, 974, 978, 979, 981, 982, 992, 993, 994, 1011, 1013], "text": [8, 165, 229, 260, 324, 344, 345, 346, 347, 369, 399, 408, 579, 580, 581, 582, 1013], "document": [8, 19, 165, 313, 314, 344, 345, 346, 374, 998, 999, 1001, 1016, 1020, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "reuter": 8, "routin": [8, 361, 383], "main": [8, 198], "outlier": [9, 180, 215, 227, 237, 285, 286, 301, 399, 974, 984, 988], "detect": [9, 227, 237, 256, 285, 286, 978, 984, 993], "set": [9, 75, 78, 102, 130, 163, 202, 266, 332, 350, 385, 404, 974, 1004, 1010, 1011, 1013], "first": [9, 37, 374], "second": [9, 37], "latenc": [10, 360], "helper": [10, 159, 220, 383], "function": [10, 34, 159, 188, 202, 203, 208, 220, 237, 254, 272, 313, 335, 347, 383, 399, 404, 407, 410, 970, 974, 978, 993, 1011], "bulk": [10, 360], "atom": [10, 360], "speed": [10, 380], "variou": [10, 52, 205, 224], "regressor": [10, 111, 123, 177, 202, 308, 311, 314, 399, 407], "n_featur": 10, "throughput": [10, 360], "speci": [11, 292], "distribut": [11, 216, 219, 292, 305, 390, 975, 988], "visual": [12, 58, 106, 228, 233, 240, 254, 297, 312, 332, 399, 400, 401, 978, 1017], "stock": [12, 1009], "market": [12, 1009], "structur": [12, 39, 47, 67, 158, 322, 354, 1009], "retriev": [12, 311], "from": [12, 98, 147, 170, 307, 311, 361, 368, 372, 385, 399, 408, 974, 978, 1004, 1011, 1012, 1013, 1030], "internet": 12, "graph": [12, 311, 383, 385, 400, 408, 932], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 95, 165, 315, 317, 346, 370, 397, 399, 400, 405, 411, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 705, 706, 978, 1012, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "affin": [12, 38, 400, 976], "propag": [12, 38, 320, 321, 322, 400, 991], "embed": [12, 52, 219, 220, 231, 289, 407, 975], "2d": [12, 52, 97, 104, 169], "space": [12, 100, 401, 967, 975], "compress": [13, 53, 360, 409], "sens": [13, 409], "tomographi": 13, "l1": [13, 182, 189, 191, 214, 340, 409], "prior": [13, 159, 244], "lasso": [13, 182, 183, 184, 185, 186, 187, 192, 312, 643, 974], "topic": 14, "extract": [14, 74, 98, 216, 260, 346, 360, 362, 399, 408, 1013], "neg": [14, 95, 193, 405, 974], "matrix": [14, 17, 158, 179, 253, 399, 400, 405, 978, 993], "factor": [14, 95, 103, 106, 285, 286, 405, 984], "latent": [14, 85, 405], "dirichlet": [14, 405, 977], "alloc": [14, 405], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 63, 64, 67, 68, 76, 78, 83, 87, 93, 107, 116, 134, 140, 148, 160, 164, 172, 175, 191, 203, 217, 225, 242, 251, 272, 275, 278, 293, 299, 309, 318, 326, 343, 348, 355, 359, 360, 400, 401, 404, 985], "libsvm": [16, 368], "gui": 16, "wikipedia": 17, "princip": [17, 86, 101, 405, 995, 1012], "eigenvector": 17, "download": [17, 130, 163, 368], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 390, 408, 1013], "adjac": 17, "singular": [17, 405], "vector": [17, 25, 53, 165, 327, 330, 339, 345, 347, 369, 399, 408, 993, 1011, 1012], "random": [17, 95, 114, 116, 128, 129, 170, 171, 231, 240, 265, 267, 356, 376, 383, 399, 404, 405, 407, 947, 967, 974, 990, 995], "svd": [17, 95, 405], "central": 17, "score": [17, 85, 116, 121, 136, 146, 163, 177, 249, 258, 265, 266, 335, 391, 400, 404, 973, 978, 993, 1008], "biclust": [18, 19, 20, 165, 370, 397, 399], "spectral": [19, 20, 21, 66, 219, 397, 400, 975], "co": [19, 21, 397], "algorithm": [19, 20, 21, 38, 44, 49, 55, 63, 64, 65, 219, 227, 380, 385, 972, 974, 977, 979, 981, 982, 986, 994, 1011], "A": [20, 21, 47, 58, 63, 198, 314, 373, 380, 394, 404, 1007, 1010], "demo": [20, 21, 38, 47, 49, 55, 58, 63, 65], "gener": [20, 24, 34, 38, 47, 49, 55, 57, 63, 64, 66, 67, 78, 80, 82, 91, 92, 96, 97, 98, 117, 126, 143, 146, 150, 156, 157, 159, 165, 176, 177, 178, 182, 192, 198, 200, 233, 249, 256, 272, 286, 291, 298, 312, 320, 339, 356, 370, 374, 387, 399, 405, 407, 974, 988, 999, 1008], "sampl": [20, 38, 55, 63, 78, 96, 97, 143, 179, 211, 233, 260, 272, 291, 312, 339, 342, 368, 383, 387, 399, 400, 407, 974], "fit": [20, 26, 57, 96, 103, 117, 118, 121, 123, 124, 155, 177, 178, 179, 192, 195, 200, 204, 266, 286, 291, 308, 339, 356, 376, 386, 391, 407, 980, 984, 1004], "spectralbiclust": [20, 442], "calibr": [23, 24, 25, 26, 27, 123, 165, 198, 398, 399, 428, 429, 430, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "probabl": [24, 25, 26, 30, 132, 153, 398, 399, 407, 993], "classifi": [24, 25, 27, 31, 133, 181, 239, 256, 277, 311, 325, 329, 332, 345, 354, 398, 399, 407, 972, 981, 1011, 1013], "synthet": [24, 75, 177, 182, 256, 308, 379], "gaussian": [24, 25, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 243, 244, 245, 248, 249, 250, 301, 399, 410, 977, 980, 988, 990], "bay": [24, 25, 399, 980], "curv": [25, 27, 178, 233, 240, 250, 256, 261, 266, 268, 274, 398, 973], "summari": [25, 187, 346, 347, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "3": [26, 181, 317, 1013, 1028, 1029, 1034, 1036], "class": [26, 37, 110, 112, 132, 181, 207, 212, 262, 266, 268, 314, 331, 334, 387, 399, 404, 407, 408, 977, 978, 981, 984, 992, 993, 1020, 1021], "compar": [26, 42, 44, 62, 78, 85, 116, 121, 129, 143, 174, 177, 184, 200, 205, 227, 233, 259, 267, 287, 296, 301, 307, 385], "comparison": [27, 31, 43, 64, 80, 104, 120, 142, 150, 219, 220, 233, 259, 270, 347, 400, 410, 974], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 58, 89, 137, 138, 220, 298, 320, 321, 371, 1010], "normal": [33, 174, 198, 301, 305, 399, 862, 877, 978, 988], "ledoit": [33, 79, 402], "wolf": [33, 79, 402], "oa": [33, 78, 79, 413, 466], "discrimin": [33, 34, 399, 972], "quadrat": [34, 410, 972], "covari": [34, 77, 78, 80, 81, 82, 165, 246, 399, 402, 413, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 972, 1028, 1032, 1033, 1034, 1036], "ellipsoid": [34, 245], "colormap": 34, "adjust": 37, "chanc": 37, "perform": [37, 43, 262, 306, 313, 315, 320, 346, 360, 374, 375, 400, 404, 408, 1013], "evalu": [37, 58, 61, 81, 198, 237, 260, 263, 298, 307, 346, 386, 395, 397, 400, 404, 407, 967, 973, 978, 1013], "defin": [37, 47, 58, 67, 219, 237, 254, 256, 257, 347, 978], "list": [37, 1001], "metric": [37, 40, 123, 263, 399, 400, 404, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 967, 975, 976, 978, 981, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "fix": [37, 378, 1020, 1023, 1024, 1025, 1026, 1027, 1033], "ground": [37, 177], "truth": [37, 177], "label": [37, 266, 320, 321, 322, 369, 370, 400, 404, 407, 978, 989, 991], "grow": 37, "number": [37, 60, 120, 146, 271, 360, 376, 967, 968, 977], "vari": [37, 295, 323, 400], "agglom": [39, 40, 52, 1012], "without": [39, 121, 287, 345], "differ": [40, 44, 62, 78, 159, 169, 301, 304, 307, 329, 376, 385, 391, 400, 974, 1011], "hierarch": [41, 47, 62, 67, 317, 400, 1012], "dendrogram": 41, "birch": [42, 400, 433], "minibatchkmean": [42, 64, 95, 440], "bisect": [43, 400], "k": [43, 45, 48, 57, 58, 59, 61, 64, 67, 85, 306, 346, 400, 404, 978, 981, 988, 1011, 1012], "mean": [43, 45, 48, 57, 58, 59, 61, 63, 64, 117, 118, 163, 170, 202, 346, 400, 978, 988, 1012], "regular": [43, 78, 125, 168, 191, 202, 203, 295, 340, 974, 982], "toi": [44, 62, 227, 371], "segment": [46, 66], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 259], "ward": [47, 67, 400, 1012], "an": [47, 59, 163, 179, 187, 237, 289, 311, 315, 385, 408, 967, 984, 1004, 1010, 1011], "color": 48, "quantiz": [48, 53, 1012], "dbscan": [49, 400, 411, 435], "onlin": [50, 205, 314, 315, 992], "dictionari": [50, 95, 98, 105, 405], "part": [50, 409], "agglomer": [51, 54, 995, 1012], "origin": [53, 100, 265, 289, 301], "encod": [53, 120, 307, 308, 317, 988, 989], "strategi": [53, 257, 296, 304, 317, 362, 399, 400, 978], "memori": [53, 360, 380, 382, 400], "footprint": 53, "v": [54, 67, 78, 79, 81, 86, 100, 146, 169, 170, 180, 190, 216, 262, 268, 272, 273, 350, 400, 407, 968, 988, 1004], "univari": [54, 85, 143, 335, 409, 968], "select": [54, 60, 72, 103, 136, 141, 143, 146, 147, 165, 186, 187, 192, 249, 252, 335, 385, 391, 395, 399, 404, 409, 967, 974, 977, 1008, 1026], "hdbscan": [55, 317, 400, 437], "scale": [55, 168, 219, 222, 306, 340, 362, 408, 881, 975, 984, 988, 995], "invari": [55, 262], "multi": [55, 110, 129, 169, 192, 207, 222, 236, 263, 266, 295, 353, 380, 399, 974, 975, 978, 982, 993, 994], "hyperparamet": [55, 155, 156, 260, 267, 608], "robust": [55, 80, 81, 177, 201, 204, 356, 399, 402, 967, 974], "min_cluster_s": 55, "min_sampl": 55, "dbscan_clust": 55, "induct": 56, "demonstr": [57, 263, 304, 320], "assumpt": 57, "possibl": [57, 379], "solut": 57, "final": [57, 150], "handwritten": [58, 220, 371], "our": [58, 254, 257, 374], "reduc": [58, 360], "initi": [59, 61, 247, 977], "silhouett": [60, 400], "kmean": [60, 64, 312, 438], "empir": [61, 81, 231, 402], "linkag": [62, 400], "method": [62, 74, 85, 108, 150, 165, 219, 221, 247, 276, 387, 399, 400, 970, 977, 984, 985, 1012], "shift": [63, 400], "meanshift": [63, 439], "establish": [64, 174], "pariti": 64, "between": [64, 270], "optic": [65, 371, 400, 441], "four": 66, "circl": 66, "two": [66, 112, 184, 238, 259], "unstructur": 67, "we": 67, "ar": [67, 314, 385], "nearest": [67, 165, 279, 280, 281, 282, 287, 290, 291, 311, 399, 968, 981, 1011], "neighbor": [67, 165, 219, 279, 280, 281, 282, 287, 291, 306, 311, 399, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 968, 975, 981, 1011, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "10": [67, 1020], "pipelin": [69, 70, 72, 73, 130, 144, 165, 168, 229, 234, 239, 260, 307, 335, 376, 385, 386, 399, 401, 409, 849, 850, 851, 852, 995, 1009, 1013, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "composit": [69, 165, 399, 401, 967], "estim": [69, 77, 78, 79, 80, 81, 82, 113, 120, 122, 129, 156, 163, 165, 177, 201, 204, 229, 234, 236, 237, 248, 267, 283, 284, 292, 311, 312, 313, 316, 356, 376, 385, 386, 387, 396, 399, 401, 402, 404, 406, 407, 410, 967, 968, 972, 974, 977, 978, 993, 998, 1006, 1008, 1010, 1021, 1028, 1029, 1030], "column": [70, 71, 239], "transform": [70, 71, 72, 75, 85, 115, 128, 239, 313, 314, 315, 366, 385, 386, 401, 403, 404, 981, 988, 989, 990, 1012], "heterogen": [70, 401], "sourc": [70, 96, 372], "20": [70, 345, 369, 1013, 1028], "newsgroup": [70, 345, 369, 1013], "creat": [70, 101, 103, 110, 202, 228, 266, 308, 335, 385], "mix": 71, "type": [71, 244, 376, 387, 400, 1004], "dimension": [72, 219, 222, 239, 288, 306, 346, 972, 975, 981, 995, 1011], "reduct": [72, 219, 223, 239, 288, 306, 346, 972, 981, 995], "gridsearchcv": [72, 136, 263, 407, 787], "illustr": [72, 154, 159, 289, 410], "cach": [72, 281, 401], "within": 72, "chain": [73, 239, 277, 386, 401], "logist": [73, 181, 188, 189, 190, 191, 213, 214, 974, 1011], "concaten": 74, "multipl": [74, 239, 263, 356, 381, 404, 967, 968, 978, 1028, 1029], "effect": [75, 167, 224, 301, 306, 323, 350, 981], "target": [75, 157, 216, 307, 308, 385, 387, 401, 403, 979, 988, 989], "shrinkag": [78, 402, 407, 972, 1011], "ledoitwolf": [78, 464], "max": [78, 978], "likelihood": [78, 177, 178, 262, 978, 983], "approach": [78, 187, 259], "mahalanobi": [80, 981], "distanc": [80, 399, 981], "relev": [80, 182, 974], "minimum": [81, 402], "determin": [81, 182, 402, 974, 978], "spars": [82, 95, 105, 168, 182, 184, 213, 311, 345, 346, 383, 402, 405, 409, 988, 990, 992], "invers": [82, 402, 990], "decomposit": [84, 85, 94, 95, 113, 165, 370, 399, 403, 405, 412, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 1012, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "variabl": [85, 167, 168, 361, 385, 399, 1011], "canon": [85, 403], "symmetr": 85, "pl": 85, "scatter": 85, "multivari": [85, 968], "respons": [85, 388], "pls2": 85, "pls1": 85, "cca": [85, 473], "mode": [85, 360, 372], "b": 85, "deflat": 85, "compon": [86, 95, 101, 287, 288, 289, 405, 977, 981, 995, 1012], "partial": [86, 167, 169, 238, 985], "least": [86, 123, 187, 193, 196, 974], "squar": [86, 123, 159, 193, 196, 202, 410, 970, 974, 976, 978], "The": [86, 89, 90, 167, 168, 198, 224, 231, 257, 266, 369, 378, 404, 408, 977, 978, 990, 1011, 1012], "one": [86, 120, 238, 974, 978], "power": [86, 198], "iri": [90, 102, 104, 119, 152, 207, 325, 329, 351, 371, 410, 1010], "randomli": [91, 92], "multilabel": [92, 235, 370, 383, 399, 978, 979, 1004], "prepar": [95, 109, 111, 174, 219, 268, 269, 306, 332, 378], "nmf": [95, 315, 405, 531], "independ": [95, 405, 1012], "fastica": [95, 96, 97, 412, 524], "minibatchsparsepca": [95, 405, 530], "center": [95, 988], "fa": [95, 103], "posit": [95, 314], "blind": 96, "separ": [96, 210, 333, 334], "ica": [96, 405, 1012], "point": [97, 289], "cloud": 97, "distort": 98, "displai": [98, 203, 228, 229, 239, 316, 317, 382, 1017, 1036], "patch": [98, 408], "noisi": [98, 157, 202], "them": [98, 373], "increment": [99, 362, 405], "kernelpca": [100, 526], "figur": 101, "probabilist": [103, 151, 405, 410], "lda": [104, 405, 972], "precomput": [105, 179, 311, 405], "rotat": 106, "pattern": 106, "ensembl": [108, 115, 119, 165, 315, 399, 407, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "discret": [109, 126, 158, 302, 303, 988], "versu": [109, 113, 212, 264, 325, 360], "adaboost": [109, 110, 111, 112, 407], "baselin": [109, 174, 198], "samm": 109, "r": 109, "decis": [110, 111, 119, 126, 131, 165, 232, 317, 325, 349, 350, 351, 352, 353, 354, 385, 388, 399, 994], "tree": [110, 111, 115, 117, 118, 119, 128, 165, 170, 198, 311, 316, 317, 349, 350, 351, 352, 353, 354, 385, 399, 407, 409, 898, 899, 900, 901, 902, 903, 904, 981, 986, 994, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "train": [110, 111, 124, 126, 133, 146, 202, 228, 233, 238, 240, 249, 272, 298, 307, 308, 313, 323, 332, 345, 350, 351, 354, 369, 404, 981, 991, 1004, 1011, 1013], "adaboostclassifi": [110, 544], "converg": 110, "error": [110, 114, 123, 136, 177, 202, 256, 272, 382, 390, 974, 978], "weight": [110, 177, 179, 211, 297, 312, 342, 391, 407, 408], "weak": [110, 407], "learner": [110, 407], "decisiontre": 111, "singl": [113, 130, 216, 228, 370, 400, 968], "bag": [113, 122, 345, 407, 408, 967, 1013], "bia": 113, "varianc": [113, 196, 409, 978, 988], "oob": 114, "forest": [114, 116, 117, 118, 129, 170, 171, 240, 369, 407, 984], "histogram": [116, 312, 314, 316, 406, 407], "import": [117, 118, 124, 147, 170, 171, 232, 306, 311, 407, 986], "decreas": [117, 118, 170], "impur": [117, 118, 170, 350, 986], "permut": [117, 170, 171, 265, 311, 404, 986], "pixel": 118, "parallel": [118, 361, 372, 380, 400, 407, 944, 945, 967], "mdi": [118, 170], "surfac": [119, 232, 351], "categor": [120, 307, 313, 385, 407, 980, 988], "am": 120, "hous": [120, 369], "drop": 120, "hot": 120, "ordin": 120, "nativ": [120, 307, 311, 313], "limit": [120, 150, 360, 390, 394, 408], "split": [120, 313, 356, 404], "earli": [121, 206], "stop": [121, 206, 408, 992], "interv": 123, "quantil": [123, 200, 314, 315, 974], "confid": 123, "tune": [123, 257, 260, 313, 967, 1013], "hyper": [123, 257, 313, 399, 967], "preprocess": [124, 130, 165, 168, 169, 237, 239, 300, 317, 347, 356, 385, 399, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 988, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "devianc": [124, 978], "isolationforest": [126, 554], "boundari": [126, 131, 325], "path": [126, 185, 191, 203, 354, 390], "length": [126, 390], "monoton": [127, 407], "constraint": [127, 316, 400, 407], "name": [127, 314, 385], "specifi": [127, 385, 967], "hash": [128, 383, 408], "total": [128, 350, 407], "output": [129, 236, 301, 316, 353, 994, 1011], "meta": [129, 313, 407], "combin": [130, 228], "predictor": 130, "stack": [130, 311, 407], "make": [130, 133, 163, 374, 378, 388], "measur": [130, 262, 400, 978], "votingclassifi": [131, 132, 407, 560], "calcul": 132, "individu": [133, 169, 313, 985], "vote": [133, 407], "tutori": [135, 165, 997, 1005, 1007, 1013], "exercis": [135, 136, 137, 138, 139, 165, 1008, 1011, 1013], "diabet": [136, 238, 371, 1011], "appli": 136, "line": [136, 153], "show": [136, 268], "std": [136, 177], "bonu": 136, "how": [136, 356, 374, 380, 385], "much": 136, "can": [136, 385], "you": [136, 385], "trust": 136, "alpha": [136, 350], "f": [142, 978], "mutual": [142, 400], "inform": [142, 163, 186, 187, 378, 400, 967, 974], "anova": [144, 335], "recurs": [145, 146, 409], "elimin": [145, 146, 409, 967], "sequenti": [147, 409], "coeffici": [147, 168, 177, 202, 203, 400, 978], "discuss": [147, 373], "process": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 168, 356, 388, 399, 410, 977, 1007], "machin": [149, 165, 167, 168, 169, 298, 327, 382, 399, 983, 993, 1004, 1011], "ridg": [150, 178, 180, 196, 202, 203, 233, 308, 399, 410, 663, 971, 974], "simpl": [150, 234, 284, 380, 1010], "gpc": [151, 152, 153, 154, 410], "iso": [153, 266], "xor": [154, 410], "gpr": [155, 156, 410], "mauna": [155, 410], "loa": [155, 410], "co2": [155, 410], "build": [155, 163, 372, 374, 382, 1013], "design": 155, "proper": 155, "extrapol": 155, "interpret": [155, 168, 202, 237, 405, 407], "nois": [156, 157, 178, 410], "level": [156, 361, 400, 407, 410], "optimis": 156, "basic": [157, 216, 386, 402, 410], "introductori": 157, "free": 157, "sequenc": [158, 385], "similar": [158, 976, 978], "under": [158, 385, 1015, 1036], "posterior": 159, "cookbook": 159, "radial": [159, 410, 970, 1011], "ration": [159, 410], "quadradt": 159, "exp": [159, 410], "sine": [159, 250, 410], "dot": [159, 410], "product": [159, 216, 382, 385, 410, 612], "mat\u00e9rn": [159, 410], "miss": [161, 162, 163, 165, 311, 317, 407, 968, 988, 994], "valu": [161, 162, 163, 165, 224, 234, 311, 317, 374, 405, 407, 968, 978, 986, 988, 994], "imput": [161, 162, 163, 165, 311, 399, 618, 619, 620, 621, 968, 988, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "variant": 162, "iterativeimput": [162, 618, 968], "befor": [163, 378], "replac": 163, "0": [163, 311, 312, 313, 314, 994, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "knn": [163, 311], "iter": [163, 271, 404, 967], "releas": [165, 310, 311, 312, 313, 314, 315, 316, 317, 378, 390, 1018, 1026], "highlight": [165, 310, 311, 312, 313, 314, 315, 316, 317, 1020, 1023, 1024, 1027, 1028], "mixtur": [165, 243, 244, 245, 248, 249, 250, 399, 785, 786, 977, 1028, 1029, 1033, 1034], "inspect": [165, 166, 389, 399, 622, 623, 624, 625, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "approxim": [165, 173, 174, 232, 279, 313, 399, 402, 970], "manifold": [165, 218, 219, 220, 221, 370, 399, 679, 680, 681, 682, 683, 684, 685, 686, 687, 975, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "miscellan": [165, 226, 399, 1028, 1029, 1030, 1031, 1032, 1033, 1036], "multioutput": [165, 276, 399, 821, 822, 823, 824, 979, 1028, 1029, 1030, 1031, 1032, 1035, 1036], "neural": [165, 169, 294, 399, 982, 983], "network": [165, 169, 294, 399, 982, 983], "semi": [165, 319, 320, 324, 325, 399, 991], "supervis": [165, 319, 320, 324, 325, 399, 982, 991, 1000, 1011], "work": [165, 344, 360, 373, 385, 1013], "failur": [167, 967], "infer": [167, 977], "causal": [167, 168], "simul": 167, "hourli": 167, "wage": [167, 168], "descript": 167, "incom": 167, "fulli": 167, "observ": [167, 1011, 1012], "lesson": [167, 168], "common": [168, 356, 387, 396, 408, 978], "pitfal": [168, 356], "matter": 168, "check": [168, 261, 311, 382, 396, 1028, 1029, 1030], "problem": [168, 405, 993, 994, 1004, 1009, 1011, 1012], "correl": [168, 171, 403, 978, 986], "numer": [168, 361, 376], "wrong": [168, 385], "depend": [169, 234, 238, 372, 985, 1020, 1033, 1034], "condit": [169, 313, 985], "expect": [169, 313, 977, 985], "preprocessor": 169, "1": [169, 195, 314, 315, 316, 317, 385, 1013, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "wai": [169, 374, 385], "layer": [169, 295, 982], "perceptron": [169, 295, 659, 974, 982], "ic": [169, 985], "pdp": 169, "3d": 169, "represent": [169, 229, 312, 360, 408, 1012], "accuraci": [170, 232, 345, 350, 978], "": [170, 306, 308, 377, 385, 407, 978], "multicollinear": 171, "breast": [171, 371], "cancer": [171, 371], "handl": [171, 968], "scalabl": [174, 261, 312], "partit": 174, "bayesian": [177, 178, 244, 259, 399, 974, 977], "recov": 177, "true": [177, 178], "margin": [177, 178, 210, 333, 337], "log": [177, 178, 978], "expans": 177, "sinusoid": 178, "cubic": 178, "l": 178, "elast": [179, 183, 974], "net": [179, 183, 974], "gram": [179, 993], "huberregressor": [180, 640], "strong": 180, "signal": [182, 405, 1012], "automat": [182, 386, 974], "ard": [182, 974], "elasticnet": [182, 312, 637], "dens": 184, "implement": [184, 385, 400, 408, 978, 981, 992, 993], "lar": [185, 641, 974], "criteria": [186, 385, 974, 994], "aic": 187, "bic": [187, 249], "criterion": [187, 313, 967, 992], "coordin": 187, "descent": [187, 206, 212, 974, 992], "angl": [187, 974], "penalti": [189, 209, 340], "sparsiti": [189, 195, 408, 1011], "multinomi": [190, 214, 974, 980], "One": [190, 212, 268, 314, 331, 404, 984, 992], "rest": [190, 268], "joint": 192, "task": [192, 399, 974, 998], "seri": [192, 404], "onli": [195, 215, 1031, 1033], "2": [195, 316, 1013, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "ordinari": [196, 974], "orthogon": [197, 974], "match": [197, 974], "pursuit": [197, 974], "poisson": [198, 216, 312, 313, 978], "loss": [198, 208, 312, 315, 317, 407, 978], "french": 198, "motor": 198, "third": [198, 234, 390], "parti": [198, 234, 390], "liabil": 198, "claim": [198, 216], "constant": [198, 968], "rank": [198, 399, 978], "takeawai": 198, "interpol": 199, "quantileregressor": [200, 661], "linearregress": [200, 648], "ransac": [201, 974], "l2": [202, 340], "purpos": [202, 347, 999], "thi": [202, 999], "solver": [205, 405, 974], "stochast": [206, 212, 219, 296, 974, 975, 983, 992], "sgd": [207, 208, 209, 210, 211, 974, 992], "convex": 208, "maximum": [210, 333, 983], "hyperplan": [210, 333, 334], "multiclass": [213, 268, 311, 383, 398, 399, 818, 819, 820, 940, 941, 942, 978, 979, 1004, 1011, 1029, 1032, 1033, 1034], "20newgroup": 213, "mnist": [214, 297], "theil": [215, 974], "sen": [215, 974], "y": [215, 385, 403, 989, 991], "direct": 215, "x": 215, "tweedi": [216, 978], "insur": 216, "definit": [216, 298, 985, 1030], "frequenc": [216, 1013], "sever": [216, 221], "gamma": [216, 317, 978], "pure": 216, "premium": 216, "tweedieregressor": [216, 671], "local": [219, 220, 285, 286, 975, 984], "isomap": [219, 220, 679, 975], "multidimension": 219, "t": [219, 224, 975], "techniqu": 220, "sphere": 221, "swiss": 223, "roll": [223, 376], "And": [223, 388], "hole": 223, "sne": [224, 975], "perplex": 224, "shape": [224, 1004], "anomali": 227, "object": [228, 254, 376, 385, 967, 978, 1010, 1017], "confusionmatrixdisplai": [228, 688], "roccurvedisplai": [228, 693], "precisionrecalldisplai": [228, 691], "compact": 229, "rich": [229, 312], "html": 229, "isoton": [230, 398, 399, 626, 627, 628, 969, 1028, 1029, 1030, 1032, 1034, 1035], "johnson": [231, 990], "lindenstrauss": [231, 990], "bound": 231, "theoret": [231, 974], "explicit": 232, "map": [232, 305, 988], "rbf": [232, 331, 332, 410, 613, 976, 993, 1011], "python": [232, 361, 380, 394, 993, 997, 998, 1026], "packag": [232, 998, 1032], "svr": [233, 339, 896, 993], "construct": [233, 401], "look": [233, 339], "metadata": [234, 317, 345, 387, 391], "rout": [234, 317, 387, 391], "router": 234, "consum": 234, "deprec": [234, 374, 399, 917, 1030], "default": [234, 286, 374], "chang": [234, 374, 388, 1002, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "complet": [236, 400], "advanc": [238, 391], "With": [238, 1013], "togeth": [238, 268, 1009, 1012], "grid": [239, 257, 259, 267, 270, 967, 1008, 1013], "search": [239, 257, 259, 267, 270, 386, 967, 1008, 1013], "over": 239, "roc": [240, 256, 268, 269, 311, 978], "api": [240, 241, 311, 314, 316, 361, 376, 381, 387, 391, 396, 399, 410, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030], "svc": [240, 340, 895, 993], "introduc": 241, "set_output": [241, 316, 376], "concentr": 244, "variat": [244, 977], "gmm": [246, 247], "densiti": [248, 283, 284, 292, 317, 406, 924, 993], "best": [249, 375, 385], "confus": [253, 400, 978], "behavior": 254, "indic": 254, "mani": [254, 316, 361, 385], "cv": [254, 356], "tradeoff": [256, 978], "det": [256, 978], "custom": [257, 328, 408, 988], "refit": [257, 1004], "balanc": [258, 978], "statist": [259, 998, 1007, 1010], "frequentist": 259, "practic": [259, 356, 375, 379, 974, 975, 982, 992, 993, 994], "equival": 259, "all": [259, 268, 315, 390, 1009, 1035, 1036, 1037], "take": 259, "home": 259, "messag": 259, "ratio": [262, 978], "pre": [262, 356, 386], "post": [262, 350], "respect": 262, "preval": 262, "cross_val_scor": [263, 812], "nest": [264, 401, 1008], "see": [264, 401], "also": [264, 378, 401], "signific": 265, "precis": [266, 978], "recal": [266, 978], "In": 266, "binari": [266, 974, 978], "averag": [266, 268, 400, 407, 978], "micro": [266, 268], "each": [266, 271, 345, 967], "f1": 266, "receiv": [268, 269, 978], "oper": [268, 269, 373, 383, 410, 978], "characterist": [268, 269, 978], "specif": [268, 372, 376, 394, 967, 998, 999], "ovr": 268, "macro": 268, "ovo": 268, "success": [270, 271, 313, 967], "halv": [270, 271, 313, 967], "candid": [271, 967], "amount": [271, 967], "resourc": [271, 361, 374, 967, 997, 1001], "underfit": 273, "overfit": 273, "tsne": [279, 683], "1d": 284, "novelti": [285, 984, 993], "lof": [285, 286], "neighborhood": [287, 288, 289, 981], "centroid": [290, 981], "mlpclassifi": [296, 847], "mlp": 297, "restrict": [298, 983], "boltzmann": [298, 983], "scaler": 301, "standardscal": [301, 870], "minmaxscal": [301, 860], "maxabsscal": [301, 859], "robustscal": [301, 868], "powertransform": [301, 866], "quantiletransform": [301, 867], "uniform": [301, 988], "kbinsdiscret": [302, 304, 855], "continu": [302, 374], "rescal": 306, "other": [307, 368, 385, 407, 998, 1020], "intern": 308, "22": [311, 1030], "new": [311, 313, 314, 316, 317, 374, 385, 997, 1020, 1021, 1023, 1024, 1025, 1026, 1027], "prune": [311, 350, 994], "datafram": [311, 385], "compat": [311, 374, 376, 396], "auc": [311, 697], "now": [311, 314, 1030], "23": [312, 1031], "stabil": 312, "improv": [312, 313, 314, 315, 316, 373, 374, 1023, 1024], "24": [313, 1032], "histgradientboost": 313, "self": [313, 323, 991], "sequentialfeatureselector": [313, 593], "polynomialcountsketch": [313, 631], "decisiontreeregressor": [313, 899], "keyword": [314, 1031, 1033], "argument": [314, 376, 1031, 1033], "more": [314, 369, 385, 394, 982], "flexibl": [314, 968], "stabl": 314, "histgradientboostingregressor": [315, 553], "get_feature_names_out": 315, "avail": [315, 967, 1016, 1017], "group": [315, 317, 404, 1002, 1012], "infrequ": [315, 317, 988], "onehotencod": [315, 863], "minibatchnmf": [315, 529], "version": [315, 368, 372, 378, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "bisectingkmean": [315, 434], "divid": 315, "panda": [316, 379, 385], "enhanc": [316, 388, 998, 1023, 1024, 1025, 1026, 1027], "faster": [316, 407], "parser": [316, 368], "fetch_openml": [316, 487], "experiment": [316, 378, 396, 399, 570, 571, 1036], "arrai": [316, 383, 396, 1004], "lineardiscriminantanalysi": [316, 540], "effici": [316, 383], "targetencod": [317, 871], "model_select": [317, 399, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "validationcurvedisplai": [317, 809], "ordinalencod": [317, 864], "most": 320, "uncertain": 320, "activ": 321, "threshold": 323, "linearsvc": [330, 890], "unbalanc": [334, 993], "some": 335, "plai": 335, "percentil": 335, "case": [340, 974, 978], "tie": 341, "break": 341, "word": [345, 408, 1013], "strip": 345, "quantifi": [346, 978], "qualiti": [346, 978], "tfidfvector": [346, 347, 582], "lsa": 346, "top": [346, 978], "term": [346, 387, 408], "per": 346, "hashingvector": [346, 408, 580], "featurehash": [347, 573], "dictvector": [347, 572], "special": 347, "cost": [350, 994], "leav": [350, 404, 974], "understand": 354, "recommend": [356, 369, 998], "inconsist": 356, "leakag": 356, "dure": 356, "avoid": [356, 401], "control": [356, 407, 982], "none": 356, "randomst": 356, "instanc": [356, 362], "repeat": [356, 401, 404], "call": [356, 373], "splitter": [356, 399], "subtleti": 356, "get": [356, 385, 386], "reproduc": [356, 379], "across": 356, "execut": [356, 385], "configur": [360, 361], "overhead": 360, "input": [360, 376, 396, 400, 988], "tip": [360, 375, 382, 967, 975, 982, 992, 993, 994], "trick": [360, 380, 382, 408], "algebra": [360, 383], "librari": [360, 361], "reshap": [360, 1010], "link": [360, 368, 978], "manag": [361, 390], "higher": 361, "joblib": [361, 380], "lower": 361, "openmp": [361, 375], "numpi": [361, 379], "scipi": 361, "oversubscript": 361, "spawn": 361, "too": 361, "thread": 361, "switch": 361, "environ": 361, "sklearn_assume_finit": 361, "sklearn_working_memori": 361, "sklearn_se": 361, "sklearn_tests_global_random_se": 361, "sklearn_skip_network_test": 361, "sklearn_run_float32_test": 361, "sklearn_enable_debug_cython_direct": 361, "sklearn_build_enable_debug_symbol": 361, "sklearn_pairwise_dist_chunk_s": 361, "computation": 362, "bigger": 362, "stream": 362, "note": [362, 401, 404, 974], "tabl": [363, 385], "Of": 363, "content": [363, 385, 1004], "util": [367, 379, 383, 399, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 1013, 1017, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "svmlight": 368, "format": [368, 379, 385, 394, 979], "org": [368, 378, 1002], "repositori": 368, "arff": 368, "extern": [368, 997, 1004, 1020, 1029], "olivetti": 369, "usag": [369, 380, 385, 391, 396, 398, 401, 407, 408, 974], "convert": 369, "filter": 369, "realist": 369, "consider": [369, 974], "wild": 369, "covertyp": 369, "rcv1": 369, "kddcup": 369, "99": 369, "california": 369, "plant": 371, "linnerrud": 371, "wine": 371, "wisconsin": 371, "diagnost": 371, "instal": [372, 390], "nightli": 372, "runtim": 372, "tag": [372, 374, 376], "edit": 372, "platform": [372, 382, 390], "instruct": 372, "window": [372, 390], "maco": 372, "compil": [372, 380], "conda": 372, "forg": 372, "homebrew": 372, "linux": [372, 385, 390], "system": 372, "freebsd": 372, "altern": [372, 967], "bug": [373, 374, 378, 1001, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "triag": 373, "issu": [373, 374], "curat": 373, "fruit": 373, "pr": [373, 378], "help": [373, 374, 385], "review": [373, 374, 382, 1013], "member": 373, "close": 373, "tough": 373, "typic": 373, "workflow": [373, 374], "contribut": [374, 385], "submit": 374, "report": [374, 379, 978], "request": [374, 378, 382, 385], "good": [374, 379], "video": [374, 997], "git": 374, "pull": [374, 378, 382, 385], "checklist": [374, 378], "integr": 374, "ci": 374, "stall": 374, "unclaim": 374, "easi": 374, "want": 374, "github": 374, "action": 374, "coverag": [374, 382, 978], "write": 374, "matplotlib": 374, "monitor": 374, "tracker": [374, 1001], "maintain": [374, 378, 388, 394], "backward": 374, "guidelin": [374, 376], "read": 374, "exist": 374, "cython": [375, 380, 382], "convent": [375, 1004], "knowledg": 375, "eas": 375, "instanti": 376, "attribut": [376, 387, 967], "option": 376, "univers": 376, "your": [376, 379, 978], "own": [376, 385, 978], "templat": 376, "baseestim": [376, 414], "mixin": 376, "get_param": 376, "set_param": 376, "init": 376, "clone": [376, 425], "assert": 376, "guid": [377, 1015], "major": [378, 407, 1028, 1029], "minor": 378, "known": [378, 1028, 1029], "merg": 378, "web": 378, "site": 378, "craft": 379, "minim": [379, 994, 1033, 1034], "provid": 379, "fail": 379, "comment": 379, "boil": 379, "down": 379, "script": 379, "someth": 379, "small": 379, "do": [379, 385], "NOT": 379, "unless": 379, "i": [379, 385, 404, 1002], "extrem": [379, 407], "necessari": 379, "markdown": 379, "make_regress": [379, 515], "make_classif": [379, 506], "make_blob": [379, 503], "optim": [380, 399, 967, 975], "c": 380, "profil": 380, "extens": [380, 390], "yep": 380, "gperftool": 380, "debugg": 380, "gdb": 380, "gprof": 380, "valgrind": [380, 382], "callgrind": 380, "kcachegrind": 380, "warm": 380, "restart": 380, "overview": [381, 400, 984], "ax": 381, "saniti": 382, "preserv": 382, "fold": [382, 404], "unfold": 382, "outdat": 382, "diff": 382, "remot": 382, "track": 382, "branch": 382, "pytest": 382, "alias": 382, "flag": 382, "standard": [382, 988], "repli": 382, "debug": 382, "arm64": 382, "x86_64": 382, "tool": [383, 385], "matric": [383, 988], "warn": [383, 399], "except": [383, 399, 562, 563, 564, 565, 566, 567, 568, 569, 1032, 1036], "dispatch": 384, "frequent": 385, "ask": 385, "question": [385, 1001], "what": 385, "lot": 385, "peopl": [385, 1020, 1021, 1022, 1023], "pronounc": 385, "why": [385, 407], "pypi": 385, "deep": 385, "reinforc": 385, "Will": 385, "add": 385, "graphic": [385, 983], "did": 385, "remov": [385, 409, 988, 1020], "hmm": 385, "gpu": 385, "need": 385, "doe": 385, "directli": 385, "plan": 385, "so": 385, "my": 385, "ani": 385, "attent": 385, "inclus": 385, "includ": 385, "should": 385, "save": 385, "export": 385, "deploi": 385, "bunch": [385, 905], "usabl": 385, "deal": 385, "string": 385, "sometim": 385, "crash": 385, "freez": 385, "n_job": 385, "osx": [385, 390], "job": 385, "than": 385, "random_st": 385, "entir": 385, "start": 386, "processor": 386, "next": 386, "glossari": 387, "element": 387, "concept": [387, 974], "properti": 387, "role": 388, "technic": 388, "committe": 388, "propos": 388, "slep": 388, "latest": 390, "appl": 390, "silicon": 390, "m1": 390, "hardwar": 390, "alpin": 390, "arch": 390, "debian": 390, "ubuntu": 390, "fedora": 390, "netbsd": 390, "macport": 390, "mac": 390, "anaconda": 390, "enthought": 390, "deploy": 390, "intel": 390, "winpython": 390, "troubleshoot": 390, "caus": 390, "unweight": 391, "interfac": [391, 399], "persist": 394, "serial": 394, "secur": 394, "skop": 394, "interoper": [394, 998], "pytorch": 396, "mathemat": [397, 400, 407, 970, 972, 974, 981, 982, 985, 992, 993, 994], "formul": [397, 400, 407, 972, 974, 981, 982, 992, 993, 994], "sigmoid": [398, 976], "sklearn": [399, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "compos": [399, 455, 456, 457, 458, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "cross_decomposit": [399, 473, 474, 475, 476, 1030, 1032, 1034], "loader": 399, "discriminant_analysi": [399, 540, 541, 1028, 1029, 1032, 1034, 1035, 1036], "dummi": [399, 542, 543, 978, 1028, 1029, 1030, 1033, 1034], "feature_extract": [399, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "feature_select": [399, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "gaussian_process": [399, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "kernel_approxim": [399, 629, 630, 631, 632, 633, 1030, 1032, 1033, 1034, 1035, 1036], "kernel_ridg": [399, 634], "linear_model": [399, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "classic": [399, 977], "glm": 399, "naive_bay": [399, 825, 826, 827, 828, 829, 1028, 1030, 1031, 1032, 1033, 1035, 1036], "neural_network": [399, 846, 847, 848, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "random_project": [399, 882, 883, 884, 1034], "semi_supervis": [399, 885, 886, 887, 1030, 1031, 1032, 1036], "recent": 399, "low": [400, 407, 409], "mini": [400, 405], "batch": [400, 405], "assign": 400, "featureagglomer": [400, 436], "hierarchi": 400, "ad": 400, "connect": [400, 408, 1012], "consumpt": 400, "larg": [400, 408], "size": [400, 407], "reachabl": 400, "rand": 400, "index": [400, 933], "advantag": 400, "drawback": 400, "homogen": 400, "fowlk": 400, "mallow": 400, "calinski": 400, "harabasz": 400, "davi": 400, "bouldin": 400, "conting": 400, "pair": 400, "access": 401, "featureunion": [401, 849], "columntransform": [401, 455], "shrunk": 402, "oracl": 402, "plscanon": [403, 474], "plssvd": [403, 476], "plsregress": [403, 475], "held": 404, "cross_valid": [404, 813], "obtain": 404, "d": [404, 981], "loo": 404, "p": [404, 1002], "lpo": 404, "shuffl": [404, 952], "stratif": 404, "stratifi": 404, "stratifiedgroupkfold": [404, 805], "predefin": [404, 978], "decompos": 405, "exact": 405, "sparsepca": [405, 534], "kpca": 405, "choic": [405, 977, 981], "truncat": 405, "semant": 405, "nnmf": 405, "frobeniu": 405, "norm": 405, "beta": 405, "diverg": 405, "gradientboostingclassifi": [407, 550], "histgradientboostingclassifi": [407, 552], "gradientboostingregressor": [407, 551], "addit": [407, 970], "rate": 407, "subsampl": 407, "hard": 407, "soft": 407, "dict": 408, "detail": [408, 970, 974, 992, 993], "tf": 408, "idf": 408, "decod": 408, "applic": [408, 1012], "corpu": 408, "selectfrommodel": [409, 588], "recoveri": 409, "biclustermixin": 415, "classnameprefixfeaturesoutmixin": 416, "classifiermixin": 417, "clustermixin": 418, "densitymixin": 419, "metaestimatormixin": 420, "onetoonefeaturemixin": 421, "outliermixin": 422, "regressormixin": 423, "transformermixin": 424, "is_classifi": 426, "is_regressor": 427, "calibratedclassifiercv": 428, "calibrationdisplai": 429, "from_estim": [429, 622, 623, 688, 689, 691, 692, 693, 793, 809], "calibration_curv": 430, "affinitypropag": 431, "agglomerativeclust": 432, "spectralclust": 443, "spectralcoclust": 444, "affinity_propag": 445, "cluster_optics_dbscan": 446, "cluster_optics_xi": 447, "compute_optics_graph": 448, "estimate_bandwidth": 449, "k_mean": 450, "kmeans_plusplu": 451, "mean_shift": 452, "spectral_clust": 453, "ward_tre": 454, "transformedtargetregressor": 456, "make_column_selector": 457, "make_column_transform": 458, "config_context": 459, "ellipticenvelop": 460, "empiricalcovari": 461, "graphicallasso": 462, "graphicallassocv": 463, "mincovdet": 465, "shrunkcovari": 467, "empirical_covari": 468, "graphical_lasso": 469, "ledoit_wolf": 470, "ledoit_wolf_shrinkag": 471, "shrunk_covari": 472, "clear_data_hom": 477, "dump_svmlight_fil": 478, "fetch_20newsgroup": 479, "fetch_20newsgroups_vector": 480, "fetch_california_h": 481, "fetch_covtyp": 482, "fetch_kddcup99": 483, "fetch_lfw_pair": 484, "fetch_lfw_peopl": 485, "fetch_olivetti_fac": 486, "fetch_rcv1": 488, "fetch_species_distribut": 489, "get_data_hom": 490, "load_breast_canc": 491, "load_diabet": 492, "load_digit": 493, "load_fil": 494, "load_iri": 495, "load_linnerud": 496, "load_sample_imag": [497, 498], "load_svmlight_fil": [499, 500], "load_win": 501, "make_biclust": 502, "make_checkerboard": 504, "make_circl": 505, "make_friedman1": 507, "make_friedman2": 508, "make_friedman3": 509, "make_gaussian_quantil": 510, "make_hastie_10_2": 511, "make_low_rank_matrix": 512, "make_moon": 513, "make_multilabel_classif": 514, "make_s_curv": 516, "make_sparse_coded_sign": 517, "make_sparse_spd_matrix": 518, "make_sparse_uncorrel": 519, "make_spd_matrix": 520, "make_swiss_rol": 521, "dictionarylearn": 522, "factoranalysi": 523, "incrementalpca": 525, "latentdirichletalloc": 527, "minibatchdictionarylearn": 528, "sparsecod": 533, "truncatedsvd": 535, "dict_learn": 536, "dict_learning_onlin": 537, "non_negative_factor": 538, "sparse_encod": 539, "quadraticdiscriminantanalysi": 541, "dummyclassifi": 542, "dummyregressor": 543, "adaboostregressor": 545, "baggingclassifi": 546, "baggingregressor": 547, "extratreesclassifi": 548, "extratreesregressor": 549, "randomforestclassifi": 555, "randomforestregressor": 556, "randomtreesembed": 557, "stackingclassifi": 558, "stackingregressor": 559, "votingregressor": 561, "convergencewarn": 562, "dataconversionwarn": 563, "datadimensionalitywarn": 564, "efficiencywarn": 565, "fitfailedwarn": 566, "inconsistentversionwarn": 567, "notfittederror": 568, "undefinedmetricwarn": 569, "enable_halving_search_cv": 570, "enable_iterative_imput": 571, "patchextractor": 574, "extract_patches_2d": 575, "grid_to_graph": 576, "img_to_graph": 577, "reconstruct_from_patches_2d": 578, "countvector": 579, "tfidftransform": 581, "genericunivariateselect": 583, "rfe": 584, "rfecv": 585, "selectfdr": 586, "selectfpr": 587, "selectfw": 589, "selectkbest": 590, "selectpercentil": 591, "selectormixin": 592, "variancethreshold": 594, "chi2": 595, "f_classif": 596, "f_regress": 597, "mutual_info_classif": 598, "mutual_info_regress": 599, "r_regress": 600, "gaussianprocessclassifi": 601, "gaussianprocessregressor": 602, "compoundkernel": 603, "constantkernel": 604, "dotproduct": 605, "expsinesquar": 606, "exponenti": 607, "matern": 610, "pairwisekernel": 611, "rationalquadrat": 614, "sum": 615, "whitekernel": 616, "get_config": 617, "knnimput": 619, "missingind": 620, "simpleimput": 621, "decisionboundarydisplai": 622, "partialdependencedisplai": 623, "partial_depend": 624, "permutation_import": 625, "isotonicregress": 626, "check_increas": 627, "isotonic_regress": 628, "additivechi2sampl": 629, "nystroem": [630, 970], "rbfsampler": 632, "skewedchi2sampl": 633, "kernelridg": 634, "ardregress": 635, "bayesianridg": 636, "elasticnetcv": 638, "gammaregressor": 639, "larscv": 642, "lassocv": 644, "lassolar": 645, "lassolarscv": 646, "lassolars": 647, "logisticregress": 649, "logisticregressioncv": 650, "multitaskelasticnet": 651, "multitaskelasticnetcv": 652, "multitasklasso": 653, "multitasklassocv": 654, "orthogonalmatchingpursuit": 655, "orthogonalmatchingpursuitcv": 656, "passiveaggressiveclassifi": 657, "passiveaggressiveregressor": 658, "poissonregressor": 660, "ransacregressor": 662, "ridgecv": 664, "ridgeclassifi": 665, "ridgeclassifiercv": 666, "sgdclassifi": 667, "sgdoneclasssvm": 668, "sgdregressor": 669, "theilsenregressor": 670, "enet_path": 672, "lars_path": 673, "lars_path_gram": 674, "lasso_path": 675, "orthogonal_mp": 676, "orthogonal_mp_gram": 677, "ridge_regress": 678, "locallylinearembed": 680, "md": [681, 975], "spectralembed": 682, "locally_linear_embed": 684, "smacof": 685, "spectral_embed": 686, "trustworthi": 687, "from_predict": [688, 691, 692, 693], "detcurvedisplai": 689, "distancemetr": 690, "predictionerrordisplai": 692, "accuracy_scor": 694, "adjusted_mutual_info_scor": 695, "adjusted_rand_scor": 696, "average_precision_scor": 698, "balanced_accuracy_scor": 699, "brier_score_loss": 700, "calinski_harabasz_scor": 701, "check_scor": 702, "class_likelihood_ratio": 703, "classification_report": 704, "contingency_matrix": 705, "pair_confusion_matrix": 706, "cohen_kappa_scor": 707, "completeness_scor": 708, "confusion_matrix": 709, "consensus_scor": 710, "coverage_error": 711, "d2_absolute_error_scor": 712, "d2_pinball_scor": 713, "d2_tweedie_scor": 714, "davies_bouldin_scor": 715, "dcg_score": 716, "det_curv": 717, "explained_variance_scor": 718, "f1_score": 719, "fbeta_scor": 720, "fowlkes_mallows_scor": 721, "get_scor": 722, "get_scorer_nam": 723, "hamming_loss": 724, "hinge_loss": 725, "homogeneity_completeness_v_measur": 726, "homogeneity_scor": 727, "jaccard_scor": 728, "label_ranking_average_precision_scor": 729, "label_ranking_loss": 730, "log_loss": 731, "make_scor": 732, "matthews_corrcoef": 733, "max_error": 734, "mean_absolute_error": 735, "mean_absolute_percentage_error": 736, "mean_gamma_devi": 737, "mean_pinball_loss": 738, "mean_poisson_devi": 739, "mean_squared_error": 740, "mean_squared_log_error": 741, "mean_tweedie_devi": 742, "median_absolute_error": 743, "multilabel_confusion_matrix": 744, "mutual_info_scor": 745, "ndcg_score": 746, "normalized_mutual_info_scor": 747, "additive_chi2_kernel": 748, "chi2_kernel": 749, "cosine_dist": 750, "cosine_similar": 751, "distance_metr": 752, "euclidean_dist": 753, "haversine_dist": 754, "kernel_metr": 755, "laplacian_kernel": 756, "linear_kernel": 757, "manhattan_dist": 758, "nan_euclidean_dist": 759, "paired_cosine_dist": 760, "paired_dist": 761, "paired_euclidean_dist": 762, "paired_manhattan_dist": 763, "pairwise_kernel": 764, "polynomial_kernel": 765, "rbf_kernel": 766, "sigmoid_kernel": 767, "pairwise_dist": 768, "pairwise_distances_argmin": 769, "pairwise_distances_argmin_min": 770, "pairwise_distances_chunk": 771, "precision_recall_curv": 772, "precision_recall_fscore_support": 773, "precision_scor": 774, "r2_score": 775, "rand_scor": 776, "recall_scor": 777, "roc_auc_scor": 778, "roc_curv": 779, "silhouette_sampl": 780, "silhouette_scor": 781, "top_k_accuracy_scor": 782, "v_measure_scor": 783, "zero_one_loss": 784, "bayesiangaussianmixtur": [785, 977], "gaussianmixtur": [786, 977], "groupkfold": 788, "groupshufflesplit": 789, "halvinggridsearchcv": 790, "halvingrandomsearchcv": 791, "kfold": 792, "learningcurvedisplai": 793, "leaveonegroupout": 794, "leaveoneout": 795, "leavepgroupsout": 796, "leavepout": 797, "parametergrid": 798, "parametersampl": 799, "predefinedsplit": 800, "randomizedsearchcv": 801, "repeatedkfold": 802, "repeatedstratifiedkfold": 803, "shufflesplit": 804, "stratifiedkfold": 806, "stratifiedshufflesplit": 807, "timeseriessplit": 808, "check_cv": 810, "cross_val_predict": 811, "learning_curv": 814, "permutation_test_scor": 815, "train_test_split": 816, "validation_curv": 817, "onevsoneclassifi": [818, 979], "onevsrestclassifi": [819, 979], "outputcodeclassifi": [820, 979], "classifierchain": [821, 979], "multioutputclassifi": [822, 979], "multioutputregressor": [823, 979], "regressorchain": [824, 979], "bernoullinb": 825, "categoricalnb": 826, "complementnb": 827, "gaussiannb": 828, "multinomialnb": 829, "balltre": [830, 981], "kdtree": [831, 981], "kneighborsclassifi": 832, "kneighborsregressor": 833, "kneighborstransform": 834, "kerneldens": 835, "localoutlierfactor": 836, "nearestcentroid": 837, "nearestneighbor": 838, "neighborhoodcomponentsanalysi": 839, "radiusneighborsclassifi": 840, "radiusneighborsregressor": 841, "radiusneighborstransform": 842, "kneighbors_graph": 843, "radius_neighbors_graph": 844, "sort_graph_by_row_valu": 845, "bernoullirbm": 846, "mlpregressor": 848, "make_pipelin": 851, "make_union": 852, "binar": [853, 873, 988, 989], "functiontransform": 854, "kernelcenter": 856, "labelbinar": [857, 989], "labelencod": 858, "multilabelbinar": [861, 989], "polynomialfeatur": 865, "splinetransform": 869, "add_dummy_featur": 872, "label_binar": 874, "maxabs_scal": 875, "minmax_scal": 876, "power_transform": 878, "quantile_transform": 879, "robust_scal": 880, "gaussianrandomproject": 882, "sparserandomproject": 883, "johnson_lindenstrauss_min_dim": 884, "labelpropag": 885, "labelspread": 886, "selftrainingclassifi": 887, "set_config": 888, "show_vers": 889, "linearsvr": 891, "nusvc": 892, "nusvr": 893, "oneclasssvm": 894, "l1_min_c": 897, "decisiontreeclassifi": 898, "extratreeclassifi": 900, "extratreeregressor": 901, "export_graphviz": 902, "export_text": 903, "plot_tre": 904, "_safe_index": 906, "arrayfunc": 907, "min_po": 907, "as_float_arrai": 908, "assert_all_finit": 909, "check_x_i": 910, "check_arrai": 911, "check_consistent_length": 912, "check_random_st": 913, "check_scalar": 914, "class_weight": [915, 916], "compute_class_weight": 915, "compute_sample_weight": 916, "discoveri": [918, 919, 920], "all_displai": 918, "all_estim": 919, "all_funct": 920, "estimator_check": [921, 922], "check_estim": 921, "parametrize_with_check": 922, "estimator_html_repr": 923, "extmath": [924, 925, 926, 927, 928, 929], "fast_logdet": 925, "randomized_range_find": 926, "randomized_svd": 927, "safe_sparse_dot": 928, "weighted_mod": 929, "gen_batch": 930, "gen_even_slic": 931, "single_source_shortest_path_length": 932, "metadata_rout": [934, 935, 936, 937, 938], "metadatarequest": 934, "metadatarout": 935, "methodmap": 936, "get_routing_for_object": 937, "process_rout": 938, "metaestim": 939, "available_if": 939, "is_multilabel": 940, "type_of_target": 941, "unique_label": 942, "murmurhash3_32": 943, "delai": 945, "parallel_backend": 946, "sample_without_replac": 947, "register_parallel_backend": 948, "resampl": 949, "safe_mask": 950, "safe_sqr": 951, "sparsefunc": [953, 954, 955, 956, 957, 958, 959, 1029], "incr_mean_variance_axi": 953, "inplace_column_scal": 954, "inplace_csr_column_scal": 955, "inplace_row_scal": 956, "inplace_swap_column": 957, "inplace_swap_row": 958, "mean_variance_axi": 959, "sparsefuncs_fast": [960, 961], "inplace_csr_row_normalize_l1": 960, "inplace_csr_row_normalize_l2": 961, "check_is_fit": 962, "check_memori": 963, "check_symmetr": 964, "column_or_1d": 965, "has_fit_paramet": 966, "exhaust": 967, "min_resourc": 967, "aggress": [967, 974], "analyz": 967, "cv_results_": 967, "brute": [967, 981], "forc": [967, 981], "keep": 968, "mark": 968, "nan": 968, "chi": [970, 976], "skew": 970, "tensor": 970, "sketch": 970, "qda": 972, "omp": 974, "liblinear": 974, "passiv": 974, "scenario": 974, "trade": 974, "off": 974, "which": 974, "consensu": 974, "median": [974, 978], "huber": 974, "extend": 974, "introduct": [975, 1004], "modifi": 975, "hessian": 975, "eigenmap": 975, "tangent": 975, "align": 975, "nonmetr": 975, "barn": 975, "hut": 975, "cosin": 976, "laplacian": 976, "pro": 977, "con": 977, "maxim": 977, "rule": 978, "cohen": 978, "kappa": 978, "ham": 978, "jaccard": 978, "hing": 978, "matthew": 978, "zero": 978, "brier": 978, "discount": 978, "cumul": 978, "gain": 978, "r\u00b2": 978, "absolut": 978, "logarithm": 978, "percentag": 978, "explain": 978, "pinbal": 978, "d\u00b2": 978, "complement": 980, "bernoulli": [980, 983], "unsupervis": [981, 983, 995, 1012, 1014], "find": 981, "ball": 981, "leaf_siz": 981, "shrunken": 981, "warm_start": 982, "parametr": 983, "up": 984, "ellipt": 984, "envelop": 984, "isol": 984, "outlin": 986, "mislead": 986, "strongli": 986, "rang": 988, "whiten": 988, "bin": 988, "lemma": 990, "unlabel": 991, "entri": 991, "id3": 994, "c4": 994, "5": [994, 1020], "c5": 994, "cart": 994, "welcom": 996, "talk": 997, "scientif": [997, 1007], "framework": 998, "domain": 998, "translat": 998, "roadmap": 999, "statement": 999, "2018": 999, "architectur": 999, "goal": 999, "subpackag": 999, "mail": 1001, "user": [1001, 1015], "gitter": 1001, "who": 1002, "j": 1002, "morgan": 1002, "spotifi": 1002, "inria": 1002, "betawork": 1002, "hug": 1002, "evernot": 1002, "t\u00e9l\u00e9com": 1002, "paristech": 1002, "book": 1002, "com": 1002, "aweb": 1002, "yhat": 1002, "rangespan": 1002, "birchbox": 1002, "bestofmedia": 1002, "phimeca": 1002, "howaboutw": 1002, "peerindex": 1002, "datarobot": 1002, "okcupid": 1002, "love": 1002, "publica": 1002, "machinali": 1002, "solido": 1002, "infonea": 1002, "dataiku": 1002, "otto": 1002, "zopa": 1002, "mar": 1002, "bnp": 1002, "pariba": 1002, "cardif": 1002, "section": 1004, "cast": 1004, "updat": [1004, 1030], "right": 1006, "put": 1009, "open": 1009, "ship": 1010, "would": 1010, "high": 1011, "solv": [1011, 1012], "vocabulari": 1011, "curs": 1011, "iris": 1011, "same": 1011, "seek": 1012, "constrain": 1012, "inverse_transform": 1012, "setup": 1013, "token": 1013, "occurr": 1013, "languag": 1013, "identif": 1013, "sentiment": 1013, "movi": 1013, "cli": 1013, "where": 1013, "here": 1013, "12": 1020, "changelog": [1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "11": 1020, "9": 1020, "8": 1020, "7": 1020, "6": [1020, 1026], "modul": [1020, 1028, 1029, 1035, 1036, 1037], "misc": 1020, "4": [1020, 1028, 1037], "earlier": 1020, "13": 1021, "14": 1022, "15": 1023, "16": 1024, "17": 1025, "18": 1026, "last": 1026, "19": 1027, "21": 1029, "legend": [1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "post1": 1030, "websit": 1030, "clear": 1030, "public": 1030, "futurewarn": 1030, "enforc": [1031, 1033]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1020, "authors"], [1020, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [388, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [165, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [109, "concluding-remarks"], [223, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [25, "references"], [27, "references"], [81, "references"], [113, "references"], [174, "references"], [182, "references"], [186, null], [259, null], [292, "references"], [369, null], [369, null], [369, null], [371, null], [371, null], [371, null], [371, null], [371, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [408, null], [410, "references"], [968, "references"], [968, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [985, null], [988, null], [988, null], [991, null], [991, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [50, "load-the-data"], [124, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [187, "conclusion"], [308, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [49, "plot-results"], [78, "plot-results"], [96, "plot-results"], [97, "plot-results"], [116, "plot-results"], [286, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [360, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [332, "visualization"], [399, "visualization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[15, "computation-times"], [22, "computation-times"], [28, "computation-times"], [35, "computation-times"], [68, "computation-times"], [76, "computation-times"], [83, "computation-times"], [87, "computation-times"], [93, "computation-times"], [107, "computation-times"], [134, "computation-times"], [140, "computation-times"], [148, "computation-times"], [160, "computation-times"], [164, "computation-times"], [172, "computation-times"], [175, "computation-times"], [217, "computation-times"], [225, "computation-times"], [242, "computation-times"], [251, "computation-times"], [275, "computation-times"], [278, "computation-times"], [293, "computation-times"], [299, "computation-times"], [309, "computation-times"], [318, "computation-times"], [326, "computation-times"], [343, "computation-times"], [348, "computation-times"], [355, "computation-times"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Biclustering": [[18, "biclustering"], [165, "biclustering"], [370, "biclustering"], [397, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "Generate sample data": [[20, "generate-sample-data"], [38, "generate-sample-data"], [55, "generate-sample-data"], [63, "generate-sample-data"], [78, "generate-sample-data"], [96, "generate-sample-data"], [97, "generate-sample-data"], [143, "generate-sample-data"], [233, "generate-sample-data"], [272, "generate-sample-data"], [291, "generate-sample-data"], [339, "generate-sample-data"]], "Fitting SpectralBiclustering": [[20, "fitting-spectralbiclustering"]], "Plotting results": [[20, "plotting-results"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[23, "calibration"], [165, "calibration"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [177, "generate-synthetic-dataset"], [177, "id1"], [182, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Dataset": [[25, "dataset"], [27, "dataset"], [187, "dataset"], [265, "dataset"]], "Calibration curves": [[25, "calibration-curves"], [27, "calibration-curves"], [398, "calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [980, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [347, "summary"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Classification": [[29, "classification"], [32, "classification"], [158, "classification"], [165, "classification"], [407, "classification"], [407, "id11"], [974, "classification"], [981, "id4"], [982, "classification"], [992, "classification"], [993, "classification"], [994, "classification"], [1011, "classification"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Classifier comparison": [[31, "classifier-comparison"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[34, "colormap"]], "Datasets generation functions": [[34, "datasets-generation-functions"]], "Plot functions": [[34, "plot-functions"]], "Plot": [[34, "plot"]], "Clustering": [[36, "clustering"], [165, "clustering"], [400, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "Plot result": [[38, "plot-result"], [63, "plot-result"], [67, "plot-result"], [67, "id2"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[45, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[47, "generate-data"], [67, "generate-data"], [80, "generate-data"], [192, "generate-data"], [298, "generate-data"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Compute clustering": [[47, "compute-clustering"], [67, "compute-clustering"], [67, "id1"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Data generation": [[49, "data-generation"], [57, "data-generation"], [126, "data-generation"], [146, "data-generation"], [156, "data-generation"], [249, "data-generation"], [320, "data-generation"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Plot the results": [[50, "plot-the-results"], [82, "plot-the-results"], [133, "plot-the-results"], [163, "plot-the-results"]], "Feature agglomeration": [[51, "feature-agglomeration"], [995, "feature-agglomeration"], [1012, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Original image": [[53, "original-image"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Encoding strategy": [[53, "encoding-strategy"]], "Memory footprint": [[53, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[55, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[55, "scale-invariance"]], "Multi-Scale Clustering": [[55, "multi-scale-clustering"]], "Hyperparameter Robustness": [[55, "hyperparameter-robustness"]], "min_cluster_size": [[55, "min-cluster-size"]], "min_samples": [[55, "min-samples"]], "dbscan_clustering": [[55, "dbscan-clustering"]], "Inductive Clustering": [[56, "inductive-clustering"]], "Demonstration of k-means assumptions": [[57, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[57, "fit-models-and-plot-results"]], "Possible solutions": [[57, "possible-solutions"]], "Final remarks": [[57, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[58, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[58, "load-the-dataset"]], "Define our evaluation benchmark": [[58, "define-our-evaluation-benchmark"]], "Run the benchmark": [[58, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[58, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[59, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[60, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[61, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[62, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[63, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[63, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[64, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[64, "generate-the-data"], [66, "generate-the-data"], [82, "generate-the-data"]], "Compute clustering with KMeans": [[64, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[64, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[64, "establishing-parity-between-clusters"]], "Plotting the results": [[64, "plotting-the-results"], [109, "plotting-the-results"], [111, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[65, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[66, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[66, "plotting-four-circles"]], "Plotting two circles": [[66, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[67, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[67, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[69, "pipelines-and-composite-estimators"], [165, "pipelines-and-composite-estimators"], [401, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[70, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[70, "newsgroups-dataset"]], "Creating transformers": [[70, "creating-transformers"]], "Classification pipeline": [[70, "classification-pipeline"]], "Column Transformer with Mixed Types": [[71, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[72, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[72, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[72, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[73, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[74, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[75, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[75, "synthetic-example"]], "Real-world data set": [[75, "real-world-data-set"]], "Covariance estimation": [[77, "covariance-estimation"], [165, "covariance-estimation"], [402, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[78, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[78, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[78, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[79, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[80, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[80, null], [110, null], [170, null], [264, null], [265, null], [368, null], [369, null], [397, null], [397, null], [397, null], [398, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [402, null], [402, null], [402, null], [402, null], [404, null], [404, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [408, null], [409, null], [967, null], [967, null], [970, null], [971, null], [972, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [975, null], [975, null], [975, null], [975, null], [975, null], [975, null], [975, null], [975, null], [976, null], [976, null], [978, null], [978, null], [978, null], [978, null], [978, null], [978, null], [978, null], [978, null], [979, null], [979, null], [979, null], [980, null], [980, null], [980, null], [981, null], [981, null], [981, null], [982, null], [983, null], [984, null], [984, null], [984, null], [984, null], [986, null], [988, null], [988, null], [990, null], [990, null], [990, null], [992, null], [992, null], [993, null], [994, null], [994, null]], "Comparison of results": [[80, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[81, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[81, "minimum-covariance-determinant-estimator"]], "Evaluation": [[81, "evaluation"], [298, "evaluation"]], "Sparse inverse covariance estimation": [[82, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[82, "estimate-the-covariance"]], "Cross decomposition": [[84, "cross-decomposition"], [165, "cross-decomposition"], [403, "cross-decomposition"]], "Compare cross decomposition methods": [[85, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[85, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[85, "canonical-symmetric-pls"]], "Transform data": [[85, "transform-data"]], "Scatter plot of scores": [[85, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[85, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[85, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[85, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[86, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[86, "the-data"]], "Projection on one component and predictive power": [[86, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[88, "dataset-examples"], [165, "dataset-examples"]], "The Digit Dataset": [[89, "the-digit-dataset"]], "The Iris Dataset": [[90, "the-iris-dataset"]], "Plot randomly generated classification dataset": [[91, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[92, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[94, "decomposition"], [95, "decomposition"], [165, "decomposition"]], "Faces dataset decompositions": [[95, "faces-dataset-decompositions"]], "Dataset preparation": [[95, "dataset-preparation"], [219, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[95, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[95, "non-negative-components-nmf"]], "Independent components - FastICA": [[95, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[95, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[95, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[95, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[95, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[95, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[95, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[95, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[95, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[96, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[96, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[97, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[98, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[98, "generate-distorted-image"]], "Display the distorted image": [[98, "display-the-distorted-image"]], "Extract reference patches": [[98, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[98, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[98, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[99, "incremental-pca"], [405, "incremental-pca"]], "Kernel PCA": [[100, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[100, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[100, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[101, "principal-components-analysis-pca"]], "Create the data": [[101, "create-the-data"], [103, "create-the-data"]], "Plot the figures": [[101, "plot-the-figures"]], "PCA example with Iris Data-set": [[102, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[103, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[103, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[104, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[105, "sparse-coding-with-a-precomputed-dictionary"], [405, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[106, "factor-analysis-with-rotation-to-visualize-patterns"]], "Ensemble methods": [[108, "ensemble-methods"], [165, "ensemble-methods"]], "Discrete versus Real AdaBoost": [[109, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[109, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[109, "adaboost-with-discrete-samme-and-real-samme-r"]], "Multi-class AdaBoosted Decision Trees": [[110, "multi-class-adaboosted-decision-trees"]], "Creating the dataset": [[110, "creating-the-dataset"]], "Training the AdaBoostClassifier": [[110, "training-the-adaboostclassifier"]], "Analysis": [[110, "analysis"]], "Convergence of the AdaBoostClassifier": [[110, "convergence-of-the-adaboostclassifier"]], "Errors and weights of the Weak Learners": [[110, "errors-and-weights-of-the-weak-learners"]], "Decision Tree Regression with AdaBoost": [[111, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[111, "preparing-the-data"], [174, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[111, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[112, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[113, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[114, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[115, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[116, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[116, "load-dataset"]], "Compute score and computation times": [[116, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[117, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[117, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[117, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[117, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[118, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[118, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[118, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[119, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[120, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[120, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[120, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[120, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[120, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[120, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[120, "model-comparison"]], "Limiting the number of splits": [[120, "limiting-the-number-of-splits"]], "Early stopping of Gradient Boosting": [[121, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[121, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[121, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[122, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[123, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[123, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[123, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[123, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[123, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[124, "gradient-boosting-regression"]], "Data preprocessing": [[124, "data-preprocessing"]], "Fit regression model": [[124, "fit-regression-model"], [291, "fit-regression-model"], [339, "fit-regression-model"]], "Plot training deviance": [[124, "plot-training-deviance"]], "Plot feature importance": [[124, "plot-feature-importance"]], "Gradient Boosting regularization": [[125, "gradient-boosting-regularization"]], "IsolationForest example": [[126, "isolationforest-example"]], "Training of the model": [[126, "training-of-the-model"]], "Plot discrete decision boundary": [[126, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[126, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[127, "monotonic-constraints"], [407, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[127, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[128, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[129, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[130, "combine-predictors-using-stacking"]], "Download the dataset": [[130, "download-the-dataset"]], "Make pipeline to preprocess the data": [[130, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[130, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[130, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[131, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[132, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[133, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[133, "training-classifiers"]], "Making predictions": [[133, "making-predictions"]], "Tutorial exercises": [[135, "tutorial-exercises"], [165, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[136, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[136, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[136, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[136, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[137, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[138, "digits-classification-exercise"]], "SVM Exercise": [[139, "svm-exercise"]], "Feature Selection": [[141, "feature-selection"], [165, "feature-selection"]], "Comparison of F-test and mutual information": [[142, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[143, "univariate-feature-selection"]], "Univariate feature selection": [[143, "id1"], [409, "univariate-feature-selection"]], "Compare with SVMs": [[143, "compare-with-svms"]], "Pipeline ANOVA SVM": [[144, "pipeline-anova-svm"]], "Recursive feature elimination": [[145, "recursive-feature-elimination"], [409, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[146, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[146, "model-training-and-selection"], [249, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[146, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[147, "model-based-and-sequential-feature-selection"]], "Loading the data": [[147, "loading-the-data"]], "Feature importance from coefficients": [[147, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[147, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[147, "selecting-features-with-sequential-feature-selection"]], "Discussion": [[147, "discussion"]], "Gaussian Process for Machine Learning": [[149, "gaussian-process-for-machine-learning"], [165, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[150, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[150, "generating-a-dataset"]], "Limitations of a simple linear model": [[150, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[150, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[150, "kernel-ridge"]], "Gaussian process regression": [[150, "gaussian-process-regression"]], "Final conclusion": [[150, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[151, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[152, "gaussian-process-classification-gpc-on-iris-dataset"], [410, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[153, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[154, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[155, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[155, "build-the-dataset"]], "Design the proper kernel": [[155, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[155, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[155, "interpretation-of-kernel-hyperparameters"]], "Gaussian process regression (GPR) with noise-level estimation": [[156, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[156, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[157, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[157, "dataset-generation"], [200, "dataset-generation"]], "Example with noise-free target": [[157, "example-with-noise-free-target"]], "Example with noisy targets": [[157, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[158, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[158, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[158, "regression"], [407, "regression"], [407, "id10"], [974, "regression"], [982, "regression"], [992, "regression"], [993, "regression"], [994, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[159, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[159, "helper-function"]], "Dataset and Gaussian process generation": [[159, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[159, "kernel-cookbook"]], "Radial Basis Function kernel": [[159, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[159, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[159, "exp-sine-squared-kernel"], [410, "exp-sine-squared-kernel"]], "Dot-product kernel": [[159, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[159, "matern-kernel"], [410, "matern-kernel"]], "Missing Value Imputation": [[161, "missing-value-imputation"], [165, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[162, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[163, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[163, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[163, "impute-the-missing-data-and-score"]], "Missing information": [[163, "missing-information"]], "Estimate the score": [[163, "estimate-the-score"]], "Replace missing values by 0": [[163, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[163, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[163, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[163, "iterative-imputation-of-the-missing-values"]], "Examples": [[165, "examples"], [362, "examples"], [369, null], [369, "examples"], [404, null], [404, null], [409, null], [409, null], [991, null], [991, null], [995, null], [995, null], [995, null], [1020, "examples"]], "Release Highlights": [[165, "release-highlights"], [310, "release-highlights"]], "Decision Trees": [[165, "decision-trees"], [349, "decision-trees"], [994, "decision-trees"]], "Gaussian Mixture Models": [[165, "gaussian-mixture-models"], [243, "gaussian-mixture-models"]], "Generalized Linear Models": [[165, "generalized-linear-models"], [176, "generalized-linear-models"], [974, "generalized-linear-models"]], "Inspection": [[165, "inspection"], [166, "inspection"], [389, "inspection"]], "Kernel Approximation": [[165, "kernel-approximation"], [173, "kernel-approximation"], [970, "kernel-approximation"]], "Manifold learning": [[165, "manifold-learning"], [218, "manifold-learning"], [975, "manifold-learning"]], "Miscellaneous": [[165, "miscellaneous"], [226, "miscellaneous"], [399, "miscellaneous"], [1028, "miscellaneous"], [1028, "id40"], [1029, "miscellaneous"], [1030, "miscellaneous"], [1031, "miscellaneous"], [1031, "id13"], [1032, "miscellaneous"], [1033, "miscellaneous"], [1036, "miscellaneous"]], "Model Selection": [[165, "model-selection"], [252, "model-selection"]], "Multioutput methods": [[165, "multioutput-methods"], [276, "multioutput-methods"]], "Nearest Neighbors": [[165, "nearest-neighbors"], [280, "nearest-neighbors"], [981, "nearest-neighbors"]], "Neural Networks": [[165, "neural-networks"], [294, "neural-networks"]], "Preprocessing": [[165, "preprocessing"], [300, "preprocessing"]], "Semi Supervised Classification": [[165, "semi-supervised-classification"], [319, "semi-supervised-classification"]], "Support Vector Machines": [[165, "support-vector-machines"], [327, "support-vector-machines"], [993, "support-vector-machines"]], "Working with text documents": [[165, "working-with-text-documents"], [344, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[167, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[167, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[167, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[167, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[167, "income-prediction-with-partial-observations"]], "Lessons learned": [[167, "lessons-learned"], [168, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[168, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[168, "the-dataset-wages"]], "The machine-learning pipeline": [[168, "the-machine-learning-pipeline"]], "Processing the dataset": [[168, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[168, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[168, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[168, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[168, "preprocessing-numerical-variables"]], "Linear models with regularization": [[168, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[168, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[168, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[169, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[169, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[169, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[169, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[169, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[169, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[169, "multi-layer-perceptron"]], "Gradient boosting": [[169, "gradient-boosting"]], "Analysis of the plots": [[169, "analysis-of-the-plots"]], "ICE vs. PDP": [[169, "ice-vs-pdp"]], "2D interaction plots": [[169, "d-interaction-plots"]], "3D representation": [[169, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[170, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[170, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[170, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[170, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[171, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[171, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[171, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[174, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[174, "partitioning-the-data"]], "Feature normalization": [[174, "feature-normalization"]], "Establishing a baseline model": [[174, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[174, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[174, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[174, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[177, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[177, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[177, "fit-the-regressors"], [177, "id2"]], "Plot the true and estimated coefficients": [[177, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[177, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[177, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[177, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[178, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[178, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[178, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[178, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[179, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[180, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[181, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[182, "l1-based-models-for-sparse-signals"]], "Lasso": [[182, "lasso"], [974, "lasso"]], "Automatic Relevance Determination (ARD)": [[182, "automatic-relevance-determination-ard"]], "ElasticNet": [[182, "elasticnet"]], "Plot and analysis of the results": [[182, "plot-and-analysis-of-the-results"]], "Conclusions": [[182, "conclusions"]], "Lasso and Elastic Net": [[183, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[184, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[184, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[184, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[185, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[186, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[187, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[187, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[187, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[187, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[187, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[187, "summary-of-cross-validation-approach"]], "Logistic function": [[188, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[189, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[190, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[191, "regularization-path-of-l1-logistic-regression"]], "Load data": [[191, "load-data"]], "Compute regularization path": [[191, "compute-regularization-path"]], "Plot regularization path": [[191, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[192, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[192, "fit-models"]], "Plot support and time series": [[192, "plot-support-and-time-series"]], "Non-negative least squares": [[193, "non-negative-least-squares"]], "Linear Regression Example": [[194, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[195, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[196, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[197, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[198, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[198, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[198, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[198, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[198, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[198, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[198, "evaluation-of-the-ranking-power"]], "Main takeaways": [[198, "main-takeaways"]], "Polynomial and Spline interpolation": [[199, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[199, "periodic-splines"]], "Quantile regression": [[200, "quantile-regression"]], "Fitting a QuantileRegressor": [[200, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[200, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[201, "robust-linear-model-estimation-using-ransac"]], "Ridge coefficients as a function of the L2 Regularization": [[202, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Purpose of this example": [[202, "purpose-of-this-example"]], "Creating a non-noisy data set": [[202, "creating-a-non-noisy-data-set"]], "Training the Ridge Regressor": [[202, "training-the-ridge-regressor"]], "Plotting trained Coefficients and Mean Squared Errors": [[202, "plotting-trained-coefficients-and-mean-squared-errors"]], "Interpreting the plots": [[202, "interpreting-the-plots"]], "Plot Ridge coefficients as a function of the regularization": [[203, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[203, "compute-paths"]], "Display results": [[203, "display-results"]], "Robust linear estimator fitting": [[204, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[205, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[206, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[207, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[208, "sgd-convex-loss-functions"]], "SGD: Penalties": [[209, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[210, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[211, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[212, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[213, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[214, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[215, "theil-sen-regression"]], "Outliers only in the y direction": [[215, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[215, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[216, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[216, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[216, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[216, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[216, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[219, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[219, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[219, "locally-linear-embeddings"]], "Isomap Embedding": [[219, "isomap-embedding"]], "Multidimensional scaling": [[219, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[219, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[219, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[220, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[220, "load-digits-dataset"]], "Helper function to plot embedding": [[220, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[220, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[221, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[222, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[223, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[223, "swiss-roll"]], "Swiss-Hole": [[223, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[224, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[227, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[228, "visualizations-with-display-objects"]], "Load Data and train model": [[228, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[228, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[228, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[228, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[228, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[229, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[229, "compact-text-representation"]], "Rich HTML representation": [[229, "rich-html-representation"]], "Isotonic Regression": [[230, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[231, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[231, "theoretical-bounds"]], "Empirical validation": [[231, "empirical-validation"]], "Remarks": [[231, "remarks"]], "Explicit feature map approximation for RBF kernels": [[232, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[232, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[232, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[232, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[233, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[233, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[233, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[233, "look-at-the-results"], [339, "look-at-the-results"]], "Visualize training and prediction times": [[233, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[233, "visualize-the-learning-curves"]], "Metadata Routing": [[234, "metadata-routing"], [317, "metadata-routing"], [387, "metadata-routing"], [391, "id1"]], "Estimators": [[234, "estimators"], [356, "estimators"], [356, "id2"], [376, "estimators"], [399, "estimators"]], "Router and Consumer": [[234, "router-and-consumer"]], "Simple Pipeline": [[234, "simple-pipeline"]], "Deprecation / Default Value Change": [[234, "deprecation-default-value-change"]], "Third Party Development and scikit-learn Dependency": [[234, "third-party-development-and-scikit-learn-dependency"]], "Multilabel classification": [[235, "multilabel-classification"], [979, "multilabel-classification"]], "Face completion with a multi-output estimators": [[236, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[237, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[237, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[237, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[237, "plot-and-interpret-results"]], "Advanced Plotting With Partial Dependence": [[238, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[238, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[238, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[238, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[238, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[239, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[239, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[239, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[239, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[239, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[239, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[240, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[240, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[240, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[240, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[241, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[244, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[245, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[246, "gmm-covariances"]], "GMM Initialization Methods": [[247, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[248, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[249, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[249, "plot-the-bic-scores"]], "Plot the best model": [[249, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[250, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[253, "confusion-matrix"], [978, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[254, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[254, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[254, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[254, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[255, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[256, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[256, "generate-synthetic-data"]], "Define the classifiers": [[256, "define-the-classifiers"]], "Plot ROC and DET curves": [[256, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[257, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[257, "the-dataset"]], "Define our grid-search strategy": [[257, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[257, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[258, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[259, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[259, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[259, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[259, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[259, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[259, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[259, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[260, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[260, "data-loading"]], "Pipeline with hyperparameter tuning": [[260, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[261, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[261, "learning-curve"]], "Complexity analysis": [[261, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[262, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[262, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[262, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[262, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[263, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[263, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[263, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[264, "nested-versus-non-nested-cross-validation"]], "See Also:": [[264, null], [401, null]], "Test with permutations the significance of a classification score": [[265, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[265, "permutation-test-score"], [404, "permutation-test-score"]], "Original data": [[265, "original-data"], [301, "original-data"]], "Random data": [[265, "random-data"]], "Precision-Recall": [[266, "precision-recall"]], "In binary classification settings": [[266, "in-binary-classification-settings"]], "Dataset and model": [[266, "dataset-and-model"]], "Plot the Precision-Recall curve": [[266, "plot-the-precision-recall-curve"]], "In multi-label settings": [[266, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[266, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[266, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[266, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[266, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[267, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[268, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[268, "load-and-prepare-data"], [269, "load-and-prepare-data"], [306, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[268, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[268, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[268, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[268, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[268, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[268, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[268, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[268, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[269, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[269, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[270, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[271, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[271, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[272, "train-error-vs-test-error"]], "Compute train and test errors": [[272, "compute-train-and-test-errors"]], "Plot results functions": [[272, "plot-results-functions"]], "Underfitting vs. Overfitting": [[273, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[274, "plotting-validation-curves"]], "Classifier Chain": [[277, "classifier-chain"]], "Approximate nearest neighbors in TSNE": [[279, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[281, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[282, "nearest-neighbors-classification"], [981, "nearest-neighbors-classification"]], "Kernel Density Estimation": [[283, "kernel-density-estimation"], [406, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[284, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[285, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[286, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[286, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[286, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[287, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[288, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[289, "neighborhood-components-analysis-illustration"]], "Original points": [[289, "original-points"]], "Learning an embedding": [[289, "learning-an-embedding"]], "Nearest Centroid Classification": [[290, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[291, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[292, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[295, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[296, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[297, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[298, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[298, "models-definition"]], "Training": [[298, "training"], [981, "training"]], "Plotting": [[298, "plotting"], [399, "plotting"], [399, "id7"], [399, "id9"]], "Compare the effect of different scalers on data with outliers": [[301, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[301, "standardscaler"]], "MinMaxScaler": [[301, "minmaxscaler"]], "MaxAbsScaler": [[301, "maxabsscaler"]], "RobustScaler": [[301, "robustscaler"]], "PowerTransformer": [[301, "powertransformer"]], "QuantileTransformer (uniform output)": [[301, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[301, "quantiletransformer-gaussian-output"]], "Normalizer": [[301, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[302, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[303, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[304, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[305, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[306, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[306, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[306, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[306, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[307, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[307, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[307, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[307, "native-categorical-feature-support"]], "Plotting the Results": [[307, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross fitting": [[308, "target-encoder-s-internal-cross-fitting"]], "Create Synthetic Dataset": [[308, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[308, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[311, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[311, "new-plotting-api"]], "Stacking Classifier and Regressor": [[311, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[311, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[311, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[311, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[311, "knn-based-imputation"]], "Tree pruning": [[311, "tree-pruning"]], "Retrieve dataframes from OpenML": [[311, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[311, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[311, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[312, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[312, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[312, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[312, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[312, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[312, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[313, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[313, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[313, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[313, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[313, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[313, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[313, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[313, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[313, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[313, "new-documentation-improvements"], [314, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[314, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[314, "keyword-and-positional-arguments"]], "Spline Transformers": [[314, "spline-transformers"]], "Quantile Regressor": [[314, "quantile-regressor"]], "Feature Names Support": [[314, "feature-names-support"]], "A more flexible plotting API": [[314, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[314, "online-one-class-svm"], [992, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[314, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[315, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[315, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[315, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[315, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[315, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[315, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[315, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[316, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[316, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[316, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[316, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[316, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[316, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[316, "improved-efficiency-of-many-estimators"]], "Release Highlights for scikit-learn 1.3": [[317, "release-highlights-for-scikit-learn-1-3"]], "HDBSCAN: hierarchical density-based clustering": [[317, "hdbscan-hierarchical-density-based-clustering"]], "TargetEncoder: a new category encoding strategy": [[317, "targetencoder-a-new-category-encoding-strategy"]], "Missing values support in decision trees": [[317, "missing-values-support-in-decision-trees"]], "New display model_selection.ValidationCurveDisplay": [[317, "new-display-model-selection-validationcurvedisplay"]], "Gamma loss for gradient boosting": [[317, "gamma-loss-for-gradient-boosting"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[317, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "Label Propagation digits: Demonstrating performance": [[320, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[320, "semi-supervised-learning"], [991, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[320, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[321, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[322, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[323, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[324, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[325, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[328, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[329, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[330, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[331, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[332, "rbf-svm-parameters"]], "Load and prepare data set": [[332, "load-and-prepare-data-set"]], "Train classifiers": [[332, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[333, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[334, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[335, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[335, "load-some-data-to-play-with"]], "Create the pipeline": [[335, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[335, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "SVM-Kernels": [[336, "svm-kernels"]], "SVM Margins Example": [[337, "svm-margins-example"]], "Non-linear SVM": [[338, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[339, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[340, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[340, "l1-penalty-case"]], "L2-penalty case": [[340, "l2-penalty-case"]], "SVM Tie Breaking Example": [[341, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[342, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[345, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[345, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[345, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[345, "model-without-metadata-stripping"]], "Model with metadata stripping": [[345, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[345, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[345, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[346, "clustering-text-documents-using-k-means"]], "Loading text data": [[346, "loading-text-data"]], "Quantifying the quality of clustering results": [[346, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[346, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[346, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[346, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[346, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[346, "top-terms-per-cluster"]], "HashingVectorizer": [[346, "hashingvectorizer"]], "Clustering evaluation summary": [[346, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[347, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[347, "load-data"]], "Define preprocessing functions": [[347, "define-preprocessing-functions"]], "DictVectorizer": [[347, "dictvectorizer"]], "FeatureHasher": [[347, "featurehasher"]], "Comparison with special purpose text vectorizers": [[347, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[347, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[350, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[350, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[350, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[351, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[352, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[353, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[354, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[354, "train-tree-classifier"]], "Tree structure": [[354, "tree-structure"]], "Decision path": [[354, "decision-path"]], "Common pitfalls and recommended practices": [[356, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[356, "inconsistent-preprocessing"]], "Data leakage": [[356, "data-leakage"]], "Data leakage during pre-processing": [[356, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[356, "how-to-avoid-data-leakage"]], "Controlling randomness": [[356, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[356, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "CV splitters": [[356, "cv-splitters"], [356, "id3"]], "Common pitfalls and subtleties": [[356, "common-pitfalls-and-subtleties"]], "General recommendations": [[356, "general-recommendations"]], "Getting reproducible results across multiple executions": [[356, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[356, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[359, "computing-with-scikit-learn"]], "Computational Performance": [[360, "computational-performance"]], "Bulk versus Atomic mode": [[360, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[360, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[360, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[360, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[360, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[360, "feature-extraction-latency"]], "Prediction Throughput": [[360, "prediction-throughput"]], "Tips and Tricks": [[360, "tips-and-tricks"]], "Linear algebra libraries": [[360, "linear-algebra-libraries"]], "Limiting Working Memory": [[360, "limiting-working-memory"]], "Model Compression": [[360, "model-compression"]], "Model Reshaping": [[360, "model-reshaping"]], "Links": [[360, "links"]], "Parallelism, resource management, and configuration": [[361, "parallelism-resource-management-and-configuration"]], "Parallelism": [[361, "parallelism"], [967, "parallelism"]], "Higher-level parallelism with joblib": [[361, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[361, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[361, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[361, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[361, "configuration-switches"]], "Python API": [[361, "python-api"]], "Environment variables": [[361, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[361, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[361, "sklearn-working-memory"]], "SKLEARN_SEED": [[361, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[361, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[361, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[361, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[361, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[361, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[361, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[362, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[362, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[362, "streaming-instances"]], "Extracting features": [[362, "extracting-features"]], "Incremental learning": [[362, "incremental-learning"]], "Notes": [[362, "notes"], [401, "notes"], [974, "notes"]], "Table Of Contents": [[363, "table-of-contents"]], "Dataset transformations": [[366, "dataset-transformations"]], "Dataset loading utilities": [[367, "dataset-loading-utilities"], [379, "dataset-loading-utilities"]], "Loading other datasets": [[368, "loading-other-datasets"]], "Sample images": [[368, "sample-images"]], "Examples:": [[368, null], [389, null], [397, null], [397, null], [398, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [401, null], [401, null], [401, null], [401, null], [401, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [403, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [406, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [409, null], [409, null], [409, null], [409, null], [967, null], [967, null], [967, null], [970, null], [970, null], [972, null], [972, null], [972, null], [973, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [974, null], [975, null], [977, null], [977, null], [977, null], [977, null], [978, null], [978, null], [978, null], [978, null], [978, null], [979, null], [981, null], [981, null], [981, null], [981, null], [981, null], [982, null], [982, null], [983, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [985, null], [986, null], [988, null], [988, null], [988, null], [992, null], [992, null], [993, null], [993, null], [993, null], [993, null], [993, null], [993, null], [994, null], [994, null], [994, null], [994, null], [1017, null]], "Datasets in svmlight / libsvm format": [[368, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[368, null]], "Downloading datasets from the openml.org repository": [[368, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[368, "dataset-versions"]], "ARFF parser": [[368, "arff-parser"]], "Loading from external datasets": [[368, "loading-from-external-datasets"], [1004, null]], "Real world datasets": [[369, "real-world-datasets"]], "The Olivetti faces dataset": [[369, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[369, "the-20-newsgroups-text-dataset"]], "Usage": [[369, "usage"], [369, "id2"], [398, "usage"], [401, "usage"], [401, "id1"], [407, "usage"], [407, "id26"], [407, "id27"], [407, "id29"], [407, "id37"], [974, "usage"]], "Converting text to vectors": [[369, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[369, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[369, null]], "Recommendation": [[369, null]], "The Labeled Faces in the Wild face recognition dataset": [[369, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[369, "forest-covertypes"]], "RCV1 dataset": [[369, "rcv1-dataset"]], "Kddcup 99 dataset": [[369, "kddcup-99-dataset"]], "California Housing dataset": [[369, "california-housing-dataset"]], "Generated datasets": [[370, "generated-datasets"]], "Generators for classification and clustering": [[370, "generators-for-classification-and-clustering"]], "Single label": [[370, "single-label"]], "Multilabel": [[370, "multilabel"]], "Generators for regression": [[370, "generators-for-regression"]], "Generators for manifold learning": [[370, "generators-for-manifold-learning"]], "Generators for decomposition": [[370, "generators-for-decomposition"]], "Toy datasets": [[371, "toy-datasets"]], "Iris plants dataset": [[371, "iris-plants-dataset"]], "Diabetes dataset": [[371, "diabetes-dataset"], [1011, null]], "Optical recognition of handwritten digits dataset": [[371, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[371, "linnerrud-dataset"]], "Wine recognition dataset": [[371, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[371, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[372, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[372, "installing-nightly-builds"]], "Building from source": [[372, "building-from-source"]], "Dependencies": [[372, "dependencies"]], "Runtime dependencies": [[372, "runtime-dependencies"]], "Build dependencies": [[372, "build-dependencies"]], "Test dependencies": [[372, "test-dependencies"]], "Building a specific version from a tag": [[372, "building-a-specific-version-from-a-tag"]], "Editable mode": [[372, "editable-mode"]], "Platform-specific instructions": [[372, "platform-specific-instructions"]], "Windows": [[372, "windows"]], "macOS": [[372, "macos"]], "macOS compilers from conda-forge": [[372, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[372, "macos-compilers-from-homebrew"]], "Linux": [[372, "linux"]], "Linux compilers from the system": [[372, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[372, "linux-compilers-from-conda-forge"]], "FreeBSD": [[372, "freebsd"]], "Alternative compilers": [[372, "alternative-compilers"]], "Parallel builds": [[372, "parallel-builds"]], "Bug triaging and issue curation": [[373, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[373, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[373, null]], "Working on PRs to help review": [[373, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[373, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[373, null]], "A typical workflow for triaging issues": [[373, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[374, "contributing"], [385, "contributing"]], "Our community, our values": [[374, null]], "Ways to contribute": [[374, "ways-to-contribute"]], "Contributing to related projects": [[374, null]], "Submitting a bug report or a feature request": [[374, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[374, "how-to-make-a-good-bug-report"]], "Contributing code": [[374, "contributing-code"]], "Video resources": [[374, "video-resources"]], "How to contribute": [[374, "how-to-contribute"]], "Learning git:": [[374, null]], "Pull request checklist": [[374, "pull-request-checklist"]], "Continuous Integration (CI)": [[374, "continuous-integration-ci"]], "Stalled pull requests": [[374, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[374, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[374, "issues-for-new-contributors"]], "good first issue tag": [[374, null]], "Easy tag": [[374, null]], "help wanted tag": [[374, null]], "Documentation": [[374, "documentation"], [1020, "documentation"]], "Building the documentation": [[374, "building-the-documentation"]], "Generated documentation on GitHub Actions": [[374, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[374, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[374, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[374, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[374, "monitoring-performance"]], "Issue Tracker Tags": [[374, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[374, "maintaining-backwards-compatibility"]], "Deprecation": [[374, "deprecation"]], "Change the default value of a parameter": [[374, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[374, "code-review-guidelines"]], "Communication Guidelines": [[374, "communication-guidelines"]], "Reading the existing code base": [[374, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[375, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[375, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[375, "tips-to-ease-development"]], "Tips for performance": [[375, "tips-for-performance"]], "Using OpenMP": [[375, "using-openmp"]], "Developing scikit-learn estimators": [[376, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[376, "apis-of-scikit-learn-objects"]], "Different objects": [[376, "different-objects"]], "Instantiation": [[376, "instantiation"]], "Fitting": [[376, "fitting"]], "Estimated Attributes": [[376, "estimated-attributes"]], "Optional Arguments": [[376, "optional-arguments"]], "Universal attributes": [[376, "universal-attributes"]], "Rolling your own estimator": [[376, "rolling-your-own-estimator"]], "Project template:": [[376, null]], "BaseEstimator and mixins:": [[376, null]], "get_params and set_params": [[376, "get-params-and-set-params"]], "Parameters and init": [[376, "parameters-and-init"]], "Cloning": [[376, "cloning"]], "Pipeline compatibility": [[376, "pipeline-compatibility"]], "Estimator types": [[376, "estimator-types"]], "Specific models": [[376, "specific-models"]], "Estimator Tags": [[376, "estimator-tags"]], "Developer API for set_output": [[376, "developer-api-for-set-output"]], "Coding guidelines": [[376, "coding-guidelines"]], "Input validation": [[376, "input-validation"]], "Random Numbers": [[376, "random-numbers"]], "Numerical assertions in tests": [[376, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[377, "developer-s-guide"]], "Maintainer / core-developer information": [[378, "maintainer-core-developer-information"]], "Releasing": [[378, "releasing"]], "Before a release": [[378, "before-a-release"]], "Preparing a release PR": [[378, "preparing-a-release-pr"]], "Major version release": [[378, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[378, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[378, "making-a-release"]], "Release checklist": [[378, "release-checklist"]], "Merging Pull Requests": [[378, "merging-pull-requests"]], "The scikit-learn.org web site": [[378, "the-scikit-learn-org-web-site"]], "Experimental features": [[378, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[379, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[379, "good-practices"]], "Provide a failing code example with minimal comments": [[379, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[379, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[379, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[379, "use-markdown-formatting"]], "Synthetic dataset": [[379, "synthetic-dataset"]], "NumPy": [[379, "numpy"]], "Pandas": [[379, "pandas"]], "make_regression": [[379, "make-regression"]], "make_classification": [[379, "make-classification"]], "make_blobs": [[379, "make-blobs"]], "How to optimize for speed": [[380, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[380, "python-cython-or-c-c"]], "Profiling Python code": [[380, "profiling-python-code"]], "Memory usage profiling": [[380, "memory-usage-profiling"]], "Using Cython": [[380, "using-cython"]], "Profiling compiled extensions": [[380, "profiling-compiled-extensions"]], "Using yep and gperftools": [[380, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[380, "using-a-debugger-gdb"]], "Using gprof": [[380, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[380, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[380, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[380, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[380, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[381, "developing-with-the-plotting-api"]], "Plotting API Overview": [[381, "plotting-api-overview"]], "Plotting with Multiple Axes": [[381, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[382, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[382, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[382, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[382, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[382, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[382, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[382, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[382, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[382, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[383, "utilities-for-developers"]], "Validation Tools": [[383, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[383, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[383, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[383, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[383, "graph-routines"]], "Testing Functions": [[383, "testing-functions"]], "Multiclass and multilabel utility function": [[383, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[383, "helper-functions"]], "Hash Functions": [[383, "hash-functions"]], "Warnings and Exceptions": [[383, "warnings-and-exceptions"]], "Dispatching": [[384, "dispatching"]], "Frequently Asked Questions": [[385, "frequently-asked-questions"]], "Table of Contents": [[385, "table-of-contents"]], "About the project": [[385, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[385, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[385, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[385, "why-scikit"]], "Do you support PyPy?": [[385, "do-you-support-pypy"]], "Implementation decisions": [[385, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[385, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[385, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[385, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[385, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[385, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[385, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[385, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[385, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[385, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[385, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[385, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[385, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[385, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[385, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[385, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[385, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[385, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[385, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[385, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[385, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[385, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[386, "getting-started"]], "Fitting and predicting: estimator basics": [[386, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[386, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[386, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[386, "model-evaluation"]], "Automatic parameter searches": [[386, "automatic-parameter-searches"]], "Next steps": [[386, "next-steps"]], "Glossary of Common Terms and API Elements": [[387, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[387, "general-concepts"]], "Class APIs and Estimator Types": [[387, "class-apis-and-estimator-types"]], "Target Types": [[387, "target-types"]], "Methods": [[387, "methods"]], "Parameters": [[387, "parameters"], [407, "parameters"]], "Attributes": [[387, "attributes"]], "Data and sample properties": [[387, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[388, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[388, "roles-and-responsibilities"]], "Contributors": [[388, "contributors"]], "Core Contributors": [[388, "core-contributors"]], "Communication team": [[388, "communication-team"]], "Maintainers": [[388, "maintainers"]], "Technical Committee": [[388, "technical-committee"]], "Decision Making Process": [[388, "decision-making-process"]], "Governance Model Changes": [[388, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[388, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[390, "installing-scikit-learn"]], "Installing the latest release": [[390, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[390, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[390, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[390, "alpine-linux"]], "Arch Linux": [[390, "arch-linux"]], "Debian/Ubuntu": [[390, "debian-ubuntu"]], "Fedora": [[390, "fedora"]], "NetBSD": [[390, "netbsd"]], "MacPorts for Mac OSX": [[390, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[390, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[390, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[390, "winpython-for-windows"]], "Troubleshooting": [[390, "troubleshooting"]], "Error caused by file path length limit on Windows": [[390, "error-caused-by-file-path-length-limit-on-windows"]], "Usage Examples": [[391, "usage-examples"]], "Weighted scoring and fitting": [[391, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[391, "weighted-scoring-and-unweighted-fitting"]], "Unweighted feature selection": [[391, "unweighted-feature-selection"]], "Advanced: Different scoring and fitting weights": [[391, "advanced-different-scoring-and-fitting-weights"]], "API Interface": [[391, "api-interface"]], "Model persistence": [[394, "model-persistence"]], "Python specific serialization": [[394, "python-specific-serialization"]], "Security & maintainability limitations": [[394, "security-maintainability-limitations"]], "A more secure format: skops": [[394, "a-more-secure-format-skops"]], "Interoperable formats": [[394, "interoperable-formats"]], "Model selection and evaluation": [[395, "model-selection-and-evaluation"]], "Array API support (experimental)": [[396, "array-api-support-experimental"]], "Example usage": [[396, "example-usage"]], "PyTorch Support": [[396, "pytorch-support"]], "Estimators with support for Array API-compatible inputs": [[396, "estimators-with-support-for-array-api-compatible-inputs"]], "Common estimator checks": [[396, "common-estimator-checks"]], "Spectral Co-Clustering": [[397, "spectral-co-clustering"]], "Mathematical formulation": [[397, "mathematical-formulation"], [397, "id3"], [400, "mathematical-formulation"], [400, "id16"], [400, "id23"], [400, "id33"], [400, "id37"], [407, "mathematical-formulation"], [974, "mathematical-formulation"], [981, "mathematical-formulation"], [982, "mathematical-formulation"], [992, "mathematical-formulation"], [993, "mathematical-formulation"], [994, "mathematical-formulation"]], "Spectral Biclustering": [[397, "spectral-biclustering"]], "Biclustering evaluation": [[397, "biclustering-evaluation"]], "Probability calibration": [[398, "probability-calibration"]], "Calibrating a classifier": [[398, "calibrating-a-classifier"]], "Sigmoid": [[398, "sigmoid"]], "Isotonic": [[398, "isotonic"]], "Multiclass support": [[398, "multiclass-support"]], "API Reference": [[399, "api-reference"]], "sklearn.base: Base classes and utility functions": [[399, "module-sklearn.base"]], "Base classes": [[399, "base-classes"]], "Functions": [[399, "functions"], [399, "id1"]], "sklearn.calibration: Probability Calibration": [[399, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[399, "module-sklearn.cluster"]], "Classes": [[399, "classes"]], "sklearn.compose: Composite Estimators": [[399, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[399, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[399, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[399, "module-sklearn.datasets"]], "Loaders": [[399, "loaders"]], "Samples generator": [[399, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[399, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[399, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[399, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[399, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[399, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[399, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[399, "module-sklearn.feature_extraction"]], "From images": [[399, "module-sklearn.feature_extraction.image"]], "From text": [[399, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[399, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[399, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[399, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[399, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[399, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[399, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[399, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[399, "module-sklearn.linear_model"]], "Linear classifiers": [[399, "linear-classifiers"]], "Classical linear regressors": [[399, "classical-linear-regressors"]], "Regressors with variable selection": [[399, "regressors-with-variable-selection"]], "Bayesian regressors": [[399, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[399, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[399, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[399, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[399, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[399, "sklearn-metrics-metrics"]], "Model Selection Interface": [[399, "model-selection-interface"]], "Classification metrics": [[399, "classification-metrics"], [978, "classification-metrics"]], "Regression metrics": [[399, "regression-metrics"], [978, "regression-metrics"]], "Multilabel ranking metrics": [[399, "multilabel-ranking-metrics"], [978, "multilabel-ranking-metrics"]], "Clustering metrics": [[399, "clustering-metrics"], [978, "clustering-metrics"]], "Biclustering metrics": [[399, "biclustering-metrics"]], "Distance metrics": [[399, "distance-metrics"]], "Pairwise metrics": [[399, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[399, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[399, "module-sklearn.model_selection"]], "Splitter Classes": [[399, "splitter-classes"]], "Splitter Functions": [[399, "splitter-functions"]], "Hyper-parameter optimizers": [[399, "hyper-parameter-optimizers"]], "Model validation": [[399, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[399, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[399, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[399, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[399, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[399, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[399, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[399, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[399, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[399, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[399, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[399, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[399, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[399, "module-sklearn.utils"]], "Recently deprecated": [[399, "recently-deprecated"]], "Input data": [[400, null]], "Overview of clustering methods": [[400, "overview-of-clustering-methods"]], "K-means": [[400, "k-means"]], "Low-level parallelism": [[400, "low-level-parallelism"], [407, "low-level-parallelism"]], "Mini Batch K-Means": [[400, "mini-batch-k-means"]], "Affinity Propagation": [[400, "affinity-propagation"]], "Mean Shift": [[400, "mean-shift"]], "Spectral clustering": [[400, "spectral-clustering"]], "Different label assignment strategies": [[400, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[400, "spectral-clustering-graphs"]], "Hierarchical clustering": [[400, "hierarchical-clustering"]], "FeatureAgglomeration": [[400, null]], "Different linkage type: Ward, complete, average, and single linkage": [[400, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[400, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[400, "adding-connectivity-constraints"]], "Varying the metric": [[400, "varying-the-metric"]], "Bisecting K-Means": [[400, "bisecting-k-means"]], "DBSCAN": [[400, "dbscan"]], "Implementation": [[400, null], [981, "implementation"]], "Memory consumption for large sample sizes": [[400, null]], "HDBSCAN": [[400, "hdbscan"]], "Mutual Reachability Graph": [[400, "mutual-reachability-graph"]], "Hierarchical Clustering": [[400, "id11"]], "OPTICS": [[400, "optics"]], "Comparison with DBSCAN": [[400, null]], "Computational Complexity": [[400, null]], "BIRCH": [[400, "birch"]], "Clustering performance evaluation": [[400, "clustering-performance-evaluation"]], "Rand index": [[400, "rand-index"]], "Advantages": [[400, "advantages"], [400, "id14"], [400, "id21"], [400, "id25"], [400, "id28"], [400, "id31"], [400, "id35"], [400, "id39"]], "Drawbacks": [[400, "drawbacks"], [400, "id15"], [400, "id22"], [400, "id26"], [400, "id29"], [400, "id32"], [400, "id36"], [400, "id40"]], "Mutual Information based scores": [[400, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[400, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[400, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[400, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[400, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[400, "davies-bouldin-index"]], "Contingency Matrix": [[400, "contingency-matrix"]], "Pair Confusion Matrix": [[400, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[401, "pipeline-chaining-estimators"]], "Construction": [[401, "construction"]], "Accessing steps": [[401, "accessing-steps"]], "Nested parameters": [[401, "nested-parameters"]], "Caching transformers: avoid repeated computation": [[401, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[401, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[401, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[401, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[401, "visualizing-composite-estimators"]], "Empirical covariance": [[402, "empirical-covariance"]], "Shrunk Covariance": [[402, "shrunk-covariance"]], "Basic shrinkage": [[402, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[402, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[402, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[402, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[402, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[402, "minimum-covariance-determinant"]], "PLSCanonical": [[403, "plscanonical"]], "Transforming data": [[403, "transforming-data"]], "Predicting the targets Y": [[403, "predicting-the-targets-y"]], "PLSSVD": [[403, "plssvd"]], "PLSRegression": [[403, "plsregression"]], "Canonical Correlation Analysis": [[403, "canonical-correlation-analysis"]], "Reference:": [[403, null]], "Cross-validation: evaluating estimator performance": [[404, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[404, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[404, null]], "The cross_validate function and multiple metric evaluation": [[404, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[404, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[404, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[404, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[404, "k-fold"]], "Repeated K-Fold": [[404, "repeated-k-fold"]], "Leave One Out (LOO)": [[404, "leave-one-out-loo"]], "Leave P Out (LPO)": [[404, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[404, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[404, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[404, "stratified-k-fold"]], "Stratified Shuffle Split": [[404, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[404, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[404, "group-k-fold"]], "StratifiedGroupKFold": [[404, "stratifiedgroupkfold"]], "Leave One Group Out": [[404, "leave-one-group-out"]], "Leave P Groups Out": [[404, "leave-p-groups-out"]], "Group Shuffle Split": [[404, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[404, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[404, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[404, "cross-validation-of-time-series-data"]], "Time Series Split": [[404, "time-series-split"]], "A note on shuffling": [[404, "a-note-on-shuffling"]], "Cross validation and model selection": [[404, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[405, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[405, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[405, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[405, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[405, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[405, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[405, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[405, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[405, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[405, "dictionary-learning"]], "Generic dictionary learning": [[405, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[405, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[405, null]], "Factor Analysis": [[405, "factor-analysis"]], "Independent component analysis (ICA)": [[405, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[405, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[405, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[405, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[405, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[405, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[406, "density-estimation"]], "Density Estimation: Histograms": [[406, "density-estimation-histograms"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[407, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Gradient-boosted trees": [[407, "gradient-boosting"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[407, null]], "Histogram-Based Gradient Boosting": [[407, "histogram-based-gradient-boosting"]], "Missing values support": [[407, "missing-values-support"]], "Sample weight support": [[407, "sample-weight-support"]], "Categorical Features Support": [[407, "categorical-features-support"]], "Interaction constraints": [[407, "interaction-constraints"]], "Why it\u2019s faster": [[407, "why-it-s-faster"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[407, "gradientboostingclassifier-and-gradientboostingregressor"]], "Fitting additional weak-learners": [[407, "fitting-additional-weak-learners"]], "Controlling the tree size": [[407, "controlling-the-tree-size"]], "Loss Functions": [[407, "loss-functions"]], "Shrinkage via learning rate": [[407, "shrinkage-via-learning-rate"]], "Subsampling": [[407, "subsampling"]], "Interpretation with feature importance": [[407, "interpretation-with-feature-importance"]], "Random forests and other randomized tree ensembles": [[407, "random-forests-and-other-randomized-tree-ensembles"]], "Random Forests": [[407, "id18"]], "Extremely Randomized Trees": [[407, "extremely-randomized-trees"]], "Parallelization": [[407, "parallelization"]], "Feature importance evaluation": [[407, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[407, "totally-random-trees-embedding"]], "Bagging meta-estimator": [[407, "bagging-meta-estimator"]], "Voting Classifier": [[407, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[407, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[407, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[407, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[407, "voting-regressor"]], "Stacked generalization": [[407, "stacked-generalization"]], "AdaBoost": [[407, "adaboost"]], "Feature extraction": [[408, "feature-extraction"]], "Loading features from dicts": [[408, "loading-features-from-dicts"]], "Feature hashing": [[408, "feature-hashing"]], "Implementation details": [[408, "implementation-details"], [992, "implementation-details"], [993, "implementation-details"]], "Text feature extraction": [[408, "text-feature-extraction"]], "The Bag of Words representation": [[408, "the-bag-of-words-representation"]], "Sparsity": [[408, "sparsity"], [1011, "sparsity"]], "Common Vectorizer usage": [[408, "common-vectorizer-usage"]], "Using stop words": [[408, "using-stop-words"]], "Tf\u2013idf term weighting": [[408, "tfidf-term-weighting"]], "Decoding text files": [[408, "decoding-text-files"]], "Applications and examples": [[408, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[408, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[408, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[408, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[408, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[408, "image-feature-extraction"]], "Patch extraction": [[408, "patch-extraction"]], "Connectivity graph of an image": [[408, "connectivity-graph-of-an-image"]], "Feature selection": [[409, "feature-selection"]], "Removing features with low variance": [[409, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[409, null]], "Feature selection using SelectFromModel": [[409, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[409, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[409, "compressive-sensing"]], "Tree-based feature selection": [[409, "tree-based-feature-selection"]], "Sequential Feature Selection": [[409, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[409, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[410, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[410, "gaussian-process-regression-gpr"]], "GPR examples": [[410, "gpr-examples"]], "GPR with noise-level estimation": [[410, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[410, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[410, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[410, "gaussian-process-classification-gpc"]], "GPC examples": [[410, "gpc-examples"]], "Probabilistic predictions with GPC": [[410, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[410, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[410, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[410, "gaussian-process-kernel-api"]], "Basic kernels": [[410, "basic-kernels"]], "Kernel operators": [[410, "kernel-operators"]], "Radial basis function (RBF) kernel": [[410, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[410, "rational-quadratic-kernel"]], "Dot-Product kernel": [[410, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[411, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[412, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[413, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[414, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[414, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[415, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[416, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[417, "sklearn-base-classifiermixin"]], "Examples using sklearn.base.ClassifierMixin": [[417, "examples-using-sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[418, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[419, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[420, "sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[420, "examples-using-sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[421, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[422, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[423, "sklearn-base-regressormixin"]], "Examples using sklearn.base.RegressorMixin": [[423, "examples-using-sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[424, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[424, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[425, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[426, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[427, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[428, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[428, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[429, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[429, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[430, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[431, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[431, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[432, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[432, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[433, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[433, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[434, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[434, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[435, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[435, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[436, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[436, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[437, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[437, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[438, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[438, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[439, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[439, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[440, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[440, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[441, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[441, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[442, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[442, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[443, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[443, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[444, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[444, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[445, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[445, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[446, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[446, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[447, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[448, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[449, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[449, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[450, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[451, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[451, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[452, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[453, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[453, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[454, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[455, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[455, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[456, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[456, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[457, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[457, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[458, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[458, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[459, "sklearn-config-context"]], "Examples using sklearn.config_context": [[459, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[460, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[460, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[461, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[461, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[462, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[463, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[463, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[464, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[464, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[465, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[465, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[466, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[466, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[467, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[467, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[468, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[468, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[469, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[470, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[470, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[471, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[472, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[473, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[473, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[474, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[474, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[475, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[475, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[476, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[477, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[478, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[478, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[479, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[479, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[480, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[480, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[481, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[481, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[482, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[482, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[483, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[483, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[484, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[485, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[485, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[486, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[486, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[487, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[487, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[488, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[489, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[489, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[490, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[490, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[491, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[491, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[492, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[492, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[493, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[493, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[494, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[495, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[495, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[496, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[497, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[497, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[498, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[499, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[500, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[501, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[501, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[502, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[502, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[503, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[503, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[504, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[504, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[505, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[505, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[506, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[506, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[507, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[508, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[509, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[510, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[510, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[511, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[511, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[512, "sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[512, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[513, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[513, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[514, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[514, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[515, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[515, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[516, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[516, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[517, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[517, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[518, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[518, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[519, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[520, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[521, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[521, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[522, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[523, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[523, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[524, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[524, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[525, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[525, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[526, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[526, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[527, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[527, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[528, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[528, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[529, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[529, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[530, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[530, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[531, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[531, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[532, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[532, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[533, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[533, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[534, "sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.SparsePCA": [[534, "examples-using-sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[535, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[535, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[536, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[537, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[538, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[539, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[540, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[540, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[541, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[541, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[542, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[542, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[543, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[543, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[544, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[544, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[545, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[545, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[546, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[547, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[547, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[548, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[548, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[549, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[549, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[550, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[550, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[551, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[551, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[552, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[552, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[553, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[553, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[554, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[554, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[555, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[555, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[556, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[556, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[557, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[557, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[558, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[558, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[559, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[559, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[560, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[560, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[561, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[561, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[562, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[562, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[563, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[564, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[565, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[566, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[567, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[568, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[569, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[570, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[571, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[572, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[572, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[573, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[573, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[574, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[575, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[575, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[576, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[577, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[578, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[578, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[579, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[579, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[580, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[580, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[581, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[581, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[582, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[582, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[583, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[584, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[584, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[585, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[585, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[586, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[587, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[588, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[588, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[589, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[590, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[590, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[591, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[591, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[592, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[593, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[593, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[594, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[595, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[595, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[596, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[596, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[597, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[597, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[598, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[598, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[599, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[599, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[600, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[601, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[601, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[602, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[602, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[603, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[604, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[604, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[605, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[605, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[606, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[606, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[607, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[608, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[608, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[609, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[609, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[610, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[610, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[611, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[612, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[613, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[613, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[614, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[614, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[615, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[616, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[616, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[617, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[618, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[618, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[619, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[619, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[620, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[621, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[621, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[622, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[622, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[622, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[623, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[623, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[623, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[624, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[624, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[625, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[625, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[626, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[626, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[627, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[628, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[629, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[630, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[630, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[631, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[631, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[632, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[632, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[633, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[634, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[634, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[635, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[635, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[636, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[636, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[637, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[637, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[638, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[638, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[639, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[639, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[640, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[640, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[641, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[642, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[643, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[643, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[644, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[644, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[645, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[646, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[646, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[647, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[647, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[648, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[648, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[649, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[649, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[650, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[650, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[651, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[652, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[653, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[653, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[654, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[655, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[655, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[656, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[656, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[657, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[657, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[658, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[659, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[659, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[660, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[660, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[661, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[661, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[662, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[662, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[663, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[663, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[664, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[664, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[665, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[665, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[666, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[667, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[667, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[668, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[668, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[669, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[669, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[670, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[670, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[671, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[671, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[672, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[672, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[673, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[673, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[674, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[675, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[675, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[676, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[677, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[678, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[679, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[679, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[680, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[680, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[681, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[681, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[682, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[682, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[683, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[683, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[684, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[684, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[685, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[686, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[687, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[688, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[688, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[688, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[688, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[689, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[689, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[690, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[691, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[691, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[691, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[691, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[692, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[692, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[692, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[692, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[693, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[693, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[693, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[693, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[694, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[694, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[695, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[695, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[696, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[696, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[697, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[697, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[698, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[698, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[699, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[700, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[700, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[701, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[702, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[703, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[703, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[704, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[704, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[705, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[706, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[707, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[708, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[708, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[709, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[709, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[710, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[710, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[711, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[712, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[713, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[714, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[715, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[716, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[717, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[717, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[718, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[719, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[719, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[720, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[721, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[722, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[723, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[724, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[724, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[725, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[726, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[727, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[727, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[728, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[728, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[729, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[730, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[731, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[731, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[732, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[732, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[733, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[734, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[735, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[735, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[736, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[737, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[738, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[738, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[739, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[739, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[740, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[740, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[741, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[742, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[742, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[743, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[743, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[744, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[745, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[745, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[746, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[747, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[747, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[748, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[749, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[750, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[751, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[752, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[753, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[754, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[755, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[756, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[757, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[758, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[759, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[760, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[761, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[762, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[763, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[764, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[765, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[766, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[767, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[768, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[768, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[769, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[769, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[770, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[771, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[772, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[772, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[773, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[774, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[774, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[775, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[775, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[776, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[776, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[777, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[777, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[778, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[778, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[779, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[779, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.silhouette_samples": [[780, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[780, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[781, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[781, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[782, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[783, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[783, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[784, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[784, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[785, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[785, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[786, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[786, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[787, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[787, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[788, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[788, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[789, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[789, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[790, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[790, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[791, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[791, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[792, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[792, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[793, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[793, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[793, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[794, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[795, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[796, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[797, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[798, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[799, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[800, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[801, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[801, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[802, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[802, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[803, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[803, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[804, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[804, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[805, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[805, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[806, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[806, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[807, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[807, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[808, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[808, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.ValidationCurveDisplay": [[809, "sklearn-model-selection-validationcurvedisplay"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[809, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "sklearn.model_selection.check_cv": [[810, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[811, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[811, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[812, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[812, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[813, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[813, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[814, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[814, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[815, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[815, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[816, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[816, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[817, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[817, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[818, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[819, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[819, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[820, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[821, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[821, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[822, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[823, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[823, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[824, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[825, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[825, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[826, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[827, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[827, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[828, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[828, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[829, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[829, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[830, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[831, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[832, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[832, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[833, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[833, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[834, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[834, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[835, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[835, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[836, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[836, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[837, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[837, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[838, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[838, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[839, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[839, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[840, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[841, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[842, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[843, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[843, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[844, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[845, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[846, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[846, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[847, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[847, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[848, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[848, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[849, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[849, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[850, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[850, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[851, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[851, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[852, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[853, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[854, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[854, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[855, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[855, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[856, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[857, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[857, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[858, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[859, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[859, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[860, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[860, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[861, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[862, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[862, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[863, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[863, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[864, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[864, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[865, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[865, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[866, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[866, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[867, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[867, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[868, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[868, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[869, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[869, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[870, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[870, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[871, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[871, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[872, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[873, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[874, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[874, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[875, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[876, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[876, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[877, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[878, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[879, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[879, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[880, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[881, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[882, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[883, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[883, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[884, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[884, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[885, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[886, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[886, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[887, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[887, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[888, "sklearn-set-config"]], "Examples using sklearn.set_config": [[888, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[889, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[890, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[890, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[891, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[892, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[892, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[893, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[893, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[894, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[894, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[895, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[895, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[896, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[896, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[897, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[897, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[898, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[898, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[899, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[899, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[900, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[901, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[902, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[903, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[904, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[904, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[905, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[905, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[906, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[907, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[908, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[909, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[910, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[911, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[912, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[913, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[913, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[914, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[915, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[916, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[917, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[918, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[919, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[920, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[921, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[922, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[922, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[923, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[924, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[924, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[925, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[926, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[927, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[928, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[929, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[930, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[931, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[931, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[932, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[933, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[934, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[935, "sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[935, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[936, "sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[936, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[937, "sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[937, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[938, "sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[938, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[939, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[939, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[940, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[941, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[942, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[943, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[944, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[945, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[946, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[947, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[948, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[949, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[950, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[951, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[952, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[952, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[953, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[954, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[955, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[956, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[957, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[958, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[959, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[960, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[961, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[962, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[962, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[963, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[964, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[965, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[966, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[967, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[967, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[967, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[967, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[967, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[967, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[967, "choosing-a-resource"]], "Exhausting the available resources": [[967, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[967, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[967, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[967, "tips-for-parameter-search"]], "Specifying an objective metric": [[967, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[967, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[967, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[967, "model-selection-development-and-evaluation"]], "Robustness to failure": [[967, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[967, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[967, "model-specific-cross-validation"]], "Information Criterion": [[967, "information-criterion"]], "Out of Bag Estimates": [[967, "out-of-bag-estimates"]], "Imputation of missing values": [[968, "imputation-of-missing-values"], [988, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[968, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[968, "univariate-feature-imputation"]], "Multivariate feature imputation": [[968, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[968, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[968, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[968, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[968, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[968, "marking-imputed-values"]], "Estimators that handle NaN values": [[968, "estimators-that-handle-nan-values"]], "Isotonic regression": [[969, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[970, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[970, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[970, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[970, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[970, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[970, "mathematical-details"]], "Kernel ridge regression": [[971, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[972, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[972, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[972, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[972, "qda"]], "LDA": [[972, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[972, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[972, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[972, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[973, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[973, "validation-curve"]], "Learning curve": [[973, "learning-curve"]], "Linear Models": [[974, "linear-models"]], "Ordinary Least Squares": [[974, "ordinary-least-squares"]], "Non-Negative Least Squares": [[974, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[974, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[974, "ridge-regression-and-classification"]], "Ridge Complexity": [[974, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[974, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[974, "setting-regularization-parameter"]], "Using cross-validation": [[974, "using-cross-validation"]], "Information-criteria based model selection": [[974, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[974, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[974, "multi-task-lasso"]], "Elastic-Net": [[974, "elastic-net"]], "Multi-task Elastic-Net": [[974, "multi-task-elastic-net"]], "Least Angle Regression": [[974, "least-angle-regression"]], "LARS Lasso": [[974, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[974, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[974, "bayesian-regression"]], "Bayesian Ridge Regression": [[974, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[974, "automatic-relevance-determination-ard"]], "Logistic regression": [[974, "logistic-regression"]], "Binary Case": [[974, "binary-case"]], "Multinomial Case": [[974, "multinomial-case"]], "Solvers": [[974, "solvers"]], "Differences from liblinear:": [[974, "liblinear-differences"]], "Practical considerations": [[974, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[974, "stochastic-gradient-descent-sgd"]], "Perceptron": [[974, "perceptron"]], "Passive Aggressive Algorithms": [[974, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[974, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[974, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[974, null]], "RANSAC: RANdom SAmple Consensus": [[974, "ransac-random-sample-consensus"]], "Details of the algorithm": [[974, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[974, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[974, "theoretical-considerations"]], "Huber Regression": [[974, "huber-regression"]], "Quantile Regression": [[974, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[974, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[975, "introduction"]], "Isomap": [[975, "isomap"]], "Complexity": [[975, "complexity"], [975, "id3"], [975, "id4"], [975, "id5"], [975, "id7"], [975, "id8"], [981, "complexity"], [982, "complexity"], [992, "complexity"], [993, "complexity"], [994, "complexity"]], "Locally Linear Embedding": [[975, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[975, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[975, "hessian-eigenmapping"]], "Spectral Embedding": [[975, "spectral-embedding"]], "Local Tangent Space Alignment": [[975, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[975, "multi-dimensional-scaling-mds"]], "Metric MDS": [[975, "metric-mds"]], "Nonmetric MDS": [[975, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[975, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[975, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[975, "barnes-hut-t-sne"]], "Tips on practical use": [[975, "tips-on-practical-use"], [994, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[976, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[976, "cosine-similarity"]], "Linear kernel": [[976, "linear-kernel"], [1011, "linear-kernel"]], "Polynomial kernel": [[976, "polynomial-kernel"], [1011, "polynomial-kernel"]], "Sigmoid kernel": [[976, "sigmoid-kernel"]], "RBF kernel": [[976, "rbf-kernel"]], "Laplacian kernel": [[976, "laplacian-kernel"]], "Chi-squared kernel": [[976, "chi-squared-kernel"]], "Gaussian mixture models": [[977, "gaussian-mixture-models"]], "Gaussian Mixture": [[977, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[977, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[977, "pros"], [977, "id2"]], "Cons": [[977, "cons"], [977, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[977, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[977, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[977, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[977, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[977, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[977, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[977, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[978, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[978, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[978, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[978, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[978, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[978, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[978, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[978, "accuracy-score"]], "Example:": [[978, null], [978, null], [978, null], [978, null], [978, null], [978, null], [978, null], [978, null], [990, null], [1011, null]], "Top-k accuracy score": [[978, "top-k-accuracy-score"]], "Balanced accuracy score": [[978, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[978, "cohen-s-kappa"]], "Classification report": [[978, "classification-report"]], "Hamming loss": [[978, "hamming-loss"]], "Precision, recall and F-measures": [[978, "precision-recall-and-f-measures"]], "Binary classification": [[978, "binary-classification"]], "Multiclass and multilabel classification": [[978, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[978, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[978, "hinge-loss"]], "Log loss": [[978, "log-loss"]], "Matthews correlation coefficient": [[978, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[978, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[978, "receiver-operating-characteristic-roc"]], "Binary case": [[978, "binary-case"]], "Multi-class case": [[978, "multi-class-case"]], "Multi-label case": [[978, "multi-label-case"]], "Detection error tradeoff (DET)": [[978, "detection-error-tradeoff-det"]], "Zero one loss": [[978, "zero-one-loss"]], "Brier score loss": [[978, "brier-score-loss"]], "Class likelihood ratios": [[978, "class-likelihood-ratios"]], "Coverage error": [[978, "coverage-error"]], "Label ranking average precision": [[978, "label-ranking-average-precision"]], "Ranking loss": [[978, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[978, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[978, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[978, "mean-absolute-error"]], "Mean squared error": [[978, "mean-squared-error"]], "Mean squared logarithmic error": [[978, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[978, "mean-absolute-percentage-error"]], "Median absolute error": [[978, "median-absolute-error"]], "Max error": [[978, "max-error"]], "Explained variance score": [[978, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[978, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[978, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[978, "pinball-loss"]], "D\u00b2 score": [[978, "d2-score"]], "D\u00b2 Tweedie score": [[978, "d2-tweedie-score"]], "D\u00b2 pinball score": [[978, "d2-pinball-score"]], "D\u00b2 absolute error score": [[978, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[978, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[978, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[979, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[979, "multiclass-classification"], [1011, null]], "Target format": [[979, "target-format"], [979, "id5"], [979, "id8"], [979, "id10"]], "OneVsRestClassifier": [[979, "onevsrestclassifier"]], "OneVsOneClassifier": [[979, "onevsoneclassifier"]], "OutputCodeClassifier": [[979, "outputcodeclassifier"]], "MultiOutputClassifier": [[979, "multioutputclassifier"]], "ClassifierChain": [[979, "classifierchain"]], "Multiclass-multioutput classification": [[979, "multiclass-multioutput-classification"]], "Multioutput regression": [[979, "multioutput-regression"]], "MultiOutputRegressor": [[979, "multioutputregressor"]], "RegressorChain": [[979, "regressorchain"]], "Naive Bayes": [[980, "naive-bayes"]], "Multinomial Naive Bayes": [[980, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[980, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[980, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[980, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[980, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[981, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[981, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[981, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[981, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[981, "nearest-neighbor-algorithms"]], "Brute Force": [[981, "brute-force"]], "K-D Tree": [[981, "k-d-tree"]], "Ball Tree": [[981, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[981, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[981, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[981, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[981, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[981, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[981, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[981, "neighborhood-components-analysis"]], "Dimensionality reduction": [[981, "dimensionality-reduction"]], "Mahalanobis distance": [[981, "mahalanobis-distance"]], "Transform": [[981, "transform"]], "Neural network models (supervised)": [[982, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[982, "multi-layer-perceptron"]], "Regularization": [[982, "regularization"]], "Algorithms": [[982, "algorithms"]], "Tips on Practical Use": [[982, "tips-on-practical-use"], [992, "tips-on-practical-use"], [993, "tips-on-practical-use"]], "More control with warm_start": [[982, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[983, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[983, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[983, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[983, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[983, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[984, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[984, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[984, "novelty-detection"]], "Scaling up the One-Class SVM": [[984, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[984, "id1"]], "Fitting an elliptic envelope": [[984, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[984, "isolation-forest"]], "Local Outlier Factor": [[984, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[984, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[985, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[985, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[985, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[985, "mathematical-definition"]], "Computation methods": [[985, "computation-methods"]], "Permutation feature importance": [[986, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[986, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[986, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[986, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[988, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[988, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[988, "scaling-features-to-a-range"]], "Scaling sparse data": [[988, "scaling-sparse-data"]], "Scaling data with outliers": [[988, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[988, null]], "Centering kernel matrices": [[988, "centering-kernel-matrices"]], "Non-linear transformation": [[988, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[988, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[988, "mapping-to-a-gaussian-distribution"]], "Normalization": [[988, "normalization"]], "Sparse input": [[988, null], [988, null]], "Encoding categorical features": [[988, "encoding-categorical-features"]], "Infrequent categories": [[988, "infrequent-categories"]], "Target Encoder": [[988, "target-encoder"]], "Discretization": [[988, "discretization"]], "K-bins discretization": [[988, "k-bins-discretization"]], "Feature binarization": [[988, "feature-binarization"]], "Generating polynomial features": [[988, "generating-polynomial-features"]], "Polynomial features": [[988, "polynomial-features"]], "Spline transformer": [[988, "spline-transformer"]], "Custom transformers": [[988, "custom-transformers"]], "Transforming the prediction target (y)": [[989, "transforming-the-prediction-target-y"]], "Label binarization": [[989, "label-binarization"]], "LabelBinarizer": [[989, "labelbinarizer"]], "MultiLabelBinarizer": [[989, "multilabelbinarizer"]], "Label encoding": [[989, "label-encoding"]], "Random Projection": [[990, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[990, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[990, "gaussian-random-projection"]], "Sparse random projection": [[990, "sparse-random-projection"]], "Inverse Transform": [[990, "inverse-transform"]], "Unlabeled entries in y": [[991, null]], "Self Training": [[991, "self-training"]], "Label Propagation": [[991, "label-propagation"]], "Stochastic Gradient Descent": [[992, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[992, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[992, "stopping-criterion"]], "SGD": [[992, "id5"]], "Multi-class classification": [[993, "multi-class-classification"]], "Scores and probabilities": [[993, "scores-and-probabilities"]], "Unbalanced problems": [[993, "unbalanced-problems"]], "Density estimation, novelty detection": [[993, "density-estimation-novelty-detection"]], "Kernel functions": [[993, "kernel-functions"]], "Parameters of the RBF Kernel": [[993, "parameters-of-the-rbf-kernel"]], "Using Python functions as kernels": [[993, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[993, "using-the-gram-matrix"]], "SVC": [[993, "svc"]], "SVR": [[993, "svr"]], "Multi-output problems": [[994, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[994, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[994, "classification-criteria"]], "Regression criteria": [[994, "regression-criteria"]], "Missing Values Support": [[994, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[994, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[995, "unsupervised-dimensionality-reduction"]], "Pipelining": [[995, null], [1009, "pipelining"]], "PCA: principal component analysis": [[995, "pca-principal-component-analysis"]], "Random projections": [[995, "random-projections"]], "Feature scaling": [[995, null]], "Welcome to scikit-learn": [[996, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[997, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[997, "new-to-scientific-python"]], "External Tutorials": [[997, "external-tutorials"]], "Videos": [[997, "videos"]], "Related Projects": [[998, "related-projects"]], "Interoperability and framework enhancements": [[998, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[998, "other-estimators-and-tasks"]], "Statistical learning with Python": [[998, "statistical-learning-with-python"]], "Recommendation Engine packages": [[998, "recommendation-engine-packages"]], "Domain specific packages": [[998, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[998, "translations-of-scikit-learn-documentation"]], "Roadmap": [[999, "id1"]], "Purpose of this document": [[999, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[999, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[999, "architectural-general-goals"]], "Subpackage-specific goals": [[999, "subpackage-specific-goals"]], "Supervised learning": [[1000, "supervised-learning"]], "Support": [[1001, "support"]], "Mailing List": [[1001, "mailing-list"]], "User questions": [[1001, "user-questions"]], "Bug tracker": [[1001, "bug-tracker"]], "Gitter": [[1001, "gitter"]], "Documentation resources": [[1001, "documentation-resources"]], "Who is using scikit-learn?": [[1002, "who-is-using-scikit-learn"]], "J.P.Morgan": [[1002, "id1"]], "Spotify": [[1002, "id2"]], "Inria": [[1002, "id3"]], "betaworks": [[1002, "id4"]], "Hugging Face": [[1002, "id5"]], "Evernote": [[1002, "id6"]], "T\u00e9l\u00e9com ParisTech": [[1002, "id7"]], "Booking.com": [[1002, "id8"]], "AWeber": [[1002, "id9"]], "Yhat": [[1002, "id10"]], "Rangespan": [[1002, "id11"]], "Birchbox": [[1002, "id12"]], "Bestofmedia Group": [[1002, "id13"]], "Change.org": [[1002, "id14"]], "PHIMECA Engineering": [[1002, "id15"]], "HowAboutWe": [[1002, "id16"]], "PeerIndex": [[1002, "id17"]], "DataRobot": [[1002, "id18"]], "OkCupid": [[1002, "id19"]], "Lovely": [[1002, "id20"]], "Data Publica": [[1002, "id21"]], "Machinalis": [[1002, "id22"]], "solido": [[1002, "id23"]], "INFONEA": [[1002, "id24"]], "Dataiku": [[1002, "id25"]], "Otto Group": [[1002, "id26"]], "Zopa": [[1002, "id27"]], "MARS": [[1002, "id28"]], "BNP Paribas Cardif": [[1002, "id29"]], "An introduction to machine learning with scikit-learn": [[1004, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[1004, null]], "Machine learning: the problem setting": [[1004, "machine-learning-the-problem-setting"]], "Training set and testing set": [[1004, null], [1011, null]], "Loading an example dataset": [[1004, "loading-an-example-dataset"]], "Shape of the data arrays": [[1004, null]], "Learning and predicting": [[1004, "learning-and-predicting"]], "Choosing the parameters of the model": [[1004, null]], "Conventions": [[1004, "conventions"]], "Type casting": [[1004, "type-casting"]], "Refitting and updating parameters": [[1004, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[1004, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[1005, "scikit-learn-tutorials"]], "Choosing the right estimator": [[1006, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[1007, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[1007, null]], "Model selection: choosing estimators and their parameters": [[1008, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[1008, "score-and-cross-validated-scores"]], "Cross-validation generators": [[1008, "cross-validation-generators"]], "Exercise": [[1008, null], [1008, null], [1011, null], [1011, null]], "Grid-search and cross-validated estimators": [[1008, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[1008, "grid-search"]], "Nested cross-validation": [[1008, null]], "Cross-validated estimators": [[1008, "cross-validated-estimators"]], "Putting it all together": [[1009, "putting-it-all-together"]], "Face recognition with eigenfaces": [[1009, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[1009, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1010, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[1010, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[1010, null]], "An example of reshaping data would be the digits dataset": [[1010, null]], "Estimators objects": [[1010, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1011, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[1011, null]], "Vocabulary: classification and regression": [[1011, null]], "Nearest neighbor and the curse of dimensionality": [[1011, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[1011, null]], "k-Nearest neighbors classifier": [[1011, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[1011, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[1011, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[1011, "linear-regression"]], "Shrinkage": [[1011, "shrinkage"]], "Different algorithms for the same problem": [[1011, null]], "Shrinkage and sparsity with logistic regression": [[1011, null]], "Support vector machines (SVMs)": [[1011, "support-vector-machines-svms"]], "Linear SVMs": [[1011, "linear-svms"]], "Using kernels": [[1011, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[1011, "rbf-kernel-radial-basis-function"]], "Interactive example": [[1011, null]], "Unsupervised learning: seeking representations of the data": [[1012, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[1012, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[1012, null]], "K-means clustering": [[1012, "k-means-clustering"]], "Application example: vector quantization": [[1012, null]], "Hierarchical agglomerative clustering: Ward": [[1012, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[1012, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[1012, null]], "Decompositions: from a signal to components and loadings": [[1012, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[1012, null]], "Principal component analysis: PCA": [[1012, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[1012, "independent-component-analysis-ica"]], "Working With Text Data": [[1013, "working-with-text-data"]], "Tutorial setup": [[1013, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[1013, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[1013, "extracting-features-from-text-files"]], "Bags of words": [[1013, "bags-of-words"]], "Tokenizing text with scikit-learn": [[1013, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[1013, "from-occurrences-to-frequencies"]], "Training a classifier": [[1013, "training-a-classifier"]], "Building a pipeline": [[1013, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[1013, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[1013, "parameter-tuning-using-grid-search"]], "Exercises": [[1013, "exercises"]], "Exercise 1: Language identification": [[1013, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1013, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1013, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[1013, "where-to-from-here"]], "Unsupervised learning": [[1014, "unsupervised-learning"]], "User Guide": [[1015, "user-guide"]], "Under Development": [[1015, "under-development"]], "Available documentation for Scikit-learn": [[1016, "available-documentation-for-scikit-learn"]], "Visualizations": [[1017, "visualizations"]], "Available Plotting Utilities": [[1017, "available-plotting-utilities"]], "Display Objects": [[1017, "display-objects"]], "Release History": [[1018, "release-history"]], "Version 0.12.1": [[1020, "version-0-12-1"]], "Changelog": [[1020, "changelog"], [1020, "id1"], [1020, "id3"], [1020, "id6"], [1020, "id9"], [1020, "id12"], [1020, "id14"], [1020, "id16"], [1020, "id18"], [1020, "id19"], [1021, "changelog"], [1021, "id1"], [1022, "changelog"], [1023, "changelog"], [1024, "changelog"], [1024, "id1"], [1025, "changelog"], [1025, "id1"], [1026, "changelog"], [1026, "id1"], [1026, "id2"], [1027, "changelog"], [1027, "id1"], [1028, "changelog"], [1028, "id1"], [1028, "id5"], [1028, "id10"], [1028, "id23"], [1029, "changelog"], [1029, "id1"], [1029, "id2"], [1029, "id7"], [1030, "changelog"], [1030, "id1"], [1030, "id4"], [1031, "changelog"], [1031, "id1"], [1031, "id4"], [1032, "changelog"], [1032, "id1"], [1032, "id4"], [1033, "changelog"], [1033, "id1"], [1033, "id7"], [1034, "changelog"], [1034, "id1"], [1034, "id7"], [1035, "changelog"], [1035, "id1"], [1035, "id9"], [1036, "changelog"], [1036, "id1"], [1037, "changelog"]], "People": [[1020, "people"], [1020, "id2"], [1020, "id5"], [1020, "id8"], [1020, "id11"], [1020, "id13"], [1020, "id15"], [1020, "id17"], [1021, "people"], [1021, "id2"], [1022, "people"], [1023, "people"]], "Version 0.12": [[1020, "version-0-12"]], "API changes summary": [[1020, "api-changes-summary"], [1020, "id4"], [1020, "id7"], [1020, "id10"], [1021, "api-changes-summary"], [1022, "api-changes-summary"], [1023, "api-changes-summary"], [1024, "api-changes-summary"], [1025, "api-changes-summary"], [1026, "api-changes-summary"], [1026, "id5"], [1027, "api-changes-summary"]], "Version 0.11": [[1020, "version-0-11"]], "Highlights": [[1020, "highlights"], [1023, "highlights"], [1024, "highlights"], [1027, "highlights"], [1028, "highlights"]], "Other changes": [[1020, "other-changes"]], "Version 0.10": [[1020, "version-0-10"]], "Version 0.9": [[1020, "version-0-9"]], "Version 0.8": [[1020, "version-0-8"]], "Version 0.7": [[1020, "version-0-7"]], "Version 0.6": [[1020, "version-0-6"]], "Version 0.5": [[1020, "version-0-5"]], "New classes": [[1020, "new-classes"]], "Fixes": [[1020, "fixes"]], "External dependencies": [[1020, "external-dependencies"]], "Removed modules": [[1020, "removed-modules"]], "Misc": [[1020, "misc"]], "Version 0.4": [[1020, "version-0-4"]], "Earlier versions": [[1020, "earlier-versions"]], "Version 0.13.1": [[1021, "version-0-13-1"]], "Version 0.13": [[1021, "version-0-13"]], "New Estimator Classes": [[1021, "new-estimator-classes"]], "Version 0.14": [[1022, "version-0-14"]], "Version 0.15.2": [[1023, "version-0-15-2"]], "Bug fixes": [[1023, "bug-fixes"], [1023, "id1"], [1023, "id2"], [1024, "bug-fixes"], [1024, "id2"], [1025, "bug-fixes"], [1025, "id2"], [1026, "bug-fixes"], [1026, "id4"], [1027, "bug-fixes"], [1027, "id3"]], "Version 0.15.1": [[1023, "version-0-15-1"]], "Version 0.15": [[1023, "version-0-15"]], "New features": [[1023, "new-features"], [1024, "new-features"], [1025, "new-features"], [1026, "new-features"], [1027, "new-features"]], "Enhancements": [[1023, "enhancements"], [1024, "enhancements"], [1025, "enhancements"], [1026, "enhancements"], [1026, "id3"], [1027, "enhancements"], [1027, "id2"]], "Documentation improvements": [[1023, "documentation-improvements"], [1024, "documentation-improvements"]], "Version 0.16.1": [[1024, "version-0-16-1"]], "Version 0.16": [[1024, "version-0-16"]], "Code Contributors": [[1024, "code-contributors"], [1025, "code-contributors"], [1026, "code-contributors"], [1026, "id6"]], "Version 0.17.1": [[1025, "version-0-17-1"]], "Version 0.17": [[1025, "version-0-17"]], "Version 0.18.2": [[1026, "version-0-18-2"]], "Last release with Python 2.6 support": [[1026, null], [1026, null]], "Version 0.18.1": [[1026, "version-0-18-1"]], "Version 0.18": [[1026, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1026, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1027, "version-0-19-2"]], "Related changes": [[1027, "related-changes"]], "Version 0.19.1": [[1027, "version-0-19-1"]], "API changes": [[1027, "api-changes"]], "Code and Documentation Contributors": [[1027, "code-and-documentation-contributors"], [1027, "id9"], [1028, "code-and-documentation-contributors"], [1028, "id8"], [1028, "id21"], [1028, "id41"], [1029, "code-and-documentation-contributors"], [1030, "code-and-documentation-contributors"], [1031, "code-and-documentation-contributors"], [1032, "code-and-documentation-contributors"], [1033, "code-and-documentation-contributors"], [1034, "code-and-documentation-contributors"], [1035, "code-and-documentation-contributors"], [1036, "code-and-documentation-contributors"], [1037, "code-and-documentation-contributors"]], "Version 0.19": [[1027, "version-0-19"]], "Changed models": [[1027, "changed-models"], [1028, "changed-models"], [1028, "id9"], [1028, "id22"], [1029, "changed-models"], [1029, "id6"], [1030, "changed-models"], [1031, "changed-models"], [1031, "id3"], [1032, "changed-models"], [1033, "changed-models"], [1034, "changed-models"], [1034, "id6"], [1035, "changed-models"], [1035, "id7"], [1036, "changed-models"], [1037, "changed-models"]], "Version 0.20.4": [[1028, "version-0-20-4"]], "sklearn.cluster": [[1028, "sklearn-cluster"], [1028, "id2"], [1028, "id11"], [1028, "id24"], [1029, "sklearn-cluster"], [1029, "id8"], [1030, "sklearn-cluster"], [1030, "id5"], [1031, "sklearn-cluster"], [1031, "id2"], [1031, "id5"], [1032, "sklearn-cluster"], [1033, "sklearn-cluster"], [1033, "id2"], [1033, "id9"], [1034, "sklearn-cluster"], [1034, "id8"], [1035, "sklearn-cluster"], [1035, "id12"], [1036, "sklearn-cluster"]], "sklearn.compose": [[1028, "sklearn-compose"], [1028, "id3"], [1028, "id6"], [1028, "id12"], [1028, "id25"], [1029, "sklearn-compose"], [1029, "id9"], [1030, "sklearn-compose"], [1031, "sklearn-compose"], [1032, "sklearn-compose"], [1032, "id5"], [1033, "sklearn-compose"], [1034, "sklearn-compose"], [1035, "sklearn-compose"], [1036, "sklearn-compose"]], "sklearn.decomposition": [[1028, "sklearn-decomposition"], [1028, "id4"], [1028, "id14"], [1028, "id28"], [1029, "sklearn-decomposition"], [1029, "id11"], [1030, "sklearn-decomposition"], [1031, "sklearn-decomposition"], [1031, "id6"], [1032, "sklearn-decomposition"], [1032, "id7"], [1033, "sklearn-decomposition"], [1033, "id11"], [1034, "sklearn-decomposition"], [1034, "id10"], [1035, "sklearn-decomposition"], [1035, "id14"], [1036, "sklearn-decomposition"], [1037, "sklearn-decomposition"]], "sklearn.model_selection": [[1028, "sklearn-model-selection"], [1028, "id35"], [1029, "sklearn-model-selection"], [1030, "sklearn-model-selection"], [1030, "id9"], [1030, "id13"], [1031, "sklearn-model-selection"], [1032, "sklearn-model-selection"], [1032, "id13"], [1033, "sklearn-model-selection"], [1034, "sklearn-model-selection"], [1035, "sklearn-model-selection"], [1035, "id20"], [1036, "sklearn-model-selection"]], "sklearn.neighbors": [[1028, "sklearn-neighbors"], [1028, "id7"], [1028, "id18"], [1028, "id36"], [1029, "sklearn-neighbors"], [1029, "id5"], [1029, "id17"], [1030, "sklearn-neighbors"], [1030, "id11"], [1032, "sklearn-neighbors"], [1033, "sklearn-neighbors"], [1033, "id5"], [1033, "id18"], [1034, "sklearn-neighbors"], [1035, "sklearn-neighbors"], [1036, "sklearn-neighbors"], [1036, "id2"]], "Version 0.20.3": [[1028, "version-0-20-3"]], "sklearn.covariance": [[1028, "sklearn-covariance"], [1028, "id26"], [1032, "sklearn-covariance"], [1033, "sklearn-covariance"], [1034, "sklearn-covariance"], [1036, "sklearn-covariance"]], "sklearn.datasets": [[1028, "sklearn-datasets"], [1028, "id13"], [1028, "id27"], [1029, "sklearn-datasets"], [1029, "id10"], [1030, "sklearn-datasets"], [1031, "sklearn-datasets"], [1032, "sklearn-datasets"], [1033, "sklearn-datasets"], [1033, "id10"], [1034, "sklearn-datasets"], [1034, "id9"], [1035, "sklearn-datasets"], [1035, "id13"], [1036, "sklearn-datasets"]], "sklearn.feature_extraction": [[1028, "sklearn-feature-extraction"], [1028, "id15"], [1028, "id30"], [1029, "sklearn-feature-extraction"], [1030, "sklearn-feature-extraction"], [1031, "sklearn-feature-extraction"], [1031, "id8"], [1032, "sklearn-feature-extraction"], [1032, "id9"], [1033, "sklearn-feature-extraction"], [1033, "id13"], [1034, "sklearn-feature-extraction"], [1035, "sklearn-feature-extraction"], [1036, "sklearn-feature-extraction"]], "sklearn.impute": [[1028, "sklearn-impute"], [1028, "id31"], [1029, "sklearn-impute"], [1029, "id13"], [1030, "sklearn-impute"], [1030, "id6"], [1031, "sklearn-impute"], [1032, "sklearn-impute"], [1033, "sklearn-impute"], [1034, "sklearn-impute"], [1034, "id12"], [1035, "sklearn-impute"], [1036, "sklearn-impute"]], "sklearn.linear_model": [[1028, "sklearn-linear-model"], [1028, "id16"], [1028, "id32"], [1029, "sklearn-linear-model"], [1029, "id15"], [1030, "sklearn-linear-model"], [1031, "sklearn-linear-model"], [1031, "id9"], [1032, "sklearn-linear-model"], [1032, "id11"], [1033, "sklearn-linear-model"], [1033, "id4"], [1033, "id15"], [1034, "sklearn-linear-model"], [1034, "id13"], [1035, "sklearn-linear-model"], [1035, "id18"], [1036, "sklearn-linear-model"]], "sklearn.preprocessing": [[1028, "sklearn-preprocessing"], [1028, "id19"], [1028, "id37"], [1029, "sklearn-preprocessing"], [1029, "id18"], [1030, "sklearn-preprocessing"], [1030, "id12"], [1031, "sklearn-preprocessing"], [1032, "sklearn-preprocessing"], [1032, "id15"], [1033, "sklearn-preprocessing"], [1033, "id20"], [1034, "sklearn-preprocessing"], [1034, "id4"], [1034, "id16"], [1035, "sklearn-preprocessing"], [1035, "id4"], [1035, "id22"], [1036, "sklearn-preprocessing"]], "sklearn.svm": [[1028, "sklearn-svm"], [1028, "id38"], [1029, "sklearn-svm"], [1030, "sklearn-svm"], [1031, "sklearn-svm"], [1032, "sklearn-svm"], [1033, "sklearn-svm"], [1033, "id21"], [1034, "sklearn-svm"], [1035, "sklearn-svm"], [1036, "sklearn-svm"]], "Version 0.20.2": [[1028, "version-0-20-2"]], "sklearn.metrics": [[1028, "sklearn-metrics"], [1028, "id17"], [1028, "id33"], [1029, "sklearn-metrics"], [1029, "id4"], [1029, "id16"], [1030, "sklearn-metrics"], [1030, "id2"], [1030, "id8"], [1031, "sklearn-metrics"], [1031, "id10"], [1032, "sklearn-metrics"], [1032, "id2"], [1032, "id12"], [1033, "sklearn-metrics"], [1033, "id17"], [1034, "sklearn-metrics"], [1034, "id3"], [1034, "id15"], [1035, "sklearn-metrics"], [1036, "sklearn-metrics"]], "sklearn.utils": [[1028, "sklearn-utils"], [1028, "id20"], [1028, "id39"], [1029, "sklearn-utils"], [1030, "sklearn-utils"], [1030, "id14"], [1031, "sklearn-utils"], [1031, "id12"], [1032, "sklearn-utils"], [1032, "id18"], [1033, "sklearn-utils"], [1033, "id6"], [1033, "id23"], [1034, "sklearn-utils"], [1034, "id18"], [1035, "sklearn-utils"], [1035, "id6"], [1035, "id24"], [1036, "sklearn-utils"]], "Version 0.20.1": [[1028, "version-0-20-1"]], "sklearn.ensemble": [[1028, "sklearn-ensemble"], [1028, "id29"], [1029, "sklearn-ensemble"], [1029, "id12"], [1030, "sklearn-ensemble"], [1031, "sklearn-ensemble"], [1031, "id7"], [1032, "sklearn-ensemble"], [1032, "id8"], [1033, "sklearn-ensemble"], [1033, "id3"], [1033, "id12"], [1034, "sklearn-ensemble"], [1035, "sklearn-ensemble"], [1035, "id3"], [1035, "id15"], [1036, "sklearn-ensemble"], [1037, "sklearn-ensemble"]], "sklearn.mixture": [[1028, "sklearn-mixture"], [1028, "id34"], [1029, "sklearn-mixture"], [1033, "sklearn-mixture"], [1034, "sklearn-mixture"]], "Version 0.20.0": [[1028, "version-0-20-0"]], "Known Major Bugs": [[1028, "known-major-bugs"], [1029, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1028, "sklearn-discriminant-analysis"], [1029, "sklearn-discriminant-analysis"], [1032, "sklearn-discriminant-analysis"], [1034, "sklearn-discriminant-analysis"], [1035, "sklearn-discriminant-analysis"], [1036, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1028, "sklearn-dummy"], [1029, "sklearn-dummy"], [1030, "sklearn-dummy"], [1033, "sklearn-dummy"], [1034, "sklearn-dummy"]], "sklearn.feature_selection": [[1028, "sklearn-feature-selection"], [1030, "sklearn-feature-selection"], [1031, "sklearn-feature-selection"], [1032, "sklearn-feature-selection"], [1033, "sklearn-feature-selection"], [1033, "id14"], [1034, "sklearn-feature-selection"], [1034, "id2"], [1034, "id11"], [1035, "sklearn-feature-selection"], [1035, "id16"], [1036, "sklearn-feature-selection"], [1037, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1028, "sklearn-gaussian-process"], [1030, "sklearn-gaussian-process"], [1031, "sklearn-gaussian-process"], [1032, "sklearn-gaussian-process"], [1032, "id10"], [1033, "sklearn-gaussian-process"], [1034, "sklearn-gaussian-process"], [1035, "sklearn-gaussian-process"], [1036, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1028, "sklearn-isotonic"], [1029, "sklearn-isotonic"], [1030, "sklearn-isotonic"], [1032, "sklearn-isotonic"], [1034, "sklearn-isotonic"], [1035, "sklearn-isotonic"]], "sklearn.manifold": [[1028, "sklearn-manifold"], [1029, "sklearn-manifold"], [1030, "sklearn-manifold"], [1031, "sklearn-manifold"], [1032, "sklearn-manifold"], [1033, "sklearn-manifold"], [1033, "id16"], [1034, "sklearn-manifold"], [1034, "id14"], [1035, "sklearn-manifold"], [1035, "id19"], [1036, "sklearn-manifold"]], "sklearn.multioutput": [[1028, "sklearn-multioutput"], [1029, "sklearn-multioutput"], [1030, "sklearn-multioutput"], [1031, "sklearn-multioutput"], [1032, "sklearn-multioutput"], [1032, "id14"], [1035, "sklearn-multioutput"], [1036, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1028, "sklearn-naive-bayes"], [1030, "sklearn-naive-bayes"], [1030, "id10"], [1031, "sklearn-naive-bayes"], [1032, "sklearn-naive-bayes"], [1033, "sklearn-naive-bayes"], [1035, "sklearn-naive-bayes"], [1036, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1028, "sklearn-neural-network"], [1029, "sklearn-neural-network"], [1030, "sklearn-neural-network"], [1031, "sklearn-neural-network"], [1032, "sklearn-neural-network"], [1033, "sklearn-neural-network"], [1034, "sklearn-neural-network"], [1035, "sklearn-neural-network"], [1035, "id21"], [1036, "sklearn-neural-network"]], "sklearn.pipeline": [[1028, "sklearn-pipeline"], [1029, "sklearn-pipeline"], [1030, "sklearn-pipeline"], [1031, "sklearn-pipeline"], [1032, "sklearn-pipeline"], [1033, "sklearn-pipeline"], [1033, "id19"], [1034, "sklearn-pipeline"], [1035, "sklearn-pipeline"], [1036, "sklearn-pipeline"]], "sklearn.tree": [[1028, "sklearn-tree"], [1029, "sklearn-tree"], [1029, "id19"], [1030, "sklearn-tree"], [1031, "sklearn-tree"], [1032, "sklearn-tree"], [1032, "id17"], [1033, "sklearn-tree"], [1033, "id22"], [1034, "sklearn-tree"], [1034, "id5"], [1034, "id17"], [1035, "sklearn-tree"], [1035, "id5"], [1035, "id23"], [1036, "sklearn-tree"], [1037, "sklearn-tree"]], "Multiple modules": [[1028, "multiple-modules"], [1029, "multiple-modules"]], "Changes to estimator checks": [[1028, "changes-to-estimator-checks"], [1029, "changes-to-estimator-checks"], [1030, "changes-to-estimator-checks"]], "Version 0.21.3": [[1029, "version-0-21-3"]], "Legend for changelogs": [[1029, "legend-for-changelogs"], [1030, "legend-for-changelogs"], [1031, "legend-for-changelogs"], [1032, "legend-for-changelogs"], [1033, "legend-for-changelogs"], [1034, "legend-for-changelogs"], [1035, "legend-for-changelogs"], [1036, "legend-for-changelogs"], [1037, "legend-for-changelogs"]], "sklearn.inspection": [[1029, "sklearn-inspection"], [1029, "id3"], [1029, "id14"], [1030, "sklearn-inspection"], [1030, "id7"], [1031, "sklearn-inspection"], [1031, "id11"], [1032, "sklearn-inspection"], [1033, "sklearn-inspection"], [1034, "sklearn-inspection"], [1035, "sklearn-inspection"], [1035, "id17"], [1036, "sklearn-inspection"]], "Version 0.21.2": [[1029, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1029, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1029, "version-0-21-1"]], "Version 0.21.0": [[1029, "version-0-21-0"]], "sklearn.base": [[1029, "sklearn-base"], [1030, "sklearn-base"], [1032, "sklearn-base"], [1033, "sklearn-base"], [1034, "sklearn-base"], [1035, "sklearn-base"], [1035, "id2"], [1035, "id10"], [1036, "sklearn-base"], [1037, "sklearn-base"]], "sklearn.calibration": [[1029, "sklearn-calibration"], [1030, "sklearn-calibration"], [1032, "sklearn-calibration"], [1033, "sklearn-calibration"], [1033, "id8"], [1034, "sklearn-calibration"], [1035, "sklearn-calibration"], [1035, "id11"], [1036, "sklearn-calibration"]], "sklearn.externals": [[1029, "sklearn-externals"]], "sklearn.multiclass": [[1029, "sklearn-multiclass"], [1032, "sklearn-multiclass"], [1033, "sklearn-multiclass"], [1034, "sklearn-multiclass"]], "Version 0.22.2.post1": [[1030, "version-0-22-2-post1"]], "Version 0.22.1": [[1030, "version-0-22-1"]], "sklearn.semi_supervised": [[1030, "sklearn-semi-supervised"], [1031, "sklearn-semi-supervised"], [1032, "sklearn-semi-supervised"], [1032, "id3"], [1032, "id16"], [1036, "sklearn-semi-supervised"]], "Version 0.22.0": [[1030, "version-0-22-0"]], "Website update": [[1030, "website-update"]], "Clear definition of the public API": [[1030, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1030, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1030, "sklearn-cross-decomposition"], [1032, "sklearn-cross-decomposition"], [1032, "id6"], [1034, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1030, "sklearn-kernel-approximation"], [1032, "sklearn-kernel-approximation"], [1033, "sklearn-kernel-approximation"], [1034, "sklearn-kernel-approximation"], [1035, "sklearn-kernel-approximation"], [1036, "sklearn-kernel-approximation"]], "Version 0.23.2": [[1031, "version-0-23-2"]], "Version 0.23.1": [[1031, "version-0-23-1"]], "Version 0.23.0": [[1031, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1031, "enforcing-keyword-only-arguments"], [1033, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[1032, "version-0-24-2"]], "Version 0.24.1": [[1032, "version-0-24-1"]], "Packaging": [[1032, "packaging"]], "Version 0.24.0": [[1032, "version-0-24-0"]], "sklearn.exceptions": [[1032, "sklearn-exceptions"], [1036, "sklearn-exceptions"]], "Version 1.0.2": [[1033, "version-1-0-2"]], "Version 1.0.1": [[1033, "version-1-0-1"]], "Fixed models": [[1033, "fixed-models"]], "Version 1.0.0": [[1033, "version-1-0-0"]], "Minimal dependencies": [[1033, "minimal-dependencies"], [1034, "minimal-dependencies"]], "Version 1.1.3": [[1034, "version-1-1-3"]], "Version 1.1.2": [[1034, "version-1-1-2"]], "Version 1.1.1": [[1034, "version-1-1-1"]], "Version 1.1.0": [[1034, "version-1-1-0"]], "sklearn.random_projection": [[1034, "sklearn-random-projection"]], "Version 1.2.2": [[1035, "version-1-2-2"]], "Version 1.2.1": [[1035, "version-1-2-1"]], "Changes impacting all modules": [[1035, "changes-impacting-all-modules"], [1035, "id8"], [1036, "changes-impacting-all-modules"], [1037, "changes-impacting-all-modules"]], "Version 1.2.0": [[1035, "version-1-2-0"]], "Version 1.3.1": [[1036, "version-1-3-1"]], "Version 1.3.0": [[1036, "version-1-3-0"]], "Changed displays": [[1036, "changed-displays"]], "Experimental / Under Development": [[1036, "experimental-under-development"]], "sklearn": [[1036, "sklearn"]], "Version 1.4.0": [[1037, "version-1-4-0"]]}, "indexentries": {"1d": [[387, "term-1d"]], "1d array": [[387, "term-1d-array"]], "2d": [[387, "term-2d"]], "2d array": [[387, "term-2d-array"]], "api": [[387, "term-API"]], "cv splitter": [[387, "term-CV-splitter"]], "slep": [[387, "term-SLEP"]], "sleps": [[387, "term-SLEPs"]], "x": [[387, "term-X"]], "xt": [[387, "term-Xt"]], "y": [[387, "term-Y"], [387, "term-y"]], "_estimator_type": [[387, "term-_estimator_type"]], "array-like": [[387, "term-array-like"]], "attribute": [[387, "term-attribute"]], "attributes": [[387, "term-attributes"]], "backwards compatibility": [[387, "term-backwards-compatibility"]], "binary": [[387, "term-binary"]], "callable": [[387, "term-callable"]], "categorical feature": [[387, "term-categorical-feature"]], "class_weight": [[387, "term-class_weight"]], "classes_": [[387, "term-classes_"]], "classifier": [[387, "term-classifier"]], "classifiers": [[387, "term-classifiers"]], "clone": [[387, "term-clone"]], "cloned": [[387, "term-cloned"]], "clusterer": [[387, "term-clusterer"]], "clusterers": [[387, "term-clusterers"]], "coef_": [[387, "term-coef_"]], "common tests": [[387, "term-common-tests"]], "components_": [[387, "term-components_"]], "consumer": [[387, "term-consumer"]], "continuous": [[387, "term-continuous"]], "continuous multi-output": [[387, "term-continuous-multi-output"]], "continuous multioutput": [[387, "term-continuous-multioutput"]], "cross-validation estimator": [[387, "term-cross-validation-estimator"]], "cross-validation generator": [[387, "term-cross-validation-generator"]], "cross-validation splitter": [[387, "term-cross-validation-splitter"]], "cv": [[387, "term-cv"]], "data leakage": [[387, "term-data-leakage"]], "data type": [[387, "term-data-type"]], "decision_function": [[387, "term-decision_function"]], "density estimator": [[387, "term-density-estimator"]], "deprecation": [[387, "term-deprecation"]], "dimensionality": [[387, "term-dimensionality"]], "docstring": [[387, "term-docstring"]], "double underscore": [[387, "term-double-underscore"]], "double underscore notation": [[387, "term-double-underscore-notation"]], "dtype": [[387, "term-dtype"]], "duck typing": [[387, "term-duck-typing"]], "early stopping": [[387, "term-early-stopping"]], "embedding_": [[387, "term-embedding_"]], "estimator": [[387, "term-estimator"]], "estimator instance": [[387, "term-estimator-instance"]], "estimator tags": [[387, "term-estimator-tags"]], "estimators": [[387, "term-estimators"]], "evaluation metric": [[387, "term-evaluation-metric"]], "evaluation metrics": [[387, "term-evaluation-metrics"]], "examples": [[387, "term-examples"]], "experimental": [[387, "term-experimental"]], "feature": [[387, "term-feature"]], "feature extractor": [[387, "term-feature-extractor"]], "feature extractors": [[387, "term-feature-extractors"]], "feature vector": [[387, "term-feature-vector"]], "feature_importances_": [[387, "term-feature_importances_"]], "features": [[387, "term-features"]], "fit": [[387, "term-fit"]], "fit_predict": [[387, "term-fit_predict"]], "fit_transform": [[387, "term-fit_transform"]], "fitted": [[387, "term-fitted"]], "fitting": [[387, "term-fitting"]], "function": [[387, "term-function"]], "gallery": [[387, "term-gallery"]], "get_feature_names_out": [[387, "term-get_feature_names_out"]], "get_n_splits": [[387, "term-get_n_splits"]], "get_params": [[387, "term-get_params"]], "groups": [[387, "term-groups"]], "hyper-parameter": [[387, "term-hyper-parameter"]], "hyperparameter": [[387, "term-hyperparameter"]], "imputation": [[387, "term-imputation"]], "impute": [[387, "term-impute"]], "indexable": [[387, "term-indexable"]], "induction": [[387, "term-induction"]], "inductive": [[387, "term-inductive"]], "joblib": [[387, "term-joblib"]], "kernel": [[387, "term-kernel"]], "label indicator matrix": [[387, "term-label-indicator-matrix"]], "labels_": [[387, "term-labels_"]], "leakage": [[387, "term-leakage"]], "max_iter": [[387, "term-max_iter"]], "memmapping": [[387, "term-memmapping"]], "memory": [[387, "term-memory"]], "memory map": [[387, "term-memory-map"]], "memory mapping": [[387, "term-memory-mapping"]], "meta-estimator": [[387, "term-meta-estimator"]], "meta-estimators": [[387, "term-meta-estimators"]], "metadata": [[387, "term-metadata"]], "metaestimator": [[387, "term-metaestimator"]], "metaestimators": [[387, "term-metaestimators"]], "metric": [[387, "term-metric"]], "missing values": [[387, "term-missing-values"]], "multi-class": [[387, "term-multi-class"]], "multi-class multi-output": [[387, "term-multi-class-multi-output"]], "multi-label": [[387, "term-multi-label"]], "multi-output": [[387, "term-multi-output"]], "multi-output continuous": [[387, "term-multi-output-continuous"]], "multi-output multi-class": [[387, "term-multi-output-multi-class"]], "multiclass": [[387, "term-multiclass"]], "multiclass multioutput": [[387, "term-multiclass-multioutput"]], "multilabel": [[387, "term-multilabel"]], "multilabel indicator matrices": [[387, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[387, "term-multilabel-indicator-matrix"]], "multioutput": [[387, "term-multioutput"]], "multioutput continuous": [[387, "term-multioutput-continuous"]], "multioutput multiclass": [[387, "term-multioutput-multiclass"]], "n_components": [[387, "term-n_components"]], "n_features": [[387, "term-n_features"]], "n_iter_": [[387, "term-n_iter_"]], "n_iter_no_change": [[387, "term-n_iter_no_change"]], "n_jobs": [[387, "term-n_jobs"]], "n_outputs": [[387, "term-n_outputs"]], "n_samples": [[387, "term-n_samples"]], "n_targets": [[387, "term-n_targets"]], "narrative docs": [[387, "term-narrative-docs"]], "narrative documentation": [[387, "term-narrative-documentation"]], "np": [[387, "term-np"]], "online learning": [[387, "term-online-learning"]], "out-of-core": [[387, "term-out-of-core"]], "outlier detector": [[387, "term-outlier-detector"]], "outlier detectors": [[387, "term-outlier-detectors"]], "outputs": [[387, "term-outputs"]], "pair": [[387, "term-pair"]], "pairwise metric": [[387, "term-pairwise-metric"]], "pairwise metrics": [[387, "term-pairwise-metrics"]], "param": [[387, "term-param"]], "parameter": [[387, "term-parameter"]], "parameters": [[387, "term-parameters"]], "params": [[387, "term-params"]], "partial_fit": [[387, "term-partial_fit"]], "pd": [[387, "term-pd"]], "pos_label": [[387, "term-pos_label"]], "precomputed": [[387, "term-precomputed"]], "predict": [[387, "term-predict"]], "predict_log_proba": [[387, "term-predict_log_proba"]], "predict_proba": [[387, "term-predict_proba"]], "predictor": [[387, "term-predictor"]], "predictors": [[387, "term-predictors"]], "random_state": [[387, "term-random_state"]], "rectangular": [[387, "term-rectangular"]], "regressor": [[387, "term-regressor"]], "regressors": [[387, "term-regressors"]], "router": [[387, "term-router"]], "sample": [[387, "term-sample"]], "sample properties": [[387, "term-sample-properties"]], "sample property": [[387, "term-sample-property"]], "sample_weight": [[387, "term-sample_weight"]], "samples": [[387, "term-samples"]], "scikit-learn enhancement proposals": [[387, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[387, "term-scikit-learn-contrib"]], "score": [[387, "term-score"]], "score_samples": [[387, "term-score_samples"]], "scorer": [[387, "term-scorer"]], "scoring": [[387, "term-scoring"]], "semi-supervised": [[387, "term-semi-supervised"]], "semi-supervised learning": [[387, "term-semi-supervised-learning"]], "semisupervised": [[387, "term-semisupervised"]], "set_params": [[387, "term-set_params"]], "sparse graph": [[387, "term-sparse-graph"]], "sparse matrix": [[387, "term-sparse-matrix"]], "split": [[387, "term-split"]], "stateless": [[387, "term-stateless"]], "supervised": [[387, "term-supervised"]], "supervised learning": [[387, "term-supervised-learning"]], "target": [[387, "term-target"]], "targets": [[387, "term-targets"]], "transduction": [[387, "term-transduction"]], "transductive": [[387, "term-transductive"]], "transform": [[387, "term-transform"]], "transformer": [[387, "term-transformer"]], "transformers": [[387, "term-transformers"]], "unlabeled": [[387, "term-unlabeled"]], "unlabeled data": [[387, "term-unlabeled-data"]], "unsupervised": [[387, "term-unsupervised"]], "unsupervised learning": [[387, "term-unsupervised-learning"]], "vectorizer": [[387, "term-vectorizer"]], "vectorizers": [[387, "term-vectorizers"]], "verbose": [[387, "term-verbose"]], "warm_start": [[387, "term-warm_start"]], "module": [[399, "module-sklearn.base"], [399, "module-sklearn.calibration"], [399, "module-sklearn.cluster"], [399, "module-sklearn.compose"], [399, "module-sklearn.covariance"], [399, "module-sklearn.cross_decomposition"], [399, "module-sklearn.datasets"], [399, "module-sklearn.decomposition"], [399, "module-sklearn.discriminant_analysis"], [399, "module-sklearn.dummy"], [399, "module-sklearn.ensemble"], [399, "module-sklearn.exceptions"], [399, "module-sklearn.experimental"], [399, "module-sklearn.feature_extraction"], [399, "module-sklearn.feature_extraction.image"], [399, "module-sklearn.feature_extraction.text"], [399, "module-sklearn.feature_selection"], [399, "module-sklearn.gaussian_process"], [399, "module-sklearn.impute"], [399, "module-sklearn.inspection"], [399, "module-sklearn.isotonic"], [399, "module-sklearn.kernel_approximation"], [399, "module-sklearn.kernel_ridge"], [399, "module-sklearn.linear_model"], [399, "module-sklearn.manifold"], [399, "module-sklearn.metrics"], [399, "module-sklearn.metrics.cluster"], [399, "module-sklearn.metrics.pairwise"], [399, "module-sklearn.mixture"], [399, "module-sklearn.model_selection"], [399, "module-sklearn.multiclass"], [399, "module-sklearn.multioutput"], [399, "module-sklearn.naive_bayes"], [399, "module-sklearn.neighbors"], [399, "module-sklearn.neural_network"], [399, "module-sklearn.pipeline"], [399, "module-sklearn.preprocessing"], [399, "module-sklearn.random_projection"], [399, "module-sklearn.semi_supervised"], [399, "module-sklearn.svm"], [399, "module-sklearn.tree"], [399, "module-sklearn.utils"], [570, "module-sklearn.experimental.enable_halving_search_cv"], [571, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[399, "module-sklearn.base"]], "sklearn.calibration": [[399, "module-sklearn.calibration"]], "sklearn.cluster": [[399, "module-sklearn.cluster"]], "sklearn.compose": [[399, "module-sklearn.compose"]], "sklearn.covariance": [[399, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[399, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[399, "module-sklearn.datasets"]], "sklearn.decomposition": [[399, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[399, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[399, "module-sklearn.dummy"]], "sklearn.ensemble": [[399, "module-sklearn.ensemble"]], "sklearn.exceptions": [[399, "module-sklearn.exceptions"]], "sklearn.experimental": [[399, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[399, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[399, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[399, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[399, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[399, "module-sklearn.gaussian_process"]], "sklearn.impute": [[399, "module-sklearn.impute"]], "sklearn.inspection": [[399, "module-sklearn.inspection"]], "sklearn.isotonic": [[399, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[399, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[399, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[399, "module-sklearn.linear_model"]], "sklearn.manifold": [[399, "module-sklearn.manifold"]], "sklearn.metrics": [[399, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[399, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[399, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[399, "module-sklearn.mixture"]], "sklearn.model_selection": [[399, "module-sklearn.model_selection"]], "sklearn.multiclass": [[399, "module-sklearn.multiclass"]], "sklearn.multioutput": [[399, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[399, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[399, "module-sklearn.neighbors"]], "sklearn.neural_network": [[399, "module-sklearn.neural_network"]], "sklearn.pipeline": [[399, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[399, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[399, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[399, "module-sklearn.semi_supervised"]], "sklearn.svm": [[399, "module-sklearn.svm"]], "sklearn.tree": [[399, "module-sklearn.tree"]], "sklearn.utils": [[399, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[411, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[412, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[413, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[414, "sklearn.base.BaseEstimator"]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[414, "sklearn.base.BaseEstimator.get_metadata_routing"]], "get_params() (sklearn.base.baseestimator method)": [[414, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[414, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[415, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[415, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[415, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[415, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[415, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[416, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[416, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[417, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[417, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[418, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[418, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[419, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[419, "sklearn.base.DensityMixin.score"]], "metaestimatormixin (class in sklearn.base)": [[420, "sklearn.base.MetaEstimatorMixin"]], "onetoonefeaturemixin (class in sklearn.base)": [[421, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[421, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "outliermixin (class in sklearn.base)": [[422, "sklearn.base.OutlierMixin"]], "fit_predict() (sklearn.base.outliermixin method)": [[422, "sklearn.base.OutlierMixin.fit_predict"]], "regressormixin (class in sklearn.base)": [[423, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[423, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[424, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[424, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[424, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[425, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[426, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[427, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[428, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[428, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[428, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[428, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[428, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[428, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[428, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[428, "sklearn.calibration.CalibratedClassifierCV.set_fit_request"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[428, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[428, "sklearn.calibration.CalibratedClassifierCV.set_score_request"]], "calibrationdisplay (class in sklearn.calibration)": [[429, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[429, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[429, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[429, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[430, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[431, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[431, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[431, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[431, "sklearn.cluster.AffinityPropagation.get_metadata_routing"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[431, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[431, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[431, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[432, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[432, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[432, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[432, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[432, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[432, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[433, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[433, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[433, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[433, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[433, "sklearn.cluster.Birch.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.birch method)": [[433, "sklearn.cluster.Birch.get_metadata_routing"]], "get_params() (sklearn.cluster.birch method)": [[433, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[433, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[433, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[433, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[433, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[433, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[434, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.score"]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.set_fit_request"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.set_params"]], "set_predict_request() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.set_score_request"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[434, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[435, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[435, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[435, "sklearn.cluster.DBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[435, "sklearn.cluster.DBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.dbscan method)": [[435, "sklearn.cluster.DBSCAN.get_params"]], "set_fit_request() (sklearn.cluster.dbscan method)": [[435, "sklearn.cluster.DBSCAN.set_fit_request"]], "set_params() (sklearn.cluster.dbscan method)": [[435, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[436, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[436, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[436, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[436, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[436, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[436, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[436, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[436, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[436, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[436, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[436, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[437, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[437, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[437, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[437, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[437, "sklearn.cluster.HDBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.hdbscan method)": [[437, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[437, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[438, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.score"]], "set_fit_request() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.set_fit_request"]], "set_output() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.set_params"]], "set_predict_request() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.set_score_request"]], "transform() (sklearn.cluster.kmeans method)": [[438, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[439, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[439, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[439, "sklearn.cluster.MeanShift.fit_predict"]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[439, "sklearn.cluster.MeanShift.get_metadata_routing"]], "get_params() (sklearn.cluster.meanshift method)": [[439, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[439, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[439, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[440, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.score"]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.set_fit_request"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.set_params"]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request"]], "set_predict_request() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.set_score_request"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[440, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[441, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[441, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[441, "sklearn.cluster.OPTICS.fit_predict"]], "get_metadata_routing() (sklearn.cluster.optics method)": [[441, "sklearn.cluster.OPTICS.get_metadata_routing"]], "get_params() (sklearn.cluster.optics method)": [[441, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[441, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[442, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[442, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[442, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[442, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[442, "sklearn.cluster.SpectralBiclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[442, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[442, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[442, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[442, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[443, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[443, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[443, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[443, "sklearn.cluster.SpectralClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralclustering method)": [[443, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[443, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[444, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[444, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[444, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[444, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[444, "sklearn.cluster.SpectralCoclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[444, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[444, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[444, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[444, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[445, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[446, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[447, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[448, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[449, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[450, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[451, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[452, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[453, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[454, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[455, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[455, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[455, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[455, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[455, "sklearn.compose.ColumnTransformer.get_metadata_routing"]], "get_params() (sklearn.compose.columntransformer method)": [[455, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[455, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[455, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[455, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[455, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[456, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[456, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[456, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[456, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[456, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[456, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[456, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[456, "sklearn.compose.TransformedTargetRegressor.set_params"]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[456, "sklearn.compose.TransformedTargetRegressor.set_score_request"]], "make_column_selector() (in module sklearn.compose)": [[457, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[458, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[459, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[460, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.get_metadata_routing"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.set_params"]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[460, "sklearn.covariance.EllipticEnvelope.set_score_request"]], "empiricalcovariance (class in sklearn.covariance)": [[461, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[461, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[461, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[461, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[461, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[461, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[461, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[461, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[461, "sklearn.covariance.EmpiricalCovariance.set_params"]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[461, "sklearn.covariance.EmpiricalCovariance.set_score_request"]], "graphicallasso (class in sklearn.covariance)": [[462, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[462, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[462, "sklearn.covariance.GraphicalLasso.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[462, "sklearn.covariance.GraphicalLasso.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallasso method)": [[462, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[462, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[462, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[462, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[462, "sklearn.covariance.GraphicalLasso.set_params"]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[462, "sklearn.covariance.GraphicalLasso.set_score_request"]], "graphicallassocv (class in sklearn.covariance)": [[463, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[463, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[463, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[463, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[463, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[463, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[463, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[463, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[463, "sklearn.covariance.GraphicalLassoCV.set_params"]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[463, "sklearn.covariance.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in sklearn.covariance)": [[464, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[464, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[464, "sklearn.covariance.LedoitWolf.fit"]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[464, "sklearn.covariance.LedoitWolf.get_metadata_routing"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[464, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[464, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[464, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[464, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[464, "sklearn.covariance.LedoitWolf.set_params"]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[464, "sklearn.covariance.LedoitWolf.set_score_request"]], "mincovdet (class in sklearn.covariance)": [[465, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[465, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[465, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[465, "sklearn.covariance.MinCovDet.fit"]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[465, "sklearn.covariance.MinCovDet.get_metadata_routing"]], "get_params() (sklearn.covariance.mincovdet method)": [[465, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[465, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[465, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[465, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[465, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[465, "sklearn.covariance.MinCovDet.set_params"]], "set_score_request() (sklearn.covariance.mincovdet method)": [[465, "sklearn.covariance.MinCovDet.set_score_request"]], "oas (class in sklearn.covariance)": [[466, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[466, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[466, "sklearn.covariance.OAS.fit"]], "get_metadata_routing() (sklearn.covariance.oas method)": [[466, "sklearn.covariance.OAS.get_metadata_routing"]], "get_params() (sklearn.covariance.oas method)": [[466, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[466, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[466, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[466, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[466, "sklearn.covariance.OAS.set_params"]], "set_score_request() (sklearn.covariance.oas method)": [[466, "sklearn.covariance.OAS.set_score_request"]], "shrunkcovariance (class in sklearn.covariance)": [[467, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[467, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[467, "sklearn.covariance.ShrunkCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[467, "sklearn.covariance.ShrunkCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[467, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[467, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[467, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[467, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[467, "sklearn.covariance.ShrunkCovariance.set_params"]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[467, "sklearn.covariance.ShrunkCovariance.set_score_request"]], "empirical_covariance() (in module sklearn.covariance)": [[468, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[469, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[470, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[471, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[472, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[473, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.set_params"]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.set_transform_request"]], "transform() (sklearn.cross_decomposition.cca method)": [[473, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[474, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.set_transform_request"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[474, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[475, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.set_transform_request"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[475, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[476, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[476, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[476, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[476, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[476, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[476, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[476, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[476, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[476, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[477, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[478, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[479, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[480, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[481, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[482, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[483, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[484, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[485, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[486, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[487, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[490, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[491, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[492, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[493, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[494, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[495, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[496, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[497, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[498, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[499, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[500, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[502, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[503, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[504, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[505, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[506, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[507, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[508, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[522, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[522, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[522, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[522, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[522, "sklearn.decomposition.DictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[522, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[522, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[522, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[522, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[523, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[523, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[523, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[523, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[523, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[523, "sklearn.decomposition.FactorAnalysis.get_metadata_routing"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[523, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[523, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[523, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[523, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[523, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[523, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[523, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[524, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[524, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[524, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[524, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[524, "sklearn.decomposition.FastICA.get_metadata_routing"]], "get_params() (sklearn.decomposition.fastica method)": [[524, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[524, "sklearn.decomposition.FastICA.inverse_transform"]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[524, "sklearn.decomposition.FastICA.set_inverse_transform_request"]], "set_output() (sklearn.decomposition.fastica method)": [[524, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[524, "sklearn.decomposition.FastICA.set_params"]], "set_transform_request() (sklearn.decomposition.fastica method)": [[524, "sklearn.decomposition.FastICA.set_transform_request"]], "transform() (sklearn.decomposition.fastica method)": [[524, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[525, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.set_params"]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request"]], "transform() (sklearn.decomposition.incrementalpca method)": [[525, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[526, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[526, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[526, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[526, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[526, "sklearn.decomposition.KernelPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.kernelpca method)": [[526, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[526, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[526, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[526, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[526, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[527, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[527, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[527, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[527, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[527, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[527, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[527, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[527, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[527, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[527, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[527, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[527, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[528, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[528, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[528, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[528, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[528, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[528, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[528, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[528, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[528, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[528, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[529, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[529, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[529, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[529, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[529, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[529, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[529, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[529, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[529, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[529, "sklearn.decomposition.MiniBatchNMF.set_params"]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[529, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[529, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[530, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[530, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[530, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[530, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[530, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[530, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[530, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[530, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[530, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[530, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[531, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[531, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[531, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[531, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[531, "sklearn.decomposition.NMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.nmf method)": [[531, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[531, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[531, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[531, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[531, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[532, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[532, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[533, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[533, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[533, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[533, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[533, "sklearn.decomposition.SparseCoder.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[533, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[533, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[533, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[533, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[533, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[533, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[534, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[534, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[534, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[534, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[534, "sklearn.decomposition.SparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsepca method)": [[534, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[534, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[534, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[534, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[534, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[535, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[535, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[535, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[535, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[535, "sklearn.decomposition.TruncatedSVD.get_metadata_routing"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[535, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[535, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[535, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[535, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[535, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[536, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[537, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[538, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[539, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[540, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[541, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[541, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[541, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[541, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[541, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[541, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[541, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[541, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[541, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[541, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[541, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request"]], "dummyclassifier (class in sklearn.dummy)": [[542, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[542, "sklearn.dummy.DummyClassifier.fit"]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[542, "sklearn.dummy.DummyClassifier.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[542, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[542, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[542, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[542, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[542, "sklearn.dummy.DummyClassifier.score"]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[542, "sklearn.dummy.DummyClassifier.set_fit_request"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[542, "sklearn.dummy.DummyClassifier.set_params"]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[542, "sklearn.dummy.DummyClassifier.set_score_request"]], "dummyregressor (class in sklearn.dummy)": [[543, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[543, "sklearn.dummy.DummyRegressor.fit"]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[543, "sklearn.dummy.DummyRegressor.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyregressor method)": [[543, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[543, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[543, "sklearn.dummy.DummyRegressor.score"]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[543, "sklearn.dummy.DummyRegressor.set_fit_request"]], "set_params() (sklearn.dummy.dummyregressor method)": [[543, "sklearn.dummy.DummyRegressor.set_params"]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[543, "sklearn.dummy.DummyRegressor.set_predict_request"]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[543, "sklearn.dummy.DummyRegressor.set_score_request"]], "adaboostclassifier (class in sklearn.ensemble)": [[544, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[544, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[544, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[544, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[545, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[545, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[545, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[545, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[545, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[545, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[545, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[545, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[545, "sklearn.ensemble.AdaBoostRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[545, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[545, "sklearn.ensemble.AdaBoostRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[545, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[545, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[546, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[546, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[546, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[546, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[546, "sklearn.ensemble.BaggingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[546, "sklearn.ensemble.BaggingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[546, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[546, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[546, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[546, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[546, "sklearn.ensemble.BaggingClassifier.score"]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[546, "sklearn.ensemble.BaggingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[546, "sklearn.ensemble.BaggingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[546, "sklearn.ensemble.BaggingClassifier.set_score_request"]], "baggingregressor (class in sklearn.ensemble)": [[547, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[547, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[547, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[547, "sklearn.ensemble.BaggingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[547, "sklearn.ensemble.BaggingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[547, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[547, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[547, "sklearn.ensemble.BaggingRegressor.score"]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[547, "sklearn.ensemble.BaggingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[547, "sklearn.ensemble.BaggingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[547, "sklearn.ensemble.BaggingRegressor.set_score_request"]], "extratreesclassifier (class in sklearn.ensemble)": [[548, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[548, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[548, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[548, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[548, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[548, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[548, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[548, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[548, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[548, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[548, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[548, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[548, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[548, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[548, "sklearn.ensemble.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sklearn.ensemble)": [[549, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[549, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[549, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[549, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[549, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[549, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[549, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[549, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[549, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[549, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[549, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[549, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[549, "sklearn.ensemble.ExtraTreesRegressor.set_score_request"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[550, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[550, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[550, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[550, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[551, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[551, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[551, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[551, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[551, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[551, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[551, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[551, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[551, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[551, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[551, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[551, "sklearn.ensemble.GradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[551, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[552, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[553, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[553, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[553, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[553, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[553, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[553, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[553, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[553, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[553, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[553, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[553, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[554, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[554, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[554, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[554, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[554, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[554, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[554, "sklearn.ensemble.IsolationForest.get_metadata_routing"]], "get_params() (sklearn.ensemble.isolationforest method)": [[554, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[554, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[554, "sklearn.ensemble.IsolationForest.score_samples"]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[554, "sklearn.ensemble.IsolationForest.set_fit_request"]], "set_params() (sklearn.ensemble.isolationforest method)": [[554, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[555, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[555, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[555, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[555, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[555, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[555, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[555, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[555, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[555, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[555, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[555, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[555, "sklearn.ensemble.RandomForestClassifier.score"]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[555, "sklearn.ensemble.RandomForestClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[555, "sklearn.ensemble.RandomForestClassifier.set_params"]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[555, "sklearn.ensemble.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sklearn.ensemble)": [[556, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[556, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[556, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[556, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[556, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[556, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[556, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[556, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[556, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[556, "sklearn.ensemble.RandomForestRegressor.score"]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[556, "sklearn.ensemble.RandomForestRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[556, "sklearn.ensemble.RandomForestRegressor.set_params"]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[556, "sklearn.ensemble.RandomForestRegressor.set_score_request"]], "randomtreesembedding (class in sklearn.ensemble)": [[557, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[557, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[557, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[557, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[557, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[557, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[557, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[557, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[557, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[557, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[557, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[557, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[557, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[557, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[558, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[558, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[558, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.score"]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.set_score_request"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[558, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[559, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[559, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[559, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[559, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[559, "sklearn.ensemble.StackingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[559, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[559, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[559, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[559, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[559, "sklearn.ensemble.StackingRegressor.score"]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[559, "sklearn.ensemble.StackingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[559, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[559, "sklearn.ensemble.StackingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[559, "sklearn.ensemble.StackingRegressor.set_score_request"]], "transform() (sklearn.ensemble.stackingregressor method)": [[559, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[560, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[560, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[560, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.score"]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.set_score_request"]], "transform() (sklearn.ensemble.votingclassifier method)": [[560, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[561, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[561, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[561, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[561, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[561, "sklearn.ensemble.VotingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingregressor method)": [[561, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[561, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[561, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[561, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[561, "sklearn.ensemble.VotingRegressor.score"]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[561, "sklearn.ensemble.VotingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.votingregressor method)": [[561, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[561, "sklearn.ensemble.VotingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[561, "sklearn.ensemble.VotingRegressor.set_score_request"]], "transform() (sklearn.ensemble.votingregressor method)": [[561, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[562, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[562, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[563, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[563, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[564, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[564, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[565, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[565, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[566, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[566, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[567, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[567, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[568, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[568, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[569, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[569, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[570, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[571, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[572, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[572, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[572, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[572, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[572, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[572, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[572, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[572, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[572, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[572, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[572, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[572, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[573, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[573, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[573, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[573, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[573, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[573, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[573, "sklearn.feature_extraction.FeatureHasher.set_params"]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[573, "sklearn.feature_extraction.FeatureHasher.set_transform_request"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[573, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[574, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[574, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[574, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[574, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[574, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[574, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[574, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[574, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[575, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[576, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[577, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[578, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[579, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[579, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[580, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[580, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[581, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[581, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[581, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[581, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[581, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[581, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[581, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[581, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[581, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[581, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[581, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[582, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[583, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[583, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[583, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[583, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[583, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[583, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[583, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[583, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[583, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[583, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[583, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[584, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[584, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[584, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[585, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[585, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.score"]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.set_fit_request"]], "set_output() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[585, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[586, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[586, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[586, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[586, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[586, "sklearn.feature_selection.SelectFdr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[586, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[586, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[586, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[586, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[586, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[586, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[587, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[587, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[587, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[587, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[587, "sklearn.feature_selection.SelectFpr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[587, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[587, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[587, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[587, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[587, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[587, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[588, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[588, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[588, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[588, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[588, "sklearn.feature_selection.SelectFromModel.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[588, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[588, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[588, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[588, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[588, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[588, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[588, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[588, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[588, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[589, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[589, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[589, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[589, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[589, "sklearn.feature_selection.SelectFwe.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[589, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[589, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[589, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[589, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[589, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[589, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[590, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[590, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[590, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[590, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[590, "sklearn.feature_selection.SelectKBest.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[590, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[590, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[590, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[590, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[590, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[590, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[591, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[591, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[591, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[591, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[591, "sklearn.feature_selection.SelectPercentile.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[591, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[591, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[591, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[591, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[591, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[591, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[592, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[592, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[592, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[592, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[592, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[592, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[593, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[593, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[593, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[593, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[593, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[593, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[593, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[593, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[593, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[593, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[594, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[594, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[594, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[594, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[594, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[594, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[594, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[594, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[594, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[594, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[595, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[596, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[597, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[598, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[599, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[600, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[601, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[601, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[601, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[601, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[601, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[601, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[601, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[601, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[601, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[601, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[601, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[602, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[602, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[602, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[602, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[602, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[602, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[602, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[602, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[602, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[602, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[602, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[603, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[603, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[603, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[603, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[603, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[603, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[603, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[603, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[603, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[603, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[603, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[603, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[604, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[604, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[604, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[604, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[604, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[604, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[604, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[604, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[604, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[604, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[604, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[604, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[605, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[605, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[605, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[605, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[605, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[605, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[605, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[605, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[605, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[605, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[605, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[605, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[606, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[607, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[607, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[607, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[607, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[607, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[607, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[607, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[607, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[607, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[607, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[607, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[607, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[608, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[608, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[608, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[608, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[608, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[608, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[608, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[608, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[608, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[609, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[609, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[609, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[609, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[609, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[609, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[609, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[609, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[609, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[609, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[609, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[609, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[610, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[610, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[610, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[610, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[610, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[610, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[610, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[610, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[610, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[610, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[610, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[610, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[611, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[611, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[611, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[611, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[611, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[611, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[611, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[611, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[611, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[611, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[611, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[611, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[612, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[612, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[612, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[612, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[612, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[612, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[612, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[612, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[612, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[612, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[612, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[613, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[613, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[613, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[613, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[613, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[613, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[613, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[613, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[613, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[613, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[613, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[614, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[614, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[614, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[614, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[614, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[614, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[614, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[614, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[614, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[614, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[614, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[615, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[615, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[615, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[615, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[615, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[615, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[615, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[615, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[615, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[615, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[615, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[616, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[616, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[616, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[616, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[616, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[616, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[616, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[616, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[616, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[616, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[616, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[617, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[618, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[618, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[618, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[618, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[618, "sklearn.impute.IterativeImputer.get_metadata_routing"]], "get_params() (sklearn.impute.iterativeimputer method)": [[618, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[618, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[618, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[618, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[619, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[619, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[619, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[619, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[619, "sklearn.impute.KNNImputer.get_metadata_routing"]], "get_params() (sklearn.impute.knnimputer method)": [[619, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[619, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[619, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[619, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[620, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[620, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[620, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[620, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[620, "sklearn.impute.MissingIndicator.get_metadata_routing"]], "get_params() (sklearn.impute.missingindicator method)": [[620, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[620, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[620, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[620, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[621, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[621, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[621, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[621, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[621, "sklearn.impute.SimpleImputer.get_metadata_routing"]], "get_params() (sklearn.impute.simpleimputer method)": [[621, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[621, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[621, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[621, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[621, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[622, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[622, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[622, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[623, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[623, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[623, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[624, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[625, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[626, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.get_metadata_routing"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.score"]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.set_fit_request"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.set_params"]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.set_predict_request"]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.set_score_request"]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.set_transform_request"]], "transform() (sklearn.isotonic.isotonicregression method)": [[626, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[627, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[628, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[629, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[629, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[629, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[629, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[629, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[629, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[629, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[629, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[629, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[630, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[630, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[630, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[630, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[630, "sklearn.kernel_approximation.Nystroem.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[630, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[630, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[630, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[630, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[631, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[631, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[631, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[631, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[631, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[631, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[631, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[631, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[631, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[632, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[632, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[632, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[632, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[632, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[632, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[632, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[632, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[632, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[633, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[633, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[633, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[633, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[633, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[633, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[633, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[633, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[633, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[634, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[634, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[634, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[634, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[634, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[634, "sklearn.kernel_ridge.KernelRidge.score"]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[634, "sklearn.kernel_ridge.KernelRidge.set_fit_request"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[634, "sklearn.kernel_ridge.KernelRidge.set_params"]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[634, "sklearn.kernel_ridge.KernelRidge.set_score_request"]], "ardregression (class in sklearn.linear_model)": [[635, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[635, "sklearn.linear_model.ARDRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[635, "sklearn.linear_model.ARDRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.ardregression method)": [[635, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[635, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[635, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[635, "sklearn.linear_model.ARDRegression.set_params"]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[635, "sklearn.linear_model.ARDRegression.set_predict_request"]], "set_score_request() (sklearn.linear_model.ardregression method)": [[635, "sklearn.linear_model.ARDRegression.set_score_request"]], "bayesianridge (class in sklearn.linear_model)": [[636, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[636, "sklearn.linear_model.BayesianRidge.fit"]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[636, "sklearn.linear_model.BayesianRidge.get_metadata_routing"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[636, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[636, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[636, "sklearn.linear_model.BayesianRidge.score"]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[636, "sklearn.linear_model.BayesianRidge.set_fit_request"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[636, "sklearn.linear_model.BayesianRidge.set_params"]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[636, "sklearn.linear_model.BayesianRidge.set_predict_request"]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[636, "sklearn.linear_model.BayesianRidge.set_score_request"]], "elasticnet (class in sklearn.linear_model)": [[637, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[637, "sklearn.linear_model.ElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[637, "sklearn.linear_model.ElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnet method)": [[637, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[637, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[637, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[637, "sklearn.linear_model.ElasticNet.score"]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[637, "sklearn.linear_model.ElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnet method)": [[637, "sklearn.linear_model.ElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[637, "sklearn.linear_model.ElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[637, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[638, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[638, "sklearn.linear_model.ElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[638, "sklearn.linear_model.ElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[638, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[638, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[638, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[638, "sklearn.linear_model.ElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[638, "sklearn.linear_model.ElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[638, "sklearn.linear_model.ElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[638, "sklearn.linear_model.ElasticNetCV.set_score_request"]], "gammaregressor (class in sklearn.linear_model)": [[639, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[639, "sklearn.linear_model.GammaRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[639, "sklearn.linear_model.GammaRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[639, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[639, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[639, "sklearn.linear_model.GammaRegressor.score"]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[639, "sklearn.linear_model.GammaRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[639, "sklearn.linear_model.GammaRegressor.set_params"]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[639, "sklearn.linear_model.GammaRegressor.set_score_request"]], "huberregressor (class in sklearn.linear_model)": [[640, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[640, "sklearn.linear_model.HuberRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[640, "sklearn.linear_model.HuberRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.huberregressor method)": [[640, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[640, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[640, "sklearn.linear_model.HuberRegressor.score"]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[640, "sklearn.linear_model.HuberRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.huberregressor method)": [[640, "sklearn.linear_model.HuberRegressor.set_params"]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[640, "sklearn.linear_model.HuberRegressor.set_score_request"]], "lars (class in sklearn.linear_model)": [[641, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[641, "sklearn.linear_model.Lars.fit"]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[641, "sklearn.linear_model.Lars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lars method)": [[641, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[641, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[641, "sklearn.linear_model.Lars.score"]], "set_fit_request() (sklearn.linear_model.lars method)": [[641, "sklearn.linear_model.Lars.set_fit_request"]], "set_params() (sklearn.linear_model.lars method)": [[641, "sklearn.linear_model.Lars.set_params"]], "set_score_request() (sklearn.linear_model.lars method)": [[641, "sklearn.linear_model.Lars.set_score_request"]], "larscv (class in sklearn.linear_model)": [[642, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[642, "sklearn.linear_model.LarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[642, "sklearn.linear_model.LarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.larscv method)": [[642, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[642, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[642, "sklearn.linear_model.LarsCV.score"]], "set_fit_request() (sklearn.linear_model.larscv method)": [[642, "sklearn.linear_model.LarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.larscv method)": [[642, "sklearn.linear_model.LarsCV.set_params"]], "set_score_request() (sklearn.linear_model.larscv method)": [[642, "sklearn.linear_model.LarsCV.set_score_request"]], "lasso (class in sklearn.linear_model)": [[643, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[643, "sklearn.linear_model.Lasso.fit"]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[643, "sklearn.linear_model.Lasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.lasso method)": [[643, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[643, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[643, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[643, "sklearn.linear_model.Lasso.score"]], "set_fit_request() (sklearn.linear_model.lasso method)": [[643, "sklearn.linear_model.Lasso.set_fit_request"]], "set_params() (sklearn.linear_model.lasso method)": [[643, "sklearn.linear_model.Lasso.set_params"]], "set_score_request() (sklearn.linear_model.lasso method)": [[643, "sklearn.linear_model.Lasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[643, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[644, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[644, "sklearn.linear_model.LassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[644, "sklearn.linear_model.LassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassocv method)": [[644, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[644, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[644, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[644, "sklearn.linear_model.LassoCV.score"]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[644, "sklearn.linear_model.LassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassocv method)": [[644, "sklearn.linear_model.LassoCV.set_params"]], "set_score_request() (sklearn.linear_model.lassocv method)": [[644, "sklearn.linear_model.LassoCV.set_score_request"]], "lassolars (class in sklearn.linear_model)": [[645, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[645, "sklearn.linear_model.LassoLars.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[645, "sklearn.linear_model.LassoLars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolars method)": [[645, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[645, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[645, "sklearn.linear_model.LassoLars.score"]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[645, "sklearn.linear_model.LassoLars.set_fit_request"]], "set_params() (sklearn.linear_model.lassolars method)": [[645, "sklearn.linear_model.LassoLars.set_params"]], "set_score_request() (sklearn.linear_model.lassolars method)": [[645, "sklearn.linear_model.LassoLars.set_score_request"]], "lassolarscv (class in sklearn.linear_model)": [[646, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[646, "sklearn.linear_model.LassoLarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[646, "sklearn.linear_model.LassoLarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[646, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[646, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[646, "sklearn.linear_model.LassoLarsCV.score"]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[646, "sklearn.linear_model.LassoLarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[646, "sklearn.linear_model.LassoLarsCV.set_params"]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[646, "sklearn.linear_model.LassoLarsCV.set_score_request"]], "lassolarsic (class in sklearn.linear_model)": [[647, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[647, "sklearn.linear_model.LassoLarsIC.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[647, "sklearn.linear_model.LassoLarsIC.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[647, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[647, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[647, "sklearn.linear_model.LassoLarsIC.score"]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[647, "sklearn.linear_model.LassoLarsIC.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[647, "sklearn.linear_model.LassoLarsIC.set_params"]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[647, "sklearn.linear_model.LassoLarsIC.set_score_request"]], "linearregression (class in sklearn.linear_model)": [[648, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[648, "sklearn.linear_model.LinearRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[648, "sklearn.linear_model.LinearRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.linearregression method)": [[648, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[648, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[648, "sklearn.linear_model.LinearRegression.score"]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[648, "sklearn.linear_model.LinearRegression.set_fit_request"]], "set_params() (sklearn.linear_model.linearregression method)": [[648, "sklearn.linear_model.LinearRegression.set_params"]], "set_score_request() (sklearn.linear_model.linearregression method)": [[648, "sklearn.linear_model.LinearRegression.set_score_request"]], "logisticregression (class in sklearn.linear_model)": [[649, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.score"]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.set_params"]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[649, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[650, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[650, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[651, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[651, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[651, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[651, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[651, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[651, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[651, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[651, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[651, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[651, "sklearn.linear_model.MultiTaskElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[651, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[652, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[652, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[652, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[652, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[652, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[652, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[652, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[652, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[652, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[652, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request"]], "multitasklasso (class in sklearn.linear_model)": [[653, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[653, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[653, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[653, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[653, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[653, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[653, "sklearn.linear_model.MultiTaskLasso.score"]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[653, "sklearn.linear_model.MultiTaskLasso.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[653, "sklearn.linear_model.MultiTaskLasso.set_params"]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[653, "sklearn.linear_model.MultiTaskLasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[653, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[654, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[654, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[654, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[654, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[654, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[654, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[654, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[654, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[654, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[654, "sklearn.linear_model.MultiTaskLassoCV.set_score_request"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[655, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[655, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[655, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[655, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[655, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[655, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[655, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[655, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[656, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[656, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[656, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[656, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[656, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[656, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[656, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[657, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[658, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[659, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.fit"]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.get_metadata_routing"]], "get_params() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.score"]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.set_fit_request"]], "set_params() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.set_params"]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.set_score_request"]], "sparsify() (sklearn.linear_model.perceptron method)": [[659, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[660, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[660, "sklearn.linear_model.PoissonRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[660, "sklearn.linear_model.PoissonRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[660, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[660, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[660, "sklearn.linear_model.PoissonRegressor.score"]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[660, "sklearn.linear_model.PoissonRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[660, "sklearn.linear_model.PoissonRegressor.set_params"]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[660, "sklearn.linear_model.PoissonRegressor.set_score_request"]], "quantileregressor (class in sklearn.linear_model)": [[661, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[661, "sklearn.linear_model.QuantileRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[661, "sklearn.linear_model.QuantileRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[661, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[661, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[661, "sklearn.linear_model.QuantileRegressor.score"]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[661, "sklearn.linear_model.QuantileRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[661, "sklearn.linear_model.QuantileRegressor.set_params"]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[661, "sklearn.linear_model.QuantileRegressor.set_score_request"]], "ransacregressor (class in sklearn.linear_model)": [[662, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[662, "sklearn.linear_model.RANSACRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[662, "sklearn.linear_model.RANSACRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[662, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[662, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[662, "sklearn.linear_model.RANSACRegressor.score"]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[662, "sklearn.linear_model.RANSACRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[662, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[663, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[663, "sklearn.linear_model.Ridge.fit"]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[663, "sklearn.linear_model.Ridge.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridge method)": [[663, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[663, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[663, "sklearn.linear_model.Ridge.score"]], "set_fit_request() (sklearn.linear_model.ridge method)": [[663, "sklearn.linear_model.Ridge.set_fit_request"]], "set_params() (sklearn.linear_model.ridge method)": [[663, "sklearn.linear_model.Ridge.set_params"]], "set_score_request() (sklearn.linear_model.ridge method)": [[663, "sklearn.linear_model.Ridge.set_score_request"]], "ridgecv (class in sklearn.linear_model)": [[664, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[664, "sklearn.linear_model.RidgeCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[664, "sklearn.linear_model.RidgeCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgecv method)": [[664, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[664, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[664, "sklearn.linear_model.RidgeCV.score"]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[664, "sklearn.linear_model.RidgeCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgecv method)": [[664, "sklearn.linear_model.RidgeCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[664, "sklearn.linear_model.RidgeCV.set_score_request"]], "ridgeclassifier (class in sklearn.linear_model)": [[665, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[665, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[665, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[665, "sklearn.linear_model.RidgeClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[665, "sklearn.linear_model.RidgeClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[665, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[665, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[665, "sklearn.linear_model.RidgeClassifier.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[665, "sklearn.linear_model.RidgeClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[665, "sklearn.linear_model.RidgeClassifier.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[665, "sklearn.linear_model.RidgeClassifier.set_score_request"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[666, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[666, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[666, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[666, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[666, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[666, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[666, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[666, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[666, "sklearn.linear_model.RidgeClassifierCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[666, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[666, "sklearn.linear_model.RidgeClassifierCV.set_score_request"]], "sgdclassifier (class in sklearn.linear_model)": [[667, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.score"]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[667, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[668, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.set_fit_request"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[668, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[669, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[669, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[669, "sklearn.linear_model.SGDRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[669, "sklearn.linear_model.SGDRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[669, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[669, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[669, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[669, "sklearn.linear_model.SGDRegressor.score"]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[669, "sklearn.linear_model.SGDRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[669, "sklearn.linear_model.SGDRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[669, "sklearn.linear_model.SGDRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[669, "sklearn.linear_model.SGDRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[669, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[670, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[670, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[670, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[670, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[670, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[670, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[670, "sklearn.linear_model.TheilSenRegressor.set_params"]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[670, "sklearn.linear_model.TheilSenRegressor.set_score_request"]], "tweedieregressor (class in sklearn.linear_model)": [[671, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[671, "sklearn.linear_model.TweedieRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[671, "sklearn.linear_model.TweedieRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[671, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[671, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[671, "sklearn.linear_model.TweedieRegressor.score"]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[671, "sklearn.linear_model.TweedieRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[671, "sklearn.linear_model.TweedieRegressor.set_params"]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[671, "sklearn.linear_model.TweedieRegressor.set_score_request"]], "enet_path() (in module sklearn.linear_model)": [[672, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[673, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[674, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[675, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[676, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[677, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[678, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[679, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[679, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[679, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[679, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[679, "sklearn.manifold.Isomap.get_metadata_routing"]], "get_params() (sklearn.manifold.isomap method)": [[679, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[679, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[679, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[679, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[679, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[680, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[680, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[680, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[680, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[680, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[680, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[680, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[680, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[680, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[681, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[681, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[681, "sklearn.manifold.MDS.fit_transform"]], "get_metadata_routing() (sklearn.manifold.mds method)": [[681, "sklearn.manifold.MDS.get_metadata_routing"]], "get_params() (sklearn.manifold.mds method)": [[681, "sklearn.manifold.MDS.get_params"]], "set_fit_request() (sklearn.manifold.mds method)": [[681, "sklearn.manifold.MDS.set_fit_request"]], "set_params() (sklearn.manifold.mds method)": [[681, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[682, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[682, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[682, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[682, "sklearn.manifold.SpectralEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.spectralembedding method)": [[682, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[682, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[683, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[683, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[683, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[683, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[683, "sklearn.manifold.TSNE.get_metadata_routing"]], "get_params() (sklearn.manifold.tsne method)": [[683, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[683, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[683, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[684, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[685, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[686, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[687, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[688, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[688, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[688, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[688, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[689, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[689, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[689, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[689, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[690, "sklearn.metrics.DistanceMetric"]], "get_metric() (sklearn.metrics.distancemetric method)": [[690, "sklearn.metrics.DistanceMetric.get_metric"]], "precisionrecalldisplay (class in sklearn.metrics)": [[691, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[691, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[691, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[691, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[692, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[692, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[692, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[692, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[693, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[693, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[693, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[693, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[694, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[695, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[696, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[697, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[698, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[699, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[700, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[702, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[703, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[704, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[705, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[706, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[709, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[711, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[717, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[722, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[723, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[724, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[725, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[726, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[730, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[731, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[732, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[733, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[734, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[735, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[736, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[737, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[738, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[739, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[740, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[741, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[742, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[743, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[744, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[745, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[746, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[747, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[748, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[749, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[750, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[751, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[752, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[753, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[754, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[768, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[769, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[770, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[771, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[772, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[773, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[774, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[775, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[776, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[777, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[778, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[779, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[780, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[781, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[782, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[783, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[784, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[785, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[785, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[785, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[785, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[785, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[785, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[785, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[785, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[785, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[785, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[785, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[786, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[786, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[786, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[786, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[786, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[786, "sklearn.mixture.GaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[786, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[786, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[786, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[786, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[786, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[786, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[786, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[787, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[787, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[787, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[787, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[788, "sklearn.model_selection.GroupKFold"]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[788, "sklearn.model_selection.GroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[788, "sklearn.model_selection.GroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[788, "sklearn.model_selection.GroupKFold.set_split_request"]], "split() (sklearn.model_selection.groupkfold method)": [[788, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[789, "sklearn.model_selection.GroupShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[789, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[789, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[789, "sklearn.model_selection.GroupShuffleSplit.set_split_request"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[789, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[790, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[790, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[790, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[790, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[791, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[791, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[792, "sklearn.model_selection.KFold"]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[792, "sklearn.model_selection.KFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[792, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[792, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[793, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[793, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[793, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[794, "sklearn.model_selection.LeaveOneGroupOut"]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[794, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[794, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[794, "sklearn.model_selection.LeaveOneGroupOut.set_split_request"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[794, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[795, "sklearn.model_selection.LeaveOneOut"]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[795, "sklearn.model_selection.LeaveOneOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[795, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[795, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[796, "sklearn.model_selection.LeavePGroupsOut"]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[796, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[796, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[796, "sklearn.model_selection.LeavePGroupsOut.set_split_request"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[796, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[797, "sklearn.model_selection.LeavePOut"]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[797, "sklearn.model_selection.LeavePOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[797, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[797, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[798, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[799, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[800, "sklearn.model_selection.PredefinedSplit"]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[800, "sklearn.model_selection.PredefinedSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[800, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[800, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[801, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[801, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[801, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[801, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[802, "sklearn.model_selection.RepeatedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[802, "sklearn.model_selection.RepeatedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[802, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[802, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[803, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[803, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[803, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[803, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[804, "sklearn.model_selection.ShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[804, "sklearn.model_selection.ShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[804, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[804, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[805, "sklearn.model_selection.StratifiedGroupKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[805, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[805, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[805, "sklearn.model_selection.StratifiedGroupKFold.set_split_request"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[805, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[806, "sklearn.model_selection.StratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[806, "sklearn.model_selection.StratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[806, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[806, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[807, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[807, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[807, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[807, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[808, "sklearn.model_selection.TimeSeriesSplit"]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[808, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[808, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[808, "sklearn.model_selection.TimeSeriesSplit.split"]], "validationcurvedisplay (class in sklearn.model_selection)": [[809, "sklearn.model_selection.ValidationCurveDisplay"]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[809, "sklearn.model_selection.ValidationCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[809, "sklearn.model_selection.ValidationCurveDisplay.plot"]], "check_cv() (in module sklearn.model_selection)": [[810, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[811, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[812, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[813, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[814, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[815, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[816, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[817, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[818, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[818, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[818, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[818, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[818, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[818, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[818, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[818, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[818, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[818, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[818, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[818, "sklearn.multiclass.OneVsOneClassifier.set_score_request"]], "onevsrestclassifier (class in sklearn.multiclass)": [[819, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[819, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[819, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[819, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[819, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[819, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[819, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[819, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[819, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[819, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[819, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[819, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[819, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[819, "sklearn.multiclass.OneVsRestClassifier.set_score_request"]], "outputcodeclassifier (class in sklearn.multiclass)": [[820, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[820, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[820, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[820, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[820, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[820, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[820, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[820, "sklearn.multiclass.OutputCodeClassifier.set_score_request"]], "classifierchain (class in sklearn.multioutput)": [[821, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[821, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[821, "sklearn.multioutput.ClassifierChain.fit"]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[821, "sklearn.multioutput.ClassifierChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.classifierchain method)": [[821, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[821, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[821, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[821, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[821, "sklearn.multioutput.ClassifierChain.set_params"]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[821, "sklearn.multioutput.ClassifierChain.set_score_request"]], "multioutputclassifier (class in sklearn.multioutput)": [[822, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[822, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[822, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[822, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[822, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[822, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[822, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[822, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[822, "sklearn.multioutput.MultiOutputClassifier.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[822, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[822, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request"]], "multioutputregressor (class in sklearn.multioutput)": [[823, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[823, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[823, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[823, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[823, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[823, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[823, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[823, "sklearn.multioutput.MultiOutputRegressor.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[823, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[823, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[823, "sklearn.multioutput.MultiOutputRegressor.set_score_request"]], "regressorchain (class in sklearn.multioutput)": [[824, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[824, "sklearn.multioutput.RegressorChain.fit"]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[824, "sklearn.multioutput.RegressorChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.regressorchain method)": [[824, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[824, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[824, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[824, "sklearn.multioutput.RegressorChain.set_params"]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[824, "sklearn.multioutput.RegressorChain.set_score_request"]], "bernoullinb (class in sklearn.naive_bayes)": [[825, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.score"]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[825, "sklearn.naive_bayes.BernoulliNB.set_score_request"]], "categoricalnb (class in sklearn.naive_bayes)": [[826, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.score"]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[826, "sklearn.naive_bayes.CategoricalNB.set_score_request"]], "complementnb (class in sklearn.naive_bayes)": [[827, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.score"]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[827, "sklearn.naive_bayes.ComplementNB.set_score_request"]], "gaussiannb (class in sklearn.naive_bayes)": [[828, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.score"]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[828, "sklearn.naive_bayes.GaussianNB.set_score_request"]], "multinomialnb (class in sklearn.naive_bayes)": [[829, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.score"]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[829, "sklearn.naive_bayes.MultinomialNB.set_score_request"]], "balltree (class in sklearn.neighbors)": [[830, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[830, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[830, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[830, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[830, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[830, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[830, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[830, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[830, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[831, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[831, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[831, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[831, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[831, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[831, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[831, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[831, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[831, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[832, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[832, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[832, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[832, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[832, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[832, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[832, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[832, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[832, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[832, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[832, "sklearn.neighbors.KNeighborsClassifier.set_score_request"]], "kneighborsregressor (class in sklearn.neighbors)": [[833, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[833, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[833, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[833, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[833, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[833, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[833, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[833, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[833, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[833, "sklearn.neighbors.KNeighborsRegressor.set_score_request"]], "kneighborstransformer (class in sklearn.neighbors)": [[834, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[834, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[834, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[834, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[834, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[834, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[834, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[834, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[834, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[834, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[834, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[835, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[835, "sklearn.neighbors.KernelDensity.fit"]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[835, "sklearn.neighbors.KernelDensity.get_metadata_routing"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[835, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[835, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[835, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[835, "sklearn.neighbors.KernelDensity.score_samples"]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[835, "sklearn.neighbors.KernelDensity.set_fit_request"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[835, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[836, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[836, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[836, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[836, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[836, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[836, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[836, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[836, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[836, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[836, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[836, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[837, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[837, "sklearn.neighbors.NearestCentroid.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[837, "sklearn.neighbors.NearestCentroid.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[837, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[837, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[837, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[837, "sklearn.neighbors.NearestCentroid.set_params"]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[837, "sklearn.neighbors.NearestCentroid.set_score_request"]], "nearestneighbors (class in sklearn.neighbors)": [[838, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[838, "sklearn.neighbors.NearestNeighbors.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[838, "sklearn.neighbors.NearestNeighbors.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[838, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[838, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[838, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[838, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[838, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[838, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[839, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[839, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[839, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[839, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[839, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[839, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[839, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[839, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[839, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[840, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[840, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[840, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[840, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[840, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[840, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[840, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[840, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[840, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[840, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[840, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[841, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[841, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[841, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[841, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[841, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[841, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[841, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[841, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[841, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[841, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[842, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[842, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[842, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[842, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[842, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[842, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[842, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[842, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[842, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[842, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[842, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[843, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[844, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[845, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[846, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[846, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[846, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[846, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[846, "sklearn.neural_network.BernoulliRBM.get_metadata_routing"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[846, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[846, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[846, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[846, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[846, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[846, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[846, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[847, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[847, "sklearn.neural_network.MLPClassifier.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[847, "sklearn.neural_network.MLPClassifier.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[847, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[847, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[847, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[847, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[847, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[847, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[847, "sklearn.neural_network.MLPClassifier.set_params"]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[847, "sklearn.neural_network.MLPClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[847, "sklearn.neural_network.MLPClassifier.set_score_request"]], "mlpregressor (class in sklearn.neural_network)": [[848, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[848, "sklearn.neural_network.MLPRegressor.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[848, "sklearn.neural_network.MLPRegressor.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[848, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[848, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[848, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[848, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[848, "sklearn.neural_network.MLPRegressor.set_params"]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[848, "sklearn.neural_network.MLPRegressor.set_score_request"]], "featureunion (class in sklearn.pipeline)": [[849, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[849, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[849, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[849, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[849, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[849, "sklearn.pipeline.FeatureUnion.get_metadata_routing"]], "get_params() (sklearn.pipeline.featureunion method)": [[849, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[849, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[849, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[849, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[849, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[850, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[850, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[850, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[850, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[850, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.set_params"]], "set_score_request() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.set_score_request"]], "transform() (sklearn.pipeline.pipeline method)": [[850, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[851, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[852, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[853, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[853, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[853, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[853, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[853, "sklearn.preprocessing.Binarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.binarizer method)": [[853, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[853, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[853, "sklearn.preprocessing.Binarizer.set_params"]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[853, "sklearn.preprocessing.Binarizer.set_transform_request"]], "transform() (sklearn.preprocessing.binarizer method)": [[853, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[854, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[854, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[854, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[854, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[854, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[854, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[854, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[854, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[854, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[854, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[855, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[855, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[855, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[855, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[855, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[855, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[855, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[855, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[855, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[855, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[855, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[856, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[856, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[856, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[856, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[856, "sklearn.preprocessing.KernelCenterer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[856, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[856, "sklearn.preprocessing.KernelCenterer.set_fit_request"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[856, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[856, "sklearn.preprocessing.KernelCenterer.set_params"]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[856, "sklearn.preprocessing.KernelCenterer.set_transform_request"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[856, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[857, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[857, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[857, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[857, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[857, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[857, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[857, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[857, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[857, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[857, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[858, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[858, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[858, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[858, "sklearn.preprocessing.LabelEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[858, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[858, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[858, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[858, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[858, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[859, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[859, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[859, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[859, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[859, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[859, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[859, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[859, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[859, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[859, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[859, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[860, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[860, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[860, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[860, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[860, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[860, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[860, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[860, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[860, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[860, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[860, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[861, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[861, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[861, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[861, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[861, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[861, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[861, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[861, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[861, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[862, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[862, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[862, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[862, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[862, "sklearn.preprocessing.Normalizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.normalizer method)": [[862, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[862, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[862, "sklearn.preprocessing.Normalizer.set_params"]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[862, "sklearn.preprocessing.Normalizer.set_transform_request"]], "transform() (sklearn.preprocessing.normalizer method)": [[862, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[863, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[863, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[863, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[863, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[863, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[863, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[863, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[863, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[863, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[863, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[863, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[864, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[864, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[864, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[864, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[864, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[864, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[864, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[864, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[864, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[864, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[864, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[865, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[865, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[865, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[865, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[865, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[865, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[865, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[865, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[865, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[865, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[866, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[866, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[866, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[866, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[866, "sklearn.preprocessing.PowerTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[866, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[866, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[866, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[866, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[866, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[867, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[867, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[867, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[867, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[867, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[867, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[867, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[867, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[867, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[868, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[868, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[868, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[868, "sklearn.preprocessing.RobustScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[868, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[868, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[868, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[868, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[868, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[869, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[869, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[869, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[869, "sklearn.preprocessing.SplineTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[869, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[869, "sklearn.preprocessing.SplineTransformer.set_fit_request"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[869, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[869, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[869, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.set_fit_request"]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.set_params"]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.set_transform_request"]], "transform() (sklearn.preprocessing.standardscaler method)": [[870, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[871, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[871, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[871, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[871, "sklearn.preprocessing.TargetEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[871, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[871, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[871, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[871, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[871, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[872, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[873, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[874, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[875, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[876, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[877, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[878, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[879, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[880, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[881, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[882, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[882, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[882, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[882, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[882, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[882, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[882, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[882, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[882, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[882, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[883, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[883, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[883, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[883, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[883, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[883, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[883, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[883, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[883, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[883, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[884, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[885, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[885, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[885, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[885, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[885, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[885, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[885, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[885, "sklearn.semi_supervised.LabelPropagation.set_params"]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[885, "sklearn.semi_supervised.LabelPropagation.set_score_request"]], "labelspreading (class in sklearn.semi_supervised)": [[886, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[886, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[886, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[886, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[886, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[886, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[886, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[886, "sklearn.semi_supervised.LabelSpreading.set_params"]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[886, "sklearn.semi_supervised.LabelSpreading.set_score_request"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[887, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[887, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[887, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[887, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[887, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[887, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[887, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[887, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[887, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[887, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[888, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[889, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[890, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[890, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[890, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[890, "sklearn.svm.LinearSVC.fit"]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[890, "sklearn.svm.LinearSVC.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvc method)": [[890, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[890, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[890, "sklearn.svm.LinearSVC.score"]], "set_fit_request() (sklearn.svm.linearsvc method)": [[890, "sklearn.svm.LinearSVC.set_fit_request"]], "set_params() (sklearn.svm.linearsvc method)": [[890, "sklearn.svm.LinearSVC.set_params"]], "set_score_request() (sklearn.svm.linearsvc method)": [[890, "sklearn.svm.LinearSVC.set_score_request"]], "sparsify() (sklearn.svm.linearsvc method)": [[890, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[891, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[891, "sklearn.svm.LinearSVR.fit"]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[891, "sklearn.svm.LinearSVR.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvr method)": [[891, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[891, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[891, "sklearn.svm.LinearSVR.score"]], "set_fit_request() (sklearn.svm.linearsvr method)": [[891, "sklearn.svm.LinearSVR.set_fit_request"]], "set_params() (sklearn.svm.linearsvr method)": [[891, "sklearn.svm.LinearSVR.set_params"]], "set_score_request() (sklearn.svm.linearsvr method)": [[891, "sklearn.svm.LinearSVR.set_score_request"]], "nusvc (class in sklearn.svm)": [[892, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[892, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[892, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[892, "sklearn.svm.NuSVC.fit"]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[892, "sklearn.svm.NuSVC.get_metadata_routing"]], "get_params() (sklearn.svm.nusvc method)": [[892, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[892, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[892, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[892, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[892, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[892, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[892, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[892, "sklearn.svm.NuSVC.score"]], "set_fit_request() (sklearn.svm.nusvc method)": [[892, "sklearn.svm.NuSVC.set_fit_request"]], "set_params() (sklearn.svm.nusvc method)": [[892, "sklearn.svm.NuSVC.set_params"]], "set_score_request() (sklearn.svm.nusvc method)": [[892, "sklearn.svm.NuSVC.set_score_request"]], "nusvr (class in sklearn.svm)": [[893, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[893, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[893, "sklearn.svm.NuSVR.fit"]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[893, "sklearn.svm.NuSVR.get_metadata_routing"]], "get_params() (sklearn.svm.nusvr method)": [[893, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[893, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[893, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[893, "sklearn.svm.NuSVR.score"]], "set_fit_request() (sklearn.svm.nusvr method)": [[893, "sklearn.svm.NuSVR.set_fit_request"]], "set_params() (sklearn.svm.nusvr method)": [[893, "sklearn.svm.NuSVR.set_params"]], "set_score_request() (sklearn.svm.nusvr method)": [[893, "sklearn.svm.NuSVR.set_score_request"]], "oneclasssvm (class in sklearn.svm)": [[894, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[894, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[894, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[894, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[894, "sklearn.svm.OneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[894, "sklearn.svm.OneClassSVM.get_metadata_routing"]], "get_params() (sklearn.svm.oneclasssvm method)": [[894, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[894, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[894, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[894, "sklearn.svm.OneClassSVM.score_samples"]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[894, "sklearn.svm.OneClassSVM.set_fit_request"]], "set_params() (sklearn.svm.oneclasssvm method)": [[894, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[895, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[895, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[895, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[895, "sklearn.svm.SVC.fit"]], "get_metadata_routing() (sklearn.svm.svc method)": [[895, "sklearn.svm.SVC.get_metadata_routing"]], "get_params() (sklearn.svm.svc method)": [[895, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[895, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[895, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[895, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[895, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[895, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[895, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[895, "sklearn.svm.SVC.score"]], "set_fit_request() (sklearn.svm.svc method)": [[895, "sklearn.svm.SVC.set_fit_request"]], "set_params() (sklearn.svm.svc method)": [[895, "sklearn.svm.SVC.set_params"]], "set_score_request() (sklearn.svm.svc method)": [[895, "sklearn.svm.SVC.set_score_request"]], "svr (class in sklearn.svm)": [[896, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[896, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[896, "sklearn.svm.SVR.fit"]], "get_metadata_routing() (sklearn.svm.svr method)": [[896, "sklearn.svm.SVR.get_metadata_routing"]], "get_params() (sklearn.svm.svr method)": [[896, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[896, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[896, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[896, "sklearn.svm.SVR.score"]], "set_fit_request() (sklearn.svm.svr method)": [[896, "sklearn.svm.SVR.set_fit_request"]], "set_params() (sklearn.svm.svr method)": [[896, "sklearn.svm.SVR.set_params"]], "set_score_request() (sklearn.svm.svr method)": [[896, "sklearn.svm.SVR.set_score_request"]], "l1_min_c() (in module sklearn.svm)": [[897, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[898, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[898, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[898, "sklearn.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sklearn.tree)": [[899, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[899, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[899, "sklearn.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sklearn.tree)": [[900, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[900, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[900, "sklearn.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sklearn.tree)": [[901, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[901, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[901, "sklearn.tree.ExtraTreeRegressor.set_score_request"]], "export_graphviz() (in module sklearn.tree)": [[902, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[903, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[904, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[905, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[905, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[905, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[905, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[905, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[905, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[905, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[905, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[905, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[905, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[905, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[905, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[906, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[907, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[908, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[909, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[910, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[911, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[912, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[913, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[914, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[915, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[916, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[917, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[918, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[919, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[920, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[921, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[922, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[923, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[924, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[925, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[926, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[927, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[928, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[929, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[930, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[931, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[932, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[933, "sklearn.utils.indexable"]], "metadatarequest() (in module sklearn.utils.metadata_routing)": [[934, "sklearn.utils.metadata_routing.MetadataRequest"]], "metadatarouter() (in module sklearn.utils.metadata_routing)": [[935, "sklearn.utils.metadata_routing.MetadataRouter"]], "methodmapping() (in module sklearn.utils.metadata_routing)": [[936, "sklearn.utils.metadata_routing.MethodMapping"]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[937, "sklearn.utils.metadata_routing.get_routing_for_object"]], "process_routing() (in module sklearn.utils.metadata_routing)": [[938, "sklearn.utils.metadata_routing.process_routing"]], "available_if() (in module sklearn.utils.metaestimators)": [[939, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[940, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[941, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[942, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[943, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[944, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[944, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[944, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[944, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[944, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[945, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[946, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[947, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[948, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[949, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[950, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[951, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[952, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[953, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[954, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[955, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[956, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[957, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[958, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[959, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[960, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[961, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[962, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[963, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[964, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[965, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[966, "sklearn.utils.validation.has_fit_parameter"]]}})