Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Plot Ridge coefficients as a function of the L2 regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross Validation", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensemble methods", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.0"], "terms": {"thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 357, 358, 359, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 416, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 467, 468, 469, 470, 472, 474, 475, 478, 481, 482, 483, 484, 486, 487, 488, 490, 493, 494, 500, 501, 502, 503, 504, 505, 506, 508, 509, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 684, 685, 686, 687, 688, 689, 691, 692, 694, 697, 698, 699, 701, 702, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 720, 721, 722, 723, 724, 725, 726, 727, 732, 738, 739, 740, 741, 742, 743, 745, 746, 747, 749, 752, 753, 758, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 795, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 903, 904, 909, 910, 912, 914, 915, 920, 922, 927, 929, 932, 933, 934, 936, 937, 940, 941, 950, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "wa": [0, 4, 8, 13, 16, 34, 40, 70, 71, 80, 86, 92, 126, 129, 158, 167, 173, 176, 222, 248, 251, 253, 255, 257, 263, 264, 295, 304, 309, 310, 314, 319, 320, 342, 344, 351, 353, 357, 366, 368, 369, 371, 375, 376, 384, 387, 390, 392, 393, 396, 399, 400, 404, 408, 425, 426, 430, 431, 435, 439, 442, 445, 454, 459, 500, 508, 520, 521, 523, 525, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 570, 571, 573, 575, 576, 587, 612, 615, 626, 635, 636, 639, 640, 641, 643, 649, 650, 670, 671, 698, 713, 714, 752, 767, 768, 771, 779, 780, 781, 784, 785, 795, 806, 808, 820, 830, 856, 857, 876, 880, 886, 887, 889, 914, 915, 933, 954, 955, 956, 965, 966, 969, 972, 976, 979, 982, 986, 992, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "start": [0, 4, 7, 10, 12, 26, 53, 58, 64, 67, 74, 86, 98, 109, 115, 120, 122, 143, 146, 154, 156, 168, 173, 177, 178, 186, 197, 198, 199, 205, 215, 218, 222, 231, 245, 257, 265, 277, 313, 318, 342, 351, 353, 357, 358, 359, 360, 364, 371, 372, 373, 375, 376, 377, 382, 384, 387, 393, 396, 400, 401, 405, 406, 408, 425, 427, 435, 439, 441, 518, 523, 595, 602, 617, 630, 638, 644, 651, 653, 661, 662, 663, 675, 679, 765, 766, 773, 779, 780, 781, 784, 785, 795, 825, 826, 827, 829, 831, 839, 925, 950, 955, 962, 965, 970, 971, 980, 987, 990, 992, 1000, 1001, 1011, 1013, 1016, 1018, 1020, 1021, 1022, 1023, 1024], "2007": [0, 38, 185, 366, 396, 405, 425, 437, 439, 445, 447, 551, 641, 676, 702, 718, 721, 742, 743, 777, 958, 962, 964, 966], "googl": [0, 17, 382, 396, 427, 985, 997, 1008], "summer": [0, 4, 48, 1008], "codedavid": [0, 2, 37, 57, 81, 176, 181, 199, 258, 260, 304, 342, 343, 344, 366, 396, 403, 406, 447, 517, 521, 552, 553, 607, 608, 613, 709, 779, 880, 956, 962, 970, 979, 990, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023], "cournapeau": [0, 2, 1008, 1011], "later": [0, 11, 34, 53, 115, 123, 149, 168, 173, 176, 290, 344, 353, 377, 382, 383, 387, 390, 829, 852, 853, 861, 863, 976, 996, 1001, 1011, 1014, 1016, 1020], "year": [0, 4, 132, 146, 154, 166, 167, 168, 197, 198, 215, 343, 368, 370, 382, 400, 404, 406, 783, 788, 790, 862, 962, 966, 987, 990, 999], "matthieu": [0, 2, 1008, 1012, 1023], "brucher": [0, 2, 1008], "work": [0, 4, 9, 17, 32, 44, 45, 48, 52, 67, 78, 113, 119, 132, 146, 155, 156, 166, 167, 168, 186, 214, 242, 244, 255, 283, 284, 305, 310, 312, 313, 331, 343, 344, 353, 358, 359, 360, 365, 366, 369, 371, 372, 373, 374, 375, 376, 377, 379, 383, 384, 385, 387, 392, 393, 394, 396, 397, 398, 401, 403, 404, 405, 408, 409, 410, 411, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 445, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 493, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 680, 693, 726, 758, 762, 763, 764, 765, 772, 779, 780, 781, 784, 785, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 871, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 920, 924, 955, 956, 958, 960, 961, 962, 963, 965, 966, 968, 969, 972, 973, 976, 979, 980, 986, 987, 990, 992, 993, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "part": [0, 31, 36, 61, 68, 71, 82, 113, 118, 122, 127, 135, 136, 137, 138, 143, 154, 164, 176, 245, 252, 254, 271, 293, 301, 304, 306, 344, 359, 366, 368, 371, 373, 377, 379, 383, 384, 387, 394, 396, 400, 401, 403, 404, 406, 431, 434, 478, 479, 480, 506, 516, 522, 527, 559, 569, 570, 571, 598, 610, 775, 848, 866, 868, 869, 870, 871, 872, 873, 874, 955, 956, 958, 963, 967, 985, 986, 987, 988, 990, 994, 1001, 1003, 1008, 1016, 1017, 1019, 1021, 1023], "hi": [0, 397, 966, 1001], "thesi": [0, 368, 396, 403], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 37, 39, 48, 49, 53, 55, 57, 58, 60, 66, 67, 71, 72, 74, 75, 78, 80, 81, 82, 86, 89, 95, 97, 100, 103, 104, 109, 113, 115, 116, 117, 118, 119, 122, 124, 125, 126, 127, 129, 132, 142, 143, 145, 146, 149, 153, 154, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 181, 185, 186, 188, 192, 197, 198, 199, 200, 201, 202, 205, 214, 215, 226, 227, 228, 229, 231, 232, 233, 236, 237, 238, 239, 245, 247, 251, 253, 254, 255, 257, 258, 259, 260, 262, 263, 266, 267, 269, 271, 272, 275, 277, 283, 284, 286, 296, 299, 300, 301, 302, 304, 305, 306, 309, 310, 311, 313, 314, 319, 321, 329, 337, 342, 343, 344, 347, 351, 353, 357, 358, 359, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 422, 425, 426, 427, 428, 429, 432, 433, 434, 437, 447, 448, 449, 454, 457, 460, 478, 481, 488, 493, 494, 496, 508, 519, 521, 523, 525, 526, 527, 529, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 573, 576, 587, 591, 594, 595, 596, 615, 617, 618, 619, 621, 628, 629, 630, 632, 633, 634, 636, 638, 640, 643, 644, 646, 648, 650, 651, 653, 654, 659, 660, 661, 664, 665, 669, 670, 671, 681, 684, 688, 697, 703, 705, 710, 712, 713, 718, 719, 722, 724, 726, 738, 740, 741, 765, 767, 769, 772, 776, 778, 779, 780, 781, 784, 785, 787, 795, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 825, 826, 827, 829, 830, 831, 833, 834, 835, 840, 848, 850, 856, 857, 861, 862, 864, 868, 869, 871, 872, 873, 874, 875, 876, 878, 879, 880, 883, 884, 885, 888, 891, 893, 898, 902, 904, 920, 934, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 976, 977, 978, 979, 980, 981, 982, 987, 989, 990, 992, 999, 1000, 1001, 1005, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "2010": [0, 47, 67, 79, 168, 262, 263, 393, 396, 398, 400, 401, 409, 460, 521, 689, 693, 704, 705, 724, 808, 840, 841, 958, 962, 966, 970, 980, 985, 1008], "fabian": [0, 2, 184, 202, 219, 289, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1017], "pedregosa": [0, 2, 184, 202, 219, 289, 1008, 1009, 1010, 1011, 1012, 1014], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 66, 67, 82, 97, 101, 186, 187, 219, 231, 244, 985, 987, 990, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 66, 67, 73, 82, 89, 90, 97, 101, 102, 180, 186, 187, 194, 195, 219, 221, 229, 231, 244, 301, 333, 334, 385, 985, 990, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 182, 184, 185, 186, 188, 190, 191, 226, 229, 263, 270, 289, 385, 990, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 182, 184, 185, 186, 188, 190, 191, 226, 229, 263, 270, 289, 385, 990, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "vincent": [0, 2, 47, 67, 152, 156, 990, 1008, 1010, 1012, 1013, 1015, 1018, 1023, 1024], "michel": [0, 2, 47, 67, 1008, 1010, 1011, 1013, 1015, 1022, 1023], "inria": [0, 5, 9, 30, 37, 52, 54, 57, 75, 82, 155, 176, 181, 182, 184, 188, 190, 191, 202, 219, 220, 226, 229, 258, 260, 263, 270, 289, 304, 337, 342, 343, 344, 643, 984, 1008], "took": [0, 42, 265], "leadership": 0, "made": [0, 70, 81, 89, 100, 132, 156, 167, 168, 197, 215, 248, 261, 305, 310, 329, 348, 357, 366, 368, 371, 375, 384, 385, 396, 403, 404, 408, 428, 431, 432, 434, 444, 481, 488, 573, 574, 576, 615, 616, 641, 650, 670, 671, 719, 767, 781, 784, 785, 795, 799, 800, 801, 820, 823, 824, 967, 972, 982, 986, 990, 998, 1000, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1021, 1022], "first": [0, 4, 5, 7, 8, 11, 17, 25, 26, 30, 31, 32, 39, 55, 56, 58, 61, 64, 65, 66, 67, 70, 71, 72, 75, 80, 85, 86, 89, 90, 91, 100, 104, 111, 115, 116, 117, 118, 119, 121, 123, 126, 129, 130, 131, 132, 142, 143, 146, 149, 150, 151, 154, 155, 156, 157, 162, 166, 167, 168, 170, 173, 176, 178, 180, 186, 193, 194, 195, 198, 199, 205, 206, 211, 219, 222, 230, 231, 233, 234, 236, 238, 239, 244, 248, 252, 257, 259, 260, 264, 266, 268, 269, 275, 277, 279, 280, 282, 286, 287, 288, 293, 295, 299, 301, 304, 305, 306, 310, 311, 318, 321, 325, 326, 329, 331, 342, 343, 344, 347, 348, 351, 353, 358, 359, 365, 366, 368, 369, 370, 373, 375, 376, 377, 379, 382, 384, 393, 394, 396, 399, 400, 401, 403, 404, 405, 406, 408, 428, 431, 432, 435, 444, 445, 449, 457, 468, 472, 473, 475, 476, 477, 479, 482, 485, 487, 489, 493, 494, 495, 513, 518, 519, 523, 526, 538, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 567, 569, 573, 574, 575, 576, 578, 595, 596, 602, 606, 609, 616, 617, 618, 619, 631, 637, 644, 651, 653, 659, 661, 673, 680, 683, 684, 685, 687, 697, 701, 720, 747, 748, 766, 776, 779, 780, 784, 785, 786, 788, 793, 795, 802, 811, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 828, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 848, 856, 860, 861, 862, 865, 872, 873, 885, 888, 891, 892, 893, 894, 896, 898, 903, 904, 905, 922, 924, 933, 937, 940, 952, 955, 956, 960, 961, 962, 963, 965, 966, 967, 968, 969, 973, 976, 977, 980, 981, 982, 990, 992, 998, 999, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023], "public": [0, 79, 365, 371, 373, 375, 376, 382, 383, 384, 385, 400, 403, 453, 649, 656, 670, 671, 677, 881, 962, 970, 1008, 1013, 1014, 1019, 1020, 1021, 1024], "releas": [0, 34, 315, 358, 360, 369, 371, 372, 374, 379, 382, 384, 404, 428, 432, 449, 452, 475, 476, 481, 486, 489, 497, 500, 509, 523, 546, 547, 549, 550, 552, 584, 587, 613, 615, 617, 619, 625, 631, 633, 637, 643, 654, 665, 673, 686, 687, 702, 732, 772, 781, 784, 785, 787, 795, 809, 825, 827, 844, 848, 853, 856, 857, 858, 862, 863, 880, 881, 883, 888, 892, 915, 934, 982, 984, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "februari": [0, 398, 458, 966, 1009, 1013], "1st": [0, 4, 60, 90, 157, 198, 304, 861, 862], "sinc": [0, 4, 5, 11, 25, 27, 37, 49, 53, 55, 66, 70, 71, 72, 96, 119, 135, 143, 146, 149, 154, 167, 168, 173, 179, 197, 199, 214, 227, 231, 232, 244, 247, 253, 257, 259, 260, 266, 267, 277, 279, 305, 312, 313, 322, 326, 329, 337, 342, 343, 344, 353, 358, 366, 369, 371, 372, 373, 375, 376, 379, 382, 383, 384, 387, 394, 396, 397, 398, 399, 400, 401, 403, 404, 406, 408, 413, 422, 426, 430, 431, 432, 434, 435, 438, 441, 454, 463, 481, 511, 518, 521, 522, 523, 524, 525, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 549, 552, 554, 573, 574, 576, 595, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 623, 629, 630, 635, 636, 639, 640, 641, 643, 644, 649, 650, 651, 653, 656, 659, 660, 661, 664, 677, 692, 694, 719, 725, 752, 773, 784, 785, 811, 812, 813, 814, 818, 819, 820, 821, 822, 825, 830, 833, 840, 841, 848, 856, 873, 874, 878, 879, 883, 885, 886, 887, 888, 889, 891, 893, 914, 917, 920, 955, 958, 959, 960, 962, 963, 967, 968, 969, 970, 972, 974, 976, 980, 981, 982, 990, 992, 1001, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "sever": [0, 4, 9, 12, 25, 31, 37, 55, 56, 57, 61, 74, 91, 113, 120, 127, 129, 132, 143, 149, 154, 155, 164, 167, 173, 181, 186, 197, 217, 218, 224, 230, 244, 252, 257, 262, 279, 294, 299, 312, 342, 343, 357, 365, 366, 368, 371, 373, 376, 382, 384, 393, 395, 396, 397, 400, 402, 403, 404, 406, 432, 434, 449, 472, 484, 493, 494, 523, 540, 541, 544, 545, 548, 549, 550, 555, 573, 574, 576, 595, 630, 631, 637, 673, 674, 675, 676, 677, 678, 779, 780, 781, 784, 785, 795, 811, 812, 818, 819, 820, 821, 822, 842, 843, 850, 867, 891, 892, 893, 894, 906, 934, 955, 958, 963, 966, 967, 969, 974, 976, 980, 982, 983, 985, 986, 989, 990, 992, 999, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1021, 1024], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 43, 45, 46, 47, 50, 53, 55, 57, 60, 62, 64, 65, 70, 71, 78, 80, 86, 89, 91, 92, 100, 102, 110, 116, 118, 119, 120, 122, 142, 143, 146, 149, 150, 154, 155, 156, 162, 166, 167, 168, 169, 170, 173, 176, 181, 197, 198, 199, 215, 222, 226, 228, 233, 235, 236, 243, 244, 245, 247, 251, 257, 258, 260, 263, 264, 271, 277, 279, 283, 284, 299, 304, 305, 306, 309, 311, 312, 318, 319, 320, 326, 332, 334, 342, 343, 351, 353, 357, 358, 359, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 387, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 472, 477, 479, 480, 481, 493, 494, 499, 508, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 670, 672, 673, 674, 675, 676, 677, 684, 689, 690, 697, 700, 705, 710, 715, 720, 726, 740, 741, 742, 743, 766, 769, 770, 774, 777, 779, 780, 781, 784, 785, 786, 787, 792, 795, 799, 804, 807, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 871, 872, 873, 874, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 903, 905, 907, 909, 920, 941, 955, 956, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 986, 987, 990, 992, 993, 996, 997, 999, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "appear": [0, 8, 46, 48, 113, 167, 252, 254, 255, 283, 284, 293, 295, 300, 318, 342, 343, 344, 366, 369, 371, 376, 384, 398, 401, 473, 474, 540, 552, 553, 564, 595, 612, 613, 615, 682, 685, 687, 697, 701, 703, 766, 773, 782, 799, 818, 819, 820, 821, 822, 885, 888, 922, 962, 968, 972, 1008, 1016, 1020, 1021], "follow": [0, 4, 7, 19, 26, 32, 37, 45, 54, 55, 57, 63, 67, 71, 72, 92, 95, 105, 110, 113, 122, 126, 141, 154, 161, 166, 167, 168, 169, 176, 178, 181, 185, 186, 195, 197, 198, 212, 215, 227, 233, 235, 248, 257, 266, 267, 299, 305, 306, 309, 310, 312, 313, 314, 326, 337, 342, 343, 344, 347, 351, 353, 357, 358, 365, 366, 368, 369, 370, 371, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 387, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 416, 418, 426, 428, 430, 431, 432, 433, 434, 438, 446, 448, 449, 450, 453, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 500, 519, 523, 525, 526, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 616, 618, 619, 631, 637, 643, 644, 655, 656, 665, 677, 679, 684, 690, 694, 698, 703, 800, 820, 825, 826, 827, 829, 831, 833, 834, 835, 842, 846, 847, 848, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 872, 881, 883, 884, 891, 892, 893, 894, 898, 899, 919, 934, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 985, 986, 987, 992, 1001, 1005, 1008, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 141, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 169, 173, 175, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 223, 226, 230, 231, 232, 233, 235, 236, 237, 239, 242, 243, 244, 246, 247, 248, 252, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 270, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 309, 310, 311, 312, 313, 314, 317, 318, 320, 321, 322, 325, 326, 328, 329, 332, 333, 334, 335, 336, 337, 338, 342, 343, 344, 348, 349, 351, 353, 358, 359, 365, 366, 368, 369, 371, 372, 373, 376, 377, 382, 383, 384, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 412, 419, 422, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 444, 445, 447, 449, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 467, 468, 469, 470, 478, 479, 481, 482, 489, 490, 491, 492, 495, 497, 501, 502, 503, 504, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 562, 566, 568, 569, 572, 578, 579, 587, 588, 592, 593, 595, 596, 597, 602, 612, 613, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 677, 678, 679, 684, 685, 687, 688, 689, 690, 692, 694, 698, 701, 702, 706, 707, 708, 710, 712, 713, 714, 715, 718, 719, 720, 721, 725, 727, 728, 729, 730, 732, 734, 735, 736, 737, 738, 740, 741, 752, 753, 759, 765, 766, 767, 768, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 847, 848, 849, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 871, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 909, 914, 918, 919, 920, 922, 923, 924, 925, 929, 930, 932, 933, 934, 940, 955, 956, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 972, 973, 976, 977, 979, 981, 982, 984, 985, 989, 992, 993, 996, 997, 999, 1000, 1004, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1018, 1020, 1021, 1023], "month": [0, 4, 154, 168, 305, 366, 371, 375, 385, 1008], "cycl": [0, 4, 42, 44, 50, 62, 95, 182, 243, 248, 264, 266, 312, 313, 371, 375, 395, 401, 564, 565, 612, 784, 785, 899, 955, 956, 1016, 1017, 1018, 1020, 1021, 1022, 1023], "thrive": [0, 371], "intern": [0, 26, 71, 82, 100, 123, 135, 150, 161, 164, 197, 277, 279, 298, 307, 319, 344, 353, 358, 366, 368, 373, 377, 380, 382, 384, 390, 393, 396, 400, 401, 403, 404, 406, 407, 422, 424, 429, 450, 453, 496, 519, 520, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 578, 579, 595, 596, 623, 625, 628, 631, 637, 653, 657, 661, 663, 681, 693, 715, 718, 742, 743, 767, 809, 823, 824, 839, 840, 841, 843, 844, 848, 862, 864, 878, 879, 881, 883, 884, 885, 888, 891, 892, 893, 894, 934, 962, 963, 964, 966, 969, 972, 976, 978, 981, 982, 990, 1008, 1011, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 56, 57, 60, 74, 80, 81, 86, 95, 115, 118, 120, 122, 126, 131, 145, 149, 154, 155, 156, 162, 167, 168, 169, 173, 190, 194, 197, 198, 199, 203, 214, 215, 218, 226, 230, 232, 236, 239, 242, 243, 245, 247, 248, 252, 255, 256, 257, 260, 261, 263, 268, 269, 275, 283, 284, 285, 287, 295, 299, 300, 302, 304, 309, 310, 311, 312, 313, 317, 320, 329, 334, 336, 342, 351, 353, 357, 358, 359, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 379, 380, 382, 383, 384, 385, 387, 390, 393, 394, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 408, 419, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 478, 479, 482, 483, 493, 494, 501, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 604, 612, 613, 614, 615, 617, 618, 619, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 670, 672, 673, 674, 675, 676, 677, 680, 696, 698, 705, 725, 747, 758, 762, 763, 764, 775, 779, 780, 781, 782, 784, 785, 786, 787, 788, 795, 799, 802, 807, 808, 811, 812, 814, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 843, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 898, 902, 903, 904, 922, 935, 951, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 976, 978, 979, 980, 981, 982, 987, 990, 992, 996, 999, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "been": [0, 4, 9, 16, 26, 44, 53, 60, 81, 100, 146, 149, 154, 156, 167, 222, 226, 228, 233, 255, 257, 263, 309, 310, 311, 312, 313, 319, 342, 353, 358, 365, 366, 368, 369, 370, 371, 373, 375, 377, 379, 380, 382, 383, 384, 385, 390, 393, 394, 396, 398, 400, 401, 403, 406, 419, 422, 454, 456, 457, 459, 463, 472, 508, 519, 521, 534, 535, 552, 553, 566, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 596, 618, 619, 643, 644, 651, 653, 658, 660, 661, 662, 663, 705, 762, 763, 764, 775, 781, 784, 785, 787, 795, 807, 808, 832, 880, 883, 956, 958, 959, 961, 962, 963, 966, 967, 969, 972, 976, 978, 980, 981, 987, 990, 992, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "lead": [0, 7, 25, 31, 37, 52, 55, 61, 72, 119, 122, 145, 146, 167, 168, 169, 176, 181, 186, 188, 197, 201, 231, 257, 258, 260, 264, 282, 283, 295, 299, 301, 304, 305, 311, 329, 343, 347, 353, 357, 358, 365, 370, 379, 380, 383, 384, 390, 393, 394, 396, 398, 400, 401, 402, 403, 405, 437, 447, 450, 453, 481, 500, 512, 520, 523, 524, 525, 528, 532, 536, 542, 543, 544, 545, 548, 549, 550, 551, 591, 615, 631, 632, 635, 637, 638, 639, 645, 646, 647, 648, 664, 676, 680, 730, 779, 784, 785, 811, 823, 824, 828, 847, 854, 864, 875, 876, 881, 883, 891, 892, 893, 894, 955, 960, 962, 963, 965, 966, 967, 969, 970, 972, 974, 976, 979, 980, 982, 990, 992, 1011, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 27, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 88, 91, 92, 93, 95, 98, 100, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 132, 141, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 168, 169, 170, 173, 176, 178, 179, 180, 181, 182, 185, 186, 188, 189, 190, 191, 192, 193, 195, 198, 199, 200, 201, 203, 205, 206, 214, 215, 217, 221, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 244, 245, 247, 248, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 275, 277, 279, 282, 283, 284, 285, 286, 287, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 319, 320, 326, 327, 329, 333, 334, 335, 337, 338, 339, 342, 343, 344, 347, 349, 350, 351, 353, 357, 358, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 417, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 700, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 736, 737, 738, 739, 740, 741, 742, 743, 746, 748, 749, 750, 751, 754, 755, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 914, 915, 916, 917, 918, 919, 920, 922, 923, 929, 931, 932, 933, 934, 935, 936, 937, 940, 950, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 979, 980, 981, 982, 983, 985, 986, 987, 989, 990, 992, 993, 994, 996, 997, 998, 1001, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "decis": [0, 4, 16, 25, 27, 31, 34, 56, 58, 60, 108, 109, 112, 113, 115, 127, 133, 153, 167, 179, 180, 189, 206, 207, 210, 211, 226, 227, 229, 236, 260, 280, 285, 288, 293, 299, 300, 301, 304, 316, 323, 325, 326, 327, 328, 329, 330, 331, 335, 338, 339, 342, 352, 357, 360, 367, 368, 371, 384, 394, 396, 403, 422, 454, 485, 489, 504, 521, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 578, 579, 616, 617, 618, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 683, 685, 687, 688, 692, 705, 710, 711, 719, 723, 724, 726, 740, 766, 772, 773, 776, 781, 784, 785, 795, 809, 811, 812, 814, 825, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 960, 966, 967, 968, 969, 970, 972, 973, 974, 979, 980, 981, 984, 986, 987, 988, 990, 999, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1021, 1022, 1024], "make": [0, 4, 7, 8, 11, 14, 17, 21, 25, 26, 27, 39, 40, 43, 44, 56, 61, 62, 67, 73, 100, 119, 122, 127, 143, 146, 149, 154, 157, 166, 167, 168, 169, 176, 181, 183, 186, 189, 190, 191, 193, 197, 198, 199, 203, 215, 219, 228, 230, 232, 233, 242, 244, 247, 248, 252, 257, 259, 260, 266, 267, 268, 286, 295, 299, 300, 305, 313, 329, 339, 342, 343, 344, 353, 357, 358, 359, 360, 365, 366, 369, 370, 372, 373, 374, 376, 377, 379, 382, 384, 387, 390, 393, 394, 396, 397, 398, 400, 401, 403, 404, 405, 406, 408, 425, 426, 427, 428, 430, 432, 434, 436, 437, 438, 443, 444, 445, 447, 473, 488, 499, 500, 507, 508, 512, 517, 519, 526, 536, 537, 540, 541, 568, 569, 592, 593, 616, 634, 640, 641, 656, 676, 680, 714, 721, 726, 752, 753, 765, 779, 780, 781, 783, 786, 792, 796, 797, 798, 800, 801, 805, 806, 813, 814, 817, 850, 859, 862, 863, 867, 871, 873, 874, 875, 876, 889, 897, 903, 904, 914, 920, 926, 927, 952, 955, 956, 958, 960, 962, 963, 965, 966, 967, 968, 969, 971, 972, 973, 974, 976, 979, 980, 981, 982, 984, 985, 986, 987, 989, 990, 992, 997, 999, 1001, 1005, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "process": [0, 4, 5, 19, 26, 30, 31, 45, 46, 47, 48, 50, 66, 70, 72, 74, 79, 81, 96, 97, 99, 119, 126, 135, 136, 137, 138, 159, 166, 176, 199, 233, 242, 243, 248, 257, 259, 260, 269, 299, 311, 318, 343, 344, 347, 357, 358, 359, 360, 366, 370, 371, 373, 375, 377, 380, 382, 383, 384, 390, 396, 397, 398, 400, 401, 402, 403, 404, 405, 409, 433, 434, 460, 481, 489, 508, 519, 520, 521, 522, 523, 546, 547, 548, 573, 574, 576, 595, 596, 598, 599, 600, 602, 603, 604, 607, 608, 610, 612, 617, 618, 624, 628, 649, 657, 670, 671, 688, 707, 725, 765, 779, 781, 784, 785, 795, 804, 805, 806, 815, 816, 832, 846, 850, 852, 853, 854, 863, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 932, 934, 955, 958, 962, 966, 969, 976, 978, 980, 982, 984, 985, 986, 987, 988, 990, 992, 993, 1000, 1001, 1003, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 43, 44, 55, 68, 82, 106, 125, 148, 159, 164, 218, 222, 228, 248, 252, 263, 282, 304, 310, 313, 316, 323, 329, 346, 348, 352, 357, 366, 368, 371, 373, 376, 382, 384, 385, 387, 393, 396, 398, 399, 400, 401, 403, 404, 405, 406, 426, 427, 430, 431, 435, 436, 437, 438, 439, 442, 447, 448, 457, 481, 488, 489, 493, 496, 498, 499, 506, 515, 520, 526, 529, 548, 595, 596, 597, 601, 602, 603, 674, 681, 694, 698, 809, 831, 836, 863, 875, 876, 879, 891, 892, 893, 894, 897, 919, 920, 937, 940, 963, 965, 966, 969, 971, 972, 976, 979, 982, 986, 987, 995, 1000, 1001, 1008, 1009, 1011, 1012, 1014, 1018], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 286, 287, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 327, 328, 329, 334, 335, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 383, 384, 385, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 754, 755, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 918, 919, 920, 922, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 947, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "laid": [0, 166, 371], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 55, 70, 71, 103, 108, 114, 116, 123, 133, 138, 164, 166, 169, 181, 197, 199, 205, 215, 242, 244, 255, 257, 260, 265, 269, 275, 304, 305, 312, 320, 322, 325, 326, 329, 342, 356, 366, 368, 369, 371, 373, 374, 375, 377, 382, 384, 396, 399, 401, 403, 406, 412, 420, 421, 427, 428, 430, 431, 432, 434, 457, 467, 468, 469, 470, 484, 500, 501, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 573, 574, 576, 589, 592, 593, 619, 624, 625, 626, 627, 636, 640, 651, 653, 658, 660, 661, 673, 674, 677, 686, 711, 725, 726, 781, 783, 784, 785, 786, 788, 789, 790, 791, 795, 809, 818, 819, 820, 821, 822, 827, 832, 835, 839, 840, 841, 849, 853, 860, 872, 875, 876, 898, 928, 930, 935, 956, 960, 961, 965, 966, 967, 969, 974, 976, 987, 988, 989, 990, 996, 999, 1001, 1003, 1008, 1010, 1012, 1014, 1016, 1017, 1020, 1021, 1024], "document": [0, 3, 14, 15, 18, 22, 31, 45, 51, 57, 71, 73, 89, 90, 92, 95, 126, 178, 180, 194, 195, 212, 230, 233, 258, 295, 321, 334, 344, 345, 357, 358, 359, 360, 365, 366, 367, 369, 370, 372, 373, 374, 375, 376, 377, 379, 382, 384, 385, 387, 390, 393, 395, 396, 401, 404, 407, 429, 432, 433, 434, 435, 438, 442, 449, 473, 474, 484, 486, 496, 506, 508, 521, 529, 549, 573, 574, 575, 576, 579, 589, 616, 624, 628, 643, 644, 651, 653, 658, 659, 660, 661, 681, 682, 688, 690, 696, 702, 721, 742, 743, 753, 762, 763, 764, 775, 777, 781, 784, 785, 795, 805, 807, 810, 813, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 844, 855, 883, 888, 899, 902, 904, 917, 932, 955, 962, 964, 966, 967, 968, 969, 970, 974, 980, 983, 984, 985, 990, 994, 999, 1001, 1009, 1010, 1014], "peopl": [0, 6, 70, 167, 234, 260, 342, 343, 358, 359, 366, 368, 370, 371, 375, 385, 402, 478, 479, 626, 820, 986, 997], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 32, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 92, 95, 97, 100, 103, 106, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 142, 143, 145, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 185, 186, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 206, 208, 215, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 239, 243, 244, 245, 247, 251, 252, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 275, 277, 279, 282, 283, 287, 290, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 313, 314, 317, 319, 320, 321, 322, 327, 329, 331, 333, 337, 338, 342, 343, 344, 347, 351, 353, 357, 358, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 416, 418, 419, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 473, 474, 478, 480, 481, 483, 485, 486, 487, 488, 489, 493, 494, 495, 497, 500, 501, 502, 503, 504, 505, 508, 509, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 689, 690, 692, 694, 697, 698, 700, 701, 702, 703, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 724, 725, 727, 729, 730, 732, 734, 735, 737, 738, 740, 741, 745, 746, 747, 749, 751, 752, 753, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 784, 785, 787, 788, 793, 795, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 907, 908, 909, 912, 914, 919, 920, 921, 924, 925, 929, 930, 932, 934, 937, 940, 941, 945, 946, 947, 950, 952, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 989, 990, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "current": [0, 8, 46, 154, 167, 215, 299, 309, 358, 359, 366, 369, 371, 372, 373, 376, 380, 382, 384, 385, 392, 393, 395, 396, 400, 403, 404, 405, 406, 425, 431, 435, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 517, 520, 526, 538, 539, 542, 543, 544, 545, 547, 549, 550, 551, 561, 576, 578, 595, 602, 611, 612, 631, 643, 652, 656, 660, 661, 662, 663, 772, 779, 780, 828, 832, 840, 841, 859, 871, 881, 891, 892, 893, 894, 897, 933, 941, 955, 960, 962, 966, 969, 970, 976, 987, 999, 1016, 1020, 1022, 1023, 1024], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 24, 27, 30, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 67, 70, 71, 78, 79, 82, 85, 90, 91, 92, 95, 96, 97, 100, 101, 104, 105, 106, 109, 110, 112, 116, 118, 119, 121, 122, 123, 125, 126, 127, 128, 130, 138, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 164, 167, 168, 170, 173, 177, 178, 179, 181, 183, 185, 186, 187, 188, 189, 195, 197, 199, 203, 204, 206, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 226, 227, 230, 232, 233, 235, 242, 244, 245, 247, 252, 257, 258, 259, 260, 261, 264, 268, 270, 271, 277, 280, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 296, 298, 299, 302, 305, 307, 309, 311, 312, 313, 314, 318, 319, 326, 327, 328, 329, 330, 333, 334, 335, 336, 339, 342, 343, 344, 348, 349, 350, 351, 353, 357, 358, 359, 360, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 384, 385, 386, 387, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 406, 408, 410, 416, 419, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 444, 445, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 474, 481, 483, 485, 489, 495, 496, 504, 510, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 557, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 670, 672, 673, 674, 675, 676, 677, 678, 685, 686, 687, 693, 696, 701, 705, 719, 725, 726, 742, 743, 763, 764, 779, 780, 781, 783, 784, 785, 790, 795, 799, 800, 805, 806, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 898, 901, 903, 904, 907, 920, 922, 950, 954, 955, 957, 958, 960, 962, 963, 964, 967, 968, 969, 970, 971, 973, 974, 976, 978, 979, 980, 981, 982, 986, 987, 990, 992, 996, 997, 999, 1000, 1001, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "mainten": [0, 371, 379, 382, 387, 389, 962, 987, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "j\u00e9r\u00e9mie": [0, 1, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "du": [0, 1, 2, 1008, 1009, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "boisberrang": [0, 1, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "jori": [0, 1, 1015, 1016, 1017, 1020, 1021], "van": [0, 1, 365, 398, 454, 459, 519, 612, 677, 681, 956, 963, 966, 972, 990, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1024], "den": [0, 1, 1009, 1010, 1015, 1016, 1017, 1020, 1021], "bossch": [0, 1, 1015, 1016, 1017, 1021], "lo\u00efc": [0, 1, 1016, 1019, 1021, 1022, 1023], "est\u00e8v": [0, 1, 1016, 1019, 1021, 1022, 1023], "thoma": [0, 1, 103, 226, 299, 358, 361, 385, 879, 962, 976, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "j": [0, 1, 11, 17, 37, 38, 40, 43, 61, 70, 79, 80, 81, 109, 113, 114, 124, 150, 162, 168, 209, 221, 234, 242, 256, 257, 262, 268, 281, 287, 290, 303, 314, 351, 358, 365, 366, 368, 375, 377, 382, 393, 394, 396, 398, 400, 401, 403, 404, 406, 407, 422, 425, 429, 431, 438, 439, 454, 459, 483, 498, 501, 502, 503, 505, 513, 516, 519, 521, 522, 523, 525, 526, 532, 544, 545, 578, 579, 617, 618, 622, 629, 630, 633, 634, 651, 652, 654, 665, 673, 674, 675, 677, 678, 679, 681, 690, 693, 695, 699, 701, 703, 706, 707, 708, 710, 739, 740, 742, 743, 758, 762, 772, 773, 774, 775, 812, 813, 820, 825, 826, 827, 829, 831, 832, 833, 834, 835, 836, 837, 854, 863, 891, 892, 955, 956, 960, 962, 963, 964, 966, 967, 968, 969, 970, 972, 973, 974, 976, 978, 980, 981, 982, 984, 1001, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "fan": [0, 1, 358, 385, 981, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "olivi": [0, 1, 14, 17, 37, 48, 61, 186, 197, 215, 219, 258, 260, 342, 343, 344, 385, 879, 979, 985, 987, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "grisel": [0, 1, 14, 17, 37, 48, 61, 186, 197, 215, 219, 258, 260, 342, 343, 344, 385, 985, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "yaroslav": [0, 1, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017], "halchenko": [0, 1, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017], "tim": [0, 1, 115, 128, 1008, 1013, 1014, 1017, 1018, 1019, 1021, 1023, 1024], "head": [0, 1, 26, 71, 115, 128, 154, 167, 185, 186, 215, 239, 247, 305, 309, 314, 371, 379, 401, 990, 1013, 1014, 1023, 1024], "nicola": [0, 1, 146, 303, 643, 962, 979, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "hug": [0, 1, 146, 303, 984, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "adrin": [0, 1, 65, 338, 385, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "jalali": [0, 1, 65, 338, 385, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "julien": [0, 1, 643, 962, 990, 1008, 1011, 1015, 1016, 1020, 1021, 1022, 1023, 1024], "jerphanion": [0, 1, 1020, 1021, 1022, 1023, 1024], "guillaum": [0, 1, 5, 7, 72, 75, 100, 129, 149, 154, 155, 156, 158, 185, 186, 199, 219, 299, 990, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "lemaitr": [0, 1, 5, 7, 72, 75, 100, 129, 149, 154, 155, 156, 158, 185, 186, 199, 219, 299, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "christian": [0, 1, 19, 197, 198, 199, 215, 342, 366, 990, 1001, 1008, 1009, 1012, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "lorentzen": [0, 1, 197, 198, 199, 215, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "jan": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 198, 232, 862, 1008, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1024], "hendrik": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 232, 1008, 1011, 1012, 1013, 1014], "metzen": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 232, 1008, 1011, 1012, 1013, 1014], "andrea": [0, 1, 31, 74, 100, 114, 188, 231, 300, 301, 319, 337, 338, 385, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "mueller": [0, 1, 74, 100, 114, 188, 231, 319, 337, 338, 990, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "vlad": [0, 1, 95, 233, 296, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017], "nicula": [0, 1, 95, 233, 296, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017], "joel": [0, 1, 72, 385, 404, 520, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "nothman": [0, 1, 72, 385, 404, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "hanmin": [0, 1, 300, 1015, 1016, 1017, 1018, 1019], "qin": [0, 1, 300, 368, 404, 1015, 1016, 1017, 1018, 1019], "bertrand": [0, 1, 1008, 1014, 1015, 1020, 1021], "thirion": [0, 1, 1008, 1014, 1015, 1021], "tom": [0, 1, 189, 205, 277, 279, 301, 302, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "dupr\u00e9": [0, 1, 301, 302, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "la": [0, 1, 189, 205, 277, 279, 301, 302, 305, 368, 990, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "tour": [0, 1, 189, 205, 277, 279, 301, 302, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "nell": [0, 1, 39, 221, 229, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1020], "roman": [0, 1, 197, 215, 612, 897, 1010, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "yurchak": [0, 1, 197, 215, 404, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "meekail": [0, 1, 1022, 1023, 1024], "zain": [0, 1, 1022, 1023, 1024], "pleas": [0, 12, 17, 26, 71, 72, 109, 115, 116, 117, 123, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 201, 227, 228, 229, 231, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 277, 287, 296, 305, 309, 310, 311, 312, 313, 314, 319, 351, 358, 365, 366, 369, 371, 372, 373, 375, 379, 382, 383, 384, 387, 390, 392, 395, 396, 403, 404, 431, 435, 481, 552, 553, 616, 617, 618, 635, 636, 639, 640, 641, 649, 650, 784, 785, 806, 860, 872, 885, 888, 891, 892, 893, 894, 955, 966, 970, 976, 980, 981, 986, 987, 989, 992, 999, 1001, 1008, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "do": [0, 4, 10, 25, 42, 55, 61, 67, 74, 90, 99, 101, 102, 105, 114, 116, 118, 120, 122, 123, 129, 136, 143, 154, 161, 167, 168, 169, 194, 197, 215, 218, 220, 233, 248, 252, 255, 258, 260, 275, 277, 279, 283, 312, 322, 326, 329, 334, 337, 342, 343, 344, 351, 353, 357, 358, 359, 366, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 384, 385, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 435, 446, 488, 521, 523, 527, 529, 537, 540, 566, 567, 573, 574, 576, 630, 631, 637, 640, 641, 644, 651, 653, 661, 721, 747, 762, 766, 798, 801, 815, 816, 820, 847, 848, 850, 857, 861, 863, 868, 869, 871, 872, 873, 874, 891, 892, 893, 894, 902, 940, 955, 958, 960, 962, 963, 966, 967, 969, 970, 974, 976, 981, 982, 986, 987, 990, 992, 999, 1000, 1001, 1008, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "email": [0, 342, 371, 382, 404, 818, 968, 990], "directli": [0, 6, 19, 27, 45, 46, 56, 71, 115, 146, 157, 181, 185, 197, 203, 215, 227, 262, 296, 299, 313, 344, 353, 357, 369, 371, 372, 373, 375, 377, 383, 384, 385, 392, 393, 394, 396, 397, 398, 399, 400, 404, 406, 427, 437, 447, 449, 454, 459, 512, 552, 553, 554, 555, 582, 596, 605, 617, 628, 631, 632, 637, 638, 645, 646, 647, 648, 649, 662, 666, 669, 675, 758, 762, 765, 774, 775, 781, 784, 785, 795, 828, 842, 843, 844, 850, 860, 862, 865, 872, 934, 955, 962, 964, 969, 971, 973, 976, 981, 982, 987, 993, 996, 997, 1008, 1016, 1017, 1019, 1020, 1021], "ask": [0, 161, 162, 257, 360, 370, 371, 375, 376, 379, 384, 385, 405, 825, 826, 827, 829, 831, 833, 834, 835, 984, 989, 1024], "assist": [0, 371, 382, 976, 990], "report": [0, 4, 8, 32, 70, 75, 143, 157, 185, 255, 265, 309, 317, 353, 366, 370, 372, 373, 374, 377, 379, 382, 384, 387, 390, 396, 400, 596, 634, 643, 649, 670, 671, 685, 698, 713, 714, 722, 767, 768, 771, 812, 821, 840, 841, 878, 896, 914, 962, 969, 986, 987, 989, 1009, 1012, 1015, 1016, 1018, 1019, 1021, 1023, 1024], "issu": [0, 4, 25, 79, 86, 197, 215, 262, 306, 358, 360, 365, 374, 375, 376, 379, 380, 382, 384, 385, 386, 387, 390, 392, 396, 398, 399, 404, 406, 434, 437, 447, 458, 467, 468, 469, 519, 524, 528, 558, 570, 571, 573, 574, 576, 596, 612, 676, 680, 753, 854, 859, 871, 910, 955, 956, 963, 969, 974, 976, 981, 986, 987, 989, 1000, 1001, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1023], "instead": [0, 4, 5, 6, 34, 48, 53, 55, 56, 57, 71, 100, 113, 117, 126, 143, 146, 149, 197, 199, 212, 215, 222, 248, 253, 254, 258, 259, 275, 282, 299, 309, 310, 311, 312, 313, 329, 331, 342, 344, 353, 357, 358, 365, 366, 369, 370, 371, 372, 373, 375, 376, 379, 380, 382, 383, 384, 390, 392, 396, 397, 399, 400, 401, 402, 403, 404, 405, 407, 408, 417, 422, 425, 426, 427, 429, 430, 431, 432, 435, 441, 444, 450, 452, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 494, 495, 518, 520, 522, 524, 525, 526, 531, 532, 534, 535, 538, 539, 540, 541, 542, 543, 545, 547, 549, 550, 553, 555, 567, 568, 574, 575, 592, 593, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 612, 615, 617, 620, 623, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 655, 656, 657, 658, 661, 663, 664, 672, 675, 679, 692, 730, 758, 762, 763, 764, 767, 779, 780, 781, 785, 793, 795, 800, 801, 816, 817, 826, 834, 840, 841, 844, 845, 846, 855, 856, 861, 863, 873, 874, 877, 884, 886, 888, 889, 891, 892, 893, 894, 896, 897, 909, 915, 920, 941, 955, 956, 958, 962, 963, 965, 966, 967, 970, 971, 976, 980, 981, 982, 986, 989, 997, 999, 1001, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "see": [0, 4, 5, 7, 24, 25, 27, 37, 44, 49, 50, 53, 55, 57, 58, 62, 64, 65, 67, 69, 80, 86, 89, 90, 95, 100, 102, 106, 111, 112, 113, 116, 117, 118, 119, 121, 123, 126, 129, 135, 142, 143, 144, 146, 149, 154, 155, 156, 161, 164, 167, 168, 170, 173, 176, 177, 178, 181, 188, 198, 199, 200, 203, 214, 215, 218, 220, 228, 230, 236, 237, 239, 243, 244, 245, 251, 252, 254, 256, 257, 258, 259, 260, 264, 266, 267, 268, 271, 272, 277, 283, 284, 286, 290, 299, 305, 306, 309, 310, 311, 312, 313, 314, 319, 329, 342, 343, 344, 347, 348, 349, 350, 353, 357, 358, 359, 363, 364, 365, 366, 368, 369, 370, 371, 373, 375, 377, 378, 379, 382, 383, 384, 387, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 418, 422, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 467, 468, 469, 470, 472, 473, 476, 477, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 569, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 594, 595, 596, 599, 604, 607, 608, 612, 613, 614, 615, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 686, 691, 693, 696, 698, 727, 747, 758, 762, 763, 764, 765, 772, 774, 775, 779, 780, 781, 783, 784, 785, 786, 787, 792, 793, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 919, 920, 935, 937, 940, 955, 956, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 985, 987, 990, 992, 994, 999, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "what": [0, 4, 9, 12, 40, 45, 52, 53, 86, 96, 100, 118, 166, 167, 186, 203, 205, 213, 228, 239, 295, 342, 344, 347, 353, 358, 366, 371, 372, 373, 375, 377, 379, 383, 384, 385, 386, 396, 402, 403, 404, 488, 521, 573, 574, 576, 631, 637, 681, 868, 869, 871, 872, 873, 874, 891, 892, 893, 894, 965, 966, 967, 969, 982, 987, 989, 992, 1008, 1015], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 55, 61, 70, 71, 72, 73, 78, 85, 95, 99, 103, 104, 105, 113, 119, 120, 121, 122, 123, 129, 132, 146, 149, 150, 155, 161, 167, 176, 181, 185, 186, 193, 211, 212, 213, 218, 221, 226, 231, 232, 235, 244, 248, 251, 255, 256, 257, 258, 261, 264, 265, 268, 269, 271, 272, 275, 281, 286, 300, 305, 311, 312, 329, 332, 337, 342, 343, 344, 350, 357, 358, 360, 365, 368, 370, 371, 374, 377, 383, 384, 387, 393, 394, 396, 400, 401, 403, 404, 405, 406, 417, 428, 431, 432, 434, 436, 437, 438, 444, 447, 450, 457, 467, 468, 469, 523, 530, 531, 537, 539, 541, 542, 543, 544, 545, 547, 549, 550, 551, 553, 555, 578, 579, 582, 587, 595, 596, 620, 622, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 658, 660, 661, 663, 664, 665, 673, 674, 675, 678, 679, 688, 693, 704, 705, 706, 707, 708, 712, 713, 723, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 767, 768, 769, 771, 774, 775, 776, 778, 779, 780, 781, 784, 785, 795, 806, 808, 811, 816, 817, 826, 834, 840, 841, 884, 886, 889, 891, 892, 893, 894, 955, 960, 961, 962, 963, 966, 969, 970, 972, 980, 982, 986, 987, 990, 992, 997, 1001, 1008, 1011, 1014, 1016, 1017, 1018, 1021, 1022, 1023, 1024], "wai": [0, 4, 17, 27, 50, 60, 71, 74, 115, 121, 125, 127, 146, 156, 167, 169, 170, 198, 202, 212, 228, 229, 232, 236, 252, 257, 264, 266, 299, 300, 312, 314, 353, 357, 358, 359, 365, 367, 369, 370, 373, 374, 379, 380, 384, 385, 387, 390, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 411, 428, 429, 436, 437, 438, 444, 445, 447, 448, 454, 481, 540, 541, 548, 557, 574, 584, 585, 596, 617, 651, 652, 661, 662, 663, 689, 691, 702, 720, 721, 738, 739, 741, 747, 758, 762, 772, 777, 804, 812, 829, 850, 856, 861, 867, 893, 894, 937, 940, 955, 956, 960, 961, 962, 963, 964, 965, 966, 967, 969, 971, 972, 973, 974, 976, 978, 980, 981, 982, 986, 987, 989, 990, 992, 1000, 1001, 1008, 1010, 1016, 1021, 1022], "question": [0, 135, 166, 257, 337, 360, 370, 371, 376, 379, 400, 403, 812, 885, 888, 962, 965, 966, 972, 984, 990], "faq": [0, 379, 400, 677, 963, 976], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 57, 60, 69, 70, 71, 74, 78, 80, 86, 101, 105, 110, 111, 114, 117, 118, 119, 120, 122, 123, 127, 129, 143, 154, 156, 164, 167, 168, 169, 170, 173, 178, 186, 187, 193, 198, 199, 200, 201, 204, 205, 211, 215, 222, 223, 228, 231, 234, 235, 236, 238, 248, 252, 253, 255, 257, 258, 259, 264, 266, 267, 269, 270, 271, 277, 279, 281, 283, 284, 295, 304, 306, 310, 311, 312, 326, 327, 329, 332, 337, 342, 343, 347, 351, 357, 358, 359, 360, 366, 369, 370, 372, 373, 374, 376, 379, 383, 384, 385, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 418, 422, 427, 428, 429, 430, 431, 432, 434, 437, 449, 453, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 544, 551, 552, 553, 554, 555, 566, 567, 568, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 607, 608, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 673, 674, 676, 677, 689, 705, 741, 774, 781, 784, 785, 795, 806, 827, 829, 832, 835, 839, 840, 841, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 881, 888, 955, 956, 960, 961, 962, 963, 965, 966, 972, 973, 974, 976, 978, 979, 981, 982, 985, 987, 989, 990, 992, 994, 996, 1001, 1003, 1008, 1010, 1013, 1019, 1022, 1023, 1024], "you": [0, 14, 16, 24, 71, 117, 118, 121, 123, 143, 146, 162, 168, 185, 198, 199, 228, 239, 245, 252, 257, 258, 264, 272, 283, 309, 310, 313, 318, 321, 342, 353, 357, 358, 359, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 383, 384, 387, 390, 394, 395, 396, 397, 398, 400, 403, 404, 405, 407, 408, 413, 422, 429, 431, 434, 449, 452, 454, 481, 485, 488, 489, 494, 495, 517, 518, 521, 534, 535, 536, 538, 540, 542, 544, 546, 549, 552, 553, 554, 555, 564, 565, 573, 574, 576, 592, 593, 595, 612, 631, 632, 635, 636, 637, 639, 640, 641, 643, 644, 649, 650, 651, 653, 657, 659, 660, 661, 662, 663, 672, 685, 769, 780, 783, 784, 785, 786, 796, 797, 798, 800, 801, 811, 812, 813, 814, 818, 819, 820, 821, 822, 825, 826, 827, 829, 830, 831, 833, 840, 842, 843, 847, 848, 855, 856, 857, 868, 869, 871, 872, 873, 874, 876, 878, 879, 883, 885, 888, 891, 892, 893, 894, 920, 932, 955, 956, 961, 962, 966, 967, 970, 972, 973, 976, 977, 980, 981, 982, 985, 986, 989, 990, 992, 993, 996, 999, 1001, 1008, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 70, 71, 72, 73, 78, 79, 80, 81, 82, 86, 96, 98, 99, 100, 101, 103, 105, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 141, 142, 143, 145, 146, 149, 154, 155, 156, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 181, 182, 185, 186, 188, 190, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 205, 213, 214, 215, 218, 219, 220, 226, 227, 228, 229, 230, 232, 236, 239, 242, 243, 244, 245, 247, 248, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 264, 266, 268, 269, 271, 272, 275, 277, 279, 281, 282, 283, 284, 286, 294, 295, 296, 299, 300, 301, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 318, 319, 321, 322, 326, 327, 329, 332, 337, 342, 343, 344, 349, 350, 351, 353, 357, 358, 359, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 383, 384, 385, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 417, 419, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 457, 467, 468, 469, 472, 481, 484, 488, 493, 494, 497, 506, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 564, 565, 566, 567, 568, 569, 573, 574, 576, 577, 579, 582, 587, 588, 589, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 617, 619, 620, 623, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 672, 674, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 689, 692, 694, 696, 697, 703, 705, 706, 707, 708, 710, 711, 713, 714, 716, 717, 721, 722, 723, 724, 726, 727, 730, 736, 739, 740, 741, 742, 743, 747, 763, 764, 766, 767, 768, 769, 771, 772, 773, 776, 777, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 840, 841, 842, 843, 846, 847, 848, 850, 851, 852, 856, 857, 858, 861, 862, 863, 868, 875, 876, 881, 883, 884, 885, 886, 888, 889, 891, 892, 893, 894, 895, 896, 899, 901, 903, 907, 909, 914, 919, 920, 926, 929, 932, 934, 936, 937, 940, 947, 950, 951, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 986, 987, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "contribut": [0, 13, 123, 154, 181, 266, 304, 360, 368, 369, 373, 374, 375, 379, 384, 385, 387, 401, 402, 403, 406, 432, 434, 538, 539, 544, 545, 710, 713, 740, 960, 966, 969, 974, 981, 984, 986, 987, 990, 999, 1008, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "activ": [0, 129, 164, 205, 242, 248, 258, 316, 323, 344, 365, 366, 369, 371, 372, 377, 379, 382, 384, 385, 387, 397, 481, 487, 511, 617, 620, 622, 635, 636, 638, 639, 640, 648, 649, 650, 667, 668, 669, 670, 671, 698, 703, 779, 839, 840, 841, 879, 932, 962, 963, 964, 965, 969, 970, 971, 979], "who": [0, 70, 358, 360, 366, 371, 378, 385, 387, 825, 826, 827, 829, 831, 833, 834, 835, 984, 986, 1010, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "also": [0, 4, 7, 11, 17, 19, 24, 25, 26, 27, 32, 46, 48, 53, 57, 58, 60, 64, 70, 71, 78, 80, 85, 86, 95, 103, 105, 113, 117, 119, 121, 122, 123, 127, 129, 142, 143, 144, 146, 149, 151, 154, 162, 167, 168, 169, 170, 173, 177, 178, 180, 186, 189, 190, 193, 197, 198, 199, 202, 206, 214, 215, 218, 229, 231, 236, 248, 255, 257, 258, 259, 260, 263, 264, 266, 267, 268, 277, 280, 285, 288, 290, 293, 299, 300, 301, 303, 304, 309, 310, 311, 312, 322, 325, 326, 327, 329, 331, 342, 343, 344, 347, 348, 351, 353, 357, 358, 359, 364, 365, 366, 368, 369, 370, 371, 373, 374, 377, 379, 380, 382, 383, 384, 385, 387, 390, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 422, 423, 424, 426, 427, 430, 431, 432, 433, 435, 437, 447, 448, 450, 452, 467, 469, 477, 481, 483, 488, 493, 517, 518, 520, 521, 526, 531, 534, 536, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 592, 593, 594, 595, 596, 607, 617, 618, 620, 628, 629, 630, 631, 632, 635, 637, 638, 639, 641, 645, 646, 647, 648, 657, 661, 663, 666, 669, 672, 676, 679, 680, 684, 695, 698, 707, 713, 714, 722, 727, 747, 763, 764, 767, 768, 771, 779, 780, 781, 784, 785, 795, 798, 801, 805, 806, 807, 808, 809, 810, 812, 822, 825, 826, 827, 829, 830, 831, 833, 834, 835, 839, 840, 841, 843, 845, 846, 851, 852, 856, 860, 863, 868, 872, 885, 888, 891, 892, 893, 894, 903, 922, 930, 934, 955, 956, 958, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 979, 980, 981, 982, 986, 987, 989, 990, 992, 997, 999, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "help": [0, 4, 9, 11, 16, 55, 70, 74, 100, 106, 168, 181, 215, 218, 258, 260, 296, 326, 329, 344, 353, 357, 358, 369, 372, 373, 374, 375, 376, 377, 379, 380, 384, 385, 386, 390, 396, 397, 400, 404, 406, 418, 521, 562, 612, 635, 639, 650, 670, 671, 677, 699, 819, 891, 892, 893, 894, 956, 960, 961, 963, 965, 966, 968, 970, 976, 977, 982, 985, 986, 987, 989, 990, 1001, 1014, 1015, 1016, 1019, 1022], "triag": [0, 360, 371, 374, 385], "pr": [0, 131, 358, 371, 374, 379, 404, 725, 966, 1018, 1020], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 65, 70, 71, 72, 73, 74, 75, 79, 81, 85, 86, 88, 89, 90, 93, 95, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 143, 144, 146, 150, 151, 152, 153, 154, 157, 161, 162, 166, 167, 168, 169, 170, 173, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 248, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 275, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 357, 358, 360, 363, 364, 366, 368, 372, 373, 374, 375, 376, 377, 379, 380, 382, 383, 390, 393, 394, 396, 400, 402, 404, 405, 406, 408, 412, 416, 417, 422, 425, 428, 431, 432, 434, 437, 439, 443, 444, 445, 447, 449, 450, 452, 454, 457, 459, 467, 468, 469, 473, 476, 477, 480, 481, 482, 488, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 521, 523, 525, 526, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 567, 568, 569, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 595, 596, 599, 600, 603, 604, 605, 607, 608, 612, 613, 614, 615, 617, 618, 619, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 658, 660, 662, 663, 664, 665, 670, 671, 674, 675, 676, 677, 678, 679, 680, 686, 689, 691, 702, 706, 707, 708, 721, 727, 741, 762, 765, 769, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 813, 814, 815, 816, 817, 823, 824, 826, 828, 829, 831, 832, 833, 834, 835, 839, 840, 841, 843, 846, 847, 848, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 871, 872, 873, 874, 875, 876, 883, 884, 885, 886, 888, 889, 892, 894, 895, 896, 897, 914, 915, 919, 920, 923, 924, 931, 935, 937, 940, 955, 956, 958, 960, 961, 963, 965, 966, 967, 969, 971, 972, 973, 974, 978, 979, 981, 982, 984, 986, 988, 989, 990, 992, 995, 999, 1000, 1003, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1024], "arturo": [0, 37, 57, 176, 181, 258, 260, 304, 342, 343, 344, 361, 1022, 1023], "amor": [0, 37, 57, 176, 181, 258, 260, 304, 342, 343, 344, 361, 1022, 1023], "juan": [0, 361, 1008, 1019, 1020, 1021, 1022, 1023], "carlo": [0, 231, 361, 403, 406, 596, 626, 627, 958, 971, 1008, 1019, 1020, 1021, 1022, 1023], "alfaro": [0, 361, 1019, 1020, 1021, 1022, 1023], "jim\u00e9nez": [0, 361, 1016, 1019, 1020, 1021, 1022, 1023], "luci": [0, 263, 361, 1019, 1020, 1021, 1022, 1023], "liu": [0, 263, 361, 548, 710, 740, 966, 972, 1011, 1014, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024], "martin": [0, 361, 706, 707, 708, 962, 966, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023], "loyola": [0, 361, 1021, 1022], "sylvain": [0, 361, 1012, 1017, 1018, 1019, 1020, 1021, 1022], "mari\u00e9": [0, 361, 1017, 1018, 1019, 1020, 1021, 1022], "chiara": [0, 361, 362, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "marmo": [0, 361, 362, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "maxwel": [0, 361, 1018, 1021, 1022, 1023], "norbert": [0, 361, 1010, 1020, 1021, 1022], "prein": [0, 361, 1020, 1021, 1022], "reshama": [0, 355, 361, 1016, 1017, 1019, 1020, 1021, 1022, 1023], "shaikh": [0, 355, 361, 1016, 1017, 1019, 1020, 1021, 1022, 1023], "albert": [0, 226, 361, 1015, 1016, 1017, 1020, 1021], "around": [0, 4, 26, 37, 52, 85, 113, 122, 155, 168, 173, 260, 296, 317, 319, 320, 329, 332, 342, 343, 344, 353, 366, 368, 371, 377, 382, 396, 400, 401, 404, 406, 456, 457, 500, 529, 605, 625, 634, 689, 779, 787, 829, 831, 833, 834, 835, 863, 962, 963, 965, 966, 972, 976, 980, 986, 987, 990, 999, 1001, 1012, 1013], "lauren": [0, 354, 677, 681, 963, 1020, 1023], "burk": [0, 354, 1023], "francoisgoupil": [0, 354, 1022], "longer": [0, 4, 53, 113, 168, 182, 295, 312, 371, 373, 396, 400, 403, 404, 406, 434, 521, 548, 961, 965, 966, 968, 971, 981, 990, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "mathieu": [0, 2, 24, 48, 100, 188, 198, 219, 233, 258, 342, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1021], "blondel": [0, 2, 24, 48, 100, 188, 198, 219, 233, 258, 342, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1021], "lar": [0, 2, 14, 98, 146, 164, 175, 186, 216, 342, 343, 344, 368, 456, 457, 463, 486, 516, 522, 524, 527, 528, 530, 531, 533, 636, 637, 638, 639, 640, 641, 648, 649, 650, 663, 667, 668, 669, 670, 671, 988, 999, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1021], "buitinck": [0, 2, 14, 342, 343, 344, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "noel": [0, 2, 109, 110, 111, 112, 1008, 1009, 1010, 1011, 1012, 1020], "daw": [0, 2, 109, 110, 111, 112, 1008, 1009, 1010, 1011, 1012], "dubourg": [0, 2, 152, 156, 990, 1008, 1012], "edouard": [0, 2, 1008], "duchesnai": [0, 2, 1008], "alexand": [0, 2, 396, 401, 520, 849, 1010, 1011, 1012, 1014, 1015, 1016, 1020, 1021, 1022], "fabisch": [0, 2, 1010, 1011, 1012, 1014], "virgil": [0, 2, 9, 1008, 1009, 1011], "fritsch": [0, 2, 9, 1008, 1009, 1011], "satrajit": [0, 2, 1008, 1009], "ghosh": [0, 2, 396, 1008, 1009], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1008, 1011, 1016, 1017, 1018, 1019, 1022], "gorgolewski": [0, 2, 1008, 1011], "jaqu": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 180, 193, 194, 195, 220, 334, 337, 1008, 1009, 1010, 1011], "grobler": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 180, 193, 194, 195, 220, 334, 337, 1008, 1009, 1010, 1011], "brian": [0, 2, 46, 693, 966, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1021, 1022], "holt": [0, 2, 1008], "arnaud": [0, 2, 1009, 1010, 1011, 1012, 1013, 1014], "joli": [0, 2, 1009, 1010, 1011, 1012, 1013, 1014], "thoui": [0, 2, 1008], "rai": [0, 2, 934, 966, 1008, 1018, 1020, 1021], "jone": [0, 2, 366, 1008], "kyle": [0, 2, 99, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1020], "kastner": [0, 2, 99, 1010, 1011, 1012, 1019, 1020], "manoj": [0, 2, 42, 146, 179, 1011, 1012, 1013, 1014, 1015], "kumar": [0, 2, 42, 146, 179, 366, 396, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023], "robert": [0, 2, 48, 72, 146, 185, 368, 401, 513, 520, 613, 641, 706, 707, 708, 719, 849, 956, 962, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1023], "layton": [0, 2, 48, 1008, 1009, 1010, 1011, 1013], "wei": [0, 2, 980, 1008, 1009, 1012, 1013, 1014, 1015, 1017, 1021, 1024], "li": [0, 2, 320, 366, 624, 627, 681, 710, 740, 876, 955, 958, 966, 969, 976, 978, 981, 1008, 1009, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "paolo": [0, 2, 1008, 1012, 1018], "losi": [0, 2, 1008], "gill": [0, 2, 113, 114, 1008, 1009, 1010, 1011, 1012, 1013, 1014], "loupp": [0, 2, 113, 114, 403, 540, 541, 1008, 1009, 1010, 1011, 1012, 1013, 1014], "jarrod": [0, 2, 1017], "millman": [0, 2, 1017], "passo": [0, 2, 1008, 1009], "peter": [0, 2, 11, 16, 63, 109, 121, 123, 124, 258, 342, 343, 396, 433, 435, 442, 634, 774, 775, 962, 966, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1023], "prettenhof": [0, 2, 11, 16, 109, 121, 123, 124, 258, 342, 343, 1008, 1009, 1010, 1011, 1012, 1013], "venkat": [0, 2], "raghav": [0, 2, 120, 261, 299, 1012, 1013, 1014, 1015, 1016, 1020], "rajagopalan": [0, 2, 1016, 1020], "jacob": [0, 2, 1013, 1014, 1015], "schreiber": [0, 2, 1013, 1014, 1015], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1008, 1009], "jake": [0, 2, 11, 156, 198, 218, 245, 282, 290, 985, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1022], "vanderpla": [0, 2, 11, 156, 198, 218, 245, 282, 290, 985, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "ward": [0, 2, 36, 39, 44, 52, 54, 56, 62, 68, 164, 170, 404, 426, 430, 448, 515, 836, 1008, 1011, 1013], "farlei": [0, 2, 1008], "ron": [0, 2, 244, 1008], "weiss": [0, 2, 244, 396, 676, 1008], "respons": [0, 146, 168, 193, 197, 200, 267, 342, 368, 377, 384, 395, 396, 397, 403, 406, 431, 449, 467, 468, 469, 616, 617, 618, 659, 660, 683, 685, 687, 779, 780, 967, 973, 984, 992], "If": [0, 4, 11, 16, 27, 32, 42, 49, 55, 71, 82, 98, 117, 122, 129, 158, 162, 167, 178, 197, 212, 214, 257, 264, 272, 282, 290, 299, 304, 305, 329, 337, 338, 342, 343, 344, 351, 353, 357, 358, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 387, 390, 393, 394, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 416, 418, 419, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 497, 499, 500, 504, 507, 508, 509, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 696, 697, 698, 699, 701, 702, 703, 710, 711, 712, 713, 714, 715, 716, 720, 722, 725, 726, 729, 730, 732, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 747, 748, 750, 751, 752, 753, 755, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 787, 793, 795, 798, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 912, 918, 920, 922, 924, 929, 932, 934, 935, 937, 940, 941, 947, 950, 951, 952, 953, 955, 956, 958, 960, 961, 962, 963, 964, 966, 969, 970, 972, 973, 976, 978, 980, 981, 982, 983, 986, 987, 989, 992, 993, 999, 1000, 1001, 1008, 1011, 1012, 1013, 1014, 1017, 1018, 1020, 1021, 1022], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 86, 90, 91, 92, 94, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 135, 136, 137, 138, 142, 143, 145, 146, 149, 150, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 190, 193, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 209, 212, 214, 215, 216, 218, 219, 220, 221, 223, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 244, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 273, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 317, 318, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 340, 341, 344, 345, 347, 349, 350, 351, 356, 357, 358, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 378, 380, 383, 384, 385, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 399, 402, 406, 407, 408, 409, 412, 414, 415, 416, 417, 424, 441, 442, 444, 446, 448, 456, 463, 465, 466, 470, 478, 488, 493, 494, 501, 516, 528, 530, 531, 532, 533, 540, 557, 559, 560, 562, 563, 568, 570, 571, 577, 580, 581, 583, 586, 588, 594, 601, 605, 606, 609, 614, 621, 623, 627, 635, 636, 639, 645, 646, 648, 652, 660, 668, 670, 671, 672, 679, 680, 681, 684, 696, 699, 700, 701, 706, 707, 708, 710, 712, 714, 716, 719, 720, 723, 727, 730, 735, 740, 742, 743, 747, 748, 750, 751, 752, 753, 755, 758, 759, 760, 761, 764, 765, 767, 776, 788, 789, 790, 791, 792, 793, 794, 803, 811, 813, 815, 817, 819, 823, 824, 833, 834, 835, 837, 845, 846, 849, 851, 854, 865, 866, 868, 870, 871, 873, 874, 875, 878, 882, 884, 893, 894, 895, 896, 899, 902, 903, 904, 909, 910, 919, 920, 929, 933, 934, 935, 937, 938, 942, 943, 944, 948, 949, 955, 956, 958, 959, 961, 964, 965, 967, 968, 969, 971, 972, 973, 974, 976, 977, 978, 979, 983, 984, 985, 986, 987, 988, 989, 992, 993, 995, 996, 997, 998, 1000, 1002, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "scientif": [0, 32, 135, 136, 137, 138, 231, 360, 365, 369, 382, 387, 396, 437, 447, 486, 990, 993], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 25, 26, 27, 30, 32, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 56, 57, 58, 62, 64, 65, 66, 70, 71, 72, 73, 75, 78, 80, 81, 82, 86, 89, 90, 92, 95, 96, 97, 98, 100, 103, 104, 106, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 129, 131, 132, 135, 141, 142, 143, 145, 146, 149, 151, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 180, 181, 183, 185, 186, 188, 190, 192, 194, 197, 198, 199, 200, 203, 205, 206, 209, 210, 211, 212, 213, 215, 218, 219, 222, 223, 226, 227, 229, 230, 231, 233, 236, 238, 239, 242, 243, 244, 245, 247, 248, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 271, 275, 277, 279, 280, 282, 285, 286, 287, 288, 290, 293, 294, 295, 296, 299, 300, 301, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 322, 325, 326, 327, 329, 330, 331, 332, 334, 337, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 357, 358, 359, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 382, 383, 384, 385, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 435, 454, 455, 456, 457, 458, 459, 460, 461, 486, 508, 516, 517, 519, 522, 534, 546, 547, 548, 554, 555, 567, 568, 574, 596, 602, 612, 617, 618, 623, 625, 636, 640, 643, 644, 651, 653, 658, 659, 660, 661, 662, 677, 696, 703, 705, 710, 730, 740, 748, 765, 804, 825, 826, 827, 829, 831, 832, 833, 834, 835, 846, 855, 856, 857, 863, 868, 869, 871, 872, 873, 874, 876, 879, 883, 887, 930, 932, 955, 956, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 976, 978, 979, 980, 981, 982, 983, 985, 986, 987, 990, 992, 996, 997, 998, 999, 1000, 1001, 1005, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024], "would": [0, 4, 6, 9, 26, 32, 45, 53, 55, 58, 70, 78, 80, 81, 86, 92, 100, 101, 122, 146, 149, 154, 155, 167, 168, 169, 170, 173, 181, 187, 197, 198, 199, 212, 215, 226, 244, 253, 257, 258, 263, 265, 267, 277, 283, 295, 299, 300, 304, 305, 312, 320, 329, 338, 342, 344, 353, 357, 366, 367, 371, 372, 373, 377, 379, 380, 382, 383, 384, 385, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 417, 431, 450, 453, 467, 468, 469, 474, 517, 519, 521, 526, 529, 537, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 555, 568, 569, 572, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 596, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 657, 658, 659, 660, 661, 663, 664, 685, 687, 693, 697, 698, 705, 740, 766, 769, 773, 781, 783, 795, 808, 816, 817, 826, 834, 841, 868, 869, 871, 872, 873, 874, 875, 876, 881, 883, 884, 886, 889, 891, 892, 893, 894, 955, 956, 959, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 976, 981, 986, 987, 990, 992, 997, 999, 1001, 1005, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "appreci": [0, 371], "citat": [0, 365, 368, 382], "paper": [0, 146, 173, 257, 368, 377, 382, 396, 398, 427, 434, 463, 489, 519, 526, 548, 626, 643, 651, 652, 656, 661, 664, 677, 772, 820, 829, 832, 875, 876, 962, 966, 969, 972, 981, 1001, 1008, 1015, 1016], "machin": [0, 4, 6, 8, 9, 27, 63, 142, 143, 149, 154, 165, 169, 171, 209, 238, 257, 260, 263, 292, 297, 299, 304, 306, 311, 314, 325, 330, 337, 342, 344, 357, 358, 360, 364, 365, 366, 368, 369, 371, 374, 377, 378, 382, 383, 384, 386, 390, 394, 396, 400, 401, 403, 404, 406, 422, 424, 433, 456, 457, 463, 487, 489, 495, 501, 502, 503, 515, 517, 519, 526, 529, 540, 541, 542, 543, 544, 545, 549, 550, 551, 578, 579, 595, 596, 599, 604, 607, 619, 623, 624, 626, 628, 629, 630, 635, 636, 639, 640, 641, 642, 643, 644, 661, 667, 668, 677, 693, 698, 709, 719, 725, 727, 769, 772, 779, 808, 809, 823, 824, 829, 832, 839, 840, 841, 843, 861, 863, 869, 883, 884, 885, 886, 888, 889, 893, 894, 955, 956, 958, 959, 962, 963, 964, 966, 967, 969, 972, 973, 974, 976, 980, 982, 985, 986, 987, 988, 989, 990, 993, 994, 995, 997, 1001, 1002, 1003, 1005, 1008, 1010, 1020, 1021, 1022, 1023], "pythonet": [0, 11, 78, 79, 109, 110, 124, 185, 290, 368, 393, 396, 398, 401, 403, 404, 405, 436, 483, 504, 505, 513, 520, 526, 529, 548, 667, 668, 704, 705, 818, 820, 840, 841, 876, 919, 920, 962, 963, 966, 972, 976, 978, 981, 982, 1016, 1024], "al": [0, 11, 78, 79, 109, 110, 124, 185, 290, 368, 393, 396, 398, 401, 403, 404, 405, 436, 483, 504, 505, 513, 520, 526, 529, 548, 667, 668, 704, 705, 818, 820, 840, 841, 876, 919, 920, 962, 963, 966, 972, 976, 978, 981, 982, 1016, 1021, 1024], "jmlr": [0, 396, 651, 652, 661, 689, 962, 981], "12": [0, 4, 6, 14, 15, 35, 40, 42, 43, 53, 55, 56, 57, 73, 74, 85, 118, 119, 123, 152, 153, 154, 162, 167, 168, 170, 177, 181, 183, 197, 205, 212, 215, 218, 220, 221, 222, 226, 227, 229, 230, 236, 239, 240, 244, 245, 256, 257, 259, 260, 263, 269, 273, 303, 304, 305, 314, 337, 344, 368, 369, 376, 383, 385, 396, 400, 404, 428, 432, 434, 467, 468, 469, 470, 517, 519, 526, 555, 649, 654, 656, 670, 671, 674, 677, 678, 779, 780, 782, 799, 802, 814, 835, 851, 955, 956, 962, 964, 967, 976, 980, 981, 984, 992, 997, 1006, 1009, 1011, 1015, 1016, 1018, 1019], "pp": [0, 63, 256, 368, 396, 398, 404, 407, 408, 429, 433, 437, 447, 496, 518, 519, 526, 575, 620, 628, 649, 670, 671, 705, 710, 714, 724, 740, 753, 767, 818, 820, 822, 839, 859, 871, 959, 966, 968, 969, 979], "2825": 0, "2830": 0, "2011": [0, 47, 168, 219, 377, 401, 404, 520, 523, 525, 526, 532, 575, 612, 623, 643, 714, 956, 970, 980, 985, 1008], "bibtex": 0, "entri": [0, 16, 71, 75, 129, 162, 167, 168, 253, 309, 343, 353, 375, 377, 379, 383, 384, 393, 394, 396, 401, 403, 406, 448, 457, 516, 517, 522, 530, 531, 546, 547, 573, 576, 579, 596, 605, 617, 623, 625, 632, 636, 638, 640, 641, 644, 646, 648, 649, 650, 658, 660, 667, 668, 670, 671, 684, 689, 692, 694, 697, 700, 701, 703, 710, 713, 714, 715, 718, 719, 722, 727, 740, 742, 743, 767, 769, 772, 773, 774, 775, 794, 807, 823, 824, 831, 832, 833, 834, 835, 854, 860, 872, 952, 955, 956, 962, 966, 969, 976, 981, 987, 992, 1015, 1018, 1019, 1021], "articl": [0, 17, 70, 342, 366, 370, 371, 379, 400, 409, 460, 690, 962, 966, 1001, 1021], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 78, 79, 81, 82, 85, 86, 91, 95, 96, 97, 98, 99, 103, 104, 105, 111, 112, 113, 117, 118, 119, 122, 123, 125, 128, 131, 132, 138, 141, 142, 144, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 167, 176, 177, 179, 181, 182, 184, 185, 186, 189, 190, 196, 197, 199, 201, 202, 203, 205, 206, 211, 214, 215, 218, 219, 220, 226, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 251, 252, 256, 257, 258, 260, 261, 262, 266, 267, 271, 272, 279, 280, 283, 284, 285, 286, 288, 289, 290, 299, 303, 304, 305, 319, 322, 325, 326, 327, 328, 329, 332, 338, 339, 342, 348, 349, 350, 370, 371, 375, 379, 397, 966, 989, 997], "p": [0, 11, 13, 24, 26, 27, 41, 61, 80, 81, 85, 92, 103, 121, 142, 152, 173, 209, 214, 215, 218, 220, 230, 245, 257, 263, 264, 290, 365, 366, 368, 369, 376, 379, 393, 394, 396, 398, 399, 401, 403, 405, 406, 407, 409, 427, 429, 431, 432, 435, 442, 454, 456, 459, 460, 463, 483, 513, 519, 523, 525, 526, 532, 534, 535, 536, 538, 540, 541, 542, 543, 544, 546, 549, 550, 551, 575, 577, 578, 579, 580, 581, 583, 584, 585, 589, 590, 591, 592, 593, 594, 600, 601, 612, 625, 628, 673, 675, 677, 679, 684, 690, 700, 708, 725, 736, 770, 772, 783, 789, 790, 791, 794, 808, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 839, 843, 844, 859, 871, 877, 893, 894, 895, 959, 960, 962, 963, 964, 966, 968, 969, 970, 971, 972, 973, 976, 980, 981, 984, 996, 999, 1008, 1009, 1011, 1014, 1016, 1023], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 26, 32, 37, 43, 47, 48, 49, 52, 53, 55, 58, 64, 67, 71, 75, 86, 98, 113, 116, 117, 119, 122, 129, 130, 137, 140, 142, 145, 146, 147, 149, 155, 156, 158, 164, 166, 167, 168, 169, 173, 181, 183, 186, 197, 198, 199, 207, 215, 219, 230, 232, 235, 239, 247, 255, 257, 258, 259, 260, 263, 264, 266, 267, 269, 277, 293, 294, 295, 301, 304, 305, 309, 311, 313, 317, 318, 337, 342, 343, 344, 353, 366, 371, 372, 373, 375, 377, 382, 394, 397, 401, 403, 404, 405, 406, 472, 493, 494, 516, 517, 522, 523, 551, 566, 567, 568, 577, 580, 581, 583, 584, 585, 589, 590, 591, 592, 593, 594, 602, 612, 617, 620, 643, 698, 707, 710, 713, 714, 740, 767, 768, 771, 772, 782, 783, 786, 788, 789, 790, 791, 794, 796, 797, 798, 799, 800, 801, 802, 807, 840, 841, 845, 854, 857, 858, 862, 863, 898, 903, 904, 958, 961, 970, 973, 974, 976, 980, 1010, 1016, 1017, 1018, 1020, 1022], "g": [0, 4, 7, 8, 9, 10, 12, 16, 24, 25, 26, 27, 32, 53, 55, 65, 70, 73, 82, 86, 103, 113, 114, 121, 122, 129, 136, 149, 150, 151, 152, 154, 156, 157, 158, 162, 166, 179, 182, 197, 198, 199, 215, 219, 223, 232, 242, 257, 261, 262, 268, 275, 283, 299, 304, 320, 336, 344, 353, 357, 363, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 382, 384, 390, 394, 395, 396, 398, 400, 401, 403, 404, 405, 406, 408, 488, 513, 516, 518, 519, 522, 526, 540, 541, 542, 543, 544, 549, 550, 552, 553, 554, 555, 566, 567, 573, 574, 576, 578, 579, 582, 589, 596, 602, 607, 608, 615, 618, 619, 649, 659, 662, 665, 671, 677, 682, 705, 712, 722, 724, 747, 769, 781, 784, 785, 787, 795, 799, 804, 805, 806, 807, 810, 813, 818, 822, 825, 826, 827, 830, 832, 833, 834, 835, 839, 846, 848, 853, 856, 859, 861, 863, 866, 868, 869, 870, 871, 872, 873, 874, 883, 891, 892, 893, 894, 919, 920, 934, 955, 956, 960, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 976, 980, 981, 982, 987, 989, 990, 1001, 1008, 1012, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 60, 68, 75, 78, 81, 86, 92, 96, 97, 98, 103, 111, 112, 116, 117, 119, 128, 129, 132, 135, 136, 137, 138, 143, 144, 145, 149, 152, 154, 156, 157, 158, 164, 167, 168, 181, 185, 198, 207, 211, 212, 215, 219, 257, 258, 260, 264, 271, 293, 299, 301, 304, 309, 311, 314, 318, 320, 322, 329, 334, 342, 343, 344, 349, 351, 353, 357, 359, 360, 365, 366, 368, 369, 371, 373, 374, 376, 379, 382, 383, 384, 385, 386, 391, 393, 394, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 417, 422, 423, 424, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 443, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 473, 475, 476, 477, 479, 482, 485, 486, 487, 488, 489, 493, 495, 496, 497, 498, 499, 505, 507, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 529, 530, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 555, 566, 573, 574, 575, 576, 578, 579, 582, 587, 592, 593, 596, 602, 605, 612, 615, 617, 618, 620, 622, 623, 624, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 657, 658, 660, 661, 662, 663, 664, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 689, 690, 695, 696, 697, 701, 702, 704, 706, 707, 708, 709, 710, 715, 720, 721, 724, 727, 728, 731, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 748, 750, 751, 758, 759, 760, 761, 762, 765, 772, 775, 777, 779, 780, 781, 784, 785, 787, 792, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 847, 850, 854, 859, 863, 864, 867, 868, 869, 871, 872, 873, 874, 879, 883, 884, 885, 886, 888, 889, 891, 892, 893, 894, 918, 919, 920, 951, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 976, 979, 980, 981, 982, 985, 986, 987, 992, 993, 999, 1000, 1001, 1003, 1008, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "v": [0, 4, 16, 17, 19, 27, 30, 33, 34, 36, 37, 38, 49, 55, 58, 68, 70, 75, 77, 80, 83, 84, 85, 87, 95, 97, 98, 101, 114, 122, 164, 165, 170, 171, 175, 186, 197, 212, 216, 230, 243, 244, 247, 248, 250, 253, 272, 273, 309, 326, 343, 353, 358, 363, 368, 369, 371, 377, 379, 384, 393, 394, 395, 398, 399, 401, 403, 404, 417, 426, 430, 437, 447, 448, 449, 450, 455, 458, 459, 460, 461, 462, 467, 468, 469, 481, 497, 509, 515, 516, 522, 526, 530, 531, 535, 537, 539, 541, 543, 545, 547, 549, 550, 553, 555, 566, 574, 578, 579, 585, 591, 596, 615, 616, 619, 620, 624, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 655, 657, 658, 661, 663, 664, 673, 680, 684, 686, 689, 702, 720, 721, 723, 738, 739, 741, 772, 777, 781, 786, 793, 795, 805, 809, 811, 812, 813, 816, 817, 818, 826, 834, 836, 839, 841, 843, 844, 847, 850, 856, 857, 858, 863, 867, 877, 883, 884, 885, 886, 888, 889, 892, 894, 898, 960, 961, 962, 963, 966, 967, 968, 971, 974, 980, 981, 983, 1003, 1008, 1011, 1012, 1013, 1016, 1018, 1019, 1022, 1023], "b": [0, 8, 9, 10, 24, 26, 59, 65, 80, 101, 103, 110, 112, 113, 118, 122, 123, 132, 135, 136, 150, 151, 152, 157, 162, 179, 181, 182, 197, 198, 203, 215, 233, 235, 256, 260, 262, 267, 271, 275, 312, 320, 353, 366, 368, 371, 375, 376, 377, 393, 394, 396, 399, 400, 401, 404, 422, 467, 485, 526, 531, 551, 573, 574, 575, 576, 592, 593, 595, 596, 613, 631, 632, 633, 634, 643, 654, 657, 659, 661, 665, 672, 673, 690, 704, 714, 715, 774, 775, 792, 793, 830, 856, 857, 858, 859, 862, 863, 871, 898, 920, 921, 929, 956, 958, 962, 963, 964, 966, 969, 971, 976, 980, 981, 996, 1008, 1016, 1019, 1021, 1022, 1023], "o": [0, 17, 19, 27, 30, 38, 49, 55, 60, 61, 63, 64, 82, 85, 91, 97, 126, 157, 185, 190, 195, 197, 212, 232, 242, 257, 259, 266, 299, 300, 304, 310, 313, 321, 347, 357, 366, 368, 371, 387, 396, 398, 401, 403, 407, 409, 429, 432, 433, 435, 458, 460, 519, 589, 612, 651, 652, 677, 811, 839, 854, 895, 934, 935, 958, 960, 962, 963, 966, 967, 969, 970, 980, 981, 982, 1008, 1011, 1014, 1016, 1017, 1020, 1021, 1023], "m": [0, 8, 9, 11, 19, 26, 27, 44, 58, 59, 63, 64, 65, 80, 81, 95, 132, 154, 179, 197, 215, 257, 261, 290, 321, 325, 336, 342, 357, 358, 365, 366, 368, 369, 375, 377, 384, 387, 393, 394, 396, 398, 401, 403, 405, 407, 429, 430, 431, 435, 442, 458, 459, 485, 498, 513, 517, 519, 521, 526, 624, 630, 634, 649, 656, 670, 671, 674, 678, 693, 701, 710, 725, 740, 742, 743, 779, 780, 829, 854, 920, 945, 946, 956, 958, 960, 962, 963, 964, 966, 967, 968, 969, 970, 974, 976, 980, 982, 990, 1016, 1017, 1018, 1019, 1022, 1023, 1024], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 65, 75, 78, 79, 80, 81, 86, 95, 103, 106, 110, 113, 114, 118, 122, 123, 124, 132, 142, 150, 151, 152, 156, 157, 158, 161, 162, 167, 179, 181, 182, 186, 197, 204, 207, 215, 223, 229, 232, 242, 245, 248, 256, 257, 260, 262, 263, 264, 267, 270, 272, 275, 279, 284, 288, 290, 305, 313, 331, 344, 353, 366, 368, 372, 375, 382, 384, 393, 394, 396, 398, 399, 400, 401, 403, 404, 413, 417, 422, 431, 436, 438, 450, 454, 459, 463, 467, 468, 469, 483, 489, 498, 505, 519, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 573, 574, 575, 576, 591, 594, 595, 596, 612, 620, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 670, 671, 677, 681, 701, 706, 707, 708, 712, 714, 765, 769, 772, 781, 795, 798, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 832, 833, 834, 840, 841, 854, 859, 871, 878, 879, 883, 884, 885, 886, 888, 889, 891, 892, 893, 894, 896, 932, 956, 958, 960, 962, 963, 966, 967, 968, 969, 970, 973, 974, 976, 980, 981, 982, 986, 1001, 1008, 1012, 1015, 1018, 1019, 1020, 1021, 1023], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 30, 31, 32, 37, 38, 42, 48, 49, 50, 60, 61, 63, 70, 71, 82, 89, 92, 95, 98, 103, 105, 120, 149, 157, 197, 205, 211, 213, 215, 223, 227, 229, 230, 231, 232, 245, 256, 257, 265, 275, 283, 284, 290, 295, 317, 318, 321, 328, 329, 334, 344, 365, 366, 368, 373, 377, 382, 394, 396, 398, 399, 401, 403, 404, 406, 407, 429, 431, 432, 437, 445, 448, 473, 478, 488, 511, 519, 521, 542, 543, 550, 551, 566, 567, 575, 599, 600, 604, 607, 608, 629, 630, 633, 654, 655, 656, 665, 673, 674, 677, 678, 682, 684, 690, 693, 706, 707, 708, 710, 740, 748, 752, 762, 765, 772, 793, 818, 820, 822, 823, 824, 839, 850, 854, 856, 857, 859, 871, 876, 893, 894, 898, 958, 960, 962, 963, 964, 965, 966, 968, 974, 976, 978, 981, 982, 989, 997, 998, 999, 1011, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022], "perrot": [0, 1008], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 53, 55, 57, 61, 70, 78, 80, 81, 82, 85, 86, 98, 100, 101, 113, 119, 121, 122, 125, 135, 142, 145, 146, 157, 166, 167, 168, 173, 177, 181, 186, 187, 197, 198, 199, 215, 218, 219, 232, 253, 257, 258, 260, 262, 263, 271, 272, 283, 290, 301, 304, 309, 311, 337, 344, 349, 350, 351, 353, 357, 358, 359, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 382, 383, 384, 387, 390, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 422, 424, 426, 429, 430, 432, 435, 439, 448, 454, 455, 456, 457, 458, 460, 461, 481, 483, 485, 486, 487, 488, 509, 518, 520, 521, 523, 525, 526, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 562, 566, 567, 573, 574, 575, 576, 578, 579, 582, 588, 589, 591, 592, 593, 594, 595, 596, 602, 607, 608, 615, 618, 619, 620, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 669, 672, 673, 675, 677, 679, 682, 684, 686, 689, 690, 693, 694, 712, 713, 714, 715, 722, 725, 726, 739, 747, 751, 769, 772, 779, 780, 781, 784, 785, 787, 794, 795, 799, 804, 805, 806, 807, 808, 810, 822, 823, 824, 825, 826, 827, 829, 833, 834, 835, 839, 840, 841, 846, 848, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 883, 884, 890, 891, 892, 893, 894, 898, 914, 919, 920, 922, 925, 926, 934, 941, 952, 955, 956, 958, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 976, 977, 980, 981, 982, 987, 989, 990, 999, 1000, 1001, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "journal": [0, 81, 168, 257, 263, 365, 366, 368, 394, 396, 398, 403, 437, 447, 458, 519, 526, 612, 620, 630, 674, 677, 678, 690, 700, 715, 718, 719, 742, 743, 770, 808, 813, 859, 871, 955, 956, 960, 962, 963, 964, 967, 973, 978, 980, 981], "research": [0, 166, 257, 263, 366, 368, 382, 396, 486, 498, 620, 630, 677, 719, 808, 813, 955, 963, 967, 969, 981, 986, 987, 990], "volum": [0, 66, 79, 154, 366, 368, 396, 398, 406, 458, 519, 753, 962, 981, 990], "page": [0, 12, 17, 26, 71, 72, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 218, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 305, 310, 311, 313, 314, 319, 351, 357, 366, 368, 371, 373, 375, 377, 379, 385, 395, 396, 398, 458, 501, 502, 503, 613, 629, 813, 878, 920, 956, 966, 967, 992, 1001, 1006, 1008, 1012, 1013], "want": [0, 4, 12, 24, 25, 26, 55, 64, 71, 146, 162, 167, 197, 198, 199, 248, 257, 271, 295, 322, 326, 342, 353, 357, 358, 359, 369, 370, 372, 373, 375, 376, 377, 382, 383, 384, 385, 387, 390, 394, 395, 396, 397, 398, 403, 404, 405, 485, 488, 489, 495, 520, 534, 639, 640, 641, 643, 644, 651, 653, 659, 660, 661, 748, 829, 832, 848, 855, 876, 883, 955, 962, 965, 966, 967, 970, 972, 976, 977, 981, 986, 987, 992, 1000, 1008, 1022], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 55, 65, 66, 78, 80, 82, 86, 91, 92, 100, 118, 122, 135, 146, 149, 154, 156, 167, 168, 170, 173, 176, 186, 210, 214, 215, 220, 226, 234, 237, 239, 242, 247, 248, 256, 260, 262, 264, 266, 277, 279, 283, 284, 301, 312, 320, 326, 339, 342, 343, 347, 351, 353, 358, 359, 364, 365, 366, 367, 371, 372, 373, 375, 376, 379, 382, 383, 384, 385, 387, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 412, 425, 426, 427, 429, 430, 431, 435, 439, 441, 445, 448, 449, 450, 452, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 482, 488, 508, 516, 518, 519, 522, 523, 525, 526, 527, 529, 535, 540, 541, 542, 543, 544, 545, 549, 550, 551, 568, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 612, 629, 630, 656, 657, 659, 670, 671, 672, 673, 677, 681, 693, 709, 713, 714, 720, 721, 725, 762, 765, 767, 779, 780, 781, 804, 811, 812, 825, 826, 827, 829, 830, 831, 833, 834, 835, 842, 843, 847, 852, 855, 856, 858, 875, 876, 879, 883, 884, 891, 893, 903, 904, 909, 915, 934, 936, 955, 961, 962, 963, 965, 966, 967, 968, 969, 972, 973, 974, 979, 980, 981, 982, 986, 990, 992, 994, 996, 999, 1000, 1001, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "api": [0, 12, 50, 129, 164, 225, 227, 236, 240, 277, 343, 344, 359, 360, 364, 365, 371, 372, 374, 375, 380, 381, 382, 383, 385, 387, 390, 401, 403, 404, 414, 415, 418, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 481, 489, 493, 495, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 548, 549, 551, 552, 553, 554, 555, 564, 565, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 596, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 643, 662, 673, 674, 675, 676, 677, 687, 779, 780, 784, 785, 809, 827, 829, 831, 832, 835, 839, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 881, 887, 888, 932, 934, 955, 964, 965, 966, 969, 976, 980, 986, 987, 990, 992, 996, 998, 1003, 1005, 1006, 1007, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "design": [0, 13, 80, 129, 152, 166, 167, 178, 247, 299, 305, 351, 359, 365, 371, 376, 382, 383, 384, 385, 386, 396, 403, 405, 406, 500, 513, 617, 618, 633, 650, 654, 661, 665, 670, 781, 799, 800, 818, 820, 956, 962, 963, 966, 967, 976, 986, 987, 990, 994, 1010, 1017], "mai": [0, 8, 19, 25, 39, 44, 46, 56, 71, 86, 95, 109, 119, 146, 153, 155, 157, 158, 167, 173, 177, 181, 186, 203, 223, 260, 262, 264, 265, 293, 304, 318, 329, 342, 343, 344, 353, 357, 358, 359, 363, 365, 366, 367, 368, 370, 371, 373, 375, 376, 379, 382, 384, 385, 390, 393, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 417, 424, 425, 426, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 444, 447, 450, 454, 457, 467, 468, 469, 472, 473, 474, 481, 493, 494, 500, 519, 520, 523, 525, 529, 532, 533, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 559, 566, 579, 582, 587, 595, 596, 602, 605, 619, 620, 622, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 657, 658, 659, 661, 662, 663, 664, 666, 669, 671, 673, 674, 676, 677, 678, 680, 682, 690, 697, 700, 701, 703, 704, 706, 707, 708, 710, 722, 740, 747, 769, 770, 781, 783, 784, 785, 786, 795, 796, 797, 798, 800, 801, 804, 808, 811, 816, 817, 818, 819, 820, 822, 825, 826, 827, 829, 831, 833, 834, 835, 841, 842, 843, 846, 848, 858, 860, 861, 862, 863, 864, 866, 872, 875, 876, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 896, 901, 923, 924, 934, 955, 956, 958, 960, 962, 963, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 987, 992, 998, 999, 1008, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "consid": [0, 4, 12, 13, 25, 39, 55, 66, 71, 81, 95, 99, 119, 120, 122, 141, 145, 146, 162, 168, 197, 199, 257, 260, 264, 268, 277, 283, 284, 299, 311, 326, 334, 337, 342, 353, 357, 358, 359, 363, 370, 371, 373, 377, 379, 382, 384, 392, 396, 401, 402, 403, 404, 405, 406, 407, 408, 423, 429, 431, 435, 442, 459, 493, 494, 506, 518, 534, 535, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 570, 571, 573, 574, 576, 578, 592, 593, 605, 617, 618, 631, 637, 643, 644, 645, 647, 656, 664, 673, 674, 675, 677, 678, 679, 681, 685, 687, 690, 692, 694, 700, 710, 714, 718, 740, 770, 772, 776, 825, 826, 827, 829, 831, 833, 834, 835, 838, 840, 841, 846, 856, 857, 864, 878, 879, 888, 889, 891, 892, 893, 894, 950, 955, 961, 962, 963, 964, 966, 967, 969, 972, 973, 974, 976, 980, 981, 982, 987, 992, 999, 1011, 1012, 1016, 1020, 1021, 1023], "softwar": [0, 357, 368, 371, 379, 382, 384, 404, 612, 620, 643, 956, 990], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 306, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 357, 359, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 417, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 489, 491, 492, 493, 494, 495, 497, 500, 504, 506, 508, 509, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 672, 673, 674, 675, 676, 677, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 700, 702, 703, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 719, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 747, 748, 752, 753, 755, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 910, 911, 912, 913, 914, 915, 918, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 933, 934, 935, 937, 940, 954, 955, 956, 958, 960, 961, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 985, 986, 987, 990, 993, 995, 996, 997, 998, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "2013": [0, 173, 368, 396, 400, 401, 521, 710, 740, 958, 966, 985, 1009, 1010], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 66, 67, 81, 113, 169, 189, 192, 206, 207, 262, 263, 264, 294, 303, 337, 368, 369, 377, 379, 393, 394, 396, 400, 401, 403, 406, 459, 501, 502, 503, 523, 525, 532, 540, 541, 542, 543, 550, 551, 575, 592, 593, 595, 596, 600, 604, 607, 608, 619, 633, 634, 643, 654, 657, 659, 665, 672, 674, 677, 678, 690, 700, 709, 710, 715, 740, 770, 820, 854, 891, 892, 893, 894, 955, 960, 962, 963, 966, 968, 969, 970, 974, 978, 980, 982, 1000, 1011, 1016, 1020, 1021, 1022, 1023], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 396, 404, 818, 968, 985], "languag": [0, 344, 376, 390, 401, 404, 980, 986, 987, 990, 993], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 20, 21, 25, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 56, 59, 60, 62, 65, 68, 69, 71, 72, 74, 76, 79, 81, 90, 92, 94, 95, 98, 99, 104, 106, 107, 112, 113, 115, 118, 119, 120, 121, 122, 126, 127, 128, 130, 132, 135, 136, 137, 138, 143, 148, 149, 150, 151, 153, 156, 158, 159, 161, 164, 167, 168, 175, 176, 179, 180, 181, 182, 186, 187, 189, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 226, 229, 230, 231, 234, 236, 239, 242, 243, 244, 245, 246, 248, 251, 255, 257, 259, 260, 261, 262, 265, 271, 275, 277, 280, 281, 283, 285, 286, 287, 288, 290, 294, 295, 298, 300, 301, 302, 306, 307, 309, 311, 313, 314, 318, 319, 321, 322, 325, 326, 328, 333, 334, 337, 342, 348, 349, 350, 351, 356, 358, 360, 363, 364, 365, 367, 368, 371, 373, 374, 377, 378, 379, 380, 383, 387, 390, 392, 393, 394, 395, 398, 401, 402, 403, 404, 407, 408, 409, 411, 413, 414, 415, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 498, 499, 500, 505, 506, 507, 508, 509, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 600, 602, 603, 607, 608, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 689, 690, 692, 693, 695, 696, 698, 702, 703, 705, 709, 711, 712, 713, 714, 715, 718, 720, 721, 722, 724, 725, 726, 738, 739, 741, 745, 747, 748, 753, 767, 768, 769, 771, 772, 773, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 899, 901, 902, 903, 904, 907, 908, 909, 919, 920, 929, 932, 937, 938, 940, 941, 942, 943, 944, 947, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 993, 994, 996, 997, 999, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "mine": [0, 257, 343, 366, 396, 407, 429, 496, 548, 705, 718, 724, 767, 962, 966, 972, 978], "108": [0, 8, 179, 216, 1009], "122": [0, 112, 154, 162, 168, 201, 206, 216, 231, 377, 967], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 55, 57, 62, 65, 70, 74, 80, 81, 97, 98, 113, 115, 116, 117, 122, 123, 125, 127, 137, 138, 146, 149, 155, 162, 166, 168, 169, 170, 181, 192, 198, 199, 211, 218, 219, 220, 226, 230, 242, 248, 255, 259, 263, 264, 272, 283, 284, 293, 295, 301, 303, 304, 305, 306, 320, 326, 328, 329, 342, 343, 349, 350, 357, 366, 368, 371, 376, 379, 380, 382, 383, 393, 394, 395, 396, 400, 402, 403, 404, 405, 406, 429, 432, 434, 435, 437, 454, 467, 468, 469, 538, 539, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 629, 655, 656, 664, 674, 677, 678, 710, 715, 726, 730, 740, 773, 774, 789, 791, 823, 824, 828, 857, 858, 862, 864, 885, 887, 888, 891, 892, 893, 894, 935, 955, 960, 961, 962, 963, 965, 966, 969, 970, 972, 974, 976, 978, 981, 982, 983, 986, 987, 992, 993, 995, 1001, 1008, 1009, 1011, 1012, 1016, 1019, 1020, 1021, 1022, 1023], "qualiti": [0, 6, 24, 37, 46, 48, 49, 58, 98, 118, 167, 203, 251, 255, 264, 265, 266, 371, 379, 382, 384, 390, 391, 395, 396, 398, 401, 437, 447, 454, 459, 542, 543, 544, 545, 549, 550, 727, 795, 875, 876, 891, 892, 893, 894, 920, 961, 963, 971, 978, 982, 986, 987, 990, 996, 997, 1003], "png": [0, 32, 895], "svg": 0, "logo": [0, 400, 788], "avail": [0, 5, 11, 12, 13, 41, 56, 57, 98, 117, 120, 121, 146, 149, 154, 158, 166, 167, 168, 186, 197, 205, 215, 219, 235, 254, 255, 260, 261, 264, 282, 283, 284, 290, 304, 309, 310, 311, 312, 314, 320, 322, 353, 357, 365, 366, 368, 369, 370, 371, 372, 376, 380, 383, 384, 387, 390, 393, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 432, 435, 436, 437, 438, 454, 455, 456, 457, 458, 459, 460, 461, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 493, 520, 534, 540, 541, 542, 543, 544, 545, 549, 550, 573, 576, 578, 579, 595, 596, 617, 618, 642, 650, 655, 657, 658, 659, 661, 674, 681, 684, 716, 717, 781, 784, 785, 795, 805, 806, 811, 812, 814, 815, 816, 817, 829, 840, 841, 850, 859, 867, 871, 876, 927, 934, 956, 960, 963, 965, 966, 967, 968, 969, 972, 976, 979, 980, 981, 985, 986, 987, 990, 992, 996, 1001, 1003, 1008, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1024], "doc": [0, 4, 8, 19, 342, 344, 358, 369, 371, 375, 376, 379, 384, 387, 389, 390, 404, 573, 574, 576, 762, 765, 774, 775, 806, 1001, 1008, 1012, 1022], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 365, 368, 370, 371, 372, 374, 375, 377, 379, 380, 382, 383, 387, 390, 393, 397, 401, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 950, 951, 952, 953, 954, 963, 976, 982, 986, 990, 1000, 1001, 1018, 1022], "directori": [0, 8, 279, 365, 369, 371, 373, 377, 379, 384, 387, 397, 426, 430, 435, 471, 484, 843, 844, 1022], "driven": [0, 986, 990], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 49, 53, 55, 60, 72, 75, 78, 82, 85, 100, 103, 113, 115, 119, 122, 123, 129, 143, 146, 149, 154, 155, 168, 169, 178, 186, 197, 219, 222, 223, 226, 232, 257, 264, 271, 275, 277, 282, 294, 299, 311, 337, 342, 343, 353, 357, 358, 359, 365, 366, 368, 369, 370, 371, 373, 377, 379, 382, 384, 390, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 425, 428, 432, 434, 436, 439, 444, 481, 493, 517, 536, 552, 566, 567, 568, 574, 591, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 615, 617, 618, 623, 628, 640, 641, 657, 672, 677, 680, 685, 747, 749, 781, 784, 785, 795, 806, 810, 811, 822, 840, 841, 846, 855, 856, 861, 885, 886, 888, 899, 935, 955, 956, 959, 960, 961, 962, 963, 965, 966, 967, 969, 970, 971, 973, 974, 976, 980, 981, 982, 992, 996, 999, 1017, 1018, 1020, 1021, 1024], "institut": [0, 368, 969], "privat": [0, 375, 384, 385, 899, 990, 1008, 1016, 1018, 1019, 1021, 1022], "grant": [0, 371], "assur": [0, 384, 779, 780, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "sustain": 0, "like": [0, 4, 12, 19, 52, 55, 58, 60, 70, 89, 92, 98, 103, 105, 112, 116, 122, 125, 149, 155, 167, 177, 197, 248, 257, 260, 261, 264, 265, 271, 286, 296, 299, 304, 305, 309, 320, 329, 342, 343, 353, 357, 359, 363, 365, 366, 369, 370, 371, 373, 375, 378, 379, 380, 382, 383, 384, 390, 392, 394, 396, 397, 399, 400, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 500, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 564, 566, 567, 568, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 901, 908, 909, 917, 922, 929, 930, 934, 937, 938, 939, 951, 953, 955, 958, 960, 961, 962, 963, 966, 968, 969, 970, 972, 973, 976, 981, 982, 986, 987, 989, 990, 992, 999, 1001, 1005, 1008, 1011, 1012, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024], "thank": [0, 4, 17, 25, 55, 86, 169, 173, 197, 266, 342, 343, 370, 379, 990, 1008, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "funder": 0, "member": [0, 342, 343, 366, 371, 374, 385, 396, 411, 427, 431, 433, 436, 438, 477, 540, 541, 548, 566, 643, 644, 651, 653, 661, 662, 663, 689, 690, 700, 702, 715, 720, 721, 741, 770, 777, 781, 883, 962, 969, 992, 1008, 1020, 1023], "consortium": [0, 990], "foundat": [0, 129, 371, 394, 969], "face": [0, 3, 15, 36, 53, 68, 94, 98, 107, 117, 164, 225, 240, 364, 371, 375, 396, 401, 403, 405, 434, 457, 478, 479, 480, 506, 517, 518, 522, 524, 525, 526, 543, 569, 642, 658, 682, 698, 795, 809, 826, 863, 888, 906, 969, 982, 983, 984, 995, 1000, 1003, 1008, 1016], "2022": [0, 358, 403, 690, 976, 1022, 1023], "microsoft": [0, 12, 369, 372, 387], "m\u00fcller": [0, 31, 300, 301, 385, 401, 520, 849, 970, 976, 980, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022], "2020": [0, 366, 1018, 1019, 1020, 1021], "quansight": 0, "lab": [0, 366, 453, 521, 881, 990, 1019], "2021": [0, 369, 371, 387, 656, 1020, 1021], "columbia": 0, "univers": [0, 157, 342, 366, 368, 374, 396, 401, 404, 575, 772, 818, 822, 878, 962, 964, 966, 968], "2016": [0, 223, 365, 396, 955, 1013, 1014], "sydnei": 0, "2017": [0, 257, 365, 394, 396, 407, 429, 966, 1014, 1015], "receiv": [0, 19, 135, 164, 250, 254, 273, 344, 353, 371, 373, 379, 384, 400, 403, 489, 643, 687, 691, 693, 711, 766, 772, 773, 800, 809, 811, 812, 850, 888, 967, 970, 971, 980, 1018, 1019], "improv": [0, 4, 24, 25, 33, 78, 79, 82, 100, 106, 110, 111, 118, 120, 121, 122, 124, 129, 142, 162, 167, 173, 183, 197, 205, 215, 258, 260, 277, 296, 304, 332, 343, 353, 358, 369, 374, 376, 377, 379, 380, 382, 384, 385, 390, 395, 401, 403, 405, 434, 435, 516, 517, 519, 522, 523, 524, 526, 527, 528, 531, 539, 542, 543, 544, 545, 546, 547, 549, 550, 595, 596, 628, 637, 649, 651, 652, 653, 657, 658, 659, 660, 661, 663, 670, 672, 677, 713, 714, 768, 771, 772, 832, 840, 841, 857, 859, 871, 891, 892, 894, 920, 960, 962, 963, 966, 969, 970, 980, 981, 982, 985, 986, 987, 990, 999, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 34, 67, 106, 126, 131, 158, 166, 167, 181, 182, 192, 197, 198, 199, 215, 221, 230, 235, 254, 257, 260, 264, 266, 267, 299, 310, 311, 342, 351, 357, 366, 370, 371, 373, 378, 380, 384, 385, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 408, 423, 424, 427, 431, 432, 434, 449, 452, 479, 483, 485, 489, 493, 494, 495, 510, 512, 514, 515, 516, 518, 520, 521, 522, 527, 530, 531, 533, 534, 535, 546, 547, 548, 577, 578, 579, 580, 581, 583, 584, 585, 591, 595, 596, 605, 617, 628, 631, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 654, 657, 658, 659, 660, 662, 665, 666, 667, 668, 669, 672, 675, 683, 685, 687, 692, 694, 697, 698, 700, 703, 705, 708, 711, 713, 714, 715, 719, 720, 722, 723, 724, 725, 726, 727, 728, 736, 738, 742, 750, 766, 767, 768, 771, 772, 773, 779, 780, 784, 785, 806, 823, 824, 829, 846, 847, 850, 856, 859, 862, 867, 871, 875, 876, 878, 879, 883, 884, 887, 888, 889, 900, 918, 920, 931, 933, 957, 958, 962, 964, 966, 967, 969, 970, 971, 973, 976, 981, 997, 999, 1001, 1009, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "It": [0, 4, 7, 8, 9, 16, 25, 37, 40, 53, 55, 58, 72, 78, 80, 82, 95, 98, 99, 105, 113, 115, 118, 122, 129, 146, 154, 155, 156, 161, 162, 167, 168, 169, 177, 181, 185, 186, 194, 197, 211, 214, 215, 218, 219, 226, 231, 252, 253, 255, 257, 258, 260, 263, 264, 277, 280, 283, 284, 285, 287, 288, 290, 299, 303, 304, 306, 309, 325, 329, 337, 342, 343, 344, 351, 353, 357, 358, 359, 364, 366, 368, 369, 371, 373, 375, 376, 377, 379, 380, 382, 383, 384, 387, 390, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 419, 422, 423, 426, 427, 428, 429, 430, 432, 433, 434, 437, 444, 447, 452, 453, 454, 459, 463, 470, 472, 481, 493, 500, 509, 518, 520, 521, 523, 525, 526, 534, 535, 538, 539, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 574, 581, 587, 591, 592, 593, 596, 599, 600, 604, 605, 607, 608, 612, 615, 616, 617, 618, 626, 627, 628, 631, 632, 635, 637, 638, 639, 640, 643, 645, 646, 647, 648, 651, 652, 653, 655, 656, 657, 659, 661, 662, 663, 666, 667, 668, 669, 672, 674, 676, 677, 678, 680, 681, 682, 683, 685, 687, 689, 693, 694, 695, 701, 707, 718, 726, 727, 731, 742, 743, 746, 749, 765, 767, 781, 783, 784, 785, 787, 793, 794, 795, 807, 810, 819, 820, 825, 826, 827, 829, 832, 833, 834, 835, 839, 840, 841, 845, 846, 847, 851, 852, 853, 857, 860, 862, 872, 875, 876, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 907, 920, 934, 937, 940, 942, 943, 944, 945, 946, 947, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 976, 977, 979, 980, 981, 982, 986, 990, 992, 998, 999, 1000, 1001, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "provid": [0, 5, 8, 11, 24, 27, 37, 42, 55, 60, 81, 95, 112, 116, 117, 127, 129, 149, 155, 167, 168, 176, 183, 185, 186, 189, 198, 206, 219, 223, 227, 228, 247, 257, 258, 259, 263, 287, 290, 295, 299, 303, 309, 310, 312, 314, 327, 334, 342, 343, 347, 348, 353, 357, 359, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 377, 379, 380, 382, 383, 384, 386, 387, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 408, 416, 422, 425, 427, 428, 429, 431, 432, 434, 435, 437, 444, 445, 478, 479, 481, 483, 486, 517, 518, 519, 520, 523, 525, 532, 536, 537, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 573, 576, 578, 579, 586, 590, 596, 612, 617, 618, 619, 628, 631, 632, 637, 641, 642, 643, 644, 645, 646, 647, 648, 651, 653, 656, 658, 661, 662, 663, 666, 679, 684, 696, 719, 725, 748, 758, 762, 772, 774, 776, 780, 781, 783, 784, 785, 786, 788, 789, 790, 791, 793, 794, 795, 800, 801, 802, 812, 814, 817, 818, 819, 820, 821, 822, 825, 826, 827, 829, 830, 831, 833, 834, 835, 853, 854, 858, 860, 879, 883, 884, 887, 888, 891, 892, 893, 894, 898, 909, 914, 942, 943, 944, 955, 956, 958, 961, 962, 963, 965, 966, 967, 969, 970, 971, 972, 973, 974, 976, 979, 980, 981, 982, 983, 986, 987, 990, 992, 996, 999, 1001, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "2012": [0, 81, 394, 403, 540, 541, 548, 624, 727, 955, 959, 966, 985, 1008], "fulltime": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 343, 344, 347, 348, 349, 350, 351, 353, 357, 358, 359, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 379, 382, 384, 385, 387, 392, 393, 394, 395, 396, 398, 399, 401, 403, 404, 406, 407, 422, 426, 428, 429, 430, 431, 432, 435, 437, 440, 442, 443, 444, 446, 447, 448, 449, 450, 452, 453, 457, 481, 484, 486, 504, 508, 519, 521, 523, 525, 532, 547, 552, 553, 554, 555, 575, 595, 604, 612, 613, 614, 615, 619, 624, 625, 628, 631, 635, 637, 639, 645, 647, 649, 651, 652, 658, 661, 662, 663, 670, 671, 675, 677, 679, 686, 776, 779, 780, 781, 783, 784, 785, 786, 788, 790, 795, 796, 797, 800, 802, 804, 805, 806, 807, 808, 811, 813, 818, 819, 820, 821, 822, 823, 824, 831, 833, 834, 835, 839, 840, 841, 842, 843, 844, 845, 847, 848, 850, 853, 856, 857, 858, 862, 867, 875, 876, 880, 881, 885, 888, 889, 897, 922, 932, 955, 956, 958, 959, 962, 963, 965, 966, 967, 968, 969, 970, 971, 973, 974, 976, 978, 979, 980, 981, 982, 986, 990, 992, 997, 999, 1000, 1001, 1008, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "host": [0, 342, 366, 371, 375, 379, 380, 876, 934, 1001, 1024], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 57, 66, 69, 72, 86, 97, 98, 100, 103, 113, 115, 118, 119, 123, 125, 131, 141, 161, 162, 164, 166, 167, 168, 169, 173, 176, 190, 197, 215, 218, 219, 220, 222, 226, 227, 228, 230, 232, 236, 244, 247, 252, 254, 257, 258, 259, 266, 267, 282, 283, 284, 298, 299, 303, 304, 307, 309, 310, 312, 317, 329, 336, 339, 342, 343, 347, 351, 353, 357, 363, 364, 366, 367, 368, 371, 373, 375, 376, 377, 379, 380, 383, 384, 385, 387, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 429, 431, 433, 435, 437, 442, 449, 454, 473, 481, 482, 488, 519, 520, 526, 534, 536, 537, 545, 546, 547, 552, 553, 566, 573, 574, 576, 582, 587, 595, 596, 597, 598, 605, 612, 613, 615, 624, 628, 637, 643, 644, 656, 657, 658, 659, 660, 661, 664, 672, 677, 681, 684, 689, 703, 747, 758, 762, 769, 774, 781, 784, 785, 786, 787, 788, 790, 795, 798, 800, 803, 804, 805, 806, 807, 808, 810, 812, 830, 838, 843, 844, 855, 856, 857, 859, 863, 864, 871, 883, 884, 885, 886, 887, 888, 889, 914, 955, 956, 958, 959, 960, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 979, 980, 981, 982, 984, 987, 989, 990, 992, 996, 999, 1000, 1003, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1021, 1022, 1023, 1024], "event": [0, 4, 16, 197, 215, 260, 394, 396, 573, 574, 621, 818, 908, 962, 967, 968, 986, 990, 1014], "pari": [0, 368, 397, 451, 748, 851, 977, 1022], "saclai": 0, "center": [0, 4, 7, 8, 9, 13, 24, 26, 33, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 56, 59, 60, 61, 63, 64, 81, 91, 100, 102, 105, 120, 121, 122, 123, 146, 162, 168, 178, 189, 191, 197, 198, 208, 209, 221, 222, 226, 227, 242, 245, 246, 252, 258, 268, 282, 285, 287, 294, 299, 301, 302, 313, 319, 327, 329, 330, 331, 336, 343, 344, 366, 367, 368, 376, 395, 396, 398, 399, 401, 402, 403, 409, 425, 427, 428, 431, 432, 433, 434, 437, 439, 444, 445, 446, 447, 448, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 486, 497, 509, 519, 520, 526, 529, 535, 591, 594, 595, 596, 617, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 675, 679, 779, 848, 849, 852, 861, 863, 873, 874, 883, 884, 960, 962, 963, 965, 973, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1022], "scienc": [0, 38, 80, 157, 365, 368, 382, 396, 425, 439, 523, 525, 532, 673, 674, 678, 830, 956, 958, 962, 963, 966, 969, 978, 987, 990, 995, 1016], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 32, 33, 37, 40, 47, 53, 55, 57, 58, 60, 61, 64, 66, 71, 81, 89, 91, 95, 98, 100, 101, 105, 110, 115, 122, 125, 129, 132, 145, 146, 149, 156, 157, 161, 166, 167, 168, 169, 170, 173, 176, 177, 181, 186, 187, 189, 190, 191, 193, 197, 199, 201, 206, 207, 212, 215, 220, 226, 233, 244, 247, 253, 254, 255, 257, 258, 260, 261, 264, 265, 266, 267, 275, 277, 282, 296, 300, 301, 304, 305, 309, 311, 312, 313, 320, 328, 329, 338, 342, 343, 344, 347, 351, 353, 357, 358, 359, 365, 366, 367, 368, 370, 371, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 390, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 426, 429, 430, 431, 432, 434, 435, 436, 437, 438, 440, 441, 442, 445, 447, 449, 454, 459, 472, 473, 475, 476, 477, 478, 479, 480, 481, 485, 486, 487, 488, 489, 490, 493, 494, 495, 497, 499, 519, 524, 525, 528, 532, 536, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 554, 566, 568, 569, 573, 574, 575, 576, 595, 596, 600, 601, 605, 612, 615, 617, 618, 619, 620, 628, 632, 633, 634, 635, 639, 642, 643, 644, 646, 651, 653, 654, 656, 658, 659, 660, 661, 663, 665, 673, 677, 680, 684, 688, 694, 705, 718, 734, 735, 738, 747, 755, 758, 762, 763, 764, 765, 767, 772, 774, 775, 778, 779, 780, 781, 784, 785, 787, 788, 789, 791, 793, 795, 799, 800, 804, 806, 807, 809, 810, 811, 812, 813, 815, 816, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 839, 843, 846, 847, 848, 850, 851, 853, 854, 855, 856, 857, 862, 863, 864, 867, 869, 883, 885, 886, 887, 888, 889, 891, 892, 893, 894, 899, 909, 912, 922, 937, 955, 956, 958, 960, 961, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 980, 981, 982, 983, 985, 986, 990, 992, 996, 998, 999, 1000, 1001, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "2014": [0, 52, 365, 401, 403, 406, 515, 592, 593, 607, 608, 643, 677, 840, 841, 919, 920, 963, 970, 990, 1011], "2015": [0, 168, 365, 406, 693, 706, 707, 708, 840, 841, 966, 973, 990, 1012, 1013], "50": [0, 4, 7, 10, 14, 16, 24, 32, 33, 38, 50, 52, 59, 60, 65, 66, 70, 71, 85, 92, 95, 98, 105, 113, 122, 127, 128, 150, 152, 153, 154, 155, 166, 167, 168, 177, 181, 192, 197, 200, 204, 205, 209, 211, 213, 215, 218, 222, 223, 229, 230, 232, 239, 252, 257, 259, 260, 270, 277, 296, 299, 303, 311, 313, 318, 320, 322, 327, 336, 337, 343, 366, 368, 371, 376, 400, 403, 404, 405, 408, 427, 458, 485, 489, 508, 518, 524, 529, 538, 539, 554, 578, 579, 600, 602, 643, 644, 651, 653, 655, 661, 662, 663, 677, 698, 781, 795, 812, 832, 883, 892, 961, 962, 966, 967, 969, 972, 976, 1008], "2018": [0, 197, 215, 404, 435, 955, 966, 984, 990, 1015, 1016], "nyu": [0, 120, 179, 832], "moor": [0, 719, 966, 990], "environ": [0, 12, 26, 71, 72, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 305, 310, 311, 313, 314, 319, 351, 357, 366, 368, 369, 371, 377, 379, 382, 387, 390, 397, 484, 986, 987, 990, 1015, 1016], "student": [0, 97, 257, 963, 987, 990], "t\u00e9l\u00e9com": [0, 984], "paristech": [0, 24, 25, 42, 226, 984], "rv": [0, 120, 261, 299, 785, 793, 795, 955, 1008, 1009, 1012, 1013, 1014, 1015, 1016], "thierri": [0, 242, 244, 990, 1014, 1015, 1022], "guillemot": [0, 242, 244, 1014, 1015], "labex": 0, "digicosm": 0, "goix": [0, 1012, 1014, 1015, 1016, 1017], "mathurin": [0, 1019, 1021, 1022], "massia": [0, 1019, 1021, 1022], "2019": [0, 168, 369, 396, 437, 447, 677, 963, 973, 976, 1016, 1017, 1018], "dure": [0, 4, 5, 12, 50, 55, 58, 72, 75, 86, 100, 114, 119, 126, 143, 149, 154, 167, 168, 170, 186, 198, 205, 255, 259, 277, 311, 312, 357, 359, 369, 371, 373, 376, 384, 385, 396, 397, 401, 403, 404, 406, 407, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 444, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 598, 599, 600, 602, 604, 605, 607, 608, 610, 612, 613, 614, 615, 617, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 685, 773, 779, 780, 781, 784, 785, 795, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 871, 874, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 955, 956, 958, 962, 963, 969, 976, 978, 982, 996, 1001, 1003, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "phd": [0, 396, 403, 987, 990], "chan": [0, 821, 863], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 57, 58, 60, 64, 68, 81, 123, 130, 131, 132, 150, 155, 164, 167, 177, 190, 212, 218, 219, 223, 241, 243, 244, 249, 257, 277, 311, 319, 329, 343, 353, 358, 366, 371, 373, 379, 380, 382, 384, 396, 401, 403, 405, 406, 408, 427, 428, 432, 433, 434, 435, 436, 437, 438, 444, 445, 446, 447, 463, 497, 500, 516, 517, 518, 522, 523, 525, 528, 530, 531, 532, 533, 538, 539, 544, 545, 578, 592, 593, 595, 596, 604, 605, 612, 625, 630, 631, 632, 633, 637, 638, 643, 645, 646, 647, 648, 651, 652, 653, 654, 656, 661, 662, 663, 665, 666, 669, 675, 676, 677, 679, 680, 779, 780, 813, 832, 839, 840, 841, 879, 906, 919, 920, 935, 940, 941, 958, 962, 963, 970, 971, 972, 980, 982, 986, 998, 1000, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "were": [0, 4, 32, 70, 71, 74, 80, 81, 119, 122, 143, 146, 154, 162, 197, 198, 227, 266, 268, 295, 296, 304, 310, 311, 313, 314, 320, 342, 344, 351, 353, 365, 366, 368, 371, 372, 375, 382, 384, 393, 397, 403, 404, 449, 452, 453, 481, 546, 547, 573, 576, 587, 784, 785, 800, 807, 880, 881, 917, 955, 966, 967, 982, 989, 1000, 1001, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "through": [0, 7, 115, 119, 157, 167, 218, 231, 252, 257, 260, 282, 303, 304, 327, 334, 344, 351, 368, 369, 371, 373, 378, 380, 384, 385, 387, 396, 399, 401, 403, 405, 406, 431, 449, 452, 457, 520, 542, 543, 546, 549, 550, 551, 566, 578, 579, 582, 632, 636, 638, 640, 643, 644, 646, 648, 650, 653, 661, 662, 673, 676, 705, 787, 859, 871, 875, 876, 891, 892, 893, 894, 926, 955, 956, 963, 966, 968, 969, 970, 972, 974, 976, 980, 981, 982, 990, 992, 999, 1001, 1008, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1024], "program": [0, 50, 343, 353, 358, 359, 368, 369, 371, 377, 382, 493, 620, 655, 873, 874, 962, 981, 982, 986, 987, 1008, 1010], "immanuel": [0, 1008, 1009, 1013], "bayer": [0, 1008, 1009, 1013], "kemal": [0, 20, 21, 1010, 1011], "eren": [0, 20, 21, 1010, 1011], "tr\u00e9segni": [0, 1010], "hamzeh": [0, 1011, 1012], "alsalhi": [0, 1011, 1012], "issam": [0, 293, 1014], "laradji": [0, 293, 1014], "maheshakya": [0, 1011, 1012, 1013], "wijewardena": [0, 1011, 1012, 1013], "xue": [0, 1012, 1013, 1014, 1016, 1017, 1020], "nelson": [0, 1014, 1015, 1020], "yenchen": [0, 1014], "lin": [0, 519, 643, 981, 1013, 1014, 1015, 1016], "neurodebian": 0, "debian": [0, 357, 369, 377], "packag": [0, 46, 53, 161, 277, 358, 364, 365, 368, 369, 371, 372, 373, 375, 377, 380, 382, 384, 387, 398, 403, 404, 437, 463, 631, 632, 934, 956, 962, 965, 969, 976, 982, 990, 995, 1008, 1014, 1016, 1017, 1018], "dr": [0, 368, 396, 1022], "jame": [0, 368, 400, 813, 967, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1020, 1021], "haxbi": 0, "dartmouth": 0, "colleg": [0, 166], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 53, 55, 56, 58, 62, 67, 71, 74, 78, 80, 81, 86, 90, 95, 111, 112, 122, 125, 126, 129, 130, 142, 149, 151, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 169, 170, 173, 176, 178, 180, 181, 185, 186, 187, 191, 192, 197, 198, 205, 206, 211, 214, 215, 218, 220, 226, 230, 235, 243, 244, 245, 251, 252, 257, 258, 259, 260, 263, 265, 280, 283, 288, 294, 295, 299, 304, 310, 311, 312, 313, 314, 325, 326, 328, 329, 337, 339, 342, 343, 344, 351, 353, 357, 358, 359, 364, 365, 366, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 387, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 417, 428, 432, 434, 436, 438, 444, 448, 450, 453, 467, 468, 469, 484, 493, 494, 500, 508, 509, 519, 521, 526, 533, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 555, 557, 559, 573, 591, 594, 596, 617, 618, 620, 624, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 664, 667, 668, 674, 677, 678, 682, 683, 685, 686, 687, 692, 693, 700, 705, 710, 711, 722, 723, 724, 730, 738, 740, 741, 747, 766, 768, 771, 772, 773, 776, 779, 799, 800, 816, 817, 818, 819, 820, 821, 822, 826, 834, 841, 843, 850, 881, 884, 886, 889, 891, 892, 893, 894, 903, 904, 934, 955, 956, 958, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 973, 976, 979, 980, 981, 982, 985, 986, 987, 989, 990, 992, 997, 999, 1000, 1001, 1005, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "particip": [0, 370, 371, 385, 990], "could": [0, 4, 9, 13, 27, 37, 42, 53, 71, 72, 95, 98, 111, 112, 119, 122, 143, 149, 154, 162, 166, 167, 168, 197, 198, 206, 215, 222, 231, 232, 251, 257, 280, 285, 288, 312, 325, 326, 342, 347, 359, 371, 377, 379, 384, 387, 390, 394, 400, 403, 404, 408, 459, 518, 523, 592, 593, 614, 656, 783, 788, 790, 955, 956, 962, 963, 973, 974, 976, 981, 987, 1000, 1005, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "attend": 0, "psf": [0, 371], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 49, 55, 71, 78, 95, 113, 126, 149, 167, 168, 169, 197, 201, 214, 215, 231, 257, 258, 259, 260, 262, 263, 264, 266, 267, 275, 309, 329, 337, 342, 343, 353, 357, 358, 359, 364, 365, 366, 369, 371, 372, 373, 374, 375, 377, 379, 382, 383, 384, 387, 390, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 406, 408, 410, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 447, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 481, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 676, 677, 694, 706, 707, 708, 712, 740, 762, 767, 769, 772, 779, 780, 781, 783, 784, 785, 787, 793, 794, 795, 799, 800, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 901, 903, 904, 907, 912, 934, 937, 940, 955, 958, 961, 962, 963, 965, 966, 967, 968, 969, 974, 976, 981, 982, 987, 990, 992, 999, 1000, 1001, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1021, 1022, 1023, 1024], "tinyclu": 0, "french": [0, 215, 305], "associ": [0, 11, 24, 25, 80, 149, 166, 167, 245, 305, 317, 319, 342, 379, 396, 398, 400, 401, 403, 404, 431, 434, 454, 455, 456, 457, 458, 459, 460, 461, 478, 479, 480, 509, 542, 546, 549, 590, 591, 615, 630, 643, 644, 651, 653, 659, 660, 661, 674, 680, 684, 715, 723, 806, 826, 834, 848, 860, 872, 880, 889, 891, 893, 909, 965, 966, 969, 976, 979, 990, 1000, 1008, 1020, 1024], "fond": [0, 990], "de": [0, 12, 24, 25, 26, 27, 74, 114, 129, 149, 150, 152, 153, 154, 155, 156, 158, 188, 231, 232, 305, 319, 337, 368, 620, 673, 748, 962, 963, 987, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 55, 62, 66, 72, 117, 122, 129, 143, 146, 154, 161, 168, 169, 186, 197, 198, 199, 215, 219, 231, 251, 254, 257, 258, 260, 266, 329, 337, 343, 351, 357, 366, 368, 371, 376, 377, 379, 382, 385, 396, 398, 401, 404, 406, 478, 479, 485, 489, 495, 631, 632, 883, 956, 962, 963, 966, 971, 972, 973, 987, 990, 997, 999, 1000, 1008], "our": [0, 4, 5, 7, 11, 12, 42, 53, 56, 70, 71, 80, 81, 86, 95, 96, 109, 111, 116, 119, 122, 123, 141, 146, 149, 154, 156, 166, 167, 168, 169, 170, 197, 215, 220, 222, 251, 257, 260, 263, 264, 295, 299, 305, 310, 312, 322, 326, 332, 333, 334, 337, 342, 343, 344, 353, 358, 370, 375, 376, 379, 382, 383, 384, 385, 396, 400, 403, 404, 407, 429, 435, 548, 629, 677, 693, 705, 710, 722, 740, 825, 826, 827, 829, 831, 833, 834, 835, 955, 956, 962, 963, 966, 972, 976, 979, 980, 981, 987, 990, 992, 999, 1000, 1001, 1015, 1016, 1018, 1019, 1022, 1023], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 357, 358, 363, 368, 369, 372, 373, 375, 379, 382, 383, 384, 385, 387, 390, 393, 394, 396, 397, 399, 400, 401, 405, 406, 422, 486, 520, 524, 526, 528, 531, 544, 545, 596, 601, 606, 609, 623, 624, 625, 626, 641, 651, 653, 658, 661, 672, 674, 677, 678, 684, 694, 781, 803, 811, 812, 813, 815, 821, 829, 840, 844, 863, 955, 960, 962, 963, 965, 966, 967, 973, 974, 980, 981, 987, 990, 992, 1003, 1008, 1012, 1013, 1016, 1020, 1021, 1022, 1023, 1024], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 43, 48, 52, 53, 54, 55, 60, 64, 75, 82, 91, 95, 97, 98, 110, 115, 117, 118, 122, 131, 132, 146, 154, 155, 157, 164, 166, 167, 168, 176, 181, 183, 189, 190, 191, 197, 198, 199, 200, 206, 208, 212, 214, 215, 218, 219, 226, 232, 236, 239, 243, 245, 247, 255, 258, 259, 260, 261, 263, 264, 265, 267, 269, 275, 277, 282, 295, 299, 300, 304, 309, 310, 311, 312, 314, 317, 319, 320, 321, 326, 329, 334, 338, 342, 343, 344, 348, 351, 353, 357, 358, 359, 364, 366, 367, 368, 369, 371, 373, 375, 376, 377, 379, 380, 382, 383, 384, 385, 392, 393, 394, 395, 396, 397, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 413, 414, 415, 417, 418, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 488, 493, 494, 500, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 568, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 685, 686, 687, 690, 694, 698, 699, 700, 701, 702, 703, 705, 706, 707, 710, 712, 713, 714, 716, 717, 719, 720, 721, 722, 729, 730, 732, 734, 735, 737, 740, 745, 753, 758, 762, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 787, 788, 790, 791, 793, 795, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 903, 904, 905, 909, 911, 912, 913, 914, 925, 929, 934, 941, 950, 955, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 971, 973, 976, 979, 980, 981, 982, 986, 987, 990, 992, 993, 995, 996, 998, 999, 1000, 1001, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "handl": [0, 4, 71, 119, 125, 129, 173, 181, 232, 259, 264, 266, 277, 284, 305, 309, 342, 344, 357, 363, 365, 369, 371, 372, 373, 380, 382, 384, 403, 404, 481, 529, 562, 566, 567, 570, 571, 573, 574, 576, 595, 620, 631, 632, 637, 643, 644, 645, 646, 647, 653, 660, 661, 663, 666, 705, 772, 847, 856, 857, 883, 888, 895, 921, 963, 966, 967, 968, 969, 972, 974, 981, 982, 986, 987, 990, 1003, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 37, 49, 57, 62, 71, 75, 80, 82, 96, 97, 98, 100, 109, 112, 119, 126, 127, 129, 142, 143, 145, 153, 155, 162, 164, 167, 168, 169, 175, 176, 181, 183, 190, 191, 196, 198, 199, 201, 203, 212, 213, 215, 216, 221, 222, 227, 228, 229, 230, 232, 242, 244, 248, 250, 251, 257, 266, 273, 277, 281, 296, 299, 301, 303, 304, 306, 310, 311, 312, 313, 321, 324, 326, 331, 332, 337, 338, 340, 342, 343, 344, 351, 353, 357, 358, 363, 366, 367, 371, 372, 373, 376, 377, 379, 380, 382, 384, 385, 394, 395, 396, 397, 400, 402, 403, 404, 405, 406, 408, 422, 426, 430, 431, 435, 437, 441, 447, 448, 449, 450, 452, 453, 473, 481, 482, 488, 489, 493, 511, 517, 520, 521, 523, 525, 529, 532, 534, 536, 537, 538, 542, 543, 544, 545, 546, 547, 549, 550, 551, 557, 573, 574, 576, 577, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 620, 623, 628, 635, 637, 642, 643, 644, 645, 649, 650, 651, 653, 654, 657, 661, 662, 663, 670, 671, 672, 673, 674, 675, 676, 677, 679, 683, 684, 687, 691, 692, 697, 700, 702, 704, 705, 710, 711, 712, 719, 721, 723, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 742, 743, 766, 769, 772, 773, 776, 779, 780, 781, 782, 786, 788, 789, 790, 791, 793, 799, 805, 809, 812, 831, 833, 834, 835, 838, 843, 844, 846, 847, 848, 851, 855, 856, 857, 858, 859, 860, 862, 863, 870, 871, 872, 873, 874, 876, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 903, 904, 918, 920, 924, 926, 929, 955, 956, 957, 958, 959, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 977, 978, 979, 980, 981, 982, 987, 999, 1000, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "profit": 0, "organ": [0, 11, 70, 80, 342, 365, 370, 371, 385, 831, 986], "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 37, 39, 40, 43, 44, 46, 49, 53, 55, 56, 57, 58, 65, 67, 70, 71, 72, 75, 78, 80, 81, 86, 92, 97, 99, 100, 101, 106, 113, 114, 115, 119, 120, 121, 122, 125, 127, 128, 129, 130, 131, 132, 135, 141, 143, 145, 146, 149, 150, 154, 155, 156, 161, 162, 166, 167, 168, 170, 173, 176, 177, 181, 186, 190, 197, 198, 199, 203, 205, 211, 213, 214, 215, 218, 219, 220, 222, 226, 227, 230, 231, 232, 233, 235, 236, 242, 243, 247, 248, 251, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 271, 272, 275, 277, 282, 283, 284, 294, 299, 301, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 317, 319, 320, 321, 329, 339, 342, 343, 344, 347, 351, 353, 357, 358, 359, 363, 365, 366, 368, 369, 371, 372, 373, 375, 376, 377, 379, 380, 382, 383, 384, 385, 386, 387, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 447, 448, 449, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 472, 508, 516, 517, 518, 519, 522, 523, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 564, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 596, 597, 598, 599, 600, 602, 604, 607, 612, 613, 614, 615, 617, 618, 619, 625, 627, 628, 629, 632, 633, 634, 637, 639, 640, 641, 643, 644, 646, 651, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 694, 701, 702, 704, 705, 707, 709, 710, 718, 719, 720, 721, 727, 730, 740, 742, 762, 763, 764, 765, 766, 767, 773, 779, 780, 781, 784, 785, 786, 787, 789, 791, 795, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 833, 834, 835, 836, 837, 840, 843, 847, 850, 854, 856, 857, 858, 861, 862, 863, 864, 865, 867, 875, 876, 878, 879, 880, 883, 885, 888, 889, 891, 892, 893, 894, 895, 899, 912, 915, 919, 920, 922, 934, 935, 938, 941, 947, 950, 955, 956, 957, 958, 959, 960, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 978, 979, 980, 981, 982, 985, 986, 987, 990, 992, 994, 996, 999, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "manag": [0, 86, 239, 356, 365, 369, 372, 373, 375, 379, 382, 384, 385, 403, 435, 453, 611, 881, 960, 982, 987, 990, 1001, 1003, 1021, 1024], "board": 0, "scipi": [0, 6, 13, 17, 19, 34, 41, 46, 47, 53, 54, 78, 79, 82, 96, 98, 101, 103, 121, 149, 167, 170, 183, 187, 199, 243, 247, 248, 254, 257, 265, 269, 277, 282, 287, 296, 310, 311, 317, 318, 357, 365, 366, 369, 371, 373, 377, 380, 382, 383, 384, 387, 389, 396, 401, 404, 435, 436, 437, 438, 442, 447, 448, 481, 488, 493, 517, 519, 520, 526, 529, 566, 567, 570, 571, 573, 574, 595, 596, 633, 634, 638, 642, 643, 644, 648, 651, 653, 654, 655, 657, 659, 661, 662, 663, 665, 669, 672, 676, 677, 680, 684, 744, 747, 762, 763, 764, 765, 774, 775, 785, 793, 795, 809, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 846, 855, 861, 862, 863, 866, 870, 873, 874, 883, 885, 886, 888, 889, 922, 937, 940, 955, 956, 962, 964, 967, 969, 970, 976, 980, 981, 985, 987, 995, 997, 1000, 1001, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "mission": [0, 343, 990], "foster": [0, 1016], "comput": [0, 4, 6, 7, 11, 13, 26, 37, 39, 41, 42, 46, 52, 54, 57, 58, 60, 61, 70, 72, 79, 80, 81, 82, 96, 105, 109, 113, 116, 117, 121, 122, 123, 124, 145, 149, 154, 156, 157, 161, 167, 168, 169, 170, 173, 177, 178, 181, 182, 183, 184, 185, 186, 197, 199, 205, 211, 214, 215, 219, 222, 227, 229, 230, 232, 235, 236, 238, 253, 255, 257, 258, 259, 260, 264, 266, 268, 277, 279, 281, 283, 284, 286, 287, 290, 299, 309, 313, 314, 318, 320, 329, 337, 342, 343, 344, 351, 358, 359, 360, 365, 366, 368, 371, 376, 377, 378, 380, 382, 383, 384, 386, 387, 390, 391, 393, 394, 395, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 442, 444, 446, 447, 448, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 501, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 567, 570, 571, 574, 575, 576, 578, 579, 588, 589, 590, 591, 594, 595, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 612, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 705, 709, 710, 711, 713, 714, 715, 718, 720, 722, 723, 724, 726, 727, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 848, 849, 852, 853, 858, 859, 860, 861, 862, 863, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 917, 918, 919, 920, 931, 932, 939, 941, 947, 955, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 976, 978, 979, 980, 981, 982, 986, 987, 990, 996, 997, 1000, 1001, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "particular": [0, 4, 11, 13, 37, 39, 40, 60, 71, 78, 92, 100, 104, 119, 122, 125, 153, 161, 167, 168, 197, 199, 205, 231, 235, 254, 258, 260, 266, 277, 286, 290, 299, 309, 310, 313, 343, 344, 353, 357, 365, 366, 369, 370, 371, 373, 375, 376, 377, 379, 380, 383, 384, 387, 396, 400, 401, 403, 404, 405, 406, 431, 454, 458, 481, 529, 548, 594, 638, 643, 648, 657, 659, 669, 672, 697, 712, 769, 815, 830, 902, 904, 956, 958, 960, 962, 966, 969, 970, 971, 972, 974, 976, 987, 990, 1000, 1008, 1011, 1015, 1016, 1017, 1019, 1021, 1022, 1023], "As": [0, 4, 7, 25, 27, 30, 40, 43, 53, 55, 57, 58, 66, 82, 86, 100, 110, 111, 116, 119, 121, 123, 128, 141, 149, 154, 162, 167, 169, 173, 176, 179, 181, 186, 188, 197, 201, 205, 215, 223, 245, 252, 254, 255, 257, 258, 260, 270, 275, 282, 300, 312, 320, 329, 343, 344, 347, 349, 350, 353, 357, 358, 366, 369, 370, 371, 373, 375, 376, 383, 384, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 431, 478, 539, 547, 551, 604, 617, 640, 641, 657, 659, 672, 719, 742, 748, 825, 826, 827, 829, 831, 862, 955, 960, 962, 963, 965, 966, 967, 969, 973, 976, 980, 981, 982, 987, 990, 992, 996, 999, 1000, 1001, 1008, 1014, 1019, 1024], "fiscal": 0, "home": [0, 8, 12, 27, 34, 50, 53, 112, 129, 153, 155, 157, 158, 176, 189, 206, 243, 302, 306, 309, 314, 334, 348, 366, 369, 379, 387, 395, 471, 484, 664, 990], "ensur": [0, 41, 57, 82, 92, 116, 170, 197, 219, 252, 260, 295, 351, 353, 357, 358, 371, 373, 375, 376, 377, 385, 387, 394, 396, 397, 400, 408, 454, 518, 519, 526, 596, 612, 681, 690, 766, 773, 804, 876, 903, 904, 920, 926, 932, 962, 963, 966, 976, 982, 996, 1010, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "monei": [0, 215, 990], "when": [0, 4, 9, 10, 11, 24, 25, 26, 27, 39, 40, 43, 56, 60, 67, 70, 71, 72, 78, 80, 81, 86, 95, 98, 99, 100, 103, 113, 118, 119, 120, 122, 125, 129, 130, 131, 143, 149, 161, 166, 167, 168, 169, 170, 176, 177, 181, 186, 188, 190, 194, 197, 199, 202, 213, 226, 227, 228, 232, 239, 243, 245, 253, 256, 257, 258, 259, 260, 264, 266, 267, 277, 279, 283, 284, 285, 299, 301, 303, 304, 305, 306, 309, 310, 311, 312, 313, 319, 320, 322, 329, 332, 333, 337, 342, 343, 344, 347, 353, 357, 358, 359, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 387, 390, 393, 394, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 412, 417, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 468, 469, 470, 474, 475, 476, 477, 481, 485, 486, 487, 488, 489, 490, 493, 494, 495, 497, 500, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 563, 566, 567, 568, 569, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 591, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 685, 686, 687, 689, 690, 692, 693, 697, 698, 701, 711, 712, 713, 714, 716, 718, 719, 722, 726, 730, 732, 735, 738, 739, 741, 745, 747, 751, 752, 753, 755, 758, 762, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 777, 779, 780, 781, 784, 785, 786, 787, 795, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 869, 870, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 902, 903, 904, 910, 914, 918, 919, 920, 921, 923, 924, 927, 934, 935, 955, 956, 958, 960, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 976, 978, 979, 980, 981, 982, 987, 990, 992, 998, 999, 1000, 1001, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "need": [0, 4, 9, 12, 32, 46, 48, 53, 55, 57, 82, 97, 119, 121, 122, 123, 129, 146, 149, 154, 161, 162, 167, 185, 199, 214, 215, 219, 226, 229, 231, 236, 242, 243, 247, 248, 255, 257, 259, 260, 262, 277, 279, 304, 309, 320, 329, 337, 342, 343, 353, 357, 358, 359, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 390, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 412, 422, 426, 430, 434, 450, 488, 526, 536, 557, 567, 568, 573, 574, 575, 576, 612, 620, 623, 624, 625, 627, 634, 651, 653, 656, 661, 664, 677, 705, 706, 707, 708, 765, 769, 779, 780, 781, 784, 785, 795, 796, 797, 804, 812, 815, 823, 824, 840, 843, 846, 850, 855, 856, 860, 878, 885, 888, 955, 956, 958, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 976, 977, 979, 980, 981, 982, 987, 990, 998, 999, 1000, 1001, 1008, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "keep": [0, 6, 42, 75, 98, 100, 145, 161, 166, 167, 168, 169, 170, 181, 197, 198, 199, 205, 215, 247, 252, 255, 303, 304, 312, 318, 329, 342, 343, 347, 353, 357, 358, 363, 371, 375, 383, 384, 394, 396, 397, 398, 399, 400, 401, 417, 435, 450, 467, 468, 469, 470, 478, 479, 519, 525, 526, 529, 532, 539, 541, 543, 545, 547, 550, 553, 555, 580, 583, 585, 588, 596, 619, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 661, 662, 663, 664, 693, 799, 816, 817, 826, 834, 840, 841, 879, 884, 886, 889, 892, 894, 962, 967, 971, 974, 976, 987, 990, 992, 997, 999, 1001, 1003, 1008, 1013, 1016, 1017, 1021, 1022, 1024], "while": [0, 4, 7, 8, 10, 12, 17, 24, 27, 34, 37, 39, 43, 44, 48, 55, 62, 66, 70, 73, 75, 92, 99, 100, 110, 113, 116, 126, 129, 146, 150, 155, 157, 158, 161, 166, 167, 168, 169, 173, 176, 178, 181, 186, 191, 197, 199, 213, 226, 229, 230, 233, 243, 244, 248, 251, 252, 256, 257, 258, 260, 264, 265, 266, 267, 268, 270, 279, 299, 300, 301, 304, 305, 306, 309, 312, 326, 329, 342, 344, 351, 353, 358, 363, 364, 365, 366, 367, 370, 371, 373, 375, 376, 377, 379, 380, 382, 384, 385, 390, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 408, 429, 449, 452, 453, 468, 470, 481, 506, 517, 537, 542, 543, 544, 545, 549, 550, 551, 552, 553, 554, 555, 560, 567, 573, 574, 575, 576, 579, 582, 587, 591, 619, 628, 631, 632, 634, 641, 642, 643, 644, 661, 662, 663, 664, 693, 713, 714, 722, 738, 758, 762, 767, 768, 771, 772, 776, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 795, 796, 797, 798, 799, 804, 805, 806, 807, 808, 810, 818, 829, 831, 833, 834, 835, 842, 843, 844, 845, 846, 859, 871, 876, 881, 883, 884, 891, 892, 893, 894, 899, 924, 955, 956, 959, 960, 962, 963, 965, 966, 967, 968, 969, 972, 973, 976, 978, 981, 982, 986, 987, 992, 998, 999, 1001, 1008, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 46, 70, 197, 215, 304, 379, 382, 384, 401, 403, 404, 506, 763, 764, 981, 986, 990, 1016, 1017, 1018], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 366, 371, 373, 376, 380, 385, 387, 397, 401, 403, 405, 428, 546, 547, 570, 571, 705, 923, 924, 976, 982, 986, 987, 992, 1001, 1019], "toward": [0, 26, 27, 63, 82, 116, 122, 128, 149, 169, 176, 201, 202, 223, 371, 384, 396, 433, 437, 447, 661, 663, 680, 857, 965, 980, 982, 985, 987], "cover": [0, 52, 173, 197, 215, 353, 363, 366, 371, 383, 620, 705, 776, 966, 967, 985], "travel": 0, "expens": [0, 56, 129, 149, 166, 168, 227, 254, 266, 329, 342, 343, 344, 359, 377, 384, 396, 397, 400, 403, 404, 434, 453, 493, 781, 784, 785, 795, 806, 881, 883, 963, 965, 976, 981, 986, 990, 1001, 1012], "well": [0, 4, 9, 12, 24, 25, 27, 39, 48, 53, 57, 58, 62, 70, 78, 86, 111, 113, 120, 122, 127, 129, 146, 154, 156, 166, 167, 168, 169, 173, 181, 185, 195, 197, 198, 199, 201, 205, 218, 219, 220, 223, 226, 230, 235, 244, 257, 264, 266, 268, 272, 277, 282, 283, 284, 306, 310, 311, 312, 313, 314, 337, 342, 343, 344, 353, 366, 368, 370, 371, 375, 377, 379, 380, 382, 383, 384, 385, 394, 396, 398, 400, 401, 403, 406, 407, 410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 444, 445, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 685, 706, 707, 708, 769, 772, 774, 777, 779, 780, 781, 784, 785, 795, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 918, 919, 955, 956, 958, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 976, 979, 980, 982, 983, 986, 987, 990, 1000, 1001, 1008, 1009, 1012, 1014, 1015, 1016, 1019], "budget": [0, 119, 818, 819, 820, 821, 822, 955], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 315, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 357, 358, 359, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 383, 384, 385, 387, 388, 389, 390, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 416, 417, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 476, 478, 480, 481, 482, 485, 486, 489, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 562, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 747, 748, 750, 752, 753, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 903, 904, 909, 914, 917, 918, 920, 922, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 937, 940, 941, 947, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 984, 986, 987, 989, 990, 992, 993, 996, 997, 998, 999, 1000, 1004, 1006, 1010], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 26, 32, 37, 53, 66, 71, 72, 80, 82, 85, 86, 92, 98, 113, 114, 118, 122, 123, 126, 146, 149, 156, 161, 166, 167, 168, 169, 173, 185, 186, 190, 197, 198, 199, 201, 205, 211, 213, 215, 218, 219, 220, 222, 226, 227, 229, 231, 232, 233, 243, 252, 253, 257, 260, 263, 264, 265, 275, 277, 279, 283, 284, 294, 299, 300, 303, 309, 310, 311, 312, 313, 314, 318, 320, 322, 329, 342, 351, 357, 358, 365, 368, 369, 371, 372, 373, 375, 377, 378, 382, 383, 384, 387, 391, 394, 395, 396, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 417, 419, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 449, 450, 453, 454, 457, 458, 460, 461, 463, 464, 465, 466, 467, 468, 469, 472, 475, 481, 483, 489, 494, 500, 504, 512, 515, 519, 523, 524, 525, 526, 528, 529, 532, 534, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 570, 571, 573, 574, 575, 576, 578, 579, 582, 584, 585, 587, 588, 589, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 614, 615, 617, 618, 620, 621, 623, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 680, 681, 684, 685, 688, 692, 693, 698, 700, 705, 706, 707, 708, 712, 713, 714, 716, 718, 722, 725, 726, 730, 738, 739, 742, 747, 748, 752, 754, 758, 762, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 807, 808, 810, 812, 815, 816, 817, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 850, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 896, 899, 909, 910, 919, 920, 929, 934, 941, 955, 956, 958, 959, 960, 961, 963, 964, 965, 966, 967, 969, 970, 972, 973, 974, 976, 979, 980, 981, 982, 983, 985, 986, 987, 989, 992, 999, 1000, 1001, 1003, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "regard": [0, 5, 7, 11, 53, 55, 71, 100, 137, 149, 154, 168, 169, 186, 194, 199, 220, 232, 259, 266, 267, 337, 343, 367, 371, 372, 376, 382, 384, 390, 395, 396, 401, 403, 404, 406, 428, 432, 437, 444, 447, 486, 599, 604, 641, 643, 686, 727, 780, 787, 807, 825, 826, 959, 962, 966, 968, 969, 971, 973, 980, 981, 982, 994, 1001, 1015, 1018], "might": [0, 4, 5, 31, 42, 44, 60, 62, 70, 110, 118, 127, 143, 155, 162, 167, 168, 169, 173, 197, 215, 226, 257, 259, 294, 311, 339, 353, 357, 358, 365, 369, 371, 372, 373, 375, 376, 377, 379, 382, 384, 385, 387, 390, 394, 397, 400, 401, 402, 403, 404, 406, 419, 428, 473, 481, 486, 488, 493, 500, 508, 521, 540, 541, 542, 549, 564, 565, 567, 595, 596, 612, 635, 639, 640, 641, 643, 644, 661, 663, 677, 741, 776, 784, 785, 807, 832, 848, 863, 876, 895, 897, 899, 903, 904, 920, 935, 955, 956, 958, 960, 962, 963, 965, 966, 968, 969, 973, 974, 976, 981, 982, 1001, 1009, 1011, 1016, 1017, 1019, 1022, 1023, 1024], "pai": [0, 215, 371], "dn": [0, 969], "continu": [0, 17, 19, 42, 119, 120, 149, 164, 168, 198, 205, 215, 219, 222, 238, 243, 247, 248, 295, 298, 304, 305, 307, 311, 312, 351, 366, 369, 373, 374, 375, 376, 379, 382, 384, 385, 387, 396, 401, 403, 453, 477, 577, 580, 581, 584, 585, 592, 593, 594, 617, 631, 632, 637, 638, 642, 645, 646, 647, 648, 710, 726, 740, 793, 795, 846, 848, 850, 852, 853, 862, 863, 864, 880, 881, 892, 929, 955, 962, 963, 966, 967, 969, 970, 976, 982, 987, 989, 990, 992, 999, 1005, 1008, 1010, 1011, 1016, 1021, 1022, 1023], "integr": [0, 42, 71, 143, 157, 186, 295, 311, 369, 373, 374, 375, 377, 379, 384, 387, 401, 406, 431, 700, 739, 770, 941, 965, 973, 990, 995, 1009, 1011, 1012, 1020, 1021], "servic": [0, 4, 227, 371, 375, 990, 1016], "azur": [0, 371], "cirru": [0, 371], "cl": [0, 8, 12, 16, 378, 384, 893], "circlecl": 0, "free": [0, 5, 55, 154, 155, 162, 196, 247, 299, 365, 370, 371, 372, 379, 382, 387, 404, 406, 437, 594, 656, 839, 889, 955, 958, 962, 966, 987, 1016], "cpu": [0, 61, 258, 277, 314, 357, 358, 369, 377, 384, 387, 404, 481, 617, 632, 636, 638, 640, 643, 644, 646, 648, 650, 651, 653, 661, 664, 781, 795, 804, 805, 806, 827, 835, 876, 934, 966, 992, 996, 1001, 1013, 1022, 1023], "server": [0, 357, 368, 369, 481, 1016], "anaconda": [0, 358, 369, 375], "inc": [0, 70, 256, 956, 978, 990], "storag": [0, 344, 384, 643, 644, 651, 653, 661, 662, 663, 883, 969, 981, 1011, 1016], "thei": [0, 4, 26, 27, 37, 50, 57, 82, 97, 111, 116, 117, 119, 121, 123, 125, 142, 145, 149, 150, 154, 167, 168, 181, 183, 186, 192, 197, 198, 215, 219, 222, 226, 232, 251, 254, 257, 258, 260, 266, 277, 279, 294, 299, 304, 311, 313, 342, 343, 349, 350, 353, 357, 358, 359, 364, 366, 367, 368, 369, 370, 371, 372, 373, 375, 379, 380, 382, 383, 384, 385, 393, 395, 396, 397, 398, 399, 401, 403, 405, 406, 408, 425, 427, 431, 432, 438, 439, 444, 452, 481, 493, 494, 518, 520, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 573, 576, 595, 604, 614, 628, 631, 632, 637, 643, 644, 645, 646, 647, 655, 657, 661, 663, 666, 672, 746, 747, 749, 752, 758, 773, 781, 795, 812, 818, 819, 820, 821, 822, 840, 843, 845, 851, 862, 863, 885, 888, 891, 892, 893, 894, 898, 955, 956, 958, 960, 962, 965, 966, 967, 968, 969, 971, 972, 973, 974, 976, 977, 978, 980, 981, 982, 990, 992, 996, 998, 999, 1001, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "stage": [0, 7, 26, 72, 115, 120, 123, 369, 375, 392, 396, 403, 433, 538, 539, 544, 545, 546, 547, 573, 574, 576, 587, 963, 976, 985, 1016, 1020], "nightli": [0, 358, 374, 375], "build": [0, 4, 7, 17, 32, 43, 55, 67, 74, 99, 118, 120, 126, 132, 143, 145, 160, 161, 163, 164, 167, 205, 262, 265, 277, 295, 296, 300, 305, 306, 344, 353, 357, 358, 359, 367, 373, 374, 375, 376, 377, 384, 387, 389, 395, 396, 397, 400, 403, 404, 427, 475, 486, 488, 509, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 570, 571, 573, 574, 576, 612, 613, 615, 676, 698, 699, 782, 786, 790, 799, 803, 805, 844, 861, 863, 891, 892, 893, 894, 896, 916, 955, 956, 963, 966, 970, 972, 976, 981, 982, 986, 987, 990, 993, 995, 999, 1000, 1008, 1011, 1013, 1014, 1015, 1017, 1020], "applic": [3, 5, 19, 49, 55, 80, 164, 173, 197, 214, 220, 251, 260, 299, 357, 359, 366, 368, 371, 373, 377, 379, 380, 382, 384, 394, 396, 400, 401, 402, 403, 406, 408, 429, 431, 437, 481, 483, 517, 518, 519, 538, 539, 614, 673, 674, 675, 679, 697, 713, 714, 722, 767, 768, 771, 809, 955, 962, 963, 964, 965, 966, 970, 972, 978, 982, 986, 987, 990, 999, 1001, 1008, 1009, 1014, 1016, 1019], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 55, 57, 66, 95, 110, 113, 117, 122, 123, 149, 164, 169, 173, 176, 181, 183, 186, 190, 191, 197, 199, 214, 215, 220, 226, 227, 233, 238, 255, 257, 262, 266, 267, 271, 277, 282, 289, 303, 312, 326, 329, 337, 338, 342, 343, 353, 357, 366, 367, 368, 369, 370, 372, 373, 376, 377, 380, 382, 384, 394, 395, 396, 398, 400, 402, 403, 404, 405, 406, 407, 408, 429, 432, 434, 435, 437, 442, 447, 450, 463, 488, 493, 494, 500, 501, 502, 503, 508, 509, 513, 516, 518, 522, 524, 527, 528, 529, 530, 531, 532, 533, 536, 537, 542, 546, 549, 552, 556, 558, 574, 595, 616, 628, 633, 635, 637, 639, 640, 641, 642, 643, 644, 649, 650, 651, 653, 654, 657, 658, 659, 660, 661, 662, 664, 665, 670, 671, 672, 673, 674, 676, 678, 680, 693, 701, 713, 714, 719, 723, 768, 771, 772, 779, 780, 782, 783, 784, 785, 786, 788, 789, 790, 791, 796, 797, 798, 799, 800, 801, 803, 811, 812, 813, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 849, 850, 856, 864, 867, 873, 874, 883, 884, 891, 893, 909, 920, 956, 957, 961, 962, 963, 965, 966, 967, 968, 969, 970, 974, 976, 980, 983, 987, 988, 990, 993, 994, 995, 1001, 1002, 1003, 1008, 1009, 1011, 1013, 1014, 1015, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "medium": [3, 164, 232, 272, 306, 329, 396, 401, 406, 628, 857, 959, 962], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 24, 30, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 55, 57, 58, 60, 61, 62, 66, 67, 73, 78, 79, 80, 81, 82, 85, 86, 92, 95, 96, 97, 98, 99, 101, 103, 105, 113, 121, 122, 125, 126, 142, 149, 151, 152, 155, 156, 164, 166, 168, 169, 176, 177, 178, 179, 183, 187, 192, 195, 198, 199, 200, 203, 210, 211, 218, 223, 226, 229, 230, 231, 232, 234, 235, 244, 251, 253, 255, 257, 259, 260, 262, 263, 264, 283, 284, 285, 293, 296, 300, 301, 302, 303, 306, 310, 313, 318, 322, 325, 327, 328, 329, 339, 342, 343, 344, 347, 357, 358, 359, 366, 367, 371, 376, 380, 382, 383, 384, 387, 393, 394, 395, 398, 400, 401, 404, 406, 407, 429, 430, 431, 433, 434, 435, 442, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 478, 479, 480, 500, 512, 519, 521, 523, 525, 532, 542, 543, 544, 545, 546, 547, 549, 550, 568, 572, 573, 576, 579, 617, 618, 628, 642, 651, 652, 664, 668, 677, 680, 690, 704, 722, 724, 727, 765, 775, 783, 786, 787, 791, 798, 801, 802, 804, 807, 809, 818, 819, 820, 822, 825, 826, 827, 828, 829, 831, 833, 834, 835, 840, 841, 858, 860, 872, 877, 881, 885, 886, 887, 888, 889, 891, 892, 893, 894, 897, 919, 923, 924, 929, 930, 932, 935, 941, 956, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 970, 973, 976, 978, 980, 981, 982, 990, 995, 997, 999, 1000, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1023, 1024], "interact": [3, 90, 123, 164, 197, 223, 228, 258, 310, 370, 372, 373, 375, 377, 382, 384, 385, 397, 544, 545, 546, 547, 617, 618, 858, 862, 955, 958, 962, 963, 964, 971, 973, 976, 985, 987, 1010, 1015, 1022, 1023], "user": [3, 25, 55, 69, 95, 158, 164, 167, 185, 218, 247, 254, 264, 266, 277, 283, 284, 287, 305, 309, 310, 311, 312, 313, 314, 353, 357, 358, 360, 365, 369, 370, 371, 373, 375, 377, 378, 379, 382, 383, 384, 387, 390, 394, 395, 396, 397, 398, 400, 401, 403, 404, 405, 407, 408, 409, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 559, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 604, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 683, 684, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 843, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 916, 920, 955, 956, 962, 963, 965, 966, 967, 969, 976, 980, 984, 987, 990, 994, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "interfac": [3, 109, 164, 364, 365, 372, 373, 380, 382, 384, 400, 406, 407, 426, 430, 435, 481, 684, 781, 784, 785, 795, 843, 844, 869, 951, 955, 969, 981, 986, 987, 990, 1008, 1010, 1013, 1014, 1016, 1017, 1022], "compress": [3, 11, 15, 48, 164, 299, 366, 396, 401, 404, 637, 657, 677, 813, 937, 940, 962, 976, 1000, 1008, 1017], "sens": [3, 4, 15, 25, 55, 155, 164, 167, 173, 230, 299, 305, 318, 329, 342, 353, 357, 372, 384, 396, 398, 400, 447, 454, 455, 456, 457, 458, 459, 460, 461, 637, 640, 641, 657, 782, 792, 880, 960, 962, 969, 970, 972, 976, 979], "tomographi": [3, 15, 164, 637, 657, 962], "reconstruct": [3, 15, 95, 96, 100, 164, 196, 221, 222, 313, 401, 404, 467, 468, 469, 516, 518, 520, 522, 523, 524, 525, 527, 528, 533, 568, 572, 637, 657, 673, 674, 678, 875, 876, 962, 963, 1022], "l1": [3, 7, 15, 30, 40, 82, 85, 164, 175, 182, 186, 208, 212, 216, 228, 258, 277, 312, 380, 382, 395, 396, 398, 401, 426, 430, 435, 442, 449, 454, 455, 456, 457, 458, 459, 460, 461, 463, 481, 487, 489, 516, 522, 523, 524, 525, 527, 528, 532, 533, 543, 550, 574, 575, 576, 582, 629, 630, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 653, 655, 657, 661, 662, 663, 664, 666, 673, 719, 746, 752, 757, 762, 763, 764, 769, 795, 802, 809, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 855, 863, 870, 883, 884, 890, 892, 894, 906, 948, 962, 964, 966, 969, 976, 980, 981, 982, 999, 1013, 1015, 1021, 1024], "prior": [3, 15, 46, 47, 57, 67, 148, 149, 159, 164, 169, 176, 178, 181, 241, 243, 247, 248, 249, 257, 371, 373, 375, 384, 387, 396, 399, 401, 403, 406, 450, 508, 521, 533, 534, 535, 536, 544, 570, 571, 596, 598, 599, 600, 604, 607, 608, 615, 629, 630, 631, 632, 636, 637, 639, 640, 641, 645, 646, 647, 657, 663, 666, 701, 779, 818, 819, 820, 821, 822, 843, 844, 858, 885, 888, 933, 955, 958, 960, 962, 965, 966, 968, 974, 982, 983, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1024], "lasso": [3, 15, 105, 129, 135, 164, 167, 175, 216, 312, 357, 382, 398, 399, 401, 403, 404, 405, 456, 457, 463, 486, 509, 516, 522, 524, 527, 528, 530, 531, 533, 582, 631, 632, 634, 635, 636, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 663, 666, 667, 668, 669, 670, 671, 706, 707, 708, 804, 805, 806, 844, 863, 955, 966, 980, 988, 996, 999, 1003, 1008, 1012, 1013, 1014, 1016, 1017, 1019, 1021, 1022], "recognit": [3, 9, 15, 164, 296, 304, 364, 376, 401, 403, 405, 479, 487, 517, 519, 526, 682, 693, 698, 725, 753, 772, 773, 779, 795, 809, 863, 888, 958, 962, 966, 967, 971, 981, 983, 992, 995, 1003, 1008], "eigenfac": [3, 15, 164, 366, 401, 479, 526, 682, 698, 795, 809, 863, 888, 983, 995, 1008], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 70, 72, 74, 130, 134, 136, 139, 140, 144, 147, 164, 175, 190, 216, 226, 232, 233, 237, 238, 251, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 267, 268, 272, 301, 309, 311, 316, 320, 323, 324, 327, 336, 337, 340, 342, 357, 360, 366, 373, 377, 384, 390, 397, 400, 401, 403, 405, 422, 479, 489, 497, 500, 526, 540, 541, 548, 552, 553, 562, 578, 579, 584, 585, 590, 616, 624, 628, 653, 661, 662, 663, 674, 682, 683, 685, 687, 698, 719, 726, 781, 795, 801, 805, 806, 809, 811, 812, 829, 843, 844, 856, 863, 879, 880, 954, 955, 958, 961, 963, 964, 966, 967, 971, 979, 981, 983, 988, 992, 995, 996, 997, 1001, 1003, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1015], "imag": [3, 6, 13, 15, 32, 36, 46, 48, 51, 54, 58, 68, 70, 89, 94, 95, 107, 117, 144, 153, 164, 188, 219, 228, 231, 234, 255, 286, 295, 296, 310, 317, 318, 342, 343, 363, 364, 366, 368, 371, 376, 379, 382, 384, 387, 389, 396, 401, 426, 430, 437, 447, 478, 479, 480, 481, 487, 488, 491, 492, 519, 520, 522, 526, 592, 593, 676, 682, 722, 809, 853, 962, 966, 967, 969, 971, 978, 982, 986, 990, 992, 997, 998, 1000, 1001, 1003, 1008, 1011, 1016, 1017, 1021, 1023, 1024], "denois": [3, 15, 94, 107, 164, 401, 481, 520, 522, 526, 569, 572, 809, 853], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 74, 94, 105, 107, 130, 136, 138, 144, 148, 150, 151, 152, 153, 156, 159, 161, 174, 198, 211, 225, 226, 233, 237, 240, 251, 255, 257, 259, 262, 263, 267, 272, 278, 291, 312, 319, 322, 324, 326, 329, 330, 331, 334, 335, 338, 340, 353, 357, 360, 363, 373, 382, 384, 394, 396, 397, 400, 403, 404, 417, 425, 433, 437, 446, 447, 450, 467, 468, 469, 476, 481, 483, 487, 489, 499, 518, 519, 520, 526, 529, 539, 541, 543, 545, 547, 550, 553, 555, 578, 579, 595, 596, 616, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 661, 662, 663, 664, 673, 675, 676, 677, 680, 719, 742, 743, 745, 750, 751, 758, 759, 760, 761, 781, 787, 792, 795, 809, 811, 816, 817, 823, 824, 826, 828, 834, 841, 843, 844, 849, 853, 855, 856, 863, 878, 879, 883, 884, 885, 886, 887, 888, 889, 892, 894, 955, 961, 962, 963, 966, 967, 969, 972, 979, 980, 986, 988, 992, 996, 997, 1002, 1003, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "pca": [3, 6, 15, 69, 72, 74, 76, 86, 90, 94, 97, 106, 107, 164, 219, 221, 231, 233, 237, 256, 277, 281, 286, 312, 353, 363, 373, 384, 395, 396, 397, 402, 412, 458, 461, 481, 487, 489, 499, 517, 518, 519, 520, 524, 525, 528, 529, 534, 628, 643, 673, 675, 677, 781, 805, 809, 832, 839, 842, 843, 845, 853, 861, 863, 958, 960, 963, 969, 976, 980, 982, 997, 1002, 1003, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1019, 1021, 1022, 1023], "libsvm": [3, 15, 164, 173, 327, 364, 377, 472, 493, 548, 883, 884, 885, 886, 887, 888, 889, 981, 986, 1003, 1008, 1010, 1016, 1019, 1022], "gui": [3, 15, 164, 472, 887, 888, 999, 1008, 1009, 1019], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 49, 54, 55, 56, 58, 61, 69, 71, 76, 78, 82, 86, 94, 95, 107, 110, 113, 115, 118, 120, 121, 122, 124, 126, 128, 129, 132, 135, 136, 138, 140, 142, 147, 152, 153, 155, 156, 157, 158, 162, 165, 166, 170, 171, 177, 179, 183, 187, 188, 190, 192, 193, 194, 198, 199, 201, 203, 205, 209, 210, 212, 213, 214, 216, 226, 229, 233, 242, 244, 245, 246, 249, 251, 252, 253, 255, 258, 260, 262, 263, 265, 266, 270, 271, 273, 275, 277, 279, 281, 283, 286, 290, 300, 303, 305, 306, 309, 311, 313, 314, 317, 318, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 343, 344, 348, 349, 350, 353, 360, 363, 365, 366, 374, 377, 384, 386, 392, 393, 394, 396, 397, 399, 401, 402, 403, 404, 405, 406, 415, 417, 419, 422, 427, 434, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 473, 474, 481, 483, 486, 487, 488, 494, 507, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 573, 574, 576, 578, 579, 582, 587, 591, 594, 595, 596, 600, 612, 619, 620, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 686, 691, 696, 706, 707, 708, 718, 719, 725, 726, 734, 737, 769, 772, 773, 774, 779, 780, 781, 784, 785, 787, 795, 796, 797, 798, 802, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 826, 828, 829, 830, 832, 834, 839, 840, 841, 843, 844, 846, 848, 850, 855, 856, 858, 859, 860, 862, 863, 864, 868, 869, 871, 872, 873, 874, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 956, 958, 959, 960, 963, 964, 967, 969, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 986, 987, 988, 990, 993, 995, 997, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013], "complex": [3, 9, 14, 15, 16, 149, 154, 161, 164, 211, 214, 225, 232, 240, 250, 266, 273, 300, 309, 312, 313, 316, 323, 329, 344, 346, 352, 367, 371, 376, 382, 397, 401, 403, 406, 407, 425, 429, 432, 433, 435, 452, 474, 485, 486, 487, 499, 519, 526, 536, 542, 543, 544, 545, 547, 549, 550, 589, 615, 623, 641, 643, 661, 662, 718, 734, 781, 809, 811, 839, 843, 844, 848, 856, 863, 879, 883, 886, 889, 891, 892, 893, 894, 955, 956, 958, 959, 961, 965, 967, 972, 976, 979, 987, 988, 990, 1003, 1009, 1011, 1017, 1018, 1021], "influenc": [3, 9, 15, 80, 81, 164, 167, 179, 242, 265, 299, 306, 329, 337, 353, 359, 398, 401, 403, 417, 425, 439, 450, 467, 468, 469, 474, 486, 539, 541, 543, 545, 547, 550, 553, 555, 596, 613, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 661, 663, 664, 718, 734, 809, 816, 817, 825, 826, 833, 834, 841, 860, 861, 872, 884, 886, 889, 892, 894, 903, 955, 960, 961, 969, 972, 976, 980, 981, 990, 1011, 1016, 1017], "core": [3, 15, 49, 55, 65, 71, 117, 118, 164, 167, 168, 314, 356, 358, 360, 369, 371, 374, 379, 384, 387, 396, 401, 403, 407, 429, 431, 434, 435, 440, 442, 484, 523, 574, 579, 643, 644, 651, 653, 661, 818, 819, 820, 821, 822, 827, 835, 962, 969, 972, 981, 984, 987, 988, 990, 999, 1001, 1003, 1010, 1012, 1013, 1015, 1018, 1022, 1023, 1024], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 34, 35, 45, 71, 72, 73, 88, 93, 98, 109, 110, 112, 114, 116, 117, 118, 120, 123, 127, 134, 139, 142, 143, 144, 145, 148, 159, 167, 168, 173, 175, 189, 190, 197, 205, 216, 225, 227, 231, 235, 238, 240, 245, 250, 254, 255, 256, 257, 258, 266, 272, 273, 278, 279, 285, 287, 290, 291, 292, 297, 301, 317, 323, 325, 329, 332, 335, 337, 338, 341, 343, 344, 345, 353, 357, 359, 360, 364, 365, 366, 368, 373, 376, 380, 383, 384, 391, 394, 396, 397, 400, 401, 404, 405, 413, 422, 454, 460, 467, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 495, 497, 499, 500, 504, 505, 507, 508, 526, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 554, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 589, 590, 591, 594, 595, 596, 598, 599, 607, 616, 617, 618, 628, 643, 644, 651, 653, 659, 660, 661, 682, 688, 690, 693, 697, 698, 700, 701, 703, 710, 711, 713, 714, 718, 722, 725, 726, 727, 738, 740, 742, 743, 766, 767, 768, 770, 771, 772, 773, 776, 778, 781, 782, 784, 785, 786, 787, 795, 799, 800, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 825, 830, 832, 833, 839, 840, 841, 843, 847, 850, 855, 856, 857, 863, 864, 867, 869, 878, 879, 880, 883, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 906, 909, 917, 955, 956, 958, 959, 960, 963, 964, 968, 971, 973, 974, 976, 977, 979, 985, 986, 988, 989, 990, 992, 993, 997, 998, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 53, 57, 60, 62, 64, 70, 80, 81, 120, 177, 191, 192, 226, 230, 236, 237, 242, 244, 250, 263, 264, 268, 273, 282, 285, 287, 293, 301, 312, 316, 318, 323, 336, 345, 347, 357, 359, 360, 363, 364, 365, 371, 376, 382, 384, 394, 396, 397, 399, 400, 401, 403, 406, 432, 434, 453, 472, 473, 474, 484, 488, 493, 506, 521, 529, 549, 600, 610, 637, 643, 651, 653, 659, 661, 682, 688, 690, 692, 698, 702, 713, 721, 775, 777, 781, 795, 809, 818, 820, 822, 825, 830, 843, 844, 846, 847, 855, 879, 880, 881, 883, 895, 896, 897, 917, 955, 958, 962, 964, 966, 967, 968, 970, 973, 976, 978, 980, 981, 985, 987, 990, 993, 1003, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "outlier": [3, 15, 44, 80, 81, 122, 125, 164, 175, 199, 200, 203, 216, 225, 240, 278, 291, 298, 307, 339, 366, 384, 396, 398, 403, 431, 454, 455, 458, 459, 460, 461, 475, 476, 477, 481, 495, 497, 507, 509, 548, 624, 634, 655, 656, 657, 661, 662, 663, 664, 677, 687, 829, 833, 844, 850, 852, 853, 855, 859, 860, 861, 863, 869, 872, 886, 887, 889, 966, 980, 981, 986, 988, 1002, 1003, 1008, 1013, 1014, 1016], "detect": [3, 8, 10, 15, 63, 65, 80, 82, 116, 125, 164, 178, 225, 240, 250, 257, 260, 273, 278, 291, 305, 328, 366, 369, 371, 375, 382, 384, 394, 395, 396, 398, 400, 404, 431, 434, 454, 455, 458, 459, 460, 461, 473, 474, 476, 477, 481, 495, 497, 500, 507, 522, 523, 524, 531, 548, 549, 573, 576, 581, 624, 662, 683, 687, 711, 773, 809, 829, 833, 844, 850, 863, 883, 887, 958, 962, 987, 988, 990, 996, 1001, 1002, 1003, 1008, 1011, 1014, 1015, 1016, 1018, 1020, 1021, 1023, 1024], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 25, 26, 27, 30, 31, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 55, 57, 58, 60, 62, 64, 65, 66, 70, 71, 73, 80, 81, 82, 86, 90, 94, 95, 100, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 131, 135, 142, 143, 146, 149, 155, 156, 157, 158, 164, 166, 167, 168, 169, 170, 176, 181, 182, 185, 186, 188, 190, 192, 193, 196, 197, 198, 199, 201, 202, 205, 210, 211, 215, 218, 219, 220, 226, 227, 228, 229, 231, 232, 239, 242, 244, 246, 247, 251, 252, 255, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 271, 275, 279, 283, 284, 285, 286, 287, 290, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 309, 311, 312, 317, 318, 321, 322, 326, 328, 331, 337, 342, 343, 344, 349, 350, 353, 357, 358, 359, 363, 364, 366, 368, 369, 371, 373, 375, 376, 378, 379, 383, 384, 385, 387, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 410, 413, 418, 419, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 473, 474, 478, 480, 481, 482, 484, 487, 488, 489, 493, 494, 495, 500, 508, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 682, 683, 685, 686, 687, 688, 698, 699, 704, 706, 707, 710, 711, 712, 713, 714, 715, 718, 722, 724, 725, 729, 730, 732, 734, 735, 737, 740, 763, 764, 766, 767, 768, 769, 771, 773, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 903, 904, 914, 915, 920, 924, 934, 935, 936, 937, 940, 941, 947, 950, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 986, 987, 993, 995, 996, 997, 1000, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 56, 58, 62, 70, 71, 72, 73, 75, 85, 106, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 123, 125, 126, 127, 128, 129, 130, 131, 133, 137, 138, 143, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 167, 168, 169, 173, 176, 179, 180, 181, 189, 192, 193, 194, 195, 198, 199, 200, 203, 204, 205, 206, 211, 212, 214, 215, 226, 227, 229, 231, 234, 243, 244, 245, 246, 247, 248, 250, 251, 255, 257, 259, 260, 263, 266, 267, 271, 273, 275, 280, 283, 284, 285, 288, 289, 296, 299, 300, 304, 305, 309, 310, 311, 312, 313, 318, 320, 321, 322, 325, 326, 328, 329, 335, 336, 337, 338, 342, 343, 348, 349, 350, 351, 353, 356, 358, 360, 363, 366, 368, 371, 373, 378, 380, 384, 386, 390, 391, 392, 394, 395, 396, 397, 401, 403, 404, 405, 413, 417, 422, 423, 424, 425, 427, 428, 429, 432, 433, 434, 450, 454, 467, 468, 469, 472, 486, 493, 509, 519, 526, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 562, 567, 578, 579, 587, 591, 595, 596, 598, 599, 600, 601, 607, 610, 612, 613, 615, 616, 617, 618, 619, 620, 622, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 682, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 699, 700, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 722, 725, 726, 727, 730, 732, 734, 736, 740, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 778, 779, 780, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 829, 830, 833, 834, 840, 841, 843, 850, 863, 864, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 940, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 967, 968, 969, 970, 972, 973, 974, 976, 979, 980, 981, 982, 985, 986, 987, 989, 990, 993, 995, 996, 997, 1001, 1003, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "latenc": [3, 7, 15, 120, 164, 356, 509, 550, 657, 663, 809, 863, 889, 931, 940, 986, 1003, 1011], "speci": [3, 15, 164, 278, 291, 342, 366, 402, 483, 691, 773, 828, 887, 898, 966, 972, 1008], "distribut": [3, 4, 8, 9, 10, 15, 27, 37, 39, 44, 52, 53, 55, 57, 62, 75, 79, 80, 81, 92, 110, 112, 122, 125, 141, 149, 158, 164, 166, 167, 173, 176, 197, 199, 201, 220, 222, 226, 230, 242, 247, 248, 253, 257, 263, 265, 278, 282, 291, 298, 299, 301, 304, 307, 317, 318, 334, 337, 342, 357, 358, 366, 367, 368, 369, 371, 372, 375, 376, 377, 384, 390, 394, 395, 396, 398, 400, 401, 402, 406, 408, 432, 434, 454, 455, 456, 457, 458, 459, 460, 461, 473, 483, 488, 500, 501, 502, 503, 504, 508, 517, 518, 521, 535, 536, 537, 548, 596, 610, 625, 627, 629, 630, 633, 643, 644, 654, 664, 665, 673, 674, 675, 677, 691, 693, 708, 736, 773, 779, 780, 785, 786, 793, 795, 799, 800, 809, 819, 822, 828, 832, 839, 846, 859, 860, 861, 862, 863, 871, 872, 873, 878, 879, 887, 898, 922, 934, 955, 960, 962, 964, 965, 966, 968, 969, 971, 972, 978, 979, 984, 986, 987, 992, 996, 1000, 1002, 1003, 1008, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024], "relat": [3, 7, 12, 15, 17, 44, 62, 96, 98, 100, 164, 165, 167, 192, 235, 250, 264, 314, 342, 351, 360, 366, 367, 370, 374, 375, 376, 378, 379, 380, 382, 384, 385, 386, 390, 395, 396, 397, 398, 399, 400, 401, 403, 406, 435, 449, 454, 481, 534, 535, 547, 548, 624, 658, 662, 677, 686, 707, 727, 802, 806, 841, 842, 844, 847, 848, 853, 856, 857, 858, 859, 862, 871, 887, 955, 960, 966, 967, 969, 970, 973, 976, 981, 982, 983, 984, 987, 1003, 1008, 1012, 1013, 1014, 1016, 1017, 1020, 1021], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 25, 26, 27, 30, 33, 36, 42, 58, 60, 63, 68, 69, 70, 71, 72, 76, 80, 81, 86, 89, 90, 91, 92, 95, 97, 99, 103, 104, 106, 108, 109, 118, 124, 128, 129, 130, 132, 133, 141, 143, 147, 149, 150, 151, 154, 155, 157, 161, 162, 165, 166, 167, 168, 171, 175, 180, 181, 183, 184, 186, 193, 197, 198, 199, 201, 202, 206, 212, 213, 214, 216, 225, 228, 230, 238, 239, 240, 250, 254, 257, 263, 264, 266, 267, 271, 273, 275, 280, 285, 286, 288, 292, 295, 297, 298, 299, 302, 306, 307, 308, 310, 313, 314, 324, 325, 326, 329, 337, 340, 341, 344, 345, 348, 350, 351, 353, 360, 363, 364, 365, 366, 367, 368, 369, 373, 374, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 394, 396, 398, 399, 400, 401, 402, 406, 407, 408, 409, 412, 416, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 564, 565, 566, 567, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 603, 604, 605, 607, 608, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 671, 672, 673, 674, 675, 676, 677, 682, 686, 687, 688, 698, 706, 707, 708, 725, 742, 743, 747, 748, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 765, 769, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 903, 904, 917, 931, 941, 942, 943, 947, 955, 958, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 977, 978, 979, 980, 981, 982, 985, 986, 987, 988, 989, 990, 992, 993, 997, 998, 999, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "engin": [3, 15, 40, 115, 154, 164, 357, 365, 368, 396, 402, 404, 406, 449, 481, 547, 624, 658, 686, 802, 806, 841, 842, 844, 847, 848, 853, 856, 857, 858, 862, 956, 966, 976, 984, 1014], "topic": [3, 7, 8, 15, 70, 164, 342, 343, 344, 366, 367, 400, 401, 404, 473, 482, 521, 523, 525, 532, 573, 576, 962, 967, 986, 987, 1001, 1013, 1015], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 55, 69, 70, 71, 76, 85, 95, 164, 201, 212, 250, 273, 296, 342, 344, 353, 360, 363, 366, 368, 373, 377, 380, 382, 396, 397, 400, 401, 435, 437, 440, 441, 447, 449, 473, 474, 478, 479, 488, 489, 516, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 568, 569, 573, 574, 576, 578, 579, 582, 584, 616, 703, 772, 781, 795, 820, 842, 843, 888, 920, 930, 955, 963, 967, 971, 976, 980, 986, 990, 993, 997, 998, 1003, 1008, 1009, 1017, 1020], "neg": [3, 4, 15, 16, 24, 60, 75, 78, 86, 121, 122, 126, 164, 167, 175, 197, 215, 216, 246, 247, 254, 257, 260, 264, 266, 267, 277, 299, 303, 313, 342, 377, 384, 385, 396, 400, 403, 404, 405, 407, 408, 417, 425, 429, 437, 450, 454, 467, 468, 469, 473, 516, 518, 520, 521, 522, 523, 525, 527, 529, 532, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 573, 576, 577, 580, 581, 583, 584, 585, 587, 589, 590, 591, 592, 593, 594, 596, 620, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 654, 655, 657, 658, 662, 663, 664, 665, 672, 683, 684, 689, 690, 697, 698, 700, 703, 704, 706, 707, 708, 711, 713, 714, 715, 719, 722, 725, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 766, 767, 768, 769, 771, 775, 779, 780, 804, 809, 816, 817, 826, 829, 834, 841, 850, 859, 861, 862, 867, 871, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 918, 920, 934, 964, 966, 967, 969, 970, 971, 972, 980, 981, 1001, 1002, 1003, 1008, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 62, 70, 79, 80, 81, 82, 85, 95, 96, 97, 106, 156, 164, 170, 175, 183, 198, 202, 216, 227, 230, 231, 247, 250, 264, 273, 295, 313, 317, 318, 342, 343, 344, 351, 357, 360, 366, 367, 368, 371, 373, 377, 380, 382, 383, 384, 393, 397, 398, 399, 404, 405, 406, 407, 408, 417, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 437, 439, 442, 444, 445, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 477, 481, 482, 485, 486, 487, 488, 489, 490, 493, 494, 495, 504, 506, 508, 509, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 570, 571, 573, 574, 575, 576, 578, 579, 588, 589, 590, 591, 592, 593, 594, 596, 605, 614, 615, 616, 618, 620, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 697, 698, 699, 700, 701, 703, 713, 714, 715, 718, 722, 723, 724, 725, 738, 739, 742, 743, 744, 745, 747, 748, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 771, 772, 774, 775, 778, 779, 780, 781, 784, 785, 795, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 852, 854, 855, 856, 858, 860, 861, 862, 863, 865, 866, 867, 868, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 899, 901, 902, 903, 904, 909, 918, 919, 920, 921, 924, 925, 926, 929, 930, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 952, 956, 958, 960, 962, 963, 967, 968, 969, 970, 976, 977, 978, 979, 980, 982, 983, 1000, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "factor": [3, 15, 26, 31, 44, 46, 53, 55, 62, 94, 100, 105, 107, 127, 164, 167, 223, 226, 235, 268, 269, 277, 278, 291, 293, 294, 299, 301, 311, 313, 357, 358, 377, 380, 384, 393, 395, 396, 403, 404, 406, 425, 427, 439, 454, 456, 457, 458, 459, 461, 463, 473, 489, 499, 500, 512, 517, 520, 521, 523, 525, 526, 529, 530, 531, 532, 534, 535, 546, 547, 548, 573, 576, 582, 598, 634, 635, 636, 639, 640, 641, 667, 668, 677, 704, 767, 781, 784, 785, 805, 829, 863, 877, 879, 887, 919, 920, 955, 962, 963, 969, 976, 979, 983, 986, 1002, 1003, 1008, 1009, 1011, 1012, 1014, 1022, 1024], "latent": [3, 15, 17, 106, 164, 296, 343, 399, 404, 406, 473, 517, 521, 523, 524, 525, 528, 529, 573, 576, 839, 965, 986, 1001, 1002, 1003, 1010, 1013], "dirichlet": [3, 15, 164, 242, 243, 248, 252, 404, 473, 521, 523, 525, 573, 576, 779, 986, 1002, 1003, 1008, 1013, 1014], "alloc": [3, 15, 25, 61, 164, 269, 311, 367, 371, 372, 396, 404, 428, 432, 444, 473, 521, 523, 525, 569, 573, 576, 631, 637, 645, 647, 784, 785, 787, 807, 810, 955, 976, 986, 1002, 1003, 1012, 1013, 1018, 1019], "visual": [3, 4, 9, 15, 16, 25, 30, 32, 43, 46, 49, 52, 57, 60, 61, 80, 91, 94, 97, 99, 105, 107, 123, 125, 127, 131, 132, 157, 162, 164, 168, 170, 181, 188, 197, 199, 215, 223, 225, 228, 231, 236, 237, 240, 247, 250, 251, 253, 254, 258, 267, 273, 282, 286, 287, 292, 294, 297, 299, 303, 304, 309, 311, 318, 360, 363, 367, 369, 377, 378, 393, 398, 400, 401, 402, 403, 423, 426, 430, 431, 439, 457, 481, 487, 489, 492, 495, 499, 507, 517, 519, 526, 549, 551, 556, 616, 618, 643, 674, 677, 682, 683, 685, 686, 687, 703, 711, 766, 773, 782, 783, 786, 787, 798, 799, 800, 801, 802, 809, 840, 844, 863, 888, 897, 916, 961, 963, 964, 969, 970, 972, 973, 976, 982, 986, 992, 1003, 1011, 1018, 1019, 1020, 1022], "stock": [3, 15, 164, 396, 398, 439, 457, 674, 995], "market": [3, 15, 164, 396, 398, 439, 457, 674, 990, 995], "wikipedia": [3, 15, 24, 164, 379, 395, 396, 580, 592, 593, 621, 641, 653, 656, 667, 668, 680, 689, 690, 692, 694, 697, 701, 703, 710, 713, 714, 715, 718, 719, 722, 727, 740, 767, 769, 770, 772, 773, 774, 775, 825, 826, 831, 832, 833, 834, 861, 877, 891, 892, 958, 962, 966, 969, 978, 982, 1001, 1008, 1015], "princip": [3, 15, 84, 87, 94, 97, 99, 100, 102, 104, 107, 127, 164, 218, 231, 233, 286, 304, 311, 363, 396, 399, 408, 469, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 531, 535, 642, 673, 674, 675, 677, 678, 809, 832, 844, 863, 919, 920, 963, 969, 1002, 1003, 1008], "eigenvector": [3, 15, 46, 86, 90, 164, 242, 396, 437, 447, 519, 520, 526, 535, 673, 674, 676, 680, 963, 1008, 1012, 1022], "enddownload": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 364, 366, 368, 369, 375, 376, 379, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 495, 982, 997, 999, 1001, 1003, 1012, 1013, 1016, 1020, 1021, 1022], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 357, 358, 360, 368, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 387, 389, 390, 395, 407, 408, 412, 424, 441, 446, 456, 470, 492, 493, 516, 528, 532, 540, 557, 558, 562, 568, 577, 580, 581, 583, 586, 588, 597, 601, 605, 606, 609, 614, 623, 627, 635, 636, 639, 645, 646, 648, 652, 660, 684, 693, 700, 706, 707, 708, 710, 712, 714, 715, 719, 723, 727, 728, 730, 731, 735, 738, 740, 747, 748, 752, 753, 755, 757, 765, 767, 776, 788, 789, 790, 791, 792, 793, 794, 811, 813, 815, 817, 819, 823, 824, 833, 834, 835, 837, 845, 846, 849, 851, 854, 865, 868, 870, 871, 873, 874, 875, 878, 884, 893, 894, 895, 896, 909, 918, 920, 922, 923, 925, 928, 929, 930, 937, 954, 956, 964, 987, 988, 990, 993, 996, 997, 1001, 1003, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1021, 1023, 1024], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 357, 358, 369, 371, 372, 373, 375, 376, 377, 378, 379, 382, 384, 385, 387, 392, 396, 398, 400, 403, 406, 407, 408, 422, 428, 429, 431, 432, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 447, 449, 452, 453, 456, 457, 516, 517, 518, 519, 520, 522, 524, 526, 527, 528, 530, 531, 533, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 567, 577, 579, 580, 581, 583, 584, 585, 587, 595, 596, 619, 625, 631, 632, 634, 636, 637, 638, 640, 641, 645, 646, 647, 648, 667, 668, 673, 674, 675, 676, 677, 678, 679, 765, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 815, 816, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 840, 841, 842, 845, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 914, 915, 934, 937, 940, 955, 965, 967, 970, 979, 981, 982, 986, 987, 990, 992, 999, 1001, 1008, 1011, 1013, 1015, 1016, 1017, 1018, 1022, 1023], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 357, 358, 359, 365, 369, 370, 371, 372, 374, 375, 377, 379, 380, 382, 383, 384, 387, 390, 395, 396, 397, 398, 403, 404, 407, 408, 429, 431, 488, 518, 546, 547, 587, 619, 631, 672, 781, 784, 785, 787, 795, 806, 808, 914, 963, 970, 976, 979, 980, 981, 982, 983, 985, 986, 989, 990, 994, 1001, 1009, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 371, 379, 976], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 372, 377, 397, 453, 881, 982, 985, 986, 987, 1019, 1022], "introduc": [4, 78, 80, 81, 100, 145, 164, 169, 176, 181, 225, 230, 240, 264, 314, 344, 364, 367, 369, 371, 373, 375, 376, 379, 382, 384, 387, 394, 396, 398, 400, 401, 403, 404, 418, 426, 427, 428, 430, 432, 434, 444, 449, 453, 467, 468, 469, 470, 481, 489, 500, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 540, 541, 551, 552, 553, 554, 555, 566, 567, 568, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 643, 649, 670, 671, 673, 674, 677, 809, 827, 832, 835, 839, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 877, 881, 960, 962, 965, 968, 969, 972, 976, 978, 980, 981, 992, 999, 1008, 1009, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 49, 53, 57, 58, 64, 65, 66, 67, 68, 70, 71, 72, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 103, 104, 105, 109, 113, 115, 118, 119, 122, 124, 129, 130, 131, 132, 135, 138, 141, 146, 148, 149, 150, 151, 154, 155, 156, 159, 161, 162, 164, 166, 167, 169, 173, 176, 177, 183, 184, 185, 186, 188, 194, 197, 198, 199, 201, 202, 203, 204, 205, 215, 218, 219, 220, 223, 226, 228, 231, 232, 235, 242, 243, 244, 245, 246, 247, 248, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 271, 272, 277, 283, 284, 286, 293, 294, 298, 303, 304, 307, 309, 324, 328, 329, 333, 337, 338, 340, 342, 343, 344, 353, 357, 358, 359, 365, 366, 368, 369, 370, 371, 374, 376, 378, 380, 383, 384, 387, 390, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 419, 422, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 443, 444, 447, 449, 460, 463, 475, 478, 479, 481, 488, 489, 493, 494, 497, 499, 507, 522, 523, 524, 525, 531, 532, 534, 535, 540, 541, 548, 573, 574, 575, 576, 579, 596, 598, 599, 600, 604, 607, 608, 612, 616, 617, 618, 619, 623, 628, 629, 632, 634, 636, 638, 640, 643, 646, 651, 652, 653, 657, 659, 661, 662, 663, 665, 675, 677, 679, 683, 685, 686, 689, 690, 691, 692, 694, 700, 702, 703, 711, 712, 713, 714, 715, 718, 721, 727, 741, 742, 743, 752, 762, 766, 767, 768, 770, 771, 773, 774, 775, 777, 780, 781, 783, 784, 785, 786, 787, 790, 795, 796, 797, 798, 799, 800, 801, 804, 806, 807, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 836, 839, 843, 848, 852, 853, 855, 859, 860, 861, 863, 868, 869, 870, 871, 872, 873, 874, 883, 885, 888, 891, 892, 893, 894, 930, 955, 956, 958, 959, 961, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 979, 980, 981, 982, 983, 986, 987, 990, 992, 994, 995, 996, 1000, 1001, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "strategi": [4, 52, 54, 58, 61, 71, 119, 124, 129, 145, 161, 162, 164, 169, 181, 186, 197, 205, 215, 228, 237, 250, 258, 260, 262, 266, 267, 273, 292, 297, 298, 305, 306, 307, 309, 310, 313, 344, 356, 373, 377, 383, 384, 400, 403, 404, 405, 408, 422, 423, 424, 437, 447, 457, 487, 489, 497, 499, 507, 518, 523, 536, 537, 546, 547, 552, 553, 556, 573, 574, 576, 577, 579, 587, 612, 613, 615, 619, 630, 632, 636, 638, 640, 646, 648, 650, 658, 660, 676, 680, 689, 698, 739, 741, 777, 781, 784, 785, 787, 795, 798, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 840, 848, 853, 864, 878, 883, 885, 888, 891, 892, 893, 894, 937, 955, 956, 965, 967, 968, 969, 970, 972, 974, 976, 980, 981, 982, 986, 996, 1001, 1003, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "leverag": [4, 8, 37, 49, 86, 215, 342, 343, 357, 358, 369, 400, 403, 858, 955, 962, 992, 1011, 1023], "task": [4, 7, 98, 109, 116, 117, 123, 144, 145, 157, 164, 175, 197, 213, 216, 218, 254, 344, 357, 359, 366, 368, 369, 370, 371, 375, 376, 377, 380, 382, 383, 384, 401, 403, 404, 405, 406, 433, 446, 478, 490, 500, 577, 580, 581, 583, 584, 585, 589, 590, 591, 594, 617, 618, 631, 632, 637, 638, 645, 646, 647, 648, 659, 666, 669, 711, 713, 714, 738, 766, 768, 771, 773, 782, 786, 799, 803, 932, 933, 963, 966, 967, 968, 969, 977, 979, 981, 982, 984, 985, 987, 988, 989, 990, 992, 999, 1000, 1001, 1003, 1008, 1013, 1017, 1023], "highli": [4, 9, 72, 80, 81, 97, 106, 125, 181, 192, 202, 257, 260, 266, 294, 343, 357, 358, 371, 373, 377, 394, 396, 400, 403, 404, 437, 447, 481, 548, 656, 677, 793, 795, 839, 962, 966, 969, 970, 972, 980, 981, 985], "depend": [4, 5, 7, 37, 53, 75, 99, 119, 122, 123, 126, 129, 141, 145, 155, 161, 164, 165, 167, 171, 173, 177, 181, 201, 215, 219, 225, 226, 232, 240, 247, 257, 258, 262, 263, 264, 277, 294, 299, 304, 311, 314, 326, 337, 343, 344, 353, 357, 358, 359, 364, 371, 373, 374, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 395, 396, 398, 400, 401, 403, 404, 405, 406, 407, 423, 424, 425, 429, 431, 432, 434, 435, 437, 439, 442, 444, 445, 447, 449, 454, 469, 474, 475, 476, 478, 481, 485, 486, 487, 489, 490, 495, 519, 520, 526, 529, 536, 544, 545, 547, 573, 574, 575, 576, 587, 589, 592, 593, 596, 612, 617, 618, 623, 625, 633, 643, 644, 654, 656, 658, 661, 662, 663, 665, 672, 675, 676, 679, 680, 713, 725, 762, 765, 774, 775, 779, 780, 800, 808, 825, 826, 827, 829, 831, 832, 833, 834, 835, 841, 842, 844, 856, 857, 860, 863, 877, 884, 885, 888, 892, 901, 955, 956, 958, 959, 960, 962, 963, 965, 966, 968, 969, 970, 971, 974, 978, 980, 981, 982, 992, 999, 1001, 1003, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1023, 1024], "busi": [4, 197, 257, 379, 382, 772, 962, 966, 990], "dai": [4, 12, 154, 168, 198, 358, 368, 371, 862, 990, 1014, 1015, 1022, 1023], "week": [4, 370, 371, 385, 990, 1022], "yearli": 4, "season": [4, 154, 168, 198, 370, 406], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 49, 53, 57, 58, 62, 64, 66, 67, 68, 70, 71, 74, 78, 86, 98, 105, 109, 110, 117, 119, 121, 123, 124, 128, 129, 135, 145, 146, 150, 161, 162, 164, 167, 168, 169, 170, 173, 181, 186, 197, 199, 203, 204, 205, 214, 215, 219, 220, 222, 226, 231, 233, 235, 244, 247, 250, 252, 253, 254, 255, 257, 258, 259, 262, 263, 265, 266, 268, 270, 272, 273, 275, 277, 290, 296, 299, 301, 303, 305, 306, 309, 316, 323, 329, 332, 335, 342, 344, 353, 356, 358, 359, 366, 368, 373, 374, 375, 377, 379, 380, 382, 383, 384, 386, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 414, 425, 427, 428, 429, 431, 432, 433, 435, 437, 439, 440, 444, 446, 453, 454, 467, 468, 469, 470, 479, 487, 497, 500, 516, 517, 518, 520, 522, 524, 527, 528, 529, 530, 531, 533, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 566, 567, 568, 573, 574, 575, 576, 586, 587, 588, 595, 596, 612, 615, 616, 623, 625, 630, 636, 639, 640, 641, 643, 649, 650, 651, 652, 653, 655, 658, 660, 661, 662, 663, 667, 668, 670, 672, 674, 675, 678, 679, 682, 688, 689, 690, 692, 693, 697, 698, 710, 713, 714, 722, 724, 726, 739, 740, 741, 762, 767, 768, 770, 771, 772, 776, 777, 778, 779, 780, 781, 784, 785, 792, 793, 795, 799, 804, 805, 806, 808, 809, 812, 815, 816, 818, 819, 820, 821, 822, 823, 824, 830, 832, 838, 839, 840, 841, 843, 844, 846, 849, 850, 852, 853, 855, 856, 857, 859, 860, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 878, 879, 881, 885, 886, 887, 888, 889, 891, 892, 893, 894, 903, 904, 939, 950, 955, 956, 958, 960, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 979, 980, 981, 982, 986, 987, 990, 992, 993, 996, 999, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 357, 358, 359, 360, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 382, 383, 384, 386, 387, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 955, 956, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 986, 987, 992, 996, 997, 998, 999, 1000, 1001, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "preprocess": [4, 5, 6, 10, 31, 42, 44, 49, 53, 55, 58, 62, 70, 71, 72, 73, 75, 86, 95, 106, 115, 119, 142, 154, 158, 169, 173, 176, 178, 185, 186, 188, 197, 198, 203, 213, 215, 219, 227, 228, 236, 239, 254, 264, 266, 271, 285, 286, 293, 294, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 321, 329, 332, 343, 359, 360, 363, 365, 368, 371, 376, 383, 384, 393, 396, 397, 400, 404, 405, 449, 450, 451, 452, 474, 552, 566, 567, 573, 574, 575, 576, 615, 643, 644, 657, 659, 661, 663, 672, 725, 812, 843, 844, 883, 884, 885, 886, 888, 889, 956, 962, 967, 970, 977, 980, 981, 983, 986, 989, 990, 992, 997, 998, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "splinetransform": [4, 198, 312, 858, 976, 1021, 1023, 1024], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 56, 58, 71, 72, 91, 92, 100, 104, 108, 109, 117, 125, 130, 133, 149, 150, 153, 157, 158, 161, 164, 167, 168, 173, 175, 187, 188, 189, 205, 209, 212, 213, 216, 219, 226, 233, 235, 242, 243, 244, 250, 251, 252, 257, 259, 263, 267, 268, 273, 275, 277, 280, 282, 285, 286, 287, 288, 304, 309, 313, 317, 319, 320, 324, 325, 329, 330, 338, 340, 342, 343, 344, 359, 360, 363, 365, 366, 367, 368, 371, 372, 373, 375, 376, 377, 378, 380, 382, 383, 387, 392, 394, 396, 397, 399, 401, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 446, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 485, 487, 488, 489, 493, 494, 495, 497, 499, 500, 504, 507, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 705, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 738, 739, 741, 766, 767, 768, 770, 771, 772, 773, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 908, 909, 910, 911, 912, 914, 915, 927, 932, 934, 936, 937, 950, 955, 956, 957, 958, 960, 961, 962, 963, 967, 968, 970, 973, 974, 976, 977, 979, 982, 987, 988, 990, 992, 996, 999, 1001, 1003, 1005, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "extrapol": [4, 149, 176, 198, 229, 260, 862, 966, 976, 982, 1021, 1023], "option": [4, 30, 46, 52, 103, 123, 155, 162, 178, 181, 198, 260, 266, 310, 342, 347, 353, 359, 365, 366, 367, 369, 371, 372, 374, 376, 377, 379, 380, 382, 384, 385, 387, 390, 396, 397, 399, 400, 401, 403, 404, 407, 418, 426, 427, 429, 430, 431, 432, 433, 434, 437, 444, 446, 447, 448, 481, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 532, 534, 547, 552, 553, 567, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 613, 615, 617, 618, 619, 620, 623, 624, 625, 626, 627, 631, 637, 642, 643, 644, 655, 658, 660, 661, 662, 663, 665, 667, 668, 672, 673, 674, 677, 679, 680, 696, 698, 702, 713, 714, 719, 720, 721, 741, 742, 743, 748, 750, 751, 755, 758, 759, 760, 761, 762, 765, 767, 768, 771, 774, 775, 777, 784, 785, 787, 807, 809, 810, 814, 815, 816, 817, 823, 824, 827, 832, 835, 839, 842, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 875, 876, 883, 895, 897, 910, 952, 955, 956, 962, 965, 966, 969, 976, 979, 981, 982, 987, 989, 999, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 53, 71, 72, 89, 95, 106, 109, 115, 116, 118, 125, 126, 129, 130, 132, 143, 144, 154, 167, 168, 173, 178, 193, 194, 197, 205, 213, 228, 229, 234, 235, 236, 237, 239, 247, 253, 255, 257, 262, 264, 269, 275, 277, 281, 286, 294, 295, 296, 310, 311, 313, 314, 319, 320, 321, 348, 351, 357, 360, 363, 366, 368, 374, 377, 383, 390, 395, 399, 400, 401, 403, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 517, 519, 528, 823, 824, 920, 976, 987, 993, 995, 997, 1003, 1008, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "openml": [4, 71, 129, 154, 167, 197, 205, 213, 215, 227, 275, 295, 364, 387, 481, 1003, 1016, 1018, 1021], "repositori": [4, 8, 173, 364, 366, 368, 369, 371, 373, 375, 379, 385, 387, 489, 986, 989, 1003], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 168, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 357, 358, 359, 365, 366, 369, 370, 371, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 390, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 468, 469, 470, 473, 480, 481, 485, 487, 488, 489, 491, 492, 493, 495, 497, 500, 506, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 562, 564, 565, 566, 567, 568, 569, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 669, 673, 674, 675, 676, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 700, 702, 703, 706, 707, 708, 710, 711, 712, 713, 714, 715, 718, 719, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 747, 748, 752, 753, 755, 757, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 871, 872, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 910, 915, 918, 920, 922, 923, 924, 925, 927, 928, 929, 930, 934, 937, 940, 954, 955, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 980, 981, 982, 987, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023], "fetch_openml": [4, 5, 71, 75, 119, 129, 154, 167, 168, 169, 197, 205, 213, 215, 227, 235, 239, 275, 277, 295, 305, 309, 313, 365, 375, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "bike_shar": 4, "bike_sharing_demand": [4, 168], "version": [4, 46, 53, 55, 71, 95, 100, 151, 162, 168, 169, 173, 176, 181, 195, 198, 199, 205, 211, 213, 235, 239, 275, 295, 302, 304, 306, 309, 310, 311, 312, 314, 329, 342, 357, 360, 366, 370, 371, 372, 373, 374, 377, 379, 380, 382, 384, 385, 387, 389, 390, 395, 396, 399, 401, 403, 404, 406, 407, 408, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 485, 486, 487, 489, 490, 493, 494, 495, 497, 499, 507, 508, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 686, 687, 689, 692, 693, 698, 699, 703, 706, 707, 708, 709, 711, 712, 713, 714, 715, 718, 723, 724, 725, 727, 730, 737, 738, 740, 741, 742, 743, 745, 750, 751, 752, 753, 762, 766, 767, 768, 769, 771, 773, 779, 780, 781, 782, 783, 784, 785, 786, 787, 794, 795, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 869, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 901, 903, 904, 914, 915, 917, 919, 920, 929, 932, 933, 934, 936, 941, 947, 952, 953, 955, 958, 960, 963, 966, 968, 970, 972, 974, 979, 980, 982, 984, 987, 989, 1000, 1004, 1006], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 135, 138, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 357, 358, 359, 365, 366, 368, 369, 371, 373, 375, 376, 377, 378, 380, 382, 383, 384, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 417, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 444, 445, 447, 448, 449, 450, 453, 454, 456, 457, 458, 459, 460, 463, 467, 468, 469, 470, 478, 481, 485, 486, 489, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 562, 566, 567, 569, 570, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 588, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 686, 688, 689, 690, 691, 692, 693, 698, 700, 701, 702, 703, 706, 707, 708, 709, 710, 712, 713, 714, 715, 718, 719, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 747, 748, 752, 753, 755, 757, 760, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 867, 871, 876, 877, 879, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 896, 898, 903, 904, 909, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 934, 937, 939, 940, 953, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 984, 992, 993, 996, 997, 998, 999, 1000, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1024], "as_fram": [4, 5, 71, 75, 119, 129, 154, 167, 168, 169, 185, 186, 197, 205, 213, 215, 235, 239, 277, 295, 304, 305, 309, 311, 313, 314, 365, 366, 474, 475, 476, 477, 481, 485, 486, 487, 489, 490, 495, 1018, 1019, 1020, 1021, 1024], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 55, 57, 58, 60, 63, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 92, 95, 96, 97, 98, 100, 106, 109, 114, 119, 120, 121, 122, 124, 125, 126, 129, 130, 132, 135, 136, 137, 142, 145, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 173, 181, 182, 184, 185, 186, 188, 190, 192, 193, 194, 197, 199, 200, 201, 204, 205, 211, 212, 213, 215, 218, 221, 222, 226, 227, 230, 232, 233, 234, 235, 238, 239, 242, 245, 247, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 282, 283, 286, 290, 293, 294, 295, 296, 300, 304, 305, 306, 309, 311, 313, 314, 318, 320, 321, 322, 332, 336, 337, 338, 342, 343, 344, 347, 348, 351, 353, 357, 358, 364, 366, 367, 371, 372, 373, 376, 377, 378, 380, 383, 384, 386, 390, 392, 393, 394, 396, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 413, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 444, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 504, 507, 508, 509, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 694, 697, 698, 699, 700, 703, 705, 708, 710, 711, 712, 713, 714, 715, 718, 719, 722, 723, 724, 725, 726, 727, 734, 735, 736, 738, 740, 745, 751, 752, 753, 762, 766, 767, 768, 769, 770, 771, 772, 773, 776, 778, 779, 780, 781, 784, 785, 786, 787, 792, 793, 795, 799, 800, 803, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901, 902, 903, 904, 914, 920, 921, 927, 928, 931, 932, 936, 937, 939, 947, 952, 954, 955, 956, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 976, 978, 979, 980, 981, 982, 986, 992, 996, 997, 999, 1000, 1001, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "parser": [4, 5, 8, 71, 75, 119, 129, 154, 167, 168, 169, 197, 205, 213, 215, 227, 235, 239, 275, 277, 295, 305, 309, 313, 481, 1023, 1024], "panda": [4, 5, 12, 25, 70, 71, 72, 73, 75, 116, 119, 122, 126, 129, 154, 161, 166, 167, 168, 169, 176, 181, 186, 197, 205, 213, 215, 227, 235, 236, 239, 247, 255, 257, 258, 260, 268, 269, 275, 277, 295, 304, 305, 306, 309, 312, 313, 337, 342, 343, 365, 366, 369, 370, 371, 373, 374, 384, 387, 389, 397, 418, 427, 428, 430, 432, 434, 449, 451, 453, 467, 468, 469, 470, 474, 475, 476, 477, 481, 485, 486, 487, 489, 490, 495, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 551, 552, 553, 554, 555, 566, 567, 568, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 617, 618, 620, 623, 624, 625, 626, 627, 673, 674, 677, 781, 784, 785, 795, 809, 827, 832, 835, 839, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 881, 899, 955, 956, 976, 986, 987, 1001, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "df": [4, 25, 27, 129, 166, 168, 176, 181, 197, 215, 247, 257, 303, 305, 343, 376, 404, 575, 576, 955, 956], "frame": [4, 16, 71, 154, 167, 168, 197, 305, 366, 371, 382, 385, 474, 475, 476, 477, 481, 485, 486, 487, 489, 490, 495, 986, 997, 1020], "To": [4, 8, 16, 26, 27, 32, 46, 55, 57, 78, 80, 82, 86, 90, 100, 119, 122, 123, 131, 135, 146, 154, 155, 158, 161, 162, 166, 167, 173, 178, 181, 185, 197, 198, 199, 205, 215, 230, 231, 237, 239, 247, 252, 254, 255, 257, 259, 260, 262, 264, 275, 295, 299, 304, 305, 306, 309, 310, 311, 312, 313, 314, 339, 343, 347, 353, 357, 358, 364, 365, 369, 371, 372, 373, 375, 376, 377, 379, 382, 384, 385, 390, 393, 396, 397, 398, 399, 400, 401, 403, 404, 431, 433, 434, 435, 446, 449, 452, 477, 481, 487, 488, 492, 493, 516, 522, 523, 524, 526, 528, 529, 530, 531, 542, 543, 544, 545, 549, 550, 554, 582, 612, 617, 631, 632, 637, 638, 641, 643, 644, 645, 646, 647, 648, 669, 685, 697, 712, 747, 769, 775, 784, 785, 805, 812, 854, 873, 874, 883, 884, 891, 892, 893, 894, 910, 920, 934, 953, 955, 956, 961, 962, 963, 964, 966, 967, 968, 969, 972, 973, 976, 980, 981, 982, 989, 990, 992, 996, 998, 999, 1001, 1008, 1011, 1013, 1014, 1015, 1017, 1019], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 56, 96, 100, 122, 131, 143, 146, 149, 154, 155, 161, 167, 168, 169, 170, 190, 199, 212, 215, 218, 233, 255, 258, 259, 261, 265, 268, 275, 277, 282, 290, 300, 309, 318, 321, 326, 329, 331, 334, 339, 342, 344, 347, 358, 360, 364, 365, 366, 369, 371, 372, 373, 376, 377, 378, 379, 384, 387, 390, 392, 394, 396, 397, 398, 400, 401, 403, 404, 405, 406, 410, 411, 412, 416, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 447, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 680, 684, 706, 707, 708, 710, 716, 717, 726, 740, 747, 748, 753, 769, 772, 779, 780, 781, 784, 785, 795, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 898, 911, 912, 913, 919, 920, 955, 961, 962, 963, 965, 966, 976, 979, 980, 981, 982, 987, 989, 996, 999, 1000, 1001, 1005, 1008, 1011, 1014, 1016, 1019, 1021, 1022], "quick": [4, 100, 238, 371, 373, 377, 387, 591, 809, 966, 967, 976, 990, 999, 1005], "understand": [4, 9, 90, 154, 164, 168, 252, 255, 311, 312, 326, 342, 346, 352, 353, 370, 371, 372, 377, 382, 386, 396, 403, 404, 489, 809, 840, 841, 864, 891, 892, 893, 894, 897, 955, 956, 963, 965, 982, 985, 986, 990, 1008, 1022], "pattern": [4, 16, 63, 82, 94, 107, 149, 161, 164, 168, 181, 312, 342, 343, 344, 353, 368, 371, 373, 385, 393, 396, 397, 401, 403, 404, 433, 449, 451, 489, 517, 519, 526, 540, 541, 623, 693, 709, 725, 753, 772, 773, 779, 863, 958, 960, 962, 966, 967, 973, 981, 983, 987, 990, 1020], "let": [4, 5, 53, 55, 64, 71, 75, 95, 100, 109, 116, 119, 122, 123, 126, 149, 155, 156, 162, 167, 168, 169, 178, 186, 197, 199, 215, 218, 222, 239, 252, 257, 260, 264, 342, 344, 351, 353, 366, 371, 373, 377, 382, 393, 396, 400, 403, 404, 485, 489, 495, 519, 631, 632, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 666, 669, 849, 856, 857, 962, 963, 964, 965, 966, 973, 974, 976, 981, 982, 990, 999, 1001, 1018], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 56, 95, 103, 119, 120, 149, 158, 166, 167, 168, 194, 198, 205, 215, 219, 222, 230, 238, 239, 243, 244, 248, 252, 257, 260, 264, 303, 305, 342, 351, 358, 360, 366, 371, 375, 377, 379, 382, 387, 393, 396, 399, 401, 403, 404, 417, 448, 450, 467, 468, 469, 516, 522, 530, 531, 535, 537, 539, 541, 543, 545, 547, 550, 553, 555, 573, 574, 576, 596, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 664, 666, 669, 674, 678, 689, 705, 724, 739, 816, 817, 826, 834, 841, 863, 877, 884, 886, 889, 892, 894, 920, 960, 965, 966, 973, 976, 984, 990, 1001, 1005, 1018], "look": [4, 5, 53, 55, 95, 98, 100, 122, 123, 149, 154, 155, 162, 167, 168, 199, 218, 222, 226, 248, 252, 257, 259, 295, 342, 353, 358, 359, 365, 366, 369, 371, 373, 375, 377, 379, 382, 383, 396, 399, 401, 402, 403, 404, 433, 473, 474, 542, 543, 544, 545, 549, 550, 587, 588, 616, 644, 677, 863, 891, 892, 893, 894, 962, 963, 976, 980, 981, 983, 1001, 1008, 1016, 1018], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 60, 62, 113, 114, 118, 122, 125, 130, 131, 132, 146, 154, 168, 178, 186, 197, 204, 215, 235, 260, 262, 265, 267, 275, 299, 309, 321, 342, 353, 357, 366, 368, 373, 393, 394, 398, 400, 404, 406, 407, 408, 422, 423, 426, 429, 430, 431, 432, 434, 475, 478, 479, 508, 516, 517, 518, 522, 523, 525, 526, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 554, 555, 572, 617, 618, 633, 643, 644, 651, 652, 654, 657, 659, 661, 662, 663, 665, 672, 685, 688, 689, 691, 692, 693, 698, 705, 706, 707, 709, 710, 712, 713, 714, 718, 719, 720, 722, 723, 724, 727, 729, 730, 732, 734, 735, 737, 740, 748, 765, 766, 767, 768, 769, 771, 772, 777, 778, 779, 780, 807, 829, 849, 864, 952, 956, 961, 962, 967, 970, 972, 973, 980, 981, 982, 999, 1001, 1008, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024], "per": [4, 10, 48, 53, 64, 91, 115, 119, 154, 156, 167, 168, 197, 212, 215, 239, 243, 253, 264, 266, 299, 305, 311, 337, 342, 344, 357, 366, 367, 371, 376, 377, 380, 382, 384, 394, 396, 400, 401, 402, 403, 404, 406, 431, 433, 435, 442, 446, 449, 453, 472, 485, 487, 488, 489, 493, 495, 497, 500, 508, 517, 519, 520, 521, 524, 526, 528, 534, 535, 546, 547, 554, 568, 573, 576, 595, 596, 617, 618, 626, 627, 643, 644, 651, 653, 656, 658, 659, 660, 661, 663, 677, 681, 698, 701, 705, 725, 738, 742, 743, 765, 767, 779, 780, 804, 811, 812, 813, 815, 816, 819, 821, 839, 842, 848, 850, 852, 853, 856, 857, 863, 864, 881, 883, 884, 885, 886, 887, 888, 889, 908, 909, 920, 941, 955, 958, 962, 965, 966, 967, 970, 973, 980, 981, 982, 986, 987, 999, 1001, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1024], "hour": [4, 167, 168, 371, 377, 963, 985], "sundai": 4, "weekend": 4, "clearli": [4, 60, 98, 168, 231, 370, 371, 382, 384, 401, 403, 967, 973], "distinguish": [4, 40, 80, 92, 100, 199, 254, 366, 373, 384, 385, 403, 406, 955, 966, 969, 972], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 75, 86, 98, 122, 155, 167, 168, 169, 186, 197, 198, 205, 215, 222, 223, 232, 243, 263, 299, 301, 303, 304, 322, 342, 343, 344, 353, 359, 366, 370, 371, 372, 373, 375, 376, 379, 382, 384, 394, 395, 396, 397, 398, 400, 401, 403, 404, 406, 426, 428, 430, 431, 432, 433, 434, 444, 446, 517, 520, 542, 543, 544, 545, 549, 550, 567, 574, 579, 612, 613, 615, 624, 643, 644, 680, 685, 690, 697, 727, 745, 751, 758, 762, 765, 770, 772, 806, 843, 844, 875, 876, 891, 892, 893, 894, 920, 935, 955, 956, 958, 960, 962, 965, 966, 969, 971, 972, 974, 976, 978, 980, 981, 982, 990, 1001, 1015, 1016, 1017, 1020, 1022], "leisur": 4, "more": [4, 6, 7, 8, 11, 12, 13, 19, 25, 26, 27, 30, 31, 37, 39, 40, 43, 44, 46, 49, 52, 53, 55, 57, 60, 67, 75, 80, 89, 90, 92, 95, 98, 102, 103, 111, 113, 116, 117, 119, 121, 122, 123, 124, 125, 129, 146, 149, 155, 158, 162, 167, 168, 173, 176, 177, 181, 183, 186, 188, 191, 195, 197, 198, 199, 212, 213, 214, 215, 218, 222, 226, 231, 232, 233, 237, 242, 244, 245, 247, 248, 251, 255, 257, 258, 259, 260, 264, 266, 277, 279, 287, 293, 294, 296, 299, 300, 301, 304, 305, 306, 309, 310, 311, 313, 314, 318, 326, 329, 334, 337, 339, 342, 343, 344, 347, 348, 353, 357, 358, 359, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 383, 384, 385, 387, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 916, 918, 920, 922, 929, 932, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 986, 987, 988, 989, 990, 992, 996, 997, 998, 999, 1000, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "spread": [4, 40, 220, 258, 299, 317, 318, 319, 322, 357, 371, 396, 437, 447, 500, 860, 872, 880, 966], "peak": [4, 27, 168, 394, 400, 1022], "middl": [4, 24, 60, 100, 110, 181, 338, 368, 973, 976], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 170, 173, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 313, 314, 317, 318, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 365, 374, 378, 387, 389, 423, 487, 616, 617, 682, 683, 685, 686, 687, 787, 897, 986, 995, 997, 998, 999, 1005, 1017, 1020, 1021, 1022, 1023], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 170, 173, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 313, 314, 317, 318, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 371, 378, 423, 487, 616, 617, 682, 683, 685, 686, 687, 787, 997, 998, 999, 1005, 1022], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 170, 173, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 313, 314, 317, 318, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 378, 423, 487, 616, 617, 682, 683, 685, 686, 687, 787, 897, 973, 997, 998, 999, 1005], "fig": [4, 5, 7, 8, 10, 14, 25, 27, 42, 43, 45, 53, 55, 57, 60, 64, 66, 73, 78, 80, 86, 90, 95, 100, 101, 102, 106, 109, 115, 116, 119, 122, 123, 126, 127, 129, 131, 152, 158, 161, 168, 170, 173, 177, 185, 188, 191, 192, 194, 195, 197, 198, 205, 210, 212, 215, 218, 219, 220, 221, 222, 223, 227, 229, 235, 236, 247, 252, 253, 254, 257, 258, 259, 260, 263, 266, 267, 268, 275, 277, 279, 281, 282, 290, 294, 295, 299, 300, 301, 303, 304, 305, 309, 313, 314, 326, 336, 337, 338, 339, 342, 343, 344, 347, 378, 997], "ax": [4, 5, 7, 8, 10, 12, 14, 16, 25, 27, 30, 31, 32, 40, 42, 43, 45, 53, 55, 56, 57, 64, 66, 72, 73, 75, 80, 82, 86, 90, 92, 95, 101, 102, 106, 109, 112, 115, 116, 119, 126, 127, 129, 130, 131, 152, 153, 158, 161, 166, 167, 168, 169, 170, 173, 176, 177, 180, 181, 186, 188, 189, 192, 194, 195, 197, 198, 199, 201, 202, 205, 206, 208, 210, 212, 215, 218, 219, 220, 221, 222, 223, 227, 232, 235, 236, 238, 242, 244, 247, 252, 253, 254, 257, 259, 260, 261, 263, 264, 266, 267, 268, 269, 271, 275, 277, 279, 280, 281, 282, 285, 287, 288, 293, 294, 295, 299, 301, 302, 303, 304, 305, 309, 310, 313, 314, 325, 326, 327, 330, 331, 336, 337, 338, 339, 342, 343, 344, 347, 348, 373, 374, 401, 406, 423, 519, 526, 535, 616, 617, 682, 683, 685, 686, 687, 703, 787, 897, 966, 969, 973, 1005, 1018], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 57, 60, 62, 65, 66, 73, 75, 79, 80, 81, 82, 85, 86, 91, 92, 95, 96, 97, 98, 100, 105, 106, 110, 112, 113, 115, 116, 118, 119, 123, 126, 127, 129, 130, 131, 141, 151, 153, 158, 161, 162, 167, 168, 170, 173, 177, 180, 188, 189, 191, 192, 195, 196, 197, 198, 199, 201, 205, 210, 213, 215, 218, 219, 222, 223, 226, 227, 229, 231, 232, 233, 234, 235, 236, 242, 243, 244, 245, 247, 248, 252, 253, 254, 257, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 275, 277, 279, 280, 281, 282, 285, 286, 288, 289, 290, 293, 294, 295, 296, 300, 301, 302, 303, 304, 305, 309, 313, 314, 320, 322, 326, 327, 329, 336, 337, 338, 339, 342, 343, 344, 347, 348, 378, 997], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64, 65, 66, 73, 75, 80, 82, 85, 86, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 105, 106, 110, 112, 113, 119, 120, 121, 122, 123, 127, 129, 130, 141, 151, 153, 157, 158, 161, 162, 167, 168, 170, 173, 176, 177, 180, 181, 187, 191, 194, 195, 196, 197, 198, 199, 201, 203, 205, 208, 211, 213, 215, 218, 219, 220, 222, 223, 226, 227, 229, 231, 233, 234, 235, 236, 242, 244, 245, 248, 252, 253, 254, 259, 260, 261, 264, 266, 267, 271, 275, 277, 279, 293, 294, 296, 299, 300, 301, 302, 303, 304, 305, 313, 314, 317, 319, 327, 329, 333, 334, 336, 337, 338, 339, 342, 343, 344, 897, 997], "4": [4, 5, 6, 7, 8, 9, 10, 12, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 64, 65, 66, 71, 72, 73, 74, 81, 82, 85, 86, 91, 92, 96, 97, 98, 99, 100, 101, 102, 104, 105, 109, 111, 113, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 135, 142, 144, 149, 152, 154, 155, 157, 158, 161, 162, 167, 168, 170, 173, 176, 177, 178, 179, 180, 181, 185, 186, 187, 188, 189, 190, 194, 195, 196, 197, 198, 203, 204, 205, 207, 210, 211, 215, 218, 220, 226, 230, 231, 232, 233, 234, 235, 237, 239, 242, 243, 244, 245, 247, 248, 252, 253, 254, 255, 257, 258, 259, 260, 262, 264, 266, 268, 271, 275, 277, 279, 281, 282, 283, 284, 287, 293, 294, 295, 296, 299, 300, 302, 303, 305, 309, 310, 312, 314, 317, 318, 319, 320, 321, 326, 328, 332, 333, 334, 337, 338, 339, 342, 343, 344, 351, 353, 358, 365, 366, 368, 369, 371, 376, 377, 380, 382, 383, 384, 387, 388, 389, 394, 396, 397, 398, 400, 401, 403, 404, 405, 406, 408, 422, 424, 425, 426, 428, 430, 431, 432, 433, 434, 436, 437, 438, 444, 445, 447, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 481, 489, 497, 498, 501, 502, 503, 513, 517, 518, 519, 520, 522, 523, 524, 525, 529, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 555, 562, 566, 567, 574, 575, 576, 578, 579, 588, 592, 593, 599, 602, 604, 607, 612, 613, 614, 615, 618, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 659, 662, 664, 665, 669, 672, 674, 675, 677, 678, 683, 684, 687, 691, 692, 700, 701, 710, 711, 718, 727, 728, 730, 731, 732, 733, 735, 736, 740, 752, 753, 765, 766, 772, 773, 776, 778, 779, 780, 781, 782, 783, 786, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 807, 809, 812, 813, 814, 817, 818, 819, 820, 822, 831, 840, 841, 842, 848, 849, 850, 855, 856, 857, 858, 859, 861, 864, 867, 871, 877, 883, 884, 886, 887, 889, 891, 892, 893, 909, 917, 919, 920, 922, 924, 925, 930, 934, 937, 955, 956, 959, 960, 961, 962, 964, 966, 967, 968, 969, 976, 977, 980, 981, 984, 992, 996, 997, 998, 999, 1001, 1004, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1021, 1022, 1023], "average_week_demand": 4, "groupbi": [4, 73, 168, 205, 215], "weekdai": [4, 168], "count": [4, 14, 25, 27, 41, 49, 53, 70, 71, 92, 130, 131, 167, 168, 197, 199, 230, 239, 266, 277, 310, 311, 343, 344, 366, 368, 375, 380, 384, 385, 394, 395, 396, 401, 403, 404, 431, 434, 474, 521, 529, 566, 573, 574, 575, 576, 579, 589, 602, 625, 682, 690, 700, 703, 713, 714, 722, 738, 767, 768, 770, 771, 818, 822, 823, 824, 832, 835, 846, 895, 897, 922, 931, 955, 958, 962, 966, 968, 969, 976, 982, 990, 1001, 1008, 1011, 1013, 1016, 1017, 1019, 1020], "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 55, 68, 71, 79, 80, 81, 82, 86, 92, 95, 98, 99, 100, 102, 103, 112, 113, 118, 119, 122, 123, 129, 130, 131, 136, 145, 146, 149, 154, 156, 158, 161, 164, 167, 168, 177, 179, 186, 188, 190, 193, 197, 199, 201, 203, 204, 206, 212, 213, 214, 215, 221, 223, 226, 229, 230, 231, 232, 233, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 253, 254, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 271, 272, 275, 277, 288, 299, 302, 304, 305, 306, 309, 312, 320, 329, 332, 337, 339, 341, 342, 344, 345, 353, 357, 363, 365, 366, 368, 371, 372, 373, 375, 376, 377, 379, 380, 382, 383, 384, 393, 394, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 417, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 443, 444, 445, 446, 447, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 473, 486, 487, 489, 491, 497, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 568, 573, 574, 575, 576, 579, 582, 587, 591, 592, 593, 594, 595, 596, 598, 607, 612, 613, 615, 617, 619, 620, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 669, 673, 674, 675, 676, 677, 678, 679, 680, 689, 690, 692, 694, 697, 698, 701, 702, 708, 710, 713, 714, 715, 720, 721, 722, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 758, 762, 763, 765, 767, 768, 769, 771, 772, 774, 775, 777, 779, 780, 781, 784, 785, 787, 795, 799, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 829, 830, 831, 833, 834, 836, 837, 839, 840, 841, 842, 844, 845, 847, 848, 852, 853, 855, 859, 861, 863, 864, 869, 871, 872, 874, 876, 878, 879, 883, 884, 885, 886, 888, 889, 891, 892, 893, 894, 899, 903, 904, 906, 940, 941, 947, 951, 955, 956, 957, 960, 962, 963, 965, 968, 969, 970, 971, 973, 974, 979, 980, 981, 982, 986, 990, 996, 999, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "plot": [4, 5, 6, 9, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 56, 58, 59, 60, 61, 62, 65, 68, 72, 73, 75, 79, 80, 81, 86, 88, 90, 93, 95, 98, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 121, 122, 124, 126, 127, 128, 133, 136, 138, 141, 142, 144, 149, 150, 151, 152, 153, 154, 155, 156, 158, 161, 164, 165, 166, 167, 169, 170, 171, 173, 175, 179, 180, 182, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 209, 210, 211, 212, 214, 215, 216, 220, 221, 222, 223, 225, 226, 229, 230, 232, 233, 234, 239, 240, 242, 243, 244, 246, 248, 250, 251, 252, 257, 258, 260, 262, 263, 267, 268, 269, 271, 273, 275, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 293, 294, 295, 299, 300, 301, 302, 303, 304, 306, 310, 313, 314, 318, 319, 322, 324, 325, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 346, 347, 349, 350, 351, 352, 360, 371, 374, 380, 382, 386, 387, 391, 394, 396, 398, 400, 402, 403, 423, 426, 431, 435, 441, 449, 456, 481, 486, 487, 489, 497, 500, 504, 508, 509, 538, 542, 545, 547, 549, 550, 554, 555, 595, 607, 616, 617, 618, 642, 643, 657, 661, 682, 683, 685, 686, 687, 688, 703, 711, 734, 766, 768, 771, 772, 773, 787, 798, 804, 805, 806, 807, 810, 821, 825, 841, 844, 856, 857, 860, 863, 883, 888, 891, 892, 897, 959, 960, 962, 963, 965, 966, 969, 970, 972, 980, 981, 982, 986, 987, 996, 997, 999, 1003, 1009, 1011, 1012, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "_": [4, 5, 7, 8, 11, 12, 14, 25, 26, 27, 32, 33, 40, 43, 50, 53, 55, 58, 63, 67, 70, 82, 92, 95, 100, 101, 103, 105, 113, 114, 115, 141, 149, 154, 155, 156, 166, 167, 168, 173, 176, 180, 181, 182, 184, 185, 186, 189, 194, 195, 197, 199, 210, 214, 219, 222, 227, 232, 239, 252, 257, 259, 260, 261, 263, 264, 266, 280, 285, 288, 296, 301, 304, 305, 306, 310, 313, 314, 318, 319, 337, 342, 344, 348, 373, 377, 384, 401, 403, 404, 431, 517, 518, 519, 520, 521, 523, 524, 525, 528, 532, 551, 582, 637, 638, 648, 669, 673, 674, 675, 676, 681, 683, 685, 748, 781, 795, 827, 835, 856, 857, 956, 962, 963, 966, 968, 969, 970, 973, 974, 976, 981, 982, 999, 1015], "hourli": [4, 167], "xtick": [4, 6, 8, 11, 30, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 90, 98, 119, 120, 121, 151, 152, 153, 157, 180, 187, 193, 210, 226, 233, 243, 244, 245, 248, 256, 257, 271, 281, 290, 296, 305, 317, 329, 332, 333, 334, 335, 682, 997], "24": [4, 5, 6, 15, 42, 66, 164, 168, 181, 223, 277, 308, 309, 315, 317, 318, 375, 387, 396, 403, 404, 422, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 445, 447, 449, 454, 455, 456, 457, 458, 459, 460, 461, 474, 475, 476, 477, 481, 489, 500, 501, 502, 503, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 528, 529, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 566, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 598, 612, 613, 614, 615, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 683, 685, 687, 693, 699, 711, 730, 737, 779, 780, 781, 784, 785, 795, 802, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 844, 846, 847, 848, 849, 852, 853, 855, 857, 858, 859, 860, 861, 863, 873, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 914, 915, 941, 947, 955, 973, 976, 984, 1004, 1006, 1008, 1016, 1017, 1018, 1019, 1021], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 25, 26, 27, 30, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 55, 60, 61, 63, 64, 65, 78, 79, 81, 82, 110, 112, 113, 114, 116, 122, 128, 141, 145, 150, 167, 168, 173, 181, 186, 187, 191, 195, 197, 198, 204, 205, 213, 215, 219, 221, 229, 230, 234, 242, 244, 247, 248, 252, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 275, 281, 287, 290, 296, 299, 304, 305, 309, 313, 314, 318, 329, 342, 343, 348, 351, 358, 365, 366, 368, 371, 373, 377, 380, 384, 390, 396, 400, 403, 406, 425, 446, 454, 456, 457, 458, 459, 460, 461, 463, 466, 476, 479, 480, 499, 512, 526, 538, 539, 544, 545, 548, 573, 574, 576, 614, 617, 623, 625, 633, 634, 654, 656, 661, 665, 677, 697, 715, 730, 772, 809, 815, 829, 831, 833, 834, 839, 853, 860, 861, 862, 868, 869, 872, 873, 876, 877, 919, 920, 934, 955, 962, 966, 970, 980, 987, 990, 995, 996, 997, 999, 1013, 1014, 1015, 1016, 1018, 1021], "7": [4, 6, 8, 12, 13, 14, 16, 19, 26, 30, 32, 33, 34, 39, 42, 44, 46, 53, 54, 55, 56, 60, 64, 65, 67, 71, 72, 74, 80, 82, 85, 98, 109, 110, 113, 118, 122, 125, 129, 130, 158, 166, 167, 168, 170, 173, 178, 179, 196, 197, 198, 199, 211, 213, 215, 218, 226, 231, 232, 237, 239, 242, 243, 246, 247, 252, 257, 261, 263, 264, 268, 270, 275, 277, 279, 282, 283, 285, 295, 296, 299, 303, 309, 312, 313, 314, 317, 318, 320, 321, 326, 328, 333, 337, 338, 343, 344, 353, 366, 368, 369, 371, 375, 376, 377, 387, 388, 389, 394, 400, 401, 403, 404, 405, 406, 424, 429, 433, 435, 436, 437, 438, 447, 456, 457, 476, 517, 518, 519, 520, 521, 523, 529, 546, 547, 573, 576, 585, 612, 613, 615, 632, 634, 643, 646, 677, 692, 706, 707, 708, 710, 712, 728, 729, 730, 734, 735, 737, 769, 776, 779, 782, 783, 788, 791, 798, 799, 802, 806, 809, 813, 823, 824, 832, 841, 842, 855, 856, 878, 879, 920, 923, 924, 930, 955, 956, 961, 962, 964, 966, 967, 969, 970, 972, 976, 980, 981, 984, 992, 996, 999, 1004, 1006, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1021], "xticklabel": [4, 10, 119, 168, 305], "sun": [4, 168, 1016, 1021, 1022], "mon": [4, 168], "tue": [4, 168, 1014], "wed": [4, 168], "thu": [4, 5, 24, 25, 26, 27, 40, 53, 55, 60, 78, 82, 98, 100, 113, 115, 117, 119, 142, 149, 154, 155, 168, 181, 185, 186, 197, 199, 215, 226, 232, 236, 244, 255, 257, 262, 263, 264, 306, 309, 312, 347, 353, 357, 358, 366, 373, 377, 382, 384, 394, 396, 400, 401, 403, 404, 406, 407, 422, 424, 448, 500, 512, 538, 539, 540, 541, 542, 543, 548, 549, 550, 588, 591, 595, 607, 612, 617, 618, 628, 630, 643, 662, 690, 703, 709, 772, 777, 783, 788, 790, 802, 814, 817, 852, 883, 957, 958, 959, 960, 961, 962, 963, 966, 967, 972, 973, 974, 976, 978, 979, 980, 981, 987, 989, 990, 1008, 1010, 1014, 1016, 1017, 1018, 1020, 1024], "fri": [4, 168, 366], "sat": [4, 168, 404], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 110, 111, 112, 114, 119, 120, 121, 122, 123, 124, 128, 132, 135, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 167, 176, 179, 180, 181, 182, 184, 185, 186, 187, 190, 191, 197, 199, 200, 201, 202, 204, 206, 207, 211, 215, 230, 232, 233, 252, 256, 257, 261, 262, 266, 267, 270, 271, 272, 279, 280, 283, 284, 305, 326, 328, 329, 332, 342, 348, 349, 350, 616], "ylabel": [4, 8, 9, 24, 25, 26, 27, 30, 33, 34, 37, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 110, 111, 112, 114, 120, 121, 122, 123, 124, 128, 132, 135, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 167, 176, 179, 180, 181, 182, 184, 185, 186, 187, 190, 191, 197, 199, 200, 201, 202, 204, 206, 207, 215, 230, 232, 233, 252, 256, 257, 260, 261, 262, 266, 267, 270, 271, 272, 280, 326, 329, 332, 342, 348, 349, 350, 616], "number": [4, 5, 7, 8, 10, 12, 13, 19, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 57, 61, 62, 63, 67, 68, 70, 71, 72, 73, 75, 82, 85, 86, 91, 92, 95, 97, 99, 100, 103, 109, 110, 111, 113, 117, 118, 120, 121, 122, 123, 125, 129, 131, 142, 143, 146, 157, 158, 162, 164, 167, 168, 173, 181, 186, 196, 197, 198, 199, 204, 205, 211, 212, 213, 214, 215, 218, 226, 230, 233, 236, 242, 243, 245, 247, 248, 251, 252, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 277, 279, 283, 284, 299, 301, 302, 305, 309, 310, 311, 312, 313, 314, 321, 329, 333, 334, 337, 343, 344, 347, 351, 353, 358, 359, 363, 365, 366, 367, 368, 369, 371, 374, 375, 377, 378, 379, 380, 382, 383, 384, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 417, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 566, 567, 568, 569, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 686, 688, 689, 690, 692, 697, 698, 699, 701, 703, 705, 708, 712, 713, 714, 715, 718, 719, 722, 724, 736, 739, 758, 762, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 903, 904, 907, 919, 920, 923, 924, 934, 935, 937, 940, 941, 958, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 978, 980, 981, 982, 983, 986, 987, 989, 992, 999, 1000, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "rental": [4, 168, 973], "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 69, 74, 76, 86, 90, 99, 102, 104, 109, 111, 117, 118, 119, 122, 123, 126, 128, 129, 130, 132, 138, 141, 144, 146, 149, 151, 154, 155, 162, 164, 166, 167, 168, 169, 170, 176, 180, 181, 190, 193, 197, 199, 202, 205, 206, 219, 227, 229, 230, 231, 232, 234, 235, 236, 244, 251, 255, 258, 260, 262, 263, 266, 267, 277, 280, 285, 288, 289, 294, 298, 299, 307, 310, 311, 313, 317, 318, 321, 322, 325, 326, 329, 333, 335, 336, 342, 343, 348, 349, 350, 351, 353, 357, 359, 360, 363, 364, 365, 366, 367, 368, 373, 375, 376, 379, 380, 383, 386, 396, 400, 403, 406, 418, 422, 423, 424, 427, 430, 449, 450, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 493, 495, 505, 509, 516, 517, 519, 521, 522, 524, 527, 528, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 558, 567, 568, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 682, 683, 685, 686, 687, 692, 693, 694, 697, 698, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 719, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 766, 767, 768, 769, 771, 772, 773, 776, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 830, 832, 833, 834, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 872, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 903, 928, 929, 930, 957, 958, 959, 962, 963, 966, 970, 973, 974, 980, 981, 982, 987, 989, 990, 992, 997, 999, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "absolut": [4, 75, 99, 119, 146, 167, 197, 199, 203, 215, 373, 396, 398, 400, 401, 403, 404, 405, 406, 407, 429, 435, 441, 442, 516, 522, 527, 530, 531, 533, 534, 535, 543, 545, 546, 547, 550, 573, 575, 576, 578, 582, 587, 604, 612, 617, 631, 634, 635, 637, 639, 641, 656, 657, 659, 661, 663, 667, 668, 689, 702, 706, 720, 721, 729, 730, 732, 737, 739, 741, 752, 777, 783, 787, 798, 801, 807, 809, 821, 823, 824, 828, 847, 852, 855, 868, 892, 894, 952, 962, 963, 976, 980, 982, 999, 1000, 1009, 1014, 1019, 1020, 1021, 1022], "basi": [4, 6, 13, 100, 149, 154, 156, 198, 295, 312, 329, 363, 369, 372, 396, 401, 403, 437, 519, 607, 617, 624, 676, 862, 964, 976, 981, 988, 996, 997, 1000, 1003, 1016, 1018, 1021], "max": [4, 8, 9, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 58, 62, 67, 72, 77, 82, 83, 90, 95, 98, 106, 110, 112, 118, 127, 135, 137, 138, 141, 142, 151, 153, 154, 162, 164, 167, 179, 184, 185, 186, 190, 192, 199, 200, 203, 211, 213, 215, 221, 230, 233, 255, 256, 257, 268, 270, 275, 277, 279, 283, 284, 290, 293, 295, 299, 301, 302, 304, 312, 320, 322, 328, 335, 338, 357, 396, 398, 401, 454, 455, 456, 457, 458, 459, 460, 461, 462, 497, 521, 540, 541, 542, 543, 544, 545, 548, 549, 550, 591, 612, 616, 617, 633, 634, 654, 657, 659, 665, 676, 677, 681, 684, 689, 690, 725, 741, 774, 775, 781, 840, 841, 852, 853, 855, 862, 869, 870, 891, 892, 893, 894, 934, 962, 964, 969, 976, 980, 981, 999, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "977": [4, 307, 320, 323, 400], "rescal": [4, 46, 47, 55, 100, 178, 185, 221, 299, 339, 398, 408, 454, 455, 456, 457, 458, 459, 460, 461, 518, 523, 631, 634, 637, 855, 861, 885, 886, 887, 888, 889, 966, 976, 1000, 1012, 1013], "variabl": [4, 9, 11, 12, 16, 37, 70, 113, 116, 119, 122, 123, 137, 138, 141, 146, 156, 157, 161, 162, 168, 169, 173, 181, 186, 197, 201, 202, 215, 220, 248, 257, 260, 267, 304, 305, 306, 353, 357, 359, 366, 368, 369, 371, 373, 375, 376, 379, 384, 396, 397, 398, 399, 401, 403, 404, 405, 435, 467, 468, 469, 472, 484, 486, 493, 500, 517, 519, 521, 526, 529, 538, 544, 545, 589, 591, 592, 593, 625, 635, 636, 639, 640, 646, 667, 668, 680, 694, 731, 782, 783, 786, 788, 789, 790, 791, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 811, 815, 816, 846, 857, 860, 864, 872, 884, 955, 956, 958, 962, 965, 966, 967, 968, 969, 971, 973, 974, 976, 980, 982, 986, 987, 989, 992, 993, 995, 997, 1008, 1013, 1016, 1018, 1021, 1023], "rel": [4, 6, 8, 17, 27, 55, 61, 100, 116, 154, 173, 177, 197, 215, 245, 283, 284, 300, 306, 310, 313, 329, 342, 343, 366, 370, 373, 379, 384, 394, 396, 400, 403, 404, 406, 425, 428, 432, 434, 444, 506, 509, 516, 519, 522, 526, 542, 543, 544, 545, 549, 550, 551, 589, 634, 643, 644, 656, 657, 659, 675, 679, 713, 731, 781, 784, 785, 787, 795, 807, 810, 823, 824, 828, 840, 841, 852, 853, 863, 879, 883, 884, 885, 888, 890, 891, 892, 893, 894, 962, 963, 966, 968, 969, 970, 972, 989, 997], "so": [4, 9, 12, 16, 17, 42, 48, 55, 56, 61, 65, 81, 118, 121, 128, 149, 154, 167, 169, 173, 177, 197, 198, 226, 257, 277, 283, 284, 287, 294, 295, 300, 305, 306, 310, 320, 329, 337, 342, 344, 351, 353, 357, 358, 359, 365, 366, 370, 371, 373, 375, 376, 377, 379, 380, 384, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 409, 410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 481, 493, 494, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 680, 690, 693, 701, 710, 725, 740, 772, 779, 780, 781, 784, 785, 787, 788, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 873, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 920, 932, 941, 955, 956, 958, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 976, 978, 979, 980, 981, 987, 990, 999, 1000, 1001, 1008, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1024], "error": [4, 5, 7, 13, 17, 27, 75, 78, 79, 81, 99, 105, 108, 109, 110, 113, 116, 119, 123, 129, 133, 149, 161, 164, 167, 181, 186, 193, 197, 199, 201, 203, 204, 211, 215, 229, 232, 248, 250, 253, 257, 258, 262, 271, 273, 283, 284, 313, 328, 337, 342, 343, 368, 369, 371, 373, 374, 375, 376, 380, 382, 384, 390, 394, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 428, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 481, 488, 500, 509, 516, 522, 527, 528, 530, 533, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 552, 560, 577, 580, 581, 583, 584, 585, 591, 614, 617, 628, 631, 632, 633, 636, 638, 640, 646, 648, 650, 654, 656, 658, 660, 662, 663, 665, 670, 673, 674, 677, 678, 681, 683, 686, 687, 694, 697, 705, 706, 707, 711, 724, 727, 728, 729, 730, 731, 732, 734, 735, 737, 740, 748, 762, 766, 772, 773, 781, 784, 785, 787, 795, 805, 806, 807, 809, 810, 811, 812, 813, 818, 819, 820, 822, 823, 824, 830, 831, 833, 834, 835, 838, 841, 844, 856, 857, 862, 863, 881, 883, 885, 886, 887, 892, 894, 901, 902, 903, 904, 907, 929, 950, 953, 955, 956, 957, 959, 960, 961, 963, 967, 970, 974, 976, 980, 981, 982, 988, 999, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "easili": [4, 9, 31, 143, 170, 200, 213, 231, 236, 239, 257, 259, 266, 282, 301, 371, 373, 384, 385, 397, 403, 404, 406, 434, 960, 962, 963, 976, 980, 981, 982, 993, 996, 1001, 1014], "interpret": [4, 27, 146, 156, 164, 165, 166, 168, 171, 197, 198, 213, 215, 251, 257, 259, 260, 296, 300, 303, 311, 342, 344, 357, 369, 371, 372, 377, 379, 380, 384, 386, 394, 396, 397, 402, 404, 437, 449, 450, 452, 481, 526, 557, 596, 624, 628, 638, 657, 658, 676, 677, 680, 686, 713, 737, 742, 743, 767, 774, 775, 787, 796, 806, 807, 809, 812, 844, 856, 863, 934, 960, 962, 966, 967, 973, 976, 982, 986, 992, 1000, 1008, 1009, 1013, 1016, 1021, 1023], "fraction": [4, 25, 27, 120, 122, 197, 205, 215, 337, 343, 394, 400, 403, 423, 424, 434, 435, 441, 442, 500, 512, 542, 543, 544, 545, 549, 550, 551, 575, 578, 587, 651, 652, 653, 656, 661, 662, 663, 688, 706, 707, 708, 718, 776, 778, 783, 787, 807, 808, 822, 850, 885, 886, 887, 891, 892, 893, 894, 932, 962, 966, 969, 973, 974, 976, 981, 982, 987, 1009, 1010, 1011, 1022], "maximum": [4, 8, 11, 27, 33, 37, 57, 78, 79, 80, 81, 82, 97, 115, 118, 120, 150, 156, 164, 175, 185, 216, 267, 279, 283, 284, 290, 299, 324, 340, 343, 347, 349, 350, 357, 376, 377, 383, 384, 393, 394, 396, 398, 399, 401, 403, 404, 406, 407, 408, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 439, 442, 444, 446, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 468, 469, 483, 494, 496, 497, 498, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 568, 569, 582, 595, 612, 616, 617, 620, 622, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 659, 661, 662, 663, 664, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 701, 728, 765, 779, 781, 784, 785, 787, 795, 802, 807, 832, 839, 840, 841, 847, 848, 852, 853, 855, 858, 859, 860, 862, 871, 872, 877, 878, 879, 880, 883, 884, 888, 891, 892, 893, 894, 895, 897, 900, 907, 955, 961, 962, 963, 965, 966, 968, 969, 970, 972, 976, 980, 981, 982, 1000, 1015, 1016, 1018, 1019, 1022, 1023], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 164, 166, 167, 168, 169, 170, 173, 175, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 221, 226, 227, 229, 231, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 293, 294, 295, 296, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 339, 342, 343, 347, 348, 349, 350, 351, 357, 359, 360, 363, 366, 368, 371, 374, 376, 377, 380, 382, 384, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 412, 417, 418, 419, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 486, 494, 495, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 560, 562, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 596, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 679, 682, 683, 685, 686, 687, 696, 707, 719, 734, 772, 779, 780, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 912, 950, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 973, 974, 976, 977, 978, 979, 980, 981, 982, 986, 987, 988, 990, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 49, 50, 53, 54, 56, 57, 58, 61, 65, 68, 69, 76, 79, 80, 84, 87, 95, 98, 100, 104, 105, 106, 115, 116, 117, 123, 129, 141, 146, 161, 173, 184, 186, 198, 205, 214, 217, 219, 224, 226, 232, 239, 241, 249, 259, 264, 266, 277, 283, 284, 286, 299, 303, 306, 309, 311, 312, 342, 343, 344, 351, 353, 357, 358, 359, 360, 363, 368, 369, 371, 372, 373, 377, 378, 380, 382, 383, 386, 390, 392, 393, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 444, 447, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 489, 497, 499, 507, 510, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 695, 696, 715, 716, 719, 720, 725, 726, 747, 752, 753, 758, 762, 767, 772, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 871, 872, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 906, 920, 927, 932, 935, 950, 951, 954, 955, 956, 960, 961, 962, 963, 966, 967, 968, 969, 970, 971, 974, 976, 978, 979, 980, 981, 982, 983, 986, 988, 990, 992, 996, 998, 999, 1001, 1002, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "minim": [4, 12, 57, 66, 78, 79, 122, 149, 157, 176, 193, 195, 197, 199, 205, 215, 218, 229, 230, 242, 247, 258, 266, 267, 299, 309, 312, 326, 337, 347, 360, 370, 371, 374, 379, 382, 384, 394, 396, 398, 401, 403, 425, 426, 430, 431, 435, 448, 523, 525, 532, 542, 543, 544, 545, 549, 550, 594, 595, 596, 626, 631, 634, 642, 643, 652, 656, 657, 659, 663, 664, 672, 677, 679, 680, 732, 764, 830, 832, 841, 859, 871, 877, 891, 892, 893, 894, 957, 962, 963, 966, 969, 970, 976, 978, 979, 980, 981, 986, 988, 999, 1000, 1003, 1012, 1017, 1018], "squar": [4, 5, 61, 71, 79, 80, 81, 84, 87, 96, 106, 113, 123, 125, 146, 149, 154, 164, 167, 175, 176, 178, 181, 186, 193, 197, 199, 201, 202, 207, 214, 215, 216, 229, 230, 232, 245, 266, 267, 271, 303, 311, 312, 314, 326, 342, 363, 368, 371, 377, 380, 384, 396, 398, 399, 401, 402, 403, 407, 408, 417, 425, 427, 428, 429, 431, 432, 434, 435, 442, 444, 445, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 486, 516, 522, 524, 526, 528, 532, 534, 537, 539, 541, 543, 544, 545, 547, 550, 553, 555, 575, 576, 577, 580, 581, 583, 584, 585, 589, 590, 591, 594, 596, 600, 607, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 667, 668, 671, 672, 673, 675, 677, 679, 681, 684, 694, 706, 707, 708, 734, 735, 742, 743, 747, 753, 754, 769, 809, 816, 817, 825, 826, 829, 831, 833, 834, 841, 844, 863, 883, 884, 886, 888, 889, 890, 892, 894, 918, 939, 952, 957, 959, 960, 969, 970, 974, 980, 982, 988, 999, 1000, 1003, 1008, 1011, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1024], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 37, 38, 44, 45, 49, 54, 55, 56, 57, 58, 61, 63, 71, 72, 74, 83, 85, 86, 95, 96, 97, 103, 105, 108, 109, 110, 115, 116, 118, 120, 122, 126, 129, 130, 131, 132, 133, 135, 136, 144, 145, 146, 148, 149, 154, 156, 159, 160, 161, 163, 166, 167, 175, 178, 181, 185, 186, 192, 197, 199, 201, 202, 204, 205, 214, 215, 216, 225, 226, 227, 232, 237, 239, 240, 241, 242, 244, 245, 247, 249, 250, 251, 254, 255, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 273, 277, 278, 284, 291, 299, 301, 312, 313, 332, 337, 343, 344, 348, 357, 358, 359, 360, 363, 369, 371, 374, 375, 378, 379, 380, 381, 387, 390, 391, 394, 396, 399, 401, 404, 405, 407, 408, 409, 410, 411, 414, 415, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 446, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 476, 477, 480, 481, 483, 486, 487, 509, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 560, 561, 562, 564, 565, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 669, 672, 673, 674, 675, 676, 677, 682, 683, 685, 686, 687, 692, 693, 696, 697, 698, 701, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 766, 767, 768, 769, 771, 772, 773, 776, 779, 780, 781, 784, 785, 786, 787, 792, 793, 795, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 871, 872, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 902, 903, 904, 906, 908, 909, 912, 914, 915, 916, 950, 954, 961, 963, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 987, 988, 990, 992, 993, 995, 997, 999, 1000, 1001, 1002, 1003, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1020, 1021, 1022, 1023, 1024], "condit": [4, 12, 25, 27, 82, 117, 122, 164, 165, 167, 171, 186, 199, 202, 215, 260, 312, 351, 377, 382, 386, 393, 394, 396, 398, 401, 403, 405, 436, 449, 456, 457, 458, 463, 481, 498, 508, 509, 521, 524, 525, 526, 528, 530, 532, 534, 535, 547, 612, 617, 618, 628, 635, 636, 637, 639, 640, 641, 655, 657, 658, 659, 660, 667, 668, 672, 682, 697, 702, 703, 720, 721, 777, 818, 819, 820, 821, 822, 841, 844, 847, 856, 857, 860, 864, 920, 960, 962, 963, 964, 966, 968, 969, 971, 976, 982, 986, 999, 1003, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1020, 1022, 1023, 1024], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 66, 68, 70, 71, 72, 73, 75, 78, 79, 80, 81, 89, 95, 96, 97, 98, 99, 100, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 132, 136, 137, 138, 142, 146, 149, 150, 151, 154, 155, 156, 158, 160, 161, 163, 164, 166, 167, 168, 169, 173, 175, 176, 177, 180, 181, 185, 192, 197, 198, 199, 202, 204, 205, 211, 213, 214, 215, 216, 218, 219, 220, 221, 223, 226, 227, 229, 230, 231, 232, 233, 239, 242, 243, 247, 248, 251, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 270, 272, 275, 277, 280, 283, 284, 285, 288, 290, 299, 304, 305, 306, 310, 311, 312, 314, 318, 322, 325, 326, 328, 329, 331, 332, 342, 343, 344, 347, 350, 351, 353, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 416, 418, 419, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 486, 488, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 560, 561, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 595, 596, 597, 604, 607, 608, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 694, 696, 697, 703, 705, 706, 711, 713, 714, 718, 719, 721, 726, 727, 729, 730, 732, 734, 735, 737, 740, 742, 743, 747, 748, 750, 751, 752, 753, 754, 757, 759, 760, 761, 762, 765, 766, 767, 768, 771, 772, 773, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 792, 793, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 875, 876, 877, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 898, 900, 901, 903, 904, 906, 907, 910, 914, 915, 916, 918, 919, 920, 922, 924, 927, 929, 930, 931, 934, 936, 937, 940, 941, 947, 950, 952, 953, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 990, 993, 995, 996, 1000, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "median": [4, 37, 71, 75, 80, 81, 122, 161, 162, 167, 199, 203, 214, 228, 299, 310, 312, 313, 366, 398, 403, 405, 425, 439, 443, 446, 459, 537, 539, 543, 550, 582, 612, 615, 620, 655, 656, 664, 706, 737, 830, 861, 873, 892, 894, 956, 976, 982, 1011, 1012], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 58, 60, 61, 96, 113, 114, 122, 125, 132, 146, 149, 154, 164, 166, 167, 168, 173, 186, 191, 196, 197, 203, 215, 250, 255, 257, 263, 264, 270, 273, 304, 342, 343, 357, 366, 368, 373, 377, 384, 393, 395, 398, 400, 401, 402, 403, 404, 434, 437, 447, 483, 500, 523, 525, 532, 536, 542, 543, 544, 545, 548, 549, 550, 589, 592, 593, 596, 612, 616, 643, 675, 677, 683, 684, 687, 689, 690, 692, 694, 697, 698, 701, 702, 705, 709, 710, 711, 713, 715, 720, 721, 723, 724, 727, 731, 739, 740, 741, 766, 767, 768, 770, 771, 773, 774, 777, 804, 806, 809, 829, 860, 872, 891, 892, 893, 894, 956, 962, 964, 969, 971, 972, 974, 980, 982, 996, 999, 1008, 1011, 1013, 1014, 1016, 1018], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 70, 71, 85, 100, 109, 110, 113, 115, 116, 117, 120, 121, 122, 123, 124, 135, 138, 140, 142, 145, 147, 149, 150, 164, 166, 167, 168, 169, 170, 173, 181, 186, 192, 193, 197, 198, 199, 204, 205, 212, 213, 215, 222, 227, 232, 234, 244, 250, 251, 252, 255, 256, 257, 258, 259, 261, 262, 264, 265, 267, 268, 269, 273, 275, 285, 286, 293, 295, 301, 304, 305, 306, 321, 329, 337, 344, 353, 357, 358, 365, 366, 368, 374, 375, 376, 377, 382, 383, 384, 386, 387, 389, 391, 394, 397, 398, 401, 403, 404, 405, 406, 413, 415, 417, 420, 421, 422, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 473, 474, 478, 482, 483, 487, 489, 509, 516, 522, 524, 528, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 577, 579, 580, 581, 583, 584, 585, 587, 589, 590, 591, 593, 594, 595, 596, 612, 613, 615, 620, 621, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 684, 697, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 830, 833, 834, 840, 841, 843, 868, 869, 871, 872, 873, 874, 878, 879, 881, 883, 884, 885, 886, 888, 889, 891, 892, 893, 894, 912, 914, 915, 961, 962, 965, 966, 969, 970, 974, 976, 980, 981, 982, 986, 987, 989, 990, 993, 996, 997, 1003, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "discuss": [4, 53, 58, 167, 186, 218, 223, 260, 342, 353, 359, 366, 368, 371, 376, 377, 379, 382, 384, 385, 396, 398, 402, 403, 406, 483, 667, 668, 825, 826, 831, 833, 834, 956, 960, 962, 963, 966, 969, 976, 983, 987, 1011], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 60, 62, 66, 78, 101, 102, 118, 129, 135, 136, 146, 167, 170, 190, 233, 235, 252, 262, 269, 347, 353, 357, 358, 359, 360, 373, 376, 379, 384, 396, 398, 400, 403, 404, 406, 407, 428, 429, 432, 434, 444, 508, 517, 523, 544, 545, 567, 587, 643, 644, 657, 659, 664, 672, 673, 674, 678, 710, 740, 781, 784, 785, 795, 850, 883, 884, 891, 892, 893, 894, 956, 957, 961, 962, 963, 964, 965, 969, 976, 979, 980, 981, 993, 995, 999, 1000, 1010, 1011, 1015, 1017, 1019], "focu": [4, 9, 27, 95, 149, 248, 287, 357, 376, 394, 403, 538, 539, 544, 546, 547, 663, 963, 969, 976, 986, 987], "intuit": [4, 31, 44, 52, 62, 100, 113, 119, 141, 149, 167, 168, 198, 199, 220, 226, 258, 282, 301, 304, 326, 329, 343, 371, 384, 394, 396, 398, 400, 402, 766, 767, 768, 771, 854, 958, 962, 963, 966, 967, 973, 976, 977, 981, 990, 999, 1001, 1008], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 53, 55, 72, 75, 80, 82, 86, 92, 95, 98, 100, 103, 109, 110, 112, 113, 115, 116, 118, 119, 122, 146, 149, 155, 158, 161, 167, 168, 169, 173, 176, 181, 183, 186, 197, 199, 203, 213, 214, 215, 222, 226, 232, 233, 243, 254, 255, 257, 258, 259, 260, 263, 266, 275, 277, 283, 284, 296, 299, 303, 304, 305, 311, 313, 318, 342, 343, 344, 353, 357, 358, 359, 365, 366, 367, 370, 371, 373, 376, 377, 379, 384, 385, 390, 393, 394, 395, 396, 398, 399, 400, 401, 403, 404, 405, 406, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 439, 442, 445, 448, 449, 452, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 478, 479, 481, 494, 499, 500, 508, 516, 519, 520, 521, 522, 523, 525, 526, 527, 529, 532, 533, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 558, 566, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 596, 612, 613, 615, 619, 625, 627, 628, 629, 630, 631, 632, 637, 638, 640, 643, 644, 645, 646, 647, 648, 651, 652, 653, 656, 657, 659, 661, 662, 663, 664, 667, 672, 677, 679, 681, 689, 690, 697, 705, 706, 707, 708, 719, 720, 723, 748, 763, 764, 765, 767, 769, 777, 779, 780, 781, 784, 785, 791, 795, 800, 802, 804, 805, 806, 807, 808, 811, 813, 814, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 840, 841, 846, 856, 857, 858, 860, 861, 863, 866, 872, 873, 877, 880, 883, 884, 885, 888, 889, 891, 892, 893, 894, 895, 909, 920, 922, 923, 929, 935, 937, 940, 955, 956, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 980, 981, 982, 986, 987, 992, 996, 999, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "root": [4, 16, 80, 146, 178, 351, 368, 371, 379, 396, 427, 486, 526, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 624, 735, 891, 892, 893, 894, 895, 897, 972, 982, 1010, 1016, 1017, 1018, 1019, 1022, 1023], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 58, 60, 64, 68, 70, 75, 82, 109, 110, 115, 121, 123, 124, 129, 143, 150, 161, 164, 166, 167, 169, 181, 186, 192, 193, 197, 199, 201, 203, 215, 221, 227, 230, 231, 235, 238, 250, 251, 253, 254, 255, 257, 258, 260, 264, 266, 267, 273, 275, 277, 279, 287, 290, 296, 299, 304, 309, 310, 312, 313, 314, 317, 318, 320, 321, 342, 343, 353, 357, 360, 363, 366, 371, 373, 382, 383, 384, 386, 391, 394, 401, 402, 403, 406, 407, 413, 422, 426, 429, 430, 431, 435, 442, 454, 505, 520, 534, 535, 536, 538, 540, 542, 543, 544, 546, 547, 549, 550, 552, 554, 563, 587, 595, 605, 613, 619, 623, 624, 625, 626, 627, 628, 643, 644, 648, 651, 653, 659, 660, 661, 673, 675, 677, 679, 681, 781, 784, 785, 787, 795, 804, 805, 806, 808, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 849, 855, 878, 879, 883, 885, 888, 891, 893, 956, 958, 961, 967, 972, 974, 986, 987, 996, 997, 1001, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "studi": [4, 60, 122, 197, 215, 260, 263, 264, 342, 366, 368, 400, 405, 681, 693, 742, 743, 808, 964, 966, 980, 992], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 56, 57, 60, 61, 62, 65, 66, 71, 72, 73, 74, 75, 81, 85, 86, 90, 91, 92, 97, 99, 100, 101, 102, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 215, 218, 219, 220, 223, 227, 229, 230, 231, 232, 233, 235, 236, 238, 239, 242, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 347, 348, 349, 350, 351, 353, 363, 364, 365, 366, 369, 371, 373, 376, 378, 380, 383, 384, 390, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 409, 413, 414, 415, 417, 418, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 472, 483, 485, 487, 490, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 683, 684, 685, 686, 687, 691, 696, 710, 719, 725, 726, 740, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 769, 772, 773, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 903, 908, 909, 928, 929, 930, 937, 940, 953, 955, 956, 957, 958, 960, 961, 962, 964, 966, 967, 968, 969, 970, 971, 973, 976, 980, 981, 982, 987, 992, 996, 997, 999, 1003, 1005, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "hist": [4, 25, 27, 53, 75, 112, 197, 199, 230, 263, 282, 299, 303, 305, 313], "bin": [4, 24, 25, 27, 53, 75, 112, 197, 230, 263, 282, 299, 300, 301, 302, 303, 305, 306, 369, 379, 387, 394, 402, 403, 423, 424, 433, 446, 546, 547, 846, 848, 862, 922, 1000, 1016, 1017, 1018, 1022], "30": [4, 8, 10, 14, 19, 34, 39, 40, 54, 60, 71, 73, 78, 98, 101, 103, 107, 118, 122, 128, 129, 133, 135, 149, 150, 153, 155, 168, 173, 176, 191, 195, 197, 205, 215, 216, 218, 219, 223, 231, 234, 246, 257, 262, 271, 277, 286, 287, 303, 304, 305, 314, 317, 318, 322, 327, 330, 332, 335, 357, 366, 368, 376, 377, 400, 404, 407, 429, 435, 442, 485, 520, 523, 524, 526, 528, 555, 577, 580, 581, 583, 633, 677, 719, 767, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 864, 879, 892, 955, 960, 966, 967, 969, 974, 997, 1008, 1009, 1015, 1016, 1017], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 73, 95, 99, 109, 118, 122, 123, 155, 156, 157, 167, 173, 176, 197, 200, 201, 205, 212, 215, 229, 230, 232, 239, 252, 281, 282, 295, 300, 301, 302, 303, 309, 312, 314, 329, 335, 338, 344, 365, 368, 371, 374, 376, 380, 381, 382, 383, 384, 393, 394, 397, 400, 401, 402, 403, 404, 405, 406, 408, 414, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 430, 433, 434, 435, 439, 442, 443, 446, 449, 450, 452, 453, 454, 456, 457, 467, 468, 469, 474, 488, 494, 501, 502, 503, 505, 509, 513, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 596, 605, 607, 612, 613, 614, 615, 616, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 706, 707, 708, 712, 729, 730, 732, 734, 735, 737, 738, 745, 751, 752, 755, 756, 758, 762, 763, 764, 765, 769, 779, 780, 781, 784, 785, 787, 795, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 900, 901, 902, 903, 904, 905, 909, 914, 919, 930, 939, 941, 947, 952, 953, 956, 958, 960, 962, 963, 964, 965, 966, 968, 969, 970, 971, 973, 974, 978, 979, 980, 981, 982, 986, 987, 990, 992, 996, 997, 1003, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "annot": [4, 9, 26, 131, 173, 219, 261, 264, 342, 371, 372, 373, 396, 701, 897, 966, 982, 1017], "log": [4, 20, 25, 26, 27, 78, 95, 122, 129, 142, 146, 150, 151, 153, 154, 155, 158, 182, 185, 186, 190, 197, 201, 202, 207, 215, 230, 232, 246, 287, 304, 342, 366, 368, 369, 371, 375, 379, 380, 384, 393, 394, 396, 397, 398, 401, 403, 404, 406, 433, 436, 445, 450, 455, 456, 457, 458, 459, 460, 461, 517, 521, 526, 534, 535, 536, 538, 540, 542, 544, 547, 549, 575, 576, 578, 579, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 627, 630, 633, 643, 644, 654, 656, 661, 665, 725, 735, 739, 779, 780, 781, 784, 785, 795, 818, 819, 820, 821, 822, 823, 824, 828, 839, 840, 847, 848, 877, 880, 885, 888, 890, 891, 893, 918, 955, 958, 960, 962, 963, 968, 969, 971, 974, 976, 980, 982, 986, 987, 999, 1010, 1011, 1012, 1017, 1018, 1019, 1022], "describ": [4, 56, 129, 167, 215, 231, 257, 266, 353, 357, 358, 364, 366, 368, 370, 371, 373, 376, 379, 384, 385, 393, 396, 398, 399, 400, 401, 403, 404, 447, 454, 458, 459, 476, 478, 480, 481, 482, 485, 486, 487, 488, 489, 490, 495, 501, 502, 503, 513, 592, 593, 630, 644, 699, 779, 780, 818, 820, 858, 920, 955, 958, 961, 962, 965, 966, 968, 972, 980, 981, 982, 989, 992, 998, 999, 1016, 1018], "weather": [4, 154, 168, 406, 962, 966], "includ": [4, 32, 55, 80, 119, 121, 166, 167, 169, 181, 197, 215, 258, 277, 294, 299, 312, 313, 329, 334, 342, 344, 353, 357, 358, 365, 367, 369, 371, 372, 373, 375, 376, 377, 379, 380, 384, 385, 387, 393, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 429, 431, 435, 441, 451, 454, 455, 456, 457, 458, 459, 460, 461, 474, 475, 476, 481, 485, 486, 487, 489, 490, 495, 519, 526, 542, 549, 559, 617, 623, 631, 632, 637, 645, 646, 647, 650, 666, 673, 674, 682, 698, 713, 714, 719, 721, 722, 755, 767, 768, 771, 777, 781, 783, 784, 785, 794, 795, 798, 801, 806, 809, 831, 833, 834, 835, 856, 857, 858, 862, 880, 891, 893, 895, 897, 903, 904, 907, 909, 912, 955, 962, 965, 966, 967, 969, 970, 976, 980, 981, 982, 986, 987, 989, 990, 999, 1001, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "both": [4, 5, 7, 9, 10, 14, 16, 25, 26, 42, 54, 55, 64, 71, 78, 80, 85, 86, 100, 103, 109, 113, 116, 119, 128, 129, 132, 141, 142, 146, 149, 156, 158, 166, 167, 168, 169, 176, 181, 183, 185, 186, 197, 198, 199, 202, 203, 205, 215, 222, 232, 233, 242, 243, 244, 245, 246, 247, 257, 258, 259, 260, 264, 266, 268, 272, 277, 289, 299, 303, 304, 309, 311, 319, 320, 326, 331, 337, 342, 343, 344, 351, 353, 357, 358, 359, 364, 365, 366, 367, 369, 371, 373, 377, 378, 380, 382, 383, 384, 385, 387, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 406, 409, 422, 431, 432, 437, 444, 447, 453, 460, 467, 468, 469, 470, 473, 474, 481, 482, 485, 487, 490, 492, 493, 494, 519, 523, 525, 532, 536, 540, 541, 542, 548, 549, 550, 551, 552, 562, 573, 574, 576, 582, 592, 593, 612, 617, 618, 628, 642, 643, 644, 657, 659, 661, 663, 672, 684, 689, 697, 701, 715, 720, 741, 745, 751, 758, 762, 767, 772, 773, 777, 784, 785, 787, 812, 840, 841, 855, 857, 859, 871, 876, 881, 883, 884, 891, 893, 907, 921, 929, 941, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 979, 980, 981, 982, 986, 987, 989, 990, 996, 999, 1000, 1001, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "numer": [4, 19, 66, 71, 75, 117, 119, 129, 146, 154, 157, 168, 169, 186, 197, 215, 237, 239, 287, 305, 312, 344, 365, 366, 368, 374, 376, 377, 382, 383, 384, 396, 398, 403, 404, 405, 406, 408, 409, 425, 428, 432, 444, 456, 457, 460, 463, 474, 475, 476, 481, 485, 486, 487, 489, 490, 495, 516, 518, 520, 525, 532, 552, 566, 575, 596, 602, 605, 612, 615, 617, 618, 631, 637, 639, 657, 672, 675, 679, 699, 772, 776, 781, 784, 785, 787, 795, 805, 806, 807, 810, 818, 819, 820, 821, 822, 840, 841, 846, 851, 856, 857, 864, 895, 896, 897, 903, 904, 919, 920, 955, 956, 962, 963, 967, 974, 976, 977, 982, 989, 990, 992, 1001, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "categor": [4, 71, 108, 115, 129, 133, 164, 167, 168, 169, 197, 215, 237, 239, 306, 312, 314, 359, 363, 365, 366, 373, 376, 384, 397, 404, 451, 452, 474, 475, 481, 490, 546, 547, 566, 567, 592, 593, 617, 618, 633, 643, 644, 654, 665, 694, 806, 818, 819, 820, 821, 822, 844, 846, 850, 851, 854, 856, 857, 864, 878, 879, 956, 962, 973, 974, 982, 986, 987, 988, 989, 990, 1001, 1003, 1008, 1009, 1012, 1013, 1016, 1018, 1020, 1023, 1024], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 37, 38, 49, 53, 58, 66, 67, 70, 71, 86, 89, 90, 91, 102, 116, 117, 140, 142, 143, 145, 146, 147, 149, 154, 164, 167, 168, 170, 173, 175, 176, 177, 181, 198, 212, 214, 215, 216, 236, 244, 245, 247, 252, 254, 257, 258, 259, 262, 264, 266, 283, 284, 287, 306, 312, 332, 337, 342, 343, 344, 348, 351, 353, 357, 360, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 379, 382, 383, 384, 385, 390, 393, 400, 401, 403, 404, 405, 406, 431, 437, 447, 477, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 495, 500, 509, 513, 519, 520, 523, 524, 526, 528, 542, 546, 547, 549, 572, 574, 575, 577, 578, 579, 580, 581, 584, 585, 591, 592, 593, 594, 624, 625, 641, 643, 672, 676, 680, 682, 686, 689, 690, 700, 710, 714, 727, 739, 740, 741, 770, 772, 777, 779, 780, 781, 782, 783, 784, 785, 786, 788, 790, 795, 799, 806, 818, 822, 823, 824, 828, 832, 844, 855, 860, 863, 868, 869, 871, 872, 873, 874, 879, 882, 885, 888, 891, 893, 895, 897, 956, 958, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 980, 982, 987, 990, 998, 999, 1000, 1001, 1008, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "alreadi": [4, 6, 10, 16, 55, 58, 100, 129, 146, 167, 227, 233, 238, 258, 264, 277, 312, 371, 372, 376, 382, 384, 394, 398, 400, 402, 403, 408, 422, 484, 508, 518, 552, 553, 619, 631, 634, 649, 650, 651, 652, 653, 659, 661, 662, 663, 670, 671, 752, 818, 838, 846, 852, 853, 855, 860, 866, 868, 869, 870, 872, 873, 874, 880, 883, 884, 906, 955, 972, 976, 977, 987, 992, 997, 1001, 1005, 1009, 1013, 1016, 1020, 1021, 1022, 1023], "expand": [4, 16, 49, 65, 228, 305, 310, 353, 363, 403, 429, 435, 484, 542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894, 966, 1009, 1016, 1017, 1024], "complementari": [4, 404], "column": [4, 20, 21, 60, 69, 72, 75, 76, 90, 116, 118, 119, 122, 126, 129, 146, 154, 161, 164, 166, 167, 168, 169, 186, 197, 198, 205, 215, 234, 236, 247, 257, 258, 268, 269, 295, 304, 306, 311, 312, 313, 314, 342, 343, 344, 357, 365, 366, 368, 371, 373, 377, 380, 382, 383, 384, 393, 396, 397, 399, 401, 403, 404, 405, 408, 411, 436, 438, 449, 451, 452, 456, 457, 463, 472, 473, 474, 475, 476, 477, 479, 481, 485, 486, 487, 489, 490, 493, 494, 495, 496, 498, 500, 511, 516, 519, 522, 527, 529, 533, 540, 542, 543, 549, 550, 551, 552, 566, 567, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 595, 612, 615, 617, 618, 619, 631, 633, 637, 643, 645, 647, 649, 650, 654, 665, 670, 671, 682, 698, 703, 704, 713, 714, 722, 738, 747, 752, 753, 754, 757, 767, 768, 771, 772, 781, 784, 785, 795, 804, 809, 814, 817, 818, 819, 820, 821, 822, 823, 824, 843, 847, 848, 849, 850, 856, 857, 858, 862, 863, 864, 865, 867, 883, 885, 888, 891, 893, 899, 903, 904, 909, 920, 929, 942, 943, 945, 953, 955, 956, 962, 964, 966, 967, 974, 976, 981, 987, 1008, 1010, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 218, 219, 220, 223, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 357, 364, 365, 366, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 390, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 472, 478, 479, 480, 483, 485, 486, 487, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 691, 695, 696, 709, 719, 726, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 772, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 907, 919, 920, 922, 927, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 955, 956, 957, 958, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 976, 978, 979, 980, 981, 982, 987, 992, 996, 997, 999, 1000, 1001, 1005, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "drop": [4, 5, 71, 75, 86, 154, 166, 167, 168, 170, 197, 215, 239, 267, 305, 311, 314, 343, 375, 379, 397, 401, 403, 449, 452, 552, 553, 554, 555, 680, 685, 687, 766, 773, 842, 856, 862, 956, 962, 966, 974, 976, 986, 1008, 1009, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 34, 37, 39, 40, 47, 48, 50, 52, 53, 54, 55, 61, 71, 72, 75, 82, 86, 91, 92, 95, 96, 97, 98, 99, 105, 110, 112, 113, 116, 118, 125, 128, 132, 138, 142, 153, 154, 158, 161, 166, 167, 178, 182, 184, 186, 189, 190, 191, 197, 201, 202, 206, 209, 211, 212, 214, 215, 219, 220, 223, 226, 230, 231, 234, 235, 242, 244, 246, 247, 253, 254, 258, 259, 264, 266, 267, 272, 275, 277, 282, 283, 284, 287, 288, 289, 296, 299, 303, 306, 318, 320, 322, 325, 328, 329, 332, 333, 334, 335, 336, 337, 339, 342, 343, 348, 349, 350, 351, 373, 380, 384, 394, 396, 404, 408, 423, 430, 449, 452, 516, 518, 521, 522, 524, 526, 528, 535, 570, 597, 616, 617, 670, 671, 686, 747, 763, 764, 765, 766, 787, 811, 852, 853, 860, 861, 863, 866, 868, 869, 870, 872, 873, 874, 897, 899, 903, 904, 922, 941, 947, 956, 966, 973, 976, 981, 998, 1000, 1016, 1018, 1020], "holidai": [4, 168], "workingdai": [4, 168], "temp": [4, 168], "feel_temp": [4, 168], "humid": [4, 168, 973], "windspe": [4, 168], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 357, 358, 365, 366, 368, 369, 371, 372, 373, 375, 376, 377, 378, 380, 382, 383, 384, 387, 388, 389, 390, 392, 393, 394, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 417, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 752, 753, 755, 757, 759, 760, 761, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 903, 904, 909, 914, 915, 917, 919, 920, 922, 923, 924, 925, 927, 928, 929, 931, 932, 934, 935, 936, 937, 940, 941, 947, 955, 956, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 984, 987, 988, 992, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006], "spring": [4, 168], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 39, 42, 44, 46, 47, 54, 55, 64, 67, 70, 71, 72, 73, 79, 81, 92, 99, 101, 104, 105, 109, 116, 119, 122, 123, 132, 135, 149, 154, 155, 156, 157, 167, 168, 169, 170, 176, 177, 181, 183, 197, 198, 202, 203, 205, 213, 215, 218, 221, 233, 235, 239, 242, 254, 255, 257, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 277, 281, 287, 290, 294, 295, 299, 300, 305, 306, 309, 311, 312, 313, 314, 319, 329, 331, 337, 338, 342, 343, 365, 371, 372, 373, 376, 384, 394, 396, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 419, 420, 421, 422, 425, 426, 427, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 444, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 493, 494, 495, 497, 500, 508, 509, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 622, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 679, 680, 682, 683, 684, 685, 686, 687, 688, 693, 694, 696, 697, 698, 699, 700, 703, 710, 711, 712, 713, 714, 715, 722, 726, 727, 734, 735, 738, 740, 745, 747, 751, 752, 753, 758, 762, 766, 767, 768, 769, 771, 773, 776, 778, 779, 780, 781, 784, 785, 786, 787, 792, 795, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 880, 881, 883, 884, 885, 886, 887, 888, 889, 895, 896, 897, 901, 902, 903, 904, 914, 921, 927, 928, 931, 932, 936, 937, 940, 947, 952, 953, 955, 956, 962, 966, 969, 976, 980, 981, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "6": [4, 8, 9, 10, 11, 12, 16, 19, 26, 31, 32, 40, 44, 46, 49, 50, 52, 56, 57, 60, 61, 62, 63, 64, 65, 67, 73, 74, 75, 78, 79, 80, 82, 90, 95, 97, 105, 111, 122, 123, 126, 128, 135, 141, 146, 149, 152, 154, 156, 157, 158, 161, 162, 167, 168, 173, 176, 177, 178, 181, 186, 190, 195, 197, 198, 199, 201, 211, 215, 218, 219, 220, 222, 226, 229, 230, 233, 236, 237, 242, 243, 244, 245, 247, 248, 251, 252, 256, 257, 258, 259, 260, 262, 266, 267, 268, 269, 270, 272, 275, 279, 282, 290, 293, 295, 296, 299, 301, 303, 304, 306, 309, 312, 313, 314, 317, 318, 321, 322, 329, 330, 332, 334, 337, 339, 342, 343, 344, 350, 353, 365, 366, 368, 369, 376, 377, 383, 387, 388, 389, 394, 396, 397, 400, 401, 403, 404, 405, 431, 433, 434, 435, 436, 437, 438, 447, 467, 468, 469, 470, 490, 509, 515, 523, 525, 526, 532, 548, 554, 555, 578, 579, 596, 599, 600, 610, 612, 613, 615, 629, 630, 655, 674, 678, 706, 712, 722, 729, 730, 734, 735, 737, 753, 769, 772, 779, 780, 782, 783, 788, 790, 791, 793, 798, 799, 802, 807, 809, 818, 819, 820, 822, 823, 824, 831, 833, 834, 835, 850, 851, 853, 856, 858, 861, 862, 867, 898, 920, 923, 925, 929, 955, 956, 960, 962, 963, 966, 976, 977, 980, 981, 982, 984, 992, 996, 997, 999, 1004, 1006, 1009, 1010, 1011, 1016, 1021], "clear": [4, 16, 55, 60, 72, 167, 168, 304, 366, 370, 371, 373, 382, 383, 384, 394, 397, 402, 897, 898, 955, 960, 1019, 1020, 1021], "9": [4, 7, 8, 9, 12, 13, 24, 26, 27, 30, 31, 32, 42, 44, 50, 55, 58, 62, 64, 74, 82, 85, 91, 95, 98, 109, 118, 119, 120, 121, 122, 127, 129, 135, 137, 138, 152, 156, 158, 162, 166, 167, 168, 178, 179, 188, 197, 210, 211, 214, 215, 218, 221, 230, 231, 235, 239, 242, 243, 244, 245, 251, 260, 264, 266, 275, 279, 281, 282, 285, 286, 287, 293, 294, 296, 299, 301, 302, 303, 305, 306, 314, 317, 318, 320, 321, 322, 329, 333, 339, 342, 344, 353, 368, 369, 377, 383, 387, 388, 389, 394, 397, 398, 400, 403, 404, 424, 428, 435, 442, 467, 468, 469, 470, 475, 505, 512, 519, 523, 524, 525, 532, 545, 552, 555, 568, 576, 592, 593, 612, 615, 619, 624, 632, 643, 646, 677, 694, 707, 710, 725, 732, 753, 762, 763, 764, 779, 782, 784, 785, 799, 802, 807, 809, 812, 820, 821, 825, 826, 831, 834, 840, 841, 849, 855, 858, 920, 924, 955, 962, 966, 970, 976, 980, 981, 984, 992, 996, 1001, 1004, 1006, 1009, 1010, 1011, 1013, 1022, 1024], "84": [4, 6, 70, 143, 188, 215, 296, 301, 317, 353, 368, 403, 404, 772, 795, 961, 966, 976, 997], "14": [4, 11, 22, 38, 49, 55, 60, 62, 63, 66, 68, 74, 81, 100, 141, 163, 167, 168, 171, 181, 186, 188, 215, 220, 226, 231, 256, 262, 263, 271, 275, 277, 291, 296, 302, 303, 314, 336, 339, 358, 366, 368, 383, 396, 400, 483, 495, 538, 539, 570, 571, 620, 628, 677, 795, 799, 849, 959, 962, 966, 976, 981, 984, 992, 1006, 1008, 1009, 1011, 1012, 1016, 1021], "395": [4, 75, 76], "81": [4, 8, 50, 239, 317, 318, 396, 772, 781, 795, 966, 967, 969, 976], "0000": [4, 314], "02": [4, 12, 15, 35, 44, 50, 52, 58, 62, 64, 68, 76, 82, 85, 95, 98, 107, 112, 118, 151, 156, 159, 166, 167, 171, 178, 215, 224, 226, 230, 233, 252, 258, 264, 273, 282, 293, 296, 297, 299, 301, 307, 322, 325, 340, 343, 348, 365, 368, 376, 400, 426, 430, 582, 643, 661, 781, 795, 862, 878, 892, 962], "13": [4, 5, 6, 10, 11, 15, 19, 22, 44, 74, 100, 105, 118, 120, 121, 123, 161, 167, 173, 183, 206, 218, 220, 224, 251, 258, 261, 263, 296, 299, 303, 329, 342, 345, 366, 368, 371, 377, 383, 400, 408, 495, 498, 517, 518, 536, 537, 567, 620, 624, 718, 799, 827, 842, 849, 875, 876, 962, 966, 967, 972, 973, 976, 981, 984, 992, 1006, 1008, 1010, 1011, 1014, 1015, 1016, 1017, 1020], "635": [4, 162, 163, 601], "80": [4, 6, 8, 11, 16, 27, 67, 81, 101, 129, 138, 143, 168, 176, 233, 296, 301, 305, 317, 332, 333, 334, 342, 349, 353, 366, 368, 371, 394, 400, 405, 429, 495, 526, 698, 781, 795, 864, 877, 896, 955, 961, 962, 966, 973, 979, 982, 1001], "75": [4, 6, 7, 10, 33, 44, 55, 82, 113, 143, 156, 157, 162, 167, 173, 176, 179, 188, 204, 215, 239, 244, 245, 257, 266, 270, 282, 299, 312, 339, 342, 353, 434, 536, 643, 691, 697, 718, 723, 729, 737, 740, 776, 781, 861, 873, 880, 896, 966, 968, 976, 982, 985, 997, 1010], "17374": 4, "19": [4, 7, 8, 9, 15, 98, 154, 167, 220, 247, 297, 303, 304, 311, 315, 318, 340, 368, 375, 384, 396, 397, 404, 407, 429, 477, 501, 502, 503, 521, 525, 526, 532, 534, 535, 542, 543, 544, 545, 549, 550, 551, 567, 574, 633, 643, 644, 651, 652, 653, 656, 657, 659, 661, 663, 672, 692, 765, 769, 781, 795, 806, 811, 812, 814, 815, 829, 830, 849, 860, 881, 885, 888, 891, 892, 893, 894, 955, 966, 976, 984, 1004, 1006, 1008, 1009, 1010, 1011, 1013, 1016], "misti": [4, 168], "10": [4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 20, 25, 26, 27, 30, 31, 32, 34, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 82, 85, 86, 92, 97, 98, 99, 100, 101, 105, 106, 109, 110, 112, 113, 115, 116, 118, 119, 120, 122, 123, 126, 127, 130, 132, 133, 136, 138, 143, 146, 150, 151, 153, 155, 156, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 181, 187, 188, 190, 191, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 213, 214, 215, 219, 220, 226, 229, 230, 231, 232, 234, 235, 236, 238, 240, 245, 246, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 265, 268, 271, 275, 282, 293, 294, 295, 296, 299, 300, 302, 303, 304, 309, 310, 311, 312, 313, 317, 318, 319, 321, 327, 329, 331, 332, 333, 334, 336, 337, 339, 342, 343, 344, 353, 357, 365, 366, 367, 368, 369, 371, 373, 376, 377, 382, 383, 384, 387, 388, 389, 393, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 409, 423, 428, 432, 434, 436, 437, 438, 444, 445, 447, 460, 477, 478, 485, 486, 487, 489, 495, 496, 497, 498, 501, 505, 506, 509, 513, 516, 520, 521, 522, 523, 524, 526, 527, 529, 531, 533, 537, 540, 541, 542, 543, 546, 547, 549, 550, 551, 552, 553, 555, 567, 568, 578, 579, 584, 585, 596, 602, 604, 612, 615, 617, 619, 620, 625, 627, 628, 629, 634, 644, 649, 650, 651, 652, 654, 655, 657, 658, 660, 661, 662, 663, 670, 671, 676, 677, 690, 700, 710, 726, 740, 753, 779, 780, 781, 782, 783, 784, 785, 792, 795, 796, 797, 798, 799, 801, 802, 807, 809, 811, 812, 818, 819, 820, 822, 823, 824, 830, 839, 840, 841, 849, 853, 856, 857, 860, 872, 880, 886, 889, 891, 892, 896, 920, 924, 930, 934, 936, 952, 955, 956, 962, 963, 964, 966, 967, 969, 970, 972, 973, 976, 980, 981, 984, 992, 996, 997, 999, 1000, 1001, 1005, 1006, 1009, 1010, 1011, 1016, 1018, 1019, 1020, 1022, 1023], "66": [4, 42, 92, 222, 305, 368, 396, 517, 617, 697, 767, 768, 777, 862, 966, 978], "880": 4, "60": [4, 6, 16, 59, 73, 82, 98, 197, 209, 215, 218, 219, 239, 245, 265, 270, 296, 318, 332, 342, 365, 396, 400, 435, 442, 698, 781, 966, 976, 997, 1008, 1011], "11": [4, 9, 11, 15, 19, 74, 81, 97, 139, 146, 152, 167, 168, 181, 197, 198, 199, 202, 254, 255, 262, 263, 269, 273, 281, 283, 303, 311, 314, 328, 332, 344, 365, 368, 369, 377, 383, 396, 399, 400, 403, 435, 442, 467, 468, 469, 470, 486, 502, 503, 597, 635, 641, 655, 700, 706, 707, 708, 762, 763, 764, 782, 785, 799, 802, 808, 835, 892, 930, 962, 964, 976, 980, 981, 984, 992, 999, 1001, 1006, 1010, 1014, 1016, 1017, 1019, 1022, 1023], "0014": 4, "17375": 4, "20": [4, 7, 8, 14, 16, 19, 25, 26, 27, 33, 34, 39, 40, 43, 46, 47, 50, 54, 55, 61, 67, 78, 82, 92, 95, 101, 103, 105, 110, 112, 118, 119, 122, 125, 129, 130, 132, 138, 141, 142, 143, 155, 166, 168, 169, 173, 174, 179, 186, 187, 189, 193, 194, 196, 197, 198, 201, 206, 209, 210, 211, 212, 214, 221, 222, 224, 230, 235, 244, 246, 247, 257, 258, 260, 261, 263, 268, 269, 271, 277, 281, 282, 283, 284, 285, 288, 296, 303, 304, 305, 310, 311, 312, 313, 317, 318, 321, 326, 328, 332, 334, 339, 343, 344, 349, 350, 364, 368, 371, 373, 375, 376, 377, 387, 396, 403, 404, 426, 431, 432, 434, 449, 450, 454, 456, 457, 463, 473, 474, 475, 476, 477, 479, 481, 482, 485, 487, 489, 490, 497, 500, 501, 508, 516, 521, 522, 527, 530, 531, 533, 537, 540, 541, 544, 545, 546, 547, 548, 554, 555, 567, 574, 577, 579, 582, 584, 614, 615, 630, 634, 643, 651, 652, 653, 661, 663, 681, 689, 693, 698, 701, 709, 710, 723, 740, 741, 751, 774, 775, 779, 780, 781, 795, 805, 806, 807, 810, 812, 815, 816, 817, 820, 821, 828, 829, 840, 841, 842, 843, 845, 847, 848, 856, 857, 858, 859, 864, 878, 879, 881, 882, 887, 895, 901, 903, 904, 955, 962, 966, 969, 972, 973, 976, 979, 984, 989, 990, 993, 999, 1003, 1004, 1006, 1008, 1014, 1017, 1020, 1022, 1023], "17376": 4, "21": [4, 159, 167, 186, 198, 215, 220, 247, 277, 296, 301, 303, 321, 343, 368, 369, 373, 375, 387, 393, 403, 404, 426, 430, 459, 517, 546, 547, 548, 554, 555, 573, 574, 576, 612, 654, 672, 738, 781, 783, 795, 806, 849, 856, 858, 864, 881, 897, 962, 967, 976, 984, 1004, 1006, 1008, 1009, 1011, 1015, 1016, 1018], "17377": 4, "22": [4, 42, 164, 167, 168, 171, 214, 247, 296, 299, 303, 308, 315, 318, 344, 371, 375, 376, 387, 393, 422, 433, 457, 473, 474, 480, 481, 489, 500, 509, 516, 522, 527, 530, 531, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 579, 612, 613, 617, 619, 630, 632, 636, 638, 640, 643, 644, 646, 648, 650, 654, 673, 677, 687, 689, 698, 741, 753, 762, 767, 768, 772, 781, 782, 786, 795, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 827, 829, 831, 833, 834, 835, 840, 841, 842, 844, 847, 863, 883, 885, 886, 887, 888, 889, 891, 892, 893, 894, 914, 915, 966, 976, 984, 1004, 1006, 1008, 1011, 1016, 1019, 1021], "56": [4, 133, 215, 230, 377, 698, 719, 966, 976, 1004, 1008], "8": [4, 5, 6, 7, 8, 9, 12, 13, 19, 25, 26, 27, 31, 32, 34, 37, 43, 44, 45, 48, 50, 53, 55, 60, 62, 64, 65, 70, 72, 74, 75, 81, 85, 90, 91, 92, 95, 96, 99, 100, 104, 106, 113, 115, 119, 121, 122, 124, 127, 130, 131, 135, 145, 146, 150, 152, 154, 155, 157, 158, 162, 166, 167, 168, 170, 173, 176, 177, 182, 183, 188, 191, 197, 198, 204, 205, 207, 213, 215, 218, 219, 220, 222, 223, 227, 230, 231, 232, 233, 235, 237, 238, 239, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 264, 267, 268, 275, 279, 281, 285, 289, 293, 295, 296, 299, 301, 302, 303, 304, 305, 309, 314, 317, 318, 319, 321, 322, 326, 329, 333, 334, 336, 338, 342, 343, 344, 350, 353, 358, 365, 366, 368, 369, 371, 376, 377, 387, 388, 389, 394, 396, 400, 401, 403, 404, 405, 406, 424, 428, 429, 432, 434, 435, 437, 447, 454, 455, 456, 457, 458, 459, 460, 461, 468, 469, 470, 472, 475, 487, 488, 499, 516, 519, 523, 525, 528, 530, 532, 534, 535, 540, 541, 550, 555, 567, 573, 574, 575, 576, 613, 614, 633, 643, 655, 661, 674, 677, 678, 679, 680, 687, 691, 692, 694, 700, 706, 711, 712, 713, 725, 729, 730, 734, 735, 737, 766, 767, 769, 772, 773, 777, 779, 782, 783, 788, 791, 798, 799, 802, 809, 812, 821, 823, 824, 830, 840, 841, 842, 848, 855, 864, 885, 888, 918, 920, 924, 955, 956, 962, 963, 964, 966, 969, 974, 976, 980, 984, 990, 992, 996, 997, 998, 999, 1000, 1004, 1005, 1006, 1009, 1010, 1011, 1015, 1016, 1021, 1022, 1024], "9981": 4, "17378": 4, "23": [4, 15, 19, 26, 34, 50, 92, 98, 164, 239, 247, 296, 303, 308, 311, 312, 315, 318, 368, 369, 371, 377, 387, 388, 389, 403, 409, 417, 425, 432, 437, 439, 447, 450, 452, 453, 460, 467, 468, 469, 475, 477, 485, 486, 487, 489, 490, 495, 497, 499, 507, 509, 523, 524, 525, 528, 532, 539, 541, 543, 545, 546, 547, 550, 553, 554, 555, 592, 593, 596, 612, 615, 617, 620, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 654, 655, 657, 658, 660, 663, 664, 665, 702, 714, 762, 809, 815, 816, 817, 826, 834, 841, 844, 856, 863, 871, 872, 881, 884, 886, 889, 892, 894, 901, 903, 904, 914, 915, 920, 966, 984, 1004, 1006, 1008, 1009, 1015, 1016, 1017, 1020], "65": [4, 33, 168, 197, 266, 305, 396, 424, 487, 582, 725, 774, 775, 973, 997, 1008, 1009, 1010], "17379": [4, 1020], "row": [4, 19, 20, 21, 25, 27, 44, 60, 75, 90, 92, 118, 127, 130, 161, 197, 198, 199, 227, 230, 235, 236, 301, 351, 357, 366, 373, 380, 383, 384, 393, 396, 399, 404, 411, 427, 428, 432, 434, 435, 436, 438, 441, 442, 444, 449, 453, 473, 475, 476, 477, 478, 479, 480, 485, 486, 487, 489, 490, 495, 496, 498, 519, 527, 533, 536, 575, 576, 605, 617, 628, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 677, 681, 682, 695, 703, 704, 709, 742, 743, 747, 750, 752, 753, 754, 755, 757, 758, 760, 762, 763, 764, 765, 779, 780, 812, 818, 819, 820, 821, 822, 828, 831, 832, 833, 834, 835, 838, 849, 853, 855, 858, 870, 873, 874, 877, 881, 899, 903, 904, 920, 937, 940, 944, 946, 948, 949, 953, 955, 956, 960, 962, 964, 966, 967, 969, 976, 977, 980, 981, 987, 1015, 1016, 1017, 1018, 1023], "onli": [4, 7, 11, 13, 14, 24, 25, 26, 27, 30, 33, 37, 39, 40, 45, 49, 53, 55, 58, 66, 70, 71, 72, 74, 75, 81, 90, 98, 99, 106, 110, 112, 116, 117, 118, 119, 121, 128, 129, 141, 142, 143, 146, 149, 151, 154, 156, 158, 162, 164, 166, 167, 168, 173, 175, 180, 181, 186, 193, 197, 198, 200, 203, 205, 206, 215, 216, 218, 219, 226, 228, 230, 232, 236, 239, 242, 243, 244, 247, 248, 253, 255, 257, 259, 260, 263, 264, 265, 266, 268, 269, 277, 280, 283, 285, 288, 290, 295, 299, 300, 304, 305, 311, 312, 317, 318, 320, 325, 326, 329, 334, 337, 338, 342, 343, 344, 347, 348, 351, 353, 357, 358, 359, 364, 365, 366, 368, 369, 371, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 387, 390, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 474, 475, 476, 477, 479, 481, 482, 485, 486, 487, 488, 489, 490, 493, 494, 495, 497, 501, 504, 508, 509, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 692, 694, 698, 710, 713, 714, 718, 720, 721, 722, 725, 726, 727, 740, 742, 744, 758, 762, 763, 764, 765, 767, 768, 771, 772, 774, 775, 776, 779, 780, 781, 783, 784, 785, 787, 795, 799, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 899, 901, 903, 904, 907, 909, 912, 920, 922, 925, 927, 932, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 980, 981, 982, 986, 987, 990, 999, 1000, 1001, 1005, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024], "present": [4, 5, 43, 49, 92, 95, 103, 115, 122, 125, 145, 155, 158, 176, 179, 181, 186, 197, 226, 229, 247, 255, 260, 263, 266, 267, 277, 299, 302, 304, 343, 368, 369, 373, 376, 382, 384, 396, 398, 401, 403, 404, 414, 415, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 474, 475, 476, 477, 481, 485, 486, 487, 488, 489, 490, 495, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 534, 535, 548, 551, 554, 555, 566, 567, 568, 573, 574, 576, 602, 612, 613, 614, 615, 635, 639, 662, 673, 674, 675, 676, 697, 713, 714, 722, 726, 753, 767, 768, 771, 779, 780, 781, 784, 785, 793, 795, 807, 825, 826, 827, 829, 831, 833, 834, 835, 842, 847, 855, 856, 857, 858, 859, 861, 875, 876, 887, 895, 897, 898, 920, 950, 965, 966, 967, 968, 973, 976, 985, 987, 1011, 1016, 1018, 1019, 1020, 1022, 1023], "date": [4, 70, 154, 168, 366, 368, 371, 375, 385, 397, 987], "datetim": [4, 17, 154, 168], "http": [4, 6, 7, 8, 12, 17, 24, 50, 71, 123, 129, 146, 158, 162, 173, 197, 205, 213, 215, 223, 227, 235, 275, 277, 295, 365, 366, 368, 369, 371, 375, 376, 377, 379, 382, 384, 385, 387, 396, 400, 405, 427, 434, 437, 447, 472, 477, 481, 485, 487, 493, 494, 495, 515, 516, 519, 521, 522, 526, 580, 621, 626, 629, 634, 643, 649, 651, 652, 653, 656, 661, 664, 667, 668, 670, 671, 676, 677, 680, 690, 706, 707, 708, 742, 743, 753, 818, 820, 821, 822, 825, 826, 831, 832, 833, 834, 839, 861, 876, 877, 878, 891, 892, 962, 964, 966, 969, 979, 982, 989, 990, 997, 1013, 1018], "pydata": [4, 985, 990], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 61, 66, 71, 72, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 158, 167, 168, 169, 173, 178, 188, 189, 197, 205, 213, 215, 219, 227, 228, 229, 231, 236, 237, 238, 239, 247, 255, 257, 258, 260, 264, 269, 275, 295, 296, 305, 310, 311, 313, 314, 317, 318, 319, 322, 342, 343, 344, 351, 358, 364, 369, 371, 374, 377, 379, 385, 387, 400, 580, 621, 653, 656, 661, 680, 690, 753, 825, 826, 831, 832, 833, 834, 861, 877, 891, 892, 962, 966, 982, 984, 1003, 1016, 1020], "stabl": [4, 158, 167, 191, 195, 199, 277, 310, 343, 369, 371, 375, 377, 380, 384, 387, 400, 404, 408, 456, 457, 463, 518, 640, 657, 659, 672, 677, 708, 736, 919, 920, 962, 968, 969, 976, 987, 1004, 1008, 1009, 1014, 1019, 1021], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 71, 72, 109, 115, 116, 117, 125, 126, 129, 132, 143, 146, 154, 158, 167, 168, 169, 173, 178, 227, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 305, 310, 311, 313, 314, 319, 351, 366, 368, 371, 372, 375, 379, 385, 397, 400, 404, 472, 493, 494, 643, 818, 822, 916, 964, 986, 987, 1019, 1020, 1021, 1022, 1023], "compon": [4, 5, 17, 44, 58, 62, 70, 73, 84, 85, 87, 94, 96, 97, 99, 100, 102, 103, 104, 106, 107, 127, 154, 164, 166, 181, 218, 230, 231, 233, 242, 243, 246, 247, 248, 256, 258, 278, 291, 296, 304, 311, 357, 363, 366, 371, 373, 377, 380, 382, 395, 396, 397, 399, 404, 406, 408, 410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 447, 448, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 487, 489, 500, 506, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 558, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 680, 713, 714, 722, 767, 768, 771, 779, 780, 781, 784, 785, 795, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 919, 920, 958, 963, 976, 978, 981, 986, 987, 988, 990, 995, 1001, 1002, 1003, 1008, 1010, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "now": [4, 5, 7, 17, 53, 57, 71, 86, 100, 109, 111, 115, 116, 118, 119, 122, 123, 129, 132, 146, 149, 154, 155, 156, 162, 166, 167, 168, 169, 173, 176, 178, 183, 185, 186, 198, 199, 222, 231, 253, 257, 260, 268, 269, 304, 310, 311, 313, 314, 319, 329, 337, 342, 343, 344, 353, 357, 359, 366, 371, 372, 373, 377, 382, 383, 384, 393, 396, 400, 401, 403, 404, 408, 478, 493, 494, 497, 521, 534, 564, 565, 567, 612, 615, 634, 638, 643, 648, 669, 710, 740, 779, 780, 784, 785, 815, 830, 941, 955, 956, 962, 966, 972, 975, 976, 981, 982, 985, 987, 992, 999, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "introspect": [4, 6, 71, 377, 544, 545, 573, 574, 576, 976, 997], "value_count": [4, 168], "11413": 4, "4544": 4, "rain": [4, 168, 962], "1419": 4, "heavy_rain": [4, 168], "name": [4, 6, 7, 10, 11, 12, 17, 19, 25, 27, 30, 31, 34, 37, 44, 45, 58, 62, 71, 73, 75, 82, 96, 102, 113, 114, 115, 119, 120, 122, 129, 167, 168, 169, 186, 195, 197, 199, 203, 204, 212, 214, 215, 218, 219, 226, 232, 234, 235, 239, 244, 252, 254, 255, 258, 260, 261, 264, 266, 267, 277, 285, 286, 293, 294, 301, 303, 305, 313, 314, 321, 334, 342, 343, 344, 358, 359, 365, 366, 369, 371, 373, 375, 376, 378, 379, 384, 387, 390, 393, 396, 397, 400, 403, 404, 406, 410, 412, 416, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 473, 474, 475, 476, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 495, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 561, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 676, 677, 682, 683, 684, 685, 687, 693, 694, 698, 716, 717, 763, 764, 779, 780, 781, 784, 785, 787, 793, 795, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 902, 903, 904, 907, 911, 912, 913, 915, 929, 936, 950, 954, 955, 960, 962, 966, 967, 973, 974, 976, 982, 987, 996, 997, 999, 1001, 1008, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 65, 70, 71, 121, 123, 124, 125, 150, 151, 152, 162, 167, 168, 199, 215, 235, 239, 242, 255, 261, 265, 284, 290, 305, 312, 313, 318, 351, 365, 366, 371, 373, 382, 384, 392, 397, 400, 411, 414, 427, 428, 432, 433, 434, 435, 436, 438, 449, 451, 452, 454, 457, 459, 473, 474, 475, 476, 481, 482, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 499, 507, 527, 542, 543, 544, 545, 548, 549, 550, 551, 566, 567, 570, 571, 573, 574, 576, 578, 579, 587, 591, 612, 613, 614, 615, 617, 618, 625, 626, 629, 630, 631, 637, 641, 642, 645, 646, 647, 648, 649, 650, 656, 658, 660, 682, 690, 699, 700, 715, 722, 725, 739, 770, 787, 804, 806, 807, 819, 823, 824, 826, 834, 848, 854, 856, 857, 863, 864, 877, 885, 886, 887, 888, 889, 891, 892, 893, 894, 900, 901, 903, 904, 931, 941, 942, 943, 944, 947, 953, 956, 976, 979, 981, 992, 1009, 1011, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "int64": [4, 13, 54, 71, 167, 168, 305, 351, 384, 404, 414, 427, 433, 435, 573, 625, 699, 700, 819, 1016, 1019, 1021, 1023, 1024], "cannot": [4, 40, 56, 75, 82, 95, 100, 117, 167, 168, 181, 197, 215, 299, 329, 359, 370, 372, 377, 384, 385, 396, 397, 398, 400, 401, 403, 404, 406, 450, 506, 523, 524, 525, 528, 532, 595, 598, 599, 600, 602, 604, 605, 607, 608, 610, 636, 640, 667, 677, 696, 702, 762, 784, 785, 830, 831, 833, 834, 835, 843, 844, 853, 854, 865, 901, 903, 904, 955, 956, 960, 962, 963, 967, 972, 976, 981, 982, 987, 990, 996, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 56, 58, 64, 70, 71, 75, 85, 86, 90, 95, 98, 100, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 126, 129, 130, 131, 135, 143, 149, 150, 151, 154, 155, 156, 157, 158, 164, 166, 167, 168, 169, 170, 173, 180, 181, 183, 185, 186, 188, 189, 190, 192, 193, 197, 198, 199, 201, 204, 205, 206, 209, 211, 212, 215, 226, 229, 231, 234, 235, 244, 246, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 277, 280, 283, 284, 285, 286, 288, 290, 293, 294, 295, 299, 301, 303, 304, 309, 312, 316, 317, 318, 321, 322, 323, 325, 328, 336, 337, 344, 346, 349, 350, 352, 353, 357, 358, 359, 363, 368, 373, 376, 382, 383, 384, 390, 392, 394, 396, 397, 398, 399, 401, 403, 404, 405, 406, 408, 422, 425, 426, 428, 429, 432, 434, 436, 437, 438, 439, 444, 450, 454, 455, 457, 458, 459, 460, 461, 467, 468, 469, 470, 472, 473, 474, 478, 482, 483, 485, 489, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 612, 613, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 672, 673, 674, 676, 677, 681, 688, 725, 772, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 843, 848, 849, 852, 853, 856, 857, 861, 862, 863, 864, 868, 869, 871, 872, 873, 874, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 940, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 976, 980, 981, 982, 986, 987, 988, 990, 993, 996, 997, 1003, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 25, 26, 27, 31, 32, 34, 36, 37, 49, 56, 67, 68, 70, 75, 81, 82, 94, 100, 105, 107, 109, 113, 114, 115, 117, 118, 124, 126, 127, 128, 129, 135, 136, 137, 138, 143, 146, 149, 152, 154, 158, 161, 162, 165, 169, 171, 172, 174, 183, 185, 186, 211, 215, 222, 224, 225, 226, 231, 233, 238, 250, 254, 256, 257, 260, 262, 263, 265, 271, 273, 277, 281, 282, 283, 284, 285, 290, 292, 295, 296, 297, 299, 300, 304, 306, 308, 315, 316, 320, 322, 323, 328, 335, 337, 342, 343, 344, 347, 348, 349, 350, 353, 358, 360, 363, 364, 365, 366, 368, 370, 374, 377, 378, 379, 380, 383, 384, 386, 390, 391, 392, 393, 394, 396, 397, 398, 400, 402, 404, 405, 406, 410, 411, 413, 414, 415, 417, 418, 422, 423, 424, 427, 428, 431, 432, 434, 435, 442, 444, 449, 450, 452, 453, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 493, 494, 495, 497, 499, 500, 501, 502, 503, 505, 507, 509, 510, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 556, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 584, 587, 588, 595, 596, 599, 604, 607, 611, 613, 615, 617, 619, 623, 625, 626, 628, 629, 630, 631, 633, 637, 642, 643, 653, 654, 661, 662, 663, 665, 673, 674, 675, 676, 677, 681, 685, 686, 687, 693, 698, 702, 703, 706, 707, 708, 710, 719, 725, 727, 732, 740, 762, 763, 764, 769, 772, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 825, 827, 832, 839, 840, 841, 842, 844, 846, 848, 850, 853, 855, 856, 857, 858, 861, 862, 863, 867, 875, 876, 878, 879, 880, 881, 883, 884, 885, 888, 891, 892, 893, 894, 906, 914, 915, 932, 933, 955, 956, 958, 959, 960, 962, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 980, 981, 982, 983, 985, 989, 994, 996, 997, 1003, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "simplifi": [4, 71, 185, 329, 370, 372, 376, 396, 399, 500, 547, 842, 843, 966, 968, 976], "represent": [4, 12, 17, 20, 26, 53, 71, 72, 95, 98, 109, 115, 116, 117, 125, 126, 127, 129, 132, 143, 154, 167, 169, 173, 178, 181, 218, 219, 220, 227, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 287, 296, 305, 311, 313, 314, 319, 343, 344, 351, 353, 363, 365, 373, 384, 390, 396, 397, 401, 402, 403, 448, 516, 520, 522, 525, 527, 533, 551, 573, 575, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 615, 628, 631, 637, 643, 644, 645, 647, 651, 653, 661, 662, 663, 753, 779, 780, 787, 839, 852, 856, 857, 861, 863, 876, 883, 895, 897, 900, 916, 932, 958, 963, 965, 967, 969, 970, 971, 973, 976, 981, 987, 992, 993, 995, 999, 1001, 1008, 1009, 1012, 1019, 1020, 1021, 1022, 1023, 1024], "collaps": [4, 168, 299, 329, 382], "those": [4, 7, 12, 17, 19, 55, 60, 71, 111, 122, 146, 158, 166, 168, 169, 170, 197, 199, 215, 223, 230, 234, 235, 248, 251, 257, 260, 263, 294, 299, 304, 326, 329, 342, 343, 344, 357, 358, 365, 371, 373, 375, 376, 377, 378, 382, 384, 385, 387, 393, 394, 396, 400, 401, 403, 404, 406, 433, 435, 446, 449, 453, 479, 480, 481, 488, 542, 543, 549, 550, 554, 555, 566, 677, 682, 697, 703, 720, 781, 784, 785, 793, 795, 802, 825, 826, 827, 829, 831, 832, 833, 834, 835, 885, 888, 891, 892, 893, 894, 955, 958, 962, 965, 966, 968, 969, 970, 973, 976, 982, 985, 986, 990, 992, 1001, 1008, 1011, 1014, 1015, 1016, 1021, 1022, 1023, 1024], "replac": [4, 25, 80, 99, 149, 156, 161, 168, 183, 198, 235, 260, 277, 301, 306, 311, 331, 369, 371, 373, 375, 377, 380, 384, 390, 397, 400, 403, 404, 426, 430, 488, 500, 540, 541, 548, 567, 573, 574, 575, 576, 592, 593, 612, 615, 619, 624, 626, 712, 769, 793, 795, 842, 843, 846, 866, 879, 886, 935, 937, 940, 955, 956, 962, 966, 976, 981, 982, 986, 987, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1023], "to_replac": [4, 168], "valu": [4, 5, 7, 9, 11, 12, 13, 16, 17, 19, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 55, 60, 61, 62, 66, 71, 73, 75, 78, 80, 82, 95, 98, 106, 112, 114, 115, 116, 117, 119, 122, 123, 125, 126, 128, 129, 141, 142, 145, 146, 149, 152, 153, 155, 157, 158, 163, 166, 167, 168, 169, 170, 173, 176, 177, 179, 181, 183, 185, 186, 187, 188, 190, 195, 197, 198, 199, 201, 203, 212, 215, 217, 221, 224, 226, 227, 228, 229, 230, 231, 232, 235, 238, 239, 242, 248, 251, 253, 255, 257, 258, 260, 262, 263, 264, 266, 268, 269, 270, 272, 277, 290, 293, 294, 296, 299, 300, 301, 302, 303, 304, 305, 306, 311, 320, 329, 334, 337, 342, 343, 344, 347, 351, 353, 357, 358, 359, 360, 363, 364, 365, 366, 368, 372, 373, 374, 376, 377, 378, 380, 382, 383, 384, 386, 387, 393, 394, 395, 396, 397, 398, 399, 400, 404, 405, 406, 407, 408, 409, 410, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 472, 475, 476, 478, 481, 482, 483, 486, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 682, 683, 684, 685, 686, 687, 689, 690, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 753, 755, 758, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 793, 795, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 904, 907, 908, 909, 910, 912, 920, 922, 927, 928, 929, 930, 934, 942, 943, 944, 955, 958, 959, 960, 961, 962, 963, 965, 967, 968, 969, 970, 971, 972, 973, 977, 979, 980, 981, 988, 990, 992, 997, 999, 1000, 1001, 1002, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "inplac": [4, 168, 215, 269, 439, 467, 468, 469, 470, 838, 846, 849, 852, 853, 855, 859, 860, 861, 863, 866, 868, 869, 870, 871, 872, 873, 874, 939, 942, 943, 944, 948, 949, 1017], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 53, 86, 92, 100, 113, 115, 116, 119, 122, 143, 149, 155, 164, 165, 169, 171, 183, 188, 197, 198, 199, 205, 215, 230, 236, 243, 244, 247, 248, 264, 277, 304, 342, 343, 353, 357, 358, 371, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 392, 394, 396, 397, 398, 400, 403, 404, 405, 417, 449, 450, 452, 453, 454, 467, 468, 469, 481, 508, 517, 521, 523, 526, 537, 539, 540, 541, 543, 545, 547, 548, 550, 552, 553, 555, 557, 570, 571, 573, 574, 576, 580, 582, 591, 596, 612, 617, 618, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 659, 660, 663, 664, 680, 689, 690, 701, 719, 772, 776, 816, 817, 818, 819, 820, 821, 822, 826, 829, 834, 841, 844, 849, 856, 857, 860, 863, 864, 873, 874, 881, 883, 884, 885, 886, 887, 888, 889, 892, 894, 929, 955, 962, 966, 968, 972, 976, 980, 981, 982, 989, 997, 1000, 1001, 1003, 1008, 1009, 1010, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "balanc": [4, 6, 53, 66, 164, 202, 250, 260, 273, 299, 359, 382, 384, 394, 400, 401, 403, 487, 500, 519, 525, 526, 532, 542, 546, 549, 625, 643, 644, 651, 653, 659, 660, 661, 688, 693, 713, 727, 766, 771, 781, 782, 799, 843, 883, 885, 888, 891, 893, 908, 909, 955, 981, 982, 997, 1008, 1010, 1013, 1014, 1017, 1018, 1022], "fall": [4, 122, 156, 256, 257, 371, 373, 395, 396, 404, 419, 431, 432, 493, 494, 711, 712, 776, 860, 872, 965, 966, 976, 992, 1000, 1017], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 24, 47, 55, 64, 65, 72, 78, 89, 105, 117, 118, 119, 123, 138, 154, 166, 167, 170, 173, 186, 190, 193, 197, 198, 203, 211, 215, 220, 230, 239, 244, 252, 255, 257, 264, 275, 296, 299, 304, 305, 306, 311, 312, 337, 342, 344, 353, 357, 358, 366, 371, 373, 376, 377, 380, 384, 387, 390, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 425, 428, 431, 432, 434, 435, 440, 441, 442, 444, 449, 473, 474, 475, 480, 482, 500, 519, 520, 524, 525, 526, 528, 532, 536, 538, 540, 541, 542, 544, 548, 549, 552, 566, 573, 576, 578, 579, 582, 591, 592, 593, 595, 607, 612, 616, 625, 643, 644, 650, 661, 670, 671, 673, 674, 678, 682, 684, 685, 687, 689, 697, 698, 703, 710, 713, 714, 722, 724, 725, 738, 740, 762, 766, 767, 768, 771, 772, 773, 776, 781, 782, 784, 785, 786, 788, 792, 795, 799, 800, 804, 811, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 833, 840, 843, 854, 856, 857, 858, 862, 863, 864, 867, 868, 869, 871, 872, 873, 874, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 903, 904, 909, 920, 930, 935, 956, 962, 963, 966, 967, 969, 970, 976, 979, 980, 981, 982, 987, 996, 998, 999, 1001, 1008, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "sensit": [4, 44, 55, 80, 81, 113, 122, 168, 199, 200, 226, 299, 329, 358, 359, 385, 398, 403, 437, 447, 677, 697, 698, 772, 961, 962, 963, 965, 966, 970, 972, 980, 981, 992, 1000, 1012], "splitter": [4, 384, 400, 422, 457, 552, 553, 579, 587, 632, 636, 638, 640, 646, 648, 650, 658, 660, 781, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 803, 804, 805, 806, 807, 808, 810, 814, 817, 891, 892, 893, 894, 982, 987, 1014, 1015, 1016, 1017, 1024], "evalu": [4, 5, 6, 10, 11, 24, 32, 36, 49, 55, 68, 71, 72, 98, 109, 116, 117, 119, 120, 122, 142, 152, 164, 170, 173, 177, 186, 199, 204, 215, 225, 240, 250, 251, 254, 255, 257, 260, 262, 263, 264, 266, 268, 269, 271, 273, 275, 286, 290, 304, 306, 311, 329, 342, 353, 360, 364, 366, 373, 377, 384, 386, 395, 397, 404, 405, 406, 432, 434, 473, 476, 477, 478, 481, 494, 505, 521, 536, 546, 547, 548, 552, 553, 576, 579, 587, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 616, 617, 618, 619, 632, 638, 644, 658, 660, 682, 684, 686, 687, 688, 689, 690, 696, 698, 699, 700, 702, 703, 710, 711, 720, 721, 726, 738, 739, 740, 741, 770, 777, 779, 780, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 814, 820, 823, 824, 829, 841, 843, 850, 868, 869, 871, 872, 873, 874, 885, 888, 891, 906, 914, 940, 958, 962, 964, 968, 969, 972, 973, 974, 977, 980, 982, 986, 990, 992, 993, 996, 997, 999, 1002, 1003, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "forecast": [4, 257, 394, 966, 986], "realist": [4, 8, 259, 266, 267, 326, 966], "gap": [4, 342, 366, 400, 456, 457, 463, 573, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 802, 891, 892, 893, 894, 962, 963, 1016, 1020, 1022], "between": [4, 5, 8, 9, 11, 12, 37, 38, 39, 40, 42, 43, 53, 60, 61, 66, 85, 98, 100, 104, 109, 113, 119, 122, 141, 149, 154, 155, 157, 164, 166, 167, 168, 169, 176, 181, 183, 188, 192, 193, 197, 198, 199, 201, 202, 205, 215, 218, 226, 231, 235, 250, 253, 256, 257, 258, 259, 260, 262, 263, 264, 266, 273, 279, 283, 284, 286, 287, 299, 304, 306, 312, 320, 329, 337, 342, 343, 344, 351, 353, 357, 358, 366, 371, 373, 380, 382, 383, 384, 385, 390, 393, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 416, 425, 426, 429, 430, 431, 435, 437, 438, 439, 441, 442, 443, 448, 454, 455, 456, 457, 458, 459, 460, 461, 476, 478, 479, 480, 481, 482, 483, 487, 499, 500, 506, 509, 512, 519, 521, 522, 523, 524, 525, 526, 531, 532, 534, 538, 539, 544, 545, 547, 548, 569, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 587, 589, 590, 591, 592, 593, 594, 605, 612, 617, 618, 619, 624, 627, 630, 631, 632, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 655, 661, 663, 664, 666, 669, 673, 675, 677, 679, 680, 681, 684, 686, 688, 689, 690, 692, 694, 695, 699, 700, 701, 702, 704, 708, 709, 710, 713, 714, 715, 718, 720, 721, 727, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 774, 775, 777, 778, 779, 780, 781, 783, 784, 790, 798, 799, 801, 808, 809, 811, 813, 825, 826, 827, 829, 830, 831, 833, 834, 835, 836, 837, 840, 841, 847, 850, 851, 853, 854, 856, 857, 860, 861, 862, 864, 869, 872, 873, 877, 888, 891, 892, 893, 894, 896, 917, 935, 955, 958, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 980, 981, 982, 983, 987, 999, 1000, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "side": [4, 16, 27, 59, 122, 190, 215, 220, 229, 299, 342, 353, 366, 382, 394, 397, 400, 401, 404, 500, 962, 963, 966, 968, 981, 1017], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 70, 100, 109, 115, 116, 118, 121, 122, 123, 124, 125, 135, 142, 166, 167, 181, 192, 193, 197, 200, 205, 215, 227, 243, 244, 251, 252, 255, 257, 262, 264, 267, 286, 293, 295, 300, 301, 306, 313, 320, 329, 342, 344, 351, 366, 378, 383, 384, 387, 394, 396, 401, 403, 404, 422, 427, 428, 457, 458, 464, 465, 482, 516, 522, 524, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 573, 574, 576, 579, 587, 632, 636, 638, 640, 646, 648, 650, 658, 660, 680, 689, 690, 702, 715, 721, 741, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 817, 823, 824, 840, 841, 864, 868, 869, 871, 872, 873, 874, 891, 892, 893, 894, 937, 955, 962, 963, 969, 972, 973, 974, 976, 980, 982, 987, 992, 996, 997, 999, 1000, 1001, 1003, 1008, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "limit": [4, 8, 17, 37, 42, 57, 66, 82, 116, 117, 123, 129, 161, 167, 168, 169, 176, 197, 198, 214, 230, 264, 301, 305, 312, 344, 353, 358, 372, 373, 376, 382, 384, 385, 394, 396, 399, 401, 405, 431, 448, 453, 544, 545, 546, 547, 617, 635, 643, 644, 664, 667, 668, 673, 762, 802, 831, 833, 834, 835, 856, 857, 881, 885, 886, 887, 888, 889, 934, 955, 962, 963, 965, 966, 973, 974, 976, 987, 992, 1003, 1016, 1018, 1021, 1022], "cv": [4, 12, 24, 25, 26, 54, 71, 72, 73, 74, 78, 103, 119, 121, 135, 136, 145, 161, 162, 167, 186, 196, 199, 253, 255, 256, 257, 258, 259, 260, 262, 263, 267, 271, 305, 306, 314, 329, 337, 383, 384, 394, 400, 403, 422, 457, 552, 553, 579, 587, 632, 636, 638, 640, 644, 646, 648, 650, 658, 660, 781, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 803, 804, 805, 806, 807, 808, 810, 814, 817, 864, 891, 892, 955, 958, 961, 962, 966, 976, 987, 996, 997, 1001, 1010, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1024], "fold": [4, 67, 74, 78, 118, 121, 135, 145, 167, 186, 244, 252, 253, 255, 257, 258, 260, 267, 320, 337, 353, 366, 374, 375, 383, 384, 396, 405, 422, 457, 478, 521, 552, 553, 579, 587, 632, 636, 638, 640, 644, 646, 648, 650, 658, 660, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 814, 817, 864, 885, 888, 955, 962, 966, 976, 981, 996, 1008, 1010, 1012, 1013, 1014, 1016, 1017, 1019, 1020], "1000": [4, 7, 8, 14, 26, 31, 37, 50, 72, 75, 85, 105, 113, 115, 116, 121, 122, 126, 131, 137, 141, 155, 173, 183, 189, 200, 220, 229, 230, 232, 242, 246, 255, 257, 263, 266, 268, 282, 284, 300, 303, 310, 311, 313, 330, 331, 338, 342, 343, 376, 377, 383, 394, 404, 422, 458, 464, 465, 516, 517, 522, 527, 528, 530, 531, 533, 538, 549, 617, 631, 632, 636, 637, 638, 640, 645, 646, 647, 648, 651, 652, 653, 657, 661, 662, 663, 672, 677, 683, 686, 748, 860, 872, 878, 883, 884, 955, 959, 981, 996, 999, 1015, 1017], "datapoint": [4, 42, 52, 56, 153, 156, 180, 231, 232, 252, 257, 275, 335, 406, 431, 487, 542, 543, 544, 545, 549, 550, 551, 596, 891, 892, 893, 894, 959], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 53, 113, 119, 122, 146, 161, 167, 173, 176, 177, 181, 197, 199, 215, 226, 231, 232, 257, 260, 263, 264, 266, 277, 300, 301, 306, 319, 329, 337, 343, 353, 357, 358, 359, 366, 369, 370, 371, 373, 375, 376, 378, 379, 380, 383, 384, 387, 390, 394, 396, 398, 400, 401, 403, 404, 405, 406, 407, 408, 410, 425, 427, 428, 429, 430, 432, 434, 435, 437, 439, 442, 443, 444, 447, 448, 449, 452, 459, 467, 468, 469, 470, 472, 481, 488, 493, 494, 501, 506, 508, 509, 512, 517, 518, 521, 534, 542, 543, 546, 547, 548, 549, 550, 552, 566, 567, 570, 571, 573, 574, 576, 578, 579, 582, 587, 592, 593, 605, 612, 613, 614, 616, 617, 618, 620, 623, 624, 625, 628, 630, 631, 632, 633, 634, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 656, 657, 658, 660, 661, 662, 663, 664, 665, 669, 672, 674, 675, 676, 677, 678, 679, 680, 681, 686, 694, 711, 712, 750, 755, 758, 762, 763, 764, 765, 766, 769, 772, 773, 774, 783, 789, 791, 798, 799, 800, 801, 805, 809, 811, 812, 823, 824, 825, 826, 827, 828, 829, 831, 833, 840, 841, 846, 847, 850, 851, 852, 854, 855, 856, 857, 864, 866, 870, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 903, 907, 909, 912, 920, 927, 932, 935, 937, 940, 941, 942, 943, 944, 945, 946, 947, 955, 956, 960, 961, 962, 963, 966, 967, 969, 971, 972, 973, 976, 979, 980, 981, 982, 987, 989, 990, 997, 1001, 1005, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "enough": [4, 37, 44, 62, 118, 149, 161, 168, 169, 186, 197, 231, 233, 303, 342, 344, 353, 369, 371, 375, 385, 394, 395, 396, 398, 400, 403, 552, 553, 574, 781, 784, 785, 787, 795, 807, 920, 955, 960, 963, 965, 972, 976, 981, 986, 990, 1014, 1024], "quantifi": [4, 37, 49, 78, 154, 215, 264, 373, 384, 391, 395, 558, 846, 961, 974, 976, 1003], "repres": [4, 8, 10, 12, 14, 26, 32, 44, 48, 49, 50, 53, 91, 95, 97, 104, 105, 116, 117, 125, 167, 176, 184, 189, 199, 201, 202, 206, 220, 222, 231, 235, 245, 251, 254, 257, 260, 264, 282, 301, 342, 344, 351, 359, 363, 366, 368, 373, 382, 383, 384, 385, 390, 394, 396, 400, 401, 402, 403, 404, 405, 423, 427, 431, 437, 448, 455, 456, 457, 458, 459, 460, 461, 473, 475, 476, 477, 479, 481, 483, 485, 486, 487, 489, 490, 495, 519, 521, 523, 525, 526, 532, 540, 548, 566, 573, 576, 614, 617, 619, 625, 661, 663, 682, 686, 714, 727, 773, 781, 783, 794, 795, 798, 801, 806, 808, 809, 812, 813, 819, 825, 826, 827, 829, 830, 831, 833, 834, 835, 840, 841, 850, 856, 857, 880, 903, 904, 924, 956, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 976, 977, 979, 980, 982, 992, 997, 998, 1000, 1014, 1016, 1019, 1020, 1023], "bit": [4, 48, 53, 78, 98, 195, 199, 299, 329, 343, 353, 357, 366, 369, 403, 404, 567, 574, 643, 813, 903, 904, 963, 967, 985, 994, 1001, 1008, 1011, 1014, 1016, 1017, 1020, 1021, 1022], "less": [4, 5, 8, 52, 53, 60, 92, 95, 98, 106, 116, 122, 123, 149, 156, 167, 179, 181, 197, 199, 201, 232, 243, 245, 257, 258, 266, 268, 271, 300, 303, 304, 305, 311, 313, 342, 343, 353, 357, 359, 366, 371, 373, 382, 384, 396, 400, 401, 403, 404, 408, 424, 426, 428, 430, 433, 435, 437, 442, 445, 447, 448, 467, 468, 469, 481, 500, 516, 520, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 575, 581, 604, 612, 619, 632, 646, 661, 663, 677, 686, 706, 707, 708, 709, 720, 736, 748, 763, 764, 769, 777, 779, 780, 783, 784, 785, 791, 807, 818, 819, 820, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 846, 858, 860, 861, 863, 866, 872, 873, 883, 884, 891, 892, 893, 894, 909, 923, 955, 956, 958, 959, 960, 963, 965, 966, 969, 971, 976, 980, 981, 982, 986, 999, 1001, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1018, 1022, 1023], "half": [4, 24, 98, 231, 234, 255, 257, 269, 366, 367, 401, 448, 507, 547, 578, 582, 587, 754, 842, 850, 966, 969, 982], "contigu": [4, 21, 373, 382, 393, 400, 404, 428, 432, 434, 444, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 765, 800, 823, 824, 883, 885, 886, 887, 888, 889, 981, 1011, 1018, 1022], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 71, 72, 73, 74, 75, 78, 86, 100, 103, 109, 115, 116, 119, 120, 121, 122, 123, 124, 125, 128, 129, 135, 136, 142, 143, 145, 149, 161, 162, 164, 166, 167, 169, 170, 173, 181, 192, 197, 199, 204, 205, 212, 213, 215, 227, 232, 237, 238, 239, 244, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 279, 281, 285, 286, 293, 295, 296, 301, 303, 304, 305, 306, 309, 310, 311, 314, 320, 321, 329, 332, 337, 347, 351, 353, 360, 371, 373, 376, 383, 384, 397, 400, 403, 422, 423, 543, 545, 552, 553, 564, 644, 682, 683, 685, 687, 726, 811, 814, 832, 840, 841, 843, 891, 892, 893, 894, 955, 956, 961, 966, 968, 969, 974, 976, 981, 987, 996, 997, 1001, 1005, 1014, 1015], "timeseriessplit": [4, 181, 252, 400, 1014, 1015, 1020], "ts_cv": 4, "n_split": [4, 110, 121, 161, 162, 167, 244, 252, 257, 259, 262, 267, 320, 329, 337, 353, 400, 782, 783, 784, 785, 786, 788, 789, 790, 791, 794, 796, 797, 798, 799, 800, 801, 802, 806, 996, 1014, 1016], "5": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 70, 71, 73, 74, 75, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 135, 136, 138, 141, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 205, 208, 209, 210, 211, 212, 213, 215, 219, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 236, 237, 239, 242, 243, 244, 245, 246, 247, 248, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 275, 277, 279, 281, 282, 283, 284, 286, 287, 289, 290, 293, 294, 295, 296, 299, 301, 302, 303, 304, 306, 309, 310, 311, 312, 313, 314, 317, 318, 320, 321, 322, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 366, 368, 369, 371, 373, 376, 377, 382, 383, 384, 387, 388, 389, 394, 396, 397, 400, 401, 403, 404, 405, 406, 407, 408, 422, 423, 424, 425, 427, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 447, 449, 451, 454, 457, 463, 467, 468, 469, 470, 475, 478, 479, 489, 501, 502, 506, 508, 509, 511, 513, 516, 518, 519, 521, 522, 523, 524, 525, 528, 529, 530, 531, 532, 537, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 567, 577, 578, 579, 582, 587, 595, 598, 599, 600, 601, 604, 605, 607, 608, 610, 612, 613, 614, 615, 616, 617, 618, 619, 623, 626, 628, 629, 630, 631, 632, 636, 637, 638, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 657, 661, 662, 663, 665, 666, 669, 673, 674, 676, 677, 680, 681, 684, 688, 690, 692, 694, 697, 698, 706, 707, 708, 710, 711, 712, 714, 719, 722, 723, 725, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 753, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 840, 841, 842, 843, 848, 849, 850, 852, 853, 855, 856, 857, 858, 859, 860, 862, 863, 864, 871, 872, 877, 883, 884, 885, 886, 887, 888, 889, 891, 893, 909, 918, 919, 920, 922, 924, 925, 929, 930, 934, 937, 955, 956, 958, 961, 962, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 978, 980, 981, 984, 988, 992, 996, 997, 999, 1000, 1001, 1003, 1004, 1006, 1009, 1010, 1011, 1013, 1015, 1016, 1018, 1022, 1023, 1024], "48": [4, 45, 72, 76, 102, 154, 239, 305, 368, 377, 396, 495, 582, 730, 807, 818, 955, 968, 976, 1004], "max_train_s": [4, 400, 802, 1015], "10000": [4, 11, 30, 43, 63, 72, 73, 123, 135, 183, 190, 197, 205, 213, 230, 232, 270, 311, 326, 353, 359, 403, 404, 546, 547, 629, 664, 860, 889, 978, 997, 1001], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 71, 109, 115, 120, 121, 123, 124, 128, 166, 173, 181, 192, 197, 204, 205, 212, 213, 254, 255, 259, 264, 266, 270, 275, 285, 286, 293, 295, 296, 301, 303, 304, 311, 329, 337, 353, 376, 400, 683, 783, 798, 801, 802, 809, 811, 832, 956, 968, 969, 996, 997, 1008, 1009, 1014, 1015, 1020], "manual": [4, 46, 55, 167, 168, 170, 198, 208, 259, 277, 320, 327, 342, 344, 357, 358, 366, 371, 375, 376, 383, 387, 396, 400, 401, 402, 422, 434, 552, 833, 856, 862, 955, 960, 962, 965, 966, 969, 976, 987, 992, 993, 1001, 1016, 1018, 1024], "inspect": [4, 31, 56, 61, 112, 116, 123, 125, 126, 130, 143, 149, 154, 155, 167, 168, 169, 170, 180, 189, 206, 236, 257, 260, 269, 280, 285, 288, 304, 309, 310, 311, 312, 314, 325, 326, 327, 330, 331, 342, 348, 358, 360, 373, 384, 396, 397, 403, 404, 449, 538, 539, 542, 543, 544, 545, 549, 550, 551, 812, 843, 844, 891, 892, 893, 894, 954, 966, 967, 970, 973, 974, 981, 986, 1001, 1003, 1011], "variou": [4, 12, 36, 37, 55, 58, 60, 61, 68, 81, 85, 98, 164, 167, 175, 207, 216, 217, 218, 219, 224, 230, 303, 310, 342, 344, 351, 353, 357, 365, 366, 367, 368, 371, 373, 376, 383, 385, 394, 395, 396, 398, 422, 426, 457, 487, 499, 500, 510, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 579, 587, 632, 636, 638, 640, 643, 646, 648, 650, 651, 653, 658, 660, 661, 676, 677, 684, 781, 784, 785, 787, 795, 803, 804, 805, 806, 807, 808, 809, 810, 843, 883, 884, 955, 956, 963, 966, 969, 973, 976, 980, 982, 986, 990, 1000, 1001, 1008, 1011, 1012], "check": [4, 5, 8, 17, 46, 53, 56, 99, 129, 149, 164, 166, 168, 169, 183, 185, 186, 197, 219, 243, 250, 266, 273, 312, 319, 337, 351, 357, 358, 369, 370, 371, 372, 373, 374, 375, 377, 378, 380, 382, 384, 387, 390, 397, 428, 436, 437, 450, 487, 493, 494, 516, 521, 522, 533, 546, 547, 631, 632, 637, 638, 645, 646, 647, 648, 661, 663, 666, 672, 674, 677, 678, 787, 798, 807, 821, 839, 847, 888, 891, 892, 893, 894, 903, 904, 905, 914, 915, 926, 927, 928, 950, 951, 952, 954, 961, 962, 963, 966, 981, 982, 987, 990, 1008, 1009, 1011, 1015, 1019, 1020, 1021, 1022, 1023], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 16, 17, 19, 25, 32, 40, 44, 49, 62, 70, 105, 106, 114, 121, 129, 136, 170, 236, 252, 255, 257, 258, 260, 261, 266, 270, 286, 301, 305, 309, 310, 311, 312, 313, 314, 321, 332, 343, 344, 359, 365, 366, 369, 370, 371, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 387, 394, 395, 396, 397, 400, 402, 403, 404, 417, 419, 422, 435, 441, 442, 449, 450, 451, 456, 457, 463, 467, 468, 469, 473, 474, 475, 476, 477, 481, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 508, 517, 535, 536, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 573, 574, 576, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 617, 619, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 664, 666, 669, 677, 681, 682, 684, 695, 697, 698, 701, 703, 709, 717, 730, 738, 762, 765, 767, 772, 776, 779, 780, 781, 784, 785, 787, 792, 793, 795, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 847, 851, 854, 856, 857, 862, 864, 880, 884, 886, 889, 891, 892, 893, 894, 897, 899, 903, 904, 905, 909, 911, 912, 913, 915, 923, 924, 926, 937, 940, 950, 955, 956, 962, 966, 968, 969, 970, 973, 974, 977, 982, 984, 986, 987, 990, 992, 996, 998, 1001, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "train_0": 4, "test_0": 4, "iloc": [4, 129, 167, 168, 215, 257], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 19, 24, 26, 42, 45, 54, 55, 80, 85, 91, 101, 103, 105, 110, 114, 122, 142, 143, 150, 161, 167, 177, 187, 223, 226, 244, 257, 290, 293, 296, 299, 301, 314, 317, 318, 342, 350, 353, 357, 377, 400, 403, 404, 429, 462, 486, 489, 555, 582, 663, 718, 778, 798, 809, 835, 853, 858, 860, 861, 864, 872, 873, 875, 876, 961, 962, 966, 967, 969, 976, 997, 1008, 1010, 1016, 1019], "760": 4, "68": [4, 188, 296, 317, 396, 520, 526, 575, 1008], "27": [4, 6, 19, 31, 47, 54, 223, 259, 273, 317, 318, 338, 345, 368, 396, 404, 406, 509, 698, 772, 773, 864, 884, 966, 976, 1000, 1008, 1010], "9993": [4, 638, 640, 1016], "12380": 4, "32": [4, 5, 51, 166, 169, 234, 258, 273, 309, 313, 318, 365, 369, 376, 384, 393, 403, 404, 430, 549, 550, 567, 574, 619, 661, 862, 864, 903, 904, 931, 974, 976, 1000, 1008, 1011, 1014, 1016, 1017, 1020, 1021, 1022], "000": [4, 5, 15, 16, 17, 21, 25, 27, 42, 74, 150, 169, 173, 230, 255, 257, 259, 277, 291, 304, 312, 342, 343, 353, 366, 377, 403, 404, 475, 546, 547, 629, 662, 980, 1001, 1019], "77": [4, 6, 44, 173, 266, 318, 365, 368, 519, 692], "0028": 4, "12381": 4, "72": [4, 6, 7, 152, 376, 807], "9995": 4, "12382": 4, "240": [4, 44, 974, 1008], "82": [4, 30, 53, 58, 92, 143, 200, 288, 296, 317, 772, 781, 795, 966, 969, 997, 1008], "9980": [4, 1016], "12383": 4, "13374": 4, "34": [4, 92, 122, 149, 223, 282, 296, 317, 318, 368, 400, 406, 505, 555, 582, 634, 652, 701, 748, 997, 1008], "44": [4, 85, 154, 167, 168, 181, 281, 406, 765, 864, 884, 887, 966, 973, 1008], "40": [4, 14, 54, 66, 78, 90, 95, 101, 125, 131, 149, 181, 188, 189, 191, 214, 220, 222, 233, 246, 258, 283, 289, 295, 301, 317, 318, 327, 328, 330, 332, 334, 336, 351, 358, 366, 400, 431, 480, 502, 503, 823, 824, 828, 840, 841, 955, 967, 976, 1008, 1009], "150": [4, 6, 90, 92, 114, 122, 135, 219, 223, 226, 270, 368, 400, 405, 489, 587, 804, 805, 806, 966, 996, 997, 998], "53": [4, 53, 396, 403, 520, 526, 774, 775], "15": [4, 6, 7, 12, 13, 14, 30, 31, 34, 40, 44, 53, 54, 61, 62, 66, 73, 74, 80, 82, 92, 105, 110, 114, 118, 119, 122, 141, 143, 145, 149, 153, 161, 166, 167, 168, 186, 194, 199, 211, 215, 220, 223, 226, 244, 245, 252, 260, 262, 265, 268, 269, 271, 280, 281, 285, 293, 294, 296, 299, 301, 303, 318, 321, 323, 327, 329, 332, 336, 339, 348, 365, 366, 371, 383, 400, 403, 404, 425, 439, 475, 482, 516, 522, 540, 541, 583, 629, 637, 646, 648, 653, 661, 663, 677, 725, 799, 812, 835, 864, 955, 961, 962, 963, 966, 969, 970, 976, 981, 984, 992, 997, 1004, 1006, 1010, 1020, 1022, 1023], "0013": 4, "13375": 4, "39": [4, 216, 235, 239, 366, 368, 369, 375, 396, 404, 480, 892], "49": [4, 92, 171, 365, 366, 368, 376, 396, 435, 442, 698, 710, 740, 748, 779, 781, 864, 961, 966, 976, 1011], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 97, 155, 167, 215, 223, 332, 368, 377, 403, 404, 540, 541, 555, 719, 966, 1001, 1008], "08": [4, 8, 15, 44, 50, 83, 98, 133, 167, 168, 181, 216, 273, 296, 345, 368, 516, 528, 530, 548, 626, 643, 781, 840, 841, 862, 972], "910": 4, "42": [4, 5, 6, 24, 25, 26, 27, 31, 46, 56, 78, 92, 97, 103, 116, 117, 119, 122, 123, 125, 129, 142, 143, 162, 167, 169, 170, 173, 176, 186, 189, 191, 192, 199, 203, 204, 205, 211, 212, 214, 219, 226, 232, 235, 238, 256, 258, 261, 277, 283, 284, 285, 293, 300, 301, 302, 304, 306, 309, 311, 313, 320, 327, 329, 342, 343, 353, 358, 373, 376, 377, 384, 396, 400, 403, 404, 407, 422, 429, 473, 477, 509, 516, 522, 529, 542, 543, 550, 551, 552, 553, 555, 662, 779, 783, 807, 809, 823, 824, 828, 832, 835, 875, 876, 878, 879, 880, 893, 894, 969, 976, 997, 1001, 1004, 1005, 1008], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 55, 71, 92, 112, 131, 167, 168, 176, 185, 226, 265, 304, 317, 318, 342, 529, 633, 634, 641, 687, 691, 692, 711, 725, 740, 766, 773, 816, 955, 962, 966, 972, 973, 976, 997, 1001, 1008, 1010], "26": [4, 46, 54, 80, 97, 154, 167, 197, 216, 234, 270, 318, 377, 555, 633, 713, 767, 859, 871, 920, 966, 976, 1008, 1011, 1012, 1020], "47": [4, 85, 193, 307, 366, 478, 479, 520, 526, 961], "16": [4, 5, 8, 10, 15, 19, 27, 43, 50, 51, 54, 66, 74, 80, 95, 98, 109, 133, 141, 158, 168, 190, 196, 197, 198, 215, 218, 219, 231, 234, 240, 259, 260, 261, 281, 296, 299, 303, 309, 343, 349, 366, 368, 369, 377, 383, 387, 388, 389, 400, 401, 404, 427, 456, 457, 463, 482, 487, 519, 520, 555, 574, 580, 581, 592, 593, 624, 635, 636, 639, 640, 641, 642, 667, 668, 794, 799, 809, 858, 884, 892, 955, 962, 966, 976, 981, 984, 992, 1001, 1004, 1006, 1008, 1009, 1013, 1014, 1016, 1017], "9979": 4, "2331": 4, "31": [4, 50, 70, 79, 215, 282, 312, 317, 318, 393, 404, 485, 546, 547, 582, 634, 656, 664, 931, 967, 1008], "060": [4, 89, 93, 735], "0032": 4, "2332": 4, "2333": 4, "78": [4, 53, 173, 215, 296, 301, 318, 478, 479, 638, 640, 649, 650, 781, 787, 807, 966, 987, 997], "275": [4, 318, 1011], "2334": 4, "96": [4, 32, 48, 62, 156, 226, 255, 296, 301, 304, 305, 317, 318, 368, 400, 955, 961, 966, 976, 1008], "515": 4, "64": [4, 32, 48, 53, 58, 89, 95, 154, 167, 219, 230, 231, 234, 255, 266, 281, 286, 348, 357, 358, 368, 369, 377, 401, 480, 487, 584, 585, 631, 643, 673, 674, 675, 676, 884, 969, 998, 1004, 1008, 1010, 1016, 1017, 1020, 1021, 1022], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1017], "12329": 4, "46": [4, 53, 189, 197, 353, 377, 578, 579, 701, 887, 892, 961, 976, 1004], "12330": [4, 1016], "52": [4, 154, 176, 197, 618, 779, 961, 1008], "last": [4, 44, 58, 89, 120, 122, 167, 176, 197, 198, 205, 210, 226, 248, 260, 268, 269, 304, 311, 313, 320, 347, 357, 366, 369, 373, 375, 376, 379, 384, 387, 396, 397, 404, 408, 423, 427, 432, 444, 449, 453, 500, 518, 544, 545, 546, 547, 568, 569, 572, 578, 579, 582, 595, 667, 668, 670, 671, 682, 683, 685, 686, 687, 692, 766, 779, 780, 784, 785, 800, 823, 824, 828, 843, 844, 848, 856, 862, 898, 923, 941, 955, 961, 962, 963, 965, 967, 970, 980, 987, 992, 999, 1008, 1015, 1016, 1017, 1022, 1024], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 32, 54, 97, 118, 196, 233, 270, 296, 301, 317, 318, 403, 648, 772, 961, 966, 967, 976, 1001, 1008], "665": 4, "16380": 4, "71": [4, 46, 215, 321, 368, 495, 714, 966, 999, 1010], "16381": 4, "76": [4, 173, 197, 296, 318, 342, 353, 368, 377, 765, 999], "16382": 4, "16383": 4, "18": [4, 7, 8, 19, 40, 44, 49, 53, 60, 62, 74, 92, 103, 110, 122, 158, 167, 208, 226, 231, 257, 303, 305, 318, 342, 343, 344, 371, 377, 397, 400, 401, 404, 432, 444, 477, 485, 486, 487, 489, 490, 495, 520, 521, 523, 525, 526, 542, 543, 544, 545, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 562, 563, 574, 579, 584, 585, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 631, 634, 643, 644, 656, 699, 703, 715, 718, 719, 725, 727, 779, 780, 802, 816, 839, 840, 841, 847, 853, 861, 862, 873, 883, 884, 891, 892, 893, 894, 895, 919, 920, 955, 964, 966, 976, 984, 1004, 1006, 1008, 1009, 1012, 1013, 1015, 1016, 1018, 1019], "940": 4, "6331": 4, "28": [4, 66, 122, 167, 213, 266, 295, 317, 318, 368, 377, 396, 400, 435, 442, 976, 997, 1008, 1011, 1014], "790": [4, 70], "89": [4, 32, 154, 188, 296, 317, 318, 966, 976, 1001, 1008, 1011, 1019], "6332": 4, "6333": 4, "88": [4, 6, 32, 188, 256, 296, 317, 318, 347, 366, 368, 398, 458, 843, 997, 1008], "820": [4, 823, 824], "79": [4, 6, 30, 32, 80, 81, 98, 173, 296, 318, 368, 376, 398, 459, 509, 582, 821, 1008, 1010], "6334": 4, "6335": 4, "70": [4, 6, 11, 66, 71, 73, 168, 242, 257, 318, 366, 368, 400, 478, 479, 698, 710, 740, 781, 795, 955, 976, 997, 1004], "33": [4, 80, 197, 314, 318, 366, 368, 369, 375, 376, 377, 387, 388, 389, 396, 404, 517, 633, 697, 698, 713, 714, 722, 727, 767, 768, 771, 787, 807, 809, 811, 894, 962, 966, 976, 997, 1008, 1016], "335": 4, "74": [4, 112, 213, 317, 318, 368, 575, 781, 795, 862], "16326": [4, 1020], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 154, 198, 366, 375, 379], "tree": [4, 7, 26, 27, 31, 41, 44, 55, 62, 108, 109, 112, 113, 114, 119, 120, 121, 122, 123, 125, 129, 130, 133, 157, 161, 168, 170, 219, 234, 236, 261, 277, 282, 290, 299, 300, 304, 311, 352, 353, 357, 360, 366, 368, 377, 383, 384, 386, 394, 396, 402, 407, 422, 426, 427, 428, 429, 430, 431, 433, 435, 442, 448, 480, 485, 489, 499, 500, 504, 529, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 616, 617, 618, 619, 643, 673, 677, 687, 688, 772, 787, 807, 809, 818, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 844, 847, 856, 915, 956, 963, 966, 967, 972, 973, 986, 987, 988, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "often": [4, 19, 24, 25, 33, 70, 74, 127, 153, 161, 167, 168, 198, 215, 219, 244, 259, 262, 299, 304, 329, 339, 342, 343, 344, 357, 358, 365, 366, 368, 371, 373, 376, 379, 382, 383, 384, 386, 390, 394, 396, 397, 398, 400, 401, 403, 404, 406, 408, 453, 506, 509, 518, 521, 617, 631, 632, 637, 638, 645, 646, 647, 648, 657, 659, 672, 712, 853, 861, 869, 881, 955, 956, 958, 961, 962, 963, 964, 965, 966, 968, 969, 971, 972, 973, 976, 979, 980, 982, 992, 994, 999, 1000, 1001, 1009, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "flexibl": [4, 25, 119, 161, 197, 300, 326, 344, 373, 378, 400, 406, 659, 883, 884, 955, 960, 962, 966, 970, 976, 987, 990, 1017, 1021], "effici": [4, 5, 12, 13, 42, 46, 53, 55, 95, 127, 173, 186, 190, 199, 205, 282, 342, 357, 363, 365, 371, 373, 374, 376, 377, 382, 384, 390, 393, 395, 396, 401, 402, 403, 406, 408, 427, 428, 431, 432, 434, 435, 437, 439, 442, 444, 446, 447, 481, 518, 519, 520, 523, 525, 526, 529, 548, 551, 559, 573, 576, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 619, 623, 625, 640, 643, 644, 649, 651, 653, 658, 660, 661, 662, 663, 664, 670, 671, 673, 684, 710, 740, 747, 763, 764, 779, 780, 781, 795, 812, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 848, 860, 872, 876, 883, 892, 894, 920, 934, 955, 958, 960, 962, 963, 965, 966, 967, 969, 970, 971, 972, 974, 976, 977, 978, 979, 980, 981, 986, 990, 992, 996, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "heteorogen": 4, "tabular": [4, 168, 373, 974], "mix": [4, 62, 69, 76, 96, 97, 164, 197, 299, 365, 373, 382, 384, 397, 401, 408, 449, 451, 452, 481, 518, 523, 525, 532, 585, 589, 615, 631, 632, 637, 643, 644, 645, 646, 647, 648, 653, 661, 663, 666, 781, 795, 809, 843, 856, 857, 863, 864, 930, 937, 940, 962, 971, 1000, 1020, 1022, 1023], "long": [4, 11, 12, 44, 62, 110, 122, 154, 162, 167, 169, 197, 233, 260, 290, 299, 310, 342, 343, 353, 358, 371, 379, 382, 384, 385, 390, 395, 396, 406, 438, 483, 523, 661, 662, 663, 784, 785, 818, 819, 820, 821, 822, 840, 841, 851, 966, 972, 976, 977, 979, 980, 985, 989, 1010, 1014, 1020, 1022], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 56, 57, 58, 59, 60, 65, 80, 81, 82, 86, 90, 92, 95, 99, 100, 104, 105, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 125, 130, 131, 132, 143, 145, 149, 154, 155, 156, 158, 161, 164, 167, 168, 173, 175, 181, 183, 185, 186, 197, 199, 201, 205, 211, 213, 214, 215, 216, 218, 226, 230, 231, 233, 235, 242, 243, 245, 246, 247, 248, 250, 252, 257, 259, 260, 261, 263, 265, 269, 271, 273, 275, 277, 280, 281, 282, 283, 284, 286, 287, 288, 299, 301, 302, 303, 304, 306, 309, 311, 312, 314, 317, 319, 320, 321, 322, 324, 325, 327, 329, 331, 337, 340, 342, 343, 348, 351, 357, 360, 364, 366, 367, 370, 371, 373, 374, 382, 383, 393, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 413, 415, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 441, 442, 443, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 595, 596, 612, 613, 614, 615, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 672, 673, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 688, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 744, 745, 747, 748, 752, 753, 754, 755, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 903, 904, 908, 909, 920, 924, 935, 937, 940, 941, 944, 947, 955, 956, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 986, 987, 989, 992, 998, 999, 1000, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "larg": [4, 12, 13, 21, 26, 37, 39, 43, 47, 49, 50, 52, 53, 55, 73, 75, 95, 99, 113, 115, 122, 125, 127, 142, 154, 155, 169, 176, 177, 186, 188, 197, 199, 202, 203, 215, 231, 254, 260, 263, 266, 279, 286, 295, 299, 301, 312, 313, 329, 334, 343, 344, 357, 366, 371, 377, 380, 382, 383, 384, 387, 390, 395, 398, 400, 401, 402, 403, 405, 406, 407, 409, 427, 429, 431, 432, 435, 436, 437, 438, 443, 447, 458, 460, 484, 499, 519, 521, 523, 525, 529, 532, 534, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 567, 573, 574, 576, 619, 626, 628, 635, 639, 642, 643, 644, 649, 656, 657, 659, 662, 664, 670, 672, 674, 676, 677, 678, 680, 730, 763, 764, 781, 789, 791, 795, 799, 808, 818, 819, 820, 821, 822, 823, 824, 829, 840, 841, 848, 852, 853, 861, 863, 875, 876, 883, 884, 888, 889, 891, 892, 893, 894, 919, 920, 955, 958, 960, 962, 963, 965, 968, 969, 970, 974, 976, 979, 980, 981, 982, 986, 987, 990, 997, 999, 1000, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "here": [4, 8, 9, 12, 13, 17, 24, 57, 58, 66, 78, 82, 89, 90, 92, 97, 98, 100, 102, 103, 104, 106, 110, 113, 119, 123, 129, 143, 146, 149, 157, 158, 167, 168, 169, 173, 176, 181, 186, 190, 197, 203, 212, 213, 215, 218, 220, 226, 231, 236, 243, 244, 245, 251, 254, 255, 257, 259, 260, 262, 266, 267, 269, 277, 279, 286, 294, 295, 296, 301, 304, 311, 313, 317, 319, 329, 337, 339, 344, 347, 353, 357, 358, 359, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 379, 382, 383, 390, 392, 393, 396, 397, 399, 400, 401, 402, 403, 404, 407, 409, 422, 425, 426, 427, 428, 429, 430, 432, 434, 437, 449, 457, 460, 521, 523, 524, 528, 529, 552, 553, 554, 555, 566, 567, 569, 573, 576, 579, 587, 613, 615, 632, 636, 638, 640, 646, 648, 650, 658, 660, 674, 676, 680, 684, 697, 710, 730, 740, 776, 781, 784, 785, 787, 795, 803, 804, 805, 806, 807, 808, 810, 819, 823, 824, 847, 855, 858, 861, 875, 876, 886, 932, 955, 958, 962, 963, 964, 965, 966, 969, 972, 976, 978, 979, 980, 981, 986, 987, 989, 990, 992, 993, 999, 1008, 1016, 1021], "ordin": [4, 53, 71, 129, 302, 305, 306, 311, 314, 365, 384, 403, 481, 552, 694, 848, 851, 856, 857, 864, 962, 963, 976, 987, 1016, 1022], "encod": [4, 8, 11, 48, 55, 71, 95, 115, 129, 164, 167, 168, 169, 196, 197, 266, 298, 300, 301, 302, 307, 311, 313, 314, 329, 342, 344, 363, 365, 367, 373, 376, 382, 384, 397, 400, 401, 403, 404, 406, 449, 472, 481, 488, 511, 516, 522, 524, 525, 527, 529, 530, 531, 533, 536, 547, 551, 552, 554, 566, 573, 574, 576, 615, 633, 643, 644, 654, 657, 665, 719, 783, 788, 790, 806, 809, 843, 844, 846, 848, 850, 851, 854, 856, 857, 864, 867, 881, 955, 956, 962, 963, 966, 968, 969, 971, 980, 986, 987, 1003, 1009, 1010, 1016, 1020, 1022, 1023, 1024], "know": [4, 53, 66, 119, 143, 146, 149, 158, 167, 215, 233, 257, 275, 313, 317, 337, 343, 357, 371, 382, 390, 396, 399, 400, 401, 404, 485, 489, 495, 631, 637, 643, 644, 710, 740, 781, 795, 868, 869, 871, 872, 873, 874, 891, 892, 893, 894, 955, 965, 966, 967, 969, 978, 1014, 1015, 1018, 1020], "treat": [4, 6, 71, 119, 129, 161, 167, 197, 266, 305, 311, 320, 353, 371, 382, 384, 393, 403, 404, 427, 546, 547, 573, 574, 576, 592, 593, 617, 623, 630, 656, 659, 738, 772, 852, 853, 859, 860, 863, 864, 868, 871, 872, 874, 956, 958, 962, 966, 967, 973, 976, 980, 982, 997, 1012, 1020, 1024], "dedic": [4, 255, 339, 369, 375, 377, 382, 385, 392, 396, 569, 657, 659, 672, 955, 986, 992, 1016], "rule": [4, 173, 348, 351, 353, 357, 368, 371, 372, 373, 382, 384, 385, 391, 394, 395, 396, 400, 401, 403, 405, 521, 534, 535, 536, 537, 538, 546, 547, 554, 555, 587, 619, 630, 643, 644, 651, 653, 661, 662, 663, 691, 692, 781, 784, 785, 787, 795, 806, 808, 832, 883, 896, 955, 960, 968, 969, 980, 982, 987, 992, 999, 1003, 1010, 1013, 1020], "pass": [4, 7, 8, 20, 21, 38, 119, 126, 143, 178, 181, 198, 227, 229, 230, 236, 238, 247, 255, 258, 306, 309, 312, 334, 344, 353, 357, 358, 359, 366, 371, 372, 373, 376, 377, 378, 379, 380, 382, 384, 390, 392, 396, 397, 400, 401, 403, 404, 406, 407, 408, 422, 423, 425, 428, 429, 431, 432, 434, 435, 437, 439, 442, 444, 445, 447, 449, 450, 452, 453, 454, 457, 459, 473, 476, 477, 480, 482, 488, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 566, 567, 573, 574, 576, 578, 579, 582, 592, 593, 595, 596, 602, 605, 611, 616, 617, 619, 624, 625, 626, 627, 628, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 655, 656, 657, 661, 662, 663, 664, 666, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 716, 717, 726, 747, 758, 762, 763, 764, 765, 772, 774, 775, 779, 780, 781, 783, 784, 785, 786, 787, 793, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 847, 848, 850, 854, 856, 857, 858, 860, 863, 864, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 903, 904, 910, 914, 915, 919, 920, 922, 924, 926, 927, 934, 936, 937, 940, 955, 956, 962, 964, 966, 967, 968, 969, 970, 973, 976, 979, 980, 981, 987, 990, 992, 996, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "explicitli": [4, 46, 53, 116, 149, 156, 161, 162, 198, 229, 302, 306, 309, 344, 353, 358, 365, 367, 371, 372, 373, 375, 382, 384, 392, 400, 404, 406, 520, 534, 535, 564, 565, 582, 612, 633, 643, 644, 654, 665, 694, 711, 766, 772, 773, 784, 785, 814, 817, 823, 824, 849, 873, 874, 934, 955, 956, 958, 960, 962, 963, 966, 968, 969, 976, 990, 1001, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022], "logic": [4, 358, 372, 373, 378, 392, 403, 982, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "integ": [4, 17, 48, 53, 71, 167, 197, 215, 310, 311, 353, 357, 365, 366, 368, 373, 376, 380, 383, 384, 396, 397, 400, 401, 403, 404, 419, 422, 447, 449, 452, 457, 472, 481, 483, 486, 487, 488, 490, 493, 494, 497, 499, 500, 504, 507, 535, 544, 545, 546, 547, 548, 552, 553, 557, 567, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 617, 618, 629, 636, 640, 644, 650, 658, 660, 661, 684, 699, 719, 781, 783, 784, 785, 786, 788, 790, 795, 796, 797, 798, 800, 801, 803, 806, 814, 817, 819, 822, 823, 824, 848, 856, 857, 862, 863, 864, 867, 877, 879, 891, 892, 893, 894, 899, 929, 930, 931, 935, 956, 962, 967, 969, 976, 979, 981, 982, 992, 999, 1001, 1008, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023], "lexicograph": [4, 384, 552, 772, 776, 825, 833], "ad": [4, 13, 75, 103, 105, 109, 120, 142, 149, 155, 156, 176, 181, 199, 222, 232, 257, 258, 259, 299, 310, 311, 312, 313, 314, 321, 343, 370, 371, 375, 377, 382, 384, 385, 401, 403, 404, 405, 406, 426, 427, 428, 430, 432, 434, 437, 444, 447, 449, 499, 507, 517, 520, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 567, 574, 575, 576, 578, 587, 592, 593, 596, 598, 612, 614, 626, 627, 633, 635, 639, 643, 644, 654, 661, 663, 665, 680, 698, 699, 713, 714, 759, 761, 767, 768, 771, 773, 779, 780, 781, 795, 804, 811, 821, 840, 841, 842, 856, 862, 865, 880, 891, 892, 893, 894, 910, 955, 959, 961, 962, 963, 967, 969, 970, 972, 987, 990, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "benefit": [4, 56, 74, 75, 167, 211, 222, 229, 231, 279, 313, 357, 371, 380, 384, 394, 396, 433, 446, 453, 493, 552, 553, 643, 644, 651, 653, 661, 662, 663, 881, 883, 955, 961, 969, 974, 976, 987, 990, 1008, 1011, 1012, 1013, 1020, 1021, 1022, 1023], "prevent": [4, 55, 110, 122, 143, 166, 198, 299, 305, 306, 329, 342, 347, 353, 371, 373, 375, 382, 383, 396, 401, 404, 427, 434, 473, 474, 575, 576, 596, 712, 769, 840, 841, 868, 869, 871, 872, 873, 874, 966, 968, 971, 972, 976, 982, 999, 1010, 1011, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "ani": [4, 8, 9, 13, 19, 30, 44, 46, 55, 57, 67, 126, 141, 146, 154, 155, 156, 166, 167, 168, 169, 186, 197, 215, 226, 229, 230, 243, 247, 248, 257, 258, 260, 263, 266, 290, 299, 300, 303, 306, 309, 311, 312, 314, 329, 344, 353, 357, 358, 359, 365, 366, 368, 369, 371, 373, 375, 376, 377, 379, 383, 384, 385, 387, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 419, 425, 431, 433, 434, 435, 437, 439, 441, 442, 446, 449, 452, 473, 474, 493, 494, 508, 519, 522, 524, 531, 536, 542, 543, 544, 545, 549, 550, 551, 552, 553, 554, 555, 564, 565, 567, 573, 574, 576, 578, 588, 595, 596, 605, 612, 617, 618, 630, 633, 643, 644, 651, 653, 654, 661, 662, 663, 664, 665, 677, 681, 684, 685, 689, 701, 702, 704, 708, 720, 721, 736, 739, 741, 758, 762, 763, 764, 765, 774, 775, 777, 781, 784, 785, 793, 794, 812, 815, 823, 824, 829, 833, 842, 843, 847, 848, 852, 854, 856, 857, 864, 873, 874, 877, 880, 883, 891, 892, 893, 894, 895, 897, 899, 903, 904, 936, 950, 955, 956, 958, 961, 962, 963, 966, 967, 968, 969, 972, 973, 974, 976, 978, 979, 980, 981, 982, 986, 992, 994, 998, 999, 1001, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "unknown": [4, 16, 56, 167, 257, 317, 319, 359, 366, 384, 390, 393, 404, 850, 856, 857, 929, 965, 976, 992, 1012, 1016, 1020, 1021], "sake": [4, 122, 162, 167, 197, 304, 342, 344, 379, 382, 655, 684], "simplic": [4, 13, 31, 181, 342, 344, 384, 402, 969, 970, 971, 981], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 71, 72, 98, 109, 115, 116, 117, 118, 125, 126, 129, 132, 143, 149, 154, 162, 166, 167, 168, 169, 173, 176, 178, 186, 227, 228, 229, 236, 237, 238, 239, 243, 244, 247, 255, 257, 258, 264, 269, 277, 290, 296, 305, 310, 311, 313, 314, 319, 331, 342, 343, 351, 366, 369, 370, 371, 373, 376, 377, 379, 382, 384, 390, 396, 399, 400, 403, 404, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 488, 552, 562, 574, 643, 658, 660, 674, 678, 781, 784, 785, 793, 795, 804, 805, 806, 808, 861, 863, 883, 955, 962, 963, 972, 981, 982, 987, 989, 990, 992, 994, 997, 999, 1000, 1001, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "default": [4, 14, 25, 27, 30, 42, 45, 46, 48, 53, 55, 59, 95, 142, 149, 161, 168, 176, 177, 186, 197, 198, 215, 228, 230, 237, 239, 245, 252, 260, 266, 275, 277, 299, 302, 303, 306, 309, 310, 314, 338, 342, 343, 344, 347, 353, 357, 358, 365, 366, 369, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 390, 394, 396, 397, 400, 401, 403, 404, 405, 407, 408, 409, 410, 412, 413, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 692, 693, 694, 696, 697, 698, 699, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 755, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 907, 909, 910, 912, 914, 919, 920, 921, 922, 923, 924, 925, 929, 931, 934, 935, 936, 937, 939, 940, 941, 947, 950, 952, 953, 955, 956, 958, 960, 962, 965, 966, 967, 969, 970, 972, 973, 976, 978, 980, 981, 982, 992, 996, 999, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "hyper": [4, 71, 251, 257, 262, 296, 329, 353, 373, 382, 383, 384, 391, 400, 403, 405, 453, 629, 630, 785, 793, 795, 839, 881, 961, 962, 966, 969, 980, 981, 992, 1003, 1008, 1022], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 44, 54, 55, 58, 60, 61, 62, 71, 72, 73, 79, 81, 82, 92, 95, 112, 114, 118, 123, 124, 135, 136, 143, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 176, 177, 178, 179, 181, 182, 184, 185, 186, 188, 189, 197, 199, 201, 202, 205, 206, 214, 215, 222, 223, 226, 228, 231, 232, 235, 242, 243, 244, 245, 247, 248, 251, 256, 257, 258, 261, 262, 265, 268, 269, 270, 272, 277, 279, 283, 284, 290, 293, 294, 296, 299, 300, 301, 309, 310, 312, 313, 314, 321, 324, 326, 331, 334, 338, 339, 340, 342, 343, 344, 347, 348, 349, 350, 353, 357, 358, 359, 360, 363, 364, 366, 374, 376, 377, 378, 379, 380, 382, 391, 394, 396, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 963, 965, 968, 969, 970, 971, 972, 973, 974, 976, 978, 979, 980, 982, 986, 987, 993, 995, 997, 998, 999, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "pipelin": [4, 31, 54, 58, 71, 74, 76, 86, 115, 119, 140, 142, 147, 161, 162, 168, 169, 173, 176, 185, 186, 197, 198, 203, 211, 215, 219, 225, 226, 227, 231, 236, 239, 240, 250, 254, 256, 264, 271, 273, 277, 279, 285, 286, 293, 296, 301, 304, 306, 309, 310, 311, 312, 313, 314, 321, 342, 343, 353, 357, 360, 363, 365, 366, 371, 374, 384, 400, 404, 406, 410, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 473, 487, 500, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 590, 592, 595, 596, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 682, 683, 685, 686, 687, 698, 779, 780, 781, 784, 785, 795, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 955, 956, 962, 969, 970, 975, 976, 980, 981, 986, 987, 988, 990, 993, 995, 1003, 1008, 1009, 1011, 1012, 1013, 1014, 1015], "make_pipelin": [4, 31, 58, 86, 115, 119, 129, 142, 143, 161, 162, 167, 168, 173, 176, 185, 186, 197, 198, 203, 211, 215, 219, 226, 227, 228, 236, 237, 239, 254, 264, 277, 286, 293, 301, 304, 305, 306, 309, 310, 311, 312, 313, 314, 343, 353, 383, 397, 400, 552, 661, 663, 835, 843, 868, 869, 871, 872, 873, 874, 883, 884, 885, 886, 888, 889, 956, 969, 976, 980, 981, 1011, 1018, 1021], "ordinalencod": [4, 119, 129, 168, 169, 197, 305, 314, 365, 384, 403, 566, 819, 851, 856, 864, 968, 976, 1016, 1017, 1020, 1021, 1022, 1023, 1024], "compos": [4, 5, 25, 69, 70, 71, 75, 86, 112, 119, 129, 164, 167, 168, 169, 197, 199, 215, 228, 237, 239, 305, 310, 312, 313, 314, 360, 383, 396, 397, 400, 406, 500, 597, 965, 1008], "columntransform": [4, 70, 71, 129, 167, 168, 169, 197, 215, 228, 237, 239, 305, 310, 312, 313, 314, 363, 365, 382, 383, 451, 452, 614, 848, 955, 956, 987, 1003, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "ensembl": [4, 7, 10, 26, 27, 31, 56, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 161, 162, 168, 169, 170, 197, 219, 226, 234, 235, 237, 238, 254, 269, 275, 301, 305, 309, 310, 311, 312, 314, 342, 353, 357, 360, 375, 376, 383, 384, 394, 396, 400, 405, 422, 489, 500, 617, 618, 620, 643, 687, 784, 785, 809, 813, 844, 847, 856, 887, 891, 893, 894, 955, 966, 967, 972, 973, 982, 986, 987, 988, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "histgradientboostingregressor": [4, 7, 119, 122, 123, 126, 129, 161, 168, 197, 305, 309, 310, 311, 312, 314, 375, 403, 545, 550, 617, 618, 620, 956, 973, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "cross_valid": [4, 119, 129, 167, 199, 253, 260, 305, 371, 383, 560, 804, 805, 966, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024], "categorical_column": [4, 119, 167, 169, 452], "ordinal_encod": [4, 119], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 57, 62, 69, 74, 76, 86, 89, 97, 98, 100, 102, 104, 105, 108, 119, 129, 133, 143, 155, 162, 164, 167, 168, 169, 173, 189, 197, 198, 205, 211, 213, 215, 219, 222, 226, 228, 231, 233, 239, 244, 254, 255, 258, 266, 277, 279, 285, 286, 287, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 314, 329, 332, 342, 344, 353, 360, 365, 366, 367, 368, 371, 373, 376, 380, 384, 392, 394, 395, 396, 398, 401, 403, 404, 405, 406, 412, 416, 418, 422, 426, 427, 428, 430, 432, 434, 437, 449, 450, 451, 452, 453, 467, 468, 469, 470, 473, 474, 481, 488, 493, 494, 499, 500, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 542, 544, 546, 549, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 621, 623, 624, 625, 626, 627, 638, 643, 648, 658, 661, 669, 673, 674, 675, 676, 677, 679, 686, 687, 698, 737, 738, 769, 781, 784, 785, 795, 809, 812, 818, 827, 832, 835, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 881, 883, 885, 888, 889, 912, 914, 955, 956, 958, 960, 962, 963, 966, 967, 970, 980, 981, 983, 986, 987, 988, 992, 997, 998, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "remaind": [4, 119, 167, 186, 197, 199, 215, 314, 337, 347, 397, 449, 452, 1008, 1015, 1016, 1017, 1020, 1021], "passthrough": [4, 72, 119, 167, 168, 197, 215, 305, 314, 397, 449, 452, 552, 553, 842, 843, 976, 1017, 1019, 1022, 1023], "short": [4, 5, 119, 125, 188, 255, 295, 342, 371, 379, 400, 404, 408, 962, 963, 969, 1013, 1018, 1019, 1020, 1021, 1022, 1023], "easier": [4, 44, 62, 66, 82, 119, 176, 182, 228, 254, 255, 299, 329, 342, 353, 366, 371, 373, 376, 379, 382, 387, 398, 400, 453, 500, 881, 914, 961, 966, 973, 982, 987, 990, 1001, 1017, 1022], "specifi": [4, 55, 95, 119, 120, 150, 153, 155, 156, 157, 158, 186, 198, 205, 242, 265, 357, 358, 365, 369, 371, 373, 380, 383, 384, 390, 396, 397, 400, 401, 403, 405, 406, 408, 410, 422, 426, 430, 435, 437, 448, 449, 452, 454, 455, 457, 458, 459, 460, 461, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 488, 500, 516, 518, 522, 523, 525, 526, 531, 532, 537, 542, 544, 545, 546, 547, 549, 552, 553, 568, 569, 578, 579, 582, 587, 595, 596, 605, 616, 617, 618, 623, 628, 631, 632, 633, 636, 637, 638, 640, 641, 643, 644, 645, 646, 647, 648, 650, 653, 654, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 672, 676, 683, 684, 685, 687, 694, 696, 713, 714, 722, 738, 755, 763, 764, 767, 768, 771, 781, 783, 784, 785, 787, 788, 790, 794, 795, 798, 803, 804, 805, 806, 807, 808, 810, 814, 817, 818, 819, 821, 822, 823, 824, 828, 856, 857, 858, 861, 862, 879, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 915, 922, 950, 956, 962, 963, 965, 966, 969, 973, 974, 976, 979, 980, 981, 996, 1000, 1008, 1014, 1015, 1016, 1017, 1019, 1020, 1022, 1023, 1024], "next": [4, 7, 25, 60, 80, 118, 119, 123, 132, 156, 166, 170, 190, 194, 197, 227, 234, 238, 239, 244, 252, 263, 275, 304, 305, 306, 311, 318, 342, 347, 351, 353, 360, 369, 371, 373, 375, 393, 396, 397, 400, 403, 493, 494, 595, 619, 677, 683, 685, 687, 765, 779, 780, 809, 932, 955, 959, 965, 966, 976, 990, 1005, 1008, 1021, 1022], "verbose_feature_names_out": [4, 119, 167, 168, 169, 239, 305, 312, 313, 314, 397, 449, 452, 1021], "categorical_featur": [4, 71, 119, 168, 305, 311, 312, 313, 314, 376, 403, 546, 547, 617, 618, 973, 1016, 1020, 1023], "random_st": [4, 5, 6, 7, 10, 12, 14, 19, 20, 21, 24, 25, 26, 27, 30, 31, 38, 42, 43, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 70, 71, 75, 82, 86, 92, 95, 97, 100, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 135, 142, 143, 145, 149, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 178, 179, 183, 189, 196, 197, 200, 201, 203, 204, 205, 209, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 231, 233, 234, 235, 236, 238, 239, 242, 244, 245, 248, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 275, 277, 281, 285, 286, 287, 293, 294, 295, 296, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 320, 327, 329, 330, 331, 337, 338, 342, 343, 347, 351, 353, 373, 376, 380, 383, 384, 392, 396, 397, 400, 401, 403, 404, 408, 419, 422, 423, 425, 428, 432, 434, 436, 437, 438, 439, 443, 444, 445, 447, 454, 459, 473, 476, 477, 480, 482, 488, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 568, 569, 578, 579, 592, 593, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 617, 618, 619, 620, 623, 624, 625, 626, 627, 631, 632, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 659, 661, 662, 663, 664, 672, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 719, 772, 775, 779, 780, 783, 784, 785, 786, 787, 793, 795, 796, 797, 798, 799, 800, 801, 807, 808, 809, 811, 813, 814, 815, 816, 817, 828, 832, 839, 840, 841, 843, 848, 860, 864, 872, 875, 876, 883, 884, 885, 888, 891, 892, 893, 894, 896, 897, 919, 920, 935, 937, 940, 955, 956, 958, 961, 966, 967, 968, 969, 970, 973, 974, 976, 981, 982, 992, 996, 997, 1001, 1005, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "set_output": [4, 119, 164, 168, 225, 240, 304, 305, 374, 418, 427, 428, 430, 432, 434, 449, 453, 467, 468, 469, 470, 481, 489, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 551, 552, 553, 554, 555, 566, 567, 568, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 643, 673, 674, 677, 809, 827, 832, 835, 839, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 881, 1023], "across": [4, 55, 61, 67, 85, 135, 167, 186, 191, 219, 252, 254, 257, 277, 299, 304, 372, 373, 380, 384, 390, 395, 396, 400, 404, 408, 422, 425, 435, 437, 439, 442, 445, 447, 454, 457, 459, 473, 476, 477, 480, 482, 488, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 552, 553, 573, 576, 579, 587, 592, 593, 595, 596, 617, 618, 619, 624, 625, 626, 627, 631, 632, 635, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 661, 663, 664, 670, 671, 674, 675, 676, 677, 678, 679, 680, 689, 690, 702, 715, 741, 772, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 793, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 828, 832, 839, 840, 841, 848, 852, 853, 860, 861, 863, 864, 872, 875, 876, 878, 879, 883, 884, 885, 888, 891, 892, 919, 920, 937, 940, 955, 962, 964, 966, 976, 980, 982, 987, 990, 1001, 1008, 1011, 1014, 1015, 1016, 1017, 1018], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 56, 58, 61, 70, 75, 92, 95, 97, 98, 101, 103, 105, 113, 115, 119, 120, 121, 122, 129, 152, 155, 157, 158, 162, 177, 185, 186, 189, 194, 197, 198, 205, 206, 207, 215, 218, 219, 233, 235, 242, 243, 244, 245, 247, 248, 252, 255, 256, 257, 258, 260, 265, 268, 271, 277, 282, 284, 287, 290, 294, 296, 299, 301, 304, 305, 309, 321, 325, 329, 339, 342, 343, 344, 357, 366, 371, 373, 377, 378, 382, 397, 400, 404, 408, 493, 518, 582, 595, 596, 765, 856, 910, 915, 927, 966, 973, 981, 997], "cv_result": [4, 71, 255, 256, 258, 260, 795, 806, 966], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 58, 60, 70, 71, 72, 73, 74, 75, 78, 82, 86, 103, 109, 112, 118, 119, 121, 122, 125, 128, 129, 136, 137, 142, 143, 146, 161, 164, 166, 167, 168, 169, 170, 173, 181, 188, 189, 192, 197, 199, 203, 205, 213, 215, 226, 231, 232, 235, 239, 246, 250, 255, 257, 258, 259, 260, 261, 262, 265, 266, 268, 269, 270, 271, 272, 273, 275, 284, 285, 286, 293, 294, 295, 296, 301, 304, 305, 306, 309, 310, 311, 312, 317, 318, 320, 321, 329, 337, 342, 343, 347, 353, 366, 371, 373, 376, 383, 384, 390, 391, 393, 394, 395, 397, 399, 401, 403, 405, 413, 415, 417, 422, 428, 432, 434, 437, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 487, 489, 517, 521, 526, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 577, 578, 579, 580, 581, 583, 584, 585, 587, 588, 589, 591, 594, 595, 596, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 726, 739, 740, 741, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 784, 785, 787, 795, 800, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 828, 829, 830, 832, 833, 834, 839, 840, 841, 843, 863, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 922, 955, 958, 962, 964, 969, 972, 974, 976, 980, 987, 995, 997, 999, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "neg_mean_absolute_error": [4, 129, 199, 966], "neg_root_mean_squared_error": [4, 305, 966], "mae": [4, 129, 197, 199, 543, 550, 729, 892, 894, 966, 982, 1015, 1016, 1020, 1021], "test_neg_mean_absolute_error": [4, 199], "rmse": [4, 81, 305, 734, 1019], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 58, 60, 61, 63, 67, 70, 71, 73, 74, 75, 80, 85, 86, 92, 95, 98, 103, 104, 106, 113, 116, 117, 118, 119, 121, 123, 135, 137, 142, 143, 145, 146, 149, 150, 152, 154, 158, 166, 168, 169, 170, 173, 181, 182, 183, 184, 188, 189, 192, 193, 197, 199, 200, 204, 205, 212, 213, 215, 219, 220, 223, 228, 230, 232, 235, 239, 245, 251, 255, 256, 257, 258, 260, 262, 265, 266, 270, 277, 281, 288, 290, 294, 295, 296, 301, 304, 306, 309, 310, 311, 313, 317, 318, 321, 329, 342, 343, 344, 347, 351, 353, 357, 365, 366, 369, 372, 373, 379, 384, 390, 397, 400, 403, 404, 406, 449, 452, 453, 457, 463, 487, 497, 526, 529, 534, 535, 544, 545, 546, 547, 549, 550, 554, 555, 562, 568, 569, 573, 574, 576, 597, 602, 615, 631, 632, 634, 635, 637, 638, 639, 641, 645, 646, 647, 648, 651, 652, 661, 662, 669, 698, 702, 721, 777, 779, 780, 782, 783, 786, 788, 789, 790, 791, 794, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 812, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 840, 841, 842, 843, 844, 845, 853, 859, 863, 871, 881, 882, 883, 884, 885, 888, 896, 907, 927, 934, 956, 966, 967, 968, 969, 974, 982, 992, 996, 997, 999, 1000, 1001, 1008, 1010, 1016, 1017, 1019, 1023], "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 58, 71, 73, 75, 86, 116, 117, 142, 146, 149, 150, 151, 153, 158, 166, 168, 169, 177, 181, 183, 189, 197, 199, 203, 212, 213, 215, 219, 230, 232, 255, 257, 258, 260, 263, 265, 268, 277, 293, 321, 342, 343, 344, 974, 997], "std": [4, 11, 12, 37, 46, 50, 54, 61, 66, 79, 81, 82, 96, 97, 98, 116, 118, 119, 129, 136, 158, 161, 162, 167, 177, 182, 206, 230, 255, 256, 257, 259, 260, 262, 265, 267, 271, 272, 305, 320, 332, 343, 353, 384, 396, 400, 403, 500, 591, 594, 863, 874, 976, 1000, 1016, 1020], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 34, 37, 39, 40, 58, 70, 75, 80, 85, 92, 95, 98, 100, 103, 105, 106, 112, 113, 116, 120, 131, 141, 146, 149, 153, 158, 168, 177, 181, 193, 197, 198, 212, 214, 215, 218, 229, 230, 231, 233, 242, 244, 245, 255, 257, 260, 262, 263, 264, 266, 267, 277, 282, 296, 301, 303, 304, 311, 314, 318, 337, 351, 357, 365, 368, 369, 371, 375, 377, 380, 384, 387, 393, 394, 396, 399, 400, 401, 402, 403, 404, 406, 407, 429, 430, 432, 433, 435, 454, 456, 459, 463, 474, 500, 501, 502, 503, 508, 513, 523, 525, 526, 532, 542, 543, 544, 545, 548, 549, 550, 551, 573, 574, 575, 576, 592, 593, 599, 612, 634, 656, 664, 677, 681, 684, 691, 692, 739, 786, 789, 791, 796, 797, 800, 819, 823, 824, 828, 848, 875, 877, 891, 892, 893, 894, 918, 923, 924, 941, 945, 946, 955, 958, 960, 962, 963, 966, 967, 968, 969, 970, 972, 973, 976, 978, 980, 981, 982, 992, 999, 1001, 1008, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "044": [4, 255, 735, 966], "003": 4, "068": [4, 79, 83, 257], "005": [4, 257, 261, 265, 282, 299, 343, 377], "quit": [4, 53, 57, 86, 113, 135, 146, 167, 168, 195, 215, 265, 312, 342, 357, 376, 383, 396, 404, 961, 963, 968, 990, 1016], "good": [4, 9, 25, 27, 40, 44, 46, 49, 52, 53, 55, 58, 74, 81, 86, 105, 118, 121, 122, 150, 154, 161, 167, 181, 186, 197, 198, 203, 212, 223, 226, 230, 235, 243, 245, 251, 257, 263, 272, 296, 304, 305, 311, 317, 322, 329, 342, 343, 353, 357, 358, 359, 370, 372, 373, 374, 377, 382, 384, 390, 393, 394, 396, 398, 400, 401, 403, 404, 405, 406, 422, 424, 429, 519, 544, 546, 547, 575, 615, 625, 632, 633, 641, 643, 644, 646, 654, 665, 675, 679, 707, 715, 726, 748, 808, 877, 920, 955, 961, 962, 963, 966, 967, 969, 970, 971, 973, 974, 976, 980, 981, 982, 987, 990, 992, 996, 999, 1001, 1014], "trial": [4, 262, 432, 434, 445, 656, 779, 780, 962, 1014], "without": [4, 5, 13, 24, 36, 42, 55, 56, 67, 68, 75, 100, 121, 124, 126, 129, 142, 146, 156, 164, 166, 167, 168, 181, 186, 205, 226, 230, 233, 236, 238, 251, 258, 262, 264, 278, 291, 299, 300, 304, 306, 309, 337, 343, 359, 366, 367, 369, 371, 372, 373, 375, 376, 377, 380, 382, 383, 384, 390, 396, 397, 401, 403, 404, 405, 406, 419, 424, 426, 431, 443, 454, 459, 481, 489, 500, 517, 519, 540, 541, 548, 564, 565, 596, 612, 616, 619, 624, 644, 677, 685, 765, 784, 785, 786, 793, 795, 808, 809, 825, 832, 836, 842, 843, 846, 849, 852, 853, 855, 859, 860, 861, 863, 868, 883, 899, 934, 935, 955, 956, 960, 962, 963, 966, 969, 972, 976, 980, 981, 982, 986, 987, 992, 993, 1001, 1005, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024], "tune": [4, 44, 55, 71, 100, 145, 149, 161, 168, 186, 202, 214, 222, 251, 262, 279, 300, 329, 342, 353, 357, 358, 359, 383, 384, 391, 395, 396, 400, 403, 405, 406, 437, 447, 544, 545, 579, 598, 599, 600, 602, 604, 605, 607, 608, 610, 628, 644, 675, 679, 839, 960, 961, 962, 963, 965, 966, 969, 970, 972, 980, 993, 1003, 1008, 1022, 1024], "just": [4, 31, 70, 86, 95, 119, 146, 187, 194, 219, 231, 257, 264, 268, 277, 293, 329, 342, 343, 353, 366, 370, 371, 372, 373, 375, 376, 379, 382, 383, 384, 393, 396, 397, 400, 403, 405, 406, 408, 453, 518, 520, 527, 531, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 564, 569, 595, 596, 631, 637, 642, 643, 645, 647, 651, 652, 653, 661, 662, 663, 832, 840, 841, 955, 962, 965, 966, 967, 970, 974, 976, 980, 987, 999, 1008, 1012, 1014, 1016, 1020], "had": [4, 9, 47, 122, 154, 299, 305, 312, 353, 371, 372, 404, 407, 429, 956, 966, 990, 992, 1008, 1009, 1015, 1016, 1017, 1018, 1019, 1023], "explicit": [4, 164, 168, 173, 225, 240, 357, 358, 359, 370, 372, 382, 384, 385, 397, 404, 410, 457, 484, 486, 487, 526, 536, 537, 623, 624, 626, 661, 781, 782, 789, 827, 835, 843, 883, 888, 930, 934, 958, 960, 962, 966, 976, 982, 986, 1008, 1012, 1017, 1018, 1021], "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 56, 60, 65, 66, 70, 71, 86, 95, 97, 100, 109, 110, 111, 125, 141, 146, 149, 161, 162, 167, 168, 169, 173, 176, 181, 192, 198, 199, 215, 230, 236, 255, 257, 258, 260, 266, 279, 299, 304, 306, 312, 321, 329, 344, 351, 357, 359, 366, 369, 371, 372, 373, 374, 375, 379, 382, 384, 385, 386, 390, 394, 395, 396, 397, 400, 401, 403, 404, 406, 429, 432, 434, 435, 442, 449, 452, 478, 479, 493, 531, 552, 553, 554, 555, 592, 593, 601, 605, 606, 609, 617, 624, 649, 677, 752, 755, 758, 762, 763, 764, 765, 773, 781, 795, 802, 808, 847, 857, 861, 863, 864, 873, 874, 880, 891, 892, 932, 955, 956, 962, 965, 966, 967, 969, 970, 971, 976, 981, 982, 985, 986, 989, 990, 992, 999, 1000, 1001, 1008, 1009, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "But": [4, 9, 53, 166, 198, 199, 257, 277, 299, 371, 382, 396, 399, 402, 403, 447, 730, 891, 892, 955, 966, 981, 987], "much": [4, 6, 7, 9, 19, 25, 39, 40, 55, 80, 82, 92, 98, 105, 115, 122, 123, 129, 130, 131, 149, 161, 162, 167, 168, 169, 170, 173, 194, 195, 199, 230, 257, 259, 260, 263, 268, 295, 300, 304, 305, 311, 312, 314, 329, 334, 342, 343, 353, 357, 359, 366, 371, 372, 373, 376, 379, 382, 383, 387, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 432, 433, 481, 519, 520, 521, 523, 544, 545, 546, 547, 643, 644, 651, 653, 661, 662, 663, 677, 763, 764, 784, 785, 799, 858, 876, 883, 955, 958, 961, 962, 963, 965, 966, 967, 969, 970, 972, 974, 978, 979, 981, 982, 987, 990, 996, 997, 999, 1000, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "monoton": [4, 25, 108, 133, 164, 168, 215, 229, 310, 394, 546, 547, 617, 620, 621, 679, 691, 859, 871, 885, 888, 963, 967, 976, 981, 1015, 1019, 1023], "relationship": [4, 111, 155, 166, 167, 176, 181, 197, 199, 200, 264, 300, 306, 384, 396, 398, 400, 406, 447, 621, 699, 963, 966, 968, 969, 973, 974, 999, 1013], "case": [4, 7, 8, 25, 27, 37, 49, 52, 55, 57, 61, 66, 71, 72, 81, 86, 100, 103, 113, 115, 122, 123, 129, 143, 145, 146, 149, 156, 167, 168, 181, 183, 186, 188, 197, 198, 199, 202, 205, 211, 213, 214, 215, 226, 230, 231, 232, 236, 247, 251, 254, 256, 257, 258, 260, 263, 264, 266, 277, 284, 295, 299, 301, 304, 306, 309, 312, 342, 343, 344, 351, 353, 357, 358, 359, 365, 366, 369, 371, 372, 373, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 422, 425, 428, 429, 431, 432, 436, 438, 448, 449, 452, 459, 481, 493, 494, 500, 524, 526, 527, 528, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 566, 567, 573, 576, 578, 579, 582, 587, 591, 594, 595, 596, 610, 612, 613, 615, 617, 632, 633, 638, 641, 642, 643, 644, 646, 648, 651, 653, 654, 657, 659, 660, 661, 665, 667, 668, 669, 670, 671, 672, 684, 688, 693, 694, 697, 703, 705, 706, 707, 710, 712, 713, 718, 719, 722, 726, 727, 729, 730, 732, 734, 737, 738, 740, 747, 762, 765, 767, 769, 772, 773, 776, 778, 780, 781, 784, 785, 787, 795, 799, 803, 804, 805, 806, 807, 808, 810, 812, 820, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 843, 850, 852, 853, 856, 857, 858, 861, 862, 863, 864, 867, 873, 874, 875, 876, 883, 885, 888, 891, 892, 898, 899, 909, 920, 921, 934, 955, 956, 958, 960, 961, 963, 964, 965, 967, 968, 969, 970, 972, 973, 976, 980, 981, 982, 986, 987, 989, 990, 992, 1001, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "usual": [4, 40, 78, 79, 81, 121, 122, 124, 129, 166, 168, 183, 197, 198, 251, 254, 257, 266, 267, 300, 312, 329, 353, 357, 358, 369, 371, 373, 379, 382, 383, 384, 393, 396, 397, 400, 401, 403, 404, 405, 435, 441, 523, 525, 527, 532, 544, 545, 592, 593, 615, 625, 643, 644, 651, 653, 661, 662, 663, 677, 710, 742, 787, 807, 811, 883, 920, 955, 956, 958, 961, 962, 963, 965, 966, 967, 970, 971, 972, 973, 976, 980, 981, 982, 992, 998, 999, 1023], "hot": [4, 71, 115, 117, 129, 167, 197, 266, 300, 301, 305, 311, 329, 384, 403, 404, 536, 551, 566, 633, 643, 644, 654, 665, 846, 848, 850, 851, 854, 856, 857, 864, 962, 976, 1016, 1022, 1023], "For": [4, 8, 9, 12, 13, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 55, 57, 58, 60, 67, 73, 80, 86, 91, 96, 113, 115, 117, 122, 123, 125, 127, 142, 143, 146, 149, 151, 156, 161, 162, 167, 168, 181, 185, 186, 197, 198, 201, 202, 205, 214, 215, 218, 220, 223, 226, 227, 229, 230, 231, 239, 247, 254, 257, 258, 264, 272, 275, 277, 287, 293, 295, 296, 301, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 320, 322, 329, 331, 337, 342, 343, 344, 347, 348, 351, 353, 357, 359, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 390, 392, 393, 394, 395, 396, 397, 400, 401, 403, 404, 405, 406, 407, 412, 417, 422, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439, 441, 442, 443, 445, 446, 447, 449, 450, 451, 453, 457, 459, 467, 468, 469, 470, 474, 481, 483, 488, 499, 500, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 566, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 582, 587, 592, 593, 594, 595, 596, 599, 604, 607, 608, 612, 613, 614, 615, 616, 617, 618, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 672, 673, 674, 677, 678, 680, 684, 686, 689, 691, 692, 713, 714, 722, 725, 726, 747, 753, 762, 767, 768, 771, 772, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 795, 803, 804, 805, 806, 807, 808, 810, 812, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 849, 852, 853, 855, 856, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 874, 875, 876, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 903, 909, 929, 950, 955, 956, 958, 959, 960, 961, 962, 963, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 980, 981, 982, 985, 989, 990, 992, 999, 1000, 1001, 1008, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "consist": [4, 7, 26, 32, 37, 56, 57, 70, 80, 90, 92, 95, 119, 125, 132, 146, 152, 154, 157, 162, 197, 215, 232, 263, 266, 295, 304, 309, 312, 337, 343, 353, 357, 364, 366, 368, 371, 373, 377, 378, 379, 380, 383, 384, 385, 394, 396, 398, 402, 403, 404, 406, 414, 415, 417, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 475, 482, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 539, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 576, 596, 612, 613, 614, 615, 620, 623, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 659, 662, 663, 664, 672, 673, 674, 675, 676, 685, 719, 779, 780, 788, 811, 812, 813, 815, 816, 817, 818, 826, 827, 829, 831, 834, 835, 841, 846, 847, 848, 850, 854, 855, 858, 859, 861, 862, 864, 875, 876, 879, 883, 884, 886, 887, 889, 892, 894, 903, 905, 926, 937, 940, 955, 958, 959, 960, 962, 963, 965, 966, 967, 969, 970, 976, 979, 981, 982, 985, 986, 987, 990, 992, 999, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "scale": [4, 5, 12, 25, 27, 37, 40, 43, 46, 47, 56, 58, 61, 71, 72, 79, 82, 86, 97, 100, 101, 126, 146, 149, 150, 151, 154, 155, 156, 158, 164, 168, 173, 177, 178, 185, 197, 199, 211, 212, 213, 215, 217, 220, 224, 226, 232, 247, 254, 257, 258, 259, 264, 294, 295, 296, 298, 299, 307, 310, 313, 322, 324, 326, 329, 340, 353, 356, 357, 363, 364, 365, 368, 371, 376, 380, 382, 383, 384, 395, 396, 397, 401, 403, 405, 406, 431, 432, 435, 436, 442, 449, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 486, 495, 499, 500, 509, 519, 523, 525, 526, 532, 534, 535, 546, 547, 567, 575, 576, 582, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 616, 617, 626, 629, 630, 631, 632, 634, 637, 643, 644, 645, 646, 647, 657, 659, 661, 662, 663, 666, 672, 673, 674, 675, 677, 679, 684, 688, 701, 725, 731, 741, 743, 753, 759, 761, 787, 795, 798, 809, 810, 811, 823, 824, 825, 840, 841, 844, 847, 852, 853, 855, 858, 860, 861, 863, 868, 869, 870, 872, 873, 875, 876, 883, 884, 885, 886, 887, 888, 889, 942, 943, 944, 955, 958, 959, 962, 966, 967, 968, 969, 970, 974, 980, 981, 987, 990, 992, 999, 1000, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "same": [4, 7, 8, 16, 26, 34, 37, 40, 44, 53, 55, 57, 58, 64, 70, 71, 72, 92, 95, 97, 100, 103, 105, 111, 113, 116, 119, 120, 122, 123, 127, 146, 149, 167, 168, 170, 183, 185, 186, 191, 197, 198, 199, 205, 215, 235, 236, 247, 252, 253, 254, 255, 257, 258, 260, 262, 263, 265, 270, 277, 282, 295, 299, 300, 302, 304, 305, 309, 311, 320, 329, 337, 342, 343, 344, 351, 353, 357, 358, 359, 365, 366, 368, 370, 371, 373, 375, 377, 380, 382, 383, 384, 385, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 416, 419, 423, 424, 431, 435, 441, 450, 454, 455, 456, 457, 458, 459, 460, 461, 463, 478, 480, 481, 483, 489, 493, 494, 516, 517, 520, 521, 522, 523, 524, 525, 528, 532, 534, 536, 537, 538, 539, 542, 544, 545, 546, 547, 549, 550, 552, 553, 574, 575, 587, 588, 591, 595, 596, 598, 607, 612, 613, 614, 617, 618, 631, 634, 637, 638, 640, 643, 644, 648, 651, 652, 653, 657, 658, 659, 660, 661, 662, 663, 669, 672, 684, 689, 690, 697, 698, 700, 702, 710, 715, 716, 720, 739, 740, 741, 762, 763, 764, 770, 772, 774, 776, 777, 779, 780, 781, 782, 784, 785, 787, 789, 790, 795, 799, 800, 804, 805, 806, 807, 808, 809, 810, 825, 826, 827, 831, 833, 834, 835, 846, 847, 848, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 872, 883, 884, 891, 893, 905, 909, 920, 932, 937, 940, 941, 951, 955, 956, 958, 960, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 976, 980, 981, 982, 987, 996, 1001, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "minmaxscal": [4, 5, 72, 142, 173, 219, 294, 311, 359, 397, 449, 869, 956, 976, 1010, 1013, 1016, 1018, 1019, 1020, 1024], "although": [4, 9, 25, 116, 129, 166, 194, 215, 226, 244, 275, 353, 359, 373, 384, 396, 397, 401, 404, 481, 798, 801, 854, 965, 967, 968, 969, 972, 982, 992, 999, 1000, 1001, 1008, 1016, 1023], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 40, 46, 53, 55, 57, 70, 72, 73, 86, 106, 115, 118, 124, 129, 146, 155, 167, 168, 181, 194, 197, 203, 215, 218, 219, 220, 223, 226, 229, 230, 231, 233, 244, 245, 252, 257, 259, 260, 264, 266, 267, 275, 277, 290, 299, 301, 303, 305, 306, 312, 313, 320, 321, 327, 329, 337, 339, 342, 343, 344, 357, 365, 369, 371, 372, 373, 375, 379, 383, 384, 390, 394, 395, 396, 397, 400, 401, 403, 404, 405, 406, 419, 425, 427, 431, 432, 434, 435, 439, 441, 452, 458, 464, 472, 484, 488, 493, 512, 520, 522, 523, 524, 526, 529, 531, 534, 535, 542, 543, 544, 545, 546, 547, 549, 550, 566, 567, 568, 573, 574, 576, 578, 579, 582, 587, 591, 595, 617, 623, 634, 635, 636, 639, 640, 641, 644, 656, 667, 668, 683, 685, 687, 692, 712, 713, 714, 718, 720, 722, 727, 730, 762, 767, 768, 771, 772, 776, 781, 784, 785, 795, 840, 844, 845, 846, 848, 850, 852, 855, 856, 857, 860, 863, 864, 872, 875, 876, 880, 883, 884, 891, 892, 893, 894, 898, 903, 907, 920, 923, 924, 932, 934, 950, 955, 956, 958, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 974, 976, 980, 981, 982, 1001, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 32, 37, 40, 42, 43, 44, 45, 46, 48, 53, 54, 55, 60, 62, 66, 71, 73, 75, 81, 86, 95, 98, 100, 102, 106, 113, 114, 115, 116, 119, 122, 123, 125, 127, 128, 138, 145, 146, 149, 151, 153, 157, 161, 167, 168, 169, 170, 177, 182, 183, 186, 187, 192, 198, 199, 201, 205, 211, 212, 215, 218, 219, 222, 226, 229, 231, 236, 242, 247, 248, 251, 252, 255, 257, 258, 260, 263, 264, 265, 266, 268, 269, 272, 277, 279, 283, 293, 294, 295, 299, 300, 301, 304, 309, 311, 313, 314, 317, 320, 322, 329, 333, 334, 337, 342, 344, 349, 350, 357, 358, 359, 365, 366, 368, 371, 373, 375, 376, 377, 379, 382, 383, 384, 385, 390, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 419, 425, 426, 428, 430, 431, 432, 435, 436, 437, 438, 439, 440, 442, 444, 447, 449, 452, 454, 455, 456, 457, 458, 459, 460, 461, 464, 474, 493, 494, 496, 498, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 564, 565, 566, 567, 569, 573, 574, 576, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 615, 616, 617, 619, 621, 625, 628, 637, 638, 643, 649, 650, 651, 652, 661, 662, 663, 671, 674, 675, 676, 677, 678, 679, 680, 693, 695, 697, 702, 709, 710, 712, 713, 714, 715, 716, 720, 721, 722, 738, 740, 741, 748, 755, 758, 762, 763, 764, 765, 767, 768, 769, 771, 775, 776, 779, 780, 781, 783, 784, 785, 786, 791, 795, 796, 797, 798, 800, 801, 804, 810, 811, 812, 814, 815, 816, 817, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 847, 848, 856, 857, 860, 861, 864, 872, 876, 880, 883, 885, 888, 891, 892, 893, 894, 895, 896, 903, 904, 919, 920, 922, 926, 931, 937, 940, 956, 958, 960, 962, 963, 965, 966, 967, 969, 970, 971, 972, 973, 974, 976, 978, 980, 981, 982, 986, 987, 989, 992, 996, 997, 999, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 71, 82, 86, 115, 117, 122, 146, 150, 153, 156, 167, 168, 170, 177, 183, 190, 197, 203, 205, 215, 232, 243, 254, 257, 258, 263, 275, 277, 294, 295, 296, 299, 303, 304, 305, 306, 319, 329, 337, 342, 343, 344, 347, 353, 357, 358, 366, 373, 376, 379, 382, 383, 384, 390, 393, 394, 396, 400, 401, 402, 403, 404, 406, 409, 417, 432, 433, 446, 450, 460, 467, 468, 469, 519, 521, 537, 539, 541, 543, 545, 547, 550, 553, 555, 573, 576, 592, 593, 596, 617, 618, 620, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 657, 658, 661, 662, 663, 664, 665, 674, 684, 694, 697, 698, 706, 707, 708, 730, 747, 769, 772, 776, 781, 795, 807, 811, 816, 817, 826, 829, 831, 833, 834, 835, 841, 852, 853, 861, 863, 864, 868, 869, 871, 872, 873, 874, 884, 886, 889, 892, 894, 930, 956, 958, 959, 960, 961, 962, 963, 964, 966, 967, 969, 971, 973, 976, 981, 982, 990, 1000, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1024], "compar": [4, 5, 19, 24, 25, 27, 36, 37, 43, 49, 54, 55, 57, 58, 64, 68, 72, 81, 84, 86, 87, 98, 103, 105, 108, 110, 111, 113, 118, 119, 122, 127, 129, 133, 146, 153, 161, 162, 164, 167, 169, 170, 175, 179, 181, 185, 186, 192, 194, 197, 200, 203, 205, 207, 214, 215, 216, 218, 219, 222, 225, 228, 231, 236, 238, 240, 244, 245, 250, 252, 254, 262, 264, 266, 268, 273, 278, 282, 286, 287, 291, 292, 297, 298, 300, 304, 307, 311, 342, 343, 344, 351, 353, 359, 366, 368, 371, 373, 393, 394, 396, 398, 399, 400, 401, 403, 405, 406, 425, 426, 427, 429, 430, 431, 433, 434, 435, 437, 443, 448, 449, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 475, 481, 487, 489, 497, 499, 507, 509, 513, 516, 522, 536, 537, 546, 547, 548, 550, 556, 616, 624, 629, 630, 638, 640, 642, 643, 648, 651, 653, 661, 662, 669, 680, 690, 697, 700, 715, 722, 727, 770, 780, 781, 795, 806, 809, 816, 825, 829, 832, 836, 840, 843, 844, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 864, 869, 872, 885, 887, 888, 955, 958, 959, 960, 962, 963, 965, 966, 967, 968, 969, 970, 972, 976, 977, 980, 981, 982, 985, 986, 999, 1000, 1008, 1010, 1015, 1016, 1021], "onehotencod": [4, 71, 115, 119, 129, 167, 168, 197, 215, 228, 237, 239, 305, 310, 312, 365, 384, 397, 403, 451, 452, 551, 566, 567, 846, 850, 851, 854, 857, 864, 976, 1009, 1012, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 71, 73, 75, 86, 115, 129, 131, 132, 135, 137, 145, 146, 149, 161, 164, 166, 167, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 226, 227, 228, 229, 234, 237, 239, 253, 260, 265, 266, 270, 271, 275, 296, 300, 301, 304, 306, 309, 310, 311, 312, 313, 321, 342, 353, 357, 359, 360, 370, 371, 373, 377, 379, 380, 383, 384, 397, 403, 423, 450, 522, 524, 527, 528, 530, 531, 533, 552, 553, 554, 555, 582, 616, 617, 619, 620, 623, 625, 626, 627, 628, 685, 686, 772, 795, 804, 805, 806, 814, 815, 816, 817, 841, 858, 862, 883, 884, 887, 890, 915, 958, 961, 962, 966, 967, 972, 974, 976, 980, 996, 997, 999, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "ridgecv": [4, 75, 129, 146, 167, 234, 384, 403, 553, 628, 657, 660, 962, 1008, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 138, 141, 142, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 281, 282, 283, 284, 286, 287, 288, 289, 290, 293, 296, 299, 300, 301, 302, 303, 304, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 348, 349, 350, 351, 353, 357, 364, 365, 366, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 383, 384, 387, 389, 390, 392, 393, 396, 397, 400, 401, 402, 403, 404, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 445, 447, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 470, 475, 478, 479, 481, 488, 491, 493, 494, 516, 519, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 554, 555, 566, 567, 573, 574, 576, 612, 613, 614, 615, 616, 617, 618, 628, 631, 632, 634, 637, 638, 642, 643, 644, 645, 646, 647, 648, 651, 653, 655, 657, 661, 662, 663, 669, 673, 676, 677, 678, 680, 684, 687, 688, 691, 692, 694, 697, 699, 710, 711, 713, 714, 718, 719, 722, 723, 738, 740, 757, 763, 765, 766, 767, 768, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 809, 811, 812, 815, 816, 818, 819, 820, 821, 822, 823, 824, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 846, 847, 850, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 883, 885, 886, 888, 889, 891, 906, 918, 920, 924, 925, 926, 928, 929, 935, 937, 940, 953, 955, 956, 961, 962, 964, 966, 967, 969, 972, 976, 978, 981, 982, 985, 987, 989, 992, 995, 996, 997, 999, 1000, 1001, 1008, 1011, 1012, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 138, 141, 142, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 235, 237, 242, 243, 244, 245, 246, 247, 248, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 281, 282, 283, 284, 286, 287, 288, 289, 290, 293, 296, 299, 300, 301, 302, 303, 304, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 348, 349, 350, 351, 353, 357, 365, 366, 371, 373, 376, 377, 380, 382, 384, 393, 396, 397, 400, 401, 402, 403, 404, 406, 409, 411, 414, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 445, 447, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 470, 481, 482, 493, 494, 505, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 542, 543, 544, 545, 546, 548, 549, 550, 551, 554, 555, 566, 567, 570, 571, 573, 574, 578, 579, 582, 591, 594, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 653, 655, 656, 657, 659, 660, 661, 662, 663, 666, 667, 668, 669, 676, 677, 680, 687, 688, 691, 692, 694, 697, 698, 699, 700, 710, 711, 713, 714, 718, 719, 722, 723, 725, 738, 740, 747, 753, 757, 762, 765, 766, 767, 768, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 809, 810, 811, 812, 815, 816, 818, 819, 820, 821, 822, 823, 824, 828, 829, 830, 831, 833, 834, 835, 839, 840, 847, 848, 850, 856, 857, 858, 859, 860, 862, 863, 864, 871, 872, 875, 876, 878, 879, 880, 883, 885, 886, 888, 889, 891, 892, 893, 894, 901, 903, 904, 906, 908, 909, 918, 920, 925, 928, 929, 931, 935, 937, 940, 942, 943, 944, 955, 956, 961, 962, 964, 966, 967, 969, 970, 972, 976, 977, 978, 980, 981, 982, 992, 996, 997, 999, 1000, 1001, 1009, 1011, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "one_hot_encod": [4, 119], "handle_unknown": [4, 71, 115, 119, 129, 168, 169, 228, 237, 239, 305, 310, 313, 856, 857, 976, 1012, 1016, 1020, 1021], "ignor": [4, 6, 8, 17, 44, 49, 55, 62, 71, 112, 115, 119, 126, 129, 168, 185, 189, 197, 206, 212, 228, 237, 239, 248, 294, 295, 304, 305, 310, 313, 334, 343, 348, 371, 373, 375, 377, 384, 387, 396, 397, 403, 404, 414, 415, 419, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 445, 446, 449, 452, 454, 455, 456, 457, 458, 459, 460, 461, 468, 469, 473, 488, 493, 494, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 536, 542, 543, 544, 545, 548, 549, 550, 551, 564, 566, 567, 568, 573, 574, 575, 576, 587, 588, 596, 612, 613, 614, 615, 617, 618, 620, 624, 628, 634, 635, 636, 639, 640, 641, 643, 649, 650, 661, 662, 663, 673, 674, 675, 676, 677, 692, 698, 699, 710, 713, 714, 722, 739, 740, 747, 753, 758, 762, 767, 768, 771, 772, 779, 780, 782, 783, 784, 786, 788, 789, 790, 791, 794, 796, 797, 798, 799, 800, 801, 802, 827, 828, 829, 831, 832, 835, 842, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 875, 876, 883, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 917, 941, 962, 963, 966, 968, 972, 976, 981, 997, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023], "sparse_output": [4, 119, 239, 305, 313, 551, 850, 854, 856, 867, 976, 1023], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 37, 40, 42, 45, 52, 56, 60, 65, 75, 82, 86, 95, 97, 98, 100, 101, 102, 104, 105, 110, 112, 113, 118, 122, 125, 126, 128, 129, 130, 146, 149, 152, 154, 155, 156, 157, 158, 161, 162, 167, 176, 177, 178, 179, 181, 182, 183, 185, 186, 191, 192, 194, 195, 197, 198, 199, 201, 202, 206, 209, 210, 215, 218, 219, 222, 231, 232, 238, 242, 257, 258, 259, 260, 261, 264, 265, 267, 269, 270, 272, 275, 277, 280, 282, 285, 287, 293, 295, 299, 300, 301, 302, 304, 306, 310, 312, 313, 319, 321, 326, 327, 330, 331, 334, 338, 339, 342, 357, 366, 373, 377, 382, 398, 399, 401, 403, 405, 406, 408, 431, 456, 457, 463, 512, 516, 518, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 545, 580, 581, 583, 596, 598, 600, 601, 608, 616, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 672, 707, 732, 818, 819, 820, 822, 840, 841, 879, 891, 892, 893, 894, 955, 961, 962, 966, 968, 970, 974, 979, 980, 981, 982, 996, 999, 1001, 1005, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1020, 1021, 1022, 1023, 1024], "logspac": [4, 12, 73, 78, 103, 135, 136, 146, 150, 155, 167, 190, 201, 202, 230, 232, 246, 258, 270, 272, 281, 293, 301, 304, 329, 337, 961, 962, 996, 997, 999], "naive_linear_pipelin": 4, "142": [4, 58, 403], "014": [4, 58, 322, 323, 343, 377], "184": [4, 197, 296, 377, 999], "020": [4, 340, 343, 974], "three": [4, 7, 26, 40, 41, 46, 55, 58, 78, 90, 91, 110, 115, 116, 119, 121, 130, 131, 132, 143, 157, 167, 181, 189, 194, 197, 199, 206, 208, 232, 242, 245, 305, 306, 310, 333, 358, 364, 368, 375, 387, 393, 396, 400, 401, 402, 404, 436, 447, 483, 694, 922, 959, 961, 962, 963, 966, 969, 976, 980, 981, 985, 992, 1000, 1008], "higher": [4, 57, 80, 98, 103, 113, 115, 122, 125, 149, 151, 156, 157, 167, 168, 169, 173, 197, 198, 215, 222, 223, 248, 251, 255, 257, 260, 271, 282, 304, 329, 342, 343, 344, 353, 357, 366, 369, 373, 393, 396, 398, 403, 405, 406, 407, 429, 433, 434, 456, 463, 494, 517, 524, 528, 533, 538, 539, 542, 543, 544, 545, 546, 547, 549, 550, 551, 558, 573, 576, 592, 593, 604, 612, 616, 620, 622, 631, 632, 637, 638, 645, 646, 647, 648, 661, 663, 664, 689, 708, 712, 736, 769, 779, 781, 784, 785, 787, 795, 802, 807, 810, 829, 832, 858, 875, 876, 877, 885, 886, 887, 888, 889, 896, 958, 962, 963, 965, 966, 969, 973, 976, 980, 981, 999, 1001, 1009, 1014, 1016, 1023], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 30, 46, 47, 48, 51, 56, 58, 74, 75, 95, 97, 98, 105, 127, 142, 143, 149, 151, 153, 154, 161, 162, 168, 173, 185, 186, 218, 219, 220, 222, 223, 230, 231, 232, 248, 254, 260, 285, 296, 300, 304, 318, 335, 342, 344, 353, 366, 368, 370, 371, 373, 375, 376, 382, 384, 390, 393, 396, 397, 400, 401, 403, 404, 406, 407, 408, 409, 419, 426, 428, 429, 430, 431, 432, 435, 444, 448, 449, 450, 460, 467, 468, 469, 478, 479, 480, 486, 504, 516, 519, 520, 522, 523, 524, 525, 526, 528, 529, 538, 539, 540, 541, 544, 546, 547, 548, 550, 552, 553, 554, 555, 558, 561, 566, 569, 579, 592, 593, 599, 615, 617, 623, 626, 627, 628, 634, 656, 677, 681, 686, 712, 747, 753, 808, 829, 843, 847, 848, 851, 852, 856, 857, 859, 860, 861, 863, 872, 875, 876, 877, 880, 885, 888, 901, 903, 904, 908, 909, 937, 940, 959, 960, 962, 963, 965, 966, 969, 972, 977, 978, 979, 980, 983, 986, 990, 992, 1001, 1011, 1012, 1014, 1016, 1018, 1020, 1022, 1024], "mere": [4, 257, 384, 810, 980], "min": [4, 9, 10, 11, 12, 13, 25, 27, 31, 52, 58, 75, 90, 95, 98, 112, 118, 121, 122, 127, 138, 151, 153, 154, 155, 162, 167, 179, 185, 186, 192, 199, 200, 203, 211, 219, 230, 231, 233, 275, 283, 284, 290, 293, 295, 299, 301, 302, 304, 322, 328, 335, 338, 380, 396, 399, 401, 467, 468, 469, 470, 497, 519, 520, 523, 525, 526, 534, 535, 548, 612, 616, 617, 639, 640, 641, 642, 667, 668, 689, 725, 741, 764, 784, 785, 832, 840, 841, 853, 862, 869, 920, 931, 962, 966, 969, 976, 1014, 1017, 1019, 1020, 1023], "properli": [4, 25, 55, 126, 154, 252, 309, 359, 369, 371, 375, 379, 387, 402, 883, 884, 885, 886, 887, 888, 889, 955, 1011, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "automat": [4, 8, 12, 46, 63, 65, 71, 103, 135, 145, 176, 200, 242, 243, 255, 258, 299, 306, 310, 314, 321, 331, 358, 360, 366, 369, 371, 373, 375, 379, 384, 387, 392, 396, 397, 398, 401, 403, 404, 405, 418, 435, 437, 441, 447, 449, 450, 452, 481, 484, 500, 526, 534, 536, 542, 546, 549, 568, 573, 576, 579, 587, 628, 630, 631, 632, 637, 638, 643, 644, 645, 646, 647, 648, 651, 652, 653, 657, 659, 660, 661, 663, 666, 669, 672, 673, 676, 680, 783, 798, 801, 809, 819, 840, 841, 844, 845, 847, 856, 857, 864, 875, 876, 883, 884, 885, 888, 891, 893, 897, 909, 937, 940, 955, 957, 960, 965, 970, 976, 980, 982, 986, 987, 996, 1008, 1011, 1012, 1013, 1019, 1022, 1023, 1024], "term": [4, 13, 14, 25, 32, 58, 100, 113, 119, 122, 154, 166, 181, 185, 186, 197, 199, 201, 211, 214, 215, 255, 259, 277, 293, 312, 337, 342, 344, 359, 360, 371, 373, 375, 382, 390, 394, 395, 396, 398, 400, 401, 403, 406, 428, 432, 434, 437, 444, 447, 509, 520, 523, 525, 529, 532, 534, 573, 574, 575, 576, 589, 592, 593, 617, 618, 625, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 657, 658, 659, 660, 661, 663, 665, 672, 680, 840, 841, 858, 862, 865, 883, 884, 885, 886, 887, 888, 889, 955, 957, 960, 961, 962, 963, 966, 967, 968, 970, 971, 976, 980, 981, 992, 1001, 1016, 1022, 1023, 1024], "raw": [4, 12, 14, 37, 81, 97, 129, 154, 167, 173, 296, 306, 319, 344, 357, 366, 379, 384, 394, 395, 396, 398, 401, 404, 454, 459, 486, 487, 488, 544, 545, 546, 548, 567, 573, 574, 575, 576, 619, 662, 675, 679, 690, 770, 829, 887, 963, 966, 970, 972, 973, 976, 979, 998, 1000, 1009, 1013, 1016, 1019], "recogn": [4, 29, 35, 86, 117, 164, 198, 312, 377, 396, 404, 487, 682, 698, 809, 888, 966, 992], "increas": [4, 7, 14, 26, 37, 43, 55, 57, 58, 61, 75, 98, 111, 113, 118, 126, 142, 149, 153, 154, 155, 158, 167, 168, 173, 177, 179, 188, 197, 198, 199, 201, 215, 223, 230, 243, 244, 257, 258, 259, 264, 270, 293, 300, 301, 304, 311, 318, 329, 337, 343, 344, 347, 357, 358, 359, 370, 379, 380, 394, 396, 398, 401, 403, 404, 407, 425, 429, 431, 437, 448, 456, 457, 463, 517, 521, 538, 539, 544, 545, 546, 547, 552, 553, 573, 576, 612, 620, 621, 622, 630, 635, 636, 639, 640, 641, 643, 644, 651, 653, 661, 662, 663, 667, 668, 670, 671, 677, 691, 692, 697, 766, 773, 784, 785, 812, 831, 833, 834, 835, 838, 840, 841, 857, 883, 884, 920, 955, 957, 961, 962, 963, 965, 966, 969, 976, 980, 981, 982, 990, 1008, 1010, 1013, 1017, 1019, 1020, 1023], "strong": [4, 164, 166, 167, 175, 190, 194, 201, 203, 216, 232, 306, 395, 401, 403, 406, 509, 634, 657, 959, 960, 962, 963, 965, 973, 981, 999], "similar": [4, 5, 7, 12, 17, 25, 26, 37, 49, 51, 57, 60, 75, 86, 95, 99, 122, 145, 149, 156, 166, 167, 168, 169, 181, 197, 199, 211, 218, 220, 221, 222, 226, 232, 248, 254, 257, 260, 263, 264, 265, 275, 277, 299, 312, 328, 337, 343, 344, 353, 357, 363, 365, 367, 369, 370, 371, 373, 376, 377, 380, 382, 384, 390, 393, 394, 396, 399, 400, 401, 403, 404, 405, 406, 407, 425, 426, 428, 429, 430, 435, 437, 439, 440, 488, 493, 494, 521, 567, 574, 575, 576, 595, 662, 677, 680, 688, 690, 700, 704, 709, 712, 713, 715, 718, 722, 724, 739, 744, 745, 770, 774, 775, 778, 779, 780, 805, 810, 855, 876, 879, 883, 884, 885, 886, 904, 955, 958, 959, 961, 962, 963, 965, 967, 969, 970, 972, 973, 976, 978, 979, 980, 981, 982, 986, 987, 992, 1000, 1003, 1008, 1012, 1013, 1014, 1016, 1020, 1021], "magnitud": [4, 105, 112, 150, 162, 167, 214, 262, 299, 304, 312, 357, 366, 377, 396, 403, 406, 598, 637, 689, 863, 962, 966, 970, 976, 980, 982, 1010, 1017], "discret": [4, 46, 105, 108, 133, 148, 159, 164, 168, 197, 215, 298, 302, 307, 359, 363, 366, 367, 375, 383, 384, 396, 401, 403, 404, 406, 423, 424, 433, 437, 445, 446, 447, 477, 499, 500, 505, 507, 538, 544, 556, 573, 574, 577, 580, 581, 584, 585, 592, 593, 595, 596, 597, 601, 602, 603, 642, 643, 726, 778, 781, 792, 809, 818, 819, 822, 844, 848, 856, 857, 860, 863, 872, 883, 888, 891, 892, 929, 955, 962, 963, 964, 966, 967, 969, 982, 986, 992, 1003, 1010, 1013, 1021, 1022, 1023], "manner": [4, 75, 95, 143, 168, 173, 244, 313, 314, 358, 371, 377, 396, 401, 403, 404, 694, 823, 824, 955, 966, 982, 1011, 1018], "uniqu": [4, 16, 24, 30, 42, 47, 48, 57, 58, 63, 67, 116, 117, 123, 124, 167, 169, 181, 212, 215, 244, 266, 286, 305, 306, 320, 342, 343, 344, 365, 373, 380, 384, 396, 397, 400, 403, 404, 425, 435, 439, 441, 449, 452, 481, 534, 535, 536, 538, 539, 542, 543, 544, 545, 546, 547, 549, 550, 551, 595, 618, 619, 620, 651, 653, 661, 682, 694, 738, 766, 781, 783, 795, 806, 811, 812, 815, 821, 830, 835, 840, 854, 856, 857, 864, 867, 883, 885, 891, 892, 893, 894, 908, 920, 929, 930, 962, 967, 976, 990, 999, 1016, 1019, 1020, 1022, 1023, 1024], "decid": [4, 11, 57, 60, 71, 248, 254, 257, 264, 366, 371, 385, 404, 406, 435, 442, 544, 545, 596, 620, 631, 632, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 656, 666, 669, 779, 825, 826, 827, 829, 831, 833, 834, 835, 846, 965, 972, 990, 1021, 1024], "therebi": [4, 167, 400, 403, 958, 1018], "assumpt": [4, 9, 25, 27, 36, 68, 78, 79, 98, 154, 164, 166, 197, 226, 299, 377, 382, 383, 386, 394, 395, 396, 398, 400, 401, 404, 406, 432, 436, 438, 473, 488, 497, 517, 519, 526, 635, 639, 780, 781, 784, 785, 795, 820, 875, 876, 960, 962, 966, 967, 968, 969, 971, 972, 973, 976, 979, 982, 1015, 1021], "impli": [4, 149, 342, 343, 344, 401, 403, 406, 459, 558, 567, 595, 596, 607, 719, 907, 962, 963, 1001, 1019], "give": [4, 12, 13, 24, 25, 39, 44, 49, 60, 62, 64, 70, 71, 75, 97, 121, 149, 154, 158, 161, 167, 168, 186, 188, 194, 197, 198, 199, 226, 248, 254, 259, 266, 279, 283, 286, 296, 312, 313, 321, 357, 359, 366, 368, 370, 371, 373, 377, 379, 382, 383, 384, 385, 390, 393, 394, 395, 396, 397, 398, 401, 403, 404, 408, 419, 431, 432, 434, 436, 444, 457, 481, 484, 488, 518, 523, 534, 535, 536, 537, 542, 543, 549, 550, 551, 578, 579, 582, 592, 593, 623, 632, 646, 650, 661, 705, 714, 720, 723, 776, 781, 784, 785, 795, 804, 805, 806, 808, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 860, 861, 863, 864, 872, 962, 966, 969, 970, 971, 973, 974, 976, 980, 981, 982, 986, 990, 992, 994, 999, 1000, 1001, 1008, 1012, 1015, 1016, 1018, 1019, 1020, 1022, 1024], "lot": [4, 82, 167, 366, 371, 372, 373, 379, 401, 403, 784, 785, 875, 876, 955, 978, 980, 981, 986, 987, 990, 1000, 1001, 1008, 1013, 1015, 1016, 1017, 1018, 1020], "addit": [4, 5, 7, 12, 13, 14, 66, 71, 82, 95, 98, 110, 114, 116, 119, 120, 145, 154, 155, 156, 162, 167, 168, 176, 181, 186, 198, 199, 222, 236, 259, 266, 271, 275, 299, 310, 311, 319, 344, 349, 353, 357, 358, 363, 364, 365, 366, 367, 369, 370, 371, 373, 376, 377, 379, 382, 383, 385, 387, 390, 395, 396, 398, 400, 401, 404, 405, 406, 407, 418, 426, 427, 429, 430, 431, 435, 442, 454, 459, 481, 488, 517, 519, 521, 522, 524, 526, 527, 528, 534, 538, 539, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 567, 568, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 596, 597, 604, 613, 615, 616, 620, 623, 624, 625, 626, 627, 628, 629, 630, 655, 672, 673, 677, 683, 684, 687, 726, 742, 743, 772, 774, 779, 780, 787, 812, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 865, 875, 876, 883, 884, 914, 920, 934, 955, 960, 962, 966, 967, 969, 970, 973, 976, 978, 979, 980, 981, 982, 986, 992, 1003, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "level": [4, 9, 11, 12, 16, 27, 41, 53, 95, 115, 118, 138, 146, 148, 153, 154, 156, 159, 164, 167, 168, 208, 209, 210, 211, 212, 215, 226, 230, 231, 246, 257, 260, 266, 267, 283, 290, 327, 328, 330, 331, 333, 335, 343, 351, 357, 366, 368, 369, 371, 377, 384, 386, 387, 394, 401, 404, 410, 439, 453, 478, 479, 488, 506, 516, 521, 522, 532, 546, 547, 552, 553, 596, 607, 610, 651, 652, 653, 661, 662, 663, 672, 675, 677, 679, 685, 687, 701, 707, 712, 769, 804, 805, 806, 808, 811, 812, 839, 840, 841, 881, 896, 955, 962, 966, 967, 969, 974, 980, 982, 986, 987, 1001, 1011, 1019, 1022, 1023, 1024], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": 4, "011": [4, 265, 277, 343, 377], "131": [4, 13, 56, 110, 377, 966, 1009], "rate": [4, 109, 114, 119, 141, 168, 197, 204, 215, 230, 235, 254, 257, 264, 266, 267, 294, 295, 296, 359, 371, 396, 397, 401, 405, 431, 451, 521, 538, 539, 544, 545, 546, 547, 577, 580, 581, 583, 584, 585, 591, 629, 630, 653, 661, 662, 663, 677, 683, 687, 711, 766, 773, 839, 840, 841, 877, 955, 962, 963, 966, 969, 970, 980, 982, 990, 1012, 1016, 1017], "better": [4, 5, 9, 19, 24, 31, 50, 55, 74, 75, 78, 79, 80, 81, 86, 90, 95, 98, 113, 121, 122, 129, 141, 153, 154, 155, 157, 158, 161, 169, 177, 181, 183, 186, 197, 198, 199, 205, 212, 214, 215, 222, 231, 232, 247, 251, 257, 259, 260, 263, 266, 267, 296, 303, 304, 313, 314, 329, 342, 343, 344, 347, 353, 357, 366, 370, 371, 372, 373, 375, 376, 377, 379, 384, 386, 390, 394, 396, 398, 400, 401, 402, 403, 404, 406, 434, 435, 523, 525, 532, 544, 545, 546, 547, 592, 593, 615, 656, 662, 677, 694, 709, 718, 723, 726, 747, 780, 808, 818, 819, 820, 821, 822, 823, 824, 829, 840, 841, 860, 861, 864, 872, 875, 876, 883, 884, 934, 955, 956, 958, 959, 960, 962, 963, 965, 966, 968, 969, 970, 974, 976, 979, 980, 982, 987, 989, 990, 994, 996, 1001, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "confirm": [4, 86, 113, 119, 122, 169, 197, 199, 260, 263, 266, 304, 344, 375, 955, 976, 1016], "progress": [4, 7, 8, 95, 132, 146, 162, 190, 282, 313, 368, 371, 375, 376, 385, 387, 392, 396, 544, 545, 677, 812, 814, 817, 832, 840, 841, 990, 999, 1001, 1008, 1010, 1017, 1022], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 60, 62, 80, 81, 82, 85, 92, 98, 101, 122, 127, 135, 154, 161, 167, 168, 169, 186, 197, 198, 199, 202, 205, 215, 222, 226, 232, 242, 259, 260, 263, 264, 266, 267, 272, 277, 295, 299, 312, 317, 320, 329, 339, 342, 344, 353, 357, 366, 370, 371, 373, 376, 377, 379, 382, 383, 384, 390, 394, 396, 398, 400, 401, 402, 403, 404, 405, 406, 427, 432, 437, 447, 456, 457, 463, 485, 489, 495, 542, 543, 546, 547, 549, 550, 552, 553, 574, 575, 607, 635, 636, 639, 640, 641, 649, 667, 668, 670, 676, 677, 680, 690, 727, 730, 774, 779, 781, 789, 791, 795, 798, 801, 823, 824, 848, 852, 853, 854, 863, 875, 876, 885, 888, 891, 892, 893, 894, 920, 955, 958, 959, 961, 962, 963, 964, 965, 966, 969, 970, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 985, 986, 987, 989, 990, 999, 1000, 1008, 1013, 1014, 1016, 1019, 1021, 1023, 1024], "new": [4, 7, 8, 10, 50, 56, 58, 60, 70, 71, 103, 109, 112, 114, 115, 122, 128, 129, 143, 146, 149, 155, 162, 169, 170, 197, 203, 211, 226, 256, 259, 264, 281, 283, 305, 310, 313, 318, 321, 328, 343, 353, 358, 359, 365, 366, 368, 369, 370, 373, 374, 375, 377, 379, 380, 383, 384, 385, 387, 394, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 485, 486, 487, 489, 490, 493, 494, 495, 497, 508, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 566, 567, 568, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 686, 687, 689, 693, 698, 699, 703, 706, 707, 708, 709, 711, 712, 713, 714, 715, 718, 723, 724, 725, 727, 730, 737, 738, 741, 745, 750, 751, 753, 762, 766, 767, 768, 769, 771, 772, 773, 779, 780, 781, 784, 785, 787, 794, 795, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 869, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 901, 903, 904, 906, 914, 915, 919, 920, 929, 932, 934, 936, 941, 947, 953, 955, 956, 958, 962, 966, 967, 969, 970, 971, 972, 976, 978, 979, 980, 981, 987, 990, 992, 993, 996, 999, 1001, 1006, 1010, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 366, 371, 963, 985], "1440": 4, "caus": [4, 25, 27, 122, 150, 167, 195, 197, 202, 215, 306, 344, 353, 369, 376, 394, 396, 401, 402, 404, 406, 428, 432, 434, 444, 494, 517, 567, 574, 595, 596, 818, 819, 820, 822, 847, 856, 858, 861, 862, 903, 904, 955, 956, 962, 966, 974, 976, 979, 987, 992, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024], "signific": [4, 55, 122, 142, 164, 215, 250, 257, 273, 275, 277, 342, 353, 365, 366, 382, 396, 399, 400, 403, 489, 517, 519, 534, 535, 612, 643, 644, 651, 653, 661, 662, 663, 800, 808, 883, 885, 886, 887, 888, 889, 965, 966, 969, 1008, 1010, 1011, 1012, 1016], "overfit": [4, 115, 122, 164, 168, 169, 176, 226, 244, 250, 252, 258, 262, 272, 273, 293, 300, 301, 303, 304, 305, 306, 329, 347, 349, 350, 366, 384, 394, 400, 403, 422, 473, 474, 552, 553, 642, 781, 784, 785, 795, 805, 806, 840, 841, 843, 858, 862, 961, 970, 972, 974, 976, 982, 990, 999, 1011], "avoid": [4, 7, 12, 44, 57, 62, 72, 115, 167, 168, 199, 206, 215, 221, 252, 258, 262, 280, 285, 287, 288, 303, 304, 325, 326, 343, 358, 369, 371, 372, 373, 375, 376, 377, 384, 385, 387, 390, 394, 396, 398, 400, 403, 404, 407, 425, 427, 429, 437, 447, 453, 478, 479, 480, 484, 493, 494, 519, 524, 528, 531, 570, 571, 619, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 674, 676, 678, 680, 697, 774, 781, 782, 786, 792, 795, 804, 805, 806, 843, 846, 852, 853, 855, 860, 861, 862, 863, 866, 868, 869, 870, 872, 873, 874, 876, 881, 920, 960, 963, 965, 966, 969, 970, 972, 974, 976, 981, 982, 987, 1001, 1003, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "kbinsdiscret": [4, 53, 164, 197, 215, 298, 301, 306, 307, 314, 497, 642, 846, 862, 892, 976, 1016, 1020, 1021, 1022, 1024], "re": [4, 8, 13, 26, 56, 70, 71, 119, 152, 166, 215, 243, 247, 260, 262, 266, 310, 342, 344, 358, 371, 372, 375, 379, 383, 385, 394, 400, 404, 454, 455, 456, 457, 458, 459, 460, 461, 540, 541, 546, 547, 548, 631, 637, 645, 647, 783, 798, 801, 891, 892, 893, 894, 962, 967, 969, 976, 981, 987, 990, 1001, 1008, 1012, 1013, 1015, 1017], "fine": [4, 37, 118, 213, 248, 255, 349, 350, 368, 375, 384, 404, 431, 920, 969, 972, 987, 1018], "grain": [4, 31, 37, 231, 248, 301, 377, 404, 431, 987], "still": [4, 32, 44, 53, 55, 57, 62, 82, 99, 117, 119, 122, 129, 149, 155, 166, 167, 169, 176, 181, 197, 199, 215, 231, 260, 266, 299, 311, 312, 342, 343, 353, 359, 365, 370, 371, 373, 375, 376, 377, 379, 382, 384, 396, 400, 403, 404, 407, 425, 429, 439, 459, 481, 612, 617, 620, 622, 702, 740, 762, 765, 774, 775, 784, 785, 798, 801, 861, 863, 883, 901, 955, 956, 960, 962, 965, 969, 972, 974, 981, 982, 985, 987, 990, 1008, 1010, 1013, 1014, 1016, 1017, 1018, 1021, 1022, 1023, 1024], "express": [4, 7, 12, 149, 154, 167, 257, 258, 305, 311, 326, 344, 365, 366, 371, 372, 377, 396, 401, 404, 435, 441, 442, 573, 574, 576, 701, 781, 787, 795, 804, 805, 806, 807, 810, 830, 962, 966, 970, 976, 977, 982, 1016], "advantag": [4, 5, 39, 55, 57, 95, 100, 197, 198, 226, 243, 258, 313, 353, 384, 394, 400, 401, 404, 406, 426, 430, 445, 519, 574, 634, 659, 660, 747, 811, 812, 813, 843, 844, 883, 884, 885, 886, 887, 888, 889, 955, 958, 961, 962, 963, 966, 967, 969, 970, 976, 980, 981, 982, 1011], "final": [4, 26, 40, 42, 55, 70, 71, 80, 82, 86, 91, 100, 109, 111, 113, 115, 119, 120, 123, 129, 132, 143, 154, 162, 166, 168, 173, 176, 181, 185, 186, 194, 197, 199, 214, 215, 219, 226, 239, 246, 255, 263, 277, 305, 306, 309, 310, 329, 357, 359, 369, 371, 372, 375, 383, 384, 393, 394, 396, 397, 400, 403, 404, 422, 427, 432, 433, 437, 444, 447, 449, 521, 540, 541, 552, 553, 555, 612, 632, 638, 644, 664, 675, 679, 704, 781, 811, 812, 843, 844, 880, 883, 955, 956, 962, 963, 966, 969, 972, 973, 976, 979, 990, 999, 1013, 1016, 1017, 1018, 1019, 1021], "observ": [4, 5, 7, 9, 11, 13, 16, 24, 27, 37, 40, 43, 53, 62, 71, 78, 80, 81, 82, 96, 97, 100, 103, 109, 113, 114, 116, 122, 125, 128, 137, 138, 146, 149, 152, 154, 155, 156, 158, 167, 168, 169, 176, 177, 192, 193, 195, 197, 198, 199, 201, 211, 215, 222, 223, 229, 230, 253, 257, 259, 260, 264, 277, 283, 290, 304, 320, 328, 329, 334, 337, 342, 343, 344, 349, 350, 366, 368, 384, 387, 394, 396, 397, 398, 399, 400, 401, 402, 405, 406, 426, 428, 430, 431, 432, 434, 444, 445, 454, 455, 456, 457, 458, 459, 460, 461, 509, 517, 536, 537, 548, 595, 596, 631, 637, 642, 686, 701, 703, 742, 802, 821, 829, 862, 864, 962, 965, 966, 970, 971, 972, 973, 976, 979, 980, 981, 982, 989, 993, 995, 996, 998, 1009, 1021, 1022, 1023, 1024], "complet": [4, 37, 38, 39, 44, 49, 52, 58, 62, 86, 127, 141, 143, 146, 164, 169, 170, 203, 225, 226, 240, 255, 304, 306, 309, 343, 353, 366, 371, 375, 376, 379, 382, 397, 400, 401, 403, 404, 426, 430, 434, 437, 447, 448, 449, 452, 480, 521, 522, 523, 524, 529, 531, 543, 554, 555, 566, 572, 573, 574, 576, 612, 613, 614, 615, 630, 634, 642, 656, 658, 689, 690, 700, 701, 702, 715, 720, 721, 741, 770, 777, 811, 814, 817, 826, 842, 843, 844, 845, 906, 951, 955, 960, 962, 966, 967, 969, 976, 981, 982, 992, 1001, 1008, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "induct": [4, 36, 68, 122, 164, 384, 396, 403, 410, 426, 497, 549, 612, 616, 878, 879, 927, 950, 962, 979, 1010], "bia": [4, 27, 78, 108, 116, 117, 122, 133, 164, 167, 169, 176, 177, 179, 201, 262, 293, 337, 353, 366, 373, 384, 394, 398, 402, 403, 406, 509, 541, 544, 545, 592, 593, 599, 627, 633, 634, 643, 644, 654, 655, 665, 840, 841, 856, 858, 862, 868, 869, 871, 872, 873, 874, 892, 961, 962, 965, 966, 970, 971, 974, 980, 999], "preserv": [4, 48, 100, 222, 230, 252, 373, 374, 395, 400, 401, 404, 566, 573, 574, 576, 631, 637, 681, 684, 758, 762, 799, 800, 801, 867, 903, 904, 956, 962, 963, 976, 978, 996, 1008, 1011, 1012, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "smooth": [4, 46, 47, 54, 154, 190, 198, 213, 305, 329, 368, 385, 396, 402, 406, 433, 434, 522, 523, 524, 531, 542, 543, 544, 545, 549, 550, 551, 575, 576, 604, 607, 661, 818, 819, 820, 822, 860, 864, 872, 891, 892, 893, 894, 962, 968, 976, 980, 981, 982, 1001], "local": [4, 39, 57, 61, 95, 98, 126, 154, 155, 164, 168, 198, 217, 220, 222, 224, 226, 235, 278, 291, 349, 350, 358, 368, 369, 371, 375, 377, 379, 387, 396, 401, 403, 404, 406, 432, 437, 447, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 487, 523, 525, 529, 532, 534, 544, 545, 548, 551, 595, 596, 673, 674, 675, 676, 677, 678, 680, 681, 742, 743, 826, 829, 832, 834, 844, 853, 876, 879, 887, 932, 964, 965, 969, 970, 982, 1000, 1002, 1003, 1012, 1016, 1020, 1023], "attempt": [4, 54, 168, 193, 203, 252, 342, 357, 370, 384, 396, 408, 431, 435, 442, 453, 616, 673, 674, 678, 799, 825, 826, 827, 829, 831, 833, 834, 835, 861, 863, 881, 903, 904, 962, 963, 969, 982, 992, 1015, 1020], "each": [4, 7, 8, 10, 11, 12, 14, 17, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 55, 58, 60, 61, 70, 71, 73, 74, 75, 85, 86, 89, 91, 92, 95, 96, 100, 103, 104, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 125, 127, 128, 129, 130, 131, 132, 142, 144, 146, 151, 153, 158, 161, 162, 166, 167, 168, 170, 173, 176, 183, 184, 186, 191, 195, 197, 198, 199, 201, 202, 205, 212, 215, 219, 226, 227, 230, 231, 232, 233, 236, 237, 239, 242, 245, 247, 251, 252, 253, 255, 257, 258, 260, 262, 263, 266, 267, 275, 277, 280, 282, 286, 288, 290, 293, 294, 296, 299, 300, 301, 302, 304, 305, 306, 309, 311, 312, 313, 317, 318, 319, 322, 329, 335, 337, 343, 344, 347, 348, 351, 353, 357, 358, 359, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 377, 379, 380, 382, 383, 384, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 413, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 504, 507, 508, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 692, 693, 695, 698, 704, 709, 712, 713, 714, 722, 723, 729, 730, 732, 734, 735, 737, 738, 742, 743, 746, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 760, 762, 763, 764, 765, 767, 768, 769, 771, 772, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 872, 873, 874, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 909, 914, 915, 920, 922, 923, 934, 942, 943, 944, 947, 956, 958, 960, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 990, 992, 996, 998, 999, 1000, 1001, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "sine": [4, 149, 154, 155, 164, 191, 203, 241, 249, 349, 367, 600, 779, 780, 965, 982], "cosin": [4, 40, 271, 277, 282, 363, 366, 384, 396, 401, 402, 426, 430, 435, 442, 520, 575, 576, 605, 681, 744, 745, 746, 749, 754, 755, 758, 762, 763, 764, 823, 824, 828, 855, 969, 982, 1003, 1018], "match": [4, 37, 45, 95, 98, 102, 164, 173, 175, 197, 216, 220, 229, 344, 366, 369, 373, 375, 396, 401, 403, 404, 416, 434, 449, 451, 493, 494, 500, 511, 516, 522, 527, 533, 536, 552, 553, 557, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 643, 649, 650, 670, 671, 684, 688, 689, 690, 698, 700, 704, 718, 762, 763, 764, 770, 823, 824, 828, 832, 846, 847, 848, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 883, 890, 896, 907, 934, 963, 965, 966, 968, 969, 988, 992, 1001, 1003, 1008, 1014, 1015, 1016, 1018, 1020, 1021, 1024], "togeth": [4, 12, 51, 60, 71, 118, 129, 149, 155, 167, 178, 219, 222, 253, 305, 313, 332, 348, 353, 373, 375, 382, 383, 384, 390, 396, 403, 404, 411, 436, 438, 552, 553, 674, 700, 781, 795, 843, 844, 857, 962, 963, 967, 973, 976, 982, 983, 990, 993, 995, 1014], "equival": [4, 14, 55, 57, 119, 125, 145, 149, 154, 167, 181, 215, 247, 266, 277, 304, 344, 353, 357, 369, 377, 380, 383, 384, 396, 397, 398, 399, 400, 401, 403, 405, 406, 426, 428, 429, 430, 431, 432, 434, 435, 442, 454, 459, 494, 519, 526, 543, 546, 547, 548, 550, 573, 576, 598, 601, 604, 606, 609, 631, 632, 633, 637, 639, 643, 644, 651, 652, 653, 654, 657, 661, 662, 665, 668, 672, 673, 678, 693, 694, 707, 718, 725, 731, 732, 733, 745, 754, 763, 764, 779, 780, 784, 785, 789, 791, 814, 817, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 840, 846, 852, 853, 855, 858, 859, 860, 861, 863, 871, 873, 874, 907, 918, 952, 955, 960, 962, 963, 964, 966, 972, 976, 980, 981, 982, 1016, 1017, 1018, 1019, 1021, 1022], "importantli": [4, 13, 96, 168, 173, 299, 396], "jump": [4, 198, 299, 368, 371, 404, 862], "functiontransform": [4, 70, 115, 197, 215, 321, 450, 976, 1013, 1014, 1016, 1021, 1022, 1023], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 56, 61, 70, 75, 92, 101, 103, 105, 113, 115, 121, 122, 125, 129, 152, 155, 157, 162, 176, 177, 185, 186, 189, 197, 198, 205, 206, 207, 215, 235, 238, 239, 245, 247, 252, 253, 254, 255, 256, 257, 258, 260, 261, 264, 271, 277, 282, 287, 290, 296, 299, 301, 304, 309, 325, 329, 342, 344, 347, 351, 357, 364, 365, 366, 371, 372, 373, 377, 378, 380, 382, 384, 394, 395, 396, 397, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 926, 927, 928, 929, 930, 932, 933, 935, 936, 937, 938, 939, 940, 941, 947, 950, 951, 952, 953, 954, 956, 966, 969, 973, 974, 981, 982, 987, 992, 997, 999, 1001, 1005, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "lambda": [4, 7, 8, 10, 19, 56, 73, 121, 136, 177, 215, 257, 258, 303, 321, 392, 396, 401, 403, 404, 629, 630, 631, 632, 847, 859, 962, 976, 996, 1016, 1022], "sin": [4, 13, 19, 39, 96, 111, 121, 122, 126, 128, 141, 149, 155, 156, 158, 176, 177, 181, 191, 198, 203, 220, 232, 248, 289, 300, 310, 336, 349, 350, 406, 501, 600, 684, 748, 1000], "pi": [4, 13, 34, 39, 40, 96, 105, 126, 128, 141, 149, 177, 181, 185, 191, 198, 220, 242, 243, 244, 247, 248, 271, 290, 310, 350, 387, 402, 406, 501, 502, 503, 600, 627, 960, 961, 962, 968, 1000], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 126, 128, 154, 164, 167, 198, 220, 257, 271, 313, 350, 375, 402, 404, 434, 436, 438, 473, 496, 576, 684, 704, 748, 777, 961, 976, 990, 1002, 1003], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 57, 62, 69, 76, 86, 98, 100, 122, 124, 126, 145, 149, 150, 154, 156, 164, 165, 167, 168, 170, 171, 181, 197, 198, 199, 202, 203, 217, 222, 224, 239, 243, 247, 257, 258, 259, 262, 265, 266, 296, 298, 300, 307, 310, 316, 323, 329, 334, 337, 338, 339, 342, 343, 344, 353, 358, 369, 371, 373, 376, 382, 384, 394, 396, 397, 401, 402, 403, 404, 406, 407, 431, 435, 450, 463, 475, 481, 485, 499, 509, 510, 542, 543, 544, 545, 549, 550, 551, 573, 574, 575, 576, 591, 594, 634, 642, 643, 644, 658, 672, 676, 677, 686, 688, 737, 769, 779, 786, 792, 800, 809, 829, 840, 841, 847, 852, 853, 855, 859, 860, 861, 863, 864, 869, 872, 880, 883, 884, 888, 891, 892, 893, 894, 903, 904, 920, 932, 940, 955, 960, 962, 963, 965, 966, 967, 973, 976, 979, 981, 982, 997, 999, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "expans": [4, 161, 311, 435, 858, 1017], "synthet": [4, 13, 25, 27, 31, 37, 42, 49, 116, 122, 127, 149, 154, 156, 168, 187, 199, 214, 293, 301, 337, 353, 357, 364, 374, 385, 396, 398, 405, 643, 644, 883, 884, 890, 960, 999, 1014], "beyond": [4, 27, 198, 199, 357, 359, 370, 371, 382, 394, 403, 888, 963, 967, 976, 981, 987, 1016], "pd": [4, 12, 25, 71, 72, 73, 116, 122, 126, 154, 161, 166, 167, 168, 169, 176, 181, 186, 197, 205, 215, 235, 236, 239, 247, 255, 257, 258, 260, 268, 269, 304, 305, 306, 312, 313, 337, 342, 343, 376, 384, 397, 449, 451, 612, 613, 614, 615, 617, 762, 901, 903, 904, 955, 956, 973, 976, 1019, 1021, 1022, 1023], "hour_df": 4, "datafram": [4, 25, 70, 71, 72, 73, 119, 122, 126, 154, 161, 166, 167, 168, 169, 176, 181, 186, 205, 215, 236, 239, 247, 255, 257, 258, 260, 268, 269, 304, 305, 306, 312, 313, 314, 337, 342, 343, 365, 366, 371, 373, 376, 384, 397, 418, 427, 428, 430, 432, 434, 449, 451, 452, 453, 467, 468, 469, 470, 474, 475, 476, 477, 481, 485, 486, 487, 489, 490, 495, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 551, 552, 553, 554, 555, 566, 567, 568, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 673, 674, 677, 781, 784, 785, 795, 809, 827, 832, 835, 839, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 881, 899, 926, 937, 940, 955, 956, 987, 1001, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "arang": [4, 11, 13, 16, 40, 58, 60, 65, 73, 79, 80, 103, 106, 109, 118, 119, 120, 121, 123, 124, 127, 131, 142, 149, 151, 156, 157, 161, 162, 170, 181, 197, 200, 202, 206, 221, 229, 231, 252, 257, 260, 265, 268, 275, 277, 290, 293, 301, 312, 317, 318, 320, 322, 329, 336, 342, 344, 349, 350, 351, 353, 382, 393, 400, 404, 450, 529, 809, 858, 862, 961, 962, 970, 976, 980, 997], "reshap": [4, 5, 6, 9, 13, 16, 24, 30, 32, 34, 46, 47, 48, 50, 51, 53, 54, 58, 72, 80, 85, 95, 98, 105, 113, 117, 118, 127, 138, 144, 149, 151, 152, 153, 154, 155, 156, 158, 176, 188, 194, 210, 211, 213, 214, 219, 221, 223, 226, 231, 234, 246, 255, 281, 283, 290, 293, 295, 296, 300, 301, 302, 306, 309, 312, 313, 322, 328, 329, 333, 334, 335, 338, 339, 382, 393, 401, 403, 404, 430, 450, 569, 616, 809, 858, 862, 962, 976, 982, 997, 1000, 1013], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 53, 58, 62, 90, 96, 99, 106, 127, 173, 188, 213, 215, 218, 219, 220, 221, 222, 223, 229, 230, 233, 235, 239, 277, 281, 294, 299, 300, 304, 305, 306, 309, 312, 314, 329, 342, 343, 344, 353, 363, 366, 373, 376, 377, 384, 392, 397, 401, 404, 405, 412, 418, 427, 428, 430, 432, 434, 449, 451, 453, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 673, 674, 675, 676, 677, 827, 832, 835, 839, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 881, 956, 958, 962, 967, 969, 976, 977, 978, 992, 997, 1000, 1001, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1022, 1024], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 49, 53, 61, 62, 68, 94, 107, 127, 164, 191, 198, 203, 218, 220, 223, 226, 229, 230, 326, 329, 365, 367, 371, 373, 380, 384, 396, 397, 401, 404, 406, 426, 437, 447, 449, 452, 473, 475, 476, 477, 478, 479, 485, 486, 487, 489, 495, 499, 518, 526, 534, 569, 571, 620, 628, 642, 657, 676, 722, 763, 804, 808, 812, 850, 899, 903, 904, 919, 929, 952, 953, 960, 962, 963, 966, 973, 977, 982, 992, 998, 1008, 1012, 1015, 1016, 1017, 1020, 1022], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 56, 57, 58, 59, 60, 62, 67, 80, 86, 90, 91, 92, 97, 99, 100, 101, 102, 104, 111, 112, 118, 125, 127, 128, 130, 138, 141, 149, 150, 151, 153, 155, 156, 157, 158, 166, 167, 173, 177, 180, 187, 189, 193, 194, 195, 198, 199, 200, 206, 209, 210, 211, 214, 218, 219, 220, 221, 222, 223, 226, 231, 232, 233, 242, 243, 244, 245, 246, 247, 248, 252, 258, 260, 271, 277, 283, 284, 285, 286, 287, 288, 289, 293, 299, 301, 302, 304, 313, 319, 322, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 342, 348, 349, 350, 398, 616, 686, 960, 962, 999], "color": [4, 7, 8, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 78, 79, 80, 81, 82, 86, 91, 92, 95, 96, 97, 99, 102, 103, 104, 105, 109, 111, 118, 119, 120, 121, 124, 125, 126, 127, 129, 131, 135, 138, 149, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 167, 169, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 189, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 211, 214, 215, 219, 220, 221, 223, 226, 230, 231, 232, 233, 236, 242, 243, 244, 245, 246, 247, 248, 252, 256, 258, 260, 261, 262, 263, 264, 266, 267, 268, 270, 272, 275, 279, 280, 282, 283, 284, 285, 288, 289, 290, 293, 299, 300, 301, 303, 304, 305, 310, 319, 320, 322, 327, 328, 329, 330, 331, 333, 335, 336, 338, 348, 349, 365, 366, 368, 379, 396, 403, 404, 432, 478, 479, 491, 568, 569, 763, 940, 980, 982, 1013, 1018, 1020], "map": [4, 5, 10, 11, 17, 19, 26, 53, 100, 114, 121, 124, 127, 136, 149, 164, 173, 197, 218, 220, 225, 240, 258, 261, 266, 280, 285, 288, 290, 298, 299, 307, 321, 329, 335, 343, 344, 365, 372, 382, 384, 394, 395, 396, 397, 400, 401, 403, 404, 410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 481, 483, 487, 494, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 746, 749, 779, 780, 781, 784, 785, 792, 793, 795, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 871, 872, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 925, 955, 958, 963, 966, 968, 978, 981, 982, 1016, 1017, 1018, 1020, 1021, 1022, 1023], "space": [4, 8, 10, 19, 31, 46, 48, 53, 57, 58, 60, 61, 63, 65, 70, 71, 74, 86, 95, 97, 104, 106, 115, 118, 122, 127, 143, 149, 155, 173, 181, 198, 218, 219, 220, 222, 230, 231, 232, 235, 236, 243, 248, 265, 268, 269, 277, 286, 287, 301, 311, 342, 343, 344, 351, 353, 357, 363, 366, 367, 368, 371, 378, 382, 383, 384, 393, 395, 396, 399, 401, 402, 403, 404, 406, 428, 432, 433, 434, 437, 447, 449, 450, 451, 452, 467, 468, 469, 483, 517, 519, 520, 523, 524, 525, 526, 528, 529, 534, 558, 567, 573, 574, 576, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 623, 625, 626, 627, 628, 673, 674, 675, 677, 678, 679, 681, 684, 781, 784, 785, 795, 813, 823, 824, 831, 832, 833, 834, 843, 848, 849, 855, 860, 875, 876, 877, 896, 924, 958, 959, 960, 961, 962, 964, 966, 967, 969, 970, 971, 972, 976, 977, 978, 979, 980, 981, 982, 986, 987, 992, 999, 1001, 1002, 1003, 1008, 1009, 1011, 1016, 1017, 1018, 1022, 1023], "akin": [4, 198, 384], "sort": [4, 8, 10, 12, 19, 20, 24, 60, 70, 113, 119, 122, 128, 146, 176, 181, 197, 198, 215, 234, 257, 258, 261, 271, 289, 336, 342, 349, 350, 371, 375, 379, 380, 384, 400, 403, 404, 406, 519, 526, 540, 551, 566, 595, 602, 682, 697, 703, 713, 714, 722, 738, 767, 768, 771, 773, 781, 806, 818, 819, 820, 821, 822, 823, 824, 831, 833, 834, 835, 838, 848, 854, 856, 857, 860, 862, 864, 872, 885, 888, 920, 925, 962, 969, 972, 976, 990, 1001, 1008, 1012, 1018, 1019, 1020, 1022, 1023], "analog": [4, 19, 124, 377, 403, 966, 967, 981, 1017], "clock": 4, "25th": [4, 861], "back": [4, 100, 237, 358, 371, 373, 385, 390, 397, 404, 419, 428, 431, 432, 444, 467, 468, 469, 493, 494, 518, 519, 520, 523, 525, 526, 529, 566, 615, 643, 644, 651, 653, 661, 662, 663, 712, 848, 850, 851, 852, 856, 857, 858, 860, 861, 863, 875, 876, 883, 962, 966, 970, 987, 992, 1001, 1011, 1016, 1018, 1019, 1022], "natur": [4, 31, 122, 156, 167, 168, 173, 181, 197, 198, 214, 215, 222, 242, 248, 266, 342, 371, 373, 384, 401, 403, 404, 407, 429, 435, 442, 536, 575, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 677, 689, 725, 739, 741, 825, 826, 827, 829, 831, 833, 834, 835, 862, 918, 962, 963, 965, 966, 969, 971, 976, 980, 986, 989, 1008, 1016], "sp": [4, 167, 956, 1000], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 56, 57, 59, 60, 61, 65, 71, 72, 74, 86, 90, 91, 92, 100, 101, 102, 110, 112, 113, 118, 119, 125, 127, 128, 130, 131, 136, 138, 144, 150, 151, 152, 153, 157, 173, 180, 182, 187, 188, 189, 190, 192, 194, 195, 201, 204, 206, 208, 209, 210, 211, 213, 214, 218, 219, 220, 222, 223, 231, 232, 233, 237, 243, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 260, 262, 266, 268, 277, 280, 282, 283, 285, 286, 287, 288, 289, 290, 293, 294, 296, 299, 300, 301, 304, 309, 310, 311, 312, 313, 314, 319, 322, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 342, 348, 349, 350, 357, 358, 365, 366, 368, 369, 371, 372, 373, 374, 376, 379, 380, 382, 387, 393, 394, 396, 397, 398, 399, 400, 401, 403, 405, 409, 422, 427, 428, 431, 432, 434, 444, 453, 460, 508, 513, 519, 523, 525, 526, 532, 534, 535, 575, 592, 593, 595, 616, 624, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 657, 658, 664, 670, 671, 673, 674, 677, 678, 693, 699, 700, 703, 715, 719, 725, 726, 742, 743, 781, 795, 808, 818, 819, 820, 821, 822, 823, 824, 830, 832, 839, 854, 856, 857, 858, 862, 878, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 898, 903, 904, 929, 955, 958, 959, 962, 963, 964, 966, 968, 969, 971, 973, 976, 978, 980, 981, 982, 986, 990, 992, 996, 997, 999, 1000, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021], "colorbar": [4, 11, 30, 40, 95, 106, 117, 125, 144, 150, 152, 153, 155, 168, 218, 230, 246, 268, 299, 329, 682, 1020], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 53, 80, 98, 183, 312, 519, 955, 966, 976], "166": [4, 296, 377, 966, 1008], "simpl": [4, 16, 27, 55, 71, 75, 78, 85, 86, 95, 120, 156, 164, 168, 181, 198, 214, 238, 258, 278, 291, 313, 325, 342, 344, 348, 353, 369, 371, 373, 374, 375, 376, 378, 382, 383, 384, 385, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 410, 416, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 447, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 499, 507, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 770, 772, 779, 780, 781, 784, 785, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 958, 960, 961, 962, 963, 965, 966, 969, 976, 978, 980, 982, 987, 990, 992, 1001, 1005, 1008], "wors": [4, 86, 150, 168, 203, 257, 265, 304, 353, 394, 396, 406, 417, 450, 467, 468, 469, 537, 539, 541, 543, 545, 547, 550, 553, 555, 595, 596, 620, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 654, 655, 657, 658, 663, 664, 665, 690, 706, 707, 708, 712, 769, 816, 817, 826, 834, 841, 884, 886, 889, 892, 894, 966, 976, 1017], "further": [4, 25, 42, 71, 78, 86, 95, 113, 118, 120, 145, 149, 154, 167, 169, 176, 181, 218, 223, 254, 257, 258, 264, 314, 329, 343, 351, 357, 371, 382, 384, 395, 396, 398, 401, 403, 404, 406, 437, 447, 500, 517, 520, 567, 599, 607, 613, 643, 644, 651, 653, 661, 662, 663, 676, 680, 721, 758, 762, 765, 774, 775, 819, 825, 826, 833, 834, 861, 863, 883, 885, 888, 920, 965, 966, 968, 969, 970, 972, 976, 980, 981, 999, 1001, 1017, 1021], "analyz": [4, 7, 17, 181, 259, 266, 314, 342, 344, 376, 377, 396, 404, 488, 573, 574, 576, 772, 963, 966, 973, 974, 982, 1001, 1008, 1017], "reason": [4, 8, 12, 42, 53, 70, 122, 146, 167, 168, 173, 197, 198, 205, 215, 226, 230, 231, 235, 254, 257, 258, 263, 277, 300, 304, 343, 344, 353, 357, 358, 359, 366, 370, 371, 373, 375, 379, 382, 383, 384, 385, 396, 397, 398, 401, 403, 404, 406, 493, 517, 559, 623, 631, 637, 639, 657, 672, 677, 747, 781, 795, 827, 832, 839, 858, 880, 955, 956, 961, 962, 963, 966, 968, 969, 970, 972, 976, 980, 981, 990, 1001, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "disappoint": 4, "outcom": [4, 167, 384, 403, 554, 643, 694, 726, 776, 811, 878, 879, 880, 885, 888, 962, 966, 982, 989, 1001, 1012, 1016, 1018], "altern": [4, 26, 71, 86, 116, 117, 123, 129, 169, 181, 197, 215, 227, 245, 248, 266, 309, 342, 343, 344, 353, 366, 374, 375, 377, 382, 384, 385, 387, 391, 393, 394, 396, 397, 398, 400, 401, 403, 404, 406, 426, 427, 430, 431, 432, 437, 443, 448, 484, 523, 525, 526, 532, 538, 539, 542, 543, 544, 545, 549, 550, 551, 567, 573, 574, 576, 602, 605, 628, 677, 691, 693, 755, 758, 762, 765, 783, 812, 847, 853, 856, 869, 876, 878, 891, 892, 893, 894, 933, 934, 960, 962, 963, 965, 966, 969, 970, 974, 976, 978, 979, 981, 982, 987, 996, 1001, 1003, 1013, 1015, 1021, 1022], "larger": [4, 7, 27, 37, 39, 42, 47, 55, 80, 82, 92, 105, 113, 123, 150, 155, 156, 162, 167, 168, 173, 177, 181, 212, 213, 214, 223, 230, 232, 242, 248, 258, 260, 266, 267, 277, 279, 293, 294, 296, 299, 329, 343, 344, 364, 366, 371, 377, 382, 384, 393, 394, 396, 397, 398, 400, 401, 403, 404, 406, 425, 428, 434, 435, 437, 439, 441, 500, 512, 526, 529, 546, 547, 548, 552, 553, 567, 574, 628, 637, 657, 658, 659, 660, 664, 672, 677, 689, 704, 720, 779, 828, 829, 860, 862, 863, 864, 872, 877, 919, 920, 937, 940, 958, 959, 962, 963, 965, 966, 969, 970, 974, 976, 980, 981, 999, 1001, 1012, 1013, 1016, 1017, 1018, 1021, 1022], "periodic_spline_transform": 4, "n_spline": [4, 862], "none": [4, 8, 9, 10, 16, 17, 26, 33, 39, 41, 42, 44, 52, 53, 54, 55, 56, 62, 97, 100, 105, 114, 118, 119, 121, 124, 138, 150, 156, 157, 170, 176, 197, 198, 205, 208, 215, 218, 232, 233, 251, 257, 258, 269, 282, 284, 288, 302, 303, 306, 311, 312, 318, 321, 327, 329, 330, 333, 334, 336, 342, 343, 366, 368, 371, 373, 378, 380, 384, 396, 400, 403, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 688, 692, 693, 694, 696, 697, 698, 699, 701, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 718, 719, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 872, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 906, 907, 908, 909, 912, 914, 919, 920, 923, 924, 925, 926, 929, 932, 934, 935, 937, 940, 941, 947, 950, 951, 953, 955, 962, 966, 976, 979, 982, 992, 996, 1001, 1003, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "degre": [4, 16, 34, 97, 112, 154, 161, 166, 168, 173, 176, 181, 185, 186, 198, 232, 237, 242, 243, 244, 247, 248, 257, 271, 296, 311, 312, 326, 336, 401, 405, 431, 437, 483, 520, 526, 624, 625, 628, 641, 759, 779, 781, 829, 858, 862, 885, 886, 887, 888, 889, 958, 959, 961, 962, 963, 964, 966, 967, 969, 972, 973, 976, 979, 981, 999, 1011, 1017, 1021, 1022], "n_knot": [4, 198, 312, 862, 976, 1021], "include_bia": [4, 176, 271, 858, 862, 1022], "knot": [4, 198, 312, 862, 976, 1021], "linspac": [4, 8, 9, 10, 11, 13, 24, 26, 30, 34, 37, 38, 40, 42, 49, 55, 80, 81, 96, 105, 111, 120, 122, 149, 150, 152, 153, 154, 155, 156, 158, 168, 176, 177, 179, 181, 187, 191, 197, 198, 199, 203, 207, 208, 209, 210, 211, 215, 223, 226, 229, 230, 232, 233, 246, 257, 259, 260, 264, 265, 266, 267, 271, 282, 283, 289, 290, 300, 302, 313, 314, 328, 329, 332, 334, 335, 337, 338, 339, 616, 617, 787, 807, 823, 824, 1000], "again": [4, 67, 72, 122, 153, 155, 157, 158, 167, 222, 258, 342, 353, 375, 380, 384, 385, 396, 397, 398, 403, 404, 457, 552, 553, 619, 632, 636, 638, 640, 646, 648, 650, 677, 955, 962, 966, 980, 1005, 1008, 1016], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 41, 46, 47, 48, 51, 52, 53, 54, 55, 58, 60, 61, 66, 70, 74, 75, 80, 95, 96, 98, 101, 111, 116, 117, 118, 119, 122, 123, 124, 127, 128, 138, 142, 144, 150, 151, 153, 155, 156, 161, 162, 164, 168, 169, 185, 186, 197, 199, 204, 206, 209, 210, 211, 212, 213, 217, 219, 221, 224, 226, 229, 230, 231, 232, 234, 235, 242, 244, 246, 247, 248, 255, 257, 259, 260, 263, 264, 266, 267, 277, 282, 283, 287, 290, 293, 295, 301, 302, 309, 311, 314, 319, 320, 322, 326, 328, 329, 332, 333, 334, 335, 338, 339, 342, 343, 351, 357, 364, 365, 366, 371, 373, 384, 393, 394, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 414, 415, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 905, 908, 909, 914, 918, 920, 922, 925, 928, 930, 935, 937, 941, 942, 943, 944, 945, 946, 947, 956, 961, 962, 966, 967, 968, 969, 970, 972, 976, 977, 978, 979, 980, 981, 982, 997, 998, 1000, 1001, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1024], "concat": [4, 161, 166, 186, 215, 856], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 58, 80, 82, 89, 90, 95, 98, 102, 106, 112, 117, 118, 138, 144, 152, 153, 168, 176, 180, 181, 188, 189, 206, 209, 210, 211, 213, 219, 220, 221, 230, 231, 234, 251, 252, 277, 280, 281, 283, 285, 286, 288, 290, 293, 295, 296, 299, 301, 317, 318, 322, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 338, 339, 348, 682, 997, 998], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 31, 32, 34, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 60, 61, 67, 80, 82, 89, 90, 95, 98, 102, 112, 117, 118, 138, 144, 152, 153, 168, 180, 189, 206, 209, 210, 211, 213, 219, 220, 221, 227, 230, 231, 234, 239, 251, 252, 277, 281, 283, 287, 290, 293, 295, 296, 299, 301, 311, 314, 317, 318, 322, 325, 326, 327, 328, 329, 330, 331, 333, 335, 338, 339, 348, 368, 397, 682, 896, 966, 976, 982, 997, 998], "tab20b": 4, "stai": [4, 26, 37, 105, 167, 343, 370, 371, 375, 384, 385, 971, 1014], "midnight": 4, "fewer": [4, 13, 26, 55, 110, 118, 120, 197, 357, 372, 396, 405, 406, 433, 446, 538, 579, 681, 813, 924, 962, 967, 969, 1013, 1014, 1015], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 53, 55, 62, 78, 85, 86, 104, 116, 123, 129, 141, 142, 143, 145, 146, 154, 162, 166, 167, 168, 169, 170, 173, 181, 197, 198, 215, 236, 242, 248, 254, 255, 260, 264, 265, 267, 286, 299, 305, 306, 309, 312, 318, 329, 342, 343, 344, 353, 357, 358, 359, 366, 367, 369, 371, 373, 375, 376, 377, 379, 382, 384, 385, 387, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 428, 429, 431, 435, 441, 442, 445, 453, 481, 488, 506, 509, 517, 519, 524, 528, 534, 536, 546, 547, 551, 552, 573, 574, 576, 578, 589, 596, 612, 615, 634, 643, 657, 659, 661, 663, 672, 673, 677, 680, 709, 712, 730, 742, 743, 747, 769, 776, 779, 780, 784, 785, 800, 811, 812, 825, 826, 827, 829, 831, 832, 833, 834, 835, 858, 860, 868, 869, 871, 872, 873, 874, 881, 919, 920, 922, 929, 934, 955, 956, 960, 961, 962, 963, 964, 965, 966, 967, 969, 972, 973, 974, 979, 980, 981, 982, 985, 986, 987, 990, 997, 999, 1001, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1023], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 368], "132": [4, 8, 13, 56, 110, 403], "013": [4, 147, 343], "successfulli": [4, 13, 303, 370, 375, 396, 404, 980], "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 71, 72, 78, 113, 120, 122, 124, 127, 143, 167, 176, 177, 181, 195, 202, 205, 228, 230, 235, 258, 264, 286, 301, 304, 305, 314, 343, 344, 353, 363, 365, 368, 371, 377, 382, 384, 394, 395, 396, 398, 400, 401, 403, 404, 405, 407, 429, 430, 435, 442, 445, 478, 519, 529, 534, 540, 541, 542, 543, 548, 549, 550, 558, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 595, 612, 628, 637, 657, 658, 659, 660, 672, 677, 680, 765, 781, 784, 785, 787, 795, 804, 805, 806, 807, 810, 860, 872, 875, 876, 891, 892, 893, 894, 955, 958, 960, 961, 962, 963, 966, 969, 978, 979, 983, 992, 1000, 1008, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1022, 1024], "choic": [4, 7, 40, 46, 55, 65, 70, 78, 103, 149, 150, 156, 161, 186, 198, 235, 251, 255, 257, 260, 282, 306, 311, 342, 343, 353, 357, 369, 373, 376, 382, 387, 396, 398, 400, 402, 403, 405, 406, 437, 447, 456, 457, 458, 459, 460, 461, 463, 523, 525, 526, 532, 544, 623, 632, 633, 641, 643, 644, 646, 654, 665, 677, 690, 812, 825, 826, 831, 833, 834, 860, 863, 872, 874, 883, 884, 907, 955, 960, 962, 963, 964, 966, 967, 972, 974, 979, 980, 981, 982, 1015, 1018, 1019, 1023, 1024], "arbitrari": [4, 55, 86, 95, 96, 97, 115, 156, 176, 197, 214, 215, 255, 299, 303, 305, 311, 342, 351, 358, 371, 382, 384, 397, 400, 401, 403, 404, 408, 431, 435, 440, 442, 450, 517, 518, 544, 545, 566, 624, 633, 654, 665, 673, 773, 782, 783, 788, 790, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 847, 849, 862, 955, 957, 958, 962, 963, 966, 969, 976, 987, 1001, 1008, 1009, 1012, 1014, 1015, 1016, 1018, 1022], "held": [4, 8, 71, 103, 123, 169, 205, 244, 260, 265, 275, 403, 544, 545, 546, 547, 686, 781, 784, 785, 795, 840, 841, 853, 955, 956, 965, 974, 1001], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 55, 58, 60, 64, 67, 80, 81, 85, 90, 91, 92, 94, 98, 100, 101, 107, 112, 118, 119, 127, 151, 156, 157, 164, 167, 168, 169, 176, 180, 186, 189, 191, 193, 195, 197, 198, 199, 203, 206, 209, 210, 214, 215, 218, 219, 220, 221, 222, 226, 229, 231, 235, 244, 248, 251, 254, 258, 259, 264, 266, 267, 275, 277, 280, 281, 282, 283, 284, 285, 286, 288, 290, 293, 300, 301, 303, 305, 317, 318, 322, 325, 328, 329, 330, 331, 333, 334, 338, 339, 342, 343, 344, 348, 353, 357, 358, 359, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 379, 382, 384, 385, 395, 396, 401, 402, 403, 404, 407, 408, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 437, 439, 440, 441, 442, 443, 445, 446, 454, 457, 459, 483, 489, 497, 499, 500, 504, 507, 510, 515, 518, 520, 526, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 595, 596, 613, 616, 617, 618, 622, 623, 624, 629, 630, 636, 640, 642, 655, 656, 658, 660, 661, 663, 664, 667, 668, 673, 674, 675, 676, 677, 678, 679, 684, 686, 691, 692, 695, 698, 702, 707, 709, 715, 720, 721, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 748, 763, 764, 779, 780, 781, 795, 804, 813, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 840, 841, 848, 862, 877, 878, 879, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 901, 958, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 978, 979, 981, 982, 986, 987, 996, 999, 1000, 1001, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 115, 299], "insight": [4, 7, 167, 168, 198, 199, 215, 295, 299, 342, 351, 394, 781, 784, 785, 795, 806, 973, 982, 990], "last_hour": 4, "slice": [4, 17, 118, 206, 220, 223, 231, 280, 285, 288, 312, 313, 325, 366, 372, 373, 380, 397, 449, 452, 478, 479, 493, 531, 624, 758, 762, 765, 899, 923, 924, 937, 1020, 1022], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 53, 57, 60, 67, 75, 95, 98, 106, 118, 119, 126, 129, 158, 167, 168, 191, 196, 212, 213, 218, 219, 220, 234, 245, 253, 296, 299, 301, 309, 311, 317, 318, 322, 336, 337, 348], "label": [4, 6, 7, 11, 12, 13, 16, 20, 24, 25, 26, 27, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 73, 75, 78, 79, 80, 81, 85, 86, 91, 92, 97, 99, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 132, 136, 142, 149, 150, 154, 155, 156, 157, 158, 161, 164, 167, 170, 173, 176, 177, 179, 180, 181, 185, 186, 187, 191, 197, 198, 199, 200, 203, 204, 205, 206, 207, 212, 214, 215, 219, 220, 221, 226, 231, 232, 233, 235, 236, 244, 251, 252, 255, 256, 258, 259, 260, 261, 263, 266, 267, 268, 269, 270, 271, 272, 275, 282, 284, 286, 289, 294, 296, 299, 300, 304, 309, 310, 313, 316, 320, 321, 322, 323, 336, 337, 342, 343, 347, 348, 349, 350, 359, 363, 364, 365, 370, 371, 373, 376, 380, 384, 385, 393, 394, 395, 406, 407, 413, 414, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 446, 447, 450, 454, 472, 473, 474, 478, 479, 480, 481, 487, 488, 493, 494, 497, 499, 500, 504, 507, 508, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 552, 554, 555, 577, 578, 579, 580, 581, 583, 584, 585, 589, 590, 591, 594, 595, 616, 643, 644, 651, 652, 653, 658, 659, 660, 661, 662, 663, 682, 683, 685, 687, 688, 689, 690, 692, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 709, 710, 711, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 738, 739, 740, 741, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 829, 830, 832, 833, 840, 841, 843, 847, 850, 851, 854, 856, 857, 867, 878, 879, 880, 883, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 903, 908, 909, 929, 930, 937, 955, 962, 963, 967, 968, 969, 970, 972, 973, 976, 980, 981, 982, 986, 988, 992, 997, 999, 1000, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "actual": [4, 27, 46, 60, 75, 86, 110, 173, 186, 197, 205, 244, 253, 260, 344, 353, 357, 359, 368, 369, 371, 373, 376, 377, 382, 383, 384, 394, 396, 401, 404, 405, 419, 494, 500, 501, 512, 520, 523, 525, 532, 547, 548, 629, 630, 633, 643, 644, 651, 652, 653, 654, 655, 657, 659, 661, 662, 663, 665, 672, 676, 680, 686, 689, 694, 700, 706, 707, 708, 769, 779, 784, 785, 800, 801, 829, 860, 883, 889, 911, 912, 913, 941, 958, 965, 966, 969, 973, 974, 1015, 1016, 1022, 1023, 1024], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 56, 80, 81, 92, 95, 110, 118, 141, 149, 150, 154, 155, 158, 162, 167, 168, 176, 185, 186, 187, 189, 193, 197, 198, 199, 203, 206, 209, 210, 215, 226, 242, 245, 280, 282, 293, 294, 296, 322, 339, 348, 349, 350, 371, 387, 389, 396, 403, 406, 540, 541, 616, 972, 973, 982, 986, 992], "One": [4, 9, 12, 24, 30, 49, 55, 91, 100, 103, 117, 119, 122, 125, 164, 167, 170, 175, 212, 216, 226, 236, 247, 257, 264, 267, 286, 300, 324, 326, 340, 343, 357, 368, 371, 383, 384, 396, 399, 401, 402, 403, 404, 407, 429, 434, 457, 459, 463, 497, 551, 616, 624, 643, 651, 653, 658, 660, 661, 662, 772, 788, 789, 811, 812, 813, 844, 845, 856, 887, 929, 956, 958, 962, 963, 964, 965, 966, 967, 969, 970, 973, 974, 976, 981, 988, 1003, 1012, 1014, 1021, 1023], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 61, 72, 73, 75, 78, 79, 80, 81, 85, 86, 97, 99, 103, 104, 105, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 142, 149, 150, 154, 155, 156, 157, 158, 167, 168, 173, 176, 177, 179, 182, 185, 186, 187, 191, 197, 198, 199, 200, 203, 204, 205, 206, 207, 210, 211, 212, 214, 215, 221, 229, 230, 231, 232, 233, 236, 244, 252, 254, 256, 257, 259, 260, 261, 262, 264, 266, 267, 269, 270, 271, 272, 282, 283, 284, 289, 294, 300, 304, 310, 313, 319, 328, 331, 336, 342, 347, 348, 349, 350, 685, 997], "draw": [4, 7, 16, 60, 158, 167, 193, 236, 259, 264, 329, 378, 399, 401, 402, 403, 540, 541, 542, 543, 548, 549, 550, 551, 596, 619, 686, 787, 895, 897, 965, 986, 995, 1021, 1022], "conclus": [4, 100, 167, 169, 197, 199, 257, 259, 353, 403, 995], "abov": [4, 25, 26, 37, 44, 66, 70, 112, 115, 120, 122, 132, 145, 146, 167, 168, 170, 183, 197, 199, 203, 208, 230, 233, 257, 263, 282, 301, 304, 305, 310, 312, 343, 344, 351, 353, 357, 358, 359, 365, 366, 368, 369, 370, 371, 373, 375, 377, 382, 384, 385, 396, 397, 398, 400, 401, 402, 404, 406, 426, 430, 449, 452, 474, 480, 481, 482, 508, 575, 619, 689, 739, 781, 793, 795, 804, 846, 847, 860, 866, 872, 880, 929, 955, 956, 958, 960, 962, 963, 966, 969, 971, 973, 976, 980, 981, 982, 987, 992, 993, 999, 1000, 1001, 1014], "problemat": [4, 253, 397, 956, 1016], "captur": [4, 9, 12, 37, 39, 86, 122, 126, 141, 154, 167, 176, 181, 197, 248, 310, 329, 379, 396, 403, 404, 405, 556, 573, 574, 576, 829, 933, 966, 971, 979, 983, 999, 1020], "big": [4, 44, 60, 62, 201, 202, 219, 248, 358, 371, 377, 385, 398, 404, 408, 523, 546, 547, 549, 550, 787, 807, 818, 819, 820, 821, 822, 987, 990, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "goe": [4, 37, 115, 351, 371, 403, 456, 457, 463, 542, 543, 549, 550, 551, 891, 892, 893, 894, 976, 980], "artifact": [4, 13, 46, 47, 299, 359, 375], "discontinu": [4, 382], "fail": [4, 54, 66, 96, 103, 157, 158, 176, 181, 257, 309, 358, 369, 371, 373, 374, 379, 385, 387, 399, 400, 425, 457, 459, 661, 662, 663, 840, 841, 914, 955, 963, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023], "intra": [4, 573, 576, 774, 775], "variat": [4, 12, 37, 126, 154, 155, 164, 167, 202, 241, 243, 248, 249, 254, 275, 310, 329, 368, 400, 401, 406, 428, 432, 444, 521, 628, 657, 659, 660, 779, 780, 799, 800, 802, 955, 966, 976, 979, 982, 986, 997, 999, 1002, 1003, 1011, 1013, 1014], "harmon": [4, 37, 264, 343, 396, 520, 526, 713, 714, 720, 767, 777, 966], "phase": [4, 181, 191, 357, 612, 958, 963, 969, 990, 1016, 1018], "potenti": [4, 55, 78, 162, 166, 168, 176, 283, 284, 293, 344, 357, 358, 384, 387, 396, 400, 403, 404, 453, 467, 468, 469, 470, 481, 509, 534, 542, 543, 546, 547, 549, 550, 558, 591, 596, 619, 747, 873, 874, 881, 891, 892, 893, 894, 934, 972, 980, 982, 986, 1001, 1011, 1018, 1019, 1022], "fix": [4, 8, 25, 34, 46, 71, 105, 115, 118, 149, 150, 154, 157, 167, 181, 199, 215, 248, 260, 293, 309, 310, 311, 312, 313, 314, 343, 357, 358, 365, 367, 369, 370, 371, 373, 374, 379, 382, 384, 385, 396, 397, 400, 401, 403, 404, 406, 437, 447, 457, 489, 497, 516, 522, 525, 527, 533, 534, 544, 545, 549, 550, 573, 576, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 615, 638, 648, 655, 669, 672, 676, 680, 692, 769, 779, 795, 802, 825, 826, 828, 831, 833, 834, 850, 867, 891, 892, 920, 933, 955, 962, 965, 966, 969, 976, 987, 989, 1001, 1006, 1007, 1009, 1010, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "two": [4, 7, 9, 11, 14, 24, 26, 30, 34, 37, 39, 40, 43, 55, 60, 64, 70, 71, 75, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 104, 108, 111, 117, 118, 119, 122, 125, 126, 127, 130, 133, 143, 146, 149, 150, 151, 152, 155, 156, 161, 162, 164, 167, 168, 169, 176, 180, 181, 185, 186, 187, 188, 193, 197, 198, 199, 205, 206, 209, 214, 215, 220, 222, 223, 226, 231, 233, 235, 242, 243, 244, 246, 247, 248, 252, 254, 258, 264, 280, 282, 285, 286, 288, 290, 299, 301, 304, 309, 310, 312, 313, 319, 325, 326, 329, 330, 331, 338, 342, 343, 344, 348, 353, 364, 365, 366, 367, 368, 369, 371, 373, 375, 377, 378, 379, 382, 384, 385, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 426, 427, 428, 429, 430, 432, 435, 436, 437, 438, 442, 444, 449, 454, 455, 456, 457, 458, 459, 460, 461, 473, 475, 476, 477, 478, 479, 481, 483, 485, 486, 487, 488, 489, 490, 492, 495, 499, 504, 507, 521, 523, 525, 529, 532, 534, 535, 538, 545, 555, 566, 569, 575, 576, 577, 580, 581, 583, 584, 585, 587, 588, 591, 592, 593, 595, 596, 605, 606, 609, 613, 616, 617, 624, 628, 630, 655, 656, 658, 677, 684, 688, 689, 690, 697, 700, 701, 704, 706, 707, 708, 715, 716, 719, 720, 722, 725, 727, 738, 739, 741, 747, 748, 755, 758, 761, 762, 763, 764, 765, 769, 770, 776, 777, 778, 779, 812, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 840, 841, 847, 848, 855, 856, 857, 858, 877, 878, 879, 883, 891, 893, 894, 929, 945, 946, 952, 955, 956, 958, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 992, 996, 999, 1000, 1001, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "onc": [4, 8, 50, 143, 146, 149, 219, 255, 258, 277, 305, 309, 313, 342, 344, 351, 353, 357, 359, 365, 366, 371, 375, 376, 377, 378, 379, 383, 384, 385, 396, 397, 399, 400, 401, 403, 404, 405, 406, 434, 436, 438, 457, 493, 494, 523, 529, 536, 544, 545, 575, 576, 582, 596, 604, 612, 632, 636, 638, 640, 646, 648, 650, 651, 652, 653, 661, 662, 663, 682, 697, 701, 703, 720, 765, 782, 786, 789, 799, 818, 819, 820, 821, 822, 895, 962, 963, 969, 976, 980, 981, 982, 992, 1001, 1005, 1008, 1016, 1018, 1019, 1020, 1021], "specif": [4, 11, 12, 27, 44, 55, 62, 65, 70, 72, 129, 154, 157, 167, 168, 173, 215, 252, 257, 299, 309, 310, 314, 342, 343, 344, 353, 357, 358, 366, 371, 374, 376, 377, 379, 382, 384, 387, 392, 395, 396, 397, 400, 401, 403, 404, 405, 406, 481, 488, 519, 536, 542, 549, 552, 553, 554, 555, 559, 573, 576, 578, 582, 597, 598, 599, 600, 602, 603, 604, 605, 607, 608, 610, 625, 628, 631, 632, 637, 643, 657, 672, 682, 697, 698, 730, 781, 782, 783, 788, 789, 790, 795, 806, 819, 912, 914, 915, 929, 942, 943, 944, 960, 962, 963, 965, 966, 968, 969, 971, 973, 976, 980, 982, 983, 984, 985, 1001, 1003, 1008, 1012, 1016, 1017, 1018, 1019, 1022, 1023], "furthermor": [4, 37, 155, 168, 169, 236, 238, 277, 342, 343, 357, 359, 378, 396, 401, 403, 404, 547, 575, 591, 604, 689, 720, 730, 739, 741, 777, 883, 962, 974, 1011, 1015], "enforc": [4, 12, 53, 95, 154, 191, 286, 357, 371, 398, 401, 403, 406, 493, 512, 516, 522, 524, 527, 528, 530, 531, 533, 546, 547, 862, 903, 904, 956, 963, 1010, 1016, 1018, 1020, 1024], "behav": [4, 12, 48, 52, 57, 252, 299, 311, 329, 353, 371, 377, 382, 383, 396, 400, 863, 962, 976, 981, 983, 987, 1001, 1008, 1015, 1017, 1021, 1022], "similarli": [4, 12, 37, 55, 92, 125, 168, 181, 186, 197, 227, 257, 293, 299, 329, 353, 358, 367, 369, 373, 376, 384, 393, 399, 400, 404, 961, 963, 964, 966, 973, 980, 981, 983, 992, 996, 1016, 1022, 1024], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 53, 56, 58, 113, 143, 146, 162, 168, 169, 180, 181, 228, 253, 255, 266, 268, 269, 280, 288, 309, 322, 325, 326, 332, 342, 343, 344, 356, 357, 358, 365, 366, 368, 369, 370, 371, 373, 375, 376, 377, 379, 380, 382, 384, 387, 393, 394, 396, 397, 400, 401, 403, 404, 405, 406, 407, 408, 410, 418, 419, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 447, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 473, 476, 477, 480, 481, 482, 488, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 562, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 595, 596, 605, 612, 613, 614, 615, 617, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 692, 705, 713, 714, 722, 755, 758, 762, 763, 764, 765, 767, 768, 771, 772, 773, 774, 775, 779, 780, 781, 783, 784, 785, 786, 787, 788, 790, 793, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 872, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 903, 904, 906, 914, 915, 919, 920, 934, 935, 936, 937, 940, 950, 951, 955, 956, 962, 963, 966, 968, 969, 972, 974, 976, 980, 981, 982, 987, 989, 992, 999, 1000, 1001, 1003, 1008, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "shorter": [4, 155, 245, 382, 396, 401, 406, 435, 442, 548, 682, 968, 972, 1001, 1019], "necessarili": [4, 31, 72, 98, 167, 197, 205, 215, 231, 232, 243, 301, 342, 343, 365, 375, 394, 396, 403, 612, 831, 833, 834, 835, 960, 963, 965, 966], "59": [4, 46, 173, 181, 215, 296, 368, 377, 397, 495, 966, 1004, 1008], "37": [4, 19, 181, 260, 317, 366, 403, 509, 701, 863, 976, 1008], "creat": [4, 5, 8, 11, 16, 21, 26, 27, 30, 32, 37, 39, 41, 43, 44, 46, 49, 52, 58, 60, 62, 71, 72, 80, 86, 97, 100, 112, 115, 118, 119, 122, 125, 128, 144, 145, 149, 151, 154, 155, 156, 158, 162, 166, 168, 176, 178, 180, 183, 193, 198, 199, 209, 210, 220, 231, 236, 238, 247, 252, 253, 255, 257, 267, 275, 280, 285, 287, 288, 301, 303, 304, 309, 312, 313, 322, 325, 326, 330, 331, 334, 337, 338, 339, 344, 347, 349, 350, 353, 358, 366, 367, 369, 370, 371, 373, 375, 376, 377, 378, 379, 380, 383, 384, 387, 394, 396, 397, 400, 402, 403, 404, 406, 423, 436, 438, 450, 451, 484, 500, 501, 502, 503, 531, 538, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 573, 574, 576, 582, 613, 615, 616, 617, 618, 682, 683, 685, 686, 687, 766, 773, 781, 783, 787, 791, 795, 799, 804, 805, 813, 844, 856, 885, 888, 891, 892, 893, 894, 898, 901, 923, 924, 939, 951, 956, 962, 965, 966, 967, 969, 973, 976, 977, 978, 980, 981, 982, 986, 987, 990, 997, 999, 1000, 1005, 1008, 1009, 1011, 1014, 1018, 1021, 1022, 1023, 1024], "turn": [4, 32, 78, 161, 162, 167, 181, 212, 213, 231, 257, 281, 344, 357, 359, 366, 382, 384, 385, 395, 396, 397, 399, 401, 404, 405, 406, 566, 567, 574, 592, 593, 812, 816, 885, 888, 906, 956, 960, 968, 971, 976, 990, 1001, 1013, 1015, 1016, 1021], "downstream": [4, 80, 306, 344, 404, 516, 519, 522, 526, 527, 591, 856, 976, 1018], "freedom": [4, 97, 154, 185, 186, 188, 257, 526, 641, 779, 962, 1011], "underfit": [4, 122, 149, 164, 169, 250, 272, 273, 293, 305, 403, 642, 781, 784, 785, 795, 805, 806, 843, 858, 961, 962], "approxim": [4, 5, 27, 33, 46, 53, 80, 99, 100, 105, 114, 121, 122, 150, 167, 174, 177, 193, 197, 198, 211, 215, 225, 226, 229, 232, 240, 248, 257, 262, 271, 278, 286, 291, 299, 301, 302, 304, 309, 312, 342, 344, 349, 350, 353, 360, 363, 368, 380, 382, 384, 393, 394, 397, 399, 400, 401, 403, 406, 408, 409, 410, 418, 434, 454, 455, 458, 459, 460, 461, 467, 468, 469, 476, 481, 487, 506, 509, 518, 519, 520, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 544, 545, 567, 574, 595, 596, 604, 623, 624, 625, 626, 627, 642, 643, 644, 657, 659, 661, 662, 664, 672, 677, 742, 743, 748, 779, 782, 799, 804, 808, 809, 823, 824, 827, 831, 833, 834, 835, 839, 843, 844, 849, 853, 855, 856, 860, 872, 883, 888, 889, 919, 920, 940, 959, 960, 961, 962, 963, 965, 969, 970, 971, 972, 973, 974, 978, 980, 981, 982, 986, 987, 1001, 1003, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022], "especi": [4, 8, 55, 56, 119, 122, 167, 197, 305, 314, 333, 343, 353, 358, 365, 371, 379, 382, 384, 394, 396, 404, 428, 434, 486, 523, 542, 543, 544, 545, 549, 550, 551, 631, 632, 633, 635, 637, 638, 639, 643, 644, 645, 646, 647, 648, 654, 665, 680, 690, 730, 818, 819, 820, 821, 822, 891, 892, 893, 894, 962, 968, 969, 974, 976, 990, 1011, 1016, 1020, 1021, 1022], "sharp": [4, 168, 973, 976], "rush": [4, 371], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 80, 95, 124, 149, 156, 167, 168, 212, 215, 257, 264, 268, 313, 342, 343, 353, 370, 394, 396, 398, 401, 403, 404, 405, 422, 428, 432, 436, 438, 444, 516, 523, 525, 527, 528, 530, 531, 532, 592, 593, 619, 784, 785, 823, 824, 919, 920, 958, 963, 966, 982, 1022], "tend": [4, 12, 27, 37, 39, 43, 52, 55, 57, 167, 168, 186, 197, 201, 202, 215, 242, 245, 254, 258, 275, 296, 344, 357, 359, 371, 373, 384, 394, 396, 398, 401, 403, 405, 422, 433, 638, 829, 860, 872, 920, 962, 963, 969, 982, 1001], "under": [4, 7, 11, 24, 25, 27, 41, 67, 78, 79, 103, 119, 122, 168, 197, 226, 235, 257, 264, 266, 267, 300, 337, 365, 371, 373, 375, 377, 379, 384, 387, 390, 394, 396, 398, 400, 401, 404, 405, 431, 436, 438, 455, 456, 457, 458, 459, 460, 461, 517, 524, 526, 528, 639, 640, 641, 687, 691, 692, 693, 700, 726, 738, 772, 773, 779, 780, 828, 962, 963, 964, 966, 969, 976, 980, 981, 982, 986, 987, 1001, 1008, 1010, 1011, 1013, 1016, 1020], "These": [4, 5, 7, 27, 51, 95, 97, 101, 115, 118, 164, 168, 186, 197, 198, 199, 201, 227, 264, 275, 277, 281, 296, 299, 306, 308, 313, 318, 320, 353, 357, 358, 364, 367, 368, 371, 373, 375, 378, 380, 382, 384, 387, 390, 393, 394, 395, 396, 399, 401, 403, 404, 405, 406, 427, 431, 433, 483, 493, 494, 500, 523, 552, 553, 587, 588, 653, 661, 662, 691, 717, 740, 762, 776, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 828, 829, 848, 955, 957, 960, 962, 963, 966, 967, 977, 979, 981, 986, 992, 996, 1001, 1008, 1014, 1016, 1017, 1018, 1021], "systemat": [4, 257, 373, 697, 712, 966, 1023], "reveal": [4, 167, 169, 342, 377, 393, 963, 1024], "form": [4, 9, 19, 32, 42, 60, 67, 95, 132, 156, 157, 167, 232, 248, 257, 317, 353, 365, 368, 371, 373, 375, 384, 385, 393, 395, 396, 399, 400, 401, 402, 403, 404, 406, 408, 410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 444, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 670, 672, 673, 674, 675, 676, 677, 678, 684, 779, 780, 781, 784, 785, 786, 789, 791, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 909, 955, 957, 959, 960, 962, 963, 966, 967, 970, 971, 972, 976, 981, 986, 992, 999, 1014, 1018, 1020], "explain": [4, 5, 12, 56, 73, 85, 86, 104, 122, 149, 154, 155, 168, 169, 197, 215, 226, 248, 267, 270, 305, 342, 343, 358, 369, 371, 375, 390, 392, 399, 401, 406, 478, 506, 509, 519, 526, 529, 534, 610, 633, 641, 654, 665, 706, 707, 708, 712, 769, 962, 969, 982, 985, 986, 997, 999, 1000, 1019, 1021, 1022], "lack": [4, 371, 373, 382, 400, 808, 898, 981, 1022], "deriv": [4, 19, 105, 106, 121, 154, 157, 169, 185, 186, 190, 198, 358, 366, 373, 398, 400, 402, 403, 404, 406, 408, 426, 430, 431, 450, 518, 591, 602, 607, 633, 654, 661, 665, 840, 841, 856, 862, 883, 884, 960, 962, 963, 966, 970, 972, 981, 1008, 1009, 1010, 1015, 1016, 1017, 1023], "address": [4, 48, 342, 366, 371, 396, 404, 642, 962, 963, 968, 969, 970, 971, 972, 976, 990, 999, 1016], "section": [4, 37, 95, 100, 113, 129, 135, 136, 137, 138, 154, 158, 166, 167, 168, 176, 181, 185, 186, 199, 222, 227, 237, 255, 257, 260, 266, 304, 305, 306, 311, 342, 343, 344, 353, 364, 366, 369, 371, 372, 373, 375, 376, 377, 378, 379, 385, 390, 394, 395, 397, 399, 400, 401, 403, 404, 405, 406, 424, 428, 444, 519, 599, 604, 607, 622, 630, 772, 780, 885, 888, 955, 960, 962, 966, 967, 969, 970, 972, 973, 980, 981, 983, 985, 999, 1001, 1008, 1010, 1011, 1012, 1015], "margin": [4, 12, 25, 27, 150, 151, 153, 154, 155, 164, 167, 168, 175, 216, 257, 299, 305, 324, 327, 329, 331, 340, 368, 394, 395, 401, 403, 406, 497, 595, 596, 616, 630, 661, 719, 812, 860, 872, 885, 888, 962, 966, 968, 972, 973, 976, 980, 981, 999, 1015, 1017], "construct": [4, 11, 70, 72, 110, 112, 114, 117, 129, 215, 227, 237, 239, 275, 290, 300, 302, 310, 313, 365, 368, 373, 380, 384, 396, 400, 401, 403, 404, 407, 419, 426, 427, 429, 430, 435, 437, 442, 448, 450, 452, 504, 520, 526, 529, 540, 541, 566, 572, 624, 673, 675, 676, 795, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 842, 843, 844, 845, 847, 888, 902, 904, 919, 920, 929, 955, 956, 958, 962, 963, 966, 967, 969, 976, 979, 981, 982, 987, 992, 996, 1013, 1015, 1016, 1019, 1022], "polynomialfeatur": [4, 176, 197, 198, 203, 237, 271, 311, 862, 962, 976, 1012, 1016, 1017, 1018, 1021, 1022, 1024], "coars": [4, 118, 377, 433, 446], "too": [4, 7, 12, 17, 44, 50, 55, 57, 62, 70, 74, 82, 99, 122, 161, 169, 181, 198, 219, 230, 243, 251, 255, 264, 272, 295, 305, 329, 342, 349, 350, 357, 368, 371, 377, 379, 382, 384, 396, 398, 400, 403, 404, 405, 408, 422, 434, 523, 573, 576, 664, 677, 692, 818, 819, 820, 821, 822, 848, 861, 863, 961, 963, 965, 966, 968, 969, 973, 999, 1009, 1012, 1015, 1016, 1017, 1018, 1020], "mani": [4, 7, 10, 19, 55, 56, 74, 78, 82, 116, 117, 118, 120, 123, 142, 146, 169, 197, 218, 230, 243, 251, 257, 264, 265, 269, 277, 299, 304, 305, 309, 310, 311, 312, 313, 342, 353, 357, 359, 366, 368, 370, 371, 383, 384, 385, 387, 393, 394, 396, 397, 398, 401, 403, 404, 405, 406, 408, 488, 538, 539, 542, 543, 544, 545, 549, 550, 551, 573, 576, 591, 594, 612, 624, 635, 639, 643, 644, 651, 653, 661, 662, 663, 677, 680, 684, 758, 762, 781, 785, 795, 840, 841, 856, 861, 863, 883, 891, 892, 893, 894, 955, 956, 958, 962, 963, 965, 966, 967, 968, 969, 972, 973, 974, 976, 979, 981, 983, 985, 986, 987, 990, 999, 1001, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1023, 1024], "featureunion": [4, 74, 363, 384, 395, 449, 614, 845, 956, 987, 990, 1003, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "hour_workday_interact": 4, "interaction_onli": [4, 858, 962, 976], "combin": [4, 12, 25, 27, 61, 70, 71, 73, 74, 95, 104, 105, 108, 120, 124, 133, 149, 155, 162, 164, 167, 181, 197, 214, 215, 222, 226, 231, 257, 258, 266, 268, 269, 286, 294, 305, 311, 312, 314, 332, 344, 348, 357, 363, 367, 368, 371, 376, 383, 384, 393, 394, 396, 397, 400, 401, 402, 403, 404, 405, 406, 408, 409, 430, 449, 451, 452, 458, 460, 461, 464, 465, 466, 474, 481, 493, 494, 500, 506, 509, 511, 516, 522, 523, 525, 527, 532, 534, 545, 547, 550, 552, 553, 595, 599, 601, 606, 609, 615, 619, 628, 631, 632, 637, 638, 643, 644, 645, 646, 647, 648, 651, 653, 657, 658, 659, 660, 661, 663, 664, 666, 669, 686, 714, 772, 781, 784, 785, 792, 793, 804, 806, 810, 842, 844, 848, 856, 857, 858, 863, 883, 940, 955, 958, 959, 962, 966, 967, 969, 972, 976, 979, 980, 983, 990, 997, 999, 1001, 1008, 1013, 1016, 1019, 1020, 1021, 1023, 1024], "ones": [4, 11, 34, 43, 55, 71, 81, 125, 149, 173, 181, 202, 226, 229, 257, 265, 268, 284, 303, 318, 339, 357, 358, 371, 379, 384, 396, 398, 400, 403, 435, 517, 551, 566, 595, 596, 629, 630, 643, 644, 655, 661, 688, 778, 783, 788, 799, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 858, 862, 925, 962, 966, 971, 972, 976, 981, 999, 1008, 1016, 1017, 1018], "previou": [4, 43, 53, 71, 95, 113, 119, 122, 129, 149, 154, 155, 166, 167, 168, 181, 183, 198, 230, 232, 257, 260, 264, 299, 304, 313, 342, 343, 344, 353, 357, 366, 371, 373, 376, 377, 379, 382, 384, 385, 387, 396, 403, 404, 453, 531, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 615, 631, 633, 637, 638, 643, 645, 647, 651, 652, 653, 654, 661, 662, 663, 665, 692, 800, 814, 817, 832, 840, 841, 880, 897, 962, 966, 970, 976, 987, 992, 1001, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "nice": [4, 67, 198, 299, 357, 401, 1001], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "078": [4, 14, 144, 147], "009": [4, 265, 343, 377], "104": [4, 24], "highlight": [4, 80, 92, 149, 150, 155, 215, 303, 315, 342, 344, 360, 371, 375, 376, 379, 382, 406, 428, 432, 449, 452, 475, 476, 481, 486, 489, 497, 500, 509, 523, 546, 547, 549, 550, 552, 584, 587, 613, 615, 617, 619, 625, 631, 633, 637, 643, 654, 665, 673, 686, 687, 702, 732, 772, 781, 784, 785, 787, 795, 809, 825, 827, 844, 848, 853, 856, 857, 858, 862, 863, 880, 881, 883, 888, 892, 915, 963, 966, 974, 976, 981, 1018, 1019, 1020, 1021, 1022, 1023], "anoth": [4, 37, 95, 100, 124, 146, 149, 157, 162, 167, 186, 205, 223, 226, 236, 243, 257, 259, 260, 263, 267, 287, 342, 344, 347, 353, 357, 359, 365, 366, 369, 371, 373, 377, 382, 384, 390, 393, 396, 400, 401, 403, 404, 405, 407, 427, 429, 437, 440, 447, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 493, 523, 525, 532, 658, 661, 677, 694, 704, 787, 842, 843, 864, 955, 961, 962, 963, 966, 967, 969, 972, 976, 980, 981, 992, 999, 1000, 1001, 1017, 1018], "either": [4, 10, 30, 71, 118, 119, 167, 185, 187, 227, 252, 261, 266, 282, 342, 351, 357, 358, 363, 366, 369, 371, 372, 373, 377, 384, 390, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 427, 432, 437, 472, 481, 497, 509, 518, 519, 521, 529, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 567, 568, 569, 573, 574, 575, 576, 578, 579, 582, 587, 592, 593, 595, 596, 607, 612, 615, 617, 618, 635, 639, 641, 649, 661, 663, 667, 668, 675, 682, 683, 687, 691, 692, 696, 697, 705, 708, 710, 711, 712, 719, 723, 724, 726, 736, 740, 753, 758, 762, 766, 769, 772, 773, 776, 781, 784, 785, 787, 795, 803, 804, 805, 806, 807, 808, 810, 813, 873, 874, 880, 883, 884, 891, 892, 893, 894, 898, 927, 955, 962, 966, 967, 968, 969, 970, 971, 974, 976, 980, 981, 992, 1000, 1001, 1008, 1011, 1017, 1018, 1019, 1022], "after": [4, 17, 20, 21, 26, 46, 53, 55, 70, 71, 75, 81, 97, 110, 120, 127, 129, 132, 142, 146, 154, 156, 158, 161, 167, 173, 190, 197, 235, 236, 239, 245, 257, 266, 277, 285, 287, 299, 300, 303, 304, 342, 343, 359, 366, 368, 369, 370, 371, 373, 375, 377, 378, 379, 382, 384, 390, 392, 393, 394, 396, 397, 400, 401, 404, 405, 406, 408, 427, 432, 435, 436, 437, 438, 441, 447, 500, 517, 521, 538, 539, 544, 545, 546, 547, 582, 612, 615, 643, 644, 651, 652, 653, 658, 660, 661, 662, 663, 677, 697, 710, 740, 776, 779, 780, 784, 785, 832, 839, 843, 856, 862, 883, 888, 889, 955, 956, 960, 962, 966, 970, 971, 976, 978, 980, 981, 982, 987, 992, 999, 1001, 1008, 1011, 1015, 1016, 1019, 1020, 1023], "quadrat": [4, 29, 35, 154, 158, 164, 211, 259, 312, 395, 425, 443, 446, 534, 535, 608, 633, 643, 644, 654, 661, 665, 701, 888, 889, 962, 963, 966, 969, 972, 976, 980, 981, 988, 1003, 1009], "tractabl": [4, 400, 619, 986, 1021], "nystr\u00f6m": 4, "latter": [4, 14, 247, 257, 266, 267, 285, 304, 337, 359, 368, 371, 384, 400, 403, 404, 410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 726, 779, 780, 781, 784, 785, 790, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 933, 969, 1017], "kernel_approxim": [4, 161, 164, 172, 173, 211, 226, 231, 311, 360, 662, 742, 743, 849, 958, 992, 1009, 1015, 1024], "nystroem": [4, 161, 211, 226, 231, 363, 625, 626, 627, 662, 849, 888, 889, 1003, 1009, 1015, 1018, 1020, 1021, 1022], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 138, 173, 257, 326, 333, 336, 437, 520, 605, 749, 758, 781, 858, 885, 886, 887, 888, 889, 962, 976, 999], "n_compon": [4, 5, 6, 12, 14, 44, 52, 57, 58, 59, 70, 72, 73, 74, 85, 86, 90, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 127, 173, 196, 218, 219, 220, 221, 222, 223, 226, 230, 231, 233, 237, 242, 243, 244, 245, 246, 247, 248, 256, 281, 286, 296, 304, 311, 313, 343, 373, 376, 377, 384, 399, 401, 408, 436, 437, 447, 449, 467, 468, 469, 470, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 624, 625, 626, 627, 673, 674, 675, 676, 677, 678, 679, 680, 681, 779, 780, 832, 839, 842, 875, 876, 877, 920, 958, 960, 963, 965, 969, 997, 1000, 1009, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022], "300": [4, 20, 21, 34, 38, 50, 58, 98, 110, 111, 112, 162, 187, 223, 226, 230, 246, 260, 287, 302, 311, 317, 335, 337, 373, 428, 432, 433, 444, 446, 624, 629, 630, 664, 675, 677, 679, 840, 962, 1018], "053": [4, 368, 377], "002": [4, 12, 146, 149, 181, 343, 368], "076": [4, 220, 871], "004": 4, "almost": [4, 120, 121, 199, 205, 271, 304, 320, 353, 364, 366, 375, 377, 382, 383, 384, 396, 400, 401, 455, 456, 457, 458, 460, 461, 462, 779, 955, 961, 962, 965, 966, 981, 1000, 1001, 1016, 1021], "rival": [4, 880, 979], "intermedi": [4, 7, 52, 55, 115, 122, 329, 404, 544, 545, 604, 843, 966, 1020], "compound": [4, 215, 404, 595, 597, 665, 708, 736, 962, 1001], "one_hot_poly_pipelin": 4, "082": [4, 6, 184, 216, 334, 340], "006": [4, 377], "111": [4, 7, 8, 16, 67, 90, 101, 102, 109, 194, 212, 222, 257, 277, 835, 1011], "competit": [4, 122, 342, 403, 629, 969], "low": [4, 11, 12, 37, 50, 81, 86, 97, 99, 103, 113, 125, 146, 169, 190, 192, 197, 199, 211, 218, 220, 226, 230, 235, 242, 243, 245, 248, 251, 257, 259, 263, 264, 272, 283, 284, 295, 303, 305, 306, 320, 328, 329, 342, 351, 367, 368, 371, 376, 379, 384, 387, 393, 394, 395, 400, 401, 404, 427, 434, 453, 506, 509, 520, 567, 574, 588, 664, 677, 681, 690, 710, 726, 773, 828, 857, 864, 881, 920, 931, 934, 955, 958, 961, 962, 963, 965, 966, 969, 971, 972, 973, 974, 976, 978, 981, 982, 988, 1003, 1009, 1012, 1013, 1014, 1016, 1017, 1022, 1023], "rank": [4, 17, 25, 80, 99, 103, 116, 144, 169, 170, 215, 255, 257, 265, 367, 391, 393, 394, 398, 399, 401, 403, 404, 493, 494, 506, 509, 534, 535, 578, 579, 591, 633, 642, 654, 665, 681, 684, 705, 710, 711, 723, 724, 740, 776, 784, 785, 920, 955, 957, 958, 963, 974, 976, 990, 1003, 1009, 1014, 1017, 1018, 1022, 1023], "fact": [4, 11, 19, 25, 81, 86, 122, 169, 230, 239, 342, 365, 378, 382, 384, 399, 401, 402, 403, 404, 634, 653, 655, 689, 960, 962, 969, 976, 980, 981, 987, 990, 1022], "smoother": [4, 5, 122, 168, 295, 402], "allow": [4, 56, 58, 74, 75, 99, 100, 113, 114, 127, 149, 154, 156, 158, 191, 197, 215, 219, 227, 230, 236, 238, 239, 242, 257, 275, 309, 310, 311, 312, 314, 334, 342, 351, 353, 357, 365, 369, 371, 372, 373, 375, 378, 380, 384, 385, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 426, 429, 430, 431, 449, 451, 452, 508, 509, 519, 538, 539, 544, 545, 546, 547, 552, 553, 567, 568, 574, 578, 579, 582, 588, 595, 596, 600, 612, 613, 615, 619, 623, 628, 631, 632, 637, 638, 643, 645, 646, 647, 648, 661, 663, 666, 667, 668, 669, 673, 677, 746, 749, 758, 762, 765, 774, 775, 779, 780, 781, 783, 784, 785, 788, 790, 792, 795, 802, 809, 829, 838, 845, 846, 849, 850, 855, 867, 876, 878, 879, 880, 883, 884, 891, 892, 893, 894, 901, 903, 904, 914, 915, 930, 955, 956, 958, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 976, 978, 979, 980, 981, 982, 986, 987, 990, 992, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 53, 55, 57, 65, 73, 80, 81, 95, 97, 99, 100, 106, 120, 129, 149, 153, 155, 157, 158, 168, 181, 185, 186, 199, 205, 218, 220, 222, 223, 229, 247, 256, 257, 258, 268, 285, 286, 287, 304, 309, 331, 332, 337, 342, 343, 347, 358, 368, 369, 371, 372, 373, 376, 377, 380, 382, 383, 384, 385, 393, 396, 398, 399, 401, 403, 404, 405, 407, 426, 429, 430, 431, 435, 436, 437, 438, 447, 516, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 543, 550, 567, 574, 595, 596, 632, 635, 638, 639, 640, 641, 643, 644, 656, 673, 692, 713, 714, 722, 766, 767, 768, 771, 772, 776, 781, 795, 825, 826, 827, 829, 831, 833, 834, 835, 856, 857, 862, 875, 876, 877, 891, 892, 894, 900, 919, 920, 922, 955, 956, 958, 961, 962, 963, 965, 966, 967, 970, 972, 976, 980, 981, 982, 985, 987, 990, 992, 994, 996, 997, 999, 1000, 1001, 1008, 1015, 1016, 1017, 1018, 1020, 1022, 1023], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 53, 54, 55, 57, 59, 66, 70, 71, 72, 75, 95, 98, 100, 109, 115, 119, 121, 122, 123, 124, 142, 149, 152, 153, 154, 155, 156, 157, 162, 164, 166, 167, 168, 175, 176, 179, 181, 184, 195, 197, 198, 203, 205, 210, 211, 213, 215, 216, 218, 227, 229, 232, 236, 238, 239, 247, 255, 257, 258, 259, 260, 265, 266, 271, 277, 293, 299, 309, 310, 312, 313, 322, 326, 327, 328, 329, 330, 331, 335, 337, 339, 342, 343, 348, 353, 357, 358, 360, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 382, 383, 384, 387, 390, 394, 396, 397, 398, 399, 401, 402, 404, 405, 407, 408, 422, 425, 428, 429, 430, 432, 433, 435, 437, 439, 442, 443, 444, 445, 446, 449, 450, 453, 454, 456, 457, 459, 463, 473, 474, 476, 477, 480, 482, 488, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 557, 560, 566, 567, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 589, 592, 593, 594, 595, 596, 600, 602, 604, 605, 607, 608, 612, 613, 616, 617, 618, 619, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 687, 688, 689, 691, 696, 697, 701, 704, 706, 707, 708, 712, 716, 718, 719, 722, 724, 725, 726, 734, 739, 741, 745, 746, 747, 749, 752, 755, 758, 762, 763, 764, 765, 766, 767, 769, 773, 774, 775, 776, 778, 779, 780, 781, 783, 784, 785, 786, 787, 792, 793, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 852, 853, 855, 859, 860, 861, 862, 863, 864, 867, 869, 872, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 901, 910, 912, 913, 914, 919, 920, 932, 933, 934, 936, 937, 940, 941, 950, 955, 956, 957, 959, 961, 963, 964, 967, 969, 970, 971, 972, 973, 974, 976, 979, 980, 982, 986, 987, 988, 992, 995, 996, 997, 1001, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "abl": [4, 5, 9, 24, 47, 55, 61, 82, 86, 99, 100, 126, 155, 167, 181, 186, 197, 213, 215, 222, 263, 268, 329, 353, 357, 358, 359, 365, 369, 371, 373, 375, 376, 382, 396, 398, 400, 404, 470, 488, 519, 808, 855, 955, 956, 962, 965, 966, 967, 972, 976, 979, 982, 983, 987, 992, 1000, 1001, 1014, 1015, 1019], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 173, 181, 279, 337, 344, 357, 392, 398, 404, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 791, 823, 824, 891, 892, 893, 894, 955, 966, 969, 982, 990, 995, 999, 1011, 1012], "depth": [4, 109, 115, 119, 123, 125, 130, 347, 349, 350, 351, 357, 369, 371, 375, 383, 403, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 823, 824, 828, 891, 892, 893, 894, 895, 897, 925, 971, 972, 982, 1010, 1011, 1019], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 70, 71, 72, 73, 110, 116, 120, 121, 127, 142, 143, 145, 150, 170, 173, 197, 205, 212, 213, 244, 255, 256, 257, 258, 259, 261, 263, 272, 279, 285, 286, 287, 296, 301, 304, 317, 318, 320, 329, 332, 353, 357, 373, 383, 384, 395, 396, 400, 403, 404, 405, 413, 422, 434, 454, 456, 457, 463, 517, 519, 526, 534, 535, 536, 538, 540, 542, 543, 544, 546, 549, 550, 552, 554, 595, 619, 643, 644, 651, 653, 656, 659, 660, 661, 677, 682, 688, 693, 698, 703, 718, 722, 727, 738, 747, 771, 776, 778, 807, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 825, 830, 832, 833, 840, 878, 879, 883, 885, 888, 891, 893, 919, 920, 955, 960, 961, 962, 963, 967, 969, 970, 974, 978, 980, 982, 996, 1001, 1016, 1017], "On": [4, 12, 17, 26, 67, 71, 72, 85, 86, 100, 109, 113, 115, 116, 117, 122, 125, 126, 129, 132, 141, 143, 153, 154, 167, 168, 169, 178, 185, 186, 199, 227, 228, 229, 230, 232, 236, 237, 238, 239, 242, 244, 247, 252, 253, 254, 255, 257, 258, 259, 260, 262, 264, 269, 296, 299, 301, 303, 304, 305, 310, 311, 313, 314, 319, 329, 351, 357, 369, 372, 373, 375, 382, 384, 390, 394, 396, 400, 401, 403, 405, 406, 628, 641, 676, 719, 745, 864, 955, 959, 962, 965, 966, 968, 972, 979, 981, 996, 999], "contrari": [4, 13, 167, 219, 223, 242, 260, 299, 342, 365, 396, 481, 529, 591, 798, 864, 962, 968, 972], "significantli": [4, 24, 25, 37, 78, 79, 120, 146, 167, 168, 169, 197, 205, 213, 215, 257, 277, 310, 311, 343, 344, 353, 358, 375, 396, 401, 403, 404, 409, 454, 459, 464, 465, 523, 525, 532, 543, 550, 631, 632, 637, 638, 645, 646, 647, 648, 669, 677, 823, 824, 958, 962, 963, 969, 974, 981, 1008, 1010, 1011, 1015, 1016, 1021, 1022, 1023], "over": [4, 7, 8, 9, 16, 24, 26, 27, 31, 37, 50, 55, 56, 72, 74, 95, 113, 125, 141, 145, 149, 157, 161, 166, 168, 179, 191, 197, 205, 215, 226, 257, 258, 260, 262, 264, 265, 266, 269, 282, 290, 293, 294, 301, 312, 313, 317, 342, 343, 357, 358, 359, 366, 367, 370, 371, 372, 373, 377, 383, 384, 392, 394, 395, 396, 397, 400, 401, 402, 403, 404, 406, 408, 431, 434, 449, 457, 494, 518, 519, 521, 522, 523, 524, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 566, 567, 573, 574, 576, 579, 587, 617, 618, 619, 629, 630, 631, 632, 637, 638, 643, 645, 646, 647, 648, 650, 651, 652, 653, 661, 662, 663, 670, 671, 682, 701, 703, 723, 747, 772, 775, 779, 781, 784, 785, 787, 792, 793, 795, 804, 805, 806, 807, 808, 810, 839, 840, 841, 842, 858, 862, 883, 900, 909, 934, 955, 962, 963, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 979, 980, 981, 982, 986, 987, 990, 997, 1000, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "compet": 4, "access": [4, 49, 78, 243, 248, 342, 351, 357, 358, 371, 372, 373, 379, 382, 384, 385, 396, 398, 399, 403, 404, 406, 435, 442, 449, 521, 552, 553, 554, 555, 602, 684, 841, 842, 843, 898, 962, 965, 966, 972, 973, 974, 980, 981, 987, 990, 992, 1000, 1001, 1008, 1010, 1014, 1015, 1016, 1017, 1020, 1022, 1023, 1024], "requir": [4, 7, 13, 25, 45, 46, 48, 53, 55, 57, 58, 67, 70, 90, 99, 101, 102, 115, 119, 123, 125, 129, 146, 168, 181, 186, 194, 197, 215, 218, 220, 227, 230, 239, 258, 266, 268, 277, 279, 299, 304, 311, 312, 342, 343, 344, 365, 368, 369, 371, 373, 375, 377, 379, 382, 384, 385, 387, 392, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 413, 422, 423, 424, 429, 431, 435, 437, 442, 447, 449, 452, 454, 467, 468, 469, 481, 493, 506, 509, 520, 526, 534, 535, 536, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 557, 564, 565, 566, 595, 596, 604, 612, 617, 618, 619, 628, 643, 644, 651, 653, 656, 659, 660, 661, 662, 663, 671, 674, 676, 677, 678, 680, 684, 708, 713, 714, 726, 731, 733, 736, 747, 768, 771, 781, 784, 785, 788, 790, 795, 806, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 833, 834, 835, 840, 843, 844, 845, 847, 857, 858, 859, 861, 863, 871, 875, 876, 878, 879, 883, 884, 885, 888, 891, 892, 893, 894, 932, 952, 955, 960, 961, 962, 963, 966, 967, 968, 969, 970, 972, 973, 976, 980, 981, 982, 987, 992, 999, 1001, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "geograph": [4, 11, 290, 366, 483], "repartit": 4, "immobil": 4, "quant": 4, "predictionerrordisplai": [4, 75, 129, 167, 253, 314, 966, 1023], "nrow": [4, 5, 32, 57, 66, 73, 95, 158, 168, 197, 199, 205, 215, 218, 219, 222, 259, 260, 277, 301, 303, 304, 314, 318, 336, 337, 997], "ncol": [4, 5, 32, 53, 57, 66, 95, 100, 106, 168, 197, 198, 199, 205, 215, 218, 219, 229, 253, 259, 260, 268, 277, 294, 300, 301, 303, 304, 314, 336, 337, 343], "sharex": [4, 7, 14, 73, 92, 100, 130, 158, 168, 199, 235, 259, 282, 320, 997], "sharei": [4, 75, 92, 100, 106, 130, 158, 168, 197, 199, 205, 235, 259, 268, 282, 300, 305, 336, 337, 343], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 75, 129, 167, 253, 314, 686], "residual_vs_predict": [4, 75, 253, 314, 686], "axis_idx": 4, "kind": [4, 9, 12, 24, 25, 75, 104, 129, 141, 167, 168, 247, 251, 253, 266, 306, 311, 314, 326, 329, 342, 358, 359, 364, 366, 371, 373, 377, 382, 383, 394, 396, 399, 400, 401, 403, 404, 405, 473, 474, 488, 493, 494, 506, 509, 573, 617, 618, 686, 912, 962, 968, 973, 982, 1011, 1020, 1022, 1023], "enumer": [4, 8, 9, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 34, 37, 39, 40, 41, 42, 43, 44, 45, 50, 55, 59, 60, 61, 62, 70, 79, 81, 82, 86, 96, 98, 105, 109, 113, 120, 121, 123, 124, 135, 151, 153, 158, 170, 177, 179, 188, 197, 219, 220, 223, 226, 231, 234, 235, 242, 243, 244, 245, 247, 248, 252, 259, 260, 266, 267, 282, 286, 287, 289, 296, 301, 302, 317, 318, 320, 322, 327, 329, 336, 337, 342, 348, 366, 544, 545, 549, 550, 765, 782, 783, 786, 788, 789, 790, 791, 794, 796, 797, 798, 799, 800, 801, 802], "pred": [4, 7, 11, 32, 338, 342, 366, 633, 654, 665, 682, 687, 691, 703, 713, 714, 722, 767, 768, 771, 772, 966], "zip": [4, 5, 8, 12, 24, 26, 31, 32, 37, 38, 40, 42, 45, 49, 55, 63, 64, 65, 75, 86, 92, 95, 96, 99, 104, 105, 106, 110, 112, 114, 129, 130, 155, 161, 164, 167, 168, 169, 182, 188, 189, 197, 205, 206, 218, 230, 243, 247, 248, 255, 259, 260, 261, 264, 266, 277, 282, 285, 293, 294, 295, 301, 303, 304, 305, 321, 326, 337, 338, 348, 369, 403, 807, 976, 1001, 1004], "disp": [4, 32, 112, 125, 126, 251, 260, 304, 310, 326, 331, 423, 616, 682, 685, 686, 832], "from_predict": [4, 32, 75, 129, 167, 235, 253, 264, 266, 312, 317, 342, 378, 423, 616, 683, 703, 711, 766, 768, 771, 772, 773, 966, 1005, 1021, 1022, 1023, 1024], "y_true": [4, 19, 32, 59, 75, 129, 152, 197, 207, 215, 245, 320, 371, 417, 423, 424, 450, 467, 468, 469, 537, 539, 541, 542, 543, 545, 547, 549, 550, 553, 555, 596, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 664, 682, 683, 685, 686, 687, 688, 692, 693, 694, 697, 698, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 766, 767, 768, 769, 771, 772, 773, 776, 778, 816, 817, 826, 834, 841, 884, 886, 889, 892, 894, 966, 1009, 1014, 1015, 1016, 1017, 1019, 1020, 1022, 1023], "y_pred": [4, 6, 7, 25, 30, 32, 34, 44, 57, 62, 70, 75, 109, 122, 123, 129, 143, 167, 197, 199, 204, 207, 212, 214, 215, 226, 227, 235, 253, 255, 260, 284, 288, 296, 304, 320, 321, 353, 371, 378, 384, 403, 417, 424, 450, 467, 468, 469, 534, 537, 539, 541, 542, 543, 545, 547, 549, 550, 552, 553, 555, 596, 616, 620, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 657, 658, 659, 660, 661, 663, 664, 665, 682, 683, 685, 686, 687, 688, 693, 697, 698, 703, 706, 707, 708, 712, 713, 714, 718, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 767, 768, 769, 771, 772, 778, 781, 784, 785, 795, 804, 814, 816, 817, 826, 834, 841, 843, 883, 884, 885, 886, 887, 888, 889, 892, 894, 966, 968, 997, 1014, 1015, 1017, 1019, 1023, 1024], "scatter_kwarg": [4, 75, 129, 167, 686], "set_xtick": [4, 8, 10, 16, 31, 34, 43, 60, 64, 106, 127, 131, 168, 170, 188, 213, 231, 242, 268, 269, 275, 293, 295, 301, 302, 326], "num": [4, 12, 71, 146, 149, 154, 155, 156, 168, 169, 199, 264, 265, 313, 617], "set_ytick": [4, 16, 31, 34, 43, 60, 64, 106, 127, 161, 162, 170, 188, 213, 242, 268, 293, 295, 301, 302, 326, 344], "loc": [4, 7, 8, 9, 24, 26, 33, 40, 72, 75, 79, 80, 81, 85, 97, 99, 103, 104, 105, 109, 112, 113, 114, 120, 121, 122, 123, 124, 126, 129, 131, 132, 136, 142, 149, 150, 156, 158, 167, 168, 179, 182, 187, 191, 197, 198, 199, 200, 203, 204, 207, 210, 211, 214, 215, 221, 229, 230, 231, 232, 233, 244, 245, 252, 255, 256, 257, 260, 261, 264, 267, 270, 271, 272, 282, 283, 294, 300, 303, 304, 310, 313, 319, 328, 331, 336, 342, 348, 350, 795, 860, 872], "upper": [4, 7, 9, 24, 72, 75, 79, 80, 81, 109, 112, 113, 114, 121, 122, 123, 124, 129, 131, 142, 153, 155, 158, 167, 191, 197, 203, 204, 207, 211, 214, 215, 230, 233, 234, 256, 257, 258, 282, 283, 294, 304, 320, 328, 331, 336, 396, 402, 448, 573, 574, 576, 580, 598, 599, 600, 602, 604, 605, 607, 608, 610, 617, 618, 620, 622, 635, 639, 662, 719, 856, 857, 885, 886, 887, 907, 965, 966, 969, 976, 980, 981, 982, 1016], "bbox_to_anchor": [4, 37, 158, 262, 336], "set_aspect": [4, 152, 208, 244, 338], "equal": [4, 11, 12, 26, 37, 39, 53, 60, 80, 86, 110, 122, 152, 167, 198, 199, 201, 208, 214, 236, 244, 247, 251, 255, 257, 266, 287, 301, 305, 329, 331, 338, 343, 366, 367, 371, 373, 384, 393, 394, 396, 400, 401, 403, 404, 409, 422, 425, 426, 427, 428, 430, 432, 434, 439, 444, 445, 448, 454, 459, 464, 465, 488, 497, 500, 504, 517, 518, 519, 524, 526, 528, 529, 534, 535, 536, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 573, 578, 579, 582, 584, 585, 592, 593, 610, 613, 614, 617, 618, 619, 620, 622, 626, 627, 630, 634, 643, 644, 656, 684, 688, 703, 705, 713, 752, 767, 771, 772, 776, 778, 781, 782, 784, 785, 794, 795, 799, 804, 811, 815, 816, 823, 824, 825, 826, 831, 832, 833, 834, 835, 840, 841, 846, 847, 848, 855, 858, 861, 862, 863, 864, 866, 873, 880, 883, 884, 890, 891, 892, 893, 894, 909, 920, 941, 947, 960, 962, 966, 967, 969, 970, 972, 976, 980, 981, 982, 1000, 1001, 1009, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "adjust": [4, 9, 36, 38, 49, 58, 68, 78, 122, 164, 226, 231, 238, 258, 309, 321, 337, 343, 378, 396, 401, 403, 404, 509, 538, 539, 542, 544, 546, 547, 549, 643, 644, 651, 653, 659, 660, 661, 689, 690, 693, 699, 700, 739, 741, 770, 777, 818, 819, 821, 822, 853, 875, 876, 883, 884, 885, 888, 891, 893, 909, 965, 966, 970, 976, 999, 1005, 1008, 1014, 1024], "box": [4, 10, 30, 55, 168, 169, 219, 299, 303, 378, 401, 403, 497, 540, 541, 859, 871, 895, 897, 966, 967, 973, 976, 982, 986, 992, 1016], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 157, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 347, 348, 349, 350, 351, 358, 359, 371, 377, 382, 383, 387, 393, 394, 398, 400, 401, 402, 403, 405, 406, 423, 487, 544, 578, 579, 616, 617, 682, 683, 685, 686, 687, 698, 787, 895, 896, 897, 955, 960, 961, 963, 965, 966, 968, 969, 970, 972, 973, 976, 980, 981, 987, 996, 997, 1001, 1010, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1022], "seem": [4, 9, 46, 55, 122, 168, 197, 222, 226, 258, 294, 303, 342, 343, 370, 371, 376, 400, 486, 962, 966], "regim": [4, 384, 883, 884, 965], "overal": [4, 43, 48, 113, 129, 154, 215, 254, 277, 304, 305, 343, 357, 370, 371, 377, 393, 394, 403, 406, 432, 434, 449, 456, 457, 463, 534, 864, 963, 966, 982, 990, 1018], "closer": [4, 27, 37, 98, 100, 128, 149, 168, 176, 344, 394, 396, 401, 434, 538, 613, 697, 825, 826, 831, 833, 834, 835, 981, 1015], "diagon": [4, 25, 40, 82, 85, 215, 235, 244, 247, 248, 251, 329, 393, 396, 398, 406, 438, 456, 457, 463, 466, 496, 498, 512, 517, 535, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 635, 636, 639, 640, 641, 667, 668, 686, 700, 774, 779, 780, 827, 835, 960, 962, 965, 966, 969, 976, 1014, 1016, 1017, 1018], "obtain": [4, 7, 9, 12, 27, 48, 55, 57, 58, 71, 74, 75, 100, 103, 119, 122, 123, 127, 135, 146, 151, 153, 167, 168, 181, 197, 199, 211, 222, 242, 243, 244, 253, 257, 258, 259, 263, 266, 304, 312, 327, 343, 344, 351, 353, 366, 368, 382, 384, 390, 394, 396, 398, 399, 401, 403, 404, 405, 406, 422, 427, 454, 481, 517, 518, 540, 541, 542, 543, 544, 545, 548, 549, 550, 578, 591, 599, 630, 644, 646, 651, 653, 657, 659, 661, 662, 672, 693, 697, 710, 723, 740, 775, 787, 808, 811, 812, 815, 829, 840, 860, 872, 885, 888, 891, 892, 920, 956, 958, 960, 962, 963, 965, 966, 967, 969, 970, 972, 973, 976, 980, 981, 1014, 1016, 1019, 1021, 1022, 1023], "slightli": [4, 25, 64, 82, 113, 119, 122, 125, 129, 146, 149, 150, 151, 169, 176, 197, 215, 221, 223, 265, 277, 309, 326, 344, 370, 371, 382, 394, 396, 403, 404, 406, 408, 431, 573, 574, 576, 623, 643, 784, 785, 883, 885, 888, 919, 920, 955, 962, 976, 980, 981, 1017, 1021, 1022], "cost": [4, 39, 98, 149, 164, 173, 218, 231, 259, 266, 309, 329, 343, 344, 346, 352, 371, 377, 379, 382, 396, 403, 463, 485, 522, 523, 524, 531, 542, 543, 544, 545, 549, 550, 587, 595, 604, 612, 631, 632, 637, 638, 645, 646, 647, 648, 653, 657, 659, 661, 663, 672, 673, 677, 809, 883, 884, 885, 888, 891, 892, 893, 894, 920, 958, 962, 963, 966, 969, 979, 980, 981, 988, 1003, 1014, 1017, 1018], "durat": [4, 8, 197, 215, 279, 344, 358, 932, 933, 962], "regressor": [4, 75, 86, 123, 128, 129, 132, 149, 154, 162, 164, 167, 175, 177, 179, 181, 197, 200, 214, 215, 216, 310, 311, 357, 371, 373, 382, 384, 394, 397, 406, 417, 421, 450, 467, 468, 469, 470, 509, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 550, 551, 552, 553, 554, 555, 590, 591, 594, 596, 617, 618, 620, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 652, 654, 655, 657, 658, 663, 664, 686, 811, 812, 815, 816, 817, 826, 834, 839, 840, 841, 844, 850, 858, 863, 864, 884, 886, 889, 891, 892, 893, 894, 897, 912, 914, 955, 956, 962, 966, 967, 969, 974, 980, 986, 988, 996, 1003, 1008, 1009, 1013, 1014, 1015, 1017, 1018, 1021, 1022, 1023], "mlpregressor": [4, 168, 236, 359, 839, 840, 970, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "hidden": [4, 168, 295, 296, 379, 393, 401, 839, 840, 841, 970, 971, 986, 1008, 1019], "layer": [4, 164, 213, 236, 292, 295, 296, 297, 357, 379, 403, 499, 500, 507, 552, 809, 839, 840, 841, 844, 863, 971, 988, 1003, 1014], "cyclic": [4, 631, 632, 637, 638, 645, 646, 647, 648, 1020], "within": [4, 60, 115, 116, 117, 128, 143, 145, 146, 193, 198, 199, 209, 215, 236, 255, 256, 260, 270, 299, 300, 311, 327, 330, 337, 344, 353, 357, 366, 371, 375, 380, 382, 384, 385, 393, 394, 396, 397, 400, 402, 403, 407, 429, 433, 446, 448, 449, 454, 459, 500, 534, 552, 553, 554, 555, 578, 579, 617, 677, 681, 684, 695, 709, 765, 779, 780, 786, 787, 799, 800, 807, 808, 823, 824, 825, 826, 831, 833, 834, 835, 842, 843, 844, 856, 864, 868, 869, 871, 872, 873, 874, 885, 886, 887, 888, 889, 891, 892, 893, 894, 955, 960, 962, 963, 969, 972, 976, 979, 981, 982, 987, 990, 992, 996, 999, 1001, 1010, 1011, 1015, 1016, 1021, 1022], "finer": [4, 37, 279, 329, 358, 396, 400, 955, 969, 1018], "resolut": [4, 11, 17, 105, 168, 289, 290, 329, 385, 394, 992, 1018], "taken": [4, 7, 31, 42, 53, 55, 124, 154, 167, 230, 231, 245, 263, 301, 366, 368, 370, 371, 375, 384, 390, 395, 396, 400, 404, 406, 408, 425, 518, 568, 569, 631, 632, 635, 637, 638, 639, 643, 644, 645, 646, 647, 648, 662, 664, 666, 669, 680, 856, 857, 877, 880, 886, 887, 966, 968, 976, 978, 1014, 1017, 1020, 1021], "everi": [4, 95, 161, 195, 198, 219, 232, 243, 248, 266, 312, 353, 366, 369, 371, 373, 375, 379, 384, 396, 398, 400, 401, 404, 425, 439, 493, 516, 521, 524, 530, 542, 544, 545, 549, 575, 576, 588, 631, 632, 634, 637, 638, 644, 645, 646, 647, 648, 649, 650, 651, 653, 657, 658, 659, 660, 661, 670, 671, 672, 677, 681, 738, 755, 763, 764, 794, 832, 891, 893, 895, 897, 909, 959, 961, 966, 967, 968, 976, 982, 990, 996, 1008, 1012, 1014, 1017, 1021], "offer": [4, 373, 379, 382, 383, 387, 400, 401, 403, 404, 955, 956, 967, 970, 982, 986, 987, 990, 1014], "view": [4, 16, 30, 42, 46, 78, 97, 168, 194, 237, 357, 359, 371, 396, 404, 521, 630, 642, 823, 824, 898, 962, 963], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 55, 57, 61, 78, 79, 80, 81, 82, 91, 96, 97, 98, 105, 111, 112, 122, 125, 159, 162, 176, 181, 187, 226, 230, 244, 245, 249, 282, 290, 303, 326, 360, 363, 367, 373, 376, 384, 396, 398, 401, 402, 408, 437, 454, 455, 456, 457, 458, 459, 460, 461, 481, 489, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 515, 517, 529, 534, 535, 548, 595, 596, 598, 599, 600, 602, 603, 604, 607, 608, 610, 612, 628, 629, 657, 662, 665, 688, 708, 725, 736, 760, 779, 780, 781, 795, 818, 819, 820, 821, 822, 823, 824, 828, 859, 863, 871, 875, 876, 877, 960, 962, 963, 964, 972, 988, 990, 1000, 1002, 1003, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1018, 1020, 1022], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 57, 58, 60, 61, 62, 64, 65, 66, 71, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 101, 102, 103, 108, 111, 113, 115, 116, 117, 118, 121, 122, 124, 125, 126, 129, 132, 133, 138, 141, 142, 145, 149, 150, 153, 155, 156, 158, 161, 162, 164, 165, 166, 171, 176, 177, 178, 179, 181, 186, 187, 191, 192, 195, 196, 197, 198, 199, 200, 203, 204, 206, 210, 211, 214, 215, 218, 219, 221, 222, 223, 225, 226, 231, 232, 234, 235, 240, 242, 243, 245, 246, 247, 248, 250, 252, 254, 257, 258, 260, 262, 264, 266, 267, 268, 269, 271, 273, 275, 277, 282, 283, 284, 289, 293, 300, 302, 303, 306, 310, 311, 313, 317, 318, 321, 322, 328, 329, 331, 332, 334, 335, 336, 337, 339, 342, 343, 349, 350, 357, 358, 360, 363, 367, 374, 376, 382, 383, 384, 391, 394, 396, 404, 405, 419, 425, 428, 432, 434, 436, 437, 438, 439, 443, 444, 445, 447, 449, 454, 455, 456, 457, 458, 459, 460, 461, 473, 474, 476, 477, 480, 481, 482, 487, 488, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 520, 521, 523, 524, 525, 526, 529, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 558, 567, 568, 569, 574, 592, 593, 595, 596, 612, 615, 617, 619, 624, 625, 626, 627, 628, 631, 632, 634, 635, 637, 638, 639, 643, 645, 646, 647, 648, 655, 656, 657, 661, 662, 663, 664, 674, 675, 676, 677, 678, 679, 680, 686, 689, 690, 693, 715, 727, 765, 775, 779, 780, 781, 783, 784, 785, 786, 793, 795, 796, 797, 798, 799, 800, 801, 802, 808, 809, 814, 816, 817, 818, 819, 820, 822, 823, 824, 828, 832, 839, 840, 841, 843, 846, 848, 857, 860, 864, 872, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 888, 889, 891, 892, 893, 894, 906, 919, 920, 937, 940, 956, 958, 961, 963, 965, 966, 970, 971, 972, 974, 976, 981, 982, 986, 987, 988, 992, 996, 997, 999, 1000, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "constant": [4, 105, 113, 152, 156, 162, 167, 185, 198, 199, 201, 215, 228, 237, 260, 289, 294, 296, 300, 302, 310, 337, 339, 353, 363, 373, 380, 384, 393, 403, 406, 417, 431, 450, 467, 468, 469, 496, 498, 519, 523, 525, 532, 534, 535, 536, 537, 539, 541, 543, 545, 547, 550, 553, 555, 575, 591, 594, 596, 598, 612, 615, 617, 618, 620, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 661, 662, 663, 664, 665, 672, 674, 678, 680, 706, 707, 708, 712, 759, 761, 769, 816, 817, 826, 834, 840, 841, 848, 859, 862, 871, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 960, 962, 963, 966, 968, 969, 976, 980, 982, 1003, 1011, 1016, 1018, 1020, 1021, 1022], "varianc": [4, 5, 27, 44, 55, 57, 62, 73, 78, 80, 85, 86, 95, 96, 97, 100, 103, 104, 106, 108, 124, 133, 156, 158, 164, 167, 175, 177, 181, 186, 197, 199, 202, 215, 216, 247, 254, 257, 260, 266, 267, 270, 286, 293, 299, 304, 343, 353, 363, 367, 380, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 406, 408, 426, 430, 434, 448, 506, 509, 517, 518, 519, 526, 529, 534, 535, 540, 541, 543, 544, 545, 550, 588, 592, 593, 596, 610, 628, 629, 630, 637, 641, 642, 645, 647, 657, 658, 659, 660, 661, 672, 695, 712, 769, 779, 780, 821, 832, 847, 853, 859, 861, 863, 869, 871, 873, 874, 892, 894, 941, 942, 943, 947, 960, 961, 962, 964, 969, 970, 971, 978, 980, 981, 982, 983, 988, 997, 999, 1000, 1003, 1008, 1016, 1018, 1019, 1020, 1021, 1022, 1023], "poisson": [4, 164, 175, 216, 233, 367, 403, 449, 450, 481, 508, 537, 543, 547, 550, 633, 654, 657, 665, 691, 708, 729, 733, 734, 736, 809, 843, 844, 847, 848, 856, 857, 858, 863, 892, 894, 924, 962, 982, 1018, 1019, 1020, 1021, 1022, 1024], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 100, 130, 138, 173, 211, 226, 231, 232, 255, 257, 259, 262, 268, 272, 311, 317, 318, 320, 322, 326, 328, 329, 332, 333, 335, 336, 339, 399, 401, 406, 437, 520, 547, 604, 605, 624, 625, 626, 628, 629, 630, 633, 665, 670, 676, 708, 731, 736, 743, 750, 759, 760, 761, 779, 792, 795, 878, 879, 880, 885, 886, 887, 888, 889, 955, 958, 961, 962, 964, 979, 981, 992, 996, 997, 999, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1022, 1023, 1024], "achiev": [4, 12, 17, 19, 27, 31, 98, 110, 118, 120, 127, 157, 173, 197, 205, 254, 257, 264, 304, 320, 329, 332, 337, 342, 353, 357, 359, 365, 366, 368, 373, 377, 382, 384, 393, 394, 396, 400, 401, 403, 404, 538, 543, 550, 625, 634, 661, 663, 692, 724, 747, 784, 785, 819, 863, 955, 956, 958, 962, 966, 976, 979, 981, 989, 1001, 1021], "gridsearchcv": [4, 54, 69, 71, 73, 74, 76, 78, 103, 164, 232, 237, 247, 250, 255, 256, 257, 258, 262, 265, 268, 273, 279, 281, 296, 301, 311, 329, 353, 358, 373, 382, 384, 397, 400, 487, 505, 525, 526, 560, 584, 592, 638, 688, 726, 792, 795, 843, 853, 883, 891, 955, 962, 966, 970, 980, 981, 986, 987, 996, 997, 1001, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023], "tweedieregressor": [4, 310, 313, 633, 654, 962, 1019, 1022, 1023], "power": [4, 7, 17, 120, 166, 198, 215, 248, 260, 265, 281, 299, 300, 303, 317, 326, 357, 358, 383, 394, 396, 399, 402, 403, 404, 407, 429, 467, 468, 469, 517, 520, 526, 529, 615, 665, 679, 708, 731, 733, 736, 825, 826, 833, 834, 836, 837, 858, 859, 860, 871, 872, 919, 920, 962, 963, 966, 974, 976, 980, 981, 990, 1011, 1014, 1016, 1018, 1019, 1021], "param_grid": [4, 6, 71, 72, 73, 74, 122, 232, 237, 247, 255, 256, 257, 261, 262, 265, 268, 279, 301, 329, 384, 397, 403, 726, 781, 784, 792, 793, 955, 966, 996, 997], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 348, 349, 350, 351, 352, 358, 365, 366, 368, 377, 384, 393, 396, 402, 404, 407, 417, 429, 450, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 487, 489, 490, 495, 497, 499, 500, 504, 507, 508, 521, 522, 529, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 555, 568, 569, 575, 579, 581, 596, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 661, 662, 663, 664, 682, 689, 690, 698, 713, 714, 715, 718, 722, 723, 741, 753, 767, 768, 771, 776, 777, 778, 781, 795, 804, 805, 806, 816, 817, 818, 819, 826, 828, 834, 841, 858, 862, 884, 886, 889, 891, 892, 893, 894, 920, 955, 962, 963, 966, 967, 968, 969, 976, 980, 981, 982, 997, 1001, 1009, 1014, 1016, 1024], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 353, 358, 371, 372, 373, 374, 375, 377, 382, 384, 387, 404, 987, 989, 1001], "912": [4, 15, 38], "secondplot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 358, 369, 371, 372, 375, 377, 379, 384, 387, 404, 407, 425, 429, 439, 446, 450, 483, 515, 629, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 852, 853, 855, 858, 859, 860, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 915, 966, 986, 999, 1001, 1008, 1010, 1014, 1018, 1022], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 372, 397, 453, 881, 982, 986, 987, 1019, 1022], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 366, 371, 373, 384, 387, 389, 997, 1008, 1012, 1015], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 371, 375, 384, 387, 389, 1001, 1008, 1015], "kernelpca": [5, 397, 401, 518, 519, 526, 529, 673, 675, 677, 849, 976, 1009, 1010, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "take": [5, 8, 27, 30, 46, 53, 55, 57, 66, 75, 80, 90, 92, 95, 110, 118, 149, 151, 154, 158, 167, 173, 180, 205, 206, 222, 244, 245, 252, 258, 262, 266, 267, 275, 277, 280, 283, 284, 285, 287, 288, 299, 313, 320, 325, 326, 329, 339, 343, 344, 348, 357, 358, 359, 365, 366, 369, 371, 373, 376, 377, 378, 379, 382, 384, 385, 394, 396, 397, 399, 400, 401, 403, 404, 405, 406, 408, 422, 428, 431, 432, 434, 435, 437, 442, 443, 444, 446, 448, 454, 504, 518, 523, 524, 525, 531, 532, 566, 577, 580, 581, 583, 584, 585, 595, 596, 601, 605, 606, 609, 617, 628, 634, 656, 658, 659, 660, 661, 664, 676, 677, 684, 690, 692, 694, 704, 713, 714, 722, 726, 727, 740, 755, 758, 762, 763, 764, 765, 767, 768, 771, 772, 781, 782, 786, 787, 795, 799, 807, 825, 826, 827, 829, 831, 832, 833, 834, 835, 847, 857, 878, 879, 883, 884, 885, 886, 887, 888, 889, 907, 936, 955, 958, 962, 963, 965, 966, 967, 969, 971, 972, 973, 976, 981, 982, 990, 992, 996, 998, 1005, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "exact": [5, 7, 82, 100, 154, 201, 231, 277, 353, 357, 358, 365, 371, 373, 380, 382, 383, 384, 396, 403, 405, 406, 419, 467, 468, 469, 473, 481, 519, 520, 526, 546, 547, 623, 627, 631, 677, 781, 795, 804, 805, 806, 885, 888, 955, 958, 962, 963, 972, 976, 980, 981, 1015, 1016, 1018], "usp": 5, "digit": [5, 29, 35, 36, 51, 68, 72, 88, 93, 134, 139, 144, 164, 188, 204, 213, 217, 222, 224, 230, 231, 255, 256, 259, 281, 286, 292, 294, 295, 297, 316, 323, 364, 371, 377, 396, 402, 403, 405, 426, 430, 432, 487, 526, 529, 534, 551, 643, 673, 674, 675, 676, 677, 682, 689, 690, 698, 702, 703, 721, 775, 777, 805, 809, 825, 832, 839, 843, 844, 853, 863, 869, 876, 879, 888, 895, 896, 897, 955, 961, 963, 966, 969, 971, 979, 992, 996, 999, 1000, 1003, 1012], "reproduc": [5, 12, 60, 110, 167, 173, 185, 266, 296, 358, 360, 370, 371, 373, 374, 379, 382, 384, 390, 396, 400, 401, 404, 408, 425, 439, 445, 454, 459, 473, 476, 477, 480, 482, 488, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 536, 538, 539, 540, 541, 544, 545, 546, 547, 548, 592, 593, 595, 596, 619, 624, 625, 626, 627, 631, 632, 635, 637, 638, 639, 645, 646, 647, 648, 651, 652, 653, 656, 661, 663, 664, 674, 675, 677, 678, 679, 775, 779, 780, 783, 784, 785, 786, 787, 793, 795, 796, 797, 798, 799, 800, 801, 807, 808, 809, 813, 814, 817, 828, 832, 839, 840, 841, 848, 860, 864, 872, 875, 876, 883, 884, 885, 888, 919, 920, 937, 940, 958, 986, 989, 1008, 1016, 1021, 1022], "sect": 5, "bak\u0131r": [5, 401, 520], "g\u00f6khan": [5, 401, 520], "h": [5, 6, 48, 58, 95, 96, 109, 110, 111, 127, 151, 167, 244, 282, 285, 293, 301, 313, 322, 325, 344, 368, 377, 394, 396, 398, 401, 402, 403, 404, 407, 429, 504, 517, 520, 523, 525, 532, 538, 552, 553, 567, 575, 592, 593, 674, 678, 689, 693, 741, 818, 822, 823, 824, 829, 839, 854, 863, 958, 960, 962, 963, 964, 966, 968, 970, 971, 980, 982, 997, 1014, 1019, 1023, 1024], "jason": [5, 401, 520, 879, 1014, 1016, 1020, 1023], "weston": [5, 401, 520, 578, 579, 879], "bernhard": [5, 401, 520, 814, 849, 879, 967, 972, 981, 1014], "sch\u00f6lkopf": [5, 401, 520, 849, 972, 976, 981], "pre": [5, 71, 119, 167, 186, 299, 344, 360, 369, 371, 384, 387, 398, 400, 401, 403, 404, 405, 407, 408, 428, 429, 432, 444, 518, 520, 675, 697, 747, 846, 888, 966, 971, 976, 981, 982, 986, 987, 1003, 1011, 1016, 1022], "advanc": [5, 164, 225, 227, 240, 257, 359, 396, 401, 474, 486, 520, 617, 624, 767, 779, 832, 841, 844, 863, 892, 958, 969, 976, 990, 1005, 1010], "neural": [5, 6, 31, 257, 295, 360, 382, 384, 390, 400, 401, 403, 408, 518, 520, 523, 525, 532, 552, 553, 624, 630, 681, 725, 779, 832, 839, 840, 841, 849, 958, 962, 963, 964, 966, 969, 972, 976, 980, 982, 986, 988, 990, 997, 1002, 1003, 1008, 1020], "system": [5, 100, 181, 257, 264, 353, 357, 358, 359, 366, 368, 371, 372, 373, 374, 379, 382, 387, 396, 401, 403, 407, 429, 456, 457, 463, 520, 524, 528, 535, 624, 630, 635, 636, 639, 640, 641, 667, 668, 710, 740, 753, 779, 832, 878, 879, 934, 962, 966, 969, 978, 986, 987, 990, 1001, 1008, 1016, 1017], "2004": [5, 146, 257, 366, 368, 396, 398, 401, 458, 520, 592, 593, 674, 678, 690, 727, 767, 879, 960, 962, 963, 968, 981, 999], "449": [5, 222, 224, 401, 520], "456": [5, 212, 401, 520], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 56, 57, 61, 65, 66, 67, 70, 71, 72, 74, 75, 82, 95, 97, 99, 100, 101, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 190, 191, 197, 198, 199, 201, 202, 204, 205, 212, 213, 214, 215, 218, 219, 220, 221, 223, 226, 229, 231, 232, 233, 235, 242, 244, 245, 256, 258, 260, 261, 263, 270, 275, 277, 279, 282, 289, 290, 293, 296, 299, 300, 302, 303, 304, 317, 318, 319, 320, 322, 337, 342, 343, 344, 365, 371, 375, 379, 382, 384, 385, 400, 436, 519, 850, 958, 984, 986, 1011], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 57, 75, 82, 155, 176, 181, 182, 184, 188, 190, 191, 202, 219, 220, 226, 229, 258, 260, 263, 270, 289, 304, 337, 342, 343, 344, 516, 522, 643, 649, 670, 671, 742, 743, 964, 966], "licenc": [5, 365], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 202, 204, 205, 213, 214, 215, 219, 220, 221, 223, 226, 229, 231, 232, 233, 235, 242, 244, 258, 261, 263, 270, 275, 277, 279, 285, 286, 287, 289, 290, 293, 296, 299, 300, 301, 302, 303, 304, 317, 318, 319, 320, 322, 333, 334, 337, 338, 342, 343, 344, 377], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 202, 204, 205, 213, 214, 215, 219, 220, 226, 231, 232, 233, 235, 242, 244, 258, 263, 270, 275, 277, 279, 285, 286, 287, 289, 290, 293, 299, 300, 301, 302, 303, 304, 333, 334, 337, 338, 342, 343, 344], "normal": [5, 12, 17, 19, 26, 29, 34, 35, 37, 40, 44, 46, 57, 61, 62, 66, 73, 75, 78, 79, 80, 85, 86, 96, 101, 110, 111, 113, 121, 122, 125, 126, 141, 152, 155, 156, 162, 164, 166, 167, 175, 176, 177, 178, 179, 181, 187, 190, 192, 195, 199, 200, 201, 203, 211, 216, 221, 235, 242, 247, 248, 251, 254, 257, 263, 282, 283, 298, 300, 304, 307, 310, 313, 320, 329, 343, 344, 353, 360, 363, 366, 367, 368, 371, 376, 380, 383, 384, 393, 394, 396, 397, 399, 402, 403, 404, 408, 425, 434, 436, 437, 438, 447, 449, 450, 460, 467, 468, 469, 474, 481, 497, 500, 504, 511, 512, 518, 521, 526, 527, 529, 533, 534, 537, 538, 539, 542, 543, 544, 545, 547, 548, 549, 550, 551, 564, 565, 567, 573, 574, 575, 576, 596, 610, 612, 624, 635, 636, 639, 640, 641, 643, 644, 649, 650, 654, 657, 661, 665, 672, 676, 680, 682, 688, 689, 691, 703, 708, 710, 718, 720, 725, 729, 733, 734, 736, 739, 740, 741, 745, 754, 776, 777, 778, 784, 785, 809, 811, 820, 822, 828, 829, 832, 843, 844, 847, 848, 851, 852, 853, 856, 857, 858, 859, 860, 861, 863, 868, 869, 871, 872, 873, 874, 878, 879, 891, 892, 893, 894, 919, 920, 924, 942, 943, 948, 949, 955, 960, 962, 963, 964, 965, 968, 972, 977, 979, 981, 982, 997, 999, 1000, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "pixel": [5, 6, 13, 32, 47, 48, 53, 95, 108, 133, 144, 164, 173, 230, 255, 295, 296, 368, 396, 401, 403, 404, 405, 478, 479, 480, 549, 570, 571, 592, 593, 619, 969, 971, 982, 997, 1000], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 71, 75, 86, 100, 109, 115, 116, 120, 121, 122, 123, 124, 125, 128, 142, 143, 166, 167, 169, 170, 173, 181, 192, 197, 204, 205, 212, 213, 215, 227, 238, 239, 251, 254, 255, 260, 264, 266, 270, 275, 285, 286, 293, 295, 296, 301, 303, 304, 306, 309, 310, 311, 321, 347, 351, 353, 376, 383, 397, 400, 403, 422, 423, 543, 545, 552, 553, 682, 683, 685, 687, 781, 811, 814, 832, 840, 841, 843, 893, 894, 955, 956, 966, 968, 969, 974, 976, 981, 997, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1021], "data_id": [5, 119, 154, 167, 197, 215, 227, 305, 365, 481], "41082": 5, "return_x_i": [5, 7, 14, 58, 70, 71, 72, 73, 95, 119, 120, 132, 135, 136, 137, 142, 161, 162, 169, 173, 182, 184, 185, 186, 188, 193, 194, 204, 212, 213, 227, 234, 238, 239, 253, 256, 259, 264, 265, 272, 275, 279, 286, 294, 295, 296, 304, 309, 311, 313, 314, 320, 332, 344, 347, 364, 376, 377, 383, 390, 396, 397, 400, 403, 405, 431, 473, 474, 475, 476, 477, 479, 480, 481, 482, 485, 486, 487, 489, 490, 495, 517, 518, 519, 520, 543, 546, 547, 552, 553, 577, 580, 581, 583, 584, 585, 587, 595, 604, 605, 607, 608, 623, 624, 643, 644, 653, 658, 659, 660, 673, 674, 675, 676, 686, 772, 784, 785, 787, 811, 816, 827, 832, 835, 892, 893, 894, 956, 961, 966, 967, 968, 969, 976, 992, 996, 997, 999, 1000, 1005, 1014, 1016, 1018, 1021], "idea": [5, 53, 80, 81, 146, 154, 167, 198, 218, 282, 329, 347, 357, 358, 371, 376, 377, 398, 399, 400, 401, 402, 403, 405, 592, 593, 962, 963, 966, 969, 972, 985, 990, 1001], "noisi": [5, 33, 49, 55, 62, 96, 142, 149, 155, 181, 196, 199, 201, 221, 229, 248, 258, 264, 266, 267, 304, 349, 350, 353, 396, 404, 407, 429, 431, 435, 506, 509, 920, 961, 963, 969, 981, 986], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 30, 34, 37, 42, 50, 53, 57, 61, 66, 71, 72, 75, 79, 80, 95, 97, 98, 105, 111, 125, 128, 129, 131, 150, 154, 157, 158, 167, 168, 170, 173, 176, 177, 179, 181, 183, 187, 188, 189, 191, 196, 197, 198, 199, 200, 206, 207, 208, 210, 212, 213, 215, 216, 220, 221, 223, 229, 230, 231, 232, 236, 242, 244, 248, 252, 253, 255, 257, 260, 262, 267, 268, 271, 282, 283, 284, 296, 300, 301, 303, 305, 306, 312, 321, 322, 327, 328, 330, 331, 332, 336, 337, 339, 342, 343, 347, 350, 351, 357, 359, 366, 368, 371, 373, 376, 377, 393, 396, 397, 400, 401, 402, 403, 404, 422, 426, 430, 434, 456, 457, 463, 475, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 513, 515, 516, 519, 521, 522, 524, 529, 530, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 595, 616, 617, 618, 624, 625, 626, 627, 631, 632, 633, 634, 637, 638, 643, 644, 645, 646, 647, 648, 650, 652, 654, 656, 665, 666, 669, 673, 674, 675, 676, 678, 730, 779, 780, 783, 807, 808, 813, 818, 819, 820, 822, 823, 824, 828, 840, 841, 859, 861, 864, 873, 955, 956, 959, 963, 966, 967, 973, 976, 978, 992, 996, 1000, 1001, 1016, 1017, 1018, 1021, 1022], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 55, 61, 62, 67, 75, 86, 95, 96, 98, 100, 103, 111, 113, 122, 126, 127, 148, 149, 154, 159, 164, 176, 178, 179, 181, 186, 187, 192, 195, 196, 199, 200, 202, 214, 221, 223, 226, 228, 229, 232, 257, 265, 270, 271, 289, 293, 294, 301, 306, 310, 336, 349, 350, 353, 367, 373, 376, 394, 396, 401, 403, 405, 407, 429, 431, 437, 496, 498, 499, 500, 501, 502, 503, 507, 509, 510, 515, 517, 519, 526, 592, 593, 596, 598, 599, 600, 601, 602, 606, 607, 609, 610, 629, 630, 634, 635, 636, 638, 639, 640, 641, 648, 649, 650, 656, 664, 677, 860, 872, 878, 959, 961, 962, 963, 966, 969, 979, 999, 1000, 1009, 1014, 1019, 1021, 1022], "approach": [5, 8, 58, 63, 66, 99, 146, 149, 161, 167, 170, 179, 185, 197, 199, 205, 215, 218, 305, 342, 343, 344, 359, 370, 371, 377, 380, 384, 387, 390, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 422, 428, 431, 433, 437, 447, 505, 517, 567, 574, 620, 643, 644, 659, 660, 812, 828, 920, 955, 956, 962, 963, 966, 967, 969, 970, 976, 980, 981, 985, 986, 990, 994, 999, 1000, 1012, 1024], "copi": [5, 12, 17, 44, 62, 75, 98, 113, 161, 162, 167, 168, 169, 183, 190, 203, 213, 215, 219, 277, 317, 318, 320, 322, 343, 348, 358, 368, 371, 373, 375, 376, 377, 382, 384, 419, 422, 425, 427, 428, 429, 431, 432, 434, 439, 444, 467, 468, 469, 470, 485, 487, 495, 517, 518, 519, 520, 526, 533, 538, 539, 544, 546, 547, 557, 575, 582, 592, 593, 595, 596, 613, 615, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 650, 656, 657, 659, 664, 666, 669, 670, 671, 716, 753, 774, 781, 795, 823, 824, 838, 846, 849, 852, 853, 854, 855, 859, 860, 861, 863, 866, 868, 869, 870, 871, 872, 873, 874, 878, 879, 883, 885, 886, 887, 888, 889, 898, 901, 903, 904, 937, 939, 940, 976, 981, 982, 987, 993, 996, 1001, 1008, 1011, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "add": [5, 12, 16, 17, 25, 26, 27, 32, 33, 40, 44, 54, 75, 80, 81, 86, 96, 118, 121, 142, 146, 149, 154, 155, 156, 161, 162, 179, 186, 192, 198, 200, 212, 221, 226, 230, 232, 264, 266, 267, 277, 289, 301, 303, 309, 311, 312, 332, 336, 337, 343, 357, 369, 370, 371, 372, 373, 375, 377, 379, 384, 387, 394, 400, 403, 404, 405, 500, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 587, 612, 613, 615, 617, 643, 644, 679, 682, 802, 823, 824, 880, 910, 934, 955, 956, 965, 972, 976, 979, 980, 987, 999, 1000, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "corrupt": [5, 103, 181, 203, 214, 382, 839, 962, 974], "uncorrupt": 5, "base": [5, 12, 14, 17, 25, 26, 27, 49, 56, 57, 58, 67, 70, 71, 75, 80, 95, 96, 109, 111, 121, 122, 123, 127, 129, 132, 140, 143, 147, 149, 154, 155, 157, 168, 169, 170, 175, 186, 197, 198, 205, 214, 215, 216, 218, 226, 233, 254, 255, 260, 277, 290, 296, 299, 300, 302, 304, 311, 313, 322, 327, 343, 347, 357, 358, 360, 365, 366, 367, 368, 369, 372, 373, 374, 379, 384, 385, 386, 394, 397, 401, 402, 404, 406, 407, 408, 422, 429, 431, 432, 433, 434, 435, 437, 441, 442, 446, 448, 449, 450, 451, 452, 472, 486, 493, 494, 517, 518, 520, 521, 522, 523, 524, 526, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 563, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 591, 592, 593, 595, 596, 601, 602, 603, 606, 609, 617, 618, 620, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 649, 654, 656, 657, 658, 659, 660, 665, 667, 668, 670, 671, 672, 675, 677, 689, 702, 710, 719, 720, 721, 723, 725, 739, 740, 741, 769, 777, 781, 783, 784, 785, 787, 788, 790, 795, 799, 800, 801, 802, 807, 809, 813, 814, 817, 825, 826, 827, 829, 831, 833, 834, 835, 840, 841, 845, 848, 855, 856, 858, 862, 864, 872, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 906, 914, 934, 935, 955, 957, 958, 960, 961, 963, 966, 967, 968, 969, 970, 971, 972, 973, 976, 978, 979, 980, 981, 982, 985, 986, 987, 988, 990, 996, 1003, 1004, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019], "solv": [5, 6, 66, 149, 186, 231, 257, 370, 371, 372, 373, 376, 382, 396, 398, 400, 401, 406, 432, 438, 447, 463, 516, 522, 523, 524, 528, 530, 531, 532, 533, 620, 622, 631, 637, 639, 640, 649, 650, 655, 657, 659, 662, 670, 671, 672, 813, 883, 884, 887, 920, 957, 960, 962, 963, 966, 967, 980, 981, 982, 985, 986, 990, 994, 997, 1001, 1014, 1018, 1021], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 109, 110, 113, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 177, 181, 192, 194, 195, 198, 204, 205, 211, 212, 213, 215, 227, 234, 238, 239, 244, 246, 251, 254, 255, 260, 264, 266, 270, 275, 283, 285, 286, 293, 295, 296, 301, 303, 304, 306, 309, 310, 311, 320, 321, 328, 342, 347, 351, 353, 357, 365, 373, 376, 383, 397, 400, 403, 422, 423, 494, 543, 544, 545, 552, 553, 682, 683, 685, 687, 809, 811, 814, 832, 840, 841, 843, 857, 893, 894, 956, 966, 968, 969, 970, 972, 974, 976, 980, 981, 996, 997, 1005], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 109, 110, 113, 115, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 154, 157, 166, 167, 168, 169, 170, 173, 177, 181, 187, 192, 194, 195, 203, 204, 205, 211, 212, 213, 215, 227, 229, 234, 238, 239, 244, 251, 254, 255, 260, 264, 266, 270, 271, 275, 283, 285, 286, 293, 295, 296, 301, 303, 304, 306, 309, 310, 311, 320, 321, 328, 342, 347, 349, 350, 351, 353, 357, 365, 373, 376, 383, 397, 400, 403, 423, 455, 456, 457, 458, 459, 460, 461, 494, 543, 544, 545, 552, 553, 682, 683, 685, 687, 809, 811, 814, 832, 840, 841, 843, 857, 893, 894, 956, 966, 968, 969, 970, 972, 976, 980, 981, 982, 996, 997, 999, 1005, 1008], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 109, 110, 113, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 177, 181, 192, 194, 195, 198, 204, 205, 212, 213, 227, 234, 238, 239, 244, 251, 254, 255, 260, 264, 266, 270, 275, 285, 286, 293, 295, 296, 301, 304, 306, 309, 310, 311, 317, 318, 320, 321, 322, 342, 347, 351, 353, 357, 365, 373, 376, 383, 397, 400, 403, 422, 423, 543, 544, 545, 552, 553, 682, 683, 685, 687, 809, 811, 814, 832, 840, 841, 843, 893, 894, 956, 966, 968, 969, 974, 976, 981, 996, 997, 1005], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 109, 110, 113, 115, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 157, 166, 167, 168, 169, 170, 173, 181, 192, 194, 197, 203, 204, 205, 212, 213, 215, 227, 234, 238, 239, 244, 251, 254, 255, 260, 264, 266, 270, 275, 285, 286, 293, 295, 296, 301, 304, 306, 309, 310, 311, 320, 321, 342, 347, 351, 353, 365, 376, 383, 397, 400, 403, 423, 543, 544, 545, 552, 553, 682, 683, 685, 687, 809, 811, 814, 832, 840, 841, 843, 893, 894, 966, 968, 969, 976, 981, 996, 997, 1005, 1008], "stratifi": [5, 100, 116, 125, 142, 169, 212, 227, 239, 252, 257, 260, 266, 285, 286, 309, 373, 384, 536, 544, 552, 553, 587, 644, 651, 653, 661, 781, 784, 785, 787, 795, 796, 797, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 814, 817, 832, 840, 937, 966, 969, 996, 1013, 1014, 1015, 1017, 1018, 1021], "train_siz": [5, 7, 10, 128, 150, 173, 213, 232, 259, 270, 311, 314, 337, 783, 787, 798, 801, 807, 809, 961, 996, 1008, 1009, 1014, 1015], "1_000": [5, 48, 72, 100, 149, 154, 156, 168, 230, 254, 686], "rng": [5, 20, 21, 31, 37, 50, 81, 86, 95, 97, 103, 111, 122, 125, 126, 128, 149, 150, 153, 155, 156, 158, 161, 162, 166, 169, 176, 177, 178, 179, 181, 186, 191, 198, 199, 204, 211, 226, 232, 234, 235, 242, 252, 260, 263, 268, 269, 293, 303, 306, 310, 311, 313, 317, 318, 322, 332, 337, 349, 350, 353, 358, 373, 376, 455, 459, 460, 461, 628, 634, 655, 657, 663, 793, 818, 819, 820, 822, 823, 824, 828, 831, 833, 834, 835, 860, 872, 875, 876, 878, 879, 880, 889, 992], "randomst": [5, 13, 20, 21, 24, 31, 37, 50, 61, 81, 82, 86, 95, 97, 103, 111, 121, 122, 125, 126, 128, 142, 149, 150, 153, 155, 156, 158, 161, 162, 166, 169, 176, 177, 178, 179, 181, 186, 191, 198, 199, 204, 211, 221, 226, 232, 235, 242, 245, 252, 260, 263, 264, 266, 267, 268, 269, 293, 300, 302, 303, 306, 310, 311, 313, 317, 318, 322, 332, 337, 349, 350, 373, 376, 380, 384, 401, 408, 425, 428, 432, 434, 436, 437, 438, 439, 443, 444, 445, 447, 454, 455, 459, 460, 461, 473, 476, 477, 480, 482, 488, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 568, 569, 592, 593, 595, 596, 612, 617, 619, 624, 625, 626, 627, 628, 631, 632, 634, 635, 637, 638, 639, 643, 644, 645, 646, 647, 648, 651, 652, 653, 655, 656, 657, 659, 661, 662, 663, 664, 672, 674, 675, 676, 677, 678, 679, 680, 686, 765, 775, 779, 780, 783, 784, 785, 786, 787, 793, 795, 796, 797, 798, 799, 800, 801, 807, 808, 809, 813, 814, 817, 818, 819, 820, 822, 823, 824, 828, 832, 839, 840, 841, 848, 860, 864, 872, 875, 876, 878, 879, 880, 883, 884, 885, 888, 889, 891, 892, 893, 894, 906, 919, 920, 935, 937, 940, 976, 992, 1003], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 98, 215, 268, 364, 373, 374, 383, 384, 400, 453, 560, 881, 996, 997, 1008, 1015, 1016, 1017, 1021], "qualit": [5, 6, 53, 55, 61, 122, 197, 314, 366, 396, 424, 686, 997, 1023], "assess": [5, 37, 60, 120, 122, 167, 197, 215, 235, 253, 254, 256, 260, 394, 403, 686, 727, 965, 966, 972, 987, 1023], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 49, 53, 55, 70, 78, 82, 86, 91, 100, 111, 113, 119, 121, 122, 154, 156, 167, 168, 177, 183, 187, 188, 198, 203, 212, 214, 215, 244, 257, 264, 269, 279, 290, 294, 296, 299, 301, 303, 311, 317, 322, 329, 334, 342, 343, 359, 364, 366, 368, 371, 374, 380, 384, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 426, 428, 430, 431, 432, 434, 443, 444, 448, 460, 481, 483, 523, 525, 532, 540, 541, 542, 546, 547, 549, 567, 574, 575, 587, 592, 593, 635, 639, 640, 641, 643, 644, 664, 667, 668, 730, 784, 785, 799, 808, 811, 840, 841, 848, 876, 885, 888, 920, 955, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 973, 974, 976, 978, 979, 982, 987, 990, 999, 1000, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1022, 1023, 1024], "img": [5, 50, 66, 491, 571], "ravel": [5, 9, 13, 16, 17, 19, 26, 30, 34, 42, 53, 54, 58, 80, 105, 111, 113, 118, 122, 127, 128, 129, 138, 149, 151, 153, 154, 155, 156, 167, 176, 187, 188, 190, 197, 210, 211, 219, 223, 226, 230, 232, 239, 244, 246, 260, 264, 266, 277, 282, 283, 289, 290, 293, 294, 295, 296, 301, 302, 313, 322, 328, 329, 333, 334, 335, 336, 338, 339, 342, 349, 350, 450, 478, 479, 480, 616, 703, 953, 966], "imshow": [5, 6, 13, 30, 32, 40, 46, 47, 48, 50, 51, 53, 54, 58, 82, 89, 95, 98, 106, 151, 152, 153, 157, 170, 188, 213, 219, 234, 268, 281, 296, 317, 318, 329, 335, 338, 365, 617, 682, 997, 998, 1022], "grei": [5, 34, 267, 299, 366], "off": [5, 12, 13, 37, 39, 40, 47, 48, 52, 53, 78, 82, 85, 95, 219, 231, 234, 251, 256, 258, 259, 299, 318, 322, 329, 339, 342, 366, 371, 373, 396, 398, 403, 405, 427, 538, 539, 544, 545, 573, 576, 619, 641, 677, 700, 779, 780, 781, 784, 785, 795, 806, 924, 965, 971, 981, 987, 1008, 1012, 1013, 1015], "fontsiz": [5, 8, 10, 14, 34, 50, 60, 91, 98, 118, 141, 152, 153, 155, 158, 168, 177, 187, 196, 208, 219, 220, 245, 252, 261, 262, 263, 268, 269, 296, 303, 336, 897], "mse": [5, 7, 78, 79, 122, 123, 161, 162, 197, 199, 203, 271, 632, 638, 734, 966, 982, 1019, 1021], "quantit": [5, 6, 25, 61, 122, 132, 146, 253, 271, 368, 997], "nmse": [5, 271], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 62, 64, 67, 85, 92, 98, 105, 122, 128, 129, 141, 167, 168, 170, 173, 177, 186, 188, 193, 197, 212, 213, 214, 215, 226, 230, 256, 260, 261, 263, 265, 266, 267, 285, 286, 293, 301, 304, 313, 329, 342, 343, 353, 397, 400, 403, 807], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 57, 74, 75, 86, 95, 100, 104, 109, 113, 115, 127, 129, 132, 135, 136, 138, 141, 144, 146, 153, 155, 161, 162, 165, 166, 168, 171, 173, 179, 181, 183, 185, 186, 187, 192, 194, 195, 198, 199, 205, 209, 211, 213, 214, 215, 216, 217, 220, 222, 224, 229, 232, 233, 234, 237, 251, 253, 254, 255, 257, 260, 262, 263, 264, 265, 266, 267, 271, 282, 285, 286, 296, 299, 300, 301, 306, 311, 312, 324, 326, 329, 330, 331, 333, 334, 337, 338, 340, 342, 349, 350, 358, 360, 363, 367, 368, 369, 373, 374, 376, 384, 386, 396, 399, 400, 401, 402, 403, 404, 405, 406, 408, 427, 440, 450, 452, 460, 467, 468, 469, 481, 486, 487, 497, 500, 506, 509, 517, 518, 519, 520, 521, 524, 526, 528, 529, 533, 534, 535, 539, 551, 567, 574, 578, 579, 591, 594, 599, 605, 620, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 672, 673, 674, 675, 676, 677, 678, 686, 692, 701, 734, 737, 749, 751, 758, 769, 781, 792, 796, 806, 809, 823, 824, 828, 832, 839, 840, 841, 844, 849, 850, 853, 856, 858, 860, 861, 862, 863, 872, 876, 883, 884, 885, 886, 887, 888, 889, 955, 957, 958, 959, 961, 966, 969, 970, 971, 972, 973, 974, 980, 981, 986, 988, 990, 992, 995, 996, 1001, 1002, 1003, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1022], "radial": [5, 100, 149, 154, 156, 329, 363, 437, 607, 676, 964, 981, 1003], "rbf": [5, 6, 10, 11, 16, 30, 31, 100, 130, 138, 149, 150, 151, 153, 154, 155, 156, 158, 164, 211, 225, 226, 232, 240, 255, 257, 259, 262, 322, 324, 326, 333, 335, 336, 340, 363, 397, 401, 403, 437, 487, 489, 520, 526, 595, 596, 597, 598, 601, 604, 605, 606, 608, 609, 624, 625, 626, 627, 628, 661, 676, 749, 758, 760, 781, 792, 795, 801, 843, 863, 878, 879, 883, 885, 886, 887, 888, 889, 955, 958, 959, 963, 966, 972, 976, 979, 992, 997, 1003, 1014, 1019], "decomposit": [5, 6, 14, 17, 58, 70, 72, 73, 74, 86, 87, 90, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 127, 133, 218, 219, 221, 231, 233, 237, 256, 281, 286, 304, 313, 343, 359, 360, 364, 377, 380, 384, 393, 394, 397, 403, 434, 436, 437, 438, 447, 467, 468, 469, 480, 534, 541, 596, 635, 636, 637, 638, 639, 640, 641, 648, 649, 650, 657, 658, 659, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 779, 780, 832, 839, 842, 845, 861, 892, 919, 920, 962, 963, 966, 983, 986, 988, 995, 997, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "kernel_pca": [5, 100, 397], "400": [5, 26, 50, 95, 109, 124, 128, 149, 162, 203, 223, 269, 294, 343, 366, 401, 480, 1001], "1e": [5, 6, 7, 10, 17, 26, 46, 95, 149, 152, 154, 155, 156, 157, 158, 161, 167, 177, 190, 197, 198, 204, 211, 215, 221, 226, 232, 236, 242, 245, 248, 255, 265, 268, 295, 306, 312, 321, 327, 329, 337, 342, 377, 408, 428, 432, 437, 444, 447, 456, 457, 463, 467, 468, 469, 516, 517, 518, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 544, 545, 546, 547, 577, 582, 596, 598, 599, 600, 604, 605, 607, 608, 610, 612, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 637, 638, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 672, 674, 675, 676, 677, 678, 679, 680, 712, 725, 769, 779, 780, 795, 818, 819, 820, 821, 822, 823, 824, 832, 840, 841, 848, 878, 879, 883, 884, 885, 886, 887, 888, 889, 952, 955, 966, 970, 974, 976, 980, 997, 1001, 1016, 1021, 1022, 1023], "fit_inverse_transform": [5, 100, 520, 1017], "5e": [5, 95, 182, 580, 581, 583], "inde": [5, 7, 25, 39, 40, 53, 55, 58, 82, 86, 100, 113, 145, 146, 149, 167, 169, 176, 181, 185, 186, 197, 199, 259, 260, 264, 266, 277, 299, 304, 343, 353, 357, 370, 376, 383, 384, 385, 396, 398, 403, 552, 553, 962, 976, 980, 1022], "least": [5, 14, 80, 81, 84, 87, 98, 120, 123, 146, 157, 164, 175, 176, 181, 190, 197, 199, 202, 205, 214, 215, 216, 230, 257, 275, 304, 311, 312, 329, 343, 344, 357, 364, 366, 368, 370, 371, 375, 377, 379, 382, 384, 385, 395, 396, 398, 399, 400, 401, 403, 404, 405, 406, 407, 429, 433, 435, 441, 442, 443, 446, 459, 467, 468, 469, 470, 479, 501, 516, 522, 524, 526, 527, 528, 530, 531, 532, 533, 534, 542, 543, 544, 545, 547, 549, 550, 551, 578, 587, 620, 628, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 648, 649, 650, 651, 652, 653, 654, 656, 657, 659, 661, 663, 664, 665, 667, 668, 669, 670, 671, 672, 677, 682, 697, 701, 703, 769, 782, 786, 787, 793, 795, 796, 797, 799, 800, 802, 804, 807, 808, 809, 840, 841, 844, 855, 863, 888, 891, 892, 893, 894, 912, 929, 956, 959, 963, 966, 969, 978, 980, 981, 982, 987, 988, 990, 999, 1003, 1008, 1010, 1011, 1014, 1015, 1019], "hope": [5, 215, 384, 395, 1017], "remov": [5, 14, 16, 17, 34, 54, 55, 70, 75, 146, 161, 162, 167, 170, 176, 258, 299, 306, 309, 310, 311, 342, 343, 347, 353, 363, 366, 370, 371, 372, 375, 376, 380, 384, 396, 397, 400, 403, 404, 406, 407, 422, 427, 429, 432, 434, 435, 442, 444, 463, 473, 474, 511, 519, 520, 522, 524, 526, 531, 538, 539, 540, 541, 552, 553, 554, 555, 564, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 596, 615, 618, 623, 629, 630, 635, 636, 639, 640, 641, 643, 649, 650, 656, 677, 725, 752, 762, 763, 764, 807, 830, 842, 843, 847, 848, 856, 860, 861, 863, 872, 886, 887, 889, 898, 914, 915, 917, 956, 963, 969, 982, 988, 993, 1003, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "think": [5, 37, 168, 342, 343, 371, 402, 965, 987, 989, 990, 992], "happen": [5, 115, 185, 299, 305, 343, 353, 357, 358, 369, 370, 371, 375, 376, 377, 382, 384, 385, 387, 396, 398, 400, 403, 422, 500, 557, 643, 769, 861, 863, 883, 962, 966, 967, 981, 987, 1001, 1016, 1020, 1021, 1023, 1024], "ridg": [5, 10, 13, 54, 75, 129, 146, 148, 159, 161, 164, 167, 168, 175, 176, 181, 197, 198, 216, 225, 234, 240, 342, 357, 360, 382, 401, 403, 509, 520, 524, 528, 596, 600, 607, 610, 628, 629, 630, 632, 634, 642, 646, 658, 659, 660, 663, 672, 686, 734, 781, 787, 795, 816, 889, 961, 966, 974, 976, 980, 981, 988, 999, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1021, 1022, 1023], "x_reconstructed_kernel_pca": [5, 100], "inverse_transform": [5, 51, 54, 100, 143, 281, 343, 401, 404, 430, 450, 467, 468, 469, 518, 519, 520, 523, 524, 525, 526, 528, 529, 566, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 615, 781, 784, 785, 795, 843, 847, 848, 850, 851, 852, 853, 854, 856, 857, 859, 860, 861, 863, 875, 876, 976, 977, 978, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "x_reconstructed_pca": [5, 100], "lower": [5, 16, 26, 30, 31, 33, 58, 79, 86, 95, 97, 103, 109, 110, 113, 118, 122, 125, 149, 151, 153, 155, 157, 168, 169, 181, 182, 183, 187, 197, 198, 199, 200, 210, 218, 222, 229, 230, 234, 244, 248, 256, 257, 259, 260, 264, 265, 267, 270, 281, 283, 284, 301, 304, 313, 320, 329, 335, 342, 343, 344, 348, 366, 371, 394, 395, 396, 399, 400, 401, 402, 403, 404, 407, 429, 433, 449, 452, 483, 494, 517, 519, 526, 529, 538, 544, 545, 546, 547, 548, 573, 574, 576, 588, 596, 598, 599, 600, 602, 604, 605, 607, 608, 610, 617, 618, 620, 622, 662, 664, 697, 701, 709, 712, 718, 723, 779, 780, 829, 831, 833, 834, 835, 837, 864, 885, 886, 887, 890, 907, 961, 962, 963, 965, 966, 967, 969, 970, 971, 972, 973, 974, 978, 980, 981, 982, 999, 1010, 1011, 1016, 1023], "analysi": [5, 7, 9, 25, 29, 35, 36, 57, 63, 68, 94, 96, 97, 99, 100, 102, 104, 107, 119, 164, 167, 186, 219, 241, 249, 254, 257, 258, 262, 278, 291, 299, 304, 343, 360, 363, 366, 368, 371, 373, 385, 393, 396, 398, 403, 404, 408, 424, 432, 433, 458, 460, 461, 467, 468, 470, 487, 489, 497, 500, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 540, 541, 616, 623, 673, 675, 676, 677, 678, 695, 704, 709, 710, 740, 772, 773, 774, 775, 779, 781, 805, 809, 825, 832, 843, 844, 849, 859, 863, 871, 919, 920, 956, 962, 963, 965, 966, 976, 985, 986, 988, 990, 993, 1002, 1003, 1008, 1009, 1010, 1012, 1017], "favor": [5, 82, 242, 248, 382, 398, 403, 618, 714, 789, 791, 842, 914, 955, 974, 1010, 1012, 1014, 1015, 1017, 1020, 1021, 1022, 1023, 1024], "background": [5, 11, 47, 66, 125, 296, 301, 366, 371, 379, 396, 478, 479, 963, 971, 980, 1018], "370": [5, 15], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 67, 68, 71, 72, 73, 74, 75, 80, 81, 82, 86, 93, 94, 98, 99, 100, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 142, 143, 144, 145, 146, 148, 157, 159, 161, 162, 169, 170, 173, 175, 178, 180, 182, 183, 184, 185, 187, 188, 189, 190, 193, 194, 196, 200, 201, 204, 205, 209, 210, 211, 212, 213, 214, 216, 220, 222, 223, 225, 227, 230, 232, 233, 234, 235, 238, 239, 240, 242, 244, 245, 246, 248, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 272, 275, 277, 279, 280, 281, 285, 286, 287, 288, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 323, 324, 325, 327, 329, 330, 331, 332, 333, 337, 338, 339, 340, 343, 344, 346, 347, 349, 350, 351, 352, 353, 358, 359, 360, 373, 374, 375, 377, 383, 384, 386, 387, 390, 392, 393, 394, 396, 397, 400, 401, 402, 403, 404, 405, 411, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 444, 454, 455, 458, 459, 460, 461, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 531, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 568, 569, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 587, 588, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 613, 616, 617, 618, 619, 620, 623, 624, 625, 628, 630, 631, 632, 634, 636, 637, 638, 640, 642, 643, 644, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 664, 673, 674, 675, 676, 677, 682, 683, 685, 686, 687, 688, 689, 693, 713, 739, 741, 771, 772, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 825, 826, 827, 829, 831, 832, 833, 834, 835, 836, 839, 840, 841, 843, 844, 847, 848, 856, 857, 861, 863, 865, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 903, 904, 908, 909, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 978, 979, 980, 981, 982, 986, 987, 989, 990, 993, 995, 996, 997, 1000, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "excerpt": [6, 978, 997], "wild": [6, 364, 478, 479, 493, 494, 997, 1003, 1008], "aka": [6, 293, 342, 382, 404, 437, 521, 523, 525, 529, 532, 566, 567, 600, 607, 636, 637, 639, 640, 641, 643, 644, 647, 651, 652, 653, 655, 661, 662, 663, 725, 850, 854, 856, 962, 970, 980, 992, 997, 1010, 1022], "lfw": [6, 366, 478, 479, 997, 1008], "vi": [6, 8, 366, 684, 997, 1016, 1019], "www": [6, 71, 173, 197, 213, 215, 227, 275, 295, 365, 366, 371, 379, 387, 396, 400, 427, 434, 472, 493, 494, 516, 519, 522, 526, 629, 643, 649, 656, 670, 671, 832, 839, 891, 892, 962, 979, 997], "umass": [6, 19, 366, 997], "edu": [6, 8, 11, 17, 46, 120, 146, 156, 173, 179, 218, 245, 256, 282, 290, 303, 342, 343, 365, 366, 368, 396, 434, 472, 487, 493, 494, 495, 519, 626, 629, 634, 643, 651, 652, 661, 664, 667, 668, 818, 820, 821, 822, 832, 839, 876, 878, 891, 892, 962, 964, 997], "funnel": [6, 478, 479, 997], "tgz": [6, 997], "233mb": [6, 997], "randomizedsearchcv": [6, 71, 149, 258, 265, 311, 353, 383, 560, 955, 966, 980, 986, 997, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023], "fetch_lfw_peopl": [6, 366, 997, 1023], "classification_report": [6, 32, 70, 143, 255, 296, 317, 318, 966, 997, 1001, 1010, 1012, 1016, 1017, 1018, 1020, 1024], "confusionmatrixdisplai": [6, 32, 251, 312, 317, 342, 616, 703, 966, 997, 1018, 1019, 1021, 1022, 1023], "standardscal": [6, 10, 31, 44, 49, 55, 58, 62, 71, 73, 86, 106, 129, 167, 176, 185, 186, 188, 197, 213, 215, 227, 228, 236, 237, 239, 254, 264, 285, 286, 293, 301, 304, 309, 310, 312, 313, 314, 329, 332, 353, 359, 371, 373, 376, 380, 383, 397, 400, 416, 451, 452, 552, 635, 636, 639, 640, 641, 649, 650, 661, 663, 843, 844, 847, 860, 874, 883, 884, 885, 886, 888, 889, 956, 963, 970, 976, 980, 981, 983, 997, 1010, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1024], "svc": [6, 16, 25, 27, 30, 31, 32, 70, 74, 130, 136, 138, 144, 164, 173, 231, 233, 237, 251, 255, 257, 259, 262, 263, 264, 267, 268, 272, 301, 309, 311, 320, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 357, 373, 377, 384, 390, 394, 397, 400, 403, 453, 500, 540, 682, 683, 685, 687, 781, 798, 810, 812, 843, 880, 881, 883, 885, 954, 955, 961, 964, 966, 967, 976, 992, 996, 997, 999, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "stat": [6, 8, 10, 70, 80, 101, 146, 149, 170, 254, 257, 265, 269, 282, 311, 317, 318, 368, 380, 383, 398, 459, 577, 580, 581, 583, 584, 585, 589, 590, 591, 594, 667, 668, 785, 793, 795, 891, 892, 922, 955, 962, 976, 997, 1015, 1017, 1021], "loguniform": [6, 149, 265, 955, 997, 1018], "disk": [6, 13, 366, 369, 371, 376, 384, 390, 997], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 61, 62, 64, 70, 72, 81, 85, 92, 96, 97, 110, 121, 123, 125, 128, 131, 136, 143, 146, 150, 151, 152, 157, 167, 176, 178, 181, 190, 191, 194, 197, 198, 204, 214, 219, 220, 226, 230, 236, 239, 242, 243, 244, 246, 247, 252, 253, 255, 257, 258, 261, 262, 266, 275, 290, 302, 309, 312, 313, 318, 325, 332, 342, 350, 351, 353, 357, 358, 364, 365, 366, 371, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 390, 393, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 485, 486, 487, 488, 489, 491, 493, 494, 495, 496, 497, 498, 500, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 566, 567, 568, 569, 571, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 903, 904, 905, 908, 909, 917, 918, 919, 920, 921, 922, 924, 925, 926, 928, 929, 930, 937, 938, 939, 940, 941, 942, 943, 944, 952, 953, 956, 961, 962, 964, 966, 967, 969, 970, 972, 973, 976, 977, 978, 980, 981, 982, 985, 990, 996, 997, 998, 999, 1000, 1001, 1003, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "lfw_peopl": [6, 366, 997], "min_faces_per_person": [6, 366, 479, 997], "resiz": [6, 46, 47, 236, 366, 478, 479, 997], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 67, 70, 75, 78, 79, 80, 81, 82, 86, 92, 95, 96, 100, 103, 109, 110, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 137, 138, 145, 146, 158, 161, 162, 166, 176, 178, 179, 181, 183, 185, 187, 189, 191, 192, 196, 197, 198, 200, 201, 205, 209, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 230, 231, 243, 245, 246, 247, 248, 254, 255, 257, 260, 261, 264, 266, 267, 268, 269, 270, 271, 277, 287, 301, 302, 303, 306, 310, 311, 313, 319, 327, 330, 331, 337, 342, 343, 353, 364, 368, 371, 373, 376, 380, 382, 383, 384, 396, 398, 399, 400, 401, 403, 407, 408, 409, 411, 413, 414, 415, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 486, 489, 493, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 606, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 754, 755, 756, 757, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 908, 909, 920, 922, 924, 928, 935, 937, 940, 941, 942, 943, 944, 945, 946, 947, 955, 958, 962, 966, 967, 969, 970, 976, 977, 978, 980, 981, 982, 992, 997, 998, 999, 1000, 1001, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "w": [6, 12, 13, 16, 30, 34, 40, 42, 45, 48, 58, 64, 102, 105, 161, 196, 201, 214, 233, 242, 243, 244, 247, 248, 268, 296, 312, 313, 334, 337, 344, 353, 366, 368, 377, 390, 396, 397, 401, 403, 404, 408, 413, 417, 422, 450, 454, 457, 459, 467, 468, 469, 508, 523, 525, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 573, 574, 576, 595, 596, 620, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 678, 684, 709, 710, 740, 781, 795, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 825, 826, 829, 830, 833, 834, 840, 841, 876, 878, 879, 883, 884, 885, 886, 888, 889, 891, 892, 893, 894, 917, 922, 962, 966, 970, 971, 976, 978, 980, 981, 997, 1001, 1018, 1022, 1023, 1024], "info": [6, 42, 71, 95, 167, 168, 255, 368, 370, 375, 384, 404, 997], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 40, 52, 58, 60, 61, 78, 79, 80, 81, 82, 91, 92, 95, 103, 110, 112, 114, 116, 143, 145, 146, 161, 162, 173, 176, 179, 181, 183, 191, 192, 196, 200, 201, 212, 214, 219, 226, 230, 231, 242, 247, 254, 260, 264, 266, 267, 269, 270, 287, 293, 301, 309, 310, 311, 313, 337, 342, 343, 344, 353, 357, 364, 365, 371, 373, 376, 382, 383, 384, 396, 398, 399, 401, 403, 404, 407, 408, 409, 411, 413, 414, 415, 417, 418, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 443, 444, 445, 446, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 479, 486, 489, 493, 494, 497, 500, 501, 504, 506, 508, 509, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 695, 709, 742, 743, 744, 745, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 920, 941, 942, 943, 944, 945, 946, 947, 958, 962, 967, 969, 970, 976, 980, 981, 982, 992, 997, 998, 1000, 1001, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "id": [6, 19, 215, 290, 351, 365, 366, 371, 379, 398, 400, 404, 479, 480, 481, 895, 897, 915, 997, 1001, 1016, 1017, 1020], "person": [6, 260, 366, 370, 400, 404, 478, 479, 480, 976, 997, 1016], "target_nam": [6, 19, 52, 99, 104, 166, 206, 219, 244, 251, 258, 266, 267, 280, 305, 321, 342, 348, 364, 366, 473, 474, 476, 477, 478, 479, 481, 482, 485, 487, 488, 489, 490, 495, 698, 966, 982, 992, 997, 1001, 1018], "n_class": [6, 30, 37, 91, 92, 110, 112, 116, 118, 143, 145, 212, 219, 231, 233, 244, 264, 265, 266, 286, 287, 309, 348, 353, 371, 373, 384, 403, 422, 473, 474, 487, 500, 504, 508, 534, 535, 536, 538, 540, 542, 544, 546, 549, 552, 554, 578, 579, 589, 595, 619, 624, 643, 644, 651, 652, 653, 659, 660, 661, 662, 682, 692, 701, 703, 719, 722, 725, 738, 772, 776, 781, 784, 785, 795, 804, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 825, 830, 832, 833, 840, 843, 850, 851, 854, 857, 867, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 893, 895, 896, 908, 909, 962, 966, 967, 970, 977, 980, 981, 989, 997, 1013, 1014, 1015, 1017, 1018, 1019], "1288": [6, 366], "1850": [6, 366], "scaler": [6, 71, 73, 164, 213, 231, 237, 239, 285, 298, 304, 307, 314, 329, 332, 353, 376, 397, 400, 475, 643, 644, 657, 659, 672, 843, 852, 853, 855, 859, 860, 861, 863, 868, 869, 870, 871, 872, 873, 874, 970, 976, 980, 997, 1008, 1013, 1016, 1021], "unlabel": [6, 233, 311, 317, 318, 319, 321, 322, 384, 395, 396, 878, 879, 880, 965, 992, 995, 997, 999, 1020], "unsupervis": [6, 12, 37, 49, 72, 73, 86, 95, 115, 127, 226, 233, 283, 284, 328, 342, 343, 353, 360, 363, 366, 373, 383, 384, 395, 396, 399, 401, 402, 403, 404, 418, 427, 430, 517, 519, 521, 522, 524, 527, 528, 534, 548, 551, 552, 554, 555, 567, 568, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 613, 615, 619, 620, 623, 624, 625, 626, 627, 662, 726, 781, 784, 785, 787, 795, 807, 810, 825, 826, 829, 831, 832, 833, 834, 839, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 864, 875, 876, 880, 887, 963, 966, 972, 979, 988, 992, 993, 995, 997, 1003, 1008, 1011, 1021], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 55, 57, 58, 62, 69, 71, 73, 74, 76, 85, 86, 92, 95, 103, 110, 115, 127, 137, 138, 149, 151, 152, 156, 164, 181, 193, 198, 214, 217, 219, 220, 222, 224, 226, 230, 231, 233, 243, 244, 278, 281, 291, 301, 326, 342, 353, 357, 363, 366, 367, 368, 371, 380, 384, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 430, 432, 434, 450, 454, 458, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 487, 489, 490, 495, 500, 504, 517, 519, 520, 523, 524, 525, 526, 529, 532, 534, 548, 551, 558, 584, 592, 616, 625, 626, 627, 637, 673, 674, 675, 676, 677, 678, 679, 681, 684, 695, 709, 779, 780, 781, 809, 823, 824, 825, 828, 831, 832, 839, 843, 844, 847, 853, 858, 863, 875, 876, 877, 883, 887, 920, 952, 957, 958, 961, 962, 967, 968, 972, 978, 979, 980, 981, 982, 988, 990, 992, 993, 995, 997, 998, 1000, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1020, 1023], "reduct": [6, 19, 54, 57, 69, 73, 76, 86, 95, 113, 127, 164, 217, 219, 220, 224, 230, 233, 278, 291, 313, 326, 353, 357, 363, 395, 396, 397, 399, 401, 403, 405, 453, 467, 468, 469, 470, 487, 515, 517, 519, 520, 523, 524, 525, 526, 529, 532, 534, 538, 539, 542, 543, 544, 545, 549, 550, 551, 584, 592, 643, 644, 673, 674, 675, 676, 677, 678, 765, 781, 809, 825, 832, 839, 843, 844, 853, 863, 881, 883, 891, 892, 893, 894, 958, 963, 978, 982, 987, 988, 990, 997, 1003, 1009, 1010, 1011, 1014, 1022, 1023, 1024], "top": [6, 12, 13, 14, 16, 17, 30, 34, 37, 39, 41, 42, 43, 44, 45, 51, 62, 64, 71, 91, 97, 115, 118, 129, 132, 167, 197, 199, 208, 212, 226, 235, 236, 242, 244, 245, 248, 254, 258, 266, 267, 282, 299, 301, 305, 310, 317, 318, 329, 342, 353, 369, 371, 377, 382, 393, 394, 396, 401, 402, 403, 472, 572, 573, 576, 584, 710, 740, 776, 895, 897, 955, 958, 962, 964, 974, 990, 997, 1000, 1001, 1022], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 58, 62, 64, 98, 181, 183, 212, 213, 214, 220, 223, 226, 230, 232, 258, 342, 343, 344, 661, 662, 663, 997], "svd_solver": [6, 95, 103, 401, 520, 526, 997, 1014], "whiten": [6, 95, 96, 97, 281, 401, 408, 518, 519, 526, 861, 863, 997, 1012, 1014, 1022, 1023], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 53, 98, 143, 146, 154, 167, 168, 173, 176, 181, 183, 214, 232, 247, 255, 258, 261, 266, 277, 302, 311, 342, 343, 344, 353, 358, 365, 369, 371, 373, 375, 378, 379, 380, 382, 384, 396, 398, 400, 401, 403, 426, 427, 430, 435, 437, 457, 467, 468, 469, 470, 474, 520, 546, 547, 567, 591, 613, 615, 617, 619, 628, 629, 630, 644, 725, 779, 780, 781, 795, 800, 801, 847, 861, 951, 955, 956, 959, 962, 963, 966, 968, 969, 970, 976, 979, 980, 981, 982, 987, 992, 996, 997, 999, 1001, 1008, 1010, 1015, 1018, 1020, 1024], "components_": [6, 14, 58, 86, 95, 97, 98, 101, 106, 230, 231, 296, 304, 313, 384, 397, 401, 429, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 528, 529, 624, 832, 839, 875, 876, 978, 997, 1012, 1014, 1020, 1023], "project": [6, 8, 11, 13, 17, 27, 34, 45, 53, 58, 67, 90, 94, 95, 97, 99, 101, 102, 107, 112, 129, 153, 155, 157, 158, 164, 168, 176, 189, 194, 206, 218, 219, 220, 222, 225, 231, 233, 240, 243, 281, 286, 290, 302, 306, 309, 326, 334, 343, 348, 357, 360, 363, 365, 369, 370, 376, 377, 380, 384, 385, 387, 393, 399, 401, 402, 408, 425, 431, 436, 437, 447, 459, 467, 468, 469, 470, 474, 487, 489, 516, 518, 519, 520, 522, 524, 526, 527, 528, 529, 533, 534, 558, 567, 574, 626, 627, 634, 657, 659, 673, 676, 680, 681, 813, 832, 860, 875, 876, 877, 919, 920, 960, 962, 963, 964, 967, 969, 970, 972, 979, 982, 984, 989, 990, 992, 997, 1000, 1003, 1008, 1009, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "orthonorm": [6, 380, 919, 997], "x_train_pca": [6, 997], "x_test_pca": [6, 100, 997], "966": [6, 15, 235, 240], "010": [6, 343, 377, 974], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 35, 56, 70, 71, 72, 73, 100, 109, 111, 112, 114, 116, 117, 118, 121, 127, 130, 131, 142, 143, 145, 164, 169, 173, 175, 187, 188, 189, 195, 204, 206, 209, 212, 216, 226, 231, 238, 251, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 272, 274, 276, 279, 280, 285, 286, 288, 293, 296, 301, 311, 312, 316, 317, 318, 320, 321, 323, 324, 325, 328, 330, 331, 332, 337, 338, 339, 340, 344, 366, 368, 371, 373, 376, 382, 384, 396, 397, 400, 404, 405, 406, 413, 420, 422, 423, 424, 473, 474, 481, 489, 497, 499, 500, 507, 516, 521, 522, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 578, 579, 587, 591, 595, 607, 614, 616, 617, 618, 634, 643, 644, 651, 653, 656, 657, 658, 659, 660, 661, 682, 683, 685, 687, 688, 692, 693, 694, 697, 698, 703, 705, 710, 711, 713, 714, 718, 719, 722, 723, 724, 725, 726, 727, 738, 740, 766, 767, 768, 771, 772, 773, 776, 778, 781, 784, 785, 787, 795, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 830, 831, 833, 834, 839, 840, 841, 843, 844, 850, 863, 864, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 912, 914, 955, 956, 958, 961, 962, 963, 966, 967, 968, 971, 974, 976, 979, 980, 981, 982, 986, 987, 988, 990, 992, 993, 995, 996, 997, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023], "1e3": [6, 7, 10, 149, 155, 161, 232, 268, 955, 997], "1e5": [6, 154, 178, 180, 187, 268, 598, 599, 600, 604, 605, 607, 608, 610, 872, 877, 978, 997, 999], "clf": [6, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 58, 63, 71, 90, 101, 102, 114, 121, 124, 125, 130, 135, 138, 142, 143, 145, 151, 153, 170, 187, 189, 190, 194, 195, 201, 204, 206, 209, 210, 211, 213, 221, 227, 228, 231, 233, 235, 239, 246, 254, 258, 262, 263, 265, 268, 269, 280, 283, 284, 285, 288, 293, 301, 304, 309, 310, 311, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342, 347, 348, 351, 357, 366, 383, 384, 390, 397, 400, 403, 405, 423, 534, 535, 538, 540, 542, 544, 546, 548, 549, 552, 578, 579, 582, 617, 619, 623, 624, 625, 626, 627, 629, 630, 633, 637, 643, 644, 645, 646, 647, 651, 653, 654, 657, 658, 659, 660, 661, 662, 665, 682, 683, 685, 687, 772, 781, 784, 785, 795, 811, 812, 813, 815, 818, 819, 820, 821, 822, 829, 830, 840, 883, 885, 887, 888, 891, 895, 897, 956, 958, 962, 966, 967, 969, 970, 972, 973, 980, 981, 982, 992, 996, 997, 1001], "class_weight": [6, 331, 384, 542, 546, 549, 643, 644, 651, 653, 659, 660, 661, 662, 883, 885, 886, 887, 888, 889, 890, 891, 893, 955, 980, 981, 997, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1022, 1023], "n_iter": [6, 17, 71, 149, 176, 205, 218, 219, 223, 258, 265, 277, 296, 331, 373, 377, 383, 408, 439, 463, 517, 518, 522, 524, 529, 530, 531, 532, 629, 630, 631, 632, 637, 638, 645, 646, 647, 648, 666, 667, 668, 669, 670, 671, 672, 677, 679, 784, 785, 793, 795, 839, 841, 919, 920, 955, 980, 997, 1009, 1014, 1015, 1016, 1020, 1022, 1023, 1024], "found": [6, 19, 20, 21, 106, 116, 145, 149, 153, 155, 157, 158, 201, 233, 255, 258, 259, 260, 304, 309, 312, 314, 329, 344, 357, 359, 365, 368, 370, 371, 373, 382, 384, 385, 393, 396, 399, 400, 401, 403, 404, 406, 419, 426, 429, 430, 444, 457, 542, 543, 544, 545, 549, 550, 573, 575, 595, 596, 613, 621, 632, 636, 638, 640, 646, 648, 650, 656, 657, 659, 661, 663, 672, 673, 697, 704, 781, 784, 785, 795, 820, 825, 826, 832, 854, 856, 857, 891, 892, 893, 894, 898, 950, 954, 955, 958, 962, 963, 965, 967, 968, 969, 970, 976, 980, 981, 982, 987, 989, 992, 997, 1001, 1008, 1011, 1012, 1015, 1016, 1018, 1022], "grid": [6, 8, 10, 11, 25, 26, 27, 42, 54, 61, 71, 72, 74, 78, 82, 118, 120, 127, 153, 164, 166, 167, 168, 186, 215, 223, 231, 232, 236, 242, 247, 250, 254, 256, 258, 261, 262, 273, 275, 279, 281, 282, 290, 296, 301, 302, 304, 326, 329, 335, 342, 373, 378, 382, 384, 391, 397, 400, 402, 403, 404, 406, 433, 446, 449, 457, 483, 487, 500, 507, 616, 617, 618, 632, 635, 638, 639, 641, 644, 646, 648, 661, 698, 712, 726, 769, 772, 781, 784, 785, 792, 795, 797, 809, 810, 888, 959, 961, 966, 969, 973, 987, 992, 993, 995, 997, 999, 1003, 1008, 1011, 1012, 1013, 1015, 1016, 1022], "search": [6, 46, 54, 71, 72, 73, 74, 122, 143, 149, 164, 215, 232, 247, 250, 258, 261, 262, 269, 273, 277, 279, 281, 296, 301, 314, 329, 342, 353, 360, 368, 369, 371, 373, 382, 384, 391, 396, 397, 400, 403, 404, 405, 406, 407, 428, 433, 435, 437, 442, 443, 446, 449, 456, 457, 463, 487, 500, 507, 542, 543, 544, 545, 549, 550, 551, 564, 584, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 613, 638, 661, 673, 674, 677, 678, 698, 712, 769, 772, 781, 784, 785, 792, 793, 795, 797, 809, 810, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 888, 891, 892, 893, 894, 925, 954, 959, 961, 963, 966, 969, 970, 980, 982, 986, 987, 992, 993, 995, 997, 1003, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1022, 1023], "best_estimator_": [6, 54, 73, 74, 78, 103, 232, 247, 258, 261, 281, 781, 784, 785, 795, 955, 996, 997, 1015], "575": [6, 70, 197, 343], "76823": 6, "03433306453": 6, "003418945823095797": 6, "from_estim": [6, 25, 27, 31, 56, 112, 115, 125, 126, 130, 168, 180, 189, 206, 232, 236, 238, 251, 254, 259, 260, 264, 267, 280, 285, 288, 304, 309, 310, 311, 312, 314, 325, 326, 327, 330, 331, 348, 378, 394, 618, 703, 711, 766, 768, 771, 772, 773, 961, 966, 973, 997, 1005, 1021, 1022, 1023, 1024], "display_label": [6, 251, 682, 997, 1020], "xticks_rot": [6, 682, 997], "vertic": [6, 17, 60, 121, 170, 186, 230, 231, 261, 275, 299, 302, 334, 336, 384, 393, 396, 401, 500, 682, 765, 997], "tight_layout": [6, 8, 25, 27, 31, 34, 40, 52, 55, 65, 73, 75, 86, 95, 96, 106, 112, 116, 118, 123, 127, 129, 131, 151, 153, 158, 161, 166, 167, 169, 170, 176, 177, 181, 187, 195, 197, 205, 208, 212, 215, 218, 231, 235, 252, 253, 269, 275, 277, 279, 289, 300, 301, 302, 303, 304, 309, 313, 327, 343, 347, 348, 997], "048": [6, 149, 974], "precis": [6, 25, 32, 70, 75, 82, 95, 143, 155, 156, 164, 173, 227, 250, 251, 255, 273, 296, 299, 317, 318, 371, 373, 384, 393, 394, 395, 396, 398, 401, 403, 428, 454, 455, 456, 457, 458, 459, 460, 461, 463, 489, 508, 517, 519, 526, 529, 629, 630, 631, 633, 635, 636, 637, 639, 640, 641, 654, 657, 659, 665, 667, 668, 672, 685, 691, 692, 693, 698, 711, 713, 714, 715, 723, 747, 766, 767, 768, 771, 772, 779, 780, 809, 812, 823, 824, 829, 844, 863, 867, 883, 888, 895, 897, 920, 960, 962, 969, 970, 981, 997, 1001, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "recal": [6, 25, 32, 70, 100, 143, 164, 227, 250, 255, 273, 296, 317, 318, 371, 384, 396, 489, 589, 685, 691, 692, 693, 697, 698, 711, 713, 714, 715, 766, 767, 768, 771, 772, 809, 812, 844, 863, 867, 883, 962, 982, 997, 1001, 1011, 1012, 1015, 1017, 1018, 1020, 1021, 1022, 1024], "f1": [6, 25, 32, 70, 143, 255, 296, 317, 318, 321, 400, 698, 713, 714, 722, 767, 966, 967, 997, 1001, 1012, 1024], "support": [6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 70, 72, 108, 114, 120, 128, 133, 142, 143, 168, 198, 207, 208, 209, 215, 231, 232, 238, 251, 255, 262, 264, 277, 296, 299, 303, 313, 317, 318, 321, 322, 325, 326, 329, 330, 332, 334, 337, 340, 357, 358, 359, 360, 365, 369, 371, 373, 375, 376, 377, 378, 380, 381, 383, 384, 385, 396, 400, 401, 404, 406, 422, 425, 435, 437, 438, 449, 451, 452, 454, 459, 472, 481, 497, 523, 525, 526, 529, 532, 534, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 596, 598, 599, 600, 602, 604, 605, 607, 608, 610, 612, 616, 617, 618, 628, 630, 642, 643, 644, 655, 656, 657, 659, 660, 661, 662, 663, 672, 675, 679, 692, 698, 713, 714, 722, 727, 752, 762, 763, 764, 767, 768, 771, 772, 781, 784, 785, 787, 795, 806, 807, 815, 816, 821, 823, 824, 827, 829, 830, 835, 843, 844, 848, 854, 856, 857, 859, 863, 871, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 899, 909, 914, 915, 954, 955, 956, 958, 959, 960, 962, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 980, 984, 986, 987, 988, 990, 992, 995, 997, 1001, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "ariel": [6, 366, 1008, 1014], "sharon": [6, 366], "69": [6, 8, 188, 220, 265, 304, 318, 396, 456, 457, 592, 593, 740, 966, 976, 999], "colin": [6, 366, 1014], "powel": [6, 366], "87": [6, 32, 70, 158, 255, 296, 318, 582, 652, 772, 781, 859, 871, 966, 1001], "donald": [6, 366, 396, 709, 956], "rumsfeld": [6, 366], "63": [6, 368, 403, 542, 543, 550, 551, 710, 781, 795, 893, 894, 966], "georg": [6, 366, 396, 1014, 1020, 1021, 1022, 1023], "bush": [6, 366], "95": [6, 14, 30, 32, 44, 52, 57, 67, 91, 101, 102, 118, 122, 156, 167, 176, 197, 199, 204, 215, 244, 245, 248, 257, 258, 282, 290, 296, 301, 305, 313, 318, 329, 353, 403, 512, 617, 618, 621, 632, 646, 732, 880, 962, 966, 967, 979, 1001, 1011], "91": [6, 32, 51, 154, 296, 317, 318, 403, 961, 997, 1001], "146": [6, 296, 297, 403], "gerhard": [6, 366], "schroeder": [6, 366], "hugo": [6, 366, 1014, 1019, 1020, 1021, 1022], "chavez": [6, 366], "90": [6, 10, 14, 32, 74, 105, 106, 121, 122, 123, 143, 154, 170, 177, 188, 194, 196, 199, 204, 215, 242, 266, 268, 296, 301, 305, 317, 318, 353, 357, 371, 377, 400, 548, 765, 781, 807, 812, 864, 961, 966, 997, 1001, 1023], "toni": [6, 366, 548, 863, 972, 1021, 1022], "blair": [6, 366], "93": [6, 32, 197, 239, 255, 296, 318, 342, 368, 772, 781, 807, 891, 961, 966, 997, 1001], "83": [6, 30, 34, 39, 70, 296, 317, 368, 373, 406, 692, 770, 966, 997, 1001, 1011], "322": [6, 91, 456, 457], "macro": [6, 32, 70, 143, 255, 296, 309, 317, 318, 366, 400, 692, 698, 713, 714, 722, 767, 768, 771, 772, 966, 1001, 1008, 1016, 1024], "avg": [6, 32, 70, 143, 255, 296, 317, 318, 554, 689, 698, 966, 997, 1001, 1024], "weight": [6, 13, 14, 19, 24, 32, 54, 70, 106, 110, 122, 130, 131, 142, 143, 154, 162, 164, 167, 175, 181, 186, 188, 197, 201, 202, 211, 212, 213, 215, 216, 237, 242, 255, 260, 264, 266, 280, 289, 292, 293, 296, 297, 304, 306, 309, 312, 317, 318, 324, 331, 340, 342, 343, 344, 353, 367, 368, 380, 382, 384, 396, 398, 399, 401, 402, 405, 407, 413, 417, 422, 425, 428, 429, 431, 432, 434, 438, 444, 445, 448, 449, 450, 452, 454, 459, 467, 468, 469, 481, 500, 509, 523, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 571, 574, 575, 576, 578, 582, 587, 588, 595, 596, 613, 619, 620, 622, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 674, 678, 682, 683, 685, 687, 688, 692, 693, 694, 697, 698, 701, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 718, 719, 720, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 753, 766, 767, 768, 769, 771, 772, 773, 776, 777, 778, 779, 780, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 845, 848, 862, 863, 864, 878, 879, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 908, 909, 922, 941, 947, 956, 957, 962, 963, 965, 966, 968, 969, 970, 971, 973, 976, 979, 980, 981, 982, 987, 992, 999, 1001, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "85": [6, 16, 17, 32, 50, 55, 70, 98, 143, 212, 215, 268, 296, 318, 353, 403, 424, 485, 540, 541, 582, 637, 643, 729, 737, 772, 781, 807, 966, 967, 997, 1008], "plot_galleri": [6, 95, 997], "n_row": [6, 19, 95, 393, 411, 436, 438, 496, 498, 997], "n_col": [6, 19, 95, 234, 411, 436, 438, 496, 498, 617, 997], "portrait": [6, 401, 997], "figur": [6, 7, 8, 9, 10, 12, 13, 16, 24, 25, 26, 27, 30, 31, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 58, 59, 61, 62, 63, 64, 65, 67, 78, 82, 85, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 127, 128, 132, 135, 136, 138, 141, 142, 145, 150, 151, 152, 153, 156, 157, 162, 167, 168, 169, 176, 181, 182, 187, 190, 191, 194, 196, 198, 199, 201, 203, 208, 211, 212, 213, 214, 220, 221, 222, 226, 230, 231, 232, 233, 234, 236, 242, 244, 245, 248, 251, 256, 261, 262, 271, 282, 286, 287, 290, 293, 296, 299, 301, 302, 306, 309, 311, 317, 318, 319, 327, 329, 333, 334, 348, 349, 350, 371, 396, 402, 403, 404, 406, 423, 616, 617, 682, 683, 685, 686, 687, 787, 897, 955, 959, 962, 965, 966, 969, 970, 973, 980, 981, 982, 997, 999, 1000, 1021], "subplots_adjust": [6, 7, 13, 14, 30, 34, 39, 42, 44, 45, 50, 51, 54, 62, 64, 80, 82, 91, 92, 97, 98, 105, 110, 112, 113, 129, 167, 196, 197, 212, 215, 226, 233, 242, 244, 245, 248, 252, 268, 270, 282, 290, 293, 296, 301, 311, 318, 326, 329, 997], "bottom": [6, 8, 12, 13, 14, 30, 37, 39, 42, 44, 45, 51, 53, 62, 64, 91, 92, 120, 127, 132, 197, 208, 226, 242, 244, 245, 248, 254, 257, 268, 282, 299, 318, 320, 329, 371, 394, 396, 402, 572, 895, 960, 962, 966, 987, 997, 1000], "left": [6, 7, 12, 13, 14, 16, 24, 33, 39, 42, 44, 45, 51, 55, 62, 64, 72, 75, 81, 82, 91, 92, 97, 98, 110, 113, 115, 116, 119, 122, 129, 131, 152, 158, 162, 167, 182, 190, 197, 198, 199, 201, 208, 210, 211, 214, 215, 226, 230, 233, 235, 236, 242, 244, 245, 248, 253, 254, 255, 256, 258, 266, 267, 269, 282, 283, 290, 293, 296, 299, 313, 318, 328, 329, 351, 371, 373, 375, 393, 396, 399, 400, 402, 403, 404, 406, 431, 457, 467, 468, 469, 470, 478, 483, 534, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 572, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 620, 624, 628, 636, 640, 779, 780, 781, 784, 785, 788, 795, 856, 863, 891, 892, 893, 894, 895, 907, 920, 937, 940, 955, 958, 960, 962, 964, 966, 968, 973, 978, 980, 982, 996, 997, 999, 1000, 1015, 1017, 1022], "01": [6, 8, 10, 13, 15, 16, 28, 35, 40, 44, 51, 62, 68, 76, 85, 95, 97, 98, 113, 120, 121, 123, 126, 127, 133, 146, 154, 158, 159, 167, 168, 178, 181, 188, 204, 209, 210, 215, 216, 218, 219, 224, 226, 230, 231, 232, 236, 240, 244, 248, 249, 251, 256, 257, 258, 262, 264, 265, 273, 282, 291, 294, 299, 307, 310, 315, 323, 331, 340, 343, 349, 350, 352, 366, 368, 376, 396, 405, 434, 456, 500, 517, 524, 528, 580, 581, 583, 627, 631, 639, 643, 663, 681, 700, 781, 795, 877, 935, 962, 966, 970, 976, 978, 980, 997, 1001], "right": [6, 7, 11, 12, 13, 14, 16, 31, 39, 42, 43, 44, 45, 51, 53, 60, 62, 64, 79, 80, 82, 91, 92, 97, 98, 100, 103, 105, 109, 110, 112, 113, 114, 122, 123, 124, 131, 142, 149, 152, 162, 187, 198, 199, 200, 201, 203, 204, 207, 208, 226, 229, 230, 242, 244, 245, 247, 248, 252, 253, 257, 260, 264, 267, 268, 270, 282, 290, 293, 296, 299, 301, 304, 318, 329, 331, 337, 339, 342, 348, 351, 353, 360, 371, 382, 385, 393, 396, 399, 401, 402, 403, 406, 449, 467, 468, 469, 470, 519, 526, 529, 542, 543, 544, 545, 546, 547, 549, 550, 551, 572, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 612, 620, 661, 663, 848, 891, 892, 893, 894, 895, 907, 920, 955, 958, 960, 962, 964, 966, 968, 969, 973, 978, 980, 981, 982, 986, 987, 990, 993, 997, 999, 1000, 1010, 1016, 1022, 1024], "99": [6, 8, 25, 32, 44, 51, 62, 95, 215, 226, 230, 242, 244, 255, 258, 296, 299, 318, 358, 364, 368, 375, 400, 403, 404, 477, 632, 646, 656, 772, 830, 935, 961, 966, 976, 980, 997, 1003, 1010], "hspace": [6, 13, 14, 44, 45, 62, 95, 215, 226, 242, 244, 245, 248, 282, 311, 318, 326, 997], "grai": [6, 13, 46, 47, 50, 51, 53, 95, 98, 124, 195, 197, 215, 230, 233, 234, 264, 295, 368, 401, 478, 479, 487, 506, 997, 1000, 1019], "ytick": [6, 11, 30, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 90, 98, 120, 123, 136, 142, 151, 152, 153, 157, 180, 187, 193, 210, 226, 233, 243, 244, 245, 248, 252, 271, 281, 290, 296, 317, 329, 333, 334, 335, 342, 997], "portion": [6, 8, 81, 266, 357, 366, 368, 371, 377, 384, 772, 804, 821, 955, 965, 969, 997, 1001], "pred_nam": [6, 997], "rsplit": [6, 17, 258, 997], "true_nam": [6, 997], "ntrue": [6, 317, 318, 997], "prediction_titl": [6, 997], "signif": [6, 997], "eigenface_titl": [6, 997], "convolut": [6, 157, 997], "network": [6, 129, 295, 357, 358, 359, 360, 365, 366, 382, 384, 385, 390, 396, 401, 403, 408, 481, 518, 520, 552, 553, 681, 725, 840, 841, 934, 962, 964, 966, 980, 982, 986, 988, 997, 1002, 1003, 1008, 1022], "famili": [6, 357, 359, 384, 396, 399, 401, 403, 404, 405, 577, 580, 581, 583, 584, 585, 591, 840, 841, 859, 871, 962, 976, 980, 997, 999, 1012, 1022], "outsid": [6, 9, 19, 118, 198, 199, 229, 239, 382, 404, 431, 620, 862, 972, 997, 1016], "scope": [6, 19, 357, 359, 371, 382, 404, 986, 987, 997], "scikit": [6, 8, 10, 12, 16, 17, 31, 32, 50, 70, 115, 129, 143, 146, 158, 162, 164, 167, 185, 186, 215, 225, 238, 250, 254, 273, 277, 282, 284, 308, 315, 342, 343, 347, 348, 353, 358, 359, 360, 363, 365, 366, 367, 368, 370, 371, 374, 377, 378, 379, 380, 383, 384, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 410, 411, 413, 414, 415, 417, 418, 423, 428, 432, 435, 442, 444, 449, 450, 452, 453, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 489, 497, 500, 509, 523, 546, 547, 549, 550, 552, 561, 566, 567, 568, 570, 571, 574, 584, 587, 596, 611, 613, 615, 617, 619, 623, 625, 631, 633, 637, 643, 654, 665, 673, 685, 686, 687, 702, 732, 762, 763, 764, 772, 781, 782, 783, 784, 785, 786, 787, 795, 798, 799, 800, 801, 802, 809, 811, 812, 825, 827, 844, 846, 848, 850, 853, 855, 856, 857, 858, 862, 863, 867, 880, 881, 883, 888, 892, 914, 915, 932, 933, 955, 956, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 976, 979, 980, 981, 982, 985, 989, 995, 996, 997, 999, 1000, 1003, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "librari": [6, 257, 312, 314, 349, 353, 363, 365, 366, 369, 370, 371, 372, 377, 382, 383, 384, 387, 392, 643, 883, 884, 885, 886, 888, 889, 934, 962, 966, 981, 982, 986, 987, 990, 997, 1001, 1006, 1011, 1015, 1016, 1017, 1018, 1019, 1021], "reader": [6, 42, 312, 359, 371, 997], "pytorch": [6, 382, 986, 987, 997, 1024], "tensorflow": [6, 382, 986, 997], "implement": [6, 7, 13, 16, 17, 46, 56, 81, 95, 162, 173, 181, 182, 186, 211, 215, 218, 226, 232, 255, 257, 266, 277, 279, 282, 302, 309, 310, 311, 312, 313, 342, 344, 357, 358, 359, 365, 366, 368, 369, 371, 372, 373, 376, 377, 379, 380, 384, 387, 390, 392, 393, 395, 398, 400, 401, 402, 403, 405, 406, 407, 408, 409, 422, 427, 428, 429, 431, 432, 433, 434, 435, 460, 478, 481, 493, 517, 518, 519, 520, 521, 523, 526, 527, 528, 538, 539, 540, 542, 543, 546, 547, 548, 552, 557, 567, 573, 574, 576, 578, 582, 586, 595, 596, 617, 618, 625, 626, 630, 631, 638, 642, 643, 644, 648, 649, 653, 656, 657, 659, 660, 661, 662, 663, 669, 670, 671, 672, 673, 676, 677, 680, 692, 696, 705, 719, 722, 762, 766, 772, 773, 779, 781, 784, 785, 787, 795, 799, 800, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 818, 819, 820, 821, 822, 825, 826, 828, 831, 833, 834, 839, 840, 841, 843, 865, 873, 874, 880, 883, 884, 885, 886, 887, 888, 889, 919, 920, 931, 934, 935, 937, 955, 956, 958, 960, 962, 963, 964, 965, 967, 968, 970, 971, 972, 976, 978, 979, 982, 983, 984, 986, 987, 988, 990, 992, 997, 998, 999, 1000, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "936": [6, 8, 15, 422, 966], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 55, 61, 68, 70, 72, 114, 123, 143, 157, 164, 198, 238, 239, 244, 248, 250, 260, 263, 266, 271, 273, 279, 282, 289, 298, 301, 303, 306, 307, 311, 316, 318, 319, 322, 323, 327, 337, 342, 343, 344, 353, 359, 366, 367, 371, 376, 382, 392, 396, 400, 403, 432, 487, 497, 505, 682, 688, 698, 726, 780, 781, 848, 879, 891, 955, 956, 960, 966, 967, 968, 969, 976, 979, 982, 985], "diabet": [7, 123, 132, 134, 139, 146, 162, 164, 184, 185, 186, 193, 194, 253, 364, 403, 486, 637, 638, 781, 786, 804, 805, 806, 974, 992, 996, 1003], "regress": [7, 10, 13, 25, 27, 30, 54, 69, 71, 76, 80, 81, 84, 87, 98, 108, 113, 115, 120, 128, 133, 146, 148, 159, 161, 162, 164, 166, 167, 168, 175, 179, 181, 183, 187, 191, 192, 194, 198, 200, 201, 202, 213, 216, 225, 227, 234, 239, 240, 253, 270, 271, 275, 278, 291, 296, 300, 304, 311, 312, 313, 314, 324, 340, 342, 346, 352, 358, 359, 360, 363, 364, 366, 368, 371, 373, 376, 379, 380, 382, 383, 384, 391, 394, 398, 399, 400, 401, 405, 417, 422, 449, 450, 459, 469, 474, 475, 477, 481, 486, 487, 489, 490, 497, 501, 502, 503, 509, 513, 516, 520, 522, 524, 526, 527, 528, 530, 531, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 552, 555, 556, 577, 578, 579, 580, 581, 582, 583, 584, 585, 589, 590, 591, 594, 595, 596, 599, 600, 607, 608, 610, 616, 617, 618, 619, 620, 622, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 679, 686, 691, 706, 707, 708, 712, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 769, 781, 784, 785, 787, 795, 806, 807, 809, 810, 814, 816, 817, 825, 826, 831, 833, 834, 840, 841, 843, 844, 847, 848, 850, 856, 857, 858, 860, 863, 864, 867, 872, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 897, 903, 906, 908, 924, 955, 956, 958, 961, 963, 973, 974, 976, 977, 986, 987, 988, 989, 990, 992, 995, 998, 1003, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "patient": [7, 132, 146, 162, 368, 379, 400, 962, 999], "diseas": [7, 132, 146, 162, 260, 368, 697, 966, 999], "newsgroup": [7, 14, 19, 230, 258, 321, 343, 344, 364, 393, 404, 473, 474, 993, 1003], "post": [7, 14, 19, 70, 164, 313, 342, 343, 344, 346, 352, 357, 366, 370, 371, 375, 376, 383, 396, 433, 473, 474, 485, 697, 809, 891, 966, 982, 990, 1001, 1019], "written": [7, 29, 35, 89, 164, 204, 312, 358, 368, 371, 372, 373, 377, 379, 382, 384, 397, 402, 472, 487, 493, 682, 698, 809, 888, 895, 960, 962, 966, 970, 971, 980, 985, 992, 993, 998, 1001, 1017], "about": [7, 11, 29, 44, 53, 57, 62, 70, 86, 89, 118, 143, 158, 164, 166, 167, 170, 214, 226, 254, 255, 257, 259, 264, 282, 304, 309, 311, 312, 313, 314, 318, 342, 344, 351, 353, 357, 358, 360, 364, 366, 370, 371, 375, 376, 377, 383, 384, 385, 390, 400, 401, 404, 406, 423, 477, 479, 480, 481, 482, 485, 486, 487, 489, 490, 495, 500, 546, 547, 578, 579, 592, 593, 599, 618, 625, 661, 663, 727, 781, 795, 812, 904, 956, 962, 963, 965, 967, 969, 972, 973, 976, 977, 979, 981, 982, 984, 986, 990, 992, 993, 999, 1001, 1013, 1014, 1024], "sgdclassifi": [7, 8, 204, 205, 206, 207, 208, 209, 210, 231, 265, 321, 331, 342, 353, 357, 359, 377, 384, 394, 395, 404, 623, 625, 626, 627, 631, 643, 651, 653, 883, 888, 958, 962, 967, 980, 981, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1024], "stochast": [7, 58, 121, 124, 164, 173, 175, 216, 220, 222, 226, 231, 285, 286, 292, 297, 312, 396, 401, 403, 447, 473, 481, 487, 488, 489, 499, 507, 521, 529, 544, 545, 556, 589, 612, 624, 643, 644, 653, 657, 659, 661, 662, 663, 664, 672, 673, 674, 675, 677, 809, 832, 839, 840, 841, 844, 853, 887, 919, 920, 940, 955, 969, 970, 972, 988, 1002, 1003, 1008, 1009, 1012, 1013, 1015, 1017, 1019], "gradient": [7, 46, 66, 108, 115, 126, 129, 132, 133, 154, 155, 164, 175, 216, 226, 231, 299, 305, 384, 396, 406, 437, 447, 451, 452, 473, 481, 486, 488, 489, 500, 505, 538, 539, 544, 545, 546, 547, 549, 550, 556, 571, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 619, 620, 624, 633, 634, 643, 644, 653, 654, 657, 659, 661, 662, 663, 665, 672, 677, 679, 680, 725, 726, 732, 734, 784, 785, 786, 806, 809, 839, 840, 841, 844, 856, 857, 887, 940, 963, 966, 969, 970, 971, 972, 986, 988, 1003, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1021, 1023], "descent": [7, 13, 164, 175, 182, 216, 226, 231, 312, 401, 403, 456, 457, 463, 473, 481, 488, 516, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 556, 624, 631, 632, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 653, 657, 659, 661, 662, 663, 666, 667, 668, 669, 672, 679, 809, 840, 841, 844, 883, 887, 940, 963, 970, 972, 981, 988, 999, 1003, 1008, 1011, 1012, 1013, 1015, 1017, 1019, 1021, 1022, 1023], "nusvr": [7, 357, 889, 981, 1010, 1016, 1018, 1019, 1020, 1022, 1023], "nu": [7, 9, 11, 158, 211, 226, 328, 357, 403, 406, 604, 662, 885, 886, 887, 972, 980, 981, 1019, 1023], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 68, 72, 89, 95, 97, 142, 149, 157, 178, 184, 201, 202, 209, 213, 231, 232, 235, 238, 255, 257, 258, 262, 283, 296, 299, 322, 325, 326, 328, 329, 330, 332, 333, 334, 337, 339, 340, 343, 357, 359, 360, 376, 377, 380, 382, 384, 393, 394, 396, 398, 399, 400, 401, 403, 406, 407, 408, 422, 428, 429, 430, 432, 434, 435, 436, 438, 449, 450, 452, 453, 467, 468, 469, 470, 472, 474, 482, 494, 497, 506, 509, 516, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 534, 535, 536, 537, 552, 553, 554, 555, 566, 567, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 602, 603, 604, 605, 607, 608, 610, 616, 623, 625, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 676, 677, 678, 680, 684, 704, 719, 747, 752, 753, 754, 755, 757, 758, 759, 761, 762, 781, 784, 785, 795, 807, 810, 811, 812, 818, 819, 820, 821, 822, 825, 826, 827, 829, 830, 831, 833, 834, 835, 840, 841, 848, 850, 855, 863, 867, 870, 881, 883, 884, 885, 886, 887, 888, 889, 890, 903, 917, 919, 920, 929, 935, 955, 958, 959, 960, 962, 963, 964, 966, 967, 968, 970, 971, 972, 976, 980, 982, 988, 992, 995, 998, 1001, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1019, 1021], "gradientboostingregressor": [7, 122, 123, 129, 132, 357, 376, 382, 403, 539, 547, 617, 618, 962, 966, 967, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "forward": [7, 146, 311, 357, 371, 405, 493, 494, 524, 528, 538, 544, 545, 570, 571, 587, 670, 671, 847, 962, 987, 1020], "wise": [7, 26, 48, 157, 198, 226, 267, 299, 343, 357, 384, 394, 396, 400, 401, 405, 443, 516, 519, 522, 526, 530, 531, 534, 535, 538, 540, 541, 544, 545, 577, 580, 581, 583, 584, 585, 591, 625, 637, 685, 738, 811, 860, 873, 874, 877, 939, 941, 942, 943, 944, 947, 958, 960, 966, 967, 980, 987, 1008, 1013, 1016, 1017, 1018], "fashion": [7, 115, 120, 205, 266, 358, 384, 393, 394, 396, 401, 403, 538, 542, 543, 544, 545, 549, 550, 551, 587, 612, 809, 832, 847, 850, 856, 867, 891, 892, 893, 894, 937, 956, 962, 966, 976, 1017], "notic": [7, 25, 26, 53, 57, 80, 113, 115, 122, 145, 176, 181, 226, 238, 254, 255, 257, 258, 260, 266, 267, 277, 304, 342, 343, 344, 353, 376, 385, 400, 481, 526, 548, 955, 965, 966, 972, 1001, 1005, 1021], "faster": [7, 19, 39, 64, 73, 95, 110, 115, 119, 122, 146, 168, 173, 183, 197, 199, 212, 213, 215, 232, 277, 279, 295, 310, 312, 313, 342, 343, 344, 357, 365, 371, 379, 380, 384, 395, 396, 401, 405, 406, 408, 428, 432, 434, 436, 437, 438, 447, 493, 516, 517, 518, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 538, 544, 545, 546, 547, 628, 631, 632, 637, 638, 643, 644, 645, 646, 647, 648, 657, 659, 669, 672, 676, 680, 684, 710, 740, 762, 763, 764, 823, 824, 828, 840, 841, 858, 860, 862, 872, 876, 920, 935, 955, 959, 962, 967, 969, 970, 973, 978, 980, 981, 982, 986, 989, 997, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "10_000": [7, 25, 75, 115, 122, 166, 173, 230, 260, 277, 544, 545, 549, 550, 860], "vari": [7, 34, 44, 46, 55, 62, 75, 116, 118, 145, 164, 167, 168, 186, 188, 191, 195, 223, 231, 247, 253, 257, 260, 292, 297, 299, 304, 316, 323, 329, 332, 353, 357, 359, 366, 384, 426, 430, 431, 485, 493, 499, 500, 507, 544, 545, 549, 550, 631, 632, 635, 636, 637, 638, 639, 640, 645, 646, 647, 648, 666, 669, 688, 747, 800, 807, 809, 810, 840, 844, 848, 863, 880, 888, 891, 892, 940, 958, 961, 962, 966, 969, 970, 979, 982, 990, 1015, 1016, 1024], "relev": [7, 9, 19, 77, 83, 144, 164, 176, 191, 257, 258, 264, 353, 357, 359, 366, 368, 370, 371, 373, 375, 376, 377, 384, 385, 398, 399, 405, 406, 455, 459, 519, 526, 630, 640, 710, 724, 740, 784, 785, 812, 861, 863, 895, 896, 897, 966, 967, 972, 983, 987, 1011, 1016, 1020, 1022], "select": [7, 9, 36, 44, 55, 57, 62, 68, 69, 71, 74, 76, 82, 92, 94, 107, 112, 117, 119, 122, 129, 136, 143, 147, 154, 156, 167, 168, 170, 173, 175, 177, 181, 205, 212, 215, 216, 219, 226, 230, 232, 241, 242, 249, 255, 256, 257, 258, 262, 281, 299, 304, 305, 311, 317, 318, 321, 324, 329, 337, 340, 342, 343, 344, 353, 357, 358, 360, 366, 368, 369, 371, 373, 379, 383, 384, 393, 396, 397, 398, 401, 403, 404, 406, 428, 430, 431, 432, 434, 436, 438, 443, 444, 445, 449, 451, 452, 457, 458, 461, 473, 474, 477, 478, 481, 482, 486, 487, 489, 497, 500, 517, 519, 520, 525, 526, 529, 534, 536, 543, 544, 545, 548, 550, 566, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 612, 616, 617, 630, 631, 632, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 656, 658, 661, 663, 667, 668, 676, 677, 682, 697, 701, 703, 738, 774, 775, 779, 780, 781, 784, 785, 786, 787, 795, 805, 806, 807, 809, 811, 825, 826, 827, 829, 831, 833, 834, 835, 843, 844, 848, 853, 859, 863, 880, 883, 884, 888, 891, 892, 893, 894, 899, 935, 936, 960, 961, 963, 966, 967, 969, 970, 972, 976, 979, 980, 981, 982, 983, 986, 987, 988, 990, 992, 993, 995, 999, 1000, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "ham": [7, 435, 442, 566, 684, 688, 694, 718, 725, 762, 763, 764, 778, 969], "loss": [7, 24, 25, 26, 27, 120, 121, 122, 123, 124, 149, 150, 164, 175, 179, 187, 190, 199, 202, 204, 205, 209, 215, 216, 232, 265, 294, 295, 304, 312, 321, 326, 327, 331, 337, 342, 382, 384, 394, 395, 401, 406, 449, 450, 481, 493, 494, 517, 523, 524, 525, 528, 532, 537, 538, 539, 543, 544, 545, 546, 547, 550, 628, 631, 634, 643, 644, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 688, 691, 694, 707, 718, 719, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 778, 781, 784, 785, 795, 805, 806, 809, 840, 841, 843, 844, 847, 848, 856, 857, 858, 863, 883, 884, 889, 890, 892, 894, 920, 924, 959, 962, 970, 974, 979, 980, 981, 982, 1001, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "eustach": [7, 8, 10, 990, 1010, 1011], "diemert": [7, 8, 10, 990, 1010, 1011], "maria": [7, 123, 129, 146, 162, 396, 1019, 1020, 1021, 1022, 1023], "telenczuk": [7, 123, 129, 146, 162, 1017, 1020, 1021, 1023], "github": [7, 8, 12, 26, 71, 72, 109, 115, 116, 117, 123, 125, 126, 129, 132, 143, 154, 162, 167, 168, 169, 178, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 277, 296, 305, 310, 311, 313, 314, 319, 351, 365, 369, 370, 374, 375, 376, 377, 379, 382, 384, 385, 387, 390, 392, 437, 447, 493, 521, 676, 677, 680, 969, 985, 986, 989, 990, 1001, 1013, 1018], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 50, 57, 65, 70, 71, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 149, 152, 154, 156, 158, 162, 177, 197, 199, 204, 214, 215, 219, 221, 223, 229, 242, 244, 245, 258, 261, 277, 299, 300, 303, 304, 342, 343, 365, 366, 369, 371, 375, 376, 377, 379, 382, 387, 396, 427, 437, 447, 493, 519, 521, 526, 656, 676, 680, 690, 969, 984, 989, 1013, 1015, 1018], "maikia": [7, 123, 129, 162, 1016, 1017, 1019, 1020], "lemaitre58": [7, 129, 149, 154, 156, 158, 219, 299], "gmail": [7, 11, 14, 16, 24, 42, 48, 57, 65, 70, 71, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 149, 152, 154, 156, 158, 177, 197, 199, 214, 215, 219, 221, 229, 242, 244, 245, 258, 261, 299, 304, 342, 343], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 202, 204, 205, 213, 214, 215, 219, 220, 221, 223, 226, 229, 231, 232, 233, 235, 242, 244, 258, 261, 263, 270, 275, 277, 279, 285, 286, 287, 289, 290, 293, 296, 299, 300, 301, 302, 303, 304, 317, 318, 319, 320, 322, 333, 334, 337, 338, 342, 343, 344, 365, 384, 390, 982, 990], "mean_squared_error": [7, 122, 123, 193, 197, 199, 201, 203, 215, 353, 403, 726, 736, 966, 1009, 1011, 1018, 1019], "hamming_loss": [7, 688, 778, 966, 1010, 1014, 1017], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 54, 57, 59, 60, 62, 64, 65, 71, 78, 79, 80, 92, 96, 101, 102, 113, 118, 138, 141, 169, 187, 192, 195, 200, 203, 206, 210, 214, 221, 243, 245, 246, 247, 248, 260, 263, 271, 282, 283, 284, 289, 334, 335, 339, 343, 353, 358, 373, 380, 382, 384, 396, 400, 401, 428, 432, 433, 435, 437, 442, 444, 445, 446, 447, 456, 457, 458, 521, 529, 538, 539, 540, 541, 544, 545, 612, 631, 632, 637, 638, 645, 646, 647, 648, 662, 674, 676, 678, 680, 779, 780, 785, 814, 817, 832, 886, 906, 919, 920, 931, 935, 955, 956, 961, 963, 999, 1012, 1013, 1017, 1018, 1024], "fetch_20newsgroups_vector": [7, 212, 230, 366, 1008, 1018, 1020], "spars": [7, 12, 13, 17, 39, 40, 54, 55, 57, 77, 83, 94, 107, 115, 127, 164, 175, 192, 196, 213, 216, 230, 232, 258, 277, 310, 314, 337, 341, 344, 345, 351, 357, 363, 365, 366, 367, 371, 373, 374, 375, 376, 382, 383, 384, 395, 396, 397, 403, 404, 406, 407, 411, 423, 425, 427, 428, 429, 431, 432, 434, 435, 436, 437, 438, 442, 444, 445, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 472, 473, 474, 481, 482, 488, 493, 508, 509, 511, 512, 513, 514, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 566, 567, 570, 571, 573, 574, 575, 576, 578, 579, 588, 589, 590, 591, 592, 593, 594, 614, 615, 616, 618, 623, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 688, 697, 698, 699, 713, 714, 715, 718, 722, 723, 724, 738, 739, 744, 745, 747, 748, 750, 751, 752, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 771, 774, 775, 778, 781, 784, 785, 795, 802, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 825, 826, 827, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 850, 852, 853, 854, 855, 856, 858, 860, 861, 863, 865, 866, 867, 868, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 899, 901, 902, 903, 904, 909, 917, 920, 921, 924, 925, 926, 929, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 952, 956, 959, 962, 963, 964, 966, 967, 969, 979, 981, 982, 987, 988, 999, 1000, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "generate_data": [7, 33], "load_diabet": [7, 123, 132, 135, 146, 162, 182, 184, 185, 186, 193, 194, 236, 253, 314, 403, 543, 547, 553, 658, 686, 804, 805, 806, 892, 894, 974, 996, 999, 1014, 1019, 1022], "elif": [7, 8, 16, 34, 177, 199, 233, 235, 244, 282, 859], "subset": [7, 19, 26, 27, 32, 70, 71, 80, 81, 116, 118, 119, 135, 143, 168, 186, 198, 212, 213, 214, 215, 229, 231, 234, 235, 255, 258, 260, 266, 267, 269, 304, 305, 311, 317, 321, 342, 343, 344, 353, 366, 371, 379, 382, 384, 393, 394, 396, 397, 400, 403, 404, 406, 413, 422, 434, 449, 451, 452, 454, 473, 474, 477, 478, 482, 493, 534, 535, 536, 538, 540, 541, 542, 544, 546, 547, 548, 549, 552, 554, 587, 595, 614, 624, 625, 626, 627, 636, 640, 643, 651, 653, 656, 659, 660, 661, 662, 663, 664, 682, 688, 689, 698, 701, 703, 715, 718, 739, 741, 775, 778, 783, 807, 809, 811, 812, 813, 814, 818, 819, 820, 821, 822, 825, 830, 833, 840, 849, 878, 879, 883, 885, 888, 891, 893, 899, 935, 955, 962, 966, 967, 977, 979, 981, 982, 1001, 1011, 1016, 1017, 1019, 1021], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 59, 80, 108, 114, 130, 133, 162, 164, 170, 193, 202, 214, 231, 256, 257, 263, 267, 271, 275, 327, 334, 353, 357, 378, 384, 393, 394, 396, 400, 401, 403, 407, 423, 426, 428, 429, 430, 431, 433, 435, 436, 438, 440, 441, 456, 457, 463, 466, 521, 532, 538, 549, 554, 582, 596, 605, 617, 618, 619, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 657, 658, 659, 660, 664, 666, 669, 673, 675, 677, 679, 692, 701, 713, 714, 719, 720, 722, 728, 738, 748, 753, 755, 756, 757, 758, 762, 765, 767, 768, 771, 772, 773, 774, 775, 777, 788, 790, 804, 808, 821, 823, 824, 861, 862, 863, 869, 873, 883, 884, 909, 922, 958, 960, 962, 963, 964, 966, 968, 969, 970, 974, 976, 979, 981, 996, 999, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "given": [7, 10, 11, 27, 37, 49, 58, 60, 78, 85, 96, 100, 125, 127, 129, 149, 156, 167, 168, 181, 197, 198, 215, 219, 226, 230, 231, 234, 236, 253, 257, 258, 259, 260, 266, 283, 284, 285, 301, 305, 312, 337, 342, 343, 344, 350, 357, 359, 366, 370, 371, 373, 375, 377, 379, 380, 382, 384, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 413, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 441, 443, 444, 445, 446, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463, 466, 467, 468, 469, 472, 481, 486, 488, 490, 508, 521, 523, 524, 525, 528, 532, 534, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 573, 574, 575, 576, 578, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 616, 617, 629, 631, 634, 636, 637, 638, 640, 643, 644, 646, 648, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 672, 673, 676, 682, 683, 684, 685, 686, 687, 689, 690, 691, 697, 699, 702, 703, 705, 708, 710, 711, 718, 720, 721, 724, 736, 739, 740, 742, 743, 748, 758, 762, 765, 766, 768, 771, 772, 773, 776, 777, 779, 780, 781, 784, 785, 787, 793, 795, 799, 805, 806, 807, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 850, 853, 854, 856, 857, 858, 859, 860, 862, 863, 869, 870, 872, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 893, 898, 907, 908, 909, 950, 954, 955, 958, 960, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 976, 979, 980, 981, 982, 990, 992, 996, 997, 999, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "round": [7, 9, 25, 85, 161, 162, 204, 215, 257, 263, 301, 303, 342, 435, 441, 442, 549, 550, 578, 579, 582, 612, 677, 698, 783, 793, 848, 880, 895, 897, 956, 970, 982, 1010, 1012, 1014, 1016, 1017, 1019, 1021, 1022, 1024], "changing_param": 7, "collect": [7, 9, 10, 12, 16, 19, 25, 80, 114, 125, 132, 146, 154, 162, 170, 185, 190, 211, 221, 229, 260, 264, 283, 328, 331, 343, 344, 357, 366, 368, 375, 387, 400, 401, 403, 404, 406, 431, 449, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 554, 555, 566, 568, 569, 573, 574, 575, 576, 617, 783, 787, 788, 790, 937, 940, 955, 961, 962, 966, 972, 977, 987, 990, 996, 1001, 1010, 1020], "chang": [7, 16, 25, 26, 95, 99, 100, 113, 123, 150, 161, 166, 167, 170, 198, 199, 201, 202, 236, 237, 252, 257, 264, 267, 303, 309, 310, 311, 312, 313, 314, 318, 329, 344, 353, 357, 358, 359, 366, 369, 373, 374, 375, 376, 379, 382, 384, 396, 400, 403, 404, 406, 419, 422, 425, 432, 434, 437, 439, 444, 447, 453, 456, 457, 463, 478, 479, 481, 489, 493, 494, 497, 498, 499, 507, 511, 516, 520, 521, 522, 523, 524, 525, 531, 532, 534, 535, 536, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 573, 574, 576, 578, 579, 582, 587, 595, 596, 598, 599, 600, 602, 604, 605, 607, 608, 610, 612, 620, 629, 630, 632, 634, 635, 636, 638, 639, 640, 641, 643, 644, 646, 648, 649, 650, 655, 657, 659, 664, 672, 677, 685, 689, 692, 697, 701, 702, 713, 714, 720, 721, 725, 739, 740, 741, 762, 768, 769, 771, 777, 779, 780, 781, 782, 783, 784, 785, 786, 795, 799, 800, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 815, 816, 818, 819, 820, 822, 823, 824, 829, 830, 842, 845, 847, 848, 856, 871, 872, 877, 878, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 901, 903, 904, 915, 920, 932, 933, 934, 936, 955, 956, 957, 965, 966, 967, 969, 976, 979, 980, 981, 982, 984, 987, 992, 999, 1001, 1006, 1007], "affect": [7, 25, 80, 156, 166, 167, 201, 222, 236, 260, 267, 304, 353, 357, 358, 359, 367, 384, 386, 394, 396, 399, 400, 402, 404, 407, 409, 429, 435, 442, 458, 460, 464, 534, 535, 554, 697, 772, 781, 784, 785, 786, 795, 799, 800, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 863, 864, 874, 888, 965, 969, 981, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 375, 394, 400, 818, 968, 1022], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 16, 17, 25, 33, 37, 40, 44, 50, 61, 71, 103, 110, 113, 114, 120, 122, 136, 162, 170, 190, 201, 202, 204, 205, 212, 215, 231, 232, 257, 260, 266, 267, 270, 275, 293, 294, 305, 320, 329, 332, 342, 343, 344, 347, 351, 377, 384, 397, 404, 643, 644, 883, 884, 890, 910, 976, 996], "start_tim": [7, 10, 19, 116, 117, 129, 149, 186, 219], "elapsed_tim": [7, 39, 67, 116, 117, 129, 214], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 53, 60, 61, 65, 66, 67, 71, 98, 102, 138, 157, 167, 183, 187, 221, 256, 257, 261, 265, 337, 344, 357, 365, 366, 371, 380, 384, 396, 397, 404, 405, 407, 408, 409, 413, 415, 417, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 472, 477, 478, 479, 481, 483, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 568, 569, 573, 576, 577, 578, 579, 580, 581, 582, 583, 587, 588, 595, 596, 598, 599, 600, 601, 602, 604, 605, 607, 608, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 743, 750, 753, 759, 760, 761, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 787, 795, 798, 801, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 840, 841, 843, 846, 849, 850, 856, 857, 859, 861, 863, 864, 865, 866, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 901, 903, 904, 907, 917, 918, 929, 941, 947, 952, 956, 966, 967, 969, 970, 976, 981, 982, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 113, 121, 123, 212, 213, 215, 304], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 68, 94, 107, 126, 164, 196, 343, 344, 364, 365, 366, 373, 382, 384, 396, 404, 434, 449, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 495, 511, 516, 522, 523, 524, 525, 527, 528, 529, 530, 531, 533, 552, 553, 554, 555, 566, 567, 569, 572, 573, 574, 617, 618, 619, 649, 670, 671, 686, 698, 781, 784, 785, 792, 793, 795, 806, 842, 847, 856, 891, 892, 893, 894, 898, 908, 955, 962, 966, 981, 992, 1001, 1002, 1003, 1008, 1016, 1019, 1020, 1021, 1022, 1023], "necessari": [7, 13, 114, 181, 197, 202, 242, 257, 258, 264, 279, 349, 357, 366, 369, 370, 371, 372, 373, 374, 375, 379, 382, 396, 398, 403, 437, 447, 473, 474, 476, 477, 478, 479, 480, 482, 519, 629, 630, 631, 637, 641, 642, 645, 646, 647, 648, 649, 650, 656, 658, 660, 661, 676, 680, 777, 846, 855, 866, 870, 876, 955, 958, 962, 965, 968, 976, 982, 1001, 1008, 1016], "defin": [7, 9, 12, 27, 53, 55, 57, 66, 70, 71, 73, 86, 95, 100, 109, 110, 111, 129, 146, 149, 156, 157, 158, 168, 169, 176, 198, 201, 205, 214, 215, 226, 230, 236, 238, 242, 247, 257, 258, 260, 264, 266, 267, 268, 269, 277, 299, 310, 329, 337, 342, 343, 357, 367, 370, 371, 372, 373, 377, 378, 380, 382, 383, 384, 390, 391, 392, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 406, 412, 416, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 444, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 474, 504, 505, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 607, 608, 612, 613, 614, 615, 617, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 681, 682, 684, 693, 695, 701, 706, 707, 708, 709, 712, 715, 722, 725, 729, 730, 732, 734, 735, 737, 738, 741, 744, 750, 765, 769, 774, 775, 779, 780, 781, 784, 785, 787, 795, 806, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 870, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 907, 909, 912, 918, 950, 955, 956, 962, 963, 964, 965, 967, 968, 969, 971, 972, 973, 974, 976, 978, 980, 981, 982, 987, 997, 1000, 1003, 1005, 1010, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024], "complexity_label": [7, 10], "type": [7, 16, 53, 54, 69, 70, 76, 81, 90, 105, 118, 121, 154, 164, 166, 167, 168, 173, 181, 197, 199, 239, 241, 244, 247, 249, 252, 263, 264, 266, 267, 333, 337, 342, 344, 351, 353, 358, 360, 364, 365, 366, 368, 369, 371, 372, 374, 375, 376, 377, 382, 383, 387, 390, 392, 393, 397, 404, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 481, 493, 494, 500, 552, 557, 566, 567, 570, 571, 573, 574, 576, 585, 589, 602, 612, 614, 615, 623, 641, 643, 657, 659, 664, 672, 674, 677, 678, 686, 692, 699, 701, 713, 714, 722, 725, 767, 768, 771, 772, 779, 780, 781, 787, 795, 807, 809, 810, 825, 826, 827, 829, 830, 831, 833, 834, 835, 836, 837, 843, 844, 845, 848, 850, 856, 857, 863, 864, 881, 885, 886, 887, 888, 889, 899, 901, 903, 904, 907, 911, 912, 929, 930, 937, 940, 953, 956, 958, 963, 965, 966, 967, 968, 969, 970, 976, 978, 982, 989, 990, 994, 999, 1000, 1001, 1008, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 85, 142, 143, 146, 166, 167, 176, 179, 181, 182, 183, 187, 188, 189, 190, 191, 192, 193, 196, 200, 201, 202, 206, 212, 213, 233, 239, 270, 306, 313, 327, 334, 338, 342, 353, 366, 373, 384, 399, 405, 450, 467, 468, 469, 534, 578, 579, 582, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 883, 884, 885, 886, 887, 888, 889, 950, 960, 962, 980, 981, 999, 1008, 1010, 1013, 1015, 1020, 1022], "toarrai": [7, 321, 351, 397, 404, 551, 567, 573, 575, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 856, 873, 874, 937, 940, 956, 969, 976], "count_nonzero": [7, 10, 357], "configur": [7, 10, 71, 72, 168, 237, 239, 306, 342, 356, 369, 371, 373, 377, 379, 382, 384, 387, 392, 397, 404, 405, 418, 427, 428, 430, 432, 434, 437, 447, 449, 453, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 551, 552, 553, 554, 555, 566, 567, 568, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 611, 612, 613, 614, 615, 617, 620, 623, 624, 625, 626, 627, 673, 674, 675, 676, 677, 679, 680, 772, 827, 832, 835, 839, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 881, 932, 933, 963, 966, 976, 981, 986, 1001, 1003, 1012, 1015, 1016, 1017, 1018, 1020, 1022, 1023], "penalti": [7, 10, 30, 82, 164, 175, 176, 181, 186, 190, 197, 212, 213, 216, 228, 265, 293, 312, 321, 334, 342, 357, 379, 382, 395, 398, 401, 405, 456, 457, 458, 459, 460, 461, 463, 487, 516, 522, 523, 524, 525, 527, 528, 532, 533, 582, 628, 631, 632, 633, 634, 637, 638, 639, 642, 643, 644, 645, 646, 647, 653, 654, 655, 657, 661, 663, 665, 666, 672, 795, 863, 883, 884, 886, 888, 889, 890, 955, 962, 965, 970, 976, 980, 981, 999, 1001, 1010, 1013, 1015, 1017, 1018, 1020, 1021, 1023, 1024], "elasticnet": [7, 10, 178, 188, 265, 270, 357, 377, 382, 401, 632, 637, 642, 643, 644, 645, 646, 647, 648, 653, 661, 663, 666, 962, 980, 1008, 1009, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022], "001": [7, 13, 32, 44, 62, 149, 167, 181, 206, 226, 242, 255, 257, 259, 320, 343, 368, 377, 400, 521, 522, 524, 531, 612, 629, 630, 631, 632, 637, 638, 645, 646, 647, 648, 651, 652, 653, 661, 662, 663, 664, 666, 669, 674, 675, 678, 679, 779, 780, 840, 841, 878, 879, 885, 886, 887, 888, 889, 955, 992, 1001], "modified_hub": [7, 661, 980], "fit_intercept": [7, 176, 177, 183, 202, 211, 226, 265, 306, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 883, 884, 890, 962, 980, 1012, 1016, 1017, 1018, 1020, 1021, 1022], "tol": [7, 10, 17, 73, 95, 120, 161, 177, 188, 190, 204, 205, 211, 213, 226, 236, 243, 245, 296, 312, 337, 342, 373, 377, 403, 408, 428, 432, 434, 437, 444, 447, 456, 457, 463, 467, 468, 469, 516, 517, 518, 520, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 544, 545, 546, 547, 587, 612, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 657, 659, 661, 662, 663, 664, 665, 667, 668, 670, 671, 672, 673, 674, 676, 678, 680, 779, 780, 795, 832, 840, 841, 878, 879, 883, 884, 885, 886, 887, 888, 889, 952, 962, 980, 981, 997, 1001, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023], "n_iter_no_chang": [7, 120, 205, 312, 342, 376, 384, 403, 544, 545, 546, 547, 651, 652, 653, 661, 662, 663, 840, 841, 980, 1016, 1019], "l1_ratio": [7, 10, 14, 181, 182, 188, 265, 270, 357, 382, 401, 523, 525, 532, 631, 632, 637, 643, 644, 645, 646, 647, 648, 653, 661, 663, 666, 962, 980, 1009, 1011, 1013, 1020, 1022], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 58, 60, 78, 79, 82, 95, 98, 143, 164, 165, 166, 171, 175, 181, 182, 183, 184, 188, 190, 191, 192, 193, 194, 195, 199, 200, 212, 215, 216, 239, 295, 306, 311, 312, 313, 342, 343, 344, 357, 367, 371, 373, 384, 386, 395, 398, 399, 401, 405, 406, 409, 417, 437, 450, 452, 458, 460, 461, 463, 464, 465, 466, 467, 468, 469, 481, 509, 511, 512, 516, 520, 522, 524, 527, 528, 533, 537, 539, 541, 543, 545, 547, 550, 553, 555, 567, 574, 578, 582, 594, 596, 599, 612, 620, 621, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 676, 686, 688, 701, 704, 713, 718, 722, 727, 734, 737, 759, 761, 769, 770, 774, 775, 778, 796, 806, 809, 816, 817, 826, 834, 841, 844, 856, 863, 883, 884, 885, 886, 887, 888, 889, 892, 894, 957, 960, 962, 980, 981, 999, 1008, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1022], "misclassif": [7, 778, 980, 981, 982, 1009], "ratio": [7, 53, 66, 73, 104, 164, 230, 232, 245, 250, 273, 357, 371, 396, 398, 400, 403, 435, 441, 478, 479, 500, 526, 534, 535, 536, 616, 643, 695, 697, 701, 709, 714, 720, 723, 766, 767, 768, 771, 777, 806, 809, 829, 876, 935, 960, 972, 982, 997, 1023], "sparsifi": [7, 181, 357, 643, 644, 651, 653, 661, 662, 663, 883, 950, 1010], "05": [7, 8, 14, 24, 26, 30, 37, 44, 60, 62, 64, 65, 67, 68, 75, 85, 91, 100, 113, 120, 122, 127, 133, 135, 139, 142, 154, 157, 158, 167, 171, 177, 178, 196, 199, 211, 216, 222, 223, 226, 242, 244, 245, 248, 257, 258, 264, 266, 267, 268, 273, 282, 285, 290, 297, 299, 301, 309, 313, 318, 320, 323, 334, 340, 345, 368, 405, 435, 441, 577, 580, 581, 583, 598, 599, 600, 604, 605, 607, 608, 610, 617, 618, 634, 675, 679, 740, 781, 832, 883, 884, 962, 970, 976], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 55, 60, 61, 62, 63, 64, 65, 70, 72, 98, 101, 105, 106, 110, 113, 118, 119, 120, 137, 138, 144, 145, 149, 157, 162, 168, 170, 196, 197, 215, 221, 226, 229, 230, 231, 234, 235, 242, 244, 245, 252, 255, 257, 258, 265, 266, 268, 271, 275, 277, 284, 286, 287, 293, 300, 301, 302, 305, 317, 318, 321, 329, 336, 339, 342, 343, 344, 351, 382, 384, 406, 422, 430, 435, 441, 449, 492, 500, 535, 554, 555, 567, 582, 617, 618, 766, 781, 795, 805, 809, 811, 814, 878, 879, 999, 1000, 1001, 1017, 1020], "support_vectors_": [7, 10, 16, 330, 333, 334, 885, 886, 887, 888, 889, 981], "squared_error": [7, 105, 122, 123, 312, 403, 543, 544, 545, 547, 550, 656, 661, 663, 678, 892, 894, 980, 982, 1021, 1024], "learning_r": [7, 109, 110, 121, 122, 123, 124, 223, 277, 294, 296, 310, 312, 403, 538, 539, 544, 545, 546, 547, 653, 661, 662, 663, 677, 839, 840, 841, 963, 973, 980, 1009, 1017, 1021], "max_depth": [7, 31, 109, 110, 111, 112, 115, 118, 121, 122, 123, 124, 127, 128, 130, 161, 219, 254, 269, 311, 312, 347, 349, 350, 351, 383, 384, 403, 538, 539, 542, 543, 544, 545, 546, 547, 549, 550, 551, 784, 785, 807, 891, 892, 893, 894, 895, 896, 897, 955, 973, 982, 1017, 1019], "n_estim": [7, 10, 26, 31, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 127, 128, 131, 161, 170, 219, 234, 238, 244, 254, 269, 301, 309, 311, 357, 383, 384, 403, 405, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 617, 784, 785, 955, 972, 973, 1005, 1016, 1024], "n_tree": 7, "loop": [7, 8, 113, 122, 167, 252, 262, 342, 351, 357, 371, 372, 377, 396, 400, 405, 631, 632, 637, 638, 644, 645, 646, 647, 648, 955, 979, 980, 996, 1011, 1012, 1015, 1020, 1021], "previous": [7, 53, 57, 71, 155, 167, 255, 264, 313, 366, 379, 382, 387, 396, 401, 404, 425, 428, 439, 509, 519, 526, 634, 643, 644, 651, 653, 661, 662, 663, 883, 934, 962, 976, 986, 1005, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "subsequ": [7, 32, 58, 75, 98, 143, 185, 199, 259, 262, 277, 279, 329, 353, 371, 373, 377, 384, 396, 397, 403, 406, 422, 481, 493, 538, 539, 544, 546, 547, 651, 653, 661, 784, 785, 811, 812, 815, 818, 819, 820, 821, 822, 840, 858, 862, 956, 965, 967, 1017, 1018, 1022, 1024], "relax": [7, 396, 404, 438, 979, 1015], "sgd": [7, 8, 164, 175, 204, 211, 216, 226, 265, 294, 295, 312, 342, 353, 359, 489, 497, 616, 634, 651, 652, 653, 656, 661, 662, 663, 664, 840, 841, 955, 970, 988, 1003, 1008, 1011, 1012, 1013, 1015, 1019, 1021], "svr": [7, 10, 164, 225, 240, 309, 324, 340, 357, 541, 552, 553, 578, 579, 628, 663, 781, 787, 884, 886, 888, 959, 999, 1008, 1010, 1012, 1013, 1016, 1018, 1019, 1020, 1021, 1022, 1023], "optim": [7, 13, 27, 53, 54, 57, 60, 72, 78, 79, 95, 109, 121, 123, 145, 149, 150, 153, 154, 155, 156, 157, 158, 181, 185, 186, 190, 205, 213, 232, 255, 262, 265, 270, 275, 281, 296, 299, 304, 313, 320, 331, 337, 342, 343, 344, 353, 357, 360, 365, 368, 371, 373, 374, 382, 384, 387, 391, 393, 396, 398, 400, 401, 403, 405, 406, 407, 429, 433, 434, 435, 437, 442, 446, 447, 457, 458, 464, 516, 519, 520, 522, 524, 528, 542, 543, 544, 545, 559, 595, 596, 604, 605, 620, 623, 625, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 653, 654, 655, 657, 658, 659, 661, 662, 663, 665, 666, 667, 668, 669, 672, 675, 677, 679, 680, 686, 707, 714, 781, 795, 825, 826, 827, 829, 831, 832, 833, 834, 835, 840, 841, 859, 871, 875, 876, 883, 884, 885, 886, 887, 888, 889, 958, 959, 960, 961, 962, 966, 967, 968, 969, 970, 971, 980, 981, 982, 986, 990, 996, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024], "few": [7, 14, 19, 39, 46, 52, 99, 119, 152, 155, 156, 186, 195, 197, 199, 215, 232, 242, 259, 260, 264, 295, 299, 303, 309, 310, 311, 312, 313, 314, 317, 337, 344, 357, 366, 367, 368, 371, 373, 383, 385, 390, 393, 394, 396, 400, 401, 403, 405, 406, 422, 434, 546, 547, 573, 576, 640, 677, 680, 876, 920, 934, 962, 963, 965, 966, 969, 970, 979, 981, 982, 990, 992, 999, 1000, 1001, 1014, 1024], "drawn": [7, 52, 80, 113, 145, 149, 158, 166, 236, 264, 281, 342, 367, 396, 402, 403, 406, 408, 454, 455, 456, 457, 458, 459, 460, 461, 500, 508, 518, 540, 541, 548, 596, 612, 617, 626, 819, 875, 876, 893, 894, 962, 976, 978, 1011], "boost": [7, 108, 109, 110, 111, 115, 126, 129, 132, 133, 164, 305, 377, 384, 405, 433, 451, 452, 481, 486, 489, 500, 505, 538, 539, 544, 545, 546, 547, 549, 550, 617, 618, 619, 620, 725, 726, 732, 734, 784, 785, 786, 806, 809, 844, 856, 857, 962, 966, 986, 988, 1003, 1008, 1009, 1011, 1013, 1014, 1015, 1017, 1021], "detriment": [7, 145, 358, 405, 962], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 57, 60, 65, 67, 73, 75, 80, 92, 119, 162, 170, 197, 227, 229, 236, 242, 260, 268, 300, 304, 305, 320, 342, 343, 997], "add_subplot": [7, 16, 25, 27, 42, 45, 64, 67, 90, 101, 102, 109, 168, 194, 212, 220, 222, 317, 318, 378], "line1": [7, 12, 221], "tab": [7, 53, 126, 129, 149, 154, 156, 185, 186, 310, 397, 1015], "blue": [7, 20, 21, 26, 34, 92, 95, 113, 116, 124, 126, 129, 131, 144, 154, 156, 173, 177, 185, 186, 193, 195, 221, 230, 251, 252, 257, 294, 304, 310, 319, 368, 396, 401], "set_xlabel": [7, 10, 45, 53, 60, 72, 73, 75, 90, 92, 100, 109, 158, 161, 162, 166, 168, 169, 173, 186, 192, 194, 195, 197, 199, 212, 213, 231, 257, 259, 263, 268, 269, 282, 299, 300, 304, 320, 343, 344, 347], "y1_label": 7, "set_ylabel": [7, 8, 10, 45, 53, 60, 65, 72, 73, 75, 80, 90, 92, 100, 106, 109, 116, 158, 168, 173, 186, 188, 192, 194, 195, 197, 199, 212, 231, 242, 257, 259, 263, 268, 269, 275, 282, 299, 300, 304, 309, 320, 337, 343, 347, 997], "spine": [7, 14, 208, 299], "set_color": [7, 208], "get_color": 7, "yaxi": [7, 10, 45, 60, 90, 101, 102, 194, 218, 220, 223, 242, 277, 282, 342], "tick_param": [7, 14, 132, 242, 257, 303, 320], "ax2": [7, 57, 60, 65, 67, 80, 92, 119, 162, 170, 197, 227, 236, 242, 260, 268, 287, 300, 304, 305, 320, 342], "frameon": [7, 203], "line2": [7, 12, 221, 338], "orang": [7, 53, 92, 96, 97, 103, 124, 126, 156, 162, 185, 186, 207, 233, 245, 280, 288, 310, 350, 967], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 16, 25, 61, 161, 197, 199, 239, 252, 259, 301, 321, 342, 343, 344, 378, 382, 856], "prediction_perform": 7, "4948": 7, "2675": 7, "056513": 7, "1847": 7, "3264": 7, "044154": 7, "997": [7, 40], "3383": 7, "036295": 7, "802": [7, 368], "3582": 7, "036668": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000187": 7, "5289": 7, "8022": [7, 384, 458, 1017], "000297": 7, "5193": 7, "8353": 7, "000428": 7, "124": [7, 149, 159, 168, 403, 1010], "5131": [7, 1013], "3279": 7, "000677": 7, "178": [7, 368, 377, 495, 827], "5149": 7, "0779": 7, "000908": 7, "4066": 7, "4812": 7, "000183": 7, "3551": 7, "1723": 7, "000186": 7, "3445": 7, "2171": 7, "000265": 7, "3433": 7, "0358": 7, "000276": 7, "3456": 7, "0602": 7, "000475": 7, "deduc": 7, "guarante": [7, 8, 80, 81, 167, 205, 230, 275, 277, 299, 343, 353, 359, 365, 379, 380, 396, 400, 401, 404, 431, 521, 630, 643, 644, 653, 657, 659, 661, 663, 672, 679, 798, 801, 823, 824, 861, 863, 876, 877, 890, 958, 962, 963, 965, 969, 974, 978, 982, 1000, 1018], "aspect": [7, 58, 86, 95, 153, 168, 218, 226, 286, 335, 357, 358, 359, 371, 384, 385, 396, 643, 644, 982, 990], "236": [7, 15], "plot_model_complexity_influ": [7, 15], "doesn": [8, 197, 243, 295, 329, 379, 384, 387, 396, 404, 405, 409, 419, 460, 617, 618, 651, 653, 661, 701, 807, 810, 815, 825, 826, 840, 965, 966, 982, 1012], "t": [8, 11, 12, 16, 17, 26, 30, 34, 39, 40, 42, 43, 44, 52, 54, 58, 70, 72, 78, 79, 80, 82, 85, 92, 96, 97, 101, 103, 105, 106, 109, 110, 113, 114, 120, 121, 122, 123, 124, 128, 129, 146, 150, 152, 153, 154, 157, 158, 164, 167, 168, 169, 170, 176, 178, 181, 184, 191, 194, 195, 196, 197, 198, 215, 217, 219, 220, 221, 222, 224, 233, 243, 246, 248, 256, 257, 277, 289, 290, 295, 309, 312, 313, 317, 318, 320, 325, 326, 329, 330, 333, 334, 337, 342, 343, 344, 350, 351, 353, 357, 358, 365, 366, 368, 371, 373, 375, 377, 379, 382, 383, 384, 387, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 409, 413, 417, 419, 422, 432, 433, 435, 441, 448, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 480, 481, 498, 499, 500, 504, 505, 510, 515, 517, 519, 526, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 575, 576, 579, 592, 593, 595, 596, 612, 613, 615, 616, 617, 618, 620, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 681, 689, 695, 701, 702, 710, 720, 721, 739, 740, 741, 751, 772, 773, 776, 777, 781, 784, 785, 795, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 829, 830, 833, 834, 839, 840, 841, 849, 854, 856, 857, 863, 864, 876, 878, 879, 883, 884, 885, 886, 888, 889, 891, 892, 893, 894, 920, 930, 955, 960, 962, 965, 966, 967, 968, 969, 970, 971, 972, 973, 976, 980, 981, 982, 989, 992, 999, 1000, 1001, 1002, 1003, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "memori": [8, 54, 71, 72, 99, 120, 167, 168, 279, 305, 309, 311, 313, 314, 342, 343, 344, 358, 359, 365, 371, 374, 380, 384, 397, 400, 401, 404, 407, 408, 426, 427, 428, 429, 430, 431, 432, 434, 435, 439, 442, 444, 453, 458, 464, 481, 488, 493, 518, 519, 520, 523, 540, 541, 542, 543, 548, 549, 550, 566, 567, 573, 574, 576, 631, 632, 633, 637, 638, 643, 644, 645, 646, 647, 648, 651, 653, 654, 661, 662, 663, 664, 665, 666, 669, 762, 763, 764, 765, 781, 787, 795, 804, 805, 806, 807, 810, 811, 812, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 843, 844, 861, 863, 873, 874, 876, 881, 883, 884, 891, 892, 893, 894, 904, 935, 951, 962, 968, 969, 976, 978, 979, 981, 982, 986, 987, 990, 992, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "onlin": [8, 14, 36, 68, 95, 98, 164, 175, 211, 216, 359, 366, 370, 376, 384, 396, 401, 404, 406, 427, 431, 432, 434, 480, 487, 516, 521, 522, 523, 524, 530, 531, 567, 569, 643, 651, 652, 653, 661, 663, 809, 818, 819, 820, 821, 822, 825, 826, 831, 833, 834, 852, 853, 863, 883, 884, 958, 962, 970, 972, 985, 988, 990, 999, 1003, 1008, 1012, 1013, 1015, 1023], "partial_fit": [8, 50, 95, 313, 359, 373, 384, 396, 401, 427, 434, 519, 521, 522, 523, 574, 582, 643, 644, 651, 652, 653, 661, 662, 663, 811, 812, 815, 816, 818, 819, 820, 821, 822, 839, 840, 841, 852, 853, 863, 883, 962, 968, 970, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1021, 1022, 1023, 1024], "fed": [8, 129, 353, 366, 404, 955, 971, 976, 1019], "batch": [8, 11, 64, 95, 99, 290, 313, 359, 380, 384, 404, 425, 427, 432, 434, 436, 438, 516, 518, 519, 521, 522, 523, 524, 525, 527, 528, 530, 531, 649, 670, 671, 786, 799, 800, 818, 819, 820, 821, 822, 840, 841, 852, 853, 863, 864, 876, 923, 932, 970, 971, 980, 1008, 1012, 1013, 1016, 1017, 1018, 1019, 1021, 1023, 1024], "remain": [8, 25, 27, 71, 116, 121, 123, 145, 167, 197, 213, 242, 255, 259, 263, 266, 393, 396, 397, 398, 400, 404, 431, 449, 452, 500, 501, 506, 513, 519, 555, 595, 596, 747, 753, 783, 784, 785, 786, 789, 791, 818, 819, 820, 822, 924, 955, 956, 965, 966, 970, 976, 982, 987, 1010, 1016, 1022], "hashingvector": [8, 344, 359, 474, 573, 575, 1009, 1015, 1016, 1017, 1018, 1021], "where": [8, 11, 12, 13, 16, 17, 19, 24, 25, 26, 32, 53, 55, 57, 80, 86, 92, 95, 98, 101, 105, 106, 109, 112, 114, 119, 120, 122, 126, 143, 146, 149, 155, 158, 162, 167, 176, 181, 189, 198, 206, 207, 208, 210, 214, 215, 218, 220, 221, 226, 227, 230, 233, 237, 248, 253, 254, 257, 259, 263, 264, 266, 268, 269, 296, 299, 301, 302, 303, 304, 305, 306, 309, 311, 312, 318, 319, 327, 337, 338, 339, 342, 347, 348, 353, 357, 358, 359, 365, 367, 368, 370, 371, 373, 375, 377, 378, 379, 382, 383, 384, 385, 387, 390, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 417, 422, 429, 432, 433, 437, 446, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 472, 481, 516, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 567, 568, 569, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 594, 595, 596, 598, 600, 604, 607, 608, 610, 612, 613, 614, 615, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 673, 676, 677, 678, 681, 692, 697, 701, 709, 713, 714, 715, 723, 726, 739, 747, 752, 753, 754, 757, 765, 766, 767, 768, 771, 774, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 807, 808, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 826, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 846, 853, 856, 858, 859, 862, 863, 869, 871, 877, 878, 879, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 911, 912, 913, 914, 920, 951, 955, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 980, 981, 982, 987, 989, 992, 993, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "word": [8, 14, 19, 70, 149, 230, 233, 329, 343, 344, 357, 366, 367, 371, 373, 376, 384, 393, 396, 398, 399, 400, 401, 438, 496, 508, 519, 521, 526, 573, 574, 576, 681, 812, 822, 880, 960, 964, 968, 971, 976, 979, 980, 990, 999, 1000, 1008, 1016], "federicov": 8, "itertool": [8, 42, 44, 62, 130, 168, 182, 243, 248, 257, 264, 266, 403], "pathlib": [8, 1023], "path": [8, 16, 17, 164, 175, 182, 186, 216, 347, 365, 369, 371, 375, 379, 380, 384, 426, 430, 435, 471, 472, 473, 484, 485, 486, 488, 489, 490, 493, 494, 533, 542, 543, 548, 549, 550, 551, 578, 579, 582, 631, 632, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 666, 667, 668, 669, 670, 671, 673, 843, 844, 890, 891, 892, 893, 894, 925, 955, 962, 963, 972, 986, 987, 1008, 1009, 1012, 1014, 1015, 1017, 1018, 1020, 1021, 1023, 1024], "hashlib": 8, "sha256": [8, 1023], "tarfil": 8, "sy": [8, 12, 16, 19, 205, 230, 277, 321, 344, 366, 382, 602], "rcparam": [8, 226, 231, 306], "htmlparser": 8, "urllib": [8, 17], "request": [8, 17, 46, 197, 215, 312, 358, 365, 369, 370, 374, 384, 385, 390, 401, 404, 405, 434, 557, 596, 617, 684, 969, 1001, 1014, 1015, 1016], "urlretriev": 8, "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 66, 70, 98, 164, 258, 321, 341, 342, 343, 344, 359, 360, 366, 396, 397, 404, 449, 488, 529, 856, 964, 1000, 1001, 1008, 1009, 1010, 1011, 1014, 1015], "passiveaggressiveclassifi": [8, 204, 357, 359, 962, 967, 1009, 1012, 1013, 1015, 1016, 1019, 1021], "perceptron": [8, 164, 204, 207, 213, 236, 292, 297, 359, 382, 404, 499, 500, 507, 651, 661, 809, 839, 840, 841, 844, 863, 964, 967, 971, 980, 988, 1003, 1012, 1014, 1015, 1016, 1020], "naive_bay": [8, 24, 25, 27, 31, 127, 131, 258, 259, 342, 353, 359, 360, 366, 397, 403, 422, 554, 844, 960, 967, 968, 1001, 1009, 1010, 1012, 1013, 1014, 1015], "multinomialnb": [8, 359, 366, 397, 404, 818, 819, 820, 821, 968, 1001, 1010, 1012, 1015, 1016, 1020, 1021, 1023], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 71, 125, 152, 155, 157, 167, 168, 197, 215, 219, 227, 255, 299, 351, 353, 358, 366, 369, 370, 371, 373, 375, 376, 377, 384, 396, 397, 398, 400, 401, 403, 405, 408, 425, 427, 436, 438, 439, 444, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 472, 473, 476, 477, 481, 482, 488, 493, 494, 499, 507, 512, 516, 517, 522, 523, 524, 525, 527, 530, 531, 533, 537, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 566, 573, 574, 575, 576, 582, 587, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 614, 616, 617, 618, 620, 621, 622, 623, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 675, 679, 680, 682, 683, 685, 687, 689, 697, 726, 745, 751, 758, 762, 766, 773, 781, 784, 785, 786, 787, 795, 799, 800, 803, 806, 807, 809, 812, 814, 817, 818, 819, 820, 822, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 840, 841, 847, 864, 870, 883, 884, 885, 886, 887, 888, 889, 895, 897, 901, 903, 904, 905, 907, 919, 920, 939, 950, 954, 955, 956, 961, 962, 966, 971, 972, 978, 980, 981, 990, 1015, 1016, 1017], "builder": [8, 10, 375], "__file__": [8, 10, 1021], "global": [8, 10, 42, 57, 95, 197, 218, 219, 239, 266, 295, 310, 353, 357, 358, 377, 382, 384, 396, 406, 427, 437, 447, 453, 575, 611, 617, 673, 676, 677, 680, 692, 713, 714, 722, 767, 768, 771, 772, 799, 864, 879, 881, 934, 936, 955, 963, 966, 972, 976, 982, 990, 1016, 1023], "21578": [8, 1021], "uci": [8, 304, 365, 368, 485, 487, 489, 495], "ml": [8, 365, 368, 376, 485, 487, 495, 962, 964, 986, 987, 990], "uncompress": [8, 493, 494, 1001], "reuterspars": 8, "util": [8, 10, 11, 48, 55, 56, 61, 89, 129, 197, 199, 205, 213, 220, 229, 234, 245, 263, 265, 277, 301, 309, 320, 329, 342, 358, 360, 365, 366, 369, 371, 372, 373, 374, 382, 383, 384, 392, 396, 397, 400, 401, 404, 438, 453, 556, 557, 558, 562, 655, 684, 781, 803, 809, 810, 850, 955, 961, 964, 966, 967, 976, 977, 986, 990, 993, 1003, 1008, 1009, 1011, 1012, 1014, 1015], "pars": [8, 17, 357, 365, 366, 372, 493], "sgml": [8, 357], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 50, 68, 76, 83, 87, 93, 107, 133, 139, 147, 159, 163, 171, 174, 216, 224, 240, 249, 273, 276, 291, 297, 307, 315, 323, 340, 342, 343, 345, 352, 357, 359, 365, 366, 368, 369, 371, 375, 376, 377, 379, 382, 390, 397, 401, 472, 478, 479, 481, 488, 493, 494, 519, 564, 565, 573, 574, 576, 895, 969, 982, 986, 989, 993, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1023], "yield": [8, 9, 25, 45, 55, 78, 79, 80, 81, 120, 122, 181, 192, 197, 212, 215, 262, 275, 293, 299, 326, 331, 342, 343, 353, 357, 359, 365, 376, 384, 393, 396, 398, 400, 401, 403, 404, 405, 406, 422, 434, 453, 457, 493, 494, 522, 523, 524, 526, 531, 538, 539, 544, 545, 546, 547, 552, 553, 579, 587, 632, 636, 637, 638, 640, 646, 648, 650, 658, 660, 671, 684, 710, 765, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 810, 814, 817, 875, 876, 914, 921, 923, 924, 958, 960, 962, 963, 966, 981, 982, 996, 1013, 1014, 1016, 1019, 1021], "__init__": [8, 16, 56, 157, 277, 329, 371, 373, 375, 376, 377, 378, 384, 404, 410, 927, 1009, 1014, 1016, 1021, 1022, 1023, 1024], "self": [8, 16, 19, 25, 27, 56, 157, 164, 277, 316, 322, 323, 329, 342, 365, 371, 372, 373, 376, 377, 378, 379, 396, 404, 406, 410, 413, 417, 418, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 485, 493, 494, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 688, 779, 780, 781, 784, 785, 795, 800, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 927, 932, 940, 969, 987, 988, 990, 1003, 1010, 1015, 1022], "latin": [8, 404], "_reset": 8, "handle_starttag": 8, "tag": [8, 49, 71, 226, 319, 365, 370, 374, 375, 379, 382, 384, 404, 481, 811, 987, 989, 1013, 1017, 1018, 1019, 1022, 1023, 1024], "attr": [8, 56], "start_": 8, "getattr": [8, 299, 373, 384, 1024], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 70, 146, 236, 314, 368], "topic_d": 8, "fd": 8, "chunk": [8, 50, 357, 358, 396, 401, 407, 429, 434, 453, 523, 762, 765, 811, 812, 818, 819, 820, 821, 822, 881, 968, 1015, 1016, 1017, 1018, 1019], "feed": [8, 86, 198, 344, 366, 376, 382, 396, 404, 856, 967], "decod": [8, 290, 366, 384, 488, 554, 573, 574, 576, 1008, 1009], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 60, 66, 78, 79, 82, 100, 113, 119, 122, 125, 129, 149, 150, 153, 154, 155, 156, 157, 158, 167, 169, 181, 203, 219, 226, 232, 235, 242, 248, 257, 258, 283, 284, 299, 309, 329, 334, 343, 353, 366, 371, 373, 379, 382, 384, 385, 394, 395, 396, 399, 400, 403, 406, 435, 440, 457, 493, 494, 517, 548, 613, 628, 632, 646, 657, 659, 672, 690, 730, 779, 799, 800, 818, 819, 820, 822, 829, 904, 955, 959, 960, 962, 963, 965, 966, 967, 969, 972, 973, 976, 981, 990, 999, 1011, 1015, 1016, 1017], "handle_data": 8, "start_reut": 8, "attribut": [8, 25, 32, 49, 71, 104, 116, 117, 120, 142, 146, 197, 205, 235, 247, 255, 256, 261, 269, 286, 290, 312, 344, 351, 359, 360, 364, 365, 366, 368, 371, 374, 378, 382, 392, 393, 394, 396, 397, 398, 399, 401, 403, 404, 405, 406, 411, 412, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 495, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 682, 683, 685, 686, 687, 720, 777, 779, 780, 781, 784, 785, 787, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 898, 927, 950, 960, 962, 967, 969, 970, 972, 976, 979, 980, 981, 982, 990, 992, 998, 1001, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "end_reut": 8, "sub": [8, 37, 48, 53, 55, 57, 60, 70, 105, 234, 242, 311, 317, 318, 326, 329, 338, 366, 371, 373, 377, 397, 403, 404, 521, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 656, 962, 966, 980, 1001, 1018, 1022], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 72, 82, 95, 98, 110, 113, 118, 120, 121, 123, 124, 146, 158, 161, 164, 176, 177, 205, 212, 244, 245, 250, 252, 268, 273, 293, 295, 296, 301, 311, 318, 320, 321, 329, 371, 373, 377, 379, 380, 383, 384, 391, 396, 399, 401, 403, 405, 408, 422, 425, 426, 428, 430, 432, 433, 434, 437, 439, 444, 446, 447, 448, 456, 457, 463, 467, 468, 469, 500, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 544, 545, 546, 547, 549, 552, 553, 566, 567, 573, 574, 576, 578, 579, 587, 595, 612, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 814, 817, 832, 839, 840, 841, 842, 843, 847, 854, 856, 858, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 898, 919, 920, 926, 932, 956, 962, 963, 965, 966, 969, 970, 971, 979, 980, 981, 982, 987, 990, 996, 1000, 1001, 1003, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "archiv": [8, 365, 366, 368, 369, 390, 396, 427, 487, 495, 742, 743, 964, 981, 1001], "exist": [8, 9, 17, 19, 53, 215, 257, 295, 299, 365, 370, 373, 374, 377, 382, 384, 385, 387, 390, 396, 400, 401, 403, 404, 406, 411, 419, 422, 436, 438, 453, 484, 534, 540, 541, 542, 543, 549, 550, 570, 574, 582, 588, 617, 618, 630, 661, 662, 663, 665, 683, 685, 687, 746, 749, 753, 782, 783, 786, 788, 789, 790, 791, 794, 796, 797, 798, 799, 800, 801, 802, 828, 843, 848, 856, 857, 950, 958, 963, 965, 966, 970, 972, 973, 976, 986, 990, 1000, 1008, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "str": [8, 10, 16, 58, 60, 104, 106, 118, 215, 235, 257, 269, 277, 287, 327, 342, 365, 366, 380, 404, 407, 408, 412, 416, 423, 424, 426, 427, 428, 429, 430, 431, 432, 434, 435, 437, 442, 449, 450, 451, 452, 453, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 536, 546, 547, 551, 552, 553, 554, 555, 561, 566, 567, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 602, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 644, 651, 652, 656, 658, 660, 661, 663, 673, 674, 677, 681, 682, 683, 684, 685, 687, 692, 694, 696, 698, 711, 713, 714, 716, 717, 722, 755, 758, 762, 763, 764, 765, 766, 767, 768, 771, 773, 774, 775, 781, 784, 785, 787, 792, 793, 795, 804, 805, 806, 807, 808, 810, 815, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 881, 895, 896, 897, 899, 902, 903, 904, 907, 910, 912, 916, 929, 950, 951, 954, 1023], "kei": [8, 9, 10, 17, 19, 42, 119, 129, 161, 166, 215, 238, 258, 260, 261, 310, 311, 312, 313, 314, 359, 364, 373, 376, 377, 378, 382, 384, 385, 387, 396, 397, 400, 406, 449, 457, 546, 547, 552, 553, 554, 555, 573, 576, 579, 602, 611, 617, 618, 619, 644, 781, 784, 785, 793, 795, 806, 842, 843, 898, 908, 931, 987, 1001, 1005, 1014, 1020, 1021, 1023, 1024], "download_url": 8, "ic": [8, 311, 365, 368, 386, 487, 495, 617, 618, 1003, 1020, 1021], "databas": [8, 304, 357, 359, 366, 368, 396, 401, 403, 404, 407, 427, 429, 495, 540, 541, 876, 978], "reuters21578": 8, "mld": 8, "tar": [8, 375], "gz": [8, 375, 387, 493, 494], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 16, 19, 41, 44, 49, 55, 56, 62, 82, 99, 113, 118, 122, 157, 167, 168, 186, 199, 215, 219, 226, 230, 232, 233, 234, 257, 258, 261, 268, 277, 282, 290, 293, 294, 301, 342, 343, 351, 371, 375, 377, 403, 404, 406, 408, 422, 434, 493, 505, 518, 554, 610, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 655, 657, 658, 659, 661, 664, 666, 667, 668, 669, 688, 694, 752, 772, 776, 778, 784, 785, 809, 847, 856, 859, 870, 883, 884, 898, 928, 930, 932, 953, 982], "mkdir": [8, 377, 379], "parent": [8, 166, 371, 375, 384, 396, 427, 448, 1008], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 133, 139, 147, 159, 163, 171, 174, 216, 224, 230, 240, 249, 273, 276, 291, 297, 307, 315, 323, 340, 342, 344, 345, 352, 366, 377, 885, 886, 887, 888, 889, 981, 1004], "1e6": [8, 10, 190, 230, 342, 344, 357, 521, 877, 966, 978], "current_sz_mb": 8, "stdout": [8, 95, 205, 812, 832, 840, 841], "write": [8, 17, 162, 342, 357, 358, 365, 369, 370, 374, 375, 376, 377, 379, 380, 382, 384, 387, 397, 401, 404, 977, 987, 1001, 1009, 1021], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 321, 366, 377, 390, 473, 485, 488, 489, 492, 573, 574, 576, 1001, 1008, 1013, 1016, 1017], "reporthook": 8, "tamper": 8, "assert": [8, 17, 48, 96, 230, 257, 266, 358, 374, 987], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 220, 365, 366, 370, 371, 375, 377, 382, 383, 385, 387, 390, 397, 404, 472, 481, 493, 494, 956, 990, 995, 1011, 1015, 1016, 1018], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 404, 488, 573, 574, 576, 1010], "alternate_sign": [8, 404, 567, 574, 1015], "data_stream": 8, "binari": [8, 13, 25, 27, 109, 114, 125, 127, 143, 157, 167, 173, 188, 190, 197, 205, 219, 227, 238, 254, 255, 260, 266, 272, 275, 281, 329, 335, 351, 353, 365, 366, 367, 373, 375, 376, 384, 387, 390, 393, 394, 395, 396, 403, 404, 406, 422, 423, 424, 437, 472, 485, 493, 494, 505, 508, 534, 535, 538, 540, 544, 546, 547, 551, 552, 553, 566, 573, 574, 576, 578, 579, 587, 595, 612, 613, 614, 615, 617, 618, 643, 644, 651, 653, 658, 659, 660, 661, 685, 688, 692, 693, 694, 697, 698, 700, 703, 705, 711, 713, 714, 718, 719, 722, 723, 724, 725, 726, 727, 766, 767, 768, 771, 772, 773, 776, 778, 781, 782, 784, 785, 786, 787, 795, 799, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 818, 829, 839, 850, 854, 856, 864, 867, 883, 885, 888, 929, 956, 967, 968, 969, 970, 971, 973, 974, 976, 977, 978, 980, 981, 982, 989, 992, 1005, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1022, 1023], "acq": 8, "chosen": [8, 46, 73, 129, 150, 167, 168, 186, 198, 201, 214, 233, 251, 252, 254, 260, 343, 353, 357, 382, 396, 398, 399, 403, 406, 425, 431, 434, 436, 438, 439, 445, 481, 508, 520, 542, 543, 544, 545, 549, 550, 632, 638, 641, 643, 644, 646, 648, 656, 661, 662, 663, 664, 665, 675, 679, 776, 779, 780, 781, 784, 785, 795, 813, 832, 883, 884, 891, 892, 893, 894, 920, 955, 958, 960, 962, 963, 965, 967, 972, 973, 980, 996, 997, 999, 1000, 1016, 1024], "evenli": [8, 39, 52, 122, 252, 404, 924, 1001], "care": [8, 55, 123, 357, 359, 375, 377, 382, 384, 385, 396, 398, 404, 422, 445, 454, 625, 643, 644, 651, 653, 661, 662, 663, 680, 883, 963, 981, 990, 1024], "all_class": 8, "positive_class": [8, 697], "partial_fit_classifi": 8, "max_it": [8, 14, 17, 25, 30, 31, 72, 73, 95, 98, 115, 131, 135, 137, 158, 161, 162, 167, 168, 176, 183, 189, 190, 204, 205, 206, 209, 210, 212, 218, 219, 220, 221, 236, 237, 242, 243, 244, 245, 248, 270, 287, 293, 294, 295, 305, 311, 312, 313, 317, 318, 326, 342, 343, 377, 384, 403, 408, 425, 428, 432, 433, 434, 439, 444, 446, 456, 457, 463, 467, 468, 469, 516, 517, 518, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 546, 547, 612, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 657, 659, 661, 662, 663, 664, 665, 667, 668, 672, 673, 674, 675, 678, 679, 779, 780, 795, 832, 840, 841, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 956, 958, 962, 969, 970, 979, 980, 997, 1001, 1009, 1012, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024], "nb": [8, 103, 127, 353, 820, 968], "multinomi": [8, 30, 164, 175, 212, 216, 233, 252, 266, 366, 367, 371, 401, 403, 481, 497, 508, 536, 538, 544, 546, 554, 616, 643, 644, 725, 809, 817, 818, 819, 820, 821, 822, 863, 906, 966, 967, 982, 988, 1001, 1003, 1008, 1012, 1014, 1015, 1016, 1021, 1022], "passiv": [8, 204, 651, 652, 988, 1003, 1009], "aggress": [8, 204, 651, 652, 784, 785, 988, 1003, 1009], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 396, 401, 434, 519, 661, 839, 840, 841, 986, 1008], "tupl": [8, 48, 49, 55, 105, 168, 215, 364, 365, 366, 373, 384, 400, 408, 419, 436, 438, 449, 452, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 489, 490, 493, 495, 496, 497, 498, 499, 507, 518, 531, 546, 547, 552, 553, 554, 555, 567, 568, 569, 572, 573, 574, 576, 612, 617, 618, 619, 697, 704, 765, 767, 779, 781, 795, 806, 823, 824, 842, 843, 853, 854, 858, 861, 869, 873, 885, 886, 887, 888, 889, 898, 904, 905, 907, 911, 912, 913, 914, 933, 950, 973, 1014, 1015, 1019, 1020, 1021], "x_text": 8, "befor": [8, 12, 25, 42, 70, 72, 75, 86, 129, 142, 156, 158, 160, 163, 164, 167, 168, 170, 178, 181, 185, 186, 190, 257, 264, 279, 300, 303, 304, 306, 312, 332, 353, 357, 358, 366, 369, 371, 373, 374, 376, 377, 379, 380, 382, 384, 385, 386, 390, 394, 396, 397, 398, 400, 401, 405, 408, 409, 428, 432, 433, 434, 444, 446, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 475, 486, 519, 522, 523, 524, 525, 526, 529, 531, 532, 546, 547, 550, 552, 554, 555, 562, 573, 574, 576, 596, 612, 613, 615, 630, 635, 636, 639, 640, 641, 649, 650, 651, 652, 653, 656, 661, 663, 672, 677, 679, 779, 780, 786, 787, 799, 800, 802, 805, 807, 809, 823, 824, 831, 832, 833, 834, 835, 838, 843, 844, 847, 850, 857, 861, 862, 863, 864, 868, 869, 871, 872, 873, 874, 880, 891, 892, 920, 950, 956, 962, 963, 966, 972, 976, 980, 981, 982, 987, 1001, 1008, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "exclud": [8, 19, 166, 299, 371, 375, 384, 431, 449, 451, 713, 714, 722, 767, 768, 771, 794, 802, 858, 941, 966, 969, 1017, 1024], "invalid": [8, 197, 384, 431, 563, 656, 697, 758, 962, 966, 1014, 1016, 1018, 1019, 1021, 1022, 1024], "assign": [8, 17, 37, 46, 49, 57, 58, 60, 115, 125, 127, 142, 151, 210, 215, 226, 231, 233, 293, 301, 306, 322, 337, 343, 366, 371, 373, 384, 393, 400, 401, 403, 404, 405, 406, 425, 426, 427, 428, 430, 431, 432, 433, 434, 437, 439, 441, 444, 445, 446, 447, 500, 521, 546, 547, 578, 579, 592, 593, 595, 643, 644, 651, 652, 653, 661, 662, 663, 689, 690, 700, 701, 702, 705, 715, 723, 727, 739, 741, 770, 775, 776, 777, 781, 784, 785, 787, 790, 795, 804, 805, 806, 807, 810, 827, 833, 835, 836, 837, 850, 878, 879, 883, 884, 885, 886, 887, 888, 889, 960, 965, 966, 967, 968, 969, 970, 971, 976, 979, 990, 992, 1001, 1008, 1013, 1015, 1016], "format": [8, 11, 12, 19, 20, 21, 48, 54, 58, 61, 70, 80, 95, 105, 113, 118, 121, 123, 135, 141, 142, 170, 173, 177, 183, 188, 197, 215, 252, 262, 264, 265, 268, 271, 281, 282, 285, 286, 303, 309, 336, 347, 351, 357, 364, 370, 371, 373, 374, 379, 380, 383, 384, 397, 400, 403, 404, 418, 427, 428, 430, 432, 434, 435, 437, 444, 449, 453, 467, 468, 469, 470, 472, 474, 481, 482, 483, 493, 494, 495, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 536, 542, 543, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 569, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 631, 637, 643, 644, 645, 647, 651, 653, 661, 662, 663, 673, 674, 677, 682, 698, 705, 723, 724, 735, 752, 774, 812, 825, 826, 827, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 870, 875, 876, 881, 883, 895, 903, 904, 925, 928, 932, 937, 940, 942, 943, 944, 945, 946, 947, 956, 966, 969, 974, 976, 977, 980, 982, 986, 992, 993, 1003, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1023], "islic": [8, 44, 62], "asarrai": [8, 17, 197, 215, 296, 319, 342, 343, 373, 384, 392, 570, 571, 710, 740, 831, 833, 834, 835, 976, 981], "int": [8, 10, 13, 16, 17, 19, 37, 44, 62, 81, 113, 121, 125, 137, 138, 150, 151, 152, 158, 162, 166, 178, 188, 190, 197, 215, 223, 226, 232, 235, 242, 252, 255, 256, 257, 277, 282, 284, 290, 306, 318, 344, 366, 371, 373, 382, 384, 394, 397, 400, 404, 407, 408, 411, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 473, 476, 477, 479, 480, 481, 482, 487, 488, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 592, 593, 595, 596, 602, 612, 613, 614, 615, 616, 617, 618, 619, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 685, 686, 687, 688, 689, 690, 692, 694, 698, 710, 711, 713, 714, 715, 718, 722, 740, 741, 753, 758, 762, 763, 764, 765, 766, 767, 768, 771, 773, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 899, 903, 904, 906, 907, 919, 920, 922, 923, 924, 925, 931, 935, 937, 940, 945, 946, 962, 973, 1008, 1014, 1018, 1019], "iter_minibatch": 8, "minibatch_s": [8, 359], "statist": [8, 81, 109, 113, 114, 124, 135, 136, 137, 138, 141, 145, 146, 164, 166, 167, 168, 169, 181, 185, 250, 254, 256, 259, 266, 273, 299, 305, 311, 353, 360, 364, 366, 368, 371, 377, 384, 394, 396, 397, 398, 400, 401, 403, 405, 419, 454, 459, 478, 479, 501, 502, 503, 505, 507, 526, 531, 544, 545, 547, 589, 590, 591, 594, 612, 615, 619, 620, 629, 634, 641, 675, 679, 681, 695, 701, 706, 707, 708, 715, 727, 772, 781, 797, 813, 840, 841, 859, 860, 861, 863, 868, 871, 872, 874, 888, 891, 892, 941, 955, 956, 960, 962, 963, 965, 966, 967, 968, 973, 976, 980, 981, 982, 983, 984, 985, 993, 999, 1000, 1013, 1016, 1019, 1020, 1022, 1023], "test_stat": 8, "n_test": [8, 10, 33, 113, 257, 1008, 1011], "n_test_po": 8, "hold": [8, 16, 26, 27, 197, 258, 351, 364, 371, 372, 373, 394, 396, 400, 403, 404, 406, 488, 546, 547, 574, 617, 618, 619, 720, 781, 784, 785, 795, 819, 850, 851, 856, 857, 864, 867, 956, 960, 966, 970, 980, 981, 982, 989, 992, 1001, 1016, 1020], "n_test_docu": 8, "tick": [8, 43, 60, 152, 236, 268, 617, 807], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 61, 81, 92, 98, 105, 121, 122, 142, 146, 157, 167, 178, 184, 193, 197, 212, 215, 219, 221, 266, 277, 284, 287, 313, 321, 334, 337, 342, 343, 344, 351, 368, 377, 384, 393, 394, 395, 396, 398, 399, 401, 402, 403, 404, 406, 417, 427, 428, 432, 434, 444, 449, 450, 467, 468, 469, 500, 505, 508, 516, 519, 521, 522, 526, 529, 530, 531, 534, 535, 537, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 575, 576, 596, 598, 608, 610, 620, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 657, 658, 661, 662, 663, 664, 666, 669, 675, 679, 681, 684, 694, 695, 704, 710, 725, 740, 742, 743, 747, 772, 811, 812, 816, 817, 826, 830, 834, 841, 842, 862, 863, 883, 884, 886, 889, 891, 892, 893, 894, 922, 941, 947, 952, 962, 966, 967, 968, 969, 981, 982, 999, 1011, 1012, 1014, 1016, 1017, 1019], "cls_name": [8, 10], "string": [8, 27, 71, 118, 157, 215, 228, 261, 312, 344, 357, 365, 366, 371, 372, 373, 377, 384, 390, 397, 400, 403, 404, 405, 407, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 472, 474, 475, 481, 490, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 566, 567, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 602, 605, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 684, 694, 696, 704, 716, 746, 749, 755, 758, 762, 763, 764, 765, 774, 775, 779, 780, 781, 784, 785, 787, 795, 806, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 901, 903, 904, 911, 912, 913, 930, 934, 950, 951, 955, 956, 966, 979, 981, 992, 999, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "n_train": [8, 10, 33, 113, 257, 1008, 1011], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 55, 178, 260, 357, 393, 398, 405, 493, 494, 534, 582, 612, 615, 629, 856, 860, 872, 956, 962, 1016, 1020], "mini": [8, 64, 95, 313, 359, 384, 404, 425, 427, 432, 434, 436, 438, 516, 518, 521, 522, 523, 524, 525, 527, 528, 530, 531, 970, 971, 1008, 1019, 1021], "smaller": [8, 24, 40, 46, 55, 82, 154, 155, 158, 161, 182, 186, 188, 201, 230, 283, 284, 293, 299, 329, 337, 343, 371, 393, 395, 396, 398, 400, 401, 403, 405, 406, 424, 425, 431, 435, 439, 441, 499, 519, 520, 542, 543, 544, 545, 549, 550, 578, 595, 604, 618, 631, 632, 634, 635, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 657, 659, 667, 668, 677, 694, 779, 784, 785, 829, 832, 856, 857, 875, 876, 883, 891, 892, 893, 894, 920, 960, 962, 963, 965, 966, 967, 969, 970, 972, 976, 978, 980, 981, 982, 987, 1001, 1016, 1021], "bigger": [8, 40, 60, 210, 257, 296, 339, 343, 356, 358, 404, 423, 424, 493, 523, 829, 996, 1003], "overhead": [8, 277, 358, 359, 371, 377, 380, 382, 384, 403, 426, 430, 434, 519, 684, 815, 816, 818, 819, 820, 821, 822, 823, 824, 934, 968, 969, 1011, 1016, 1017, 1020], "partial": [8, 12, 50, 84, 87, 126, 164, 165, 171, 215, 225, 240, 311, 314, 368, 384, 386, 398, 399, 401, 403, 406, 449, 467, 468, 469, 470, 481, 486, 519, 521, 526, 547, 574, 617, 618, 642, 772, 809, 811, 812, 839, 840, 841, 844, 856, 857, 860, 863, 892, 963, 970, 980, 1001, 1003, 1005, 1009, 1016, 1017, 1021], "stream": [8, 396, 401, 404, 447, 574, 852, 853, 863, 958, 986, 1016, 1019], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 55, 75, 114, 119, 122, 129, 167, 195, 199, 205, 219, 232, 234, 244, 254, 260, 313, 318, 343, 364, 371, 372, 373, 380, 397, 449, 511, 546, 547, 573, 574, 576, 617, 793, 856, 878, 879, 898, 899, 925, 958, 979, 987, 992], "updat": [8, 16, 44, 62, 110, 124, 231, 309, 344, 369, 370, 371, 375, 379, 384, 396, 401, 403, 410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 448, 450, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 779, 780, 781, 784, 785, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 898, 941, 962, 969, 970, 971, 980, 989, 990, 1009, 1015, 1016, 1017, 1019, 1021, 1023, 1024], "accumul": [8, 50, 116, 117, 186, 375, 377, 396, 404, 966, 1009, 1016], "acc_histori": 8, "run_histori": 8, "circleci": [8, 27, 34, 50, 53, 112, 129, 153, 155, 157, 158, 176, 189, 206, 243, 302, 306, 309, 334, 348, 371], "scikit_learn_data": [8, 50, 366, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "878": 8, "962": 8, "915": 8, "67": [8, 66, 167, 215, 296, 342, 368, 501, 502, 503, 612, 652, 698, 795, 956, 966, 980, 1004, 1008], "1439": 8, "855": 8, "1431": 8, "877": [8, 255], "1391": 8, "933": [8, 74, 400], "1385": [8, 459], "3911": 8, "517": [8, 437, 447, 999], "938": [8, 193, 769, 966, 996], "2174": 8, "2170": 8, "885": [8, 239, 368], "2158": 8, "941": 8, "2155": 8, "6821": 8, "891": 8, "952": [8, 49, 119, 133], "98": [8, 32, 34, 42, 44, 54, 62, 64, 82, 98, 226, 255, 293, 296, 301, 318, 368, 375, 400, 403, 644, 818, 961, 968, 996, 1001], "2289": 8, "2287": [8, 366], "900": [8, 50, 74, 75], "2280": 8, "953": [8, 49], "2278": 8, "9759": 8, "1276": 8, "949": 8, "2393": 8, "2391": 8, "909": 8, "09": [8, 15, 97, 105, 107, 133, 163, 167, 216, 230, 233, 249, 270, 307, 396, 719, 821, 966, 976, 980], "2386": 8, "958": 8, "2385": 8, "11680": 8, "1499": 8, "944": [8, 996], "04": [8, 30, 40, 42, 54, 67, 68, 97, 105, 147, 154, 159, 163, 167, 171, 178, 196, 215, 233, 240, 242, 248, 257, 258, 270, 276, 290, 291, 297, 336, 368, 403, 405, 456, 457, 772, 781, 795, 962, 966, 970, 980], "2316": 8, "956": [8, 996], "2314": 8, "2311": 8, "950": 8, "06": [8, 28, 67, 68, 85, 147, 159, 167, 188, 196, 197, 220, 224, 249, 257, 258, 273, 296, 301, 315, 336, 340, 377, 467, 468, 469, 629, 630, 674, 678, 779, 780, 781, 795, 892, 962, 976, 978], "2309": 8, "14625": 8, "1865": 8, "965": [8, 966], "2372": 8, "903": 8, "17": [8, 19, 39, 52, 74, 80, 98, 150, 167, 196, 219, 223, 224, 230, 260, 293, 303, 342, 366, 369, 376, 387, 388, 389, 396, 400, 406, 429, 446, 472, 482, 508, 516, 521, 525, 532, 534, 535, 540, 544, 545, 554, 555, 582, 613, 634, 642, 643, 644, 651, 654, 657, 659, 672, 677, 713, 714, 724, 745, 750, 768, 771, 773, 799, 821, 832, 847, 852, 853, 861, 863, 869, 885, 888, 891, 892, 893, 894, 955, 956, 967, 969, 976, 984, 1004, 1006, 1008, 1009, 1010, 1011, 1014, 1017, 1022], "2371": 8, "924": [8, 73], "2368": 8, "957": [8, 406, 712, 966], "2367": 8, "17360": [8, 1019], "2179": 8, "2414": 8, "932": [8, 258], "2411": 8, "2410": [8, 529], "curv": [8, 11, 23, 28, 37, 75, 78, 113, 115, 121, 164, 175, 176, 187, 197, 215, 216, 218, 220, 223, 225, 227, 235, 236, 240, 241, 249, 250, 257, 267, 273, 294, 309, 349, 378, 391, 395, 400, 402, 422, 423, 424, 487, 495, 500, 506, 510, 549, 617, 630, 643, 683, 685, 687, 691, 692, 693, 694, 711, 713, 725, 726, 766, 768, 771, 772, 773, 779, 780, 787, 798, 807, 809, 810, 821, 844, 863, 883, 888, 962, 963, 965, 966, 972, 982, 988, 990, 1003, 1005, 1010, 1011, 1014, 1018, 1020, 1021, 1022, 1023, 1024], "evolut": [8, 10, 269, 357, 359, 531], "cours": [8, 9, 173, 357, 371, 373, 401, 404, 405, 956, 961, 962, 990], "valid": [8, 13, 26, 54, 55, 56, 71, 74, 78, 82, 103, 114, 118, 119, 120, 121, 122, 134, 139, 140, 144, 146, 147, 157, 164, 167, 169, 175, 181, 185, 197, 199, 205, 215, 216, 234, 244, 247, 250, 254, 257, 258, 259, 261, 263, 265, 266, 271, 273, 281, 296, 298, 300, 305, 307, 309, 311, 320, 329, 337, 347, 358, 366, 371, 374, 382, 383, 384, 390, 391, 394, 396, 397, 398, 401, 402, 403, 404, 405, 406, 412, 422, 427, 428, 430, 431, 432, 434, 435, 442, 448, 449, 453, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 478, 486, 487, 489, 500, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 557, 560, 562, 567, 568, 574, 578, 579, 582, 587, 617, 619, 623, 624, 625, 626, 627, 628, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 677, 684, 686, 687, 691, 698, 712, 746, 749, 758, 762, 763, 764, 769, 774, 775, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 817, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 855, 863, 864, 875, 876, 878, 879, 881, 883, 885, 888, 890, 891, 892, 893, 894, 903, 904, 907, 914, 926, 956, 965, 966, 967, 970, 974, 976, 978, 980, 981, 982, 986, 987, 990, 992, 995, 1003, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "consumpt": [8, 357, 519, 542, 543, 549, 550, 781, 795, 804, 805, 806, 891, 892, 893, 894, 932, 992, 1008, 1010, 1014, 1016, 1017, 1022], "queue": [8, 969, 1011], "up": [8, 11, 37, 44, 46, 47, 48, 52, 55, 57, 62, 70, 80, 81, 89, 92, 115, 162, 168, 176, 181, 190, 198, 213, 214, 235, 244, 259, 262, 277, 290, 296, 300, 305, 313, 318, 326, 342, 344, 359, 365, 366, 371, 375, 377, 378, 379, 380, 382, 384, 385, 394, 396, 401, 403, 404, 428, 432, 433, 434, 435, 437, 441, 444, 445, 446, 493, 494, 521, 534, 535, 542, 543, 544, 545, 546, 547, 549, 550, 551, 595, 612, 617, 618, 624, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 649, 666, 667, 668, 669, 677, 690, 753, 779, 780, 783, 784, 785, 787, 807, 857, 858, 861, 873, 891, 892, 893, 894, 897, 920, 923, 924, 955, 962, 963, 966, 969, 976, 980, 981, 987, 989, 990, 1000, 1001, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "amount": [8, 12, 45, 53, 66, 78, 81, 95, 99, 111, 113, 155, 167, 181, 215, 231, 311, 317, 320, 322, 329, 337, 344, 357, 358, 359, 382, 395, 396, 398, 401, 403, 404, 405, 428, 439, 454, 523, 524, 526, 528, 548, 581, 631, 632, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 650, 666, 669, 677, 784, 785, 823, 824, 829, 864, 879, 880, 893, 894, 961, 962, 965, 968, 970, 976, 978, 979, 980, 981, 999, 1000, 1021], "learner": [8, 109, 111, 120, 129, 359, 542, 543, 544, 545, 549, 550, 551, 567, 574, 615, 825, 826, 831, 833, 834, 968, 971, 982, 986, 987, 1001], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 62, 86, 152, 201, 202, 206, 208, 226, 238, 261, 285, 287, 300, 325, 327, 330, 331, 973, 1005], "set_ylim": [8, 10, 16, 31, 42, 60, 72, 92, 109, 115, 126, 127, 158, 168, 170, 177, 195, 197, 198, 231, 242, 261, 264, 275, 282, 293, 299, 301, 302, 304, 310, 320, 338], "runtim": [8, 10, 58, 183, 212, 214, 231, 296, 301, 358, 373, 374, 382, 384, 395, 396, 403, 435, 548, 664, 795, 883, 884, 885, 886, 887, 888, 889, 980, 981, 1011, 1015, 1016, 1022, 1023], "gcf": [8, 973], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 72, 116, 119, 120, 123, 131, 142, 146, 157, 161, 168, 176, 242, 247, 256, 258, 262, 275, 304, 305, 313, 314, 343, 373, 399, 566, 617, 633, 654, 665, 966, 973, 980, 982, 1014, 1015, 1016, 1017], "width": [8, 10, 16, 45, 53, 80, 90, 97, 98, 104, 105, 106, 113, 118, 119, 122, 131, 142, 151, 157, 180, 239, 242, 256, 299, 301, 302, 305, 311, 314, 326, 368, 397, 423, 424, 437, 449, 478, 479, 491, 506, 571, 848, 896, 976, 980, 982, 998, 999, 1016], "set_xticklabel": [8, 10, 80, 106, 131, 152, 168, 170, 268, 269, 275], "ymax": [8, 10, 11, 78, 184, 186, 189, 190, 198, 206, 257, 290], "set_titl": [8, 10, 14, 25, 27, 31, 32, 42, 43, 45, 53, 55, 57, 60, 64, 65, 72, 75, 80, 90, 92, 100, 106, 115, 116, 125, 127, 129, 130, 158, 161, 162, 166, 167, 168, 169, 176, 177, 186, 188, 195, 197, 198, 199, 205, 218, 219, 222, 223, 229, 231, 232, 235, 236, 242, 251, 252, 253, 254, 257, 259, 260, 264, 268, 269, 275, 277, 281, 282, 287, 293, 294, 299, 300, 301, 302, 303, 304, 309, 313, 317, 318, 326, 337, 338, 339, 342, 347], "autolabel": [8, 120], "attach": [8, 120, 342, 419, 828, 1009, 1019], "rect": [8, 52, 120, 176], "height": [8, 14, 53, 98, 119, 146, 170, 299, 305, 342, 402, 431, 478, 479, 491, 571], "get_height": [8, 120], "get_x": [8, 120], "get_width": [8, 120], "va": [8, 120, 268, 285, 287, 336], "setp": [8, 10, 268, 271], "rotat": [8, 40, 94, 97, 100, 107, 121, 131, 164, 170, 221, 268, 269, 275, 329, 336, 399, 401, 406, 408, 489, 517, 526, 535, 599, 682, 863, 895, 962, 1019, 1020], "read": [8, 17, 95, 218, 264, 309, 310, 311, 313, 357, 365, 369, 372, 373, 374, 375, 376, 378, 379, 382, 383, 384, 396, 407, 408, 409, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 444, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 598, 599, 600, 601, 604, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 916, 955, 962, 966, 967, 986, 990, 1001, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "feat": [8, 10, 375, 404], "extr": 8, "hash": [8, 108, 133, 164, 343, 344, 357, 359, 363, 371, 374, 382, 403, 499, 529, 542, 551, 566, 567, 574, 625, 818, 931, 958, 1001, 1003, 1009, 1012, 1015], "vect": [8, 70, 258, 321, 404, 1001], "384": [8, 15, 131, 133, 681, 884], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 56, 57, 70, 71, 74, 75, 78, 80, 86, 92, 97, 101, 109, 110, 113, 117, 120, 124, 126, 128, 129, 141, 146, 148, 149, 150, 151, 154, 155, 156, 157, 159, 164, 166, 168, 169, 173, 186, 193, 194, 197, 199, 201, 205, 211, 214, 215, 218, 219, 221, 223, 226, 228, 229, 231, 232, 234, 257, 264, 269, 270, 278, 291, 304, 308, 309, 311, 320, 329, 330, 334, 335, 337, 338, 343, 344, 350, 353, 357, 368, 371, 376, 379, 383, 399, 401, 403, 404, 500, 595, 596, 598, 599, 600, 604, 607, 608, 832, 955, 962, 966, 969, 972, 978, 979, 980, 981, 990, 992], "robust": [9, 61, 63, 77, 83, 122, 162, 164, 167, 168, 175, 199, 214, 216, 226, 299, 359, 368, 373, 379, 396, 403, 404, 431, 433, 454, 455, 458, 459, 460, 461, 509, 519, 544, 545, 634, 642, 655, 656, 663, 664, 734, 813, 844, 858, 860, 861, 872, 878, 918, 966, 970, 972, 976, 979, 980, 986, 988, 990, 1002, 1003, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1024], "covari": [9, 12, 29, 33, 35, 79, 83, 85, 103, 106, 125, 149, 156, 158, 226, 241, 243, 246, 247, 248, 249, 360, 380, 384, 396, 399, 401, 406, 467, 468, 469, 470, 489, 500, 504, 512, 517, 519, 526, 531, 533, 534, 535, 548, 595, 596, 598, 607, 608, 629, 630, 635, 639, 641, 667, 668, 671, 674, 678, 779, 780, 781, 800, 965, 972, 976, 988, 1002, 1003, 1008, 1010, 1011, 1012, 1013, 1015, 1017], "wine": [9, 238, 304, 305, 364, 495, 1003], "tool": [9, 11, 167, 255, 260, 353, 364, 365, 366, 369, 371, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 390, 395, 396, 397, 398, 472, 677, 686, 955, 961, 962, 966, 972, 976, 981, 983, 986, 987, 990, 992, 1001, 1015, 1018, 1021, 1022, 1023], "purpos": [9, 12, 16, 37, 86, 161, 211, 212, 213, 218, 220, 233, 245, 247, 253, 254, 329, 330, 342, 343, 353, 366, 371, 373, 383, 384, 385, 387, 389, 393, 396, 397, 401, 403, 404, 405, 406, 531, 623, 805, 806, 843, 963, 966, 967, 969, 972, 984, 986, 992, 1020, 1022], "awar": [9, 14, 109, 143, 158, 326, 342, 369, 373, 382, 385, 400, 404, 552, 553, 633, 639, 640, 641, 643, 644, 654, 665, 829, 858, 972, 976, 982, 1005, 1008, 1009, 1022], "thing": [9, 219, 252, 342, 358, 359, 366, 370, 371, 373, 382, 396, 398, 404, 544, 545, 962, 976, 990, 1014], "trivial": [9, 199, 347, 371, 396, 799, 885, 888, 963, 987, 1008], "dimens": [9, 12, 14, 37, 40, 53, 82, 85, 90, 95, 151, 153, 155, 157, 158, 168, 180, 181, 195, 201, 220, 222, 226, 230, 231, 236, 243, 244, 281, 282, 286, 302, 342, 343, 344, 366, 368, 372, 384, 395, 396, 401, 402, 406, 408, 427, 428, 430, 432, 433, 434, 437, 449, 450, 467, 468, 469, 478, 479, 500, 509, 510, 514, 515, 518, 526, 534, 567, 568, 569, 570, 572, 574, 582, 596, 604, 607, 626, 629, 644, 675, 676, 677, 679, 680, 684, 748, 804, 823, 824, 828, 842, 875, 876, 877, 885, 886, 887, 888, 889, 903, 904, 905, 929, 937, 940, 956, 958, 960, 962, 963, 964, 967, 969, 970, 972, 978, 981, 992, 999, 1000, 1015, 1017, 1018, 1020], "below": [9, 25, 26, 27, 32, 55, 60, 70, 75, 80, 89, 90, 95, 114, 116, 117, 122, 141, 166, 168, 180, 193, 194, 197, 199, 213, 214, 219, 223, 228, 237, 239, 252, 255, 260, 262, 263, 264, 299, 303, 309, 310, 311, 312, 313, 314, 333, 334, 342, 351, 353, 358, 364, 365, 369, 371, 373, 375, 376, 380, 384, 385, 387, 396, 398, 399, 400, 401, 403, 404, 405, 406, 431, 433, 456, 457, 463, 476, 477, 479, 480, 481, 482, 483, 485, 486, 487, 489, 490, 495, 516, 522, 527, 533, 567, 580, 581, 582, 583, 584, 585, 618, 631, 637, 643, 644, 652, 658, 660, 677, 684, 690, 727, 747, 779, 780, 781, 792, 795, 812, 843, 846, 856, 857, 860, 866, 872, 955, 956, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 980, 981, 982, 983, 986, 994, 1001, 1004, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "main": [9, 16, 32, 62, 86, 99, 119, 164, 226, 266, 308, 337, 342, 357, 358, 359, 364, 369, 371, 373, 375, 377, 379, 382, 383, 384, 386, 387, 394, 395, 396, 401, 403, 404, 406, 488, 510, 515, 534, 535, 610, 698, 813, 955, 963, 965, 966, 973, 978, 987, 989, 998, 1001, 1008, 1011, 1016, 1018, 1019, 1020, 1021, 1022, 1023], "empir": [9, 24, 25, 36, 68, 77, 80, 82, 83, 164, 215, 263, 299, 394, 400, 403, 406, 432, 434, 445, 454, 455, 456, 459, 462, 463, 517, 519, 524, 526, 528, 534, 536, 550, 575, 588, 624, 634, 652, 656, 663, 664, 701, 706, 707, 708, 808, 818, 819, 820, 822, 841, 864, 906, 940, 958, 960, 966, 968, 970, 976, 978, 980, 1002, 1003], "heterogen": [9, 24, 55, 69, 71, 76, 164, 168, 197, 239, 304, 309, 363, 365, 382, 449, 473, 529, 566, 576, 698, 843, 847, 883, 963, 973, 976, 986, 1003, 1012, 1016, 1018, 1019], "mode": [9, 10, 46, 47, 80, 197, 226, 277, 279, 296, 309, 371, 374, 379, 380, 382, 393, 399, 403, 407, 428, 429, 432, 434, 437, 444, 447, 456, 457, 463, 467, 472, 493, 494, 542, 546, 549, 577, 580, 581, 583, 584, 585, 595, 612, 629, 630, 643, 644, 651, 653, 658, 659, 660, 661, 664, 667, 668, 674, 678, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 839, 883, 885, 888, 891, 893, 909, 919, 920, 922, 969, 972, 986, 992, 993, 1000, 1009, 1017, 1022], "stick": [9, 779, 965], "bias": [9, 27, 82, 98, 122, 128, 166, 167, 169, 201, 262, 366, 386, 394, 403, 509, 534, 839, 863, 874, 961, 965, 974, 980, 982], "yet": [9, 57, 181, 215, 247, 258, 344, 359, 366, 370, 375, 382, 386, 387, 400, 401, 403, 404, 406, 433, 437, 446, 447, 562, 762, 950, 955, 962, 966, 972, 980, 987, 1017], "extent": [9, 30, 58, 151, 152, 153, 230, 335, 338, 425, 520, 681, 779, 966], "assum": [9, 55, 57, 156, 162, 166, 167, 186, 197, 215, 226, 229, 235, 248, 257, 266, 299, 344, 358, 370, 371, 373, 375, 377, 382, 383, 384, 386, 390, 393, 394, 396, 398, 400, 401, 403, 404, 406, 407, 412, 416, 422, 424, 429, 431, 435, 442, 448, 454, 455, 456, 457, 458, 459, 460, 461, 488, 493, 494, 517, 527, 533, 534, 546, 547, 552, 553, 572, 573, 574, 576, 605, 617, 628, 629, 631, 632, 637, 643, 644, 645, 646, 647, 651, 652, 653, 656, 657, 661, 662, 663, 666, 670, 672, 673, 677, 694, 710, 719, 725, 740, 748, 753, 758, 762, 765, 781, 784, 785, 795, 819, 825, 826, 829, 830, 831, 833, 834, 839, 850, 863, 942, 943, 944, 956, 960, 962, 964, 965, 966, 968, 969, 971, 972, 973, 976, 980, 981, 982, 1014, 1020], "parametr": [9, 24, 25, 82, 229, 281, 303, 312, 394, 397, 402, 403, 422, 536, 538, 620, 670, 681, 859, 871, 914, 915, 962, 965, 968, 969, 976, 979, 982, 1016, 1018, 1021], "therefor": [9, 13, 24, 37, 52, 53, 71, 72, 75, 80, 86, 100, 105, 110, 113, 115, 122, 127, 129, 145, 166, 169, 197, 213, 214, 242, 247, 248, 258, 260, 295, 299, 304, 317, 329, 338, 342, 343, 351, 357, 365, 369, 376, 382, 396, 397, 398, 400, 401, 403, 404, 422, 481, 520, 534, 536, 538, 539, 544, 545, 549, 550, 589, 591, 643, 644, 650, 653, 656, 661, 663, 664, 686, 697, 719, 741, 779, 843, 844, 856, 860, 864, 872, 883, 884, 956, 960, 962, 963, 966, 968, 969, 970, 971, 974, 976, 981, 982, 987, 992, 999, 1000, 1001, 1017, 1018, 1021, 1022, 1023, 1024], "minimum": [9, 55, 57, 80, 122, 123, 145, 186, 207, 230, 267, 283, 284, 373, 380, 387, 389, 393, 396, 403, 404, 426, 430, 431, 435, 439, 441, 454, 455, 458, 459, 460, 461, 496, 498, 526, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 579, 612, 616, 617, 620, 622, 653, 656, 661, 663, 664, 667, 668, 677, 690, 709, 763, 764, 784, 785, 804, 819, 840, 841, 852, 853, 856, 857, 858, 862, 876, 877, 890, 891, 892, 893, 894, 900, 903, 904, 907, 923, 963, 966, 970, 972, 976, 978, 982, 1008, 1011, 1015, 1016, 1020, 1021], "determin": [9, 11, 13, 19, 46, 55, 80, 112, 154, 167, 176, 177, 193, 200, 257, 299, 304, 344, 351, 353, 370, 371, 373, 380, 383, 384, 393, 394, 396, 400, 401, 403, 404, 405, 406, 417, 422, 426, 427, 428, 430, 432, 434, 435, 441, 444, 445, 446, 450, 454, 455, 457, 458, 459, 460, 461, 467, 468, 469, 473, 476, 477, 480, 482, 488, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 522, 524, 527, 528, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 550, 552, 553, 555, 567, 568, 569, 573, 576, 579, 587, 592, 593, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 612, 620, 621, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 653, 654, 655, 657, 658, 659, 660, 661, 663, 664, 665, 672, 674, 675, 677, 678, 679, 692, 696, 707, 713, 714, 722, 767, 768, 769, 771, 772, 775, 781, 783, 784, 785, 787, 795, 803, 804, 805, 806, 807, 808, 810, 814, 816, 817, 819, 826, 828, 829, 834, 839, 840, 841, 847, 848, 856, 857, 858, 860, 864, 872, 883, 884, 886, 889, 892, 894, 897, 918, 929, 935, 937, 940, 955, 958, 960, 965, 969, 971, 972, 976, 979, 980, 982, 992, 1008, 1013, 1016, 1017, 1019, 1020, 1021], "concentr": [9, 100, 110, 127, 154, 164, 223, 241, 248, 249, 301, 319, 367, 371, 403, 406, 428, 504, 779, 965, 972], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 57, 59, 61, 62, 68, 80, 91, 102, 112, 118, 125, 170, 223, 242, 243, 244, 245, 258, 283, 284, 286, 302, 310, 314, 331, 341, 342, 344, 345, 359, 360, 364, 366, 368, 371, 373, 376, 382, 384, 391, 402, 404, 410, 411, 414, 473, 487, 488, 489, 496, 497, 498, 499, 500, 507, 515, 526, 529, 549, 551, 574, 575, 576, 616, 676, 677, 680, 689, 690, 695, 702, 704, 709, 715, 720, 721, 739, 741, 762, 763, 770, 774, 775, 777, 779, 780, 835, 836, 844, 848, 855, 863, 912, 914, 927, 934, 950, 956, 963, 965, 969, 972, 974, 976, 979, 983, 986, 987, 990, 992, 995, 998, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "outli": [9, 80, 384, 454, 459, 962, 972], "skew": [9, 122, 200, 230, 299, 363, 400, 624, 625, 626, 627, 859, 871, 962, 976, 1003, 1011, 1015, 1024], "Of": [9, 25, 27, 161, 357, 373, 396, 404, 956], "screen": [9, 1021], "presenc": [9, 60, 62, 80, 81, 166, 181, 299, 369, 372, 384, 398, 401, 697, 710, 740, 753, 812, 846, 854, 856, 950, 956, 962, 966, 967, 980, 1011, 1012, 1014, 1018, 1020, 1022], "mixtur": [9, 44, 55, 57, 244, 245, 249, 360, 366, 367, 384, 396, 401, 402, 406, 608, 781, 986, 987, 1002, 1003, 1008, 1012, 1013, 1014, 1015], "univari": [9, 36, 68, 72, 74, 140, 141, 147, 164, 212, 324, 340, 363, 395, 396, 397, 404, 430, 489, 510, 515, 577, 580, 581, 583, 584, 585, 587, 590, 591, 592, 593, 594, 612, 613, 614, 615, 630, 781, 786, 805, 809, 843, 844, 853, 858, 862, 863, 883, 888, 962, 981, 983, 988, 1000, 1003, 1008, 1014], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 56, 58, 62, 71, 73, 75, 86, 95, 96, 102, 104, 106, 115, 122, 142, 149, 167, 169, 181, 186, 202, 211, 218, 219, 220, 226, 231, 257, 258, 260, 269, 275, 286, 299, 303, 304, 310, 329, 344, 351, 353, 357, 363, 371, 373, 379, 382, 383, 384, 393, 394, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 408, 425, 431, 437, 447, 449, 450, 452, 454, 459, 467, 468, 469, 470, 493, 494, 501, 502, 503, 509, 516, 517, 518, 519, 520, 522, 524, 526, 527, 528, 533, 534, 535, 538, 539, 542, 543, 544, 545, 549, 550, 551, 573, 574, 575, 576, 612, 617, 618, 623, 624, 626, 627, 643, 644, 653, 661, 662, 663, 676, 686, 692, 710, 740, 742, 743, 765, 772, 774, 775, 781, 795, 809, 812, 818, 819, 820, 821, 822, 832, 842, 843, 852, 859, 860, 863, 868, 869, 871, 872, 873, 874, 879, 890, 891, 892, 893, 894, 903, 909, 912, 919, 920, 938, 956, 958, 962, 963, 964, 965, 966, 968, 970, 972, 976, 980, 981, 982, 983, 985, 990, 1009, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1022], "ellipticenvelop": [9, 226, 455, 458, 459, 460, 461, 548, 972, 1008, 1011, 1015, 1016, 1021], "oneclasssvm": [9, 11, 16, 211, 226, 312, 328, 548, 662, 829, 972, 980, 981, 1010, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023], "font_manag": [9, 81, 283, 328], "load_win": [9, 238, 304, 827, 835, 1005, 1019], "support_fract": [9, 454, 459], "contamin": [9, 80, 81, 226, 235, 283, 284, 454, 548, 829, 972, 1016, 1024], "ocsvm": [9, 211], "legend1": 9, "legend2": 9, "x1": [9, 12, 16, 34, 85, 91, 112, 121, 152, 209, 221, 235, 299, 326, 373, 384, 416, 449, 494, 552, 553, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 684, 748, 846, 847, 848, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 1000], "frontier": [9, 211, 283, 328, 972, 999], "xx1": [9, 112, 616], "yy1": 9, "meshgrid": [9, 11, 16, 26, 30, 34, 42, 58, 80, 118, 127, 150, 151, 152, 153, 155, 168, 208, 209, 210, 211, 223, 226, 246, 283, 290, 293, 301, 302, 322, 328, 329, 334, 335, 338, 339, 616], "500": [9, 10, 44, 50, 57, 60, 61, 63, 85, 86, 103, 105, 114, 123, 145, 149, 173, 210, 211, 219, 236, 237, 242, 243, 247, 257, 260, 270, 277, 283, 289, 303, 310, 328, 335, 339, 357, 403, 454, 455, 459, 460, 461, 467, 468, 469, 596, 598, 599, 601, 606, 609, 610, 635, 636, 639, 640, 641, 665, 667, 668, 841, 955, 981], "clf_name": [9, 10, 342], "z1": 9, "decision_funct": [9, 11, 16, 25, 27, 56, 112, 125, 138, 209, 210, 211, 227, 235, 264, 283, 284, 293, 301, 327, 328, 329, 333, 334, 335, 339, 373, 384, 394, 403, 422, 454, 534, 535, 538, 540, 544, 546, 548, 552, 578, 579, 616, 617, 618, 643, 644, 651, 653, 659, 660, 661, 662, 683, 685, 687, 692, 705, 710, 711, 719, 723, 724, 726, 740, 766, 772, 773, 776, 781, 784, 785, 795, 804, 811, 812, 813, 814, 829, 843, 850, 880, 883, 885, 887, 888, 962, 966, 972, 973, 980, 981, 999, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021], "c_": [9, 11, 16, 25, 26, 27, 30, 34, 58, 80, 96, 101, 118, 121, 126, 127, 136, 138, 151, 195, 210, 211, 213, 226, 235, 283, 302, 304, 322, 328, 329, 333, 335, 338, 339, 396, 644, 699, 700, 703, 966, 996, 999, 1000], "contour": [9, 11, 16, 34, 46, 47, 80, 118, 138, 152, 153, 155, 208, 209, 210, 211, 226, 231, 246, 283, 290, 327, 328, 330, 331, 333, 334, 335, 368, 616, 617, 972, 980], "linewidth": [9, 24, 33, 34, 37, 40, 58, 73, 78, 86, 92, 111, 122, 126, 149, 153, 157, 186, 187, 191, 192, 193, 195, 198, 200, 203, 211, 214, 226, 233, 235, 266, 270, 283, 287, 300, 310, 327, 328, 330, 335, 349, 997], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 43, 85, 94, 101, 107, 164, 379, 401, 518, 526, 677, 966, 985, 986, 1000], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 70, 73, 74, 102, 122, 124, 195, 203, 226, 234, 244, 255, 256, 258, 261, 264, 266, 277, 281, 301, 305, 313, 321, 329, 343, 344, 359, 363, 365, 373, 382, 384, 397, 400, 407, 408, 410, 418, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 481, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 682, 683, 685, 686, 687, 698, 746, 749, 755, 763, 764, 779, 780, 781, 784, 785, 787, 792, 793, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 898, 908, 909, 925, 955, 966, 976, 996, 997, 1001, 1003, 1008, 1014, 1015], "boxstyl": [9, 301], "fc": [9, 282, 366], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 264, 290, 334, 387, 631, 632, 635, 637, 638, 639, 645, 646, 647, 648, 649, 666, 667, 668, 669, 671], "xycoord": [9, 26], "textcoord": [9, 173], "xytext": [9, 26, 173], "bbox": [9, 12, 34, 45, 102, 242, 243, 244, 247, 248, 301], "arrowprop": [9, 26], "xlim": [9, 12, 26, 34, 44, 58, 62, 73, 78, 79, 80, 90, 97, 110, 112, 113, 114, 128, 135, 150, 151, 167, 176, 187, 189, 196, 203, 206, 211, 226, 233, 243, 248, 252, 267, 271, 283, 284, 328, 333, 334, 338, 350], "ylim": [9, 12, 24, 26, 33, 34, 37, 44, 58, 62, 78, 79, 80, 90, 97, 110, 112, 113, 119, 120, 122, 128, 131, 136, 150, 151, 167, 184, 186, 187, 189, 190, 191, 203, 206, 207, 211, 226, 233, 243, 248, 252, 256, 260, 267, 270, 271, 272, 283, 284, 328, 333, 334, 338, 342, 350], "prop": [9, 73, 81, 203, 244, 283, 328, 351, 997], "fontproperti": [9, 81, 283, 328], "ash": [9, 368, 1011, 1014], "malic_acid": 9, "abil": [9, 61, 80, 122, 155, 161, 166, 167, 169, 197, 215, 226, 342, 359, 387, 403, 404, 766, 767, 768, 771, 963, 966, 969, 972, 982, 987, 1008, 1010, 1015, 1017, 1021, 1022], "locat": [9, 25, 53, 54, 72, 80, 81, 191, 290, 311, 329, 364, 369, 371, 375, 376, 379, 380, 387, 396, 398, 402, 433, 445, 446, 454, 455, 456, 457, 458, 459, 460, 461, 473, 485, 486, 489, 490, 497, 500, 951, 956, 962, 967, 972, 976, 982, 1016], "hard": [9, 197, 226, 230, 257, 259, 359, 370, 382, 384, 396, 401, 404, 519, 526, 554, 661, 885, 886, 887, 888, 889, 962, 979, 981, 982, 987, 999, 1000, 1001, 1017, 1018], "due": [9, 26, 27, 53, 55, 60, 75, 113, 149, 167, 168, 176, 181, 188, 195, 197, 199, 214, 215, 230, 243, 265, 266, 277, 304, 305, 342, 343, 344, 371, 377, 384, 387, 394, 396, 400, 401, 403, 406, 428, 431, 432, 444, 520, 524, 528, 529, 559, 656, 781, 784, 785, 789, 791, 795, 804, 805, 808, 811, 815, 816, 848, 852, 853, 863, 956, 962, 963, 965, 966, 967, 969, 973, 980, 987, 1000, 1008, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "banana": [9, 966], "anywai": [9, 342, 373, 650, 670, 671], "rid": [9, 980], "difficulti": [9, 27, 215, 299, 359, 371, 394, 840, 841, 965, 969], "bandwidth": [9, 44, 63, 232, 281, 282, 290, 382, 384, 396, 402, 433, 443, 446, 823, 824, 828, 959, 972, 986, 1019, 1023], "compromis": [9, 168, 357, 371, 632, 664, 969, 1011], "risk": [9, 55, 197, 215, 300, 337, 353, 370, 371, 384, 395, 400, 403, 552, 553, 868, 869, 871, 872, 873, 874, 962, 966, 990, 1015], "x2": [9, 16, 85, 91, 112, 121, 152, 209, 235, 373, 397, 573, 614, 684, 748, 1000], "xx2": 9, "yy2": 9, "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 368], "429": [9, 15, 264, 273], "plot_outlier_detection_win": [9, 15], "goal": [10, 17, 52, 57, 86, 161, 168, 173, 197, 212, 215, 234, 235, 254, 255, 342, 358, 359, 366, 373, 376, 377, 384, 385, 386, 401, 403, 405, 527, 533, 575, 578, 723, 966, 969, 971, 972, 980, 981, 982, 984, 990, 992, 995, 999, 1001, 1016], "boxplot": [10, 80, 123, 167, 170, 309], "defaultdict": [10, 19, 25, 170, 260, 343, 344], "gc": 10, "make_regress": [10, 75, 176, 178, 179, 183, 200, 201, 270, 310, 353, 367, 373, 374, 383, 539, 541, 545, 550, 620, 631, 632, 634, 636, 638, 640, 648, 649, 650, 652, 656, 664, 841, 884, 966, 967, 969], "randomforestregressor": [10, 128, 129, 132, 161, 162, 311, 383, 403, 542, 543, 545, 547, 551, 553, 555, 617, 618, 893, 1013, 1014, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "sgdregressor": [10, 208, 357, 359, 382, 395, 631, 634, 652, 656, 661, 664, 841, 884, 889, 962, 980, 1010, 1012, 1014, 1015, 1016, 1019, 1021, 1022, 1023, 1024], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 60, 61, 95, 109, 116, 118, 129, 162, 181, 205, 206, 211, 226, 258, 262, 263, 270, 277, 306, 317, 318, 319, 320, 331, 342, 343, 353, 366, 380, 384, 391, 454, 459, 473, 474, 476, 477, 480, 482, 488, 496, 497, 498, 499, 500, 504, 507, 509, 516, 522, 524, 525, 531, 532, 538, 539, 540, 541, 549, 550, 552, 553, 587, 643, 644, 651, 652, 653, 657, 659, 661, 662, 663, 672, 781, 783, 784, 785, 786, 787, 795, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 813, 840, 841, 864, 883, 884, 885, 888, 919, 920, 935, 937, 961, 962, 967, 974, 980, 981, 996, 1001, 1003, 1008, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 64, 70, 72, 74, 129, 184, 258, 295, 296, 299, 312, 321, 342, 369, 375, 384, 390, 425, 428, 432, 434, 437, 439, 444, 447, 449, 452, 456, 457, 463, 516, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 578, 579, 612, 615, 617, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 675, 677, 679, 749, 762, 779, 780, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 812, 814, 817, 832, 839, 840, 841, 842, 843, 844, 845, 880, 883, 884, 885, 886, 887, 888, 889, 932, 987, 1010, 1011, 1013, 1015, 1016, 1017, 1019, 1020, 1022, 1023], "n_instanc": [10, 618], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 79, 81, 82, 95, 98, 100, 109, 112, 113, 121, 123, 124, 128, 143, 162, 176, 181, 183, 188, 190, 191, 196, 197, 198, 201, 202, 203, 207, 212, 215, 230, 233, 242, 246, 248, 254, 257, 262, 266, 267, 282, 299, 310, 311, 337, 343, 344, 347, 351, 357, 358, 366, 373, 377, 384, 394, 395, 396, 398, 401, 403, 404, 405, 406, 409, 431, 437, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 472, 482, 493, 494, 508, 511, 512, 516, 517, 520, 522, 523, 524, 525, 527, 528, 532, 533, 537, 542, 543, 544, 545, 546, 547, 549, 550, 551, 566, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 596, 621, 624, 628, 629, 630, 635, 643, 644, 649, 650, 651, 653, 656, 661, 662, 663, 670, 671, 688, 694, 697, 698, 700, 701, 709, 713, 714, 718, 722, 724, 730, 767, 768, 769, 771, 778, 779, 796, 797, 800, 801, 812, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 846, 853, 855, 856, 858, 859, 860, 862, 863, 869, 870, 871, 872, 876, 883, 891, 892, 893, 894, 918, 952, 956, 962, 964, 965, 968, 969, 970, 976, 977, 978, 980, 981, 982, 992, 999, 1001, 1008, 1010, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "atomic_benchmark": 10, "percentil": [10, 71, 122, 239, 299, 357, 577, 580, 581, 583, 584, 585, 588, 591, 617, 618, 732, 976, 1013, 1021], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 74, 120, 132, 162, 198, 235, 254, 261, 329, 347, 357, 369, 371, 382, 383, 397, 399, 403, 406, 434, 468, 523, 540, 541, 542, 543, 548, 549, 550, 551, 555, 670, 671, 781, 784, 785, 795, 807, 818, 819, 820, 821, 822, 955, 966, 976, 1001, 1016, 1018], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 66, 79, 81, 121, 146, 149, 155, 156, 168, 173, 199, 252, 257, 258, 269, 318, 337, 343, 344, 373, 380, 384, 385, 393, 394, 395, 396, 401, 404, 405, 406, 573, 578, 592, 593, 600, 612, 619, 644, 786, 796, 797, 800, 909, 956, 965, 1003, 1016, 1018], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 58, 64, 100, 112, 114, 118, 122, 138, 153, 157, 177, 180, 189, 206, 209, 215, 230, 252, 257, 264, 266, 322, 325, 327, 329, 330, 331, 333, 335, 343, 348, 366, 382, 384, 393, 394, 397, 400, 404, 406, 422, 425, 426, 430, 435, 442, 448, 456, 457, 463, 478, 493, 494, 567, 577, 580, 581, 583, 584, 585, 595, 598, 599, 600, 602, 604, 605, 607, 608, 610, 612, 617, 618, 628, 677, 685, 690, 691, 692, 700, 715, 724, 742, 743, 747, 750, 753, 754, 755, 756, 757, 758, 760, 762, 763, 764, 765, 766, 770, 811, 823, 824, 898, 966, 967, 968, 969, 976, 982, 1008, 1020, 1021, 1023, 1024], "contain": [10, 19, 24, 27, 33, 40, 49, 56, 58, 70, 71, 112, 114, 117, 125, 155, 167, 168, 170, 173, 188, 215, 226, 235, 236, 239, 247, 255, 257, 263, 266, 267, 275, 283, 284, 286, 299, 312, 318, 321, 342, 343, 364, 365, 366, 368, 371, 373, 375, 376, 377, 378, 379, 380, 383, 384, 390, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 408, 410, 418, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 487, 488, 489, 493, 494, 495, 499, 500, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 670, 671, 673, 674, 675, 676, 677, 681, 682, 683, 685, 686, 687, 694, 697, 719, 720, 721, 752, 756, 763, 764, 772, 776, 779, 780, 781, 784, 785, 787, 795, 799, 800, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 902, 903, 904, 923, 924, 926, 929, 933, 935, 955, 956, 958, 964, 967, 970, 972, 976, 977, 979, 982, 992, 1001, 1008, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "generate_dataset": 10, "coef": [10, 54, 105, 166, 167, 176, 181, 184, 188, 189, 191, 196, 200, 201, 202, 206, 213, 239, 270, 295, 338, 509, 631, 632, 634, 637, 638, 644, 645, 646, 647, 648, 654, 657, 659, 665, 666, 667, 668, 669, 670, 671, 672, 970], "random_se": [10, 92, 118], "x_scaler": 10, "y_scaler": 10, "ok": [10, 371, 972], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 290, 321, 357, 692, 698, 713, 714, 722, 767, 768, 771, 772, 966, 1008, 1016, 1017, 1023], "bp": [10, 123, 146, 185, 186, 368, 974], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "red": [10, 11, 26, 33, 34, 60, 80, 92, 95, 96, 97, 113, 129, 132, 158, 173, 176, 177, 187, 195, 223, 236, 252, 263, 290, 294, 300, 304, 305, 319, 329, 350, 369, 384, 396, 401, 967], "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 55, 58, 59, 60, 63, 64, 85, 91, 92, 97, 101, 128, 156, 157, 173, 185, 190, 192, 194, 195, 197, 199, 200, 212, 214, 219, 242, 244, 245, 252, 257, 259, 260, 261, 284, 299, 304, 319, 347, 371, 375, 404, 1016, 1018, 1019], "linestyl": [10, 11, 16, 33, 60, 73, 80, 103, 105, 110, 121, 131, 135, 138, 149, 152, 154, 156, 158, 169, 182, 184, 185, 186, 197, 198, 199, 203, 207, 209, 210, 215, 233, 235, 254, 256, 260, 261, 266, 282, 290, 294, 300, 327, 330, 331, 333, 334, 335, 997], "major": [10, 14, 264, 299, 303, 309, 310, 311, 312, 313, 314, 344, 357, 366, 370, 371, 374, 377, 382, 385, 396, 400, 402, 404, 406, 536, 554, 555, 679, 713, 714, 722, 767, 768, 771, 895, 897, 966, 969, 980, 987, 990, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 205, 378, 423, 561, 683, 685, 687, 902], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 649, 670, 671, 962, 966], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 205, 220, 223, 277], "1e2": [10, 149, 156, 232, 248, 329, 730], "randomforest": [10, 118, 357, 403, 891, 892, 1013], "0001": [10, 205, 255, 373, 408, 428, 432, 444, 456, 457, 463, 518, 523, 525, 532, 534, 535, 544, 545, 631, 632, 633, 634, 637, 638, 643, 644, 645, 646, 647, 648, 653, 654, 657, 659, 661, 663, 665, 672, 674, 678, 840, 841, 883, 884, 955], "250": [10, 65, 122, 173, 218, 350, 352, 478, 677, 955, 978, 1015], "780": [10, 15, 255], "plot_prediction_lat": [10, 15], "conserv": [11, 567, 574, 875, 876, 965, 978], "biologi": 11, "south": [11, 167, 290, 402], "american": [11, 12, 70, 81, 366, 396, 398, 402, 403, 404, 454, 459, 715, 863], "mammal": 11, "past": [11, 375, 376, 379, 382, 385, 400, 401, 403, 523, 540, 541, 663, 990, 993, 1024], "environment": [11, 181, 215], "unsuccess": 11, "cast": [11, 53, 197, 219, 365, 384, 385, 404, 481, 629, 630, 631, 637, 641, 642, 645, 646, 647, 648, 649, 650, 658, 660, 931, 1015, 1016, 1017, 1018, 1021, 1023], "densiti": [11, 49, 55, 60, 65, 75, 101, 105, 146, 164, 183, 197, 212, 215, 222, 226, 230, 241, 248, 249, 257, 263, 278, 283, 284, 291, 299, 329, 342, 368, 380, 384, 396, 403, 407, 415, 429, 431, 433, 435, 437, 449, 452, 483, 487, 521, 526, 534, 535, 779, 780, 781, 823, 824, 828, 829, 876, 960, 962, 965, 969, 971, 972, 978, 986, 988, 992, 1002, 1003, 1010, 1012, 1016, 1017, 1023, 1024], "phillip": [11, 290, 483], "2006": [11, 290, 403, 406, 447, 483, 542, 543, 550, 551, 595, 596, 599, 604, 607, 634, 651, 652, 725, 772, 773, 779, 818, 876, 893, 894, 962, 966, 968, 971, 978, 979], "basemap": [11, 290], "coast": [11, 290], "line": [11, 17, 40, 43, 60, 70, 95, 100, 121, 148, 159, 161, 162, 164, 167, 168, 185, 186, 187, 189, 192, 193, 195, 198, 199, 200, 205, 206, 208, 209, 226, 230, 231, 233, 235, 254, 261, 263, 264, 287, 290, 300, 311, 328, 333, 334, 338, 339, 342, 365, 366, 369, 371, 372, 373, 375, 376, 377, 378, 379, 382, 401, 402, 403, 423, 472, 473, 474, 493, 494, 527, 538, 539, 540, 541, 595, 598, 599, 617, 655, 671, 685, 686, 687, 787, 934, 960, 966, 970, 973, 980, 986, 989, 999, 1001, 1010, 1019, 1021, 1024], "nation": [11, 80, 290, 366, 830], "boundari": [11, 13, 25, 26, 27, 31, 34, 58, 60, 108, 112, 118, 127, 133, 150, 153, 164, 168, 180, 198, 226, 231, 233, 260, 280, 285, 287, 288, 290, 293, 299, 301, 304, 316, 323, 326, 327, 329, 331, 338, 339, 348, 367, 394, 403, 404, 406, 435, 441, 489, 521, 534, 535, 554, 573, 574, 576, 616, 812, 825, 831, 833, 834, 835, 862, 879, 880, 887, 888, 891, 907, 960, 969, 972, 976, 979, 980, 981, 1008, 1010, 1012, 1021, 1022, 1023], "america": [11, 12, 80, 290, 830, 976], "bradypu": [11, 290, 483], "variegatu": [11, 290, 483], "brown": [11, 92, 290, 483, 613, 956, 1013, 1015, 1016, 1017, 1020], "throat": [11, 290, 483], "sloth": [11, 290, 483], "microryzomi": [11, 290, 483], "minutu": [11, 290, 483], "known": [11, 17, 25, 27, 39, 49, 57, 58, 81, 104, 105, 129, 154, 156, 162, 181, 197, 198, 215, 226, 257, 259, 266, 286, 290, 300, 312, 317, 326, 343, 359, 368, 369, 371, 374, 379, 382, 384, 387, 392, 393, 394, 396, 397, 398, 399, 400, 401, 403, 404, 406, 423, 448, 467, 469, 483, 493, 494, 529, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 573, 574, 576, 579, 594, 607, 618, 643, 644, 657, 667, 668, 679, 689, 695, 698, 703, 713, 727, 739, 741, 777, 812, 818, 819, 820, 821, 822, 825, 830, 833, 839, 867, 891, 892, 893, 894, 956, 958, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 976, 981, 982, 992, 997, 999, 1000], "forest": [11, 27, 31, 108, 115, 118, 124, 125, 127, 129, 132, 133, 161, 164, 165, 171, 173, 226, 235, 254, 290, 311, 342, 353, 364, 383, 384, 394, 405, 448, 449, 476, 480, 481, 483, 500, 540, 541, 542, 543, 545, 548, 549, 550, 551, 615, 619, 809, 816, 843, 857, 887, 891, 892, 893, 955, 956, 967, 974, 986, 987, 988, 1003, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017], "rice": [11, 290, 483, 1021], "rat": [11, 290, 483], "rodent": [11, 290, 483], "live": [11, 70, 167, 290, 371, 396, 483, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610], "peru": [11, 290, 483], "colombia": [11, 290, 483], "ecuador": [11, 290, 483], "venezuela": [11, 290, 483], "entropi": [11, 237, 269, 290, 311, 317, 318, 353, 396, 403, 408, 483, 518, 542, 549, 592, 593, 643, 702, 720, 721, 725, 777, 891, 893, 962, 963, 966, 970, 982, 1010, 1012, 1016, 1017, 1022, 1024], "anderson": [11, 290, 483, 1014, 1020], "schapir": [11, 290, 403, 483, 538, 539], "ecolog": [11, 290, 483], "190": [11, 14, 118, 121, 133, 215, 266, 290, 377, 483], "231": [11, 290, 396, 407, 429, 483, 569], "259": [11, 220, 290, 403, 483, 552, 553], "________________________________________________________________________________": [11, 54, 342], "coastlin": [11, 290, 368], "coverag": [11, 122, 197, 215, 290, 374, 392, 483, 612, 705], "area": [11, 34, 125, 197, 215, 235, 254, 257, 264, 266, 267, 329, 334, 338, 368, 371, 375, 382, 396, 403, 404, 687, 691, 692, 693, 726, 772, 773, 963, 966, 969, 985, 1010], "roc": [11, 25, 115, 164, 225, 227, 235, 236, 240, 250, 273, 378, 394, 400, 489, 495, 549, 643, 687, 691, 692, 693, 711, 726, 766, 772, 773, 800, 809, 812, 850, 888, 972, 1005, 1010, 1011, 1013, 1014, 1018, 1020, 1024], "868443": 11, "993919": 11, "elaps": [11, 47, 67, 116, 117, 357, 449, 452, 554, 555, 842, 843, 844, 845], "astro": [11, 156, 218, 245], "washington": [11, 156, 218, 245, 282, 290], "bunch": [11, 364, 365, 366, 449, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 495, 552, 553, 554, 555, 617, 618, 619, 842, 843, 891, 892, 893, 894, 990, 1001, 1013, 1015, 1018, 1020, 1024], "fetch_species_distribut": [11, 290, 1017], "ll": [11, 55, 117, 252, 290, 371, 382, 517, 526, 969, 982, 992], "otherwis": [11, 56, 62, 112, 158, 162, 178, 199, 205, 290, 353, 359, 373, 375, 377, 384, 396, 398, 400, 404, 406, 419, 420, 421, 423, 425, 426, 427, 430, 431, 436, 438, 439, 449, 452, 467, 468, 469, 470, 481, 511, 520, 521, 523, 525, 526, 532, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 573, 575, 576, 582, 587, 595, 596, 599, 616, 617, 618, 629, 630, 631, 637, 643, 644, 645, 647, 650, 651, 652, 653, 658, 660, 661, 662, 663, 670, 671, 675, 677, 681, 682, 683, 685, 687, 688, 692, 694, 698, 699, 708, 710, 711, 712, 713, 714, 722, 725, 736, 738, 739, 740, 750, 758, 762, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 783, 784, 785, 786, 787, 795, 799, 800, 807, 812, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 838, 840, 841, 847, 848, 850, 854, 863, 864, 865, 868, 869, 870, 872, 873, 874, 883, 884, 885, 886, 887, 888, 889, 896, 898, 904, 906, 919, 920, 927, 950, 952, 961, 962, 963, 966, 969, 970, 972, 973, 976, 978, 980, 981, 986, 990, 992, 1010, 1016, 1017, 1018, 1021], "improvis": [11, 290], "mpl_toolkit": [11, 45, 67, 90, 101, 102, 168, 194, 218, 220, 290], "except": [11, 16, 44, 53, 98, 205, 212, 226, 265, 277, 290, 294, 295, 299, 301, 314, 360, 364, 371, 373, 374, 375, 376, 382, 384, 390, 393, 397, 400, 401, 403, 404, 406, 417, 445, 450, 453, 467, 468, 469, 494, 539, 541, 542, 543, 545, 547, 549, 550, 553, 555, 596, 612, 615, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 664, 672, 696, 762, 788, 816, 817, 823, 824, 826, 829, 834, 840, 841, 847, 861, 863, 881, 884, 886, 889, 892, 894, 924, 952, 962, 966, 981, 992, 1000, 1001, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "importerror": [11, 16, 53, 98, 277, 290, 379, 481], "construct_grid": [11, 290], "object": [11, 13, 14, 19, 26, 44, 50, 62, 66, 70, 71, 98, 129, 135, 144, 145, 154, 164, 168, 181, 193, 197, 213, 215, 225, 236, 238, 239, 240, 255, 269, 290, 305, 312, 313, 317, 343, 344, 353, 364, 365, 366, 371, 372, 374, 376, 377, 378, 380, 383, 384, 385, 390, 396, 397, 398, 401, 404, 405, 406, 410, 412, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 696, 703, 716, 717, 726, 742, 743, 765, 766, 773, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 898, 903, 904, 905, 906, 907, 910, 914, 916, 926, 927, 929, 931, 932, 934, 951, 952, 954, 962, 963, 964, 965, 969, 972, 973, 976, 979, 980, 981, 986, 987, 992, 993, 995, 996, 999, 1001, 1003, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "func": [11, 75, 115, 167, 177, 215, 290, 371, 397, 450, 684, 847, 976, 1012, 1014, 1016, 1017], "xgrid": [11, 290], "ygrid": [11, 290], "correspond": [11, 13, 16, 26, 32, 41, 53, 65, 78, 82, 97, 113, 116, 118, 125, 142, 145, 146, 150, 155, 158, 167, 186, 189, 197, 198, 206, 215, 227, 232, 239, 247, 256, 258, 260, 261, 266, 267, 290, 304, 311, 312, 313, 343, 347, 348, 353, 358, 365, 366, 367, 370, 371, 373, 375, 378, 379, 383, 384, 385, 393, 394, 396, 398, 399, 400, 401, 403, 404, 405, 406, 411, 416, 422, 424, 426, 430, 433, 436, 438, 444, 446, 448, 449, 457, 467, 468, 469, 475, 476, 477, 478, 479, 480, 481, 519, 526, 529, 530, 531, 534, 535, 537, 540, 542, 544, 545, 546, 549, 567, 569, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 596, 602, 615, 617, 618, 620, 628, 629, 630, 631, 632, 633, 637, 643, 644, 645, 646, 647, 653, 654, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 672, 675, 676, 677, 679, 688, 695, 698, 708, 709, 718, 722, 736, 738, 758, 762, 766, 772, 773, 776, 778, 779, 780, 781, 784, 785, 787, 795, 804, 812, 815, 818, 819, 820, 821, 822, 823, 824, 828, 829, 830, 832, 840, 841, 850, 854, 856, 857, 860, 864, 872, 885, 888, 891, 892, 893, 894, 908, 914, 941, 955, 956, 958, 959, 960, 962, 963, 965, 966, 967, 969, 970, 971, 972, 973, 976, 977, 980, 981, 985, 992, 998, 1001, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "coordin": [11, 12, 13, 54, 100, 128, 153, 182, 218, 258, 290, 357, 401, 406, 428, 432, 433, 434, 446, 456, 457, 463, 516, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 535, 599, 631, 632, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 666, 667, 668, 669, 673, 674, 675, 678, 679, 691, 748, 753, 883, 962, 963, 981, 999, 1008, 1011, 1012, 1013, 1017, 1019, 1021, 1022, 1023], "corner": [11, 13, 26, 53, 166, 254, 258, 266, 267, 290, 371, 483, 895, 897, 966, 1022], "cell": [11, 12, 26, 32, 71, 72, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 290, 296, 305, 310, 311, 313, 314, 319, 351, 368, 376, 677, 966, 967, 1014, 1022], "xmin": [11, 78, 187, 189, 206, 207, 290], "x_left_lower_corn": [11, 290, 483], "grid_siz": [11, 61, 290, 483], "xmax": [11, 78, 187, 189, 206, 207, 290], "nx": [11, 34, 290, 483], "ymin": [11, 78, 184, 186, 189, 190, 198, 206, 257, 290], "y_left_lower_corn": [11, 290, 483], "ny": [11, 34, 256, 290, 368, 483, 956, 978], "create_species_bunch": 11, "species_nam": [11, 290], "record": [11, 96, 114, 169, 305, 344, 357, 371, 396, 398, 435, 442, 483, 605, 628, 677, 755, 758, 762, 763, 764, 765, 806, 829, 1021, 1022], "join": [11, 12, 19, 55, 161, 215, 257, 301, 366, 385, 448, 1001, 1008, 1016], "ascii": [11, 290, 404, 472, 573, 574, 576], "pt": [11, 366, 405, 859, 976], "desir": [11, 24, 112, 146, 162, 197, 199, 299, 303, 364, 371, 373, 375, 379, 390, 393, 396, 399, 400, 401, 405, 488, 523, 525, 529, 532, 552, 578, 587, 588, 649, 655, 670, 671, 693, 720, 823, 824, 828, 848, 850, 853, 854, 856, 857, 859, 860, 864, 867, 869, 871, 872, 907, 935, 958, 960, 963, 969, 976, 980, 981, 982, 992, 1008, 1016, 1017, 1018, 1021], "pts_": 11, "ix": [11, 266, 336], "searchsort": 11, "dd": [11, 12, 127, 290, 483], "ii": [11, 96, 168, 204, 252, 368, 404, 567, 568, 574, 623, 651, 652, 846, 855, 962, 976, 985], "lat": [11, 290, 483], "cov_": [11, 82], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 37, 81, 92, 121, 162, 169, 221, 229, 234, 269, 311, 373, 376, 383, 785, 802, 818, 819, 820, 822, 955, 956], "land": [11, 290, 385, 403], "water": 11, "land_refer": [11, 290], "standard": [11, 12, 26, 32, 34, 55, 61, 70, 71, 73, 80, 81, 86, 96, 110, 113, 115, 116, 117, 118, 125, 129, 146, 149, 154, 156, 158, 167, 176, 182, 186, 195, 197, 206, 218, 219, 220, 231, 247, 252, 255, 256, 257, 258, 260, 299, 304, 327, 342, 357, 358, 363, 364, 365, 367, 368, 369, 371, 373, 374, 376, 377, 380, 382, 384, 387, 390, 392, 396, 398, 399, 400, 404, 406, 431, 453, 457, 473, 481, 486, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 509, 510, 515, 517, 520, 526, 537, 575, 579, 596, 619, 629, 630, 635, 636, 639, 640, 641, 649, 650, 657, 658, 659, 660, 661, 663, 672, 674, 678, 772, 787, 802, 820, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 836, 837, 847, 852, 853, 856, 859, 860, 861, 863, 871, 872, 873, 874, 881, 883, 884, 903, 955, 958, 962, 963, 966, 968, 969, 970, 972, 980, 981, 987, 990, 992, 997, 999, 1000, 1001, 1003, 1014, 1015, 1016, 1017, 1019, 1020, 1021], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 290], "llcrnrlat": [11, 290], "urcrnrlat": [11, 290], "llcrnrlon": [11, 290], "urcrnrlon": [11, 290], "drawcoastlin": [11, 290], "drawcountri": [11, 290], "9998": [11, 290], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 56, 60, 63, 65, 68, 74, 75, 80, 90, 91, 92, 95, 102, 103, 109, 112, 118, 122, 125, 127, 128, 130, 131, 135, 138, 142, 143, 150, 152, 153, 157, 162, 164, 167, 168, 169, 179, 180, 182, 191, 194, 201, 209, 211, 230, 232, 233, 234, 242, 245, 257, 260, 261, 266, 267, 270, 277, 279, 280, 282, 283, 284, 285, 286, 288, 289, 290, 300, 301, 302, 303, 309, 313, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 341, 342, 344, 345, 353, 358, 365, 366, 368, 371, 379, 380, 384, 393, 394, 395, 397, 398, 399, 401, 402, 403, 404, 405, 406, 408, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 444, 445, 447, 454, 457, 473, 487, 489, 491, 497, 508, 516, 522, 526, 529, 530, 531, 534, 535, 538, 540, 542, 543, 544, 566, 574, 575, 576, 577, 579, 580, 581, 583, 584, 585, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 616, 624, 625, 633, 635, 636, 638, 639, 640, 641, 643, 644, 648, 649, 650, 651, 652, 654, 664, 665, 667, 668, 669, 670, 671, 673, 676, 680, 681, 689, 690, 693, 702, 710, 721, 727, 740, 742, 743, 745, 750, 753, 758, 759, 760, 761, 763, 775, 776, 777, 779, 780, 782, 786, 788, 789, 790, 793, 796, 797, 799, 800, 802, 807, 818, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 836, 837, 844, 848, 849, 850, 854, 855, 856, 858, 859, 863, 871, 876, 890, 898, 906, 915, 920, 940, 955, 956, 958, 959, 960, 962, 963, 964, 965, 968, 970, 971, 972, 974, 979, 980, 981, 982, 986, 989, 996, 1002, 1003, 1008, 1009, 1010, 1011, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1023], "solid": [11, 16, 31, 33, 121, 152, 209, 210, 226, 290, 301, 990], "z": [11, 16, 34, 58, 101, 118, 138, 151, 153, 168, 207, 209, 210, 211, 218, 220, 226, 231, 246, 283, 290, 293, 301, 304, 322, 328, 329, 333, 334, 335, 339, 368, 393, 401, 403, 538, 539, 570, 624, 649, 656, 670, 671, 674, 678, 684, 708, 769, 863, 962, 963, 970, 971, 1023], "float64": [11, 13, 48, 53, 71, 121, 123, 124, 167, 168, 268, 313, 314, 358, 365, 371, 373, 384, 404, 456, 457, 463, 481, 482, 493, 494, 527, 566, 567, 574, 576, 626, 643, 658, 660, 722, 848, 856, 857, 885, 886, 888, 889, 892, 894, 901, 903, 937, 940, 942, 943, 944, 981, 992, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "idx": [11, 16, 19, 30, 45, 55, 105, 112, 118, 130, 158, 168, 170, 181, 189, 196, 197, 206, 219, 235, 348, 397, 400], "9999": [11, 215, 290, 320, 483, 612, 1016], "coverages_land": 11, "contourf": [11, 16, 118, 211, 231, 283, 290, 293, 301, 302, 322, 328, 334, 339, 616, 617], "pts_train": 11, "pts_test": 11, "auc": [11, 25, 197, 215, 235, 254, 257, 261, 264, 266, 267, 394, 687, 693, 772, 966, 1013, 1016, 1020], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 34, 101, 105, 210, 211, 243, 264, 283, 284, 328, 334, 339, 396, 692, 966, 982], "fpr": [11, 227, 235, 254, 266, 267, 378, 577, 581, 683, 687, 691, 711, 773, 966, 1005, 1008, 1024], "tpr": [11, 227, 235, 254, 266, 267, 378, 687, 691, 773, 966, 1005, 1008, 1024], "threshold": [11, 25, 42, 65, 98, 105, 146, 164, 168, 170, 192, 227, 229, 254, 255, 256, 264, 275, 316, 323, 348, 351, 384, 396, 401, 403, 405, 426, 427, 430, 431, 454, 485, 493, 494, 516, 522, 527, 533, 534, 535, 548, 573, 576, 578, 582, 587, 588, 629, 652, 656, 661, 663, 677, 683, 685, 687, 688, 691, 692, 705, 710, 711, 723, 724, 740, 766, 772, 773, 776, 779, 780, 800, 818, 829, 830, 846, 848, 850, 866, 878, 879, 880, 888, 895, 897, 940, 962, 966, 969, 970, 972, 976, 979, 981, 982, 987, 1008, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024], "roc_curv": [11, 227, 254, 266, 687, 691, 711, 766, 772, 966, 1008, 1009, 1010, 1013, 1014, 1016, 1021, 1024], "roc_auc": [11, 257, 261, 266, 267, 378, 619, 687, 966, 1005], "ntime": [11, 268], "554": [11, 15, 98, 107, 205, 213, 295], "plot_species_distribution_model": [11, 15, 483], "emploi": [12, 149, 232, 398, 404, 406, 435, 463, 567, 574, 974, 990, 1000, 1014], "techniqu": [12, 70, 72, 97, 106, 111, 120, 137, 145, 162, 166, 205, 220, 222, 262, 281, 312, 318, 347, 359, 368, 382, 384, 394, 395, 396, 400, 401, 402, 403, 404, 405, 432, 433, 434, 435, 519, 539, 662, 674, 678, 679, 710, 740, 958, 962, 963, 965, 966, 969, 972, 974, 978, 980, 982, 987, 990, 995, 1000, 1001, 1021], "histor": [12, 197, 987], "quot": [12, 14, 70, 258, 342, 343, 358, 365, 366, 369, 375, 395, 473, 474, 481, 966, 978, 981, 1001, 1023], "quantiti": [12, 119, 257, 264, 311, 357, 384, 396, 403, 706, 707, 708, 769, 839, 955, 957, 960, 962, 1013], "daili": [12, 990], "price": [12, 75, 119, 129, 305, 956, 962, 990, 997], "link": [12, 17, 167, 168, 176, 197, 215, 242, 260, 287, 347, 358, 369, 370, 371, 372, 375, 379, 384, 394, 396, 398, 401, 406, 546, 547, 595, 633, 654, 665, 673, 690, 902, 904, 962, 969, 982, 983, 986, 989, 995, 999, 1001, 1006, 1008, 1011, 1012, 1015, 1016, 1019], "fluctuat": [12, 60, 197, 264, 1016], "normalesup": [12, 32, 46, 66, 231], "2003": [12, 393, 396, 401, 404, 436, 437, 447, 498, 500, 674, 678, 818, 820, 962, 963, 968, 978, 1016], "2008": [12, 398, 400, 401, 463, 519, 548, 575, 630, 649, 670, 671, 677, 701, 710, 740, 813, 818, 822, 839, 960, 963, 964, 966, 967, 968, 971, 972, 981], "calm": 12, "ago": [12, 987], "tech": [12, 368, 821], "firm": [12, 396], "crash": [12, 371, 453, 873, 874, 881, 976, 1012, 1016], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 379, 839, 971, 999], "msft": 12, "ibm": [12, 19, 321, 344, 366], "twx": 12, "warner": [12, 1023], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 1001], "amzn": 12, "amazon": 12, "tm": [12, 969], "toyota": 12, "caj": 12, "canon": [12, 384, 394, 403, 467, 468, 470, 752, 987, 988, 1003], "sne": [12, 164, 217, 218, 219, 220, 222, 224, 499, 510, 677, 1002, 1003], "soni": [12, 1018, 1020], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 840, 841, 970], "boe": 12, "ko": [12, 26, 150], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 80, 81, 398, 454, 459], "mcdonald": 12, "pep": [12, 379, 1008], "pepsi": 12, "kellogg": 12, "un": [12, 371, 394, 404, 408, 518, 574, 777, 846, 855, 866, 870, 1017], "unilev": 12, "mar": [12, 984], "marriott": 12, "pg": [12, 377, 634, 962, 1013], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 957, 968, 1020], "electr": [12, 368, 396], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 990], "chase": [12, 1008], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 990], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 357, 369, 382, 967, 984], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 70], "instrument": [12, 70, 96, 166], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1018], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 132], "dynam": [12, 168, 540, 541, 548, 564, 565, 661, 662, 663, 982, 986, 990, 1014, 1020], "rtn": 12, "raytheon": 12, "cat": [12, 71, 168, 169, 312, 313, 314, 366, 404, 567, 697, 703, 738, 767, 864, 966, 976, 1017, 1018, 1020], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 344, 358, 373, 377, 398, 404, 484, 567, 573, 574, 576, 895, 897, 986], "fetch": [12, 17, 129, 167, 215, 364, 365, 366, 371, 375, 376, 379, 395, 401, 481, 540, 541, 548, 573, 574, 576, 1016], "histori": [12, 360, 531, 544, 545, 984, 1008], "stderr": [12, 812], "url": [12, 17, 146, 365, 368, 375], "githubusercont": 12, "master": [12, 16, 277, 314, 371, 375, 990, 1013], "financi": [12, 396, 403, 962], "csv": [12, 365, 368, 376, 989, 1016, 1021], "read_csv": [12, 376, 1023], "close_pric": 12, "vstack": [12, 26, 57, 65, 152, 153, 179, 242, 246, 277, 290, 334, 616, 967, 1016], "q": [12, 71, 85, 122, 197, 312, 393, 396, 401, 919, 962, 981], "open_pric": 12, "carri": [12, 31, 162, 257, 260, 265, 294, 301, 344, 385, 390, 404, 542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894, 990, 1000], "invers": [12, 54, 77, 83, 164, 247, 266, 329, 343, 344, 363, 384, 395, 397, 399, 400, 401, 404, 408, 430, 450, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 512, 518, 519, 520, 524, 526, 528, 542, 546, 549, 574, 575, 576, 613, 629, 630, 643, 644, 651, 653, 659, 660, 661, 662, 663, 665, 708, 727, 736, 779, 780, 825, 826, 833, 834, 840, 841, 843, 847, 850, 856, 857, 859, 875, 876, 883, 884, 885, 888, 889, 891, 893, 909, 960, 962, 966, 969, 970, 976, 980, 981, 999, 1001, 1002, 1003, 1008, 1011, 1016, 1019, 1020, 1022], "correl": [12, 27, 82, 85, 86, 106, 126, 142, 145, 154, 164, 165, 166, 168, 169, 171, 181, 186, 192, 215, 257, 275, 305, 310, 311, 337, 364, 367, 368, 376, 384, 386, 393, 398, 400, 405, 406, 435, 442, 467, 468, 470, 478, 479, 485, 509, 549, 591, 594, 612, 619, 620, 621, 667, 668, 727, 741, 762, 763, 764, 809, 823, 824, 860, 861, 863, 872, 957, 962, 967, 973, 976, 980, 982, 987, 988, 1003, 1008, 1009, 1010, 1021, 1022], "condition": [12, 27, 197, 394, 398, 742, 960], "connect": [12, 39, 44, 47, 51, 54, 62, 66, 67, 369, 371, 380, 384, 398, 426, 430, 437, 447, 448, 570, 571, 680, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 964, 969, 971, 979, 1012, 1021], "edge_model": 12, "graphicallassocv": [12, 82, 398, 456, 458, 459, 460, 461, 463, 1016, 1020, 1022, 1024], "seri": [12, 82, 116, 166, 169, 179, 197, 218, 235, 239, 262, 306, 313, 317, 363, 366, 376, 384, 396, 474, 475, 476, 477, 481, 485, 486, 487, 489, 490, 495, 526, 675, 679, 802, 899, 957, 962, 963, 967, 969, 980, 986, 1011, 1014, 1015, 1016, 1020, 1023], "rather": [12, 53, 82, 113, 161, 167, 197, 198, 211, 303, 304, 342, 343, 353, 358, 367, 371, 373, 376, 377, 379, 382, 383, 384, 385, 396, 400, 401, 403, 404, 406, 433, 446, 448, 550, 566, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 614, 631, 632, 637, 638, 645, 646, 647, 648, 765, 795, 814, 816, 817, 846, 883, 884, 895, 920, 960, 962, 963, 966, 968, 969, 973, 987, 996, 999, 1008, 1009, 1010, 1011, 1015, 1016, 1017, 1018, 1023, 1024], "former": [12, 344, 403, 404, 550, 783, 790, 799, 968, 1008, 1014, 1017], "recoveri": [12, 82, 181, 196, 398], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 71, 72, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 305, 310, 311, 313, 314, 319, 351, 379], "trust": [12, 26, 71, 72, 81, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 305, 310, 311, 313, 314, 319, 351, 375, 385, 390, 394, 996, 1022], "unabl": [12, 26, 71, 72, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 166, 167, 168, 169, 178, 181, 197, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 305, 310, 311, 313, 314, 319, 351, 359, 863, 976, 1017], "render": [12, 26, 53, 71, 72, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 192, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 305, 310, 311, 313, 314, 319, 351, 371, 375, 376, 377, 384, 536, 574, 616, 685, 687, 860, 872, 895, 897, 965, 982, 1021], "nbviewer": [12, 26, 71, 72, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 305, 310, 311, 313, 314, 319, 351], "graphicallassocvgraphicallassocv": 12, "group": [12, 37, 40, 55, 58, 60, 131, 168, 170, 197, 219, 248, 252, 305, 319, 343, 351, 366, 376, 384, 385, 396, 402, 403, 404, 419, 431, 480, 573, 574, 576, 579, 703, 772, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 856, 857, 893, 894, 962, 963, 965, 966, 967, 976, 982, 983, 984, 986, 992, 995, 996, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1024], "amongst": [12, 982], "indic": [12, 19, 25, 26, 27, 48, 59, 60, 66, 75, 86, 95, 115, 154, 157, 162, 166, 168, 194, 220, 230, 251, 259, 260, 263, 264, 277, 290, 317, 318, 321, 342, 343, 344, 351, 358, 366, 371, 372, 373, 375, 379, 380, 382, 384, 393, 394, 396, 398, 400, 401, 403, 404, 406, 407, 411, 422, 425, 429, 435, 436, 437, 438, 440, 441, 442, 445, 449, 452, 457, 472, 493, 494, 496, 497, 498, 508, 517, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 566, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 605, 612, 613, 614, 615, 617, 618, 624, 632, 635, 636, 638, 639, 640, 646, 648, 650, 658, 660, 667, 668, 675, 677, 679, 681, 688, 692, 697, 698, 703, 704, 705, 709, 712, 713, 714, 715, 718, 722, 723, 724, 725, 738, 755, 762, 763, 764, 765, 767, 768, 769, 771, 772, 774, 775, 776, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 814, 816, 817, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 847, 850, 854, 856, 864, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 899, 903, 904, 909, 924, 929, 930, 956, 961, 962, 963, 966, 967, 968, 969, 970, 973, 974, 976, 977, 980, 981, 987, 992, 996, 999, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1018, 1019, 1021, 1023, 1024], "reflect": [12, 40, 46, 47, 80, 92, 96, 119, 168, 169, 197, 215, 266, 281, 343, 367, 370, 375, 384, 386, 393, 435, 441, 963, 966, 972, 974, 1000, 1009, 1017], "properti": [12, 25, 156, 157, 199, 214, 243, 279, 304, 351, 357, 360, 364, 371, 373, 387, 393, 394, 396, 398, 401, 403, 405, 406, 411, 427, 430, 436, 437, 438, 449, 450, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 575, 576, 578, 579, 582, 595, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 617, 631, 637, 640, 645, 647, 659, 660, 684, 689, 690, 693, 781, 784, 785, 795, 811, 812, 842, 843, 856, 857, 858, 864, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 955, 958, 961, 962, 963, 966, 967, 969, 972, 976, 979, 981, 982, 983, 987, 992, 1013, 1017, 1018, 1022], "impact": [12, 25, 36, 37, 68, 75, 142, 164, 166, 167, 168, 199, 215, 251, 304, 314, 343, 353, 357, 358, 364, 382, 385, 394, 396, 401, 432, 434, 521, 525, 532, 575, 651, 652, 653, 657, 659, 661, 662, 663, 677, 776, 781, 784, 785, 795, 806, 823, 824, 860, 872, 906, 920, 937, 940, 955, 965, 973, 981, 1015, 1018, 1021], "affinity_propag": [12, 44], "covariance_": [12, 34, 80, 82, 454, 455, 456, 457, 458, 459, 460, 461, 534, 535, 960, 1015], "n_label": [12, 92, 233, 384, 472, 508, 698, 705, 710, 723, 724, 738, 740, 774, 775, 801, 966, 1014, 1016], "lai": [12, 304, 972], "canva": [12, 16], "manifold": [12, 39, 52, 67, 221, 222, 223, 224, 277, 309, 313, 314, 319, 360, 364, 384, 396, 401, 403, 487, 510, 515, 529, 534, 551, 832, 844, 853, 876, 906, 969, 1002, 1003, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1024], "dens": [12, 55, 164, 175, 216, 313, 314, 321, 357, 380, 384, 396, 401, 403, 405, 428, 431, 432, 434, 449, 452, 481, 508, 509, 519, 520, 529, 551, 570, 571, 592, 593, 614, 637, 642, 643, 644, 651, 653, 657, 658, 661, 662, 663, 672, 673, 674, 677, 678, 744, 745, 751, 763, 774, 840, 841, 848, 855, 856, 858, 860, 861, 863, 872, 873, 874, 875, 876, 883, 884, 885, 886, 888, 889, 921, 937, 940, 956, 959, 962, 963, 966, 967, 969, 972, 976, 978, 979, 980, 981, 982, 1008, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "eigen_solv": [12, 44, 46, 66, 218, 219, 401, 437, 447, 520, 673, 674, 676, 678, 680, 963, 1009, 1018, 1021, 1022, 1023], "arpack": [12, 19, 44, 46, 66, 219, 401, 436, 437, 438, 447, 520, 526, 529, 673, 674, 676, 678, 680, 963, 1014, 1015, 1020], "don": [12, 54, 70, 120, 167, 219, 233, 257, 277, 320, 326, 330, 337, 342, 343, 357, 365, 371, 373, 375, 377, 379, 382, 383, 397, 404, 631, 637, 811, 891, 892, 893, 894, 930, 955, 962, 965, 967, 970, 972, 980, 989, 1001, 1012, 1017, 1024], "control": [12, 16, 61, 99, 100, 135, 154, 156, 181, 198, 205, 229, 230, 258, 260, 279, 310, 312, 347, 349, 350, 357, 358, 364, 367, 371, 373, 376, 379, 382, 384, 387, 390, 395, 396, 399, 400, 401, 402, 405, 406, 419, 425, 434, 439, 456, 457, 463, 516, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 578, 579, 581, 599, 604, 610, 612, 615, 617, 619, 624, 626, 627, 631, 632, 634, 635, 636, 637, 639, 640, 641, 657, 659, 661, 662, 667, 668, 672, 677, 686, 694, 779, 780, 781, 783, 784, 785, 786, 787, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 809, 810, 813, 814, 817, 840, 841, 862, 864, 875, 876, 883, 884, 885, 886, 888, 889, 891, 892, 893, 894, 897, 932, 953, 955, 962, 963, 965, 966, 967, 969, 972, 973, 976, 978, 980, 981, 982, 986, 987, 988, 999, 1003, 1008, 1010, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "neighbor": [12, 31, 39, 44, 47, 60, 127, 130, 137, 161, 162, 219, 220, 222, 226, 234, 235, 281, 282, 283, 284, 286, 287, 288, 290, 291, 311, 313, 314, 342, 360, 363, 368, 380, 384, 387, 396, 402, 403, 404, 407, 410, 418, 426, 429, 430, 433, 435, 437, 442, 443, 446, 448, 481, 487, 489, 548, 555, 587, 592, 593, 612, 613, 616, 673, 674, 675, 676, 677, 678, 681, 765, 781, 809, 843, 844, 863, 879, 887, 940, 967, 972, 987, 988, 995, 1000, 1002, 1003, 1008, 1010, 1011, 1012, 1013, 1014, 1015], "node": [12, 41, 119, 123, 181, 309, 347, 351, 379, 380, 396, 398, 401, 403, 426, 427, 430, 448, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 635, 639, 641, 667, 668, 677, 823, 824, 891, 892, 893, 894, 895, 897, 925, 934, 969, 971, 972, 973, 982, 1011, 1012, 1013, 1014, 1015, 1017, 1020, 1021, 1022, 1023], "plane": [12, 209, 231, 283, 328, 331, 333, 334, 339, 368, 437, 447, 960, 962, 981, 999], "node_position_model": 12, "locallylinearembed": [12, 218, 219, 220, 313, 673, 675, 677, 963, 969, 1013, 1014, 1022, 1023, 1024], "n_neighbor": [12, 44, 62, 67, 130, 161, 218, 219, 220, 222, 226, 235, 277, 279, 280, 283, 284, 285, 286, 289, 304, 309, 311, 342, 403, 437, 587, 592, 593, 613, 673, 674, 676, 678, 681, 825, 826, 827, 829, 831, 832, 836, 878, 879, 956, 963, 969, 972, 979, 1015, 1022, 1024], "output": [12, 14, 16, 25, 27, 37, 53, 59, 98, 108, 113, 118, 119, 129, 133, 137, 138, 149, 157, 161, 162, 164, 167, 193, 225, 239, 240, 245, 251, 255, 257, 260, 264, 266, 267, 277, 300, 303, 305, 306, 309, 312, 313, 343, 344, 346, 351, 352, 364, 365, 366, 368, 371, 373, 377, 379, 382, 383, 384, 394, 395, 396, 397, 399, 400, 403, 404, 405, 412, 416, 418, 422, 426, 427, 428, 430, 431, 432, 434, 435, 437, 444, 445, 447, 448, 449, 450, 451, 452, 453, 467, 468, 469, 470, 473, 476, 477, 478, 479, 480, 481, 482, 488, 490, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 596, 612, 613, 614, 615, 616, 617, 618, 620, 623, 624, 625, 626, 627, 631, 632, 635, 637, 638, 639, 642, 643, 645, 646, 647, 648, 651, 652, 653, 656, 658, 659, 661, 663, 664, 666, 667, 668, 669, 673, 674, 675, 677, 679, 681, 684, 685, 698, 699, 706, 707, 708, 710, 712, 719, 726, 729, 730, 732, 734, 735, 736, 737, 738, 740, 745, 751, 756, 769, 772, 779, 780, 783, 784, 785, 786, 787, 793, 795, 796, 797, 798, 799, 800, 801, 804, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 826, 827, 828, 832, 833, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 871, 872, 875, 876, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 904, 906, 909, 920, 921, 933, 953, 955, 956, 958, 960, 962, 963, 966, 967, 968, 969, 970, 973, 976, 981, 988, 992, 993, 995, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "edg": [12, 26, 46, 66, 98, 119, 221, 264, 379, 384, 393, 396, 398, 438, 546, 547, 570, 571, 573, 574, 576, 779, 820, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 848, 896, 976, 979, 990, 1014, 1016, 1019, 1022], "displai": [12, 25, 27, 34, 37, 46, 48, 60, 71, 81, 82, 85, 86, 89, 95, 120, 125, 126, 129, 164, 167, 168, 182, 184, 201, 215, 225, 226, 235, 240, 246, 254, 258, 259, 264, 271, 287, 305, 310, 311, 333, 348, 357, 371, 374, 378, 380, 387, 397, 401, 404, 405, 423, 449, 452, 453, 481, 526, 549, 615, 616, 617, 643, 672, 682, 683, 685, 686, 687, 698, 703, 766, 773, 781, 787, 795, 809, 843, 844, 856, 858, 863, 881, 888, 895, 896, 897, 911, 932, 953, 966, 970, 986, 1003, 1017, 1019, 1020, 1022, 1023, 1024], "strength": [12, 129, 156, 197, 201, 258, 309, 357, 399, 403, 431, 552, 553, 628, 633, 634, 637, 643, 644, 654, 657, 658, 659, 660, 661, 663, 665, 672, 767, 840, 841, 883, 884, 888, 889, 955, 962, 969, 972, 980, 981], "plan": [12, 365, 369, 371, 372, 385, 976, 1011], "fair": [12, 403, 675, 679, 812, 967, 990], "crucial": [12, 166, 252, 357, 370, 371, 385, 396, 406, 981], "challeng": [12, 129, 149, 168, 176, 215, 226, 359, 366, 367, 396, 398, 447, 457, 966, 972, 990, 992], "overlap": [12, 37, 55, 110, 123, 145, 221, 244, 343, 369, 393, 396, 400, 403, 404, 572, 774, 775, 782, 786, 788, 789, 790, 791, 799, 963, 976, 1014], "heurist": [12, 14, 121, 342, 358, 396, 405, 434, 437, 446, 447, 493, 494, 522, 524, 531, 661, 662, 663, 676, 680, 784, 785, 885, 886, 887, 888, 889, 908, 963, 964, 969, 980, 982, 990, 999, 1008, 1009, 1013, 1017, 1020, 1021], "direct": [12, 85, 86, 90, 95, 97, 101, 104, 146, 203, 242, 248, 254, 286, 296, 304, 329, 334, 369, 371, 372, 375, 379, 385, 387, 396, 399, 401, 404, 405, 437, 447, 456, 457, 463, 519, 526, 534, 573, 574, 576, 587, 626, 673, 832, 960, 962, 967, 969, 971, 987, 1000, 1008, 1011], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 58, 61, 82, 89, 95, 98, 153, 162, 188, 209, 213, 234, 281, 283, 286, 287, 291, 296, 328, 329, 333, 334, 335, 339, 360, 363, 368, 380, 384, 396, 402, 403, 407, 410, 418, 429, 431, 433, 435, 437, 442, 446, 447, 481, 487, 489, 592, 593, 612, 613, 615, 616, 620, 673, 674, 676, 677, 681, 774, 775, 781, 809, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 843, 844, 848, 863, 940, 963, 972, 981, 987, 988, 995, 1003, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020], "along": [12, 13, 56, 59, 66, 86, 116, 122, 184, 197, 231, 261, 306, 309, 343, 344, 353, 375, 377, 379, 380, 384, 387, 390, 393, 401, 403, 404, 405, 406, 408, 518, 535, 572, 596, 597, 615, 631, 632, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 661, 663, 666, 667, 668, 669, 670, 671, 763, 764, 774, 781, 795, 852, 853, 856, 857, 860, 861, 862, 863, 868, 869, 870, 872, 873, 874, 899, 922, 941, 947, 955, 962, 969, 976, 979, 990, 1008, 1013, 1014, 1016, 1020, 1021], "linecollect": [12, 221, 229, 617], "facecolor": [12, 16, 26, 34, 45, 60, 95, 102, 112, 138, 157, 218, 233, 257, 284, 301, 327, 330, 333, 334, 336], "partial_correl": 12, "precision_": [12, 82, 454, 455, 456, 457, 458, 459, 460, 461], "sqrt": [12, 80, 81, 82, 98, 101, 105, 114, 135, 176, 178, 221, 223, 237, 242, 243, 244, 247, 248, 257, 334, 396, 403, 404, 406, 448, 454, 455, 456, 457, 458, 459, 460, 461, 523, 525, 532, 542, 543, 544, 545, 549, 550, 604, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 684, 715, 747, 748, 753, 863, 876, 891, 892, 893, 894, 958, 962, 963, 966, 968, 978, 1022], "diag": [12, 82, 157, 244, 247, 401, 406, 517, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 779, 780, 962, 1023], "newaxi": [12, 13, 19, 24, 42, 82, 105, 111, 150, 178, 187, 193, 198, 199, 200, 202, 203, 214, 229, 231, 271, 282, 289, 337, 349, 350, 393, 521, 962], "ab": [12, 17, 40, 75, 99, 106, 112, 119, 129, 142, 146, 170, 184, 188, 208, 210, 213, 215, 221, 257, 299, 327, 339, 396, 523, 525, 532, 612, 730, 823, 824, 858, 966], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 60, 61, 102], "start_idx": [12, 221], "end_idx": [12, 221], "sequenc": [12, 118, 185, 221, 373, 384, 397, 400, 401, 403, 404, 488, 497, 546, 547, 554, 555, 566, 567, 573, 574, 576, 631, 781, 784, 792, 809, 867, 923, 924, 929, 937, 940, 986, 1008, 1011, 1013, 1014], "line0": [12, 221], "linen": [12, 221], "x0": [12, 34, 189, 206, 221, 299, 326, 384, 416, 449, 552, 553, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 846, 847, 848, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864], "y0": [12, 221], "y1": [12, 91, 112, 221, 494, 701, 748, 967, 968], "xm": [12, 221], "ym": [12, 221], "segment": [12, 36, 47, 68, 164, 221, 229, 366, 379, 396, 404, 437, 447, 493, 494, 676, 839, 966, 986, 990, 1016, 1018, 1020], "stop": [12, 17, 44, 62, 108, 133, 154, 156, 164, 168, 175, 199, 216, 310, 371, 373, 379, 380, 384, 396, 401, 403, 405, 425, 426, 428, 430, 432, 434, 437, 439, 447, 448, 456, 457, 463, 467, 468, 469, 481, 489, 493, 494, 500, 505, 517, 521, 522, 523, 524, 525, 528, 530, 531, 532, 538, 539, 542, 543, 544, 545, 546, 547, 549, 550, 556, 573, 574, 576, 587, 602, 612, 629, 630, 631, 633, 634, 637, 641, 643, 644, 651, 652, 653, 654, 656, 661, 662, 663, 665, 676, 677, 680, 699, 779, 780, 809, 840, 841, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 925, 940, 955, 962, 970, 971, 981, 982, 987, 988, 990, 1003, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024], "lc": [12, 221, 229], "zorder": [12, 34, 58, 97, 126, 138, 150, 158, 187, 195, 219, 221, 229, 232, 242, 310, 333, 334], "hot_r": [12, 299], "norm": [12, 13, 14, 17, 34, 40, 54, 98, 101, 152, 155, 176, 181, 183, 188, 221, 242, 243, 244, 246, 248, 254, 258, 282, 299, 329, 343, 377, 380, 384, 396, 404, 405, 427, 428, 432, 444, 445, 449, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 474, 516, 519, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 574, 575, 576, 582, 628, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 657, 659, 661, 663, 666, 669, 670, 671, 675, 677, 678, 679, 754, 820, 855, 870, 883, 885, 888, 948, 949, 959, 962, 964, 966, 976, 980, 1011, 1013, 1015, 1019], "set_arrai": [12, 221, 229], "set_linewidth": [12, 221, 229], "add_collect": [12, 221, 229], "index": [12, 14, 17, 30, 37, 38, 39, 40, 41, 49, 50, 58, 71, 72, 115, 116, 120, 143, 146, 154, 161, 166, 167, 168, 169, 197, 215, 236, 239, 243, 244, 248, 252, 255, 256, 257, 258, 260, 268, 269, 277, 299, 304, 305, 306, 313, 317, 318, 343, 344, 366, 368, 369, 371, 373, 375, 380, 382, 384, 393, 397, 400, 401, 403, 404, 411, 428, 432, 433, 434, 435, 436, 438, 439, 442, 444, 445, 449, 452, 488, 494, 542, 543, 544, 545, 549, 550, 551, 572, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 602, 617, 618, 625, 682, 689, 690, 697, 701, 703, 715, 722, 741, 763, 764, 770, 772, 776, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 809, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 856, 891, 892, 893, 894, 924, 937, 940, 945, 946, 966, 968, 969, 970, 980, 982, 986, 999, 1001, 1008, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "dx": [12, 13, 511, 684], "dy": [12, 684], "this_dx": 12, "argmin": [12, 121, 256, 373, 398, 516, 522, 530, 531, 670, 763, 764, 982], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 62, 102, 226, 242, 293, 301], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 56, 60, 67, 90, 91, 92, 102, 112, 118, 125, 127, 128, 130, 131, 138, 141, 150, 151, 153, 157, 168, 180, 189, 199, 206, 209, 210, 211, 230, 231, 232, 233, 242, 245, 257, 260, 271, 280, 283, 284, 285, 288, 293, 301, 302, 304, 322, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 339, 348, 349, 350, 616], "ptp": 12, "03": [12, 28, 52, 76, 80, 83, 85, 95, 133, 154, 159, 167, 178, 215, 224, 230, 240, 242, 248, 258, 273, 291, 307, 318, 343, 368, 404, 732, 781, 962, 966], "291": [12, 15, 366, 368], "plot_stock_market": [12, 15], "parallel": [13, 108, 114, 118, 133, 164, 168, 199, 258, 310, 311, 313, 334, 351, 356, 363, 371, 372, 374, 375, 382, 384, 397, 405, 407, 408, 422, 429, 431, 433, 434, 435, 437, 442, 443, 446, 449, 452, 457, 480, 516, 518, 519, 520, 522, 524, 526, 527, 528, 530, 531, 533, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 574, 579, 587, 595, 617, 619, 624, 643, 673, 674, 675, 676, 677, 678, 679, 758, 762, 765, 781, 784, 785, 787, 792, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 842, 845, 878, 879, 934, 936, 987, 996, 1001, 1003, 1008, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1024], "acquir": [13, 117, 259, 1020], "angl": [13, 34, 98, 146, 242, 243, 244, 247, 248, 368, 401, 516, 522, 524, 527, 528, 530, 531, 533, 635, 636, 637, 638, 639, 640, 641, 648, 649, 650, 663, 667, 668, 669, 670, 671, 677, 963, 964, 988, 1003, 1008], "Such": [13, 125, 149, 154, 166, 176, 181, 186, 198, 260, 342, 384, 385, 400, 401, 403, 540, 541, 641, 956, 966, 969, 976, 982, 999, 1018, 1023], "ct": [13, 157, 239, 397, 449, 451, 452], "cellular": 13, "materi": [13, 385, 566, 873, 874, 985], "haar": 13, "wavelet": [13, 105, 401], "sparsiti": [13, 82, 164, 175, 181, 190, 212, 213, 216, 232, 343, 357, 384, 398, 401, 403, 405, 486, 487, 512, 516, 522, 523, 524, 525, 528, 530, 531, 532, 631, 637, 642, 643, 661, 663, 706, 707, 708, 852, 858, 863, 868, 959, 962, 969, 976, 995, 1000, 1010], "oper": [13, 19, 157, 164, 232, 250, 254, 264, 273, 344, 357, 358, 368, 369, 371, 374, 377, 382, 384, 385, 387, 390, 392, 400, 401, 403, 404, 405, 409, 433, 446, 453, 460, 467, 468, 469, 470, 489, 518, 519, 526, 536, 537, 551, 557, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 606, 609, 615, 620, 628, 643, 674, 678, 687, 691, 692, 693, 711, 758, 765, 766, 772, 773, 800, 809, 812, 823, 824, 846, 850, 855, 866, 867, 881, 888, 891, 922, 934, 939, 962, 969, 976, 981, 986, 990, 999, 1012, 1014, 1015, 1016, 1018, 1019, 1024], "fidel": 13, "penal": [13, 30, 82, 129, 181, 186, 190, 197, 213, 215, 304, 337, 396, 398, 401, 405, 454, 455, 456, 457, 458, 459, 460, 461, 463, 632, 637, 638, 646, 648, 661, 690, 700, 718, 770, 777, 856, 883, 890, 962, 966, 968, 970, 980, 981, 999], "account": [13, 55, 97, 104, 154, 161, 167, 215, 257, 286, 337, 339, 343, 357, 367, 371, 384, 385, 390, 396, 399, 400, 401, 403, 404, 448, 552, 553, 612, 613, 615, 617, 618, 634, 658, 664, 689, 692, 712, 713, 714, 722, 727, 740, 767, 768, 771, 772, 782, 786, 799, 857, 958, 960, 964, 966, 967, 968, 969, 976, 980, 982, 1013, 1015, 1016, 1017, 1020, 1021, 1023], "call": [13, 17, 46, 48, 50, 54, 71, 92, 115, 121, 143, 149, 153, 155, 157, 158, 166, 168, 185, 197, 198, 215, 236, 238, 239, 257, 258, 266, 271, 272, 277, 279, 304, 306, 311, 312, 342, 343, 344, 351, 357, 358, 359, 366, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 387, 394, 396, 397, 398, 399, 400, 401, 403, 404, 406, 408, 417, 425, 428, 431, 432, 434, 435, 436, 437, 438, 439, 442, 445, 447, 449, 450, 453, 454, 459, 467, 468, 469, 473, 476, 477, 480, 482, 488, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 562, 567, 568, 570, 571, 573, 574, 576, 582, 587, 592, 593, 595, 596, 599, 602, 605, 612, 613, 614, 615, 616, 617, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 674, 675, 676, 677, 678, 679, 680, 682, 684, 685, 686, 689, 716, 726, 739, 755, 758, 762, 763, 764, 765, 775, 779, 780, 781, 783, 784, 785, 786, 787, 793, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 829, 832, 834, 839, 840, 841, 842, 843, 846, 847, 848, 850, 852, 853, 855, 860, 863, 864, 867, 872, 873, 874, 875, 876, 880, 883, 884, 885, 886, 888, 889, 892, 894, 910, 914, 919, 920, 932, 933, 934, 937, 940, 950, 955, 956, 958, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 976, 978, 979, 981, 982, 986, 990, 992, 996, 999, 1000, 1001, 1003, 1005, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "algorithm": [13, 17, 18, 22, 29, 36, 37, 42, 43, 45, 46, 56, 57, 61, 62, 66, 68, 79, 85, 95, 97, 109, 110, 111, 112, 164, 173, 184, 186, 200, 213, 220, 222, 225, 229, 235, 240, 243, 244, 245, 248, 254, 257, 266, 277, 283, 284, 286, 290, 299, 301, 304, 309, 310, 311, 314, 328, 342, 343, 353, 357, 359, 364, 365, 366, 367, 368, 371, 372, 373, 374, 379, 380, 383, 384, 386, 392, 393, 395, 396, 398, 399, 400, 401, 403, 404, 406, 407, 408, 409, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 454, 459, 460, 463, 467, 468, 469, 473, 488, 496, 497, 498, 499, 500, 507, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 529, 530, 531, 532, 533, 538, 539, 540, 541, 544, 545, 548, 576, 588, 589, 595, 596, 620, 622, 624, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 689, 690, 693, 702, 704, 719, 721, 727, 758, 762, 763, 775, 777, 779, 780, 811, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 839, 844, 848, 850, 863, 867, 879, 883, 884, 885, 886, 887, 888, 889, 891, 892, 903, 919, 920, 922, 931, 935, 941, 956, 958, 961, 963, 964, 966, 968, 971, 972, 976, 979, 980, 981, 985, 986, 987, 988, 990, 992, 995, 996, 998, 1000, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "computation": [13, 78, 95, 121, 129, 149, 277, 342, 356, 372, 395, 396, 397, 400, 401, 403, 406, 523, 617, 618, 656, 747, 781, 783, 784, 785, 795, 806, 962, 963, 965, 973, 974, 978, 1000, 1003, 1012], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 68, 79, 94, 96, 97, 107, 122, 127, 132, 140, 147, 148, 159, 164, 169, 179, 181, 183, 185, 188, 195, 212, 217, 220, 224, 225, 229, 240, 244, 250, 252, 254, 273, 275, 293, 301, 303, 304, 309, 311, 322, 326, 341, 343, 345, 353, 366, 368, 384, 394, 398, 399, 401, 405, 422, 423, 428, 431, 432, 434, 473, 489, 497, 499, 500, 507, 510, 526, 534, 535, 538, 549, 566, 567, 573, 574, 575, 576, 591, 593, 595, 596, 600, 607, 610, 616, 624, 628, 643, 657, 673, 674, 675, 676, 677, 689, 722, 727, 763, 772, 781, 784, 787, 795, 797, 809, 818, 821, 825, 840, 844, 852, 853, 855, 859, 860, 861, 863, 868, 869, 870, 871, 872, 873, 874, 883, 885, 886, 888, 889, 891, 955, 960, 963, 966, 968, 969, 972, 981, 1005], "l2": [13, 30, 40, 82, 85, 164, 175, 181, 182, 188, 197, 208, 212, 213, 215, 216, 258, 277, 299, 321, 342, 343, 373, 380, 382, 396, 398, 401, 404, 426, 430, 435, 442, 509, 523, 525, 532, 543, 546, 547, 550, 574, 575, 576, 628, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 657, 661, 663, 665, 666, 671, 672, 673, 719, 734, 745, 746, 762, 763, 764, 795, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 840, 841, 855, 863, 870, 883, 884, 888, 889, 890, 892, 894, 949, 955, 959, 962, 964, 969, 970, 976, 980, 982, 999, 1001, 1010, 1012, 1013, 1015, 1017], "produc": [13, 25, 26, 44, 57, 70, 98, 122, 123, 124, 125, 181, 263, 296, 320, 353, 366, 367, 371, 373, 376, 384, 385, 396, 397, 400, 401, 403, 425, 428, 431, 437, 504, 521, 544, 548, 566, 573, 578, 579, 617, 618, 783, 784, 785, 793, 798, 801, 804, 848, 858, 885, 888, 957, 958, 962, 964, 965, 966, 969, 972, 973, 977, 979, 980, 981, 992, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 55, 60, 62, 66, 73, 80, 94, 95, 100, 107, 110, 112, 115, 117, 127, 162, 164, 168, 169, 173, 175, 198, 216, 219, 233, 244, 257, 260, 266, 267, 299, 301, 304, 311, 320, 324, 329, 333, 334, 340, 342, 353, 357, 367, 368, 373, 376, 379, 382, 384, 394, 396, 397, 398, 401, 403, 404, 406, 449, 497, 504, 518, 523, 525, 526, 532, 534, 566, 573, 574, 576, 595, 616, 623, 631, 632, 658, 661, 662, 675, 679, 709, 716, 729, 730, 732, 737, 774, 800, 815, 816, 842, 843, 885, 887, 888, 893, 894, 955, 956, 958, 960, 962, 963, 965, 972, 973, 976, 980, 981, 997, 999, 1000, 1008, 1011, 1013, 1014, 1018, 1020, 1021, 1024], "central": [13, 199, 396, 972, 986], "emmanuel": [13, 66, 1008, 1015, 1016, 1017], "gouillart": [13, 66, 1008], "nsup": 13, "ndimag": [13, 46, 47, 54, 296, 1000], "_weight": [13, 215], "orig": [13, 284], "floor_x": 13, "floor": 13, "astyp": [13, 37, 41, 44, 45, 53, 60, 62, 66, 81, 102, 119, 121, 138, 166, 187, 188, 215, 221, 232, 235, 268, 277, 306, 404, 956, 962, 1015], "hstack": [13, 33, 34, 42, 131, 142, 223, 234, 252, 332, 400, 842], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 138, 333], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 300, 332, 620], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 121, 131, 343, 823, 824], "mask": [13, 42, 66, 117, 197, 205, 255, 256, 321, 380, 384, 397, 403, 454, 459, 546, 547, 566, 570, 571, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 614, 615, 617, 618, 634, 656, 781, 784, 785, 795, 938, 956, 973, 1008, 1011, 1013, 1014, 1016, 1018], "logical_and": [13, 122], "proj_oper": 13, "coo_matrix": [13, 183, 437, 570, 571, 937, 940], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 58, 62, 103, 113, 126, 128, 141, 176, 181, 220, 221, 226, 232, 271, 289, 310, 311, 321, 322, 336, 337, 343, 349, 350, 380, 529, 689, 690, 700, 741, 765, 770, 875, 876, 878, 879, 880, 978, 992, 1008, 1019, 1020], "gaussian_filt": [13, 46, 47, 54, 1000], "sigma": [13, 46, 47, 54, 80, 103, 122, 255, 257, 393, 398, 401, 403, 599, 634, 960, 962, 964, 968, 971, 1000], "logical_xor": [13, 153, 335], "binary_eros": 13, "128": [13, 14, 197, 345, 357, 521], "proj": [13, 634], "randn": [13, 33, 34, 39, 54, 65, 66, 80, 81, 98, 103, 125, 141, 149, 153, 166, 169, 186, 191, 192, 196, 210, 211, 214, 243, 246, 247, 252, 264, 266, 267, 271, 283, 284, 306, 310, 311, 328, 334, 335, 337, 339, 373, 376, 628, 655, 657, 663, 802, 886, 889], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 54, 58, 71, 74, 78, 82, 87, 103, 118, 119, 121, 122, 134, 139, 140, 144, 146, 147, 167, 168, 175, 181, 185, 197, 199, 215, 216, 244, 245, 247, 250, 254, 257, 258, 259, 261, 263, 266, 271, 272, 273, 281, 296, 298, 300, 305, 307, 309, 311, 320, 329, 337, 360, 366, 373, 374, 380, 382, 383, 384, 390, 391, 394, 397, 398, 401, 403, 404, 405, 406, 422, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 478, 486, 487, 489, 500, 526, 552, 553, 560, 578, 579, 582, 587, 591, 594, 627, 628, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 657, 658, 659, 660, 661, 663, 664, 666, 667, 668, 669, 670, 671, 686, 687, 691, 698, 712, 725, 769, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 817, 843, 844, 848, 863, 864, 881, 883, 885, 888, 926, 965, 966, 969, 970, 974, 976, 981, 982, 986, 987, 988, 990, 992, 995, 1003, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "lassocv": [13, 129, 135, 167, 181, 186, 403, 405, 636, 637, 639, 640, 641, 648, 669, 962, 996, 1008, 1011, 1015, 1018, 1019, 1021, 1022], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 58, 82, 89, 95, 98, 153, 156, 164, 175, 188, 213, 216, 229, 234, 266, 281, 289, 296, 318, 329, 335, 406, 620, 630, 638, 648, 657, 669, 685, 692, 826, 834, 844, 858, 862, 957, 962, 966, 976, 1015, 1020], "133": [13, 56, 110], "wspace": [13, 14, 39, 44, 45, 62, 80, 95, 110, 112, 197, 215, 226, 242, 244, 245, 248, 282, 290, 318, 326], "516": [13, 15, 285, 291], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 72, 377, 395, 404, 520, 523, 529, 532, 1002, 1003, 1008, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "latentdirichletalloc": [14, 359, 376, 401, 986, 1013, 1015, 1022, 1023], "corpu": [14, 343, 344, 366, 401, 573, 574, 575, 576, 1001, 1009], "frobeniu": [14, 98, 428, 432, 444, 454, 455, 456, 457, 458, 459, 460, 461, 516, 522, 523, 525, 530, 531, 532, 962, 1015], "kullback": [14, 218, 401, 523, 525, 532, 677, 963, 1015], "leibler": [14, 218, 401, 523, 525, 532, 677, 963, 1015], "diverg": [14, 121, 218, 223, 282, 523, 525, 532, 677, 839, 963, 965, 966, 971, 973, 1015, 1016, 1021], "probabilist": [14, 27, 30, 82, 94, 107, 148, 149, 152, 156, 159, 164, 342, 384, 394, 402, 403, 422, 458, 461, 517, 519, 520, 526, 544, 573, 574, 595, 607, 628, 630, 661, 688, 725, 781, 805, 850, 885, 886, 888, 889, 959, 960, 962, 965, 966, 971, 976, 981, 982, 986, 990, 1008, 1011, 1015], "semant": [14, 342, 343, 384, 529, 1001, 1002, 1003, 1010], "runnabl": [14, 375, 376], "coupl": [14, 52, 53, 55, 219, 365, 366, 393, 394, 396, 405, 574, 889, 955, 981], "ten": [14, 19, 110, 146, 219, 248, 366, 368, 403, 505, 888, 1017], "polynomi": [14, 161, 164, 172, 174, 175, 197, 203, 216, 237, 257, 271, 311, 312, 326, 333, 336, 363, 367, 437, 476, 605, 624, 625, 626, 628, 657, 749, 758, 759, 809, 844, 853, 855, 858, 862, 883, 885, 886, 887, 888, 889, 961, 981, 988, 1003, 1020, 1021], "lda": [14, 33, 34, 94, 107, 164, 286, 353, 368, 392, 489, 521, 526, 534, 535, 832, 986, 988, 1002, 1003, 1013], "proport": [14, 26, 40, 145, 183, 197, 204, 210, 226, 260, 284, 287, 339, 357, 366, 394, 396, 398, 400, 401, 403, 404, 423, 424, 431, 454, 459, 500, 534, 535, 540, 542, 544, 545, 546, 547, 548, 549, 568, 569, 573, 576, 612, 617, 643, 644, 651, 652, 653, 659, 660, 661, 663, 681, 686, 697, 782, 783, 784, 785, 798, 801, 809, 829, 840, 841, 857, 883, 884, 885, 888, 889, 891, 893, 895, 897, 909, 955, 965, 966, 969, 972, 980, 981, 982, 1013], "tf": [14, 19, 230, 342, 343, 344, 366, 401, 506, 529, 573, 574, 575, 576, 822, 830, 855, 955, 964, 968, 976, 986, 1001], "idf": [14, 19, 230, 342, 343, 344, 366, 401, 506, 529, 573, 574, 575, 576, 822, 830, 855, 955, 964, 968, 976, 1001, 1008], "299": [14, 111, 665], "265": [14, 291, 719, 818, 822, 968], "2000": [14, 26, 40, 50, 75, 96, 103, 120, 173, 245, 248, 257, 293, 313, 343, 366, 368, 396, 397, 403, 408, 437, 447, 518, 519, 544, 674, 676, 678, 727, 772, 779, 829, 859, 871, 963, 966, 972, 978, 992, 1000], "188": [14, 154, 368, 377, 569], "minibatchnmf": [14, 359, 401, 1022, 1024], "batch_siz": [14, 19, 42, 64, 95, 98, 99, 343, 401, 434, 519, 521, 522, 523, 524, 531, 839, 840, 841, 923, 924, 932, 1009, 1016, 1019, 1021, 1022], "090": 14, "241": [14, 403, 552, 553], "964": [14, 234, 240, 275, 276], "ensta": [14, 17, 37, 48, 61, 197, 215, 219, 258, 260, 342, 343, 344], "chyi": [14, 1011, 1012, 1013, 1014, 1015], "kwei": [14, 1011, 1012, 1013, 1014, 1015], "yau": [14, 1011, 1012, 1013, 1014, 1015], "chyikwei": 14, "tfidfvector": [14, 19, 70, 258, 342, 366, 401, 404, 474, 573, 574, 575, 1008, 1010, 1016, 1017, 1018, 1021, 1022], "countvector": [14, 321, 344, 366, 376, 397, 401, 404, 474, 521, 567, 574, 575, 576, 1001, 1008, 1010, 1013, 1016, 1017, 1018, 1019, 1020, 1021], "fetch_20newsgroup": [14, 19, 70, 258, 321, 342, 343, 344, 366, 474, 1001, 1013, 1018], "n_top_word": 14, "init": [14, 42, 45, 58, 59, 61, 64, 168, 177, 218, 219, 221, 222, 223, 243, 245, 277, 343, 374, 379, 396, 401, 403, 428, 432, 434, 436, 438, 444, 445, 523, 525, 532, 533, 544, 545, 617, 618, 675, 677, 679, 832, 963, 1008, 1017, 1020, 1022, 1023], "nndsvda": [14, 401, 523, 525, 532, 1017, 1020], "plot_top_word": 14, "feature_nam": [14, 19, 106, 116, 123, 126, 146, 167, 169, 170, 206, 236, 280, 299, 309, 310, 311, 326, 342, 348, 364, 366, 376, 397, 475, 476, 477, 481, 485, 486, 487, 489, 490, 495, 567, 616, 617, 618, 895, 896, 897, 974, 982, 1024], "flatten": [14, 32, 221, 231, 255, 303, 326, 338, 377, 487, 554, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 832], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 121, 123, 169, 170, 197, 215, 309, 317, 318, 342, 343, 366, 974], "top_featur": 14, "barh": [14, 123, 161, 162, 166, 167, 169, 170, 239, 306, 342, 343, 344], "fontdict": [14, 39], "invert_yaxi": [14, 162, 344], "labels": [14, 303], "set_vis": [14, 281, 287, 299], "filter": [14, 46, 47, 203, 215, 255, 257, 279, 342, 373, 377, 380, 395, 396, 404, 433, 473, 474, 488, 573, 576, 580, 581, 582, 583, 758, 818, 912, 931, 968, 969, 998, 1001, 1018], "useless": [14, 118, 260, 377, 405, 500, 513, 643, 697, 962, 976, 1017], "earli": [14, 44, 62, 108, 110, 118, 133, 164, 175, 216, 310, 384, 403, 426, 430, 434, 448, 481, 489, 500, 505, 521, 522, 523, 524, 531, 538, 539, 544, 545, 546, 547, 556, 612, 630, 641, 651, 652, 653, 661, 663, 677, 809, 840, 841, 940, 963, 969, 976, 985, 987, 990, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023], "strip": [14, 215, 343, 357, 365, 366, 481], "header": [14, 70, 258, 342, 343, 366, 369, 404, 473, 474, 781, 784, 785, 795], "footer": [14, 70, 258, 342, 343, 366, 473, 474], "repli": [14, 342, 370, 371, 374], "common": [14, 17, 19, 98, 143, 146, 164, 165, 171, 252, 264, 311, 342, 344, 351, 357, 360, 365, 371, 373, 379, 382, 383, 386, 393, 394, 395, 396, 397, 400, 402, 405, 406, 450, 452, 481, 575, 617, 638, 657, 658, 686, 730, 737, 753, 796, 806, 809, 844, 846, 854, 855, 856, 861, 863, 868, 869, 871, 872, 873, 874, 922, 955, 956, 962, 969, 972, 976, 981, 982, 986, 987, 990, 992, 1003, 1008, 1016, 1018, 1019, 1023], "english": [14, 19, 70, 342, 343, 344, 376, 404, 573, 574, 576, 986, 987, 1001, 1021], "occur": [14, 70, 129, 197, 215, 353, 371, 373, 379, 385, 393, 396, 398, 400, 404, 493, 494, 557, 566, 573, 575, 576, 612, 656, 780, 781, 784, 785, 787, 795, 805, 806, 807, 810, 908, 966, 968, 976, 1001, 1008, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 258, 321, 342, 343, 573, 576, 1019], "min_df": [14, 19, 70, 258, 321, 342, 343, 404, 573, 576, 1008, 1010, 1019], "max_featur": [14, 31, 114, 124, 234, 254, 269, 311, 403, 405, 540, 541, 542, 543, 544, 545, 548, 549, 550, 573, 576, 582, 891, 892, 893, 894, 955, 962, 1008, 1010, 1011, 1015, 1016, 1019, 1022], "stop_word": [14, 19, 342, 343, 404, 573, 574, 576], "tfidf": [14, 70, 321, 404, 576, 1001], "tf_vector": 14, "beta_loss": [14, 523, 525, 532, 1015], "alpha_w": [14, 401, 523, 525, 532, 1021], "00005": 14, "alpha_h": [14, 401, 523, 525, 532, 1021], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 167, 169, 312, 342, 343, 344, 366, 373, 384, 397, 404, 412, 416, 418, 427, 428, 430, 432, 434, 449, 452, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 551, 552, 553, 554, 555, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 673, 674, 677, 827, 832, 835, 839, 842, 843, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 976, 1021, 1022, 1023, 1024], "solver": [14, 30, 33, 34, 46, 66, 164, 175, 186, 188, 189, 190, 197, 199, 212, 213, 215, 216, 293, 294, 295, 296, 306, 342, 377, 382, 384, 387, 392, 396, 408, 437, 447, 456, 457, 463, 487, 518, 520, 525, 526, 529, 532, 534, 631, 632, 633, 637, 638, 643, 644, 645, 646, 647, 648, 651, 653, 654, 655, 657, 659, 661, 665, 666, 669, 672, 673, 674, 676, 678, 680, 772, 795, 809, 814, 817, 840, 841, 885, 886, 887, 888, 889, 960, 963, 966, 970, 980, 981, 986, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "mu": [14, 80, 81, 257, 401, 409, 458, 460, 461, 464, 465, 466, 525, 532, 960, 962, 1015, 1018], "mbnmf": 14, "learning_method": [14, 376, 521], "learning_offset": [14, 521], "tf_feature_nam": 14, "558": [14, 15], "plot_topics_extraction_with_nmf_lda": [14, 15], "execut": [15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 133, 139, 147, 159, 161, 163, 171, 174, 181, 186, 216, 224, 232, 240, 249, 262, 273, 276, 291, 297, 307, 315, 323, 340, 345, 352, 358, 371, 377, 390, 396, 401, 407, 428, 446, 781, 787, 795, 804, 805, 806, 807, 810, 828, 932, 933, 976, 979, 993, 1001, 1010, 1013, 1016], "auto_examples_appl": 15, "00": [15, 22, 28, 32, 35, 68, 76, 80, 83, 87, 93, 98, 107, 133, 139, 147, 154, 159, 163, 167, 168, 171, 174, 188, 215, 216, 224, 230, 240, 249, 255, 258, 273, 276, 291, 296, 297, 307, 315, 317, 318, 323, 340, 343, 345, 352, 365, 368, 377, 396, 403, 404, 698, 700, 772, 781, 795, 807, 892, 962, 966, 976, 978, 980, 1000], "real": [15, 31, 55, 57, 70, 74, 78, 80, 108, 133, 152, 167, 222, 235, 251, 263, 271, 281, 300, 301, 344, 357, 360, 364, 365, 368, 375, 377, 380, 382, 383, 384, 393, 394, 396, 398, 400, 401, 403, 404, 454, 474, 475, 478, 479, 480, 481, 482, 485, 486, 489, 495, 505, 536, 537, 538, 540, 541, 542, 543, 544, 545, 549, 550, 577, 579, 580, 581, 582, 583, 584, 585, 684, 689, 708, 712, 736, 739, 741, 769, 777, 778, 808, 809, 840, 841, 885, 886, 887, 888, 889, 891, 892, 894, 956, 957, 958, 963, 966, 968, 970, 971, 972, 982, 985, 1003, 1008, 1021], "svm_gui": [15, 16, 999], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 81, 168, 321, 342, 343, 344, 366, 377, 395, 396, 398, 401, 774, 775, 779, 813, 895, 966, 967, 973, 986, 1001], "frontend": [16, 377], "mainli": [16, 27, 53, 113, 149, 266, 357, 373, 394, 596, 968, 973], "intend": [16, 57, 58, 99, 198, 342, 371, 372, 373, 378, 382, 400, 453, 567, 658, 684, 852, 853, 863, 881, 961, 962, 966, 970, 977], "didact": [16, 371, 987], "click": [16, 228, 237, 258, 310, 371, 379, 990, 992, 994], "region": [16, 25, 36, 47, 49, 53, 56, 66, 68, 130, 156, 164, 167, 197, 215, 226, 230, 231, 248, 302, 329, 368, 378, 384, 396, 403, 406, 433, 435, 441, 447, 572, 963, 966, 969, 972, 976, 980, 982, 1000], "induc": [16, 26, 56, 167, 181, 188, 190, 195, 198, 212, 232, 344, 393, 395, 401, 403, 406, 431, 434, 524, 528, 538, 542, 543, 544, 545, 549, 550, 551, 628, 710, 740, 856, 891, 892, 893, 894, 959, 966, 980, 999], "mous": [16, 365], "button": [16, 371, 379, 999], "prettenho": 16, "tkagg": 16, "backend": [16, 358, 384, 453, 881, 932, 934, 936, 966, 1011, 1016, 1017, 1018, 1019], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 34, 312, 360, 374, 375, 380, 384, 408, 422, 426, 430, 432, 434, 435, 442, 444, 463, 511, 518, 521, 522, 524, 531, 538, 539, 540, 541, 554, 555, 564, 565, 567, 612, 615, 618, 623, 629, 630, 635, 636, 639, 640, 641, 643, 649, 650, 656, 677, 725, 740, 752, 762, 763, 764, 784, 785, 818, 819, 820, 822, 830, 842, 856, 885, 886, 887, 888, 889, 899, 914, 915, 917, 955, 956, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "contourset": 16, "tkinter": 16, "tk": 16, "dump_svmlight_fil": [16, 1008, 1009, 1013, 1023], "y_min": [16, 31, 34, 58, 90, 112, 118, 127, 138, 151, 231, 293, 301, 322, 333, 334, 620, 622], "y_max": [16, 31, 34, 58, 90, 112, 118, 127, 138, 151, 215, 231, 293, 301, 322, 333, 334, 620, 622], "x_min": [16, 31, 34, 52, 58, 90, 112, 118, 122, 127, 138, 151, 186, 231, 293, 301, 322, 333, 334], "x_max": [16, 31, 34, 52, 58, 90, 112, 118, 127, 138, 151, 231, 293, 301, 322, 333, 334], "notifi": [16, 557, 558, 559, 989, 1006, 1018], "regist": [16, 34, 181, 342, 377, 934, 936], "surfac": [16, 108, 133, 164, 189, 206, 325, 326, 346, 352, 403, 489, 538, 542, 549, 616, 748, 891, 897, 960, 965, 980, 981, 982], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 173, 336, 437, 520, 624, 625, 628, 759, 761, 885, 886, 887, 888, 889, 964, 981], "kernel_map": 16, "hasattr": [16, 44, 56, 62, 82, 118, 215, 230, 293, 301, 342, 384, 927, 1018], "decision_surfac": 16, "delta": [16, 399, 437], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 116, 135, 164, 250, 256, 258, 261, 273, 384, 400, 406, 487, 552, 612, 644, 650, 698, 781, 784, 785, 795, 809, 888, 955, 962, 966, 1015, 1016, 1017], "docstr": [16, 371, 373, 377, 384, 433, 446, 457, 684, 686, 910, 955, 966, 969, 970, 980, 1008, 1015, 1016, 1021, 1022], "set_xlim": [16, 31, 42, 60, 75, 80, 92, 115, 127, 162, 168, 195, 197, 202, 231, 242, 261, 263, 264, 282, 293, 299, 301, 302, 303, 304, 310, 338], "attributeerror": [16, 397, 544, 562, 927, 1000, 1017, 1018, 1020, 1024], "get_tk_widget": 16, "pack": [16, 380, 1016], "fill": [16, 34, 118, 135, 169, 252, 282, 348, 384, 397, 401, 500, 512, 523, 525, 532, 572, 615, 895, 897, 956, 969, 982], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 66, 101, 105, 113, 122, 150, 181, 207, 282, 287, 290, 310, 311, 394, 396, 397, 402, 408, 437, 450, 506, 518, 521, 600, 601, 607, 626, 743, 750, 760, 840, 841, 859, 960, 962, 964, 968, 969, 970, 979, 980, 981, 999], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 215, 371, 377, 396, 521, 631, 637, 963, 987, 989, 1008, 1013, 1014, 1016, 1021, 1022, 1023], "isinst": [16, 118, 215, 384], "lineset": 16, "support_vector": [16, 327], "place": [16, 60, 227, 236, 281, 357, 369, 371, 372, 373, 376, 378, 385, 394, 404, 406, 426, 430, 431, 467, 468, 469, 500, 566, 575, 613, 615, 616, 752, 765, 779, 945, 946, 986, 1008, 1015, 1018, 1019, 1021], "circl": [16, 60, 100, 127, 128, 138, 223, 233, 284, 287, 294, 299, 301, 319, 350, 367, 375, 379, 396, 437, 447, 499, 507, 748, 981], "dash": [16, 33, 80, 110, 121, 131, 149, 152, 154, 167, 184, 189, 192, 198, 199, 206, 209, 210, 235, 257, 267, 331, 335, 980], "bone": [16, 210, 339], "rais": [16, 198, 233, 260, 303, 312, 371, 373, 375, 376, 377, 380, 382, 384, 390, 397, 400, 408, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 494, 518, 535, 544, 552, 558, 561, 562, 573, 574, 576, 588, 602, 614, 615, 617, 620, 621, 656, 681, 683, 687, 694, 696, 697, 698, 699, 711, 713, 714, 722, 740, 762, 766, 767, 768, 771, 772, 773, 779, 780, 781, 784, 785, 787, 795, 805, 806, 807, 810, 815, 830, 832, 833, 838, 842, 847, 848, 856, 857, 861, 862, 863, 870, 886, 887, 888, 889, 898, 901, 903, 904, 906, 907, 924, 927, 950, 951, 952, 953, 966, 976, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "valueerror": [16, 233, 373, 377, 408, 453, 518, 562, 588, 602, 620, 656, 699, 815, 833, 842, 848, 862, 902, 906, 907, 951, 952, 953, 976, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 230, 357, 358, 369, 371, 375, 377, 379, 387, 404, 493, 986, 1001, 1010], "anchor": [16, 268], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 164, 175, 189, 206, 216, 233, 260, 324, 326, 329, 334, 340, 497, 616, 643, 644, 651, 653, 659, 660, 661, 662, 883, 885, 887, 888, 980, 981], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 375, 643, 644, 651, 653, 661, 662, 663, 840, 841, 883, 976], "add_opt": 16, "action": [16, 312, 342, 370, 374, 375, 387, 976, 1018], "store": [16, 32, 53, 54, 70, 72, 81, 90, 143, 157, 173, 183, 186, 219, 227, 236, 247, 262, 266, 317, 344, 351, 357, 365, 366, 371, 373, 378, 379, 380, 382, 384, 397, 399, 401, 403, 404, 406, 407, 423, 425, 429, 431, 435, 442, 454, 455, 458, 459, 460, 461, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 488, 493, 519, 520, 526, 534, 535, 540, 541, 548, 554, 555, 574, 595, 596, 612, 616, 617, 620, 623, 634, 635, 639, 645, 646, 647, 648, 651, 652, 658, 660, 661, 662, 663, 673, 674, 675, 677, 682, 683, 685, 686, 687, 765, 779, 780, 781, 787, 795, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 838, 854, 861, 863, 864, 878, 879, 880, 903, 904, 937, 940, 956, 958, 962, 969, 978, 981, 982, 986, 992, 1001, 1005, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "dest": [16, 314], "dump": [16, 17, 390, 472, 823, 824], "argv": [16, 230], "opt": [16, 369, 373], "arg": [16, 294, 372, 384, 401, 403, 410, 556, 557, 558, 559, 560, 561, 562, 563, 602, 684, 847, 962, 968, 969], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 321, 382], "classic": [17, 192, 222, 235, 242, 248, 368, 375, 398, 400, 401, 428, 432, 434, 444, 477, 485, 489, 495, 617, 618, 893, 894, 960, 962, 968, 976, 995, 1008, 1009, 1013, 1022], "graph": [17, 25, 39, 44, 46, 66, 67, 157, 218, 254, 277, 279, 320, 357, 371, 374, 384, 393, 398, 407, 426, 429, 430, 437, 438, 442, 447, 448, 456, 457, 463, 496, 570, 571, 673, 676, 677, 680, 766, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 838, 879, 963, 966, 969, 971, 979, 982, 986, 990, 997, 1000, 1008, 1015, 1016, 1018, 1021, 1023], "vertex": [17, 26, 396, 438, 1021], "en": [17, 24, 379, 385, 516, 522, 580, 621, 649, 653, 656, 670, 671, 680, 690, 825, 826, 831, 832, 833, 834, 861, 877, 891, 892, 962, 966, 981, 982], "wiki": [17, 24, 377, 379, 580, 621, 653, 656, 680, 690, 825, 826, 831, 832, 833, 834, 861, 877, 891, 892, 962, 982], "eigenvector_centr": 17, "webpag": [17, 173, 371], "pagerank": 17, "insid": [17, 19, 26, 168, 199, 257, 319, 329, 359, 365, 366, 373, 377, 396, 404, 573, 574, 576, 862, 934, 973, 990], "accord": [17, 24, 26, 37, 49, 78, 121, 146, 150, 180, 197, 215, 230, 309, 343, 353, 371, 373, 382, 383, 384, 385, 393, 396, 398, 400, 401, 403, 404, 406, 422, 435, 437, 441, 445, 447, 450, 454, 489, 501, 502, 503, 510, 515, 517, 520, 521, 523, 525, 535, 538, 539, 546, 547, 548, 551, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 626, 627, 629, 630, 634, 643, 644, 655, 665, 676, 680, 719, 763, 764, 781, 782, 783, 784, 785, 788, 789, 790, 795, 804, 818, 819, 820, 821, 822, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 846, 853, 861, 873, 875, 876, 883, 884, 885, 886, 888, 889, 960, 962, 966, 968, 969, 976, 979, 980, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "tradit": [17, 55, 197, 212, 343, 359, 394, 403, 404, 617, 679, 962, 965, 976, 990], "power_iter": 17, "martinsson": [17, 520, 526, 920], "dbpedia": 17, "content": [17, 304, 342, 344, 366, 375, 377, 390, 395, 404, 471, 488, 493, 494, 573, 574, 576, 656, 897, 975, 990, 1001, 1009, 1018], "bz2": [17, 493, 494], "bz2file": 17, "pprint": [17, 122, 258, 366, 915], "randomized_svd": [17, 380, 436, 438, 517, 526, 529, 531, 1008, 1009, 1014, 1021, 1022, 1023], "urlopen": 17, "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 122, 161, 197, 295, 311, 356, 360, 374, 383, 403, 784, 785, 967, 984, 987, 990, 993, 1003, 1016, 1021, 1022], "wait": [17, 371, 375, 384, 651, 652, 653, 661, 663, 1020], "wb": 17, "index_map": 17, "setdefault": [17, 898], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 70, 258, 279, 309, 371, 375, 377, 379, 406, 412, 427, 428, 430, 432, 434, 449, 452, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 624, 625, 626, 627, 673, 674, 677, 787, 807, 827, 832, 835, 839, 843, 849, 875, 876, 1014, 1015, 1021, 1023], "get_redirect": 17, "transit": [17, 375, 1019], "malform": [17, 1012], "1000000": [17, 521], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 55, 66, 82, 98, 105, 116, 122, 167, 168, 193, 222, 229, 294, 299, 329, 342, 366, 373, 375, 383, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 412, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 506, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 608, 612, 613, 614, 615, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 779, 780, 781, 784, 785, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 941, 947, 955, 961, 969, 970, 976, 982, 990, 996, 997, 999, 1000, 1020, 1021, 1022, 1023, 1024], "break": [17, 39, 46, 70, 81, 164, 186, 203, 244, 312, 318, 324, 340, 342, 344, 371, 373, 375, 377, 383, 396, 454, 497, 624, 758, 762, 765, 779, 856, 863, 868, 885, 888, 962, 965, 974, 976, 981, 987, 1008, 1009, 1015, 1016, 1018, 1020, 1024], "get_adjacency_matrix": 17, "resolv": [17, 370, 371, 375, 379, 385, 404, 431, 437, 447, 676, 680, 920, 956, 966, 1015, 1017, 1018, 1021], "lil_matrix": 17, "float32": [17, 121, 221, 296, 314, 358, 366, 371, 373, 392, 542, 543, 544, 545, 548, 549, 550, 551, 578, 579, 625, 626, 643, 747, 848, 891, 892, 893, 894, 901, 942, 943, 944, 982, 992, 1001, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "del": [17, 377, 1020, 1021], "convert": [17, 34, 46, 48, 66, 71, 98, 154, 170, 197, 218, 238, 243, 244, 247, 248, 290, 357, 365, 380, 382, 384, 390, 404, 425, 428, 429, 432, 434, 435, 436, 437, 444, 449, 450, 481, 519, 526, 538, 539, 542, 543, 544, 545, 548, 549, 550, 551, 557, 566, 567, 573, 574, 575, 576, 578, 579, 591, 612, 613, 614, 615, 631, 637, 643, 644, 645, 647, 651, 653, 655, 659, 661, 662, 663, 677, 684, 762, 838, 847, 848, 850, 854, 856, 857, 858, 860, 883, 891, 892, 893, 894, 901, 903, 904, 926, 951, 952, 955, 962, 963, 964, 966, 976, 977, 981, 982, 1001, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1023, 1024], "csr": [17, 344, 357, 365, 366, 380, 382, 384, 404, 407, 428, 431, 432, 434, 435, 444, 482, 493, 508, 538, 539, 542, 543, 549, 550, 551, 615, 643, 677, 684, 699, 752, 774, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 838, 846, 850, 852, 854, 855, 858, 861, 863, 866, 867, 868, 870, 873, 876, 891, 892, 893, 894, 899, 903, 904, 926, 929, 941, 942, 943, 944, 945, 946, 947, 969, 976, 980, 1008, 1009, 1014, 1016, 1017, 1023, 1024], "tocsr": 17, "convers": [17, 122, 188, 342, 353, 359, 365, 371, 373, 379, 382, 390, 404, 557, 838, 847, 855, 903, 904, 952, 963, 987, 990, 1016, 1017, 1018, 1021, 1024], "5m": 17, "ram": [17, 53, 359, 403, 875, 876, 968, 981, 1001, 1014, 1020, 1023], "5000000": 17, "strongest": [17, 190], "highest": [17, 19, 26, 82, 142, 146, 255, 257, 268, 311, 342, 371, 382, 394, 396, 400, 403, 405, 422, 540, 542, 549, 577, 580, 581, 583, 584, 585, 588, 589, 591, 620, 622, 710, 740, 776, 779, 781, 784, 785, 795, 880, 891, 922, 955, 962, 966, 967, 970, 980, 982, 1020], "centrality_scor": 17, "networkx": [17, 380], "copyright": [17, 82], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 368], "dan": [17, 1008, 1012, 1013, 1014, 1016, 1017], "schult": 17, "dschult": 17, "pieter": [17, 1014, 1015, 1022], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 105, 196, 230, 261, 344, 393, 407, 429, 508, 509, 516, 522, 527, 533, 573, 576, 670, 671, 684, 825, 826, 829, 831, 833, 834, 962, 966], "indptr": [17, 277, 351, 1016, 1024], "dangl": 17, "isclos": 17, "guess": [17, 118, 400, 403, 404, 463, 517, 523, 525, 526, 532, 966, 980], "prev_scor": 17, "dot": [17, 32, 33, 34, 44, 49, 54, 57, 62, 78, 79, 80, 82, 85, 86, 96, 97, 98, 103, 105, 113, 149, 150, 156, 157, 167, 178, 181, 189, 191, 192, 204, 231, 243, 244, 246, 247, 261, 325, 327, 357, 373, 377, 380, 384, 393, 401, 404, 518, 523, 525, 532, 575, 576, 599, 631, 632, 635, 637, 638, 639, 642, 645, 646, 647, 648, 666, 667, 668, 669, 672, 745, 747, 855, 895, 921, 964, 968, 976, 980, 981, 1000, 1017], "converg": [17, 57, 61, 78, 79, 110, 120, 122, 149, 155, 158, 190, 199, 201, 205, 213, 243, 245, 294, 295, 299, 304, 318, 359, 380, 384, 393, 396, 401, 404, 406, 408, 425, 428, 431, 432, 433, 434, 437, 439, 444, 445, 446, 447, 456, 457, 463, 467, 468, 469, 518, 520, 521, 522, 523, 524, 531, 538, 556, 595, 629, 630, 631, 632, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 653, 657, 659, 661, 663, 667, 668, 672, 673, 675, 676, 679, 680, 779, 780, 832, 840, 841, 878, 879, 885, 956, 961, 962, 963, 965, 970, 980, 1008, 1011, 1012, 1013, 1015, 1016, 1019, 1021, 1022, 1023, 1024], "l_inf": 17, "scores_max": 17, "err": [17, 85, 99], "6f": [17, 99, 262, 721, 777], "concern": [18, 36, 77, 84, 88, 94, 108, 140, 148, 160, 164, 172, 175, 217, 241, 247, 274, 278, 292, 298, 316, 324, 341, 346, 357, 373, 395, 963, 978], "modul": [18, 36, 37, 49, 53, 77, 84, 88, 94, 95, 108, 140, 148, 158, 160, 164, 165, 172, 175, 212, 217, 218, 241, 250, 274, 278, 292, 294, 295, 298, 316, 324, 341, 346, 349, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 382, 384, 386, 387, 390, 393, 394, 395, 396, 399, 403, 404, 405, 407, 429, 488, 520, 564, 565, 644, 878, 912, 955, 960, 962, 964, 966, 967, 970, 972, 973, 976, 978, 980, 982, 983, 990, 995, 996, 1001, 1009, 1010, 1011, 1013, 1014, 1018, 1020, 1022], "demo": [18, 22, 36, 68, 125, 164, 181, 203, 247, 258, 266, 304, 342, 343, 373, 393, 396, 404, 425, 426, 429, 431, 432, 433, 435, 436, 438, 440, 443, 487, 496, 497, 498, 526, 689, 690, 702, 704, 721, 775, 777, 844, 863], "spectral": [18, 22, 36, 44, 46, 49, 55, 68, 164, 219, 220, 371, 404, 434, 436, 437, 438, 447, 454, 455, 456, 457, 458, 459, 460, 461, 473, 496, 498, 576, 673, 674, 675, 676, 677, 680, 704, 777, 969, 979, 1002, 1003, 1008, 1009], "twenti": [19, 230, 368, 393, 396, 1001], "comp": [19, 85, 86, 98, 106, 296, 321, 342, 343, 344, 366, 1001], "window": [19, 321, 366, 371, 373, 374, 404, 986, 1008, 1011, 1015, 1019, 1021, 1022], "misc": [19, 53, 98, 258, 321, 342, 343, 344, 366, 1000], "categori": [19, 44, 62, 70, 71, 119, 129, 167, 168, 197, 205, 212, 235, 258, 294, 295, 301, 305, 306, 311, 314, 321, 342, 343, 344, 365, 366, 380, 395, 396, 397, 403, 404, 406, 473, 481, 482, 488, 546, 547, 633, 643, 644, 654, 665, 727, 742, 743, 819, 856, 857, 864, 956, 962, 963, 964, 968, 974, 992, 1001, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "noth": [19, 70, 342, 343, 376, 527, 573, 574, 576, 699, 846, 855, 904, 976], "frequenc": [19, 27, 149, 168, 181, 191, 197, 230, 310, 311, 342, 343, 344, 366, 382, 394, 400, 401, 403, 404, 405, 536, 542, 544, 545, 546, 549, 573, 574, 575, 576, 589, 643, 644, 649, 651, 653, 659, 660, 661, 670, 671, 812, 847, 856, 857, 883, 885, 888, 891, 893, 909, 962, 963, 968, 976, 980, 982, 1010, 1012, 1013, 1019], "dhillon": [19, 393, 436, 438, 496], "cut": [19, 43, 46, 65, 66, 220, 375, 382, 393, 396, 431, 437, 438, 447, 573, 576, 676, 680, 976], "minibatchkmean": [19, 36, 44, 50, 61, 68, 164, 343, 359, 396, 401, 425, 427, 432, 497, 763, 1009, 1014, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024], "coclust": [19, 393, 436, 498], "4415": 19, "3015": 19, "talk": [19, 70, 258, 342, 343, 344, 360, 366, 384, 390, 990, 993, 1001], "polit": [19, 342, 366, 370, 962, 967], "mideast": [19, 366], "cosmo": 19, "angmar": 19, "alfalfa": 19, "alphalpha": 19, "prolin": [19, 304, 368], "benson": 19, "1948": 19, "4325": 19, "gun": [19, 366], "sci": [19, 70, 342, 343, 344, 366, 382, 674, 678, 854, 963, 976, 1001], "med": [19, 70, 266, 366, 976, 1001], "geb": 19, "gordon": [19, 245, 1014, 1018, 1020, 1022], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1259": 19, "3534": 19, "soc": [19, 366, 1001], "religion": [19, 258, 342, 343, 344, 366, 967, 1001], "alt": [19, 258, 321, 342, 343, 344, 366, 379, 1001], "atheism": [19, 258, 321, 342, 343, 344, 366, 1001], "god": [19, 342, 343, 1001], "jesu": [19, 342, 343], "kent": 19, "belief": [19, 257, 839, 971], "christ": 19, "faith": [19, 155, 334], "moral": [19, 71, 342, 643, 1016, 1020, 1021], "775": 19, "1623": 19, "pc": [19, 321, 344, 366], "hardwar": [19, 321, 344, 357, 358, 366, 369, 984, 986, 1022, 1023], "scsi": 19, "nada": 19, "vga": 19, "esdi": 19, "isa": 19, "kth": [19, 802], "s3": [19, 96, 146, 185, 186, 368, 1000], "vlb": 19, "bmug": 19, "2180": 19, "2802": 19, "mac": [19, 305, 321, 366, 371, 693, 966], "electron": [19, 366, 368, 523, 525, 532, 612], "voltag": 19, "ship": [19, 129, 162, 348, 358, 369, 387, 404, 962, 1008, 1017], "circuit": [19, 963], "mpce": 19, "kolstad": 19, "spectralcoclust": [19, 21, 393, 436, 1010, 1015, 1019], "v_measure_scor": [19, 37, 38, 49, 58, 343, 396, 702, 720, 721, 741, 966, 1017], "number_norm": 19, "token": [19, 344, 357, 366, 375, 404, 521, 573, 574, 575, 576, 1008, 1016, 1020], "placehold": [19, 375, 612, 613, 614, 615, 796, 797, 800, 801, 956], "begin": [19, 149, 252, 259, 275, 312, 342, 353, 371, 376, 377, 384, 393, 396, 403, 538, 539, 544, 546, 547, 651, 652, 661, 662, 663, 955, 962, 966, 976, 978, 980, 1016, 1022, 1023], "By": [19, 45, 95, 125, 126, 176, 266, 299, 309, 342, 358, 371, 377, 378, 384, 396, 397, 399, 400, 401, 402, 403, 405, 423, 426, 430, 431, 435, 449, 452, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 509, 511, 534, 535, 542, 543, 544, 545, 549, 550, 570, 571, 573, 574, 576, 591, 594, 617, 618, 656, 658, 660, 662, 675, 677, 679, 682, 685, 687, 688, 703, 713, 714, 718, 722, 767, 768, 771, 776, 778, 784, 785, 829, 843, 844, 856, 857, 859, 861, 871, 873, 886, 887, 891, 892, 893, 894, 903, 904, 934, 955, 956, 958, 962, 966, 973, 976, 978, 982, 992, 996, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1022], "isdigit": [19, 404], "numbernormalizingvector": 19, "build_token": [19, 404, 573, 574, 576], "super": [19, 25, 27, 373, 404, 1016], "forsal": [19, 344, 366], "rec": [19, 344, 366, 626], "auto": [19, 25, 27, 33, 44, 45, 48, 57, 58, 60, 92, 95, 142, 143, 153, 173, 180, 218, 219, 220, 221, 223, 231, 235, 237, 254, 256, 264, 277, 280, 285, 301, 309, 310, 311, 312, 313, 314, 325, 326, 327, 332, 335, 336, 344, 365, 366, 371, 373, 403, 405, 406, 407, 426, 429, 430, 431, 432, 434, 435, 437, 442, 444, 447, 481, 493, 494, 520, 526, 529, 534, 542, 543, 546, 547, 548, 549, 550, 552, 553, 578, 579, 582, 587, 592, 593, 614, 616, 617, 618, 620, 624, 631, 632, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 657, 658, 659, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 685, 687, 719, 725, 784, 785, 811, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 840, 841, 856, 857, 864, 875, 876, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 919, 920, 932, 935, 957, 960, 962, 963, 966, 967, 969, 976, 981, 986, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "motorcycl": [19, 366], "sport": [19, 366], "basebal": [19, 366], "hockei": [19, 366], "crypt": [19, 366], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 95, 313, 343, 371, 384, 396, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 444, 445, 446, 447, 448, 496, 498, 1000, 1008, 1012, 1014, 1016, 1017, 1019, 1022], "svd_method": [19, 436, 438, 517, 1011], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 57, 58, 61, 68, 164, 245, 248, 302, 313, 343, 380, 396, 425, 428, 433, 434, 437, 447, 497, 774, 775, 779, 780, 848, 969, 976, 987, 1000, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "20000": [19, 97], "n_init": [19, 42, 43, 44, 45, 48, 50, 57, 58, 60, 61, 64, 95, 218, 219, 220, 221, 310, 313, 343, 396, 428, 432, 434, 436, 437, 438, 444, 447, 675, 679, 779, 780, 1000, 1008, 1016, 1022, 1023], "y_coclust": 19, "row_labels_": [19, 20, 21, 393, 436, 438], "y_kmean": 19, "fit_predict": [19, 56, 57, 60, 226, 284, 373, 384, 396, 414, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 454, 548, 662, 779, 780, 829, 835, 843, 887, 972, 1013, 1016, 1017, 1021, 1023], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 55, 59, 63, 64, 70, 130, 218, 235, 338, 496, 498], "get_indic": [19, 411, 436, 438], "float_info": 19, "row_compl": 19, "logical_not": [19, 64, 105, 200], "rows_": [19, 393, 411, 436, 438], "col_compl": 19, "columns_": [19, 393, 411, 436, 438], "ident": [19, 64, 121, 192, 197, 215, 226, 230, 322, 342, 366, 373, 384, 393, 396, 397, 398, 400, 406, 409, 423, 424, 437, 449, 450, 458, 460, 461, 464, 465, 466, 473, 488, 536, 544, 545, 549, 550, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 628, 664, 665, 684, 689, 690, 720, 769, 777, 783, 786, 796, 797, 798, 800, 801, 825, 826, 832, 840, 841, 847, 848, 860, 872, 891, 892, 959, 960, 963, 966, 969, 970, 981, 1012, 1016, 1017, 1018, 1022], "most_common": 19, "counter": [19, 264, 396, 661, 662, 663, 1021], "itemgett": 19, "revers": [19, 75, 146, 202, 257, 519, 526, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 596, 773, 843, 966, 1008, 1009, 1018, 1020, 1024], "best_idx": [19, 256], "get_shap": [19, 411, 436, 438], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 58], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "534": [19, 22, 146, 167], "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 393, 436, 438, 496, 498], "make_checkerboard": [20, 496, 1010], "rearrang": [20, 21, 393], "outer": [20, 100, 262, 319, 436, 499, 625, 635, 636, 639, 958, 1009], "product": [20, 71, 95, 130, 149, 154, 168, 353, 357, 373, 374, 377, 380, 390, 393, 401, 403, 436, 523, 525, 532, 567, 574, 575, 576, 598, 599, 618, 625, 649, 650, 670, 671, 745, 747, 759, 761, 855, 858, 875, 876, 921, 955, 958, 962, 964, 976, 978, 980, 981, 986, 990, 1016], "consensu": [20, 21, 37, 370, 371, 385, 393, 396, 634, 656, 663, 664, 704, 966], "kemaleren": [20, 21], "spectralbiclust": [20, 393, 438, 1010, 1014, 1015, 1019], "consensus_scor": [20, 21, 393, 1010], "matshow": [20, 21, 66, 117, 144, 295, 487], "row_idx": [20, 21, 197], "permut": [20, 21, 37, 81, 117, 123, 138, 164, 165, 171, 213, 250, 273, 306, 386, 391, 396, 403, 449, 481, 485, 489, 544, 545, 549, 550, 612, 615, 619, 664, 689, 690, 702, 720, 721, 739, 741, 777, 798, 800, 808, 809, 843, 857, 888, 891, 892, 920, 935, 937, 940, 966, 980, 996, 999, 1003, 1008, 1014, 1021, 1023], "col_idx": [20, 21], "biclusters_": [20, 21, 411, 436, 438], "1f": [20, 30, 50, 53, 98, 177, 197, 230, 242, 244, 264, 309, 343, 344], "fit_data": [20, 21], "column_labels_": [20, 21, 393, 436, 438], "548": [20, 22], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 360, 404, 411, 434, 436, 438, 473, 496, 498, 576, 704, 777, 966, 1002, 1003, 1010, 1014, 1015], "make_biclust": [21, 498, 1010], "implant": 21, "358": [21, 22, 343], "plot_spectral_coclust": [21, 22], "441": 22, "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 35, 55, 75, 92, 108, 109, 110, 130, 133, 141, 148, 149, 150, 151, 159, 164, 167, 218, 222, 227, 230, 257, 260, 263, 264, 267, 299, 303, 309, 311, 320, 322, 357, 360, 366, 367, 373, 377, 382, 384, 396, 400, 401, 404, 405, 406, 420, 421, 422, 423, 424, 431, 432, 434, 489, 497, 500, 508, 512, 534, 535, 536, 538, 540, 542, 544, 546, 547, 549, 552, 554, 555, 578, 579, 595, 598, 599, 607, 612, 617, 618, 643, 644, 656, 661, 677, 683, 685, 687, 688, 691, 692, 694, 697, 701, 705, 710, 711, 713, 723, 724, 725, 726, 740, 766, 768, 771, 772, 773, 776, 779, 780, 781, 784, 785, 795, 808, 809, 812, 814, 815, 818, 819, 820, 821, 822, 825, 828, 833, 839, 840, 876, 877, 878, 879, 880, 883, 885, 888, 891, 893, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 976, 978, 979, 980, 982, 987, 988, 989, 1001, 1003, 1008, 1010, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1022], "confid": [24, 25, 26, 27, 154, 156, 243, 257, 260, 320, 385, 394, 406, 621, 643, 644, 651, 653, 656, 659, 660, 661, 683, 687, 692, 705, 710, 711, 723, 724, 740, 773, 811, 850, 883, 885, 888, 962, 965, 966, 967, 972, 979, 980, 981, 990, 1001, 1018], "being": [24, 27, 45, 52, 55, 82, 86, 90, 100, 114, 126, 149, 154, 167, 169, 173, 191, 251, 257, 303, 304, 329, 342, 344, 369, 370, 371, 373, 375, 376, 382, 384, 385, 390, 396, 398, 400, 403, 404, 405, 406, 407, 409, 426, 427, 429, 430, 435, 441, 454, 460, 478, 508, 554, 625, 634, 641, 657, 659, 672, 675, 679, 697, 703, 713, 718, 720, 767, 773, 779, 823, 824, 829, 831, 833, 834, 835, 858, 876, 921, 955, 956, 962, 965, 966, 969, 972, 973, 974, 976, 978, 980, 981, 982, 1008, 1009, 1014, 1015, 1016, 1017, 1019, 1020, 1022, 1023, 1024], "postprocess": [24, 394, 520, 526], "brier": [24, 25, 394, 694], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 363, 403, 422, 437, 520, 546, 605, 624, 628, 749, 758, 761, 840, 841, 885, 886, 887, 888, 889, 971, 981, 999, 1003, 1021], "isoton": [24, 25, 164, 225, 240, 360, 422, 642, 906, 988, 1003, 1009, 1010, 1011, 1012, 1014, 1021, 1024], "belong": [24, 27, 55, 60, 235, 257, 309, 319, 365, 366, 393, 394, 396, 399, 400, 403, 411, 425, 428, 432, 433, 434, 436, 438, 508, 697, 715, 788, 794, 804, 830, 850, 864, 962, 965, 966, 968, 969, 970, 972, 981, 986, 992, 999], "mblondel": [24, 48, 188, 219, 258, 342, 365, 493], "telecom": [24, 25, 42, 226, 990], "balaz": [24, 1012], "kegl": [24, 1012], "jhm": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 232], "informatik": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 232, 966], "uni": [24, 25, 26, 27, 74, 114, 149, 150, 152, 153, 154, 155, 156, 158, 188, 231, 232, 319, 337], "bremen": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 232], "style": [24, 26, 81, 122, 186, 205, 215, 261, 371, 378, 396, 404, 428, 432, 444, 685, 787, 903, 904, 1008, 1011, 1022], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 91, 189, 209, 226, 245, 302, 310, 313, 327, 330, 331, 338, 367, 373, 374, 403, 500, 1016, 1019, 1022], "50000": 24, "n_bin": [24, 25, 27, 53, 197, 215, 300, 302, 306, 423, 424, 848, 976], "calibration_curv": [24, 394, 422, 423, 1017, 1022], "blob": [24, 33, 42, 44, 57, 62, 64, 91, 396, 433, 497, 1013], "sample_weight": [24, 178, 197, 210, 215, 310, 339, 371, 384, 396, 403, 407, 413, 417, 422, 428, 429, 432, 434, 444, 445, 450, 454, 467, 468, 469, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 595, 596, 619, 620, 622, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 682, 683, 685, 687, 688, 692, 693, 694, 697, 698, 701, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 718, 719, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 766, 767, 768, 769, 771, 772, 773, 776, 778, 781, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 828, 830, 833, 834, 840, 841, 843, 848, 862, 863, 878, 879, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 954, 966, 980, 981, 982, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "sw_train": [24, 310], "sw_test": [24, 310], "calibratedclassifiercv": [24, 25, 26, 353, 384, 394, 661, 955, 981, 987, 1012, 1014, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "brier_score_loss": [24, 25, 394, 966, 1016, 1017, 1018], "gaussiannb": [24, 25, 27, 31, 131, 259, 353, 394, 403, 422, 554, 818, 819, 820, 822, 844, 960, 967, 968, 1012, 1013, 1014, 1016, 1021, 1024], "With": [24, 34, 44, 67, 75, 100, 120, 142, 164, 168, 197, 199, 225, 227, 232, 233, 239, 240, 257, 281, 357, 360, 366, 371, 373, 384, 396, 397, 400, 403, 405, 422, 424, 486, 567, 617, 618, 643, 752, 841, 844, 846, 857, 863, 864, 890, 892, 959, 962, 963, 966, 967, 969, 970, 973, 980, 982, 992, 993, 1000, 1005, 1011, 1015, 1016, 1018, 1020, 1022], "itself": [24, 49, 55, 122, 125, 168, 181, 195, 238, 266, 277, 306, 329, 343, 357, 359, 370, 371, 373, 375, 384, 395, 396, 407, 425, 426, 429, 430, 431, 454, 455, 456, 457, 458, 459, 460, 461, 512, 516, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 536, 551, 554, 568, 577, 580, 581, 583, 584, 585, 587, 588, 624, 625, 626, 627, 628, 630, 640, 674, 676, 774, 775, 818, 819, 820, 821, 822, 823, 824, 828, 836, 837, 848, 849, 850, 878, 879, 958, 962, 963, 965, 969, 970, 974, 986, 1012, 1023], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 127, 131, 150, 151, 152, 153, 266, 293, 301, 304, 309, 311, 342, 373, 378, 384, 394, 395, 403, 422, 423, 534, 535, 536, 538, 540, 542, 544, 546, 549, 552, 554, 578, 579, 595, 604, 605, 607, 608, 616, 617, 618, 643, 644, 661, 683, 685, 687, 725, 726, 772, 779, 780, 781, 784, 785, 795, 804, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 825, 833, 840, 843, 850, 878, 879, 880, 885, 888, 891, 893, 962, 966, 968, 970, 973, 979, 980, 981, 982, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 112, 124, 181, 189, 203, 205, 206, 318, 334, 337, 348, 368, 379, 382, 387, 396, 459, 544, 545, 575, 576, 620, 630, 649, 661, 663, 670, 671, 779, 962], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": [24, 232, 279, 291], "109": [24, 53, 967, 1010], "y_uniqu": 24, "rainbow": [24, 220], "this_i": [24, 203], "this_x": [24, 195, 203, 999], "this_sw": 24, "lexsort": 24, "51": [24, 92, 154, 215, 277, 396, 397, 765, 961, 962, 1004], "uncalibr": [24, 25, 26, 422], "gnb": [24, 25, 27, 131, 403, 554, 968], "361": [24, 28, 366, 403, 540, 541], "plot_calibr": [24, 28], "reliabl": [25, 27, 394, 400, 423, 424, 631, 982, 990], "diagram": [25, 27, 71, 237, 310, 394, 396, 423, 424, 453, 881, 976, 1019, 1020], "redund": [25, 27, 106, 145, 243, 248, 353, 367, 370, 371, 376, 384, 394, 500, 619, 987, 1001, 1020], "uninform": [25, 27, 306, 367, 376, 404, 955, 962, 1016], "rest": [25, 30, 119, 123, 164, 175, 181, 212, 216, 245, 309, 321, 326, 377, 384, 395, 406, 497, 595, 616, 629, 643, 644, 661, 738, 772, 811, 812, 813, 832, 883, 885, 888, 962, 966, 967, 970, 973, 981, 990, 1012, 1013, 1022, 1023, 1024], "make_classif": [25, 27, 31, 91, 114, 115, 116, 120, 143, 145, 254, 260, 268, 269, 287, 293, 301, 309, 311, 337, 353, 367, 374, 392, 422, 423, 497, 538, 540, 542, 549, 651, 682, 683, 685, 687, 807, 813, 840, 843, 883, 955, 966, 967, 976, 981, 1014, 1015, 1016, 1018], "100_000": [25, 27, 167], "n_inform": [25, 27, 31, 91, 114, 116, 143, 145, 176, 181, 200, 254, 260, 270, 287, 293, 301, 309, 337, 373, 376, 500, 509, 538, 539, 540, 541, 549, 550, 650, 813, 967, 1016], "n_redund": [25, 27, 31, 91, 116, 143, 145, 254, 260, 287, 293, 301, 376, 422, 500, 538, 540, 549, 813], "logisticregress": [25, 27, 30, 71, 73, 115, 131, 137, 145, 180, 187, 188, 189, 190, 204, 212, 213, 227, 228, 237, 239, 260, 266, 275, 296, 301, 309, 310, 311, 312, 313, 342, 357, 371, 373, 377, 379, 383, 394, 397, 403, 405, 423, 552, 554, 582, 616, 619, 628, 637, 644, 657, 658, 659, 660, 661, 672, 685, 772, 795, 814, 815, 817, 868, 869, 871, 872, 873, 874, 890, 915, 962, 966, 967, 976, 980, 981, 997, 999, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "baselin": [25, 119, 122, 132, 146, 176, 215, 267, 275, 311, 343, 368, 396, 405, 536, 537, 619, 966, 969, 1001, 1024], "regular": [25, 36, 68, 71, 73, 79, 100, 108, 133, 156, 161, 164, 175, 176, 177, 181, 182, 184, 185, 186, 188, 197, 211, 215, 216, 232, 243, 251, 258, 261, 270, 282, 283, 292, 295, 296, 297, 304, 305, 324, 326, 328, 329, 330, 340, 342, 344, 347, 357, 371, 382, 383, 394, 396, 398, 399, 401, 402, 403, 406, 422, 428, 432, 456, 457, 461, 463, 464, 465, 466, 489, 497, 499, 500, 505, 507, 509, 513, 523, 524, 525, 528, 532, 533, 535, 544, 546, 547, 573, 574, 576, 623, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 674, 678, 719, 725, 734, 779, 780, 798, 809, 810, 840, 841, 844, 863, 883, 884, 885, 886, 888, 889, 890, 955, 956, 958, 959, 960, 963, 965, 971, 972, 976, 979, 980, 981, 988, 990, 996, 997, 999, 1003, 1008, 1009, 1010, 1012, 1013, 1017, 1018, 1020, 1021], "logist": [25, 27, 30, 69, 71, 76, 115, 137, 164, 175, 216, 227, 239, 275, 296, 304, 313, 342, 384, 385, 394, 397, 403, 405, 406, 422, 474, 481, 487, 489, 497, 526, 544, 546, 556, 595, 616, 631, 642, 643, 644, 651, 653, 661, 725, 781, 795, 809, 839, 840, 841, 843, 863, 890, 906, 908, 966, 970, 971, 980, 981, 988, 990, 997, 1003, 1012, 1015, 1016, 1018, 1019], "guid": [25, 55, 69, 95, 158, 164, 167, 168, 185, 218, 264, 283, 284, 287, 305, 309, 310, 311, 312, 313, 314, 360, 369, 370, 371, 376, 377, 378, 383, 384, 385, 395, 397, 403, 407, 408, 409, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 604, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 843, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 916, 967, 994, 1001, 1008, 1009, 1010, 1011, 1013, 1015, 1017, 1018], "gridspec": [25, 27, 65, 242, 378], "calibrationdisplai": [25, 27, 394, 1021, 1022], "lr": [25, 27, 115, 131, 132, 200, 212, 228, 229, 253, 260, 383, 403, 553, 554, 555, 697], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 334], "dark2": [25, 27, 219], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 197, 230, 263, 282, 299, 311, 394, 544, 545, 546, 547, 549, 550, 627, 742, 743, 958, 964, 976, 988, 1002, 1003, 1020, 1023], "grid_posit": [25, 27], "y_prob": [25, 27, 152, 423, 424, 694, 814, 840, 966, 1022], "poorli": [25, 62, 78, 86, 113, 124, 222, 358, 396, 403, 513, 615, 962, 963, 1014], "violat": [25, 329, 379, 382, 384, 620, 907, 973, 980, 982], "independ": [25, 27, 37, 46, 96, 97, 99, 115, 118, 156, 168, 234, 257, 260, 262, 266, 275, 299, 306, 309, 343, 353, 357, 358, 367, 373, 375, 383, 384, 387, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 408, 434, 449, 473, 488, 500, 501, 502, 503, 505, 517, 518, 520, 522, 524, 525, 531, 532, 536, 537, 589, 592, 593, 610, 625, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 657, 658, 659, 660, 689, 690, 702, 720, 721, 739, 741, 777, 783, 808, 812, 814, 816, 817, 855, 859, 860, 861, 863, 867, 868, 869, 870, 872, 873, 874, 877, 885, 886, 887, 888, 889, 914, 955, 958, 960, 962, 963, 966, 967, 968, 971, 973, 976, 981, 982, 1002, 1003, 1008, 1009, 1014, 1016, 1018, 1023], "overli": [25, 26, 186, 262, 353, 401, 966], "typic": [25, 27, 99, 110, 173, 181, 197, 215, 232, 259, 260, 264, 266, 267, 283, 284, 311, 329, 343, 357, 364, 365, 366, 369, 373, 374, 380, 383, 384, 394, 395, 396, 397, 400, 401, 403, 404, 406, 428, 432, 434, 481, 536, 538, 540, 541, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 614, 623, 625, 628, 639, 640, 641, 656, 667, 668, 697, 850, 857, 861, 864, 919, 920, 951, 955, 959, 962, 963, 965, 966, 967, 968, 972, 974, 990, 1001, 1017, 1021, 1024], "transpos": [25, 257, 408, 511, 523, 525, 532, 645, 646, 647, 648, 772, 920, 952, 966, 978, 1000, 1008, 1022], "nearli": [25, 260, 366, 384, 395, 748, 966, 969, 978, 1001], "albeit": 25, "strongli": [25, 27, 82, 86, 98, 119, 123, 167, 179, 212, 263, 342, 371, 386, 387, 394, 403, 643, 720, 777, 962, 963, 1003, 1017], "plenti": 25, "greater": [25, 92, 112, 167, 214, 231, 245, 263, 275, 283, 284, 347, 357, 367, 376, 384, 394, 396, 399, 403, 426, 430, 434, 437, 448, 457, 521, 526, 542, 543, 544, 545, 546, 547, 549, 550, 551, 578, 579, 582, 595, 596, 613, 625, 627, 630, 649, 651, 652, 656, 661, 662, 663, 677, 694, 697, 705, 719, 720, 723, 726, 772, 777, 779, 780, 813, 825, 826, 833, 834, 840, 841, 846, 861, 873, 877, 880, 891, 892, 893, 894, 920, 935, 955, 961, 962, 963, 966, 967, 972, 976, 981, 982, 1011, 1016, 1019, 1021, 1022, 1023], "exploit": [25, 275, 967, 987, 1011], "precision_scor": [25, 264, 693, 771, 966, 1008, 1010, 1011, 1012, 1013, 1018, 1024], "recall_scor": [25, 264, 400, 693, 768, 966, 1008, 1010, 1011, 1012, 1013, 1018, 1024], "f1_score": [25, 264, 321, 366, 722, 966, 1008, 1010, 1011, 1012, 1013, 1017, 1018, 1024], "log_loss": [25, 26, 121, 124, 150, 304, 321, 342, 384, 394, 403, 542, 544, 546, 549, 631, 643, 661, 891, 893, 955, 962, 966, 980, 982, 1010, 1012, 1014, 1022, 1023, 1024], "roc_auc_scor": [25, 257, 266, 309, 687, 691, 692, 693, 773, 966, 1010, 1011, 1016, 1018, 1022, 1023], "score_nam": [25, 37, 232, 259, 343, 787], "score_df": 25, "set_index": [25, 122, 154, 186, 215, 257, 305, 343], "decim": [25, 155, 456, 457, 896, 1015, 1016], "098921": 25, "323178": 25, "937457": 25, "872009": 25, "851408": 25, "861586": 25, "117608": 25, "782755": 25, "940374": 25, "857400": 25, "875941": 25, "866571": 25, "098332": 25, "370738": 25, "938613": 25, "883065": 25, "836224": 25, "859007": 25, "108880": 25, "368896": 25, "940201": 25, "861106": 25, "871277": 25, "866161": 25, "refin": [25, 82, 457, 694, 966, 1001], "alter": [25, 162, 373, 384, 713, 714, 722, 767, 768, 771, 1013, 1017, 1020], "uncertainti": [25, 149, 156, 176, 259, 394, 396, 552, 553, 628, 843, 956, 978], "linearsvc": [25, 27, 70, 72, 142, 143, 164, 173, 231, 254, 256, 264, 301, 309, 324, 326, 337, 340, 342, 357, 373, 377, 394, 404, 405, 422, 497, 552, 562, 616, 624, 628, 637, 657, 658, 659, 660, 661, 672, 719, 726, 806, 811, 884, 885, 888, 890, 962, 966, 967, 1008, 1009, 1010, 1014, 1016, 1019, 1024], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 215, 229, 299, 329, 620, 661, 725, 853, 976, 1012, 1019, 1020], "proba_neg_class": [25, 27], "proba": [25, 27, 30, 131, 422, 891, 893], "dual": [25, 27, 70, 72, 142, 143, 173, 231, 254, 256, 264, 301, 309, 326, 327, 337, 342, 404, 405, 456, 457, 463, 552, 553, 596, 624, 631, 632, 637, 638, 643, 644, 645, 646, 647, 648, 666, 669, 719, 811, 823, 824, 883, 884, 885, 888, 966, 967, 981, 1010, 1019, 1022, 1024], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 53, 67, 100, 167, 168, 186, 264, 384, 394, 398, 400, 405, 428, 432, 434, 454, 523, 525, 532, 548, 697, 714, 829, 887, 1008], "behavior": [25, 27, 37, 39, 52, 161, 164, 167, 168, 197, 215, 248, 250, 260, 273, 295, 299, 301, 306, 329, 353, 358, 365, 368, 371, 373, 375, 379, 380, 384, 394, 396, 400, 404, 521, 536, 551, 651, 652, 653, 661, 662, 663, 686, 713, 714, 767, 768, 771, 782, 783, 786, 798, 799, 800, 801, 802, 820, 856, 955, 962, 967, 972, 976, 990, 992, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "hing": [25, 204, 207, 209, 265, 326, 327, 331, 384, 651, 661, 719, 883, 890, 962, 980, 981, 1001], "focus": [25, 78, 186, 366, 382, 403, 963, 976, 986], "far": [25, 60, 82, 119, 150, 156, 167, 197, 215, 329, 342, 344, 371, 380, 406, 705, 863, 941, 971, 972, 981, 990, 999], "awai": [25, 26, 27, 60, 78, 118, 149, 150, 154, 200, 334, 366, 394, 406, 613, 825, 826, 833, 834, 965, 966, 981, 999], "shown": [25, 48, 57, 89, 110, 112, 122, 158, 166, 168, 181, 187, 195, 215, 223, 226, 231, 244, 257, 260, 263, 266, 282, 294, 295, 299, 300, 301, 317, 342, 343, 371, 376, 385, 394, 396, 397, 400, 401, 402, 404, 406, 423, 445, 617, 683, 685, 686, 687, 698, 781, 795, 895, 897, 961, 962, 963, 966, 969, 974, 976, 980, 981, 982, 1001, 1012, 1017, 1018, 1019, 1022], "varieti": [25, 161, 244, 305, 329, 379, 382, 395, 396, 398, 403, 404, 628, 969, 982, 986, 990, 1010, 1023, 1024], "niculescu": [25, 27, 394, 422, 424], "mizil": [25, 27, 394, 422, 424], "caruana": [25, 27, 394, 422, 424], "144943": 25, "465660": 25, "937597": 25, "872186": 25, "851792": 25, "861868": 25, "099820": 25, "376999": 25, "936480": 25, "853174": 25, "877981": 25, "865400": 25, "098758": 25, "321301": 25, "937532": 25, "873724": 25, "848743": 25, "861053": 25, "deal": [25, 57, 71, 161, 167, 181, 222, 344, 371, 376, 395, 397, 404, 405, 406, 459, 481, 688, 693, 747, 771, 849, 920, 962, 990, 998, 1011, 1023, 1024], "situat": [25, 44, 57, 72, 166, 167, 203, 226, 260, 371, 379, 398, 400, 401, 403, 453, 513, 519, 567, 856, 859, 871, 881, 960, 962, 968, 969, 979, 982, 1016], "supervis": [25, 27, 37, 49, 54, 58, 86, 104, 115, 137, 138, 219, 233, 244, 257, 286, 311, 320, 323, 343, 357, 360, 366, 373, 383, 384, 394, 396, 399, 400, 401, 403, 404, 406, 422, 424, 449, 473, 488, 489, 538, 573, 575, 578, 579, 619, 661, 713, 782, 783, 786, 788, 789, 790, 791, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 832, 842, 843, 847, 857, 864, 878, 879, 880, 888, 960, 963, 966, 968, 969, 972, 976, 977, 981, 982, 983, 986, 987, 989, 992, 993, 995, 1001, 1003, 1008, 1014, 1020], "icml": [25, 27, 394, 396, 404, 422, 424, 818, 820, 839, 966, 968, 980, 985], "2005": [25, 27, 81, 368, 394, 422, 424, 832, 962, 969, 979], "021": [25, 28, 313, 315], "plot_calibration_curv": [25, 28], "simplex": [26, 655, 779, 858], "arrow": [26, 1022], "green": [26, 34, 81, 92, 113, 126, 131, 149, 173, 223, 294, 300, 304, 310, 384, 967, 1016, 1017, 1019, 1020], "600": [26, 50, 128, 129, 366, 665], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 209, 226, 245, 302, 331, 497], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 56, 114, 115, 116, 117, 118, 131, 169, 170, 237, 238, 254, 269, 309, 311, 342, 353, 383, 384, 394, 403, 405, 542, 543, 544, 546, 551, 552, 554, 784, 785, 813, 893, 955, 967, 990, 1005, 1012, 1013, 1016, 1017, 1018, 1021, 1022, 1023, 1024], "concaten": [26, 39, 50, 61, 69, 76, 81, 112, 125, 157, 164, 176, 179, 219, 226, 235, 242, 246, 247, 253, 264, 266, 267, 282, 296, 303, 306, 318, 342, 397, 449, 452, 489, 494, 516, 522, 526, 527, 584, 765, 781, 842, 843, 845, 848, 856, 888, 967, 996, 1009], "randomforestclassifierrandomforestclassifi": [26, 116, 117, 169, 237, 269], "cal_clf": 26, "prefit": [26, 384, 394, 405, 422, 552, 553, 582, 987, 1020, 1021, 1022], "x27": [26, 71, 72, 109, 115, 129, 132, 143, 167, 168, 169, 227, 228, 236, 237, 239, 247, 255, 257, 258, 264, 269, 296, 305, 310, 311, 313, 319], "calibratedclassifiercvcalibratedclassifiercv": 26, "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "perfect": [26, 37, 70, 81, 98, 100, 193, 197, 342, 343, 371, 375, 396, 400, 538, 539, 675, 679, 689, 690, 693, 702, 710, 712, 715, 721, 727, 740, 741, 769, 770, 777, 962, 966, 969, 981, 990, 999, 1022], "ro": 26, "bo": [26, 1020], "unit": [26, 70, 80, 167, 173, 197, 215, 282, 295, 299, 343, 366, 371, 372, 373, 377, 379, 380, 401, 404, 408, 449, 474, 475, 504, 509, 517, 518, 519, 526, 527, 574, 575, 576, 596, 643, 644, 661, 670, 684, 754, 830, 839, 840, 841, 847, 853, 855, 859, 861, 863, 869, 870, 871, 873, 874, 883, 884, 962, 964, 965, 971, 976, 982, 986, 999, 1012, 1016, 1022, 1023], "mid": [26, 329, 966, 968], "frac": [26, 80, 81, 257, 264, 266, 312, 393, 394, 396, 398, 401, 402, 403, 404, 406, 417, 448, 450, 467, 468, 469, 539, 541, 543, 545, 547, 550, 553, 555, 596, 600, 604, 607, 608, 620, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 654, 655, 657, 658, 663, 664, 665, 681, 739, 753, 816, 817, 826, 834, 841, 884, 886, 889, 892, 894, 958, 960, 961, 962, 963, 964, 966, 968, 969, 970, 971, 973, 974, 976, 978, 980, 981, 982, 999], "shrink": [26, 82, 95, 123, 168, 181, 192, 195, 218, 246, 299, 401, 544, 545, 661, 663, 830, 840, 841, 885, 886, 887, 888, 889, 969, 981, 999], "perfectli": [26, 37, 260, 271, 386, 396, 403, 423, 552, 591, 689, 690, 700, 702, 720, 721, 741, 770, 777, 856, 961, 963, 966, 981, 1021, 1022], "incur": [26, 604, 883, 981, 1016], "correct": [26, 27, 57, 81, 157, 167, 181, 186, 197, 215, 242, 251, 257, 264, 266, 329, 331, 342, 353, 368, 371, 373, 375, 385, 394, 395, 396, 400, 401, 403, 404, 435, 441, 454, 459, 473, 486, 488, 620, 652, 661, 663, 688, 689, 693, 697, 698, 703, 706, 707, 708, 712, 713, 714, 718, 722, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 767, 768, 769, 771, 776, 778, 811, 812, 813, 820, 828, 854, 951, 962, 966, 967, 981, 992, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "decreas": [26, 39, 46, 55, 58, 66, 75, 126, 145, 157, 167, 168, 205, 229, 230, 259, 264, 270, 293, 301, 304, 309, 347, 357, 359, 371, 394, 396, 403, 426, 430, 448, 506, 519, 520, 526, 542, 543, 544, 545, 546, 547, 549, 550, 551, 587, 620, 621, 622, 661, 662, 663, 691, 697, 711, 766, 773, 840, 841, 891, 892, 893, 894, 955, 957, 962, 963, 966, 969, 970, 973, 974, 980, 981, 990, 999, 1010, 1015, 1018, 1021], "cal_scor": 26, "327": [26, 714, 999], "549": 26, "p1d": 26, "p0": 26, "p1": [26, 131], "p2": [26, 131, 215], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 394, 422], "this_p": 26, "sure": [26, 56, 190, 203, 233, 353, 357, 358, 365, 369, 370, 371, 372, 373, 375, 376, 379, 382, 394, 397, 404, 478, 508, 634, 903, 904, 914, 952, 956, 963, 980, 986, 987, 1015, 1016, 1018, 1023], "renorm": 26, "step": [26, 33, 42, 54, 55, 58, 67, 70, 71, 72, 73, 74, 81, 86, 98, 103, 115, 118, 119, 129, 143, 144, 145, 151, 154, 167, 169, 197, 205, 215, 227, 228, 231, 236, 239, 248, 255, 258, 264, 266, 277, 279, 285, 293, 296, 301, 304, 305, 310, 313, 322, 325, 329, 343, 344, 347, 353, 357, 360, 366, 369, 370, 371, 373, 375, 376, 379, 382, 384, 393, 394, 396, 398, 399, 401, 403, 404, 405, 427, 432, 434, 521, 522, 523, 524, 531, 548, 573, 574, 576, 578, 579, 582, 591, 612, 629, 633, 651, 652, 654, 661, 663, 664, 665, 679, 685, 779, 780, 781, 784, 785, 795, 815, 816, 817, 839, 840, 841, 843, 844, 846, 883, 884, 885, 886, 888, 889, 919, 920, 937, 941, 956, 962, 965, 970, 971, 976, 980, 982, 983, 986, 989, 997, 1001, 1008, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1024], "multiclass": [26, 30, 164, 175, 216, 233, 250, 264, 267, 273, 275, 326, 338, 360, 366, 367, 373, 374, 376, 384, 396, 403, 422, 437, 447, 474, 489, 544, 546, 552, 553, 556, 579, 587, 595, 616, 617, 618, 643, 644, 651, 653, 658, 659, 660, 661, 687, 691, 693, 713, 714, 718, 719, 722, 727, 738, 767, 768, 771, 772, 773, 776, 781, 782, 784, 785, 786, 787, 795, 799, 803, 804, 805, 806, 807, 808, 809, 810, 850, 864, 883, 885, 888, 960, 962, 977, 981, 982, 988, 989, 1001, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1023, 1024], "argmax": [26, 103, 256, 270, 373, 403, 554, 811, 891, 981, 1021], "644": [26, 28], "plot_calibration_multiclass": [26, 28], "gave": [27, 394, 781, 784, 785, 795, 850], "four": [27, 142, 157, 173, 179, 198, 244, 245, 318, 326, 367, 371, 384, 542, 549, 704, 891, 893, 909, 962, 964, 965, 966, 976, 985], "naiv": [27, 31, 127, 257, 259, 342, 344, 360, 366, 394, 403, 404, 422, 529, 818, 819, 820, 821, 822, 960, 961, 969, 988, 1003, 1008, 1009, 1010, 1011, 1016, 1018, 1021, 1023], "bay": [27, 31, 113, 127, 149, 186, 247, 259, 342, 360, 366, 394, 401, 403, 404, 406, 521, 534, 535, 641, 818, 819, 820, 821, 822, 864, 960, 961, 962, 976, 988, 1001, 1003, 1008, 1009, 1010, 1011, 1016, 1018, 1021, 1023], "train_sampl": [27, 212, 213], "against": [27, 37, 86, 105, 113, 123, 141, 173, 188, 189, 206, 214, 266, 305, 309, 329, 366, 371, 385, 394, 396, 400, 404, 423, 494, 527, 533, 536, 661, 663, 739, 741, 772, 783, 788, 790, 808, 812, 932, 958, 962, 966, 967, 969, 981, 985, 992], "rfc": [27, 238, 309, 1005], "1158": 27, "userwarn": [27, 44, 62, 112, 129, 158, 189, 206, 334, 348, 376, 697, 976, 1014, 1016, 1021], "redundantli": [27, 384], "keyword": [27, 342, 365, 371, 373, 376, 378, 384, 396, 407, 410, 423, 429, 430, 435, 437, 442, 449, 452, 488, 520, 523, 525, 544, 545, 552, 553, 554, 555, 605, 613, 616, 617, 624, 628, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 673, 677, 682, 683, 685, 686, 687, 758, 762, 763, 764, 765, 774, 775, 787, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 843, 847, 915, 917, 933, 955, 963, 966, 969, 979, 1008, 1012, 1014, 1015, 1016, 1018, 1020, 1022, 1023, 1024], "argument": [27, 72, 198, 227, 230, 358, 365, 366, 371, 372, 374, 376, 377, 379, 380, 382, 384, 396, 397, 400, 401, 403, 405, 407, 408, 410, 423, 425, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 442, 444, 446, 448, 453, 478, 488, 493, 518, 520, 521, 523, 525, 536, 544, 545, 552, 553, 554, 555, 562, 566, 567, 573, 574, 576, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 616, 624, 628, 631, 632, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 651, 653, 661, 666, 669, 673, 677, 681, 683, 684, 685, 686, 687, 699, 704, 719, 726, 747, 763, 764, 787, 811, 812, 815, 825, 826, 827, 829, 831, 832, 833, 834, 835, 836, 837, 840, 843, 847, 881, 897, 901, 910, 915, 917, 933, 934, 935, 936, 950, 955, 958, 962, 963, 964, 966, 969, 973, 974, 981, 982, 992, 996, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024], "fmt": [27, 61, 208], "preced": [27, 275, 358, 371, 472, 966, 1008], "contrast": [27, 104, 168, 199, 232, 257, 259, 286, 304, 343, 384, 394, 396, 397, 399, 403, 406, 434, 437, 447, 604, 628, 795, 839, 956, 959, 961, 962, 966, 969, 971, 974, 976, 979, 980, 982, 1018], "push": [27, 371, 375, 394, 989], "equat": [27, 337, 371, 396, 401, 403, 542, 543, 544, 545, 549, 550, 551, 575, 612, 667, 668, 672, 747, 863, 891, 892, 893, 894, 956, 963, 966, 971, 1016], "twice": [27, 269, 342, 344, 373, 406, 604, 714, 716, 922, 1017], "approx": [27, 95, 231, 401, 403, 404, 966, 973, 980], "rare": [27, 168, 305, 353, 375, 382, 384, 386, 394, 396, 400, 574, 633, 643, 644, 654, 665, 883, 908, 934, 962, 976, 990, 1015, 1016, 1017, 1021, 1023], "explan": [27, 86, 357, 370, 371, 394, 404, 955, 965, 967, 982, 990, 1011], "bag": [27, 70, 108, 114, 124, 133, 164, 169, 343, 344, 367, 394, 501, 502, 503, 540, 541, 542, 543, 544, 545, 548, 549, 550, 725, 786, 809, 892, 964, 967, 988, 1003, 1008, 1010, 1011, 1012, 1013, 1014, 1021, 1022, 1024], "underli": [27, 56, 80, 128, 146, 198, 200, 262, 281, 282, 350, 358, 382, 384, 386, 392, 394, 396, 398, 400, 401, 402, 403, 405, 406, 422, 436, 437, 438, 447, 449, 450, 456, 457, 463, 509, 552, 553, 554, 555, 578, 579, 582, 587, 643, 653, 665, 676, 680, 781, 784, 785, 795, 811, 812, 813, 814, 815, 816, 817, 828, 883, 891, 892, 893, 894, 931, 962, 963, 967, 972, 979, 981, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1024], "restrict": [27, 66, 67, 161, 164, 214, 292, 297, 373, 377, 382, 394, 396, 403, 404, 450, 478, 487, 517, 566, 595, 638, 639, 640, 641, 643, 667, 668, 698, 766, 772, 773, 809, 831, 833, 834, 835, 837, 839, 840, 841, 843, 869, 966, 982, 1002, 1003, 1008, 1010, 1018, 1020], "interv": [27, 108, 133, 156, 164, 181, 197, 198, 199, 215, 257, 306, 366, 384, 394, 400, 403, 406, 423, 424, 501, 502, 503, 542, 543, 545, 547, 549, 550, 620, 621, 623, 662, 726, 732, 734, 785, 802, 809, 846, 848, 862, 885, 886, 887, 907, 958, 962, 966, 976, 982, 1015, 1019], "move": [27, 118, 258, 296, 329, 370, 371, 375, 377, 394, 396, 534, 535, 556, 557, 558, 560, 562, 563, 933, 1000, 1008, 1009, 1013, 1016, 1018, 1021, 1022], "characterist": [27, 44, 62, 146, 154, 164, 226, 250, 254, 273, 299, 353, 366, 368, 376, 394, 400, 403, 406, 488, 489, 608, 623, 643, 687, 691, 693, 711, 766, 772, 773, 800, 809, 812, 850, 888, 962], "difficult": [27, 55, 167, 205, 371, 379, 394, 401, 403, 538, 539, 544, 546, 547, 961, 963, 965, 969, 971, 973, 982, 990, 1008, 1022], "bayesian": [27, 54, 164, 175, 181, 185, 216, 241, 243, 247, 248, 249, 401, 422, 509, 513, 517, 629, 630, 641, 642, 779, 780, 844, 846, 858, 863, 955, 986, 988, 1002, 1003, 1014, 1021], "domingo": [27, 772, 966], "pazzani": 27, "proc": [27, 79, 394, 404, 435, 674, 678, 818, 955, 963, 968, 972], "13th": 27, "intl": [27, 400], "1996": [27, 396, 403, 407, 429, 501, 502, 503, 540, 541, 976], "zadrozni": [27, 394, 422, 661], "bianca": 27, "charl": [27, 748, 1008, 1011, 1014, 1018, 1020, 1023], "elkan": [27, 310, 394, 422, 428, 432, 444, 661, 1014, 1018, 1019, 1021, 1022], "vol": [27, 157, 181, 263, 368, 396, 459, 544, 545, 613, 620, 630, 649, 670, 671, 779, 808, 820, 956, 968, 969], "2001": [27, 154, 169, 256, 393, 396, 403, 422, 436, 437, 438, 447, 496, 544, 545, 549, 550, 613, 619, 624, 630, 676, 681, 719, 772, 864, 876, 908, 956, 962, 966, 972, 974, 976, 978, 981], "284": [27, 28, 247, 249, 634], "plot_compare_calibr": [27, 28], "310": 28, "auto_examples_calibr": 28, "calibr": [28, 30, 215, 360, 384, 497, 500, 549, 554, 643, 661, 694, 713, 725, 768, 771, 772, 809, 821, 880, 883, 955, 962, 966, 979, 981, 988, 1003, 1005, 1012, 1014], "discrimin": [29, 35, 104, 141, 143, 164, 173, 212, 219, 233, 286, 360, 368, 394, 403, 460, 497, 534, 535, 551, 767, 832, 955, 963, 966, 969, 980, 982, 988, 999, 1003, 1011], "ellipsoid": [29, 35, 164, 241, 242, 249, 534, 535, 779, 780, 960, 965], "ledoit": [29, 35, 77, 78, 82, 83, 164, 458, 460, 464, 465, 497, 534, 960], "wolf": [29, 35, 77, 78, 82, 83, 164, 458, 460, 464, 465, 497, 534, 960, 1015], "oa": [29, 35, 77, 83, 164, 398, 454, 455, 458, 459, 461, 462, 497, 534, 781, 960], "hand": [29, 35, 86, 89, 97, 100, 122, 141, 154, 164, 167, 168, 190, 204, 222, 229, 230, 232, 254, 259, 266, 329, 357, 365, 366, 368, 371, 373, 377, 379, 383, 390, 401, 402, 403, 405, 487, 628, 682, 698, 772, 809, 864, 888, 955, 959, 962, 966, 968, 970, 974, 979, 981, 990, 992, 995, 998, 999], "built": [30, 86, 111, 118, 120, 169, 205, 260, 290, 309, 348, 357, 369, 371, 372, 373, 375, 377, 379, 380, 382, 383, 384, 387, 390, 395, 396, 397, 400, 403, 405, 430, 488, 538, 539, 540, 541, 546, 547, 573, 574, 578, 582, 624, 625, 626, 627, 628, 631, 632, 637, 643, 645, 646, 647, 648, 657, 658, 659, 660, 666, 784, 785, 792, 814, 817, 823, 824, 893, 894, 950, 962, 966, 967, 979, 980, 982, 986, 990, 1001, 1008, 1011, 1012, 1014, 1020], "enabl": [30, 50, 72, 120, 168, 205, 220, 301, 310, 312, 313, 338, 369, 371, 376, 379, 382, 384, 387, 392, 395, 396, 397, 401, 403, 404, 434, 519, 520, 526, 544, 545, 546, 547, 548, 564, 565, 575, 576, 587, 595, 779, 780, 781, 784, 843, 844, 856, 857, 880, 883, 884, 885, 886, 887, 888, 889, 898, 933, 956, 958, 963, 965, 966, 969, 976, 977, 980, 981, 987, 990, 1008, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "troubl": [30, 404], "ovr": [30, 189, 212, 275, 309, 338, 643, 644, 772, 812, 883, 885, 888, 962, 966, 967, 981, 1008, 1013, 1014, 1016, 1017, 1018, 1022, 1023], "gpc": [30, 148, 159, 164, 489, 595, 596, 598, 599, 604, 605, 607, 608, 688, 725, 988, 1003, 1018], "accuracy_scor": [30, 110, 150, 261, 304, 320, 342, 353, 383, 542, 549, 693, 713, 714, 718, 722, 726, 767, 768, 771, 776, 778, 955, 966, 1009, 1010, 1011, 1020], "gaussian_process": [30, 31, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 360, 384, 406, 628, 967, 1011, 1014, 1015], "gaussianprocessclassifi": [30, 31, 150, 151, 152, 153, 157, 384, 406, 596, 604, 605, 607, 608, 967, 1014, 1016, 1018, 1022], "iri": [30, 41, 45, 74, 88, 93, 94, 99, 106, 107, 108, 120, 130, 133, 138, 142, 148, 159, 164, 175, 180, 190, 216, 239, 244, 251, 262, 263, 266, 267, 280, 288, 294, 311, 316, 323, 324, 325, 329, 332, 340, 346, 351, 352, 364, 365, 383, 396, 397, 400, 401, 403, 481, 489, 526, 534, 538, 542, 549, 595, 607, 616, 661, 781, 795, 878, 879, 880, 883, 888, 891, 895, 896, 897, 955, 956, 960, 965, 966, 969, 973, 976, 979, 980, 981, 982, 992, 999, 1000, 1003, 1021], "load_iri": [30, 41, 45, 74, 90, 99, 102, 104, 106, 118, 120, 130, 138, 142, 151, 180, 190, 206, 239, 244, 251, 262, 263, 264, 266, 267, 280, 285, 288, 294, 309, 311, 314, 322, 325, 326, 329, 332, 348, 351, 383, 390, 396, 397, 400, 403, 405, 546, 552, 587, 595, 604, 605, 607, 608, 616, 643, 644, 772, 781, 784, 785, 787, 795, 811, 832, 878, 879, 880, 891, 893, 895, 896, 897, 956, 961, 966, 967, 968, 969, 973, 976, 982, 992, 998, 999, 1000, 1014, 1016, 1019], "saga": [30, 188, 212, 213, 643, 644, 657, 659, 672, 795, 962, 1015, 1017], "multi_class": [30, 189, 212, 266, 309, 554, 595, 643, 644, 772, 817, 883, 962, 967, 981, 1008, 1012, 1016, 1021, 1023], "n_classifi": [30, 554, 555], "xx": [30, 34, 42, 58, 80, 118, 122, 127, 138, 151, 152, 153, 168, 184, 204, 207, 208, 209, 210, 211, 223, 226, 233, 246, 283, 293, 301, 302, 322, 328, 329, 333, 334, 335, 338, 339, 375], "yy": [30, 34, 42, 58, 80, 118, 127, 138, 151, 153, 168, 204, 208, 209, 210, 211, 223, 226, 233, 283, 293, 301, 302, 322, 328, 329, 333, 334, 335, 338, 339], "xfull": 30, "imshow_handl": 30, "cax": [30, 152, 268], "orient": [30, 95, 167, 218, 299, 384, 895, 963], "horizont": [30, 95, 218, 231, 299, 302, 376, 384, 449, 500, 682, 686], "154": [30, 35, 296, 344, 636, 967], "plot_classification_prob": [30, 35], "salt": [31, 231, 301, 1022], "convei": [31, 223, 301, 999], "particularli": [31, 70, 71, 74, 105, 127, 198, 228, 257, 301, 310, 339, 353, 357, 371, 380, 384, 396, 397, 399, 402, 404, 481, 787, 820, 920, 934, 935, 962, 963, 966, 968, 987, 990, 1000, 1008, 1013, 1015, 1016, 1022], "linearli": [31, 100, 112, 167, 176, 211, 219, 226, 266, 267, 301, 304, 333, 342, 357, 368, 382, 401, 403, 500, 627, 692, 966, 969, 972, 981, 999, 1015, 1024], "semi": [31, 233, 301, 311, 323, 360, 366, 384, 473, 489, 520, 573, 575, 661, 713, 809, 843, 847, 878, 879, 880, 888, 964, 969, 972, 988, 1003, 1008, 1020, 1023], "transpar": [31, 301, 951, 990], "ga\u00ebl": [31, 45, 51, 73, 89, 90, 102, 180, 194, 195, 301, 333, 334, 385, 990], "modifi": [31, 45, 51, 73, 75, 89, 90, 180, 181, 194, 195, 207, 218, 219, 220, 244, 334, 339, 369, 371, 373, 375, 384, 396, 403, 406, 428, 432, 439, 444, 453, 467, 468, 469, 470, 480, 495, 566, 595, 596, 598, 604, 661, 663, 674, 678, 713, 714, 752, 767, 768, 771, 901, 962, 979, 980, 987, 998, 1002, 1003, 1008, 1010, 1011, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023], "listedcolormap": [31, 118, 280, 285, 288, 293, 301], "make_moon": [31, 44, 62, 226, 257, 293, 294, 301, 367, 955, 1015, 1019], "make_circl": [31, 44, 62, 100, 127, 223, 293, 294, 301, 319, 367, 1009, 1016, 1019], "neural_network": [31, 164, 168, 236, 292, 293, 294, 295, 296, 359, 360, 382, 967, 970, 1010], "mlpclassifi": [31, 164, 292, 293, 295, 297, 359, 487, 489, 499, 507, 556, 839, 841, 853, 967, 970, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "kneighborsclassifi": [31, 130, 137, 279, 280, 285, 286, 304, 311, 313, 342, 403, 587, 826, 830, 831, 832, 833, 834, 967, 969, 999, 1008, 1018, 1020, 1021, 1022, 1023, 1024], "decisiontreeclassifi": [31, 109, 110, 112, 118, 130, 261, 347, 348, 351, 384, 403, 538, 540, 542, 544, 546, 549, 616, 787, 807, 892, 893, 895, 896, 897, 956, 967, 982, 1009, 1010, 1012, 1013, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "adaboostclassifi": [31, 109, 110, 112, 118, 403, 539, 544, 546, 1010, 1011, 1014, 1015, 1017, 1018, 1021, 1023, 1024], "discriminant_analysi": [31, 33, 34, 104, 219, 286, 353, 360, 392, 521, 832, 960, 967, 1008, 1011, 1012, 1013, 1014, 1015], "quadraticdiscriminantanalysi": [31, 34, 534, 960, 967, 969, 1008, 1013, 1015, 1023], "decisionboundarydisplai": [31, 56, 112, 125, 130, 180, 189, 206, 260, 280, 285, 288, 304, 325, 326, 327, 330, 331, 348, 1022, 1023], "net": [31, 164, 175, 181, 188, 208, 216, 270, 377, 395, 400, 456, 457, 463, 486, 509, 542, 543, 544, 545, 549, 550, 551, 631, 632, 637, 642, 643, 644, 645, 646, 647, 648, 653, 661, 663, 666, 669, 839, 891, 892, 893, 894, 955, 966, 971, 980, 988, 990, 1003, 1008, 1013, 1017, 1018, 1020], "adaboost": [31, 108, 118, 133, 164, 504, 505, 538, 539, 544, 616, 688, 778, 809, 891, 892, 988, 1003, 1010], "qda": [31, 34, 368, 534, 535, 988, 1003, 1013], "025": [31, 199, 254, 675, 679], "n_clusters_per_class": [31, 91, 114, 143, 145, 254, 287, 293, 301, 376, 500], "uniform": [31, 37, 53, 121, 122, 125, 142, 150, 155, 158, 176, 177, 211, 223, 226, 229, 265, 280, 283, 284, 289, 293, 300, 302, 303, 306, 313, 328, 373, 376, 396, 423, 424, 536, 554, 555, 595, 596, 613, 624, 634, 635, 639, 653, 661, 662, 663, 684, 706, 707, 712, 729, 730, 732, 734, 735, 737, 769, 785, 793, 795, 818, 819, 822, 825, 826, 833, 834, 848, 860, 862, 872, 908, 922, 955, 956, 965, 966, 969, 1014, 1016, 1018, 1022, 1024], "linearly_separ": [31, 293], "ds_cnt": [31, 301, 302], "rdbu": [31, 95, 213, 293, 329, 334], "cm_bright": [31, 293, 301], "ff0000": [31, 285, 293], "0000ff": [31, 285, 293], "ep": [31, 44, 46, 49, 55, 65, 180, 182, 221, 230, 382, 396, 407, 429, 435, 440, 456, 457, 463, 616, 631, 632, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 666, 667, 668, 669, 675, 679, 699, 725, 835, 875, 876, 877, 978, 1023, 1024], "lstrip": [31, 44, 62, 226, 293, 301], "724": [31, 35, 227, 240], "plot_classifier_comparison": [31, 35, 301], "8x8": [32, 89, 188, 230, 286, 296, 368, 487, 998], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 58, 72, 73, 89, 136, 137, 144, 188, 204, 219, 230, 231, 255, 256, 259, 265, 272, 279, 281, 286, 294, 296, 317, 318, 377, 397, 430, 431, 517, 518, 519, 520, 584, 585, 623, 624, 653, 673, 674, 675, 676, 992, 996, 997, 998, 999, 1000, 1014, 1019], "set_axis_off": 32, "gray_r": [32, 89, 98, 152, 219, 296, 317, 318, 998], "entir": [32, 161, 197, 205, 296, 299, 310, 351, 353, 365, 372, 373, 384, 390, 396, 400, 402, 404, 457, 477, 519, 573, 574, 575, 576, 632, 636, 638, 640, 643, 644, 646, 648, 650, 651, 653, 661, 667, 668, 718, 778, 811, 812, 815, 840, 842, 843, 856, 868, 869, 871, 872, 873, 874, 935, 955, 956, 966, 976, 980, 982, 999, 1017, 1018], "97": [32, 105, 170, 233, 248, 296, 318, 329, 368, 377, 383, 400, 643, 967, 976, 1008], "86": [32, 70, 143, 188, 301, 317, 318, 772, 891, 966, 997], "92": [32, 34, 50, 98, 143, 173, 255, 296, 317, 318, 329, 366, 368, 523, 525, 532, 547, 582, 781, 795, 961, 1001], "899": [32, 255, 321], "confus": [32, 164, 250, 266, 273, 317, 318, 342, 384, 453, 489, 616, 637, 682, 698, 700, 703, 713, 714, 722, 738, 768, 771, 809, 881, 888, 1001, 1008, 1009, 1013, 1017, 1018, 1020, 1021, 1022, 1023], "figure_": [32, 168, 236, 309, 311, 378, 423, 616, 617, 682, 683, 685, 686, 687, 787], "confusion_matrix": [32, 227, 251, 317, 318, 682, 698, 738, 806, 966, 1001, 1009, 1014, 1015, 1018, 1019, 1021], "ground": [32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 125, 157, 181, 191, 197, 198, 248, 260, 343, 384, 395, 396, 688, 689, 690, 693, 697, 698, 699, 700, 702, 703, 706, 707, 708, 712, 713, 714, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 767, 768, 769, 770, 771, 777, 778, 966, 979, 992, 1000, 1016], "truth": [32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 103, 125, 157, 181, 191, 197, 198, 248, 260, 343, 384, 395, 396, 688, 689, 690, 693, 697, 698, 699, 700, 702, 703, 706, 707, 708, 710, 712, 713, 714, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 767, 768, 769, 770, 771, 777, 778, 966, 992, 1000, 1016, 1022], "gt": [32, 71, 72, 115, 129, 167, 247, 255, 269, 369, 371, 375], "rebuilt": [32, 823, 824], "478": [32, 35, 239], "plot_digits_classif": [32, 35], "oracl": [33, 197, 215, 409, 454, 455, 458, 459, 460, 461, 960, 1008], "shrinkag": [33, 77, 79, 82, 83, 103, 124, 164, 288, 409, 454, 455, 458, 459, 460, 461, 462, 464, 465, 466, 524, 528, 534, 546, 547, 781, 962, 976, 988, 1003, 1008, 1012, 1013, 1015], "lineardiscriminantanalysi": [33, 34, 104, 219, 286, 353, 392, 521, 535, 832, 960, 967, 969, 1008, 1011, 1012, 1013, 1014, 1015, 1017, 1020, 1022, 1023, 1024], "200": [33, 34, 44, 50, 54, 60, 75, 98, 112, 120, 122, 128, 153, 183, 192, 198, 201, 202, 203, 209, 214, 219, 237, 242, 251, 258, 264, 266, 267, 273, 299, 302, 319, 321, 328, 329, 350, 353, 366, 373, 382, 401, 403, 408, 425, 439, 453, 456, 457, 518, 519, 520, 523, 524, 525, 528, 532, 569, 634, 636, 656, 664, 677, 795, 840, 841, 881, 885, 886, 887, 888, 889, 981], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 130, 131, 403, 554], "lsqr": [33, 306, 534, 657, 659, 672, 960, 1009, 1015, 1022], "clf2": [33, 130, 131, 373, 390, 403, 554], "store_precis": [33, 79, 454, 455, 458, 459, 460, 461], "assume_cent": [33, 79, 398, 409, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465], "clf3": [33, 130, 131, 373, 403, 554], "covariance_estim": [33, 534, 960, 1020], "features_samples_ratio": 33, "gold": [33, 191, 198, 200, 203, 207, 211, 214, 243, 248, 264, 283, 328, 377], "navi": [33, 70, 79, 99, 104, 105, 128, 176, 200, 208, 221, 243, 244, 245, 248, 264, 266, 272, 282, 289, 319, 350], "954": [33, 35, 859, 871], "plot_lda": [33, 35], "doubl": [34, 269, 371, 384, 401, 523, 525, 532, 684, 823, 824, 834, 950, 956, 981, 982, 1008, 1018, 1019], "deviat": [34, 61, 80, 113, 116, 117, 118, 146, 149, 154, 156, 158, 167, 176, 203, 254, 255, 256, 257, 258, 260, 283, 284, 299, 304, 363, 367, 368, 376, 380, 384, 400, 403, 435, 457, 486, 496, 497, 498, 499, 501, 502, 503, 507, 509, 510, 515, 537, 579, 596, 619, 629, 630, 656, 708, 736, 787, 829, 852, 853, 863, 872, 873, 874, 962, 966, 972, 976, 999, 1014, 1015, 1016, 1019, 1020, 1021], "own": [34, 215, 247, 277, 279, 319, 343, 358, 365, 374, 375, 376, 379, 380, 387, 395, 396, 408, 412, 425, 439, 518, 542, 549, 631, 779, 780, 825, 826, 827, 829, 831, 833, 834, 835, 857, 891, 893, 909, 914, 934, 962, 968, 969, 972, 976, 981, 990, 1000, 1001, 1015, 1016, 1018], "mpl": [34, 242, 243, 244, 248, 299], "linearsegmentedcolormap": 34, "red_blue_class": 34, "register_cmap": 34, "plot_lda_qda": [34, 35], "matplotlibdeprecationwarn": 34, "minor": [34, 260, 264, 366, 374, 385, 481, 966, 1008, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "dataset_fixed_cov": 34, "dim": [34, 206, 230, 280, 285, 286, 288, 325, 326, 512, 684], "dataset_cov": 34, "matric": [34, 40, 80, 82, 95, 202, 243, 244, 246, 247, 248, 277, 290, 310, 321, 342, 343, 363, 365, 373, 374, 382, 383, 384, 395, 396, 397, 398, 399, 401, 404, 405, 411, 435, 436, 438, 449, 458, 467, 468, 469, 519, 520, 523, 525, 526, 529, 532, 534, 535, 540, 541, 548, 551, 566, 567, 574, 628, 643, 649, 657, 659, 672, 738, 744, 752, 758, 762, 763, 764, 765, 774, 779, 780, 809, 827, 830, 835, 846, 850, 852, 855, 858, 860, 861, 863, 866, 868, 870, 872, 873, 874, 875, 876, 885, 886, 888, 889, 899, 920, 926, 930, 937, 939, 940, 956, 960, 963, 964, 965, 967, 969, 970, 978, 980, 981, 986, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "linalg": [34, 54, 78, 79, 82, 101, 103, 105, 183, 242, 243, 244, 247, 248, 371, 377, 401, 436, 437, 438, 447, 517, 520, 526, 529, 642, 657, 659, 672, 676, 680, 918], "plot_data": 34, "fig_index": 34, "splot": [34, 243, 248], "tp": [34, 396, 697, 703, 715, 766, 767, 768, 771, 895, 966], "tp0": 34, "tp1": 34, "x0_tp": 34, "x0_fp": 34, "x1_tp": 34, "x1_fp": 34, "990000": 34, "dark": [34, 113, 167, 329, 366], "000099": 34, "pcolormesh": [34, 127, 138, 180, 280, 285, 325, 329, 333, 616], "white": [34, 58, 60, 95, 154, 167, 211, 218, 283, 296, 301, 322, 328, 401, 404, 406, 610, 982, 1008, 1011, 1014, 1018, 1022], "means_": [34, 242, 243, 244, 245, 247, 248, 534, 535, 779, 780], "yellow": [34, 92, 329, 967], "markers": [34, 49, 55, 58, 61, 63, 64, 122, 152, 156, 229, 313], "markeredgecolor": [34, 49, 55, 61, 63, 64], "plot_ellips": [34, 242], "cov": [34, 82, 86, 112, 247, 371, 384, 387, 389, 399, 409, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 504, 517, 519, 526, 533], "eigh": [34, 242, 243, 244, 247, 248, 401, 408, 518, 520, 1023], "arctan": [34, 243, 248, 367, 503], "180": [34, 242, 243, 244, 247, 248, 286, 290, 343, 377, 406, 487], "ell": [34, 242, 243, 244, 248, 393], "patch": [34, 50, 242, 243, 244, 247, 248, 252, 366, 375, 382, 401, 403, 540, 541, 568, 569, 572, 1008, 1016], "ellips": [34, 226, 242, 243, 244, 247, 248, 972], "set_clip_box": [34, 242, 243, 244, 247, 248], "set_alpha": [34, 109, 242, 243, 244, 247, 248], "add_artist": [34, 219, 242, 243, 244, 247, 248], "plot_lda_cov": 34, "plot_qda_cov": 34, "svd": [34, 101, 103, 127, 219, 343, 380, 392, 399, 408, 436, 438, 467, 468, 470, 517, 518, 519, 520, 524, 525, 526, 529, 531, 534, 535, 649, 657, 658, 659, 670, 671, 672, 842, 920, 960, 1001, 1010, 1014, 1015, 1021, 1023], "store_covari": [34, 534, 535, 1013, 1015], "tight": [34, 40, 105, 112, 118, 138, 142, 182, 184, 189, 190, 191, 201, 202, 206, 209, 211, 214, 220, 223, 246, 277, 283, 284, 288, 289, 325, 328, 329, 332, 333, 334, 348, 567, 677, 1020], "302": [34, 35, 257, 612], "611": [35, 255, 257, 337, 340, 526], "auto_examples_classif": 35, "07": [35, 52, 105, 133, 167, 193, 215, 216, 266, 273, 297, 304, 323, 353, 366, 396, 516, 546, 547, 677, 966, 980], "handwritten": [36, 68, 164, 217, 222, 224, 230, 255, 295, 296, 317, 318, 364, 396, 403, 432, 487, 526, 529, 534, 551, 673, 674, 675, 676, 677, 689, 690, 702, 721, 775, 777, 832, 844, 853, 863, 876, 963, 969, 992, 1003], "hierarch": [36, 40, 54, 68, 164, 170, 313, 384, 404, 426, 428, 430, 431, 489, 497, 499, 507, 515, 532, 715, 836, 863, 983, 987, 1002, 1003, 1008, 1011, 1012, 1024], "coin": [36, 68, 164, 396, 404, 426, 447, 978, 1000], "shift": [36, 44, 68, 164, 176, 221, 247, 282, 296, 299, 398, 402, 425, 433, 443, 446, 454, 497, 500, 674, 678, 829, 852, 976, 1002, 1003, 1008, 1012, 1016], "chanc": [36, 49, 68, 164, 197, 205, 212, 215, 257, 263, 266, 267, 305, 343, 353, 370, 396, 400, 685, 687, 689, 690, 693, 701, 739, 741, 770, 777, 808, 966, 974, 982, 1024], "agglom": [36, 44, 47, 68, 164, 396, 426, 430, 487, 676, 762, 836, 1011], "bisect": [36, 68, 164, 428, 432, 497, 1022], "quantiz": [36, 68, 164, 365, 366, 396, 428, 432, 434, 491, 763, 848, 940, 976], "birch": [36, 44, 68, 164, 313, 359, 384, 431, 434, 497, 1002, 1003, 1012, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "toi": [36, 49, 53, 57, 68, 86, 99, 113, 125, 130, 131, 164, 179, 187, 211, 225, 240, 242, 294, 326, 336, 364, 377, 382, 403, 404, 425, 426, 427, 429, 431, 433, 434, 435, 437, 443, 454, 497, 499, 507, 548, 624, 662, 710, 740, 780, 829, 836, 844, 863, 887, 963, 965, 966, 972, 976, 1003], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 56, 67, 68, 164, 170, 425, 426, 430, 431, 448, 497, 499, 507, 863, 986, 1000, 1011, 1016, 1019], "dbscan": [36, 44, 55, 65, 68, 164, 382, 384, 431, 435, 437, 440, 497, 689, 690, 702, 721, 775, 777, 835, 863, 969, 1002, 1003, 1008, 1010, 1012, 1013, 1015, 1016, 1017, 1024], "hdbscan": [36, 44, 68, 164, 429, 497, 863, 956, 986, 1002, 1003, 1024], "optic": [36, 44, 68, 164, 313, 364, 407, 429, 431, 440, 441, 442, 487, 1002, 1003, 1017, 1021, 1022, 1023, 1024], "affin": [36, 44, 68, 164, 299, 363, 373, 384, 395, 401, 425, 426, 430, 437, 439, 447, 497, 520, 676, 680, 689, 690, 702, 721, 775, 777, 879, 960, 963, 966, 1002, 1003, 1008, 1009, 1012, 1018, 1019, 1021, 1023], "propag": [36, 68, 164, 316, 323, 366, 395, 425, 439, 487, 497, 499, 682, 689, 690, 698, 699, 702, 703, 721, 775, 777, 843, 857, 878, 879, 880, 932, 933, 970, 988, 1002, 1003, 1008, 1020, 1023], "agglomer": [36, 68, 164, 363, 396, 404, 430, 487, 585, 591, 630, 781, 786, 843, 1003], "unstructur": [36, 68, 164, 295, 396, 426, 430, 448, 488, 515, 836, 978, 990, 1012], "dendrogram": [36, 68, 164, 170, 396, 426, 430, 489, 1020], "pictur": [36, 68, 164, 230, 248, 366, 385, 396, 401, 404, 447, 478, 479, 506, 987], "greek": [36, 68, 164, 396, 447], "silhouett": [36, 38, 49, 57, 58, 68, 164, 343, 371, 432, 497, 774, 775, 1008, 1012], "embed": [36, 44, 46, 68, 115, 149, 164, 217, 220, 222, 224, 225, 240, 277, 286, 377, 384, 395, 396, 426, 437, 447, 474, 487, 529, 534, 551, 567, 624, 673, 674, 675, 676, 677, 678, 679, 680, 681, 832, 844, 853, 875, 876, 877, 958, 969, 972, 978, 983, 1002, 1003, 1008, 1009, 1019, 1020, 1022], "explor": [37, 113, 114, 222, 223, 258, 259, 265, 266, 306, 311, 329, 343, 353, 365, 368, 370, 377, 390, 396, 403, 457, 781, 784, 792, 864, 955, 962, 963, 965, 971, 973, 974, 976, 990, 995, 1001, 1014], "uniformli": [37, 122, 141, 226, 242, 309, 373, 501, 502, 503, 536, 627, 785, 793, 795, 862, 955, 956, 966, 969, 976, 1012, 1017], "divid": [37, 43, 48, 91, 95, 143, 154, 197, 242, 343, 353, 367, 368, 393, 396, 400, 401, 454, 455, 456, 457, 458, 459, 460, 461, 497, 504, 519, 526, 635, 636, 639, 640, 641, 649, 650, 661, 662, 663, 704, 710, 718, 722, 740, 776, 778, 840, 841, 885, 888, 920, 923, 924, 955, 963, 965, 966, 969, 976, 980, 1001, 1008, 1015, 1016, 1019], "randomli": [37, 48, 50, 61, 71, 88, 93, 113, 125, 161, 164, 168, 201, 214, 230, 233, 247, 252, 263, 275, 317, 353, 358, 380, 382, 383, 396, 400, 403, 406, 434, 443, 497, 500, 504, 508, 516, 522, 530, 531, 536, 544, 545, 548, 549, 550, 595, 596, 656, 664, 675, 679, 701, 779, 780, 839, 877, 891, 892, 893, 894, 965, 967, 969, 972, 974, 978, 982, 999, 1001, 1019, 1023], "quiroz": [37, 57, 176, 181, 258, 260, 304, 342, 343, 344], "fundament": [37, 49, 81, 343, 369, 383, 399, 481, 523, 525, 532, 693, 962, 966], "homogen": [37, 38, 39, 44, 46, 49, 55, 58, 343, 366, 382, 384, 398, 403, 406, 431, 599, 689, 702, 715, 720, 721, 741, 777, 963, 964, 966, 1017], "frequent": [37, 162, 260, 266, 267, 343, 360, 368, 371, 404, 536, 575, 615, 833, 856, 857, 860, 872, 956, 958, 966, 980, 984, 987], "ari": [37, 58, 343, 396, 690, 1013, 1019], "mutual": [37, 38, 49, 55, 58, 140, 147, 164, 403, 405, 431, 577, 580, 581, 584, 585, 591, 592, 593, 594, 689, 690, 700, 739, 741, 770, 777, 955, 962, 966, 967, 1008, 1014, 1024], "mi": [37, 141, 396, 592, 593, 689, 739, 741, 956, 966, 980], "theoret": [37, 57, 149, 395, 396, 403, 538, 539, 624, 689, 710, 740, 883, 955, 963, 965, 966, 968, 978, 980, 981, 989, 990], "nmi": [37, 396, 702, 720, 721, 741], "ami": [37, 49, 58, 396, 689], "score_func": [37, 71, 72, 577, 580, 581, 583, 584, 585, 726, 1008, 1010], "rand_scor": [37, 396, 700, 966, 1020], "adjusted_rand_scor": [37, 38, 49, 58, 343, 396, 689, 700, 726, 741, 770, 966, 1021], "mutual_info_scor": [37, 396, 689, 966, 1016, 1019, 1020], "normalized_mutual_info_scor": [37, 396, 720, 739, 777, 966, 1016, 1022], "adjusted_mutual_info_scor": [37, 38, 49, 58, 396, 690, 700, 739, 741, 770, 966, 1008, 1016, 1020, 1024], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 61, 173, 343], "seaborn": [37, 109, 111, 166, 167, 176, 181, 247, 257, 280, 371, 387, 389, 986], "sn": [37, 109, 111, 166, 167, 176, 181, 247, 257, 280], "color_palett": [37, 109, 111, 247], "colorblind": [37, 109, 111], "vx": 37, "errorbar": [37, 61, 79, 81, 145, 155, 156, 279, 320, 332, 787], "refer": [37, 38, 60, 63, 71, 123, 129, 146, 158, 215, 264, 287, 299, 309, 310, 311, 312, 313, 314, 343, 358, 360, 369, 371, 372, 373, 375, 376, 377, 378, 379, 382, 383, 384, 385, 387, 390, 397, 407, 408, 409, 422, 423, 424, 425, 427, 429, 431, 432, 433, 435, 436, 437, 438, 439, 442, 447, 448, 449, 452, 454, 457, 458, 459, 460, 483, 488, 496, 498, 500, 501, 502, 503, 504, 505, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 529, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 575, 578, 579, 580, 587, 592, 593, 595, 596, 599, 604, 607, 608, 612, 613, 616, 617, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 632, 634, 636, 638, 640, 641, 643, 646, 648, 650, 651, 652, 653, 656, 658, 660, 661, 663, 664, 667, 668, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 689, 690, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 718, 719, 720, 721, 722, 724, 725, 727, 740, 742, 743, 753, 767, 769, 770, 772, 773, 774, 775, 777, 779, 780, 781, 783, 784, 785, 787, 795, 803, 804, 805, 806, 807, 808, 810, 813, 814, 818, 819, 820, 822, 828, 829, 830, 832, 839, 840, 841, 849, 850, 859, 860, 864, 871, 876, 877, 878, 879, 880, 883, 885, 886, 888, 889, 891, 892, 893, 894, 908, 920, 932, 977, 987, 992, 996, 1000, 1001, 1008, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023], "satur": [37, 167, 299], "uniform_labelings_scor": 37, "nwith": [37, 57, 61, 145, 343], "constantli": [37, 197, 990], "unbound": [37, 965, 1022], "cardin": [37, 116, 117, 123, 169, 305, 306, 396, 403, 448, 538, 539, 542, 543, 544, 545, 549, 550, 551, 664, 856, 857, 864, 891, 892, 893, 894, 966, 967, 974, 976, 1022, 1023], "why": [37, 52, 95, 167, 169, 173, 186, 254, 257, 342, 343, 371, 379, 384, 396, 398, 401, 407, 429, 432, 436, 966, 968, 981, 996, 999, 1011], "chart": [37, 262, 967, 994, 1011], "henc": [37, 60, 72, 167, 201, 230, 266, 329, 342, 343, 357, 366, 373, 375, 377, 384, 396, 400, 403, 404, 472, 493, 524, 526, 527, 528, 548, 575, 628, 631, 637, 645, 647, 657, 672, 689, 690, 694, 700, 715, 741, 770, 777, 800, 801, 818, 819, 820, 821, 822, 858, 963, 965, 966, 967, 972, 973, 976, 987, 1015, 1016, 1019, 1020, 1022], "safe": [37, 167, 186, 343, 371, 373, 396, 397, 419, 493, 494, 573, 576, 758, 762, 877, 932, 938, 969, 1014, 1015, 1016, 1021, 1022], "stabil": [37, 114, 167, 201, 219, 262, 299, 343, 384, 393, 431, 635, 639, 655, 821, 840, 841, 859, 871, 919, 956, 962, 965, 976, 987, 992, 1008, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "mislead": [37, 116, 117, 123, 167, 372, 386, 403, 538, 539, 542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894, 1003, 1021], "meaning": [37, 223, 286, 344, 393, 400, 404, 405, 406, 533, 713, 714, 722, 767, 768, 771, 832, 970, 980, 981, 1008, 1024], "140": [37, 53, 68, 403, 495, 501, 502, 503, 540, 541, 967], "plot_adjusted_for_chance_measur": [37, 68], "brendan": [38, 425, 439], "frei": [38, 425, 439, 1018], "delbert": [38, 425, 439], "dueck": [38, 425, 439], "messag": [38, 44, 62, 70, 95, 342, 343, 366, 369, 370, 371, 375, 376, 379, 380, 396, 425, 439, 453, 524, 528, 533, 559, 612, 697, 781, 784, 785, 787, 795, 807, 810, 812, 832, 840, 841, 881, 902, 903, 904, 907, 910, 929, 950, 966, 976, 1008, 1012, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "feb": [38, 425, 439], "affinitypropag": [38, 44, 313, 396, 1008, 1011, 1012, 1016, 1019, 1021, 1022, 1023, 1024], "labels_tru": [38, 49, 55, 64, 396, 689, 690, 699, 700, 702, 715, 720, 721, 739, 741, 770, 777], "af": 38, "prefer": [38, 44, 55, 248, 266, 299, 353, 357, 358, 359, 369, 371, 372, 373, 384, 396, 400, 401, 403, 404, 425, 439, 456, 457, 463, 472, 493, 494, 612, 617, 618, 639, 643, 644, 686, 710, 712, 741, 742, 832, 858, 883, 884, 925, 932, 955, 958, 960, 962, 966, 971, 981, 982, 986, 999, 1009, 1015, 1017, 1021, 1022], "cluster_centers_indic": [38, 439], "cluster_centers_indices_": [38, 425], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 55, 58, 61, 62, 63, 65, 67, 313, 343, 371, 384, 396, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 440, 1000, 1013], "n_clusters_": [38, 49, 55, 63, 426, 430], "homogeneity_scor": [38, 49, 58, 343, 396, 702, 720, 777, 966], "completeness_scor": [38, 49, 58, 310, 343, 396, 720, 721, 777, 966], "silhouette_scor": [38, 49, 58, 60, 343, 371, 396, 1008, 1012, 1014, 1016, 1018, 1022], "sqeuclidean": [38, 435, 442, 762, 763, 764], "872": [38, 974], "871": [38, 80, 81, 398, 459], "753": [38, 342], "cycler": 38, "viridi": [38, 277, 682], "class_memb": 38, "cluster_cent": [38, 61, 63, 64, 446], "330": [38, 68, 232, 318, 343], "plot_affinity_propag": [38, 68, 425, 439], "impos": [39, 57, 126, 191, 305, 382, 396, 401, 403, 404, 512, 642, 962], "simpli": [39, 86, 127, 149, 157, 222, 233, 266, 290, 311, 312, 357, 366, 371, 373, 376, 382, 384, 398, 399, 400, 401, 403, 404, 470, 680, 746, 749, 850, 922, 958, 966, 967, 968, 969, 980, 993, 1001, 1015, 1016, 1017], "There": [39, 46, 149, 215, 222, 235, 248, 252, 254, 257, 342, 364, 366, 368, 371, 372, 373, 376, 382, 384, 385, 387, 393, 395, 396, 401, 403, 404, 405, 431, 437, 447, 519, 538, 539, 544, 545, 573, 574, 576, 591, 630, 956, 962, 963, 964, 965, 966, 969, 973, 976, 980, 981, 982, 985, 989, 1000, 1008, 1016], "singl": [39, 48, 52, 53, 55, 58, 61, 62, 72, 108, 111, 118, 119, 120, 128, 133, 146, 149, 155, 161, 164, 168, 170, 173, 181, 197, 199, 236, 238, 247, 253, 266, 295, 313, 329, 342, 343, 344, 348, 350, 353, 357, 358, 365, 366, 371, 376, 378, 379, 380, 382, 383, 384, 394, 395, 397, 399, 400, 401, 403, 404, 405, 419, 422, 425, 426, 430, 431, 432, 434, 439, 449, 451, 452, 478, 479, 481, 491, 494, 519, 538, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 567, 577, 584, 585, 587, 591, 612, 617, 619, 628, 651, 652, 658, 661, 662, 663, 675, 677, 679, 695, 706, 707, 708, 709, 720, 721, 722, 725, 758, 769, 779, 780, 781, 784, 785, 795, 802, 805, 806, 808, 809, 812, 820, 823, 824, 828, 840, 841, 842, 852, 853, 856, 857, 858, 863, 864, 878, 879, 891, 892, 893, 894, 899, 930, 934, 953, 955, 961, 962, 963, 966, 967, 969, 971, 973, 974, 976, 980, 981, 982, 986, 990, 992, 999, 1001, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "unstabl": [39, 66, 167, 396, 398, 399, 674, 678, 919, 920, 982, 1012, 1013, 1015, 1020, 1022], "quickli": [39, 236, 294, 309, 368, 371, 372, 400, 403, 677, 962, 969, 970, 990, 1001, 1019], "fight": [39, 990], "percol": 39, "distanc": [39, 40, 55, 57, 60, 61, 65, 67, 77, 81, 83, 100, 161, 164, 170, 183, 198, 218, 220, 223, 230, 277, 279, 280, 285, 287, 289, 290, 299, 304, 309, 313, 314, 342, 343, 357, 368, 380, 382, 384, 393, 396, 398, 401, 402, 406, 407, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 437, 440, 441, 442, 443, 444, 446, 447, 448, 453, 454, 455, 456, 457, 458, 459, 460, 461, 523, 525, 532, 592, 593, 600, 604, 605, 607, 608, 613, 643, 644, 651, 653, 659, 660, 661, 662, 663, 673, 674, 675, 677, 678, 679, 680, 681, 684, 688, 709, 718, 742, 744, 746, 747, 748, 749, 752, 753, 754, 755, 756, 757, 762, 763, 764, 765, 774, 775, 778, 812, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 862, 877, 881, 883, 885, 887, 888, 889, 891, 892, 893, 894, 956, 960, 963, 964, 966, 972, 976, 978, 980, 981, 987, 999, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "merg": [39, 41, 46, 51, 312, 369, 371, 374, 379, 382, 385, 396, 425, 426, 427, 430, 431, 448, 801, 1000, 1008, 1015], "exagger": [39, 167, 677, 963], "behaviour": [39, 100, 198, 199, 215, 331, 371, 384, 396, 403, 544, 545, 549, 550, 587, 881, 891, 892, 939, 955, 956, 966, 976, 1016, 1019, 1020, 1023], "shortest": [39, 376, 380, 673, 925, 963, 1021], "mechan": [39, 338, 342, 358, 373, 396, 404, 449, 842, 964, 982, 990], "resembl": 39, "brittl": [39, 396], "pronounc": [39, 40, 52, 154], "kneighbors_graph": [39, 44, 62, 67, 277, 384, 396, 426, 430, 825, 826, 827, 829, 831, 833, 834, 835, 837, 969, 1008, 1012, 1017], "geometri": [39, 396, 963, 969], "instabl": [39, 167, 287, 437, 520, 524, 528, 680, 1015, 1018, 1021], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 56, 62, 67, 384, 396, 425, 427, 430, 1000, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1023], "1500": [39, 50, 57, 62, 67, 92, 218, 222, 242], "knn_graph": 39, "include_self": [39, 44, 67, 836, 837, 1012], "996": [39, 68, 265], "plot_agglomerative_clust": [39, 68], "waveform": 40, "euclidean": [40, 57, 58, 183, 230, 277, 285, 309, 314, 343, 393, 395, 396, 401, 402, 403, 404, 406, 425, 426, 429, 430, 431, 435, 437, 442, 445, 448, 516, 522, 574, 600, 604, 607, 608, 661, 663, 675, 677, 680, 681, 684, 746, 747, 753, 754, 755, 756, 762, 763, 764, 765, 774, 775, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 877, 956, 960, 964, 967, 969, 978, 987, 1012, 1015, 1016, 1017, 1018, 1024], "cityblock": [40, 44, 396, 435, 442, 746, 762, 763, 764, 969], "invari": [40, 368, 384, 396, 406, 599, 674, 731, 799, 800, 962, 963, 966, 981, 987, 1016, 1019, 1020, 1021], "ie": [40, 66, 96, 425, 689, 752, 962, 976], "inter": [40, 116, 353, 403, 701, 926], "character": [40, 215, 347, 396, 400, 963], "ill": [40, 82, 202, 456, 457, 463, 635, 636, 639, 640, 641, 667, 668, 962, 965, 1000, 1018], "recov": [40, 65, 82, 96, 97, 103, 119, 149, 166, 181, 196, 197, 218, 344, 398, 402, 405, 408, 445, 518, 544, 962, 963, 965, 987, 1000, 1014], "put": [40, 58, 138, 149, 151, 231, 237, 242, 293, 301, 313, 322, 333, 334, 339, 359, 373, 375, 376, 379, 406, 428, 432, 444, 500, 599, 632, 646, 779, 860, 864, 872, 885, 886, 887, 888, 889, 910, 956, 963, 965, 966, 967, 973, 976, 989, 993, 995, 1001, 1020], "cc": [40, 369], "patheffect": 40, "pairwise_dist": [40, 384, 396, 407, 426, 429, 430, 431, 435, 442, 673, 681, 746, 755, 763, 764, 774, 775, 827, 829, 831, 835, 964, 1008, 1012, 1014, 1016, 1017, 1019, 1020], "sqr": 40, "sign": [40, 79, 86, 96, 99, 112, 181, 247, 293, 337, 371, 396, 401, 404, 529, 567, 574, 591, 620, 621, 643, 644, 651, 653, 659, 660, 661, 662, 719, 726, 883, 887, 918, 920, 931, 962, 966, 971, 976, 980, 981, 1000, 1008, 1012, 1017, 1021, 1023], "phi": [40, 401, 727, 849, 958, 966, 976, 981], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "f7bd01": 40, "377eb8": [40, 44, 62, 63, 226], "f781bf": [40, 44, 62, 63], "set_label": [40, 152, 230], "avg_dist": [40, 765], "set_path_effect": 40, "withstrok": 40, "foreground": [40, 66], "cividi": 40, "vmin": [40, 82, 95, 98, 106, 152, 155, 176, 181, 188, 213, 231, 246, 252, 295, 329], "45": [40, 64, 73, 107, 142, 154, 169, 186, 197, 215, 264, 268, 269, 318, 329, 353, 400, 403, 404, 549, 550, 612, 619, 772, 779, 887, 956, 966, 974, 985, 997, 1004, 1008, 1011], "interclass": 40, "054": [40, 68, 303, 307], "plot_agglomerative_clustering_metr": [40, 68], "hierarchi": [41, 170, 435, 441, 448, 971, 1000], "plot_dendrogram": 41, "kwarg": [41, 98, 373, 378, 410, 423, 449, 520, 523, 525, 602, 616, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 683, 684, 685, 687, 726, 823, 824, 842, 843, 847, 898, 917, 1015, 1019, 1021], "children_": [41, 426, 430, 448], "current_count": 41, "child_idx": 41, "leaf": [41, 115, 125, 127, 347, 351, 396, 403, 407, 426, 427, 428, 429, 430, 431, 435, 442, 448, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 891, 892, 893, 894, 895, 896, 969, 982, 1011, 1013, 1015, 1019, 1022], "linkage_matrix": 41, "column_stack": [41, 293, 301], "distances_": [41, 426, 430, 1020], "distance_threshold": [41, 426, 430, 1017, 1020], "truncate_mod": 41, "parenthesi": [41, 371], "105": [41, 68, 190, 216, 303], "plot_agglomerative_dendrogram": [41, 68], "scalabl": [42, 44, 62, 164, 172, 174, 250, 273, 314, 343, 371, 396, 403, 404, 433, 476, 487, 574, 625, 787, 798, 807, 809, 821, 844, 853, 855, 883, 885, 888, 889, 958, 961, 963, 966, 979, 981, 990, 1008, 1011, 1012, 1018, 1019, 1022, 1023], "hundr": [42, 121, 219, 303, 366, 400, 403, 546, 547, 963, 1019], "thousand": [42, 230, 232, 303, 343, 366, 396, 403, 840, 841, 888, 963, 1001, 1017, 1019], "million": [42, 56, 154, 173, 404, 406, 677, 963, 981, 990, 1022, 1023], "chose": [42, 167, 996], "usag": [42, 53, 71, 74, 85, 99, 120, 143, 167, 168, 227, 231, 251, 280, 286, 288, 295, 325, 344, 357, 370, 371, 373, 374, 378, 379, 381, 384, 385, 387, 396, 400, 401, 406, 407, 429, 431, 435, 474, 546, 547, 594, 633, 643, 644, 645, 651, 653, 654, 661, 662, 663, 664, 665, 762, 765, 774, 775, 883, 891, 892, 893, 894, 920, 955, 958, 965, 966, 967, 969, 981, 988, 992, 996, 1003, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "enjoi": 42, "edit": [42, 368, 370, 371, 374, 375, 379, 382, 387, 515, 519, 813, 960, 962, 967, 973, 1001], "158": [42, 403, 654], "62": [42, 110, 168, 173, 215, 251, 296, 314, 318, 353, 366, 396, 478, 479, 823, 824, 1004, 1011], "manojkumarsivaraj334": 42, "joblib": [42, 54, 72, 277, 310, 366, 369, 371, 374, 380, 382, 384, 387, 389, 390, 395, 397, 407, 422, 426, 429, 430, 431, 433, 435, 437, 442, 443, 446, 449, 452, 457, 493, 516, 520, 521, 522, 524, 527, 528, 530, 531, 533, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 579, 587, 595, 617, 619, 624, 632, 636, 638, 640, 642, 643, 644, 646, 648, 650, 651, 653, 661, 664, 673, 674, 675, 676, 677, 678, 679, 758, 762, 765, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 825, 826, 829, 831, 833, 834, 836, 837, 842, 843, 844, 845, 878, 879, 932, 933, 934, 936, 951, 966, 987, 1008, 1009, 1011, 1013, 1015, 1016, 1017, 1019, 1020, 1023], "cpu_count": [42, 277, 934], "n_center": [42, 497], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 57, 58, 164, 278, 291, 302, 313, 343, 367, 396, 427, 428, 431, 432, 433, 434, 437, 444, 445, 447, 489, 534, 616, 830, 988, 1003, 1008, 1012, 1015, 1020, 1024], "subcluster_centers_": [42, 427], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 64], "256": [42, 48, 53, 121, 208, 216, 305, 358, 366, 396, 403, 434, 453, 522, 531, 548, 839, 871, 881, 1001, 1022], "max_no_improv": [42, 61, 64, 434, 522, 523, 524, 531, 1022, 1023], "t_mini_batch": [42, 64], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 58, 60, 61, 63, 64, 95, 313, 343, 425, 428, 432, 433, 434, 1000], "045": [42, 58, 68, 707], "plot_birch_vs_minibatchkmean": [42, 68], "bisectingkmean": [43, 396, 1022, 1023, 1024], "__doc__": [43, 75, 154, 235, 245, 384], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 62], "variant": [43, 95, 160, 163, 164, 257, 312, 313, 343, 344, 377, 396, 399, 401, 404, 406, 434, 445, 475, 478, 479, 497, 500, 528, 544, 545, 550, 600, 604, 607, 608, 612, 615, 623, 624, 626, 630, 657, 689, 782, 786, 788, 789, 790, 799, 805, 826, 844, 880, 956, 962, 963, 964, 965, 966, 968, 969, 980, 987, 1001, 1008, 1016], "algorithm_nam": 43, "algo": [43, 105], "hide": [43, 379, 818, 819, 820, 821, 822, 1011, 1016], "flat": [43, 95, 101, 168, 218, 219, 220, 255, 396, 404, 425, 431, 433, 446, 494, 973, 1000, 1008, 1009, 1024], "label_out": 43, "026": [43, 68, 86], "plot_bisect_kmean": [43, 68], "null": [44, 71, 167, 168, 169, 257, 263, 396, 400, 633, 654, 665, 689, 715, 741, 777, 808, 962, 963, 966, 981, 1018], "mismatch": [44, 965, 1017], "warn": [44, 53, 62, 72, 197, 212, 260, 277, 294, 295, 302, 303, 306, 309, 357, 360, 371, 374, 375, 376, 384, 390, 404, 408, 432, 434, 444, 481, 518, 535, 538, 539, 542, 543, 544, 545, 549, 550, 551, 556, 557, 558, 559, 560, 561, 563, 587, 615, 621, 655, 675, 678, 679, 697, 698, 713, 714, 722, 767, 768, 771, 818, 819, 820, 822, 847, 848, 883, 884, 886, 887, 888, 889, 891, 892, 893, 894, 903, 904, 910, 920, 932, 934, 936, 952, 953, 955, 966, 976, 999, 1008, 1010, 1011, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "noisy_circl": [44, 62], "noisy_moon": [44, 62], "no_structur": [44, 62], "anisotropicli": [44, 62], "170": [44, 57, 58, 62, 297, 377], "x_aniso": [44, 57, 62], "aniso": [44, 62], "plot_num": [44, 62, 226], "default_bas": [44, 62], "quantil": [44, 53, 63, 91, 110, 112, 164, 175, 216, 299, 302, 303, 382, 403, 423, 424, 443, 504, 537, 545, 547, 642, 655, 707, 729, 732, 734, 806, 848, 860, 861, 862, 872, 873, 966, 976, 988, 1003, 1008, 1012, 1015, 1017, 1021, 1022, 1024], "damp": [44, 396, 425, 439], "min_sampl": [44, 49, 65, 382, 384, 396, 407, 429, 431, 435, 441, 442, 656, 962, 1017, 1021], "xi": [44, 65, 368, 396, 399, 404, 435, 441, 494, 980, 1019], "min_cluster_s": [44, 65, 396, 431, 435, 441, 1017], "allow_single_clust": [44, 431], "hdbscan_min_cluster_s": 44, "hdbscan_min_sampl": 44, "220": [44, 151, 159, 196, 216, 1008], "i_dataset": [44, 62, 226], "algo_param": [44, 62], "param": [44, 55, 61, 62, 71, 121, 123, 124, 218, 232, 255, 257, 265, 269, 281, 294, 371, 373, 384, 403, 406, 410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 673, 674, 675, 676, 677, 779, 780, 781, 784, 785, 793, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 955, 1014, 1018, 1019, 1021, 1022], "estimate_bandwidth": [44, 63, 396, 433, 446], "symmetr": [44, 122, 158, 170, 199, 384, 394, 396, 437, 447, 448, 459, 504, 512, 514, 675, 679, 680, 689, 690, 700, 701, 702, 708, 712, 720, 721, 739, 741, 747, 769, 777, 779, 780, 952, 955, 962, 966, 969], "meanshift": [44, 313, 396, 425, 1011, 1012, 1013, 1016, 1018, 1019, 1022, 1023, 1024], "bin_seed": [44, 63, 433, 446, 1019], "two_mean": 44, "spectralclust": [44, 313, 396, 425, 969, 1008, 1009, 1018, 1020, 1021, 1022, 1023, 1024], "nearest_neighbor": [44, 437, 676], "average_linkag": 44, "gmm": [44, 164, 241, 243, 246, 247, 248, 249, 489, 497, 780, 800, 965, 1008, 1009, 1012, 1013, 1014], "gaussianmixtur": [44, 57, 243, 244, 245, 246, 247, 248, 402, 779, 1014, 1016, 1017, 1021, 1022], "covariance_typ": [44, 243, 244, 246, 247, 248, 779, 780], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 62, 295, 379, 380], "catch_warn": [44, 62, 294, 295], "filterwarn": [44, 62, 212, 294, 295, 371, 976], "fulli": [44, 55, 116, 122, 357, 365, 366, 384, 396, 402, 403, 405, 428, 432, 542, 543, 549, 550, 891, 892, 893, 894, 895, 897, 955, 956, 962, 971, 979, 986, 1021, 1022], "t1": [44, 46, 62, 212, 220, 223, 226], "ff7f00": [44, 62, 226], "4daf4a": [44, 62], "a65628": [44, 62], "984ea3": [44, 62], "999999": [44, 62], "e41a1c": [44, 62], "dede00": [44, 62, 63], "000000": [44, 167, 186, 215, 257, 303, 721], "transax": [44, 62, 222, 226, 244, 285, 301], "389": [44, 68, 201, 216, 578, 579, 1001], "plot_cluster_comparison": [44, 68], "bad": [45, 60, 61, 150, 167, 342, 353, 371, 396, 406, 677, 730, 955, 962, 963, 968, 974, 1000, 1008], "eight": [45, 1001], "deliv": [45, 357, 990], "though": [45, 55, 146, 173, 176, 263, 282, 301, 303, 343, 344, 353, 357, 365, 368, 371, 373, 383, 384, 396, 401, 402, 403, 404, 405, 684, 788, 790, 883, 955, 956, 958, 963, 966, 969, 976, 980, 1001, 1016], "3d": [45, 48, 67, 90, 101, 102, 194, 218, 220, 222, 404, 491, 571, 929, 1015, 1016, 1018], "mplot3d": [45, 67, 90, 101, 102, 168, 194, 218, 220], "noqa": [45, 67, 90, 101, 102, 122, 161, 162, 168, 194, 218, 220, 268, 269, 311, 375, 564, 565, 612, 784, 785, 955, 1017], "f401": [45, 67, 90, 101, 102, 168, 194, 218, 220], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "est": [45, 129, 167, 234, 301, 311, 353, 390, 403, 547, 719, 848, 955, 966, 976, 980, 1019, 1020], "elev": [45, 67, 90, 101, 102, 168, 194, 218, 222], "azim": [45, 67, 90, 101, 102, 168, 194, 218, 222], "134": [45, 53, 102, 121, 257, 1011], "xaxi": [45, 90, 101, 102, 194, 218, 220, 223, 277, 282, 342], "set_ticklabel": [45, 90, 101, 102, 194, 342], "zaxi": [45, 90, 101, 102, 194, 218], "petal": [45, 90, 104, 106, 118, 239, 311, 314, 368, 397, 896, 982, 998, 999], "sepal": [45, 90, 104, 106, 118, 151, 180, 239, 311, 314, 326, 368, 976, 998, 999], "length": [45, 70, 89, 90, 92, 104, 106, 118, 149, 150, 151, 154, 155, 157, 173, 180, 233, 236, 239, 311, 314, 326, 344, 364, 368, 371, 379, 380, 384, 397, 401, 403, 404, 406, 430, 475, 493, 494, 497, 500, 508, 536, 548, 566, 567, 574, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 617, 631, 632, 635, 636, 637, 638, 639, 641, 642, 645, 646, 647, 648, 666, 669, 765, 781, 784, 785, 795, 809, 811, 814, 815, 817, 825, 826, 827, 829, 831, 870, 896, 903, 905, 909, 925, 926, 937, 940, 965, 972, 976, 992, 998, 999, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1024], "set_zlabel": [45, 90, 194], "setosa": [45, 90, 102, 104, 266, 267, 368, 489, 992, 999], "versicolour": [45, 90, 102, 104, 368, 999], "virginica": [45, 90, 102, 104, 266, 267, 368, 489, 966, 999], "text3d": [45, 102], "reorder": [45, 102, 384, 682, 703, 987, 1016], "314": [45, 68], "plot_cluster_iri": [45, 68], "voxel": [46, 66, 570], "multipl": [46, 69, 76, 92, 105, 117, 118, 164, 167, 191, 231, 257, 269, 279, 309, 357, 358, 359, 365, 367, 368, 371, 373, 374, 375, 376, 382, 384, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 429, 445, 449, 451, 452, 454, 459, 473, 476, 477, 480, 481, 482, 488, 489, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 536, 538, 539, 540, 541, 544, 545, 546, 547, 548, 566, 584, 592, 593, 595, 596, 612, 617, 619, 624, 625, 626, 627, 631, 632, 635, 637, 638, 639, 642, 645, 646, 647, 648, 651, 652, 653, 656, 658, 661, 663, 664, 674, 675, 677, 678, 679, 706, 707, 712, 729, 730, 732, 734, 735, 737, 769, 772, 775, 779, 780, 781, 783, 784, 785, 786, 787, 793, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 809, 813, 814, 815, 816, 817, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 845, 848, 860, 864, 872, 875, 876, 883, 884, 885, 888, 899, 914, 919, 920, 937, 940, 958, 961, 962, 963, 967, 968, 969, 973, 974, 976, 979, 980, 982, 986, 987, 992, 1001, 1008, 1009, 1011, 1014, 1015, 1018, 1019, 1020, 1021, 1023, 1024], "partli": [46, 753], "procedur": [46, 56, 122, 146, 177, 185, 247, 259, 302, 306, 329, 342, 353, 371, 373, 382, 383, 384, 385, 394, 395, 398, 400, 401, 403, 405, 516, 522, 523, 525, 530, 531, 532, 538, 539, 540, 541, 544, 545, 578, 580, 587, 594, 629, 657, 659, 672, 712, 769, 840, 841, 860, 872, 937, 955, 962, 968, 974, 976, 979, 980, 981, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "solut": [46, 176, 181, 186, 188, 201, 202, 211, 226, 232, 312, 329, 369, 373, 384, 393, 396, 398, 400, 401, 404, 405, 406, 434, 436, 438, 516, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 534, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 595, 631, 633, 635, 637, 639, 640, 641, 643, 645, 647, 649, 650, 651, 652, 653, 654, 657, 659, 661, 662, 663, 664, 665, 667, 668, 670, 671, 672, 779, 780, 795, 832, 840, 841, 959, 960, 962, 963, 965, 970, 972, 980, 981, 985, 990, 996, 999, 1001, 1008, 1011, 1021, 1022, 1023], "closest": [46, 64, 373, 396, 425, 427, 428, 432, 433, 434, 444, 638, 763, 764, 813, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 957, 960, 967, 969, 999], "partit": [46, 66, 70, 125, 127, 257, 295, 393, 394, 396, 400, 403, 434, 436, 438, 447, 496, 542, 543, 544, 545, 548, 549, 550, 689, 690, 700, 770, 831, 891, 892, 893, 894, 965, 969, 972, 976, 982, 1001], "cluster_qr": [46, 396, 437, 447, 1022], "qr": [46, 199, 519, 526, 529, 919, 920, 963, 1014], "pivot": [46, 268, 269], "cheung": [46, 1009], "andrew": [46, 396, 447, 676, 680, 702, 721, 777, 858, 970, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "knyazev": [46, 396, 437, 447, 680, 1018, 1021, 1022], "ucdenv": 46, "skimag": [46, 47, 365, 1000], "spectral_clust": [46, 66, 1016, 1018, 1020, 1021, 1022, 1023], "orig_coin": [46, 47], "speed": [46, 47, 57, 70, 98, 162, 168, 183, 186, 190, 235, 277, 311, 318, 342, 344, 359, 360, 371, 374, 380, 382, 384, 394, 396, 401, 403, 404, 407, 428, 429, 432, 433, 434, 435, 437, 442, 444, 445, 446, 447, 516, 517, 595, 612, 617, 618, 619, 624, 631, 632, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 649, 666, 669, 677, 779, 780, 787, 807, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 858, 920, 955, 963, 965, 967, 980, 990, 1000, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "down": [46, 47, 81, 212, 213, 220, 230, 231, 260, 296, 299, 353, 365, 374, 379, 398, 401, 428, 435, 441, 575, 578, 579, 624, 634, 758, 762, 765, 858, 861, 862, 873, 885, 888, 895, 962, 992, 1000, 1016], "alias": [46, 47, 369, 371, 374, 432, 444, 1008, 1012, 1022], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 1000], "anti_alias": [46, 47, 1000], "img_to_graph": [46, 66, 404, 1011, 1021], "exponenti": [46, 75, 149, 154, 282, 287, 402, 403, 406, 434, 521, 539, 544, 599, 604, 607, 624, 628, 742, 743, 823, 824, 828, 840, 841, 858, 958, 962, 966, 981, 999, 1015, 1021], "beta": [46, 85, 166, 377, 394, 396, 399, 521, 523, 525, 532, 629, 713, 714, 720, 726, 767, 777, 779, 966, 999, 1010, 1013, 1015, 1017, 1018], "voronoi": [46, 66, 396], "n_region": 46, "extra": [46, 118, 234, 277, 344, 369, 370, 372, 375, 384, 403, 404, 423, 428, 432, 444, 449, 517, 542, 543, 551, 575, 576, 685, 686, 687, 804, 827, 893, 894, 910, 965, 969, 1008, 1011, 1013, 1014, 1016, 1021, 1023], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 437, 447, 673, 676, 680, 1018, 1021, 1022, 1023], "amg": [46, 66, 396, 437, 447, 676, 680, 1018, 1022, 1023], "pyamg": [46, 387, 389, 396, 437, 447, 676, 680], "toler": [46, 73, 161, 188, 190, 213, 214, 344, 366, 373, 380, 396, 408, 428, 432, 437, 444, 447, 456, 457, 463, 467, 468, 469, 516, 517, 518, 520, 521, 525, 526, 527, 528, 529, 530, 532, 533, 544, 545, 546, 547, 612, 631, 632, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 661, 663, 664, 666, 667, 668, 669, 673, 674, 675, 676, 678, 679, 680, 823, 824, 828, 832, 840, 841, 878, 879, 883, 884, 885, 886, 887, 888, 889, 952, 962, 966, 980, 981, 997, 1020, 1021, 1022, 1023], "eigen_tol": [46, 437, 447, 676, 680, 1009, 1022, 1023], "todo": [46, 230, 375, 379, 384, 396, 1024], "21243": 46, "assign_label": [46, 396, 437, 447], "individu": [46, 60, 80, 108, 113, 129, 133, 141, 158, 164, 165, 171, 197, 215, 227, 260, 262, 309, 337, 358, 372, 375, 378, 380, 384, 386, 393, 397, 400, 403, 404, 422, 437, 447, 449, 481, 486, 488, 494, 540, 541, 544, 545, 547, 548, 550, 552, 553, 554, 555, 588, 594, 595, 617, 618, 628, 630, 642, 643, 644, 653, 656, 657, 658, 659, 660, 661, 662, 663, 672, 697, 704, 712, 718, 734, 735, 769, 781, 795, 811, 815, 816, 818, 819, 820, 821, 822, 841, 844, 852, 853, 855, 856, 857, 860, 862, 863, 868, 869, 870, 883, 884, 966, 967, 976, 981, 996, 1001, 1003, 1009, 1012, 1014, 1020, 1022], "comment": [46, 342, 369, 370, 371, 372, 374, 375, 379, 472, 564, 966], "paus": 46, "21194": [46, 1021], "43": [46, 156, 194, 230, 257, 277, 368, 376, 781, 795, 864], "083": [46, 68, 102, 107, 255, 343], "plot_coin_segment": [46, 68], "spatial": [47, 49, 55, 170, 181, 214, 295, 366, 384, 396, 407, 429, 431, 435, 437, 442, 664, 677, 684, 744, 747, 762, 763, 764, 765, 774, 775, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 962, 969, 976, 1010, 1014, 1021, 1024], "constrain": [47, 95, 119, 126, 168, 188, 293, 310, 327, 329, 364, 384, 395, 396, 401, 403, 494, 546, 547, 620, 643, 675, 679, 808, 962, 965, 1012], "piec": [47, 198, 358, 965], "grid_to_graph": [47, 51, 54, 396, 404, 1000, 1021], "st": [47, 67, 257, 314, 1011, 1014, 1016], "167": [47, 56, 68, 377, 1008], "4697": 47, "433": [47, 68, 368], "plot_coin_ward_segment": [47, 68], "vq": [48, 58], "palac": 48, "china": [48, 396, 491, 492, 569], "615": 48, "literatur": [48, 154, 257, 343, 368, 371, 377, 379, 382, 383, 396, 399, 401, 403, 428, 432, 434, 486, 521, 523, 525, 532, 540, 541, 573, 576, 693, 779, 955, 958, 962, 966, 1018], "codebook": [48, 551, 813], "palett": [48, 167, 257, 280], "byte": [48, 53, 404, 472, 488, 493, 494, 567, 573, 574, 576, 931, 999, 1001, 1008, 1015, 1016, 1023], "wherea": [48, 53, 67, 80, 109, 125, 201, 211, 258, 259, 260, 266, 304, 338, 359, 385, 400, 403, 550, 643, 644, 783, 799, 811, 958, 965, 967, 969, 976, 982, 1021], "rgb": [48, 366, 404, 478, 479, 568, 569, 572], "gif": 48, "pick": [48, 55, 60, 170, 233, 265, 313, 317, 366, 371, 375, 396, 403, 428, 445, 508, 658, 893, 894, 955, 962, 963, 965, 980, 1019], "019": [48, 368, 377, 456], "040": [48, 58], "081": [48, 255, 273, 974], "robertlayton": 48, "pairwise_distances_argmin": [48, 64, 313, 764, 1016, 1022, 1023, 1024], "load_sample_imag": [48, 568, 569, 1017], "n_color": 48, "photo": 48, "jpg": [48, 491, 569], "255": [48, 98, 277, 295, 305, 312, 366, 478, 479, 546, 547], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 236], "book": [48, 70, 428, 432, 434, 813, 818, 822, 962, 963, 964, 967, 984, 1020], "alongsid": [48, 371, 377, 384, 387, 405, 966, 973, 986, 987], "538": [48, 68, 76], "plot_color_quant": [48, 68], "750": [49, 55, 117, 257], "math": [49, 70, 235, 257, 258, 368, 371, 387, 748], "db": [49, 55, 396], "n_noise_": 49, "come": [49, 67, 70, 80, 86, 100, 101, 149, 231, 309, 337, 342, 343, 357, 359, 364, 368, 371, 372, 375, 379, 382, 384, 387, 396, 400, 403, 404, 424, 435, 441, 457, 535, 690, 777, 802, 885, 888, 955, 956, 960, 963, 965, 969, 972, 981, 992, 1008, 1019, 1022, 1024], "handi": [49, 71, 343, 344, 372, 1024], "883": 49, "917": 49, "916": 49, "626": [49, 183], "unique_label": [49, 55, 343, 373, 380], "core_samples_mask": 49, "zeros_lik": [49, 199, 266], "bool": [49, 66, 81, 162, 215, 351, 371, 408, 409, 410, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 504, 507, 508, 509, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 682, 683, 685, 687, 688, 692, 693, 694, 696, 697, 698, 699, 710, 711, 712, 713, 714, 715, 722, 725, 726, 734, 735, 738, 740, 745, 747, 751, 752, 753, 758, 762, 766, 767, 768, 769, 771, 773, 776, 778, 779, 780, 781, 784, 785, 786, 787, 795, 799, 800, 803, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 902, 903, 904, 914, 920, 921, 928, 931, 937, 939, 947, 952, 953, 954, 956, 1017, 1020, 1021], "core_sample_indices_": [49, 429], "class_member_mask": 49, "markerfacecolor": [49, 55, 61, 63, 64], "219": [49, 68, 256], "plot_dbscan": [49, 68, 407, 429], "constitut": [50, 384, 400, 403, 435, 441, 573, 574, 576, 970], "standpoint": 50, "proce": [50, 143, 178, 369, 375, 399, 400, 403, 425, 962], "reassign": [50, 371, 432, 434, 1009, 1013], "success": [50, 164, 250, 264, 273, 353, 391, 396, 400, 401, 403, 500, 549, 564, 781, 784, 785, 802, 888, 969, 990, 996, 1000, 1003, 1020], "becom": [50, 55, 57, 72, 80, 199, 259, 277, 300, 304, 329, 342, 353, 365, 371, 373, 375, 379, 384, 385, 396, 398, 403, 404, 406, 425, 435, 439, 440, 442, 566, 573, 574, 576, 604, 612, 643, 644, 661, 663, 857, 883, 884, 890, 961, 962, 963, 965, 969, 976, 981, 999, 1001, 1009, 1016, 1017, 1020, 1021, 1022, 1023], "fetch_olivetti_fac": [50, 95, 117, 234, 366, 1016, 1017, 1018], "olivetti": [50, 95, 117, 364, 401, 480, 1003, 1008, 1016], "ndownload": 50, "figshar": 50, "5976027": 50, "extract_patches_2d": [50, 98, 404, 1016], "patch_siz": [50, 98, 404, 568, 569], "buffer": [50, 1021], "max_patch": [50, 404, 568, 569, 1016], "4i": 50, "dt": [50, 98, 109, 130, 403, 404, 982], "2400": 50, "700": [50, 166, 171, 311], "800": [50, 120, 312, 366, 569, 677], "1100": 50, "1200": [50, 121, 299, 403], "1300": 50, "1400": [50, 459], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 312], "2200": [50, 366, 478], "2300": [50, 186], "ntrain": 50, "106": [50, 68, 239, 368, 859, 960, 1009], "plot_dict_face_patch": [50, 68], "agglo": [51, 430, 1000], "featureagglomer": [51, 54, 425, 426, 983, 1000, 1011, 1017, 1018, 1021, 1022], "x_reduc": [51, 90, 127, 430, 1000], "x_restor": 51, "images_restor": 51, "vmax": [51, 82, 95, 98, 106, 152, 155, 176, 181, 188, 213, 231, 246, 252, 295, 329], "181": [51, 68, 296, 331, 340, 377], "plot_digits_agglomer": [51, 68], "rich": [52, 379, 382, 396, 424, 990, 1019, 1022], "richer": [52, 105, 396], "uneven": [52, 252, 396, 400], "patholog": [52, 965, 1014], "clean": [52, 71, 196, 353, 363, 369, 402, 972, 976, 1018], "fring": [52, 396], "sensibl": [52, 161, 343, 373, 962, 976], "resampl": [52, 122, 154, 167, 215, 281, 380, 382, 540, 541, 940, 987, 1017, 1021], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 218, 219, 220, 673, 674, 675, 677, 963, 1009, 1014, 1018, 1022, 1023], "657": [52, 68, 257], "plot_digits_linkag": [52, 68], "raccoon": [53, 98, 401], "addition": [53, 72, 112, 167, 197, 215, 310, 312, 343, 371, 382, 394, 404, 595, 596, 631, 637, 656, 860, 955, 956, 966, 974, 986, 1014], "adapt": [53, 55, 109, 121, 122, 152, 242, 243, 301, 358, 369, 370, 371, 380, 396, 403, 406, 500, 501, 502, 503, 661, 662, 663, 840, 841, 962, 968, 970, 976, 980, 986, 987, 1016, 1017, 1024], "pooch": [53, 371, 387, 389], "instal": [53, 239, 277, 309, 310, 311, 312, 313, 314, 357, 358, 360, 371, 372, 374, 375, 377, 379, 382, 383, 389, 392, 396, 404, 437, 447, 481, 676, 680, 934, 982, 984, 1001, 1015, 1016, 1017, 1021, 1022], "raccoon_fac": [53, 98], "nbyte": [53, 230], "768": 53, "1024": [53, 105, 434, 453, 523, 881, 1021], "uint8": [53, 98, 365, 482, 491, 492, 1020], "786432": 53, "unsign": [53, 99, 366, 567, 931], "786": [53, 71], "kilobyt": 53, "shade": [53, 180, 280, 285, 325, 401], "behind": [53, 80, 373, 375, 379, 395, 398, 403, 965, 969, 978], "simplest": [53, 400, 963, 966, 999, 1000], "certainli": [53, 70, 343], "compressed_raccoon_uniform": 53, "_discret": [53, 302, 306], "237": [53, 294, 297, 302, 306, 999], "futurewarn": [53, 176, 302, 306, 309, 371, 379, 1015, 1016, 1017, 1019, 1021, 1024], "onward": [53, 302, 306, 857, 1012], "subsampl": [53, 105, 121, 124, 168, 197, 214, 215, 253, 302, 306, 311, 443, 544, 545, 546, 547, 548, 617, 664, 686, 784, 785, 809, 848, 860, 872, 899, 909, 958, 962, 987, 989, 1008, 1018, 1022, 1024], "200_000": [53, 302, 306, 848, 1024], "silenc": [53, 302, 306, 481], "disabl": [53, 114, 302, 306, 342, 369, 371, 404, 434, 445, 453, 522, 523, 524, 531, 544, 545, 546, 547, 842, 881, 903, 904, 976, 1014, 1017, 1021, 1023], "spot": [53, 228, 396], "leav": [53, 115, 123, 168, 170, 215, 264, 304, 351, 353, 357, 368, 370, 376, 384, 396, 403, 406, 426, 427, 430, 431, 448, 488, 542, 543, 544, 545, 546, 547, 549, 550, 551, 658, 660, 783, 788, 789, 790, 791, 799, 800, 823, 824, 872, 891, 892, 893, 894, 955, 963, 969, 973, 982, 996, 999, 1008, 1015, 1017, 1019, 1020], "bin_edg": 53, "bin_edges_": [53, 300, 848], "bin_cent": [53, 197], "625": [53, 197, 693], "875": [53, 150, 218, 224, 654], "375": [53, 117, 133, 434, 734, 966], "171": [53, 287, 291, 368, 377, 772, 966], "203": [53, 300, 307], "234": [53, 818, 822, 840, 841, 968], "axvlin": [53, 60, 73, 82, 103, 121, 131, 167, 169, 186, 263, 997], "get_ybound": 53, "state": [53, 57, 70, 72, 80, 199, 230, 237, 243, 263, 311, 353, 358, 359, 371, 373, 377, 379, 382, 384, 385, 395, 404, 409, 425, 428, 432, 434, 439, 444, 460, 529, 574, 664, 784, 785, 793, 795, 797, 823, 824, 830, 878, 879, 906, 955, 956, 962, 968, 971, 978, 986, 987, 990, 1010, 1012, 1014, 1016, 1018, 1021], "compressed_raccoon_kmean": 53, "9141241": 53, "3627656": 53, "65000752": 53, "26055499": 53, "68738405": 53, "159": [53, 366, 1008], "79431128": 53, "185": [53, 158, 167, 171, 368, 377, 840, 841], "18557327": 53, "224": [53, 85, 127, 233, 240, 396, 709], "01945707": 53, "save": [53, 70, 72, 296, 370, 371, 375, 377, 378, 379, 384, 390, 400, 408, 453, 519, 520, 612, 823, 824, 881, 962, 966, 982, 990, 1001, 1008, 1011, 1015, 1018], "verifi": [53, 60, 167, 197, 371, 376, 950, 969], "6291456": 53, "surpris": [53, 168, 962, 986, 1010], "x8": 53, "ndarrai": [53, 58, 90, 197, 239, 255, 256, 257, 371, 372, 373, 377, 378, 392, 404, 407, 408, 411, 412, 414, 416, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 682, 683, 684, 685, 686, 687, 700, 703, 706, 707, 708, 711, 712, 722, 729, 730, 732, 734, 735, 737, 738, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 769, 773, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 901, 902, 903, 908, 909, 919, 920, 921, 922, 925, 926, 928, 930, 931, 935, 938, 939, 941, 942, 943, 944, 947, 952, 953, 966, 981, 987, 1011, 1015, 1018, 1019, 1022, 1023, 1024], "practic": [53, 71, 80, 86, 98, 119, 149, 166, 167, 173, 181, 199, 226, 232, 258, 265, 283, 284, 311, 329, 358, 360, 371, 373, 374, 377, 379, 383, 384, 396, 398, 400, 401, 402, 403, 404, 406, 432, 437, 447, 506, 509, 574, 617, 618, 655, 779, 822, 876, 883, 955, 956, 960, 965, 966, 967, 968, 969, 972, 973, 976, 986, 987, 988, 990, 992, 1001, 1002, 1003, 1010, 1014, 1016, 1018, 1020], "gain": [53, 220, 264, 277, 279, 318, 342, 343, 351, 370, 377, 379, 382, 403, 517, 542, 546, 547, 549, 710, 740, 779, 780, 812, 891, 893, 967, 971, 979, 982, 1011, 1015, 1018], "476": [53, 68, 158], "plot_face_compress": [53, 68], "anova": [54, 140, 147, 164, 324, 340, 397, 489, 500, 577, 580, 581, 583, 584, 585, 589, 590, 591, 594, 698, 805, 809, 843, 844, 863, 883, 888, 981], "bayesianridg": [54, 161, 176, 177, 181, 311, 612, 629, 962, 1015, 1016, 1017, 1018, 1021, 1022, 1024], "shutil": [54, 72, 397], "tempfil": [54, 279, 309, 397, 969], "feature_select": [54, 71, 72, 74, 140, 141, 142, 143, 144, 145, 146, 164, 239, 311, 313, 332, 353, 360, 384, 397, 405, 566, 955, 1008, 1009, 1011, 1012, 1013, 1014, 1015], "kfold": [54, 121, 135, 252, 262, 353, 400, 422, 457, 552, 553, 579, 587, 632, 636, 638, 640, 646, 648, 650, 658, 781, 784, 785, 787, 789, 791, 795, 800, 802, 803, 804, 805, 806, 807, 808, 810, 814, 817, 864, 996, 1009, 1010, 1011, 1013, 1014, 1016, 1018], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 78, 268, 406, 986], "cachedir": [54, 72, 380, 397], "mkdtemp": [54, 397], "mem": [54, 377, 493], "n_x": [54, 570], "n_y": [54, 570, 968, 976], "parcel": [54, 67, 396], "ward__n_clust": 54, "n_job": [54, 72, 73, 116, 117, 122, 123, 129, 136, 145, 161, 167, 168, 169, 219, 221, 237, 256, 258, 259, 261, 272, 277, 309, 310, 311, 314, 358, 371, 384, 403, 407, 422, 429, 431, 433, 435, 437, 442, 443, 446, 449, 452, 457, 516, 520, 521, 522, 524, 527, 528, 530, 531, 533, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 579, 587, 595, 617, 619, 624, 632, 636, 638, 640, 642, 643, 644, 646, 648, 650, 651, 653, 661, 664, 673, 674, 675, 676, 677, 678, 679, 758, 762, 765, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 842, 845, 878, 879, 932, 934, 955, 966, 967, 969, 996, 997, 1001, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 426, 430, 1008, 1012], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 95, 109, 113, 114, 124, 228, 251, 256, 264, 266, 310, 343, 347, 351, 360, 368, 370, 371, 373, 380, 385, 393, 395, 396, 400, 401, 403, 404, 407, 429, 431, 437, 449, 472, 493, 497, 499, 505, 507, 511, 512, 516, 522, 523, 525, 535, 542, 543, 544, 545, 549, 550, 551, 552, 553, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 602, 617, 643, 644, 651, 653, 661, 662, 663, 692, 702, 711, 718, 720, 730, 747, 753, 762, 766, 772, 773, 813, 823, 824, 825, 826, 827, 829, 831, 833, 834, 838, 840, 841, 846, 862, 863, 866, 870, 883, 888, 891, 892, 893, 894, 922, 923, 924, 937, 939, 940, 960, 962, 966, 967, 970, 973, 976, 977, 978, 982, 990, 992, 1013, 1014, 1016, 1018, 1019, 1020, 1022, 1024], "return_dist": [54, 448, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 969, 1012], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 141, 405, 577, 580, 581, 583, 584, 585, 589, 590, 594, 1011, 1015, 1022], "cach": [54, 164, 258, 277, 278, 291, 357, 358, 366, 384, 426, 430, 435, 453, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 487, 493, 781, 825, 827, 843, 844, 881, 885, 886, 887, 888, 889, 951, 969, 981, 1011, 1015, 1016, 1017, 1018, 1020, 1021, 1023], "selectpercentil": [54, 71, 239, 332, 405, 577, 580, 581, 583, 584, 588, 591, 1009, 1014, 1024], "percentag": [54, 104, 119, 188, 215, 252, 260, 263, 400, 405, 519, 526, 529, 534, 578, 579, 633, 654, 665, 688, 718, 730, 799, 800, 801, 813, 895, 897, 967, 982, 1010, 1014, 1020, 1021], "anova__percentil": [54, 332], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "112": [54, 366, 368, 1010], "638768": 54, "rdbu_r": [54, 82, 106, 329], "temporari": [54, 70, 72, 357, 453, 672, 765, 881, 969, 1011, 1012, 1015, 1021, 1022], "worri": [54, 963, 993], "rmtree": [54, 72, 397], "ignore_error": 54, "639": [54, 68], "plot_feature_agglomeration_vs_univariate_select": [54, 68], "perspect": [55, 60, 197, 357, 366, 382, 385, 515, 628, 883, 959], "certain": [55, 167, 202, 214, 257, 277, 303, 353, 366, 367, 369, 375, 386, 396, 401, 405, 623, 634, 638, 643, 648, 669, 848, 883, 955, 958, 962, 963, 966, 967, 970, 976, 981, 986, 992, 996, 1013, 1017, 1020, 1023], "conveni": [55, 363, 379, 382, 397, 400, 404, 406, 411, 428, 432, 434, 436, 438, 449, 474, 596, 661, 663, 684, 712, 769, 842, 843, 940, 956, 958, 962, 963, 973, 990, 1001, 1008], "ground_truth": [55, 284], "proba_map": 55, "class_index": 55, "ci": [55, 358, 374, 375, 379, 968, 1014, 1016], "preambl": 55, "parameters_str": 55, "greatest": [55, 387, 396, 850, 1016], "remark": [55, 86, 146, 359, 371, 976], "unlik": [55, 56, 167, 168, 218, 220, 247, 299, 327, 371, 373, 377, 382, 384, 398, 400, 401, 404, 431, 435, 520, 635, 636, 639, 640, 641, 667, 668, 769, 802, 823, 824, 863, 874, 886, 962, 965, 966, 973, 981, 1008, 1014], "bi": [55, 404], "isotrop": [55, 57, 61, 100, 151, 153, 218, 220, 396, 398, 406, 497, 504, 517, 600, 604, 605, 607, 608], "worth": [55, 118, 168, 197, 371, 379, 990], "rememb": [55, 373, 376, 387, 404, 969, 973, 982], "hardli": [55, 592, 593], "proper": [55, 186, 215, 359, 377, 394, 403, 434, 526, 538, 661, 920, 941, 961, 962, 963, 966, 981, 1008, 1018, 1019, 1020, 1021, 1022, 1023], "must": [55, 167, 168, 170, 178, 181, 214, 215, 226, 236, 252, 283, 300, 305, 342, 353, 366, 370, 371, 372, 373, 375, 377, 379, 384, 385, 392, 394, 396, 397, 400, 401, 403, 404, 405, 406, 407, 416, 423, 426, 429, 430, 431, 432, 434, 435, 436, 440, 442, 444, 446, 447, 449, 451, 452, 454, 459, 472, 493, 494, 497, 508, 516, 522, 523, 524, 525, 526, 528, 529, 532, 538, 539, 544, 545, 546, 547, 552, 553, 566, 567, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 595, 596, 602, 605, 612, 613, 614, 615, 617, 618, 623, 627, 628, 633, 634, 637, 643, 644, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 667, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 684, 688, 691, 694, 719, 730, 748, 755, 758, 762, 765, 772, 774, 775, 776, 778, 779, 780, 781, 782, 784, 785, 786, 788, 790, 791, 793, 795, 796, 797, 799, 800, 802, 807, 809, 810, 818, 819, 820, 821, 822, 825, 826, 827, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 843, 846, 847, 848, 850, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 883, 884, 885, 886, 887, 888, 889, 890, 896, 934, 941, 950, 952, 955, 956, 962, 963, 964, 966, 969, 970, 972, 973, 980, 981, 982, 992, 1001, 1008, 1011, 1015, 1019, 1021, 1022], "maintain": [55, 202, 215, 218, 257, 358, 360, 370, 374, 377, 378, 379, 382, 384, 387, 396, 403, 425, 427, 852, 853, 859, 860, 863, 868, 871, 872, 874, 962, 963, 976, 986, 987, 992, 1003, 1023], "mitig": [55, 169, 306, 358, 359, 963, 982, 999, 1000, 1020], "great": [55, 166, 167, 195, 353, 371, 382, 401, 748, 987, 990, 1008, 1015], "appropri": [55, 57, 103, 154, 167, 266, 337, 347, 353, 369, 371, 373, 379, 384, 395, 396, 400, 402, 403, 407, 429, 435, 442, 474, 475, 476, 481, 485, 486, 487, 489, 490, 495, 562, 567, 576, 577, 580, 581, 583, 584, 585, 657, 659, 672, 694, 825, 826, 827, 829, 831, 833, 834, 835, 950, 962, 965, 966, 976, 1012, 1015, 1021, 1024], "immedi": [55, 371, 382, 781, 795, 804, 805, 1016], "hdb": [55, 431], "probabilities_": [55, 431], "capabl": [55, 56, 86, 154, 222, 373, 384, 387, 967, 970, 981, 982, 990, 1008, 1017], "constraint": [55, 57, 67, 95, 108, 133, 164, 192, 252, 294, 295, 296, 310, 371, 382, 401, 404, 472, 493, 494, 546, 547, 617, 620, 799, 800, 935, 955, 957, 962, 963, 980, 1012, 1015, 1016, 1019, 1021, 1023], "reachabl": [55, 65, 431, 435, 440, 441, 442, 829, 925], "extend": [55, 56, 67, 198, 246, 264, 329, 368, 369, 382, 384, 394, 395, 396, 401, 403, 616, 705, 812, 815, 816, 848, 850, 867, 898, 958, 966, 967, 981, 987, 988, 1003, 1013, 1014, 1015, 1016, 1018, 1023], "fragment": [55, 98], "sparser": [55, 176, 188, 401, 456, 463, 524, 528, 962, 969, 980], "Not": [55, 135, 168, 357, 371, 382, 396, 414, 415, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 454, 455, 456, 457, 458, 459, 460, 461, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 548, 551, 554, 555, 566, 567, 568, 573, 574, 576, 612, 613, 614, 615, 662, 673, 674, 675, 676, 678, 752, 776, 779, 780, 781, 784, 785, 795, 820, 823, 824, 827, 828, 829, 831, 835, 847, 855, 858, 859, 861, 875, 876, 887, 966, 972, 986, 1017], "mention": [55, 86, 215, 310, 353, 357, 371, 375, 376, 382, 384, 396, 681, 875, 876, 955, 960, 962, 987, 990, 1001, 1015, 1016, 1017], "until": [55, 120, 146, 205, 269, 311, 313, 376, 384, 385, 393, 396, 400, 405, 406, 493, 494, 542, 543, 544, 545, 549, 550, 551, 578, 631, 632, 637, 638, 643, 644, 645, 646, 647, 648, 651, 653, 656, 661, 662, 663, 679, 779, 780, 784, 785, 840, 841, 880, 883, 891, 892, 893, 894, 941, 955, 962, 963, 971, 979, 982, 1001, 1011, 1015, 1016, 1022], "tradeoff": [55, 113, 164, 231, 250, 264, 265, 273, 342, 357, 379, 402, 500, 549, 683, 687, 711, 773, 809, 844, 863, 883, 963, 999, 1017, 1020], "comfort": [55, 403], "epsilon": [55, 65, 179, 221, 232, 336, 401, 431, 440, 628, 634, 652, 661, 663, 730, 840, 841, 884, 886, 889, 959, 962, 966, 970, 980, 981, 999, 1008], "incap": 55, "simultan": [55, 96, 261, 265, 350, 363, 393, 396, 955, 966, 967, 982, 990, 1015], "suffici": [55, 120, 129, 205, 271, 329, 357, 384, 396, 405, 517, 531, 642, 667, 668, 800, 801, 967, 969, 987, 1017, 1023, 1024], "intervent": 55, "inaccess": 55, "ultim": [55, 222, 372], "world": [55, 70, 74, 167, 222, 235, 342, 357, 360, 364, 368, 396, 401, 404, 956, 966, 968, 985, 987, 990, 995, 1003, 1008], "whose": [55, 79, 80, 81, 146, 154, 197, 327, 366, 379, 380, 384, 394, 396, 398, 403, 405, 406, 409, 422, 423, 424, 433, 446, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 500, 519, 523, 525, 526, 529, 532, 534, 557, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 625, 656, 680, 703, 781, 788, 795, 808, 829, 848, 875, 876, 919, 945, 946, 960, 967, 971, 972, 973, 981, 1011, 1016, 1017, 1019, 1022], "respect": [55, 67, 100, 114, 118, 126, 157, 173, 176, 181, 186, 199, 211, 214, 218, 220, 227, 230, 232, 247, 266, 283, 284, 296, 304, 313, 326, 357, 358, 366, 367, 371, 394, 396, 399, 401, 403, 404, 406, 431, 449, 452, 455, 456, 457, 458, 459, 460, 461, 519, 525, 526, 532, 538, 546, 547, 582, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 621, 628, 656, 675, 679, 697, 712, 766, 769, 779, 780, 819, 829, 840, 841, 895, 897, 955, 959, 960, 962, 963, 966, 969, 970, 971, 972, 976, 981, 986, 990, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "neighborhood": [55, 82, 164, 218, 278, 291, 368, 384, 396, 401, 407, 429, 431, 435, 442, 487, 489, 500, 526, 534, 613, 616, 681, 809, 825, 826, 829, 831, 832, 833, 834, 835, 837, 843, 844, 863, 963, 972, 988, 1003, 1017], "recomput": [55, 56, 236, 238, 279, 309, 454, 459, 962, 978, 1013, 1024], "span": [55, 78, 122, 231, 254, 366, 396, 404, 534, 621, 781, 784, 966, 1000], "cut_dist": [55, 431], "581": [55, 68, 173], "plot_hdbscan": [55, 68], "intract": [56, 401, 963, 971], "inferenti": 56, "meta": [56, 70, 108, 132, 133, 164, 197, 266, 353, 365, 369, 373, 375, 382, 384, 392, 394, 395, 405, 406, 450, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 555, 560, 582, 588, 809, 816, 955, 967, 987, 988, 1003, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1022, 1023], "chirag": 56, "nagpal": 56, "christo": [56, 1017, 1018, 1020, 1022], "arida": [56, 1017, 1018, 1020, 1022], "baseestim": [56, 277, 371, 383, 384, 418, 617, 618, 912, 1008, 1015, 1018, 1020, 1022, 1023], "clone": [56, 122, 157, 168, 296, 353, 369, 371, 374, 375, 377, 379, 384, 394, 397, 406, 422, 450, 554, 555, 582, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 787, 807, 810, 814, 817, 843, 844, 880, 987, 1008, 1014, 1016, 1020, 1024], "metaestim": [56, 384, 880, 1012, 1021, 1022], "available_if": [56, 384, 1021, 1022], "check_is_fit": [56, 373, 380, 384, 1018, 1021, 1022], "5000": [56, 183, 212, 213, 215, 311, 864], "_classifier_ha": 56, "deleg": [56, 377, 419, 896, 1012, 1014, 1020], "unfit": [56, 397, 419, 449, 554, 555, 587, 596, 1016, 1018], "classifier_": 56, "inductivecluster": 56, "clusterer_": 56, "plot_scatt": 56, "cluster_label": [56, 60], "x_new": [56, 397, 401, 405, 418, 427, 428, 430, 432, 434, 516, 517, 518, 519, 520, 521, 522, 524, 526, 527, 528, 529, 534, 552, 554, 555, 567, 568, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 613, 615, 620, 623, 624, 625, 626, 627, 673, 674, 675, 676, 677, 832, 839, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 875, 876, 978, 992], "y_new": 56, "declar": [56, 219, 353, 371, 372, 373, 377, 384, 428, 431, 432, 444, 456, 457, 463, 675, 679, 1015, 1019], "membership": [56, 385, 393, 395, 396, 496, 497, 498, 499, 500, 504, 507, 981], "inductive_learn": 56, "probable_clust": 56, "response_method": [56, 112, 125, 130, 180, 189, 206, 260, 280, 285, 288, 304, 325, 326, 348, 616, 617, 618, 683, 685, 687], "plot_inductive_clust": [56, 68], "meant": [57, 146, 366, 373, 380, 459, 478, 662, 829, 932, 933, 956, 970, 972, 976, 1009], "unintuit": 57, "possibli": [57, 86, 146, 197, 212, 343, 368, 370, 379, 390, 396, 403, 404, 436, 438, 574, 818, 819, 820, 821, 822, 888, 889, 891, 892, 893, 894, 955, 958, 963, 969, 976, 1023], "undesir": [57, 150, 406], "phil": [57, 1013], "roth": [57, 1013, 1016, 1023], "mr": [57, 314, 1009, 1012, 1022], "spheric": [57, 85, 125, 220, 244, 246, 247, 290, 367, 748, 779, 780, 962, 965, 969, 986], "anisotrop": [57, 151, 406, 602, 604, 607], "ellipt": [57, 962], "60834549": 57, "63667341": 57, "40887718": 57, "85253229": 57, "x_vari": 57, "y_vari": 57, "unequ": [57, 1016], "x_filter": 57, "unevenli": [57, 197, 252], "y_filter": 57, "set_i": 57, "scenario": [57, 70, 149, 173, 260, 353, 378, 387, 400, 403, 522, 528, 530, 531, 960, 966, 976, 1018], "criteria": [57, 164, 175, 186, 205, 216, 247, 257, 379, 396, 405, 451, 467, 468, 469, 486, 542, 543, 544, 545, 549, 550, 631, 637, 641, 643, 644, 656, 677, 844, 863, 883, 884, 891, 892, 893, 894, 956, 965, 970, 980, 1000, 1011, 1016, 1019], "knowledg": [57, 117, 167, 214, 235, 257, 360, 366, 371, 374, 377, 383, 384, 396, 400, 403, 407, 429, 496, 540, 541, 548, 705, 720, 724, 767, 812, 966, 967, 978, 1001], "consequ": [57, 103, 215, 257, 258, 299, 326, 353, 401, 403, 546, 547, 551, 640, 641, 956, 962, 966, 982, 1017, 1019, 1024], "likelihood": [57, 77, 79, 80, 81, 83, 103, 149, 150, 151, 153, 154, 155, 156, 158, 164, 185, 215, 246, 250, 257, 263, 273, 296, 299, 373, 384, 394, 398, 401, 403, 406, 422, 454, 455, 456, 457, 458, 459, 460, 461, 462, 500, 517, 521, 526, 534, 535, 536, 595, 596, 616, 630, 643, 697, 725, 779, 780, 781, 806, 809, 828, 839, 859, 871, 885, 886, 888, 889, 962, 965, 968, 976, 981, 1011, 1012, 1017, 1023], "inertia": [57, 58, 61, 343, 396, 428, 432, 434, 437, 444, 445, 447, 448, 1019], "common_param": [57, 122, 168, 232, 259, 260], "unexpect": [57, 353, 371, 376, 379, 390, 520, 681, 966, 981, 1010, 1016, 1017, 1020, 1022, 1024], "suffic": [57, 58, 373, 1001], "detail": [57, 111, 113, 116, 118, 123, 129, 168, 185, 186, 223, 228, 231, 232, 237, 239, 248, 255, 264, 283, 284, 305, 309, 310, 311, 312, 313, 314, 347, 349, 350, 353, 357, 358, 359, 363, 364, 365, 366, 369, 371, 373, 375, 376, 377, 379, 382, 383, 384, 385, 387, 390, 395, 396, 399, 400, 401, 403, 405, 406, 407, 418, 419, 422, 428, 429, 431, 432, 433, 435, 437, 442, 443, 444, 446, 447, 449, 451, 452, 453, 457, 481, 509, 516, 520, 521, 522, 524, 526, 527, 528, 529, 530, 531, 533, 534, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 579, 587, 595, 599, 604, 607, 616, 617, 618, 619, 624, 630, 632, 636, 638, 640, 641, 642, 643, 644, 646, 648, 650, 651, 653, 657, 659, 661, 663, 664, 672, 673, 674, 675, 676, 677, 678, 679, 680, 686, 698, 758, 762, 763, 764, 765, 780, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 821, 825, 826, 828, 829, 831, 833, 834, 836, 837, 842, 845, 847, 848, 860, 864, 872, 878, 879, 881, 885, 888, 891, 892, 893, 894, 914, 932, 955, 956, 960, 964, 965, 966, 967, 969, 970, 972, 979, 988, 989, 990, 992, 998, 1001, 1003, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "propos": [57, 78, 79, 277, 366, 371, 373, 382, 384, 396, 398, 403, 408, 409, 435, 460, 520, 592, 593, 661, 662, 663, 840, 841, 962, 965, 969, 980, 984, 1015], "inflat": [57, 166, 167, 169, 396, 400, 966, 976], "allevi": [57, 176, 181, 396, 968], "fastest": [57, 255, 344, 432, 655, 657, 659, 672, 919, 920, 965], "lost": [57, 82, 366, 372, 382, 963, 966], "restart": [57, 374, 379, 432, 516, 522, 523, 528, 530, 531, 595, 596, 963, 1021], "193": [57, 68, 267, 273, 377, 403, 700, 770, 979], "plot_kmeans_assumpt": [57, 68], "judg": [58, 203, 396, 996], "definit": [58, 81, 185, 197, 264, 277, 343, 371, 372, 373, 384, 386, 396, 398, 399, 401, 512, 514, 520, 596, 613, 677, 693, 703, 712, 742, 779, 780, 955, 958, 960, 962, 964, 966, 969, 980, 985, 1003, 1012, 1016, 1023], "shorthand": [58, 384, 397, 452, 546, 547, 844, 845, 1011], "homo": 58, "compl": 58, "mea": 58, "context": [58, 235, 239, 277, 357, 358, 365, 370, 372, 383, 384, 396, 397, 402, 403, 404, 406, 407, 422, 429, 431, 433, 435, 437, 442, 443, 446, 449, 452, 453, 457, 516, 520, 521, 522, 524, 527, 528, 529, 530, 531, 533, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 579, 587, 595, 611, 612, 615, 617, 619, 624, 632, 636, 638, 640, 642, 643, 644, 646, 648, 650, 651, 653, 661, 664, 673, 674, 675, 676, 677, 678, 679, 758, 762, 765, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 825, 826, 829, 831, 833, 834, 836, 837, 842, 845, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 956, 962, 966, 972, 976, 980, 987, 990, 999, 1008, 1015, 1016, 1021, 1024], "n_digit": 58, "1797": [58, 89, 255, 296, 317, 368, 430, 487, 517, 518, 519, 520, 584, 585, 673, 674, 675, 676, 969, 998], "bench_k_mean": 58, "tabl": [58, 215, 257, 371, 372, 375, 380, 396, 404, 567, 643, 665, 781, 795, 820, 931, 962, 966, 967, 972, 986, 1009], "fit_tim": [58, 119, 186, 205, 259, 400, 806, 807], "inertia_": [58, 61, 64, 428, 432, 434, 1019], "clustering_metr": 58, "sample_s": [58, 231, 343, 775], "formatter_result": 58, "determinist": [58, 122, 358, 367, 373, 384, 396, 428, 432, 434, 436, 437, 438, 443, 444, 447, 536, 544, 545, 549, 550, 568, 569, 676, 680, 792, 793, 839, 891, 892, 958, 962, 1009, 1012, 1014, 1016, 1017, 1020, 1023], "ttime": 58, "tinertia": 58, "thomo": 58, "tcompl": 58, "tv": 58, "tari": 58, "tami": 58, "tsilhouett": 58, "__________________________________________________________________________________": 58, "69545": 58, "598": [58, 103, 150, 526], "645": 58, "621": [58, 753], "469": 58, "617": [58, 245, 249, 260, 396, 753], "152": [58, 239, 240, 259, 273, 377], "69735": 58, "681": [58, 130, 133, 377], "723": [58, 232], "701": 58, "574": [58, 519, 526], "698": 58, "72686": 58, "636": [58, 181, 310, 315, 343, 377], "658": [58, 86], "647": [58, 321], "521": 58, "643": [58, 255], "reduced_data": 58, "mesh": [58, 118, 127, 151, 231, 285, 293, 301, 322, 325], "169": [58, 296], "mark": [58, 92, 141, 162, 261, 268, 363, 371, 373, 375, 379, 380, 384, 396, 520, 592, 593, 596, 617, 643, 836, 837, 878, 879, 896, 910, 915, 920, 962, 990, 1003, 1008, 1009, 1014, 1016, 1017], "733": [58, 68, 277], "plot_kmeans_digit": [58, 68], "kmeans_plusplu": [59, 396, 1020], "4000": [59, 124, 245], "centers_init": 59, "4eacc5": [59, 64], "ff9c34": [59, 64], "4e9a06": [59, 64], "cluster_data": 59, "066": [59, 68, 255, 633], "plot_kmeans_plusplu": [59, 68], "wrong": [60, 197, 283, 342, 353, 368, 371, 373, 404, 489, 710, 740, 775, 966, 972, 981, 1011, 1013, 1015, 1016, 1017, 1018, 1021], "wide": [60, 61, 113, 230, 300, 382, 396, 401, 404, 955, 962, 986, 990, 1001, 1008, 1010, 1024], "ambival": 60, "thick": [60, 287, 969], "ow": 60, "7049787496083262": 60, "5882004012129721": 60, "6505186632729437": 60, "561464362648773": 60, "4857596147013469": 60, "silhouette_sampl": [60, 775, 1012, 1014, 1016, 1024], "distinct": [60, 257, 319, 342, 344, 366, 373, 376, 384, 385, 400, 403, 404, 574, 782, 791, 799, 857, 858, 878, 879, 955, 962, 969, 972, 1001, 1016], "center_box": [60, 497], "range_n_clust": 60, "set_size_inch": [60, 135, 236], "lie": [60, 85, 145, 167, 231, 299, 319, 327, 329, 401, 403, 591, 831, 833, 834, 835, 960, 963, 966, 976, 981], "insert": [60, 167, 197, 382, 396, 472, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 898], "blank": [60, 376, 956, 982], "demarc": 60, "silhouette_avg": 60, "sample_silhouette_valu": 60, "y_lower": [60, 122], "aggreg": [60, 114, 215, 260, 266, 306, 313, 396, 403, 519, 540, 541, 706, 707, 712, 729, 730, 732, 734, 735, 737, 769, 967, 969, 976], "ith_cluster_silhouette_valu": 60, "size_cluster_i": 60, "y_upper": [60, 122], "fill_betweenx": 60, "2nd": [60, 90, 157, 304, 396, 407, 429, 515, 976, 1023], "lw": [60, 78, 79, 81, 99, 104, 105, 191, 198, 200, 203, 207, 214, 221, 245, 252, 267, 272, 282, 299, 319, 336], "fontweight": [60, 192], "bold": [60, 122, 186, 192, 371], "151": [60, 68, 314, 377, 403, 978], "plot_kmeans_silhouette_analysi": [60, 68], "reach": [61, 146, 197, 199, 213, 215, 259, 313, 329, 351, 376, 385, 387, 396, 401, 405, 435, 442, 493, 494, 578, 579, 612, 629, 630, 631, 632, 637, 638, 639, 640, 641, 645, 646, 647, 648, 651, 652, 653, 661, 662, 663, 664, 666, 667, 668, 669, 713, 714, 767, 779, 780, 840, 841, 880, 955, 966, 970, 980, 982, 990, 1019, 1023, 1024], "optimum": [61, 155, 167, 173, 270, 401, 457, 962, 965], "stuck": [61, 677, 963], "check_random_st": [61, 213, 220, 229, 234, 373, 380, 384], "trade": [61, 78, 169, 256, 258, 259, 329, 342, 395, 396, 398, 538, 539, 544, 545, 619, 641, 677, 781, 784, 785, 795, 806, 963, 970, 978, 980, 981, 987], "n_init_rang": 61, "n_samples_per_cent": 61, "make_data": 61, "n_clusters_tru": 61, "init_s": [61, 343, 434], "factori": [61, 257, 404, 726, 936, 966], "empti": [61, 70, 105, 209, 320, 357, 366, 373, 375, 396, 408, 468, 518, 546, 547, 615, 616, 792, 848, 890, 898, 903, 904, 910, 956, 981, 999, 1010, 1012, 1016, 1017, 1019, 1020, 1022, 1023, 1024], "run_id": 61, "km": [61, 313, 343], "my_memb": [61, 63, 64], "518": [61, 68], "plot_kmeans_stability_low_dim_dens": [61, 68], "fast": [62, 173, 181, 186, 212, 213, 231, 232, 300, 344, 357, 366, 371, 380, 396, 398, 400, 401, 403, 404, 406, 408, 431, 432, 454, 459, 493, 517, 518, 520, 523, 525, 529, 532, 549, 550, 551, 573, 574, 576, 617, 618, 625, 643, 644, 657, 659, 672, 684, 781, 795, 804, 805, 815, 816, 823, 824, 828, 839, 920, 935, 958, 962, 965, 968, 969, 971, 972, 982, 986, 990, 1001, 1008, 1009, 1014, 1015, 1018, 1019], "globular": [62, 396], "cleanli": [62, 1008], "055": [62, 68, 183, 216, 343, 368, 966], "plot_linkage_comparison": [62, 68], "dorin": [63, 433], "comaniciu": [63, 396, 433], "meer": [63, 396, 433], "ieee": [63, 79, 81, 368, 396, 398, 405, 409, 433, 460, 519, 548, 649, 670, 671, 709, 753, 962, 966, 972], "transact": [63, 368, 396, 398, 407, 409, 429, 433, 460, 519, 523, 525, 532, 548, 629, 649, 670, 671, 709, 710, 740, 753, 962, 966], "intellig": [63, 342, 368, 396, 403, 433, 540, 541, 623, 681, 709, 813, 840, 841, 967, 978, 987, 990], "2002": [63, 394, 396, 403, 422, 433, 578, 579, 710, 740, 830, 878, 958, 966], "603": [63, 433], "619": [63, 343, 433], "labels_uniqu": 63, "455": [63, 68, 305], "plot_mean_shift": [63, 68, 446], "3000": [64, 110, 221, 875, 876], "k_mean": [64, 380, 384, 1000, 1016], "t_batch": 64, "pairwis": [64, 166, 167, 230, 266, 309, 313, 314, 342, 357, 363, 373, 384, 396, 401, 406, 431, 443, 446, 447, 453, 472, 493, 494, 520, 546, 547, 605, 623, 624, 625, 626, 627, 628, 673, 675, 677, 679, 681, 684, 762, 765, 772, 774, 775, 811, 827, 829, 831, 835, 849, 881, 966, 969, 978, 981, 1003, 1008, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024], "k_means_cluster_cent": 64, "mbk_means_cluster_cent": 64, "k_means_label": 64, "mbk_means_label": 64, "ninertia": 64, "bbbbbb": 64, "196": [64, 68, 880, 979], "plot_mini_batch_kmean": [64, 68], "shane": [65, 1017, 1020, 1023], "grigsbi": 65, "refug": 65, "rocktalu": 65, "cluster_optics_dbscan": [65, 396], "n_points_per_clust": 65, "c1": [65, 119, 157, 229, 305], "c2": [65, 119, 157, 229, 305], "c3": [65, 119, 305], "c4": [65, 305, 988, 1003], "c5": [65, 988, 1003], "c6": 65, "clust": [65, 435, 442], "labels_050": 65, "reachability_": [65, 396, 435, 440, 441, 442], "core_dist": [65, 440], "core_distances_": [65, 435, 440, 442], "ordering_": [65, 396, 435, 440, 441, 442], "labels_200": 65, "ax3": [65, 320], "ax4": 65, "klass": 65, "xk": [65, 535], "rk": 65, "full_lik": 65, "noptic": 65, "ndbscan": 65, "309": [65, 68], "plot_opt": [65, 68], "tri": [66, 104, 218, 286, 358, 373, 376, 382, 385, 394, 403, 434, 436, 438, 616, 617, 618, 655, 677, 683, 685, 687, 795, 934, 971, 989, 992, 1010, 1016, 1020], "intens": [66, 98, 277, 368, 372, 401, 428, 432, 444, 592, 593, 617, 618, 783, 955, 973, 990, 1016], "weakli": 66, "outlin": [66, 118, 371, 373, 384, 385, 386, 396, 955, 1003], "center1": 66, "center2": 66, "center3": 66, "58": [66, 68, 76, 79, 98, 296, 334, 368, 398, 409, 460, 748, 976, 997], "center4": 66, "radius1": 66, "radius2": 66, "radius3": 66, "radius4": 66, "circle1": 66, "circle2": 66, "circle3": 66, "circle4": 66, "label_im": 66, "cleaner": 66, "536": [66, 68, 154, 277], "plot_segmentation_toi": [66, 68], "swiss": [67, 164, 217, 224, 396, 515, 677, 678, 1022], "roll": [67, 164, 217, 224, 374, 396, 515, 677, 678, 914, 990, 1018, 1023], "sole": [67, 382, 396], "oppos": [67, 371, 375, 392, 396, 879, 969, 981, 992, 1008], "make_swiss_rol": [67, 222, 1022], "thinner": 67, "fig1": 67, "set_posit": [67, 101, 102, 208, 299], "jet": 67, "fig2": 67, "121": [67, 112, 117, 162, 201, 231, 654, 976], "369": [67, 68], "plot_ward_structured_vs_unstructur": [67, 68], "061": [68, 255], "auto_examples_clust": 68, "chain": [69, 76, 164, 274, 276, 277, 353, 360, 363, 382, 384, 395, 406, 481, 487, 526, 596, 612, 643, 722, 781, 809, 812, 814, 815, 816, 817, 843, 844, 863, 955, 956, 967, 971, 983, 986, 990, 1001, 1003], "raster": 70, "caption": 70, "serv": [70, 99, 155, 260, 397, 531, 536, 623, 958, 1022], "matt": [70, 1011, 1012, 1013, 1018, 1019, 1023], "terri": [70, 1012], "truncatedsvd": [70, 127, 219, 343, 401, 519, 520, 524, 525, 526, 677, 842, 845, 963, 1010, 1015, 1019, 1020, 1022], "dictvector": [70, 164, 341, 343, 345, 366, 404, 473, 567, 573, 574, 575, 576, 856, 1008, 1009, 1012, 1018, 1020, 1021, 1024], "compris": [70, 122, 255, 342, 343, 344, 366, 382, 401, 403, 500, 788, 963], "subject": [70, 126, 248, 260, 342, 366, 371, 373, 375, 382, 384, 385, 394, 395, 398, 400, 401, 480, 643, 644, 670, 846, 883, 884, 934, 936, 957, 962, 981, 985, 1001, 1017, 1018, 1021, 1023], "mccall": 70, "mksol": 70, "dseg": 70, "ti": [70, 197, 244, 247, 255, 338, 357, 394, 396, 584, 585, 620, 705, 710, 740, 779, 780, 885, 888, 891, 965, 966, 981, 1009, 1011, 1012, 1016, 1018, 1022, 1023], "fred": [70, 1008, 1021], "3539": 70, "1993apr6": 70, "131900": 70, "8407": 70, "perhap": [70, 118, 368, 370, 379, 384, 402, 987], "militari": 70, "slug": 70, "school": [70, 368, 396, 772, 966], "physic": [70, 358, 490, 931, 962, 1024], "teacher": 70, "ex": [70, 369, 372, 387, 1012, 1013], "fighter": 70, "jock": 70, "wasn": [70, 1017], "poundal": 70, "flink": 70, "funni": 70, "propon": 70, "si": 70, "insist": 70, "safeti": [70, 382, 397, 932, 987, 1018], "ball": [70, 282, 290, 396, 402, 433, 677, 823, 824, 828, 831, 833, 834, 835, 1008, 1010, 1013, 1019], "mari": [70, 1016, 1017, 1018, 1019, 1022], "shafer": 70, "nasa": [70, 342, 343, 368], "am": [70, 75, 80, 129, 168, 342, 376, 398, 459, 478, 1015], "dryden": 70, "stateless": [70, 343, 359, 373, 384, 404, 567, 568, 574, 623, 846, 847, 855, 976, 1024], "subject_body_extractor": 70, "startswith": [70, 219, 290], "subject_body_transform": 70, "sentenc": [70, 342, 344, 366, 385, 404], "text_stat": 70, "num_sent": 70, "text_stats_transform": 70, "subjectbodyextractor": 70, "subjectbodi": 70, "union": [70, 167, 397, 481, 722, 738, 842, 1015], "body_bow": 70, "pull": [70, 312, 358, 369, 374, 384, 385, 1018], "body_stat": 70, "transformer_weight": [70, 449, 452, 842, 1013, 1020], "396": [70, 343, 368, 1001], "394": [70, 158, 343], "749": [70, 76], "plot_column_transform": [70, 76], "imput": [71, 129, 163, 169, 228, 237, 239, 310, 313, 360, 363, 375, 383, 384, 397, 403, 475, 486, 550, 565, 624, 630, 657, 805, 826, 844, 902, 904, 986, 987, 1003, 1010, 1011], "miss": [71, 129, 163, 169, 228, 237, 257, 277, 310, 314, 353, 357, 360, 363, 366, 368, 370, 371, 373, 375, 376, 384, 395, 396, 397, 398, 431, 457, 475, 481, 483, 486, 546, 547, 550, 551, 612, 613, 614, 615, 624, 630, 657, 675, 679, 711, 753, 805, 826, 844, 852, 853, 857, 859, 860, 863, 864, 868, 871, 872, 874, 962, 963, 966, 986, 987, 988, 990, 1003, 1010, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "chi": [71, 80, 110, 303, 363, 405, 504, 577, 580, 581, 583, 584, 585, 589, 590, 591, 594, 623, 624, 625, 626, 627, 742, 743, 1003, 1008, 1013, 1014], "dispatch": [71, 360, 392, 453, 781, 795, 804, 805, 806, 881, 932, 933, 996, 1003, 1023], "processor": [71, 129, 167, 360, 407, 422, 429, 431, 433, 435, 437, 442, 443, 446, 449, 452, 457, 516, 520, 521, 522, 524, 527, 528, 530, 531, 533, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 579, 587, 595, 617, 619, 624, 632, 636, 638, 640, 642, 643, 644, 646, 648, 650, 651, 653, 661, 664, 673, 674, 675, 676, 677, 678, 679, 758, 762, 765, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 825, 826, 829, 831, 833, 834, 836, 837, 842, 845, 878, 879], "pedro": [71, 1009, 1011, 1012, 1016], "simpleimput": [71, 129, 161, 162, 169, 228, 237, 239, 310, 313, 353, 384, 612, 613, 614, 956, 976, 1016, 1017, 1019, 1020, 1022, 1023, 1024], "chi2": [71, 404, 405, 437, 566, 577, 580, 581, 583, 584, 585, 590, 591, 594, 605, 623, 624, 625, 626, 627, 628, 743, 749, 758, 1008, 1015, 1022], "40945": 71, "titan": [71, 169, 239, 309, 313, 314], "surviv": [71, 169, 955, 986], "ag": [71, 146, 167, 169, 185, 186, 197, 215, 236, 237, 239, 299, 312, 313, 314, 366, 368, 990, 992, 999], "fare": [71, 169, 239, 313, 314, 1012, 1013], "embark": [71, 169, 239, 309, 313, 314], "sex": [71, 146, 167, 169, 185, 186, 239, 314, 368, 974, 999], "femal": [71, 167, 314, 376, 856, 857, 976], "male": [71, 167, 314, 376, 856, 857, 976], "pclass": [71, 169, 239, 309, 313, 314], "numeric_featur": [71, 313], "numeric_transform": [71, 313], "categorical_transform": 71, "selector": [71, 142, 143, 379, 404, 451, 566, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 1010, 1018, 1020, 1024], "preprocessor": [71, 129, 167, 197, 228, 237, 305, 310, 312, 313, 314, 397, 404, 573, 574, 576, 986, 1001, 1008, 1011, 1016, 1018], "798": [71, 158, 403], "lt": [71, 72, 115, 129, 167, 247, 255, 269, 369, 371], "0x7fd137179790": 71, "pipelinepipelin": [71, 72, 115, 129, 143, 167, 169, 227, 228, 236, 237, 239, 258, 264, 305, 310, 313], "columntransformercolumntransform": [71, 129, 167, 168, 169, 228, 237, 305, 310, 313], "simpleimputersimpleimput": [71, 129, 169, 228, 237, 310, 313], "standardscalerstandardscal": [71, 129, 167, 227, 228, 236, 237, 239, 264, 310, 313], "onehotencoderonehotencod": [71, 115, 129, 167, 168, 228, 237, 310, 313], "selectpercentileselectpercentil": [71, 239], "logisticregressionlogisticregress": [71, 115, 227, 228, 237, 239, 296, 310, 313], "make_column_selector": [71, 119, 129, 397, 449, 452, 1018], "subset_featur": 71, "Then": [71, 109, 111, 115, 117, 129, 132, 143, 167, 173, 181, 185, 197, 222, 227, 238, 259, 260, 342, 365, 371, 375, 377, 379, 387, 393, 394, 396, 399, 401, 404, 405, 555, 578, 704, 740, 781, 795, 843, 956, 965, 966, 972, 981, 1001, 1017], "1047": 71, "1118": 71, "684": [71, 80], "1045": 71, "841": 71, "1046": [71, 247], "kb": [71, 167, 168], "numerical_transform": 71, "yourself": [71, 370, 371, 372, 376, 379, 970], "dtype_exclud": [71, 451], "dtype_includ": [71, 119, 129, 397, 451], "_column_transform": [71, 129], "0x7fd113aec1c0": 71, "0x7fd113aec4f0": 71, "exactli": [71, 166, 176, 181, 190, 197, 248, 265, 300, 342, 371, 373, 393, 396, 400, 401, 404, 409, 431, 438, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 500, 511, 575, 576, 600, 661, 663, 688, 690, 747, 782, 799, 804, 958, 962, 963, 964, 966, 967, 982, 1000, 1001, 1008, 1014, 1015, 1021], "hyperparamet": [71, 109, 149, 150, 156, 157, 161, 164, 168, 176, 181, 186, 211, 215, 226, 250, 255, 260, 262, 273, 279, 296, 342, 373, 384, 396, 400, 401, 403, 406, 487, 520, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 628, 638, 644, 650, 658, 661, 712, 769, 781, 795, 955, 960, 961, 962, 965, 966, 968, 970, 972, 980, 987, 1001, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024], "cartesian": [71, 393, 618, 969, 1023], "preprocessor__num__imputer__strategi": 71, "preprocessor__cat__selector__percentil": 71, "classifier__c": 71, "search_cv": 71, "param_distribut": [71, 149, 258, 265, 269, 311, 383, 785, 793, 795], "randomizedsearchcvrandomizedsearchcv": 71, "trigger": [71, 72, 375, 397, 840, 841, 843, 844, 903, 904, 920, 962, 1001, 1016, 1022, 1023], "best_params_": [71, 73, 122, 149, 232, 247, 255, 261, 311, 329, 383, 781, 784, 785, 795, 955, 997, 1001], "best_score_": [71, 73, 232, 258, 261, 262, 329, 658, 660, 781, 784, 785, 795, 996, 997, 1001, 1019], "cv_results_": [71, 72, 73, 82, 135, 145, 247, 255, 256, 257, 258, 261, 265, 268, 269, 279, 329, 457, 579, 781, 784, 785, 795, 1001, 1014, 1018, 1020, 1021], "sort_valu": [71, 169, 239, 247, 257, 268, 305, 306], "mean_test_scor": [71, 72, 73, 82, 135, 145, 247, 256, 257, 258, 265, 268, 269, 279, 329, 457, 579, 781, 795, 955, 1014, 1021], "ascend": [71, 169, 305, 403, 435, 441, 612, 620, 895, 896, 897, 980, 1018, 1024], "std_test_scor": [71, 73, 135, 145, 256, 257, 258, 265, 279, 457, 579, 781, 795, 1014, 1021], "param_preprocessor__num__imputer__strategi": 71, "param_preprocessor__cat__selector__percentil": 71, "param_classifier__c": 71, "786015": 71, "031020": 71, "785063": 71, "030498": 71, "783149": 71, "030462": 71, "440": [71, 76, 167], "plot_column_transformer_mixed_typ": [71, 76], "instanti": [72, 152, 312, 374, 403, 435, 552, 553, 587, 615, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 910, 972, 998, 1008, 1016, 1020, 1024], "memoiz": [72, 366, 384], "costli": [72, 78, 116, 161, 258, 338, 358, 372, 377, 396, 428, 612, 789, 791, 875, 876, 920, 966, 969, 978, 987], "mcgibbon": [72, 1010, 1011, 1014], "selectkbest": [72, 74, 142, 143, 313, 353, 371, 397, 405, 566, 577, 580, 581, 583, 585, 591, 955, 1009, 1014, 1024], "mutual_info_classif": [72, 405, 577, 580, 581, 584, 585, 1014, 1020, 1023], "pipe": [72, 73, 119, 237, 256, 305, 311, 312, 383, 397, 404, 575, 843, 868, 869, 871, 872, 873, 874, 955, 976, 997], "reduce_dim": [72, 237, 256, 397], "popul": [72, 78, 80, 167, 197, 260, 299, 366, 380, 384, 398, 425, 697, 703, 825, 826, 827, 829, 831, 833, 834, 835, 935, 966, 972, 976, 982], "n_features_opt": 72, "c_option": 72, "iterated_pow": [72, 517, 520, 526, 1014], "reduce_dim__n_compon": [72, 256, 397], "classify__c": 72, "reduce_dim__k": 72, "reducer_label": 72, "kbest": [72, 577], "0x7fd137135670": 72, "gridsearchcvgridsearchcv": [72, 237, 247, 255, 257], "minmaxscalerminmaxscal": 72, "passthroughpassthroughlinearsvclinearsvc": 72, "mean_scor": [72, 266, 269, 343, 1021], "alphabet": [72, 384, 725], "eas": [72, 247, 304, 371, 374, 377, 962, 980, 986, 987, 990, 1019, 1020, 1022], "sometim": [72, 129, 166, 257, 295, 343, 353, 358, 359, 371, 373, 375, 377, 383, 384, 387, 396, 398, 401, 403, 404, 434, 519, 520, 523, 525, 526, 848, 849, 850, 898, 961, 962, 963, 966, 971, 976, 977, 981, 992, 1000, 1005, 1009, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024], "worthwhil": [72, 384], "slower": [72, 98, 119, 161, 232, 266, 344, 403, 404, 405, 431, 436, 438, 523, 525, 532, 540, 541, 543, 548, 550, 573, 574, 576, 616, 617, 618, 628, 644, 657, 659, 672, 677, 689, 811, 815, 816, 959, 963, 964, 965, 967, 969, 982, 1001, 1012, 1019], "constructor": [72, 229, 358, 373, 384, 395, 397, 404, 449, 452, 534, 535, 540, 552, 553, 554, 555, 566, 567, 573, 574, 582, 653, 661, 662, 825, 826, 827, 829, 830, 831, 833, 834, 835, 842, 843, 844, 845, 934, 955, 967, 976, 981, 987, 992, 1008, 1009, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023], "folder": [72, 366, 369, 371, 375, 379, 387, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 969, 1001], "cached_pip": [72, 397], "delet": [72, 318, 320, 375, 376, 454, 459, 471], "exit": [72, 277, 375, 379, 453], "benefici": [72, 74, 78, 95, 127, 299, 300, 369, 963], "497": [72, 76, 159], "plot_compare_reduct": [72, 76], "logistic__c": [73, 997], "046415888336127774": 73, "pca__n_compon": [73, 997], "truncat": [73, 127, 219, 380, 519, 520, 524, 525, 526, 529, 661, 663, 710, 740, 779, 832, 896, 920, 955, 965, 966, 980, 997, 1001, 1002, 1003, 1014, 1016], "x_digit": [73, 137, 294, 397, 996, 997, 999], "y_digit": [73, 137, 294, 397, 996, 997, 999], "__": [73, 258, 384, 397, 410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 779, 780, 781, 784, 785, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 955, 997, 1016, 1017], "spectrum": [73, 509, 529, 680, 920, 990, 997, 1016], "ax0": [73, 75, 197, 229, 343, 997], "n_components_": [73, 103, 384, 426, 430, 519, 523, 524, 525, 526, 527, 528, 875, 876, 997, 1017, 1019], "explained_variance_ratio_": [73, 104, 343, 401, 519, 526, 529, 534, 997, 1011, 1014], "named_step": [73, 86, 397, 578, 579, 582, 843, 844, 883, 884, 962, 997, 1015, 1017], "components_col": 73, "param_pca__n_compon": 73, "best_clf": 73, "nlargest": 73, "yerr": [73, 79, 81, 116, 119, 145, 279, 305, 320], "val": [73, 209, 257, 922], "978": [73, 76], "plot_digits_pip": [73, 76], "candid": [74, 247, 255, 258, 265, 311, 359, 371, 375, 396, 403, 433, 435, 781, 784, 785, 793, 795, 962, 969, 982, 1014], "features__pca__n_compon": 74, "features__univ_select__k": 74, "svm__c": 74, "867": 74, "967": [74, 966, 970], "transformer_list": [74, 397, 842, 845, 956, 1019, 1020], "univ_select": 74, "amuel": [74, 114, 188, 231, 319, 337], "ai": [74, 114, 188, 231, 319, 337, 400], "bonn": [74, 114, 188, 231, 319, 337], "mayb": [74, 295, 384, 404, 981, 987], "combined_featur": 74, "x_featur": [74, 625, 626, 627, 958], "grid_search": [74, 237, 247, 255, 265, 397, 1010, 1011, 1012, 1013, 1014, 1015], "479": [74, 76, 168, 171], "plot_feature_union": [74, 76], "overview": [75, 372, 374, 383, 384, 718, 727, 968, 980, 1002, 1003], "transformedtargetregressor": [75, 167, 197, 382, 397, 578, 579, 582, 1016, 1018, 1021], "hous": [75, 129, 161, 162, 299, 311, 364, 475, 1003], "translat": [75, 373, 406, 512, 599, 852, 853, 869, 963, 966, 984, 990], "lowest": [75, 86, 168, 181, 247, 365, 396, 400, 620, 622, 784, 785, 788, 890, 891, 963, 966, 982, 1023], "logarithm": [75, 129, 167, 230, 258, 329, 384, 405, 445, 575, 643, 644, 661, 689, 710, 725, 735, 739, 740, 741, 787, 823, 824, 918, 982, 996, 1015], "log1p": [75, 229, 847, 966, 976], "expm1": 75, "y_tran": 75, "At": [75, 202, 269, 317, 320, 357, 358, 375, 385, 387, 392, 399, 403, 422, 425, 450, 573, 574, 576, 587, 811, 813, 850, 930, 955, 962, 965, 967, 971, 980, 990], "meda": [75, 167, 966], "median_absolute_error": [75, 167, 966, 1012, 1018, 1020], "r2_score": [75, 166, 181, 192, 193, 403, 417, 450, 467, 468, 469, 539, 541, 543, 545, 547, 550, 553, 555, 596, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 664, 708, 712, 816, 817, 826, 834, 841, 884, 886, 889, 892, 894, 955, 966, 1009, 1011, 1017, 1021, 1022], "compute_scor": [75, 103, 176, 177, 629, 630, 1017], "r2": [75, 111, 129, 166, 168, 192, 232, 373, 397, 403, 539, 555, 658, 806, 841, 966, 974, 1017], "ridge_cv": 75, "y_pred_ridg": 75, "ridge_cv_with_trans_target": 75, "inverse_func": [75, 167, 397, 450, 847, 976, 1016], "y_pred_ridge_with_trans_target": 75, "sell": 75, "quantile_transform": [75, 860, 871, 976, 1015, 1016, 1017], "house_pric": [75, 129], "select_dtyp": [75, 119, 314, 451], "nan": [75, 119, 161, 162, 167, 215, 237, 252, 260, 305, 309, 314, 357, 363, 373, 380, 384, 403, 431, 453, 481, 540, 541, 542, 546, 547, 549, 578, 579, 582, 588, 591, 594, 612, 613, 614, 615, 620, 697, 698, 699, 706, 707, 708, 712, 713, 714, 753, 762, 767, 768, 769, 771, 781, 784, 785, 787, 795, 805, 806, 807, 810, 852, 853, 857, 859, 860, 863, 864, 868, 871, 872, 874, 901, 902, 903, 904, 941, 955, 966, 976, 982, 1003, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "inf": [75, 152, 287, 380, 396, 406, 431, 435, 442, 446, 456, 457, 463, 538, 539, 544, 545, 578, 579, 582, 591, 592, 593, 604, 612, 620, 622, 633, 634, 635, 637, 654, 656, 657, 661, 665, 672, 712, 714, 730, 762, 769, 773, 839, 848, 855, 901, 903, 904, 918, 966, 976, 1015, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "lotfrontag": 75, "garageyrblt": 75, "masvnrarea": [75, 129], "to_fram": 75, "n_quantil": [75, 168, 303, 860, 872, 1017], "output_distribut": [75, 299, 303, 397, 859, 860, 871, 872, 976], "squeez": [75, 155, 156, 277, 299, 1000], "quantiletransform": [75, 168, 303, 397, 450, 859, 872, 956, 976, 1015, 1016, 1017, 1018, 1019, 1024], "weaker": 75, "residu": [75, 193, 199, 253, 417, 450, 467, 468, 469, 537, 539, 541, 543, 545, 547, 550, 553, 555, 596, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 656, 657, 658, 659, 663, 664, 670, 671, 686, 728, 769, 816, 817, 826, 834, 841, 884, 886, 889, 892, 894, 962, 966, 999, 1020, 1021, 1023], "smile": [75, 366, 1022], "plot_transformed_target": [75, 76, 450], "auto_examples_compos": 76, "mahalanobi": [77, 83, 164, 396, 398, 435, 442, 454, 455, 456, 457, 458, 459, 460, 461, 684, 762, 763, 764, 830, 960, 972, 1016, 1019, 1020], "ledoitwolf": [77, 79, 83, 103, 164, 398, 454, 455, 459, 460, 461, 462, 781, 1012], "empiricalcovari": [78, 80, 81, 398, 454, 458, 459, 460, 461, 972], "unbias": [78, 394, 398, 401, 422, 535, 641, 657, 659, 672, 962, 996], "shrunk": [78, 103, 299, 409, 458, 460, 461, 464, 465, 466, 534, 864, 960, 980, 1002, 1003], "base_x_train": 78, "base_x_test": 78, "coloring_matrix": [78, 79], "shrunkcovari": [78, 103, 398, 454, 455, 458, 459, 460], "empirical_covari": [78, 398, 1024], "log_likelihood": [78, 595, 596, 779, 780], "negative_loglik": 78, "real_cov": [78, 79, 455, 458, 459, 460, 461], "emp_cov": [78, 80, 82, 463, 466], "loglik_r": 78, "inv": [78, 82, 294], "formula": [78, 79, 393, 396, 398, 409, 458, 460, 501, 502, 503, 575, 628, 631, 632, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 649, 661, 663, 689, 713, 739, 748, 955, 960, 962, 966, 971, 972, 976, 980, 1013, 1015, 1017], "asymptot": [78, 79, 186, 357, 398, 459, 521, 714, 962, 965, 1018], "criterion": [78, 79, 170, 185, 205, 247, 269, 310, 373, 380, 384, 396, 401, 426, 430, 434, 437, 444, 447, 517, 522, 524, 531, 538, 539, 542, 543, 544, 545, 549, 550, 551, 591, 612, 629, 630, 633, 641, 651, 652, 653, 654, 656, 657, 659, 661, 662, 663, 665, 676, 680, 695, 780, 880, 885, 886, 887, 888, 889, 891, 892, 893, 894, 962, 965, 966, 974, 979, 982, 988, 1000, 1003, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024], "chen": [78, 79, 398, 403, 409, 460, 710, 740, 958, 966, 1011, 1014, 1015, 1016, 1018, 1021, 1022, 1023], "Its": [78, 109, 255, 259, 367, 373, 384, 401, 406, 523, 961, 962, 971, 974, 980, 986, 990, 1011], "tuned_paramet": [78, 135, 255], "loglik_lw": 78, "loglik_oa": 78, "unseen": [78, 120, 143, 186, 205, 270, 283, 359, 363, 373, 383, 384, 396, 400, 829, 860, 872, 957, 966, 972, 974, 976, 982, 992, 1011, 1016, 1020], "loglog": [78, 230], "lik_max": 78, "amax": [78, 120], "lik_min": 78, "amin": 78, "vline": [78, 97, 184, 185, 186, 198, 257, 270, 300], "shrinkage_": [78, 79, 458, 460], "magenta": [78, 124], "purpl": [78, 92, 222], "cyan": [78, 113, 167, 280, 288], "realli": [78, 169, 186, 375, 376, 377, 966, 972, 990, 1022], "interestingli": [78, 146, 976], "outperform": [78, 86, 129, 304, 382, 400, 403, 437, 447, 968, 976], "484": [78, 83, 158], "plot_covariance_estim": [78, 83], "inspir": [79, 126, 168, 215, 371, 382, 403, 546, 547, 908, 956, 986, 1017], "mmse": [79, 398, 409, 460], "tran": 79, "octob": [79, 366, 1008, 1015, 1021, 1022], "toeplitz": 79, "choleski": [79, 197, 215, 380, 456, 457, 463, 512, 596, 633, 635, 636, 639, 640, 641, 643, 644, 654, 657, 659, 665, 667, 668, 672, 779, 780, 962, 1011, 1015, 1017, 1020, 1023], "simul": [79, 97, 167, 191, 233, 257, 990], "n_samples_rang": [79, 230], "lw_mse": 79, "oa_ms": 79, "lw_shrinkag": 79, "oa_shrinkag": 79, "error_norm": [79, 81, 454, 455, 456, 457, 458, 459, 460, 461], "darkorang": [79, 99, 104, 105, 198, 208, 221, 243, 244, 245, 248, 264, 266, 272, 280, 282, 288, 289, 319, 349], "plot_lw_vs_oa": [79, 83], "x_i": [80, 114, 141, 167, 198, 312, 337, 396, 401, 402, 403, 406, 599, 600, 604, 607, 608, 610, 818, 819, 822, 957, 958, 962, 968, 969, 970, 976, 980, 981, 982], "d_": [80, 396, 401, 633, 654, 665, 762, 963, 968], "mle": [80, 103, 526, 1016, 1019], "resist": [80, 81, 371], "erron": [80, 81, 401, 962, 1009, 1016, 1020], "breakdown": [80, 81, 214, 664, 962], "n_": [80, 81, 257, 312, 396, 401, 403, 631, 637, 670, 681, 958, 962, 966, 968, 969, 973, 976, 978, 981, 982], "smallest": [80, 81, 197, 277, 347, 366, 396, 398, 405, 512, 526, 615, 639, 640, 641, 667, 668, 675, 679, 680, 781, 784, 785, 795, 800, 982, 1021], "pure": [80, 81, 86, 181, 197, 384, 396, 458, 464, 481, 542, 543, 544, 545, 549, 550, 551, 690, 700, 770, 777, 891, 892, 893, 894, 976], "rousseuw": [80, 81], "rousseeuw": [80, 81, 396, 398, 454, 459, 774, 775, 972], "ass": [80, 81, 398, 459], "1984": [80, 81, 398, 459, 891, 892, 982], "wilson": [80, 368, 1008, 1011], "hilferti": 80, "1931": 80, "proceed": [80, 366, 368, 396, 407, 424, 429, 496, 681, 693, 710, 740, 830, 880, 966, 978, 979, 980], "academi": [80, 830], "688": [80, 257, 273], "n_outlier": [80, 81, 125, 200, 226, 284], "gen_cov": 80, "ey": [80, 81, 244, 248, 329, 366, 519, 526, 535], "outliers_cov": 80, "mincovdet": [80, 81, 398, 454, 455, 458, 460, 461, 972, 1008, 1015], "robust_cov": 80, "nmcd": 80, "nmle": 80, "26253567e": 80, "06695631e": 80, "22747343e": 80, "23773583": 80, "24640578": 80, "51963999": 80, "inlier": [80, 125, 200, 226, 235, 299, 384, 398, 454, 548, 656, 662, 829, 860, 872, 886, 887, 889, 962, 972, 1015, 1016, 1021], "inlier_plot": 80, "outlier_plot": 80, "get_xlim": [80, 192, 202, 299], "zz": 80, "mahal_emp_cov": 80, "emp_cov_contour": 80, "pubu_r": 80, "mahal_robust_cov": 80, "robust_contour": 80, "ylorbr_r": 80, "dist": [80, 219, 230, 375, 454, 455, 456, 457, 458, 459, 460, 461, 684, 747, 753, 823, 824], "borderaxespad": 80, "cubic": [80, 406], "suggest": [80, 98, 113, 116, 167, 170, 257, 329, 357, 370, 371, 378, 384, 400, 401, 403, 454, 459, 550, 630, 808, 960, 962, 963, 971, 981, 1001, 1012, 1019, 1022], "emp_mah": 80, "markeredgewidth": [80, 261], "rm": [80, 152, 375, 379, 398], "mahal": 80, "robust_mah": 80, "location_": [80, 81, 454, 455, 456, 457, 458, 459, 460, 461], "318": [80, 83, 435], "plot_mahalanobis_dist": [80, 83], "aim": [81, 162, 285, 319, 359, 366, 369, 371, 384, 390, 396, 398, 404, 433, 962, 966, 969, 976, 981, 986, 992, 1000, 1022], "compens": [81, 166, 168, 173, 197, 215, 258, 398, 401], "soon": [81, 384, 999], "5n_": 81, "johanna": 81, "hardin": 81, "rock": 81, "decemb": [81, 154, 366, 649, 670, 671, 1008, 1016, 1018, 1020, 1023], "928": [81, 422], "946": 81, "zoubir": 81, "koivunen": 81, "chakhchoukh": 81, "muma": 81, "signal": [81, 95, 96, 97, 105, 122, 149, 154, 155, 164, 175, 196, 198, 216, 248, 312, 395, 396, 398, 404, 405, 406, 409, 460, 488, 506, 511, 516, 519, 522, 526, 610, 629, 630, 631, 632, 637, 638, 648, 649, 657, 669, 670, 671, 769, 802, 809, 857, 962, 966, 983, 990, 995, 1002, 1003], "tutori": [81, 135, 136, 137, 138, 186, 199, 215, 257, 360, 371, 372, 377, 379, 383, 390, 396, 437, 447, 676, 981, 999, 1011], "treatment": [81, 166, 365, 401, 454, 459], "concept": [81, 120, 266, 360, 371, 382, 395, 396, 402, 404, 958, 966, 969, 982, 990], "magazin": [81, 405], "29": [81, 150, 154, 188, 197, 212, 214, 223, 258, 305, 307, 314, 315, 318, 368, 369, 387, 388, 389, 403, 544, 545, 675, 679, 765, 779, 835, 962, 963, 980], "61": [81, 158, 168, 215, 365, 368, 377, 397, 526, 545, 698], "range_n_outli": 81, "err_loc_mcd": 81, "err_cov_mcd": 81, "err_loc_emp_ful": 81, "err_cov_emp_ful": 81, "err_loc_emp_pur": 81, "err_cov_emp_pur": 81, "outliers_index": 81, "outliers_offset": 81, "inliers_mask": 81, "pure_x": 81, "pure_loc": 81, "pure_emp_cov": 81, "font_prop": 81, "hat": [81, 105, 253, 257, 282, 312, 369, 394, 398, 402, 403, 957, 962, 963, 966, 968, 970], "_2": [81, 154, 401, 404, 516, 522, 530, 531, 631, 637, 962, 970, 980, 981], "x_size": 81, "776": [81, 83], "plot_robust_vs_empirical_covari": [81, 83], "graphicallasso": [82, 398, 454, 455, 457, 458, 459, 460, 461, 463, 1016, 1024], "largest": [82, 97, 199, 368, 396, 398, 401, 428, 512, 526, 542, 543, 544, 545, 549, 550, 573, 694, 779, 780, 800, 821, 891, 892, 893, 894, 920, 963, 966, 976, 981, 982], "invert": [82, 100, 143, 219, 343, 344, 382, 398, 404, 615, 674, 678, 976, 1017], "fairli": [82, 121, 220, 272, 294, 379, 396, 544, 545, 684, 967, 999], "tweak": [82, 400, 932, 965, 1001, 1019], "readabl": [82, 258, 312, 376, 377, 379, 390, 519, 1017, 1020, 1021, 1022, 1023], "make_sparse_spd_matrix": [82, 514], "prng": 82, "prec": [82, 227, 512, 966], "smallest_coef": [82, 512], "largest_coef": [82, 512], "multivariate_norm": [82, 86, 242, 454, 455, 456, 457, 458, 459, 460, 461], "ledoit_wolf": [82, 398, 1021], "prec_": 82, "lw_cov_": 82, "lw_prec_": 82, "this_cov": 82, "this_prec": 82, "ma": [82, 305, 329, 962, 1014, 1019], "masked_equ": 82, "set_facecolor": [82, 242], "set_axis_bgcolor": 82, "alpha_": [82, 135, 167, 177, 185, 186, 457, 596, 629, 630, 632, 636, 638, 640, 641, 646, 648, 658, 660, 962, 982, 996, 1008, 1015], "641": [82, 83], "plot_sparse_cov": [82, 83], "286": [83, 403], "auto_examples_covari": 83, "cross_decomposit": [84, 85, 86, 164, 233, 360, 1012, 1013, 1015, 1016, 1017], "plscanon": [85, 467, 469, 470, 988, 1003, 1012, 1016, 1018, 1020, 1022], "plsregress": [85, 86, 988, 1003, 1015, 1018, 1020, 1022], "share": [85, 127, 167, 247, 342, 351, 353, 357, 358, 373, 379, 396, 401, 404, 534, 653, 689, 693, 779, 780, 784, 785, 960, 973, 1008, 1010, 1016, 1018, 1020, 1023], "appar": [85, 968, 990], "scatterplot": [85, 176, 257, 280], "maxim": [85, 86, 95, 106, 122, 176, 247, 248, 258, 262, 266, 267, 287, 304, 311, 329, 347, 351, 368, 384, 393, 396, 399, 401, 405, 406, 534, 595, 596, 629, 630, 633, 654, 664, 665, 705, 781, 784, 785, 795, 852, 858, 868, 960, 962, 966, 969, 971, 981, 996, 999, 1011, 1013, 1018, 1021, 1023], "weak": [85, 109, 120, 123, 215, 263, 400, 542, 543, 544, 549, 550, 551, 615, 969, 990], "var": [85, 86, 101, 113, 146, 177, 257, 368, 372, 405, 626, 630, 885, 886, 887, 888, 889, 966, 1016], "corr": [85, 170, 257], "corrcoef": [85, 106], "plsca": [85, 468], "x_train_r": 85, "y_train_r": 85, "x_test_r": 85, "y_test_r": 85, "221": [85, 127, 243, 249, 254, 273, 1011], "222": [85, 127, 981], "223": [85, 127, 368], "yj": [85, 303], "noiz": 85, "xb": [85, 862], "50210309": 85, "55301008": 85, "72528805": 85, "03429511": 85, "83576671": 85, "74902647": 85, "03916339": 85, "84652988": 85, "78629756": 85, "11231897": 85, "1905275": 85, "33508757": 85, "35433161": 85, "32686504": 85, "39877158": 85, "47827435": 85, "38004088": 85, "35574845": 85, "exce": [85, 275, 310, 406, 427, 500, 587, 634, 643, 1017, 1020, 1022], "235": [85, 87, 293, 297, 305], "plot_compare_cross_decomposit": [85, 87], "pcr": [86, 399], "pl": [86, 201, 368, 399, 467, 468, 469, 470, 1013], "greedili": [86, 146, 396, 400, 405, 445], "despit": [86, 195, 197, 215, 232, 286, 384, 398, 612, 613, 615, 962, 969, 990, 1016, 1017], "suffer": [86, 117, 169, 277, 299, 343, 357, 396, 403, 406, 529, 747, 961, 962, 966, 969, 1000, 1017], "dive": [86, 371, 377], "explained_variance_": [86, 519, 526, 529, 1000, 1015], "onto": [86, 219, 220, 231, 299, 382, 401, 404, 408, 431, 433, 446, 518, 524, 528, 612, 613, 615, 673, 960, 964, 969], "recommend": [86, 117, 161, 214, 227, 253, 266, 303, 311, 357, 358, 360, 365, 369, 371, 373, 377, 379, 382, 387, 399, 400, 401, 403, 405, 423, 432, 434, 436, 445, 481, 493, 520, 523, 529, 534, 546, 547, 554, 567, 568, 574, 591, 596, 616, 617, 623, 655, 661, 677, 682, 683, 685, 687, 787, 793, 795, 839, 846, 848, 855, 862, 863, 868, 869, 871, 872, 873, 874, 876, 885, 888, 920, 934, 955, 963, 966, 968, 970, 973, 976, 978, 980, 981, 982, 985, 990, 1003, 1010, 1011, 1017, 1018, 1019, 1020, 1022], "linearregress": [86, 132, 166, 176, 187, 192, 193, 194, 195, 200, 203, 214, 229, 234, 253, 271, 300, 353, 371, 382, 383, 397, 403, 450, 555, 617, 620, 631, 634, 637, 639, 656, 657, 672, 962, 966, 976, 999, 1012, 1013, 1017, 1020, 1021, 1022, 1024], "retriev": [86, 167, 201, 264, 343, 351, 375, 384, 397, 401, 404, 405, 453, 481, 575, 578, 579, 611, 638, 648, 669, 710, 714, 716, 717, 740, 765, 818, 822, 855, 881, 932, 962, 964, 966, 968, 986, 987, 1000, 1013, 1018, 1020, 1022], "predit": 86, "pca_2": 86, "673": [86, 377], "487": [86, 87, 708], "plot_pcr_vs_pl": [86, 87], "722": 87, "auto_examples_cross_decomposit": 87, "multilabel": [88, 93, 164, 225, 240, 264, 275, 366, 373, 374, 384, 391, 467, 472, 482, 493, 494, 500, 508, 526, 542, 549, 552, 659, 660, 688, 692, 698, 710, 713, 714, 718, 719, 722, 723, 738, 740, 767, 768, 771, 772, 776, 778, 812, 816, 840, 847, 850, 854, 856, 867, 888, 891, 893, 909, 928, 929, 930, 977, 988, 989, 1001, 1003, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1021, 1022, 1023], "plot_digits_last_imag": [89, 93], "iris": [90, 263, 264, 998], "150x4": 90, "unus": [90, 101, 102, 168, 194, 218, 220, 448, 564, 747, 755, 955, 963, 1008, 1016, 1018, 1019, 1021, 1023], "plai": [90, 96, 123, 151, 180, 206, 251, 280, 288, 325, 326, 357, 382, 1001], "set1": [90, 257, 286, 287], "getter": [90, 454, 455, 456, 457, 458, 459, 460, 461, 578, 579, 582], "110": [90, 176, 194, 204, 229, 305, 422, 960, 961], "3rd": [90, 157, 818, 861, 968, 976], "153": [90, 93, 648], "plot_iris_dataset": [90, 93], "easi": [91, 168, 205, 215, 245, 255, 257, 329, 342, 353, 366, 377, 379, 382, 383, 396, 403, 485, 489, 495, 850, 955, 961, 965, 973, 976, 986, 987, 990, 1001, 1018, 1023], "make_gaussian_quantil": [91, 110, 112, 367, 455, 459, 460, 461, 505], "321": 91, "323": 91, "y2": [91, 112, 701, 748, 967], "324": [91, 366], "multi": [91, 108, 109, 133, 164, 175, 213, 216, 217, 220, 224, 225, 226, 233, 236, 240, 250, 254, 266, 273, 275, 292, 297, 309, 314, 342, 346, 352, 358, 366, 368, 373, 374, 380, 384, 387, 396, 403, 404, 406, 413, 422, 437, 447, 454, 459, 480, 481, 489, 490, 495, 499, 500, 504, 505, 507, 526, 534, 535, 536, 538, 540, 542, 543, 544, 546, 549, 550, 552, 554, 595, 616, 618, 628, 631, 632, 637, 638, 642, 643, 645, 646, 647, 648, 651, 653, 657, 658, 659, 660, 661, 666, 669, 675, 688, 698, 705, 713, 718, 724, 726, 767, 781, 795, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 830, 831, 833, 839, 840, 841, 844, 850, 863, 867, 878, 879, 883, 885, 888, 891, 892, 893, 895, 896, 897, 903, 906, 909, 955, 967, 969, 973, 976, 980, 986, 987, 988, 992, 998, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1024], "325": [91, 332, 340], "326": [91, 122, 133], "351": [91, 93], "plot_random_dataset": [91, 93], "make_multilabel_classif": [92, 233, 367, 500, 521, 772, 814, 815, 966, 1010, 1011, 1013, 1019], "star": [92, 132, 371], "degener": [92, 243, 408, 425, 439, 518, 705, 962, 966, 1017, 1021, 1022], "vocabulari": [92, 212, 342, 343, 382, 404, 573, 574, 575, 576, 968, 992, 1001, 1008, 1010, 1013, 1016, 1019, 1021], "757": [92, 215, 216, 255, 277, 368], "w0": 92, "w1": [92, 403, 642], "make_ml_clf": 92, "ff3333": 92, "0198e1": 92, "bf5fff": 92, "fcd116": 92, "ff7216": 92, "4dbd33": 92, "87421f": 92, "plot_2d": [92, 218], "p_c": [92, 508], "p_w_c": [92, 508], "allow_unlabel": [92, 233, 508], "return_distribut": [92, 508], "sep": [92, 266], "p_w": 92, "139": [92, 93, 215, 236, 240, 277, 377, 403, 437, 447, 676, 680, 967], "plot_random_multilabel_dataset": [92, 93], "703": [93, 394, 498], "auto_examples_dataset": 93, "blind": [94, 107, 164, 342, 401, 518, 526], "fastica": [94, 107, 164, 401, 517, 520, 526, 1000, 1008, 1010, 1016, 1022, 1023], "increment": [94, 107, 164, 260, 375, 377, 427, 432, 448, 489, 518, 519, 520, 521, 524, 526, 529, 587, 631, 643, 651, 787, 807, 815, 816, 818, 819, 820, 821, 822, 852, 853, 863, 883, 884, 941, 962, 968, 1011, 1012], "fa": [94, 106, 107, 164, 377, 401, 458, 461, 517, 526, 781, 805], "precomput": [94, 107, 164, 175, 216, 221, 277, 279, 373, 380, 382, 384, 396, 404, 407, 417, 425, 426, 429, 430, 431, 435, 437, 442, 450, 456, 467, 468, 469, 509, 516, 520, 522, 525, 527, 533, 539, 541, 543, 545, 547, 550, 553, 555, 595, 596, 605, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 664, 666, 667, 669, 670, 673, 675, 676, 677, 681, 758, 762, 765, 774, 775, 816, 817, 825, 826, 827, 829, 830, 831, 833, 834, 835, 836, 837, 841, 884, 885, 886, 887, 888, 889, 892, 894, 942, 943, 944, 958, 964, 969, 981, 987, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1021, 1022, 1023, 1024], "chapter": [95, 353, 373, 396, 401, 403, 406, 515, 517, 519, 599, 604, 607, 628, 956, 959, 962, 981, 982], "decompos": [95, 99, 113, 301, 395, 519, 523, 694, 804, 920, 961, 962, 966, 983, 1002, 1003], "basicconfig": 95, "asctim": 95, "levelnam": 95, "faces_cent": 95, "image_shap": [95, 234], "constrained_layout": [95, 168, 218, 305, 306, 314], "set_constrained_layout_pad": 95, "w_pad": [95, 118, 348], "h_pad": [95, 118, 348], "set_edgecolor": 95, "vec": [95, 404, 523, 525, 532], "im": [95, 106, 268, 281, 989], "pad": [95, 118, 161, 168, 218, 235, 342, 348, 404, 573, 574, 576], "initialis": [95, 523, 525, 532, 1008, 1016, 1017], "mathbb": [95, 113, 152, 399, 966, 973, 981], "4096": [95, 366, 401, 480], "human": [95, 168, 342, 390, 396, 401, 840, 841, 966, 973, 1017], "friendli": [95, 358, 371, 379, 401, 876, 978, 979, 986, 987], "visualis": [95, 98, 106, 233, 529, 969, 987], "64x64": [95, 366, 401], "singular": [95, 380, 393, 396, 399, 436, 438, 467, 468, 469, 470, 506, 509, 519, 523, 525, 526, 529, 532, 534, 535, 642, 657, 658, 659, 672, 920, 962, 963, 965, 1002, 1003, 1014, 1015], "scalar": [95, 312, 377, 384, 397, 406, 408, 449, 452, 509, 518, 600, 601, 602, 607, 608, 612, 613, 722, 726, 899, 907, 958, 970, 972, 976, 980, 986, 1018, 1019, 1022, 1024], "noise_variance_": [95, 185, 517, 519, 526, 641, 1015, 1022], "pixelwis": 95, "pca_estim": 95, "nmf_estim": 95, "multivari": [95, 167, 363, 398, 401, 404, 458, 501, 502, 503, 612, 613, 614, 615, 634, 656, 663, 664, 818, 819, 820, 821, 822, 960, 962, 965, 968, 986, 992, 1000, 1003], "subcompon": [95, 401], "ica_estim": 95, "15e": 95, "sparsepca": [95, 516, 518, 519, 520, 522, 524, 525, 526, 527, 530, 531, 1008, 1015, 1016, 1018, 1019, 1021, 1022, 1023], "batch_pca_estim": 95, "minibatchdictionarylearn": [95, 98, 359, 401, 516, 523, 527, 530, 531, 1009, 1011, 1018, 1019, 1021, 1022, 1023, 1024], "batch_dict_estim": 95, "That": [95, 146, 186, 226, 257, 261, 343, 344, 358, 365, 379, 384, 400, 405, 406, 428, 431, 432, 542, 549, 578, 799, 891, 892, 955, 963, 964, 966, 972, 982, 1017, 1018], "enhanc": [95, 370, 371, 375, 382, 384, 396, 966, 984, 1006, 1007, 1008, 1009, 1010, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "consum": [95, 353, 365, 373, 384, 396, 400, 403, 434, 784, 785, 843, 844, 962, 990, 1013], "kmeans_estim": 95, "heteroscedast": [95, 103, 122, 199, 401, 859, 871], "fa_estim": 95, "factoranalysi": [95, 103, 106, 401, 529, 1009, 1011, 1020, 1022], "wrap": [95, 115, 122, 277, 365, 373, 384, 418, 493, 570, 571, 642, 661, 726, 809, 867, 956, 966, 969, 981, 986, 1008, 1013, 1016, 1018, 1019, 1021, 1023], "suit": [95, 127, 167, 197, 198, 226, 247, 312, 313, 342, 358, 371, 373, 376, 377, 379, 382, 387, 399, 401, 403, 406, 435, 437, 488, 662, 820, 864, 914, 955, 958, 963, 966, 968, 969, 980, 986, 987, 990, 994, 1015, 1022], "colormap": [95, 112, 157, 189, 206, 329, 334, 348, 682, 1021], "uv": [95, 401], "x_1": [95, 141, 152, 194, 198, 399, 401, 403, 406, 598, 610, 642, 856, 962, 968, 970, 976, 980], "x_n": [95, 401, 968, 970, 980], "dict_pos_dict_estim": 95, "positive_dict": [95, 516, 522, 530, 531], "dict_pos_code_estim": 95, "fit_algorithm": [95, 516, 522, 1023, 1024], "cd": [95, 368, 369, 371, 375, 377, 401, 456, 457, 463, 516, 522, 524, 525, 528, 530, 531, 532, 962, 1001, 1013, 1023], "positive_cod": [95, 516, 522, 527, 530, 531], "dict_pos_estim": 95, "906": [95, 107], "plot_faces_decomposit": [95, 107], "imagin": [96, 149, 400, 401, 404, 962], "microphon": 96, "s1": [96, 146, 157, 185, 186, 368, 1000], "sinusoid": [96, 111, 122, 181, 232, 406, 959, 1000], "s2": [96, 146, 157, 185, 186, 368, 535, 1000], "sawtooth": [96, 1000], "saw": [96, 198, 1000], "tooth": [96, 1000], "s_": [96, 261, 963, 974, 1000], "a_": [96, 393, 396, 523, 525, 532, 962, 1000], "mixing_": [96, 97, 518, 1000], "prove": [96, 990], "revert": [96, 615, 617, 618, 1015, 1020], "unmix": [96, 408, 518], "allclos": [96, 126, 978, 1000], "mean_": [96, 261, 517, 518, 519, 524, 526, 528, 863, 976, 1000, 1016], "orthogon": [96, 97, 98, 164, 175, 216, 395, 401, 511, 516, 522, 524, 527, 528, 533, 649, 650, 670, 671, 978, 988, 1003, 1008], "steelblu": [96, 97, 131], "sig": 96, "315": [96, 107, 182, 216, 277, 368], "plot_ica_blind_source_separ": [96, 107], "ica": [97, 395, 408, 982, 1002, 1003], "geometr": [97, 396, 673, 689, 715, 741, 963, 1016], "identifi": [97, 104, 122, 123, 166, 167, 197, 200, 245, 247, 255, 260, 266, 286, 306, 311, 342, 343, 365, 366, 370, 371, 375, 376, 384, 396, 397, 400, 403, 404, 431, 435, 442, 472, 481, 493, 494, 540, 541, 548, 591, 628, 634, 684, 697, 758, 808, 829, 848, 878, 879, 955, 962, 966, 972, 979, 990, 999, 1015, 1017, 1022, 1023], "standard_t": 97, "s_pca_": 97, "s_ica_": 97, "plot_sampl": [97, 248], "axis_list": 97, "x_axi": [97, 205, 261], "y_axi": [97, 205], "quiver": 97, "hline": 97, "set_zord": 97, "285": [97, 107, 318, 708], "plot_ica_vs_pca": [97, 107], "firstli": [98, 357, 382, 642, 1001], "undistort": 98, "noiseless": [98, 964], "pursuit": [98, 164, 175, 216, 401, 459, 511, 516, 522, 527, 533, 649, 650, 670, 671, 988, 1003, 1008], "omp": [98, 105, 196, 401, 516, 522, 527, 533, 649, 650, 670, 671, 988, 1003, 1008, 1016], "promin": [98, 384], "reminisc": 98, "downsampl": [98, 235], "075": [98, 209, 216], "show_with_diff": 98, "puor": 98, "22692": 98, "dico": 98, "n_iter_": [98, 205, 245, 384, 425, 432, 433, 434, 456, 457, 467, 468, 469, 516, 517, 518, 521, 522, 523, 524, 525, 528, 546, 547, 612, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 661, 662, 663, 664, 665, 675, 677, 779, 780, 832, 840, 841, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 1012, 1015, 1016, 1018, 1021, 1022, 1024], "n_steps_": [98, 434, 522, 523, 1021], "reconstruct_from_patches_2d": [98, 404, 568], "intercept": [98, 189, 206, 214, 338, 384, 467, 468, 469, 534, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 858, 862, 865, 883, 884, 890, 962, 964, 966, 971, 980, 981, 1011, 1013, 1017, 1018], "transform_algorithm": [98, 105, 516, 522, 527, 1024], "n1": 98, "atom": [98, 105, 401, 516, 522, 524, 527, 528, 530, 531, 638, 648, 669, 962, 1008, 1021], "transform_n_nonzero_coef": [98, 105, 516, 522, 527], "n2": 98, "n4": 98, "transform_alpha": [98, 105, 516, 522, 527, 1021], "set_param": [98, 106, 114, 119, 122, 168, 169, 177, 185, 186, 190, 201, 205, 231, 270, 309, 332, 343, 374, 384, 396, 397, 403, 406, 410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 779, 780, 781, 784, 785, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 956, 972, 992, 999, 1008, 1014, 1015, 1016, 1021, 1022], "plot_image_denois": [98, 107], "ipca": [99, 518, 519], "flip": [99, 567, 726, 920, 968, 1012, 1021], "incrementalpca": [99, 359, 401, 518, 520, 524, 526, 529, 1012, 1015, 1016, 1018, 1019, 1022], "x_ipca": 99, "x_pca": 99, "turquois": [99, 104, 105, 124, 203, 214, 221, 244, 245, 264], "x_transform": [99, 127, 470, 516, 517, 518, 519, 520, 522, 524, 528, 551, 623, 624, 673, 674, 675, 676], "nmean": 99, "shadow": [99, 104, 105, 221, 319, 336, 344, 404], "scatterpoint": [99, 104, 221, 244, 319], "252": [99, 107, 110, 133, 220, 315, 368, 519, 859, 871], "plot_incremental_pca": [99, 107], "kernal": 100, "nest": [100, 110, 164, 186, 250, 273, 358, 377, 384, 387, 396, 400, 406, 410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 447, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 489, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 779, 780, 781, 784, 785, 786, 795, 805, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 934, 955, 966, 969, 1008, 1009, 1012, 1014, 1015, 1016, 1022], "train_ax": 100, "test_ax": 100, "straight": [100, 187, 193, 195, 254, 357], "inner": [100, 122, 258, 262, 319, 357, 404, 428, 499, 531, 567, 574, 633, 654, 665, 759, 761, 958, 966, 976, 981, 1009, 1012, 1022], "x_test_kernel_pca": 100, "orig_data_ax": 100, "pca_proj_ax": 100, "kernel_pca_proj_ax": 100, "unfold": [100, 374, 963], "untangl": 100, "mind": [100, 166, 167, 168, 215, 303, 304, 342, 343, 353, 371, 390, 398, 400, 403, 631, 632, 689, 962, 981, 986, 992, 999], "investig": [100, 106, 162, 337, 371, 962], "pca_back_proj_ax": 100, "kernel_pca_back_proj_ax": 100, "reli": [100, 119, 146, 170, 185, 186, 277, 310, 314, 342, 357, 358, 373, 376, 379, 380, 382, 384, 392, 393, 396, 401, 403, 404, 534, 570, 571, 578, 582, 592, 593, 807, 810, 848, 932, 955, 958, 960, 962, 966, 969, 976, 981, 990, 1016, 1017, 1018, 1022, 1024], "analyt": [100, 401, 406, 517, 605, 693, 956, 960, 966, 985, 990], "kernelridg": [100, 149, 232, 657, 959, 1012], "relianc": 100, "633": [100, 107], "plot_kernel_pca": [100, 107], "aid": [101, 254, 396, 774, 775, 963, 990, 1008, 1020], "kevin": [101, 628, 1010, 1012, 1014, 1015, 1018, 1019, 1020, 1022, 1023], "hugh": [101, 858, 1010, 1021], "pdf": [101, 146, 257, 282, 299, 368, 371, 396, 405, 427, 434, 516, 519, 522, 526, 626, 629, 634, 643, 649, 651, 652, 656, 661, 664, 667, 668, 670, 671, 677, 820, 821, 832, 839, 876, 878, 962, 979, 982, 989, 1004, 1008], "30000": [101, 366], "pdf_z": 101, "plot_fig": [101, 194], "fig_num": [101, 194], "pca_scor": [101, 103], "vt": [101, 535], "full_matric": 101, "x_pca_axi": 101, "y_pca_axi": 101, "z_pca_axi": 101, "x_pca_plan": 101, "y_pca_plan": 101, "z_pca_plan": 101, "plot_surfac": [101, 168, 194], "165": [101, 107, 229, 240, 967], "plot_pca_3d": [101, 107], "cla": 102, "plot_pca_iri": [102, 107], "homoscedast": [103, 229, 303, 966, 1016], "succe": [103, 181], "subspac": [103, 399, 403, 437, 500, 540, 541, 676, 680, 920, 960, 969, 972, 978, 990, 1000], "overestim": [103, 353, 400], "circumst": [103, 215, 969, 986], "nip": [103, 368, 500, 526, 551, 626, 966], "604": [103, 526], "minka": [103, 526, 962], "deni": [103, 1010, 1011, 1015, 1016, 1017, 1023], "engemann": [103, 1010, 1011, 1015], "x_homo": 103, "x_hetero": 103, "cross_val_scor": [103, 136, 161, 162, 164, 250, 253, 262, 271, 273, 332, 353, 371, 373, 382, 400, 403, 505, 560, 688, 726, 781, 804, 806, 891, 892, 955, 966, 996, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1020, 1021], "fa_scor": 103, "shrunk_cov_scor": 103, "lw_score": 103, "n_components_pca": 103, "n_components_fa": 103, "n_components_pca_ml": 103, "axhlin": [103, 135, 187, 256, 260], "violet": 103, "788": [103, 107], "plot_pca_vs_fa_model_select": [103, 107], "flower": [104, 266, 491, 492, 966, 986], "92461872": 104, "05306648": 104, "x_r": [104, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588], "x_r2": 104, "211": [104, 107, 262, 314, 320, 859, 871], "plot_pca_vs_lda": [104, 107], "ricker": 105, "sparsecod": [105, 401, 516, 522, 525, 533, 1015, 1016, 1018, 1020, 1022], "mexican": 105, "piecewis": [105, 312, 393, 957, 962, 976, 982], "matter": [105, 248, 353, 396, 403, 552, 653, 661, 663, 962, 1012], "motiv": [105, 371, 373, 384, 403, 958, 966, 976, 990, 1021], "heavier": [105, 398, 962], "ricker_funct": 105, "ricker_matrix": 105, "d_fix": 105, "d_multi": 105, "first_quart": 105, "transform_n_nozero_coef": 105, "lasso_lar": [105, 516, 522, 527, 533, 1018], "n_nonzero": 105, "coder": [105, 527, 701], "flatnonzero": [105, 185, 256, 265, 266, 765], "soft": [105, 130, 131, 371, 384, 554, 555, 879, 887, 980, 990, 1013], "debias": 105, "lstsq": [105, 371, 642, 655], "rcond": 105, "295": [105, 107], "plot_sparse_cod": [105, 107], "uncov": [106, 680], "inher": [106, 192, 353, 396, 401, 956, 958, 960, 961, 963, 967], "varimax": [106, 401, 517, 1020], "jona": [106, 1020], "sassenhagen": [106, 1020], "set_yticklabel": [106, 152, 161, 162, 170, 268, 344], "n_comp": [106, 173], "unrot": 106, "52106591": 106, "37741762": 106, "26934744": 106, "92329566": 106, "5804131": 106, "02449161": 106, "56485654": 106, "06694199": 106, "88096009": 106, "4472869": 106, "41691605": 106, "55390036": 106, "99918858": 106, "01915283": 106, "96228895": 106, "05840206": 106, "98633022": 106, "05752333": 106, "16052385": 106, "67443065": 106, "90809432": 106, "41726413": 106, "85857475": 106, "43847489": 106, "364": [106, 107, 456, 457, 1009], "plot_varimax_fa": [106, 107], "852": [107, 266, 273], "auto_examples_decomposit": 107, "predictor": [108, 133, 164, 197, 215, 373, 383, 384, 397, 399, 400, 403, 406, 451, 452, 467, 468, 469, 481, 501, 502, 503, 540, 541, 547, 550, 553, 587, 595, 615, 617, 618, 633, 638, 642, 654, 658, 665, 686, 804, 806, 815, 816, 844, 856, 857, 863, 940, 962, 967, 1009, 1015, 1018], "stack": [108, 133, 164, 282, 351, 370, 379, 382, 384, 402, 449, 451, 452, 481, 500, 547, 550, 552, 553, 597, 612, 613, 615, 638, 658, 686, 804, 806, 844, 848, 856, 857, 863, 940, 956, 986, 987, 988, 989, 1003, 1011, 1015, 1016, 1017, 1018, 1019], "versu": [108, 129, 133, 164, 167, 175, 206, 212, 216, 232, 245, 250, 273, 285, 316, 323, 396, 400, 403, 406, 489, 505, 519, 538, 541, 595, 624, 643, 644, 651, 653, 659, 660, 661, 662, 767, 778, 781, 786, 805, 809, 815, 844, 879, 880, 887, 888, 891, 892, 955, 962, 966, 967, 972, 979, 980, 981, 999, 1016], "isolationforest": [108, 133, 164, 226, 235, 616, 809, 887, 972, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1024], "oob": [108, 121, 133, 164, 403, 500, 549, 987, 1010, 1021], "votingclassifi": [108, 133, 164, 489, 549, 555, 616, 643, 821, 825, 888, 891, 955, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022], "vote": [108, 130, 131, 133, 164, 275, 384, 385, 486, 540, 541, 542, 545, 549, 550, 554, 555, 642, 811, 825, 826, 831, 833, 967, 969, 988, 999, 1003, 1011, 1013, 1018], "hasti": [109, 110, 113, 114, 120, 124, 146, 185, 256, 368, 400, 403, 504, 505, 538, 544, 545, 613, 641, 706, 707, 708, 813, 830, 876, 891, 892, 956, 960, 962, 967, 973, 978, 980, 982], "2009": [109, 110, 113, 114, 124, 181, 396, 400, 401, 403, 404, 504, 505, 513, 516, 522, 523, 525, 526, 529, 532, 538, 544, 545, 620, 656, 664, 681, 814, 891, 892, 919, 920, 962, 966, 967, 973, 982], "tibshirani": [109, 113, 114, 124, 146, 185, 256, 368, 400, 403, 505, 544, 545, 613, 641, 706, 707, 708, 813, 830, 891, 892, 956, 960, 962, 967, 973, 982], "friedman": [109, 113, 114, 124, 256, 398, 400, 403, 463, 501, 502, 503, 505, 543, 544, 545, 550, 578, 579, 813, 891, 892, 894, 960, 962, 967, 973, 982], "ed": [109, 114, 124, 396, 403, 505, 544, 545, 978, 1008, 1015], "springer": [109, 113, 114, 124, 256, 394, 396, 400, 401, 403, 505, 520, 544, 545, 675, 679, 681, 690, 705, 710, 724, 725, 740, 779, 891, 892, 963, 966, 967, 973, 982], "zhu": [109, 110, 403, 504, 538, 643, 878], "zou": [109, 110, 185, 403, 504, 538, 641, 962, 980], "rosset": [109, 110, 403, 504, 538], "make_hastie_10_2": [109, 120, 124, 261, 367, 403, 544, 973], "12_000": 109, "Be": [109, 143, 158, 342, 371, 398, 552, 553, 633, 639, 640, 641, 643, 644, 654, 665, 689, 799, 800, 858, 976, 1005, 1009], "stump": [109, 112, 403, 544, 1019], "2_000": 109, "dt_stump": 109, "min_samples_leaf": [109, 121, 122, 169, 309, 312, 347, 403, 542, 543, 544, 545, 546, 547, 549, 550, 551, 891, 892, 893, 894, 982, 1014], "dt_stump_err": 109, "dt_err": 109, "ada_discret": 109, "adaboostclassifieradaboostclassifi": 109, "decisiontreeclassifierdecisiontreeclassifi": [109, 351], "ada_r": 109, "zero_one_loss": [109, 371, 688, 718, 966, 1009, 1010, 1011], "ada_discrete_err": 109, "staged_predict": [109, 110, 123, 403, 538, 539, 544, 545, 546, 547, 1008, 1020], "ada_discrete_err_train": 109, "ada_real_err": 109, "ada_real_err_train": 109, "leg": 109, "fancybox": [109, 336], "get_fram": 109, "537": [109, 133, 168], "plot_adaboost_hastie_10_2": [109, 133], "sphere": [110, 164, 217, 218, 224, 343, 402, 504, 574, 673, 674, 675, 676, 677, 748, 906, 960, 964, 969], "roughli": [110, 122, 186, 248, 267, 277, 304, 357, 384, 401, 404, 504, 963, 1008], "samm": [110, 112, 403, 538], "13000": 110, "bdt_real": 110, "bdt_discret": 110, "real_test_error": 110, "discrete_test_error": 110, "real_test_predict": 110, "discrete_test_predict": 110, "n_trees_discret": 110, "n_trees_real": 110, "termin": [110, 358, 376, 377, 379, 387, 396, 433, 446, 538, 539, 543, 544, 545, 548, 550, 651, 652, 653, 661, 663, 840, 841, 892, 894, 972, 982], "alwai": [110, 119, 122, 176, 197, 215, 223, 230, 260, 263, 267, 306, 326, 343, 353, 357, 358, 365, 371, 372, 373, 377, 383, 384, 387, 394, 396, 397, 400, 403, 404, 405, 406, 417, 428, 434, 449, 450, 452, 454, 467, 468, 469, 473, 481, 493, 494, 529, 534, 536, 537, 539, 541, 543, 544, 545, 546, 547, 549, 550, 553, 555, 566, 573, 574, 576, 579, 596, 612, 613, 615, 617, 618, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 656, 657, 658, 661, 663, 664, 677, 680, 690, 694, 700, 706, 707, 708, 716, 718, 719, 723, 766, 769, 770, 779, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 816, 817, 826, 827, 834, 835, 841, 848, 856, 861, 863, 876, 884, 885, 886, 888, 889, 891, 892, 894, 921, 955, 956, 958, 960, 962, 965, 966, 969, 972, 974, 978, 979, 981, 982, 990, 992, 999, 1008, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1021, 1022, 1023], "crop": [110, 379, 1023], "discrete_estimator_error": 110, "estimator_errors_": [110, 538, 539], "real_estimator_error": 110, "discrete_estimator_weight": 110, "estimator_weights_": [110, 538, 539], "plot_adaboost_multiclass": [110, 133], "1d": [111, 113, 164, 168, 198, 230, 278, 291, 336, 349, 371, 378, 380, 383, 384, 397, 402, 449, 452, 602, 618, 638, 642, 645, 648, 669, 688, 697, 698, 704, 713, 714, 718, 722, 726, 767, 768, 771, 778, 825, 826, 827, 828, 829, 831, 833, 834, 835, 848, 899, 903, 904, 929, 953, 967, 992, 999, 1008, 1013, 1014, 1015, 1017, 1021, 1022], "drucker": [111, 403, 539], "1997": [111, 366, 401, 403, 406, 520, 539, 675, 679, 962, 963, 966], "dummi": [111, 197, 215, 260, 360, 373, 376, 391, 856, 865, 976, 982, 1003, 1009, 1011, 1012, 1013, 1015], "decisiontreeregressor": [111, 113, 236, 300, 309, 349, 350, 376, 539, 541, 543, 544, 545, 547, 550, 617, 618, 891, 894, 896, 915, 956, 982, 1009, 1010, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "adaboostregressor": [111, 403, 538, 547, 1010, 1011, 1014, 1017, 1018, 1021, 1023, 1024], "regr_1": [111, 349, 350], "regr_2": [111, 349, 350], "y_1": [111, 349, 350, 399, 966, 970, 980], "y_2": [111, 349, 350, 970], "439": [111, 133, 343], "plot_adaboost_regress": [111, 133], "puriti": [112, 895, 897], "plot_adaboost_twoclass": [112, 133], "bdt": 112, "plot_color": [112, 348], "br": 112, "plot_step": [112, 118, 348], "class_nam": [112, 251, 895, 896, 897, 982, 1024], "xx0": [112, 616], "twoclass_output": 112, "plot_rang": 112, "610": [112, 133], "irreduc": [113, 966], "light": [113, 366], "beam": [113, 1008], "pointwis": [113, 156, 407, 429], "offset": [113, 173, 382, 398, 401, 454, 493, 494, 548, 617, 618, 626, 627, 629, 630, 662, 712, 759, 761, 829, 887, 966, 980, 999, 1016], "narrow": [113, 122, 299, 301, 376, 823, 824], "bootstrap": [113, 114, 121, 161, 260, 269, 311, 400, 403, 539, 540, 541, 542, 543, 548, 549, 550, 909, 937, 962, 1008, 1009, 1011, 1013, 1016, 1018, 1021], "stem": [113, 169, 196, 248, 400, 404, 958, 968], "0255": 113, "0003": 113, "0152": 113, "0098": 113, "0196": 113, "0004": [113, 304], "0092": 113, "baggingregressor": [113, 403, 540, 894, 956, 1011, 1014, 1016, 1019, 1023, 1024], "n_repeat": [113, 116, 123, 145, 167, 169, 170, 257, 309, 400, 500, 619, 796, 797, 974], "knn": [113, 130, 137, 161, 285, 286, 289, 304, 311, 319, 342, 403, 587, 832, 878, 879, 969, 979, 999, 1014], "y_predict": [113, 373, 1008], "y_error": [113, 203], "y_nois": 113, "y_bia": 113, "y_var": 113, "148": [113, 133, 1011], "plot_bias_vari": [113, 133], "z_i": [114, 970], "y_i": [114, 312, 337, 394, 403, 957, 958, 962, 966, 970, 980, 981, 982], "whilst": [114, 220], "practition": 114, "suitabl": [114, 122, 181, 183, 294, 344, 365, 366, 377, 380, 396, 401, 404, 437, 447, 453, 472, 490, 493, 612, 620, 818, 819, 822, 857, 858, 881, 931, 935, 960, 962, 965, 976, 978, 980, 986, 989, 1001, 1022, 1023], "p592": 114, "593": 114, "kian": [114, 1013, 1023], "ho": [114, 403, 540, 541, 966, 1013, 1016, 1017, 1022], "hui": [114, 185, 523, 525, 532, 641, 962], "ordereddict": 114, "123": [114, 131, 353, 403, 501, 502, 503, 540, 541, 816, 967, 974], "warm_start": [114, 153, 190, 312, 373, 377, 384, 403, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 595, 631, 633, 634, 637, 643, 645, 647, 651, 652, 653, 654, 661, 662, 663, 665, 779, 780, 832, 840, 841, 972, 988, 1003, 1008, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1022, 1024], "track": [114, 121, 318, 371, 374, 375, 387, 392, 519, 935, 967, 986, 987, 1015, 1018], "trajectori": 114, "ensemble_clf": 114, "oob_scor": [114, 403, 540, 541, 542, 543, 549, 550, 1013, 1015], "log2": [114, 207, 237, 542, 543, 544, 545, 549, 550, 891, 892, 893, 894, 967], "error_r": 114, "min_estim": 114, "max_estim": 114, "oob_error": 114, "oob_score_": [114, 540, 541, 542, 543, 544, 545, 549, 550, 1010, 1024], "clf_err": 114, "765": [114, 133], "plot_ensemble_oob": [114, 133], "betatim": [115, 128, 1023], "leak": [115, 262, 342, 353, 397, 400, 843, 868, 869, 871, 872, 873, 874, 976, 1008, 1015, 1018], "80_000": 115, "x_full_train": 115, "y_full_train": 115, "x_train_ensembl": 115, "x_train_linear": 115, "y_train_ensembl": 115, "y_train_linear": 115, "gradientboostingclassifi": [115, 120, 121, 124, 301, 353, 382, 403, 538, 546, 617, 618, 967, 973, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "random_forest": 115, "gradient_boost": [115, 1009, 1010, 1011, 1017], "histgradientboostingclassifi": [115, 309, 310, 311, 312, 314, 358, 403, 544, 549, 617, 618, 956, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "randomtreesembed": [115, 127, 219, 403, 893, 1009, 1016, 1017, 1021, 1022, 1023], "random_tree_embed": 115, "rt_model": 115, "randomtreesembeddingrandomtreesembed": 115, "rf_appli": 115, "rf_leaves_yield": 115, "kw_arg": [115, 847, 976, 1014], "rf_model": 115, "0x7fd124441ee0": 115, "functiontransformerfunctiontransform": 115, "gbdt_appli": 115, "gbdt_leaves_yield": 115, "gbdt_model": 115, "0x7fd112920790": 115, "roccurvedisplai": [115, 235, 238, 254, 266, 267, 309, 378, 772, 773, 972, 1005, 1018, 1024], "rt": 115, "rf": [115, 128, 131, 132, 169, 309, 353, 403, 552, 554, 555], "gbdt": [115, 168, 309, 310, 376, 403], "model_displai": 115, "174": [115, 121, 133, 296, 377, 569], "plot_feature_transform": [115, 133], "artifici": [116, 119, 126, 162, 218, 232, 296, 342, 366, 367, 368, 376, 393, 395, 396, 400, 401, 406, 520, 681, 813, 840, 841, 959, 963, 965, 967, 973, 978, 982, 987, 990, 1008], "feature_importances_": [116, 117, 123, 146, 169, 170, 384, 403, 405, 538, 539, 542, 543, 544, 545, 549, 550, 551, 578, 579, 582, 891, 892, 893, 894, 1010, 1013, 1017], "estimators_": [116, 118, 233, 309, 384, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 811, 812, 813, 814, 815, 816, 817, 1009, 1015, 1022], "008": [116, 158, 368, 377], "forest_import": 116, "mdi": [116, 123, 164, 165, 170, 171, 403, 449, 481, 549, 615, 619, 809, 843, 857, 974], "overcom": [116, 357, 404], "permutation_import": [116, 117, 123, 169, 170, 309, 403, 538, 539, 542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894, 974, 1018, 1020, 1021], "importances_mean": [116, 123, 169, 170, 309, 619, 974], "825": [116, 734], "importances_std": [116, 619, 974], "omit": [116, 166, 167, 322, 376, 409, 460, 519, 651, 653, 661, 788, 790, 811, 812, 815, 818, 819, 820, 821, 822, 840, 964, 971], "304": [116, 133, 303, 368], "plot_forest_import": [116, 133], "hotter": 117, "job": [117, 245, 371, 375, 379, 403, 407, 422, 429, 431, 433, 435, 437, 442, 443, 446, 449, 452, 453, 457, 516, 520, 521, 522, 524, 527, 528, 530, 531, 533, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 587, 595, 619, 624, 642, 673, 674, 675, 676, 677, 678, 679, 758, 762, 765, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 842, 845, 878, 879, 881, 932, 990, 994], "five": [117, 243, 318, 321, 366, 516, 524, 530, 963, 969, 981, 990, 1008], "drawback": [117, 214, 958, 961], "img_shap": 117, "imp_reshap": 117, "met": [117, 373, 405, 519, 526, 612, 656, 962, 966, 1016], "plot_forest_importances_fac": [117, 133], "third": [118, 123, 141, 146, 157, 215, 226, 248, 282, 301, 358, 366, 370, 382, 385, 404, 519, 573, 574, 575, 576, 783, 784, 785, 790, 825, 826, 827, 829, 831, 861, 873, 934, 955, 977, 984, 1008, 1019], "fourth": [118, 992], "descend": [118, 612, 1018], "extratreesclassifi": [118, 127, 403, 405, 543, 549, 551, 893, 894, 967, 1011, 1012, 1016, 1017, 1018, 1021, 1022, 1023, 1024], "decisiontre": [118, 1013], "consol": [118, 369, 993], "extratre": [118, 127, 357, 1011], "sequenti": [118, 140, 147, 164, 191, 258, 311, 369, 401, 403, 404, 486, 519, 578, 582, 587, 588, 590, 591, 631, 632, 637, 638, 645, 646, 647, 648, 658, 843, 956, 974, 980, 986, 988, 1003, 1008, 1017, 1020], "9266666666666666": 118, "8666666666666667": 118, "9933333333333333": 118, "rdylbu": [118, 348], "plot_step_coars": 118, "plot_idx": 118, "model_titl": 118, "model_detail": 118, "blend": [118, 129, 305, 384, 400, 986], "estimator_alpha": 118, "coarser": [118, 122], "regularli": [118, 382, 968], "xx_coarser": 118, "yy_coars": 118, "z_points_coars": 118, "cs_point": 118, "plot_forest_iri": [118, 133], "equidist": [119, 677], "lowa": 119, "sale": [119, 257, 966, 990], "42165": 119, "categorical_columns_subset": 119, "bldgtype": 119, "garagefinish": 119, "lotconfig": 119, "masvnrtyp": [119, 129], "housestyl": [119, 129], "fireplacequ": 119, "extercond": 119, "exterqu": [119, 129], "poolqc": 119, "numerical_columns_subset": 119, "3ssnporch": 119, "fireplac": 119, "bsmthalfbath": 119, "halfbath": 119, "garagecar": [119, 129], "totrmsabvgrd": 119, "bsmtfinsf1": [119, 129], "bsmtfinsf2": 119, "grlivarea": 119, "screenporch": 119, "n_categorical_featur": [119, 546, 547, 617, 618], "n_numerical_featur": 119, "1460": [119, 129], "make_column_transform": [119, 129, 167, 228, 310, 397, 449, 451, 1016], "dropper": 119, "hist_drop": 119, "hist_one_hot": 119, "etc": [119, 197, 215, 252, 261, 262, 353, 357, 359, 371, 373, 375, 376, 382, 383, 384, 393, 397, 400, 404, 474, 488, 542, 543, 549, 550, 653, 661, 677, 703, 755, 781, 795, 814, 817, 847, 858, 891, 892, 893, 894, 895, 897, 903, 904, 914, 955, 956, 960, 966, 969, 986, 987, 990, 1008, 1015, 1017, 1018], "use_encoded_valu": [119, 129, 169, 305, 857, 976, 1020], "unknown_valu": [119, 129, 169, 305, 857, 976, 1020, 1022, 1023], "hist_ordin": 119, "n_unique_categori": [119, 305], "hist_n": 119, "mean_absolute_percentage_error": [119, 966, 1020, 1022], "neg_mean_absolute_percentage_error": [119, 966, 974], "n_cv_fold": [119, 305, 787, 807, 810], "dropped_result": 119, "one_hot_result": 119, "ordinal_result": 119, "native_result": 119, "plot_result": [119, 242, 243, 248], "figure_titl": 119, "plot_info": 119, "test_scor": [119, 121, 123, 205, 256, 259, 272, 305, 337, 347, 383, 400, 787, 806, 807, 810], "y_limit": 119, "mape_cv_mean": 119, "mape_cv_std": 119, "c0": [119, 229, 305], "slowest": [119, 919, 920], "theori": [119, 232, 247, 337, 368, 395, 396, 400, 403, 675, 679, 710, 740, 875, 876, 920, 955, 962, 963, 965, 966, 967, 981, 982], "poorer": [119, 353, 401], "slight": [119, 202, 311, 403, 434, 1018], "acf": 119, "bde": 119, "isol": [119, 125, 226, 235, 343, 369, 371, 377, 387, 548, 829, 887, 1017, 1018], "bcde": 119, "histgradientboostingregressor__max_depth": 119, "histgradientboostingregressor__max_it": 119, "altogeth": [119, 377, 1016], "plot_gradient_boosting_categor": [119, 133], "validation_fract": [120, 205, 312, 403, 544, 545, 546, 547, 651, 652, 653, 661, 663, 840, 841, 980, 1016, 1022], "denot": [120, 380, 384, 387, 394, 396, 400, 403, 573, 574, 576, 781, 787, 795, 856, 857, 951, 955, 958, 962, 964, 966, 967, 976, 979, 992], "kept": [120, 247, 277, 337, 365, 375, 390, 406, 481, 520, 523, 525, 526, 531, 532, 582, 595, 596, 604, 605, 629, 680, 779, 780, 904, 976, 1016, 1017], "asid": [120, 205, 390, 544, 545, 546, 547, 651, 652, 653, 661, 663, 840, 841], "n_estimators_": [120, 544, 545], "vighnesh": [120, 1013, 1014, 1016], "birodkar": [120, 1013, 1014, 1016], "vighneshbirodkar": 120, "rvraghav93": [120, 261, 299], "data_list": 120, "n_gb": 120, "score_gb": 120, "time_gb": 120, "n_gbe": 120, "gbe": 120, "gb": [120, 132, 403, 538, 618], "bar_width": 120, "bar1": 120, "crimson": 120, "bar2": 120, "coral": 120, "n_est": 120, "max_i": [120, 233, 968], "668": [120, 133], "plot_gradient_boosting_early_stop": [120, 133], "fly": [121, 376, 379, 493, 494, 567, 1008, 1010, 1017], "pessimist": [121, 403], "cumul": [121, 197, 215, 396, 710, 719, 740, 860, 872, 976, 980, 1015, 1017, 1018], "demand": [121, 404, 781, 795, 804, 805], "6820": 121, "special": [121, 167, 187, 215, 287, 305, 329, 365, 367, 373, 377, 382, 384, 396, 399, 401, 449, 452, 538, 540, 544, 804, 895, 955, 960, 962, 964, 965, 966, 967, 969, 982, 1015, 1018, 1020, 1022], "expit": [121, 187, 403, 546, 962, 1015], "ridgewai": [121, 403], "gbm": [121, 403, 1011], "x3": [121, 235, 397, 1000], "binomi": [121, 124, 403, 538, 544, 546, 962, 1022], "acc": 121, "heldout_scor": 121, "devianc": [121, 124, 197, 215, 403, 538, 543, 544, 546, 547, 550, 633, 654, 665, 706, 707, 708, 731, 733, 736, 892, 894, 962, 982, 1009, 1018, 1019, 1021, 1022, 1024], "y_proba": [121, 124, 304, 384, 843], "staged_predict_proba": [121, 124, 538, 544, 546, 1008], "cv_estim": 121, "cv_clf": 121, "val_scor": 121, "cv_score": 121, "cumsum": [121, 197, 215, 1015], "oob_improvement_": [121, 403, 544, 545, 1010], "oob_best_it": 121, "test_best_it": 121, "cv_best_it": 121, "brew": [121, 369, 387], "oob_color": 121, "212": [121, 262, 271, 273, 320, 368, 454, 485, 972, 999], "test_color": 121, "127": [121, 168, 242, 249, 343, 1008], "201": [121, 368, 569], "cv_color": 121, "253": [121, 519], "192": [121, 377, 1008], "oob_lin": 121, "test_lin": 121, "cv_line": 121, "dashdot": [121, 149, 152], "xticks_po": 121, "tolist": [121, 161, 170, 256, 311, 366], "xticks_label": 121, "498": [121, 133, 188, 216], "plot_gradient_boosting_oob": [121, 133], "atleast_2d": [122, 373], "expected_i": 122, "amplitud": [122, 154, 156, 191, 406, 962], "lognorm": [122, 155, 178, 246, 303, 976], "tail": [122, 162, 167, 197, 199, 257, 299, 506, 509, 962], "imposs": [122, 344, 987], "mean_pinball_loss": [122, 312, 962, 966, 1021], "all_model": 122, "min_samples_split": [122, 123, 124, 261, 269, 300, 311, 403, 542, 543, 544, 545, 549, 550, 551, 784, 785, 891, 892, 893, 894, 955, 982, 1014], "gbr": 122, "gbr_l": 122, "5th": [122, 157, 396], "95th": [122, 732], "y_med": 122, "fill_between": [122, 135, 149, 154, 156, 158, 176, 177, 215, 257, 259, 260, 261, 267, 272, 787], "unfortun": [122, 166, 167, 215, 379, 382, 403, 493, 494], "sinoisoid": 122, "highlight_min": [122, 186], "font": [122, 186, 211, 231, 895, 897], "pbl": 122, "nbsp": [122, 186], "715413": 122, "750348": 122, "127128": 122, "253445": 122, "379763": 122, "933253": 122, "305438": 122, "622811": 122, "940184": 122, "827917": 122, "909909": 122, "145957": 122, "382005": 122, "667219": 122, "asymmetr": [122, 199, 384, 1013], "signficiantli": 122, "nor": [122, 260, 342, 353, 357, 376, 382, 404, 422, 431, 579, 907, 970, 982, 1019], "917281": 122, "767498": 122, "617715": 122, "692901": 122, "144204": 122, "245961": 122, "347717": 122, "648026": 122, "412021": 122, "607752": 122, "803483": 122, "874771": 122, "354394": 122, "355445": 122, "356497": 122, "852774": 122, "underestim": [122, 168, 197, 215, 257, 371], "extrem": [122, 197, 199, 234, 299, 306, 320, 343, 371, 374, 396, 401, 542, 543, 549, 550, 551, 617, 618, 664, 708, 736, 893, 894, 895, 897, 966, 968], "coverage_fract": 122, "y_low": 122, "y_high": 122, "868": [122, 142], "hypothesi": [122, 257, 263, 337, 400, 675, 679, 808, 963], "pinbal": [122, 312, 547, 655, 707, 732, 962, 1021, 1022], "experiment": [122, 161, 162, 197, 268, 269, 311, 312, 360, 371, 373, 374, 381, 382, 384, 400, 481, 534, 612, 681, 784, 785, 934, 936, 955, 956, 962, 965, 966, 986, 987, 995, 1003, 1016, 1017, 1020, 1021, 1022, 1023, 1024], "enable_halving_search_cv": [122, 268, 269, 311, 375, 784, 785, 955], "halvingrandomsearchcv": [122, 269, 311, 564, 784, 955, 1020, 1022, 1023], "make_scor": [122, 261, 400, 781, 805, 806, 966, 1017], "neg_mean_pinball_loss_05p_scor": 122, "greater_is_bett": [122, 726, 966], "search_05p": 122, "max_resourc": [122, 784, 785, 955], "min_resourc": [122, 784, 785], "redefin": [122, 167], "neg_mean_pinball_loss_95p_scor": 122, "search_95p": 122, "estimator__alpha": 122, "did": [122, 149, 167, 170, 197, 205, 215, 243, 366, 612, 697, 800, 885, 1000, 1009, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1023], "untun": 122, "joint": [122, 164, 168, 175, 216, 218, 397, 596, 637, 647, 677, 818, 819, 820, 821, 822, 883, 962, 963, 967, 971, 973, 977, 1008], "9026666666666666": 122, "796": 122, "sadli": 122, "plot_gradient_boosting_quantil": [122, 133], "tackl": [123, 257, 358, 371, 396, 820, 968, 990, 995], "katrina": [123, 1019], "ni": [123, 1014, 1019], "nilichen": 123, "reg": [123, 167, 177, 300, 310, 334, 403, 543, 545, 553, 635, 636, 638, 639, 640, 641, 642, 648, 649, 650, 655, 656, 663, 664, 674, 678, 894, 962, 1013], "3025": 123, "7877": 123, "train_score_": [123, 403, 544, 545, 546, 547], "impur": [123, 351, 386, 403, 405, 538, 539, 542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894, 895, 897, 982, 1003, 1013, 1014, 1015, 1016], "feature_import": 123, "sorted_idx": [123, 309], "po": [123, 221, 404], "align": [123, 162, 218, 242, 268, 344, 384, 674, 678, 969, 980, 1002, 1003, 1024], "vert": [123, 169, 170, 309, 980], "264": [123, 133], "plot_gradient_boosting_regress": [123, 133], "consider": [124, 150, 153, 252, 258, 264, 371, 406, 604, 781, 795, 955, 968, 972, 980, 990], "return_invers": [124, 373], "original_param": 124, "max_leaf_nod": [124, 197, 312, 351, 403, 542, 543, 544, 545, 546, 547, 549, 550, 551, 891, 892, 893, 894, 1011, 1017, 1019], "test_devi": 124, "282": [124, 133, 997, 1008], "plot_gradient_boosting_regular": [124, 133], "anomali": [125, 164, 225, 235, 240, 283, 284, 366, 395, 454, 497, 507, 548, 624, 662, 829, 844, 887, 972, 1014, 1015], "recurs": [125, 140, 147, 164, 347, 373, 395, 396, 400, 425, 426, 427, 430, 448, 487, 500, 548, 578, 579, 582, 587, 617, 618, 643, 800, 888, 966, 969, 972, 973, 982, 988, 1000, 1003, 1008, 1018, 1019], "deform": [125, 247, 339], "notat": [125, 384, 397, 401, 404, 575, 697, 962, 966, 992, 1017, 1024], "120": [125, 219, 405, 575, 1008], "cluster_1": 125, "cluster_2": 125, "legend_el": [125, 210, 260], "nuniformli": 125, "max_sampl": [125, 161, 403, 540, 541, 542, 543, 548, 549, 550, 619, 1018, 1021, 1024], "isolationforestisolationforest": 125, "ax_": [125, 251, 260, 264, 304, 309, 378, 423, 616, 682, 683, 685, 686, 687, 787], "nof": 125, "462": [125, 133, 181, 216], "plot_isolation_forest": [125, 133], "trend": [126, 154, 168, 229, 294, 406, 990, 1015], "xgboost": [126, 403, 986], "partialdependencedisplai": [126, 168, 236, 310, 311, 312, 314, 378, 618, 973, 1018, 1019, 1020, 1021, 1022, 1023], "f_0": 126, "f_1": [126, 264, 966], "gbdt_no_cst": [126, 310], "histgradientboostingregressorhistgradientboostingregressor": [126, 129, 305, 314], "gbdt_with_monotonic_cst": 126, "monotonic_cst": [126, 310, 312, 403, 546, 547, 1023], "line_kw": [126, 236, 259, 310, 617, 787], "unconstrain": [126, 168, 310, 366, 980], "axes_": [126, 236, 310, 378, 617], "f_idx": 126, "oscil": [126, 168, 202, 396, 425], "x_df": 126, "gbdt_with_monotonic_cst_df": 126, "606": [126, 133, 598, 813, 967], "plot_monotonic_constraint": [126, 133], "excel": [127, 365, 371, 675, 679, 962, 990], "bernoullinb": [127, 359, 819, 820, 821, 822, 967, 968, 1009, 1010, 1012, 1015, 1020, 1021, 1023], "hasher": [127, 344, 404], "transformed_grid": 127, "y_grid_pr": 127, "367": [127, 133, 403, 1008], "plot_random_forest_embed": [127, 133], "multioutput": [128, 266, 275, 360, 373, 384, 417, 450, 467, 468, 469, 536, 539, 541, 542, 543, 545, 547, 549, 550, 553, 555, 596, 617, 618, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 664, 706, 707, 712, 729, 730, 732, 734, 735, 737, 769, 772, 804, 812, 826, 834, 841, 850, 884, 886, 889, 891, 892, 893, 894, 909, 929, 930, 966, 988, 1003, 1008, 1009, 1010, 1014, 1015, 1021, 1022], "multioutputregressor": [128, 417, 450, 467, 468, 469, 539, 541, 543, 545, 547, 550, 553, 555, 596, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 664, 815, 817, 826, 834, 841, 884, 886, 889, 892, 894, 1014, 1015, 1017, 1019, 1020, 1024], "nativ": [128, 161, 358, 366, 384, 403, 546, 547, 815, 816, 934, 962, 966, 986, 1018, 1020], "ever": [128, 380, 403, 990], "centr": 128, "regr_multirf": 128, "regr_rf": 128, "y_multirf": 128, "y_rf": 128, "cornflowerblu": [128, 191, 200, 207, 243, 245, 248, 264, 266, 280, 282, 288, 349, 350], "570": [128, 133, 368, 999], "plot_random_forest_regression_multioutput": [128, 133], "compil": [129, 277, 344, 357, 358, 371, 372, 373, 374, 379, 380, 382, 986, 1008], "dean": [129, 1016, 1022], "cock": [129, 1017], "becam": [129, 385, 1016], "kaggl": [129, 383], "residenti": 129, "iowa": 129, "won": [129, 295, 343, 375, 396, 453, 481, 612, 613, 615, 672, 689, 702, 720, 721, 739, 741, 777, 965, 976, 1013, 1014, 1019], "load_ames_h": 129, "yrsold": 129, "heatingqc": 129, "street": [129, 368], "yearremodadd": 129, "heat": [129, 329, 396, 437, 447, 680], "bsmtunfsf": 129, "mssubclass": 129, "condition2": 129, "garagetyp": 129, "overallqu": 129, "totalbsmtsf": 129, "miscfeatur": 129, "mosold": 129, "_openml": 129, "v1": [129, 314, 365, 387, 408, 518, 740, 779, 780, 818, 819, 820, 822, 1020, 1023, 1024], "json": [129, 365, 371, 387], "data_nam": [129, 387], "statu": [129, 158, 365, 375, 387, 481, 823, 824], "retri": [129, 169, 481, 1016, 1022], "cat_selector": 129, "num_selector": 129, "besid": [129, 229, 371, 376, 574, 955, 1016], "cat_tree_processor": 129, "encoded_missing_valu": [129, 169, 857, 976, 1022, 1023], "num_tree_processor": 129, "add_ind": [129, 162, 612, 613, 615, 956, 1017, 1020], "tree_preprocessor": [129, 197], "0x7fd11380e940": 129, "0x7fd11380e760": 129, "ordinalencoderordinalencod": [129, 168, 169, 305], "cat_linear_processor": 129, "num_linear_processor": 129, "linear_preprocessor": 129, "tediou": 129, "wrote": [129, 366], "lasso_pipelin": 129, "lassocvlassocv": 129, "rf_pipelin": 129, "randomforestregressorrandomforestregressor": 129, "gbdt_pipelin": 129, "stackingregressor": [129, 309, 403, 552, 1018, 1019, 1020, 1021, 1022], "stacking_regressor": 129, "final_estim": [129, 309, 403, 552, 553], "unknown_v": 129, "stackingregressorstackingregressor": 129, "forestcolumntransform": 129, "lassocolumntransform": 129, "boostingcolumntransform": 129, "final_estimatorridgecvridgecv": 129, "cross_val_predict": [129, 253, 309, 394, 400, 403, 422, 552, 553, 805, 806, 1012, 1013, 1014, 1015, 1017, 1019, 1021], "scorer": [129, 215, 261, 373, 384, 400, 403, 546, 547, 579, 587, 619, 644, 658, 660, 696, 716, 717, 726, 781, 784, 785, 787, 795, 805, 806, 807, 810, 955, 962, 966, 974, 987, 1012, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023], "test_": [129, 400], "line_kwarg": [129, 686], "nevalu": 129, "675": [129, 133, 149], "plot_stack_predictor": [129, 133], "exemplari": 130, "eclf": [130, 131, 403], "axarr": [130, 299], "tt": [130, 252, 450], "plot_voting_decision_region": [130, 133], "examplari": 131, "class1_1": 131, "class2_1": 131, "lightgreen": [131, 203, 214], "p3": 131, "p4": 131, "nweight": 131, "plot_voting_proba": [131, 133], "votingregressor": [132, 403, 554, 1017, 1018, 1019, 1022], "cohort": 132, "reg1": [132, 403], "reg2": [132, 403], "reg3": [132, 403], "ereg": [132, 403], "votingregressorvotingregressor": 132, "gbgradientboostingregressorgradientboostingregressor": 132, "rfrandomforestregressorrandomforestregressor": 132, "lrlinearregressionlinearregress": 132, "xt": [132, 277, 384, 612, 614, 781, 784, 785, 795, 827, 835, 843, 848, 853, 860, 872, 901], "pred1": 132, "pred2": 132, "pred3": 132, "pred4": 132, "labelbottom": [132, 257], "943": [132, 133, 996], "plot_voting_regressor": [132, 133], "472": [133, 248, 249], "auto_examples_ensembl": 133, "n_fold": [135, 632, 636, 638, 640, 644, 646, 648, 1009, 1010, 1014], "scores_std": [135, 136, 996], "semilogx": [135, 136, 186, 270, 272], "std_error": 135, "transluc": 135, "999999999999999e": 135, "31622776601683794": 135, "answer": [135, 166, 257, 371, 382, 710, 740, 966, 990], "extern": [135, 149, 359, 360, 364, 368, 371, 373, 376, 382, 384, 393, 396, 404, 405, 406, 578, 595, 596, 702, 721, 777, 962, 965, 966, 969, 982, 987, 993, 999, 1003, 1016, 1020], "lasso_cv": 135, "k_fold": [135, 996], "maximis": [135, 243, 285, 960, 969], "5f": [135, 313], "moreov": [135, 155, 301, 313, 353, 375, 396, 400, 406, 876, 936, 966, 990, 1016, 1022, 1023], "substanti": [135, 279, 283, 284, 300, 371, 829, 972, 1012, 1015], "05968": 135, "54209": 135, "04520": 135, "15521": 135, "07880": 135, "45192": 135, "569": [135, 139, 320, 368, 485, 577, 580, 581, 583], "plot_cv_diabet": [135, 139], "this_scor": [136, 332], "244": [136, 139, 569], "plot_cv_digit": [136, 139], "961111": 137, "933333": [137, 832], "160": [137, 139, 233, 955, 999], "plot_digits_classification_exercis": [137, 139], "200j": [138, 333], "687": [138, 139, 978], "plot_iris_exercis": [138, 139], "661": 139, "auto_examples_exercis": 139, "exercis": [139, 359, 360, 368, 371, 486, 487, 489, 490, 637, 638, 643, 781, 786, 805, 825, 888, 993, 1011], "elimin": [140, 147, 164, 395, 396, 400, 433, 487, 500, 578, 579, 582, 587, 643, 784, 785, 800, 888, 952, 966, 988, 990, 1003, 1008], "x_2": [141, 152, 194, 401, 403, 404, 406, 598, 610, 962, 970, 976], "x_3": [141, 976], "irrelev": [141, 181, 353, 377, 398, 403, 405, 589, 724, 966], "agre": [141, 379, 385, 395, 396, 770, 992], "percept": [141, 168, 973], "correctli": [141, 145, 197, 215, 264, 266, 271, 287, 306, 319, 329, 371, 380, 401, 403, 413, 422, 454, 478, 534, 535, 536, 538, 540, 542, 544, 546, 549, 552, 554, 595, 643, 651, 653, 659, 660, 661, 688, 776, 778, 811, 812, 813, 814, 818, 819, 820, 821, 822, 825, 830, 833, 840, 863, 878, 879, 883, 885, 886, 887, 888, 889, 891, 893, 921, 963, 966, 969, 970, 976, 981, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "mutual_info_regress": [141, 313, 405, 577, 580, 581, 584, 585, 594, 1014, 1015, 1020, 1022, 1023, 1024], "f_test": 141, "x_": [141, 150, 248, 257, 309, 373, 396, 399, 401, 612, 620, 878, 879, 962, 968, 973, 1014], "257": [141, 147, 220, 255], "plot_f_test_vs_mi": [141, 147], "examin": [142, 377, 379, 396, 832], "f_classif": [142, 143, 332, 405, 577, 580, 581, 583, 584, 585, 589, 591, 594], "log10": [142, 155, 167, 182, 190, 258, 329], "pvalues_": [142, 577, 580, 581, 583, 584, 585, 1008], "x_indic": 142, "p_": [142, 966, 969, 982], "svm_weight": 142, "789": [142, 403], "clf_select": 142, "svm_weights_select": 142, "get_support": [142, 146, 311, 566, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 1010], "210": [142, 147], "plot_feature_select": [142, 147], "mistak": [143, 318, 353, 396, 400, 719, 854, 868, 869, 871, 872, 873, 874, 962, 967], "anova_filt": 143, "anova_svm": 143, "selectkbestselectkbest": [143, 313], "linearsvclinearsvc": [143, 264], "75788833": 143, "27161955": 143, "26113448": 143, "016": [143, 147], "plot_feature_selection_pipelin": [143, 147], "rfe": [144, 145, 405, 579, 582, 587, 1008, 1012, 1018, 1019, 1020, 1021, 1022, 1024], "n_features_to_select": [144, 146, 311, 405, 578, 587, 1020, 1022], "ranking_": [144, 578, 579], "plot_rfe_digit": [144, 147], "introduct": [145, 215, 255, 360, 371, 400, 401, 404, 575, 772, 773, 818, 822, 962, 964, 966, 968, 985, 993, 999, 1002, 1003], "class_sep": [145, 287, 500], "rfecv": [145, 405, 578, 582, 587, 1012, 1014, 1016, 1018, 1019, 1020, 1021, 1024], "stratifiedkfold": [145, 244, 252, 263, 267, 320, 400, 422, 552, 553, 579, 587, 644, 658, 781, 782, 784, 785, 786, 787, 789, 791, 795, 799, 801, 803, 804, 805, 806, 807, 808, 810, 864, 996, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1021], "min_features_to_select": [145, 579, 1016], "n_features_": [145, 526, 578, 579, 1021, 1023], "n_score": 145, "plateau": [145, 255, 259], "640": [145, 147, 394, 475, 491, 492, 568, 569, 955], "plot_rfe_with_cross_valid": [145, 147], "selectfrommodel": [146, 384, 578, 587, 588, 988, 1003, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1024], "sequentialfeatureselect": 146, "greedi": [146, 403, 405, 432, 434, 445, 544, 545, 587, 962, 982], "442": [146, 162, 343, 368, 486, 999], "descript": [146, 167, 305, 364, 365, 370, 371, 375, 376, 379, 384, 396, 404, 437, 447, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 492, 495, 529, 615, 661, 746, 749, 762, 966, 980, 981, 987, 989, 1001, 1018, 1019, 1020, 1021, 1022, 1023], "descr": [146, 364, 365, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 492, 495, 998, 1016], "_diabetes_dataset": 146, "mass": [146, 236, 368, 431, 779, 962, 973], "blood": [146, 227, 368, 999], "pressur": [146, 368, 999], "six": [146, 198, 219, 303, 368, 1017], "serum": [146, 368], "bmi": [146, 185, 186, 236, 368, 974], "tc": [146, 368, 385], "cholesterol": [146, 368], "ldl": [146, 368], "lipoprotein": [146, 368], "hdl": [146, 368], "s4": [146, 185, 186, 368], "tch": [146, 368], "s5": [146, 185, 186, 368, 974], "ltg": [146, 368, 486], "triglycerid": [146, 368], "s6": [146, 185, 186, 368], "glu": [146, 368], "sugar": [146, 368], "www4": [146, 368], "ncsu": [146, 368], "boo": [146, 368], "bradlei": [146, 368, 962], "efron": [146, 368, 667, 668, 962], "trevor": [146, 185, 314, 368, 613, 641, 706, 707, 708, 956, 962, 978, 1012, 1013, 1016, 1017, 1018, 1020], "iain": [146, 368, 962], "johnston": [146, 368, 962, 1017], "annal": [146, 181, 185, 368, 403, 459, 501, 502, 503, 544, 545, 641, 962], "407": [146, 368], "499": [146, 368, 377], "web": [146, 365, 366, 368, 371, 374, 379, 396, 403, 404, 506, 876, 966, 976, 1004, 1008], "stanford": [146, 368, 634, 667, 668, 818, 821, 822, 876, 964], "leastangle_2002": [146, 368], "pitfal": [146, 164, 165, 169, 171, 311, 360, 383, 384, 386, 400, 450, 452, 481, 638, 657, 658, 686, 737, 796, 806, 809, 844, 856, 863, 962, 1003], "accept": [146, 149, 254, 309, 329, 342, 344, 353, 357, 358, 365, 371, 373, 380, 382, 383, 384, 385, 390, 392, 396, 401, 404, 422, 426, 429, 430, 433, 446, 449, 452, 493, 494, 540, 541, 546, 547, 554, 555, 566, 567, 578, 579, 582, 613, 620, 624, 628, 664, 711, 726, 762, 779, 780, 784, 785, 825, 826, 833, 834, 847, 901, 903, 904, 907, 962, 964, 966, 969, 974, 976, 981, 986, 987, 996, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "tic": [146, 168, 268, 968], "sfm": 146, "toc": 146, "sequentialfeatureselector": [146, 405, 578, 582, 588, 1020, 1021, 1022, 1023, 1024], "sf": [146, 235, 257, 311, 366, 405, 477, 587], "backward": [146, 311, 374, 384, 405, 481, 562, 587, 599, 600, 603, 604, 605, 607, 608, 896, 899, 966, 970, 987, 1008, 1011, 1016, 1017, 1018, 1020, 1022, 1024], "tic_fwd": 146, "sfs_forward": 146, "toc_fwd": 146, "tic_bwd": 146, "sfs_backward": 146, "toc_bwd": 146, "187": [146, 202, 216, 257, 377, 569, 967, 999, 1010], "isn": [146, 309, 342, 344, 353, 358, 371, 379, 500, 546, 547, 579, 776, 784, 785, 856, 969, 981, 1018], "sound": [146, 353], "finish": [146, 245, 963], "expos": [146, 312, 314, 358, 364, 368, 384, 394, 403, 405, 406, 422, 449, 538, 539, 552, 553, 554, 555, 578, 579, 587, 596, 781, 784, 785, 795, 812, 813, 814, 815, 816, 817, 898, 934, 962, 966, 968, 996, 998, 1000, 1005, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "812": [146, 147], "plot_select_from_model_diabet": [146, 147], "auto_examples_feature_select": 147, "basic": [148, 159, 162, 164, 195, 306, 334, 357, 359, 360, 371, 373, 375, 382, 384, 396, 400, 401, 403, 596, 607, 879, 891, 892, 893, 894, 955, 956, 969, 980, 985, 986, 987, 990, 999], "introductori": [148, 159, 164, 225, 596, 607, 990], "gpr": [148, 158, 159, 164, 481, 595, 596, 598, 599, 600, 601, 606, 607, 608, 609, 610, 988, 1003, 1018], "mauna": [148, 159, 164, 481, 596, 600, 607, 608, 610], "loa": [148, 159, 164, 481, 596, 600, 607, 608, 610], "co2": [148, 159, 164, 481, 596, 600, 607, 608, 610, 1015], "xor": [148, 159, 164, 335, 595, 599, 607, 962, 982, 1015], "posterior": [148, 149, 150, 159, 164, 176, 257, 401, 406, 534, 535, 537, 595, 596, 598, 599, 600, 604, 607, 608, 612, 629, 630, 693, 779, 960, 986, 1014, 1017], "iso": [148, 159, 164, 220, 595, 598, 599], "trick": [149, 232, 287, 344, 356, 359, 360, 374, 382, 397, 406, 567, 574, 628, 657, 958, 959, 970, 980, 981, 999, 1000, 1003, 1009, 1017], "drastic": [149, 230, 265, 396, 400, 969, 979], "theorem": [149, 395, 406, 968], "period": [149, 154, 158, 375, 384, 385, 394, 406, 600, 802, 862, 1016, 1021, 1023], "reus": [149, 190, 258, 309, 344, 373, 384, 396, 397, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 619, 631, 633, 634, 637, 643, 645, 647, 651, 652, 653, 654, 661, 662, 663, 665, 840, 841, 974, 978, 990, 1015], "training_sample_indic": 149, "training_data": 149, "training_noisy_target": 149, "newer": [149, 370, 387, 401], "expsinesquar": [149, 154, 158, 406], "emb": [149, 219, 230, 286, 364, 365, 447, 680, 963], "kernel_ridg": [149, 232, 360, 1012], "length_scal": [149, 150, 153, 154, 155, 156, 158, 406, 597, 600, 604, 606, 607, 608, 609], "tell": [149, 167, 168, 257, 329, 334, 358, 366, 396, 404, 548, 564, 955, 960, 973, 1001], "1e0": [149, 232, 248, 265, 955], "kernel__length_scal": 149, "kernel__period": 149, "1e1": [149, 155, 197, 232, 329], "kernel_ridge_tun": 149, "409": 149, "9915849773450223": 149, "7986499491396728": 149, "607275806426108": 149, "predictions_kr": 149, "gaussianprocessregressor": [149, 154, 155, 156, 157, 158, 406, 595, 598, 599, 600, 601, 602, 606, 609, 610, 628, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "whitekernel": [149, 154, 155, 406, 596, 597, 599, 1019], "periodicity_bound": [149, 154, 158, 600], "kernel_": [149, 150, 151, 152, 153, 154, 155, 156, 158, 595, 596], "57": [149, 167, 213, 266, 296, 368, 369, 387, 388, 389, 397, 690, 765, 816, 966, 976, 1008], "noise_level": [149, 154, 155, 406, 597, 610], "182": [149, 232, 296, 377, 403], "mean_predictions_gpr": 149, "std_predictions_gpr": 149, "return_std": [149, 154, 155, 156, 158, 176, 177, 384, 537, 552, 553, 596, 598, 599, 600, 601, 610, 612, 629, 630, 843, 1015, 1016, 1020], "formul": [149, 158, 266, 371, 398, 401, 404, 406, 409, 460, 534, 535, 542, 549, 635, 636, 639, 640, 641, 643, 644, 650, 655, 747, 753, 780, 885, 888, 891, 893, 966, 967, 976, 988, 1003], "forc": [149, 182, 277, 303, 342, 365, 369, 375, 391, 400, 403, 435, 442, 481, 591, 594, 631, 632, 637, 638, 642, 645, 646, 647, 648, 657, 658, 659, 666, 669, 672, 738, 762, 765, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 885, 886, 887, 888, 889, 901, 903, 904, 976, 1003, 1013, 1016, 1017, 1018, 1020, 1021, 1022], "capac": [149, 169], "length_scale_bound": [149, 155, 156, 158, 406, 596, 600, 604, 607, 608], "attenu": 149, "plot_compare_gpr_krr": [149, 159], "arbitrarili": [150, 243, 248, 342, 384, 406, 417, 450, 467, 468, 469, 537, 539, 541, 543, 545, 547, 550, 553, 555, 596, 620, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 654, 655, 657, 658, 663, 664, 665, 706, 707, 708, 730, 769, 773, 816, 817, 826, 834, 841, 864, 884, 886, 889, 892, 894, 966, 969, 976, 982], "lml": [150, 151, 155, 406], "exhibit": [150, 202, 342, 386, 400, 401, 403, 406, 974], "steep": [150, 168, 266, 267, 396, 400, 406, 435, 441], "laplac": [150, 406, 595, 596, 818, 819, 820, 822, 968], "214": [150, 406, 569], "319": [150, 1001], "gp_fix": 150, "gp_opt": 150, "log_marginal_likelihood": [150, 151, 153, 155, 158, 406, 595, 596, 1018], "theta": [150, 151, 153, 155, 157, 158, 233, 401, 406, 508, 521, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 677, 968, 982], "landscap": [150, 406], "theta0": 150, "theta1": 150, "pcolor": 150, "xscale": [150, 155, 232], "yscale": [150, 155, 197, 232, 342], "024": [150, 159], "plot_gpc": [150, 159], "gpc_rbf_isotrop": 151, "gpc_rbf_anisotrop": 151, "m_max": 151, "plot_gpc_iri": [151, 159], "0256": 152, "dotproduct": [152, 153, 158, 406, 596, 610], "sigma_0": [152, 153, 158, 406, 599], "constantkernel": [152, 158, 406, 596, 602, 606, 609], "lim": [152, 519], "experi": [152, 156, 166, 167, 168, 169, 173, 199, 304, 337, 343, 344, 358, 365, 371, 374, 395, 400, 500, 712, 769, 962, 967, 978, 984, 985, 986, 990, 999, 1001], "61611719": 152, "00099547": 152, "10469096": 152, "32782448": 152, "00000000": 152, "50000000": 152, "17289014": 152, "6984743": 152, "3109306": 152, "93271427": 152, "03823144": 152, "10584743": 152, "87600388": 152, "74310541": 152, "21301203": 152, "26386883": 152, "gp": [152, 157, 406, 595, 596, 607, 1014], "cb": [152, 230, 246], "widehat": 152, "mathbf": [152, 401, 962, 966, 970, 971, 980], "leq": [152, 401, 403, 962, 966, 969, 980, 981, 982], "clim": 152, "666": [152, 825, 956], "clabel": [152, 208], "334": [152, 239], "145": [152, 159, 396], "plot_gpc_isoprob": [152, 159], "stationari": [153, 406, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610], "coincid": [153, 199, 406], "430": [153, 155, 158, 408, 518], "convergencewarn": [153, 155, 157, 158, 205, 212, 243, 294, 295, 301, 380, 384, 779, 780, 1016, 1017, 1020], "k1__constant_valu": [153, 158], "bound": [153, 155, 157, 158, 164, 199, 215, 225, 240, 256, 369, 378, 396, 401, 404, 406, 407, 429, 474, 487, 497, 508, 521, 580, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 620, 622, 635, 639, 643, 662, 690, 719, 779, 780, 823, 824, 860, 872, 875, 876, 877, 885, 886, 887, 890, 907, 934, 962, 965, 966, 969, 978, 980, 981, 983, 1016, 1019, 1020, 1022], "100000": [153, 232, 242, 371, 598, 599, 600, 604, 605, 607, 608, 610, 872, 959, 999, 1001], "puor_r": [153, 335], "466": [153, 159, 973], "plot_gpc_xor": [153, 159], "rw2006": [154, 406, 595, 596], "ascent": [154, 406], "monthli": [154, 385, 406, 966], "atmospher": [154, 406], "ppm": 154, "observatori": [154, 406], "hawaii": [154, 406], "1958": [154, 401, 403, 406, 517], "air": [154, 748], "41187": 154, "flag": [154, 369, 371, 372, 374, 449, 595, 596, 612, 658, 660, 712, 769, 981, 1014, 1018, 1019, 1021, 1022, 1023], "station": [154, 343], "mlo": 154, "316": [154, 158, 211, 216, 306, 307, 596, 599, 610, 859], "317": 154, "co2_data": 154, "to_datetim": 154, "timestamp": 154, "march": [154, 710, 740, 966, 1008, 1012, 1016, 1018, 1023], "dropna": 154, "nfrom": 154, "upcom": [154, 369], "to_numpi": 154, "rise": [154, 406], "irregular": [154, 396, 406, 969], "long_term_trend_kernel": 154, "decai": [154, 406, 529, 840, 841, 920, 966, 980, 1012], "seasonal_kernel": 154, "ration": [154, 608, 964], "diffus": [154, 406], "accommod": [154, 406, 1016], "rationalquadrat": [154, 158, 406, 601], "irregularities_kernel": 154, "shall": [154, 406], "phenomena": [154, 406], "noise_kernel": 154, "noise_level_bound": [154, 155, 610], "co2_kernel": 154, "subtract": [154, 167, 399, 401, 406, 428, 432, 444, 519, 629, 630, 635, 636, 639, 640, 641, 649, 650, 1015], "normalize_i": [154, 406, 596, 1022], "y_mean": [154, 155, 158, 596, 629, 630], "gaussianprocessregressorgaussianprocessregressor": 154, "futur": [154, 198, 238, 312, 371, 373, 375, 382, 384, 385, 390, 400, 404, 481, 519, 615, 620, 934, 936, 966, 967, 981, 982, 990, 1005, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "todai": [154, 382, 1001], "current_month": 154, "mean_y_pr": 154, "std_y_pr": 154, "968": [154, 166, 255], "0367": 154, "6ppm": 154, "470": [154, 159, 335, 340], "plot_gpr_co2": [154, 159], "target_gener": 155, "add_nois": 155, "minima": [155, 185, 401, 432, 677, 963, 1000, 1016], "y_std": [155, 158, 537, 596, 629, 630, 1021], "k1__k2__length_scal": [155, 406], "noptimum": 155, "nlog": 155, "length_scale_grid": 155, "noise_level_grid": 155, "newshap": 155, "894": [155, 159], "plot_gpr_noisi": [155, 159], "principl": [156, 282, 304, 344, 371, 382, 384, 385, 400, 403, 406, 920, 955, 965, 969, 980, 1015], "tikhonov": [156, 406, 657], "training_indic": 156, "n_restarts_optim": [156, 406, 595, 596], "mean_predict": 156, "std_predict": 156, "whenev": [156, 166, 353, 365, 379, 384, 387, 394, 467, 468, 469, 481, 613, 615, 957, 965, 987, 1018], "noise_std": 156, "y_train_noisi": 156, "506": [156, 159], "plot_gpr_noisy_target": [156, 159], "gene": [157, 365, 393, 436, 498, 578, 579, 830, 863], "letter": [157, 366, 368, 375, 404, 772, 773, 966], "among": [157, 168, 173, 197, 247, 275, 351, 359, 366, 373, 384, 385, 394, 395, 399, 432, 434, 497, 504, 776, 808, 826, 831, 833, 885, 888, 891, 892, 893, 894, 955, 958, 966, 967, 973, 976, 981, 1008, 1014, 1015, 1018], "brighter": 157, "4th": [157, 368], "6th": 157, "haussler": 157, "1999": [157, 366, 394, 396, 398, 401, 403, 422, 435, 442, 454, 459, 519, 526, 540, 541, 544, 545, 707, 877, 885, 886, 888, 889, 972, 978], "646": 157, "technic": [157, 198, 219, 313, 366, 368, 371, 384, 403, 637, 649, 670, 671, 878, 962, 963, 969], "depart": [157, 396], "california": [157, 161, 162, 299, 305, 311, 364, 368, 475, 1003], "santa": [157, 1023], "cruz": 157, "generickernelmixin": [157, 1018], "sequencekernel": 157, "baseline_similar": 157, "baseline_similarity_bound": 157, "hyperparameter_baseline_similar": 157, "_f": [157, 962], "_g": 157, "__call__": [157, 329, 384, 404, 406, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 1015], "eval_gradi": [157, 406, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610], "is_stationari": [157, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610], "clone_with_theta": [157, 406, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610], "agct": 157, "agc": 157, "aact": 157, "taa": 157, "aaa": 157, "gaaca": 157, "training_idx": 157, "cga": 157, "taac": 157, "tcg": 157, "cttt": 157, "tgct": 157, "atag": 157, "ctc": 157, "420": [157, 321], "238": [157, 159], "plot_gpr_on_structured_data": [157, 159], "plot_gpr_sampl": 158, "gpr_model": 158, "y_sampl": [158, 596], "sample_i": [158, 406, 596, 1022], "single_prior": 158, "pm": [158, 168, 267, 403, 966], "dev": [158, 167, 215, 262, 267, 369, 371, 375, 377, 379, 966, 990, 1004, 1015, 1020, 1023], "594": [158, 197], "279": [158, 962], "067": [158, 192, 216], "alpha_bound": [158, 608], "1e15": 158, "_gpr": 158, "523": [158, 509], "runtimewarn": 158, "semidefinit": [158, 976, 981], "21e": 158, "799": [158, 178, 216, 343], "791": 158, "sigma_0_bound": [158, 599], "660": 158, "lbfg": [158, 293, 373, 633, 634, 643, 644, 654, 657, 659, 665, 672, 814, 817, 840, 841, 962, 970, 1012, 1013, 1015, 1016, 1021, 1022, 1023], "abnormal_termination_in_lnsrch": 158, "6576930005": 158, "matern": [158, 406, 1019, 1023], "609": [158, 343, 377], "411": [158, 159, 167, 398, 408, 458, 518], "plot_gpr_prior_posterior": [158, 159], "auto_examples_gaussian_process": 159, "iterativeimput": [160, 162, 163, 164, 475, 550, 565, 613, 614, 615, 624, 630, 657, 805, 826, 844, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "robin": [161, 162, 612, 956, 1014, 1017, 1022, 1023], "kneighborsregressor": [161, 234, 289, 313, 403, 555, 825, 831, 833, 834, 969, 1008, 1010, 1012, 1018, 1020, 1021, 1022, 1023, 1024], "mimic": [161, 197, 342, 799], "missforest": [161, 956], "popular": [161, 222, 366, 369, 376, 379, 382, 384, 395, 402, 403, 404, 406, 437, 447, 956, 958, 962, 964, 971, 980, 987, 996, 1001], "enable_iterative_imput": [161, 162, 375, 612, 956, 1017], "fetch_california_h": [161, 162, 299, 311, 366, 383, 397, 1017, 1019], "x_full": [161, 162, 299], "y_full": [161, 162, 299], "2k": 161, "br_estim": 161, "score_full_data": 161, "neg_mean_squared_error": [161, 162, 199, 232, 271, 806, 966, 974, 1014], "x_miss": [161, 162], "y_miss": [161, 162], "missing_sampl": [161, 162], "missing_featur": [161, 162], "score_simple_imput": 161, "missing_valu": [161, 162, 237, 384, 612, 613, 614, 615, 753, 956, 1016, 1017], "score_iterative_imput": 161, "stricter": 161, "impute_estim": 161, "__class__": [161, 197, 199, 259, 301, 342, 343, 344, 378], "xerr": [161, 162, 343], "408": [161, 163], "plot_iterative_imputer_variants_comparison": [161, 163], "ness": [162, 215], "auxiliari": [162, 369, 990], "district": [162, 366], "neither": [162, 167, 309, 342, 353, 382, 422, 579, 613, 907, 969, 982], "20640": [162, 366, 475], "feel": [162, 299, 370, 371, 379, 396, 431, 982], "x_diabet": [162, 996], "y_diabet": [162, 996], "x_california": 162, "y_california": 162, "add_missing_valu": 162, "missing_r": 162, "n_missing_sampl": 162, "x_miss_california": 162, "y_miss_california": 162, "x_miss_diabet": 162, "y_miss_diabet": 162, "knnimput": [162, 309, 612, 615, 956, 1018, 1019, 1022, 1023, 1024], "get_scores_for_imput": 162, "impute_scor": 162, "x_label": 162, "mses_california": 162, "stds_california": 162, "mses_diabet": 162, "stds_diabet": 162, "get_full_scor": 162, "full_scor": 162, "get_impute_zero_scor": 162, "fill_valu": [162, 228, 237, 310, 612, 615, 976, 1016, 1024], "zero_impute_scor": 162, "unweight": [162, 210, 448, 632, 638, 663, 692, 698, 713, 714, 722, 767, 768, 771, 772, 818, 819, 820, 821, 822, 956], "get_impute_knn_scor": 162, "knn_impute_scor": 162, "get_impute_mean": 162, "mean_impute_scor": 162, "obvious": [162, 357, 1001], "get_impute_it": 162, "n_nearest_featur": [162, 612], "sample_posterior": [162, 612, 956], "iterative_impute_scor": 162, "n_bar": 162, "xval": 162, "domin": [162, 197, 202, 266, 304, 366, 377, 394, 863, 968, 976, 982], "plot_missing_valu": [162, 163], "043": [163, 377], "auto_examples_imput": 163, "prune": [164, 346, 352, 405, 485, 542, 543, 544, 545, 549, 550, 578, 629, 809, 891, 892, 893, 894, 969, 988, 1003, 1008, 1011, 1018, 1019], "elast": [164, 175, 181, 188, 208, 216, 270, 395, 456, 457, 463, 486, 509, 631, 632, 637, 642, 643, 644, 645, 646, 647, 648, 653, 661, 663, 666, 669, 955, 966, 980, 988, 1003, 1008, 1013, 1017, 1018], "gram": [164, 175, 216, 373, 401, 404, 474, 509, 533, 573, 574, 575, 576, 631, 632, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 649, 650, 666, 667, 668, 669, 670, 671, 751, 759, 761, 955, 976, 1001, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1021, 1022], "huberregressor": [164, 175, 203, 216, 509, 655, 656, 657, 663, 664, 962, 1014, 1015, 1016, 1017], "aic": [164, 175, 185, 216, 247, 486, 636, 638, 639, 640, 641, 780, 844, 863, 955, 962, 1008, 1015, 1021, 1022], "bic": [164, 175, 185, 216, 405, 486, 636, 638, 639, 640, 641, 780, 844, 863, 955, 962, 965, 1008, 1015, 1021, 1022], "mnist": [164, 175, 205, 216, 277, 292, 297, 481, 556, 643, 809, 840, 863, 906, 962, 970], "20newgroup": [164, 175, 216, 474, 556, 643, 809, 962], "ordinari": [164, 175, 176, 181, 199, 200, 202, 214, 216, 312, 620, 631, 637, 639, 640, 641, 642, 657, 663, 667, 668, 672, 980, 988, 1003], "spline": [164, 175, 216, 501, 502, 503, 657, 844, 858, 862, 986, 1021], "ransac": [164, 175, 203, 214, 216, 509, 634, 642, 656, 663, 664], "convex": [164, 175, 216, 218, 338, 343, 396, 398, 401, 409, 431, 437, 447, 458, 460, 461, 464, 465, 466, 643, 661, 677, 962, 963, 969, 970, 980, 1021], "theil": [164, 175, 203, 216, 634, 642, 656, 663, 664], "sen": [164, 175, 203, 216, 634, 642, 656, 663, 664], "tweedi": [164, 175, 216, 449, 481, 537, 633, 654, 665, 691, 708, 729, 731, 733, 734, 736, 809, 844, 847, 848, 856, 863, 962, 1018, 1019, 1021], "insur": [164, 175, 197, 216, 449, 481, 537, 633, 654, 665, 691, 729, 734, 736, 809, 844, 847, 848, 856, 863, 962], "claim": [164, 175, 216, 371, 449, 481, 537, 633, 654, 665, 691, 729, 734, 736, 809, 844, 847, 848, 856, 863, 962], "failur": [164, 165, 167, 171, 371, 379, 642, 769, 809, 903, 904, 989, 990, 1021, 1022], "infer": [164, 165, 167, 171, 243, 247, 248, 257, 348, 365, 373, 382, 395, 400, 401, 481, 493, 494, 500, 519, 521, 534, 535, 538, 544, 545, 617, 620, 642, 694, 707, 725, 769, 779, 780, 809, 819, 857, 864, 878, 879, 891, 892, 893, 894, 929, 956, 962, 966, 971, 976, 979, 982, 986, 987, 995, 1009, 1013, 1014, 1019, 1022], "causal": [164, 165, 171, 642, 769, 809], "multicollinear": [164, 165, 171, 399, 485, 549, 619, 640, 809, 962, 974], "isomap": [164, 217, 220, 224, 309, 313, 403, 487, 529, 534, 551, 674, 675, 676, 677, 832, 844, 853, 876, 969, 1002, 1003, 1016, 1018, 1021, 1022, 1023, 1024], "And": [164, 217, 224, 257, 342, 379, 390, 396, 400, 404, 515, 573, 574, 576, 677, 678, 962, 966, 984, 1015], "hole": [164, 217, 224, 515, 677, 678, 1022], "perplex": [164, 217, 218, 222, 224, 277, 499, 510, 521, 677, 963, 1013, 1015, 1022], "johnson": [164, 225, 240, 299, 303, 363, 395, 474, 487, 859, 871, 875, 876, 877, 976, 983, 1003, 1016, 1022], "lindenstrauss": [164, 225, 240, 363, 395, 474, 487, 875, 876, 877, 983, 1003], "halv": [164, 250, 273, 391, 500, 549, 564, 781, 784, 785, 888, 1003, 1020], "custom": [164, 236, 250, 258, 273, 279, 284, 309, 324, 329, 340, 342, 344, 363, 366, 369, 373, 378, 379, 380, 382, 383, 384, 395, 396, 397, 400, 406, 453, 474, 478, 479, 487, 489, 523, 525, 532, 534, 542, 543, 549, 550, 556, 558, 587, 616, 675, 698, 781, 809, 847, 881, 888, 950, 955, 960, 966, 969, 986, 987, 990, 1001, 1003, 1008, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1023, 1024], "det": [164, 250, 273, 398, 500, 549, 683, 687, 711, 773, 809, 844, 863, 883, 918, 1020], "tsne": [164, 218, 219, 220, 222, 223, 278, 291, 313, 384, 410, 418, 481, 673, 674, 675, 827, 831, 844, 940, 963, 969, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "novelti": [164, 226, 278, 284, 291, 328, 829, 988, 1002, 1003, 1008, 1016], "lof": [164, 226, 235, 278, 291, 548, 829, 887, 972], "boltzmann": [164, 292, 297, 487, 643, 698, 809, 839, 840, 841, 843, 869, 1002, 1003, 1010], "mlp": [164, 168, 236, 292, 294, 297, 481, 556, 809, 840, 841, 970], "semi_supervis": [164, 311, 313, 316, 317, 318, 319, 320, 321, 322, 360, 967, 979, 1009, 1014, 1015, 1022, 1023], "tie": [164, 324, 340, 382, 403, 497, 811, 888, 967, 981, 982, 1009, 1024], "unbalanc": [164, 260, 324, 340, 400, 497, 616, 888, 908, 909, 955, 980], "featurehash": [164, 341, 343, 345, 359, 366, 404, 449, 473, 566, 573, 574, 575, 576, 856, 1009, 1014, 1015, 1016, 1022, 1023], "auto_examples_python": 164, "auto_examples_jupyt": 164, "unless": [166, 243, 248, 371, 373, 374, 382, 384, 394, 396, 399, 407, 422, 429, 431, 433, 435, 437, 442, 443, 446, 449, 452, 457, 474, 481, 493, 494, 516, 520, 521, 522, 524, 527, 528, 530, 531, 532, 533, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 579, 587, 595, 596, 617, 619, 624, 631, 632, 636, 637, 638, 640, 642, 643, 644, 646, 648, 650, 651, 653, 661, 664, 673, 674, 675, 676, 677, 678, 679, 694, 699, 758, 762, 765, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 825, 826, 829, 831, 833, 834, 836, 837, 840, 841, 842, 845, 868, 869, 871, 872, 873, 874, 878, 879, 891, 892, 893, 894, 899, 903, 904, 920, 934, 962, 965, 967, 1008, 1010, 1014, 1016, 1019, 1020], "willing": [166, 254], "econom": [166, 167, 257], "educ": [166, 167, 371, 701, 967], "earn": [166, 167, 385], "polici": [166, 167, 197, 215, 384, 520, 526, 962, 1023], "maker": [166, 167], "ovb": [166, 167], "parent_hourly_wag": 166, "college_degre": 166, "true_coef": [166, 181, 192], "hourly_wag": 166, "stori": [166, 257, 366, 965], "pairplot": [166, 167], "diag_kind": [166, 167], "kde": [166, 167, 281, 282, 290, 402, 828], "features_nam": [166, 1015], "regressor_with_": 166, "y_pred_with_": 166, "r2_with_abl": 166, "975": [166, 981], "model_coef": 166, "intellectu": 166, "proxi": [166, 167, 401, 839, 996, 1013], "inadvert": [166, 384], "iq": 166, "regressor_without_": 166, "y_pred_without_": 166, "r2_without_": 166, "incorrect": [166, 264, 320, 353, 371, 396, 592, 593, 617, 618, 718, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "brought": [166, 538, 539, 542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894], "unobserv": [166, 167, 401], "confound": [166, 167], "conduct": [166, 257, 406, 986, 1022], "prohibit": [166, 400, 403, 612, 971, 979, 1015], "uneth": 166, "iv": [166, 966], "plot_causal_interpret": [166, 171], "hint": [167, 357, 372, 376, 390, 433, 966, 999], "aris": [167, 260, 337, 358, 376, 396, 700, 962, 963, 1020], "mathemat": [167, 185, 214, 260, 363, 368, 371, 384, 386, 395, 398, 401, 402, 534, 535, 542, 549, 620, 631, 641, 774, 775, 780, 841, 885, 888, 891, 893, 966, 976, 978, 988, 990, 999, 1003, 1022], "survei": [167, 399], "1985": [167, 396, 690, 700, 770], "race": [167, 366, 1011], "occup": [167, 299], "sector": 167, "marr": 167, "not_memb": 167, "marri": 167, "freq": [167, 181, 344], "378": [167, 403, 1001, 1008], "289": 167, "438": [167, 974], "156": [167, 252, 273, 368], "350": 167, "018727": 167, "822097": 167, "833333": 167, "615373": 167, "379710": 167, "726573": 167, "55": [167, 173, 192, 197, 206, 215, 220, 318, 376, 396, 400, 476, 582, 781, 787, 795, 807, 966, 1008], "thereaft": [167, 176], "hispan": 167, "manufactur": 167, "unmarri": 167, "dollar": [167, 366], "exploratori": [167, 990], "emul": [167, 379], "train_dataset": [167, 365], "rangeindex": 167, "533": 167, "normalis": [167, 596, 1001], "numerical_column": [167, 169, 452], "if_binari": [167, 239, 856, 976, 1019], "prepend": [167, 1008], "exp10": 167, "ufunc": 167, "passthroughpassthroughtransformedtargetregressor": 167, "transformedtargetregressortransformedtargetregressor": 167, "ridgeridg": 167, "mae_train": 167, "mae_test": 167, "learnt": [167, 353, 384, 400, 955], "obviou": [167, 353, 357, 393, 401], "regressor_": [167, 450, 578, 579, 582], "race_hispan": 167, "013519": 167, "race_oth": 167, "009075": 167, "race_whit": 167, "022594": 167, "occupation_cler": 167, "000045": 167, "occupation_manag": 167, "090528": 167, "occupation_oth": 167, "025102": 167, "occupation_profession": 167, "071964": 167, "occupation_sal": 167, "046636": 167, "occupation_servic": 167, "091053": 167, "sector_construct": 167, "000198": 167, "sector_manufactur": 167, "031255": 167, "sector_oth": 167, "031025": 167, "marr_unmarri": 167, "032405": 167, "union_not_memb": 167, "117154": 167, "sex_mal": 167, "090808": 167, "south_y": 167, "033823": 167, "054699": 167, "035005": 167, "030867": 167, "adimension": 167, "Their": [167, 366, 368, 385, 396, 629, 1008], "visibl": [167, 168, 199, 339, 365, 371, 396, 839, 971, 1013, 1023], "gaug": 167, "decad": [167, 987], "x_train_preprocess": 167, "multipli": [167, 215, 257, 357, 380, 384, 401, 403, 404, 409, 449, 460, 500, 523, 525, 526, 532, 542, 546, 549, 631, 633, 637, 639, 643, 644, 645, 647, 653, 654, 655, 657, 661, 662, 663, 665, 671, 672, 674, 678, 748, 885, 886, 887, 888, 889, 891, 893, 909, 942, 943, 944, 955, 962, 966, 980, 1019], "coef_i": 167, "std_i": 167, "emphas": [167, 339, 377, 401, 966], "perturb": [167, 214, 296, 401, 403, 965], "caution": [167, 375, 425, 439, 1016], "repeatedkfold": [167, 400, 786, 797, 1015], "cv_model": 167, "return_estim": [167, 400, 806, 1016], "train_idx": [167, 384], "stripplot": 167, "whi": [167, 169], "collinear": [167, 170, 202, 215, 403, 552, 633, 654, 665, 856, 962, 1008], "teas": 167, "apart": [167, 312, 329, 382, 384, 397, 399, 405, 709, 981, 990, 1016], "vice": [167, 254, 342, 396, 406, 427, 592, 593, 812, 1012], "versa": [167, 254, 342, 396, 406, 427, 592, 593, 812, 1012], "column_to_drop": 167, "said": [167, 226, 258, 366, 371, 774, 964, 972, 992, 999], "unchang": [167, 215, 264, 403, 418, 427, 428, 430, 431, 432, 434, 449, 453, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 551, 552, 553, 554, 555, 566, 567, 568, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 673, 674, 677, 747, 818, 819, 820, 822, 827, 832, 835, 839, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 872, 875, 876, 881, 969, 992, 1016, 1022], "neglig": [167, 969, 1011], "littl": [167, 168, 169, 170, 226, 366, 404, 447, 629, 781, 795, 920, 956, 963, 965, 981, 982, 999, 1009, 1020], "ridgecvridgecv": 167, "alon": [167, 263, 329, 384, 390, 394, 633, 654, 665, 726, 1015, 1017], "suppress": [167, 309, 357, 379, 677, 969, 1015], "themselv": [167, 299, 367, 379, 384, 393, 396, 403, 404, 406, 431, 600, 774, 982, 1001, 1018], "bring": [167, 299, 401, 661, 663, 963, 990], "entic": 167, "pursu": 167, "tempt": 167, "conclud": [167, 177, 215, 257, 344, 353, 385], "deflat": [167, 399, 408, 518], "presum": [167, 275, 396, 404, 818], "respond": [167, 371, 396], "plot_linear_model_coefficient_interpret": [167, 171], "complement": [168, 267, 342, 617, 618, 783, 798, 801, 809, 818, 819, 820, 821, 822, 973, 988, 1003, 1016], "molnar": [168, 973], "christoph": [168, 401, 406, 517, 595, 596, 599, 604, 607, 779, 962, 967, 1009, 1013, 1016, 1019, 1020, 1021, 1022, 1023], "goldstein": [168, 973], "kapeln": [168, 973], "bleich": [168, 973], "pitkin": [168, 973], "peek": [168, 371, 973], "settingwithcopywarn": 168, "2284": 168, "904": [168, 255, 397], "287": [168, 978], "1747": 168, "1729": 168, "mask_train": [168, 215], "accordingli": [168, 371, 375, 376, 1015, 1016, 1023], "8640": 168, "115": [168, 974], "nomin": [168, 365, 384, 385, 403, 404, 566, 567, 701, 976, 987], "numerical_featur": [168, 305], "xtick_start": 168, "xtick_period": 168, "average_bike_rent": 168, "numeric_onli": 168, "decor": [168, 309, 371, 372, 373, 380, 787, 910, 914, 915, 927, 933, 1018, 1021, 1024], "strike": 168, "mlp_preprocessor": 168, "quantiletransformerquantiletransform": 168, "catindex": 168, "hgbdt_preprocessor": 168, "sparse_threshold": [168, 449, 452, 1016], "passthroughpassthrough": 168, "mlp_model": 168, "hidden_layer_s": [168, 236, 293, 295, 840, 841, 970], "learning_rate_init": [168, 294, 295, 840, 841], "early_stop": [168, 205, 293, 312, 342, 384, 403, 546, 547, 651, 652, 653, 661, 662, 663, 840, 841, 980, 1016, 1019, 1022, 1023], "699": 168, "forget": [168, 353, 358, 365, 375, 382, 401, 963, 989], "poor": [168, 173, 263, 272, 320, 394, 400, 401, 675, 679, 722, 820, 823, 824, 960, 961, 963, 968, 987, 992, 1015, 1016, 1017, 1019, 1021], "grid_resolut": [168, 311, 327, 616, 617, 618], "features_info": 168, "911": 168, "hgbdt_model": 168, "cheaper": [168, 396, 406, 658, 958, 962], "temperatur": [168, 404, 973], "wind": [168, 967], "earlier": [168, 365, 371, 399, 814, 817, 976, 984, 1006, 1009, 1021, 1023], "meaningless": [168, 404, 885, 888, 1011], "celsiu": [168, 973], "interaction_cst": [168, 314, 403, 546, 547, 1023], "hgbdt_model_without_interact": 168, "histgradientboostingregressor__interaction_cst": 168, "38": [168, 188, 196, 235, 240, 251, 266, 282, 403, 617, 714, 864, 966, 976, 1008, 1009, 1010], "heatmap": [168, 170, 176, 181, 268, 314, 329, 617, 973], "415": 168, "slope": [168, 195, 199, 214, 396, 707, 732, 964, 966], "dry": 168, "wetter": 168, "052": 168, "spike": 168, "degrad": [168, 226, 299, 343, 402], "somehow": 168, "forbidden": [168, 403], "noisili": 168, "341": 168, "partial_depend": [168, 617, 973, 1009, 1017, 1018, 1019, 1020, 1023, 1024], "grid_valu": [168, 618, 1024], "add_ax": [168, 222, 268], "surf": 168, "rstride": 168, "cstride": 168, "bupu": 168, "nthe": [168, 255, 351], "pretti": [168, 222, 255, 342, 357, 371, 382, 840, 841, 970, 1017], "view_init": [168, 218, 220, 222], "clb": 168, "ndepend": 168, "plot_partial_depend": [168, 171, 309, 310, 311, 1013, 1017, 1018, 1019, 1020, 1021, 1022], "breiman": [169, 400, 403, 501, 502, 503, 540, 541, 549, 550, 619, 891, 892, 974, 982], "random_num": 169, "random_cat": 169, "sibsp": [169, 314], "parch": [169, 314], "categorical_encod": 169, "numerical_pip": 169, "memor": 169, "814": [169, 286, 291, 999], "mdi_import": 169, "sorted_importances_idx": 169, "classifier__min_samples_leaf": 169, "anymor": [169, 197, 259, 309, 310, 329, 353, 375, 397, 655, 1014, 1017, 1020, 1021, 1022, 1024], "810": 169, "832": [169, 403, 540, 541], "train_result": 169, "test_result": 169, "train_import": 169, "test_import": 169, "764": [169, 171, 706, 966], "plot_permutation_import": [169, 171], "wisconsin": [170, 364, 485, 1003, 1013], "spearman": [170, 620, 621, 957], "spearmanr": 170, "squareform": 170, "load_breast_canc": [170, 320, 347, 376, 577, 580, 581, 583, 659, 660, 772, 966, 1013, 1014, 1019], "012": [170, 173], "contradict": [170, 987], "perm_sorted_idx": 170, "tree_importance_sorted_idx": 170, "tree_indic": 170, "fill_diagon": [170, 221], "distance_matrix": 170, "dist_linkag": 170, "dendro": 170, "leaf_rot": 170, "dendro_idx": 170, "ivl": 170, "cluster_id": [170, 343], "fcluster": 170, "cluster_id_to_feature_id": 170, "selected_featur": 170, "x_train_sel": 170, "x_test_sel": 170, "clf_sel": 170, "614": [170, 171], "plot_permutation_importance_multicollinear": [170, 171], "743": [171, 255, 999], "auto_examples_inspect": 171, "polynomialcountsketch": [173, 624, 626, 958, 1020, 1022], "covtyp": 173, "tensor": [173, 363, 392, 401, 523, 525, 532, 624, 625, 626, 1003, 1020], "sketch": [173, 359, 363, 380, 395, 624, 625, 626, 931, 1003, 1020], "daniel": [173, 314, 357, 864, 976, 990, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1020, 1022], "lopez": 173, "sanchez": [173, 1016, 1017], "lope": 173, "usal": 173, "54": [173, 181, 197, 200, 366, 368, 396, 476, 1009, 1010], "cartograph": 173, "remot": [173, 318, 371, 374], "fetch_covtyp": [173, 235, 311, 366, 1017, 1020, 1022], "5_000": 173, "mm": 173, "lsvm": 173, "lsvm_time": 173, "lsvm_score": 173, "thumb": [173, 357, 371, 372, 382, 396, 643, 644, 651, 653, 661, 662, 663, 883, 966], "condens": [173, 431], "compact": [173, 299, 357, 368, 823, 824, 982, 1010], "ps_lsvm_time": 173, "ps_lsvm_score": 173, "ksvm": 173, "ksvm_time": 173, "ksvm_score": 173, "pham": [173, 958, 1015], "ninh": 173, "rasmu": [173, 1015], "pagh": [173, 958], "kdd": [173, 366, 394, 422, 978], "doi": [173, 197, 215, 371, 396, 661], "1145": [173, 396, 661], "2487575": 173, "2487591": 173, "csie": [173, 365, 472, 493, 494, 643], "ntu": [173, 365, 472, 493, 494, 643], "tw": [173, 365, 472, 493, 494, 643, 981], "cjlin": [173, 365, 472, 493, 494, 643, 1011], "libsvmtool": [173, 365, 472, 493, 494], "553": [173, 174], "plot_scalable_poly_kernel": [173, 174], "auto_examples_kernel_approxim": 174, "ard": [176, 629, 630], "ol": [176, 187, 192, 194, 195, 203, 214, 312, 641, 962], "true_weight": 176, "ardregress": [176, 181, 630, 962, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1024], "olr": 176, "brr": 176, "_bay": 176, "renam": [176, 247, 258, 371, 375, 396, 426, 430, 432, 444, 456, 457, 463, 521, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 856, 1008, 1009, 1010, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023], "symlognorm": [176, 181], "linthresh": [176, 181], "10e": [176, 181], "cbar_kw": [176, 181], "seismic_r": [176, 181], "stabilis": 176, "retain": [176, 384, 396, 399, 400, 404, 479, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 680, 681, 799, 856, 955, 979, 1008], "ard_scor": 176, "scores_": [176, 177, 577, 580, 581, 583, 584, 585, 629, 630, 644, 1008, 1018], "brr_score": 176, "cutoff": [176, 925, 976, 1017], "full_data": 176, "input_featur": [176, 373, 384, 412, 416, 427, 428, 430, 432, 434, 449, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 551, 552, 553, 554, 555, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 673, 674, 677, 827, 832, 835, 839, 842, 843, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 1024], "x_plot": [176, 198, 203, 232, 260, 282, 304], "y_plot": [176, 198, 203, 260], "ard_poli": 176, "brr_poli": 176, "y_ard": 176, "y_ard_std": 176, "y_brr": 176, "y_brr_std": 176, "queri": [176, 290, 357, 375, 402, 407, 429, 431, 435, 442, 537, 595, 596, 613, 629, 630, 710, 740, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 966, 969, 982, 986, 1010, 1012, 1013, 1016], "lambda_init": [176, 177, 630, 962, 1018], "intrins": [176, 384, 401, 403, 969, 974, 980, 1020], "629": [176, 216], "plot_ard": [176, 216, 629], "alpha_init": [177, 630, 962, 1018], "yoshihiro": [177, 1018], "uchida": [177, 1018], "nimbus1after2a1sun7show": 177, "1234": [177, 245, 260, 371], "n_order": 177, "vander": 177, "ymean": 177, "ystd": 177, "pink": 177, "_init": 177, "lambda_": [177, 629, 630, 859, 962, 1015], "247": [177, 216, 863], "plot_bayesian_ridge_curvefit": [177, 216], "normalized_weight": 178, "x_offset": 178, "x_center": 178, "x_scale": [178, 853, 869, 976], "uncent": 178, "incorrectli": [178, 403, 404, 538, 544, 546, 718, 724, 966, 1009, 1014, 1016, 1017, 1019, 1024], "lm": 178, "98809919e": 178, "48938813e": 178, "03237920e": 178, "25349312e": 178, "53959628e": 178, "67451144e": 178, "00768662e": 178, "19112072e": 178, "07963978e": 178, "47987268e": 178, "76195467e": 178, "00393284e": 178, "07582983e": 178, "66670169e": 178, "65799352e": 178, "99891212e": 178, "58195950e": 178, "58667835e": 178, "98350372e": 178, "60836363e": 178, "00911944e": 178, "elasticnetelasticnet": 178, "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [178, 216], "huber": [179, 207, 395, 403, 545, 634, 661, 663, 980, 1008, 1010, 1011, 1020], "mks542": 179, "x_outlier": [179, 211, 283, 284, 328], "y_outlier": 179, "epsilon_valu": 179, "intercept_": [179, 187, 189, 206, 233, 327, 334, 338, 373, 384, 467, 468, 469, 534, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 883, 884, 885, 886, 887, 888, 889, 960, 962, 980, 981, 1008, 1015, 1020, 1022], "coef_ridg": 179, "plot_huber_vs_ridg": [179, 216], "logreg": [180, 817], "plot_method": [180, 280, 285, 325, 327, 330, 331, 616], "051": [180, 216, 329, 340, 457], "plot_iris_logist": [180, 216], "underdetermin": 181, "time_step": [181, 841], "anti": [181, 353, 591, 818, 968], "9502547": 181, "8059798": 181, "63394388": 181, "70359377": 181, "62241605": 181, "84077985": 181, "30506066": 181, "63327171": 181, "74495357": 181, "02456369": 181, "random_sampl": [181, 823, 824, 828], "sensor": 181, "monitor": [181, 205, 374, 384, 538, 539, 544, 545, 546, 547, 970, 1011, 1016, 1018, 1020], "superposit": 181, "tempor": [181, 986, 987], "y_pred_lasso": 181, "r2_score_lasso": 181, "480": 181, "y_pred_ard": 181, "r2_score_ard": 181, "041": [181, 193, 216, 228, 240], "543": 181, "elasticnetcv": [181, 384, 631, 637, 645, 646, 647, 648, 666, 962, 1008, 1011, 1019, 1021, 1022], "enet": [181, 270], "y_pred_enet": 181, "r2_score_enet": 181, "nlasso": 181, "meinshausen": 181, "yu": [181, 396, 437, 447, 643, 962, 970, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "246": [181, 269, 273, 974, 1008], "270": [181, 243, 318], "plot_lasso_and_elasticnet": [181, 216], "penalis": [182, 195, 212, 681], "lasso_path": [182, 636, 637, 638, 639, 640, 641, 648, 667, 668, 962, 1008, 1010, 1012, 1021], "enet_path": [182, 384, 632, 1010, 1012, 1021], "alphas_lasso": 182, "coefs_lasso": 182, "alphas_positive_lasso": 182, "coefs_positive_lasso": 182, "alphas_enet": 182, "coefs_enet": 182, "alphas_positive_enet": 182, "coefs_positive_enet": 182, "neg_log_alphas_lasso": 182, "neg_log_alphas_enet": 182, "coef_l": 182, "neg_log_alphas_positive_lasso": 182, "coef_pl": 182, "neg_log_alphas_positive_enet": 182, "coef_p": 182, "plot_lasso_coordinate_descent_path": [182, 216, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669], "sai": [183, 226, 337, 342, 343, 371, 394, 396, 397, 401, 403, 404, 431, 432, 485, 489, 495, 662, 955, 972, 979, 990, 998, 999, 1001], "x_sp": 183, "sparse_lasso": 183, "dense_lasso": 183, "coeff_diff": 183, "2e": [183, 271], "030": [183, 343], "01e": 183, "xs_sp": 183, "tocsc": 183, "nnz": [183, 343, 366, 684], "734": 183, "65e": 183, "plot_lasso_dense_vs_sparse_data": [183, 216], "lars_path": [184, 380, 516, 522, 524, 527, 528, 530, 531, 533, 635, 636, 637, 638, 639, 640, 641, 648, 649, 650, 668, 669, 670, 671, 962, 1008, 1010, 1013, 1017, 1019], "plot_lasso_lar": [184, 216], "zht2007": 185, "lassolars": [185, 186, 405, 636, 639, 640, 962, 1008, 1015, 1017, 1021, 1022], "2173": [185, 641, 962], "2192": [185, 641, 962], "038076": [185, 186], "050680": [185, 186], "061696": [185, 186], "021872": [185, 186], "044223": [185, 186], "034821": [185, 186], "043401": [185, 186], "002592": [185, 186], "019907": [185, 186], "017646": [185, 186], "001882": [185, 186], "044642": [185, 186], "051474": [185, 186], "026328": [185, 186], "008449": [185, 186], "019163": [185, 186], "074412": [185, 186], "039493": [185, 186], "068332": [185, 186], "092204": [185, 186], "085299": [185, 186], "044451": [185, 186], "005670": [185, 186], "045599": [185, 186], "034194": [185, 186], "032356": [185, 186], "002861": [185, 186], "025930": [185, 186], "089063": [185, 186], "011595": [185, 186], "036656": [185, 186], "012191": [185, 186], "024991": [185, 186], "036038": [185, 186], "034309": [185, 186], "022688": [185, 186], "009362": [185, 186], "005383": [185, 186], "036385": [185, 186], "003935": [185, 186], "015596": [185, 186], "008142": [185, 186], "031988": [185, 186], "046641": [185, 186], "linearlars": 185, "akaik": [185, 186, 247, 641, 780, 955, 962], "lasso_lars_": [185, 186], "zou_et_al_criterion_resc": 185, "noise_vari": [185, 517, 641, 962, 1022], "aic_criterion": 185, "criterion_": [185, 186, 641], "index_alpha_path_a": 185, "alphas_": [185, 186, 632, 635, 636, 638, 639, 640, 641, 646, 648, 667, 668, 1008, 1011, 1021], "lassolarsic__criterion": [185, 186], "bic_criterion": 185, "index_alpha_path_b": 185, "103": [185, 207, 216, 275, 277, 366, 403, 482, 540, 541, 1008], "plot_lasso_lars_": [185, 216], "n_random_featur": 186, "x_random": 186, "random_": 186, "02d": 186, "random_02": 186, "random_05": 186, "random_08": 186, "random_11": 186, "647689": 186, "234137": 186, "469474": 186, "465730": 186, "012831": 186, "412304": 186, "067528": 186, "110923": 186, "601707": 186, "057711": 186, "208864": 186, "196861": 186, "478522": 186, "057122": 186, "324084": 186, "611676": 186, "331263": 186, "185659": 186, "812526": 186, "003533": 186, "alpha_a": 186, "alpha_b": 186, "160030": 186, "5244": 186, "764779": 186, "300343": 186, "5208": 186, "250639": 186, "5212": 186, "341949": 186, "542052": 186, "4928": 186, "018900": 186, "4936": 186, "201520": 186, "034077": 186, "4869": 186, "678359": 186, "4881": [186, 1013], "952289": 186, "189631": 186, "4815": 186, "437362": 186, "4831": [186, 640], "802601": 186, "329616": 186, "4810": 186, "423641": 186, "4830": 186, "880191": 186, "306012": 186, "4803": 186, "573491": 186, "4828": 186, "121351": 186, "124225": 186, "4804": 186, "126502": 186, "4832": 186, "765671": 186, "820705": 186, "621645": 186, "4836": 186, "352124": 186, "750389": 186, "4805": 186, "012521": 186, "4841": 186, "834310": 186, "570655": 186, "290075": 186, "4846": 186, "203174": 186, "550213": 186, "4807": 186, "075887": 186, "4852": 186, "080295": 186, "358295": 186, "4806": 186, "878051": 186, "4855": 186, "973770": 186, "259297": 186, "706026": 186, "4860": 186, "893055": 186, "237703": 186, "4809": [186, 260], "440409": 186, "4866": 186, "718747": 186, "850031": 186, "989341": 186, "4867": 186, "358990": 186, "384338": 186, "4801": 186, "702266": 186, "163224": 186, "296575": 186, "4802": 186, "594754": 186, "4872": 186, "147022": 186, "031555": 186, "236720": 186, "4874": 186, "880298": 186, "618263": 186, "4798": 186, "484109": 186, "4876": 186, "218997": 186, "526599": 186, "4799": 186, "543841": 186, "370039": 186, "586798": 186, "4794": 186, "238744": 186, "4880": 186, "156252": 186, "445978": 186, "4795": 186, "589715": 186, "4885": 186, "598533": 186, "259031": 186, "4796": 186, "966981": 186, "4891": 186, "067109": 186, "032179": 186, "662409": 186, "4894": 186, "853846": 186, "019069": 186, "652739": 186, "4888": 186, "752867": 186, "626286": 186, "817724": 186, "set_xscal": [186, 201, 202], "optimist": [186, 262, 342, 353, 692, 962, 966], "badli": [186, 197, 342, 359, 863, 962, 976], "lassolarscv": [186, 405, 637, 638, 639, 641, 648, 650, 667, 668, 669, 962, 1008, 1015, 1021], "3800": 186, "mse_path_": [186, 632, 636, 638, 640, 646, 648], "cv_alphas_": [186, 636, 640, 1020], "kink": 186, "heavili": [186, 357, 358, 371, 379, 634, 640, 983], "efficaci": 186, "930": [186, 216, 996], "plot_lasso_model_select": [186, 216, 632, 638], "091": [187, 216, 343], "plot_logist": [187, 216], "axes_row": 188, "clf_l1_lr": 188, "clf_l2_lr": 188, "clf_en_lr": 188, "coef_l1_lr": 188, "coef_l2_lr": 188, "coef_en_lr": 188, "sparsity_l1_lr": 188, "sparsity_l2_lr": 188, "sparsity_en_lr": 188, "nl1_ratio": 188, "plot_logistic_l1_l2_spars": [188, 216], "995": 189, "plot_logistic_multinomi": [189, 216], "976": 189, "dupr": [189, 205, 277, 279, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "m4x": [189, 213], "sag": [189, 204, 643, 644, 657, 659, 672, 962, 980, 986, 1013, 1014, 1015, 1017, 1018], "bry": [189, 206], "classes_": [189, 206, 227, 266, 317, 318, 371, 373, 384, 422, 423, 534, 535, 536, 538, 540, 542, 544, 546, 549, 552, 554, 578, 579, 595, 643, 644, 651, 653, 659, 660, 661, 682, 685, 687, 772, 781, 784, 785, 795, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 825, 830, 833, 840, 843, 850, 851, 854, 878, 879, 880, 883, 885, 888, 891, 893, 896, 966, 977, 980, 1009, 1012, 1013, 1015, 1018, 1020], "plot_hyperplan": [189, 206, 233], "207": [189, 216, 296, 1008], "looser": 190, "liblinear": [190, 327, 377, 643, 644, 772, 883, 884, 885, 888, 889, 966, 981, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1024], "l1_min_c": [190, 962, 981, 1008], "intercept_sc": [190, 643, 644, 883, 884, 890, 962], "coefs_": [190, 295, 840, 841, 970, 1013], "plot_logistic_path": [190, 216], "jointli": [191, 264, 395, 396, 401, 962], "instant": 191, "wave": [191, 371, 965], "n_task": [191, 962], "n_relevant_featur": 191, "multitasklasso": [191, 637, 645, 648, 962, 1008, 1016, 1019, 1021], "coef_lasso_": 191, "coef_multi_task_lasso_": 191, "spy": 191, "feature_to_plot": 191, "seagreen": 191, "268": [191, 216, 240], "plot_multi_task_lasso_support": [191, 216], "reg_nnl": 192, "y_pred_nnl": 192, "r2_score_nnl": 192, "nnl": [192, 642], "8225220806196526": 192, "reg_ol": 192, "y_pred_ol": 192, "r2_score_ol": 192, "7436926291700356": 192, "low_x": 192, "high_x": 192, "low_i": 192, "high_i": 192, "get_ylim": [192, 299, 300], "847222222222214": 192, "plot_nnl": [192, 216], "23786125": 193, "2548": 193, "diabetes_x": [193, 999], "diabetes_i": [193, 999], "diabetes_x_train": [193, 999], "diabetes_x_test": [193, 999], "diabetes_y_train": [193, 999], "diabetes_y_test": [193, 999], "regr": [193, 397, 539, 541, 550, 631, 632, 652, 816, 841, 884, 886, 889, 981, 999], "diabetes_y_pr": 193, "plot_ol": [193, 216], "175": [194, 216, 377, 976], "plot_ols_3d": [194, 216], "greatli": [195, 231, 314, 371, 379, 437, 969, 982, 1014, 1022], "225": [195, 216, 403], "plot_ols_ridge_vari": [195, 216], "orthogonalmatchingpursuit": [196, 650, 670, 671, 962, 1008, 1010, 1013, 1016, 1021], "orthogonalmatchingpursuitcv": [196, 649, 1010, 1021], "make_sparse_coded_sign": [196, 516, 522, 1022, 1024], "512": [196, 344, 345], "n_nonzero_coef": [196, 511, 516, 522, 527, 533, 635, 649, 670, 671], "xw": [196, 312, 631, 632, 634, 637, 638, 639, 640, 641, 645, 646, 647, 648, 657, 666, 667, 668, 669, 962], "_0": [196, 670, 962, 966, 981], "distort": [196, 230, 368, 394, 395, 860, 872, 877, 963, 976, 978], "y_noisi": 196, "idx_r": 196, "omp_cv": 196, "plot_omp": [196, 216], "gbrt": [197, 403], "contract": [197, 215, 358, 384, 987], "compani": [197, 215, 396, 990], "policyhold": [197, 215, 962], "vehicl": [197, 215], "driver": [197, 215, 1023], "exposur": [197, 215, 962], "car": 197, "accid": [197, 215], "noll": [197, 215], "salzmann": [197, 215], "wuthrich": [197, 215], "novemb": [197, 215, 368, 1013, 1014, 1016], "2139": [197, 215], "ssrn": [197, 215], "3164764": [197, 215], "ch": [197, 199, 215, 320, 322], "rth": [197, 215], "41214": [197, 215], "idpol": [197, 215], "claimnb": [197, 215], "vehpow": [197, 215], "vehag": [197, 215], "drivag": [197, 215], "bonusmalu": [197, 215], "vehbrand": [197, 215], "vehga": [197, 215], "b12": [197, 215], "1217": 197, "r82": 197, "77000": 197, "75000": 197, "diesel": [197, 215], "r22": 197, "09000": 197, "r72": 197, "84000": 197, "678008": 197, "6114326": 197, "00274": 197, "3317": 197, "r93": 197, "678009": 197, "6114327": 197, "41": [197, 366, 368, 406, 454, 477, 516, 606, 609, 620, 643, 649, 670, 671, 765, 818, 968, 972], "9850": 197, "r11": [197, 215], "678010": 197, "6114328": 197, "1323": 197, "678011": 197, "6114329": 197, "r26": 197, "678012": 197, "6114330": 197, "678013": [197, 215], "10070308464041304": 197, "log_scale_transform": [197, 215], "linear_model_preprocessor": 197, "passthrough_numer": [197, 215], "binned_numer": [197, 215], "2e5": [197, 215], "log_scaled_numer": [197, 215], "onehot_categor": [197, 215], "imbalanc": [197, 260, 264, 266, 343, 382, 394, 400, 688, 693, 771, 782, 786, 820, 966, 968, 974, 986], "simplist": [197, 404], "pertin": 197, "dummyregressor": [197, 215, 536, 966, 1009, 1011, 1012, 1015, 1016, 1018, 1021, 1022], "df_train": [197, 215], "df_test": [197, 215], "regressor__sample_weight": 197, "mean_absolute_error": [197, 199, 215, 966, 1009, 1011], "mean_poisson_devi": [197, 966, 1018], "score_estim": [197, 215], "n_mask": 197, "564": 197, "189": [197, 288, 289, 291, 377, 880, 979], "comonli": 197, "ridge_glm": 197, "strictli": [197, 215, 299, 343, 376, 384, 394, 399, 401, 404, 493, 494, 520, 526, 529, 546, 547, 573, 576, 627, 655, 656, 680, 685, 723, 750, 781, 784, 785, 791, 795, 806, 832, 859, 871, 875, 876, 878, 879, 883, 884, 888, 889, 918, 955, 957, 962, 966, 976, 980, 1009, 1019, 1024], "domain": [197, 305, 384, 386, 400, 620, 706, 707, 708, 782, 783, 788, 789, 790, 962, 987], "560": [197, 502, 503], "186": [197, 296, 377, 772, 966], "595": 197, "223745": 197, "597": 197, "glm": [197, 215, 310, 633, 654, 665, 962, 1008, 1019], "vanilla": [197, 396, 432, 434, 445, 614], "poissonregressor": [197, 215, 310, 313, 633, 665, 962, 1019, 1022, 1023], "poisson_glm": 197, "newton": [197, 215, 296, 595, 633, 643, 644, 654, 665, 840, 841, 962, 1012, 1013, 1015, 1019, 1020, 1021, 1022, 1023], "deep": [197, 373, 384, 403, 410, 419, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 753, 779, 780, 781, 784, 785, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 970, 971, 986, 987, 990, 1013, 1019, 1020, 1022], "implicit": [197, 384, 403, 404, 557, 667, 668, 960, 965, 986, 1017], "concis": [197, 376, 1019, 1021], "poisson_gbrt": 197, "566": 197, "prone": [197, 244, 303, 382, 394], "set_yscal": 197, "5e5": 197, "realiz": [197, 990], "priori": [197, 214, 266, 275, 299, 384, 396, 403, 573, 579, 965, 1024], "wrongli": [197, 329], "gen_even_slic": [197, 380, 923], "_mean_frequency_by_risk_group": 197, "y_true_bin": 197, "y_pred_bin": 197, "idx_sort": 197, "sl": 197, "y_true_seg": 197, "y_pred_seg": 197, "11935": 197, "11933": 197, "11932": 197, "12196": 197, "11931": 197, "portfolio": [197, 215, 960], "riskiest": [197, 215], "safest": [197, 215, 353, 365], "irrespect": [197, 230, 266, 277, 591], "lorenz": [197, 215, 1013], "summar": [197, 248, 264, 266, 344, 371, 373, 386, 403, 506, 643, 679, 691, 692, 962, 963, 966, 972], "gini": [197, 215, 237, 269, 311, 538, 539, 542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894, 955, 974, 982, 1016, 1017, 1024], "lorenz_curv": [197, 215], "ranked_frequ": 197, "ranked_exposur": [197, 215], "cumulated_claim": 197, "cumulated_exposur": 197, "cum_exposur": 197, "cum_claim": [197, 215], "0x7fd102c83460": 197, "worst": [197, 305, 368, 396, 432, 693, 713, 714, 767, 768, 771, 774, 775, 808, 966, 990, 1008, 1021], "occurr": [197, 305, 343, 344, 366, 371, 396, 404, 554, 555, 566, 574, 575, 602, 612, 613, 614, 615, 767, 818, 846, 968, 1009, 1014], "circumstanti": 197, "extractor": [197, 296, 359, 366, 384, 404, 488, 955, 1008], "discrim": 197, "profil": [197, 357, 371, 374, 506, 509, 962, 990], "ideal": [197, 199, 215, 254, 257, 264, 266, 267, 353, 370, 371, 375, 376, 379, 382, 384, 394, 710, 740, 955, 965, 980, 981, 987], "meaningfulli": [197, 966], "526": [197, 216, 883], "plot_poisson_regression_non_normal_loss": [197, 216], "monomi": 198, "vandermond": [198, 976], "x_0": [198, 642], "pseudo": [198, 296, 373, 400, 408, 425, 437, 439, 447, 454, 455, 456, 458, 459, 460, 461, 518, 546, 547, 548, 612, 619, 624, 626, 627, 631, 632, 637, 638, 645, 646, 647, 648, 662, 676, 680, 784, 785, 793, 795, 832, 839, 875, 876, 880, 883, 884, 885, 888, 919, 920, 962, 978, 1013, 1022], "consecut": [198, 394, 400, 404, 428, 432, 434, 435, 437, 441, 444, 447, 522, 523, 524, 531, 587, 630, 651, 652, 653, 661, 662, 663, 779, 780, 786, 818, 819, 820, 821, 822, 840, 841, 955, 976, 1001, 1016], "basis_1": 198, "basis_2": 198, "infinit": [198, 242, 260, 357, 406, 431, 607, 608, 762, 779, 901, 903, 904, 958, 965, 976, 981, 1016, 1018, 1021, 1022, 1023], "malt": [198, 1021, 1022, 1023], "londschien": [198, 1021], "prepar": [198, 342, 357, 373, 374, 377, 379, 982, 990, 1016], "set_prop_cycl": 198, "teal": [198, 207, 264], "yellowgreen": [198, 200, 207, 349], "tomato": 198, "unwant": [198, 342], "oscillatori": [198, 976], "danger": [198, 400], "pft": 198, "splt": 198, "bsplines_": [198, 862], "refrain": [198, 371], "dec": [198, 662, 862, 887, 981], "31st": [198, 862], "advis": [198, 353, 369, 371, 396, 404, 422, 631, 637, 639, 645, 647, 657, 672, 958, 962, 968, 970, 981, 1022], "x_plot_ext": 198, "y_plot_ext": 198, "468": [198, 216], "plot_polynomial_interpol": [198, 216, 858, 862], "pareto": 199, "dale": [199, 1021], "mail": [199, 304, 366, 371, 375, 379, 382, 385, 984, 1016, 1017], "ru": 199, "glemaitre58": 199, "y_true_mean": 199, "y_normal": 199, "y_pareto": 199, "huge": [199, 202, 357, 377, 612, 1011], "heavi": [199, 393, 987], "sp_version": [199, 655], "parse_vers": [199, 655], "incompat": [199, 375, 481, 956, 1016, 1017], "older": [199, 370, 375, 1011, 1018, 1020], "recent": [199, 360, 369, 372, 376, 379, 384, 387, 396, 453, 523, 550, 980, 990, 1011, 1020], "interior": [199, 655, 962, 1023], "out_bounds_predict": 199, "bool_": 199, "logical_or": [199, 205, 266, 377], "hit": [199, 377], "wider": [199, 404, 896, 962], "asymmetri": [199, 342], "linger": 199, "linear_regress": [199, 271], "quantile_regress": 199, "y_pred_lr": 199, "y_pred_qr": 199, "805": 199, "486": 199, "670": 199, "cv_results_lr": 199, "cv_results_qr": 199, "test_neg_mean_squared_error": [199, 806], "732": 199, "690": 199, "679": [199, 883], "129": [199, 997, 1008], "585": [199, 216, 999], "plot_quantile_regress": [199, 216], "robustli": [200, 395], "faulti": [200, 1008], "1903908407869": 200, "17236387": 200, "08533159": 200, "ransacregressor": [200, 203, 214, 634, 663, 664, 962, 1011, 1013, 1014, 1015, 1016, 1019, 1021, 1022], "inlier_mask": 200, "inlier_mask_": [200, 656], "outlier_mask": 200, "line_x": [200, 214], "line_i": 200, "line_y_ransac": 200, "estimator_": [200, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 578, 579, 582, 656, 950, 1023], "plot_ransac": [200, 216], "regularis": [201, 409, 458, 460], "eventu": [201, 245, 395, 396, 405, 578, 990], "simpler": [201, 215, 329, 357, 370, 396, 401, 962, 967, 999, 1013], "stronger": [201, 258, 628, 637, 643, 644, 657, 658, 659, 660, 661, 663, 672], "kornel": [201, 1014], "kielczewski": [201, 1014], "plusnet": 201, "plot_ridge_coeff": [201, 216], "practis": 202, "10x10": 202, "hilbert": [202, 849, 958, 976], "n_alpha": [202, 457, 631, 632, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 658, 660, 666, 667, 668, 669, 1011], "plot_ridge_path": [202, 216], "theilsen": 203, "lessen": [203, 643, 644, 883, 884], "theilsenregressor": [203, 214, 634, 656, 663, 962, 1012, 1020, 1022], "x_error": 203, "y_errors_larg": 203, "x_errors_larg": 203, "deviant": [203, 972], "legend_titl": 203, "nabsolut": 203, "nto": [203, 266], "887": [203, 216, 230], "plot_robust_fit": [203, 216], "asgd": [204, 980], "rob": [204, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1020, 1023], "zinkov": [204, 1008, 1009, 1010, 1012, 1013], "heldout": 204, "squared_hing": [204, 337, 651, 661, 883, 890, 962], "0e4": 204, "yy_": 204, "202": [204, 216], "plot_sgd_comparison": [204, 216], "_test": [205, 301, 373, 1021], "ignore_warn": [205, 301, 1014], "load_mnist": [205, 277], "class_0": [205, 368, 495], "class_1": [205, 368, 495], "mnist_784": [205, 213, 277, 295], "fit_and_scor": 205, "train_scor": [205, 272, 305, 337, 347, 787, 806, 807, 810, 961], "estimator_dict": 205, "flush": 205, "results_df": [205, 257, 305], "group_df": 205, "362": [205, 213, 216], "plot_sgd_early_stop": [205, 216], "ova": [206, 651, 653, 661, 980], "plot_sgd_iri": [206, 216], "ugli": [206, 280, 285, 288, 325], "modified_huber_loss": 207, "darkorchid": 207, "plot_sgd_loss_funct": [207, 216], "l1_color": 208, "l2_color": 208, "elastic_net_color": 208, "1001": 208, "rho": [208, 401, 662, 962, 980, 1009], "elastic_net": 208, "dpi": [208, 897, 1021], "elastic_net_contour": 208, "l2_contour": 208, "l1_contour": 208, "inlin": [208, 371, 372, 982], "plot_sgd_penalti": [208, 216], "ndenumer": 209, "plot_sgd_separating_hyperplan": [209, 216], "no_weight": 210, "samples_weight": 210, "no_weights_handl": 210, "weights_handl": 210, "079": [210, 216, 368], "plot_sgd_weighted_sampl": [210, 216], "sgdoneclasssvm": [211, 226, 312, 887, 972, 980, 1021, 1023, 1024], "rc": [211, 375], "novel": [211, 283, 328, 353, 394, 955], "abnorm": [211, 226, 283, 328, 366, 477, 548, 829, 972, 1016], "y_pred_train": [211, 328], "y_pred_test": [211, 283, 328], "y_pred_outli": [211, 283, 328], "n_error_train": [211, 328], "n_error_test": [211, 283, 328], "n_error_outli": [211, 283, 328], "clf_sgd": 211, "pipe_sgd": 211, "y_pred_train_sgd": 211, "y_pred_test_sgd": 211, "y_pred_outliers_sgd": 211, "n_error_train_sgd": 211, "n_error_test_sgd": 211, "n_error_outliers_sgd": 211, "z_sgd": 211, "pubu": [211, 230, 283, 328], "darkr": [211, 283, 328], "palevioletr": [211, 283, 328], "b1": [211, 283, 328], "b2": [211, 283, 328], "blueviolet": [211, 283, 328], "plot_sgdocsvm_vs_ocsvm": [211, 216], "newgroups20": 212, "trim": [212, 396, 823, 824], "20newsgroup": [212, 364, 1008], "4500": 212, "130107": [212, 230, 474], "epoch": [212, 384, 521, 651, 652, 653, 661, 662, 663, 840, 841, 980, 1015, 1016, 1021], "5960": 212, "26593496": 212, "43348936": 212, "26362917": 212, "31973683": 212, "37815029": 212, "2928359": 212, "27054655": 212, "62717609": 212, "19522393": 212, "30897646": 212, "34586917": 212, "28207552": 212, "34125758": 212, "29898468": 212, "34279478": 212, "59489497": 212, "38353048": 212, "35278655": 212, "19829832": 212, "14603365": 212, "6440": 212, "36047253": 212, "1268187": 212, "10606655": 212, "17985197": 212, "5395559": 212, "07993421": 212, "06686804": 212, "21443888": 212, "11528972": 212, "2075215": 212, "10914094": 212, "11144673": 212, "13988486": 212, "09684337": 212, "26286057": 212, "11682692": 212, "55800226": 212, "17370318": 212, "11452112": 212, "arthur": [212, 213, 396, 432, 445, 1013, 1014, 1015, 1016, 1017, 1020, 1022], "mensch": [212, 213, 1013, 1014, 1015, 1016], "timeit": [212, 245, 377], "default_tim": [212, 245], "model_param": 212, "this_max_it": 212, "train_tim": [212, 232, 342, 343], "ndataset": [212, 301], "run_tim": [212, 213], "507": [212, 216, 397], "plot_sparse_logistic_regression_20newsgroup": [212, 216], "8253": 213, "294": 213, "l1_plot": 213, "plot_sparse_logistic_regression_mnist": [213, 216], "subpopul": [214, 664, 962], "residual_threshold": [214, 656, 962, 1021], "remedi": 214, "max_subpopul": [214, 664, 1022], "lose": [214, 344, 366, 384, 399, 404, 406, 531, 919, 920, 956, 962, 1001], "florian": [214, 990, 1008, 1012, 1014, 1018], "wilhelm": [214, 1012, 1014, 1018], "indigo": 214, "565": [214, 216, 257], "plot_theilsen": [214, 216], "motor": 215, "parti": [215, 358, 370, 382, 783, 790, 934, 984, 1008, 1019], "liabil": 215, "functool": 215, "mean_tweedie_devi": [215, 966, 1018], "load_mtpl2": 215, "fremtpl2freq": 215, "df_freq": 215, "fremtpl2sev": 215, "41215": 215, "df_sev": 215, "claimamount": 215, "fillna": 215, "unquot": 215, "field": [215, 368, 393, 396, 397, 404, 483, 486, 602, 962, 964, 973, 981, 986, 989, 1001, 1009], "column_nam": 215, "plot_obs_pr": 215, "y_label": 215, "fill_legend": 215, "df_": 215, "tweedie_pow": 215, "d\u00b2": 215, "subset_label": 215, "score_label": [215, 263], "est_freq": 215, "est_sev": 215, "unstack": [215, 260], "fremtpl2": 215, "unreason": [215, 400], "exception": 215, "200000": 215, "column_tran": [215, 397], "purepremium": 215, "indirectli": 215, "avgclaimamount": 215, "fmax": 215, "option_context": 215, "max_column": 215, "414": [215, 397, 710, 740, 859, 871, 966], "424": 215, "463": 215, "27000": 215, "303": [215, 620], "404": [215, 311, 315], "333333": 215, "r25": 215, "1981": [215, 962], "14156": 215, "142857": 215, "4792": 215, "1456": 215, "10403": 215, "928571": 215, "10834": 215, "17474": 215, "193548": 215, "225806": 215, "r73": 215, "3986": 215, "12860": [215, 1017], "5417": 215, "seemingli": [215, 353, 382], "169504": 215, "6237": 215, "upon": [215, 223, 290, 366, 371, 382, 384, 390, 546, 547, 612, 615, 656, 773, 779, 780, 823, 824, 955, 962, 982, 992, 1001, 1022], "glm_freq": 215, "0201": 215, "0219": 215, "1379": 215, "1378": 215, "2441": 215, "2246": 215, "surprisingli": [215, 366, 404], "bonu": [215, 371, 996, 1001], "malu": 215, "younger": 215, "infti": [215, 406, 604, 962, 976, 1015], "gammaregressor": [215, 310, 313, 665, 962, 1019, 1022, 1023], "mask_test": 215, "glm_sev": 215, "400000e": 215, "700000e": 215, "756746e": 215, "744042e": 215, "801770e": 215, "030677e": 215, "dummy_sev": 215, "000000e": 215, "756687e": 215, "744497e": 215, "803882e": 215, "033764e": 215, "avgclaim": 215, "nbclaim": 215, "1951": 215, "1940": 215, "1978": [215, 962], "apriori": 215, "regardless": [215, 258, 259, 260, 358, 371, 396, 520, 643, 689, 700, 966, 978, 1016, 1023, 1024], "glm_pure_premium": 215, "999": [215, 257, 375, 403, 702, 840, 841], "scores_product_model": 215, "scores_glm_pure_premium": 215, "expand_frame_repr": 215, "690000e": 215, "420000e": 215, "669930e": 215, "617050e": 215, "640770e": 215, "640880e": 215, "7000": 215, "695740e": 215, "683980e": 215, "682880e": 215, "692270e": 215, "8000": [215, 260, 261], "046010e": 215, "040530e": 215, "037600e": 215, "045390e": 215, "9000": 215, "387580e": 215, "385000e": 215, "382120e": 215, "387830e": 215, "9900": 215, "015716e": 215, "015414e": 215, "015347e": 215, "015587e": 215, "9990": 215, "914573e": 215, "914370e": 215, "914538e": 215, "914387e": 215, "904751e": 215, "904556e": 215, "904747e": 215, "904558e": 215, "730119e": 215, "722128e": 215, "739865e": 215, "731249e": 215, "295040e": 215, "212197e": 215, "295505e": 215, "213056e": 215, "917618e": 215, "299546e": 215, "916555e": 215, "313276e": 215, "951751e": 215, "325198e": 215, "riski": 215, "operation": [215, 990], "develop": [215, 255, 257, 309, 342, 357, 360, 366, 370, 371, 377, 382, 384, 385, 386, 390, 393, 395, 398, 399, 403, 404, 418, 478, 781, 962, 969, 982, 984, 986, 987, 989, 990, 999, 1008, 1016, 1017, 1018, 1021, 1023, 1024], "ranked_pure_premium": 215, "cumulated_claim_amount": 215, "cumulated_sampl": 215, "y_pred_product": 215, "y_pred_tot": 215, "ordered_sampl": 215, "plot_tweedie_regression_insurance_claim": [215, 216], "auto_examples_linear_model": 216, "md": [218, 219, 220, 221, 375, 673, 677, 679, 1002, 1003, 1008, 1020, 1023], "seek": [218, 220, 222, 370, 371, 382, 385, 493, 494, 963, 993, 995], "ticker": [218, 220, 223, 277], "s_point": 218, "s_color": 218, "make_s_curv": [218, 223], "plot_3d": 218, "points_color": 218, "subplot_kw": [218, 281], "set_major_loc": [218, 282], "multipleloc": [218, 282], "add_2d_scatt": 218, "set_major_formatt": [218, 220, 223, 277, 282], "nullformatt": [218, 220, 223, 277], "lle": [218, 219, 220, 222, 515, 674, 678, 963, 1020], "thought": [218, 282, 384, 396, 431, 963, 967], "analys": [218, 351, 401, 784, 785, 963, 986, 990], "lle_standard": 218, "s_standard": 218, "lle_ltsa": 218, "ltsa": [218, 219, 220, 674, 678, 963], "s_ltsa": 218, "lle_hessian": 218, "hessian": [218, 219, 220, 403, 633, 643, 644, 654, 665, 674, 678, 962, 970, 1002, 1003, 1023], "s_hessian": 218, "lle_mod": 218, "s_mod": 218, "lle_method": 218, "tangent": [218, 674, 678, 964, 1002, 1003], "eigenmap": [218, 674, 676, 678, 680, 1002, 1003, 1009], "isometr": [218, 673, 675, 676, 677, 963], "geodes": [218, 673, 963], "s_isomap": 218, "md_scale": 218, "normalized_stress": [218, 219, 220, 221, 675, 679, 963, 1023], "s_scale": 218, "laplacian": [218, 363, 393, 425, 437, 447, 605, 624, 628, 676, 680, 749, 750, 758, 879, 962, 963, 979, 1003, 1009, 1014], "s_spectral": 218, "t_sne": [218, 1016], "s_t_sne": 218, "plot_compare_method": [218, 224], "offsetbox": 219, "plot_embed": 219, "425": [219, 256, 273, 600], "shown_imag": 219, "someth": [219, 342, 371, 373, 374, 375, 379, 404, 966, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "4e": 219, "imagebox": 219, "annotationbbox": 219, "offsetimag": 219, "neighborhoodcomponentsanalysi": [219, 285, 286, 287, 969, 1017, 1022], "random_project": [219, 230, 360, 978, 983, 1009, 1014, 1024], "sparserandomproject": [219, 230, 875, 978, 1009, 1014, 1022, 1024], "embeed": 219, "n_iter_without_progress": [219, 677, 1013, 1014], "nca": [219, 285, 286, 287, 832, 969], "715": [219, 224], "plot_lle_digit": [219, 224], "pole": 220, "thin": [220, 605], "earth": [220, 343, 748, 986], "251": [220, 368], "sphere_data": 220, "trans_data": 220, "2g": [220, 223, 682, 1019], "258": 220, "se": [220, 368, 387], "493": [220, 224, 628, 883, 959], "plot_manifold_spher": [220, 224], "euclidean_dist": [221, 230, 373, 435, 442, 673, 746, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 1008, 1013, 1016, 1017], "finfo": [221, 456, 457, 463, 591, 635, 636, 639, 640, 641, 667, 668, 725, 1023], "x_true": 221, "dissimilar": [221, 384, 393, 437, 675, 679, 963, 1014, 1024], "embedding_": [221, 384, 673, 674, 675, 676, 677], "nmd": 221, "npo": 221, "208": [221, 224, 277, 368], "plot_md": [221, 224], "sr_point": 222, "sr_color": 222, "ambient": 222, "text2d": 222, "unrol": 222, "unnecessarili": [222, 1015, 1018], "clump": 222, "sr_lle": 222, "sr_err": 222, "locally_linear_embed": [222, 963], "sr_tsne": 222, "stretch": [222, 246], "byproduct": 222, "sh_point": 222, "sh_color": 222, "topologi": [222, 223], "sh_lle": 222, "sh_err": 222, "sh_tsne": 222, "plot_swissrol": [222, 224], "tendenc": [223, 962, 963, 965, 968, 971], "clearer": [223, 981], "distil": 223, "pub": [223, 821, 878], "misread": 223, "narin": [223, 1015, 1016], "kokhlikyan": [223, 1015, 1016], "988": [223, 224], "plot_t_sne_perplex": [223, 224], "728": 224, "auto_examples_manifold": 224, "cope": [226, 359, 366, 962], "multimod": 226, "inli": [226, 962, 972], "unimod": [226, 459], "localoutlierfactor": [226, 235, 283, 284, 313, 384, 548, 887, 972, 1015, 1016, 1018, 1022, 1023, 1024], "modal": [226, 459, 922], "hypercub": [226, 500], "decent": [226, 256, 366, 968], "handpick": 226, "absenc": [226, 260, 384, 697, 846, 965, 966], "negative_linestyl": 226, "outliers_fract": 226, "n_inlier": 226, "anomaly_algorithm": 226, "blobs_param": 226, "147": [226, 240, 967], "plot_anomaly_comparison": [226, 240], "transfus": 227, "1464": 227, "donat": 227, "confust": 227, "cm_displai": 227, "y_score": [227, 264, 266, 384, 467, 468, 469, 692, 705, 710, 711, 723, 724, 740, 766, 772, 773, 776, 781, 784, 785, 795, 843, 966, 1014, 1022, 1024], "pos_label": [227, 235, 384, 423, 424, 683, 685, 687, 691, 692, 694, 711, 713, 714, 722, 766, 767, 768, 771, 773, 850, 867, 966, 1016, 1020, 1022], "roc_displai": 227, "previs": 227, "precision_recall_curv": [227, 264, 685, 691, 692, 711, 966, 1009, 1010, 1014, 1021, 1022, 1024], "pr_displai": 227, "easlii": 227, "plot_display_object_visu": [227, 240], "summaris": [228, 310], "composit": [228, 310, 360, 363, 400, 643, 772, 956, 962, 975, 1003, 1009], "num_proc": [228, 310], "cat_proc": [228, 310], "feat1": [228, 310, 404], "feat3": [228, 310, 404], "feat0": [228, 310], "feat2": [228, 310, 404], "plot_estimator_represent": [228, 240], "isotonicregress": [229, 957, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1020, 1022, 1023, 1024], "ir": [229, 401, 575, 710, 740, 818, 822, 964, 966], "out_of_bound": [229, 620], "y_": [229, 243, 247, 248, 289, 373, 399, 401, 622, 633, 654, 665, 713, 714, 722, 767, 768, 771, 962, 966, 1014], "linearregressionlinearregress": 229, "x_thresholds_": [229, 620, 1020], "y_thresholds_": [229, 620, 1020], "plot_isotonic_regress": [229, 240], "lemma": [230, 363, 395, 519, 526, 534, 875, 876, 877, 960, 1003, 1011], "johnson_lindenstrauss_min_dim": [230, 978, 1009], "achliopta": [230, 876, 877, 978], "_compon": [230, 521], "geq": [230, 394, 401, 403, 962, 966, 976, 980, 981], "_sampl": [230, 401, 523, 525, 532], "admiss": [230, 358], "eps_rang": 230, "min_n_compon": 230, "nn_sampl": [230, 269], "semilogi": 230, "nn_compon": [230, 231], "100k": 230, "n_components_rang": 230, "rp": 230, "projected_data": 230, "n_byte": 230, "projected_dist": 230, "min_dist": 230, "max_dist": 230, "hexbin": 230, "gridsiz": 230, "307": 230, "298": [230, 974], "332": [230, 343, 871], "865": 230, "271": 230, "jl": [230, 876], "436": 230, "748": [230, 240, 342, 377], "plot_johnson_lindenstrauss_bound": [230, 240], "rbfsampler": [231, 624, 625, 627, 958, 992, 1012, 1022, 1023], "mont": [231, 406, 596, 626, 627, 958, 971], "fourier": [231, 395, 623, 624, 625, 626, 627, 742, 743, 958], "acceler": [231, 314, 357, 382, 396, 453, 677, 881, 963, 986, 990, 1017, 1021, 1023], "data_train": [231, 258, 342], "targets_train": 231, "data_test": [231, 258, 342], "targets_test": 231, "kernel_svm": 231, "linear_svm": 231, "feature_map_fouri": 231, "feature_map_nystroem": [231, 624], "fourier_approx_svm": 231, "feature_map": [231, 299], "nystroem_approx_svm": 231, "kernel_svm_tim": 231, "kernel_svm_scor": 231, "linear_svm_tim": 231, "linear_svm_scor": 231, "fourier_scor": 231, "nystroem_scor": 231, "fourier_tim": 231, "nystroem_tim": 231, "feature_map__n_compon": 231, "timescal": 231, "ly": [231, 831, 833, 834, 835, 1012], "flat_grid": 231, "lv_ep": 231, "tab10": [231, 247], "759": [231, 240, 277], "plot_kernel_approxim": [231, 240], "krr": [232, 406, 628, 959], "insensit": [232, 628, 661, 663, 772, 884, 959, 980, 981, 1008], "fifth": [232, 959, 992], "kr": [232, 257, 1022], "svr_fit": 232, "kr_fit": 232, "sv_ratio": 232, "support_": [232, 336, 454, 459, 578, 579, 587, 885, 886, 887, 888, 889, 981], "y_svr": 232, "svr_predict": 232, "y_kr": 232, "kr_predict": 232, "09999999999999999": [232, 265, 329], "737": [232, 509], "854": [232, 255], "340": [232, 317, 343], "sv_ind": 232, "arithmet": [232, 377, 379, 396, 536, 633, 654, 665, 689, 702, 720, 721, 741, 777, 966, 1016], "test_tim": [232, 342], "train_test_s": 232, "learningcurvedisplai": [232, 259, 314, 961, 1023], "negate_scor": [232, 787], "std_display_styl": [232, 259, 787], "get_legend_handles_label": [232, 259, 264], "945": [232, 240], "plot_kernel_ridge_regress": [232, 240], "theta_c": [233, 508], "reject": [233, 384, 385, 508, 656, 711, 903, 904, 962, 966, 1016], "never": [233, 353, 371, 380, 382, 390, 396, 397, 399, 400, 435, 442, 508, 531, 540, 541, 542, 549, 843, 844, 958, 1018, 1021], "likewis": [233, 396, 508], "surround": [233, 371, 829, 972], "cca": [233, 399, 468, 470, 1012, 1016, 1017, 1018, 1020, 1022], "onevsrestclassifi": [233, 264, 266, 275, 394, 811, 813, 883, 992, 1009, 1010, 1012, 1014, 1015, 1021, 1022], "metaclassifi": 233, "min_x": 233, "max_x": 233, "plot_subfigur": 233, "min_i": 233, "zero_class": 233, "one_class": 233, "nfor": 233, "plot_multilabel": [233, 240], "extratreesregressor": [234, 403, 542, 550, 551, 893, 894, 1011, 1014, 1016, 1017, 1018, 1021, 1022, 1023, 1024], "n_face": 234, "face_id": 234, "n_pixel": [234, 255], "nn": [234, 404, 680, 999], "y_test_predict": 234, "true_fac": 234, "completed_fac": 234, "plot_multioutput_face_complet": [234, 240], "benchmark": [235, 277, 311, 343, 344, 357, 364, 366, 371, 382, 387, 389, 394, 453, 500, 881], "iforest": 235, "pharuj": 235, "rajborirug": 235, "ra": 235, "kmitl": 235, "ac": [235, 515, 649, 670, 671, 962, 979, 1001], "th": [235, 312, 351, 383, 396, 400, 403, 411, 426, 430, 436, 438, 444, 448, 457, 542, 543, 544, 545, 546, 547, 549, 550, 551, 578, 579, 617, 633, 634, 654, 656, 665, 681, 703, 764, 802, 864, 908, 956, 962, 966, 970, 973, 980, 981, 1023], "preprocess_dataset": 235, "fetch_kddcup99": [235, 366, 1015, 1016, 1017, 1020, 1021], "labelbinar": [235, 266, 384, 725, 812, 847, 856, 867, 967, 992, 1011, 1012, 1013, 1017, 1022], "dataset_nam": [235, 277], "smtp": [235, 366, 477], "sa": [235, 366, 477], "percent10": [235, 477], "lb": [235, 850, 977], "forestcov": 235, "glass": [235, 366], "wdbc": [235, 368], "cardiotocographi": 235, "tablewar": 235, "x_mal": 235, "y_mal": 235, "x_ben": 235, "y_ben": 235, "x_mal2": 235, "y_mal2": 235, "compute_predict": 235, "model_nam": [235, 275], "negative_outlier_factor_": [235, 284, 829, 972], "datasets_nam": 235, "models_nam": 235, "ceil": [235, 542, 543, 544, 545, 548, 549, 550, 551, 579, 656, 784, 785, 891, 892, 893, 894, 980], "model_idx": 235, "plot_chance_level": [235, 264, 266, 267, 685, 687, 1024], "chance_level_kw": [235, 685, 687, 1024], "plot_outlier_detection_bench": [235, 240], "recalcul": [236, 238, 396, 1005, 1008], "mlpregressormlpregressor": 236, "tree_disp": 236, "mlp_disp": 236, "0x7fd1119af760": 236, "plot_partial_dependence_visualization_api": [236, 240], "set_config": [237, 239, 306, 310, 357, 358, 397, 453, 611, 1017, 1019, 1022, 1024], "deactiv": [237, 365, 369, 372, 377, 387, 397, 784, 785, 1022], "standard_scal": 237, "polynomialfeaturespolynomialfeatur": 237, "pcapca": 237, "svcsvc": [237, 238, 255, 257, 311], "numeric_preprocessor": 237, "imputation_mean": 237, "categorical_preprocessor": [237, 305], "imputation_const": 237, "onehot": [237, 300, 301, 397, 848, 976], "gender": [237, 856, 976], "classifier__n_estim": 237, "classifier__max_featur": 237, "classifier__max_depth": 237, "classifier__criterion": 237, "118": [237, 240, 575], "plot_pipeline_displai": [237, 240], "svc_disp": [238, 309, 1005], "rfc_disp": [238, 309, 1005], "177": [238, 240, 377], "plot_roc_curve_visualization_api": [238, 240], "transform_output": [239, 306, 453, 881, 1023], "slep018": [239, 373, 1023], "x_test_scal": 239, "894264": 239, "798301": 239, "271411": 239, "327605": 239, "244466": 239, "086944": 239, "327407": 239, "459074": 239, "660797": 239, "462234": 239, "576989": 239, "159419": 239, "933197": 239, "427329": 239, "414810": 239, "039497": 239, "275851": 239, "scaler2": 239, "x_test_np": 239, "x_test_df": 239, "feature_names_in_": [239, 306, 312, 384, 416, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 596, 612, 613, 614, 615, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 779, 780, 781, 784, 785, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 1021, 1022, 1023, 1024], "num_pip": 239, "num_col": 239, "7621951219512195": 239, "log_reg": [239, 313], "config_context": [239, 357, 358, 392, 611, 881, 1015, 1021, 1024], "reset": [239, 353, 379, 519, 661, 662, 663, 823, 824, 852, 853, 863, 1010], "133660": 239, "438059": 239, "894273": 239, "506893": 239, "000619": 239, "182778": 239, "671": [239, 978], "548540": 239, "461032": 239, "817": 239, "487001": 239, "13366001": 239, "4380594": 239, "89427284": 239, "50689261": 239, "00061876": 239, "18277786": 239, "54853974": 239, "46103177": 239, "48700054": 239, "plot_set_output": [239, 240], "auto_examples_miscellan": 240, "bayesiangaussianmixtur": [242, 243, 248, 780, 1014, 1016, 1017, 1021, 1022], "weight_concentration_prior_typ": [242, 248, 779, 965, 1014], "dirichlet_distribut": [242, 779, 965, 1014], "dirichlet_process": [242, 248, 779, 965, 1014], "weight_concentration_prior": [242, 248, 779, 965], "finit": [242, 248, 357, 366, 384, 453, 523, 536, 567, 591, 594, 595, 596, 643, 712, 762, 769, 779, 804, 881, 901, 903, 904, 962, 965, 966, 990, 992, 999, 1015, 1016, 1020, 1022, 1023], "unnecessari": [242, 376, 428, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 690, 969, 976, 987, 990, 1011, 1013, 1018, 1019, 1021, 1024], "covar": [242, 243, 248], "eig_val": 242, "eig_vec": 242, "unit_eig_vec": 242, "arctan2": [242, 244, 247], "56b4e9": 242, "plot_titl": 242, "weights_": [242, 779, 780, 1022], "covariances_": [242, 243, 244, 247, 248, 779, 780, 1015], "get_xaxi": [242, 287, 299], "set_tick_param": 242, "007": [242, 265, 277, 343], "labelleft": 242, "0072b2": 242, "f0e442": 242, "d55e00": 242, "mean_precision_prior": [242, 248, 779], "nprior": 242, "gamma_0": [242, 248], "reg_covar": [242, 779, 780], "init_param": [242, 245, 248, 779, 780], "concentrations_prior": 242, "plot_concentration_prior": [242, 249], "_base": [243, 373], "color_it": [243, 247, 248], "dp": [243, 248], "shouldn": [243, 248, 371], "em": [243, 244, 248, 428, 432, 444, 521, 779, 780, 965, 1022], "dpgmm": [243, 248, 1008, 1012, 1014], "plot_gmm": [243, 249], "ronweiss": 244, "make_ellips": 244, "datalim": 244, "skf": [244, 400, 800], "train_index": [244, 320, 400, 782, 783, 786, 788, 789, 790, 791, 794, 796, 797, 798, 799, 800, 801, 802], "test_index": [244, 320, 400, 782, 783, 786, 788, 789, 790, 791, 794, 796, 797, 798, 799, 800, 801, 802], "cov_typ": 244, "means_init": [244, 245, 780], "y_train_pr": 244, "train_accuraci": 244, "y_test_pr": 244, "test_accuraci": [244, 258], "226": [244, 249, 396, 407, 429], "plot_gmm_covari": [244, 249], "random_from_data": [245, 779, 780, 965], "diamond": 245, "colour": [245, 368, 404, 572, 967], "walsh": [245, 1020, 1022], "extmath": [245, 342, 380, 438, 1014, 1015, 1018, 1023], "row_norm": 245, "_samples_gener": 245, "timer": [245, 377], "x_squared_norm": [245, 445], "get_initial_mean": 245, "times_init": 245, "relative_tim": 245, "ini": 245, "init_tim": 245, "2fx": 245, "plot_gmm_init": [245, 249], "shifted_gaussian": 246, "stretched_gaussian": 246, "score_sampl": [246, 282, 283, 284, 290, 384, 402, 454, 517, 526, 548, 662, 779, 780, 781, 784, 785, 795, 828, 829, 839, 843, 887, 972, 1011, 1016, 1018, 1020], "137": [246, 249, 377, 1009], "plot_gmm_pdf": [246, 249], "component_1": 247, "component_2": 247, "best_parameters_": 247, "gmm_bic_scor": 247, "callabl": [247, 261, 384, 400, 404, 405, 407, 408, 426, 428, 429, 430, 431, 432, 434, 435, 437, 442, 444, 445, 449, 450, 451, 452, 516, 518, 520, 522, 524, 530, 531, 542, 543, 544, 545, 546, 547, 549, 550, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 595, 596, 605, 613, 619, 624, 628, 644, 651, 656, 658, 660, 673, 676, 677, 681, 696, 704, 716, 726, 755, 758, 762, 763, 764, 765, 774, 775, 781, 784, 785, 787, 795, 805, 806, 807, 808, 810, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 847, 856, 878, 879, 885, 886, 887, 888, 889, 927, 933, 936, 950, 955, 966, 976, 1008, 1012, 1015, 1016, 1017, 1018, 1020, 1022, 1024], "0x7fd12490df70": 247, "gaussianmixturegaussianmixtur": 247, "param_n_compon": 247, "param_covariance_typ": 247, "829429": 247, "1084": 247, "038689": 247, "1114": 247, "517272": 247, "1148": 247, "512281": 247, "1179": 247, "977890": 247, "catplot": 247, "hue": [247, 257, 280, 304, 368], "eigenvalu": [247, 393, 396, 398, 437, 447, 454, 455, 456, 457, 458, 459, 460, 461, 520, 526, 534, 658, 673, 674, 676, 678, 680, 849, 963, 976, 1010, 1014, 1017, 1018, 1019, 1020], "plot_gmm_select": [247, 249], "loos": [248, 254, 981, 1016], "liberti": 248, "judgment": [248, 966], "panel": [248, 282, 299, 402, 986], "primarili": [248, 262, 371, 384, 392, 396, 990, 1017, 1018], "covariance_prior": [248, 779], "plot_gmm_sin": [248, 249], "085": 249, "auto_examples_mixtur": 249, "mislabel": [251, 403, 968], "imbal": [251, 260, 400, 692, 713, 714, 722, 767, 768, 771, 772, 966], "misclassifi": [251, 342, 981], "life": [251, 379, 963], "set_printopt": 251, "titles_opt": 251, "plot_confusion_matrix": [251, 273, 309, 1018, 1019, 1020, 1021], "shufflesplit": [252, 259, 337, 400, 783, 789, 791, 801, 809, 996, 1008, 1009, 1011, 1013, 1014], "groupshufflesplit": [252, 400, 996, 1014], "groupkfold": [252, 262, 400, 579, 781, 784, 785, 786, 787, 788, 789, 790, 795, 799, 804, 805, 806, 807, 810, 996, 1014, 1021], "stratifiedshufflesplit": [252, 329, 400, 996, 1008, 1009, 1014, 1015, 1021], "stratifiedgroupkfold": [252, 1021], "1338": 252, "cmap_data": 252, "cmap_cv": 252, "coolwarm": [252, 326], "n_point": [252, 823, 824], "percentiles_class": 252, "perc": 252, "group_prior": 252, "visualize_group": 252, "yticklabel": [252, 342], "ngroup": 252, "nclass": 252, "plot_cv_indic": [252, 273], "tr": [252, 368, 375, 396, 398, 454, 455, 456, 457, 458, 459, 460, 461, 821], "this_cv": 252, "194": [253, 273, 296], "plot_cv_predict": [253, 273], "fnr": [254, 683, 711], "det_curv": [254, 683, 766, 773, 966, 1020, 1021], "commonli": [254, 364, 384, 396, 397, 406, 599, 742, 743, 779, 812, 855, 963, 964, 966, 967, 969, 1024], "detcurvedisplai": [254, 312, 711, 1020, 1021], "ax_roc": 254, "ax_det": 254, "feedback": [254, 370, 371, 372, 385, 986, 1016], "plot_det": [254, 273], "n_imag": 255, "print_datafram": 255, "filtered_cv_result": 255, "mean_precis": 255, "std_precis": 255, "mean_recal": 255, "std_recal": 255, "mean_test_precis": [255, 261], "std_test_precis": 255, "mean_test_recal": 255, "std_test_recal": 255, "03f": 255, "refit_strategi": 255, "best_index": [255, 261], "precision_threshold": 255, "high_precision_cv_result": 255, "mean_score_tim": [255, 258, 781, 795], "rank_test_recal": 255, "rank_test_precis": [255, 261], "best_recall_std": 255, "best_recal": 255, "best_recall_threshold": 255, "high_recall_cv_result": 255, "fastest_top_recall_high_precision_index": 255, "idxmin": 255, "063": [255, 257, 422], "069": 255, "039": [255, 735, 765, 966], "905": 255, "058": [255, 368], "889": [255, 270, 273, 422], "074": [255, 330, 340], "890": 255, "073": [255, 456, 457], "695": 255, "065": [255, 377], "028": 255, "744": [255, 277], "618": [255, 263, 273], "005528": 255, "877206": 255, "069196": 255, "0x7fd124887790": 255, "807": [255, 257], "plot_grid_search_digit": [255, 273], "minimis": [256, 396, 400, 643, 644, 982], "260": [256, 1021], "york": [256, 772, 779, 956, 966, 978], "usa": [256, 366, 880, 956, 963, 978, 979], "best_index_": [256, 261, 781, 784, 785, 795], "wenhao": [256, 1016, 1017], "zhang": [256, 396, 427, 649, 664, 670, 671, 674, 678, 742, 743, 962, 963, 964, 968, 980, 1012, 1013, 1015, 1016, 1017, 1018, 1020], "wenhaoz": 256, "ucla": [256, 962], "lower_bound": 256, "best_score_idx": 256, "best_low_complex": 256, "fewest": [256, 612], "candidate_idx": 256, "param_reduce_dim__n_compon": 256, "plot_grid_search_refit_cal": [256, 273], "moon": [257, 294, 301, 342, 343, 507], "moder": [257, 371, 406, 439, 972], "352": [257, 377], "repeatedstratifiedkfold": [257, 400, 796, 800, 1015], "repetit": [257, 376, 400, 796, 797, 974, 1022], "rank_test_scor": [257, 265, 781, 795, 1014], "rename_axi": 257, "9400": 257, "079297": 257, "9300": 257, "077846": 257, "3_poli": 257, "9044": [257, 1015], "098776": 257, "2_poli": 257, "6852": 257, "169106": 257, "certainti": [257, 373, 726, 966], "repreat": 257, "model_scor": [257, 275], "regex": [257, 344, 449, 451], "_test_scor": [257, 457, 579, 1021], "lineplot": 257, "labelpad": 257, "882561": 257, "783392": 257, "351390": 257, "746492": 257, "298688": 257, "355440": 257, "nadeau": [257, 1016], "bengio": [257, 840, 841, 955, 979], "framework": [257, 357, 373, 382, 384, 390, 396, 622, 673, 779, 962, 963, 970, 984, 987, 990, 1008, 1014], "diebold": 257, "mariano": 257, "proven": [257, 960, 964, 990], "replic": [257, 370, 373], "cdot": [257, 393, 396, 401, 402, 406, 599, 600, 604, 607, 608, 849, 958, 960, 966, 970, 976], "sum_": [257, 266, 337, 393, 394, 396, 401, 402, 403, 523, 525, 532, 681, 739, 960, 962, 963, 966, 968, 970, 971, 973, 974, 976, 980, 981, 982], "ij": [257, 287, 393, 396, 401, 523, 525, 532, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 962, 963, 966, 968, 971, 981], "corrected_std": 257, "crossvalid": [257, 271], "corrected_var": 257, "ddof": [257, 863, 874], "compute_corrected_ttest": 257, "t_stat": 257, "p_val": 257, "model_1_scor": 257, "model_2_scor": 257, "ncorrect": 257, "227": [257, 396, 709], "uncorrect": [257, 580, 583], "t_stat_uncorrect": 257, "p_val_uncorrect": 257, "convent": [257, 360, 371, 373, 374, 375, 377, 384, 414, 415, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 454, 455, 456, 457, 458, 459, 460, 461, 493, 494, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 532, 548, 551, 554, 555, 566, 567, 568, 573, 574, 576, 612, 613, 614, 615, 662, 673, 674, 675, 676, 703, 779, 780, 811, 812, 827, 829, 831, 835, 847, 855, 858, 859, 861, 875, 876, 887, 914, 915, 966, 993, 1008, 1015, 1016, 1019, 1021, 1022, 1024], "benavoli": 257, "colleagu": 257, "conjug": [257, 437, 447, 657, 659, 672, 680, 962], "overlin": [257, 393], "t_post": 257, "ppf": 257, "infin": [257, 526, 667, 668, 697, 804, 890, 902, 969], "minu": [257, 744, 966], "better_prob": 257, "cdf": 257, "773": [257, 342, 633, 821], "essenti": [257, 314, 369, 373, 396, 400, 401, 494, 958, 966, 969, 987, 990, 1016], "rope": 257, "rope_interv": 257, "rope_prob": 257, "432": [257, 398], "x_rope": 257, "uncertain": [257, 318, 370], "credibl": 257, "cred_interv": 257, "cred_int_df": 257, "000977": 257, "019023": 257, "005422": 257, "025422": 257, "016445": 257, "036445": 257, "bonferroni": 257, "n_comparison": 257, "pairwise_t_test": 257, "model_i": 257, "model_k": 257, "model_i_scor": 257, "model_k_scor": 257, "pairwise_comp_df": 257, "model_1": 257, "model_2": 257, "276": [257, 342], "851": 257, "pairwise_bayesian": 257, "worse_prob": 257, "pairwise_bayesian_df": 257, "018": [257, 457], "882": 257, "dietterich": [257, 813, 967], "1998": [257, 366, 368, 401, 403, 540, 541, 813, 818, 849, 967, 968, 970, 976, 980], "bouckaert": 257, "frank": [257, 814, 967, 1013, 1017, 1018], "pacif": 257, "asia": [257, 976], "confer": [257, 366, 396, 401, 407, 424, 429, 435, 496, 520, 548, 681, 693, 710, 740, 839, 840, 841, 966, 972, 978, 982], "discoveri": [257, 366, 377, 380, 396, 403, 405, 407, 429, 496, 540, 541, 548, 577, 580, 581, 583, 584, 585, 591, 705, 724, 767, 966, 978, 990, 1022, 1023], "corani": 257, "dem\u0161ar": 257, "zaffalon": 257, "accompani": [257, 1016], "1995": [257, 368, 394, 403, 538, 539, 813, 880, 967], "144": [257, 377, 1008], "plot_grid_search_stat": [257, 273], "loader": [258, 321, 342, 364, 365, 366, 483, 484, 493, 986, 987, 1001, 1008, 1013, 1015, 1016, 1019], "fetch20newsgroup": 258, "857": [258, 343], "complementnb": [258, 342, 818, 819, 821, 822, 968, 1016, 1020, 1021, 1023], "tfidfvectorizertfidfvector": 258, "complementnbcomplementnb": 258, "vect__": 258, "clf__": 258, "parameter_grid": 258, "vect__max_df": 258, "vect__min_df": 258, "vect__ngram_rang": [258, 1001], "unigram": [258, 366, 404, 573, 574, 576, 1015], "bigram": [258, 404, 573, 574, 576, 1001], "vect__norm": 258, "clf__alpha": [258, 1001], "exhaust": [258, 309, 310, 311, 312, 313, 314, 357, 368, 376, 383, 391, 396, 781, 784, 785, 795, 873, 874, 876, 962, 1001, 1003], "parallelis": [258, 453, 881, 1015], "random_search": [258, 265], "best_paramet": 258, "get_param": [258, 374, 384, 406, 410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 779, 780, 781, 784, 785, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 955, 1018, 1019, 1020, 1022, 1023], "param_nam": [258, 272, 337, 810, 961, 1001], "816": [258, 456, 457], "709": 258, "ambigu": [258, 376, 404, 557, 697, 920, 969, 1017, 1019, 1021], "shorten_param": 258, "plotli": [258, 371, 387, 389], "cursor": 258, "px": 258, "error_x": 258, "std_score_tim": [258, 781, 795], "error_i": 258, "hover_data": 258, "update_layout": 258, "xanchor": 258, "yanchor": 258, "autom": [258, 375, 387, 677, 955, 962, 963, 966, 986, 990], "parallel_coordin": 258, "understood": [258, 371, 396, 998], "column_result": 258, "transform_func": 258, "fromkei": [258, 898], "ngram_rang": [258, 321, 404, 573, 574, 576], "color_continuous_scal": 258, "viridis_r": 258, "slide": [258, 629, 962, 985, 986], "intersect": [258, 326, 393, 396, 722], "undo": [258, 853, 1012], "474": [258, 273], "plot_grid_search_text_feature_extract": [258, 273], "depict": [259, 403, 965], "score_typ": [259, 787], "ax_idx": 259, "resort": [259, 366, 540, 1018], "learning_curv": [259, 314, 787, 961, 1011, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023], "return_tim": [259, 807, 1018], "test_scores_nb": 259, "fit_times_nb": 259, "score_times_nb": 259, "test_scores_svm": 259, "fit_times_svm": 259, "score_times_svm": 259, "score_tim": [259, 400, 806, 807], "rapidli": [259, 981, 990, 995], "inflect": 259, "plot_learning_curv": [259, 273], "class_likelihood_ratio": [260, 966, 1023], "medicin": [260, 697, 966], "medic": [260, 400, 697, 962, 990], "truli": [260, 264, 359, 697, 966], "odd": [260, 403, 499, 697, 966, 1015, 1016], "suppos": [260, 317, 357, 358, 373, 377, 398, 403, 404, 405, 542, 546, 549, 643, 644, 651, 653, 659, 660, 661, 726, 829, 883, 885, 888, 891, 893, 909, 970, 1017, 1019], "physiolog": [260, 368, 999], "hopefulli": [260, 379, 1008], "indirect": [260, 372, 384], "bio": 260, "diagnos": [260, 368, 379, 386, 397], "diagnosi": [260, 368, 830], "pos_lr": 260, "neg_lr": 260, "raise_warn": [260, 697, 952], "positive_likelihood_ratio": [260, 697], "negative_likelihood_ratio": [260, 697], "extract_scor": 260, "test_positive_likelihood_ratio": 260, "test_negative_likelihood_ratio": 260, "718894": 260, "724619": 260, "321091": 260, "054054": 260, "dummyclassifi": [260, 537, 966, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018], "108843": 260, "986989": 260, "268147": 260, "034278": 260, "compat": [260, 277, 310, 365, 374, 380, 381, 382, 384, 387, 404, 448, 454, 493, 551, 562, 570, 571, 574, 588, 599, 600, 603, 604, 605, 607, 608, 617, 618, 619, 643, 644, 658, 660, 758, 762, 782, 783, 786, 788, 789, 790, 791, 794, 796, 797, 798, 799, 800, 801, 802, 827, 828, 848, 856, 857, 895, 896, 899, 929, 963, 966, 969, 971, 986, 987, 990, 1003, 1008, 1011, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "diagnost": [260, 364, 384, 485, 697, 805, 806, 966, 986, 987, 1003], "most_frequ": [260, 536, 612, 615, 833, 956, 966, 1016, 1018, 1020], "undefin": [260, 384, 697, 713, 722, 725, 767, 935, 966, 1016, 1020, 1024], "373333": 260, "5557": 260, "235430": 260, "stand": [260, 344, 375, 382, 401, 516, 522, 530, 531, 581, 594, 663, 690, 702, 720, 721, 741, 770, 772, 777, 965, 966, 972], "lr_base": 260, "pos_lr_bas": 260, "pos_lr_base_std": 260, "neg_lr_bas": 260, "neg_lr_base_std": 260, "plot_indic": 260, "scoring_on_bootstrap": 260, "n_bootstrap": [260, 1009], "results_for_preval": 260, "bootstrap_indic": 260, "default_rng": 260, "2039": 260, "507943": 260, "113516": 260, "207667": 260, "009778": 260, "3419": 260, "445329": 260, "125197": 260, "198280": 260, "008907": 260, "422287": 260, "123864": 260, "192630": 260, "006340": 260, "6196": [260, 1013], "410507": 260, "163975": 260, "193761": 260, "005864": 260, "7578": [260, 1015], "335398": 260, "175224": 260, "189120": 260, "005820": 260, "8963": 260, "198284": 260, "238943": 260, "185496": 260, "005020": 260, "band": [260, 301, 976], "381": [260, 273, 317, 323], "plot_likelihood_ratio": [260, 273], "scorer_nam": [261, 781, 795], "predefin": [261, 794, 955, 969, 996, 1023], "403": 261, "return_train_scor": [261, 305, 400, 781, 784, 785, 795, 806, 1014, 1015, 1017], "402": 261, "73": [261, 318, 383, 781, 795, 829, 892, 976, 997, 1008, 1010], "maskedarrai": [261, 1014], "param_min_samples_split": 261, "sample_score_mean": 261, "sample_score_std": 261, "std_": [261, 1013], "rank_test_": 261, "best_scor": 261, "mean_test_": 261, "704": [261, 273, 342], "plot_multi_metric_evalu": [261, 273], "cawlei": [262, 966], "talbot": 262, "mach": [262, 394, 400, 578, 579], "2079": 262, "2107": 262, "007581": 262, "007833": 262, "num_trial": 262, "x_iri": [262, 1000], "y_iri": [262, 1000], "p_grid": 262, "non_nested_scor": 262, "nested_scor": 262, "leaveoneout": [262, 400, 996], "leaveonegroupout": [262, 400, 782, 789, 790, 996, 1014], "inner_cv": 262, "outer_cv": 262, "non_nest": 262, "score_differ": 262, "non_nested_scores_lin": 262, "nested_lin": 262, "difference_plot": 262, "539": [262, 273], "plot_nested_cross_validation_iri": [262, 273], "permutation_test_scor": [263, 400, 1008, 1015, 1020], "plant": [263, 266, 267, 364, 966, 1003], "uncorrel": [263, 367, 513, 519, 526, 966, 999], "n_uncorrelated_featur": 263, "x_rand": 263, "undergo": 263, "score_iri": 263, "perm_scores_iri": 263, "pvalue_iri": 263, "n_permut": [263, 400, 808], "score_rand": 263, "perm_scores_rand": 263, "pvalue_rand": 263, "evid": [263, 342, 379, 396, 400, 401, 403, 629, 779, 965], "ndata": 263, "destroi": [263, 404, 777, 852, 976], "ojala": [263, 400, 808], "garriga": [263, 400, 808], "plot_permutation_tests_for_classif": [263, 273], "t_p": 264, "plu": [264, 368, 376, 664, 814, 817, 967, 980], "f_p": 264, "f_n": 264, "denomin": [264, 404, 409, 460, 575, 689, 741, 960], "stairstep": 264, "ap": [264, 692, 693, 966], "sum_n": [264, 692, 966], "r_n": [264, 692, 966], "p_n": [264, 692, 966], "nth": [264, 692, 966], "r_k": 264, "p_k": [264, 966], "trapezoid": [264, 691, 692, 966], "binar": [264, 266, 267, 363, 365, 395, 397, 738, 818, 847, 848, 850, 854, 856, 867, 966, 968, 992, 1003, 1022, 1024], "average_precision_scor": [264, 691, 693, 726, 766, 772, 966, 1008, 1011, 1015, 1016, 1022, 1024], "differenti": [264, 403, 406, 544, 545, 604, 607], "mt19937": [264, 269, 1019], "0x7fd13d69de40": 264, "precisionrecalldisplai": [264, 312, 766, 768, 771, 1018, 1021, 1024], "got": [264, 353, 376, 536, 634, 650, 1021, 1023], "label_binar": [264, 266, 850, 1012], "average_precis": [264, 685, 692, 726, 966], "prevalence_pos_label": [264, 685], "setup": [264, 266, 357, 369, 373, 377, 379, 969, 993], "f_score": 264, "extens": [264, 266, 282, 357, 358, 365, 366, 369, 372, 374, 375, 379, 380, 382, 390, 396, 401, 481, 488, 519, 725, 914, 922, 963, 965, 966, 985, 986, 990, 1008, 1014, 1021, 1022, 1024], "plot_precision_recal": [264, 273], "pose": [265, 962, 1000], "deem": [265, 266, 519, 974, 1021], "993": 265, "01761326452827255": 265, "14458295175799263": 265, "981": [265, 323, 368, 966], "015": [265, 347, 974], "2610311314285183": 265, "003999234857448686": 265, "980": 265, "01672701940764589": 265, "5720620992012775": 265, "6666666666666666": 265, "2222222222222222": 265, "1111111111111111": 265, "n_top": 265, "param_dist": [265, 269, 311], "n_iter_search": 265, "049": [265, 273, 456], "plot_randomized_search": [265, 273], "unambigu": [266, 967, 1014], "notion": [266, 343, 359, 382, 396, 401, 403, 962, 966], "scheme": [266, 282, 305, 366, 384, 396, 400, 402, 404, 551, 575, 643, 644, 690, 794, 850, 851, 854, 856, 860, 864, 867, 872, 883, 888, 955, 962, 976, 980, 1008, 1016, 1019, 1020], "harder": [266, 267, 303, 366, 370, 373, 379, 396, 500, 546, 547, 989], "bulk": [266, 407, 429], "scrutin": 266, "y_onehot_test": 266, "class_id": [266, 267], "class_of_interest": 266, "nvirginica": 266, "versicolor": [266, 267, 489], "tp_c": 266, "fn_c": 266, "fp_c": 266, "tn_c": 266, "briefli": [266, 370, 383, 403, 955, 1018], "nreceiv": 266, "micro_roc_auc_ovr": 266, "mcclish": [266, 772], "deci": 266, "1989": [266, 620, 772, 840, 841, 962, 969], "jul": 266, "fpr_grid": 266, "mean_tpr": [266, 267], "interp": [266, 267, 329], "macro_roc_auc_ovr": 266, "deeppink": 266, "aqua": 266, "role": [266, 357, 370, 382, 401, 984], "pair_list": 266, "pair_scor": 266, "label_a": 266, "label_b": 266, "a_mask": 266, "b_mask": 266, "ab_mask": 266, "a_tru": 266, "b_true": 266, "idx_a": 266, "idx_b": 266, "fpr_a": 266, "tpr_a": 266, "fpr_b": 266, "tpr_b": 266, "macro_roc_auc_ovo": 266, "ovo_tpr": 266, "pool": [266, 382, 430, 620, 935, 987, 1019], "plot_roc": [266, 273], "mean_fpr": 267, "viz": [267, 378], "interp_tpr": 267, "mean_auc": 267, "std_auc": 267, "std_tpr": 267, "tprs_upper": 267, "tprs_lower": 267, "plot_roc_crossv": [267, 273], "halvinggridsearchcv": [268, 269, 311, 564, 785, 955, 1020, 1022, 1023], "1e4": [268, 644, 664, 877, 978], "gsh": 268, "gsh_time": 268, "gs_time": 268, "make_heatmap": 268, "is_sh": 268, "make_cbar": 268, "param_c": [268, 781], "param_gamma": [268, 781, 795], "sh": [268, 375, 379, 955], "scores_matrix": 268, "pivot_t": 268, "aggfunc": 268, "0e": [268, 534, 535], "get_xticklabel": 268, "rotation_mod": 268, "cbar_ax": 268, "135": [268, 273, 314, 368], "plot_successive_halving_heatmap": [268, 273], "rsh": [269, 311], "0x7fd1350a6540": 269, "_distn_infrastructur": 269, "rv_discrete_frozen": 269, "0x7fd112e179a0": 269, "0x7fd112a8d280": 269, "halvingrandomsearchcvhalvingrandomsearchcv": 269, "params_str": 269, "drop_dupl": 269, "n_resources_": [269, 784, 785, 955], "nn_candid": 269, "n_candidates_": [269, 784, 785, 955], "n_iterations_": [269, 784, 785], "multialign": 269, "plot_successive_halving_iter": [269, 273], "n_samples_train": [270, 885, 886, 887, 888, 889], "n_samples_test": [270, 885, 886, 887, 888, 889, 969, 976], "train_error": 270, "test_error": 270, "i_alpha_optim": 270, "alpha_optim": 270, "0002652948464431897": 270, "plot_train_error_vs_test_error": [270, 273], "nonlinear": [271, 312, 629, 673, 674, 678, 681, 849, 962, 963, 971, 976], "true_fun": 271, "polynomial_featur": 271, "plot_underfitting_overfit": [271, 273], "validation_curv": [272, 337, 961, 1015, 1016, 1017, 1020], "subset_mask": 272, "isin": 272, "param_rang": [272, 337, 810, 961], "train_scores_mean": 272, "train_scores_std": 272, "test_scores_mean": 272, "test_scores_std": 272, "634": [272, 273], "plot_validation_curv": [272, 273], "471": [273, 368], "auto_examples_model_select": 273, "yeast": 275, "2417": 275, "jaccard": [275, 393, 435, 442, 684, 688, 704, 713, 718, 722, 762, 763, 764, 778, 969, 1016, 1017], "arrang": [275, 617, 814, 815, 816, 817, 966], "adam": [275, 294, 840, 841, 970, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023], "kleczewski": [275, 1015, 1016], "classifierchain": [275, 384, 815, 817, 1015, 1020, 1023], "jaccard_scor": [275, 688, 713, 718, 778, 966, 1017, 1020], "40597": 275, "wrapper": [275, 277, 377, 380, 400, 406, 529, 605, 656, 883, 982, 986, 1012, 1020], "base_lr": [275, 814], "y_pred_ovr": 275, "ovr_jaccard_scor": 275, "y_pred_chain": 275, "chain_jaccard_scor": 275, "y_pred_ensembl": 275, "ensemble_jaccard_scor": 275, "x_po": 275, "plot_classifier_chain_yeast": [275, 276], "auto_examples_multioutput": 276, "kneighborstransform": [277, 279, 309, 835, 969, 1018, 1022, 1023], "nmslib": 277, "pynndesc": 277, "pip": [277, 309, 310, 311, 312, 313, 314, 358, 369, 371, 375, 377, 387, 982], "pynndescenttransform": 277, "csr_matrix": [277, 310, 425, 429, 437, 481, 519, 529, 542, 543, 544, 545, 548, 549, 550, 551, 573, 578, 579, 699, 809, 858, 885, 886, 888, 889, 891, 892, 893, 894, 967, 976, 980, 981, 982, 1023], "transformermixin": [277, 373, 384, 450, 1016, 1023, 1024], "nmslibtransform": 277, "sw": 277, "n_samples_fit_": [277, 825, 826, 827, 829, 831, 833, 834, 835], "cosinesimil": 277, "nmslib_": 277, "adddatapointbatch": 277, "createindex": 277, "n_samples_transform": [277, 827, 835], "thread": [277, 310, 313, 369, 382, 384, 396, 403, 815, 816, 932, 933, 934, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1024], "num_thread": 277, "knnquerybatch": 277, "mnist_10000": 277, "mnist_20000": 277, "20_000": 277, "tsne_param": 277, "barnes_hut": [277, 677, 1015, 1016], "parallel_batch_queri": 277, "msg": [277, 950], "transformer_nam": 277, "longest": 277, "fit_dur": 277, "transform_dur": 277, "823": 277, "884": 277, "769": 277, "077": 277, "448": 277, "numba": [277, 987], "cold": 277, "nearestneighbor": [277, 313, 387, 396, 407, 429, 431, 433, 446, 673, 674, 678, 825, 826, 827, 829, 833, 834, 835, 969, 1008, 1012, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "i_ax": 277, "int32": [277, 306, 371, 384, 428, 432, 434, 436, 438, 885, 886, 887, 888, 889, 931, 981, 1017, 1023, 1024], "828": 277, "955": [277, 400, 639], "994": 277, "brute": [277, 382, 391, 400, 407, 429, 431, 435, 442, 617, 618, 673, 674, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 973, 1003, 1012, 1016, 1020, 1023, 1024], "spent": [277, 305, 372, 377, 807, 1023], "approximate_nearest_neighbor": [277, 291], "slow": [279, 299, 342, 357, 365, 369, 371, 401, 404, 432, 684, 857, 858, 862, 885, 888, 920, 963, 969, 987, 1000, 1015], "temporarydirectori": [279, 309], "n_neighbors_list": 279, "graph_model": 279, "classifier_model": 279, "sklearn_graph_cache_": 279, "tmpdir": [279, 309], "full_model": 279, "classifier__n_neighbor": 279, "grid_model": 279, "mean_fit_tim": [279, 781, 795], "std_fit_tim": [279, 781, 795], "plot_caching_nearest_neighbor": [279, 291], "cmap_light": [280, 285, 288], "cmap_bold": [280, 285, 288], "darkblu": [280, 288], "neighbour": [280, 431, 447, 677, 971], "622": [280, 291, 526], "plot_classif": [280, 291], "79269019073225": 281, "kerneldens": [281, 282, 290, 402, 1010, 1016, 1017, 1021, 1022, 1023], "new_data": [281, 373], "4x11": 281, "real_data": 281, "set_clim": 281, "686": [281, 283, 291], "plot_digits_kde_sampl": [281, 291], "block": [282, 299, 313, 366, 368, 371, 376, 379, 384, 393, 396, 399, 402, 437, 438, 447, 458, 464, 465, 473, 474, 496, 498, 680, 934, 969, 971], "wildli": [282, 965], "kd": [282, 396, 402, 969, 1016, 1017, 1018], "jakevdp": [282, 290], "aaaaff": [282, 285], "tophat": [282, 402, 823, 824, 828], "log_den": 282, "x_src": 282, "format_func": 282, "ih": 282, "epanechnikov": [282, 402, 823, 824, 828], "funcformatt": 282, "nullloc": 282, "true_den": 282, "682": [282, 291, 377], "plot_kde_1d": [282, 291], "NOT": [283, 368, 374, 791, 823, 824], "plot_lof_novelty_detect": [283, 291], "x_inlier": 284, "n_error": 284, "x_score": [284, 467, 468, 469, 470], "legend_handl": 284, "handlerpathcollect": 284, "update_legend_marker_s": 284, "update_from": 284, "set_siz": 284, "radiu": [284, 329, 368, 396, 427, 435, 673, 748, 765, 823, 824, 825, 826, 827, 831, 833, 834, 835, 837, 969, 1010, 1012, 1022], "handler_map": 284, "update_func": 284, "101": [284, 291, 368, 829, 1009], "plot_lof_outlier_detect": [284, 291], "ffaaaa": 285, "aaffaa": 285, "00ff00": 285, "plot_nca_classif": [285, 291], "neighborhoodcomponentanalysi": 286, "dim_reduction_method": 286, "acc_knn": 286, "x_embed": [286, 287, 677, 681, 832, 969], "ntest": 286, "plot_nca_dim_reduct": [286, 291], "logsumexp": [287, 1015], "get_yaxi": [287, 299], "link_thickness_i": 287, "diff_embed": 287, "dist_embed": 287, "einsum": 287, "exp_dist_embed": 287, "relate_point": 287, "pt_i": 287, "pt_j": 287, "plot_nca_illustr": [287, 291], "8133333333333334": 288, "nearestcentroid": [288, 342, 967, 969, 1008, 1012, 1015, 1020, 1023], "shrink_threshold": [288, 830, 969, 1008, 1020], "plot_nearest_centroid": [288, 291], "barycent": [289, 1008], "plot_regress": [289, 291], "geospati": [290, 402], "haversin": [290, 402, 684, 746, 748, 969, 1017, 1020], "latitud": [290, 299, 366, 483, 684, 748], "longitud": [290, 299, 366, 483, 684, 748], "xtrain": 290, "ytrain": 290, "radian": [290, 684, 748], "land_mask": 290, "ball_tre": [290, 407, 429, 435, 442, 673, 674, 825, 826, 827, 828, 829, 831, 833, 834, 835, 969, 1008], "ocean": 290, "525": [290, 291, 424, 613, 956], "plot_species_kd": [290, 291], "auto_examples_neighbor": 291, "combat": [293, 401], "encourag": [293, 329, 370, 371, 382, 981, 986], "lesser": [293, 384, 427, 526, 962], "curvatur": 293, "complic": [293, 377, 406, 679, 969], "plot_mlp_alpha": [293, 297], "bfg": [294, 595, 596, 633, 634, 643, 654, 657, 659, 665, 672, 969, 970, 1023], "980000": 294, "096950": 294, "momentum": [294, 840, 841, 970], "049530": 294, "nesterov": [294, 840, 841, 970], "049540": 294, "360000": 294, "978444": 294, "860000": 294, "503452": 294, "504185": 294, "045311": 294, "956038": 294, "243802": 294, "992766": 294, "041297": 294, "993879": 294, "042898": 294, "638843": 294, "855465": 294, "912632": 294, "290584": 294, "909293": 294, "318387": 294, "991653": 294, "045934": 294, "840000": 294, "601052": 294, "940000": 294, "157334": 294, "154453": 294, "500000": 294, "692470": 294, "689143": 294, "689751": 294, "150527": 294, "850000": 294, "341523": 294, "336188": 294, "335919": 294, "689015": 294, "830000": 294, "512595": 294, "513034": 294, "930000": 294, "170087": 294, "schedul": [294, 358, 661, 662, 663, 840, 841, 934, 980, 990, 1015], "nesterovs_momentum": [294, 840, 841], "invscal": [294, 661, 662, 663, 840, 841, 980], "plot_arg": 294, "plot_on_dataset": 294, "nlearn": 294, "loss_": [294, 544, 840, 841, 970, 1022], "loss_curve_": [294, 840, 841], "data_set": 294, "get_lin": 294, "plot_mlp_training_curv": [294, 297], "28x28": 295, "784": 295, "throw": [295, 380, 902, 1012, 1015, 1016, 1017, 1018, 1022], "infrastructur": [295, 984, 986, 987], "44139186": 295, "19174891": 295, "13983521": 295, "11378556": 295, "09443967": 295, "07846529": 295, "06506307": 295, "05534985": 295, "986429": 295, "953061": 295, "552": [295, 297], "plot_mnist_filt": [295, 297], "greyscal": 296, "bernoulli": [296, 404, 405, 818, 819, 820, 821, 822, 839, 840, 841, 846, 962, 976, 988, 1003, 1008], "bernoullirbm": [296, 840, 841, 971, 976, 1010, 1011, 1020, 1022], "yann": [296, 1008, 1010], "dauphin": [296, 1010], "gabriel": [296, 1016, 1017, 1018, 1021, 1022], "synnaev": 296, "convolv": 296, "minmax_scal": [296, 299, 853, 1013, 1016], "nudge_dataset": 296, "1px": 296, "direction_vector": 296, "apply_along_axi": 296, "feature_rang": [296, 853, 869, 976, 1010, 1020], "cg": [296, 643, 644, 657, 659, 672, 962, 1012, 1013, 1015, 1019, 1021, 1022], "rbm": [296, 839, 840, 841, 971], "rbm_features_classifi": 296, "6000": [296, 612], "raw_pixel_classifi": 296, "plot_rbm_logistic_classif": [296, 297], "auto_examples_neural_network": 297, "incom": [299, 366, 425], "unscal": [299, 304, 962, 966, 1016, 1022], "notabl": [299, 365, 384, 481, 712, 856, 963, 965, 969, 1012, 1015, 1022], "unterthin": [299, 1011, 1012, 1013], "medinc": [299, 311, 366], "houseag": [299, 311, 366], "averoom": [299, 311, 366], "room": [299, 366, 376, 396, 989], "avebedrm": [299, 366], "bedroom": [299, 366], "aveoccup": [299, 311, 366], "features_idx": 299, "quantile_rang": [299, 861, 873, 1014], "yeo": [299, 303, 859, 871, 976, 1016, 1022], "cox": [299, 303, 859, 871, 976, 1016], "plasma": 299, "plasma_r": 299, "create_ax": 299, "bottom_h": 299, "left_h": 299, "rect_scatt": 299, "rect_histx": 299, "rect_histi": 299, "ax_scatt": 299, "ax_histx": 299, "ax_histi": 299, "ax_scatter_zoom": 299, "ax_histx_zoom": 299, "ax_histy_zoom": 299, "rect_colorbar": 299, "ax_colorbar": 299, "plot_distribut": 299, "hist_nbin": 299, "x0_label": 299, "x1_label": 299, "hist_x1": 299, "hist_x0": 299, "aesthet": [299, 982, 1013], "layout": [299, 382, 883, 884, 885, 888, 904, 981, 1011, 1013], "tick_bottom": 299, "tick_left": 299, "outward": 299, "ec": [299, 515], "make_plot": 299, "item_idx": 299, "ax_zoom_out": 299, "ax_zoom_in": 299, "zoom_in_percentile_rang": 299, "cutoffs_x0": 299, "cutoffs_x1": 299, "non_outliers_mask": 299, "colorbarbas": 299, "OR": [299, 396, 407, 429, 1019], "indistinguish": 299, "quadrant": 299, "801": [299, 307], "plot_all_sc": [299, 307, 852, 853, 855, 859, 860, 861, 863, 868, 869, 870, 871, 872, 873, 874], "straightforward": [300, 370, 401, 990], "anywher": 300, "qinhanmin2005": 300, "sina": [300, 1021], "rnd": 300, "enc": [300, 302, 313, 856, 857, 976], "x_bin": 300, "line_bin": 300, "plot_discret": [300, 307], "get_nam": 301, "broader": [301, 962], "logisticregression__c": 301, "linearsvc__c": 301, "kbinsdiscretizer__n_bin": 301, "gradientboostingclassifier__learning_r": 301, "svc__c": 301, "cm_piyg": 301, "piyg": 301, "b30065": 301, "178000": 301, "est_idx": 301, "582": [301, 307, 884], "plot_discretization_classif": [301, 307], "centers_0": 302, "centers_1": 302, "x_list": 302, "grid_encod": 302, "stripe": 302, "720": [302, 307], "plot_discretization_strategi": [302, 307], "powertransform": [303, 860, 871, 956, 976, 1016, 1019, 1022, 1024], "johnwon": 303, "weibul": 303, "bimod": [303, 402], "ineffect": [303, 976, 1016, 1017], "eric": [303, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "ericchang2017": 303, "northwestern": [303, 643], "contact": [303, 382, 986], "font_siz": 303, "bc": 303, "qt": [303, 860], "x_lognorm": [303, 976], "x_chisq": 303, "chisquar": 303, "x_weibul": 303, "x_gaussian": 303, "x_uniform": 303, "loc_a": 303, "loc_b": 303, "x_a": 303, "x_b": 303, "x_bimod": 303, "d81b60": 303, "0188ff": 303, "ffc107": 303, "b7a2ff": 303, "2ec5ac": 303, "figaspect": 303, "axes_idx": 303, "axes_list": 303, "x_trans_bc": 303, "lmbda_bc": 303, "lambdas_": [303, 859, 1021], "x_trans_yj": 303, "lmbda_yj": 303, "x_trans_qt": 303, "ax_origin": 303, "ax_bc": 303, "ax_yj": 303, "ax_qt": 303, "x_tran": [303, 373, 392, 427, 449, 859, 864, 871, 976], "meth_nam": 303, "lmbda": 303, "plot_map_data_to_norm": [303, 307], "involv": [304, 309, 329, 357, 359, 366, 371, 375, 384, 385, 399, 406, 684, 811, 812, 963, 967, 969, 973, 981, 986, 990, 999, 1016], "kneighbor": [304, 313, 825, 826, 827, 829, 831, 969, 1012, 1017, 1021, 1022, 1023, 1024], "obatin": 304, "tyler": [304, 1015, 1021, 1022, 1023], "lanigan": [304, 1015], "tylerlanigan": 304, "sebastian": [304, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "raschka": [304, 1013, 1014, 1015, 1016, 1017, 1020], "sebastianraschka": 304, "alcohol": [304, 368], "malic": [304, 368], "acid": [304, 368], "scaled_x_train": 304, "x_plot_scal": 304, "fit_and_plot_model": 304, "scaled_pca": 304, "x_train_transform": [304, 353, 400], "x_train_std_transform": 304, "first_pca_compon": 304, "target_class": 304, "repercuss": 304, "logisticregressioncv": [304, 384, 643, 962, 967, 1012, 1013, 1014, 1016, 1017, 1018, 1022, 1023], "unscaled_clf": 304, "scaled_clf": 304, "y_pred_scal": 304, "y_proba_sc": 304, "0824": 304, "vastli": 304, "545": [304, 307], "plot_scaling_import": [304, 307], "targetencod": [305, 306, 856, 857, 976, 1024], "review": [305, 357, 366, 373, 374, 375, 376, 377, 382, 385, 400, 401, 520, 526, 966, 976, 993], "wine_review": 305, "42074": 305, "countri": [305, 963], "provinc": 305, "region_1": 305, "region_2": 305, "wineri": 305, "tremend": [305, 403], "variet": 305, "hail": 305, "martha": 305, "vineyard": 305, "napa": 305, "vallei": 305, "cabernet": 305, "sauvignon": 305, "heitz": 305, "spain": 305, "ripe": 305, "aroma": 305, "blackberri": 305, "cassi": 305, "carodorum": 305, "selecci\u00f3n": 305, "reserva": 305, "northern": 305, "toro": 305, "tinta": 305, "bodega": 305, "carmen": 305, "rodr\u00edguez": 305, "watson": [305, 397, 986], "honor": 305, "late": [305, 359], "harvest": 305, "knight": 305, "sonoma": 305, "blanc": 305, "macaulei": 305, "oak": 305, "reserv": [305, 546, 547, 990, 992], "oregon": 305, "willamett": 305, "pinot": 305, "noir": 305, "ponzi": 305, "franc": [305, 748], "b\u00e9gude": 305, "aft": [305, 1011], "br\u00fblade": 305, "provenc": 305, "bandol": 305, "one_hot": 305, "max_categori": [305, 313, 856, 857, 976, 1022, 1024], "target_typ": [305, 864, 907, 929], "evaluate_model_and_stor": 305, "rmse_test_scor": 305, "rmse_train_scor": 305, "rmse_test_mean": 305, "rmse_test_std": 305, "rmse_train_mean": 305, "rmse_train_std": 305, "nuniqu": 305, "14810": 305, "1236": 305, "632": 305, "workaround": [305, 371, 781, 795], "high_cardinality_featur": 305, "low_cardinality_featur": 305, "mixed_encoded_preprocessor": 305, "high_cardin": 305, "low_cardin": 305, "mixed_pip": 305, "passthroughpassthroughhigh_cardinalityindex": 305, "targetencodertargetencod": 305, "low_cardinalityindex": 305, "mixed_target": 305, "name_to_color": 305, "rmse_": 305, "_mean": 305, "_std": 305, "explod": 305, "unrel": [305, 358, 376, 379, 404, 500], "756": [305, 307], "plot_target_encod": [305, 307], "targetenocod": 306, "50_000": [306, 343], "n_categori": [306, 819, 857, 976], "kbin": [306, 314], "x_inform": 306, "permuted_categori": 306, "x_shuffl": 306, "catastroph": [306, 747, 987], "x_near_unique_categori": 306, "assembl": [306, 344, 843], "near_uniqu": 306, "raw_model": 306, "0049896314219657345": 306, "00457762158159003": 306, "model_with_cv": 306, "8000184677460285": 306, "7927845601690948": 306, "coefs_cv": 306, "target_encod": 306, "x_train_no_cv_encod": 306, "x_test_no_cv_encod": 306, "model_no_cv": 306, "858486250088675": 306, "6338211367110066": 306, "coefs_no_cv": 306, "plot_target_encoder_cross_v": [306, 307], "auto_examples_preprocess": 307, "announc": [309, 310, 311, 312, 313, 314, 375], "bug": [309, 310, 311, 312, 313, 314, 360, 369, 373, 374, 376, 379, 382, 384, 984, 987, 1008, 1009, 1010, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "latest": [309, 310, 311, 312, 313, 314, 369, 371, 375, 377, 379, 385, 982, 984, 1022], "upgrad": [309, 310, 311, 312, 313, 314, 387, 987, 1008, 1013, 1016], "conda": [309, 310, 311, 312, 313, 314, 358, 371, 372, 374, 375, 377, 379, 387, 389, 982], "forg": [309, 310, 311, 312, 313, 314, 358, 372, 374, 375, 379, 387], "plot_roc_curv": [309, 1018, 1020], "plot_precision_recall_curv": [309, 1018, 1020, 1021], "stackingclassifi": [309, 353, 403, 553, 1018, 1019, 1020, 1021, 1022, 1023], "_class": [309, 966], "9473684210526315": 309, "radiusneighborstransform": [309, 827, 969, 1018, 1020, 1022, 1023], "sklearn_cache_": 309, "isomap__n_neighbor": 309, "nan_euclidean_dist": [309, 746, 956, 1018], "ccp_alpha": [309, 347, 542, 543, 544, 545, 549, 550, 891, 892, 893, 894, 982, 1018], "tree_": [309, 347, 351, 828, 891, 892, 893, 894], "node_count": [309, 347, 351, 891, 892, 893, 894], "check_estim": [309, 373, 384, 915, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023], "pytest": [309, 358, 369, 371, 373, 374, 387, 389, 914, 915, 1018, 1021], "estimator_check": [309, 373, 384, 1015, 1016, 1018, 1019, 1022, 1023, 1024], "parametrize_with_check": [309, 373, 914, 1018, 1019], "test_sklearn_compatible_estim": [309, 915], "ovo": [309, 772, 811, 885, 888, 966, 967, 981], "preval": [309, 384, 685, 697, 966], "decision_function_shap": [309, 338, 885, 888, 981, 1013, 1014, 1017, 1018], "9950666666666667": 309, "444": [309, 315], "plot_release_highlights_0_22_0": [309, 315], "await": 310, "lam": [310, 311, 1019], "35776189065725783": 310, "42425183539869404": 310, "openmp": [310, 369, 374, 382, 384, 396, 403, 934, 1019, 1021, 1024], "7091072911505114": 310, "10k": [310, 432], "monotoinc": 310, "gbdt_cst": 310, "999791942438998": 310, "plot_release_highlights_0_23_0": [310, 315], "art": [311, 377, 634, 677, 986, 990], "footprint": [311, 314, 357, 359, 396, 401, 540, 541, 548, 1010, 1013, 1014, 1019, 1020, 1023], "yarowski": [311, 880, 979], "selftrainingclassifi": [311, 320, 321, 322, 979, 1020], "random_unlabeled_point": [311, 878, 879, 880], "self_training_model": [311, 880], "base_estim": [311, 373, 394, 422, 538, 539, 540, 541, 656, 814, 817, 880, 955, 962, 1019, 1021, 1022, 1023, 1024], "selftrainingclassifierselftrainingclassifi": 311, "7336": 311, "linear_baselin": 311, "7137": 311, "decisiontreeregressordecisiontreeregressor": 311, "effort": [311, 371, 377, 986, 990, 1019, 1021], "plot_release_highlights_0_24_0": [311, 315], "l2_regular": [312, 403, 546, 547], "max_bin": [312, 313, 403, 546, 547], "typeerror": [312, 376, 696, 907, 950, 1015, 1016, 1019, 1021], "quantileregressor": [312, 962, 966, 1021, 1022, 1023], "min_": [312, 396, 403, 853, 962, 976, 980, 981, 982], "sum_i": [312, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 957, 958, 962, 964, 966, 971], "pb_q": [312, 962], "_1": [312, 398, 401, 404, 516, 522, 523, 525, 530, 531, 532, 631, 632, 637, 638, 639, 640, 641, 645, 646, 647, 648, 666, 667, 668, 669, 750, 962, 964, 966, 981], "get_feature_nam": [312, 1016, 1017, 1019, 1020, 1021], "pet": [312, 772, 966], "dog": [312, 313, 567, 767, 864, 976], "fish": 312, "pet_cat": 312, "pet_dog": 312, "pet_fish": 312, "plot_": [312, 387], "017": [312, 315, 343, 377, 456, 457], "plot_release_highlights_1_0_0": [312, 315], "x_1d": 313, "hist_quantil": 313, "log_reg_input_featur": 313, "gather": [313, 379, 385, 395, 396, 976, 990], "min_frequ": [313, 856, 857, 976, 1022, 1024], "rabbit": [313, 976], "snake": [313, 567, 864, 976], "infrequent_categories_": [313, 856, 857, 864, 976], "x0_cat": [313, 976], "x0_rabbit": [313, 976], "x0_infrequent_sklearn": [313, 976], "refactor": [313, 1008, 1010, 1011, 1012, 1018, 1021, 1022, 1023], "radius_neighbor": [313, 831, 833, 834, 835, 1012, 1017, 1018, 1020, 1021, 1022, 1023], "summari": [313, 353, 368, 382, 677, 698, 896, 964, 967, 986, 1001], "pairwise_distances_argmin_min": [313, 763, 1011, 1016, 1022, 1023, 1024], "radiusneighborsclassifi": [313, 825, 826, 831, 834, 967, 969, 1008, 1010, 1014, 1016, 1018, 1020, 1021, 1022, 1023, 1024], "radiusneighborsregressor": [313, 825, 826, 831, 833, 969, 1008, 1010, 1016, 1018, 1020, 1021, 1022, 1023, 1024], "trustworthi": [313, 1016, 1017, 1022, 1023, 1024], "labelpropag": [313, 319, 879, 880, 967, 979, 1009, 1014, 1015, 1018, 1019, 1020, 1022, 1023, 1024], "labelspread": [313, 317, 318, 319, 321, 322, 878, 880, 967, 979, 1009, 1014, 1015, 1018, 1019, 1022, 1023, 1024], "blog": [313, 357, 371, 377, 379, 385, 1019], "cython": [313, 357, 358, 360, 369, 371, 374, 380, 382, 387, 389, 392, 396, 403, 493, 976, 977, 980, 981, 986, 987, 1008, 1011, 1012, 1014, 1020, 1023, 1024], "readili": [313, 401, 982, 990], "true_w": 313, "true_h": 313, "x_reconstruct": [313, 467, 468, 469, 568], "00364": 313, "divis": [313, 396, 404, 575, 576, 579, 697, 698, 713, 714, 722, 730, 767, 768, 771, 966, 1000, 1012, 1016, 1017, 1020, 1024], "repeatedli": [313, 353, 384, 396, 403, 406, 493, 531, 651, 652, 661, 662, 663, 765, 956, 970, 996], "bisect_km": 313, "plot_release_highlights_1_1_0": [313, 315], "video": [314, 360, 365, 374, 488, 967, 990, 993], "sepal_col": 314, "petal_col": 314, "x_out": [314, 847, 856, 857], "114": [314, 1008], "052506": 314, "592373": 314, "189830": 314, "973554": 314, "416010": 314, "630382": 314, "107": [314, 396, 878, 967, 1010], "765012": 314, "362176": 314, "021849": 314, "788808": 314, "hist_no_interact": 314, "liac": [314, 365, 371, 481, 1023, 1024], "arff": [314, 371, 481, 1020, 1023, 1024], "ticket": [314, 371], "cabin": 314, "boat": 314, "allen": [314, 1011, 1013, 1015, 1018], "elisabeth": 314, "walton": 314, "24160": 314, "3375": 314, "b5": 314, "loui": [314, 1013, 1014, 1018, 1020, 1022], "mo": [314, 1019], "allison": 314, "hudson": 314, "9167": 314, "113781": 314, "5500": [314, 673, 963], "c22": 314, "c26": 314, "montreal": 314, "pq": 314, "chestervil": 314, "ON": 314, "helen": 314, "lorain": 314, "joshua": [314, 366, 1010, 1011, 1013, 1014, 1020, 1023, 1024], "creighton": 314, "bessi": 314, "waldo": 314, "compliant": [314, 371], "cupi": [314, 392], "gpu": [314, 392, 970, 987, 1001], "changelog": [314, 375, 384], "730": [314, 315], "plot_release_highlights_1_2_0": [314, 315], "auto_examples_release_highlight": 315, "semisupervis": [317, 384], "clai": [317, 318, 319, 322, 1008], "woolam": [317, 318, 319, 322, 1008], "n_total_sampl": [317, 318], "n_labeled_point": [317, 318], "unlabeled_set": 317, "everyth": [317, 353, 375, 377, 382, 449, 926, 986, 987, 1008], "lp_model": [317, 318], "predicted_label": [317, 318], "transduction_": [317, 318, 319, 878, 879, 880], "true_label": [317, 318], "_plot": 317, "0x7fd1133cd6d0": 317, "pred_entropi": [317, 318], "label_distributions_": [317, 318, 878, 879, 1019], "uncertainty_index": [317, 318], "image_index": [317, 318], "plot_label_propagation_digit": [317, 323], "max_iter": 318, "______________________________________________________________________": 318, "290": [318, 673, 674, 678, 963], "280": 318, "unlabeled_indic": 318, "transduc": 318, "in1d": [318, 1015], "delete_indic": 318, "183": [318, 377, 967, 1008], "nfit": 318, "delete_index": 318, "716": [318, 323, 498], "plot_label_propagation_digits_active_learn": [318, 323], "label_spread": 319, "labelspreadinglabelspread": 319, "output_label": 319, "output_label_arrai": 319, "outer_numb": 319, "inner_numb": 319, "209": [319, 323, 725, 859], "plot_label_propagation_structur": [319, 323], "breast_canc": 320, "augment": [320, 615, 865, 990], "oliv": [320, 322, 1016, 1017, 1019, 1020, 1021], "rausch": [320, 322, 1016, 1017, 1020], "rauscho": [320, 322], "ethz": [320, 322], "total_sampl": [320, 521], "base_classifi": [320, 322, 979], "x_valu": 320, "99999": 320, "amount_label": 320, "amount_iter": 320, "self_training_clf": 320, "skfold": 320, "y_test_tru": 320, "labeled_iter_": [320, 880], "return_count": [320, 343, 835], "capsiz": 320, "twinx": 320, "plot_self_training_varying_threshold": [320, 323], "2823": 321, "2117": 321, "761": 321, "1697": 321, "1071": 321, "850": 321, "tfidftransform": [321, 343, 344, 404, 474, 576, 1001, 1015, 1016, 1022, 1024], "sdg_param": 321, "vectorizer_param": 321, "selftrain": 321, "st_pipelin": 321, "ls_pipelin": 321, "eval_and_print_metr": 321, "y_mask": 321, "x_20": 321, "y_20": 321, "683": [321, 323], "plot_semi_supervised_newsgroup": [321, 323], "y_rand": 322, "y_30": 322, "y_50": 322, "ls30": 322, "ls50": 322, "ls100": 322, "st30": 322, "st50": 322, "rbf_svc": [322, 981], "color_map": 322, "plot_semi_supervised_versus_svm_iri": [322, 323], "auto_examples_semi_supervis": 323, "my_kernel": [325, 981], "098": [325, 340], "plot_custom_kernel": [325, 340], "2x2": [326, 396, 738], "228": [326, 340], "plot_iris_svc": [326, 340], "convention": [327, 384, 879], "support_vector_indic": 327, "198": [327, 340, 1008], "plot_linearsvc_support_vector": [327, 340], "387": [328, 340, 343, 1008], "plot_oneclass": [328, 340], "midpoint": 329, "blink": 329, "act": [329, 342, 371, 383, 402, 403, 698, 713, 714, 722, 767, 768, 771, 858, 862, 963, 966, 969, 981, 1016], "spuriou": [329, 379, 976, 1021, 1022, 1023], "c_rang": 329, "gamma_rang": 329, "midpointnorm": 329, "masked_arrai": [329, 781, 795], "x_2d": 329, "y_2d": 329, "cheat": [329, 970, 980, 1010], "c_2d_rang": 329, "gamma_2d_rang": 329, "bright": 329, "brutal": 329, "plot_rbf_paramet": [329, 340], "plot_separating_hyperplan": [330, 340], "plain": [331, 406, 642, 980], "n_samples_1": [331, 981], "n_samples_2": [331, 981], "clusters_std": 331, "wclf": 331, "wdisp": 331, "surface_": [331, 616], "plot_separating_hyperplane_unbalanc": [331, 340], "blown": 332, "score_mean": 332, "score_std": 332, "plot_svm_anova": [332, 340], "fignum": [333, 334], "204": [333, 340, 974, 979], "plot_svm_kernel": [333, 340], "plot_svm_margin": [334, 340], "unreg": 334, "perpendicular": 334, "yy_down": 334, "yy_up": 334, "nusvc": [335, 357, 886, 967, 1008, 1009, 1010, 1013, 1016, 1018, 1019, 1020, 1022], "plot_svm_nonlinear": [335, 340], "svr_rbf": 336, "svr_lin": 336, "svr_poli": 336, "kernel_label": 336, "model_color": 336, "setdiff1d": 336, "624": [336, 340, 973], "plot_svm_regress": [336, 340], "mathcal": [337, 401, 403, 612, 681, 958, 960, 962, 966, 980, 1021], "omega": [337, 399, 960], "model_l1": 337, "logx": 337, "train_size_idx": 337, "results_sc": 337, "c_scale": 337, "model_l2": 337, "plot_svm_scale_c": [337, 340], "break_ti": [338, 885, 888, 981, 1018], "accent": [338, 573, 574, 576, 1018], "986": [338, 340], "plot_svm_tie_break": [338, 340], "emphasi": [339, 399, 885, 886, 887, 888, 889, 973, 986], "subtl": [339, 353, 965, 987], "plot_decision_funct": 339, "sample_weight_last_ten": 339, "sample_weight_const": 339, "clf_no_weight": 339, "clf_weight": 339, "502": [339, 340], "plot_weighted_sampl": [339, 340], "auto_examples_svm": 340, "signatur": [342, 343, 366, 473, 474, 542, 543, 549, 550, 579, 595, 596, 644, 658, 660, 696, 726, 787, 805, 807, 810, 856, 955, 1015, 1021], "size_mb": 342, "utf": [342, 344, 404, 472, 488, 567, 573, 574, 576], "load_dataset": 342, "sublinear_tf": [342, 401, 404, 575, 576], "duration_train": 342, "duration_test": 342, "data_train_size_mb": 342, "data_test_size_mb": 342, "2034": [342, 366], "98mb": 342, "1353": 342, "87mb": 342, "428": 342, "289mb": 342, "7831": 342, "398mb": 342, "ridgeclassifi": [342, 357, 657, 658, 660, 962, 967, 1013, 1017, 1021, 1022, 1023], "sparse_cg": [342, 657, 659, 672, 962, 1009, 1015, 1017, 1018, 1022], "rarer": [342, 344, 404], "deeper": [342, 982], "plot_feature_effect": 342, "average_feature_effect": 342, "top5": 342, "top_indic": 342, "predictive_word": 342, "bar_siz": 342, "y_loc": 342, "keith": [342, 1008, 1013], "atheist": 342, "orbit": [342, 343], "caltech": 342, "expectedli": 342, "pollut": [342, 712, 769, 966, 972], "sender": [342, 366], "livesei": 342, "solntz": 342, "wpd": 342, "sgi": 342, "jon": [342, 1015, 1018, 1019, 1021, 1022], "nntp": [342, 366, 1001], "1qlettinn8oi": 342, "cco": 342, "allan": [342, 394, 1020], "schneider": [342, 1021], "me": 342, "instinct": 342, "happi": [342, 382, 385, 799, 800], "listen": 342, "murder": 342, "voluntari": 342, "disregard": [342, 384, 404, 417, 450, 467, 468, 469, 537, 539, 541, 543, 545, 547, 550, 553, 555, 596, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 664, 706, 707, 708, 769, 816, 817, 826, 834, 841, 852, 853, 859, 860, 863, 868, 871, 872, 874, 884, 886, 889, 892, 894, 966, 1016], "beings": 342, "bahavior": 342, "theirs": 342, "mimicri": 342, "imit": 342, "parrot": 342, "polli": 342, "pulchritud": 342, "anim": [342, 404], "kill": 342, "Or": [342, 351, 400, 401, 856, 966, 972, 980], "sigh": 342, "wonder": 342, "bahaviour": 342, "believ": [342, 343, 379, 382, 990], "primat": 342, "arbitarili": 342, "poster": [342, 370, 371, 1000], "weren": [342, 857, 1017], "slai": 342, "mate": 342, "ritual": 342, "whatnot": 342, "aren": [342, 366, 375, 387, 395, 710, 740, 971, 1018, 1020], "ye": [342, 379, 384, 850, 867, 962], "child": [342, 351, 358, 382, 384, 396, 403, 427, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 891, 892, 893, 894, 934, 982, 1015], "gorilla": 342, "dolphin": 342, "platypu": 342, "writer": 342, "launch": [342, 343, 387, 990], "custom_nam": 342, "clf_descr": 342, "rocchio": [342, 830], "000597": 342, "5316": 342, "0452": 342, "00064": 342, "000978": 342, "0706": 342, "0305": 342, "000623": 342, "752": 342, "0332": 342, "000641": 342, "762": 342, "00302": 342, "00148": 342, "00221": 342, "000571": 342, "779": 342, "training_tim": 342, "txt": [342, 365, 478, 488], "curs": [342, 343, 396, 402, 406, 968, 969, 995, 1000], "harm": [342, 373, 404, 777], "373": [342, 345], "plot_document_classification_20newsgroup": [342, 345], "discov": [343, 396, 401, 404, 407, 429, 433, 992, 1023], "metadata": [343, 365, 366, 390, 473, 474, 481, 986, 987, 992], "category_s": 343, "true_k": 343, "3387": 343, "evaluations_std": 343, "fit_and_evalu": 343, "evaluation_std": 343, "score_valu": 343, "std_score": [343, 1021], "reweight": [343, 384, 398, 403, 575, 576, 633, 654, 665], "collis": [343, 344, 404, 567, 574], "x_tfidf": 343, "459": [343, 396, 427], "7929": [343, 1015], "prod": [343, 606], "phenomenon": [343, 976], "cluster_s": 343, "2050": 343, "711": 343, "446": [343, 406, 710, 740, 966], "485": [343, 681], "1708": 343, "3384": 343, "1887": 343, "311": 343, "1688": 343, "454": 343, "973": [343, 400], "987": 343, "628": 343, "405": 343, "380": [343, 1001], "217": [343, 520, 526], "redo": 343, "x_lsa": 343, "explained_vari": [343, 966], "416": [343, 723, 966], "033": [343, 974], "minibatch_kmean": 343, "386": [343, 859], "072": [343, 422, 633], "301": [343, 397, 980], "027": [343, 368], "influenti": [343, 990], "original_space_centroid": 343, "order_centroid": 343, "shuttl": 343, "sparciti": 343, "lsa_vector": 343, "x_hashed_lsa": 343, "804": 343, "417": 343, "343": 343, "366": 343, "059": 343, "354": 343, "056": [343, 974], "306": [343, 612], "046": 343, "029": [343, 974], "df_std": 343, "speak": [343, 357, 371, 980], "safer": [343, 353, 396, 400, 1008], "243": [343, 345, 569], "plot_document_clust": [343, 345], "18000": [344, 366], "raw_data": 344, "data_size_mb": 344, "3803": 344, "245mb": 344, "anyth": [344, 375, 377, 384, 400, 930, 1022], "unicod": [344, 404, 472, 488, 567, 573, 574, 576, 931, 1008, 1016, 1020], "charact": [344, 371, 376, 384, 404, 488, 493, 494, 573, 574, 576, 895, 971, 1001, 1008, 1021, 1023], "underscor": [344, 373, 384, 950, 998, 1008, 1018, 1021], "tok": [344, 404], "findal": 344, "token_freq": 344, "dict_count_vector": 344, "47928": 344, "vocabulary_": [344, 404, 566, 573, 576, 1001, 1008], "19145": 344, "n_nonzero_column": 344, "590": 344, "43873": 344, "inact": [344, 365, 371], "627": 344, "47668": 344, "input_typ": [344, 404, 449, 567], "535": 344, "y_po": 344, "downsid": 344, "featureheash": 344, "implicitli": [344, 380, 403, 582, 617, 618, 862, 956, 958, 973, 976, 981], "token_pattern": [344, 404, 573, 574, 576], "766": 344, "47885": 344, "494": 344, "794": 344, "plot_hashing_vs_dict_vector": [344, 345], "auto_examples_text": 345, "parameter": [347, 406, 599, 600, 607, 608, 779, 780, 962, 963, 971, 976, 982], "weakest": [347, 982], "cost_complexity_pruning_path": [347, 891, 892, 893, 894], "drawstyl": [347, 685], "3272984419327777": 347, "435": [347, 352], "plot_cost_complexity_prun": [347, 352], "ryb": 348, "pairidx": 348, "borderpad": 348, "handletextpad": 348, "plot_iris_dtc": [348, 352], "plot_tre": [348, 351, 982, 1017, 1019, 1020, 1021, 1023], "920": [348, 352], "096": [349, 352], "plot_tree_regress": [349, 352], "regr_3": 350, "y_3": 350, "plot_tree_regression_multioutput": [350, 352], "decision_path": [351, 542, 543, 549, 550, 551, 891, 892, 893, 894, 1014, 1019], "children_left": 351, "children_right": 351, "n_node_sampl": 351, "travers": [351, 969, 973], "n_node": [351, 426, 430, 448, 542, 543, 549, 550, 551, 891, 892, 893, 894, 925], "node_depth": 351, "is_leav": 351, "pop": [351, 382, 898, 996, 1016], "visit": [351, 371, 973], "node_id": [351, 895, 897], "is_split_nod": 351, "children": [351, 396, 403, 426, 430, 448, 551, 1012], "800000011920929": 351, "950000047683716": 351, "node_index": 351, "node_ind": 351, "leaf_id": 351, "sample_id": [351, 366, 482], "threshold_sign": 351, "inequ": [351, 384, 396, 428, 432, 444, 684, 963, 964, 969], "boolean": [351, 366, 371, 373, 380, 397, 403, 404, 405, 449, 546, 547, 566, 567, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 614, 617, 618, 621, 634, 656, 684, 812, 818, 839, 846, 866, 899, 950, 956, 962, 968, 973, 976, 982, 1008, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1021, 1022, 1023], "common_nod": 351, "common_node_id": 351, "092": [351, 352], "plot_unveil_tree_structur": [351, 352], "793": 352, "auto_examples_tre": 352, "x_test_transform": [353, 400], "standard_norm": 353, "unfair": 353, "x_select": 353, "gbc": 353, "x_train_select": 353, "x_test_select": 353, "tip": [353, 356, 360, 371, 374, 377, 391, 404, 519, 526, 630, 677, 962, 988, 1002, 1003, 1006, 1011], "glossari": [353, 360, 371, 373, 377, 395, 407, 408, 422, 425, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 449, 452, 454, 457, 459, 473, 476, 477, 480, 482, 488, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 568, 569, 579, 587, 592, 593, 595, 596, 612, 617, 619, 624, 625, 626, 627, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 672, 673, 674, 675, 676, 677, 678, 679, 680, 686, 758, 762, 765, 775, 779, 780, 781, 783, 784, 785, 786, 787, 793, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 825, 826, 828, 829, 831, 832, 833, 834, 836, 837, 839, 840, 841, 842, 845, 848, 860, 864, 872, 875, 876, 878, 879, 883, 884, 885, 888, 891, 892, 893, 894, 919, 920, 937, 940, 955, 956, 962, 992, 1016], "mtrand": 353, "_rand": 353, "85418642": 353, "79084103": 353, "13077794": 353, "11915045": 353, "56479934": 353, "70814003": 353, "25291366": 353, "55212743": 353, "18197458": 353, "37845099": 353, "snippet": [353, 371, 376, 379, 382, 392, 403, 404, 405, 956, 976, 989, 1021], "mutat": [353, 1016], "somewhat": [353, 359, 371, 373, 401, 403, 885, 888, 962, 981, 982], "debug": [353, 358, 372, 374, 377, 384, 386, 612, 882, 932, 986, 1001, 1016, 1020], "govern": [353, 357, 360, 371, 384, 984, 990], "implic": 353, "rf_123": 353, "rf_inst": 353, "didn": [353, 384, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "strict": [353, 369, 384, 401, 488, 520, 573, 574, 576, 962, 1008, 1017, 1020], "pervas": [353, 371], "throughout": [353, 384, 612, 782, 840, 841, 992, 1011, 1016], "codebas": [353, 371, 372, 373, 404, 1008, 1014], "unlucki": 353, "lucki": 353, "fairer": 353, "temptat": [353, 371], "throughput": [356, 986, 1003, 1011], "switch": [356, 663, 689, 702, 721, 739, 741, 777, 823, 824, 919, 920, 966, 969, 1003, 1008], "offlin": [357, 371], "bottleneck": [357, 377, 403, 433, 840, 841], "hurt": [357, 519, 1016], "toolkit": [357, 986, 990], "branch": [357, 369, 371, 374, 375, 396, 403, 427, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 891, 892, 893, 894, 896, 969, 973, 982], "sklearn_assume_finit": 357, "assume_finit": [357, 358, 453, 881], "assert_all_finit": [357, 380, 453], "nm": 357, "csc": [357, 382, 384, 404, 536, 538, 539, 655, 677, 850, 852, 858, 863, 866, 868, 874, 899, 903, 904, 929, 941, 942, 944, 945, 946, 947, 969, 976, 1016, 1017, 1019, 1022], "32bit": [357, 931], "speedup": [357, 401, 403, 635, 639, 642, 1008, 1009, 1010, 1011, 1023], "multithread": [357, 396, 883, 884, 885, 886, 887, 888, 889], "bla": [357, 358, 369, 372, 377, 1008, 1016, 1017, 1019, 1020], "sparsity_ratio": 357, "gbt": 357, "speedi": 357, "packet": 357, "reuter": [357, 366], "carefulli": [357, 401], "spawn": [357, 382, 781, 795, 804, 805, 806, 1019], "gil": [357, 358, 372, 934, 1011, 1016, 1017, 1020, 1021], "ought": 357, "lapack": [357, 358, 369, 517, 520, 526, 673, 1023], "dgemm": 357, "show_vers": [357, 369, 371, 379, 387, 1016], "atla": [357, 369], "rebuild": [357, 390, 404, 427], "openbla": [357, 358, 369, 382, 934, 1021], "mkl": [357, 358, 369, 382, 934, 1008], "veclib": [357, 382], "osx": 357, "nouri": [357, 1009, 1011], "instruct": [357, 371, 372, 373, 374, 375, 376, 379, 382, 383, 488, 573, 574, 576, 992, 1001, 1008], "ubuntu": [357, 369, 377, 379], "1gb": 357, "mib": [357, 453, 881], "working_memori": [357, 358, 453, 765, 881, 1016], "adher": [357, 373, 384, 914, 915, 1008, 1009], "pairwise_distances_chunk": [357, 762, 1016, 1019], "facilit": [357, 384, 390, 986, 987, 1014, 1017], "moment": [357, 401, 406, 425, 600, 608, 840, 841, 930, 970, 971], "000024": 357, "027400": 357, "mileag": 357, "deploi": [357, 386, 390, 987, 990], "upstream": [357, 371, 375, 379, 382, 976, 1017], "lighter": [357, 685, 687, 766, 773, 1024], "threadpoolctl": [358, 369, 387, 389], "subsect": [358, 395], "worker": [358, 384, 404, 932, 933, 934, 1023], "14228": 358, "loki": [358, 934, 966, 1016, 1019], "duplic": [358, 370, 371, 384, 396, 407, 429, 433, 434, 500, 620, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 807, 854, 952, 969, 1008, 1011, 1020, 1022, 1024], "memmap": [358, 366, 384, 401, 493, 519, 1016], "1mb": [358, 1013], "parallel_backend": [358, 407, 422, 429, 431, 433, 435, 437, 442, 443, 446, 449, 452, 457, 516, 520, 521, 522, 524, 527, 528, 530, 531, 533, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 579, 587, 595, 617, 619, 624, 632, 636, 638, 640, 642, 643, 644, 646, 648, 650, 651, 653, 661, 664, 673, 674, 675, 676, 677, 678, 679, 758, 762, 765, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 825, 826, 829, 831, 833, 834, 836, 837, 842, 845, 878, 879, 1016], "exclus": [358, 382, 401, 403, 612, 613, 615, 955, 962, 966, 967, 990, 1015, 1019], "omp_num_thread": 358, "my_script": 358, "algebra": [358, 369, 374, 382, 401, 404, 447, 849, 976], "bli": [358, 369, 382], "mkl_num_thread": 358, "openblas_num_thread": 358, "blis_num_thread": 358, "bash": [358, 379], "zsh": 358, "prompt": [358, 369, 371, 387, 389, 404, 992], "pypi": [358, 369, 371, 373, 375, 377, 387, 982, 1016, 1020, 1022, 1023], "channel": [358, 366, 369, 382, 387, 404, 478, 479, 568, 569, 571, 572], "subscript": [358, 934, 1021], "max_thread": [358, 372], "n_cpu": [358, 384], "lib": [358, 369, 387, 986], "_num_thread": 358, "singleton": [358, 789, 906, 1021], "aforement": [358, 967], "global_random_se": 358, "fixtur": [358, 371], "build_numb": 358, "disrupt": 358, "config": [358, 371, 372, 379, 611, 1016], "contributor": [358, 374, 375, 376, 379, 382, 384, 966, 984, 987, 1009, 1010, 1011], "encount": [358, 369, 390, 396, 403, 404, 481, 546, 547, 566, 818, 819, 820, 822, 856, 941, 976, 980, 986, 989, 990, 1001, 1016, 1019], "watch": 358, "annoi": 358, "test_your_test_nam": 358, "skip": [358, 371, 373, 380, 404, 453, 553, 631, 632, 637, 645, 646, 647, 656, 666, 881, 1001, 1012, 1015, 1018, 1020, 1022, 1024], "global_dtyp": 358, "boundscheck": [358, 372], "segfault": [358, 372, 1008, 1016, 1021], "posix": [358, 382], "pairwisedistancesreduct": 358, "adequ": [358, 377, 552, 992, 1021], "drive": [359, 401, 402, 403, 534, 980, 990, 1001], "passiveaggressiveregressor": [359, 962, 1009, 1012, 1015, 1016, 1019, 1021], "maxabsscal": [359, 847, 868, 956, 976, 1013, 1016, 1017, 1018, 1019, 1024], "routin": [359, 365, 368, 371, 372, 373, 374, 379, 382, 384, 405, 657, 659, 672, 684, 885, 886, 887, 888, 889, 963, 969, 976, 977, 980, 986, 990, 1008, 1022, 1023, 1024], "passiveaggress": [359, 404], "fledg": [359, 404], "naivebay": 359, "dramat": 359, "welcom": [360, 370, 371, 379, 385, 987, 989], "roadmap": [360, 984], "persist": [360, 379, 382, 401, 431, 595, 596, 839, 971, 986, 1003, 1014, 1017], "miscellan": [360, 364, 365, 1014, 1015, 1022, 1023, 1024], "craft": [360, 374], "curat": [360, 371, 374, 375], "commun": [364, 370, 374, 376, 379, 384, 387, 396, 403, 523, 525, 532, 677, 695, 855, 956, 963, 969, 976, 980, 984, 986, 990, 1016, 1017], "fetcher": [364, 1013, 1015], "linnerrud": [364, 1003], "breast": [364, 485, 1003, 1013], "cancer": [364, 485, 578, 579, 830, 1003, 1013], "covertyp": [364, 476, 1003], "rcv1": [364, 482, 1003, 1013], "kddcup": [364, 477, 1003], "svmlight": [364, 472, 493, 494, 986, 1003, 1008, 1009, 1015, 1017], "jpeg": [365, 366, 478, 479], "publish": [365, 366, 373, 375, 379, 384, 978, 987, 1020], "creativ": 365, "spare": [365, 659, 660], "pyplpt": 365, "load_svmlight_fil": [365, 1008, 1009, 1014, 1015, 1016, 1023], "test_dataset": 365, "everybodi": [365, 371], "upload": [365, 369, 375, 382, 656], "mice": [365, 612, 956], "brain": 365, "miceprotein": 365, "1080": [365, 396], "sc": [365, 396], "clara": [365, 1020], "higuera": 365, "katheleen": 365, "gardin": 365, "krzysztof": 365, "cio": 365, "protein": [365, 986], "cite": [365, 396, 984], "kj": [365, 968], "critic": [365, 371, 383, 390, 403, 677, 963, 966, 974, 981, 990, 1019], "syndrom": 365, "plo": [365, 592, 593], "ONE": [365, 592, 593], "e0129126": 365, "40966": 365, "upload_d": 365, "08t16": 365, "17928620": 365, "file_id": 365, "default_target_attribut": 365, "row_id_attribut": 365, "mouseid": 365, "ignore_attribut": 365, "genotyp": 365, "cc18": 365, "study_135": 365, "study_98": 365, "study_99": 365, "md5_checksum": 365, "3c479a6885bfa0438971388283a1ce32": 365, "websit": [365, 366, 368, 371, 385, 970, 980, 990, 1001, 1009, 1010, 1011], "4550": 365, "creator": [365, 368], "17t14": 365, "1804243": 365, "pone": 365, "0129126": 365, "openml100": 365, "study_14": 365, "study_34": 365, "earliest": [365, 963], "iris_61": 365, "iris_969": 365, "969": 365, "iris_version_3": 365, "vanschoren": [365, 1020], "rijn": [365, 1016], "bischl": 365, "torgo": 365, "acm": [365, 366, 396, 407, 429, 435, 442, 445, 496, 548, 661, 710, 740, 829, 966, 969, 972, 978], "sigkdd": [365, 366, 496, 661, 864, 976, 978], "newslett": 365, "legaci": [365, 375, 384, 934, 1008, 1015, 1020], "my": [365, 371, 376, 379, 481], "columnar": [365, 449, 986], "usabl": [365, 371, 373, 384, 390, 404, 781, 934, 1008, 1015, 1022, 1023], "io": [365, 368, 369, 371, 375, 377, 379, 384, 385, 390, 677, 986, 1006], "sql": 365, "smoothli": 365, "manipul": [365, 392, 492, 934, 986, 1014], "mat": [365, 404], "load_fil": [365, 366, 1001, 1010, 1022], "audio": [365, 488], "wish": [365, 371, 378, 380, 387, 396, 635, 636, 639, 640, 641, 649, 650, 920, 993, 1001, 1015], "imageio": 365, "wavfil": 365, "wav": 365, "hdf5": 365, "h5py": 365, "pytabl": 365, "april": [366, 649, 670, 671, 1012, 1020], "1992": [366, 368, 400, 403, 552, 553, 630, 962], "1994": [366, 368, 629], "AT": [366, 480], "laboratori": [366, 986], "cambridg": [366, 401, 575, 818, 822, 962, 964, 968], "facial": 366, "upright": 366, "frontal": 366, "movement": 366, "credit": [366, 379, 403, 962, 990], "18846": [366, 473, 474], "20news_hom": 366, "newsgroups_train": 366, "11314": 366, "1073": 366, "20new": [366, 1001], "34118": 366, "01327": 366, "newsgroups_test": 366, "vectors_test": 366, "class_prior": [366, 818, 819, 820, 822, 1009, 1012], "fit_prior": [366, 818, 819, 820, 822], "88213": 366, "suspici": 366, "show_top10": 366, "top10": 366, "affili": 366, "abund": 366, "clue": [366, 379, 963], "bare": [366, 963, 1001], "quotat": 366, "77310": 366, "76995": 366, "cleveland": 366, "indian": 366, "leagu": 366, "team": [366, 374, 382, 384, 984, 986, 990, 1008], "ohio": 366, "spark": [366, 987], "death": 366, "floyd": [366, 673, 963], "reckon": 366, "coloni": 366, "owner": [366, 368], "paul": [366, 1011, 1014, 1015, 1016, 1017, 1021, 1022], "dolan": 366, "nicknam": 366, "tribe": 366, "theme": [366, 1008], "mlb": [366, 854], "inappropri": [366, 400, 406, 694, 802], "nlp": [366, 401, 404, 818, 822, 964, 990], "cultur": 366, "inflammatori": 366, "famou": [366, 368, 981], "internet": [366, 376, 976, 999], "offici": [366, 373, 384, 387, 478, 482, 986, 1001, 1016, 1017, 1020], "verif": [366, 966, 990], "identif": [366, 371, 482, 955, 993], "viola": [366, 1016], "opencv": 366, "detector": [366, 384, 829], "5749": [366, 478, 479], "13233": [366, 478, 479], "5828": [366, 478, 479], "200m": 366, "lfw_home": 366, "rectangular": [366, 384, 920, 987], "1140": 366, "fetch_lfw_pair": [366, 1013, 1023], "lfw_pairs_train": 366, "subdivid": [366, 406], "10_fold": [366, 478], "gari": [366, 1015], "huang": [366, 643, 1014, 1019], "manu": 366, "ramesh": [366, 990, 1011, 1014, 1018], "tamara": 366, "berg": [366, 1009, 1010, 1020], "erik": [366, 990, 1011], "miller": [366, 1016, 1017, 1021], "massachusett": 366, "amherst": 366, "30m": 366, "seven": [366, 959], "homepag": [366, 515, 982], "581012": [366, 476], "newswir": 366, "ltd": [366, 990], "804414": [366, 482], "47236": [366, 482], "fetch_rcv1": [366, 1013, 1017], "v2": [366, 482, 649, 670, 671, 962], "chronolog": [366, 482], "23149": [366, 482, 1022], "781265": [366, 482], "lyrl2004": [366, 482], "2286": 366, "810596": 366, "2288": 366, "uint32": [366, 482], "gmil": 366, "381327": 366, "ccat": 366, "e11": 366, "ecat": 366, "m11": 366, "656": 366, "lewi": [366, 1015, 1019], "yang": [366, 396, 401, 519, 624, 1014, 1015, 1018, 1020, 1021, 1022], "rose": 366, "397": 366, "cup": [366, 966], "tcpdump": 366, "darpa": 366, "intrus": 366, "mit": [366, 377, 396, 406, 595, 596, 599, 604, 607, 628, 651, 652, 661, 820, 959], "lincoln": 366, "inject": [366, 403], "attack": 366, "unrealist": 366, "logged_in": 366, "resp": [366, 403, 582, 779, 780, 980, 1016], "4898431": [366, 477], "976158": 366, "699691": 366, "619052": 366, "95373": 366, "kddcup99": [366, 477], "richard": [366, 405, 643, 1009, 1018, 1020, 1022, 1023], "lippmann": 366, "hain": 366, "jonathan": [366, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1024], "korba": 366, "da": [366, 1023, 1024], "yamanishi": 366, "takeuchi": 366, "william": [366, 368, 406, 595, 596, 599, 604, 607, 624, 966, 970, 1015, 1016, 1017, 1018, 1023, 1024], "miln": 366, "discount": [366, 396, 710, 740, 1015, 1018], "sixth": 366, "320": [366, 955, 980, 1008], "press": [366, 396, 401, 406, 407, 429, 575, 595, 596, 599, 604, 607, 628, 818, 822, 959, 962, 964, 968], "household": 366, "statlib": 366, "dcc": 366, "ltorgo": 366, "cal_hous": 366, "1990": 366, "censu": 366, "bureau": 366, "resid": 366, "vacat": 366, "pace": 366, "kellei": [366, 1010, 1011], "ronald": [366, 970, 1011, 1021], "barri": [366, 1016], "autoregress": 366, "297": 366, "hyperspher": [367, 986], "interleav": [367, 507], "simplif": [367, 370, 376, 1008, 1014], "realiti": 367, "make_sparse_uncorrel": 367, "make_friedman1": [367, 403, 524, 528, 578, 579, 617], "make_friedman2": [367, 596, 598, 599, 600, 601, 602, 606, 609, 610], "reciproc": [367, 966], "make_friedman3": 367, "7826": 368, "4194": 368, "9490": 368, "9565": 368, "fisher": [368, 403, 489, 621, 986], "donor": 368, "michael": [368, 394, 396, 435, 613, 622, 676, 779, 956, 962, 990, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1022, 1023], "marshal": 368, "arc": [368, 403], "juli": [368, 405, 718, 864, 976, 1011, 1015, 1016, 1017], "1988": 368, "sir": 368, "referenc": [368, 373, 374, 379, 384, 875, 876, 969, 1015, 1021], "duda": [368, 960], "hart": [368, 960, 1016], "taxonom": 368, "annual": [368, 396, 710, 740, 880, 966, 979], "eugen": [368, 1009, 1014], "179": [368, 377, 403, 1008], "1936": 368, "john": [368, 404, 521, 693, 719, 753, 858, 885, 886, 888, 889, 956, 962, 966, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1021, 1023, 1024], "wilei": [368, 956], "1950": [368, 966], "1973": [368, 394], "scene": [368, 969, 971, 1021], "q327": 368, "d83": 368, "son": [368, 956], "isbn": [368, 396, 962], "22361": 368, "218": [368, 456, 700, 770], "dasarathi": 368, "1980": 368, "nose": [368, 1011, 1015], "pami": [368, 396, 709], "gate": [368, 1021], "1972": 368, "431": 368, "mlc": 368, "cheeseman": 368, "autoclass": 368, "conceptu": [368, 403, 964], "alpaydin": 368, "boun": 368, "nist": [368, 966], "bitmap": 368, "preprint": 368, "32x32": 368, "nonoverlap": 368, "4x4": [368, 401, 404], "garri": 368, "candela": 368, "dimmick": 368, "geist": 368, "grother": 368, "janet": 368, "handprint": 368, "nistir": 368, "5469": 368, "kaynak": 368, "msc": 368, "graduat": 368, "bogazici": 368, "cascad": 368, "kybernetika": 368, "ken": [368, 1001, 1010, 1017], "tang": [368, 1018, 1019, 1020], "ponnuthurai": 368, "suganthan": 368, "yao": [368, 1014, 1015, 1016, 1017, 1024], "kai": [368, 548, 972, 1015], "dimensionalityreduct": 368, "nanyang": 368, "technolog": 368, "claudio": [368, 1022, 1023], "gentil": [368, 1020], "linnerud": [368, 490], "men": 368, "club": 368, "waist": 368, "puls": 368, "chin": [368, 1012], "situp": 368, "tenenhau": 368, "pratiqu": 368, "alcalin": 368, "magnesium": 368, "phenol": 368, "nonflavanoid": 368, "proanthocyanin": 368, "od280": 368, "od315": 368, "dilut": 368, "class_2": [368, 495], "162": 368, "278": [368, 823, 824], "1680": 368, "746": 368, "chemic": 368, "grown": [368, 403, 538, 539, 540, 541, 542, 543, 549, 550, 891, 892, 893, 894, 982], "itali": 368, "cultiv": 368, "thirteen": 368, "constitu": 368, "forina": 368, "parvu": 368, "pharmaceut": 368, "food": 368, "technologi": [368, 396, 986, 990], "brigata": 368, "salerno": 368, "16147": 368, "genoa": 368, "lichman": 368, "irvin": 368, "ca": [368, 396, 427, 891, 892, 978, 982], "aeberhard": 368, "cooman": 368, "vel": 368, "rep": [368, 986], "dept": 368, "cook": [368, 1008, 1014], "north": [368, 396], "queensland": 368, "submit": [368, 369, 370, 373, 374, 375, 376, 379, 384, 385], "technometr": [368, 398, 454, 459, 972], "rda": 368, "1nn": 368, "THE": 368, "OF": 368, "chemometr": 368, "perimet": 368, "textur": [368, 742, 743, 964], "concav": 368, "symmetri": [368, 684, 856, 859, 871, 964], "fractal": 368, "malign": [368, 485], "benign": [368, 485], "143": [368, 456, 457, 978, 1008, 1009], "2501": 368, "163": [368, 974], "345": 368, "427": [368, 491, 492, 568, 569], "873": 368, "542": 368, "031": 368, "4254": 368, "071": [368, 422], "664": 368, "357": [368, 485, 884], "wolberg": 368, "nick": [368, 1008, 1014, 1015, 1016, 1017], "olvi": 368, "mangasarian": 368, "goo": [368, 485], "gl": [368, 485], "u2uwz2": [368, 485], "needl": 368, "aspir": [368, 371], "fna": 368, "nuclei": 368, "multisurfac": 368, "msm": 368, "bennett": [368, 966], "midwest": 368, "cognit": 368, "societi": [368, 396, 398, 454, 459, 526, 612, 859, 871, 962, 980], "insepar": 368, "uw": [368, 1020], "ftp": [368, 667, 668], "wisc": [368, 878], "prog": 368, "cpo": 368, "nuclear": 368, "tumor": 368, "spie": 368, "1993": [368, 459, 649, 670, 671, 982], "symposium": [368, 396, 445], "1905": 368, "861": [368, 772, 773, 966], "870": 368, "san": [368, 404, 978], "jose": [368, 643, 966, 1016, 1018], "prognosi": 368, "577": 368, "august": [368, 396, 496, 519, 981, 1008, 1010, 1011, 1015, 1022], "961": [369, 387, 388, 389, 840], "wheel": [369, 371, 375, 387, 1018, 1020, 1022], "quickest": 369, "registri": [369, 387], "uninstal": 369, "git": [369, 373, 375, 377, 379, 989, 1004, 1008], "fork": [369, 371, 375, 379, 382], "miniforge3": [369, 379], "miniforg": [369, 379, 387], "env": [369, 379, 387], "virtualenv": [369, 371], "python3": [369, 387], "venv": [369, 387], "pep517": [369, 371], "dev0": [369, 375, 989, 1004], "pyx": [369, 371, 372, 377, 379], "pxd": [369, 371], "sklearn_fail_no_openmp": 369, "checkout": [369, 371, 375, 379], "cumbersom": 369, "reinstal": [369, 387], "setuptool": 369, "unix": [369, 404], "makefil": 369, "studio": [369, 990], "vs_buildtool": 369, "desktop": 369, "screenshot": 369, "secondli": [369, 371, 382, 396, 403, 642, 962, 1001], "architectur": [369, 373, 379, 382, 387, 390, 453, 881, 970, 984, 990, 1008], "cmd": 369, "powershel": 369, "struct": [369, 384, 1011], "calcsiz": 369, "distutils_use_sdk": 369, "x86": 369, "buildtool": 369, "vc": 369, "vcvarsal": 369, "bat": 369, "x64": 369, "clang": [369, 372], "confusingli": 369, "usr": 369, "gcc": [369, 372, 377, 382], "libomp": [369, 1020], "silicon": [369, 984], "m1": [369, 984], "januari": [369, 371, 387, 1008, 1009, 1018, 1020, 1023], "arm64": [369, 371, 374, 387], "llvm": 369, "toolchain": 369, "xcode": 369, "conflict": [369, 371, 375, 379, 387, 1015, 1016], "condarc": 369, "channel_prior": 369, "reactiv": [369, 377], "echo": [369, 375], "cxx": 369, "cflag": 369, "cxxflag": 369, "ldflag": 369, "subfold": [369, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 488, 1021], "fopenmp": [369, 372], "export": [369, 372, 373, 387, 390, 895, 896, 982, 986, 989, 1017], "cppflag": 369, "xpreprocessor": 369, "wl": 369, "rpath": 369, "lomp": 369, "sudo": [369, 387], "apt": [369, 379, 387], "pip3": 369, "pythonx": 369, "site": [369, 371, 374, 379, 387, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 990, 1016], "precompil": 369, "arm": [369, 379, 955], "cython3": 369, "cento": 369, "yum": 369, "devel": 369, "gnu": 369, "port": [369, 387, 1018], "pkg": 369, "build_ext": [369, 377], "build_clib": 369, "linker": [369, 372], "sysconfig": 369, "counterpart": [369, 955, 963, 981, 996], "get_config_var": 369, "sklearn_build_parallel": 369, "tracker": [370, 374, 379, 382, 385, 387, 390, 984, 987], "prioriti": [370, 617, 811, 812, 987, 1011], "guidelin": [370, 374, 376, 377, 379, 395, 396, 403], "reformul": 370, "xyz": 370, "someestim": 370, "glanc": 370, "relabel": [370, 799, 800, 880], "stall": [370, 374], "sprint": [370, 371, 984, 1008], "unfinish": [370, 371], "supersed": [370, 1013], "overflow": [370, 379, 382, 1011, 1015, 1016, 1017, 1018, 1019, 1021], "submitt": 370, "strive": [370, 385, 990], "expertis": [370, 371, 382], "unclear": [370, 371, 486], "pleasant": [370, 990], "chime": 370, "permiss": [370, 375, 385, 387, 990, 1023], "matthew": [370, 376, 521, 727, 1008, 1011, 1015, 1017, 1021, 1022], "rocklin": [370, 376], "acknowledg": [370, 594], "struggl": [370, 385, 396], "everyon": [371, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "underrepres": 371, "merit": [371, 375, 385], "teach": 371, "priceless": 371, "abid": 371, "codeofconduct": 371, "hesit": 371, "typo": [371, 385, 1008], "send": [371, 396, 408, 518], "valuabl": [371, 956, 990], "burden": [371, 855, 987], "slep": [371, 384, 984], "templat": [371, 375, 376, 384, 385, 542, 543, 548, 549, 550, 551, 986], "ecosystem": [371, 956, 985, 990], "contrib": [371, 373, 379, 382, 384, 396, 986, 987, 1024], "numpydoc": [371, 384, 387, 389], "compli": [371, 384, 914, 987], "fulfil": [371, 396, 403, 781, 784, 785, 795, 843, 847, 962], "anyon": [371, 385, 990], "gist": [371, 379, 989], "repo": [371, 375, 987], "feasibl": [371, 852, 853, 863], "traceback": [371, 376, 379, 382, 453, 989], "doubt": [371, 372, 375, 962, 972, 986], "companion": [371, 976], "transcript": 371, "inclus": [371, 373, 379, 435, 441, 738, 770, 966, 967, 1008, 1022], "yourlogin": 371, "flake8": [371, 387, 389, 564], "mypi": [371, 375, 387, 389, 1019], "synchron": [371, 404], "my_featur": 371, "commit": [371, 375, 379, 989, 1008, 1009, 1010, 1011], "modified_fil": 371, "committ": [371, 1008], "modif": [371, 399, 403, 404, 431, 979], "approv": [371, 385, 403], "mrg": [371, 379], "incomplet": [371, 387, 396, 690, 777, 956, 963, 1001, 1012, 1014], "wip": [371, 379, 387], "matur": [371, 986, 987], "broad": [371, 384, 986], "collabor": 371, "_logist": 371, "doctest": [371, 384, 993, 1008], "test_logist": [371, 379], "rst": [371, 375, 379, 1001, 1008, 1013], "test_common": [371, 379], "caught": [371, 379, 390], "editor": [371, 379, 382], "submodul": [371, 375, 377, 395, 958, 964, 1008], "intricaci": 371, "narr": [371, 384, 643, 883, 888, 1008, 1009], "unittest": 371, "tests_for_packag": 371, "static": [371, 373, 377, 379, 631, 632, 637, 638, 645, 646, 647, 648], "astropi": 371, "linux": [371, 373, 374, 379, 986, 1008], "lint": [371, 379], "aarch64": [371, 379, 387], "gh": 371, "nogil": [371, 372], "cpython": [371, 372, 377, 1023], "pyodid": 371, "sklearn_run_float32_test": 371, "lengthi": [371, 382], "etiquett": 371, "she": [371, 873, 874, 1018], "he": [371, 710, 740, 840, 841, 873, 874, 966, 1001, 1015, 1022, 1023], "shorten": [371, 981, 1021], "leader": [371, 990], "grab": 371, "familiar": [371, 402, 1016], "acquaint": 371, "experienc": 371, "abandon": 371, "someon": [371, 375, 384, 1008], "glad": 371, "restructuredtext": 371, "_build": 371, "viewabl": 371, "pillow": [371, 387, 389], "sphinxext": [371, 387, 389], "opengraph": [371, 387, 389], "vast": 371, "examples_pattern": 371, "your_regex_goes_her": 371, "no_mathjax": 371, "latexpdf": 371, "elabor": [371, 967], "paragraph": [371, 404, 488, 1001], "hood": [371, 962, 981], "colon": 371, "selectfpr": [371, 405, 577, 580, 583, 584, 585, 591, 1024], "some_param": 371, "hello": [371, 379, 927], "goodby": 371, "liter": [371, 375, 990], "array_paramet": 371, "list_param": 371, "typed_ndarrai": 371, "multioutput_arrai": 371, "bracket": [371, 962], "delimit": [371, 972, 1023], "unwritten": 371, "bibliograph": 371, "arxiv": [371, 447], "backtick": [371, 376], "nowadai": 371, "syntax": [371, 376, 379, 397, 955, 992, 1019, 1021], "_my": 371, "ref": [371, 378, 379, 956, 1014], "currentmodul": 371, "succeed": 371, "stone": [371, 891, 892, 982], "subdirectori": 371, "subpackag": [371, 375, 984, 1012, 1017], "cleanup": [371, 1008], "charg": 371, "test_requiring_mpl_fixtur": 371, "hang": [371, 989, 1018, 1019], "fruit": [371, 967], "asv": 371, "asv_benchmark": 371, "airspe": 371, "veloc": 371, "publicli": [371, 1018], "zero_on": [371, 1009], "example_funct": 371, "exampleestim": 371, "_n_cluster": 371, "versionchang": 371, "meet": [371, 382, 385, 405, 557, 588, 840, 841, 880, 966, 979, 990, 1016, 1017, 1018], "nit": 371, "retract": 371, "grammar": 371, "disambigu": [371, 811, 880, 979, 1023], "Will": [371, 482, 519, 612, 629, 630, 631, 637, 641, 642, 645, 646, 647, 648, 649, 650, 658, 660, 692, 699, 772, 848, 852, 856, 863, 1011, 1012, 1014, 1016], "clariti": [371, 379], "unhelp": 371, "extran": 371, "rewritten": [371, 634, 1010, 1012], "generos": 371, "reward": 371, "heard": 371, "ve": [371, 404, 989, 990, 1001, 1015], "enemi": 371, "courtesi": 371, "justifi": [371, 377, 394, 550], "occas": 371, "deserv": [371, 377], "digest": [371, 1023], "overwhelm": 371, "sheer": [371, 990], "myself": 371, "trickiest": 371, "buri": 371, "inherit": [371, 373, 383, 384, 562, 661, 912, 914, 962, 1008, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1023, 1024], "mixin": [371, 384, 411, 412, 413, 414, 415, 416, 417, 418, 586, 914, 1010, 1019, 1023], "classifiermixin": [371, 373, 384, 400, 1019], "grep": 371, "delai": [371, 481, 781, 795, 804, 805, 934, 1022, 1023], "some_funct": [371, 910], "some_iter": 371, "flavor": [371, 969], "pointer": [371, 379, 427, 1017], "mandatori": [371, 404], "favorit": [371, 382, 990], "Being": [371, 385, 390, 962, 969], "killer": [371, 990], "blame": 371, "migrat": [371, 1008], "ignorerevsfil": 371, "rev": [371, 592, 593], "ruin": 371, "maco": [372, 374, 387, 1016, 1020, 1022], "sklearn_enable_debug_cython_direct": 372, "scratch": [372, 427, 966, 1010], "magic": [372, 377, 406, 601, 606, 609], "gdb": [372, 374, 989], "entrypoint_to_bug_reproduc": 372, "cdef": 372, "state_to_print": 372, "test_val": 372, "unifi": [372, 380, 382, 383, 403, 622, 986, 1008], "fuse": [372, 1014, 1024], "ongo": [372, 385], "concret": [372, 385, 405, 653, 659, 660, 661, 662, 875, 876, 962, 980], "alia": [372, 375, 379, 384, 602, 940, 972, 987, 1008, 1022], "shell": [372, 379, 382, 992, 1001], "cythonx": 372, "language_level": 372, "wraparound": 372, "initializedcheck": 372, "nonecheck": 372, "cdivis": 372, "recompil": [372, 377, 387], "pep073": 372, "pathwai": 372, "memoryview": 372, "cnp": 372, "lightweight": [372, 781, 795, 804, 805, 986], "virtual": [372, 387, 400, 990], "enter": [372, 375, 396, 427, 973], "prang": 372, "void": 372, "my_func": [372, 377], "st\u00e9fan": 372, "benhel": 372, "_cython_bla": 372, "protect": [372, 375, 932], "_openmp_help": 372, "cimport": [372, 380, 1016], "omp_get_max_thread": 372, "prolifer": 373, "adopt": [373, 384, 879, 966, 980, 1016, 1023], "predomin": [373, 1009], "overrid": [373, 404, 431, 435, 442, 527, 533, 573, 574, 576, 578, 579, 582, 641, 649, 670, 671, 825, 826, 827, 829, 831, 833, 834, 835, 1008, 1016, 1018, 1022, 1024], "creation": [373, 496, 497, 498, 500, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 641, 823, 824, 990, 1015, 1016, 1017, 1021], "optimis": [373, 396, 969, 986, 1011, 1021, 1023], "param1": [373, 998], "param2": [373, 998], "param3": 373, "postpon": [373, 375], "requisit": 373, "liner": [373, 809], "ipython": [373, 376, 377, 379, 993, 1001], "session": [373, 377, 382, 387, 985, 990, 1001], "trainabl": 373, "trail": [373, 950], "overridden": [373, 384, 406, 527, 533, 601, 606, 609, 679, 1016, 1017], "n_features_in_": [373, 384, 416, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 596, 612, 613, 614, 615, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 779, 780, 781, 784, 785, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 1019, 1021, 1023], "slep010": [373, 1019], "duck": [373, 384, 1018], "boilerpl": [373, 990, 1001], "check_x_i": [373, 380, 1012, 1016, 1017, 1022], "check_arrai": [373, 380, 453, 519, 881, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "templateclassifi": 373, "demo_param": 373, "myestim": 373, "subestim": 373, "my_extra_param": 373, "my_estim": [373, 397], "subestimator__c": 373, "subestimator__class_weight": 373, "subestimator__du": 373, "subestimator__fit_intercept": 373, "subestimator__intercept_sc": 373, "subestimator__l1_ratio": 373, "subestimator__max_it": 373, "subestimator__multi_class": 373, "subestimator__n_job": 373, "subestimator__penalti": 373, "subestimator__random_st": 373, "subestimator__solv": 373, "subestimator__tol": 373, "subestimator__verbos": 373, "subestimator__warm_start": 373, "__c": 373, "__class_weight": 373, "unpack": 373, "easiest": [373, 379, 397, 963], "__repr__": [373, 987, 1017], "setattr": 373, "accomplish": [373, 394, 531, 963, 967, 969, 990], "deepcopi": 373, "__sklearn_clone__": [373, 419, 1024], "frozen": 373, "frozentransform": 373, "fitted_transform": [373, 449], "__getattr__": 373, "_estimator_typ": [373, 384, 1013], "regressormixin": [373, 384, 450, 1019], "clustermixin": 373, "is_classifi": [373, 384], "predict_log_proba": [373, 384, 534, 535, 536, 538, 540, 542, 544, 549, 578, 579, 643, 644, 661, 781, 784, 785, 795, 804, 818, 819, 820, 821, 822, 840, 843, 880, 885, 888, 891, 893, 981, 1008, 1021], "programmat": [373, 484, 1017], "_get_tag": [373, 1019], "allow_nan": [373, 902, 904, 1024], "binary_onli": [373, 1018, 1019], "multioutput_onli": 373, "no_valid": 373, "non_determinist": [373, 1022], "primari": [373, 384, 401, 500, 973, 990], "_safe_split": 373, "preserves_dtyp": 373, "poor_scor": 373, "requires_fit": 373, "requires_positive_x": [373, 1018, 1023], "requires_i": [373, 1019], "requires_positive_i": 373, "_skip_test": 373, "_xfail_check": 373, "check_nam": 373, "xfail": [373, 379], "skiptestwarn": 373, "x_type": 373, "2darrai": 373, "signifi": [373, 396, 566, 792, 971], "1dlabel": 373, "2dlabel": 373, "_more_tag": 373, "mymultioutputestim": 373, "_required_paramet": 373, "ridgeregress": 373, "idiosyncrat": 373, "subclass": [373, 406, 559, 932, 1013, 1016, 1021], "onetoonefeaturemixin": [373, 418], "classnameprefixfeaturesoutmixin": [373, 418, 1023], "auto_wrap_output_kei": 373, "mytransform": 373, "__init_subclass__": 373, "ownership": 373, "pep8": [373, 375, 379], "indent": [373, 932], "nsampl": [373, 779, 780], "statement": [373, 376, 379, 382, 384, 401, 984, 1001], "flow": 373, "client": 373, "corollari": 373, "foo": [373, 566, 970], "baz": [373, 566], "pyflak": 373, "asanyarrai": 373, "hadamard": 373, "choose_random_sampl": 373, "freestand": 373, "unmodifi": [373, 384], "random_state_": [373, 521, 612, 832, 1022], "gaussiannois": 373, "showcas": 373, "quasi": [373, 840, 841, 962], "assert_allclos": 373, "rtol": [373, 823, 824, 828], "atol": [373, 657, 659, 823, 824, 828], "checklist": 374, "unclaim": 374, "workflow": [374, 375, 383, 400], "boil": [374, 398], "markdown": 374, "saniti": [374, 847, 966, 1008, 1009], "outdat": 374, "diff": [374, 966], "valgrind": 374, "platform": [374, 382, 384, 385, 390, 990, 1013, 1016, 1017, 1019, 1021, 1022], "x86_64": [374, 387], "yep": 374, "gperftool": 374, "debugg": [374, 379], "gprof": 374, "callgrind": 374, "kcachegrind": 374, "warm": [374, 384, 516, 522, 528, 530, 531, 595, 638, 644, 651, 653, 661, 662, 663, 962, 987, 1018, 1020, 1022], "homebrew": [374, 387], "freebsd": 374, "rrrcn": 375, "pep101": 375, "build_tool": 375, "blocker": 375, "mileston": 375, "maint_tool": 375, "sort_whats_new": 375, "whats_miss": 375, "fixm": [375, 384], "feedstock": 375, "recip": [375, 963, 990], "yaml": 375, "whats_new": [375, 379], "v0": [375, 456, 457, 463, 497, 573, 574, 576, 781, 795, 842, 845, 1009, 1016, 1017, 1018], "freez": [375, 387, 390, 987, 990, 1016], "afterward": [375, 520, 526, 807], "0rc1": 375, "__version__": 375, "draft": [375, 385], "rebas": 375, "bugfix": [375, 1008, 1022], "backport": [375, 380, 1015], "maint": 375, "enh": 375, "blindli": 375, "invit": 375, "cherri": 375, "shortlog": 375, "f2": [375, 967], "sed": [375, 1008], "front": [375, 1015], "rc1": 375, "suffix": [375, 806, 966, 1018], "brows": 375, "3a": 375, "22wheel": 375, "pyproject": 375, "toml": 375, "oldest": [375, 481], "abi": 375, "acronym": 375, "deliveri": 375, "whl": 375, "22publish": 375, "went": [375, 966], "bot": [375, 971, 1022], "sync": 375, "testpypi": 375, "tarbal": [375, 1023], "wheelhouse_upload": 375, "twine": 375, "rrr": 375, "symlink": 375, "latestst": 375, "tmp": 375, "ln": [375, 962, 970, 976], "versionwarn": 375, "secur": [375, 384, 986, 987, 990, 1003], "twitter": 375, "linkedin": 375, "squash": [375, 406, 516, 522, 527, 533], "authorship": 375, "permalink": 375, "_hist_gradient_boost": 375, "_iter": 375, "pickl": [375, 384, 390, 404, 573, 574, 576, 823, 824, 986, 987, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024], "checker": [375, 803], "type_check": 375, "test_enable_hist_gradient_boost": 375, "enable_hist_gradient_boost": [375, 1017], "enable_my_experimental_featur": 375, "indefinit": 375, "incentiv": 375, "workabl": 376, "stackoverflow": [376, 379, 382, 989], "blogpost": 376, "mcve": [376, 379, 382], "my_data": 376, "with_mean": [376, 863, 874, 976, 1016, 1021], "default_scor": 376, "other_scor": 376, "scrollbar": 376, "tripl": 376, "fenc": 376, "qualifi": 376, "a674e682c281": 376, "lda_featur": 376, "lda_model": 376, "n_topic": [376, 521, 1015], "minimalist": [376, 404, 989], "continuous_featur": 376, "positive_featur": 376, "invest": [377, 990], "idiom": 377, "wast": [377, 400, 401, 955], "crunch": 377, "performancetip": 377, "reimplement": [377, 384, 1014, 1018], "spottabl": 377, "amen": [377, 406, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 955], "cpp": 377, "engag": [377, 385], "tent": 377, "somewher": [377, 966, 1001], "prun": 377, "14496": [377, 1017], "ncall": 377, "tottim": 377, "percal": 377, "cumtim": 377, "lineno": 377, "042": 377, "_nls_subproblem": 377, "1263": 377, "157": 377, "_po": 377, "057": [377, 522], "047": 377, "_initialize_nmf": 377, "_spars": 377, "_neg": 377, "337": 377, "461": 377, "hotspot": 377, "16159": [377, 1019], "840": 377, "2833": 377, "653": [377, 596, 599, 610], "_dotbla": 377, "651": 377, "036": [377, 457], "1397": 377, "2780": 377, "064": [377, 974], "1542": 377, "2734": 377, "fromnumer": 377, "1185": 377, "lapack_lit": 377, "dgesdd": 377, "rewrit": [377, 982, 1000, 1008], "shallow": [377, 403, 546, 547, 898], "4x": [377, 1023], "line_profil": 377, "wire": [377, 519, 526], "profile_default": 377, "ipython_config": 377, "terminalipythonapp": 377, "interactiveshellapp": 377, "lprun": 377, "qtconsol": 377, "_nmf": 377, "73153": 377, "h_init": 377, "138": [377, 403, 406, 966], "5863": 377, "172": [377, 478, 479, 634, 962], "nl": 377, "173": [377, 569], "112141": 377, "2336": 377, "wtv": 377, "176": [377, 816, 967, 974], "16144": 377, "336": [377, 976], "wtw": 377, "113": [377, 1011], "638": 377, "1880": 377, "195133": 377, "305": 377, "grad": [377, 990], "495761": 377, "777": 377, "proj_gradi": 377, "2449": 377, "130": 377, "1474": 377, "4474": 377, "inner_it": 377, "83833": 377, "hn": 377, "194239": 377, "191": [377, 967], "48858": 377, "150407": 377, "102": [377, 999, 1010], "gradd": 377, "515390": 377, "349": 377, "dqd": 377, "pin": 377, "memory_profil": [377, 387, 389], "memit": 377, "mprun": 377, "1e7": 377, "402344": 377, "standalon": [377, 643, 883, 989], "bianp": 377, "conda_prefix": 377, "pydebug": 377, "extra_cflag": 377, "dpy_debug": 377, "num_cor": 377, "dbg": 377, "fortun": [377, 403, 1001, 1021, 1022], "my_fil": 377, "callgrin": 377, "prof": 377, "encapsul": [378, 397], "artist": [378, 423, 617, 683, 685, 686, 687, 787, 897], "classmethod": [378, 423, 616, 617, 682, 683, 685, 686, 687, 787], "line_": [378, 423, 683, 685, 686, 687, 787], "gridspecfromsubplotspec": 378, "subplot_spec": 378, "get_subplotspec": 378, "ax_top_left": 378, "ax_top_right": 378, "ax_bottom": 378, "bounding_ax_": [378, 617], "lines_": [378, 617, 787], "contours_": [378, 617], "advic": [379, 406, 607, 608], "forth": 379, "userscript": 379, "tampermonkei": 379, "greasemonkei": 379, "shortcut": [379, 406], "pr_number": 379, "navig": [379, 1010], "overlai": [379, 617], "codecov": 379, "test_sparsifi": 379, "pdb": 379, "ipdb": [379, 1001], "pdbcl": 379, "terminalpdb": 379, "lf": 379, "ff": 379, "tb": [379, 556, 557, 558, 559, 560, 561, 562, 563], "runxfail": 379, "werror": 379, "mailman": 379, "listinfo": 379, "crowd": [379, 385, 963, 987, 989], "imped": 379, "attent": [379, 592, 593, 980], "pytb": 379, "stdin": [379, 1001], "perman": 379, "25163598": 379, "issuenumb": 379, "1506": 379, "volunt": 379, "establish": [379, 382, 385, 956], "clarifi": [379, 385, 775], "regression_test": 379, "0008": 379, "patienc": [379, 384], "manifest": [379, 963, 969], "fault": [379, 1016, 1018, 1020], "glibc": 379, "uniniti": 379, "trace": [379, 396, 409, 458, 460, 461, 464, 465, 466, 674, 678, 963, 1019], "supp": 379, "readm": [379, 404, 478], "my_test_script": 379, "mobil": 379, "deploy": [379, 986, 987, 990], "scalewai": 379, "aw": 379, "graviton": 379, "laptop": [379, 453, 881, 1022, 1023, 1024], "workstat": 379, "qemu": 379, "docker": [379, 390, 1021, 1022], "multiarch": 379, "ppc64le": 379, "filesystem": [379, 387, 1021], "pushd": 379, "wget": 379, "arm64v8": 379, "mount": 379, "privileg": 379, "pwd": 379, "reinit": 379, "bashrc": 379, "ephemer": 379, "evolv": [380, 1023], "as_float_arrai": 380, "column_or_1d": [380, 1019, 1023], "multitarget": 380, "multi_output": [380, 903], "safe_index": [380, 1018], "check_memori": [380, 384, 1015], "5488135": 380, "71518937": 380, "60276338": 380, "54488318": 380, "has_fit_paramet": 380, "randomized_range_find": [380, 1009, 1014], "arrayfunc": 380, "cholesky_delet": 380, "min_po": 380, "least_angl": 380, "fast_logdet": 380, "safe_sparse_dot": [380, 1018], "weighted_mod": 380, "sample_without_replac": [380, 1014], "n_popul": [380, 935], "sparsefunc": [380, 1021], "mean_variance_axi": [380, 1014, 1021], "sparsefuncs_fast": 380, "inplace_csr_row_normalize_l1": 380, "inplace_csr_row_normalize_l2": 380, "inplace_csr_column_scal": 380, "sort_graph_by_row_valu": [380, 1023], "single_source_shortest_path_length": 380, "dijkstra": [380, 673, 963], "graph_shortest_path": [380, 1021], "all_estim": [380, 1018, 1019, 1023], "all_displai": [380, 1023], "all_funct": [380, 1023], "is_multilabel": 380, "dict_learn": [380, 516, 522, 531, 1009, 1016, 1018, 1021, 1022, 1024], "gen_batch": [380, 924], "safe_mask": 380, "safe_sqr": 380, "murmurhash3_32": 380, "murmurhash3_x86_32": [380, 931], "cryptograph": 380, "lookup": [380, 931, 1017], "bloom": [380, 931], "384616559": 380, "3910350737": 380, "murmurhash": 380, "graphical_lasso": [380, 456, 457, 1016, 1024], "kit": 382, "toolbox": [382, 986, 990], "multilay": [382, 964], "kera": [382, 986], "forese": 382, "redesign": [382, 1008], "pystruct": [382, 986], "ssvm": 382, "seqlearn": 382, "4143": 382, "meanwhil": [382, 981], "pipegraph": 382, "squared_loss": [382, 1021], "undertak": 382, "discourag": [382, 387, 674], "slowli": [382, 384, 529, 920], "ordinarili": [382, 384], "corrobor": 382, "proof": [382, 403, 877, 978], "road": 382, "bridg": [382, 963, 986], "reproduct": [382, 962, 989], "guidanc": [382, 406], "gitter": [382, 984, 1015, 1016], "value_kei": [382, 898], "levenshtein": 382, "dna": [382, 613, 956], "rna": 382, "pain": 382, "suppli": [382, 396, 631, 903, 904, 969, 990, 1012, 1014, 1016, 1021], "leven": 382, "acctcctagaag": 382, "acctactagaagtt": 382, "gaatattaggccga": 382, "lev_metr": 382, "multiprocess": [382, 384, 932, 934, 969, 1008, 1016, 1022], "exec": 382, "nvidia": 382, "cuda": [382, 392], "reiniti": 382, "culprit": 382, "refus": [382, 873, 874], "forkserv": 382, "joblib_start_method": 382, "set_start_method": 382, "dozen": [383, 406], "newli": [383, 403, 448, 973, 1014, 1015, 1023], "leakag": [383, 384, 397, 1003], "disclos": 383, "entail": [383, 861, 863, 980], "r_squar": 383, "searchcv": [383, 1023], "tacit": 384, "inconsist": [384, 390, 404, 493, 494, 561, 885, 888, 907, 972, 981, 1003, 1008, 1013, 1014, 1015, 1016, 1018, 1021, 1023, 1024], "elsewher": [384, 447, 448, 456, 457, 463], "formal": [384, 385, 396, 403, 823, 824, 963, 966, 967, 970], "thereof": 384, "transduct": [384, 396, 878, 879, 987], "position": 384, "serial": [384, 986, 987, 1003, 1008, 1016, 1020], "unpickl": [384, 390, 561, 823, 824, 1014, 1020, 1024], "pep257": 384, "nuanc": 384, "flaw": [384, 403], "terminologi": [384, 1016], "est1": [384, 617], "est2": [384, 617], "exemplifi": 384, "_score": [384, 781, 795, 806, 966, 1008, 1021], "_loss": [384, 966], "divers": [384, 403], "abstract": [384, 401, 406, 603, 753, 986, 1008], "notfittederror": [384, 832, 950, 1012, 1014, 1017, 1018, 1024], "descriptor": [384, 493, 494], "hoc": 384, "spectral_embed": [384, 963, 1009, 1012, 1014, 1016, 1018, 1021, 1022, 1023], "maxabs_scal": [384, 852, 1016], "astrai": 384, "readthedoc": [384, 385], "entireti": 384, "shield": 384, "n_output": [384, 403, 413, 417, 418, 422, 427, 430, 450, 454, 467, 468, 469, 517, 519, 521, 522, 524, 527, 528, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 567, 568, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 596, 613, 615, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 653, 655, 657, 658, 659, 660, 661, 663, 664, 706, 707, 712, 729, 730, 732, 734, 735, 737, 738, 769, 772, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 830, 832, 833, 834, 839, 840, 841, 842, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 875, 876, 878, 879, 883, 884, 885, 886, 888, 889, 891, 892, 893, 894, 909, 937, 966, 967, 982, 1015, 1018], "n_target": [384, 399, 467, 468, 469, 470, 509, 541, 596, 628, 631, 632, 635, 636, 637, 638, 639, 641, 642, 645, 646, 647, 648, 649, 650, 656, 657, 658, 659, 660, 666, 667, 668, 669, 670, 671, 672, 967, 1020, 1022, 1024], "synonym": [384, 825, 826, 827, 833, 834, 835], "themat": 384, "alphanumer": [384, 573, 574, 576], "statistician": [384, 863], "prescrib": 384, "baggingclassifi": [384, 403, 541, 893, 956, 1011, 1014, 1015, 1016, 1019, 1023, 1024], "estimator__max_depth": [384, 955], "improp": [384, 1015], "pairwise_kernel": [384, 406, 437, 628, 749, 849, 964, 1008, 1015], "distancemetr": [384, 402, 823, 824, 969, 1016, 1020, 1021, 1022], "di": [384, 396, 401, 516, 522, 649, 670, 671, 876, 1012, 1021], "vectori": [384, 1018], "noun": 384, "rout": [384, 1022], "fit_param": [384, 418, 422, 427, 430, 450, 517, 519, 521, 522, 524, 527, 528, 534, 552, 554, 555, 567, 568, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 613, 615, 620, 623, 624, 625, 626, 627, 781, 784, 785, 787, 795, 804, 805, 806, 807, 808, 810, 815, 816, 817, 827, 832, 835, 839, 842, 843, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 875, 876, 1015, 1018, 1019, 1020, 1022, 1024], "venu": [384, 989], "broadli": [384, 396], "consolid": [384, 385, 1008], "coo": [384, 538, 539, 677, 850, 899, 903, 904, 969, 1009], "lil": [384, 538, 539, 850, 899, 925, 969], "csgraph": [384, 1021], "absent": [384, 404, 738, 804], "densifi": [384, 401, 643, 644, 651, 653, 661, 662, 663, 883, 956, 1010], "lossili": 384, "unnorm": [384, 521, 963, 1014, 1015], "encompass": [384, 435, 441, 540, 541, 963], "is_regressor": 384, "get_n_split": [384, 782, 783, 786, 788, 789, 790, 791, 794, 796, 797, 798, 799, 800, 801, 802], "estimatorcv": [384, 987], "loo": [384, 789, 1019], "type_of_target": [384, 850, 864, 967, 1022, 1023], "hashabl": [384, 851, 854, 977], "labelencod": [384, 554, 857, 977, 1008, 1016, 1023], "canonic": 384, "xxx": 384, "everywher": 384, "multilabelbinar": [384, 812, 847, 856, 967, 992, 1011, 1013, 1014, 1016, 1017], "nonetheless": [384, 966], "wherein": 384, "amber": 384, "return_cov": [384, 552, 553, 596, 843], "test_idx": 384, "_idx": 384, "label1": 384, "label2": 384, "class_label": [384, 542, 546, 549, 643, 644, 651, 653, 659, 660, 661, 891, 893, 909, 981], "bincount": [384, 400, 542, 546, 549, 643, 644, 651, 653, 659, 660, 661, 883, 885, 888, 891, 893, 908, 909, 1015], "rebalanc": 384, "compute_class_weight": [384, 1011, 1022], "check_cv": [384, 1013], "obei": [384, 964], "triangl": [384, 401, 428, 432, 444, 684, 964, 969], "concurr": [384, 404, 932, 1020, 1022], "unset": [384, 1016], "get_scor": [384, 717, 1015], "check_scor": 384, "uppercas": [384, 1021], "unavail": [384, 643, 644, 927, 1015, 1021], "deadlock": 385, "meritocrat": 385, "somebodi": 385, "unanim": 385, "emeritu": [385, 984], "recant": 385, "outreach": 385, "brand": [385, 387], "social": [385, 396, 990], "strateg": 385, "entiti": [385, 710, 740], "duti": 385, "resign": 385, "occasion": [385, 711, 1017], "escal": 385, "fallback": [385, 387, 811, 812, 966], "hereaft": 385, "lazi": [385, 404, 980, 1012], "opinion": 385, "slep020": 385, "veto": 385, "appeal": 385, "revis": [385, 655], "slep000": 385, "insuffici": [386, 965, 1000], "afraid": 387, "64bit": [387, 1008], "miniconda": 387, "administr": 387, "venvpython": 387, "venvsourc": 387, "activatesourc": 387, "activatesklearn": 387, "activatepip": 387, "learnpip": 387, "learnpip3": 387, "learnconda": 387, "installedpython3": 387, "virtualenvpython3": 387, "installedpython": 387, "virtualenvpython": 387, "installedconda": 387, "environmentpython": 387, "dnf": 387, "pacman": 387, "raspberri": 387, "lock": [387, 389, 932, 934], "19137": 387, "py3": 387, "apk": 387, "bind": [387, 1008, 1015, 1016], "buster": 387, "fedora30": 387, "pkgsrc": 387, "py39": 387, "intelex": [387, 986], "oned": 387, "sklearnex": 387, "plugin": 387, "appdata": 387, "usernam": 387, "windowsapp": 387, "environmenterror": 387, "errno": 387, "pythonsoftwarefound": 387, "7_qbz5n2kfra8p0": 387, "localcach": 387, "python37": 387, "292": [387, 403, 719], "australian": 387, "data_vers": 387, "lift": 387, "regedit": 387, "menu": 387, "hkey_local_machin": 387, "currentcontrolset": 387, "longpathsen": 387, "broken": [387, 400, 584, 585, 620, 705, 899, 966, 982, 1011, 1015, 1016, 1017, 1019, 1022], "retrain": [390, 987, 1024], "inconsistentversionwarn": [390, 1024], "simplefilt": 390, "model_from_prevision_vers": 390, "original_sklearn_vers": [390, 561], "untrust": 390, "malici": 390, "unsupport": [390, 478, 1016, 1021], "inadvis": 390, "immut": 390, "snapshot": [390, 544, 545, 987], "portabl": 390, "alex": [390, 404, 981, 1008, 1011, 1016, 1018, 1019, 1020, 1022, 1023, 1024], "gaynor": 390, "sio": 390, "obj": [390, 552, 553, 927, 932], "get_untrusted_typ": 390, "unknown_typ": 390, "exchang": [390, 989], "markup": 390, "pmml": [390, 986], "onnx": [390, 986, 987], "xml": 390, "sklearn2pmml": [390, 986], "affero": 390, "gplv3": 390, "datastructur": [392, 1016, 1020], "namespac": 392, "array_api": 392, "x_np": 392, "y_np": 392, "x_cu": 392, "y_cu": 392, "devic": [392, 400, 567], "array_api_dispatch": [392, 453, 881], "_estimator_with_converted_arrai": 392, "transfer": [392, 962, 987], "_array_api": 392, "cupy_to_ndarrai": 392, "lda_np": 392, "torch": 392, "x_torch": 392, "y_torch": 392, "submatrix": [393, 411, 436, 438], "unusu": [393, 972, 976, 1016], "submatric": 393, "bipartit": [393, 438, 496, 971], "subgraph": 393, "a_n": 393, "lceil": [393, 972], "log_2": [393, 548, 972], "rceil": [393, 972], "bmatrix": 393, "u_2": 393, "u_": [393, 467, 468, 469], "n_column": [393, 436, 438], "inderjit": [393, 438], "blockwis": [393, 962], "bistochast": [393, 436], "l_": [393, 596, 637, 725, 966], "k_": [393, 406, 601, 604, 606, 609, 758, 976], "u_1": 393, "v_1": 393, "v_2": 393, "v_": [393, 404], "kluger": [393, 436, 498], "yuval": [393, 436], "microarrai": [393, 436, 498, 613, 956], "cap": [393, 396, 739, 966, 1017], "hochreit": [393, 704], "hungarian": [393, 704], "bodenhof": [393, 704], "fabia": [393, 704], "acquisit": [393, 704], "murphi": [394, 628, 959], "discriminatori": 394, "wilk": 394, "tricki": [394, 963], "logit": [394, 406, 643, 644, 962], "f_i": 394, "train_set": 394, "test_set": 394, "disjoint": [394, 396, 397, 422, 689, 715, 739, 741, 963], "platt": [394, 422, 885, 886, 888, 889, 981], "_i": [394, 403, 957, 962, 966, 970, 981], "_j": [394, 957], "f_j": [394, 974], "meteorologi": 394, "climatologi": 394, "precipit": 394, "wea": 394, "650": 394, "1990a": 394, "menon": 394, "ak": [394, 1022, 1023], "jiang": [394, 1012, 1019], "xj": 394, "vembu": 394, "ohno": 394, "machado": [394, 707], "710": 394, "kull": [394, 966], "silva": [394, 673, 963, 1019, 1021], "filho": 394, "flach": [394, 966], "mario": [394, 1012, 1014, 1022, 1023, 1024], "w\u00fcthrich": 394, "merz": 394, "2023": [394, 1023], "actuari": 394, "refurbish": 395, "rough": [395, 972, 994], "uniti": 395, "lipschitz": [395, 978], "usecas": 396, "mu_j": 396, "coher": 396, "elong": 396, "lloyd": [396, 428, 432, 434, 444, 1022, 1023], "distant": [396, 677, 694, 969], "sergei": [396, 1010, 1014, 1015, 1016, 1017, 1018], "vassilvitskii": [396, 432, 445], "eighteenth": 396, "siam": [396, 400, 437, 445, 447, 520, 526], "industri": [396, 986], "predetermin": [396, 963], "scullei": 396, "19th": 396, "exemplar": [396, 425, 439, 1000], "sent": [396, 812], "leftarrow": [396, 970, 980], "foral": [396, 406, 598], "neq": [396, 966, 968, 976], "notin": 396, "hill": [396, 433, 446, 1018], "climb": [396, 433, 446], "maxima": [396, 406], "x_j": [396, 406, 599, 600, 604, 607, 608, 610, 957, 958, 962, 969, 981, 982], "dictat": 396, "solvabl": 396, "stella": [396, 437, 447], "jianbo": [396, 437, 447, 676], "shi": [396, 437, 447, 676], "anil": [396, 437, 447], "daml": [396, 437, 447], "victor": [396, 437, 447, 1015, 1018], "minden": [396, 437, 447], "lex": [396, 437, 447], "ying": [396, 437, 447, 1022], "adjac": [396, 401, 437, 447, 570, 571, 620, 676, 680, 925, 963, 969, 1000], "adjacency_matrix": 396, "ulrik": [396, 437, 447, 676], "von": [396, 437, 447, 676, 986, 1015, 1016], "luxburg": [396, 437, 447, 676], "jitendra": [396, 437, 447, 676], "malik": [396, 437, 447, 676], "walk": [396, 402, 1011], "marina": 396, "meila": 396, "ng": [396, 401, 676, 829, 970, 972, 1019], "jordan": [396, 401, 676, 779, 1018, 1019, 1022, 1023], "yair": [396, 676], "precondit": [396, 437, 447, 680, 982], "zhuzhunashvili": [396, 447], "forbid": [396, 403], "macroscop": 396, "occupi": [396, 966], "manhattan": [396, 426, 430, 435, 442, 684, 746, 755, 762, 763, 764, 830, 964, 969, 1012, 1017, 1024], "bisecting_strategi": [396, 428], "largest_clust": [396, 428], "biggest_inertia": [396, 428], "biggest": [396, 399, 401, 428], "steinbach": [396, 1023], "karypi": 396, "vipin": 396, "egin": 396, "minnesota": 396, "june": [396, 963, 1014], "weblog": 396, "abirami": 396, "mayilvahanan": 396, "emerg": [396, 990], "ijet": 396, "jian": 396, "xinyu": 396, "gou": 396, "baod": 396, "hebei": 396, "knee": 396, "triangular": [396, 448, 596, 963], "whichev": [396, 403, 431, 529, 546, 547, 618, 635, 639, 641, 649, 667, 668, 682], "conjunct": [396, 579, 781, 784, 785, 787, 795, 804, 805, 806, 807, 810, 933, 956, 962, 1023], "extract_dbscan": 396, "radius_neighbors_graph": [396, 407, 429, 825, 826, 827, 829, 831, 833, 834, 835, 836, 969, 1012, 1017, 1020], "ester": [396, 407, 429], "kriegel": [396, 407, 429, 435, 442, 829, 972], "sander": [396, 407, 429, 431, 435, 442, 829, 972, 1017, 1018], "xu": [396, 399, 407, 429, 980, 1021, 1022], "portland": [396, 407, 429], "aaai": [396, 407, 429, 818, 968], "revisit": [396, 407, 429], "schubert": [396, 407, 429, 435, 1012, 1013, 1016, 1017, 1019, 1020, 1021, 1022], "tod": [396, 407, 429], "lj2017": 396, "d_c": 396, "x_p": [396, 962], "d_m": 396, "x_q": 396, "g_": 396, "varepsilon": [396, 980, 981], "cm2013": 396, "mst": 396, "minimum_cluster_s": 396, "campello": [396, 431], "moulavi": [396, 431], "pei": [396, 1015], "tseng": 396, "cao": 396, "motoda": 396, "pakdd": 396, "lectur": [396, 629, 958, 985], "7819": [396, 1015], "berlin": [396, 401, 520, 681, 710, 740, 966], "heidelberg": [396, 401, 520, 681, 710, 740, 966], "mcinn": [396, 1014, 1015, 1016, 1018, 1019, 1024], "heali": 396, "icdmw": 396, "max_ep": [396, 435, 440, 442], "nearbi": [396, 969], "cluster_hierarchy_": [396, 435], "planar": 396, "peripheri": 396, "wall": 396, "ankerst": [396, 435, 442], "mihael": [396, 435, 442], "marku": [396, 435, 442, 1016, 1018, 1019, 1020], "breunig": [396, 435, 442, 829, 972], "han": [396, 427, 435, 442, 1008, 1016, 1017, 1021], "j\u00f6rg": [396, 435, 442, 1016], "sigmod": [396, 435, 442, 829, 972], "cft": 396, "lossi": 396, "cf": [396, 399, 427, 685, 962, 976, 987], "subclust": [396, 427], "till": [396, 427, 772, 966], "temporarili": [396, 1013], "farthest": 396, "brc": [396, 427], "tian": [396, 427, 1013, 1014, 1015], "raghu": [396, 427], "ramakrishnan": [396, 427], "maron": [396, 427], "livni": [396, 427], "sfu": [396, 427], "coursecentr": [396, 427], "zhang96": [396, 427], "roberto": [396, 427], "perdisci": [396, 427], "jbirch": [396, 427], "java": [396, 427, 986], "satisfi": [396, 635, 639, 684, 702, 720, 721, 823, 824], "labels_pr": [396, 689, 690, 699, 700, 702, 715, 720, 721, 739, 741, 770, 777], "unadjust": [396, 966, 1020], "swap": [396, 401, 701, 720, 945, 946, 1008], "ri": [396, 690, 770], "c_2": [396, 963], "unord": [396, 403, 976], "esp": [396, 1008], "hubert": [396, 690, 700, 770], "arabi": [396, 690, 700, 770], "steinlei": [396, 690], "psycholog": [396, 690, 701], "agreement": [396, 689, 701, 739, 741, 777, 966], "22504": 396, "10526": 396, "u_i": [396, 467, 468, 469, 739], "v_j": [396, 739, 971], "veb2009": 396, "a_i": 396, "b_j": 396, "yat2016": 396, "average_method": [396, 689, 741, 1016], "vinh": [396, 689], "veb2010": 396, "strehl": 396, "joydeep": 396, "583": [396, 999], "1162": 396, "153244303321897735": 396, "epp": [396, 689], "bailei": [396, 689], "26th": [396, 710, 740, 966], "1553374": 396, "1553511": 396, "9781605585161": 396, "csail": [396, 651, 652, 661, 820], "volume11": 396, "vinh10a": 396, "algesheim": 396, "tesson": 396, "30750": 396, "1038": 396, "srep30750": 396, "rosenberg": [396, 702, 721, 777], "hirschberg": [396, 702, 721, 777], "b2011": 396, "homogeneity_completeness_v_measur": [396, 1017], "n_k": [396, 535], "n_c": [396, 644], "julia": [396, 702, 721, 777], "media": [396, 990], "hila": 396, "becker": [396, 990, 1011, 1020], "fowlkes_mallows_scor": [396, 966, 1014, 1016], "fmi": [396, 715], "fp": [396, 697, 703, 715, 766, 767, 768, 771, 966], "fn": [396, 697, 703, 715, 766, 767, 768, 771, 966, 967], "47140": 396, "fowkl": [396, 715], "1983": [396, 715, 863], "tandfonlin": 396, "01621459": 396, "10478008": 396, "kmeans_model": 396, "1987": [396, 592, 593, 774, 775], "calinski_harabasz_scor": [396, 1016], "dispers": [396, 695, 709, 962], "561": 396, "n_e": 396, "mathrm": [396, 398, 401, 405, 962, 982], "b_k": 396, "w_k": [396, 962], "c_q": 396, "n_q": 396, "c_e": 396, "cali\u0144ski": 396, "1974": [396, 404, 695], "dendrit": [396, 695], "davies_bouldin_scor": [396, 1016], "6619": 396, "bould": 396, "c_i": [396, 969], "c_j": [396, 971], "s_i": [396, 976], "diamet": 396, "nonneg": [396, 401, 438, 523, 525, 532, 860], "s_j": 396, "max_": [396, 966], "1979": [396, 709, 753], "halkidi": 396, "batistaki": 396, "yanni": 396, "vazirgianni": 396, "michali": 396, "contingency_matrix": [396, 739, 1016], "pair_confusion_matrix": [396, 1020], "permit": [397, 452, 573, 574, 576, 781, 784, 785, 795, 805, 844, 845, 966, 967, 968, 1014], "clf__c": 397, "pca1": [397, 412], "svm1": 397, "77484909e": 397, "07058917e": 397, "pca2": [397, 412], "svm2": 397, "raw_target_regr": 397, "bypass": [397, 584, 631, 637, 891, 892, 893, 894], "check_invers": [397, 450, 847, 976, 1016, 1022, 1023], "caller": [397, 631, 632, 637, 645, 646, 647, 666, 873, 874, 934, 942, 943, 944, 1017], "linear_pca": 397, "make_union": [397, 842, 1011, 1015], "incorpor": [397, 403, 965, 986, 990], "unreli": 397, "citi": [397, 404, 451, 1001], "london": [397, 404, 451], "sallisaw": [397, 451], "bow": 397, "moveabl": 397, "feast": 397, "grape": 397, "wrath": 397, "expert_r": 397, "user_r": 397, "city_categori": 397, "title_bow": 397, "city_london": 397, "city_pari": 397, "city_sallisaw": 397, "ignored_new_col": 397, "estimator_html_repr": [397, 1019, 1020, 1021, 1022], "shrunk_covari": 398, "sigma_": [398, 629, 630, 1021], "365": [398, 458], "wiesel": [398, 409, 460], "eldar": [398, 409, 460], "hero": [398, 409, 460], "5016": [398, 409, 460], "5029": [398, 409, 460], "_k": [398, 960, 962], "glasso": [398, 463], "biostatist": [398, 463], "uncommon": [398, 643, 883, 981], "downweight": [398, 521], "driessen": [398, 454, 459, 972], "fastmcd": [398, 454, 459], "raw_location_": [398, 454, 459], "raw_covariance_": [398, 454, 459], "multidimension": [399, 673, 675, 677, 679, 963, 969], "plsw2a": 399, "u_k": [399, 401], "v_k": [399, 401, 516, 522, 530, 531], "x_k": [399, 401, 960, 969], "y_k": [399, 976], "xi_k": 399, "omega_k": [399, 960], "gamma_k": 399, "delta_k": 399, "nipal": [399, 468, 469], "xp": [399, 858], "x_rotations_": [399, 467, 468, 469], "y_rotations_": [399, 467, 468, 469], "ty": 399, "x_weights_": [399, 467, 468, 469, 470], "y_weights_": [399, 467, 468, 469, 470], "yv": 399, "tx": 399, "pls1": [399, 469], "pls2": [399, 469], "tx_k": [399, 960], "ty_k": 399, "ja": [399, 1015], "wegelin": 399, "methodolog": [400, 989], "academ": [400, 990], "commerci": [400, 990], "flowchart": [400, 994], "f1_macro": [400, 966, 1012], "custom_cv_2fold": 400, "custom_cv": 400, "9333": 400, "scorer1_nam": 400, "scorer2_nam": 400, "return_indic": [400, 806, 1024], "precision_macro": [400, 996], "recall_macro": [400, 966], "test_precision_macro": 400, "test_recall_macro": 400, "prec_macro": 400, "rec_macro": 400, "test_prec_macro": 400, "test_rec_macro": 400, "train_prec_macro": 400, "train_rec_macro": 400, "undistinguish": 400, "kf": [400, 786], "12883823": 400, "rkf": [400, 796], "weigh": [400, 1015], "caveat": [400, 406], "part3": 400, "spector": 400, "submodel": 400, "kohavi": 400, "jnt": 400, "bharat": [400, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "rao": [400, 1020, 1023], "fung": 400, "rosal": 400, "witten": 400, "leavepout": [400, 789, 996], "ss": 400, "gkf": 400, "sgkf": [400, 799], "suboptim": [400, 685, 687, 766, 773, 969, 1016, 1024], "leavepgroupsout": [400, 783, 996, 1014], "n_group": [400, 790, 996, 1014], "lpgo": [400, 790], "gss": [400, 783], "withheld": 400, "predefinedsplit": [400, 996, 1012], "test_fold": [400, 794], "train_indx": 400, "test_indx": 400, "autocorrel": 400, "superset": [400, 802, 966], "surplu": 400, "tscv": [400, 802], "inbuilt": 400, "some_integ": 400, "n_cv": [400, 422], "isotropi": 401, "alik": [401, 964], "halko": [401, 520, 526, 529, 919, 920], "szlam": [401, 919, 920], "disadvantag": [401, 406, 962, 963, 970, 980, 981, 982], "parsimoni": [401, 976], "jen09": 401, "mrl09": 401, "ell_1": [401, 962], "underset": [401, 962, 969, 982], "operatornam": [401, 725, 962, 966, 982], "fro": [401, 523, 525, 532, 678, 962], "gentli": 401, "spirit": 401, "mairal": [401, 516, 522], "bach": [401, 516, 521, 522, 523, 643, 962], "ponc": [401, 516, 522], "sapiro": [401, 516, 522], "jenatton": 401, "obozinski": 401, "scholkopf1997": 401, "bakir2003": 401, "smola": [401, 404, 520, 849, 976, 981], "klau": [401, 520, 849], "eigendecompos": 401, "eigensolv": [401, 437, 447, 520, 529, 680, 963], "eigsh": [401, 520, 1014, 1015], "lehoucq": 401, "sorensen": 401, "lsa": [401, 529, 1010], "synonymi": 401, "polysemi": 401, "lsi": 401, "sigma_k": [401, 960], "columnwis": 401, "sublinear": [401, 575, 576], "use_idf": [401, 404, 575, 576, 1001], "textual": [401, 982, 1017], "man": [401, 575, 753, 818, 822, 964, 966, 968], "prabhakar": 401, "raghavan": [401, 575, 818, 822, 964, 966, 968], "hinrich": 401, "sch\u00fctze": [401, 575, 964, 966, 968], "transform_method": 401, "split_cod": 401, "dictionarylearn": [401, 522, 524, 525, 527, 528, 529, 530, 531, 1009, 1013, 1015, 1018, 1021, 1022, 1023, 1024], "overcomplet": 401, "mammalian": 401, "cortex": 401, "inpaint": 401, "h_i": [401, 971], "psi": 401, "sim": [401, 999], "wh_i": 401, "ww": 401, "superflu": 401, "psi_1": 401, "psi_2": 401, "psi_n": 401, "superimpos": 401, "plug": [401, 962, 990, 1001], "wh": [401, 523, 525, 532], "hoyer": [401, 1011], "nndsvd": [401, 523, 525, 532, 1017, 1020], "nndsvdar": [401, 523, 525, 532, 1017], "elementwis": [401, 523, 525, 532], "_featur": [401, 523, 525, 532], "kl": [401, 963, 1016], "itakura": [401, 523, 525, 532, 1015], "saito": [401, 523, 525, 532, 1015], "w_new": 401, "forget_factor": [401, 523], "lee": [401, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1023], "seung": 401, "boutsidi": 401, "gallopoulo": 401, "cichocki": [401, 523, 525, 532], "phan": 401, "fevott": [401, 523, 525, 532], "idier": [401, 523, 525, 532], "lefevr": [401, 523], "corpora": 401, "hoffman": [401, 521, 1013, 1020], "unshad": 401, "beta_k": 401, "eta": [401, 521, 661, 662, 663, 970, 980, 1013], "topic_word_prior": [401, 521], "theta_d": 401, "doc_topic_prior": [401, 521], "z_": 401, "w_": [401, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 962, 966, 968, 971], "beta_": 401, "elbo": 401, "overset": [401, 973], "e_": 401, "blei": [401, 521, 779], "wang": [401, 521, 664, 674, 678, 710, 740, 962, 963, 966, 1011, 1013, 1014, 1015, 1016, 1020, 1023], "paislei": [401, 521], "kaiser": [401, 517], "talli": 402, "disproportion": 402, "41075698": 402, "41076071": 402, "rho_k": 402, "unsmooth": 402, "scott": [402, 828, 1008, 1009, 1014, 1016, 1017, 1018, 1023], "silvermann": 402, "propto": [402, 968], "2h": 402, "angular": [402, 677, 748], "contin": [402, 699, 976], "generaliz": 403, "flavour": 403, "b1999": 403, "b1996": 403, "h1998": 403, "lg2012": 403, "bootstrap_featur": [403, 540, 541], "844": [403, 540, 541], "geurt": [403, 540, 541, 542, 543, 550, 551, 893, 894], "346": [403, 486, 540, 541], "b1998": 403, "decoupl": [403, 968], "cancel": [403, 404, 747], "b2001": 403, "hgbt": 403, "bear": [403, 986], "ernst": [403, 542, 543, 550, 551, 893, 894], "wehenkel": [403, 542, 543, 550, 551, 893, 894], "l2014": 403, "lieg": 403, "freund": [403, 538, 539], "fs1995": 403, "w_1": [403, 962, 970], "w_2": [403, 962, 970], "w_n": 403, "w_i": [403, 957, 966], "reappli": 403, "htf": 403, "zzrh2009": 403, "d1997": 403, "semin": 403, "friedman2001": 403, "shelf": 403, "ecologi": 403, "lightgbm": [403, 546, 547, 1017, 1024], "913": [403, 544], "nr": 403, "f_m": 403, "h_m": 403, "f_": [403, 620, 966], "l_m": 403, "taylor": [403, 1016, 1018, 1019, 1022], "g_i": [403, 634], "absolute_error": [403, 543, 545, 547, 550, 656, 892, 894, 1021], "sum_m": 403, "softmax": [403, 546, 643, 644, 962, 969, 970], "superior": 403, "ineffici": [403, 428, 559, 811, 812, 969, 971], "r2007": 403, "friedman2002": 403, "1189": 403, "1232": 403, "8965": 403, "grower": [403, 546, 547], "missing": [403, 612, 613, 615, 1017], "fisher1958": 403, "loan": [403, 519, 962, 990], "nevertheless": 403, "mayer2022": 403, "mayer": [403, 1020, 1022], "bourassa": 403, "hoesli": 403, "scognamiglio": 403, "valuat": 403, "tianqi": 403, "guestrin": 403, "ke": [403, 1019, 1020], "boostingdecis": 403, "w2": 403, "w3": 403, "lr__c": 403, "rf__n_estim": 403, "w1992": 403, "knr": 403, "stack_method": [403, 552], "126": 403, "164": 403, "stack_method_": [403, 552, 553], "final_layer_rfr": 403, "final_layer_gbr": 403, "final_lay": 403, "multi_layer_regressor": 403, "wolpert": [403, 552, 553], "dubai": 404, "francisco": [404, 978], "movi": [404, 993], "movie_entri": 404, "thriller": [404, 854], "drama": 404, "000e": 404, "003e": 404, "011e": 404, "974e": 404, "unseen_featur": [404, 566], "speech": [404, 966], "chunker": 404, "pos_window": 404, "pos_vector": 404, "1x6": 404, "part_of_speech": 404, "token_featur": 404, "isupp": 404, "uppercase_initi": 404, "all_uppercas": 404, "raw_x": [404, 567], "pos_tagg": 404, "comprehens": [404, 742, 743, 964, 990, 1016], "murmurhash3": [404, 567, 574, 931], "weinberg": 404, "modulo": [404, 1019], "kilian": [404, 1023], "anirban": 404, "dasgupta": [404, 431, 877, 978], "langford": [404, 673, 963], "josh": [404, 1015], "attenberg": 404, "multitask": [404, 967], "punctuat": [404, 573, 574, 576], "diminish": 404, "4x9": 404, "build_analyz": [404, 573, 574, 576, 1018], "interrog": 404, "bigram_vector": 404, "cool": [404, 1008], "feature_index": 404, "him": 404, "constru": 404, "nqy18": 404, "smooth_idf": [404, 575, 576], "_n": [404, 966], "textbook": [404, 575], "6x3": 404, "81940995": 404, "57320793": 404, "47330339": 404, "88089948": 404, "58149261": 404, "81355169": 404, "term1": 404, "term2": 404, "term3": 404, "0986": [404, 847], "819": 404, "573": 404, "8473": 404, "8515": [404, 1015], "5243": 404, "85151335": 404, "52433293": 404, "55422893": 404, "83236428": 404, "63035731": 404, "77630514": 404, "idf_": [404, 575, 576, 1016], "western": 404, "europ": [404, 976], "koi8": 404, "russian": 404, "modern": [404, 453, 488, 575, 675, 679, 714, 881, 963, 987, 1024], "unicodedecodeerror": [404, 573, 574, 576], "told": 404, "silent": [404, 566, 839, 976, 1013, 1014, 1016, 1017, 1021, 1022], "chardet": 404, "chardetect": 404, "damag": 404, "sloppili": 404, "ftfy": 404, "mish": 404, "mash": 404, "text1": 404, "sei": 404, "mir": 404, "gegr": 404, "xc3": 404, "xbc": 404, "x9ft": 404, "mein": 404, "sauerkraut": 404, "text2": 404, "holdselig": 404, "sind": 404, "dein": 404, "ger": 404, "xfcche": 404, "text3": 404, "xff": 404, "xfea": 404, "x00u": 404, "x00f": 404, "x00": 404, "x00l": 404, "xfc": 404, "x00g": 404, "x00e": 404, "x00n": 404, "x00d": 404, "x00a": 404, "x00h": 404, "x00r": 404, "x00z": 404, "x00i": 404, "x00b": 404, "x00c": 404, "x00t": 404, "x00o": 404, "spolski": 404, "nnmf": [404, 1002, 1003, 1008], "phrase": 404, "misspel": 404, "rescu": 404, "resili": 404, "wprd": 404, "ngram_vector": 404, "char_wb": [404, 573, 574, 576], "rd": 404, "wo": 404, "wp": [404, 642, 656], "char": [404, 573, 574, 576, 1008], "jumpi": 404, "fox": 404, "1x4": 404, "umpi": 404, "1x5": 404, "mpy": 404, "fo": 404, "barrier": 404, "hv": 404, "4x10": 404, "discrep": [404, 1001, 1012], "4x1048576": 404, "collid": 404, "ingest": 404, "spend": 404, "my_token": 404, "lowercas": [404, 412, 427, 428, 430, 432, 434, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 573, 574, 576, 624, 625, 626, 627, 673, 674, 677, 827, 832, 835, 839, 844, 849, 875, 876, 1021], "lucen": 404, "build_preprocessor": [404, 573, 574, 576, 1018], "whitespac": 404, "fanci": 404, "lemmat": 404, "nltk": [404, 985, 986], "word_token": 404, "wordnetlemmat": 404, "lemmatoken": 404, "wnl": 404, "british": 404, "spell": 404, "to_british": 404, "1or": 404, "bt": 404, "1er": 404, "ing": 404, "ation": 404, "1z": 404, "ogu": 404, "og": 404, "customvector": 404, "asian": 404, "one_imag": [404, 569], "fake": 404, "assert_array_equ": 404, "patchextractor": [404, 1024], "five_imag": 404, "variancethreshold": [405, 848, 956, 1011, 1018, 1021, 1024], "sel": 405, "selectfdr": [405, 577, 581, 583, 584, 585, 591, 1012, 1014, 1015, 1024], "selectfw": [405, 577, 580, 581, 584, 585, 591, 1024], "genericunivariateselect": [405, 580, 581, 583, 584, 585, 587, 1022, 1024], "r_regress": [405, 591, 1021, 1022], "nonparametr": [405, 592, 593], "bewar": 405, "importance_gett": [405, 578, 579, 582, 1020], "unimport": 405, "lsvc": 405, "baraniuk": 405, "isr": 405, "ist": 405, "utl": 405, "aguiar": 405, "cs_note": 405, "ferri": [405, 966], "versatil": [406, 981, 990], "optima": 406, "markov": [406, 596, 971, 986, 1008], "ppmv": 406, "197": 406, "0336": 406, "4ppm": 406, "27ppm": 406, "197ppm": 406, "nuisanc": 406, "one_vs_on": [406, 595, 967], "ingredi": 406, "duv2014": 406, "theta_l": 406, "x_bound": [406, 602], "operand": 406, "k1__": 406, "k2__": 406, "constant_valu": [406, 598, 602], "constant_value_bound": [406, 596, 598, 602], "k1__k1__constant_valu": 406, "value_typ": [406, 602], "n_element": [406, 602], "k2__length_scal": 406, "k1": [406, 606, 609], "k1__k1": 406, "k1__k1__constant_value_bound": 406, "k1__k2": 406, "k1__k2__length_scale_bound": 406, "k2": [406, 606, 609], "k2__length_scale_bound": 406, "69314718": [406, 597, 976], "30258509": 406, "interoper": [406, 984, 987, 1003], "pairwisekernel": 406, "_valu": [406, 598], "_level": [406, 610], "k_1": [406, 606, 609], "k_2": [406, 606, 609], "__add__": [406, 609], "__mul___": 406, "__pow__": [406, 601], "2l": [406, 607], "bigg": [406, 604], "bessel": [406, 604], "rightarrow": [406, 604, 970], "quad": [406, 969, 980], "tfrac": 406, "3l": 406, "pp84": 406, "x_d": [406, 599], "inhomogen": [406, 599], "expon": [406, 601, 661, 662, 663, 793, 840, 841, 858, 955], "carl": [406, 595, 596, 599, 604, 607], "rasmussen": [406, 595, 596, 599, 604, 607], "duvenaud": [406, 607, 608], "cookbook": [406, 607, 608], "minkowski": [407, 429, 435, 442, 673, 684, 762, 763, 764, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 969, 1008, 1011, 1022, 1023], "metric_param": [407, 429, 431, 435, 442, 673, 677, 825, 826, 827, 828, 829, 831, 833, 834, 835, 836, 837, 1012, 1015, 1022], "leaf_siz": [407, 429, 431, 435, 442, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835], "kd_tree": [407, 429, 435, 442, 673, 674, 825, 826, 827, 828, 829, 831, 833, 834, 835, 969, 1021], "balltre": [407, 429, 431, 435, 442, 673, 674, 684, 825, 826, 827, 828, 829, 831, 833, 834, 835, 836, 837, 963, 1008, 1010, 1012, 1016, 1021, 1024], "ckdtree": [407, 429, 1010], "inhibit": [407, 429], "core_sampl": 407, "n_core_sampl": [407, 429], "attract": [407, 429, 960, 969, 986], "fun": [408, 518, 990], "logcosh": [408, 518], "fun_arg": [408, 518], "w_init": [408, 518], "whiten_solv": [408, 518, 1023], "return_x_mean": 408, "compute_sourc": 408, "return_n_it": [408, 439, 444, 463, 530, 531, 631, 632, 637, 638, 645, 646, 647, 648, 666, 667, 668, 669, 670, 671, 672, 679, 1022], "cube": [408, 518], "my_g": [408, 518], "x_mean": 408, "AS": 408, "fortran": [408, 526, 631, 632, 637, 638, 645, 646, 647, 648, 650, 666, 669, 670, 671, 903, 904, 1008, 1011, 1012, 1016], "hyvarinen": [408, 518], "oja": [408, 518], "shrunk_cov": [409, 464, 466], "eq": [409, 460, 706, 707, 708], "subobject": [410, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 779, 780, 781, 784, 785, 795, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894], "row_ind": [411, 436, 438], "intp": [411, 436, 438], "col_ind": [411, 436, 438], "get_submatrix": [411, 436, 438], "pca0": 412, "_n_features_out": 412, "class_name0": [412, 427, 428, 430, 432, 434, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 624, 625, 626, 627, 673, 674, 677, 827, 832, 835, 839, 849, 875, 876], "class_name1": [412, 427, 428, 430, 432, 434, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 624, 625, 626, 627, 673, 674, 677, 827, 832, 835, 839, 849, 875, 876], "class_name2": [412, 427, 428, 430, 432, 434, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 624, 625, 626, 627, 673, 674, 677, 827, 832, 835, 839, 849, 875, 876], "feature_names_out": [412, 416, 427, 428, 430, 432, 434, 449, 467, 468, 469, 470, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 551, 552, 553, 554, 555, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 612, 613, 614, 615, 620, 623, 624, 625, 626, 627, 673, 674, 677, 827, 832, 835, 839, 842, 843, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 875, 876, 1022], "harsh": [413, 422, 454, 534, 535, 536, 538, 540, 542, 544, 546, 549, 552, 554, 595, 643, 651, 653, 659, 660, 661, 811, 812, 813, 814, 818, 819, 820, 821, 822, 825, 830, 833, 840, 878, 879, 883, 885, 888, 891, 893, 1018, 1020, 1023], "n_samples_fit": [417, 450, 467, 468, 469, 539, 541, 543, 545, 547, 550, 553, 555, 596, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 664, 673, 816, 817, 825, 826, 827, 829, 831, 833, 834, 835, 841, 884, 886, 889, 892, 894], "uniform_averag": [417, 450, 467, 468, 469, 539, 541, 543, 545, 547, 550, 553, 555, 596, 620, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 664, 706, 707, 712, 729, 730, 732, 734, 735, 737, 769, 816, 817, 826, 834, 841, 884, 886, 889, 892, 894, 966, 1017], "n_features_new": [418, 427, 430, 517, 519, 521, 522, 524, 527, 528, 534, 552, 554, 555, 567, 568, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 613, 615, 620, 623, 624, 625, 626, 627, 832, 839, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 875, 876], "base_clf": 422, "calibrated_clf": 422, "927": 422, "x_calib": 422, "y_calib": 422, "prob_tru": [423, 424], "prob_pr": [423, 424], "ref_lin": 423, "alexandru": 424, "22nd": 424, "convergence_it": [425, 439], "hardcod": [425, 439, 1016], "affinity_matrix_": [425, 437, 676], "cluster_center_indic": [425, 439], "compute_full_tre": [426, 430, 1012], "compute_dist": [426, 430, 1020], "inferior": [426, 430, 1019], "n_leaves_": [426, 430], "n_connected_components_": [426, 430, 1017], "branching_factor": 427, "compute_label": [427, 434], "promot": [427, 693, 986, 1019, 1021], "redistribut": 427, "overwritten": [427, 517, 518, 519, 521, 526, 533, 592, 593, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 657, 659, 664, 666, 667, 668, 669, 671, 934, 936, 1021], "root_": 427, "_cfnode": 427, "cftree": 427, "dummy_leaf_": 427, "subcluster_labels_": 427, "centroids_": [427, 431, 830], "copy_x": [428, 432, 444, 520, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 657, 659, 664, 666, 667, 668, 669, 670, 1010, 1016, 1017], "smart": [428, 444, 445, 575], "k_init": [428, 444], "sse": 428, "bisect_mean": 428, "pooling_func": [430, 1016], "xred": 430, "cluster_selection_epsilon": 431, "max_cluster_s": 431, "cluster_selection_method": 431, "eom": 431, "store_cent": 431, "kdtree": [431, 435, 442, 673, 674, 823, 825, 826, 827, 828, 829, 831, 833, 834, 835, 1010, 1012, 1016, 1020, 1021], "excess": [431, 976, 1015], "medoid": 431, "overwrit": [431, 616, 992, 1008, 1019], "medoids_": 431, "zimek": 431, "chaudhuri": 431, "jaskowiak": 431, "malzer": 431, "baum": 431, "hybrid": [431, 634, 986], "dbscan_clust": 431, "border": [431, 1018], "unclust": 431, "socg2006": 432, "min_bin_freq": [433, 446], "cluster_al": [433, 446], "get_bin_se": 433, "orphan": [433, 446, 1008], "reassignment_ratio": 434, "eec": [434, 626], "tuft": 434, "dscullei": 434, "fastkmean": 434, "55102041": 434, "48979592": 434, "06896552": 434, "cluster_method": 435, "predecessor_correct": [435, 441], "unprocess": [435, 573, 574, 576], "heap": 435, "braycurti": [435, 442, 684, 762, 763, 764, 969], "canberra": [435, 442, 684, 762, 763, 764, 969], "chebyshev": [435, 442, 684, 762, 763, 764, 969], "dice": [435, 442, 684, 762, 763, 764, 969], "kulsinski": [435, 442, 684, 762, 763, 764], "rogerstanimoto": [435, 442, 684, 762, 763, 764, 969], "russellrao": [435, 442, 684, 762, 763, 764, 969], "seuclidean": [435, 442, 684, 762, 763, 764, 830, 969, 1016, 1019, 1020], "sokalmichen": [435, 442, 684, 762, 763, 764, 969], "sokalsneath": [435, 442, 684, 762, 763, 764, 969], "yule": [435, 442, 762, 763, 764], "manhattan_dist": [435, 442, 673, 746, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 1008, 1018, 1023, 1024], "minkowski_dist": [435, 442, 673, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837], "l_p": [435, 442, 673, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837], "upward": [435, 441], "successor": [435, 441, 982, 986], "predecessor": [435, 441, 442], "predecessor_": [435, 442], "erich": [435, 1012, 1013, 1016, 1017, 1019, 1020, 1021, 1022], "gertz": 435, "lernen": 435, "wissen": 435, "daten": [435, 1016, 1017], "analysen": 435, "lwda": 435, "329": 435, "n_best": 436, "n_svd_vec": [436, 438], "mini_batch": [436, 438], "n_row_clust": [436, 438, 498], "n_column_clust": [436, 438, 498], "ncv": [436, 438], "n_oversampl": [436, 438, 526, 529, 920, 1022], "kernel_param": [437, 520, 624, 628], "precomputed_nearest_neighbor": [437, 676], "eigendecomposit": [437, 447, 658, 676, 680, 849], "dist_matrix": 437, "541": [437, 447], "csc_matrix": [437, 542, 543, 548, 549, 550, 551, 860, 891, 892, 893, 894, 956, 976, 982, 1013], "best_n_it": 444, "n_local_tri": 445, "n_seed": 446, "multigrid": 447, "multiscal": 447, "preliminari": 447, "heapq": 448, "topolog": [448, 986], "n_connected_compon": 448, "n_leav": [448, 891, 892, 893, 894], "untransform": [449, 452, 977], "transformers_": 449, "remaining_column": 449, "named_transformers_": 449, "sparse_output_": [449, 536], "output_indices_": [449, 1021], "datatyp": [449, 451, 1015, 1018], "norm1": 449, "norm2": 449, "text_preprocess": 449, "num_preprocess": 449, "x_t": [449, 612, 842], "sum_n_compon": [449, 842], "transformer_": 450, "predict_param": [450, 552, 553, 843, 1021], "y_hat": 450, "90453403": 451, "50755672": 451, "30151134": 451, "print_changed_onli": [453, 881, 1017, 1019, 1020], "pairwise_dist_chunk_s": [453, 881], "enable_cython_pairwise_dist": [453, 881], "skip_parameter_valid": [453, 881, 1024], "cache_s": [453, 881, 885, 886, 887, 888, 889, 981], "get_config": [453, 765, 881, 933, 1023], "offset_": [454, 548, 662, 829, 887, 1016], "raw_support_": [454, 459], "dist_": [454, 459], "true_cov": [454, 456, 457], "7411": [454, 459, 1014], "2535": [454, 459], "3053": [454, 459], "0813": [454, 459], "0427": [454, 459], "correct_covari": [454, 459], "rvd": [454, 459], "covariance_correct": [454, 459], "comp_cov": [454, 455, 456, 457, 458, 459, 460, 461], "get_precis": [454, 455, 456, 457, 458, 459, 460, 461, 517, 519, 526], "is_inli": [454, 548, 829], "reweight_covari": [454, 459], "rvdriessen": [454, 459], "location_reweight": [454, 459], "covariance_reweight": [454, 459], "support_reweight": [454, 459], "negative_mahal_dist": 454, "7569": 455, "2818": 455, "3928": 455, "0622": [455, 461], "0193": [455, 461], "enet_tol": [456, 457, 463, 1013], "220446049250313e": [456, 457, 463, 635, 636, 639, 640, 641, 667, 668], "graphlasso": [456, 1013, 1016], "costs_": [456, 457, 1024], "dual_gap": [456, 457, 463, 631, 632, 637, 638, 645, 646, 647, 648, 666, 669], "return_cost": [456, 457, 463], "034": 456, "093": [456, 1013], "038": [456, 457, 840], "n_refin": 457, "graphlassocv": [457, 1010, 1016], "dualiti": [457, 962], "094": 457, "block_siz": [458, 464, 465, 1012], "4406": 458, "1616": 458, "0595": 458, "0075": [458, 526], "rouseeuw1984": 459, "butlerdavi": 459, "butler": [459, 1011, 1019, 1020], "davi": [459, 709, 966, 1012], "jhun": 459, "7533": [460, 1015], "2763": 460, "3964": 460, "7833": 460, "2431": 460, "3889": 460, "0195": 460, "7387": 461, "2536": 461, "4110": 461, "cov_init": [463, 1024], "graph_lasso": [463, 1016], "x_loadings_": [467, 468, 469], "y_loadings_": [467, 468, 469], "plssvd": [467, 468, 988, 1003, 1020, 1022], "x_c": [467, 468, 470, 973], "y_c": [467, 468, 470], "y_reconstruct": [467, 468, 469], "x_scores_": [469, 1020], "y_scores_": [469, 1020], "y_transform": 470, "data_hom": [471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 1015], "sklearn_learn_data": [471, 484], "zero_bas": [472, 493, 494], "query_id": [472, 493, 494], "grok": 472, "qid": [472, 493, 494, 1009, 1014], "download_if_miss": [473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 1015], "ioerror": [473, 474, 475, 476, 477, 478, 479, 480, 482, 483], "stopword": [474, 1001], "target_column": [474, 475, 481], "percent": [477, 585, 979], "494021": 477, "slice_": [478, 479, 1023], "195": [478, 479], "unrestrict": 478, "2914": 479, "5748": 479, "n_retri": [481, 1022], "timeout": [481, 932, 1022], "412": [481, 962], "ith": [481, 758, 762, 819, 840, 841, 856, 857], "1592": 483, "1212": 483, "1624": 483, "620": 483, "data_filenam": [486, 490], "target_filenam": [486, 490], "container_path": 488, "load_cont": 488, "allowed_extens": 488, "container_fold": 488, "category_1_fold": 488, "file_1": 488, "file_2": 488, "file_42": 488, "category_2_fold": 488, "file_43": 488, "file_44": 488, "mod": 488, "image_nam": 491, "first_img_data": 492, "backup": [493, 1008], "instantan": 493, "mycach": 493, "get_data": 493, "mysvmlightfil": 493, "xn": 494, "yn": [494, 967, 968], "q1": 494, "qn": 494, "yi": [494, 968, 1012, 1016, 1017, 1020], "qi": [494, 1020], "triplet": 494, "minval": [496, 498], "maxval": [496, 498], "seventh": [496, 978], "269": 496, "274": 496, "return_cent": [497, 1019], "intric": 497, "basri": 498, "gerstein": 498, "genom": 498, "flip_i": 500, "interdepend": 500, "polytop": 500, "guyon": [500, 578, 579, 966], "madelon": 500, "1991": [501, 502, 503], "12000": 505, "effective_rank": [506, 509], "tail_strength": [506, 509], "bell": [506, 1016, 1018, 1020, 1021], "fat": [506, 509], "crawl": [506, 912], "return_ind": 508, "make_low_rank_matrix": 509, "4967": 509, "1382": 509, "6476": 509, "2341": 509, "4694": 509, "5425": 509, "579": 509, "7674": [509, 1015], "4017": 509, "data_transpos": [511, 1022, 1024], "norm_diag": 512, "make_spd_matrix": 512, "celeux": 513, "el": [513, 1021, 1023], "anbari": 513, "marin": 513, "frequentist": 513, "n_dim": [514, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610], "marsland": 515, "vuw": 515, "nz": 515, "marslast": 515, "ch6": 515, "code_init": [516, 530], "dict_init": [516, 522, 530, 531], "callback": [516, 522, 524, 530, 531, 832, 932, 987, 1024], "split_sign": [516, 522, 527], "transform_max_it": [516, 522, 523, 527, 1018], "_fro": [516, 522, 530, 531, 631, 632, 637, 645, 646, 647, 666], "lasso_cd": [516, 522, 527, 533], "invok": [516, 522, 524, 530, 531, 552, 554, 555, 804, 880, 1020], "error_": [516, 528], "minibatchsparsepca": [516, 518, 522, 525, 527, 528, 530, 531, 1008, 1009, 1019, 1021, 1022, 1023, 1024], "sierra": [516, 522], "icml09": [516, 522], "x_hat": [516, 522], "noise_variance_init": 517, "quartimax": [517, 1020], "loglike_": 517, "barber": 517, "bishop": [517, 519, 526, 725, 779, 962, 967, 981], "get_covari": [517, 519, 526], "unmixing_matrix": 518, "whitening_": 518, "kpca": [518, 519, 520, 1002, 1003, 1008], "unsaf": 519, "singular_values_": [519, 526, 529, 1015], "var_": [519, 821, 863, 1021], "miketip": [519, 526], "mppca": [519, 526], "n_samples_seen_": [519, 852, 853, 863, 1016], "batch_size_": 519, "ross": [519, 592, 593, 982, 1022, 1023], "vision": [519, 742, 743, 958, 962, 964, 982, 986, 990, 1009], "141": [519, 883, 967], "toronto": [519, 629, 839], "dross": 519, "ivt": 519, "rosslimlinyang_ijcv": 519, "karhunen": 519, "loev": 519, "levi": [519, 1015], "lindenbaum": 519, "1371": 519, "1374": 519, "abstain": 519, "holub": 519, "opportun": [519, 980], "golub": [519, 821, 863], "x_spars": [519, 937, 940], "sigma2": [519, 526], "x_origin": [519, 524, 526, 528, 529, 615, 875, 876], "check_input": [519, 533, 631, 632, 637, 645, 646, 647, 666, 672, 891, 892, 893, 894, 1016], "remove_zero_eig": [520, 1010, 1017], "x_fit_": [520, 628], "eigenvalues_": [520, 1021], "eigenvectors_": [520, 1021], "dual_coef_": [520, 628, 885, 886, 887, 888, 889, 981, 1012], "x_transformed_fit_": 520, "gamma_": [520, 1024], "nathan": [520, 1016, 1020, 1023], "gunnar": [520, 920], "tropp": [520, 526], "288": [520, 526], "vladimir": [520, 920, 962, 1018, 1022], "rokhlin": [520, 526, 920], "tygert": [520, 526, 920], "learning_decai": 521, "evaluate_everi": 521, "perp_tol": 521, "mean_change_tol": 521, "max_doc_update_it": 521, "kappa": [521, 701], "tau_0": 521, "pseudocount": [521, 1016], "exp_dirichlet_component_": 521, "n_batch_iter_": 521, "bound_": 521, "doc_topic_prior_": 521, "topic_word_prior_": 521, "franci": [521, 643, 962, 1014], "onlineldavb": 521, "chong": 521, "00360392": 521, "25499205": 521, "0036211": 521, "64236448": 521, "09541846": 521, "15297572": 521, "00362644": 521, "44412786": 521, "39568399": 521, "003586": 521, "vb": 521, "sub_sampl": 521, "doc_topic_distr": [521, 1015], "fresh_restart": 523, "fresh_restarts_max_it": 523, "_w": [523, 525, 532], "_ratio": [523, 525, 532], "_h": [523, 525, 532], "fresh": [523, 987, 1018], "reconstruction_err_": [523, 525], "andrzej": [523, 525, 532], "anh": [523, 525, 532], "ieic": [523, 525, 532], "708": [523, 525, 532, 734], "721": [523, 525, 532], "waspa": 523, "ridge_alpha": [524, 528, 1015], "power_iteration_norm": [526, 529, 919, 920, 1022], "500x500": 526, "lu": [526, 529, 919, 920, 1014, 1015, 1016, 1017], "n_samples_": 526, "royal": [526, 612, 859, 871, 980], "methodologi": [526, 856, 956, 966, 990], "9924": 526, "30061": 526, "54980": 526, "00755": 526, "99244": 526, "ascontiguousarrai": 526, "sparse_encod": [527, 635, 636, 637, 638, 639, 640, 641, 648, 649, 650, 667, 668, 669, 670, 671, 1008, 1015, 1016, 1018, 1022], "u_init": 528, "v_init": 528, "9666": 528, "oversampl": [529, 1008], "indeterminaci": 529, "x_dens": 529, "0157": 529, "0512": 529, "0499": 529, "0479": 529, "0453": 529, "2102": 529, "5981": 529, "5420": 529, "4486": 529, "3288": 529, "method_max_it": [530, 531, 1018], "dict_learning_onlin": [530, 1009, 1018, 1021, 1022], "return_cod": 531, "iter_offset": [531, 1022], "return_inner_stat": [531, 1022], "inner_stat": [531, 1022], "update_h": 532, "_n_compon": 532, "hal": [532, 643, 742, 743, 964], "copy_cov": 533, "orthogonal_mp": [533, 649, 650, 671, 962], "eigen": [534, 658, 676, 680, 960, 1014, 1017], "sum_k": [534, 982], "prior_k": 534, "c_k": 534, "priors_": [534, 535], "scalings_": [534, 535], "xbar_": 534, "reg_param": 535, "scaling_": 535, "colinear": 535, "rotations_": 535, "n_classes_": [536, 538, 540, 542, 544, 549, 595, 811, 812, 891, 893, 1009, 1018, 1020], "class_prior_": [536, 821], "n_outputs_": [536, 537, 542, 543, 549, 550, 551, 840, 841, 891, 892, 893, 894], "dummy_clf": 536, "constant_": 537, "dummy_regr": 537, "base_estimator_": [538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 595, 880, 1023], "983": [538, 712], "dok": [538, 539, 850, 1021], "staged_decision_funct": [538, 544, 546], "staged_scor": [538, 539], "7972": 539, "9771": 539, "estimators_samples_": [540, 541, 548, 1014, 1016, 1019], "estimators_features_": [540, 541, 548], "oob_decision_function_": [540, 542, 549], "oob_prediction_": [541, 543, 550], "8720": [541, 1016], "min_weight_fraction_leaf": [542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894, 982, 1011, 1014, 1015], "min_impurity_decreas": [542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894, 982, 1015], "shannon": [542, 549, 891, 893, 963, 982], "unlimit": [542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894], "n_t": [542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894], "n_t_r": [542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894], "right_impur": [542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894], "n_t_l": [542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894], "left_impur": [542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894], "balanced_subsampl": [542, 549, 1016], "subtre": [542, 543, 544, 545, 549, 550, 891, 892, 893, 894, 982], "unprun": [542, 543, 549, 550, 891, 892, 893, 894], "x_leav": [542, 543, 544, 545, 549, 550, 551, 891, 892, 893, 894], "n_nodes_ptr": [542, 543, 549, 550, 551], "friedman_ms": [543, 544, 545, 550, 892, 894, 982, 1024], "extratreeregressor": [543, 548, 551, 893, 972, 1017, 1018, 1019, 1021, 1022, 1023], "2727": 543, "dummyestim": [544, 545], "eras": [544, 545, 631, 637, 643, 645, 647, 651, 652, 653, 661, 662, 663, 840, 841], "oob_scores_": [544, 545, 1024], "init_": [544, 545], "init_estim": [544, 545], "max_features_": [544, 545, 582, 891, 892, 893, 894, 1022], "_fit_stag": [544, 545], "crossentropi": 546, "deepest": [546, 547, 1019], "no_interact": [546, 547, 1023], "do_early_stopping_": [546, 547], "n_trees_per_iteration_": [546, 547], "validation_score_": [546, 547], "is_categorical_": [546, 547], "n_trees_per_iter": 546, "max_samples_": 548, "fei": [548, 972], "ting": [548, 972, 1016, 1017], "ming": [548, 972, 1012, 1016, 1017, 1018, 1022], "zhou": [548, 624, 879, 972, 1016], "zhi": [548, 972], "hua": [548, 972], "icdm": [548, 972], "eighth": [548, 972], "tkdd": 548, "n_left": 548, "32987858": 550, "n_out": 551, "one_hot_encoder_": 551, "extratreeclassifi": [551, 894, 967, 1012, 1017, 1018, 1019, 1021, 1022, 1023], "moosmann": 551, "trigg": 551, "juri": 551, "random_tre": 551, "x_sparse_embed": 551, "randomtreesembedding_": 551, "final_estimator_": [552, 553], "named_estimators_": [552, 553, 554, 555, 1016, 1018], "named_estim": [552, 553, 554, 555], "parameter_nam": [552, 553, 554, 555], "new_valu": [552, 553, 554, 555], "linearsvr": [553, 889, 1012, 1014, 1019, 1024], "flatten_transform": [554, 1015], "le_": 554, "eclf1": 554, "array_equ": [554, 1015], "eclf2": 554, "eclf3": 554, "maj": 554, "probabilities_or_label": 554, "n_regressor": 555, "r1": 555, "r3": 555, "er": 555, "with_traceback": [556, 557, 558, 559, 560, 561, 562, 563], "__traceback__": [556, 557, 558, 559, 560, 561, 562, 563], "current_sklearn_vers": 561, "repr": [562, 1019, 1020, 1022], "linter": 564, "spam": [566, 694, 725, 818, 966, 968, 990], "feature_names_": 566, "xa": 566, "dict_typ": 566, "conform": [566, 613, 811, 812, 966, 986, 987, 1015, 1021], "1048576": [567, 574], "non_neg": [567, 1015], "eleph": 567, "bird": [567, 703, 738, 966], "patch_height": [568, 569, 572], "patch_width": [568, 569, 572], "img_height": 568, "img_width": 568, "pe": 568, "pe_tran": 568, "263758": 568, "image_height": [568, 569, 572], "image_width": [568, 569, 572], "n_channel": [568, 569, 572], "n_patch": [568, 569, 572], "272214": 569, "230": 569, "215": 569, "n_z": 570, "return_a": [570, 571, 1011], "_coo": [570, 571], "image_s": 572, "strip_acc": [573, 574, 576], "nfkd": [573, 574, 576, 1018], "unicodedata": [573, 574, 576], "regexp": [573, 574, 576], "min_n": [573, 574, 576, 1008], "max_n": [573, 574, 576, 1008], "fixed_vocabulary_": [573, 576], "stop_words_": [573, 576], "delattr": [573, 576, 1020], "vectorizer2": 573, "raw_docu": [573, 576], "get_stop_word": [573, 574, 576], "x_inv": [573, 576], "con": 574, "yates2011": 575, "baeza": [575, 714, 1011], "yate": [575, 714], "ribeiro": [575, 714, 1021], "neto": [575, 714], "addison": [575, 714], "weslei": [575, 714], "mrs2008": 575, "tfid": 575, "22314355": 575, "51082562": 575, "91629073": 575, "_check_stop_list": 576, "pvalu": [577, 580, 581, 583, 584, 585, 808], "k_best": [577, 880, 979], "fdr": 577, "fwe": 577, "iff": [577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 854], "retent": [577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588], "n_selected_featur": [577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588], "n_original_featur": [577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588], "attrgett": [578, 582], "barnhil": [578, 579], "vapnik": [578, 579], "422": [578, 579, 710, 740, 966], "n_subsets_of_featur": 579, "narrai": 579, "benjamini": [580, 1014, 1015], "hochberg": [580, 1014, 1015], "false_discovery_r": 580, "norm_ord": [582, 1015], "threshold_": [582, 1015], "3252302": 582, "83462377": 582, "49750423": 582, "55245": 582, "half_cal": 582, "half_selector": 582, "unspecifi": [584, 585, 783, 963], "_get_support_mask": 586, "n_features_to_select_": 587, "variances_": 588, "weed": 589, "p_valu": [589, 590, 591], "f_statist": [590, 591], "force_finit": [591, 594, 712, 769, 966, 1022], "pearson": [591, 594, 1021], "discrete_featur": [592, 593], "essenc": [592, 593, 727, 963, 966], "kraskov": [592, 593], "stogbauer": [592, 593], "grassberg": [592, 593], "phy": [592, 593], "kozachenko": [592, 593], "leonenko": [592, 593], "probl": [592, 593], "peredachi": [592, 593], "correlation_coeffici": 594, "fmin_l_bfgs_b": [595, 596], "max_iter_predict": 595, "copy_x_train": [595, 596], "one_vs_rest": [595, 967], "compoundkernel": [595, 1022], "obj_func": [595, 596], "initial_theta": [595, 596], "theta_opt": [595, 596], "func_min": [595, 596], "_posterior_mod": 595, "log_marginal_likelihood_value_": [595, 596], "9866": [595, 604, 607], "83548752": 595, "03228706": 595, "13222543": 595, "79064206": 595, "06525643": 595, "14410151": 595, "clone_kernel": [595, 596, 1018], "n_kernel_param": [595, 596], "log_likelihood_gradi": [595, 596], "x_train_": 596, "y_train_": 596, "3680": [596, 599, 610], "592": [596, 599, 610, 973], "y_cov": 596, "n_samples_x": [596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 684, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 764, 765], "requires_vector_input": [597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610], "51292546": 597, "09861229": [597, 976], "n_samples_i": [597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 684, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 764, 765], "n_kernel": 597, "k_gradient": [597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610], "k_diag": [597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610], "hyperparameter_constant_valu": 598, "3696": 598, "hyperparameter_sigma_0": 599, "edward": [599, 604, 607, 1011, 1016, 1017, 1018, 1019, 1023], "hyperparameter_length_scal": [600, 604, 607, 608], "hyperparameter_period": 600, "0144": 600, "457": 600, "3894": 600, "3467": 600, "419": 601, "559": 601, "namedtupl": [602, 1024], "maxsiz": 602, "mat\u00e9rn": 604, "appr": 604, "8513": 604, "0368": 604, "1117": 604, "8086": [604, 1015], "0693": 604, "1220": 604, "gamma_bound": 605, "pairwise_kernels_kwarg": 605, "additive_chi2": [605, 623, 749, 758], "pairwise_kernel_funct": [605, 628, 758], "hyperparameter_gamma": 605, "9733": [605, 608], "8880": 605, "05663": 605, "05532": 605, "8676": [605, 1015], "07073": 605, "06165": 605, "__mul__": 606, "8354": [607, 1015], "03228": 607, "1322": 607, "7906": [607, 634], "0652": 607, "1441": 607, "hyperparameter_alpha": 608, "8881": 608, "0566": 608, "05518": 608, "8678": 608, "0707": 608, "0614": 608, "hyperparameter_noise_level": 610, "initial_strategi": 612, "imputation_ord": [612, 1018], "skip_complet": 612, "min_valu": [612, 1019, 1020], "max_valu": [612, 1019, 1020], "keep_empty_featur": [612, 613, 615, 956, 1023], "nullabl": [612, 613, 614, 615, 1019, 1023], "na": [612, 613, 614, 615, 753, 762, 901, 903, 904, 1018, 1019, 1022, 1023], "known_val": 612, "Nearness": 612, "arab": 612, "broadcast": 612, "missingind": [612, 613, 615, 956, 1016, 1017, 1018, 1022, 1024], "initial_imputer_": 612, "imputation_sequence_": 612, "feat_idx": 612, "neighbor_feat_idx": 612, "n_features_with_missing_": 612, "indicator_": [612, 613, 615], "knp": 612, "stef": [612, 956], "buuren": [612, 956], "karin": [612, 956], "groothui": [612, 956], "oudshoorn": [612, 956], "buck": 612, "1960": [612, 701], "imp_mean": [612, 615], "9584": [612, 1015], "nan_euclidean": [613, 746, 762], "_pairwise_cal": 613, "kwd": [613, 755, 758, 762, 765, 774, 775], "olga": [613, 956], "troyanskaya": [613, 956], "cantor": [613, 956], "gavin": [613, 956], "sherlock": [613, 956], "pat": [613, 956], "botstein": [613, 956], "russ": [613, 956], "altman": [613, 956], "bioinformat": [613, 956], "520": [613, 832, 956, 969], "n_output_featur": 613, "error_on_new": 614, "features_": [614, 956], "n_missing_featur": 614, "x2_tr": 614, "n_features_with_miss": 614, "statistics_": 615, "n_features_missing_ind": 615, "x_imput": 615, "n_features_out": 615, "quadcontourset": 616, "quadmesh": 616, "feature_1": [616, 896], "feature_2": 616, "nicer": 616, "pd_result": 617, "target_idx": 617, "decil": [617, 1019], "is_categor": 617, "pdp": [617, 973, 1022], "nonexist": 617, "deciles_vlines_": 617, "vlines_": 617, "deciles_hlines_": 617, "bars_": 617, "heatmaps_": 617, "pdp_lim": 617, "ice_lines_kw": 617, "pd_line_kw": 617, "contour_kw": 617, "disp1": 617, "disp2": 617, "pdp_line_kw": 617, "bar_kw": 617, "heatmap_kw": 617, "seq": 618, "n_values_feature_j": 618, "bre": [619, 982], "4666": 619, "2211": 619, "x_min_": 620, "x_max_": 620, "n_threshold": [620, 711, 766, 773], "stepwis": [620, 639, 640, 641, 667, 668, 962], "increasing_": 620, "isotonic_regress": [620, 1021], "secondari": [620, 1012], "leeuw": 620, "1977": 620, "nilotp": [620, 622], "chakravarti": [620, 622], "308": 620, "pava": 620, "hornik": 620, "mair": 620, "kruskal": [620, 675, 679, 963], "psychometrica": 620, "iso_reg": 620, "8628": 620, "7256": 620, "isotonicregression0": 620, "increasing_bool": 621, "fisher_transform": 621, "sample_step": 623, "sample_interv": 623, "sample_interval_": [623, 1024], "skewedchi2sampl": [623, 624, 625, 626, 958, 1015, 1022, 1023], "chi2_kernel": [623, 627, 742, 749, 964, 1009], "additive_chi2_kernel": [623, 743, 749, 958], "vedaldi": [623, 958], "zisserman": [623, 958, 966], "chi2sampl": 623, "9499": 623, "component_indices_": [624, 1021], "normalization_": 624, "additivechi2sampl": [624, 625, 626, 627, 742, 743, 958, 1022, 1024], "kernel_metr": [624, 625, 626, 627], "seeger": 624, "mahdavi": 624, "jin": [624, 1019, 1020], "data_transform": 624, "9987": 624, "fft": 625, "indexhash": 625, "bithash": 625, "indexhash_": 625, "bithash_": 625, "kitchen": [626, 958], "sink": [626, 958], "random_offset_": [626, 627], "random_weights_": [626, 627], "rahimi": [626, 958], "benjamin": [626, 1010, 1011, 1019, 1020, 1021, 1022, 1023], "recht": [626, 958], "berkelei": [626, 891, 892], "brecht": 626, "rah": 626, "rbf_featur": [626, 958], "skewed": [627, 1015], "secant": 627, "hyperbol": [627, 840, 841, 964, 970], "fuxin": 627, "catalin": 627, "ionescu": [627, 958, 1018], "cristian": 627, "sminchisescu": [627, 958], "chi2_featur": 627, "2c": [628, 637, 657, 658, 659, 660, 672, 958], "492": [628, 959, 999], "alpha_1": [629, 630, 962], "alpha_2": [629, 630, 962], "lambda_1": [629, 630, 962], "lambda_2": [629, 630, 962], "threshold_lambda": 629, "x_offset_": [629, 630, 1020], "x_scale_": [629, 630, 1020], "mackai": [629, 630, 962], "ashra": 629, "salakhutdinov": [629, 832, 969], "utstat": 629, "rsalakhu": 629, "sta4273": 629, "lecture2": 629, "computed_scor": 630, "appendix": [630, 661, 962, 976], "wipf": [630, 962], "nagarajan": [630, 962], "2_2": [631, 632, 637, 638, 639, 640, 641, 645, 646, 647, 648, 657, 666, 667, 668, 669], "glmnet": [631, 632, 1008], "sparse_coef_": [631, 637, 645, 647, 1008], "dual_gap_": [631, 632, 637, 638, 645, 646, 647, 648, 1021], "max_j": [631, 637], "w_j": [631, 637, 966, 980], "ext": 631, "83816048": 631, "55968825": 631, "451": 631, "coef_init": [631, 632, 637, 638, 645, 646, 647, 648, 651, 653, 661, 662, 663, 666, 669], "mono": [631, 632, 637, 638, 645, 646, 647, 648, 666, 669], "_21": [631, 632, 637, 638, 645, 646, 647, 648, 666, 669], "sum_j": [631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 962, 966, 971], "alpha_min": [631, 632, 635, 637, 638, 639, 641, 645, 646, 647, 648, 666, 667, 668, 669], "alpha_max": [631, 632, 637, 638, 645, 646, 647, 648, 666, 669], "ndim": [631, 632, 637, 638, 645, 646, 647, 648, 666, 669, 903, 904], "multitaskelasticnet": [631, 632, 637, 646, 647, 648, 666, 962, 1008, 1015, 1016, 1019, 1021], "multitaskelasticnetcv": [631, 632, 637, 645, 647, 648, 666, 962, 1011, 1018, 1019, 1021], "l1_ratio_": [632, 644, 646], "n_l1_ratio": [632, 644, 646, 1011], "199": [632, 735, 981], "398": [632, 1001], "unpen": [633, 654, 665, 962], "raphson": [633, 654, 665], "g_j": [633, 654, 665], "896": 633, "483": 633, "795": 633, "pg_i": 634, "scale_": [634, 852, 853, 861, 863, 873, 976, 1013], "outliers_": 634, "elvezio": [634, 962], "ronchetti": [634, 962], "concomit": [634, 962], "owen": [634, 1017, 1018], "statweb": [634, 667, 668], "hhu": [634, 1017], "806": 634, "7200": 634, "4923": 634, "1698": 634, "0106": 634, "9221": 634, "0226": 634, "fit_path": [635, 639, 640, 641, 667, 668], "jitter": [635, 639, 1019], "coef_path_": [635, 636, 639, 640, 962], "active_": [635, 636, 639, 640], "larscv": [635, 650, 667, 668, 1015, 1021], "1111": [635, 641], "max_n_alpha": [636, 640], "n_cv_alpha": [636, 640], "cv_alpha": [636, 640], "lassolar": [636, 637, 638, 640, 641, 648, 649, 650, 667, 668, 669, 962, 999, 1008, 1009, 1011, 1015, 1018, 1019, 1021], "9996": 636, "2961": 636, "3996": 636, "2_f": 637, "_11": 637, "4951": 638, "2_fro": [638, 647, 648, 669], "coef_path": [638, 648, 669], "46874778": [638, 648, 669], "2159048": [638, 648, 669], "4425765": [638, 648, 669], "23689075": [638, 648, 669], "coef_path_lar": [638, 648, 669], "coef_path_continu": [638, 648, 669], "interp1d": [638, 648, 669], "46915237": [638, 648, 669], "23668876": [638, 648, 669], "congruenc": [639, 640, 641, 667, 668], "fragil": 640, "3972": 640, "2222": 641, "rank_": 642, "singular_": 642, "maxent": [643, 644, 962], "primal": [643, 644, 662, 883, 884, 980, 981], "synthetic_feature_weight": [643, 644], "ciyou": 643, "byrd": 643, "jorg": [643, 1011, 1020, 1022], "noced": 643, "lui": [643, 1009, 1011, 1012, 1016], "iem": 643, "lbfgsb": 643, "schmidt": [643, 962, 1011], "le": [643, 851, 957, 962, 969, 977, 979, 1016, 1020, 1021], "roux": [643, 962, 979], "00860051": 643, "defazio": [643, 962], "lacost": [643, 962], "hsiang": [643, 1012], "fu": [643, 1012], "fang": [643, 1015, 1016], "lan": [643, 1023], "chih": [643, 1013], "jen": [643, 1016], "maxent_du": 643, "cs_": 644, "l1_ratios_": 644, "coefs_paths_": [644, 1018], "coefs_path": 644, "n_l1_ratios_": 644, "w_ij": 645, "eps_": [645, 647], "45663524": 645, "45612256": 645, "0872422": 645, "fro_2": [646, 648], "multitasklassocv": [646, 1011, 1018, 1019, 1021], "52875032": 646, "46958558": 646, "00166409": 646, "60809415": 647, "94592424": 647, "41888636": 647, "87382323": 647, "9994": 648, "5713": 648, "7971": 648, "9015": [648, 1016], "n_nonzero_coefs_": [649, 650], "orthogonal_mp_gram": [649, 650, 670, 1022], "mallat": [649, 670, 671, 962], "3397": [649, 670, 671], "3415": [649, 670, 671], "papier": [649, 670, 671], "mallatpursuit93": [649, 670, 671], "rubinstein": [649, 670, 671], "zibulevski": [649, 670, 671], "elad": [649, 670, 671], "technion": [649, 670, 671, 962], "ronrubin": [649, 670, 671, 962], "ksvd": [649, 670, 671, 962], "9991": [649, 650, 1016], "3854": [649, 650], "previous_loss": [651, 652, 653, 662], "pa": [651, 652, 880, 962, 966, 979], "preset": [651, 653, 661, 970], "t_": [651, 652, 653, 661, 662, 663, 840, 841, 980], "loss_function_": [651, 653, 661, 662], "volume7": [651, 652], "crammer06a": [651, 652], "crammer": [651, 652, 719, 962, 966, 981], "dekel": [651, 652, 962], "keshat": [651, 652, 962], "shalev": [651, 652, 962, 980], "shwartz": [651, 652, 962, 980], "singer": [651, 652, 719, 962, 966, 980, 981], "26642044": 651, "45070924": 651, "67251877": 651, "64185414": 651, "84127814": 651, "intercept_init": [651, 653, 661, 663], "y_all": [651, 653, 661, 811, 812, 840], "epsilon_insensit": [652, 661, 663, 884, 962, 980], "squared_epsilon_insensit": [652, 661, 663, 884, 962, 1014], "48736655": 652, "18818427": 652, "59122734": 652, "94731329": 652, "02306214": 652, "eta0": [653, 661, 662, 663, 980], "lossfunct": [653, 661, 662, 1017], "therein": 653, "939": [653, 996], "990": [654, 966], "088": [654, 974], "676": 654, "solver_opt": 655, "ipm": 655, "linprog": [655, 962], "is_data_valid": [656, 962], "is_model_valid": [656, 962], "max_trial": [656, 962], "max_skip": 656, "stop_n_inli": [656, 962], "stop_scor": [656, 962], "stop_prob": 656, "mad": [656, 1014], "costlier": 656, "n_trials_": 656, "n_skips_no_inliers_": 656, "n_skips_invalid_data_": 656, "n_skips_invalid_model_": 656, "sri": [656, 962, 1015, 1016], "bmva": 656, "bmvc": [656, 962], "paper355": 656, "9885": 656, "9417": 656, "15000": [657, 672, 840, 841], "btol": [657, 659], "gcv_mode": [658, 1010], "store_cv_valu": [658, 660, 1016, 1019], "alpha_per_target": [658, 1020], "cv_values_": [658, 660], "ridgeclassifiercv": [658, 659, 772, 966, 967, 1016, 1018, 1019, 1021, 1022], "5166": 658, "gcv": [658, 660], "9595": 659, "9630": 660, "power_t": [661, 662, 663, 840, 841, 980], "best_loss": [661, 663], "leon": [661, 662, 663, 1008], "bottou": [661, 662, 663, 970, 980], "pow": [661, 662, 663, 840, 841], "dl": 661, "775047": 661, "775151": 661, "justif": 661, "volume2": 661, "zhang02c": 661, "offset_init": 662, "unshifft": 662, "n_subsampl": [664, 909], "breakdown_": 664, "n_subpopulation_": 664, "xin": [664, 962, 1016], "dang": [664, 962], "hanxiang": [664, 962], "peng": [664, 962, 1014, 1015, 1016, 1018, 1020], "xueqin": [664, 962], "hepe": [664, 962], "olemiss": 664, "xdang": 664, "mtse": 664, "9884": 664, "5871": 664, "coeff": 665, "839": 665, "599": 665, "copy_gram": [667, 668, 671], "return_path": [667, 668, 670, 671], "lars_path_gram": [667, 962, 1017], "tib": [667, 668], "xgamma": 670, "norms_squar": 671, "copy_xi": 671, "return_intercept": [672, 1017], "linearoper": 672, "_preprocess_data": 672, "path_method": [673, 963], "neighbors_algorithm": [673, 674], "arnoldi": [673, 674, 678], "fw": 673, "warshal": [673, 963], "kernel_pca_": 673, "nbrs_": [673, 674], "dist_matrix_": 673, "tenenbaum": [673, 963], "reconstruction_error": 673, "frobenius_norm": 673, "d_fit": 673, "x_fit": 673, "n_queri": [673, 825, 826, 827, 829, 831, 833, 834, 835], "hessian_tol": [674, 678], "modified_tol": [674, 678], "reconstruction_error_": 674, "rowei": [674, 678, 832, 963, 969], "saul": [674, 678, 963, 1015, 1016, 1018], "2323": [674, 678, 963], "donoho": [674, 678, 963], "grime": [674, 678, 963], "natl": [674, 678, 963], "acad": [674, 678, 963], "5591": [674, 678, 963], "mlle": [674, 678, 963], "zha": [674, 678, 963], "shanghai": [674, 678, 963], "univ": [674, 678, 963], "406": [674, 678, 963], "immers": [675, 679], "nonmetr": [675, 679], "smacof": [675, 1023], "stress": [675, 679, 963, 1023], "stress_": 675, "dispar": [675, 679, 963], "dissimilarity_matrix_": 675, "psychometrika": [675, 679, 963], "1964": [675, 679, 859, 871, 963], "borg": [675, 679, 963], "groenen": [675, 679, 963], "affinity_matrix": 676, "n_neighbors_": [676, 829], "early_exagger": 677, "min_grad_norm": [677, 1014], "square_dist": [677, 1020], "der": [677, 681, 963, 1011, 1012, 1016], "maaten": [677, 681, 963], "bhtsne": [677, 1015], "opentsn": 677, "abort": 677, "pdist": [677, 684, 762, 765], "pairwise_distance_funct": [677, 681, 762, 765, 969], "barn": [677, 1013, 1015, 1018], "hut": [677, 1013, 1015, 1018], "nlogn": 677, "kl_divergence_": [677, 1015], "learning_rate_": [677, 841], "hinton": [677, 832, 839, 840, 841, 963, 969, 970, 971], "2579": 677, "2605": 677, "lvdmaaten": [677, 1015], "oct": [677, 753, 963, 969], "3221": [677, 963], "3245": [677, 963], "jmlr_2014": 677, "belkina": [677, 963], "ciccolella": [677, 963], "anno": [677, 963], "halpert": [677, 963], "spidlen": [677, 963], "snyder": [677, 963], "cappion": [677, 963], "kobak": [677, 1021], "beren": 677, "transcriptom": 677, "guttman": 679, "norm_laplacian": 680, "drop_first": 680, "nk": 681, "2n": [681, 958, 970], "3k": 681, "cosine_dist": [681, 746, 969, 1014], "jarkko": 681, "venna": 681, "samuel": [681, 990, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "kaski": 681, "icann": 681, "verlag": 681, "491": 681, "twelfth": 681, "pmlr": 681, "391": 681, "im_": 682, "axesimag": 682, "text_": 682, "include_valu": 682, "values_format": [682, 1018], "im_kw": [682, 1022], "text_kw": [682, 1023], "get_metr": 684, "19615242": 684, "euclideandist": 684, "manhattandist": 684, "chebyshevdist": 684, "minkowskidist": [684, 1021], "seuclideandist": 684, "mahalanobisdist": 684, "haversinedist": 684, "arcsin": [684, 748], "hammingdist": 684, "n_unequ": 684, "n_tot": 684, "canberradist": 684, "braycurtisdist": 684, "abbrevi": 684, "ntt": 684, "ntf": 684, "nft": 684, "nff": 684, "nneq": 684, "jaccarddist": 684, "matchingdist": 684, "dicedist": 684, "kulsinskidist": [684, 1024], "rogerstanimotodist": 684, "russellraodist": 684, "sokalmichenerdist": 684, "sokalsneathdist": 684, "pyfunc": [684, 969], "pyfuncdist": 684, "dist_to_rdist": 684, "surrog": [684, 990], "cdist": [684, 1021], "rdist_to_dist": 684, "rdist": 684, "predictionrecalldisplai": [685, 966], "chance_level_": [685, 687, 1024], "drop_intermedi": [685, 687, 766, 773, 1024], "errors_lines_": 686, "with_error": 686, "scatter_": 686, "balanced_accuracy_scor": [688, 771, 966, 1016], "imperfectli": [688, 718, 966], "label_tru": [689, 702, 721, 739, 741, 777], "upperlimit": 689, "nat": [689, 739, 741, 1022], "expected_ri": 690, "discord": 690, "hubert1985": 690, "1007": 690, "2fbf01908075": 690, "steinley2004": 690, "wk": 690, "rand_index": 690, "adjusted_rand_index": 690, "chacon": 690, "chac\u00f3n": 690, "rastrojo": 690, "balanced_accuraci": [693, 966, 1016], "brodersen": 693, "ong": 693, "stephan": [693, 1011, 1017, 1018, 1020], "buhmann": 693, "20th": 693, "3121": 693, "kelleh": [693, 966], "aoif": [693, 966], "arci": [693, 966], "y_true_categor": [694, 966], "037": 694, "calinski": [695, 1014], "harabasz": 695, "allow_non": 696, "thrown": [696, 1017, 1018], "tn": [697, 703, 966], "negative_class": 697, "zebra": 697, "output_dict": [698, 1016, 1020], "zero_divis": [698, 713, 714, 722, 767, 768, 771, 1018, 1020, 1024], "precision_recall_fscore_support": [698, 713, 714, 768, 771, 966, 1012, 1016, 1018, 1024], "multilabel_confusion_matrix": [698, 713, 714, 722, 768, 771, 966, 1017], "conting": [699, 700, 715, 739, 1014], "n_classes_tru": [699, 739], "n_classes_pr": [699, 739], "cohen": [701, 1016], "p_o": 701, "p_e": 701, "artstein": 701, "poesio": 701, "linguist": [701, 880, 979], "555": 701, "596": 701, "label_pr": [702, 720, 721, 739, 741, 777], "ant": [703, 738, 966], "a_row": 704, "a_column": 704, "b_row": 704, "b_column": 704, "tsoumaka": [705, 718, 724, 966], "kataki": [705, 718, 724, 966], "vlahava": [705, 724, 966], "handbook": [705, 724, 966], "667": [705, 724, 966], "685": [705, 724, 966], "raw_valu": [706, 707, 712, 729, 730, 732, 734, 735, 737, 769, 966, 1016, 1019], "wainwright": [706, 707, 708], "su": [706, 707, 708], "statlearnspars": [706, 707, 708], "691": 706, "8125": 706, "57142857": 706, "d2": 707, "d2_absolute_error_scor": [707, 966, 1022], "koenker": [707, 962], "roger": [707, 1015, 1016, 1020], "jos\u00e9": [707, 1011, 1021], "772": 707, "630": 708, "bouldin": 709, "farther": 709, "log_bas": 710, "ignore_ti": [710, 740], "ndcg": [710, 740, 966, 1015], "ndcg_score": [710, 966, 1015, 1018, 1023, 1024], "sharper": 710, "discounted_cumulative_gain": 710, "dcg": [710, 740, 966, 1015], "jarvelin": [710, 740, 966], "kekalainen": [710, 740, 966], "colt": [710, 740, 966], "mcsherri": [710, 740, 966], "najork": [710, 740, 966], "european": [710, 740, 966], "421": [710, 740, 966], "groud": [710, 740], "true_relev": [710, 740], "propabl": 711, "imperfect": [712, 769, 966, 1010], "variance_weight": [712, 769, 966], "n_unique_label": [713, 714, 722, 767, 768, 771, 930], "fbeta_scor": [713, 726, 767, 966, 1010, 1011, 1012, 1013, 1018, 1024], "undefinedmetricwarn": [713, 714, 767, 768, 771, 1017], "y_true_empti": 713, "y_pred_empti": [713, 714], "66666667": [713, 766, 833, 976], "328": 714, "fowlk": [715, 1014], "mallow": [715, 1014], "get_scorer_nam": [716, 966, 1022], "forgiv": 718, "upperbound": 718, "grigorio": 718, "ioanni": 718, "wareh": 718, "septemb": [718, 966, 1008, 1011, 1014, 1016, 1021], "pred_decis": [719, 966, 1021], "disagre": [719, 973], "kobi": 719, "yoram": 719, "AND": 719, "denero": 719, "gluster": 720, "v_measur": [720, 777], "6666": [722, 966, 1014], "5833": [722, 966], "lrap": [723, 966], "21616": 725, "needs_proba": [726, 1017], "needs_threshold": [726, 966], "ftwo_scor": [726, 966], "mcc": [727, 966, 1022], "baldi": 727, "brunak": 727, "chauvin": 727, "andersen": [727, 1022], "nielsen": [727, 1016], "gorodkin": 727, "jurman": 727, "riccadonna": 727, "furlanello": 727, "cen": 727, "mape": [730, 966], "3273": 730, "5515": 730, "6198": 730, "112589990684262": 730, "0568": 731, "4260": [733, 736], "612": 734, "822": 734, "41666667": 734, "msle": [735, 966], "rmsle": 735, "00462428": 735, "08377444": 735, "samplewis": [738, 966], "mcm": [738, 966], "mcm_": 738, "multi_confus": 738, "normalized_discounted_cumulative_gain": 740, "dcg_score": [740, 966, 1015, 1018], "kernel_matrix": [742, 743, 750, 760], "marszalek": [742, 743, 964], "lazebnik": [742, 743, 964], "schmid": [742, 743, 964], "ouvert": [742, 743, 964], "00171412": [742, 743, 964], "cosine_similar": [744, 749, 964, 1013], "dense_output": [745, 751, 876, 921, 1016], "linear_kernel": [745, 749, 964, 1016], "haversine_dist": [746, 1017], "y_norm_squar": 747, "x_norm_squar": [747, 1013], "paired_dist": [747, 753, 762, 1012], "41421356": [747, 753, 969], "ezeiza": 748, "airport": 748, "bueno": 748, "argentina": 748, "gaull": 748, "bsa": 748, "83333": 748, "5166646": 748, "0083899664": 748, "53844117956": 748, "bsas_in_radian": 748, "paris_in_radian": 748, "6371000": 748, "kilomet": 748, "11099": 748, "54035582": 748, "polynomial_kernel": [749, 964], "rbf_kernel": [749, 964, 1012], "laplacian_kernel": [749, 964, 1013], "sigmoid_kernel": [749, 964], "kernal_metr": 749, "sum_over_featur": [752, 1008, 1023], "componentwis": 752, "sq": 753, "dixon": [753, 1018, 1019], "cybernet": 753, "ieeexplor": 753, "4310090": 753, "filter_param": 758, "jth": [758, 762], "tanh": [761, 840, 841, 964, 981], "force_all_finit": [762, 901, 903, 904, 1019, 1022], "distance_metr": [762, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837], "metric_kwarg": [763, 764], "reduce_func": [765, 1019], "d_chunk": 765, "sought": 765, "neigh": [765, 825, 826, 827, 829, 831, 833, 834, 835], "gen": 765, "probas_pr": 766, "warn_for": 767, "shantanu": 767, "godbol": 767, "sunita": 767, "sarawagi": 767, "pig": 767, "948": [769, 966], "max_fpr": [772, 966, 1016], "provost": [772, 966], "ceder": [772, 966], "stern": [772, 966], "fawcett": [772, 773, 966], "874": [772, 773, 966], "generalis": [772, 966, 987], "multioutputclassifi": [772, 812, 814, 816, 966, 1015, 1017, 1018, 1019, 1020, 1024], "n_samples_a": [774, 775], "favour": [774, 963, 965, 1017], "mean_prior": 779, "degrees_of_freedom_prior": 779, "verbose_interv": [779, 780], "wishart": 779, "emipr": 779, "precisions_": [779, 780], "precisions_cholesky_": [779, 780, 1022], "converged_": [779, 780], "lower_bound_": [779, 780, 1016], "weight_concentration_prior_": 779, "weight_concentration_": 779, "mean_precision_prior_": 779, "mean_precision_": 779, "mean_prior_": 779, "degrees_of_freedom_prior_": 779, "degrees_of_freedom_": 779, "covariance_prior_": 779, "hagai": 779, "attia": 779, "bgm": 779, "n_dimens": [779, 780], "log_prob": [779, 780], "weights_init": 780, "precisions_init": [780, 1022], "gm": 780, "pre_dispatch": [781, 787, 795, 804, 805, 806, 807, 810, 932, 1011], "error_scor": [781, 784, 785, 787, 795, 805, 806, 807, 810, 955, 1012, 1016, 1020, 1023], "explos": [781, 795, 804, 805, 806], "fitfailedwarn": [781, 784, 785, 787, 795, 805, 806, 807, 810], "param_kernel": [781, 795], "param_degre": 781, "split0_test_scor": [781, 795, 1014], "rank_t": 781, "split1_test_scor": [781, 795], "split0_train_scor": [781, 795, 1014], "split1_train_scor": [781, 795], "mean_train_scor": [781, 795, 1014], "std_train_scor": [781, 795, 1014], "split0_test_precis": [781, 795], "mean_train_precis": [781, 795], "best_estim": [781, 784, 785, 795], "scorer_": [781, 784, 785, 795], "n_splits_": [781, 784, 785, 795], "refit_time_": [781, 784, 785, 795, 1016], "multimetric_": [781, 784, 785, 795], "parametergrid": [781, 1010, 1016], "split2_test_scor": 781, "num_sampl": [781, 795, 1023], "stratif": [782, 783, 789, 790, 799, 800, 801, 937, 1017], "group_kfold": 782, "aggressive_elimin": [784, 785, 955], "r0": [784, 785], "replai": [784, 785], "n_remaining_candidates_": [784, 785], "n_candid": [784, 785, 955], "max_resources_": [784, 785], "min_resources_": [784, 785], "n_required_iterations_": [784, 785], "n_possible_iterations_": [784, 785], "exceed": [784, 785, 1014], "n_unique_tick": [787, 807], "n_tick": [787, 807, 810], "errorbar_": 787, "errorbarcontain": 787, "line2d": 787, "fill_between_": 787, "polycollect": 787, "exploit_incremental_learn": [787, 807], "log_scal": 787, "fill_between_kw": 787, "errorbar_kw": 787, "model_selectionkfold": 787, "predispatch": [787, 807, 810], "negat": [787, 966], "neg_": [787, 1014], "combinator": 791, "lpo": 791, "param_list": 793, "rounded_list": 793, "89856": 793, "923223": 793, "878964": 793, "038159": 793, "parametersampl": [795, 1010, 1016, 1020], "2652124": 796, "rskf": 797, "36851234": 797, "sizeabl": [798, 801], "sad": [799, 800], "sss": 801, "checked_cv": 803, "3315057": [805, 806], "08022103": [805, 806], "03531816": [805, 806], "test_r2": 806, "test_auc": 806, "train_r2": 806, "train_auc": 806, "3635": 806, "3573": 806, "6114": 806, "28009951": 806, "3908844": 806, "22784907": 806, "train_sizes_ab": 807, "train_size_ab": 807, "cv_train_scor": 807, "cv_test_scor": 807, "permutation_scor": 808, "n_valu": [810, 1016], "pairwise_indices_": 811, "outputcodeclassifi": [811, 812, 1015, 1020, 1024], "label_binarizer_": 812, "multilabel_": [812, 1013], "onevsoneclassifi": [812, 813, 1009, 1011, 1012, 1014, 1015, 1017, 1020, 1022], "code_s": [813, 967], "code_book_": 813, "bakiri": [813, 967], "pict": [813, 967], "order_": [814, 817], "regressorchain": [814, 816, 1016, 1019, 1023], "jess": [814, 967, 1021], "pfahring": [814, 967], "geoff": [814, 967], "holm": [814, 967], "eib": [814, 967], "8387": 814, "9431": 814, "4576": 814, "8878": 814, "3684": 814, "2640": 814, "0321": 814, "9935": 814, "0625": 814, "y_decis": 814, "load_linnerud": [816, 1014, 1019], "force_alpha": [818, 819, 820, 822, 1023], "lidston": [818, 819, 820, 822, 968], "class_count_": [818, 819, 820, 821, 822], "class_log_prior_": [818, 819, 820, 822], "feature_count_": [818, 820, 822], "feature_log_prob_": [818, 819, 820, 822], "categoricalnb": [818, 820, 821, 822, 968, 1018, 1019, 1020, 1021, 1023], "renni": [818, 820, 968, 1016], "schuetz": [818, 822], "htmledit": [818, 822, 964], "mccallum": [818, 968], "nigam": [818, 968], "metsi": [818, 968], "androutsopoulo": [818, 968], "palioura": [818, 968], "cea": [818, 968], "predict_joint_log_proba": [818, 819, 820, 821, 822, 1023], "min_categori": [819, 1020], "category_count_": 819, "n_categories_": 819, "mirror": [820, 955], "mahout": 820, "weka": 820, "feature_all_": 820, "shih": [820, 968], "teevan": [820, 968], "karger": [820, 968], "616": [820, 968, 976], "623": [820, 968], "jrenni": 820, "icml03": 820, "var_smooth": [821, 1016], "stan": 821, "levequ": [821, 863], "cstr": 821, "epsilon_": 821, "theta_": [821, 968], "clf_pf": 821, "valid_metr": [823, 824, 969], "19662693": [823, 824], "29473397": [823, 824], "tree_copi": [823, 824], "query_radiu": [823, 824], "count_onli": [823, 824], "kernel_dens": [823, 824], "94114649": [823, 824], "83281226": [823, 824], "2071716": [823, 824], "two_point_correl": [823, 824], "580": [823, 824], "get_arrai": [823, 824], "get_n_cal": [823, 824], "n_call": [823, 824], "get_tree_stat": [823, 824], "tree_stat": [823, 824], "breadth_first": [823, 824, 828], "return_log": [823, 824], "k_true": [823, 824], "k_ret": [823, 824], "breadth": [823, 824, 828, 990, 1010], "dualtre": [823, 824], "sort_result": [823, 824, 831, 833, 834, 835, 1020], "radii": [823, 824], "reset_n_cal": [823, 824], "effective_metric_": [825, 826, 827, 829, 831, 833, 834, 835, 969], "callbl": 825, "effective_metric_params_": [825, 826, 827, 829, 831, 833, 834, 835], "outputs_2d_": [825, 833, 1018], "nearest_neighbor_algorithm": [825, 833, 834], "333": 825, "n_index": [825, 826, 827, 829, 831, 833, 834], "neigh_dist": [825, 826, 827, 829, 831, 833, 834, 835], "neigh_ind": [825, 826, 827, 829, 831, 833, 834, 835], "nearest_neighbors_algorithm": [826, 831], "nearer": [827, 835, 969], "x_dist_graph": 827, "silverman": [828, 1023], "binarytre": [828, 1012, 1016, 1020], "bandwidth_": 828, "log_dens": 828, "52955942": 828, "51462041": 828, "60244657": 828, "logprob": 828, "negative_outlier_factor": 829, "9821": 829, "0370": 829, "3697": 829, "shifted_opposite_lof_scor": 829, "opposite_lof_scor": 829, "wminkowski": [830, 1020, 1022], "narasimhan": 830, "chu": [830, 1024], "shrunken": [830, 1008], "6567": 830, "6572": 830, "nbr": [831, 969], "neighborsclassifi": [831, 833, 834, 835, 1008], "n_features_a": 832, "n_features_b": 832, "goldberg": [832, 969], "neighbourhood": [832, 969], "513": [832, 969], "ncanip": 832, "neighbourhood_components_analysi": 832, "961904": 832, "outlier_label": [833, 1018], "outlier_label_": 833, "33333333": [833, 976], "x_cluster": 835, "warn_when_not_sort": 838, "efficiencywarn": [838, 1023], "sml": [839, 971], "pcd": [839, 971], "sweep": 839, "gibb": [839, 971, 986], "intercept_hidden_": 839, "intercept_visible_": 839, "h_samples_": 839, "osindero": [839, 971], "teh": [839, 971], "1527": 839, "1554": 839, "absp": 839, "fastnc": 839, "tieleman": [839, 971], "v_new": 839, "pseudo_likelihood": 839, "relu": [840, 841], "beta_1": [840, 841], "beta_2": [840, 841], "max_fun": [840, 841, 1018], "n_layer": [840, 841], "neuron": [840, 841, 964, 970], "tan": [840, 841, 970, 1015], "rectifi": [840, 841], "kingma": [840, 841, 970], "diederik": [840, 841, 970, 1023], "jimmi": [840, 841, 970, 1014, 1016], "gradual": [840, 841, 980], "effective_learning_r": [840, 841], "best_loss_": [840, 841, 1023], "best_validation_score_": [840, 841, 1023], "validation_scores_": [840, 841, 1023], "intercepts_": [840, 841, 970], "n_layers_": [840, 841], "out_activation_": [840, 841], "geoffrei": [840, 841, 970, 1019, 1020, 1021, 1022, 1024], "connectionist": [840, 841], "glorot": [840, 841], "xavier": [840, 841, 1016, 1017, 1018, 1020, 1021], "yoshua": [840, 841, 979], "feedforward": [840, 841], "kaim": [840, 841], "delv": [840, 841], "surpass": [840, 841], "imagenet": [840, 841], "log_y_prob": 840, "named_transform": [842, 1023], "transform_list": 842, "s__p": 843, "n_transformed_featur": 843, "predict_log_proba_param": 843, "y_log_proba": 843, "predict_proba_param": 843, "analyst": 846, "x_tr": [846, 852, 855, 856, 857, 861, 863, 866, 868, 869, 873, 874], "accept_spars": [847, 903, 904, 1015], "inv_kw_arg": 847, "pickleabl": [847, 1014], "6931": 847, "3862": 847, "n_bins_": 848, "int_": 848, "regener": 848, "xinv": 848, "tild": [849, 974, 976], "k_fit_rows_": 849, "k_fit_all_": 849, "1299": [849, 976], "1319": [849, 976], "n_samples1": 849, "n_samples2": 849, "k_new": 849, "neg_label": [850, 867], "y_type_": 850, "sparse_input_": 850, "tokyo": [851, 977], "amsterdam": [851, 977], "max_abs_": 852, "x_std": [853, 869, 976], "data_min_": [853, 1013], "data_max_": [853, 1013], "data_range_": [853, 1013], "unwieldi": 854, "fi": 854, "comedi": 854, "y_indic": 854, "yt": 854, "ands": 854, "feature_name_combin": [856, 1024], "categories_": [856, 857, 864, 976, 1016, 1023], "unregular": [856, 879, 999, 1017], "intact": [856, 1001], "infrequ": [856, 857, 864, 966, 1008, 1022, 1023, 1024], "infrequent_if_exist": [856, 976], "x_6": 856, "x_7": 856, "drop_idx_": [856, 1019, 1023], "drop_idx": 856, "gender_femal": 856, "gender_mal": 856, "group_1": 856, "group_2": 856, "group_3": 856, "drop_enc": [856, 976], "drop_binary_enc": 856, "custom_combin": 856, "custom_fnames_enc": 856, "x0_str_femal": 856, "x0_str_male": 856, "x1_int_1": 856, "x1_int_2": 856, "x1_int_3": 856, "oh": [856, 1018], "infrequent_sklearn": [856, 976], "n_encoded_featur": [856, 857], "bpo": 857, "43475": 857, "lenient": [857, 987], "min_degre": [858, 1021], "max_degre": [858, 1021], "powers_": 858, "n_output_features_": 858, "nystrom": [858, 1017, 1018], "featurewis": 859, "power_transform": [859, 872, 1016], "biometrika": [859, 871], "959": [859, 871], "707": [859, 871], "ignore_implicit_zero": [860, 872], "landmark": [860, 872, 976], "n_quantiles_": 860, "quantiles_": [860, 976, 1018], "references_": 860, "robustscal": [860, 873, 956, 976, 1013, 1014, 1016, 1018, 1019, 1020, 1024], "with_cent": [861, 873], "with_scal": [861, 873], "unit_vari": [861, 873, 1020], "iqr": [861, 873], "interquartil": [861, 873], "quartil": 861, "75th": 861, "q_min": [861, 873], "q_max": [861, 873], "center_": 861, "robust_scal": [861, 872, 1016], "interquartile_rang": 861, "bspline": 862, "n_features_out_": 862, "with_std": [863, 874, 976, 1016], "n_samples_seen": 863, "5a": 863, "randal": [863, 1012, 1022], "242": [863, 1008], "mic": [864, 976], "target_mean_": [864, 976], "target_type_": 864, "encodings_": 864, "micci": [864, 976], "barreca": [864, 976], "newsl": [864, 976], "enc_auto": 864, "enc_high_smooth": 864, "enc_low_smooth": 864, "ahead": 867, "return_norm": [870, 1015], "notimplementederror": [870, 1015], "compute_inverse_compon": [875, 876, 978], "inverse_components_": [875, 876, 978, 1022], "2759": [875, 876], "afor": [875, 876], "baserandomproject": [875, 876], "ping": [876, 978, 1014, 1015], "density_": 876, "gaussianrandomproject": [876, 978, 1009, 1022, 1024], "church": [876, 978], "kdd06_rp": 876, "cgi": 876, "uoa": 876, "gr": 876, "opta": 876, "0182": 876, "e2": [877, 962], "93lindenstrauss_lemma": 877, "sanjoi": [877, 978], "anupam": [877, 978, 1023], "gupta": [877, 978, 1015, 1016, 1019, 1020, 1021, 1022, 1024], "elementari": [877, 978], "663": [877, 974, 978], "11841": [877, 978], "1112658": [877, 978], "7894": [877, 978], "9868": [877, 978], "steadi": [878, 879], "baselabelpropag": [878, 1015], "xiaojin": 878, "zoubin": 878, "ghahramani": 878, "cmu": 878, "cald": 878, "carnegi": 878, "mellon": 878, "jerryzhu": 878, "label_prop_model": [878, 879], "clamp": [879, 979], "dengyong": 879, "bousquet": 879, "navin": 879, "lal": 879, "schoelkopf": 879, "termination_condition_": 880, "no_chang": 880, "all_label": 880, "33rd": [880, 979], "acl": [880, 979, 980], "stroudsburg": [880, 979], "optmiz": [883, 884], "crammer_sing": [883, 967, 981, 1008], "seldom": 883, "readonli": [883, 884, 1021, 1023, 1024], "raw_coef_": [883, 884], "smo": [883, 884], "1693": 883, "unsur": 884, "023": [884, 974], "522": 884, "class_weight_": [885, 886, 887, 888, 889, 1023], "n_sv": [885, 886, 887, 888, 889, 981, 1018], "fit_status_": [885, 886, 887, 888, 889], "n_support_": [885, 886, 887, 888, 889, 981, 1018], "proba_": [885, 888, 1019], "probb_": [885, 888, 1019], "shape_fit_": [885, 886, 887, 888, 889], "n_dimensions_of_x": [885, 886, 887, 888, 889], "7798": 887, "0547": 887, "0556": 887, "0561": 887, "7332": 887, "unshift": 887, "impract": 888, "tube": [889, 981], "_tree": [891, 892, 893, 894, 1009, 1011], "decision_tree_learn": [891, 892, 982], "olshen": [891, 892, 982], "wadsworth": [891, 892, 982], "belmont": [891, 892, 982], "cutler": [891, 892], "cc_home": [891, 892], "htm": [891, 892], "ccp_path": [891, 892, 893, 894], "get_depth": [891, 892, 893, 894, 1017], "get_n_leav": [891, 892, 893, 894, 1017], "extra_tre": [893, 894], "8947": 893, "decision_tre": [895, 896, 897, 982], "out_fil": [895, 982], "leaves_parallel": 895, "special_charact": [895, 982], "fontnam": [895, 1021], "helvetica": [895, 897], "graphviz": [895, 982], "postscript": 895, "tpng": 895, "paint": [895, 897], "dot_data": [895, 982], "digraph": 895, "show_weight": 896, "feature_0": 896, "unrepresent": 898, "keyerror": [898, 1018], "popitem": 898, "lifo": 898, "input_nam": [902, 904, 929, 1022], "accept_large_spars": [903, 904, 1016], "ensure_2d": [903, 904], "allow_nd": [903, 904], "ensure_min_sampl": [903, 904], "ensure_min_featur": [903, 904], "y_numer": 903, "bsr": [903, 904, 1021], "x_convert": 903, "y_convert": 903, "array_convert": 904, "min_val": 907, "max_val": 907, "include_boundari": [907, 1022], "y_org": 908, "class_weight_vect": 908, "king": 908, "zen": 908, "sample_weight_vect": 909, "parenthes": 910, "type_filt": 912, "generate_onli": [914, 1018], "checks_gener": 914, "test_check_estim": 915, "check_estimators_fit_returns_self": 915, "array_lik": 918, "logdet": 918, "slogdet": 918, "6375861597263857": 918, "flip_sign": 920, "svd_lapack_driv": 920, "gesdd": 920, "p5": 920, "transposit": 920, "gesvd": 920, "conquer": 920, "unitari": 920, "vh": 920, "dot_product": 921, "deweight": 922, "min_batch_s": 923, "n_pack": [923, 924], "path_length": 925, "sliceabl": 926, "truthi": 927, "helloifeven": 927, "_x_is_even": 927, "say_hello": 927, "temp_fold": 932, "max_nbyt": 932, "1m": 932, "mmap_mod": 932, "dispatch_next": 932, "dispatch_one_batch": 932, "unprotect": 932, "prefetch": 932, "print_progress": 932, "inner_max_num_thread": 934, "backend_param": 934, "register_parallel_backend": [934, 1016], "pyiodin": 934, "dask": [934, 987, 1016], "workload": [934, 986], "register_rai": 934, "backend_nam": 934, "oversubscript": [934, 1022], "threadpool": 934, "effective_n_job": 934, "tracking_select": 935, "reservoir_sampl": 935, "reservoir": 935, "make_default": 936, "parallelbackendbas": 936, "resampled_arrai": 937, "3x2": [937, 940], "shuffled_arrai": 940, "last_mean": 941, "last_var": 941, "last_n": 941, "return_sum_weight": 947, "sum_weight": 947, "all_or_ani": [950, 1018], "is_fit": 950, "__sklearn_is_fitted__": [950, 1021, 1022], "eg": 950, "substitut": [950, 987, 1014], "raise_except": 952, "array_sym": 952, "is_paramet": 954, "enclos": 955, "set_stat": 955, "bergstra": [955, 1008, 1009], "tournament": 955, "dispos": [955, 1001], "n_resources_i": 955, "n_resources_0": 955, "n_candidates_i": 955, "n_candidates_0": 955, "r_0": 955, "n_resourc": 955, "983667": 955, "951958": 955, "947958": 955, "961009": 955, "955989": 955, "jamieson": 955, "talwalkar": 955, "desalvo": 955, "rostamizadeh": 955, "hyperband": 955, "bandit": 955, "multimetr": [955, 1018, 1023], "calibrated_forest": 955, "select__k": 955, "model__estimator__max_depth": 955, "imp": 956, "sophist": [956, 968], "14338": 956, "13286": 956, "15611": 956, "amelia": 956, "scientist": [956, 990], "roderick": 956, "rubin": 956, "1986": [956, 982], "ol2001": 956, "mask_missing_values_onli": 956, "mask_al": 956, "rr2007": 958, "2x_iy_i": 958, "vz2010": 958, "vvz2010": 958, "prod_i": 958, "ls2010": 958, "c_0": [958, 964], "tensorsketch": 958, "pp2013": 958, "wikic": 958, "ccf2002": 958, "mercer": 958, "langl": [958, 966, 980, 981], "rangl": [958, 966, 980, 981], "y_j": [958, 966, 968, 981], "obviat": 958, "dagm": 958, "vempati": 958, "jawahar": 958, "charikar": 958, "farach": 958, "colton": 958, "m2012": 959, "mu_k": 960, "cst": 960, "omega_": 960, "k0": 960, "h_l": 960, "extrema": 960, "119": [960, 1011], "honei": 960, "stork": 960, "dilemma": 961, "valid_scor": 961, "w_0": 962, "w_p": 962, "34545455": 962, "13636": [962, 1017], "rifkin": 962, "lippert": 962, "2n_": 962, "softw": 962, "kim": [962, 1016, 1017, 1018, 1022], "koh": [962, 990], "lustig": 962, "boyd": 962, "gorinevski": 962, "c_p": 962, "cherkasski": 962, "yunqian": 962, "1691": 962, "1714": 962, "ell_2": 962, "equiangular": 962, "weisberg": 962, "ell_0": [962, 966], "_coef": 962, "mp": 962, "ell_": 962, "posteriori": [962, 968], "radford": 962, "neal": [962, 1021], "50000013": 962, "49999993": 962, "lambda_i": [962, 976], "srikantan": 962, "tristan": 962, "fletcher": [962, 1008, 1012], "nomenclatur": [962, 1014], "deliber": 962, "overparameter": 962, "ldot": [962, 966, 968, 970, 980], "w_l": 962, "min_w": 962, "iverson": 962, "broyden": 962, "goldfarb": 962, "shanno": 962, "shortcom": 962, "statsmodel": [962, 986], "aaron": [962, 1011, 1012, 1013, 1018], "simon": [962, 990, 1011, 1012, 1021, 1022, 1023], "93fletcher": 962, "93goldfarb": 962, "93shanno_algorithm": 962, "noah": 962, "multirespons": 962, "edm": 962, "agricultur": 962, "rainfal": 962, "paid": 962, "bernouli": 962, "fraud": [962, 990], "cash": 962, "fraudul": [962, 990], "interrupt": 962, "drug": 962, "cure": 962, "entertain": 962, "mccullagh": 962, "nelder": 962, "boca": 962, "raton": 962, "chapman": 962, "hall": [962, 1015, 1019], "crc": 962, "31760": 962, "j\u00f8rgensen": 962, "monografia": 962, "matem\u00e1tica": 962, "2463": 962, "4337": 962, "7638": 962, "disappear": [962, 1008], "photogrammetr": 962, "hypothes": 962, "paradigm": 962, "cartographi": 962, "fischler": 962, "boll": 962, "sunglok": 962, "choi": 962, "taemin": 962, "wonpil": 962, "93sen_estim": 962, "binom": 962, "infeas": [962, 969, 971], "k\u00e4rkk\u00e4inen": 962, "\u00e4yr\u00e4m\u00f6": 962, "h_": 962, "oarc": 962, "dae": 962, "bassett": 962, "jr": 962, "econometrica": 962, "econometr": 962, "portnoi": 962, "hare": 962, "tortois": 962, "paraboloid": 962, "w_3": 962, "w_4": 962, "w_5": 962, "z_1": 962, "z_2": 962, "z_3": 962, "z_4": 962, "z_5": 962, "streamlin": 962, "gotten": [962, 976], "necess": [963, 969], "strife": 963, "mother": 963, "baloo": 963, "song": 963, "jungl": 963, "rubric": 963, "defici": [963, 980], "hlle": 963, "revolv": 963, "belkin": 963, "niyogi": 963, "1373": 963, "1396": 963, "molecul": 963, "jk": 963, "delta_": 963, "c_1": 963, "disentangl": 963, "legitim": 963, "die": 963, "noisier": 963, "5415": 963, "brief": 964, "num_featur": [964, 1023], "quantum": 964, "nutshel": 964, "36787944": 964, "89483932": 964, "58364548": 964, "51341712": 964, "83822343": 964, "7768366": 964, "facil": 965, "equi": 965, "agnost": [965, 974], "cue": 965, "came": 965, "quicker": 965, "unpract": 965, "analogi": [965, 966], "top_k_accuraci": 966, "top_k_accuracy_scor": [966, 1020, 1022], "neg_brier_scor": [966, 1018], "f1_micro": [966, 1012], "f1_weight": [966, 1012], "f1_sampl": 966, "neg_log_loss": 966, "roc_auc_ovr": [966, 1018], "roc_auc_ovo": [966, 1018], "roc_auc_ovr_weight": [966, 1018], "roc_auc_ovo_weight": [966, 1018], "explained_variance_scor": [966, 1011, 1015, 1022], "max_error": [966, 1017], "neg_mean_squared_log_error": 966, "mean_squared_log_error": [966, 1015, 1021], "neg_median_absolute_error": 966, "neg_mean_poisson_devi": 966, "neg_mean_gamma_devi": 966, "mean_gamma_devi": [966, 1018], "d2_pinball_scor": [966, 1022], "d2_tweedie_scor": [966, 1021], "invalidparametererror": 966, "_error": 966, "my_custom_loss_func": 966, "693": 966, "protocol": [966, 1011, 1024], "custom_scoring_funct": 966, "custom_scorer_modul": 966, "confusion_matrix_scor": 966, "test_tp": 966, "test_fn": 966, "untru": 966, "dividend": 966, "divisor": 966, "quotient": 966, "texttt": 966, "youden": 966, "informed": 966, "mosley2013": 966, "kelleher2015": 966, "guyon2015": 966, "urbanowicz2015": 966, "escalant": 966, "escalera": 966, "maci\u00e0": [966, 1021, 1023], "saeed": 966, "statnikov": 966, "viega": 966, "chalearn": 966, "automl": [966, 986], "ijcnn": 966, "moslei": 966, "ijcv": 966, "urbanowicz": 966, "exstrac": 966, "evol": 966, "intel": [966, 986], "cohen_kappa_scor": [966, 1013, 1015], "4285714285714286": 966, "manning2008": 966, "everingham2010": 966, "davis2006": 966, "flach2015": 966, "everingham": 966, "gool": 966, "winn": 966, "pascal": 966, "voc": 966, "goadrich": 966, "y_l": 966, "_l": 966, "emptyset": 966, "f_beta": 966, "hinge_loss": [966, 1012, 1020, 1021], "ne": [966, 969], "1738": 966, "matthews_corrcoef": [966, 1008, 1014, 1015, 1022], "t_k": [966, 982], "ik": 966, "ki": 966, "kk": 966, "auroc": 966, "ht2001": 966, "fc2009": 966, "pd2000": 966, "f2006": 966, "f2001": 966, "inner_clf": 966, "c\u00e8sar": 966, "hernandez": 966, "orallo": 966, "modroiu": 966, "wikipediadet2017": 966, "martin1997": 966, "navratil2007": 966, "consult": 966, "encyclopedia": 966, "utc": 966, "php": [966, 986], "detection_error_tradeoff": 966, "oldid": 966, "798982054": 966, "doddington": 966, "kamm": 966, "ordowski": 966, "przybocki": 966, "navractil": 966, "klusacek": 966, "acoust": 966, "icassp": 966, "honolulu": 966, "229": 966, "232": 966, "brier1950": 966, "p_i": [966, 969], "bella2012": 966, "flach2008": 966, "bella": 966, "hern\u00e1ndez": 966, "ram\u00edrez": 966, "quintana": 966, "khosrow": 966, "pour": 966, "hershei": 966, "edson": [966, 1013], "matsubara": 966, "dagstuhl": 966, "seminar": 966, "schloss": 966, "leibniz": 966, "zentrum": 966, "lr_": 966, "brenner": 966, "gefel": 966, "991": 966, "coverage_error": [966, 1012, 1022], "label_ranking_average_precision_scor": [966, 1012, 1016, 1017, 1023], "label_ranking_loss": [966, 1013], "grade": 966, "unalt": 966, "epsilon_i": 966, "908": 966, "925": [966, 996], "7083": 966, "log_": 966, "growth": [966, 1013, 1014], "commod": 966, "mapd": 966, "2e6": 966, "2666": 966, "y_n": [966, 970, 980], "elicit": 966, "2500": 966, "mean_pinball_loss_95p": 966, "skill": 966, "mcfadden": 966, "d2_tweedie_score_15": 966, "d2_pinball_score_08": 966, "heteroschedast": 966, "homoschedast": 966, "pear": 967, "y_dens": 967, "y_spars": 967, "advoc": 967, "financ": 967, "f3": 967, "y3": 967, "multi_target_forest": 967, "75474165": 967, "03498585": 967, "03812219": 967, "12165031": 967, "12914884": 967, "46081961": 967, "8948621": 967, "44373091": 967, "88978285": 967, "62745778": 967, "02891072": 967, "48204257": 967, "03260883": 967, "34867495": 967, "52003279": 967, "92529176": 967, "25719016": 967, "84253": 967, "25193977": 967, "16443186": 967, "12274212": 967, "170388": 967, "80956739": 967, "16979946": 967, "72667194": 967, "50941682": 967, "50447799": 967, "149": [967, 1008], "37967282": 967, "15699552": 967, "72850319": 967, "prod_": 968, "downarrow": 968, "spite": 968, "famous": 968, "serious": 968, "flair": 968, "2_y": 968, "mu_i": 968, "sigma_i": [968, 976], "theta_i": 968, "cnb": 968, "mnb": 968, "inventor": 968, "alpha_i": [968, 981], "cj": [968, 1011, 1012, 1013, 1014, 1015], "summat": [968, 970], "min_c": 968, "t_i": 968, "poorest": 968, "n_i": [968, 976], "satellit": 969, "kdt": 969, "farawai": 969, "invent": 969, "orthotrop": 969, "bentlei": 969, "1975": 969, "omohundro": 969, "characteris": 969, "unaffect": 969, "amort": 969, "cache_path": 969, "gettempdir": 969, "unsort": [969, 1009, 1012, 1016], "5807": 969, "nca_pip": 969, "96190476": 969, "limits_": 969, "lx": 969, "x_m": 970, "leftmost": 970, "w_1x_1": 970, "w_2x_2": 970, "w_mx_m": 970, "backpropag": 970, "998": 970, "b_1": 970, "b_2": 970, "z_l": 970, "dfrac": [970, 976], "nabla": 970, "deduct": 970, "rumelhart": 970, "jiquan": 970, "ngiam": 970, "chuan": 970, "yifan": 970, "carolin": 970, "suen": 970, "backprop": [970, 980], "lecun": [970, 980], "orr": [970, 980], "strai": 971, "v_ih_j": 971, "b_iv_i": 971, "c_jh_j": 971, "h_j": 971, "v_i": 971, "b_i": 971, "sum_h": 971, "fantasi": 971, "particl": 971, "thoroughli": 971, "hereund": 972, "1443": 972, "1471": 972, "outlying": 972, "h2009": 973, "g2015": 973, "absurd": 973, "m2019": 973, "bike": 973, "mc_clf": 973, "overlaid": 973, "obscur": [973, 1024], "cice": [973, 1022], "pd_": 973, "dx_c": 973, "footnot": [973, 986], "opaqu": 974, "x_val": 974, "y_val": 974, "356": 974, "probe": 974, "050": 974, "r_multi": 974, "1013": 974, "866": 974, "445": 974, "726": 974, "022": 974, "277": [974, 1010], "376": 974, "i_j": 974, "min_max_scal": [976, 1013], "x_train_minmax": 976, "x_test_minmax": 976, "max_abs_scal": 976, "x_train_maxab": 976, "x_test_maxab": 976, "unintention": 976, "kernelcenter": [976, 1018, 1022], "scholkopf1998": 976, "1_": 976, "x_train_tran": 976, "x_test_tran": 976, "8pt": 976, "x_normal": 976, "firefox": 976, "chrome": 976, "safari": 976, "africa": 976, "dragon": 976, "lexicon": 976, "par": 976, "sigma_c": 976, "tau": 976, "l_i": 976, "pargent": 976, "pfister": 976, "2671": 976, "2692": 976, "infant": 976, "kid": 976, "teen": 976, "adult": 976, "senior": [976, 990], "citizen": 976, "retbin": 976, "x_1x_2": 976, "x_1x_3": 976, "x_2x_3": 976, "x_1x_2x_3": 976, "rung": 976, "eiler": 976, "marx": 976, "perperogl": 976, "sauerbrei": 976, "abrahamowicz": 976, "bmc": 976, "methodol": 976, "38629436": 976, "sixteenth": 978, "uai": 978, "craig": [978, 1011, 1016], "boutili": 978, "mois\u00e9": 978, "goldszmidt": 978, "morgan": [978, 982, 984], "kaufmann": [978, 982, 1020], "ella": 978, "bingham": 978, "heikki": 978, "mannila": 978, "245": [978, 1010], "explic": 978, "3947": 978, "kenneth": [978, 1008, 1009, 1014, 1015, 1022, 1023], "12th": 978, "296": 978, "x_new_invers": 978, "x_new_again": 978, "delalleau": 979, "216": 979, "aistat": 979, "gatsbi": 979, "ucl": 979, "uk": [979, 1001], "fullpap": 979, "xi_i": 980, "slack": 980, "t_0": 980, "l\u00e9on": [980, 1022, 1023, 1024], "_init_t": 980, "basesgd": 980, "eta_0": 980, "_t": 980, "svmsgd": 980, "pegaso": 980, "srebro": 980, "tsuruoka": 980, "tsujii": 980, "ananiad": 980, "afnlp": 980, "lin_clf": 981, "grasp": [981, 987], "sv": 981, "builtin": 981, "qp": 981, "linear_svc": 981, "gram_train": 981, "gram_test": 981, "zeta": 981, "zeta_i": 981, "textrm": [981, 999], "q_": 981, "equiv": 981, "reparameter": 981, "wu": [981, 1012, 1020], "weng": 981, "1005": 981, "rong": 981, "aug": 981, "1871": 981, "1874": 981, "ofmulticlass": 981, "fitter": 982, "pariti": 982, "multiplex": 982, "export_graphviz": [982, 1013, 1015, 1021, 1023, 1024], "export_text": [982, 1017, 1024], "dumont": 982, "subwindow": 982, "beforehand": 982, "dichotomis": 982, "quinlan": 982, "multiwai": 982, "proprietari": 982, "ruleset": 982, "q_m": 982, "n_m": 982, "t_m": 982, "setminu": 982, "mk": 982, "_m": 982, "ge0": 982, "widetild": 982, "tradition": 982, "t_t": 982, "eff": 982, "predictive_analyt": 982, "troubleshoot": 984, "artwork": 984, "fund": 984, "spotifi": 984, "betawork": 984, "evernot": 984, "aweb": 984, "yhat": 984, "rangespan": 984, "birchbox": 984, "bestofmedia": 984, "phimeca": 984, "howaboutw": 984, "peerindex": 984, "datarobot": 984, "okcupid": 984, "love": [984, 1001], "publica": 984, "machinali": 984, "solido": 984, "infonea": 984, "dataiku": 984, "otto": 984, "zopa": 984, "bnp": 984, "pariba": 984, "cardif": 984, "post1": [984, 1006], "foot": 985, "gear": 985, "neuroimag": [985, 990], "astronom": 985, "pycon": 985, "thirti": 985, "nyc": [985, 990], "sister": 986, "sklearn_panda": 986, "sklearn_xarrai": 986, "xarrai": 986, "autoviml": 986, "tpot": 986, "featuretool": 986, "neuraxl": 986, "neat": [986, 1008], "checkpoint": 986, "funki": 986, "saver": 986, "evalml": 986, "neptun": 986, "mlop": 986, "sacr": 986, "dtreeviz": 986, "eli5": 986, "mlxtend": 986, "yellowbrick": 986, "deap": 986, "evolutionari": 986, "interchang": 986, "skop": [986, 1003], "jpmml": 986, "porter": 986, "transpil": 986, "javascript": 986, "m2cgen": 986, "dart": 986, "haskel": 986, "rust": 986, "treelit": 986, "tslearn": 986, "sktime": 986, "hmmlearn": 986, "pomegran": 986, "crfsuit": 986, "skforecast": 986, "nolearn": 986, "lasagn": 986, "theano": 986, "skorch": 986, "scikera": 986, "scikit_learn": 986, "feder": 986, "lego": 986, "subsembl": 986, "lightn": 986, "sdca": 986, "adagrad": 986, "svrg": 986, "nadaraya": 986, "gplearn": 986, "genet": 986, "multilearn": 986, "seglearn": 986, "libopf": 986, "fastfm": 986, "kmode": 986, "sphereclust": 986, "mise": 986, "giotto": 986, "tda": 986, "pymc": 986, "censor": 986, "lightfm": 986, "openrec": 986, "spotlight": 986, "gensim": 986, "nilearn": 986, "neuro": 986, "astroml": 986, "astronomi": 986, "msmbuilder": 986, "dissemin": 986, "chines": 986, "persian": 986, "spanish": 986, "korean": 986, "disclaim": 986, "promis": 987, "eleven": 987, "incept": 987, "scala": 987, "reinforc": 987, "era": 987, "7242": 987, "12147": 987, "5523": 987, "10733": 987, "13902": [987, 1018], "12800": 987, "12866": 987, "15550": 987, "5853": 987, "11805": 987, "15319": 987, "11977": 987, "12852": [987, 1018], "13911": [987, 1018], "amput": 987, "6284": 987, "beginn": 987, "priorit": [987, 1015], "4497": 987, "7646": 987, "6425": 987, "6424": 987, "8480": 987, "6231": 987, "8100": 987, "6599": 987, "6715": 987, "14582": 987, "3855": 987, "13227": 987, "6323": 987, "14180": [987, 1019], "9173": 987, "13146": [987, 1018], "8614": 987, "7608": 987, "5082": 987, "8243": 987, "searchgrid": 987, "6929": 987, "__array_function__": [987, 1018], "etl": [987, 990], "8370": 987, "6451": 987, "lifecycl": 987, "8157": 987, "7382": 987, "drift": 987, "11047": [987, 1018], "9326": 987, "slep011": 987, "1626": 987, "10463": 987, "id3": [988, 1003], "cart": [988, 1003], "touch": 989, "savetxt": 989, "cloneabl": 989, "datafil": 989, "printabl": 989, "indispens": 990, "stephen": [990, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1021], "simmon": 990, "vp": 990, "athena": 990, "music": 990, "bernhardsson": 990, "pariet": [990, 1008], "lear": 990, "visag": 990, "fantast": 990, "startup": 990, "bitli": 990, "chartbeat": 990, "digg": [990, 1015], "poncho": 990, "gilad": 990, "lotan": 990, "chief": 990, "chat": 990, "bread": 990, "butter": 990, "chaumond": [990, 1016], "offic": 990, "ayzenshtat": [990, 1016], "undergrad": 990, "professor": 990, "hotel": 990, "destin": 990, "agent": 990, "melani": [990, 1015, 1016], "awesom": 990, "stuff": 990, "randomizedpca": [990, 1008, 1010, 1011, 1013, 1014, 1015], "boston": 990, "mdbecker": 990, "pydata_2013": 990, "ninja": 990, "thorough": 990, "notch": 990, "production": 990, "greg": [990, 1014, 1015, 1017, 1018], "lamp": 990, "founder": 990, "prototyp": 990, "jurgen": 990, "director": 990, "commerc": 990, "inventori": 990, "bertin": 990, "mahieux": 990, "invalu": 990, "vijai": [990, 1011], "traine": 990, "impress": 990, "traffic": 990, "tenur": 990, "matchmak": 990, "weitzenfeld": 990, "tweet": 990, "ferenc": 990, "huszar": 990, "shop": 990, "ourselv": 990, "jeremi": [990, 1013, 1014, 1015, 1016, 1019, 1020], "achin": 990, "ceo": 990, "marketplac": 990, "frid": [990, 1011], "radar": 990, "partnership": 990, "lebourgeoi": 990, "charron": [990, 1011, 1012, 1019, 1020, 1021], "cornerston": 990, "sheep": 990, "featureforg": 990, "rafael": [990, 1009, 1010, 1012, 1015], "carrascosa": [990, 1012], "law": 990, "semiconductor": 990, "fab": [990, 1018, 1019], "bleed": 990, "chip": 990, "smartphon": 990, "automobil": 990, "trent": [990, 1014], "mcconaghi": 990, "rapid": 990, "immens": 990, "thorsten": 990, "kranz": 990, "coma": 990, "dss": 990, "douetteau": 990, "b2c": 990, "retail": 990, "palladium": 990, "rammig": [990, 1014], "peer": 990, "lend": 990, "billion": 990, "gbp": 990, "grate": 990, "vlasio": [990, 1015], "vasilei": [990, 1015], "petfood": 990, "cocoa": 990, "worldwid": 990, "toolset": 990, "equip": 990, "fitzk": 990, "sr": 990, "fondat": 990, "s\u00e9bastien": [990, 1014, 1016], "conort": 990, "salmon": 992, "nine": 992, "sentiment": 993, "cli": 993, "doctest_mod": 993, "hardest": 994, "tightli": 995, "knit": 995, "x_fold": 996, "array_split": 996, "y_fold": 996, "934": 996, "train_indic": 996, "test_indic": 996, "963": 996, "922": 996, "96388889": 996, "92222222": 996, "9637883": 996, "93036212": 996, "96578289": 996, "92708922": 996, "96681476": 996, "96362897": 996, "93192644": 996, "0077": 996, "00375": 996, "lfw_": 997, "_lfw": 997, "gerhard_schroed": 997, "donald_rumsfeld": 997, "tony_blair": 997, "colin_powel": 997, "george_w_bush": 997, "estimated_param_": 998, "iris_x": 999, "iris_i": 999, "iris_x_train": 999, "iris_y_train": 999, "iris_x_test": 999, "iris_y_test": 999, "pave": 999, "paltri": 999, "exabyt": 999, "30349955": 999, "63931533": 999, "510": 999, "53060544": 999, "73698041": 999, "13170937": 999, "81458798": 999, "84845219": 999, "60648906": 999, "51961675": 999, "09517222": 999, "5854": 999, "5855": 999, "occam": 999, "razor": 999, "best_alpha": [999, 1008], "025118864315095794": 999, "313": 999, "508": 999, "knew": 1000, "taxonomist": 1000, "face_compress": 1000, "x_approx": 1000, "images_approx": 1000, "18565811e": 1000, "19346747e": 1000, "43026679e": 1000, "text_analyt": 1001, "skeleton": [1001, 1011], "sklearn_tut_workspac": 1001, "cp": 1001, "work_directori": 1001, "tutorial_hom": 1001, "fetch_data": 1001, "lang": 1001, "newsweed": 1001, "netnew": 1001, "bydat": 1001, "twenty_train": 1001, "holder": 1001, "2257": 1001, "sd345": 1001, "collier": 1001, "laserjet": 1001, "iii": [1001, 1022], "hampton": 1001, "4gb": 1001, "count_vect": 1001, "x_train_count": 1001, "35788": 1001, "4690": 1001, "downscal": 1001, "tf_transform": 1001, "x_train_tf": 1001, "tfidf_transform": 1001, "x_train_tfidf": 1001, "na\u00efv": 1001, "docs_new": 1001, "opengl": 1001, "x_new_count": 1001, "x_new_tfidf": 1001, "text_clf": 1001, "twenty_test": 1001, "docs_test": 1001, "8348": 1001, "9101": [1001, 1016], "1502": 1001, "353": 1001, "tfidf__use_idf": 1001, "searcher": 1001, "gs_clf": 1001, "workspac": 1001, "fear": 1001, "fire": 1001, "exercise_xx_script": 1001, "arg1": 1001, "arg2": 1001, "arg3": 1001, "mortem": 1001, "charngramanalyz": 1001, "exercise_01_language_train_model": 1001, "exercise_02_senti": 1001, "movie_review": 1001, "txt_sentoken": 1001, "cpickl": 1001, "polar": 1001, "subtleti": 1003, "subscrib": 1006, "gzip": 1008, "bzip2": 1008, "decompress": 1008, "auc_scor": [1008, 1010], "kernc": [1008, 1022, 1023], "led": 1008, "probabilisticpca": [1008, 1011], "hmm": [1008, 1009, 1010, 1011, 1013], "gaussianhmm": 1008, "multinomialhmm": 1008, "n_gram_rang": 1008, "267": 1008, "alexi": [1008, 1011, 1012, 1015], "mignon": [1008, 1011, 1012, 1015], "subhodeep": [1008, 1009, 1010], "moitra": [1008, 1009, 1010], "yannick": [1008, 1010], "schwartz": [1008, 1010, 1022], "duckworth": 1008, "benediktsson": [1008, 1009, 1010], "marko": [1008, 1017, 1018, 1024], "burjek": 1008, "pinto": 1008, "abraham": [1008, 1009, 1014, 1018], "hoenig": 1008, "flyingimmidev": 1008, "francoi": [1008, 1021], "savard": 1008, "hann": 1008, "schulz": 1008, "welind": 1008, "companioni": 1008, "brandyn": 1008, "bussonni": [1008, 1020], "matthia": [1008, 1010, 1011, 1014, 1015, 1016, 1020, 1023], "pierr": [1008, 1016, 1017, 1019, 1021, 1023], "astolfi": 1008, "huiginn": 1008, "goodman": [1008, 1013], "ludwig": 1008, "schwardt": 1008, "hervieu": 1008, "sergio": [1008, 1010, 1011, 1020, 1023], "medina": [1008, 1010], "sheerman": 1008, "buguen": 1008, "seq_dataset": [1008, 1018], "weight_vector": [1008, 1018], "reuben": 1008, "costin": 1008, "_basehmm": 1008, "neighborsregressor": 1008, "gone": [1008, 1009], "vbgmm": [1008, 1012, 1014], "_pvalu": 1008, "charset": [1008, 1010], "test_fract": 1008, "train_fract": 1008, "239": 1008, "marek": 1008, "fcostin": 1008, "adrien": 1008, "gaidon": 1008, "joona": 1008, "sillanp\u00e4\u00e4": 1008, "mccarthi": [1008, 1016], "roi": [1008, 1022], "hyunjin": 1008, "ibay": 1008, "scheidegg": 1008, "clair": 1008, "revillet": 1008, "conrad": [1008, 1009, 1023], "meng": [1008, 1009, 1012, 1014, 1015], "xinfan": [1008, 1009, 1012], "udi": 1008, "weinsberg": 1008, "janso": 1008, "palafox": 1008, "overwrite_": 1008, "copy_": 1008, "buffer_mb": 1008, "sparse_encode_parallel": 1008, "accident": [1008, 1012, 1017], "basedictionarylearn": 1008, "sparsecodingmixin": 1008, "fast_svd": 1008, "arnold": [1008, 1009], "bala": [1008, 1011], "subrahmanyam": [1008, 1011], "varanasi": [1008, 1011], "draxu": 1008, "eickenberg": [1008, 1010, 1011, 1012, 1013], "bogdan": 1008, "trach": 1008, "f\u00e9lix": [1008, 1010, 1011, 1012, 1016], "antoin": [1008, 1010, 1011, 1012, 1015], "fortin": [1008, 1010, 1011, 1012], "manuel": [1008, 1012, 1016, 1017, 1020, 1021], "caicedo": 1008, "carvaj": 1008, "tiziano": 1008, "zito": [1008, 1021], "jean": [1008, 1011, 1012, 1013, 1014, 1015, 1021], "kossaifi": [1008, 1012, 1013], "thumbnail": 1008, "univariate_select": 1008, "mldata": [1008, 1016], "pietro": [1008, 1011], "berk": 1008, "macosx": 1008, "xarg": 1008, "bscikit": 1008, "cross_val": 1008, "bcross_val": 1008, "lurk": 1008, "l1_distanc": 1008, "168": 1008, "andi": [1008, 1015], "amit": [1008, 1022, 1023], "salvator": [1008, 1022, 1023], "masecchia": 1008, "schut": 1008, "metaireau": [1008, 1011], "bryan": [1008, 1011, 1017, 1018, 1021], "silverthorn": 1008, "minwoo": 1008, "luca": [1008, 1018, 1019, 1020, 1021], "wiman": 1008, "schl\u00fcter": [1008, 1016], "malet": 1008, "miott": [1008, 1011], "feth": 1008, "arezki": 1008, "yamin": 1008, "notes_neighbor": 1008, "netbsd": 1008, "kamel": 1008, "ibn": 1008, "hassen": 1008, "derouich": 1008, "virgilefritsch": 1008, "example_gaussian_process_plot_gp_regress": 1008, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1008, "tast": 1008, "2x": 1008, "10x": 1008, "200x": 1008, "ann": [1008, 1020, 1022], "laur": 1008, "fouqu": 1008, "ronan": [1008, 1011, 1016], "amicel": [1008, 1011], "osendorf": [1008, 1009], "gmmhmm": [1008, 1009], "latex": 1008, "mlcomp": 1008, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1008, "pybrain": 1008, "262": 1008, "116": 1008, "rokem": [1008, 1014], "100x": [1008, 1011], "obsolet": 1008, "attrselect": 1008, "unmaintain": 1008, "lite": 1008, "filo": [1008, 1011], "mailhot": 1008, "huard": 1008, "dave": [1008, 1015, 1016, 1022], "morril": 1008, "schofield": 1008, "travi": [1008, 1016], "oliph": 1008, "pearu": 1008, "peterson": [1008, 1010], "0d": 1009, "marchman": [1009, 1010], "hrishikesh": [1009, 1010], "huilgolkar": [1009, 1010], "bastiaan": [1009, 1010], "diego": [1009, 1010], "molla": [1009, 1010], "cunha": [1009, 1010], "almeida": [1009, 1010, 1021], "rolando": [1009, 1010], "espinoza": [1009, 1010], "fuent": [1009, 1010], "formerli": [1009, 1012, 1014, 1015], "beauchamp": [1009, 1012], "longstand": [1009, 1015], "shaun": 1009, "jackman": 1009, "winterman": 1009, "seberg": 1009, "n_atom": 1009, "label_propag": 1009, "learn_rat": 1009, "basegradientboost": 1009, "mean_square_error": 1009, "gmm_": 1009, "eig_tol": 1009, "chunk_siz": 1009, "zero_one_scor": 1009, "117": 1009, "aymer": 1009, "masurel": 1009, "syhw": [1009, 1010], "corei": [1009, 1016, 1017], "lynch": [1009, 1015], "shu": [1009, 1012, 1016], "tadej": [1009, 1010], "jane\u017e": [1009, 1010], "caje": 1009, "tiago": [1009, 1013], "nune": 1009, "cow": 1009, "anz": 1009, "jauvin": 1009, "jacqu": [1009, 1011], "kvam": [1009, 1011], "doug": [1009, 1010, 1020], "coleman": [1009, 1010], "dickerson": 1009, "approximateident": 1009, "veronda": 1009, "matti": [1009, 1012, 1013], "lyra": [1009, 1012, 1013], "mikhail": [1009, 1010, 1011, 1014, 1015, 1023], "korobov": [1009, 1010, 1011, 1014, 1015], "alejandro": [1009, 1014], "weinstein": 1009, "deil": [1009, 1019, 1020], "nizhibitski": 1009, "coelho": [1009, 1011, 1012, 1016], "miroslav": [1009, 1010, 1013], "batchkarov": [1009, 1013], "pavel": [1009, 1017], "bob": [1009, 1015], "dengemann": 1009, "emanuel": 1009, "x006": 1009, "justin": [1010, 1016, 1020], "stochastic_gradi": [1010, 1011, 1017], "crombach": 1010, "sheet": 1010, "jaccard_similarity_scor": [1010, 1012, 1017], "jochen": 1010, "wersd\u00f6rfer": 1010, "sinayev": 1010, "unpleas": 1010, "novic": 1010, "tini": [1010, 1023], "hyperlink": 1010, "luessi": 1010, "philipp": [1010, 1011, 1014, 1023], "gervai": [1010, 1011], "cleverless": 1010, "nosetest": 1010, "compute_import": 1010, "return_model": [1010, 1012], "itergrid": 1010, "tacitli": 1010, "charset_error": 1010, "precompute_gram": 1010, "2224": 1010, "jim": 1010, "holmstr\u00f6m": 1010, "steven": [1010, 1011, 1013, 1015, 1016, 1021, 1023], "gryze": [1010, 1013], "sergeyf": 1010, "ben": [1010, 1011, 1012, 1015, 1016, 1017, 1020], "speer": 1010, "federico": [1010, 1011, 1016, 1017, 1022], "vaggi": [1010, 1011], "raul": [1010, 1011], "garreta": [1010, 1011], "gei": 1010, "flaxman": [1010, 1012], "denton": 1010, "cockburn": 1010, "dougal": [1010, 1012, 1013, 1015, 1016, 1017, 1018], "sutherland": [1010, 1012, 1013, 1015, 1016, 1017, 1018], "ian": [1010, 1012, 1017, 1018, 1020, 1023, 1024], "ozsvald": 1010, "johann": [1010, 1011, 1016, 1018, 1019, 1022], "sch\u00f6nberger": [1010, 1011], "szabo": [1010, 1011], "roland": [1010, 1011], "imran": [1010, 1011, 1012], "haqu": [1010, 1011, 1012], "karayev": 1010, "jamestwebb": [1010, 1011], "abhijeet": 1010, "kolh": 1010, "velkov": 1010, "fazlul": 1010, "shahriar": 1010, "felix": [1010, 1015, 1016, 1018, 1020, 1021, 1022], "brockherd": 1010, "harikrishnan": 1010, "jack": [1010, 1013, 1021, 1022, 1023], "hale": [1010, 1022], "jakemick": 1010, "mcdermott": 1010, "zwinck": 1010, "vredevoogd": [1010, 1011], "pati": 1010, "ekman": [1010, 1014], "shubernetskii": 1010, "naoki": [1010, 1020], "orii": 1010, "seamu": 1010, "absher": 1010, "feldman": [1010, 1015, 1016, 1017, 1018], "stefano": 1010, "lattarini": 1010, "steve": [1010, 1012, 1016, 1021, 1023], "koch": [1010, 1016, 1017, 1019, 1020], "sturla": 1010, "molden": 1010, "jarosch": 1010, "nikolai": [1011, 1012, 1013, 1014, 1016, 1017, 1022], "mayorov": [1011, 1012, 1013, 1014], "msvc": 1011, "mingw": 1011, "resourcewarn": 1011, "calvin": [1011, 1012], "gile": [1011, 1012], "billing": [1011, 1012, 1013], "safe_realloc": 1011, "bradshaw": [1011, 1012, 1015], "pico": [1011, 1012], "restor": [1011, 1016, 1017, 1018, 1019, 1023], "raff": 1011, "__array__": [1011, 1018], "jeffrei": [1011, 1014], "blackburn": [1011, 1014], "danni": [1011, 1012, 1013], "sullivan": [1011, 1012, 1013], "wignal": [1011, 1012, 1018, 1019], "grid_tograph": 1011, "gracefulli": [1011, 1012], "gaussianprocess": 1011, "novak": 1011, "tulloch": [1011, 1012], "wardagglomer": 1011, "wardclust": 1011, "mean_l1_ratio": 1011, "phlypo": 1011, "312": 1011, "bommarito": [1011, 1012], "brook": [1011, 1012, 1020], "osborn": [1011, 1012], "eltermann": 1011, "bwignal": 1011, "ankit": [1011, 1018, 1020, 1022], "agraw": [1011, 1016, 1022, 1023], "carei": [1011, 1012, 1013, 1014, 1015], "ugurthemast": [1011, 1012], "schumach": [1011, 1012, 1013], "baptist": [1011, 1019], "lagard": 1011, "rajat": [1011, 1018], "khanduja": 1011, "pascual": 1011, "ignacio": 1011, "rossi": 1011, "s\u00e4ger": [1011, 1014], "ilambharathi": [1011, 1012], "kanniah": [1011, 1012], "sdenton4": 1011, "alyssa": [1011, 1015], "amo": 1011, "waterland": 1011, "murad": 1011, "maud": 1011, "karol": 1011, "pysniak": 1011, "cgohlk": [1011, 1012], "jacobsen": 1011, "collin": 1011, "kaushik94": 1011, "erwin": 1011, "marsi": 1011, "csytraci": 1011, "lk": 1011, "laurent": [1011, 1012, 1015, 1016, 1023, 1024], "direr": [1011, 1012, 1015, 1016], "shilt": 1011, "yoshiki": [1011, 1014], "v\u00e1zquez": 1011, "yung": [1011, 1014], "siang": 1011, "liau": 1011, "abhishek": [1011, 1012, 1018, 1022], "thakur": [1011, 1012], "rohit": [1011, 1012, 1016, 1017], "sivaprasad": [1011, 1012], "amormachin": 1011, "oscar": [1011, 1015], "carlsson": 1011, "nanta": 1011, "nardelli": 1011, "jess010": 1011, "kowalski87": 1011, "clegg": 1011, "ralf": [1011, 1014, 1015, 1023], "gommer": [1011, 1014, 1015, 1023], "rupesh": 1011, "srivastava": [1011, 1023], "ryan": [1011, 1014, 1016, 1017], "skipper": [1011, 1013, 1014], "seabold": [1011, 1013, 1014], "stefan": [1011, 1012, 1016, 1018], "walt": [1011, 1012, 1016], "riddel": [1011, 1013, 1015], "valentin": [1011, 1013, 1023, 1024], "haenel": 1011, "myer": [1011, 1015], "yoni": 1011, "meshulam": 1011, "yuri": [1011, 1013], "zaytsev": 1011, "adrinjalali": [1011, 1020], "ai8rahim": 1011, "alemagnani": 1011, "chalmerlow": 1011, "dziki": 1011, "dro\u017cd\u017c": 1011, "matrixorz": 1011, "popo": 1011, "samuela": 1011, "fran\u00e7oi": 1011, "boulogn": 1011, "ethan": [1011, 1014], "guilherm": 1011, "trein": 1011, "heuer": 1011, "ivicajov": 1011, "rouli": 1011, "eduardo": [1011, 1013, 1021, 1022], "ari\u00f1o": 1011, "rubia": 1011, "jell": 1011, "zijlstra": 1011, "eddi": 1011, "jansson": [1011, 1023], "ca\u00f1ardo": 1011, "alastuei": 1011, "joseph": [1011, 1012, 1013, 1014, 1020, 1022, 1023], "perla": 1011, "ricardo": [1011, 1021, 1022], "kenta": 1011, "sato": 1011, "medri": 1011, "luce": 1011, "pierron": 1011, "danielweitzenfeld": 1011, "thompson": [1011, 1023, 1024], "brett": [1011, 1013, 1014, 1015, 1016, 1023], "feurer": [1011, 1016], "earl": 1011, "hank": 1011, "orr\u00f9": 1011, "lunt": 1011, "kearn": 1011, "pawe\u0142": [1011, 1015, 1020, 1021], "mandera": 1011, "zambelli": 1011, "staubda": 1011, "dedupl": 1012, "heilman": [1012, 1013], "precompute_dist": [1012, 1019], "lshforest": [1012, 1015], "qiang": 1012, "luo": 1012, "clemen": 1012, "brunner": 1012, "matteo": [1012, 1014, 1022], "visconti": 1012, "oleggio": 1012, "castello": 1012, "linkage_tre": 1012, "jatin": [1012, 1014], "shah": [1012, 1013, 1014, 1020], "saurabh": [1012, 1013, 1014, 1015, 1016, 1020], "jha": [1012, 1018, 1022], "blanchard": [1012, 1013], "michal": [1012, 1015, 1021, 1022], "romaniuk": 1012, "gilmor": 1012, "stapl": 1012, "hedyati": 1012, "antoni": [1012, 1014, 1020, 1023], "parel": 1012, "herv\u00e9": 1012, "bredin": 1012, "hasil": 1012, "sharma": [1012, 1014, 1016, 1017, 1019, 1020, 1022], "ducktyp": 1012, "download_20newsgroup": 1012, "friend": 1012, "cathi": [1012, 1018], "deng": [1012, 1013, 1014], "dawson": 1012, "garret": 1012, "hanna": [1012, 1013, 1019], "wallach": [1012, 1013], "yan": [1012, 1020], "artem": [1012, 1015], "sobolev": 1012, "fit_ovr": 1012, "predict_ovr": 1012, "predict_proba_ovr": 1012, "fit_ovo": 1012, "predict_ovo": 1012, "fit_ecoc": 1012, "predict_ecoc": 1012, "lamond": 1012, "outweigh": 1012, "thresh": 1012, "akshai": [1012, 1015, 1020], "akshayah3": 1012, "aldrian": 1012, "obaja": 1012, "ander": [1012, 1018], "aagaard": 1012, "cranenburgh": 1012, "walker": 1012, "banilo": [1012, 1013], "barmalei": [1012, 1013], "benedikt": 1012, "koehler": 1012, "bhsu": 1012, "bori": [1012, 1020], "feld": 1012, "borja": 1012, "ayerdi": 1012, "boyuan": [1012, 1013, 1014], "brent": [1012, 1016, 1017], "pedersen": 1012, "celeo": 1012, "chebee7i": 1012, "stade": 1012, "schuldt": 1012, "christof": [1012, 1013], "angermuel": [1012, 1013], "daiki": 1012, "aminaka": 1012, "danfrankj": 1012, "dmitrij": 1012, "milajev": 1012, "floydsoft": 1012, "garrett": 1012, "gpassino": 1012, "gwulf": [1012, 1013], "hampu": 1012, "bengtsson": 1012, "harri": [1012, 1014, 1020, 1021], "mavroforaki": [1012, 1014], "helder": [1012, 1021, 1022], "herv": 1012, "hugu": 1012, "salamin": 1012, "ism": 1012, "dlabal": 1012, "javier": 1012, "l\u00f3pez": [1012, 1016, 1017, 1020], "pe\u00f1a": 1012, "jdcaballero": 1012, "jeff": [1012, 1014, 1021, 1022], "hammerbach": 1012, "helmu": 1012, "kaicheng": 1012, "markham": [1012, 1019, 1020], "lagacheri": 1012, "leepei": 1012, "loic": [1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023], "estev": [1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023], "luka": [1012, 1019], "michelbach": 1012, "krell": [1012, 1014], "ku": [1012, 1013], "mateusz": [1012, 1019, 1020], "susik": 1012, "mehdi": [1012, 1021], "cherti": 1012, "mlg": 1012, "montecchio": 1012, "okal": 1012, "billi": 1012, "\u00f3scar": [1012, 1013, 1014, 1015], "n\u00e1jera": [1012, 1013, 1014, 1015], "puggioni": 1012, "pratap": [1012, 1015, 1022], "vardhan": 1012, "pvnguyen": 1012, "queqichao": 1012, "rahiel": 1012, "kasim": 1012, "mason": 1012, "saket": [1012, 1013, 1020], "choudhari": [1012, 1013, 1022], "sam": [1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023], "nichol": 1012, "sethdandridg": 1012, "sinhrk": [1012, 1013], "snuderl": 1012, "ott": 1012, "tjoa": 1012, "swu": 1012, "zimmer": [1012, 1022], "tejesh95": 1012, "terrycojon": 1012, "delteil": 1012, "toma": 1012, "kazmar": 1012, "trevorstephen": [1012, 1014], "tttthomasssss": 1012, "tzu": 1012, "kuo": 1012, "ugurcaliskan": 1012, "vinayak": [1012, 1013, 1014, 1016, 1017, 1023], "mehta": [1012, 1013, 1014, 1016, 1017, 1018, 1019, 1023], "vjacheslav": 1012, "murashkin": 1012, "wadawson": 1012, "x0l": 1012, "vendor": [1013, 1016, 1017], "6147": 1013, "presort": [1013, 1018], "5857": 1013, "mcculloh": [1013, 1014], "6258": 1013, "giorgio": [1013, 1014, 1015], "patrini": [1013, 1014, 1015], "joe": 1013, "jevnik": 1013, "labelkfold": [1013, 1014], "labelshufflesplit": [1013, 1014], "mcfee": [1013, 1014], "3659": 1013, "4738": 1013, "projectedgradientnmf": 1013, "nls_max_it": 1013, "erick": 1013, "moodi": 1013, "4025": 1013, "mean_shift_": 1013, "mean_shift": [1013, 1016], "martino": 1013, "sorbaro": 1013, "cori": 1013, "konstantin": [1013, 1014, 1015], "shmelkov": 1013, "backlink": 1013, "jaidev": 1013, "deshpand": [1013, 1014], "dictlearn": 1013, "kashif": 1013, "rasul": [1013, 1015, 1016], "galvez": 1013, "sonni": 1013, "hu": [1013, 1016, 1018], "santi": [1013, 1015, 1016], "villalba": [1013, 1016, 1020], "5186": 1013, "stolbunov": 1013, "booster": 1013, "graham": [1013, 1014], "clenaghan": [1013, 1014], "clyde": 1013, "subproblem": 1013, "forestclassifi": 1013, "ankur": 1013, "ankan": 1013, "henri": [1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023], "5431": 1013, "buddha": 1013, "prakash": [1013, 1015, 1021], "5182": 1013, "lamb": [1013, 1021], "5282": 1013, "5355": 1013, "5360": 1013, "4478": 1013, "5337": 1013, "4362": 1013, "5495": 1013, "elvi": [1013, 1014, 1015], "dohmatob": [1013, 1014, 1015], "data_min": 1013, "data_max": 1013, "data_rang": 1013, "_learntselectormixin": 1013, "gradientboost": 1013, "metatransfom": 1013, "load_lfw_pair": 1013, "wardagglom": 1013, "residues_": 1013, "indicator_matrix_": 1013, "adithya": 1013, "ganesh": 1013, "akitti": 1013, "alexei": 1013, "grigorev": 1013, "ali": [1013, 1016, 1017, 1020, 1021, 1023], "baharev": 1013, "ando": 1013, "saaba": 1013, "anish": [1013, 1014], "anthoni": [1013, 1015, 1016], "erling": 1013, "rouvinen": 1013, "rachez": [1013, 1014], "benjaminirv": 1013, "naul": [1013, 1014], "gohlk": 1013, "bourguignat": 1013, "cindi": [1013, 1021], "sridharan": 1013, "kronovet": 1013, "data1010": 1013, "dotson": 1013, "djipei": [1013, 1014], "dmitri": [1013, 1015, 1016, 1017, 1021], "spikhalskii": 1013, "donn": 1013, "duart": [1013, 1021, 1023], "caro": 1013, "larson": [1013, 1017, 1018, 1020, 1022], "fernando": [1013, 1020], "carrillo": 1013, "eckert": 1013, "zalkow": 1013, "ganiev": [1013, 1014, 1015], "ibraim": [1013, 1014, 1015], "giorgiop": 1013, "gryllo": [1013, 1016], "prokopi": [1013, 1016], "hsuan": 1013, "tien": 1013, "ishank": [1013, 1014, 1015], "gulati": [1013, 1014, 1015], "jeffrey04": [1013, 1014], "jfraj": 1013, "jiali": 1013, "mei": [1013, 1018], "kirkham": [1013, 1014, 1016], "wittenau": 1013, "loyal": 1013, "jungkook": 1013, "park": [1013, 1018, 1020, 1023], "kamalakerdadi": [1013, 1014], "kyler": 1013, "lilian": [1013, 1014], "besson": [1013, 1014], "tiao": [1013, 1014], "marktab": 1013, "spacek": 1013, "martinbpr": [1013, 1014], "martinosorb": 1013, "maryanmorel": [1013, 1014], "masafumi": 1013, "oyamada": 1013, "krump": 1013, "kolganov": 1013, "mbilling": 1013, "mhg": 1013, "patterson": 1013, "omer": 1013, "katz": [1013, 1020, 1021], "pauli": 1013, "virtanen": 1013, "fischer": [1013, 1014], "pianomania": 1013, "preston": [1013, 1014, 1015], "parri": [1013, 1014, 1015], "rohan": [1013, 1014, 1016, 1017, 1021], "ramanath": 1013, "bansod": [1013, 1014, 1015], "scls19fr": 1013, "saeger": [1013, 1014, 1015], "shivan": 1013, "sornarajah": 1013, "simonpl": 1013, "sseg": 1013, "hoover": [1013, 1014, 1015, 1017], "seguin": 1013, "theodor": 1013, "vasiloudi": 1013, "freita": [1013, 1015, 1016], "pereira": [1013, 1016, 1017], "timothi": [1013, 1021], "hopper": 1013, "tokoroten": 1013, "vstolbunov": 1013, "wangz10": 1013, "yucheng": 1013, "zhauniarovich": 1013, "zac": 1013, "stewart": [1013, 1018, 1021, 1023], "zhai_pro": 1013, "zichen": 1013, "7946": 1014, "8355": 1014, "9010": 1014, "8040": 1014, "9149": 1014, "aman": [1014, 1015, 1016, 1022, 1023], "dalmia": [1014, 1015, 1016], "nate": [1014, 1015, 1021], "guerin": [1014, 1015], "lebedev": [1014, 1015], "utilis": 1014, "6497": 1014, "7724": 1014, "bing": [1014, 1015], "explained_variance_ratio": 1014, "7632": 1014, "jpfrancoia": [1014, 1015], "7676": 1014, "moham": [1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "affan": 1014, "7756": 1014, "7786": 1014, "srivatsan": [1014, 1015, 1018], "7799": 1014, "7490": [1014, 1015], "6282": 1014, "7301": 1014, "6178": 1014, "7680": 1014, "n_iters_": 1014, "7553": 1014, "ekaterina": [1014, 1015, 1016, 1017, 1019], "krivich": [1014, 1015, 1017], "5874": 1014, "7593": 1014, "7594": 1014, "7660": 1014, "7750": 1014, "7732": 1014, "artsion": 1014, "lieu": [1014, 1015], "grid_scores_": [1014, 1020, 1021], "leaveonelabelout": 1014, "leaveplabelout": 1014, "plural": 1014, "mean_tim": 1014, "std_time": 1014, "3204": 1014, "5291": 1014, "sounder": 1014, "7295": 1014, "5299": 1014, "bravi": 1014, "fouchet": 1014, "calinski_harabaz_scor": [1014, 1016], "harabaz": 1014, "6586": 1014, "4294": 1014, "6667": 1014, "6954": 1014, "unveil": 1014, "yelit": 1014, "basebag": [1014, 1016], "staub": 1014, "5805": 1014, "5251": 1014, "imacul": 1014, "1000x": 1014, "arfa": 1014, "6691": 1014, "6913": 1014, "5762": 1014, "utkarsh": [1014, 1015, 1016, 1017], "upadhyai": [1014, 1015, 1016, 1017], "6846": 1014, "5929": 1014, "podshumok": [1014, 1015], "6173": 1014, "ryad": 1014, "zenin": 1014, "devashish": 1014, "asish": [1014, 1015], "dowl": 1014, "6697": 1014, "ori": 1014, "ziv": 1014, "sear": 1014, "merritt": 1014, "7325": 1014, "7239": 1014, "hong": [1014, 1016, 1020, 1021, 1022], "guangguo": 1014, "jensen": [1014, 1020], "7419": 1014, "gregori": [1014, 1018, 1019, 1020, 1021], "stupp": [1014, 1015], "bernardo": 1014, "stein": 1014, "sparse_func": [1014, 1020], "incr_mean_variance_axi": [1014, 1020], "7049": 1014, "7152": 1014, "load_boston": [1014, 1016, 1021], "7154": 1014, "manvendra": [1014, 1015], "singh": [1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023], "5540": 1014, "7248": 1014, "6764": 1014, "wenhua": 1014, "6817": 1014, "6902": 1014, "leonieborn": 1014, "5141": 1014, "4995": 1014, "5012": 1014, "_transform_select": 1014, "7194": 1014, "caio": [1014, 1016, 1018], "oliveira": [1014, 1016, 1018, 1022], "6182": 1014, "6121": 1014, "6472": 1014, "7350": 1014, "russel": [1014, 1015], "smith": [1014, 1015, 1016, 1017, 1018, 1020], "7159": 1014, "yichuan": [1014, 1015], "5460": 1014, "document_clust": 1014, "7353": 1014, "_search": 1014, "_check_param_grid": 1014, "xrang": 1014, "7323": 1014, "viacheslav": 1014, "kovalevskyi": 1014, "7101": 1014, "residual_metr": 1014, "6651": 1014, "reorgan": 1014, "7187": 1014, "7260": 1014, "sebasti\u00e1n": 1014, "vanrel": 1014, "leaveplabelsout": 1014, "6660": 1014, "unprefix": 1014, "7261": 1014, "aditya": [1014, 1016, 1017, 1018, 1022, 1023], "joshi": [1014, 1016, 1022], "loginov": 1014, "minyushkin": 1014, "rudi": 1014, "abadi": [1014, 1015], "saint": 1014, "alexfield": 1014, "alvaro": [1014, 1016], "ulloa": 1014, "alyssaq": 1014, "amlan": 1014, "kar": 1014, "giessel": 1014, "jackson": [1014, 1015, 1017], "murrai": [1014, 1015], "arafat": 1014, "archit": 1014, "asnt": 1014, "b0noi": 1014, "behzad": 1014, "tabibian": 1014, "kratzwald": 1014, "bhargav": 1014, "mangipudi": 1014, "blakeflei": 1014, "brandon": [1014, 1015, 1022, 1023], "carter": [1014, 1015, 1023], "camilo": 1014, "lamu": 1014, "carol": [1014, 1015], "Willing": [1014, 1015], "cass": 1014, "ceshin": 1014, "truong": 1014, "codevig": 1014, "shiebler": 1014, "hnyk": [1014, 1015], "elli": [1014, 1017], "nicholson": [1014, 1015, 1016], "thaler": 1014, "warshaw": 1014, "lasagna": 1014, "deborah": [1014, 1015], "definitelyuncertain": 1014, "didi": [1014, 1015, 1016, 1017], "zev": [1014, 1015, 1016, 1017], "dsquareindia": 1014, "edwinensa": 1014, "elia": 1014, "kuth": 1014, "fabio": 1014, "ticconi": 1014, "fisach": 1014, "donovan": 1014, "ghg": 1014, "giovanni": [1014, 1016], "cherubin": 1014, "lanzani": 1014, "glenn": 1014, "qian": [1014, 1019], "mohr": 1014, "govin": 1014, "vatsan": 1014, "reda": 1014, "gustav": 1014, "m\u00f6rtberg": 1014, "halwai": 1014, "harizo": [1014, 1015], "rajaona": [1014, 1015], "hashcode55": 1014, "hdmetor": 1014, "hobson": 1014, "lane": 1014, "bown": 1014, "igor": [1014, 1015, 1021], "andriushchenko": [1014, 1015], "inki": 1014, "hwang": 1014, "isaac": [1014, 1015, 1017, 1018], "sijaranamu": 1014, "iver": 1014, "jordal": 1014, "jackmartin": 1014, "fiedler": 1014, "routlei": 1014, "zike": 1014, "janna": 1014, "brettingen": 1014, "jarfa": 1014, "laska": 1014, "jblackburn": 1014, "levesqu": 1014, "hintz": 1014, "jeremynixon": 1014, "jeroen": 1014, "jessica": 1014, "jill": 1014, "j\u00eann": 1014, "vie": 1014, "jia": 1014, "jiyuan": 1014, "johannah": 1014, "boersma": 1014, "moeller": 1014, "striebel": [1014, 1015], "joncral": 1014, "jordi": 1014, "munoz": [1014, 1020], "jrfiedler": 1014, "juliankahnert": 1014, "juliathebrav": 1014, "kaichogami": 1014, "lyon": [1014, 1015], "kingjr": 1014, "kjell": 1014, "krishna": [1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023], "kalyan": 1014, "krishnakalyan3": 1014, "kvle": 1014, "putnam": 1014, "ldavid": 1014, "leig": 1014, "leightonzhang": 1014, "leland": [1014, 1015, 1016, 1018, 1019, 1024], "liang": [1014, 1019, 1020], "hsieh": 1014, "lizsz": 1014, "l\u00e9oni": 1014, "born": 1014, "maniteja": [1014, 1015, 1016], "nandana": [1014, 1015, 1016], "marco": [1014, 1016, 1017, 1021, 1022, 1023], "bao": [1014, 1022], "szepieniec": 1014, "madsen": [1014, 1016], "massil": 1014, "matheu": 1014, "duboi": [1014, 1016], "moroz": 1014, "scherer": 1014, "michiaki": 1014, "ariga": 1014, "moussa": 1014, "taifi": 1014, "mrandrewandrad": 1014, "mridul": 1014, "seth": 1014, "nadya": 1014, "naoya": [1014, 1015, 1016, 1017], "kanai": [1014, 1015, 1016], "nickledav": 1014, "nico": [1014, 1021], "ningchi": 1014, "nlathia": 1014, "okbalefthand": 1014, "okhlopkov": [1014, 1015], "pano": 1014, "lourida": 1014, "strickland": 1014, "perrin": 1014, "letelli": 1014, "pestrickland": 1014, "practicalswift": 1014, "qimu": 1014, "zheng": [1014, 1015, 1020], "rachit": [1014, 1020, 1023], "kansal": 1014, "ramana": [1014, 1015], "randi": 1014, "olson": 1014, "lutz": [1014, 1018, 1021], "schucker": 1014, "jain": [1014, 1015, 1016, 1020, 1022, 1023], "ruifeng": [1014, 1015, 1020], "r\u00e9my": 1014, "l\u00e9one": 1014, "saihttam": 1014, "saiw": 1014, "yeung": 1014, "shleifer": [1014, 1015], "sartaj": 1014, "sasank": 1014, "chilamkurthi": 1014, "seal": 1014, "shagun": 1014, "sodhani": 1014, "shanmuga": 1014, "shashank": [1014, 1020], "shekhar": 1014, "shawpan": 1014, "shengxiduan": 1014, "shota": 1014, "shuckle16": 1014, "smedbergm": 1014, "srvanrel": 1014, "leriqu": [1014, 1016], "taranjeet": 1014, "themrmax": [1014, 1015], "hallock": 1014, "moreau": [1014, 1015, 1016, 1017, 1018], "tkammi": 1014, "toastedcornflak": [1014, 1015], "tomdlt": 1014, "toshihiro": [1014, 1015, 1021], "kamishima": [1014, 1015], "tracer0tong": 1014, "hauck": 1014, "vo": [1014, 1022], "varun": [1014, 1015, 1016, 1022, 1023], "jewalikar": 1014, "vikram": [1014, 1023], "villu": 1014, "ruusmann": 1014, "walter": 1014, "waterponei": [1014, 1015], "wenjian": 1014, "welch": 1014, "wyseguy7": 1014, "xyguo": [1014, 1016], "yanlend": 1014, "yen": [1014, 1015], "yenchenlin": 1014, "yoav": 1014, "zivori": 1014, "10723": [1015, 1016], "9623": 1015, "undocu": 1015, "deleteri": 1015, "9677": 1015, "ashutosh": [1015, 1016, 1018, 1020], "correlation_model": 1015, "regression_model": 1015, "belatedli": 1015, "9717": 1015, "9693": 1015, "steingold": [1015, 1016], "9711": 1015, "goncalo": [1015, 1016], "rodrigu": [1015, 1016, 1021], "9641": 1015, "bourbeau": [1015, 1016, 1017], "9865": 1015, "sachin": [1015, 1016, 1022], "kelkar": [1015, 1016, 1018], "9922": 1015, "charli": [1015, 1016, 1024], "brummitt": [1015, 1016], "9945": 1015, "9830": 1015, "9600": 1015, "kerimov": [1015, 1016], "9593": 1015, "reiichiro": [1015, 1016], "nakano": [1015, 1016], "9604": 1015, "interim": 1015, "9558": 1015, "9847": 1015, "joan": [1015, 1016, 1017, 1018], "massich": [1015, 1016, 1017, 1018], "oli": 1015, "blum": 1015, "9697": 1015, "9750": 1015, "9788": 1015, "9815": 1015, "9802": 1015, "vrishank": [1015, 1016], "bhardwaj": [1015, 1016], "nagarjuna": [1015, 1016], "nathaniel": [1015, 1016, 1018], "diegodlh": [1015, 1016], "jkleint": [1015, 1016], "oliblum90": [1015, 1016], "pasbi": [1015, 1016], "lawson": [1015, 1016, 1017], "nielsenmarkus11": [1015, 1016], "excit": 1015, "cautiou": 1015, "min_impurity_split": 1015, "7823": [1015, 1016], "8446": 1015, "5279": 1015, "8363": 1015, "5295": 1015, "7388": 1015, "userguid": 1015, "7655": 1015, "karan": [1015, 1016, 1017], "desai": [1015, 1017, 1020, 1021, 1023], "7739": 1015, "gasquez": 1015, "8120": 1015, "neeraj": 1015, "gangwar": 1015, "7548": 1015, "9206": 1015, "7441": 1015, "6101": 1015, "8698": 1015, "7794": 1015, "herilalaina": [1015, 1016, 1018], "rakotoarison": [1015, 1016, 1018], "5036": 1015, "4939": 1015, "esuli": [1015, 1020], "n_skips_": 1015, "7914": 1015, "horrel": 1015, "8591": 1015, "hadrien": [1015, 1018], "7838": 1015, "8835": 1015, "8061": 1015, "cordier": 1015, "6288": 1015, "9145": 1015, "reddi": [1015, 1016, 1017, 1022], "chinthala": 1015, "7721": 1015, "crall": [1015, 1021], "7685": 1015, "tommi": [1015, 1016, 1017], "l\u00f6fstedt": 1015, "9277": 1015, "hongkahjun": 1015, "7089": 1015, "randomized_svd_low_rank": 1015, "9067": 1015, "6181": 1015, "wendling": 1015, "8065": 1015, "lejeun": 1015, "7567": 1015, "jay": 1015, "doepk": 1015, "7573": 1015, "romain": [1015, 1020], "brault": 1015, "5229": 1015, "7990": 1015, "8586": 1015, "7723": 1015, "8028": 1015, "booth": 1015, "8005": 1015, "7863": 1015, "7506": 1015, "5991": 1015, "8845": 1015, "8053": 1015, "8282": 1015, "8117": 1015, "9259": 1015, "8094": 1015, "8335": 1015, "poughon": 1015, "7880": 1015, "karnofski": 1015, "935": 1015, "8931": 1015, "attractador": [1015, 1016], "8002": 1015, "8549": 1015, "zerodivisionerror": [1015, 1018, 1024], "7501": 1015, "dominik": 1015, "krzeminski": 1015, "7970": 1015, "8006": 1015, "p\u00f6lsterl": [1015, 1018, 1021], "8936": 1015, "8672": 1015, "mike": 1015, "benfield": 1015, "broke": 1015, "8068": 1015, "5732": 1015, "ytrue": 1015, "ypred": 1015, "8087": 1015, "7983": 1015, "8512": 1015, "8251": 1015, "aivision2020": 1015, "5814": 1015, "7849": 1015, "jair": 1015, "montoya": 1015, "martinez": 1015, "randomizedlasso": 1015, "5359": 1015, "9302": 1015, "8160": 1015, "8224": 1015, "gedeck": 1015, "vathsala": [1015, 1016, 1017, 1018], "achar": [1015, 1016, 1017, 1018], "9022": 1015, "mehmet": [1015, 1021], "basbug": 1015, "9024": 1015, "8973": 1015, "paulo": [1015, 1021, 1023], "haddad": 1015, "unmeaning": 1015, "6573": 1015, "quazi": [1015, 1016], "marufur": 1015, "rahman": [1015, 1016, 1020], "9239": 1015, "andr": [1015, 1022], "ambrosio": 1015, "boechat": 1015, "early_exager": 1015, "assertionerror": 1015, "8992": 1015, "7954": 1015, "foreman": 1015, "9105": 1015, "9108": 1015, "8306": 1015, "7872": 1015, "_c_step": 1015, "3367": 1015, "steward": 1015, "8768": 1015, "detomaso": 1015, "6507": 1015, "jayzed82": 1015, "6126": 1015, "7814": 1015, "7702": 1015, "9219": 1015, "7771": 1015, "ang": 1015, "randomizedlogisticregress": 1015, "8259": 1015, "mandatorili": 1015, "7565": 1015, "8181": 1015, "basesearchcv": [1015, 1016], "8344": 1015, "eriksson": 1015, "7661": 1015, "8295": 1015, "batula": 1015, "dylan": [1015, 1018], "werner": [1015, 1020], "meier": 1015, "7365": 1015, "aleksandr": 1015, "sandrovskii": 1015, "5697": 1015, "stijn": 1015, "tonk": 1015, "6250": 1015, "8093": 1015, "bull": 1015, "9507": 1015, "7356": 1015, "dingwal": 1015, "_check_target": 1015, "8377": 1015, "5211": 1015, "rhinehart": 1015, "8159": 1015, "8198": 1015, "fetch_": 1015, "7944": 1015, "7825": 1015, "kathleen": 1015, "7376": 1015, "7331": 1015, "yangarbit": 1015, "__getstate__": [1015, 1023], "obstruct": 1015, "8316": 1015, "holger": 1015, "8010": 1015, "7986": 1015, "najera": 1015, "9289": 1015, "makedir": 1015, "9284": 1015, "sebastin": [1015, 1016], "alert": 1015, "lgtm": 1015, "9278": 1015, "heli": 1015, "8449": 1015, "9078": 1015, "purport": 1015, "sergul": [1015, 1016, 1019], "aydor": [1015, 1016, 1019], "8922": 1015, "8137": 1015, "8139": 1015, "8995": 1015, "2879": 1015, "7459": 1015, "7812": 1015, "9100": 1015, "8481": 1015, "8174": 1015, "tahar": 1015, "zanouda": 1015, "8854": 1015, "8874": 1015, "7998": 1015, "jiacheng": 1015, "argpartit": 1015, "frombuffer_empti": 1015, "rankdata": 1015, "safe_copi": 1015, "eig": 1015, "fast_dot": 1015, "pinvh": [1015, 1017], "graph_laplacian": 1015, "sparsetool": 1015, "connected_compon": 1015, "check_decision_proba_consist": 1015, "shubham": [1015, 1018], "9019": 1015, "baseensembl": [1015, 1018], "7464": 1015, "rishikesh": 1015, "taehoon": [1015, 1016], "aashil": 1015, "balakumaran": [1015, 1016], "manoharan": [1015, 1016], "petrov": [1015, 1016], "minghui": [1015, 1016], "jc": [1015, 1016], "alexandercbooth": 1015, "chkoar": 1015, "aarshai": [1015, 1016], "gilliam": 1015, "subramanyam": 1015, "clement": [1015, 1016, 1020], "joudet": [1015, 1016], "robl": 1015, "kati": 1015, "luangkot": 1015, "lacchia": 1015, "akshay0724": 1015, "omtcyfz": 1015, "rickiepark": 1015, "jbdelafoss": 1015, "vivek": [1015, 1016, 1017], "elliott": 1015, "ldirer": 1015, "sid": 1015, "kapur": 1015, "midina": 1015, "mikebenfield": 1015, "sourav": [1015, 1018], "aseem": 1015, "bansal": 1015, "aishwaryark": 1015, "howel": 1015, "dokato": 1015, "kathi": [1015, 1018], "ferria": 1015, "nikita": [1015, 1016, 1018, 1021, 1022, 1023], "basil": 1015, "beirouti": 1015, "possa": 1015, "bednar": 1015, "janin": 1015, "harper": 1015, "artsiom": 1015, "ligo": 1015, "rahn": [1015, 1018], "seanpwilliam": 1015, "julian": [1015, 1016], "kuhlmann": [1015, 1016], "aubert": 1015, "j\u00f6rn": 1015, "hee": [1015, 1018], "shivamgargsya": [1015, 1019, 1021], "kat": 1015, "hempstalk": 1015, "kaushik": [1015, 1022, 1023, 1024], "lakshmikanth": 1015, "kennedi": [1015, 1018], "yap": 1015, "kiril": [1015, 1016, 1018, 1020], "bobyrev": 1015, "imbert": [1015, 1017, 1020, 1022], "lera": 1015, "douillard": 1015, "mainak": 1015, "tobychees": [1015, 1016], "manraj": 1015, "marc": [1015, 1017, 1018, 1024], "meketon": 1015, "marcofalk": 1015, "gilch": 1015, "mehul": 1015, "ahuja": [1015, 1022, 1023], "goetz": [1015, 1016], "dezub": 1015, "baumgartn": 1015, "vibrantabhi19": 1015, "golubin": 1015, "milen": 1015, "paskov": 1015, "antonin": 1015, "carett": 1015, "morikko": 1015, "mrmjauh": 1015, "nalepa": 1015, "namiya": 1015, "narinek": [1015, 1016], "angu": [1015, 1016, 1022], "nicol": 1015, "vavrova": 1015, "nitish": 1015, "pandei": [1015, 1020], "daniil": 1015, "olegovich": 1015, "craze": 1015, "om": 1015, "parmind": 1015, "patrick": [1015, 1016, 1021, 1022], "carlson": 1015, "ganssl": 1015, "lorek": 1015, "pete": [1015, 1019, 1020], "bachant": 1015, "csizsek": 1015, "jong": 1015, "puneet": 1015, "mathur": [1015, 1017, 1018, 1023, 1024], "quentin": [1015, 1016, 1017, 1024], "hibon": 1015, "1kastner": 1015, "rameshwar": [1015, 1016], "bhaskaran": [1015, 1016], "rebecca": 1015, "bilbro": 1015, "remi": 1015, "rampin": 1015, "pratik": 1015, "agarw": [1015, 1016, 1018], "sailesh": [1015, 1016], "choyal": [1015, 1016], "samson": 1015, "samu\u00ebl": 1015, "weber": 1015, "sarah": [1015, 1017, 1020], "abhyudai": 1015, "sharan": [1015, 1016], "yalburgi": [1015, 1016], "willduan": 1015, "siddharth": [1015, 1019], "almer": 1015, "theofilo": 1015, "papapanagiot": 1015, "alison": 1015, "boucher": 1015, "folkman": 1015, "jung": [1015, 1019, 1023], "shenoi": 1015, "vilhelm": [1015, 1016], "ehrenheim": [1015, 1016], "alan": [1015, 1016, 1019, 1021, 1022], "yee": [1015, 1016], "warut": [1015, 1016], "vijitbenjaronk": [1015, 1016], "yuichi": 1015, "fujikawa": 1015, "affanv14": 1015, "andreh7": 1015, "bradi": 1015, "salz": 1015, "campustrampu": 1015, "agamemnon": [1015, 1016, 1017, 1018, 1020, 1021], "krasouli": [1015, 1016, 1017, 1018, 1020, 1021], "ditenberg": 1015, "elena": 1015, "sharova": 1015, "filipj8": [1015, 1016], "fukatani": 1015, "guiniol": 1015, "guoci": 1015, "hakaa1": [1015, 1016], "xhy": 1015, "jakirkham": [1015, 1016, 1017, 1023], "jaroslaw": 1015, "jeroko": 1015, "jmontoyam": 1015, "josephsalmon": [1015, 1016, 1017], "jschendel": [1015, 1016], "leereev": 1015, "hahn": [1015, 1016], "mathurinm": [1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023], "mehak": 1015, "sachdeva": 1015, "mlewis1729": 1015, "mlliou112": 1015, "mthorrel": [1015, 1018], "ndingwal": 1015, "nuff": 1015, "plagre": 1015, "pldtc325": 1015, "breno": [1015, 1016], "olsen": 1015, "alfano": 1015, "burn": [1015, 1016], "polmauri": 1015, "charlton": 1015, "austin": 1015, "chayant": 1015, "t15h": 1015, "chinmaya": 1015, "pancholi": 1015, "danielsen": 1015, "chung": [1015, 1016], "pravarmahajan": [1015, 1016], "dariu": [1015, 1016], "morawiec": [1015, 1016], "haberth\u00fcr": 1015, "heryanto": 1015, "kirkbi": [1015, 1016], "rashchedrin": 1015, "gertrud": 1015, "devansh": [1015, 1016], "dickson": 1015, "baxlei": 1015, "don86": 1015, "klarup": 1015, "elizabeth": [1015, 1017, 1020], "ferriss": 1015, "ellen": 1015, "egli": 1015, "chieh": [1015, 1016], "chou": [1015, 1016], "grzegorz": [1015, 1018], "szpak": [1015, 1018], "zxcvbniu": 1015, "icyblad": 1015, "ilya": 1015, "laughlin": 1015, "iv\u00e1n": [1015, 1021], "vall\u00e9": 1015, "aur\u00e9lien": [1015, 1016, 1017, 1021, 1022], "bellet": [1015, 1016, 1017], "mahapatra": 1015, "bundl": [1016, 1017], "indexerror": [1016, 1017], "11756": [1016, 1017], "14237": [1016, 1017], "schuder": [1016, 1017, 1018], "13903": [1016, 1017], "13124": [1016, 1017], "13772": [1016, 1017], "vya": [1016, 1017, 1018], "12949": 1016, "prabakaran": [1016, 1017, 1020, 1022, 1023], "kumaresshan": [1016, 1017, 1020], "12946": 1016, "tallott": 1016, "13276": 1016, "13005": 1016, "13312": 1016, "11295": 1016, "vacaliuc": [1016, 1017], "13046": 1016, "12360": 1016, "aakanksha": 1016, "13134": 1016, "sandro": [1016, 1023], "casagrand": [1016, 1017], "12881": 1016, "13165": 1016, "13221": 1016, "bertrandhaut": [1016, 1017], "raghunathan": [1016, 1017, 1018, 1019, 1020, 1021, 1022], "dowon": [1016, 1017], "aria": [1016, 1017, 1023], "fibins": [1016, 1017], "finn": [1016, 1017], "shea": [1016, 1017], "joaak": [1016, 1017], "m\u00e9hault": [1016, 1017], "kms15": [1016, 1017], "kossori": [1016, 1017], "aruku": [1016, 1017], "lakshya": [1016, 1017, 1018], "ib\u00e1\u00f1ez": [1016, 1017, 1020], "gorelli": [1016, 1017, 1021, 1023], "marcogorelli": [1016, 1017], "mferrari3": [1016, 1017], "micka\u00ebl": [1016, 1017], "schoentgen": [1016, 1017], "pavlo": [1016, 1017], "kalli": [1016, 1017], "glaser": [1016, 1017], "pierretallott": [1016, 1017, 1018], "kapoor": [1016, 1017], "sandrocasagrand": [1016, 1017], "tashai": [1016, 1017], "vishaal": [1016, 1017], "zhuyi": [1016, 1017], "ziji": [1016, 1017], "zj": [1016, 1017], "poh": [1016, 1017], "12704": 1016, "12701": 1016, "12685": 1016, "12699": 1016, "adanhawth": [1016, 1017], "stine": [1016, 1017], "feda": [1016, 1017], "curic": [1016, 1017], "jeremiedbb": [1016, 1017, 1018], "katrin": [1016, 1017], "leinweb": [1016, 1017], "muhammad": [1016, 1017, 1021], "hassaan": [1016, 1017], "rafiqu": [1016, 1017], "paczuski": [1016, 1017], "waterburi": [1016, 1017], "shivam": [1016, 1017, 1018], "kotwalia": [1016, 1017], "12159": 1016, "12105": 1016, "11912": 1016, "12304": 1016, "12339": 1016, "12246": 1016, "10811": 1016, "feldbauer": [1016, 1017, 1018, 1019, 1022], "12441": 1016, "12517": 1016, "12234": 1016, "12165": 1016, "12388": 1016, "connor": [1016, 1021], "tann": [1016, 1021], "12393": 1016, "12122": 1016, "sharedmem": 1016, "12518": 1016, "12481": 1016, "12612": 1016, "12211": 1016, "lisa": [1016, 1017, 1019, 1020, 1022, 1023], "hannel": [1016, 1017], "melissa": 1016, "ferrari": 1016, "12451": 1016, "12171": 1016, "12365": 1016, "_encod": 1016, "12514": 1016, "12522": 1016, "12471": 1016, "marzinotto": [1016, 1017], "12317": 1016, "12338": 1016, "bauk": [1016, 1017], "12625": 1016, "sklearn_site_joblib": 1016, "12350": 1016, "12467": 1016, "unvendor": 1016, "12345": 1016, "navarret": [1016, 1017, 1018], "benjastudio": [1016, 1017], "cheuk": [1016, 1017], "connossor": [1016, 1017], "levinson": [1016, 1017], "kieker": [1016, 1017], "kataev": [1016, 1017], "dillon": [1016, 1017, 1018], "gardner": [1016, 1017], "vukolov": [1016, 1017], "caselli": [1016, 1017], "gauravahlawat": [1016, 1017], "gustavo": [1016, 1017, 1022], "haroldfox": [1016, 1017], "jacklangerman": [1016, 1017], "jacopo": [1016, 1017], "notarstefano": [1016, 1017], "janvanrijn": [1016, 1017], "jdethuren": [1016, 1017], "koen": [1016, 1017], "kushal": [1016, 1017], "chauhan": [1016, 1017, 1023], "jie": [1016, 1017, 1020], "lili": [1016, 1017], "xiong": [1016, 1017, 1022], "liam": [1016, 1017], "melsyt": [1016, 1017], "nichola": [1016, 1017, 1019], "shebanov": [1016, 1017], "oleksandr": [1016, 1017, 1018, 1019, 1022], "pavlyk": [1016, 1017, 1018, 1019], "hausamann": [1016, 1017], "pulkit": [1016, 1017, 1019], "maloo": [1016, 1017], "batista": [1016, 1017, 1021], "radostin": [1016, 1017], "stoyanov": [1016, 1017], "ramil": [1016, 1017], "nugmanov": [1016, 1017], "rebekah": [1016, 1017, 1018], "roopam": [1016, 1017], "tiernei": [1016, 1017, 1018], "sylvainlan": [1016, 1017, 1018, 1019, 1020], "takingitcasu": [1016, 1017], "tulio": [1016, 1017], "xing": [1016, 1017], "zach": [1016, 1017, 1022], "mountain": 1016, "sorri": 1016, "basemultilayerperceptron": [1016, 1018], "11924": 1016, "macbook": 1016, "9354": 1016, "9372": 1016, "astel": 1016, "10933": 1016, "hansen": 1016, "10471": 1016, "gaurav": [1016, 1017, 1018, 1019, 1020, 1022], "dhingra": [1016, 1017, 1020], "8003": 1016, "jo\u00ebl": 1016, "billaud": 1016, "10059": 1016, "braun": 1016, "9612": 1016, "jonatan": 1016, "samoocha": 1016, "8129": 1016, "margeta": 1016, "k_means_elkan": 1016, "11353": 1016, "11901": 1016, "9875": 1016, "9012": 1016, "11315": 1016, "9041": 1016, "9858": 1016, "artiem": 1016, "krinitsyn": 1016, "9908": 1016, "8617": 1016, "maskani": [1016, 1018, 1019, 1020], "filali": 1016, "konstantino": 1016, "katriopla": 1016, "10774": 1016, "catalfo": 1016, "10795": 1016, "takeshi": [1016, 1021, 1022, 1023], "yoshizawa": 1016, "11082": 1016, "sadhana": 1016, "srinivasan": [1016, 1019], "9731": 1016, "10045": 1016, "fetch_mldata": 1016, "11466": 1016, "6374": 1016, "normalize_compon": [1016, 1018], "11585": 1016, "ivan": [1016, 1017, 1020, 1023], "panico": [1016, 1020], "11420": 1016, "6452": 1016, "walli": 1016, "gauz": 1016, "9492": 1016, "8484": 1016, "9886": 1016, "underflow": [1016, 1021], "10142": 1016, "5956": 1016, "_class_mean": 1016, "_class_cov": 1016, "10898": 1016, "nanxin": 1016, "9832": 1016, "11951": 1016, "r\u00fcdiger": [1016, 1017, 1019], "busch": [1016, 1017, 1019], "9707": 1016, "wan": 1016, "7071": 1016, "9157": 1016, "11176": 1016, "forsyth": 1016, "11542": 1016, "anna": 1016, "9524": 1016, "9723": 1016, "10908": 1016, "10899": 1016, "melderi": 1016, "10101": 1016, "10\u2079": 1016, "9147": 1016, "clae": 1016, "fredrik": 1016, "mannbi": 1016, "10441": 1016, "mayur": 1016, "kulkarni": 1016, "6689": 1016, "nihar": 1016, "sheth": 1016, "11293": 1016, "9656": 1016, "greenhal": 1016, "n_features_to_comput": 1016, "9222": 1016, "hoh": 1016, "9234": 1016, "andrewww": 1016, "8075": 1016, "11211": 1016, "9484": 1016, "dalla": 1016, "card": 1016, "9043": 1016, "10112": 1016, "logistic_regression_path": [1016, 1017], "11724": 1016, "9939": 1016, "westov": 1016, "10998": 1016, "vazelh": [1016, 1017, 1018], "10071": 1016, "10153": 1016, "d\u00f6pfert": 1016, "10095": 1016, "cv_valu": 1016, "10297": 1016, "mabel": [1016, 1020], "10581": 1016, "yacin": 1016, "mazari": 1016, "10687": 1016, "10836": 1016, "aishwarya": 1016, "10397": 1016, "10992": 1016, "11327": 1016, "11905": 1016, "9837": 1016, "10593": 1016, "10610": 1016, "8554": 1016, "9775": 1016, "10827": 1016, "osa": 1016, "8066": 1016, "10587": 1016, "3840": 1016, "niederb\u00fchl": 1016, "9521": 1016, "11124": 1016, "arya": 1016, "11160": 1016, "barkhorn": 1016, "11679": 1016, "pacha": 1016, "10845": 1016, "perez": [1016, 1023], "parra": 1016, "toledano": 1016, "10999": 1016, "memoryerror": [1016, 1020], "11135": 1016, "10377": 1016, "9786": 1016, "10093": 1016, "alexryndin": 1016, "9772": 1016, "9515": 1016, "liddel": 1016, "manh": 1016, "dao": 1016, "9851": 1016, "10280": 1016, "10336": 1016, "haoran": 1016, "basemixtur": [1016, 1017], "10740": 1016, "10869": 1016, "g\u00e9ron": 1016, "9686": 1016, "11310": 1016, "_fit_and_scor": 1016, "11576": 1016, "ronsin": [1016, 1017], "_run_search": 1016, "9599": 1016, "11006": 1016, "11557": 1016, "boucaud": 1016, "iid": 1016, "9085": 1016, "10677": 1016, "zhdanovich": 1016, "10982": 1016, "juliet": 1016, "lawton": 1016, "10928": 1016, "solutu": 1016, "immensu": 1016, "9257": 1016, "8190": 1016, "alcorn": 1016, "9681": 1016, "mottl": [1016, 1017], "10005": 1016, "10346": 1016, "tobia": [1016, 1021, 1023], "10887": 1016, "11136": 1016, "4394": 1016, "9579": 1016, "kober": 1016, "9655": 1016, "bjerr": 1016, "11556": 1016, "11774": 1016, "9456": 1016, "unexpectedli": 1016, "9304": 1016, "11144": [1016, 1017], "9151": 1016, "10521": 1016, "7668": 1016, "9647": 1016, "10195": 1016, "10192": 1016, "11272": 1016, "11467": 1016, "11505": 1016, "giusepp": [1016, 1017], "costa": [1016, 1021], "10210": 1016, "11520": 1016, "11011": 1016, "11005": 1016, "11308": 1016, "11206": 1016, "11306": 1016, "10437": 1016, "lucija": 1016, "gregov": 1016, "10452": 1016, "10181": 1016, "nirvan": [1016, 1020], "anjirbag": 1016, "9399": 1016, "10913": 1016, "rodrigo": 1016, "agundez": 1016, "10458": 1016, "9816": 1016, "newei": 1016, "11042": 1016, "11235": 1016, "active_features_": 1016, "feature_indices_": 1016, "n_values_": 1016, "9726": 1016, "10829": 1016, "gilberto": 1016, "olimpio": 1016, "10655": 1016, "python2": 1016, "10412": 1016, "jiongyan": 1016, "9497": 1016, "8361": 1016, "neo": 1016, "_criterion": 1016, "classificationcriterion": 1016, "regressioncriterion": 1016, "10325": 1016, "camil": 1016, "stap": 1016, "basedecisiontre": [1016, 1017, 1020], "10536": 1016, "ohayon": [1016, 1017, 1024], "11464": 1016, "stott": 1016, "10663": 1016, "10229": 1016, "11553": 1016, "10881": 1016, "sevin": 1016, "ridge_regress": [1016, 1017, 1023], "10306": 1016, "siebert": 1016, "11741": 1016, "11166": 1016, "pypy3": 1016, "v5": 1016, "11010": 1016, "lami": 1016, "11596": 1016, "marcu": 1016, "voss": 1016, "9569": 1016, "12462": 1016, "zachariah": 1016, "10474": 1016, "10500": 1016, "9701": 1016, "9378": 1016, "check_set_param": 1016, "7738": 1016, "alvin": 1016, "chiang": 1016, "8102": 1016, "ankita": 1016, "sinha": 1016, "check_methods_subset_invari": [1016, 1022], "10428": 1016, "check_sample_weights_pandas_seri": 1016, "11558": 1016, "211217613": 1016, "absolutelynowarranti": 1016, "richi": 1016, "halford": [1016, 1023], "adelr": 1016, "adityadaflapurkar": 1016, "aidan": 1016, "fitzgerald": 1016, "aishgrt1": 1016, "akash": 1016, "shivram": 1016, "lenail": [1016, 1020], "egg": 1016, "diaz": 1016, "amanda": [1016, 1019, 1020, 1021, 1022], "aniruddha": 1016, "annaayzenshtat": 1016, "antonio": [1016, 1018], "quinonez": 1016, "anubhav": 1016, "marwaha": 1016, "arik": 1016, "pamnani": 1016, "ozga": 1016, "arunava": 1016, "geron": [1016, 1021, 1022], "ayush": [1016, 1021], "bangda": 1016, "bastian": 1016, "venthur": 1016, "benn": 1016, "koonc": 1016, "cclauss": 1016, "chadi": 1016, "kamar": 1016, "holdgraf": 1016, "hirsch": 1016, "hogan": 1016, "cnx": 1016, "cwitt": 1016, "ferreira": [1016, 1021, 1022], "gomez": [1016, 1023], "klevebr": 1016, "shwed": 1016, "mohn": [1016, 1020], "danil": 1016, "baibak": [1016, 1017], "beach": 1016, "pickup": 1016, "derek": 1016, "niederhut": [1016, 1018], "dilutedsauc": 1016, "dlovel": 1016, "dor": 1016, "dougla": 1016, "duhaim": 1016, "tuzova": 1016, "eunji": 1016, "farahsae": 1016, "raimundo": 1016, "fenx": 1016, "frankhui": 1016, "franz": 1016, "wompner": 1016, "freija": 1016, "descamp": 1016, "frsi": 1016, "calvo": [1016, 1017], "georgi": [1016, 1019], "peev": [1016, 1019], "gkevinyen5418": 1016, "vermeil": 1016, "hongh": 1016, "hossein": [1016, 1017, 1018], "pourbozorg": [1016, 1017, 1018], "hristo": [1016, 1023], "hunan": 1016, "rostomyan": 1016, "iampat": 1016, "jaewon": 1016, "malcolm": 1016, "jami": 1016, "wolosonovich": 1016, "jeb": 1016, "bearer": 1016, "jinkun": 1016, "jjabl": 1016, "johnstott": 1016, "jotasi": 1016, "julietcl": 1016, "shenk": 1016, "karl": 1016, "kasper": 1016, "primdal": 1016, "lauritzen": 1016, "ksemb": 1016, "kuai": [1016, 1017], "kyeongpil": 1016, "kang": [1016, 1018], "kye": 1016, "kyledrogo": 1016, "l\u00e9o": 1016, "liutong": 1016, "lizao": 1016, "lkjcalc": 1016, "louib": [1016, 1017], "luciano": [1016, 1023], "luke": 1016, "persola": 1016, "markiwanchyshyn": 1016, "marsgui": 1016, "gubri": [1016, 1017], "koko": [1016, 1022, 1023], "copeland": [1016, 1017], "meghann": [1016, 1018], "minh": 1016, "jamaoui": [1016, 1017, 1020], "mohammad": [1016, 1017], "shahebaz": 1016, "muayyad": 1016, "alsadi": 1016, "nabarun": 1016, "pal": [1016, 1022], "narendran": 1016, "santhanam": 1016, "suh": 1016, "eng": 1016, "av": 1016, "nicolau": 1016, "werneck": 1016, "titov": [1016, 1018, 1021, 1022], "nilesh": 1016, "kevlani": 1016, "notmatthancock": [1016, 1018], "nzw": 1016, "oren": 1016, "milman": 1016, "osaid": 1016, "rehman": 1016, "nasir": 1016, "fernand": [1016, 1022, 1023], "olden": 1016, "pierreablin": 1016, "pietruh": 1016, "pinaki": 1016, "nath": 1016, "chowdhuri": [1016, 1022], "piotr": [1016, 1017], "szyma\u0144ski": [1016, 1017], "pradeep": [1016, 1017], "raamana": [1016, 1017], "pravar": 1016, "mahajan": [1016, 1018], "qingi": 1016, "rajendra": 1016, "arora": [1016, 1023], "rankylau": 1016, "kosobrodov": 1016, "rragundez": 1016, "sagnik": 1016, "bhattacharya": 1016, "radhakrishnan": 1016, "saqib": 1016, "nizam": 1016, "shamsi": 1016, "satish": 1016, "gigant": [1016, 1018, 1023], "flennerhag": 1016, "sebastien": 1016, "shalil": 1016, "awalei": 1016, "shangwu": [1016, 1017], "sharad": 1016, "vijalapuram": 1016, "shenhanc78": 1016, "rastogi": 1016, "siftikha": 1016, "sinclert": 1016, "p\u00e9rez": 1016, "solutusimmensu": 1016, "somya": 1016, "anand": [1016, 1020], "srajan": 1016, "paliw": 1016, "sriharsha": [1016, 1017], "hatwar": [1016, 1017], "mcdowel": 1016, "syonekura": 1016, "takanori": 1016, "hayashi": 1016, "tarcusx": 1016, "theriley106": 1016, "heavei": 1016, "augspurg": [1016, 1018], "trishnendu": 1016, "ghorai": 1016, "twosigmajab": 1016, "umar": [1016, 1017], "farouk": [1016, 1017], "urvang": [1016, 1018], "patel": [1016, 1018, 1019, 1020, 1022], "vadim": [1016, 1020, 1021], "markovtsev": 1016, "vinit": 1016, "vinod": 1016, "viraj": 1016, "mavani": 1016, "navkal": 1016, "vqean3": [1016, 1017], "vufg": 1016, "wallygauz": 1016, "wdevazelh": 1016, "barnett": 1016, "rosenfeld": 1016, "yime": 1016, "ymazari": 1016, "yufeng": 1016, "griffith": [1016, 1017], "z\u00e9": 1016, "vin\u00edciu": 1016, "zhenq": 1016, "zhiqe": 1016, "xiao": [1016, 1018, 1021, 1022, 1023, 1024], "couldn": [1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "12955": 1017, "klopfer": 1017, "14197": 1017, "14024": 1017, "nicolashug": 1017, "13974": 1017, "hoang": [1017, 1018], "fhoang7": 1017, "14393": 1017, "guillem": [1017, 1018, 1023], "subi": [1017, 1018, 1023], "14087": 1017, "14067": 1017, "stalei": [1017, 1018], "14092": 1017, "14053": 1017, "13947": 1017, "instanci": 1017, "suffient": 1017, "13910": 1017, "13894": 1017, "myatt": [1017, 1018], "min_max_axi": 1017, "13741": 1017, "roddi": [1017, 1018], "macsween": [1017, 1018], "14309": 1017, "13864": 1017, "paresh": [1017, 1018], "13877": 1017, "_sag": 1017, "sag_solv": 1017, "3591": 1017, "13317": 1017, "13157": 1017, "13086": 1017, "cole": 1017, "13485": 1017, "assia": 1017, "benbihi": 1017, "13651": 1017, "reloc": 1017, "13486": 1017, "13427": 1017, "couvreur": [1017, 1018], "9069": 1017, "13835": 1017, "10727": 1017, "wood": 1017, "13250": 1017, "13241": 1017, "12143": 1017, "11650": 1017, "non_negative_factor": [1017, 1019, 1020, 1021], "12988": 1017, "8769": 1017, "11000": 1017, "thibault": 1017, "sejourn": 1017, "changedbehaviourwarn": 1017, "11526": 1017, "6848": 1017, "glemaitr": [1017, 1018, 1020], "11727": 1017, "13266": 1017, "13545": 1017, "sorro": 1017, "12807": 1017, "12513": 1017, "12543": 1017, "storch": 1017, "13260": 1017, "13283": 1017, "13524": 1017, "13174": 1017, "13496": 1017, "13620": 1017, "12436": 1017, "12983": 1017, "13251": 1017, "joshuakennethjon": 1017, "12715": 1017, "13164": 1017, "12834": 1017, "leastsquareserror": 1017, "update_terminal_region": 1017, "6463": 1017, "movelikeriv": 1017, "13193": 1017, "12599": 1017, "13779": 1017, "13780": 1017, "12916": 1017, "13641": 1017, "8478": 1017, "12177": 1017, "12583": 1017, "13601": 1017, "danylo": 1017, "densif": 1017, "13240": 1017, "bartosz": 1017, "13562": 1017, "11646": 1017, "11699": 1017, "make_dataset": 1017, "13336": 1017, "toleranbc": 1017, "11754": 1017, "13397": 1017, "fagan": 1017, "12174": 1017, "12972": 1017, "lucio": 1017, "fernandez": 1017, "arjona": 1017, "coeffeci": 1017, "13279": 1017, "13328": 1017, "13389": 1017, "basesgdclassifi": 1017, "13422": 1017, "cl\u00e9ment": [1017, 1021, 1023], "doumouro": 1017, "unhandl": 1017, "13363": 1017, "12821": 1017, "13350": 1017, "j\u00e9r\u00f4me": [1017, 1018, 1019], "dock\u00e8": [1017, 1018, 1019], "9907": 1017, "12232": 1017, "sangeeth": 1017, "11179": 1017, "13151": 1017, "12568": 1017, "8216": 1017, "romuald": 1017, "menuet": 1017, "12732": 1017, "12334": 1017, "13607": 1017, "12855": 1017, "pawel": 1017, "sendyk": 1017, "13628": 1017, "13447": 1017, "10580": 1017, "sandra": [1017, 1023], "mitrov": 1017, "13554": 1017, "celelibi": 1017, "13142": 1017, "11354": 1017, "12613": 1017, "12669": 1017, "torrella": [1017, 1018, 1024], "12861": 1017, "8773": 1017, "13366": 1017, "fournier": 1017, "10440": 1017, "12222": 1017, "10058": 1017, "chiotelli": 1017, "12279": 1017, "12582": 1017, "my_pipelin": 1017, "2568": 1017, "make_": 1017, "11364": 1017, "baze": 1017, "petrushev": 1017, "__len__": 1017, "13439": 1017, "12908": 1017, "drew": 1017, "13253": 1017, "12116": 1017, "12197": 1017, "12251": 1017, "float16": 1017, "13007": 1017, "raffaello": 1017, "baluyot": 1017, "13333": 1017, "13459": 1017, "hunter": 1017, "mcgushion": 1017, "8508": 1017, "6261": 1017, "vettigli": 1017, "justglow": 1017, "12300": 1017, "11458": 1017, "mitar": 1017, "milutinov": 1017, "12344": 1017, "13549": 1017, "warn_on_dtyp": 1017, "check_pairwise_arrai": 1017, "13382": 1017, "prathmesh": 1017, "saval": 1017, "11705": 1017, "11973": 1017, "our_rand_r": 1017, "madhura": [1017, 1019, 1020, 1023], "parikh": [1017, 1022, 1023, 1024], "13531": 1017, "check_fit_idempot": 1017, "alberto": [1017, 1021, 1022], "torr": 1017, "amourav": 1017, "assiaben": 1017, "micha\u0142owski": 1017, "brentfagan": 1017, "chenal": [1017, 1018, 1020], "choe": 1017, "drewmjohnston": 1017, "dror": 1017, "atariah": 1017, "esvhd": 1017, "falak": 1017, "gandenberg": 1017, "luqi": 1017, "jf": 1017, "kulbear": 1017, "leandro": [1017, 1021], "hermida": [1017, 1021], "luk": 1017, "manimaran": [1017, 1019, 1020, 1021, 1022], "gaido": 1017, "marinelm": 1017, "masstran": 1017, "roeschk": 1017, "aftab": 1017, "abdela": 1017, "ibraheem": 1017, "mwestt": 1017, "iijima": 1017, "oresti": 1017, "osman": [1017, 1023], "flanagan": [1017, 1018], "soriano": 1017, "peai": 1017, "pim": 1017, "haan": 1017, "raf": 1017, "rajdeep": 1017, "dua": 1017, "ra\u00fal": 1017, "garc\u00eda": [1017, 1018, 1023], "lekhwani": 1017, "varma": 1017, "shiyu": 1017, "duan": [1017, 1019], "smari": [1017, 1018, 1019], "st\u00e9phane": [1017, 1018, 1022, 1023], "surgan12": 1017, "thibsej": 1017, "xhan": 1017, "xinyuliu12": 1017, "zayd": 1017, "hammoudeh": 1017, "16397": [1018, 1019], "16500": 1018, "16505": 1018, "16076": 1018, "shack": [1018, 1019, 1020], "15930": 1018, "inder128": 1018, "15810": 1018, "15898": 1018, "gargsya": 1018, "15933": 1018, "15760": 1018, "15888": 1018, "15936": 1018, "dizietasahi": 1018, "15879": 1018, "bibhash": [1018, 1019], "chandra": [1018, 1019, 1022], "mitra": [1018, 1019, 1023], "15937": 1018, "blyston": [1018, 1019], "15863": 1018, "abstractmethod": 1018, "_check_x": 1018, "basenb": 1018, "15996": 1018, "brigitta": [1018, 1019, 1020, 1024], "sip\u0151cz": [1018, 1019, 1020, 1024], "15751": 1018, "tirth": [1018, 1019], "15868": 1018, "nikla": [1018, 1019], "smedemark": 1018, "marguli": 1018, "15797": 1018, "15947": 1018, "revamp": 1018, "14849": 1018, "_name_estim": 1018, "_gb": 1018, "facto": 1018, "_birch": 1018, "9250": 1018, "12927": 1018, "deprecationwarn": 1018, "interfer": 1018, "hinder": 1018, "15080": 1018, "14464": 1018, "13575": 1018, "10482": 1018, "13726": 1018, "shuzh": 1018, "9288": 1018, "15057": 1018, "korolev": 1018, "15120": 1018, "7943": 1018, "12303": 1018, "14510": 1018, "14890": 1018, "miguel": 1018, "cabrera": 1018, "14544": 1018, "15304": 1018, "jaim": 1018, "ferrando": 1018, "huerta": 1018, "12068": 1018, "12145": 1018, "13609": 1018, "camila": 1018, "williamson": 1018, "15661": 1018, "15160": 1018, "14259": 1018, "14764": 1018, "14740": 1018, "st\u00e9phan": 1018, "tulken": 1018, "14623": 1018, "sarra": 1018, "habchi": 1018, "15257": 1018, "willocx": 1018, "12650": 1018, "13960": 1018, "multiouput": 1018, "14908": 1018, "martina": [1018, 1020], "vila": [1018, 1020], "15382": 1018, "14933": 1018, "15138": 1018, "cusick": 1018, "14406": 1018, "14012": 1018, "faouzi": [1018, 1019], "13769": 1018, "14194": 1018, "least_absolute_devi": [1018, 1020, 1021], "13896": 1018, "13933": 1018, "14710": 1018, "categorical_crossentropi": [1018, 1022], "14869": 1018, "14682": 1018, "hancock": 1018, "5963": 1018, "pablo": [1018, 1021, 1022], "dubou": 1018, "14287": 1018, "15375": 1018, "14305": 1018, "14114": 1018, "15084": 1018, "14294": 1018, "14907": 1018, "14602": 1018, "chawla": 1018, "vectorizermixin": 1018, "14430": 1018, "strip_accents_unicod": 1018, "15100": 1018, "gradi": 1018, "overflowerror": 1018, "15463": 1018, "norvan": 1018, "sahin": 1018, "14520": 1018, "11635": 1018, "alec": 1018, "13704": 1018, "15557": 1018, "14378": 1018, "masashi": [1018, 1020], "shibata": 1018, "ashim": 1018, "bhattarai": 1018, "15010": 1018, "skip_comput": 1018, "13773": 1018, "14356": 1018, "15393": 1018, "venkatachalam": [1018, 1019, 1020, 1021, 1022], "14646": 1018, "14028": 1018, "15429": 1018, "14706": 1018, "14108": 1018, "14170": 1018, "14296": 1018, "13618": 1018, "13995": 1018, "14458": 1018, "14591": 1018, "14864": 1018, "15044": 1018, "15086": 1018, "15038": 1018, "15082": 1018, "13213": 1018, "14647": 1018, "linalgerror": 1018, "13393": 1018, "13707": 1018, "training_data_": 1018, "14357": 1018, "14900": 1018, "socastro": [1018, 1024], "9951": 1018, "14936": 1018, "15083": 1018, "12789": 1018, "15274": 1018, "13938": 1018, "15049": 1018, "toccac": 1018, "ptocca": 1018, "13231": 1018, "dong": 1018, "13467": 1018, "14595": 1018, "14865": 1018, "l\u00e9onard": [1018, 1023], "binet": [1018, 1023], "14732": 1018, "14417": 1018, "15625": 1018, "12258": 1018, "14898": 1018, "matcovici": 1018, "14593": 1018, "reboul": 1018, "14549": 1018, "14704": 1018, "15096": 1018, "14629": 1018, "15488": 1018, "15490": 1018, "12569": 1018, "bicker": 1018, "9597": 1018, "wenbo": [1018, 1020], "zhao": [1018, 1020, 1021, 1022, 1023], "14336": 1018, "dexter": 1018, "9274": 1018, "perri": 1018, "13806": 1018, "ana\u00ebl": 1018, "beaugnon": 1018, "15119": 1018, "15053": 1018, "13290": 1018, "13987": 1018, "_pairwis": [1018, 1020], "13925": 1018, "robson": 1018, "15524": 1018, "xun": [1018, 1020], "12557": 1018, "14286": 1018, "15099": 1018, "baselibsvm": 1018, "_sparse_fit": 1018, "14894": 1018, "danna": 1018, "naser": 1018, "12887": 1018, "15028": 1018, "guan": 1018, "14381": 1018, "11232": 1018, "sievert": 1018, "10815": 1018, "14035": 1018, "14475": 1018, "14538": 1018, "14872": 1018, "upcast": [1018, 1022], "15094": 1018, "choose_check_classifiers_label": 1018, "enforce_estimator_tags_i": 1018, "mock": 1018, "mockdatafram": 1018, "checkingclassifi": 1018, "newton_cg": 1018, "random_choice_csc": 1018, "fast_dict": 1018, "parallel_help": 1018, "14902": 1018, "14971": 1018, "nep": 1018, "14702": 1018, "13013": 1018, "13875": 1018, "14680": 1018, "check_classifier_multioutput": 1018, "check_regressor_multioutput": 1018, "13392": 1018, "rok": 1018, "mihevc": 1018, "check_transformer_data_not_an_arrai": 1018, "mro": [1018, 1019], "14884": 1018, "alphonsu": 1018, "abbi": [1018, 1019], "popa": [1018, 1019], "abdur": 1018, "rahmaan": 1018, "janhang": 1018, "abenbihi": 1018, "abhinav": [1018, 1021], "sagar": 1018, "jana": 1018, "lagat": 1018, "alessandro": [1018, 1020, 1023], "surac": 1018, "siqueira": 1018, "alexgoryainov": 1018, "itk": [1018, 1019, 1020], "alexshack": [1018, 1019, 1020], "akinkunl": 1018, "kaseorg": 1018, "maldonado": [1018, 1021], "angela": [1018, 1019, 1023], "ambroz": [1018, 1019], "anisha": 1018, "keshavan": 1018, "gutierrez": 1018, "anuja": 1018, "archana": [1018, 1020], "alva": 1018, "arnaudstiegl": 1018, "arpanchowdhri": 1018, "ashimb9": 1018, "ayomid": 1018, "bamidel": 1018, "baran": 1018, "buluttekin": 1018, "barrycg": 1018, "bill": [1018, 1019], "mill": 1018, "biswadip": 1018, "mandal": 1018, "blackd0t": 1018, "barklei": 1018, "c56poni": 1018, "camilaagw": 1018, "cartman_nabana": 1018, "catajara": 1018, "cgsavard": [1018, 1019], "vesteghem": 1018, "dakota": 1018, "grusak": 1018, "datenbergwerk": 1018, "dormagen": 1018, "deeplook": 1018, "drgfreeman": 1018, "cashman": 1018, "edvardlindelof": 1018, "ndirangu": [1018, 1022], "eunseop": 1018, "jeong": 1018, "fanni": 1018, "federicopisanu": 1018, "divo": 1018, "flaviomorelli": 1018, "francidona": 1018, "franco": 1018, "luqu": 1018, "freder": 1018, "haas": 1018, "g0g0gadget": 1018, "altai": 1018, "vale": 1018, "rio": [1018, 1020, 1021, 1022], "ganevgv": 1018, "gdex1": 1018, "getgaurav2": 1018, "gideon": 1018, "sonoiya": 1018, "gpapadok": [1018, 1022], "mogavero": 1018, "h4dr1en": 1018, "hadshirt": 1018, "hailei": [1018, 1019], "nguyen": [1018, 1019, 1022, 1023], "hannah": [1018, 1020, 1022], "bruce": [1018, 1019], "macdonald": [1018, 1019], "honglu": 1018, "ingrid": 1018, "spielman": 1018, "a16": [1018, 1019], "jaehong": 1018, "jai": [1018, 1022], "jeromedock": 1018, "jesper": 1018, "dramsch": 1018, "joanna": 1018, "ortiz": 1018, "kanika": 1018, "sabharw": 1018, "katarina": [1018, 1020], "slama": [1018, 1020], "kellycarmodi": 1018, "eth": 1018, "kensuk": 1018, "arai": 1018, "kesshi": [1018, 1019], "kevad": 1018, "lofti": [1018, 1019], "winata": [1018, 1020], "sheng": 1018, "dolmatov": 1018, "kirthi": 1018, "shankar": 1018, "sivamani": 1018, "katyal": 1018, "lakshmi": 1018, "krishnan": 1018, "lalliacqua": [1018, 1021], "lbfin": 1018, "loopym": 1018, "lostcoast": 1018, "huynh": [1018, 1020], "lrjball": [1018, 1019], "roeder": 1018, "maggiecheg": [1018, 1022], "maithreyi": 1018, "venkatesh": 1018, "maltimor": 1018, "maocx": 1018, "douriez": [1018, 1019], "oywa": 1018, "aladago": 1018, "mbillingr": 1018, "clare": 1018, "micah": 1018, "miguelbarao": 1018, "mina": [1018, 1019], "naghshhnejad": [1018, 1019], "motmoti": 1018, "mschaffenroth": 1018, "natasha": 1018, "nezar": 1018, "nidhin": 1018, "pattaniyil": 1018, "nishan": 1018, "mann": 1018, "nitya": 1018, "mandyam": 1018, "novaya": [1018, 1021], "nxorabl": 1018, "oleg": 1018, "stikhin": 1018, "omar": [1018, 1023, 1024], "saleem": 1018, "panpiort8": [1018, 1020], "paula": [1018, 1019], "poorna": [1018, 1020], "pspachtholz": [1018, 1019, 1020], "qdeffens": [1018, 1021], "garg": [1018, 1019], "rapha\u00ebl": 1018, "bournhonesqu": 1018, "reza": 1018, "gharibi": 1018, "payn": 1018, "rlm": 1018, "juergen": [1018, 1023], "sanjabi": 1018, "ruchitagard": 1018, "ruth": 1018, "waithera": 1018, "sackei": 1018, "samesh": [1018, 1019], "lakhotia": [1018, 1019], "sewook": 1018, "dare": 1018, "shreya": 1018, "simoncw": 1018, "smujjiga": 1018, "s\u00f6nke": 1018, "behrend": 1018, "soumirai": 1018, "steinfurt": [1018, 1020], "cowlei": 1018, "th0rwa": [1018, 1019], "theoptip": [1018, 1019], "theotheo": 1018, "thierno": 1018, "ibrahima": 1018, "diop": 1018, "schmitt": [1018, 1019], "tilen": 1018, "kusterl": 1018, "timsaur": 1018, "tola": 1018, "topisan": 1018, "ttang131": 1018, "veerlosar": 1018, "luzgin": 1018, "jeanselm": 1018, "lostanlen": 1018, "vnherdeiro": 1018, "wendi": 1018, "willdarnel": 1018, "wolframalpha": 1018, "xcjason": 1018, "martian": 1018, "xsat": 1018, "yinglr": 1018, "yokasr": 1018, "maxin": [1018, 1019], "yulia": 1018, "zamrii": 1018, "feng": [1018, 1020, 1021, 1022], "17959": 1019, "17848": 1019, "17742": 1019, "17995": 1019, "thomaz": 1019, "santana": [1019, 1022], "dsouza": [1019, 1020, 1021, 1022], "17433": 1019, "17985": 1019, "multinomialdevi": 1019, "logloss": [1019, 1023], "17694": 1019, "rempfler": 1019, "tsutomu": 1019, "kusanagi": [1019, 1021], "17357": 1019, "18016": 1019, "x_copi": 1019, "17914": 1019, "15730": 1019, "forrest": [1019, 1020], "17309": 1019, "swier": [1019, 1020], "heer": 1019, "17812": 1019, "bruno": [1019, 1020, 1021], "idl": 1019, "17210": 1019, "17235": 1019, "17204": 1019, "changed_onli": 1019, "17205": 1019, "15005": [1019, 1021], "slep009": [1019, 1021, 1022], "estimator_samples_": 1019, "16149": 1019, "11950": 1019, "11514": 1019, "16075": 1019, "16484": 1019, "agglomerativecluclust": 1019, "16257": 1019, "simona": [1019, 1020, 1021], "maggio": [1019, 1020, 1021], "16801": 1019, "rcwoolston": 1019, "16431": 1019, "14048": 1019, "15963": 1019, "16084": 1019, "15950": 1019, "stephani": 1019, "15980": 1019, "wconnel": 1019, "15709": 1019, "15707": 1019, "maciej": 1019, "mikulski": 1019, "16006": 1019, "rushabh": 1019, "vasani": 1019, "streamhandl": 1019, "logger": 1019, "handler": 1019, "16451": 1019, "16280": 1019, "16837": 1019, "wornbb": 1019, "15669": 1019, "chaitanya": 1019, "16224": 1019, "schwetlick": [1019, 1020], "gelavizh": 1019, "ahmadi": 1019, "marija": [1019, 1020], "vlajic": [1019, 1020], "wheeler": [1019, 1020], "16841": 1019, "16655": 1019, "16718": 1019, "miotto": 1019, "16981": 1019, "g\u00f3rski": [1019, 1020], "14696": 1019, "14516": 1019, "15582": 1019, "16069": 1019, "bail": 1019, "16183": 1019, "16182": 1019, "santhosh": 1019, "16437": 1019, "hwan": 1019, "cho": 1019, "16539": 1019, "deros": 1019, "16692": 1019, "16663": 1019, "15834": 1019, "santiago": 1019, "mola": 1019, "16103": 1019, "divyaprabha": 1019, "selectormixin": 1019, "16132": 1019, "trimeta": 1019, "15503": 1019, "15782": 1019, "plgreenliru": 1019, "16403": 1019, "narendra": 1019, "mukherje": 1019, "16508": 1019, "15864": 1019, "14300": 1019, "15436": 1019, "15652": 1019, "15179": 1019, "angelaambroz": 1019, "15773": 1019, "15655": 1019, "14848": 1019, "absgrad": 1019, "_newton_cg": 1019, "16266": 1019, "standard_coef_": 1019, "standard_intercept_": 1019, "average_coef_": 1019, "average_intercept_": 1019, "16261": 1019, "brandt": 1019, "16849": 1019, "14264": 1019, "17021": 1019, "16323": 1019, "16362": 1019, "16442": 1019, "parson": [1019, 1021], "rick": 1019, "mackenbach": 1019, "16993": 1019, "emit": 1019, "15622": 1019, "mors": 1019, "15918": 1019, "kubin": 1019, "fit_grid_point": 1019, "16401": 1019, "pratama": 1019, "sutiono": 1019, "15953": 1019, "15959": 1019, "16111": 1019, "16090": 1019, "jayaratn": [1019, 1020, 1023], "14075": 1019, "meyer89": 1019, "16117": 1019, "15785": 1019, "16245": 1019, "16585": 1019, "15762": 1019, "16466": 1019, "16632": 1019, "maura": 1019, "pintor": 1019, "battista": 1019, "biggio": 1019, "15946": 1019, "ngshya": 1019, "32767": 1019, "mersenn": 1019, "twister": 1019, "31bit": 1019, "63bit": 1019, "crude": 1019, "postprocessor": 1019, "lemir": 1019, "13511": 1019, "kennel": 1019, "11296": 1019, "15558": 1019, "15806": 1019, "16331": 1019, "batiss": 1019, "15926": 1019, "16021": 1019, "sparsearrai": 1019, "16728": 1019, "uint": 1019, "17032": 1019, "_safe_tag": 1019, "16950": 1019, "15380": 1019, "acitiv": 1019, "16726": 1019, "16112": 1019, "16622": 1019, "17061": 1019, "aleksandra": 1019, "kocot": 1019, "alonso": [1019, 1021], "allend": [1019, 1021], "ana": [1019, 1021], "casado": 1019, "ankit810": 1019, "arunav": 1019, "konwar": 1019, "maingret": 1019, "beier": 1019, "berni": 1019, "bharathi": 1019, "brigi": [1019, 1020], "castachick": 1019, "castor": 1019, "corri": 1019, "bartelheim": 1019, "dani\u00ebl": 1019, "gelder": 1019, "daphn": 1019, "breuer": 1019, "cort": [1019, 1020, 1023], "dbauer9": 1019, "borovikova": 1019, "eln": 1019, "emili": [1019, 1020], "leung": 1019, "evgeni": 1019, "chasnovski": 1019, "fabiana": 1019, "facundo": [1019, 1022], "ferr\u00edn": 1019, "franziska": 1019, "boenisch": 1019, "bolmier": [1019, 1020, 1024], "gholdman1": 1019, "gonthier": 1019, "hao": [1019, 1020, 1022, 1023], "chun": [1019, 1020, 1022, 1023, 1024], "haoyin": [1019, 1021, 1022], "h\u00e9lion": 1019, "bourboux": 1019, "himanshu": [1019, 1022], "hirofumi": [1019, 1020], "suzuki": [1019, 1020], "huangk10": 1019, "kemenad": 1019, "hye": 1019, "sung": 1019, "indecisiveus": [1019, 1020], "inderjeet": 1019, "jjmistri": 1019, "haitz": [1019, 1021, 1022], "legarreta": [1019, 1021, 1022], "gorro\u00f1o": [1019, 1021, 1022], "judithabk6": 1019, "jumon": 1019, "kathryn": 1019, "krishnachaitanya9": 1019, "gia": 1019, "thuan": 1019, "lkubin": 1019, "lopusz": 1019, "lucgiffon": 1019, "lucyleeow": 1019, "kemk": 1019, "magda": 1019, "zielinska": 1019, "mandi": [1019, 1022], "gu": [1019, 1020, 1022], "manish": 1019, "aradwad": 1019, "maren": [1019, 1020, 1021, 1022, 1023], "westermann": [1019, 1020, 1021, 1022, 1023], "mariana": 1019, "meirel": 1019, "mariel": 1019, "mc4229": 1019, "shoemak": 1019, "micha\u0142": 1019, "s\u0142apek": 1019, "mojca": 1019, "bertoncelj": 1019, "narendramukherje": 1019, "nicolasservel": 1019, "nkish": 1019, "noa": 1019, "tamir": [1019, 1022], "olicairn": 1019, "ur": 1019, "lenz": [1019, 1023], "delanou": 1019, "qizhi": 1019, "quang": 1019, "rachelcjordan": 1019, "raduspaimoc": 1019, "riccardo": 1019, "folloni": 1019, "ritchi": 1019, "rori": 1019, "hartong": 1019, "redden": 1019, "sambhav": 1019, "kothari": 1019, "santhoshbala18": 1019, "sarat": 1019, "addep": 1019, "scibol": 1019, "kie\u00dfl": 1019, "sergiodsr": 1019, "shiki": 1019, "shubh": 1019, "chatterje": 1019, "simonamaggio": [1019, 1020, 1021], "snowhit": 1019, "stareh": 1019, "marsh": 1019, "sunmi": 1019, "yoon": 1019, "talgatomarov": 1019, "tamirlan1": 1019, "nonner": 1019, "vink": [1019, 1021], "tiphain": 1019, "viard": 1019, "titu": 1019, "vachan": 1019, "vandana": 1019, "iyer": 1019, "waelbenamara": 1019, "wderos": 1019, "wenliwyan": 1019, "windber": 1019, "19579": 1020, "19646": 1020, "stopiter": 1020, "19922": 1020, "19732": 1020, "ishikawa": [1020, 1021], "19407": 1020, "ushtanit": [1020, 1021], "19982": 1020, "19939": 1020, "halvic": 1020, "19703": 1020, "sobkevich": 1020, "villaz\u00f3n": 1020, "terraza": 1020, "fonari": [1020, 1021], "19182": 1020, "yosuk": [1020, 1021], "kobayashi": [1020, 1021], "19721": 1020, "19659": 1020, "19211": 1020, "19847": 1020, "xiaoyu": 1020, "chai": [1020, 1023], "19308": 1020, "19234": 1020, "19727": 1020, "delong": [1020, 1021], "transfrom": 1020, "19888": 1020, "19924": 1020, "19271": 1020, "zhaowei": 1020, "19580": 1020, "brice": [1020, 1021], "adamson": 1020, "wil": 1020, "yegelwel": 1020, "css": 1020, "19417": 1020, "19179": 1020, "19126": 1020, "17448": 1020, "17107": 1020, "17546": 1020, "17856": 1020, "17984": 1020, "riedmann": 1020, "francesco": [1020, 1023], "casalegno": 1020, "18052": 1020, "sean": [1020, 1021, 1023], "stallei": 1020, "17937": 1020, "counts_": 1020, "init_size_": 1020, "17864": 1020, "17616": 1020, "18167": 1020, "18256": 1020, "jayratn": 1020, "16392": 1020, "17095": 1020, "18746": 1020, "18525": 1020, "norm_y_weight": 1020, "x_mean_": 1020, "y_mean_": 1020, "x_std_": 1020, "y_std_": 1020, "18768": 1020, "18302": 1020, "md5": 1020, "checksum": 1020, "14800": 1020, "17396": 1020, "jiaxiang": 1020, "17491": 1020, "18280": 1020, "17499": 1020, "17610": 1020, "11064": 1020, "17414": 1020, "18149": 1020, "17679": 1020, "18528": 1020, "villanova": [1020, 1021], "14446": 1020, "18394": 1020, "16985": 1020, "garbag": 1020, "18334": 1020, "multicor": [1020, 1021], "18341": 1020, "egor": 1020, "smirnov": 1020, "18410": 1020, "17702": 1020, "18326": 1020, "changedbehaviorwarn": 1020, "nonblasdotwarn": 1020, "17804": 1020, "17367": 1020, "15427": 1020, "gangesh": 1020, "gudmalwar": 1020, "erin": 1020, "6545": 1020, "17159": 1020, "15361": 1020, "17878": 1020, "17090": 1020, "_check_bounds_param": 1020, "12638": 1020, "lannuzel": 1020, "17526": 1020, "ayako": 1020, "yagi": 1020, "17612": 1020, "srimukh": 1020, "sripada": 1020, "16493": 1020, "darshan": 1020, "15636": 1020, "18987": 1020, "16619": 1020, "16906": 1020, "roei": 1020, "kahni": 1020, "18293": 1020, "16289": 1020, "kishimoto": 1020, "18639": 1020, "13003": 1020, "s\u00e1nchez": 1020, "18545": 1020, "laurenz": 1020, "reitsam": 1020, "17578": 1020, "knox": 1020, "6624": 1020, "marijn": 1020, "vliet": 1020, "18121": 1020, "18607": 1020, "fhaselbeck": 1020, "18622": 1020, "haesun": [1020, 1023], "10493": 1020, "17997": 1020, "maisonneuv": 1020, "17662": 1020, "18278": 1020, "17412": 1020, "16625": 1020, "10591": 1020, "karnowski": 1020, "plot_det_curv": [1020, 1021], "18176": 1020, "10708": 1020, "15007": 1020, "hathidara": 1020, "10711": 1020, "17192": 1020, "avi": [1020, 1021], "17225": 1020, "17569": 1020, "17651": 1020, "mato": 1020, "17777": 1020, "shubhanshu": 1020, "mishra": [1020, 1021], "17826": 1020, "decal": 1020, "willard": 1020, "17935": 1020, "cari": 1020, "goltermann": 1020, "18114": 1020, "18405": 1020, "yakov": 1020, "pchelintsev": 1020, "13900": 1020, "17478": 1020, "teon": 1020, "13204": 1020, "kosic": 1020, "18527": 1020, "18343": 1020, "devi": 1020, "sandeep": 1020, "18595": 1020, "18222": 1020, "18266": 1020, "subrat": 1020, "sahu": 1020, "15126": 1020, "17987": 1020, "17233": 1020, "zolisa": 1020, "bleki": 1020, "histgradientboost": 1020, "18124": 1020, "brocchini": 1020, "armstrong": 1020, "17427": 1020, "17038": 1020, "neighborsbas": [1020, 1023], "17148": 1020, "18691": 1020, "18370": 1020, "18612": 1020, "17603": 1020, "17604": 1020, "17606": 1020, "17608": 1020, "17609": 1020, "17633": 1020, "17661": 1020, "17932": 1020, "16352": 1020, "17759": 1020, "18269": 1020, "17876": 1020, "18429": 1020, "biernat": 1020, "17317": 1020, "17406": 1020, "wick": 1020, "18406": 1020, "17833": 1020, "yashika": 1020, "18510": 1020, "18447": 1020, "16066": 1020, "18682": 1020, "16935": 1020, "17193": 1020, "16335": 1020, "14982": 1020, "11682": 1020, "patric": [1020, 1021], "15763": 1020, "16530": 1020, "shuhua": 1020, "17386": 1020, "17187": 1020, "x_idx_sort": 1020, "17614": 1020, "check_methods_sample_order_invari": [1020, 1022], "17598": 1020, "ngo": 1020, "17992": 1020, "endian": 1020, "17644": 1020, "18508": 1020, "abo7atm": 1020, "spannbauer": 1020, "deodhar": 1020, "alexandracraciun": 1020, "amy12xx": 1020, "tiwari": 1020, "choraria": 1020, "subramaniyan": 1020, "kushwaha": 1020, "atsushi": [1020, 1021], "nukariya": [1020, 1021], "aura": 1020, "autoviz": 1020, "auto_viml": 1020, "avinash": 1020, "anak": 1020, "barankaraku": 1020, "barberogaston": 1020, "beatrizsmg": 1020, "mainy": 1020, "bossan": [1020, 1022, 1023], "pedigo": [1020, 1021], "bhavika": 1020, "devnani": 1020, "biprateep": 1020, "dei": 1020, "bmaisonn": 1020, "byron": 1020, "ceethinwa": [1020, 1021], "chaitanyamog": 1020, "clmbst": 1020, "coelhudo": 1020, "crispinlogan": [1020, 1023, 1024], "cristina": 1020, "mula": 1020, "darioka": [1020, 1022, 1023], "declan": 1020, "neill": 1020, "deeksha": 1020, "madan": 1020, "fiegel": [1020, 1021, 1023], "khoo": 1020, "eschibli": 1020, "fran": [1020, 1021, 1022], "larsson": [1020, 1021, 1022], "sheni": 1020, "genvalen": [1020, 1021, 1022, 1023], "kiragu": 1020, "gesa": 1020, "stupperich": 1020, "ghislain": 1020, "vaillant": 1020, "gim": 1020, "seng": 1020, "chevali": 1020, "bohl": [1020, 1022], "schole": 1020, "hitesh": 1020, "somani": 1020, "hoda1394": 1020, "moin": 1020, "hugorichard": 1020, "isuru": 1020, "wiryadi": 1020, "j0rd1smit": 1020, "jaehyun": 1020, "ahn": 1020, "tae": 1020, "hoctor": 1020, "vese": 1020, "jeevan": 1020, "jeroenpeterbo": 1020, "jhay": 1020, "jigna": 1020, "panchal": 1020, "jim0421": 1020, "joaquin": 1020, "gorb": 1020, "moya": 1020, "kartik": 1020, "chugh": 1020, "kaylani2": 1020, "kendrick": 1020, "cetina": 1020, "kenni": 1020, "isakov": 1020, "koki": 1020, "nishihara": 1020, "krum": [1020, 1022], "arnaudov": [1020, 1022], "oldja": 1020, "guitton": 1020, "mariam": 1020, "l\u00f6ning": 1020, "scheubrein": 1020, "megasari": 1020, "mathschi": 1020, "giudic": 1020, "milan": 1020, "straka": 1020, "muoki": 1020, "caleb": 1020, "haiat": 1020, "nadia": 1020, "tahiri": 1020, "ph": 1020, "hamada": 1020, "neil": 1020, "botelho": 1020, "nil": 1020, "noelano": 1020, "oj_lappi": 1020, "oleh": [1020, 1022], "kozynet": [1020, 1022], "pankaj": 1020, "jindal": 1020, "pardeep": 1020, "parthiv": 1020, "chigurupati": 1020, "pgithub": 1020, "probinette4": 1020, "pwalchessen": 1020, "rachel": [1020, 1023], "fischoff": 1020, "toshniw": 1020, "rafei": 1020, "iqbal": 1020, "rahul": 1020, "jakhar": 1020, "rachum": 1020, "ramyanp": [1020, 1021], "rauwuckl": 1020, "ravi": [1020, 1023], "kiran": 1020, "boggavarapu": 1020, "rishi": 1020, "advani": 1020, "rithvik": 1020, "romijnd": 1020, "tavenard": 1020, "rubi": 1020, "werman": 1020, "ryotaro": 1020, "tsukada": 1020, "sadak": 1020, "khandelw": 1020, "ezebunandu": 1020, "kimbinyi": 1020, "shail": 1020, "keller": 1020, "shao": [1020, 1021, 1022], "shooter23": [1020, 1021], "soledad": 1020, "galli": 1020, "subrat93": 1020, "sunitha": 1020, "selvan": 1020, "kusanagi2": 1020, "terenc": [1020, 1021], "honl": [1020, 1021], "thij": [1020, 1023, 1024], "thomas9292": 1020, "thorben": 1020, "tijanajovanov": 1020, "timo": 1020, "tnwei": 1020, "ufmay": 1020, "umberto": 1020, "lupo": 1020, "vika": [1020, 1022], "viniciu": [1020, 1021], "fuck": [1020, 1021], "violeta": 1020, "watchtheblur": 1020, "willpeppo": 1020, "xethan": 1020, "qianm": 1020, "yue": 1020, "yutaro": 1020, "ikeda": 1020, "zacchari": 1020, "ramzi": 1020, "zoj613": 1020, "21271": 1021, "21833": 1021, "siavash": 1021, "rezazadeh": 1021, "19210": 1021, "21295": 1021, "22050": 1021, "21991": 1021, "19869": 1021, "21481": [1021, 1022], "andr\u00e9": [1021, 1022], "babino": [1021, 1022], "disconnect": 1021, "21915": 1021, "21694": 1021, "minknowski": 1021, "21741": 1021, "21871": 1021, "21845": 1021, "21517": 1021, "21917": 1021, "21552": 1021, "escap": [1021, 1023], "21493": 1021, "21199": 1021, "20638": 1021, "bohn\u00e9": 1021, "21179": 1021, "21195": 1021, "21130": 1021, "20761": 1021, "21251": 1021, "min_idf": 1021, "max_idf": 1021, "20752": 1021, "alek": [1021, 1022], "lefebvr": [1021, 1022], "21340": 1021, "21093": 1021, "21351": 1021, "cve": 1021, "28975": 1021, "21336": 1021, "_check_sample_weight": 1021, "only_non_neg": 1021, "20880": 1021, "andr\u00e1": [1021, 1022, 1023], "if_delegate_has_method": [1021, 1022], "21145": 1021, "zahlii": 1021, "21389": 1021, "20002": 1021, "19310": 1021, "least_squar": 1021, "19733": 1021, "lad": 1021, "absolute_loss": 1021, "20165": 1021, "18444": 1021, "18010": 1021, "threadsaf": 1021, "18736": 1021, "17443": 1021, "19641": 1021, "20087": 1021, "fauchereau": 1021, "19002": 1021, "19052": 1021, "yusuk": 1021, "nagasaka": 1021, "17622": 1021, "19024": 1021, "franki": 1021, "robertson": 1021, "20117": 1021, "natchiappan": [1021, 1022], "19883": 1021, "20597": 1021, "20899": 1021, "20200": 1021, "fit_": 1021, "partial_fit_": 1021, "19297": 1021, "20560": 1021, "18393": 1021, "bittarello": 1021, "19263": 1021, "19244": 1021, "18459": 1021, "nd": 1021, "18898": 1021, "ora": 1021, "phongpanagnam": 1021, "21080": 1021, "ledoit_wolf_shrinkag": 1021, "20416": 1021, "defoi": 1021, "20583": 1021, "19365": 1021, "ateif": 1021, "sara": 1021, "19669": 1021, "importlib": 1021, "pyoxid": 1021, "20297": 1021, "20209": 1021, "19011": 1021, "20729": 1021, "12069": 1021, "19046": 1021, "surya": [1021, 1022], "18433": 1021, "19198": 1021, "19159": 1021, "beno\u00eet": 1021, "mal\u00e9zieux": 1021, "19908": 1021, "20512": 1021, "20960": 1021, "cgroup": [1021, 1022], "quota": [1021, 1022], "20477": 1021, "19799": 1021, "19564": 1021, "19836": 1021, "19162": 1021, "10096": 1021, "fenil": 1021, "suchak": 1021, "20159": 1021, "murata": [1021, 1022], "20534": 1021, "19296": 1021, "19035": 1021, "19520": 1021, "18964": 1021, "19401": 1021, "relova": 1021, "17169": 1021, "dmytro": 1021, "lituiev": 1021, "20380": 1021, "pulido": 1021, "felip": [1021, 1022, 1023, 1024], "bidu": [1021, 1022], "rutter": 1021, "20515": 1021, "carsten": 1021, "allefeld": 1021, "19568": 1021, "shyam": 1021, "20207": 1021, "tomohiro": 1021, "endo": 1021, "20161": 1021, "shuhei": 1021, "kayawari": 1021, "arka204": [1021, 1023], "20431": 1021, "pfaffel": 1021, "19428": 1021, "hamoumi": 1021, "19411": 1021, "20959": 1021, "20554": 1021, "xiangyin": 1021, "kong": 1021, "9978": 1021, "10027": 1021, "16449": 1021, "20231": 1021, "naka": 1021, "19571": 1021, "20155": 1021, "oura": [1021, 1022, 1023], "19004": 1021, "midvidi": 1021, "19055": 1021, "19172": 1021, "19426": 1021, "19499": 1021, "strubel": 1021, "19616": 1021, "19391": 1021, "19390": 1021, "linearmodel": 1021, "17743": 1021, "17772": 1021, "17746": 1021, "17785": 1021, "17750": 1021, "17769": 1021, "20683": 1021, "19491": 1021, "19472": 1021, "shortest_path": 1021, "20531": 1021, "19415": 1021, "17036": 1021, "20326": 1021, "uttam": 1021, "9843": 1021, "19643": 1021, "attard": 1021, "19784": 1021, "18328": 1021, "20312": 1021, "divyanshu": 1021, "deoli": 1021, "18543": 1021, "20552": 1021, "19278": 1021, "20030": 1021, "tingshan": 1021, "18649": 1021, "rodion": 1021, "martynov": 1021, "20619": 1021, "baseshufflesplit": 1021, "20056": 1021, "pabloduque0": 1021, "prematur": 1021, "20904": 1021, "tomasz": 1021, "jakubek": [1021, 1022], "18925": 1021, "poznik": [1021, 1022, 1023], "18842": 1021, "19473": 1021, "jiefangxuanyan": 1021, "20072": 1021, "20842": 1021, "mart\u00edn": [1021, 1022], "19631": 1021, "19790": 1021, "flynn": [1021, 1023], "18368": 1021, "19483": 1021, "20526": 1021, "19069": 1021, "19041": 1021, "20250": 1021, "20652": 1021, "19934": 1021, "gleb": [1021, 1023, 1024], "levitskii": 1021, "19734": 1021, "robinson": 1021, "19752": 1021, "zhehao": [1021, 1022, 1023, 1024], "19527": 1021, "19788": 1021, "19356": 1021, "makoeppel": 1021, "19879": 1021, "19906": 1021, "20727": 1021, "20961": 1021, "n_input_features_": 1021, "20240": 1021, "20843": 1021, "18959": 1021, "wstate": 1021, "20023": 1021, "19336": 1021, "20272": 1021, "19459": 1021, "bezuidenhout": 1021, "clifford": 1021, "akai": 1021, "nettei": 1021, "19948": 1021, "20657": 1021, "19766": 1021, "propreti": 1021, "20385": 1021, "_weighted_percentil": 1021, "huberlossfunct": 1021, "20528": 1021, "_safe_index": 1021, "20673": 1021, "is_scalar_nan": 1021, "assert_warn": 1021, "assert_warns_messag": 1021, "20521": 1021, "abdulelah": 1021, "mesfer": 1021, "adrian": [1021, 1022, 1023], "garcia": 1021, "badaracco": 1021, "sad\u0142ocha": 1021, "rubial": 1021, "alessia": 1021, "marcolini": 1021, "alihan": 1021, "zihna": 1021, "alin": 1021, "amol": 1021, "deshmukh": 1021, "pessoa": 1021, "anavelyz": 1021, "ashish": 1021, "ashvith": 1021, "shetti": 1021, "baam": [1021, 1022], "baptbillard": 1021, "bmalezieux": 1021, "bumblebe": 1021, "caherrera": 1021, "meli": [1021, 1022, 1023], "chrissobel": 1021, "yeh": 1021, "chuliang": 1021, "cliffordemmanuel": 1021, "conner": 1021, "shen": 1021, "dimitri": [1021, 1022, 1023], "papadopoulo": [1021, 1022, 1023], "orfano": [1021, 1022, 1023], "dmallia17": 1021, "ds_ana": 1021, "jardim": 1021, "edwinwenink": 1021, "eleni": 1021, "markou": 1021, "ericellwang": [1021, 1022], "ezri": 1021, "mudd": 1021, "fato": 1021, "morina": 1021, "hafner": 1021, "flyingdutchman23": 1021, "uwha": [1021, 1022], "bereng": 1021, "frederick": 1021, "frellwan": 1021, "vicent": [1021, 1022, 1023], "geroldcsend": 1021, "glen": 1021, "gl\u00f2ria": [1021, 1023], "mu\u00f1oz": [1021, 1023], "gregorystrubel": 1021, "groceryheist": 1021, "guiweb": 1021, "haidar": [1021, 1022], "almubarak": [1021, 1022], "moritz": [1021, 1023], "g\u00fcnther": 1021, "mirza": 1021, "harutaka": 1021, "kawamura": 1021, "hassan": 1021, "alsawadi": 1021, "geovan": [1021, 1022], "gome": [1021, 1022], "lima": [1021, 1022], "ilic": 1021, "ikko": 1021, "ashimin": 1021, "isaack": 1021, "mungui": 1021, "ishaan": 1021, "bhat": [1021, 1023], "ishan": [1021, 1022], "iwhalv": 1021, "preiss": 1021, "budarz": 1021, "jannik": 1021, "jennif": 1021, "jianzhu": 1021, "guo": 1021, "jnboehm": 1021, "johanwork": 1021, "paton": 1021, "n\u00e1pole": 1021, "julio": 1021, "julyrashchenko": 1021, "jvm": 1021, "kadatatlu": 1021, "kishor": 1021, "karen": 1021, "palacio": 1021, "kmatt10": 1021, "kobaski": 1021, "kot271828": 1021, "kunj": 1021, "kurumeyuta": 1021, "kxytim": 1021, "lacrosse91": 1021, "laveen": 1021, "bagai": 1021, "leonardo": 1021, "rocco": [1021, 1022, 1023], "uieda": 1021, "leopoldo": 1021, "corona": 1021, "lsturtew": 1021, "lucca": 1021, "quadro": 1021, "ly648499246": 1021, "mabu": 1021, "manaileng": 1021, "mariangela": 1021, "marielaraj": 1021, "hirzel": 1021, "mateo": 1021, "nore\u00f1a": 1021, "mathi": 1021, "batoul": 1021, "calcot": 1021, "prieur": 1021, "\u00f6zer": 1021, "miao": 1021, "cai": 1021, "karbownik": 1021, "michalkrawczyk": [1021, 1022], "mitzi": [1021, 1022], "mlondschien": 1021, "haseeb": [1021, 1022], "khoual": 1021, "jarir": 1021, "kanji": 1021, "nadim": 1021, "kawwa": 1021, "nanshan": 1021, "naozin555": 1021, "fultz": 1021, "nic": 1021, "annau": 1021, "stefani": [1021, 1023], "nigel": 1021, "bosch": 1021, "nodar": 1021, "okroshiashvili": 1021, "ogbonna": 1021, "chibuik": 1021, "ogordon100": 1021, "phongpanangam": 1021, "duqu": 1021, "ibieta": 1021, "jimenez": [1021, 1022], "lacouth": 1021, "olszewski": 1021, "dye": 1021, "pierreattard": [1021, 1022], "yve": 1021, "borgn": 1021, "pranayanchuri": 1021, "princ": 1021, "canuma": 1021, "putschblo": 1021, "ranjanikrishnan": 1021, "rene": 1021, "corneil": 1021, "ricardojnf": 1021, "richardscottoz": 1021, "sandi": 1021, "khosasi": 1021, "benhur": 1021, "flore": 1021, "shinehid": 1021, "shinnar": 1021, "tootoonian": 1021, "solosil": 1021, "kolawol": 1021, "stagg": 1021, "swpeas": 1021, "tfifi": 1021, "caswel": 1021, "timotheemathieu": 1021, "wolodzko": 1021, "tliu68": 1021, "uhmann": 1021, "tom1092": 1021, "tom\u00e1": [1021, 1022], "moreyra": 1021, "tommaso": 1021, "noto": 1021, "tsuga": 1021, "vang": 1021, "gkiasta": 1021, "vil\u00e9m": 1021, "zouhar": 1021, "vlasovet": 1021, "waijean": 1021, "whidou": 1021, "xiaoyuchai": 1021, "yasmeen": 1021, "alsaedi": 1021, "yoch": 1021, "yusukenagasaka": 1021, "yzhenman": 1021, "zeyusun": 1021, "zhaoweiwang": 1021, "msvcp140": 1022, "dll": 1022, "24631": 1022, "24446": 1022, "10805": 1022, "mathia": 1022, "23471": 1022, "24015": 1022, "23990": 1022, "23833": 1022, "24017": 1022, "sorski": [1022, 1023], "23395": 1022, "23636": 1022, "22063": 1022, "22059": 1022, "kurz": [1022, 1023], "23608": 1022, "23548": 1022, "24087": 1022, "23273": 1022, "23194": 1022, "23198": 1022, "lise": 1022, "kleiber": 1022, "23358": 1022, "23264": 1022, "feature_names_in": 1022, "23299": 1022, "23214": 1022, "collot": [1022, 1023], "baak": 1022, "23370": 1022, "23410": 1022, "compute_sample_weight": 1022, "23115": 1022, "22868": 1022, "multiindex": 1022, "22410": 1022, "23271": 1022, "21987": 1022, "22064": 1022, "22065": 1022, "22288": 1022, "22320": 1022, "21219": 1022, "21542": 1022, "23098": 1022, "22318": 1022, "23036": 1022, "binary_crossentropi": 1022, "23040": 1022, "23046": 1022, "22856": 1022, "21032": 1022, "18170": 1022, "21038": 1022, "14975": 1022, "22526": 1022, "23095": 1022, "silk": 1022, "20031": 1022, "krawczyk": 1022, "21148": 1022, "22255": 1022, "21881": 1022, "vassard": 1022, "22217": 1022, "21735": 1022, "22154": 1022, "22537": 1022, "iofal": 1022, "arisa": [1022, 1023], "22775": 1022, "22913": 1022, "randomgeek78": 1022, "22493": 1022, "19680": 1022, "thibaut": 1022, "22119": 1022, "22016": 1022, "22015": 1022, "19747": 1022, "attalla": 1022, "22498": 1022, "21482": 1022, "pujalt": 1022, "22412": 1022, "16605": 1022, "21901": 1022, "rileran": 1022, "23113": 1022, "ilion": 1022, "beyst": 1022, "21425": 1022, "stefanini": 1022, "16948": 1022, "patricio": 1022, "cerda": 1022, "22002": 1022, "21109": 1022, "inner_stats_": 1022, "iter_offset_": 1022, "18975": 1022, "22111": 1022, "22181": 1022, "21334": 1022, "21705": 1022, "stanlei": [1022, 1023], "21432": 1022, "22806": 1022, "jihan": 1022, "benni": 1022, "21713": 1022, "haya": 1022, "21567": 1022, "maggi": 1022, "chege": 1022, "22300": 1022, "15948": 1022, "sysuresh": 1022, "22553": 1022, "19490": 1022, "ferrin": 1022, "22120": 1022, "15984": 1022, "okon": 1022, "22696": 1022, "22486": 1022, "21800": 1022, "20567": 1022, "22159": 1022, "20811": 1022, "21814": 1022, "16748": 1022, "siqi": 1022, "22215": 1022, "23047": 1022, "22695": 1022, "22697": 1022, "21762": 1022, "22106": 1022, "gijsber": 1022, "21632": 1022, "genesi": [1022, 1024], "valencia": [1022, 1024], "22566": 1022, "22908": 1022, "23097": 1022, "23079": 1022, "20803": 1022, "23023": 1022, "21573": 1022, "21832": 1022, "20145": 1022, "22356": 1022, "18482": 1022, "gameiro": 1022, "kharsa": 1022, "22370": 1022, "17819": 1022, "22235": 1022, "21837": 1022, "wagner": 1022, "22199": 1022, "aidar": 1022, "shakerimoff": 1022, "tenavi": 1022, "nakamura": 1022, "22223": 1022, "marcom": 1022, "21617": 1022, "ritter": [1022, 1023], "21114": 1022, "21078": 1022, "21448": 1022, "16061": 1022, "19438": 1022, "18310": 1022, "elfner": 1022, "22249": 1022, "22137": 1022, "22694": 1022, "22808": 1022, "22950": 1022, "21086": 1022, "22206": 1022, "21808": 1022, "22548": 1022, "22062": 1022, "trujillo": [1022, 1023], "22148": 1022, "22240": 1022, "9087": 1022, "22525": 1022, "19689": 1022, "21606": 1022, "21341": 1022, "preservs": 1022, "21767": 1022, "21724": 1022, "yar": 1022, "khine": 1022, "phyo": 1022, "21998": 1022, "22891": 1022, "22899": 1022, "23256": 1022, "19794": 1022, "21534": 1022, "22254": 1022, "21805": 1022, "jeann": 1022, "dionisi": 1022, "22685": 1022, "n_neighbour": 1022, "18832": 1022, "23033": 1022, "21565": 1022, "17266": 1022, "interpet": 1022, "22118": 1022, "ohad": 1022, "22284": 1022, "19158": 1022, "nicki": 1022, "skaft": 1022, "20753": 1022, "22108": 1022, "22635": 1022, "19085": 1022, "22866": 1022, "21576": 1022, "emil": 1022, "dugnat": 1022, "21873": 1022, "21177": 1022, "20408": 1022, "ceballo": 1022, "22058": 1022, "23034": 1022, "22203": 1022, "21026": 1022, "21880": 1022, "mrinal": 1022, "tyagi": 1022, "22982": 1022, "22508": 1022, "comb": 1022, "22604": 1022, "22212": 1022, "21430": 1022, "desislava": 1022, "vasileva": 1022, "22687": 1022, "22150": 1022, "22248": 1022, "20860": 1022, "shubhraneel": 1022, "21888": 1022, "21954": 1022, "22953": 1022, "16018": 1022, "21445": 1022, "21988": 1022, "get_output_feature_nam": 1022, "21569": 1022, "21079": 1022, "20653": 1022, "21434": 1022, "19916": 1022, "22735": 1022, "compute_inverse_transform": 1022, "21701": 1022, "22114": 1022, "21330": 1022, "21408": 1022, "22149": 1022, "21436": 1022, "22191": 1022, "22476": 1022, "21278": 1022, "21316": 1022, "clickabl": 1022, "21298": 1022, "22237": 1022, "check_scalar": 1022, "22218": 1022, "validationerror": 1022, "check_requires_y_non": 1022, "22578": 1022, "arcidiacono": [1022, 1023], "22595": 1022, "21310": 1022, "22027": 1022, "lanterni": 1022, "23077": 1022, "22188": 1022, "22830": 1022, "2357juan": [1022, 1023], "adamgonzo": 1022, "adijohar": 1022, "kumawat": 1022, "raghuwanshi": 1022, "duron": 1022, "ahmadjubair33": 1022, "aj": 1022, "druck": 1022, "peixinho": 1022, "arroyo": 1022, "alexanmv": 1022, "almeidayoel": 1022, "amar": [1022, 1023, 1024], "amrcod": 1022, "griva": [1022, 1023], "andrii": 1022, "herrou": 1022, "ducout": 1022, "arth": 1022, "arthurmello": 1022, "arturoamor": 1022, "atharva": 1022, "patil": 1022, "aufarkari": 1022, "avm19": [1022, 1023], "ayan": 1022, "bardiya": [1022, 1023], "behrouz": 1022, "ben3940": 1022, "bijil": 1022, "subhash": 1022, "bmreinig": 1022, "brenden": 1022, "kadota": 1022, "cdrig": 1022, "chalmer": 1022, "chitteti": 1022, "srinath": [1022, 1023], "chloe": 1022, "agath": 1022, "azencott": 1022, "christopherlim98": 1022, "weidemann": 1022, "combsccod": 1022, "daniela": [1022, 1023], "darren": [1022, 1023], "eargl": 1022, "gilbertson": [1022, 1023], "dea": [1022, 1023, 1024], "mar\u00eda": [1022, 1023, 1024], "denni": 1022, "osei": 1022, "dessyvv": 1022, "dev514": 1022, "diwakar": 1022, "ries": 1022, "drskd": 1022, "emiko": 1022, "sano": 1022, "emmanouil": 1022, "gionanidi": 1022, "ermolaevpa": [1022, 1023], "estefania": 1022, "barreto": 1022, "ojeda": 1022, "eyast": 1022, "fatima": 1022, "gasmi": 1022, "luna": 1022, "glushchenkov": 1022, "fkaren27": 1022, "fpgawesom": 1022, "ftorres16": [1022, 1023], "gabor": 1022, "berei": 1022, "kertesz": 1022, "gauthier": 1022, "giancarlo": 1022, "glennfrutiz": 1022, "guillermo": 1022, "fern\u00e1ndez": 1022, "hansin": [1022, 1023], "henrymooresc": [1022, 1023], "hideaki": 1022, "imamura": 1022, "hind": 1022, "hmasdev": 1022, "hvassard": 1022, "aki": [1022, 1023], "iasoon": 1022, "ingela": 1022, "cowton": 1022, "jalexand3r": 1022, "jauhar": 1022, "jaya": 1022, "kommireddi": 1022, "je": 1022, "jelfner": 1022, "jenni": 1022, "jirka": 1022, "borovec": 1022, "cipri\u00e1n": 1022, "loayza": 1022, "chazalon": 1022, "mess": 1022, "jovan": [1022, 1023], "stojanov": [1022, 1023], "jschuerz": 1022, "katotten": 1022, "ken4git": 1022, "doucet": 1022, "kimayoung": 1022, "koushik": 1022, "kranthi": 1022, "sedamaki": 1022, "krumetoft": 1022, "lesne": 1022, "casino": [1022, 1023], "logan": [1022, 1023], "lucieclair": 1022, "luiz": 1022, "magali": 1022, "mandjev": 1022, "wurp": [1022, 1023], "boerner": 1022, "wimld": 1022, "martel": 1022, "corentin": 1022, "mat\u00eda": 1022, "matjansen": 1022, "francia": 1022, "megabyt": 1022, "mehrdad": 1022, "moradizadeh": 1022, "melemo2": 1022, "micky774": [1022, 1023], "milana2": 1022, "millawel": 1022, "miwojc": 1022, "mizuki": 1022, "mlant": 1022, "mohit": 1022, "moonkyung94": 1022, "mpoemsl": 1022, "mrinaltyagi": 1022, "leu": 1022, "msabati": 1022, "nadirhan": 1022, "\u015fahin": 1022, "naipawat": [1022, 1023], "poolsawat": [1022, 1023], "nartayxd": 1022, "nastegiano": 1022, "nathansquan": 1022, "detlefsen": 1022, "niket": 1022, "nikhil": 1022, "suresh": 1022, "kondratyev": 1022, "husak": 1022, "partev": [1022, 1023], "pelennor": 1022, "piet": [1022, 1023], "br\u00f6mmel": [1022, 1023], "pinki": 1022, "poloso": 1022, "pramod": 1022, "anantharam": 1022, "puhuk": [1022, 1023], "purna": 1022, "mansingh": 1022, "quadv": 1022, "rahil": [1022, 1023, 1024], "boy": 1022, "raz": 1022, "hoshia": 1022, "rishabh": 1022, "barnowski": [1022, 1023], "rsnegrin": 1022, "yadav": 1022, "sakinaouisrani": 1022, "sanjai": 1022, "marreddi": 1022, "seel": 1022, "sele": [1022, 1023], "seyedsaman": 1022, "emami": 1022, "shandeng123": 1022, "sharmadharmp": 1022, "shaymernaturalint": 1022, "shuangchi": [1022, 1023], "siavrez": 1022, "slishak": 1022, "spikebh": 1022, "sply88": 1022, "kailasa": [1022, 1023], "sultan": 1022, "orazbayev": 1022, "sumit": 1022, "saha": 1022, "sven": [1022, 1023], "eschlbeck": 1022, "stehl": [1022, 1023], "swapnil": 1022, "teunp": 1022, "ferr\u00e9": 1022, "hjortkj\u00e6r": 1022, "thiruvenkadam": 1022, "toastedyeast": [1022, 1023], "mctiernan": [1022, 1023], "udit": 1022, "ugo": 1022, "marchand": 1022, "vera": [1022, 1023], "komey": [1022, 1023], "victoireloui": 1022, "vishwakarma": 1022, "vikrant": 1022, "khedkar": 1022, "chernyi": 1022, "weijiadu": 1022, "yuan": [1022, 1023], "yiyangq": 1022, "yosshi999": 1022, "yuki": 1022, "koyama": 1022, "zeel": 1022, "zempleni": 1022, "zhenfish": 1022, "\u8d75\u4e30": 1022, "25747": 1023, "base_estimator__": 1023, "25477": 1023, "25563": 1023, "25570": 1023, "25664": 1023, "25774": 1023, "25500": 1023, "25589": 1023, "25704": 1023, "min_sample_split": 1023, "25744": 1023, "25619": 1023, "25638": 1023, "25354": 1023, "25174": 1023, "25089": 1023, "25129": 1023, "auxillari": 1023, "25363": 1023, "25188": 1023, "25295": 1023, "spec": 1023, "25312": 1023, "backslash": 1023, "25511": 1023, "25172": 1023, "25341": 1023, "25094": 1023, "25250": 1023, "25370": 1023, "23101": 1023, "24873": 1023, "25694": 1023, "25274": 1023, "25296": 1023, "25147": 1023, "23619": 1023, "24354": 1023, "safiuddin": 1023, "khaja": 1023, "gsiisg": 1023, "23935": 1023, "22527": 1023, "_sgd_fast": 1023, "_plain_sgd": 1023, "oversc": 1023, "23798": 1023, "24543": 1023, "24465": 1023, "23734": 1023, "24699": 1023, "23865": 1023, "simd": 1023, "primit": 1023, "23446": 1023, "23197": 1023, "23604": 1023, "23585": 1023, "24556": 1023, "maladi\u00e8r": [1023, 1024], "24617": 1023, "sim4n6": 1023, "24688": 1023, "22054": 1023, "roic": 1023, "24264": 1023, "maladier": 1023, "14736": 1023, "hunt": 1023, "zhan": 1023, "20802": 1023, "pokorni": 1023, "22965": 1023, "22968": 1023, "23038": 1023, "propog": 1023, "23210": 1023, "24258": 1023, "23470": 1023, "21938": 1023, "23127": 1023, "19075": 1023, "ramo": 1023, "carre\u00f1o": 1023, "24951": 1023, "22268": 1023, "mohamedbsh": 1023, "23905": 1023, "11860": 1023, "ablin": 1023, "24528": 1023, "23726": 1023, "24421": 1023, "kshitij": [1023, 1024], "22554": 1023, "24218": 1023, "molin": 1023, "21020": 1023, "24856": 1023, "22014": 1023, "23252": 1023, "24538": 1023, "24889": 1023, "24146": 1023, "peretti": 1023, "nestor": 1023, "navarro": 1023, "nati": 1023, "tomatti": 1023, "24855": 1023, "24849": 1023, "20415": 1023, "24283": 1023, "24894": 1023, "23819": [1023, 1024], "edoardo": 1023, "abati": 1023, "24747": 1023, "24245": 1023, "24405": 1023, "salman": [1023, 1024], "16695": 1023, "vitor": 1023, "rosa": 1023, "18298": 1023, "25077": 1023, "24317": 1023, "24350": 1023, "24755": 1023, "levitski": [1023, 1024], "24637": 1023, "24767": 1023, "23275": 1023, "maxwelllzh": 1023, "24433": 1023, "yogendrasingh": 1023, "23637": 1023, "23877": 1023, "10168": 1023, "\u0142ukasz": 1023, "borchmann": 1023, "12285": 1023, "miltenberg": 1023, "13042": 1023, "parizi": 1023, "18094": 1023, "22562": 1023, "24714": 1023, "foor": 1023, "23834": 1023, "24051": 1023, "22518": 1023, "18020": 1023, "24338": 1023, "23442": 1023, "atukorala": 1023, "22710": 1023, "conroi": 1023, "trinh": 1023, "23461": 1023, "24365": 1023, "24630": 1023, "rushil": 1023, "24084": 1023, "iinfo": 1023, "24141": 1023, "24539": 1023, "23977": 1023, "23683": 1023, "andrei": 1023, "melnik": 1023, "16747": 1023, "18805": 1023, "hongshaoyang": 1023, "22269": 1023, "23139": 1023, "24645": 1023, "10468": 1023, "ruben": 1023, "22993": 1023, "24750": 1023, "rudresh": 1023, "veerkhar": 1023, "23874": 1023, "24075": 1023, "22665": 1023, "24683": 1023, "24058": 1023, "perdok": 1023, "20331": 1023, "23993": 1023, "22629": 1023, "24412": 1023, "22898": 1023, "23480": 1023, "21469": 1023, "lapack_svd_driv": 1023, "20617": 1023, "ouptut": 1023, "25067": 1023, "14862": 1023, "24512": 1023, "24667": 1023, "25080": 1023, "24523": 1023, "mia": 1023, "bajic": 1023, "3llobo": 1023, "kania": 1023, "anulekh": 1023, "admir": 1023, "demiraj": 1023, "adoublet": 1023, "ahmedbgh": 1023, "aiko": 1023, "akshita": 1023, "prasanth": 1023, "ala": 1023, "miola": 1023, "lebel": 1023, "buzenet": [1023, 1024], "kassa": 1023, "bera": 1023, "maennel": 1023, "aniket": 1023, "shirsat": 1023, "anthony22": 1023, "apostolo": 1023, "tsetogl": 1023, "aravindh": 1023, "artur": 1023, "hermano": 1023, "ashah002": 1023, "ashwin": [1023, 1024], "azaria": 1023, "gebremichael": 1023, "b0rxington": 1023, "badr": 1023, "moufad": 1023, "bart\u0142omiej": 1023, "go\u0144da": 1023, "bdegraaff": 1023, "berkecanrizai": 1023, "bernd": 1023, "fritzk": 1023, "bhoomika": 1023, "biswaroop": 1023, "cannon": 1023, "bsh": 1023, "ceh": 1023, "chalulu": 1023, "changyao": 1023, "zablit": 1023, "veenhui": 1023, "christianwaldmann": 1023, "christin": 1023, "verrier": 1023, "dangonite57": 1023, "danielgaerb": 1023, "davidblnc": 1023, "dayn": 1023, "khant": 1023, "dhanshre": 1023, "diadochokinet": 1023, "diederikwp": 1023, "litsidi": 1023, "drewhogg": 1023, "oc": 1023, "dwight": 1023, "lindquist": 1023, "eden": 1023, "brekk": 1023, "edern": 1023, "eleanor": 1023, "eliaschiavon": 1023, "emir": 1023, "fabrizio": 1023, "damicelli": 1023, "fcharra": 1023, "siola": [1023, 1024], "tuveri": 1023, "franck": 1023, "charra": 1023, "geevarghes": 1023, "georgiamaydai": 1023, "gianr": 1023, "lazz": 1023, "guitar": 1023, "gunesbayir": 1023, "harshit5674": 1023, "hasan": 1023, "yaman": 1023, "vrigazov": 1023, "htsedebenham": 1023, "humahn": 1023, "ido": 1023, "iglesi": 1023, "iliya": 1023, "zhechev": 1023, "iren": 1023, "ivanllt": 1023, "sedykh": 1023, "mcivor": 1023, "janfidor": 1023, "jiten": 1023, "sidhpura": 1023, "jkarolczak": 1023, "jo\u00e3o": 1023, "johnathanpi": 1023, "koumenti": 1023, "panga": [1023, 1024], "johnthagen": 1023, "fleme": 1023, "choo": [1023, 1024], "yun": [1023, 1024], "keat": [1023, 1024], "juanfe88": 1023, "juliaschoepp": 1023, "jygerardi": 1023, "ka00ri": 1023, "kanishk": 1023, "sachdev": 1023, "kanissh": 1023, "kendal": 1023, "kento": 1023, "nozawa": 1023, "eliasi": 1023, "kluge": 1023, "lieret": 1023, "kirandevraj": 1023, "kraig": 1023, "vamsi": 1023, "kapadni": 1023, "lingyi1110": 1023, "mantovani": 1023, "maascha": 1023, "madinak": 1023, "maksym": 1023, "mansi": 1023, "kostelac": [1023, 1024], "marvin": [1023, 1024], "krawutschk": [1023, 1024], "masanori": 1023, "kanazu": 1023, "haberland": 1023, "mauroantonioserrano": 1023, "maxi": 1023, "marufo": 1023, "maximesaur": 1023, "smolskii": 1023, "bou": 1023, "mehgarg": 1023, "mehmetcanakbai": 1023, "baji\u0107": 1023, "flak": 1023, "hornstein": 1023, "ruiter": 1023, "paradi": 1023, "iljin": 1023, "misa": 1023, "ogura": 1023, "wilksch": 1023, "mrastgoo": 1023, "naois": 1023, "holohan": 1023, "nass": 1023, "jacobi": 1023, "nawazish": 1023, "alam": 1023, "nguy\u1ec5n": 1023, "v\u0103n": 1023, "di\u1ec5n": 1023, "fanelli": 1023, "nihal": 1023, "thukarama": 1023, "jare": 1023, "nima10khodaveisi": 1023, "nima": 1023, "sarajpoor": 1023, "nitinramvelraj": 1023, "nnlnr": 1023, "npach": 1023, "nwanna": 1023, "nymark": 1023, "kho": 1023, "holman": 1023, "oll": 1023, "lukowski": 1023, "hassoun": 1023, "tamer": 1023, "ouss1508": 1023, "oyindamola": 1023, "olatunji": 1023, "pab": 1023, "pandata": 1023, "soar": 1023, "petar": 1023, "mlinari\u0107": 1023, "pooja": 1023, "subramaniam": 1023, "priyam": 1023, "kakati": 1023, "freeland": 1023, "keerti": 1023, "rafal": 1023, "wojdyla": 1023, "raghuv": 1023, "makhija": 1023, "rehan": 1023, "guha": 1023, "klima": 1023, "crockett": 1023, "homm": 1023, "roman4oo": 1023, "rowan": 1023, "mankoo": 1023, "sabri": 1023, "monaf": 1023, "safikh": 1023, "salahuddin": 1023, "yojana": 1023, "menes": 1023, "ephrem": 1023, "sangam": 1023, "sangamswadik": 1023, "sanjai_3": 1023, "sarahremu": 1023, "sashka": 1023, "savkomax": 1023, "gustafson": 1023, "sec65": 1023, "seljak": 1023, "shadi": 1023, "gewili": 1023, "shellyfung": 1023, "shinsuk": 1023, "mori": 1023, "shiva": 1023, "shoaib": 1023, "khan": 1023, "shogo": 1023, "hida": 1023, "shrankhla": 1023, "sonniv": 1023, "sortofamudkip": 1023, "stanislav": 1023, "modrak": 1023, "stellalin7": 1023, "vaerenbergh": 1023, "schmerler": 1023, "tabea": 1023, "kossen": 1023, "thedevpanda": 1023, "syd": 1023, "sre": 1023, "weezel": [1023, 1024], "bonald": 1023, "germer": 1023, "ion": 1023, "timofei": 1023, "kornev": 1023, "pitter": 1023, "tomiock": 1023, "mathew": 1023, "tspeng": 1023, "egashira": 1023, "rey": 1023, "puerta": 1023, "vishal": 1023, "vyom": 1023, "pathak": 1023, "wattai": 1023, "wchathura": 1023, "wen": 1023, "x110": 1023, "xuniu": 1023, "yanhong": 1023, "ef": 1023, "yusuf": 1023, "raji": 1023, "adil": 1023, "khwaja": 1023, "zeeshan": 1023, "lone": 1023, "25196": 1024, "24871": 1024, "25438": 1024, "yotam": 1024, "avidar": 1024, "constantini": 1024, "25752": 1024, "26337": 1024, "25294": 1024, "25308": 1024, "25291": 1024, "25367": 1024, "25402": 1024, "25044": 1024, "smt": 1024, "26082": 1024, "25815": 1024, "24568": 1024, "26121": 1024, "25805": 1024, "25251": 1024, "26385": 1024, "26033": 1024, "graphical_lasso_path": 1024, "26108": 1024, "barth\u00e9lemi": 1024, "25784": 1024, "26386": 1024, "25490": 1024, "25956": 1024, "22409": 1024, "25177": 1024, "24882": 1024, "25186": 1024, "breve": 1024, "26318": 1024, "25506": 1024, "25601": 1024, "fidor": 1024, "25931": 1024, "25629": 1024, "26242": 1024, "toplak": 1024, "sckit": 1024, "verion": 1024, "25297": 1024, "24230": 1024, "25102": 1024, "25973": 1024, "25232": 1024, "21809": 1024, "25732": 1024, "26207": 1024, "25587": 1024, "25697": 1024, "25214": 1024, "25713": 1024, "25531": 1024, "25432": 1024, "25672": 1024, "lene": 1024, "preuss": 1024, "18723": 1024, "sahil": 1024, "24677": 1024, "24668": 1024, "dberenbaum": 1024, "25987": 1024, "26019": 1024, "25299": 1024, "omarmanzoor": 1024, "17388": 1024, "24769": 1024, "arbritrari": 1024, "26194": 1024, "26264": 1024, "barata": 1024, "onggo": 1024, "23099": 1024, "25659": 1024, "26333": 1024, "24140": 1024, "25417": 1024, "24076": 1024, "24083": 1024, "25443": 1024, "feature_union": 1024, "25093": 1024, "25220": 1024, "26325": 1024, "25334": 1024, "22506": 1024, "24935": 1024, "seladu": 1024, "25257": 1024, "25677": 1024, "26424": 1024, "25190": 1024, "26093": 1024, "23595": 1024, "26376": 1024, "25387": 1024, "26289": 1024, "check_transformers_unfitted_stateless": 1024, "20524": 1024, "niuk": 1024, "23731": 1024, "25733": 1024, "25813": 1024, "26106": 1024, "suport": 1024, "25814": 1024, "19664": 1024}, "objects": {"sklearn": [[395, 0, 0, "-", "base"], [395, 0, 0, "-", "calibration"], [395, 0, 0, "-", "cluster"], [395, 0, 0, "-", "compose"], [453, 4, 1, "", "config_context"], [395, 0, 0, "-", "covariance"], [395, 0, 0, "-", "cross_decomposition"], [395, 0, 0, "-", "datasets"], [395, 0, 0, "-", "decomposition"], [395, 0, 0, "-", "discriminant_analysis"], [395, 0, 0, "-", "dummy"], [395, 0, 0, "-", "ensemble"], [395, 0, 0, "-", "exceptions"], [395, 0, 0, "-", "experimental"], [395, 0, 0, "-", "feature_extraction"], [395, 0, 0, "-", "feature_selection"], [395, 0, 0, "-", "gaussian_process"], [611, 4, 1, "", "get_config"], [395, 0, 0, "-", "impute"], [395, 0, 0, "-", "inspection"], [395, 0, 0, "-", "isotonic"], [395, 0, 0, "-", "kernel_approximation"], [395, 0, 0, "-", "kernel_ridge"], [395, 0, 0, "-", "linear_model"], [395, 0, 0, "-", "manifold"], [395, 0, 0, "-", "metrics"], [395, 0, 0, "-", "mixture"], [395, 0, 0, "-", "model_selection"], [395, 0, 0, "-", "multiclass"], [395, 0, 0, "-", "multioutput"], [395, 0, 0, "-", "naive_bayes"], [395, 0, 0, "-", "neighbors"], [395, 0, 0, "-", "neural_network"], [395, 0, 0, "-", "pipeline"], [395, 0, 0, "-", "preprocessing"], [395, 0, 0, "-", "random_projection"], [395, 0, 0, "-", "semi_supervised"], [881, 4, 1, "", "set_config"], [882, 4, 1, "", "show_versions"], [395, 0, 0, "-", "svm"], [395, 0, 0, "-", "tree"], [395, 0, 0, "-", "utils"]], "sklearn.base": [[410, 1, 1, "", "BaseEstimator"], [411, 1, 1, "", "BiclusterMixin"], [412, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [413, 1, 1, "", "ClassifierMixin"], [414, 1, 1, "", "ClusterMixin"], [415, 1, 1, "", "DensityMixin"], [416, 1, 1, "", "OneToOneFeatureMixin"], [417, 1, 1, "", "RegressorMixin"], [418, 1, 1, "", "TransformerMixin"], [419, 4, 1, "", "clone"], [420, 4, 1, "", "is_classifier"], [421, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[410, 2, 1, "", "get_params"], [410, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[411, 3, 1, "", "biclusters_"], [411, 2, 1, "", "get_indices"], [411, 2, 1, "", "get_shape"], [411, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[412, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[413, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[414, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[415, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[416, 2, 1, "", "get_feature_names_out"]], "sklearn.base.RegressorMixin": [[417, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[418, 2, 1, "", "fit_transform"], [418, 2, 1, "", "set_output"]], "sklearn.calibration": [[422, 1, 1, "", "CalibratedClassifierCV"], [423, 1, 1, "", "CalibrationDisplay"], [424, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[422, 2, 1, "", "fit"], [422, 2, 1, "", "get_params"], [422, 2, 1, "", "predict"], [422, 2, 1, "", "predict_proba"], [422, 2, 1, "", "score"], [422, 2, 1, "", "set_params"]], "sklearn.calibration.CalibrationDisplay": [[423, 2, 1, "", "from_estimator"], [423, 2, 1, "", "from_predictions"], [423, 2, 1, "", "plot"]], "sklearn.cluster": [[425, 1, 1, "", "AffinityPropagation"], [426, 1, 1, "", "AgglomerativeClustering"], [427, 1, 1, "", "Birch"], [428, 1, 1, "", "BisectingKMeans"], [429, 1, 1, "", "DBSCAN"], [430, 1, 1, "", "FeatureAgglomeration"], [431, 1, 1, "", "HDBSCAN"], [432, 1, 1, "", "KMeans"], [433, 1, 1, "", "MeanShift"], [434, 1, 1, "", "MiniBatchKMeans"], [435, 1, 1, "", "OPTICS"], [436, 1, 1, "", "SpectralBiclustering"], [437, 1, 1, "", "SpectralClustering"], [438, 1, 1, "", "SpectralCoclustering"], [439, 4, 1, "", "affinity_propagation"], [440, 4, 1, "", "cluster_optics_dbscan"], [441, 4, 1, "", "cluster_optics_xi"], [442, 4, 1, "", "compute_optics_graph"], [407, 4, 1, "", "dbscan"], [443, 4, 1, "", "estimate_bandwidth"], [444, 4, 1, "", "k_means"], [445, 4, 1, "", "kmeans_plusplus"], [446, 4, 1, "", "mean_shift"], [447, 4, 1, "", "spectral_clustering"], [448, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[425, 2, 1, "", "fit"], [425, 2, 1, "", "fit_predict"], [425, 2, 1, "", "get_params"], [425, 2, 1, "", "predict"], [425, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[426, 2, 1, "", "fit"], [426, 2, 1, "", "fit_predict"], [426, 2, 1, "", "get_params"], [426, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[427, 2, 1, "", "fit"], [427, 2, 1, "", "fit_predict"], [427, 2, 1, "", "fit_transform"], [427, 2, 1, "", "get_feature_names_out"], [427, 2, 1, "", "get_params"], [427, 2, 1, "", "partial_fit"], [427, 2, 1, "", "predict"], [427, 2, 1, "", "set_output"], [427, 2, 1, "", "set_params"], [427, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[428, 2, 1, "", "fit"], [428, 2, 1, "", "fit_predict"], [428, 2, 1, "", "fit_transform"], [428, 2, 1, "", "get_feature_names_out"], [428, 2, 1, "", "get_params"], [428, 2, 1, "", "predict"], [428, 2, 1, "", "score"], [428, 2, 1, "", "set_output"], [428, 2, 1, "", "set_params"], [428, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[429, 2, 1, "", "fit"], [429, 2, 1, "", "fit_predict"], [429, 2, 1, "", "get_params"], [429, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[430, 2, 1, "", "fit"], [430, 3, 1, "", "fit_predict"], [430, 2, 1, "", "fit_transform"], [430, 2, 1, "", "get_feature_names_out"], [430, 2, 1, "", "get_params"], [430, 2, 1, "", "inverse_transform"], [430, 2, 1, "", "set_output"], [430, 2, 1, "", "set_params"], [430, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[431, 2, 1, "", "dbscan_clustering"], [431, 2, 1, "", "fit"], [431, 2, 1, "", "fit_predict"], [431, 2, 1, "", "get_params"], [431, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[432, 2, 1, "", "fit"], [432, 2, 1, "", "fit_predict"], [432, 2, 1, "", "fit_transform"], [432, 2, 1, "", "get_feature_names_out"], [432, 2, 1, "", "get_params"], [432, 2, 1, "", "predict"], [432, 2, 1, "", "score"], [432, 2, 1, "", "set_output"], [432, 2, 1, "", "set_params"], [432, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[433, 2, 1, "", "fit"], [433, 2, 1, "", "fit_predict"], [433, 2, 1, "", "get_params"], [433, 2, 1, "", "predict"], [433, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[434, 2, 1, "", "fit"], [434, 2, 1, "", "fit_predict"], [434, 2, 1, "", "fit_transform"], [434, 2, 1, "", "get_feature_names_out"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "partial_fit"], [434, 2, 1, "", "predict"], [434, 2, 1, "", "score"], [434, 2, 1, "", "set_output"], [434, 2, 1, "", "set_params"], [434, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[435, 2, 1, "", "fit"], [435, 2, 1, "", "fit_predict"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[436, 3, 1, "", "biclusters_"], [436, 2, 1, "", "fit"], [436, 2, 1, "", "get_indices"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "get_shape"], [436, 2, 1, "", "get_submatrix"], [436, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[437, 2, 1, "", "fit"], [437, 2, 1, "", "fit_predict"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[438, 3, 1, "", "biclusters_"], [438, 2, 1, "", "fit"], [438, 2, 1, "", "get_indices"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "get_shape"], [438, 2, 1, "", "get_submatrix"], [438, 2, 1, "", "set_params"]], "sklearn.compose": [[449, 1, 1, "", "ColumnTransformer"], [450, 1, 1, "", "TransformedTargetRegressor"], [451, 4, 1, "", "make_column_selector"], [452, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "get_feature_names_out"], [449, 2, 1, "", "get_params"], [449, 3, 1, "", "named_transformers_"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "get_params"], [450, 3, 1, "", "n_features_in_"], [450, 2, 1, "", "predict"], [450, 2, 1, "", "score"], [450, 2, 1, "", "set_params"]], "sklearn.covariance": [[454, 1, 1, "", "EllipticEnvelope"], [455, 1, 1, "", "EmpiricalCovariance"], [456, 1, 1, "", "GraphicalLasso"], [457, 1, 1, "", "GraphicalLassoCV"], [458, 1, 1, "", "LedoitWolf"], [459, 1, 1, "", "MinCovDet"], [460, 1, 1, "", "OAS"], [461, 1, 1, "", "ShrunkCovariance"], [462, 4, 1, "", "empirical_covariance"], [463, 4, 1, "", "graphical_lasso"], [464, 4, 1, "", "ledoit_wolf"], [465, 4, 1, "", "ledoit_wolf_shrinkage"], [409, 4, 1, "", "oas"], [466, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[454, 2, 1, "", "correct_covariance"], [454, 2, 1, "", "decision_function"], [454, 2, 1, "", "error_norm"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "fit_predict"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "get_precision"], [454, 2, 1, "", "mahalanobis"], [454, 2, 1, "", "predict"], [454, 2, 1, "", "reweight_covariance"], [454, 2, 1, "", "score"], [454, 2, 1, "", "score_samples"], [454, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[455, 2, 1, "", "error_norm"], [455, 2, 1, "", "fit"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "get_precision"], [455, 2, 1, "", "mahalanobis"], [455, 2, 1, "", "score"], [455, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[456, 2, 1, "", "error_norm"], [456, 2, 1, "", "fit"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "get_precision"], [456, 2, 1, "", "mahalanobis"], [456, 2, 1, "", "score"], [456, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[457, 2, 1, "", "error_norm"], [457, 2, 1, "", "fit"], [457, 2, 1, "", "get_params"], [457, 2, 1, "", "get_precision"], [457, 2, 1, "", "mahalanobis"], [457, 2, 1, "", "score"], [457, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[458, 2, 1, "", "error_norm"], [458, 2, 1, "", "fit"], [458, 2, 1, "", "get_params"], [458, 2, 1, "", "get_precision"], [458, 2, 1, "", "mahalanobis"], [458, 2, 1, "", "score"], [458, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[459, 2, 1, "", "correct_covariance"], [459, 2, 1, "", "error_norm"], [459, 2, 1, "", "fit"], [459, 2, 1, "", "get_params"], [459, 2, 1, "", "get_precision"], [459, 2, 1, "", "mahalanobis"], [459, 2, 1, "", "reweight_covariance"], [459, 2, 1, "", "score"], [459, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[460, 2, 1, "", "error_norm"], [460, 2, 1, "", "fit"], [460, 2, 1, "", "get_params"], [460, 2, 1, "", "get_precision"], [460, 2, 1, "", "mahalanobis"], [460, 2, 1, "", "score"], [460, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[461, 2, 1, "", "error_norm"], [461, 2, 1, "", "fit"], [461, 2, 1, "", "get_params"], [461, 2, 1, "", "get_precision"], [461, 2, 1, "", "mahalanobis"], [461, 2, 1, "", "score"], [461, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[467, 1, 1, "", "CCA"], [468, 1, 1, "", "PLSCanonical"], [469, 1, 1, "", "PLSRegression"], [470, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[467, 2, 1, "", "fit"], [467, 2, 1, "", "fit_transform"], [467, 2, 1, "", "get_feature_names_out"], [467, 2, 1, "", "get_params"], [467, 2, 1, "", "inverse_transform"], [467, 2, 1, "", "predict"], [467, 2, 1, "", "score"], [467, 2, 1, "", "set_output"], [467, 2, 1, "", "set_params"], [467, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[468, 2, 1, "", "fit"], [468, 2, 1, "", "fit_transform"], [468, 2, 1, "", "get_feature_names_out"], [468, 2, 1, "", "get_params"], [468, 2, 1, "", "inverse_transform"], [468, 2, 1, "", "predict"], [468, 2, 1, "", "score"], [468, 2, 1, "", "set_output"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[469, 2, 1, "", "fit"], [469, 2, 1, "", "fit_transform"], [469, 2, 1, "", "get_feature_names_out"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "inverse_transform"], [469, 2, 1, "", "predict"], [469, 2, 1, "", "score"], [469, 2, 1, "", "set_output"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[470, 2, 1, "", "fit"], [470, 2, 1, "", "fit_transform"], [470, 2, 1, "", "get_feature_names_out"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "set_output"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "transform"]], "sklearn.datasets": [[471, 4, 1, "", "clear_data_home"], [472, 4, 1, "", "dump_svmlight_file"], [473, 4, 1, "", "fetch_20newsgroups"], [474, 4, 1, "", "fetch_20newsgroups_vectorized"], [475, 4, 1, "", "fetch_california_housing"], [476, 4, 1, "", "fetch_covtype"], [477, 4, 1, "", "fetch_kddcup99"], [478, 4, 1, "", "fetch_lfw_pairs"], [479, 4, 1, "", "fetch_lfw_people"], [480, 4, 1, "", "fetch_olivetti_faces"], [481, 4, 1, "", "fetch_openml"], [482, 4, 1, "", "fetch_rcv1"], [483, 4, 1, "", "fetch_species_distributions"], [484, 4, 1, "", "get_data_home"], [485, 4, 1, "", "load_breast_cancer"], [486, 4, 1, "", "load_diabetes"], [487, 4, 1, "", "load_digits"], [488, 4, 1, "", "load_files"], [489, 4, 1, "", "load_iris"], [490, 4, 1, "", "load_linnerud"], [491, 4, 1, "", "load_sample_image"], [492, 4, 1, "", "load_sample_images"], [493, 4, 1, "", "load_svmlight_file"], [494, 4, 1, "", "load_svmlight_files"], [495, 4, 1, "", "load_wine"], [496, 4, 1, "", "make_biclusters"], [497, 4, 1, "", "make_blobs"], [498, 4, 1, "", "make_checkerboard"], [499, 4, 1, "", "make_circles"], [500, 4, 1, "", "make_classification"], [501, 4, 1, "", "make_friedman1"], [502, 4, 1, "", "make_friedman2"], [503, 4, 1, "", "make_friedman3"], [504, 4, 1, "", "make_gaussian_quantiles"], [505, 4, 1, "", "make_hastie_10_2"], [506, 4, 1, "", "make_low_rank_matrix"], [507, 4, 1, "", "make_moons"], [508, 4, 1, "", "make_multilabel_classification"], [509, 4, 1, "", "make_regression"], [510, 4, 1, "", "make_s_curve"], [511, 4, 1, "", "make_sparse_coded_signal"], [512, 4, 1, "", "make_sparse_spd_matrix"], [513, 4, 1, "", "make_sparse_uncorrelated"], [514, 4, 1, "", "make_spd_matrix"], [515, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[516, 1, 1, "", "DictionaryLearning"], [517, 1, 1, "", "FactorAnalysis"], [518, 1, 1, "", "FastICA"], [519, 1, 1, "", "IncrementalPCA"], [520, 1, 1, "", "KernelPCA"], [521, 1, 1, "", "LatentDirichletAllocation"], [522, 1, 1, "", "MiniBatchDictionaryLearning"], [523, 1, 1, "", "MiniBatchNMF"], [524, 1, 1, "", "MiniBatchSparsePCA"], [525, 1, 1, "", "NMF"], [526, 1, 1, "", "PCA"], [527, 1, 1, "", "SparseCoder"], [528, 1, 1, "", "SparsePCA"], [529, 1, 1, "", "TruncatedSVD"], [530, 4, 1, "", "dict_learning"], [531, 4, 1, "", "dict_learning_online"], [408, 4, 1, "", "fastica"], [532, 4, 1, "", "non_negative_factorization"], [533, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[516, 2, 1, "", "fit"], [516, 2, 1, "", "fit_transform"], [516, 2, 1, "", "get_feature_names_out"], [516, 2, 1, "", "get_params"], [516, 2, 1, "", "set_output"], [516, 2, 1, "", "set_params"], [516, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[517, 2, 1, "", "fit"], [517, 2, 1, "", "fit_transform"], [517, 2, 1, "", "get_covariance"], [517, 2, 1, "", "get_feature_names_out"], [517, 2, 1, "", "get_params"], [517, 2, 1, "", "get_precision"], [517, 2, 1, "", "score"], [517, 2, 1, "", "score_samples"], [517, 2, 1, "", "set_output"], [517, 2, 1, "", "set_params"], [517, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[518, 2, 1, "", "fit"], [518, 2, 1, "", "fit_transform"], [518, 2, 1, "", "get_feature_names_out"], [518, 2, 1, "", "get_params"], [518, 2, 1, "", "inverse_transform"], [518, 2, 1, "", "set_output"], [518, 2, 1, "", "set_params"], [518, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[519, 2, 1, "", "fit"], [519, 2, 1, "", "fit_transform"], [519, 2, 1, "", "get_covariance"], [519, 2, 1, "", "get_feature_names_out"], [519, 2, 1, "", "get_params"], [519, 2, 1, "", "get_precision"], [519, 2, 1, "", "inverse_transform"], [519, 2, 1, "", "partial_fit"], [519, 2, 1, "", "set_output"], [519, 2, 1, "", "set_params"], [519, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[520, 2, 1, "", "fit"], [520, 2, 1, "", "fit_transform"], [520, 2, 1, "", "get_feature_names_out"], [520, 2, 1, "", "get_params"], [520, 2, 1, "", "inverse_transform"], [520, 2, 1, "", "set_output"], [520, 2, 1, "", "set_params"], [520, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[521, 2, 1, "", "fit"], [521, 2, 1, "", "fit_transform"], [521, 2, 1, "", "get_feature_names_out"], [521, 2, 1, "", "get_params"], [521, 2, 1, "", "partial_fit"], [521, 2, 1, "", "perplexity"], [521, 2, 1, "", "score"], [521, 2, 1, "", "set_output"], [521, 2, 1, "", "set_params"], [521, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[522, 2, 1, "", "fit"], [522, 2, 1, "", "fit_transform"], [522, 2, 1, "", "get_feature_names_out"], [522, 2, 1, "", "get_params"], [522, 2, 1, "", "partial_fit"], [522, 2, 1, "", "set_output"], [522, 2, 1, "", "set_params"], [522, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[523, 2, 1, "", "fit"], [523, 2, 1, "", "fit_transform"], [523, 2, 1, "", "get_feature_names_out"], [523, 2, 1, "", "get_params"], [523, 2, 1, "", "inverse_transform"], [523, 2, 1, "", "partial_fit"], [523, 2, 1, "", "set_output"], [523, 2, 1, "", "set_params"], [523, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[524, 2, 1, "", "fit"], [524, 2, 1, "", "fit_transform"], [524, 2, 1, "", "get_feature_names_out"], [524, 2, 1, "", "get_params"], [524, 2, 1, "", "inverse_transform"], [524, 2, 1, "", "set_output"], [524, 2, 1, "", "set_params"], [524, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[525, 2, 1, "", "fit"], [525, 2, 1, "", "fit_transform"], [525, 2, 1, "", "get_feature_names_out"], [525, 2, 1, "", "get_params"], [525, 2, 1, "", "inverse_transform"], [525, 2, 1, "", "set_output"], [525, 2, 1, "", "set_params"], [525, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[526, 2, 1, "", "fit"], [526, 2, 1, "", "fit_transform"], [526, 2, 1, "", "get_covariance"], [526, 2, 1, "", "get_feature_names_out"], [526, 2, 1, "", "get_params"], [526, 2, 1, "", "get_precision"], [526, 2, 1, "", "inverse_transform"], [526, 2, 1, "", "score"], [526, 2, 1, "", "score_samples"], [526, 2, 1, "", "set_output"], [526, 2, 1, "", "set_params"], [526, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[527, 2, 1, "", "fit"], [527, 2, 1, "", "fit_transform"], [527, 2, 1, "", "get_feature_names_out"], [527, 2, 1, "", "get_params"], [527, 3, 1, "", "n_components_"], [527, 3, 1, "", "n_features_in_"], [527, 2, 1, "", "set_output"], [527, 2, 1, "", "set_params"], [527, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[528, 2, 1, "", "fit"], [528, 2, 1, "", "fit_transform"], [528, 2, 1, "", "get_feature_names_out"], [528, 2, 1, "", "get_params"], [528, 2, 1, "", "inverse_transform"], [528, 2, 1, "", "set_output"], [528, 2, 1, "", "set_params"], [528, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "fit_transform"], [529, 2, 1, "", "get_feature_names_out"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "inverse_transform"], [529, 2, 1, "", "set_output"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[534, 1, 1, "", "LinearDiscriminantAnalysis"], [535, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[534, 2, 1, "", "decision_function"], [534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "predict"], [534, 2, 1, "", "predict_log_proba"], [534, 2, 1, "", "predict_proba"], [534, 2, 1, "", "score"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[535, 2, 1, "", "decision_function"], [535, 2, 1, "", "fit"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "predict"], [535, 2, 1, "", "predict_log_proba"], [535, 2, 1, "", "predict_proba"], [535, 2, 1, "", "score"], [535, 2, 1, "", "set_params"]], "sklearn.dummy": [[536, 1, 1, "", "DummyClassifier"], [537, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "predict"], [536, 2, 1, "", "predict_log_proba"], [536, 2, 1, "", "predict_proba"], [536, 2, 1, "", "score"], [536, 2, 1, "", "set_params"]], "sklearn.dummy.DummyRegressor": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "predict"], [537, 2, 1, "", "score"], [537, 2, 1, "", "set_params"]], "sklearn.ensemble": [[538, 1, 1, "", "AdaBoostClassifier"], [539, 1, 1, "", "AdaBoostRegressor"], [540, 1, 1, "", "BaggingClassifier"], [541, 1, 1, "", "BaggingRegressor"], [542, 1, 1, "", "ExtraTreesClassifier"], [543, 1, 1, "", "ExtraTreesRegressor"], [544, 1, 1, "", "GradientBoostingClassifier"], [545, 1, 1, "", "GradientBoostingRegressor"], [546, 1, 1, "", "HistGradientBoostingClassifier"], [547, 1, 1, "", "HistGradientBoostingRegressor"], [548, 1, 1, "", "IsolationForest"], [549, 1, 1, "", "RandomForestClassifier"], [550, 1, 1, "", "RandomForestRegressor"], [551, 1, 1, "", "RandomTreesEmbedding"], [552, 1, 1, "", "StackingClassifier"], [553, 1, 1, "", "StackingRegressor"], [554, 1, 1, "", "VotingClassifier"], [555, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[538, 3, 1, "", "base_estimator_"], [538, 2, 1, "", "decision_function"], [538, 3, 1, "", "feature_importances_"], [538, 2, 1, "", "fit"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "predict"], [538, 2, 1, "", "predict_log_proba"], [538, 2, 1, "", "predict_proba"], [538, 2, 1, "", "score"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "staged_decision_function"], [538, 2, 1, "", "staged_predict"], [538, 2, 1, "", "staged_predict_proba"], [538, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[539, 3, 1, "", "base_estimator_"], [539, 3, 1, "", "feature_importances_"], [539, 2, 1, "", "fit"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "predict"], [539, 2, 1, "", "score"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "staged_predict"], [539, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[540, 3, 1, "", "base_estimator_"], [540, 2, 1, "", "decision_function"], [540, 3, 1, "", "estimators_samples_"], [540, 2, 1, "", "fit"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "predict"], [540, 2, 1, "", "predict_log_proba"], [540, 2, 1, "", "predict_proba"], [540, 2, 1, "", "score"], [540, 2, 1, "", "set_params"]], "sklearn.ensemble.BaggingRegressor": [[541, 3, 1, "", "base_estimator_"], [541, 3, 1, "", "estimators_samples_"], [541, 2, 1, "", "fit"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "predict"], [541, 2, 1, "", "score"], [541, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesClassifier": [[542, 2, 1, "", "apply"], [542, 3, 1, "", "base_estimator_"], [542, 2, 1, "", "decision_path"], [542, 3, 1, "", "feature_importances_"], [542, 2, 1, "", "fit"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "predict"], [542, 2, 1, "", "predict_log_proba"], [542, 2, 1, "", "predict_proba"], [542, 2, 1, "", "score"], [542, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesRegressor": [[543, 2, 1, "", "apply"], [543, 3, 1, "", "base_estimator_"], [543, 2, 1, "", "decision_path"], [543, 3, 1, "", "feature_importances_"], [543, 2, 1, "", "fit"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "predict"], [543, 2, 1, "", "score"], [543, 2, 1, "", "set_params"]], "sklearn.ensemble.GradientBoostingClassifier": [[544, 2, 1, "", "apply"], [544, 3, 1, "", "base_estimator_"], [544, 2, 1, "", "decision_function"], [544, 3, 1, "", "feature_importances_"], [544, 2, 1, "", "fit"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "predict_log_proba"], [544, 2, 1, "", "predict_proba"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "staged_decision_function"], [544, 2, 1, "", "staged_predict"], [544, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[545, 2, 1, "", "apply"], [545, 3, 1, "", "base_estimator_"], [545, 3, 1, "", "feature_importances_"], [545, 2, 1, "", "fit"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[546, 2, 1, "", "decision_function"], [546, 2, 1, "", "fit"], [546, 2, 1, "", "get_params"], [546, 3, 1, "", "n_iter_"], [546, 2, 1, "", "predict"], [546, 2, 1, "", "predict_proba"], [546, 2, 1, "", "score"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "staged_decision_function"], [546, 2, 1, "", "staged_predict"], [546, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "get_params"], [547, 3, 1, "", "n_iter_"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[548, 3, 1, "", "base_estimator_"], [548, 2, 1, "", "decision_function"], [548, 3, 1, "", "estimators_samples_"], [548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_predict"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "score_samples"], [548, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[549, 2, 1, "", "apply"], [549, 3, 1, "", "base_estimator_"], [549, 2, 1, "", "decision_path"], [549, 3, 1, "", "feature_importances_"], [549, 2, 1, "", "fit"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "predict_log_proba"], [549, 2, 1, "", "predict_proba"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestRegressor": [[550, 2, 1, "", "apply"], [550, 3, 1, "", "base_estimator_"], [550, 2, 1, "", "decision_path"], [550, 3, 1, "", "feature_importances_"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomTreesEmbedding": [[551, 2, 1, "", "apply"], [551, 3, 1, "", "base_estimator_"], [551, 2, 1, "", "decision_path"], [551, 3, 1, "", "feature_importances_"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "fit_transform"], [551, 2, 1, "", "get_feature_names_out"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "set_output"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[552, 2, 1, "", "decision_function"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "fit_transform"], [552, 2, 1, "", "get_feature_names_out"], [552, 2, 1, "", "get_params"], [552, 3, 1, "", "n_features_in_"], [552, 3, 1, "", "named_estimators"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "predict_proba"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_output"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[553, 2, 1, "", "fit"], [553, 2, 1, "", "fit_transform"], [553, 2, 1, "", "get_feature_names_out"], [553, 2, 1, "", "get_params"], [553, 3, 1, "", "n_features_in_"], [553, 3, 1, "", "named_estimators"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_output"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[554, 2, 1, "", "fit"], [554, 2, 1, "", "fit_transform"], [554, 2, 1, "", "get_feature_names_out"], [554, 2, 1, "", "get_params"], [554, 3, 1, "", "n_features_in_"], [554, 3, 1, "", "named_estimators"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "predict_proba"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_output"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[555, 2, 1, "", "fit"], [555, 2, 1, "", "fit_transform"], [555, 2, 1, "", "get_feature_names_out"], [555, 2, 1, "", "get_params"], [555, 3, 1, "", "n_features_in_"], [555, 3, 1, "", "named_estimators"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_output"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "transform"]], "sklearn.exceptions": [[556, 1, 1, "", "ConvergenceWarning"], [557, 1, 1, "", "DataConversionWarning"], [558, 1, 1, "", "DataDimensionalityWarning"], [559, 1, 1, "", "EfficiencyWarning"], [560, 1, 1, "", "FitFailedWarning"], [561, 1, 1, "", "InconsistentVersionWarning"], [562, 1, 1, "", "NotFittedError"], [563, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[556, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[557, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[558, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[559, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[560, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[561, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[562, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[563, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[564, 0, 0, "-", "enable_halving_search_cv"], [565, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[566, 1, 1, "", "DictVectorizer"], [567, 1, 1, "", "FeatureHasher"], [395, 0, 0, "-", "image"], [395, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "inverse_transform"], [566, 2, 1, "", "restrict"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[568, 1, 1, "", "PatchExtractor"], [569, 4, 1, "", "extract_patches_2d"], [570, 4, 1, "", "grid_to_graph"], [571, 4, 1, "", "img_to_graph"], [572, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_params"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[573, 1, 1, "", "CountVectorizer"], [574, 1, 1, "", "HashingVectorizer"], [575, 1, 1, "", "TfidfTransformer"], [576, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[573, 2, 1, "", "build_analyzer"], [573, 2, 1, "", "build_preprocessor"], [573, 2, 1, "", "build_tokenizer"], [573, 2, 1, "", "decode"], [573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_params"], [573, 2, 1, "", "get_stop_words"], [573, 2, 1, "", "inverse_transform"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[574, 2, 1, "", "build_analyzer"], [574, 2, 1, "", "build_preprocessor"], [574, 2, 1, "", "build_tokenizer"], [574, 2, 1, "", "decode"], [574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_params"], [574, 2, 1, "", "get_stop_words"], [574, 2, 1, "", "partial_fit"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_params"], [575, 3, 1, "", "idf_"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[576, 2, 1, "", "build_analyzer"], [576, 2, 1, "", "build_preprocessor"], [576, 2, 1, "", "build_tokenizer"], [576, 2, 1, "", "decode"], [576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_feature_names_out"], [576, 2, 1, "", "get_params"], [576, 2, 1, "", "get_stop_words"], [576, 3, 1, "", "idf_"], [576, 2, 1, "", "inverse_transform"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "transform"]], "sklearn.feature_selection": [[577, 1, 1, "", "GenericUnivariateSelect"], [578, 1, 1, "", "RFE"], [579, 1, 1, "", "RFECV"], [580, 1, 1, "", "SelectFdr"], [581, 1, 1, "", "SelectFpr"], [582, 1, 1, "", "SelectFromModel"], [583, 1, 1, "", "SelectFwe"], [584, 1, 1, "", "SelectKBest"], [585, 1, 1, "", "SelectPercentile"], [586, 1, 1, "", "SelectorMixin"], [587, 1, 1, "", "SequentialFeatureSelector"], [588, 1, 1, "", "VarianceThreshold"], [589, 4, 1, "", "chi2"], [590, 4, 1, "", "f_classif"], [591, 4, 1, "", "f_regression"], [592, 4, 1, "", "mutual_info_classif"], [593, 4, 1, "", "mutual_info_regression"], [594, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_params"], [577, 2, 1, "", "get_support"], [577, 2, 1, "", "inverse_transform"], [577, 2, 1, "", "set_output"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[578, 3, 1, "", "classes_"], [578, 2, 1, "", "decision_function"], [578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_params"], [578, 2, 1, "", "get_support"], [578, 2, 1, "", "inverse_transform"], [578, 2, 1, "", "predict"], [578, 2, 1, "", "predict_log_proba"], [578, 2, 1, "", "predict_proba"], [578, 2, 1, "", "score"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[579, 3, 1, "", "classes_"], [579, 2, 1, "", "decision_function"], [579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "get_support"], [579, 2, 1, "", "inverse_transform"], [579, 2, 1, "", "predict"], [579, 2, 1, "", "predict_log_proba"], [579, 2, 1, "", "predict_proba"], [579, 2, 1, "", "score"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_feature_names_out"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "get_support"], [580, 2, 1, "", "inverse_transform"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "get_support"], [581, 2, 1, "", "inverse_transform"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_feature_names_out"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "get_support"], [582, 2, 1, "", "inverse_transform"], [582, 3, 1, "", "n_features_in_"], [582, 2, 1, "", "partial_fit"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "set_params"], [582, 3, 1, "", "threshold_"], [582, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_feature_names_out"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "get_support"], [583, 2, 1, "", "inverse_transform"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_feature_names_out"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "get_support"], [584, 2, 1, "", "inverse_transform"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_feature_names_out"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "get_support"], [585, 2, 1, "", "inverse_transform"], [585, 2, 1, "", "set_output"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_support"], [586, 2, 1, "", "inverse_transform"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_feature_names_out"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "get_support"], [587, 2, 1, "", "inverse_transform"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_support"], [588, 2, 1, "", "inverse_transform"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[595, 1, 1, "", "GaussianProcessClassifier"], [596, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "get_params"], [595, 3, 1, "", "kernel_"], [595, 2, 1, "", "log_marginal_likelihood"], [595, 2, 1, "", "predict"], [595, 2, 1, "", "predict_proba"], [595, 2, 1, "", "score"], [595, 2, 1, "", "set_params"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "log_marginal_likelihood"], [596, 2, 1, "", "predict"], [596, 2, 1, "", "sample_y"], [596, 2, 1, "", "score"], [596, 2, 1, "", "set_params"]], "sklearn.gaussian_process.kernels": [[597, 1, 1, "", "CompoundKernel"], [598, 1, 1, "", "ConstantKernel"], [599, 1, 1, "", "DotProduct"], [600, 1, 1, "", "ExpSineSquared"], [601, 1, 1, "", "Exponentiation"], [602, 1, 1, "", "Hyperparameter"], [603, 1, 1, "", "Kernel"], [604, 1, 1, "", "Matern"], [605, 1, 1, "", "PairwiseKernel"], [606, 1, 1, "", "Product"], [607, 1, 1, "", "RBF"], [608, 1, 1, "", "RationalQuadratic"], [609, 1, 1, "", "Sum"], [610, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[597, 2, 1, "", "__call__"], [597, 3, 1, "", "bounds"], [597, 2, 1, "", "clone_with_theta"], [597, 2, 1, "", "diag"], [597, 2, 1, "", "get_params"], [597, 3, 1, "", "hyperparameters"], [597, 2, 1, "", "is_stationary"], [597, 3, 1, "", "n_dims"], [597, 3, 1, "", "requires_vector_input"], [597, 2, 1, "", "set_params"], [597, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[598, 2, 1, "", "__call__"], [598, 3, 1, "", "bounds"], [598, 2, 1, "", "clone_with_theta"], [598, 2, 1, "", "diag"], [598, 2, 1, "", "get_params"], [598, 3, 1, "", "hyperparameters"], [598, 2, 1, "", "is_stationary"], [598, 3, 1, "", "n_dims"], [598, 3, 1, "", "requires_vector_input"], [598, 2, 1, "", "set_params"], [598, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[599, 2, 1, "", "__call__"], [599, 3, 1, "", "bounds"], [599, 2, 1, "", "clone_with_theta"], [599, 2, 1, "", "diag"], [599, 2, 1, "", "get_params"], [599, 3, 1, "", "hyperparameters"], [599, 2, 1, "", "is_stationary"], [599, 3, 1, "", "n_dims"], [599, 3, 1, "", "requires_vector_input"], [599, 2, 1, "", "set_params"], [599, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[600, 2, 1, "", "__call__"], [600, 3, 1, "", "bounds"], [600, 2, 1, "", "clone_with_theta"], [600, 2, 1, "", "diag"], [600, 2, 1, "", "get_params"], [600, 3, 1, "", "hyperparameter_length_scale"], [600, 3, 1, "", "hyperparameters"], [600, 2, 1, "", "is_stationary"], [600, 3, 1, "", "n_dims"], [600, 3, 1, "", "requires_vector_input"], [600, 2, 1, "", "set_params"], [600, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[601, 2, 1, "", "__call__"], [601, 3, 1, "", "bounds"], [601, 2, 1, "", "clone_with_theta"], [601, 2, 1, "", "diag"], [601, 2, 1, "", "get_params"], [601, 3, 1, "", "hyperparameters"], [601, 2, 1, "", "is_stationary"], [601, 3, 1, "", "n_dims"], [601, 3, 1, "", "requires_vector_input"], [601, 2, 1, "", "set_params"], [601, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[602, 2, 1, "", "__call__"], [602, 5, 1, "", "bounds"], [602, 2, 1, "", "count"], [602, 5, 1, "", "fixed"], [602, 2, 1, "", "index"], [602, 5, 1, "", "n_elements"], [602, 5, 1, "", "name"], [602, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[603, 2, 1, "", "__call__"], [603, 3, 1, "", "bounds"], [603, 2, 1, "", "clone_with_theta"], [603, 2, 1, "", "diag"], [603, 2, 1, "", "get_params"], [603, 3, 1, "", "hyperparameters"], [603, 2, 1, "", "is_stationary"], [603, 3, 1, "", "n_dims"], [603, 3, 1, "", "requires_vector_input"], [603, 2, 1, "", "set_params"], [603, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[604, 2, 1, "", "__call__"], [604, 3, 1, "", "bounds"], [604, 2, 1, "", "clone_with_theta"], [604, 2, 1, "", "diag"], [604, 2, 1, "", "get_params"], [604, 3, 1, "", "hyperparameters"], [604, 2, 1, "", "is_stationary"], [604, 3, 1, "", "n_dims"], [604, 3, 1, "", "requires_vector_input"], [604, 2, 1, "", "set_params"], [604, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[605, 2, 1, "", "__call__"], [605, 3, 1, "", "bounds"], [605, 2, 1, "", "clone_with_theta"], [605, 2, 1, "", "diag"], [605, 2, 1, "", "get_params"], [605, 3, 1, "", "hyperparameters"], [605, 2, 1, "", "is_stationary"], [605, 3, 1, "", "n_dims"], [605, 3, 1, "", "requires_vector_input"], [605, 2, 1, "", "set_params"], [605, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[606, 2, 1, "", "__call__"], [606, 3, 1, "", "bounds"], [606, 2, 1, "", "clone_with_theta"], [606, 2, 1, "", "diag"], [606, 2, 1, "", "get_params"], [606, 3, 1, "", "hyperparameters"], [606, 2, 1, "", "is_stationary"], [606, 3, 1, "", "n_dims"], [606, 3, 1, "", "requires_vector_input"], [606, 2, 1, "", "set_params"], [606, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[607, 2, 1, "", "__call__"], [607, 3, 1, "", "bounds"], [607, 2, 1, "", "clone_with_theta"], [607, 2, 1, "", "diag"], [607, 2, 1, "", "get_params"], [607, 3, 1, "", "hyperparameters"], [607, 2, 1, "", "is_stationary"], [607, 3, 1, "", "n_dims"], [607, 3, 1, "", "requires_vector_input"], [607, 2, 1, "", "set_params"], [607, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[608, 2, 1, "", "__call__"], [608, 3, 1, "", "bounds"], [608, 2, 1, "", "clone_with_theta"], [608, 2, 1, "", "diag"], [608, 2, 1, "", "get_params"], [608, 3, 1, "", "hyperparameters"], [608, 2, 1, "", "is_stationary"], [608, 3, 1, "", "n_dims"], [608, 3, 1, "", "requires_vector_input"], [608, 2, 1, "", "set_params"], [608, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[609, 2, 1, "", "__call__"], [609, 3, 1, "", "bounds"], [609, 2, 1, "", "clone_with_theta"], [609, 2, 1, "", "diag"], [609, 2, 1, "", "get_params"], [609, 3, 1, "", "hyperparameters"], [609, 2, 1, "", "is_stationary"], [609, 3, 1, "", "n_dims"], [609, 3, 1, "", "requires_vector_input"], [609, 2, 1, "", "set_params"], [609, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[610, 2, 1, "", "__call__"], [610, 3, 1, "", "bounds"], [610, 2, 1, "", "clone_with_theta"], [610, 2, 1, "", "diag"], [610, 2, 1, "", "get_params"], [610, 3, 1, "", "hyperparameters"], [610, 2, 1, "", "is_stationary"], [610, 3, 1, "", "n_dims"], [610, 3, 1, "", "requires_vector_input"], [610, 2, 1, "", "set_params"], [610, 3, 1, "", "theta"]], "sklearn.impute": [[612, 1, 1, "", "IterativeImputer"], [613, 1, 1, "", "KNNImputer"], [614, 1, 1, "", "MissingIndicator"], [615, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[612, 2, 1, "", "fit"], [612, 2, 1, "", "fit_transform"], [612, 2, 1, "", "get_feature_names_out"], [612, 2, 1, "", "get_params"], [612, 2, 1, "", "set_output"], [612, 2, 1, "", "set_params"], [612, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[613, 2, 1, "", "fit"], [613, 2, 1, "", "fit_transform"], [613, 2, 1, "", "get_feature_names_out"], [613, 2, 1, "", "get_params"], [613, 2, 1, "", "set_output"], [613, 2, 1, "", "set_params"], [613, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[614, 2, 1, "", "fit"], [614, 2, 1, "", "fit_transform"], [614, 2, 1, "", "get_feature_names_out"], [614, 2, 1, "", "get_params"], [614, 2, 1, "", "set_output"], [614, 2, 1, "", "set_params"], [614, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[615, 2, 1, "", "fit"], [615, 2, 1, "", "fit_transform"], [615, 2, 1, "", "get_feature_names_out"], [615, 2, 1, "", "get_params"], [615, 2, 1, "", "inverse_transform"], [615, 2, 1, "", "set_output"], [615, 2, 1, "", "set_params"], [615, 2, 1, "", "transform"]], "sklearn.inspection": [[616, 1, 1, "", "DecisionBoundaryDisplay"], [617, 1, 1, "", "PartialDependenceDisplay"], [618, 4, 1, "", "partial_dependence"], [619, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[616, 2, 1, "", "from_estimator"], [616, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[617, 2, 1, "", "from_estimator"], [617, 2, 1, "", "plot"]], "sklearn.isotonic": [[620, 1, 1, "", "IsotonicRegression"], [621, 4, 1, "", "check_increasing"], [622, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "fit_transform"], [620, 2, 1, "", "get_feature_names_out"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "predict"], [620, 2, 1, "", "score"], [620, 2, 1, "", "set_output"], [620, 2, 1, "", "set_params"], [620, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[623, 1, 1, "", "AdditiveChi2Sampler"], [624, 1, 1, "", "Nystroem"], [625, 1, 1, "", "PolynomialCountSketch"], [626, 1, 1, "", "RBFSampler"], [627, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[623, 2, 1, "", "fit"], [623, 2, 1, "", "fit_transform"], [623, 2, 1, "", "get_feature_names_out"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "set_output"], [623, 2, 1, "", "set_params"], [623, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "fit_transform"], [624, 2, 1, "", "get_feature_names_out"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "set_output"], [624, 2, 1, "", "set_params"], [624, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "fit_transform"], [625, 2, 1, "", "get_feature_names_out"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "set_output"], [625, 2, 1, "", "set_params"], [625, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "fit_transform"], [626, 2, 1, "", "get_feature_names_out"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "set_output"], [626, 2, 1, "", "set_params"], [626, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "fit_transform"], [627, 2, 1, "", "get_feature_names_out"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "set_output"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[628, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "predict"], [628, 2, 1, "", "score"], [628, 2, 1, "", "set_params"]], "sklearn.linear_model": [[629, 1, 1, "", "ARDRegression"], [630, 1, 1, "", "BayesianRidge"], [631, 1, 1, "", "ElasticNet"], [632, 1, 1, "", "ElasticNetCV"], [633, 1, 1, "", "GammaRegressor"], [634, 1, 1, "", "HuberRegressor"], [635, 1, 1, "", "Lars"], [636, 1, 1, "", "LarsCV"], [637, 1, 1, "", "Lasso"], [638, 1, 1, "", "LassoCV"], [639, 1, 1, "", "LassoLars"], [640, 1, 1, "", "LassoLarsCV"], [641, 1, 1, "", "LassoLarsIC"], [642, 1, 1, "", "LinearRegression"], [643, 1, 1, "", "LogisticRegression"], [644, 1, 1, "", "LogisticRegressionCV"], [645, 1, 1, "", "MultiTaskElasticNet"], [646, 1, 1, "", "MultiTaskElasticNetCV"], [647, 1, 1, "", "MultiTaskLasso"], [648, 1, 1, "", "MultiTaskLassoCV"], [649, 1, 1, "", "OrthogonalMatchingPursuit"], [650, 1, 1, "", "OrthogonalMatchingPursuitCV"], [651, 1, 1, "", "PassiveAggressiveClassifier"], [652, 4, 1, "", "PassiveAggressiveRegressor"], [653, 1, 1, "", "Perceptron"], [654, 1, 1, "", "PoissonRegressor"], [655, 1, 1, "", "QuantileRegressor"], [656, 1, 1, "", "RANSACRegressor"], [657, 1, 1, "", "Ridge"], [658, 1, 1, "", "RidgeCV"], [659, 1, 1, "", "RidgeClassifier"], [660, 1, 1, "", "RidgeClassifierCV"], [661, 1, 1, "", "SGDClassifier"], [662, 1, 1, "", "SGDOneClassSVM"], [663, 1, 1, "", "SGDRegressor"], [664, 1, 1, "", "TheilSenRegressor"], [665, 1, 1, "", "TweedieRegressor"], [666, 4, 1, "", "enet_path"], [667, 4, 1, "", "lars_path"], [668, 4, 1, "", "lars_path_gram"], [669, 4, 1, "", "lasso_path"], [670, 4, 1, "", "orthogonal_mp"], [671, 4, 1, "", "orthogonal_mp_gram"], [672, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_params"]], "sklearn.linear_model.BayesianRidge": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "predict"], [630, 2, 1, "", "score"], [630, 2, 1, "", "set_params"]], "sklearn.linear_model.ElasticNet": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "path"], [631, 2, 1, "", "predict"], [631, 2, 1, "", "score"], [631, 2, 1, "", "set_params"], [631, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "path"], [632, 2, 1, "", "predict"], [632, 2, 1, "", "score"], [632, 2, 1, "", "set_params"]], "sklearn.linear_model.GammaRegressor": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_params"]], "sklearn.linear_model.HuberRegressor": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_params"]], "sklearn.linear_model.Lars": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_params"]], "sklearn.linear_model.LarsCV": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_params"]], "sklearn.linear_model.Lasso": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "path"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_params"], [637, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "path"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLars": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsCV": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsIC": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_params"]], "sklearn.linear_model.LinearRegression": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_params"]], "sklearn.linear_model.LogisticRegression": [[643, 2, 1, "", "decision_function"], [643, 2, 1, "", "densify"], [643, 2, 1, "", "fit"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "predict_log_proba"], [643, 2, 1, "", "predict_proba"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[644, 2, 1, "", "decision_function"], [644, 2, 1, "", "densify"], [644, 2, 1, "", "fit"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "predict_log_proba"], [644, 2, 1, "", "predict_proba"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "path"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_params"], [645, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "path"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_params"]], "sklearn.linear_model.MultiTaskLasso": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "path"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_params"], [647, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "path"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_params"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[651, 2, 1, "", "decision_function"], [651, 2, 1, "", "densify"], [651, 2, 1, "", "fit"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "partial_fit"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[653, 2, 1, "", "decision_function"], [653, 2, 1, "", "densify"], [653, 2, 1, "", "fit"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "partial_fit"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_params"]], "sklearn.linear_model.QuantileRegressor": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_params"]], "sklearn.linear_model.RANSACRegressor": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeCV": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifier": [[659, 3, 1, "", "classes_"], [659, 2, 1, "", "decision_function"], [659, 2, 1, "", "fit"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifierCV": [[660, 3, 1, "", "classes_"], [660, 2, 1, "", "decision_function"], [660, 2, 1, "", "fit"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_params"]], "sklearn.linear_model.SGDClassifier": [[661, 2, 1, "", "decision_function"], [661, 2, 1, "", "densify"], [661, 2, 1, "", "fit"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "partial_fit"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "predict_log_proba"], [661, 2, 1, "", "predict_proba"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[662, 2, 1, "", "decision_function"], [662, 2, 1, "", "densify"], [662, 2, 1, "", "fit"], [662, 2, 1, "", "fit_predict"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "partial_fit"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score_samples"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[663, 2, 1, "", "densify"], [663, 2, 1, "", "fit"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "partial_fit"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_params"]], "sklearn.linear_model.TweedieRegressor": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_params"]], "sklearn.manifold": [[673, 1, 1, "", "Isomap"], [674, 1, 1, "", "LocallyLinearEmbedding"], [675, 1, 1, "", "MDS"], [676, 1, 1, "", "SpectralEmbedding"], [677, 1, 1, "", "TSNE"], [678, 4, 1, "", "locally_linear_embedding"], [679, 4, 1, "", "smacof"], [680, 4, 1, "", "spectral_embedding"], [681, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "fit_transform"], [673, 2, 1, "", "get_feature_names_out"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "reconstruction_error"], [673, 2, 1, "", "set_output"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "fit_transform"], [674, 2, 1, "", "get_feature_names_out"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "set_output"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[675, 2, 1, "", "fit"], [675, 2, 1, "", "fit_transform"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[676, 2, 1, "", "fit"], [676, 2, 1, "", "fit_transform"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "fit_transform"], [677, 2, 1, "", "get_feature_names_out"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "set_output"], [677, 2, 1, "", "set_params"]], "sklearn.metrics": [[682, 1, 1, "", "ConfusionMatrixDisplay"], [683, 1, 1, "", "DetCurveDisplay"], [684, 1, 1, "", "DistanceMetric"], [685, 1, 1, "", "PrecisionRecallDisplay"], [686, 1, 1, "", "PredictionErrorDisplay"], [687, 1, 1, "", "RocCurveDisplay"], [688, 4, 1, "", "accuracy_score"], [689, 4, 1, "", "adjusted_mutual_info_score"], [690, 4, 1, "", "adjusted_rand_score"], [691, 4, 1, "", "auc"], [692, 4, 1, "", "average_precision_score"], [693, 4, 1, "", "balanced_accuracy_score"], [694, 4, 1, "", "brier_score_loss"], [695, 4, 1, "", "calinski_harabasz_score"], [696, 4, 1, "", "check_scoring"], [697, 4, 1, "", "class_likelihood_ratios"], [698, 4, 1, "", "classification_report"], [395, 0, 0, "-", "cluster"], [701, 4, 1, "", "cohen_kappa_score"], [702, 4, 1, "", "completeness_score"], [703, 4, 1, "", "confusion_matrix"], [704, 4, 1, "", "consensus_score"], [705, 4, 1, "", "coverage_error"], [706, 4, 1, "", "d2_absolute_error_score"], [707, 4, 1, "", "d2_pinball_score"], [708, 4, 1, "", "d2_tweedie_score"], [709, 4, 1, "", "davies_bouldin_score"], [710, 4, 1, "", "dcg_score"], [711, 4, 1, "", "det_curve"], [712, 4, 1, "", "explained_variance_score"], [713, 4, 1, "", "f1_score"], [714, 4, 1, "", "fbeta_score"], [715, 4, 1, "", "fowlkes_mallows_score"], [716, 4, 1, "", "get_scorer"], [717, 4, 1, "", "get_scorer_names"], [718, 4, 1, "", "hamming_loss"], [719, 4, 1, "", "hinge_loss"], [720, 4, 1, "", "homogeneity_completeness_v_measure"], [721, 4, 1, "", "homogeneity_score"], [722, 4, 1, "", "jaccard_score"], [723, 4, 1, "", "label_ranking_average_precision_score"], [724, 4, 1, "", "label_ranking_loss"], [725, 4, 1, "", "log_loss"], [726, 4, 1, "", "make_scorer"], [727, 4, 1, "", "matthews_corrcoef"], [728, 4, 1, "", "max_error"], [729, 4, 1, "", "mean_absolute_error"], [730, 4, 1, "", "mean_absolute_percentage_error"], [731, 4, 1, "", "mean_gamma_deviance"], [732, 4, 1, "", "mean_pinball_loss"], [733, 4, 1, "", "mean_poisson_deviance"], [734, 4, 1, "", "mean_squared_error"], [735, 4, 1, "", "mean_squared_log_error"], [736, 4, 1, "", "mean_tweedie_deviance"], [737, 4, 1, "", "median_absolute_error"], [738, 4, 1, "", "multilabel_confusion_matrix"], [739, 4, 1, "", "mutual_info_score"], [740, 4, 1, "", "ndcg_score"], [741, 4, 1, "", "normalized_mutual_info_score"], [395, 0, 0, "-", "pairwise"], [762, 4, 1, "", "pairwise_distances"], [763, 4, 1, "", "pairwise_distances_argmin"], [764, 4, 1, "", "pairwise_distances_argmin_min"], [765, 4, 1, "", "pairwise_distances_chunked"], [766, 4, 1, "", "precision_recall_curve"], [767, 4, 1, "", "precision_recall_fscore_support"], [768, 4, 1, "", "precision_score"], [769, 4, 1, "", "r2_score"], [770, 4, 1, "", "rand_score"], [771, 4, 1, "", "recall_score"], [772, 4, 1, "", "roc_auc_score"], [773, 4, 1, "", "roc_curve"], [774, 4, 1, "", "silhouette_samples"], [775, 4, 1, "", "silhouette_score"], [776, 4, 1, "", "top_k_accuracy_score"], [777, 4, 1, "", "v_measure_score"], [778, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[682, 2, 1, "", "from_estimator"], [682, 2, 1, "", "from_predictions"], [682, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[683, 2, 1, "", "from_estimator"], [683, 2, 1, "", "from_predictions"], [683, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[684, 2, 1, "", "dist_to_rdist"], [684, 2, 1, "", "get_metric"], [684, 2, 1, "", "pairwise"], [684, 2, 1, "", "rdist_to_dist"]], "sklearn.metrics.PrecisionRecallDisplay": [[685, 2, 1, "", "from_estimator"], [685, 2, 1, "", "from_predictions"], [685, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[686, 2, 1, "", "from_estimator"], [686, 2, 1, "", "from_predictions"], [686, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[687, 2, 1, "", "from_estimator"], [687, 2, 1, "", "from_predictions"], [687, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[699, 4, 1, "", "contingency_matrix"], [700, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[742, 4, 1, "", "additive_chi2_kernel"], [743, 4, 1, "", "chi2_kernel"], [744, 4, 1, "", "cosine_distances"], [745, 4, 1, "", "cosine_similarity"], [746, 4, 1, "", "distance_metrics"], [747, 4, 1, "", "euclidean_distances"], [748, 4, 1, "", "haversine_distances"], [749, 4, 1, "", "kernel_metrics"], [750, 4, 1, "", "laplacian_kernel"], [751, 4, 1, "", "linear_kernel"], [752, 4, 1, "", "manhattan_distances"], [753, 4, 1, "", "nan_euclidean_distances"], [754, 4, 1, "", "paired_cosine_distances"], [755, 4, 1, "", "paired_distances"], [756, 4, 1, "", "paired_euclidean_distances"], [757, 4, 1, "", "paired_manhattan_distances"], [758, 4, 1, "", "pairwise_kernels"], [759, 4, 1, "", "polynomial_kernel"], [760, 4, 1, "", "rbf_kernel"], [761, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[779, 1, 1, "", "BayesianGaussianMixture"], [780, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[779, 2, 1, "", "fit"], [779, 2, 1, "", "fit_predict"], [779, 2, 1, "", "get_params"], [779, 2, 1, "", "predict"], [779, 2, 1, "", "predict_proba"], [779, 2, 1, "", "sample"], [779, 2, 1, "", "score"], [779, 2, 1, "", "score_samples"], [779, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[780, 2, 1, "", "aic"], [780, 2, 1, "", "bic"], [780, 2, 1, "", "fit"], [780, 2, 1, "", "fit_predict"], [780, 2, 1, "", "get_params"], [780, 2, 1, "", "predict"], [780, 2, 1, "", "predict_proba"], [780, 2, 1, "", "sample"], [780, 2, 1, "", "score"], [780, 2, 1, "", "score_samples"], [780, 2, 1, "", "set_params"]], "sklearn.model_selection": [[781, 1, 1, "", "GridSearchCV"], [782, 1, 1, "", "GroupKFold"], [783, 1, 1, "", "GroupShuffleSplit"], [784, 1, 1, "", "HalvingGridSearchCV"], [785, 1, 1, "", "HalvingRandomSearchCV"], [786, 1, 1, "", "KFold"], [787, 1, 1, "", "LearningCurveDisplay"], [788, 1, 1, "", "LeaveOneGroupOut"], [789, 1, 1, "", "LeaveOneOut"], [790, 1, 1, "", "LeavePGroupsOut"], [791, 1, 1, "", "LeavePOut"], [792, 1, 1, "", "ParameterGrid"], [793, 1, 1, "", "ParameterSampler"], [794, 1, 1, "", "PredefinedSplit"], [795, 1, 1, "", "RandomizedSearchCV"], [796, 1, 1, "", "RepeatedKFold"], [797, 1, 1, "", "RepeatedStratifiedKFold"], [798, 1, 1, "", "ShuffleSplit"], [799, 1, 1, "", "StratifiedGroupKFold"], [800, 1, 1, "", "StratifiedKFold"], [801, 1, 1, "", "StratifiedShuffleSplit"], [802, 1, 1, "", "TimeSeriesSplit"], [803, 4, 1, "", "check_cv"], [804, 4, 1, "", "cross_val_predict"], [805, 4, 1, "", "cross_val_score"], [806, 4, 1, "", "cross_validate"], [807, 4, 1, "", "learning_curve"], [808, 4, 1, "", "permutation_test_score"], [809, 4, 1, "", "train_test_split"], [810, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[781, 3, 1, "", "classes_"], [781, 2, 1, "", "decision_function"], [781, 2, 1, "", "fit"], [781, 2, 1, "", "get_params"], [781, 2, 1, "", "inverse_transform"], [781, 3, 1, "", "n_features_in_"], [781, 2, 1, "", "predict"], [781, 2, 1, "", "predict_log_proba"], [781, 2, 1, "", "predict_proba"], [781, 2, 1, "", "score"], [781, 2, 1, "", "score_samples"], [781, 2, 1, "", "set_params"], [781, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[782, 2, 1, "", "get_n_splits"], [782, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[783, 2, 1, "", "get_n_splits"], [783, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[784, 3, 1, "", "classes_"], [784, 2, 1, "", "decision_function"], [784, 2, 1, "", "fit"], [784, 2, 1, "", "get_params"], [784, 2, 1, "", "inverse_transform"], [784, 3, 1, "", "n_features_in_"], [784, 2, 1, "", "predict"], [784, 2, 1, "", "predict_log_proba"], [784, 2, 1, "", "predict_proba"], [784, 2, 1, "", "score"], [784, 2, 1, "", "score_samples"], [784, 2, 1, "", "set_params"], [784, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[785, 3, 1, "", "classes_"], [785, 2, 1, "", "decision_function"], [785, 2, 1, "", "fit"], [785, 2, 1, "", "get_params"], [785, 2, 1, "", "inverse_transform"], [785, 3, 1, "", "n_features_in_"], [785, 2, 1, "", "predict"], [785, 2, 1, "", "predict_log_proba"], [785, 2, 1, "", "predict_proba"], [785, 2, 1, "", "score"], [785, 2, 1, "", "score_samples"], [785, 2, 1, "", "set_params"], [785, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[786, 2, 1, "", "get_n_splits"], [786, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[787, 2, 1, "", "from_estimator"], [787, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[788, 2, 1, "", "get_n_splits"], [788, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[789, 2, 1, "", "get_n_splits"], [789, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[790, 2, 1, "", "get_n_splits"], [790, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[791, 2, 1, "", "get_n_splits"], [791, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[794, 2, 1, "", "get_n_splits"], [794, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[795, 3, 1, "", "classes_"], [795, 2, 1, "", "decision_function"], [795, 2, 1, "", "fit"], [795, 2, 1, "", "get_params"], [795, 2, 1, "", "inverse_transform"], [795, 3, 1, "", "n_features_in_"], [795, 2, 1, "", "predict"], [795, 2, 1, "", "predict_log_proba"], [795, 2, 1, "", "predict_proba"], [795, 2, 1, "", "score"], [795, 2, 1, "", "score_samples"], [795, 2, 1, "", "set_params"], [795, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[796, 2, 1, "", "get_n_splits"], [796, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[797, 2, 1, "", "get_n_splits"], [797, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[798, 2, 1, "", "get_n_splits"], [798, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[799, 2, 1, "", "get_n_splits"], [799, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[800, 2, 1, "", "get_n_splits"], [800, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[801, 2, 1, "", "get_n_splits"], [801, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "split"]], "sklearn.multiclass": [[811, 1, 1, "", "OneVsOneClassifier"], [812, 1, 1, "", "OneVsRestClassifier"], [813, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[811, 2, 1, "", "decision_function"], [811, 2, 1, "", "fit"], [811, 2, 1, "", "get_params"], [811, 3, 1, "", "n_classes_"], [811, 2, 1, "", "partial_fit"], [811, 2, 1, "", "predict"], [811, 2, 1, "", "score"], [811, 2, 1, "", "set_params"]], "sklearn.multiclass.OneVsRestClassifier": [[812, 2, 1, "", "decision_function"], [812, 2, 1, "", "fit"], [812, 2, 1, "", "get_params"], [812, 3, 1, "", "multilabel_"], [812, 3, 1, "", "n_classes_"], [812, 2, 1, "", "partial_fit"], [812, 2, 1, "", "predict"], [812, 2, 1, "", "predict_proba"], [812, 2, 1, "", "score"], [812, 2, 1, "", "set_params"]], "sklearn.multiclass.OutputCodeClassifier": [[813, 2, 1, "", "fit"], [813, 2, 1, "", "get_params"], [813, 2, 1, "", "predict"], [813, 2, 1, "", "score"], [813, 2, 1, "", "set_params"]], "sklearn.multioutput": [[814, 1, 1, "", "ClassifierChain"], [815, 1, 1, "", "MultiOutputClassifier"], [816, 1, 1, "", "MultiOutputRegressor"], [817, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[814, 2, 1, "", "decision_function"], [814, 2, 1, "", "fit"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "predict"], [814, 2, 1, "", "predict_proba"], [814, 2, 1, "", "score"], [814, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputClassifier": [[815, 2, 1, "", "fit"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "partial_fit"], [815, 2, 1, "", "predict"], [815, 2, 1, "", "predict_proba"], [815, 2, 1, "", "score"], [815, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputRegressor": [[816, 2, 1, "", "fit"], [816, 2, 1, "", "get_params"], [816, 2, 1, "", "partial_fit"], [816, 2, 1, "", "predict"], [816, 2, 1, "", "score"], [816, 2, 1, "", "set_params"]], "sklearn.multioutput.RegressorChain": [[817, 2, 1, "", "fit"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "predict"], [817, 2, 1, "", "score"], [817, 2, 1, "", "set_params"]], "sklearn.naive_bayes": [[818, 1, 1, "", "BernoulliNB"], [819, 1, 1, "", "CategoricalNB"], [820, 1, 1, "", "ComplementNB"], [821, 1, 1, "", "GaussianNB"], [822, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[818, 2, 1, "", "fit"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "partial_fit"], [818, 2, 1, "", "predict"], [818, 2, 1, "", "predict_joint_log_proba"], [818, 2, 1, "", "predict_log_proba"], [818, 2, 1, "", "predict_proba"], [818, 2, 1, "", "score"], [818, 2, 1, "", "set_params"]], "sklearn.naive_bayes.CategoricalNB": [[819, 2, 1, "", "fit"], [819, 2, 1, "", "get_params"], [819, 2, 1, "", "partial_fit"], [819, 2, 1, "", "predict"], [819, 2, 1, "", "predict_joint_log_proba"], [819, 2, 1, "", "predict_log_proba"], [819, 2, 1, "", "predict_proba"], [819, 2, 1, "", "score"], [819, 2, 1, "", "set_params"]], "sklearn.naive_bayes.ComplementNB": [[820, 2, 1, "", "fit"], [820, 2, 1, "", "get_params"], [820, 2, 1, "", "partial_fit"], [820, 2, 1, "", "predict"], [820, 2, 1, "", "predict_joint_log_proba"], [820, 2, 1, "", "predict_log_proba"], [820, 2, 1, "", "predict_proba"], [820, 2, 1, "", "score"], [820, 2, 1, "", "set_params"]], "sklearn.naive_bayes.GaussianNB": [[821, 2, 1, "", "fit"], [821, 2, 1, "", "get_params"], [821, 2, 1, "", "partial_fit"], [821, 2, 1, "", "predict"], [821, 2, 1, "", "predict_joint_log_proba"], [821, 2, 1, "", "predict_log_proba"], [821, 2, 1, "", "predict_proba"], [821, 2, 1, "", "score"], [821, 2, 1, "", "set_params"]], "sklearn.naive_bayes.MultinomialNB": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "partial_fit"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "predict_joint_log_proba"], [822, 2, 1, "", "predict_log_proba"], [822, 2, 1, "", "predict_proba"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_params"]], "sklearn.neighbors": [[823, 1, 1, "", "BallTree"], [824, 1, 1, "", "KDTree"], [825, 1, 1, "", "KNeighborsClassifier"], [826, 1, 1, "", "KNeighborsRegressor"], [827, 1, 1, "", "KNeighborsTransformer"], [828, 1, 1, "", "KernelDensity"], [829, 1, 1, "", "LocalOutlierFactor"], [830, 1, 1, "", "NearestCentroid"], [831, 1, 1, "", "NearestNeighbors"], [832, 1, 1, "", "NeighborhoodComponentsAnalysis"], [833, 1, 1, "", "RadiusNeighborsClassifier"], [834, 1, 1, "", "RadiusNeighborsRegressor"], [835, 1, 1, "", "RadiusNeighborsTransformer"], [836, 4, 1, "", "kneighbors_graph"], [837, 4, 1, "", "radius_neighbors_graph"], [838, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[823, 2, 1, "", "get_arrays"], [823, 2, 1, "", "get_n_calls"], [823, 2, 1, "", "get_tree_stats"], [823, 2, 1, "", "kernel_density"], [823, 2, 1, "", "query"], [823, 2, 1, "", "query_radius"], [823, 2, 1, "", "reset_n_calls"], [823, 2, 1, "", "two_point_correlation"], [823, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KDTree": [[824, 2, 1, "", "get_arrays"], [824, 2, 1, "", "get_n_calls"], [824, 2, 1, "", "get_tree_stats"], [824, 2, 1, "", "kernel_density"], [824, 2, 1, "", "query"], [824, 2, 1, "", "query_radius"], [824, 2, 1, "", "reset_n_calls"], [824, 2, 1, "", "two_point_correlation"], [824, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KNeighborsClassifier": [[825, 2, 1, "", "fit"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "kneighbors"], [825, 2, 1, "", "kneighbors_graph"], [825, 2, 1, "", "predict"], [825, 2, 1, "", "predict_proba"], [825, 2, 1, "", "score"], [825, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsRegressor": [[826, 2, 1, "", "fit"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "kneighbors"], [826, 2, 1, "", "kneighbors_graph"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsTransformer": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "fit_transform"], [827, 2, 1, "", "get_feature_names_out"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "kneighbors"], [827, 2, 1, "", "kneighbors_graph"], [827, 2, 1, "", "set_output"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "sample"], [828, 2, 1, "", "score"], [828, 2, 1, "", "score_samples"], [828, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[829, 2, 1, "", "decision_function"], [829, 2, 1, "", "fit"], [829, 2, 1, "", "fit_predict"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "kneighbors"], [829, 2, 1, "", "kneighbors_graph"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "score_samples"], [829, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestNeighbors": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "kneighbors"], [831, 2, 1, "", "kneighbors_graph"], [831, 2, 1, "", "radius_neighbors"], [831, 2, 1, "", "radius_neighbors_graph"], [831, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "fit_transform"], [832, 2, 1, "", "get_feature_names_out"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "set_output"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "predict_proba"], [833, 2, 1, "", "radius_neighbors"], [833, 2, 1, "", "radius_neighbors_graph"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "radius_neighbors"], [834, 2, 1, "", "radius_neighbors_graph"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "fit_transform"], [835, 2, 1, "", "get_feature_names_out"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "radius_neighbors"], [835, 2, 1, "", "radius_neighbors_graph"], [835, 2, 1, "", "set_output"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "transform"]], "sklearn.neural_network": [[839, 1, 1, "", "BernoulliRBM"], [840, 1, 1, "", "MLPClassifier"], [841, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "fit_transform"], [839, 2, 1, "", "get_feature_names_out"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "gibbs"], [839, 2, 1, "", "partial_fit"], [839, 2, 1, "", "score_samples"], [839, 2, 1, "", "set_output"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_log_proba"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_params"]], "sklearn.neural_network.MLPRegressor": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_params"]], "sklearn.pipeline": [[842, 1, 1, "", "FeatureUnion"], [843, 1, 1, "", "Pipeline"], [844, 4, 1, "", "make_pipeline"], [845, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[842, 3, 1, "", "feature_names_in_"], [842, 2, 1, "", "fit"], [842, 2, 1, "", "fit_transform"], [842, 2, 1, "", "get_feature_names_out"], [842, 2, 1, "", "get_params"], [842, 3, 1, "", "n_features_in_"], [842, 2, 1, "", "set_output"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[843, 3, 1, "", "classes_"], [843, 2, 1, "", "decision_function"], [843, 3, 1, "", "feature_names_in_"], [843, 2, 1, "", "fit"], [843, 2, 1, "", "fit_predict"], [843, 2, 1, "", "fit_transform"], [843, 2, 1, "", "get_feature_names_out"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "inverse_transform"], [843, 3, 1, "", "n_features_in_"], [843, 3, 1, "", "named_steps"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_log_proba"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "score_samples"], [843, 2, 1, "", "set_output"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "transform"]], "sklearn.preprocessing": [[846, 1, 1, "", "Binarizer"], [847, 1, 1, "", "FunctionTransformer"], [848, 1, 1, "", "KBinsDiscretizer"], [849, 1, 1, "", "KernelCenterer"], [850, 1, 1, "", "LabelBinarizer"], [851, 1, 1, "", "LabelEncoder"], [852, 1, 1, "", "MaxAbsScaler"], [853, 1, 1, "", "MinMaxScaler"], [854, 1, 1, "", "MultiLabelBinarizer"], [855, 1, 1, "", "Normalizer"], [856, 1, 1, "", "OneHotEncoder"], [857, 1, 1, "", "OrdinalEncoder"], [858, 1, 1, "", "PolynomialFeatures"], [859, 1, 1, "", "PowerTransformer"], [860, 1, 1, "", "QuantileTransformer"], [861, 1, 1, "", "RobustScaler"], [862, 1, 1, "", "SplineTransformer"], [863, 1, 1, "", "StandardScaler"], [864, 1, 1, "", "TargetEncoder"], [865, 4, 1, "", "add_dummy_feature"], [866, 4, 1, "", "binarize"], [867, 4, 1, "", "label_binarize"], [868, 4, 1, "", "maxabs_scale"], [869, 4, 1, "", "minmax_scale"], [870, 4, 1, "", "normalize"], [871, 4, 1, "", "power_transform"], [872, 4, 1, "", "quantile_transform"], [873, 4, 1, "", "robust_scale"], [874, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "fit_transform"], [846, 2, 1, "", "get_feature_names_out"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "set_output"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "fit_transform"], [847, 2, 1, "", "get_feature_names_out"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "inverse_transform"], [847, 2, 1, "", "set_output"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "inverse_transform"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_transform"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "inverse_transform"], [850, 2, 1, "", "set_output"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "inverse_transform"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_feature_names_out"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "inverse_transform"], [852, 2, 1, "", "partial_fit"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "inverse_transform"], [853, 2, 1, "", "partial_fit"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_transform"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "inverse_transform"], [854, 2, 1, "", "set_output"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_feature_names_out"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_params"], [856, 3, 1, "", "infrequent_categories_"], [856, 2, 1, "", "inverse_transform"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_params"], [857, 3, 1, "", "infrequent_categories_"], [857, 2, 1, "", "inverse_transform"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_params"], [858, 3, 1, "", "powers_"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "inverse_transform"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "inverse_transform"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_feature_names_out"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "inverse_transform"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "inverse_transform"], [863, 2, 1, "", "partial_fit"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_params"], [864, 3, 1, "", "infrequent_categories_"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.random_projection": [[875, 1, 1, "", "GaussianRandomProjection"], [876, 1, 1, "", "SparseRandomProjection"], [877, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[878, 1, 1, "", "LabelPropagation"], [879, 1, 1, "", "LabelSpreading"], [880, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "predict"], [878, 2, 1, "", "predict_proba"], [878, 2, 1, "", "score"], [878, 2, 1, "", "set_params"]], "sklearn.semi_supervised.LabelSpreading": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "predict"], [879, 2, 1, "", "predict_proba"], [879, 2, 1, "", "score"], [879, 2, 1, "", "set_params"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[880, 2, 1, "", "decision_function"], [880, 2, 1, "", "fit"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "predict"], [880, 2, 1, "", "predict_log_proba"], [880, 2, 1, "", "predict_proba"], [880, 2, 1, "", "score"], [880, 2, 1, "", "set_params"]], "sklearn.svm": [[883, 1, 1, "", "LinearSVC"], [884, 1, 1, "", "LinearSVR"], [885, 1, 1, "", "NuSVC"], [886, 1, 1, "", "NuSVR"], [887, 1, 1, "", "OneClassSVM"], [888, 1, 1, "", "SVC"], [889, 1, 1, "", "SVR"], [890, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[883, 2, 1, "", "decision_function"], [883, 2, 1, "", "densify"], [883, 2, 1, "", "fit"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "predict"], [883, 2, 1, "", "score"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "predict"], [884, 2, 1, "", "score"], [884, 2, 1, "", "set_params"]], "sklearn.svm.NuSVC": [[885, 3, 1, "", "coef_"], [885, 2, 1, "", "decision_function"], [885, 2, 1, "", "fit"], [885, 2, 1, "", "get_params"], [885, 3, 1, "", "n_support_"], [885, 2, 1, "", "predict"], [885, 2, 1, "", "predict_log_proba"], [885, 2, 1, "", "predict_proba"], [885, 3, 1, "", "probA_"], [885, 3, 1, "", "probB_"], [885, 2, 1, "", "score"], [885, 2, 1, "", "set_params"]], "sklearn.svm.NuSVR": [[886, 3, 1, "", "coef_"], [886, 2, 1, "", "fit"], [886, 2, 1, "", "get_params"], [886, 3, 1, "", "n_support_"], [886, 2, 1, "", "predict"], [886, 2, 1, "", "score"], [886, 2, 1, "", "set_params"]], "sklearn.svm.OneClassSVM": [[887, 3, 1, "", "coef_"], [887, 2, 1, "", "decision_function"], [887, 2, 1, "", "fit"], [887, 2, 1, "", "fit_predict"], [887, 2, 1, "", "get_params"], [887, 3, 1, "", "n_support_"], [887, 2, 1, "", "predict"], [887, 2, 1, "", "score_samples"], [887, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[888, 3, 1, "", "coef_"], [888, 2, 1, "", "decision_function"], [888, 2, 1, "", "fit"], [888, 2, 1, "", "get_params"], [888, 3, 1, "", "n_support_"], [888, 2, 1, "", "predict"], [888, 2, 1, "", "predict_log_proba"], [888, 2, 1, "", "predict_proba"], [888, 3, 1, "", "probA_"], [888, 3, 1, "", "probB_"], [888, 2, 1, "", "score"], [888, 2, 1, "", "set_params"]], "sklearn.svm.SVR": [[889, 3, 1, "", "coef_"], [889, 2, 1, "", "fit"], [889, 2, 1, "", "get_params"], [889, 3, 1, "", "n_support_"], [889, 2, 1, "", "predict"], [889, 2, 1, "", "score"], [889, 2, 1, "", "set_params"]], "sklearn.tree": [[891, 1, 1, "", "DecisionTreeClassifier"], [892, 1, 1, "", "DecisionTreeRegressor"], [893, 1, 1, "", "ExtraTreeClassifier"], [894, 1, 1, "", "ExtraTreeRegressor"], [895, 4, 1, "", "export_graphviz"], [896, 4, 1, "", "export_text"], [897, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[891, 2, 1, "", "apply"], [891, 2, 1, "", "cost_complexity_pruning_path"], [891, 2, 1, "", "decision_path"], [891, 3, 1, "", "feature_importances_"], [891, 2, 1, "", "fit"], [891, 2, 1, "", "get_depth"], [891, 2, 1, "", "get_n_leaves"], [891, 2, 1, "", "get_params"], [891, 2, 1, "", "predict"], [891, 2, 1, "", "predict_log_proba"], [891, 2, 1, "", "predict_proba"], [891, 2, 1, "", "score"], [891, 2, 1, "", "set_params"]], "sklearn.tree.DecisionTreeRegressor": [[892, 2, 1, "", "apply"], [892, 2, 1, "", "cost_complexity_pruning_path"], [892, 2, 1, "", "decision_path"], [892, 3, 1, "", "feature_importances_"], [892, 2, 1, "", "fit"], [892, 2, 1, "", "get_depth"], [892, 2, 1, "", "get_n_leaves"], [892, 2, 1, "", "get_params"], [892, 2, 1, "", "predict"], [892, 2, 1, "", "score"], [892, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeClassifier": [[893, 2, 1, "", "apply"], [893, 2, 1, "", "cost_complexity_pruning_path"], [893, 2, 1, "", "decision_path"], [893, 3, 1, "", "feature_importances_"], [893, 2, 1, "", "fit"], [893, 2, 1, "", "get_depth"], [893, 2, 1, "", "get_n_leaves"], [893, 2, 1, "", "get_params"], [893, 2, 1, "", "predict"], [893, 2, 1, "", "predict_log_proba"], [893, 2, 1, "", "predict_proba"], [893, 2, 1, "", "score"], [893, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeRegressor": [[894, 2, 1, "", "apply"], [894, 2, 1, "", "cost_complexity_pruning_path"], [894, 2, 1, "", "decision_path"], [894, 3, 1, "", "feature_importances_"], [894, 2, 1, "", "fit"], [894, 2, 1, "", "get_depth"], [894, 2, 1, "", "get_n_leaves"], [894, 2, 1, "", "get_params"], [894, 2, 1, "", "predict"], [894, 2, 1, "", "score"], [894, 2, 1, "", "set_params"]], "sklearn.utils": [[898, 1, 1, "", "Bunch"], [899, 4, 1, "", "_safe_indexing"], [901, 4, 1, "", "as_float_array"], [902, 4, 1, "", "assert_all_finite"], [903, 4, 1, "", "check_X_y"], [904, 4, 1, "", "check_array"], [905, 4, 1, "", "check_consistent_length"], [906, 4, 1, "", "check_random_state"], [907, 4, 1, "", "check_scalar"], [910, 4, 1, "", "deprecated"], [916, 4, 1, "", "estimator_html_repr"], [923, 4, 1, "", "gen_batches"], [924, 4, 1, "", "gen_even_slices"], [926, 4, 1, "", "indexable"], [931, 4, 1, "", "murmurhash3_32"], [934, 4, 1, "", "parallel_backend"], [936, 4, 1, "", "register_parallel_backend"], [937, 4, 1, "", "resample"], [938, 4, 1, "", "safe_mask"], [939, 4, 1, "", "safe_sqr"], [940, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[898, 2, 1, "", "clear"], [898, 2, 1, "", "copy"], [898, 2, 1, "", "fromkeys"], [898, 2, 1, "", "get"], [898, 2, 1, "", "items"], [898, 2, 1, "", "keys"], [898, 2, 1, "", "pop"], [898, 2, 1, "", "popitem"], [898, 2, 1, "", "setdefault"], [898, 2, 1, "", "update"], [898, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[900, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[908, 4, 1, "", "compute_class_weight"], [909, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[911, 4, 1, "", "all_displays"], [912, 4, 1, "", "all_estimators"], [913, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[914, 4, 1, "", "check_estimator"], [915, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[917, 4, 1, "", "density"], [918, 4, 1, "", "fast_logdet"], [919, 4, 1, "", "randomized_range_finder"], [920, 4, 1, "", "randomized_svd"], [921, 4, 1, "", "safe_sparse_dot"], [922, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[925, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metaestimators": [[927, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[928, 4, 1, "", "is_multilabel"], [929, 4, 1, "", "type_of_target"], [930, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[932, 1, 1, "", "Parallel"], [933, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[932, 2, 1, "", "dispatch_next"], [932, 2, 1, "", "dispatch_one_batch"], [932, 2, 1, "", "format"], [932, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[935, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[941, 4, 1, "", "incr_mean_variance_axis"], [942, 4, 1, "", "inplace_column_scale"], [943, 4, 1, "", "inplace_csr_column_scale"], [944, 4, 1, "", "inplace_row_scale"], [945, 4, 1, "", "inplace_swap_column"], [946, 4, 1, "", "inplace_swap_row"], [947, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[948, 4, 1, "", "inplace_csr_row_normalize_l1"], [949, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[950, 4, 1, "", "check_is_fitted"], [951, 4, 1, "", "check_memory"], [952, 4, 1, "", "check_symmetric"], [953, 4, 1, "", "column_or_1d"], [954, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 382], "u": 0, "histori": [0, 1006], "govern": [0, 385], "author": [0, 1008], "contributor": [0, 370, 371, 385, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "experi": [0, 37, 370, 385], "team": [0, 370, 385], "commun": [0, 371, 385], "emeritu": 0, "core": [0, 8, 359, 370, 375, 377, 382, 385, 404, 968], "develop": [0, 369, 372, 373, 374, 375, 378, 379, 380, 955], "cite": 0, "scikit": [0, 252, 309, 310, 311, 312, 313, 314, 356, 357, 369, 372, 373, 375, 376, 382, 385, 387, 984, 986, 987, 990, 992, 993, 998, 1001, 1004], "learn": [0, 5, 12, 50, 95, 98, 148, 164, 166, 167, 168, 173, 217, 218, 219, 220, 232, 252, 259, 287, 294, 309, 310, 311, 312, 313, 314, 317, 318, 319, 356, 357, 359, 367, 369, 371, 372, 373, 375, 376, 382, 385, 387, 395, 401, 403, 961, 963, 971, 979, 984, 986, 987, 988, 990, 992, 993, 995, 998, 999, 1000, 1001, 1002, 1004], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 86, 100, 104, 230, 371, 373, 382, 395, 978, 983, 986], "infrastructur": 0, "support": [0, 25, 119, 164, 191, 305, 309, 310, 311, 312, 314, 324, 327, 336, 382, 387, 392, 394, 395, 403, 981, 982, 989, 999, 1014], "exampl": [3, 6, 9, 53, 59, 75, 88, 102, 125, 156, 164, 193, 194, 334, 338, 359, 365, 366, 376, 382, 386, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 418, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 445, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 467, 468, 469, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 486, 487, 489, 491, 495, 496, 497, 498, 499, 500, 504, 505, 507, 508, 509, 510, 511, 512, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 566, 567, 569, 572, 573, 574, 575, 576, 578, 579, 582, 584, 585, 587, 589, 590, 591, 592, 593, 595, 596, 598, 599, 600, 602, 603, 604, 607, 608, 610, 612, 613, 615, 616, 617, 618, 619, 620, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 637, 638, 640, 641, 642, 643, 644, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 673, 674, 675, 676, 677, 678, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 697, 698, 702, 703, 704, 711, 713, 718, 721, 722, 725, 726, 729, 732, 733, 734, 736, 737, 739, 741, 762, 763, 766, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 814, 816, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 836, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 869, 872, 876, 877, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 897, 898, 906, 915, 917, 924, 927, 940, 950, 955, 958, 960, 961, 962, 963, 965, 966, 967, 969, 970, 971, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 992, 998, 999, 1000, 1005, 1008], "base": [3, 4, 85, 116, 117, 146, 164, 181, 232, 309, 310, 312, 314, 371, 395, 396, 400, 403, 405, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 962, 974, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "real": [3, 9, 75, 109, 164, 366], "world": [3, 75, 164, 366], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 34, 44, 58, 62, 70, 85, 88, 89, 90, 91, 92, 95, 104, 118, 119, 129, 135, 136, 149, 151, 153, 154, 156, 158, 164, 166, 167, 168, 176, 179, 181, 186, 197, 199, 206, 215, 218, 219, 226, 231, 236, 255, 263, 264, 306, 321, 322, 326, 342, 348, 363, 364, 365, 366, 367, 368, 376, 382, 395, 406, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 992, 998, 999, 1001, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "time": [4, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 120, 133, 139, 147, 159, 163, 171, 174, 191, 216, 224, 231, 232, 240, 249, 273, 276, 291, 297, 307, 315, 323, 340, 342, 345, 352, 400], "relat": [4, 8, 365, 371, 974, 986, 1015], "featur": [4, 51, 54, 74, 100, 115, 116, 117, 119, 123, 126, 127, 140, 142, 144, 145, 146, 164, 169, 170, 173, 176, 191, 194, 215, 231, 236, 258, 296, 300, 301, 304, 305, 309, 311, 312, 332, 342, 343, 357, 359, 371, 375, 395, 397, 403, 404, 405, 956, 974, 976, 983, 1000, 1001, 1011, 1012, 1013, 1014, 1015], "engin": [4, 169, 986, 990], "data": [4, 7, 9, 12, 17, 24, 26, 38, 47, 49, 50, 55, 57, 58, 63, 64, 66, 67, 70, 75, 78, 80, 82, 85, 86, 96, 97, 100, 101, 102, 103, 109, 111, 116, 117, 123, 125, 129, 142, 145, 146, 154, 155, 157, 162, 166, 169, 170, 173, 177, 183, 190, 191, 227, 232, 235, 238, 247, 252, 254, 258, 263, 264, 266, 267, 270, 284, 289, 296, 299, 303, 304, 305, 317, 329, 332, 336, 343, 344, 353, 357, 359, 366, 376, 382, 384, 396, 397, 399, 400, 405, 406, 976, 980, 990, 992, 995, 998, 1000, 1001], "explor": 4, "bike": [4, 168], "share": [4, 168], "demand": 4, "cross": [4, 84, 85, 135, 136, 145, 164, 186, 252, 253, 255, 256, 260, 262, 267, 306, 332, 353, 371, 395, 399, 400, 955, 962, 996], "valid": [4, 135, 136, 145, 186, 230, 252, 253, 255, 256, 260, 262, 267, 272, 306, 332, 353, 357, 373, 380, 395, 400, 950, 951, 952, 953, 954, 955, 961, 962, 969, 996], "gradient": [4, 119, 120, 121, 122, 123, 124, 168, 197, 205, 211, 309, 310, 312, 314, 403, 962, 980], "boost": [4, 119, 120, 121, 122, 123, 124, 168, 197, 309, 310, 312, 314, 403], "naiv": [4, 24, 25, 395, 968], "linear": [4, 25, 33, 34, 122, 149, 164, 167, 175, 176, 193, 197, 200, 203, 218, 219, 231, 310, 328, 335, 336, 357, 380, 382, 395, 960, 962, 963, 964, 976, 999], "regress": [4, 73, 75, 85, 86, 111, 122, 123, 132, 149, 154, 155, 156, 157, 176, 177, 180, 186, 188, 189, 190, 193, 195, 197, 199, 212, 214, 215, 229, 232, 289, 336, 349, 350, 367, 395, 397, 403, 406, 957, 959, 962, 966, 967, 969, 970, 980, 981, 982, 999], "step": [4, 237, 383, 397], "categori": [4, 313, 976], "trigonometr": 4, "period": [4, 198], "spline": [4, 198, 312, 976], "qualit": 4, "analysi": [4, 33, 34, 60, 95, 101, 103, 106, 122, 168, 181, 242, 259, 260, 267, 285, 286, 287, 342, 395, 399, 401, 960, 969, 983, 1000, 1001], "impact": [4, 61, 1023, 1024], "model": [4, 7, 11, 57, 75, 85, 96, 103, 109, 116, 117, 119, 123, 125, 145, 146, 149, 154, 164, 167, 168, 169, 173, 175, 176, 181, 185, 186, 191, 197, 200, 215, 227, 232, 236, 241, 243, 247, 248, 250, 256, 257, 259, 264, 284, 289, 296, 304, 310, 312, 336, 342, 357, 373, 382, 383, 385, 390, 391, 395, 400, 955, 961, 962, 965, 966, 968, 970, 971, 992, 996, 999, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "predict": [4, 10, 24, 86, 111, 122, 132, 150, 166, 177, 197, 232, 235, 253, 264, 317, 357, 382, 383, 399, 400, 406, 966, 977, 992, 999], "pairwis": [4, 257, 395, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 964], "interact": [4, 168, 314, 403, 999], "polynomi": [4, 173, 176, 177, 198, 958, 962, 964, 976, 999], "non": [4, 14, 95, 122, 192, 197, 218, 262, 328, 335, 336, 401, 962, 976], "kernel": [4, 5, 100, 149, 154, 155, 157, 158, 164, 172, 173, 231, 232, 281, 282, 290, 311, 325, 328, 333, 336, 395, 401, 402, 406, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 958, 959, 964, 976, 981, 999], "conclud": [4, 109, 222], "remark": [4, 57, 109, 222, 230], "imag": [5, 47, 50, 53, 66, 98, 365, 395, 404, 568, 569, 570, 571, 572], "denois": [5, 98], "us": [5, 6, 12, 17, 48, 95, 96, 98, 126, 127, 129, 184, 200, 211, 213, 257, 261, 266, 300, 336, 342, 343, 353, 359, 372, 376, 377, 379, 382, 400, 401, 403, 404, 405, 410, 418, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 445, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 467, 468, 469, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 486, 487, 489, 491, 495, 496, 497, 498, 499, 500, 504, 505, 507, 508, 509, 510, 511, 512, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 566, 567, 569, 572, 573, 574, 575, 576, 578, 579, 582, 584, 585, 587, 589, 590, 591, 592, 593, 595, 596, 598, 599, 600, 602, 603, 604, 607, 608, 610, 612, 613, 615, 616, 617, 618, 619, 620, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 637, 638, 640, 641, 642, 643, 644, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 673, 674, 675, 676, 677, 678, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 697, 698, 702, 703, 704, 711, 713, 718, 721, 722, 725, 726, 729, 732, 733, 734, 736, 737, 739, 741, 762, 763, 766, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 814, 816, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 836, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 869, 872, 876, 877, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 897, 898, 906, 915, 917, 924, 927, 940, 950, 960, 962, 963, 966, 970, 980, 981, 982, 990, 999, 1001, 1018], "pca": [5, 58, 73, 95, 96, 99, 100, 101, 102, 103, 104, 304, 401, 526, 983, 1000], "refer": [5, 11, 25, 27, 80, 81, 98, 113, 169, 173, 181, 185, 257, 262, 263, 290, 365, 366, 368, 393, 394, 395, 396, 398, 399, 400, 401, 403, 404, 405, 406, 955, 956, 958, 959, 960, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 978, 979, 980, 981, 982], "load": [5, 7, 17, 50, 58, 117, 119, 123, 135, 146, 169, 190, 215, 219, 227, 231, 238, 258, 266, 267, 304, 305, 329, 332, 342, 343, 344, 364, 365, 376, 382, 404, 992, 1000, 1001], "via": [5, 53, 185, 186, 215, 403, 958], "openml": [5, 305, 309, 365], "basi": [5, 158, 406, 958, 962, 999], "reconstruct": [5, 13, 98], "test": [5, 78, 141, 260, 263, 270, 342, 347, 369, 371, 373, 379, 380, 400, 992, 999, 1001], "face": [6, 50, 95, 234, 366, 990, 997], "recognit": [6, 366, 368, 997], "eigenfac": [6, 95, 997], "svm": [6, 138, 142, 143, 173, 211, 231, 312, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 395, 883, 884, 885, 886, 887, 888, 889, 890, 962, 972, 980, 999, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "complex": [7, 228, 237, 256, 259, 319, 347, 357, 396, 962, 963, 969, 970, 980, 981, 982], "influenc": [7, 10, 357], "benchmark": [7, 10, 58, 342], "choos": [7, 955, 992, 994, 996], "paramet": [7, 78, 122, 255, 311, 329, 337, 371, 373, 383, 384, 395, 397, 403, 955, 962, 966, 981, 992, 996, 1001], "run": [7, 58, 261], "code": [7, 95, 105, 371, 373, 376, 377, 379, 401, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "plot": [7, 8, 10, 24, 30, 34, 38, 41, 47, 49, 50, 57, 63, 64, 66, 67, 78, 82, 85, 91, 92, 96, 97, 101, 109, 111, 118, 123, 125, 129, 130, 131, 132, 135, 145, 162, 168, 176, 177, 181, 189, 190, 191, 201, 202, 206, 219, 227, 231, 235, 236, 238, 247, 253, 254, 259, 261, 264, 266, 270, 272, 284, 296, 305, 309, 311, 312, 317, 326, 327, 332, 342, 348, 378, 395, 961, 973, 1005], "result": [7, 8, 38, 47, 49, 50, 57, 58, 63, 64, 67, 78, 80, 82, 96, 97, 109, 111, 129, 132, 162, 173, 181, 202, 232, 235, 261, 270, 284, 305, 336, 343, 353, 955], "conclus": [7, 149, 181, 186, 306], "out": [8, 121, 359, 379, 400, 404, 955, 962, 968], "classif": [8, 26, 29, 30, 32, 33, 70, 91, 137, 150, 151, 152, 153, 157, 164, 213, 233, 260, 263, 264, 267, 280, 288, 296, 309, 316, 321, 342, 367, 395, 403, 406, 962, 966, 967, 969, 970, 980, 981, 982, 999, 1001], "text": [8, 164, 228, 258, 321, 341, 342, 343, 344, 366, 395, 404, 573, 574, 575, 576, 1001], "document": [8, 19, 164, 311, 312, 341, 342, 343, 371, 986, 987, 989, 1004, 1008, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "reuter": 8, "routin": [8, 358, 380], "main": [8, 197], "outlier": [9, 179, 214, 226, 235, 283, 284, 299, 395, 962, 972, 976], "detect": [9, 226, 235, 254, 283, 284, 966, 972, 981], "set": [9, 75, 78, 102, 129, 162, 264, 329, 347, 382, 400, 962, 992, 998, 999, 1001], "first": [9, 37, 371], "second": [9, 37], "latenc": [10, 357], "helper": [10, 158, 219, 380], "function": [10, 34, 158, 187, 201, 202, 207, 219, 235, 252, 270, 311, 332, 344, 380, 395, 400, 403, 406, 958, 962, 966, 981, 999], "bulk": [10, 357], "atom": [10, 357], "speed": [10, 377], "variou": [10, 52, 204, 223], "regressor": [10, 111, 122, 176, 306, 309, 312, 395, 403], "n_featur": 10, "throughput": [10, 357], "speci": [11, 290], "distribut": [11, 215, 218, 290, 303, 387, 963, 976], "visual": [12, 58, 106, 227, 232, 238, 252, 295, 310, 329, 395, 396, 397, 966, 1005], "stock": [12, 997], "market": [12, 997], "structur": [12, 39, 47, 67, 157, 319, 351, 997], "retriev": [12, 309], "from": [12, 98, 146, 169, 305, 309, 358, 365, 369, 382, 395, 404, 962, 966, 992, 999, 1000, 1001, 1018], "internet": 12, "graph": [12, 309, 380, 382, 396, 404, 925], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 95, 164, 313, 343, 367, 393, 395, 396, 401, 407, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 699, 700, 966, 1000, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "affin": [12, 38, 396, 964], "propag": [12, 38, 317, 318, 319, 396, 979], "embed": [12, 52, 218, 219, 230, 287, 403, 963], "2d": [12, 52, 97, 104, 168], "space": [12, 100, 397, 955, 963], "compress": [13, 53, 357, 405], "sens": [13, 405], "tomographi": 13, "l1": [13, 181, 188, 190, 213, 337, 405], "prior": [13, 158, 242], "lasso": [13, 181, 182, 183, 184, 185, 186, 191, 310, 637, 962], "topic": 14, "extract": [14, 74, 98, 215, 258, 343, 357, 359, 395, 404, 1001], "neg": [14, 95, 192, 401, 962], "matrix": [14, 17, 157, 178, 251, 395, 396, 401, 966, 981], "factor": [14, 95, 103, 106, 283, 284, 401, 972], "latent": [14, 85, 401], "dirichlet": [14, 401, 965], "alloc": [14, 401], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 63, 64, 67, 68, 76, 78, 83, 87, 93, 107, 133, 139, 147, 159, 163, 171, 174, 190, 202, 216, 224, 240, 249, 270, 273, 276, 291, 297, 307, 315, 323, 340, 345, 352, 356, 357, 396, 397, 400, 973], "libsvm": [16, 365], "gui": 16, "wikipedia": 17, "princip": [17, 86, 101, 401, 983, 1000], "eigenvector": 17, "download": [17, 129, 162, 365], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 387, 404, 1001], "adjac": 17, "singular": [17, 401], "vector": [17, 25, 53, 164, 324, 327, 336, 342, 344, 366, 395, 404, 981, 999, 1000], "random": [17, 95, 114, 127, 128, 169, 170, 230, 238, 263, 265, 353, 373, 380, 395, 400, 401, 403, 935, 955, 962, 978, 983], "svd": [17, 95, 401], "central": 17, "score": [17, 85, 120, 135, 145, 162, 176, 247, 256, 263, 264, 332, 396, 400, 961, 966, 981, 996], "biclust": [18, 19, 20, 164, 367, 393, 395], "spectral": [19, 20, 21, 66, 218, 393, 396, 963], "co": [19, 21, 393], "algorithm": [19, 20, 21, 38, 44, 49, 55, 63, 64, 65, 218, 226, 377, 382, 960, 962, 965, 967, 969, 970, 974, 982, 999], "A": [20, 21, 47, 58, 63, 197, 312, 370, 377, 390, 400, 995, 998], "demo": [20, 21, 38, 47, 49, 55, 58, 63, 65], "calibr": [23, 24, 25, 26, 27, 122, 164, 197, 394, 395, 422, 423, 424, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "probabl": [24, 25, 26, 30, 131, 152, 394, 395, 403, 981], "classifi": [24, 25, 27, 31, 132, 180, 237, 254, 275, 309, 322, 326, 329, 342, 351, 394, 395, 403, 960, 969, 999, 1001], "gener": [24, 34, 38, 47, 49, 55, 57, 63, 64, 66, 67, 78, 80, 82, 91, 92, 96, 97, 98, 116, 125, 142, 145, 149, 155, 156, 158, 164, 175, 176, 177, 181, 191, 197, 199, 232, 247, 254, 270, 284, 289, 296, 310, 317, 336, 353, 367, 371, 384, 395, 401, 403, 962, 976, 987, 996], "synthet": [24, 75, 176, 181, 254, 306, 376], "gaussian": [24, 25, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 241, 242, 243, 246, 247, 248, 299, 395, 406, 965, 968, 976, 978], "bay": [24, 25, 395, 968], "curv": [25, 27, 177, 232, 238, 248, 254, 259, 264, 266, 272, 394, 961], "summari": [25, 186, 343, 344, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "3": [26, 180, 1001, 1016, 1017, 1022, 1024], "class": [26, 37, 110, 112, 131, 180, 206, 211, 260, 264, 266, 312, 328, 331, 384, 395, 400, 403, 404, 965, 966, 969, 972, 980, 981, 1008, 1009], "fit": [26, 57, 96, 103, 116, 117, 120, 122, 123, 154, 176, 177, 178, 191, 194, 199, 203, 264, 284, 289, 336, 353, 373, 383, 403, 968, 972, 992], "compar": [26, 42, 44, 62, 78, 85, 120, 128, 142, 173, 176, 183, 199, 204, 226, 232, 257, 265, 285, 294, 299, 305, 382], "comparison": [27, 31, 43, 64, 80, 104, 119, 141, 149, 218, 219, 232, 257, 268, 344, 396, 406, 962], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 58, 89, 136, 137, 219, 296, 317, 318, 368, 998], "normal": [33, 173, 197, 299, 303, 395, 855, 870, 966, 976], "ledoit": [33, 79, 398], "wolf": [33, 79, 398], "oa": [33, 78, 79, 409, 460], "discrimin": [33, 34, 395, 960], "quadrat": [34, 406, 960], "covari": [34, 77, 78, 80, 81, 82, 164, 244, 395, 398, 409, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 960, 1016, 1020, 1021, 1022, 1024], "ellipsoid": [34, 243], "colormap": 34, "adjust": 37, "chanc": 37, "perform": [37, 43, 260, 304, 311, 313, 317, 343, 357, 371, 372, 396, 400, 404, 1001], "evalu": [37, 58, 61, 81, 197, 235, 258, 261, 296, 305, 343, 383, 391, 393, 396, 400, 403, 955, 961, 966, 1001], "defin": [37, 47, 58, 67, 218, 235, 252, 254, 255, 344, 966], "list": [37, 989], "metric": [37, 40, 122, 261, 395, 396, 400, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 955, 963, 964, 966, 969, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "fix": [37, 375, 1008, 1011, 1012, 1013, 1014, 1015, 1021], "ground": [37, 176], "truth": [37, 176], "label": [37, 264, 317, 318, 319, 366, 367, 396, 400, 403, 966, 977, 979], "grow": 37, "number": [37, 60, 119, 145, 269, 357, 373, 955, 956, 965], "vari": [37, 293, 320, 396], "sampl": [38, 55, 63, 78, 96, 97, 142, 178, 210, 232, 258, 270, 289, 310, 336, 339, 365, 380, 384, 395, 396, 403, 962], "agglom": [39, 40, 52, 1000], "without": [39, 120, 285, 342], "differ": [40, 44, 62, 78, 158, 168, 299, 302, 305, 326, 373, 382, 396, 962, 999], "hierarch": [41, 47, 62, 67, 396, 1000], "dendrogram": 41, "birch": [42, 396, 427], "minibatchkmean": [42, 64, 95, 434], "bisect": [43, 396], "k": [43, 45, 48, 57, 58, 59, 61, 64, 67, 85, 304, 343, 396, 400, 966, 969, 976, 999, 1000], "mean": [43, 45, 48, 57, 58, 59, 61, 63, 64, 116, 117, 162, 169, 343, 396, 966, 976, 1000], "regular": [43, 78, 124, 167, 190, 201, 202, 293, 337, 962, 970], "toi": [44, 62, 226, 368], "segment": [46, 66], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 257], "ward": [47, 67, 396, 1000], "an": [47, 59, 162, 178, 186, 235, 287, 309, 313, 382, 404, 955, 972, 992, 998, 999], "color": 48, "quantiz": [48, 53, 1000], "dbscan": [49, 396, 407, 429], "onlin": [50, 204, 312, 313, 980], "dictionari": [50, 95, 98, 105, 401], "part": [50, 405], "agglomer": [51, 54, 983, 1000], "origin": [53, 100, 263, 287, 299], "encod": [53, 119, 305, 306, 976, 977], "strategi": [53, 255, 294, 302, 359, 395, 396, 966], "memori": [53, 357, 377, 379, 396], "footprint": 53, "v": [54, 67, 78, 79, 81, 86, 100, 145, 168, 169, 179, 189, 215, 260, 266, 270, 271, 347, 396, 956, 976, 992], "univari": [54, 85, 142, 332, 405, 956], "select": [54, 60, 72, 103, 135, 140, 142, 145, 146, 164, 185, 186, 191, 247, 250, 332, 382, 391, 395, 400, 405, 955, 962, 965, 996, 1014], "hdbscan": [55, 396, 431], "scale": [55, 167, 218, 221, 304, 337, 359, 404, 874, 963, 972, 976, 983], "invari": [55, 260], "multi": [55, 110, 128, 168, 191, 206, 221, 234, 261, 264, 293, 350, 377, 395, 962, 963, 966, 970, 981, 982], "hyperparamet": [55, 154, 155, 258, 265, 602], "robust": [55, 80, 81, 176, 200, 203, 353, 395, 398, 955, 962], "min_cluster_s": 55, "min_sampl": 55, "dbscan_clust": 55, "induct": 56, "demonstr": [57, 261, 302, 317], "assumpt": 57, "possibl": [57, 376], "solut": 57, "final": [57, 149], "handwritten": [58, 219, 368], "our": [58, 252, 255, 371], "reduc": [58, 357], "initi": [59, 61, 245, 965], "silhouett": [60, 396], "kmean": [60, 64, 310, 432], "empir": [61, 81, 230, 398], "linkag": [62, 396], "method": [62, 74, 85, 108, 149, 164, 218, 220, 245, 274, 384, 395, 396, 403, 958, 965, 972, 973, 1000], "shift": [63, 396], "meanshift": [63, 433], "establish": [64, 173], "pariti": 64, "between": [64, 268], "optic": [65, 368, 396, 435], "four": 66, "circl": 66, "two": [66, 112, 183, 236, 257], "unstructur": 67, "we": 67, "ar": [67, 312, 382], "nearest": [67, 164, 277, 278, 279, 280, 285, 288, 289, 309, 395, 956, 969, 999], "neighbor": [67, 164, 218, 277, 278, 279, 280, 285, 289, 304, 309, 395, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 956, 963, 969, 999, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "10": [67, 1008], "pipelin": [69, 70, 72, 73, 129, 143, 164, 167, 228, 237, 258, 305, 332, 373, 382, 383, 395, 397, 405, 842, 843, 844, 845, 983, 997, 1001, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "composit": [69, 164, 395, 397, 955], "estim": [69, 77, 78, 79, 80, 81, 82, 113, 119, 121, 128, 155, 162, 164, 176, 200, 203, 228, 234, 235, 246, 265, 281, 282, 290, 309, 310, 311, 314, 353, 373, 382, 383, 384, 392, 395, 397, 398, 400, 402, 403, 406, 955, 956, 960, 962, 965, 966, 981, 986, 994, 996, 998, 1009, 1016, 1017, 1018], "column": [70, 71, 237], "transform": [70, 71, 72, 75, 85, 115, 127, 237, 311, 312, 313, 363, 382, 383, 397, 399, 400, 969, 976, 977, 978, 1000], "heterogen": [70, 397], "sourc": [70, 96, 369], "20": [70, 342, 366, 1001, 1016], "newsgroup": [70, 342, 366, 1001], "creat": [70, 101, 103, 227, 264, 306, 332, 382], "mix": 71, "type": [71, 242, 373, 384, 396, 992], "dimension": [72, 218, 221, 237, 286, 304, 343, 960, 963, 969, 983, 999], "reduct": [72, 218, 222, 237, 286, 304, 343, 960, 969, 983], "gridsearchcv": [72, 135, 261, 403, 781], "illustr": [72, 153, 158, 287, 406], "cach": [72, 279, 397], "within": 72, "chain": [73, 237, 275, 383, 397], "logist": [73, 180, 187, 188, 189, 190, 212, 213, 962, 999], "concaten": 74, "multipl": [74, 237, 261, 353, 378, 400, 955, 956, 966, 1016, 1017], "effect": [75, 166, 223, 299, 304, 320, 347, 969], "target": [75, 156, 215, 305, 306, 382, 384, 397, 399, 967, 976, 977], "shrinkag": [78, 398, 403, 960, 999], "ledoitwolf": [78, 458], "max": [78, 966], "likelihood": [78, 176, 177, 260, 966, 971], "approach": [78, 186, 257], "mahalanobi": [80, 969], "distanc": [80, 395, 969], "relev": [80, 181, 962], "minimum": [81, 398], "determin": [81, 181, 398, 962, 966], "spars": [82, 95, 105, 167, 181, 183, 212, 309, 342, 343, 380, 398, 401, 405, 976, 978, 980], "invers": [82, 398, 978], "decomposit": [84, 85, 94, 95, 113, 164, 367, 395, 399, 401, 408, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 1000, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "variabl": [85, 166, 167, 358, 382, 395, 999], "canon": [85, 399], "symmetr": 85, "pl": 85, "scatter": 85, "multivari": [85, 956], "respons": [85, 385], "pls2": 85, "pls1": 85, "cca": [85, 467], "mode": [85, 357, 369], "b": 85, "deflat": 85, "compon": [86, 95, 101, 285, 286, 287, 401, 965, 969, 983, 1000], "partial": [86, 166, 168, 236, 973], "least": [86, 122, 186, 192, 195, 962], "squar": [86, 122, 158, 192, 195, 406, 958, 962, 964, 966], "The": [86, 89, 90, 166, 167, 197, 223, 230, 255, 264, 366, 375, 400, 404, 965, 966, 978, 999, 1000], "one": [86, 119, 236, 962, 966], "power": [86, 197], "iri": [90, 102, 104, 118, 151, 206, 322, 326, 348, 368, 406, 998], "randomli": [91, 92], "multilabel": [92, 233, 367, 380, 395, 966, 967, 992], "prepar": [95, 109, 111, 173, 218, 266, 267, 304, 329, 375], "nmf": [95, 313, 401, 525], "independ": [95, 401, 1000], "fastica": [95, 96, 97, 408, 518], "minibatchsparsepca": [95, 401, 524], "center": [95, 976], "fa": [95, 103], "posit": [95, 312], "blind": 96, "separ": [96, 209, 330, 331], "ica": [96, 401, 1000], "point": [97, 287], "cloud": 97, "distort": 98, "displai": [98, 202, 227, 228, 237, 314, 379, 1005], "patch": [98, 404], "noisi": [98, 156], "them": [98, 370], "increment": [99, 359, 401], "kernelpca": [100, 520], "figur": 101, "probabilist": [103, 150, 401, 406], "lda": [104, 401, 960], "precomput": [105, 178, 309, 401], "rotat": 106, "pattern": 106, "ensembl": [108, 115, 118, 164, 313, 395, 403, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "discret": [109, 125, 157, 300, 301, 976], "versu": [109, 113, 211, 262, 322, 357], "adaboost": [109, 110, 111, 112, 403], "baselin": [109, 173, 197], "samm": 109, "r": 109, "decis": [110, 111, 118, 125, 130, 164, 231, 322, 346, 347, 348, 349, 350, 351, 382, 385, 395, 982], "tree": [110, 111, 115, 116, 117, 118, 127, 164, 169, 197, 309, 314, 346, 347, 348, 349, 350, 351, 382, 395, 403, 405, 891, 892, 893, 894, 895, 896, 897, 969, 974, 982, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "train": [111, 123, 125, 132, 145, 227, 232, 236, 238, 247, 270, 296, 305, 306, 311, 320, 329, 342, 347, 348, 351, 366, 400, 969, 979, 992, 999, 1001], "decisiontre": 111, "singl": [113, 129, 215, 227, 367, 396, 956], "bag": [113, 121, 342, 403, 404, 955, 1001], "bia": 113, "varianc": [113, 195, 405, 966, 976], "oob": 114, "error": [114, 122, 135, 176, 254, 270, 379, 387, 962, 966], "forest": [114, 116, 117, 128, 169, 170, 238, 366, 403, 972], "import": [116, 117, 123, 146, 169, 170, 231, 304, 309, 403, 974], "decreas": [116, 117, 169], "impur": [116, 117, 169, 347, 974], "permut": [116, 169, 170, 263, 309, 400, 974], "pixel": 117, "parallel": [117, 358, 369, 377, 396, 403, 932, 933, 955], "mdi": [117, 169], "surfac": [118, 231, 348], "categor": [119, 305, 311, 382, 403, 968, 976], "am": 119, "hous": [119, 366], "drop": 119, "hot": 119, "ordin": 119, "nativ": [119, 305, 309, 311], "limit": [119, 149, 357, 387, 390, 404], "split": [119, 311, 353, 400], "earli": [120, 205], "stop": [120, 205, 404, 980], "interv": 122, "quantil": [122, 199, 312, 313, 962], "confid": 122, "tune": [122, 255, 258, 311, 955, 1001], "hyper": [122, 255, 311, 395, 955], "preprocess": [123, 129, 164, 167, 168, 235, 237, 298, 344, 353, 382, 395, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 976, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "devianc": [123, 966], "isolationforest": [125, 548], "boundari": [125, 130, 322], "path": [125, 184, 190, 202, 351, 387], "length": [125, 387], "monoton": [126, 403], "constraint": [126, 314, 396, 403], "name": [126, 312, 382], "specifi": [126, 382, 955], "hash": [127, 380, 404], "total": [127, 347, 403], "output": [128, 234, 299, 314, 350, 982, 999], "meta": [128, 311, 403], "combin": [129, 227], "predictor": 129, "stack": [129, 309, 403], "make": [129, 132, 162, 371, 375, 385], "measur": [129, 260, 396, 966], "votingclassifi": [130, 131, 403, 554], "calcul": 131, "individu": [132, 168, 311, 973], "vote": [132, 403], "tutori": [134, 164, 985, 993, 995, 1001], "exercis": [134, 135, 136, 137, 138, 164, 996, 999, 1001], "diabet": [135, 236, 368, 999], "appli": 135, "line": [135, 152], "show": [135, 266], "std": [135, 176], "bonu": 135, "how": [135, 353, 371, 377, 382], "much": 135, "can": [135, 382], "you": [135, 382], "trust": 135, "alpha": [135, 347], "f": [141, 966], "mutual": [141, 396], "inform": [141, 162, 185, 186, 375, 396, 955, 962], "anova": [143, 332], "recurs": [144, 145, 405], "elimin": [144, 145, 405, 955], "sequenti": [146, 405], "coeffici": [146, 167, 176, 201, 202, 396, 966], "discuss": [146, 370], "process": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 167, 353, 385, 395, 406, 965, 995], "machin": [148, 164, 166, 167, 168, 296, 324, 379, 395, 971, 981, 992, 999], "ridg": [149, 177, 179, 195, 201, 202, 232, 306, 395, 406, 657, 959, 962], "simpl": [149, 282, 377, 998], "gpc": [150, 151, 152, 153, 406], "iso": [152, 264], "xor": [153, 406], "gpr": [154, 155, 406], "mauna": [154, 406], "loa": [154, 406], "co2": [154, 406], "build": [154, 162, 369, 371, 379, 1001], "design": 154, "proper": 154, "extrapol": 154, "interpret": [154, 167, 235, 401, 403], "nois": [155, 156, 177, 406], "level": [155, 358, 396, 403, 406], "optimis": 155, "basic": [156, 215, 383, 398, 406], "introductori": 156, "free": 156, "sequenc": [157, 382], "similar": [157, 964, 966], "under": [157, 382], "posterior": 158, "cookbook": 158, "radial": [158, 406, 958, 999], "ration": [158, 406], "quadradt": 158, "exp": [158, 406], "sine": [158, 248, 406], "dot": [158, 406], "product": [158, 215, 379, 382, 406, 606], "mat\u00e9rn": [158, 406], "miss": [160, 161, 162, 164, 309, 403, 956, 976, 982], "valu": [160, 161, 162, 164, 223, 309, 371, 401, 403, 956, 966, 974, 976, 982], "imput": [160, 161, 162, 164, 309, 395, 612, 613, 614, 615, 956, 976, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "variant": 161, "iterativeimput": [161, 612, 956], "befor": [162, 375], "replac": 162, "0": [162, 309, 310, 311, 312, 982, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "knn": [162, 309], "iter": [162, 269, 400, 955], "releas": [164, 308, 309, 310, 311, 312, 313, 314, 375, 387, 1006, 1014], "highlight": [164, 308, 309, 310, 311, 312, 313, 314, 1008, 1011, 1012, 1015, 1016], "mixtur": [164, 241, 242, 243, 246, 247, 248, 395, 779, 780, 965, 1016, 1017, 1021, 1022], "inspect": [164, 165, 386, 395, 616, 617, 618, 619, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "approxim": [164, 172, 173, 231, 277, 311, 395, 398, 958], "manifold": [164, 217, 218, 219, 220, 367, 395, 673, 674, 675, 676, 677, 678, 679, 680, 681, 963, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "miscellan": [164, 225, 395, 1016, 1017, 1018, 1019, 1020, 1021], "multioutput": [164, 274, 395, 814, 815, 816, 817, 967, 1016, 1017, 1018, 1019, 1020, 1023, 1024], "neural": [164, 168, 292, 395, 970, 971], "network": [164, 168, 292, 395, 970, 971], "semi": [164, 316, 317, 321, 322, 395, 979], "supervis": [164, 316, 317, 321, 322, 395, 970, 979, 988, 999], "work": [164, 341, 357, 370, 382, 1001], "failur": [166, 955], "infer": [166, 965], "causal": [166, 167], "simul": 166, "hourli": 166, "wage": [166, 167], "descript": 166, "incom": 166, "fulli": 166, "observ": [166, 999, 1000], "lesson": [166, 167], "common": [167, 353, 384, 404, 966], "pitfal": [167, 353], "matter": 167, "check": [167, 259, 309, 379, 1016, 1017, 1018], "problem": [167, 401, 981, 982, 992, 997, 999, 1000], "correl": [167, 170, 399, 966, 974], "numer": [167, 358, 373], "wrong": [167, 382], "depend": [168, 236, 369, 973, 1008, 1021, 1022], "condit": [168, 311, 973], "expect": [168, 311, 965, 973], "preprocessor": 168, "1": [168, 194, 312, 313, 314, 382, 1001, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "wai": [168, 371, 382], "layer": [168, 293, 970], "perceptron": [168, 293, 653, 962, 970], "ic": [168, 973], "pdp": 168, "3d": 168, "represent": [168, 228, 310, 357, 404, 1000], "accuraci": [169, 231, 342, 347, 966], "": [169, 304, 306, 374, 382, 403, 966], "multicollinear": 170, "breast": [170, 368], "cancer": [170, 368], "handl": [170, 956], "scalabl": [173, 259, 310], "partit": 173, "bayesian": [176, 177, 242, 257, 395, 962, 965], "recov": 176, "weight": [176, 178, 210, 295, 310, 339, 403, 404], "true": [176, 177], "margin": [176, 177, 209, 330, 334], "log": [176, 177, 966], "expans": 176, "sinusoid": 177, "cubic": 177, "l": 177, "elast": [178, 182, 962], "net": [178, 182, 962], "gram": [178, 981], "huberregressor": [179, 634], "strong": 179, "signal": [181, 401, 1000], "automat": [181, 383, 962], "ard": [181, 962], "elasticnet": [181, 310, 631], "dens": 183, "implement": [183, 382, 396, 404, 966, 969, 980, 981], "lar": [184, 635, 962], "criteria": [185, 382, 962, 982], "aic": 186, "bic": [186, 247], "criterion": [186, 311, 955, 980], "coordin": 186, "descent": [186, 205, 211, 962, 980], "angl": [186, 962], "penalti": [188, 208, 337], "sparsiti": [188, 194, 404, 999], "multinomi": [189, 213, 962, 968], "One": [189, 211, 266, 312, 328, 400, 972, 980], "rest": [189, 266], "joint": 191, "task": [191, 395, 962, 986], "seri": [191, 400], "onli": [194, 214, 1019, 1021], "2": [194, 314, 1001, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "ordinari": [195, 962], "orthogon": [196, 962], "match": [196, 962], "pursuit": [196, 962], "poisson": [197, 215, 310, 311, 966], "loss": [197, 207, 310, 313, 403, 966], "french": 197, "motor": 197, "third": [197, 387], "parti": [197, 387], "liabil": 197, "claim": [197, 215], "constant": [197, 956], "rank": [197, 395, 966], "takeawai": 197, "interpol": 198, "quantileregressor": [199, 655], "linearregress": [199, 642], "ransac": [200, 962], "l2": [201, 337], "solver": [204, 401, 962], "stochast": [205, 211, 218, 294, 962, 963, 971, 980], "sgd": [206, 207, 208, 209, 210, 962, 980], "convex": 207, "maximum": [209, 330, 971], "hyperplan": [209, 330, 331], "multiclass": [212, 266, 309, 380, 394, 395, 811, 812, 813, 928, 929, 930, 966, 967, 992, 999, 1017, 1020, 1021, 1022], "20newgroup": 212, "mnist": [213, 295], "theil": [214, 962], "sen": [214, 962], "y": [214, 382, 399, 977, 979], "direct": 214, "x": 214, "tweedi": [215, 966], "insur": 215, "definit": [215, 296, 973, 1018], "frequenc": [215, 1001], "sever": [215, 220], "gamma": [215, 966], "pure": 215, "premium": 215, "tweedieregressor": [215, 665], "local": [218, 219, 283, 284, 963, 972], "isomap": [218, 219, 673, 963], "multidimension": 218, "t": [218, 223, 963], "techniqu": 219, "sphere": 220, "swiss": 222, "roll": [222, 373], "And": [222, 385], "hole": 222, "sne": [223, 963], "perplex": 223, "shape": [223, 992], "anomali": 226, "object": [227, 252, 373, 382, 955, 966, 998, 1005], "confusionmatrixdisplai": [227, 682], "roccurvedisplai": [227, 687], "precisionrecalldisplai": [227, 685], "compact": 228, "rich": [228, 310], "html": 228, "isoton": [229, 394, 395, 620, 621, 622, 957, 1016, 1017, 1018, 1020, 1022, 1023], "johnson": [230, 978], "lindenstrauss": [230, 978], "bound": 230, "theoret": [230, 962], "explicit": 231, "map": [231, 303, 976], "rbf": [231, 328, 329, 406, 607, 964, 981, 999], "python": [231, 358, 377, 390, 981, 985, 986, 1014], "packag": [231, 986, 1020], "svr": [232, 336, 889, 981], "construct": [232, 397], "look": [232, 336], "complet": [234, 396], "advanc": 236, "With": [236, 1001], "togeth": [236, 266, 997, 1000], "grid": [237, 255, 257, 265, 268, 955, 996, 1001], "search": [237, 255, 257, 265, 268, 383, 955, 996, 1001], "over": 237, "roc": [238, 254, 266, 267, 309, 966], "api": [238, 239, 309, 312, 314, 358, 373, 378, 384, 392, 395, 406, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018], "svc": [238, 337, 888, 981], "introduc": 239, "set_output": [239, 314, 373], "concentr": 242, "variat": [242, 965], "gmm": [244, 245], "densiti": [246, 281, 282, 290, 402, 917, 981], "best": [247, 372, 382], "confus": [251, 396, 966], "behavior": 252, "indic": 252, "mani": [252, 314, 358, 382], "cv": [252, 353], "tradeoff": [254, 966], "det": [254, 966], "custom": [255, 325, 404, 976, 981], "refit": [255, 992], "balanc": [256, 966], "statist": [257, 986, 995, 998], "frequentist": 257, "practic": [257, 353, 372, 376, 962, 963, 970, 980, 981, 982], "equival": 257, "all": [257, 266, 313, 387, 997, 1023, 1024], "take": 257, "home": 257, "messag": 257, "ratio": [260, 966], "pre": [260, 353, 383], "post": [260, 347], "respect": 260, "preval": 260, "cross_val_scor": [261, 805], "nest": [262, 397, 996], "see": [262, 397], "also": [262, 375, 397], "signific": 263, "precis": [264, 966], "recal": [264, 966], "In": 264, "binari": [264, 962, 966], "averag": [264, 266, 396, 403, 966], "micro": [264, 266], "each": [264, 269, 342, 955], "f1": 264, "receiv": [266, 267, 966], "oper": [266, 267, 370, 380, 406, 966], "characterist": [266, 267, 966], "specif": [266, 369, 373, 390, 955, 986, 987], "ovr": 266, "macro": 266, "ovo": 266, "success": [268, 269, 311, 955], "halv": [268, 269, 311, 955], "candid": [269, 955], "amount": [269, 955], "resourc": [269, 358, 371, 955, 985, 989], "underfit": 271, "overfit": 271, "tsne": [277, 677], "1d": 282, "novelti": [283, 972, 981], "lof": [283, 284], "default": [284, 371], "neighborhood": [285, 286, 287, 969], "centroid": [288, 969], "mlpclassifi": [294, 840], "mlp": 295, "restrict": [296, 971], "boltzmann": [296, 971], "scaler": 299, "standardscal": [299, 863], "minmaxscal": [299, 853], "maxabsscal": [299, 852], "robustscal": [299, 861], "powertransform": [299, 859], "quantiletransform": [299, 860], "uniform": [299, 976], "kbinsdiscret": [300, 302, 848], "continu": [300, 371], "rescal": 304, "other": [305, 365, 382, 986, 1008], "intern": 306, "22": [309, 1018], "new": [309, 311, 312, 314, 371, 382, 985, 1008, 1009, 1011, 1012, 1013, 1014, 1015], "prune": [309, 347, 982], "datafram": [309, 382], "compat": [309, 371, 373, 392], "auc": [309, 691], "now": [309, 312, 1018], "23": [310, 1019], "stabil": 310, "improv": [310, 311, 312, 313, 314, 370, 371, 1011, 1012], "histogram": [310, 312, 314, 402, 403], "24": [311, 1020], "histgradientboost": 311, "self": [311, 320, 979], "sequentialfeatureselector": [311, 587], "polynomialcountsketch": [311, 625], "decisiontreeregressor": [311, 892], "keyword": [312, 1019, 1021], "argument": [312, 373, 1019, 1021], "more": [312, 366, 382, 390, 970], "flexibl": [312, 956], "stabl": 312, "histgradientboostingregressor": [313, 547], "get_feature_names_out": 313, "avail": [313, 955, 1004, 1005], "group": [313, 400, 990, 1000], "infrequ": [313, 976], "onehotencod": [313, 856], "minibatchnmf": [313, 523], "version": [313, 365, 369, 375, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "bisectingkmean": [313, 428], "divid": 313, "panda": [314, 376, 382], "enhanc": [314, 385, 986, 1011, 1012, 1013, 1014, 1015], "faster": [314, 403], "parser": [314, 365], "fetch_openml": [314, 481], "experiment": [314, 375, 392, 395, 564, 565], "arrai": [314, 380, 392, 992], "lineardiscriminantanalysi": [314, 534], "effici": [314, 380], "most": 317, "uncertain": 317, "activ": 318, "threshold": 320, "linearsvc": [327, 883, 981], "unbalanc": [331, 981], "some": 332, "plai": 332, "percentil": 332, "case": [337, 962, 966], "tie": 338, "break": 338, "word": [342, 404, 1001], "metadata": 342, "strip": 342, "quantifi": [343, 966], "qualiti": [343, 966], "tfidfvector": [343, 344, 576], "lsa": 343, "top": [343, 966], "term": [343, 384, 404], "per": 343, "hashingvector": [343, 404, 574], "featurehash": [344, 567], "dictvector": [344, 566], "special": 344, "purpos": [344, 987], "cost": [347, 982], "leav": [347, 400, 962], "understand": 351, "recommend": [353, 366, 986], "inconsist": 353, "leakag": 353, "dure": 353, "avoid": [353, 397], "control": [353, 403, 970], "none": 353, "randomst": 353, "instanc": [353, 359], "repeat": [353, 397, 400], "call": [353, 370], "splitter": [353, 395], "subtleti": 353, "get": [353, 382, 383], "reproduc": [353, 376], "across": 353, "execut": [353, 382], "configur": [357, 358], "overhead": 357, "input": [357, 373, 392, 396, 976], "tip": [357, 372, 379, 955, 963, 970, 980, 981, 982], "trick": [357, 377, 379, 404], "algebra": [357, 380], "librari": [357, 358], "reshap": [357, 998], "link": [357, 365, 966], "manag": [358, 387], "higher": 358, "joblib": [358, 377], "lower": 358, "openmp": [358, 372], "numpi": [358, 376], "scipi": 358, "oversubscript": 358, "spawn": 358, "too": 358, "thread": 358, "switch": 358, "environ": 358, "sklearn_assume_finit": 358, "sklearn_working_memori": 358, "sklearn_se": 358, "sklearn_tests_global_random_se": 358, "sklearn_skip_network_test": 358, "sklearn_run_float32_test": 358, "sklearn_enable_debug_cython_direct": 358, "sklearn_build_enable_debug_symbol": 358, "sklearn_pairwise_dist_chunk_s": 358, "computation": 359, "bigger": 359, "stream": 359, "note": [359, 397, 400, 962], "tabl": [360, 382], "Of": 360, "content": [360, 382, 992], "util": [364, 376, 380, 395, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 1001, 1005, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "svmlight": 365, "format": [365, 376, 382, 390, 967], "org": [365, 375, 990], "repositori": 365, "arff": 365, "extern": [365, 985, 992, 1008, 1017], "olivetti": 366, "usag": [366, 377, 382, 392, 394, 397, 403, 404, 962], "convert": 366, "filter": 366, "realist": 366, "consider": [366, 962], "wild": 366, "covertyp": 366, "rcv1": 366, "kddcup": 366, "99": 366, "california": 366, "plant": 368, "linnerrud": 368, "wine": 368, "wisconsin": 368, "diagnost": 368, "instal": [369, 387], "nightli": 369, "runtim": 369, "tag": [369, 371, 373], "edit": 369, "platform": [369, 379, 387], "instruct": 369, "window": [369, 387], "maco": 369, "compil": [369, 377], "conda": 369, "forg": 369, "homebrew": 369, "linux": [369, 382, 387], "system": 369, "freebsd": 369, "altern": [369, 955], "bug": [370, 371, 375, 989, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "triag": 370, "issu": [370, 371], "curat": 370, "fruit": 370, "pr": [370, 375], "help": [370, 371, 382], "review": [370, 371, 379, 1001], "member": 370, "close": 370, "tough": 370, "typic": 370, "workflow": [370, 371], "contribut": [371, 382], "submit": 371, "report": [371, 376, 966], "request": [371, 375, 379, 382], "good": [371, 376], "video": [371, 985], "git": 371, "pull": [371, 375, 379, 382], "checklist": [371, 375], "integr": 371, "ci": 371, "stall": 371, "unclaim": 371, "easi": 371, "want": 371, "guidelin": [371, 373], "write": 371, "referenc": 371, "github": 371, "action": 371, "coverag": [371, 379, 966], "matplotlib": 371, "monitor": 371, "tracker": [371, 989], "maintain": [371, 375, 385, 390], "backward": 371, "deprec": [371, 395, 910, 1018], "chang": [371, 385, 990, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "read": 371, "exist": 371, "cython": [372, 377, 379], "convent": [372, 992], "knowledg": 372, "eas": 372, "instanti": 373, "attribut": [373, 384, 955], "option": 373, "univers": 373, "your": [373, 376, 966], "own": [373, 382, 966], "templat": 373, "baseestim": [373, 410], "mixin": 373, "get_param": 373, "set_param": 373, "init": 373, "clone": [373, 419], "assert": 373, "guid": [374, 1003], "major": [375, 403, 1016, 1017], "minor": 375, "known": [375, 1016, 1017], "merg": 375, "web": 375, "site": 375, "craft": 376, "minim": [376, 982, 1021, 1022], "provid": 376, "fail": 376, "comment": 376, "boil": 376, "down": 376, "script": 376, "someth": 376, "small": 376, "do": [376, 382], "NOT": 376, "unless": 376, "i": [376, 382, 400, 990], "extrem": [376, 403], "necessari": 376, "markdown": 376, "make_regress": [376, 509], "make_classif": [376, 500], "make_blob": [376, 497], "optim": [377, 395, 955, 963], "c": 377, "profil": 377, "extens": [377, 387], "yep": 377, "gperftool": 377, "debugg": 377, "gdb": 377, "gprof": 377, "valgrind": [377, 379], "callgrind": 377, "kcachegrind": 377, "warm": 377, "restart": 377, "overview": [378, 396, 972], "ax": 378, "saniti": 379, "preserv": 379, "fold": [379, 400], "unfold": 379, "outdat": 379, "diff": 379, "remot": 379, "track": 379, "branch": 379, "pytest": 379, "alias": 379, "flag": 379, "standard": [379, 976], "repli": 379, "debug": 379, "arm64": 379, "x86_64": 379, "tool": [380, 382], "matric": [380, 976], "warn": [380, 395], "except": [380, 395, 556, 557, 558, 559, 560, 561, 562, 563, 1020, 1024], "dispatch": 381, "frequent": 382, "ask": 382, "question": [382, 989], "what": 382, "lot": 382, "peopl": [382, 1008, 1009, 1010, 1011], "pronounc": 382, "why": [382, 403], "pypi": 382, "deep": 382, "reinforc": 382, "Will": 382, "add": 382, "graphic": [382, 971], "did": 382, "remov": [382, 405, 976, 1008], "hmm": 382, "gpu": 382, "need": 382, "doe": 382, "directli": 382, "plan": 382, "so": 382, "my": 382, "ani": 382, "attent": 382, "inclus": 382, "includ": 382, "should": 382, "save": 382, "export": 382, "deploi": 382, "bunch": [382, 898], "usabl": 382, "deal": 382, "string": 382, "sometim": 382, "crash": 382, "freez": 382, "n_job": 382, "osx": [382, 387], "job": 382, "than": 382, "random_st": 382, "entir": 382, "start": 383, "processor": 383, "next": 383, "glossari": 384, "element": 384, "concept": [384, 962], "properti": 384, "role": 385, "technic": 385, "committe": 385, "propos": 385, "slep": 385, "latest": 387, "appl": 387, "silicon": 387, "m1": 387, "hardwar": 387, "alpin": 387, "arch": 387, "debian": 387, "ubuntu": 387, "fedora": 387, "netbsd": 387, "macport": 387, "mac": 387, "anaconda": 387, "enthought": 387, "deploy": 387, "intel": 387, "winpython": 387, "troubleshoot": 387, "caus": 387, "persist": 390, "serial": 390, "secur": 390, "skop": 390, "interoper": [390, 986], "pytorch": 392, "mathemat": [393, 396, 403, 958, 960, 962, 969, 970, 973, 980, 981, 982], "formul": [393, 396, 403, 960, 962, 969, 970, 980, 981, 982], "sigmoid": [394, 964], "sklearn": [395, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "compos": [395, 449, 450, 451, 452, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "cross_decomposit": [395, 467, 468, 469, 470, 1018, 1020, 1022], "loader": 395, "discriminant_analysi": [395, 534, 535, 1016, 1017, 1020, 1022, 1023, 1024], "dummi": [395, 536, 537, 966, 1016, 1017, 1018, 1021, 1022], "feature_extract": [395, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "feature_select": [395, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "gaussian_process": [395, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "kernel_approxim": [395, 623, 624, 625, 626, 627, 1018, 1020, 1021, 1022, 1023], "kernel_ridg": [395, 628], "linear_model": [395, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "classic": [395, 965], "glm": 395, "interfac": 395, "model_select": [395, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "naive_bay": [395, 818, 819, 820, 821, 822, 1016, 1018, 1019, 1020, 1021, 1023, 1024], "neural_network": [395, 839, 840, 841, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "random_project": [395, 875, 876, 877, 1022], "semi_supervis": [395, 878, 879, 880, 1018, 1019, 1020, 1024], "recent": 395, "low": [396, 403, 405], "mini": [396, 401], "batch": [396, 401], "assign": 396, "featureagglomer": [396, 430], "hierarchi": 396, "ad": 396, "connect": [396, 404, 1000], "consumpt": 396, "larg": [396, 404], "size": [396, 403], "reachabl": 396, "rand": 396, "index": [396, 926], "advantag": 396, "drawback": 396, "homogen": 396, "fowlk": 396, "mallow": 396, "calinski": 396, "harabasz": 396, "davi": 396, "bouldin": 396, "conting": 396, "pair": 396, "access": 397, "featureunion": [397, 842], "columntransform": [397, 449], "shrunk": 398, "oracl": 398, "plscanon": [399, 468], "plssvd": [399, 470], "plsregress": [399, 469], "held": 400, "cross_valid": [400, 806], "obtain": 400, "d": [400, 969], "loo": 400, "p": [400, 990], "lpo": 400, "shuffl": [400, 940], "stratif": 400, "stratifi": 400, "stratifiedgroupkfold": [400, 799], "predefin": [400, 966], "decompos": 401, "exact": 401, "sparsepca": [401, 528], "kpca": 401, "choic": [401, 965, 969], "truncat": 401, "semant": 401, "nnmf": 401, "frobeniu": 401, "norm": 401, "beta": 401, "diverg": 401, "addit": [403, 958], "weak": 403, "learner": 403, "rate": 403, "subsampl": 403, "hard": 403, "soft": 403, "dict": 404, "detail": [404, 958, 962, 980, 981], "tf": 404, "idf": 404, "decod": 404, "applic": [404, 1000], "corpu": 404, "selectfrommodel": [405, 582], "recoveri": 405, "biclustermixin": 411, "classnameprefixfeaturesoutmixin": 412, "classifiermixin": 413, "clustermixin": 414, "densitymixin": 415, "onetoonefeaturemixin": 416, "regressormixin": 417, "transformermixin": 418, "is_classifi": 420, "is_regressor": 421, "calibratedclassifiercv": 422, "calibrationdisplai": 423, "from_estim": [423, 616, 617, 682, 683, 685, 686, 687, 787], "calibration_curv": 424, "affinitypropag": 425, "agglomerativeclust": 426, "spectralbiclust": 436, "spectralclust": 437, "spectralcoclust": 438, "affinity_propag": 439, "cluster_optics_dbscan": 440, "cluster_optics_xi": 441, "compute_optics_graph": 442, "estimate_bandwidth": 443, "k_mean": 444, "kmeans_plusplu": 445, "mean_shift": 446, "spectral_clust": 447, "ward_tre": 448, "transformedtargetregressor": 450, "make_column_selector": 451, "make_column_transform": 452, "config_context": 453, "ellipticenvelop": 454, "empiricalcovari": 455, "graphicallasso": 456, "graphicallassocv": 457, "mincovdet": 459, "shrunkcovari": 461, "empirical_covari": 462, "graphical_lasso": 463, "ledoit_wolf": 464, "ledoit_wolf_shrinkag": 465, "shrunk_covari": 466, "clear_data_hom": 471, "dump_svmlight_fil": 472, "fetch_20newsgroup": 473, "fetch_20newsgroups_vector": 474, "fetch_california_h": 475, "fetch_covtyp": 476, "fetch_kddcup99": 477, "fetch_lfw_pair": 478, "fetch_lfw_peopl": 479, "fetch_olivetti_fac": 480, "fetch_rcv1": 482, "fetch_species_distribut": 483, "get_data_hom": 484, "load_breast_canc": 485, "load_diabet": 486, "load_digit": 487, "load_fil": 488, "load_iri": 489, "load_linnerud": 490, "load_sample_imag": [491, 492], "load_svmlight_fil": [493, 494], "load_win": 495, "make_biclust": 496, "make_checkerboard": 498, "make_circl": 499, "make_friedman1": 501, "make_friedman2": 502, "make_friedman3": 503, "make_gaussian_quantil": 504, "make_hastie_10_2": 505, "make_low_rank_matrix": 506, "make_moon": 507, "make_multilabel_classif": 508, "make_s_curv": 510, "make_sparse_coded_sign": 511, "make_sparse_spd_matrix": 512, "make_sparse_uncorrel": 513, "make_spd_matrix": 514, "make_swiss_rol": 515, "dictionarylearn": 516, "factoranalysi": 517, "incrementalpca": 519, "latentdirichletalloc": 521, "minibatchdictionarylearn": 522, "sparsecod": 527, "truncatedsvd": 529, "dict_learn": 530, "dict_learning_onlin": 531, "non_negative_factor": 532, "sparse_encod": 533, "quadraticdiscriminantanalysi": 535, "dummyclassifi": 536, "dummyregressor": 537, "adaboostclassifi": 538, "adaboostregressor": 539, "baggingclassifi": 540, "baggingregressor": 541, "extratreesclassifi": 542, "extratreesregressor": 543, "gradientboostingclassifi": 544, "gradientboostingregressor": 545, "histgradientboostingclassifi": 546, "randomforestclassifi": 549, "randomforestregressor": 550, "randomtreesembed": 551, "stackingclassifi": 552, "stackingregressor": 553, "votingregressor": 555, "convergencewarn": 556, "dataconversionwarn": 557, "datadimensionalitywarn": 558, "efficiencywarn": 559, "fitfailedwarn": 560, "inconsistentversionwarn": 561, "notfittederror": 562, "undefinedmetricwarn": 563, "enable_halving_search_cv": 564, "enable_iterative_imput": 565, "patchextractor": 568, "extract_patches_2d": 569, "grid_to_graph": 570, "img_to_graph": 571, "reconstruct_from_patches_2d": 572, "countvector": 573, "tfidftransform": 575, "genericunivariateselect": 577, "rfe": 578, "rfecv": 579, "selectfdr": 580, "selectfpr": 581, "selectfw": 583, "selectkbest": 584, "selectpercentil": 585, "selectormixin": 586, "variancethreshold": 588, "chi2": 589, "f_classif": 590, "f_regress": 591, "mutual_info_classif": 592, "mutual_info_regress": 593, "r_regress": 594, "gaussianprocessclassifi": 595, "gaussianprocessregressor": 596, "compoundkernel": 597, "constantkernel": 598, "dotproduct": 599, "expsinesquar": 600, "exponenti": 601, "matern": 604, "pairwisekernel": 605, "rationalquadrat": 608, "sum": 609, "whitekernel": 610, "get_config": 611, "knnimput": 613, "missingind": 614, "simpleimput": 615, "decisionboundarydisplai": 616, "partialdependencedisplai": 617, "partial_depend": 618, "permutation_import": 619, "isotonicregress": 620, "check_increas": 621, "isotonic_regress": 622, "additivechi2sampl": 623, "nystroem": [624, 958], "rbfsampler": 626, "skewedchi2sampl": 627, "kernelridg": 628, "ardregress": 629, "bayesianridg": 630, "elasticnetcv": 632, "gammaregressor": 633, "larscv": 636, "lassocv": 638, "lassolar": 639, "lassolarscv": 640, "lassolars": 641, "logisticregress": 643, "logisticregressioncv": 644, "multitaskelasticnet": 645, "multitaskelasticnetcv": 646, "multitasklasso": 647, "multitasklassocv": 648, "orthogonalmatchingpursuit": 649, "orthogonalmatchingpursuitcv": 650, "passiveaggressiveclassifi": 651, "passiveaggressiveregressor": 652, "poissonregressor": 654, "ransacregressor": 656, "ridgecv": 658, "ridgeclassifi": 659, "ridgeclassifiercv": 660, "sgdclassifi": 661, "sgdoneclasssvm": 662, "sgdregressor": 663, "theilsenregressor": 664, "enet_path": 666, "lars_path": 667, "lars_path_gram": 668, "lasso_path": 669, "orthogonal_mp": 670, "orthogonal_mp_gram": 671, "ridge_regress": 672, "locallylinearembed": 674, "md": [675, 963], "spectralembed": 676, "locally_linear_embed": 678, "smacof": 679, "spectral_embed": 680, "trustworthi": 681, "from_predict": [682, 685, 686, 687], "detcurvedisplai": 683, "distancemetr": 684, "predictionerrordisplai": 686, "accuracy_scor": 688, "adjusted_mutual_info_scor": 689, "adjusted_rand_scor": 690, "average_precision_scor": 692, "balanced_accuracy_scor": 693, "brier_score_loss": 694, "calinski_harabasz_scor": 695, "check_scor": 696, "class_likelihood_ratio": 697, "classification_report": 698, "contingency_matrix": 699, "pair_confusion_matrix": 700, "cohen_kappa_scor": 701, "completeness_scor": 702, "confusion_matrix": 703, "consensus_scor": 704, "coverage_error": 705, "d2_absolute_error_scor": 706, "d2_pinball_scor": 707, "d2_tweedie_scor": 708, "davies_bouldin_scor": 709, "dcg_score": 710, "det_curv": 711, "explained_variance_scor": 712, "f1_score": 713, "fbeta_scor": 714, "fowlkes_mallows_scor": 715, "get_scor": 716, "get_scorer_nam": 717, "hamming_loss": 718, "hinge_loss": 719, "homogeneity_completeness_v_measur": 720, "homogeneity_scor": 721, "jaccard_scor": 722, "label_ranking_average_precision_scor": 723, "label_ranking_loss": 724, "log_loss": 725, "make_scor": 726, "matthews_corrcoef": 727, "max_error": 728, "mean_absolute_error": 729, "mean_absolute_percentage_error": 730, "mean_gamma_devi": 731, "mean_pinball_loss": 732, "mean_poisson_devi": 733, "mean_squared_error": 734, "mean_squared_log_error": 735, "mean_tweedie_devi": 736, "median_absolute_error": 737, "multilabel_confusion_matrix": 738, "mutual_info_scor": 739, "ndcg_score": 740, "normalized_mutual_info_scor": 741, "additive_chi2_kernel": 742, "chi2_kernel": 743, "cosine_dist": 744, "cosine_similar": 745, "distance_metr": 746, "euclidean_dist": 747, "haversine_dist": 748, "kernel_metr": 749, "laplacian_kernel": 750, "linear_kernel": 751, "manhattan_dist": 752, "nan_euclidean_dist": 753, "paired_cosine_dist": 754, "paired_dist": 755, "paired_euclidean_dist": 756, "paired_manhattan_dist": 757, "pairwise_kernel": 758, "polynomial_kernel": 759, "rbf_kernel": 760, "sigmoid_kernel": 761, "pairwise_dist": 762, "pairwise_distances_argmin": 763, "pairwise_distances_argmin_min": 764, "pairwise_distances_chunk": 765, "precision_recall_curv": 766, "precision_recall_fscore_support": 767, "precision_scor": 768, "r2_score": 769, "rand_scor": 770, "recall_scor": 771, "roc_auc_scor": 772, "roc_curv": 773, "silhouette_sampl": 774, "silhouette_scor": 775, "top_k_accuracy_scor": 776, "v_measure_scor": 777, "zero_one_loss": 778, "bayesiangaussianmixtur": [779, 965], "gaussianmixtur": [780, 965], "groupkfold": 782, "groupshufflesplit": 783, "halvinggridsearchcv": 784, "halvingrandomsearchcv": 785, "kfold": 786, "learningcurvedisplai": 787, "leaveonegroupout": 788, "leaveoneout": 789, "leavepgroupsout": 790, "leavepout": 791, "parametergrid": 792, "parametersampl": 793, "predefinedsplit": 794, "randomizedsearchcv": 795, "repeatedkfold": 796, "repeatedstratifiedkfold": 797, "shufflesplit": 798, "stratifiedkfold": 800, "stratifiedshufflesplit": 801, "timeseriessplit": 802, "check_cv": 803, "cross_val_predict": 804, "learning_curv": 807, "permutation_test_scor": 808, "train_test_split": 809, "validation_curv": 810, "onevsoneclassifi": [811, 967], "onevsrestclassifi": [812, 967], "outputcodeclassifi": [813, 967], "classifierchain": [814, 967], "multioutputclassifi": [815, 967], "multioutputregressor": [816, 967], "regressorchain": [817, 967], "bernoullinb": 818, "categoricalnb": 819, "complementnb": 820, "gaussiannb": 821, "multinomialnb": 822, "balltre": [823, 969], "kdtree": [824, 969], "kneighborsclassifi": 825, "kneighborsregressor": 826, "kneighborstransform": 827, "kerneldens": 828, "localoutlierfactor": 829, "nearestcentroid": 830, "nearestneighbor": 831, "neighborhoodcomponentsanalysi": 832, "radiusneighborsclassifi": 833, "radiusneighborsregressor": 834, "radiusneighborstransform": 835, "kneighbors_graph": 836, "radius_neighbors_graph": 837, "sort_graph_by_row_valu": 838, "bernoullirbm": 839, "mlpregressor": 841, "make_pipelin": 844, "make_union": 845, "binar": [846, 866, 976, 977], "functiontransform": 847, "kernelcenter": 849, "labelbinar": [850, 977], "labelencod": 851, "multilabelbinar": [854, 977], "ordinalencod": 857, "polynomialfeatur": 858, "splinetransform": 862, "targetencod": 864, "add_dummy_featur": 865, "label_binar": 867, "maxabs_scal": 868, "minmax_scal": 869, "power_transform": 871, "quantile_transform": 872, "robust_scal": 873, "gaussianrandomproject": 875, "sparserandomproject": 876, "johnson_lindenstrauss_min_dim": 877, "labelpropag": 878, "labelspread": 879, "selftrainingclassifi": 880, "set_config": 881, "show_vers": 882, "linearsvr": [884, 981], "nusvc": [885, 981], "nusvr": 886, "oneclasssvm": 887, "l1_min_c": 890, "decisiontreeclassifi": 891, "extratreeclassifi": 893, "extratreeregressor": 894, "export_graphviz": 895, "export_text": 896, "plot_tre": 897, "_safe_index": 899, "arrayfunc": 900, "min_po": 900, "as_float_arrai": 901, "assert_all_finit": 902, "check_x_i": 903, "check_arrai": 904, "check_consistent_length": 905, "check_random_st": 906, "check_scalar": 907, "class_weight": [908, 909], "compute_class_weight": 908, "compute_sample_weight": 909, "discoveri": [911, 912, 913], "all_displai": 911, "all_estim": 912, "all_funct": 913, "estimator_check": [914, 915], "check_estim": 914, "parametrize_with_check": 915, "estimator_html_repr": 916, "extmath": [917, 918, 919, 920, 921, 922], "fast_logdet": 918, "randomized_range_find": 919, "randomized_svd": 920, "safe_sparse_dot": 921, "weighted_mod": 922, "gen_batch": 923, "gen_even_slic": 924, "single_source_shortest_path_length": 925, "metaestim": 927, "available_if": 927, "is_multilabel": 928, "type_of_target": 929, "unique_label": 930, "murmurhash3_32": 931, "delai": 933, "parallel_backend": 934, "sample_without_replac": 935, "register_parallel_backend": 936, "resampl": 937, "safe_mask": 938, "safe_sqr": 939, "sparsefunc": [941, 942, 943, 944, 945, 946, 947, 1017], "incr_mean_variance_axi": 941, "inplace_column_scal": 942, "inplace_csr_column_scal": 943, "inplace_row_scal": 944, "inplace_swap_column": 945, "inplace_swap_row": 946, "mean_variance_axi": 947, "sparsefuncs_fast": [948, 949], "inplace_csr_row_normalize_l1": 948, "inplace_csr_row_normalize_l2": 949, "check_is_fit": 950, "check_memori": 951, "check_symmetr": 952, "column_or_1d": 953, "has_fit_paramet": 954, "exhaust": 955, "min_resourc": 955, "aggress": [955, 962], "analyz": 955, "cv_results_": 955, "brute": [955, 969], "forc": [955, 969], "keep": 956, "mark": 956, "nan": 956, "chi": [958, 964], "skew": 958, "tensor": 958, "sketch": 958, "qda": 960, "omp": 962, "liblinear": 962, "passiv": 962, "scenario": 962, "trade": 962, "off": 962, "which": 962, "consensu": 962, "median": [962, 966], "huber": 962, "extend": 962, "introduct": [963, 992], "modifi": 963, "hessian": 963, "eigenmap": 963, "tangent": 963, "align": 963, "nonmetr": 963, "barn": 963, "hut": 963, "cosin": 964, "laplacian": 964, "pro": 965, "con": 965, "maxim": 965, "rule": 966, "cohen": 966, "kappa": 966, "ham": 966, "jaccard": 966, "hing": 966, "matthew": 966, "zero": 966, "brier": 966, "discount": 966, "cumul": 966, "gain": 966, "r\u00b2": 966, "absolut": 966, "logarithm": 966, "percentag": 966, "explain": 966, "pinbal": 966, "d\u00b2": 966, "complement": 968, "bernoulli": [968, 971], "unsupervis": [969, 971, 983, 1000, 1002], "find": 969, "ball": 969, "leaf_siz": 969, "shrunken": 969, "warm_start": 970, "parametr": 971, "up": 972, "ellipt": 972, "envelop": 972, "isol": 972, "outlin": 974, "mislead": 974, "strongli": 974, "rang": 976, "whiten": 976, "bin": 976, "lemma": 978, "unlabel": 979, "entri": 979, "id3": 982, "c4": 982, "5": [982, 1008], "c5": 982, "cart": 982, "welcom": 984, "talk": 985, "scientif": [985, 995], "framework": 986, "domain": 986, "translat": 986, "roadmap": 987, "thi": 987, "statement": 987, "2018": 987, "architectur": 987, "goal": 987, "subpackag": 987, "mail": 989, "user": [989, 1003], "gitter": 989, "who": 990, "j": 990, "morgan": 990, "spotifi": 990, "inria": 990, "betawork": 990, "hug": 990, "evernot": 990, "t\u00e9l\u00e9com": 990, "paristech": 990, "book": 990, "com": 990, "aweb": 990, "yhat": 990, "rangespan": 990, "birchbox": 990, "bestofmedia": 990, "phimeca": 990, "howaboutw": 990, "peerindex": 990, "datarobot": 990, "okcupid": 990, "love": 990, "publica": 990, "machinali": 990, "solido": 990, "infonea": 990, "dataiku": 990, "otto": 990, "zopa": 990, "mar": 990, "bnp": 990, "pariba": 990, "cardif": 990, "section": 992, "cast": 992, "updat": [992, 1018], "right": 994, "put": 997, "open": 997, "ship": 998, "would": 998, "high": 999, "solv": [999, 1000], "vocabulari": 999, "curs": 999, "iris": 999, "same": 999, "seek": 1000, "constrain": 1000, "inverse_transform": 1000, "setup": 1001, "token": 1001, "occurr": 1001, "languag": 1001, "identif": 1001, "sentiment": 1001, "movi": 1001, "cli": 1001, "where": 1001, "here": 1001, "12": 1008, "changelog": [1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "11": 1008, "9": 1008, "8": 1008, "7": 1008, "6": [1008, 1014], "modul": [1008, 1016, 1017, 1023, 1024], "misc": 1008, "4": [1008, 1016], "earlier": 1008, "13": 1009, "14": 1010, "15": 1011, "16": 1012, "17": 1013, "18": 1014, "last": 1014, "19": 1015, "21": 1017, "legend": [1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "post1": 1018, "websit": 1018, "clear": 1018, "public": 1018, "futurewarn": 1018, "enforc": [1019, 1021]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1008, "authors"], [1008, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [385, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [164, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [109, "concluding-remarks"], [222, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [25, "references"], [27, "references"], [81, "references"], [113, "references"], [173, "references"], [181, "references"], [185, null], [257, null], [290, "references"], [366, null], [366, null], [366, null], [368, null], [368, null], [368, null], [368, null], [368, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [404, null], [406, "references"], [956, "references"], [956, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [973, null], [976, null], [976, null], [979, null], [979, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [50, "load-the-data"], [123, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [186, "conclusion"], [306, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [49, "plot-results"], [78, "plot-results"], [96, "plot-results"], [97, "plot-results"], [284, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [357, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [329, "visualization"], [395, "visualization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[15, "computation-times"], [22, "computation-times"], [28, "computation-times"], [35, "computation-times"], [68, "computation-times"], [76, "computation-times"], [83, "computation-times"], [87, "computation-times"], [93, "computation-times"], [107, "computation-times"], [133, "computation-times"], [139, "computation-times"], [147, "computation-times"], [159, "computation-times"], [163, "computation-times"], [171, "computation-times"], [174, "computation-times"], [216, "computation-times"], [224, "computation-times"], [240, "computation-times"], [249, "computation-times"], [273, "computation-times"], [276, "computation-times"], [291, "computation-times"], [297, "computation-times"], [307, "computation-times"], [315, "computation-times"], [323, "computation-times"], [340, "computation-times"], [345, "computation-times"], [352, "computation-times"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Biclustering": [[18, "biclustering"], [164, "biclustering"], [367, "biclustering"], [393, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[23, "calibration"], [164, "calibration"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [176, "generate-synthetic-dataset"], [176, "id1"], [181, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Dataset": [[25, "dataset"], [27, "dataset"], [186, "dataset"], [263, "dataset"]], "Calibration curves": [[25, "calibration-curves"], [27, "calibration-curves"], [394, "calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [968, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [344, "summary"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Classification": [[29, "classification"], [32, "classification"], [157, "classification"], [164, "classification"], [403, "classification"], [403, "id18"], [962, "classification"], [969, "id4"], [970, "classification"], [980, "classification"], [981, "classification"], [982, "classification"], [999, "classification"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Classifier comparison": [[31, "classifier-comparison"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[34, "colormap"]], "Datasets generation functions": [[34, "datasets-generation-functions"]], "Plot functions": [[34, "plot-functions"]], "Plot": [[34, "plot"]], "Clustering": [[36, "clustering"], [164, "clustering"], [396, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Generate sample data": [[38, "generate-sample-data"], [55, "generate-sample-data"], [63, "generate-sample-data"], [78, "generate-sample-data"], [96, "generate-sample-data"], [97, "generate-sample-data"], [142, "generate-sample-data"], [232, "generate-sample-data"], [270, "generate-sample-data"], [289, "generate-sample-data"], [336, "generate-sample-data"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "Plot result": [[38, "plot-result"], [63, "plot-result"], [67, "plot-result"], [67, "id2"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[45, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[47, "generate-data"], [67, "generate-data"], [80, "generate-data"], [191, "generate-data"], [296, "generate-data"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Compute clustering": [[47, "compute-clustering"], [67, "compute-clustering"], [67, "id1"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Data generation": [[49, "data-generation"], [57, "data-generation"], [125, "data-generation"], [145, "data-generation"], [155, "data-generation"], [247, "data-generation"], [317, "data-generation"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Plot the results": [[50, "plot-the-results"], [82, "plot-the-results"], [132, "plot-the-results"], [162, "plot-the-results"]], "Feature agglomeration": [[51, "feature-agglomeration"], [983, "feature-agglomeration"], [1000, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Original image": [[53, "original-image"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Encoding strategy": [[53, "encoding-strategy"]], "Memory footprint": [[53, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[55, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[55, "scale-invariance"]], "Multi-Scale Clustering": [[55, "multi-scale-clustering"]], "Hyperparameter Robustness": [[55, "hyperparameter-robustness"]], "min_cluster_size": [[55, "min-cluster-size"]], "min_samples": [[55, "min-samples"]], "dbscan_clustering": [[55, "dbscan-clustering"]], "Inductive Clustering": [[56, "inductive-clustering"]], "Demonstration of k-means assumptions": [[57, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[57, "fit-models-and-plot-results"]], "Possible solutions": [[57, "possible-solutions"]], "Final remarks": [[57, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[58, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[58, "load-the-dataset"]], "Define our evaluation benchmark": [[58, "define-our-evaluation-benchmark"]], "Run the benchmark": [[58, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[58, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[59, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[60, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[61, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[62, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[63, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[63, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[64, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[64, "generate-the-data"], [66, "generate-the-data"], [82, "generate-the-data"]], "Compute clustering with KMeans": [[64, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[64, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[64, "establishing-parity-between-clusters"]], "Plotting the results": [[64, "plotting-the-results"], [109, "plotting-the-results"], [111, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[65, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[66, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[66, "plotting-four-circles"]], "Plotting two circles": [[66, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[67, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[67, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[69, "pipelines-and-composite-estimators"], [164, "pipelines-and-composite-estimators"], [397, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[70, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[70, "newsgroups-dataset"]], "Creating transformers": [[70, "creating-transformers"]], "Classification pipeline": [[70, "classification-pipeline"]], "Column Transformer with Mixed Types": [[71, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[72, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[72, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[72, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[73, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[74, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[75, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[75, "synthetic-example"]], "Real-world data set": [[75, "real-world-data-set"]], "Covariance estimation": [[77, "covariance-estimation"], [164, "covariance-estimation"], [398, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[78, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[78, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[78, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[79, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[80, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[80, null], [169, null], [262, null], [263, null], [365, null], [366, null], [393, null], [393, null], [393, null], [394, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [398, null], [398, null], [398, null], [398, null], [400, null], [400, null], [401, null], [401, null], [401, null], [401, null], [401, null], [401, null], [401, null], [401, null], [404, null], [405, null], [955, null], [955, null], [958, null], [959, null], [960, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [964, null], [964, null], [966, null], [966, null], [966, null], [966, null], [966, null], [966, null], [966, null], [966, null], [967, null], [967, null], [967, null], [968, null], [968, null], [968, null], [969, null], [969, null], [969, null], [970, null], [971, null], [972, null], [972, null], [972, null], [972, null], [974, null], [976, null], [976, null], [978, null], [978, null], [978, null], [980, null], [980, null], [981, null], [982, null], [982, null]], "Comparison of results": [[80, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[81, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[81, "minimum-covariance-determinant-estimator"]], "Evaluation": [[81, "evaluation"], [296, "evaluation"]], "Sparse inverse covariance estimation": [[82, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[82, "estimate-the-covariance"]], "Cross decomposition": [[84, "cross-decomposition"], [164, "cross-decomposition"], [399, "cross-decomposition"]], "Compare cross decomposition methods": [[85, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[85, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[85, "canonical-symmetric-pls"]], "Transform data": [[85, "transform-data"]], "Scatter plot of scores": [[85, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[85, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[85, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[85, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[86, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[86, "the-data"]], "Projection on one component and predictive power": [[86, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[88, "dataset-examples"], [164, "dataset-examples"]], "The Digit Dataset": [[89, "the-digit-dataset"]], "The Iris Dataset": [[90, "the-iris-dataset"]], "Plot randomly generated classification dataset": [[91, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[92, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[94, "decomposition"], [95, "decomposition"], [164, "decomposition"]], "Faces dataset decompositions": [[95, "faces-dataset-decompositions"]], "Dataset preparation": [[95, "dataset-preparation"], [218, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[95, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[95, "non-negative-components-nmf"]], "Independent components - FastICA": [[95, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[95, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[95, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[95, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[95, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[95, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[95, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[95, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[95, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[96, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[96, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[97, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[98, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[98, "generate-distorted-image"]], "Display the distorted image": [[98, "display-the-distorted-image"]], "Extract reference patches": [[98, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[98, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[98, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[99, "incremental-pca"], [401, "incremental-pca"]], "Kernel PCA": [[100, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[100, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[100, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[101, "principal-components-analysis-pca"]], "Create the data": [[101, "create-the-data"], [103, "create-the-data"]], "Plot the figures": [[101, "plot-the-figures"]], "PCA example with Iris Data-set": [[102, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[103, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[103, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[104, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[105, "sparse-coding-with-a-precomputed-dictionary"], [401, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[106, "factor-analysis-with-rotation-to-visualize-patterns"]], "Ensemble methods": [[108, "ensemble-methods"], [164, "ensemble-methods"], [403, "ensemble-methods"]], "Discrete versus Real AdaBoost": [[109, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[109, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[109, "adaboost-with-discrete-samme-and-real-samme-r"]], "Multi-class AdaBoosted Decision Trees": [[110, "multi-class-adaboosted-decision-trees"]], "Decision Tree Regression with AdaBoost": [[111, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[111, "preparing-the-data"], [173, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[111, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[112, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[113, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[114, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[115, "feature-transformations-with-ensembles-of-trees"]], "Feature importances with a forest of trees": [[116, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[116, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[116, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[116, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[117, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[117, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[117, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[118, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[119, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[119, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[119, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[119, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[119, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[119, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[119, "model-comparison"]], "Limiting the number of splits": [[119, "limiting-the-number-of-splits"]], "Early stopping of Gradient Boosting": [[120, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[120, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[120, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[121, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[122, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[122, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[122, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[122, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[122, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[123, "gradient-boosting-regression"]], "Data preprocessing": [[123, "data-preprocessing"]], "Fit regression model": [[123, "fit-regression-model"], [289, "fit-regression-model"], [336, "fit-regression-model"]], "Plot training deviance": [[123, "plot-training-deviance"]], "Plot feature importance": [[123, "plot-feature-importance"]], "Gradient Boosting regularization": [[124, "gradient-boosting-regularization"]], "IsolationForest example": [[125, "isolationforest-example"]], "Training of the model": [[125, "training-of-the-model"]], "Plot discrete decision boundary": [[125, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[125, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[126, "monotonic-constraints"], [403, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[126, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[127, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[128, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[129, "combine-predictors-using-stacking"]], "Download the dataset": [[129, "download-the-dataset"]], "Make pipeline to preprocess the data": [[129, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[129, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[129, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[130, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[131, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[132, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[132, "training-classifiers"]], "Making predictions": [[132, "making-predictions"]], "Tutorial exercises": [[134, "tutorial-exercises"], [164, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[135, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[135, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[135, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[135, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[136, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[137, "digits-classification-exercise"]], "SVM Exercise": [[138, "svm-exercise"]], "Feature Selection": [[140, "feature-selection"], [164, "feature-selection"]], "Comparison of F-test and mutual information": [[141, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[142, "univariate-feature-selection"]], "Univariate feature selection": [[142, "id1"], [405, "univariate-feature-selection"]], "Compare with SVMs": [[142, "compare-with-svms"]], "Pipeline ANOVA SVM": [[143, "pipeline-anova-svm"]], "Recursive feature elimination": [[144, "recursive-feature-elimination"], [405, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[145, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[145, "model-training-and-selection"], [247, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[145, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[146, "model-based-and-sequential-feature-selection"]], "Loading the data": [[146, "loading-the-data"]], "Feature importance from coefficients": [[146, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[146, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[146, "selecting-features-with-sequential-feature-selection"]], "Discussion": [[146, "discussion"]], "Gaussian Process for Machine Learning": [[148, "gaussian-process-for-machine-learning"], [164, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[149, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[149, "generating-a-dataset"]], "Limitations of a simple linear model": [[149, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[149, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[149, "kernel-ridge"]], "Gaussian process regression": [[149, "gaussian-process-regression"]], "Final conclusion": [[149, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[150, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[151, "gaussian-process-classification-gpc-on-iris-dataset"], [406, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[152, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[153, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[154, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[154, "build-the-dataset"]], "Design the proper kernel": [[154, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[154, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[154, "interpretation-of-kernel-hyperparameters"]], "Gaussian process regression (GPR) with noise-level estimation": [[155, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[155, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[156, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[156, "dataset-generation"], [199, "dataset-generation"]], "Example with noise-free target": [[156, "example-with-noise-free-target"]], "Example with noisy targets": [[156, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[157, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[157, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[157, "regression"], [403, "regression"], [403, "id17"], [962, "regression"], [970, "regression"], [980, "regression"], [981, "regression"], [982, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[158, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[158, "helper-function"]], "Dataset and Gaussian process generation": [[158, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[158, "kernel-cookbook"]], "Radial Basis Function kernel": [[158, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[158, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[158, "exp-sine-squared-kernel"], [406, "exp-sine-squared-kernel"]], "Dot-product kernel": [[158, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[158, "matern-kernel"], [406, "matern-kernel"]], "Missing Value Imputation": [[160, "missing-value-imputation"], [164, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[161, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[162, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[162, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[162, "impute-the-missing-data-and-score"]], "Missing information": [[162, "missing-information"]], "Estimate the score": [[162, "estimate-the-score"]], "Replace missing values by 0": [[162, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[162, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[162, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[162, "iterative-imputation-of-the-missing-values"]], "Examples": [[164, "examples"], [359, "examples"], [366, null], [366, "examples"], [400, null], [400, null], [405, null], [405, null], [979, null], [979, null], [983, null], [983, null], [983, null], [1008, "examples"]], "Release Highlights": [[164, "release-highlights"], [308, "release-highlights"]], "Decision Trees": [[164, "decision-trees"], [346, "decision-trees"], [982, "decision-trees"]], "Gaussian Mixture Models": [[164, "gaussian-mixture-models"], [241, "gaussian-mixture-models"]], "Generalized Linear Models": [[164, "generalized-linear-models"], [175, "generalized-linear-models"], [962, "generalized-linear-models"]], "Inspection": [[164, "inspection"], [165, "inspection"], [386, "inspection"]], "Kernel Approximation": [[164, "kernel-approximation"], [172, "kernel-approximation"], [958, "kernel-approximation"]], "Manifold learning": [[164, "manifold-learning"], [217, "manifold-learning"], [963, "manifold-learning"]], "Miscellaneous": [[164, "miscellaneous"], [225, "miscellaneous"], [395, "miscellaneous"], [1016, "miscellaneous"], [1016, "id40"], [1017, "miscellaneous"], [1018, "miscellaneous"], [1019, "miscellaneous"], [1019, "id13"], [1020, "miscellaneous"], [1021, "miscellaneous"]], "Model Selection": [[164, "model-selection"], [250, "model-selection"]], "Multioutput methods": [[164, "multioutput-methods"], [274, "multioutput-methods"]], "Nearest Neighbors": [[164, "nearest-neighbors"], [278, "nearest-neighbors"], [969, "nearest-neighbors"]], "Neural Networks": [[164, "neural-networks"], [292, "neural-networks"]], "Preprocessing": [[164, "preprocessing"], [298, "preprocessing"]], "Semi Supervised Classification": [[164, "semi-supervised-classification"], [316, "semi-supervised-classification"]], "Support Vector Machines": [[164, "support-vector-machines"], [324, "support-vector-machines"], [981, "support-vector-machines"]], "Working with text documents": [[164, "working-with-text-documents"], [341, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[166, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[166, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[166, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[166, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[166, "income-prediction-with-partial-observations"]], "Lessons learned": [[166, "lessons-learned"], [167, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[167, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[167, "the-dataset-wages"]], "The machine-learning pipeline": [[167, "the-machine-learning-pipeline"]], "Processing the dataset": [[167, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[167, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[167, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[167, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[167, "preprocessing-numerical-variables"]], "Linear models with regularization": [[167, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[167, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[167, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[168, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[168, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[168, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[168, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[168, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[168, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[168, "multi-layer-perceptron"]], "Gradient boosting": [[168, "gradient-boosting"]], "Analysis of the plots": [[168, "analysis-of-the-plots"]], "ICE vs. PDP": [[168, "ice-vs-pdp"]], "2D interaction plots": [[168, "d-interaction-plots"]], "3D representation": [[168, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[169, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[169, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[169, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[169, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[170, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[170, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[170, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[173, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[173, "partitioning-the-data"]], "Feature normalization": [[173, "feature-normalization"]], "Establishing a baseline model": [[173, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[173, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[173, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[173, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[176, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[176, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[176, "fit-the-regressors"], [176, "id2"]], "Plot the true and estimated coefficients": [[176, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[176, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[176, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[176, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[177, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[177, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[177, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[177, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[178, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[179, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[180, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[181, "l1-based-models-for-sparse-signals"]], "Lasso": [[181, "lasso"], [962, "lasso"]], "Automatic Relevance Determination (ARD)": [[181, "automatic-relevance-determination-ard"]], "ElasticNet": [[181, "elasticnet"]], "Plot and analysis of the results": [[181, "plot-and-analysis-of-the-results"]], "Conclusions": [[181, "conclusions"]], "Lasso and Elastic Net": [[182, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[183, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[183, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[183, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[184, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[185, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[186, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[186, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[186, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[186, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[186, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[186, "summary-of-cross-validation-approach"]], "Logistic function": [[187, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[188, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[189, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[190, "regularization-path-of-l1-logistic-regression"]], "Load data": [[190, "load-data"]], "Compute regularization path": [[190, "compute-regularization-path"]], "Plot regularization path": [[190, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[191, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[191, "fit-models"]], "Plot support and time series": [[191, "plot-support-and-time-series"]], "Non-negative least squares": [[192, "non-negative-least-squares"]], "Linear Regression Example": [[193, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[194, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[195, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[196, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[197, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[197, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[197, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[197, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[197, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[197, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[197, "evaluation-of-the-ranking-power"]], "Main takeaways": [[197, "main-takeaways"]], "Polynomial and Spline interpolation": [[198, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[198, "periodic-splines"]], "Quantile regression": [[199, "quantile-regression"]], "Fitting a QuantileRegressor": [[199, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[199, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[200, "robust-linear-model-estimation-using-ransac"]], "Plot Ridge coefficients as a function of the L2 regularization": [[201, "plot-ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Plot Ridge coefficients as a function of the regularization": [[202, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[202, "compute-paths"]], "Display results": [[202, "display-results"]], "Robust linear estimator fitting": [[203, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[204, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[205, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[206, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[207, "sgd-convex-loss-functions"]], "SGD: Penalties": [[208, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[209, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[210, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[211, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[212, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[213, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[214, "theil-sen-regression"]], "Outliers only in the y direction": [[214, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[214, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[215, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[215, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[215, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[215, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[215, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[218, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[218, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[218, "locally-linear-embeddings"]], "Isomap Embedding": [[218, "isomap-embedding"]], "Multidimensional scaling": [[218, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[218, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[218, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[219, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[219, "load-digits-dataset"]], "Helper function to plot embedding": [[219, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[219, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[220, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[221, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[222, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[222, "swiss-roll"]], "Swiss-Hole": [[222, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[223, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[226, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[227, "visualizations-with-display-objects"]], "Load Data and train model": [[227, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[227, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[227, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[227, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[227, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[228, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[228, "compact-text-representation"]], "Rich HTML representation": [[228, "rich-html-representation"]], "Isotonic Regression": [[229, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[230, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[230, "theoretical-bounds"]], "Empirical validation": [[230, "empirical-validation"]], "Remarks": [[230, "remarks"]], "Explicit feature map approximation for RBF kernels": [[231, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[231, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[231, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[231, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[232, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[232, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[232, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[232, "look-at-the-results"], [336, "look-at-the-results"]], "Visualize training and prediction times": [[232, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[232, "visualize-the-learning-curves"]], "Multilabel classification": [[233, "multilabel-classification"], [967, "multilabel-classification"]], "Face completion with a multi-output estimators": [[234, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[235, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[235, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[235, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[235, "plot-and-interpret-results"]], "Advanced Plotting With Partial Dependence": [[236, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[236, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[236, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[236, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[236, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[237, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[237, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[237, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[237, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[237, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[237, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[238, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[238, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[238, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[238, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[239, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[242, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[243, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[244, "gmm-covariances"]], "GMM Initialization Methods": [[245, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[246, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[247, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[247, "plot-the-bic-scores"]], "Plot the best model": [[247, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[248, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[251, "confusion-matrix"], [966, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[252, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[252, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[252, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[252, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[253, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[254, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[254, "generate-synthetic-data"]], "Define the classifiers": [[254, "define-the-classifiers"]], "Plot ROC and DET curves": [[254, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[255, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[255, "the-dataset"]], "Define our grid-search strategy": [[255, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[255, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[256, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[257, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[257, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[257, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[257, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[257, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[257, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[257, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[258, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[258, "data-loading"]], "Pipeline with hyperparameter tuning": [[258, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[259, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[259, "learning-curve"]], "Complexity analysis": [[259, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[260, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[260, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[260, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[260, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[261, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[261, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[261, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[262, "nested-versus-non-nested-cross-validation"]], "See Also:": [[262, null], [397, null]], "Test with permutations the significance of a classification score": [[263, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[263, "permutation-test-score"], [400, "permutation-test-score"]], "Original data": [[263, "original-data"], [299, "original-data"]], "Random data": [[263, "random-data"]], "Precision-Recall": [[264, "precision-recall"]], "In binary classification settings": [[264, "in-binary-classification-settings"]], "Dataset and model": [[264, "dataset-and-model"]], "Plot the Precision-Recall curve": [[264, "plot-the-precision-recall-curve"]], "In multi-label settings": [[264, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[264, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[264, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[264, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[264, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[265, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[266, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[266, "load-and-prepare-data"], [267, "load-and-prepare-data"], [304, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[266, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[266, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[266, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[266, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[266, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[266, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[266, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[266, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[267, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[267, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[268, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[269, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[269, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[270, "train-error-vs-test-error"]], "Compute train and test errors": [[270, "compute-train-and-test-errors"]], "Plot results functions": [[270, "plot-results-functions"]], "Underfitting vs. Overfitting": [[271, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[272, "plotting-validation-curves"]], "Classifier Chain": [[275, "classifier-chain"]], "Approximate nearest neighbors in TSNE": [[277, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[279, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[280, "nearest-neighbors-classification"], [969, "nearest-neighbors-classification"]], "Kernel Density Estimation": [[281, "kernel-density-estimation"], [402, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[282, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[283, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[284, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[284, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[284, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[285, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[286, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[287, "neighborhood-components-analysis-illustration"]], "Original points": [[287, "original-points"]], "Learning an embedding": [[287, "learning-an-embedding"]], "Nearest Centroid Classification": [[288, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[289, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[290, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[293, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[294, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[295, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[296, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[296, "models-definition"]], "Training": [[296, "training"], [969, "training"]], "Plotting": [[296, "plotting"], [395, "plotting"], [395, "id7"], [395, "id9"]], "Compare the effect of different scalers on data with outliers": [[299, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[299, "standardscaler"]], "MinMaxScaler": [[299, "minmaxscaler"]], "MaxAbsScaler": [[299, "maxabsscaler"]], "RobustScaler": [[299, "robustscaler"]], "PowerTransformer": [[299, "powertransformer"]], "QuantileTransformer (uniform output)": [[299, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[299, "quantiletransformer-gaussian-output"]], "Normalizer": [[299, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[300, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[301, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[302, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[303, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[304, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[304, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[304, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[304, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[305, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[305, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[305, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[305, "native-categorical-feature-support"]], "Plotting the Results": [[305, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross Validation": [[306, "target-encoder-s-internal-cross-validation"]], "Create Synthetic Dataset": [[306, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[306, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[309, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[309, "new-plotting-api"]], "Stacking Classifier and Regressor": [[309, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[309, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[309, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[309, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[309, "knn-based-imputation"]], "Tree pruning": [[309, "tree-pruning"]], "Retrieve dataframes from OpenML": [[309, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[309, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[309, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[310, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[310, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[310, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[310, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[310, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[310, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[311, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[311, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[311, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[311, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[311, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[311, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[311, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[311, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[311, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[311, "new-documentation-improvements"], [312, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[312, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[312, "keyword-and-positional-arguments"]], "Spline Transformers": [[312, "spline-transformers"]], "Quantile Regressor": [[312, "quantile-regressor"]], "Feature Names Support": [[312, "feature-names-support"]], "A more flexible plotting API": [[312, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[312, "online-one-class-svm"], [980, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[312, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[313, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[313, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[313, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[313, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[313, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[313, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[313, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[314, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[314, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[314, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[314, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[314, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[314, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[314, "improved-efficiency-of-many-estimators"]], "Label Propagation digits: Demonstrating performance": [[317, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[317, "semi-supervised-learning"], [979, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[317, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[318, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[319, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[320, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[321, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[322, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[325, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[326, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[327, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[328, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[329, "rbf-svm-parameters"]], "Load and prepare data set": [[329, "load-and-prepare-data-set"]], "Train classifiers": [[329, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[330, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[331, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[332, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[332, "load-some-data-to-play-with"]], "Create the pipeline": [[332, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[332, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "SVM-Kernels": [[333, "svm-kernels"]], "SVM Margins Example": [[334, "svm-margins-example"]], "Non-linear SVM": [[335, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[336, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[337, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[337, "l1-penalty-case"]], "L2-penalty case": [[337, "l2-penalty-case"]], "SVM Tie Breaking Example": [[338, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[339, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[342, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[342, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[342, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[342, "model-without-metadata-stripping"]], "Model with metadata stripping": [[342, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[342, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[342, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[343, "clustering-text-documents-using-k-means"]], "Loading text data": [[343, "loading-text-data"]], "Quantifying the quality of clustering results": [[343, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[343, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[343, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[343, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[343, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[343, "top-terms-per-cluster"]], "HashingVectorizer": [[343, "hashingvectorizer"]], "Clustering evaluation summary": [[343, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[344, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[344, "load-data"]], "Define preprocessing functions": [[344, "define-preprocessing-functions"]], "DictVectorizer": [[344, "dictvectorizer"]], "FeatureHasher": [[344, "featurehasher"]], "Comparison with special purpose text vectorizers": [[344, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[344, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[347, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[347, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[347, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[348, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[349, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[350, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[351, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[351, "train-tree-classifier"]], "Tree structure": [[351, "tree-structure"]], "Decision path": [[351, "decision-path"]], "Common pitfalls and recommended practices": [[353, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[353, "inconsistent-preprocessing"]], "Data leakage": [[353, "data-leakage"]], "Data leakage during pre-processing": [[353, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[353, "how-to-avoid-data-leakage"]], "Controlling randomness": [[353, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[353, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Estimators": [[353, "estimators"], [353, "id2"], [373, "estimators"], [395, "estimators"]], "CV splitters": [[353, "cv-splitters"], [353, "id3"]], "Common pitfalls and subtleties": [[353, "common-pitfalls-and-subtleties"]], "General recommendations": [[353, "general-recommendations"]], "Getting reproducible results across multiple executions": [[353, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[353, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[356, "computing-with-scikit-learn"]], "Computational Performance": [[357, "computational-performance"]], "Bulk versus Atomic mode": [[357, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[357, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[357, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[357, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[357, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[357, "feature-extraction-latency"]], "Prediction Throughput": [[357, "prediction-throughput"]], "Tips and Tricks": [[357, "tips-and-tricks"]], "Linear algebra libraries": [[357, "linear-algebra-libraries"]], "Limiting Working Memory": [[357, "limiting-working-memory"]], "Model Compression": [[357, "model-compression"]], "Model Reshaping": [[357, "model-reshaping"]], "Links": [[357, "links"]], "Parallelism, resource management, and configuration": [[358, "parallelism-resource-management-and-configuration"]], "Parallelism": [[358, "parallelism"], [955, "parallelism"]], "Higher-level parallelism with joblib": [[358, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[358, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[358, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[358, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[358, "configuration-switches"]], "Python API": [[358, "python-api"]], "Environment variables": [[358, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[358, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[358, "sklearn-working-memory"]], "SKLEARN_SEED": [[358, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[358, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[358, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[358, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[358, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[358, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[358, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[359, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[359, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[359, "streaming-instances"]], "Extracting features": [[359, "extracting-features"]], "Incremental learning": [[359, "incremental-learning"]], "Notes": [[359, "notes"], [397, "notes"], [962, "notes"]], "Table Of Contents": [[360, "table-of-contents"]], "Dataset transformations": [[363, "dataset-transformations"]], "Dataset loading utilities": [[364, "dataset-loading-utilities"], [376, "dataset-loading-utilities"]], "Loading other datasets": [[365, "loading-other-datasets"]], "Sample images": [[365, "sample-images"]], "Examples:": [[365, null], [386, null], [393, null], [393, null], [394, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [397, null], [397, null], [397, null], [397, null], [397, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [399, null], [401, null], [401, null], [401, null], [401, null], [401, null], [401, null], [401, null], [401, null], [401, null], [401, null], [401, null], [401, null], [402, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [405, null], [405, null], [405, null], [405, null], [955, null], [955, null], [955, null], [958, null], [958, null], [960, null], [960, null], [960, null], [961, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [963, null], [965, null], [965, null], [965, null], [965, null], [966, null], [966, null], [966, null], [966, null], [966, null], [967, null], [969, null], [969, null], [969, null], [969, null], [969, null], [970, null], [970, null], [971, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [973, null], [974, null], [976, null], [976, null], [976, null], [980, null], [980, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [982, null], [982, null], [982, null], [982, null], [1005, null]], "Datasets in svmlight / libsvm format": [[365, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[365, null]], "Downloading datasets from the openml.org repository": [[365, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[365, "dataset-versions"]], "ARFF parser": [[365, "arff-parser"]], "Loading from external datasets": [[365, "loading-from-external-datasets"], [992, null]], "Real world datasets": [[366, "real-world-datasets"]], "The Olivetti faces dataset": [[366, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[366, "the-20-newsgroups-text-dataset"]], "Usage": [[366, "usage"], [366, "id2"], [394, "usage"], [397, "usage"], [397, "id1"], [403, "usage"], [403, "id26"], [403, "id32"], [403, "id33"], [403, "id35"], [962, "usage"]], "Converting text to vectors": [[366, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[366, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[366, null]], "Recommendation": [[366, null]], "The Labeled Faces in the Wild face recognition dataset": [[366, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[366, "forest-covertypes"]], "RCV1 dataset": [[366, "rcv1-dataset"]], "Kddcup 99 dataset": [[366, "kddcup-99-dataset"]], "California Housing dataset": [[366, "california-housing-dataset"]], "Generated datasets": [[367, "generated-datasets"]], "Generators for classification and clustering": [[367, "generators-for-classification-and-clustering"]], "Single label": [[367, "single-label"]], "Multilabel": [[367, "multilabel"]], "Generators for regression": [[367, "generators-for-regression"]], "Generators for manifold learning": [[367, "generators-for-manifold-learning"]], "Generators for decomposition": [[367, "generators-for-decomposition"]], "Toy datasets": [[368, "toy-datasets"]], "Iris plants dataset": [[368, "iris-plants-dataset"]], "Diabetes dataset": [[368, "diabetes-dataset"], [999, null]], "Optical recognition of handwritten digits dataset": [[368, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[368, "linnerrud-dataset"]], "Wine recognition dataset": [[368, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[368, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[369, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[369, "installing-nightly-builds"]], "Building from source": [[369, "building-from-source"]], "Dependencies": [[369, "dependencies"]], "Runtime dependencies": [[369, "runtime-dependencies"]], "Build dependencies": [[369, "build-dependencies"]], "Test dependencies": [[369, "test-dependencies"]], "Building a specific version from a tag": [[369, "building-a-specific-version-from-a-tag"]], "Editable mode": [[369, "editable-mode"]], "Platform-specific instructions": [[369, "platform-specific-instructions"]], "Windows": [[369, "windows"]], "macOS": [[369, "macos"]], "macOS compilers from conda-forge": [[369, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[369, "macos-compilers-from-homebrew"]], "Linux": [[369, "linux"]], "Linux compilers from the system": [[369, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[369, "linux-compilers-from-conda-forge"]], "FreeBSD": [[369, "freebsd"]], "Alternative compilers": [[369, "alternative-compilers"]], "Parallel builds": [[369, "parallel-builds"]], "Bug triaging and issue curation": [[370, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[370, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[370, null]], "Working on PRs to help review": [[370, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[370, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[370, null]], "A typical workflow for triaging issues": [[370, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[371, "contributing"], [382, "contributing"]], "Our community, our values": [[371, null]], "Ways to contribute": [[371, "ways-to-contribute"]], "Contributing to related projects": [[371, null]], "Submitting a bug report or a feature request": [[371, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[371, "how-to-make-a-good-bug-report"]], "Contributing code": [[371, "contributing-code"]], "Video resources": [[371, "video-resources"]], "How to contribute": [[371, "how-to-contribute"]], "Learning git:": [[371, null]], "Pull request checklist": [[371, "pull-request-checklist"]], "Continuous Integration (CI)": [[371, "continuous-integration-ci"]], "Stalled pull requests": [[371, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[371, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[371, "issues-for-new-contributors"]], "good first issue tag": [[371, null]], "Easy tag": [[371, null]], "help wanted tag": [[371, null]], "Documentation": [[371, "documentation"], [1008, "documentation"]], "Building the documentation": [[371, "building-the-documentation"]], "Guidelines for writing documentation": [[371, "guidelines-for-writing-documentation"]], "Cross-referencing": [[371, "cross-referencing"]], "Generated documentation on GitHub Actions": [[371, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[371, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[371, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[371, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[371, "monitoring-performance"]], "Issue Tracker Tags": [[371, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[371, "maintaining-backwards-compatibility"]], "Deprecation": [[371, "deprecation"]], "Change the default value of a parameter": [[371, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[371, "code-review-guidelines"]], "Communication Guidelines": [[371, "communication-guidelines"]], "Reading the existing code base": [[371, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[372, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[372, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[372, "tips-to-ease-development"]], "Tips for performance": [[372, "tips-for-performance"]], "Using OpenMP": [[372, "using-openmp"]], "Developing scikit-learn estimators": [[373, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[373, "apis-of-scikit-learn-objects"]], "Different objects": [[373, "different-objects"]], "Instantiation": [[373, "instantiation"]], "Fitting": [[373, "fitting"]], "Estimated Attributes": [[373, "estimated-attributes"]], "Optional Arguments": [[373, "optional-arguments"]], "Universal attributes": [[373, "universal-attributes"]], "Rolling your own estimator": [[373, "rolling-your-own-estimator"]], "Project template:": [[373, null]], "BaseEstimator and mixins:": [[373, null]], "get_params and set_params": [[373, "get-params-and-set-params"]], "Parameters and init": [[373, "parameters-and-init"]], "Cloning": [[373, "cloning"]], "Pipeline compatibility": [[373, "pipeline-compatibility"]], "Estimator types": [[373, "estimator-types"]], "Specific models": [[373, "specific-models"]], "Estimator Tags": [[373, "estimator-tags"]], "Developer API for set_output": [[373, "developer-api-for-set-output"]], "Coding guidelines": [[373, "coding-guidelines"]], "Input validation": [[373, "input-validation"]], "Random Numbers": [[373, "random-numbers"]], "Numerical assertions in tests": [[373, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[374, "developer-s-guide"]], "Maintainer / core-developer information": [[375, "maintainer-core-developer-information"]], "Releasing": [[375, "releasing"]], "Before a release": [[375, "before-a-release"]], "Preparing a release PR": [[375, "preparing-a-release-pr"]], "Major version release": [[375, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[375, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[375, "making-a-release"]], "Release checklist": [[375, "release-checklist"]], "Merging Pull Requests": [[375, "merging-pull-requests"]], "The scikit-learn.org web site": [[375, "the-scikit-learn-org-web-site"]], "Experimental features": [[375, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[376, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[376, "good-practices"]], "Provide a failing code example with minimal comments": [[376, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[376, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[376, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[376, "use-markdown-formatting"]], "Synthetic dataset": [[376, "synthetic-dataset"]], "NumPy": [[376, "numpy"]], "Pandas": [[376, "pandas"]], "make_regression": [[376, "make-regression"]], "make_classification": [[376, "make-classification"]], "make_blobs": [[376, "make-blobs"]], "How to optimize for speed": [[377, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[377, "python-cython-or-c-c"]], "Profiling Python code": [[377, "profiling-python-code"]], "Memory usage profiling": [[377, "memory-usage-profiling"]], "Using Cython": [[377, "using-cython"]], "Profiling compiled extensions": [[377, "profiling-compiled-extensions"]], "Using yep and gperftools": [[377, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[377, "using-a-debugger-gdb"]], "Using gprof": [[377, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[377, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[377, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[377, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[377, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[378, "developing-with-the-plotting-api"]], "Plotting API Overview": [[378, "plotting-api-overview"]], "Plotting with Multiple Axes": [[378, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[379, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[379, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[379, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[379, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[379, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[379, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[379, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[379, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[379, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[380, "utilities-for-developers"]], "Validation Tools": [[380, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[380, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[380, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[380, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[380, "graph-routines"]], "Testing Functions": [[380, "testing-functions"]], "Multiclass and multilabel utility function": [[380, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[380, "helper-functions"]], "Hash Functions": [[380, "hash-functions"]], "Warnings and Exceptions": [[380, "warnings-and-exceptions"]], "Dispatching": [[381, "dispatching"]], "Frequently Asked Questions": [[382, "frequently-asked-questions"]], "Table of Contents": [[382, "table-of-contents"]], "About the project": [[382, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[382, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[382, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[382, "why-scikit"]], "Do you support PyPy?": [[382, "do-you-support-pypy"]], "Implementation decisions": [[382, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[382, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[382, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[382, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[382, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[382, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[382, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[382, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[382, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[382, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[382, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[382, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[382, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[382, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[382, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[382, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[382, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[382, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[382, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[382, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[382, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[382, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[383, "getting-started"]], "Fitting and predicting: estimator basics": [[383, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[383, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[383, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[383, "model-evaluation"]], "Automatic parameter searches": [[383, "automatic-parameter-searches"]], "Next steps": [[383, "next-steps"]], "Glossary of Common Terms and API Elements": [[384, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[384, "general-concepts"]], "Class APIs and Estimator Types": [[384, "class-apis-and-estimator-types"]], "Target Types": [[384, "target-types"]], "Methods": [[384, "methods"]], "Parameters": [[384, "parameters"], [403, "parameters"]], "Attributes": [[384, "attributes"]], "Data and sample properties": [[384, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[385, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[385, "roles-and-responsibilities"]], "Contributors": [[385, "contributors"]], "Core Contributors": [[385, "core-contributors"]], "Communication team": [[385, "communication-team"]], "Maintainers": [[385, "maintainers"]], "Technical Committee": [[385, "technical-committee"]], "Decision Making Process": [[385, "decision-making-process"]], "Governance Model Changes": [[385, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[385, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[387, "installing-scikit-learn"]], "Installing the latest release": [[387, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[387, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[387, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[387, "alpine-linux"]], "Arch Linux": [[387, "arch-linux"]], "Debian/Ubuntu": [[387, "debian-ubuntu"]], "Fedora": [[387, "fedora"]], "NetBSD": [[387, "netbsd"]], "MacPorts for Mac OSX": [[387, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[387, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[387, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[387, "winpython-for-windows"]], "Troubleshooting": [[387, "troubleshooting"]], "Error caused by file path length limit on Windows": [[387, "error-caused-by-file-path-length-limit-on-windows"]], "Model persistence": [[390, "model-persistence"]], "Python specific serialization": [[390, "python-specific-serialization"]], "Security & maintainability limitations": [[390, "security-maintainability-limitations"]], "A more secure format: skops": [[390, "a-more-secure-format-skops"]], "Interoperable formats": [[390, "interoperable-formats"]], "Model selection and evaluation": [[391, "model-selection-and-evaluation"]], "Array API support (experimental)": [[392, "array-api-support-experimental"]], "Example usage": [[392, "example-usage"]], "PyTorch Support": [[392, "pytorch-support"]], "Estimators with support for Array API-compatible inputs": [[392, "estimators-with-support-for-array-api-compatible-inputs"]], "Spectral Co-Clustering": [[393, "spectral-co-clustering"]], "Mathematical formulation": [[393, "mathematical-formulation"], [393, "id3"], [396, "mathematical-formulation"], [396, "id16"], [396, "id23"], [396, "id33"], [396, "id37"], [403, "mathematical-formulation"], [962, "mathematical-formulation"], [969, "mathematical-formulation"], [970, "mathematical-formulation"], [980, "mathematical-formulation"], [981, "mathematical-formulation"], [982, "mathematical-formulation"]], "Spectral Biclustering": [[393, "spectral-biclustering"]], "Biclustering evaluation": [[393, "biclustering-evaluation"]], "Probability calibration": [[394, "probability-calibration"]], "Calibrating a classifier": [[394, "calibrating-a-classifier"]], "Sigmoid": [[394, "sigmoid"]], "Isotonic": [[394, "isotonic"]], "Multiclass support": [[394, "multiclass-support"]], "API Reference": [[395, "api-reference"]], "sklearn.base: Base classes and utility functions": [[395, "module-sklearn.base"]], "Base classes": [[395, "base-classes"]], "Functions": [[395, "functions"], [395, "id1"]], "sklearn.calibration: Probability Calibration": [[395, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[395, "module-sklearn.cluster"]], "Classes": [[395, "classes"]], "sklearn.compose: Composite Estimators": [[395, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[395, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[395, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[395, "module-sklearn.datasets"]], "Loaders": [[395, "loaders"]], "Samples generator": [[395, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[395, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[395, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[395, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[395, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[395, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[395, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[395, "module-sklearn.feature_extraction"]], "From images": [[395, "module-sklearn.feature_extraction.image"]], "From text": [[395, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[395, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[395, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[395, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[395, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[395, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[395, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[395, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[395, "module-sklearn.linear_model"]], "Linear classifiers": [[395, "linear-classifiers"]], "Classical linear regressors": [[395, "classical-linear-regressors"]], "Regressors with variable selection": [[395, "regressors-with-variable-selection"]], "Bayesian regressors": [[395, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[395, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[395, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[395, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[395, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[395, "sklearn-metrics-metrics"]], "Model Selection Interface": [[395, "model-selection-interface"]], "Classification metrics": [[395, "classification-metrics"], [966, "classification-metrics"]], "Regression metrics": [[395, "regression-metrics"], [966, "regression-metrics"]], "Multilabel ranking metrics": [[395, "multilabel-ranking-metrics"], [966, "multilabel-ranking-metrics"]], "Clustering metrics": [[395, "clustering-metrics"], [966, "clustering-metrics"]], "Biclustering metrics": [[395, "biclustering-metrics"]], "Distance metrics": [[395, "distance-metrics"]], "Pairwise metrics": [[395, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[395, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[395, "module-sklearn.model_selection"]], "Splitter Classes": [[395, "splitter-classes"]], "Splitter Functions": [[395, "splitter-functions"]], "Hyper-parameter optimizers": [[395, "hyper-parameter-optimizers"]], "Model validation": [[395, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[395, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[395, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[395, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[395, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[395, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[395, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[395, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[395, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[395, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[395, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[395, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[395, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[395, "module-sklearn.utils"]], "Recently deprecated": [[395, "recently-deprecated"]], "Input data": [[396, null]], "Overview of clustering methods": [[396, "overview-of-clustering-methods"]], "K-means": [[396, "k-means"]], "Low-level parallelism": [[396, "low-level-parallelism"], [403, "low-level-parallelism"]], "Mini Batch K-Means": [[396, "mini-batch-k-means"]], "Affinity Propagation": [[396, "affinity-propagation"]], "Mean Shift": [[396, "mean-shift"]], "Spectral clustering": [[396, "spectral-clustering"]], "Different label assignment strategies": [[396, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[396, "spectral-clustering-graphs"]], "Hierarchical clustering": [[396, "hierarchical-clustering"]], "FeatureAgglomeration": [[396, null]], "Different linkage type: Ward, complete, average, and single linkage": [[396, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[396, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[396, "adding-connectivity-constraints"]], "Varying the metric": [[396, "varying-the-metric"]], "Bisecting K-Means": [[396, "bisecting-k-means"]], "DBSCAN": [[396, "dbscan"]], "Implementation": [[396, null], [969, "implementation"]], "Memory consumption for large sample sizes": [[396, null]], "HDBSCAN": [[396, "hdbscan"]], "Mutual Reachability Graph": [[396, "mutual-reachability-graph"]], "Hierarchical Clustering": [[396, "id11"]], "OPTICS": [[396, "optics"]], "Comparison with DBSCAN": [[396, null]], "Computational Complexity": [[396, null]], "BIRCH": [[396, "birch"]], "Clustering performance evaluation": [[396, "clustering-performance-evaluation"]], "Rand index": [[396, "rand-index"]], "Advantages": [[396, "advantages"], [396, "id14"], [396, "id21"], [396, "id25"], [396, "id28"], [396, "id31"], [396, "id35"], [396, "id39"]], "Drawbacks": [[396, "drawbacks"], [396, "id15"], [396, "id22"], [396, "id26"], [396, "id29"], [396, "id32"], [396, "id36"], [396, "id40"]], "Mutual Information based scores": [[396, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[396, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[396, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[396, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[396, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[396, "davies-bouldin-index"]], "Contingency Matrix": [[396, "contingency-matrix"]], "Pair Confusion Matrix": [[396, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[397, "pipeline-chaining-estimators"]], "Construction": [[397, "construction"]], "Accessing steps": [[397, "accessing-steps"]], "Nested parameters": [[397, "nested-parameters"]], "Caching transformers: avoid repeated computation": [[397, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[397, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[397, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[397, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[397, "visualizing-composite-estimators"]], "Empirical covariance": [[398, "empirical-covariance"]], "Shrunk Covariance": [[398, "shrunk-covariance"]], "Basic shrinkage": [[398, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[398, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[398, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[398, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[398, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[398, "minimum-covariance-determinant"]], "PLSCanonical": [[399, "plscanonical"]], "Transforming data": [[399, "transforming-data"]], "Predicting the targets Y": [[399, "predicting-the-targets-y"]], "PLSSVD": [[399, "plssvd"]], "PLSRegression": [[399, "plsregression"]], "Canonical Correlation Analysis": [[399, "canonical-correlation-analysis"]], "Reference:": [[399, null]], "Cross-validation: evaluating estimator performance": [[400, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[400, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[400, null]], "The cross_validate function and multiple metric evaluation": [[400, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[400, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[400, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[400, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[400, "k-fold"]], "Repeated K-Fold": [[400, "repeated-k-fold"]], "Leave One Out (LOO)": [[400, "leave-one-out-loo"]], "Leave P Out (LPO)": [[400, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[400, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[400, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[400, "stratified-k-fold"]], "Stratified Shuffle Split": [[400, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[400, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[400, "group-k-fold"]], "StratifiedGroupKFold": [[400, "stratifiedgroupkfold"]], "Leave One Group Out": [[400, "leave-one-group-out"]], "Leave P Groups Out": [[400, "leave-p-groups-out"]], "Group Shuffle Split": [[400, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[400, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[400, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[400, "cross-validation-of-time-series-data"]], "Time Series Split": [[400, "time-series-split"]], "A note on shuffling": [[400, "a-note-on-shuffling"]], "Cross validation and model selection": [[400, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[401, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[401, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[401, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[401, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[401, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[401, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[401, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[401, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[401, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[401, "dictionary-learning"]], "Generic dictionary learning": [[401, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[401, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[401, null]], "Factor Analysis": [[401, "factor-analysis"]], "Independent component analysis (ICA)": [[401, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[401, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[401, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[401, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[401, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[401, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[402, "density-estimation"]], "Density Estimation: Histograms": [[402, "density-estimation-histograms"]], "Bagging meta-estimator": [[403, "bagging-meta-estimator"]], "Forests of randomized trees": [[403, "forests-of-randomized-trees"]], "Random Forests": [[403, "random-forests"]], "Extremely Randomized Trees": [[403, "extremely-randomized-trees"]], "Parallelization": [[403, "parallelization"]], "Feature importance evaluation": [[403, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[403, "totally-random-trees-embedding"]], "AdaBoost": [[403, "adaboost"]], "Gradient Tree Boosting": [[403, "gradient-tree-boosting"]], "Fitting additional weak-learners": [[403, "fitting-additional-weak-learners"]], "Controlling the tree size": [[403, "controlling-the-tree-size"]], "Loss Functions": [[403, "loss-functions"]], "Shrinkage via learning rate": [[403, "shrinkage-via-learning-rate"]], "Subsampling": [[403, "subsampling"]], "Interpretation with feature importance": [[403, "interpretation-with-feature-importance"]], "Histogram-Based Gradient Boosting": [[403, "histogram-based-gradient-boosting"]], "Missing values support": [[403, "missing-values-support"]], "Sample weight support": [[403, "sample-weight-support"]], "Categorical Features Support": [[403, "categorical-features-support"]], "Interaction constraints": [[403, "interaction-constraints"]], "Why it\u2019s faster": [[403, "why-it-s-faster"]], "Voting Classifier": [[403, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[403, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[403, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[403, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[403, "voting-regressor"]], "Stacked generalization": [[403, "stacked-generalization"]], "Feature extraction": [[404, "feature-extraction"]], "Loading features from dicts": [[404, "loading-features-from-dicts"]], "Feature hashing": [[404, "feature-hashing"]], "Implementation details": [[404, "implementation-details"], [980, "implementation-details"], [981, "implementation-details"]], "Text feature extraction": [[404, "text-feature-extraction"]], "The Bag of Words representation": [[404, "the-bag-of-words-representation"]], "Sparsity": [[404, "sparsity"], [999, "sparsity"]], "Common Vectorizer usage": [[404, "common-vectorizer-usage"]], "Using stop words": [[404, "using-stop-words"]], "Tf\u2013idf term weighting": [[404, "tfidf-term-weighting"]], "Decoding text files": [[404, "decoding-text-files"]], "Applications and examples": [[404, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[404, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[404, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[404, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[404, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[404, "image-feature-extraction"]], "Patch extraction": [[404, "patch-extraction"]], "Connectivity graph of an image": [[404, "connectivity-graph-of-an-image"]], "Feature selection": [[405, "feature-selection"]], "Removing features with low variance": [[405, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[405, null]], "Feature selection using SelectFromModel": [[405, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[405, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[405, "compressive-sensing"]], "Tree-based feature selection": [[405, "tree-based-feature-selection"]], "Sequential Feature Selection": [[405, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[405, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[406, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[406, "gaussian-process-regression-gpr"]], "GPR examples": [[406, "gpr-examples"]], "GPR with noise-level estimation": [[406, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[406, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[406, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[406, "gaussian-process-classification-gpc"]], "GPC examples": [[406, "gpc-examples"]], "Probabilistic predictions with GPC": [[406, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[406, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[406, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[406, "gaussian-process-kernel-api"]], "Basic kernels": [[406, "basic-kernels"]], "Kernel operators": [[406, "kernel-operators"]], "Radial basis function (RBF) kernel": [[406, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[406, "rational-quadratic-kernel"]], "Dot-Product kernel": [[406, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[407, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[408, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[409, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[410, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[410, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[411, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[412, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[413, "sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[414, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[415, "sklearn-base-densitymixin"]], "sklearn.base.OneToOneFeatureMixin": [[416, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.RegressorMixin": [[417, "sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[418, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[418, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[419, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[420, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[421, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[422, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[422, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[423, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[423, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[424, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[425, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[425, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[426, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[426, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[427, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[427, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[428, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[428, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[429, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[429, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[430, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[430, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[431, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[431, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[432, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[432, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[433, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[433, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[434, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[434, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[435, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[435, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[436, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[436, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[437, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[437, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[438, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[438, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[439, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[439, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[440, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[440, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[441, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[442, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[443, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[443, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[444, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[445, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[445, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[446, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[447, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[447, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[448, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[449, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[449, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[450, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[450, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[451, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[451, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[452, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[452, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[453, "sklearn-config-context"]], "Examples using sklearn.config_context": [[453, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[454, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[454, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[455, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[455, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[456, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[457, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[457, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[458, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[458, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[459, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[459, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[460, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[460, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[461, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[461, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[462, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[462, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[463, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[464, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[464, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[465, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[466, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[467, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[467, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[468, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[468, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[469, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[469, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[470, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[471, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[472, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[472, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[473, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[473, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[474, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[474, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[475, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[475, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[476, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[476, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[477, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[477, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[478, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[479, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[479, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[480, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[480, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[481, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[481, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[482, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[483, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[483, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[484, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[484, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[485, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[485, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[486, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[486, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[487, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[487, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[488, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[489, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[489, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[490, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[491, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[491, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[492, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[493, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[494, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[495, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[495, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[496, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[496, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[497, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[497, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[498, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[498, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[499, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[499, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[500, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[500, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[501, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[502, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[503, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[504, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[504, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[505, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[505, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[506, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[507, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[507, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[508, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[508, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[509, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[509, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[510, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[510, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[511, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[511, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[512, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[512, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[513, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[514, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[515, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[515, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[516, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[517, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[517, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[518, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[518, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[519, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[519, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[520, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[520, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[521, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[521, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[522, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[522, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[523, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[523, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[524, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[524, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[525, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[525, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[526, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[526, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[527, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[527, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[528, "sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[529, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[529, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[530, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[531, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[532, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[533, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[534, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[534, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[535, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[535, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[536, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[536, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[537, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[537, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[538, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[538, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[539, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[539, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[540, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[541, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[541, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[542, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[542, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[543, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[543, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[544, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[544, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[545, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[545, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[546, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[546, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[547, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[547, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[548, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[548, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[549, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[549, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[550, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[550, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[551, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[551, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[552, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[552, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[553, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[553, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[554, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[554, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[555, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[555, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[556, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[556, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[557, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[558, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[559, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[560, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[561, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[562, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[563, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[564, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[565, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[566, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[566, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[567, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[567, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[568, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[569, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[569, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[570, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[571, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[572, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[572, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[573, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[573, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[574, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[574, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[575, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[575, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[576, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[576, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[577, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[578, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[578, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[579, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[579, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[580, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[581, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[582, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[582, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[583, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[584, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[584, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[585, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[585, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[586, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[587, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[587, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[588, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[589, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[589, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[590, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[590, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[591, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[591, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[592, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[592, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[593, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[593, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[594, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[595, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[595, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[596, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[596, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[597, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[598, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[598, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[599, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[599, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[600, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[600, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[601, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[602, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[602, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[603, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[603, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[604, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[604, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[605, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[606, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[607, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[607, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[608, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[608, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[609, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[610, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[610, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[611, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[612, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[612, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[613, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[613, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[614, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[615, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[615, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[616, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[616, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[616, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[617, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[617, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[617, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[618, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[618, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[619, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[619, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[620, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[620, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[621, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[622, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[623, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[624, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[624, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[625, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[625, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[626, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[626, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[627, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[628, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[628, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[629, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[629, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[630, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[630, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[631, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[631, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[632, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[632, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[633, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[633, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[634, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[634, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[635, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[636, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[637, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[637, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[638, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[638, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[639, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[640, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[640, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[641, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[641, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[642, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[642, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[643, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[643, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[644, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[644, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[645, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[646, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[647, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[647, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[648, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[649, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[649, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[650, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[650, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[651, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[651, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[652, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[653, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[653, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[654, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[654, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[655, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[655, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[656, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[656, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[657, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[657, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[658, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[658, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[659, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[659, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[660, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[661, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[661, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[662, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[662, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[663, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[663, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[664, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[664, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[665, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[665, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[666, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[666, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[667, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[667, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[668, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[669, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[669, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[670, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[671, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[672, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[673, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[673, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[674, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[674, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[675, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[675, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[676, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[676, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[677, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[677, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[678, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[678, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[679, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[680, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[681, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[682, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[682, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[682, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[682, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[683, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[683, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[684, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[685, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[685, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[685, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[685, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[686, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[686, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[686, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[686, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[687, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[687, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[687, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[687, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[688, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[688, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[689, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[689, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[690, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[690, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[691, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[691, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[692, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[692, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[693, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[694, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[694, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[695, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[696, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[697, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[697, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[698, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[698, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[699, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[700, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[701, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[702, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[702, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[703, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[703, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[704, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[704, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[705, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[706, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[707, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[708, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[709, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[710, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[711, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[711, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[712, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[713, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[713, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[714, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[715, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[716, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[717, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[718, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[718, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[719, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[720, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[721, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[721, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[722, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[722, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[723, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[724, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[725, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[725, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[726, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[726, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[727, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[728, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[729, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[729, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[730, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[731, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[732, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[732, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[733, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[733, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[734, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[734, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[735, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[736, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[736, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[737, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[737, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[738, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[739, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[739, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[740, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[741, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[741, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[742, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[743, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[744, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[745, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[746, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[747, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[748, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[749, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[750, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[751, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[752, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[753, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[754, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[755, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[756, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[757, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[758, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[759, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[760, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[761, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[762, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[762, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[763, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[763, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[764, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[765, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[766, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[766, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[767, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[768, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[768, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[769, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[769, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[770, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[770, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[771, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[771, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[772, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[772, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[773, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[773, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.silhouette_samples": [[774, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[774, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[775, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[775, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[776, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[777, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[777, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[778, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[778, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[779, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[779, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[780, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[780, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[781, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[781, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[782, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[782, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[783, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[783, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[784, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[784, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[785, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[785, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[786, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[786, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[787, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[787, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[787, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[788, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[789, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[790, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[791, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[792, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[793, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[794, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[795, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[795, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[796, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[796, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[797, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[797, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[798, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[798, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[799, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[799, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[800, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[800, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[801, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[801, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[802, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[802, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.check_cv": [[803, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[804, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[804, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[805, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[805, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[806, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[806, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[807, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[807, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[808, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[808, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[809, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[809, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[810, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[810, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[811, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[812, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[812, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[813, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[814, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[814, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[815, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[816, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[816, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[817, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[818, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[818, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[819, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[820, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[820, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[821, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[821, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[822, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[822, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[823, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[824, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[825, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[825, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[826, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[826, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[827, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[827, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[828, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[828, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[829, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[829, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[830, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[830, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[831, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[831, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[832, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[832, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[833, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[834, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[835, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[836, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[836, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[837, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[838, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[839, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[839, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[840, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[840, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[841, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[841, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[842, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[842, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[843, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[843, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[844, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[844, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[845, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[846, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[847, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[847, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[848, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[848, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[849, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[850, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[850, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[851, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[852, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[852, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[853, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[853, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[854, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[855, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[855, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[856, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[856, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[857, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[857, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[858, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[858, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[859, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[859, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[860, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[860, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[861, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[861, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[862, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[862, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[863, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[863, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[864, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[864, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[865, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[866, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[867, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[867, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[868, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[869, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[869, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[870, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[871, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[872, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[872, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[873, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[874, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[875, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[876, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[876, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[877, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[877, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[878, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[879, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[879, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[880, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[880, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[881, "sklearn-set-config"]], "Examples using sklearn.set_config": [[881, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[882, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[883, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[883, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[884, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[885, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[885, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[886, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[886, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[887, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[887, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[888, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[888, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[889, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[889, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[890, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[890, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[891, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[891, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[892, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[892, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[893, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[894, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[895, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[896, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[897, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[897, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[898, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[898, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[899, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[900, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[901, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[902, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[903, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[904, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[905, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[906, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[906, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[907, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[908, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[909, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[910, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[911, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[912, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[913, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[914, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[915, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[915, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[916, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[917, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[917, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[918, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[919, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[920, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[921, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[922, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[923, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[924, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[924, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[925, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[926, "sklearn-utils-indexable"]], "sklearn.utils.metaestimators.available_if": [[927, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[927, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[928, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[929, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[930, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[931, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[932, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[933, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[934, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[935, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[936, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[937, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[938, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[939, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[940, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[940, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[941, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[942, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[943, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[944, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[945, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[946, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[947, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[948, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[949, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[950, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[950, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[951, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[952, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[953, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[954, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[955, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[955, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[955, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[955, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[955, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[955, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[955, "choosing-a-resource"]], "Exhausting the available resources": [[955, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[955, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[955, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[955, "tips-for-parameter-search"]], "Specifying an objective metric": [[955, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[955, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[955, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[955, "model-selection-development-and-evaluation"]], "Robustness to failure": [[955, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[955, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[955, "model-specific-cross-validation"]], "Information Criterion": [[955, "information-criterion"]], "Out of Bag Estimates": [[955, "out-of-bag-estimates"]], "Imputation of missing values": [[956, "imputation-of-missing-values"], [976, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[956, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[956, "univariate-feature-imputation"]], "Multivariate feature imputation": [[956, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[956, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[956, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[956, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[956, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[956, "marking-imputed-values"]], "Estimators that handle NaN values": [[956, "estimators-that-handle-nan-values"]], "Isotonic regression": [[957, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[958, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[958, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[958, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[958, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[958, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[958, "mathematical-details"]], "Kernel ridge regression": [[959, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[960, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[960, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[960, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[960, "qda"]], "LDA": [[960, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[960, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[960, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[960, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[961, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[961, "validation-curve"]], "Learning curve": [[961, "learning-curve"]], "Linear Models": [[962, "linear-models"]], "Ordinary Least Squares": [[962, "ordinary-least-squares"]], "Non-Negative Least Squares": [[962, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[962, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[962, "ridge-regression-and-classification"]], "Ridge Complexity": [[962, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[962, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[962, "setting-regularization-parameter"]], "Using cross-validation": [[962, "using-cross-validation"]], "Information-criteria based model selection": [[962, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[962, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[962, "multi-task-lasso"]], "Elastic-Net": [[962, "elastic-net"]], "Multi-task Elastic-Net": [[962, "multi-task-elastic-net"]], "Least Angle Regression": [[962, "least-angle-regression"]], "LARS Lasso": [[962, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[962, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[962, "bayesian-regression"]], "Bayesian Ridge Regression": [[962, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[962, "automatic-relevance-determination-ard"]], "Logistic regression": [[962, "logistic-regression"]], "Binary Case": [[962, "binary-case"]], "Multinomial Case": [[962, "multinomial-case"]], "Solvers": [[962, "solvers"]], "Differences from liblinear:": [[962, "liblinear-differences"]], "Practical considerations": [[962, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[962, "stochastic-gradient-descent-sgd"]], "Perceptron": [[962, "perceptron"]], "Passive Aggressive Algorithms": [[962, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[962, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[962, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[962, null]], "RANSAC: RANdom SAmple Consensus": [[962, "ransac-random-sample-consensus"]], "Details of the algorithm": [[962, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[962, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[962, "theoretical-considerations"]], "Huber Regression": [[962, "huber-regression"]], "Quantile Regression": [[962, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[962, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[963, "introduction"]], "Isomap": [[963, "isomap"]], "Complexity": [[963, "complexity"], [963, "id3"], [963, "id4"], [963, "id5"], [963, "id7"], [963, "id8"], [969, "complexity"], [970, "complexity"], [980, "complexity"], [981, "complexity"], [982, "complexity"]], "Locally Linear Embedding": [[963, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[963, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[963, "hessian-eigenmapping"]], "Spectral Embedding": [[963, "spectral-embedding"]], "Local Tangent Space Alignment": [[963, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[963, "multi-dimensional-scaling-mds"]], "Metric MDS": [[963, "metric-mds"]], "Nonmetric MDS": [[963, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[963, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[963, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[963, "barnes-hut-t-sne"]], "Tips on practical use": [[963, "tips-on-practical-use"], [982, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[964, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[964, "cosine-similarity"]], "Linear kernel": [[964, "linear-kernel"], [999, "linear-kernel"]], "Polynomial kernel": [[964, "polynomial-kernel"], [999, "polynomial-kernel"]], "Sigmoid kernel": [[964, "sigmoid-kernel"]], "RBF kernel": [[964, "rbf-kernel"]], "Laplacian kernel": [[964, "laplacian-kernel"]], "Chi-squared kernel": [[964, "chi-squared-kernel"]], "Gaussian mixture models": [[965, "gaussian-mixture-models"]], "Gaussian Mixture": [[965, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[965, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[965, "pros"], [965, "id2"]], "Cons": [[965, "cons"], [965, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[965, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[965, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[965, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[965, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[965, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[965, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[965, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[966, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[966, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[966, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[966, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[966, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[966, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[966, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[966, "accuracy-score"]], "Example:": [[966, null], [966, null], [966, null], [966, null], [966, null], [966, null], [966, null], [966, null], [978, null], [999, null]], "Top-k accuracy score": [[966, "top-k-accuracy-score"]], "Balanced accuracy score": [[966, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[966, "cohen-s-kappa"]], "Classification report": [[966, "classification-report"]], "Hamming loss": [[966, "hamming-loss"]], "Precision, recall and F-measures": [[966, "precision-recall-and-f-measures"]], "Binary classification": [[966, "binary-classification"]], "Multiclass and multilabel classification": [[966, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[966, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[966, "hinge-loss"]], "Log loss": [[966, "log-loss"]], "Matthews correlation coefficient": [[966, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[966, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[966, "receiver-operating-characteristic-roc"]], "Binary case": [[966, "binary-case"]], "Multi-class case": [[966, "multi-class-case"]], "Multi-label case": [[966, "multi-label-case"]], "Detection error tradeoff (DET)": [[966, "detection-error-tradeoff-det"]], "Zero one loss": [[966, "zero-one-loss"]], "Brier score loss": [[966, "brier-score-loss"]], "Class likelihood ratios": [[966, "class-likelihood-ratios"]], "Coverage error": [[966, "coverage-error"]], "Label ranking average precision": [[966, "label-ranking-average-precision"]], "Ranking loss": [[966, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[966, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[966, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[966, "mean-absolute-error"]], "Mean squared error": [[966, "mean-squared-error"]], "Mean squared logarithmic error": [[966, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[966, "mean-absolute-percentage-error"]], "Median absolute error": [[966, "median-absolute-error"]], "Max error": [[966, "max-error"]], "Explained variance score": [[966, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[966, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[966, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[966, "pinball-loss"]], "D\u00b2 score": [[966, "d2-score"]], "D\u00b2 Tweedie score": [[966, "d2-tweedie-score"]], "D\u00b2 pinball score": [[966, "d2-pinball-score"]], "D\u00b2 absolute error score": [[966, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[966, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[966, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[967, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[967, "multiclass-classification"], [999, null]], "Target format": [[967, "target-format"], [967, "id5"], [967, "id8"], [967, "id10"]], "OneVsRestClassifier": [[967, "onevsrestclassifier"]], "OneVsOneClassifier": [[967, "onevsoneclassifier"]], "OutputCodeClassifier": [[967, "outputcodeclassifier"]], "MultiOutputClassifier": [[967, "multioutputclassifier"]], "ClassifierChain": [[967, "classifierchain"]], "Multiclass-multioutput classification": [[967, "multiclass-multioutput-classification"]], "Multioutput regression": [[967, "multioutput-regression"]], "MultiOutputRegressor": [[967, "multioutputregressor"]], "RegressorChain": [[967, "regressorchain"]], "Naive Bayes": [[968, "naive-bayes"]], "Multinomial Naive Bayes": [[968, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[968, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[968, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[968, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[968, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[969, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[969, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[969, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[969, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[969, "nearest-neighbor-algorithms"]], "Brute Force": [[969, "brute-force"]], "K-D Tree": [[969, "k-d-tree"]], "Ball Tree": [[969, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[969, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[969, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[969, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[969, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[969, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[969, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[969, "neighborhood-components-analysis"]], "Dimensionality reduction": [[969, "dimensionality-reduction"]], "Mahalanobis distance": [[969, "mahalanobis-distance"]], "Transform": [[969, "transform"]], "Neural network models (supervised)": [[970, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[970, "multi-layer-perceptron"]], "Regularization": [[970, "regularization"]], "Algorithms": [[970, "algorithms"]], "Tips on Practical Use": [[970, "tips-on-practical-use"], [980, "tips-on-practical-use"], [981, "tips-on-practical-use"]], "More control with warm_start": [[970, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[971, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[971, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[971, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[971, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[971, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[972, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[972, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[972, "novelty-detection"]], "Scaling up the One-Class SVM": [[972, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[972, "id1"]], "Fitting an elliptic envelope": [[972, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[972, "isolation-forest"]], "Local Outlier Factor": [[972, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[972, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[973, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[973, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[973, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[973, "mathematical-definition"]], "Computation methods": [[973, "computation-methods"]], "Permutation feature importance": [[974, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[974, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[974, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[974, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[976, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[976, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[976, "scaling-features-to-a-range"]], "Scaling sparse data": [[976, "scaling-sparse-data"]], "Scaling data with outliers": [[976, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[976, null]], "Centering kernel matrices": [[976, "centering-kernel-matrices"]], "Non-linear transformation": [[976, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[976, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[976, "mapping-to-a-gaussian-distribution"]], "Normalization": [[976, "normalization"]], "Sparse input": [[976, null], [976, null]], "Encoding categorical features": [[976, "encoding-categorical-features"]], "Infrequent categories": [[976, "infrequent-categories"]], "Target Encoder": [[976, "target-encoder"]], "Discretization": [[976, "discretization"]], "K-bins discretization": [[976, "k-bins-discretization"]], "Feature binarization": [[976, "feature-binarization"]], "Generating polynomial features": [[976, "generating-polynomial-features"]], "Polynomial features": [[976, "polynomial-features"]], "Spline transformer": [[976, "spline-transformer"]], "Custom transformers": [[976, "custom-transformers"]], "Transforming the prediction target (y)": [[977, "transforming-the-prediction-target-y"]], "Label binarization": [[977, "label-binarization"]], "LabelBinarizer": [[977, "labelbinarizer"]], "MultiLabelBinarizer": [[977, "multilabelbinarizer"]], "Label encoding": [[977, "label-encoding"]], "Random Projection": [[978, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[978, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[978, "gaussian-random-projection"]], "Sparse random projection": [[978, "sparse-random-projection"]], "Inverse Transform": [[978, "inverse-transform"]], "Unlabeled entries in y": [[979, null]], "Self Training": [[979, "self-training"]], "Label Propagation": [[979, "label-propagation"]], "Stochastic Gradient Descent": [[980, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[980, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[980, "stopping-criterion"]], "SGD": [[980, "id5"]], "Multi-class classification": [[981, "multi-class-classification"]], "Scores and probabilities": [[981, "scores-and-probabilities"]], "Unbalanced problems": [[981, "unbalanced-problems"]], "Density estimation, novelty detection": [[981, "density-estimation-novelty-detection"]], "Kernel functions": [[981, "kernel-functions"]], "Parameters of the RBF Kernel": [[981, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[981, "custom-kernels"]], "Using Python functions as kernels": [[981, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[981, "using-the-gram-matrix"]], "SVC": [[981, "svc"]], "LinearSVC": [[981, "linearsvc"]], "NuSVC": [[981, "nusvc"]], "SVR": [[981, "svr"]], "LinearSVR": [[981, "linearsvr"]], "Multi-output problems": [[982, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[982, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[982, "classification-criteria"]], "Regression criteria": [[982, "regression-criteria"]], "Missing Values Support": [[982, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[982, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[983, "unsupervised-dimensionality-reduction"]], "Pipelining": [[983, null], [997, "pipelining"]], "PCA: principal component analysis": [[983, "pca-principal-component-analysis"]], "Random projections": [[983, "random-projections"]], "Feature scaling": [[983, null]], "Welcome to scikit-learn": [[984, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[985, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[985, "new-to-scientific-python"]], "External Tutorials": [[985, "external-tutorials"]], "Videos": [[985, "videos"]], "Related Projects": [[986, "related-projects"]], "Interoperability and framework enhancements": [[986, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[986, "other-estimators-and-tasks"]], "Statistical learning with Python": [[986, "statistical-learning-with-python"]], "Recommendation Engine packages": [[986, "recommendation-engine-packages"]], "Domain specific packages": [[986, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[986, "translations-of-scikit-learn-documentation"]], "Roadmap": [[987, "id1"]], "Purpose of this document": [[987, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[987, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[987, "architectural-general-goals"]], "Subpackage-specific goals": [[987, "subpackage-specific-goals"]], "Supervised learning": [[988, "supervised-learning"]], "Support": [[989, "support"]], "Mailing List": [[989, "mailing-list"]], "User questions": [[989, "user-questions"]], "Bug tracker": [[989, "bug-tracker"]], "Gitter": [[989, "gitter"]], "Documentation resources": [[989, "documentation-resources"]], "Who is using scikit-learn?": [[990, "who-is-using-scikit-learn"]], "J.P.Morgan": [[990, "id1"]], "Spotify": [[990, "id2"]], "Inria": [[990, "id3"]], "betaworks": [[990, "id4"]], "Hugging Face": [[990, "id5"]], "Evernote": [[990, "id6"]], "T\u00e9l\u00e9com ParisTech": [[990, "id7"]], "Booking.com": [[990, "id8"]], "AWeber": [[990, "id9"]], "Yhat": [[990, "id10"]], "Rangespan": [[990, "id11"]], "Birchbox": [[990, "id12"]], "Bestofmedia Group": [[990, "id13"]], "Change.org": [[990, "id14"]], "PHIMECA Engineering": [[990, "id15"]], "HowAboutWe": [[990, "id16"]], "PeerIndex": [[990, "id17"]], "DataRobot": [[990, "id18"]], "OkCupid": [[990, "id19"]], "Lovely": [[990, "id20"]], "Data Publica": [[990, "id21"]], "Machinalis": [[990, "id22"]], "solido": [[990, "id23"]], "INFONEA": [[990, "id24"]], "Dataiku": [[990, "id25"]], "Otto Group": [[990, "id26"]], "Zopa": [[990, "id27"]], "MARS": [[990, "id28"]], "BNP Paribas Cardif": [[990, "id29"]], "An introduction to machine learning with scikit-learn": [[992, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[992, null]], "Machine learning: the problem setting": [[992, "machine-learning-the-problem-setting"]], "Training set and testing set": [[992, null], [999, null]], "Loading an example dataset": [[992, "loading-an-example-dataset"]], "Shape of the data arrays": [[992, null]], "Learning and predicting": [[992, "learning-and-predicting"]], "Choosing the parameters of the model": [[992, null]], "Conventions": [[992, "conventions"]], "Type casting": [[992, "type-casting"]], "Refitting and updating parameters": [[992, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[992, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[993, "scikit-learn-tutorials"]], "Choosing the right estimator": [[994, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[995, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[995, null]], "Model selection: choosing estimators and their parameters": [[996, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[996, "score-and-cross-validated-scores"]], "Cross-validation generators": [[996, "cross-validation-generators"]], "Exercise": [[996, null], [996, null], [999, null], [999, null]], "Grid-search and cross-validated estimators": [[996, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[996, "grid-search"]], "Nested cross-validation": [[996, null]], "Cross-validated estimators": [[996, "cross-validated-estimators"]], "Putting it all together": [[997, "putting-it-all-together"]], "Face recognition with eigenfaces": [[997, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[997, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[998, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[998, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[998, null]], "An example of reshaping data would be the digits dataset": [[998, null]], "Estimators objects": [[998, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[999, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[999, null]], "Vocabulary: classification and regression": [[999, null]], "Nearest neighbor and the curse of dimensionality": [[999, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[999, null]], "k-Nearest neighbors classifier": [[999, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[999, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[999, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[999, "linear-regression"]], "Shrinkage": [[999, "shrinkage"]], "Different algorithms for the same problem": [[999, null]], "Shrinkage and sparsity with logistic regression": [[999, null]], "Support vector machines (SVMs)": [[999, "support-vector-machines-svms"]], "Linear SVMs": [[999, "linear-svms"]], "Using kernels": [[999, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[999, "rbf-kernel-radial-basis-function"]], "Interactive example": [[999, null]], "Unsupervised learning: seeking representations of the data": [[1000, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[1000, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[1000, null]], "K-means clustering": [[1000, "k-means-clustering"]], "Application example: vector quantization": [[1000, null]], "Hierarchical agglomerative clustering: Ward": [[1000, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[1000, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[1000, null]], "Decompositions: from a signal to components and loadings": [[1000, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[1000, null]], "Principal component analysis: PCA": [[1000, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[1000, "independent-component-analysis-ica"]], "Working With Text Data": [[1001, "working-with-text-data"]], "Tutorial setup": [[1001, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[1001, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[1001, "extracting-features-from-text-files"]], "Bags of words": [[1001, "bags-of-words"]], "Tokenizing text with scikit-learn": [[1001, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[1001, "from-occurrences-to-frequencies"]], "Training a classifier": [[1001, "training-a-classifier"]], "Building a pipeline": [[1001, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[1001, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[1001, "parameter-tuning-using-grid-search"]], "Exercises": [[1001, "exercises"]], "Exercise 1: Language identification": [[1001, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1001, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1001, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[1001, "where-to-from-here"]], "Unsupervised learning": [[1002, "unsupervised-learning"]], "User Guide": [[1003, "user-guide"]], "Available documentation for Scikit-learn": [[1004, "available-documentation-for-scikit-learn"]], "Visualizations": [[1005, "visualizations"]], "Available Plotting Utilities": [[1005, "available-plotting-utilities"]], "Display Objects": [[1005, "display-objects"]], "Release History": [[1006, "release-history"]], "Version 0.12.1": [[1008, "version-0-12-1"]], "Changelog": [[1008, "changelog"], [1008, "id1"], [1008, "id3"], [1008, "id6"], [1008, "id9"], [1008, "id12"], [1008, "id14"], [1008, "id16"], [1008, "id18"], [1008, "id19"], [1009, "changelog"], [1009, "id1"], [1010, "changelog"], [1011, "changelog"], [1012, "changelog"], [1012, "id1"], [1013, "changelog"], [1013, "id1"], [1014, "changelog"], [1014, "id1"], [1014, "id2"], [1015, "changelog"], [1015, "id1"], [1016, "changelog"], [1016, "id1"], [1016, "id5"], [1016, "id10"], [1016, "id23"], [1017, "changelog"], [1017, "id1"], [1017, "id2"], [1017, "id7"], [1018, "changelog"], [1018, "id1"], [1018, "id4"], [1019, "changelog"], [1019, "id1"], [1019, "id4"], [1020, "changelog"], [1020, "id1"], [1020, "id4"], [1021, "changelog"], [1021, "id1"], [1021, "id7"], [1022, "changelog"], [1022, "id1"], [1022, "id7"], [1023, "changelog"], [1023, "id1"], [1023, "id9"], [1024, "changelog"]], "People": [[1008, "people"], [1008, "id2"], [1008, "id5"], [1008, "id8"], [1008, "id11"], [1008, "id13"], [1008, "id15"], [1008, "id17"], [1009, "people"], [1009, "id2"], [1010, "people"], [1011, "people"]], "Version 0.12": [[1008, "version-0-12"]], "API changes summary": [[1008, "api-changes-summary"], [1008, "id4"], [1008, "id7"], [1008, "id10"], [1009, "api-changes-summary"], [1010, "api-changes-summary"], [1011, "api-changes-summary"], [1012, "api-changes-summary"], [1013, "api-changes-summary"], [1014, "api-changes-summary"], [1014, "id5"], [1015, "api-changes-summary"]], "Version 0.11": [[1008, "version-0-11"]], "Highlights": [[1008, "highlights"], [1011, "highlights"], [1012, "highlights"], [1015, "highlights"], [1016, "highlights"]], "Other changes": [[1008, "other-changes"]], "Version 0.10": [[1008, "version-0-10"]], "Version 0.9": [[1008, "version-0-9"]], "Version 0.8": [[1008, "version-0-8"]], "Version 0.7": [[1008, "version-0-7"]], "Version 0.6": [[1008, "version-0-6"]], "Version 0.5": [[1008, "version-0-5"]], "New classes": [[1008, "new-classes"]], "Fixes": [[1008, "fixes"]], "External dependencies": [[1008, "external-dependencies"]], "Removed modules": [[1008, "removed-modules"]], "Misc": [[1008, "misc"]], "Version 0.4": [[1008, "version-0-4"]], "Earlier versions": [[1008, "earlier-versions"]], "Version 0.13.1": [[1009, "version-0-13-1"]], "Version 0.13": [[1009, "version-0-13"]], "New Estimator Classes": [[1009, "new-estimator-classes"]], "Version 0.14": [[1010, "version-0-14"]], "Version 0.15.2": [[1011, "version-0-15-2"]], "Bug fixes": [[1011, "bug-fixes"], [1011, "id1"], [1011, "id2"], [1012, "bug-fixes"], [1012, "id2"], [1013, "bug-fixes"], [1013, "id2"], [1014, "bug-fixes"], [1014, "id4"], [1015, "bug-fixes"], [1015, "id3"]], "Version 0.15.1": [[1011, "version-0-15-1"]], "Version 0.15": [[1011, "version-0-15"]], "New features": [[1011, "new-features"], [1012, "new-features"], [1013, "new-features"], [1014, "new-features"], [1015, "new-features"]], "Enhancements": [[1011, "enhancements"], [1012, "enhancements"], [1013, "enhancements"], [1014, "enhancements"], [1014, "id3"], [1015, "enhancements"], [1015, "id2"]], "Documentation improvements": [[1011, "documentation-improvements"], [1012, "documentation-improvements"]], "Version 0.16.1": [[1012, "version-0-16-1"]], "Version 0.16": [[1012, "version-0-16"]], "Code Contributors": [[1012, "code-contributors"], [1013, "code-contributors"], [1014, "code-contributors"], [1014, "id6"]], "Version 0.17.1": [[1013, "version-0-17-1"]], "Version 0.17": [[1013, "version-0-17"]], "Version 0.18.2": [[1014, "version-0-18-2"]], "Last release with Python 2.6 support": [[1014, null], [1014, null]], "Version 0.18.1": [[1014, "version-0-18-1"]], "Version 0.18": [[1014, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1014, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1015, "version-0-19-2"]], "Related changes": [[1015, "related-changes"]], "Version 0.19.1": [[1015, "version-0-19-1"]], "API changes": [[1015, "api-changes"]], "Code and Documentation Contributors": [[1015, "code-and-documentation-contributors"], [1015, "id9"], [1016, "code-and-documentation-contributors"], [1016, "id8"], [1016, "id21"], [1016, "id41"], [1017, "code-and-documentation-contributors"], [1018, "code-and-documentation-contributors"], [1019, "code-and-documentation-contributors"], [1020, "code-and-documentation-contributors"], [1021, "code-and-documentation-contributors"], [1022, "code-and-documentation-contributors"], [1023, "code-and-documentation-contributors"], [1024, "code-and-documentation-contributors"]], "Version 0.19": [[1015, "version-0-19"]], "Changed models": [[1015, "changed-models"], [1016, "changed-models"], [1016, "id9"], [1016, "id22"], [1017, "changed-models"], [1017, "id6"], [1018, "changed-models"], [1019, "changed-models"], [1019, "id3"], [1020, "changed-models"], [1021, "changed-models"], [1022, "changed-models"], [1022, "id6"], [1023, "changed-models"], [1023, "id7"], [1024, "changed-models"]], "Version 0.20.4": [[1016, "version-0-20-4"]], "sklearn.cluster": [[1016, "sklearn-cluster"], [1016, "id2"], [1016, "id11"], [1016, "id24"], [1017, "sklearn-cluster"], [1017, "id8"], [1018, "sklearn-cluster"], [1018, "id5"], [1019, "sklearn-cluster"], [1019, "id2"], [1019, "id5"], [1020, "sklearn-cluster"], [1021, "sklearn-cluster"], [1021, "id2"], [1021, "id9"], [1022, "sklearn-cluster"], [1022, "id8"], [1023, "sklearn-cluster"], [1023, "id12"], [1024, "sklearn-cluster"]], "sklearn.compose": [[1016, "sklearn-compose"], [1016, "id3"], [1016, "id6"], [1016, "id12"], [1016, "id25"], [1017, "sklearn-compose"], [1017, "id9"], [1018, "sklearn-compose"], [1019, "sklearn-compose"], [1020, "sklearn-compose"], [1020, "id5"], [1021, "sklearn-compose"], [1022, "sklearn-compose"], [1023, "sklearn-compose"]], "sklearn.decomposition": [[1016, "sklearn-decomposition"], [1016, "id4"], [1016, "id14"], [1016, "id28"], [1017, "sklearn-decomposition"], [1017, "id11"], [1018, "sklearn-decomposition"], [1019, "sklearn-decomposition"], [1019, "id6"], [1020, "sklearn-decomposition"], [1020, "id7"], [1021, "sklearn-decomposition"], [1021, "id11"], [1022, "sklearn-decomposition"], [1022, "id10"], [1023, "sklearn-decomposition"], [1023, "id14"], [1024, "sklearn-decomposition"]], "sklearn.model_selection": [[1016, "sklearn-model-selection"], [1016, "id35"], [1017, "sklearn-model-selection"], [1018, "sklearn-model-selection"], [1018, "id9"], [1018, "id13"], [1019, "sklearn-model-selection"], [1020, "sklearn-model-selection"], [1020, "id12"], [1021, "sklearn-model-selection"], [1022, "sklearn-model-selection"], [1023, "sklearn-model-selection"], [1023, "id20"], [1024, "sklearn-model-selection"]], "sklearn.neighbors": [[1016, "sklearn-neighbors"], [1016, "id7"], [1016, "id18"], [1016, "id36"], [1017, "sklearn-neighbors"], [1017, "id5"], [1017, "id17"], [1018, "sklearn-neighbors"], [1018, "id11"], [1020, "sklearn-neighbors"], [1021, "sklearn-neighbors"], [1021, "id5"], [1021, "id18"], [1022, "sklearn-neighbors"], [1023, "sklearn-neighbors"], [1024, "sklearn-neighbors"]], "Version 0.20.3": [[1016, "version-0-20-3"]], "sklearn.covariance": [[1016, "sklearn-covariance"], [1016, "id26"], [1020, "sklearn-covariance"], [1021, "sklearn-covariance"], [1022, "sklearn-covariance"], [1024, "sklearn-covariance"]], "sklearn.datasets": [[1016, "sklearn-datasets"], [1016, "id13"], [1016, "id27"], [1017, "sklearn-datasets"], [1017, "id10"], [1018, "sklearn-datasets"], [1019, "sklearn-datasets"], [1020, "sklearn-datasets"], [1021, "sklearn-datasets"], [1021, "id10"], [1022, "sklearn-datasets"], [1022, "id9"], [1023, "sklearn-datasets"], [1023, "id13"], [1024, "sklearn-datasets"]], "sklearn.feature_extraction": [[1016, "sklearn-feature-extraction"], [1016, "id15"], [1016, "id30"], [1017, "sklearn-feature-extraction"], [1018, "sklearn-feature-extraction"], [1019, "sklearn-feature-extraction"], [1019, "id8"], [1020, "sklearn-feature-extraction"], [1021, "sklearn-feature-extraction"], [1021, "id13"], [1022, "sklearn-feature-extraction"], [1023, "sklearn-feature-extraction"], [1024, "sklearn-feature-extraction"]], "sklearn.impute": [[1016, "sklearn-impute"], [1016, "id31"], [1017, "sklearn-impute"], [1017, "id13"], [1018, "sklearn-impute"], [1018, "id6"], [1019, "sklearn-impute"], [1020, "sklearn-impute"], [1021, "sklearn-impute"], [1022, "sklearn-impute"], [1022, "id12"], [1023, "sklearn-impute"], [1024, "sklearn-impute"]], "sklearn.linear_model": [[1016, "sklearn-linear-model"], [1016, "id16"], [1016, "id32"], [1017, "sklearn-linear-model"], [1017, "id15"], [1018, "sklearn-linear-model"], [1019, "sklearn-linear-model"], [1019, "id9"], [1020, "sklearn-linear-model"], [1020, "id10"], [1021, "sklearn-linear-model"], [1021, "id4"], [1021, "id15"], [1022, "sklearn-linear-model"], [1022, "id13"], [1023, "sklearn-linear-model"], [1023, "id18"], [1024, "sklearn-linear-model"]], "sklearn.preprocessing": [[1016, "sklearn-preprocessing"], [1016, "id19"], [1016, "id37"], [1017, "sklearn-preprocessing"], [1017, "id18"], [1018, "sklearn-preprocessing"], [1018, "id12"], [1019, "sklearn-preprocessing"], [1020, "sklearn-preprocessing"], [1020, "id14"], [1021, "sklearn-preprocessing"], [1021, "id20"], [1022, "sklearn-preprocessing"], [1022, "id4"], [1022, "id16"], [1023, "sklearn-preprocessing"], [1023, "id4"], [1023, "id22"], [1024, "sklearn-preprocessing"]], "sklearn.svm": [[1016, "sklearn-svm"], [1016, "id38"], [1017, "sklearn-svm"], [1018, "sklearn-svm"], [1019, "sklearn-svm"], [1020, "sklearn-svm"], [1021, "sklearn-svm"], [1021, "id21"], [1022, "sklearn-svm"], [1023, "sklearn-svm"], [1024, "sklearn-svm"]], "Version 0.20.2": [[1016, "version-0-20-2"]], "sklearn.metrics": [[1016, "sklearn-metrics"], [1016, "id17"], [1016, "id33"], [1017, "sklearn-metrics"], [1017, "id4"], [1017, "id16"], [1018, "sklearn-metrics"], [1018, "id2"], [1018, "id8"], [1019, "sklearn-metrics"], [1019, "id10"], [1020, "sklearn-metrics"], [1020, "id2"], [1020, "id11"], [1021, "sklearn-metrics"], [1021, "id17"], [1022, "sklearn-metrics"], [1022, "id3"], [1022, "id15"], [1023, "sklearn-metrics"], [1024, "sklearn-metrics"]], "sklearn.utils": [[1016, "sklearn-utils"], [1016, "id20"], [1016, "id39"], [1017, "sklearn-utils"], [1018, "sklearn-utils"], [1018, "id14"], [1019, "sklearn-utils"], [1019, "id12"], [1020, "sklearn-utils"], [1020, "id17"], [1021, "sklearn-utils"], [1021, "id6"], [1021, "id23"], [1022, "sklearn-utils"], [1022, "id18"], [1023, "sklearn-utils"], [1023, "id6"], [1023, "id24"], [1024, "sklearn-utils"]], "Version 0.20.1": [[1016, "version-0-20-1"]], "sklearn.ensemble": [[1016, "sklearn-ensemble"], [1016, "id29"], [1017, "sklearn-ensemble"], [1017, "id12"], [1018, "sklearn-ensemble"], [1019, "sklearn-ensemble"], [1019, "id7"], [1020, "sklearn-ensemble"], [1020, "id8"], [1021, "sklearn-ensemble"], [1021, "id3"], [1021, "id12"], [1022, "sklearn-ensemble"], [1023, "sklearn-ensemble"], [1023, "id3"], [1023, "id15"], [1024, "sklearn-ensemble"]], "sklearn.mixture": [[1016, "sklearn-mixture"], [1016, "id34"], [1017, "sklearn-mixture"], [1021, "sklearn-mixture"], [1022, "sklearn-mixture"]], "Version 0.20.0": [[1016, "version-0-20-0"]], "Known Major Bugs": [[1016, "known-major-bugs"], [1017, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1016, "sklearn-discriminant-analysis"], [1017, "sklearn-discriminant-analysis"], [1020, "sklearn-discriminant-analysis"], [1022, "sklearn-discriminant-analysis"], [1023, "sklearn-discriminant-analysis"], [1024, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1016, "sklearn-dummy"], [1017, "sklearn-dummy"], [1018, "sklearn-dummy"], [1021, "sklearn-dummy"], [1022, "sklearn-dummy"]], "sklearn.feature_selection": [[1016, "sklearn-feature-selection"], [1018, "sklearn-feature-selection"], [1019, "sklearn-feature-selection"], [1020, "sklearn-feature-selection"], [1021, "sklearn-feature-selection"], [1021, "id14"], [1022, "sklearn-feature-selection"], [1022, "id2"], [1022, "id11"], [1023, "sklearn-feature-selection"], [1023, "id16"], [1024, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1016, "sklearn-gaussian-process"], [1018, "sklearn-gaussian-process"], [1019, "sklearn-gaussian-process"], [1020, "sklearn-gaussian-process"], [1020, "id9"], [1021, "sklearn-gaussian-process"], [1022, "sklearn-gaussian-process"], [1023, "sklearn-gaussian-process"], [1024, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1016, "sklearn-isotonic"], [1017, "sklearn-isotonic"], [1018, "sklearn-isotonic"], [1020, "sklearn-isotonic"], [1022, "sklearn-isotonic"], [1023, "sklearn-isotonic"]], "sklearn.manifold": [[1016, "sklearn-manifold"], [1017, "sklearn-manifold"], [1018, "sklearn-manifold"], [1019, "sklearn-manifold"], [1020, "sklearn-manifold"], [1021, "sklearn-manifold"], [1021, "id16"], [1022, "sklearn-manifold"], [1022, "id14"], [1023, "sklearn-manifold"], [1023, "id19"]], "sklearn.multioutput": [[1016, "sklearn-multioutput"], [1017, "sklearn-multioutput"], [1018, "sklearn-multioutput"], [1019, "sklearn-multioutput"], [1020, "sklearn-multioutput"], [1020, "id13"], [1023, "sklearn-multioutput"], [1024, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1016, "sklearn-naive-bayes"], [1018, "sklearn-naive-bayes"], [1018, "id10"], [1019, "sklearn-naive-bayes"], [1020, "sklearn-naive-bayes"], [1021, "sklearn-naive-bayes"], [1023, "sklearn-naive-bayes"], [1024, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1016, "sklearn-neural-network"], [1017, "sklearn-neural-network"], [1018, "sklearn-neural-network"], [1019, "sklearn-neural-network"], [1020, "sklearn-neural-network"], [1021, "sklearn-neural-network"], [1022, "sklearn-neural-network"], [1023, "sklearn-neural-network"], [1023, "id21"], [1024, "sklearn-neural-network"]], "sklearn.pipeline": [[1016, "sklearn-pipeline"], [1017, "sklearn-pipeline"], [1018, "sklearn-pipeline"], [1019, "sklearn-pipeline"], [1020, "sklearn-pipeline"], [1021, "sklearn-pipeline"], [1021, "id19"], [1022, "sklearn-pipeline"], [1023, "sklearn-pipeline"], [1024, "sklearn-pipeline"]], "sklearn.tree": [[1016, "sklearn-tree"], [1017, "sklearn-tree"], [1017, "id19"], [1018, "sklearn-tree"], [1019, "sklearn-tree"], [1020, "sklearn-tree"], [1020, "id16"], [1021, "sklearn-tree"], [1021, "id22"], [1022, "sklearn-tree"], [1022, "id5"], [1022, "id17"], [1023, "sklearn-tree"], [1023, "id5"], [1023, "id23"], [1024, "sklearn-tree"]], "Multiple modules": [[1016, "multiple-modules"], [1017, "multiple-modules"]], "Changes to estimator checks": [[1016, "changes-to-estimator-checks"], [1017, "changes-to-estimator-checks"], [1018, "changes-to-estimator-checks"]], "Version 0.21.3": [[1017, "version-0-21-3"]], "Legend for changelogs": [[1017, "legend-for-changelogs"], [1018, "legend-for-changelogs"], [1019, "legend-for-changelogs"], [1020, "legend-for-changelogs"], [1021, "legend-for-changelogs"], [1022, "legend-for-changelogs"], [1023, "legend-for-changelogs"], [1024, "legend-for-changelogs"]], "sklearn.inspection": [[1017, "sklearn-inspection"], [1017, "id3"], [1017, "id14"], [1018, "sklearn-inspection"], [1018, "id7"], [1019, "sklearn-inspection"], [1019, "id11"], [1020, "sklearn-inspection"], [1021, "sklearn-inspection"], [1022, "sklearn-inspection"], [1023, "sklearn-inspection"], [1023, "id17"], [1024, "sklearn-inspection"]], "Version 0.21.2": [[1017, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1017, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1017, "version-0-21-1"]], "Version 0.21.0": [[1017, "version-0-21-0"]], "sklearn.base": [[1017, "sklearn-base"], [1018, "sklearn-base"], [1020, "sklearn-base"], [1021, "sklearn-base"], [1022, "sklearn-base"], [1023, "sklearn-base"], [1023, "id2"], [1023, "id10"], [1024, "sklearn-base"]], "sklearn.calibration": [[1017, "sklearn-calibration"], [1018, "sklearn-calibration"], [1020, "sklearn-calibration"], [1021, "sklearn-calibration"], [1021, "id8"], [1022, "sklearn-calibration"], [1023, "sklearn-calibration"], [1023, "id11"], [1024, "sklearn-calibration"]], "sklearn.externals": [[1017, "sklearn-externals"]], "sklearn.multiclass": [[1017, "sklearn-multiclass"], [1020, "sklearn-multiclass"], [1021, "sklearn-multiclass"], [1022, "sklearn-multiclass"]], "Version 0.22.2.post1": [[1018, "version-0-22-2-post1"]], "Version 0.22.1": [[1018, "version-0-22-1"]], "sklearn.semi_supervised": [[1018, "sklearn-semi-supervised"], [1019, "sklearn-semi-supervised"], [1020, "sklearn-semi-supervised"], [1020, "id3"], [1020, "id15"], [1024, "sklearn-semi-supervised"]], "Version 0.22.0": [[1018, "version-0-22-0"]], "Website update": [[1018, "website-update"]], "Clear definition of the public API": [[1018, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1018, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1018, "sklearn-cross-decomposition"], [1020, "sklearn-cross-decomposition"], [1020, "id6"], [1022, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1018, "sklearn-kernel-approximation"], [1020, "sklearn-kernel-approximation"], [1021, "sklearn-kernel-approximation"], [1022, "sklearn-kernel-approximation"], [1023, "sklearn-kernel-approximation"]], "Version 0.23.2": [[1019, "version-0-23-2"]], "Version 0.23.1": [[1019, "version-0-23-1"]], "Version 0.23.0": [[1019, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1019, "enforcing-keyword-only-arguments"], [1021, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[1020, "version-0-24-2"]], "feature_extraction": [[1020, "feature-extraction"]], "Version 0.24.1": [[1020, "version-0-24-1"]], "Packaging": [[1020, "packaging"]], "Version 0.24.0": [[1020, "version-0-24-0"]], "sklearn.exceptions": [[1020, "sklearn-exceptions"]], "Version 1.0.2": [[1021, "version-1-0-2"]], "Version 1.0.1": [[1021, "version-1-0-1"]], "Fixed models": [[1021, "fixed-models"]], "Version 1.0.0": [[1021, "version-1-0-0"]], "Minimal dependencies": [[1021, "minimal-dependencies"], [1022, "minimal-dependencies"]], "Version 1.1.3": [[1022, "version-1-1-3"]], "Version 1.1.2": [[1022, "version-1-1-2"]], "Version 1.1.1": [[1022, "version-1-1-1"]], "Version 1.1.0": [[1022, "version-1-1-0"]], "sklearn.random_projection": [[1022, "sklearn-random-projection"]], "Version 1.2.2": [[1023, "version-1-2-2"]], "Version 1.2.1": [[1023, "version-1-2-1"]], "Changes impacting all modules": [[1023, "changes-impacting-all-modules"], [1023, "id8"], [1024, "changes-impacting-all-modules"]], "Version 1.2.0": [[1023, "version-1-2-0"]], "Version 1.3.0": [[1024, "version-1-3-0"]], "sklearn": [[1024, "sklearn"]], "sklearn.exception": [[1024, "sklearn-exception"]]}, "indexentries": {"1d": [[384, "term-1d"]], "1d array": [[384, "term-1d-array"]], "2d": [[384, "term-2d"]], "2d array": [[384, "term-2d-array"]], "api": [[384, "term-API"]], "cv splitter": [[384, "term-CV-splitter"]], "slep": [[384, "term-SLEP"]], "sleps": [[384, "term-SLEPs"]], "x": [[384, "term-X"]], "xt": [[384, "term-Xt"]], "y": [[384, "term-Y"], [384, "term-y"]], "_estimator_type": [[384, "term-_estimator_type"]], "array-like": [[384, "term-array-like"]], "attribute": [[384, "term-attribute"]], "attributes": [[384, "term-attributes"]], "backwards compatibility": [[384, "term-backwards-compatibility"]], "binary": [[384, "term-binary"]], "callable": [[384, "term-callable"]], "categorical feature": [[384, "term-categorical-feature"]], "class_weight": [[384, "term-class_weight"]], "classes_": [[384, "term-classes_"]], "classifier": [[384, "term-classifier"]], "classifiers": [[384, "term-classifiers"]], "clone": [[384, "term-clone"]], "cloned": [[384, "term-cloned"]], "clusterer": [[384, "term-clusterer"]], "clusterers": [[384, "term-clusterers"]], "coef_": [[384, "term-coef_"]], "common tests": [[384, "term-common-tests"]], "components_": [[384, "term-components_"]], "continuous": [[384, "term-continuous"]], "continuous multi-output": [[384, "term-continuous-multi-output"]], "continuous multioutput": [[384, "term-continuous-multioutput"]], "cross-validation estimator": [[384, "term-cross-validation-estimator"]], "cross-validation generator": [[384, "term-cross-validation-generator"]], "cross-validation splitter": [[384, "term-cross-validation-splitter"]], "cv": [[384, "term-cv"]], "data leakage": [[384, "term-data-leakage"]], "data type": [[384, "term-data-type"]], "decision_function": [[384, "term-decision_function"]], "density estimator": [[384, "term-density-estimator"]], "deprecation": [[384, "term-deprecation"]], "dimensionality": [[384, "term-dimensionality"]], "docstring": [[384, "term-docstring"]], "double underscore": [[384, "term-double-underscore"]], "double underscore notation": [[384, "term-double-underscore-notation"]], "dtype": [[384, "term-dtype"]], "duck typing": [[384, "term-duck-typing"]], "early stopping": [[384, "term-early-stopping"]], "embedding_": [[384, "term-embedding_"]], "estimator": [[384, "term-estimator"]], "estimator instance": [[384, "term-estimator-instance"]], "estimator tags": [[384, "term-estimator-tags"]], "estimators": [[384, "term-estimators"]], "evaluation metric": [[384, "term-evaluation-metric"]], "evaluation metrics": [[384, "term-evaluation-metrics"]], "examples": [[384, "term-examples"]], "experimental": [[384, "term-experimental"]], "feature": [[384, "term-feature"]], "feature extractor": [[384, "term-feature-extractor"]], "feature extractors": [[384, "term-feature-extractors"]], "feature vector": [[384, "term-feature-vector"]], "feature_importances_": [[384, "term-feature_importances_"]], "features": [[384, "term-features"]], "fit": [[384, "term-fit"]], "fit_predict": [[384, "term-fit_predict"]], "fit_transform": [[384, "term-fit_transform"]], "fitted": [[384, "term-fitted"]], "fitting": [[384, "term-fitting"]], "function": [[384, "term-function"]], "gallery": [[384, "term-gallery"]], "get_feature_names_out": [[384, "term-get_feature_names_out"]], "get_n_splits": [[384, "term-get_n_splits"]], "get_params": [[384, "term-get_params"]], "groups": [[384, "term-groups"]], "hyper-parameter": [[384, "term-hyper-parameter"]], "hyperparameter": [[384, "term-hyperparameter"]], "imputation": [[384, "term-imputation"]], "impute": [[384, "term-impute"]], "indexable": [[384, "term-indexable"]], "induction": [[384, "term-induction"]], "inductive": [[384, "term-inductive"]], "joblib": [[384, "term-joblib"]], "kernel": [[384, "term-kernel"]], "label indicator matrix": [[384, "term-label-indicator-matrix"]], "labels_": [[384, "term-labels_"]], "leakage": [[384, "term-leakage"]], "max_iter": [[384, "term-max_iter"]], "memmapping": [[384, "term-memmapping"]], "memory": [[384, "term-memory"]], "memory map": [[384, "term-memory-map"]], "memory mapping": [[384, "term-memory-mapping"]], "meta-estimator": [[384, "term-meta-estimator"]], "meta-estimators": [[384, "term-meta-estimators"]], "metaestimator": [[384, "term-metaestimator"]], "metaestimators": [[384, "term-metaestimators"]], "metric": [[384, "term-metric"]], "missing values": [[384, "term-missing-values"]], "multi-class": [[384, "term-multi-class"]], "multi-class multi-output": [[384, "term-multi-class-multi-output"]], "multi-label": [[384, "term-multi-label"]], "multi-output": [[384, "term-multi-output"]], "multi-output continuous": [[384, "term-multi-output-continuous"]], "multi-output multi-class": [[384, "term-multi-output-multi-class"]], "multiclass": [[384, "term-multiclass"]], "multiclass multioutput": [[384, "term-multiclass-multioutput"]], "multilabel": [[384, "term-multilabel"]], "multilabel indicator matrices": [[384, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[384, "term-multilabel-indicator-matrix"]], "multioutput": [[384, "term-multioutput"]], "multioutput continuous": [[384, "term-multioutput-continuous"]], "multioutput multiclass": [[384, "term-multioutput-multiclass"]], "n_components": [[384, "term-n_components"]], "n_features": [[384, "term-n_features"]], "n_iter_": [[384, "term-n_iter_"]], "n_iter_no_change": [[384, "term-n_iter_no_change"]], "n_jobs": [[384, "term-n_jobs"]], "n_outputs": [[384, "term-n_outputs"]], "n_samples": [[384, "term-n_samples"]], "n_targets": [[384, "term-n_targets"]], "narrative docs": [[384, "term-narrative-docs"]], "narrative documentation": [[384, "term-narrative-documentation"]], "np": [[384, "term-np"]], "online learning": [[384, "term-online-learning"]], "out-of-core": [[384, "term-out-of-core"]], "outlier detector": [[384, "term-outlier-detector"]], "outlier detectors": [[384, "term-outlier-detectors"]], "outputs": [[384, "term-outputs"]], "pair": [[384, "term-pair"]], "pairwise metric": [[384, "term-pairwise-metric"]], "pairwise metrics": [[384, "term-pairwise-metrics"]], "param": [[384, "term-param"]], "parameter": [[384, "term-parameter"]], "parameters": [[384, "term-parameters"]], "params": [[384, "term-params"]], "partial_fit": [[384, "term-partial_fit"]], "pd": [[384, "term-pd"]], "pos_label": [[384, "term-pos_label"]], "precomputed": [[384, "term-precomputed"]], "predict": [[384, "term-predict"]], "predict_log_proba": [[384, "term-predict_log_proba"]], "predict_proba": [[384, "term-predict_proba"]], "predictor": [[384, "term-predictor"]], "predictors": [[384, "term-predictors"]], "random_state": [[384, "term-random_state"]], "rectangular": [[384, "term-rectangular"]], "regressor": [[384, "term-regressor"]], "regressors": [[384, "term-regressors"]], "sample": [[384, "term-sample"]], "sample properties": [[384, "term-sample-properties"]], "sample property": [[384, "term-sample-property"]], "sample_weight": [[384, "term-sample_weight"]], "samples": [[384, "term-samples"]], "scikit-learn enhancement proposals": [[384, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[384, "term-scikit-learn-contrib"]], "score": [[384, "term-score"]], "score_samples": [[384, "term-score_samples"]], "scorer": [[384, "term-scorer"]], "scoring": [[384, "term-scoring"]], "semi-supervised": [[384, "term-semi-supervised"]], "semi-supervised learning": [[384, "term-semi-supervised-learning"]], "semisupervised": [[384, "term-semisupervised"]], "set_params": [[384, "term-set_params"]], "sparse graph": [[384, "term-sparse-graph"]], "sparse matrix": [[384, "term-sparse-matrix"]], "split": [[384, "term-split"]], "stateless": [[384, "term-stateless"]], "supervised": [[384, "term-supervised"]], "supervised learning": [[384, "term-supervised-learning"]], "target": [[384, "term-target"]], "targets": [[384, "term-targets"]], "transduction": [[384, "term-transduction"]], "transductive": [[384, "term-transductive"]], "transform": [[384, "term-transform"]], "transformer": [[384, "term-transformer"]], "transformers": [[384, "term-transformers"]], "unlabeled": [[384, "term-unlabeled"]], "unlabeled data": [[384, "term-unlabeled-data"]], "unsupervised": [[384, "term-unsupervised"]], "unsupervised learning": [[384, "term-unsupervised-learning"]], "vectorizer": [[384, "term-vectorizer"]], "vectorizers": [[384, "term-vectorizers"]], "verbose": [[384, "term-verbose"]], "warm_start": [[384, "term-warm_start"]], "module": [[395, "module-sklearn.base"], [395, "module-sklearn.calibration"], [395, "module-sklearn.cluster"], [395, "module-sklearn.compose"], [395, "module-sklearn.covariance"], [395, "module-sklearn.cross_decomposition"], [395, "module-sklearn.datasets"], [395, "module-sklearn.decomposition"], [395, "module-sklearn.discriminant_analysis"], [395, "module-sklearn.dummy"], [395, "module-sklearn.ensemble"], [395, "module-sklearn.exceptions"], [395, "module-sklearn.experimental"], [395, "module-sklearn.feature_extraction"], [395, "module-sklearn.feature_extraction.image"], [395, "module-sklearn.feature_extraction.text"], [395, "module-sklearn.feature_selection"], [395, "module-sklearn.gaussian_process"], [395, "module-sklearn.impute"], [395, "module-sklearn.inspection"], [395, "module-sklearn.isotonic"], [395, "module-sklearn.kernel_approximation"], [395, "module-sklearn.kernel_ridge"], [395, "module-sklearn.linear_model"], [395, "module-sklearn.manifold"], [395, "module-sklearn.metrics"], [395, "module-sklearn.metrics.cluster"], [395, "module-sklearn.metrics.pairwise"], [395, "module-sklearn.mixture"], [395, "module-sklearn.model_selection"], [395, "module-sklearn.multiclass"], [395, "module-sklearn.multioutput"], [395, "module-sklearn.naive_bayes"], [395, "module-sklearn.neighbors"], [395, "module-sklearn.neural_network"], [395, "module-sklearn.pipeline"], [395, "module-sklearn.preprocessing"], [395, "module-sklearn.random_projection"], [395, "module-sklearn.semi_supervised"], [395, "module-sklearn.svm"], [395, "module-sklearn.tree"], [395, "module-sklearn.utils"], [564, "module-sklearn.experimental.enable_halving_search_cv"], [565, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[395, "module-sklearn.base"]], "sklearn.calibration": [[395, "module-sklearn.calibration"]], "sklearn.cluster": [[395, "module-sklearn.cluster"]], "sklearn.compose": [[395, "module-sklearn.compose"]], "sklearn.covariance": [[395, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[395, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[395, "module-sklearn.datasets"]], "sklearn.decomposition": [[395, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[395, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[395, "module-sklearn.dummy"]], "sklearn.ensemble": [[395, "module-sklearn.ensemble"]], "sklearn.exceptions": [[395, "module-sklearn.exceptions"]], "sklearn.experimental": [[395, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[395, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[395, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[395, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[395, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[395, "module-sklearn.gaussian_process"]], "sklearn.impute": [[395, "module-sklearn.impute"]], "sklearn.inspection": [[395, "module-sklearn.inspection"]], "sklearn.isotonic": [[395, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[395, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[395, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[395, "module-sklearn.linear_model"]], "sklearn.manifold": [[395, "module-sklearn.manifold"]], "sklearn.metrics": [[395, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[395, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[395, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[395, "module-sklearn.mixture"]], "sklearn.model_selection": [[395, "module-sklearn.model_selection"]], "sklearn.multiclass": [[395, "module-sklearn.multiclass"]], "sklearn.multioutput": [[395, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[395, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[395, "module-sklearn.neighbors"]], "sklearn.neural_network": [[395, "module-sklearn.neural_network"]], "sklearn.pipeline": [[395, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[395, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[395, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[395, "module-sklearn.semi_supervised"]], "sklearn.svm": [[395, "module-sklearn.svm"]], "sklearn.tree": [[395, "module-sklearn.tree"]], "sklearn.utils": [[395, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[407, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[408, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[409, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[410, "sklearn.base.BaseEstimator"]], "get_params() (sklearn.base.baseestimator method)": [[410, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[410, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[411, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[411, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[411, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[411, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[411, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[412, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[412, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[413, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[413, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[414, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[414, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[415, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[415, "sklearn.base.DensityMixin.score"]], "onetoonefeaturemixin (class in sklearn.base)": [[416, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[416, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "regressormixin (class in sklearn.base)": [[417, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[417, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[418, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[418, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[418, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[419, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[420, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[421, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[422, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[422, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[422, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[422, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[422, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[422, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[422, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "calibrationdisplay (class in sklearn.calibration)": [[423, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[423, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[423, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[423, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[424, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[425, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[425, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[425, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[425, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[425, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[425, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[426, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[426, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[426, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[426, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[426, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[427, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[427, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[427, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[427, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[427, "sklearn.cluster.Birch.get_feature_names_out"]], "get_params() (sklearn.cluster.birch method)": [[427, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[427, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[427, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[427, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[427, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[427, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[428, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[428, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[428, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[428, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[428, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[428, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[428, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[428, "sklearn.cluster.BisectingKMeans.score"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[428, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[428, "sklearn.cluster.BisectingKMeans.set_params"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[428, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[429, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[429, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[429, "sklearn.cluster.DBSCAN.fit_predict"]], "get_params() (sklearn.cluster.dbscan method)": [[429, "sklearn.cluster.DBSCAN.get_params"]], "set_params() (sklearn.cluster.dbscan method)": [[429, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[430, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[430, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[430, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[430, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[430, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[430, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[430, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[430, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[430, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[430, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[431, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[431, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[431, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[431, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_params() (sklearn.cluster.hdbscan method)": [[431, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[431, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[432, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[432, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[432, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[432, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[432, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.kmeans method)": [[432, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[432, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[432, "sklearn.cluster.KMeans.score"]], "set_output() (sklearn.cluster.kmeans method)": [[432, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[432, "sklearn.cluster.KMeans.set_params"]], "transform() (sklearn.cluster.kmeans method)": [[432, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[433, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[433, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[433, "sklearn.cluster.MeanShift.fit_predict"]], "get_params() (sklearn.cluster.meanshift method)": [[433, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[433, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[433, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[434, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[434, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[434, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[434, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[434, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[434, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[434, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[434, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[434, "sklearn.cluster.MiniBatchKMeans.score"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[434, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[434, "sklearn.cluster.MiniBatchKMeans.set_params"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[434, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[435, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[435, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[435, "sklearn.cluster.OPTICS.fit_predict"]], "get_params() (sklearn.cluster.optics method)": [[435, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[435, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[436, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[436, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[436, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[436, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[436, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[436, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[436, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[436, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[437, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[437, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[437, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_params() (sklearn.cluster.spectralclustering method)": [[437, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[437, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[438, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[438, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[438, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[438, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[438, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[438, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[438, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[438, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[439, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[440, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[441, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[442, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[443, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[444, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[445, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[446, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[447, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[448, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[449, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[449, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[449, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[449, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_params() (sklearn.compose.columntransformer method)": [[449, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[449, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[449, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[449, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[449, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[450, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[450, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[450, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[450, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[450, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[450, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[450, "sklearn.compose.TransformedTargetRegressor.set_params"]], "make_column_selector() (in module sklearn.compose)": [[451, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[452, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[453, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[454, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[454, "sklearn.covariance.EllipticEnvelope.set_params"]], "empiricalcovariance (class in sklearn.covariance)": [[455, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[455, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[455, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[455, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[455, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[455, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[455, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[455, "sklearn.covariance.EmpiricalCovariance.set_params"]], "graphicallasso (class in sklearn.covariance)": [[456, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[456, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[456, "sklearn.covariance.GraphicalLasso.fit"]], "get_params() (sklearn.covariance.graphicallasso method)": [[456, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[456, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[456, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[456, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[456, "sklearn.covariance.GraphicalLasso.set_params"]], "graphicallassocv (class in sklearn.covariance)": [[457, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[457, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[457, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[457, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[457, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[457, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[457, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[457, "sklearn.covariance.GraphicalLassoCV.set_params"]], "ledoitwolf (class in sklearn.covariance)": [[458, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[458, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[458, "sklearn.covariance.LedoitWolf.fit"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[458, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[458, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[458, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[458, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[458, "sklearn.covariance.LedoitWolf.set_params"]], "mincovdet (class in sklearn.covariance)": [[459, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[459, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[459, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[459, "sklearn.covariance.MinCovDet.fit"]], "get_params() (sklearn.covariance.mincovdet method)": [[459, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[459, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[459, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[459, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[459, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[459, "sklearn.covariance.MinCovDet.set_params"]], "oas (class in sklearn.covariance)": [[460, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[460, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[460, "sklearn.covariance.OAS.fit"]], "get_params() (sklearn.covariance.oas method)": [[460, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[460, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[460, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[460, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[460, "sklearn.covariance.OAS.set_params"]], "shrunkcovariance (class in sklearn.covariance)": [[461, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[461, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[461, "sklearn.covariance.ShrunkCovariance.fit"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[461, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[461, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[461, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[461, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[461, "sklearn.covariance.ShrunkCovariance.set_params"]], "empirical_covariance() (in module sklearn.covariance)": [[462, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[463, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[464, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[465, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[466, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[467, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[467, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[467, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[467, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.cca method)": [[467, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[467, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[467, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[467, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[467, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[467, "sklearn.cross_decomposition.CCA.set_params"]], "transform() (sklearn.cross_decomposition.cca method)": [[467, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[468, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[468, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[468, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[468, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[468, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[468, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[468, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[468, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[468, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[468, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[468, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[469, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[469, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[469, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[469, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[469, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[469, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[469, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[469, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[469, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[469, "sklearn.cross_decomposition.PLSRegression.set_params"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[469, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[470, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[470, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[470, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[470, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[470, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[470, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[470, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[470, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[471, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[472, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[473, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[474, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[475, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[476, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[477, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[478, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[479, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[480, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[481, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[482, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[483, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[484, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[485, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[486, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[487, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[488, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[489, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[490, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[491, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[492, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[493, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[494, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[495, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[496, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[497, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[498, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[499, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[500, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[501, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[502, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[503, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[504, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[505, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[506, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[507, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[508, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[516, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[516, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[516, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[516, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[516, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[516, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[516, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[516, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[517, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[517, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[517, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[517, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[517, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[517, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[517, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[517, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[517, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[517, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[517, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[517, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[518, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[518, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[518, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[518, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_params() (sklearn.decomposition.fastica method)": [[518, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[518, "sklearn.decomposition.FastICA.inverse_transform"]], "set_output() (sklearn.decomposition.fastica method)": [[518, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[518, "sklearn.decomposition.FastICA.set_params"]], "transform() (sklearn.decomposition.fastica method)": [[518, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[519, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[519, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[519, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[519, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[519, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[519, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[519, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[519, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[519, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[519, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[519, "sklearn.decomposition.IncrementalPCA.set_params"]], "transform() (sklearn.decomposition.incrementalpca method)": [[519, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[520, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[520, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[520, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[520, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.kernelpca method)": [[520, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[520, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[520, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[520, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[520, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[521, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[521, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[521, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[521, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[521, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[521, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[521, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[521, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[521, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[521, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[521, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[522, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[522, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[522, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[522, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[522, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[522, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[522, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[522, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[522, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[523, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[523, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[523, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[523, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[523, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[523, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[523, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[523, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[523, "sklearn.decomposition.MiniBatchNMF.set_params"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[523, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[524, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[524, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[524, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[524, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[524, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[524, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[524, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[524, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[524, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[525, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[525, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[525, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[525, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.nmf method)": [[525, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[525, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[525, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[525, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[525, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[526, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[526, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[526, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[526, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[526, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.pca method)": [[526, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[526, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[526, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[526, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[526, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[526, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[526, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[526, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[527, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[527, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[527, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[527, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[527, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[527, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[527, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[527, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[527, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[527, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[528, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[528, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[528, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[528, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsepca method)": [[528, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[528, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[528, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[528, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[528, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[529, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[529, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[529, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[529, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[529, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[529, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[529, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[529, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[529, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[530, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[531, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[532, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[533, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[534, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[535, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "dummyclassifier (class in sklearn.dummy)": [[536, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[536, "sklearn.dummy.DummyClassifier.fit"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[536, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[536, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[536, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[536, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[536, "sklearn.dummy.DummyClassifier.score"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[536, "sklearn.dummy.DummyClassifier.set_params"]], "dummyregressor (class in sklearn.dummy)": [[537, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[537, "sklearn.dummy.DummyRegressor.fit"]], "get_params() (sklearn.dummy.dummyregressor method)": [[537, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[537, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[537, "sklearn.dummy.DummyRegressor.score"]], "set_params() (sklearn.dummy.dummyregressor method)": [[537, "sklearn.dummy.DummyRegressor.set_params"]], "adaboostclassifier (class in sklearn.ensemble)": [[538, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[538, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[538, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[538, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[538, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[538, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[538, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[538, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[538, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[538, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[538, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[538, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[538, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[538, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[538, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[539, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[539, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[539, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[539, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[539, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[539, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[539, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[539, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[539, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[539, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[540, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[540, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[540, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[540, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[540, "sklearn.ensemble.BaggingClassifier.fit"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[540, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[540, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[540, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[540, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[540, "sklearn.ensemble.BaggingClassifier.score"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[540, "sklearn.ensemble.BaggingClassifier.set_params"]], "baggingregressor (class in sklearn.ensemble)": [[541, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[541, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[541, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[541, "sklearn.ensemble.BaggingRegressor.fit"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[541, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[541, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[541, "sklearn.ensemble.BaggingRegressor.score"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[541, "sklearn.ensemble.BaggingRegressor.set_params"]], "extratreesclassifier (class in sklearn.ensemble)": [[542, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[542, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[542, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[542, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[542, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[542, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[542, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[542, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[542, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[542, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[542, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[542, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "extratreesregressor (class in sklearn.ensemble)": [[543, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[543, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[543, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[543, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[543, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[543, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[543, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[543, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[543, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[543, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[544, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[544, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[544, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[544, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[544, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[544, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[544, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[544, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[544, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[544, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[544, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[544, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[544, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[544, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[544, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[545, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[545, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[545, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[545, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[545, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[545, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[545, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[545, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[545, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[545, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[546, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[546, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[546, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[546, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[546, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[546, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[546, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[546, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[546, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[546, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[546, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[546, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[547, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[547, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[547, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[547, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[547, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[547, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[547, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[547, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[548, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[548, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[548, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[548, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[548, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[548, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_params() (sklearn.ensemble.isolationforest method)": [[548, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[548, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[548, "sklearn.ensemble.IsolationForest.score_samples"]], "set_params() (sklearn.ensemble.isolationforest method)": [[548, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[549, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[549, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[549, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[549, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[549, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[549, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[549, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[549, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[549, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[549, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[549, "sklearn.ensemble.RandomForestClassifier.score"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[549, "sklearn.ensemble.RandomForestClassifier.set_params"]], "randomforestregressor (class in sklearn.ensemble)": [[550, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[550, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[550, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[550, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[550, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[550, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[550, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[550, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[550, "sklearn.ensemble.RandomForestRegressor.score"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[550, "sklearn.ensemble.RandomForestRegressor.set_params"]], "randomtreesembedding (class in sklearn.ensemble)": [[551, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[551, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[551, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[551, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[551, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[551, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[551, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[551, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[551, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[551, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[551, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[551, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[552, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[552, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[552, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[552, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[552, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[552, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[552, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[552, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[552, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[552, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[552, "sklearn.ensemble.StackingClassifier.score"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[552, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[552, "sklearn.ensemble.StackingClassifier.set_params"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[552, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[553, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[553, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[553, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[553, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[553, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[553, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[553, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[553, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[553, "sklearn.ensemble.StackingRegressor.score"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[553, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[553, "sklearn.ensemble.StackingRegressor.set_params"]], "transform() (sklearn.ensemble.stackingregressor method)": [[553, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[554, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[554, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[554, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[554, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[554, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[554, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[554, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[554, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[554, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[554, "sklearn.ensemble.VotingClassifier.score"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[554, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[554, "sklearn.ensemble.VotingClassifier.set_params"]], "transform() (sklearn.ensemble.votingclassifier method)": [[554, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[555, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[555, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[555, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[555, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingregressor method)": [[555, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[555, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[555, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[555, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[555, "sklearn.ensemble.VotingRegressor.score"]], "set_output() (sklearn.ensemble.votingregressor method)": [[555, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[555, "sklearn.ensemble.VotingRegressor.set_params"]], "transform() (sklearn.ensemble.votingregressor method)": [[555, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[556, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[556, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[557, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[557, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[558, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[558, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[559, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[559, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[560, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[560, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[561, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[561, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[562, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[562, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[563, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[563, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[564, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[565, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[566, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[566, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[566, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[566, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[566, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[566, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[566, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[566, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[566, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[566, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[567, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[567, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[567, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[567, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[567, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[567, "sklearn.feature_extraction.FeatureHasher.set_params"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[567, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[568, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[568, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[568, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[568, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[568, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[568, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[568, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[569, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[570, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[571, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[572, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[573, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[573, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[573, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[573, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[573, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[573, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[573, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[573, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[573, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[573, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[573, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[573, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[573, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[574, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[574, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[574, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[574, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[574, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[574, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[574, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[574, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[574, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[574, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[574, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[574, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[574, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[575, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[575, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[575, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[575, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[575, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[575, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[575, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[575, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[575, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[576, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[577, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[577, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[577, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[577, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[577, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[577, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[577, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[577, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[577, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[577, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[578, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[578, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[578, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[579, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[579, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.score"]], "set_output() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[579, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[580, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[580, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[580, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[580, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[580, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[580, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[580, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[580, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[580, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[580, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[581, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[581, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[581, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[581, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[581, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[581, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[581, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[581, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[581, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[581, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[582, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[582, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[582, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[582, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[582, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[582, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[582, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[582, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[582, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[582, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[582, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[582, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[582, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[583, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[583, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[583, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[583, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[583, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[583, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[583, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[583, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[583, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[583, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[584, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[584, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[584, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[584, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[584, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[584, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[584, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[584, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[584, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[584, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[585, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[585, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[585, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[585, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[585, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[585, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[585, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[585, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[585, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[585, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[586, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[586, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[586, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[586, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[586, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[586, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[586, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[587, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[587, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[587, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[587, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[587, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[587, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[587, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[587, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[587, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[587, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[588, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[588, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[588, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[588, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[588, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[588, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[588, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[588, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[588, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[588, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[589, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[590, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[591, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[592, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[593, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[594, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[595, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[595, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[595, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[595, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[595, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[595, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[595, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[595, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[595, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[596, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[596, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[596, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[596, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[596, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[596, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[596, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[596, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[597, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[597, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[597, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[597, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[597, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[597, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[597, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[597, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[597, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[597, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[597, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[597, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[598, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[598, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[598, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[598, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[598, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[598, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[598, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[598, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[598, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[598, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[598, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[598, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[599, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[599, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[599, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[599, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[599, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[599, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[599, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[599, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[599, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[599, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[599, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[599, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[600, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[601, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[601, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[601, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[601, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[601, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[601, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[601, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[601, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[601, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[601, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[601, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[601, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[602, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[602, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[602, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[602, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[602, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[602, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[602, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[602, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[602, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[603, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[603, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[603, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[603, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[603, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[603, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[603, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[603, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[603, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[603, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[603, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[603, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[604, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[604, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[604, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[604, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[604, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[604, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[604, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[604, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[604, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[604, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[604, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[604, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[605, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[605, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[605, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[605, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[605, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[605, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[605, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[605, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[605, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[605, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[605, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[605, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[606, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[606, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[606, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[606, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[606, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[606, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[606, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[606, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[606, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[606, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[606, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[606, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[607, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[607, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[607, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[607, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[607, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[607, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[607, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[607, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[607, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[607, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[607, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[607, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[608, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[608, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[608, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[608, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[608, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[608, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[608, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[608, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[608, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[608, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[608, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[608, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[609, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[609, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[609, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[609, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[609, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[609, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[609, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[609, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[609, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[609, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[609, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[609, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[610, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[610, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[610, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[610, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[610, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[610, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[610, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[610, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[610, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[610, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[610, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[610, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[611, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[612, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[612, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[612, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[612, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_params() (sklearn.impute.iterativeimputer method)": [[612, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[612, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[612, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[612, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[613, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[613, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[613, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[613, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_params() (sklearn.impute.knnimputer method)": [[613, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[613, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[613, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[613, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[614, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[614, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[614, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[614, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_params() (sklearn.impute.missingindicator method)": [[614, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[614, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[614, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[614, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[615, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[615, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[615, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[615, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_params() (sklearn.impute.simpleimputer method)": [[615, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[615, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[615, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[615, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[615, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[616, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[616, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[616, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[617, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[617, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[617, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[618, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[619, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[620, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[620, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[620, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[620, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[620, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[620, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[620, "sklearn.isotonic.IsotonicRegression.score"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[620, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[620, "sklearn.isotonic.IsotonicRegression.set_params"]], "transform() (sklearn.isotonic.isotonicregression method)": [[620, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[621, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[622, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[623, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[623, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[623, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[623, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[623, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[623, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[623, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[623, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[624, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[624, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[624, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[624, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[624, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[624, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[624, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[624, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[625, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[625, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[625, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[625, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[625, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[625, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[625, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[625, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[626, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[626, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[626, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[626, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[626, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[626, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[626, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[626, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[627, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[627, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[627, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[627, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[627, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[627, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[627, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[627, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[628, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[628, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[628, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[628, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[628, "sklearn.kernel_ridge.KernelRidge.score"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[628, "sklearn.kernel_ridge.KernelRidge.set_params"]], "ardregression (class in sklearn.linear_model)": [[629, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[629, "sklearn.linear_model.ARDRegression.fit"]], "get_params() (sklearn.linear_model.ardregression method)": [[629, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[629, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[629, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[629, "sklearn.linear_model.ARDRegression.set_params"]], "bayesianridge (class in sklearn.linear_model)": [[630, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[630, "sklearn.linear_model.BayesianRidge.fit"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[630, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[630, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[630, "sklearn.linear_model.BayesianRidge.score"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[630, "sklearn.linear_model.BayesianRidge.set_params"]], "elasticnet (class in sklearn.linear_model)": [[631, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[631, "sklearn.linear_model.ElasticNet.fit"]], "get_params() (sklearn.linear_model.elasticnet method)": [[631, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[631, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[631, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[631, "sklearn.linear_model.ElasticNet.score"]], "set_params() (sklearn.linear_model.elasticnet method)": [[631, "sklearn.linear_model.ElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[631, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[632, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[632, "sklearn.linear_model.ElasticNetCV.fit"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[632, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[632, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[632, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[632, "sklearn.linear_model.ElasticNetCV.score"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[632, "sklearn.linear_model.ElasticNetCV.set_params"]], "gammaregressor (class in sklearn.linear_model)": [[633, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[633, "sklearn.linear_model.GammaRegressor.fit"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[633, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[633, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[633, "sklearn.linear_model.GammaRegressor.score"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[633, "sklearn.linear_model.GammaRegressor.set_params"]], "huberregressor (class in sklearn.linear_model)": [[634, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[634, "sklearn.linear_model.HuberRegressor.fit"]], "get_params() (sklearn.linear_model.huberregressor method)": [[634, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[634, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[634, "sklearn.linear_model.HuberRegressor.score"]], "set_params() (sklearn.linear_model.huberregressor method)": [[634, "sklearn.linear_model.HuberRegressor.set_params"]], "lars (class in sklearn.linear_model)": [[635, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[635, "sklearn.linear_model.Lars.fit"]], "get_params() (sklearn.linear_model.lars method)": [[635, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[635, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[635, "sklearn.linear_model.Lars.score"]], "set_params() (sklearn.linear_model.lars method)": [[635, "sklearn.linear_model.Lars.set_params"]], "larscv (class in sklearn.linear_model)": [[636, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[636, "sklearn.linear_model.LarsCV.fit"]], "get_params() (sklearn.linear_model.larscv method)": [[636, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[636, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[636, "sklearn.linear_model.LarsCV.score"]], "set_params() (sklearn.linear_model.larscv method)": [[636, "sklearn.linear_model.LarsCV.set_params"]], "lasso (class in sklearn.linear_model)": [[637, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[637, "sklearn.linear_model.Lasso.fit"]], "get_params() (sklearn.linear_model.lasso method)": [[637, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[637, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[637, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[637, "sklearn.linear_model.Lasso.score"]], "set_params() (sklearn.linear_model.lasso method)": [[637, "sklearn.linear_model.Lasso.set_params"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[637, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[638, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[638, "sklearn.linear_model.LassoCV.fit"]], "get_params() (sklearn.linear_model.lassocv method)": [[638, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[638, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[638, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[638, "sklearn.linear_model.LassoCV.score"]], "set_params() (sklearn.linear_model.lassocv method)": [[638, "sklearn.linear_model.LassoCV.set_params"]], "lassolars (class in sklearn.linear_model)": [[639, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[639, "sklearn.linear_model.LassoLars.fit"]], "get_params() (sklearn.linear_model.lassolars method)": [[639, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[639, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[639, "sklearn.linear_model.LassoLars.score"]], "set_params() (sklearn.linear_model.lassolars method)": [[639, "sklearn.linear_model.LassoLars.set_params"]], "lassolarscv (class in sklearn.linear_model)": [[640, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[640, "sklearn.linear_model.LassoLarsCV.fit"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[640, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[640, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[640, "sklearn.linear_model.LassoLarsCV.score"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[640, "sklearn.linear_model.LassoLarsCV.set_params"]], "lassolarsic (class in sklearn.linear_model)": [[641, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[641, "sklearn.linear_model.LassoLarsIC.fit"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[641, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[641, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[641, "sklearn.linear_model.LassoLarsIC.score"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[641, "sklearn.linear_model.LassoLarsIC.set_params"]], "linearregression (class in sklearn.linear_model)": [[642, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[642, "sklearn.linear_model.LinearRegression.fit"]], "get_params() (sklearn.linear_model.linearregression method)": [[642, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[642, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[642, "sklearn.linear_model.LinearRegression.score"]], "set_params() (sklearn.linear_model.linearregression method)": [[642, "sklearn.linear_model.LinearRegression.set_params"]], "logisticregression (class in sklearn.linear_model)": [[643, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[643, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[643, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[643, "sklearn.linear_model.LogisticRegression.fit"]], "get_params() (sklearn.linear_model.logisticregression method)": [[643, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[643, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[643, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[643, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[643, "sklearn.linear_model.LogisticRegression.score"]], "set_params() (sklearn.linear_model.logisticregression method)": [[643, "sklearn.linear_model.LogisticRegression.set_params"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[643, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[644, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[644, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[644, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[644, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[644, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[644, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[644, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[644, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[644, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[644, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[644, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[645, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[645, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[645, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[645, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[645, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[645, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[645, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[645, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[646, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[646, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[646, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[646, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[646, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[646, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[646, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "multitasklasso (class in sklearn.linear_model)": [[647, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[647, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[647, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[647, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[647, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[647, "sklearn.linear_model.MultiTaskLasso.score"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[647, "sklearn.linear_model.MultiTaskLasso.set_params"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[647, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[648, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[648, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[648, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[648, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[648, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[648, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[648, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[649, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[649, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[649, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[649, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[649, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[649, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[650, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[650, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[650, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[650, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[650, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[650, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[651, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[651, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[651, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[651, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[651, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[651, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[651, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[651, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[651, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[651, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[652, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[653, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[653, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[653, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[653, "sklearn.linear_model.Perceptron.fit"]], "get_params() (sklearn.linear_model.perceptron method)": [[653, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[653, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[653, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[653, "sklearn.linear_model.Perceptron.score"]], "set_params() (sklearn.linear_model.perceptron method)": [[653, "sklearn.linear_model.Perceptron.set_params"]], "sparsify() (sklearn.linear_model.perceptron method)": [[653, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[654, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[654, "sklearn.linear_model.PoissonRegressor.fit"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[654, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[654, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[654, "sklearn.linear_model.PoissonRegressor.score"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[654, "sklearn.linear_model.PoissonRegressor.set_params"]], "quantileregressor (class in sklearn.linear_model)": [[655, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[655, "sklearn.linear_model.QuantileRegressor.fit"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[655, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[655, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[655, "sklearn.linear_model.QuantileRegressor.score"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[655, "sklearn.linear_model.QuantileRegressor.set_params"]], "ransacregressor (class in sklearn.linear_model)": [[656, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[656, "sklearn.linear_model.RANSACRegressor.fit"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[656, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[656, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[656, "sklearn.linear_model.RANSACRegressor.score"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[656, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[657, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[657, "sklearn.linear_model.Ridge.fit"]], "get_params() (sklearn.linear_model.ridge method)": [[657, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[657, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[657, "sklearn.linear_model.Ridge.score"]], "set_params() (sklearn.linear_model.ridge method)": [[657, "sklearn.linear_model.Ridge.set_params"]], "ridgecv (class in sklearn.linear_model)": [[658, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[658, "sklearn.linear_model.RidgeCV.fit"]], "get_params() (sklearn.linear_model.ridgecv method)": [[658, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[658, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[658, "sklearn.linear_model.RidgeCV.score"]], "set_params() (sklearn.linear_model.ridgecv method)": [[658, "sklearn.linear_model.RidgeCV.set_params"]], "ridgeclassifier (class in sklearn.linear_model)": [[659, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[659, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[659, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[659, "sklearn.linear_model.RidgeClassifier.fit"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[659, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[659, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[659, "sklearn.linear_model.RidgeClassifier.score"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[659, "sklearn.linear_model.RidgeClassifier.set_params"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[660, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[660, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[660, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[660, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[660, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[660, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[660, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[660, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "sgdclassifier (class in sklearn.linear_model)": [[661, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[661, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[661, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[661, "sklearn.linear_model.SGDClassifier.fit"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[661, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[661, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[661, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[661, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[661, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[661, "sklearn.linear_model.SGDClassifier.score"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[661, "sklearn.linear_model.SGDClassifier.set_params"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[661, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[662, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[662, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[662, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[662, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[662, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[662, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[662, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[662, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[662, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[662, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[662, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[663, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[663, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[663, "sklearn.linear_model.SGDRegressor.fit"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[663, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[663, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[663, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[663, "sklearn.linear_model.SGDRegressor.score"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[663, "sklearn.linear_model.SGDRegressor.set_params"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[663, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[664, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[664, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[664, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[664, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[664, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[664, "sklearn.linear_model.TheilSenRegressor.set_params"]], "tweedieregressor (class in sklearn.linear_model)": [[665, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[665, "sklearn.linear_model.TweedieRegressor.fit"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[665, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[665, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[665, "sklearn.linear_model.TweedieRegressor.score"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[665, "sklearn.linear_model.TweedieRegressor.set_params"]], "enet_path() (in module sklearn.linear_model)": [[666, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[667, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[668, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[669, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[670, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[671, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[672, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[673, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[673, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[673, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[673, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_params() (sklearn.manifold.isomap method)": [[673, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[673, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[673, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[673, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[673, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[674, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[674, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[674, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[674, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[674, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[674, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[674, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[674, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[675, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[675, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[675, "sklearn.manifold.MDS.fit_transform"]], "get_params() (sklearn.manifold.mds method)": [[675, "sklearn.manifold.MDS.get_params"]], "set_params() (sklearn.manifold.mds method)": [[675, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[676, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[676, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[676, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_params() (sklearn.manifold.spectralembedding method)": [[676, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[676, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[677, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[677, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[677, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[677, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_params() (sklearn.manifold.tsne method)": [[677, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[677, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[677, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[678, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[679, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[680, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[681, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[682, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[682, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[682, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[682, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[683, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[683, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[683, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[683, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[684, "sklearn.metrics.DistanceMetric"]], "dist_to_rdist() (sklearn.metrics.distancemetric method)": [[684, "sklearn.metrics.DistanceMetric.dist_to_rdist"]], "get_metric() (sklearn.metrics.distancemetric method)": [[684, "sklearn.metrics.DistanceMetric.get_metric"]], "pairwise() (sklearn.metrics.distancemetric method)": [[684, "sklearn.metrics.DistanceMetric.pairwise"]], "rdist_to_dist() (sklearn.metrics.distancemetric method)": [[684, "sklearn.metrics.DistanceMetric.rdist_to_dist"]], "precisionrecalldisplay (class in sklearn.metrics)": [[685, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[685, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[685, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[685, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[686, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[686, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[686, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[686, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[687, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[687, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[687, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[687, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[688, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[689, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[690, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[691, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[692, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[693, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[694, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[695, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[696, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[697, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[698, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[699, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[700, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[703, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[705, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[711, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[716, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[717, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[718, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[719, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[720, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[724, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[725, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[726, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[727, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[728, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[729, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[730, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[731, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[732, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[733, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[734, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[735, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[736, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[737, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[738, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[739, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[740, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[741, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[742, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[743, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[744, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[745, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[746, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[747, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[748, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[749, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[750, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[751, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[752, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[753, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[754, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[762, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[763, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[764, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[765, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[766, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[767, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[768, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[769, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[770, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[771, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[772, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[773, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[774, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[775, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[776, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[777, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[778, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[779, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[779, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[779, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[779, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[779, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[779, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[779, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[779, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[779, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[779, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[780, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[780, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[780, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[780, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[780, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[780, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[780, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[780, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[780, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[780, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[780, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[780, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[781, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[781, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[781, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[781, "sklearn.model_selection.GridSearchCV.fit"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[781, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[781, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[781, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[781, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[781, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[781, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[781, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[781, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[781, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[781, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[782, "sklearn.model_selection.GroupKFold"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[782, "sklearn.model_selection.GroupKFold.get_n_splits"]], "split() (sklearn.model_selection.groupkfold method)": [[782, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[783, "sklearn.model_selection.GroupShuffleSplit"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[783, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[783, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[784, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[784, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[784, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[784, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[784, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[784, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[784, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[784, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[784, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[784, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[784, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[784, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[784, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[784, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[785, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[785, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[786, "sklearn.model_selection.KFold"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[786, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[786, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[787, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[787, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[787, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[788, "sklearn.model_selection.LeaveOneGroupOut"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[788, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[788, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[789, "sklearn.model_selection.LeaveOneOut"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[789, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[789, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[790, "sklearn.model_selection.LeavePGroupsOut"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[790, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[790, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[791, "sklearn.model_selection.LeavePOut"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[791, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[791, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[792, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[793, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[794, "sklearn.model_selection.PredefinedSplit"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[794, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[794, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[795, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[795, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[795, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[795, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[795, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[795, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[795, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[795, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[795, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[795, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[795, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[795, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[795, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[795, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[796, "sklearn.model_selection.RepeatedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[796, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[796, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[797, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[797, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[797, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[798, "sklearn.model_selection.ShuffleSplit"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[798, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[798, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[799, "sklearn.model_selection.StratifiedGroupKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[799, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[799, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[800, "sklearn.model_selection.StratifiedKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[800, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[800, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[801, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[801, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[801, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[802, "sklearn.model_selection.TimeSeriesSplit"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[802, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[802, "sklearn.model_selection.TimeSeriesSplit.split"]], "check_cv() (in module sklearn.model_selection)": [[803, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[804, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[805, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[806, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[807, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[808, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[809, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[810, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[811, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[811, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[811, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[811, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[811, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[811, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[811, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[811, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[811, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "onevsrestclassifier (class in sklearn.multiclass)": [[812, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[812, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[812, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[812, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[812, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[812, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[812, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[812, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[812, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[812, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[812, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "outputcodeclassifier (class in sklearn.multiclass)": [[813, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[813, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[813, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[813, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[813, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[813, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "classifierchain (class in sklearn.multioutput)": [[814, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[814, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[814, "sklearn.multioutput.ClassifierChain.fit"]], "get_params() (sklearn.multioutput.classifierchain method)": [[814, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[814, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[814, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[814, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[814, "sklearn.multioutput.ClassifierChain.set_params"]], "multioutputclassifier (class in sklearn.multioutput)": [[815, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[815, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[815, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[815, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[815, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[815, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[815, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[815, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "multioutputregressor (class in sklearn.multioutput)": [[816, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[816, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[816, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[816, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[816, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[816, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[816, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "regressorchain (class in sklearn.multioutput)": [[817, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[817, "sklearn.multioutput.RegressorChain.fit"]], "get_params() (sklearn.multioutput.regressorchain method)": [[817, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[817, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[817, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[817, "sklearn.multioutput.RegressorChain.set_params"]], "bernoullinb (class in sklearn.naive_bayes)": [[818, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[818, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[818, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[818, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[818, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[818, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[818, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[818, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[818, "sklearn.naive_bayes.BernoulliNB.score"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[818, "sklearn.naive_bayes.BernoulliNB.set_params"]], "categoricalnb (class in sklearn.naive_bayes)": [[819, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[819, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[819, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[819, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[819, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[819, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[819, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[819, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[819, "sklearn.naive_bayes.CategoricalNB.score"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[819, "sklearn.naive_bayes.CategoricalNB.set_params"]], "complementnb (class in sklearn.naive_bayes)": [[820, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[820, "sklearn.naive_bayes.ComplementNB.fit"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[820, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[820, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[820, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[820, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[820, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[820, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[820, "sklearn.naive_bayes.ComplementNB.score"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[820, "sklearn.naive_bayes.ComplementNB.set_params"]], "gaussiannb (class in sklearn.naive_bayes)": [[821, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[821, "sklearn.naive_bayes.GaussianNB.fit"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[821, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[821, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[821, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[821, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[821, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[821, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[821, "sklearn.naive_bayes.GaussianNB.score"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[821, "sklearn.naive_bayes.GaussianNB.set_params"]], "multinomialnb (class in sklearn.naive_bayes)": [[822, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[822, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[822, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[822, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[822, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[822, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[822, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[822, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[822, "sklearn.naive_bayes.MultinomialNB.score"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[822, "sklearn.naive_bayes.MultinomialNB.set_params"]], "balltree (class in sklearn.neighbors)": [[823, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[823, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[823, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[823, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[823, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[823, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[823, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[823, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[823, "sklearn.neighbors.BallTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.balltree method)": [[823, "sklearn.neighbors.BallTree.valid_metrics"]], "kdtree (class in sklearn.neighbors)": [[824, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[824, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[824, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[824, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[824, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[824, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[824, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[824, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[824, "sklearn.neighbors.KDTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.kdtree method)": [[824, "sklearn.neighbors.KDTree.valid_metrics"]], "kneighborsclassifier (class in sklearn.neighbors)": [[825, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[825, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[825, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[825, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[825, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[825, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[825, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[825, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[825, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "kneighborsregressor (class in sklearn.neighbors)": [[826, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[826, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[826, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[826, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[826, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[826, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[826, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[826, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "kneighborstransformer (class in sklearn.neighbors)": [[827, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[827, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[827, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[827, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[827, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[827, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[827, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[827, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[827, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[827, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[828, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[828, "sklearn.neighbors.KernelDensity.fit"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[828, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[828, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[828, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[828, "sklearn.neighbors.KernelDensity.score_samples"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[828, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[829, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[829, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[829, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[829, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[829, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[829, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[829, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[829, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[829, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[829, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[830, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[830, "sklearn.neighbors.NearestCentroid.fit"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[830, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[830, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[830, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[830, "sklearn.neighbors.NearestCentroid.set_params"]], "nearestneighbors (class in sklearn.neighbors)": [[831, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[831, "sklearn.neighbors.NearestNeighbors.fit"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[831, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[831, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[831, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[831, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[831, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[831, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[832, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[832, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[832, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[832, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[832, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[832, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[832, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[832, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[833, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[833, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[833, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[833, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[833, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[833, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[833, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[833, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[833, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[834, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[834, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[834, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[834, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[834, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[834, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[834, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[834, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[835, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[835, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[835, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[835, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[835, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[835, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[835, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[835, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[835, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[835, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[836, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[837, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[838, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[839, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[839, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[839, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[839, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[839, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[839, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[839, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[839, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[839, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[839, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[839, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[840, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[840, "sklearn.neural_network.MLPClassifier.fit"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[840, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[840, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[840, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[840, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[840, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[840, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[840, "sklearn.neural_network.MLPClassifier.set_params"]], "mlpregressor (class in sklearn.neural_network)": [[841, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[841, "sklearn.neural_network.MLPRegressor.fit"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[841, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[841, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[841, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[841, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[841, "sklearn.neural_network.MLPRegressor.set_params"]], "featureunion (class in sklearn.pipeline)": [[842, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[842, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[842, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[842, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[842, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_params() (sklearn.pipeline.featureunion method)": [[842, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[842, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[842, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[842, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[842, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[843, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[843, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[843, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_params() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[843, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[843, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.set_params"]], "transform() (sklearn.pipeline.pipeline method)": [[843, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[844, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[845, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[846, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[846, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[846, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[846, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.binarizer method)": [[846, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[846, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[846, "sklearn.preprocessing.Binarizer.set_params"]], "transform() (sklearn.preprocessing.binarizer method)": [[846, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[847, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[847, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[847, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[847, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[847, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[847, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[847, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[847, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[847, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[848, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[848, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[848, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[848, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[848, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[848, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[848, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[848, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[848, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[849, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[849, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[849, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[849, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[849, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[849, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[849, "sklearn.preprocessing.KernelCenterer.set_params"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[849, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[850, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[850, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[850, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[850, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[850, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[850, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[850, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[850, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[851, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[851, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[851, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[851, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[851, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[851, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[851, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[851, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[852, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[852, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[852, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[852, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[852, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[852, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[852, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[852, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[852, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[852, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[853, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[853, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[853, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[853, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[853, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[853, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[853, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[853, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[853, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[853, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[854, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[854, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[854, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[854, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[854, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[854, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[854, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[854, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[855, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[855, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[855, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[855, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.normalizer method)": [[855, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[855, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[855, "sklearn.preprocessing.Normalizer.set_params"]], "transform() (sklearn.preprocessing.normalizer method)": [[855, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[856, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[856, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[856, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[856, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[856, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[856, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[856, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[856, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[856, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[856, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[857, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[857, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[857, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[857, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[857, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[857, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[857, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[857, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[857, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[857, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[858, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[858, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[858, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[858, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[858, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[858, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[858, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[858, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[858, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[859, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[859, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[859, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[859, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[859, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[859, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[859, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[859, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[859, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[860, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[860, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[860, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[860, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[860, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[860, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[860, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[860, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[860, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[861, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[861, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[861, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[861, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[861, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[861, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[861, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[861, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[861, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[862, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[862, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[862, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[862, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[862, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[862, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[862, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[862, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[863, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[863, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[863, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[863, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[863, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[863, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[863, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[863, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[863, "sklearn.preprocessing.StandardScaler.set_params"]], "transform() (sklearn.preprocessing.standardscaler method)": [[863, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[864, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[864, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[864, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[864, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[864, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[864, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[864, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[864, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[864, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[865, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[866, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[867, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[868, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[869, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[870, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[871, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[872, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[873, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[874, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[875, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[875, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[875, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[875, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[875, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[875, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[875, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[875, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[875, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[876, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[876, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[876, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[876, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[876, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[876, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[876, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[876, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[876, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[877, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[878, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[878, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[878, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[878, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[878, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[878, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[878, "sklearn.semi_supervised.LabelPropagation.set_params"]], "labelspreading (class in sklearn.semi_supervised)": [[879, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[879, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[879, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[879, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[879, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[879, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[879, "sklearn.semi_supervised.LabelSpreading.set_params"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[880, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[880, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[880, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[880, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[880, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[880, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[880, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[880, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[880, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[881, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[882, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[883, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[883, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[883, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[883, "sklearn.svm.LinearSVC.fit"]], "get_params() (sklearn.svm.linearsvc method)": [[883, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[883, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[883, "sklearn.svm.LinearSVC.score"]], "set_params() (sklearn.svm.linearsvc method)": [[883, "sklearn.svm.LinearSVC.set_params"]], "sparsify() (sklearn.svm.linearsvc method)": [[883, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[884, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[884, "sklearn.svm.LinearSVR.fit"]], "get_params() (sklearn.svm.linearsvr method)": [[884, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[884, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[884, "sklearn.svm.LinearSVR.score"]], "set_params() (sklearn.svm.linearsvr method)": [[884, "sklearn.svm.LinearSVR.set_params"]], "nusvc (class in sklearn.svm)": [[885, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[885, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[885, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[885, "sklearn.svm.NuSVC.fit"]], "get_params() (sklearn.svm.nusvc method)": [[885, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[885, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[885, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[885, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[885, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[885, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[885, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[885, "sklearn.svm.NuSVC.score"]], "set_params() (sklearn.svm.nusvc method)": [[885, "sklearn.svm.NuSVC.set_params"]], "nusvr (class in sklearn.svm)": [[886, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[886, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[886, "sklearn.svm.NuSVR.fit"]], "get_params() (sklearn.svm.nusvr method)": [[886, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[886, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[886, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[886, "sklearn.svm.NuSVR.score"]], "set_params() (sklearn.svm.nusvr method)": [[886, "sklearn.svm.NuSVR.set_params"]], "oneclasssvm (class in sklearn.svm)": [[887, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[887, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[887, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[887, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[887, "sklearn.svm.OneClassSVM.fit_predict"]], "get_params() (sklearn.svm.oneclasssvm method)": [[887, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[887, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[887, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[887, "sklearn.svm.OneClassSVM.score_samples"]], "set_params() (sklearn.svm.oneclasssvm method)": [[887, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[888, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[888, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[888, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[888, "sklearn.svm.SVC.fit"]], "get_params() (sklearn.svm.svc method)": [[888, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[888, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[888, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[888, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[888, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[888, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[888, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[888, "sklearn.svm.SVC.score"]], "set_params() (sklearn.svm.svc method)": [[888, "sklearn.svm.SVC.set_params"]], "svr (class in sklearn.svm)": [[889, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[889, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[889, "sklearn.svm.SVR.fit"]], "get_params() (sklearn.svm.svr method)": [[889, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[889, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[889, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[889, "sklearn.svm.SVR.score"]], "set_params() (sklearn.svm.svr method)": [[889, "sklearn.svm.SVR.set_params"]], "l1_min_c() (in module sklearn.svm)": [[890, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[891, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[891, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[891, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[891, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[891, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[891, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[891, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[891, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[891, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[891, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[891, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[891, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[891, "sklearn.tree.DecisionTreeClassifier.score"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[891, "sklearn.tree.DecisionTreeClassifier.set_params"]], "decisiontreeregressor (class in sklearn.tree)": [[892, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[892, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[892, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[892, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[892, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[892, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[892, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[892, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[892, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[892, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[892, "sklearn.tree.DecisionTreeRegressor.score"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[892, "sklearn.tree.DecisionTreeRegressor.set_params"]], "extratreeclassifier (class in sklearn.tree)": [[893, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[893, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[893, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[893, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[893, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[893, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[893, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[893, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[893, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[893, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[893, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[893, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[893, "sklearn.tree.ExtraTreeClassifier.score"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[893, "sklearn.tree.ExtraTreeClassifier.set_params"]], "extratreeregressor (class in sklearn.tree)": [[894, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[894, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[894, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[894, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[894, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[894, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[894, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[894, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[894, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[894, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[894, "sklearn.tree.ExtraTreeRegressor.score"]], "set_params() (sklearn.tree.extratreeregressor method)": [[894, "sklearn.tree.ExtraTreeRegressor.set_params"]], "export_graphviz() (in module sklearn.tree)": [[895, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[896, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[897, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[898, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[898, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[898, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[898, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[898, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[898, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[898, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[898, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[898, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[898, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[898, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[898, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[899, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[900, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[901, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[902, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[903, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[904, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[905, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[906, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[907, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[908, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[909, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[910, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[911, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[912, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[913, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[914, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[915, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[916, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[917, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[918, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[919, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[920, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[921, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[922, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[923, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[924, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[925, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[926, "sklearn.utils.indexable"]], "available_if() (in module sklearn.utils.metaestimators)": [[927, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[928, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[929, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[930, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[931, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[932, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[932, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[932, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[932, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[932, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[933, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[934, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[935, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[936, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[937, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[938, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[939, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[940, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[941, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[942, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[943, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[944, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[945, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[946, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[947, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[948, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[949, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[950, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[951, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[952, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[953, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[954, "sklearn.utils.validation.has_fit_parameter"]]}})