Search.setIndex({"alltitles": {"(Generalized) linear models": [[214, "generalized-linear-models"]], "1-way partial dependence with different models": [[188, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[102, "newsgroups-dataset"]], "2D interaction plots": [[188, "d-interaction-plots"]], "3D representation": [[188, "d-representation"]], "A constant prediction baseline": [[214, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[91, null]], "A demo of structured Ward hierarchical clustering on an image of coins": [[81, null]], "A demo of the Spectral Biclustering algorithm": [[58, null]], "A demo of the Spectral Co-Clustering algorithm": [[59, null]], "A demo of the mean-shift clustering algorithm": [[96, null]], "A more flexible plotting API": [[324, "a-more-flexible-plotting-api"]], "A note on shuffling": [[415, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[52, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[385, "a-simple-algorithmic-trick-warm-restarts"]], "A typical workflow for triaging issues": [[378, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[1001, "aic-and-bic-criteria"]], "API Interface": [[402, "api-interface"]], "API Reference": [[2, null]], "API changes": [[1043, "api-changes"]], "API changes summary": [[1036, "api-changes-summary"], [1036, "id4"], [1036, "id7"], [1036, "id10"], [1037, "api-changes-summary"], [1038, "api-changes-summary"], [1039, "api-changes-summary"], [1040, "api-changes-summary"], [1041, "api-changes-summary"], [1042, "api-changes-summary"], [1042, "id6"], [1043, "api-changes-summary"]], "API compatibility checkers": [[41, "module-sklearn.utils.estimator_checks"]], "APIs of scikit-learn objects": [[381, "apis-of-scikit-learn-objects"]], "ARDRegression": [[648, null]], "ARFF parser": [[373, "arff-parser"]], "AWeber": [[1029, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[177, null]], "Ablation study": [[251, "ablation-study"]], "About the project": [[391, "about-the-project"]], "About us": [[0, null]], "Access pipeline steps": [[412, "access-pipeline-steps"]], "Access to nested parameters": [[412, "access-to-nested-parameters"]], "Accuracy of the Model": [[189, "accuracy-of-the-model"]], "Accuracy score": [[1005, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[357, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Active Core Contributors": [[0, "active-core-contributors"]], "AdaBoost": [[418, "adaboost"]], "AdaBoostClassifier": [[557, null]], "AdaBoostRegressor": [[558, null]], "Add support for monotonic constraints in tree-based models": [[328, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[411, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[997, "additive-chi-squared-kernel"]], "AdditiveChi2Sampler": [[642, null]], "Addressing the problem with a business metric": [[266, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[72, null]], "Advanced Plotting With Partial Dependence": [[252, null]], "Advantages:": [[411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null]], "Affinity Propagation": [[411, "affinity-propagation"]], "AffinityPropagation": [[443, null]], "Agglomerative clustering with and without structure": [[74, null]], "Agglomerative clustering with different metrics": [[75, null]], "AgglomerativeClustering": [[444, null]], "Aggressive elimination of candidates": [[994, "aggressive-elimination-of-candidates"]], "Algorithms": [[1009, "algorithms"]], "Alpine Linux": [[397, "alpine-linux"]], "Alternatives to brute force parameter search": [[994, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[251, "ames-housing-dataset"]], "An example custom estimator implementing a simple classifier": [[133, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[92, null]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[397, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[135, "analysis"]], "Analysis of a bag-of-words document classifier": [[353, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[147, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[188, "analysis-of-the-plots"]], "Analysis of the results": [[64, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[994, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[52, "analyzing-the-bike-sharing-demand-dataset"]], "Applications and examples": [[419, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[292, null]], "Arch Linux": [[397, "arch-linux"]], "Architectural / general goals": [[1025, "architectural-general-goals"]], "Array API support (experimental)": [[407, null]], "Artwork": [[0, "artwork"]], "Attributes": [[393, "attributes"]], "Authors": [[1036, "authors"], [1036, "id20"]], "Automated Contributions Policy": [[379, "automated-contributions-policy"]], "Automatic Relevance Determination (ARD)": [[199, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[1001, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[392, "automatic-parameter-searches"]], "Auxiliary functions that operate on arrays": [[41, "module-sklearn.utils.arrayfuncs"]], "Available Plotting Utilities": [[1033, "available-plotting-utilities"]], "Available documentation for scikit-learn": [[1032, null]], "BIRCH": [[411, "birch"]], "BNP Paribas Cardif": [[1029, "id29"]], "Bagging meta-estimator": [[418, "bagging-meta-estimator"]], "BaggingClassifier": [[559, null]], "BaggingRegressor": [[560, null]], "Balance model complexity and cross-validated score": [[271, null]], "Balanced accuracy score": [[1005, "balanced-accuracy-score"]], "Ball Tree": [[1008, "ball-tree"]], "BallTree": [[848, null]], "BaseEstimator": [[425, null]], "BaseEstimator and mixins:": [[381, null]], "Basic kernels": [[421, "basic-kernels"]], "Basic shrinkage": [[413, "basic-shrinkage"]], "Bayesian Regression": [[1001, "bayesian-regression"]], "Bayesian Ridge Regression": [[1001, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[194, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[25, "bayesian-regressors"]], "BayesianGaussianMixture": [[801, null]], "BayesianRidge": [[649, null]], "Benchmark and plot helper functions": [[49, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[49, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[46, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[49, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[49, "benchmark-throughput"]], "Benchmarking classifiers": [[353, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[1007, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[1010, "bernoulli-restricted-boltzmann-machines"]], "BernoulliNB": [[843, null]], "BernoulliRBM": [[864, null]], "Bestofmedia Group": [[1029, "id13"]], "BiclusterMixin": [[426, null]], "Biclustering": [[56, null], [184, "biclustering"], [375, "biclustering"], [408, null]], "Biclustering documents with the Spectral Co-clustering algorithm": [[57, null]], "Biclustering evaluation": [[408, "biclustering-evaluation"]], "Biclustering metrics": [[27, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[188, "bike-sharing-dataset-preprocessing"]], "Binarizer": [[871, null]], "Binary Case": [[1001, "binary-case"]], "Binary case": [[1005, "binary-case"]], "Binary classification": [[1005, "binary-classification"]], "Birch": [[445, null]], "Birchbox": [[1029, "id12"]], "Bisecting K-Means": [[411, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[78, null]], "BisectingKMeans": [[446, null]], "BisectingKMeans: divide and cluster": [[325, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[122, null]], "Boil down your script to something as small as possible": [[384, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[160, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1029, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[376, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[1005, "brier-score-loss"]], "Brute Force": [[1008, "brute-force"]], "Bug Tracker": [[1028, "bug-tracker"]], "Bug fixes": [[1039, "bug-fixes"], [1039, "id1"], [1039, "id3"], [1040, "bug-fixes"], [1040, "id3"], [1041, "bug-fixes"], [1041, "id3"], [1042, "bug-fixes"], [1042, "id5"], [1043, "bug-fixes"], [1043, "id4"]], "Bug triaging and issue curation": [[378, null]], "Build a pipeline": [[412, "build-a-pipeline"]], "Build dependencies": [[377, "build-dependencies"]], "Build the dataset": [[176, "build-the-dataset"]], "Building a specific version from a tag": [[377, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[387, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[377, "building-from-source"]], "Building the documentation": [[379, "building-the-documentation"]], "Bulk versus Atomic mode": [[366, "bulk-versus-atomic-mode"]], "Bunch": [[923, null]], "CCA": [[485, null]], "CCA (PLS mode B with symmetric deflation)": [[115, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[362, "cv-splitters"], [362, "id3"]], "Caching nearest neighbors": [[294, null]], "Caching transformers within a Pipeline": [[104, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[412, "caching-transformers-avoid-repeated-computation"]], "CalibratedClassifierCV": [[440, null]], "Calibrating a classifier": [[409, "calibrating-a-classifier"]], "Calibration": [[60, null], [184, "calibration"]], "Calibration curves": [[62, "calibration-curves"], [64, "calibration-curves"], [409, "calibration-curves"]], "Calibration of the confidence interval": [[147, "calibration-of-the-confidence-interval"]], "CalibrationDisplay": [[441, null]], "California Housing dataset": [[374, "california-housing-dataset"]], "Calinski-Harabasz Index": [[411, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[115, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[414, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[251, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[144, null]], "Categorical Features Support": [[418, "categorical-features-support"]], "Categorical Naive Bayes": [[1007, "categorical-naive-bayes"]], "CategoricalNB": [[844, null]], "Centering kernel matrices": [[1015, "centering-kernel-matrices"]], "Chain of binary classifiers": [[291, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[379, "change-the-default-value-of-a-parameter"]], "Change.org": [[1029, "id14"]], "Changed displays": [[1052, "changed-displays"]], "Changed models": [[1043, "changed-models"], [1044, "changed-models"], [1044, "id9"], [1044, "id22"], [1045, "changed-models"], [1045, "id6"], [1046, "changed-models"], [1047, "changed-models"], [1047, "id3"], [1048, "changed-models"], [1049, "changed-models"], [1050, "changed-models"], [1050, "id6"], [1051, "changed-models"], [1051, "id7"], [1052, "changed-models"], [1052, "id4"], [1053, "changed-models"], [1053, "id1"], [1054, "changed-models"]], "Changelog": [[1036, "changelog"], [1036, "id1"], [1036, "id3"], [1036, "id6"], [1036, "id9"], [1036, "id12"], [1036, "id14"], [1036, "id16"], [1036, "id18"], [1036, "id19"], [1037, "changelog"], [1037, "id2"], [1038, "changelog"], [1039, "changelog"], [1040, "changelog"], [1040, "id2"], [1041, "changelog"], [1041, "id2"], [1042, "changelog"], [1042, "id1"], [1042, "id3"], [1043, "changelog"], [1043, "id2"], [1044, "changelog"], [1044, "id1"], [1044, "id5"], [1044, "id10"], [1044, "id23"], [1045, "changelog"], [1045, "id1"], [1045, "id2"], [1045, "id7"], [1046, "changelog"], [1046, "id1"], [1046, "id4"], [1047, "changelog"], [1047, "id1"], [1047, "id4"], [1048, "changelog"], [1048, "id1"], [1048, "id4"], [1049, "changelog"], [1049, "id6"], [1050, "changelog"], [1050, "id1"], [1050, "id7"], [1051, "changelog"], [1051, "id1"], [1051, "id9"], [1052, "changelog"], [1052, "id1"], [1052, "id6"], [1053, "changelog"], [1053, "id3"], [1054, "changelog"], [1054, "id2"], [1054, "id6"], [1055, "changelog"]], "Changes impacting all modules": [[1051, "changes-impacting-all-modules"], [1051, "id8"], [1052, "changes-impacting-all-modules"], [1052, "id5"], [1053, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1053, "changes-impacting-many-modules"], [1054, "changes-impacting-many-modules"], [1054, "id1"], [1054, "id5"], [1055, "changes-impacting-many-modules"]], "Changes to estimator checks": [[1044, "changes-to-estimator-checks"], [1045, "changes-to-estimator-checks"], [1046, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[387, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[321, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[187, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[1003, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[416, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[46, "choose-parameters"]], "Choosing the right estimator": [[399, null]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[393, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[275, null]], "Class likelihood ratios": [[1005, "class-likelihood-ratios"]], "ClassNamePrefixFeaturesOutMixin": [[427, null]], "Classical linear regressors": [[25, "classical-linear-regressors"]], "Classification": [[65, null], [68, "classification"], [179, "classification"], [184, "classification"], [1001, "classification"], [1008, "id4"], [1009, "classification"], [1019, "classification"], [1020, "classification"], [1021, "classification"]], "Classification and ROC analysis": [[282, "classification-and-roc-analysis"]], "Classification criteria": [[1021, "classification-criteria"]], "Classification metrics": [[27, "classification-metrics"], [1005, "classification-metrics"]], "Classification of text documents using sparse features": [[353, null]], "Classification pipeline": [[102, "classification-pipeline"]], "Classification report": [[1005, "classification-report"]], "Classifier comparison": [[67, null]], "ClassifierChain": [[839, null], [1006, "classifierchain"]], "ClassifierMixin": [[428, null]], "ClassifierTags": [[924, null]], "Clear definition of the public API": [[1046, "clear-definition-of-the-public-api"]], "Cloning": [[381, "cloning"]], "Closing issues: a tough call": [[378, null]], "Cluster centers - MiniBatchKMeans": [[121, "cluster-centers-minibatchkmeans"]], "ClusterMixin": [[429, null]], "Clustering": [[71, null], [184, "clustering"], [411, null]], "Clustering evaluation summary": [[354, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[416, null]], "Clustering metrics": [[27, "module-sklearn.metrics.cluster"], [1005, "clustering-metrics"]], "Clustering performance evaluation": [[411, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[354, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[354, null]], "Clustering using affinity propagation": [[51, "clustering-using-affinity-propagation"]], "Code Contributors": [[1040, "code-contributors"], [1041, "code-contributors"], [1042, "code-contributors"], [1042, "id7"]], "Code Review Guidelines": [[379, "code-review-guidelines"]], "Code and Documentation Contributors": [[1043, "code-and-documentation-contributors"], [1043, "id10"], [1044, "code-and-documentation-contributors"], [1044, "id8"], [1044, "id21"], [1044, "id41"]], "Coding Sprints": [[0, "coding-sprints"]], "Coding guidelines": [[381, "coding-guidelines"]], "Coefficients comparison": [[285, "coefficients-comparison"]], "Cohen\u2019s kappa": [[1005, "cohen-s-kappa"]], "Column Transformer with Heterogeneous Data Sources": [[102, null]], "Column Transformer with Mixed Types": [[103, null]], "ColumnTransformer": [[467, null]], "ColumnTransformer for heterogeneous data": [[412, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[329, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[155, null]], "Combining the display objects into a single plot": [[242, "combining-the-display-objects-into-a-single-plot"]], "Commit message markers": [[379, "commit-message-markers"]], "Common Vectorizer usage": [[419, "common-vectorizer-usage"]], "Common cases: predefined values": [[1005, "common-cases-predefined-values"]], "Common estimator checks": [[407, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[362, null]], "Common pitfalls and subtleties": [[362, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[187, null]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[243, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[77, null]], "Compare Stochastic learning strategies for MLPClassifier": [[308, null]], "Compare cross decomposition methods": [[115, null]], "Compare different approaches to setting the regularization parameter": [[109, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[63, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[312, null]], "Compare times of SVR and Kernel Ridge Regression": [[247, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[165, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[194, null]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[300, null]], "Comparing QuantileRegressor and LinearRegression": [[216, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[141, null]], "Comparing Target Encoder with Other Encoders": [[318, null]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[241, null]], "Comparing different clustering algorithms on toy datasets": [[79, null]], "Comparing different hierarchical linkage methods on toy datasets": [[95, null]], "Comparing random forests and the multi-output meta estimator": [[154, null]], "Comparing randomized search and grid search for hyperparameter estimation": [[280, null]], "Comparing the results": [[192, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[200, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[200, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[272, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[272, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[221, null]], "Comparison between grid search and successive halving": [[283, null]], "Comparison of Calibration of Classifiers": [[64, null]], "Comparison of F-test and mutual information": [[164, null]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[129, null]], "Comparison of LDA and QDA": [[70, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[234, null]], "Comparison of kernel ridge and Gaussian process regression": [[171, null]], "Comparison of kernel ridge regression and SVR": [[247, null]], "Comparison of results": [[111, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[97, null]], "Comparison with special purpose text vectorizers": [[355, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[1001, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[1007, "complement-naive-bayes"]], "ComplementNB": [[845, null]], "Complexity": [[1008, "complexity"], [1009, "complexity"], [1019, "complexity"], [1020, "complexity"], [1021, "complexity"]], "Complexity analysis": [[274, "complexity-analysis"]], "Composite estimators and parameter spaces": [[994, "composite-estimators-and-parameter-spaces"]], "CompoundKernel": [[616, null]], "Compression via vector quantization": [[86, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[53, null]], "Computation methods": [[1012, "computation-methods"]], "Computation times": [[1026, null]], "Computational Performance": [[366, null]], "Compute Affinity Propagation": [[73, "compute-affinity-propagation"]], "Compute DBSCAN": [[82, "compute-dbscan"]], "Compute clustering": [[81, "compute-clustering"], [100, "compute-clustering"], [100, "id1"]], "Compute clustering with KMeans": [[97, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[96, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[97, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[219, "compute-paths"]], "Compute regularization path": [[207, "compute-regularization-path"]], "Compute score and computation times": [[141, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[109, "compute-the-likelihood-on-test-data"]], "Computing Centrality scores": [[55, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[55, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[415, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[55, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[365, null]], "Concatenating multiple feature extraction methods": [[106, null]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[257, null]], "Concluding remarks": [[43, "concluding-remarks"], [238, "concluding-remarks"]], "Conclusion": [[46, "conclusion"], [52, "conclusion"], [203, "conclusion"], [289, "conclusion"], [295, "conclusion"], [319, "conclusion"], [346, "conclusion"]], "Conclusions": [[199, "conclusions"]], "Configuration switches": [[367, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[366, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[265, null], [1005, "confusion-matrix"]], "ConfusionMatrixDisplay": [[701, null]], "Connectivity graph of an image": [[419, "connectivity-graph-of-an-image"]], "Consideration regarding model refitting and cross-validation": [[266, "consideration-regarding-model-refitting-and-cross-validation"]], "ConstantKernel": [[617, null]], "Construct the kernel-based regression models": [[247, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[248, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[248, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[411, "contingency-matrix"]], "Continuous Integration (CI)": [[379, "continuous-integration-ci"]], "Contributing": [[379, null], [391, "contributing"]], "Contributing code": [[379, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[394, "contributors"]], "Controlling randomness": [[362, "controlling-randomness"]], "Controlling the tree size": [[418, "controlling-the-tree-size"]], "Convergence of the AdaBoostClassifier": [[135, "convergence-of-the-adaboostclassifier"]], "ConvergenceWarning": [[575, null]], "Core Contributors": [[394, "core-contributors"]], "Cosine similarity": [[1003, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[266, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[266, "cost-sensitive-learning-with-constant-gains-and-costs"]], "CountVectorizer": [[592, null]], "Covariance estimation": [[108, null], [184, "covariance-estimation"], [413, null]], "Coverage error": [[1005, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[384, null]], "Create ConfusionMatrixDisplay": [[242, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[242, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[242, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[319, "create-synthetic-dataset"]], "Create multi-label data, fit, and predict": [[279, "create-multi-label-data-fit-and-predict"]], "Create the data": [[128, "create-the-data"]], "Create the pipeline": [[345, "create-the-pipeline"]], "Creating a dataset": [[346, "creating-a-dataset"]], "Creating a non-noisy data set": [[218, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[135, "creating-the-dataset"]], "Creating transformers": [[102, "creating-transformers"]], "Cross decomposition": [[114, null], [184, "cross-decomposition"], [414, null]], "Cross validation and model selection": [[415, "cross-validation-and-model-selection"]], "Cross validation iterators": [[415, "cross-validation-iterators"]], "Cross validation of time series data": [[415, "cross-validation-of-time-series-data"]], "Cross-validation iterators for grouped data": [[415, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[415, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[415, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[275, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[160, null]], "Cross-validation: evaluating estimator performance": [[415, null]], "Curve Fitting with Bayesian Ridge Regression": [[195, null]], "Custom Kernels": [[1020, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[329, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[270, null]], "Custom transformers": [[1015, "custom-transformers"]], "Customizing the vectorizer classes": [[419, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[380, null]], "DBSCAN": [[411, "dbscan"], [447, null]], "DO NOT report your data unless it is extremely necessary": [[384, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[63, "data"]], "Data Loading and Feature Engineering": [[189, "data-loading-and-feature-engineering"]], "Data Preparation": [[145, "data-preparation"]], "Data Publica": [[1029, "id21"]], "Data and sample properties": [[393, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[43, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[70, "data-generation"], [82, "data-generation"], [90, "data-generation"], [151, "data-generation"], [168, "data-generation"], [177, "data-generation"], [262, "data-generation"], [331, "data-generation"], [349, "data-generation"]], "Data generation and model fitting": [[142, "data-generation-and-model-fitting"]], "Data leakage": [[362, "data-leakage"]], "Data leakage during pre-processing": [[362, "data-leakage-during-pre-processing"]], "Data loading": [[273, "data-loading"]], "Data preprocessing": [[148, "data-preprocessing"]], "DataConversionWarning": [[576, null]], "DataDimensionalityWarning": [[577, null]], "DataFrame Support": [[1053, "dataframe-support"]], "DataRobot": [[1029, "id18"]], "Dataiku": [[1029, "id25"]], "Dataset": [[62, "dataset"], [203, "dataset"], [278, "dataset"]], "Dataset Versions": [[373, "dataset-versions"]], "Dataset and Gaussian process generation": [[180, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[279, "dataset-and-model"]], "Dataset based latent variables model": [[115, "dataset-based-latent-variables-model"]], "Dataset examples": [[117, null], [184, "dataset-examples"]], "Dataset generation": [[178, "dataset-generation"], [216, "dataset-generation"]], "Dataset loading utilities": [[372, null], [384, "dataset-loading-utilities"]], "Dataset preparation": [[121, "dataset-preparation"], [234, "dataset-preparation"]], "Dataset preprocessing and model training": [[251, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[371, null]], "Datasets in svmlight / libsvm format": [[373, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[411, "davies-bouldin-index"]], "Dealing with multiclass target in classifiers": [[41, "module-sklearn.utils.multiclass"]], "Debian/Ubuntu": [[397, "debian-ubuntu"]], "Debugging CI issues": [[387, "debugging-ci-issues"]], "Debugging memory errors in Cython with valgrind": [[387, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Making Process": [[394, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[246, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[359, null]], "Decision Tree Regression with AdaBoost": [[136, null]], "Decision Trees": [[184, "decision-trees"], [356, null], [1021, null]], "Decision boundary": [[295, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[336, null]], "Decision path": [[361, "decision-path"]], "DecisionBoundaryDisplay": [[635, null]], "DecisionTreeClassifier": [[916, null]], "DecisionTreeRegressor": [[917, null]], "Decoding text files": [[419, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[416, null]], "Decomposition": [[120, null], [121, "decomposition"], [184, "decomposition"]], "Decomposition: Dictionary learning": [[121, "decomposition-dictionary-learning"]], "Define a function to visualize cross-validation behavior": [[267, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[234, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[91, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[270, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[355, "define-preprocessing-functions"]], "Define structure of the data": [[81, "define-structure-of-the-data"]], "Define the classifiers": [[269, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[72, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[1005, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[82, null]], "Demo of HDBSCAN clustering algorithm": [[88, null]], "Demo of OPTICS clustering algorithm": [[98, null]], "Demo of affinity propagation clustering algorithm": [[73, null]], "Demonstrating the different strategies of KBinsDiscretizer": [[315, null]], "Demonstration of k-means assumptions": [[90, null]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[276, null]], "Density Estimation": [[417, null]], "Density Estimation for a Gaussian mixture": [[261, null]], "Density Estimation: Histograms": [[417, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1020, "density-estimation-novelty-detection"]], "DensityMixin": [[430, null]], "Dependencies": [[377, "dependencies"]], "Deprecation": [[379, "deprecation"]], "Deprecation / Default Value Change": [[248, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1046, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[186, "description-of-the-simulated-data"]], "Design the proper kernel": [[176, "design-the-proper-kernel"]], "DetCurveDisplay": [[702, null]], "Detection error tradeoff (DET)": [[1005, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[269, null]], "Developer API for HTML representation": [[381, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[381, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[381, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[387, null]], "Developer\u2019s Guide": [[382, null]], "Developing Estimators": [[132, null], [184, "developing-estimators"]], "Developing scikit-learn estimators": [[381, null]], "Developing with the Plotting API": [[386, null]], "Diabetes dataset": [[376, "diabetes-dataset"]], "DictVectorizer": [[355, "dictvectorizer"], [585, null]], "Dictionary Learning": [[416, "dictionary-learning"]], "Dictionary learning": [[121, "dictionary-learning"]], "Dictionary learning - positive code": [[121, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[121, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[121, "dictionary-learning-positive-dictionary-code"]], "DictionaryLearning": [[535, null]], "Differences between solvers": [[1001, "differences-between-solvers"]], "Different label assignment strategies": [[411, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[411, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[381, "different-objects"]], "Different scenario and useful concepts": [[1001, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[402, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[161, null]], "Digits dataset": [[68, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[301, null]], "Dimensionality reduction": [[1008, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[999, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discovering scikit-learn objects": [[41, "module-sklearn.utils.discovery"]], "Discretization": [[1015, "discretization"]], "Dispatching": [[389, null]], "Display Objects": [[1033, "display-objects"]], "Display code coverage in pull requests": [[387, "display-code-coverage-in-pull-requests"]], "Display results": [[219, "display-results"]], "Display the distorted image": [[124, "display-the-distorted-image"]], "Displaying Pipelines": [[253, null]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[253, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[253, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[253, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[253, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[253, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[243, null]], "Distance metrics": [[27, "distance-metrics"]], "DistanceMetric": [[703, null]], "Do you plan to implement transform for target y in a pipeline?": [[391, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[391, "do-you-support-pypy"]], "Documentation": [[379, "documentation"], [1036, "documentation"]], "Documentation Resources": [[1028, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1039, "documentation-improvements"], [1040, "documentation-improvements"]], "Domain specific packages": [[1024, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[421, "dot-product-kernel"]], "Dot-product kernel": [[180, "dot-product-kernel"]], "DotProduct": [[618, null]], "Download data, if not already on disk": [[55, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[183, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[155, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[373, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null]], "Dropping official support for PyPy": [[1055, "dropping-official-support-for-pypy"]], "Dropping support for building with setuptools": [[1055, "dropping-support-for-building-with-setuptools"]], "Dummy estimators": [[1005, "dummy-estimators"]], "DummyClassifier": [[555, null]], "DummyRegressor": [[556, null]], "D\u00b2 score": [[1005, "d2-score"]], "D\u00b2 score for classification": [[1005, "d2-score-for-classification"]], "Earlier versions": [[1036, "earlier-versions"]], "Early stopping in Gradient Boosting": [[145, null]], "Early stopping of Stochastic Gradient Descent": [[222, null]], "Effect of model regularization on training and test error": [[285, null]], "Effect of number of trees and early stopping": [[150, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[317, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[317, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[317, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[107, null]], "Effect of varying threshold for self-training": [[334, null]], "EfficiencyWarning": [[578, null]], "Efficient Linear Algebra & Array Operations": [[388, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[388, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[388, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[121, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[1001, "elastic-net"]], "ElasticNet": [[199, "elasticnet"], [650, null]], "ElasticNetCV": [[651, null]], "EllipticEnvelope": [[472, null]], "Embedding in 2D space": [[51, "embedding-in-2d-space"]], "Embedding techniques comparison": [[235, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Contributors": [[0, "emeritus-core-contributors"]], "Emeritus Maintainers Team": [[0, "emeritus-maintainers-team"]], "Empirical covariance": [[413, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[94, null]], "Empirical validation": [[245, "empirical-validation"]], "EmpiricalCovariance": [[473, null]], "Encoding categorical features": [[1015, "encoding-categorical-features"]], "Encoding strategy": [[86, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1047, "enforcing-keyword-only-arguments"], [1049, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[394, "enhancement-proposals-sleps"]], "Enhancements": [[1039, "enhancements"], [1040, "enhancements"], [1041, "enhancements"], [1042, "enhancements"], [1042, "id4"], [1043, "enhancements"], [1043, "id3"]], "Enriched estimator displays": [[328, "enriched-estimator-displays"]], "Ensemble methods": [[134, null], [184, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[418, null]], "Environment variables": [[367, "environment-variables"]], "Error Calculation": [[145, "error-calculation"]], "Error caused by file path length limit on Windows": [[397, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[135, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[192, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[97, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[192, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[192, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[113, "estimate-the-covariance"]], "Estimate the score": [[183, "estimate-the-score"]], "Estimated Attributes": [[381, "estimated-attributes"]], "Estimation algorithms": [[999, "estimation-algorithms"]], "Estimator Tags": [[381, "estimator-tags"]], "Estimator types": [[381, "estimator-types"]], "Estimators": [[362, "estimators"], [362, "id2"], [381, "estimators"], [407, "estimators"]], "Estimators that handle NaN values": [[995, "estimators-that-handle-nan-values"]], "Evaluate the impact of the regularization parameter": [[285, "evaluate-the-impact-of-the-regularization-parameter"]], "Evaluation": [[112, "evaluation"], [310, "evaluation"]], "Evaluation metrics": [[266, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[251, null]], "Evaluation of the calibration of predictions": [[214, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[214, "evaluation-of-the-ranking-power"]], "Evernote": [[1029, "id6"]], "Exact Kernel PCA": [[416, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[416, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[407, "example-usage"]], "Example with noise-free target": [[178, "example-with-noise-free-target"]], "Example with noisy targets": [[178, "example-with-noisy-targets"]], "Examples": [[184, null], [368, "examples"], [410, "examples"], [1036, "examples"]], "Examples based on real world datasets": [[42, null], [184, "examples-based-on-real-world-datasets"]], "Exhaustive Grid Search": [[994, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[180, "exp-sine-squared-kernel"], [421, "exp-sine-squared-kernel"]], "ExpSineSquared": [[619, null]], "Experimental / Under Development": [[1052, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[326, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental Features": [[383, "experimental-features"]], "Explained variance score": [[1005, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[246, null]], "Exponentiation": [[620, null]], "Exporting": [[40, "exporting"]], "External Resources, Videos and Talks": [[1023, null]], "External Tutorials": [[1023, "external-tutorials"]], "External dependencies": [[1036, "external-dependencies"]], "ExtraTreeClassifier": [[918, null]], "ExtraTreeRegressor": [[919, null]], "ExtraTreesClassifier": [[561, null]], "ExtraTreesRegressor": [[562, null]], "Extract noisy patches and reconstruct them using the dictionary": [[124, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[124, "extract-reference-patches"]], "Extracting features": [[368, "extracting-features"]], "Extremely Randomized Trees": [[418, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[250, null]], "Faces dataset decompositions": [[121, null]], "Faces recognition example using eigenfaces and SVMs": [[45, null]], "Factor Analysis": [[416, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[131, null]], "Factor Analysis components - FA": [[121, "factor-analysis-components-fa"]], "FactorAnalysis": [[536, null]], "Failure of Machine Learning to infer causal effects": [[186, null]], "FastICA": [[537, null]], "FastICA on 2D point clouds": [[123, null]], "Faster parser in fetch_openml": [[326, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[366, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[354, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[324, "feature-names-support"]], "Feature Selection": [[163, null], [184, "feature-selection"]], "Feature agglomeration": [[84, null], [1022, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[87, null]], "Feature binarization": [[1015, "feature-binarization"]], "Feature discretization": [[314, null]], "Feature extraction": [[419, null]], "Feature hashing": [[419, "feature-hashing"]], "Feature importance based on feature permutation": [[142, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[142, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance evaluation": [[418, "feature-importance-evaluation"]], "Feature importance from coefficients": [[169, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[142, null]], "Feature normalization": [[192, "feature-normalization"]], "Feature scaling": [[1022, null]], "Feature selection": [[420, null]], "Feature selection as part of a pipeline": [[420, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[420, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[420, null]], "Feature transformations with ensembles of trees": [[140, null]], "FeatureAgglomeration": [[411, null], [448, null]], "FeatureHasher": [[355, "featurehasher"], [586, null]], "FeatureHasher and DictVectorizer Comparison": [[355, null]], "FeatureUnion": [[867, null]], "FeatureUnion: composite feature spaces": [[412, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[150, null]], "Fedora": [[397, "fedora"]], "Final conclusion": [[171, "final-conclusion"]], "Final remarks": [[90, "final-remarks"]], "Finding the Nearest Neighbors": [[1008, "finding-the-nearest-neighbors"]], "First example": [[48, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[72, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[122, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[195, "fit-by-cubic-polynomial"]], "Fit models": [[208, "fit-models"], [291, "fit-models"]], "Fit models and plot results": [[90, "fit-models-and-plot-results"]], "Fit regression model": [[148, "fit-regression-model"], [304, "fit-regression-model"], [348, "fit-regression-model"]], "Fit the model for outlier detection (default)": [[299, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[128, "fit-the-models"]], "Fit the regressors": [[194, "fit-the-regressors"], [194, "id2"]], "FitFailedWarning": [[579, null]], "Fitting": [[381, "fitting"]], "Fitting SpectralBiclustering": [[58, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[216, "fitting-a-quantileregressor"]], "Fitting additional trees": [[418, "fitting-additional-trees"]], "Fitting additional weak-learners": [[418, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[196, null]], "Fitting an elliptic envelope": [[1011, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[63, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[392, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[147, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1049, "fixed-models"]], "FixedThresholdClassifier": [[803, null]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[329, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1036, "fixes"]], "Flexibility of IterativeImputer": [[995, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[387, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[176, null]], "Forest covertypes": [[374, "forest-covertypes"]], "Forest covertypes dataset": [[251, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[411, "fowlkes-mallows-scores"]], "FreeBSD": [[377, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[232, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[391, null]], "From binary to multiclass and multilabel": [[1005, "from-binary-to-multiclass-and-multilabel"]], "From images": [[17, "module-sklearn.feature_extraction.image"]], "From text": [[17, "module-sklearn.feature_extraction.text"]], "Fruitful discussions": [[378, null]], "FunctionTransformer": [[872, null]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[260, null]], "GMM covariances": [[259, null]], "GPC examples": [[421, "gpc-examples"]], "Gallery examples": [[425, "gallery-examples"], [428, "gallery-examples"], [431, "gallery-examples"], [434, "gallery-examples"], [435, "gallery-examples"], [440, "gallery-examples"], [441, "gallery-examples"], [443, "gallery-examples"], [444, "gallery-examples"], [445, "gallery-examples"], [446, "gallery-examples"], [447, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [453, "gallery-examples"], [454, "gallery-examples"], [455, "gallery-examples"], [456, "gallery-examples"], [457, "gallery-examples"], [458, "gallery-examples"], [461, "gallery-examples"], [463, "gallery-examples"], [465, "gallery-examples"], [467, "gallery-examples"], [468, "gallery-examples"], [469, "gallery-examples"], [470, "gallery-examples"], [471, "gallery-examples"], [472, "gallery-examples"], [473, "gallery-examples"], [475, "gallery-examples"], [476, "gallery-examples"], [477, "gallery-examples"], [478, "gallery-examples"], [479, "gallery-examples"], [480, "gallery-examples"], [482, "gallery-examples"], [485, "gallery-examples"], [486, "gallery-examples"], [487, "gallery-examples"], [491, "gallery-examples"], [492, "gallery-examples"], [493, "gallery-examples"], [494, "gallery-examples"], [495, "gallery-examples"], [496, "gallery-examples"], [498, "gallery-examples"], [499, "gallery-examples"], [500, "gallery-examples"], [502, "gallery-examples"], [503, "gallery-examples"], [504, "gallery-examples"], [505, "gallery-examples"], [506, "gallery-examples"], [508, "gallery-examples"], [514, "gallery-examples"], [515, "gallery-examples"], [516, "gallery-examples"], [517, "gallery-examples"], [518, "gallery-examples"], [519, "gallery-examples"], [523, "gallery-examples"], [524, "gallery-examples"], [525, "gallery-examples"], [526, "gallery-examples"], [527, "gallery-examples"], [528, "gallery-examples"], [529, "gallery-examples"], [530, "gallery-examples"], [531, "gallery-examples"], [534, "gallery-examples"], [536, "gallery-examples"], [537, "gallery-examples"], [538, "gallery-examples"], [539, "gallery-examples"], [540, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [543, "gallery-examples"], [544, "gallery-examples"], [545, "gallery-examples"], [546, "gallery-examples"], [547, "gallery-examples"], [548, "gallery-examples"], [553, "gallery-examples"], [554, "gallery-examples"], [555, "gallery-examples"], [556, "gallery-examples"], [557, "gallery-examples"], [558, "gallery-examples"], [560, "gallery-examples"], [561, "gallery-examples"], [562, "gallery-examples"], [563, "gallery-examples"], [564, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [569, "gallery-examples"], [570, "gallery-examples"], [571, "gallery-examples"], [572, "gallery-examples"], [573, "gallery-examples"], [574, "gallery-examples"], [585, "gallery-examples"], [586, "gallery-examples"], [588, "gallery-examples"], [591, "gallery-examples"], [592, "gallery-examples"], [593, "gallery-examples"], [594, "gallery-examples"], [595, "gallery-examples"], [597, "gallery-examples"], [598, "gallery-examples"], [601, "gallery-examples"], [603, "gallery-examples"], [604, "gallery-examples"], [606, "gallery-examples"], [608, "gallery-examples"], [609, "gallery-examples"], [610, "gallery-examples"], [611, "gallery-examples"], [612, "gallery-examples"], [614, "gallery-examples"], [615, "gallery-examples"], [617, "gallery-examples"], [618, "gallery-examples"], [619, "gallery-examples"], [621, "gallery-examples"], [622, "gallery-examples"], [623, "gallery-examples"], [626, "gallery-examples"], [627, "gallery-examples"], [629, "gallery-examples"], [631, "gallery-examples"], [632, "gallery-examples"], [634, "gallery-examples"], [635, "gallery-examples"], [636, "gallery-examples"], [637, "gallery-examples"], [638, "gallery-examples"], [639, "gallery-examples"], [643, "gallery-examples"], [644, "gallery-examples"], [645, "gallery-examples"], [647, "gallery-examples"], [648, "gallery-examples"], [649, "gallery-examples"], [650, "gallery-examples"], [651, "gallery-examples"], [652, "gallery-examples"], [653, "gallery-examples"], [656, "gallery-examples"], [657, "gallery-examples"], [659, "gallery-examples"], [660, "gallery-examples"], [661, "gallery-examples"], [662, "gallery-examples"], [663, "gallery-examples"], [666, "gallery-examples"], [668, "gallery-examples"], [669, "gallery-examples"], [670, "gallery-examples"], [672, "gallery-examples"], [673, "gallery-examples"], [674, "gallery-examples"], [675, "gallery-examples"], [676, "gallery-examples"], [677, "gallery-examples"], [678, "gallery-examples"], [680, "gallery-examples"], [681, "gallery-examples"], [682, "gallery-examples"], [683, "gallery-examples"], [684, "gallery-examples"], [685, "gallery-examples"], [686, "gallery-examples"], [688, "gallery-examples"], [692, "gallery-examples"], [693, "gallery-examples"], [694, "gallery-examples"], [695, "gallery-examples"], [696, "gallery-examples"], [697, "gallery-examples"], [701, "gallery-examples"], [702, "gallery-examples"], [704, "gallery-examples"], [705, "gallery-examples"], [706, "gallery-examples"], [707, "gallery-examples"], [708, "gallery-examples"], [709, "gallery-examples"], [710, "gallery-examples"], [711, "gallery-examples"], [713, "gallery-examples"], [716, "gallery-examples"], [717, "gallery-examples"], [721, "gallery-examples"], [722, "gallery-examples"], [723, "gallery-examples"], [731, "gallery-examples"], [733, "gallery-examples"], [736, "gallery-examples"], [738, "gallery-examples"], [739, "gallery-examples"], [741, "gallery-examples"], [742, "gallery-examples"], [745, "gallery-examples"], [746, "gallery-examples"], [749, "gallery-examples"], [750, "gallery-examples"], [752, "gallery-examples"], [753, "gallery-examples"], [754, "gallery-examples"], [756, "gallery-examples"], [757, "gallery-examples"], [759, "gallery-examples"], [761, "gallery-examples"], [765, "gallery-examples"], [782, "gallery-examples"], [783, "gallery-examples"], [786, "gallery-examples"], [788, "gallery-examples"], [789, "gallery-examples"], [790, "gallery-examples"], [791, "gallery-examples"], [792, "gallery-examples"], [793, "gallery-examples"], [794, "gallery-examples"], [796, "gallery-examples"], [797, "gallery-examples"], [799, "gallery-examples"], [801, "gallery-examples"], [802, "gallery-examples"], [803, "gallery-examples"], [804, "gallery-examples"], [805, "gallery-examples"], [806, "gallery-examples"], [807, "gallery-examples"], [808, "gallery-examples"], [809, "gallery-examples"], [810, "gallery-examples"], [818, "gallery-examples"], [819, "gallery-examples"], [820, "gallery-examples"], [821, "gallery-examples"], [822, "gallery-examples"], [823, "gallery-examples"], [824, "gallery-examples"], [825, "gallery-examples"], [826, "gallery-examples"], [827, "gallery-examples"], [829, "gallery-examples"], [830, "gallery-examples"], [831, "gallery-examples"], [832, "gallery-examples"], [833, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [836, "gallery-examples"], [837, "gallery-examples"], [838, "gallery-examples"], [839, "gallery-examples"], [841, "gallery-examples"], [843, "gallery-examples"], [845, "gallery-examples"], [846, "gallery-examples"], [847, "gallery-examples"], [850, "gallery-examples"], [851, "gallery-examples"], [852, "gallery-examples"], [853, "gallery-examples"], [854, "gallery-examples"], [855, "gallery-examples"], [856, "gallery-examples"], [857, "gallery-examples"], [861, "gallery-examples"], [864, "gallery-examples"], [865, "gallery-examples"], [866, "gallery-examples"], [867, "gallery-examples"], [868, "gallery-examples"], [869, "gallery-examples"], [872, "gallery-examples"], [873, "gallery-examples"], [875, "gallery-examples"], [877, "gallery-examples"], [878, "gallery-examples"], [880, "gallery-examples"], [881, "gallery-examples"], [882, "gallery-examples"], [883, "gallery-examples"], [884, "gallery-examples"], [885, "gallery-examples"], [886, "gallery-examples"], [887, "gallery-examples"], [888, "gallery-examples"], [889, "gallery-examples"], [892, "gallery-examples"], [894, "gallery-examples"], [897, "gallery-examples"], [901, "gallery-examples"], [902, "gallery-examples"], [904, "gallery-examples"], [905, "gallery-examples"], [906, "gallery-examples"], [908, "gallery-examples"], [911, "gallery-examples"], [912, "gallery-examples"], [913, "gallery-examples"], [914, "gallery-examples"], [915, "gallery-examples"], [916, "gallery-examples"], [917, "gallery-examples"], [922, "gallery-examples"], [923, "gallery-examples"], [937, "gallery-examples"], [947, "gallery-examples"], [949, "gallery-examples"], [956, "gallery-examples"], [961, "gallery-examples"], [962, "gallery-examples"], [963, "gallery-examples"], [964, "gallery-examples"], [965, "gallery-examples"], [978, "gallery-examples"], [988, "gallery-examples"]], "Gamma loss for gradient boosting": [[327, "gamma-loss-for-gradient-boosting"]], "GammaRegressor": [[652, null]], "Gaussian Mixture": [[1004, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[258, null]], "Gaussian Mixture Model Selection": [[262, null]], "Gaussian Mixture Model Sine Curve": [[263, null]], "Gaussian Mixture Models": [[184, "gaussian-mixture-models"], [256, null]], "Gaussian Naive Bayes": [[62, "gaussian-naive-bayes"], [1007, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[61, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[421, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[421, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[170, null], [184, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[421, null]], "Gaussian Processes regression: basic introductory example": [[178, null]], "Gaussian mixture models": [[1004, null]], "Gaussian process classification (GPC) on iris dataset": [[173, null], [421, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[171, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[179, null]], "Gaussian random projection": [[1017, "gaussian-random-projection"]], "GaussianMixture": [[802, null]], "GaussianNB": [[846, null]], "GaussianProcessClassifier": [[614, null]], "GaussianProcessRegressor": [[615, null]], "GaussianRandomProjection": [[900, null]], "General Concepts": [[393, "general-concepts"]], "General recommendations": [[362, "general-recommendations"]], "Generalized Linear Models": [[184, "generalized-linear-models"], [193, null], [1001, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[322, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[25, "generalized-linear-models-glm-for-regression"]], "Generate data": [[81, "generate-data"], [100, "generate-data"], [111, "generate-data"], [208, "generate-data"], [310, "generate-data"]], "Generate data with outliers": [[299, "generate-data-with-outliers"]], "Generate distorted image": [[124, "generate-distorted-image"]], "Generate sample data": [[58, "generate-sample-data"], [73, "generate-sample-data"], [88, "generate-sample-data"], [96, "generate-sample-data"], [109, "generate-sample-data"], [122, "generate-sample-data"], [123, "generate-sample-data"], [165, "generate-sample-data"], [247, "generate-sample-data"], [285, "generate-sample-data"], [304, "generate-sample-data"], [348, "generate-sample-data"]], "Generate sinusoidal data with noise": [[195, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[269, "generate-synthetic-data"]], "Generate synthetic dataset": [[61, "generate-synthetic-dataset"], [194, "generate-synthetic-dataset"], [194, "id1"], [199, "generate-synthetic-dataset"]], "Generate the data": [[97, "generate-the-data"], [99, "generate-the-data"], [113, "generate-the-data"]], "Generated datasets": [[375, null]], "Generated documentation on GitHub Actions": [[379, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[52, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[171, "generating-a-dataset"]], "Generating polynomial features": [[1015, "generating-polynomial-features"]], "Generators for classification and clustering": [[375, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[375, "generators-for-decomposition"]], "Generators for manifold learning": [[375, "generators-for-manifold-learning"]], "Generators for regression": [[375, "generators-for-regression"]], "Generic dictionary learning": [[416, "generic-dictionary-learning"]], "GenericUnivariateSelect": [[596, null]], "Getting Started": [[392, null]], "Getting reproducible results across multiple executions": [[362, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1028, "gitter"]], "Glossary of Common Terms and API Elements": [[393, null]], "Good practices": [[384, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[394, "governance-model-changes"]], "Gradient Boosting": [[43, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[146, null]], "Gradient Boosting Regression Trees for Poisson regression": [[214, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[148, null]], "Gradient Boosting regularization": [[149, null]], "Gradient boosting": [[188, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[144, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[144, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[144, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[144, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[418, "gradient-boosted-trees"]], "GradientBoostingClassifier": [[563, null]], "GradientBoostingClassifier and GradientBoostingRegressor": [[418, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[418, null]], "GradientBoostingRegressor": [[564, null]], "Graph Routines": [[388, "graph-routines"]], "Graphical model and parametrization": [[1010, "graphical-model-and-parametrization"]], "GraphicalLasso": [[474, null]], "GraphicalLassoCV": [[475, null]], "GridSearchCV": [[804, null]], "Group Shuffle Split": [[415, "group-shuffle-split"]], "Group k-fold": [[415, "group-k-fold"]], "GroupKFold": [[805, null]], "GroupShuffleSplit": [[806, null]], "Grouping infrequent categories in OneHotEncoder": [[325, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in OrdinalEncoder": [[327, "grouping-infrequent-categories-in-ordinalencoder"]], "HDBSCAN": [[411, "hdbscan"], [449, null]], "HDBSCAN: hierarchical density-based clustering": [[327, "hdbscan-hierarchical-density-based-clustering"]], "HalvingGridSearchCV": [[807, null]], "HalvingRandomSearchCV": [[808, null]], "Hamming loss": [[1005, "hamming-loss"]], "Handling Multicollinear Features": [[190, "handling-multicollinear-features"]], "Hash Functions": [[388, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[153, null]], "HashingVectorizer": [[354, "hashingvectorizer"], [593, null]], "Helper Functions": [[388, "helper-functions"]], "Helper function": [[180, "helper-function"]], "Helper function to plot embedding": [[235, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[1002, "hessian-eigenmapping"]], "Hierarchical Clustering": [[411, "id11"]], "Hierarchical clustering": [[411, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[100, null]], "Higher-level parallelism with joblib": [[367, "higher-level-parallelism-with-joblib"]], "Highlights": [[1036, "highlights"], [1039, "highlights"], [1040, "highlights"], [1043, "highlights"], [1044, "highlights"]], "Hinge loss": [[1005, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[328, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "HistGradientBoostingClassifier": [[565, null]], "HistGradientBoostingRegressor": [[566, null]], "Histogram-Based Gradient Boosting": [[418, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[324, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[411, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[391, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[391, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[391, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[391, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[391, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[391, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[391, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[391, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[362, "how-to-avoid-data-leakage"]], "How to contribute": [[379, "how-to-contribute"]], "How to make a good bug report": [[379, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[385, null]], "HowAboutWe": [[1029, "id16"]], "Huber Regression": [[1001, "huber-regression"]], "HuberRegressor": [[653, null]], "HuberRegressor vs Ridge on dataset with strong outliers": [[197, null]], "Hugging Face": [[1029, "id5"]], "Hyper-parameter optimizers": [[29, "hyper-parameter-optimizers"]], "Hyperparameter": [[621, null]], "Hyperparameter Robustness": [[88, "hyperparameter-robustness"]], "ICE vs. PDP": [[188, "ice-vs-pdp"]], "INFONEA": [[1029, "id24"]], "Illustration of GPC on the XOR dataset": [[421, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[175, null]], "Illustration of Pipeline and GridSearchCV": [[104, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[180, null]], "Image denoising using dictionary learning": [[124, null]], "Image denoising using kernel PCA": [[44, null]], "Image feature extraction": [[419, "image-feature-extraction"]], "Implementation": [[1008, "implementation"]], "Implementation decisions": [[391, "implementation-decisions"]], "Implementation details": [[1019, "implementation-details"], [1020, "implementation-details"]], "Implementing your own scoring object": [[1005, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[317, null]], "Important notes regarding the internal cross-validation": [[410, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[326, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[328, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[323, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[322, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[995, null], [1015, "imputation-of-missing-values"]], "Impute missing values with mean": [[183, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[183, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[183, null]], "Imputing missing values with variants of IterativeImputer": [[182, null]], "In binary classification settings": [[279, "in-binary-classification-settings"]], "In multi-label settings": [[279, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[186, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[186, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[362, "inconsistent-preprocessing"]], "InconsistentVersionWarning": [[580, null]], "Incremental PCA": [[125, null], [416, "incremental-pca"]], "Incremental learning": [[368, "incremental-learning"]], "IncrementalPCA": [[538, null]], "Independent component analysis (ICA)": [[416, "independent-component-analysis-ica"]], "Independent components - FastICA": [[121, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[323, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1012, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[89, null]], "Influence of the Input Data Representation": [[366, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[366, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[366, "influence-of-the-number-of-features"]], "Information Criterion": [[994, "information-criterion"]], "Information-criteria based model selection": [[1001, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1015, "infrequent-categories"]], "Input and parameter validation": [[41, "module-sklearn.utils.validation"]], "Input data": [[411, null]], "Input validation": [[381, "input-validation"]], "InputTags": [[925, null]], "Inria": [[1029, "id3"]], "Inspection": [[184, "inspection"], [185, null], [396, null]], "Installing nightly builds": [[377, "installing-nightly-builds"]], "Installing scikit-learn": [[397, null]], "Installing the development version of scikit-learn": [[377, null]], "Installing the latest release": [[397, "installing-the-latest-release"]], "Instantiation": [[381, "instantiation"]], "Intel Extension for Scikit-learn": [[397, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[418, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[326, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interoperability and framework enhancements": [[1024, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[176, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[418, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[187, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[187, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[218, "interpreting-the-plots"]], "Introducing the set_output API": [[255, null]], "Introduction": [[1002, "introduction"]], "Invariance with respect to prevalence": [[275, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1017, "inverse-transform"]], "Iris plants dataset": [[376, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[174, null]], "Isolation Forest": [[1011, "isolation-forest"]], "IsolationForest": [[567, null]], "IsolationForest example": [[151, null]], "Isomap": [[692, null], [1002, "isomap"]], "Isomap Embedding": [[234, "isomap-embedding"]], "Isotonic": [[409, "isotonic"]], "Isotonic Regression": [[244, null]], "Isotonic regression": [[996, null]], "IsotonicRegression": [[639, null]], "Issue Tracker Tags": [[379, "issue-tracker-tags"]], "Issues for New Contributors": [[379, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[183, "iterative-imputation-of-the-missing-values"]], "IterativeImputer": [[631, null]], "J.P.Morgan": [[1029, "id1"]], "Jaccard similarity coefficient score": [[1005, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[208, null]], "K-D Tree": [[1008, "k-d-tree"]], "K-bins discretization": [[1015, "k-bins-discretization"]], "K-fold": [[415, "k-fold"]], "K-means": [[411, "k-means"]], "K-means clustering on text features": [[354, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[295, "k-nearest-neighbors-classifier"]], "KBinsDiscretizer": [[873, null]], "KDDCup99 - SA dataset": [[251, "kddcup99-sa-dataset"]], "KDTree": [[849, null]], "KDTree and BallTree Classes": [[1008, "kdtree-and-balltree-classes"]], "KFold": [[809, null]], "KMeans": [[450, null]], "KNN Based Imputation": [[321, "knn-based-imputation"]], "KNNImputer": [[632, null]], "KNeighborsClassifier": [[850, null]], "KNeighborsRegressor": [[851, null]], "KNeighborsTransformer": [[852, null]], "Kddcup 99 dataset": [[374, "kddcup-99-dataset"]], "Keeping the number of features constant": [[995, "keeping-the-number-of-features-constant"]], "Kernel": [[622, null]], "Kernel Approximation": [[184, "kernel-approximation"], [191, null], [997, null]], "Kernel Density Estimate of Species Distributions": [[305, null]], "Kernel Density Estimation": [[296, null], [417, "kernel-density-estimation"]], "Kernel PCA": [[126, null]], "Kernel Principal Component Analysis (kPCA)": [[416, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[180, "kernel-cookbook"]], "Kernel functions": [[1020, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[171, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[421, "kernel-operators"]], "Kernel ridge": [[171, "kernel-ridge"]], "Kernel ridge regression": [[998, null]], "KernelCenterer": [[874, null]], "KernelDensity": [[853, null]], "KernelPCA": [[539, null]], "KernelRidge": [[647, null]], "Kernels": [[19, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[421, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[324, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1044, "known-major-bugs"], [1045, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[205, null]], "L1-based feature selection": [[420, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[199, null]], "L1-penalty case": [[349, "l1-penalty-case"]], "L2-penalty case": [[349, "l2-penalty-case"]], "LARS Lasso": [[1001, "lars-lasso"]], "LDA": [[999, "lda"]], "Label Propagation": [[1018, "label-propagation"]], "Label Propagation digits active learning": [[332, null]], "Label Propagation digits: Demonstrating performance": [[331, null]], "Label Propagation learning a complex structure": [[333, null]], "Label binarization": [[1016, "label-binarization"]], "Label encoding": [[1016, "label-encoding"]], "Label ranking average precision": [[1005, "label-ranking-average-precision"]], "LabelBinarizer": [[875, null], [1016, "labelbinarizer"]], "LabelEncoder": [[876, null]], "LabelPropagation": [[903, null]], "LabelSpreading": [[904, null]], "Lagged features for time series forecasting": [[52, null]], "Laplacian kernel": [[1003, "laplacian-kernel"]], "Lars": [[654, null]], "LarsCV": [[655, null]], "Lasso": [[199, "lasso"], [656, null], [1001, "lasso"]], "Lasso model selection via information criteria": [[201, null]], "Lasso model selection: AIC-BIC / cross-validation": [[203, null]], "Lasso on dense and sparse data": [[200, null]], "Lasso via coordinate descent": [[203, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[203, "lasso-via-least-angle-regression"]], "Lasso, Lasso-LARS, and Elastic Net paths": [[202, null]], "LassoCV": [[657, null]], "LassoLars": [[658, null]], "LassoLarsCV": [[659, null]], "LassoLarsIC": [[660, null]], "Latent Dirichlet Allocation (LDA)": [[416, "latent-dirichlet-allocation-lda"]], "LatentDirichletAllocation": [[540, null]], "Learn the PCA basis": [[44, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[124, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[83, "learn-the-dictionary-of-images"]], "Learning Curve": [[274, "learning-curve"]], "Learning Git": [[379, null]], "Learning a graph structure": [[51, "learning-a-graph-structure"]], "Learning an embedding": [[302, "learning-an-embedding"]], "Learning curve": [[1000, "learning-curve"]], "LearningCurveDisplay": [[810, null]], "Least Angle Regression": [[1001, "least-angle-regression"]], "Leave One Group Out": [[415, "leave-one-group-out"]], "Leave One Out (LOO)": [[415, "leave-one-out-loo"]], "Leave P Groups Out": [[415, "leave-p-groups-out"]], "Leave P Out (LPO)": [[415, "leave-p-out-lpo"]], "LeaveOneGroupOut": [[811, null]], "LeaveOneOut": [[812, null]], "LeavePGroupsOut": [[813, null]], "LeavePOut": [[814, null]], "Ledoit-Wolf shrinkage": [[413, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[110, null]], "LedoitWolf": [[476, null]], "Lessons learned": [[186, "lessons-learned"], [187, "lessons-learned"]], "Limitations of a simple linear model": [[171, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[419, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[366, "limiting-working-memory"]], "Limiting the number of splits": [[144, "limiting-the-number-of-splits"]], "Linear Models": [[1001, null]], "Linear Regression Example": [[210, null]], "Linear algebra libraries": [[366, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[999, null]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[70, null]], "Linear classifiers": [[25, "linear-classifiers"]], "Linear kernel": [[346, "linear-kernel"], [1003, "linear-kernel"]], "Linear models with regularization": [[187, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[187, "linear-models-with-sparse-coefficients"]], "Linear support vector classifier": [[62, "linear-support-vector-classifier"]], "LinearDiscriminantAnalysis": [[553, null]], "LinearRegression": [[661, null]], "LinearSVC": [[908, null]], "LinearSVR": [[909, null]], "Link to R\u00b2 score, the coefficient of determination": [[1005, null]], "Links": [[366, "links"]], "Linnerrud dataset": [[376, "linnerrud-dataset"]], "Linux": [[377, "linux"]], "Linux compilers from conda-forge": [[377, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[377, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[144, "load-ames-housing-dataset"]], "Load Data": [[355, "load-data"]], "Load Data and Train a SVC": [[254, "load-data-and-train-a-svc"]], "Load Data and train model": [[242, "load-data-and-train-model"]], "Load and prepare data": [[281, "load-and-prepare-data"], [282, "load-and-prepare-data"], [317, "load-and-prepare-data"]], "Load and prepare data set": [[342, "load-and-prepare-data-set"]], "Load data": [[207, "load-data"]], "Load dataset": [[141, "load-dataset"]], "Load dataset and apply GridSearchCV": [[160, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[235, "load-digits-dataset"]], "Load some data to play with": [[345, "load-some-data-to-play-with"]], "Load the data": [[46, "load-the-data"], [83, "load-the-data"], [148, "load-the-data"], [295, "load-the-data"]], "Load the dataset": [[91, "load-the-dataset"]], "Load the dataset via OpenML": [[44, "load-the-dataset-via-openml"]], "Loaders": [[10, "loaders"]], "Loading Data from OpenML": [[318, "loading-data-from-openml"]], "Loading a dataset": [[291, "loading-a-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[353, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[232, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[419, "loading-features-from-dicts"]], "Loading from external datasets": [[373, "loading-from-external-datasets"]], "Loading other datasets": [[373, null]], "Loading text data": [[354, "loading-text-data"]], "Loading the data": [[169, "loading-the-data"]], "Loading the iris dataset": [[118, "loading-the-iris-dataset"]], "Loading the redirect files": [[55, "loading-the-redirect-files"]], "Local Outlier Factor": [[1011, "local-outlier-factor"]], "Local Tangent Space Alignment": [[1002, "local-tangent-space-alignment"]], "LocalOutlierFactor": [[854, null]], "Locally Linear Embedding": [[1002, "locally-linear-embedding"]], "Locally Linear Embeddings": [[234, "locally-linear-embeddings"]], "LocallyLinearEmbedding": [[693, null]], "Lock files": [[379, "lock-files"]], "Log loss": [[1005, "log-loss"]], "Logistic Regression 3-class Classifier": [[198, null]], "Logistic function": [[204, null]], "Logistic regression": [[1001, "logistic-regression"]], "LogisticRegression": [[662, null]], "LogisticRegression wrapped by OneVsRestClassifier": [[291, "logisticregression-wrapped-by-onevsrestclassifier"]], "LogisticRegressionCV": [[663, null]], "Look at the results": [[247, "look-at-the-results"], [348, "look-at-the-results"]], "Loss Functions": [[418, "loss-functions"]], "Lovely": [[1029, "id20"]], "Low-level parallelism": [[411, "low-level-parallelism"], [418, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[367, "lower-level-parallelism-with-openmp"]], "MARS": [[1029, "id28"]], "MDS": [[694, null]], "MLPClassifier": [[865, null]], "MLPRegressor": [[866, null]], "MNIST classification using multinomial logistic + L1": [[230, null]], "MacPorts for Mac OSX": [[397, "macports-for-mac-osx"]], "Machinalis": [[1029, "id22"]], "Mailing Lists": [[1028, "mailing-lists"]], "Main": [[47, "main"]], "Main takeaways": [[214, "main-takeaways"]], "Maintainer Information": [[383, null]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[379, "maintaining-backwards-compatibility"]], "Majority Class Labels (Majority/Hard Voting)": [[418, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[155, "make-pipeline-to-preprocess-the-data"]], "Making predictions": [[158, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[236, null]], "Manifold learning": [[184, "manifold-learning"], [233, null], [1002, null]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[235, null]], "Manually setting the decision threshold": [[410, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[266, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[316, null]], "Mapping to a Gaussian distribution": [[1015, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1015, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[995, "marking-imputed-values"]], "Matern": [[623, null]], "Mathematical Definition": [[1012, "mathematical-definition"]], "Mathematical Details": [[997, "mathematical-details"]], "Mathematical formulation": [[408, "mathematical-formulation"], [408, "id3"], [418, "mathematical-formulation"], [1008, "mathematical-formulation"], [1019, "mathematical-formulation"], [1020, "mathematical-formulation"], [1021, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[999, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[999, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[1005, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[180, "matern-kernel"], [421, "matern-kernel"]], "Max error": [[1005, "max-error"]], "MaxAbsScaler": [[312, "maxabsscaler"], [877, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[1005, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[411, "mean-shift"]], "Mean absolute error": [[1005, "mean-absolute-error"]], "Mean absolute percentage error": [[1005, "mean-absolute-percentage-error"]], "Mean squared error": [[1005, "mean-squared-error"]], "Mean squared logarithmic error": [[1005, "mean-squared-logarithmic-error"]], "MeanShift": [[451, null]], "Measure and plot the results": [[155, "measure-and-plot-the-results"]], "Median absolute error": [[1005, "median-absolute-error"]], "Memory footprint": [[86, "memory-footprint"]], "Memory usage profiling": [[385, "memory-usage-profiling"]], "Merging Pull Requests": [[383, "merging-pull-requests"]], "Meta-estimators": [[41, "module-sklearn.utils.metaestimators"], [407, "meta-estimators"]], "MetaEstimatorMixin": [[431, null]], "Metadata Routing": [[248, null], [327, "metadata-routing"], [393, "metadata-routing"], [402, null], [1053, "metadata-routing"], [1053, "id2"], [1054, "metadata-routing"], [1055, "metadata-routing"]], "Metadata Routing Support": [[328, "metadata-routing-support"]], "Metadata Routing Support Status": [[402, "metadata-routing-support-status"]], "Metadata routing": [[41, "module-sklearn.utils.metadata_routing"]], "MetadataRequest": [[960, null]], "MetadataRouter": [[961, null]], "MethodMapping": [[962, null]], "Methods": [[393, "methods"]], "Metrics": [[407, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[1005, null]], "MinCovDet": [[477, null]], "MinMaxScaler": [[312, "minmaxscaler"], [878, null]], "Mini Batch K-Means": [[411, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[416, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[416, "mini-batch-dictionary-learning"]], "MiniBatchDictionaryLearning": [[541, null]], "MiniBatchKMeans": [[452, null]], "MiniBatchNMF": [[542, null]], "MiniBatchNMF: an online version of NMF": [[325, "minibatchnmf-an-online-version-of-nmf"]], "MiniBatchSparsePCA": [[543, null]], "Minimal Cost-Complexity Pruning": [[1021, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1049, "minimal-dependencies"], [1050, "minimal-dependencies"]], "Minimum Covariance Determinant": [[413, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[112, "minimum-covariance-determinant-estimator"]], "Misc": [[1036, "misc"]], "Miscellaneous": [[25, "miscellaneous"], [184, "miscellaneous"], [240, null], [1044, "miscellaneous"], [1044, "id40"], [1045, "miscellaneous"], [1046, "miscellaneous"], [1047, "miscellaneous"], [1047, "id13"], [1048, "miscellaneous"], [1049, "miscellaneous"], [1052, "miscellaneous"]], "Misleading values on strongly correlated features": [[1013, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[181, null], [184, "missing-value-imputation"]], "Missing Values Support": [[1021, "missing-values-support"]], "Missing information": [[183, "missing-information"]], "Missing value support for Random Forest": [[328, "missing-value-support-for-random-forest"]], "Missing values support": [[418, "missing-values-support"]], "Missing values support in decision trees": [[327, "missing-values-support-in-decision-trees"]], "MissingIndicator": [[633, null]], "Model Complexity Influence": [[46, null]], "Model Compression": [[366, "model-compression"]], "Model Reshaping": [[366, "model-reshaping"]], "Model Selection": [[184, "model-selection"], [264, null]], "Model Selection Enhancements and API Changes": [[1042, "model-selection-enhancements-and-api-changes"]], "Model Training and Comparison": [[145, "model-training-and-comparison"]], "Model comparison": [[144, "model-comparison"]], "Model definition": [[285, "model-definition"]], "Model evaluation": [[392, "model-evaluation"]], "Model fitting and extrapolation": [[176, "model-fitting-and-extrapolation"]], "Model persistence": [[405, null]], "Model selection and evaluation": [[406, null]], "Model selection interface": [[27, "model-selection-interface"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[128, null]], "Model selection: development and evaluation": [[994, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[994, "model-specific-cross-validation"]], "Model training and selection": [[168, "model-training-and-selection"], [262, "model-training-and-selection"]], "Model validation": [[29, "model-validation"]], "Model with metadata stripping": [[353, "model-with-metadata-stripping"]], "Model without metadata stripping": [[353, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[169, null]], "Modeling non-linear feature interactions with kernels": [[43, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[43, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[52, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[310, "models-definition"]], "Models robustness to recover the ground truth weights": [[194, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[1002, "modified-locally-linear-embedding"]], "Monitoring performance": [[379, "monitoring-performance"]], "Monotonic Constraints": [[152, null], [418, "monotonic-constraints"]], "Monotonic constraints": [[150, "monotonic-constraints"]], "More control with warm_start": [[1009, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[88, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[135, null]], "Multi-class case": [[1005, "multi-class-case"]], "Multi-class classification": [[1020, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[385, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[1002, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[237, null]], "Multi-label case": [[1005, "multi-label-case"]], "Multi-label confusion matrix": [[1005, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[1009, "multi-layer-perceptron"]], "Multi-layer perceptron": [[188, "multi-layer-perceptron"]], "Multi-output Decision Tree Regression": [[360, null]], "Multi-output problems": [[1021, "multi-output-problems"]], "Multi-task Elastic-Net": [[1001, "multi-task-elastic-net"]], "Multi-task Lasso": [[1001, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[25, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[879, null], [1016, "multilabelbinarizer"]], "MultiOutputClassifier": [[840, null], [1006, "multioutputclassifier"]], "MultiOutputRegressor": [[841, null], [1006, "multioutputregressor"]], "MultiTaskElasticNet": [[664, null]], "MultiTaskElasticNetCV": [[665, null]], "MultiTaskLasso": [[666, null]], "MultiTaskLassoCV": [[667, null]], "Multiclass Receiver Operating Characteristic (ROC)": [[281, null]], "Multiclass and multilabel classification": [[1005, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[388, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[1006, null]], "Multiclass classification": [[1006, "multiclass-classification"]], "Multiclass methods": [[184, "multiclass-methods"], [288, null]], "Multiclass sparse logistic regression on 20newgroups": [[229, null]], "Multiclass support": [[409, "multiclass-support"]], "Multiclass-multioutput classification": [[1006, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[234, "multidimensional-scaling"]], "Multilabel": [[375, "multilabel"]], "Multilabel classification": [[249, null], [1006, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[291, null]], "Multilabel ranking metrics": [[27, "multilabel-ranking-metrics"], [1005, "multilabel-ranking-metrics"]], "Multinomial Case": [[1001, "multinomial-case"]], "Multinomial Naive Bayes": [[1007, "multinomial-naive-bayes"]], "MultinomialNB": [[847, null]], "Multioutput methods": [[184, "multioutput-methods"], [290, null]], "Multioutput regression": [[1006, "multioutput-regression"]], "Multiple modules": [[1044, "multiple-modules"], [1045, "multiple-modules"]], "Multiple vs. Single Imputation": [[995, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[995, "multivariate-feature-imputation"]], "Mutual Information based scores": [[411, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[411, "mutual-reachability-graph"]], "NMF": [[544, null]], "NMF with a beta-divergence": [[416, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[416, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[1007, null]], "Naive evaluation of the next hour bike demand regression": [[52, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[43, "naive-linear-regression"]], "Native Categorical Feature Support": [[318, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[323, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[321, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[303, null]], "Nearest Centroid Classifier": [[1008, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[1008, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[184, "nearest-neighbors"], [293, null], [1008, null]], "Nearest Neighbors Classification": [[295, null], [1008, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[1008, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[1008, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[304, null]], "Nearest Shrunken Centroid": [[1008, "nearest-shrunken-centroid"]], "Nearest neighbors imputation": [[995, "nearest-neighbors-imputation"]], "NearestCentroid": [[855, null]], "NearestNeighbors": [[856, null]], "Neighborhood Components Analysis": [[1008, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[302, null]], "NeighborhoodComponentsAnalysis": [[857, null]], "Nested versus non-nested cross-validation": [[277, null]], "NetBSD": [[397, "netbsd"]], "Neural Networks": [[184, "neural-networks"], [306, null]], "Neural network models (supervised)": [[1009, null]], "Neural network models (unsupervised)": [[1010, null]], "New Estimator Classes": [[1037, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[323, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[323, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[323, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[326, "new-and-enhanced-displays"]], "New classes": [[1036, "new-classes"]], "New display ValidationCurveDisplay": [[327, "new-display-validationcurvedisplay"]], "New documentation improvements": [[323, "new-documentation-improvements"], [324, "new-documentation-improvements"]], "New features": [[1039, "new-features"], [1040, "new-features"], [1041, "new-features"], [1042, "new-features"], [1043, "new-features"]], "New plotting API": [[321, "new-plotting-api"]], "New self-training meta-estimator": [[323, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1023, "new-to-scientific-python"]], "Next steps": [[392, "next-steps"]], "Non-Negative Least Squares": [[1001, "non-negative-least-squares"]], "Non-linear transformation": [[1015, "non-linear-transformation"]], "Non-negative components - NMF": [[121, "non-negative-components-nmf"]], "Non-negative least squares": [[209, null]], "Non-negative matrix factorization (NMF or NNMF)": [[416, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[69, null]], "Normalization": [[1015, "normalization"]], "Normalized Discounted Cumulative Gain": [[1005, "normalized-discounted-cumulative-gain"]], "Normalizer": [[312, "normalizer"], [880, null]], "NotFittedError": [[581, null]], "Note on MPS device support": [[407, "note-on-mps-device-support"]], "Note on device support for float64": [[407, "note-on-device-support-for-float64"]], "Notes": [[368, "notes"]], "Novelty Detection": [[1011, "novelty-detection"]], "Novelty and Outlier Detection": [[1011, null]], "Novelty detection with Local Outlier Factor": [[1011, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[298, null]], "NuSVC": [[910, null]], "NuSVR": [[911, null]], "NumPy": [[384, "numpy"]], "Number of candidates and amount of resource at each iteration": [[284, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[381, "numerical-assertions-in-tests"]], "Nystroem": [[643, null]], "Nystroem Method for Kernel Approximation": [[997, "nystroem-method-for-kernel-approximation"]], "OAS": [[478, null]], "ONNX": [[405, "onnx"]], "OOB Errors for Random Forests": [[139, null]], "OPTICS": [[411, "optics"], [453, null]], "Obtaining predictions by cross-validation": [[415, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1029, "id19"]], "Older Versions": [[1036, null]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[228, null]], "One-class SVM with non-linear kernel (RBF)": [[341, null]], "One-vs-One multiclass ROC": [[281, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[281, "one-vs-rest-multiclass-roc"]], "OneClassSVM": [[912, null]], "OneHotEncoder": [[881, null]], "OneToOneFeatureMixin": [[432, null]], "OneVsOneClassifier": [[836, null], [1006, "onevsoneclassifier"]], "OneVsRestClassifier": [[837, null], [1006, "onevsrestclassifier"]], "Online One-Class SVM": [[324, "online-one-class-svm"], [1019, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[83, null]], "Optical recognition of handwritten digits dataset": [[376, "optical-recognition-of-handwritten-digits-dataset"]], "Optimal mathematical operations": [[41, "module-sklearn.utils.extmath"]], "Optimisation of kernel hyperparameters in GPR": [[177, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Optional Arguments": [[381, "optional-arguments"]], "Options to tune the decision threshold": [[410, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[413, "oracle-approximating-shrinkage"]], "OrdinalEncoder": [[882, null]], "Ordinary Least Squares": [[1001, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[1001, "ordinary-least-squares-complexity"]], "Ordinary Least Squares and Ridge Regression Variance": [[212, null]], "Original data": [[278, "original-data"], [312, "original-data"]], "Original image": [[86, "original-image"]], "Original points": [[302, "original-points"]], "Orthogonal Matching Pursuit": [[213, null]], "Orthogonal Matching Pursuit (OMP)": [[1001, "orthogonal-matching-pursuit-omp"]], "OrthogonalMatchingPursuit": [[668, null]], "OrthogonalMatchingPursuitCV": [[669, null]], "Other changes": [[1036, "other-changes"]], "Other estimators and tasks": [[1024, "other-estimators-and-tasks"]], "Otto Group": [[1029, "id26"]], "Our community, our values": [[379, null]], "Our vanilla classifier": [[286, "our-vanilla-classifier"]], "Out of Bag Estimates": [[994, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[47, null]], "Out-of-core naive Bayes model fitting": [[1007, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[1011, "id1"]], "Outlier detection on a real data set": [[48, null]], "Outlier detection with Local Outlier Factor (LOF)": [[299, null]], "Outlier-robust regressors": [[25, "outlier-robust-regressors"]], "OutlierMixin": [[433, null]], "Outliers in the X direction": [[231, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[231, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1013, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[838, null], [1006, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[367, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[411, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[289, null]], "Overview of outlier detection methods": [[1011, "overview-of-outlier-detection-methods"]], "PCA": [[545, null]], "PCA example with Iris Data-set": [[127, null]], "PCA using randomized SVD": [[416, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1022, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1029, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[115, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[115, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[414, "plscanonical"], [486, null]], "PLSRegression": [[414, "plsregression"], [487, null]], "PLSSVD": [[414, "plssvd"], [488, null]], "Packaging": [[1048, "packaging"]], "Pair Confusion Matrix": [[411, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[272, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[272, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[329, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[27, "module-sklearn.metrics.pairwise"]], "Pairwise metrics, Affinities and Kernels": [[1003, null]], "PairwiseKernel": [[624, null]], "Pandas": [[384, "pandas"]], "Pandas output with set_output API": [[326, "pandas-output-with-set-output-api"]], "Parallel": [[970, null]], "Parallel NumPy and SciPy routines from numerical libraries": [[367, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallel computing": [[41, "module-sklearn.utils.parallel"]], "Parallelism": [[367, "parallelism"], [994, "parallelism"]], "Parallelism, resource management, and configuration": [[367, null]], "Parallelization": [[418, "parallelization"]], "ParameterGrid": [[815, null]], "ParameterSampler": [[816, null]], "Parameters": [[393, "parameters"], [418, "parameters"]], "Parameters and init": [[381, "parameters-and-init"]], "Parameters of the RBF Kernel": [[1020, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[188, null]], "Partial Dependence and Individual Conditional Expectation plots": [[1012, null]], "Partial dependence plots": [[1012, "partial-dependence-plots"]], "PartialDependenceDisplay": [[636, null]], "Partitioning the data": [[192, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[1001, "passive-aggressive-algorithms"]], "PassiveAggressiveClassifier": [[670, null]], "PassiveAggressiveRegressor": [[671, null]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[419, "patch-extraction"]], "PatchExtractor": [[587, null]], "PeerIndex": [[1029, "id17"]], "People": [[1036, "people"], [1036, "id2"], [1036, "id5"], [1036, "id8"], [1036, "id11"], [1036, "id13"], [1036, "id15"], [1036, "id17"], [1037, "people"], [1037, "id3"], [1038, "people"], [1039, "people"]], "Perceptron": [[672, null], [1001, "perceptron"]], "Performance improvements": [[325, "performance-improvements"]], "Performance improvements in PCA": [[329, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[354, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[215, "periodic-splines"]], "Periodic spline features": [[43, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[189, null]], "Permutation Importance with Multicollinear or Correlated Features": [[190, null]], "Permutation feature importance": [[1013, null]], "Permutation test score": [[278, "permutation-test-score"], [415, "permutation-test-score"]], "Permutation-based feature importance": [[321, "permutation-based-feature-importance"]], "Pinball loss": [[1005, "pinball-loss"]], "Pipeline": [[868, null]], "Pipeline ANOVA SVM": [[166, null]], "Pipeline compatibility": [[381, "pipeline-compatibility"]], "Pipeline with hyperparameter tuning": [[273, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[412, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[101, null], [184, "pipelines-and-composite-estimators"], [412, null]], "Pipelines: chaining pre-processors and estimators": [[392, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1022, null]], "Pipelining: chaining a PCA and a logistic regression": [[105, null]], "Platform-specific instructions": [[377, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[76, null]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[279, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[269, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[219, null]], "Plot a PCA representation": [[118, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[353, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[281, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[281, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[199, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[251, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[157, null]], "Plot classification boundaries with different SVM Kernels": [[346, null]], "Plot classification probability": [[66, null]], "Plot data and the predicted probabilities": [[61, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[339, null]], "Plot discrete decision boundary": [[151, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[160, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[148, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[158, null]], "Plot multi-class SGD on the iris dataset": [[223, null]], "Plot multinomial and One-vs-Rest Logistic Regression": [[206, null]], "Plot number of features VS. cross-validation scores": [[168, "plot-number-of-features-vs-cross-validation-scores"]], "Plot path length decision boundary": [[151, "plot-path-length-decision-boundary"]], "Plot randomly generated multilabel dataset": [[119, null]], "Plot regularization path": [[207, "plot-regularization-path"]], "Plot result": [[73, "plot-result"], [96, "plot-result"], [100, "plot-result"], [100, "id2"]], "Plot results": [[47, "plot-results"], [82, "plot-results"], [109, "plot-results"], [122, "plot-results"], [123, "plot-results"], [141, "plot-results"], [291, "plot-results"], [299, "plot-results"]], "Plot support and time series": [[208, "plot-support-and-time-series"]], "Plot the BIC scores": [[262, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[279, "plot-the-precision-recall-curve"]], "Plot the best model": [[262, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[345, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[156, null]], "Plot the decision surface of decision trees trained on the iris dataset": [[358, null]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[143, null]], "Plot the marginal log-likelihood": [[194, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[279, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[331, "plot-the-most-uncertain-predictions"]], "Plot the results": [[83, "plot-the-results"], [113, "plot-the-results"], [158, "plot-the-results"], [183, "plot-the-results"]], "Plot the results on an image": [[81, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[340, null]], "Plot the true and estimated coefficients": [[194, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[195, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[148, "plot-training-deviance"]], "Plotting": [[21, "plotting"], [27, "plotting"], [40, "plotting"], [310, "plotting"]], "Plotting API Overview": [[386, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[268, null]], "Plotting Functions": [[70, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[274, null]], "Plotting four circles": [[99, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[252, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[252, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[252, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[194, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[58, "plotting-results"]], "Plotting the ROC Curve": [[254, "plotting-the-roc-curve"]], "Plotting the Results": [[318, "plotting-the-results"]], "Plotting the result": [[276, "plotting-the-result"]], "Plotting the results": [[97, "plotting-the-results"], [136, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[218, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[99, "plotting-two-circles"]], "Plotting with Multiple Axes": [[386, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[214, null]], "PoissonRegressor": [[673, null]], "Polars output in set_output": [[328, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[997, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[215, null]], "Polynomial features": [[1015, "polynomial-features"]], "Polynomial kernel": [[346, "polynomial-kernel"], [1003, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[1001, "polynomial-regression-extending-linear-models-with-basis-functions"]], "PolynomialCountSketch": [[644, null]], "PolynomialFeatures": [[883, null]], "Possible solutions": [[90, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[357, null]], "Post-fit model tuning": [[29, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[286, null]], "Post-tuning the decision threshold": [[410, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[266, null]], "PowerTransformer": [[312, "powertransformer"], [884, null]], "Pre-test vs. post-test analysis": [[275, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[1005, "precision-recall-and-f-measures"]], "Precision-Recall": [[279, null]], "PrecisionRecallDisplay": [[704, null]], "Precomputed sparse nearest neighbors graph": [[321, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[415, "predefined-fold-splits-validation-sets"]], "PredefinedSplit": [[817, null]], "Prediction Intervals for Gradient Boosting Regression": [[147, null]], "Prediction Latency": [[49, null], [366, "prediction-latency"]], "Prediction Throughput": [[366, "prediction-throughput"]], "PredictionErrorDisplay": [[705, null]], "Preparing the data": [[136, "preparing-the-data"], [150, "preparing-the-data"], [192, "preparing-the-data"]], "Preprocessing": [[184, "preprocessing"], [311, null]], "Preprocessing data": [[1015, null]], "Preprocessing numerical variables": [[187, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[188, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[188, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[188, "preprocessor-for-the-neural-network-model"]], "Principal Component Regression vs Partial Least Squares Regression": [[116, null]], "Principal component analysis (PCA)": [[416, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1053, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[421, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[172, null]], "Probability Calibration curves": [[62, null]], "Probability Calibration for 3-class classification": [[63, null]], "Probability calibration": [[409, null]], "Probability calibration of classifiers": [[61, null]], "Processing the dataset": [[187, "processing-the-dataset"]], "Product": [[625, null]], "Productivity and sanity-preserving tips": [[387, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[385, "profiling-python-code"]], "Profiling compiled extensions": [[385, "profiling-compiled-extensions"]], "Project template:": [[381, null]], "Projecting data: PCA vs. KernelPCA": [[126, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[126, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[116, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[52, "proper-next-hour-forecasting-evaluation"]], "Provide a failing code example with minimal comments": [[384, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[379, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[232, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1025, "purpose-of-this-document"]], "Purpose of this example": [[218, "purpose-of-this-example"]], "PyTorch Support": [[407, "pytorch-support"]], "Python API": [[367, "python-api"]], "Python package and dataset imports, load dataset": [[246, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[385, "python-cython-or-c-c"]], "QDA": [[999, "qda"]], "QuadraticDiscriminantAnalysis": [[554, null]], "Qualitative analysis of the impact of features on linear model predictions": [[43, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[354, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[1001, "quantile-regression"]], "Quantile Regressor": [[324, "quantile-regressor"]], "Quantile loss in HistGradientBoostingRegressor": [[325, "quantile-loss-in-histgradientboostingregressor"]], "Quantile regression": [[216, null]], "QuantileRegressor": [[674, null]], "QuantileTransformer": [[885, null]], "QuantileTransformer (Gaussian output)": [[312, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[312, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[1001, "ransac-random-sample-consensus"]], "RANSACRegressor": [[675, null]], "RBF": [[626, null]], "RBF SVM parameters": [[342, null]], "RBF kernel": [[346, "rbf-kernel"], [1003, "rbf-kernel"]], "RBFSampler": [[645, null]], "RCV1 dataset": [[374, "rcv1-dataset"]], "RFE": [[597, null]], "RFECV": [[598, null]], "ROC AUC now supports multiclass classification": [[321, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[254, null]], "ROC curve showing a specific class": [[281, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[281, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[281, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[281, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[997, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[180, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[421, "radial-basis-function-rbf-kernel"]], "RadiusNeighborsClassifier": [[858, null]], "RadiusNeighborsRegressor": [[859, null]], "RadiusNeighborsTransformer": [[860, null]], "Rand index": [[411, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[190, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[418, "random-forests"]], "Random Numbers": [[381, "random-numbers"]], "Random Projection": [[1017, null]], "Random data": [[278, "random-data"]], "Random forests and other randomized tree ensembles": [[418, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[415, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1022, "random-projections"]], "Random sampling": [[41, "module-sklearn.utils.random"]], "RandomForestClassifier": [[568, null]], "RandomForestRegressor": [[569, null]], "RandomTreesEmbedding": [[570, null]], "Randomized Parameter Optimization": [[994, "randomized-parameter-optimization"]], "RandomizedSearchCV": [[818, null]], "Rangespan": [[1029, "id11"]], "Ranking loss": [[1005, "ranking-loss"]], "Rational Quadratic kernel": [[180, "rational-quadratic-kernel"]], "Rational quadratic kernel": [[421, "rational-quadratic-kernel"]], "RationalQuadratic": [[627, null]], "Reading the existing code base": [[379, "reading-the-existing-code-base"]], "Real world datasets": [[374, null]], "Real-world data set": [[107, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[282, null]], "Receiver operating characteristic (ROC)": [[1005, "receiver-operating-characteristic-roc"]], "Recently Deprecated": [[1, null]], "Recognizing hand-written digits": [[68, null]], "Recommendation Engine packages": [[1024, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[44, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[167, null], [420, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[168, null]], "Reference Steps": [[383, "reference-steps"]], "References": [[50, "references"], [62, "references"], [64, "references"], [112, "references"], [138, "references"], [192, "references"], [199, "references"], [289, "references"], [305, "references"], [421, "references"], [995, "references"]], "Region of Practical Equivalence": [[272, "region-of-practical-equivalence"]], "Regression": [[179, "regression"], [1001, "regression"], [1009, "regression"], [1019, "regression"], [1020, "regression"], [1021, "regression"]], "Regression criteria": [[1021, "regression-criteria"]], "Regression metrics": [[27, "regression-metrics"], [1005, "regression-metrics"]], "RegressorChain": [[842, null], [1006, "regressorchain"]], "RegressorMixin": [[434, null]], "RegressorTags": [[926, null]], "Regressors with variable selection": [[25, "regressors-with-variable-selection"]], "Regularization": [[1009, "regularization"]], "Regularization path of L1- Logistic Regression": [[207, null]], "Related Projects": [[1024, null]], "Related changes": [[1043, "related-changes"]], "Relation to impurity-based importance in trees": [[1013, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[184, "release-highlights"], [320, null]], "Release Highlights for scikit-learn 0.22": [[321, null]], "Release Highlights for scikit-learn 0.23": [[322, null]], "Release Highlights for scikit-learn 0.24": [[323, null]], "Release Highlights for scikit-learn 1.0": [[324, null]], "Release Highlights for scikit-learn 1.1": [[325, null]], "Release Highlights for scikit-learn 1.2": [[326, null]], "Release Highlights for scikit-learn 1.3": [[327, null]], "Release Highlights for scikit-learn 1.4": [[328, null]], "Release Highlights for scikit-learn 1.5": [[329, null]], "Release History": [[1034, null]], "Releasing": [[383, "releasing"]], "Remarks": [[245, "remarks"]], "Removed modules": [[1036, "removed-modules"]], "Removing features with low variance": [[420, "removing-features-with-low-variance"]], "Repeated K-Fold": [[415, "repeated-k-fold"]], "RepeatedKFold": [[819, null]], "RepeatedStratifiedKFold": [[820, null]], "Replace missing values by 0": [[183, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[405, "replicating-the-training-environment-in-production"]], "Restricted Boltzmann Machine features for digit classification": [[310, null]], "Restricted Boltzmann machines": [[1010, "restricted-boltzmann-machines"]], "Results interpretation": [[291, "results-interpretation"]], "Retrieve dataframes from OpenML": [[321, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[51, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[47, "reuters-dataset-related-routines"]], "Rich HTML representation": [[243, "rich-html-representation"]], "Rich visual representation of estimators": [[322, "rich-visual-representation-of-estimators"]], "Ridge": [[676, null]], "Ridge Complexity": [[1001, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[218, null]], "Ridge regression and classification": [[1001, "ridge-regression-and-classification"]], "RidgeCV": [[677, null]], "RidgeClassifier": [[678, null]], "RidgeClassifierCV": [[679, null]], "Roadmap": [[1025, null]], "Robust Covariance Estimation": [[413, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[111, null]], "Robust linear estimator fitting": [[220, null]], "Robust linear model estimation using RANSAC": [[217, null]], "Robust vs Empirical covariance estimate": [[112, null]], "RobustScaler": [[312, "robustscaler"], [886, null]], "Robustness of cross-validation results": [[362, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[1001, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[994, "robustness-to-failure"]], "RocCurveDisplay": [[706, null]], "Roles And Responsibilities": [[394, "roles-and-responsibilities"]], "Rolling your own estimator": [[381, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[248, "routing-meta-estimator"]], "Run the benchmark": [[91, "run-the-benchmark"]], "Run the code and plot the results": [[46, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[276, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[377, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[1005, "r2-score-the-coefficient-of-determination"]], "SGD": [[1019, "id5"]], "SGD: Maximum margin separating hyperplane": [[226, null]], "SGD: Penalties": [[225, null]], "SGD: Weighted samples": [[227, null]], "SGD: convex loss functions": [[224, null]], "SGDClassifier": [[680, null]], "SGDOneClassSVM": [[681, null]], "SGDRegressor": [[682, null]], "SKLEARN_ASSUME_FINITE": [[367, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[367, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[367, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[367, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[367, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[367, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[367, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[367, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[367, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[367, "sklearn-working-memory"]], "SVC": [[913, null], [1020, "svc"]], "SVM Exercise": [[162, null]], "SVM Margins Example": [[347, null]], "SVM Tie Breaking Example": [[350, null]], "SVM with custom kernel": [[338, null]], "SVM-Anova: SVM with univariate feature selection": [[345, null]], "SVM: Maximum margin separating hyperplane": [[343, null]], "SVM: Separating hyperplane for unbalanced classes": [[344, null]], "SVM: Weighted samples": [[351, null]], "SVR": [[914, null], [1020, "svr"]], "Sample generators": [[10, "sample-generators"]], "Sample images": [[373, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[273, null]], "Sample weight support": [[418, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[322, "sample-weight-support-for-lasso-and-elasticnet"]], "Scalability and stability improvements to KMeans": [[322, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[192, null]], "Scale Invariance": [[88, "scale-invariance"]], "Scaling data with outliers": [[1015, "scaling-data-with-outliers"]], "Scaling features to a range": [[1015, "scaling-features-to-a-range"]], "Scaling sparse data": [[1015, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[349, null]], "Scaling up the One-Class SVM": [[1011, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[368, "scaling-with-instances-using-out-of-core-learning"]], "Scatter Plot of the Iris dataset": [[118, "scatter-plot-of-the-iris-dataset"]], "Scatter plot of scores": [[115, "scatter-plot-of-scores"]], "Scikit-learn governance and decision-making": [[394, null]], "Scores and probabilities": [[1020, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[994, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[48, "second-example"]], "Second experiment: varying number of classes and clusters": [[72, "second-experiment-varying-number-of-classes-and-clusters"]], "Security": [[1054, "security"]], "Security & Maintainability Limitations": [[405, "security-maintainability-limitations"]], "Segmenting the picture of greek coins in regions": [[80, null]], "SelectFdr": [[599, null]], "SelectFpr": [[600, null]], "SelectFromModel": [[601, null]], "SelectFwe": [[602, null]], "SelectKBest": [[603, null]], "SelectPercentile": [[604, null]], "Selecting Lasso via an information criterion": [[203, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[203, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[104, null]], "Selecting features based on importance": [[169, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[169, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[93, null]], "SelectorMixin": [[605, null]], "Self Training": [[1018, "self-training"]], "SelfTrainingClassifier": [[905, null]], "Semi Supervised Classification": [[184, "semi-supervised-classification"], [330, null]], "Semi-supervised Classification on a Text Dataset": [[335, null]], "Semi-supervised learning": [[331, "semi-supervised-learning"], [1018, null]], "Sequence similarity matrix under the kernel": [[179, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[420, "sequential-feature-selection"]], "SequentialFeatureSelector": [[606, null]], "Serving the model artifact": [[405, "serving-the-model-artifact"]], "Setting regularization parameter": [[1001, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[1001, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[232, "severity-model-gamma-distribution"]], "Shrinkage and Covariance Estimator": [[999, "shrinkage-and-covariance-estimator"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[109, null]], "Shrinkage via learning rate": [[418, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[413, "shrunk-covariance"]], "ShrunkCovariance": [[479, null]], "ShuffleSplit": [[821, null]], "Sigmoid": [[409, "sigmoid"]], "Sigmoid kernel": [[346, "sigmoid-kernel"], [1003, "sigmoid-kernel"]], "Silhouette Coefficient": [[411, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[297, null]], "Simple Pipeline": [[248, "simple-pipeline"]], "SimpleImputer": [[634, null]], "Single estimator versus bagging: bias-variance decomposition": [[138, null]], "Single label": [[375, "single-label"]], "Skewed Chi Squared Kernel": [[997, "skewed-chi-squared-kernel"]], "SkewedChi2Sampler": [[646, null]], "Social Media": [[1028, "social-media"]], "Solvers": [[1001, "solvers"]], "Sparse coding with a precomputed dictionary": [[130, null], [416, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[121, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1015, null]], "Sparse inverse covariance": [[413, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[113, null]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[416, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1017, "sparse-random-projection"]], "SparseCoder": [[546, null]], "SparsePCA": [[547, null]], "SparseRandomProjection": [[901, null]], "Sparsity": [[419, "sparsity"]], "Sparsity Example: Fitting only features 1  and 2": [[211, null]], "Species distribution dataset": [[374, "species-distribution-dataset"]], "Species distribution modeling": [[50, null]], "Specific models": [[381, "specific-models"]], "Specifying an objective metric": [[994, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[994, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[408, "spectral-biclustering"]], "Spectral Clustering Graphs": [[411, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[408, "spectral-co-clustering"]], "Spectral Embedding": [[1002, "spectral-embedding"]], "Spectral clustering": [[411, "spectral-clustering"]], "Spectral clustering for image segmentation": [[99, null]], "Spectral embedding for non-linear dimensionality reduction": [[234, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "SpectralBiclustering": [[454, null]], "SpectralClustering": [[455, null]], "SpectralCoclustering": [[456, null]], "SpectralEmbedding": [[695, null]], "Sphinx version": [[379, null]], "Spline Transformers": [[324, "spline-transformers"]], "Spline transformer": [[1015, "spline-transformer"]], "SplineTransformer": [[887, null]], "Splitters": [[29, "splitters"]], "Spotify": [[1029, "id2"]], "Stack of predictors on a single data set": [[155, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[418, "stacked-generalization"]], "Stacking Classifier and Regressor": [[321, "stacking-classifier-and-regressor"]], "StackingClassifier": [[571, null]], "StackingRegressor": [[572, null]], "Stalled and Unclaimed Issues": [[379, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[379, "stalled-pull-requests"]], "Standard replies for reviewing": [[387, "standard-replies-for-reviewing"]], "StandardScaler": [[312, "standardscaler"], [888, null]], "Standardization, or mean removal and variance scaling": [[1015, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1025, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[272, null]], "Statistical learning with Python": [[1024, "statistical-learning-with-python"]], "Stochastic Gradient Descent": [[1019, null]], "Stochastic Gradient Descent - SGD": [[1001, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1019, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[1010, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1019, "stopping-criterion"]], "Strategies comparison": [[289, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[368, null]], "Stratified Shuffle Split": [[415, "stratified-shuffle-split"]], "Stratified k-fold": [[415, "stratified-k-fold"]], "StratifiedGroupKFold": [[415, "stratifiedgroupkfold"], [822, null]], "StratifiedKFold": [[823, null]], "StratifiedShuffleSplit": [[824, null]], "Streaming instances": [[368, "streaming-instances"]], "Submitting a bug report or a feature request": [[379, "submitting-a-bug-report-or-a-feature-request"]], "Subpackage-specific goals": [[1025, "subpackage-specific-goals"]], "Subsampling": [[418, "subsampling"]], "Successive Halving Iterations": [[284, null]], "Successive Halving estimators for tuning hyper-parameters": [[323, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Sum": [[628, null]], "Summarizing the key points": [[405, "summarizing-the-key-points"]], "Summary": [[62, "summary"], [145, "summary"], [355, "summary"]], "Summary of cross-validation approach": [[203, "summary-of-cross-validation-approach"]], "Summary of model persistence methods": [[405, "id2"]], "Supervised learning": [[1027, null]], "Support": [[1028, null]], "Support Vector Machines": [[184, "support-vector-machines"], [337, null], [1020, null]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[348, null]], "Support for Array API": [[1053, "support-for-array-api"], [1054, "support-for-array-api"], [1055, "support-for-array-api"]], "Support for Array API-compatible inputs": [[407, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1053, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1054, "support-for-building-with-meson"]], "Support for missing values": [[150, "support-for-missing-values"]], "Support for quantile loss": [[150, "support-for-quantile-loss"]], "Swiss Roll": [[238, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[238, null]], "Swiss-Hole": [[238, "swiss-hole"]], "Synthetic dataset": [[384, "synthetic-dataset"]], "Synthetic example": [[107, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[234, "t-distributed-stochastic-neighbor-embedding"]], "TSNE": [[696, null]], "Table of Contents": [[391, "table-of-contents"]], "Tags": [[927, null]], "Take-home messages": [[272, "take-home-messages"]], "Target Encoder": [[1015, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[319, null]], "Target Types": [[393, "target-types"]], "Target format": [[1006, "target-format"], [1006, "id5"], [1006, "id8"], [1006, "id10"]], "TargetEncoder": [[889, null]], "TargetEncoder: a new category encoding strategy": [[327, "targetencoder-a-new-category-encoding-strategy"]], "TargetTags": [[928, null]], "Technical Committee": [[394, "technical-committee"]], "Test dependencies": [[377, "test-dependencies"]], "Test with permutations the significance of a classification score": [[278, null]], "Testing Functions": [[388, "testing-functions"]], "Testing and improving test coverage": [[379, "testing-and-improving-test-coverage"]], "Text feature extraction": [[419, "text-feature-extraction"]], "TfidfTransformer": [[594, null]], "TfidfVectorizer": [[355, "tfidfvectorizer"], [595, null]], "Tf\u2013idf term weighting": [[419, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[374, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[419, "the-bag-of-words-representation"]], "The Dirichlet Process": [[1004, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[214, "the-french-motor-third-party-liability-claims-dataset"]], "The Iris Dataset": [[118, null]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[245, null]], "The Johnson-Lindenstrauss lemma": [[1017, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[374, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[387, "the-meson-build-backend"]], "The Olivetti faces dataset": [[374, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[289, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[279, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[266, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[415, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The data": [[116, "the-data"]], "The dataset": [[270, "the-dataset"]], "The dataset: simulated hourly wages": [[186, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[187, "the-dataset-wages"]], "The diabetes dataset": [[286, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[289, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[187, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[187, "the-problem-of-correlated-variables"]], "The scikit-learn.org Website": [[383, "the-scikit-learn-org-website"]], "The scoring parameter: defining model evaluation rules": [[1005, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[231, null]], "Theil-Sen estimator: generalized-median-based estimator": [[1001, "theil-sen-estimator-generalized-median-based-estimator"]], "TheilSenRegressor": [[683, null]], "Theoretical bounds": [[245, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[248, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[397, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[415, "time-series-split"]], "Time-based cross-validation": [[43, "time-based-cross-validation"]], "Time-related feature engineering": [[43, null]], "Time-steps as categories": [[43, "time-steps-as-categories"]], "TimeSeriesSplit": [[825, null]], "Timing and accuracy plots": [[246, "timing-and-accuracy-plots"]], "Tips and Tricks": [[366, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[380, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[994, "tips-for-parameter-search"]], "Tips for performance": [[380, "tips-for-performance"]], "Tips on Practical Use": [[1009, "tips-on-practical-use"], [1019, "tips-on-practical-use"], [1020, "tips-on-practical-use"]], "Tips on practical use": [[1002, "tips-on-practical-use"], [1021, "tips-on-practical-use"]], "Tips to ease development": [[380, "tips-to-ease-development"]], "Tools": [[407, "tools"]], "Top terms per cluster": [[354, "top-terms-per-cluster"]], "Top-k accuracy score": [[1005, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[54, null]], "Total impurity of leaves vs effective alphas of pruned tree": [[357, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[418, "totally-random-trees-embedding"]], "Toy datasets": [[376, null]], "Tracking feature names in a pipeline": [[412, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[1001, null]], "Train and Persist the Model": [[405, "train-and-persist-the-model"]], "Train classifiers": [[342, "train-classifiers"]], "Train models on the diabetes dataset": [[252, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[361, "train-tree-classifier"]], "Training": [[310, "training"], [1008, "training"]], "Training SVC model and plotting decision boundaries": [[346, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[254, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[319, "training-a-ridge-regressor"]], "Training and Evaluating Pipelines with Different Encoders": [[318, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[136, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[158, "training-classifiers"]], "Training of the model": [[151, "training-of-the-model"]], "Training the AdaBoostClassifier": [[135, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[218, "training-the-ridge-regressor"]], "Transform": [[1008, "transform"]], "Transform data": [[115, "transform-data"]], "TransformedTargetRegressor": [[468, null]], "TransformerMixin": [[435, null]], "TransformerTags": [[929, null]], "Transformers and pre-processors": [[392, "transformers-and-pre-processors"]], "Transforming target in regression": [[412, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1016, null]], "Translations of scikit-learn documentation": [[1024, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1021, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[321, "tree-pruning"]], "Tree structure": [[361, "tree-structure"]], "Tree-based feature selection": [[420, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[189, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[378, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[43, "trigonometric-features"]], "Troubleshooting": [[397, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[416, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TruncatedSVD": [[548, null]], "TunedThresholdClassifierCV": [[826, null]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[329, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[270, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[266, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[266, "tuning-the-decision-threshold"], [286, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[410, null]], "Tuning the hyper-parameters of an estimator": [[994, null]], "Tuning the hyper-parameters of the quantile regressors": [[147, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[159, null], [184, "tutorial-exercises"]], "Tweedie regression on insurance claims": [[232, null]], "TweedieRegressor": [[684, null]], "Two-class AdaBoost": [[137, null]], "Type of return values and fitted attributes": [[407, "type-of-return-values-and-fitted-attributes"]], "Types": [[380, "types"]], "T\u00e9l\u00e9com ParisTech": [[1029, "id7"]], "Unbalanced problems": [[1020, "unbalanced-problems"]], "UndefinedMetricWarning": [[582, null]], "Under Development": [[1031, "under-development"]], "Underfitting vs. Overfitting": [[287, null]], "Understanding the decision tree structure": [[361, null]], "Univariate Feature Selection": [[165, null]], "Univariate feature imputation": [[995, "univariate-feature-imputation"]], "Univariate feature selection": [[165, "id1"], [420, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[995, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[381, "universal-attributes"]], "Unlabeled entries in y": [[1018, null]], "Unsupervised Nearest Neighbors": [[1008, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1022, null]], "Unsupervised learning": [[1030, null]], "Unweighted feature selection": [[402, "unweighted-feature-selection"]], "Updating Authors List": [[383, "updating-authors-list"]], "Usage": [[409, "usage"], [412, "usage"], [412, "id1"], [418, "usage"], [418, "id24"], [418, "id25"], [418, "id27"], [418, "id35"], [1001, "usage"]], "Usage Examples": [[402, "usage-examples"]], "Use markdown formatting": [[384, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[387, "useful-pytest-aliases-and-flags"]], "User Guide": [[1031, null]], "User Questions": [[1028, "user-questions"]], "Using Cython": [[385, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[313, null]], "Using None or RandomState instances, and repeated calls to fit and split": [[362, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[380, "using-openmp"]], "Using a debugger, gdb": [[385, "using-a-debugger-gdb"]], "Using a lock-file to get an environment close to the CI": [[387, "using-a-lock-file-to-get-an-environment-close-to-the-ci"]], "Using cross-validation": [[1001, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[415, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[152, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[385, "using-gprof"]], "Using multiple metric evaluation": [[1005, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[169, "using-negative-tolerance-values"]], "Using scikit-learn": [[391, "using-scikit-learn"]], "Using stop words": [[419, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[385, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[385, "using-yep-and-gperftools"]], "Utilities for Developers": [[388, null]], "Validation Tools": [[388, "validation-tools"]], "Validation curve": [[1000, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[1000, null]], "ValidationCurveDisplay": [[827, null]], "Vanilla predictive model": [[266, "vanilla-predictive-model"]], "VarianceThreshold": [[607, null]], "Variational Bayesian Gaussian Mixture": [[1004, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[85, null]], "Varying regularization in Multi-layer Perceptron": [[307, null]], "Varying the metric": [[411, "varying-the-metric"]], "Vector Quantization Example": [[86, null]], "Vectorizing a large text corpus with the hashing trick": [[419, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1036, "version-0-10"]], "Version 0.11": [[1036, "version-0-11"]], "Version 0.12": [[1036, "version-0-12"]], "Version 0.12.1": [[1036, "version-0-12-1"]], "Version 0.13": [[1037, null], [1037, "changes-0-13"]], "Version 0.13.1": [[1037, "version-0-13-1"]], "Version 0.14": [[1038, null], [1038, "changes-0-14"]], "Version 0.15": [[1039, null], [1039, "changes-0-15"]], "Version 0.15.1": [[1039, "version-0-15-1"]], "Version 0.15.2": [[1039, "version-0-15-2"]], "Version 0.16": [[1040, null], [1040, "changes-0-16"]], "Version 0.16.1": [[1040, "version-0-16-1"]], "Version 0.17": [[1041, null], [1041, "changes-0-17"]], "Version 0.17.1": [[1041, "version-0-17-1"]], "Version 0.18": [[1042, null], [1042, "changes-0-18"]], "Version 0.18.1": [[1042, "version-0-18-1"]], "Version 0.18.2": [[1042, "version-0-18-2"]], "Version 0.19": [[1043, null], [1043, "id1"]], "Version 0.19.1": [[1043, "version-0-19-1"]], "Version 0.19.2": [[1043, "version-0-19-2"]], "Version 0.20": [[1044, null]], "Version 0.20.0": [[1044, "version-0-20-0"]], "Version 0.20.1": [[1044, "version-0-20-1"]], "Version 0.20.2": [[1044, "version-0-20-2"]], "Version 0.20.3": [[1044, "version-0-20-3"]], "Version 0.20.4": [[1044, "version-0-20-4"]], "Version 0.21": [[1045, null]], "Version 0.21.0": [[1045, "version-0-21-0"]], "Version 0.21.1": [[1045, "version-0-21-1"]], "Version 0.21.2": [[1045, "version-0-21-2"]], "Version 0.21.3": [[1045, "version-0-21-3"]], "Version 0.22": [[1046, null]], "Version 0.22.0": [[1046, "version-0-22-0"]], "Version 0.22.1": [[1046, "version-0-22-1"]], "Version 0.22.2.post1": [[1046, "version-0-22-2-post1"]], "Version 0.23": [[1047, null]], "Version 0.23.0": [[1047, "version-0-23-0"]], "Version 0.23.1": [[1047, "version-0-23-1"]], "Version 0.23.2": [[1047, "version-0-23-2"]], "Version 0.24": [[1048, null]], "Version 0.24.0": [[1048, "version-0-24-0"]], "Version 0.24.1": [[1048, "version-0-24-1"]], "Version 0.24.2": [[1048, "version-0-24-2"]], "Version 0.4": [[1036, "version-0-4"]], "Version 0.5": [[1036, "version-0-5"]], "Version 0.6": [[1036, "version-0-6"]], "Version 0.7": [[1036, "version-0-7"]], "Version 0.8": [[1036, "version-0-8"]], "Version 0.9": [[1036, "version-0-9"]], "Version 1.0": [[1049, null]], "Version 1.0.0": [[1049, "version-1-0-0"]], "Version 1.0.1": [[1049, "version-1-0-1"]], "Version 1.0.2": [[1049, "version-1-0-2"]], "Version 1.1": [[1050, null]], "Version 1.1.0": [[1050, "version-1-1-0"]], "Version 1.1.1": [[1050, "version-1-1-1"]], "Version 1.1.2": [[1050, "version-1-1-2"]], "Version 1.1.3": [[1050, "version-1-1-3"]], "Version 1.2": [[1051, null]], "Version 1.2.0": [[1051, "version-1-2-0"]], "Version 1.2.1": [[1051, "version-1-2-1"]], "Version 1.2.2": [[1051, "version-1-2-2"]], "Version 1.3": [[1052, null]], "Version 1.3.0": [[1052, "version-1-3-0"]], "Version 1.3.1": [[1052, "version-1-3-1"]], "Version 1.3.2": [[1052, "version-1-3-2"]], "Version 1.4": [[1053, null]], "Version 1.4.0": [[1053, "version-1-4-0"]], "Version 1.4.1": [[1053, "version-1-4-1"]], "Version 1.4.2": [[1053, "version-1-4-2"]], "Version 1.5": [[1054, null]], "Version 1.5.0": [[1054, "version-1-5-0"]], "Version 1.5.1": [[1054, "version-1-5-1"]], "Version 1.5.2": [[1054, "version-1-5-2"]], "Version 1.6": [[1055, null]], "Version 1.6.0": [[1055, "version-1-6-0"]], "Video resources": [[379, "video-resources"]], "Videos": [[1023, "videos"]], "Visual evaluation of regression models": [[1005, "visual-evaluation-of-regression-models"]], "Visualization": [[5, "visualization"], [29, "visualization"], [51, "visualization"], [342, "visualization"]], "Visualization of MLP weights on MNIST": [[309, null]], "Visualization of cluster hierarchy": [[411, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1033, null]], "Visualizations with Display Objects": [[242, null]], "Visualize Comparison": [[145, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[267, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[267, "visualize-our-data"]], "Visualize the learning curves": [[247, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[91, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[247, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[412, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[267, null]], "Visualizing the stock market structure": [[51, null]], "Voting Classifier": [[418, "voting-classifier"]], "Voting Regressor": [[418, "voting-regressor"]], "VotingClassifier": [[573, null]], "VotingRegressor": [[574, null]], "Warnings and Exceptions": [[388, "warnings-and-exceptions"]], "Ways to contribute": [[379, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[100, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1046, "website-update"]], "Weight handling based on class labels": [[41, "module-sklearn.utils.class_weight"]], "Weighted Average Probabilities (Soft Voting)": [[418, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[402, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[402, "weighted-scoring-and-unweighted-fitting"]], "What are the inclusion criteria for new algorithms?": [[391, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[391, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[361, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[391, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "WhiteKernel": [[629, null]], "Who is using scikit-learn?": [[1029, null]], "Why are there so many different estimators for linear models?": [[391, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[391, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[391, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[391, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[391, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[391, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[391, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Why is my pull request not getting any attention?": [[391, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[391, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[418, "why-it-s-faster"]], "Why scikit?": [[391, "why-scikit"]], "Wikipedia principal eigenvector": [[55, null]], "Will you add GPU support?": [[391, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[391, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[397, "winpython-for-windows"]], "Windows": [[377, "windows"]], "Wine recognition dataset": [[376, "wine-recognition-dataset"]], "Workflow Overview": [[405, "workflow-overview"]], "Working on PRs to help review": [[378, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[378, "working-on-issues-to-improve-them"]], "Working with graphs": [[41, "module-sklearn.utils.graph"]], "Working with sparse matrices and arrays": [[41, "module-sklearn.utils.sparsefuncs"]], "Working with text documents": [[184, "working-with-text-documents"], [352, null]], "Wrong causal interpretation": [[187, "wrong-causal-interpretation"]], "XOR dataset": [[346, "xor-dataset"]], "Yhat": [[1029, "id10"]], "Zero one loss": [[1005, "zero-one-loss"]], "Zopa": [[1029, "id27"]], "__sklearn_is_fitted__ as Developer API": [[133, null]], "_safe_indexing": [[930, null]], "accuracy_score": [[707, null]], "add_dummy_feature": [[890, null]], "additive_chi2_kernel": [[762, null]], "adjusted_mutual_info_score": [[708, null]], "adjusted_rand_score": [[709, null]], "affinity_propagation": [[457, null]], "all_displays": [[943, null]], "all_estimators": [[944, null]], "all_functions": [[945, null]], "as_float_array": [[932, null]], "assert_all_finite": [[933, null]], "auc": [[710, null]], "available_if": [[965, null]], "average_precision_score": [[711, null]], "balanced_accuracy_score": [[712, null]], "betaworks": [[1029, "id4"]], "binarize": [[891, null]], "brier_score_loss": [[713, null]], "calibration_curve": [[442, null]], "calinski_harabasz_score": [[714, null]], "check_X_y": [[934, null]], "check_array": [[935, null]], "check_consistent_length": [[936, null]], "check_cv": [[828, null]], "check_estimator": [[946, null]], "check_increasing": [[640, null]], "check_is_fitted": [[988, null]], "check_memory": [[989, null]], "check_random_state": [[937, null]], "check_scalar": [[938, null]], "check_scoring": [[715, null]], "check_symmetric": [[990, null]], "chi2": [[608, null]], "chi2_kernel": [[763, null]], "class_likelihood_ratios": [[716, null]], "classification_report": [[717, null]], "clear_data_home": [[489, null]], "clone": [[436, null]], "cluster_optics_dbscan": [[458, null]], "cluster_optics_xi": [[459, null]], "cohen_kappa_score": [[720, null]], "column_or_1d": [[991, null]], "completeness_score": [[721, null]], "compute_class_weight": [[939, null]], "compute_optics_graph": [[460, null]], "compute_sample_weight": [[940, null]], "config_context": [[471, null]], "confusion_matrix": [[722, null]], "consensus_score": [[723, null]], "contingency_matrix": [[718, null]], "cosine_distances": [[764, null]], "cosine_similarity": [[765, null]], "coverage_error": [[724, null]], "cross_val_predict": [[829, null]], "cross_val_score": [[830, null]], "cross_validate": [[831, null]], "d2_absolute_error_score": [[725, null]], "d2_log_loss_score": [[726, null]], "d2_pinball_score": [[727, null]], "d2_tweedie_score": [[728, null]], "davies_bouldin_score": [[729, null]], "dbscan": [[422, null]], "dbscan_clustering": [[88, "dbscan-clustering"]], "dcg_score": [[730, null]], "default_tags": [[941, null]], "delayed": [[971, null]], "density": [[949, null]], "deprecated": [[942, null]], "det_curve": [[731, null]], "dict_learning": [[549, null]], "dict_learning_online": [[550, null]], "distance_metrics": [[766, null]], "dump_svmlight_file": [[490, null]], "empirical_covariance": [[480, null]], "enable_halving_search_cv": [[583, null]], "enable_iterative_imputer": [[584, null]], "enet_path": [[685, null]], "estimate_bandwidth": [[461, null]], "estimator_html_repr": [[948, null]], "euclidean_distances": [[767, null]], "explained_variance_score": [[732, null]], "export_graphviz": [[920, null]], "export_text": [[921, null]], "extract_patches_2d": [[588, null]], "f1_score": [[733, null]], "f_classif": [[609, null]], "f_regression": [[610, null]], "fast_logdet": [[950, null]], "fastica": [[423, null]], "fbeta_score": [[734, null]], "fetch_20newsgroups": [[491, null]], "fetch_20newsgroups_vectorized": [[492, null]], "fetch_california_housing": [[493, null]], "fetch_covtype": [[494, null]], "fetch_file": [[495, null]], "fetch_kddcup99": [[496, null]], "fetch_lfw_pairs": [[497, null]], "fetch_lfw_people": [[498, null]], "fetch_olivetti_faces": [[499, null]], "fetch_openml": [[500, null]], "fetch_rcv1": [[501, null]], "fetch_species_distributions": [[502, null]], "fowlkes_mallows_score": [[735, null]], "gen_batches": [[955, null]], "gen_even_slices": [[956, null]], "get_config": [[630, null]], "get_data_home": [[503, null]], "get_feature_names_out Available in all Transformers": [[325, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[381, "get-params-and-set-params"]], "get_routing_for_object": [[963, null]], "get_scorer": [[736, null]], "get_scorer_names": [[737, null]], "get_tags": [[957, null]], "graphical_lasso": [[481, null]], "grid_to_graph": [[589, null]], "hamming_loss": [[738, null]], "has_fit_parameter": [[992, null]], "haversine_distances": [[768, null]], "hinge_loss": [[739, null]], "homogeneity_completeness_v_measure": [[740, null]], "homogeneity_score": [[741, null]], "img_to_graph": [[590, null]], "incr_mean_variance_axis": [[979, null]], "indexable": [[959, null]], "inplace_column_scale": [[980, null]], "inplace_csr_column_scale": [[981, null]], "inplace_csr_row_normalize_l1": [[986, null]], "inplace_csr_row_normalize_l2": [[987, null]], "inplace_row_scale": [[982, null]], "inplace_swap_column": [[983, null]], "inplace_swap_row": [[984, null]], "is_classifier": [[437, null]], "is_clusterer": [[438, null]], "is_multilabel": [[966, null]], "is_regressor": [[439, null]], "isotonic_regression": [[641, null]], "jaccard_score": [[742, null]], "johnson_lindenstrauss_min_dim": [[902, null]], "kNN-imputation of the missing values": [[183, "knn-imputation-of-the-missing-values"]], "k_means": [[462, null]], "kcachegrind": [[385, "kcachegrind"]], "kernel_metrics": [[769, null]], "kmeans_plusplus": [[463, null]], "kneighbors_graph": [[861, null]], "l1_min_c": [[915, null]], "label_binarize": [[892, null]], "label_ranking_average_precision_score": [[743, null]], "label_ranking_loss": [[744, null]], "laplacian_kernel": [[770, null]], "lars_path": [[686, null]], "lars_path_gram": [[687, null]], "lasso_path": [[688, null]], "learning_curve": [[832, null]], "ledoit_wolf": [[482, null]], "ledoit_wolf_shrinkage": [[483, null]], "linear_kernel": [[771, null]], "load_breast_cancer": [[504, null]], "load_diabetes": [[505, null]], "load_digits": [[506, null]], "load_files": [[507, null]], "load_iris": [[508, null]], "load_linnerud": [[509, null]], "load_sample_image": [[510, null]], "load_sample_images": [[511, null]], "load_svmlight_file": [[512, null]], "load_svmlight_files": [[513, null]], "load_wine": [[514, null]], "locally_linear_embedding": [[697, null]], "log_loss": [[745, null]], "macOS": [[377, "macos"]], "macOS compilers from Homebrew": [[377, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[377, "macos-compilers-from-conda-forge"]], "make_biclusters": [[515, null]], "make_blobs": [[384, "make-blobs"], [516, null]], "make_checkerboard": [[517, null]], "make_circles": [[518, null]], "make_classification": [[384, "make-classification"], [519, null]], "make_column_selector": [[469, null]], "make_column_transformer": [[470, null]], "make_friedman1": [[520, null]], "make_friedman2": [[521, null]], "make_friedman3": [[522, null]], "make_gaussian_quantiles": [[523, null]], "make_hastie_10_2": [[524, null]], "make_low_rank_matrix": [[525, null]], "make_moons": [[526, null]], "make_multilabel_classification": [[527, null]], "make_pipeline": [[869, null]], "make_regression": [[384, "make-regression"], [528, null]], "make_s_curve": [[529, null]], "make_scorer": [[746, null]], "make_sparse_coded_signal": [[530, null]], "make_sparse_spd_matrix": [[531, null]], "make_sparse_uncorrelated": [[532, null]], "make_spd_matrix": [[533, null]], "make_swiss_roll": [[534, null]], "make_union": [[870, null]], "manhattan_distances": [[772, null]], "matthews_corrcoef": [[747, null]], "max_error": [[748, null]], "maxabs_scale": [[893, null]], "mean_absolute_error": [[749, null]], "mean_absolute_percentage_error": [[750, null]], "mean_gamma_deviance": [[751, null]], "mean_pinball_loss": [[752, null]], "mean_poisson_deviance": [[753, null]], "mean_shift": [[464, null]], "mean_squared_error": [[754, null]], "mean_squared_log_error": [[755, null]], "mean_tweedie_deviance": [[756, null]], "mean_variance_axis": [[985, null]], "median_absolute_error": [[757, null]], "min_cluster_size": [[88, "min-cluster-size"]], "min_pos": [[931, null]], "min_samples": [[88, "min-samples"]], "minmax_scale": [[894, null]], "multilabel_confusion_matrix": [[758, null]], "murmurhash3_32": [[969, null]], "mutual_info_classif": [[611, null]], "mutual_info_regression": [[612, null]], "mutual_info_score": [[759, null]], "nan_euclidean_distances": [[773, null]], "ndcg_score": [[760, null]], "non_negative_factorization": [[551, null]], "normalize": [[895, null]], "normalized_mutual_info_score": [[761, null]], "oas": [[424, null]], "orthogonal_mp": [[689, null]], "orthogonal_mp_gram": [[690, null]], "pair_confusion_matrix": [[719, null]], "paired_cosine_distances": [[774, null]], "paired_distances": [[775, null]], "paired_euclidean_distances": [[776, null]], "paired_manhattan_distances": [[777, null]], "pairwise_distances": [[782, null]], "pairwise_distances_argmin": [[783, null]], "pairwise_distances_argmin_min": [[784, null]], "pairwise_distances_chunked": [[785, null]], "pairwise_kernels": [[778, null]], "parallel_backend": [[972, null]], "parametrize_with_checks": [[947, null]], "partial_dependence": [[637, null]], "permutation_importance": [[638, null]], "permutation_test_score": [[833, null]], "pickle, joblib, and cloudpickle": [[405, "pickle-joblib-and-cloudpickle"]], "plot_tree": [[922, null]], "polynomial_kernel": [[779, null]], "power_transform": [[896, null]], "precision_recall_curve": [[786, null]], "precision_recall_fscore_support": [[787, null]], "precision_score": [[788, null]], "process_routing": [[964, null]], "quantile_transform": [[897, null]], "r2_score": [[789, null]], "r_regression": [[613, null]], "radius_neighbors_graph": [[862, null]], "rand_score": [[790, null]], "randomized_range_finder": [[951, null]], "randomized_svd": [[952, null]], "rbf_kernel": [[780, null]], "recall_score": [[791, null]], "reconstruct_from_patches_2d": [[591, null]], "register_parallel_backend": [[974, null]], "resample": [[975, null]], "ridge_regression": [[691, null]], "robust_scale": [[898, null]], "roc_auc_score": [[792, null]], "roc_curve": [[793, null]], "root_mean_squared_error": [[794, null]], "root_mean_squared_log_error": [[795, null]], "safe_mask": [[976, null]], "safe_sparse_dot": [[953, null]], "safe_sqr": [[977, null]], "sample_without_replacement": [[973, null]], "scale": [[899, null]], "set_config": [[906, null]], "show_versions": [[907, null]], "shrunk_covariance": [[484, null]], "shuffle": [[978, null]], "sigmoid_kernel": [[781, null]], "silhouette_samples": [[796, null]], "silhouette_score": [[797, null]], "single_source_shortest_path_length": [[958, null]], "sklearn": [[3, null], [1052, "sklearn"]], "sklearn.base": [[4, null], [1045, "sklearn-base"], [1046, "sklearn-base"], [1048, "sklearn-base"], [1049, "sklearn-base"], [1050, "sklearn-base"], [1051, "sklearn-base"], [1051, "id2"], [1051, "id10"], [1052, "sklearn-base"], [1053, "sklearn-base"], [1055, "sklearn-base"]], "sklearn.calibration": [[5, null], [1045, "sklearn-calibration"], [1046, "sklearn-calibration"], [1048, "sklearn-calibration"], [1049, "sklearn-calibration"], [1049, "id7"], [1050, "sklearn-calibration"], [1051, "sklearn-calibration"], [1051, "id11"], [1052, "sklearn-calibration"], [1052, "id7"], [1053, "sklearn-calibration"], [1053, "id4"], [1054, "sklearn-calibration"], [1054, "id7"]], "sklearn.cluster": [[6, null], [1044, "sklearn-cluster"], [1044, "id2"], [1044, "id11"], [1044, "id24"], [1045, "sklearn-cluster"], [1045, "id8"], [1046, "sklearn-cluster"], [1046, "id5"], [1047, "sklearn-cluster"], [1047, "id2"], [1047, "id5"], [1048, "sklearn-cluster"], [1049, "sklearn-cluster"], [1049, "id1"], [1049, "id8"], [1050, "sklearn-cluster"], [1050, "id8"], [1051, "sklearn-cluster"], [1051, "id12"], [1052, "sklearn-cluster"], [1052, "id8"], [1053, "sklearn-cluster"], [1053, "id5"], [1054, "sklearn-cluster"], [1055, "sklearn-cluster"]], "sklearn.compose": [[7, null], [1044, "sklearn-compose"], [1044, "id3"], [1044, "id6"], [1044, "id12"], [1044, "id25"], [1045, "sklearn-compose"], [1045, "id9"], [1046, "sklearn-compose"], [1047, "sklearn-compose"], [1048, "sklearn-compose"], [1048, "id5"], [1049, "sklearn-compose"], [1050, "sklearn-compose"], [1051, "sklearn-compose"], [1052, "sklearn-compose"], [1053, "sklearn-compose"], [1053, "id6"], [1054, "sklearn-compose"], [1054, "id3"], [1054, "id8"], [1055, "sklearn-compose"]], "sklearn.covariance": [[8, null], [1044, "sklearn-covariance"], [1044, "id26"], [1048, "sklearn-covariance"], [1049, "sklearn-covariance"], [1050, "sklearn-covariance"], [1052, "sklearn-covariance"], [1053, "sklearn-covariance"], [1055, "sklearn-covariance"]], "sklearn.cross_decomposition": [[9, null], [1046, "sklearn-cross-decomposition"], [1048, "sklearn-cross-decomposition"], [1048, "id6"], [1050, "sklearn-cross-decomposition"], [1052, "sklearn-cross-decomposition"], [1054, "sklearn-cross-decomposition"], [1055, "sklearn-cross-decomposition"]], "sklearn.datasets": [[10, null], [1044, "sklearn-datasets"], [1044, "id13"], [1044, "id27"], [1045, "sklearn-datasets"], [1045, "id10"], [1046, "sklearn-datasets"], [1047, "sklearn-datasets"], [1048, "sklearn-datasets"], [1049, "sklearn-datasets"], [1049, "id9"], [1050, "sklearn-datasets"], [1050, "id9"], [1051, "sklearn-datasets"], [1051, "id13"], [1052, "sklearn-datasets"], [1052, "id9"], [1053, "sklearn-datasets"], [1054, "sklearn-datasets"], [1055, "sklearn-datasets"]], "sklearn.decomposition": [[11, null], [1044, "sklearn-decomposition"], [1044, "id4"], [1044, "id14"], [1044, "id28"], [1045, "sklearn-decomposition"], [1045, "id11"], [1046, "sklearn-decomposition"], [1047, "sklearn-decomposition"], [1047, "id6"], [1048, "sklearn-decomposition"], [1048, "id7"], [1049, "sklearn-decomposition"], [1049, "id10"], [1050, "sklearn-decomposition"], [1050, "id10"], [1051, "sklearn-decomposition"], [1051, "id14"], [1052, "sklearn-decomposition"], [1052, "id10"], [1053, "sklearn-decomposition"], [1054, "sklearn-decomposition"], [1054, "id9"]], "sklearn.discriminant_analysis": [[12, null], [1044, "sklearn-discriminant-analysis"], [1045, "sklearn-discriminant-analysis"], [1048, "sklearn-discriminant-analysis"], [1050, "sklearn-discriminant-analysis"], [1051, "sklearn-discriminant-analysis"], [1052, "sklearn-discriminant-analysis"], [1055, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[13, null], [1044, "sklearn-dummy"], [1045, "sklearn-dummy"], [1046, "sklearn-dummy"], [1049, "sklearn-dummy"], [1050, "sklearn-dummy"], [1054, "sklearn-dummy"]], "sklearn.ensemble": [[14, null], [1044, "sklearn-ensemble"], [1044, "id29"], [1045, "sklearn-ensemble"], [1045, "id12"], [1046, "sklearn-ensemble"], [1047, "sklearn-ensemble"], [1047, "id7"], [1048, "sklearn-ensemble"], [1048, "id8"], [1049, "sklearn-ensemble"], [1049, "id2"], [1049, "id11"], [1050, "sklearn-ensemble"], [1051, "sklearn-ensemble"], [1051, "id3"], [1051, "id15"], [1052, "sklearn-ensemble"], [1052, "id11"], [1053, "sklearn-ensemble"], [1053, "id7"], [1054, "sklearn-ensemble"], [1055, "sklearn-ensemble"]], "sklearn.exceptions": [[15, null], [1048, "sklearn-exceptions"], [1052, "sklearn-exceptions"]], "sklearn.experimental": [[16, null]], "sklearn.externals": [[1045, "sklearn-externals"]], "sklearn.feature_extraction": [[17, null], [1044, "sklearn-feature-extraction"], [1044, "id15"], [1044, "id30"], [1045, "sklearn-feature-extraction"], [1046, "sklearn-feature-extraction"], [1047, "sklearn-feature-extraction"], [1047, "id8"], [1048, "sklearn-feature-extraction"], [1048, "id9"], [1049, "sklearn-feature-extraction"], [1049, "id12"], [1050, "sklearn-feature-extraction"], [1051, "sklearn-feature-extraction"], [1052, "sklearn-feature-extraction"], [1053, "sklearn-feature-extraction"], [1054, "sklearn-feature-extraction"]], "sklearn.feature_extraction.text": [[1055, "sklearn-feature-extraction-text"]], "sklearn.feature_selection": [[18, null], [1044, "sklearn-feature-selection"], [1046, "sklearn-feature-selection"], [1047, "sklearn-feature-selection"], [1048, "sklearn-feature-selection"], [1049, "sklearn-feature-selection"], [1049, "id13"], [1050, "sklearn-feature-selection"], [1050, "id2"], [1050, "id11"], [1051, "sklearn-feature-selection"], [1051, "id16"], [1052, "sklearn-feature-selection"], [1052, "id12"], [1053, "sklearn-feature-selection"], [1054, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[19, null], [1044, "sklearn-gaussian-process"], [1046, "sklearn-gaussian-process"], [1047, "sklearn-gaussian-process"], [1048, "sklearn-gaussian-process"], [1048, "id10"], [1049, "sklearn-gaussian-process"], [1050, "sklearn-gaussian-process"], [1051, "sklearn-gaussian-process"], [1052, "sklearn-gaussian-process"]], "sklearn.impute": [[20, null], [1044, "sklearn-impute"], [1044, "id31"], [1045, "sklearn-impute"], [1045, "id13"], [1046, "sklearn-impute"], [1046, "id6"], [1047, "sklearn-impute"], [1048, "sklearn-impute"], [1049, "sklearn-impute"], [1050, "sklearn-impute"], [1050, "id12"], [1051, "sklearn-impute"], [1052, "sklearn-impute"], [1052, "id13"], [1053, "sklearn-impute"], [1054, "sklearn-impute"], [1055, "sklearn-impute"]], "sklearn.inspection": [[21, null], [1045, "sklearn-inspection"], [1045, "id3"], [1045, "id14"], [1046, "sklearn-inspection"], [1046, "id7"], [1047, "sklearn-inspection"], [1047, "id11"], [1048, "sklearn-inspection"], [1049, "sklearn-inspection"], [1050, "sklearn-inspection"], [1051, "sklearn-inspection"], [1051, "id17"], [1052, "sklearn-inspection"], [1053, "sklearn-inspection"], [1053, "id8"], [1054, "sklearn-inspection"]], "sklearn.isotonic": [[22, null], [1044, "sklearn-isotonic"], [1045, "sklearn-isotonic"], [1046, "sklearn-isotonic"], [1048, "sklearn-isotonic"], [1050, "sklearn-isotonic"], [1051, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[23, null], [1046, "sklearn-kernel-approximation"], [1048, "sklearn-kernel-approximation"], [1049, "sklearn-kernel-approximation"], [1050, "sklearn-kernel-approximation"], [1051, "sklearn-kernel-approximation"], [1052, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[24, null], [1053, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[25, null], [1044, "sklearn-linear-model"], [1044, "id16"], [1044, "id32"], [1045, "sklearn-linear-model"], [1045, "id15"], [1046, "sklearn-linear-model"], [1047, "sklearn-linear-model"], [1047, "id9"], [1048, "sklearn-linear-model"], [1048, "id11"], [1049, "sklearn-linear-model"], [1049, "id3"], [1049, "id14"], [1050, "sklearn-linear-model"], [1050, "id13"], [1051, "sklearn-linear-model"], [1051, "id18"], [1052, "sklearn-linear-model"], [1053, "sklearn-linear-model"], [1053, "id9"], [1054, "sklearn-linear-model"], [1055, "sklearn-linear-model"]], "sklearn.manifold": [[26, null], [1044, "sklearn-manifold"], [1045, "sklearn-manifold"], [1046, "sklearn-manifold"], [1047, "sklearn-manifold"], [1048, "sklearn-manifold"], [1049, "sklearn-manifold"], [1049, "id15"], [1050, "sklearn-manifold"], [1050, "id14"], [1051, "sklearn-manifold"], [1051, "id19"], [1052, "sklearn-manifold"], [1054, "sklearn-manifold"], [1055, "sklearn-manifold"]], "sklearn.metrics": [[27, null], [1044, "sklearn-metrics"], [1044, "id17"], [1044, "id33"], [1045, "sklearn-metrics"], [1045, "id4"], [1045, "id16"], [1046, "sklearn-metrics"], [1046, "id2"], [1046, "id8"], [1047, "sklearn-metrics"], [1047, "id10"], [1048, "sklearn-metrics"], [1048, "id2"], [1048, "id12"], [1049, "sklearn-metrics"], [1049, "id16"], [1050, "sklearn-metrics"], [1050, "id3"], [1050, "id15"], [1051, "sklearn-metrics"], [1052, "sklearn-metrics"], [1052, "id2"], [1052, "id14"], [1053, "sklearn-metrics"], [1054, "sklearn-metrics"], [1054, "id4"], [1054, "id10"], [1055, "sklearn-metrics"]], "sklearn.mixture": [[28, null], [1044, "sklearn-mixture"], [1044, "id34"], [1045, "sklearn-mixture"], [1049, "sklearn-mixture"], [1050, "sklearn-mixture"], [1052, "sklearn-mixture"], [1052, "id15"], [1054, "sklearn-mixture"]], "sklearn.model_selection": [[29, null], [1044, "sklearn-model-selection"], [1044, "id35"], [1045, "sklearn-model-selection"], [1046, "sklearn-model-selection"], [1046, "id9"], [1046, "id13"], [1047, "sklearn-model-selection"], [1048, "sklearn-model-selection"], [1048, "id13"], [1049, "sklearn-model-selection"], [1050, "sklearn-model-selection"], [1051, "sklearn-model-selection"], [1051, "id20"], [1052, "sklearn-model-selection"], [1053, "sklearn-model-selection"], [1054, "sklearn-model-selection"], [1054, "id11"], [1055, "sklearn-model-selection"]], "sklearn.multiclass": [[30, null], [1045, "sklearn-multiclass"], [1048, "sklearn-multiclass"], [1049, "sklearn-multiclass"], [1050, "sklearn-multiclass"]], "sklearn.multioutput": [[31, null], [1044, "sklearn-multioutput"], [1045, "sklearn-multioutput"], [1046, "sklearn-multioutput"], [1047, "sklearn-multioutput"], [1048, "sklearn-multioutput"], [1048, "id14"], [1051, "sklearn-multioutput"], [1052, "sklearn-multioutput"], [1053, "sklearn-multioutput"], [1054, "sklearn-multioutput"]], "sklearn.naive_bayes": [[32, null], [1044, "sklearn-naive-bayes"], [1046, "sklearn-naive-bayes"], [1046, "id10"], [1047, "sklearn-naive-bayes"], [1048, "sklearn-naive-bayes"], [1049, "sklearn-naive-bayes"], [1051, "sklearn-naive-bayes"], [1052, "sklearn-naive-bayes"]], "sklearn.neighbors": [[33, null], [1044, "sklearn-neighbors"], [1044, "id7"], [1044, "id18"], [1044, "id36"], [1045, "sklearn-neighbors"], [1045, "id5"], [1045, "id17"], [1046, "sklearn-neighbors"], [1046, "id11"], [1048, "sklearn-neighbors"], [1049, "sklearn-neighbors"], [1049, "id4"], [1049, "id17"], [1050, "sklearn-neighbors"], [1051, "sklearn-neighbors"], [1052, "sklearn-neighbors"], [1052, "id16"], [1053, "sklearn-neighbors"], [1054, "sklearn-neighbors"], [1055, "sklearn-neighbors"]], "sklearn.neural_network": [[34, null], [1044, "sklearn-neural-network"], [1045, "sklearn-neural-network"], [1046, "sklearn-neural-network"], [1047, "sklearn-neural-network"], [1048, "sklearn-neural-network"], [1049, "sklearn-neural-network"], [1050, "sklearn-neural-network"], [1051, "sklearn-neural-network"], [1051, "id21"], [1052, "sklearn-neural-network"], [1055, "sklearn-neural-network"]], "sklearn.pipeline": [[35, null], [1044, "sklearn-pipeline"], [1045, "sklearn-pipeline"], [1046, "sklearn-pipeline"], [1047, "sklearn-pipeline"], [1048, "sklearn-pipeline"], [1049, "sklearn-pipeline"], [1049, "id18"], [1050, "sklearn-pipeline"], [1051, "sklearn-pipeline"], [1052, "sklearn-pipeline"], [1054, "sklearn-pipeline"]], "sklearn.preprocessing": [[36, null], [1044, "sklearn-preprocessing"], [1044, "id19"], [1044, "id37"], [1045, "sklearn-preprocessing"], [1045, "id18"], [1046, "sklearn-preprocessing"], [1046, "id12"], [1047, "sklearn-preprocessing"], [1048, "sklearn-preprocessing"], [1048, "id15"], [1049, "sklearn-preprocessing"], [1049, "id19"], [1050, "sklearn-preprocessing"], [1050, "id4"], [1050, "id16"], [1051, "sklearn-preprocessing"], [1051, "id4"], [1051, "id22"], [1052, "sklearn-preprocessing"], [1052, "id17"], [1053, "sklearn-preprocessing"], [1053, "id10"], [1054, "sklearn-preprocessing"], [1055, "sklearn-preprocessing"]], "sklearn.random_projection": [[37, null], [1050, "sklearn-random-projection"]], "sklearn.semi_supervised": [[38, null], [1046, "sklearn-semi-supervised"], [1047, "sklearn-semi-supervised"], [1048, "sklearn-semi-supervised"], [1048, "id3"], [1048, "id16"], [1052, "sklearn-semi-supervised"], [1055, "sklearn-semi-supervised"]], "sklearn.svm": [[39, null], [1044, "sklearn-svm"], [1044, "id38"], [1045, "sklearn-svm"], [1046, "sklearn-svm"], [1047, "sklearn-svm"], [1048, "sklearn-svm"], [1049, "sklearn-svm"], [1049, "id20"], [1050, "sklearn-svm"], [1051, "sklearn-svm"], [1052, "sklearn-svm"], [1054, "sklearn-svm"]], "sklearn.tree": [[40, null], [1044, "sklearn-tree"], [1045, "sklearn-tree"], [1045, "id19"], [1046, "sklearn-tree"], [1047, "sklearn-tree"], [1048, "sklearn-tree"], [1048, "id17"], [1049, "sklearn-tree"], [1049, "id21"], [1050, "sklearn-tree"], [1050, "id5"], [1050, "id17"], [1051, "sklearn-tree"], [1051, "id5"], [1051, "id23"], [1052, "sklearn-tree"], [1052, "id3"], [1052, "id18"], [1053, "sklearn-tree"], [1053, "id11"], [1054, "sklearn-tree"], [1054, "id12"], [1055, "sklearn-tree"]], "sklearn.utils": [[41, null], [1044, "sklearn-utils"], [1044, "id20"], [1044, "id39"], [1045, "sklearn-utils"], [1046, "sklearn-utils"], [1046, "id14"], [1047, "sklearn-utils"], [1047, "id12"], [1048, "sklearn-utils"], [1048, "id18"], [1049, "sklearn-utils"], [1049, "id5"], [1049, "id22"], [1050, "sklearn-utils"], [1050, "id18"], [1051, "sklearn-utils"], [1051, "id6"], [1051, "id24"], [1052, "sklearn-utils"], [1053, "sklearn-utils"], [1053, "id12"], [1054, "sklearn-utils"], [1054, "id13"], [1055, "sklearn-utils"]], "sklearn.utils.check_estimators": [[1055, "sklearn-utils-check-estimators"]], "sklearn.utils.sparsefuncs": [[1045, "sklearn-utils-sparsefuncs"]], "skops.io": [[405, "skops-io"]], "smacof": [[698, null]], "solido": [[1029, "id23"]], "sort_graph_by_row_values": [[863, null]], "sparse_encode": [[552, null]], "spectral_clustering": [[465, null]], "spectral_embedding": [[699, null]], "t-SNE: The effect of various perplexity values on the shape": [[239, null]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[1002, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "top_k_accuracy_score": [[798, null]], "train_test_split": [[834, null]], "trustworthiness": [[700, null]], "type_of_target": [[967, null]], "unique_labels": [[968, null]], "v_measure_score": [[799, null]], "validate_data": [[993, null]], "validation_curve": [[835, null]], "ward_tree": [[466, null]], "weighted_mode": [[954, null]], "zero_one_loss": [[800, null]], "\u201cStatlog\u201d German credit dataset": [[266, "statlog-german-credit-dataset"]]}, "docnames": ["about", "api/deprecated", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "install_instructions_conda", "machine_learning_map", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_clusterer", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_file", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils.ClassifierTags", "modules/generated/sklearn.utils.InputTags", "modules/generated/sklearn.utils.RegressorTags", "modules/generated/sklearn.utils.Tags", "modules/generated/sklearn.utils.TargetTags", "modules/generated/sklearn.utils.TransformerTags", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.default_tags", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.get_tags", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/generated/sklearn.utils.validation.validate_data", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "api/deprecated.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "install_instructions_conda.rst", "machine_learning_map.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_clusterer.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_file.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils.ClassifierTags.rst", "modules/generated/sklearn.utils.InputTags.rst", "modules/generated/sklearn.utils.RegressorTags.rst", "modules/generated/sklearn.utils.Tags.rst", "modules/generated/sklearn.utils.TargetTags.rst", "modules/generated/sklearn.utils.TransformerTags.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.default_tags.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.get_tags.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/generated/sklearn.utils.validation.validate_data.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst"], "indexentries": {"1d": [[393, "term-1d", true]], "1d array": [[393, "term-1d-array", true]], "2d": [[393, "term-2d", true]], "2d array": [[393, "term-2d-array", true]], "__call__() (sklearn.compose.make_column_selector method)": [[469, "sklearn.compose.make_column_selector.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[618, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[622, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[623, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[625, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[626, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[628, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "__call__() (sklearn.utils.deprecated method)": [[942, "sklearn.utils.deprecated.__call__", false]], "__call__() (sklearn.utils.parallel.parallel method)": [[970, "sklearn.utils.parallel.Parallel.__call__", false]], "_estimator_type": [[393, "term-_estimator_type", true]], "_safe_indexing() (in module sklearn.utils)": [[930, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[557, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[558, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[961, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[962, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[961, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[457, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[443, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[444, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[943, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[944, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[945, "sklearn.utils.discovery.all_functions", false]], "api": [[393, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[561, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[562, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[564, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[568, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[569, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[570, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[648, "sklearn.linear_model.ARDRegression", false]], "array-like": [[393, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[932, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[933, "sklearn.utils.assert_all_finite", false]], "attribute": [[393, "term-attribute", true]], "attributes": [[393, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[710, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[965, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[393, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[559, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[560, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[848, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[425, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[801, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[649, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[843, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[864, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[426, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[426, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[454, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[456, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.Binarizer", false]], "binary": [[393, "term-binary", true]], "birch (class in sklearn.cluster)": [[445, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[446, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[618, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[622, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[623, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[625, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[626, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[628, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[713, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[923, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[440, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[442, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[441, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[393, "term-callable", true]], "categorical feature": [[393, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[844, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[485, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[935, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[936, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[828, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[946, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[640, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[988, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[989, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[937, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[938, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[715, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[990, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[934, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[608, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[716, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[393, "term-class_weight", true]], "classes_": [[393, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[597, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[598, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[678, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[679, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[803, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[804, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[807, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[818, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[868, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[717, "sklearn.metrics.classification_report", false]], "classifier": [[393, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[839, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[428, "sklearn.base.ClassifierMixin", false]], "classifiers": [[393, "term-classifiers", true]], "classifiertags (class in sklearn.utils)": [[924, "sklearn.utils.ClassifierTags", false]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[427, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[489, "sklearn.datasets.clear_data_home", false]], "clone": [[393, "term-clone", true]], "clone() (in module sklearn.base)": [[436, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[618, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[622, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[623, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[625, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[626, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[628, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[393, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[458, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[459, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[393, "term-clusterer", true]], "clusterers": [[393, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[429, "sklearn.base.ClusterMixin", false]], "coef_": [[393, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[910, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[911, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[912, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[913, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[914, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[991, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[467, "sklearn.compose.ColumnTransformer", false]], "common tests": [[393, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[845, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.completeness_score", false]], "components_": [[393, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[939, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[460, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[940, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[471, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[722, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[701, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[393, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[960, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[961, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[718, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[393, "term-continuous", true]], "continuous multi-output": [[393, "term-continuous-multi-output", true]], "continuous multioutput": [[393, "term-continuous-multioutput", true]], "convergencewarning": [[575, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[477, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[592, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[724, "sklearn.metrics.coverage_error", false]], "cross fitting": [[393, "term-0", true]], "cross validation": [[393, "term-1", true]], "cross-fitting": [[393, "term-cross-fitting", true]], "cross-validation": [[393, "term-cross-validation", true]], "cross-validation estimator": [[393, "term-cross-validation-estimator", true]], "cross-validation generator": [[393, "term-cross-validation-generator", true]], "cross-validation splitter": [[393, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[829, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[830, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.cross_validate", false]], "cv": [[393, "term-cv", true]], "cv splitter": [[393, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[393, "term-data-leakage", true]], "data type": [[393, "term-data-type", true]], "dataconversionwarning": [[576, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning": [[577, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[447, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[422, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[449, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.dcg_score", false]], "decision_function": [[393, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[559, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[567, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[561, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[562, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[568, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[569, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[570, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[635, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[916, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[917, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "default_tags() (in module sklearn.utils)": [[941, "sklearn.utils.default_tags", false]], "delayed() (in module sklearn.utils.parallel)": [[971, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[393, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[949, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[430, "sklearn.base.DensityMixin", false]], "deprecated (class in sklearn.utils)": [[942, "sklearn.utils.deprecated", false]], "deprecation": [[393, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[731, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[702, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[618, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[622, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[623, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[625, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[626, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[628, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[549, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[550, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[535, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[585, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[393, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[970, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[970, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[703, "sklearn.metrics.DistanceMetric", false]], "docstring": [[393, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[393, "term-double-underscore", true]], "double underscore notation": [[393, "term-double-underscore-notation", true]], "dtype": [[393, "term-dtype", true]], "duck typing": [[393, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[555, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[556, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[490, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[393, "term-early-stopping", true]], "efficiencywarning": [[578, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[650, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[651, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[472, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[393, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[480, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[473, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[473, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[474, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[475, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[476, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[477, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[478, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[479, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[461, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[393, "term-estimator", true]], "estimator instance": [[393, "term-estimator-instance", true]], "estimator tags": [[393, "term-estimator-tags", true]], "estimator_html_repr() (in module sklearn.utils)": [[948, "sklearn.utils.estimator_html_repr", false]], "estimators": [[393, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[559, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[560, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[561, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[562, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[567, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[568, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[569, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[570, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[393, "term-evaluation-metric", true]], "evaluation metrics": [[393, "term-evaluation-metrics", true]], "examples": [[393, "term-examples", true]], "experimental": [[393, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[920, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[921, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[588, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[918, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[919, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[561, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[562, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[609, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[610, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[536, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[950, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[537, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[423, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.fbeta_score", false]], "feature": [[393, "term-feature", true]], "feature extractor": [[393, "term-feature-extractor", true]], "feature extractors": [[393, "term-feature-extractors", true]], "feature vector": [[393, "term-feature-vector", true]], "feature_importances_": [[393, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[557, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[558, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[561, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[562, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[563, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[564, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[568, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[569, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[570, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[916, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[917, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[918, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[919, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[867, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[868, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[448, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[586, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[393, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[867, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_covtype", false]], "fetch_file() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_file", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[499, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[500, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[501, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[502, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[393, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[440, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[443, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[444, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[445, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[447, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[448, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[449, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[451, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[453, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[454, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[455, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[456, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[467, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[468, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[473, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[474, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[475, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[476, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[477, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[478, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[479, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[488, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[535, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[536, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[537, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[539, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[540, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[541, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[542, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[543, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[544, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[546, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[547, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[548, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[555, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[556, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[558, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[559, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[560, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[561, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[562, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[564, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[566, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[567, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[568, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[569, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[570, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[572, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[574, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[585, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[586, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[587, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[594, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[596, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[599, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[600, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[601, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[602, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[603, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[604, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[606, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[607, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[694, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[695, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[393, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[448, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[429, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[433, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[443, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[444, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[445, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[447, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[449, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[451, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[453, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[455, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[567, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[393, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[435, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[445, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[448, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[467, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[488, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[535, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[536, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[537, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[539, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[540, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[541, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[542, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[543, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[544, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[546, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[547, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[548, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[570, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[572, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[574, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[585, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[586, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[587, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[594, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[596, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[599, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[600, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[601, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[602, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[603, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[605, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[604, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[606, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[607, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[694, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[695, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning": [[579, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[393, "term-fitted", true]], "fitting": [[393, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[803, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[970, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[441, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[635, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[636, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[701, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[702, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[704, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[705, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[706, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[810, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[827, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[441, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[701, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[702, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[704, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[705, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[706, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.fromkeys", false]], "function": [[393, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[393, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[652, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[802, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[846, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[900, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[955, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[956, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[630, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[536, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[503, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[393, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[427, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[432, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[445, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[448, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[467, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[488, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[535, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[536, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[537, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[539, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[540, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[541, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[542, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[543, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[544, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[546, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[547, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[548, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[570, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[572, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[574, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[585, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[594, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[596, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[599, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[600, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[601, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[602, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[603, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[605, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[604, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[606, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[607, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[426, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[454, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[456, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[425, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[440, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[443, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[444, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[445, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[447, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[448, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[449, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[451, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[453, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[454, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[455, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[456, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[467, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[468, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[473, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[474, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[475, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[476, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[477, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[478, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[479, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[488, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[535, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[536, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[537, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[539, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[540, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[541, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[542, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[543, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[544, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[546, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[547, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[548, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[555, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[556, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[558, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[559, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[560, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[561, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[562, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[564, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[566, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[567, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[568, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[569, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[570, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[572, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[574, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[585, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[586, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[587, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[594, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[596, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[599, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[600, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[601, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[602, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[603, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[604, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[606, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[607, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[694, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[695, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[805, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[806, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[809, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[811, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[812, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[813, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[814, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[817, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[819, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[820, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[821, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[822, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[823, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[824, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[825, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[703, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[393, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[805, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[806, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[809, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[811, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[812, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[813, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[814, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[817, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[819, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[820, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[821, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[822, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[823, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[824, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[825, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[393, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[425, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[440, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[443, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[444, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[445, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[447, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[448, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[449, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[451, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[453, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[454, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[455, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[456, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[467, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[468, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[473, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[474, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[475, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[476, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[477, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[478, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[479, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[488, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[535, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[536, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[537, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[539, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[540, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[541, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[542, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[543, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[544, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[546, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[547, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[548, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[555, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[556, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[558, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[559, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[560, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[561, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[562, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[564, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[566, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[567, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[568, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[569, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[570, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[572, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[574, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[585, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[586, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[587, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[594, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[596, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[599, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[600, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[601, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[602, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[603, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[604, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[606, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[607, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[618, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[622, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[623, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[625, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[626, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[628, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[694, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[695, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[473, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[474, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[475, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[476, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[477, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[478, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[479, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[536, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[963, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[736, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[737, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[426, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[454, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[456, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[426, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[454, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[456, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[596, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[599, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[600, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[601, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[602, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[603, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[605, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[604, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[606, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[607, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tags() (in module sklearn.utils)": [[957, "sklearn.utils.get_tags", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[563, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[564, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[481, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[474, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[475, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[589, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[804, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[805, "sklearn.model_selection.GroupKFold", false]], "groups": [[393, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[806, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[807, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[808, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[738, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[992, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[593, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[449, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[739, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[566, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[740, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[741, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[653, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[393, "term-hyper-parameter", true]], "hyperparameter": [[393, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[618, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[622, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[623, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[625, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[626, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[628, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[590, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[393, "term-imputation", true]], "impute": [[393, "term-impute", true]], "inconsistentversionwarning": [[580, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[979, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[538, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[393, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[959, "sklearn.utils.indexable", false]], "induction": [[393, "term-induction", true]], "inductive": [[393, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[881, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[882, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[889, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[980, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[981, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[986, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[987, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[982, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[983, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[984, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inputtags (class in sklearn.utils)": [[925, "sklearn.utils.InputTags", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[448, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[537, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[539, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[542, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[543, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[544, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[547, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[548, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[585, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[596, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[599, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[600, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[601, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[602, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[603, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[605, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[604, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[606, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[607, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[437, "sklearn.base.is_classifier", false]], "is_clusterer() (in module sklearn.base)": [[438, "sklearn.base.is_clusterer", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[966, "sklearn.utils.multiclass.is_multilabel", false]], "is_regressor() (in module sklearn.base)": [[439, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[618, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[622, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[623, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[625, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[626, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[628, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[567, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[692, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[641, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[639, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[631, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[742, "sklearn.metrics.jaccard_score", false]], "joblib": [[393, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[902, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[462, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[849, "sklearn.neighbors.KDTree", false]], "kernel": [[393, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[853, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[539, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[647, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[809, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[450, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[463, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[861, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[850, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[851, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[852, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[632, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[915, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[393, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[743, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[744, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[903, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[393, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[904, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[654, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[656, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[688, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[660, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[540, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[393, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[832, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[810, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[811, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[812, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[813, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[814, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[482, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[483, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[476, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[661, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[908, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[909, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[511, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[512, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[513, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[514, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[697, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[693, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[854, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[745, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[662, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[663, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[473, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[474, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[475, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[476, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[477, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[478, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[479, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_classification", false]], "make_column_selector (class in sklearn.compose)": [[469, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[470, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[869, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[746, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[531, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[532, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[533, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[534, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[870, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[747, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[748, "sklearn.metrics.max_error", false]], "max_iter": [[393, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[694, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[753, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[464, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[754, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[755, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[756, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[985, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[451, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[757, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[393, "term-memmapping", true]], "memory": [[393, "term-memory", true]], "memory map": [[393, "term-memory-map", true]], "memory mapping": [[393, "term-memory-mapping", true]], "meta-estimator": [[393, "term-meta-estimator", true]], "meta-estimators": [[393, "term-meta-estimators", true]], "metadata": [[393, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[960, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[961, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[393, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[431, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[393, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[962, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[393, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[931, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[477, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[541, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[452, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[542, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[543, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[393, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[633, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[865, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[866, "sklearn.neural_network.MLPRegressor", false]], "module": [[3, "module-sklearn", false], [4, "module-sklearn.base", false], [5, "module-sklearn.calibration", false], [6, "module-sklearn.cluster", false], [7, "module-sklearn.compose", false], [8, "module-sklearn.covariance", false], [9, "module-sklearn.cross_decomposition", false], [10, "module-sklearn.datasets", false], [11, "module-sklearn.decomposition", false], [12, "module-sklearn.discriminant_analysis", false], [13, "module-sklearn.dummy", false], [14, "module-sklearn.ensemble", false], [15, "module-sklearn.exceptions", false], [16, "module-sklearn.experimental", false], [17, "module-sklearn.feature_extraction", false], [17, "module-sklearn.feature_extraction.image", false], [17, "module-sklearn.feature_extraction.text", false], [18, "module-sklearn.feature_selection", false], [19, "module-sklearn.gaussian_process", false], [19, "module-sklearn.gaussian_process.kernels", false], [20, "module-sklearn.impute", false], [21, "module-sklearn.inspection", false], [22, "module-sklearn.isotonic", false], [23, "module-sklearn.kernel_approximation", false], [24, "module-sklearn.kernel_ridge", false], [25, "module-sklearn.linear_model", false], [26, "module-sklearn.manifold", false], [27, "module-sklearn.metrics", false], [27, "module-sklearn.metrics.cluster", false], [27, "module-sklearn.metrics.pairwise", false], [28, "module-sklearn.mixture", false], [29, "module-sklearn.model_selection", false], [30, "module-sklearn.multiclass", false], [31, "module-sklearn.multioutput", false], [32, "module-sklearn.naive_bayes", false], [33, "module-sklearn.neighbors", false], [34, "module-sklearn.neural_network", false], [35, "module-sklearn.pipeline", false], [36, "module-sklearn.preprocessing", false], [37, "module-sklearn.random_projection", false], [38, "module-sklearn.semi_supervised", false], [39, "module-sklearn.svm", false], [40, "module-sklearn.tree", false], [41, "module-sklearn.utils", false], [41, "module-sklearn.utils.arrayfuncs", false], [41, "module-sklearn.utils.class_weight", false], [41, "module-sklearn.utils.discovery", false], [41, "module-sklearn.utils.estimator_checks", false], [41, "module-sklearn.utils.extmath", false], [41, "module-sklearn.utils.graph", false], [41, "module-sklearn.utils.metadata_routing", false], [41, "module-sklearn.utils.metaestimators", false], [41, "module-sklearn.utils.multiclass", false], [41, "module-sklearn.utils.parallel", false], [41, "module-sklearn.utils.random", false], [41, "module-sklearn.utils.sparsefuncs", false], [41, "module-sklearn.utils.sparsefuncs_fast", false], [41, "module-sklearn.utils.validation", false], [583, "module-sklearn.experimental.enable_halving_search_cv", false], [584, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[393, "term-multi-class", true]], "multi-class multi-output": [[393, "term-multi-class-multi-output", true]], "multi-label": [[393, "term-multi-label", true]], "multi-output": [[393, "term-multi-output", true]], "multi-output continuous": [[393, "term-multi-output-continuous", true]], "multi-output multi-class": [[393, "term-multi-output-multi-class", true]], "multiclass": [[393, "term-multiclass", true]], "multiclass multioutput": [[393, "term-multiclass-multioutput", true]], "multilabel": [[393, "term-multilabel", true]], "multilabel indicator matrices": [[393, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[393, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[837, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[758, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[847, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[393, "term-multioutput", true]], "multioutput continuous": [[393, "term-multioutput-continuous", true]], "multioutput multiclass": [[393, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[840, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[841, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[664, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[666, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[667, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[969, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[611, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[612, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[759, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[836, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[837, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[393, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[546, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[618, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[622, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[623, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[625, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[626, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[628, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[393, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[468, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[546, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[571, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[572, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[573, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[574, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[601, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[804, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[807, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[818, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[867, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[868, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[393, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[566, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[393, "term-n_iter_no_change", true]], "n_jobs": [[393, "term-n_jobs", true]], "n_outputs": [[393, "term-n_outputs", true]], "n_samples": [[393, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[910, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[911, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[912, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[913, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[914, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[393, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[571, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[572, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[573, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[574, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[868, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[467, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[393, "term-narrative-docs", true]], "narrative documentation": [[393, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[760, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[855, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[856, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[544, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[551, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[761, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.Normalizer", false]], "notfittederror": [[581, "sklearn.exceptions.NotFittedError", false]], "np": [[393, "term-np", true]], "nusvc (class in sklearn.svm)": [[910, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[911, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[643, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[478, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[424, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[912, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[432, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[836, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[837, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[393, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[453, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[689, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[690, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[393, "term-out-of-core", true]], "outlier detector": [[393, "term-outlier-detector", true]], "outlier detectors": [[393, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[433, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[838, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[393, "term-outputs", true]], "pair": [[393, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[719, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[393, "term-pairwise-metric", true]], "pairwise metrics": [[393, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[782, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[783, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[784, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[785, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[778, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[970, "sklearn.utils.parallel.Parallel", false]], "parallel_backend (class in sklearn.utils)": [[972, "sklearn.utils.parallel_backend", false]], "param": [[393, "term-param", true]], "parameter": [[393, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[815, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[393, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[816, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[947, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[393, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[637, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[393, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[445, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[540, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[541, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[542, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[601, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[636, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[587, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[650, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[651, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[656, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[657, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[666, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[545, "sklearn.decomposition.PCA", false]], "pd": [[393, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[672, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[638, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[833, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[540, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[868, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[441, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[635, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[636, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[701, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[702, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[704, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[705, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[706, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[810, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[827, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[922, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[486, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[487, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[488, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[673, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[779, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[393, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[896, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[883, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[786, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[787, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[788, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[704, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[393, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[817, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[393, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[440, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[443, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[445, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[451, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[468, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[555, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[556, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[558, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[559, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[560, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[561, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[562, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[564, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[566, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[567, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[568, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[569, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[572, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[574, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[393, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[555, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[559, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[561, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[568, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[393, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[440, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[555, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[559, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[561, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[568, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[705, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[393, "term-predictor", true]], "predictors": [[393, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[970, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[910, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[913, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[910, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[913, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[964, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[554, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[897, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[674, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[789, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[613, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[862, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[790, "sklearn.metrics.rand_score", false]], "random_state": [[393, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[568, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[569, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[951, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[952, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[818, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[570, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[675, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[626, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[780, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[645, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[791, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[591, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[393, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[974, "sklearn.utils.register_parallel_backend", false]], "regressor": [[393, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[842, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[434, "sklearn.base.RegressorMixin", false]], "regressors": [[393, "term-regressors", true]], "regressortags (class in sklearn.utils)": [[926, "sklearn.utils.RegressorTags", false]], "repeatedkfold (class in sklearn.model_selection)": [[819, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[820, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[618, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[622, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[623, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[625, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[626, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[628, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[975, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[585, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[477, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[676, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[691, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[678, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[679, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[677, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[898, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[886, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[792, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[793, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[706, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[794, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[795, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[961, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[393, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[976, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[953, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[977, "sklearn.utils.safe_sqr", false]], "sample": [[393, "term-sample", true]], "sample properties": [[393, "term-sample-properties", true]], "sample property": [[393, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[393, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[973, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[393, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[899, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[393, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[393, "term-scikit-learn-contrib", true]], "score": [[393, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[428, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[430, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[434, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[440, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[468, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[473, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[474, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[475, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[476, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[477, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[478, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[479, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[536, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[540, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[555, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[556, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[558, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[559, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[560, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[561, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[562, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[564, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[566, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[568, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[569, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[572, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[574, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[393, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[536, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[567, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[393, "term-scorer", true]], "scoring": [[393, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[605, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[604, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[393, "term-semi-supervised", true]], "semi-supervised learning": [[393, "term-semi-supervised-learning", true]], "semisupervised": [[393, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[606, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[906, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[440, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[447, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[555, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[556, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[558, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[559, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[560, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[561, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[562, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[564, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[566, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[567, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[568, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[569, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[570, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[572, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[574, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[694, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[537, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[585, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[435, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[445, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[448, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[467, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[488, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[535, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[536, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[537, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[539, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[540, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[541, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[542, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[543, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[544, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[546, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[547, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[548, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[570, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[572, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[574, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[585, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[586, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[587, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[594, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[596, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[599, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[600, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[601, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[602, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[603, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[605, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[604, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[606, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[607, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[393, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[425, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[440, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[443, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[444, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[445, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[447, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[448, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[449, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[451, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[453, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[454, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[455, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[456, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[467, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[468, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[473, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[474, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[475, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[476, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[477, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[478, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[479, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[488, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[535, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[536, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[537, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[539, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[540, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[541, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[542, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[543, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[544, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[546, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[547, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[548, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[555, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[556, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[558, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[559, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[560, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[561, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[562, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[564, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[566, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[567, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[568, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[569, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[570, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[572, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[574, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[585, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[586, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[587, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[594, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[596, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[599, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[600, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[601, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[602, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[603, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[604, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[606, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[607, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[618, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[622, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[623, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[625, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[626, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[628, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[694, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[695, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request", false]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[556, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[440, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[468, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[472, "sklearn.covariance.EllipticEnvelope.set_score_request", false]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[473, "sklearn.covariance.EmpiricalCovariance.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[474, "sklearn.covariance.GraphicalLasso.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[475, "sklearn.covariance.GraphicalLassoCV.set_score_request", false]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[476, "sklearn.covariance.LedoitWolf.set_score_request", false]], "set_score_request() (sklearn.covariance.mincovdet method)": [[477, "sklearn.covariance.MinCovDet.set_score_request", false]], "set_score_request() (sklearn.covariance.oas method)": [[478, "sklearn.covariance.OAS.set_score_request", false]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[479, "sklearn.covariance.ShrunkCovariance.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[555, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[556, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[558, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[559, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[560, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[561, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[562, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[564, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[566, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[568, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[569, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[572, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[574, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[805, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[806, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[811, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[813, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[822, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[537, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[586, "sklearn.feature_extraction.FeatureHasher.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[594, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[680, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[681, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[682, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[907, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[484, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[479, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[978, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[821, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[781, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[796, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[797, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[634, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[958, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[3, "module-sklearn", false]], "sklearn.base": [[4, "module-sklearn.base", false]], "sklearn.calibration": [[5, "module-sklearn.calibration", false]], "sklearn.cluster": [[6, "module-sklearn.cluster", false]], "sklearn.compose": [[7, "module-sklearn.compose", false]], "sklearn.covariance": [[8, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[9, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[10, "module-sklearn.datasets", false]], "sklearn.decomposition": [[11, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[12, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[13, "module-sklearn.dummy", false]], "sklearn.ensemble": [[14, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[15, "module-sklearn.exceptions", false]], "sklearn.experimental": [[16, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[583, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[584, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[17, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[17, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[17, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[18, "module-sklearn.feature_selection", false]], "sklearn.gaussian_process": [[19, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[19, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[20, "module-sklearn.impute", false]], "sklearn.inspection": [[21, "module-sklearn.inspection", false]], "sklearn.isotonic": [[22, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[23, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[24, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[25, "module-sklearn.linear_model", false]], "sklearn.manifold": [[26, "module-sklearn.manifold", false]], "sklearn.metrics": [[27, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[27, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[27, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[28, "module-sklearn.mixture", false]], "sklearn.model_selection": [[29, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[30, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[31, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[32, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[33, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[34, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[35, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[36, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[37, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[38, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[39, "module-sklearn.svm", false]], "sklearn.tree": [[40, "module-sklearn.tree", false]], "sklearn.utils": [[41, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[41, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[41, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[41, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[41, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[41, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[41, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[41, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[41, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[41, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[41, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[41, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[41, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[41, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[41, "module-sklearn.utils.validation", false]], "slep": [[393, "term-SLEP", true]], "sleps": [[393, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[698, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[863, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[393, "term-sparse-graph", true]], "sparse matrix": [[393, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[650, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[656, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[664, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[666, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[552, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[546, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[547, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[901, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[465, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[699, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[454, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[455, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[456, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[695, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[887, "sklearn.preprocessing.SplineTransformer", false]], "split": [[393, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[805, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[806, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[809, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[811, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[812, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[813, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[814, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[817, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[819, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[820, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[821, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[822, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[823, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[824, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[825, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[571, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[572, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[558, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[564, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[566, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[563, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[565, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[557, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[558, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[888, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[393, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[822, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[823, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[824, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[628, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[393, "term-supervised", true]], "supervised learning": [[393, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[913, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[914, "sklearn.svm.SVR", false]], "tags (class in sklearn.utils)": [[927, "sklearn.utils.Tags", false]], "target": [[393, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[889, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[393, "term-targets", true]], "targettags (class in sklearn.utils)": [[928, "sklearn.utils.TargetTags", false]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[594, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[683, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[618, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[622, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[623, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[625, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[626, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[628, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[601, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[825, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[798, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[834, "sklearn.model_selection.train_test_split", false]], "transduction": [[393, "term-transduction", true]], "transductive": [[393, "term-transductive", true]], "transform": [[393, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[445, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[446, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[448, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[450, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[452, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[467, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[485, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[486, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[487, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[488, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[535, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[536, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[537, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[538, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[539, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[540, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[541, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[542, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[543, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[544, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[545, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[546, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[547, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[548, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[570, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[571, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[572, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[573, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[574, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[585, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[586, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[587, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[592, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[593, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[594, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[595, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[596, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[597, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[598, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[599, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[600, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[601, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[602, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[603, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[605, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[604, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[606, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[607, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[468, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[393, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[435, "sklearn.base.TransformerMixin", false]], "transformers": [[393, "term-transformers", true]], "transformertags (class in sklearn.utils)": [[929, "sklearn.utils.TransformerTags", false]], "truncatedsvd (class in sklearn.decomposition)": [[548, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[700, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[696, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[684, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[967, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning": [[582, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[968, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[393, "term-unlabeled", true]], "unlabeled data": [[393, "term-unlabeled-data", true]], "unsupervised": [[393, "term-unsupervised", true]], "unsupervised learning": [[393, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[799, "sklearn.metrics.v_measure_score", false]], "validate_data() (in module sklearn.utils.validation)": [[993, "sklearn.utils.validation.validate_data", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[961, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[835, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[827, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[607, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[393, "term-vectorizer", true]], "vectorizers": [[393, "term-vectorizers", true]], "verbose": [[393, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[573, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[574, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[466, "sklearn.cluster.ward_tree", false]], "warm_start": [[393, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[954, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "x": [[393, "term-X", true]], "xt": [[393, "term-Xt", true]], "y": [[393, "term-Y", true], [393, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[800, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[3, 0, 0, "-", "sklearn"]], "sklearn": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "calibration"], [6, 0, 0, "-", "cluster"], [7, 0, 0, "-", "compose"], [471, 4, 1, "", "config_context"], [8, 0, 0, "-", "covariance"], [9, 0, 0, "-", "cross_decomposition"], [10, 0, 0, "-", "datasets"], [11, 0, 0, "-", "decomposition"], [12, 0, 0, "-", "discriminant_analysis"], [13, 0, 0, "-", "dummy"], [14, 0, 0, "-", "ensemble"], [15, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "experimental"], [17, 0, 0, "-", "feature_extraction"], [18, 0, 0, "-", "feature_selection"], [19, 0, 0, "-", "gaussian_process"], [630, 4, 1, "", "get_config"], [20, 0, 0, "-", "impute"], [21, 0, 0, "-", "inspection"], [22, 0, 0, "-", "isotonic"], [23, 0, 0, "-", "kernel_approximation"], [24, 0, 0, "-", "kernel_ridge"], [25, 0, 0, "-", "linear_model"], [26, 0, 0, "-", "manifold"], [27, 0, 0, "-", "metrics"], [28, 0, 0, "-", "mixture"], [29, 0, 0, "-", "model_selection"], [30, 0, 0, "-", "multiclass"], [31, 0, 0, "-", "multioutput"], [32, 0, 0, "-", "naive_bayes"], [33, 0, 0, "-", "neighbors"], [34, 0, 0, "-", "neural_network"], [35, 0, 0, "-", "pipeline"], [36, 0, 0, "-", "preprocessing"], [37, 0, 0, "-", "random_projection"], [38, 0, 0, "-", "semi_supervised"], [906, 4, 1, "", "set_config"], [907, 4, 1, "", "show_versions"], [39, 0, 0, "-", "svm"], [40, 0, 0, "-", "tree"], [41, 0, 0, "-", "utils"]], "sklearn.base": [[425, 1, 1, "", "BaseEstimator"], [426, 1, 1, "", "BiclusterMixin"], [427, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [428, 1, 1, "", "ClassifierMixin"], [429, 1, 1, "", "ClusterMixin"], [430, 1, 1, "", "DensityMixin"], [431, 1, 1, "", "MetaEstimatorMixin"], [432, 1, 1, "", "OneToOneFeatureMixin"], [433, 1, 1, "", "OutlierMixin"], [434, 1, 1, "", "RegressorMixin"], [435, 1, 1, "", "TransformerMixin"], [436, 4, 1, "", "clone"], [437, 4, 1, "", "is_classifier"], [438, 4, 1, "", "is_clusterer"], [439, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[425, 2, 1, "", "get_metadata_routing"], [425, 2, 1, "", "get_params"], [425, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[426, 3, 1, "", "biclusters_"], [426, 2, 1, "", "get_indices"], [426, 2, 1, "", "get_shape"], [426, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[427, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[428, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[429, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[430, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[432, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[433, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[434, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[435, 2, 1, "", "fit_transform"], [435, 2, 1, "", "set_output"]], "sklearn.calibration": [[440, 1, 1, "", "CalibratedClassifierCV"], [441, 1, 1, "", "CalibrationDisplay"], [442, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "predict"], [440, 2, 1, "", "predict_proba"], [440, 2, 1, "", "score"], [440, 2, 1, "", "set_fit_request"], [440, 2, 1, "", "set_params"], [440, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[441, 2, 1, "", "from_estimator"], [441, 2, 1, "", "from_predictions"], [441, 2, 1, "", "plot"]], "sklearn.cluster": [[443, 1, 1, "", "AffinityPropagation"], [444, 1, 1, "", "AgglomerativeClustering"], [445, 1, 1, "", "Birch"], [446, 1, 1, "", "BisectingKMeans"], [447, 1, 1, "", "DBSCAN"], [448, 1, 1, "", "FeatureAgglomeration"], [449, 1, 1, "", "HDBSCAN"], [450, 1, 1, "", "KMeans"], [451, 1, 1, "", "MeanShift"], [452, 1, 1, "", "MiniBatchKMeans"], [453, 1, 1, "", "OPTICS"], [454, 1, 1, "", "SpectralBiclustering"], [455, 1, 1, "", "SpectralClustering"], [456, 1, 1, "", "SpectralCoclustering"], [457, 4, 1, "", "affinity_propagation"], [458, 4, 1, "", "cluster_optics_dbscan"], [459, 4, 1, "", "cluster_optics_xi"], [460, 4, 1, "", "compute_optics_graph"], [422, 4, 1, "", "dbscan"], [461, 4, 1, "", "estimate_bandwidth"], [462, 4, 1, "", "k_means"], [463, 4, 1, "", "kmeans_plusplus"], [464, 4, 1, "", "mean_shift"], [465, 4, 1, "", "spectral_clustering"], [466, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "predict"], [443, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "fit_transform"], [445, 2, 1, "", "get_feature_names_out"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "partial_fit"], [445, 2, 1, "", "predict"], [445, 2, 1, "", "set_output"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_feature_names_out"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "predict"], [446, 2, 1, "", "score"], [446, 2, 1, "", "set_fit_request"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "set_score_request"], [446, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "set_fit_request"], [447, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[448, 2, 1, "", "fit"], [448, 3, 1, "", "fit_predict"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "get_feature_names_out"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "inverse_transform"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[449, 2, 1, "", "dbscan_clustering"], [449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "fit_transform"], [450, 2, 1, "", "get_feature_names_out"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "predict"], [450, 2, 1, "", "score"], [450, 2, 1, "", "set_fit_request"], [450, 2, 1, "", "set_output"], [450, 2, 1, "", "set_params"], [450, 2, 1, "", "set_score_request"], [450, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[451, 2, 1, "", "fit"], [451, 2, 1, "", "fit_predict"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "predict"], [451, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[452, 2, 1, "", "fit"], [452, 2, 1, "", "fit_predict"], [452, 2, 1, "", "fit_transform"], [452, 2, 1, "", "get_feature_names_out"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "partial_fit"], [452, 2, 1, "", "predict"], [452, 2, 1, "", "score"], [452, 2, 1, "", "set_fit_request"], [452, 2, 1, "", "set_output"], [452, 2, 1, "", "set_params"], [452, 2, 1, "", "set_partial_fit_request"], [452, 2, 1, "", "set_score_request"], [452, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[453, 2, 1, "", "fit"], [453, 2, 1, "", "fit_predict"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[454, 3, 1, "", "biclusters_"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "get_indices"], [454, 2, 1, "", "get_metadata_routing"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "get_shape"], [454, 2, 1, "", "get_submatrix"], [454, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[455, 2, 1, "", "fit"], [455, 2, 1, "", "fit_predict"], [455, 2, 1, "", "get_metadata_routing"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[456, 3, 1, "", "biclusters_"], [456, 2, 1, "", "fit"], [456, 2, 1, "", "get_indices"], [456, 2, 1, "", "get_metadata_routing"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "get_shape"], [456, 2, 1, "", "get_submatrix"], [456, 2, 1, "", "set_params"]], "sklearn.compose": [[467, 1, 1, "", "ColumnTransformer"], [468, 1, 1, "", "TransformedTargetRegressor"], [469, 1, 1, "", "make_column_selector"], [470, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[467, 2, 1, "", "fit"], [467, 2, 1, "", "fit_transform"], [467, 2, 1, "", "get_feature_names_out"], [467, 2, 1, "", "get_metadata_routing"], [467, 2, 1, "", "get_params"], [467, 3, 1, "", "named_transformers_"], [467, 2, 1, "", "set_output"], [467, 2, 1, "", "set_params"], [467, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[468, 2, 1, "", "fit"], [468, 2, 1, "", "get_metadata_routing"], [468, 2, 1, "", "get_params"], [468, 3, 1, "", "n_features_in_"], [468, 2, 1, "", "predict"], [468, 2, 1, "", "score"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[469, 2, 1, "", "__call__"]], "sklearn.covariance": [[472, 1, 1, "", "EllipticEnvelope"], [473, 1, 1, "", "EmpiricalCovariance"], [474, 1, 1, "", "GraphicalLasso"], [475, 1, 1, "", "GraphicalLassoCV"], [476, 1, 1, "", "LedoitWolf"], [477, 1, 1, "", "MinCovDet"], [478, 1, 1, "", "OAS"], [479, 1, 1, "", "ShrunkCovariance"], [480, 4, 1, "", "empirical_covariance"], [481, 4, 1, "", "graphical_lasso"], [482, 4, 1, "", "ledoit_wolf"], [483, 4, 1, "", "ledoit_wolf_shrinkage"], [424, 4, 1, "", "oas"], [484, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[472, 2, 1, "", "correct_covariance"], [472, 2, 1, "", "decision_function"], [472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "fit_predict"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "predict"], [472, 2, 1, "", "reweight_covariance"], [472, 2, 1, "", "score"], [472, 2, 1, "", "score_samples"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[477, 2, 1, "", "correct_covariance"], [477, 2, 1, "", "error_norm"], [477, 2, 1, "", "fit"], [477, 2, 1, "", "get_metadata_routing"], [477, 2, 1, "", "get_params"], [477, 2, 1, "", "get_precision"], [477, 2, 1, "", "mahalanobis"], [477, 2, 1, "", "reweight_covariance"], [477, 2, 1, "", "score"], [477, 2, 1, "", "set_params"], [477, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[478, 2, 1, "", "error_norm"], [478, 2, 1, "", "fit"], [478, 2, 1, "", "get_metadata_routing"], [478, 2, 1, "", "get_params"], [478, 2, 1, "", "get_precision"], [478, 2, 1, "", "mahalanobis"], [478, 2, 1, "", "score"], [478, 2, 1, "", "set_params"], [478, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[479, 2, 1, "", "error_norm"], [479, 2, 1, "", "fit"], [479, 2, 1, "", "get_metadata_routing"], [479, 2, 1, "", "get_params"], [479, 2, 1, "", "get_precision"], [479, 2, 1, "", "mahalanobis"], [479, 2, 1, "", "score"], [479, 2, 1, "", "set_params"], [479, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[485, 1, 1, "", "CCA"], [486, 1, 1, "", "PLSCanonical"], [487, 1, 1, "", "PLSRegression"], [488, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[485, 2, 1, "", "fit"], [485, 2, 1, "", "fit_transform"], [485, 2, 1, "", "get_feature_names_out"], [485, 2, 1, "", "get_metadata_routing"], [485, 2, 1, "", "get_params"], [485, 2, 1, "", "inverse_transform"], [485, 2, 1, "", "predict"], [485, 2, 1, "", "score"], [485, 2, 1, "", "set_output"], [485, 2, 1, "", "set_params"], [485, 2, 1, "", "set_predict_request"], [485, 2, 1, "", "set_score_request"], [485, 2, 1, "", "set_transform_request"], [485, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[486, 2, 1, "", "fit"], [486, 2, 1, "", "fit_transform"], [486, 2, 1, "", "get_feature_names_out"], [486, 2, 1, "", "get_metadata_routing"], [486, 2, 1, "", "get_params"], [486, 2, 1, "", "inverse_transform"], [486, 2, 1, "", "predict"], [486, 2, 1, "", "score"], [486, 2, 1, "", "set_output"], [486, 2, 1, "", "set_params"], [486, 2, 1, "", "set_predict_request"], [486, 2, 1, "", "set_score_request"], [486, 2, 1, "", "set_transform_request"], [486, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[487, 2, 1, "", "fit"], [487, 2, 1, "", "fit_transform"], [487, 2, 1, "", "get_feature_names_out"], [487, 2, 1, "", "get_metadata_routing"], [487, 2, 1, "", "get_params"], [487, 2, 1, "", "inverse_transform"], [487, 2, 1, "", "predict"], [487, 2, 1, "", "score"], [487, 2, 1, "", "set_output"], [487, 2, 1, "", "set_params"], [487, 2, 1, "", "set_predict_request"], [487, 2, 1, "", "set_score_request"], [487, 2, 1, "", "set_transform_request"], [487, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[488, 2, 1, "", "fit"], [488, 2, 1, "", "fit_transform"], [488, 2, 1, "", "get_feature_names_out"], [488, 2, 1, "", "get_metadata_routing"], [488, 2, 1, "", "get_params"], [488, 2, 1, "", "set_output"], [488, 2, 1, "", "set_params"], [488, 2, 1, "", "transform"]], "sklearn.datasets": [[489, 4, 1, "", "clear_data_home"], [490, 4, 1, "", "dump_svmlight_file"], [491, 4, 1, "", "fetch_20newsgroups"], [492, 4, 1, "", "fetch_20newsgroups_vectorized"], [493, 4, 1, "", "fetch_california_housing"], [494, 4, 1, "", "fetch_covtype"], [495, 4, 1, "", "fetch_file"], [496, 4, 1, "", "fetch_kddcup99"], [497, 4, 1, "", "fetch_lfw_pairs"], [498, 4, 1, "", "fetch_lfw_people"], [499, 4, 1, "", "fetch_olivetti_faces"], [500, 4, 1, "", "fetch_openml"], [501, 4, 1, "", "fetch_rcv1"], [502, 4, 1, "", "fetch_species_distributions"], [503, 4, 1, "", "get_data_home"], [504, 4, 1, "", "load_breast_cancer"], [505, 4, 1, "", "load_diabetes"], [506, 4, 1, "", "load_digits"], [507, 4, 1, "", "load_files"], [508, 4, 1, "", "load_iris"], [509, 4, 1, "", "load_linnerud"], [510, 4, 1, "", "load_sample_image"], [511, 4, 1, "", "load_sample_images"], [512, 4, 1, "", "load_svmlight_file"], [513, 4, 1, "", "load_svmlight_files"], [514, 4, 1, "", "load_wine"], [515, 4, 1, "", "make_biclusters"], [516, 4, 1, "", "make_blobs"], [517, 4, 1, "", "make_checkerboard"], [518, 4, 1, "", "make_circles"], [519, 4, 1, "", "make_classification"], [520, 4, 1, "", "make_friedman1"], [521, 4, 1, "", "make_friedman2"], [522, 4, 1, "", "make_friedman3"], [523, 4, 1, "", "make_gaussian_quantiles"], [524, 4, 1, "", "make_hastie_10_2"], [525, 4, 1, "", "make_low_rank_matrix"], [526, 4, 1, "", "make_moons"], [527, 4, 1, "", "make_multilabel_classification"], [528, 4, 1, "", "make_regression"], [529, 4, 1, "", "make_s_curve"], [530, 4, 1, "", "make_sparse_coded_signal"], [531, 4, 1, "", "make_sparse_spd_matrix"], [532, 4, 1, "", "make_sparse_uncorrelated"], [533, 4, 1, "", "make_spd_matrix"], [534, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[535, 1, 1, "", "DictionaryLearning"], [536, 1, 1, "", "FactorAnalysis"], [537, 1, 1, "", "FastICA"], [538, 1, 1, "", "IncrementalPCA"], [539, 1, 1, "", "KernelPCA"], [540, 1, 1, "", "LatentDirichletAllocation"], [541, 1, 1, "", "MiniBatchDictionaryLearning"], [542, 1, 1, "", "MiniBatchNMF"], [543, 1, 1, "", "MiniBatchSparsePCA"], [544, 1, 1, "", "NMF"], [545, 1, 1, "", "PCA"], [546, 1, 1, "", "SparseCoder"], [547, 1, 1, "", "SparsePCA"], [548, 1, 1, "", "TruncatedSVD"], [549, 4, 1, "", "dict_learning"], [550, 4, 1, "", "dict_learning_online"], [423, 4, 1, "", "fastica"], [551, 4, 1, "", "non_negative_factorization"], [552, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_covariance"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "get_precision"], [536, 2, 1, "", "score"], [536, 2, 1, "", "score_samples"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "inverse_transform"], [537, 2, 1, "", "set_inverse_transform_request"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "set_transform_request"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_covariance"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "get_precision"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "partial_fit"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "set_partial_fit_request"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "partial_fit"], [540, 2, 1, "", "perplexity"], [540, 2, 1, "", "score"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "partial_fit"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "partial_fit"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_covariance"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "get_precision"], [545, 2, 1, "", "inverse_transform"], [545, 2, 1, "", "score"], [545, 2, 1, "", "score_samples"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 3, 1, "", "n_components_"], [546, 3, 1, "", "n_features_in_"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "inverse_transform"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "inverse_transform"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[553, 1, 1, "", "LinearDiscriminantAnalysis"], [554, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[553, 2, 1, "", "decision_function"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "fit_transform"], [553, 2, 1, "", "get_feature_names_out"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_log_proba"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_output"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"], [553, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[554, 2, 1, "", "decision_function"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "predict_log_proba"], [554, 2, 1, "", "predict_proba"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[555, 1, 1, "", "DummyClassifier"], [556, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_predict_request"], [556, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[557, 1, 1, "", "AdaBoostClassifier"], [558, 1, 1, "", "AdaBoostRegressor"], [559, 1, 1, "", "BaggingClassifier"], [560, 1, 1, "", "BaggingRegressor"], [561, 1, 1, "", "ExtraTreesClassifier"], [562, 1, 1, "", "ExtraTreesRegressor"], [563, 1, 1, "", "GradientBoostingClassifier"], [564, 1, 1, "", "GradientBoostingRegressor"], [565, 1, 1, "", "HistGradientBoostingClassifier"], [566, 1, 1, "", "HistGradientBoostingRegressor"], [567, 1, 1, "", "IsolationForest"], [568, 1, 1, "", "RandomForestClassifier"], [569, 1, 1, "", "RandomForestRegressor"], [570, 1, 1, "", "RandomTreesEmbedding"], [571, 1, 1, "", "StackingClassifier"], [572, 1, 1, "", "StackingRegressor"], [573, 1, 1, "", "VotingClassifier"], [574, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[557, 2, 1, "", "decision_function"], [557, 3, 1, "", "feature_importances_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"], [557, 2, 1, "", "staged_decision_function"], [557, 2, 1, "", "staged_predict"], [557, 2, 1, "", "staged_predict_proba"], [557, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"], [558, 2, 1, "", "staged_predict"], [558, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[559, 2, 1, "", "decision_function"], [559, 3, 1, "", "estimators_samples_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "predict_log_proba"], [559, 2, 1, "", "predict_proba"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[560, 3, 1, "", "estimators_samples_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[561, 2, 1, "", "apply"], [561, 2, 1, "", "decision_path"], [561, 3, 1, "", "estimators_samples_"], [561, 3, 1, "", "feature_importances_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "predict_log_proba"], [561, 2, 1, "", "predict_proba"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[562, 2, 1, "", "apply"], [562, 2, 1, "", "decision_path"], [562, 3, 1, "", "estimators_samples_"], [562, 3, 1, "", "feature_importances_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[563, 2, 1, "", "apply"], [563, 2, 1, "", "decision_function"], [563, 3, 1, "", "feature_importances_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "predict_log_proba"], [563, 2, 1, "", "predict_proba"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"], [563, 2, 1, "", "staged_decision_function"], [563, 2, 1, "", "staged_predict"], [563, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[564, 2, 1, "", "apply"], [564, 3, 1, "", "feature_importances_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"], [564, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[565, 2, 1, "", "decision_function"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 3, 1, "", "n_iter_"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "predict_proba"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"], [565, 2, 1, "", "staged_decision_function"], [565, 2, 1, "", "staged_predict"], [565, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[566, 2, 1, "", "fit"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 3, 1, "", "n_iter_"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"], [566, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[567, 2, 1, "", "decision_function"], [567, 3, 1, "", "estimators_samples_"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_predict"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "score_samples"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[568, 2, 1, "", "apply"], [568, 2, 1, "", "decision_path"], [568, 3, 1, "", "estimators_samples_"], [568, 3, 1, "", "feature_importances_"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "predict_log_proba"], [568, 2, 1, "", "predict_proba"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[569, 2, 1, "", "apply"], [569, 2, 1, "", "decision_path"], [569, 3, 1, "", "estimators_samples_"], [569, 3, 1, "", "feature_importances_"], [569, 2, 1, "", "fit"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[570, 2, 1, "", "apply"], [570, 2, 1, "", "decision_path"], [570, 3, 1, "", "estimators_samples_"], [570, 3, 1, "", "feature_importances_"], [570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[571, 2, 1, "", "decision_function"], [571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 3, 1, "", "n_features_in_"], [571, 3, 1, "", "named_estimators"], [571, 2, 1, "", "predict"], [571, 2, 1, "", "predict_proba"], [571, 2, 1, "", "score"], [571, 2, 1, "", "set_fit_request"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "set_score_request"], [571, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_feature_names_out"], [572, 2, 1, "", "get_metadata_routing"], [572, 2, 1, "", "get_params"], [572, 3, 1, "", "n_features_in_"], [572, 3, 1, "", "named_estimators"], [572, 2, 1, "", "predict"], [572, 2, 1, "", "score"], [572, 2, 1, "", "set_fit_request"], [572, 2, 1, "", "set_output"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "set_score_request"], [572, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_metadata_routing"], [573, 2, 1, "", "get_params"], [573, 3, 1, "", "n_features_in_"], [573, 3, 1, "", "named_estimators"], [573, 2, 1, "", "predict"], [573, 2, 1, "", "predict_proba"], [573, 2, 1, "", "score"], [573, 2, 1, "", "set_fit_request"], [573, 2, 1, "", "set_output"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "set_score_request"], [573, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_metadata_routing"], [574, 2, 1, "", "get_params"], [574, 3, 1, "", "n_features_in_"], [574, 3, 1, "", "named_estimators"], [574, 2, 1, "", "predict"], [574, 2, 1, "", "score"], [574, 2, 1, "", "set_fit_request"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "set_score_request"], [574, 2, 1, "", "transform"]], "sklearn.exceptions": [[575, 5, 1, "", "ConvergenceWarning"], [576, 5, 1, "", "DataConversionWarning"], [577, 5, 1, "", "DataDimensionalityWarning"], [578, 5, 1, "", "EfficiencyWarning"], [579, 5, 1, "", "FitFailedWarning"], [580, 5, 1, "", "InconsistentVersionWarning"], [581, 5, 1, "", "NotFittedError"], [582, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[583, 0, 0, "-", "enable_halving_search_cv"], [584, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[585, 1, 1, "", "DictVectorizer"], [586, 1, 1, "", "FeatureHasher"], [17, 0, 0, "-", "image"], [17, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_feature_names_out"], [585, 2, 1, "", "get_metadata_routing"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "inverse_transform"], [585, 2, 1, "", "restrict"], [585, 2, 1, "", "set_inverse_transform_request"], [585, 2, 1, "", "set_output"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "set_transform_request"], [586, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[587, 1, 1, "", "PatchExtractor"], [588, 4, 1, "", "extract_patches_2d"], [589, 4, 1, "", "grid_to_graph"], [590, 4, 1, "", "img_to_graph"], [591, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[592, 1, 1, "", "CountVectorizer"], [593, 1, 1, "", "HashingVectorizer"], [594, 1, 1, "", "TfidfTransformer"], [595, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[592, 2, 1, "", "build_analyzer"], [592, 2, 1, "", "build_preprocessor"], [592, 2, 1, "", "build_tokenizer"], [592, 2, 1, "", "decode"], [592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_stop_words"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "set_fit_request"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "set_transform_request"], [592, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[593, 2, 1, "", "build_analyzer"], [593, 2, 1, "", "build_preprocessor"], [593, 2, 1, "", "build_tokenizer"], [593, 2, 1, "", "decode"], [593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_stop_words"], [593, 2, 1, "", "partial_fit"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "set_transform_request"], [594, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[595, 2, 1, "", "build_analyzer"], [595, 2, 1, "", "build_preprocessor"], [595, 2, 1, "", "build_tokenizer"], [595, 2, 1, "", "decode"], [595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_stop_words"], [595, 3, 1, "", "idf_"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_fit_request"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "set_transform_request"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection": [[596, 1, 1, "", "GenericUnivariateSelect"], [597, 1, 1, "", "RFE"], [598, 1, 1, "", "RFECV"], [599, 1, 1, "", "SelectFdr"], [600, 1, 1, "", "SelectFpr"], [601, 1, 1, "", "SelectFromModel"], [602, 1, 1, "", "SelectFwe"], [603, 1, 1, "", "SelectKBest"], [604, 1, 1, "", "SelectPercentile"], [605, 1, 1, "", "SelectorMixin"], [606, 1, 1, "", "SequentialFeatureSelector"], [607, 1, 1, "", "VarianceThreshold"], [608, 4, 1, "", "chi2"], [609, 4, 1, "", "f_classif"], [610, 4, 1, "", "f_regression"], [611, 4, 1, "", "mutual_info_classif"], [612, 4, 1, "", "mutual_info_regression"], [613, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[597, 3, 1, "", "classes_"], [597, 2, 1, "", "decision_function"], [597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "predict"], [597, 2, 1, "", "predict_log_proba"], [597, 2, 1, "", "predict_proba"], [597, 2, 1, "", "score"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[598, 3, 1, "", "classes_"], [598, 2, 1, "", "decision_function"], [598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "predict"], [598, 2, 1, "", "predict_log_proba"], [598, 2, 1, "", "predict_proba"], [598, 2, 1, "", "score"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 3, 1, "", "n_features_in_"], [601, 2, 1, "", "partial_fit"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 3, 1, "", "threshold_"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "get_support"], [604, 2, 1, "", "inverse_transform"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_support"], [605, 2, 1, "", "inverse_transform"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_metadata_routing"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "get_support"], [606, 2, 1, "", "inverse_transform"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "set_params"], [606, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "fit_transform"], [607, 2, 1, "", "get_feature_names_out"], [607, 2, 1, "", "get_metadata_routing"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "get_support"], [607, 2, 1, "", "inverse_transform"], [607, 2, 1, "", "set_output"], [607, 2, 1, "", "set_params"], [607, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[614, 1, 1, "", "GaussianProcessClassifier"], [615, 1, 1, "", "GaussianProcessRegressor"], [19, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[614, 2, 1, "", "fit"], [614, 2, 1, "", "get_metadata_routing"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "kernel_"], [614, 2, 1, "", "log_marginal_likelihood"], [614, 2, 1, "", "predict"], [614, 2, 1, "", "predict_proba"], [614, 2, 1, "", "score"], [614, 2, 1, "", "set_params"], [614, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[615, 2, 1, "", "fit"], [615, 2, 1, "", "get_metadata_routing"], [615, 2, 1, "", "get_params"], [615, 2, 1, "", "log_marginal_likelihood"], [615, 2, 1, "", "predict"], [615, 2, 1, "", "sample_y"], [615, 2, 1, "", "score"], [615, 2, 1, "", "set_params"], [615, 2, 1, "", "set_predict_request"], [615, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[616, 1, 1, "", "CompoundKernel"], [617, 1, 1, "", "ConstantKernel"], [618, 1, 1, "", "DotProduct"], [619, 1, 1, "", "ExpSineSquared"], [620, 1, 1, "", "Exponentiation"], [621, 1, 1, "", "Hyperparameter"], [622, 1, 1, "", "Kernel"], [623, 1, 1, "", "Matern"], [624, 1, 1, "", "PairwiseKernel"], [625, 1, 1, "", "Product"], [626, 1, 1, "", "RBF"], [627, 1, 1, "", "RationalQuadratic"], [628, 1, 1, "", "Sum"], [629, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameter_length_scale"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[621, 6, 1, "", "bounds"], [621, 2, 1, "", "count"], [621, 6, 1, "", "fixed"], [621, 2, 1, "", "index"], [621, 6, 1, "", "n_elements"], [621, 6, 1, "", "name"], [621, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[626, 2, 1, "", "__call__"], [626, 3, 1, "", "bounds"], [626, 2, 1, "", "clone_with_theta"], [626, 2, 1, "", "diag"], [626, 2, 1, "", "get_params"], [626, 3, 1, "", "hyperparameters"], [626, 2, 1, "", "is_stationary"], [626, 3, 1, "", "n_dims"], [626, 3, 1, "", "requires_vector_input"], [626, 2, 1, "", "set_params"], [626, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[627, 2, 1, "", "__call__"], [627, 3, 1, "", "bounds"], [627, 2, 1, "", "clone_with_theta"], [627, 2, 1, "", "diag"], [627, 2, 1, "", "get_params"], [627, 3, 1, "", "hyperparameters"], [627, 2, 1, "", "is_stationary"], [627, 3, 1, "", "n_dims"], [627, 3, 1, "", "requires_vector_input"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[628, 2, 1, "", "__call__"], [628, 3, 1, "", "bounds"], [628, 2, 1, "", "clone_with_theta"], [628, 2, 1, "", "diag"], [628, 2, 1, "", "get_params"], [628, 3, 1, "", "hyperparameters"], [628, 2, 1, "", "is_stationary"], [628, 3, 1, "", "n_dims"], [628, 3, 1, "", "requires_vector_input"], [628, 2, 1, "", "set_params"], [628, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[629, 2, 1, "", "__call__"], [629, 3, 1, "", "bounds"], [629, 2, 1, "", "clone_with_theta"], [629, 2, 1, "", "diag"], [629, 2, 1, "", "get_params"], [629, 3, 1, "", "hyperparameters"], [629, 2, 1, "", "is_stationary"], [629, 3, 1, "", "n_dims"], [629, 3, 1, "", "requires_vector_input"], [629, 2, 1, "", "set_params"], [629, 3, 1, "", "theta"]], "sklearn.impute": [[631, 1, 1, "", "IterativeImputer"], [632, 1, 1, "", "KNNImputer"], [633, 1, 1, "", "MissingIndicator"], [634, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "fit_transform"], [631, 2, 1, "", "get_feature_names_out"], [631, 2, 1, "", "get_metadata_routing"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "set_output"], [631, 2, 1, "", "set_params"], [631, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "fit_transform"], [632, 2, 1, "", "get_feature_names_out"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "set_output"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "fit_transform"], [633, 2, 1, "", "get_feature_names_out"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "set_output"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "fit_transform"], [634, 2, 1, "", "get_feature_names_out"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "inverse_transform"], [634, 2, 1, "", "set_output"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "transform"]], "sklearn.inspection": [[635, 1, 1, "", "DecisionBoundaryDisplay"], [636, 1, 1, "", "PartialDependenceDisplay"], [637, 4, 1, "", "partial_dependence"], [638, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[635, 2, 1, "", "from_estimator"], [635, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[636, 2, 1, "", "from_estimator"], [636, 2, 1, "", "plot"]], "sklearn.isotonic": [[639, 1, 1, "", "IsotonicRegression"], [640, 4, 1, "", "check_increasing"], [641, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_fit_request"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "set_predict_request"], [639, 2, 1, "", "set_score_request"], [639, 2, 1, "", "set_transform_request"], [639, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[642, 1, 1, "", "AdditiveChi2Sampler"], [643, 1, 1, "", "Nystroem"], [644, 1, 1, "", "PolynomialCountSketch"], [645, 1, 1, "", "RBFSampler"], [646, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_feature_names_out"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "set_output"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "fit_transform"], [643, 2, 1, "", "get_feature_names_out"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "set_output"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "fit_transform"], [644, 2, 1, "", "get_feature_names_out"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "set_output"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "fit_transform"], [645, 2, 1, "", "get_feature_names_out"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "set_output"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "fit_transform"], [646, 2, 1, "", "get_feature_names_out"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "set_output"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[647, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[648, 1, 1, "", "ARDRegression"], [649, 1, 1, "", "BayesianRidge"], [650, 1, 1, "", "ElasticNet"], [651, 1, 1, "", "ElasticNetCV"], [652, 1, 1, "", "GammaRegressor"], [653, 1, 1, "", "HuberRegressor"], [654, 1, 1, "", "Lars"], [655, 1, 1, "", "LarsCV"], [656, 1, 1, "", "Lasso"], [657, 1, 1, "", "LassoCV"], [658, 1, 1, "", "LassoLars"], [659, 1, 1, "", "LassoLarsCV"], [660, 1, 1, "", "LassoLarsIC"], [661, 1, 1, "", "LinearRegression"], [662, 1, 1, "", "LogisticRegression"], [663, 1, 1, "", "LogisticRegressionCV"], [664, 1, 1, "", "MultiTaskElasticNet"], [665, 1, 1, "", "MultiTaskElasticNetCV"], [666, 1, 1, "", "MultiTaskLasso"], [667, 1, 1, "", "MultiTaskLassoCV"], [668, 1, 1, "", "OrthogonalMatchingPursuit"], [669, 1, 1, "", "OrthogonalMatchingPursuitCV"], [670, 1, 1, "", "PassiveAggressiveClassifier"], [671, 1, 1, "", "PassiveAggressiveRegressor"], [672, 1, 1, "", "Perceptron"], [673, 1, 1, "", "PoissonRegressor"], [674, 1, 1, "", "QuantileRegressor"], [675, 1, 1, "", "RANSACRegressor"], [676, 1, 1, "", "Ridge"], [677, 1, 1, "", "RidgeCV"], [678, 1, 1, "", "RidgeClassifier"], [679, 1, 1, "", "RidgeClassifierCV"], [680, 1, 1, "", "SGDClassifier"], [681, 1, 1, "", "SGDOneClassSVM"], [682, 1, 1, "", "SGDRegressor"], [683, 1, 1, "", "TheilSenRegressor"], [684, 1, 1, "", "TweedieRegressor"], [685, 4, 1, "", "enet_path"], [686, 4, 1, "", "lars_path"], [687, 4, 1, "", "lars_path_gram"], [688, 4, 1, "", "lasso_path"], [689, 4, 1, "", "orthogonal_mp"], [690, 4, 1, "", "orthogonal_mp_gram"], [691, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_predict_request"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_predict_request"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "path"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"], [650, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "path"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "path"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"], [656, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "path"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[662, 2, 1, "", "decision_function"], [662, 2, 1, "", "densify"], [662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "predict_log_proba"], [662, 2, 1, "", "predict_proba"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"], [662, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[663, 2, 1, "", "decision_function"], [663, 2, 1, "", "densify"], [663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "predict_log_proba"], [663, 2, 1, "", "predict_proba"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"], [663, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "path"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"], [664, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "path"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "path"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"], [666, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "path"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[670, 2, 1, "", "decision_function"], [670, 2, 1, "", "densify"], [670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "partial_fit"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_partial_fit_request"], [670, 2, 1, "", "set_score_request"], [670, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[671, 2, 1, "", "densify"], [671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "partial_fit"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_partial_fit_request"], [671, 2, 1, "", "set_score_request"], [671, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[672, 2, 1, "", "decision_function"], [672, 2, 1, "", "densify"], [672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "partial_fit"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_partial_fit_request"], [672, 2, 1, "", "set_score_request"], [672, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[678, 3, 1, "", "classes_"], [678, 2, 1, "", "decision_function"], [678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[679, 3, 1, "", "classes_"], [679, 2, 1, "", "decision_function"], [679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[680, 2, 1, "", "decision_function"], [680, 2, 1, "", "densify"], [680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "partial_fit"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "predict_log_proba"], [680, 2, 1, "", "predict_proba"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_partial_fit_request"], [680, 2, 1, "", "set_score_request"], [680, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[681, 2, 1, "", "decision_function"], [681, 2, 1, "", "densify"], [681, 2, 1, "", "fit"], [681, 2, 1, "", "fit_predict"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "partial_fit"], [681, 2, 1, "", "predict"], [681, 2, 1, "", "score_samples"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "set_partial_fit_request"], [681, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[682, 2, 1, "", "densify"], [682, 2, 1, "", "fit"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "partial_fit"], [682, 2, 1, "", "predict"], [682, 2, 1, "", "score"], [682, 2, 1, "", "set_fit_request"], [682, 2, 1, "", "set_params"], [682, 2, 1, "", "set_partial_fit_request"], [682, 2, 1, "", "set_score_request"], [682, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[683, 2, 1, "", "fit"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "predict"], [683, 2, 1, "", "score"], [683, 2, 1, "", "set_params"], [683, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[684, 2, 1, "", "fit"], [684, 2, 1, "", "get_metadata_routing"], [684, 2, 1, "", "get_params"], [684, 2, 1, "", "predict"], [684, 2, 1, "", "score"], [684, 2, 1, "", "set_fit_request"], [684, 2, 1, "", "set_params"], [684, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[692, 1, 1, "", "Isomap"], [693, 1, 1, "", "LocallyLinearEmbedding"], [694, 1, 1, "", "MDS"], [695, 1, 1, "", "SpectralEmbedding"], [696, 1, 1, "", "TSNE"], [697, 4, 1, "", "locally_linear_embedding"], [698, 4, 1, "", "smacof"], [699, 4, 1, "", "spectral_embedding"], [700, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[692, 2, 1, "", "fit"], [692, 2, 1, "", "fit_transform"], [692, 2, 1, "", "get_feature_names_out"], [692, 2, 1, "", "get_metadata_routing"], [692, 2, 1, "", "get_params"], [692, 2, 1, "", "reconstruction_error"], [692, 2, 1, "", "set_output"], [692, 2, 1, "", "set_params"], [692, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[693, 2, 1, "", "fit"], [693, 2, 1, "", "fit_transform"], [693, 2, 1, "", "get_feature_names_out"], [693, 2, 1, "", "get_metadata_routing"], [693, 2, 1, "", "get_params"], [693, 2, 1, "", "set_output"], [693, 2, 1, "", "set_params"], [693, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[694, 2, 1, "", "fit"], [694, 2, 1, "", "fit_transform"], [694, 2, 1, "", "get_metadata_routing"], [694, 2, 1, "", "get_params"], [694, 2, 1, "", "set_fit_request"], [694, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[695, 2, 1, "", "fit"], [695, 2, 1, "", "fit_transform"], [695, 2, 1, "", "get_metadata_routing"], [695, 2, 1, "", "get_params"], [695, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[696, 2, 1, "", "fit"], [696, 2, 1, "", "fit_transform"], [696, 2, 1, "", "get_feature_names_out"], [696, 2, 1, "", "get_metadata_routing"], [696, 2, 1, "", "get_params"], [696, 2, 1, "", "set_output"], [696, 2, 1, "", "set_params"]], "sklearn.metrics": [[701, 1, 1, "", "ConfusionMatrixDisplay"], [702, 1, 1, "", "DetCurveDisplay"], [703, 1, 1, "", "DistanceMetric"], [704, 1, 1, "", "PrecisionRecallDisplay"], [705, 1, 1, "", "PredictionErrorDisplay"], [706, 1, 1, "", "RocCurveDisplay"], [707, 4, 1, "", "accuracy_score"], [708, 4, 1, "", "adjusted_mutual_info_score"], [709, 4, 1, "", "adjusted_rand_score"], [710, 4, 1, "", "auc"], [711, 4, 1, "", "average_precision_score"], [712, 4, 1, "", "balanced_accuracy_score"], [713, 4, 1, "", "brier_score_loss"], [714, 4, 1, "", "calinski_harabasz_score"], [715, 4, 1, "", "check_scoring"], [716, 4, 1, "", "class_likelihood_ratios"], [717, 4, 1, "", "classification_report"], [27, 0, 0, "-", "cluster"], [720, 4, 1, "", "cohen_kappa_score"], [721, 4, 1, "", "completeness_score"], [722, 4, 1, "", "confusion_matrix"], [723, 4, 1, "", "consensus_score"], [724, 4, 1, "", "coverage_error"], [725, 4, 1, "", "d2_absolute_error_score"], [726, 4, 1, "", "d2_log_loss_score"], [727, 4, 1, "", "d2_pinball_score"], [728, 4, 1, "", "d2_tweedie_score"], [729, 4, 1, "", "davies_bouldin_score"], [730, 4, 1, "", "dcg_score"], [731, 4, 1, "", "det_curve"], [732, 4, 1, "", "explained_variance_score"], [733, 4, 1, "", "f1_score"], [734, 4, 1, "", "fbeta_score"], [735, 4, 1, "", "fowlkes_mallows_score"], [736, 4, 1, "", "get_scorer"], [737, 4, 1, "", "get_scorer_names"], [738, 4, 1, "", "hamming_loss"], [739, 4, 1, "", "hinge_loss"], [740, 4, 1, "", "homogeneity_completeness_v_measure"], [741, 4, 1, "", "homogeneity_score"], [742, 4, 1, "", "jaccard_score"], [743, 4, 1, "", "label_ranking_average_precision_score"], [744, 4, 1, "", "label_ranking_loss"], [745, 4, 1, "", "log_loss"], [746, 4, 1, "", "make_scorer"], [747, 4, 1, "", "matthews_corrcoef"], [748, 4, 1, "", "max_error"], [749, 4, 1, "", "mean_absolute_error"], [750, 4, 1, "", "mean_absolute_percentage_error"], [751, 4, 1, "", "mean_gamma_deviance"], [752, 4, 1, "", "mean_pinball_loss"], [753, 4, 1, "", "mean_poisson_deviance"], [754, 4, 1, "", "mean_squared_error"], [755, 4, 1, "", "mean_squared_log_error"], [756, 4, 1, "", "mean_tweedie_deviance"], [757, 4, 1, "", "median_absolute_error"], [758, 4, 1, "", "multilabel_confusion_matrix"], [759, 4, 1, "", "mutual_info_score"], [760, 4, 1, "", "ndcg_score"], [761, 4, 1, "", "normalized_mutual_info_score"], [27, 0, 0, "-", "pairwise"], [782, 4, 1, "", "pairwise_distances"], [783, 4, 1, "", "pairwise_distances_argmin"], [784, 4, 1, "", "pairwise_distances_argmin_min"], [785, 4, 1, "", "pairwise_distances_chunked"], [786, 4, 1, "", "precision_recall_curve"], [787, 4, 1, "", "precision_recall_fscore_support"], [788, 4, 1, "", "precision_score"], [789, 4, 1, "", "r2_score"], [790, 4, 1, "", "rand_score"], [791, 4, 1, "", "recall_score"], [792, 4, 1, "", "roc_auc_score"], [793, 4, 1, "", "roc_curve"], [794, 4, 1, "", "root_mean_squared_error"], [795, 4, 1, "", "root_mean_squared_log_error"], [796, 4, 1, "", "silhouette_samples"], [797, 4, 1, "", "silhouette_score"], [798, 4, 1, "", "top_k_accuracy_score"], [799, 4, 1, "", "v_measure_score"], [800, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[701, 2, 1, "", "from_estimator"], [701, 2, 1, "", "from_predictions"], [701, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[702, 2, 1, "", "from_estimator"], [702, 2, 1, "", "from_predictions"], [702, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[703, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[704, 2, 1, "", "from_estimator"], [704, 2, 1, "", "from_predictions"], [704, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[705, 2, 1, "", "from_estimator"], [705, 2, 1, "", "from_predictions"], [705, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[706, 2, 1, "", "from_estimator"], [706, 2, 1, "", "from_predictions"], [706, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[718, 4, 1, "", "contingency_matrix"], [719, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[762, 4, 1, "", "additive_chi2_kernel"], [763, 4, 1, "", "chi2_kernel"], [764, 4, 1, "", "cosine_distances"], [765, 4, 1, "", "cosine_similarity"], [766, 4, 1, "", "distance_metrics"], [767, 4, 1, "", "euclidean_distances"], [768, 4, 1, "", "haversine_distances"], [769, 4, 1, "", "kernel_metrics"], [770, 4, 1, "", "laplacian_kernel"], [771, 4, 1, "", "linear_kernel"], [772, 4, 1, "", "manhattan_distances"], [773, 4, 1, "", "nan_euclidean_distances"], [774, 4, 1, "", "paired_cosine_distances"], [775, 4, 1, "", "paired_distances"], [776, 4, 1, "", "paired_euclidean_distances"], [777, 4, 1, "", "paired_manhattan_distances"], [778, 4, 1, "", "pairwise_kernels"], [779, 4, 1, "", "polynomial_kernel"], [780, 4, 1, "", "rbf_kernel"], [781, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[801, 1, 1, "", "BayesianGaussianMixture"], [802, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[801, 2, 1, "", "fit"], [801, 2, 1, "", "fit_predict"], [801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "predict_proba"], [801, 2, 1, "", "sample"], [801, 2, 1, "", "score"], [801, 2, 1, "", "score_samples"], [801, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[802, 2, 1, "", "aic"], [802, 2, 1, "", "bic"], [802, 2, 1, "", "fit"], [802, 2, 1, "", "fit_predict"], [802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_params"], [802, 2, 1, "", "predict"], [802, 2, 1, "", "predict_proba"], [802, 2, 1, "", "sample"], [802, 2, 1, "", "score"], [802, 2, 1, "", "score_samples"], [802, 2, 1, "", "set_params"]], "sklearn.model_selection": [[803, 1, 1, "", "FixedThresholdClassifier"], [804, 1, 1, "", "GridSearchCV"], [805, 1, 1, "", "GroupKFold"], [806, 1, 1, "", "GroupShuffleSplit"], [807, 1, 1, "", "HalvingGridSearchCV"], [808, 1, 1, "", "HalvingRandomSearchCV"], [809, 1, 1, "", "KFold"], [810, 1, 1, "", "LearningCurveDisplay"], [811, 1, 1, "", "LeaveOneGroupOut"], [812, 1, 1, "", "LeaveOneOut"], [813, 1, 1, "", "LeavePGroupsOut"], [814, 1, 1, "", "LeavePOut"], [815, 1, 1, "", "ParameterGrid"], [816, 1, 1, "", "ParameterSampler"], [817, 1, 1, "", "PredefinedSplit"], [818, 1, 1, "", "RandomizedSearchCV"], [819, 1, 1, "", "RepeatedKFold"], [820, 1, 1, "", "RepeatedStratifiedKFold"], [821, 1, 1, "", "ShuffleSplit"], [822, 1, 1, "", "StratifiedGroupKFold"], [823, 1, 1, "", "StratifiedKFold"], [824, 1, 1, "", "StratifiedShuffleSplit"], [825, 1, 1, "", "TimeSeriesSplit"], [826, 1, 1, "", "TunedThresholdClassifierCV"], [827, 1, 1, "", "ValidationCurveDisplay"], [828, 4, 1, "", "check_cv"], [829, 4, 1, "", "cross_val_predict"], [830, 4, 1, "", "cross_val_score"], [831, 4, 1, "", "cross_validate"], [832, 4, 1, "", "learning_curve"], [833, 4, 1, "", "permutation_test_score"], [834, 4, 1, "", "train_test_split"], [835, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[803, 3, 1, "", "classes_"], [803, 2, 1, "", "decision_function"], [803, 2, 1, "", "fit"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_log_proba"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "score"], [803, 2, 1, "", "set_params"], [803, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[804, 3, 1, "", "classes_"], [804, 2, 1, "", "decision_function"], [804, 2, 1, "", "fit"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "inverse_transform"], [804, 3, 1, "", "n_features_in_"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_log_proba"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "score"], [804, 2, 1, "", "score_samples"], [804, 2, 1, "", "set_params"], [804, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "set_split_request"], [805, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "set_split_request"], [806, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[807, 3, 1, "", "classes_"], [807, 2, 1, "", "decision_function"], [807, 2, 1, "", "fit"], [807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "inverse_transform"], [807, 3, 1, "", "n_features_in_"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "predict_log_proba"], [807, 2, 1, "", "predict_proba"], [807, 2, 1, "", "score"], [807, 2, 1, "", "score_samples"], [807, 2, 1, "", "set_params"], [807, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[808, 3, 1, "", "classes_"], [808, 2, 1, "", "decision_function"], [808, 2, 1, "", "fit"], [808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_params"], [808, 2, 1, "", "inverse_transform"], [808, 3, 1, "", "n_features_in_"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_log_proba"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "score_samples"], [808, 2, 1, "", "set_params"], [808, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[810, 2, 1, "", "from_estimator"], [810, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "set_split_request"], [811, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_n_splits"], [812, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "set_split_request"], [813, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[818, 3, 1, "", "classes_"], [818, 2, 1, "", "decision_function"], [818, 2, 1, "", "fit"], [818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "inverse_transform"], [818, 3, 1, "", "n_features_in_"], [818, 2, 1, "", "predict"], [818, 2, 1, "", "predict_log_proba"], [818, 2, 1, "", "predict_proba"], [818, 2, 1, "", "score"], [818, 2, 1, "", "score_samples"], [818, 2, 1, "", "set_params"], [818, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_n_splits"], [820, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_n_splits"], [822, 2, 1, "", "set_split_request"], [822, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_n_splits"], [823, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_n_splits"], [824, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_n_splits"], [825, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[826, 3, 1, "", "classes_"], [826, 2, 1, "", "decision_function"], [826, 2, 1, "", "fit"], [826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "predict_log_proba"], [826, 2, 1, "", "predict_proba"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_params"], [826, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[827, 2, 1, "", "from_estimator"], [827, 2, 1, "", "plot"]], "sklearn.multiclass": [[836, 1, 1, "", "OneVsOneClassifier"], [837, 1, 1, "", "OneVsRestClassifier"], [838, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[836, 2, 1, "", "decision_function"], [836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 3, 1, "", "n_classes_"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"], [836, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[837, 2, 1, "", "decision_function"], [837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 3, 1, "", "multilabel_"], [837, 3, 1, "", "n_classes_"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "predict_proba"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"], [837, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[839, 1, 1, "", "ClassifierChain"], [840, 1, 1, "", "MultiOutputClassifier"], [841, 1, 1, "", "MultiOutputRegressor"], [842, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[839, 2, 1, "", "decision_function"], [839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_log_proba"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_fit_request"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_fit_request"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_partial_fit_request"], [841, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[843, 1, 1, "", "BernoulliNB"], [844, 1, 1, "", "CategoricalNB"], [845, 1, 1, "", "ComplementNB"], [846, 1, 1, "", "GaussianNB"], [847, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_joint_log_proba"], [843, 2, 1, "", "predict_log_proba"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_partial_fit_request"], [843, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "partial_fit"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_joint_log_proba"], [844, 2, 1, "", "predict_log_proba"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_partial_fit_request"], [844, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "partial_fit"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "predict_joint_log_proba"], [845, 2, 1, "", "predict_log_proba"], [845, 2, 1, "", "predict_proba"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_fit_request"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_partial_fit_request"], [845, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "partial_fit"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "predict_joint_log_proba"], [846, 2, 1, "", "predict_log_proba"], [846, 2, 1, "", "predict_proba"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_fit_request"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_partial_fit_request"], [846, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "partial_fit"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "predict_joint_log_proba"], [847, 2, 1, "", "predict_log_proba"], [847, 2, 1, "", "predict_proba"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_fit_request"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_partial_fit_request"], [847, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[848, 1, 1, "", "BallTree"], [849, 1, 1, "", "KDTree"], [850, 1, 1, "", "KNeighborsClassifier"], [851, 1, 1, "", "KNeighborsRegressor"], [852, 1, 1, "", "KNeighborsTransformer"], [853, 1, 1, "", "KernelDensity"], [854, 1, 1, "", "LocalOutlierFactor"], [855, 1, 1, "", "NearestCentroid"], [856, 1, 1, "", "NearestNeighbors"], [857, 1, 1, "", "NeighborhoodComponentsAnalysis"], [858, 1, 1, "", "RadiusNeighborsClassifier"], [859, 1, 1, "", "RadiusNeighborsRegressor"], [860, 1, 1, "", "RadiusNeighborsTransformer"], [861, 4, 1, "", "kneighbors_graph"], [862, 4, 1, "", "radius_neighbors_graph"], [863, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[848, 2, 1, "", "get_arrays"], [848, 2, 1, "", "get_n_calls"], [848, 2, 1, "", "get_tree_stats"], [848, 2, 1, "", "kernel_density"], [848, 2, 1, "", "query"], [848, 2, 1, "", "query_radius"], [848, 2, 1, "", "reset_n_calls"], [848, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[849, 2, 1, "", "get_arrays"], [849, 2, 1, "", "get_n_calls"], [849, 2, 1, "", "get_tree_stats"], [849, 2, 1, "", "kernel_density"], [849, 2, 1, "", "query"], [849, 2, 1, "", "query_radius"], [849, 2, 1, "", "reset_n_calls"], [849, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "kneighbors"], [850, 2, 1, "", "kneighbors_graph"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "predict_proba"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "kneighbors"], [851, 2, 1, "", "kneighbors_graph"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "score"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_feature_names_out"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "kneighbors"], [852, 2, 1, "", "kneighbors_graph"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "sample"], [853, 2, 1, "", "score"], [853, 2, 1, "", "score_samples"], [853, 2, 1, "", "set_fit_request"], [853, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[854, 2, 1, "", "decision_function"], [854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_predict"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "kneighbors"], [854, 2, 1, "", "kneighbors_graph"], [854, 2, 1, "", "predict"], [854, 2, 1, "", "score_samples"], [854, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "kneighbors"], [856, 2, 1, "", "kneighbors_graph"], [856, 2, 1, "", "radius_neighbors"], [856, 2, 1, "", "radius_neighbors_graph"], [856, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "predict"], [858, 2, 1, "", "predict_proba"], [858, 2, 1, "", "radius_neighbors"], [858, 2, 1, "", "radius_neighbors_graph"], [858, 2, 1, "", "score"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "predict"], [859, 2, 1, "", "radius_neighbors"], [859, 2, 1, "", "radius_neighbors_graph"], [859, 2, 1, "", "score"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "radius_neighbors"], [860, 2, 1, "", "radius_neighbors_graph"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.neural_network": [[864, 1, 1, "", "BernoulliRBM"], [865, 1, 1, "", "MLPClassifier"], [866, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "gibbs"], [864, 2, 1, "", "partial_fit"], [864, 2, 1, "", "score_samples"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "partial_fit"], [865, 2, 1, "", "predict"], [865, 2, 1, "", "predict_log_proba"], [865, 2, 1, "", "predict_proba"], [865, 2, 1, "", "score"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "set_partial_fit_request"], [865, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "partial_fit"], [866, 2, 1, "", "predict"], [866, 2, 1, "", "score"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[867, 1, 1, "", "FeatureUnion"], [868, 1, 1, "", "Pipeline"], [869, 4, 1, "", "make_pipeline"], [870, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[867, 3, 1, "", "feature_names_in_"], [867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 3, 1, "", "n_features_in_"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[868, 3, 1, "", "classes_"], [868, 2, 1, "", "decision_function"], [868, 3, 1, "", "feature_names_in_"], [868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_predict"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 3, 1, "", "n_features_in_"], [868, 3, 1, "", "named_steps"], [868, 2, 1, "", "predict"], [868, 2, 1, "", "predict_log_proba"], [868, 2, 1, "", "predict_proba"], [868, 2, 1, "", "score"], [868, 2, 1, "", "score_samples"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "set_score_request"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing": [[871, 1, 1, "", "Binarizer"], [872, 1, 1, "", "FunctionTransformer"], [873, 1, 1, "", "KBinsDiscretizer"], [874, 1, 1, "", "KernelCenterer"], [875, 1, 1, "", "LabelBinarizer"], [876, 1, 1, "", "LabelEncoder"], [877, 1, 1, "", "MaxAbsScaler"], [878, 1, 1, "", "MinMaxScaler"], [879, 1, 1, "", "MultiLabelBinarizer"], [880, 1, 1, "", "Normalizer"], [881, 1, 1, "", "OneHotEncoder"], [882, 1, 1, "", "OrdinalEncoder"], [883, 1, 1, "", "PolynomialFeatures"], [884, 1, 1, "", "PowerTransformer"], [885, 1, 1, "", "QuantileTransformer"], [886, 1, 1, "", "RobustScaler"], [887, 1, 1, "", "SplineTransformer"], [888, 1, 1, "", "StandardScaler"], [889, 1, 1, "", "TargetEncoder"], [890, 4, 1, "", "add_dummy_feature"], [891, 4, 1, "", "binarize"], [892, 4, 1, "", "label_binarize"], [893, 4, 1, "", "maxabs_scale"], [894, 4, 1, "", "minmax_scale"], [895, 4, 1, "", "normalize"], [896, 4, 1, "", "power_transform"], [897, 4, 1, "", "quantile_transform"], [898, 4, 1, "", "robust_scale"], [899, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "set_transform_request"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "set_fit_request"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "set_fit_request"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "set_transform_request"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_inverse_transform_request"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "partial_fit"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "partial_fit"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "inverse_transform"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "set_transform_request"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 3, 1, "", "infrequent_categories_"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 3, 1, "", "infrequent_categories_"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 3, 1, "", "powers_"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "inverse_transform"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "inverse_transform"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 2, 1, "", "inverse_transform"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[887, 2, 1, "", "fit"], [887, 2, 1, "", "fit_transform"], [887, 2, 1, "", "get_feature_names_out"], [887, 2, 1, "", "get_metadata_routing"], [887, 2, 1, "", "get_params"], [887, 2, 1, "", "set_fit_request"], [887, 2, 1, "", "set_output"], [887, 2, 1, "", "set_params"], [887, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[888, 2, 1, "", "fit"], [888, 2, 1, "", "fit_transform"], [888, 2, 1, "", "get_feature_names_out"], [888, 2, 1, "", "get_metadata_routing"], [888, 2, 1, "", "get_params"], [888, 2, 1, "", "inverse_transform"], [888, 2, 1, "", "partial_fit"], [888, 2, 1, "", "set_fit_request"], [888, 2, 1, "", "set_inverse_transform_request"], [888, 2, 1, "", "set_output"], [888, 2, 1, "", "set_params"], [888, 2, 1, "", "set_partial_fit_request"], [888, 2, 1, "", "set_transform_request"], [888, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[889, 2, 1, "", "fit"], [889, 2, 1, "", "fit_transform"], [889, 2, 1, "", "get_feature_names_out"], [889, 2, 1, "", "get_metadata_routing"], [889, 2, 1, "", "get_params"], [889, 3, 1, "", "infrequent_categories_"], [889, 2, 1, "", "set_output"], [889, 2, 1, "", "set_params"], [889, 2, 1, "", "transform"]], "sklearn.random_projection": [[900, 1, 1, "", "GaussianRandomProjection"], [901, 1, 1, "", "SparseRandomProjection"], [902, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[900, 2, 1, "", "fit"], [900, 2, 1, "", "fit_transform"], [900, 2, 1, "", "get_feature_names_out"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "inverse_transform"], [900, 2, 1, "", "set_output"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[901, 2, 1, "", "fit"], [901, 2, 1, "", "fit_transform"], [901, 2, 1, "", "get_feature_names_out"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "inverse_transform"], [901, 2, 1, "", "set_output"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[903, 1, 1, "", "LabelPropagation"], [904, 1, 1, "", "LabelSpreading"], [905, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[903, 2, 1, "", "fit"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "predict_proba"], [903, 2, 1, "", "score"], [903, 2, 1, "", "set_params"], [903, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[904, 2, 1, "", "fit"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "predict_proba"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[905, 2, 1, "", "decision_function"], [905, 2, 1, "", "fit"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "predict_log_proba"], [905, 2, 1, "", "predict_proba"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_params"]], "sklearn.svm": [[908, 1, 1, "", "LinearSVC"], [909, 1, 1, "", "LinearSVR"], [910, 1, 1, "", "NuSVC"], [911, 1, 1, "", "NuSVR"], [912, 1, 1, "", "OneClassSVM"], [913, 1, 1, "", "SVC"], [914, 1, 1, "", "SVR"], [915, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[908, 2, 1, "", "decision_function"], [908, 2, 1, "", "densify"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_score_request"], [908, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[909, 2, 1, "", "fit"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[910, 3, 1, "", "coef_"], [910, 2, 1, "", "decision_function"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 3, 1, "", "n_support_"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "predict_log_proba"], [910, 2, 1, "", "predict_proba"], [910, 3, 1, "", "probA_"], [910, 3, 1, "", "probB_"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[911, 3, 1, "", "coef_"], [911, 2, 1, "", "fit"], [911, 2, 1, "", "get_metadata_routing"], [911, 2, 1, "", "get_params"], [911, 3, 1, "", "n_support_"], [911, 2, 1, "", "predict"], [911, 2, 1, "", "score"], [911, 2, 1, "", "set_fit_request"], [911, 2, 1, "", "set_params"], [911, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[912, 3, 1, "", "coef_"], [912, 2, 1, "", "decision_function"], [912, 2, 1, "", "fit"], [912, 2, 1, "", "fit_predict"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_params"], [912, 3, 1, "", "n_support_"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "score_samples"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[913, 3, 1, "", "coef_"], [913, 2, 1, "", "decision_function"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_params"], [913, 3, 1, "", "n_support_"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "predict_log_proba"], [913, 2, 1, "", "predict_proba"], [913, 3, 1, "", "probA_"], [913, 3, 1, "", "probB_"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[914, 3, 1, "", "coef_"], [914, 2, 1, "", "fit"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_params"], [914, 3, 1, "", "n_support_"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "score"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"], [914, 2, 1, "", "set_score_request"]], "sklearn.tree": [[916, 1, 1, "", "DecisionTreeClassifier"], [917, 1, 1, "", "DecisionTreeRegressor"], [918, 1, 1, "", "ExtraTreeClassifier"], [919, 1, 1, "", "ExtraTreeRegressor"], [920, 4, 1, "", "export_graphviz"], [921, 4, 1, "", "export_text"], [922, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[916, 2, 1, "", "apply"], [916, 2, 1, "", "cost_complexity_pruning_path"], [916, 2, 1, "", "decision_path"], [916, 3, 1, "", "feature_importances_"], [916, 2, 1, "", "fit"], [916, 2, 1, "", "get_depth"], [916, 2, 1, "", "get_metadata_routing"], [916, 2, 1, "", "get_n_leaves"], [916, 2, 1, "", "get_params"], [916, 2, 1, "", "predict"], [916, 2, 1, "", "predict_log_proba"], [916, 2, 1, "", "predict_proba"], [916, 2, 1, "", "score"], [916, 2, 1, "", "set_fit_request"], [916, 2, 1, "", "set_params"], [916, 2, 1, "", "set_predict_proba_request"], [916, 2, 1, "", "set_predict_request"], [916, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[917, 2, 1, "", "apply"], [917, 2, 1, "", "cost_complexity_pruning_path"], [917, 2, 1, "", "decision_path"], [917, 3, 1, "", "feature_importances_"], [917, 2, 1, "", "fit"], [917, 2, 1, "", "get_depth"], [917, 2, 1, "", "get_metadata_routing"], [917, 2, 1, "", "get_n_leaves"], [917, 2, 1, "", "get_params"], [917, 2, 1, "", "predict"], [917, 2, 1, "", "score"], [917, 2, 1, "", "set_fit_request"], [917, 2, 1, "", "set_params"], [917, 2, 1, "", "set_predict_request"], [917, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[918, 2, 1, "", "apply"], [918, 2, 1, "", "cost_complexity_pruning_path"], [918, 2, 1, "", "decision_path"], [918, 3, 1, "", "feature_importances_"], [918, 2, 1, "", "fit"], [918, 2, 1, "", "get_depth"], [918, 2, 1, "", "get_metadata_routing"], [918, 2, 1, "", "get_n_leaves"], [918, 2, 1, "", "get_params"], [918, 2, 1, "", "predict"], [918, 2, 1, "", "predict_log_proba"], [918, 2, 1, "", "predict_proba"], [918, 2, 1, "", "score"], [918, 2, 1, "", "set_fit_request"], [918, 2, 1, "", "set_params"], [918, 2, 1, "", "set_predict_proba_request"], [918, 2, 1, "", "set_predict_request"], [918, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[919, 2, 1, "", "apply"], [919, 2, 1, "", "cost_complexity_pruning_path"], [919, 2, 1, "", "decision_path"], [919, 3, 1, "", "feature_importances_"], [919, 2, 1, "", "fit"], [919, 2, 1, "", "get_depth"], [919, 2, 1, "", "get_metadata_routing"], [919, 2, 1, "", "get_n_leaves"], [919, 2, 1, "", "get_params"], [919, 2, 1, "", "predict"], [919, 2, 1, "", "score"], [919, 2, 1, "", "set_fit_request"], [919, 2, 1, "", "set_params"], [919, 2, 1, "", "set_predict_request"], [919, 2, 1, "", "set_score_request"]], "sklearn.utils": [[923, 1, 1, "", "Bunch"], [924, 1, 1, "", "ClassifierTags"], [925, 1, 1, "", "InputTags"], [926, 1, 1, "", "RegressorTags"], [927, 1, 1, "", "Tags"], [928, 1, 1, "", "TargetTags"], [929, 1, 1, "", "TransformerTags"], [930, 4, 1, "", "_safe_indexing"], [41, 0, 0, "-", "arrayfuncs"], [932, 4, 1, "", "as_float_array"], [933, 4, 1, "", "assert_all_finite"], [934, 4, 1, "", "check_X_y"], [935, 4, 1, "", "check_array"], [936, 4, 1, "", "check_consistent_length"], [937, 4, 1, "", "check_random_state"], [938, 4, 1, "", "check_scalar"], [41, 0, 0, "-", "class_weight"], [941, 4, 1, "", "default_tags"], [942, 1, 1, "", "deprecated"], [41, 0, 0, "-", "discovery"], [41, 0, 0, "-", "estimator_checks"], [948, 4, 1, "", "estimator_html_repr"], [41, 0, 0, "-", "extmath"], [955, 4, 1, "", "gen_batches"], [956, 4, 1, "", "gen_even_slices"], [957, 4, 1, "", "get_tags"], [41, 0, 0, "-", "graph"], [959, 4, 1, "", "indexable"], [41, 0, 0, "-", "metadata_routing"], [41, 0, 0, "-", "metaestimators"], [41, 0, 0, "-", "multiclass"], [969, 4, 1, "", "murmurhash3_32"], [41, 0, 0, "-", "parallel"], [972, 1, 1, "", "parallel_backend"], [41, 0, 0, "-", "random"], [974, 4, 1, "", "register_parallel_backend"], [975, 4, 1, "", "resample"], [976, 4, 1, "", "safe_mask"], [977, 4, 1, "", "safe_sqr"], [978, 4, 1, "", "shuffle"], [41, 0, 0, "-", "sparsefuncs"], [41, 0, 0, "-", "sparsefuncs_fast"], [41, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[923, 2, 1, "", "clear"], [923, 2, 1, "", "copy"], [923, 2, 1, "", "fromkeys"], [923, 2, 1, "", "get"], [923, 2, 1, "", "items"], [923, 2, 1, "", "keys"], [923, 2, 1, "", "pop"], [923, 2, 1, "", "popitem"], [923, 2, 1, "", "setdefault"], [923, 2, 1, "", "update"], [923, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[931, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[939, 4, 1, "", "compute_class_weight"], [940, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[942, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[943, 4, 1, "", "all_displays"], [944, 4, 1, "", "all_estimators"], [945, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[946, 4, 1, "", "check_estimator"], [947, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[949, 4, 1, "", "density"], [950, 4, 1, "", "fast_logdet"], [951, 4, 1, "", "randomized_range_finder"], [952, 4, 1, "", "randomized_svd"], [953, 4, 1, "", "safe_sparse_dot"], [954, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[958, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[960, 1, 1, "", "MetadataRequest"], [961, 1, 1, "", "MetadataRouter"], [962, 1, 1, "", "MethodMapping"], [963, 4, 1, "", "get_routing_for_object"], [964, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[960, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[961, 2, 1, "", "add"], [961, 2, 1, "", "add_self_request"], [961, 2, 1, "", "consumes"], [961, 2, 1, "", "route_params"], [961, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[962, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[965, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[966, 4, 1, "", "is_multilabel"], [967, 4, 1, "", "type_of_target"], [968, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[970, 1, 1, "", "Parallel"], [971, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[970, 2, 1, "", "__call__"], [970, 2, 1, "", "dispatch_next"], [970, 2, 1, "", "dispatch_one_batch"], [970, 2, 1, "", "format"], [970, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[973, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[979, 4, 1, "", "incr_mean_variance_axis"], [980, 4, 1, "", "inplace_column_scale"], [981, 4, 1, "", "inplace_csr_column_scale"], [982, 4, 1, "", "inplace_row_scale"], [983, 4, 1, "", "inplace_swap_column"], [984, 4, 1, "", "inplace_swap_row"], [985, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[986, 4, 1, "", "inplace_csr_row_normalize_l1"], [987, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[988, 4, 1, "", "check_is_fitted"], [989, 4, 1, "", "check_memory"], [990, 4, 1, "", "check_symmetric"], [991, 4, 1, "", "column_or_1d"], [992, 4, 1, "", "has_fit_parameter"], [993, 4, 1, "", "validate_data"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [0, 2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 55, 57, 58, 61, 64, 70, 73, 74, 75, 77, 78, 79, 80, 81, 85, 86, 88, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 109, 110, 113, 115, 118, 119, 121, 122, 123, 126, 129, 130, 131, 133, 135, 137, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 162, 164, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 187, 188, 190, 192, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 212, 214, 216, 218, 220, 221, 223, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 241, 242, 245, 247, 248, 249, 251, 257, 259, 260, 262, 266, 267, 272, 273, 274, 275, 276, 279, 283, 285, 287, 292, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 310, 311, 312, 315, 318, 321, 323, 324, 325, 326, 327, 328, 329, 332, 333, 339, 340, 341, 342, 343, 346, 347, 348, 351, 353, 354, 355, 358, 359, 360, 361, 362, 366, 367, 368, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 385, 386, 387, 388, 393, 394, 396, 397, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 421, 423, 425, 432, 436, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 462, 463, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 492, 494, 500, 502, 504, 508, 514, 515, 523, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 691, 692, 693, 694, 695, 696, 697, 704, 705, 706, 712, 715, 720, 724, 726, 739, 745, 762, 763, 783, 784, 801, 802, 803, 804, 806, 807, 808, 813, 818, 822, 823, 826, 829, 830, 831, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 932, 934, 935, 938, 952, 954, 961, 962, 964, 988, 992, 993, 994, 996, 997, 999, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "0": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 397, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 434, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 930, 931, 932, 934, 935, 939, 940, 943, 944, 945, 946, 947, 949, 951, 952, 954, 955, 956, 958, 965, 966, 967, 969, 970, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1026, 1027, 1031, 1032, 1033, 1034], "00": [52, 68, 111, 124, 187, 188, 205, 232, 245, 266, 270, 273, 310, 328, 331, 332, 354, 373, 376, 385, 411, 418, 419, 609, 610, 717, 719, 792, 804, 818, 832, 917, 1001, 1005, 1015, 1017, 1019, 1026], "000": [43, 44, 59, 62, 64, 77, 106, 172, 189, 192, 245, 266, 270, 272, 274, 281, 317, 324, 353, 354, 362, 374, 385, 418, 419, 493, 565, 566, 648, 681, 1019, 1026, 1047], "0000": [43, 326], "000000": [79, 187, 203, 232, 272, 316, 741], "00000000": 174, "000000e": 232, "000024": 366, "000045": 187, "00005": 54, "0000ff": [67, 300, 307], "0001": [49, 160, 169, 222, 270, 381, 423, 446, 450, 462, 474, 475, 481, 537, 542, 544, 551, 553, 554, 563, 564, 650, 651, 652, 653, 656, 657, 662, 663, 664, 665, 666, 667, 672, 673, 676, 678, 680, 682, 684, 691, 693, 697, 865, 866, 908, 909, 994], "000198": 187, "000207": 46, "000272": 46, "000278": 46, "0003": 138, "000312": 46, "000348": 46, "0004": [52, 138, 317, 608], "000447": 353, "000449": 46, "000612": 353, "000649": 46, "000657": 353, "000658": 353, "000694": 353, "0008": 387, "000827": 46, "000871": 46, "000946": 353, "000977": 272, "00099547": 174, "000e": 419, "001": [46, 53, 68, 79, 95, 145, 169, 171, 187, 199, 223, 241, 251, 257, 270, 272, 274, 334, 354, 376, 385, 415, 540, 541, 543, 550, 631, 648, 649, 650, 651, 656, 657, 664, 665, 666, 667, 670, 671, 672, 680, 681, 682, 683, 685, 688, 693, 694, 697, 698, 801, 802, 865, 866, 903, 904, 910, 911, 912, 913, 914, 994], "0012": [43, 698], "0013": 43, "0014": 43, "00149": 353, "0015": 43, "001540": 52, "00166409": 665, "00171412": [762, 763, 1003], "001727": 266, "00174": 353, "001882": [201, 203], "002": [43, 51, 169, 171, 376], "002592": [201, 203], "00262": 353, "00274": 214, "0028": 43, "002861": [201, 203], "003": 43, "0032": 43, "0034189458230957995": 45, "003533": 203, "003586": 540, "00360392": 540, "0036211": 540, "00362644": 540, "00364": 325, "00393284e": 196, "003935": [201, 203], "003e": 419, "004": [43, 354], "0044": 915, "004577621581492997": 319, "00462428": 755, "0049896314219659565": 319, "005": [43, 272, 276, 297, 312, 354, 385], "005019": 270, "005027": 275, "005383": [201, 203], "005422": 272, "005670": [201, 203], "005840": 275, "005861": 275, "006": [43, 280, 385], "006360": 275, "007": [142, 257, 280, 292, 354], "0072b2": 257, "0075": [476, 545], "00755": 545, "007581": 277, "00768662e": 196, "007822": 286, "007833": 277, "008": [45, 169, 376, 385], "008142": [201, 203], "0083899664": 768, "008449": [201, 203], "00860051": 662, "008915": 275, "009": [43, 354, 385], "009077": 187, "00911944e": 196, "0092": 138, "009362": [201, 203], "009747": 286, "009778": 275, "009788": 286, "0098": 138, "00ff00": 300, "01": [45, 47, 49, 52, 53, 75, 79, 84, 95, 121, 123, 124, 138, 146, 148, 150, 152, 153, 169, 176, 180, 187, 188, 196, 199, 205, 221, 226, 227, 232, 234, 235, 241, 245, 246, 247, 251, 252, 259, 263, 265, 266, 271, 272, 273, 277, 279, 280, 281, 297, 308, 310, 312, 322, 328, 344, 359, 360, 374, 376, 384, 411, 420, 452, 474, 519, 525, 536, 543, 547, 549, 599, 600, 602, 609, 646, 650, 658, 662, 682, 700, 719, 804, 818, 902, 973, 1001, 1005, 1009, 1015, 1017, 1019, 1026], "010": [354, 385, 833, 1013], "0106": 653, "010877306503748912": 280, "011": [43, 280, 292, 354, 385], "011595": [201, 203], "0116": 608, "011e": 419, "012": [52, 190, 192], "012191": [201, 203], "012521": 203, "012831": 203, "0129126": 373, "013": [43, 52, 91, 166, 280, 354, 1026], "01327": 374, "013520": 187, "014": [43, 280, 385], "0144": 619, "015": [324, 357, 1013, 1026], "0152": 138, "015347e": 232, "015414e": 232, "015579": 286, "015587e": 232, "015596": [201, 203], "0157": 548, "015716e": 232, "016": [141, 1026], "01621459": 411, "016445": 272, "017": [354, 385, 474, 475], "017379": 52, "017646": [201, 203], "018": [52, 272, 475], "0182": 901, "018727": 187, "0188ff": 316, "018900": 203, "019": [128, 169, 376, 385, 474, 1026], "019023": 272, "019069": 203, "01915283": 131, "019163": [201, 203], "0193": [473, 479], "0195": [424, 478], "0196": 138, "0198e1": 119, "019907": [201, 203], "01e": 200, "02": [43, 51, 52, 66, 79, 83, 85, 91, 95, 97, 113, 115, 121, 124, 137, 143, 169, 173, 178, 186, 187, 196, 232, 241, 249, 251, 266, 267, 273, 279, 297, 307, 310, 312, 314, 336, 338, 354, 358, 373, 376, 384, 410, 415, 444, 448, 601, 609, 662, 680, 804, 818, 887, 903, 917, 1001, 1026], "020": [43, 52, 1013], "02069427": 86, "021": 354, "021849": 326, "021872": [201, 203], "022": 1013, "022593": 187, "0226": 653, "022688": [201, 203], "023": [52, 280, 354, 909, 1013], "02306214": 671, "02449161": 131, "02456369": 199, "024991": [201, 203], "025": [67, 216, 250, 251, 269, 694, 698, 1026], "025102": 187, "025422": 272, "0255": 138, "0256": 174, "025930": [201, 203], "026": [116, 354, 361], "026328": [201, 203], "026711": 87, "027": [52, 169, 199, 376], "027400": 366, "028": [270, 354], "02818216": 115, "02891072": 1006, "029": [353, 354, 1013], "0297": 353, "02d": 203, "03": [51, 52, 85, 111, 121, 150, 169, 176, 187, 196, 232, 245, 257, 263, 266, 273, 332, 376, 419, 752, 804, 1001, 1005, 1026], "030": [150, 171, 354], "030462": 103, "030498": 103, "030585": 286, "030677e": 232, "030867": 187, "031": [169, 200, 376], "031020": 103, "031026": 187, "031255": 187, "031555": 203, "03162278": 51, "0317": 353, "031988": [201, 203], "0321": 839, "032179": 203, "03228": 626, "03228706": 614, "032356": [201, 203], "03237920e": 196, "032405": 187, "03260883": 1006, "033": 1013, "033764e": 232, "033823": 187, "034": [91, 150, 355, 474, 1026], "034077": 203, "034194": [201, 203], "034278": 275, "034309": [201, 203], "03433306457": 45, "034821": [201, 203], "03498585": 1006, "035": [243, 1026], "035005": 187, "03531816": [830, 831], "035445": 286, "0358": 46, "035914": 286, "036": [91, 385, 475], "036038": [201, 203], "036385": [201, 203], "036445": 272, "036592": 286, "036656": [201, 203], "0367": 176, "0368": 623, "037": 713, "0370": 854, "037002": 46, "037600e": 232, "038": [474, 475, 865], "038076": [201, 203], "03812219": 1006, "038159": 816, "03823144": 174, "038689": 262, "0387": 608, "039": [270, 316, 755, 785, 1005, 1026], "039493": [201, 203], "039497": 255, "039542": 46, "03f": 270, "04": [52, 66, 75, 77, 87, 100, 115, 123, 130, 169, 176, 187, 196, 213, 232, 236, 249, 257, 263, 266, 272, 273, 305, 329, 348, 354, 376, 418, 420, 474, 475, 650, 651, 656, 664, 665, 666, 685, 792, 804, 818, 1001, 1005, 1009, 1019, 1026], "040530e": 232, "041": 52, "041297": 308, "0416": 410, "042": 385, "0427": [232, 472, 477], "042898": 308, "043": [354, 385], "043401": [201, 203], "044": [43, 140, 270, 755, 1005, 1026], "044223": [201, 203], "044451": [201, 203], "044642": [201, 203], "0448": 232, "045": [210, 727, 1026], "04520": 160, "0453": 548, "045311": 308, "045390e": 232, "045599": [201, 203], "045934": 308, "046": 354, "046010e": 232, "046636": 187, "046641": [201, 203], "047": [147, 385, 1026], "0479": 548, "048": 1013, "048150": 46, "049": [45, 75, 474, 1026], "049530": 308, "049540": 308, "0499": 548, "04995982": 115, "05": [46, 47, 52, 54, 61, 63, 72, 79, 85, 93, 95, 97, 98, 100, 107, 115, 126, 138, 141, 147, 150, 153, 165, 169, 179, 180, 187, 195, 196, 213, 216, 228, 238, 239, 241, 251, 257, 259, 260, 263, 266, 272, 273, 281, 283, 297, 300, 305, 312, 314, 321, 325, 332, 334, 347, 376, 420, 453, 459, 481, 529, 534, 535, 550, 596, 599, 600, 602, 617, 618, 619, 623, 624, 626, 627, 629, 636, 637, 653, 694, 698, 760, 804, 857, 908, 909, 1001, 1009, 1015, 1026], "050": [52, 248, 342, 1013, 1026], "05063247886572012": 280, "050680": [201, 203], "051": [475, 1026], "0512": 548, "051474": [201, 203], "0517578125e": 46, "052": 541, "05216586": 115, "052506": 326, "053": [43, 169, 376, 385], "05306648": 129, "05317": 176, "0539": 353, "054045": 275, "054699": 187, "0547": 912, "055": [169, 355, 376, 1005], "05518": 627, "05532": 624, "05534985": 309, "0556": 912, "056": [52, 759, 1013], "0561": 912, "0566": 627, "05663": 624, "0568": 751, "057": [385, 833], "057122": 203, "05752333": 131, "057711": 203, "058": [169, 270, 376], "05840206": 131, "059": 236, "0595": 476, "05968": 160, "05994843": 51, "06": [52, 100, 187, 205, 213, 214, 266, 272, 273, 310, 314, 348, 385, 410, 485, 486, 487, 648, 649, 693, 697, 801, 802, 804, 818, 917, 1001, 1015, 1017, 1026], "060": [43, 52, 755], "0602": 46, "061": 270, "0614": 627, "06165": 624, "061696": [201, 203], "062": [92, 1026], "0622": [473, 479], "0626": 839, "062846": 46, "063": [89, 198, 203, 270, 272, 440, 1026], "0631": 52, "064": [385, 1013], "065": [270, 385], "06506307": 309, "0652": 626, "06525643": 614, "066": [270, 652], "06686804": 229, "06694199": 131, "06695631e": 111, "067": [180, 343, 1026], "067109": 203, "067528": 203, "068": [43, 52, 272], "068332": [201, 203], "06880943": 115, "06896552": 452, "069": [161, 270, 1026], "069196": 270, "0693": 623, "07": [52, 115, 124, 130, 187, 210, 232, 251, 266, 281, 362, 374, 411, 565, 566, 696, 698, 1005, 1019, 1026], "0707": 627, "07073": 624, "071": [169, 329, 376, 440], "071964": 187, "072": [347, 440, 652, 1026], "0727": 353, "073": [270, 474, 475], "074": [226, 270, 1026], "074412": [201, 203], "075": [124, 291, 1026], "07582983e": 196, "075887": 203, "076": [43, 235, 896, 1026], "077": 292, "077846": 272, "0779": 46, "078": [43, 274, 1026], "07846529": 309, "07880": 160, "079": [169, 361, 376, 1026], "079297": 272, "07963978e": 196, "07993421": 229, "08": [43, 47, 79, 83, 124, 180, 187, 188, 199, 310, 376, 481, 535, 547, 549, 567, 645, 662, 804, 865, 866, 887, 1011, 1026], "080": 354, "08022103": [830, 831], "080295": 203, "081": 1013, "0813": [472, 477], "082": 43, "0825": 317, "083": [270, 361], "08377444": 755, "084": [61, 127, 299, 359, 1026], "085": [45, 188], "085299": [201, 203], "08533159": 217, "085711": 87, "08604995": 115, "086944": 255, "08699432": 218, "0872422": 664, "088": [673, 1013], "089": [86, 273, 354, 1026], "089063": [201, 203], "08d": 55, "08t16": 373, "09": [47, 123, 124, 130, 187, 245, 249, 310, 411, 533, 611, 739, 846, 1005, 1015, 1019, 1026], "09000": 214, "090528": 187, "090808": 187, "091": [80, 1026], "091053": 187, "091621": 87, "092": 54, "092204": [201, 203], "093": 474, "094": [54, 338, 475, 1026], "09443967": 309, "09541846": 540, "096": [76, 1026], "09684337": 229, "096950": 308, "097": [43, 169, 376], "098": 354, "098332": 62, "0986": [419, 872], "09861229": [616, 1015], "098758": 62, "098776": 272, "098932": 62, "099": 43, "099820": 62, "0d": 1037, "0e": [283, 553, 554], "0e4": 221, "0f": [57, 91], "0min": 87, "0rc1": 383, "0rcn": 383, "0x": 937, "0x7fa57a42f160": 284, "0x7fa594497d00": 252, "0x7fa594ac91c0": 214, "0x7fa5960d7d40": 284, "0x7fa597871d40": 284, "0x7fa597c746a0": 155, "0x7fa597c74cd0": 155, "0x7fa597c9d310": 270, "0x7fa597f24c10": 331, "0x7fa5ac230a60": 140, "0x7fa5ac773670": 140, "0x7fa5ac95ef70": 284, "0x7fa5ad1cd340": 279, "0x7fa5b4297af0": 103, "0x7fa5b4316d30": 104, "0x7fa5c6d2ce50": 262, "0x7fa5c74ba580": 103, "0x7fa5c74baac0": 103, "1": [0, 1, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 392, 393, 394, 397, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 508, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 581, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 946, 947, 949, 950, 951, 952, 953, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1032, 1034, 1038], "10": [2, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 58, 62, 63, 64, 66, 67, 68, 72, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 103, 104, 106, 109, 110, 111, 112, 113, 115, 116, 119, 123, 124, 125, 126, 130, 131, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 156, 158, 162, 166, 169, 172, 173, 175, 177, 178, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 199, 204, 205, 207, 208, 212, 214, 215, 216, 217, 218, 219, 220, 221, 225, 226, 227, 230, 231, 232, 235, 236, 241, 244, 245, 246, 247, 248, 250, 251, 252, 254, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 283, 285, 286, 287, 289, 291, 297, 307, 308, 309, 310, 312, 313, 315, 316, 317, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 333, 335, 340, 341, 342, 344, 345, 347, 348, 349, 351, 353, 354, 362, 366, 373, 374, 375, 376, 377, 379, 384, 385, 391, 392, 393, 397, 402, 403, 404, 408, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 424, 441, 446, 450, 452, 454, 455, 456, 462, 463, 465, 478, 491, 496, 497, 500, 504, 505, 506, 508, 514, 515, 516, 517, 520, 524, 525, 528, 530, 532, 535, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 552, 556, 559, 560, 561, 562, 565, 566, 568, 569, 570, 571, 572, 574, 586, 587, 591, 597, 598, 603, 604, 609, 611, 615, 621, 623, 631, 634, 636, 638, 639, 640, 641, 644, 646, 647, 648, 650, 651, 653, 656, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 676, 677, 679, 680, 681, 682, 685, 689, 690, 695, 696, 699, 700, 703, 709, 719, 730, 746, 760, 773, 801, 802, 804, 805, 806, 807, 808, 815, 818, 819, 820, 821, 822, 824, 825, 827, 832, 834, 835, 836, 837, 843, 844, 845, 847, 848, 849, 855, 864, 865, 866, 868, 874, 878, 881, 882, 885, 897, 905, 911, 914, 916, 917, 921, 926, 938, 949, 952, 956, 968, 973, 974, 980, 981, 990, 994, 995, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1011, 1012, 1015, 1019, 1020, 1026, 1033, 1034, 1037, 1038, 1039, 1044, 1046, 1047, 1048, 1050, 1051], "100": [43, 44, 46, 49, 51, 52, 55, 57, 62, 64, 72, 77, 79, 83, 86, 90, 94, 99, 103, 104, 107, 110, 111, 121, 123, 124, 130, 136, 141, 150, 151, 154, 157, 172, 176, 179, 180, 187, 188, 190, 192, 194, 195, 197, 199, 200, 204, 205, 206, 208, 213, 214, 215, 216, 218, 223, 224, 225, 227, 229, 230, 232, 236, 237, 239, 244, 245, 246, 247, 248, 252, 257, 259, 263, 266, 267, 268, 270, 272, 275, 277, 282, 283, 287, 297, 298, 299, 310, 313, 314, 316, 318, 319, 324, 328, 329, 335, 336, 340, 341, 343, 344, 345, 348, 349, 351, 353, 354, 357, 360, 361, 366, 368, 374, 376, 379, 381, 384, 385, 402, 408, 411, 412, 415, 416, 417, 418, 419, 440, 444, 448, 452, 474, 475, 481, 493, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 534, 538, 540, 548, 549, 550, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 609, 611, 614, 635, 636, 637, 643, 644, 645, 646, 650, 651, 652, 653, 656, 657, 662, 663, 664, 665, 666, 667, 669, 671, 673, 675, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 750, 801, 802, 806, 826, 832, 833, 838, 843, 844, 845, 847, 848, 849, 853, 865, 866, 884, 886, 889, 898, 915, 994, 995, 998, 1002, 1005, 1006, 1012, 1015, 1017, 1026, 1044, 1045, 1046, 1049, 1050], "1000": [43, 46, 47, 54, 63, 67, 72, 83, 104, 107, 115, 130, 138, 140, 142, 145, 146, 147, 152, 157, 161, 164, 177, 192, 200, 206, 217, 236, 244, 245, 247, 257, 261, 266, 270, 272, 278, 281, 283, 297, 299, 313, 316, 322, 323, 325, 327, 328, 343, 344, 350, 353, 354, 384, 385, 392, 409, 419, 440, 476, 482, 483, 535, 536, 541, 543, 545, 546, 547, 549, 550, 552, 557, 567, 568, 636, 650, 651, 655, 656, 657, 659, 664, 665, 666, 667, 670, 671, 672, 676, 680, 681, 682, 691, 696, 702, 705, 768, 885, 897, 903, 908, 909, 994, 998, 1020, 1043, 1045, 1054], "10000": [43, 50, 52, 66, 78, 96, 104, 105, 148, 160, 200, 207, 214, 222, 230, 245, 247, 323, 339, 341, 362, 368, 418, 419, 565, 566, 648, 683, 885, 914, 1017], "100000": [175, 247, 257, 379, 617, 618, 619, 623, 624, 626, 627, 629, 897, 998], "1000000": [55, 540], "10005": 1044, "1000x": 1042, "1001": [225, 255], "10027": 1049, "10045": 1044, "1005": 1020, "10058": 1045, "10059": 1044, "10065": 251, "1007": 709, "10070308464041304": 214, "10071": 1044, "10093": 1044, "10095": 1044, "10096": 1049, "100_000": [62, 64, 187], "100k": [245, 399], "100ksampl": 399, "100x": [1036, 1039, 1053], "101": [64, 90, 169, 289, 376, 854, 1026, 1037], "10101": 1044, "10112": 1044, "1013": 1013, "10142": 1044, "10153": 1044, "10168": 1051, "10181": 1044, "10192": 1044, "10195": 1044, "101alexmartin": [1053, 1054], "102": [385, 1038], "10210": 1044, "10229": 1044, "1024": [86, 130, 452, 471, 542, 906, 1049], "10280": 1044, "10297": 1044, "103": [150, 291, 292, 374, 418, 501, 559, 560, 1036], "10306": 1044, "10325": 1044, "10336": 1044, "10346": 1044, "10377": 1044, "1038": 411, "10397": 1044, "104": [43, 61], "10403": 232, "10412": 1044, "10428": 1044, "10437": 1044, "10440": 1045, "10441": 1044, "1045": 103, "10452": 1044, "10458": 1044, "1046": [103, 262], "10463": 1025, "10468": 1051, "10469096": 174, "1047": 103, "10471": 1044, "10474": 1044, "10478008": 411, "10482": 1046, "1048576": [419, 586, 593], "10493": 1048, "105": [182, 316, 1026], "10500": 1044, "10521": 1044, "10526": 411, "10536": 1044, "10580": 1045, "10581": 1044, "10584743": 174, "10587": 1044, "10591": 1048, "10593": 1044, "106": [169, 253, 255, 376, 884, 999, 1026, 1037], "10606655": 229, "10610": 1044, "10655": 1044, "10663": 1044, "10677": 1044, "10687": 1044, "107": [93, 150, 247, 326, 411, 903, 1006, 1026, 1038], "10708": 1048, "10711": 1048, "10723": [1043, 1044], "10727": 1045, "1073": [374, 491], "10733": 1025, "10740": 1044, "1076": 335, "10774": 1044, "10795": 1044, "108": [0, 47, 1037], "1080": [373, 411], "10805": 1050, "10811": 1044, "10815": 1046, "10827": 1044, "10829": 1044, "10834": 232, "10836": 1044, "1084": 262, "10845": 1044, "10869": 1044, "1088": 255, "10881": 1044, "108843": 275, "10887": 1044, "108880": 62, "10898": 1044, "10899": 1044, "109": [61, 86, 1006, 1038], "10908": 1044, "10913": 1044, "10914094": 229, "10928": 1044, "10933": 1044, "10982": 1044, "10992": 1044, "10998": 1044, "10999": 1044, "10_000": [46, 62, 107, 140, 147, 186, 192, 245, 275, 285, 292, 329, 563, 564, 568, 569, 885], "10_fold": [374, 497], "10e": [194, 199], "10k": [322, 399, 450], "10ksampl": 399, "10x": 1036, "10x10": 219, "10\u2079": 1044, "11": [43, 50, 57, 106, 112, 123, 169, 174, 187, 188, 199, 214, 215, 216, 219, 251, 266, 269, 277, 278, 284, 295, 296, 298, 316, 323, 326, 327, 341, 345, 349, 355, 373, 376, 377, 385, 392, 411, 414, 415, 418, 453, 460, 485, 486, 487, 488, 500, 505, 521, 522, 616, 654, 660, 674, 719, 725, 727, 728, 782, 783, 784, 805, 808, 822, 825, 833, 860, 917, 953, 968, 997, 1001, 1003, 1015, 1019, 1020, 1026, 1034, 1038, 1042, 1044, 1045, 1047, 1050, 1051], "110": [118, 194, 211, 221, 244, 318, 328, 440, 999, 1000], "1100": 83, "11000": 1045, "11005": 1044, "11006": 1044, "11010": 1044, "11011": 1044, "11021": 150, "11042": 1044, "11047": [1025, 1046], "11064": 1048, "11082": 1044, "110923": 203, "11099": 768, "111": [43, 46, 47, 100, 118, 127, 211, 229, 238, 272, 292, 860, 1039], "1111": [654, 660], "1111111111111111": 280, "11124": 1044, "1112658": [902, 1017], "11135": 1044, "11136": 1044, "1114": 262, "11144": [1044, 1045], "11144673": 229, "11160": 1044, "11166": 1044, "1117": 623, "11176": 1044, "11179": 1045, "1118": 103, "112": [87, 169, 374, 376, 1038], "11206": 1044, "11211": 1044, "112141": 385, "11232": 1046, "11235": 1044, "112589990684262": 750, "11272": 1044, "11293": 1044, "11295": 1044, "11296": 1047, "113": [135, 289, 385, 1026, 1039], "11306": 1044, "11308": 1044, "11310": 1044, "11314": 374, "11315": 1044, "11327": 1044, "113516": 275, "11353": 1044, "11354": 1045, "11364": 1045, "11364637": 51, "113781": 326, "11378556": 309, "114": [326, 714, 1036], "1140": 374, "11413": 43, "11420": 1044, "1145": [192, 411, 680], "11452112": 229, "11458": 1045, "11464": 1044, "11466": 1044, "11467": 1044, "1148": 262, "115": [188, 1013], "11505": 1044, "11514": 1047, "11520": 1044, "11526": 1045, "11528972": 229, "11542": 1044, "11553": 1044, "11556": 1044, "11557": 1044, "11558": 1044, "11576": 1044, "11585": 1044, "11596": 1044, "116": [200, 1036], "1162": 411, "11635": 1046, "11646": 1045, "11650": 1045, "11679": 1044, "11680": 47, "11682": 1048, "11682692": 229, "11693539": 115, "11699": 1045, "117": [204, 1026, 1037], "11705": 1045, "117154": 187, "11724": 1044, "11727": 1045, "11741": 1044, "11754": 1045, "11756": [1044, 1045], "117608": 62, "11774": 1044, "1179": 262, "118": [214, 594, 1026], "11805": 1025, "11841": [902, 1017], "1185": 385, "11860": 1051, "1189": 418, "119": [201, 999, 1026, 1039], "11901": 1044, "11905": 1044, "11912": 1044, "11915045": 362, "11924": 1044, "11931": 214, "11932": 214, "11933": 214, "11935": 214, "11950": 1047, "11951": 1044, "11958": 176, "11973": 1045, "11977": 1025, "12": [0, 43, 45, 52, 54, 58, 70, 75, 77, 78, 86, 88, 89, 90, 105, 106, 115, 143, 144, 145, 147, 148, 150, 169, 174, 175, 176, 183, 187, 188, 190, 195, 199, 200, 214, 222, 232, 234, 237, 238, 241, 242, 244, 245, 252, 255, 259, 260, 266, 271, 272, 274, 275, 278, 284, 285, 286, 295, 310, 316, 317, 318, 326, 329, 349, 353, 355, 375, 376, 377, 384, 392, 394, 397, 403, 404, 405, 411, 415, 419, 446, 450, 452, 460, 485, 486, 487, 488, 500, 536, 538, 545, 574, 650, 651, 656, 664, 665, 666, 668, 673, 675, 685, 689, 690, 693, 696, 697, 729, 734, 801, 802, 805, 822, 825, 839, 860, 876, 985, 994, 995, 997, 1001, 1003, 1005, 1006, 1015, 1019, 1020, 1026, 1034, 1037, 1039, 1043, 1044, 1046, 1047, 1052, 1053], "120": [151, 158, 235, 328, 420, 594, 1026, 1036], "1200": [83, 146, 312, 418], "12000": 524, "12068": 1046, "12069": 1049, "121": [100, 137, 183, 246, 247, 622, 673, 1015], "12105": 1044, "12116": 1045, "1212": 502, "12122": 1044, "121351": 203, "12143": 1045, "12145": 1046, "12147": 1025, "12159": 1044, "12165": 1044, "12165031": 1006, "1217": 214, "12171": 1044, "12174": 1045, "12177": 1045, "12190903": 115, "12196": 214, "12197": 1045, "122": [0, 137, 176, 183, 188, 209, 246, 385, 1006, 1026], "1220": 623, "12211": 1044, "12222": 1045, "12232": 1045, "12234": 1044, "12246": 1044, "12251": 1045, "12258": 1046, "12274212": 1006, "12279": 1045, "12285": 1051, "1229": 521, "123": [139, 157, 362, 418, 520, 521, 522, 559, 560, 841, 1006, 1013], "12300": 1045, "12303": 1046, "12304": 1044, "12317": [176, 1044], "1232": 418, "12326": 43, "12327": 43, "12328": [43, 1045], "12329": 43, "12330": [43, 1044], "12334": 1045, "12338": 1044, "12339": 1044, "1234": [195, 260, 275, 379], "12344": 1045, "12345": 1044, "12350": 1044, "1236": 318, "12360": 1044, "12365": 1044, "12379": 43, "12380": 43, "12381": 43, "12382": 43, "123828": 275, "12383": 43, "12388": 1044, "12393": 1044, "124": [46, 273, 418, 1038], "124225": 203, "12436": 1045, "12441": 1044, "12451": 1044, "12462": 1044, "12467": 1044, "12471": 1044, "12481": 1044, "125": [43, 86, 111, 124, 188, 324, 538, 994, 1005, 1015], "12513": 1045, "12514": 1044, "125140": 275, "12517": 1044, "12518": 1044, "12522": 1044, "125247168": 52, "12543": 1045, "12557": 1046, "12568": 1045, "12569": 1046, "12582": 1045, "12583": 1045, "1259": 57, "12599": 1045, "126": 418, "12612": 1044, "12613": 1045, "12625": 1044, "1263": 385, "12638": 1048, "12650": 1046, "126502": 203, "12669": 1045, "1268187": 229, "12685": 1044, "12699": 1044, "127": [146, 207, 1026, 1036], "12701": 1044, "12704": 1044, "127128": 147, "12715": 1045, "12732": 1045, "1276": 47, "12789": 1046, "128": [53, 54, 214, 366, 540], "12800": 1025, "12807": 1045, "12821": 1045, "12834": 1045, "12852": [1025, 1046], "12855": 1045, "12860": [232, 1045], "12861": 1045, "12866": 1025, "1288": [45, 374], "12881": 1044, "12883823": 415, "12887": 1046, "129": [119, 176, 216, 1026, 1036], "12908": 1045, "12914884": 1006, "12916": 1045, "12927": 1046, "12946": 1044, "12949": 1044, "12955": 1045, "12972": 1045, "12983": 1045, "12988": 1045, "1299": [874, 1015], "12th": 1017, "13": [43, 45, 49, 50, 52, 79, 106, 126, 130, 143, 146, 148, 182, 187, 192, 200, 223, 229, 239, 265, 266, 273, 276, 278, 310, 312, 316, 329, 342, 374, 376, 379, 385, 392, 415, 423, 500, 514, 517, 536, 537, 555, 556, 586, 610, 639, 643, 738, 763, 822, 852, 867, 874, 900, 901, 1001, 1005, 1006, 1011, 1012, 1015, 1020, 1034, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1048], "130": [49, 385, 1026], "1300": 83, "13003": 1048, "13005": 1044, "13007": 1045, "130107": [229, 245, 492], "13013": 1046, "13042": 1051, "13046": 1044, "13077794": 362, "13086": 1045, "131": [43, 53, 89, 223, 224, 354, 385, 1005, 1026, 1037], "13124": [1044, 1045], "13134": 1044, "13142": 1045, "13146": [1025, 1046], "13151": 1045, "13157": 1045, "13164": 1045, "13165": 1044, "13174": 1045, "1319": [874, 1015], "131900": 102, "13193": 1045, "132": [43, 47, 53, 89, 202, 418, 1026], "13204": 1048, "13213": 1046, "1322": 626, "13221": 1044, "13222543": 614, "13227": 1025, "1323": 214, "13231": 1046, "13233": [374, 497, 498], "13240": 1045, "13241": 1045, "13250": 1045, "13251": 1045, "13253": 1045, "13260": 1045, "13266": 1045, "13276": 1044, "13279": 1045, "13283": 1045, "13286": 995, "13290": 1046, "133": [53, 89, 220, 1026], "13312": 1044, "13317": 1045, "13328": 1045, "13333": 1045, "13336": 1045, "13350": 1045, "13363": 1045, "13366": 1045, "13374": 43, "13375": 43, "13376": 43, "13377": 43, "13378": 43, "1338": 267, "13382": 1045, "13389": 1045, "13392": 1046, "13393": 1046, "13397": 1045, "134": [86, 127, 146, 197, 266, 272, 1026, 1039], "13422": 1045, "13427": 1045, "13439": 1045, "13447": 1045, "13459": 1045, "13467": 1046, "13485": 1045, "13486": 1045, "13496": 1045, "135": [169, 326, 376], "13511": 1047, "13524": 1045, "1353": 353, "13531": 1045, "13545": 1045, "13549": 1045, "13554": 1045, "13562": 1045, "13575": 1046, "13601": 1045, "13607": 1045, "13609": 1046, "13618": 1046, "13620": 1045, "13628": 1045, "13636": [1001, 1045], "13641": 1045, "13649": 1053, "13651": 1045, "137": [251, 385, 1037], "13704": 1046, "13707": 1046, "1371": 538, "13726": 1046, "1373": 1002, "1374": 538, "13741": 1045, "13769": 1046, "13772": [1044, 1045], "13773": 1046, "13779": 1045, "1378": 232, "13780": 1045, "1379": 232, "138": [84, 385, 418, 1005, 1026], "13806": 1046, "1382": 528, "13822072286080167": 280, "13835": 1045, "1385": 477, "13864": 1045, "13875": 1046, "13877": 1045, "13894": 1045, "13896": 1046, "139": [232, 292, 341, 385, 418, 455, 465, 695, 699, 1006, 1026], "13900": 1048, "13902": [1025, 1046], "13903": [1044, 1045], "13910": 1045, "13911": [1025, 1046], "13925": 1046, "13933": 1046, "13938": 1046, "13947": 1045, "1396": 1002, "13960": 1046, "1397": 385, "13974": 1045, "13983521": 309, "13987": 1046, "13988486": 229, "13995": 1046, "13th": 64, "14": [43, 50, 52, 73, 82, 88, 93, 95, 96, 99, 106, 112, 124, 126, 164, 187, 188, 199, 203, 205, 232, 236, 241, 246, 266, 271, 277, 278, 287, 291, 292, 315, 316, 326, 348, 351, 367, 374, 376, 377, 392, 397, 403, 404, 411, 415, 500, 502, 514, 557, 558, 639, 647, 696, 818, 822, 874, 998, 1001, 1005, 1015, 1020, 1026, 1034, 1036, 1037, 1039, 1040, 1044, 1049], "140": [86, 328, 418, 514, 520, 521, 522, 559, 560, 1006], "1400": [83, 477], "14012": 1046, "1402": 47, "14024": 1045, "14028": 1046, "14035": 1046, "14048": 1047, "14053": 1045, "14067": 1045, "14075": 1047, "14087": 1045, "14092": 1045, "141": [234, 289, 505, 538, 908, 1006, 1026], "14108": 1046, "14114": 1046, "1414": 47, "14156": 232, "14170": 1046, "14180": [1025, 1047], "1419": 43, "14194": 1046, "14197": 1045, "142": [43, 418], "1422": 43, "14228": 367, "14237": [1044, 1045], "14259": 1046, "14264": 1047, "142857": 232, "14286": 1046, "14287": 1046, "14294": 1046, "14296": 1046, "143": [169, 376, 474, 475, 1017, 1036, 1037], "14300": 1047, "14302": 251, "14305": 1046, "14309": 1045, "14336": 1046, "14338": 995, "1435": 47, "14356": 1046, "14357": 1046, "14378": 1046, "14381": 1046, "14393": 1045, "144": [238, 272, 385, 1026, 1036], "1440": 43, "14406": 1046, "1441": 626, "14410151": 614, "14417": 1046, "144204": 147, "1443": [47, 1011], "14430": 1046, "14446": 1048, "14458": 1046, "14464": 1046, "14475": 1046, "144943": 62, "14496": [385, 1045], "145": [52, 103, 411, 1026], "14510": 1046, "14516": 1047, "14520": 1046, "14538": 1046, "14544": 1046, "14549": 1046, "1456": 232, "14582": 1025, "14591": 1046, "14593": 1046, "14595": 1046, "145957": 147, "146": [45, 232, 418, 1026], "1460": [144, 155], "14602": 1046, "14603365": 229, "14623": 1046, "14625": 47, "14629": 1046, "1464": 242, "14646": 1046, "14647": 1046, "14680": 1046, "14682": 1046, "14696": 1047, "147": 1006, "14702": 1046, "147022": 203, "14704": 1046, "14706": 1046, "1471": 1011, "14710": 1046, "14732": 1046, "14736": 1051, "1474": 385, "14740": 1046, "14764": 1046, "148": 1039, "14800": 1048, "14810": 318, "14848": 1047, "14849": 1046, "14862": 1051, "14864": 1046, "14865": 1046, "14869": 1046, "14872": 1046, "14884": 1046, "14890": 1046, "14894": 1046, "14898": 1046, "149": [1006, 1036], "14900": 1046, "14902": 1046, "14907": 1046, "14908": 1046, "14933": 1046, "14936": 1046, "14971": 1046, "14975": 1050, "14982": 1048, "1499": 47, "15": [43, 45, 46, 51, 52, 53, 54, 66, 67, 70, 75, 79, 86, 87, 94, 95, 99, 105, 106, 111, 113, 119, 130, 139, 141, 143, 144, 147, 150, 164, 166, 168, 171, 175, 182, 186, 187, 188, 203, 211, 216, 228, 232, 236, 239, 241, 251, 259, 260, 266, 267, 275, 277, 280, 283, 284, 287, 296, 300, 307, 308, 312, 314, 316, 327, 332, 340, 342, 345, 348, 351, 358, 373, 374, 377, 379, 392, 397, 403, 404, 415, 418, 419, 443, 457, 493, 500, 501, 502, 535, 541, 549, 550, 559, 560, 602, 608, 613, 648, 656, 665, 667, 672, 680, 682, 696, 822, 837, 860, 889, 994, 1000, 1001, 1002, 1005, 1008, 1009, 1015, 1020, 1026, 1032, 1034, 1038, 1048, 1050, 1051], "150": [43, 45, 118, 119, 139, 147, 160, 235, 239, 241, 285, 328, 346, 349, 376, 415, 420, 508, 605, 606, 829, 830, 831, 1005], "1500": [74, 83, 90, 95, 100, 119, 234, 238, 257], "15000": [676, 691, 865, 866], "15005": [1047, 1049], "15007": 1048, "15010": 1046, "15028": 1046, "15038": 1046, "150407": 385, "15044": 1046, "15049": 1046, "150527": 308, "15053": 1046, "15057": 1046, "1506": 387, "15080": 1046, "15082": 1046, "15083": 1046, "15084": 1046, "15086": 1046, "15094": 1046, "15096": 1046, "15099": 1046, "150x4": 118, "151": [81, 271, 326, 385, 418, 505, 1017, 1026], "15100": 1046, "1511007": 255, "151101": 255, "15119": 1046, "15120": 1046, "15126": 1048, "15138": 1046, "15160": 1046, "15179": 1047, "152": [91, 354, 385, 1026], "15257": 1046, "1527": 864, "15274": 1046, "15297572": 540, "153": 667, "15304": 1046, "15319": 1025, "153244303321897735": 411, "15361": 1048, "15375": 1046, "15380": 1047, "15382": 1046, "15393": 1046, "154": [310, 655, 1006], "1542": 385, "15427": 1048, "15429": 1046, "15436": 1047, "154453": 308, "15463": 1046, "15488": 1046, "15490": 1046, "15503": 1047, "15521": 160, "15524": 1046, "1553374": 411, "1553511": 411, "1554": 864, "15550": 1025, "15557": 1046, "15558": 1047, "15582": 1047, "156": [169, 187, 376], "15611": 995, "15622": 1047, "15625": 1046, "156252": 203, "15636": 1048, "15652": 1047, "15655": 1047, "15661": 1046, "15669": 1047, "15695354": 328, "15699552": 1006, "157": 385, "15707": 1047, "15709": 1047, "15730": 1047, "157334": 308, "15751": 1046, "15760": 1046, "15762": 1047, "15763": 1048, "15773": 1047, "15782": 1047, "15785": 1047, "15797": 1046, "158": [77, 418, 673], "15806": 1047, "15810": 1046, "15834": 1047, "15863": 1046, "15864": 1047, "15868": 1046, "15879": 1046, "15888": 1046, "15898": 1046, "159": [86, 333, 374, 1026, 1036], "1590": 310, "15918": 1047, "1592": 502, "15926": 1047, "15930": 1046, "15933": 1046, "15936": 1046, "15937": 1046, "159419": 255, "15946": 1047, "15947": 1046, "15948": 1050, "15950": 1047, "15953": 1047, "15959": 1047, "15963": 1047, "1597": 266, "15980": 1047, "15984": 1050, "15996": 1046, "15e": 121, "16": [43, 44, 52, 57, 64, 78, 83, 84, 87, 99, 106, 111, 121, 124, 164, 188, 207, 213, 214, 215, 232, 234, 235, 246, 250, 266, 274, 275, 276, 296, 310, 312, 316, 321, 346, 354, 359, 374, 376, 377, 385, 392, 397, 403, 404, 415, 416, 419, 445, 460, 462, 474, 475, 481, 482, 501, 502, 506, 520, 538, 539, 574, 593, 599, 600, 611, 612, 643, 654, 655, 658, 659, 660, 661, 686, 687, 817, 822, 834, 883, 909, 917, 980, 981, 982, 994, 1001, 1005, 1015, 1020, 1032, 1034, 1036, 1037, 1041, 1042, 1044, 1045], "160": [249, 302, 994, 1026], "1600": 83, "160030": 203, "16006": 1047, "1600x1600": 87, "16018": 1050, "16021": 1047, "16052385": 131, "16061": 1050, "16066": 1048, "16069": 1047, "16075": 1047, "16076": 1046, "16084": 1047, "16090": 1047, "161": [67, 321, 1026], "16103": 1047, "16111": 1047, "16112": 1047, "16117": 1047, "161245": 87, "16132": 1047, "16144": 385, "16147": 376, "16149": 1047, "16159": [385, 1047], "1616": 476, "16182": 1047, "16183": 1047, "162": [91, 376], "16224": 1047, "1623": 57, "1624": 502, "16245": 1047, "16257": 1047, "1626": 1025, "16261": 1047, "16266": 1047, "16280": 1047, "16289": 1048, "163": [169, 289, 376, 1013], "163224": 203, "16323": 1047, "16326": [43, 1048], "16327": 43, "16328": 43, "16329": 43, "16330": 43, "16331": 1047, "16335": 1048, "16352": 1048, "16362": 1047, "16379": 43, "16380": 43, "16381": 43, "16382": 43, "16383": 43, "16392": 1048, "16397": [1046, 1047], "164": [344, 418, 1026], "164009": 275, "16401": 1047, "16403": 1047, "16431": 1047, "16437": 1047, "16442": 1047, "16443186": 1006, "16449": 1049, "16451": 1047, "16466": 1047, "16484": 1047, "16493": 1048, "165": [303, 1006, 1026], "16500": 1046, "16505": 1046, "16508": 1047, "16530": 1048, "16531": 150, "16539": 1047, "16585": 1047, "166": [43, 310, 385, 1005, 1036], "16605": 1050, "16619": 1048, "16622": 1047, "16625": 1048, "16632": 1047, "16655": 1047, "16663": 1047, "166667315173": 52, "16692": 1047, "16695": 1051, "167": [385, 1036], "16718": 1047, "16726": 1047, "16728": 1047, "16747": 1051, "16748": 1050, "168": 1036, "1680": 376, "16801": 1047, "16837": 1047, "16841": 1047, "16849": 1047, "1689": 354, "169": [91, 254, 310, 1026], "16906": 1048, "1691": 1001, "169106": 272, "1693": 908, "16935": 1048, "16948": 1050, "16950": 1047, "169504": 232, "16979946": 1006, "1698": 653, "16981": 1047, "16985": 1048, "16993": 1047, "17": [52, 57, 74, 83, 85, 106, 111, 150, 172, 187, 213, 239, 245, 266, 275, 307, 316, 349, 353, 374, 377, 384, 397, 403, 404, 411, 415, 447, 464, 490, 501, 502, 504, 527, 535, 540, 544, 551, 553, 554, 559, 563, 564, 573, 574, 601, 632, 653, 661, 662, 663, 670, 673, 676, 678, 691, 696, 733, 734, 744, 765, 770, 787, 788, 791, 793, 822, 846, 857, 872, 877, 878, 886, 888, 894, 910, 913, 916, 917, 918, 919, 953, 994, 995, 1006, 1008, 1015, 1026, 1032, 1034, 1036, 1037, 1038, 1039, 1042, 1045, 1050], "170": [79, 90, 91, 95, 385], "1700": 83, "170087": 308, "17021": 1047, "17032": 1047, "17036": 1049, "17038": 1048, "170388": 1006, "1706": 335, "17061": 1047, "17090": 1048, "17095": 1048, "171": [86, 169, 227, 376, 385, 792, 1005, 1026], "17107": 1048, "1714": 1001, "17148": 1048, "17159": 1048, "17169": 1049, "17187": 1048, "17192": 1048, "17193": 1048, "172": [385, 497, 498, 653, 1001], "17204": 1047, "17205": 1047, "17210": [52, 1047], "17225": 1048, "17226834": 86, "1723": 46, "17233": 1048, "17235": 1047, "17236387": 217, "17266": 1050, "17289014": 174, "1729": 188, "173": [385, 588], "17309": 1047, "17317": 1048, "17357": 1047, "17360": [47, 1047], "17367": 1048, "17370318": 229, "17374": 43, "17375": 43, "17376": 43, "17377": 43, "17378": 43, "17379": [43, 52, 1048], "1738": 1005, "17386": 1048, "17388": 1052, "17396": 1048, "174": [146, 242, 310, 385, 588], "17406": 1048, "17412": 1048, "17414": 1048, "17427": 1048, "17433": 1047, "17443": 1049, "17448": 1048, "1747": 188, "17474": 232, "17478": 1048, "17491": 1048, "17499": 1048, "175": [385, 1015], "17526": 1048, "175298": 275, "17546": 1048, "17569": 1048, "17578": 1048, "17598": 1048, "176": [385, 841, 1006, 1013], "17603": 1048, "17604": 1048, "17606": 1048, "17608": 1048, "17609": 1048, "17610": 1048, "17612": 1048, "17614": 1048, "17616": 1048, "17622": 1049, "17633": 1048, "17644": 1048, "17651": 1048, "17661": 1048, "17662": 1048, "17679": 1048, "17694": 1047, "177": 385, "17702": 1048, "1771": 354, "17742": 1047, "17743": 1049, "17746": 1049, "17750": 1049, "17759": 1048, "17769": 1049, "17772": 1049, "17777": 1048, "17785": 1049, "178": [46, 376, 385, 514, 852], "178000": 314, "17804": 1048, "17812": 1047, "17819": 1050, "17826": 1048, "17833": 1048, "17848": 1047, "1785": 354, "17856": 1048, "17864": 1048, "17876": 1048, "17878": 1048, "179": [257, 376, 385, 418, 1026, 1036], "17914": 1047, "17928620": 373, "17932": 1048, "17935": 1048, "17937": 1048, "17959": 1047, "1797": [91, 270, 310, 331, 376, 423, 448, 506, 536, 537, 538, 539, 603, 604, 692, 693, 694, 695, 697, 1008], "17984": 1048, "17985": 1047, "17985197": 229, "17987": 1048, "17992": 1048, "17995": 1047, "17997": 1048, "17_760": 150, "17t14": 373, "18": [43, 46, 47, 57, 75, 79, 82, 86, 93, 95, 106, 128, 147, 180, 187, 225, 238, 241, 246, 266, 272, 310, 316, 318, 332, 353, 354, 355, 379, 385, 415, 416, 419, 450, 462, 496, 504, 505, 506, 508, 509, 514, 539, 540, 542, 544, 545, 561, 562, 563, 564, 567, 568, 569, 570, 573, 575, 576, 577, 578, 579, 581, 582, 593, 598, 603, 604, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 650, 653, 662, 663, 675, 718, 722, 735, 738, 739, 745, 747, 764, 774, 801, 802, 825, 841, 864, 865, 866, 872, 878, 886, 887, 898, 908, 909, 916, 917, 918, 919, 920, 951, 952, 994, 1003, 1005, 1015, 1026, 1032, 1034, 1036, 1037, 1040, 1041, 1043, 1044, 1046, 1047], "180": [62, 70, 118, 257, 258, 259, 262, 263, 301, 305, 385, 506, 1026], "1800": 83, "18000": [355, 374], "18010": 1049, "18016": 1047, "18020": 1051, "1804243": 373, "18052": 1048, "18094": 1051, "181": [289, 310, 385], "18108182014": 180, "18114": 1048, "18121": 1048, "18124": 1048, "18149": 1048, "18167": 1048, "18170": 1050, "18176": 1048, "18197458": 362, "182": [171, 261, 277, 310, 385, 418, 1026], "18222": 1048, "18256": 1048, "18266": 1048, "18269": 1048, "18278": 1048, "18280": 1048, "18293": 1048, "18298": 1051, "183": [332, 385, 1006, 1036], "18302": 1048, "18310": 1050, "18326": 1048, "18328": 1049, "18334": 1048, "18341": 1048, "18343": 1048, "18368": 1049, "18370": 1048, "18393": 1049, "18394": 1048, "184": [43, 214, 265, 310, 385, 803, 1026], "18405": 1048, "18406": 1048, "18410": 1048, "18429": 1048, "18433": 1049, "18444": 1049, "18447": 1048, "18459": 1049, "1847": 46, "18482": 1050, "18488": 1052, "185": [86, 169, 180, 255, 376, 385, 865, 866, 1026], "1850": [45, 374], "18508": 1048, "18510": 1048, "18525": 1048, "18527": 1048, "18528": 1048, "18543": 1049, "18545": 1048, "18555": 1054, "185654": 275, "185659": 203, "18595": 1048, "186": [214, 310, 385, 792, 1005], "18607": 1048, "18612": 1048, "18622": 1048, "18639": 1048, "18649": 1049, "1865": 47, "18682": 1048, "18689": 1053, "18691": 1048, "187": [272, 385, 588, 1006, 1038], "1871": 1020, "18723": 1052, "18736": 1049, "1874": 1020, "18746": 1048, "1875": 985, "18768": 1048, "188": [97, 169, 176, 376, 385, 588, 1026], "1880": 385, "18805": 1051, "18815268": 255, "188153": 255, "18818427": 671, "18832": 1050, "18842": 1049, "18843": 1054, "18846": [374, 491, 492], "1887": 354, "18898": 1049, "189": [214, 385, 905, 1018], "18925": 1049, "189267": 275, "18959": 1049, "189631": 203, "18964": 1049, "18975": 1050, "189830": 326, "18987": 1048, "19": [43, 49, 52, 57, 176, 187, 218, 234, 262, 266, 280, 289, 316, 317, 332, 376, 377, 393, 397, 403, 404, 411, 419, 422, 447, 496, 520, 521, 522, 540, 544, 545, 551, 553, 554, 561, 562, 563, 564, 568, 569, 570, 586, 593, 611, 652, 662, 663, 670, 671, 672, 675, 676, 678, 680, 682, 691, 711, 785, 789, 803, 804, 818, 831, 836, 837, 839, 840, 854, 855, 874, 885, 906, 910, 913, 916, 917, 918, 919, 994, 1005, 1015, 1026, 1032, 1034, 1036, 1037, 1038, 1039, 1041, 1044, 1053], "190": [50, 146, 232, 281, 305, 374, 385, 502], "1900": 83, "19002": 1049, "19004": 1049, "19011": 1049, "19024": 1049, "19035": 1049, "1903908407869": 217, "19041": 1049, "19046": 1049, "19047631514961908949361222113": 52, "1905": [169, 376], "19052": 1049, "19055": 1049, "19069": 1049, "19075": 1051, "19085": 1050, "191": [129, 385, 1006, 1026], "19112072e": 196, "19126": 1048, "19145": 355, "19158": 1050, "19159": 1049, "19162": 1049, "19172": 1049, "19174891": 309, "19179": 1048, "19182": 1048, "19198": 1049, "192": [146, 217, 282, 340, 385, 1026, 1036], "19210": 1049, "19211": 1048, "19234": 1048, "19244": 1049, "19263": 1049, "19271": 1048, "19278": 1049, "192913": 275, "192938": 52, "19296": 1049, "19297": 1049, "193": [385, 418, 719, 790, 1018], "19308": 1048, "1931": 111, "19310": 1049, "19317": 176, "19336": 1049, "193548": 232, "19356": 1049, "1936": 376, "19365": 1049, "19390": 1049, "19391": 1049, "193949": 275, "194": 310, "1940": 232, "19401": 1049, "19407": 1048, "19411": 1049, "19415": 1049, "19417": 1048, "194239": 385, "19426": 1049, "19428": 1049, "19438": 1050, "19459": 1049, "19472": 1049, "19473": 1049, "1948": 57, "19483": 1049, "19490": 1050, "19491": 1049, "19499": 1049, "195": [237, 497, 498, 1026], "1950": [376, 1005], "1951": 232, "195133": 385, "19520": 1049, "19522393": 229, "19527": 1049, "19564": 1049, "19568": 1049, "19571": 1049, "19579": 1048, "1958": [176, 416, 418, 536], "19580": 1048, "196": [905, 1018], "1960": [631, 720], "19616": 1049, "19631": 1049, "1964": [694, 698, 884, 896, 1002], "19641": 1049, "19643": 1049, "19646": 1048, "19659": 1048, "19662693": [848, 849], "19664": 1052, "19669": 1049, "196795181": 52, "19680": 1050, "196861": 203, "19689": 1050, "19703": 1048, "1972": 376, "19721": 1048, "19727": 1048, "1973": [376, 409], "19731": 1055, "19732": 1048, "19733": 1049, "19734": 1049, "1974": [411, 419, 714], "19747": 1050, "1975": 1008, "19752": 1049, "19766": 1049, "197666": 275, "1977": 639, "1978": [232, 1001], "19784": 1049, "19788": 1049, "1979": [411, 729, 773], "19790": 1049, "19794": 1050, "19799": 1049, "198": [200, 1036], "1980": 376, "19803308": 115, "1981": [232, 1001], "19829832": 229, "1983": [411, 735, 888], "19836": 1049, "1984": [111, 112, 413, 477, 916, 917, 1021], "19847": 1048, "1985": [187, 411, 709, 719, 790], "1986": [995, 1021], "19869": 1049, "1987": [411, 611, 612, 796, 797], "198766": 275, "19879": 1049, "1988": 376, "19883": 1049, "19888": 1048, "1989": [281, 639, 792, 865, 866, 1001, 1008], "199": [651, 795, 1020], "1990": 374, "19906": 1049, "19908": 1049, "1990a": 409, "1991": [520, 521, 522], "19916": 1050, "1992": [169, 374, 376, 415, 418, 571, 572, 649, 1001], "19922": 1048, "19924": 1048, "1993": [169, 376, 477, 668, 689, 690, 1021], "19934": 1049, "19939": 1048, "1993apr6": 102, "1994": [169, 374, 376, 648], "19948": 1049, "1995": [169, 272, 376, 409, 418, 557, 558, 838, 905, 1006], "1996": [64, 150, 411, 418, 422, 447, 520, 521, 522, 559, 560, 1015], "1997": [136, 374, 416, 418, 539, 558, 694, 698, 1001, 1002, 1005], "1998": [150, 272, 374, 376, 416, 418, 559, 560, 838, 843, 874, 1006, 1007, 1009, 1015, 1019], "19982": 1048, "1999": [179, 374, 409, 411, 413, 416, 418, 440, 453, 460, 472, 477, 538, 545, 559, 560, 563, 564, 727, 902, 910, 911, 913, 914, 1011, 1017], "19th": 411, "1_": 1015, "1_000": [44, 64, 70, 104, 126, 150, 171, 176, 178, 188, 245, 269, 349, 410, 541, 543, 705, 803, 826, 827, 835], "1d": [2, 136, 138, 184, 188, 215, 245, 293, 296, 305, 329, 348, 359, 379, 386, 388, 392, 393, 412, 417, 467, 470, 621, 634, 637, 657, 661, 664, 667, 688, 707, 716, 717, 723, 733, 734, 738, 742, 787, 788, 791, 800, 850, 851, 852, 853, 854, 856, 858, 859, 860, 873, 925, 928, 930, 934, 935, 967, 991, 1006, 1026, 1036, 1041, 1042, 1043, 1045, 1049, 1050, 1054, 1055], "1e": [44, 45, 46, 49, 55, 63, 80, 121, 169, 171, 174, 176, 177, 178, 179, 180, 182, 187, 195, 207, 214, 215, 221, 228, 232, 237, 241, 247, 252, 257, 260, 263, 270, 280, 283, 309, 319, 324, 327, 335, 340, 342, 349, 353, 385, 423, 446, 450, 455, 462, 465, 474, 475, 481, 485, 486, 487, 535, 536, 537, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 563, 564, 565, 566, 596, 601, 610, 612, 613, 615, 617, 618, 619, 623, 624, 626, 627, 629, 631, 642, 644, 645, 646, 648, 649, 650, 651, 652, 653, 656, 657, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 693, 694, 695, 696, 697, 698, 699, 732, 789, 801, 802, 818, 843, 844, 845, 846, 847, 848, 849, 857, 865, 866, 873, 903, 904, 908, 909, 910, 911, 912, 913, 914, 990, 994, 1005, 1009, 1013, 1015, 1019, 1044, 1049, 1050, 1051], "1e0": [171, 247, 263, 280, 994], "1e1": [171, 177, 214, 247, 342], "1e15": 180, "1e2": [49, 171, 178, 247, 263, 342], "1e3": [45, 46, 49, 171, 177, 182, 247, 283, 327, 994], "1e4": [283, 663, 683, 902, 1017], "1e5": [45, 176, 196, 198, 204, 283, 617, 618, 619, 623, 624, 626, 627, 629, 897, 902, 1017], "1e6": [47, 49, 207, 245, 329, 353, 355, 366, 540, 902, 1005, 1017], "1e7": 385, "1er": 419, "1f": [52, 58, 83, 86, 124, 195, 214, 245, 257, 259, 279, 321, 328, 354, 355], "1gb": 366, "1kastner": 1043, "1m": 970, "1mb": [367, 1041], "1mo": 176, "1nn": 376, "1or": 419, "1px": 310, "1qlettinn8oi": 353, "1st": [0, 43, 93, 118, 179, 215, 317, 886, 887], "1z": 419, "2": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 160, 162, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 368, 373, 374, 375, 376, 377, 379, 381, 383, 384, 385, 386, 388, 391, 392, 393, 397, 402, 403, 404, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 481, 482, 483, 485, 486, 487, 488, 497, 500, 504, 505, 508, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 581, 585, 586, 588, 589, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 605, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 707, 708, 709, 710, 711, 712, 715, 717, 718, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 767, 768, 771, 772, 773, 775, 777, 778, 779, 780, 782, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 898, 899, 901, 902, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 923, 930, 931, 932, 934, 935, 936, 940, 944, 950, 951, 952, 953, 954, 955, 956, 958, 959, 965, 966, 967, 968, 969, 970, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1026, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1041, 1055], "20": [2, 43, 46, 47, 52, 54, 57, 62, 63, 64, 69, 70, 74, 75, 78, 80, 81, 83, 87, 88, 94, 100, 109, 113, 119, 121, 128, 130, 137, 141, 143, 144, 147, 151, 155, 156, 158, 162, 164, 165, 166, 169, 177, 186, 188, 189, 197, 203, 204, 206, 210, 211, 213, 214, 215, 218, 223, 226, 227, 228, 229, 231, 237, 245, 251, 259, 261, 262, 266, 272, 273, 275, 276, 278, 283, 284, 287, 289, 292, 296, 297, 298, 299, 300, 303, 310, 316, 317, 318, 322, 323, 324, 325, 327, 331, 332, 335, 339, 341, 345, 347, 351, 354, 355, 359, 360, 372, 376, 377, 379, 384, 385, 397, 403, 404, 411, 418, 419, 444, 449, 450, 452, 467, 468, 472, 474, 475, 481, 491, 492, 493, 494, 496, 498, 500, 501, 504, 506, 508, 509, 515, 516, 519, 520, 527, 535, 540, 541, 546, 549, 550, 552, 556, 559, 560, 563, 564, 565, 566, 567, 573, 574, 586, 593, 594, 596, 598, 601, 603, 633, 634, 649, 653, 662, 670, 671, 672, 680, 682, 700, 708, 712, 717, 720, 729, 730, 743, 760, 761, 771, 796, 797, 801, 802, 803, 804, 818, 830, 831, 832, 835, 837, 840, 841, 842, 845, 846, 853, 854, 865, 866, 867, 868, 870, 872, 873, 881, 882, 883, 884, 889, 903, 904, 906, 907, 912, 915, 920, 926, 932, 934, 935, 938, 982, 994, 1001, 1005, 1008, 1011, 1012, 1015, 1018, 1026, 1028, 1029, 1031, 1032, 1034, 1036, 1042, 1045, 1048, 1050, 1051], "200": [69, 70, 79, 83, 87, 93, 107, 124, 137, 147, 154, 175, 200, 209, 215, 218, 219, 220, 226, 231, 235, 253, 257, 273, 279, 281, 282, 312, 315, 333, 339, 341, 342, 360, 362, 374, 391, 416, 418, 423, 443, 457, 471, 474, 475, 526, 537, 538, 539, 542, 543, 544, 547, 551, 588, 653, 655, 675, 683, 696, 750, 818, 865, 866, 906, 910, 911, 912, 913, 914, 926, 1005, 1020, 1026], "2000": [54, 63, 75, 83, 107, 122, 128, 192, 260, 263, 272, 289, 307, 325, 354, 374, 376, 411, 412, 418, 423, 455, 465, 537, 538, 563, 693, 695, 697, 747, 792, 801, 854, 884, 896, 1002, 1005, 1011, 1017, 1055], "20000": [57, 123], "200000": [232, 873], "20002": 1049, "2001": [2, 64, 176, 189, 266, 271, 408, 411, 418, 440, 454, 455, 456, 465, 515, 563, 564, 568, 569, 632, 638, 643, 649, 695, 700, 739, 792, 889, 901, 939, 995, 997, 1001, 1005, 1011, 1013, 1015, 1017, 1020], "2002": [96, 409, 411, 418, 440, 451, 597, 598, 730, 760, 855, 903, 997, 1005], "20023": 1049, "2003": [2, 51, 176, 408, 411, 416, 419, 454, 455, 465, 517, 519, 693, 697, 843, 845, 1001, 1002, 1007, 1017, 1044], "20030": 1049, "20031": 1050, "2004": [44, 169, 272, 289, 374, 376, 411, 413, 416, 476, 539, 611, 612, 693, 697, 709, 747, 787, 904, 999, 1001, 1002, 1007, 1020], "2005": [62, 64, 112, 376, 409, 440, 442, 857, 1001, 1008, 1018], "20056": 1049, "2006": [2, 50, 305, 374, 418, 421, 465, 502, 561, 562, 569, 570, 614, 615, 618, 623, 626, 653, 670, 671, 745, 792, 793, 801, 843, 901, 918, 919, 1001, 1005, 1007, 1010, 1017, 1018], "2007": [0, 73, 201, 374, 411, 420, 443, 455, 457, 463, 465, 570, 660, 695, 721, 738, 741, 762, 763, 799, 997, 1001, 1003, 1005], "20072": 1049, "2008": [51, 413, 415, 416, 481, 538, 567, 594, 649, 668, 689, 690, 696, 720, 730, 760, 838, 843, 847, 864, 999, 1002, 1003, 1005, 1006, 1007, 1010, 1011, 1020], "20087": 1049, "2009": [2, 135, 138, 139, 149, 199, 411, 415, 416, 418, 419, 523, 524, 532, 535, 541, 542, 544, 545, 548, 551, 557, 563, 564, 639, 675, 683, 700, 839, 916, 917, 951, 952, 1001, 1005, 1006, 1012, 1021], "200_000": [873, 1052], "200j": 162, "200m": 374, "200x": 1036, "201": [82, 115, 146, 169, 376, 588, 1026], "2010": [0, 110, 188, 277, 278, 408, 411, 413, 415, 416, 424, 478, 540, 708, 712, 723, 724, 744, 833, 865, 866, 997, 1001, 1005, 1009, 1019, 1023, 1036], "2011": [0, 188, 385, 416, 419, 539, 542, 544, 545, 551, 594, 631, 642, 662, 734, 995, 1009, 1019, 1023, 1036], "20117": 1049, "2012": [0, 112, 409, 418, 559, 560, 567, 643, 747, 994, 998, 1005, 1023, 1036], "2013": [0, 192, 376, 411, 415, 416, 540, 730, 760, 997, 1005, 1023, 1037, 1038], "2014": [0, 373, 405, 416, 418, 421, 534, 611, 612, 626, 627, 662, 696, 865, 866, 951, 952, 1002, 1009, 1029, 1039], "20145": 1050, "2015": [0, 188, 373, 712, 725, 727, 728, 865, 866, 1005, 1012, 1029, 1040, 1041], "201520": 203, "20155": 1049, "20159": 1049, "2016": [0, 239, 373, 411, 994, 1041, 1042], "20161": 1049, "20165": 1049, "2017": [0, 272, 373, 409, 411, 422, 447, 1005, 1042, 1043], "2018": [0, 214, 232, 419, 453, 994, 1005, 1029, 1043, 1044], "2019": [0, 188, 377, 411, 455, 465, 696, 1002, 1005, 1012, 1015, 1044, 1045, 1046], "2020": [0, 374, 1046, 1047, 1048, 1049], "20200": 1049, "20207": 1049, "20209": 1049, "2021": [0, 377, 379, 675, 1005, 1048, 1049], "2022": [0, 367, 411, 418, 709, 1015, 1050, 1051], "2023": [0, 391, 405, 409, 1051, 1052], "20231": 1049, "2024": [1053, 1054], "20240": 1049, "20250": 1049, "20272": 1049, "20297": 1049, "203": [86, 354], "20312": 1049, "203174": 203, "20326": 1049, "20331": 1051, "2034": [353, 374], "20380": 1049, "20385": 1049, "2039": 275, "204": [1013, 1018], "20408": 1050, "20415": 1051, "20416": 1049, "20431": 1049, "20477": 1049, "20512": 1049, "20515": 1049, "20521": 1049, "20524": 1052, "20526": 1049, "20528": 1049, "20531": 1049, "20534": 1049, "20552": 1049, "20554": 1049, "20560": 1049, "20567": 1050, "2058": 47, "20583": 1049, "20597": 1049, "2061": 47, "20617": 1051, "20619": 1049, "20638": 1049, "20640": [141, 183, 374, 493], "20652": 1049, "20653": 1050, "20657": 1049, "20670369": 328, "20673": 1049, "20683": 1049, "207": [213, 310, 1026, 1036], "2071716": [848, 849], "20727": 1049, "20729": 1049, "2074": 47, "20752": 1049, "2075215": 229, "20753": 1050, "20761": 1049, "207667": 275, "2079": [47, 277], "208": [169, 292, 376], "20802": 1051, "20803": 1050, "20811": 1050, "20842": 1049, "20843": 1049, "20860": 1050, "20880": 1049, "208864": 203, "20899": 1049, "209": [174, 268, 745, 884, 1026], "20904": 1049, "20959": 1049, "20960": 1049, "20961": 1049, "20_000": 292, "20new": 374, "20newgroup": [66, 184, 193, 206, 230, 310, 492, 662, 834, 837, 1001, 1026], "20news_hom": 374, "20newsgroup": [229, 372, 1036], "20th": 712, "21": [43, 52, 77, 105, 119, 169, 187, 192, 203, 214, 215, 232, 262, 266, 292, 310, 314, 316, 327, 376, 377, 381, 383, 397, 408, 418, 419, 444, 448, 477, 481, 533, 536, 565, 566, 567, 573, 574, 592, 593, 595, 631, 673, 691, 758, 804, 818, 831, 874, 881, 883, 889, 906, 922, 951, 997, 1001, 1005, 1006, 1015, 1026, 1032, 1034, 1036, 1037, 1039, 1043, 1044, 1046], "2100": [83, 324], "2102": 548, "21020": 1051, "21026": 1050, "21032": 1050, "21038": 1050, "2107": 277, "21078": 1050, "21079": 1050, "21080": 1049, "21086": 1050, "21093": 1049, "211": [277, 326, 334, 884, 896], "21109": 1050, "21114": 1050, "211217613": 1044, "21130": 1049, "21145": 1049, "21148": 1050, "2117": 335, "21177": 1050, "21179": 1049, "21194": [80, 1049], "21195": 1049, "21199": 1049, "212": [146, 169, 277, 334, 376, 472, 504, 1011], "21219": 1050, "212197e": 232, "21243": 80, "21251": 1049, "2126": 251, "21271": 1049, "21278": 1050, "21295": 1049, "21298": 1050, "213": [54, 247], "21301203": 174, "213056e": 232, "21310": 1050, "21316": 1050, "21330": 1050, "21334": 1050, "21336": 1049, "21340": 1049, "21341": 1050, "21351": 1049, "21389": 1049, "2139": [214, 232], "214": [172, 588], "21408": 1050, "21425": 1050, "21430": 1050, "21432": 1050, "21434": 1050, "21436": 1050, "21443888": 229, "21445": 1050, "21448": 1050, "21469": 1051, "21481": [1049, 1050], "21482": 1050, "21493": 1049, "215": [167, 360, 588, 1026], "21517": 1049, "21534": 1050, "21542": 1050, "21544347": 51, "21552": 1049, "21565": 1050, "2156660": 328, "21567": 1050, "21569": 1050, "21573": 1050, "21576": 1050, "21578": [47, 1049], "2159048": [657, 667, 688], "216": [169, 1018], "21606": 1050, "21616": 745, "21617": 1050, "21632": 1050, "21694": 1049, "217": [539, 545, 803], "21701": 1050, "21705": 1050, "2171": 46, "21713": 1050, "21724": 1050, "2173": [201, 660, 1001], "21735": 1050, "21741": 1049, "21762": 1050, "21767": 1050, "2179": 47, "218": [376, 474, 719, 790], "2180": 57, "21800": 1050, "21805": 1050, "21807": 1053, "21808": 1050, "21809": 1052, "21814": 1050, "21832": 1050, "21833": 1049, "21837": 1050, "21845": 1049, "2186": 47, "2187": 47, "21871": 1049, "21873": 1050, "21880": 1050, "21881": 1050, "21888": 1050, "218997": 203, "219": [271, 287, 304, 1026], "2190": 47, "21901": 1050, "2191": 47, "21915": 1049, "21917": 1049, "2192": [201, 660, 1001], "21938": 1051, "21954": 1050, "21987": 1050, "21988": 1050, "21991": 1049, "21998": 1050, "22": [43, 52, 77, 139, 140, 142, 150, 182, 183, 184, 187, 188, 189, 231, 239, 254, 262, 266, 294, 310, 312, 316, 320, 323, 326, 329, 332, 335, 355, 379, 384, 397, 408, 440, 451, 475, 481, 491, 492, 499, 500, 508, 519, 528, 535, 541, 546, 549, 550, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 598, 613, 631, 632, 636, 638, 649, 651, 655, 657, 659, 662, 663, 665, 667, 669, 673, 692, 696, 706, 708, 717, 761, 773, 782, 787, 788, 792, 804, 805, 809, 818, 823, 825, 828, 829, 830, 831, 832, 833, 834, 835, 852, 854, 856, 858, 859, 860, 865, 866, 867, 869, 872, 888, 899, 908, 910, 911, 912, 913, 914, 916, 917, 918, 919, 946, 947, 997, 1005, 1015, 1026, 1032, 1034, 1036, 1039, 1044, 1047, 1049], "220": [79, 266, 1036], "2200": [83, 374, 497], "22002": 1050, "22014": 1051, "22015": 1050, "22016": 1050, "2202": 47, "22027": 1050, "2204": 47, "220446049250313e": [474, 475, 481, 654, 655, 658, 659, 660, 686, 687], "22050": 1049, "22054": 1051, "22058": 1050, "22059": 1050, "22062": 1050, "22063": 1050, "22064": 1050, "22065": 1050, "221": [115, 153, 266, 313, 1026, 1039], "22106": 1050, "22108": 1050, "2211": 638, "22111": 1050, "22114": 1050, "22118": 1050, "22119": 1050, "2212": 47, "22120": 1050, "22137": 1050, "22148": 1050, "22149": 1050, "22150": 1050, "22154": 1050, "22159": 1050, "2216": 47, "22181": 1050, "22188": 1050, "2219": 47, "22191": 1050, "22199": 1050, "222": [115, 153, 335, 1020], "22203": 1050, "22206": 1050, "2221": 47, "22212": 1050, "22215": 1050, "22217": 1050, "22218": 1050, "2222": 660, "22223": 1050, "22235": 1050, "22237": 1050, "2224": 1038, "22240": 1050, "22248": 1050, "22249": 1050, "2225": 47, "22254": 1050, "22255": 1050, "2226": 47, "22268": 1051, "22269": 1051, "22284": 1050, "22288": 1050, "223": [115, 153, 169, 376], "22300": 1050, "22314355": 594, "22318": 1050, "22320": 1050, "22356": 1050, "22361": 376, "22370": 1050, "223745": 214, "224": [86, 115, 153, 188, 411, 729, 826], "22409": 1052, "22410": 1050, "22412": 1050, "22438": 391, "2246": 232, "22476": 1050, "22486": 1050, "22493": 1050, "22498": 1050, "225": [244, 418, 1026], "22504": 411, "22506": 1052, "22508": 1050, "22518": 1051, "22525": 1050, "22526": 1050, "22527": 1051, "22537": 1050, "22548": 1050, "22553": 1050, "22554": 1051, "22562": 1051, "22566": 1050, "22578": 1050, "225806": 232, "22595": 1050, "226": [249, 411, 422, 447, 1026], "22604": 1050, "22606": 1055, "22629": 1051, "2263": 47, "22635": 1050, "2264": 47, "2266": 47, "22665": 1051, "2267": 47, "2268": 47, "22685": 1050, "22687": 1050, "22692": 124, "22694": 1050, "22695": 1050, "22696": 1050, "22697": 1050, "227": [272, 411, 729], "22710": 1051, "2273": 47, "22735": 1050, "22747343e": 111, "2275": 47, "22775": 1050, "22784907": 831, "22806": 1050, "22808": 1050, "22830": 1050, "2284": 188, "22856": 1050, "2286": 374, "22866": 1050, "22868": 1050, "2287": 374, "2288": 374, "22891": 1050, "22898": 1051, "22899": 1050, "229": 1005, "22908": 1050, "22913": 1050, "22950": 1050, "22953": 1050, "22965": 1051, "22968": 1051, "22982": 1050, "22993": 1051, "22nd": 442, "23": [43, 57, 63, 70, 83, 124, 152, 155, 169, 184, 214, 235, 243, 253, 255, 262, 266, 310, 316, 318, 320, 323, 324, 325, 327, 328, 332, 376, 385, 397, 418, 424, 434, 443, 450, 455, 457, 465, 468, 470, 471, 478, 481, 482, 483, 485, 486, 487, 493, 496, 504, 505, 506, 508, 509, 514, 516, 518, 526, 528, 542, 543, 544, 547, 551, 558, 560, 562, 564, 565, 566, 569, 572, 573, 574, 611, 612, 615, 631, 634, 636, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 679, 682, 683, 684, 685, 721, 734, 782, 834, 840, 841, 842, 851, 859, 866, 869, 881, 888, 896, 897, 906, 909, 911, 914, 917, 919, 932, 934, 935, 946, 947, 952, 1005, 1026, 1032, 1034, 1036, 1037, 1043, 1044, 1045, 1048], "230": 588, "2300": [83, 203], "23023": 1050, "23033": 1050, "23034": 1050, "23036": 1050, "23038": 1051, "23040": 1050, "23046": 1050, "23047": 1050, "23077": 1050, "23079": 1050, "23095": 1050, "23097": 1050, "23098": 1050, "23099": 1052, "231": [50, 125, 305, 374, 411, 422, 447, 502, 588, 1026], "23101": 1051, "23113": 1050, "23115": 1050, "23127": 1051, "23139": 1051, "23149": [374, 501, 1050], "23194": 1050, "23197": 1051, "23198": 1050, "232": [105, 266, 353, 1005, 1026], "23210": 1051, "23214": 1050, "2323": [693, 697, 1002], "23252": 1051, "23256": 1050, "23264": 1050, "23271": 1050, "23273": 1050, "23275": 1051, "23299": 1050, "2331": 43, "23317": 1053, "2332": 43, "2333": 43, "2334": 43, "2335": 43, "23358": 1050, "2336": 385, "23370": 1050, "23395": 1050, "233mb": 45, "234": [86, 843, 847, 865, 866, 1007], "2341": 528, "23410": 1050, "234137": 203, "23442": 1051, "23446": 1051, "23461": 1051, "23470": 1051, "23471": 1050, "23480": 1051, "235": 318, "235430": 275, "23548": 1050, "2357juan": [1050, 1051, 1052], "23585": 1051, "23595": 1052, "23604": 1051, "23608": 1050, "23619": 1051, "23636": 1050, "23637": 1051, "23668876": [657, 667, 688], "236720": 203, "23683": 1051, "23689075": [657, 667, 688], "237": [258, 285, 1026], "23726": 1051, "23731": 1052, "23734": 1051, "237703": 203, "23773583": 111, "23786125": 210, "23798": 1051, "23819": [1051, 1052], "23833": 1050, "23834": 1051, "23865": 1051, "23874": 1051, "238744": 203, "23877": 1051, "238955": 275, "239": 1036, "23905": 1051, "23935": 1051, "23977": 1051, "23990": 1050, "23993": 1051, "24": [43, 44, 52, 99, 150, 169, 184, 188, 192, 199, 222, 239, 251, 266, 284, 292, 320, 321, 322, 324, 327, 328, 331, 332, 377, 379, 383, 397, 403, 404, 411, 418, 419, 440, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 463, 465, 467, 472, 473, 474, 475, 476, 477, 478, 479, 492, 493, 494, 496, 500, 508, 519, 520, 521, 522, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 547, 548, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574, 585, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 617, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 702, 703, 704, 706, 712, 718, 731, 750, 757, 801, 802, 804, 807, 808, 818, 825, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 869, 871, 872, 873, 874, 877, 878, 880, 882, 883, 884, 885, 886, 888, 898, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 946, 947, 951, 979, 985, 994, 1012, 1015, 1026, 1032, 1034, 1036, 1044, 1045, 1046, 1047, 1049], "240": [43, 52, 79, 1013, 1036], "2400": 83, "24000": 524, "24015": 1050, "24017": 1050, "24027": 1052, "24051": 1051, "24058": 1051, "24075": 1051, "24076": 1052, "24083": 1052, "24084": 1051, "24087": 1050, "241": [418, 571, 572], "2410": 548, "24140": 1052, "24141": 1051, "24145": 1052, "24146": 1051, "24160": 326, "242": [888, 1036], "24218": 1051, "24230": 1052, "24245": 1051, "24258": 1051, "24264": 1051, "24283": 1051, "243": [245, 259, 588, 1026], "2431": 478, "24317": 1051, "24338": 1051, "24350": 1051, "24354": 1051, "24365": 1051, "243802": 308, "244": [266, 289, 588], "24404831511191221642141021252626109": 52, "24405": 1051, "2441": 232, "24412": 1051, "24421": 1051, "24433": 1051, "24446": 1050, "244466": 255, "24465": 1051, "2449": 385, "245": [54, 1017, 1038], "24512": 1051, "24523": 1051, "24528": 1051, "24538": 1051, "24539": 1051, "24543": 1051, "24556": 1051, "24568": 1052, "245961": 147, "245mb": 355, "246": [199, 269, 1013, 1026, 1036], "24617": 1051, "2463": 1001, "24630": 1051, "24631": 1050, "24637": 1051, "24640578": 111, "24645": 1051, "24667": 1051, "24668": 1052, "24677": 1052, "24683": 1051, "24688": 1051, "24699": 1051, "247": [334, 888, 1026], "24714": 1051, "24747": 1051, "24750": 1051, "24755": 1051, "24767": 1051, "24769": 1052, "24838": 1053, "24849": 1051, "24855": 1051, "24856": 1051, "24871": 1052, "24873": 1051, "2487575": 192, "2487591": 192, "24882": 1052, "24889": 1051, "24894": 1051, "249": [164, 266, 1026], "24935": 1052, "24951": 1051, "25": [43, 44, 45, 46, 48, 49, 50, 52, 57, 61, 63, 77, 87, 88, 111, 115, 124, 128, 130, 139, 147, 165, 166, 172, 182, 187, 195, 204, 218, 239, 241, 259, 266, 272, 305, 307, 310, 312, 314, 326, 331, 332, 353, 360, 362, 366, 385, 415, 418, 419, 422, 447, 480, 484, 505, 508, 525, 574, 601, 622, 682, 738, 800, 821, 834, 860, 878, 883, 885, 886, 889, 897, 898, 900, 901, 949, 953, 985, 1001, 1005, 1006, 1008, 1015, 1026, 1036, 1038, 1044, 1047], "250": [49, 83, 98, 147, 192, 234, 497, 696, 826, 994, 1017, 1026, 1043], "2500": 1005, "25000": 77, "2501": [169, 376], "25044": 1052, "250639": 203, "25067": 1051, "25077": 1051, "25080": 1051, "25089": 1051, "25093": 1052, "25094": 1051, "251": [169, 236, 376], "25102": 1052, "25120": 1052, "25129": 1051, "25147": 1051, "25163598": 387, "25172": 1051, "25174": 1051, "25177": 1052, "25183501383331797": 280, "25186": 1052, "25188": 1051, "25190": 1052, "25193977": 1006, "25196": 1052, "252": [169, 236, 376, 538, 884, 896], "25209": 1052, "25214": 1052, "25220": 1052, "25232": 1052, "25250": 1051, "25251": 1052, "25257": 1052, "25274": 1051, "25275": 1053, "25291": 1052, "25291366": 362, "25294": 1052, "25295": 1051, "25296": 1051, "25297": 1052, "25299": 1052, "253": [146, 538], "25308": 1052, "25312": 1051, "25334": 1052, "25341": 1051, "253445": 147, "25349312e": 196, "2535": [472, 477], "25354": 1051, "2536": 479, "25363": 1051, "25367": 1052, "25370": 1051, "25387": 1052, "254": [312, 1026], "25402": 1052, "25417": 1052, "25432": 1052, "25438": 1052, "25443": 1052, "25477": 1051, "2548": 210, "25490": 1052, "25499205": 540, "255": [124, 292, 309, 318, 324, 374, 418, 497, 498, 565, 566], "25500": 1051, "25506": 1052, "25511": 1051, "25531": 1052, "25563": 1051, "25570": 1051, "25587": 1052, "25589": 1051, "256": [77, 86, 146, 318, 367, 374, 411, 418, 452, 471, 541, 550, 567, 864, 896, 906, 1050], "25601": 1052, "25619": 1051, "25629": 1052, "25638": 1051, "25659": 1052, "25664": 1051, "25672": 1052, "25677": 1052, "2568": 1045, "25694": 1051, "25697": 1052, "257": [236, 270], "25704": 1051, "25713": 1052, "25719016": 1006, "25732": 1052, "25733": 1052, "25744": 1051, "25747": 1051, "25752": 1052, "25774": 1051, "25784": 1052, "2579": 696, "258": 236, "25805": 1052, "25813": 1052, "25814": 1052, "25815": 1052, "259": [50, 236, 305, 374, 418, 502, 571, 572], "259031": 203, "259297": 203, "25931": 1052, "25956": 1052, "25973": 1052, "25987": 1052, "25991": 1054, "25th": [43, 251, 886], "26": [43, 80, 87, 111, 119, 123, 176, 187, 250, 266, 332, 385, 574, 652, 733, 787, 826, 884, 896, 952, 1005, 1015, 1036, 1039, 1040, 1048, 1054], "260": [271, 1049], "26019": 1052, "26021": 1052, "26033": 1052, "2605": 696, "26082": 1052, "26093": 1052, "26106": 1052, "26108": 1052, "26113448": 166, "26120": 1054, "26121": 1052, "26163": 1053, "26194": 1052, "262": 1036, "26207": 1052, "26242": 1052, "26243": 1053, "26253567e": 111, "26264": 1052, "26267": 1053, "26278": 1053, "26286": 1052, "26286057": 229, "26289": 1052, "26299": 1053, "26315": 1053, "26316": 176, "26318": 1052, "26323": 1052, "263234": 255, "26323428": 255, "26325": 1052, "26333": 1052, "26337": 1052, "26362917": 229, "26366": 1053, "263758": [587, 591], "26376": 1052, "26385": 1052, "26386": 1052, "26386883": 174, "26391": 1053, "264": 245, "2640": 839, "26400": 1052, "26410": 1053, "26411": 1053, "26416": 1052, "26424": 1052, "26433": 1052, "26454": 1052, "26459": 1053, "26464": 1053, "26466": 1052, "265": [111, 739, 843, 847, 1007, 1026], "26503": 1052, "26506": 1053, "26521": 1052, "2652124": 819, "26525": 1053, "26551": 1052, "26566": 1052, "26579": 1052, "26593496": 229, "26600": 1052, "26602": 1052, "26616": 1053, "26634": 1053, "26642044": 670, "26644": 1052, "26648": 1053, "26653": 1052, "26657": 1052, "2666": 1005, "2667": 502, "26674": 1053, "26683": 1053, "267": 1036, "2671": 1015, "26721": 1053, "26734": 1053, "26736": 1053, "26744": 1053, "26748": 1052, "2675": 46, "26754": 1052, "26760": 1052, "26765": 1053, "267703": 87, "26772": 1052, "26786": 1053, "26789": 1053, "268": [245, 286], "26814": 1052, "268147": 275, "26828": 1053, "26830": 1053, "26831": 1053, "26837": 1054, "26840": 1053, "26855": 1053, "26862": 1053, "26893": 1052, "26896": 1053, "269": [258, 515], "26903": 1052, "26909": 1053, "26913": 1052, "2692": 1015, "26931": 1052, "26934744": 131, "26940": 1052, "26944": 1053, "26957": 1053, "26th": [411, 730, 760, 1005], "27": [43, 45, 52, 57, 67, 81, 87, 266, 331, 332, 350, 376, 411, 419, 521, 528, 609, 717, 792, 793, 889, 909, 1005, 1015, 1036, 1038], "270": [199, 332], "27000": 232, "27002": 1052, "27005": 1053, "27006": 1053, "27017": 1053, "27018": 1053, "27044": 1052, "27054655": 229, "27058": 1053, "27096": 1055, "27098": 1053, "27100": 1053, "27104": 1053, "27110": 1053, "27137": 1053, "27139": 1053, "2714": 251, "271411": 255, "27161": 1053, "27161955": 166, "27166": 1053, "27167": 1052, "27179": 1053, "27185": 1053, "27204": 1053, "27219": 1053, "272214": 588, "27239": 1053, "27240": 1053, "27243": 1052, "27250": 1053, "27252": 1053, "2727": 562, "27274": 1053, "27277": 1053, "27291": 1053, "27292": 1052, "27301": 1053, "27308": 1053, "27309": 1053, "27311": 1052, "27314": 1053, "27315": 1053, "27328": 1053, "27336": 1053, "2734": 385, "27344": 1054, "27372": 1053, "27381": 1055, "27389": 1053, "274": 515, "27412": 1055, "27417": 1053, "27431": 1053, "27438": 1053, "27456": 1054, "27468": 1052, "27478": 1053, "27490": 1053, "27491": 1054, "27499706": 51, "275": [43, 332, 1039], "27500": 1053, "27526": 1054, "27538": 1053, "27544": 1053, "27556": 1053, "27558": 1053, "27560": 1054, "27566": 1054, "275706": 87, "27573": 1052, "27576": 1054, "27577": 1053, "27580": 1052, "27583": 1052, "27584": 1054, "275851": 255, "2759": [900, 901], "27597342": 115, "276": 272, "27601": 1053, "27614": 1053, "27624": 1053, "2763": [424, 478], "27636": 1054, "27639": 1053, "27645": 1053, "27650": 1053, "27651": 1053, "27657": 1054, "27668": 1053, "27670": 1053, "27675": 1053, "27678": 1053, "277": [1013, 1038], "27700": 1054, "27702": 1053, "27710": 1053, "27718": 1053, "27720": 1053, "27721": 1053, "27734": 1053, "27736": 1055, "27757": 1053, "27760": 1053, "27772182": 52, "278": [94, 275, 376, 848, 849, 1026], "2780": 385, "27800": 1054, "27801": 1053, "27817": 1053, "27821": 1053, "27828": 1053, "27834": 1053, "27835": 1053, "27841": 1053, "27844": 1054, "27865": 1053, "27875": 1055, "27898": 1053, "27899": 1053, "279": [180, 1001], "27904": 1054, "27937": 1054, "27966": 1055, "27979": 1053, "27990": 1054, "28": [43, 99, 147, 169, 187, 230, 239, 266, 281, 309, 331, 332, 376, 385, 411, 415, 453, 460, 1015, 1026, 1036, 1039, 1042], "280": 332, "28009951": 831, "2802": 57, "28040": 1054, "28048": 1053, "28051": 1054, "28053": 1054, "28064": 1055, "28074": 1053, "28085": 1054, "28090": 1053, "28092": 1054, "28095": 1053, "28096": 1055, "281": [130, 1026], "28102": 1054, "28106": 1055, "28111": 1053, "28121": 1053, "28136": 1054, "28160": 1054, "28165": 1053, "28167": 1053, "28179": 1055, "2818": 473, "28184": 1053, "28187": 1054, "28188": 1053, "28191": 1053, "28195": 1053, "28198": 1053, "282": 1036, "28205": 1054, "28207552": 229, "28210": 1054, "28222": 1053, "28225276": 86, "2823": 335, "28233": 1053, "28235": 1053, "28240": 1053, "28241": 1053, "28247": 1053, "2825": 0, "28256": 1053, "28261": 1054, "28262": 1053, "28263": 1053, "28268": 1055, "28295": 1053, "2830": 0, "28306": 1054, "28327": 1053, "2833": 385, "28351": 1054, "28352": 1054, "28360": 1054, "28365": 1053, "28377": 1053, "28385": 1053, "28399": 1054, "284": 653, "28407": 1054, "28425": 1054, "284315": 266, "28432": 1054, "28435": 1054, "28471": 1054, "284806": 266, "284807": 266, "28483": 1054, "28491": 1054, "28494": 1055, "28498": 1054, "285": [255, 332, 728], "28521": 1054, "28552": 1054, "28557": 1054, "28582": 1054, "286": [418, 1026], "28604": 1054, "28612": 1054, "28622": 1055, "28637": 1055, "28651": 1054, "28664": 1054, "28670": 1054, "28692": 1054, "287": [188, 1017], "28701": 1055, "28703": 1054, "28712": 1054, "28718": 1054, "28722": 1054, "28756": 1054, "28763": 1054, "28768": 1054, "28773": 1055, "2879": 1043, "288": [539, 545], "28808734": 218, "28822": 1054, "28823": 1054, "28843": 1054, "28847": 1054, "289": [187, 319, 1026], "28915": 1054, "28925": 1054, "28934": 1055, "28936": 1055, "28951": 1054, "28975": [1049, 1055], "28988": 1054, "28992": 1055, "28x28": 309, "29": [47, 112, 172, 176, 205, 214, 218, 231, 239, 266, 273, 274, 326, 332, 376, 418, 563, 564, 694, 698, 785, 801, 860, 1001, 1002, 1019, 1026], "290": [332, 692, 693, 697, 1002], "290075": 203, "29014": 1055, "29018": 1054, "290584": 308, "29067": 1055, "29078": 1054, "291": [50, 169, 354, 374, 376, 1026], "29105": 1055, "29112": 1055, "29119": 1054, "29124": 1055, "29128": 1055, "29135": 1055, "29136": 1055, "2914": 498, "29141": 1055, "29142": 1055, "29143": 1055, "29144": 1055, "29158": 1055, "29179": 1054, "292": [397, 418, 739], "29207": 1055, "29210": 1055, "29212": 1055, "29227": 1055, "29235": 1054, "29239": 1055, "29260": 1055, "29265": 1055, "29266": 1055, "29267": 1055, "29269": 1054, "2928359": 229, "293": 245, "29300": 1055, "29312": 1055, "29314": 1054, "29316": 176, "29327": 1054, "29329": 1055, "29330": 1054, "29336": 1054, "29354": 1055, "29389": 1055, "2939931": 328, "294": [225, 1026], "29400": 1055, "29401": 1054, "29402": 1055, "29404": 1055, "29419": 1055, "29433": 1055, "29442": 1055, "29462": 1055, "29473397": [848, 849], "29475": 1055, "295040e": 232, "29540": 1055, "29545": 1054, "295505e": 232, "296": 1017, "2961": 655, "29612": 1054, "29634": 1055, "29639": 1055, "296575": 203, "29677": 1055, "29694": 1054, "29696": 1055, "297": 374, "29709": 1055, "29710": 1055, "29738": 1055, "29751": 1055, "29773": 1055, "29779": 1055, "29780": 1054, "298": [165, 239, 1013, 1026], "29818": 1055, "29835": 1055, "29842": 1055, "298688": 272, "29869": 1055, "29880": 1055, "29884": 1055, "29898468": 229, "299": [73, 136, 162, 354, 684, 1026], "299546e": 232, "29997": 1055, "2_": 997, "2_000": 135, "2_2": [650, 651, 656, 657, 658, 659, 660, 664, 665, 666, 667, 676, 685, 686, 687, 688], "2_f": 656, "2_fro": [657, 666, 667, 688], "2_poli": 272, "2_y": 1007, "2c": [647, 656, 676, 677, 678, 679, 691, 997], "2d": [2, 43, 69, 71, 74, 79, 81, 82, 86, 89, 94, 95, 118, 120, 122, 125, 127, 131, 153, 184, 208, 215, 220, 234, 235, 236, 239, 241, 244, 245, 301, 331, 332, 339, 342, 361, 373, 375, 379, 388, 393, 411, 412, 416, 419, 421, 444, 455, 465, 467, 470, 484, 491, 493, 494, 496, 497, 498, 504, 505, 506, 508, 514, 518, 537, 545, 553, 588, 590, 639, 647, 661, 676, 695, 742, 783, 829, 833, 837, 875, 925, 928, 930, 934, 935, 951, 967, 990, 991, 999, 1001, 1002, 1005, 1012, 1016, 1021, 1026, 1036, 1040, 1043, 1044, 1045, 1048, 1050, 1054], "2e": [200, 285, 287], "2e6": 1005, "2ec5ac": 316, "2f": [44, 47, 50, 52, 57, 67, 74, 77, 79, 80, 83, 85, 95, 97, 100, 115, 119, 124, 130, 147, 150, 154, 155, 164, 187, 188, 192, 195, 203, 205, 210, 214, 229, 230, 231, 232, 241, 245, 251, 266, 271, 275, 276, 278, 280, 281, 282, 286, 300, 301, 307, 314, 317, 325, 329, 342, 353, 354, 362, 412, 415, 418, 700, 832, 835], "2fbf01908075": 709, "2fx": 260, "2g": [236, 239, 701, 1047], "2h": 417, "2k": 182, "2l": [421, 626], "2n": [700, 997, 1009], "2n_": 1001, "2nd": [93, 118, 179, 317, 411, 422, 447, 534, 1015, 1051], "2x": 1036, "2x2": [339, 411, 758], "2x_iy_im": 374, "31": [43, 102, 110, 232, 266, 273, 297, 324, 331, 332, 408, 419, 504, 565, 566, 601, 653, 675, 683, 969, 1006, 1026, 1036], "310": [187, 1026], "3109306": 174, "311": 354, "312": [150, 1039], "3121": 712, "313": [195, 1026], "313276e": 232, "315": [292, 354, 376], "316": [54, 176, 180, 346, 615, 618, 629, 884, 1026], "31622776601683794": 160, "3164764": [214, 232], "317": [88, 176, 1026], "31760": 1001, "318": 453, "318387": 308, "319": [54, 81, 172, 1026], "31958": 176, "31973683": 229, "31bit": 1047, "31st": [215, 887], "32": [43, 44, 52, 84, 119, 186, 189, 250, 286, 325, 332, 373, 377, 384, 393, 408, 418, 419, 448, 568, 569, 586, 593, 638, 680, 887, 889, 934, 935, 969, 1013, 1015, 1026, 1036, 1039, 1042, 1044, 1045, 1048, 1049, 1050, 1053], "320": [294, 374, 994, 1019, 1026, 1036], "3204": 1042, "321301": 62, "322": [45, 354, 474, 475], "3221": [696, 1002], "323": 245, "323200": 62, "324": 374, "324084": 203, "3245": [696, 1002], "325": [59, 206, 1026], "325198e": 232, "3252": 601, "326": [345, 1026], "32634568": 218, "3264": 46, "327": [63, 734], "3272984419327777": 357, "3273": 750, "327407": 255, "327605": 255, "32767": 1047, "32782448": 174, "3279": 46, "328": [124, 354, 734, 1026], "3288": 548, "329": 453, "329616": 203, "32987858": 569, "32bit": [2, 366, 969, 1054], "32x32": 376, "33": [43, 47, 111, 214, 326, 332, 361, 374, 376, 384, 385, 411, 419, 464, 536, 641, 652, 716, 717, 733, 734, 742, 747, 787, 788, 791, 810, 832, 834, 836, 895, 919, 986, 1001, 1005, 1015, 1036, 1044], "330": 332, "331": [327, 331, 1026], "331263": 203, "3315057": [830, 831], "3317": 214, "332": [354, 896], "333": 850, "3333": 502, "333333": 232, "33333333": [858, 1015], "334": 174, "334795": 275, "335": 43, "335919": 308, "336": [150, 385, 1015], "336188": 308, "3367": 1043, "337": [61, 385, 1026], "3375": 326, "338": 251, "3383": 46, "3384": 354, "3387": 354, "339": 354, "3397": [668, 689, 690], "33rd": [905, 1018], "34": [43, 47, 124, 147, 169, 171, 297, 310, 331, 332, 361, 376, 415, 524, 533, 574, 601, 653, 671, 720, 768, 1026, 1036], "340": [247, 331], "34118": 374, "34125758": 229, "3415": [668, 689, 690], "341523": 308, "3419": 275, "341949": 203, "342": 826, "34279478": 229, "3433": 46, "34346583": 86, "344": [267, 309, 349, 1026], "3445": 46, "345": [100, 169, 208, 376, 1026], "34545455": 1001, "3456": 46, "34586917": 229, "346": [418, 505, 559, 560], "3467": 619, "347": [122, 1026], "347717": 147, "34867495": 1006, "349": [135, 354, 385, 557], "34990341": 115, "35": [43, 45, 46, 48, 50, 88, 103, 137, 157, 187, 188, 194, 201, 241, 289, 317, 331, 332, 548, 652, 653, 660, 706, 710, 711, 731, 745, 760, 786, 793, 841, 994, 1001, 1005, 1011, 1012, 1015, 1036, 1038], "350": [179, 187, 1026], "351390": 272, "352": [272, 385], "352124": 203, "35278655": 229, "3534": 57, "3539": 102, "354394": 147, "3551": 46, "355440": 272, "355445": 147, "356": [54, 1013], "356497": 147, "3565178": 969, "357": [53, 169, 354, 376, 504, 909, 1026], "3573": 831, "35776189065725783": 322, "3582": 46, "358295": 203, "358990": 203, "359": [110, 1026], "3591": 1045, "36": [43, 45, 46, 52, 53, 123, 169, 177, 187, 232, 251, 345, 361, 376, 385, 418, 419, 559, 560, 574, 739, 763, 1005, 1036], "360": [135, 557], "360000": 308, "36047253": 229, "361": [374, 418, 559, 560], "362176": 326, "363": 52, "36308535": 328, "3635": 831, "364": [474, 475, 1037], "365": [326, 413, 476, 1026], "3659": 1041, "366": 361, "367": [354, 418, 1036], "36787944": 1003, "368": [123, 1026], "3680": [615, 618, 629], "3684": 839, "36851234": 820, "368896": 62, "3690483151908911912247722318110": 52, "3696": 617, "3697": 854, "3697178": 52, "37": [43, 199, 275, 286, 331, 361, 374, 418, 528, 720, 888, 899, 1015, 1036], "370": [353, 354], "370000e": 232, "370039": 203, "370738": 62, "372": [52, 354, 1026], "37257991": 115, "373": [66, 1026], "373333": 275, "375": [86, 452, 754, 1005], "376": [77, 1013, 1026], "37647423": 52, "376999": 62, "377": [149, 212, 1026], "37741762": 131, "377eb8": [75, 79, 95, 96, 241], "378": [187, 354, 418, 1036], "37815029": 229, "37845099": 362, "37967282": 1006, "379710": 187, "379763": 147, "38": [188, 205, 213, 218, 265, 281, 297, 327, 418, 636, 889, 951, 1005, 1015, 1036, 1037, 1038], "3800": 203, "3803": 355, "381327": 374, "382005": 147, "382120e": 232, "383": [200, 1026], "38353048": 229, "383973": 275, "384": [296, 354, 700, 909, 1026], "3840": 1044, "384338": 203, "384616559": 388, "385000e": 232, "3854": [668, 669], "3855": 1025, "385mb": 353, "386": 884, "3862": 872, "38629436": 1015, "38690531511642143152471231333333107": 52, "387": [354, 1036], "387580e": 232, "387599": 52, "387830e": 232, "388": [157, 1026], "3889": 478, "3889873516666431": 52, "389": [107, 597, 598, 1026], "3894": 619, "38994691": 328, "39": [43, 52, 169, 229, 255, 266, 374, 376, 377, 383, 411, 419, 499, 899, 917, 953], "3908844": 831, "391": 700, "3910350737": 388, "3911": 47, "3928": 473, "393": [153, 1026], "393297": 255, "39329747": 255, "394": [102, 180], "3947": 1017, "395": 43, "39568399": 540, "396": [102, 169, 376], "3964": [424, 478], "397": [211, 374, 1026], "3972": 659, "398": [183, 230, 354, 651, 1026], "3986": 232, "3996": 655, "3_": 997, "3_poli": 272, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 47, "3c479a6885bfa0438971388283a1ce32": 373, "3d": [100, 118, 127, 211, 234, 236, 238, 361, 419, 510, 590, 925, 967, 1043, 1044, 1046], "3f": [43, 45, 47, 50, 52, 54, 55, 59, 61, 63, 73, 75, 81, 82, 91, 103, 105, 107, 116, 135, 142, 150, 165, 169, 171, 172, 173, 175, 180, 186, 188, 189, 195, 199, 200, 206, 214, 216, 220, 229, 230, 232, 235, 245, 247, 270, 272, 273, 275, 278, 280, 283, 285, 292, 307, 329, 335, 353, 354, 355, 826, 833, 1013], "3k": 700, "3l": 421, "3llobo": 1051, "3m": 51, "3rd": [118, 179, 843, 886, 1007, 1015], "3ssnporch": 144, "4": [43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 57, 58, 62, 63, 64, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 95, 97, 98, 99, 102, 103, 104, 105, 106, 112, 113, 115, 116, 118, 119, 122, 123, 124, 125, 126, 127, 129, 130, 135, 136, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 160, 165, 169, 171, 174, 176, 177, 179, 180, 182, 183, 184, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 218, 220, 221, 222, 224, 227, 228, 232, 234, 241, 245, 246, 247, 248, 249, 250, 251, 253, 255, 257, 258, 259, 260, 262, 263, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 279, 280, 281, 283, 284, 286, 287, 291, 292, 294, 296, 297, 298, 299, 302, 307, 309, 310, 312, 313, 315, 316, 318, 320, 321, 322, 323, 324, 326, 327, 329, 331, 332, 333, 334, 335, 339, 341, 345, 346, 347, 349, 350, 351, 353, 354, 355, 361, 362, 367, 373, 374, 375, 376, 377, 379, 383, 384, 385, 388, 391, 392, 393, 397, 402, 403, 404, 409, 410, 411, 412, 413, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 440, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 494, 500, 508, 516, 517, 520, 521, 522, 528, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 581, 585, 586, 587, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 618, 621, 622, 623, 626, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 678, 681, 683, 684, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 702, 703, 706, 710, 711, 719, 720, 729, 730, 731, 736, 738, 746, 747, 748, 750, 751, 752, 753, 755, 756, 760, 772, 773, 785, 786, 792, 793, 794, 795, 798, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 834, 836, 837, 838, 839, 842, 843, 844, 845, 847, 852, 856, 857, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 895, 896, 900, 901, 902, 906, 908, 909, 912, 916, 917, 918, 919, 930, 931, 933, 934, 935, 936, 940, 951, 952, 953, 954, 956, 958, 959, 960, 961, 968, 975, 976, 977, 979, 980, 981, 982, 985, 986, 987, 994, 995, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1015, 1016, 1019, 1020, 1026, 1032, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1049, 1050, 1051, 1054], "40": [43, 54, 87, 99, 109, 118, 121, 151, 157, 171, 199, 205, 206, 208, 231, 236, 238, 249, 251, 261, 273, 298, 304, 309, 314, 331, 332, 340, 341, 343, 345, 347, 348, 361, 367, 374, 415, 449, 499, 521, 522, 803, 848, 849, 853, 865, 866, 994, 1006, 1015, 1036, 1037], "400": [44, 63, 83, 121, 149, 154, 171, 183, 220, 239, 284, 308, 354, 374, 416, 499], "4000": [92, 149, 260], "400000e": 232, "401": [270, 1026], "4017": 528, "4018260": 328, "402": [44, 276, 1026], "402344": 385, "4025": 1041, "403": 276, "404": 232, "40597": 291, "406": [188, 348, 693, 697, 1002, 1026], "4066": 46, "407": [169, 354, 376], "40842387": 51, "40887718": 90, "409": [70, 131, 144, 1026], "40945": 103, "4096": [121, 374, 416, 499], "40966": 373, "409717": 275, "41": [52, 169, 214, 251, 361, 374, 376, 460, 472, 484, 496, 625, 628, 639, 650, 651, 656, 662, 664, 665, 666, 668, 685, 689, 690, 703, 785, 843, 1007, 1011], "410": [221, 1026], "41075698": 417, "41076071": 417, "41082": 44, "411": [187, 335, 413, 423, 476, 537], "4110": 479, "41187": 176, "412": [500, 1001], "412021": 147, "41214": [214, 232], "41215": 232, "412304": 203, "413": [262, 1026], "414": [232, 412, 730, 760, 884, 896, 1005], "41421356": [767, 773, 1008], "4143": 391, "414810": 255, "414912": 150, "415": [353, 354, 1026], "416": [743, 1005], "416010": 326, "41666667": 754, "41691605": 131, "417": 291, "41726413": 131, "418": [96, 109, 1026], "41888636": 666, "419": [68, 620, 1026], "4194": 376, "42": [43, 44, 45, 52, 58, 61, 62, 63, 64, 67, 79, 80, 89, 109, 115, 119, 123, 128, 135, 142, 144, 145, 147, 148, 150, 151, 155, 165, 166, 183, 187, 189, 190, 192, 194, 203, 206, 208, 209, 216, 220, 221, 222, 228, 229, 231, 234, 235, 236, 241, 246, 247, 248, 251, 254, 266, 271, 273, 276, 285, 286, 292, 298, 299, 300, 307, 312, 313, 314, 315, 317, 319, 321, 323, 325, 334, 340, 342, 353, 354, 362, 367, 384, 385, 393, 402, 411, 415, 418, 419, 422, 440, 447, 481, 491, 496, 515, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 531, 533, 535, 541, 548, 549, 550, 561, 562, 569, 570, 571, 572, 574, 609, 610, 611, 612, 613, 681, 698, 699, 700, 764, 796, 797, 801, 803, 806, 826, 832, 834, 848, 849, 853, 857, 860, 900, 901, 903, 904, 905, 915, 918, 919, 926, 937, 951, 969, 973, 1008, 1015, 1032, 1033, 1036], "42074": 318, "421": [730, 760, 1005], "421087": 275, "42165": 144, "422": [597, 598, 730, 760, 1005], "4226193151": 52, "4232": [43, 52], "423641": 203, "424": 232, "4242": [43, 52], "42425183539869415": 322, "425": [235, 245, 619, 1026], "4254": [169, 376], "426": [106, 1026], "4260": [753, 756], "427": [169, 376, 510, 511, 587, 588, 591], "427329": 255, "4285714285714286": 1005, "429": [289, 354], "4294": 1042, "43": [104, 169, 178, 211, 245, 272, 292, 376, 384, 804, 818, 889, 1026], "430": [423, 537], "431": [354, 376], "4310090": 773, "432": [272, 413], "4325": 57, "433": [266, 376], "43348936": 229, "4337": 1001, "43475": 882, "436": [169, 245, 357, 1026], "4362": 1041, "437362": 203, "438": [187, 219, 1013, 1026], "43847489": 131, "43873": 355, "4387766": 52, "4394": 1044, "44": [43, 176, 187, 188, 199, 289, 296, 482, 785, 889, 909, 912, 987, 1005, 1012, 1036], "440": [187, 228, 1026], "440409": 203, "4406": 476, "44063": 52, "4409": [43, 52], "44139186": 309, "4415": 57, "442": [169, 179, 183, 376, 505], "4425765": [657, 667, 688], "44300751539296973": 52, "44300752": 52, "443238": 275, "44373091": 1006, "44381023": 218, "444": [222, 1026], "44412786": 540, "445": [266, 1013], "445978": 203, "446": [354, 730, 760, 1005], "447268": 87, "4472869": 131, "4474": 385, "4478": 1041, "448": [113, 138, 292, 1026], "4486": 548, "449": [44, 416, 539], "4496": [43, 52], "4497": 1025, "45": [75, 97, 105, 115, 119, 150, 165, 176, 189, 203, 214, 232, 279, 283, 284, 332, 342, 415, 418, 419, 568, 569, 631, 638, 650, 651, 656, 664, 665, 666, 685, 686, 687, 792, 801, 912, 995, 1005, 1013, 1023, 1032, 1036, 1039], "4500": 229, "45070924": 670, "451": 650, "45192": 160, "451933": 87, "452": [175, 177], "453": [85, 361, 1026], "454": 180, "4544": 43, "455": 318, "4550": 373, "456": [44, 416, 539], "45612256": 664, "45663524": 664, "457": 619, "4576": 839, "458333315172": 52, "459": [411, 445], "459074": 255, "46": [43, 52, 86, 214, 251, 362, 385, 597, 598, 686, 687, 720, 826, 912, 917, 1015, 1032], "46033": 500, "46043": 500, "46081961": 1006, "461": 385, "462234": 255, "463": [102, 232, 289, 1026], "463088": 52, "46428631511221642143151251232633109": 52, "465660": 62, "465730": 203, "466": 1012, "4666": 638, "46779927": 51, "468": [87, 91, 215, 1026], "46858513287221654": 327, "46874778": [657, 667, 688], "469": [91, 230, 1026], "46915237": [657, 667, 688], "4694": 528, "469474": 203, "46958558": 665, "4697": 81, "47": [43, 77, 210, 251, 374, 497, 498, 539, 545, 1026], "471": 376, "47140": 411, "47236": [374, 501], "47330339": 419, "4738": 1041, "474": [48, 1026], "475": 135, "47668": 355, "477": 142, "478": [279, 1026], "478522": 203, "47885": 355, "4792": 232, "47922861": 255, "479229": 255, "47928": 355, "4794": 203, "4795": 203, "4796": 203, "4798": 203, "47985": 500, "47987268e": 196, "4799": 203, "48": [43, 52, 115, 127, 150, 176, 255, 318, 376, 385, 411, 514, 601, 703, 750, 832, 843, 994, 1007, 1015, 1032], "480": [199, 354], "4801": 203, "4802": 203, "4803": 203, "4804": 203, "4805": 203, "4806": 203, "4807": 203, "4809": [203, 275], "481": 354, "4810": 203, "4812": 46, "4815": 203, "48204257": 1006, "4828": 203, "483": 652, "4830": 203, "4831": [203, 659], "4832": 203, "4836": 203, "484": [99, 180, 1026], "4841": 203, "484109": 203, "4846": 203, "485": 700, "4852": 203, "4855": 203, "4857596147013469": 93, "486": 216, "4860": 203, "4866": 203, "4867": 203, "4869": 203, "487": [52, 171, 728, 1026], "4872": 203, "48736655": 671, "4874": 203, "4876": 203, "48779915": 328, "4880": 203, "4881": [203, 1041], "48841": 500, "48842": 500, "4885": 203, "48858": 385, "4888": 203, "4891": 203, "48938813e": 196, "4894": 203, "48979592": 452, "4898431": [374, 496], "49": [43, 119, 169, 218, 251, 373, 374, 376, 384, 411, 453, 460, 717, 730, 760, 768, 797, 801, 804, 889, 1005, 1015, 1026, 1039], "490": [139, 266, 351, 1026], "491": 700, "492": [104, 188, 266, 647, 998, 1026], "4923": 653, "4928": 203, "493": [647, 908, 998], "4936": 203, "4939": 1043, "494021": 496, "4948": 46, "4951": 657, "495761": 385, "496": [143, 1026], "49665188": 218, "4967": 528, "4976": 601, "498": [192, 1026], "499": [169, 376, 385], "4995": 1042, "49999993": 1001, "4daf4a": [79, 95], "4dbd33": 119, "4e": 235, "4e9a06": [92, 97], "4eacc5": [92, 97], "4f": [46, 47, 57, 138, 146, 148, 229, 230, 232, 317, 915], "4i": 83, "4th": [169, 179, 376], "4x": [328, 385, 1051, 1055], "4x11": 296, "4x4": [376, 416, 419], "5": [43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 125, 127, 128, 130, 133, 135, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 160, 162, 164, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 214, 215, 216, 217, 220, 222, 225, 226, 227, 228, 229, 230, 232, 235, 236, 237, 239, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 301, 302, 304, 305, 307, 308, 309, 310, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 334, 335, 336, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 374, 375, 376, 377, 379, 383, 384, 385, 387, 391, 392, 393, 397, 403, 404, 405, 409, 410, 411, 412, 415, 416, 418, 419, 420, 421, 422, 423, 426, 440, 441, 442, 443, 445, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 472, 475, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 508, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 532, 535, 537, 538, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 556, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 586, 596, 597, 598, 601, 606, 608, 609, 610, 611, 612, 614, 617, 618, 619, 620, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 645, 647, 650, 651, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 692, 693, 695, 696, 697, 699, 700, 701, 703, 707, 709, 711, 713, 716, 717, 722, 724, 725, 726, 727, 728, 730, 731, 732, 734, 736, 739, 742, 743, 744, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 773, 774, 782, 785, 786, 788, 789, 791, 792, 793, 794, 795, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 865, 866, 867, 868, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 902, 908, 909, 910, 911, 912, 913, 914, 916, 918, 926, 930, 931, 934, 935, 939, 940, 950, 951, 952, 953, 954, 956, 958, 959, 967, 968, 973, 975, 976, 979, 980, 981, 982, 983, 984, 985, 994, 995, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1026, 1027, 1031, 1032, 1034, 1037, 1038, 1039, 1041, 1043, 1044, 1046, 1050, 1051, 1052, 1055], "50": [0, 43, 46, 49, 52, 54, 61, 68, 69, 73, 83, 85, 92, 93, 98, 99, 102, 103, 115, 119, 121, 124, 130, 135, 138, 141, 147, 150, 153, 154, 169, 172, 174, 175, 176, 177, 186, 187, 188, 195, 199, 209, 214, 217, 221, 222, 226, 228, 230, 232, 234, 238, 239, 244, 245, 247, 255, 266, 267, 272, 274, 275, 285, 292, 310, 312, 316, 323, 325, 332, 334, 336, 340, 348, 354, 374, 376, 379, 384, 399, 415, 418, 419, 420, 423, 445, 476, 482, 483, 504, 508, 525, 527, 530, 537, 543, 548, 557, 558, 573, 597, 598, 610, 612, 613, 619, 621, 662, 663, 670, 671, 672, 674, 680, 681, 682, 696, 717, 796, 804, 818, 837, 857, 908, 917, 1000, 1001, 1005, 1006, 1008, 1011, 1015, 1028, 1036, 1053], "500": [49, 79, 83, 90, 93, 94, 96, 115, 116, 128, 130, 139, 141, 148, 168, 171, 192, 227, 228, 235, 252, 253, 257, 258, 262, 266, 272, 275, 285, 286, 292, 298, 304, 316, 322, 327, 328, 346, 351, 366, 418, 424, 472, 473, 477, 478, 479, 484, 485, 486, 487, 615, 617, 618, 620, 625, 628, 629, 654, 655, 658, 659, 660, 684, 686, 687, 866, 994, 1020], "5000": [89, 200, 229, 230, 232, 323, 889], "50000": 61, "500000": 308, "5000000": 55, "50000000": 174, "50000013": 1001, "500526": 150, "500x500": 545, "5012": 1042, "5016": [413, 424, 478], "5029": [413, 424, 478], "503": [188, 1026], "503452": 308, "5036": 1043, "504185": 308, "50447799": 1006, "505": [332, 833, 1026], "507": 412, "50755672": 469, "507943": 275, "5082": 1025, "509": 355, "50941682": 1006, "50_000": [319, 354], "50sampl": 399, "51": [52, 61, 119, 176, 232, 289, 292, 411, 412, 770, 780, 785, 1001, 1032], "51082562": 594, "511": [305, 1026], "512": [58, 116, 213, 1026], "512281": 262, "512595": 308, "51292546": 616, "513": [63, 857, 1008, 1026], "513034": 308, "5131": [46, 1041], "51341712": 1003, "5141": 1042, "51462041": 853, "5149": 46, "515": 43, "515390": 385, "5166": 677, "5166646": 768, "517": [47, 455, 465], "517272": 262, "518": [136, 1026], "5182": 1041, "5186": 1041, "5193": 46, "51958": 176, "51963999": 111, "52": [43, 176, 214, 535, 637, 801, 951, 1036], "520": [632, 857, 995, 1008], "52003279": 1006, "5208": 203, "521": 119, "52106591": 131, "5211": 1043, "5212": 203, "522": 909, "5224167": 52, "5229": 1043, "523": [180, 528], "524": [52, 199, 1026], "5243": 419, "52433293": 419, "5244": 203, "525": [442, 632, 995], "5251": 1042, "526": 908, "526599": 203, "5279": 1043, "5282": 1041, "52875032": 665, "5289": 46, "5291": 1042, "5295": 1043, "52955942": 853, "5299": 1042, "53": [43, 86, 124, 251, 411, 418, 539, 545, 550, 796, 797], "530": [278, 1026], "5315170": 52, "5316": 353, "532": [263, 1026], "53284267": 255, "532843": 255, "533": 187, "5337": 1041, "534": 187, "5355": 1041, "5359": 1043, "536": [171, 176, 292], "5360": 1041, "537": [295, 1026], "53777511": 52, "538": 355, "53844117956": 768, "539": [236, 1026], "5395559": 229, "53959628e": 196, "54": [169, 192, 199, 214, 217, 251, 374, 376, 411, 494, 1037, 1038], "54035582": 768, "541": [455, 465], "5415": 1002, "5417": 232, "542": [169, 376], "5420": 548, "542052": 203, "54209": 160, "5425": 528, "543": [160, 199, 286, 1026], "5431": 1041, "543841": 203, "544": [322, 1026], "54434690031882": 105, "54488318": 388, "5460": 1042, "546068": 255, "54606834": 255, "54675220": 52, "5469": 376, "547": 361, "5488135": 388, "549": 63, "5495": 1041, "54980": 545, "55": [119, 187, 192, 209, 214, 232, 236, 332, 384, 411, 415, 494, 601, 804, 810, 818, 832, 1005, 1036], "550": [173, 1026], "5500": [326, 692, 1002], "550213": 203, "551": [126, 1026], "55102041": 452, "5515": 750, "552": 1005, "55212743": 362, "5523": 1025, "55249": 601, "55390036": 131, "554": [222, 230, 309], "5540": 1042, "55422893": 419, "555": 720, "5555555555555556": 280, "5557": 275, "5558": 46, "556": [175, 1026], "557": [168, 1026], "558": 247, "55800226": 229, "559": 620, "5591": [693, 697, 1002], "55968825": 650, "56": [43, 232, 245, 335, 385, 650, 651, 656, 664, 665, 666, 685, 717, 739, 1005, 1015, 1032, 1036], "560": [214, 521, 522], "561": 411, "561464362648773": 93, "562": [178, 355, 1026], "564": 214, "56479934": 362, "56485654": 131, "565": 272, "566": 214, "569": [169, 334, 376, 504, 596, 599, 600, 602], "5697": 1043, "56b4e9": 257, "57": [47, 171, 187, 230, 281, 310, 376, 377, 397, 403, 404, 412, 709, 765, 785, 841, 1005, 1015, 1036], "570": [169, 376], "570655": 203, "571": [98, 1026], "5713": 667, "57142857": 725, "573": 419, "5732": 1043, "57320793": 419, "573491": 203, "574": [91, 538, 545], "5748": 498, "5749": [374, 497, 498], "575": [102, 214], "5762": 1042, "576989": 255, "577": [169, 376], "579": 528, "58": [47, 99, 110, 376, 413, 424, 478, 611, 768, 1015], "580": [354, 848, 849], "5804131": 131, "5805": 1042, "5807": 1008, "581": [172, 192, 1026], "581012": [374, 494], "5814": 1043, "58149261": 419, "58195950e": 196, "582": 909, "5828": [374, 497, 498], "583": 411, "5833": [742, 1005], "583333315172": 52, "58364548": 1003, "584": [154, 1026], "585": [151, 297, 1026], "5853": 1025, "5857": 1041, "5863": 385, "58667835e": 196, "586798": 203, "587": [314, 1026], "5871": 683, "5874": 1042, "5882004012129721": 93, "589715": 203, "59": [43, 47, 192, 199, 232, 376, 385, 411, 412, 514, 826, 1005, 1032, 1036], "59122734": 671, "592": [615, 618, 629, 1012], "592373": 326, "5925110": 52, "5929": 1042, "593": 139, "594": [180, 214], "594754": 203, "59489497": 229, "595": 214, "5956": 1044, "596": [46, 720, 1026], "5960": 229, "5963": 1046, "597": 214, "598": [91, 128, 172, 545], "5981": 548, "598533": 203, "599": 684, "5991": 1043, "5_000": 192, "5a": 888, "5d": 47, "5e": [44, 121, 202, 599, 600, 602], "5e5": 214, "5f": [160, 325], "5m": 55, "5n_": 112, "5th": [52, 147, 150, 179, 411], "5x": 1053, "6": [0, 43, 45, 47, 48, 49, 50, 51, 52, 57, 63, 64, 67, 68, 75, 79, 80, 82, 83, 85, 89, 90, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 109, 110, 111, 113, 115, 118, 121, 123, 130, 136, 147, 148, 150, 152, 154, 160, 164, 169, 171, 174, 176, 177, 178, 179, 180, 182, 183, 187, 188, 190, 192, 194, 195, 196, 199, 203, 207, 212, 214, 215, 216, 218, 228, 232, 234, 235, 238, 241, 244, 245, 249, 252, 253, 257, 258, 259, 260, 262, 263, 265, 266, 267, 271, 272, 273, 274, 275, 281, 282, 283, 284, 285, 291, 294, 297, 305, 307, 309, 310, 312, 314, 316, 317, 319, 321, 324, 325, 326, 327, 328, 329, 331, 332, 335, 336, 342, 343, 345, 347, 349, 351, 353, 354, 355, 360, 361, 362, 373, 374, 376, 377, 379, 381, 383, 384, 385, 392, 397, 403, 404, 409, 411, 412, 415, 416, 418, 419, 420, 426, 431, 438, 445, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 464, 465, 466, 467, 468, 485, 486, 487, 488, 493, 495, 500, 509, 521, 528, 531, 534, 542, 544, 545, 549, 551, 557, 566, 567, 571, 572, 573, 574, 597, 598, 606, 608, 609, 610, 612, 615, 618, 619, 629, 631, 632, 634, 640, 641, 648, 649, 683, 693, 697, 703, 715, 720, 725, 732, 742, 746, 749, 750, 754, 755, 757, 773, 782, 789, 792, 794, 801, 802, 803, 805, 806, 811, 813, 814, 816, 821, 822, 825, 832, 833, 834, 835, 843, 844, 845, 847, 848, 849, 856, 858, 859, 860, 875, 876, 878, 881, 883, 886, 887, 891, 892, 905, 923, 930, 932, 934, 935, 946, 947, 951, 952, 953, 955, 958, 959, 967, 979, 982, 990, 993, 994, 995, 999, 1001, 1002, 1005, 1015, 1016, 1019, 1020, 1021, 1028, 1032, 1034, 1037, 1038, 1039, 1042, 1044, 1049, 1053, 1054], "60": [43, 45, 92, 105, 113, 214, 226, 232, 234, 235, 255, 260, 280, 285, 332, 345, 353, 373, 411, 415, 453, 460, 717, 804, 1005, 1015, 1036, 1039], "600": [63, 83, 91, 145, 154, 155, 242, 374, 684, 1026], "6000": [310, 631], "601052": 308, "601707": 203, "602": [216, 1026], "60244657": 853, "60276338": 388, "603": [96, 451], "604": [128, 545], "605": [241, 1026], "606": [188, 617, 838, 1006], "607": [272, 1026], "6072758064261095": 171, "607752": 147, "608": 169, "60809415": 666, "60834549": 90, "60836363e": 196, "609": [180, 385], "61": [112, 188, 232, 373, 376, 385, 412, 461, 545, 564, 650, 651, 656, 664, 665, 666, 685, 717, 826, 953], "6101": 1043, "611": [270, 272, 545], "6114": 831, "6114326": 214, "6114327": 214, "6114328": 214, "6114329": 214, "6114330": 214, "611676": 203, "612": 794, "6121": 1042, "6126": 1043, "6147": 1041, "615373": 187, "616": [845, 1007, 1015], "61611719": 174, "617": [91, 275, 411, 773], "617050e": 232, "6173": 1042, "617715": 147, "6178": 1042, "618": [91, 270], "6181": 1043, "6182": 1042, "618263": 203, "619": [96, 318, 451, 1026], "619052": 374, "61958": 176, "6196": [275, 1041], "6198": 750, "62": [52, 188, 192, 232, 265, 326, 332, 362, 374, 497, 498, 848, 849, 1032, 1039], "620": 502, "621": [91, 205, 773, 1026], "621645": 203, "622": [91, 545], "62241605": 199, "622811": 147, "623": [845, 1007], "6231": 1025, "6237": 232, "624": 1012, "625": [86, 214, 622, 712], "6250": 1043, "6258": 1041, "626": [82, 200], "6261": 1045, "626286": 203, "62717609": 229, "62722912": 52, "62745778": 1006, "628": 354, "6282": 1042, "6284": 1025, "6288": 1043, "6291456": 86, "63": [45, 266, 376, 418, 561, 562, 569, 570, 650, 651, 656, 664, 665, 666, 685, 703, 730, 804, 818, 826, 918, 919, 1005], "630": 728, "63035731": 419, "630382": 326, "631": 169, "6312": 52, "632": 318, "6323": 1025, "6331": 43, "6332": 43, "63327171": 199, "6333": 43, "6334": 43, "6335": 43, "6338211367102258": 319, "63394388": 199, "634": [148, 1026], "635": [43, 620], "636": [199, 385], "63667341": 90, "6371000": 768, "6374": 1044, "6375861597263857": 950, "638": [354, 385], "638768": 87, "638843": 308, "639": [188, 231, 1026], "63bit": 1047, "64": [43, 52, 68, 86, 91, 121, 176, 187, 235, 245, 246, 250, 270, 281, 296, 301, 366, 367, 376, 377, 385, 393, 397, 412, 416, 423, 499, 502, 506, 603, 604, 650, 662, 692, 693, 694, 695, 697, 909, 1008, 1032, 1036, 1038, 1044, 1045, 1048, 1049, 1050, 1053], "640": [409, 493, 510, 511, 587, 588, 591, 994], "640000e": 232, "640770e": 232, "640880e": 232, "64185414": 670, "64236448": 540, "6424": 1025, "6425": 1025, "643": 270, "644": 335, "6440": 229, "64447187": 86, "645": 91, "6451": 1025, "6452": 1044, "646": 179, "6463": 1045, "647": 91, "6472": 1042, "6476": 528, "647689": 203, "648026": 147, "6497": 1042, "64_conda": 387, "64bit": 1036, "64x64": [121, 374, 416], "65": [43, 52, 69, 188, 214, 236, 281, 318, 411, 442, 506, 521, 601, 703, 745, 796, 797, 826, 1012, 1036, 1037, 1038], "650": 409, "6505186632729437": 93, "6507": 1043, "651": 385, "652": 354, "652739": 203, "653": [385, 615, 618, 629], "6545": 1048, "656": 374, "6567": 855, "657": [255, 272], "6572": 855, "6573": 1043, "65799352e": 196, "658": 116, "6586": 1042, "659": [315, 1026], "6599": 1025, "65e": 200, "66": [43, 47, 238, 318, 376, 411, 428, 464, 536, 636, 716, 787, 788, 799, 887, 895, 986, 1005, 1017], "660": 255, "660797": 255, "661086": 275, "6624": 1048, "662409": 203, "663": [902, 1013, 1017], "664": [169, 376], "665": [43, 355], "6650": 52, "6651": 1042, "666": [174, 411, 850, 995], "6660": 1042, "6666": [742, 1005, 1042], "66666667": [733, 786, 858, 1015], "666667315174": 52, "6667": 1042, "66670169e": 196, "667": [724, 744, 1005], "667219": 147, "6689": 1044, "669": 355, "6691": 1042, "6697": 1042, "669930e": 232, "67": [47, 99, 187, 232, 376, 502, 520, 521, 522, 631, 671, 717, 818, 995, 1005, 1019, 1032, 1036], "670": [216, 266], "671": 1017, "6715": 1025, "672": [112, 1026], "67251877": 670, "673": [116, 283, 354, 385, 1026], "674": [54, 298, 1026], "67443065": 131, "67451144e": 196, "675": [171, 354], "675318": 87, "676": 673, "6764": 1042, "678008": 214, "678009": 214, "678010": 214, "678011": 214, "678012": 214, "678013": [214, 232], "678359": 203, "679": [216, 908], "68": [43, 47, 52, 205, 310, 331, 411, 481, 539, 545, 594, 689, 690, 1036], "680": [177, 1026], "681": [91, 276, 385, 1026], "6817": 1042, "682": 385, "6821": 47, "682880e": 232, "683980e": 232, "684": [103, 111], "6846": 1042, "6848": 1045, "685": [724, 744, 1005], "6852": 272, "6860": 146, "687": 1017, "6875": 720, "6875046614372228": 322, "688": 111, "689": [69, 1026], "689015": 308, "689143": 308, "689751": 308, "69": [45, 47, 205, 266, 317, 332, 411, 474, 475, 611, 612, 760, 1005, 1015], "690": 216, "6902": 1042, "691": [146, 725, 1026], "6913": 1042, "692": 135, "692270e": 232, "692470": 308, "6929": 1025, "692901": 147, "693": 1005, "6931": 872, "69314718": [421, 616, 1015], "695": 270, "69513": 91, "6954": 1042, "69545": 91, "695740e": 232, "697": 180, "69735": 91, "698": [91, 266], "6984743": 174, "69892343": 218, "699691": 374, "69e": 180, "6d": 47, "6f": [55, 125, 277, 741, 799], "6ppm": 176, "6th": 179, "7": [1, 2, 43, 45, 47, 50, 51, 52, 53, 54, 63, 66, 68, 69, 70, 74, 77, 79, 80, 86, 87, 88, 89, 93, 97, 98, 100, 103, 104, 106, 111, 113, 121, 124, 135, 138, 143, 147, 150, 151, 155, 156, 169, 180, 186, 187, 188, 190, 192, 196, 197, 213, 214, 215, 216, 232, 234, 241, 246, 247, 253, 255, 257, 258, 261, 262, 266, 267, 272, 276, 277, 278, 279, 283, 289, 291, 292, 294, 297, 298, 300, 309, 310, 312, 316, 321, 324, 325, 326, 328, 331, 332, 334, 335, 339, 346, 349, 350, 354, 355, 362, 374, 376, 377, 384, 385, 397, 403, 404, 409, 415, 416, 418, 419, 420, 422, 423, 426, 442, 447, 448, 451, 453, 454, 455, 456, 458, 459, 460, 461, 464, 465, 466, 467, 470, 474, 475, 485, 486, 487, 488, 494, 500, 502, 536, 537, 538, 539, 540, 542, 544, 548, 565, 566, 592, 595, 604, 609, 610, 631, 632, 634, 641, 650, 651, 653, 656, 662, 663, 664, 665, 666, 677, 679, 685, 686, 687, 696, 703, 711, 713, 725, 727, 728, 730, 732, 748, 749, 750, 754, 755, 757, 786, 789, 794, 795, 798, 801, 803, 804, 805, 806, 807, 808, 811, 814, 818, 821, 822, 825, 831, 834, 838, 848, 849, 857, 866, 867, 868, 873, 880, 881, 903, 904, 951, 952, 955, 956, 959, 968, 973, 994, 995, 1000, 1001, 1003, 1005, 1006, 1008, 1009, 1011, 1015, 1019, 1020, 1032, 1034, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1049, 1054], "70": [43, 45, 50, 99, 103, 105, 135, 188, 251, 257, 272, 332, 374, 376, 415, 497, 498, 686, 687, 717, 730, 760, 804, 818, 895, 994, 1015], "700": [83, 266, 323], "7000": 232, "701": 91, "702266": 203, "703": [409, 517], "70359377": 199, "704": 353, "70432034": 115, "7049": 1042, "7049787496083262": 93, "706026": 203, "707": [180, 884, 896], "7071": 1044, "70763101": 86, "708": [354, 542, 544, 551, 754], "70814003": 362, "7083": 1005, "708333315174": 52, "7089": 1043, "709": 273, "70x": 1053, "71": [43, 169, 218, 232, 376, 514, 734, 740, 770, 780, 1005, 1032, 1038], "710": 409, "7101": 1042, "711": [47, 1026], "712": [121, 1026], "713": 188, "714": 323, "71518937": 388, "7152": 1042, "7154": 1042, "715413": 147, "7159": 1042, "716": [91, 152, 517, 1026], "718": [155, 189, 1026], "7187": 1042, "718747": 203, "7194": 1042, "72": [43, 45, 46, 52, 141, 174, 384, 826, 832], "7200": 653, "721": [542, 544, 551], "722128e": 232, "72295655": 115, "723": [91, 247], "723665": 286, "7239": 1042, "7242": 1025, "724702": 275, "7248": 1042, "7256": 639, "726": [229, 1013], "7260": 1042, "7261": 1042, "726573": 187, "72667194": 1006, "727148206404819": 280, "72850319": 1006, "7295": 1042, "7298221281347037": 43, "73": [276, 332, 392, 484, 740, 804, 818, 854, 917, 1015, 1036, 1038], "7301": 1042, "730119e": 232, "731249e": 232, "7313": 46, "73153": 385, "732": 216, "7321432711315247203224138160467097": 52, "7323": 1042, "7325": 1042, "732913": 286, "733": 292, "7331": 1043, "7332": [323, 912], "7350": 1042, "7353": 1042, "7356": 1043, "7365": 1043, "73654189": 52, "737": [247, 528], "7376": 1043, "7382": 1025, "7387": 479, "7388": 1043, "739865e": 232, "739950": 286, "74": [43, 230, 331, 332, 376, 594, 698, 804, 818, 887, 1032], "741": [310, 1026], "7411": [472, 477, 1042], "7419": 1042, "743": 270, "74310541": 174, "7436926291700353": 209, "744": [270, 292], "744029": 286, "744042e": 232, "7441": 1043, "744497e": 232, "74495357": 199, "7459": 1043, "746": 376, "7464": 1043, "746492": 272, "748": [353, 385], "7490": [1042, 1043], "75": [43, 45, 46, 49, 52, 69, 79, 88, 113, 138, 166, 178, 179, 183, 187, 192, 194, 197, 205, 221, 232, 255, 259, 260, 266, 272, 281, 297, 312, 324, 351, 353, 362, 452, 505, 555, 641, 662, 698, 710, 716, 738, 743, 744, 749, 757, 760, 798, 804, 886, 894, 898, 905, 921, 939, 940, 985, 1005, 1007, 1015, 1021, 1023, 1038], "750": [82, 88, 272], "75000": 214, "7501": 1043, "750348": 147, "750389": 203, "7506": 1043, "751": [329, 1026], "752": 353, "752470": 286, "752867": 203, "753": 73, "7532": 492, "7533": [424, 478, 1043], "75474165": 1006, "7548": 1043, "7548291": 328, "7553": 1042, "7565": 1043, "756687e": 232, "7567": 1043, "756746e": 232, "7569": 473, "757": [169, 270, 292, 376], "7573": 1043, "75747153": 218, "7578": [275, 1043], "75788833": 166, "757915": 286, "758": [307, 353, 1026], "758mb": 353, "759": 292, "7593": 1042, "7594": 1042, "75949622": 218, "75th": [251, 886], "76": [43, 192, 214, 332, 353, 362, 376, 385, 781, 785, 868], "760": [43, 150], "7608": 1025, "761": [194, 1026], "76195467e": 196, "762": [252, 1026], "7621951219512195": 255, "7632": 1042, "7638": 1001, "764": [43, 725, 1005, 1026], "7646": 1025, "764779": 203, "765012": 326, "7655": 1043, "765671": 203, "7660": 1042, "7661": 1043, "7668": 1044, "7674": [528, 1043], "767498": 147, "7676": 1042, "768": 86, "7680": 1042, "76823": 45, "7685": 1043, "769": 292, "76995": 374, "77": [43, 45, 79, 169, 192, 281, 332, 373, 376, 538, 711, 740, 779, 826], "77000": 214, "7702": 1043, "770926": 286, "772": [218, 353, 727, 1026], "7721": 1043, "7723": 1043, "7724": 1042, "773": [272, 335, 652, 846], "77310": 374, "7732": 1042, "77322639": 115, "7738": 1044, "7739": 1043, "77426368": 51, "775": 57, "7750": 1042, "775047": 680, "775151": 680, "7756": 1042, "776": [64, 1026], "77630514": 419, "7768366": 1003, "777": 385, "7771": 1043, "77764": 407, "77777215": 115, "7786": 1042, "779": 353, "7794": 1043, "779751": 286, "7798": 912, "7799": 1042, "78": [43, 86, 192, 232, 281, 314, 332, 497, 498, 650, 651, 656, 657, 659, 664, 665, 666, 668, 669, 685, 689, 690, 804, 810, 826, 832, 1005, 1025], "780": 270, "7812": 1043, "781265": [374, 501], "7814": 1043, "7816": 52, "7819": [411, 1043], "7823": [1043, 1044], "7825": 1043, "7825594": 51, "7826": 376, "782755": 62, "7831": 353, "783149": 103, "7833": 478, "783392": 272, "7838": 1043, "784": 309, "7840": 87, "7849": 1043, "785063": 103, "78571427112143152472031331383346104": 52, "786": [86, 103], "786015": 103, "7863": 1043, "786432": 86, "78681467": 86, "7872": 1043, "7880": 1043, "7887550": 52, "788808": 326, "789": [165, 418], "7894": [902, 1017], "79": [43, 45, 66, 68, 111, 112, 119, 124, 169, 192, 280, 310, 332, 376, 384, 413, 477, 528, 601, 698, 826, 846, 1036, 1038], "790": [43, 102], "7906": [626, 653], "79064206": 614, "79084103": 362, "791": 180, "7914": 1043, "791667315161908911936472223112": 52, "79269019073225": 296, "7927845601690917": 319, "7929": [354, 1043], "794": [156, 1026], "7943": 1046, "7944": 1043, "7946": 1042, "795": 652, "7954": 1043, "796": 147, "7970": 1043, "7971": 667, "7972": 558, "79769376": 115, "798": [103, 418], "7983": 1043, "798301": 255, "7986": 1043, "7986499491396734": 171, "798982054": 1005, "799": [180, 354], "7990": 1043, "7998": 1043, "7_qbz5n2kfra8p0": 397, "8": [43, 44, 45, 46, 47, 48, 51, 52, 53, 57, 62, 63, 64, 67, 68, 70, 72, 78, 79, 83, 86, 88, 93, 95, 97, 98, 102, 104, 106, 107, 112, 115, 118, 119, 121, 122, 124, 125, 126, 129, 131, 135, 138, 140, 141, 144, 146, 147, 149, 153, 156, 157, 160, 168, 169, 172, 174, 176, 177, 179, 180, 183, 186, 187, 188, 190, 192, 194, 195, 200, 202, 205, 208, 214, 215, 218, 222, 224, 230, 232, 234, 235, 236, 238, 239, 242, 245, 246, 247, 249, 253, 254, 255, 257, 258, 259, 261, 262, 263, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 279, 282, 283, 289, 291, 294, 296, 300, 304, 307, 309, 310, 312, 314, 315, 316, 317, 318, 321, 326, 331, 332, 333, 335, 336, 339, 342, 346, 347, 348, 349, 350, 353, 354, 355, 360, 362, 367, 373, 374, 375, 376, 377, 379, 384, 385, 397, 405, 409, 411, 415, 416, 418, 419, 420, 422, 424, 442, 445, 446, 447, 450, 452, 453, 455, 458, 459, 460, 465, 466, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 486, 487, 488, 490, 493, 500, 502, 506, 507, 518, 520, 535, 538, 542, 544, 547, 549, 551, 553, 554, 557, 559, 560, 569, 574, 586, 592, 593, 594, 595, 608, 609, 632, 633, 640, 641, 652, 662, 674, 680, 683, 693, 696, 697, 698, 699, 703, 706, 710, 711, 713, 714, 719, 725, 731, 732, 733, 745, 746, 749, 750, 754, 755, 757, 782, 786, 787, 789, 792, 793, 794, 795, 799, 801, 803, 805, 806, 811, 814, 821, 822, 825, 826, 827, 832, 834, 835, 837, 846, 848, 849, 855, 865, 866, 867, 873, 880, 887, 889, 905, 910, 913, 932, 934, 935, 950, 951, 952, 956, 973, 979, 980, 981, 982, 983, 984, 985, 994, 995, 1001, 1002, 1003, 1005, 1008, 1013, 1015, 1019, 1029, 1032, 1033, 1034, 1037, 1038, 1039, 1043, 1044, 1049, 1050, 1052, 1055], "80": [43, 45, 50, 64, 100, 112, 155, 162, 166, 177, 188, 194, 249, 314, 318, 331, 345, 347, 353, 359, 362, 374, 376, 379, 409, 415, 420, 422, 447, 482, 514, 545, 717, 804, 818, 826, 889, 902, 921, 994, 1000, 1001, 1005, 1012, 1018, 1021], "800": [83, 324, 374, 588, 696], "8000": [232, 275, 276], "800000011920929": 361, "8000184677460305": 319, "8002": 1043, "8003": 1044, "8005": 1043, "8006": 1043, "8010": 1043, "801770e": 232, "802": [46, 169, 376], "8022": [46, 476, 1045], "802601": 203, "8028": 1043, "803483": 147, "803882e": 232, "804": [300, 1026], "8040": 1042, "804414": [374, 501], "805": [216, 358, 1026], "8053": 1043, "8059798": 199, "806": 653, "8061": 1043, "8065": 1043, "8066": 1044, "8068": 1043, "807": [270, 272], "8075": 1044, "8086": [623, 1043], "8087": 1043, "8093": 1043, "8094": 1043, "80956739": 1006, "80_000": 140, "81": [43, 83, 255, 331, 332, 411, 703, 765, 792, 804, 818, 835, 1005, 1006, 1008, 1015], "810": [189, 317, 833, 1026], "8100": 1025, "8102": 1044, "810596": 374, "8117": 1043, "8120": 1043, "8125": 725, "812526": 203, "8129": 1044, "8133333333333334": 303, "81355169": 419, "8137": 1043, "8139": 1043, "814": 189, "815476315189119122164721021826110": 52, "8157": 1025, "8159": 1043, "816": [273, 474, 475], "8160": 1043, "8174": 1043, "817724": 203, "8181": 1043, "819": 419, "8190": 1044, "81940995": 419, "8198": 1043, "82": [43, 66, 86, 91, 143, 166, 217, 236, 303, 331, 792, 804, 818, 951, 1005, 1008, 1036], "820": [43, 52, 848, 849], "820705": 203, "8216": 1045, "822": 794, "822097": 187, "8224": 1043, "8225220806196525": 209, "823": 292, "8243": 1025, "825": 754, "8251": 1043, "8253": 230, "8259": 1043, "826": 245, "827917": 147, "828": 292, "8282": 1043, "829429": 262, "8295": 1043, "83": [45, 66, 70, 74, 331, 376, 698, 711, 790, 924, 1000, 1005, 1039], "830000": 308, "8306": 1043, "8316": 1043, "832": [189, 418, 559, 560], "83236428": 419, "83281226": [848, 849], "8333": 502, "83333": 768, "833333": 187, "8335": 1043, "834": 335, "834310": 203, "8344": 1043, "8345": 601, "835": [137, 1026], "8353": 46, "8354": [626, 1043], "83548752": 614, "8355": 1042, "8361": 1044, "836224": 62, "8363": 1043, "8370": 1025, "8377": 1043, "83816048": 650, "83822343": 1003, "83833": 385, "8387": 839, "839": [266, 684, 1026], "84": [43, 45, 80, 102, 166, 205, 232, 314, 331, 362, 376, 418, 419, 792, 818, 1005, 1015], "840": 385, "84000": 214, "840000": 308, "8407": 102, "84077985": 199, "841": [103, 145, 1026], "84127814": 670, "84253": 1006, "844": [169, 418, 559, 560], "8446": 1043, "8449": 1043, "847222222222214": 209, "8473": 419, "8478": 1045, "8480": 1025, "8481": 1043, "8484": 1044, "848743": 62, "849835": 87, "85": [45, 55, 68, 83, 88, 102, 124, 166, 229, 232, 283, 310, 332, 362, 418, 442, 502, 504, 559, 560, 601, 656, 662, 749, 757, 792, 804, 832, 1005, 1006, 1036], "850000": 308, "850031": 203, "8508": 1045, "851": 272, "8512": 1043, "8513": 623, "851348": 62, "8515": [419, 1043], "85151335": 419, "851792": 62, "85253229": 90, "852774": 147, "853174": 62, "853846": 203, "854": [260, 270, 1026], "85418642": 362, "8549": 1043, "855": 47, "8554": 1044, "855465": 308, "857": [273, 354], "857400": 62, "858486250088675": 319, "85857475": 131, "8586": 1043, "859007": 62, "8591": 1043, "86": [52, 68, 102, 166, 205, 251, 314, 331, 332, 410, 792, 916, 1005], "860000": 308, "861": [169, 376, 792, 793, 1005], "861053": 62, "861106": 62, "8614": 1025, "861533": 62, "8617": 1044, "861868": 62, "862": [74, 1026], "8626621": 328, "8628": 639, "864": [335, 1026], "8640": 188, "865400": 62, "866": 1013, "866161": 62, "866571": 62, "867": 106, "8672": 1043, "8676": [624, 1043], "8678": 627, "868": [147, 165], "868443": 50, "869": [190, 1026], "8698": 1043, "87": [45, 68, 102, 180, 266, 270, 332, 601, 671, 781, 792, 804, 826, 884, 896, 1005], "870": [169, 376], "871": [73, 111, 112, 308, 413, 477, 1026], "871277": 62, "871965": 62, "872": [73, 1013], "8720": [560, 1044], "872186": 62, "873": [169, 376], "873724": 62, "87382323": 666, "874": [105, 792, 793, 1005], "87421f": 119, "874771": 147, "875": [86, 172, 229, 673, 1026], "875315171": 52, "875315173": 52, "875941": 62, "87600388": 174, "8768": 1043, "8769": 1045, "877": [47, 270], "877206": 270, "8773": 1045, "877981": 62, "878": [47, 325, 1026], "878051": 203, "878964": 816, "87mb": 353, "88": [43, 45, 47, 68, 80, 205, 218, 271, 310, 329, 331, 332, 357, 374, 376, 379, 410, 413, 476, 650, 651, 656, 664, 665, 666, 685, 868, 951, 1036], "880": [43, 186, 1026], "880191": 203, "880298": 203, "88089948": 419, "88096009": 131, "882": 272, "88213": 374, "882561": 272, "883": [82, 323, 1026], "883065": 62, "8833": 502, "8835": 1043, "884": [285, 292], "8845": 1043, "885": [47, 169, 335, 376], "8854": 1043, "8874": 1043, "8878": 839, "888": [95, 1026], "8880": 624, "8881": 627, "889": [270, 440], "88978285": 1006, "89": [43, 47, 68, 176, 205, 331, 332, 987, 1000, 1005, 1015, 1036, 1039, 1047], "890": 270, "891": 47, "8922": 1043, "893055": 203, "8931": 1043, "8936": 1043, "894264": 255, "8947": 918, "8948018": 52, "89483932": 1003, "8948621": 1006, "896": 652, "8963": 275, "8965": 418, "8973": 1043, "89856": 816, "899": [68, 270], "8992": 1043, "8995": 1043, "8pt": 1015, "8x8": [68, 205, 245, 301, 310, 376, 506], "9": [43, 44, 46, 48, 51, 52, 61, 63, 64, 67, 68, 70, 77, 79, 83, 88, 91, 95, 97, 106, 113, 115, 143, 144, 146, 147, 148, 149, 153, 155, 161, 162, 169, 174, 178, 183, 186, 187, 188, 190, 196, 197, 205, 214, 221, 227, 228, 231, 232, 234, 236, 237, 245, 246, 255, 257, 258, 259, 260, 265, 266, 275, 279, 281, 285, 291, 294, 296, 297, 300, 301, 302, 307, 308, 310, 312, 314, 315, 316, 318, 319, 321, 326, 327, 329, 331, 332, 334, 335, 336, 342, 346, 351, 355, 362, 376, 377, 385, 392, 397, 403, 404, 409, 410, 412, 413, 415, 418, 419, 442, 446, 453, 460, 466, 485, 486, 487, 488, 493, 500, 502, 520, 522, 524, 531, 538, 542, 543, 544, 551, 564, 571, 574, 587, 595, 608, 609, 611, 612, 631, 634, 638, 641, 643, 650, 651, 656, 662, 664, 665, 666, 685, 686, 687, 691, 696, 703, 713, 727, 730, 745, 752, 773, 782, 783, 784, 801, 803, 805, 807, 808, 822, 825, 826, 832, 834, 837, 845, 846, 850, 851, 856, 859, 865, 866, 874, 880, 883, 951, 952, 956, 977, 994, 1000, 1001, 1005, 1009, 1015, 1019, 1020, 1032, 1034, 1037, 1038, 1039, 1041, 1050, 1052], "90": [45, 47, 49, 52, 54, 68, 106, 130, 131, 146, 147, 148, 150, 166, 176, 190, 195, 205, 211, 213, 216, 221, 232, 251, 257, 281, 283, 314, 318, 327, 331, 332, 362, 366, 379, 385, 415, 567, 785, 804, 832, 837, 889, 1000, 1005, 1032, 1051, 1052], "900": [47, 83, 106, 107], "9000": 232, "900000e": 232, "9010": 1042, "9012": 1044, "9015": [667, 1044], "9019": 1043, "902": [246, 1026], "9022": 1043, "9024": 1043, "9026666666666666": 147, "903": 47, "904": [188, 270, 412], "9041": 1044, "9043": 1044, "9044": [272, 1043], "90453403": 469, "904556e": 232, "904558e": 232, "904747e": 232, "904751e": 232, "905": 270, "905206": 87, "9067": 1043, "9069": 1045, "9078": 1043, "908": 1005, "90809432": 131, "9085": 1044, "9087": 1050, "90885631": 86, "909": 47, "909293": 308, "909909": 147, "91": [45, 68, 84, 176, 310, 331, 332, 418, 1000], "910": 43, "9100": 1043, "9101": 1044, "9105": 1043, "9108": 1043, "912": 73, "912632": 308, "913": [418, 563], "914370e": 232, "914387e": 232, "9144057": 52, "9145": 1043, "914538e": 232, "914573e": 232, "9147": 1044, "9149": 1042, "915": 47, "9151": 1044, "9157": 1044, "916": 82, "91629073": 594, "916555e": 232, "9167": 326, "917": [82, 361], "917281": 147, "9173": 1025, "917618e": 232, "919": 266, "92": [52, 68, 83, 124, 166, 192, 270, 310, 331, 332, 342, 374, 376, 542, 544, 551, 566, 601, 700, 804, 818, 826, 1000], "9202": 148, "9206": 1043, "9219": 1043, "922": [336, 1026], "9221": 653, "9222": 1044, "9226260871125187": 280, "923223": 816, "92329566": 131, "9234": 1044, "9239": 1043, "924": [45, 47, 1026], "92461872": 129, "925": 1005, "9250": 1046, "92529176": 1006, "9257": 1044, "9259": 1043, "9266666666666666": 143, "927": 440, "9274": 1046, "9277": 1043, "9278": 1043, "928": [112, 440], "9284": 1043, "9284422733545651": 328, "928571": 232, "9288": 1046, "9289": 1043, "93": [45, 68, 169, 214, 255, 270, 332, 353, 376, 650, 651, 656, 664, 665, 666, 685, 781, 792, 804, 826, 832, 916, 1000, 1005], "930": [301, 1026], "9300": 272, "930000": 308, "9302": 1043, "9304": 1044, "932": 47, "9326": 1025, "93271427": 174, "933": [47, 106, 415], "933197": 255, "933253": 147, "9333": 415, "933333": [161, 857], "935": 1043, "9354": 1044, "936": [47, 440, 1005], "936480": 62, "9372": 1044, "937443": 62, "937532": 62, "937597": 62, "9378": 1044, "938": [47, 210, 789, 1005], "938613": 62, "939": 672, "9399": 1044, "93fletcher": 1001, "93goldfarb": 1001, "93lindenstrauss_lemma": 902, "93shanno_algorithm": 1001, "94": [43, 68, 70, 87, 123, 143, 213, 249, 314, 331, 332, 410, 418, 667, 792, 826, 1000, 1005, 1006, 1015, 1036], "940": 43, "9400": 272, "940000": 308, "940184": 147, "940201": 62, "940374": 62, "9403917": 115, "941": 47, "94114649": [848, 849], "9416": 52, "9417": 675, "9431": 839, "944": [47, 284, 1026], "9456": 1044, "94592424": 666, "946": [78, 112, 1026], "94731329": 671, "9473684210526315": 321, "947958": 994, "948": [789, 1005], "9484": 1044, "949": 47, "9490": 376, "9492": 1044, "9497": 1044, "9499": 642, "95": [45, 52, 54, 68, 79, 85, 90, 100, 127, 143, 147, 150, 178, 187, 194, 214, 216, 221, 232, 259, 260, 263, 272, 273, 297, 305, 314, 318, 325, 332, 342, 362, 418, 531, 636, 637, 640, 651, 665, 752, 826, 905, 1001, 1005, 1006, 1018, 1039], "950": [47, 350, 1026], "950000047683716": 361, "9502547": 199, "9507": 1043, "951": [150, 1026], "9515": 1044, "951751e": 232, "951958": 994, "952": [47, 82], "9521": 1044, "952289": 203, "9524": 1044, "953": [47, 82], "953061": 309, "95373": 374, "954": [884, 896], "95433992": 115, "955": [292, 415, 658], "9558": 1043, "955989": 994, "956": 47, "956038": 308, "9565": 376, "9569": 1044, "957": [47, 196, 317, 732, 1005, 1026], "9579": 1044, "958": 47, "9583": 410, "9584": [631, 1043], "959": [884, 896], "9593": 1043, "9595": 678, "9597": 1046, "9599": 1044, "95th": [52, 147, 150, 752], "96": [43, 52, 68, 95, 178, 241, 251, 270, 310, 314, 317, 318, 331, 332, 376, 415, 557, 686, 687, 715, 826, 994, 1000, 1005, 1015, 1036], "960": [72, 1026], "9600": 1043, "9604": 1043, "961": [45, 865], "961009": 994, "961111": 161, "9612": 1044, "961904": 857, "96190476": 1008, "962": 47, "96228895": 131, "9623": 1043, "963": [180, 1026], "9630": 679, "9641": 1043, "9647": 1044, "965": [47, 1005], "9655": 1044, "9656": 1044, "966": 45, "9666": 547, "966981": 203, "967": [106, 200, 1005, 1009], "967455341880342": 321, "9677": 1043, "968": [51, 176, 186, 270, 1026], "9681": 1044, "9686": 1044, "969": 373, "9693": 1043, "9694898472080092": 327, "9697": 1043, "97": [68, 130, 169, 190, 249, 251, 263, 332, 342, 376, 385, 392, 415, 650, 651, 656, 662, 664, 665, 666, 685, 686, 687, 1000, 1006, 1015, 1036], "9701": 1044, "9707": 1044, "971": [54, 1026], "9711": 1043, "9717": 1043, "972": [247, 1026], "9723": 1044, "9726": 1044, "973": [354, 415], "9731": 1044, "9733": [624, 627], "973554": 326, "973770": 203, "974": 361, "974e": 419, "975": [169, 186, 1020], "9750": 1043, "97545464": 255, "975455": 255, "9759": 47, "976": [206, 280], "976158": 374, "977": [43, 415], "9771": 558, "9772": 1044, "9775": 1044, "977890": 262, "9781605585161": 411, "978444": 308, "9786": 1044, "9788": 1043, "98": [68, 77, 79, 87, 95, 97, 113, 124, 169, 241, 270, 307, 314, 332, 376, 415, 418, 663, 843, 899, 1000, 1005, 1007], "980000": 308, "9802": 1043, "981": [169, 376, 1005], "9815": 1043, "9816": 1044, "9821": 854, "983": [57, 732, 1026], "9830": 1043, "9832": 1044, "9833": 502, "98350372e": 196, "983667": 994, "9837": 1044, "9843": 1049, "9847": 1043, "984ea3": [79, 95], "9850": 214, "9851": 1044, "9858": 1044, "98633022": 131, "986429": 309, "9865": 1043, "9866": [614, 623, 626], "9866666666666667": 143, "9868": [902, 1017], "986989": 275, "987": [280, 289, 354, 1026], "9875": 1044, "98809919e": 196, "9884": 683, "9885": 675, "9886": 1044, "989341": 203, "98mb": 353, "99": [45, 52, 62, 68, 79, 80, 84, 95, 121, 232, 241, 245, 251, 257, 259, 270, 273, 312, 332, 367, 372, 376, 415, 418, 419, 496, 651, 665, 675, 686, 687, 792, 826, 855, 973, 1000, 1005, 1015, 1019, 1031, 1038], "990": [673, 1005], "9900": 232, "9907": 1045, "9908": 1044, "991": [280, 1005, 1026], "991584977345022": 171, "991653": 308, "9922": 1043, "9924": 545, "99244": 545, "992766": 308, "993": 280, "9933333333333333": 143, "9935": 839, "993879": 308, "9939": 1044, "993919": 50, "994": [169, 292, 328, 1026], "9945": 1043, "995": 206, "9951": 1046, "996": [251, 1026], "9969977": 52, "997": [46, 75, 142, 169, 1026], "9978": 1049, "9979": 43, "9979281": 52, "998": [169, 1009], "9980": [43, 1044], "9981": 43, "998142": 52, "998273": 266, "9987": 643, "99891212e": 196, "999": [232, 266, 272, 418, 721, 865, 866], "9990": 232, "9991": [668, 669, 1044], "99918858": 131, "9993": [43, 657, 659, 1044], "9994": 667, "9995": 43, "9996": 655, "999791942438998": 322, "9998": [50, 305], "9999": [50, 232, 305, 334, 502, 631, 1044], "99999": 334, "999999": [79, 95], "A": [0, 2, 19, 25, 41, 53, 55, 56, 62, 64, 67, 71, 73, 74, 75, 76, 79, 80, 82, 86, 87, 89, 90, 92, 93, 94, 95, 97, 100, 107, 109, 112, 116, 119, 122, 123, 124, 136, 137, 142, 144, 154, 158, 160, 161, 162, 166, 168, 171, 174, 176, 178, 179, 180, 184, 187, 188, 199, 201, 215, 218, 224, 228, 229, 232, 235, 248, 251, 260, 266, 272, 273, 275, 279, 287, 289, 307, 312, 314, 317, 321, 323, 326, 332, 333, 334, 336, 342, 346, 347, 353, 354, 355, 359, 361, 362, 366, 368, 373, 374, 376, 377, 379, 381, 382, 383, 384, 387, 391, 392, 393, 394, 396, 402, 406, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 422, 423, 424, 425, 434, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 491, 493, 494, 496, 498, 501, 504, 505, 506, 507, 508, 512, 514, 515, 516, 517, 518, 524, 526, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 611, 612, 614, 615, 621, 624, 631, 632, 633, 634, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 708, 709, 714, 715, 716, 720, 721, 723, 725, 726, 727, 728, 729, 730, 735, 740, 741, 744, 746, 747, 748, 751, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 768, 770, 771, 778, 779, 780, 781, 782, 785, 792, 794, 795, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 950, 951, 952, 960, 961, 963, 964, 989, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1031, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "AND": 739, "AS": 423, "AT": [2, 374, 499], "And": [52, 184, 233, 234, 239, 248, 272, 353, 387, 405, 411, 415, 419, 534, 592, 593, 595, 696, 697, 1001, 1005, 1026, 1043], "As": [0, 30, 43, 46, 58, 62, 66, 75, 78, 86, 88, 90, 91, 99, 113, 116, 126, 135, 136, 142, 144, 145, 146, 148, 150, 154, 164, 167, 171, 176, 177, 183, 187, 189, 190, 192, 194, 197, 199, 203, 205, 214, 218, 222, 232, 239, 248, 260, 266, 267, 269, 270, 272, 273, 275, 291, 297, 313, 324, 329, 334, 342, 346, 354, 355, 357, 359, 360, 362, 366, 367, 374, 378, 379, 381, 384, 391, 392, 393, 405, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 449, 497, 558, 566, 570, 623, 636, 659, 660, 676, 678, 691, 739, 762, 768, 850, 851, 852, 854, 856, 887, 994, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1012, 1015, 1019, 1020, 1021, 1024, 1025, 1029, 1036, 1042, 1047, 1052, 1054], "At": [52, 107, 135, 219, 248, 266, 284, 289, 291, 331, 334, 366, 367, 383, 394, 402, 407, 414, 418, 440, 443, 468, 592, 593, 595, 606, 836, 838, 875, 968, 994, 1001, 1004, 1006, 1010, 1019, 1029], "Be": [166, 180, 353, 379, 413, 571, 572, 652, 658, 659, 660, 662, 663, 673, 684, 708, 822, 823, 883, 1015, 1033, 1037], "Being": [379, 393, 394, 1001, 1008], "But": [43, 48, 86, 186, 215, 216, 272, 292, 312, 379, 391, 411, 414, 417, 418, 465, 750, 916, 917, 994, 1005, 1020, 1025], "By": [57, 121, 150, 151, 152, 194, 218, 248, 266, 281, 289, 312, 321, 327, 328, 346, 353, 367, 379, 381, 385, 386, 393, 402, 410, 411, 412, 414, 415, 416, 417, 418, 420, 441, 444, 448, 449, 453, 467, 470, 471, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 528, 553, 554, 561, 562, 563, 564, 568, 569, 589, 590, 592, 593, 595, 610, 613, 636, 637, 675, 677, 679, 681, 694, 696, 698, 701, 703, 704, 706, 707, 722, 733, 734, 738, 742, 787, 788, 791, 798, 800, 807, 808, 854, 868, 869, 881, 882, 884, 886, 896, 898, 906, 911, 912, 916, 917, 918, 919, 934, 935, 994, 995, 997, 1001, 1005, 1012, 1013, 1015, 1017, 1021, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1050, 1053, 1054], "For": [2, 30, 43, 47, 48, 51, 52, 53, 57, 64, 68, 72, 75, 79, 80, 82, 86, 88, 90, 91, 93, 100, 105, 111, 116, 122, 138, 140, 147, 148, 150, 151, 153, 165, 166, 169, 171, 173, 178, 182, 183, 187, 188, 199, 201, 203, 214, 215, 218, 219, 222, 231, 232, 234, 236, 239, 241, 242, 244, 245, 246, 248, 255, 262, 266, 269, 272, 273, 279, 286, 291, 292, 302, 307, 309, 310, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 334, 336, 342, 344, 346, 349, 353, 354, 355, 357, 358, 361, 362, 366, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 402, 407, 408, 409, 410, 411, 412, 415, 416, 418, 419, 420, 421, 422, 427, 434, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 463, 464, 465, 467, 468, 469, 471, 474, 475, 477, 485, 486, 487, 488, 492, 498, 500, 502, 507, 518, 519, 527, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 577, 585, 586, 587, 588, 592, 593, 595, 596, 597, 598, 601, 606, 611, 612, 613, 614, 615, 618, 623, 626, 627, 631, 632, 633, 634, 635, 636, 637, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 692, 693, 694, 696, 697, 699, 705, 708, 710, 711, 733, 734, 742, 745, 767, 773, 782, 787, 788, 791, 792, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 895, 896, 897, 898, 899, 900, 901, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 934, 940, 957, 967, 988, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1021, 1023, 1028, 1029, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "If": [0, 43, 50, 52, 64, 68, 77, 82, 88, 103, 113, 124, 133, 147, 150, 155, 180, 183, 187, 196, 214, 229, 231, 232, 248, 251, 255, 266, 272, 279, 286, 297, 305, 312, 317, 318, 342, 346, 349, 350, 353, 354, 355, 361, 362, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 397, 402, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 432, 435, 436, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 516, 518, 519, 523, 526, 527, 528, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 715, 716, 717, 718, 720, 721, 722, 726, 730, 731, 732, 733, 734, 735, 736, 740, 742, 745, 749, 750, 752, 757, 758, 759, 760, 761, 762, 763, 765, 767, 768, 770, 771, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 816, 818, 821, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 929, 930, 932, 933, 934, 935, 937, 938, 939, 940, 941, 944, 950, 952, 954, 956, 961, 963, 967, 970, 973, 975, 978, 979, 985, 988, 989, 990, 991, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1005, 1008, 1009, 1011, 1012, 1015, 1017, 1019, 1020, 1021, 1022, 1024, 1025, 1028, 1036, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1049, 1050, 1052, 1054], "In": [0, 7, 37, 43, 44, 46, 48, 50, 51, 52, 53, 54, 62, 63, 64, 70, 72, 74, 82, 86, 88, 90, 91, 93, 99, 100, 103, 104, 106, 107, 109, 111, 112, 113, 116, 118, 121, 123, 126, 128, 129, 133, 135, 138, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 153, 155, 158, 165, 166, 168, 169, 171, 175, 176, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 199, 201, 202, 203, 205, 209, 214, 215, 216, 217, 218, 219, 222, 231, 232, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 255, 260, 262, 265, 266, 269, 270, 272, 273, 274, 275, 277, 278, 281, 282, 284, 285, 286, 287, 289, 292, 295, 298, 299, 301, 310, 312, 313, 314, 317, 318, 319, 321, 322, 323, 325, 326, 328, 329, 333, 335, 342, 346, 349, 353, 354, 355, 357, 361, 362, 366, 367, 368, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 391, 392, 393, 394, 396, 397, 398, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 440, 443, 444, 445, 446, 447, 450, 451, 452, 455, 465, 466, 467, 472, 475, 478, 497, 500, 507, 512, 513, 515, 527, 538, 540, 542, 544, 545, 546, 548, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 595, 606, 610, 613, 614, 615, 634, 636, 637, 638, 640, 647, 648, 649, 651, 652, 653, 655, 657, 659, 662, 663, 665, 667, 669, 670, 672, 673, 678, 679, 680, 683, 684, 688, 689, 690, 700, 703, 707, 716, 722, 724, 730, 732, 733, 738, 739, 742, 744, 746, 758, 760, 761, 785, 787, 789, 792, 798, 800, 801, 802, 803, 804, 807, 808, 810, 818, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 855, 856, 858, 859, 860, 865, 873, 875, 881, 882, 886, 887, 889, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 910, 913, 916, 918, 923, 933, 935, 952, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1029, 1033, 1036, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "Ines": 1053, "It": [0, 30, 43, 46, 47, 48, 52, 58, 62, 70, 72, 75, 86, 88, 91, 104, 109, 111, 113, 121, 124, 125, 130, 135, 138, 140, 141, 143, 145, 147, 155, 169, 176, 177, 178, 182, 183, 187, 188, 189, 195, 199, 201, 203, 211, 214, 218, 228, 231, 232, 234, 235, 241, 246, 248, 251, 266, 267, 268, 270, 272, 273, 275, 278, 279, 286, 289, 292, 298, 299, 300, 302, 303, 305, 312, 316, 317, 319, 321, 327, 329, 338, 342, 346, 349, 353, 354, 355, 362, 366, 367, 368, 372, 374, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 391, 392, 393, 394, 397, 402, 405, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 436, 440, 441, 444, 445, 446, 447, 448, 450, 451, 452, 455, 462, 465, 467, 470, 471, 472, 477, 481, 488, 490, 500, 512, 519, 528, 537, 539, 540, 542, 544, 545, 553, 554, 557, 558, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 593, 600, 606, 610, 611, 612, 615, 618, 619, 623, 624, 626, 627, 631, 634, 635, 636, 637, 645, 646, 647, 650, 651, 654, 656, 657, 658, 659, 662, 664, 665, 666, 667, 670, 671, 672, 674, 675, 676, 678, 680, 681, 682, 683, 685, 686, 687, 688, 691, 693, 695, 696, 697, 699, 700, 701, 702, 703, 704, 706, 708, 712, 713, 714, 720, 727, 738, 746, 747, 751, 762, 763, 766, 769, 785, 787, 792, 803, 804, 807, 808, 810, 816, 817, 818, 826, 827, 829, 832, 835, 844, 845, 850, 851, 852, 854, 857, 858, 859, 860, 864, 865, 866, 870, 871, 872, 876, 877, 878, 882, 885, 887, 897, 900, 901, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 925, 929, 938, 952, 961, 975, 978, 980, 981, 982, 983, 984, 985, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1020, 1021, 1024, 1029, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "Its": [109, 270, 274, 375, 393, 416, 421, 542, 925, 1000, 1001, 1010, 1013, 1019, 1024, 1029, 1039, 1053], "NOT": [248, 298, 376, 382, 567, 814, 848, 849], "Nearness": 631, "No": [61, 149, 199, 220, 222, 242, 248, 266, 332, 349, 376, 387, 397, 405, 411, 477, 563, 564, 594, 595, 639, 649, 668, 680, 682, 689, 690, 801, 1001, 1053], "Not": [88, 160, 188, 366, 391, 405, 411, 429, 430, 433, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 472, 473, 474, 475, 476, 477, 478, 479, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 567, 570, 573, 574, 585, 586, 587, 592, 593, 595, 631, 632, 633, 634, 681, 692, 693, 694, 695, 697, 798, 801, 802, 804, 807, 808, 818, 845, 848, 849, 852, 853, 854, 856, 860, 872, 880, 883, 884, 886, 889, 900, 901, 912, 1005, 1011, 1024, 1045], "OF": 376, "ON": 326, "ONE": [373, 611, 612], "OR": [312, 411, 422, 447, 1047], "Of": [48, 62, 64, 182, 286, 366, 381, 411, 419, 995], "On": [43, 51, 52, 55, 63, 100, 103, 104, 115, 116, 126, 135, 138, 140, 142, 147, 151, 152, 155, 158, 164, 166, 175, 176, 187, 188, 189, 196, 201, 203, 216, 218, 242, 243, 244, 245, 247, 248, 251, 252, 253, 254, 255, 257, 259, 262, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 279, 284, 286, 310, 312, 314, 316, 317, 318, 322, 323, 325, 326, 328, 333, 342, 349, 361, 366, 377, 379, 380, 381, 383, 391, 393, 407, 409, 411, 415, 416, 418, 420, 421, 647, 660, 695, 739, 765, 873, 889, 994, 998, 1001, 1004, 1005, 1007, 1011, 1013, 1018, 1020], "One": [2, 43, 48, 51, 61, 66, 82, 88, 126, 128, 144, 147, 150, 151, 184, 187, 190, 193, 218, 223, 229, 241, 252, 262, 266, 272, 279, 282, 289, 298, 301, 313, 328, 337, 339, 350, 354, 361, 366, 376, 379, 392, 393, 405, 410, 411, 414, 416, 417, 418, 419, 420, 422, 447, 452, 475, 477, 481, 516, 570, 635, 643, 662, 670, 672, 677, 679, 680, 681, 792, 811, 812, 836, 837, 838, 869, 870, 881, 912, 967, 995, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1013, 1015, 1020, 1026, 1027, 1031, 1040, 1042, 1049, 1051], "Or": [353, 361, 415, 416, 881, 1005, 1011, 1019], "Such": [53, 151, 171, 176, 186, 194, 199, 203, 215, 266, 275, 353, 393, 394, 405, 415, 416, 418, 559, 560, 660, 995, 1005, 1008, 1015, 1021, 1046, 1051, 1053], "THE": 376, "That": [52, 64, 121, 135, 150, 169, 187, 203, 241, 272, 276, 354, 355, 367, 373, 387, 393, 410, 415, 420, 421, 446, 449, 450, 561, 568, 597, 822, 916, 917, 994, 1002, 1003, 1011, 1021, 1045, 1046], "The": [2, 16, 25, 27, 30, 31, 33, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 391, 392, 393, 394, 396, 397, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 431, 433, 434, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 756, 757, 758, 759, 760, 761, 762, 763, 766, 768, 769, 770, 771, 774, 775, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 946, 947, 948, 949, 950, 951, 952, 954, 955, 957, 960, 961, 964, 967, 969, 970, 971, 973, 974, 975, 978, 986, 987, 988, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "Their": [187, 374, 376, 394, 411, 648, 1036], "Then": [103, 136, 140, 150, 155, 158, 166, 187, 192, 199, 201, 214, 218, 238, 242, 248, 254, 266, 274, 275, 289, 353, 361, 373, 383, 385, 387, 397, 398, 408, 411, 414, 416, 419, 420, 574, 597, 723, 760, 804, 818, 908, 909, 995, 1004, 1005, 1011, 1020, 1021, 1045], "There": [0, 74, 80, 141, 171, 232, 238, 248, 263, 267, 269, 272, 291, 353, 372, 374, 376, 379, 380, 381, 384, 391, 393, 394, 397, 408, 411, 416, 418, 419, 420, 449, 455, 465, 538, 557, 558, 563, 564, 592, 593, 595, 610, 649, 995, 1001, 1002, 1003, 1004, 1005, 1008, 1012, 1015, 1019, 1020, 1021, 1023, 1028, 1036, 1044], "These": [11, 18, 25, 32, 38, 43, 44, 46, 64, 84, 121, 123, 140, 143, 184, 188, 203, 214, 215, 216, 242, 266, 289, 292, 296, 310, 312, 319, 320, 325, 332, 334, 362, 366, 367, 372, 375, 376, 379, 381, 383, 386, 388, 391, 393, 397, 402, 405, 408, 409, 410, 411, 414, 416, 418, 419, 420, 421, 445, 449, 451, 502, 512, 513, 519, 542, 571, 572, 606, 607, 672, 680, 681, 703, 710, 737, 782, 798, 804, 807, 808, 810, 818, 827, 829, 830, 831, 832, 833, 835, 853, 854, 873, 927, 994, 996, 999, 1001, 1002, 1005, 1006, 1016, 1018, 1020, 1024, 1036, 1042, 1044, 1045, 1046, 1049, 1053, 1055], "To": [1, 43, 47, 63, 64, 68, 80, 88, 90, 109, 111, 113, 116, 126, 135, 144, 147, 148, 157, 160, 169, 176, 177, 180, 182, 183, 186, 187, 192, 196, 199, 201, 214, 215, 216, 218, 222, 232, 245, 246, 248, 251, 253, 255, 262, 266, 267, 269, 270, 272, 274, 275, 277, 279, 285, 286, 289, 291, 309, 312, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 351, 354, 357, 362, 366, 367, 372, 373, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 397, 405, 407, 408, 411, 412, 413, 414, 415, 416, 418, 419, 449, 451, 452, 453, 464, 467, 470, 496, 500, 506, 507, 511, 512, 513, 535, 541, 542, 543, 545, 547, 548, 549, 550, 561, 562, 563, 564, 568, 569, 573, 601, 615, 631, 636, 650, 651, 656, 657, 660, 662, 663, 664, 665, 666, 667, 688, 704, 716, 732, 767, 789, 797, 807, 808, 830, 837, 868, 879, 884, 898, 899, 908, 909, 913, 916, 917, 918, 919, 942, 952, 991, 994, 995, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1019, 1020, 1021, 1029, 1036, 1039, 1041, 1042, 1043, 1045, 1047], "Will": [379, 501, 538, 631, 648, 649, 650, 656, 660, 661, 664, 665, 666, 667, 668, 669, 677, 679, 711, 718, 792, 873, 877, 887, 888, 1039, 1040, 1042, 1044, 1054], "Willing": [1042, 1043], "With": [61, 70, 79, 100, 107, 118, 126, 150, 152, 165, 184, 188, 214, 216, 240, 242, 247, 249, 255, 272, 296, 366, 374, 377, 379, 381, 393, 402, 411, 412, 415, 418, 420, 440, 442, 505, 545, 586, 636, 637, 662, 866, 869, 871, 882, 888, 889, 915, 917, 998, 1001, 1002, 1005, 1006, 1008, 1009, 1012, 1019, 1021, 1026, 1033, 1039, 1043, 1044, 1046, 1048, 1050], "_": [43, 44, 46, 47, 48, 50, 51, 52, 54, 58, 62, 63, 64, 66, 68, 69, 75, 78, 83, 86, 88, 91, 96, 100, 102, 113, 118, 119, 121, 126, 128, 130, 138, 139, 140, 150, 164, 171, 176, 177, 178, 186, 187, 188, 190, 192, 194, 198, 199, 201, 202, 203, 206, 211, 212, 214, 216, 218, 227, 228, 231, 235, 238, 242, 247, 251, 255, 266, 267, 272, 274, 275, 276, 278, 279, 281, 285, 286, 289, 295, 300, 303, 310, 314, 317, 318, 319, 322, 325, 326, 327, 329, 332, 333, 341, 346, 349, 353, 355, 358, 381, 385, 393, 416, 418, 419, 423, 449, 481, 536, 537, 538, 539, 540, 542, 543, 544, 547, 549, 550, 551, 570, 601, 650, 651, 656, 657, 664, 665, 666, 667, 685, 686, 687, 688, 692, 693, 694, 695, 697, 699, 700, 702, 704, 714, 768, 804, 810, 818, 827, 852, 860, 881, 882, 889, 995, 1001, 1002, 1005, 1007, 1008, 1009, 1012, 1013, 1015, 1020, 1021, 1043], "_0": [213, 689, 1001, 1005, 1020], "_1": [324, 346, 413, 416, 419, 535, 541, 542, 544, 549, 550, 551, 650, 651, 656, 657, 658, 659, 660, 664, 665, 666, 667, 685, 686, 687, 688, 770, 1001, 1003, 1005, 1020], "_11": 656, "_2": [112, 176, 346, 416, 419, 535, 541, 549, 550, 650, 656, 1001, 1009, 1019, 1020], "_21": [650, 651, 656, 657, 664, 665, 666, 667, 685, 688], "__": [105, 273, 393, 412, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 1044, 1045], "______________________________________________________________________": 332, "________________________________________________________________________________": [50, 87, 353], "__________________________________________________________________________________": 91, "________________________________________________________ward_tre": 87, "_____________________________________________________f_regress": 87, "__add__": [421, 628], "__array__": [1039, 1046], "__array_function__": [1025, 1046], "__c": 381, "__call__": [179, 342, 393, 419, 421, 469, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 942, 970, 1043], "__class__": [182, 214, 216, 248, 251, 274, 314, 353, 354, 355, 386], "__class_weight": 381, "__dataframe__": [565, 566], "__doc__": [78, 107, 176, 260, 393], "__file__": [47, 49, 1049], "__getattr__": 381, "__getitem__": 1054, "__getstate__": [1043, 1051], "__init__": [47, 89, 133, 179, 248, 292, 342, 379, 381, 383, 384, 385, 386, 393, 419, 425, 428, 431, 434, 435, 622, 965, 1037, 1042, 1044, 1049, 1050, 1051, 1052], "__init_subclass__": 381, "__len__": 1045, "__main__": [335, 391], "__metadata_request__fit": 248, "__mul__": 625, "__mul___": 421, "__name__": [46, 62, 94, 182, 214, 216, 248, 251, 255, 267, 274, 314, 335, 353, 354, 355, 386, 391, 881], "__pow__": [421, 620], "__repr__": [381, 1025, 1045], "__sklearn_clone__": [381, 436, 1052], "__sklearn_is_fitted__": [89, 132, 184, 381, 425, 428, 988, 1026, 1049, 1050], "__sklearn_tags__": [381, 941, 957, 1055], "__version__": [148, 190, 321, 383], "_agglom": 87, "_array_api": 407, "_bag": 944, "_base": [258, 381], "_basehmm": 1036, "_bay": 944, "_birch": 1046, "_breast_cancer_dataset": 169, "_build": 379, "_c_step": 1043, "_cfnode": 445, "_check_bounds_param": 1048, "_check_i": 993, "_check_param_grid": 1042, "_check_sample_weight": 1049, "_check_stop_list": 595, "_check_target": 1043, "_check_x": 1046, "_class": 1005, "_class_cov": 1044, "_class_mean": 1044, "_classif": 310, "_classifier_ha": 89, "_column_transform": [103, 155], "_compon": [245, 540], "_coo": [589, 590], "_count_nonzero_coeffici": 46, "_criterion": 1044, "_csr": 881, "_cython_bla": 380, "_devianc": 1005, "_diabetes_dataset": 169, "_distn_infrastructur": 284, "_doc_link_modul": 381, "_doc_link_templ": 381, "_doc_link_url_param_gener": 381, "_dotbla": 385, "_encod": 1044, "_error": 1005, "_estim": 993, "_estimator_html_repr": 948, "_estimator_typ": [381, 393, 428, 429, 430, 433, 434, 1041], "_estimator_with_converted_arrai": 407, "_f": [179, 1001], "_featur": [416, 542, 544, 551], "_fit_and_scor": 1044, "_fit_stag": [563, 564], "_fro": [535, 541, 549, 550, 650, 651, 656, 664, 665, 666, 685], "_g": 179, "_gb": 1046, "_generate_center_coordin": 53, "_get_support_mask": 605, "_get_tag": 1047, "_get_warnings_filters_info_list": 367, "_gpr": 180, "_h": [542, 544, 551], "_hist_gradient_boost": 383, "_i": [409, 418, 996, 1001, 1005, 1009, 1020], "_idx": 393, "_init": 195, "_init_t": 1019, "_initialize_nmf": 385, "_is_fit": 133, "_iter": 383, "_j": [409, 996], "_k": [413, 999, 1001], "_l": 1005, "_learntselectormixin": 1041, "_level": [421, 629], "_logist": 379, "_loss": [393, 1005, 1054], "_m": 1021, "_mean": 318, "_mean_frequency_by_risk_group": 214, "_method": 964, "_my": 379, "_n": [419, 1005], "_n_cluster": 379, "_n_compon": 551, "_n_features_out": 427, "_name_estim": 1046, "_neg": 385, "_newton_cg": 1047, "_nls_subproblem": 385, "_nmf": 385, "_not_in_sphinx": [47, 49], "_num_thread": 367, "_obj": 964, "_openmp_help": 380, "_pairwis": [1046, 1048], "_plain_sgd": 1051, "_plot": [242, 331], "_po": 385, "_posterior_mod": 614, "_preprocess_data": 691, "_pvalu": 1036, "_rand": 362, "_ratio": [542, 544, 551], "_request": [248, 402, 1054], "_required_paramet": 431, "_reset": 47, "_run_search": 1044, "_safe_index": [2, 1049, 1053, 1054], "_safe_split": 925, "_safe_tag": 1047, "_sag": 1045, "_sampl": [245, 416, 542, 544, 551], "_samples_gener": 260, "_score": [393, 804, 818, 831, 1005, 1036, 1049], "_search": 1042, "_serial": 248, "_sgd_fast": 1051, "_skip_test": 927, "_spars": 385, "_sparse_fit": 1046, "_std": 318, "_t": 1019, "_test": [222, 314, 367, 381, 1049], "_test_scor": [272, 475, 598, 1049], "_transform_select": 1042, "_tree": [916, 917, 918, 919, 1037, 1039], "_typedef": 380, "_univariate_select": 87, "_validate_data": 1055, "_valu": [421, 617], "_w": [542, 544, 551], "_weight": [53, 232], "_weight_boost": 944, "_weighted_percentil": 1049, "_x_is_even": 965, "_xfail_check": 927, "a16": [1046, 1047], "a65628": [79, 95], "a674e682c281": 384, "a_": [122, 408, 411, 542, 544, 551, 1001], "a_column": 723, "a_i": 411, "a_mask": 281, "a_n": 408, "a_row": 723, "a_tru": 281, "aaa": 179, "aaaaff": [297, 300], "aaai": [411, 422, 447, 843, 1007], "aact": 179, "aaffaa": 300, "aagaard": 1040, "aakanksha": 1044, "aapl": 51, "aarch64": 387, "aaron": [498, 1001, 1039, 1040, 1041, 1046], "aarshai": [1043, 1044], "aashil": 1043, "ab": [51, 55, 75, 107, 125, 131, 137, 144, 155, 165, 169, 190, 205, 225, 227, 230, 232, 237, 272, 312, 329, 340, 351, 411, 542, 544, 551, 631, 848, 849, 883, 1005], "ab_mask": 281, "abadi": [1042, 1043], "abandon": 379, "abati": [1051, 1053, 1054, 1055], "abbi": [1046, 1047], "abbrevi": 703, "abdela": 1045, "abdulaziz": 1054, "abdulelah": 1049, "abdur": 1046, "abenbihi": 1046, "abhijeet": 1038, "abhinav": [1046, 1049], "abhishek": [1039, 1040, 1046, 1050, 1052, 1053], "abhyudai": 1043, "abid": 379, "abil": [48, 52, 94, 111, 147, 170, 171, 172, 176, 178, 180, 182, 184, 186, 187, 189, 214, 218, 232, 241, 353, 368, 397, 418, 419, 421, 615, 626, 629, 786, 787, 788, 791, 792, 1002, 1005, 1008, 1011, 1021, 1025, 1026, 1036, 1038, 1043, 1045, 1049, 1050], "abirami": 411, "abl": [43, 44, 48, 61, 81, 88, 94, 113, 116, 125, 126, 150, 152, 177, 187, 190, 199, 203, 214, 230, 232, 238, 278, 283, 285, 328, 329, 342, 362, 366, 367, 368, 373, 377, 379, 381, 383, 384, 387, 391, 405, 411, 413, 415, 419, 488, 507, 538, 833, 880, 994, 995, 1001, 1004, 1005, 1006, 1011, 1015, 1018, 1021, 1022, 1025, 1042, 1043, 1047, 1054], "ablin": 1051, "abnorm": [228, 241, 298, 341, 374, 496, 567, 854, 1011, 1044], "abo7atm": 1048, "abort": 696, "about": [3, 46, 50, 65, 79, 86, 90, 95, 102, 116, 143, 166, 180, 184, 186, 190, 218, 231, 241, 248, 266, 269, 270, 272, 274, 279, 291, 297, 317, 321, 323, 324, 325, 326, 327, 332, 353, 355, 361, 362, 366, 367, 372, 374, 378, 379, 381, 383, 384, 385, 387, 392, 393, 394, 405, 410, 415, 416, 419, 421, 441, 496, 498, 499, 500, 501, 504, 505, 506, 508, 509, 514, 519, 565, 566, 597, 598, 611, 612, 618, 644, 680, 682, 747, 804, 810, 818, 827, 837, 887, 935, 995, 1001, 1002, 1004, 1006, 1008, 1011, 1012, 1015, 1016, 1018, 1020, 1021, 1024, 1028, 1029, 1041, 1042, 1052, 1054], "abov": [43, 62, 63, 64, 72, 79, 99, 102, 137, 140, 141, 147, 150, 158, 168, 169, 187, 188, 200, 214, 216, 220, 225, 245, 248, 249, 266, 272, 278, 289, 297, 314, 317, 318, 322, 324, 328, 346, 354, 355, 361, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 381, 383, 385, 391, 393, 394, 409, 411, 412, 413, 415, 416, 417, 418, 419, 421, 444, 448, 467, 470, 492, 499, 500, 501, 527, 594, 638, 708, 759, 804, 808, 816, 818, 829, 871, 872, 885, 891, 897, 905, 967, 994, 995, 997, 999, 1001, 1002, 1005, 1008, 1010, 1012, 1015, 1019, 1020, 1021, 1025, 1042, 1054], "abraham": [1036, 1037, 1042, 1046], "abrahamowicz": 1015, "absenc": [241, 275, 393, 716, 871, 1004, 1005], "absent": [393, 409, 419, 733, 758, 829], "absgrad": 1047, "absher": 1038, "absolut": [2, 43, 52, 107, 125, 144, 169, 187, 214, 216, 220, 232, 329, 361, 381, 405, 411, 413, 415, 416, 418, 419, 420, 421, 422, 447, 453, 459, 460, 535, 541, 546, 549, 550, 552, 553, 554, 562, 564, 565, 566, 569, 592, 594, 595, 597, 601, 606, 623, 631, 636, 650, 653, 654, 656, 658, 660, 675, 676, 678, 680, 682, 686, 687, 708, 721, 725, 740, 741, 749, 750, 752, 757, 759, 761, 799, 806, 810, 821, 824, 832, 834, 846, 848, 849, 853, 872, 877, 880, 893, 917, 919, 990, 1001, 1002, 1015, 1019, 1021, 1037, 1042, 1047, 1048, 1049, 1050, 1053], "absolute_error": [52, 418, 562, 564, 566, 569, 675, 917, 919, 1049], "absolute_loss": 1049, "absolutelynowarranti": 1044, "absp": 864, "abstain": 538, "abstract": [393, 416, 421, 622, 773, 1036], "abstractmethod": 1046, "absurd": 1012, "abund": 374, "ac": [534, 668, 689, 690, 1001, 1018], "acad": [693, 697, 1002], "academ": [415, 1029], "academi": [111, 855], "acategorypredict": 399, "acc": 146, "acc_clf1": 69, "acc_clf2": 69, "acc_clf3": 69, "acc_histori": 47, "acc_knn": 301, "acceler": [246, 326, 366, 391, 407, 411, 471, 696, 906, 1002, 1024, 1029, 1045, 1049, 1051, 1053], "accent": [350, 592, 593, 595, 1046], "accept": [169, 171, 248, 266, 269, 321, 329, 342, 353, 355, 362, 366, 367, 373, 379, 381, 388, 391, 392, 393, 394, 402, 407, 411, 419, 440, 444, 447, 448, 451, 464, 467, 470, 512, 513, 559, 560, 565, 566, 573, 574, 585, 586, 597, 598, 601, 632, 639, 643, 647, 650, 651, 656, 657, 683, 731, 746, 782, 801, 802, 803, 807, 808, 826, 850, 851, 858, 859, 868, 872, 932, 934, 935, 938, 993, 1001, 1003, 1005, 1008, 1013, 1015, 1020, 1024, 1025, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "accept_large_spars": [934, 935, 1044], "accept_spars": [872, 934, 935, 1043, 1053], "access": [43, 82, 109, 145, 251, 258, 263, 328, 329, 353, 361, 366, 367, 379, 380, 381, 387, 391, 393, 394, 407, 411, 413, 414, 418, 419, 421, 453, 460, 467, 470, 540, 571, 572, 573, 574, 621, 866, 867, 868, 923, 994, 1001, 1004, 1005, 1011, 1012, 1013, 1019, 1020, 1025, 1029, 1036, 1038, 1042, 1043, 1044, 1045, 1048, 1050, 1051, 1052], "accid": [214, 232], "accident": [1036, 1040, 1045], "accommod": [176, 1044], "accompani": [272, 1044], "accomplish": [248, 381, 409, 550, 1002, 1006, 1008, 1029, 1053], "accord": [2, 55, 61, 63, 72, 82, 109, 141, 146, 169, 172, 198, 214, 232, 245, 321, 346, 354, 362, 379, 381, 391, 392, 393, 394, 405, 408, 409, 411, 413, 415, 416, 418, 419, 421, 440, 453, 455, 459, 463, 465, 468, 472, 508, 520, 521, 522, 529, 534, 536, 539, 540, 542, 544, 554, 557, 558, 565, 566, 567, 570, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 645, 646, 648, 649, 653, 662, 663, 674, 684, 695, 699, 739, 783, 784, 804, 805, 806, 807, 808, 811, 812, 813, 818, 829, 843, 844, 845, 846, 847, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 871, 878, 886, 898, 900, 901, 908, 909, 910, 911, 913, 914, 999, 1001, 1005, 1007, 1008, 1015, 1018, 1019, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "accordingli": [150, 188, 251, 346, 379, 383, 384, 1043, 1044, 1051], "account": [52, 53, 88, 123, 129, 135, 150, 176, 182, 187, 232, 248, 266, 272, 295, 301, 349, 351, 354, 366, 375, 379, 393, 394, 402, 411, 414, 415, 416, 418, 419, 466, 565, 566, 571, 572, 631, 632, 634, 636, 637, 653, 677, 683, 708, 711, 732, 733, 734, 742, 747, 760, 787, 788, 791, 792, 805, 809, 822, 882, 994, 997, 999, 1003, 1005, 1006, 1007, 1008, 1015, 1019, 1021, 1041, 1043, 1044, 1045, 1048, 1049, 1051, 1053, 1054, 1055], "acctactagaagtt": 391, "acctcctagaag": 391, "accumul": [47, 83, 142, 203, 383, 385, 411, 419, 1005, 1037, 1044], "accur": [43, 48, 52, 59, 62, 63, 111, 121, 149, 171, 178, 187, 188, 218, 229, 232, 266, 272, 279, 283, 289, 325, 353, 354, 362, 378, 393, 409, 411, 413, 416, 418, 419, 420, 440, 446, 450, 454, 456, 462, 535, 542, 544, 546, 547, 549, 550, 551, 611, 612, 638, 807, 808, 848, 849, 951, 952, 997, 1002, 1005, 1021, 1050], "accuraci": [2, 30, 37, 43, 45, 46, 47, 62, 66, 67, 68, 69, 102, 103, 104, 105, 135, 141, 142, 145, 146, 153, 165, 166, 168, 172, 190, 192, 214, 218, 222, 229, 230, 259, 270, 271, 272, 273, 274, 276, 278, 286, 289, 294, 300, 301, 302, 310, 314, 317, 327, 331, 332, 334, 342, 345, 346, 349, 362, 366, 392, 393, 410, 411, 415, 418, 419, 420, 428, 440, 452, 472, 474, 475, 481, 536, 538, 545, 553, 554, 555, 557, 559, 561, 562, 563, 565, 568, 569, 571, 573, 614, 638, 662, 663, 670, 672, 675, 678, 679, 680, 696, 701, 707, 712, 715, 717, 722, 736, 737, 738, 742, 747, 758, 767, 791, 798, 800, 803, 826, 832, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 850, 855, 857, 858, 865, 903, 904, 908, 910, 913, 916, 918, 924, 951, 952, 994, 999, 1000, 1001, 1002, 1006, 1008, 1009, 1013, 1017, 1019, 1021, 1044, 1045, 1054], "accuracy_histori": 47, "accuracy_scor": [2, 66, 135, 172, 276, 317, 334, 353, 362, 392, 402, 407, 428, 561, 568, 712, 715, 733, 734, 738, 742, 787, 788, 791, 798, 800, 945, 994, 1005, 1037, 1038, 1039, 1048, 1053, 1054], "acf": 144, "achar": [1043, 1044, 1045, 1046], "achiev": [43, 51, 55, 57, 64, 67, 124, 135, 143, 145, 150, 153, 179, 192, 214, 222, 269, 272, 279, 317, 329, 334, 342, 345, 346, 349, 353, 362, 366, 368, 373, 374, 376, 381, 385, 391, 393, 399, 408, 409, 410, 411, 415, 416, 418, 419, 562, 569, 644, 653, 680, 682, 711, 733, 734, 742, 744, 767, 787, 788, 791, 807, 808, 844, 888, 994, 995, 997, 1001, 1005, 1015, 1018, 1020, 1049], "achin": 1029, "achliopta": [245, 901, 902, 1017], "acid": [317, 376], "acknowledg": [378, 613, 1053], "acl": [905, 1018, 1019], "acm": [373, 374, 411, 422, 447, 453, 460, 463, 515, 567, 680, 730, 760, 854, 1005, 1008, 1011, 1017], "acoust": 1005, "acq": 47, "acquaint": 379, "acquir": [53, 274, 1048], "acquisit": [408, 723], "acronym": 383, "across": [0, 2, 15, 43, 52, 88, 94, 100, 115, 118, 141, 160, 187, 203, 208, 235, 267, 269, 272, 285, 286, 292, 312, 317, 346, 380, 381, 388, 393, 405, 409, 411, 415, 418, 419, 420, 423, 440, 443, 453, 455, 457, 460, 463, 465, 472, 475, 477, 491, 494, 496, 499, 501, 507, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 555, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 571, 572, 592, 595, 598, 606, 611, 612, 614, 615, 636, 637, 638, 643, 644, 645, 646, 650, 651, 654, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 680, 682, 683, 689, 690, 693, 694, 695, 696, 697, 698, 699, 708, 709, 721, 735, 761, 792, 797, 799, 801, 802, 804, 805, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 853, 857, 864, 865, 866, 873, 877, 878, 885, 886, 888, 889, 897, 900, 901, 903, 904, 908, 909, 910, 913, 916, 917, 951, 952, 975, 978, 994, 1001, 1003, 1005, 1015, 1019, 1021, 1025, 1029, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1054], "act": [342, 353, 379, 392, 417, 418, 717, 733, 734, 742, 787, 788, 791, 883, 887, 1002, 1005, 1008, 1020, 1044], "action": [324, 353, 378, 382, 383, 397, 410, 1015, 1046], "activ": [52, 68, 184, 222, 257, 263, 273, 330, 331, 355, 373, 374, 377, 379, 380, 385, 387, 391, 393, 394, 397, 398, 402, 412, 500, 506, 530, 636, 639, 641, 654, 655, 657, 658, 659, 667, 668, 669, 686, 687, 688, 689, 690, 717, 722, 801, 864, 865, 866, 904, 970, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1018, 1026, 1028, 1047], "active_": [654, 655, 658, 659], "active_features_": 1044, "actual": [43, 52, 64, 80, 93, 107, 116, 141, 150, 169, 187, 192, 203, 214, 218, 222, 259, 268, 275, 279, 355, 361, 362, 366, 368, 376, 379, 381, 384, 385, 391, 392, 393, 409, 411, 416, 418, 419, 420, 436, 513, 519, 520, 531, 539, 542, 544, 551, 566, 567, 648, 649, 652, 662, 663, 670, 671, 672, 673, 674, 676, 678, 680, 681, 682, 684, 691, 695, 699, 705, 708, 713, 719, 725, 726, 727, 728, 789, 801, 807, 808, 820, 823, 824, 854, 885, 908, 914, 943, 944, 945, 979, 997, 1004, 1005, 1008, 1012, 1013, 1021, 1028, 1043, 1044, 1050, 1051, 1052], "actual_vs_predict": [43, 107, 155, 187, 268, 326, 705], "actuari": 409, "ad": [43, 53, 58, 107, 128, 130, 135, 141, 150, 165, 171, 177, 178, 194, 199, 216, 218, 238, 247, 248, 272, 273, 274, 312, 322, 323, 324, 325, 326, 327, 328, 329, 335, 346, 354, 378, 379, 381, 383, 391, 393, 394, 416, 418, 419, 420, 421, 422, 423, 429, 433, 435, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 508, 509, 514, 516, 518, 526, 527, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 708, 712, 715, 717, 718, 720, 722, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 738, 743, 744, 745, 746, 747, 750, 757, 758, 761, 765, 770, 771, 773, 779, 781, 782, 786, 787, 788, 789, 791, 793, 794, 795, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 817, 818, 822, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894, 897, 898, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 932, 934, 935, 942, 946, 947, 951, 952, 960, 961, 962, 963, 964, 967, 970, 974, 979, 985, 991, 993, 994, 998, 1000, 1001, 1002, 1006, 1008, 1009, 1011, 1025, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "adaboost": [2, 67, 134, 138, 143, 151, 154, 155, 158, 174, 184, 346, 358, 359, 360, 523, 555, 557, 558, 563, 635, 707, 834, 916, 917, 1026, 1027, 1031, 1038], "adaboost_clf": 135, "adaboostclassifi": [2, 67, 137, 143, 402, 418, 558, 563, 565, 944, 1038, 1039, 1042, 1043, 1045, 1046, 1049, 1051, 1052, 1053, 1055], "adaboostregressor": [2, 136, 402, 418, 557, 566, 944, 1038, 1039, 1042, 1045, 1046, 1049, 1051, 1052], "adam": [0, 308, 400, 865, 866, 1009, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "adamgonzo": 1050, "adamson": 1048, "adanhawth": [1044, 1045], "adapt": [86, 88, 135, 146, 147, 257, 258, 266, 346, 367, 378, 379, 388, 411, 418, 421, 519, 520, 521, 522, 680, 681, 682, 865, 866, 1001, 1007, 1009, 1015, 1019, 1024, 1025, 1044, 1045, 1052, 1053], "adarsh": [1053, 1054], "add": [44, 51, 55, 58, 62, 63, 64, 68, 69, 75, 79, 87, 107, 111, 112, 116, 122, 143, 146, 165, 167, 169, 171, 176, 177, 178, 182, 183, 197, 202, 203, 209, 215, 217, 218, 229, 237, 241, 245, 247, 248, 279, 281, 282, 292, 304, 314, 316, 321, 323, 324, 345, 346, 348, 349, 354, 366, 377, 378, 379, 380, 381, 383, 385, 387, 393, 397, 407, 409, 415, 418, 419, 420, 519, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 606, 631, 632, 634, 636, 662, 663, 698, 701, 825, 848, 849, 905, 942, 961, 962, 994, 995, 1004, 1011, 1015, 1018, 1019, 1025, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "add_2d_scatt": 234, "add_artist": [70, 235, 257, 258, 259, 262, 263], "add_ax": [188, 238, 283], "add_categori": 251, "add_collect": [51, 237, 244], "add_dummy_featur": 2, "add_ind": [155, 183, 631, 632, 634, 995, 1045, 1048, 1052], "add_missing_valu": 183, "add_nois": 177, "add_self_request": [248, 961], "add_subplot": [46, 62, 64, 77, 97, 100, 118, 127, 188, 211, 229, 236, 238, 331, 332, 386], "add_trac": 141, "adddatapointbatch": 292, "addep": 1047, "addison": [594, 734], "addit": [2, 7, 37, 43, 44, 46, 51, 53, 54, 99, 103, 113, 118, 121, 124, 135, 139, 141, 142, 144, 145, 168, 176, 177, 178, 183, 187, 188, 194, 199, 203, 215, 216, 218, 238, 252, 266, 274, 281, 285, 287, 291, 312, 322, 323, 328, 333, 346, 355, 359, 362, 366, 367, 371, 372, 373, 374, 375, 378, 379, 381, 383, 384, 385, 387, 391, 393, 394, 397, 405, 410, 411, 413, 415, 416, 419, 420, 421, 422, 435, 444, 445, 447, 448, 449, 453, 460, 472, 477, 500, 507, 536, 538, 540, 541, 543, 545, 546, 547, 553, 557, 558, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 586, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 615, 616, 623, 632, 634, 635, 639, 642, 643, 644, 645, 646, 647, 648, 649, 674, 691, 692, 696, 702, 703, 706, 746, 762, 763, 792, 796, 801, 802, 810, 827, 837, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 890, 900, 901, 908, 909, 946, 952, 994, 999, 1001, 1005, 1006, 1008, 1009, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1031, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055], "addition": [86, 104, 137, 150, 187, 214, 232, 248, 322, 324, 354, 379, 391, 409, 419, 614, 615, 650, 656, 675, 885, 994, 995, 1005, 1013, 1024, 1042, 1053], "additional_nois": 75, "additive_chi2": [624, 642, 769, 778], "additive_chi2_kernel": [2, 407, 642, 763, 769, 997, 1055], "additivechi2sampl": [2, 643, 644, 645, 646, 762, 763, 997, 1050, 1052], "address": [43, 218, 248, 353, 374, 379, 410, 411, 419, 450, 661, 1001, 1002, 1007, 1008, 1009, 1010, 1011, 1015, 1029, 1044], "adelr": 1044, "adequ": [367, 385, 571, 1049], "adeyemi": 1054, "adher": [2, 366, 381, 393, 946, 947, 1036, 1037], "adien": 1052, "adijohar": 1050, "adil": 1051, "adimension": 187, "adithya": 1041, "aditi": 1054, "aditya": [1042, 1044, 1045, 1046, 1050, 1051], "adityadaflapurkar": 1044, "adjac": [411, 416, 455, 465, 589, 590, 639, 695, 699, 958, 1002, 1008], "adjacency_matrix": 411, "adjust": [2, 43, 48, 71, 73, 82, 91, 109, 135, 147, 164, 184, 218, 241, 246, 254, 273, 289, 321, 335, 349, 354, 386, 411, 412, 416, 418, 419, 528, 557, 558, 561, 563, 565, 566, 568, 662, 663, 670, 672, 678, 679, 680, 708, 709, 712, 718, 719, 759, 761, 790, 799, 843, 844, 846, 847, 878, 900, 901, 908, 909, 910, 913, 916, 918, 940, 1004, 1005, 1009, 1015, 1026, 1033, 1036, 1042, 1052], "adjusted_mutual_info_scor": [2, 72, 73, 82, 91, 411, 709, 719, 737, 759, 761, 790, 1005, 1036, 1044, 1048, 1052], "adjusted_rand_index": 709, "adjusted_rand_scor": [2, 72, 73, 82, 91, 354, 411, 708, 719, 737, 761, 790, 1005, 1049], "administr": [397, 398], "admir": [1051, 1052], "admiss": [245, 367], "adopt": [381, 383, 391, 393, 904, 1005, 1019, 1044, 1051, 1053], "adoublet": [1051, 1052], "adpot": 327, "adrian": [1049, 1050, 1051], "adrien": 1036, "adrin": [0, 394, 400, 405, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "adrinjalali": [1039, 1048], "adult": [328, 500, 1015], "advanc": [44, 152, 184, 188, 240, 242, 272, 291, 368, 379, 411, 416, 492, 505, 539, 636, 643, 787, 801, 857, 866, 869, 888, 917, 994, 997, 1005, 1008, 1015, 1026, 1029, 1033, 1038], "advani": 1048, "advantag": [43, 44, 74, 88, 90, 121, 126, 148, 214, 215, 241, 258, 273, 291, 325, 329, 362, 393, 409, 415, 416, 419, 421, 444, 448, 463, 538, 593, 653, 678, 679, 767, 836, 837, 838, 868, 869, 908, 909, 910, 911, 912, 913, 914, 994, 997, 1000, 1001, 1002, 1005, 1006, 1008, 1009, 1013, 1015, 1019, 1020, 1021, 1039], "advic": [387, 421, 626, 627], "advik": [1053, 1054], "advis": [52, 215, 248, 362, 379, 411, 419, 440, 650, 656, 658, 664, 666, 676, 691, 997, 1001, 1007, 1009, 1020, 1050], "advoc": 1006, "aeberhard": 376, "aesthet": [312, 1021, 1041], "af": 73, "affan": 1042, "affanv14": 1043, "affect": [46, 62, 111, 150, 178, 186, 187, 218, 238, 251, 252, 275, 282, 317, 327, 362, 366, 367, 368, 375, 393, 396, 409, 411, 414, 415, 417, 419, 422, 424, 447, 453, 460, 476, 478, 482, 553, 554, 573, 703, 716, 792, 804, 807, 808, 809, 818, 822, 823, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 888, 889, 899, 913, 1004, 1008, 1020, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1054], "affili": 374, "affin": [2, 27, 71, 72, 79, 82, 88, 96, 184, 312, 333, 371, 381, 393, 416, 443, 444, 455, 457, 465, 516, 539, 695, 699, 708, 709, 721, 741, 797, 799, 904, 925, 999, 1002, 1005, 1026, 1030, 1031, 1036, 1037, 1040, 1046, 1047, 1049, 1051], "affinity_matrix": [695, 699], "affinity_matrix_": [443, 455, 695], "affinity_propag": [2, 51, 79], "affinitypropag": [2, 73, 79, 325, 411, 1036, 1039, 1040, 1044, 1047, 1049, 1050, 1051, 1052, 1053], "affirm": 43, "afnlp": 1019, "afor": [900, 901], "aforement": [367, 1006], "afraid": 397, "africa": 1015, "afroj": 1053, "aft": [318, 1039], "aftab": 1045, "after": [43, 55, 58, 59, 63, 80, 86, 88, 102, 103, 107, 112, 123, 135, 145, 150, 153, 155, 158, 165, 169, 176, 178, 180, 182, 187, 192, 207, 214, 251, 252, 255, 260, 272, 281, 291, 292, 300, 302, 312, 313, 316, 317, 353, 354, 368, 374, 376, 378, 379, 381, 383, 385, 386, 387, 391, 393, 405, 407, 408, 409, 411, 412, 415, 416, 419, 420, 423, 445, 450, 453, 454, 455, 456, 459, 465, 519, 536, 540, 554, 557, 558, 563, 564, 565, 566, 601, 631, 634, 662, 663, 670, 671, 672, 677, 679, 680, 681, 682, 696, 716, 730, 760, 798, 801, 802, 807, 808, 857, 864, 868, 881, 887, 908, 913, 914, 929, 994, 995, 999, 1001, 1005, 1009, 1010, 1015, 1017, 1019, 1020, 1021, 1025, 1036, 1039, 1043, 1044, 1047, 1048, 1051, 1054], "afterward": [58, 383, 539, 545, 832], "ag": [103, 169, 187, 189, 201, 203, 214, 232, 252, 253, 255, 266, 312, 324, 325, 326, 328, 374, 376, 500, 1029], "again": [43, 58, 100, 104, 147, 175, 177, 179, 187, 238, 273, 353, 362, 383, 388, 393, 394, 411, 412, 413, 418, 419, 475, 571, 572, 638, 651, 655, 657, 659, 665, 667, 669, 696, 994, 1001, 1005, 1019, 1033, 1036, 1044, 1053], "against": [64, 72, 116, 130, 138, 148, 164, 192, 205, 206, 223, 231, 248, 281, 318, 321, 342, 374, 379, 394, 405, 409, 411, 415, 419, 441, 513, 546, 552, 555, 680, 682, 759, 761, 792, 806, 811, 813, 833, 837, 970, 997, 1001, 1005, 1006, 1008, 1020, 1023], "agamemnon": [1043, 1044, 1045, 1046, 1048, 1049], "agarw": [1043, 1044, 1046], "agath": 1050, "agc": 179, "agct": 179, "agent": 1029, "agg": 176, "aggfunc": 283, "agglo": [84, 448], "agglom": [2, 51, 71, 72, 77, 79, 81, 89, 93, 95, 99, 100, 184, 235, 237, 331, 332, 411, 444, 448, 506, 695, 782, 861, 1026, 1039], "agglomer": [2, 44, 68, 71, 83, 165, 167, 184, 197, 213, 250, 296, 331, 332, 371, 411, 419, 448, 506, 604, 610, 649, 804, 809, 868, 1026, 1031], "agglomerativeclust": [2, 74, 75, 76, 79, 81, 85, 89, 95, 100, 393, 411, 443, 445, 448, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "aggreg": [93, 139, 232, 275, 281, 286, 325, 327, 411, 418, 420, 538, 559, 560, 598, 725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 1006, 1008, 1015, 1052], "aggress": [2, 47, 221, 670, 671, 807, 808, 1027, 1031, 1037], "aggressive_elimin": [807, 808, 994], "agnost": [1004, 1013, 1054], "ago": [51, 383, 1025], "agraw": [1039, 1044, 1050, 1051], "agre": [25, 164, 387, 394, 411, 790], "agreement": [0, 2, 411, 708, 720, 759, 761, 799, 1005], "agricultur": 1001, "aguiar": 420, "agundez": 1044, "ahead": 892, "ahmadi": 1047, "ahmadjubair33": 1050, "ahmedbgh": [1051, 1052], "ahn": 1048, "ahuja": [1043, 1050, 1051], "ai": 415, "ai8rahim": 1039, "aic": [2, 160, 184, 193, 200, 201, 202, 208, 222, 262, 505, 655, 657, 658, 659, 660, 802, 869, 888, 994, 1026, 1036, 1043, 1049, 1050], "aic_criterion": 201, "aid": [269, 411, 796, 797, 1002, 1029, 1036, 1048], "aidan": 1044, "aidar": 1050, "aig": 51, "aiko": 1051, "aim": [52, 58, 112, 150, 183, 218, 266, 300, 333, 346, 368, 374, 377, 379, 393, 405, 411, 413, 419, 451, 1001, 1005, 1008, 1015, 1020, 1024, 1050], "air": [176, 768], "airport": 768, "airspe": 379, "aisha": 1054, "aishgrt1": 1044, "aishwarya": 1044, "aishwaryark": 1043, "aistat": 1018, "aivision2020": 1043, "aj": [498, 1050], "ak": [409, 1050, 1051], "aka": [2, 45, 307, 353, 391, 419, 455, 540, 542, 544, 548, 551, 585, 586, 619, 626, 655, 656, 658, 659, 660, 662, 663, 666, 670, 671, 672, 674, 680, 681, 682, 745, 875, 879, 881, 1001, 1009, 1019, 1038, 1050], "akai": 1049, "akaik": [201, 203, 262, 660, 802, 994, 1001], "akash": [1044, 1054], "aki": [1050, 1051, 1052], "akihiro": 1054, "akin": [43, 215, 393], "akinkunl": 1046, "akitti": 1041, "akshai": [1040, 1043, 1048], "akshay0724": 1043, "akshayah3": 1040, "akshita": 1051, "al": [0, 2, 50, 109, 110, 135, 149, 201, 305, 374, 376, 408, 411, 413, 416, 418, 419, 420, 454, 502, 523, 524, 532, 539, 545, 548, 567, 686, 687, 723, 724, 843, 845, 865, 866, 901, 951, 952, 1001, 1002, 1005, 1011, 1015, 1017, 1020, 1021, 1044, 1049, 1052, 1053], "ala": [1051, 1052], "aladago": 1046, "alam": [1051, 1052], "alan": [1043, 1044, 1047, 1049, 1050, 1054], "alastuei": 1039, "albeit": 62, "albert": [0, 369, 1043, 1044, 1045, 1048, 1049], "alberto": [1045, 1049, 1050, 1054], "alcalin": 376, "alcohol": [317, 376], "alcorn": 1044, "aldrian": 1040, "aleator": 52, "alec": 1046, "alejandro": [1037, 1042, 1053], "alek": [1049, 1050], "aleksandr": 1043, "aleksandra": 1047, "alemagnani": 1039, "alert": 1043, "alessandro": [1046, 1048, 1051], "alessia": 1049, "alex": [405, 419, 1020, 1036, 1039, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "alexand": [0, 401, 411, 416, 539, 874, 1038, 1039, 1040, 1042, 1043, 1044, 1048, 1049, 1050, 1053], "alexandercbooth": 1043, "alexandr": [0, 121, 394, 400, 401, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "alexandracraciun": 1048, "alexandru": 442, "alexanmv": 1050, "alexei": 1041, "alexfield": 1042, "alexgoryainov": 1046, "alexi": [1036, 1039, 1040, 1043, 1053, 1054], "alexl": [1052, 1053], "alexqiao": 1054, "alexryndin": 1044, "alexshack": [1046, 1047, 1048], "alfalfa": 57, "alfano": 1043, "alfaro": [0, 369, 1047, 1048, 1049, 1050, 1051], "alfr": 0, "algebra": [367, 377, 382, 391, 416, 419, 465, 874, 1015], "algesheim": 411, "algo": [78, 130], "algo_param": [79, 95], "algorithm": [2, 6, 8, 9, 11, 18, 28, 30, 32, 33, 38, 39, 41, 48, 53, 55, 56, 65, 71, 72, 77, 78, 80, 83, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 110, 111, 115, 121, 123, 135, 136, 141, 151, 184, 192, 202, 203, 217, 228, 230, 236, 238, 240, 244, 245, 251, 258, 259, 260, 263, 269, 272, 281, 292, 298, 299, 301, 305, 312, 314, 317, 321, 322, 323, 326, 328, 333, 335, 341, 353, 354, 355, 362, 366, 368, 372, 373, 374, 375, 376, 379, 380, 381, 382, 387, 388, 392, 393, 396, 407, 408, 411, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 472, 477, 478, 481, 485, 486, 487, 491, 507, 515, 516, 517, 518, 519, 526, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 548, 549, 550, 551, 552, 557, 558, 559, 560, 563, 564, 567, 595, 607, 608, 614, 615, 639, 641, 643, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 708, 709, 712, 721, 723, 739, 741, 747, 778, 782, 783, 797, 799, 801, 802, 836, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 864, 869, 873, 875, 888, 892, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 934, 951, 952, 954, 969, 973, 979, 995, 997, 1000, 1002, 1003, 1004, 1005, 1007, 1010, 1011, 1015, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1027, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "algorithm_nam": 78, "ali": [1041, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "alia": [52, 248, 380, 387, 393, 402, 440, 446, 447, 450, 452, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 537, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 594, 595, 614, 615, 621, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 978, 1011, 1025, 1036, 1050], "alias": [80, 81, 248, 377, 379, 382, 402, 601, 1036, 1040, 1050], "aliased_sample_weight": 248, "align": [70, 148, 150, 183, 234, 257, 283, 355, 393, 693, 697, 997, 1008, 1019, 1030, 1031, 1052, 1053], "alihan": [1049, 1055], "alik": [416, 1003], "alin": 1049, "alison": 1043, "all": [0, 2, 4, 30, 43, 44, 46, 47, 50, 53, 57, 61, 62, 64, 70, 73, 74, 75, 77, 78, 85, 86, 87, 88, 93, 97, 107, 113, 121, 123, 124, 133, 140, 141, 143, 147, 150, 157, 158, 169, 176, 177, 179, 184, 186, 187, 188, 190, 194, 199, 200, 206, 207, 208, 214, 215, 216, 217, 218, 223, 225, 229, 231, 232, 234, 235, 241, 247, 248, 251, 252, 255, 258, 260, 262, 266, 270, 273, 274, 275, 276, 278, 279, 280, 282, 284, 285, 289, 292, 295, 297, 309, 312, 313, 317, 321, 322, 323, 324, 326, 327, 328, 329, 331, 333, 334, 335, 339, 342, 346, 347, 349, 350, 353, 354, 355, 358, 361, 362, 366, 367, 368, 372, 374, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 391, 392, 393, 394, 398, 402, 405, 407, 408, 409, 410, 411, 412, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 428, 429, 430, 431, 433, 434, 435, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 507, 512, 513, 519, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 709, 713, 717, 718, 719, 720, 721, 722, 724, 725, 727, 730, 732, 733, 734, 736, 737, 739, 740, 741, 742, 746, 749, 750, 752, 754, 755, 757, 760, 765, 773, 778, 782, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 806, 807, 808, 810, 811, 813, 814, 816, 818, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 930, 932, 934, 935, 936, 940, 943, 944, 945, 946, 958, 961, 967, 979, 988, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1055], "all_class": 47, "all_displai": [2, 388, 1051], "all_estim": [2, 388, 1046, 1047, 1051], "all_funct": [2, 388, 1051], "all_label": 905, "all_model": 147, "all_or_ani": [988, 1046], "all_scor": 737, "all_split": [43, 52], "all_uppercas": 419, "allan": [353, 409, 1048], "allclos": [122, 152, 1017], "allefeld": 1049, "allen": [326, 1039, 1041, 1043, 1046], "allend": [1047, 1049], "allevi": [90, 150, 194, 199, 411, 1007], "allison": 326, "alloc": [2, 42, 45, 62, 94, 184, 284, 323, 375, 379, 380, 411, 419, 446, 450, 462, 491, 540, 542, 544, 588, 592, 595, 650, 656, 664, 666, 807, 808, 810, 827, 832, 835, 994, 1015, 1024, 1026, 1030, 1031, 1040, 1041, 1046, 1047, 1053, 1055], "allow": [25, 43, 58, 89, 91, 106, 107, 118, 125, 126, 138, 139, 145, 153, 171, 176, 177, 178, 180, 202, 208, 214, 218, 232, 235, 242, 245, 252, 254, 255, 257, 266, 272, 285, 286, 291, 321, 322, 323, 324, 326, 329, 346, 347, 353, 361, 362, 366, 373, 374, 379, 380, 381, 383, 386, 387, 388, 391, 393, 394, 402, 405, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 440, 446, 447, 449, 450, 452, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 500, 527, 528, 537, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 597, 598, 601, 607, 614, 615, 619, 631, 632, 634, 638, 639, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 694, 696, 703, 746, 766, 769, 778, 782, 785, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 811, 813, 815, 818, 822, 825, 826, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 858, 859, 863, 865, 866, 868, 870, 871, 873, 874, 875, 880, 887, 888, 892, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 932, 934, 935, 946, 947, 968, 994, 995, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "allow_nan": [925, 933, 935, 1052], "allow_nd": [934, 935], "allow_non": 715, "allow_single_clust": [79, 449], "allow_unlabel": [119, 249, 527], "allowed_extens": 507, "allwein": 289, "almeida": [1037, 1038, 1049], "almeidayoel": 1050, "almer": 1043, "almost": [43, 70, 141, 146, 216, 222, 248, 251, 266, 287, 317, 329, 334, 362, 372, 374, 383, 385, 391, 392, 393, 402, 411, 415, 416, 473, 474, 475, 476, 478, 479, 480, 801, 994, 1000, 1001, 1004, 1005, 1020, 1044, 1049], "almubarak": [1049, 1050], "alon": [187, 218, 278, 342, 393, 409, 652, 673, 684, 1043, 1045], "along": [2, 51, 53, 89, 92, 99, 116, 142, 147, 150, 176, 202, 214, 246, 248, 276, 321, 354, 355, 362, 374, 379, 383, 387, 388, 393, 397, 402, 405, 408, 416, 418, 419, 420, 423, 537, 554, 591, 615, 616, 634, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 680, 682, 685, 686, 687, 688, 689, 690, 783, 784, 796, 804, 818, 877, 878, 881, 882, 885, 886, 887, 888, 893, 894, 895, 897, 898, 899, 930, 954, 979, 985, 994, 1001, 1008, 1015, 1018, 1029, 1036, 1041, 1042, 1044, 1048, 1049], "alongsid": [379, 385, 393, 397, 420, 829, 830, 831, 832, 833, 835, 1005, 1012, 1024, 1025], "alonso": [1047, 1049], "aloqe": 1054, "alpaydin": 376, "alpha": [2, 43, 44, 46, 47, 49, 51, 52, 53, 55, 61, 63, 67, 70, 72, 75, 77, 85, 89, 93, 98, 107, 113, 116, 121, 123, 124, 126, 127, 129, 130, 135, 137, 138, 143, 147, 150, 151, 152, 154, 155, 156, 169, 171, 174, 176, 177, 178, 179, 180, 182, 183, 187, 194, 195, 196, 197, 199, 200, 201, 202, 203, 208, 209, 211, 212, 214, 215, 216, 218, 219, 223, 226, 227, 232, 234, 235, 238, 246, 247, 254, 257, 272, 273, 274, 275, 276, 279, 280, 282, 284, 285, 291, 292, 295, 297, 300, 302, 307, 309, 312, 313, 314, 315, 317, 319, 322, 324, 325, 328, 333, 335, 339, 340, 343, 344, 346, 347, 349, 350, 351, 353, 366, 374, 381, 385, 391, 413, 414, 416, 418, 420, 421, 423, 449, 474, 475, 481, 531, 535, 537, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 564, 599, 600, 602, 615, 617, 619, 620, 627, 635, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 691, 727, 752, 843, 844, 845, 847, 865, 866, 904, 916, 917, 918, 919, 994, 1001, 1005, 1007, 1009, 1013, 1018, 1019, 1020, 1021, 1033, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "alpha_": [43, 113, 160, 187, 195, 201, 203, 475, 615, 648, 649, 651, 655, 657, 659, 660, 665, 667, 677, 679, 1001, 1021, 1036, 1043], "alpha_1": [648, 649, 1001], "alpha_2": [648, 649, 1001], "alpha_a": 203, "alpha_b": 203, "alpha_bound": [180, 627], "alpha_h": [54, 416, 542, 544, 551, 1049], "alpha_i": [1007, 1020], "alpha_init": [195, 649, 1001, 1046], "alpha_max": [650, 651, 656, 657, 664, 665, 666, 667, 685, 688], "alpha_min": [650, 651, 654, 656, 657, 658, 660, 664, 665, 666, 667, 685, 686, 687, 688], "alpha_per_target": [677, 1048], "alpha_w": [54, 416, 542, 544, 551, 1049], "alphabet": [104, 393, 726, 745], "alphalpha": 57, "alphanumer": [393, 592, 593, 595], "alphas_": [201, 203, 651, 654, 655, 657, 658, 659, 660, 665, 667, 686, 687, 1036, 1039, 1049], "alphas_enet": 202, "alphas_lar": 202, "alphas_lasso": 202, "alphas_positive_enet": 202, "alphas_positive_lar": 202, "alphas_positive_lasso": 202, "alphavantag": 51, "alphonsu": 1046, "alreadi": [2, 43, 45, 49, 88, 91, 118, 126, 135, 150, 155, 169, 187, 242, 249, 251, 254, 266, 273, 279, 292, 324, 327, 379, 380, 384, 391, 393, 409, 410, 413, 415, 417, 418, 423, 440, 495, 503, 527, 537, 571, 572, 638, 650, 653, 668, 669, 670, 671, 672, 678, 680, 681, 682, 689, 690, 772, 782, 843, 863, 871, 877, 878, 880, 885, 905, 908, 909, 937, 963, 994, 997, 1011, 1015, 1016, 1025, 1033, 1037, 1041, 1044, 1048, 1049, 1050, 1051], "alsadi": 1044, "alsaedi": 1049, "alsalhi": [0, 1039, 1040], "alsawadi": 1049, "also": [0, 2, 25, 30, 43, 46, 50, 52, 55, 57, 58, 61, 62, 63, 64, 68, 80, 86, 90, 91, 93, 97, 102, 103, 109, 111, 115, 116, 121, 128, 130, 135, 138, 141, 144, 145, 146, 147, 148, 150, 153, 155, 165, 166, 167, 169, 171, 173, 176, 183, 184, 187, 188, 189, 190, 192, 195, 196, 198, 203, 206, 207, 210, 214, 215, 216, 218, 219, 223, 231, 232, 234, 244, 246, 248, 251, 252, 263, 266, 270, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 285, 286, 289, 291, 292, 300, 303, 304, 305, 307, 312, 313, 314, 316, 317, 321, 322, 323, 324, 328, 329, 336, 338, 339, 340, 342, 344, 346, 353, 354, 355, 357, 358, 361, 362, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 381, 383, 385, 387, 388, 391, 392, 393, 394, 397, 399, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 440, 441, 442, 444, 445, 448, 449, 450, 451, 453, 455, 465, 466, 468, 470, 485, 487, 496, 500, 502, 507, 512, 536, 537, 539, 540, 545, 550, 553, 555, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 614, 615, 626, 636, 637, 639, 647, 648, 649, 650, 651, 654, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 668, 676, 680, 682, 685, 688, 691, 695, 698, 699, 703, 714, 717, 720, 727, 733, 734, 742, 747, 767, 783, 784, 787, 788, 791, 801, 802, 804, 806, 807, 808, 818, 821, 824, 830, 831, 832, 833, 834, 835, 837, 847, 850, 851, 852, 854, 855, 856, 858, 859, 860, 864, 865, 866, 868, 870, 871, 876, 877, 881, 885, 888, 893, 897, 910, 913, 916, 917, 918, 919, 927, 934, 952, 954, 961, 968, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "alt": [57, 273, 335, 353, 354, 355, 374, 387, 491], "altai": 1046, "alter": [62, 183, 381, 393, 733, 734, 742, 787, 788, 791, 1041, 1045, 1048], "altern": [43, 63, 103, 116, 142, 148, 150, 155, 189, 199, 214, 232, 242, 260, 263, 266, 281, 321, 346, 353, 354, 355, 362, 374, 377, 379, 383, 385, 391, 393, 394, 397, 405, 406, 408, 409, 411, 412, 413, 415, 416, 418, 419, 421, 444, 445, 448, 449, 450, 455, 461, 466, 503, 542, 544, 545, 551, 557, 558, 561, 562, 563, 564, 568, 569, 570, 586, 592, 593, 595, 621, 624, 647, 696, 710, 712, 775, 778, 782, 785, 806, 837, 872, 878, 881, 894, 901, 903, 916, 917, 918, 919, 971, 999, 1001, 1002, 1004, 1005, 1008, 1009, 1013, 1015, 1017, 1018, 1020, 1021, 1025, 1031, 1041, 1043, 1049, 1050, 1054], "alternate_sign": [47, 419, 586, 593, 1043], "although": [43, 48, 62, 142, 155, 186, 211, 232, 241, 259, 291, 346, 362, 368, 381, 383, 387, 393, 411, 412, 416, 419, 500, 879, 1004, 1006, 1007, 1008, 1011, 1021, 1036, 1044, 1051], "altman": [632, 995], "altogeth": [144, 385, 1044], "alva": 1046, "alvaro": [1042, 1044], "alvin": 1044, "alwai": [141, 144, 147, 187, 194, 214, 232, 239, 245, 266, 275, 278, 282, 319, 339, 346, 349, 354, 362, 366, 367, 373, 377, 379, 380, 381, 385, 387, 392, 393, 397, 405, 409, 411, 412, 415, 418, 419, 420, 421, 428, 434, 446, 452, 467, 468, 470, 472, 485, 486, 487, 491, 500, 512, 513, 548, 553, 555, 556, 558, 560, 562, 563, 564, 565, 566, 568, 569, 572, 574, 585, 592, 593, 595, 598, 615, 631, 632, 634, 636, 637, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 675, 676, 677, 680, 682, 683, 699, 709, 713, 719, 725, 726, 727, 728, 736, 738, 739, 743, 786, 789, 790, 801, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 841, 842, 851, 852, 859, 860, 866, 873, 881, 886, 888, 891, 893, 894, 895, 896, 897, 898, 899, 901, 909, 910, 911, 913, 914, 916, 917, 919, 953, 963, 964, 994, 995, 997, 999, 1001, 1004, 1005, 1008, 1011, 1013, 1017, 1018, 1020, 1021, 1029, 1036, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054], "always_accept_polici": 266, "always_reject_polici": 266, "alyssa": [1039, 1043], "alyssaq": 1042, "am": [102, 107, 111, 155, 188, 353, 384, 413, 477, 497, 1043], "amai": 1052, "aman": [1042, 1043, 1044, 1050, 1051], "amanda": [1044, 1047, 1048, 1049, 1050], "amar": [1050, 1051, 1052, 1054], "amax": 109, "amazon": 51, "amber": 393, "ambient": 238, "ambigu": [273, 384, 419, 576, 716, 952, 1008, 1045, 1047, 1049], "ambival": 93, "ambrosio": 1043, "ambroz": [1046, 1047], "amelia": 995, "amen": [385, 391, 421, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 994], "america": [50, 51, 111, 305, 374, 855, 1015], "american": [50, 51, 102, 112, 374, 411, 413, 417, 418, 419, 472, 477, 735, 888], "amerr": 1054, "ames_h": 251, "amg": [80, 99, 411, 455, 465, 695, 699, 1046, 1050, 1051], "amherst": 374, "ami": [72, 82, 91, 411, 708], "amicel": [1036, 1039], "amin": 109, "aminaka": 1040, "amit": [1036, 1050, 1051], "amlan": 1042, "amo": 1039, "amol": 1049, "among": [2, 64, 179, 188, 190, 192, 214, 262, 279, 291, 361, 368, 374, 381, 393, 394, 409, 414, 450, 452, 516, 523, 798, 833, 851, 856, 858, 910, 913, 916, 917, 918, 919, 994, 997, 1005, 1006, 1012, 1015, 1020, 1021, 1036, 1042, 1043, 1046, 1053], "amongst": [51, 1021], "amor": [0, 390, 1050, 1051, 1052, 1053, 1054], "amormachin": 1039, "amort": 1008, "amount": [37, 38, 47, 51, 86, 99, 109, 112, 121, 125, 136, 138, 177, 187, 199, 218, 232, 246, 266, 285, 323, 329, 331, 334, 336, 342, 349, 355, 366, 367, 368, 391, 411, 413, 416, 418, 419, 420, 446, 457, 472, 542, 543, 545, 547, 567, 600, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 669, 685, 688, 696, 807, 808, 848, 849, 854, 889, 904, 905, 918, 919, 994, 1000, 1001, 1004, 1007, 1009, 1015, 1017, 1018, 1019, 1020, 1049, 1053], "amount_fraud": 266, "amount_iter": 334, "amount_label": 334, "amount_test": 266, "amount_train": 266, "amourav": 1045, "amplitud": [147, 176, 178, 208, 1001], "amplitude_nois": 75, "amput": 1025, "amrcod": 1050, "amsterdam": [405, 876, 1016], "amy12xx": 1048, "amzn": 51, "an": [0, 2, 25, 29, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 121, 122, 123, 124, 125, 126, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 154, 155, 158, 165, 169, 171, 172, 173, 176, 177, 178, 180, 181, 182, 184, 186, 187, 188, 189, 192, 193, 194, 195, 198, 199, 201, 202, 209, 214, 215, 216, 218, 219, 221, 222, 228, 230, 231, 232, 234, 235, 236, 237, 239, 241, 242, 244, 245, 246, 247, 248, 249, 251, 255, 257, 258, 260, 262, 263, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 285, 291, 292, 295, 298, 299, 300, 303, 305, 312, 317, 318, 319, 322, 323, 324, 326, 327, 328, 329, 332, 336, 338, 339, 341, 342, 344, 345, 346, 353, 354, 355, 357, 360, 361, 362, 366, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 392, 393, 394, 396, 397, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 432, 435, 436, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 505, 507, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 579, 580, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 614, 615, 616, 623, 626, 627, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 713, 715, 716, 722, 724, 725, 731, 733, 734, 738, 739, 741, 746, 747, 749, 750, 752, 754, 755, 757, 760, 762, 763, 767, 768, 770, 771, 772, 773, 774, 777, 779, 780, 781, 782, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 931, 932, 934, 935, 937, 938, 941, 942, 946, 947, 948, 950, 951, 952, 954, 956, 957, 960, 961, 962, 963, 964, 965, 967, 968, 969, 974, 975, 978, 979, 985, 988, 990, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "ana": [1047, 1049, 1054], "anaconda": [0, 367, 377, 383], "anak": 1048, "analog": [43, 57, 149, 385, 418, 1005, 1006, 1020, 1045], "analogi": [1004, 1005], "analys": [234, 361, 416, 807, 808, 1002, 1024, 1029], "analysen": 453, "analysi": [2, 12, 27, 44, 46, 48, 49, 58, 62, 65, 71, 90, 96, 98, 109, 110, 111, 112, 113, 115, 118, 119, 120, 122, 123, 125, 126, 127, 129, 130, 144, 161, 183, 184, 187, 203, 235, 256, 258, 262, 263, 266, 269, 272, 273, 277, 283, 292, 293, 294, 295, 303, 304, 312, 317, 349, 354, 371, 374, 376, 379, 381, 394, 408, 411, 413, 418, 419, 423, 442, 450, 451, 476, 478, 479, 485, 486, 488, 506, 508, 516, 519, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 559, 560, 635, 642, 692, 694, 695, 696, 697, 714, 723, 729, 730, 760, 792, 793, 796, 797, 801, 804, 830, 834, 850, 857, 868, 869, 874, 884, 888, 896, 951, 952, 995, 1001, 1002, 1004, 1005, 1015, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1036, 1037, 1038, 1040, 1045], "analyst": 871, "analyt": [126, 416, 421, 536, 624, 712, 995, 999, 1005, 1023, 1029], "analyz": [43, 46, 55, 199, 274, 281, 326, 353, 355, 384, 385, 411, 419, 507, 592, 593, 595, 792, 1002, 1005, 1012, 1013, 1021, 1036, 1045], "anam": 1053, "anand": [1044, 1048], "ananiad": 1019, "anantharam": 1050, "anavelyz": 1049, "ana\u00ebl": 1046, "anbari": 532, "anchor": 283, "ander": [1040, 1046], "andersen": [747, 1050], "anderson": [50, 305, 374, 502, 1042, 1048, 1054], "andi": [1036, 1043], "ando": 1041, "andr": [1043, 1050], "andrea": [0, 394, 400, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "andreh7": 1043, "andrei": [1051, 1053, 1054], "andrew": [411, 465, 695, 699, 721, 741, 799, 883, 1009, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "andrewww": 1044, "andrii": 1050, "andriushchenko": [1042, 1043], "androutsopoulo": [843, 1007], "andrzej": [542, 544, 551], "andr\u00e1": [1049, 1050, 1051, 1052], "andr\u00e9": [1049, 1050, 1052], "ands": 879, "andyscanzio": 1053, "ang": 1043, "angel": [0, 401], "angela": [1046, 1047, 1051], "angelaambroz": 1047, "angelotti": 1055, "angermuel": [1040, 1041], "angl": [2, 53, 70, 124, 169, 257, 258, 259, 262, 263, 376, 416, 535, 541, 543, 546, 547, 549, 550, 552, 654, 655, 656, 657, 658, 659, 660, 667, 668, 669, 682, 686, 687, 688, 689, 690, 696, 1002, 1003, 1027, 1031, 1036], "angmar": 57, "angu": [1043, 1044, 1050], "angular": [417, 696, 768], "anh": [542, 544, 551], "ani": [2, 25, 37, 43, 47, 48, 52, 53, 57, 79, 80, 88, 90, 100, 152, 164, 169, 177, 178, 186, 187, 188, 189, 190, 203, 214, 218, 232, 241, 244, 245, 248, 258, 262, 263, 266, 272, 273, 275, 278, 281, 289, 305, 312, 313, 316, 321, 323, 324, 326, 329, 342, 346, 355, 362, 366, 367, 368, 373, 374, 376, 377, 379, 381, 383, 384, 385, 387, 392, 393, 394, 397, 399, 402, 405, 407, 408, 409, 411, 412, 415, 416, 417, 418, 419, 420, 436, 443, 449, 451, 452, 453, 455, 457, 459, 460, 464, 467, 470, 491, 492, 512, 513, 527, 538, 541, 543, 550, 555, 561, 562, 563, 564, 568, 569, 570, 571, 572, 573, 574, 583, 584, 586, 592, 593, 595, 597, 607, 614, 615, 624, 631, 636, 637, 649, 652, 662, 663, 670, 671, 672, 673, 680, 681, 682, 683, 684, 696, 700, 703, 704, 708, 720, 721, 723, 728, 740, 741, 756, 759, 761, 778, 782, 783, 784, 785, 796, 797, 799, 804, 807, 808, 816, 817, 837, 840, 848, 849, 854, 858, 867, 868, 872, 873, 877, 879, 881, 882, 889, 898, 899, 902, 905, 908, 909, 916, 917, 918, 919, 920, 922, 930, 934, 935, 941, 974, 988, 994, 995, 997, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1028, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "aniket": [1051, 1053], "anil": [411, 455, 465], "anim": [353, 419], "anirban": 419, "aniruddha": 1044, "anish": [1041, 1042], "anisha": 1046, "aniso": [79, 95], "anisotrop": [90, 173, 421, 621, 623, 626], "anisotropicli": [79, 95], "anjirbag": 1044, "ankan": 1041, "ankerst": [411, 453, 460], "ankit": [1039, 1046, 1048, 1050], "ankit810": 1047, "ankita": 1044, "ankur": [1041, 1052], "ann": [1036, 1048, 1050], "anna": 1044, "annaayzenshtat": 1044, "annal": [169, 199, 201, 376, 418, 477, 520, 521, 522, 563, 564, 660, 1001], "annau": 1049, "annegnx": 1052, "anno": [696, 1002], "annoi": 367, "annot": [2, 43, 48, 63, 157, 167, 192, 235, 276, 279, 353, 379, 380, 381, 411, 720, 922, 1005, 1021, 1045], "annotationbbox": 235, "announc": [0, 321, 322, 323, 324, 325, 326, 327, 328, 329, 383], "annual": [376, 411, 730, 760, 905, 1005, 1018], "anomali": [14, 48, 111, 151, 184, 228, 240, 251, 298, 299, 374, 472, 516, 526, 567, 643, 681, 854, 869, 912, 1011, 1024, 1026, 1042, 1043], "anomaly_algorithm": 241, "anomaly_frac": 251, "anoth": [43, 72, 121, 126, 135, 145, 149, 169, 171, 179, 183, 187, 203, 218, 222, 239, 241, 248, 252, 258, 266, 272, 274, 275, 278, 282, 286, 302, 353, 355, 357, 362, 366, 368, 373, 374, 377, 379, 381, 385, 391, 393, 405, 408, 411, 415, 416, 418, 419, 420, 422, 445, 447, 455, 458, 465, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 512, 542, 544, 551, 677, 680, 696, 713, 723, 810, 826, 827, 867, 868, 889, 994, 995, 1000, 1001, 1002, 1005, 1006, 1008, 1011, 1015, 1019, 1020, 1045, 1046, 1053], "anova": [2, 49, 87, 106, 163, 165, 168, 169, 184, 337, 412, 448, 508, 519, 596, 599, 600, 602, 603, 604, 608, 609, 610, 613, 717, 830, 834, 868, 869, 888, 908, 913, 1020, 1026], "anova__percentil": [87, 345], "anova_filt": 166, "anova_svm": 166, "ansam": 1052, "answer": [160, 186, 272, 379, 391, 405, 410, 730, 760, 1005, 1029], "ant": [722, 758, 1005], "anthoni": [1041, 1043, 1044], "anthony22": [1051, 1052], "anti": [199, 362, 610, 843, 1007], "anti_alias": [80, 81], "anticip": 52, "antoin": [1036, 1038, 1039, 1040, 1043, 1055], "antoni": [1040, 1042, 1048, 1051, 1055], "antonin": 1043, "antonio": [1044, 1046], "anubhav": 1044, "anuja": 1046, "anulekh": 1051, "anupam": [902, 1017, 1051], "anurag": 1055, "any_method": 964, "anymor": [150, 189, 214, 274, 321, 322, 342, 362, 383, 412, 431, 674, 1042, 1045, 1048, 1049, 1050, 1052, 1053, 1055], "anyon": [379, 394, 410, 1028, 1029], "anyth": [355, 385, 393, 402, 412, 415, 964, 968, 1050], "anywai": [48, 353, 381, 669, 689, 690], "anywher": 313, "anz": 1037, "aoif": [712, 1005], "ap": [2, 279, 711, 712, 1005], "apart": [187, 324, 342, 391, 393, 402, 412, 414, 420, 729, 1020, 1029, 1044], "api": [0, 51, 83, 89, 132, 140, 184, 240, 242, 248, 252, 253, 269, 274, 281, 282, 292, 328, 329, 354, 355, 368, 372, 373, 379, 382, 383, 388, 389, 391, 392, 394, 397, 405, 410, 416, 418, 419, 421, 425, 428, 429, 430, 433, 435, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 500, 508, 512, 514, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 567, 568, 570, 571, 572, 573, 574, 583, 584, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 662, 675, 681, 692, 693, 694, 695, 696, 706, 801, 802, 807, 808, 810, 827, 834, 852, 854, 856, 857, 860, 864, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 906, 912, 913, 927, 946, 947, 970, 988, 994, 1003, 1004, 1005, 1008, 1015, 1019, 1024, 1025, 1026, 1029, 1031, 1033, 1034, 1035, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "api_refer": 379, "apk": 397, "apostolo": 1051, "appar": [115, 1007, 1029], "appdata": 397, "appeal": 394, "appear": [0, 47, 80, 138, 187, 190, 267, 269, 270, 298, 299, 307, 309, 313, 332, 346, 353, 354, 355, 374, 377, 379, 384, 393, 413, 416, 491, 492, 559, 571, 572, 583, 614, 631, 632, 634, 701, 704, 706, 716, 720, 722, 786, 793, 805, 822, 843, 844, 845, 846, 847, 910, 913, 954, 1001, 1007, 1011, 1036, 1044, 1048, 1049], "append": [46, 47, 48, 51, 52, 55, 62, 69, 72, 75, 79, 83, 94, 103, 128, 138, 139, 141, 145, 147, 150, 183, 190, 207, 218, 219, 221, 222, 229, 232, 246, 247, 272, 275, 281, 282, 307, 308, 318, 334, 342, 345, 353, 354, 355, 357, 361, 385, 393, 412, 419, 662, 663, 908, 909, 915, 942, 1015], "appendix": [649, 680, 1001, 1015], "appl": [51, 366, 377, 391, 1006], "appli": [2, 32, 48, 54, 57, 62, 64, 68, 75, 79, 80, 81, 88, 89, 91, 95, 103, 107, 116, 118, 121, 122, 127, 129, 131, 140, 141, 145, 147, 165, 171, 187, 189, 199, 203, 218, 219, 228, 234, 235, 236, 241, 246, 248, 272, 273, 275, 284, 285, 286, 291, 301, 312, 316, 317, 322, 342, 346, 355, 361, 362, 366, 371, 379, 381, 383, 387, 391, 392, 393, 402, 408, 409, 411, 412, 413, 415, 416, 418, 419, 420, 421, 423, 443, 449, 455, 465, 467, 468, 470, 472, 477, 485, 486, 487, 488, 512, 513, 520, 521, 522, 528, 535, 536, 537, 538, 539, 541, 543, 545, 546, 547, 552, 553, 554, 557, 558, 561, 562, 563, 564, 568, 569, 570, 592, 593, 594, 595, 631, 636, 637, 642, 643, 645, 646, 662, 663, 672, 680, 681, 682, 695, 703, 705, 711, 715, 730, 760, 762, 763, 785, 792, 796, 797, 804, 818, 834, 837, 843, 844, 845, 846, 847, 857, 867, 868, 877, 884, 885, 888, 893, 894, 896, 897, 898, 899, 904, 915, 916, 917, 918, 919, 929, 934, 940, 944, 951, 952, 976, 995, 997, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1011, 1013, 1015, 1019, 1020, 1021, 1022, 1023, 1029, 1037, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1050], "applic": [42, 44, 57, 82, 88, 111, 184, 192, 214, 231, 236, 265, 266, 275, 312, 329, 366, 368, 374, 376, 379, 385, 387, 388, 391, 393, 409, 410, 411, 415, 416, 417, 418, 421, 423, 447, 449, 455, 500, 536, 537, 538, 557, 558, 633, 692, 693, 694, 698, 716, 733, 734, 742, 787, 788, 791, 834, 928, 994, 1001, 1002, 1003, 1004, 1005, 1009, 1011, 1017, 1021, 1024, 1025, 1026, 1028, 1029, 1036, 1037, 1042, 1044, 1047], "apply_along_axi": 310, "appr": 623, "appreci": [0, 379, 391], "approach": [44, 47, 91, 96, 99, 125, 169, 171, 182, 187, 190, 197, 201, 214, 216, 222, 232, 234, 266, 289, 318, 346, 353, 354, 355, 368, 378, 379, 385, 388, 393, 397, 399, 405, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 440, 446, 449, 451, 455, 465, 524, 536, 586, 593, 615, 639, 662, 663, 678, 679, 837, 853, 952, 994, 995, 1001, 1002, 1005, 1006, 1008, 1009, 1015, 1019, 1020, 1023, 1024, 1029, 1040, 1052], "appropri": [25, 88, 90, 128, 176, 187, 218, 248, 281, 286, 329, 357, 362, 379, 381, 387, 393, 405, 409, 411, 415, 417, 418, 422, 447, 453, 460, 492, 493, 494, 500, 504, 505, 506, 508, 509, 514, 581, 586, 595, 596, 599, 600, 602, 603, 604, 676, 678, 691, 713, 850, 851, 852, 854, 856, 858, 859, 860, 988, 1001, 1004, 1005, 1015, 1040, 1043, 1049, 1052, 1054], "approv": [379, 394, 418], "approx": [64, 121, 246, 416, 418, 419, 1005, 1012, 1019], "approxim": [0, 2, 23, 43, 44, 64, 69, 80, 86, 111, 125, 126, 130, 139, 146, 147, 169, 172, 187, 195, 210, 214, 215, 228, 232, 236, 239, 240, 241, 244, 247, 263, 272, 277, 287, 293, 294, 301, 312, 314, 315, 317, 321, 324, 353, 355, 359, 360, 362, 371, 376, 388, 391, 393, 408, 409, 412, 414, 415, 416, 418, 421, 423, 424, 425, 435, 452, 472, 473, 476, 477, 478, 479, 485, 486, 487, 494, 500, 506, 525, 528, 537, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 563, 564, 586, 593, 614, 615, 623, 642, 643, 644, 645, 646, 649, 661, 662, 663, 676, 678, 680, 681, 683, 691, 696, 762, 763, 768, 801, 805, 822, 829, 833, 834, 848, 849, 852, 856, 858, 859, 860, 864, 868, 869, 874, 878, 880, 881, 885, 897, 908, 913, 914, 951, 952, 978, 998, 999, 1000, 1001, 1002, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1019, 1020, 1021, 1024, 1025, 1026, 1031, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "approximate_nearest_neighbor": [292, 1026], "approximateident": 1037, "april": [374, 668, 689, 690, 1005, 1040, 1048, 1053], "apriori": 232, "apt": [377, 387, 397], "aptitud": 187, "aqua": 281, "aquantitypredict": 399, "ar": [0, 2, 16, 25, 30, 31, 32, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 68, 70, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 97, 99, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 123, 126, 128, 131, 133, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 165, 166, 168, 169, 171, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 218, 223, 225, 232, 234, 235, 236, 237, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 255, 258, 259, 260, 262, 265, 267, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 297, 298, 302, 305, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 340, 342, 344, 346, 349, 350, 353, 354, 355, 357, 361, 362, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 394, 397, 399, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 431, 432, 435, 436, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 512, 513, 514, 516, 519, 520, 521, 522, 523, 524, 527, 528, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 709, 711, 713, 715, 716, 717, 719, 720, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 744, 745, 746, 747, 749, 750, 752, 754, 755, 757, 758, 760, 761, 765, 766, 767, 769, 771, 772, 773, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 816, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 930, 931, 932, 934, 935, 938, 939, 940, 944, 946, 947, 951, 952, 953, 956, 957, 958, 960, 961, 964, 967, 968, 970, 975, 978, 979, 983, 984, 985, 988, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "arab": 631, "arabi": [411, 709, 719, 790], "aradwad": 1047, "arafat": 1042, "arai": 1046, "arang": [43, 50, 52, 53, 75, 91, 93, 98, 105, 110, 111, 128, 131, 143, 144, 146, 148, 149, 153, 157, 165, 171, 173, 178, 179, 182, 183, 190, 199, 214, 217, 219, 223, 237, 244, 246, 267, 272, 275, 280, 283, 291, 292, 305, 307, 314, 324, 331, 332, 334, 336, 342, 348, 353, 355, 359, 360, 361, 362, 391, 408, 415, 419, 468, 548, 834, 883, 887, 1000, 1001, 1009, 1015, 1019], "aravindh": 1051, "arbitarili": 353, "arbitrari": [2, 43, 52, 88, 116, 121, 122, 123, 140, 178, 194, 214, 231, 232, 270, 312, 316, 318, 323, 329, 353, 361, 379, 391, 393, 405, 412, 415, 416, 418, 419, 423, 449, 453, 458, 460, 468, 536, 537, 563, 564, 585, 643, 652, 673, 684, 692, 746, 793, 805, 806, 811, 813, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 872, 874, 887, 994, 996, 997, 1001, 1002, 1005, 1008, 1015, 1025, 1036, 1037, 1040, 1042, 1043, 1044, 1046, 1050, 1052, 1055], "arbitrarili": [172, 258, 263, 353, 393, 421, 434, 468, 485, 486, 487, 556, 558, 560, 562, 564, 566, 569, 572, 574, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 682, 683, 684, 725, 726, 727, 728, 750, 789, 793, 841, 842, 851, 859, 866, 889, 909, 911, 914, 917, 919, 1005, 1008, 1015, 1021], "arc": [376, 418], "archana": [1046, 1048], "archit": 1042, "architectur": [377, 381, 387, 391, 397, 405, 471, 906, 1009, 1029, 1036, 1053], "archiv": [47, 289, 373, 374, 376, 377, 411, 445, 504, 506, 514, 762, 763, 1003, 1020], "archive_filenam": 47, "archive_path": 47, "archive_sha256": 47, "arci": [712, 1005], "arcidiacono": [1050, 1051, 1053, 1054], "arcsin": [703, 768], "arctan": [70, 258, 263, 375, 522], "arctan2": [257, 259, 262], "ard": [2, 194, 648, 649], "ard_poli": 194, "ard_scor": 194, "ardregress": [2, 194, 199, 649, 944, 1001, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053], "area": [2, 50, 52, 151, 169, 214, 232, 251, 269, 272, 279, 281, 282, 342, 346, 347, 350, 376, 379, 383, 391, 411, 419, 706, 710, 711, 712, 792, 793, 1002, 1005, 1008, 1023, 1038], "aren": [16, 248, 353, 374, 383, 397, 730, 760, 1010, 1046, 1048], "arezki": 1036, "arfa": 1042, "arff": [326, 379, 500, 1048, 1051, 1052], "arg": [248, 308, 346, 380, 393, 416, 418, 425, 703, 872, 970, 972, 1001, 1007, 1008], "arg_sort_bi": 52, "argentina": 768, "argmax": [63, 128, 271, 285, 381, 418, 573, 836, 916, 1020, 1049], "argmin": [51, 146, 271, 381, 413, 535, 541, 549, 550, 689, 783, 784, 1021], "argpartit": 1043, "argsort": [54, 55, 57, 58, 59, 146, 148, 189, 190, 214, 232, 321, 331, 332, 353, 354, 374, 1013], "argument": [2, 104, 148, 190, 215, 242, 245, 248, 321, 367, 373, 374, 379, 380, 382, 384, 385, 387, 388, 391, 393, 411, 412, 415, 416, 418, 420, 422, 423, 425, 429, 433, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 460, 462, 464, 466, 467, 471, 472, 497, 500, 507, 512, 537, 539, 540, 542, 544, 555, 563, 564, 567, 571, 572, 573, 574, 581, 585, 586, 592, 593, 595, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 635, 643, 647, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 670, 672, 680, 681, 685, 688, 692, 696, 700, 702, 703, 704, 705, 706, 718, 723, 739, 746, 767, 783, 784, 810, 827, 829, 830, 831, 832, 833, 835, 836, 837, 840, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 865, 868, 872, 906, 912, 922, 932, 942, 947, 971, 973, 974, 988, 994, 997, 1001, 1002, 1003, 1005, 1008, 1012, 1013, 1020, 1021, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "argv": 245, "ari": [72, 91, 354, 411, 709, 1041, 1047], "aria": [1044, 1045, 1051], "aric": 55, "arida": [1045, 1046, 1048, 1050, 1053], "ariel": [45, 374, 1036, 1042], "arif": [1054, 1055], "ariga": 1042, "arik": 1044, "arima": 1024, "aris": [2, 187, 275, 349, 367, 384, 387, 411, 719, 1001, 1002, 1048], "arisa": [1050, 1051], "arithmet": [247, 385, 387, 411, 555, 652, 673, 684, 708, 721, 740, 741, 761, 799, 855, 1005, 1044], "ari\u00f1o": 1039, "arjona": 1045, "arka204": [1049, 1051], "arm": [377, 379, 387, 994], "arm64": [377, 382], "arm64v8": 387, "armstrong": 1048, "arnaud": [0, 401, 1037, 1038, 1039, 1040, 1041, 1042, 1054], "arnaudov": [1048, 1050], "arnaudstiegl": 1046, "arnold": [1036, 1037], "arnoldi": [692, 693, 697], "aroma": 318, "arora": [1044, 1051], "around": [0, 43, 63, 72, 85, 115, 135, 138, 147, 177, 188, 192, 248, 251, 266, 275, 286, 310, 331, 333, 334, 342, 345, 346, 353, 354, 355, 361, 362, 374, 376, 379, 385, 391, 399, 410, 411, 415, 416, 419, 474, 475, 519, 548, 624, 644, 653, 672, 708, 746, 801, 810, 827, 854, 856, 858, 859, 860, 888, 1001, 1002, 1004, 1005, 1011, 1015, 1019, 1024, 1025, 1028, 1029, 1040, 1041], "arpack": [51, 57, 79, 80, 99, 102, 235, 328, 416, 454, 455, 456, 465, 539, 545, 548, 692, 693, 695, 697, 699, 1002, 1042, 1043, 1048, 1052, 1053, 1054], "arpanchowdhri": 1046, "arr": 329, "arrai": [2, 45, 46, 47, 49, 50, 51, 52, 53, 57, 68, 69, 70, 75, 79, 80, 86, 87, 94, 95, 97, 102, 104, 112, 115, 119, 122, 123, 146, 148, 150, 151, 154, 157, 166, 169, 172, 173, 174, 179, 187, 194, 196, 199, 207, 208, 211, 214, 215, 221, 231, 235, 236, 241, 245, 248, 251, 252, 255, 257, 258, 259, 261, 262, 266, 267, 268, 270, 272, 273, 276, 277, 281, 291, 305, 315, 321, 324, 325, 327, 328, 332, 338, 345, 346, 353, 360, 362, 366, 367, 372, 373, 374, 379, 380, 381, 382, 384, 385, 387, 389, 391, 392, 393, 405, 408, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 493, 494, 496, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 510, 512, 513, 514, 515, 516, 517, 519, 523, 527, 528, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 585, 586, 587, 588, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 927, 930, 931, 932, 933, 934, 935, 936, 939, 940, 950, 951, 952, 953, 954, 956, 958, 959, 966, 967, 968, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 991, 993, 995, 1000, 1001, 1003, 1005, 1006, 1008, 1009, 1011, 1012, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1029, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "arrang": [2, 58, 291, 636, 839, 840, 841, 842, 1005], "array_api": [407, 1055], "array_api_compat": [407, 1055], "array_api_dispatch": [407, 471, 906], "array_api_support": [407, 927], "array_convert": 935, "array_equ": [573, 1043], "array_lik": 950, "array_paramet": 379, "array_sym": 990, "arrayfunc": [2, 388, 931], "arrow": [63, 399, 1050], "arrow_arg": 48, "arrowprop": [48, 63], "arrowstyl": 48, "arroyo": 1050, "art": [323, 385, 653, 696, 1029], "artem": [1040, 1043, 1053], "arth": 1050, "arthur": [411, 450, 463, 1041, 1042, 1043, 1044, 1045, 1048, 1050], "arthurmello": 1050, "articl": [0, 55, 102, 353, 374, 378, 379, 387, 415, 424, 478, 709, 1001, 1005, 1049], "artiem": 1044, "artifact": [43, 53, 80, 81, 312, 368, 383, 1031], "artifici": [10, 142, 144, 152, 169, 183, 218, 234, 247, 266, 310, 353, 374, 375, 376, 384, 408, 411, 415, 416, 539, 700, 838, 865, 866, 998, 1002, 1004, 1006, 1012, 1017, 1021, 1025, 1029, 1036], "artist": [242, 386, 441, 636, 702, 704, 705, 706, 810, 827, 922], "artsiom": 1043, "artsion": 1042, "artstein": 720, "artur": [1051, 1052], "arturo": [0, 390, 1050, 1051, 1052, 1053, 1054], "arturoamor": 1050, "aruku": [1044, 1045], "arunav": 1047, "arunava": 1044, "arxiv": [379, 465], "arya": 1044, "as_float_arrai": [2, 388, 1055], "as_fram": [43, 44, 103, 107, 141, 144, 150, 155, 176, 187, 188, 189, 190, 201, 203, 214, 222, 230, 232, 251, 255, 266, 286, 289, 292, 295, 309, 317, 318, 321, 323, 325, 326, 373, 374, 492, 493, 494, 496, 500, 504, 505, 506, 508, 509, 514, 1046, 1047, 1048, 1049, 1052], "asanyarrai": 381, "asarrai": [47, 55, 214, 232, 310, 333, 353, 354, 381, 393, 407, 730, 760, 856, 858, 859, 860, 1015, 1020, 1053], "ascend": [58, 103, 189, 318, 418, 453, 459, 598, 631, 639, 920, 921, 922, 1019, 1046, 1052], "ascent": [176, 421], "ascii": [50, 305, 419, 490, 592, 593, 595], "ascontiguousarrai": 545, "asctim": 121, "aseem": 1043, "asgd": [221, 1019], "ash": [48, 376, 1039, 1042], "ashah002": [1051, 1052, 1053], "ashim": 1046, "ashimb9": 1046, "ashimin": 1049, "ashish": [1049, 1052], "ashra": 648, "ashutosh": [1043, 1044, 1046, 1048], "ashvith": 1049, "ashwin": [1051, 1052], "asia": [272, 1015], "asian": 419, "asid": [145, 222, 405, 563, 564, 565, 566, 670, 671, 672, 680, 682, 865, 866], "asish": [1042, 1043], "ask": [0, 182, 183, 272, 378, 379, 383, 384, 387, 393, 394, 405, 420, 850, 851, 852, 854, 856, 858, 859, 860, 1028, 1052], "asnt": 1042, "aspect": [46, 91, 116, 121, 175, 188, 234, 241, 281, 286, 301, 366, 367, 368, 379, 393, 394, 411, 494, 662, 663, 994, 1021, 1029, 1053], "aspir": [169, 376, 379], "ass": [111, 112, 413, 477], "assembl": [291, 319, 355, 868], "assert": [47, 55, 122, 245, 272, 281, 367, 382, 1025], "assert_all_finit": [2, 366, 388, 471, 1055], "assert_allclos": 381, "assert_array_equ": 419, "assert_warn": 1049, "assert_warns_messag": 1049, "assertionerror": 1043, "assess": [44, 52, 72, 93, 135, 145, 147, 187, 214, 232, 251, 268, 269, 271, 275, 409, 418, 705, 747, 1004, 1005, 1011, 1025, 1051], "assia": 1045, "assiaben": 1045, "assign": [47, 55, 58, 70, 72, 80, 82, 90, 91, 93, 135, 140, 151, 153, 165, 167, 173, 227, 232, 241, 246, 249, 266, 307, 314, 319, 329, 336, 349, 354, 374, 379, 381, 393, 408, 415, 416, 418, 419, 420, 421, 443, 444, 445, 446, 448, 449, 450, 451, 452, 455, 457, 459, 462, 463, 464, 465, 519, 540, 565, 566, 597, 598, 611, 612, 614, 662, 663, 670, 671, 672, 680, 681, 682, 708, 709, 719, 720, 721, 723, 724, 733, 734, 735, 742, 743, 747, 759, 761, 787, 788, 790, 791, 797, 798, 799, 804, 807, 808, 810, 813, 818, 827, 829, 830, 831, 832, 835, 852, 858, 860, 861, 862, 875, 903, 904, 908, 909, 910, 911, 912, 913, 914, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1015, 1018, 1029, 1036, 1041, 1043, 1044, 1053, 1054], "assign_label": [80, 411, 455, 465], "assist": [0, 379, 391, 410, 1015, 1028, 1029], "associ": [50, 61, 62, 111, 135, 171, 186, 187, 218, 260, 266, 318, 331, 333, 353, 387, 411, 413, 415, 416, 418, 419, 429, 449, 452, 472, 473, 474, 475, 476, 477, 478, 479, 497, 498, 499, 528, 561, 565, 568, 609, 610, 634, 649, 662, 663, 670, 672, 678, 679, 680, 693, 699, 703, 735, 743, 826, 831, 851, 859, 873, 885, 897, 905, 914, 916, 918, 940, 1004, 1005, 1008, 1015, 1018, 1029, 1036, 1048, 1052], "assum": [48, 70, 88, 90, 178, 183, 186, 187, 203, 214, 232, 241, 244, 251, 263, 272, 281, 312, 349, 355, 367, 378, 379, 381, 385, 391, 392, 393, 396, 405, 408, 409, 411, 413, 415, 416, 418, 419, 421, 422, 427, 432, 440, 442, 447, 449, 453, 460, 466, 472, 473, 474, 475, 476, 477, 478, 479, 507, 512, 513, 536, 546, 552, 553, 565, 566, 571, 572, 591, 592, 593, 595, 624, 636, 647, 648, 650, 651, 656, 662, 663, 664, 665, 666, 670, 671, 672, 675, 676, 680, 681, 682, 685, 689, 691, 692, 696, 713, 726, 730, 739, 745, 760, 768, 773, 778, 782, 785, 804, 807, 808, 818, 844, 850, 851, 854, 856, 858, 859, 864, 875, 888, 964, 980, 981, 982, 995, 999, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1015, 1019, 1021, 1042, 1048], "assume_cent": [69, 110, 413, 424, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "assume_finit": [366, 367, 471, 906], "assumpt": [32, 43, 48, 52, 62, 64, 71, 78, 109, 110, 124, 176, 180, 184, 186, 214, 241, 268, 291, 312, 385, 391, 392, 396, 409, 411, 413, 415, 416, 419, 421, 450, 454, 456, 491, 507, 516, 536, 538, 545, 654, 658, 802, 804, 807, 808, 818, 845, 900, 901, 999, 1001, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1018, 1021, 1026, 1043, 1049], "assur": [0, 393, 801, 802, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "astel": 1044, "astolfi": 1036, "astrai": 393, "astroml": 1024, "astronom": 1023, "astronomi": 1024, "astropi": 379, "astyp": [43, 53, 72, 76, 79, 86, 93, 95, 99, 112, 127, 144, 146, 162, 186, 188, 204, 205, 232, 237, 247, 251, 266, 283, 292, 319, 405, 419, 995, 1001, 1043], "asv": 379, "asv_benchmark": 379, "aswathavicki": 1054, "asymmetr": [147, 216, 393, 1041], "asymmetri": [216, 353], "asymptot": [109, 110, 203, 366, 413, 477, 540, 734, 1001, 1004, 1046], "atag": 179, "atanasoska": 1055, "atariah": 1045, "ateif": 1049, "atharva": 1050, "atheism": [57, 273, 335, 353, 354, 355, 374, 491], "atheist": 353, "athena": 1029, "ation": 419, "atla": [366, 377], "atleast_2d": [147, 381], "atmospher": 176, "atol": [381, 676, 678, 848, 849, 853], "atom": [124, 130, 416, 535, 541, 543, 546, 547, 549, 550, 657, 667, 688, 1001, 1036, 1049], "atomic_benchmark": 49, "atomic_benchmark_estim": 49, "atomic_runtim": 49, "atsushi": [1048, 1049], "attach": [47, 353, 436, 853, 1037, 1047], "attack": [251, 374], "attalla": 1050, "attard": 1049, "attempt": [43, 87, 188, 210, 220, 267, 353, 366, 378, 393, 411, 423, 449, 453, 460, 467, 471, 635, 692, 693, 697, 822, 850, 851, 852, 854, 856, 858, 859, 860, 886, 888, 906, 934, 935, 1001, 1002, 1008, 1021, 1043, 1048, 1053], "attenberg": 419, "attent": [387, 611, 612, 1019], "attenu": 171, "attia": 801, "attr": [47, 89], "attract": [422, 447, 999, 1008, 1024], "attractador": [1043, 1044], "attrgett": [597, 601], "attribut": [2, 47, 62, 68, 82, 103, 129, 133, 135, 142, 145, 165, 169, 214, 222, 248, 262, 270, 271, 276, 284, 301, 305, 324, 346, 355, 361, 368, 372, 373, 374, 376, 379, 382, 386, 391, 405, 408, 409, 411, 412, 413, 414, 416, 418, 419, 420, 421, 426, 427, 428, 429, 430, 433, 434, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 511, 514, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 583, 584, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 621, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 701, 702, 704, 705, 706, 740, 799, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 923, 925, 965, 988, 993, 997, 999, 1001, 1006, 1008, 1009, 1011, 1015, 1018, 1019, 1020, 1021, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "attributeerror": [412, 563, 581, 965, 1045, 1046, 1048, 1052, 1053], "attrselect": 1036, "atukorala": 1051, "atuo": [1052, 1053], "aubert": 1043, "auc": [2, 50, 62, 169, 214, 232, 251, 269, 272, 276, 279, 281, 282, 328, 409, 706, 712, 792, 1005, 1041, 1044, 1048], "auc_scor": [1036, 1038], "audio": [373, 507], "audrei": 1054, "aufarkari": 1050, "aug": 1020, "augment": [2, 334, 634, 890, 1013, 1029], "augspurg": [1044, 1046], "august": [169, 376, 411, 515, 538, 1020, 1036, 1038, 1039, 1043, 1050], "aura": 1048, "auroc": 1005, "aur\u00e9lien": [1043, 1044, 1045, 1049, 1050], "austin": 1043, "australian": [150, 397], "author": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 373, 379, 382, 387, 391, 393, 394, 415, 454, 538, 875, 997, 1024, 1039], "authorit": 394, "authorship": 383, "auto": [57, 69, 90, 91, 119, 169, 175, 198, 234, 239, 253, 292, 295, 300, 321, 322, 323, 324, 325, 326, 329, 338, 339, 345, 348, 355, 373, 374, 381, 418, 421, 422, 444, 447, 448, 449, 450, 452, 453, 455, 458, 459, 460, 462, 465, 500, 512, 513, 539, 542, 544, 545, 548, 551, 553, 561, 562, 565, 566, 567, 568, 569, 571, 597, 598, 601, 606, 611, 612, 633, 635, 636, 637, 639, 650, 651, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 676, 677, 678, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 706, 803, 807, 808, 826, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 865, 866, 881, 882, 889, 900, 901, 905, 908, 909, 910, 911, 912, 913, 914, 918, 919, 951, 952, 970, 973, 996, 999, 1001, 1002, 1008, 1015, 1024, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "auto_examples_jupyt": 184, "auto_examples_python": 184, "auto_viml": 1048, "auto_wrap_output_kei": 381, "autoclass": 376, "autocorrel": 415, "autolabel": 47, "autom": [273, 382, 383, 397, 696, 994, 1001, 1002, 1005, 1024, 1029], "automat": [2, 43, 47, 51, 52, 64, 80, 96, 98, 103, 128, 150, 160, 168, 194, 217, 257, 258, 266, 270, 273, 312, 319, 322, 326, 335, 344, 346, 367, 374, 377, 379, 381, 383, 387, 393, 397, 405, 407, 411, 412, 413, 416, 418, 419, 420, 435, 453, 455, 459, 465, 467, 468, 470, 500, 503, 519, 542, 544, 545, 551, 553, 555, 561, 565, 568, 587, 592, 595, 598, 606, 647, 649, 650, 651, 656, 657, 662, 663, 664, 665, 666, 667, 670, 671, 672, 676, 678, 679, 680, 682, 685, 688, 691, 692, 695, 699, 806, 821, 824, 834, 844, 865, 866, 869, 870, 872, 881, 882, 889, 900, 901, 908, 909, 910, 913, 916, 918, 922, 940, 975, 978, 993, 994, 996, 999, 1004, 1009, 1015, 1019, 1021, 1024, 1025, 1036, 1039, 1040, 1041, 1047, 1050, 1051, 1052, 1053, 1054, 1055], "automl": [1005, 1024], "automobil": 1029, "autoregress": 374, "autoviml": 1024, "autoviz": 1048, "auxiliari": [183, 329, 377, 1029, 1051], "av": 1044, "avail": [0, 2, 44, 50, 51, 53, 76, 89, 90, 124, 146, 150, 169, 171, 176, 180, 186, 187, 188, 203, 214, 222, 232, 235, 248, 251, 266, 269, 270, 275, 276, 279, 286, 297, 298, 299, 305, 317, 321, 322, 323, 324, 326, 327, 334, 336, 362, 366, 373, 374, 376, 377, 378, 379, 380, 383, 384, 388, 392, 393, 397, 405, 408, 411, 412, 415, 416, 417, 418, 419, 420, 422, 450, 453, 454, 455, 456, 472, 473, 474, 475, 476, 477, 478, 479, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 512, 539, 553, 559, 560, 561, 562, 563, 564, 568, 569, 571, 572, 573, 574, 597, 598, 606, 614, 615, 631, 636, 637, 651, 655, 657, 659, 661, 665, 667, 669, 672, 674, 675, 676, 677, 678, 679, 680, 693, 700, 703, 736, 737, 804, 807, 808, 818, 830, 831, 836, 837, 838, 839, 840, 841, 842, 854, 865, 866, 868, 875, 884, 887, 892, 896, 901, 905, 960, 965, 994, 995, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1015, 1018, 1019, 1020, 1023, 1024, 1025, 1028, 1029, 1031, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1052, 1055], "available_if": [2, 89, 393, 1049, 1050, 1053], "avebedrm": [312, 374, 493], "aventi": 51, "aveoccup": [312, 323, 374, 493], "averag": [2, 43, 52, 62, 64, 72, 74, 75, 79, 85, 93, 95, 138, 139, 143, 147, 150, 151, 156, 157, 158, 169, 176, 188, 196, 203, 214, 221, 232, 251, 266, 275, 277, 280, 282, 286, 291, 312, 321, 327, 329, 335, 353, 362, 366, 374, 376, 381, 391, 408, 409, 413, 415, 419, 420, 422, 423, 440, 441, 444, 447, 448, 449, 450, 452, 493, 497, 498, 527, 535, 536, 537, 541, 542, 544, 545, 549, 550, 551, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 573, 574, 591, 598, 636, 637, 652, 662, 663, 670, 671, 673, 676, 678, 680, 681, 682, 684, 691, 704, 707, 708, 710, 711, 712, 717, 724, 725, 727, 729, 730, 732, 733, 734, 738, 739, 740, 742, 743, 744, 747, 749, 750, 752, 754, 755, 757, 760, 768, 785, 786, 787, 788, 789, 791, 792, 794, 795, 799, 800, 801, 802, 832, 835, 854, 874, 889, 990, 995, 1000, 1001, 1006, 1009, 1011, 1012, 1019, 1020, 1021, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055], "average_bike_rent": 188, "average_coef_": 1047, "average_feature_effect": 353, "average_intercept_": 1047, "average_linkag": 79, "average_method": [411, 708, 761, 1044], "average_pr": 150, "average_precis": [279, 704, 711, 1005], "average_precision_scor": [2, 279, 704, 710, 712, 786, 792, 1005, 1036, 1039, 1043, 1044, 1050, 1052], "average_week_demand": [43, 150], "averoom": [312, 323, 374, 493], "avg": [45, 68, 102, 166, 270, 310, 331, 332, 573, 708, 717, 826, 1005, 1052], "avg_dist": [75, 785], "avgclaim": 232, "avgclaimamount": 232, "avi": [1048, 1049], "avidar": 1052, "avinash": 1048, "avm19": [1050, 1051, 1053], "avoid": [43, 46, 51, 52, 79, 90, 95, 104, 140, 141, 145, 150, 187, 188, 218, 223, 232, 237, 248, 251, 266, 267, 273, 277, 285, 300, 302, 303, 316, 317, 328, 338, 339, 354, 367, 377, 379, 380, 381, 383, 384, 385, 391, 393, 394, 397, 405, 409, 411, 413, 415, 418, 419, 422, 443, 445, 447, 455, 465, 471, 497, 498, 499, 503, 512, 513, 538, 543, 547, 638, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 693, 695, 697, 699, 716, 796, 804, 805, 809, 815, 818, 829, 830, 831, 868, 871, 877, 878, 880, 885, 886, 887, 888, 891, 893, 894, 895, 896, 897, 898, 899, 901, 906, 952, 999, 1002, 1004, 1005, 1008, 1009, 1011, 1013, 1015, 1020, 1021, 1025, 1028, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "aw": 387, "awai": [62, 63, 64, 93, 109, 143, 171, 172, 176, 217, 266, 346, 347, 374, 409, 421, 632, 850, 851, 858, 859, 1004, 1005, 1020], "await": 322, "awalei": 1044, "awar": [48, 54, 166, 180, 266, 339, 353, 377, 379, 381, 391, 394, 410, 415, 419, 571, 572, 652, 658, 659, 660, 662, 663, 673, 684, 854, 883, 1011, 1015, 1021, 1033, 1036, 1037, 1050], "awesom": 1029, "awwwyan": 1054, "ax": [43, 44, 46, 47, 48, 49, 51, 52, 54, 62, 64, 66, 67, 68, 70, 75, 77, 78, 86, 88, 89, 90, 97, 99, 104, 107, 111, 113, 116, 118, 119, 121, 127, 131, 135, 137, 140, 142, 144, 145, 150, 152, 153, 155, 156, 157, 174, 175, 180, 182, 186, 187, 188, 189, 190, 192, 194, 195, 198, 199, 203, 205, 206, 209, 211, 212, 214, 215, 216, 218, 219, 222, 223, 225, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 242, 247, 251, 252, 254, 257, 259, 262, 266, 267, 268, 269, 272, 274, 275, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 300, 302, 303, 307, 308, 309, 312, 314, 315, 316, 317, 318, 319, 321, 322, 325, 326, 328, 338, 339, 340, 341, 343, 344, 346, 348, 349, 350, 351, 353, 354, 355, 357, 358, 375, 382, 416, 421, 441, 538, 545, 554, 635, 636, 701, 702, 704, 705, 706, 722, 810, 827, 922, 925, 1005, 1008, 1012, 1033, 1046, 1052], "ax0": [105, 107, 214, 244, 354], "ax1": [46, 49, 90, 93, 98, 100, 105, 107, 111, 119, 144, 183, 190, 214, 242, 244, 252, 257, 275, 283, 313, 317, 318, 334, 353, 354, 375], "ax2": [46, 90, 93, 98, 100, 111, 119, 144, 183, 190, 214, 242, 252, 257, 275, 283, 302, 313, 317, 318, 334, 353, 375], "ax3": [98, 334], "ax4": 98, "ax_": [151, 265, 275, 279, 281, 285, 295, 317, 321, 386, 441, 635, 701, 702, 704, 705, 706, 810, 827], "ax_bc": 316, "ax_bottom": 386, "ax_calibration_curv": [62, 64], "ax_colorbar": 312, "ax_det": 269, "ax_histi": 312, "ax_histx": 312, "ax_histx_zoom": 312, "ax_histy_zoom": 312, "ax_idx": 274, "ax_origin": 316, "ax_qt": 316, "ax_roc": 269, "ax_row": 70, "ax_scatt": 312, "ax_scatter_zoom": 312, "ax_top_left": 386, "ax_top_right": 386, "ax_yj": 316, "ax_zoom_in": 312, "ax_zoom_out": 312, "axarr": [156, 312], "axes_": [150, 152, 252, 322, 328, 386, 636], "axes_idx": 316, "axes_list": 316, "axes_row": 205, "axesimag": 701, "axhlin": [128, 160, 204, 271, 275], "axi": [2, 43, 44, 46, 50, 51, 53, 54, 55, 57, 62, 63, 72, 74, 75, 81, 83, 85, 86, 87, 88, 94, 103, 104, 107, 113, 116, 119, 121, 122, 123, 124, 125, 130, 137, 138, 142, 143, 151, 154, 158, 162, 165, 175, 180, 182, 186, 187, 196, 202, 203, 206, 207, 208, 214, 219, 223, 226, 228, 229, 231, 232, 235, 236, 239, 241, 245, 246, 250, 257, 259, 261, 262, 268, 269, 273, 274, 279, 281, 282, 285, 291, 292, 297, 298, 299, 302, 303, 304, 310, 312, 316, 319, 328, 332, 334, 336, 338, 341, 342, 345, 347, 348, 349, 351, 353, 354, 358, 359, 360, 361, 374, 381, 388, 393, 409, 411, 419, 423, 441, 448, 467, 470, 535, 537, 540, 541, 543, 545, 547, 549, 550, 554, 589, 616, 635, 636, 689, 690, 705, 767, 783, 784, 785, 786, 810, 827, 836, 877, 878, 885, 886, 888, 893, 894, 895, 897, 898, 899, 922, 930, 934, 935, 954, 979, 985, 995, 1005, 1012, 1015, 1020, 1044, 1046, 1048, 1053, 1054], "axis_idx": 43, "axis_list": 123, "axp": 51, "axvlin": [86, 93, 105, 113, 128, 146, 157, 187, 189, 190, 203, 278, 286, 349], "ayako": 1048, "ayan": 1050, "ayc\u0131": 1054, "aydor": [1043, 1044, 1047], "ayerdi": 1040, "aymer": 1037, "aymericbasset": 1052, "ayomid": 1046, "ayush": [1044, 1049], "ayzenshtat": [1029, 1044], "azaria": [1051, 1052], "azencott": 1050, "azim": [100, 118, 127, 188, 211, 234, 238], "azur": [0, 379], "b": [0, 2, 47, 49, 61, 63, 92, 98, 111, 128, 137, 138, 143, 147, 148, 158, 160, 172, 173, 174, 179, 183, 197, 199, 202, 214, 215, 220, 232, 249, 251, 266, 271, 275, 277, 282, 287, 291, 324, 334, 362, 374, 376, 379, 383, 384, 385, 408, 409, 411, 414, 415, 416, 419, 440, 485, 502, 504, 545, 570, 592, 593, 594, 595, 611, 612, 614, 615, 632, 650, 651, 652, 653, 662, 673, 676, 678, 680, 684, 691, 692, 709, 723, 734, 735, 796, 797, 815, 816, 855, 881, 882, 883, 884, 887, 888, 896, 923, 936, 952, 953, 967, 969, 995, 997, 1001, 1002, 1003, 1005, 1008, 1010, 1015, 1019, 1020, 1036, 1044, 1047, 1049, 1050, 1051], "b0noi": 1042, "b0rxington": 1051, "b1": [228, 298, 341], "b12": [214, 232], "b1996": 418, "b1998": 418, "b1999": 418, "b2": [228, 298, 341], "b2001": 418, "b2011": 411, "b2c": 1029, "b30065": 314, "b5": 326, "b7a2ff": 316, "b_1": 1009, "b_2": 1009, "b_column": 723, "b_i": 1010, "b_iv_i": 1010, "b_j": 411, "b_k": 411, "b_mask": 281, "b_row": 723, "b_true": 281, "ba": [51, 865, 866, 1009], "baak": 1050, "baam": [1049, 1050], "babino": [1049, 1050], "bac": 51, "bach": [416, 535, 540, 541, 542, 662, 1001], "bachant": 1043, "back": [43, 126, 253, 367, 377, 379, 393, 394, 405, 412, 419, 436, 446, 449, 450, 462, 485, 486, 487, 512, 513, 537, 538, 539, 542, 544, 545, 548, 585, 634, 662, 663, 670, 671, 672, 680, 681, 682, 732, 873, 875, 876, 877, 881, 882, 883, 885, 886, 888, 900, 901, 908, 957, 1001, 1005, 1009, 1025, 1039, 1044, 1046, 1047, 1050, 1054, 1055], "backend": [2, 367, 382, 393, 471, 906, 970, 974, 1005, 1039, 1044, 1045, 1046, 1047], "background": [44, 50, 81, 99, 151, 310, 314, 374, 379, 387, 411, 497, 498, 1002, 1010, 1019, 1046], "background_point": 50, "backlink": 1041, "backport": [383, 388, 1043], "backprop": [1009, 1019], "backpropag": 1009, "backslash": 1051, "backtick": [379, 384], "backup": [512, 1036], "backward": [169, 248, 323, 382, 393, 420, 500, 581, 606, 618, 619, 622, 623, 624, 626, 627, 921, 930, 1009, 1025, 1036, 1039, 1044, 1045, 1046, 1048, 1050, 1052], "bad": [93, 94, 172, 177, 187, 266, 329, 353, 362, 379, 411, 421, 696, 750, 994, 1001, 1002, 1007, 1013, 1036], "badaracco": 1049, "badli": [203, 214, 353, 368, 888, 1001, 1015], "badr": 1051, "baeza": [594, 734, 1039], "bag": [2, 14, 64, 102, 123, 134, 139, 141, 149, 184, 189, 289, 354, 355, 375, 409, 520, 521, 522, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 745, 809, 834, 917, 1003, 1006, 1026, 1027, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1049, 1050, 1052], "bagai": 1049, "baggingclassifi": [2, 393, 402, 418, 560, 918, 944, 995, 1039, 1042, 1043, 1044, 1047, 1051, 1052, 1054], "baggingregressor": [2, 138, 402, 418, 559, 919, 995, 1039, 1042, 1044, 1047, 1051, 1052, 1054], "baggipont": 1054, "baharev": 1041, "bahavior": 353, "bahaviour": 353, "baibak": [1044, 1045], "bail": 1047, "bailei": [411, 708], "bajic": 1051, "baji\u0107": 1051, "baker": 1055, "bakir2003": 416, "bakiri": [838, 1006], "bak\u0131r": [44, 416, 539], "bala": [1036, 1039], "balakumaran": [1043, 1044], "balanc": [2, 43, 45, 52, 64, 86, 99, 104, 135, 141, 145, 168, 184, 218, 219, 264, 270, 273, 275, 276, 286, 312, 368, 391, 393, 409, 410, 415, 416, 418, 506, 519, 538, 544, 545, 551, 561, 565, 568, 644, 662, 663, 670, 672, 678, 679, 680, 707, 712, 733, 747, 786, 791, 804, 805, 822, 868, 908, 910, 913, 916, 918, 939, 940, 994, 1020, 1021, 1026, 1036, 1038, 1041, 1042, 1045, 1046, 1050], "balanced_accuraci": [286, 712, 826, 1005, 1044], "balanced_accuracy_scor": [2, 707, 791, 1005, 1044], "balanced_subsampl": [561, 568, 1044], "balaz": 1040, "baldi": 747, "ball": [102, 297, 305, 411, 417, 451, 696, 848, 849, 853, 856, 858, 859, 860, 1036, 1038, 1041, 1047], "ball_tre": [305, 422, 447, 449, 453, 460, 692, 693, 850, 851, 852, 853, 854, 856, 858, 859, 860, 1008, 1036, 1053], "balltre": [2, 422, 447, 449, 453, 460, 692, 693, 703, 850, 851, 852, 853, 854, 856, 858, 859, 860, 1002, 1036, 1038, 1040, 1044, 1049, 1052, 1053], "baloo": 1002, "baluyot": 1045, "bamidel": 1046, "banana": [48, 1005], "band": [52, 275, 314, 1015], "bandit": 994, "bandol": 318, "bandwidth": [2, 48, 79, 96, 247, 296, 297, 305, 391, 393, 411, 417, 451, 461, 464, 848, 849, 853, 998, 1011, 1047, 1051], "bandwidth_": 853, "bangda": 1044, "banik": 1054, "banilo": [1040, 1041], "bank": [51, 57, 1029], "bannerje": [1052, 1053], "bansal": 1043, "bansod": [1041, 1042, 1043], "bao": [1042, 1050], "baod": 411, "baptbillard": 1049, "baptist": [1039, 1047], "bar": [47, 49, 54, 104, 141, 142, 144, 145, 148, 157, 165, 169, 179, 182, 188, 194, 257, 262, 271, 273, 277, 291, 317, 318, 325, 326, 354, 381, 414, 585, 636, 652, 673, 684, 1005, 1012, 1019, 1021, 1042, 1043, 1044, 1045], "bar_color": 47, "bar_kw": 636, "bar_siz": 353, "baran": 1046, "barang": 1052, "baraniuk": 420, "barankaraku": 1048, "barata": 1052, "barber": 536, "barberogaston": 1048, "bardiya": [1050, 1051], "bare": [374, 1002], "barh": [54, 148, 182, 183, 186, 187, 189, 190, 255, 319, 353, 354, 355], "barikbin": 1052, "barkhorn": 1044, "barklei": 1046, "barmalei": [1040, 1041], "barn": [696, 1002, 1041, 1043, 1046, 1054], "barnes_hut": [292, 696, 1043, 1044], "barnett": 1044, "barnhil": [597, 598], "barnowski": [1050, 1051], "barreca": [889, 1015], "barreto": 1050, "barri": [374, 1044], "barrier": 419, "barrycg": 1046, "bars_": 636, "bartelheim": 1047, "barth\u00e9lemi": [1052, 1053], "bartosz": 1045, "bart\u0142omiej": 1051, "barycent": [304, 1036], "basbug": 1043, "base": [2, 14, 19, 23, 30, 31, 32, 34, 40, 44, 51, 52, 53, 54, 55, 58, 62, 63, 64, 70, 82, 89, 90, 91, 100, 102, 103, 107, 111, 118, 121, 122, 133, 135, 136, 141, 145, 146, 147, 148, 150, 153, 155, 158, 163, 166, 167, 171, 176, 177, 179, 188, 189, 190, 193, 194, 200, 201, 202, 203, 208, 214, 215, 222, 231, 232, 234, 241, 248, 249, 251, 269, 270, 275, 285, 289, 291, 292, 305, 310, 312, 313, 315, 317, 323, 325, 329, 336, 340, 346, 354, 357, 366, 373, 374, 375, 376, 377, 380, 381, 382, 383, 387, 391, 393, 394, 396, 405, 407, 409, 410, 412, 416, 417, 419, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 447, 448, 449, 450, 451, 452, 453, 455, 459, 460, 464, 466, 467, 468, 469, 470, 490, 504, 505, 512, 513, 536, 537, 539, 540, 541, 542, 543, 545, 550, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 582, 592, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 614, 615, 620, 621, 622, 625, 628, 636, 637, 639, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 668, 673, 675, 676, 677, 678, 679, 684, 686, 687, 689, 690, 691, 694, 696, 708, 721, 730, 739, 740, 741, 743, 745, 759, 760, 761, 789, 792, 799, 803, 804, 806, 807, 808, 810, 811, 813, 818, 820, 822, 823, 824, 825, 832, 834, 838, 839, 842, 850, 851, 852, 854, 856, 858, 859, 860, 865, 866, 869, 870, 873, 880, 881, 883, 887, 888, 889, 897, 900, 901, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 924, 926, 928, 937, 946, 957, 973, 994, 996, 997, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1031, 1032, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1054], "base_classifi": [334, 336, 1018], "base_clf": 440, "base_estim": [409, 557, 558, 559, 560, 839, 842, 905, 994, 1047, 1049, 1050, 1051, 1052, 1055], "base_estimator_": [557, 558, 559, 560, 561, 562, 567, 568, 569, 570, 614, 1051], "base_estimator__": 1051, "base_lr": [291, 839], "base_model": 410, "base_x_test": 109, "base_x_train": 109, "basebag": [1042, 1044], "basebal": [57, 374], "basedecisiontre": [1044, 1045, 1048], "basedictionarylearn": 1036, "baseensembl": [1043, 1046], "baseestim": [2, 89, 133, 248, 292, 379, 392, 393, 421, 426, 428, 429, 433, 434, 435, 605, 636, 637, 944, 957, 1036, 1043, 1046, 1048, 1050, 1051, 1055], "basegradientboost": 1037, "baselabelpropag": 1043, "baselibsvm": 1046, "baselin": [62, 135, 144, 147, 158, 169, 190, 194, 232, 266, 282, 291, 323, 354, 376, 411, 420, 555, 556, 638, 1005, 1008, 1052], "baseline_similar": 179, "baseline_similarity_bound": 179, "basemap": [50, 305], "basemixtur": [1044, 1045], "basemultilayerperceptron": [1044, 1046], "basenb": 1046, "baserandomproject": [900, 901], "basesearchcv": [1043, 1044], "basesgd": 1019, "basesgdclassifi": 1045, "baseshufflesplit": 1049, "bash": [367, 387], "bashrc": 387, "basi": [2, 43, 45, 53, 126, 171, 176, 178, 215, 266, 309, 324, 342, 346, 371, 377, 380, 411, 416, 418, 455, 538, 626, 636, 643, 695, 887, 1003, 1015, 1020, 1027, 1031, 1044, 1046, 1049], "basic": [147, 170, 171, 176, 177, 179, 180, 183, 184, 212, 286, 319, 347, 366, 368, 379, 381, 383, 391, 393, 411, 415, 416, 418, 615, 626, 904, 916, 917, 918, 919, 994, 995, 1008, 1019, 1023, 1024, 1025, 1026, 1029], "basicconfig": 121, "basil": 1043, "basilisk": 1024, "basis_1": 215, "basis_2": 215, "basri": 517, "bassett": 1001, "bastiaan": [1037, 1038], "bastian": 1044, "bat": 377, "batch": [2, 47, 50, 97, 121, 125, 305, 325, 368, 388, 393, 419, 443, 445, 450, 452, 454, 456, 535, 537, 538, 540, 541, 542, 543, 544, 546, 547, 549, 550, 668, 689, 690, 809, 822, 823, 843, 844, 845, 846, 847, 865, 866, 877, 878, 888, 901, 955, 970, 1009, 1010, 1019, 1036, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1051, 1052], "batch_dict_estim": 121, "batch_pca_estim": 121, "batch_siz": [2, 54, 57, 77, 97, 121, 124, 125, 354, 416, 452, 538, 540, 541, 542, 543, 550, 864, 865, 866, 955, 956, 970, 1037, 1044, 1047, 1049, 1050], "batch_size_": 538, "batchkarov": [1037, 1041], "batiss": 1047, "batista": [1044, 1045, 1049], "batistaki": 411, "batoul": 1049, "battista": 1047, "batula": 1043, "bauk": [1044, 1045], "baum": 449, "baumgartn": 1043, "baxlei": 1043, "bay": [2, 32, 64, 67, 138, 153, 171, 203, 262, 274, 353, 374, 409, 416, 418, 419, 540, 553, 554, 660, 843, 844, 845, 846, 847, 889, 999, 1000, 1001, 1015, 1027, 1031, 1036, 1037, 1038, 1039, 1044, 1046, 1049, 1051], "bayer": [0, 1036, 1037, 1041, 1054], "bayesian": [2, 46, 64, 87, 98, 119, 183, 184, 193, 199, 201, 215, 220, 256, 258, 262, 263, 275, 283, 287, 297, 302, 313, 317, 416, 440, 528, 532, 536, 615, 648, 649, 660, 661, 801, 802, 869, 871, 883, 888, 994, 1024, 1026, 1027, 1030, 1031, 1042, 1049], "bayesiangaussianmixtur": [2, 257, 258, 263, 802, 1004, 1042, 1044, 1045, 1049, 1050, 1054], "bayesianridg": [2, 87, 182, 194, 195, 199, 323, 631, 648, 1001, 1043, 1044, 1045, 1046, 1049, 1050, 1052, 1053], "baz": [381, 585], "baze": 1045, "bbbbbb": 97, "bbox": [48, 51, 70, 127, 257, 258, 259, 262, 263, 314], "bbox_arg": 48, "bbox_to_anchor": [43, 72, 180, 277, 348], "bc": 316, "bcde": 144, "bcross_val": 1036, "bde": 144, "bdegraaff": 1051, "bdt": 137, "beach": 1044, "beam": [138, 1036], "bear": [418, 1024], "bearer": 1044, "beatrizsmg": 1048, "beauchamp": [1037, 1040], "beaugnon": 1046, "becam": [155, 394, 1044], "becaus": [43, 44, 52, 57, 62, 64, 75, 81, 83, 103, 113, 116, 135, 140, 147, 150, 169, 172, 175, 178, 187, 188, 190, 195, 200, 207, 214, 218, 220, 222, 232, 247, 248, 258, 266, 269, 272, 273, 278, 291, 292, 308, 309, 310, 312, 316, 317, 318, 319, 333, 342, 346, 353, 354, 355, 357, 361, 362, 366, 367, 374, 383, 384, 387, 391, 392, 393, 402, 405, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 421, 424, 434, 450, 451, 464, 468, 478, 485, 486, 487, 538, 540, 556, 558, 560, 562, 564, 566, 567, 569, 572, 574, 611, 612, 615, 636, 637, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 680, 681, 682, 683, 684, 693, 703, 713, 716, 717, 725, 726, 727, 728, 750, 767, 789, 792, 798, 804, 818, 832, 836, 841, 842, 851, 854, 856, 858, 859, 860, 866, 877, 878, 886, 888, 889, 893, 894, 896, 897, 898, 899, 909, 911, 914, 917, 919, 927, 968, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1010, 1012, 1015, 1020, 1021, 1029, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1052], "becker": [411, 1029, 1039, 1048], "becom": [83, 88, 90, 104, 111, 145, 187, 216, 218, 248, 251, 274, 292, 313, 317, 342, 346, 353, 362, 373, 379, 381, 383, 387, 393, 394, 411, 413, 418, 419, 421, 443, 453, 457, 458, 460, 585, 592, 593, 595, 623, 631, 662, 663, 680, 682, 882, 908, 909, 915, 1000, 1001, 1002, 1004, 1008, 1015, 1020, 1037, 1044, 1045, 1048, 1049, 1050, 1051, 1053, 1055], "bednar": 1043, "bedroom": [312, 374], "been": [0, 43, 48, 63, 79, 86, 93, 112, 126, 133, 135, 148, 169, 171, 176, 178, 187, 190, 238, 241, 243, 248, 249, 270, 272, 278, 279, 321, 322, 323, 324, 325, 327, 328, 329, 333, 353, 362, 367, 373, 374, 376, 377, 378, 379, 381, 383, 385, 387, 388, 391, 392, 393, 394, 402, 405, 408, 409, 410, 411, 413, 415, 416, 418, 421, 436, 440, 472, 474, 475, 477, 481, 490, 527, 538, 540, 553, 554, 571, 572, 585, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 615, 637, 638, 662, 663, 670, 671, 672, 677, 679, 680, 681, 682, 724, 782, 783, 784, 797, 804, 807, 808, 810, 818, 826, 827, 832, 833, 857, 905, 908, 995, 997, 998, 1000, 1001, 1002, 1005, 1006, 1008, 1011, 1015, 1017, 1019, 1020, 1025, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "befor": [2, 47, 51, 62, 77, 102, 104, 107, 116, 145, 150, 155, 165, 178, 180, 181, 182, 184, 187, 188, 190, 196, 199, 201, 203, 207, 248, 266, 272, 279, 294, 295, 313, 316, 317, 319, 324, 345, 362, 366, 367, 374, 377, 379, 381, 383, 384, 385, 387, 388, 391, 393, 394, 396, 397, 405, 407, 409, 411, 412, 413, 415, 416, 418, 420, 423, 424, 446, 450, 451, 452, 462, 464, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 487, 488, 493, 505, 538, 541, 542, 543, 544, 545, 548, 550, 551, 565, 566, 569, 571, 573, 574, 581, 592, 593, 595, 615, 631, 632, 634, 649, 670, 671, 672, 675, 680, 682, 691, 696, 698, 801, 802, 809, 810, 822, 823, 825, 830, 832, 834, 848, 849, 856, 857, 858, 859, 860, 863, 868, 869, 872, 875, 882, 886, 887, 888, 889, 893, 894, 896, 897, 898, 899, 905, 916, 917, 927, 952, 988, 995, 1001, 1002, 1005, 1011, 1015, 1019, 1020, 1021, 1025, 1026, 1036, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "beforehand": [255, 295, 1021], "begin": [57, 133, 169, 171, 267, 274, 291, 324, 353, 362, 379, 384, 385, 393, 408, 411, 418, 557, 558, 563, 565, 566, 670, 671, 680, 681, 682, 994, 997, 1001, 1005, 1015, 1017, 1019, 1044, 1050, 1051], "beginn": 1025, "behav": [43, 51, 85, 90, 218, 266, 267, 312, 323, 342, 362, 379, 385, 392, 411, 412, 415, 888, 1001, 1015, 1020, 1022, 1025, 1036, 1043, 1045, 1049, 1050], "behavior": [62, 72, 74, 85, 182, 184, 187, 188, 202, 214, 232, 248, 255, 263, 264, 266, 275, 277, 309, 310, 312, 314, 319, 342, 362, 367, 373, 376, 379, 381, 383, 387, 388, 393, 407, 409, 410, 411, 415, 418, 419, 540, 555, 570, 670, 671, 672, 680, 681, 682, 703, 705, 733, 734, 787, 788, 791, 804, 805, 806, 809, 818, 821, 822, 823, 824, 825, 845, 881, 908, 909, 994, 1001, 1005, 1006, 1011, 1015, 1020, 1026, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "behaviour": [74, 126, 150, 215, 216, 232, 344, 379, 393, 405, 411, 418, 563, 564, 568, 569, 606, 805, 806, 809, 821, 822, 823, 824, 825, 906, 916, 917, 977, 994, 995, 1005, 1015, 1044, 1047, 1048, 1051, 1052], "behind": [37, 86, 111, 135, 289, 381, 383, 387, 413, 418, 1004, 1008, 1017, 1052], "behrend": 1046, "behrouz": 1050, "behzad": 1042, "beier": 1047, "beimportantfew": 399, "being": [61, 64, 70, 85, 88, 113, 116, 118, 126, 135, 139, 150, 152, 171, 176, 189, 192, 208, 248, 251, 265, 272, 310, 316, 317, 342, 346, 353, 355, 377, 378, 379, 381, 384, 391, 393, 394, 410, 411, 413, 415, 418, 419, 420, 421, 422, 424, 444, 445, 447, 448, 453, 459, 472, 478, 497, 527, 573, 644, 653, 660, 676, 678, 691, 694, 698, 716, 722, 738, 740, 787, 793, 801, 848, 849, 854, 856, 858, 859, 860, 883, 901, 953, 994, 995, 1001, 1004, 1005, 1008, 1011, 1012, 1015, 1017, 1019, 1020, 1021, 1036, 1037, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "beings": 353, "beirouti": 1043, "belatedli": 1043, "belief": [57, 272, 864, 1010], "believ": [353, 354, 387, 391, 1029], "belkin": 1002, "belkina": [696, 1002], "bell": [2, 525, 1044, 1046, 1048, 1049], "bella": 1005, "bella2012": 1005, "bellet": [1043, 1044, 1045], "belmont": [916, 917, 1021], "belong": [61, 64, 66, 88, 93, 251, 272, 321, 327, 333, 373, 374, 408, 409, 411, 412, 414, 415, 418, 426, 443, 446, 450, 451, 452, 454, 456, 527, 716, 735, 811, 817, 829, 875, 889, 960, 961, 1001, 1004, 1005, 1007, 1008, 1009, 1011, 1020, 1024], "below": [0, 2, 48, 52, 62, 63, 64, 68, 70, 88, 93, 102, 107, 111, 118, 121, 133, 139, 142, 147, 164, 186, 188, 198, 210, 211, 214, 216, 230, 231, 235, 239, 243, 248, 251, 253, 255, 267, 270, 275, 277, 278, 279, 312, 316, 321, 322, 323, 324, 325, 326, 327, 328, 329, 347, 353, 361, 362, 367, 372, 373, 377, 379, 381, 383, 384, 388, 393, 394, 397, 399, 411, 413, 414, 415, 416, 418, 419, 420, 421, 447, 449, 451, 474, 475, 481, 494, 496, 498, 499, 500, 501, 502, 504, 505, 506, 508, 509, 514, 535, 541, 546, 552, 586, 599, 600, 601, 602, 603, 604, 637, 650, 656, 662, 663, 671, 672, 677, 679, 696, 703, 709, 747, 767, 801, 802, 804, 815, 818, 837, 868, 871, 881, 882, 885, 891, 897, 994, 995, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1022, 1024, 1032, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1054], "beltran": 1054, "ben": [1038, 1039, 1040, 1043, 1044, 1045, 1048, 1053], "ben3940": 1050, "benavoli": 272, "benbihi": 1045, "bench_k_mean": 91, "benchmark": [292, 323, 354, 355, 366, 372, 374, 379, 391, 397, 404, 409, 471, 519, 906], "benchmark_estim": 49, "benchmark_influ": 46, "benchmark_throughput": 49, "bend": 346, "benedek": 1052, "benedikt": 1040, "benediktsson": [1036, 1037, 1038], "benefici": [104, 106, 109, 121, 153, 266, 312, 313, 329, 405, 410, 1002], "benefit": [43, 80, 89, 106, 107, 135, 136, 145, 150, 187, 228, 238, 244, 246, 266, 294, 325, 366, 379, 388, 393, 409, 411, 451, 464, 471, 512, 571, 572, 662, 663, 670, 671, 672, 680, 681, 682, 839, 906, 908, 994, 1000, 1008, 1015, 1025, 1029, 1036, 1039, 1040, 1041, 1048, 1049, 1050, 1051], "benfield": 1043, "bengio": [272, 865, 866, 994, 1018], "bengtsson": 1040, "benhel": 380, "benhur": 1049, "benign": [169, 376, 504], "benjamin": [645, 1038, 1039, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "benjamini": [599, 1042, 1043], "benjaminirv": 1041, "benjastudio": [1044, 1045], "benn": 1044, "bennett": [169, 376, 1005], "benni": 1050, "benoit": 1053, "beno\u00eet": 1049, "benson": 57, "bentlei": 1008, "bera": 1051, "berei": 1050, "beren": 696, "berenbaum": 1052, "bereng": 1049, "berg": [374, 1037, 1038, 1048, 1053], "bergman": [1053, 1054], "bergstra": [994, 1036, 1037], "berk": 1036, "berkecanrizai": 1051, "berkelei": [645, 916, 917], "berlin": [176, 411, 416, 539, 700, 730, 760, 1005], "bernardo": 1042, "bernd": 1051, "bernhard": [44, 416, 539, 839, 874, 904, 1006, 1011, 1020, 1042], "bernhardsson": 1029, "berni": 1047, "bernoulli": [2, 310, 419, 420, 843, 844, 845, 846, 847, 864, 865, 866, 871, 1001, 1015, 1027, 1031, 1036], "bernoullinb": [2, 153, 368, 844, 845, 846, 847, 1006, 1007, 1037, 1038, 1040, 1043, 1048, 1049, 1051], "bernoullirbm": [2, 310, 865, 866, 1010, 1015, 1038, 1039, 1048, 1050, 1053], "bertin": 1029, "bertoncelj": 1047, "bertrand": [0, 400, 1036, 1042, 1043, 1048, 1049], "bertrandhaut": [1044, 1045], "besid": [155, 244, 286, 379, 384, 593, 994, 1044], "bessel": [421, 623], "bessi": 326, "besson": [1041, 1042], "best": [0, 43, 45, 47, 51, 52, 53, 57, 61, 63, 64, 75, 80, 87, 88, 94, 102, 103, 104, 105, 109, 115, 121, 125, 128, 129, 130, 138, 141, 144, 146, 147, 148, 150, 155, 158, 169, 171, 172, 177, 182, 187, 194, 199, 201, 203, 210, 228, 229, 230, 234, 237, 241, 246, 247, 251, 258, 259, 263, 265, 266, 270, 271, 272, 273, 276, 279, 280, 283, 284, 287, 291, 296, 301, 313, 318, 323, 324, 329, 342, 345, 346, 353, 354, 355, 360, 366, 367, 373, 376, 378, 379, 382, 385, 392, 393, 397, 402, 405, 408, 409, 410, 411, 415, 416, 418, 419, 420, 421, 434, 446, 449, 450, 452, 454, 455, 456, 462, 465, 468, 475, 485, 486, 487, 542, 549, 550, 556, 558, 560, 561, 562, 563, 564, 566, 568, 569, 570, 572, 574, 597, 598, 601, 606, 614, 615, 639, 641, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 679, 680, 682, 683, 684, 692, 693, 694, 697, 698, 707, 712, 723, 724, 725, 726, 727, 728, 732, 733, 743, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 787, 788, 789, 791, 794, 795, 796, 797, 798, 800, 801, 802, 804, 807, 808, 818, 831, 833, 836, 841, 842, 851, 859, 865, 866, 909, 911, 914, 916, 917, 918, 919, 994, 999, 1000, 1001, 1002, 1005, 1008, 1009, 1011, 1019, 1021, 1024, 1025, 1029, 1036, 1039, 1042, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1054], "best_alpha": 1036, "best_c": 349, "best_c_scal": 349, "best_clf": 105, "best_estim": [804, 807, 808, 818], "best_estimator_": [45, 87, 104, 105, 106, 109, 128, 247, 262, 266, 270, 272, 273, 276, 284, 296, 804, 807, 808, 818, 994, 1043], "best_idx": [57, 271], "best_index": [270, 276], "best_index_": [271, 276, 804, 807, 808, 818], "best_loss": [680, 682], "best_loss_": [865, 866, 1051], "best_low_complex": 271, "best_n_it": 462, "best_paramet": 273, "best_parameters_": 262, "best_params_": [103, 105, 147, 171, 247, 262, 270, 276, 323, 342, 392, 804, 807, 808, 818, 994], "best_recal": 270, "best_recall_std": 270, "best_recall_threshold": 270, "best_scor": 276, "best_score_": [103, 105, 247, 266, 273, 276, 277, 342, 410, 677, 679, 804, 807, 808, 818, 826, 1047], "best_score_idx": 271, "best_threshold_": [266, 286, 329, 826], "best_validation_score_": [865, 866, 1051], "beta": [2, 80, 115, 186, 218, 385, 409, 411, 414, 540, 542, 544, 551, 648, 733, 734, 740, 746, 787, 799, 801, 1005, 1038, 1041, 1043, 1045, 1046], "beta_": [218, 416], "beta_1": [865, 866], "beta_2": [865, 866], "beta_k": 416, "beta_loss": [54, 542, 544, 551, 1043], "betatim": 1051, "better": [43, 44, 48, 52, 57, 58, 61, 67, 83, 88, 106, 107, 109, 110, 111, 112, 116, 118, 121, 124, 138, 141, 145, 146, 147, 150, 155, 164, 175, 176, 177, 179, 182, 187, 189, 195, 199, 200, 203, 214, 215, 216, 222, 229, 231, 232, 238, 246, 247, 248, 251, 262, 265, 266, 272, 274, 275, 278, 281, 282, 285, 289, 291, 310, 316, 317, 325, 326, 342, 349, 353, 354, 355, 357, 362, 366, 374, 378, 379, 380, 381, 384, 385, 387, 393, 396, 399, 407, 409, 411, 413, 415, 416, 417, 418, 419, 421, 452, 453, 542, 544, 551, 563, 564, 565, 566, 611, 612, 634, 675, 681, 696, 713, 729, 738, 743, 746, 767, 802, 833, 843, 844, 845, 846, 847, 848, 849, 854, 865, 866, 885, 886, 889, 897, 900, 901, 908, 909, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1013, 1015, 1018, 1019, 1021, 1025, 1029, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "better_prob": 272, "between": [2, 25, 37, 43, 44, 47, 48, 50, 51, 52, 58, 70, 72, 73, 74, 75, 77, 78, 86, 93, 94, 99, 115, 118, 124, 126, 129, 135, 138, 141, 144, 145, 147, 150, 164, 171, 176, 177, 179, 184, 186, 187, 188, 189, 194, 199, 200, 202, 205, 209, 210, 214, 215, 216, 218, 219, 222, 232, 234, 241, 246, 248, 251, 264, 266, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 284, 285, 286, 289, 291, 294, 298, 299, 301, 302, 312, 317, 319, 324, 329, 334, 342, 346, 348, 349, 353, 354, 355, 361, 362, 366, 367, 374, 379, 381, 383, 387, 388, 391, 392, 393, 394, 402, 405, 408, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 432, 443, 444, 447, 448, 449, 450, 453, 455, 456, 457, 459, 460, 461, 466, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 506, 518, 519, 525, 528, 531, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 553, 554, 557, 558, 563, 564, 566, 567, 568, 569, 588, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 615, 624, 631, 636, 637, 638, 643, 646, 649, 650, 651, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 680, 682, 683, 685, 688, 692, 694, 696, 698, 699, 700, 703, 705, 707, 708, 709, 711, 713, 714, 718, 719, 720, 721, 723, 728, 729, 730, 733, 734, 735, 738, 740, 741, 747, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 790, 791, 796, 797, 799, 800, 801, 802, 804, 805, 806, 807, 809, 813, 821, 822, 823, 824, 825, 833, 834, 836, 838, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 865, 866, 872, 875, 876, 878, 879, 881, 882, 885, 886, 887, 889, 894, 897, 898, 902, 908, 909, 913, 916, 917, 918, 919, 921, 949, 961, 962, 973, 994, 997, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1026, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "bewar": 420, "beyond": [43, 64, 215, 216, 266, 366, 368, 378, 379, 391, 409, 418, 733, 734, 742, 787, 788, 791, 913, 1002, 1006, 1015, 1020, 1025, 1044], "beyst": 1050, "bezuidenhout": 1049, "bf5fff": 119, "bfg": [308, 614, 615, 652, 653, 662, 673, 676, 678, 684, 691, 1008, 1009, 1051], "bgm": 801, "bharat": [415, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "bharathi": 1047, "bhardwaj": [1043, 1044], "bhargav": 1042, "bhaskaran": [1043, 1044], "bhat": [1049, 1051, 1052, 1053], "bhattacharya": 1044, "bhattarai": 1046, "bhavika": 1048, "bhoomika": 1051, "bhsu": 1040, "bhtsne": [696, 1043], "bi": [88, 419], "bia": [43, 64, 109, 123, 134, 142, 147, 150, 184, 187, 189, 194, 195, 197, 277, 307, 346, 349, 362, 374, 393, 409, 413, 417, 418, 421, 528, 560, 563, 564, 611, 612, 618, 646, 652, 653, 662, 663, 673, 674, 684, 865, 866, 881, 883, 887, 893, 894, 896, 897, 898, 899, 917, 926, 1000, 1001, 1004, 1005, 1009, 1010, 1013, 1019, 1026], "bianca": 64, "bianp": 385, "bias": [48, 113, 124, 147, 154, 186, 187, 189, 277, 374, 396, 409, 418, 528, 553, 864, 888, 899, 1000, 1004, 1013, 1019, 1021], "bibhash": [1046, 1047], "bibl": 354, "bibliograph": 379, "bibtex": 0, "bic": [2, 160, 184, 193, 200, 201, 202, 208, 222, 420, 505, 655, 657, 658, 659, 660, 802, 869, 888, 994, 1004, 1026, 1036, 1043, 1049, 1050], "bic_criterion": 201, "bicker": 1046, "biclust": [2, 6, 59, 102, 333, 335, 353, 354, 355, 419, 426, 452, 454, 456, 491, 515, 517, 595, 723, 799, 1005, 1026, 1030, 1031, 1038, 1042], "bicluster_ncut": 57, "biclustermixin": 2, "biclusters_": [58, 59, 426, 454, 456], "bidu": [1049, 1050], "biernat": 1048, "big": [43, 79, 93, 95, 219, 235, 251, 263, 367, 379, 385, 394, 413, 419, 423, 542, 565, 566, 568, 569, 810, 832, 843, 844, 845, 846, 847, 1025, 1029, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "bigg": [421, 623], "bigger": [47, 75, 93, 227, 272, 310, 346, 351, 354, 365, 367, 419, 441, 442, 512, 542, 854, 1031], "biggest": [411, 414, 416, 446], "biggest_inertia": [411, 446], "biggio": 1047, "bigram": [273, 419, 592, 593, 595], "bigram_vector": 419, "bijil": 1050, "bike": 1012, "bike_shar": 43, "bike_sharing_data_fil": 52, "bike_sharing_demand": [43, 188], "bilbro": 1043, "bill": [1046, 1047], "billaud": 1044, "billi": 1040, "billing": [1039, 1040, 1041], "billion": 1029, "bimod": [316, 417], "bin": [2, 43, 61, 62, 64, 86, 107, 137, 141, 214, 245, 251, 266, 278, 297, 312, 313, 314, 315, 316, 318, 319, 377, 387, 397, 409, 417, 418, 441, 442, 451, 464, 565, 566, 871, 873, 887, 954, 1044, 1045, 1046, 1050, 1054, 1055], "bin_cent": [86, 214], "bin_edg": 86, "bin_edges_": [86, 313, 873], "bin_seed": [79, 96, 451, 464, 1047], "binar": [2, 36, 279, 281, 282, 371, 373, 758, 843, 872, 873, 875, 879, 881, 889, 892, 1005, 1007, 1031, 1050, 1052], "binari": [2, 30, 47, 53, 62, 64, 139, 141, 151, 153, 166, 179, 187, 192, 205, 207, 214, 222, 235, 242, 251, 254, 266, 269, 270, 275, 281, 286, 289, 296, 342, 346, 361, 362, 373, 374, 375, 383, 384, 393, 397, 405, 408, 409, 410, 411, 418, 419, 421, 440, 441, 442, 455, 490, 504, 512, 513, 524, 527, 553, 554, 557, 559, 563, 565, 570, 571, 572, 585, 592, 593, 595, 597, 598, 606, 614, 631, 632, 633, 634, 635, 636, 637, 662, 663, 670, 672, 677, 678, 679, 680, 704, 707, 711, 712, 713, 716, 717, 719, 722, 724, 726, 731, 733, 734, 738, 739, 742, 743, 744, 745, 747, 786, 787, 788, 791, 792, 793, 798, 800, 803, 804, 805, 807, 808, 809, 810, 818, 822, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 843, 854, 864, 875, 879, 881, 889, 892, 908, 910, 913, 924, 967, 995, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1033, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1050, 1051, 1053, 1054], "binary_crossentropi": 1050, "binary_eros": 53, "binary_onli": [1046, 1047], "binarytre": [853, 1040, 1044, 1048], "bincount": [393, 415, 561, 565, 568, 662, 663, 670, 672, 678, 679, 680, 908, 910, 913, 916, 918, 939, 940, 1043], "bind": [397, 1024, 1036, 1043, 1044], "binder": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361], "binesh": [1052, 1053], "binet": [1046, 1051], "bing": [1042, 1043], "bingham": 1017, "binned_numer": [214, 232], "binom": 1001, "binomi": [146, 149, 418, 557, 563, 565, 1001, 1050, 1053], "bio": 275, "biocsklearn": 1024, "bioinformat": [632, 995], "biola": 1054, "biologi": 50, "biometrika": [884, 896], "biostatist": [413, 481], "bipartit": [408, 456, 515, 1010], "biprateep": 1048, "birch": [2, 71, 79, 97, 184, 325, 368, 393, 449, 452, 516, 1026, 1030, 1031, 1040, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055], "birch_model": 77, "bird": [586, 722, 758, 1005], "birodkar": [1041, 1042, 1044], "bischl": 373, "bisect": [2, 71, 75, 90, 91, 92, 93, 94, 180, 184, 268, 446, 450, 516, 1026, 1050], "bisect_km": 325, "bisect_mean": 446, "bisecting_strategi": [411, 446], "bisectingkmean": [2, 78, 411, 1050, 1051, 1052], "bisector": 70, "bishop": [536, 538, 545, 745, 801, 1001, 1006, 1020], "bistochast": [408, 454], "biswadip": 1046, "biswaroop": 1051, "bit": [43, 52, 64, 86, 109, 124, 212, 216, 289, 312, 342, 354, 362, 366, 374, 377, 393, 397, 399, 418, 419, 586, 593, 662, 838, 934, 935, 1002, 1006, 1023, 1036, 1039, 1042, 1044, 1045, 1048, 1049, 1050, 1053, 1054], "bithash": 644, "bithash_": 644, "bitli": 1029, "bitmap": 376, "bittarello": 1049, "bjerr": 1044, "bla": [366, 367, 377, 380, 385, 387, 782, 1036, 1044, 1045, 1047, 1048, 1054], "black": [43, 48, 49, 50, 52, 63, 70, 79, 82, 88, 89, 111, 112, 119, 121, 123, 143, 164, 167, 171, 172, 176, 177, 180, 183, 187, 188, 194, 201, 203, 204, 206, 210, 214, 215, 216, 220, 223, 226, 227, 232, 241, 251, 257, 260, 297, 307, 308, 310, 336, 351, 358, 359, 360, 379, 397, 404, 411, 418, 421, 559, 560, 635, 1011, 1012, 1021], "blackberri": 318, "blackburn": [1039, 1042], "blackd0t": 1046, "blair": [45, 374], "blakeflei": 1042, "blame": 379, "blanc": 318, "blanchard": [1040, 1041], "blank": [93, 384, 995, 1021], "bldgtype": 144, "bleed": 1029, "blei": [416, 540, 801], "bleich": [188, 1012], "bleki": 1048, "blend": [143, 155, 318, 393, 415], "bli": [367, 377, 391], "blind": [120, 123, 184, 213, 353, 416, 537, 545, 1026], "blink": 342, "blis_num_thread": 367, "blob": [2, 61, 69, 70, 77, 79, 90, 95, 97, 411, 451, 516], "blobs_param": 241, "block": [2, 297, 312, 325, 374, 376, 379, 384, 387, 393, 408, 411, 414, 417, 455, 456, 465, 476, 482, 483, 491, 492, 515, 517, 699, 952, 1008, 1010], "block_siz": [476, 482, 483, 1040], "blocker": [383, 1054], "blocknum": 47, "blockwis": [408, 1001], "blog": [325, 366, 379, 385, 387, 394, 1047], "blogpost": 384, "blondel": [0, 401, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1049], "blood": [169, 242, 376], "bloom": [388, 969], "blown": 345, "blue": [46, 48, 52, 58, 59, 63, 70, 111, 119, 121, 135, 138, 142, 149, 150, 152, 155, 157, 167, 176, 178, 192, 195, 201, 203, 210, 212, 237, 245, 265, 266, 267, 272, 308, 317, 322, 328, 333, 376, 411, 416, 1053], "blueviolet": [228, 298, 341], "blum": 1043, "blyston": [1046, 1047], "bmaisonn": 1048, "bmalezieux": 1049, "bmatrix": [408, 997], "bmc": 1015, "bme": 1054, "bmi": [169, 201, 203, 252, 376, 1013], "bmreinig": 1050, "bmug": 57, "bmva": 675, "bmvc": [675, 1001], "bo": [63, 1048], "board": 0, "boat": 326, "bob": [1037, 1043], "bobyrev": 1043, "boca": 1001, "bodega": 318, "bodenhof": [408, 723], "bodi": [47, 102, 169, 252, 326, 376], "body_bow": 102, "body_stat": 102, "boe": 51, "boechat": 1043, "boenisch": 1047, "boerner": 1050, "boersma": 1042, "bogazici": 376, "bogdan": 1036, "boggavarapu": 1048, "bohl": [1048, 1050], "bohn\u00e9": 1049, "boil": [135, 382, 393, 413], "boilerpl": [248, 381, 1029], "boisberrang": [0, 400, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "bold": [93, 147, 203, 209, 379], "boll": 1001, "bolleddula": 1054, "bolmier": [1047, 1048, 1052], "boltzmann": [2, 105, 161, 184, 204, 306, 506, 662, 717, 834, 864, 865, 866, 868, 894, 1026, 1030, 1031, 1038], "bommarito": [1039, 1040], "bonald": 1051, "bone": [227, 351], "bonferroni": 272, "bonu": [232, 377, 379], "bonusmalu": [214, 232], "boo": [169, 376], "book": [102, 446, 450, 452, 838, 843, 847, 1001, 1002, 1003, 1006, 1048], "booktitl": 0, "bool": [82, 99, 112, 183, 232, 361, 379, 423, 424, 425, 426, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 523, 526, 527, 528, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 704, 706, 707, 711, 712, 713, 715, 716, 717, 718, 730, 731, 732, 733, 734, 735, 742, 745, 746, 758, 760, 765, 767, 771, 773, 778, 782, 786, 787, 788, 789, 791, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 818, 822, 823, 826, 827, 828, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 930, 932, 933, 934, 935, 946, 947, 952, 953, 966, 969, 975, 977, 985, 990, 991, 992, 993, 995, 1045, 1048, 1049], "bool_": 216, "boolean": [2, 133, 248, 361, 374, 379, 381, 388, 412, 418, 419, 420, 467, 565, 566, 585, 586, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 633, 636, 637, 640, 653, 675, 703, 782, 837, 843, 864, 871, 891, 925, 930, 988, 995, 1001, 1007, 1012, 1015, 1021, 1036, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1054], "boom": 1054, "boost": [2, 14, 46, 52, 103, 134, 135, 136, 139, 140, 142, 152, 155, 158, 178, 184, 189, 190, 195, 216, 222, 237, 271, 273, 308, 316, 318, 325, 328, 380, 385, 393, 410, 420, 451, 469, 470, 493, 500, 505, 524, 557, 558, 563, 564, 565, 566, 568, 569, 636, 637, 638, 639, 745, 746, 752, 754, 794, 804, 807, 808, 809, 825, 831, 834, 869, 881, 882, 1001, 1005, 1024, 1026, 1027, 1031, 1036, 1037, 1039, 1041, 1042, 1043, 1045, 1049], "booster": 1041, "boosting_error": 135, "boostingcolumntransform": 155, "boostingdecis": 418, "booth": 1043, "bootstrap": [138, 139, 146, 182, 275, 284, 323, 415, 418, 558, 559, 560, 561, 562, 567, 568, 569, 940, 975, 1001, 1036, 1037, 1039, 1041, 1044, 1046, 1049], "bootstrap_featur": [418, 559, 560], "bootstrap_indic": 275, "borchmann": 1051, "border": [449, 1046], "borderaxespad": 111, "borderpad": 358, "borderwidth": 141, "borg": [694, 698, 1002], "borgn": 1049, "bori": [1040, 1048, 1052], "borja": 1040, "born": 1042, "borovec": 1050, "borovikova": 1047, "bosch": 1049, "bossan": [1048, 1050, 1051, 1052, 1054], "bossch": [0, 400, 1043, 1044, 1045, 1049], "boston": 1029, "bot": [379, 383, 1010, 1050, 1053, 1054], "botelho": 1048, "both": [30, 43, 44, 46, 48, 49, 52, 54, 58, 62, 63, 64, 70, 77, 87, 88, 97, 103, 109, 111, 115, 116, 126, 128, 133, 138, 141, 142, 144, 145, 150, 154, 155, 158, 164, 165, 167, 169, 171, 178, 180, 186, 187, 188, 189, 194, 199, 200, 201, 203, 214, 215, 216, 218, 219, 220, 222, 232, 238, 247, 248, 249, 257, 258, 259, 260, 261, 262, 266, 272, 273, 274, 275, 279, 281, 283, 285, 292, 304, 312, 316, 317, 321, 323, 327, 333, 334, 339, 344, 346, 353, 354, 355, 361, 362, 366, 367, 368, 372, 373, 374, 377, 379, 381, 383, 385, 386, 388, 391, 392, 393, 394, 397, 402, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 421, 424, 440, 449, 455, 465, 471, 478, 485, 486, 487, 488, 491, 492, 500, 501, 504, 506, 509, 511, 512, 513, 538, 542, 544, 551, 555, 559, 560, 561, 567, 568, 569, 570, 571, 581, 592, 593, 595, 601, 611, 612, 631, 636, 637, 647, 661, 662, 663, 676, 678, 680, 682, 691, 703, 708, 716, 720, 733, 734, 735, 740, 742, 761, 765, 771, 778, 782, 787, 788, 791, 792, 793, 799, 807, 808, 810, 827, 837, 865, 866, 880, 882, 884, 896, 901, 906, 908, 909, 916, 918, 925, 938, 944, 953, 967, 979, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "botstein": [632, 995], "bottleneck": [366, 385, 418, 451, 865, 866], "bottom": [45, 47, 51, 53, 54, 70, 72, 74, 77, 79, 84, 86, 95, 97, 119, 145, 153, 158, 214, 225, 241, 257, 259, 260, 263, 269, 272, 283, 297, 312, 332, 334, 342, 379, 409, 411, 417, 591, 920, 999, 1001, 1005, 1013, 1025], "bottom_h": 312, "bottou": [680, 681, 682, 1009, 1019], "bou": [1051, 1052], "boucaud": 1044, "boucher": 1043, "bouckaert": 272, "boukhobza": 1054, "boulard": 1053, "bould": 411, "bouldin": [2, 729], "boulogn": 1039, "boun": 376, "bound": [2, 64, 175, 177, 179, 184, 216, 232, 240, 271, 386, 411, 416, 419, 421, 422, 447, 492, 506, 516, 527, 540, 567, 599, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 636, 639, 641, 654, 658, 662, 681, 709, 739, 792, 801, 802, 848, 849, 885, 897, 900, 901, 902, 910, 911, 912, 915, 938, 1001, 1004, 1005, 1008, 1017, 1019, 1020, 1022, 1026, 1044, 1047, 1048, 1050], "bound_": 540, "boundari": [2, 50, 53, 62, 63, 64, 67, 70, 91, 93, 134, 137, 143, 153, 157, 162, 172, 173, 175, 184, 188, 198, 215, 223, 241, 246, 249, 275, 287, 300, 302, 303, 305, 307, 312, 314, 317, 330, 335, 337, 339, 340, 341, 342, 344, 350, 351, 358, 375, 409, 418, 419, 421, 453, 459, 508, 540, 553, 554, 573, 592, 593, 595, 635, 739, 765, 804, 837, 850, 856, 858, 859, 860, 883, 887, 904, 905, 910, 912, 913, 916, 938, 999, 1008, 1011, 1015, 1018, 1019, 1020, 1026, 1036, 1038, 1040, 1049, 1050, 1051, 1053], "bounding_ax_": [386, 636], "boundscheck": [367, 380], "bourassa": 418, "bourbeau": [1043, 1044, 1045], "bourboux": 1047, "bourguignat": 1041, "bournhonesqu": 1046, "bousquet": 904, "boutili": 1017, "boutsidi": 416, "bow": 412, "bown": 1042, "bowyer": 1054, "box": [43, 49, 66, 88, 188, 189, 235, 289, 312, 316, 386, 416, 418, 516, 559, 560, 884, 896, 920, 922, 1005, 1006, 1012, 1015, 1021, 1044, 1052], "boxcox": 1055, "boxplot": [49, 111, 148, 187, 190, 286, 321], "boxplot_runtim": 49, "boxstyl": [48, 314], "boy": 1050, "boyd": 1001, "boyl": [1053, 1054], "boyuan": [1040, 1041, 1042], "bp": [49, 148, 169, 201, 203, 376, 1013], "bpo": 882, "br": 137, "br_estim": 182, "bracket": [379, 1001], "bradi": 1043, "bradlei": [169, 376, 1001], "bradshaw": [1039, 1040, 1043], "bradypu": [50, 305, 374, 502], "bradypus_variegatus_0": 50, "brain": 373, "branch": [366, 377, 379, 382, 383, 411, 418, 445, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 916, 917, 918, 919, 921, 1008, 1012, 1021], "branching_factor": 445, "brand": [394, 397], "brandon": [1042, 1043, 1050, 1051], "brandt": 1047, "brandyn": 1036, "brault": 1043, "braun": 1044, "bravi": 1042, "braycurti": [453, 460, 703, 782, 783, 784, 1008], "braycurtisdist": 703, "brc": [411, 445], "brdav": 1054, "bre": [2, 638, 1021], "bread": 1029, "breadth": [848, 849, 853, 1029, 1038], "breadth_first": [848, 849, 853], "break": [2, 55, 74, 80, 102, 112, 184, 203, 206, 220, 248, 259, 289, 324, 332, 337, 353, 355, 379, 383, 385, 392, 411, 472, 516, 643, 778, 782, 785, 801, 881, 888, 893, 910, 913, 927, 1001, 1004, 1013, 1015, 1020, 1025, 1026, 1036, 1037, 1043, 1044, 1046, 1048, 1052], "break_ti": [350, 910, 913, 1020, 1046], "breakdown": [111, 112, 231, 683, 1001], "breakdown_": 683, "breast": [2, 169, 372, 504, 1013, 1031, 1041], "breast_canc": 334, "breast_cancer_data": 169, "brecht": 645, "bredin": 1040, "breiman": [189, 415, 418, 520, 521, 522, 559, 560, 568, 569, 638, 916, 917, 1013, 1021], "brekk": 1051, "brendan": [73, 443, 457, 1052, 1053, 1054], "brenden": 1050, "brenner": 1005, "breno": [1043, 1044], "brent": [1040, 1044, 1045], "brentfagan": 1045, "bresson": 1055, "brett": [1039, 1041, 1042, 1043, 1044, 1051], "brettingen": 1042, "breuer": 1047, "breunig": [411, 453, 460, 854, 1011], "breve": 1052, "brevin": [1052, 1053], "brew": [146, 377, 397], "brian": [0, 401, 712, 1005, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050], "brice": [1048, 1049], "bridg": [391, 1002], "brief": [379, 1003], "briefli": [281, 378, 392, 418, 994, 1046], "brier": [2, 61, 62, 64, 409, 713], "brier1950": 1005, "brier_scor": 61, "brier_score_loss": [2, 61, 62, 409, 1005, 1044, 1045, 1046, 1054], "brigata": 376, "bright": 342, "brighter": 179, "brigi": [1047, 1048], "brigitta": [1046, 1047, 1048, 1052, 1054], "bring": [187, 312, 416, 680, 682, 1002, 1029], "british": 419, "brittl": [74, 411], "broad": [379, 393, 1024], "broadcast": 631, "broader": [314, 1001, 1028], "broadli": [393, 411], "brocchini": 1048, "brochart": 1053, "brockherd": 1038, "brodersen": 712, "broke": 1043, "broken": [397, 415, 603, 604, 639, 724, 930, 1005, 1021, 1039, 1043, 1044, 1045, 1047, 1050], "brook": [1039, 1040, 1048], "brought": [186, 557, 558, 561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919], "brown": [50, 119, 305, 374, 502, 632, 995, 1041, 1043, 1044, 1045, 1048], "browser": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 379, 387, 1015, 1053], "broyden": 1001, "brr": 194, "brr_poli": 194, "brr_score": 194, "bruce": [1046, 1047], "brucher": [0, 401, 1036], "brummitt": [1043, 1044], "brunak": 747, "brunner": 1040, "bruno": [1047, 1048, 1049, 1054], "brutal": 342, "brute": [292, 391, 406, 415, 422, 447, 449, 453, 460, 636, 637, 692, 693, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 1012, 1031, 1040, 1044, 1048, 1051, 1052, 1053, 1054], "bry": [206, 223], "bryan": [1036, 1039, 1045, 1046, 1049], "br\u00f6mmel": [1050, 1051], "br\u00fblade": 318, "bsa": 768, "bsas_in_radian": 768, "bscikit": 1036, "bsd": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 385, 391], "bsh": 1051, "bsmtfinsf1": [144, 155], "bsmtfinsf2": 144, "bsmthalfbath": 144, "bsmtunfsf": 155, "bspline": 887, "bsplines_": [215, 887], "bsr": [934, 935, 1049], "bt": 419, "btol": [676, 678], "buck": 631, "budarz": 1049, "buddha": 1041, "budget": [0, 144, 843, 844, 845, 846, 847, 994], "bueno": 768, "buffer": [83, 1049, 1054], "buffer_mb": 1036, "bug": [248, 321, 322, 323, 324, 325, 326, 327, 328, 329, 377, 381, 382, 383, 384, 387, 391, 393, 1025, 1036, 1037, 1038, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "bugfix": [1036, 1050], "buguen": 1036, "buhmann": 712, "build": [0, 2, 7, 17, 35, 43, 46, 55, 68, 78, 88, 100, 106, 125, 135, 143, 145, 152, 158, 166, 168, 181, 182, 184, 187, 222, 277, 280, 289, 291, 292, 309, 310, 313, 318, 319, 355, 362, 366, 367, 368, 375, 381, 382, 383, 384, 385, 393, 397, 404, 411, 415, 418, 419, 445, 493, 505, 507, 528, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 589, 590, 592, 593, 595, 631, 632, 634, 695, 717, 718, 805, 809, 813, 822, 828, 830, 869, 886, 888, 916, 917, 918, 919, 921, 948, 952, 994, 995, 1002, 1005, 1009, 1011, 1015, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1036, 1039, 1041, 1042, 1043, 1045, 1048], "build_analyz": [419, 592, 593, 595, 1046], "build_preprocessor": [419, 592, 593, 595, 1046], "build_projection_oper": 53, "build_token": [57, 419, 592, 593, 595], "build_tool": [379, 383, 387], "builder": [47, 49, 349, 383], "buildtool": 377, "built": [2, 25, 66, 116, 133, 135, 136, 143, 145, 189, 222, 275, 289, 305, 321, 358, 361, 366, 374, 377, 379, 380, 381, 383, 385, 387, 388, 391, 392, 393, 397, 405, 411, 412, 415, 418, 420, 448, 507, 557, 558, 559, 560, 563, 564, 565, 566, 592, 593, 597, 601, 643, 644, 645, 646, 647, 650, 651, 656, 662, 664, 665, 666, 667, 676, 677, 678, 679, 685, 807, 808, 815, 839, 842, 848, 849, 918, 919, 957, 988, 1001, 1005, 1006, 1018, 1019, 1021, 1024, 1029, 1036, 1039, 1040, 1042, 1048, 1054], "builtin": 1020, "buitinck": [0, 401, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "bulk": [281, 422, 447], "bulk_benchmark": 49, "bulk_benchmark_estim": 49, "bulk_runtim": 49, "bull": 1043, "buluttekin": 1046, "bumblebe": 1049, "bunch": [2, 50, 248, 372, 373, 374, 467, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 511, 514, 571, 572, 573, 574, 636, 637, 638, 867, 868, 916, 917, 918, 919, 961, 964, 1029, 1041, 1043, 1046, 1048, 1052], "bundl": [1044, 1045], "bupu": 188, "burden": [379, 880, 1025], "bureau": 374, "buri": 379, "burjek": 1036, "burk": [0, 363, 1051], "burn": [1043, 1044], "burst": 1005, "busch": [1044, 1045, 1047], "bush": [45, 374], "busi": [43, 214, 272, 329, 387, 391, 410, 792, 1001, 1005, 1029], "business_metr": 266, "business_scor": 266, "bussonni": [1036, 1048], "butler": [477, 1039, 1047, 1048], "butlerdavi": 477, "butter": 1029, "button": [379, 387], "butyugina": 1052, "buuren": [631, 995], "buzenet": [1051, 1052], "bv_bunch": 50, "bwignal": 1039, "bypass": [410, 412, 603, 650, 656, 826, 916, 917, 918, 919, 1052], "byproduct": 238, "byrd": 662, "byron": 1048, "byte": [86, 419, 490, 507, 512, 513, 586, 592, 593, 595, 969, 1036, 1043, 1044, 1051, 1054], "bz2": [55, 512, 513], "bz2file": 55, "bzip2": 1036, "b\u00e9gude": 318, "c": [2, 43, 45, 46, 47, 50, 51, 52, 57, 61, 62, 64, 66, 67, 70, 74, 75, 77, 78, 85, 89, 90, 92, 93, 94, 98, 103, 104, 106, 116, 118, 119, 126, 127, 135, 137, 138, 143, 144, 151, 153, 154, 156, 157, 162, 169, 172, 173, 174, 175, 179, 192, 198, 202, 204, 205, 206, 207, 209, 211, 212, 221, 223, 225, 226, 227, 228, 230, 231, 234, 236, 238, 239, 246, 247, 249, 253, 258, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 275, 277, 281, 283, 292, 295, 298, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 333, 336, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 358, 359, 360, 366, 367, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 387, 388, 391, 397, 398, 402, 408, 409, 411, 412, 413, 414, 415, 416, 418, 420, 424, 440, 445, 446, 449, 450, 452, 462, 471, 478, 527, 532, 538, 542, 544, 545, 551, 553, 554, 594, 611, 612, 614, 635, 643, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 676, 677, 683, 689, 690, 692, 693, 696, 697, 712, 718, 719, 722, 735, 739, 745, 746, 762, 763, 804, 818, 827, 833, 835, 843, 844, 845, 846, 847, 848, 849, 855, 857, 864, 879, 881, 882, 883, 887, 889, 903, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 923, 934, 935, 967, 994, 997, 998, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1015, 1017, 1019, 1020, 1021, 1024, 1029, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1052, 1054], "c0": [144, 244, 318], "c1": [98, 144, 179, 244, 318], "c2": [98, 144, 179, 244, 318], "c22": 326, "c26": 326, "c3": [98, 144, 318], "c4": [98, 318, 1027, 1031], "c5": [98, 1027, 1031], "c56poni": 1046, "c6": 98, "c99": 1024, "c_": [50, 62, 63, 64, 91, 111, 122, 143, 146, 152, 153, 162, 173, 212, 227, 230, 241, 298, 315, 317, 336, 342, 350, 351, 411, 663, 718, 719, 722, 1005], "c_0": [997, 1003], "c_1": 1002, "c_2": [411, 1002], "c_2d_rang": 342, "c_e": 411, "c_i": [411, 1008], "c_j": [411, 1010], "c_jh_j": 1010, "c_k": 553, "c_option": 104, "c_p": 1001, "c_q": 411, "c_rang": 342, "c_scale": 349, "ca": [169, 376, 411, 445, 916, 917, 1017, 1021], "cabernet": 318, "cabin": 326, "cablevis": 51, "cabrera": 1046, "cach": [2, 52, 87, 99, 184, 273, 292, 293, 295, 300, 304, 366, 367, 374, 393, 444, 448, 453, 471, 489, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 506, 512, 513, 804, 850, 852, 868, 869, 906, 910, 911, 912, 913, 914, 989, 1008, 1020, 1026, 1039, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055], "cache_path": 1008, "cache_s": [471, 906, 910, 911, 912, 913, 914, 1020], "cached_pip": [104, 412], "cachedir": [87, 104, 388, 412], "caching_dir": 989, "caherrera": 1049, "cai": 1049, "caicedo": 1036, "cailean": 1054, "cainei": 1054, "caio": [1042, 1044, 1046], "caj": 51, "caje": 1037, "cal_clf": 63, "cal_clf_prob": 63, "cal_hous": 374, "cal_scor": 63, "calcot": 1049, "calcsiz": 377, "calcul": [2, 46, 63, 64, 69, 80, 92, 111, 133, 134, 135, 139, 156, 183, 184, 190, 210, 218, 219, 231, 246, 248, 271, 272, 278, 282, 287, 291, 340, 346, 347, 362, 366, 386, 393, 402, 408, 409, 411, 415, 416, 418, 422, 441, 446, 447, 449, 451, 453, 454, 456, 458, 459, 474, 475, 481, 484, 540, 551, 567, 568, 573, 601, 615, 624, 636, 637, 638, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 677, 678, 679, 683, 685, 688, 692, 694, 696, 698, 711, 720, 733, 734, 739, 740, 742, 748, 758, 768, 773, 775, 776, 777, 778, 782, 785, 787, 788, 791, 792, 793, 796, 797, 799, 811, 813, 829, 833, 846, 848, 849, 886, 887, 888, 894, 898, 908, 909, 940, 954, 997, 999, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1013, 1015, 1018, 1020, 1026, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "cald": 903, "caleb": 1048, "calibr": [2, 52, 66, 138, 150, 157, 232, 244, 266, 272, 274, 393, 402, 440, 441, 442, 516, 519, 568, 573, 662, 663, 680, 713, 733, 745, 788, 791, 792, 803, 826, 834, 846, 905, 908, 943, 994, 1001, 1005, 1018, 1020, 1026, 1027, 1031, 1033, 1040, 1042], "calibrated_classifi": 63, "calibrated_classifiers_": [63, 409, 440], "calibrated_clf": 440, "calibrated_df": [62, 64], "calibrated_forest": 994, "calibratedclassifiercv": [2, 61, 62, 63, 362, 393, 402, 409, 680, 803, 826, 994, 1020, 1025, 1040, 1042, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "calibratedclassifiercvifittedcalibratedclassifiercv": 63, "calibration_curv": [2, 61, 409, 440, 441, 1045, 1050, 1054], "calibration_displai": [62, 64], "calibrationdisplai": [2, 62, 64, 409, 943, 1049, 1050, 1054], "california": [2, 145, 179, 182, 183, 312, 318, 323, 372, 376, 493, 1031], "calinski": [2, 714, 1042], "calinski_harabasz_scor": [2, 411, 1044], "calinski_harabaz_scor": [1042, 1044], "cali\u0144ski": 411, "call": [52, 53, 55, 80, 83, 87, 103, 119, 133, 140, 146, 166, 171, 175, 177, 179, 186, 188, 201, 214, 215, 218, 232, 242, 248, 252, 254, 255, 266, 272, 273, 281, 285, 287, 289, 292, 294, 317, 319, 323, 324, 353, 354, 355, 361, 366, 367, 368, 374, 379, 380, 381, 384, 385, 386, 387, 388, 391, 392, 393, 394, 397, 402, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 423, 434, 443, 446, 449, 450, 452, 453, 454, 455, 456, 457, 460, 463, 465, 467, 468, 471, 472, 477, 485, 486, 487, 491, 494, 496, 499, 501, 507, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 581, 586, 587, 592, 593, 595, 601, 606, 611, 612, 614, 615, 618, 624, 631, 632, 633, 634, 635, 636, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 708, 736, 746, 759, 775, 778, 782, 783, 784, 785, 797, 801, 802, 803, 804, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 857, 859, 864, 865, 866, 867, 868, 871, 872, 873, 875, 877, 878, 880, 885, 888, 889, 892, 897, 898, 899, 900, 901, 905, 908, 909, 910, 911, 913, 914, 917, 919, 927, 929, 942, 946, 951, 952, 961, 962, 964, 970, 971, 975, 978, 988, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1017, 1018, 1020, 1021, 1024, 1029, 1031, 1033, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "callabl": [2, 262, 276, 329, 393, 415, 418, 419, 420, 422, 423, 444, 446, 447, 448, 449, 450, 452, 453, 455, 460, 462, 463, 467, 468, 469, 470, 535, 537, 539, 541, 543, 549, 550, 561, 562, 563, 564, 565, 566, 568, 569, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 614, 615, 624, 632, 634, 638, 643, 647, 663, 675, 677, 679, 692, 695, 696, 700, 715, 723, 736, 746, 775, 778, 782, 783, 784, 785, 796, 797, 804, 807, 808, 810, 818, 826, 827, 830, 831, 832, 833, 835, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 872, 881, 903, 904, 910, 911, 912, 913, 914, 965, 971, 974, 988, 994, 1005, 1015, 1036, 1040, 1043, 1044, 1045, 1046, 1048, 1050, 1052, 1055], "callback": [535, 541, 543, 549, 550, 857, 970, 1025, 1052], "callbl": 850, "calle": [2, 248, 962], "caller": [2, 248, 412, 650, 651, 656, 664, 665, 666, 685, 898, 899, 961, 962, 980, 981, 982, 1045], "callgrin": 385, "callgrind": 382, "calm": 51, "caltech": 353, "calvin": [1039, 1040], "calvo": [1044, 1045], "cambridg": [374, 416, 594, 843, 847, 1001, 1003, 1007], "came": 1004, "camera_ind": 53, "camil": [1044, 1052, 1053], "camila": 1046, "camilaagw": 1046, "camilo": 1042, "campello": [411, 449], "campustrampu": 1043, "can": [0, 11, 19, 25, 37, 43, 44, 46, 47, 48, 49, 51, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 69, 72, 75, 77, 78, 80, 82, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 102, 103, 104, 105, 109, 110, 111, 112, 113, 116, 118, 122, 124, 125, 126, 128, 130, 131, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166, 167, 168, 169, 171, 176, 177, 178, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 199, 201, 203, 205, 207, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 230, 231, 232, 234, 235, 236, 241, 242, 243, 244, 245, 247, 248, 251, 252, 255, 257, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 289, 291, 292, 294, 296, 297, 298, 299, 301, 308, 309, 310, 312, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 335, 336, 339, 340, 342, 345, 346, 349, 353, 354, 355, 359, 360, 361, 362, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 392, 393, 394, 396, 397, 398, 399, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 434, 436, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 475, 485, 486, 487, 490, 500, 503, 507, 512, 513, 516, 525, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 583, 584, 585, 586, 587, 588, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 636, 638, 639, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 691, 693, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 708, 711, 713, 715, 716, 722, 724, 725, 726, 727, 728, 730, 731, 733, 734, 736, 737, 741, 742, 743, 744, 747, 750, 756, 759, 760, 761, 762, 763, 767, 783, 784, 786, 787, 788, 789, 791, 792, 793, 798, 799, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 865, 866, 867, 868, 871, 872, 873, 875, 876, 877, 881, 882, 883, 886, 887, 888, 893, 900, 901, 905, 906, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 920, 921, 924, 925, 928, 930, 932, 934, 938, 940, 946, 949, 951, 952, 959, 961, 964, 967, 970, 974, 975, 978, 985, 988, 989, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1028, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "canberra": [453, 460, 703, 782, 783, 784, 1008], "canberradist": 703, "cancel": [418, 419, 767], "cancer": [2, 169, 372, 410, 504, 597, 598, 855, 1013, 1031, 1041], "candela": 376, "candid": [106, 262, 270, 273, 280, 323, 368, 379, 383, 411, 418, 451, 453, 804, 807, 808, 816, 818, 1001, 1008, 1021, 1042], "candidate_idx": 271, "cannon": 1051, "cannot": [43, 52, 75, 89, 107, 113, 121, 126, 187, 188, 199, 214, 232, 248, 285, 312, 342, 349, 368, 378, 380, 385, 391, 393, 394, 399, 405, 411, 412, 413, 415, 416, 418, 419, 421, 468, 525, 542, 543, 544, 547, 551, 614, 617, 618, 619, 621, 623, 624, 626, 627, 629, 655, 659, 686, 696, 715, 721, 782, 807, 808, 855, 856, 858, 859, 860, 868, 869, 873, 878, 879, 890, 932, 934, 935, 994, 995, 999, 1001, 1002, 1005, 1006, 1011, 1015, 1020, 1021, 1025, 1029, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "canon": [2, 51, 393, 409, 418, 485, 486, 488, 772, 1025, 1027, 1031], "canonic": 393, "cant": [1053, 1054], "cantor": [632, 995], "canuma": 1049, "canva": 51, "cao": 411, "cap": [408, 411, 759, 1005, 1045], "capabl": [88, 89, 116, 150, 176, 218, 238, 381, 393, 397, 1006, 1009, 1020, 1021, 1029, 1036, 1045, 1053], "capac": [150, 171, 189], "capit": [49, 62, 328, 500, 810, 827], "capitain": 1054, "cappion": [696, 1002], "cappuzzo": 1053, "capsiz": 334, "caption": 102, "captur": [2, 43, 48, 51, 52, 72, 74, 116, 147, 152, 164, 176, 187, 194, 199, 214, 218, 263, 285, 291, 322, 342, 346, 387, 411, 418, 419, 420, 575, 592, 593, 595, 854, 971, 1005, 1010, 1018, 1022, 1048], "car": 214, "carbal": 1053, "card": 1044, "cardin": [72, 142, 148, 189, 190, 318, 319, 327, 411, 418, 466, 557, 558, 561, 562, 563, 564, 568, 569, 570, 683, 881, 882, 889, 916, 917, 918, 919, 1005, 1006, 1013, 1015, 1050, 1051], "cardiotocogram": 251, "care": [47, 88, 148, 187, 266, 289, 346, 366, 368, 383, 385, 391, 393, 394, 405, 410, 411, 413, 419, 440, 463, 472, 644, 662, 663, 670, 671, 672, 680, 681, 682, 699, 908, 1002, 1020, 1029, 1052], "carefulli": [286, 366, 409, 416, 1020], "carei": [1039, 1040, 1041, 1042, 1043], "carett": 1043, "cari": 1048, "carl": [176, 421, 614, 615, 618, 623, 626], "carla": 1052, "carlo": [0, 246, 369, 418, 421, 615, 645, 646, 997, 1010, 1036, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "carlson": 1043, "carlsson": 1039, "carmen": 318, "carnegi": 903, "caro": 1041, "carodorum": 318, "carol": [1042, 1043], "carolin": 1009, "caro\u00e7o": 1055, "carrascosa": [1029, 1040], "carre\u00f1o": 1051, "carri": [51, 67, 135, 183, 266, 272, 275, 280, 285, 308, 314, 355, 394, 419, 561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919, 1029], "carrillo": 1041, "carsten": 1049, "cart": [1027, 1031], "carter": [1042, 1043, 1051, 1054], "cartesian": [103, 408, 637, 1008, 1051], "cartman_nabana": 1046, "cartograph": 192, "cartographi": 1001, "caruana": [62, 64, 409, 440, 442], "carvaj": 1036, "casado": 1047, "casagrand": [1044, 1045], "casalegno": 1048, "cascad": 376, "case": [2, 30, 43, 46, 47, 52, 62, 64, 70, 72, 82, 85, 88, 90, 94, 99, 103, 104, 112, 116, 126, 128, 138, 140, 141, 147, 148, 155, 166, 168, 169, 171, 178, 187, 188, 190, 199, 200, 203, 205, 214, 215, 216, 218, 219, 222, 228, 230, 231, 232, 241, 245, 246, 247, 248, 251, 252, 262, 265, 266, 269, 271, 272, 273, 275, 278, 279, 281, 289, 292, 295, 299, 309, 312, 314, 317, 319, 321, 324, 329, 346, 353, 354, 355, 361, 362, 366, 367, 368, 373, 374, 379, 380, 381, 383, 384, 385, 386, 388, 391, 392, 393, 394, 397, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 440, 443, 446, 447, 449, 450, 454, 456, 466, 467, 468, 470, 477, 500, 512, 513, 519, 543, 545, 546, 547, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 586, 592, 595, 597, 598, 601, 606, 610, 613, 614, 615, 629, 631, 632, 634, 636, 651, 652, 657, 660, 661, 662, 663, 665, 667, 670, 672, 673, 676, 678, 679, 680, 684, 686, 687, 688, 689, 690, 691, 703, 707, 712, 713, 716, 720, 722, 724, 725, 727, 730, 732, 733, 734, 738, 739, 742, 746, 747, 749, 750, 752, 754, 757, 758, 760, 767, 782, 785, 787, 788, 789, 791, 792, 793, 794, 798, 800, 802, 804, 807, 808, 810, 818, 822, 827, 828, 829, 830, 831, 832, 833, 835, 837, 845, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 868, 875, 877, 878, 881, 882, 883, 886, 887, 888, 889, 892, 898, 899, 900, 901, 908, 910, 913, 916, 917, 923, 928, 930, 940, 952, 953, 993, 994, 995, 997, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1019, 1020, 1021, 1024, 1025, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "caselli": [1044, 1045], "cash": 1001, "cashman": 1046, "casino": [1050, 1051], "cass": 1042, "cassi": 318, "cast": [50, 52, 86, 214, 235, 373, 394, 419, 500, 648, 649, 650, 656, 660, 661, 664, 665, 666, 667, 668, 669, 677, 679, 969, 1043, 1044, 1045, 1046, 1049, 1051, 1053], "castachick": 1047, "castello": 1040, "castor": 1047, "caswel": [1049, 1052], "cat": [51, 103, 188, 189, 251, 324, 325, 326, 327, 328, 329, 374, 419, 491, 586, 716, 722, 758, 787, 889, 1005, 1015, 1045, 1046, 1048], "cat_column": 251, "cat_linear_processor": 155, "cat_proc": [243, 322], "cat_selector": 155, "cat_str": 57, "cat_tree_processor": 155, "catajara": 1046, "catalfo": 1044, "catalin": 646, "catastroph": [266, 319, 767, 1025], "catch": [79, 95, 309, 367, 387, 388], "catch_warn": [79, 95, 248, 308, 309], "categor": [2, 43, 103, 134, 140, 150, 155, 184, 187, 188, 189, 214, 232, 251, 253, 255, 266, 319, 324, 326, 327, 368, 371, 373, 374, 384, 393, 412, 419, 469, 470, 492, 493, 500, 509, 565, 566, 585, 586, 611, 612, 636, 637, 652, 662, 663, 673, 684, 713, 831, 843, 844, 845, 846, 847, 869, 871, 875, 876, 879, 881, 882, 889, 903, 904, 925, 995, 1001, 1012, 1013, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1036, 1037, 1040, 1041, 1044, 1046, 1048, 1051, 1052, 1053, 1054], "categori": [2, 25, 57, 79, 95, 102, 103, 144, 155, 187, 188, 214, 222, 229, 251, 266, 273, 308, 309, 314, 318, 319, 323, 326, 328, 335, 353, 354, 355, 373, 374, 388, 411, 412, 418, 419, 421, 491, 500, 501, 507, 565, 566, 652, 662, 663, 673, 684, 747, 762, 763, 844, 881, 882, 889, 946, 947, 995, 1001, 1002, 1003, 1007, 1013, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "categorical_column": [43, 144, 187, 189, 251, 470], "categorical_columns_selector": 251, "categorical_columns_subset": 144, "categorical_crossentropi": [1046, 1050], "categorical_encod": 189, "categorical_featur": [43, 103, 144, 150, 188, 266, 318, 323, 324, 325, 326, 328, 384, 418, 565, 566, 636, 637, 1012, 1044, 1048, 1051, 1053], "categorical_preprocessor": [253, 318], "categorical_transform": 103, "categoricalnb": [2, 843, 845, 846, 847, 1007, 1046, 1047, 1048, 1049, 1051], "categories_": [881, 882, 889, 1015, 1044, 1051], "categoris": [946, 947], "category_1_fold": 507, "category_2_fold": 507, "category_count_": 844, "category_s": 354, "categr": 1013, "caterpillar": 51, "cathi": [1040, 1046], "catindex": 188, "catplot": 262, "caught": [379, 387, 405], "caus": [43, 62, 64, 147, 172, 187, 212, 214, 218, 219, 232, 291, 319, 346, 355, 362, 377, 384, 409, 411, 416, 417, 419, 421, 446, 450, 452, 462, 513, 536, 586, 593, 614, 615, 782, 843, 844, 845, 847, 872, 881, 883, 886, 887, 934, 935, 995, 1001, 1005, 1013, 1015, 1018, 1025, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055], "causal": [184, 185, 209, 661, 789, 834, 1026], "causat": 187, "caution": [187, 266, 383, 443, 457, 1044], "cautiou": 1043, "caveat": [415, 420, 421], "cawlei": [277, 1005], "cax": [66, 174, 283], "ca\u00f1ardo": 1039, "cb": [174, 245, 261], "cbar_ax": 283, "cbar_kw": [194, 199], "cc": 377, "cc18": 373, "cc_home": [916, 917], "cca": [2, 249, 414, 486, 488, 1006, 1040, 1044, 1045, 1046, 1048, 1050, 1054], "ccat": 374, "ccf2002": 997, "cclauss": 1044, "cco": 353, "ccp_alpha": [321, 357, 561, 562, 563, 564, 568, 569, 916, 917, 918, 919, 1021, 1046], "ccp_path": [916, 917, 918, 919], "cd": [121, 169, 376, 377, 379, 383, 385, 416, 474, 475, 481, 535, 541, 543, 544, 547, 549, 550, 551, 1001, 1041, 1051], "cdef": 380, "cdf": 272, "cdist": 1049, "cdivis": 380, "cdot": [272, 346, 408, 411, 416, 417, 421, 618, 619, 623, 626, 627, 874, 997, 999, 1005, 1009, 1015], "cdrig": 1050, "cdt": 57, "cea": [843, 1007], "ceballo": 1050, "ceder": [792, 1005], "ceethinwa": [1048, 1049], "ceh": 1051, "ceil": [150, 251, 561, 562, 563, 564, 567, 568, 569, 570, 598, 675, 807, 808, 916, 917, 918, 919, 1019], "celelibi": 1045, "celeo": 1040, "celeux": 532, "cell": [50, 51, 58, 63, 68, 103, 104, 140, 142, 151, 152, 155, 158, 166, 169, 176, 187, 188, 189, 196, 242, 243, 244, 248, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 305, 310, 318, 322, 323, 325, 326, 328, 333, 361, 376, 384, 696, 1005, 1006, 1042, 1050], "cellular": 53, "celsiu": [188, 1012], "cemlyn": 1054, "cen": 747, "censor": 1024, "censu": 374, "center": [0, 2, 36, 43, 46, 47, 48, 53, 61, 63, 69, 70, 72, 73, 75, 77, 78, 82, 83, 86, 88, 89, 92, 93, 94, 96, 97, 112, 126, 127, 130, 145, 146, 147, 148, 167, 169, 183, 188, 196, 206, 208, 214, 215, 225, 226, 237, 238, 241, 242, 251, 257, 260, 261, 267, 273, 283, 297, 300, 302, 308, 312, 314, 315, 325, 333, 340, 342, 343, 344, 348, 354, 355, 374, 375, 376, 384, 411, 413, 414, 416, 417, 418, 424, 443, 445, 446, 449, 450, 451, 452, 455, 457, 462, 463, 464, 465, 466, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 487, 488, 505, 516, 528, 538, 539, 545, 548, 554, 610, 613, 614, 615, 636, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 682, 694, 698, 700, 801, 873, 874, 877, 886, 888, 898, 899, 908, 909, 999, 1001, 1002, 1004, 1012, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1053], "center1": 99, "center2": 99, "center3": 99, "center4": 99, "center_": 886, "center_box": [93, 516], "centers_0": 315, "centers_1": 315, "centers_init": 92, "cento": 377, "centr": 154, "central": [0, 53, 216, 374, 380, 411, 1011, 1024], "centrality_scor": 55, "centroid": [2, 77, 90, 91, 109, 184, 293, 300, 315, 325, 338, 354, 375, 402, 411, 445, 446, 449, 450, 451, 452, 455, 462, 463, 465, 508, 553, 635, 855, 1026, 1027, 1031, 1036, 1040, 1043, 1048, 1052], "centroids_": [445, 449, 855], "ceo": 1029, "cerda": 1050, "certain": [52, 88, 145, 150, 187, 219, 231, 248, 272, 292, 316, 346, 362, 374, 375, 379, 383, 393, 396, 405, 407, 411, 416, 420, 642, 653, 657, 662, 667, 688, 868, 873, 908, 994, 997, 1001, 1002, 1005, 1006, 1009, 1015, 1020, 1024, 1041, 1045, 1048, 1051], "certainli": [86, 102, 187, 354, 410], "certainti": [272, 381, 1005], "ceshin": 1042, "cest": 1005, "cetina": 1048, "cf": [319, 410, 411, 414, 445, 704, 1001, 1015, 1025], "cflag": 377, "cft": 411, "cftree": 445, "cg": [310, 662, 663, 676, 678, 691, 1001, 1040, 1041, 1043, 1047, 1049, 1050, 1053, 1054], "cga": 179, "cgi": 901, "cgohlk": [1039, 1040], "cgroup": [1049, 1050], "cgsavard": [1046, 1047], "ch6": 534, "chacon": 709, "chac\u00f3n": [411, 709], "chad": 1053, "chadi": 1044, "chai": [1048, 1051, 1052], "chain": [2, 35, 101, 107, 135, 161, 184, 244, 280, 283, 289, 290, 292, 295, 310, 362, 371, 391, 393, 421, 500, 506, 545, 615, 631, 662, 742, 804, 834, 837, 839, 840, 841, 842, 868, 869, 888, 994, 995, 1006, 1010, 1022, 1026, 1029, 1031], "chain_jaccard_scor": 291, "chain_method": [839, 1054], "chain_method_": 839, "chaitanya": 1047, "chaitanyamog": 1048, "chakhchoukh": 112, "chakravarti": [639, 641], "chalearn": 1005, "challeng": [51, 155, 171, 188, 194, 232, 241, 368, 374, 375, 405, 411, 413, 465, 475, 1005, 1011, 1029], "chalmer": 1050, "chalmerlow": 1039, "chalulu": 1051, "chan": [0, 846, 888, 1054, 1055], "chanc": [2, 71, 73, 82, 135, 164, 184, 190, 214, 222, 229, 232, 272, 278, 281, 282, 318, 349, 354, 362, 378, 410, 411, 415, 704, 706, 708, 709, 712, 720, 759, 761, 790, 799, 833, 1005, 1013, 1021, 1026, 1052], "chance_level_": [704, 706, 1052], "chance_level_kw": [251, 704, 706, 1052], "chandra": [1046, 1047, 1050], "chang": [2, 46, 62, 63, 64, 121, 125, 126, 138, 141, 148, 172, 182, 186, 187, 190, 202, 215, 216, 218, 219, 252, 253, 266, 267, 272, 279, 282, 286, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 342, 346, 355, 361, 362, 366, 367, 368, 374, 381, 382, 383, 384, 387, 391, 393, 402, 411, 415, 418, 419, 421, 423, 431, 436, 440, 443, 446, 447, 450, 452, 455, 457, 462, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 497, 498, 500, 508, 512, 513, 516, 517, 518, 526, 531, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 581, 582, 583, 584, 585, 586, 592, 593, 594, 595, 597, 598, 601, 606, 614, 615, 617, 618, 619, 621, 623, 624, 626, 627, 629, 631, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 694, 696, 698, 704, 708, 711, 716, 720, 721, 733, 734, 740, 741, 759, 761, 782, 787, 788, 789, 791, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 818, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 858, 859, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 880, 881, 887, 888, 889, 896, 897, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 927, 932, 934, 935, 947, 952, 963, 970, 971, 974, 994, 995, 996, 1004, 1005, 1006, 1008, 1015, 1018, 1019, 1020, 1021, 1025, 1034, 1035], "changed_onli": 1047, "changedbehaviorwarn": 1048, "changedbehaviourwarn": 1045, "changelog": [326, 383, 393, 1034], "changing_param": 46, "changing_param_valu": 46, "changyao": [1051, 1052], "channel": [367, 374, 377, 397, 419, 497, 498, 587, 588, 590, 591, 1028], "channel_prior": 377, "chapman": 1001, "chapter": [121, 362, 381, 411, 416, 418, 421, 534, 536, 538, 618, 623, 626, 647, 995, 998, 1001, 1020, 1021], "char": [419, 592, 593, 595, 1036], "char_wb": [419, 592, 593, 595], "charact": [355, 379, 384, 393, 419, 507, 512, 513, 592, 593, 595, 920, 1010, 1036, 1049, 1051], "character": [75, 232, 357, 411, 415, 1002], "characteris": 1008, "characterist": [2, 79, 95, 169, 176, 184, 241, 242, 254, 264, 266, 267, 269, 274, 312, 362, 374, 376, 384, 409, 410, 415, 418, 421, 507, 508, 627, 642, 662, 706, 710, 712, 731, 786, 792, 793, 823, 834, 837, 875, 913, 1001, 1026], "chardet": 419, "chardetect": 419, "charg": [0, 266, 379], "charikar": 997, "charl": [64, 266, 768, 1036, 1039, 1042, 1046, 1048, 1051], "charli": [1043, 1044, 1052], "charlton": 1043, "charra": [1051, 1053, 1054], "charron": [1029, 1039, 1040, 1047, 1048, 1049], "charset": [1036, 1038], "charset_error": 1038, "chart": [72, 145, 277, 399, 1006, 1039], "chartbeat": 1029, "chase": [51, 1036], "chasnovski": 1047, "chat": 1029, "chatterje": 1047, "chaudhuri": 449, "chauhan": [1044, 1045, 1051, 1052], "chaumond": [1029, 1044], "chauvin": 747, "chavez": [45, 374], "chawla": 1046, "chayant": 1043, "chazalon": 1050, "cheaper": [188, 411, 421, 677, 997, 1001], "cheat": [52, 342, 399, 1009, 1019, 1038], "chebee7i": 1040, "chebyshev": [453, 460, 703, 782, 783, 784, 1008], "chebyshevdist": 703, "check": [2, 41, 43, 44, 47, 55, 80, 86, 89, 125, 133, 141, 155, 171, 184, 186, 188, 189, 200, 201, 203, 214, 235, 248, 258, 264, 266, 281, 289, 324, 333, 361, 366, 367, 377, 378, 379, 380, 381, 382, 383, 385, 386, 388, 389, 391, 392, 393, 397, 398, 402, 405, 412, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 494, 506, 512, 513, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 691, 692, 693, 694, 695, 696, 697, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 832, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 927, 934, 935, 936, 946, 947, 957, 959, 960, 961, 965, 966, 988, 989, 990, 992, 993, 1000, 1001, 1002, 1005, 1020, 1021, 1025, 1026, 1029, 1031, 1036, 1037, 1039, 1043, 1047, 1048, 1049, 1050, 1051, 1053, 1055], "check_arrai": [2, 381, 388, 471, 538, 906, 993, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "check_classifier_multioutput": 1046, "check_consistent_length": 2, "check_cv": [2, 393, 1041], "check_decision_proba_consist": 1043, "check_estim": [2, 321, 381, 393, 927, 947, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "check_estimator_sparse_arrai": 1054, "check_estimator_sparse_data": 1054, "check_estimator_sparse_matrix": 1054, "check_estimators_fit_returns_self": 947, "check_estimators_pickl": 1053, "check_fit_idempot": 1045, "check_increas": 2, "check_input": [538, 552, 650, 651, 656, 664, 665, 666, 685, 691, 916, 917, 918, 919, 1044], "check_invers": [412, 468, 872, 1015, 1044, 1050, 1051], "check_is_fit": [2, 89, 133, 248, 382, 388, 393, 1046, 1049, 1050, 1055], "check_memori": [2, 388, 393, 1043], "check_metadata": 248, "check_methods_sample_order_invari": [1048, 1050], "check_methods_subset_invari": [1044, 1050], "check_nam": 927, "check_non_neg": 1055, "check_pairwise_arrai": [1045, 1055], "check_param": 993, "check_random_st": [2, 94, 230, 236, 244, 250, 381, 388, 393], "check_regressor_multioutput": 1046, "check_requires_y_non": 1050, "check_sample_weight_equival": 1055, "check_sample_weights_invari": 1055, "check_sample_weights_pandas_seri": 1044, "check_scalar": [2, 1050], "check_scor": [2, 393, 1054, 1055], "check_set_param": 1044, "check_symmetr": 2, "check_transformer_data_not_an_arrai": 1046, "check_transformers_unfitted_stateless": 1052, "check_x_i": [2, 381, 388, 993, 1040, 1044, 1045, 1050, 1055], "checkbox": 379, "checked_cv": 828, "checker": [2, 383, 828], "checkerboard": [2, 58, 408, 454, 456, 515, 517], "checking_statu": 266, "checkingclassifi": 1046, "checklist": [382, 383], "checkout": [377, 379, 383, 387], "checks_gener": 946, "checksum": [495, 1048], "cheeseman": 376, "chege": 1050, "chemic": 376, "chemometr": 376, "chen": [109, 110, 413, 418, 424, 478, 730, 760, 997, 1005, 1039, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1055], "chenal": [1045, 1046, 1048], "cherkasski": 1001, "chernei": 1054, "chernyi": 1050, "cherri": 383, "cherti": 1040, "cherubin": 1042, "chestervil": 326, "cheuk": [1044, 1045], "cheung": 1037, "chevali": 1048, "chevalli": 1053, "chevron": 51, "chi": [2, 103, 111, 135, 316, 371, 420, 523, 596, 599, 600, 602, 603, 604, 608, 609, 610, 613, 642, 643, 644, 645, 646, 762, 763, 1031, 1036, 1041, 1042], "chi2": [2, 103, 419, 420, 455, 585, 596, 599, 600, 602, 603, 604, 609, 610, 613, 624, 642, 643, 644, 645, 646, 647, 763, 769, 778, 1036, 1043, 1050], "chi2_featur": 646, "chi2_kernel": [2, 407, 642, 646, 762, 769, 1003, 1037, 1055], "chi2_stat": 608, "chi2sampl": 642, "chiang": 1044, "chiara": [0, 370, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "chibuik": 1049, "chicco": 1054, "chief": 1029, "chieh": [1043, 1044], "chigurupati": 1048, "chih": [662, 1041], "chilamkurthi": 1042, "child": [150, 248, 353, 361, 367, 391, 393, 402, 411, 418, 445, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 916, 917, 918, 919, 961, 962, 964, 1021, 1043, 1055], "child_idx": 76, "children": [361, 411, 418, 444, 448, 466, 570, 1040, 1053], "children_": [76, 444, 448, 466], "children_left": 361, "children_right": 361, "chime": 378, "chin": [376, 1040], "china": [411, 510, 511, 588, 591], "chines": 1024, "chinmaya": 1043, "chinthala": 1043, "chiotelli": 1045, "chip": [407, 1029], "chisquar": 316, "chitteti": 1050, "chkoar": 1043, "chloe": 1050, "cho": 1047, "choe": 1045, "choi": [1001, 1054], "choic": [2, 43, 46, 64, 75, 80, 88, 98, 102, 109, 128, 150, 171, 172, 178, 182, 203, 215, 251, 265, 266, 270, 272, 275, 286, 297, 319, 323, 353, 354, 362, 366, 377, 384, 393, 397, 411, 413, 415, 417, 418, 420, 421, 455, 465, 474, 475, 476, 477, 478, 479, 481, 542, 544, 545, 551, 563, 642, 651, 652, 660, 662, 663, 665, 673, 684, 696, 709, 746, 837, 850, 851, 856, 858, 859, 885, 888, 897, 899, 908, 909, 938, 994, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1013, 1018, 1019, 1020, 1021, 1043, 1046, 1047, 1051, 1052], "choleski": [110, 214, 232, 388, 474, 475, 481, 531, 615, 652, 654, 655, 658, 659, 660, 662, 663, 673, 676, 678, 684, 686, 687, 691, 801, 802, 1001, 1039, 1043, 1045, 1048, 1051, 1052, 1055], "cholesky_delet": 388, "cholesterol": [169, 376], "chong": 540, "choo": [1051, 1052], "choos": [43, 50, 51, 79, 80, 83, 86, 93, 95, 99, 109, 127, 143, 155, 169, 187, 190, 207, 249, 266, 267, 277, 284, 357, 362, 366, 367, 368, 381, 384, 387, 392, 393, 405, 409, 410, 411, 413, 415, 418, 419, 422, 446, 447, 450, 452, 462, 527, 536, 542, 563, 564, 586, 606, 662, 663, 676, 678, 683, 691, 692, 693, 697, 730, 760, 804, 807, 808, 818, 875, 908, 909, 916, 917, 918, 919, 994, 995, 996, 1000, 1001, 1002, 1003, 1004, 1008, 1015, 1018, 1019, 1020, 1031, 1038, 1039, 1043, 1045, 1047], "choose_check_classifiers_label": 1046, "choose_random_sampl": 381, "choraria": 1048, "chose": [77, 187], "chosen": [47, 58, 80, 105, 155, 172, 187, 188, 203, 215, 231, 249, 265, 266, 267, 269, 275, 286, 354, 362, 366, 391, 410, 411, 413, 414, 418, 421, 443, 449, 452, 454, 456, 457, 463, 500, 527, 539, 561, 562, 563, 564, 565, 566, 568, 569, 651, 657, 660, 662, 663, 665, 667, 675, 680, 681, 682, 683, 684, 694, 698, 798, 801, 802, 804, 807, 808, 818, 838, 857, 908, 909, 916, 917, 918, 919, 952, 994, 997, 999, 1001, 1002, 1004, 1006, 1011, 1012, 1019, 1021, 1044, 1052, 1053], "chou": [1043, 1044], "choudhari": [1040, 1041, 1050, 1052], "choudhri": 1054, "chowdhuri": [1044, 1050], "choyal": [1043, 1044], "chri": [0, 401, 1036, 1039, 1044, 1045, 1046, 1047, 1050], "chrissobel": 1049, "christ": 57, "christian": [0, 57, 353, 354, 374, 400, 1029, 1036, 1037, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "christianwaldmann": 1051, "christin": [1051, 1052], "christo": [1045, 1046, 1048, 1050, 1053], "christof": [1040, 1041], "christoph": [188, 416, 421, 536, 614, 615, 618, 623, 626, 801, 1001, 1006, 1037, 1041, 1044, 1047, 1048, 1049, 1050, 1051], "christopherlim98": 1050, "chrome": 1015, "chronolog": [374, 501], "chu": [855, 1052], "chuan": 1009, "chugh": 1048, "chuliang": 1049, "chun": [1047, 1048, 1050, 1051, 1052], "chung": [1043, 1044], "chunk": [2, 47, 83, 366, 367, 411, 416, 422, 447, 452, 471, 542, 782, 785, 836, 837, 843, 844, 845, 846, 847, 906, 1007, 1043, 1044, 1045, 1046, 1047], "chunk_siz": 1037, "chunker": 419, "church": [901, 1017], "chyi": [1039, 1040, 1041, 1042, 1043], "ci": [88, 367, 382, 383, 1007, 1042, 1044], "ciccolella": [696, 1002], "cice": [1012, 1050], "cichocki": [416, 542, 544, 551], "cimport": [380, 388, 1044], "cindi": [1041, 1049, 1053, 1054], "cio": 373, "cipri\u00e1n": 1050, "circl": [2, 70, 93, 126, 153, 154, 162, 239, 249, 299, 302, 308, 312, 314, 333, 346, 360, 375, 383, 387, 411, 455, 465, 518, 526, 768, 1020], "circle1": 99, "circle2": 99, "circle3": 99, "circle4": 99, "circleci": [52, 175, 177, 179, 180, 242, 258, 310, 379], "circlecl": 0, "circuit": [57, 1002], "circular": 53, "circumst": [128, 232, 1008, 1024], "circumstanti": 214, "cirru": [0, 379], "cisco": 51, "citat": [0, 373, 376, 391], "cite": [373, 391, 411], "citi": [412, 419, 469], "citizen": 1015, "city_categori": 412, "city_london": 412, "city_pari": 412, "city_sallisaw": 412, "cityblock": [75, 79, 411, 453, 460, 766, 782, 783, 784, 1008], "cividi": 75, "ciyou": 662, "cj": [1007, 1039, 1040, 1041, 1042, 1043], "cjlin": [192, 373, 490, 512, 513, 662, 1039], "ckdtree": [422, 447, 1038], "cl": [0, 47, 51, 386, 393, 918], "cla": 127, "clabel": [174, 225], "clae": 1044, "clai": 1036, "claim": [184, 193, 379, 467, 500, 556, 652, 673, 684, 710, 749, 754, 756, 834, 869, 872, 873, 881, 888, 1001, 1026], "claimamount": 232, "claimnb": [214, 232], "clair": 1036, "clamp": [904, 1018], "clang": [377, 380], "clara": [373, 1048], "clare": 1046, "clarifi": [387, 394, 797], "clariti": [167, 379, 387], "clark": 51, "class": [2, 4, 27, 30, 43, 47, 48, 49, 50, 53, 57, 60, 61, 62, 64, 66, 70, 75, 87, 88, 89, 91, 103, 104, 118, 119, 126, 129, 131, 133, 134, 141, 150, 151, 156, 169, 171, 172, 174, 175, 177, 179, 180, 182, 184, 187, 188, 192, 193, 204, 205, 206, 222, 226, 229, 230, 235, 241, 248, 249, 251, 257, 258, 259, 264, 265, 266, 267, 272, 274, 278, 282, 283, 286, 289, 291, 292, 295, 297, 298, 300, 301, 302, 303, 317, 321, 325, 327, 328, 329, 331, 333, 334, 337, 338, 339, 340, 342, 343, 346, 350, 353, 354, 355, 358, 361, 368, 371, 373, 374, 375, 376, 379, 380, 381, 383, 384, 385, 386, 388, 391, 392, 397, 402, 405, 406, 407, 409, 411, 412, 414, 416, 420, 421, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 490, 491, 492, 494, 496, 497, 498, 499, 500, 501, 504, 506, 507, 508, 512, 513, 514, 516, 518, 519, 523, 526, 527, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 579, 581, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 724, 726, 731, 733, 734, 735, 737, 739, 740, 741, 742, 743, 744, 745, 747, 758, 759, 761, 786, 787, 788, 790, 791, 792, 793, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 939, 940, 942, 943, 944, 946, 947, 957, 960, 961, 962, 965, 970, 972, 974, 975, 988, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1012, 1013, 1015, 1016, 1018, 1021, 1025, 1026, 1027, 1029, 1031, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "class1_1": 157, "class2_1": 157, "class_0": [222, 376, 514], "class_1": [222, 376, 514], "class_2": [376, 514], "class_count_": [843, 844, 845, 846, 847], "class_id": [281, 282], "class_index": 88, "class_label": [393, 561, 565, 568, 662, 663, 670, 672, 678, 679, 680, 803, 826, 916, 918, 940, 1020], "class_likelihood_ratio": [2, 275, 1005, 1051], "class_log_prior_": [843, 844, 845, 847], "class_memb": 73, "class_member_mask": 82, "class_nam": [137, 265, 889, 920, 921, 922, 1021, 1052], "class_name0": [427, 445, 446, 448, 450, 452, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 874, 900, 901], "class_name1": [427, 445, 446, 448, 450, 452, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 874, 900, 901], "class_name2": [427, 445, 446, 448, 450, 452, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 874, 900, 901], "class_of_interest": [66, 281, 635, 1053], "class_prior": [374, 843, 844, 845, 847, 1037, 1040], "class_prior_": [555, 846], "class_protein_loc": 289, "class_sep": [168, 302, 519, 803, 826], "class_weight": [2, 45, 344, 393, 561, 565, 568, 662, 663, 670, 672, 678, 679, 680, 681, 908, 910, 913, 915, 916, 918, 939, 940, 994, 1019, 1020, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1050, 1051], "class_weight_": [910, 913, 1051], "class_weight_vect": 939, "classes_": [133, 206, 223, 242, 248, 281, 331, 332, 379, 381, 393, 436, 440, 441, 553, 554, 555, 557, 559, 561, 563, 565, 568, 571, 573, 597, 598, 614, 635, 662, 663, 670, 672, 678, 679, 680, 701, 704, 706, 792, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 850, 855, 858, 865, 868, 875, 876, 879, 889, 903, 904, 905, 908, 910, 913, 916, 918, 921, 1005, 1016, 1019, 1037, 1040, 1041, 1043, 1046, 1048], "classic": [55, 209, 238, 257, 263, 346, 376, 383, 413, 415, 416, 446, 450, 452, 462, 496, 504, 508, 514, 545, 636, 637, 918, 919, 999, 1001, 1004, 1007, 1015, 1024, 1036, 1037, 1041, 1050], "classif": [2, 14, 19, 30, 31, 38, 40, 42, 45, 46, 49, 57, 60, 61, 62, 64, 67, 70, 103, 104, 105, 109, 110, 115, 119, 124, 135, 137, 139, 141, 142, 143, 148, 150, 151, 153, 157, 159, 162, 164, 165, 166, 168, 169, 170, 176, 177, 187, 188, 192, 193, 204, 205, 206, 207, 214, 222, 224, 225, 226, 227, 229, 240, 242, 246, 247, 251, 254, 260, 261, 264, 265, 269, 270, 271, 272, 273, 281, 286, 287, 289, 290, 293, 294, 300, 301, 302, 304, 305, 306, 307, 308, 309, 314, 315, 316, 317, 331, 336, 337, 338, 342, 345, 347, 348, 349, 350, 351, 352, 354, 355, 362, 366, 368, 372, 373, 374, 376, 381, 384, 388, 392, 393, 406, 409, 410, 411, 412, 415, 416, 418, 419, 420, 428, 440, 472, 478, 485, 490, 491, 492, 494, 496, 497, 498, 499, 500, 501, 503, 504, 506, 507, 508, 514, 516, 518, 519, 523, 524, 526, 527, 545, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 573, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 610, 613, 614, 615, 617, 618, 626, 635, 636, 637, 647, 662, 663, 670, 672, 678, 679, 680, 701, 707, 709, 712, 716, 717, 719, 720, 722, 730, 731, 733, 734, 738, 739, 742, 745, 747, 758, 760, 762, 763, 765, 786, 787, 788, 790, 791, 792, 793, 798, 800, 803, 804, 805, 807, 808, 809, 810, 818, 822, 823, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 850, 855, 857, 858, 864, 865, 866, 868, 872, 875, 880, 881, 882, 883, 888, 889, 892, 894, 903, 904, 905, 908, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 924, 937, 940, 949, 994, 995, 997, 998, 999, 1002, 1003, 1007, 1010, 1012, 1013, 1015, 1016, 1018, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "classifi": [2, 30, 45, 46, 47, 48, 60, 63, 65, 66, 68, 70, 89, 102, 103, 104, 105, 106, 118, 126, 131, 135, 136, 137, 138, 139, 142, 143, 146, 153, 156, 157, 162, 165, 166, 167, 168, 173, 184, 189, 190, 192, 193, 204, 205, 206, 212, 214, 221, 223, 226, 229, 232, 241, 244, 246, 248, 249, 254, 265, 266, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 289, 290, 294, 300, 301, 303, 307, 310, 314, 323, 324, 328, 330, 331, 332, 334, 335, 337, 338, 340, 341, 343, 344, 345, 346, 350, 351, 355, 374, 376, 379, 381, 384, 391, 393, 402, 410, 411, 412, 415, 419, 420, 421, 428, 436, 437, 438, 439, 440, 441, 442, 491, 492, 500, 508, 516, 518, 519, 526, 535, 540, 541, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 570, 571, 572, 573, 574, 597, 598, 606, 610, 614, 626, 633, 635, 636, 637, 653, 662, 663, 670, 672, 675, 676, 677, 678, 679, 680, 701, 702, 704, 706, 707, 711, 712, 713, 715, 716, 717, 722, 724, 726, 730, 731, 733, 734, 736, 738, 739, 742, 743, 744, 745, 747, 758, 760, 786, 787, 788, 791, 792, 793, 798, 800, 803, 804, 807, 808, 810, 818, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 855, 856, 858, 859, 864, 865, 866, 868, 869, 875, 888, 889, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 924, 927, 928, 941, 944, 946, 994, 995, 997, 1000, 1001, 1002, 1005, 1006, 1007, 1010, 1013, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1054], "classification_data": 46, "classification_report": [2, 45, 68, 102, 166, 270, 310, 331, 332, 826, 1005, 1038, 1040, 1044, 1045, 1046, 1048, 1052, 1054, 1055], "classificationcriterion": 1044, "classifier_": [89, 248], "classifier_01": 329, "classifier_05": 329, "classifier__c": 103, "classifier__criterion": 253, "classifier__max_depth": 253, "classifier__max_featur": 253, "classifier__min_samples_leaf": 189, "classifier__n_estim": 253, "classifier__n_neighbor": 294, "classifier_idx": 66, "classifier_model": 294, "classifier_other_threshold": 803, "classifier_tag": [927, 941], "classifier_tun": 826, "classifierchain": [2, 291, 393, 402, 840, 842, 1043, 1048, 1051, 1053, 1054], "classifiermixin": [2, 133, 248, 379, 381, 393, 415, 928, 1047], "classifiertag": [2, 927, 941], "classify__c": 104, "classmethod": [386, 441, 635, 636, 701, 702, 703, 704, 705, 706, 810, 827], "classnameprefixfeaturesoutmixin": [2, 381, 435, 1051], "claudio": [376, 1050, 1051, 1053, 1054], "claus": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 391], "clauss": 1053, "clb": 188, "clean": [85, 103, 213, 362, 371, 377, 417, 1011, 1015, 1046], "cleaner": 99, "cleanli": [95, 1036], "cleanup": [379, 1036], "clear": [43, 88, 93, 104, 187, 188, 317, 374, 378, 379, 381, 391, 392, 393, 409, 412, 417, 922, 923, 994, 999, 1047, 1048, 1049, 1054], "clear_data_hom": 2, "clearer": [239, 1020], "clearli": [43, 93, 124, 188, 246, 346, 378, 379, 391, 393, 416, 418, 1006, 1012], "clegg": 1039, "clemen": 1040, "clement": [1043, 1044, 1048], "clenaghan": [1041, 1042], "cleveland": 374, "cleverless": 1038, "clf": [45, 49, 50, 51, 61, 62, 63, 64, 67, 68, 73, 84, 87, 91, 96, 103, 127, 139, 146, 149, 151, 156, 160, 162, 165, 166, 168, 173, 175, 190, 204, 206, 207, 211, 212, 218, 221, 223, 226, 227, 228, 229, 230, 237, 242, 243, 246, 249, 255, 261, 269, 273, 277, 278, 280, 283, 284, 295, 298, 299, 300, 303, 307, 314, 317, 321, 322, 323, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 353, 357, 358, 361, 366, 374, 392, 393, 405, 412, 415, 418, 420, 441, 553, 554, 557, 559, 561, 563, 565, 567, 568, 571, 597, 598, 601, 636, 638, 642, 643, 644, 645, 646, 648, 649, 652, 656, 662, 663, 664, 665, 666, 670, 672, 673, 676, 677, 678, 679, 680, 681, 684, 701, 702, 704, 706, 715, 792, 804, 807, 808, 818, 836, 837, 838, 840, 843, 844, 845, 846, 847, 854, 855, 865, 908, 910, 912, 913, 916, 920, 922, 995, 997, 1001, 1005, 1006, 1008, 1009, 1011, 1012, 1019, 1020, 1021], "clf1": [69, 156, 157, 418, 573], "clf2": [69, 156, 157, 381, 418, 573], "clf3": [69, 156, 157, 381, 418, 573], "clf__": 273, "clf__alpha": 273, "clf__c": 412, "clf_descr": 353, "clf_en_lr": 205, "clf_err": 139, "clf_isoton": 61, "clf_isotonic_scor": 61, "clf_l1_lr": 205, "clf_l2_lr": 205, "clf_list": [62, 64], "clf_name": [49, 353], "clf_no_weight": 351, "clf_pf": 846, "clf_prob": 63, "clf_sample_weight": 248, "clf_score": 61, "clf_sel": 190, "clf_select": 165, "clf_sgd": 228, "clf_sigmoid": 61, "clf_sigmoid_scor": 61, "clf_tut": 161, "clf_weight": 351, "click": [243, 253, 273, 322, 328, 379, 381, 387, 399, 1029], "clickabl": 1050, "client": 381, "clifford": 1049, "cliffordemmanuel": 1049, "clim": 174, "climatologi": 409, "climb": [411, 451, 464], "clinton": 57, "clip": [62, 64, 232, 244, 312, 342, 639, 680, 745, 878, 1015, 1040, 1047, 1048, 1055], "clmbst": 1048, "clock": 43, "clone": [2, 89, 147, 179, 188, 248, 310, 328, 362, 377, 379, 382, 383, 385, 387, 393, 409, 412, 421, 440, 468, 573, 574, 601, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 810, 827, 832, 835, 839, 842, 868, 869, 905, 1025, 1036, 1042, 1044, 1048, 1052, 1053], "clone_kernel": [614, 615, 1046], "clone_with_theta": [179, 421, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "cloned_classifi": 436, "close": [8, 47, 51, 55, 61, 62, 64, 73, 74, 80, 87, 93, 99, 109, 110, 113, 126, 138, 144, 147, 151, 155, 171, 172, 175, 176, 177, 178, 179, 187, 189, 199, 218, 220, 235, 241, 247, 251, 257, 263, 272, 273, 285, 286, 298, 299, 312, 321, 342, 346, 347, 354, 362, 374, 379, 381, 382, 383, 391, 393, 394, 409, 411, 414, 415, 418, 421, 453, 458, 475, 512, 513, 536, 567, 632, 647, 651, 665, 676, 678, 691, 709, 750, 801, 822, 823, 843, 844, 845, 847, 854, 935, 994, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1011, 1012, 1015, 1020, 1024, 1029, 1039, 1043, 1044, 1045], "close_pric": 51, "closer": [43, 72, 124, 126, 154, 169, 171, 188, 194, 218, 346, 355, 409, 411, 416, 452, 557, 632, 716, 850, 851, 856, 858, 859, 860, 1020, 1043], "closest": [64, 80, 97, 218, 381, 411, 443, 445, 446, 450, 451, 452, 462, 657, 783, 784, 838, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 996, 999, 1006, 1008], "closur": 55, "cloud": [78, 115, 120, 122, 184, 387, 416, 537, 545, 696, 1005, 1023, 1024, 1026], "cloudpickl": 1031, "clouldpickl": 405, "cls_info": 49, "cls_name": [47, 49], "cls_runtim": 47, "cls_stat": 47, "cls_valu": 49, "club": 376, "clue": [374, 387, 1002], "clump": 238, "clust": [98, 453, 460], "cluster": [2, 48, 53, 54, 56, 58, 61, 77, 78, 80, 83, 84, 86, 87, 90, 92, 94, 95, 102, 111, 127, 133, 137, 143, 151, 164, 179, 190, 211, 235, 237, 238, 239, 245, 251, 257, 258, 259, 260, 273, 298, 299, 301, 315, 322, 326, 331, 332, 333, 335, 344, 352, 353, 355, 361, 368, 372, 374, 376, 379, 381, 384, 391, 393, 406, 407, 412, 417, 419, 422, 425, 426, 429, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 491, 506, 507, 508, 515, 516, 517, 518, 519, 526, 534, 545, 548, 557, 568, 570, 593, 594, 595, 635, 695, 696, 699, 708, 709, 714, 718, 719, 721, 723, 729, 735, 740, 741, 759, 761, 782, 783, 790, 796, 797, 799, 801, 802, 860, 861, 869, 873, 880, 888, 944, 946, 965, 988, 995, 1002, 1004, 1008, 1011, 1013, 1015, 1018, 1022, 1024, 1025, 1026, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "cluster_1": 151, "cluster_2": 151, "cluster_al": [451, 464], "cluster_cent": [73, 94, 96, 97, 464], "cluster_center_indic": [443, 457], "cluster_centers_": [77, 78, 83, 91, 93, 94, 96, 97, 121, 325, 354, 443, 446, 450, 451, 452], "cluster_centers_indic": [73, 457], "cluster_centers_indices_": [73, 443], "cluster_data": 92, "cluster_doc": 57, "cluster_hierarchy_": [411, 453], "cluster_id": [190, 354], "cluster_id_to_feature_id": 190, "cluster_label": [89, 93], "cluster_method": 453, "cluster_optics_dbscan": [2, 98, 411], "cluster_optics_xi": 2, "cluster_qr": [80, 411, 455, 465, 1050], "cluster_s": 354, "cluster_selection_epsilon": 449, "cluster_selection_method": 449, "cluster_std": [63, 73, 79, 82, 88, 89, 90, 92, 93, 95, 96, 97, 226, 241, 260, 315, 344, 375, 516], "cluster_word": 57, "clusterer_": 89, "clustering_algorithm": [78, 79, 95], "clustering_metr": 91, "clustermixin": [2, 381, 1053], "clusters_std": 344, "clyde": 1041, "cl\u00e9ment": [1045, 1049, 1051], "cm": [43, 45, 50, 51, 53, 58, 59, 61, 66, 67, 68, 73, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 100, 111, 113, 121, 124, 127, 137, 143, 162, 167, 174, 175, 188, 198, 206, 223, 226, 227, 230, 235, 236, 237, 242, 245, 246, 250, 255, 265, 266, 267, 292, 295, 296, 298, 302, 305, 307, 309, 310, 312, 314, 323, 326, 331, 332, 336, 338, 339, 340, 342, 343, 344, 350, 351, 358, 376, 412, 701, 921, 1005, 1015, 1021], "cm2013": 411, "cm_bright": [67, 307, 314], "cm_displai": 242, "cm_piyg": 314, "cmap": [43, 44, 45, 50, 51, 53, 58, 59, 66, 67, 68, 70, 74, 75, 80, 81, 83, 84, 86, 87, 91, 111, 113, 121, 124, 127, 131, 137, 143, 162, 167, 174, 175, 188, 194, 198, 199, 205, 206, 223, 226, 227, 228, 230, 235, 236, 237, 245, 246, 250, 265, 267, 292, 296, 298, 300, 301, 303, 305, 307, 309, 310, 312, 314, 331, 332, 336, 338, 339, 340, 341, 342, 343, 344, 347, 350, 351, 358, 701], "cmap_bold": [300, 303], "cmap_cv": 267, "cmap_data": 267, "cmap_light": [300, 303], "cmcsa": 51, "cmd": 377, "cmu": 903, "cname": 77, "cnb": 1007, "cnp": 380, "cnx": 1044, "co": [2, 43, 51, 53, 56, 58, 74, 75, 102, 152, 154, 176, 184, 187, 215, 236, 272, 287, 325, 335, 353, 354, 355, 360, 383, 417, 419, 452, 454, 456, 491, 515, 595, 703, 723, 768, 799, 1000, 1015, 1026, 1029, 1030, 1031], "co2": [170, 178, 184, 421, 500, 615, 619, 626, 627, 629, 1026, 1043], "co2_data": 176, "co2_kernel": 176, "coars": [43, 143, 385, 451, 464], "coarser": [143, 147], "coast": [50, 305], "coastlin": [50, 169, 305, 376], "coca": 51, "cock": [155, 1045], "cockburn": 1038, "coclust": [57, 408, 454, 517], "cocoa": 1029, "code": [2, 30, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 373, 377, 378, 380, 382, 383, 388, 391, 393, 394, 397, 402, 405, 407, 410, 411, 418, 419, 445, 446, 450, 452, 462, 500, 530, 534, 535, 541, 542, 546, 547, 549, 550, 552, 570, 576, 585, 586, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 686, 687, 689, 690, 715, 836, 837, 838, 875, 882, 994, 1002, 1006, 1015, 1017, 1019, 1020, 1024, 1025, 1026, 1028, 1029, 1036, 1038, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "code_book_": 838, "code_init": [535, 549], "code_s": [289, 838, 1006], "codebas": [327, 362, 379, 380, 381, 419, 1036, 1042], "codebook": [289, 570, 838], "codecov": 387, "codeofconduct": 379, "coder": [130, 546, 720], "codevig": 1042, "coef": [49, 87, 130, 186, 187, 194, 199, 205, 206, 208, 213, 217, 218, 219, 223, 229, 230, 255, 285, 309, 327, 350, 528, 650, 651, 653, 656, 657, 663, 664, 665, 666, 667, 673, 676, 678, 684, 685, 686, 687, 688, 689, 690, 691, 1009], "coef0": [192, 346, 348, 455, 539, 643, 644, 647, 779, 781, 910, 911, 912, 913, 914, 1003, 1020], "coef_": [46, 49, 53, 87, 115, 165, 166, 169, 186, 187, 194, 197, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 213, 217, 218, 219, 223, 229, 230, 249, 255, 285, 286, 319, 325, 340, 347, 350, 353, 362, 374, 381, 393, 414, 420, 468, 485, 486, 487, 553, 597, 598, 601, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 908, 909, 910, 911, 912, 913, 914, 988, 999, 1001, 1019, 1020, 1036, 1038, 1041, 1043, 1048, 1050, 1053, 1054], "coef_agglomeration_": 87, "coef_en_lr": 205, "coef_i": 187, "coef_init": [650, 651, 656, 657, 664, 665, 666, 667, 670, 671, 672, 680, 681, 682, 685, 688], "coef_l": 202, "coef_l1_lr": 205, "coef_l2_lr": 205, "coef_lar": 202, "coef_lasso": 202, "coef_lasso_": 208, "coef_multi_task_lasso_": 208, "coef_p": 202, "coef_path": [657, 667, 688], "coef_path_": [654, 655, 658, 659, 1001], "coef_path_continu": [657, 667, 688], "coef_path_lar": [657, 667, 688], "coef_pl": 202, "coef_positive_lar": 202, "coef_ridg": 197, "coef_selection_": 87, "coeff": 684, "coeff_diff": 200, "coeffeci": 1045, "coeffici": [2, 25, 46, 49, 73, 82, 91, 93, 109, 110, 113, 121, 124, 160, 166, 171, 184, 185, 186, 193, 197, 199, 200, 202, 205, 207, 208, 209, 210, 211, 212, 216, 217, 229, 232, 255, 272, 286, 309, 319, 323, 324, 325, 346, 349, 353, 354, 355, 366, 375, 381, 393, 396, 413, 414, 416, 420, 421, 424, 434, 455, 468, 470, 476, 478, 479, 481, 482, 483, 484, 485, 486, 487, 500, 528, 530, 531, 535, 539, 541, 543, 546, 547, 552, 556, 558, 560, 562, 564, 566, 569, 572, 574, 586, 593, 597, 601, 613, 615, 618, 631, 639, 640, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 705, 707, 720, 723, 733, 738, 742, 747, 754, 757, 779, 781, 789, 790, 792, 796, 797, 800, 819, 831, 834, 841, 842, 851, 859, 866, 869, 881, 888, 908, 909, 910, 911, 912, 913, 914, 917, 919, 996, 999, 1001, 1019, 1020, 1026, 1036, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1053], "coefs_": [207, 309, 865, 866, 1009, 1041], "coefs_cf": 319, "coefs_enet": 202, "coefs_lar": 202, "coefs_lasso": 202, "coefs_no_cf": 319, "coefs_path": 663, "coefs_paths_": [663, 1046], "coefs_positive_enet": 202, "coefs_positive_lar": 202, "coefs_positive_lasso": 202, "coelho": [1037, 1039, 1040, 1044], "coelhudo": 1048, "cognit": [169, 376], "cohen": [2, 720, 1044], "cohen_kappa_scor": [2, 1005, 1041, 1043, 1055], "coher": 411, "cohort": 158, "coin": [51, 53, 55, 59, 71, 74, 75, 76, 79, 86, 87, 89, 95, 99, 100, 124, 184, 411, 419, 444, 465, 1017, 1026], "coincid": [175, 216, 421], "col": [52, 57, 62, 64, 73, 77, 82, 88, 92, 96, 97, 102, 105, 141, 156, 176, 234, 251, 350, 515, 517], "col_compl": 57, "col_idx": 59, "col_idx_shuffl": 58, "col_ind": [426, 454, 456], "col_indic": 150, "col_nam": 52, "col_split": 52, "cola": 51, "cold": 292, "cole": 1045, "coleman": [1037, 1038], "colgat": [51, 55], "colin": [45, 374, 1042], "collabor": 379, "collaps": [43, 188, 251, 312, 342, 391], "colleagu": 272, "collect": [2, 41, 46, 49, 51, 52, 57, 62, 105, 139, 150, 151, 158, 169, 176, 183, 190, 201, 207, 237, 244, 275, 279, 354, 355, 366, 374, 376, 383, 397, 415, 416, 418, 419, 449, 467, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 573, 574, 585, 587, 588, 592, 593, 594, 595, 636, 733, 734, 742, 782, 787, 788, 791, 806, 810, 811, 813, 827, 975, 978, 994, 1000, 1001, 1005, 1011, 1016, 1025, 1029, 1038, 1048], "colleg": [0, 186], "college_degre": 186, "collid": 419, "collin": 1039, "collinear": [187, 190, 219, 232, 418, 571, 652, 673, 684, 881, 1001, 1036, 1055], "collis": [354, 355, 419, 586, 593], "collot": [1050, 1051], "colombia": [50, 305, 374, 502], "colon": 379, "coloni": 374, "color": [43, 46, 47, 48, 49, 50, 51, 52, 58, 61, 62, 63, 64, 67, 69, 70, 73, 75, 77, 79, 80, 81, 82, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 109, 110, 111, 112, 113, 116, 118, 119, 121, 122, 123, 125, 127, 128, 129, 130, 135, 136, 141, 143, 144, 146, 149, 150, 151, 152, 153, 155, 157, 160, 162, 167, 171, 173, 174, 175, 176, 177, 178, 179, 180, 183, 187, 189, 190, 194, 195, 197, 198, 199, 201, 202, 203, 204, 206, 208, 210, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 228, 231, 232, 235, 236, 237, 239, 241, 245, 246, 247, 249, 252, 257, 258, 259, 260, 261, 262, 263, 266, 267, 271, 273, 275, 276, 277, 278, 279, 281, 282, 283, 285, 286, 291, 294, 297, 298, 299, 300, 303, 304, 305, 307, 312, 313, 314, 316, 317, 318, 322, 328, 333, 334, 336, 340, 341, 342, 343, 344, 346, 348, 349, 350, 358, 359, 374, 376, 387, 411, 419, 497, 498, 510, 587, 588, 1019, 1021, 1041, 1046, 1048, 1053], "color_continuous_scal": 273, "color_intens": 48, "color_it": [258, 262, 263], "color_map": 336, "color_palett": [72, 136, 150, 262], "colorbar": [43, 50, 66, 75, 121, 131, 151, 167, 172, 174, 175, 177, 188, 234, 245, 261, 283, 312, 342, 701, 1048], "colorbarbas": 312, "colorblind": [72, 136, 150], "coloring_matrix": [109, 110], "colormap": [121, 179, 342, 701, 1049], "colors_": 77, "colors_list": 141, "colour": [260, 376, 419, 591, 1006], "colt": [730, 760, 1005], "colton": 997, "columbia": 0, "column": [2, 43, 47, 52, 58, 59, 93, 101, 104, 107, 118, 142, 143, 144, 147, 150, 152, 155, 169, 176, 182, 184, 186, 187, 188, 189, 190, 203, 214, 215, 218, 222, 232, 243, 250, 251, 252, 255, 262, 266, 272, 273, 283, 284, 286, 291, 309, 317, 318, 319, 323, 324, 325, 326, 328, 329, 353, 354, 355, 366, 373, 374, 376, 379, 381, 385, 388, 391, 392, 393, 408, 411, 412, 414, 416, 418, 419, 420, 423, 426, 454, 456, 467, 469, 470, 474, 475, 481, 490, 491, 492, 493, 494, 496, 498, 500, 504, 505, 506, 508, 509, 512, 513, 514, 515, 517, 519, 530, 535, 538, 541, 545, 546, 552, 559, 561, 562, 565, 566, 568, 569, 570, 571, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 614, 631, 634, 636, 637, 638, 650, 652, 656, 662, 664, 666, 668, 669, 673, 684, 689, 690, 701, 717, 722, 723, 733, 734, 742, 758, 767, 772, 773, 774, 777, 787, 788, 791, 792, 804, 807, 808, 818, 829, 834, 839, 842, 843, 844, 845, 846, 847, 848, 849, 868, 872, 873, 874, 875, 881, 882, 883, 887, 888, 889, 890, 892, 893, 894, 898, 899, 908, 910, 913, 916, 918, 925, 930, 934, 935, 940, 952, 967, 980, 981, 983, 991, 994, 995, 997, 1001, 1003, 1005, 1006, 1013, 1015, 1020, 1025, 1026, 1036, 1038, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "column_labels_": [58, 59, 408, 454, 456], "column_nam": 232, "column_or_1d": [2, 388, 1047, 1051], "column_result": 273, "column_stack": [76, 307, 314], "column_to_drop": 187, "column_tran": [232, 412], "column_transform": 329, "columnar": [373, 467, 1024], "columns_": [57, 408, 426, 454, 456], "columns_to_drop": 266, "columntransform": [2, 43, 102, 103, 155, 187, 188, 189, 214, 232, 243, 251, 253, 255, 318, 322, 324, 325, 326, 328, 371, 373, 391, 392, 402, 469, 470, 633, 873, 994, 995, 1025, 1031, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "columntransformercolumntransform": [103, 155, 187, 189, 243, 253, 318, 322, 325], "columntransformerinot": [155, 188], "columnwis": 416, "com": [51, 102, 292, 353, 374, 377, 379, 383, 384, 385, 387, 391, 411, 445, 538, 545, 675, 709, 1043, 1046], "coma": 1029, "comaniciu": [96, 411, 451], "comapar": 411, "comb": 1050, "combat": [307, 416], "combin": [2, 19, 43, 51, 52, 58, 62, 64, 94, 102, 103, 105, 106, 107, 118, 121, 129, 130, 134, 144, 145, 149, 150, 158, 171, 177, 182, 183, 184, 187, 199, 214, 218, 231, 232, 238, 241, 243, 246, 268, 272, 273, 281, 283, 284, 301, 308, 318, 323, 324, 326, 345, 346, 355, 358, 366, 371, 375, 376, 379, 384, 392, 393, 407, 408, 409, 411, 412, 415, 416, 417, 418, 419, 420, 421, 423, 424, 448, 467, 469, 470, 476, 478, 479, 482, 483, 484, 492, 500, 512, 513, 519, 525, 528, 530, 535, 541, 542, 544, 546, 551, 553, 564, 566, 569, 571, 572, 614, 618, 620, 625, 628, 634, 638, 647, 650, 651, 656, 657, 662, 663, 664, 665, 666, 667, 670, 672, 676, 677, 678, 679, 680, 682, 683, 685, 688, 696, 705, 734, 792, 804, 807, 808, 815, 816, 829, 831, 835, 852, 867, 868, 869, 873, 881, 882, 883, 888, 908, 978, 994, 997, 998, 1001, 1005, 1006, 1008, 1011, 1015, 1018, 1019, 1021, 1022, 1026, 1029, 1036, 1041, 1044, 1047, 1048, 1049, 1051, 1052], "combinator": 814, "combined_featur": 106, "combsccod": 1050, "comcast": 51, "come": [82, 100, 102, 111, 116, 126, 169, 171, 246, 286, 321, 353, 354, 366, 368, 372, 376, 379, 380, 383, 387, 391, 393, 397, 405, 410, 411, 415, 418, 419, 442, 453, 459, 475, 554, 709, 799, 825, 910, 913, 957, 994, 995, 999, 1002, 1004, 1008, 1011, 1020, 1036, 1047, 1050, 1052], "comedi": 879, "comfort": [88, 418], "command": [245, 366, 367, 377, 379, 383, 385, 387, 397, 419, 512, 1024, 1038], "comment": [80, 353, 377, 378, 379, 380, 382, 383, 387, 490, 583, 1005], "commerc": 1029, "commerci": [415, 1029], "commit": [382, 383, 387, 1028, 1036, 1037, 1038, 1039], "committ": [379, 1036], "commod": 1005, "common": [2, 52, 54, 55, 57, 124, 166, 169, 184, 185, 186, 210, 218, 219, 267, 272, 279, 289, 323, 346, 353, 355, 361, 366, 373, 379, 381, 387, 389, 391, 392, 396, 397, 402, 408, 409, 411, 412, 415, 417, 420, 421, 450, 468, 470, 500, 594, 636, 657, 676, 677, 705, 750, 757, 773, 805, 806, 809, 819, 821, 822, 823, 824, 825, 831, 834, 869, 871, 879, 880, 881, 886, 888, 893, 894, 896, 897, 898, 899, 925, 927, 954, 957, 994, 995, 1001, 1008, 1011, 1015, 1020, 1021, 1024, 1025, 1026, 1029, 1031, 1036, 1044, 1046, 1047, 1051], "common_nod": 361, "common_node_id": 361, "common_param": [90, 147, 150, 188, 247, 274, 275, 346], "commonli": [214, 269, 285, 346, 372, 393, 411, 412, 421, 618, 762, 763, 801, 837, 880, 1002, 1003, 1005, 1006, 1008, 1052], "commun": [248, 372, 378, 384, 387, 393, 394, 411, 418, 542, 544, 551, 696, 714, 880, 995, 1002, 1008, 1015, 1019, 1024, 1028, 1029, 1044, 1045], "commut": [43, 52], "comp": [57, 115, 116, 124, 131, 310, 335, 353, 354, 355, 374], "comp_cov": [472, 473, 474, 475, 476, 477, 478, 479], "compact": [169, 192, 312, 366, 376, 848, 849, 1021, 1038], "compani": [214, 232, 410, 411, 1029], "companion": [379, 1015], "companioni": 1036, "compar": [43, 44, 48, 52, 57, 58, 61, 62, 64, 70, 71, 72, 74, 75, 76, 78, 81, 82, 85, 87, 88, 89, 90, 91, 97, 100, 103, 104, 105, 106, 111, 112, 114, 116, 124, 128, 130, 134, 135, 136, 138, 140, 143, 144, 145, 147, 149, 150, 151, 153, 155, 158, 161, 169, 175, 182, 183, 184, 187, 188, 189, 190, 193, 195, 197, 199, 201, 202, 203, 209, 211, 214, 215, 217, 218, 220, 222, 224, 228, 231, 232, 234, 235, 238, 240, 243, 246, 249, 251, 252, 254, 259, 260, 264, 267, 269, 270, 271, 273, 275, 277, 279, 281, 283, 284, 285, 287, 289, 292, 293, 294, 295, 297, 298, 299, 301, 302, 303, 304, 306, 309, 311, 313, 316, 317, 319, 323, 346, 353, 354, 355, 360, 361, 362, 368, 374, 376, 379, 381, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 420, 421, 443, 444, 445, 447, 448, 449, 451, 452, 453, 455, 461, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 493, 500, 506, 508, 516, 518, 526, 528, 532, 535, 541, 543, 545, 549, 550, 555, 556, 565, 566, 567, 568, 569, 635, 643, 648, 649, 657, 659, 661, 662, 667, 670, 672, 680, 681, 688, 699, 709, 716, 719, 735, 742, 747, 790, 802, 804, 809, 818, 831, 834, 841, 850, 854, 857, 861, 865, 866, 868, 869, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 888, 889, 893, 894, 895, 896, 897, 898, 899, 908, 909, 910, 912, 913, 994, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1015, 1016, 1019, 1020, 1021, 1023, 1024, 1026, 1036, 1038, 1043, 1044, 1049], "comparison": [47, 51, 53, 57, 60, 61, 62, 63, 65, 69, 71, 73, 75, 77, 83, 90, 91, 92, 93, 94, 96, 102, 110, 118, 120, 122, 123, 125, 127, 131, 135, 138, 141, 147, 150, 153, 157, 158, 163, 170, 176, 177, 178, 180, 184, 189, 197, 199, 200, 201, 202, 205, 212, 214, 218, 229, 232, 233, 236, 237, 238, 239, 240, 244, 245, 259, 264, 266, 267, 268, 269, 276, 284, 286, 291, 301, 307, 314, 316, 317, 321, 323, 336, 339, 348, 352, 353, 354, 362, 374, 376, 393, 409, 411, 413, 414, 416, 420, 421, 440, 441, 446, 448, 449, 450, 452, 485, 486, 487, 491, 508, 516, 518, 519, 526, 529, 539, 545, 553, 554, 557, 568, 569, 585, 586, 592, 593, 594, 595, 610, 612, 614, 615, 619, 626, 629, 635, 643, 647, 663, 676, 692, 693, 694, 695, 696, 708, 742, 747, 783, 792, 804, 805, 806, 807, 809, 810, 818, 820, 821, 822, 823, 824, 825, 834, 843, 846, 850, 865, 866, 869, 881, 882, 886, 888, 889, 893, 894, 895, 896, 897, 898, 899, 908, 910, 911, 913, 914, 916, 994, 998, 999, 1002, 1005, 1007, 1008, 1011, 1020, 1026, 1033], "compat": [248, 275, 292, 322, 373, 382, 388, 389, 391, 393, 397, 402, 405, 419, 466, 472, 512, 570, 581, 593, 607, 618, 619, 622, 623, 624, 626, 627, 636, 637, 638, 662, 663, 677, 679, 778, 782, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 852, 853, 868, 873, 881, 882, 920, 921, 927, 930, 946, 947, 967, 1002, 1008, 1010, 1024, 1025, 1029, 1031, 1036, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "compens": [112, 186, 188, 192, 214, 232, 273, 413, 416], "compet": [43, 187], "competit": [43, 147, 353, 418, 648, 1008], "compil": [155, 292, 355, 366, 367, 380, 381, 382, 387, 388, 391, 1024, 1036], "compl": 91, "complain": 1054, "complement": [2, 188, 282, 353, 636, 637, 806, 821, 824, 834, 843, 844, 845, 846, 847, 1012, 1027, 1031, 1044], "complementari": [43, 419], "complementnb": [2, 273, 353, 843, 844, 846, 847, 1007, 1044, 1048, 1049, 1051], "complementnbcomplementnb": 273, "complet": [0, 2, 43, 72, 73, 74, 79, 82, 85, 91, 95, 116, 150, 153, 164, 166, 169, 184, 189, 190, 220, 240, 241, 248, 251, 266, 270, 317, 319, 321, 354, 362, 374, 379, 383, 384, 387, 391, 412, 415, 416, 418, 419, 444, 448, 452, 455, 465, 466, 467, 470, 499, 540, 541, 542, 543, 548, 550, 562, 573, 574, 585, 591, 592, 593, 595, 631, 632, 633, 634, 649, 653, 661, 675, 677, 708, 709, 719, 720, 721, 733, 735, 740, 741, 761, 790, 799, 836, 839, 842, 851, 867, 868, 869, 870, 937, 989, 999, 1001, 1005, 1006, 1008, 1020, 1021, 1024, 1026, 1036, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "completed_fac": 250, "completeness_scor": [2, 73, 82, 91, 322, 354, 411, 740, 741, 799, 1005], "complex": [42, 48, 49, 54, 58, 104, 141, 155, 168, 171, 176, 182, 184, 218, 228, 231, 240, 247, 248, 251, 264, 270, 273, 276, 281, 313, 321, 324, 325, 329, 330, 342, 346, 355, 356, 361, 375, 379, 384, 391, 411, 412, 416, 418, 422, 443, 447, 450, 451, 453, 470, 492, 504, 505, 506, 518, 538, 545, 555, 561, 562, 563, 564, 566, 568, 569, 608, 634, 642, 660, 662, 680, 681, 738, 754, 804, 834, 836, 864, 868, 869, 873, 881, 888, 904, 908, 911, 914, 916, 917, 918, 919, 994, 995, 997, 998, 1000, 1002, 1004, 1006, 1011, 1015, 1018, 1025, 1026, 1027, 1029, 1031, 1037, 1039, 1045, 1046, 1049], "complexity_comput": [46, 49], "complexity_label": [46, 49], "compli": [379, 393, 946, 1025], "complianc": [0, 150], "compliant": [326, 379, 1054, 1055], "complic": [64, 248, 307, 385, 421, 698, 1008], "compon": [2, 11, 43, 44, 55, 79, 91, 95, 102, 105, 114, 115, 118, 122, 123, 125, 126, 127, 128, 129, 131, 153, 161, 176, 184, 186, 199, 234, 245, 246, 249, 257, 258, 261, 262, 263, 271, 273, 292, 293, 294, 295, 303, 304, 310, 317, 323, 366, 371, 374, 379, 381, 385, 388, 405, 407, 411, 412, 414, 419, 421, 423, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 465, 466, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 506, 508, 519, 525, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 699, 801, 802, 803, 804, 807, 808, 818, 826, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 951, 952, 997, 1002, 1004, 1015, 1017, 1020, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1036, 1038, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "component_1": 262, "component_2": 262, "component_indices_": [643, 1049], "components_": [45, 54, 91, 116, 121, 123, 124, 131, 245, 246, 310, 317, 325, 393, 412, 416, 447, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 547, 548, 643, 857, 864, 900, 901, 997, 1017, 1040, 1042, 1048, 1051, 1054], "components_col": 105, "compos": [2, 43, 44, 62, 101, 102, 103, 107, 116, 137, 144, 155, 184, 187, 188, 189, 214, 216, 232, 243, 251, 253, 255, 286, 289, 318, 322, 324, 325, 326, 328, 329, 392, 402, 411, 412, 415, 467, 468, 469, 470, 519, 557, 616, 1004, 1006, 1026, 1036], "composit": [7, 35, 243, 322, 371, 415, 662, 792, 995, 1001, 1014, 1031, 1037], "compound": [43, 232, 419, 614, 616, 684, 728, 756, 1001], "compoundkernel": [2, 614, 1050], "comprehens": [346, 387, 419, 762, 763, 1003, 1029, 1044], "compress": [42, 50, 55, 99, 184, 289, 312, 374, 405, 411, 416, 419, 420, 656, 676, 696, 838, 881, 975, 978, 990, 1001, 1006, 1015, 1026, 1036, 1045], "compressed_raccoon_kmean": 86, "compressed_raccoon_uniform": 86, "compris": [102, 147, 270, 353, 354, 355, 374, 391, 416, 418, 519, 811, 1002], "compromis": [48, 64, 188, 366, 379, 651, 683, 1008, 1039], "comput": [0, 2, 27, 43, 45, 46, 50, 52, 53, 58, 63, 72, 74, 76, 77, 80, 85, 87, 90, 91, 93, 94, 102, 104, 110, 111, 112, 113, 122, 130, 138, 142, 145, 146, 147, 148, 149, 150, 168, 169, 171, 176, 178, 179, 182, 187, 188, 189, 190, 192, 195, 196, 199, 200, 201, 202, 203, 214, 216, 218, 222, 228, 231, 232, 235, 238, 242, 244, 245, 247, 251, 252, 254, 266, 268, 270, 272, 273, 274, 275, 279, 281, 283, 292, 294, 296, 298, 299, 301, 302, 305, 312, 321, 325, 326, 329, 332, 334, 342, 346, 349, 353, 354, 355, 361, 367, 368, 373, 374, 376, 379, 384, 385, 386, 388, 391, 392, 393, 396, 397, 405, 406, 407, 408, 409, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 460, 462, 464, 465, 466, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 520, 535, 536, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 586, 589, 590, 593, 594, 595, 597, 598, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 729, 730, 731, 733, 734, 735, 738, 740, 742, 743, 744, 747, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 796, 797, 798, 800, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 864, 865, 866, 873, 874, 877, 878, 883, 884, 885, 886, 887, 888, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 910, 913, 915, 916, 917, 918, 919, 949, 950, 951, 952, 969, 970, 977, 979, 985, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "computation": [37, 53, 109, 121, 141, 146, 155, 171, 292, 346, 353, 365, 380, 391, 411, 412, 415, 416, 418, 421, 542, 636, 637, 675, 767, 804, 806, 807, 808, 818, 831, 1001, 1002, 1004, 1012, 1013, 1017, 1031, 1040], "compute_class_weight": [2, 393, 1039, 1050], "compute_corrected_ttest": 272, "compute_dist": [444, 448, 1048], "compute_full_tre": [444, 448, 1040], "compute_import": 1038, "compute_inverse_compon": [900, 901, 1017], "compute_inverse_transform": 1050, "compute_label": [445, 452], "compute_node_depth": 361, "compute_optics_graph": [2, 458, 459, 1053], "compute_sample_weight": [2, 1050], "compute_scor": [107, 128, 194, 195, 648, 649, 1045], "compute_sourc": 423, "computed_scor": 649, "con": [405, 593, 1004], "concat": [43, 182, 186, 203, 232, 881], "concaten": [2, 63, 70, 74, 83, 94, 101, 104, 112, 137, 151, 165, 179, 184, 194, 197, 206, 228, 229, 235, 241, 257, 261, 262, 268, 277, 279, 280, 281, 282, 297, 310, 316, 319, 332, 341, 345, 353, 412, 467, 470, 508, 513, 535, 541, 545, 546, 603, 785, 804, 867, 868, 870, 873, 881, 913, 1006, 1026, 1037], "concav": [169, 329, 376], "concentr": [46, 48, 98, 119, 126, 135, 153, 176, 183, 184, 239, 256, 258, 263, 283, 302, 314, 333, 375, 379, 418, 446, 523, 801, 1004, 1011, 1026], "concentrations_prior": 257, "concept": [2, 112, 141, 145, 248, 281, 391, 411, 417, 419, 997, 1005, 1008, 1021, 1029], "conceptu": [376, 418, 1003], "concern": [37, 56, 71, 108, 114, 117, 120, 132, 134, 163, 170, 181, 184, 191, 193, 233, 256, 262, 266, 288, 290, 293, 306, 311, 330, 337, 352, 356, 366, 381, 405, 1002, 1017], "concis": [64, 214, 379, 384, 1047, 1049], "conclud": [135, 187, 195, 232, 272, 355, 362, 394, 868], "conclus": [43, 126, 187, 189, 214, 216, 272, 274, 362, 418], "concomit": [653, 1001], "concret": [218, 380, 394, 410, 420, 678, 679, 900, 901, 1001, 1019, 1024], "concurr": [393, 419, 970, 1048, 1050], "conda": [321, 322, 323, 324, 325, 326, 327, 328, 329, 367, 379, 380, 382, 383, 385, 387, 397, 398, 404, 405, 1021], "conda_prefix": 385, "condarc": 377, "condens": [192, 449], "condit": [2, 43, 51, 52, 62, 64, 113, 147, 184, 185, 187, 203, 216, 219, 232, 248, 252, 275, 324, 361, 385, 391, 396, 407, 408, 409, 410, 411, 413, 416, 418, 420, 454, 467, 474, 475, 476, 481, 500, 517, 527, 528, 540, 543, 544, 545, 547, 549, 551, 553, 554, 566, 631, 636, 637, 647, 654, 655, 656, 658, 659, 660, 674, 676, 677, 678, 679, 686, 687, 691, 701, 716, 721, 722, 740, 741, 799, 843, 844, 845, 846, 847, 866, 869, 872, 881, 882, 885, 889, 952, 976, 999, 1001, 1002, 1003, 1005, 1007, 1008, 1010, 1015, 1021, 1026, 1031, 1037, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1054], "condition": [51, 64, 214, 409, 413, 762, 999], "condition2": 155, "conduct": [186, 272, 421, 1028, 1050], "conf": [46, 64, 383, 409, 415, 843, 1007, 1050], "confer": [266, 272, 374, 411, 416, 422, 442, 447, 453, 515, 539, 567, 700, 712, 730, 760, 864, 865, 866, 1005, 1011, 1017, 1021], "confid": [52, 61, 62, 63, 64, 150, 176, 178, 258, 272, 275, 334, 394, 409, 421, 640, 662, 663, 670, 672, 675, 678, 679, 680, 702, 706, 711, 724, 730, 731, 743, 744, 760, 793, 836, 875, 908, 910, 913, 1001, 1004, 1005, 1006, 1011, 1018, 1019, 1020, 1029, 1046], "config": [52, 367, 377, 379, 380, 387, 630, 1044], "config_context": [2, 255, 366, 367, 407, 630, 906, 1043, 1049, 1052], "configur": [2, 3, 46, 49, 64, 103, 104, 188, 248, 253, 255, 286, 319, 353, 365, 377, 379, 381, 385, 387, 391, 393, 397, 402, 407, 412, 419, 420, 435, 445, 446, 448, 450, 452, 455, 465, 467, 471, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 570, 571, 572, 573, 574, 585, 586, 587, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 630, 631, 632, 633, 634, 636, 639, 642, 643, 644, 645, 646, 692, 693, 694, 695, 696, 698, 699, 792, 804, 818, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 906, 970, 971, 1002, 1005, 1015, 1020, 1024, 1031, 1040, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053], "confirm": [43, 52, 116, 138, 144, 147, 150, 189, 214, 216, 266, 275, 278, 281, 317, 355, 383, 994, 1015, 1044], "conflict": [377, 379, 383, 387, 397, 1043, 1044], "conform": [52, 379, 585, 632, 836, 837, 1005, 1024, 1025, 1043, 1049], "confound": [186, 187], "confus": [2, 68, 184, 242, 264, 266, 281, 331, 332, 353, 393, 471, 508, 635, 656, 701, 717, 719, 722, 733, 734, 742, 758, 788, 791, 834, 906, 913, 1026, 1036, 1037, 1041, 1045, 1046, 1048, 1049, 1050, 1051], "confusingli": 377, "confusion_matrix": [2, 68, 242, 265, 266, 329, 331, 332, 701, 717, 758, 803, 831, 1005, 1037, 1042, 1043, 1046, 1047, 1049, 1053], "confusion_matrix_scor": 1005, "confusionmatrixdisplai": [2, 45, 68, 265, 324, 329, 331, 353, 635, 722, 1005, 1046, 1047, 1049, 1050, 1051], "congruenc": [658, 659, 660, 686, 687], "conjug": [272, 455, 465, 676, 678, 691, 699, 1001], "conjunct": [402, 411, 598, 810, 826, 827, 829, 830, 831, 832, 835, 971, 995, 1001, 1051], "connect": [2, 51, 74, 79, 81, 84, 87, 95, 99, 100, 377, 379, 388, 393, 413, 444, 448, 455, 465, 466, 589, 590, 699, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 1003, 1008, 1010, 1018, 1028, 1040, 1049, 1053], "connected_compon": 1043, "connectionist": [865, 866], "conner": 1049, "connor": [1044, 1049, 1053, 1054], "connossor": [1044, 1045], "conocophillip": 51, "conort": 1029, "conquer": 952, "conrad": [1036, 1037, 1051, 1054], "conroi": 1051, "consecut": [135, 145, 215, 391, 409, 415, 419, 446, 450, 452, 453, 455, 459, 462, 465, 541, 542, 543, 550, 606, 649, 670, 671, 672, 680, 681, 682, 801, 802, 809, 843, 844, 845, 846, 847, 865, 866, 994, 1015, 1044], "consensu": [2, 58, 59, 72, 378, 379, 394, 408, 411, 653, 675, 682, 683, 723, 1005], "consensus_scor": [2, 58, 59, 408, 1038], "consequ": [90, 128, 232, 272, 273, 312, 339, 362, 409, 410, 416, 418, 565, 566, 570, 659, 660, 995, 1001, 1005, 1013, 1021, 1045, 1047, 1052, 1054], "conserv": [50, 393, 586, 593, 900, 901, 1004, 1017], "consid": [0, 43, 51, 52, 53, 58, 62, 74, 88, 99, 103, 112, 118, 121, 125, 144, 147, 164, 168, 169, 183, 188, 214, 216, 248, 266, 272, 275, 279, 283, 286, 292, 295, 298, 299, 312, 323, 329, 339, 346, 347, 349, 353, 362, 366, 367, 368, 371, 378, 379, 381, 385, 387, 391, 393, 394, 402, 405, 407, 410, 411, 416, 417, 418, 419, 420, 421, 422, 423, 441, 447, 449, 453, 460, 477, 512, 513, 525, 537, 545, 553, 554, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 589, 590, 592, 593, 595, 597, 611, 612, 624, 635, 636, 637, 650, 656, 662, 663, 664, 666, 675, 683, 692, 693, 694, 696, 697, 698, 700, 704, 706, 709, 711, 713, 719, 730, 734, 738, 760, 790, 792, 798, 850, 851, 852, 854, 856, 858, 859, 860, 863, 865, 866, 871, 881, 882, 889, 903, 904, 913, 914, 916, 917, 918, 919, 929, 988, 994, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1025, 1039, 1040, 1044, 1048, 1049, 1051, 1052, 1053], "consider": [149, 150, 172, 175, 251, 267, 273, 279, 374, 379, 410, 421, 623, 804, 818, 826, 994, 1001, 1007, 1011, 1019, 1029, 1053], "consist": [2, 43, 46, 63, 68, 72, 89, 90, 102, 111, 118, 119, 121, 141, 144, 150, 151, 158, 169, 174, 176, 179, 183, 190, 214, 232, 247, 251, 278, 281, 309, 317, 321, 324, 349, 354, 362, 366, 372, 374, 376, 379, 385, 386, 387, 388, 392, 393, 394, 409, 411, 413, 417, 418, 419, 429, 430, 433, 434, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 493, 501, 535, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 595, 615, 631, 632, 633, 634, 639, 642, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 678, 681, 682, 683, 691, 692, 693, 694, 695, 704, 739, 801, 802, 811, 836, 837, 838, 840, 841, 842, 843, 851, 852, 854, 856, 859, 860, 866, 871, 872, 873, 875, 879, 880, 883, 884, 886, 887, 889, 900, 901, 904, 908, 909, 911, 912, 914, 917, 919, 925, 934, 936, 959, 975, 978, 993, 994, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1015, 1018, 1020, 1021, 1023, 1025, 1029, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "consol": [143, 377], "consolid": [0, 393, 394, 1036], "consolidate_scor": 52, "consortium": [0, 1029], "constant": [2, 43, 130, 138, 150, 174, 177, 178, 183, 187, 201, 215, 216, 218, 232, 243, 248, 253, 275, 304, 308, 310, 313, 315, 322, 349, 351, 362, 371, 381, 388, 393, 408, 418, 421, 434, 449, 468, 485, 486, 487, 515, 517, 538, 542, 544, 551, 553, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 594, 610, 613, 615, 617, 631, 634, 636, 637, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 680, 681, 682, 683, 684, 691, 693, 697, 699, 725, 727, 728, 732, 736, 779, 781, 789, 803, 826, 841, 842, 851, 859, 865, 866, 873, 884, 887, 896, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 997, 999, 1001, 1002, 1005, 1007, 1008, 1015, 1019, 1021, 1031, 1039, 1044, 1046, 1048, 1049, 1050, 1052, 1054], "constant_": 556, "constant_valu": [421, 617, 621], "constant_value_bound": [421, 615, 617, 621], "constantini": 1052, "constantkernel": [2, 174, 180, 421, 615, 621, 625, 628], "constantli": [72, 214, 1029], "constitu": 376, "constitut": [83, 393, 415, 418, 453, 459, 592, 593, 595, 1009], "constrain": [25, 81, 121, 144, 150, 152, 188, 205, 285, 307, 322, 328, 340, 342, 372, 393, 411, 416, 418, 513, 565, 566, 639, 662, 663, 694, 698, 826, 833, 1001, 1004, 1040], "constrained_layout": [121, 188, 234, 318, 319, 326], "constraint": [88, 90, 100, 121, 134, 184, 202, 209, 218, 251, 252, 267, 308, 309, 310, 322, 379, 391, 416, 419, 490, 512, 513, 561, 562, 563, 564, 565, 566, 568, 569, 636, 639, 822, 823, 916, 917, 918, 919, 973, 994, 996, 1001, 1002, 1019, 1026, 1040, 1043, 1044, 1047, 1049, 1051, 1053], "constru": 419, "construct": [2, 43, 50, 102, 104, 135, 137, 139, 155, 169, 232, 242, 248, 253, 255, 305, 313, 315, 322, 325, 373, 376, 381, 388, 393, 411, 412, 415, 416, 418, 419, 422, 436, 444, 445, 447, 448, 453, 455, 460, 466, 468, 470, 523, 539, 545, 548, 559, 560, 585, 591, 643, 692, 694, 695, 818, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 867, 868, 869, 870, 872, 913, 933, 935, 951, 952, 963, 967, 994, 995, 997, 1001, 1002, 1005, 1006, 1008, 1015, 1018, 1020, 1021, 1025, 1041, 1043, 1044, 1047, 1050], "construct_grid": [50, 305], "constructor": [30, 31, 104, 244, 367, 381, 393, 412, 419, 467, 470, 553, 554, 559, 571, 572, 573, 574, 585, 586, 592, 593, 601, 672, 680, 681, 803, 804, 818, 850, 851, 852, 854, 856, 858, 859, 860, 867, 868, 869, 870, 994, 1006, 1015, 1020, 1025, 1036, 1037, 1039, 1040, 1041, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "consult": 1005, "consum": [2, 121, 362, 373, 381, 393, 402, 411, 415, 418, 452, 807, 808, 868, 869, 960, 961, 970, 1001, 1029, 1041, 1053], "consumpt": [47, 366, 393, 411, 538, 561, 562, 568, 569, 804, 818, 829, 830, 831, 916, 917, 918, 919, 970, 1036, 1038, 1042, 1044, 1045, 1050], "contact": [391, 1024], "contain": [2, 49, 57, 61, 64, 69, 75, 82, 89, 91, 102, 103, 137, 139, 150, 151, 177, 187, 188, 190, 192, 205, 218, 232, 241, 248, 251, 252, 255, 262, 266, 270, 272, 278, 281, 282, 285, 291, 298, 299, 301, 312, 324, 332, 335, 353, 354, 372, 373, 374, 376, 379, 381, 383, 384, 385, 386, 387, 388, 391, 393, 405, 407, 409, 411, 412, 414, 415, 416, 418, 419, 420, 421, 423, 425, 435, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 500, 504, 506, 507, 508, 512, 513, 514, 518, 519, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 690, 692, 693, 694, 695, 696, 700, 701, 702, 704, 705, 706, 713, 716, 720, 739, 740, 741, 776, 783, 784, 792, 798, 801, 802, 803, 804, 807, 808, 810, 818, 822, 823, 826, 827, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 930, 933, 934, 935, 955, 956, 959, 960, 967, 970, 971, 973, 994, 995, 997, 1003, 1006, 1009, 1011, 1013, 1015, 1016, 1018, 1021, 1024, 1028, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "container": 405, "container_fold": 507, "container_path": 507, "contamin": [48, 111, 112, 241, 251, 298, 299, 472, 567, 854, 1011, 1044, 1052, 1053], "content": [2, 7, 55, 317, 353, 355, 374, 379, 383, 385, 405, 419, 489, 507, 512, 513, 592, 593, 595, 675, 922, 1014, 1029, 1037, 1046], "context": [2, 91, 255, 266, 285, 292, 329, 366, 367, 373, 378, 380, 392, 393, 411, 412, 417, 418, 419, 421, 422, 440, 447, 449, 451, 453, 455, 460, 461, 464, 467, 470, 471, 475, 535, 539, 540, 541, 543, 546, 547, 548, 549, 550, 552, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 598, 606, 611, 612, 614, 630, 631, 634, 636, 638, 643, 651, 655, 657, 659, 661, 662, 663, 665, 667, 669, 670, 672, 680, 683, 692, 693, 694, 695, 696, 697, 698, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 854, 856, 858, 859, 861, 862, 867, 870, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 995, 1001, 1005, 1011, 1015, 1019, 1025, 1028, 1029, 1036, 1043, 1044, 1049, 1052], "contigu": [43, 59, 381, 391, 408, 415, 419, 446, 450, 452, 462, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 785, 823, 848, 849, 908, 910, 911, 912, 913, 914, 1020, 1039, 1046, 1050, 1054], "contin": [417, 718, 1015], "conting": [2, 718, 719, 735, 759, 1042], "contingency_matrix": [2, 411, 759, 1044], "continu": [0, 2, 52, 55, 57, 77, 119, 144, 171, 184, 188, 195, 215, 222, 232, 235, 238, 251, 252, 254, 258, 262, 263, 309, 311, 317, 318, 323, 324, 361, 367, 374, 377, 381, 382, 383, 384, 387, 391, 393, 394, 397, 411, 416, 418, 471, 496, 596, 599, 600, 603, 604, 611, 612, 613, 636, 650, 651, 656, 657, 661, 664, 665, 666, 667, 730, 760, 816, 818, 871, 873, 875, 877, 878, 887, 888, 889, 905, 906, 917, 967, 994, 1001, 1002, 1005, 1006, 1008, 1009, 1015, 1021, 1025, 1026, 1029, 1033, 1036, 1038, 1039, 1044, 1049, 1050, 1051, 1053, 1055], "continuous_featur": 384, "contour": [48, 50, 70, 80, 81, 111, 143, 162, 169, 174, 175, 177, 225, 226, 227, 228, 241, 246, 261, 298, 305, 340, 341, 343, 344, 346, 347, 376, 386, 635, 636, 1011, 1019], "contour_kw": 636, "contourf": [50, 143, 228, 246, 298, 305, 307, 314, 315, 336, 341, 347, 351, 635, 636], "contours_": [386, 636], "contract": [214, 232, 346, 367, 393, 1025], "contradict": [190, 1025], "contrari": [43, 53, 187, 235, 239, 251, 257, 275, 312, 353, 373, 411, 500, 548, 610, 806, 821, 889, 1001, 1007, 1011], "contrast": [129, 188, 216, 247, 251, 272, 274, 301, 317, 354, 393, 409, 411, 414, 418, 421, 452, 455, 465, 623, 647, 818, 864, 995, 998, 1000, 1001, 1005, 1008, 1010, 1013, 1015, 1018, 1019, 1021, 1046], "contrib": [327, 379, 381, 387, 391, 393, 411, 449, 1024, 1025, 1052], "contribut": [0, 53, 58, 148, 176, 199, 218, 281, 317, 376, 377, 381, 382, 383, 387, 393, 394, 397, 416, 417, 418, 450, 452, 557, 558, 563, 564, 730, 733, 760, 999, 1005, 1008, 1013, 1020, 1024, 1025, 1028, 1029, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "contributor": [367, 382, 383, 384, 387, 391, 393, 1005, 1025, 1037, 1038, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "control": [37, 51, 70, 94, 125, 126, 141, 160, 176, 178, 199, 215, 218, 222, 244, 245, 273, 275, 289, 294, 310, 322, 324, 346, 357, 359, 360, 366, 367, 372, 375, 379, 381, 384, 387, 391, 393, 397, 410, 411, 414, 415, 416, 417, 420, 421, 436, 443, 452, 457, 474, 475, 481, 535, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 597, 598, 600, 618, 623, 629, 631, 636, 638, 643, 645, 646, 650, 651, 653, 654, 655, 656, 658, 659, 660, 676, 678, 680, 681, 686, 687, 691, 696, 705, 713, 801, 802, 804, 806, 807, 808, 809, 810, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 834, 835, 838, 839, 842, 865, 866, 887, 889, 900, 901, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 922, 970, 991, 994, 1001, 1002, 1004, 1005, 1006, 1008, 1011, 1012, 1015, 1017, 1019, 1020, 1021, 1024, 1025, 1027, 1031, 1036, 1038, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1055], "convei": [67, 239, 314], "conveni": [52, 88, 218, 251, 371, 387, 391, 412, 415, 419, 421, 426, 446, 450, 452, 454, 456, 467, 492, 615, 680, 682, 703, 732, 789, 867, 868, 978, 995, 997, 1001, 1002, 1012, 1029, 1036], "convent": [2, 133, 150, 266, 272, 379, 381, 382, 383, 385, 393, 407, 429, 430, 433, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 472, 473, 474, 475, 476, 477, 478, 479, 512, 513, 535, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 551, 567, 570, 573, 574, 585, 586, 587, 592, 593, 595, 631, 632, 633, 634, 681, 692, 693, 694, 695, 722, 801, 802, 836, 837, 852, 854, 856, 860, 872, 880, 883, 884, 886, 889, 900, 901, 912, 946, 947, 1005, 1036, 1043, 1044, 1047, 1049, 1050, 1052, 1053], "convention": [340, 393, 904], "converg": [2, 55, 90, 94, 109, 110, 145, 147, 150, 171, 177, 207, 216, 222, 230, 258, 260, 308, 309, 312, 317, 332, 368, 388, 393, 408, 411, 416, 419, 421, 423, 443, 446, 449, 450, 451, 452, 455, 457, 462, 463, 464, 465, 474, 475, 481, 485, 486, 487, 537, 539, 540, 541, 542, 543, 550, 575, 614, 648, 649, 650, 651, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 672, 676, 678, 680, 682, 686, 687, 691, 692, 694, 695, 698, 699, 801, 802, 857, 865, 866, 903, 904, 910, 995, 1000, 1001, 1002, 1004, 1009, 1019, 1036, 1039, 1040, 1041, 1043, 1044, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "converged_": [801, 802, 1054], "convergence_it": [443, 457], "convergencewarn": [2, 175, 177, 179, 222, 229, 258, 308, 309, 314, 388, 393, 801, 802, 1044, 1045, 1048], "convers": [2, 55, 147, 205, 353, 362, 368, 373, 379, 381, 387, 391, 393, 405, 419, 576, 863, 872, 880, 934, 935, 990, 1002, 1025, 1029, 1044, 1045, 1046, 1049, 1052], "convert": [2, 55, 70, 80, 99, 103, 124, 176, 190, 214, 234, 251, 254, 258, 259, 262, 263, 286, 305, 329, 361, 366, 373, 374, 388, 391, 393, 405, 419, 443, 446, 447, 450, 452, 453, 454, 455, 462, 467, 468, 500, 538, 545, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 585, 586, 592, 593, 594, 595, 597, 598, 610, 631, 632, 633, 634, 650, 656, 662, 663, 664, 666, 670, 671, 672, 674, 678, 680, 681, 682, 696, 750, 782, 803, 826, 863, 872, 873, 875, 879, 881, 882, 883, 885, 908, 916, 917, 918, 919, 932, 934, 935, 959, 989, 990, 994, 1001, 1002, 1003, 1005, 1015, 1016, 1020, 1021, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1051, 1052, 1053, 1054], "convex": [130, 146, 147, 184, 193, 221, 234, 350, 354, 411, 413, 416, 424, 449, 455, 465, 476, 478, 479, 482, 483, 484, 662, 680, 696, 1001, 1002, 1008, 1009, 1019, 1026, 1049], "convinc": 187, "convolut": [45, 179], "convolv": 310, "coo": [393, 557, 558, 696, 875, 930, 934, 935, 1008, 1037, 1053], "coo_matrix": [53, 200, 455, 589, 590, 975, 978], "cook": [376, 498, 1036, 1042], "cookbook": [421, 626, 627], "cool": [419, 1036], "coolwarm": [267, 339], "cooman": 376, "coord": [589, 1006], "coordin": [2, 50, 51, 53, 87, 126, 154, 175, 202, 234, 273, 305, 366, 374, 416, 421, 446, 450, 451, 452, 464, 474, 475, 481, 535, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 554, 589, 618, 650, 651, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 685, 686, 687, 688, 692, 693, 694, 697, 698, 710, 768, 773, 908, 1001, 1002, 1020, 1036, 1039, 1040, 1041, 1045, 1047, 1049, 1050, 1051], "cop": 51, "cope": [241, 368, 374, 1001], "copeland": [1044, 1045], "copi": [44, 51, 55, 79, 95, 107, 124, 138, 150, 169, 182, 183, 187, 188, 189, 200, 207, 220, 230, 232, 235, 248, 292, 331, 332, 334, 336, 354, 358, 367, 376, 379, 381, 383, 384, 385, 391, 393, 436, 440, 443, 445, 446, 447, 449, 450, 452, 457, 462, 485, 486, 487, 488, 504, 506, 514, 536, 537, 538, 539, 545, 552, 557, 558, 563, 565, 566, 576, 594, 601, 611, 612, 614, 615, 632, 634, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 675, 676, 678, 683, 685, 688, 689, 690, 736, 773, 796, 804, 818, 848, 849, 863, 871, 874, 877, 878, 879, 880, 884, 885, 886, 888, 891, 893, 894, 895, 896, 897, 898, 899, 903, 904, 908, 910, 911, 912, 913, 914, 923, 932, 934, 935, 963, 975, 977, 978, 1015, 1020, 1021, 1025, 1036, 1039, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "copy_": 1036, "copy_cov": 552, "copy_gram": [686, 687, 690], "copy_x": [446, 450, 462, 539, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 676, 678, 683, 685, 686, 687, 688, 689, 1038, 1044, 1045, 1055], "copy_x_train": [614, 615], "copy_xi": 690, "copybutton": [379, 397, 404], "copyright": [0, 55], "corani": 272, "cordier": 1043, "core": [42, 49, 82, 88, 98, 103, 135, 141, 143, 184, 187, 188, 266, 326, 365, 367, 379, 382, 387, 393, 397, 405, 411, 416, 418, 419, 422, 447, 449, 452, 453, 458, 460, 500, 503, 542, 593, 598, 662, 663, 670, 672, 680, 843, 844, 845, 846, 847, 852, 860, 1001, 1008, 1011, 1020, 1025, 1026, 1027, 1029, 1031, 1038, 1040, 1041, 1043, 1046, 1050, 1051, 1052], "core_dist": [98, 458, 459, 460], "core_distances_": [98, 453, 458, 460], "core_sampl": 422, "core_sample_indices_": [82, 447], "core_samples_mask": 82, "corei": [1037, 1044, 1045], "corentin": 1050, "cori": 1041, "corneil": 1049, "corner": [50, 53, 63, 86, 186, 269, 273, 281, 282, 305, 328, 374, 379, 502, 920, 922, 1005, 1050], "cornerston": 1029, "cornflowerblu": [154, 208, 217, 224, 258, 260, 263, 279, 281, 297, 303, 359, 360], "corollari": 381, "corona": 1049, "corpora": 416, "corpu": [54, 354, 355, 374, 416, 592, 593, 594, 595, 1037], "corr": [115, 190, 272], "corrcoef": [115, 131], "correct": [2, 30, 52, 63, 64, 90, 112, 135, 145, 179, 187, 199, 203, 214, 232, 257, 265, 266, 272, 279, 281, 289, 291, 342, 344, 353, 362, 376, 379, 381, 383, 394, 407, 409, 411, 415, 416, 418, 419, 428, 434, 453, 459, 472, 477, 491, 505, 507, 639, 671, 680, 682, 707, 708, 712, 716, 717, 722, 725, 727, 728, 732, 733, 734, 738, 742, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 787, 788, 789, 791, 794, 795, 798, 800, 836, 837, 838, 845, 853, 879, 989, 1001, 1005, 1006, 1020, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "correct_covari": [472, 477], "corrected_std": 272, "corrected_var": 272, "correctli": [2, 164, 168, 214, 232, 248, 279, 281, 287, 302, 319, 333, 342, 379, 388, 416, 418, 428, 440, 472, 497, 553, 554, 555, 557, 559, 561, 563, 565, 568, 571, 573, 614, 662, 670, 672, 678, 679, 680, 707, 798, 800, 803, 826, 836, 837, 838, 839, 843, 844, 845, 846, 847, 850, 855, 858, 865, 888, 903, 904, 908, 910, 911, 912, 913, 914, 916, 918, 953, 1002, 1005, 1008, 1009, 1015, 1020, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "correl": [2, 51, 64, 113, 115, 116, 131, 142, 148, 150, 152, 165, 168, 176, 184, 185, 186, 188, 189, 199, 203, 209, 232, 272, 278, 291, 318, 322, 323, 334, 372, 375, 376, 384, 393, 396, 408, 413, 415, 420, 453, 460, 485, 486, 488, 497, 498, 504, 528, 568, 610, 613, 631, 638, 639, 640, 686, 687, 747, 761, 782, 783, 784, 834, 848, 849, 885, 886, 888, 897, 996, 1001, 1006, 1012, 1015, 1019, 1021, 1025, 1026, 1027, 1031, 1036, 1037, 1038, 1049, 1050], "correlation_coeffici": 613, "correlation_model": 1043, "correspond": [2, 50, 52, 53, 58, 63, 64, 68, 76, 86, 98, 109, 113, 123, 135, 138, 141, 142, 143, 151, 165, 168, 169, 172, 177, 180, 187, 203, 206, 214, 215, 218, 223, 232, 242, 247, 248, 255, 262, 266, 271, 273, 275, 276, 281, 282, 286, 305, 317, 323, 324, 325, 354, 357, 358, 361, 362, 367, 373, 374, 375, 378, 379, 381, 383, 386, 387, 392, 393, 394, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 426, 432, 440, 442, 444, 448, 451, 454, 456, 462, 464, 466, 467, 470, 475, 485, 486, 487, 493, 494, 496, 497, 498, 499, 500, 538, 545, 548, 549, 550, 553, 554, 556, 559, 561, 563, 564, 565, 568, 586, 588, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 621, 632, 634, 636, 637, 639, 647, 650, 651, 652, 656, 662, 663, 664, 665, 666, 672, 673, 675, 676, 677, 678, 679, 680, 682, 684, 685, 686, 687, 691, 694, 695, 696, 698, 707, 714, 717, 728, 729, 738, 742, 746, 750, 756, 758, 778, 782, 786, 792, 793, 798, 800, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 829, 837, 839, 840, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 865, 866, 875, 878, 879, 881, 882, 885, 889, 897, 908, 909, 910, 913, 916, 917, 918, 919, 929, 939, 946, 961, 964, 979, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1019, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "correspondingli": 1053, "corri": 1047, "corrobor": 391, "corrupt": [44, 128, 199, 220, 231, 391, 864, 1001, 1013], "cort": [1047, 1048, 1051, 1052], "cortex": 416, "cos_transform": 43, "cosin": [2, 43, 75, 287, 292, 297, 371, 374, 393, 411, 416, 417, 444, 448, 453, 460, 539, 594, 595, 624, 700, 764, 765, 766, 769, 774, 775, 778, 782, 783, 784, 848, 849, 853, 880, 1008, 1021, 1031, 1046], "cosine_dist": [2, 407, 700, 766, 1008, 1042, 1055], "cosine_similar": [2, 346, 407, 764, 769, 1003, 1041, 1055], "cosinesimil": 292, "cosmo": 57, "cost": [0, 43, 74, 124, 141, 150, 171, 184, 192, 234, 242, 246, 264, 274, 276, 279, 281, 286, 321, 329, 342, 354, 355, 356, 361, 379, 385, 387, 391, 410, 411, 418, 481, 500, 504, 541, 542, 543, 550, 555, 561, 562, 563, 564, 565, 568, 569, 606, 614, 623, 631, 650, 651, 656, 657, 662, 664, 665, 666, 667, 672, 676, 678, 680, 682, 691, 692, 696, 704, 706, 722, 746, 788, 791, 803, 804, 826, 834, 869, 888, 906, 908, 909, 910, 913, 916, 917, 918, 919, 952, 997, 1001, 1002, 1005, 1008, 1018, 1019, 1020, 1026, 1027, 1031, 1042, 1045, 1046], "cost_complexity_pruning_path": [357, 916, 917, 918, 919], "costa": [1044, 1049], "costin": 1036, "costli": [104, 109, 142, 182, 266, 273, 350, 367, 380, 385, 411, 446, 631, 812, 814, 900, 901, 952, 1005, 1008, 1017, 1025], "costlier": 675, "costs_": [474, 475, 1052], "could": [43, 48, 52, 53, 64, 72, 77, 86, 103, 104, 121, 124, 136, 137, 144, 147, 150, 166, 171, 176, 183, 186, 187, 188, 214, 215, 218, 223, 232, 238, 246, 247, 248, 265, 266, 272, 285, 291, 300, 303, 324, 338, 339, 353, 357, 361, 368, 379, 385, 387, 393, 397, 405, 409, 415, 418, 419, 423, 477, 537, 542, 611, 612, 633, 675, 806, 811, 813, 995, 1001, 1002, 1012, 1013, 1015, 1020, 1025, 1033, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "couldn": [1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "count": [2, 23, 43, 52, 54, 62, 64, 76, 82, 86, 102, 103, 119, 156, 157, 187, 188, 214, 216, 232, 245, 255, 266, 281, 286, 289, 292, 322, 323, 354, 355, 374, 376, 383, 388, 393, 394, 409, 411, 416, 418, 419, 449, 452, 492, 500, 540, 548, 585, 592, 593, 594, 595, 598, 608, 621, 644, 701, 709, 719, 722, 733, 734, 742, 758, 787, 788, 790, 791, 843, 847, 848, 849, 857, 860, 871, 920, 922, 954, 969, 993, 994, 997, 1001, 1005, 1007, 1008, 1015, 1021, 1029, 1036, 1039, 1041, 1044, 1045, 1047, 1048, 1053], "count_nonzero": [46, 49, 366], "count_onli": [848, 849], "counter": [57, 135, 279, 411, 680, 681, 682, 1049], "counterpart": [994, 1002, 1020], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 52, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 52, "countri": [318, 328, 500, 1002], "counts_": 1048, "countvector": [2, 54, 335, 355, 374, 384, 412, 416, 419, 467, 492, 540, 586, 593, 594, 595, 1036, 1038, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1054], "coupl": [54, 85, 86, 88, 235, 373, 374, 408, 409, 411, 420, 593, 914, 994, 1020], "cournapeau": [0, 401, 1036, 1039], "cours": [47, 48, 192, 286, 366, 379, 381, 410, 416, 419, 420, 995, 1000, 1001, 1029], "coursecentr": [411, 445], "courtesi": 379, "couvreur": [1045, 1046], "cov": [70, 113, 116, 137, 262, 379, 393, 397, 404, 414, 424, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 523, 536, 538, 545, 552], "cov_": [50, 113], "cov_class_1": 70, "cov_class_2": 70, "cov_init": 1052, "cov_test": 50, "cov_train": 50, "cov_typ": [259, 494], "covar": [257, 258, 263], "covari": [2, 48, 51, 65, 69, 110, 115, 128, 131, 149, 151, 171, 178, 180, 217, 241, 256, 258, 260, 261, 262, 263, 279, 303, 328, 388, 393, 402, 411, 414, 416, 421, 424, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 508, 519, 523, 531, 536, 538, 545, 552, 553, 554, 567, 614, 615, 617, 626, 627, 635, 648, 649, 654, 658, 660, 686, 687, 690, 693, 697, 801, 802, 804, 823, 1004, 1011, 1015, 1026, 1027, 1030, 1031, 1036, 1038, 1039, 1040, 1041, 1043, 1045], "covariance_": [51, 70, 111, 113, 472, 473, 474, 475, 476, 477, 478, 479, 553, 554, 999, 1043], "covariance_correct": [472, 477], "covariance_eigh": [329, 545, 1054], "covariance_estim": [69, 553, 999, 1048], "covariance_prior": [263, 801], "covariance_prior_": 801, "covariance_reweight": [472, 477], "covariance_typ": [79, 258, 259, 261, 262, 263, 801, 802, 1052], "covariances_": [257, 258, 259, 262, 263, 801, 802, 1043], "cover": [0, 85, 192, 214, 232, 362, 371, 374, 379, 392, 639, 724, 798, 1005, 1006, 1023], "coverag": [2, 50, 52, 147, 150, 214, 232, 305, 374, 382, 407, 502, 631, 724], "coverage_error": [2, 1005, 1040, 1050], "coverage_fract": 147, "coverages_land": 50, "covertyp": [2, 372, 494, 1031], "covtyp": 192, "cow": 1037, "cowlei": 1046, "cowton": 1050, "cox": [312, 316, 884, 896, 1015, 1044, 1052], "cpo": [169, 376], "cppflag": 377, "cpu": [0, 94, 273, 292, 326, 366, 367, 385, 387, 393, 397, 407, 419, 500, 567, 636, 651, 655, 657, 659, 662, 663, 665, 667, 669, 670, 672, 680, 683, 804, 818, 829, 830, 831, 852, 860, 901, 1005, 1041, 1050, 1051, 1053, 1054], "cpu_count": [77, 141, 292], "cpuexecutionprovid": 405, "cpython": [379, 380, 385, 1051], "craeton": 1054, "craft": 382, "craig": [1017, 1039, 1044], "crall": [1043, 1049], "crammer": [670, 671, 739, 1001, 1005, 1020], "crammer06a": [670, 671], "crammer_sing": [908, 1006, 1020, 1036], "cranenburgh": 1040, "crash": [51, 379, 405, 471, 898, 899, 906, 1015, 1040, 1044, 1052, 1053, 1055], "crawl": [525, 944], "craze": 1043, "crc": 1001, "creat": [2, 43, 44, 47, 50, 58, 59, 63, 64, 66, 68, 70, 72, 74, 76, 78, 79, 80, 82, 85, 91, 93, 95, 103, 104, 111, 116, 118, 123, 126, 137, 140, 143, 144, 145, 147, 151, 154, 168, 171, 173, 176, 177, 178, 180, 183, 186, 188, 194, 196, 198, 200, 210, 215, 216, 226, 227, 236, 246, 248, 251, 252, 254, 262, 266, 267, 268, 270, 272, 282, 286, 300, 302, 303, 314, 316, 317, 321, 324, 325, 336, 338, 339, 343, 344, 347, 349, 350, 351, 355, 357, 359, 360, 362, 367, 374, 375, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 392, 393, 397, 398, 405, 409, 411, 412, 415, 417, 418, 419, 421, 441, 454, 456, 468, 469, 503, 519, 520, 521, 522, 550, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 592, 593, 595, 601, 632, 634, 635, 636, 637, 701, 702, 704, 705, 706, 786, 793, 804, 806, 810, 814, 818, 822, 826, 827, 829, 830, 838, 869, 881, 910, 913, 916, 917, 918, 919, 923, 932, 955, 956, 963, 977, 989, 995, 1001, 1004, 1005, 1006, 1008, 1012, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1025, 1029, 1033, 1036, 1037, 1039, 1042, 1046, 1049, 1050, 1051, 1052, 1053, 1054], "create_ax": 312, "create_species_bunch": 50, "createindex": 292, "creation": [381, 515, 516, 517, 519, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 660, 848, 849, 1029, 1043, 1044, 1045, 1049], "creativ": 373, "creator": [169, 373, 376], "cred_int_df": 272, "cred_interv": 272, "credibl": 272, "credit": [374, 387, 418, 1001, 1029], "credit_amount": 266, "credit_card": 266, "credit_gain": 266, "credit_gain_scor": 266, "credit_histori": 266, "creighton": 326, "crispinlogan": [1048, 1051, 1052, 1054], "cristian": 646, "cristina": 1048, "criteria": [90, 141, 184, 193, 203, 222, 262, 272, 387, 411, 420, 444, 469, 485, 486, 487, 505, 561, 562, 563, 564, 568, 569, 650, 656, 660, 662, 663, 675, 696, 869, 888, 908, 909, 916, 917, 918, 919, 995, 1004, 1009, 1019, 1026, 1039, 1044, 1047], "criterion": [64, 109, 110, 190, 201, 222, 262, 284, 322, 381, 388, 393, 411, 416, 444, 448, 452, 455, 462, 465, 536, 541, 543, 550, 557, 558, 561, 562, 563, 564, 568, 569, 570, 610, 631, 648, 649, 652, 660, 670, 671, 672, 673, 675, 676, 678, 680, 681, 682, 684, 695, 699, 714, 802, 905, 910, 911, 912, 913, 914, 916, 917, 918, 919, 1001, 1004, 1005, 1013, 1018, 1021, 1027, 1031, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "criterion_": [201, 203, 660], "critic": [373, 379, 392, 418, 696, 1002, 1005, 1013, 1020, 1029, 1047], "crockett": 1051, "crombach": 1038, "crop": [387, 1051], "cross": [2, 9, 29, 52, 53, 64, 70, 87, 90, 91, 103, 104, 106, 107, 109, 113, 116, 128, 141, 143, 144, 146, 147, 150, 159, 163, 166, 167, 169, 187, 188, 193, 199, 200, 201, 202, 208, 214, 216, 222, 232, 249, 254, 259, 260, 262, 264, 269, 272, 273, 274, 276, 278, 279, 280, 281, 284, 286, 287, 289, 296, 310, 311, 313, 318, 321, 323, 328, 334, 342, 349, 374, 379, 381, 388, 391, 392, 393, 405, 406, 409, 412, 413, 416, 418, 419, 420, 421, 440, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 497, 505, 506, 508, 519, 545, 571, 572, 579, 597, 598, 601, 606, 610, 613, 646, 647, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 690, 705, 706, 710, 717, 732, 745, 789, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 842, 868, 869, 873, 888, 889, 906, 908, 910, 913, 925, 959, 1004, 1005, 1008, 1009, 1013, 1015, 1020, 1021, 1025, 1026, 1027, 1029, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054], "cross_decomposit": [2, 114, 115, 116, 184, 249, 485, 486, 487, 488, 1006, 1026, 1040, 1041, 1043, 1044, 1045], "cross_val": 1036, "cross_val_predict": [2, 155, 268, 321, 402, 409, 415, 418, 440, 571, 572, 830, 831, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1053], "cross_val_scor": [2, 52, 128, 182, 183, 184, 264, 268, 277, 287, 327, 345, 362, 379, 381, 391, 402, 415, 418, 475, 524, 579, 707, 746, 804, 829, 831, 916, 917, 994, 1005, 1026, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1048, 1049, 1052, 1053, 1055], "cross_valid": [2, 43, 52, 144, 150, 155, 187, 216, 248, 268, 275, 286, 289, 318, 328, 379, 392, 402, 579, 829, 830, 1005, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053], "crossentropi": 565, "crossvalid": [272, 287], "crowd": [387, 394, 1002, 1025], "crucial": [51, 150, 186, 218, 267, 366, 378, 379, 393, 394, 411, 421, 1020], "crude": 1047, "crunch": 385, "cruz": 179, "crypt": [57, 374], "cryptograph": 388, "cs_": 663, "cs_note": 420, "cs_point": 143, "csail": [411, 670, 671, 680, 845], "csc": [2, 366, 391, 393, 419, 531, 555, 557, 558, 674, 696, 875, 877, 883, 888, 891, 893, 899, 930, 934, 935, 967, 979, 980, 982, 983, 984, 985, 1008, 1015, 1044, 1045, 1047, 1050], "csc_matrix": [455, 561, 562, 567, 568, 569, 570, 885, 916, 917, 918, 919, 995, 1015, 1021, 1041], "csco": 51, "csgraph": [393, 1049], "csie": [192, 373, 490, 512, 513, 662], "csizsek": 1043, "csr": [2, 55, 329, 355, 366, 373, 374, 388, 391, 393, 419, 422, 446, 449, 450, 452, 453, 462, 501, 512, 527, 531, 557, 558, 561, 562, 568, 569, 570, 594, 634, 662, 696, 718, 772, 796, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 863, 871, 875, 877, 879, 880, 881, 883, 886, 887, 888, 891, 892, 893, 895, 898, 901, 916, 917, 918, 919, 930, 934, 935, 959, 967, 979, 980, 981, 982, 983, 984, 985, 986, 987, 1008, 1015, 1019, 1036, 1037, 1042, 1044, 1045, 1051, 1052, 1053], "csr_arrai": 986, "csr_matrix": [292, 322, 443, 447, 455, 500, 538, 548, 561, 562, 563, 564, 567, 568, 569, 570, 592, 597, 598, 718, 834, 863, 881, 883, 910, 911, 913, 914, 916, 917, 918, 919, 953, 959, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 1006, 1015, 1019, 1020, 1021, 1051], "css": 1048, "cst": 999, "cstride": 188, "csv": [51, 373, 376, 384, 1044, 1049], "csytraci": 1039, "ct": [53, 179, 255, 412, 467, 469, 470], "ctc": 179, "cttt": 179, "cube": [423, 537], "cubic": [111, 421], "cuda": [391, 407], "cue": 1004, "culprit": 391, "cultiv": 376, "cultur": 374, "cum_claim": [214, 232], "cum_exposur": 214, "cumsum": [146, 214, 232, 1043], "cumtim": 385, "cumul": [2, 146, 214, 232, 411, 730, 739, 760, 885, 897, 1015, 1019, 1043, 1045, 1046], "cumulated_claim": 214, "cumulated_claim_amount": 232, "cumulated_exposur": 214, "cumulated_sampl": 232, "cunha": [1037, 1038], "cup": [374, 1005], "cupi": [326, 329, 391, 407, 1053, 1054, 1055], "cupy_to_ndarrai": 407, "curat": [379, 382, 383], "cure": 1001, "curic": [1044, 1045], "current": [0, 2, 7, 47, 80, 135, 176, 187, 232, 312, 321, 367, 368, 374, 377, 379, 380, 384, 388, 391, 393, 394, 407, 408, 411, 415, 418, 419, 420, 421, 443, 449, 453, 471, 472, 473, 474, 475, 476, 477, 478, 479, 536, 539, 545, 557, 558, 561, 562, 563, 564, 566, 568, 569, 570, 580, 595, 597, 614, 621, 630, 631, 650, 671, 675, 679, 680, 681, 682, 792, 801, 802, 853, 857, 865, 866, 884, 896, 906, 916, 917, 918, 919, 922, 924, 925, 926, 971, 979, 994, 999, 1001, 1005, 1008, 1009, 1015, 1025, 1028, 1044, 1048, 1050, 1051, 1052], "current_count": 76, "current_month": 176, "current_sklearn_vers": 580, "current_sz_mb": 47, "currentcontrolset": 397, "currentmodul": 379, "curs": [353, 354, 411, 417, 1007, 1008], "cursor": [141, 273], "curv": [2, 29, 47, 50, 60, 61, 63, 72, 107, 109, 138, 140, 141, 146, 184, 193, 194, 204, 214, 232, 234, 236, 239, 240, 242, 244, 251, 252, 256, 257, 258, 259, 261, 262, 264, 266, 272, 282, 285, 308, 313, 321, 329, 346, 359, 386, 406, 410, 415, 417, 440, 441, 442, 506, 514, 519, 525, 529, 568, 636, 649, 662, 702, 704, 706, 710, 711, 712, 713, 731, 733, 745, 786, 788, 791, 792, 793, 801, 802, 810, 821, 827, 832, 834, 835, 846, 869, 888, 908, 913, 1001, 1002, 1004, 1005, 1011, 1021, 1026, 1027, 1029, 1031, 1033, 1038, 1039, 1042, 1046, 1048, 1049, 1050, 1051, 1052], "curvatur": 307, "cusick": 1046, "custom": [2, 15, 30, 41, 132, 166, 168, 184, 198, 252, 264, 266, 271, 273, 276, 279, 280, 284, 294, 299, 303, 321, 337, 339, 340, 342, 343, 345, 353, 355, 371, 374, 377, 381, 386, 387, 388, 391, 392, 393, 402, 405, 411, 412, 415, 421, 471, 492, 497, 498, 506, 508, 542, 544, 551, 553, 561, 562, 568, 569, 575, 577, 606, 634, 635, 694, 703, 717, 782, 804, 834, 872, 906, 913, 988, 999, 1005, 1008, 1024, 1025, 1026, 1029, 1031, 1036, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1055], "custom_combin": 881, "custom_cv": 415, "custom_cv_2fold": 415, "custom_fnames_enc": 881, "custom_nam": 353, "custom_scor": 329, "custom_scorer_modul": 1005, "custom_scoring_funct": 1005, "customestim": 133, "customkernel": 622, "customvector": 419, "cut": [57, 78, 80, 98, 99, 168, 169, 184, 236, 264, 275, 289, 329, 334, 383, 391, 408, 410, 411, 449, 455, 456, 465, 500, 592, 595, 662, 695, 699, 820, 826, 831, 869, 888, 1015, 1026], "cut_dist": [88, 449], "cutler": [916, 917], "cutoff": [194, 958, 1015, 1045], "cutoffs_x0": 312, "cutoffs_x1": 312, "cv": [2, 43, 51, 52, 61, 62, 63, 64, 87, 103, 104, 105, 106, 109, 128, 141, 144, 146, 150, 160, 168, 182, 183, 187, 203, 213, 216, 248, 266, 268, 270, 271, 272, 273, 274, 275, 277, 278, 282, 286, 287, 289, 318, 326, 328, 329, 342, 349, 392, 393, 402, 409, 410, 415, 418, 420, 440, 475, 571, 572, 598, 606, 651, 655, 657, 659, 663, 665, 667, 669, 677, 679, 804, 806, 807, 808, 809, 810, 818, 819, 820, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 839, 842, 889, 916, 917, 994, 997, 1000, 1001, 1005, 1015, 1025, 1038, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1052, 1053, 1054, 1055], "cv_alpha": [655, 659], "cv_alphas_": [203, 655, 659, 1048], "cv_best_it": 146, "cv_clf": 146, "cv_color": 146, "cv_estim": 146, "cv_estimators_tut": 160, "cv_line": 146, "cv_mape_scor": 52, "cv_model": 187, "cv_result": [43, 52, 103, 141, 150, 168, 270, 271, 273, 275, 402, 818, 831, 1005], "cv_results_": [103, 104, 105, 113, 141, 160, 168, 262, 266, 270, 271, 272, 273, 276, 280, 283, 284, 294, 342, 475, 598, 677, 679, 804, 807, 808, 818, 826, 1042, 1046, 1048, 1049, 1054, 1055], "cv_results_ecoc": 289, "cv_results_lr": 216, "cv_results_ovo": 289, "cv_results_ovr": 289, "cv_results_qr": 216, "cv_results_tre": 289, "cv_results_tuned_model": 286, "cv_results_vanilla_model": 286, "cv_score": [146, 286], "cv_test_scor": 832, "cv_train_scor": 832, "cv_valu": 1044, "cv_values_": [677, 679, 1054], "cvc": 51, "cve": 1049, "cvx": 51, "cwitt": 1044, "cxx": 377, "cxxflag": 377, "cyan": [109, 138, 187, 303], "cybernet": 773, "cycl": [0, 16, 43, 77, 79, 83, 95, 121, 202, 258, 263, 279, 281, 324, 325, 379, 383, 402, 416, 583, 584, 631, 807, 808, 930, 994, 995, 1044, 1045, 1046, 1048, 1049, 1050, 1051], "cycler": 73, "cyclic": [43, 650, 651, 656, 657, 664, 665, 666, 667, 1048], "cyclic_cossin_linear_pipelin": 43, "cyclic_cossin_linear_predict": 43, "cyclic_cossin_transform": 43, "cyclic_hour": 43, "cyclic_month": 43, "cyclic_spline_interactions_pipelin": 43, "cyclic_spline_linear_pipelin": 43, "cyclic_spline_linear_predict": 43, "cyclic_spline_poly_pipelin": 43, "cyclic_spline_poly_predict": 43, "cyclic_spline_transform": 43, "cyclic_weekdai": 43, "cyl": [50, 305], "cynthias13w": 1053, "cyt": 289, "cython": [41, 325, 366, 367, 377, 379, 382, 388, 391, 397, 404, 407, 411, 418, 512, 1015, 1016, 1019, 1020, 1024, 1025, 1036, 1039, 1040, 1042, 1048, 1051, 1052, 1053, 1054], "cython3": 377, "cythonx": 380, "c\u00e8sar": 1005, "d": [0, 2, 45, 46, 47, 49, 50, 51, 52, 54, 55, 67, 68, 72, 73, 77, 82, 83, 93, 94, 96, 102, 103, 113, 119, 121, 124, 128, 130, 171, 179, 187, 214, 222, 230, 232, 239, 244, 245, 246, 247, 260, 271, 272, 280, 286, 291, 298, 299, 305, 309, 331, 332, 335, 342, 346, 347, 355, 373, 374, 376, 379, 381, 385, 391, 409, 411, 413, 414, 416, 418, 419, 421, 422, 447, 449, 450, 455, 463, 466, 491, 497, 507, 530, 538, 540, 561, 562, 569, 570, 585, 586, 594, 618, 619, 623, 626, 627, 632, 648, 649, 652, 673, 674, 675, 684, 692, 693, 696, 697, 701, 703, 709, 712, 725, 726, 727, 728, 730, 760, 768, 782, 785, 792, 816, 843, 845, 847, 848, 849, 864, 875, 879, 881, 882, 884, 896, 901, 918, 919, 923, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1013, 1015, 1017, 1020, 1021, 1039, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1054], "d120af76829af0d256338dc6dd4be5df4fd1f35bf3a283cab66a51c1c6abd06a": 52, "d1997": 418, "d2": [726, 727, 1005], "d2_absolute_error_scor": [2, 727, 1005, 1050], "d2_log_loss_scor": [2, 1005, 1054], "d2_pinball_scor": [2, 1005, 1050], "d2_pinball_score_08": 1005, "d2_tweedie_scor": [2, 407, 1005, 1049, 1055], "d2_tweedie_score_15": 1005, "d55e00": 257, "d81b60": 316, "d83": 376, "d_": [111, 411, 416, 652, 673, 684, 782, 1002, 1007], "d_c": 411, "d_chunk": 785, "d_fit": 692, "d_fix": 130, "d_m": 411, "d_multi": 130, "da": [374, 1051, 1052, 1054], "dae": 1001, "dagm": 997, "dagstuhl": 1005, "dai": [0, 43, 51, 52, 150, 176, 188, 215, 376, 379, 887, 1029, 1042, 1043, 1050, 1051], "daiki": 1040, "daili": [51, 150, 1029], "dakota": 1046, "dale": 1049, "dalla": 1044, "dalmia": [1042, 1043, 1044], "damag": 419, "damicelli": 1051, "damink": 1053, "daml": [411, 455, 465], "damp": [79, 411, 443, 457], "dan": [55, 1036, 1040, 1041, 1042, 1044, 1045], "danfrankj": 1040, "dang": [683, 1001, 1054], "danger": [215, 415], "dangi": 1053, "dangl": 55, "dangonite57": [1051, 1052], "daniel": [326, 366, 889, 1015, 1029, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1048, 1050, 1053], "daniela": [1050, 1051], "danielgaerb": 1051, "danielsen": 1043, "danielweitzenfeld": 1039, "daniil": 1043, "danil": 1044, "dani\u00ebl": 1047, "danna": 1046, "danni": [1039, 1040, 1041], "dantzig": 349, "danylo": 1045, "dao": 1044, "daphn": 1047, "dare": 1046, "darioka": [1048, 1050, 1051], "dariu": [1043, 1044], "dark": [138, 187, 342, 374, 1053], "dark2": [62, 64, 235], "darkblu": 303, "darkorang": [110, 125, 129, 130, 215, 225, 237, 258, 259, 260, 263, 279, 281, 297, 303, 304, 333, 359], "darkorchid": 224, "darkr": [228, 298, 341], "darpa": 374, "darren": [1050, 1051], "darshan": 1048, "dart": 1024, "dartmouth": 0, "dasarathi": 376, "dasgupta": [419, 449, 902, 1017], "dash": [69, 111, 135, 146, 157, 171, 174, 176, 187, 206, 209, 215, 216, 223, 226, 227, 251, 266, 272, 282, 344, 1019], "dashdot": [146, 171, 174, 251], "dask": [1025, 1044], "data": [0, 2, 10, 17, 22, 26, 36, 37, 38, 42, 45, 47, 50, 52, 53, 54, 57, 59, 62, 64, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 89, 92, 93, 94, 95, 98, 101, 103, 104, 106, 110, 112, 118, 119, 120, 121, 124, 125, 129, 131, 133, 135, 138, 140, 141, 143, 144, 146, 147, 152, 153, 154, 156, 158, 160, 162, 166, 170, 171, 172, 173, 175, 176, 178, 180, 182, 184, 187, 188, 193, 194, 197, 198, 199, 202, 203, 204, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 222, 223, 227, 228, 230, 231, 232, 234, 235, 236, 237, 238, 241, 244, 245, 246, 248, 250, 251, 252, 255, 257, 258, 259, 260, 261, 263, 265, 266, 270, 272, 274, 275, 276, 277, 280, 286, 287, 289, 291, 292, 296, 298, 300, 301, 302, 303, 305, 308, 309, 311, 313, 314, 315, 319, 321, 323, 325, 326, 327, 329, 332, 333, 335, 336, 338, 339, 341, 346, 347, 353, 358, 359, 360, 361, 365, 367, 371, 372, 373, 374, 375, 376, 379, 381, 382, 385, 386, 387, 388, 392, 397, 399, 402, 405, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 429, 430, 435, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 524, 525, 526, 527, 528, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 621, 622, 626, 629, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 708, 709, 711, 712, 714, 715, 717, 721, 722, 724, 729, 731, 732, 733, 734, 735, 738, 740, 741, 742, 744, 745, 758, 759, 761, 765, 767, 768, 773, 782, 787, 788, 789, 791, 792, 793, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 925, 927, 928, 929, 930, 932, 933, 934, 935, 938, 939, 940, 949, 951, 952, 967, 970, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "data1010": 1041, "data_filenam": [505, 509], "data_hom": [489, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 1043, 1052], "data_home_path": 503, "data_id": [44, 144, 176, 187, 214, 232, 242, 266, 286, 289, 318, 373, 500], "data_ind": 53, "data_max": 1041, "data_max_": [878, 1041], "data_min": 1041, "data_min_": [878, 1041], "data_nam": 397, "data_path": 47, "data_rang": 1041, "data_range_": [878, 1041], "data_sampl": 54, "data_set": 308, "data_size_mb": 355, "data_stream": 47, "data_test": [246, 266, 273, 353, 513], "data_test_size_mb": 353, "data_train": [246, 266, 273, 353, 513], "data_train_size_mb": 353, "data_transform": 643, "data_transpos": [1050, 1052], "data_unravel_indic": 53, "data_vers": 397, "databas": [47, 169, 317, 366, 368, 374, 376, 411, 416, 418, 419, 422, 445, 447, 514, 559, 560, 901, 1017], "dataconversionwarn": 2, "datadimensionalitywarn": 2, "datafram": [2, 43, 52, 62, 102, 103, 104, 135, 141, 144, 147, 152, 168, 176, 182, 186, 187, 188, 189, 194, 199, 203, 218, 222, 232, 252, 255, 262, 266, 270, 272, 273, 275, 283, 284, 286, 289, 317, 318, 319, 324, 325, 326, 349, 353, 354, 373, 374, 379, 381, 384, 393, 412, 418, 435, 445, 446, 448, 450, 452, 467, 469, 470, 471, 485, 486, 487, 488, 492, 493, 494, 496, 500, 504, 505, 506, 508, 509, 514, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 565, 566, 570, 571, 572, 573, 574, 585, 586, 587, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 692, 693, 696, 804, 807, 808, 818, 834, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 906, 930, 959, 975, 978, 993, 994, 995, 1025, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "datalim": 259, "datapoint": [43, 77, 85, 89, 175, 178, 198, 246, 247, 251, 267, 272, 291, 421, 449, 506, 561, 562, 563, 564, 568, 569, 570, 615, 916, 917, 918, 919, 998], "dataset": [2, 37, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 59, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 100, 103, 104, 105, 106, 107, 111, 112, 113, 116, 120, 123, 124, 125, 126, 127, 128, 130, 131, 134, 136, 137, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 179, 182, 183, 189, 190, 192, 193, 196, 198, 200, 201, 202, 204, 205, 206, 207, 210, 211, 212, 213, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 236, 238, 239, 240, 242, 245, 247, 249, 250, 254, 255, 257, 259, 260, 261, 263, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 340, 342, 343, 344, 345, 347, 349, 350, 351, 354, 355, 356, 357, 359, 360, 361, 362, 367, 368, 382, 383, 385, 392, 393, 396, 397, 405, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 423, 426, 431, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 461, 462, 472, 473, 476, 477, 478, 479, 481, 484, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 587, 588, 591, 592, 593, 594, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 632, 635, 636, 637, 638, 639, 642, 643, 644, 647, 649, 650, 651, 653, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 712, 714, 715, 733, 759, 761, 791, 792, 796, 797, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 864, 865, 866, 868, 869, 872, 873, 881, 882, 886, 888, 890, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 934, 935, 939, 940, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "dataset_44063": 52, "dataset_nam": [251, 292], "datasets_0004_44063": 52, "datasets_nam": 251, "datastructur": [407, 1044, 1048], "datastuctur": 1053, "datatyp": [467, 469, 1043, 1046], "date": [43, 102, 150, 169, 176, 188, 374, 376, 379, 383, 394, 412, 1025], "dateco2datef641958": 176, "daten": [453, 1044, 1045], "datenbergwerk": 1046, "datetim": [43, 55, 176, 188], "dauphin": 1038, "dave": [1036, 1043, 1044, 1050, 1052], "davi": [2, 477, 729, 1005, 1040], "david": [0, 112, 374, 401, 411, 418, 421, 465, 536, 540, 571, 572, 626, 627, 632, 729, 801, 905, 995, 1001, 1009, 1018, 1029, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "davidblnc": [1051, 1052], "davidleon123": 1054, "davies_bouldin_scor": [2, 411, 1044], "davis2006": 1005, "daw": [0, 401, 1036, 1037, 1038, 1039, 1040], "dawson": [1040, 1054], "dayn": [1051, 1052], "db": [82, 88, 411], "dbauer9": 1047, "dberenbaum": 1052, "dbg": 385, "dbpedia": 55, "dbpedia_resource_prefix_len": 55, "dbscan": [2, 71, 72, 73, 79, 88, 93, 96, 98, 184, 327, 333, 391, 393, 449, 453, 455, 458, 516, 708, 709, 721, 741, 797, 799, 860, 888, 1008, 1026, 1030, 1031, 1036, 1038, 1040, 1041, 1043, 1044, 1045, 1052, 1053], "dbscan_clust": 449, "dcc": 374, "dcg": [730, 760, 1005, 1043], "dcg_score": [2, 760, 1005, 1043, 1046], "dd": [50, 51, 153, 305, 502], "ddof": [272, 888, 899], "de": [51, 155, 318, 376, 639, 692, 768, 1001, 1002, 1025, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "dea": [1050, 1051, 1052], "deactiv": [253, 373, 380, 385, 397, 412, 807, 808, 1050], "dead": 1054, "deadlock": 394, "deal": [62, 90, 103, 150, 182, 187, 199, 238, 286, 289, 346, 355, 379, 384, 412, 419, 420, 421, 477, 500, 707, 712, 767, 791, 874, 952, 1001, 1029, 1039, 1051, 1052], "dealloc": 1053, "dean": [155, 1044, 1050, 1052, 1054], "death": 374, "debian": [0, 366, 377, 385], "debias": 130, "deborah": [1042, 1043, 1053], "debug": [2, 362, 367, 380, 382, 385, 393, 396, 631, 907, 1044, 1048], "debugg": [382, 387], "dec": [215, 289, 681, 887, 912, 1020], "decad": [187, 1025], "decai": [176, 548, 865, 866, 952, 1005, 1019, 1040], "decal": 1048, "decemb": [112, 150, 176, 374, 668, 689, 690, 1036, 1044, 1046, 1048, 1049, 1051], "decent": [241, 271, 374, 1007], "deci": 281, "decid": [43, 50, 90, 93, 103, 145, 150, 263, 269, 272, 279, 374, 379, 394, 405, 410, 419, 421, 453, 460, 563, 564, 615, 639, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 675, 685, 688, 801, 850, 851, 852, 854, 856, 858, 859, 860, 871, 1004, 1011, 1029, 1049, 1052, 1055], "decil": [636, 1047], "deciles_hlines_": 636, "deciles_vlines_": 636, "decim": [62, 177, 474, 475, 921, 1043, 1044], "decis": [0, 2, 40, 43, 62, 64, 67, 70, 76, 89, 91, 93, 118, 125, 134, 137, 138, 139, 140, 145, 153, 154, 155, 157, 158, 162, 168, 169, 173, 175, 187, 197, 198, 206, 223, 224, 227, 241, 242, 244, 249, 252, 264, 275, 276, 278, 279, 289, 300, 303, 307, 312, 313, 314, 317, 330, 334, 335, 338, 339, 340, 341, 342, 343, 344, 350, 351, 353, 366, 375, 376, 379, 393, 405, 406, 409, 411, 418, 440, 472, 500, 504, 508, 523, 540, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 597, 598, 635, 636, 637, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 702, 704, 706, 707, 711, 722, 724, 730, 731, 739, 743, 744, 746, 760, 786, 788, 791, 792, 793, 798, 803, 804, 807, 808, 818, 820, 826, 831, 834, 836, 837, 839, 850, 869, 888, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 999, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1018, 1019, 1020, 1024, 1025, 1026, 1027, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1050, 1052, 1053, 1054], "decision_funct": [48, 50, 62, 64, 89, 137, 151, 162, 226, 227, 228, 242, 251, 266, 279, 286, 298, 299, 307, 314, 328, 340, 341, 342, 346, 347, 351, 381, 393, 409, 410, 418, 440, 472, 553, 554, 557, 559, 563, 565, 567, 571, 597, 598, 635, 636, 637, 662, 663, 670, 672, 678, 679, 680, 681, 702, 704, 706, 711, 724, 730, 731, 739, 743, 744, 746, 760, 786, 792, 793, 798, 803, 804, 807, 808, 818, 826, 829, 836, 837, 838, 839, 854, 868, 875, 905, 908, 910, 912, 913, 927, 1001, 1005, 1011, 1012, 1019, 1020, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1053, 1055], "decision_function_shap": [321, 350, 910, 913, 1020, 1041, 1042, 1045, 1046], "decision_path": [361, 561, 562, 568, 569, 570, 916, 917, 918, 919, 1042, 1047], "decision_threshold": [266, 286], "decision_tre": [920, 921, 922, 1021], "decision_tree_learn": [916, 917, 1021], "decisionboundarydisplai": [2, 48, 66, 67, 70, 89, 137, 151, 156, 198, 206, 223, 228, 275, 295, 300, 303, 317, 338, 339, 340, 341, 343, 344, 346, 358, 1050, 1051, 1053, 1054], "decisiontre": [143, 557, 1041], "decisiontreeclassifi": [2, 67, 135, 137, 143, 156, 276, 289, 327, 357, 358, 361, 393, 410, 418, 557, 559, 561, 563, 565, 568, 635, 715, 810, 832, 917, 918, 920, 921, 922, 995, 1006, 1021, 1037, 1038, 1040, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "decisiontreeclassifierifitteddecisiontreeclassifi": 361, "decisiontreeregressor": [2, 136, 138, 252, 313, 321, 327, 359, 360, 384, 558, 560, 562, 563, 564, 566, 569, 636, 637, 916, 919, 921, 947, 995, 1006, 1021, 1037, 1038, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "decisiontreeregressorifitteddecisiontreeregressor": 323, "declan": 1048, "declar": [89, 235, 248, 362, 379, 380, 385, 393, 446, 449, 450, 462, 474, 475, 481, 694, 698, 1043, 1047], "decod": [47, 305, 374, 393, 507, 573, 592, 593, 595, 1036, 1037], "decode_error": [47, 419, 507, 592, 593, 595, 1038], "decompos": [11, 121, 125, 138, 314, 538, 542, 713, 829, 952, 1000, 1001, 1005, 1022, 1030, 1031], "decomposit": [2, 9, 44, 45, 54, 55, 83, 91, 102, 104, 105, 106, 116, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 153, 192, 234, 235, 237, 245, 246, 249, 250, 253, 271, 296, 301, 317, 325, 328, 329, 354, 368, 372, 385, 388, 393, 407, 408, 409, 412, 418, 423, 452, 454, 455, 456, 465, 485, 486, 487, 499, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 615, 654, 655, 656, 657, 658, 659, 660, 667, 668, 669, 676, 677, 678, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 801, 802, 857, 864, 867, 870, 886, 917, 951, 952, 1001, 1002, 1005, 1022, 1024, 1026, 1027, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "decompress": [405, 1036], "decor": [2, 188, 321, 379, 380, 381, 388, 810, 827, 942, 946, 947, 965, 971, 1046, 1049, 1052, 1054], "decoupl": [418, 1007], "decreas": [63, 74, 80, 88, 91, 99, 107, 150, 152, 168, 169, 179, 187, 188, 190, 222, 244, 245, 274, 279, 307, 314, 317, 321, 357, 366, 368, 379, 409, 411, 418, 444, 448, 466, 525, 538, 539, 545, 561, 562, 563, 564, 565, 566, 568, 569, 570, 606, 639, 640, 641, 680, 681, 682, 710, 716, 731, 786, 793, 865, 866, 916, 917, 918, 919, 994, 996, 997, 1001, 1002, 1005, 1008, 1009, 1012, 1013, 1019, 1020, 1029, 1038, 1043, 1046, 1049], "dede00": [79, 95, 96], "dedic": [43, 270, 351, 377, 383, 385, 391, 394, 407, 411, 588, 676, 678, 691, 994, 1001, 1024, 1044, 1053], "deduc": 46, "deduct": 1009, "dedupl": 1040, "deeksha": 1048, "deem": [280, 281, 538, 1013, 1049], "deep": [214, 381, 393, 405, 418, 425, 436, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 773, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 1009, 1010, 1024, 1025, 1029, 1041, 1047, 1048, 1050], "deepcopi": 381, "deeper": [353, 1021], "deepest": [565, 566, 1047], "deeplook": 1046, "deeppink": 281, "def": [43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 62, 64, 69, 70, 72, 75, 76, 85, 88, 89, 91, 94, 102, 107, 119, 121, 123, 124, 128, 130, 133, 135, 138, 140, 144, 146, 147, 150, 155, 174, 177, 179, 180, 183, 190, 195, 201, 203, 206, 211, 214, 215, 222, 223, 224, 232, 234, 235, 248, 249, 251, 257, 258, 259, 260, 262, 263, 266, 267, 270, 271, 272, 273, 275, 280, 283, 287, 292, 297, 299, 302, 305, 308, 310, 312, 314, 317, 318, 321, 329, 335, 338, 342, 346, 351, 353, 354, 355, 366, 374, 379, 381, 385, 386, 391, 412, 415, 419, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 512, 513, 537, 601, 605, 614, 615, 622, 785, 881, 942, 947, 965, 1005, 1012, 1020], "default": [2, 43, 52, 54, 62, 66, 77, 80, 88, 92, 121, 141, 165, 171, 182, 188, 194, 195, 203, 214, 215, 232, 243, 245, 251, 253, 255, 260, 266, 267, 275, 281, 286, 291, 292, 312, 316, 319, 321, 322, 326, 328, 329, 346, 349, 350, 353, 354, 355, 357, 361, 362, 366, 367, 373, 374, 377, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 397, 402, 405, 409, 410, 411, 412, 415, 416, 418, 419, 420, 422, 423, 424, 425, 427, 428, 429, 430, 432, 433, 434, 435, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 715, 716, 717, 718, 720, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 738, 739, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 938, 940, 941, 942, 944, 946, 947, 951, 952, 953, 954, 955, 956, 957, 958, 967, 969, 970, 973, 974, 975, 977, 978, 979, 985, 988, 990, 991, 993, 994, 995, 997, 999, 1001, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1015, 1017, 1019, 1020, 1021, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "default_bas": [79, 95], "default_rng": 275, "default_scor": 384, "default_tag": 2, "default_target_attribut": 373, "default_tim": [229, 260], "defaultdict": [49, 52, 62, 190, 275, 354, 355], "defazio": [662, 1001], "defens": 289, "defer": 379, "deffici": 1054, "defici": [554, 1002, 1019], "defin": [8, 27, 46, 51, 64, 70, 86, 88, 90, 99, 102, 103, 105, 116, 121, 126, 133, 135, 136, 155, 169, 171, 178, 179, 180, 188, 189, 190, 194, 215, 222, 231, 232, 241, 245, 248, 252, 254, 257, 262, 266, 272, 273, 275, 279, 281, 282, 283, 284, 286, 289, 292, 310, 312, 322, 328, 329, 342, 346, 349, 353, 354, 366, 375, 378, 379, 380, 381, 385, 386, 388, 391, 392, 393, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 426, 427, 428, 430, 432, 433, 434, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 462, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 492, 523, 524, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 626, 627, 631, 632, 633, 634, 636, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 700, 701, 703, 712, 714, 715, 720, 725, 726, 727, 728, 729, 732, 735, 742, 745, 749, 750, 752, 754, 755, 757, 758, 761, 764, 770, 785, 789, 794, 795, 796, 797, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 895, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 938, 940, 944, 950, 962, 964, 988, 994, 995, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1025, 1031, 1033, 1038, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1055], "definit": [2, 91, 112, 201, 214, 279, 292, 354, 379, 380, 381, 393, 396, 411, 413, 414, 416, 531, 533, 539, 615, 632, 696, 712, 722, 732, 750, 762, 801, 802, 994, 997, 999, 1001, 1003, 1005, 1008, 1019, 1023, 1031, 1040, 1044, 1051], "definitelyuncertain": 1042, "deflat": [187, 414, 423, 537], "defoi": 1049, "deform": [151, 262, 351], "degener": [119, 258, 423, 443, 457, 537, 724, 1001, 1005, 1045, 1049, 1050], "degrad": [150, 188, 241, 312, 349, 354, 417, 782, 1013], "degre": [43, 70, 123, 137, 176, 182, 186, 187, 188, 192, 194, 199, 201, 203, 215, 218, 247, 253, 257, 258, 259, 262, 263, 272, 287, 310, 323, 324, 339, 346, 348, 416, 420, 449, 455, 502, 539, 545, 643, 644, 647, 660, 779, 801, 804, 854, 883, 887, 910, 911, 912, 913, 914, 997, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1011, 1012, 1015, 1018, 1020, 1039, 1045, 1049, 1050, 1053], "degrees_of_freedom_": 801, "degrees_of_freedom_prior": 801, "degrees_of_freedom_prior_": 801, "dei": 1048, "deil": [1037, 1047, 1048], "dein": 419, "dekel": [670, 671, 1001], "del": [55, 385, 1048, 1049], "delai": [2, 379, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 804, 818, 829, 830, 1050, 1051, 1054], "delalleau": 1018, "delanou": 1047, "delattr": 1048, "delayed_funct": 970, "delbert": [73, 443, 457], "deleg": [89, 385, 435, 436, 921, 993, 1040, 1042, 1048], "delet": [2, 104, 332, 334, 383, 384, 472, 477, 489], "delete_index": 332, "delete_indic": 332, "deleteri": 1043, "deli": 405, "deliber": 1001, "delimit": [379, 1011, 1051], "deliv": [366, 1029], "deliveri": 383, "dell": 51, "delong": [1048, 1049], "delta": [414, 455], "delta_": 1002, "delta_k": 414, "delteil": 1040, "delv": [865, 866], "demand": [146, 150, 393, 419, 804, 818, 829, 830], "demarc": 93, "demiraj": [1051, 1052], "demo": [52, 53, 56, 71, 72, 74, 75, 76, 79, 80, 86, 87, 89, 90, 92, 93, 94, 95, 97, 100, 151, 184, 190, 199, 220, 245, 260, 262, 273, 281, 317, 333, 353, 354, 381, 408, 411, 419, 443, 444, 447, 449, 450, 451, 453, 454, 456, 458, 461, 464, 506, 515, 516, 517, 545, 708, 709, 721, 723, 741, 797, 799, 869, 888, 889, 1026], "demo_param": 381, "demonstr": [46, 52, 57, 58, 59, 62, 68, 71, 75, 78, 88, 94, 102, 104, 135, 139, 145, 148, 166, 167, 179, 180, 184, 190, 215, 248, 254, 255, 259, 263, 264, 268, 275, 278, 281, 287, 294, 297, 304, 311, 313, 314, 316, 319, 323, 330, 332, 333, 336, 340, 346, 353, 354, 355, 362, 368, 374, 375, 379, 384, 391, 402, 407, 411, 415, 418, 450, 506, 516, 524, 701, 707, 717, 746, 802, 804, 851, 873, 904, 916, 994, 995, 999, 1005, 1006, 1007, 1008, 1015, 1018, 1021, 1023, 1026], "dem\u0161ar": 272, "den": [0, 400, 1037, 1038, 1043, 1044, 1045, 1048, 1049], "dendrit": [411, 714], "dendro": 190, "dendro_idx": 190, "dendrogram": [71, 100, 184, 190, 361, 411, 444, 448, 508, 1026, 1048], "denero": 739, "deng": [1040, 1041, 1042], "dengemann": 1037, "dengyong": 904, "deni": [1038, 1039, 1043, 1044, 1045, 1051, 1052], "denni": 1050, "denois": [42, 68, 83, 84, 86, 120, 126, 184, 416, 500, 539, 541, 545, 588, 591, 834, 878, 1026], "denomin": [279, 418, 419, 424, 478, 594, 708, 761, 999], "denot": [167, 388, 393, 397, 409, 411, 415, 418, 592, 593, 595, 804, 810, 818, 827, 881, 882, 989, 994, 997, 1001, 1003, 1005, 1006, 1015, 1018, 1053], "dens": [51, 55, 88, 184, 193, 199, 202, 208, 325, 326, 335, 366, 388, 393, 411, 416, 418, 420, 446, 449, 450, 452, 467, 470, 500, 527, 528, 531, 538, 539, 548, 570, 611, 612, 633, 634, 656, 661, 662, 663, 670, 671, 672, 676, 677, 680, 681, 682, 691, 692, 693, 696, 697, 764, 765, 771, 783, 796, 865, 866, 873, 880, 881, 883, 885, 886, 887, 888, 897, 898, 899, 900, 901, 908, 909, 910, 911, 913, 914, 953, 975, 978, 995, 998, 1001, 1002, 1005, 1006, 1008, 1011, 1015, 1017, 1018, 1019, 1020, 1021, 1026, 1036, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "dense_lasso": 200, "dense_output": [765, 771, 901, 953, 1044], "denser": 447, "densif": 1045, "densifi": [393, 662, 663, 670, 671, 672, 680, 681, 682, 908, 995, 1038], "densiti": [2, 50, 82, 88, 93, 98, 107, 130, 167, 169, 174, 184, 200, 214, 229, 232, 238, 241, 245, 256, 257, 263, 272, 278, 289, 293, 298, 299, 312, 342, 353, 374, 376, 388, 393, 411, 418, 422, 430, 447, 449, 451, 453, 455, 467, 470, 502, 506, 540, 545, 553, 554, 801, 802, 804, 848, 849, 853, 854, 901, 999, 1001, 1004, 1008, 1010, 1011, 1017, 1024, 1026, 1027, 1030, 1031, 1038, 1040, 1044, 1045, 1051, 1052], "density_": 901, "densityestim": 430, "densitymixin": 2, "denton": 1038, "deodhar": 1048, "deoli": 1049, "depart": [179, 411], "depedend": 1053, "depend": [2, 25, 43, 44, 46, 52, 64, 72, 86, 107, 125, 141, 144, 147, 148, 150, 152, 155, 164, 168, 177, 182, 184, 185, 187, 190, 192, 195, 199, 232, 235, 240, 241, 247, 251, 262, 266, 272, 273, 277, 278, 279, 286, 292, 308, 312, 317, 323, 326, 329, 339, 346, 349, 354, 355, 362, 366, 367, 368, 372, 379, 381, 382, 387, 388, 391, 392, 393, 394, 396, 397, 404, 405, 407, 411, 413, 415, 416, 418, 419, 420, 421, 422, 441, 442, 443, 447, 449, 450, 452, 453, 455, 457, 460, 462, 463, 465, 467, 472, 487, 492, 493, 494, 497, 500, 504, 505, 506, 508, 509, 514, 538, 539, 545, 548, 555, 563, 564, 566, 592, 593, 594, 595, 606, 608, 611, 612, 615, 631, 636, 637, 642, 644, 652, 662, 663, 673, 675, 677, 680, 681, 682, 684, 691, 694, 695, 698, 699, 715, 733, 734, 742, 782, 785, 787, 788, 791, 796, 797, 801, 802, 823, 833, 850, 851, 852, 854, 856, 857, 858, 859, 860, 866, 867, 869, 881, 882, 885, 888, 902, 909, 910, 913, 917, 932, 993, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1013, 1017, 1019, 1020, 1021, 1026, 1031, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1051, 1052, 1053], "dependabot": 1054, "dependen": 349, "depict": [135, 274, 418, 1004], "deploi": [266, 329, 366, 396, 405, 410, 1025, 1029], "deploy": [387, 405, 1024, 1025, 1029], "depot": 51, "deprec": [2, 16, 148, 190, 321, 324, 367, 381, 382, 383, 388, 393, 402, 445, 448, 450, 453, 460, 462, 485, 486, 487, 488, 531, 540, 542, 544, 557, 573, 574, 583, 584, 586, 631, 662, 663, 677, 679, 683, 696, 713, 746, 782, 783, 784, 786, 804, 807, 808, 818, 832, 833, 835, 855, 867, 868, 873, 905, 910, 913, 930, 932, 934, 935, 946, 947, 994, 995, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "deprecated_api_refer": 379, "deprecationwarn": 1046, "dept": 376, "depth": [43, 140, 144, 148, 151, 156, 289, 357, 359, 360, 361, 366, 377, 379, 383, 392, 418, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 848, 849, 853, 916, 917, 918, 919, 920, 922, 958, 1010, 1011, 1021, 1038, 1039, 1047], "der": [696, 700, 1002, 1039, 1040, 1044], "derek": 1044, "deriv": [43, 57, 130, 131, 146, 176, 179, 189, 201, 203, 207, 215, 367, 374, 381, 413, 415, 417, 418, 419, 421, 423, 444, 448, 449, 468, 495, 537, 610, 621, 626, 652, 673, 680, 684, 865, 866, 881, 887, 908, 909, 999, 1001, 1002, 1005, 1009, 1011, 1020, 1036, 1037, 1038, 1043, 1044, 1045, 1051], "deros": 1047, "derouich": 1036, "derweh": 1054, "desai": [1043, 1045, 1048, 1049, 1051, 1052], "desalvo": 994, "descamp": 1044, "descend": [143, 631, 1046], "descent": [2, 46, 53, 145, 184, 193, 201, 202, 241, 246, 298, 324, 341, 416, 418, 474, 475, 481, 491, 500, 507, 535, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 635, 643, 650, 651, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 672, 676, 678, 680, 681, 682, 685, 686, 687, 688, 691, 698, 834, 865, 866, 869, 908, 912, 978, 1002, 1009, 1011, 1020, 1026, 1027, 1031, 1036, 1039, 1040, 1041, 1043, 1045, 1047, 1049, 1050, 1051], "descr": [169, 372, 373, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 511, 514, 1044], "describ": [2, 43, 52, 89, 155, 169, 187, 232, 246, 272, 281, 362, 366, 367, 372, 374, 376, 378, 379, 381, 384, 387, 393, 394, 408, 411, 413, 414, 415, 416, 418, 419, 465, 472, 476, 477, 494, 497, 499, 500, 501, 504, 505, 506, 507, 508, 509, 514, 520, 521, 522, 532, 611, 612, 649, 663, 672, 718, 801, 802, 843, 845, 881, 883, 952, 994, 997, 1000, 1001, 1004, 1005, 1007, 1011, 1019, 1020, 1021, 1028, 1044, 1046], "descript": [2, 52, 169, 187, 318, 372, 373, 378, 379, 383, 384, 387, 393, 411, 419, 455, 465, 467, 470, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 511, 514, 548, 634, 680, 766, 769, 782, 1005, 1019, 1020, 1025, 1028, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "descriptor": [393, 512, 513], "deseri": 405, "deserv": [379, 385], "deshmukh": 1049, "deshpand": [1041, 1042], "design": [0, 2, 53, 58, 111, 135, 155, 174, 186, 187, 196, 248, 262, 266, 312, 318, 361, 368, 373, 379, 384, 391, 392, 393, 394, 396, 397, 399, 404, 405, 411, 418, 420, 519, 532, 636, 637, 652, 669, 673, 680, 684, 689, 804, 822, 823, 843, 845, 995, 1001, 1002, 1005, 1006, 1015, 1024, 1025, 1029, 1038, 1045, 1054], "desir": [50, 61, 137, 169, 183, 214, 216, 312, 316, 329, 372, 379, 387, 399, 405, 408, 411, 414, 415, 416, 420, 507, 542, 544, 548, 551, 571, 597, 606, 607, 668, 674, 689, 690, 703, 712, 740, 848, 849, 853, 868, 873, 875, 878, 879, 881, 882, 884, 885, 889, 892, 894, 896, 897, 938, 973, 997, 999, 1002, 1008, 1015, 1019, 1020, 1021, 1036, 1044, 1045, 1046, 1049], "desislava": 1050, "desktop": 377, "despit": [64, 116, 177, 212, 214, 232, 247, 301, 393, 402, 413, 631, 632, 634, 1001, 1008, 1029, 1044, 1045], "dessyvv": 1050, "dest": 326, "destin": 1029, "destroi": [278, 419, 799, 877, 1015], "det": [2, 184, 254, 264, 281, 282, 379, 413, 519, 568, 702, 706, 731, 793, 834, 869, 888, 908, 950, 1026, 1048], "det_curv": [2, 269, 702, 786, 793, 1005, 1048, 1049, 1054], "detail": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 64, 90, 135, 136, 138, 142, 143, 148, 155, 184, 188, 201, 203, 218, 239, 243, 246, 247, 251, 253, 255, 263, 266, 270, 279, 286, 295, 298, 299, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 357, 359, 360, 362, 366, 367, 368, 371, 372, 373, 374, 377, 379, 381, 383, 384, 385, 387, 391, 392, 393, 394, 397, 405, 407, 410, 411, 414, 415, 416, 418, 419, 420, 421, 422, 435, 436, 440, 446, 447, 449, 450, 451, 453, 454, 455, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 475, 500, 508, 528, 535, 539, 540, 541, 543, 545, 546, 547, 548, 549, 550, 552, 553, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 597, 598, 601, 606, 611, 612, 614, 618, 623, 626, 631, 632, 634, 635, 636, 638, 643, 644, 649, 650, 651, 655, 657, 659, 660, 661, 662, 663, 665, 667, 669, 670, 672, 675, 676, 677, 678, 679, 680, 682, 683, 691, 692, 693, 694, 695, 696, 697, 698, 699, 705, 715, 717, 778, 782, 783, 784, 785, 802, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 846, 850, 851, 853, 854, 855, 856, 858, 859, 861, 862, 864, 867, 868, 870, 872, 873, 885, 889, 897, 903, 904, 905, 906, 910, 913, 916, 917, 918, 919, 946, 970, 994, 995, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1018, 1021, 1027, 1028, 1029, 1031, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "detcurvedisplai": [2, 269, 324, 731, 1048, 1049, 1053, 1054], "detect": [2, 14, 42, 47, 49, 58, 70, 96, 98, 111, 112, 113, 142, 144, 151, 184, 196, 218, 228, 240, 254, 264, 266, 272, 275, 281, 282, 293, 312, 318, 329, 341, 374, 377, 379, 383, 391, 393, 409, 410, 411, 413, 415, 419, 433, 449, 452, 467, 469, 472, 473, 476, 477, 478, 479, 491, 492, 494, 496, 500, 514, 516, 519, 526, 541, 542, 543, 550, 567, 568, 592, 595, 600, 635, 643, 681, 702, 706, 731, 793, 834, 854, 858, 869, 878, 881, 882, 886, 887, 888, 908, 912, 997, 1001, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1036, 1039, 1042, 1043, 1044, 1046, 1048, 1049, 1051, 1052, 1055], "detection_error_tradeoff": 1005, "detector": [374, 393, 854], "determin": [2, 48, 50, 53, 57, 80, 88, 111, 135, 137, 141, 150, 167, 176, 187, 194, 195, 210, 217, 272, 285, 312, 317, 346, 355, 361, 362, 378, 379, 381, 388, 392, 393, 408, 409, 411, 415, 416, 418, 419, 420, 421, 434, 440, 444, 445, 446, 448, 450, 452, 453, 459, 462, 463, 464, 468, 472, 473, 475, 476, 477, 478, 479, 485, 486, 487, 491, 494, 496, 499, 501, 507, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 541, 543, 546, 547, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 569, 571, 572, 574, 586, 587, 588, 592, 595, 598, 606, 611, 612, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 639, 640, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 678, 679, 680, 682, 683, 684, 691, 693, 694, 696, 697, 698, 711, 715, 727, 733, 734, 742, 787, 788, 789, 791, 792, 797, 804, 806, 807, 808, 810, 818, 826, 827, 828, 829, 830, 831, 832, 833, 835, 839, 841, 842, 844, 851, 853, 854, 859, 864, 865, 866, 872, 873, 881, 882, 883, 885, 889, 897, 908, 909, 911, 914, 917, 919, 922, 950, 967, 973, 975, 978, 994, 997, 999, 1004, 1008, 1010, 1011, 1013, 1015, 1018, 1019, 1021, 1036, 1041, 1044, 1045, 1047, 1048, 1049, 1055], "determinist": [91, 147, 367, 375, 393, 411, 446, 450, 452, 454, 455, 456, 461, 462, 465, 555, 563, 564, 568, 569, 587, 588, 695, 699, 815, 816, 864, 916, 917, 927, 997, 1001, 1037, 1040, 1042, 1044, 1045, 1048, 1051, 1052], "detlefsen": 1050, "detomaso": 1043, "detriment": [46, 168, 286, 367, 420, 1001], "dev": [180, 187, 232, 277, 282, 377, 379, 383, 385, 387, 946, 947, 1005, 1029, 1032, 1043, 1048, 1051, 1052], "dev0": [377, 383, 1028, 1032], "dev514": 1050, "devansh": [1043, 1044], "devanshkyada27": 1053, "devashish": 1042, "devel": 377, "develop": [0, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 327, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 366, 374, 378, 379, 383, 385, 391, 393, 394, 396, 402, 405, 408, 413, 414, 418, 419, 425, 428, 435, 497, 804, 946, 947, 988, 1001, 1005, 1008, 1021, 1024, 1025, 1026, 1028, 1029, 1036, 1044, 1045, 1046, 1051, 1054, 1055], "developing_estim": 1026, "devi": 1048, "devianc": [2, 146, 149, 214, 232, 327, 418, 557, 562, 563, 565, 566, 569, 652, 673, 684, 725, 727, 728, 751, 753, 756, 917, 919, 1001, 1021, 1037, 1046, 1047, 1049, 1050, 1052], "deviant": [220, 1011], "deviat": [52, 58, 70, 94, 111, 138, 141, 142, 143, 145, 169, 171, 176, 178, 180, 187, 194, 220, 251, 269, 270, 271, 272, 273, 275, 298, 299, 312, 317, 371, 375, 376, 384, 388, 393, 415, 418, 421, 453, 475, 505, 515, 516, 517, 518, 520, 521, 522, 526, 528, 529, 534, 556, 598, 615, 638, 648, 649, 675, 728, 756, 810, 827, 854, 877, 878, 888, 897, 898, 899, 1001, 1005, 1011, 1015, 1042, 1043, 1044, 1047, 1048, 1049], "devic": [415, 586, 1024, 1054], "devnani": 1048, "deweight": 954, "dexter": 1046, "dezub": 1043, "df": [43, 52, 62, 64, 150, 155, 186, 188, 194, 199, 214, 232, 262, 272, 316, 318, 328, 354, 384, 419, 469, 594, 595, 994, 995, 1053], "df_": 232, "df_freq": 232, "df_max_": [62, 64], "df_min_": [62, 64], "df_out": 328, "df_sev": 232, "df_std": 354, "df_test": [214, 232], "df_train": [214, 232], "dfrac": [1009, 1015], "dgemm": 366, "dgesdd": 385, "dhanshre": 1051, "dhillon": [2, 57, 408, 454, 456, 515], "dhingra": [1044, 1045, 1048, 1053], "di": [393, 411, 416, 535, 541, 668, 689, 690, 901, 1040, 1049], "dia": 1053, "diabet": [2, 46, 148, 158, 159, 169, 183, 184, 201, 203, 210, 211, 268, 372, 418, 505, 656, 657, 804, 809, 829, 830, 831, 1013, 1026, 1031], "diabetes_i": 210, "diabetes_x": 210, "diabetes_x_test": 210, "diabetes_x_train": 210, "diabetes_y_pr": 210, "diabetes_y_test": 210, "diabetes_y_train": 210, "diadochokinet": 1051, "diag": [51, 113, 179, 259, 262, 416, 421, 536, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 801, 802, 1001, 1051], "diag_kind": [186, 187], "diagnos": [169, 275, 376, 387, 396, 412], "diagnosi": [169, 275, 376, 855], "diagnost": [169, 190, 275, 372, 393, 410, 504, 716, 830, 831, 1005, 1013, 1024, 1025, 1031], "diagon": [2, 43, 62, 64, 75, 113, 115, 232, 251, 259, 262, 263, 265, 342, 408, 411, 413, 421, 456, 474, 475, 481, 484, 515, 517, 531, 536, 554, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 654, 655, 658, 659, 660, 686, 687, 705, 719, 796, 801, 802, 852, 860, 997, 999, 1001, 1004, 1005, 1008, 1015, 1042, 1044, 1045, 1046], "diagram": [2, 62, 64, 103, 253, 322, 328, 381, 409, 411, 441, 442, 471, 906, 1015, 1047, 1048, 1053, 1054], "diamet": 411, "diamond": 260, "diaz": 1044, "dice": [453, 460, 703, 782, 783, 784, 1008], "dicedist": 703, "dichotomis": 1021, "dickerson": 1037, "dickson": 1043, "dico": 124, "dict": [48, 49, 50, 51, 55, 63, 74, 102, 105, 106, 127, 141, 145, 147, 149, 212, 220, 241, 250, 259, 270, 271, 273, 276, 279, 281, 292, 296, 314, 318, 325, 335, 342, 346, 354, 355, 368, 371, 373, 381, 391, 393, 412, 415, 422, 423, 425, 429, 433, 435, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 500, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 701, 702, 704, 705, 706, 715, 717, 766, 769, 775, 783, 784, 801, 802, 803, 804, 807, 808, 810, 815, 816, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 925, 927, 939, 940, 958, 961, 964, 993, 994, 1005, 1015, 1031, 1036, 1042, 1043, 1052, 1053, 1054], "dict_count_vector": 355, "dict_init": [535, 541, 549, 550], "dict_kei": 630, "dict_learn": [2, 388, 535, 541, 550, 1037, 1044, 1046, 1049, 1050, 1052], "dict_learning_onlin": [2, 549, 1037, 1046, 1049, 1050, 1053], "dict_pos_code_estim": 121, "dict_pos_dict_estim": 121, "dict_pos_estim": 121, "dict_typ": 585, "dictat": 411, "dictionari": [2, 44, 45, 46, 47, 71, 84, 86, 120, 122, 150, 152, 184, 213, 248, 250, 266, 354, 355, 372, 373, 374, 381, 391, 393, 411, 419, 452, 467, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 511, 514, 530, 535, 541, 542, 543, 544, 546, 547, 548, 549, 550, 552, 571, 572, 573, 574, 585, 586, 588, 591, 592, 593, 598, 636, 637, 638, 668, 689, 690, 705, 715, 717, 804, 807, 808, 815, 816, 818, 826, 831, 867, 872, 881, 916, 917, 918, 919, 923, 925, 927, 939, 961, 964, 994, 1001, 1005, 1020, 1026, 1030, 1031, 1036, 1044, 1047, 1048, 1049, 1050, 1051], "dictionarylearn": [2, 416, 541, 543, 544, 546, 547, 548, 549, 550, 1037, 1041, 1043, 1046, 1049, 1050, 1051, 1052], "dictlearn": 1041, "dictvector": [2, 47, 57, 102, 184, 352, 353, 354, 374, 419, 491, 586, 592, 593, 594, 595, 881, 1026, 1036, 1037, 1040, 1046, 1048, 1049, 1052, 1053], "did": [147, 171, 187, 190, 214, 222, 232, 258, 266, 319, 374, 405, 631, 716, 823, 910, 1037, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1051], "didact": [379, 1025], "didi": [1042, 1043, 1044, 1045], "didn": [248, 362, 393, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "die": 1002, "diebold": 272, "diederik": [865, 866, 1009, 1051], "diederikwp": 1051, "diego": [1037, 1038], "diegodlh": [1043, 1044], "diemert": [1029, 1038, 1039], "diesel": [214, 232], "dietterich": [272, 838, 1006], "diff": [382, 1005], "diff_embed": 302, "differ": [2, 25, 43, 44, 46, 49, 51, 53, 54, 58, 61, 64, 66, 67, 70, 71, 72, 74, 76, 77, 78, 80, 81, 82, 85, 86, 88, 89, 90, 91, 93, 97, 98, 99, 100, 102, 103, 104, 106, 111, 115, 116, 118, 119, 121, 123, 124, 126, 128, 129, 130, 135, 138, 140, 141, 143, 144, 145, 147, 149, 150, 151, 155, 156, 157, 158, 160, 162, 164, 169, 170, 171, 172, 173, 176, 177, 178, 182, 183, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 202, 203, 205, 211, 214, 215, 216, 218, 219, 220, 221, 222, 231, 232, 234, 235, 236, 237, 239, 241, 243, 246, 247, 248, 251, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 285, 286, 287, 289, 291, 292, 295, 298, 299, 301, 307, 308, 311, 313, 314, 316, 317, 321, 329, 336, 337, 338, 340, 341, 342, 344, 345, 349, 350, 353, 354, 355, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 382, 383, 384, 386, 387, 388, 392, 393, 397, 399, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 436, 440, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 461, 462, 465, 467, 478, 481, 493, 497, 498, 500, 507, 508, 512, 513, 516, 518, 526, 541, 542, 543, 544, 550, 551, 553, 554, 559, 560, 567, 585, 586, 592, 593, 594, 595, 598, 615, 617, 618, 619, 623, 626, 627, 631, 635, 636, 637, 638, 642, 647, 648, 649, 651, 653, 655, 657, 659, 662, 665, 670, 671, 676, 678, 680, 681, 682, 684, 694, 696, 698, 702, 704, 705, 708, 709, 710, 711, 713, 719, 721, 722, 731, 732, 733, 734, 735, 738, 739, 741, 747, 761, 762, 763, 765, 782, 786, 787, 788, 790, 791, 793, 796, 797, 799, 802, 804, 806, 807, 808, 809, 810, 813, 818, 819, 820, 822, 823, 824, 826, 827, 829, 831, 832, 835, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 858, 861, 864, 868, 873, 877, 878, 880, 881, 882, 883, 884, 885, 886, 888, 889, 893, 894, 895, 896, 897, 898, 899, 908, 909, 910, 913, 916, 917, 918, 919, 961, 968, 994, 995, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1029, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "difference_plot": 277, "differenti": [118, 279, 418, 421, 563, 564, 623, 626], "difficult": [88, 135, 187, 222, 251, 379, 387, 409, 416, 418, 557, 558, 563, 565, 566, 1000, 1002, 1004, 1008, 1010, 1012, 1021, 1029, 1036, 1050], "difficulti": [48, 64, 232, 312, 368, 379, 409, 865, 866, 1004, 1008], "diffus": 176, "digest": [379, 1051, 1055], "digg": [1029, 1043], "digicosm": 0, "digit": [2, 44, 51, 52, 65, 71, 74, 80, 84, 86, 89, 90, 92, 94, 95, 97, 104, 105, 124, 140, 159, 167, 169, 184, 204, 205, 221, 230, 233, 234, 236, 238, 245, 246, 260, 265, 270, 271, 274, 296, 301, 302, 306, 308, 309, 327, 330, 333, 354, 372, 379, 385, 411, 417, 418, 420, 444, 448, 450, 506, 545, 548, 553, 570, 662, 692, 693, 694, 695, 696, 701, 708, 709, 717, 721, 722, 741, 797, 799, 834, 850, 857, 864, 868, 869, 878, 888, 894, 901, 904, 913, 920, 921, 922, 1002, 1005, 1008, 1010, 1018, 1026, 1031, 1040], "digraph": 920, "dijkstra": [388, 692, 1002], "dilemma": 1000, "dillon": [1044, 1045, 1046], "dilut": [190, 376], "dilutedsauc": 1044, "dim": [223, 245, 300, 301, 303, 338, 339, 531, 703, 1053], "dim_reduction_method": 301, "dimens": [2, 37, 48, 51, 52, 54, 72, 75, 86, 113, 115, 118, 121, 169, 173, 175, 177, 179, 188, 198, 199, 212, 236, 238, 241, 245, 246, 252, 258, 259, 296, 297, 301, 315, 346, 353, 354, 355, 374, 376, 380, 393, 411, 416, 417, 421, 423, 445, 446, 448, 450, 451, 452, 455, 467, 468, 485, 486, 487, 497, 498, 519, 528, 529, 533, 534, 537, 545, 553, 586, 587, 588, 589, 591, 593, 601, 615, 623, 626, 645, 648, 663, 694, 695, 696, 698, 699, 703, 768, 829, 848, 849, 853, 867, 900, 901, 902, 910, 911, 912, 913, 914, 934, 935, 936, 967, 975, 978, 995, 997, 999, 1001, 1002, 1003, 1006, 1008, 1009, 1011, 1017, 1020, 1024, 1043, 1045, 1046, 1048], "dimension": [2, 11, 37, 45, 48, 49, 57, 67, 75, 79, 87, 88, 90, 91, 95, 101, 103, 105, 106, 115, 116, 119, 121, 128, 129, 135, 140, 153, 169, 171, 173, 174, 178, 184, 199, 210, 215, 231, 233, 235, 236, 238, 241, 245, 246, 249, 258, 259, 293, 296, 300, 302, 314, 339, 346, 353, 362, 366, 371, 374, 375, 376, 379, 388, 393, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 448, 450, 452, 468, 472, 476, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 501, 504, 505, 506, 508, 509, 514, 519, 523, 536, 538, 539, 542, 543, 544, 545, 548, 551, 553, 567, 570, 577, 603, 611, 635, 644, 645, 646, 656, 692, 693, 694, 695, 696, 697, 698, 700, 703, 714, 729, 801, 802, 804, 834, 848, 849, 850, 853, 856, 857, 864, 868, 869, 872, 878, 883, 888, 900, 901, 902, 908, 912, 952, 990, 996, 997, 1000, 1001, 1006, 1007, 1011, 1017, 1018, 1019, 1020, 1021, 1026, 1027, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1048, 1051, 1052], "dimensionalityreduct": 376, "dimensionalityreductiondimension": 399, "diminish": 419, "dimitri": [1049, 1050, 1051, 1052, 1053], "dimmick": 376, "dinga92": 1054, "dingwal": 1043, "dionisi": 1050, "diop": 1046, "dipan": 1054, "direct": [51, 115, 116, 121, 123, 129, 169, 220, 257, 263, 269, 301, 310, 317, 342, 347, 377, 379, 380, 383, 387, 394, 397, 411, 414, 416, 419, 420, 455, 465, 474, 475, 481, 538, 545, 553, 592, 593, 595, 606, 645, 692, 857, 999, 1000, 1001, 1006, 1008, 1010, 1025, 1036, 1039], "direction": 1054, "direction_vector": 310, "directli": [0, 45, 57, 64, 80, 89, 103, 140, 144, 169, 179, 199, 201, 214, 220, 232, 242, 277, 310, 312, 325, 328, 329, 355, 362, 366, 377, 379, 380, 381, 383, 385, 392, 393, 394, 407, 408, 409, 411, 412, 413, 414, 415, 419, 421, 445, 455, 465, 467, 468, 472, 477, 531, 571, 572, 573, 574, 597, 601, 615, 624, 636, 647, 650, 651, 656, 657, 664, 665, 666, 667, 668, 681, 685, 688, 694, 778, 782, 785, 796, 797, 803, 804, 807, 808, 818, 832, 833, 835, 851, 853, 867, 868, 869, 875, 885, 887, 890, 897, 994, 1001, 1003, 1008, 1010, 1012, 1015, 1020, 1021, 1025, 1036, 1044, 1045, 1047, 1048, 1049, 1052, 1053, 1055], "director": 1029, "directori": [0, 2, 47, 294, 373, 377, 379, 381, 383, 385, 387, 393, 397, 412, 444, 448, 453, 489, 495, 503, 868, 869, 1050], "direr": [1039, 1040, 1043, 1044], "dirichlet": [2, 42, 45, 184, 257, 258, 263, 267, 419, 491, 540, 542, 544, 592, 595, 801, 1024, 1026, 1030, 1031, 1036, 1041, 1042], "dirichlet_distribut": [257, 801, 1004, 1042], "dirichlet_process": [257, 263, 801, 1004, 1042], "disabl": [139, 248, 266, 319, 328, 353, 377, 379, 402, 419, 452, 463, 471, 541, 542, 543, 550, 563, 564, 565, 566, 867, 885, 897, 906, 934, 935, 1015, 1042, 1045, 1049, 1051, 1054], "disadvantag": [416, 421, 1001, 1002, 1009, 1019, 1020, 1021], "disagre": [739, 1012], "disambigu": [379, 836, 905, 1018, 1051], "disappear": [1001, 1036], "disappoint": 43, "discard": [47, 88, 196, 275, 366, 408, 413, 420, 512, 513, 553, 601, 631, 634, 648, 881, 885, 897, 995, 1001, 1044, 1048, 1054], "disclaim": 1024, "disclos": 392, "disconnect": 1049, "discontinu": [43, 391], "discord": [709, 1028], "discount": [2, 374, 411, 730, 760, 1043, 1046], "discounted_cumulative_gain": 730, "discourag": [218, 391, 397, 693], "discov": [354, 411, 416, 419, 422, 447, 451, 1051, 1054], "discoveri": [2, 272, 374, 385, 388, 411, 418, 420, 422, 447, 515, 559, 560, 567, 596, 599, 600, 602, 603, 604, 610, 724, 744, 787, 943, 944, 945, 1005, 1017, 1029, 1050, 1051], "discrep": [419, 1040], "discret": [2, 43, 67, 80, 119, 130, 135, 170, 184, 188, 195, 214, 232, 252, 289, 307, 311, 315, 368, 371, 374, 375, 379, 383, 392, 393, 411, 416, 419, 421, 441, 442, 451, 455, 463, 464, 465, 496, 518, 519, 526, 557, 563, 592, 593, 596, 599, 600, 603, 604, 611, 612, 614, 615, 616, 620, 621, 622, 661, 662, 804, 815, 826, 834, 843, 844, 847, 869, 873, 881, 882, 885, 888, 897, 908, 913, 917, 967, 994, 1001, 1002, 1003, 1005, 1006, 1008, 1021, 1024, 1026, 1031, 1038, 1041, 1049, 1050, 1051], "discrete_featur": [611, 612], "discrim": 214, "discrimin": [2, 12, 48, 49, 65, 109, 110, 111, 112, 113, 129, 164, 166, 169, 184, 192, 229, 235, 249, 262, 301, 376, 409, 418, 478, 516, 553, 554, 570, 635, 787, 857, 994, 1002, 1005, 1008, 1019, 1021, 1026, 1027, 1031, 1039], "discriminant_analysi": [2, 67, 69, 70, 129, 235, 301, 362, 407, 540, 553, 554, 857, 999, 1006, 1036, 1039, 1040, 1041, 1042, 1043], "discriminatori": 409, "discuss": [43, 86, 91, 169, 187, 203, 234, 239, 266, 275, 289, 353, 362, 368, 374, 376, 379, 384, 385, 387, 391, 393, 394, 410, 411, 413, 417, 418, 420, 421, 502, 686, 687, 850, 851, 856, 858, 859, 995, 999, 1001, 1002, 1005, 1008, 1015, 1022, 1025, 1028, 1039], "diseas": [46, 158, 169, 183, 275, 376, 716, 1005], "disentangl": 1002, "disjoint": [409, 411, 412, 440, 708, 735, 759, 761, 1002], "disk": [45, 53, 374, 379, 384, 393, 405], "disp": [43, 66, 68, 137, 150, 151, 152, 265, 275, 285, 295, 317, 322, 328, 339, 344, 441, 635, 701, 704, 705, 857], "disp1": 636, "disp2": 636, "dispar": [694, 698, 1002], "dispatch": [103, 266, 393, 407, 471, 804, 818, 829, 830, 831, 906, 970, 971, 1031, 1051, 1054], "dispatch_next": 970, "dispatch_one_batch": 970, "dispers": [70, 286, 411, 714, 729, 1001], "displai": [2, 51, 62, 64, 70, 72, 80, 93, 103, 112, 113, 115, 116, 121, 141, 151, 152, 155, 182, 184, 187, 188, 202, 232, 240, 241, 251, 255, 261, 269, 273, 274, 279, 281, 282, 285, 287, 302, 318, 322, 323, 341, 358, 366, 379, 381, 382, 386, 388, 397, 399, 412, 416, 419, 420, 425, 441, 467, 470, 471, 500, 545, 568, 634, 635, 636, 662, 691, 701, 702, 704, 705, 706, 717, 722, 786, 793, 804, 810, 818, 827, 834, 868, 869, 881, 883, 888, 906, 913, 920, 921, 922, 943, 970, 991, 1005, 1009, 1024, 1026, 1031, 1045, 1047, 1048, 1050, 1051], "display_label": [45, 265, 701, 1048], "dispos": 994, "disproportion": 417, "disput": 141, "disregard": [353, 393, 419, 434, 468, 485, 486, 487, 556, 558, 560, 562, 564, 566, 569, 572, 574, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 725, 726, 727, 728, 789, 841, 842, 851, 859, 866, 877, 878, 884, 885, 888, 893, 896, 897, 899, 909, 911, 914, 917, 919, 1005, 1044], "disrupt": [367, 377], "dissemin": 1024, "dissimilar": [237, 346, 393, 408, 455, 694, 698, 1002, 1042, 1052], "dissimilarity_matrix_": 694, "dist": [111, 235, 245, 383, 472, 473, 474, 475, 476, 477, 478, 479, 703, 767, 773, 848, 849], "dist_": [472, 477], "dist_embed": 302, "dist_linkag": 190, "dist_matrix": 455, "dist_matrix_": 692, "distanc": [2, 37, 74, 75, 88, 90, 93, 94, 98, 100, 108, 112, 126, 169, 182, 184, 190, 200, 215, 217, 234, 236, 239, 245, 251, 292, 294, 295, 300, 302, 304, 305, 312, 317, 321, 325, 326, 346, 353, 354, 366, 376, 388, 391, 393, 408, 411, 413, 416, 417, 421, 422, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 458, 459, 460, 461, 462, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 542, 544, 551, 611, 612, 619, 623, 624, 626, 627, 632, 662, 663, 670, 672, 678, 679, 680, 681, 682, 692, 693, 694, 696, 697, 698, 699, 700, 703, 707, 729, 738, 762, 764, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 782, 783, 784, 785, 796, 797, 800, 804, 818, 837, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 887, 902, 906, 908, 910, 912, 913, 914, 916, 917, 918, 919, 995, 999, 1002, 1003, 1005, 1008, 1011, 1015, 1017, 1019, 1020, 1025, 1026, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "distance_matrix": 190, "distance_metr": [2, 782, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862], "distance_threshold": [76, 444, 448, 1045, 1048], "distancemetr": [2, 393, 417, 851, 1008, 1044, 1048, 1049, 1050, 1053], "distancemetric64": [848, 849], "distances_": [76, 444, 448, 1048], "distant": [411, 696, 713, 1008], "distil": 239, "distinct": [93, 272, 333, 353, 355, 374, 381, 384, 393, 394, 415, 418, 419, 593, 805, 814, 822, 882, 883, 903, 904, 994, 1001, 1008, 1011, 1044], "distinguish": [43, 58, 75, 111, 119, 126, 216, 269, 289, 374, 381, 393, 394, 421, 994, 1005, 1008, 1011], "distort": [37, 213, 245, 376, 409, 885, 897, 902, 1002, 1015, 1017], "distribut": [2, 25, 37, 42, 43, 47, 48, 49, 52, 58, 64, 70, 72, 74, 79, 85, 86, 88, 90, 95, 107, 110, 111, 112, 116, 119, 135, 137, 147, 151, 164, 169, 171, 180, 184, 186, 187, 190, 192, 194, 214, 216, 218, 236, 238, 241, 245, 251, 257, 262, 263, 266, 268, 272, 278, 280, 286, 289, 293, 297, 311, 312, 314, 317, 327, 331, 332, 347, 349, 353, 366, 367, 372, 375, 376, 377, 379, 380, 384, 393, 409, 411, 413, 415, 416, 417, 423, 450, 452, 472, 473, 474, 475, 476, 477, 478, 479, 491, 502, 507, 519, 520, 521, 522, 523, 527, 536, 537, 540, 554, 555, 556, 567, 615, 629, 644, 646, 648, 649, 652, 662, 663, 673, 683, 684, 692, 693, 694, 696, 710, 712, 728, 756, 793, 801, 802, 808, 809, 816, 818, 822, 823, 834, 844, 847, 853, 857, 864, 871, 884, 885, 886, 887, 888, 896, 897, 898, 903, 904, 912, 923, 954, 994, 999, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1017, 1018, 1024, 1025, 1026, 1030, 1031, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "district": [183, 374], "distutils_use_sdk": 377, "ditenberg": 1043, "div": [251, 948], "dive": [116, 379, 385, 994], "diverg": [54, 146, 234, 239, 297, 542, 544, 551, 696, 864, 1002, 1004, 1005, 1010, 1012, 1043, 1044, 1049, 1055], "divers": [0, 393, 418], "divid": [72, 78, 121, 166, 176, 214, 251, 257, 354, 362, 375, 376, 408, 410, 411, 415, 416, 418, 472, 473, 474, 475, 476, 477, 478, 479, 516, 523, 538, 545, 680, 681, 682, 723, 730, 738, 742, 750, 760, 798, 800, 865, 866, 910, 913, 952, 955, 956, 994, 1002, 1004, 1005, 1008, 1015, 1019, 1021, 1036, 1043, 1044, 1047], "dividend": 1005, "divis": [325, 411, 419, 594, 595, 598, 716, 717, 720, 733, 734, 742, 750, 787, 788, 791, 1005, 1040, 1044, 1045, 1048, 1052, 1053, 1055], "divisor": 1005, "divo": 1046, "divyanshu": 1049, "divyaprabha": 1047, "diwakar": 1050, "dixon": [773, 1046, 1047], "dizietasahi": 1046, "di\u1ec5n": 1051, "djipei": [1041, 1042], "dl": 680, "dlabal": 1040, "dll": 1050, "dlovel": 1044, "dmallia17": 1049, "dmitri": [1041, 1043, 1044, 1045, 1049, 1052, 1053], "dmitrij": 1040, "dmytro": 1049, "dn": [0, 1008], "dna": [391, 632, 995], "dnf": 397, "do": [0, 30, 43, 49, 52, 62, 64, 77, 88, 94, 100, 106, 118, 125, 127, 130, 139, 142, 143, 147, 148, 150, 155, 166, 176, 182, 187, 188, 189, 211, 214, 218, 232, 234, 236, 248, 249, 251, 263, 266, 267, 270, 273, 275, 285, 291, 292, 294, 298, 324, 328, 336, 339, 342, 346, 347, 349, 353, 354, 355, 361, 362, 366, 367, 368, 374, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 393, 394, 405, 407, 409, 411, 412, 413, 414, 415, 418, 419, 420, 430, 453, 464, 467, 470, 507, 540, 542, 546, 548, 556, 559, 585, 586, 592, 593, 595, 606, 636, 637, 649, 650, 656, 659, 660, 662, 663, 670, 672, 680, 741, 767, 782, 786, 806, 821, 824, 840, 841, 845, 872, 873, 875, 882, 886, 888, 893, 894, 896, 897, 898, 899, 916, 917, 918, 919, 933, 978, 994, 997, 999, 1001, 1002, 1005, 1006, 1008, 1009, 1013, 1015, 1020, 1021, 1024, 1025, 1028, 1029, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "do_early_stopping_": [565, 566], "doc": [0, 43, 47, 52, 57, 353, 355, 367, 379, 383, 384, 387, 393, 397, 404, 419, 592, 593, 595, 782, 785, 796, 797, 831, 1036, 1040, 1050], "doc_environ": 387, "doc_it": 47, "doc_linux": 387, "doc_topic_distr": [540, 1043], "doc_topic_prior": [416, 540], "doc_topic_prior_": 540, "dock": 1055, "docker": [387, 405, 1049, 1050], "dock\u00e8": [1045, 1046, 1047, 1053, 1054], "docstr": [379, 381, 385, 393, 451, 464, 475, 703, 705, 942, 994, 1008, 1009, 1019, 1036, 1043, 1044, 1049, 1050, 1053], "doctest": [379, 393, 1036], "document": [2, 17, 42, 45, 46, 49, 51, 54, 56, 59, 63, 72, 90, 91, 93, 94, 102, 103, 104, 119, 121, 140, 142, 151, 152, 155, 158, 166, 176, 187, 188, 189, 196, 229, 242, 243, 244, 245, 248, 249, 251, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 309, 310, 318, 322, 325, 326, 328, 333, 335, 349, 355, 361, 366, 367, 368, 373, 374, 375, 377, 378, 380, 381, 382, 383, 384, 385, 387, 391, 393, 394, 397, 399, 402, 405, 408, 411, 416, 419, 422, 447, 450, 451, 452, 453, 456, 460, 467, 491, 492, 503, 505, 515, 525, 527, 540, 548, 568, 592, 593, 594, 595, 608, 635, 643, 647, 662, 670, 672, 678, 680, 700, 701, 703, 707, 709, 721, 741, 762, 763, 773, 782, 783, 784, 797, 799, 804, 807, 808, 810, 818, 827, 838, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 869, 880, 908, 913, 930, 933, 935, 949, 970, 994, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1019, 1022, 1026, 1029, 1037, 1038, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "document_clust": 1042, "document_nam": 57, "doddington": 1005, "doe": [27, 43, 46, 47, 48, 51, 52, 61, 62, 67, 70, 75, 80, 86, 88, 90, 102, 104, 105, 116, 131, 135, 140, 141, 143, 144, 145, 149, 150, 155, 169, 177, 187, 188, 199, 211, 214, 220, 232, 234, 235, 236, 239, 241, 244, 245, 246, 248, 249, 251, 259, 260, 266, 267, 272, 274, 275, 279, 281, 282, 291, 292, 305, 312, 314, 316, 318, 319, 324, 325, 334, 335, 340, 342, 349, 351, 353, 354, 355, 366, 367, 373, 377, 379, 380, 381, 383, 387, 392, 393, 399, 402, 405, 407, 409, 411, 412, 415, 416, 418, 419, 420, 421, 436, 443, 445, 449, 450, 452, 453, 457, 459, 470, 476, 482, 490, 503, 507, 512, 531, 539, 541, 542, 543, 548, 550, 553, 554, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 585, 586, 587, 592, 593, 595, 597, 598, 601, 606, 610, 614, 636, 642, 653, 654, 655, 658, 659, 660, 663, 675, 686, 687, 702, 704, 706, 711, 732, 733, 734, 738, 740, 742, 747, 782, 787, 788, 791, 792, 798, 804, 807, 808, 818, 865, 869, 870, 871, 873, 875, 877, 880, 881, 882, 885, 888, 889, 897, 900, 901, 905, 908, 909, 916, 917, 918, 919, 923, 934, 938, 952, 955, 956, 957, 970, 988, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1019, 1020, 1021, 1036, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055], "doepk": 1043, "doesn": [47, 187, 214, 248, 258, 291, 309, 342, 387, 393, 397, 405, 411, 419, 420, 424, 436, 478, 636, 637, 670, 672, 680, 720, 832, 835, 840, 850, 851, 865, 877, 878, 1004, 1005, 1021, 1040, 1053], "dog": [324, 325, 327, 328, 329, 586, 787, 889, 1015], "dohmatob": [1041, 1042, 1043], "dohri": [1053, 1054], "doi": [192, 214, 232, 379, 411, 680], "dok": [557, 558, 875, 1049], "dokato": 1043, "dolan": 374, "dollar": [187, 374], "dolmatov": 1046, "dolphin": 353, "domain": [150, 214, 286, 318, 393, 396, 415, 639, 725, 727, 728, 805, 806, 811, 812, 813, 1001, 1025, 1055], "domin": [141, 183, 190, 214, 219, 251, 281, 317, 374, 385, 409, 888, 1007, 1015, 1021, 1052], "domingo": [64, 792, 1005], "dominik": [1043, 1052], "don": [51, 64, 87, 102, 150, 187, 235, 248, 249, 266, 272, 285, 292, 334, 339, 343, 353, 354, 366, 373, 379, 381, 383, 385, 387, 392, 397, 402, 410, 412, 419, 431, 650, 656, 836, 916, 917, 918, 919, 927, 968, 994, 1001, 1004, 1006, 1009, 1011, 1019, 1040, 1045, 1052, 1053, 1054], "don86": 1043, "donald": [45, 374, 411, 729, 995], "donat": 242, "done": [0, 45, 47, 48, 50, 52, 54, 55, 57, 83, 85, 86, 124, 150, 166, 169, 176, 177, 187, 188, 192, 194, 199, 200, 218, 231, 247, 248, 262, 270, 273, 276, 281, 292, 315, 323, 353, 354, 355, 362, 367, 373, 377, 379, 381, 383, 386, 387, 388, 391, 393, 402, 411, 413, 415, 416, 418, 444, 445, 448, 453, 455, 475, 485, 486, 487, 488, 492, 539, 565, 566, 586, 610, 611, 612, 632, 634, 636, 638, 647, 648, 649, 663, 726, 745, 801, 802, 804, 818, 820, 823, 824, 826, 872, 886, 989, 994, 995, 998, 1001, 1002, 1005, 1007, 1008, 1009, 1015, 1018, 1019, 1020, 1021, 1025, 1036, 1038, 1043, 1046, 1048, 1052], "dong": 1046, "donn": 1041, "donoho": [693, 697, 1002], "donor": [169, 376], "donovan": 1042, "dor": 1044, "dorin": [96, 451], "dormagen": 1046, "dot": [2, 55, 69, 79, 82, 87, 90, 95, 109, 110, 111, 113, 115, 116, 122, 123, 124, 128, 130, 135, 138, 171, 172, 178, 179, 187, 196, 199, 206, 208, 209, 246, 258, 259, 261, 262, 266, 276, 338, 340, 346, 366, 381, 385, 388, 393, 408, 416, 419, 537, 542, 544, 551, 594, 595, 618, 650, 651, 654, 656, 657, 658, 661, 664, 665, 666, 667, 685, 688, 691, 765, 767, 880, 920, 953, 1003, 1007, 1015, 1019, 1020, 1045], "dot_data": [920, 1021], "dot_product": 953, "dotproduct": [2, 174, 175, 180, 421, 615, 629], "dotson": 1041, "doubl": [70, 141, 284, 379, 393, 416, 542, 544, 545, 551, 848, 849, 859, 988, 995, 1020, 1021, 1036, 1046, 1047], "doubt": [379, 380, 383, 1001, 1011, 1024], "doucet": 1050, "douetteau": 1029, "doug": [1037, 1038, 1048], "dougal": [1038, 1040, 1041, 1043, 1044, 1045, 1046], "dougla": 1044, "douillard": 1043, "doumouro": 1045, "douriez": [1046, 1047], "dowl": 1042, "down": [80, 81, 112, 135, 229, 230, 236, 245, 246, 248, 275, 289, 310, 312, 346, 362, 373, 382, 387, 393, 413, 416, 446, 453, 459, 594, 597, 598, 643, 653, 778, 782, 785, 877, 878, 883, 886, 887, 898, 910, 913, 920, 1001, 1044], "downarrow": 1007, "download": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 372, 374, 376, 377, 383, 384, 387, 399, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 514, 1021, 1031, 1040, 1041, 1044, 1048, 1049, 1050, 1055], "download_20newsgroup": 1040, "download_if_miss": [491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 1043], "download_url": 47, "downsampl": 124, "downsid": 355, "downstream": [43, 111, 319, 355, 419, 535, 538, 541, 545, 546, 610, 881, 1015, 1046], "downweight": [413, 540], "dowon": [1044, 1045], "dozen": [392, 421], "do\u0161ilovi\u0107": [1053, 1054], "dp": [258, 263], "dpgmm": [258, 263, 1036, 1040, 1042], "dpi": [225, 922, 1049], "dpy_debug": 385, "dqd": 385, "dr": [0, 169, 376, 411, 1050], "draft": [379, 394], "drag": 399, "dragon": 1015, "drama": 419, "dramat": 368, "dramsch": 1046, "drastic": [171, 245, 280, 411, 415, 1008, 1018], "draw": [43, 46, 93, 180, 187, 210, 252, 274, 279, 342, 386, 414, 416, 417, 418, 559, 560, 561, 562, 567, 568, 569, 570, 615, 638, 705, 810, 827, 920, 922, 1004, 1024, 1049, 1050], "drawback": [231, 997, 1000], "drawcoastlin": [50, 305], "drawcountri": [50, 305], "drawn": [46, 85, 111, 138, 168, 171, 180, 186, 252, 279, 296, 353, 367, 375, 411, 417, 418, 421, 423, 472, 473, 474, 475, 476, 477, 478, 479, 519, 527, 537, 559, 560, 561, 562, 567, 568, 569, 570, 615, 631, 636, 645, 844, 900, 901, 918, 919, 1001, 1015, 1017, 1039], "drawstyl": [357, 704], "draxu": 1036, "drew": [1045, 1054], "drewhogg": 1051, "drewmjohnston": 1045, "drgfreeman": 1046, "driessen": [413, 472, 477, 1011], "drift": 1025, "drivag": [214, 232], "drive": [368, 416, 417, 553, 1019, 1029], "driven": [0, 190, 1029], "driver": [214, 232, 1051], "drop": [43, 44, 52, 103, 107, 116, 150, 176, 186, 187, 188, 190, 214, 218, 232, 251, 255, 266, 282, 318, 323, 326, 328, 354, 383, 387, 412, 416, 418, 467, 470, 571, 572, 573, 574, 699, 704, 706, 786, 793, 867, 881, 887, 995, 1001, 1005, 1015, 1024, 1036, 1037, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "drop_binary_enc": 881, "drop_dupl": 284, "drop_enc": [881, 1015], "drop_first": 699, "drop_idx": 881, "drop_idx_": [881, 1047, 1051], "drop_intermedi": [704, 706, 786, 793, 1052], "drop_nul": [52, 176], "dropdown": [169, 379, 994], "dropped_result": 144, "dropper": 144, "dror": 1045, "dross": 538, "dro\u017cd\u017c": 1039, "drskd": 1050, "druck": 1050, "drucker": [136, 418, 558], "drug": 1001, "dry": 188, "dryden": 102, "ds_ana": 1049, "ds_cnt": [67, 314, 315], "dschult": 55, "dscullei": 452, "dseg": 102, "dsouza": [1047, 1048, 1049, 1050], "dsquareindia": 1042, "dss": 1029, "dt": [83, 124, 156, 176, 418, 419, 1021], "dtreeviz": 1024, "dtype": [43, 47, 49, 50, 55, 82, 86, 98, 102, 103, 144, 146, 148, 149, 151, 172, 173, 174, 183, 187, 188, 216, 232, 255, 257, 266, 270, 276, 280, 286, 289, 299, 305, 318, 324, 325, 327, 332, 361, 373, 374, 379, 381, 391, 393, 407, 412, 415, 418, 419, 426, 427, 429, 432, 445, 446, 450, 451, 452, 453, 454, 456, 462, 467, 469, 470, 472, 475, 477, 491, 492, 493, 494, 500, 501, 502, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 518, 526, 546, 552, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 585, 586, 589, 590, 592, 593, 595, 597, 598, 605, 606, 610, 631, 632, 633, 634, 636, 637, 644, 645, 648, 649, 650, 656, 660, 661, 664, 665, 666, 667, 668, 669, 675, 677, 679, 701, 703, 709, 718, 719, 735, 742, 745, 759, 790, 810, 829, 831, 832, 844, 848, 849, 851, 859, 873, 879, 881, 882, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 902, 910, 911, 912, 913, 914, 916, 917, 918, 919, 929, 931, 932, 934, 935, 959, 969, 975, 978, 979, 980, 981, 982, 985, 990, 991, 995, 1006, 1015, 1018, 1020, 1037, 1039, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "dtype_exclud": [103, 469], "dtype_includ": [103, 144, 155, 251, 412, 469], "du": [0, 400, 401, 1036, 1037, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "dua": 1045, "dual": [102, 104, 321, 349, 353, 419, 420, 474, 475, 481, 615, 650, 651, 656, 657, 662, 663, 664, 665, 666, 667, 685, 688, 848, 849, 908, 909, 910, 913, 1020, 1038, 1047, 1050, 1052], "dual_coef_": [539, 647, 910, 911, 912, 913, 914, 1020, 1040], "dual_gap": [474, 475, 481, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688], "dual_gap_": [650, 651, 656, 657, 664, 665, 666, 667, 1049], "dualiti": [475, 1001], "dualtre": [848, 849], "duan": [1045, 1047], "duart": [1041, 1049, 1051, 1054], "dubai": 419, "duboi": [1042, 1044], "dubou": 1046, "dubourg": [0, 401, 1029, 1036, 1040], "duchesnai": [0, 401, 1036], "duck": [381, 393, 1046], "ducktyp": [1040, 1053], "duckworth": 1036, "ducout": 1050, "duda": [376, 999], "due": [48, 52, 63, 64, 86, 88, 93, 107, 135, 138, 171, 187, 188, 194, 199, 205, 212, 214, 216, 231, 232, 245, 251, 258, 280, 281, 286, 291, 292, 317, 318, 346, 349, 353, 354, 355, 379, 385, 391, 393, 397, 409, 410, 411, 415, 416, 418, 421, 446, 449, 450, 462, 539, 543, 547, 548, 578, 675, 804, 807, 808, 812, 814, 818, 829, 830, 833, 836, 840, 841, 873, 877, 878, 888, 995, 1001, 1002, 1004, 1005, 1006, 1008, 1012, 1019, 1020, 1025, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "dueck": [73, 443, 457], "dugnat": 1050, "duhaim": 1044, "dummi": [2, 135, 136, 214, 232, 248, 266, 275, 384, 406, 555, 556, 736, 881, 890, 927, 1006, 1015, 1021, 1031, 1037, 1039, 1040, 1041, 1043], "dummy_classifiers_misclassification_error": 135, "dummy_clf": [135, 555], "dummy_leaf_": 445, "dummy_regr": 556, "dummy_sev": 232, "dummybiclust": 426, "dummyclassifi": [2, 135, 266, 275, 556, 736, 1005, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1054], "dummyestim": [563, 564], "dummyregressor": [2, 214, 232, 555, 1005, 1006, 1037, 1039, 1040, 1043, 1044, 1046, 1049, 1050, 1054], "dumont": 1021, "dump": [2, 55, 405, 490, 848, 849], "dump_svmlight_fil": [2, 1036, 1037, 1041, 1051, 1053], "duong": [1053, 1054], "duplic": [367, 378, 379, 380, 393, 411, 422, 447, 451, 452, 519, 639, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 832, 879, 990, 1008, 1036, 1039, 1048, 1050, 1052, 1053, 1055], "dupont": 51, "dupr": [1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "dupr\u00e9": [0, 400, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "duqu": 1049, "durat": [43, 47, 214, 232, 251, 266, 294, 355, 367, 970, 971, 1001], "duration_sec": 49, "duration_test": 353, "duration_train": 353, "dure": [0, 43, 44, 51, 52, 83, 88, 91, 104, 107, 116, 126, 139, 144, 145, 150, 152, 166, 171, 176, 187, 188, 190, 203, 215, 222, 266, 270, 274, 286, 292, 323, 324, 346, 366, 368, 377, 379, 381, 384, 393, 394, 411, 412, 416, 418, 419, 421, 422, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 462, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 617, 618, 619, 621, 623, 624, 626, 627, 629, 631, 632, 633, 634, 636, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 704, 793, 801, 802, 803, 804, 807, 808, 818, 826, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 995, 997, 1001, 1002, 1008, 1015, 1017, 1021, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055], "duron": 1050, "duti": 394, "dutt": 1052, "dutta": [1053, 1054], "duv2014": 421, "duvenaud": [421, 626, 627], "dwight": 1051, "dx": [51, 53, 703], "dx_c": 1012, "dy": [51, 703], "dye": 1049, "dylan": [1043, 1046], "dynam": [51, 52, 188, 559, 560, 561, 562, 567, 568, 569, 570, 583, 584, 680, 681, 682, 1021, 1029, 1042, 1048, 1053], "dzi": 1054, "dziki": 1039, "d\u00b2": 232, "d\u00f6pfert": 1044, "e": [0, 25, 43, 47, 49, 50, 52, 62, 63, 64, 68, 70, 86, 88, 90, 94, 102, 109, 111, 112, 113, 115, 116, 118, 124, 126, 135, 138, 144, 146, 147, 150, 151, 160, 165, 168, 169, 179, 186, 187, 188, 192, 195, 199, 203, 204, 214, 215, 216, 218, 232, 234, 235, 247, 248, 266, 268, 272, 273, 275, 277, 278, 279, 287, 289, 291, 298, 305, 314, 317, 321, 323, 329, 349, 355, 359, 360, 361, 362, 366, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 391, 392, 393, 397, 402, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 440, 442, 444, 446, 447, 448, 450, 452, 453, 457, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 500, 502, 504, 505, 506, 507, 528, 537, 538, 539, 540, 542, 544, 545, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 581, 585, 586, 592, 593, 594, 595, 597, 598, 601, 607, 608, 609, 610, 611, 612, 613, 614, 615, 621, 626, 627, 632, 634, 637, 638, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 691, 692, 694, 696, 698, 701, 703, 705, 708, 709, 712, 713, 720, 732, 733, 734, 735, 742, 745, 746, 759, 767, 771, 782, 789, 792, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 817, 818, 822, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 864, 865, 866, 868, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 903, 904, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 923, 946, 951, 952, 954, 958, 959, 961, 964, 979, 990, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1021, 1025, 1028, 1029, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "e0129126": 373, "e11": 374, "e2": [902, 1001], "e41a1c": [79, 95], "e501": [169, 353], "e_": 416, "each": [2, 27, 43, 46, 47, 49, 50, 51, 52, 54, 55, 58, 62, 63, 64, 68, 70, 72, 76, 78, 79, 81, 82, 86, 88, 91, 93, 94, 102, 103, 105, 106, 107, 115, 116, 118, 119, 121, 122, 126, 128, 129, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 154, 155, 156, 157, 158, 165, 169, 173, 175, 180, 182, 183, 186, 187, 188, 190, 192, 194, 200, 202, 203, 208, 212, 214, 215, 216, 218, 219, 222, 229, 232, 235, 241, 242, 245, 246, 247, 248, 249, 251, 252, 253, 255, 257, 260, 262, 265, 266, 267, 268, 270, 272, 273, 275, 277, 278, 281, 282, 286, 289, 291, 292, 295, 297, 301, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 318, 319, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 336, 342, 346, 349, 354, 355, 357, 358, 361, 362, 366, 367, 368, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 387, 388, 391, 392, 393, 402, 405, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 428, 429, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 464, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 523, 526, 527, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 711, 712, 714, 717, 723, 729, 732, 733, 734, 742, 743, 749, 750, 752, 754, 755, 757, 758, 762, 763, 766, 767, 768, 769, 770, 772, 773, 774, 775, 777, 778, 780, 782, 783, 784, 785, 787, 788, 789, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 925, 940, 946, 947, 952, 954, 955, 960, 961, 980, 981, 982, 985, 994, 995, 997, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1029, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "eager": 266, "eargl": 1050, "earl": 1039, "earli": [43, 54, 79, 95, 134, 135, 141, 143, 184, 193, 201, 316, 322, 393, 418, 444, 448, 452, 466, 493, 500, 540, 541, 542, 543, 550, 557, 558, 563, 564, 565, 566, 631, 649, 660, 670, 671, 672, 680, 682, 696, 754, 834, 865, 866, 978, 1002, 1008, 1015, 1023, 1025, 1026, 1029, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1053], "earlier": [141, 188, 218, 373, 379, 414, 839, 842, 1015, 1034, 1037, 1049, 1051], "earliest": [373, 1002], "early_exager": 1043, "early_exagger": 696, "early_stop": [141, 150, 188, 222, 307, 324, 353, 393, 418, 565, 566, 670, 671, 672, 680, 681, 682, 865, 866, 1019, 1044, 1047, 1050, 1051, 1055], "earn": [186, 187, 394], "earth": [236, 354, 768, 1024], "eas": [104, 190, 262, 317, 379, 382, 385, 1001, 1019, 1024, 1025, 1029, 1047, 1048, 1050], "easi": [188, 222, 232, 260, 270, 272, 342, 353, 362, 374, 379, 385, 387, 391, 392, 405, 411, 418, 504, 508, 514, 875, 994, 1000, 1004, 1012, 1015, 1024, 1025, 1029, 1046, 1051, 1052], "easier": [79, 95, 99, 113, 144, 194, 202, 243, 251, 269, 270, 312, 342, 353, 362, 374, 379, 381, 384, 387, 391, 397, 413, 415, 471, 519, 906, 946, 1000, 1005, 1012, 1021, 1025, 1029, 1045, 1050], "easiest": [381, 387, 412, 1002], "easili": [43, 48, 67, 118, 166, 190, 217, 230, 246, 248, 252, 255, 272, 274, 281, 297, 314, 379, 381, 393, 394, 405, 412, 418, 419, 421, 452, 999, 1001, 1002, 1015, 1019, 1020, 1021, 1028, 1042], "easlii": 242, "ec": [312, 534], "ecat": 374, "echo": [377, 383], "eckert": 1041, "eckhart": 498, "eclf": [156, 157, 418], "eclf1": 573, "eclf2": 573, "eclf3": 573, "ecml": 0, "ecoc": 289, "ecolog": [50, 305, 374, 502], "econom": [186, 187, 272], "econometr": 1001, "econometrica": 1001, "ecosystem": [379, 387, 995, 1023, 1029], "ecuador": [50, 305, 374, 502], "ed": [139, 149, 411, 418, 524, 563, 564, 1017, 1036, 1043], "eddi": [1039, 1053, 1054], "eden": 1051, "edern": [1051, 1052], "edg": [51, 63, 80, 99, 124, 144, 167, 237, 279, 387, 393, 408, 411, 413, 456, 565, 566, 589, 590, 592, 593, 595, 801, 845, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 873, 921, 1015, 1018, 1029, 1042, 1044, 1047, 1050], "edge_model": 51, "edgecolor": [51, 61, 66, 67, 70, 77, 89, 93, 100, 119, 127, 137, 143, 151, 153, 154, 156, 157, 162, 164, 172, 173, 175, 179, 188, 198, 206, 216, 223, 226, 227, 228, 245, 246, 247, 249, 251, 257, 260, 272, 275, 287, 295, 298, 299, 300, 303, 307, 314, 315, 317, 336, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 351, 358, 359, 360, 635], "edit": [77, 376, 377, 378, 379, 383, 387, 391, 397, 534, 538, 838, 999, 1001, 1006, 1012], "editor": [379, 387, 391], "edm": 1001, "edoardo": [1051, 1053, 1054, 1055], "edouard": [0, 401, 1036], "edson": [1005, 1041], "edu": [45, 47, 55, 169, 192, 289, 353, 373, 374, 376, 411, 452, 490, 504, 506, 512, 513, 514, 538, 645, 648, 653, 662, 670, 671, 680, 683, 686, 687, 843, 845, 847, 857, 864, 901, 903, 916, 917, 1001, 1003], "eduardo": [1039, 1041, 1049, 1050], "educ": [186, 187, 328, 379, 500, 720, 1006], "edvardlindelof": 1046, "edward": [176, 618, 623, 626, 1039, 1044, 1045, 1046, 1047, 1051, 1054], "edwinensa": 1042, "edwinwenink": 1049, "eec": [452, 645], "ef": 1051, "eff": 1021, "effect": [43, 45, 64, 72, 74, 75, 80, 86, 90, 95, 98, 101, 105, 116, 119, 124, 126, 135, 145, 147, 149, 151, 152, 160, 168, 171, 172, 176, 178, 184, 185, 187, 188, 190, 199, 207, 209, 214, 215, 216, 218, 219, 220, 231, 233, 236, 238, 244, 251, 255, 258, 262, 264, 266, 268, 272, 273, 274, 277, 280, 281, 286, 292, 304, 310, 311, 313, 316, 322, 330, 342, 346, 347, 349, 350, 351, 353, 354, 355, 362, 367, 379, 381, 384, 391, 393, 409, 411, 412, 416, 417, 418, 419, 421, 422, 440, 445, 446, 447, 449, 450, 452, 453, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 493, 500, 504, 518, 528, 529, 537, 538, 545, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 593, 594, 595, 610, 613, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 694, 695, 696, 705, 707, 757, 789, 801, 803, 805, 806, 809, 811, 813, 815, 822, 823, 826, 827, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 858, 859, 865, 866, 868, 871, 872, 873, 874, 875, 877, 878, 880, 884, 885, 886, 887, 888, 889, 893, 894, 895, 896, 897, 898, 899, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 934, 935, 952, 970, 978, 994, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1012, 1013, 1015, 1018, 1020, 1021, 1026, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "effective_learning_r": [865, 866], "effective_metric_": [850, 851, 852, 854, 856, 858, 859, 860, 1008], "effective_metric_params_": [850, 851, 852, 854, 856, 858, 859, 860], "effective_rank": [525, 528], "efficaci": 203, "effici": [37, 43, 44, 51, 53, 77, 80, 86, 88, 121, 136, 141, 145, 153, 192, 203, 207, 216, 222, 297, 329, 353, 366, 371, 373, 379, 381, 382, 383, 384, 385, 391, 393, 405, 408, 411, 416, 417, 418, 421, 423, 445, 446, 449, 450, 452, 453, 455, 457, 460, 462, 464, 465, 500, 537, 538, 539, 542, 544, 545, 548, 567, 570, 578, 585, 586, 592, 593, 595, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 636, 637, 638, 642, 644, 659, 662, 663, 668, 670, 671, 672, 677, 679, 680, 681, 682, 683, 689, 690, 692, 730, 760, 767, 783, 784, 801, 802, 804, 818, 837, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 873, 885, 897, 901, 908, 917, 919, 952, 994, 997, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "efficiencywarn": [2, 863, 1051], "effort": [323, 379, 385, 1024, 1029, 1047, 1049], "efron": [169, 376, 686, 687, 1001], "eg": 988, "egashira": 1051, "egehan": 1054, "egg": 1044, "egger": 1054, "egin": 411, "egli": [1043, 1053], "egor": 1048, "ehrenheim": [1043, 1044], "eib": [839, 1006], "eickenberg": [1036, 1038, 1039, 1040, 1041], "eig": 1043, "eig_tol": 1037, "eig_val": 257, "eig_vec": 257, "eigen": [455, 553, 677, 695, 699, 999, 1042, 1045], "eigen_solv": [51, 79, 80, 99, 234, 235, 416, 455, 465, 539, 692, 693, 695, 697, 699, 1002, 1037, 1046, 1049, 1050, 1051], "eigen_tol": [80, 455, 465, 695, 699, 1037, 1050, 1051], "eigendecompos": 416, "eigendecomposit": [465, 677, 695, 699, 874, 997], "eigenfac": [42, 54, 184, 250, 374, 416, 498, 545, 701, 717, 818, 834, 888, 913, 1022, 1026, 1036], "eigenface_titl": 45, "eigenmap": [234, 693, 695, 697, 699, 1030, 1031, 1037], "eigensolv": [416, 455, 465, 539, 548, 699, 1002], "eigenvalu": [118, 262, 328, 408, 411, 413, 455, 465, 472, 473, 474, 475, 476, 477, 478, 479, 539, 545, 553, 677, 692, 693, 695, 697, 699, 874, 997, 1002, 1015, 1038, 1042, 1045, 1046, 1047, 1048], "eigenvalues_": [539, 1049], "eigenvector": [2, 42, 80, 116, 118, 184, 257, 411, 455, 465, 538, 539, 545, 554, 692, 693, 695, 699, 952, 1002, 1026, 1036, 1040, 1050], "eigenvector_centr": 55, "eigenvectors_": [539, 1049], "eigh": [70, 257, 258, 259, 262, 263, 416, 423, 537, 539, 1051, 1054], "eighteenth": 411, "eighth": [567, 1011], "eigsh": [416, 539, 1042, 1043], "eiler": 1015, "einsum": 302, "eitan": 1053, "either": [43, 49, 64, 103, 141, 143, 144, 187, 201, 204, 242, 251, 266, 267, 276, 281, 286, 297, 349, 353, 361, 366, 367, 371, 374, 377, 379, 380, 381, 393, 402, 405, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 445, 450, 455, 490, 500, 516, 528, 537, 538, 540, 548, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 586, 587, 588, 592, 593, 594, 595, 597, 598, 601, 606, 611, 612, 614, 615, 626, 631, 634, 636, 637, 654, 658, 660, 668, 680, 682, 686, 687, 694, 701, 702, 706, 710, 711, 716, 724, 728, 730, 731, 732, 733, 734, 739, 742, 743, 744, 756, 760, 773, 778, 782, 786, 787, 788, 789, 791, 792, 793, 798, 804, 807, 808, 810, 818, 827, 828, 829, 830, 831, 832, 833, 835, 838, 868, 898, 899, 905, 908, 909, 916, 917, 918, 919, 923, 961, 965, 993, 994, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1015, 1019, 1020, 1036, 1039, 1045, 1046, 1047, 1050, 1054], "ekaterina": [1042, 1043, 1044, 1045, 1047, 1052], "ekman": [1038, 1042], "el": [532, 1049, 1051, 1052], "elabonga": [1052, 1053], "elabor": 1006, "elad": [668, 689, 690], "elaps": [50, 81, 100, 141, 142, 366, 467, 470, 573, 574, 867, 868, 869, 870], "elapsed_tim": [46, 74, 100, 142, 155, 231], "elast": [2, 25, 184, 193, 199, 200, 203, 205, 208, 225, 248, 285, 474, 475, 481, 505, 528, 650, 651, 656, 661, 662, 663, 664, 665, 666, 667, 672, 680, 682, 685, 686, 688, 994, 1005, 1019, 1026, 1027, 1031, 1036, 1041, 1045, 1046], "elastic_net": 225, "elastic_net_color": 225, "elastic_net_contour": 225, "elasticnet": [2, 46, 49, 196, 205, 280, 285, 366, 385, 391, 416, 651, 656, 661, 662, 663, 664, 665, 666, 667, 672, 680, 682, 685, 1001, 1006, 1019, 1036, 1037, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1054], "elasticnetcv": [2, 199, 393, 402, 650, 656, 664, 665, 666, 667, 685, 1001, 1036, 1039, 1047, 1049, 1050, 1053, 1054, 1055], "elasticnetifittedelasticnet": 196, "elbo": 416, "eldar": [413, 424, 478], "eleanor": 1051, "elec2": 150, "electr": [51, 150, 376, 411], "electron": [57, 169, 374, 376, 542, 544, 551, 631], "element": [2, 87, 121, 138, 139, 149, 243, 265, 271, 279, 281, 322, 354, 357, 361, 376, 378, 379, 381, 388, 394, 408, 411, 415, 416, 418, 419, 422, 447, 449, 455, 467, 490, 512, 516, 518, 524, 526, 530, 531, 535, 541, 542, 544, 554, 561, 562, 563, 564, 568, 569, 570, 571, 572, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 621, 636, 662, 663, 670, 671, 672, 680, 681, 682, 711, 721, 731, 738, 740, 750, 767, 773, 782, 786, 792, 793, 838, 848, 849, 850, 851, 852, 854, 856, 858, 859, 863, 865, 866, 871, 887, 888, 891, 895, 908, 913, 916, 917, 918, 919, 954, 955, 956, 975, 977, 978, 990, 999, 1001, 1005, 1006, 1009, 1012, 1015, 1016, 1017, 1021, 1029, 1041, 1042, 1044, 1046, 1047, 1048, 1050, 1052], "elementari": [902, 1017], "elementwis": [416, 542, 544, 551], "elena": 1043, "eleni": 1049, "eleph": 586, "elev": [100, 118, 127, 188, 211, 234, 238, 494], "eleven": 1025, "elfner": 1050, "elia": 1042, "eliaschiavon": 1051, "eliasi": [1051, 1052, 1053], "elicit": 1005, "elif": [46, 47, 195, 216, 249, 259, 297, 884], "elimin": [2, 18, 160, 163, 166, 169, 184, 267, 270, 271, 277, 286, 296, 411, 415, 451, 506, 519, 597, 598, 601, 606, 662, 807, 808, 823, 868, 878, 990, 1005, 1026, 1027, 1029, 1031, 1036], "elisabeth": [326, 1053], "elizabeth": [1043, 1045, 1048], "elkan": [64, 266, 322, 409, 440, 446, 450, 462, 680, 1042, 1046, 1047, 1049, 1050], "ell": [70, 257, 258, 259, 263, 408], "ell_": 1001, "ell_0": [1001, 1005], "ell_1": [416, 1001], "ell_2": 1001, "ella": 1017, "ellen": 1043, "elli": [1042, 1045], "elliot": [1053, 1054], "elliott": 1043, "ellips": [70, 241, 257, 258, 259, 262, 263, 1011], "ellipsoid": [48, 65, 69, 111, 112, 113, 184, 256, 257, 259, 260, 261, 262, 263, 553, 554, 635, 801, 802, 999, 1004, 1026], "ellipt": [90, 1001], "ellipticenvelop": [2, 48, 241, 473, 476, 477, 478, 479, 567, 1011, 1036, 1039, 1043, 1044, 1049], "eln": 1047, "elong": 411, "els": [2, 43, 47, 50, 51, 52, 57, 70, 76, 79, 82, 88, 89, 95, 113, 125, 138, 143, 144, 147, 148, 179, 187, 188, 190, 203, 206, 229, 232, 235, 241, 245, 247, 248, 249, 250, 251, 267, 272, 273, 276, 283, 292, 297, 305, 307, 308, 314, 321, 346, 353, 354, 361, 379, 383, 385, 418, 419, 421, 423, 431, 440, 452, 512, 524, 537, 573, 622, 629, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 676, 677, 678, 680, 683, 685, 686, 687, 688, 707, 713, 792, 798, 800, 807, 808, 834, 872, 884, 887, 895, 908, 909, 923, 966, 968, 970, 991, 993, 1021], "elsewher": [393, 465, 466, 474, 475, 481], "eltermann": 1039, "elucid": 997, "elvezio": [653, 1001], "elvi": [1041, 1042, 1043], "em": [258, 259, 263, 446, 450, 462, 540, 801, 802, 1004, 1050], "emad": 1054, "email": [0, 353, 379, 391, 394, 419, 843, 1007, 1029], "emami": 1050, "emanuel": 1037, "emb": [171, 235, 245, 301, 372, 373, 465, 699, 1002], "embark": [103, 189, 255, 321, 325, 326], "embed": [2, 26, 37, 71, 74, 79, 80, 89, 95, 140, 171, 184, 233, 236, 238, 240, 292, 301, 331, 332, 393, 411, 444, 455, 465, 492, 506, 548, 553, 570, 586, 643, 692, 693, 694, 695, 696, 697, 698, 699, 700, 857, 869, 878, 900, 901, 902, 997, 1008, 1011, 1017, 1022, 1024, 1026, 1030, 1031, 1036, 1037, 1047, 1048, 1050], "embedding_": [237, 393, 692, 693, 694, 695, 696], "emerg": [411, 1029], "emeritu": 394, "emiko": 1050, "emil": 1050, "emili": [1047, 1048, 1055], "emilyxinyi": 1054, "emipr": 801, "emir": [1051, 1052], "emit": [1047, 1054], "emlearn": 1024, "emma": 1053, "emmanouil": 1050, "emmanuel": [1036, 1043, 1044, 1045, 1053], "emoji": 399, "emp_cov": [109, 111, 113, 481, 484], "emp_cov_contour": 111, "emp_mah": 111, "emphas": [187, 351, 385, 416, 1005], "emphasi": [351, 410, 414, 910, 911, 912, 913, 914, 1012, 1024], "empir": [2, 48, 52, 61, 62, 70, 71, 77, 78, 97, 108, 110, 111, 113, 150, 184, 195, 232, 278, 312, 409, 415, 418, 421, 450, 452, 463, 472, 473, 474, 477, 480, 481, 536, 538, 543, 545, 547, 553, 555, 569, 594, 607, 643, 653, 671, 675, 682, 683, 720, 725, 727, 728, 833, 843, 844, 845, 847, 866, 889, 937, 978, 997, 999, 1005, 1007, 1009, 1015, 1017, 1019, 1026, 1030, 1031], "empirical_covari": [2, 109, 413, 481, 482, 484, 1052], "empiricalcovari": [2, 109, 111, 112, 413, 472, 476, 477, 478, 479, 1011], "emploi": [0, 51, 171, 247, 393, 413, 419, 453, 481, 586, 593, 1029, 1042], "employ": [187, 266], "empti": [94, 102, 130, 226, 334, 366, 374, 383, 411, 423, 431, 486, 537, 565, 566, 635, 720, 815, 873, 913, 915, 923, 929, 934, 935, 942, 963, 964, 995, 1020, 1038, 1040, 1044, 1045, 1047, 1048, 1050, 1051, 1052], "emptyset": 1005, "emul": [187, 387], "en": [55, 61, 387, 535, 541, 599, 640, 668, 672, 675, 689, 690, 699, 709, 850, 851, 856, 857, 858, 859, 886, 902, 916, 917, 1001, 1005, 1020, 1021], "enabl": [2, 16, 52, 66, 83, 104, 150, 188, 222, 236, 248, 314, 322, 324, 325, 327, 328, 329, 350, 377, 379, 384, 387, 391, 393, 397, 402, 407, 411, 412, 416, 418, 419, 452, 467, 471, 538, 539, 545, 563, 564, 565, 566, 567, 583, 584, 594, 595, 606, 614, 801, 802, 804, 807, 829, 830, 831, 832, 833, 835, 868, 869, 881, 882, 905, 906, 908, 909, 910, 911, 912, 913, 914, 923, 964, 971, 995, 997, 1002, 1004, 1005, 1008, 1015, 1016, 1019, 1020, 1025, 1029, 1036, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "enable_cython_pairwise_dist": [471, 906], "enable_halving_search_cv": [2, 147, 283, 284, 323, 383, 807, 808, 994], "enable_hist_gradient_boost": [383, 1045], "enable_iterative_imput": [2, 182, 183, 383, 631, 995, 1045], "enable_metadata_rout": [248, 266, 328, 402, 440, 446, 447, 450, 452, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 537, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 594, 595, 597, 598, 601, 606, 614, 615, 631, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 804, 805, 806, 807, 808, 811, 813, 818, 822, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 867, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 1052], "enable_my_experimental_featur": 383, "enblom": 1054, "enc": [313, 315, 325, 327, 881, 882, 1015], "enc_auto": 889, "enc_high_smooth": 889, "enc_low_smooth": 889, "encapsul": [386, 412, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919], "enclos": 994, "encod": [2, 43, 47, 50, 88, 103, 121, 140, 150, 155, 184, 187, 188, 189, 213, 214, 251, 266, 281, 286, 311, 313, 314, 315, 323, 325, 326, 342, 353, 355, 371, 373, 375, 384, 391, 393, 412, 415, 416, 418, 419, 421, 467, 490, 500, 507, 530, 535, 541, 543, 544, 546, 548, 549, 550, 552, 555, 565, 566, 570, 571, 573, 585, 592, 593, 595, 634, 652, 662, 663, 673, 676, 684, 739, 806, 811, 813, 831, 834, 868, 869, 871, 873, 875, 876, 879, 881, 882, 889, 892, 906, 925, 994, 995, 1001, 1002, 1005, 1007, 1008, 1010, 1019, 1024, 1025, 1026, 1031, 1037, 1038, 1044, 1048, 1050, 1051, 1052, 1053, 1054], "encoded_missing_valu": [155, 189, 882, 1015, 1050, 1051], "encodings_": [327, 889, 1015], "encompass": [393, 453, 459, 559, 560, 1002], "encount": [367, 377, 397, 405, 411, 418, 419, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 565, 566, 585, 843, 844, 845, 847, 881, 979, 1015, 1019, 1024, 1028, 1029, 1044, 1047], "encourag": [187, 202, 218, 307, 342, 378, 379, 391, 1020, 1024, 1054], "encrypt": 1024, "encyclopedia": 1005, "end": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 377, 379, 381, 391, 393, 394, 397, 402, 408, 411, 412, 414, 418, 453, 459, 471, 491, 492, 512, 513, 541, 550, 561, 562, 563, 564, 568, 569, 570, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 665, 666, 667, 685, 686, 687, 688, 804, 807, 808, 818, 825, 829, 866, 868, 906, 916, 917, 918, 919, 956, 958, 988, 994, 997, 1001, 1002, 1004, 1005, 1015, 1017, 1019, 1024, 1029, 1041, 1043, 1046, 1049, 1050], "end_": 47, "end_bodi": 47, "end_d": 47, "end_idx": [51, 237], "end_reut": 47, "end_titl": 47, "end_top": 47, "endian": 1048, "endo": 1049, "endpoint": [53, 313, 345, 639], "enemi": 379, "energi": [51, 150, 387, 864, 1010], "enet": [199, 285], "enet_path": [2, 202, 393, 650, 651, 656, 664, 665, 666, 1038, 1040, 1049], "enet_tol": [474, 475, 481, 1041], "enforc": [43, 51, 70, 86, 121, 150, 176, 208, 301, 366, 379, 413, 416, 418, 428, 434, 512, 531, 535, 541, 543, 546, 547, 549, 550, 552, 561, 562, 565, 566, 568, 569, 872, 887, 916, 917, 918, 919, 934, 935, 995, 1002, 1038, 1044, 1046, 1048, 1052], "enforce_estimator_tags_i": 1046, "eng": 1044, "engag": [385, 394], "engemann": [1038, 1039, 1043], "engin": [42, 75, 140, 144, 150, 176, 184, 188, 215, 366, 373, 376, 411, 417, 419, 467, 500, 566, 643, 677, 705, 825, 831, 866, 867, 869, 872, 873, 878, 881, 883, 887, 995, 997, 1005, 1015, 1026, 1042], "english": [54, 57, 102, 353, 354, 355, 384, 419, 592, 593, 595, 1024, 1025, 1049], "enh": 383, "enhanc": [121, 218, 378, 379, 383, 391, 393, 411, 1005, 1034, 1035, 1036, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "enjoi": [77, 266], "enough": [2, 43, 52, 64, 72, 79, 95, 141, 143, 150, 171, 182, 188, 189, 203, 214, 246, 249, 251, 266, 285, 316, 353, 355, 362, 377, 379, 383, 394, 409, 411, 413, 415, 418, 571, 572, 593, 804, 807, 808, 810, 818, 832, 952, 994, 999, 1002, 1004, 1011, 1015, 1020, 1024, 1029, 1042, 1052, 1053], "enrich": 346, "ensembl": [2, 43, 46, 49, 52, 63, 64, 67, 89, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 182, 183, 188, 189, 190, 214, 235, 241, 250, 251, 253, 254, 266, 269, 284, 289, 291, 314, 318, 321, 322, 323, 324, 325, 326, 327, 328, 353, 358, 359, 362, 366, 383, 384, 392, 393, 402, 405, 409, 411, 415, 420, 440, 508, 519, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 636, 637, 639, 662, 706, 807, 808, 826, 834, 838, 839, 869, 872, 881, 912, 916, 918, 919, 944, 994, 1005, 1006, 1011, 1012, 1021, 1024, 1025, 1026, 1027, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "ensemble_clf": 139, "ensemble_jaccard_scor": 291, "ensembleregressorsensembl": 399, "ensur": [0, 52, 58, 76, 90, 113, 119, 135, 141, 142, 150, 190, 214, 235, 266, 267, 275, 309, 361, 362, 366, 367, 379, 381, 383, 384, 385, 394, 397, 402, 407, 409, 411, 412, 415, 423, 472, 537, 538, 545, 615, 631, 700, 709, 786, 792, 793, 829, 901, 934, 935, 946, 947, 952, 959, 970, 1001, 1002, 1005, 1015, 1021, 1038, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "ensure_2d": [934, 935], "ensure_all_finit": [782, 932, 934, 935, 1055], "ensure_min_featur": [934, 935], "ensure_min_sampl": [934, 935], "ensure_non_neg": [935, 1055], "entail": [266, 392, 886, 888, 1019], "enter": [380, 383, 411, 445, 1012], "entertain": 1001, "entic": 187, "entir": [68, 182, 214, 222, 266, 310, 312, 322, 346, 361, 362, 373, 380, 393, 405, 411, 415, 417, 419, 475, 496, 538, 592, 593, 594, 595, 651, 655, 657, 659, 662, 663, 665, 667, 669, 670, 672, 680, 686, 687, 738, 800, 826, 836, 837, 840, 865, 867, 868, 881, 893, 894, 896, 897, 898, 899, 927, 973, 995, 1005, 1015, 1019, 1021, 1045, 1046], "entireti": 393, "entiti": [394, 730, 760], "entitl": [286, 295, 410, 450, 615, 850, 997], "entri": [0, 103, 107, 150, 155, 183, 187, 188, 266, 268, 321, 354, 362, 383, 385, 387, 392, 393, 408, 409, 411, 416, 418, 421, 466, 467, 470, 475, 500, 535, 536, 541, 549, 550, 565, 566, 592, 595, 598, 615, 624, 636, 642, 644, 651, 655, 657, 659, 660, 663, 665, 667, 668, 669, 677, 679, 686, 687, 689, 690, 703, 708, 711, 713, 716, 719, 720, 722, 730, 733, 734, 735, 738, 739, 742, 747, 760, 762, 763, 787, 789, 792, 793, 796, 797, 817, 832, 848, 849, 856, 857, 858, 859, 860, 879, 885, 897, 990, 994, 995, 1001, 1005, 1008, 1015, 1020, 1025, 1043, 1046, 1047, 1049, 1053], "entropi": [2, 50, 64, 253, 284, 305, 323, 331, 332, 362, 374, 407, 411, 418, 423, 502, 537, 561, 568, 611, 612, 662, 721, 740, 741, 745, 799, 916, 918, 1001, 1002, 1005, 1009, 1021, 1038, 1040, 1044, 1045, 1050, 1052, 1053, 1055], "entrypoint_to_bug_reproduc": 380, "enumer": [43, 47, 49, 50, 51, 53, 54, 55, 57, 62, 64, 66, 67, 72, 74, 75, 76, 77, 78, 79, 83, 88, 92, 93, 94, 95, 98, 102, 110, 112, 113, 116, 122, 124, 130, 138, 141, 145, 146, 148, 149, 150, 160, 173, 175, 180, 190, 195, 197, 205, 214, 235, 236, 239, 241, 246, 250, 251, 257, 258, 259, 260, 262, 263, 266, 267, 274, 275, 281, 282, 297, 301, 302, 304, 310, 314, 315, 331, 332, 334, 336, 340, 342, 348, 349, 353, 358, 374, 375, 563, 564, 568, 569, 785, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825], "env": [377, 387, 397, 398], "environ": [0, 3, 51, 63, 103, 104, 140, 142, 151, 152, 155, 158, 166, 176, 187, 188, 189, 196, 242, 243, 244, 248, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 310, 318, 322, 323, 325, 326, 328, 333, 361, 366, 374, 376, 377, 379, 381, 382, 385, 391, 397, 398, 407, 412, 503, 1025, 1029, 1031, 1043, 1044, 1053], "environment": [50, 199, 232], "environmenterror": 1052, "eom": 449, "eoss": 0, "ep": [67, 79, 80, 82, 88, 98, 198, 202, 237, 245, 391, 411, 422, 447, 453, 458, 474, 475, 481, 635, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 685, 686, 687, 688, 694, 698, 718, 745, 860, 900, 901, 902, 1017, 1051, 1052], "epanechnikov": [297, 417, 848, 849, 853], "ephemer": 387, "ephrem": 1051, "epimorph": 1053, "epistem": 52, "epoch": [229, 393, 540, 670, 671, 672, 680, 681, 682, 865, 866, 1019, 1043, 1044, 1049], "epp": [411, 708], "eps_": [664, 666], "eps_rang": 245, "epsilon": [2, 88, 98, 197, 237, 247, 327, 348, 416, 449, 458, 647, 653, 671, 680, 682, 750, 865, 866, 909, 911, 914, 998, 1001, 1005, 1009, 1019, 1020, 1036], "epsilon_": 846, "epsilon_i": 1005, "epsilon_insensit": [671, 680, 682, 909, 1001, 1019], "epsilon_valu": 197, "eq": [266, 424, 478, 725, 727, 728], "equal": [43, 50, 51, 63, 70, 72, 74, 86, 93, 111, 116, 123, 135, 147, 174, 187, 215, 216, 225, 231, 252, 259, 262, 265, 270, 272, 281, 302, 314, 318, 342, 344, 350, 354, 374, 375, 379, 381, 393, 408, 409, 411, 415, 416, 418, 419, 424, 440, 443, 444, 445, 446, 448, 450, 452, 457, 462, 463, 466, 472, 477, 482, 483, 507, 516, 519, 523, 536, 537, 538, 543, 545, 547, 548, 553, 554, 555, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 592, 597, 598, 601, 603, 604, 611, 612, 629, 632, 633, 636, 637, 638, 639, 641, 645, 646, 653, 662, 663, 675, 703, 722, 724, 733, 787, 791, 792, 798, 800, 804, 805, 807, 808, 817, 818, 822, 829, 836, 840, 841, 848, 849, 850, 851, 856, 857, 858, 859, 860, 865, 866, 871, 872, 873, 880, 883, 886, 887, 888, 889, 891, 898, 905, 908, 909, 915, 916, 917, 918, 919, 940, 952, 979, 985, 999, 1001, 1005, 1006, 1008, 1009, 1011, 1015, 1019, 1020, 1021, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "equat": [2, 64, 349, 379, 411, 416, 418, 561, 562, 563, 564, 568, 569, 570, 594, 631, 662, 663, 686, 687, 691, 767, 888, 916, 917, 918, 919, 995, 1002, 1005, 1010, 1044], "equi": 1004, "equiangular": 1001, "equidist": [144, 696], "equip": 1029, "equiv": [997, 1020], "equival": [43, 54, 70, 88, 90, 144, 151, 168, 171, 176, 187, 199, 232, 262, 281, 292, 317, 346, 355, 362, 366, 385, 388, 392, 393, 405, 411, 412, 413, 414, 415, 416, 418, 420, 421, 444, 446, 447, 448, 449, 450, 452, 453, 460, 467, 472, 477, 513, 538, 545, 562, 565, 566, 567, 568, 569, 592, 595, 617, 620, 623, 625, 628, 650, 651, 652, 656, 658, 662, 663, 670, 671, 672, 673, 676, 680, 681, 684, 687, 691, 692, 697, 712, 713, 727, 738, 746, 751, 752, 753, 765, 774, 783, 784, 801, 802, 807, 808, 812, 814, 839, 842, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 865, 871, 877, 878, 880, 883, 884, 885, 886, 888, 896, 898, 899, 938, 950, 990, 994, 999, 1001, 1002, 1003, 1005, 1011, 1015, 1019, 1020, 1021, 1044, 1045, 1046, 1047, 1049, 1050, 1053, 1055], "er": 574, "era": 1025, "eras": [563, 564, 650, 656, 662, 664, 666, 670, 671, 672, 680, 681, 682, 865, 866], "ereg": [158, 418], "eren": [0, 1038, 1039], "eric": [1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054], "ericellwang": [1049, 1050], "erich": [453, 1040, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1054], "erick": 1041, "erik": [374, 1029, 1039], "eriksson": 1043, "erin": [289, 1048], "erl": 289, "erlbaum": 266, "erling": 1041, "ermolaevpa": [1050, 1051], "ernst": [418, 561, 562, 569, 570, 918, 919], "err": [55, 115, 125, 135], "err_cov_emp_ful": 112, "err_cov_emp_pur": 112, "err_cov_mcd": 112, "err_loc_emp_ful": 112, "err_loc_emp_pur": 112, "err_loc_mcd": 112, "errno": 397, "erron": [111, 112, 416, 1001, 1037, 1044, 1048], "error": [2, 15, 25, 30, 43, 44, 46, 52, 53, 55, 64, 107, 109, 110, 112, 125, 130, 134, 138, 141, 142, 144, 146, 148, 150, 169, 171, 182, 184, 186, 187, 199, 203, 207, 209, 210, 214, 216, 219, 220, 221, 228, 232, 244, 247, 248, 254, 263, 264, 266, 268, 272, 273, 277, 281, 282, 287, 289, 298, 299, 325, 328, 341, 349, 353, 354, 367, 376, 377, 379, 381, 382, 383, 384, 388, 391, 393, 402, 405, 409, 411, 412, 413, 415, 416, 418, 419, 420, 440, 446, 447, 450, 452, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 507, 519, 528, 535, 537, 538, 541, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 585, 586, 592, 594, 595, 596, 599, 600, 602, 603, 604, 610, 614, 615, 633, 636, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 692, 693, 694, 696, 697, 700, 702, 705, 706, 713, 715, 716, 724, 725, 727, 731, 744, 747, 748, 749, 750, 751, 752, 754, 755, 757, 768, 782, 786, 792, 793, 794, 795, 803, 804, 805, 806, 807, 808, 810, 811, 813, 818, 822, 826, 827, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 858, 859, 860, 863, 865, 866, 867, 868, 869, 871, 873, 874, 875, 880, 881, 882, 887, 888, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 932, 933, 934, 935, 938, 967, 988, 991, 993, 994, 995, 996, 998, 999, 1000, 1002, 1006, 1009, 1013, 1015, 1019, 1020, 1021, 1026, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "error_": [535, 547], "error_i": [141, 273], "error_norm": [110, 112, 472, 473, 474, 475, 476, 477, 478, 479], "error_on_new": 633, "error_r": 139, "error_scor": [804, 807, 808, 810, 818, 827, 830, 831, 832, 835, 994, 1040, 1044, 1048, 1051], "error_x": [141, 273], "errorbar": [72, 94, 105, 110, 112, 168, 177, 178, 294, 334, 345, 810, 827], "errorbar_": [810, 827], "errorbar_kw": [810, 827], "errorbarcontain": [810, 827], "errors_coef": 218, "errors_lines_": 705, "erwan": 1053, "erwin": 1039, "escal": 394, "escalant": 1005, "escalera": 1005, "escap": [1049, 1051], "eschibli": 1048, "eschlbeck": 1050, "esdi": 57, "esp": [411, 1036], "especi": [43, 47, 52, 88, 89, 144, 147, 150, 187, 214, 248, 318, 326, 354, 362, 367, 373, 379, 387, 391, 393, 409, 411, 419, 446, 452, 505, 542, 561, 562, 563, 564, 568, 569, 570, 650, 651, 652, 654, 656, 657, 658, 662, 663, 664, 665, 666, 667, 673, 684, 699, 709, 750, 843, 844, 845, 846, 847, 916, 917, 918, 919, 1001, 1007, 1008, 1015, 1029, 1039, 1044, 1048, 1049, 1050], "espinoza": [1037, 1038], "essenc": [611, 612, 747, 1002, 1005], "essenti": [0, 272, 326, 377, 381, 411, 415, 416, 513, 1005, 1008, 1025, 1029, 1044], "est": [155, 187, 206, 229, 248, 250, 266, 286, 314, 323, 362, 405, 418, 566, 739, 873, 957, 994, 1005, 1015, 1019, 1047, 1048], "est1": [393, 636], "est2": [393, 636], "est_freq": 232, "est_idx": 314, "est_sev": 232, "establish": [387, 391, 394, 995], "estefania": 1050, "ester": [411, 422, 447], "estev": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "estim": [2, 4, 7, 8, 13, 16, 25, 29, 30, 31, 35, 43, 45, 46, 47, 48, 49, 50, 51, 52, 61, 63, 64, 66, 69, 70, 72, 73, 79, 82, 87, 88, 89, 90, 91, 94, 96, 103, 104, 105, 106, 115, 116, 121, 122, 123, 128, 130, 134, 135, 139, 140, 141, 142, 143, 145, 147, 149, 150, 152, 155, 156, 157, 158, 167, 168, 169, 170, 171, 172, 174, 176, 178, 180, 181, 182, 186, 187, 193, 196, 199, 201, 203, 204, 209, 214, 216, 218, 219, 221, 222, 231, 232, 240, 241, 242, 247, 253, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 269, 270, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 299, 303, 312, 314, 324, 325, 327, 329, 345, 346, 349, 354, 355, 358, 360, 366, 367, 368, 371, 377, 379, 382, 383, 386, 387, 388, 389, 397, 402, 405, 406, 409, 410, 411, 414, 416, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 493, 494, 496, 499, 500, 502, 505, 506, 528, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 580, 581, 583, 584, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 691, 692, 693, 694, 695, 696, 701, 702, 704, 705, 706, 711, 712, 715, 716, 717, 720, 722, 724, 725, 727, 728, 730, 731, 732, 733, 734, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 818, 820, 822, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 896, 897, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 924, 925, 926, 927, 928, 933, 934, 935, 937, 939, 940, 941, 944, 946, 947, 948, 957, 960, 961, 962, 964, 988, 992, 993, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "estimate_bandwidth": [2, 79, 96, 411, 451, 464], "estimated_coef": [650, 651, 656, 664, 665, 666, 685, 686, 687], "estimator_": [217, 248, 286, 431, 557, 558, 559, 560, 561, 562, 567, 568, 569, 570, 597, 598, 601, 675, 803, 826, 905, 988, 1051], "estimator__alpha": 147, "estimator__max_depth": [393, 994], "estimator_alpha": 143, "estimator_check": [2, 321, 381, 393, 946, 947, 1043, 1044, 1046, 1047, 1050, 1051, 1052, 1054, 1055], "estimator_conf": 49, "estimator_config": 49, "estimator_dict": 222, "estimator_errors_": [135, 557, 558], "estimator_html_repr": [2, 381, 412, 1047, 1048, 1049, 1050, 1053], "estimator_modul": 381, "estimator_nam": [49, 222, 381, 386, 441, 580, 702, 704, 706, 933], "estimator_samples_": 1047, "estimator_weights_": [135, 557, 558], "estimatorcv": [393, 1025], "estimators_": [142, 143, 206, 229, 249, 321, 393, 418, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 836, 837, 838, 839, 840, 841, 842, 1037, 1043, 1050], "estimators_early_stop": 145, "estimators_features_": [559, 560, 567], "estimators_samples_": [559, 560, 561, 562, 567, 568, 569, 570, 1042, 1044, 1047, 1053], "est\u00e8v": [0, 400, 1044, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "est\u00e8vc": 1054, "esuli": [1043, 1048], "esvhd": 1045, "et": [0, 2, 50, 109, 110, 135, 149, 201, 305, 374, 376, 408, 411, 413, 416, 418, 419, 420, 454, 502, 523, 524, 532, 539, 545, 548, 567, 686, 687, 723, 724, 843, 845, 865, 866, 901, 951, 952, 1001, 1002, 1005, 1011, 1015, 1017, 1020, 1021, 1044, 1052], "eta": [416, 540, 680, 681, 682, 1009, 1019, 1041], "eta0": [672, 680, 681, 682, 1019], "eta_0": 1019, "etc": [2, 144, 214, 232, 267, 276, 277, 329, 362, 366, 368, 379, 381, 384, 391, 392, 393, 402, 405, 408, 412, 415, 419, 492, 507, 531, 561, 562, 568, 569, 672, 680, 696, 722, 775, 804, 818, 839, 842, 872, 883, 916, 917, 918, 919, 920, 922, 934, 935, 946, 994, 995, 999, 1005, 1008, 1024, 1025, 1029, 1036, 1043, 1045, 1046], "eth": 1046, "ethan": [1039, 1042], "ethic": 150, "etiquett": 379, "etl": [1025, 1029], "euclidean": [2, 37, 75, 90, 91, 200, 245, 251, 292, 295, 300, 321, 326, 346, 354, 408, 411, 416, 417, 418, 419, 421, 443, 444, 447, 448, 449, 453, 455, 460, 463, 466, 535, 541, 549, 550, 593, 619, 623, 626, 627, 680, 682, 694, 696, 699, 700, 703, 766, 767, 773, 774, 775, 776, 782, 783, 784, 785, 796, 797, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 902, 995, 999, 1003, 1006, 1008, 1017, 1025, 1040, 1043, 1044, 1045, 1046, 1052, 1053], "euclidean_dist": [2, 237, 245, 381, 407, 453, 457, 460, 692, 698, 766, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 1036, 1041, 1044, 1045, 1053, 1055], "euclideandist": 703, "eugen": [376, 1037, 1042], "eunji": 1044, "eunseop": 1046, "euro": 329, "europ": [419, 1015], "european": [730, 760, 1005], "eustach": [1029, 1038, 1039], "eval_and_print_metr": 335, "eval_gradi": [179, 421, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "evalml": 1024, "evalu": [2, 27, 29, 43, 44, 45, 49, 50, 61, 68, 71, 73, 77, 78, 82, 88, 97, 103, 104, 124, 135, 141, 142, 144, 145, 147, 150, 164, 165, 174, 184, 190, 192, 195, 203, 216, 221, 232, 240, 264, 265, 269, 270, 271, 272, 275, 277, 278, 279, 281, 283, 284, 286, 287, 291, 299, 301, 305, 312, 317, 319, 323, 327, 328, 335, 342, 346, 353, 362, 372, 374, 381, 385, 393, 396, 412, 419, 420, 421, 450, 452, 467, 469, 491, 494, 496, 497, 500, 513, 524, 540, 555, 565, 566, 567, 571, 572, 595, 598, 606, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 635, 636, 637, 638, 651, 657, 663, 677, 679, 701, 703, 705, 706, 707, 708, 709, 715, 717, 718, 719, 721, 722, 730, 731, 740, 741, 746, 758, 759, 760, 761, 790, 799, 801, 802, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 834, 835, 839, 845, 848, 849, 854, 866, 868, 869, 875, 878, 881, 882, 886, 887, 888, 893, 894, 896, 897, 898, 899, 910, 913, 916, 937, 946, 978, 997, 1001, 1003, 1007, 1008, 1011, 1012, 1013, 1016, 1019, 1021, 1024, 1026, 1029, 1030, 1031, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "evaluate_everi": 540, "evaluate_model_and_stor": 318, "evaluation_std": 354, "evaluations_std": 354, "evelyn": 1054, "even": [37, 43, 52, 53, 64, 75, 77, 85, 107, 116, 124, 141, 147, 177, 187, 188, 189, 203, 214, 215, 222, 232, 238, 239, 247, 248, 258, 278, 289, 312, 314, 316, 317, 336, 349, 353, 354, 355, 362, 368, 374, 378, 379, 380, 381, 383, 384, 387, 391, 393, 405, 409, 411, 412, 413, 415, 416, 418, 419, 421, 444, 446, 448, 449, 450, 451, 452, 462, 464, 536, 539, 561, 562, 563, 564, 568, 569, 586, 593, 598, 631, 632, 634, 643, 662, 663, 699, 704, 709, 716, 747, 765, 771, 778, 782, 785, 790, 792, 831, 868, 869, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 916, 917, 918, 919, 952, 973, 994, 995, 997, 999, 1001, 1004, 1005, 1008, 1010, 1011, 1013, 1015, 1017, 1019, 1020, 1021, 1029, 1043, 1044, 1045, 1048, 1050, 1053], "evenli": [2, 47, 74, 85, 147, 190, 218, 267, 419, 956], "event": [0, 43, 214, 232, 275, 409, 411, 592, 593, 640, 843, 939, 1001, 1006, 1007, 1024, 1029, 1042], "eventu": [7, 260, 411, 420, 597, 1029], "ever": [141, 154, 388, 418, 1029], "everi": [43, 121, 150, 176, 182, 212, 215, 235, 247, 258, 263, 281, 324, 328, 362, 374, 379, 381, 383, 387, 393, 409, 411, 413, 415, 416, 419, 443, 457, 512, 535, 540, 543, 549, 561, 563, 564, 565, 566, 568, 594, 595, 607, 650, 651, 653, 656, 657, 663, 664, 665, 666, 667, 668, 669, 670, 672, 676, 677, 678, 679, 680, 689, 690, 691, 696, 700, 758, 775, 783, 784, 817, 857, 916, 918, 920, 922, 940, 998, 1000, 1005, 1006, 1007, 1015, 1021, 1029, 1036, 1040, 1042, 1045, 1049, 1053], "everingham": 1005, "everingham2010": 1005, "everybodi": [373, 379], "everyon": [379, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "everyth": [331, 362, 383, 385, 391, 405, 467, 959, 1024, 1025, 1036], "everywher": 393, "evgeni": 1047, "evid": [278, 353, 387, 411, 415, 416, 418, 648, 801, 1004], "evol": 1005, "evolut": [47, 49, 284, 366, 368], "evolv": [388, 1051], "ex": [102, 377, 380, 397, 1040, 1041], "exact": [44, 46, 113, 126, 141, 176, 218, 246, 266, 292, 328, 362, 366, 367, 373, 379, 381, 387, 388, 391, 392, 393, 411, 418, 420, 436, 485, 486, 487, 491, 500, 538, 539, 545, 565, 566, 642, 646, 650, 696, 804, 818, 829, 830, 831, 910, 913, 994, 997, 1001, 1002, 1011, 1015, 1019, 1020, 1043, 1044, 1046], "exactli": [103, 135, 186, 194, 199, 207, 214, 218, 263, 266, 280, 313, 349, 353, 379, 381, 387, 408, 411, 415, 416, 419, 424, 449, 456, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 519, 530, 594, 595, 619, 680, 682, 707, 709, 767, 805, 822, 829, 997, 1001, 1002, 1003, 1005, 1006, 1021, 1036, 1042, 1043, 1049], "exagger": [74, 187, 696, 1002], "examin": [165, 385, 387, 411, 857], "exampl": [2, 30, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 392, 393, 396, 397, 404, 405, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 420, 422, 423, 424, 426, 427, 429, 430, 432, 433, 436, 437, 438, 439, 442, 459, 460, 462, 464, 466, 474, 481, 483, 484, 488, 489, 490, 497, 501, 507, 509, 510, 511, 512, 513, 520, 521, 522, 532, 533, 535, 549, 550, 551, 552, 559, 576, 577, 581, 587, 589, 590, 596, 599, 600, 602, 605, 607, 613, 616, 620, 624, 625, 628, 630, 633, 640, 641, 642, 646, 654, 655, 658, 664, 665, 667, 671, 679, 687, 689, 690, 691, 698, 699, 700, 703, 712, 714, 715, 718, 719, 720, 724, 725, 727, 728, 729, 730, 732, 734, 735, 737, 740, 743, 744, 747, 748, 751, 755, 758, 760, 762, 763, 764, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 787, 795, 798, 800, 811, 812, 813, 814, 815, 816, 817, 828, 840, 842, 844, 848, 849, 858, 859, 860, 862, 863, 870, 871, 874, 876, 879, 890, 891, 893, 895, 896, 898, 899, 900, 903, 907, 909, 910, 918, 919, 920, 921, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 943, 944, 945, 946, 948, 950, 951, 952, 953, 954, 955, 958, 959, 966, 967, 968, 969, 973, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1029, 1031, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1049, 1051, 1052, 1053], "example_funct": 379, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1036, "example_gaussian_process_plot_gp_regress": 1036, "exampleclassifi": 248, "exampleclassifierexampleclassifi": 248, "exampleestim": 379, "exampleregressor": 248, "examples_pattern": 379, "exampletransform": 248, "exc": [289, 988], "exce": [115, 291, 322, 421, 445, 519, 606, 653, 662, 1045, 1048, 1050], "exceed": [807, 808, 1042], "excel": [153, 373, 379, 418, 694, 698, 1001, 1029], "except": [2, 50, 79, 86, 124, 133, 141, 150, 222, 229, 241, 248, 280, 292, 305, 308, 309, 312, 314, 326, 372, 379, 381, 382, 384, 391, 393, 402, 405, 408, 412, 415, 416, 418, 419, 421, 434, 463, 468, 471, 485, 486, 487, 513, 558, 560, 561, 562, 564, 566, 568, 569, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 615, 631, 634, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 691, 715, 782, 811, 841, 842, 848, 849, 851, 854, 859, 865, 866, 872, 886, 888, 906, 909, 911, 914, 917, 919, 933, 956, 988, 990, 994, 1001, 1005, 1020, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1053, 1054, 1055], "exception": 232, "excerpt": [45, 1017], "excess": [218, 449, 1015, 1043], "exchang": [405, 1028], "excit": 1043, "exclud": [47, 57, 186, 312, 379, 383, 393, 449, 467, 469, 733, 734, 742, 787, 788, 791, 817, 825, 883, 979, 1005, 1008, 1045, 1052, 1055], "exclus": [367, 391, 393, 416, 418, 631, 632, 634, 720, 806, 821, 824, 994, 1001, 1005, 1006, 1029, 1043, 1047], "exec": 391, "execut": [64, 182, 199, 203, 247, 277, 367, 377, 379, 385, 405, 407, 411, 416, 422, 446, 464, 804, 810, 818, 827, 829, 830, 831, 832, 835, 853, 970, 971, 1015, 1018, 1026, 1038, 1041, 1044], "exemplar": [411, 443, 457], "exemplari": [156, 157], "exemplifi": 393, "exercis": [2, 105, 143, 153, 173, 175, 224, 227, 307, 308, 336, 347, 350, 351, 368, 376, 379, 505, 506, 508, 509, 656, 657, 662, 804, 809, 850, 913, 1026, 1039], "exhaust": [2, 169, 273, 321, 322, 323, 324, 325, 326, 327, 328, 329, 366, 376, 384, 392, 406, 411, 418, 804, 807, 808, 818, 898, 899, 901, 1001, 1031], "exhibit": [172, 219, 346, 353, 396, 415, 416, 418, 421, 1013], "exist": [47, 48, 52, 55, 57, 86, 232, 272, 309, 312, 346, 373, 378, 381, 382, 385, 391, 393, 394, 397, 405, 411, 415, 416, 418, 419, 426, 431, 436, 440, 446, 447, 450, 452, 454, 456, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 495, 503, 537, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 589, 592, 593, 594, 595, 601, 607, 614, 615, 636, 637, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 702, 704, 706, 766, 769, 773, 803, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 881, 882, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 988, 997, 1002, 1004, 1005, 1009, 1011, 1012, 1015, 1029, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "exist_ok": 47, "existing_credit": 266, "exit": [104, 292, 383, 387, 471], "exp": [2, 80, 87, 99, 130, 138, 147, 172, 199, 224, 297, 302, 305, 322, 323, 327, 346, 409, 411, 412, 417, 423, 455, 468, 525, 537, 540, 619, 620, 626, 645, 763, 770, 780, 865, 866, 884, 999, 1001, 1003, 1007, 1008, 1009, 1018, 1019, 1020], "exp10": 187, "exp_dirichlet_component_": 540, "exp_dist_embed": 302, "expand": [43, 82, 98, 243, 318, 322, 362, 371, 381, 418, 447, 453, 503, 561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919, 1005, 1037, 1044, 1045, 1052], "expand_frame_repr": 232, "expans": [43, 182, 323, 453, 883, 1045], "expect": [43, 44, 49, 52, 61, 72, 79, 86, 116, 119, 126, 135, 138, 140, 142, 144, 147, 150, 166, 167, 171, 177, 184, 185, 189, 200, 205, 214, 215, 216, 218, 222, 232, 245, 248, 251, 252, 258, 259, 262, 263, 266, 279, 292, 317, 349, 353, 354, 362, 366, 367, 379, 381, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 402, 407, 409, 411, 412, 413, 415, 418, 419, 420, 434, 467, 468, 470, 471, 472, 485, 486, 487, 500, 527, 536, 540, 542, 545, 556, 558, 559, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 574, 576, 592, 593, 595, 599, 601, 610, 615, 631, 636, 637, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 678, 679, 682, 683, 699, 708, 709, 720, 739, 792, 798, 803, 804, 818, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 858, 859, 860, 861, 866, 869, 874, 881, 882, 885, 888, 889, 898, 899, 906, 908, 909, 910, 911, 912, 913, 914, 917, 919, 929, 967, 994, 1001, 1004, 1005, 1007, 1011, 1015, 1019, 1020, 1021, 1026, 1028, 1031, 1036, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "expected_anomaly_fract": 251, "expected_i": 147, "expected_n_anomali": 251, "expected_ri": 709, "expectedli": 353, "expens": [0, 89, 141, 155, 171, 186, 188, 242, 269, 281, 342, 346, 353, 354, 355, 368, 385, 393, 411, 412, 415, 418, 419, 452, 471, 512, 804, 807, 808, 818, 831, 906, 908, 1002, 1004, 1015, 1020, 1029, 1040], "experi": [30, 135, 174, 178, 186, 187, 188, 189, 192, 216, 266, 289, 317, 349, 354, 355, 367, 373, 379, 382, 394, 415, 519, 732, 789, 1001, 1006, 1017, 1023, 1024, 1029], "experienc": 379, "experiment": [2, 147, 182, 183, 214, 283, 284, 323, 324, 329, 381, 382, 389, 391, 393, 402, 415, 500, 553, 583, 584, 631, 700, 807, 808, 974, 994, 995, 1001, 1004, 1005, 1024, 1025, 1031, 1044, 1045, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "expert_r": 412, "expertis": [378, 379, 391], "expit": [146, 204, 418, 565, 1001, 1043], "explain": [2, 43, 44, 51, 64, 89, 105, 115, 116, 129, 147, 171, 176, 177, 188, 189, 214, 232, 241, 248, 263, 282, 318, 329, 353, 354, 367, 379, 391, 405, 407, 414, 416, 421, 497, 525, 528, 538, 545, 548, 553, 629, 652, 660, 673, 684, 725, 726, 727, 728, 732, 789, 1001, 1008, 1021, 1023, 1047, 1049, 1050], "explained_vari": [354, 1005], "explained_variance_": [116, 538, 545, 548, 1043], "explained_variance_ratio": 1042, "explained_variance_ratio_": [105, 129, 329, 354, 416, 538, 545, 548, 553, 1039, 1042], "explained_variance_scor": [2, 1005, 1039, 1043, 1050], "explan": [64, 116, 248, 366, 378, 379, 409, 419, 994, 1004, 1006, 1021, 1024, 1029, 1039], "explic": 1017, "explicit": [43, 150, 184, 188, 192, 240, 248, 286, 346, 366, 367, 368, 378, 380, 391, 393, 394, 402, 412, 419, 425, 475, 503, 505, 506, 545, 555, 556, 635, 642, 643, 645, 680, 804, 805, 812, 852, 860, 868, 908, 913, 968, 997, 999, 1001, 1005, 1015, 1021, 1024, 1026, 1036, 1040, 1045, 1046, 1049, 1053], "explicitli": [43, 80, 142, 171, 178, 182, 183, 215, 244, 248, 328, 346, 355, 362, 367, 373, 375, 379, 380, 381, 383, 391, 393, 402, 405, 407, 415, 419, 421, 539, 553, 554, 583, 584, 601, 631, 652, 662, 663, 673, 684, 713, 731, 786, 792, 793, 807, 808, 839, 842, 848, 849, 874, 898, 899, 993, 994, 995, 997, 999, 1001, 1002, 1005, 1007, 1008, 1015, 1029, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1054, 1055], "explod": 318, "exploit": [62, 291, 405, 1006, 1025, 1039], "exploit_incremental_learn": [810, 832], "explor": [52, 72, 138, 139, 150, 190, 238, 239, 251, 266, 273, 274, 280, 281, 289, 319, 323, 342, 354, 362, 373, 376, 378, 385, 411, 418, 475, 804, 807, 815, 889, 994, 1001, 1002, 1004, 1010, 1012, 1015, 1029, 1042], "exploratori": [187, 1029], "explos": [804, 818, 829, 830, 831], "expm1": 107, "expon": [421, 620, 680, 681, 682, 816, 865, 866, 883, 994], "exponenti": [2, 80, 107, 171, 176, 297, 302, 417, 418, 421, 452, 540, 558, 563, 618, 623, 626, 643, 647, 762, 763, 848, 849, 853, 865, 866, 883, 997, 1001, 1005, 1020, 1043, 1049], "export": [2, 377, 380, 381, 397, 920, 921, 1021, 1024, 1045], "export_graphviz": [2, 1021, 1041, 1043, 1049, 1051, 1052, 1054], "export_text": [2, 1021, 1045, 1052], "expos": [2, 169, 248, 285, 289, 324, 326, 367, 372, 376, 381, 393, 402, 409, 412, 418, 420, 421, 440, 467, 557, 558, 565, 566, 571, 572, 573, 574, 597, 598, 606, 615, 803, 804, 807, 808, 818, 826, 837, 838, 839, 840, 841, 842, 923, 1001, 1005, 1007, 1024, 1033, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "exposur": [214, 232, 1001], "express": [43, 46, 51, 52, 135, 141, 171, 176, 187, 272, 273, 318, 323, 339, 346, 355, 373, 374, 379, 380, 385, 391, 405, 411, 416, 417, 418, 419, 453, 459, 460, 592, 593, 595, 720, 792, 804, 810, 818, 827, 829, 830, 831, 832, 835, 855, 997, 1001, 1005, 1009, 1015, 1016, 1021, 1044], "expsinesquar": [2, 171, 176, 180, 421], "exstrac": 1005, "ext": 650, "extend": [31, 52, 88, 89, 100, 133, 215, 261, 266, 279, 342, 376, 377, 391, 393, 409, 411, 416, 418, 635, 662, 724, 825, 837, 840, 841, 873, 875, 892, 908, 909, 923, 997, 1005, 1006, 1020, 1025, 1027, 1031, 1041, 1042, 1043, 1044, 1046, 1051], "extens": [279, 281, 297, 366, 367, 373, 374, 377, 380, 382, 383, 387, 388, 391, 405, 411, 416, 500, 507, 538, 745, 946, 954, 1002, 1004, 1005, 1023, 1024, 1029, 1036, 1042, 1049, 1050, 1052, 1053], "extent": [2, 48, 91, 173, 174, 175, 245, 350, 443, 539, 700, 801, 1005], "extercond": 144, "extern": [160, 171, 266, 368, 372, 376, 379, 381, 384, 391, 393, 408, 411, 419, 420, 421, 597, 614, 615, 721, 741, 799, 1001, 1004, 1005, 1008, 1021, 1025, 1031, 1044, 1048], "exterqu": [144, 155], "extmath": [2, 260, 353, 388, 456, 949, 950, 951, 952, 953, 954, 1036, 1037, 1042, 1043, 1046, 1050, 1051, 1053], "extr": 47, "extra": [2, 80, 143, 150, 250, 292, 328, 355, 377, 378, 380, 393, 405, 418, 419, 441, 446, 450, 462, 467, 536, 561, 562, 570, 594, 595, 704, 705, 706, 829, 852, 918, 919, 942, 1004, 1005, 1008, 1036, 1039, 1041, 1042, 1044, 1049, 1051], "extra_cflag": 385, "extra_tre": [918, 919], "extract": [2, 17, 42, 43, 45, 47, 50, 51, 55, 83, 88, 101, 102, 103, 104, 115, 121, 141, 165, 169, 184, 229, 264, 271, 272, 277, 280, 310, 335, 345, 353, 355, 362, 371, 374, 376, 385, 388, 391, 411, 412, 415, 416, 453, 455, 458, 459, 465, 467, 491, 492, 497, 498, 507, 508, 535, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 587, 588, 592, 593, 595, 597, 598, 601, 603, 635, 722, 792, 804, 818, 845, 867, 868, 913, 925, 952, 961, 968, 994, 1002, 1006, 1010, 1015, 1019, 1024, 1026, 1029, 1031, 1036, 1037, 1045, 1048], "extract_dbscan": 411, "extract_patches_2d": [2, 83, 124, 419, 591, 1044], "extract_scor": 275, "extractal": 47, "extractor": [214, 310, 368, 374, 393, 419, 507, 585, 586, 592, 593, 595, 994, 1036], "extran": 379, "extrapol": [43, 171, 194, 215, 244, 275, 887, 1005, 1015, 1021, 1049, 1051], "extratre": [143, 153, 366, 1039], "extratreeclassifi": [2, 561, 570, 919, 995, 1006, 1021, 1040, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1055], "extratreeregressor": [2, 562, 567, 570, 918, 995, 1006, 1011, 1021, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1055], "extratreesclassifi": [2, 143, 153, 418, 420, 562, 568, 570, 918, 919, 995, 1006, 1039, 1040, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1055], "extratreesregressor": [2, 250, 418, 561, 569, 570, 918, 919, 995, 1006, 1039, 1042, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1055], "extrem": [2, 147, 214, 216, 250, 251, 285, 312, 319, 334, 354, 379, 382, 410, 411, 416, 561, 562, 568, 569, 570, 636, 637, 683, 728, 756, 918, 919, 920, 922, 1005, 1007], "extrema": 999, "exxon": 51, "ey": [111, 112, 259, 263, 342, 374, 538, 545, 554], "eyast": 1050, "ezebunandu": 1048, "ezeiza": 768, "ezri": 1049, "f": [0, 2, 43, 44, 46, 50, 51, 52, 54, 55, 57, 58, 63, 66, 68, 72, 78, 81, 82, 85, 86, 88, 91, 97, 100, 103, 107, 116, 124, 135, 138, 141, 142, 144, 145, 147, 150, 155, 156, 161, 163, 165, 168, 169, 171, 177, 178, 180, 184, 186, 187, 188, 189, 190, 192, 199, 200, 203, 205, 214, 215, 216, 218, 224, 228, 232, 235, 245, 247, 248, 251, 255, 262, 266, 270, 272, 273, 274, 275, 278, 279, 281, 282, 284, 285, 286, 292, 295, 307, 308, 309, 314, 317, 318, 321, 323, 325, 327, 328, 329, 331, 332, 341, 346, 349, 353, 354, 355, 362, 374, 379, 380, 381, 385, 387, 391, 405, 409, 412, 416, 418, 419, 420, 421, 490, 512, 513, 535, 536, 541, 542, 570, 585, 586, 587, 591, 596, 599, 600, 602, 603, 604, 608, 609, 610, 611, 612, 613, 621, 631, 636, 639, 662, 700, 717, 727, 730, 733, 734, 760, 787, 788, 791, 792, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 826, 832, 833, 835, 865, 866, 870, 879, 882, 883, 887, 888, 889, 915, 923, 934, 935, 988, 997, 1000, 1009, 1012, 1013, 1015, 1019, 1026, 1038, 1044, 1045, 1046, 1048, 1050], "f0_c0": 889, "f0_c1": 889, "f0_c2": 889, "f0e442": 257, "f1": [2, 45, 62, 68, 102, 166, 270, 310, 331, 332, 335, 415, 717, 733, 734, 742, 787, 826, 1005, 1006, 1040, 1052], "f1_c0": 889, "f1_c1": 889, "f1_c2": 889, "f1_macro": [415, 1005, 1040], "f1_micro": [1005, 1040], "f1_sampl": 1005, "f1_score": [2, 62, 279, 335, 374, 410, 742, 1005, 1036, 1038, 1039, 1040, 1041, 1045, 1046, 1052, 1053], "f1_weight": [1005, 1040], "f2": [383, 1006], "f2001": 1005, "f2006": 1005, "f3": 1006, "f4": 502, "f401": [100, 118, 127, 188, 211, 234, 236], "f781bf": [75, 79, 95, 96], "f7bd01": 75, "f_": [418, 639, 734, 1005], "f_0": 152, "f_1": [152, 1005], "f_beta": 1005, "f_classif": [2, 165, 166, 345, 420, 596, 599, 600, 602, 603, 604, 608, 610, 613], "f_i": 409, "f_idx": 152, "f_j": [409, 1013], "f_m": 418, "f_n": 279, "f_p": 279, "f_regress": [2, 87, 164, 420, 596, 599, 600, 602, 603, 604, 608, 609, 613, 1039, 1043, 1050, 1053], "f_score": 279, "f_statist": [609, 610], "f_test": 164, "fa": [2, 120, 130, 131, 184, 385, 416, 476, 479, 536, 545, 804, 830, 1026], "fa_estim": 121, "fa_scor": 128, "fab": [1029, 1046, 1047], "fabia": [408, 723], "fabian": [0, 401, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1053], "fabiana": 1047, "fabio": 1042, "fabisch": [0, 401, 1038, 1039, 1040, 1042], "fabrizio": 1051, "face": [2, 42, 44, 54, 71, 84, 86, 120, 124, 128, 130, 184, 192, 240, 245, 372, 379, 383, 411, 416, 418, 452, 475, 497, 498, 499, 525, 536, 537, 541, 543, 544, 545, 547, 562, 588, 661, 677, 701, 717, 818, 834, 851, 888, 913, 937, 1008, 1021, 1022, 1026, 1031, 1036, 1044], "face_id": 250, "facecolor": [51, 63, 70, 93, 121, 127, 137, 162, 179, 234, 249, 272, 299, 314, 340, 343, 346, 347, 348], "faces_cent": 121, "facial": 374, "facil": [1004, 1024], "facilit": [366, 393, 405, 1024, 1025, 1042, 1045], "fact": [43, 50, 57, 62, 112, 116, 135, 145, 147, 189, 245, 255, 289, 291, 353, 373, 386, 391, 393, 407, 414, 416, 417, 418, 419, 653, 672, 674, 708, 999, 1001, 1008, 1015, 1019, 1020, 1025, 1029, 1050], "facto": 1046, "factor": [2, 11, 42, 45, 48, 63, 67, 79, 80, 86, 88, 95, 115, 120, 126, 130, 153, 184, 187, 228, 239, 241, 251, 266, 283, 284, 292, 293, 307, 308, 312, 314, 323, 325, 341, 366, 367, 375, 379, 385, 388, 393, 408, 411, 418, 419, 421, 443, 445, 457, 472, 474, 475, 476, 477, 479, 481, 491, 508, 518, 519, 531, 536, 539, 540, 542, 544, 545, 548, 549, 550, 551, 553, 554, 565, 566, 567, 592, 595, 601, 617, 653, 654, 655, 658, 659, 660, 686, 687, 696, 723, 787, 804, 807, 808, 830, 854, 888, 902, 904, 912, 951, 952, 994, 1001, 1002, 1008, 1015, 1018, 1022, 1026, 1030, 1031, 1036, 1037, 1039, 1040, 1042, 1050, 1052], "factoranalysi": [2, 121, 128, 131, 416, 548, 1037, 1039, 1048, 1050], "factori": [2, 94, 266, 272, 419, 927, 929, 974, 1005], "facundo": [1047, 1050], "fagan": 1045, "fail": [43, 87, 99, 122, 128, 179, 194, 199, 218, 248, 272, 321, 367, 377, 379, 382, 387, 394, 397, 414, 415, 443, 475, 477, 680, 681, 682, 715, 865, 866, 924, 926, 933, 946, 994, 1002, 1036, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1055], "failur": [184, 185, 187, 209, 379, 387, 397, 661, 789, 834, 934, 935, 1026, 1028, 1029, 1049, 1050, 1054], "fair": [51, 64, 418, 694, 698, 837, 1006, 1029], "fairer": 362, "fairli": [113, 146, 236, 308, 387, 411, 563, 564, 703, 1006], "faith": [57, 347], "fake": 419, "falak": 1045, "fall": [25, 30, 43, 52, 147, 150, 178, 271, 272, 379, 411, 419, 436, 449, 450, 512, 513, 731, 732, 798, 885, 897, 957, 1004, 1005, 1015, 1045, 1055], "fallback": [394, 397, 836, 837, 1005], "fals": [2, 43, 44, 46, 47, 49, 50, 53, 54, 58, 59, 61, 63, 64, 68, 69, 70, 74, 77, 79, 80, 81, 87, 88, 97, 100, 102, 103, 104, 110, 112, 119, 125, 129, 130, 135, 141, 142, 144, 147, 148, 150, 158, 160, 171, 176, 177, 178, 179, 187, 188, 189, 190, 194, 195, 199, 200, 214, 215, 219, 220, 222, 230, 232, 234, 237, 248, 249, 251, 255, 257, 266, 269, 270, 272, 275, 276, 279, 280, 281, 282, 283, 284, 285, 287, 292, 296, 302, 305, 308, 309, 312, 313, 318, 319, 321, 323, 324, 325, 326, 328, 329, 333, 342, 344, 346, 349, 350, 353, 354, 373, 379, 380, 381, 384, 393, 402, 409, 410, 411, 412, 413, 415, 416, 418, 419, 420, 421, 423, 424, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 512, 513, 514, 516, 517, 519, 527, 528, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 639, 641, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 698, 699, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 722, 723, 730, 731, 732, 733, 734, 735, 742, 747, 758, 760, 765, 767, 771, 773, 778, 782, 786, 787, 788, 789, 791, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 818, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 932, 933, 934, 935, 941, 946, 953, 965, 966, 969, 970, 974, 975, 976, 978, 985, 990, 991, 993, 994, 995, 1001, 1005, 1008, 1015, 1019, 1020, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "false_": 640, "false_discovery_r": 599, "famili": [2, 45, 266, 366, 368, 393, 411, 414, 416, 419, 420, 596, 599, 600, 602, 603, 604, 610, 865, 866, 884, 896, 1001, 1015, 1019, 1040, 1050], "familiar": [379, 417, 1044], "famou": [374, 376, 418, 1020], "famous": 1007, "fan": [0, 367, 394, 400, 1020, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "fanci": 419, "fancybox": 348, "fanelli": [1051, 1052], "fang": [662, 1043, 1044], "fanni": 1046, "fantasi": 1010, "fantast": 1029, "faouzi": [1046, 1047], "faq": [0, 387, 415, 696, 1002, 1015], "far": [62, 93, 113, 144, 172, 178, 187, 214, 232, 266, 342, 346, 353, 355, 379, 388, 421, 724, 888, 979, 1010, 1011, 1020, 1029], "farach": 997, "farahsae": 1044, "farawai": 1008, "fare": [103, 189, 255, 325, 326, 1040, 1041], "fargo": 51, "farhan": 1052, "farid": 1055, "farlei": [0, 401, 1036], "farouk": [1044, 1045], "farther": 729, "farthest": 411, "fashion": [2, 46, 140, 145, 222, 281, 367, 393, 408, 409, 411, 416, 418, 557, 561, 562, 563, 564, 568, 569, 570, 606, 631, 834, 857, 872, 875, 881, 892, 916, 917, 918, 919, 975, 995, 1001, 1005, 1015, 1021, 1045], "fast": [2, 52, 64, 95, 192, 199, 203, 229, 230, 246, 247, 313, 355, 366, 374, 379, 388, 405, 411, 413, 415, 416, 418, 419, 423, 449, 450, 472, 477, 512, 536, 537, 539, 542, 544, 548, 551, 568, 569, 570, 592, 593, 595, 636, 637, 644, 662, 663, 676, 678, 691, 703, 804, 818, 829, 830, 840, 841, 848, 849, 853, 864, 952, 973, 997, 1001, 1004, 1007, 1008, 1010, 1011, 1021, 1024, 1029, 1036, 1037, 1042, 1043, 1046, 1047], "fast_dict": 1046, "fast_dot": 1043, "fast_logdet": [2, 388], "fast_svd": 1036, "faster": [37, 46, 57, 74, 97, 105, 121, 140, 141, 144, 145, 147, 150, 169, 188, 192, 200, 214, 216, 229, 230, 232, 247, 251, 266, 292, 294, 309, 322, 324, 325, 329, 353, 354, 355, 366, 373, 379, 387, 388, 393, 405, 411, 416, 420, 421, 423, 446, 450, 452, 454, 455, 456, 465, 512, 535, 536, 537, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 563, 564, 565, 566, 567, 647, 650, 651, 656, 657, 662, 663, 664, 665, 666, 667, 676, 678, 688, 691, 695, 699, 730, 760, 782, 783, 784, 848, 849, 853, 865, 866, 883, 885, 887, 897, 901, 952, 973, 994, 998, 1001, 1006, 1008, 1009, 1012, 1017, 1019, 1020, 1021, 1024, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "fastest": [90, 270, 355, 450, 674, 676, 678, 691, 951, 952, 1004], "fastest_top_recall_high_precision_index": 270, "fastica": [2, 120, 184, 213, 416, 536, 539, 545, 1026, 1036, 1038, 1044, 1050, 1051, 1054], "fastkmean": 452, "fastmcd": [413, 472, 477], "fastnc": 864, "fat": [525, 528], "fatima": [1050, 1053], "fato": 1049, "fauchereau": 1049, "fault": [387, 1044, 1046, 1048], "faulti": [217, 1036], "faust": 1054, "favor": [44, 113, 141, 257, 263, 391, 413, 418, 677, 679, 734, 812, 814, 867, 994, 1013, 1038, 1040, 1042, 1043, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "favorit": [379, 391, 1029], "favour": [796, 1002, 1004, 1045], "fawcett": [792, 793, 1005], "fazlul": 1038, "fbeta_scor": [2, 733, 746, 787, 1005, 1038, 1039, 1040, 1041, 1046, 1052], "fc": [48, 297, 374], "fc2009": 1005, "fcd116": 119, "fcharra": 1051, "fcluster": 190, "fcostin": 1036, "fd": 47, "fdr": 596, "feasibl": [379, 877, 878, 888], "feast": 412, "feat": [47, 49, 383, 419], "feat0": [243, 322], "feat1": [243, 322, 419], "feat2": [243, 322, 419], "feat3": [243, 322, 419], "feat_idx": 631, "featur": [2, 8, 16, 17, 18, 23, 25, 32, 42, 44, 45, 46, 47, 49, 50, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 71, 77, 83, 91, 93, 96, 101, 102, 103, 104, 105, 111, 112, 116, 118, 119, 121, 123, 125, 127, 128, 129, 131, 134, 136, 139, 141, 143, 147, 149, 154, 155, 156, 158, 160, 161, 164, 166, 171, 172, 173, 176, 177, 179, 182, 183, 185, 186, 187, 188, 193, 195, 197, 198, 199, 200, 203, 204, 210, 213, 214, 215, 216, 218, 219, 222, 223, 229, 230, 231, 235, 240, 243, 245, 250, 251, 254, 255, 264, 266, 267, 269, 270, 271, 272, 275, 277, 278, 279, 280, 281, 282, 285, 286, 287, 291, 295, 296, 297, 300, 301, 303, 306, 307, 309, 311, 312, 315, 319, 320, 322, 325, 326, 327, 328, 329, 331, 332, 334, 335, 337, 338, 339, 342, 346, 349, 352, 355, 358, 360, 361, 362, 371, 372, 373, 374, 375, 376, 377, 381, 382, 384, 386, 387, 388, 391, 392, 393, 394, 396, 397, 399, 405, 409, 411, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 427, 432, 434, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 512, 513, 514, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 583, 584, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 622, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 689, 690, 691, 692, 693, 694, 695, 696, 701, 705, 706, 707, 717, 725, 726, 727, 728, 745, 746, 749, 750, 752, 762, 763, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 785, 789, 792, 794, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 934, 935, 949, 969, 979, 980, 981, 985, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "feature_0": 921, "feature_1": [635, 921], "feature_2": 635, "feature_all_": 845, "feature_count_": [843, 845, 847], "feature_extract": [2, 47, 54, 57, 80, 81, 83, 84, 87, 99, 102, 124, 184, 273, 335, 352, 353, 354, 355, 368, 374, 411, 412, 419, 467, 548, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 881, 1003, 1036, 1037, 1038, 1039, 1042, 1043], "feature_import": 148, "feature_importances_": [142, 148, 169, 189, 190, 393, 418, 420, 557, 558, 561, 562, 563, 564, 568, 569, 570, 597, 598, 601, 916, 917, 918, 919, 1038, 1041, 1045], "feature_index": 419, "feature_indices_": 1044, "feature_log_prob_": [843, 844, 845, 847], "feature_map": [246, 312], "feature_map__n_compon": 246, "feature_map_fouri": 246, "feature_map_nystroem": [246, 643], "feature_nam": [54, 57, 118, 131, 142, 148, 152, 169, 187, 189, 223, 252, 286, 295, 312, 321, 322, 323, 328, 339, 353, 358, 372, 374, 384, 412, 467, 493, 494, 496, 500, 504, 505, 506, 508, 509, 514, 586, 635, 636, 637, 889, 920, 921, 922, 1013, 1021, 1052], "feature_name_combin": [881, 1052], "feature_names_": 585, "feature_names_in": 1050, "feature_names_in_": [255, 319, 324, 393, 432, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 631, 632, 633, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 993, 1049, 1050, 1051, 1052, 1054], "feature_names_out": [427, 432, 445, 446, 448, 450, 452, 467, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 570, 571, 572, 573, 574, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 1050, 1053], "feature_rang": [310, 878, 894, 1015, 1038, 1048], "feature_select": [2, 87, 103, 104, 106, 163, 164, 165, 166, 167, 168, 169, 184, 255, 323, 325, 345, 362, 393, 402, 412, 420, 585, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 994, 1026, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1055], "feature_selector": 169, "feature_to_plot": 208, "feature_union": 1052, "featureagglomer": [2, 84, 87, 443, 444, 1022, 1039, 1045, 1046, 1049, 1050, 1052, 1053, 1054], "featureforg": 1029, "featurehash": [2, 47, 57, 102, 184, 352, 353, 354, 368, 374, 419, 491, 585, 592, 593, 594, 595, 881, 1026, 1037, 1042, 1043, 1044, 1050, 1051], "featureheash": 355, "features_": [633, 995], "features__pca__n_compon": 106, "features__univ_select__k": 106, "features_idx": 312, "features_info": 188, "features_nam": [186, 1043], "features_samples_ratio": 69, "featureselector": 605, "featuresshould": 399, "featuretool": 1024, "featureunion": [2, 7, 43, 106, 371, 393, 402, 467, 633, 870, 995, 1025, 1029, 1031, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054], "featurewis": [2, 884], "feb": [73, 443, 457], "februari": [0, 413, 476, 1005, 1037, 1041, 1053], "fed": [47, 155, 362, 374, 419, 994, 1010, 1015, 1047], "feda": [1044, 1045], "feder": 1024, "federico": [1038, 1039, 1044, 1045, 1050], "federicopisanu": 1046, "feed": [47, 116, 215, 248, 355, 374, 377, 384, 391, 411, 419, 746, 881, 1006], "feedback": [269, 378, 379, 380, 394, 1024, 1028, 1044], "feedforward": [865, 866], "feedstock": 383, "feel": [64, 183, 312, 378, 379, 387, 411, 449, 1021], "feel_temp": [43, 188], "feghali": 1053, "fei": [567, 1011], "feld": [1040, 1052], "feldbauer": [1044, 1045, 1046, 1047, 1050], "feldman": [1038, 1043, 1044, 1045, 1046], "felip": [1049, 1050, 1051, 1052], "felix": [1038, 1043, 1044, 1046, 1048, 1049, 1050], "femal": [103, 187, 326, 384, 881, 882, 1015], "fenc": 384, "feng": [1046, 1048, 1049, 1050], "fenil": 1049, "fenx": 1044, "ferdman": 1053, "ferenc": 1029, "fernand": [1044, 1050, 1051], "fernandez": 1045, "fernando": [1041, 1048], "fern\u00e1ndez": 1050, "ferrando": 1046, "ferrari": 1044, "ferreira": [1044, 1049, 1050], "ferri": [420, 1005], "ferria": 1043, "ferrin": 1050, "ferriss": 1043, "ferr\u00e9": 1050, "ferr\u00edn": 1047, "fetal": 251, "fetch": [2, 51, 55, 155, 187, 232, 266, 286, 372, 373, 374, 379, 383, 384, 387, 416, 495, 500, 559, 560, 561, 562, 567, 568, 569, 570, 592, 593, 595, 1044, 1052], "fetch_": 1043, "fetch_20newsgroup": [2, 54, 57, 102, 273, 335, 353, 354, 355, 374, 492, 1041, 1046, 1054], "fetch_20newsgroups_vector": [2, 46, 229, 245, 374, 1036, 1046, 1048, 1053, 1054], "fetch_california_h": [2, 141, 145, 182, 183, 312, 323, 374, 392, 412, 1045, 1047, 1054], "fetch_covtyp": [2, 192, 251, 323, 374, 1045, 1048, 1050, 1054], "fetch_fil": [2, 52, 1055], "fetch_kddcup99": [2, 251, 374, 1043, 1044, 1045, 1048, 1049, 1054], "fetch_lfw_pair": [2, 374, 1041, 1051, 1054], "fetch_lfw_peopl": [2, 45, 374, 1051, 1054], "fetch_mldata": 1044, "fetch_olivetti_fac": [2, 83, 121, 250, 374, 1044, 1045, 1046, 1054], "fetch_openml": [2, 43, 44, 52, 103, 107, 144, 150, 155, 176, 187, 188, 189, 214, 222, 230, 232, 242, 251, 255, 266, 286, 289, 291, 292, 309, 318, 321, 325, 328, 373, 383, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "fetch_rcv1": [2, 374, 1041, 1045, 1054], "fetch_species_distribut": [2, 50, 305, 1045, 1054], "fetcher": [372, 1041, 1043, 1052], "feth": 1036, "feurer": [1039, 1044], "fevott": [416, 542, 544, 551], "few": [0, 46, 54, 57, 74, 80, 85, 125, 144, 150, 174, 177, 178, 203, 212, 214, 216, 232, 247, 248, 257, 274, 275, 279, 304, 309, 312, 316, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 349, 355, 366, 374, 375, 376, 379, 381, 392, 394, 402, 405, 408, 409, 411, 415, 416, 418, 420, 421, 440, 452, 565, 566, 659, 696, 699, 901, 952, 1001, 1002, 1004, 1005, 1008, 1009, 1018, 1020, 1021, 1029, 1042, 1052, 1054], "fewer": [43, 53, 63, 88, 135, 143, 145, 214, 366, 380, 411, 420, 421, 451, 464, 545, 598, 700, 838, 956, 1001, 1006, 1008, 1041, 1042, 1043], "fewest": [271, 631], "ff": 387, "ff0000": [67, 300, 307], "ff3333": 119, "ff7216": 119, "ff7f00": [79, 95, 241], "ff9c34": [92, 97], "ffaaaa": 300, "ffc107": 316, "fft": 644, "fhaselbeck": 1048, "fhoang7": 1045, "fhr": 251, "fi": 879, "fibins": [1044, 1045], "fidel": 53, "fidor": 1052, "fiedler": 1042, "fiegel": [1048, 1049, 1051], "field": [169, 232, 376, 408, 411, 412, 419, 467, 502, 505, 621, 1001, 1003, 1012, 1020, 1028, 1037], "fifth": [247, 998], "fig": [43, 44, 46, 47, 48, 49, 52, 54, 62, 64, 66, 70, 77, 78, 86, 88, 90, 93, 97, 99, 105, 109, 111, 116, 118, 121, 126, 127, 131, 135, 141, 142, 144, 145, 147, 148, 150, 152, 153, 155, 157, 174, 180, 182, 188, 190, 192, 195, 201, 205, 208, 209, 211, 212, 214, 215, 218, 222, 227, 229, 232, 234, 235, 236, 237, 238, 239, 242, 244, 251, 252, 262, 266, 267, 268, 269, 272, 273, 274, 275, 278, 281, 282, 283, 285, 286, 291, 292, 294, 296, 297, 305, 308, 309, 312, 313, 314, 316, 317, 318, 321, 325, 326, 339, 346, 348, 349, 350, 351, 353, 354, 355, 357, 375, 386], "fig1": 100, "fig2": 100, "fig_num": 211, "figaspect": 316, "fight": [74, 218, 1029], "fighter": 102, "fignum": 347, "figsiz": [43, 44, 45, 49, 51, 52, 53, 54, 62, 63, 64, 66, 67, 68, 70, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 105, 107, 111, 113, 115, 116, 118, 119, 121, 124, 125, 126, 127, 130, 131, 135, 137, 138, 144, 145, 146, 147, 148, 150, 153, 155, 156, 164, 173, 175, 179, 180, 182, 183, 187, 188, 190, 192, 194, 195, 198, 199, 204, 208, 211, 212, 213, 214, 215, 216, 218, 220, 222, 225, 228, 230, 232, 234, 235, 236, 238, 239, 241, 242, 244, 246, 249, 250, 251, 252, 257, 259, 260, 263, 266, 267, 268, 269, 274, 275, 276, 279, 281, 282, 285, 286, 287, 291, 292, 294, 295, 307, 308, 310, 312, 313, 314, 315, 316, 317, 318, 325, 326, 331, 333, 340, 342, 346, 347, 348, 349, 350, 351, 353, 354, 355, 375, 922], "figur": [45, 46, 47, 49, 51, 53, 61, 62, 63, 64, 67, 72, 73, 74, 75, 77, 79, 80, 81, 83, 84, 85, 87, 89, 91, 92, 94, 95, 96, 97, 98, 100, 109, 113, 115, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 137, 138, 146, 147, 148, 149, 150, 153, 154, 158, 160, 162, 164, 165, 168, 172, 173, 174, 175, 178, 179, 183, 187, 188, 189, 190, 194, 199, 202, 204, 207, 208, 211, 213, 215, 216, 220, 225, 229, 230, 231, 236, 237, 238, 241, 245, 246, 247, 249, 250, 252, 257, 259, 260, 263, 265, 271, 276, 277, 287, 297, 301, 302, 305, 307, 310, 312, 314, 315, 319, 321, 323, 331, 332, 333, 340, 342, 347, 358, 359, 360, 379, 411, 417, 418, 419, 421, 441, 635, 636, 701, 702, 704, 705, 706, 810, 827, 922, 994, 998, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1019, 1020, 1021, 1049], "figure_": [68, 188, 252, 321, 323, 386, 441, 635, 636, 701, 702, 704, 705, 706, 810, 827], "figure_titl": 144, "filali": 1044, "file": [2, 47, 51, 52, 68, 353, 354, 366, 367, 368, 373, 374, 376, 377, 382, 383, 384, 385, 391, 405, 412, 416, 490, 495, 497, 498, 500, 507, 512, 513, 538, 583, 584, 592, 593, 595, 920, 1008, 1021, 1026, 1028, 1036, 1037, 1039, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1055], "file_1": 507, "file_2": 507, "file_42": 507, "file_43": 507, "file_44": 507, "file_id": 373, "file_path": 495, "filenam": [2, 47, 55, 335, 374, 379, 385, 405, 491, 495, 504, 507, 508, 511, 592, 593, 595, 1036, 1041, 1044, 1045], "filesystem": [387, 397, 1049], "filho": 409, "filip": [1053, 1054], "filipj8": [1043, 1044], "fill": [70, 143, 160, 189, 267, 297, 358, 393, 412, 416, 519, 531, 542, 544, 551, 591, 634, 920, 922, 995, 1008, 1021], "fill_between": [52, 147, 150, 160, 171, 176, 178, 180, 194, 195, 232, 272, 274, 275, 276, 282, 810, 827], "fill_between_": [810, 827], "fill_between_kw": [810, 827], "fill_betweenx": 93, "fill_diagon": [190, 237], "fill_legend": 232, "fill_valu": [183, 243, 253, 322, 425, 428, 434, 435, 631, 634, 1015, 1044, 1052, 1053], "fillna": [232, 251], "filo": [1036, 1039], "filter": [2, 18, 47, 54, 80, 81, 105, 220, 232, 270, 272, 294, 353, 367, 374, 385, 388, 411, 419, 451, 491, 492, 507, 592, 595, 599, 600, 601, 602, 603, 604, 778, 843, 944, 969, 1007, 1008, 1046], "filter_param": 778, "filtered_cv_result": 270, "filterwarn": [79, 95, 229, 308, 309, 379, 1015], "final": [2, 43, 52, 63, 64, 70, 75, 77, 88, 102, 103, 111, 113, 116, 126, 135, 136, 138, 140, 144, 145, 148, 155, 158, 166, 176, 183, 186, 188, 190, 192, 194, 199, 201, 203, 211, 214, 216, 231, 232, 235, 241, 255, 261, 266, 270, 278, 289, 292, 318, 319, 321, 322, 342, 346, 366, 368, 374, 377, 379, 380, 381, 383, 392, 393, 408, 409, 411, 412, 415, 418, 419, 420, 440, 445, 450, 451, 455, 462, 465, 467, 540, 559, 560, 571, 572, 574, 598, 631, 651, 657, 663, 683, 694, 698, 723, 804, 836, 837, 868, 869, 905, 908, 994, 995, 997, 1001, 1002, 1005, 1008, 1011, 1012, 1015, 1018, 1029, 1041, 1044, 1045, 1046, 1047, 1049], "final_estim": [155, 321, 418, 571, 572], "final_estimator_": [571, 572], "final_estimatorridgecv": 155, "final_lay": 418, "final_layer_gbr": 418, "final_layer_rfr": 418, "final_step": 77, "financ": [266, 1006], "financi": [0, 51, 411, 418, 1001], "find": [2, 43, 44, 45, 51, 55, 64, 75, 80, 81, 82, 85, 86, 88, 90, 98, 105, 111, 112, 121, 123, 125, 126, 131, 145, 155, 171, 175, 177, 179, 188, 199, 201, 203, 216, 222, 234, 236, 238, 239, 244, 251, 262, 266, 271, 272, 273, 283, 285, 295, 300, 301, 302, 317, 321, 327, 329, 344, 345, 346, 349, 353, 354, 357, 367, 376, 377, 379, 380, 381, 384, 385, 388, 391, 392, 393, 394, 399, 408, 410, 411, 413, 414, 416, 418, 419, 420, 422, 444, 447, 448, 449, 453, 454, 455, 456, 465, 535, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 562, 569, 586, 593, 614, 615, 651, 654, 657, 658, 659, 660, 662, 663, 675, 692, 711, 733, 734, 742, 786, 787, 788, 791, 792, 798, 803, 804, 818, 826, 850, 851, 852, 854, 856, 858, 859, 860, 881, 882, 887, 900, 901, 902, 916, 917, 919, 931, 951, 952, 954, 994, 995, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1011, 1015, 1019, 1020, 1021, 1023, 1025, 1028, 1029, 1036, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1054], "findal": 355, "fine": [43, 72, 143, 169, 218, 230, 263, 270, 346, 359, 360, 376, 383, 393, 419, 449, 952, 1008, 1011, 1020, 1025, 1046], "finer": [43, 52, 72, 294, 342, 367, 411, 415, 994, 1008, 1046], "finfo": [237, 474, 475, 481, 610, 654, 655, 658, 659, 660, 686, 687, 1051], "finish": [169, 260, 1002], "finit": [64, 257, 263, 366, 374, 393, 471, 542, 555, 586, 610, 613, 614, 615, 662, 732, 782, 789, 801, 829, 906, 932, 933, 934, 935, 1001, 1004, 1005, 1029, 1043, 1044, 1048, 1050, 1051], "finn": [1044, 1045], "firefox": 1015, "fireplac": 144, "fireplacequ": 144, "firm": [51, 411], "first": [0, 2, 43, 44, 46, 47, 50, 52, 55, 58, 62, 63, 66, 67, 68, 70, 74, 88, 89, 91, 94, 97, 98, 99, 100, 102, 103, 104, 107, 111, 115, 116, 118, 126, 129, 135, 136, 140, 142, 143, 144, 145, 146, 148, 150, 152, 155, 156, 157, 158, 165, 166, 169, 171, 172, 173, 176, 177, 178, 179, 183, 186, 187, 188, 190, 192, 194, 196, 198, 203, 210, 211, 212, 215, 216, 222, 223, 228, 235, 238, 245, 246, 248, 249, 250, 252, 254, 255, 259, 263, 266, 267, 272, 274, 275, 279, 281, 283, 284, 285, 289, 291, 292, 294, 297, 301, 302, 303, 307, 309, 312, 314, 317, 318, 319, 322, 323, 332, 335, 338, 339, 342, 344, 353, 354, 355, 357, 358, 361, 362, 367, 368, 373, 374, 376, 377, 378, 379, 381, 383, 384, 385, 387, 391, 393, 405, 408, 409, 410, 411, 414, 415, 416, 418, 419, 420, 421, 423, 446, 449, 450, 453, 462, 463, 467, 475, 486, 490, 491, 493, 494, 496, 498, 501, 504, 506, 508, 512, 513, 514, 532, 537, 538, 542, 545, 557, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 586, 588, 592, 593, 594, 595, 597, 598, 605, 614, 615, 621, 625, 628, 635, 636, 637, 638, 650, 656, 663, 670, 672, 678, 680, 692, 699, 702, 703, 704, 706, 716, 720, 740, 746, 767, 768, 786, 798, 801, 802, 807, 808, 809, 810, 811, 816, 818, 825, 827, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 873, 881, 885, 886, 887, 889, 890, 897, 898, 910, 913, 916, 917, 918, 919, 921, 923, 929, 930, 934, 935, 936, 954, 956, 971, 975, 978, 990, 993, 994, 995, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1015, 1016, 1019, 1020, 1021, 1029, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "first_img_data": 511, "first_pca_compon": 317, "first_quart": 130, "first_week": 150, "firstli": [124, 366, 391, 661], "fisach": 1042, "fiscal": 0, "fischer": [1041, 1042], "fischler": 1001, "fischoff": 1048, "fish": 324, "fisher": [376, 418, 508, 640], "fisher1958": 418, "fisher_transform": 640, "fit": [2, 22, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 121, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 184, 186, 187, 188, 189, 190, 192, 193, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 237, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 346, 347, 349, 350, 351, 353, 354, 357, 358, 359, 360, 361, 366, 368, 371, 374, 376, 379, 382, 384, 385, 388, 391, 393, 405, 408, 409, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 505, 513, 514, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 581, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 698, 701, 702, 704, 705, 706, 714, 715, 727, 736, 739, 754, 792, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 927, 928, 944, 961, 964, 988, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "fit_": 1049, "fit_algorithm": [121, 535, 541, 1051, 1052], "fit_and_evalu": 354, "fit_and_plot_model": 317, "fit_and_scor": 222, "fit_data": 59, "fit_dur": 292, "fit_ecoc": 1040, "fit_grid_point": 1047, "fit_intercept": [46, 194, 195, 200, 219, 228, 241, 280, 319, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 908, 909, 915, 1001, 1019, 1040, 1044, 1045, 1046, 1048, 1049, 1050], "fit_inverse_transform": [44, 126, 539, 1045], "fit_ovo": 1040, "fit_ovr": 1040, "fit_param": [248, 393, 435, 440, 445, 448, 468, 536, 538, 540, 541, 543, 546, 547, 553, 559, 560, 571, 572, 573, 574, 586, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 634, 639, 642, 643, 644, 645, 646, 669, 675, 810, 827, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 852, 857, 860, 864, 867, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 900, 901, 964, 1043, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055], "fit_path": [654, 658, 659, 660, 686, 687], "fit_predict": [57, 89, 90, 93, 241, 251, 299, 381, 393, 411, 429, 433, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 472, 567, 681, 796, 797, 801, 802, 854, 860, 868, 912, 928, 1011, 1041, 1044, 1045, 1049, 1051, 1053], "fit_prior": [374, 843, 844, 845, 847], "fit_status_": [910, 911, 912, 913, 914], "fit_tim": [52, 91, 144, 203, 222, 274, 415, 831, 832], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 52, "fit_times_nb": 274, "fit_times_svm": 274, "fit_transform": [43, 44, 45, 49, 51, 54, 57, 79, 82, 85, 86, 91, 95, 118, 122, 125, 131, 153, 192, 205, 230, 232, 234, 235, 236, 237, 238, 239, 244, 245, 248, 249, 255, 292, 296, 308, 312, 313, 317, 318, 319, 321, 324, 326, 327, 328, 329, 342, 353, 354, 355, 362, 371, 374, 381, 384, 385, 393, 407, 412, 416, 419, 420, 427, 435, 445, 446, 448, 450, 452, 467, 469, 471, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 692, 693, 694, 695, 696, 700, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 906, 928, 941, 995, 997, 1001, 1006, 1008, 1015, 1016, 1017, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1050, 1052, 1053, 1054], "fitfailedwarn": [2, 804, 807, 808, 810, 818, 827, 830, 831, 832, 835], "fitted_transform": [381, 467], "fittedcolumntransform": [155, 188], "fittedgridsearchcv": 253, "fittedpipelin": [155, 243, 253, 273, 286, 318, 322], "fittedrandomforestclassifi": 328, "fittedrandomizedsearchcv": 103, "fittedstackingregressor": 155, "fitter": 1021, "fitting_weight": 402, "fitzgerald": 1044, "fitzk": 1029, "five": [150, 258, 266, 332, 335, 374, 535, 543, 549, 1002, 1008, 1020, 1029, 1036], "five_imag": 419, "fix": [2, 43, 47, 58, 62, 70, 80, 103, 130, 140, 141, 143, 148, 150, 171, 172, 176, 179, 187, 190, 199, 216, 232, 251, 263, 275, 285, 307, 321, 322, 323, 324, 325, 326, 327, 328, 329, 354, 366, 367, 373, 375, 377, 378, 379, 383, 387, 391, 393, 394, 402, 411, 412, 415, 416, 418, 419, 421, 455, 465, 475, 508, 516, 535, 541, 544, 546, 552, 553, 563, 564, 568, 569, 592, 595, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 634, 657, 667, 672, 674, 688, 691, 695, 699, 711, 789, 801, 818, 825, 850, 851, 853, 856, 858, 859, 875, 878, 892, 916, 917, 927, 952, 971, 994, 1001, 1004, 1005, 1008, 1015, 1025, 1034, 1035, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "fixed_classes_uniform_labelings_scor": 72, "fixed_vocabulary_": [592, 595], "fixedthresholdclassifi": [2, 266, 410, 826, 1054, 1055], "fixm": [383, 393], "fixtur": [367, 379], "fkaren27": 1050, "flach": [409, 1005], "flach2008": 1005, "flach2015": 1005, "flag": [176, 248, 251, 328, 377, 379, 380, 382, 402, 407, 467, 614, 615, 631, 677, 679, 732, 789, 924, 925, 1020, 1042, 1046, 1047, 1049, 1050, 1051, 1052], "flair": 1007, "flak": 1051, "flake8": 583, "flanagan": [1045, 1046], "flander": 1054, "flat": [2, 78, 121, 188, 234, 235, 236, 270, 411, 418, 419, 443, 449, 451, 464, 513, 1012, 1036, 1037, 1052], "flat_grid": 246, "flatnonzero": [130, 201, 271, 280, 281, 785], "flatten": [54, 68, 237, 246, 270, 316, 339, 350, 385, 506, 573, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 857], "flatten_transform": [573, 1043], "flatter": [43, 62], "flavanoid": [48, 376], "flaviomorelli": 1046, "flavor": [379, 1008], "flavour": 418, "flaw": [393, 418], "flaxman": [1038, 1040], "fledg": [368, 419], "fleet": 43, "fleme": 1051, "flennerhag": 1044, "fletcher": [1001, 1036, 1040], "flexibl": [43, 62, 144, 182, 214, 285, 313, 339, 355, 386, 391, 405, 415, 421, 678, 908, 909, 927, 994, 999, 1001, 1005, 1009, 1015, 1024, 1025, 1029, 1045, 1049], "flier": 49, "flink": 102, "flip": [125, 586, 746, 952, 1007, 1040, 1049], "flip_i": 519, "flip_sign": 952, "float": [2, 46, 49, 51, 76, 80, 81, 86, 93, 94, 98, 99, 100, 103, 124, 127, 162, 179, 187, 200, 204, 237, 266, 271, 272, 276, 280, 349, 355, 366, 373, 374, 379, 388, 393, 407, 410, 411, 412, 419, 420, 422, 423, 424, 428, 430, 434, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 528, 529, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 587, 588, 592, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 614, 615, 617, 618, 619, 620, 621, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 763, 770, 773, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 818, 821, 824, 826, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 868, 871, 874, 875, 881, 882, 884, 886, 888, 889, 890, 891, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 931, 932, 934, 935, 938, 949, 950, 967, 979, 985, 990, 995, 1005, 1006, 1008, 1009, 1015, 1020, 1021, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "float16": 1045, "float32": [55, 146, 237, 310, 326, 367, 374, 379, 380, 381, 393, 405, 407, 561, 562, 563, 564, 567, 568, 569, 570, 597, 598, 644, 645, 662, 703, 767, 873, 916, 917, 918, 919, 932, 980, 981, 982, 1021, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "float64": [45, 50, 52, 53, 86, 103, 105, 146, 147, 148, 149, 160, 171, 187, 188, 247, 266, 280, 283, 325, 326, 327, 342, 367, 373, 379, 380, 381, 393, 419, 424, 461, 474, 475, 478, 481, 482, 483, 500, 501, 512, 513, 520, 521, 522, 524, 535, 541, 543, 546, 547, 549, 550, 552, 585, 586, 593, 595, 601, 645, 652, 654, 655, 658, 659, 660, 661, 662, 667, 673, 674, 677, 679, 684, 686, 687, 691, 698, 703, 710, 711, 712, 713, 714, 716, 720, 721, 723, 724, 725, 727, 729, 730, 733, 734, 735, 739, 740, 741, 742, 743, 744, 747, 752, 757, 759, 760, 787, 788, 790, 791, 792, 797, 798, 799, 818, 873, 881, 882, 889, 901, 910, 911, 913, 914, 917, 919, 929, 932, 934, 950, 975, 978, 980, 981, 982, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "float_info": 57, "floch": 1053, "floor": 53, "floor_x": 53, "flore": 1049, "florian": [1029, 1036, 1040, 1042, 1046, 1053], "florin": 1054, "flow": 381, "flowchart": [399, 415], "flower": [118, 129, 281, 510, 511, 1005, 1024], "floyd": [374, 692, 1002], "floydsoft": 1040, "fluctuat": [51, 93, 150, 214, 279, 1044], "flush": 222, "fly": [146, 384, 387, 512, 513, 586, 1036, 1038, 1045], "flyingdutchman23": 1049, "flyingimmidev": 1036, "flynn": [1049, 1051], "fmax": 232, "fmi": [411, 735], "fmin_l_bfgs_b": [614, 615], "fmt": [94, 225], "fn": [329, 411, 716, 722, 733, 734, 735, 786, 787, 788, 791, 1005, 1006], "fn_c": 281, "fna": [169, 376], "fnlwgt": [328, 500], "fnr": [269, 702, 731], "fo": 419, "focu": [43, 48, 121, 135, 171, 263, 302, 366, 384, 409, 418, 557, 558, 563, 565, 566, 682, 1002, 1008, 1015, 1024, 1025, 1028], "focus": [62, 109, 203, 289, 374, 379, 391, 1002, 1015, 1024], "fokow": 1053, "fold": [2, 43, 100, 106, 109, 141, 143, 146, 160, 168, 187, 203, 259, 266, 267, 268, 270, 272, 273, 275, 282, 286, 319, 334, 349, 362, 374, 379, 382, 383, 392, 393, 402, 410, 411, 420, 440, 475, 497, 540, 571, 572, 598, 606, 651, 655, 657, 659, 663, 665, 667, 669, 677, 679, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 839, 842, 889, 910, 913, 994, 1001, 1005, 1015, 1020, 1036, 1038, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1053], "folder": [2, 104, 374, 377, 379, 383, 387, 397, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 1008], "folkman": 1043, "folloni": 1047, "follow": [0, 25, 43, 46, 57, 63, 64, 68, 72, 87, 88, 90, 96, 100, 103, 104, 119, 121, 130, 135, 138, 147, 148, 152, 164, 176, 177, 182, 186, 187, 188, 189, 190, 194, 196, 199, 201, 203, 212, 214, 215, 229, 232, 242, 248, 249, 251, 263, 266, 272, 281, 282, 286, 289, 312, 318, 319, 321, 322, 324, 325, 326, 329, 339, 349, 353, 354, 355, 357, 361, 362, 366, 367, 373, 374, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 397, 399, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 426, 428, 430, 432, 433, 434, 435, 440, 444, 446, 448, 449, 450, 451, 452, 456, 464, 466, 467, 468, 471, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 519, 538, 542, 544, 545, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 635, 637, 638, 650, 656, 662, 663, 674, 675, 684, 696, 698, 703, 709, 713, 717, 722, 792, 823, 845, 850, 851, 852, 854, 856, 858, 859, 860, 867, 871, 872, 873, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 906, 908, 909, 913, 916, 917, 918, 919, 923, 930, 946, 947, 951, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1033, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "folwarczn\u00fd": 1053, "fonari": [1048, 1049], "fond": 1029, "fondat": 1029, "font": [147, 203, 228, 246, 920, 922], "font_manag": [112, 298, 341], "font_prop": 112, "font_siz": 316, "fontdict": [54, 74], "fontnam": [920, 1049], "fontproperti": [112, 298, 341], "fontsiz": [44, 47, 49, 54, 70, 83, 93, 124, 143, 164, 174, 175, 177, 180, 188, 195, 204, 213, 225, 235, 236, 260, 267, 276, 277, 278, 283, 284, 310, 316, 348, 922], "fontweight": [93, 209], "foo": [381, 585, 1009], "food": [0, 376], "foot": 1023, "footer": [54, 102, 273, 353, 354, 374, 491, 492], "footnot": [1012, 1024], "footprint": [323, 326, 366, 368, 411, 416, 545, 559, 560, 561, 562, 567, 568, 569, 570, 1038, 1041, 1042, 1047, 1048, 1051], "fopenmp": [377, 380], "foral": [411, 421, 617], "forbid": [411, 418], "forbidden": [188, 418], "forc": [135, 171, 218, 285, 292, 316, 353, 373, 377, 406, 415, 418, 453, 460, 467, 470, 500, 610, 613, 650, 651, 656, 657, 661, 664, 665, 666, 667, 676, 677, 678, 685, 688, 691, 758, 782, 785, 826, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 910, 911, 912, 913, 914, 932, 934, 935, 1015, 1031, 1041, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "force_all_finit": [782, 932, 934, 935, 1047, 1050, 1055], "force_alpha": [843, 844, 845, 847, 1051], "force_finit": [610, 613, 732, 789, 1005, 1050], "force_int_remainder_col": [467, 470], "force_writ": [934, 935, 1054], "ford": 51, "forecast": [42, 43, 147, 150, 170, 178, 184, 216, 272, 409, 410, 421, 495, 500, 566, 615, 619, 626, 627, 629, 705, 746, 749, 750, 752, 794, 825, 830, 831, 834, 1005, 1024, 1026], "foreground": [75, 99], "foreign_work": 266, "foreman": 1043, "forese": 391, "forest": [2, 14, 50, 64, 67, 134, 140, 143, 145, 146, 148, 149, 150, 151, 153, 155, 158, 182, 184, 185, 192, 241, 269, 271, 273, 305, 323, 353, 360, 362, 372, 392, 393, 409, 420, 466, 467, 493, 494, 500, 502, 519, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 634, 638, 804, 809, 834, 841, 868, 882, 912, 916, 917, 918, 994, 995, 1006, 1013, 1021, 1025, 1026, 1027, 1031, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1053], "forest_import": 142, "forestclassifi": 1041, "forestcolumntransform": 155, "forestcov": 251, "forg": [321, 322, 323, 324, 325, 326, 327, 328, 329, 367, 380, 382, 383, 387, 397, 398], "forget": [188, 362, 367, 373, 383, 391, 416, 1002], "forget_factor": [416, 542], "forgiv": 738, "forina": 376, "fork": [377, 379, 387, 391], "forkserv": 391, "form": [2, 43, 48, 57, 68, 77, 93, 100, 121, 158, 178, 179, 184, 187, 247, 248, 263, 272, 331, 362, 373, 376, 379, 381, 383, 393, 394, 408, 411, 414, 415, 416, 417, 418, 419, 421, 423, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 462, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 689, 691, 692, 693, 694, 695, 696, 697, 703, 801, 802, 803, 804, 807, 808, 809, 812, 814, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 940, 961, 964, 994, 996, 998, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1011, 1015, 1020, 1024, 1042, 1046, 1048], "formal": [393, 394, 411, 418, 848, 849, 1002, 1005, 1006, 1009], "format": [2, 47, 50, 51, 52, 59, 87, 91, 94, 102, 111, 121, 130, 138, 143, 146, 148, 160, 164, 165, 192, 195, 200, 214, 232, 255, 267, 277, 279, 280, 283, 287, 296, 297, 300, 301, 316, 321, 329, 348, 357, 361, 366, 372, 378, 379, 381, 382, 387, 388, 392, 393, 405, 412, 415, 418, 419, 435, 445, 446, 448, 450, 452, 453, 455, 462, 467, 471, 485, 486, 487, 488, 490, 492, 500, 501, 502, 512, 513, 514, 527, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 555, 561, 562, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 588, 591, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 650, 656, 662, 663, 664, 666, 670, 671, 672, 680, 681, 682, 692, 693, 696, 701, 715, 717, 724, 743, 744, 755, 772, 795, 796, 837, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 895, 900, 901, 906, 908, 920, 934, 935, 958, 966, 970, 980, 981, 982, 983, 984, 985, 995, 1005, 1008, 1013, 1015, 1016, 1019, 1021, 1031, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1051, 1053, 1054, 1055], "format_func": 297, "formatter_result": 91, "former": [51, 355, 410, 418, 419, 569, 806, 813, 822, 1007, 1036, 1042, 1045], "formerli": [218, 1037, 1040, 1042, 1043], "formul": [135, 171, 180, 218, 281, 379, 411, 413, 416, 419, 421, 424, 478, 553, 554, 561, 568, 654, 655, 658, 659, 660, 662, 663, 669, 674, 767, 773, 802, 910, 913, 916, 918, 1001, 1005, 1006, 1009, 1015, 1027, 1031, 1053], "formula": [109, 110, 408, 411, 413, 424, 476, 478, 520, 521, 522, 594, 647, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 680, 682, 708, 733, 734, 759, 768, 825, 994, 999, 1001, 1005, 1010, 1011, 1015, 1019, 1041, 1043, 1045], "forrest": [1047, 1048], "forsal": [57, 355, 374], "forsyth": 1044, "forth": 387, "fortin": [1036, 1038, 1039, 1040], "fortran": [423, 545, 650, 651, 656, 657, 664, 665, 666, 667, 669, 685, 688, 689, 690, 934, 935, 1036, 1039, 1040, 1044], "fortun": [385, 418, 1049, 1050], "forward": [46, 135, 169, 248, 323, 366, 379, 402, 405, 420, 512, 513, 543, 547, 557, 563, 564, 606, 672, 689, 690, 868, 872, 1001, 1025, 1048], "foster": [0, 1044], "fouchet": 1042, "found": [0, 45, 52, 57, 58, 59, 131, 142, 168, 171, 175, 177, 179, 218, 242, 249, 266, 270, 273, 274, 275, 285, 317, 321, 324, 326, 327, 342, 355, 366, 368, 373, 376, 378, 379, 381, 391, 393, 394, 405, 408, 410, 411, 414, 415, 416, 418, 419, 421, 436, 444, 447, 448, 462, 475, 561, 562, 563, 564, 568, 569, 592, 594, 614, 615, 632, 640, 651, 655, 657, 659, 665, 667, 669, 675, 676, 678, 680, 682, 691, 692, 716, 723, 804, 807, 808, 818, 826, 845, 850, 851, 857, 879, 881, 882, 916, 917, 918, 919, 923, 931, 988, 992, 994, 997, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1015, 1019, 1020, 1021, 1025, 1036, 1039, 1040, 1043, 1044, 1046, 1050, 1053], "foundat": [0, 155, 266, 379, 409, 1008], "founder": 1029, "fouqu": 1036, "fouquet": [1052, 1053], "four": [64, 165, 179, 192, 197, 215, 259, 260, 266, 332, 339, 375, 379, 393, 561, 568, 723, 916, 918, 940, 1001, 1003, 1004, 1005, 1015, 1023], "fourier": [2, 23, 246, 642, 643, 644, 645, 646, 762, 763, 997], "fourier_approx_svm": 246, "fourier_scor": 246, "fourier_tim": 246, "fournier": 1045, "fourth": 143, "fowkl": [411, 735], "fowlk": [735, 1042], "fowlkes_mallows_scor": [2, 411, 1005, 1042, 1044], "fox": [329, 419, 1052], "fp": [47, 266, 329, 411, 716, 722, 733, 734, 735, 786, 787, 788, 791, 1005], "fp_c": 281, "fpgawesom": 1050, "fpr": [2, 50, 242, 251, 266, 269, 281, 282, 386, 596, 600, 702, 706, 710, 731, 793, 1005, 1033, 1036, 1052], "fpr_a": 281, "fpr_b": 281, "fpr_grid": 281, "fpr_score": 266, "fr": [535, 541, 662, 668, 689, 690, 762, 763, 1003, 1005], "fraa\u00df": 1053, "frac": [63, 111, 112, 135, 272, 279, 281, 324, 408, 409, 411, 413, 416, 417, 418, 419, 421, 434, 466, 468, 485, 486, 487, 558, 560, 562, 564, 566, 569, 572, 574, 615, 619, 623, 626, 627, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 682, 683, 684, 700, 733, 734, 759, 773, 841, 842, 851, 859, 866, 909, 911, 914, 917, 919, 997, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1019, 1020, 1021], "frac12": [418, 997], "fractal": [169, 376], "fraction": [2, 43, 62, 64, 147, 150, 214, 222, 232, 266, 279, 349, 354, 409, 415, 418, 441, 442, 452, 453, 459, 460, 519, 531, 561, 562, 563, 564, 568, 569, 570, 594, 597, 606, 670, 671, 672, 675, 680, 681, 682, 707, 725, 726, 727, 728, 738, 798, 800, 806, 810, 832, 833, 847, 875, 910, 911, 912, 916, 917, 918, 919, 970, 1001, 1005, 1008, 1012, 1013, 1015, 1020, 1021, 1025, 1037, 1038, 1039, 1050, 1053], "fragil": 659, "fragment": [88, 124], "frame": [43, 103, 150, 176, 187, 188, 214, 266, 318, 328, 374, 379, 391, 394, 492, 493, 494, 496, 500, 504, 505, 506, 508, 509, 514, 1048], "frameon": [46, 220], "framework": [272, 366, 381, 391, 393, 405, 411, 641, 692, 801, 1001, 1002, 1009, 1025, 1029, 1036, 1042], "fran": [1048, 1049, 1050], "franc": [318, 768], "francesco": [1048, 1051], "franci": [540, 662, 1001, 1042], "francia": 1050, "francidona": 1046, "francisco": [419, 1017], "franck": [1051, 1053, 1054], "franco": 1046, "francoi": [1036, 1049], "francoisgoupil": 1050, "frank": [272, 839, 1006, 1041, 1045, 1046], "frankhui": 1044, "franki": 1049, "franz": 1044, "franziska": 1047, "fran\u00e7oi": [0, 363, 1039], "fraud": [266, 329, 1001, 1029], "fraudul": [266, 1001, 1029], "fraudulent_accept": 266, "fraudulent_refus": 266, "fred": [102, 1036, 1049], "freddi": 1055, "freder": 1046, "frederick": 1049, "fredrik": 1044, "free": [0, 44, 64, 88, 176, 177, 183, 213, 262, 312, 373, 378, 379, 380, 387, 391, 397, 419, 455, 613, 675, 864, 914, 994, 997, 1001, 1005, 1025, 1044], "freebsd": 382, "freedom": [43, 123, 176, 201, 203, 205, 272, 545, 660, 801, 1001, 1039], "freeland": 1051, "freestand": 381, "freez": [383, 397, 405, 1025, 1029, 1044], "frei": [73, 443, 457, 1046], "freija": 1044, "freita": [1041, 1043, 1044], "frellwan": 1049, "fremtpl2": 232, "fremtpl2freq": 232, "fremtpl2sev": 232, "french": [232, 318], "freq": [187, 199, 355], "frequenc": [57, 64, 171, 188, 199, 208, 214, 245, 322, 323, 353, 354, 355, 374, 391, 409, 415, 416, 418, 419, 420, 555, 561, 563, 564, 565, 568, 592, 593, 594, 595, 608, 662, 663, 668, 670, 672, 678, 679, 680, 689, 690, 837, 872, 881, 882, 908, 910, 913, 916, 918, 940, 1001, 1002, 1007, 1015, 1019, 1021, 1038, 1040, 1041, 1047, 1054], "frequent": [72, 135, 183, 275, 281, 282, 286, 354, 376, 379, 419, 555, 594, 634, 858, 881, 882, 885, 897, 995, 997, 1005, 1019, 1025, 1054], "frequentist": 532, "fresh": [542, 1025, 1046], "fresh_restart": 542, "fresh_restarts_max_it": 542, "freund": [418, 557, 558], "fri": [43, 150, 188, 374], "frid": [1029, 1039], "friedman": [2, 138, 139, 149, 271, 413, 415, 418, 481, 520, 521, 522, 524, 562, 563, 564, 569, 597, 598, 838, 916, 917, 919, 999, 1001, 1006, 1012, 1021], "friedman2001": 418, "friedman2002": 418, "friedman_ms": [562, 563, 564, 569, 917, 919, 1021, 1052, 1053], "friend": [425, 1040], "friendli": [121, 367, 379, 387, 416, 901, 1017, 1018, 1024, 1025], "fring": [85, 411], "fritsch": [0, 401, 1036, 1037, 1039], "fritzk": 1051, "fro": [416, 542, 544, 551, 697, 1001], "fro_2": [665, 667], "frobeniu": [54, 124, 446, 450, 462, 472, 473, 474, 475, 476, 477, 478, 479, 535, 541, 542, 544, 549, 550, 551, 1001, 1043], "frobenius_norm": 692, "from": [0, 2, 37, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 963, 965, 966, 967, 968, 969, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "from_dtyp": [43, 144, 266, 328, 418, 565, 566, 1053], "from_estim": [45, 48, 62, 64, 66, 67, 70, 89, 137, 140, 150, 151, 152, 156, 188, 198, 206, 223, 228, 247, 252, 254, 265, 266, 269, 274, 275, 279, 282, 285, 295, 300, 303, 317, 321, 322, 323, 324, 326, 327, 328, 329, 338, 339, 340, 341, 343, 344, 346, 358, 386, 409, 441, 635, 636, 637, 701, 702, 704, 705, 706, 722, 731, 786, 788, 791, 792, 793, 810, 827, 1000, 1005, 1012, 1033, 1049, 1050, 1051, 1052, 1053, 1054], "from_predict": [43, 52, 68, 107, 155, 187, 251, 268, 279, 281, 324, 331, 353, 386, 441, 635, 701, 702, 704, 705, 706, 722, 731, 786, 788, 791, 792, 793, 1005, 1033, 1049, 1050, 1051, 1052, 1053, 1054], "frombuffer_empti": 1043, "fromkei": [273, 923], "fromnumer": 385, "front": 1043, "frontal": 374, "frontend": 385, "frontier": [48, 228, 298, 341, 1011], "frozen": 381, "frozentransform": 381, "frsi": 1044, "fruit": [379, 1006], "fr\u00e9minvil": [1053, 1054], "fs1995": 418, "ftfy": 419, "ftorres16": [1050, 1051], "ftp": [169, 376, 686, 687], "ftwo_scor": [746, 1005], "fu": [662, 1040], "fuck": [1048, 1049], "fuction": 988, "fuent": [1037, 1038], "fugled": 1053, "fujikawa": 1043, "fukatani": 1043, "fulfil": [379, 411, 418, 804, 807, 808, 818, 868, 872, 1001], "full": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 366, 367, 368, 372, 374, 377, 379, 381, 384, 387, 391, 393, 394, 397, 407, 411, 413, 415, 416, 419, 425, 428, 434, 435, 444, 448, 450, 452, 462, 491, 492, 495, 496, 500, 501, 504, 505, 506, 507, 508, 509, 511, 514, 539, 541, 545, 554, 563, 564, 571, 572, 636, 652, 654, 658, 673, 684, 725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 801, 802, 815, 845, 940, 994, 1001, 1004, 1007, 1008, 1012, 1015, 1018, 1025, 1036, 1040, 1042, 1044, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055], "full_data": 194, "full_lik": 98, "full_model": 294, "full_scor": 183, "fulli": [52, 79, 88, 142, 147, 366, 373, 374, 379, 393, 411, 417, 418, 420, 446, 450, 561, 562, 568, 569, 916, 917, 918, 919, 920, 922, 995, 1001, 1010, 1018, 1024, 1049, 1050], "fullpap": 1018, "fultz": 1049, "fun": [423, 537, 1029], "fun_arg": [423, 537], "func": [50, 107, 140, 187, 195, 232, 305, 379, 412, 468, 703, 872, 1015, 1040, 1042, 1044, 1045, 1053, 1054], "func_metr": 632, "func_min": [614, 615], "funcformatt": 297, "function": [2, 4, 27, 43, 44, 45, 46, 47, 52, 54, 58, 59, 64, 72, 80, 86, 87, 88, 90, 92, 99, 102, 103, 104, 107, 121, 124, 126, 130, 133, 140, 141, 144, 145, 146, 147, 148, 149, 150, 160, 165, 168, 169, 171, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 188, 190, 193, 194, 197, 199, 207, 209, 210, 211, 212, 214, 215, 220, 221, 222, 227, 230, 231, 232, 234, 242, 244, 247, 248, 251, 252, 254, 255, 262, 264, 266, 270, 272, 273, 274, 275, 280, 281, 285, 287, 289, 292, 307, 310, 312, 319, 321, 322, 324, 325, 327, 329, 334, 336, 339, 340, 341, 342, 343, 344, 346, 349, 351, 353, 354, 358, 362, 366, 367, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 397, 402, 405, 407, 409, 410, 411, 412, 413, 414, 416, 417, 419, 420, 422, 423, 426, 428, 430, 433, 434, 435, 440, 443, 446, 447, 448, 450, 451, 453, 455, 457, 460, 461, 462, 463, 464, 467, 468, 471, 472, 474, 475, 477, 481, 491, 492, 494, 496, 499, 500, 501, 507, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 576, 579, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 608, 611, 612, 613, 614, 615, 619, 623, 624, 626, 627, 631, 632, 635, 636, 637, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 702, 703, 704, 706, 707, 708, 710, 715, 716, 720, 723, 725, 726, 727, 728, 732, 736, 738, 739, 742, 744, 745, 746, 754, 759, 761, 765, 766, 767, 769, 772, 775, 778, 782, 783, 784, 785, 786, 787, 789, 793, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 880, 884, 885, 886, 887, 888, 889, 892, 894, 897, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 932, 942, 944, 945, 946, 951, 952, 963, 964, 970, 971, 974, 975, 978, 979, 988, 993, 994, 995, 996, 998, 1000, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1021, 1024, 1025, 1026, 1027, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "functiontransform": [2, 43, 102, 140, 214, 232, 335, 405, 467, 468, 1015, 1041, 1042, 1044, 1049, 1050, 1051, 1053, 1055], "functiontransformerfunctiontransform": 140, "functool": 232, "fundament": [72, 82, 112, 354, 383, 391, 392, 414, 500, 542, 544, 551, 712, 1001, 1005], "funder": 0, "fung": 415, "funnel": [45, 497, 498], "funni": 102, "furlanello": 747, "furrer": 1053, "further": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 62, 77, 103, 109, 116, 121, 138, 143, 145, 168, 171, 176, 187, 189, 194, 199, 234, 239, 248, 266, 269, 272, 273, 279, 326, 342, 354, 361, 366, 379, 391, 393, 405, 410, 411, 413, 416, 418, 419, 421, 447, 455, 465, 519, 536, 539, 586, 618, 626, 632, 662, 663, 670, 671, 672, 680, 681, 682, 695, 699, 741, 778, 782, 785, 796, 797, 844, 850, 851, 858, 859, 886, 888, 908, 910, 913, 952, 1004, 1005, 1007, 1008, 1009, 1011, 1013, 1015, 1019, 1020, 1045, 1049], "furthermor": [43, 52, 72, 141, 188, 189, 251, 252, 254, 292, 353, 354, 366, 368, 386, 411, 416, 418, 419, 566, 594, 610, 623, 708, 740, 759, 761, 799, 908, 1001, 1013, 1039, 1043], "fuse": [380, 1042, 1052], "fusion": 391, "futur": [0, 52, 176, 215, 254, 324, 327, 379, 383, 393, 394, 405, 415, 419, 500, 538, 639, 927, 974, 1006, 1020, 1021, 1029, 1033, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "futurewarn": [379, 387, 1043, 1044, 1045, 1047, 1049, 1052, 1053], "fuxin": 646, "fw": 692, "fwe": 596, "f\u00e9lix": [1036, 1038, 1039, 1040, 1044], "g": [0, 25, 43, 47, 49, 51, 61, 62, 63, 64, 68, 86, 88, 98, 102, 113, 116, 128, 135, 138, 146, 147, 172, 173, 174, 179, 183, 186, 187, 197, 202, 214, 215, 216, 218, 232, 239, 247, 248, 257, 266, 272, 276, 277, 283, 291, 298, 317, 329, 334, 348, 349, 355, 362, 366, 371, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 391, 393, 402, 405, 407, 409, 411, 413, 415, 416, 418, 419, 420, 421, 423, 440, 446, 447, 450, 452, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 507, 532, 535, 537, 538, 541, 545, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 593, 594, 595, 597, 598, 601, 608, 614, 615, 621, 626, 627, 634, 637, 638, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 694, 696, 701, 720, 724, 732, 742, 744, 767, 782, 789, 792, 803, 805, 806, 807, 808, 810, 811, 813, 822, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 855, 857, 858, 859, 860, 864, 865, 866, 868, 871, 873, 874, 875, 878, 880, 881, 884, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 951, 952, 964, 994, 995, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1019, 1020, 1021, 1025, 1028, 1029, 1036, 1040, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "g0g0gadget": 1046, "g2015": 1012, "g_": 411, "g_i": [418, 653], "g_j": [652, 673, 684], "ga": 0, "gaaca": 179, "gaatattaggccga": 391, "gabor": 1050, "gabriel": [1044, 1045, 1046, 1049, 1050], "gael": [0, 400, 1023, 1025, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "gaido": 1045, "gaidon": 1036, "gain": [2, 86, 150, 236, 279, 292, 294, 328, 329, 332, 353, 354, 361, 378, 385, 387, 418, 500, 536, 561, 565, 566, 568, 730, 760, 801, 802, 837, 916, 918, 1006, 1010, 1018, 1021, 1039, 1043, 1046], "gain_matrix": 266, "galleri": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 374, 379, 381, 393, 397, 404, 1026, 1036, 1040, 1043], "galli": 1048, "gallopoulo": 416, "galvez": 1041, "gambl": 51, "gameiro": 1050, "gamma": [2, 43, 44, 45, 46, 48, 50, 67, 68, 126, 156, 162, 192, 228, 241, 246, 247, 270, 272, 274, 277, 283, 323, 331, 332, 334, 336, 339, 341, 342, 345, 346, 348, 351, 414, 416, 418, 421, 455, 539, 566, 623, 624, 643, 644, 645, 647, 648, 649, 652, 684, 689, 695, 728, 751, 756, 763, 770, 779, 780, 781, 801, 815, 818, 903, 904, 905, 910, 911, 912, 913, 914, 994, 997, 1001, 1003, 1018, 1020, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1050, 1051, 1052], "gamma_": [539, 1052], "gamma_0": [257, 263], "gamma_2d_rang": 342, "gamma_bound": 624, "gamma_k": 414, "gamma_rang": 342, "gammaregressor": [2, 232, 322, 325, 684, 1001, 1047, 1050, 1051, 1055], "gandenberg": 1045, "ganesh": [1041, 1053], "ganevgv": 1046, "gangesh": 1048, "gangwar": 1043, "ganiev": [1041, 1042, 1043], "ganssl": 1043, "gap": [43, 52, 150, 353, 374, 415, 474, 475, 481, 592, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 825, 916, 917, 918, 919, 1001, 1002, 1044, 1048, 1050], "garagecar": [144, 155], "garagefinish": 144, "garagetyp": 155, "garageyrblt": 107, "garbag": 1048, "garcia": 1049, "garc\u00eda": [1045, 1046, 1051], "gardin": 373, "gardner": [1044, 1045], "garg": [1046, 1047], "gargsya": 1046, "gari": [374, 1043], "garret": 1040, "garreta": [1038, 1039], "garrett": 1040, "garri": 376, "garriga": [278, 415, 833], "gasmi": 1050, "gasquez": 1043, "gate": [376, 1049], "gather": [325, 327, 387, 394, 411, 1015, 1029], "gatsbi": 1018, "gaug": 187, "gaull": 768, "gaurav": [1044, 1045, 1046, 1047, 1048, 1050], "gauravahlawat": [1044, 1045], "gaussian": [2, 8, 19, 28, 43, 44, 46, 48, 64, 66, 67, 70, 79, 80, 81, 88, 90, 94, 98, 109, 110, 111, 112, 113, 119, 122, 123, 124, 130, 136, 137, 143, 147, 151, 153, 162, 183, 194, 197, 199, 201, 204, 224, 225, 226, 227, 241, 245, 247, 259, 260, 283, 297, 302, 305, 307, 315, 316, 336, 339, 346, 347, 351, 371, 375, 381, 384, 393, 411, 413, 416, 417, 423, 455, 472, 473, 474, 475, 476, 477, 478, 479, 500, 508, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 534, 536, 548, 553, 554, 557, 567, 614, 615, 617, 618, 619, 621, 622, 623, 626, 627, 629, 631, 647, 648, 676, 681, 684, 707, 728, 745, 756, 780, 801, 802, 804, 818, 843, 844, 845, 846, 847, 848, 849, 853, 884, 888, 896, 900, 901, 902, 999, 1001, 1002, 1003, 1011, 1026, 1027, 1029, 1030, 1031, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1046, 1048, 1050], "gaussian_filt": [53, 80, 81, 87], "gaussian_process": [2, 66, 67, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 393, 421, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 647, 1006, 1026, 1039, 1042, 1043], "gaussianhmm": 1036, "gaussianmixtur": [2, 79, 90, 258, 259, 260, 261, 262, 263, 417, 801, 1004, 1042, 1044, 1045, 1049, 1050, 1052, 1054], "gaussianmixturegaussianmixtur": 262, "gaussiannb": [2, 61, 62, 64, 67, 157, 274, 362, 409, 418, 440, 573, 843, 844, 845, 847, 869, 999, 1006, 1007, 1040, 1041, 1042, 1044, 1049, 1052], "gaussiannois": 381, "gaussianprocessclassifi": [2, 66, 67, 172, 173, 174, 175, 179, 393, 421, 615, 623, 624, 626, 627, 1006, 1042, 1044, 1046, 1050], "gaussianprocessregressor": [2, 171, 176, 177, 178, 179, 180, 421, 614, 617, 618, 619, 620, 621, 625, 628, 629, 647, 1006, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "gaussianprocessregressorifittedgaussianprocessregressor": 176, "gaussianrandomproject": [2, 901, 1017, 1037, 1050, 1052, 1053], "gauthier": 1050, "gauz": 1044, "gave": [64, 409, 804, 807, 808, 818, 875], "gavin": [632, 995], "gaynor": 405, "ga\u00ebl": [394, 1029], "gb": [158, 418, 557, 637], "gbc": 362, "gbdt": [140, 188, 266, 321, 322, 327, 384, 418], "gbdt_appli": 140, "gbdt_applyfunctiontransform": 140, "gbdt_cst": 322, "gbdt_leaves_yield": 140, "gbdt_model": 140, "gbdt_no_cst": [152, 322], "gbdt_pipelin": 155, "gbdt_with_monotonic_cst": 152, "gbdt_with_monotonic_cst_df": 152, "gbgradientboostingregressor": 158, "gbm": [146, 418, 1039], "gbm_early_stop": 145, "gbm_full": 145, "gbp": 1029, "gbr": 147, "gbr_l": 147, "gbrt": [43, 52, 214, 418], "gbrt_mean_poisson": 52, "gbrt_median": 52, "gbrt_percentile_5": 52, "gbrt_percentile_95": 52, "gbrt_predict": 43, "gbt": 366, "gc": 49, "gca": [47, 79, 95, 116, 123, 174, 219, 223, 225, 241, 254, 276, 300, 302, 313, 338, 340, 343, 344, 1012, 1033], "gcc": [377, 380, 385, 391], "gcf": [47, 1012], "gcv": [677, 679], "gcv_mode": [677, 1038], "gd": [51, 158], "gdb": [380, 382, 1028], "gdex1": 1046, "ge": [51, 996, 1007, 1048], "ge0": 1021, "gear": 1023, "geb": 57, "gebremichael": [1051, 1052], "gedeck": 1043, "geevarghes": 1051, "gefel": 1005, "gegr": 419, "gei": 1038, "geiger": [1053, 1054], "geist": 376, "gelavizh": 1047, "gelder": 1047, "gemm": 1054, "gen": 785, "gen_batch": [2, 388, 956], "gen_cov": 111, "gen_even_slic": [2, 214, 388, 955], "gender": [253, 881, 1015], "gender_femal": 881, "gender_mal": 881, "gene": [179, 373, 408, 454, 517, 597, 598, 855, 888], "gener": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 98, 102, 103, 104, 105, 106, 107, 110, 112, 115, 116, 117, 118, 121, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 169, 172, 173, 174, 175, 176, 179, 182, 183, 186, 187, 188, 189, 190, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 366, 367, 371, 372, 374, 376, 380, 381, 382, 383, 384, 385, 387, 388, 391, 392, 405, 408, 409, 411, 415, 417, 419, 420, 421, 423, 427, 432, 434, 440, 443, 446, 449, 450, 452, 455, 457, 461, 462, 463, 465, 467, 468, 470, 472, 475, 477, 485, 486, 487, 491, 494, 496, 499, 500, 501, 507, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 540, 542, 544, 545, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 614, 615, 618, 619, 622, 623, 624, 626, 627, 631, 632, 633, 634, 636, 637, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 689, 690, 693, 694, 695, 696, 697, 698, 699, 705, 708, 710, 721, 725, 727, 728, 741, 747, 761, 782, 785, 789, 797, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 839, 840, 841, 842, 848, 849, 851, 853, 854, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 896, 897, 898, 899, 900, 901, 908, 909, 910, 911, 913, 914, 917, 919, 920, 921, 922, 946, 947, 951, 952, 955, 956, 969, 973, 975, 978, 993, 994, 995, 997, 999, 1000, 1002, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1017, 1018, 1020, 1021, 1026, 1027, 1028, 1029, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055], "generalis": [792, 1005, 1025], "generaliz": [346, 418], "generate_data": [46, 69], "generate_dataset": 49, "generate_missing_valu": 150, "generate_onli": [946, 1046], "generate_synthetic_data": 53, "generickernelmixin": [179, 1046], "genericunivariateselect": [2, 420, 599, 600, 602, 603, 604, 606, 1050, 1052, 1053], "generos": 379, "genesi": [1050, 1052], "genet": 1024, "genoa": 376, "genom": [58, 517, 1024], "genotyp": 373, "gensim": 1024, "gentil": [376, 1048], "gentli": 416, "genvalen": [1048, 1049, 1050, 1051, 1052], "geodes": [234, 692, 1002], "geoff": [839, 1006], "geoffrei": [865, 866, 1009, 1047, 1048, 1049, 1050, 1052], "geograph": [43, 50, 305, 374, 502], "geometr": [123, 411, 692, 708, 735, 761, 1002, 1044], "geometri": [74, 411, 1002, 1008], "geomspac": 327, "georg": [45, 374, 411, 1042, 1048, 1049, 1050, 1051], "georgi": [1044, 1047], "georgiamaydai": 1051, "geospati": [305, 417], "geovan": [1049, 1050], "geq": [245, 409, 416, 418, 1001, 1005, 1015, 1019, 1020], "ger": 419, "gerhard": [45, 374], "german_credit": 266, "germer": [1051, 1052], "geroldcsend": 1049, "geron": [1044, 1049, 1050], "gerstein": 517, "gertrud": 1043, "gertz": 453, "gervai": [1038, 1039], "gesa": 1048, "gesdd": 952, "gesvd": 952, "get": [2, 3, 43, 44, 48, 51, 52, 55, 57, 72, 85, 89, 122, 126, 147, 150, 157, 166, 169, 171, 176, 177, 182, 187, 188, 189, 190, 207, 216, 229, 232, 234, 248, 249, 270, 273, 274, 276, 280, 283, 285, 289, 292, 297, 305, 313, 321, 328, 332, 335, 339, 342, 344, 347, 351, 353, 355, 357, 367, 372, 373, 374, 377, 379, 380, 381, 382, 384, 385, 386, 393, 397, 405, 407, 409, 410, 411, 412, 413, 415, 416, 418, 419, 420, 421, 425, 426, 427, 432, 434, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 465, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 699, 703, 725, 726, 727, 728, 730, 736, 737, 746, 760, 767, 768, 773, 789, 792, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 941, 943, 944, 945, 951, 952, 957, 963, 994, 1000, 1001, 1002, 1004, 1005, 1015, 1018, 1019, 1020, 1021, 1025, 1033, 1036, 1039, 1042, 1044, 1047, 1049, 1050, 1053], "get_adjacency_matrix": 55, "get_arrai": [848, 849], "get_bin_se": 451, "get_cmap": [62, 64, 347], "get_color": 46, "get_config": [2, 471, 785, 906, 971, 1051], "get_covari": [536, 538, 545], "get_data": [512, 513], "get_data_hom": [2, 47], "get_depth": [916, 917, 918, 919, 1045], "get_feature_nam": [324, 1044, 1045, 1047, 1048, 1049], "get_feature_names_out": [2, 54, 57, 187, 189, 324, 353, 354, 355, 374, 381, 393, 412, 419, 427, 432, 435, 445, 446, 448, 450, 452, 467, 470, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 570, 571, 572, 573, 574, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 1015, 1049, 1050, 1051, 1052, 1053, 1054], "get_figur": 135, "get_full_scor": 183, "get_height": [47, 145], "get_impute_it": 183, "get_impute_knn_scor": 183, "get_impute_mean": 183, "get_impute_zero_scor": 183, "get_indic": [57, 426, 454, 456], "get_initial_mean": 260, "get_legend_handles_label": [150, 247, 274, 279], "get_lin": 308, "get_metadata_rout": [248, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 960, 961, 962, 963, 964, 1005, 1053], "get_metr": 703, "get_minibatch": 47, "get_n_cal": [848, 849], "get_n_leav": [916, 917, 918, 919, 1045], "get_n_split": [393, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825], "get_nam": 314, "get_output_feature_nam": 1050, "get_param": [273, 382, 393, 421, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 1046, 1047, 1048, 1050, 1051], "get_precis": [472, 473, 474, 475, 476, 477, 478, 479, 536, 538, 545], "get_redirect": 55, "get_routing_for_object": [2, 248, 961], "get_scor": [2, 328, 393, 737, 1043, 1052], "get_scorer_nam": [2, 410, 736, 1005, 1050, 1053], "get_scores_for_imput": 183, "get_shap": [57, 426, 454, 456], "get_stop_word": [592, 593, 595], "get_submatrix": [426, 454, 456], "get_subplotspec": 386, "get_support": [165, 169, 323, 585, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 1038], "get_tag": 2, "get_tree_stat": [848, 849], "get_untrusted_typ": 405, "get_width": [47, 145], "get_x": [47, 145], "get_xaxi": [257, 302, 312], "get_xlim": [111, 209, 219, 312], "get_xticklabel": 283, "get_yaxi": [302, 312], "get_ybound": 86, "get_ylim": [209, 285, 312, 313], "getattr": [43, 47, 266, 312, 381, 393, 1052], "getgaurav2": 1046, "getmoredataget": 399, "gettempdir": 1008, "getter": [472, 473, 474, 475, 476, 477, 478, 479, 597, 598, 601], "geurt": [418, 559, 560, 561, 562, 569, 570, 918, 919], "gewili": [1051, 1052], "gh": 379, "ghahramani": 903, "gharibi": 1046, "ghg": 1042, "ghislain": 1048, "gholdman1": 1047, "ghorai": 1044, "ghosh": [0, 401, 411, 1036, 1037, 1053, 1054], "gia": 1047, "giancarlo": 1050, "gianr": 1051, "gibb": [864, 1010, 1024], "gideon": 1046, "giessel": 1042, "gigant": [1044, 1046, 1051, 1052], "gijsber": 1050, "gil": [366, 367, 380, 1039, 1044, 1045, 1048, 1049, 1053], "gilad": 1029, "gilberto": 1044, "gilbertson": [1050, 1051], "gilch": 1043, "gile": [1039, 1040], "gill": [0, 401, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "gilliam": 1043, "gilmor": 1040, "gim": 1048, "gini": [64, 190, 214, 232, 253, 284, 323, 557, 558, 561, 562, 563, 564, 568, 569, 570, 792, 916, 917, 918, 919, 994, 1013, 1021, 1044, 1045, 1052, 1053], "gionanidi": 1050, "giorgio": [1041, 1042, 1043, 1055], "giorgiop": 1041, "giotto": 1024, "giovanni": [1042, 1044], "gist": [379, 387, 1028], "git": [377, 381, 383, 385, 387, 1028, 1032, 1036, 1052, 1054], "github": [0, 51, 63, 103, 104, 140, 142, 151, 152, 155, 158, 166, 176, 187, 188, 189, 196, 242, 243, 244, 248, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 292, 310, 318, 322, 323, 325, 326, 328, 333, 361, 377, 378, 382, 383, 384, 385, 387, 391, 393, 394, 405, 407, 696, 1023, 1024, 1028, 1046], "githubusercont": 51, "gitter": [1043, 1044], "giudic": 1048, "giusepp": [1044, 1045], "give": [2, 43, 51, 52, 53, 61, 62, 74, 79, 82, 93, 95, 97, 102, 103, 107, 123, 146, 171, 176, 180, 182, 187, 188, 203, 205, 211, 214, 215, 216, 241, 263, 266, 269, 274, 281, 294, 298, 301, 310, 324, 325, 329, 335, 366, 368, 374, 376, 378, 379, 381, 385, 387, 391, 392, 393, 394, 399, 405, 408, 409, 411, 412, 413, 416, 418, 419, 421, 423, 436, 449, 450, 452, 454, 462, 475, 500, 503, 507, 537, 542, 553, 554, 555, 556, 561, 562, 568, 569, 570, 597, 598, 601, 611, 612, 642, 651, 665, 669, 680, 724, 734, 740, 743, 798, 804, 807, 808, 818, 829, 830, 831, 833, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 885, 886, 888, 889, 897, 1001, 1005, 1008, 1009, 1010, 1012, 1013, 1015, 1019, 1020, 1021, 1024, 1029, 1036, 1040, 1043, 1044, 1046, 1047, 1048, 1050, 1052], "given": [2, 8, 30, 46, 49, 50, 52, 64, 66, 72, 82, 91, 93, 109, 115, 122, 126, 141, 150, 151, 153, 155, 171, 178, 187, 188, 199, 214, 215, 218, 232, 235, 241, 245, 246, 248, 250, 251, 252, 266, 268, 272, 273, 274, 275, 281, 286, 295, 298, 299, 300, 314, 318, 324, 329, 353, 354, 355, 360, 361, 366, 368, 374, 378, 379, 385, 387, 388, 391, 393, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 428, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 459, 461, 462, 463, 464, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 486, 487, 490, 500, 505, 507, 509, 527, 537, 538, 540, 542, 543, 544, 547, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 593, 594, 595, 597, 598, 605, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 635, 636, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 691, 692, 694, 695, 701, 702, 703, 704, 705, 706, 708, 709, 710, 716, 718, 721, 722, 724, 728, 730, 731, 738, 740, 741, 744, 756, 759, 760, 762, 763, 768, 778, 782, 785, 786, 788, 791, 792, 793, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 816, 818, 822, 826, 827, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 894, 895, 897, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 927, 938, 939, 940, 960, 961, 963, 988, 992, 994, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055], "gkevinyen5418": 1044, "gkf": 415, "gkiasta": 1049, "gl": [169, 376], "glad": 379, "glanc": [289, 378], "glaser": [1044, 1045], "glass": 374, "glasso": [413, 481], "glaxosmithklin": 51, "gleb": [1049, 1051, 1052, 1053, 1055], "glemaitr": [1045, 1046, 1048], "glen": 1049, "glenn": 1042, "glennfrutiz": 1050, "glibc": 387, "glm": [214, 232, 322, 652, 673, 684, 1001, 1036, 1047], "glm_freq": 232, "glm_pure_premium": 232, "glm_sev": 232, "glmnet": [650, 651, 1036], "glob": 47, "global": [2, 3, 47, 49, 77, 90, 121, 214, 234, 235, 255, 281, 309, 322, 362, 366, 367, 385, 391, 393, 411, 421, 445, 455, 465, 471, 594, 630, 636, 692, 695, 696, 699, 711, 733, 734, 742, 787, 788, 791, 792, 822, 889, 904, 906, 974, 994, 1002, 1005, 1011, 1015, 1021, 1029, 1044, 1051], "global_dtyp": 367, "global_random_se": 367, "globular": [95, 411], "glorot": [865, 866], "glossari": [2, 362, 379, 381, 385, 422, 423, 440, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 467, 470, 472, 475, 477, 491, 494, 496, 499, 501, 507, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 587, 588, 598, 606, 611, 612, 614, 615, 631, 636, 638, 643, 644, 645, 646, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 696, 697, 698, 699, 705, 778, 782, 785, 797, 801, 802, 804, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 850, 851, 853, 854, 856, 857, 858, 859, 861, 862, 864, 865, 866, 867, 870, 873, 885, 889, 897, 900, 901, 903, 904, 908, 909, 910, 913, 916, 917, 918, 919, 951, 952, 975, 978, 994, 995, 1001, 1044], "glu": [169, 376], "glushchenkov": 1050, "gl\u00f2ria": [1049, 1051], "gm": 802, "gmil": 374, "gmm": [79, 91, 92, 184, 256, 258, 261, 262, 263, 508, 516, 802, 823, 1004, 1026, 1036, 1037, 1040, 1041, 1042], "gmm_": 1037, "gmm_bic_scor": 262, "gmmgmm": 399, "gmmhmm": [1036, 1037], "gnb": [61, 62, 64, 157, 418, 573, 1007], "gnb_isoton": 62, "gnb_sigmoid": 62, "gnu": 377, "go": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 374, 379, 383, 384, 388, 394, 397, 412, 416, 418, 420, 446, 565, 566, 724, 887, 929, 955, 956, 1015, 1021, 1025, 1047], "goadrich": 1005, "goal": [49, 55, 58, 64, 85, 90, 116, 150, 182, 188, 192, 214, 229, 232, 250, 251, 266, 269, 270, 353, 367, 368, 374, 384, 385, 393, 394, 396, 402, 416, 420, 546, 552, 594, 597, 743, 1005, 1008, 1010, 1011, 1019, 1020, 1021, 1029, 1044], "god": [57, 353, 354], "godbol": 787, "goe": [43, 72, 140, 187, 361, 379, 418, 474, 475, 481, 561, 562, 568, 569, 570, 916, 917, 918, 919, 1015, 1019], "goetz": [1043, 1044], "goh": 1053, "gohlk": 1041, "goix": [0, 1040, 1042, 1043, 1044, 1045], "gold": [69, 208, 215, 217, 220, 224, 228, 231, 258, 263, 279, 298, 341, 385], "goldbaum": 1054, "goldberg": [857, 1008], "goldfarb": 1001, "goldman": 51, "goldstein": [188, 1012], "goldszmidt": 1017, "gollonet": [0, 401], "goltermann": 1048, "golub": [538, 846, 888], "golubin": 1043, "gome": [1049, 1050, 1054], "gomez": [1044, 1051, 1053], "gommer": [1039, 1042, 1043, 1051, 1052, 1054], "goncalo": [1043, 1044], "gone": [1036, 1037], "gonthier": 1047, "goo": [169, 376], "good": [43, 48, 58, 62, 64, 75, 79, 80, 82, 85, 86, 88, 91, 106, 112, 116, 130, 141, 143, 146, 147, 150, 172, 176, 182, 187, 199, 203, 214, 215, 220, 229, 239, 241, 245, 248, 251, 258, 260, 265, 266, 272, 278, 285, 310, 317, 318, 323, 329, 331, 336, 342, 353, 354, 362, 366, 367, 368, 378, 380, 381, 382, 385, 387, 391, 393, 408, 409, 411, 413, 415, 416, 418, 419, 420, 421, 440, 442, 447, 538, 563, 565, 566, 594, 634, 644, 651, 652, 660, 662, 663, 665, 673, 684, 694, 698, 727, 735, 746, 768, 833, 902, 927, 952, 994, 1000, 1001, 1002, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1019, 1020, 1021, 1025, 1029, 1042], "goodby": 379, "goodman": [1036, 1041], "googl": [0, 55, 391, 411, 445, 952, 1023, 1036], "gool": 1005, "gorb": 1048, "gordon": [57, 1042, 1046, 1048, 1050], "gorelli": [1044, 1045, 1049, 1051, 1054], "gorgolewski": [0, 401, 1036, 1039], "gorilla": 353, "gorinevski": 1001, "gorodkin": 747, "gorro\u00f1o": [1047, 1049, 1050], "got": [177, 248, 279, 362, 384, 555, 653, 669, 1049, 1051, 1053, 1055], "gotten": [1001, 1015], "gou": 411, "gouillart": 1036, "goupil": [0, 363], "gov": [55, 376], "govern": [187, 362, 366, 379, 393, 1029], "govin": 1042, "go\u0144da": 1051, "gp": [174, 179, 421, 614, 615, 626, 1042], "gp_fix": 172, "gp_opt": 172, "gpapadok": [1046, 1050], "gpassino": 1040, "gpc": [2, 66, 143, 153, 162, 170, 176, 177, 179, 184, 224, 225, 226, 227, 247, 261, 307, 315, 336, 347, 351, 508, 614, 615, 617, 618, 623, 624, 626, 627, 707, 745, 1026, 1027, 1031, 1046], "gpc_rbf_anisotrop": 173, "gpc_rbf_isotrop": 173, "gperftool": 382, "gplearn": 1024, "gpr": [2, 170, 171, 172, 178, 180, 184, 500, 614, 615, 617, 618, 619, 620, 625, 626, 627, 628, 629, 1026, 1027, 1031, 1046], "gpr_model": 180, "gprof": 382, "gpu": [326, 329, 407, 1009, 1025, 1053], "gr": 901, "grab": 379, "gracefulli": [1039, 1040], "grad": [385, 1029], "gradd": 385, "grade": 1005, "gradi": 1046, "gradient": [2, 14, 46, 52, 80, 99, 103, 134, 135, 136, 139, 140, 142, 152, 155, 158, 176, 177, 178, 184, 189, 190, 193, 195, 201, 216, 237, 241, 246, 271, 273, 298, 308, 312, 316, 318, 325, 328, 341, 393, 410, 411, 421, 455, 465, 469, 470, 491, 493, 500, 505, 507, 524, 557, 558, 563, 564, 565, 566, 568, 569, 590, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 635, 636, 638, 639, 643, 652, 653, 662, 663, 672, 673, 676, 678, 680, 681, 682, 684, 691, 696, 698, 699, 745, 746, 752, 754, 794, 804, 807, 808, 809, 825, 831, 834, 864, 865, 866, 869, 881, 882, 912, 978, 1002, 1005, 1008, 1009, 1010, 1011, 1024, 1026, 1027, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1051, 1053], "gradient_boost": [140, 1038, 1039, 1045], "gradientboost": 1041, "gradientboostingclassifi": [2, 140, 146, 149, 314, 362, 391, 557, 565, 636, 637, 1006, 1012, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "gradientboostingclassifier__learning_r": 314, "gradientboostingregressor": [2, 46, 145, 147, 148, 155, 158, 366, 384, 391, 558, 566, 636, 637, 1001, 1005, 1006, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "gradientboostingregressorgradientboostingregressor": 158, "gradual": [218, 865, 866, 946, 947, 1019], "graduat": 376, "graham": [1041, 1042], "grai": [45, 53, 80, 81, 83, 84, 86, 121, 124, 149, 169, 212, 214, 232, 245, 249, 250, 279, 309, 376, 416, 497, 498, 506, 525, 1047], "grain": [43, 67, 72, 246, 263, 314, 385, 419, 449, 1025], "gram": [2, 184, 193, 248, 381, 416, 419, 492, 528, 552, 592, 593, 594, 595, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 685, 686, 687, 688, 689, 690, 771, 994, 1001, 1015, 1020, 1026, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1049, 1050], "gram_test": 1020, "gram_train": 1020, "gramfort": [0, 121, 394, 400, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "grammar": 379, "grant": [0, 251, 266, 379], "granular": 1055, "grape": 412, "graph": [2, 55, 62, 74, 79, 80, 99, 100, 179, 234, 269, 292, 294, 334, 366, 379, 382, 393, 408, 413, 422, 444, 447, 448, 455, 456, 460, 465, 466, 474, 475, 481, 515, 589, 590, 692, 695, 696, 699, 786, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 863, 904, 958, 1002, 1005, 1008, 1010, 1018, 1021, 1024, 1029, 1036, 1043, 1044, 1046, 1049, 1051], "graph_laplacian": 1043, "graph_lasso": [481, 1044], "graph_model": 294, "graph_shortest_path": [388, 1049], "graphic": [8, 57, 112, 188, 335, 353, 354, 355, 374, 385, 411, 413, 416, 796, 797, 801, 838, 920, 1005, 1006, 1012, 1024], "graphical_lasso": [2, 388, 474, 475, 1044, 1052], "graphicallasso": [2, 113, 413, 472, 473, 475, 476, 477, 478, 479, 481, 1044, 1052], "graphicallassocv": [2, 51, 113, 402, 413, 474, 476, 477, 478, 479, 481, 1044, 1048, 1050, 1052, 1054], "graphicallassocvifittedgraphicallassocv": 51, "graphlasso": [474, 1041, 1044], "graphlassocv": [475, 1038, 1044], "graphviz": [920, 1021], "grasp": [286, 1020, 1025], "grassberg": [611, 612], "grate": 1029, "graviton": 387, "gray_r": [68, 124, 174, 235, 310, 331, 332], "grayscal": 68, "greasemonkei": 387, "great": [88, 186, 187, 212, 362, 379, 391, 416, 768, 1025, 1029, 1036, 1043], "greater": [62, 119, 135, 137, 187, 231, 246, 251, 260, 266, 278, 291, 298, 299, 357, 366, 384, 393, 409, 410, 411, 414, 418, 444, 448, 449, 452, 455, 466, 475, 540, 545, 561, 562, 563, 564, 565, 566, 568, 569, 570, 597, 598, 601, 614, 615, 632, 644, 646, 668, 670, 671, 675, 680, 681, 682, 696, 713, 716, 724, 739, 740, 743, 746, 792, 799, 801, 802, 838, 850, 851, 858, 859, 865, 866, 871, 886, 898, 902, 905, 908, 909, 916, 917, 918, 919, 952, 973, 994, 1000, 1001, 1002, 1005, 1006, 1011, 1015, 1020, 1021, 1039, 1044, 1047, 1049, 1050, 1051, 1053], "greater_is_bett": [147, 329, 746, 1005], "greatest": [88, 397, 411, 875, 1044], "greatli": [212, 246, 326, 379, 387, 455, 1008, 1021, 1042, 1050], "greedi": [169, 418, 420, 450, 452, 463, 563, 564, 606, 1001, 1021], "greedili": [116, 169, 411, 415, 420, 463], "greek": [51, 55, 59, 71, 86, 99, 124, 184, 411, 465, 1026], "green": [63, 112, 119, 138, 152, 157, 171, 192, 239, 308, 313, 317, 322, 328, 393, 1006, 1044, 1045, 1047, 1048], "greenhal": 1044, "greg": [1029, 1042, 1043, 1045, 1046], "gregori": [1042, 1046, 1047, 1048, 1049], "gregorystrubel": 1049, "gregov": 1044, "grei": [44, 282, 312, 349, 374], "grep": 379, "greyscal": 310, "grid": [2, 45, 47, 49, 50, 58, 62, 63, 64, 77, 87, 94, 103, 104, 105, 106, 109, 113, 143, 153, 164, 166, 168, 175, 184, 186, 187, 188, 203, 232, 239, 246, 247, 248, 252, 257, 262, 264, 266, 269, 271, 273, 276, 277, 279, 284, 291, 294, 296, 297, 305, 310, 314, 315, 317, 339, 341, 342, 348, 353, 374, 381, 386, 391, 393, 406, 412, 415, 417, 418, 419, 451, 464, 467, 475, 502, 506, 519, 526, 635, 636, 637, 651, 654, 657, 658, 660, 663, 665, 667, 680, 717, 732, 746, 789, 792, 804, 807, 808, 815, 818, 820, 834, 835, 868, 913, 998, 1000, 1005, 1008, 1012, 1025, 1026, 1031, 1036, 1039, 1040, 1041, 1043, 1044, 1050, 1052, 1053, 1054, 1055], "grid_encod": 315, "grid_model": 294, "grid_posit": [62, 64], "grid_resolut": [188, 323, 340, 635, 636, 637], "grid_scores_": [1042, 1048, 1049], "grid_search": [106, 141, 253, 262, 270, 280, 328, 412, 1038, 1039, 1040, 1041, 1042, 1043], "grid_siz": [50, 94, 305, 374, 502], "grid_to_graph": [2, 81, 84, 87, 411, 419, 1049], "grid_tograph": 1039, "grid_valu": [188, 637, 1012, 1052], "gridsearch": [87, 109, 283], "gridsearchcv": [2, 43, 87, 101, 103, 105, 106, 109, 128, 141, 184, 247, 253, 262, 264, 266, 270, 271, 272, 273, 277, 280, 283, 289, 294, 296, 310, 314, 323, 327, 328, 342, 346, 362, 367, 381, 391, 393, 402, 407, 412, 415, 418, 421, 425, 506, 524, 544, 545, 579, 603, 611, 657, 707, 746, 815, 818, 868, 878, 908, 916, 994, 1001, 1005, 1009, 1019, 1020, 1025, 1026, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1055], "gridsearchcvifittedgridsearchcv": [104, 262, 266, 270, 272], "gridsearchcvinot": 253, "gridsiz": 245, "gridspec": [62, 64, 98, 257, 386], "gridspecfromsubplotspec": 386, "griffith": [1044, 1045], "grigorev": 1041, "grigorio": 738, "grime": [693, 697, 1002], "grinsztajn": 1053, "grisel": [0, 394, 400, 1023, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "griva": [1050, 1051], "grlivarea": 144, "grobler": [0, 401, 1036, 1037, 1038, 1039], "groceryheist": 1049, "groenen": [694, 698, 1002], "grok": 490, "groothui": [631, 995], "grother": 376, "ground": [2, 27, 58, 68, 75, 82, 90, 91, 94, 109, 113, 116, 124, 151, 179, 199, 208, 214, 215, 251, 263, 275, 354, 393, 411, 707, 708, 709, 712, 716, 717, 718, 719, 721, 722, 725, 727, 728, 730, 732, 733, 734, 738, 740, 741, 742, 743, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 787, 788, 789, 790, 791, 794, 795, 799, 800, 1005, 1018, 1044], "ground_truth": [88, 299], "group": [0, 2, 51, 72, 75, 88, 91, 93, 157, 188, 190, 214, 235, 248, 263, 267, 318, 328, 333, 354, 361, 374, 384, 393, 394, 402, 411, 417, 418, 419, 436, 449, 499, 592, 593, 595, 598, 722, 792, 804, 805, 806, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 835, 881, 882, 918, 919, 946, 947, 1001, 1002, 1004, 1005, 1006, 1015, 1021, 1022, 1024, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1052, 1053, 1054, 1055], "group_1": 881, "group_2": 881, "group_3": 881, "group_by_dynam": 176, "group_df": 222, "group_kfold": 805, "group_prior": 267, "groupbi": [43, 150, 188, 222, 232], "groupkfold": [2, 267, 277, 328, 402, 415, 598, 809, 810, 811, 812, 813, 822, 827, 829, 830, 831, 832, 835, 1042, 1049], "groupshufflesplit": [2, 267, 415, 1042], "grow": [43, 52, 74, 192, 199, 294, 349, 355, 366, 391, 407, 413, 418, 419, 561, 562, 563, 564, 568, 569, 570, 814, 848, 849, 916, 917, 918, 919, 994, 1005, 1008, 1021, 1029, 1039, 1040], "grower": [150, 418, 565, 566], "grown": [376, 418, 557, 558, 559, 560, 561, 562, 568, 569, 916, 917, 918, 919, 1021], "growth": [1005, 1041, 1042], "grumman": 51, "grusak": 1046, "gryllo": [1041, 1044], "gryze": [1038, 1041], "grzegorz": [1043, 1046], "gs_time": 283, "gsh": 283, "gsh_time": 283, "gsiisg": 1051, "gsk": 51, "gss": [415, 806], "gt": [68, 103, 104, 140, 155, 187, 262, 270, 284, 379, 383, 399], "gu": [1047, 1048, 1050], "guan": 1046, "guangguo": 1042, "guarante": [46, 47, 64, 111, 112, 150, 187, 222, 245, 291, 292, 312, 354, 362, 368, 373, 387, 388, 405, 411, 415, 416, 419, 449, 540, 649, 662, 663, 672, 676, 678, 680, 682, 691, 698, 806, 821, 824, 848, 849, 886, 888, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 915, 934, 935, 997, 1001, 1002, 1004, 1008, 1013, 1017, 1021, 1046, 1054], "gubri": [1044, 1045], "gudmalwar": 1048, "gued": 1054, "guerin": [1042, 1043], "guess": [55, 135, 143, 415, 418, 419, 536, 542, 544, 545, 551, 792, 1005, 1019], "guestrin": 418, "guha": 1051, "gui": [1037, 1047], "guid": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 52, 62, 64, 88, 101, 121, 141, 180, 184, 187, 188, 201, 234, 279, 298, 299, 302, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 377, 378, 379, 384, 385, 386, 387, 392, 393, 394, 399, 402, 412, 418, 422, 423, 424, 425, 428, 434, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 948, 1005, 1006, 1036, 1037, 1038, 1039, 1041, 1043, 1045, 1046, 1053, 1054, 1055], "guidanc": [391, 421], "guidelin": [2, 25, 378, 382, 384, 385, 387, 411, 418], "guiel": 498, "guilherm": 1039, "guillaum": [0, 400, 1029, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "guillem": [1045, 1046, 1051], "guillemot": [0, 1042, 1043], "guillermo": 1050, "guiniol": 1043, "guitar": 1051, "guitton": 1048, "guiweb": 1049, "gulati": [1041, 1042, 1043], "gun": [57, 374], "gunduz": 1054, "gunesbayir": [1051, 1052], "gunnar": [539, 952], "guo": 1049, "guoci": 1043, "gupta": [902, 1017, 1043, 1044, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "gustafson": [1051, 1052], "gustav": 1042, "gustavo": [1044, 1045, 1050], "gutierrez": 1046, "guttman": 698, "guyon": [519, 597, 598, 1005], "guyon2015": 1005, "gwulf": [1040, 1041], "gyeongja": 1054, "gz": [47, 383, 397, 512, 513], "gzip": 1036, "g\u00e9ron": 1044, "g\u00f3rski": [1047, 1048], "g\u00f6khan": [44, 416, 539], "g\u00f6n\u00fcl": 1054, "g\u00fcnther": [1049, 1053], "h": [44, 45, 52, 91, 121, 122, 135, 136, 153, 169, 173, 187, 259, 297, 300, 307, 314, 325, 336, 338, 355, 376, 385, 409, 411, 413, 416, 417, 418, 419, 422, 447, 523, 536, 539, 542, 544, 551, 557, 571, 572, 586, 594, 611, 612, 693, 697, 708, 712, 761, 843, 847, 848, 849, 854, 864, 879, 888, 997, 999, 1001, 1002, 1003, 1005, 1007, 1009, 1010, 1019, 1021, 1042, 1047, 1051, 1052, 1053], "h1998": 418, "h2009": 1012, "h4dr1en": 1046, "h5py": 373, "h_": 1001, "h_i": [416, 1010], "h_init": 385, "h_j": 1010, "h_l": 999, "h_m": 418, "h_pad": [121, 143, 358], "h_samples_": 864, "ha": [0, 43, 44, 47, 50, 51, 52, 62, 66, 70, 72, 79, 83, 88, 89, 90, 93, 106, 111, 112, 116, 121, 133, 140, 143, 145, 147, 148, 150, 152, 157, 167, 168, 171, 176, 177, 178, 183, 187, 188, 189, 190, 192, 207, 211, 214, 215, 216, 220, 231, 232, 234, 241, 245, 247, 248, 251, 252, 255, 257, 258, 260, 262, 263, 266, 267, 270, 271, 272, 275, 276, 278, 283, 284, 291, 295, 298, 299, 300, 302, 309, 312, 313, 315, 317, 321, 322, 323, 324, 325, 327, 329, 331, 334, 342, 346, 347, 348, 353, 361, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 387, 388, 391, 392, 393, 394, 397, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 436, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 497, 498, 501, 502, 512, 513, 520, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 623, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 691, 692, 693, 694, 695, 696, 699, 715, 717, 724, 726, 745, 767, 778, 782, 783, 784, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 818, 822, 825, 826, 827, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 925, 933, 934, 935, 941, 954, 973, 989, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1025, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "haan": 1045, "haar": [53, 1053], "haas": 1046, "habchi": 1046, "haberland": [1051, 1052], "haberth\u00fcr": 1043, "hack": [47, 49], "had": [43, 48, 81, 147, 150, 176, 248, 312, 318, 324, 362, 379, 380, 387, 402, 419, 422, 447, 995, 1005, 1029, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1051], "hadamard": 381, "haddad": 1043, "hadrien": [1043, 1046], "hadshirt": 1046, "haenel": 1039, "haesun": [1048, 1051, 1052], "hafner": 1049, "hagai": 801, "hagberg": 55, "hahn": [1043, 1044], "haiat": 1048, "haidar": [1049, 1050], "hail": 318, "hailei": [1046, 1047], "hain": 374, "haitz": [1047, 1049, 1050], "hakaa1": [1043, 1044], "hal": [551, 662, 762, 763, 1003], "halchenko": [0, 400, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1052], "hale": [1038, 1050], "half": [2, 43, 61, 124, 150, 246, 250, 270, 272, 284, 374, 375, 416, 418, 466, 526, 566, 597, 601, 606, 774, 867, 875, 917, 1005, 1008, 1021], "half_cal": 601, "half_selector": 601, "halfbath": 144, "halford": [1044, 1051, 1052], "halkidi": 411, "halko": [416, 539, 545, 548, 951, 952], "hall": [1001, 1043, 1047], "hallock": 1042, "halpert": [696, 1002], "halv": [2, 164, 184, 264, 276, 280, 348, 406, 519, 568, 583, 804, 807, 808, 913, 1026, 1031, 1048], "halvic": 1048, "halvinggridsearchcv": [2, 283, 284, 323, 402, 407, 583, 808, 994, 1048, 1050, 1051, 1053, 1054, 1055], "halvingrandomsearchcv": [2, 147, 284, 323, 402, 407, 583, 807, 994, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 284, "halwai": 1042, "ham": [2, 46, 453, 460, 585, 703, 707, 713, 738, 745, 782, 783, 784, 800, 1008], "hamada": 1048, "hamdi": [1053, 1054], "hammerbach": 1040, "hamming_loss": [2, 46, 707, 800, 1005, 1038, 1042, 1045], "hammingdist": 703, "hammoudeh": 1045, "hamoumi": 1049, "hampu": 1040, "hamzeh": [0, 1039, 1040], "han": [411, 445, 453, 460, 1036, 1044, 1045, 1049], "hancock": 1046, "hand": [44, 65, 84, 86, 116, 123, 124, 126, 141, 147, 164, 167, 176, 184, 187, 188, 207, 218, 221, 238, 244, 245, 247, 248, 251, 265, 266, 269, 274, 281, 286, 296, 331, 332, 342, 366, 373, 374, 376, 379, 381, 385, 387, 392, 416, 417, 418, 420, 428, 434, 506, 647, 701, 717, 792, 834, 889, 913, 994, 998, 1001, 1005, 1007, 1009, 1013, 1018, 1020, 1026, 1029], "handbook": [724, 744, 1005], "handi": [82, 103, 354, 355, 380, 1052], "handk": 1052, "handl": [0, 2, 43, 48, 103, 141, 144, 148, 150, 151, 155, 192, 199, 247, 248, 266, 274, 279, 281, 289, 291, 292, 299, 318, 321, 328, 353, 355, 361, 366, 371, 373, 379, 380, 381, 388, 391, 393, 418, 419, 421, 500, 548, 581, 585, 586, 592, 593, 595, 614, 639, 650, 651, 656, 662, 663, 664, 665, 666, 672, 679, 680, 682, 685, 724, 792, 872, 881, 882, 908, 909, 913, 920, 924, 953, 961, 964, 1002, 1005, 1006, 1007, 1008, 1011, 1013, 1020, 1021, 1024, 1025, 1029, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "handle_data": 47, "handle_endtag": 47, "handle_starttag": 47, "handle_unknown": [43, 103, 140, 144, 155, 188, 189, 243, 251, 253, 255, 318, 322, 325, 881, 882, 1015, 1040, 1044, 1048, 1049, 1055], "handler": 1047, "handler_map": 299, "handlerpathcollect": 299, "handletextpad": 358, "handpick": 241, "handprint": 376, "handwritten": [51, 71, 80, 85, 90, 92, 94, 97, 140, 167, 184, 233, 234, 236, 238, 245, 260, 270, 302, 309, 310, 331, 332, 354, 372, 411, 418, 450, 506, 545, 548, 553, 570, 692, 693, 694, 695, 696, 708, 709, 721, 741, 797, 799, 857, 869, 878, 888, 901, 1002, 1008, 1026, 1031], "hang": [379, 1046, 1047], "hank": 1039, "hanmin": [0, 400, 1043, 1044, 1045, 1046, 1047, 1055], "hann": 1036, "hanna": [1040, 1041, 1047], "hannah": [1046, 1048, 1050], "hannel": [1044, 1045], "hansen": 1044, "hansin": [1050, 1051], "hanu\u0161": 1053, "hanxiang": [683, 1001], "hao": [1047, 1048, 1050, 1051], "haoi": 1053, "haoran": 1044, "haoyin": [1047, 1049, 1050], "happen": [2, 44, 64, 140, 201, 266, 312, 318, 354, 362, 366, 367, 377, 378, 379, 383, 384, 385, 391, 393, 394, 397, 405, 411, 413, 415, 418, 440, 519, 576, 662, 789, 886, 888, 908, 1001, 1005, 1006, 1020, 1025, 1044, 1048, 1049, 1051, 1052, 1053, 1054], "happi": [187, 266, 353, 391, 394, 822, 823], "haqu": [1038, 1039, 1040], "harabasz": [2, 714], "harabaz": 1042, "hard": [48, 214, 241, 245, 272, 274, 368, 378, 391, 393, 410, 411, 416, 419, 538, 545, 573, 680, 910, 911, 912, 913, 914, 1001, 1018, 1020, 1021, 1025, 1045, 1046], "hardcod": [443, 457, 1044], "harder": [281, 282, 316, 374, 378, 381, 387, 391, 411, 519, 565, 566], "hardest": 399, "hardin": 112, "hardli": [88, 611, 612], "hardwar": [57, 335, 355, 366, 367, 374, 377, 391, 397, 405, 407, 1024, 1050, 1051], "hare": 1001, "harfouch": 1052, "harikrishnan": 1038, "harizo": [1042, 1043], "harm": [353, 381, 419, 799], "harmanan": [1053, 1054], "harmon": [43, 72, 354, 411, 539, 545, 733, 734, 740, 787, 799, 1005], "haroldfox": [1044, 1045], "harper": 1043, "harri": [1040, 1042, 1048, 1049], "harsanyi": 1052, "harsh": [428, 440, 472, 553, 554, 555, 557, 559, 561, 563, 565, 568, 571, 573, 614, 662, 670, 672, 678, 679, 680, 803, 826, 836, 837, 838, 839, 843, 844, 845, 846, 847, 850, 855, 858, 865, 903, 904, 908, 910, 913, 916, 918, 1046, 1048, 1051], "harshit5674": 1051, "hart": [376, 999, 1044], "hartong": 1047, "harutaka": 1049, "harvest": 318, "harwar": 391, "has_fit_paramet": [2, 388], "hasan": 1051, "hasattr": [79, 89, 95, 113, 133, 143, 232, 245, 307, 314, 353, 393, 426, 430, 436, 965, 1046], "haseeb": [1049, 1050], "hash": [2, 47, 52, 134, 184, 354, 355, 366, 368, 371, 379, 382, 391, 418, 518, 548, 561, 570, 585, 586, 593, 644, 843, 969, 997, 1026, 1031, 1037, 1040, 1043], "hashabl": [393, 876, 879, 1016], "hashcode55": 1042, "hasher": [153, 355, 419], "hashingvector": [2, 47, 355, 368, 419, 492, 592, 594, 595, 1037, 1043, 1044, 1045, 1046, 1049], "hashlib": 47, "hasil": 1040, "hasn": 402, "hassaan": [1044, 1045], "hassan": 1049, "hassen": 1036, "hassoun": 1051, "hasti": [2, 135, 138, 139, 149, 169, 201, 271, 376, 415, 418, 523, 524, 557, 563, 564, 632, 660, 725, 727, 728, 838, 855, 901, 916, 917, 995, 999, 1001, 1006, 1012, 1017, 1019, 1021], "hat": [112, 130, 268, 272, 297, 324, 377, 409, 413, 417, 418, 996, 1001, 1002, 1005, 1007, 1009], "hathidara": 1048, "hatwar": [1044, 1045], "hauck": 1042, "hausamann": [1044, 1045], "haussler": 179, "hav": 399, "have": [0, 2, 25, 43, 44, 46, 47, 48, 50, 51, 52, 53, 61, 62, 63, 64, 72, 74, 77, 78, 80, 81, 83, 86, 88, 90, 93, 95, 97, 98, 102, 103, 109, 111, 116, 119, 126, 127, 135, 142, 143, 144, 145, 147, 150, 165, 166, 169, 171, 172, 176, 177, 178, 183, 186, 187, 188, 189, 190, 192, 194, 199, 214, 215, 216, 218, 232, 238, 241, 243, 248, 249, 251, 252, 258, 259, 260, 262, 265, 266, 272, 273, 275, 278, 279, 285, 286, 287, 289, 292, 294, 295, 298, 299, 312, 317, 318, 319, 321, 323, 324, 328, 332, 333, 334, 339, 345, 346, 347, 349, 353, 354, 361, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 397, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 490, 496, 498, 499, 500, 512, 513, 518, 527, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 691, 692, 693, 694, 695, 696, 703, 708, 709, 715, 716, 719, 724, 730, 735, 740, 760, 761, 762, 763, 786, 789, 790, 796, 799, 801, 802, 803, 804, 807, 808, 809, 810, 815, 818, 822, 826, 827, 829, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 927, 934, 936, 938, 940, 941, 952, 979, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "havelabeleddatado": 399, "haversin": [2, 305, 417, 703, 766, 768, 1008, 1045, 1048], "haversine_dist": [2, 766, 1045], "haversinedist": 703, "hawaii": 176, "haxbi": 0, "haya": 1050, "hayashi": 1044, "hbgt": 150, "hd": 51, "hdb": [88, 449], "hdbscan": [2, 71, 79, 82, 98, 184, 245, 447, 516, 888, 995, 1024, 1026, 1030, 1031, 1052, 1053, 1054], "hdbscan_min_cluster_s": 79, "hdbscan_min_sampl": 79, "hdf5": 373, "hdl": [169, 376], "hdmetor": 1042, "he": [379, 730, 760, 865, 866, 898, 899, 1005, 1043, 1050, 1051], "head": [0, 52, 63, 103, 176, 187, 201, 203, 232, 255, 262, 318, 321, 326, 379, 387, 400, 416, 1029, 1041, 1042, 1051, 1052, 1053, 1054, 1055], "head_width": 63, "header": [54, 102, 273, 353, 354, 374, 377, 419, 491, 492, 804, 807, 808, 818], "heali": 411, "health": 329, "heap": 453, "heapq": 466, "heard": 379, "heart": 251, "heat": [155, 342, 411, 455, 465, 699], "heatingqc": 155, "heatmap": [188, 190, 194, 199, 283, 326, 342, 636, 1012], "heatmap_kw": 636, "heatmaps_": 636, "heavei": 1044, "heavi": [216, 391, 408, 1025], "heavier": [130, 413, 1001], "heavili": [203, 366, 367, 379, 387, 653, 659, 782, 1022], "heavy_rain": [43, 188], "hebei": 411, "hedlund": 1052, "hedyati": 1040, "hee": [1043, 1046], "heer": 1047, "hegd": 1053, "heidelberg": [176, 411, 416, 539, 700, 730, 760, 1005], "height": [47, 54, 86, 124, 144, 145, 169, 312, 318, 328, 353, 417, 449, 497, 498, 510, 590], "heightpet_catpet_dogf64f64f64": 328, "heikki": 1017, "heilman": [1040, 1041], "heitz": 318, "held": [43, 47, 103, 128, 148, 189, 222, 259, 275, 280, 291, 415, 418, 563, 564, 565, 566, 705, 804, 807, 808, 818, 865, 866, 878, 994, 995, 1004, 1013], "helder": [1040, 1049, 1050], "heldout": 221, "heldout_scor": 146, "helen": 326, "heli": 1043, "hello": [379, 387, 965, 969], "helloifeven": 965, "helm": 1054, "helmu": 1040, "help": [0, 41, 43, 48, 50, 88, 102, 106, 126, 131, 188, 199, 232, 234, 266, 273, 275, 285, 289, 310, 339, 342, 354, 355, 362, 366, 367, 379, 380, 381, 382, 383, 384, 385, 387, 388, 393, 394, 396, 405, 411, 412, 415, 419, 421, 435, 540, 581, 631, 654, 658, 669, 689, 690, 696, 718, 844, 916, 917, 918, 919, 995, 999, 1000, 1002, 1004, 1005, 1007, 1009, 1015, 1016, 1021, 1023, 1024, 1025, 1028, 1029, 1042, 1043, 1044, 1047, 1050, 1054], "helper": [44, 45, 124, 232, 283, 372, 381, 382, 392, 393, 415, 471, 579, 906, 993, 1036, 1043, 1044, 1045, 1049], "helvetica": [920, 922], "heme": 1053, "hempstalk": 1043, "henc": [72, 93, 104, 187, 218, 245, 266, 281, 342, 353, 354, 366, 374, 381, 383, 385, 393, 397, 411, 415, 418, 419, 490, 512, 543, 545, 546, 547, 567, 594, 647, 650, 656, 664, 666, 676, 691, 708, 709, 713, 719, 735, 761, 790, 799, 820, 823, 824, 843, 844, 845, 846, 847, 883, 961, 1002, 1004, 1005, 1006, 1011, 1012, 1015, 1025, 1043, 1044, 1047, 1048, 1050], "hendrik": [0, 400, 1036, 1039, 1040, 1041, 1042], "henri": [1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051], "henriqu": 1055, "henrymooresc": [1050, 1051], "hepe": [683, 1001], "here": [43, 47, 48, 51, 52, 53, 55, 61, 64, 90, 91, 99, 109, 113, 118, 119, 123, 124, 126, 127, 128, 129, 131, 135, 138, 141, 144, 148, 150, 155, 166, 169, 171, 179, 180, 187, 188, 189, 192, 194, 199, 203, 207, 214, 218, 220, 229, 230, 232, 234, 236, 241, 246, 248, 251, 252, 258, 259, 260, 265, 266, 269, 270, 272, 274, 275, 277, 279, 281, 282, 284, 285, 286, 289, 292, 294, 301, 304, 308, 309, 310, 314, 317, 323, 325, 328, 331, 333, 342, 346, 349, 351, 355, 357, 362, 366, 367, 368, 373, 374, 377, 378, 379, 380, 381, 384, 385, 387, 391, 392, 402, 405, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422, 424, 440, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 467, 475, 478, 540, 542, 543, 547, 548, 567, 571, 572, 573, 574, 585, 586, 588, 592, 595, 598, 606, 632, 634, 651, 655, 657, 659, 665, 667, 669, 677, 679, 693, 695, 699, 703, 716, 730, 760, 798, 803, 804, 807, 808, 810, 818, 826, 827, 828, 829, 830, 831, 832, 833, 835, 844, 848, 849, 872, 880, 883, 886, 889, 900, 901, 911, 970, 994, 997, 1001, 1002, 1003, 1004, 1005, 1008, 1011, 1015, 1017, 1018, 1019, 1020, 1024, 1025, 1028, 1029, 1036, 1044, 1049], "hereaft": 394, "hereund": 1011, "herilalaina": [1043, 1044, 1046], "hermano": [1051, 1052], "hermida": [1045, 1049], "hernandez": 1005, "hern\u00e1ndez": 1005, "hero": [413, 424, 478], "herrou": 1050, "hershei": 1005, "hertel": 1053, "herv": 1040, "hervieu": 1036, "herv\u00e9": 1040, "heryanto": 1043, "hesit": 379, "hessian": [234, 235, 236, 418, 565, 566, 652, 662, 663, 673, 684, 693, 697, 1001, 1009, 1030, 1031, 1051, 1055], "hessian_tol": [693, 697], "heterogen": [43, 47, 48, 61, 88, 101, 103, 184, 188, 214, 255, 317, 321, 355, 371, 373, 391, 467, 491, 545, 585, 595, 717, 868, 872, 908, 1002, 1012, 1015, 1024, 1026, 1031, 1040, 1044, 1046, 1047, 1054], "heteroscedast": [121, 128, 147, 216, 416, 884, 896], "heteroschedast": 1005, "heuer": 1039, "heurist": [51, 54, 146, 251, 353, 367, 411, 420, 452, 455, 464, 465, 512, 513, 541, 543, 550, 680, 681, 682, 695, 699, 807, 808, 910, 911, 912, 913, 914, 939, 1002, 1003, 1008, 1019, 1021, 1029, 1036, 1037, 1041, 1045, 1048, 1049], "hexbin": 245, "hexdigest": 47, "hgbdt": 141, "hgbdt_model": 188, "hgbdt_model_without_interact": 188, "hgbdt_preprocessor": 188, "hgbt": [141, 150, 418], "hgbt_cst": 150, "hgbt_no_cst": 150, "hgbt_quantil": 150, "hhu": [653, 1045], "hi": [0, 412, 1005], "hibon": 1043, "hida": [1051, 1052], "hidden": [43, 188, 309, 310, 379, 387, 408, 416, 864, 865, 866, 1009, 1010, 1024, 1036, 1047], "hidden_layer_s": [188, 252, 307, 309, 865, 866, 1009], "hide": [52, 78, 379, 387, 843, 844, 845, 846, 847, 1039, 1044, 1052], "hideaki": 1050, "hierarch": [2, 53, 59, 71, 74, 75, 79, 80, 85, 86, 87, 89, 90, 184, 190, 211, 238, 325, 361, 393, 419, 444, 446, 448, 449, 508, 516, 518, 526, 534, 551, 735, 861, 888, 1022, 1025, 1026, 1030, 1031, 1036, 1039, 1040, 1052], "hierarchi": [76, 190, 379, 453, 459, 466, 1010], "higgin": [1053, 1054], "high": [0, 37, 43, 48, 50, 51, 62, 64, 67, 72, 75, 79, 82, 88, 90, 95, 98, 102, 106, 111, 112, 123, 124, 138, 140, 141, 142, 147, 148, 150, 151, 153, 169, 171, 177, 183, 186, 188, 189, 190, 199, 209, 215, 216, 218, 228, 234, 235, 236, 241, 245, 257, 263, 270, 274, 278, 279, 298, 299, 307, 309, 314, 316, 317, 318, 319, 327, 334, 339, 341, 342, 353, 354, 359, 360, 366, 374, 376, 379, 384, 387, 388, 391, 392, 408, 409, 410, 411, 415, 417, 418, 419, 420, 421, 447, 450, 452, 453, 455, 472, 485, 486, 487, 557, 558, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 648, 674, 675, 683, 693, 696, 697, 730, 735, 746, 750, 760, 793, 796, 812, 814, 848, 849, 853, 882, 883, 887, 889, 910, 912, 913, 916, 917, 918, 919, 973, 994, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1011, 1013, 1015, 1017, 1020, 1021, 1022, 1024, 1025, 1036, 1037, 1039, 1040, 1044, 1047, 1048, 1049, 1050, 1051], "high_cardin": 318, "high_cardinality_featur": 318, "high_cardinalityindex": 318, "high_i": 209, "high_precision_cv_result": 270, "high_recall_cv_result": 270, "high_x": 209, "higher": [43, 52, 90, 111, 124, 128, 135, 138, 140, 141, 147, 151, 167, 171, 173, 178, 179, 187, 188, 189, 192, 214, 215, 218, 232, 238, 239, 263, 265, 266, 270, 272, 275, 287, 297, 317, 342, 346, 353, 354, 355, 362, 366, 374, 377, 381, 408, 410, 411, 413, 418, 420, 421, 422, 447, 451, 452, 474, 481, 513, 536, 543, 547, 552, 557, 558, 561, 562, 563, 564, 565, 566, 568, 569, 570, 577, 592, 595, 611, 612, 623, 631, 635, 639, 641, 650, 651, 656, 657, 664, 665, 666, 667, 680, 682, 683, 708, 728, 732, 756, 789, 801, 804, 807, 808, 810, 818, 825, 827, 832, 835, 854, 857, 883, 900, 901, 902, 908, 909, 910, 911, 912, 913, 914, 921, 997, 1001, 1002, 1004, 1005, 1008, 1012, 1015, 1019, 1020, 1037, 1042, 1044, 1051, 1053], "highest": [2, 55, 63, 113, 165, 169, 218, 270, 272, 283, 323, 353, 379, 391, 409, 411, 415, 418, 420, 440, 559, 561, 568, 596, 599, 600, 602, 603, 604, 607, 608, 610, 639, 641, 730, 760, 798, 801, 804, 807, 808, 818, 905, 916, 954, 994, 1001, 1005, 1006, 1009, 1019, 1021, 1048], "highest_protocol": 405, "highli": [43, 48, 64, 104, 111, 112, 123, 131, 151, 199, 209, 219, 266, 272, 275, 281, 308, 346, 354, 366, 367, 379, 385, 391, 409, 411, 415, 418, 419, 455, 465, 500, 567, 675, 696, 816, 818, 864, 927, 1001, 1005, 1008, 1009, 1011, 1019, 1020, 1023, 1024], "highlight": [43, 54, 88, 103, 111, 119, 133, 139, 140, 142, 152, 169, 171, 172, 177, 182, 183, 188, 189, 192, 214, 215, 216, 232, 243, 248, 253, 254, 255, 266, 267, 284, 286, 294, 316, 318, 334, 353, 355, 361, 379, 383, 384, 387, 391, 421, 446, 449, 450, 467, 470, 493, 494, 500, 505, 506, 508, 516, 519, 525, 528, 542, 545, 565, 566, 568, 569, 571, 603, 606, 632, 634, 636, 638, 644, 650, 652, 656, 662, 673, 684, 692, 701, 705, 706, 721, 722, 736, 746, 752, 782, 792, 799, 803, 804, 805, 807, 808, 810, 818, 826, 827, 830, 831, 834, 850, 852, 869, 873, 878, 881, 882, 883, 887, 888, 889, 905, 906, 908, 913, 916, 917, 947, 1002, 1005, 1013, 1015, 1020, 1026, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "highlight_min": [147, 203], "higuera": 373, "hila": 411, "hilbert": [219, 874, 997, 1015], "hilferti": 111, "hill": [411, 451, 464, 1046], "him": 419, "himanshu": [1047, 1050], "hind": 1050, "hinder": 1046, "hing": [2, 62, 221, 224, 226, 280, 339, 340, 344, 346, 393, 670, 680, 739, 908, 915, 1001, 1019, 1020], "hinge_loss": [2, 346, 1005, 1040, 1048, 1049], "hinrich": 416, "hint": [187, 366, 380, 384, 402, 451, 1005], "hinton": [696, 857, 864, 865, 866, 1002, 1008, 1009, 1010], "hintz": 1042, "hiramatsu": 1053, "hirofumi": [1047, 1048], "hirsch": 1044, "hirschberg": [411, 721, 741, 799], "hirzel": 1049, "hispan": 187, "hist": [43, 62, 64, 86, 107, 137, 141, 214, 216, 245, 251, 266, 278, 297, 312, 316, 318, 325, 328, 418], "hist_drop": 144, "hist_n": 144, "hist_nbin": 312, "hist_no_interact": 326, "hist_one_hot": 144, "hist_ordin": 144, "hist_quantil": 325, "hist_x0": 312, "hist_x1": 312, "histgradientboost": 1048, "histgradientboostingclassifi": [2, 140, 141, 266, 321, 322, 323, 324, 326, 328, 367, 405, 563, 568, 636, 637, 995, 1024, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "histgradientboostingclassifierhistgradientboostingclassifi": 266, "histgradientboostingclassifierifittedhistgradientboostingclassifi": 266, "histgradientboostingregressor": [2, 43, 46, 52, 136, 141, 144, 147, 148, 150, 152, 155, 182, 188, 214, 318, 321, 322, 323, 324, 326, 327, 328, 418, 564, 569, 636, 637, 639, 995, 1012, 1024, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "histgradientboostingregressor__interaction_cst": 188, "histgradientboostingregressor__max_depth": 144, "histgradientboostingregressor__max_it": 144, "histgradientboostingregressorhistgradientboostingregressor": [155, 318], "histgradientboostingregressorifittedhistgradientboostingregressor": [152, 326], "histogram": [2, 52, 62, 64, 86, 134, 136, 140, 144, 145, 147, 148, 152, 184, 214, 222, 245, 271, 273, 278, 297, 312, 323, 325, 327, 328, 409, 493, 500, 563, 564, 565, 566, 568, 569, 636, 646, 746, 752, 762, 763, 794, 804, 809, 825, 831, 834, 997, 1003, 1015, 1026, 1030, 1031, 1048, 1051, 1053], "histor": [51, 214, 266, 1002, 1025], "histori": [51, 383, 563, 564, 1036], "hit": [216, 385], "hitesh": 1048, "hjortkj\u00e6r": 1050, "hkey_local_machin": 397, "hline": 123, "hlle": 1002, "hmasdev": 1050, "hmc": 51, "hmm": [1036, 1037, 1038, 1039, 1041], "hmmlearn": 1024, "hn": 385, "hnyk": [1042, 1043], "ho": [418, 559, 560, 1005, 1041, 1044, 1045, 1050], "hoang": [1045, 1046], "hobson": 1042, "hoc": [168, 169, 184, 264, 266, 275, 289, 329, 334, 393, 410, 500, 662, 820, 826, 831, 869, 888, 1026], "hochberg": [599, 1042, 1043], "hochreit": [408, 723], "hockei": [57, 374], "hoctor": 1048, "hoda1394": 1048, "hoenig": 1036, "hoesli": 418, "hoffman": [416, 540, 1041, 1048], "hogan": 1044, "hoh": 1044, "hold": [0, 47, 52, 63, 64, 214, 218, 248, 266, 273, 361, 372, 379, 380, 381, 393, 409, 411, 415, 418, 419, 421, 507, 561, 565, 568, 593, 636, 637, 638, 740, 804, 807, 808, 818, 844, 875, 876, 881, 882, 889, 892, 916, 918, 995, 999, 1005, 1009, 1019, 1020, 1021, 1044, 1048, 1054], "holdgraf": 1044, "holdselig": 419, "hole": [184, 233, 234, 239, 534, 696, 697, 1026, 1050], "holger": 1043, "holidai": [43, 188], "holm": [839, 1006, 1053], "holman": 1051, "holmstr\u00f6m": 1038, "holohan": [1051, 1053], "holt": [0, 401, 1036], "holub": 538, "home": [0, 2, 7, 51, 52, 155, 175, 177, 179, 180, 242, 258, 310, 326, 374, 377, 387, 397, 489, 495, 503, 683, 1029], "homebrew": [382, 397], "homepag": [374, 534, 1021], "homm": 1051, "homo": 91, "homogen": [2, 72, 73, 74, 79, 80, 82, 88, 91, 354, 374, 391, 393, 413, 418, 421, 449, 618, 708, 721, 735, 740, 741, 761, 799, 1002, 1003, 1005, 1045], "homogeneity_completeness_v_measur": [2, 411, 1045], "homogeneity_scor": [2, 73, 82, 91, 354, 411, 721, 740, 799, 1005], "homomorph": 1024, "homoscedast": [128, 244, 316, 1005, 1044], "homoschedast": 1005, "honda": 51, "honei": 999, "hong": [1042, 1044, 1048, 1049, 1050, 1052, 1054], "hongh": 1044, "hongkahjun": 1043, "honglu": 1046, "hongshaoyang": 1051, "honl": [1048, 1049], "honolulu": 1005, "honor": 318, "hood": [405, 1001, 1020], "hoover": [1041, 1042, 1043, 1045], "hope": [30, 44, 177, 232, 393, 1045], "hopefulli": [275, 387, 1036], "hopfensperg": [1053, 1054, 1055], "hopper": 1041, "horizont": [66, 121, 234, 246, 312, 315, 384, 393, 467, 519, 701, 705], "horizontal_distance_to_hydrologi": 494, "horizontalalign": [51, 63, 67, 75, 79, 95, 127, 241, 257, 307, 314], "hornik": 639, "hornstein": 1051, "horrel": 1043, "hoshia": 1050, "hossein": [1044, 1045, 1046], "host": [0, 141, 327, 353, 374, 379, 383, 387, 388, 495, 901, 1052], "hot": [2, 43, 103, 140, 155, 187, 214, 281, 313, 314, 318, 323, 342, 393, 418, 419, 555, 570, 585, 652, 662, 663, 673, 684, 871, 873, 875, 876, 879, 881, 882, 889, 1001, 1015, 1044, 1050, 1051], "hot_r": [51, 312], "hotel": 1029, "hotspot": 385, "hour": [43, 150, 187, 188, 328, 379, 385, 500, 1002, 1023], "hour_co": 43, "hour_df": 43, "hour_sin": 43, "hour_workday_interact": 43, "hourli": [43, 150, 187], "hourly_wag": 186, "hous": [2, 107, 145, 155, 182, 183, 266, 312, 323, 372, 493, 1031], "house_pric": [107, 155], "houseag": [312, 323, 374, 493], "household": 374, "housestyl": [144, 155], "hover": 328, "hover_data": [141, 273], "how": [0, 43, 44, 46, 47, 48, 49, 52, 58, 59, 62, 63, 64, 68, 69, 72, 83, 84, 85, 86, 90, 93, 101, 102, 103, 106, 109, 111, 116, 130, 135, 136, 139, 143, 144, 145, 147, 148, 150, 153, 155, 166, 167, 178, 184, 187, 188, 189, 190, 192, 196, 202, 203, 204, 210, 215, 216, 217, 218, 221, 222, 228, 232, 238, 239, 243, 246, 248, 250, 251, 252, 254, 263, 266, 267, 268, 270, 272, 273, 274, 279, 281, 282, 284, 286, 287, 291, 292, 294, 295, 296, 298, 299, 304, 309, 317, 319, 322, 323, 324, 327, 328, 339, 340, 342, 345, 346, 349, 353, 354, 357, 361, 366, 367, 368, 374, 377, 378, 380, 381, 382, 384, 387, 392, 393, 394, 399, 402, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 425, 435, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 508, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 626, 627, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 708, 724, 761, 796, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 988, 994, 995, 999, 1000, 1001, 1002, 1004, 1005, 1011, 1012, 1013, 1015, 1017, 1018, 1020, 1021, 1023, 1025, 1029, 1031, 1036, 1038, 1041, 1047, 1050, 1051, 1052], "howel": 1043, "howev": [0, 43, 44, 46, 52, 53, 61, 62, 64, 72, 81, 82, 86, 88, 93, 104, 107, 109, 113, 115, 126, 128, 138, 140, 141, 144, 147, 148, 155, 166, 169, 171, 176, 177, 188, 189, 196, 203, 214, 218, 235, 238, 239, 241, 247, 248, 251, 266, 272, 279, 285, 286, 287, 289, 291, 292, 297, 308, 312, 323, 329, 346, 349, 353, 354, 362, 366, 367, 368, 373, 374, 376, 378, 379, 381, 385, 387, 391, 393, 402, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 443, 446, 450, 452, 454, 457, 462, 500, 512, 536, 545, 555, 571, 585, 586, 587, 593, 610, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 636, 637, 642, 647, 659, 660, 676, 691, 696, 699, 704, 767, 769, 804, 806, 807, 808, 818, 821, 824, 831, 835, 836, 847, 865, 866, 871, 880, 881, 886, 910, 911, 913, 930, 957, 973, 994, 995, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1019, 1020, 1021, 1045, 1046, 1048, 1049, 1052], "hoyer": [416, 1039], "hp": 51, "hpq": 51, "hrishikesh": [1037, 1038], "hristo": [1044, 1051], "hsiang": [662, 1040], "hsieh": 1042, "hspace": [45, 53, 54, 79, 95, 121, 232, 241, 257, 259, 260, 263, 297, 323, 332, 339], "hstack": [53, 69, 77, 157, 165, 239, 250, 267, 345, 415, 867], "hsuan": 1041, "ht2001": 1005, "htf": 418, "htm": [916, 917], "html": [2, 43, 47, 51, 63, 103, 104, 140, 142, 151, 152, 155, 158, 166, 169, 176, 187, 188, 189, 192, 196, 242, 244, 248, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 310, 318, 322, 323, 325, 326, 328, 333, 361, 374, 376, 379, 380, 382, 383, 387, 412, 415, 419, 425, 490, 512, 513, 662, 843, 847, 946, 947, 948, 1003, 1024, 1025, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "htmledit": [843, 847, 1003], "htmlparser": 47, "htsedebenham": 1051, "http": [43, 45, 47, 51, 52, 55, 61, 103, 169, 192, 214, 222, 230, 232, 239, 286, 289, 291, 292, 309, 373, 374, 376, 377, 379, 383, 384, 385, 387, 391, 393, 397, 411, 415, 420, 445, 452, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 512, 513, 514, 534, 535, 538, 541, 545, 599, 640, 645, 648, 653, 662, 668, 670, 671, 672, 675, 680, 683, 686, 687, 689, 690, 696, 699, 709, 725, 727, 728, 762, 763, 773, 843, 845, 847, 850, 851, 856, 857, 858, 859, 864, 886, 901, 902, 903, 916, 917, 946, 947, 1001, 1003, 1005, 1018, 1021, 1046, 1055], "hu": [1041, 1044, 1046], "hua": [567, 1011], "huang": [374, 662, 1042, 1047], "huangk10": 1047, "huard": 1036, "huber": [25, 197, 224, 418, 564, 653, 680, 682, 1019, 1036, 1038, 1039, 1048], "huberlossfunct": 1049, "huberregressor": [2, 87, 171, 184, 193, 212, 218, 219, 220, 319, 528, 674, 675, 676, 682, 683, 1001, 1026, 1042, 1043, 1044, 1045], "hubert": [411, 709, 719, 790], "hubert1985": 709, "hudson": 326, "hue": [150, 262, 272, 317, 376], "huerta": 1046, "hug": [0, 169, 400, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "huge": [216, 219, 366, 385, 631, 1039], "hugh": [883, 1038, 1049], "hugo": [45, 374, 1042, 1047, 1048, 1049, 1050], "hugorichard": 1048, "hugu": 1040, "hui": [201, 542, 544, 551, 660, 1001], "huiginn": 1036, "huilgolkar": [1037, 1038], "hujiahong726": 1052, "hull": 1053, "humahn": 1051, "human": [121, 188, 353, 379, 411, 416, 865, 866, 1005, 1012, 1045], "humid": [43, 188, 1012], "hunan": 1044, "hundr": [77, 146, 235, 316, 374, 415, 418, 565, 566, 1002, 1047], "hunt": 1051, "hunter": 1045, "hurt": [366, 538, 1044], "husak": 1050, "huszar": 1029, "hut": [696, 1002, 1041, 1043, 1046], "huynh": [1046, 1048], "hv": 419, "hvassard": 1050, "hwan": 1047, "hwang": 1042, "hybrid": [449, 653, 1024], "hye": 1047, "hyper": [2, 43, 64, 103, 141, 265, 266, 272, 277, 310, 342, 362, 381, 391, 392, 393, 406, 415, 418, 420, 471, 648, 649, 808, 816, 818, 864, 906, 1000, 1001, 1005, 1008, 1019, 1020, 1024, 1031, 1036, 1050, 1055], "hyperband": 994, "hyperbol": [346, 646, 865, 866, 1003, 1009], "hypercub": [241, 519], "hyperlink": 1038, "hyperparamet": [2, 103, 105, 106, 150, 171, 172, 178, 179, 182, 184, 188, 194, 199, 203, 228, 232, 241, 251, 264, 266, 270, 275, 277, 283, 284, 294, 310, 353, 381, 393, 411, 415, 416, 418, 421, 506, 539, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 647, 657, 663, 669, 677, 680, 732, 789, 804, 818, 913, 994, 999, 1000, 1001, 1004, 1005, 1007, 1009, 1011, 1019, 1025, 1026, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1052], "hyperparameter_baseline_similar": 179, "hyperparameter_grid": 328, "hyperparameter_length_scal": 619, "hyperplan": [137, 174, 184, 193, 206, 223, 249, 275, 337, 338, 339, 340, 341, 342, 346, 347, 516, 635, 662, 663, 670, 672, 678, 679, 680, 681, 908, 910, 912, 913, 1019, 1020, 1026], "hyperspher": 375, "hypothes": 1001, "hypothesi": [147, 272, 278, 415, 694, 698, 833, 1002], "hypothet": 64, "hyunjin": 1036, "hyvarinen": [423, 537], "h\u00e9lion": 1047, "i": [0, 2, 8, 30, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 301, 302, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 340, 341, 342, 346, 347, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 362, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 392, 393, 394, 396, 397, 399, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 950, 951, 952, 954, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 973, 974, 975, 976, 978, 979, 985, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "i_ax": 292, "i_dataset": [79, 95, 241], "i_j": 1013, "iain": [169, 376, 1001], "iampat": 1044, "ian": [1038, 1040, 1045, 1046, 1048, 1051, 1052, 1054], "iasoon": 1050, "ibay": 1036, "ibieta": 1049, "ibm": [51, 57, 335, 355, 374], "ibn": 1036, "ibnukhsein": 1053, "ibraheem": 1045, "ibrahima": 1046, "ibraim": [1041, 1042, 1043], "ib\u00e1\u00f1ez": [1044, 1045, 1048], "ic": [47, 289, 323, 373, 376, 396, 504, 506, 514, 636, 637, 1031, 1048, 1049], "ica": [11, 123, 423, 1021, 1030, 1031], "ica_estim": 121, "icann": 700, "icassp": 1005, "icdm": [567, 1011], "icdmw": 411, "ice_lines_kw": 636, "icml": [62, 64, 409, 411, 419, 440, 442, 843, 845, 864, 1005, 1007, 1019, 1023], "icml03": 845, "icml09": [535, 541], "icon": [328, 381], "icyblad": 1043, "id": [2, 45, 52, 57, 232, 305, 361, 373, 374, 379, 387, 413, 415, 419, 425, 498, 499, 500, 920, 922, 947, 1044, 1045, 1048], "id3": [1027, 1031], "idea": [44, 86, 111, 112, 141, 169, 176, 187, 215, 234, 266, 297, 342, 357, 366, 367, 379, 384, 385, 413, 414, 415, 416, 417, 418, 420, 611, 612, 1001, 1002, 1005, 1008, 1011, 1023, 1029], "ideal": [214, 216, 232, 266, 269, 272, 279, 281, 282, 362, 378, 379, 380, 383, 384, 387, 391, 393, 409, 410, 730, 760, 994, 1004, 1019, 1020, 1025, 1028], "idelberg": 1053, "ident": [52, 57, 97, 146, 209, 214, 232, 241, 245, 336, 353, 374, 381, 393, 408, 411, 412, 413, 415, 421, 424, 441, 442, 455, 467, 468, 476, 478, 479, 482, 483, 484, 491, 507, 555, 563, 564, 568, 569, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 647, 683, 684, 703, 708, 709, 740, 789, 799, 806, 809, 819, 820, 823, 824, 850, 851, 857, 865, 866, 872, 873, 885, 897, 916, 917, 998, 999, 1002, 1005, 1008, 1009, 1020, 1040, 1044, 1045, 1046, 1050, 1054], "identif": [374, 379, 411, 501, 994], "identifi": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 323, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 373, 374, 378, 379, 384, 393, 410, 411, 412, 415, 418, 419, 449, 453, 460, 490, 500, 512, 513, 559, 560, 561, 562, 567, 568, 569, 570, 610, 647, 653, 703, 716, 778, 833, 854, 873, 903, 904, 994, 1001, 1005, 1011, 1018, 1029, 1043, 1045, 1050, 1051], "idf": [2, 54, 57, 245, 353, 354, 355, 374, 416, 525, 548, 592, 593, 594, 595, 847, 855, 880, 994, 1003, 1007, 1015, 1036], "idf_": [419, 594, 595, 1044, 1055], "idier": [416, 542, 544, 551], "idiom": 385, "idl": 1047, "ido": [1051, 1052], "idpol": [214, 232], "idx": [50, 57, 88, 130, 137, 141, 143, 150, 156, 180, 188, 190, 199, 206, 213, 214, 223, 235, 266, 358, 412, 415], "idx_a": 281, "idx_avg_max_test_scor": 285, "idx_b": 281, "idx_r": 213, "idx_sort": 214, "idxmax": 349, "idxmin": 270, "ie": [75, 99, 122, 443, 708, 1001, 1015], "ieee": [96, 110, 112, 376, 411, 413, 420, 424, 451, 478, 538, 567, 668, 689, 690, 729, 773, 1001, 1005, 1011], "ieeexplor": 773, "ieic": [542, 544, 551], "iem": 662, "if_binari": [187, 255, 881, 1015, 1047], "if_delegate_has_method": [1049, 1050], "iff": [596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 879], "iforest": 251, "iforest_kw": 251, "iglesi": 1051, "ignacio": 1039, "ignor": [2, 43, 45, 47, 55, 79, 82, 88, 95, 103, 135, 140, 144, 152, 155, 188, 201, 214, 229, 242, 243, 248, 253, 255, 263, 308, 309, 317, 318, 322, 325, 346, 354, 367, 379, 381, 383, 385, 393, 397, 402, 411, 412, 418, 419, 429, 430, 433, 436, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 463, 464, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 491, 507, 512, 513, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 583, 585, 586, 587, 592, 593, 594, 595, 601, 606, 607, 614, 615, 631, 632, 633, 634, 636, 637, 639, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 711, 715, 717, 718, 730, 733, 734, 742, 759, 760, 767, 773, 778, 782, 787, 788, 791, 792, 801, 802, 803, 805, 806, 807, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 866, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 900, 901, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 927, 941, 979, 988, 993, 1001, 1002, 1005, 1007, 1011, 1015, 1020, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054], "ignore_attribut": 373, "ignore_error": 87, "ignore_implicit_zero": [885, 897], "ignore_ti": [730, 760], "ignore_warn": [222, 314, 1042], "ignored_new_col": 412, "ignorerevsfil": 379, "igor": [1042, 1043, 1049], "ih": 297, "ii": [50, 122, 188, 221, 267, 376, 419, 586, 587, 593, 642, 670, 671, 871, 880, 1001, 1015, 1023, 1053], "iid": 1044, "iii": [1050, 1053], "iijima": 1045, "iinfo": 1051, "ij": [272, 302, 408, 411, 416, 542, 544, 551, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 1001, 1002, 1005, 1007, 1010, 1015, 1020], "ijcnn": 1005, "ijcv": 1005, "ijet": 411, "ik": [1001, 1005], "ikeda": 1048, "ikko": 1049, "il": [49, 668, 689, 690, 1001, 1005], "ilambharathi": [1039, 1040], "ili": [1052, 1053], "ilic": 1049, "ilion": 1050, "iliya": 1051, "iljin": [1051, 1052], "ill": [75, 113, 219, 310, 474, 475, 481, 654, 655, 658, 659, 660, 686, 687, 1001, 1004, 1046], "illustr": [48, 52, 60, 61, 63, 67, 69, 85, 89, 90, 102, 103, 106, 107, 109, 111, 116, 119, 123, 135, 138, 149, 150, 152, 154, 155, 164, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 184, 186, 188, 189, 192, 203, 210, 211, 214, 216, 218, 222, 224, 225, 227, 228, 231, 232, 234, 235, 237, 239, 241, 243, 244, 246, 247, 248, 250, 261, 266, 272, 279, 284, 286, 293, 301, 315, 317, 320, 321, 323, 329, 334, 342, 343, 347, 349, 350, 351, 354, 355, 360, 362, 366, 376, 379, 384, 387, 392, 410, 414, 416, 418, 419, 519, 614, 615, 617, 618, 619, 623, 626, 627, 857, 994, 1001, 1005, 1008, 1011, 1017, 1018, 1019, 1020, 1024, 1026, 1029], "iloc": [43, 150, 155, 187, 188, 232, 272, 295], "ilya": [1043, 1054], "im": [121, 131, 283, 296], "im_": 701, "im_kw": [701, 1050], "imacul": 1042, "imag": [2, 42, 45, 53, 58, 59, 68, 71, 74, 75, 76, 79, 80, 84, 87, 89, 91, 95, 100, 102, 120, 121, 126, 167, 169, 175, 184, 205, 235, 243, 246, 250, 270, 301, 309, 310, 322, 331, 332, 353, 354, 371, 372, 374, 376, 379, 384, 387, 393, 397, 404, 410, 411, 416, 444, 448, 455, 465, 497, 498, 499, 500, 506, 507, 510, 511, 538, 539, 541, 545, 587, 588, 589, 590, 591, 611, 612, 695, 701, 742, 834, 878, 1001, 1005, 1006, 1008, 1010, 1017, 1021, 1024, 1026, 1029, 1031, 1036, 1039, 1044, 1045, 1049, 1051, 1052], "image_height": [587, 588, 591], "image_index": [331, 332], "image_nam": 510, "image_patch": 591, "image_reconstruct": 591, "image_s": 591, "image_shap": [121, 250], "image_width": [587, 588, 591], "imagebox": 235, "imageio": 373, "imagenet": [865, 866], "images_restor": 84, "imagin": [122, 171, 248, 346, 415, 416, 419, 1001], "imamura": 1050, "imbal": [265, 275, 286, 415, 711, 733, 734, 742, 787, 788, 791, 792, 1005], "imbalanc": [214, 266, 275, 279, 281, 286, 354, 391, 409, 415, 707, 712, 791, 805, 809, 845, 1005, 1007, 1013, 1024], "imbert": [1043, 1045, 1048, 1050, 1053, 1054], "img": [44, 83, 99, 510, 590], "img_height": 587, "img_to_graph": [2, 80, 99, 419, 1039, 1049], "img_width": 587, "imit": 353, "immanuel": [0, 1036, 1037, 1041], "immedi": [88, 379, 391, 804, 818, 829, 830, 1044], "immens": 1029, "immensu": 1044, "immers": [694, 698], "immobil": 43, "immut": 405, "imp": 995, "imp_mean": [631, 634], "impact": [51, 52, 62, 71, 72, 77, 78, 97, 107, 135, 165, 184, 186, 187, 188, 195, 216, 218, 232, 251, 265, 266, 289, 295, 317, 326, 349, 354, 362, 366, 367, 372, 391, 394, 409, 411, 416, 450, 452, 540, 544, 551, 594, 670, 671, 672, 676, 678, 680, 681, 682, 696, 798, 804, 807, 808, 818, 831, 848, 849, 850, 851, 885, 897, 908, 909, 937, 952, 975, 978, 994, 1004, 1012, 1020, 1026, 1043, 1046, 1049], "imped": 387, "imperfect": [732, 789, 1005, 1038], "imperfectli": [707, 738, 1005], "implant": 59, "implement": [2, 13, 30, 45, 46, 52, 53, 55, 80, 89, 112, 121, 141, 150, 183, 190, 192, 199, 203, 228, 232, 234, 241, 247, 248, 266, 270, 272, 281, 289, 291, 292, 294, 297, 315, 321, 322, 323, 324, 325, 327, 353, 355, 366, 367, 368, 373, 374, 376, 377, 379, 380, 381, 384, 385, 387, 388, 393, 397, 402, 407, 408, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 440, 445, 446, 447, 449, 450, 451, 452, 453, 478, 497, 500, 512, 536, 537, 538, 539, 540, 542, 545, 546, 547, 557, 558, 559, 561, 562, 565, 566, 567, 571, 576, 586, 592, 593, 595, 597, 601, 605, 614, 615, 636, 637, 644, 645, 649, 650, 657, 661, 662, 663, 667, 668, 672, 675, 676, 678, 679, 680, 681, 682, 688, 689, 690, 691, 692, 695, 696, 699, 711, 715, 724, 739, 742, 746, 782, 786, 792, 793, 801, 803, 804, 807, 808, 810, 818, 822, 823, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 850, 851, 853, 856, 858, 859, 864, 865, 866, 868, 890, 898, 899, 905, 908, 909, 910, 911, 912, 913, 914, 951, 952, 961, 964, 969, 973, 975, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1015, 1017, 1018, 1021, 1022, 1024, 1025, 1027, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "impli": [43, 171, 187, 353, 354, 355, 416, 418, 421, 477, 577, 586, 614, 615, 626, 739, 938, 1001, 1002, 1047], "implic": [362, 379], "implicit": [2, 214, 393, 418, 419, 576, 686, 687, 999, 1004, 1024, 1045], "implicitli": [355, 388, 418, 601, 636, 637, 887, 995, 997, 1012, 1015, 1020, 1054], "import": [2, 16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 368, 373, 374, 375, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 396, 397, 398, 402, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 965, 966, 967, 968, 969, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1026, 1029, 1031, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1054], "importance_gett": [420, 597, 598, 601, 1048], "importances_mean": [142, 148, 189, 190, 321, 638, 1013], "importances_std": [142, 638, 1013], "important_word": 57, "importantli": [43, 53, 122, 177, 188, 192, 312, 379, 411, 1054], "importerror": [50, 86, 124, 292, 305, 387], "importlib": 1049, "impos": [74, 90, 152, 202, 208, 218, 318, 391, 411, 416, 418, 419, 531, 661, 1001], "imposs": [147, 355, 1025], "impract": 913, "impress": 1029, "improp": [393, 1043], "improv": [0, 30, 43, 61, 62, 69, 109, 110, 113, 126, 131, 135, 136, 141, 143, 145, 146, 147, 149, 150, 155, 165, 183, 187, 192, 200, 214, 222, 232, 266, 273, 275, 289, 292, 295, 310, 317, 327, 345, 346, 354, 362, 367, 377, 382, 384, 385, 387, 388, 391, 393, 394, 405, 416, 418, 420, 452, 453, 535, 536, 538, 541, 542, 543, 545, 546, 547, 550, 558, 561, 562, 563, 564, 565, 566, 568, 569, 614, 615, 647, 656, 668, 670, 671, 672, 676, 677, 678, 679, 680, 682, 689, 691, 696, 733, 734, 787, 788, 791, 792, 857, 865, 866, 882, 884, 896, 916, 917, 919, 952, 994, 999, 1001, 1002, 1005, 1008, 1009, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "improvis": [50, 305], "impur": [148, 190, 361, 396, 418, 420, 557, 558, 561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919, 920, 922, 1021, 1031, 1041, 1042, 1043, 1044], "imput": [2, 103, 150, 155, 189, 243, 253, 255, 322, 325, 371, 383, 392, 393, 402, 412, 418, 493, 505, 569, 584, 631, 632, 633, 634, 643, 649, 676, 830, 851, 869, 933, 935, 1024, 1025, 1026, 1031, 1038, 1039], "imputation_const": 253, "imputation_mean": 253, "imputation_ord": [631, 1046], "imputation_sequence_": 631, "impute_estim": 182, "impute_scor": 183, "imran": [1038, 1039, 1040], "imread": 68, "imshow": [44, 45, 53, 68, 75, 80, 81, 83, 84, 86, 87, 91, 113, 121, 124, 131, 173, 174, 175, 179, 190, 205, 230, 235, 250, 283, 296, 310, 331, 332, 342, 350, 373, 636, 701, 1050], "in1d": 1043, "in_bodi": 47, "in_titl": 47, "in_top": 47, "in_topic_d": 47, "inaccess": 88, "inaccur": 1055, "inact": [355, 373, 379], "inadvert": [186, 393], "inadvis": 405, "inappropri": [374, 415, 421, 713, 825], "inbuilt": 415, "inc": [0, 102, 271, 995, 1017, 1029], "incap": 88, "incentiv": 383, "incept": 1025, "includ": [0, 11, 18, 43, 68, 70, 88, 111, 141, 144, 145, 146, 186, 187, 189, 199, 214, 218, 232, 248, 273, 289, 292, 308, 312, 324, 325, 327, 342, 347, 353, 355, 362, 366, 367, 373, 375, 377, 379, 380, 381, 383, 384, 385, 387, 388, 393, 394, 397, 405, 408, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 447, 449, 453, 459, 469, 472, 473, 474, 475, 476, 477, 478, 479, 492, 493, 494, 500, 504, 505, 506, 508, 509, 514, 538, 545, 561, 568, 578, 636, 642, 650, 651, 656, 664, 665, 666, 669, 685, 692, 693, 701, 717, 733, 734, 739, 741, 742, 775, 787, 788, 791, 799, 804, 806, 807, 808, 817, 818, 821, 824, 831, 834, 856, 858, 859, 860, 881, 882, 883, 887, 905, 908, 909, 916, 918, 920, 922, 934, 935, 938, 940, 944, 946, 947, 961, 994, 1001, 1004, 1005, 1006, 1008, 1009, 1015, 1019, 1020, 1021, 1024, 1025, 1028, 1029, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "include_bia": [43, 194, 287, 883, 887, 1050], "include_boundari": [938, 1050], "include_self": [74, 79, 100, 699, 861, 862, 1040], "include_valu": 701, "inclus": [0, 379, 381, 387, 453, 459, 758, 790, 1005, 1006, 1036, 1050], "incom": [312, 374, 443], "incoming_count": 55, "incompat": [500, 995, 1044, 1045], "incomplet": [379, 397, 407, 411, 709, 799, 995, 1002, 1040, 1042], "inconsist": [2, 393, 405, 419, 512, 513, 580, 910, 913, 938, 1011, 1020, 1031, 1036, 1041, 1042, 1043, 1044, 1046, 1049, 1051, 1052, 1053], "inconsistentversionwarn": [2, 405, 1052], "incorpor": [327, 379, 412, 418, 1004, 1024, 1029], "incorrect": [135, 186, 334, 362, 379, 411, 611, 612, 636, 637, 738, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1055], "incorrectli": [196, 279, 418, 419, 557, 563, 565, 738, 744, 1005, 1037, 1042, 1044, 1045, 1047, 1052], "incr_mean_variance_axi": [2, 1042, 1048], "increas": [2, 43, 46, 54, 63, 72, 78, 88, 90, 91, 94, 107, 124, 135, 136, 138, 141, 143, 145, 150, 152, 165, 169, 171, 175, 176, 177, 187, 188, 192, 195, 197, 205, 214, 215, 216, 218, 232, 239, 245, 258, 259, 266, 272, 273, 274, 279, 285, 286, 307, 313, 314, 317, 323, 329, 332, 342, 349, 354, 355, 357, 366, 367, 368, 378, 387, 388, 393, 409, 411, 413, 416, 418, 419, 422, 443, 447, 449, 455, 466, 474, 475, 481, 536, 540, 557, 558, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 631, 639, 640, 641, 649, 654, 655, 658, 659, 660, 662, 663, 670, 671, 672, 680, 681, 682, 686, 687, 689, 690, 696, 710, 711, 716, 782, 786, 793, 807, 808, 837, 856, 858, 859, 860, 863, 865, 866, 882, 908, 916, 917, 918, 919, 952, 994, 996, 1000, 1001, 1002, 1004, 1005, 1008, 1015, 1019, 1020, 1021, 1029, 1036, 1038, 1041, 1045, 1047, 1048, 1051, 1054], "increasing_": 639, "increasing_bool": 640, "increment": [2, 104, 120, 126, 127, 128, 129, 184, 275, 383, 385, 445, 450, 466, 508, 537, 538, 539, 540, 543, 545, 548, 606, 650, 662, 670, 810, 832, 840, 841, 843, 844, 845, 846, 847, 877, 878, 888, 908, 909, 979, 1001, 1007, 1026, 1039, 1040], "incrementalpca": [2, 125, 368, 416, 537, 539, 543, 545, 548, 1040, 1043, 1044, 1046, 1047, 1050], "incur": [63, 623, 908, 1020, 1044], "ind": [53, 77, 146, 157, 354, 848, 849], "inde": [44, 46, 62, 64, 70, 74, 75, 86, 88, 91, 113, 116, 126, 135, 138, 168, 169, 171, 187, 189, 194, 199, 201, 203, 214, 216, 274, 275, 279, 281, 289, 292, 312, 317, 349, 354, 362, 366, 378, 384, 392, 393, 394, 411, 413, 418, 571, 572, 1001, 1015, 1019, 1050], "indecisiveus": [1047, 1048], "indefinit": 383, "indent": [381, 970], "independ": [2, 32, 52, 62, 64, 72, 80, 122, 123, 125, 140, 143, 178, 188, 250, 251, 272, 275, 277, 281, 291, 312, 319, 321, 354, 362, 366, 367, 375, 381, 392, 393, 397, 405, 408, 409, 411, 412, 413, 414, 415, 419, 423, 452, 467, 491, 507, 519, 520, 521, 522, 524, 536, 537, 539, 541, 543, 544, 550, 551, 555, 556, 608, 611, 612, 629, 644, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 676, 677, 678, 679, 708, 709, 721, 740, 741, 759, 761, 799, 806, 833, 837, 839, 841, 842, 880, 884, 885, 886, 888, 892, 893, 894, 895, 897, 898, 899, 902, 910, 911, 912, 913, 914, 946, 994, 997, 999, 1001, 1002, 1005, 1006, 1007, 1010, 1012, 1015, 1020, 1021, 1030, 1031, 1036, 1037, 1042, 1044, 1046, 1051], "inder128": 1046, "inderjeet": 1047, "inderjit": [408, 456], "indeterminaci": 548, "index": [2, 51, 54, 55, 72, 73, 74, 75, 76, 82, 83, 91, 103, 104, 135, 140, 142, 150, 166, 169, 182, 186, 187, 188, 189, 190, 214, 218, 232, 252, 255, 258, 259, 263, 267, 270, 271, 272, 273, 275, 283, 284, 285, 286, 292, 312, 317, 318, 319, 325, 329, 331, 332, 354, 355, 374, 376, 377, 379, 381, 383, 388, 391, 393, 408, 412, 415, 416, 418, 419, 426, 446, 450, 451, 452, 453, 454, 456, 457, 460, 462, 463, 467, 470, 507, 513, 561, 562, 563, 564, 568, 569, 570, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 621, 636, 637, 644, 701, 708, 709, 716, 720, 722, 735, 742, 761, 783, 784, 790, 792, 798, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 834, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 881, 916, 917, 918, 919, 925, 956, 975, 978, 983, 984, 1005, 1007, 1008, 1009, 1019, 1021, 1024, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "index_alpha_path_a": 201, "index_alpha_path_b": 201, "index_map": 55, "indexerror": [1044, 1045], "indexhash": 644, "indexhash_": 644, "indian": 374, "indic": [2, 51, 57, 58, 62, 63, 92, 93, 99, 107, 116, 118, 121, 135, 140, 145, 176, 179, 183, 186, 188, 211, 236, 245, 248, 265, 266, 274, 275, 278, 279, 292, 305, 331, 332, 335, 353, 354, 355, 361, 367, 374, 379, 380, 381, 383, 387, 388, 391, 393, 407, 408, 409, 411, 413, 415, 416, 418, 419, 422, 426, 431, 440, 443, 447, 453, 454, 455, 456, 458, 459, 460, 463, 467, 470, 475, 490, 512, 513, 515, 516, 517, 527, 536, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 585, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 624, 631, 632, 633, 634, 636, 637, 643, 650, 651, 654, 655, 656, 657, 658, 659, 665, 667, 669, 677, 679, 686, 687, 694, 696, 698, 700, 707, 711, 716, 717, 722, 723, 724, 726, 729, 732, 733, 734, 735, 738, 742, 743, 744, 745, 758, 775, 782, 783, 784, 785, 787, 788, 789, 791, 792, 796, 797, 798, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 841, 842, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 872, 875, 879, 881, 889, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 924, 925, 930, 934, 935, 940, 956, 967, 968, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 995, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1012, 1015, 1016, 1019, 1020, 1025, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1046, 1047, 1049, 1051, 1052, 1053, 1054, 1055], "indicator_": [631, 632, 634], "indicator_matrix_": 1041, "indigo": 231, "indirect": [275, 380, 393], "indirectli": [232, 346], "indispens": 1029, "indistinguish": 312, "individu": [2, 43, 80, 93, 111, 134, 136, 138, 155, 164, 167, 180, 184, 185, 187, 190, 214, 232, 242, 251, 252, 266, 275, 277, 291, 321, 328, 329, 346, 349, 367, 380, 381, 383, 386, 388, 393, 396, 402, 408, 412, 415, 418, 419, 440, 455, 465, 467, 500, 505, 507, 513, 559, 560, 563, 564, 566, 567, 569, 571, 572, 573, 574, 607, 613, 614, 636, 637, 647, 649, 661, 662, 663, 672, 675, 676, 677, 678, 679, 680, 681, 682, 691, 716, 723, 732, 738, 754, 755, 789, 794, 795, 804, 818, 836, 840, 841, 843, 844, 845, 846, 847, 866, 869, 877, 878, 880, 881, 882, 885, 887, 888, 893, 894, 895, 908, 909, 1005, 1006, 1015, 1020, 1026, 1031, 1037, 1040, 1042, 1048, 1050, 1052], "indptr": [55, 292, 361, 979, 980, 981, 982, 983, 984, 985, 986, 987, 1044, 1052], "induc": [25, 63, 89, 187, 199, 205, 207, 212, 215, 229, 247, 251, 349, 355, 408, 416, 418, 449, 452, 543, 547, 557, 561, 562, 563, 564, 568, 569, 570, 647, 730, 760, 881, 916, 917, 918, 919, 998, 1005, 1019], "induct": [43, 71, 133, 147, 179, 184, 393, 411, 418, 425, 444, 516, 568, 631, 635, 903, 904, 965, 988, 1001, 1018, 1026, 1038], "inductive_learn": 89, "inductivecluster": 89, "industri": [411, 1024], "ineffect": [316, 409, 1015, 1044, 1045], "ineffici": [2, 418, 446, 578, 836, 837, 1008, 1010], "inequ": [361, 393, 411, 446, 450, 462, 703, 1002, 1003, 1008], "inertia": [90, 91, 94, 354, 411, 446, 450, 452, 455, 462, 463, 465, 466, 1047], "inertia_": [91, 94, 97, 446, 450, 452, 1047], "inf": [107, 174, 302, 388, 411, 421, 449, 453, 458, 459, 460, 464, 474, 475, 481, 557, 558, 563, 564, 597, 598, 601, 610, 611, 612, 623, 631, 639, 641, 652, 653, 654, 656, 673, 675, 676, 680, 681, 682, 684, 691, 732, 734, 750, 782, 789, 793, 864, 873, 880, 932, 933, 934, 935, 950, 1005, 1015, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054], "infant": 1015, "infeas": [1001, 1008, 1010], "infer": [25, 184, 185, 187, 209, 258, 262, 263, 272, 358, 373, 381, 391, 405, 415, 416, 495, 500, 512, 513, 519, 538, 540, 542, 544, 551, 553, 554, 557, 563, 564, 636, 639, 661, 713, 726, 727, 745, 789, 801, 802, 810, 827, 834, 844, 882, 889, 903, 904, 916, 917, 918, 919, 967, 995, 1001, 1004, 1005, 1010, 1015, 1018, 1021, 1024, 1025, 1026, 1037, 1041, 1042, 1047, 1050, 1053], "inferencesess": 405, "inferenti": 89, "inferior": [444, 448, 1047], "infin": [2, 272, 349, 545, 686, 687, 716, 829, 915, 933, 1008], "infinit": [64, 215, 257, 275, 346, 366, 421, 449, 626, 627, 782, 801, 932, 934, 935, 997, 1004, 1015, 1020, 1044, 1046, 1049, 1050, 1051, 1053, 1054], "inflammatori": 374, "inflat": [90, 186, 187, 189, 411, 415, 1005, 1015], "inflect": 274, "influenc": [42, 48, 52, 111, 112, 135, 184, 187, 197, 247, 257, 280, 312, 319, 342, 346, 349, 362, 368, 413, 416, 418, 434, 443, 457, 468, 485, 486, 487, 492, 505, 558, 560, 562, 564, 566, 569, 572, 574, 615, 632, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 680, 682, 683, 738, 754, 834, 841, 842, 850, 851, 858, 859, 866, 885, 886, 897, 909, 911, 914, 917, 919, 934, 994, 999, 1000, 1001, 1008, 1011, 1015, 1019, 1020, 1026, 1029, 1039, 1044, 1045], "influenti": [218, 354, 1029], "info": [2, 45, 77, 103, 121, 187, 188, 248, 266, 270, 376, 378, 383, 393, 419, 467, 500, 565, 566, 960], "inform": [2, 3, 43, 44, 47, 50, 51, 52, 53, 62, 64, 69, 70, 72, 73, 82, 86, 91, 99, 100, 102, 103, 116, 118, 127, 141, 142, 163, 165, 166, 168, 169, 171, 176, 184, 187, 188, 190, 192, 193, 194, 195, 199, 215, 218, 229, 231, 232, 248, 252, 259, 260, 262, 266, 267, 269, 272, 273, 274, 277, 279, 281, 285, 295, 298, 299, 302, 319, 324, 328, 345, 349, 353, 354, 355, 358, 361, 362, 366, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 387, 391, 392, 393, 394, 402, 405, 408, 410, 415, 416, 418, 419, 420, 421, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 465, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 496, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 514, 519, 528, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 610, 611, 612, 613, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 699, 701, 705, 708, 709, 719, 730, 734, 747, 759, 760, 761, 790, 792, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 927, 961, 988, 993, 995, 997, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1019, 1021, 1025, 1026, 1028, 1029, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "informatik": 1005, "informed": 1005, "infrastructur": [309, 327, 1024, 1025], "infrequ": [881, 882, 889, 1005, 1036, 1050, 1051, 1052], "infrequent_categories_": [325, 327, 881, 882, 889, 1015], "infrequent_if_exist": [881, 1015], "infrequent_sklearn": [881, 1015], "infti": [232, 421, 623, 1001, 1015, 1043], "ing": 419, "ingela": 1050, "ingest": 419, "ingredi": 421, "ingrid": 1046, "inher": [131, 209, 362, 411, 416, 567, 995, 997, 999, 1000, 1002, 1006], "inherit": [248, 379, 381, 392, 393, 425, 581, 680, 928, 944, 946, 957, 1001, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1052, 1053], "inhibit": [422, 447], "inhomogen": [421, 618], "ini": 260, "init": [2, 54, 77, 91, 92, 94, 97, 188, 195, 234, 235, 237, 238, 239, 258, 260, 292, 354, 382, 387, 411, 416, 418, 446, 450, 452, 454, 456, 462, 463, 542, 544, 551, 552, 563, 564, 636, 637, 694, 696, 698, 857, 1002, 1036, 1045, 1048, 1050, 1051, 1052], "init_": [563, 564], "init_param": [257, 260, 263, 801, 802], "init_s": [94, 354, 452], "init_size_": 1048, "init_tim": 260, "initi": [0, 46, 51, 55, 71, 77, 78, 90, 91, 93, 96, 97, 112, 148, 156, 157, 158, 172, 177, 184, 187, 195, 207, 229, 234, 235, 239, 256, 258, 259, 272, 292, 323, 333, 342, 354, 362, 367, 374, 379, 381, 387, 388, 391, 393, 411, 416, 418, 420, 421, 423, 445, 446, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 516, 519, 535, 536, 537, 541, 542, 544, 547, 549, 550, 551, 552, 557, 558, 563, 564, 567, 597, 611, 612, 614, 615, 623, 624, 631, 644, 649, 650, 651, 652, 656, 657, 662, 664, 665, 666, 667, 670, 671, 672, 673, 675, 680, 681, 682, 684, 685, 688, 694, 695, 696, 698, 699, 801, 802, 838, 857, 864, 865, 866, 904, 937, 951, 952, 973, 978, 979, 997, 1001, 1002, 1004, 1009, 1010, 1011, 1019, 1021, 1024, 1026, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "initial_imputer_": 631, "initial_strategi": 631, "initial_theta": [614, 615], "initialis": [121, 542, 544, 551, 1036, 1044, 1045], "initializedcheck": 380, "inject": [251, 374, 418], "inki": 1042, "inli": [241, 1001, 1011], "inlier": [111, 151, 217, 241, 251, 312, 393, 413, 433, 472, 567, 675, 681, 854, 885, 897, 911, 912, 914, 1001, 1011, 1043, 1044, 1049], "inlier_mask": 217, "inlier_mask_": [217, 675], "inlier_plot": 111, "inliers_mask": 112, "inlin": [225, 379, 380, 1021], "inner": [64, 126, 147, 150, 273, 277, 291, 333, 366, 419, 446, 518, 586, 593, 622, 652, 673, 684, 779, 781, 997, 1005, 1015, 1020, 1037, 1040, 1050, 1053], "inner_clf": 1005, "inner_cv": [277, 328], "inner_it": 385, "inner_numb": 333, "inner_stat": 1050, "inner_stats_": 1050, "inpaint": 416, "inplac": [2, 232, 251, 284, 457, 485, 486, 487, 488, 863, 871, 874, 877, 878, 880, 884, 885, 886, 888, 977, 980, 981, 982, 986, 987, 1045], "inplace_column_scal": 2, "inplace_csr_column_scal": [2, 388], "inplace_csr_row_normalize_l1": [2, 388], "inplace_csr_row_normalize_l2": [2, 388], "inplace_row_scal": 2, "inplace_swap_column": 2, "inplace_swap_row": 2, "inproceed": 0, "input": [2, 43, 45, 49, 64, 67, 69, 105, 121, 125, 143, 147, 148, 177, 178, 179, 187, 192, 194, 214, 217, 218, 222, 229, 232, 244, 245, 247, 248, 255, 267, 285, 289, 296, 297, 309, 313, 314, 315, 316, 321, 324, 326, 329, 342, 346, 350, 355, 373, 376, 379, 382, 384, 388, 389, 391, 392, 393, 405, 408, 409, 412, 415, 416, 417, 418, 419, 420, 421, 423, 429, 432, 433, 434, 435, 436, 440, 441, 442, 443, 444, 445, 448, 451, 452, 453, 457, 460, 461, 464, 467, 468, 470, 471, 472, 474, 475, 485, 486, 487, 492, 507, 513, 520, 521, 522, 524, 528, 532, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 615, 624, 626, 631, 632, 633, 634, 635, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 689, 690, 691, 692, 693, 694, 696, 697, 700, 701, 702, 703, 704, 705, 706, 725, 726, 727, 728, 732, 749, 750, 752, 754, 755, 757, 758, 765, 771, 775, 776, 778, 782, 783, 784, 785, 789, 794, 795, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 895, 896, 900, 901, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 925, 927, 928, 929, 931, 932, 933, 934, 935, 936, 940, 946, 949, 951, 961, 963, 964, 968, 977, 979, 985, 986, 987, 990, 991, 993, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "input_featur": [194, 381, 393, 427, 432, 445, 446, 448, 450, 452, 467, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 570, 571, 572, 573, 574, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 1052], "input_nam": [933, 935, 967, 1050], "input_tag": 927, "input_typ": [355, 419, 586], "inputtag": [2, 927], "inria": [0, 662, 1036], "insensit": [247, 647, 680, 682, 792, 909, 998, 1019, 1020, 1036], "insepar": [169, 376], "insert": [93, 187, 214, 391, 411, 490, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 923], "insid": [2, 55, 57, 63, 188, 216, 248, 272, 333, 342, 368, 373, 374, 381, 385, 402, 411, 419, 440, 446, 447, 450, 452, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 537, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 593, 594, 595, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 961, 964, 1012, 1029, 1053], "insight": [43, 46, 187, 188, 202, 215, 216, 232, 266, 309, 312, 353, 361, 409, 410, 804, 807, 808, 818, 831, 1012, 1021, 1029], "insist": 102, "inspect": [2, 43, 48, 66, 67, 70, 89, 94, 137, 142, 148, 150, 151, 152, 156, 166, 171, 176, 177, 187, 188, 189, 190, 198, 206, 223, 228, 252, 266, 272, 275, 284, 295, 300, 303, 317, 321, 322, 323, 324, 326, 328, 338, 339, 340, 341, 343, 344, 346, 353, 358, 367, 381, 393, 411, 412, 418, 419, 467, 557, 558, 561, 562, 563, 564, 568, 569, 570, 635, 636, 637, 638, 837, 868, 869, 916, 917, 918, 919, 992, 1005, 1006, 1009, 1012, 1013, 1020, 1024, 1026, 1031, 1039], "inspir": [110, 152, 188, 232, 379, 391, 418, 565, 566, 939, 995, 1045], "instabl": [74, 187, 302, 421, 455, 539, 543, 547, 699, 1043, 1046, 1049], "instal": [86, 255, 292, 321, 322, 323, 324, 325, 326, 327, 328, 329, 366, 367, 379, 380, 382, 383, 385, 387, 391, 392, 398, 404, 405, 407, 411, 419, 455, 465, 500, 695, 699, 1021, 1043, 1044, 1045, 1049, 1050], "installment_commit": 266, "instanc": [2, 43, 47, 49, 52, 61, 63, 64, 86, 89, 91, 138, 150, 166, 169, 183, 188, 189, 198, 199, 243, 248, 251, 266, 268, 270, 281, 283, 284, 303, 321, 328, 336, 338, 339, 345, 346, 353, 354, 355, 365, 366, 367, 373, 374, 376, 377, 378, 379, 381, 384, 385, 387, 388, 391, 393, 397, 402, 405, 407, 408, 409, 410, 411, 412, 415, 416, 418, 419, 420, 421, 422, 423, 425, 435, 436, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 465, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 491, 494, 496, 499, 500, 501, 507, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 581, 585, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 614, 615, 624, 631, 632, 633, 634, 636, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 711, 724, 733, 734, 742, 775, 778, 782, 783, 784, 785, 787, 788, 791, 792, 793, 796, 797, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 813, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 934, 935, 937, 946, 947, 951, 952, 960, 961, 962, 963, 973, 974, 975, 978, 988, 989, 993, 994, 995, 1001, 1002, 1005, 1007, 1008, 1011, 1013, 1015, 1019, 1020, 1021, 1025, 1031, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "instanci": 1045, "instant": 208, "instantan": 512, "instanti": [104, 174, 324, 382, 402, 418, 453, 571, 572, 606, 634, 804, 807, 808, 810, 818, 827, 829, 830, 831, 832, 833, 835, 942, 1011, 1036, 1044, 1048, 1052], "instead": [0, 43, 44, 45, 52, 58, 86, 88, 89, 90, 103, 126, 138, 152, 166, 169, 171, 214, 216, 229, 232, 238, 251, 263, 268, 269, 273, 274, 285, 291, 297, 312, 321, 322, 323, 324, 325, 342, 344, 346, 353, 355, 361, 362, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 387, 388, 391, 392, 393, 402, 405, 407, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 434, 440, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 459, 462, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 513, 514, 537, 538, 539, 542, 544, 545, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 611, 612, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 634, 636, 639, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 694, 696, 698, 711, 713, 750, 778, 782, 783, 784, 786, 787, 801, 802, 803, 804, 805, 806, 807, 808, 811, 813, 816, 818, 820, 822, 823, 824, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 869, 870, 871, 873, 874, 875, 880, 881, 886, 887, 888, 898, 899, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 922, 940, 947, 952, 961, 979, 994, 995, 997, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1015, 1019, 1020, 1021, 1024, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "instinct": 353, "institut": [0, 266, 376, 1008], "instruct": [366, 379, 380, 381, 382, 383, 384, 387, 391, 392, 393, 507, 592, 593, 595, 1028, 1036], "instrument": [51, 102, 122, 186], "insuffici": [396, 1004], "insur": [184, 193, 214, 410, 467, 500, 556, 652, 673, 684, 710, 749, 754, 756, 834, 869, 872, 873, 881, 888, 1001, 1026], "int": [47, 49, 52, 53, 55, 72, 79, 95, 112, 138, 146, 150, 151, 161, 162, 172, 173, 174, 180, 183, 186, 196, 205, 207, 214, 232, 239, 241, 247, 251, 257, 266, 267, 270, 271, 272, 292, 297, 299, 305, 319, 332, 355, 374, 379, 381, 391, 393, 409, 412, 415, 419, 422, 423, 426, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 506, 507, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 611, 612, 614, 615, 621, 631, 632, 633, 634, 635, 636, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 711, 713, 717, 730, 731, 733, 734, 735, 738, 742, 760, 761, 773, 778, 782, 783, 784, 785, 786, 787, 788, 791, 793, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 930, 934, 935, 937, 938, 951, 952, 954, 955, 956, 958, 969, 973, 975, 978, 983, 984, 1001, 1012, 1036, 1042, 1046, 1047], "int32": [251, 292, 319, 379, 393, 446, 450, 452, 454, 456, 462, 910, 911, 912, 913, 914, 969, 1020, 1045, 1051, 1052, 1053], "int64": [43, 53, 87, 103, 187, 188, 266, 281, 286, 289, 318, 328, 361, 393, 419, 429, 445, 451, 453, 500, 518, 519, 523, 589, 592, 644, 650, 651, 656, 657, 669, 718, 719, 722, 748, 798, 844, 873, 902, 932, 959, 990, 1006, 1044, 1047, 1049, 1051, 1052, 1053], "int64dtyp": 1053, "intact": 881, "integ": [2, 43, 55, 86, 103, 187, 214, 232, 322, 323, 362, 366, 373, 374, 376, 381, 384, 388, 392, 393, 411, 412, 415, 416, 418, 419, 436, 440, 465, 467, 470, 475, 490, 500, 502, 505, 506, 507, 509, 512, 513, 516, 518, 519, 523, 526, 554, 563, 564, 565, 566, 567, 571, 572, 576, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 636, 637, 648, 655, 659, 663, 669, 677, 679, 680, 682, 703, 718, 739, 804, 806, 807, 808, 809, 811, 813, 818, 819, 820, 823, 824, 826, 828, 831, 839, 842, 844, 847, 848, 849, 873, 881, 882, 887, 888, 889, 892, 902, 904, 916, 917, 918, 919, 930, 967, 968, 969, 973, 995, 1001, 1006, 1008, 1015, 1018, 1020, 1021, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055], "integr": [0, 52, 77, 103, 166, 179, 203, 309, 323, 367, 377, 381, 382, 383, 385, 387, 393, 397, 416, 421, 449, 719, 759, 790, 979, 1004, 1012, 1029, 1037, 1039, 1040, 1048, 1049, 1053, 1055], "intel": [1005, 1024], "intelex": [397, 1024], "intellectu": 186, "intellig": [96, 169, 266, 353, 376, 411, 418, 451, 559, 560, 642, 700, 729, 838, 865, 866, 1006, 1017, 1025, 1029], "intend": [90, 91, 125, 215, 255, 346, 353, 379, 380, 386, 391, 393, 411, 415, 471, 586, 677, 703, 877, 878, 888, 906, 925, 1000, 1001, 1005, 1009, 1016, 1024, 1055], "intens": [99, 124, 292, 376, 380, 391, 393, 416, 446, 450, 462, 611, 612, 636, 637, 806, 994, 1012, 1029, 1044], "intention": 64, "inter": [2, 75, 142, 362, 418, 720], "interact": [2, 42, 148, 150, 184, 214, 239, 243, 273, 322, 378, 380, 381, 383, 385, 391, 393, 394, 405, 412, 563, 564, 565, 566, 636, 637, 883, 887, 994, 997, 1001, 1002, 1003, 1010, 1012, 1015, 1023, 1025, 1038, 1043, 1050, 1051], "interaction_cst": [188, 326, 418, 565, 566, 1051], "interaction_onli": [43, 883, 1001, 1015], "interactiveshellapp": 385, "intercept": [124, 206, 223, 231, 350, 393, 485, 486, 487, 553, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 883, 887, 890, 908, 909, 915, 1001, 1003, 1005, 1010, 1019, 1020, 1039, 1041, 1045, 1046], "intercept_": [197, 204, 206, 223, 249, 340, 347, 350, 381, 393, 485, 486, 487, 553, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 908, 909, 910, 911, 912, 913, 914, 999, 1001, 1019, 1020, 1036, 1043, 1048, 1050, 1053], "intercept_hidden_": 864, "intercept_init": [670, 671, 672, 680, 682], "intercept_sc": [207, 662, 663, 908, 909, 915, 1001, 1020], "intercept_visible_": 864, "intercepts_": [865, 866, 1009], "interchang": [1024, 1053], "interclass": 75, "interdepend": 519, "interest": [0, 43, 45, 52, 77, 79, 83, 88, 95, 99, 104, 135, 147, 155, 166, 169, 176, 182, 187, 188, 189, 203, 214, 215, 216, 232, 235, 246, 265, 266, 269, 272, 273, 275, 281, 286, 289, 329, 342, 349, 354, 361, 366, 374, 376, 379, 384, 385, 387, 391, 394, 410, 411, 413, 416, 419, 421, 497, 498, 504, 508, 514, 650, 651, 908, 995, 1001, 1002, 1005, 1010, 1011, 1012, 1025, 1029, 1036, 1053], "interestingli": [109, 169, 1015], "interfac": [2, 42, 135, 184, 372, 373, 380, 381, 383, 388, 391, 393, 415, 421, 422, 444, 448, 453, 500, 557, 703, 804, 807, 808, 818, 868, 869, 894, 989, 994, 1008, 1020, 1024, 1025, 1029, 1036, 1038, 1041, 1042, 1044, 1045, 1050, 1052], "interfer": [328, 1046], "interim": 1043, "interior": [674, 1001, 1051], "interleav": [2, 375, 391, 526], "intermedi": [43, 46, 85, 88, 140, 147, 251, 342, 391, 419, 563, 564, 623, 868, 1005, 1048, 1054], "intern": [0, 43, 63, 103, 113, 126, 141, 145, 148, 150, 160, 169, 172, 182, 184, 214, 248, 266, 286, 292, 294, 311, 318, 333, 355, 362, 367, 374, 376, 381, 385, 388, 391, 393, 402, 407, 408, 411, 415, 416, 418, 419, 420, 421, 422, 440, 442, 447, 468, 471, 515, 538, 539, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 597, 598, 614, 615, 644, 647, 650, 656, 672, 676, 680, 682, 700, 712, 735, 738, 762, 763, 787, 834, 848, 849, 864, 865, 866, 868, 869, 873, 887, 889, 903, 904, 906, 908, 909, 910, 913, 916, 917, 918, 919, 1001, 1002, 1003, 1005, 1008, 1011, 1015, 1017, 1020, 1021, 1026, 1029, 1036, 1039, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "internet": [374, 384, 1015], "interop": 1024, "interoper": [405, 421, 1025], "interp": [281, 282, 342], "interp1d": [657, 667, 688], "interp_tpr": 282, "interpol": [43, 53, 68, 75, 83, 84, 87, 91, 113, 121, 124, 175, 178, 184, 193, 194, 205, 230, 244, 250, 281, 287, 296, 297, 304, 310, 332, 342, 421, 639, 649, 657, 667, 676, 688, 704, 711, 851, 859, 869, 883, 887, 996, 1001, 1005, 1015, 1026, 1043, 1048], "interpret": [43, 64, 150, 169, 178, 184, 185, 186, 188, 210, 214, 215, 219, 230, 232, 265, 272, 274, 275, 286, 310, 313, 316, 323, 353, 355, 366, 377, 379, 380, 385, 387, 388, 393, 396, 409, 411, 412, 417, 419, 455, 467, 468, 470, 500, 545, 576, 615, 643, 647, 657, 676, 677, 695, 696, 699, 705, 733, 757, 762, 763, 787, 796, 797, 810, 819, 831, 832, 834, 837, 869, 881, 888, 999, 1001, 1005, 1006, 1012, 1013, 1015, 1021, 1024, 1026, 1036, 1037, 1041, 1044, 1049, 1050, 1051], "interquartil": [251, 886, 898], "interquartile_rang": 886, "interrog": 419, "interrupt": 1001, "intersect": [273, 339, 408, 411, 742], "interv": [2, 52, 64, 134, 150, 178, 184, 199, 214, 215, 216, 232, 272, 374, 393, 409, 415, 418, 421, 441, 442, 520, 521, 522, 561, 562, 564, 566, 568, 569, 639, 640, 642, 681, 746, 752, 754, 808, 825, 834, 871, 873, 887, 910, 911, 912, 938, 997, 1001, 1005, 1015, 1021, 1026, 1043, 1047], "intervent": [88, 187], "intl": [64, 415], "intp": [426, 454, 456], "intra": [43, 592, 595, 796, 797], "intract": [89, 416, 1002, 1010], "intric": [218, 516], "intricaci": 379, "intrins": [194, 393, 416, 418, 1008, 1013, 1019, 1048], "introduc": [43, 109, 111, 112, 126, 150, 168, 184, 189, 194, 199, 218, 240, 245, 248, 251, 253, 279, 326, 327, 355, 375, 377, 379, 381, 383, 384, 387, 391, 393, 402, 409, 411, 413, 415, 416, 418, 419, 435, 444, 445, 446, 448, 450, 452, 462, 467, 471, 485, 486, 487, 488, 500, 508, 519, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 559, 560, 570, 571, 572, 573, 574, 585, 586, 587, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 662, 668, 689, 690, 692, 693, 696, 834, 852, 857, 860, 864, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 902, 906, 999, 1001, 1004, 1007, 1008, 1011, 1015, 1017, 1019, 1020, 1026, 1036, 1037, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "introduct": [168, 232, 270, 379, 410, 415, 416, 419, 594, 792, 793, 843, 847, 1001, 1003, 1005, 1007, 1023, 1030, 1031], "introductori": [147, 170, 171, 176, 177, 179, 180, 184, 240, 421, 615, 626, 1026, 1029], "introspect": [43, 45, 103, 385, 563, 564, 593, 1015], "intrus": 374, "intuit": [43, 52, 67, 79, 85, 95, 126, 135, 138, 144, 164, 171, 187, 188, 215, 216, 236, 241, 273, 289, 297, 314, 317, 339, 342, 346, 354, 379, 393, 409, 411, 413, 415, 417, 649, 786, 787, 788, 791, 879, 908, 910, 911, 913, 914, 997, 1001, 1002, 1005, 1006, 1012, 1015, 1016, 1020, 1029, 1036], "inv": [109, 113, 308], "inv_boxcox": 1055, "inv_kw_arg": 872, "invalid": [2, 47, 214, 393, 449, 582, 675, 716, 778, 993, 1001, 1005, 1042, 1044, 1046, 1047, 1049, 1050, 1052, 1055], "invalidparametererror": 1005, "invalu": 1029, "invari": [75, 376, 393, 411, 421, 618, 693, 751, 822, 823, 1001, 1002, 1005, 1020, 1025, 1044, 1047, 1048, 1049], "invent": 1008, "inventor": 1007, "inventori": 1029, "invers": [2, 8, 51, 87, 108, 109, 110, 135, 184, 262, 279, 281, 295, 342, 354, 355, 371, 393, 412, 414, 415, 416, 418, 419, 423, 448, 468, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 531, 537, 538, 539, 543, 545, 547, 561, 565, 568, 593, 594, 595, 632, 648, 649, 662, 663, 670, 672, 678, 679, 680, 681, 682, 684, 728, 747, 756, 801, 802, 850, 851, 858, 859, 865, 866, 868, 872, 875, 881, 882, 884, 900, 901, 908, 909, 910, 913, 914, 916, 918, 940, 999, 1001, 1005, 1008, 1009, 1015, 1019, 1020, 1026, 1030, 1031, 1036, 1039, 1044, 1047, 1048, 1050, 1054, 1055], "inverse_components_": [900, 901, 1017, 1050], "inverse_func": [107, 187, 412, 468, 872, 1015, 1044, 1054], "inverse_transform": [44, 84, 87, 126, 166, 296, 354, 402, 416, 419, 448, 468, 485, 486, 487, 537, 538, 539, 542, 543, 544, 545, 547, 548, 585, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 634, 804, 807, 808, 818, 868, 872, 873, 875, 876, 877, 878, 879, 881, 882, 884, 885, 886, 888, 900, 901, 1015, 1016, 1017, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "invert": [113, 126, 166, 235, 354, 355, 391, 413, 419, 634, 693, 697, 1015, 1045], "invert_yaxi": [183, 355], "invest": [385, 1029], "investig": [126, 131, 135, 183, 349, 379, 405, 1001], "invok": [381, 535, 541, 543, 549, 550, 571, 573, 574, 803, 826, 829, 905, 1048, 1053], "involv": [317, 319, 321, 329, 342, 346, 366, 368, 374, 379, 393, 394, 405, 414, 421, 703, 836, 837, 1002, 1006, 1008, 1012, 1013, 1020, 1024, 1029, 1044], "invscal": [308, 680, 681, 682, 865, 866, 1019], "io": [373, 376, 379, 383, 385, 387, 393, 696, 1024, 1031, 1034], "ioangatop": 1053, "ioanni": 738, "ioerror": 1052, "iofal": 1050, "ion": 1051, "ionescu": [646, 997, 1046], "iowa": [144, 155, 251], "ipca": [2, 125, 537, 538], "ipdb": 387, "ipm": 674, "ipynb": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361], "ipython": [381, 384, 385, 387], "ipython_config": 385, "iq": 186, "iqbal": 1048, "iqr": [251, 886, 898], "ir": [244, 416, 594, 730, 760, 843, 847, 1003, 1005], "iren": [1051, 1052], "iri": [2, 50, 55, 66, 67, 69, 76, 106, 117, 120, 123, 125, 126, 131, 134, 135, 136, 137, 139, 153, 156, 162, 165, 170, 172, 175, 176, 179, 184, 192, 193, 198, 206, 207, 211, 246, 249, 255, 259, 265, 277, 278, 281, 282, 295, 301, 303, 307, 308, 314, 323, 330, 335, 337, 338, 340, 342, 344, 345, 346, 356, 357, 359, 360, 361, 372, 373, 392, 405, 411, 412, 415, 416, 418, 450, 500, 508, 545, 553, 557, 561, 568, 614, 626, 635, 680, 804, 818, 903, 904, 905, 908, 913, 916, 920, 921, 922, 994, 995, 999, 1004, 1005, 1008, 1012, 1015, 1018, 1019, 1020, 1021, 1026, 1031, 1049], "iris": [118, 278, 279], "iris_61": 373, "iris_969": 373, "iris_version_3": 373, "irreduc": [138, 1005], "irregular": [176, 346, 411, 1008], "irregularities_kernel": 176, "irrelev": [164, 199, 362, 385, 413, 418, 420, 608, 744, 1005], "irrespect": [214, 245, 266, 281, 292, 610], "irvin": 376, "is_categor": 636, "is_categorical_": [565, 566], "is_classifi": [2, 381, 393], "is_cluster": [2, 1055], "is_data_valid": [675, 1001], "is_fit": [2, 988], "is_fitted_": [425, 428, 430, 433, 434], "is_inli": [472, 567, 854], "is_leav": 361, "is_max_test_scor": 105, "is_model_valid": [675, 1001], "is_multilabel": [2, 388, 1053], "is_paramet": 992, "is_pypi": 1054, "is_regressor": [2, 393], "is_scalar_nan": 1049, "is_sh": 283, "is_split_nod": 361, "is_stationari": [179, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "isa": 57, "isaac": [1042, 1043, 1045, 1046, 1053], "isaack": 1049, "isaactrost": 1053, "isakov": 1048, "isbn": [376, 411, 1001], "isclos": 55, "isdigit": [57, 419], "ish": 69, "ishaan": 1049, "ishan": [1049, 1050], "ishank": [1041, 1042, 1043], "ishikawa": [1048, 1049], "isin": 332, "isinst": [70, 143, 232, 393], "islic": [47, 79, 95], "ism": 1040, "isn": [169, 321, 353, 355, 362, 367, 379, 383, 387, 519, 565, 566, 598, 798, 807, 808, 881, 1008, 1020, 1046, 1054], "iso": [170, 184, 226, 236, 614, 617, 618, 1026], "iso_reg": 639, "isoformat": 55, "isol": [2, 144, 151, 241, 251, 354, 377, 385, 397, 567, 854, 912, 1045, 1046], "isolationforest": [2, 134, 137, 184, 217, 241, 251, 312, 635, 834, 912, 1011, 1026, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1055], "isolationforestifittedisolationforest": 151, "isomap": [2, 51, 85, 140, 184, 233, 236, 238, 245, 302, 321, 325, 418, 506, 548, 553, 570, 693, 694, 695, 696, 857, 869, 878, 901, 1008, 1026, 1030, 1031, 1044, 1046, 1049, 1050, 1051, 1052, 1053], "isomap__n_neighbor": 321, "isometr": [234, 692, 694, 695, 696, 1002], "isoton": [2, 61, 62, 107, 184, 240, 440, 639, 640, 641, 661, 937, 1026, 1027, 1031, 1037, 1038, 1039, 1040, 1042, 1049, 1052], "isotonic_regress": [2, 639, 1049], "isotonicregress": [2, 244, 996, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1048, 1050, 1051, 1052], "isotonicregression0": 639, "isotrop": [2, 70, 88, 90, 94, 126, 173, 175, 234, 236, 411, 413, 421, 516, 523, 536, 619, 623, 624, 626, 627], "isotropi": 416, "isr": 420, "issam": [0, 1042], "issu": [0, 2, 43, 62, 110, 116, 214, 232, 277, 319, 367, 373, 382, 383, 384, 388, 391, 393, 394, 396, 397, 402, 405, 407, 411, 413, 414, 419, 452, 455, 465, 476, 485, 486, 487, 538, 543, 547, 577, 592, 593, 595, 615, 631, 695, 699, 773, 879, 881, 884, 896, 942, 995, 1002, 1013, 1015, 1020, 1024, 1025, 1028, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1053, 1054], "issuenumb": 387, "ist": 420, "isupp": 419, "isuru": 1048, "itakura": [416, 542, 544, 551, 1043], "itali": 376, "item": [2, 47, 48, 49, 50, 51, 52, 55, 66, 78, 88, 107, 139, 141, 144, 147, 155, 187, 212, 216, 222, 235, 247, 248, 250, 259, 269, 275, 279, 325, 332, 354, 372, 379, 380, 381, 388, 412, 467, 530, 565, 566, 592, 593, 595, 636, 816, 881, 903, 904, 923, 930, 958, 997, 1018, 1025], "item_idx": 312, "iter": [2, 47, 54, 55, 67, 80, 104, 113, 121, 124, 135, 138, 141, 143, 145, 146, 148, 149, 150, 169, 182, 184, 194, 195, 222, 229, 259, 260, 264, 267, 280, 283, 307, 309, 310, 314, 323, 332, 334, 335, 342, 379, 381, 385, 387, 388, 392, 393, 406, 411, 414, 416, 418, 420, 423, 440, 443, 444, 446, 448, 450, 451, 452, 455, 457, 462, 464, 465, 466, 474, 475, 481, 485, 486, 487, 519, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 563, 564, 565, 566, 568, 571, 572, 585, 586, 592, 593, 595, 597, 598, 606, 614, 631, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 842, 857, 864, 865, 866, 867, 868, 872, 879, 881, 883, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 923, 951, 952, 959, 960, 961, 962, 970, 994, 995, 1001, 1002, 1004, 1005, 1008, 1009, 1010, 1018, 1019, 1020, 1021, 1025, 1026, 1029, 1031, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055], "iter_minibatch": 47, "iter_offset": 1050, "iter_offset_": 1050, "iterated_pow": [104, 536, 539, 545, 1042], "iterative_impute_scor": 183, "iterativeimput": [2, 181, 183, 184, 383, 402, 493, 569, 584, 632, 633, 634, 643, 649, 676, 830, 851, 869, 1026, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "itergrid": 1038, "itertool": [47, 77, 79, 95, 156, 188, 202, 258, 263, 272, 279, 281, 418], "ith": [500, 778, 782, 844, 865, 866, 881, 882], "ith_cluster_silhouette_valu": 93, "itk": [1046, 1047, 1048], "its": [0, 2, 7, 25, 43, 48, 51, 52, 53, 57, 63, 64, 70, 72, 88, 98, 99, 109, 111, 113, 116, 118, 119, 126, 133, 135, 141, 143, 145, 147, 150, 160, 169, 171, 176, 178, 187, 188, 190, 192, 194, 203, 227, 231, 232, 236, 241, 248, 250, 251, 253, 255, 257, 262, 263, 266, 271, 275, 277, 279, 281, 286, 292, 294, 298, 299, 314, 324, 334, 339, 346, 351, 353, 354, 357, 361, 362, 367, 368, 372, 373, 374, 375, 379, 380, 381, 383, 384, 387, 391, 392, 393, 394, 397, 399, 402, 405, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 427, 443, 445, 447, 449, 453, 457, 459, 463, 466, 467, 468, 470, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 501, 507, 527, 535, 537, 538, 539, 541, 542, 544, 545, 546, 548, 554, 557, 559, 560, 561, 562, 563, 564, 568, 569, 570, 587, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 648, 649, 675, 676, 678, 689, 690, 691, 692, 696, 700, 703, 712, 729, 733, 734, 740, 741, 745, 782, 785, 787, 801, 802, 804, 829, 836, 837, 839, 850, 851, 852, 854, 855, 856, 858, 859, 860, 867, 868, 872, 877, 880, 881, 883, 900, 901, 904, 908, 909, 916, 918, 934, 935, 940, 947, 974, 994, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1024, 1029, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "itsaphel": 1054, "itself": [27, 61, 64, 82, 88, 135, 147, 151, 188, 199, 212, 248, 254, 266, 281, 292, 319, 342, 354, 366, 368, 378, 379, 381, 393, 402, 405, 409, 411, 422, 443, 444, 447, 448, 449, 472, 473, 474, 475, 476, 477, 478, 479, 531, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 555, 570, 573, 587, 596, 599, 600, 602, 603, 604, 606, 607, 643, 644, 645, 646, 647, 649, 659, 693, 695, 796, 797, 843, 844, 845, 846, 847, 848, 849, 853, 861, 862, 873, 874, 875, 903, 904, 961, 997, 1001, 1002, 1004, 1008, 1009, 1013, 1024, 1040, 1051], "iv": [186, 1005], "ivan": [1044, 1045, 1048, 1051, 1054], "ivanllt": 1051, "iver": 1042, "iverson": 1001, "ivicajov": 1039, "ivl": 190, "ivt": 538, "iv\u00e1n": [1043, 1049], "iwhalv": 1049, "iwona": 1053, "ix": [50, 281, 348], "iy_j": 1015, "iyer": 1047, "izadifar": 1054, "j": [0, 50, 55, 72, 73, 75, 78, 94, 102, 110, 111, 112, 135, 138, 139, 149, 167, 172, 183, 188, 226, 237, 250, 257, 271, 272, 277, 283, 296, 302, 305, 316, 326, 361, 367, 373, 374, 376, 383, 385, 391, 400, 408, 409, 411, 413, 415, 416, 418, 419, 421, 422, 440, 443, 447, 449, 456, 457, 472, 477, 502, 517, 520, 521, 522, 524, 532, 535, 538, 540, 541, 542, 544, 545, 551, 557, 563, 564, 597, 598, 636, 637, 641, 648, 649, 652, 653, 670, 671, 673, 684, 692, 693, 694, 696, 697, 698, 700, 709, 712, 714, 718, 720, 722, 725, 727, 728, 730, 759, 760, 762, 763, 778, 782, 792, 793, 796, 797, 837, 838, 845, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 879, 888, 889, 916, 917, 994, 995, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "j0rd1smit": 1048, "ja": [414, 1043], "jaccard": [2, 291, 408, 453, 460, 703, 707, 723, 733, 738, 742, 782, 783, 784, 800, 1008, 1044, 1045], "jaccard_scor": [2, 291, 707, 733, 738, 800, 1005, 1045, 1048], "jaccard_similarity_scor": [1038, 1040, 1045], "jaccarddist": 703, "jack": [1038, 1041, 1049, 1050, 1051, 1052, 1054], "jacklangerman": [1044, 1045], "jackman": 1037, "jackmartin": 1042, "jackson": [1042, 1043, 1045], "jacob": [0, 401, 1041, 1042, 1043], "jacobi": 1051, "jacobsen": 1039, "jacopo": [1044, 1045], "jacqu": [1037, 1039], "jaehong": 1046, "jaehyun": 1048, "jaewon": 1044, "jai": [1046, 1050], "jaidev": 1041, "jaim": 1046, "jain": [1042, 1043, 1044, 1048, 1050, 1051], "jair": 1043, "jake": [0, 401, 1023, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1048, 1050], "jakemick": 1038, "jakhar": 1048, "jakirkham": [1043, 1044, 1045, 1051, 1052], "jakub": 1053, "jakubek": [1049, 1050], "jalali": [0, 394, 400, 405, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "jalexand3r": 1050, "jamaoui": [1044, 1045, 1048], "jame": [0, 376, 415, 838, 1006, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053], "jamestwebb": [1038, 1039], "jami": 1044, "jamieson": 994, "jan": [0, 215, 289, 400, 887, 1036, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1052], "jana": 1046, "janet": 376, "jane\u017e": [1037, 1038], "janfidor": [1051, 1052], "janhang": 1046, "janin": 1043, "janna": 1042, "jannik": 1049, "janso": 1036, "jansson": [1039, 1051], "januari": [377, 379, 1036, 1037, 1046, 1048, 1051, 1053], "janvanrijn": [1044, 1045], "jaqu": [0, 401, 1036, 1037, 1038, 1039], "jardim": 1049, "jare": 1051, "jarfa": 1042, "jarir": 1049, "jarkko": 700, "jarosch": 1038, "jaroslaw": 1043, "jarrod": [0, 401, 1045, 1052, 1053], "jarvelin": [730, 760, 1005], "jaskowiak": 449, "jason": [44, 416, 539, 904, 1042, 1044, 1048, 1051], "jatin": [1040, 1042], "jauhar": 1050, "jauvin": 1037, "java": [411, 445], "javier": [1040, 1054], "jawahar": 997, "jax": 1053, "jay": 1043, "jaya": 1050, "jayaratn": [1047, 1048, 1051, 1052], "jayratn": 1048, "jayzed82": 1043, "jb": [1052, 1053], "jbdelafoss": 1043, "jbirch": [411, 445], "jblackburn": 1042, "jc": [1043, 1044], "jdcaballero": 1040, "jdethuren": [1044, 1045], "je": 1050, "jean": [1036, 1039, 1040, 1041, 1042, 1043, 1049], "jeann": 1050, "jeanselm": 1046, "jeb": 1044, "jeevan": 1048, "jeff": [1040, 1042, 1049, 1050], "jeffrei": [1039, 1042], "jeffrey04": [1041, 1042], "jelfner": 1050, "jell": 1039, "jen": [662, 1044], "jen09": 416, "jenatton": 416, "jenni": 1050, "jennif": 1049, "jensen": [1042, 1048], "jeong": 1046, "jeremi": [1029, 1041, 1042, 1043, 1044, 1047, 1048], "jeremiedbb": [1044, 1045, 1046], "jeremynixon": 1042, "jeroen": 1042, "jeroenpeterbo": 1048, "jeroko": 1043, "jeromedock": 1046, "jerphanion": [0, 400, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "jerryzhu": 903, "jesper": 1046, "jess": [839, 1006, 1049], "jess010": 1039, "jessica": 1042, "jessicakk0711": 1052, "jesu": [57, 353, 354], "jet": 100, "jevnik": 1041, "jewalikar": 1042, "jf": 1045, "jfraj": 1041, "jha": [1040, 1046, 1050], "jhay": 1048, "jhun": 477, "jia": 1042, "jiacheng": 1043, "jiali": 1041, "jian": 411, "jianbo": [411, 455, 465, 695], "jiang": [409, 1040, 1047], "jianzhu": 1049, "jiawei": [1052, 1053, 1054], "jiaxiang": 1048, "jie": [1044, 1045, 1048], "jiefangxuanyan": 1049, "jigna": 1048, "jihan": 1050, "jill": 1042, "jim": 1038, "jim0421": 1048, "jimenez": [1049, 1050], "jimmi": [865, 866, 1009, 1042, 1044], "jim\u00e9nez": [0, 369, 1044, 1047, 1048, 1049, 1050, 1051], "jin": [643, 1047, 1048], "jindal": 1048, "jinkun": 1044, "jiongyan": 1044, "jiquan": 1009, "jirka": 1050, "jiten": 1051, "jitendra": [411, 455, 465, 695], "jitter": [135, 654, 658, 1047], "jiyuan": 1042, "jjabl": 1044, "jjmistri": 1047, "jk": 1002, "jkarolczak": 1051, "jkleint": [1043, 1044], "jl": [245, 901], "jmlr": [0, 411, 670, 671, 680, 708, 1001, 1020], "jmlr_2014": 696, "jmontoyam": 1043, "jnboehm": 1049, "jnt": 415, "joaak": [1044, 1045], "joan": [1043, 1044, 1045, 1046], "joanna": 1046, "joaquin": 1048, "job": [150, 187, 260, 266, 379, 383, 387, 399, 418, 422, 440, 447, 449, 451, 453, 455, 460, 461, 464, 467, 470, 471, 475, 535, 539, 540, 541, 543, 546, 547, 549, 550, 552, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 606, 611, 612, 614, 638, 643, 661, 692, 693, 694, 695, 696, 697, 698, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 867, 870, 903, 904, 906, 970, 1029, 1055], "joblib": [2, 41, 77, 87, 104, 141, 292, 322, 374, 377, 379, 382, 388, 391, 393, 397, 404, 412, 422, 440, 444, 447, 448, 449, 451, 453, 455, 460, 461, 464, 467, 470, 475, 512, 513, 535, 539, 540, 541, 543, 546, 547, 549, 550, 552, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 598, 606, 611, 612, 614, 636, 638, 643, 651, 655, 657, 659, 661, 662, 663, 665, 667, 669, 670, 672, 680, 683, 692, 693, 694, 695, 696, 697, 698, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 854, 856, 858, 859, 861, 862, 867, 868, 869, 870, 903, 904, 970, 971, 974, 989, 1005, 1025, 1031, 1036, 1037, 1039, 1041, 1043, 1044, 1045, 1047, 1048, 1051, 1053, 1054, 1055], "joblib_start_method": 391, "jochen": 1038, "jock": 102, "joe": [1041, 1054], "joei": 1052, "joel": [0, 394, 400, 419, 539, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054], "johann": [1038, 1039, 1044, 1046, 1047, 1050], "johanna": [112, 1054], "johannah": 1042, "johanwork": 1049, "john": [376, 419, 540, 712, 739, 773, 883, 910, 911, 913, 914, 995, 1001, 1005, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1049, 1051, 1052, 1053, 1054, 1055], "johnathanpi": [1051, 1052], "johnson": [37, 184, 240, 312, 316, 371, 492, 506, 884, 896, 900, 901, 902, 1015, 1022, 1026, 1031, 1044, 1050, 1052], "johnson_lindenstrauss_min_dim": [2, 245, 1017, 1037], "johnston": [169, 376, 1001, 1045], "johnstott": 1044, "johnthagen": 1051, "johnwon": 316, "join": [50, 51, 57, 88, 182, 232, 272, 314, 374, 394, 466, 1028, 1036, 1044], "joint": [147, 184, 188, 193, 199, 200, 203, 213, 234, 266, 412, 615, 656, 666, 696, 843, 844, 845, 846, 847, 908, 1001, 1002, 1006, 1010, 1012, 1016, 1026, 1036], "jointli": [25, 208, 279, 411, 416, 1001], "joli": [0, 401, 1037, 1038, 1039, 1040, 1041, 1042], "jon": [353, 1043, 1046, 1047, 1049, 1050, 1053], "jona": [1048, 1053], "jonatan": 1044, "jonathan": [374, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052], "joncral": 1042, "jone": [0, 374, 401, 1036], "jong": 1043, "jonker": [408, 723], "joona": 1036, "jordal": 1042, "jordan": [411, 416, 695, 801, 1046, 1047, 1050, 1051], "jordi": 1042, "jorg": [662, 1039, 1048, 1050], "jori": [0, 400, 1043, 1044, 1045, 1048, 1049], "jose": [169, 376, 662, 1005, 1044, 1046], "joseph": [1039, 1040, 1041, 1042, 1048, 1050, 1051], "josephsalmon": [1043, 1044, 1045], "josh": [419, 1043], "joshi": [1042, 1044, 1050, 1053, 1054], "joshua": [326, 374, 1038, 1039, 1041, 1042, 1048, 1051, 1052], "joshuakennethjon": 1045, "jos\u00e9": [727, 1039, 1049, 1054], "jotasi": 1044, "joudet": [1043, 1044], "journal": [0, 112, 188, 272, 278, 289, 373, 374, 376, 409, 411, 413, 418, 455, 465, 476, 538, 545, 631, 639, 649, 693, 696, 697, 709, 719, 735, 738, 739, 762, 763, 790, 833, 838, 884, 896, 994, 995, 999, 1001, 1002, 1003, 1006, 1012, 1017, 1019, 1020], "jovan": [1050, 1051], "joydeep": 411, "jo\u00e3o": [1051, 1054], "jo\u00ebl": 1044, "jpcar": 1054, "jpeg": [373, 374, 497, 498], "jpfrancoia": [1042, 1043], "jpg": [510, 588, 591], "jpienaar": 1054, "jpm": 51, "jpmml": 1024, "jpmorgan": [51, 1029], "jr": 1001, "jrenni": 845, "jrfiedler": 1042, "jschendel": [1043, 1044], "jschuerz": 1050, "json": [52, 373, 379, 397], "jth": [778, 782], "juan": [0, 369, 1036, 1047, 1048, 1049, 1050, 1051], "juanfe88": 1051, "judg": [91, 220, 411], "judgment": [263, 1005], "judithabk6": 1047, "juergen": [1046, 1051], "jul": 281, "juli": [169, 376, 420, 738, 889, 1015, 1039, 1043, 1044, 1045, 1054], "julia": [411, 721, 741, 799], "julian": [1043, 1044, 1054], "juliankahnert": 1042, "juliaschoepp": [1051, 1052], "juliathebrav": 1042, "julien": [0, 400, 662, 1001, 1029, 1036, 1039, 1043, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "juliet": 1044, "julietcl": 1044, "julio": 1049, "julyrashchenko": 1049, "jumon": 1047, "jump": [43, 215, 312, 376, 379, 419, 887], "jumpi": 419, "june": [411, 1002, 1042, 1052], "juneja": 1054, "jung": [1043, 1047, 1051], "jungkook": 1041, "jungl": 1002, "jupyt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 380, 381, 412, 471, 906, 1021, 1024, 1025, 1047, 1050], "jupyterlit": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361], "jurgen": 1029, "juri": 570, "jurman": 747, "just": [43, 52, 67, 102, 116, 121, 141, 144, 150, 169, 204, 211, 235, 246, 266, 272, 279, 283, 292, 307, 342, 353, 354, 361, 362, 374, 378, 379, 380, 381, 383, 384, 387, 391, 392, 393, 408, 410, 411, 412, 415, 418, 420, 423, 471, 537, 539, 546, 550, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 583, 588, 614, 615, 650, 656, 661, 662, 664, 666, 670, 671, 672, 680, 681, 682, 810, 827, 857, 865, 866, 994, 1001, 1004, 1005, 1006, 1009, 1013, 1015, 1019, 1025, 1036, 1040, 1042, 1044, 1048, 1052], "justglow": 1045, "justif": 680, "justifi": [379, 385, 409, 569], "justin": [1038, 1044, 1048], "jvm": 1049, "jygerardi": [1051, 1052], "j\u00e9r\u00e9mie": [0, 400, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "j\u00e9r\u00f4me": [1045, 1046, 1047, 1053, 1054, 1055], "j\u00eann": 1042, "j\u00f6rg": [411, 453, 460, 1044], "j\u00f6rn": 1043, "j\u00f8rgensen": [1001, 1053], "k": [2, 33, 50, 51, 54, 55, 57, 61, 63, 66, 67, 71, 72, 73, 75, 77, 80, 82, 83, 86, 88, 89, 93, 96, 98, 106, 107, 111, 119, 121, 127, 128, 135, 137, 143, 147, 151, 153, 154, 156, 157, 160, 162, 165, 166, 169, 172, 174, 175, 179, 180, 183, 184, 187, 188, 189, 190, 195, 197, 198, 202, 208, 211, 226, 228, 245, 247, 249, 250, 251, 257, 260, 268, 272, 275, 276, 281, 282, 285, 286, 292, 294, 297, 298, 299, 300, 301, 303, 304, 305, 313, 314, 315, 316, 319, 321, 325, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 352, 353, 355, 361, 362, 367, 374, 376, 379, 387, 388, 391, 393, 402, 407, 408, 409, 412, 413, 414, 416, 417, 418, 419, 420, 421, 423, 443, 446, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 465, 472, 475, 491, 506, 516, 527, 535, 541, 545, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 585, 593, 594, 595, 596, 598, 599, 600, 602, 603, 604, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 635, 643, 644, 652, 654, 655, 657, 658, 659, 660, 662, 663, 667, 668, 669, 670, 671, 673, 683, 684, 686, 687, 688, 689, 690, 692, 695, 699, 700, 708, 709, 712, 721, 730, 741, 747, 760, 762, 763, 765, 770, 773, 778, 779, 780, 781, 783, 797, 798, 799, 801, 802, 805, 809, 811, 812, 813, 816, 819, 820, 822, 823, 825, 826, 832, 843, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 869, 873, 874, 875, 879, 880, 881, 883, 884, 888, 896, 901, 915, 923, 937, 947, 952, 978, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1007, 1009, 1010, 1011, 1013, 1018, 1019, 1020, 1021, 1024, 1026, 1030, 1031, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1054], "k0": 999, "k1": [421, 625, 628], "k1__": 421, "k1__constant_valu": 175, "k1__k1": 421, "k1__k1__constant_valu": 421, "k1__k1__constant_value_bound": 421, "k1__k2": 421, "k1__k2__length_scal": [177, 421], "k1__k2__length_scale_bound": 421, "k2": [421, 625, 628], "k2__": 421, "k2__length_scal": 421, "k2__length_scale_bound": 421, "k_": [408, 421, 620, 623, 625, 628, 778, 997, 1015], "k_1": [2, 421, 625, 628], "k_2": [2, 421, 625, 628], "k_best": [596, 905, 1018, 1053], "k_diag": [616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "k_fit_all_": 874, "k_fit_rows_": 874, "k_fold": 160, "k_gradient": [616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629], "k_init": [446, 462], "k_mean": [2, 97, 388, 393, 1044, 1052], "k_means_cluster_cent": 97, "k_means_elkan": 1044, "k_means_label": 97, "k_new": 874, "k_ret": [848, 849], "k_true": [848, 849], "ka00ri": [1051, 1052], "kachaiev": 1053, "kaczmarzyk": 1053, "kadatatlu": 1049, "kadota": 1050, "kaggl": [155, 392], "kahni": 1048, "kai": [376, 567, 1011, 1043], "kaicheng": 1040, "kaichogami": 1042, "kailasa": [1050, 1051], "kaim": [865, 866], "kaiser": [416, 536], "kakati": 1051, "kalli": [1044, 1045], "kalyan": 1042, "kamalakerdadi": [1041, 1042], "kamar": 1044, "kamchyev": 1053, "kamel": 1036, "kamishima": [1042, 1043], "kamm": 1005, "kanai": [1042, 1043, 1044], "kanazu": [1051, 1052], "kanchimo": 1054, "kang": [1044, 1046], "kania": [1051, 1052], "kanika": 1046, "kanishk": 1051, "kanissh": 1051, "kanji": 1049, "kanniah": [1039, 1040], "kansal": 1042, "kapadni": 1051, "kapeln": [188, 1012], "kapoor": [1044, 1045], "kappa": [2, 540, 720], "kapur": 1043, "kar": 1042, "karan": [1043, 1044, 1045], "karayev": 1038, "karbownik": 1049, "karen": 1049, "karger": [845, 1007], "karhunen": 538, "karin": [631, 995], "karl": 1044, "karlo": [1053, 1054], "karnofski": 1043, "karnowski": 1048, "karol": 1039, "kartik": 1048, "karypi": 411, "kaseorg": 1046, "kashif": 1041, "kasim": 1040, "kaski": 700, "kasper": 1044, "kassa": [1051, 1052], "kastner": [0, 401, 1038, 1039, 1040, 1047, 1048], "kat": 1043, "kataev": [1044, 1045], "kataki": [724, 738, 744, 1005], "katarina": [1046, 1048], "katheleen": 373, "kathi": [1043, 1046], "kathleen": 1043, "kathryn": 1047, "kati": 1043, "katotten": 1050, "katrin": [1044, 1045], "katrina": 1047, "katriopla": 1044, "katyal": 1046, "katz": [1041, 1048, 1049], "kaufmann": [1017, 1021, 1048], "kaushik": [1043, 1050, 1051, 1052, 1054], "kaushik94": 1039, "kawamura": 1049, "kawwa": 1049, "kayawari": 1049, "kaylani2": 1048, "kaynak": 376, "kazmar": 1040, "kb": [103, 187, 188, 266], "kbest": [104, 596], "kbin": [319, 326], "kbinsdiscret": [2, 43, 86, 119, 184, 195, 214, 232, 252, 311, 314, 319, 326, 516, 661, 871, 887, 917, 1015, 1026, 1044, 1048, 1049, 1050, 1052, 1054], "kbinsdiscretizer__n_bin": 314, "kcachegrind": 382, "kd": [297, 411, 417, 1008, 1044, 1045, 1046], "kd_tree": [422, 447, 449, 453, 460, 692, 693, 850, 851, 852, 853, 854, 856, 858, 859, 860, 1008, 1049, 1053], "kdd": [192, 374, 409, 440, 1017], "kdd06_rp": 901, "kddcup": [251, 372, 496, 1031], "kddcup99": [2, 374, 496], "kde": [186, 187, 286, 289, 296, 297, 305, 417, 853], "kdt": 1008, "kdtree": [2, 449, 453, 460, 692, 693, 848, 850, 851, 852, 853, 854, 856, 858, 859, 860, 1038, 1040, 1044, 1048, 1049, 1052, 1053], "ke": [418, 1047, 1048], "kearn": 1039, "keat": [1051, 1052], "keep": [0, 45, 52, 64, 77, 107, 124, 126, 141, 150, 168, 177, 182, 186, 187, 188, 189, 190, 199, 214, 215, 216, 222, 232, 255, 262, 267, 270, 316, 317, 324, 332, 342, 353, 354, 357, 362, 366, 367, 371, 379, 383, 392, 393, 409, 411, 412, 413, 414, 415, 416, 434, 453, 468, 485, 486, 487, 488, 497, 498, 538, 544, 545, 548, 551, 558, 560, 562, 564, 566, 569, 572, 574, 599, 602, 604, 607, 615, 638, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 680, 681, 682, 683, 712, 822, 841, 842, 851, 859, 865, 866, 904, 909, 911, 914, 917, 919, 1001, 1006, 1010, 1013, 1015, 1025, 1028, 1029, 1031, 1036, 1041, 1044, 1045, 1049, 1050, 1052, 1054], "keep_empty_featur": [631, 632, 634, 995, 1051, 1055], "keerti": 1051, "kegl": 1040, "kei": [2, 47, 49, 52, 55, 77, 141, 144, 155, 182, 186, 232, 248, 251, 254, 273, 275, 276, 322, 323, 324, 325, 326, 327, 328, 329, 368, 372, 381, 384, 385, 386, 391, 393, 394, 397, 402, 411, 412, 415, 421, 467, 475, 565, 566, 571, 572, 573, 574, 592, 595, 598, 621, 630, 636, 638, 663, 715, 804, 807, 808, 816, 818, 826, 831, 867, 868, 923, 939, 969, 1013, 1025, 1031, 1033, 1042, 1048, 1049, 1051, 1052, 1054], "keith": [353, 1036, 1041], "kekalainen": [730, 760, 1005], "kelkar": [1043, 1044, 1046], "kelleh": [712, 1005], "kelleher2015": 1005, "kellei": [374, 1038, 1039], "keller": 1048, "kellogg": 51, "kellycarmodi": 1046, "kemal": [0, 1038, 1039], "kemenad": 1047, "kemk": 1047, "ken": [376, 1038, 1045], "ken4git": 1050, "kendal": 1051, "kendrick": 1048, "kennedi": [1043, 1046, 1053], "kennel": 1047, "kenneth": [1017, 1036, 1037, 1042, 1043, 1050, 1051], "kenni": 1048, "kensuk": 1046, "kent": 57, "kenta": 1039, "kento": [1051, 1052], "kept": [64, 262, 292, 349, 373, 405, 421, 500, 539, 542, 544, 545, 551, 601, 614, 615, 623, 624, 648, 699, 801, 802, 935, 1015, 1044, 1045], "kera": [391, 1024], "kerimov": [1043, 1044], "kernal": 126, "kernc": [1036, 1050, 1051], "kernel": [2, 23, 24, 27, 42, 45, 48, 49, 50, 66, 67, 68, 84, 106, 116, 120, 122, 130, 133, 156, 162, 167, 170, 172, 173, 174, 175, 178, 182, 197, 198, 215, 228, 240, 241, 249, 253, 265, 270, 272, 274, 277, 278, 282, 287, 293, 298, 303, 317, 324, 333, 336, 337, 339, 340, 342, 343, 344, 345, 347, 350, 362, 366, 371, 381, 391, 393, 399, 409, 411, 412, 415, 418, 419, 434, 443, 451, 455, 464, 465, 468, 485, 486, 487, 494, 500, 502, 506, 508, 518, 537, 538, 539, 545, 548, 558, 560, 562, 564, 566, 569, 572, 574, 597, 598, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 635, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 680, 681, 682, 683, 692, 694, 695, 696, 699, 739, 762, 763, 765, 770, 771, 778, 779, 780, 781, 804, 810, 815, 818, 834, 836, 841, 842, 848, 849, 851, 853, 859, 866, 868, 869, 874, 878, 880, 881, 883, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 917, 919, 925, 994, 1000, 1001, 1002, 1005, 1006, 1008, 1011, 1018, 1019, 1026, 1027, 1030, 1031, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "kernel_": [171, 172, 173, 174, 175, 176, 177, 178, 180, 614, 615], "kernel__length_scal": 171, "kernel__period": 171, "kernel_approxim": [2, 43, 182, 184, 191, 192, 228, 241, 246, 323, 642, 643, 644, 645, 646, 681, 762, 763, 874, 997, 1026, 1037, 1043, 1053], "kernel_dens": [848, 849], "kernel_label": 348, "kernel_metr": [2, 643, 644, 645, 646], "kernel_param": [455, 539, 643, 647], "kernel_pca": [44, 126, 412], "kernel_pca_": 692, "kernel_pca_back_proj_ax": 126, "kernel_pca_proj_ax": 126, "kernel_ridg": [2, 171, 247, 647, 1006, 1040], "kernel_ridge_tun": 171, "kernel_svm": 246, "kernel_svm_scor": 246, "kernel_svm_tim": 246, "kernelapproximationkernel": 399, "kernelcenter": [2, 407, 1015, 1046, 1050, 1052, 1053], "kerneldens": [2, 296, 297, 305, 417, 1038, 1044, 1045, 1049, 1050, 1051], "kernelpca": [2, 44, 412, 416, 537, 538, 545, 548, 692, 694, 696, 874, 1015, 1037, 1038, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "kernelridg": [2, 126, 171, 247, 676, 998, 1006, 1040, 1053], "kertesz": 1050, "keshat": [670, 671, 1001], "keshavan": 1046, "kesshi": [1046, 1047], "kevad": 1046, "kevin": [647, 1038, 1040, 1042, 1043, 1046, 1047, 1048, 1050, 1051, 1053], "kevlani": 1044, "keyber": 1054, "keyerror": [923, 1046], "keyword": [353, 373, 379, 381, 384, 386, 393, 411, 422, 425, 441, 447, 448, 453, 455, 460, 467, 470, 500, 507, 539, 542, 544, 563, 564, 571, 572, 573, 574, 624, 635, 636, 643, 647, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 692, 696, 701, 702, 703, 704, 705, 706, 778, 782, 783, 784, 785, 796, 797, 810, 827, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 868, 872, 947, 971, 994, 1002, 1005, 1008, 1018, 1036, 1040, 1042, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1053, 1054], "kf": [415, 809], "kfold": [2, 87, 141, 146, 160, 267, 277, 362, 415, 440, 475, 571, 572, 598, 606, 651, 655, 657, 659, 665, 667, 669, 677, 804, 807, 808, 810, 812, 814, 818, 823, 825, 827, 828, 829, 830, 831, 832, 833, 835, 839, 842, 889, 1037, 1038, 1039, 1041, 1042, 1044, 1046, 1054], "khaja": 1051, "khan": [1051, 1052], "khandelw": 1048, "khanduja": 1039, "khant": 1051, "kharsa": 1050, "khedkar": 1050, "khine": 1050, "kho": 1051, "khoo": 1048, "khosasi": 1049, "khosrow": 1005, "khoual": 1049, "khwaja": 1051, "ki": 1005, "kian": [1041, 1051, 1052, 1053], "kid": 1015, "kieker": [1044, 1045], "kielczewski": 1042, "kie\u00dfl": 1047, "kilian": [419, 1051, 1052], "kill": [353, 391], "killer": [379, 1029], "kilobyt": 86, "kilomet": 768, "kim": [1001, 1044, 1045, 1046, 1050], "kimayoung": 1050, "kimberli": 51, "kimbinyi": 1048, "kind": [43, 48, 51, 52, 61, 62, 107, 129, 141, 155, 164, 187, 188, 262, 265, 266, 268, 281, 319, 323, 326, 339, 342, 353, 367, 368, 372, 374, 379, 381, 385, 391, 392, 409, 411, 414, 415, 416, 418, 419, 420, 491, 492, 507, 512, 513, 525, 528, 592, 636, 637, 705, 944, 1001, 1007, 1012, 1021, 1039, 1048, 1050, 1051, 1052], "king": 939, "kingjr": 1042, "kingma": [865, 866, 1009], "kink": 203, "kiragu": 1048, "kiran": 1048, "kirandevraj": 1051, "kiril": [1043, 1044, 1046, 1048], "kirkbi": [1043, 1044], "kirkham": [1041, 1042, 1044], "kirthi": 1046, "kishan": 1053, "kishimoto": 1048, "kishor": 1049, "kislovskii": 1053, "kit": 391, "kitchen": [645, 997], "kj": [373, 1007], "kjell": 1042, "kk": 1005, "kl": [416, 1002, 1044], "kl_divergence_": [696, 1043], "klarup": 1043, "klass": 98, "klau": [416, 539, 874], "kleczewski": [1043, 1044], "kleiber": 1050, "klevebr": 1044, "klima": 1051, "klopfer": 1045, "kluge": [1051, 1052], "kluger": [2, 408, 454, 517], "klusacek": 1005, "km": [94, 325, 354], "kmatt10": 1049, "kmb": 51, "kmean": [2, 57, 58, 71, 78, 80, 83, 86, 90, 91, 94, 184, 260, 263, 315, 325, 354, 388, 402, 411, 437, 438, 439, 443, 446, 451, 452, 455, 465, 516, 714, 796, 797, 801, 802, 873, 1008, 1015, 1025, 1026, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "kmeans_estim": 121, "kmeans_model": 411, "kmeans_plusplu": [2, 92, 411, 1048, 1053], "kmode": 1024, "kms15": [1044, 1045], "knee": 411, "kneighbor": [317, 325, 850, 851, 852, 854, 856, 1008, 1040, 1045, 1049, 1050, 1051, 1052], "kneighbors_graph": [2, 74, 79, 95, 100, 292, 393, 411, 444, 448, 699, 850, 851, 852, 854, 856, 858, 859, 860, 862, 1008, 1036, 1040, 1045], "kneighborsclassifi": [2, 67, 156, 161, 294, 295, 300, 301, 317, 323, 325, 353, 418, 606, 851, 855, 856, 857, 858, 859, 1006, 1008, 1036, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "kneighborsclassifierkneighbor": 399, "kneighborsregressor": [2, 182, 250, 304, 325, 418, 574, 850, 856, 858, 859, 1006, 1008, 1036, 1038, 1040, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "kneighborstransform": [2, 292, 294, 321, 696, 860, 1008, 1046, 1050, 1051], "knight": 318, "knn": [138, 156, 161, 182, 295, 300, 301, 304, 317, 323, 333, 353, 418, 606, 857, 903, 904, 1008, 1018, 1042], "knn__weight": 295, "knn_graph": 74, "knn_impute_scor": 183, "knnimput": [2, 183, 321, 631, 634, 995, 1046, 1047, 1050, 1051, 1052, 1053, 1055], "knnquerybatch": 292, "knot": [43, 215, 324, 887, 1015, 1049], "know": [86, 99, 166, 169, 171, 180, 187, 232, 248, 249, 266, 272, 285, 289, 291, 325, 331, 349, 354, 366, 379, 391, 402, 405, 411, 414, 415, 416, 419, 504, 508, 514, 650, 656, 662, 663, 730, 760, 804, 818, 893, 894, 896, 897, 898, 899, 916, 917, 918, 919, 994, 1004, 1005, 1006, 1008, 1017, 1042, 1043, 1046, 1048], "knowledg": [90, 150, 187, 231, 251, 266, 272, 285, 286, 374, 379, 382, 385, 392, 393, 411, 415, 418, 422, 447, 515, 559, 560, 567, 724, 740, 744, 787, 837, 1005, 1006, 1017, 1054], "known": [2, 50, 55, 62, 64, 74, 82, 90, 91, 112, 129, 130, 155, 176, 178, 183, 199, 214, 215, 232, 241, 266, 272, 274, 281, 301, 305, 313, 324, 329, 331, 339, 346, 354, 368, 374, 376, 377, 379, 387, 391, 393, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 421, 441, 466, 485, 487, 502, 512, 513, 548, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 592, 593, 595, 598, 613, 626, 637, 662, 663, 676, 686, 687, 698, 708, 714, 717, 722, 733, 747, 759, 761, 799, 837, 843, 844, 845, 846, 847, 850, 855, 858, 864, 892, 916, 917, 918, 919, 952, 995, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1020, 1021], "known_val": 631, "knox": 1048, "knp": 631, "knr": 418, "knyazev": [411, 455, 465, 699, 1046, 1049, 1050], "ko": [51, 63, 172], "kobak": [696, 1049], "kobaski": 1049, "kobayashi": [1048, 1049], "kober": 1044, "kobi": 739, "koch": [1038, 1044, 1045, 1047, 1048], "kocot": 1047, "koehler": 1040, "koen": [1044, 1045], "koenker": [727, 1001], "koh": [1001, 1029], "kohavi": 415, "kohli": [1053, 1054], "koi8": 419, "koivunen": 112, "kokhlikyan": [1043, 1044], "koki": 1048, "koko": [1044, 1050, 1051], "kolawol": 1049, "kolganov": 1041, "kolh": 1038, "kolstad": 57, "komarov": 1054, "komey": [1050, 1051], "kommireddi": 1050, "kondratyev": 1050, "kong": 1049, "konstantin": [1041, 1042, 1043], "konstantino": [1044, 1053], "konwar": 1047, "koonc": 1044, "korba": 374, "korean": 1024, "kornel": 1042, "kornev": 1051, "korobko": [1053, 1054, 1055], "korobov": [1037, 1038, 1039, 1042, 1043], "korolev": 1046, "kosic": 1048, "kosobrodov": 1044, "kossaifi": [1036, 1040, 1041], "kossen": [1051, 1052], "kossori": [1044, 1045], "kostelac": [1051, 1052], "kot271828": 1049, "kothari": 1047, "kotwalia": [1044, 1045], "koumenti": 1051, "koushik": 1050, "koustav": [1053, 1054], "kovalevskyi": 1042, "kowalski87": 1039, "koyama": 1050, "kozachenko": [611, 612], "kozynet": [1048, 1050], "kpca": [2, 537, 538, 539, 1030, 1031, 1036], "kr": [247, 272, 1050], "kr_fit": 247, "kr_predict": 247, "kraig": 1051, "kraktu": 1054, "kranthi": 1050, "kranz": 1029, "kraskov": [611, 612], "krasouli": [1043, 1044, 1045, 1046, 1048, 1049], "kratzwald": 1042, "krawczyk": 1050, "krawutschk": [1051, 1052], "krell": [1040, 1042], "kriegel": [411, 422, 447, 453, 460, 854, 1011], "krinitsyn": 1044, "krishna": [1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051], "krishnachaitanya9": 1047, "krishnakalyan3": 1042, "krishnan": 1046, "krivich": [1042, 1043, 1045], "kronovet": 1041, "krr": [247, 647, 998], "krsto": 1054, "krum": [1048, 1050], "krumetoft": 1050, "krump": 1041, "kruskal": [639, 694, 698, 1002], "krzeminski": 1043, "krzysztof": 373, "ksemb": 1044, "kshitij": [1051, 1052, 1054], "ksvd": [668, 689, 690, 1001], "ksvm": 192, "ksvm_score": 192, "ksvm_time": 192, "kth": [57, 825], "ku": [1040, 1041], "kuai": [1044, 1045], "kubin": 1047, "kuhlmann": [1043, 1044], "kulbear": 1045, "kulkarni": 1044, "kull": [409, 1005], "kullback": [54, 234, 416, 542, 544, 551, 696, 1002, 1043], "kulsinski": [453, 460, 703, 782, 783, 784], "kulsinskidist": [703, 1052], "kumar": [0, 169, 374, 401, 411, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "kumaresshan": [1044, 1045, 1048], "kumawat": 1050, "kund": [1052, 1053], "kunj": 1049, "kuno": 1054, "kuo": 1040, "kurumeyuta": 1049, "kurz": [1050, 1051], "kusanagi": [1047, 1049], "kusanagi2": 1048, "kushal": [1044, 1045], "kushan": 1053, "kushwah": [1052, 1053], "kushwaha": 1048, "kusterl": 1046, "kuth": 1042, "kvam": [1037, 1039], "kvle": 1042, "kw_arg": [140, 872, 1015, 1042], "kwarg": [76, 124, 248, 381, 386, 425, 429, 433, 441, 445, 451, 453, 467, 472, 539, 542, 544, 567, 635, 650, 651, 656, 657, 664, 665, 666, 667, 681, 685, 688, 702, 703, 704, 706, 746, 867, 868, 872, 912, 923, 964, 970, 972, 993, 1043, 1047, 1049, 1053], "kwd": [775, 778, 782, 785, 796, 797], "kwei": [1039, 1040, 1041, 1042, 1043], "kxytim": 1049, "kybernetika": 376, "kye": 1044, "kyeongpil": 1044, "kyle": [0, 401, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048], "kyledrogo": 1044, "kyler": 1041, "k\u00e4rkk\u00e4inen": 1001, "l": [0, 46, 53, 55, 75, 80, 81, 99, 100, 112, 138, 169, 189, 206, 209, 218, 223, 224, 277, 278, 279, 289, 308, 316, 349, 376, 377, 385, 387, 408, 409, 411, 415, 416, 418, 421, 477, 520, 521, 522, 542, 544, 551, 559, 560, 561, 562, 569, 570, 594, 611, 612, 614, 615, 619, 623, 626, 627, 638, 652, 653, 662, 673, 676, 678, 684, 691, 693, 696, 697, 709, 719, 729, 730, 735, 760, 790, 845, 879, 916, 917, 918, 919, 994, 999, 1001, 1002, 1005, 1007, 1008, 1009, 1013, 1017, 1019, 1021, 1039, 1044, 1048, 1049, 1050, 1051, 1053], "l1": [2, 25, 42, 46, 55, 66, 75, 99, 113, 115, 184, 193, 194, 200, 201, 202, 203, 208, 218, 225, 229, 243, 273, 285, 292, 309, 324, 388, 391, 411, 413, 416, 444, 448, 453, 460, 467, 472, 473, 474, 475, 476, 477, 478, 479, 481, 500, 506, 508, 535, 541, 542, 543, 544, 546, 547, 551, 552, 562, 569, 593, 594, 595, 601, 648, 649, 650, 651, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 676, 680, 681, 682, 683, 685, 692, 739, 766, 772, 777, 782, 783, 784, 789, 818, 825, 834, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 880, 888, 895, 908, 909, 915, 917, 919, 937, 986, 1001, 1003, 1005, 1008, 1015, 1019, 1020, 1021, 1026, 1041, 1043, 1049, 1052], "l1_color": 225, "l1_contour": 225, "l1_distanc": 1036, "l1_min_c": [2, 207, 1001, 1020, 1036], "l1_plot": 230, "l1_ratio": [46, 49, 54, 199, 202, 205, 280, 285, 366, 391, 416, 542, 544, 551, 650, 651, 656, 662, 663, 664, 665, 666, 667, 672, 680, 682, 685, 1001, 1019, 1037, 1039, 1041, 1048, 1050], "l1_ratio_": [651, 663, 665], "l1_ratios_": 663, "l2": [2, 53, 66, 75, 113, 115, 184, 186, 187, 193, 194, 199, 202, 205, 207, 210, 214, 219, 225, 229, 230, 232, 273, 285, 292, 312, 319, 335, 353, 354, 381, 388, 391, 411, 413, 416, 418, 419, 444, 448, 453, 460, 528, 542, 544, 551, 562, 565, 566, 569, 593, 594, 595, 647, 650, 651, 652, 653, 656, 661, 662, 663, 664, 665, 666, 667, 672, 673, 676, 680, 682, 684, 685, 690, 691, 692, 739, 754, 765, 766, 782, 783, 784, 818, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 865, 866, 880, 888, 895, 908, 909, 913, 914, 915, 917, 919, 987, 994, 998, 1001, 1003, 1008, 1009, 1015, 1019, 1021, 1026, 1038, 1040, 1041, 1043, 1045], "l2014": 418, "l2_color": 225, "l2_contour": 225, "l2_regular": [324, 418, 565, 566], "l_": [408, 615, 656, 745, 1005], "l_i": 1015, "l_inf": 55, "l_m": 418, "l_p": [453, 460, 692, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862], "l_x": 53, "la": [0, 318, 376, 400, 1029, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "lab": [0, 374, 471, 540, 906, 1029, 1047], "labb\u00e9": 1054, "label": [2, 30, 38, 43, 45, 46, 48, 50, 51, 52, 53, 58, 61, 62, 63, 64, 66, 68, 69, 73, 75, 77, 78, 80, 81, 82, 84, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 105, 107, 109, 110, 111, 112, 115, 116, 119, 123, 125, 127, 128, 129, 130, 135, 136, 137, 138, 139, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 158, 165, 167, 171, 172, 176, 177, 178, 179, 180, 182, 184, 187, 190, 192, 194, 195, 197, 198, 199, 201, 203, 204, 208, 214, 215, 216, 217, 220, 221, 222, 223, 224, 228, 229, 231, 232, 235, 236, 237, 241, 242, 246, 247, 249, 251, 252, 259, 265, 266, 267, 270, 271, 273, 274, 275, 276, 278, 281, 282, 283, 284, 285, 286, 287, 291, 297, 299, 301, 304, 308, 310, 312, 313, 317, 321, 322, 325, 328, 330, 334, 335, 336, 344, 346, 348, 349, 353, 354, 357, 358, 359, 360, 368, 371, 372, 373, 378, 379, 381, 383, 384, 388, 393, 394, 408, 409, 410, 421, 422, 428, 429, 433, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 465, 468, 472, 490, 491, 492, 497, 498, 499, 500, 506, 507, 512, 513, 516, 518, 519, 523, 526, 527, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 573, 574, 596, 597, 598, 599, 600, 602, 603, 604, 608, 609, 610, 613, 614, 635, 662, 663, 670, 671, 672, 677, 678, 679, 680, 681, 682, 701, 702, 704, 706, 707, 708, 709, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 726, 729, 730, 731, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 758, 759, 760, 761, 786, 787, 788, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 818, 819, 820, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 854, 855, 857, 858, 865, 866, 868, 872, 875, 876, 879, 881, 882, 889, 892, 903, 904, 905, 908, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 924, 928, 934, 939, 940, 967, 968, 975, 994, 1001, 1002, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1019, 1020, 1021, 1024, 1026, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "label1": 393, "label2": 393, "label_a": 281, "label_b": 281, "label_binar": [2, 279, 281, 875, 1040], "label_binarizer_": 837, "label_distributions_": [331, 332, 903, 904, 1047], "label_im": 99, "label_out": 78, "label_pr": [721, 740, 741, 759, 761, 799], "label_prop_model": [903, 904], "label_propag": 1037, "label_ranking_average_precision_scor": [2, 1005, 1040, 1044, 1045, 1051], "label_ranking_loss": [2, 1005, 1041], "label_spread": 333, "label_tru": [708, 721, 741, 759, 761, 799], "labelbinar": [2, 281, 393, 726, 745, 837, 872, 881, 889, 892, 1006, 1039, 1040, 1041, 1045, 1050], "labelbottom": [158, 272], "labeled_iter_": [334, 905], "labelencod": [2, 393, 573, 882, 1016, 1036, 1044, 1051, 1052, 1055], "labeling1": 1005, "labeling2": 1005, "labelkfold": [1041, 1042], "labelleft": 257, "labelpad": 272, "labelpropag": [2, 325, 333, 904, 905, 1006, 1018, 1037, 1042, 1043, 1046, 1047, 1048, 1050, 1051, 1052], "labels": [54, 316], "labels_": [73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 88, 91, 94, 95, 96, 98, 100, 325, 327, 354, 379, 393, 411, 429, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 714, 1041], "labels_050": 98, "labels_200": 98, "labels_a": 72, "labels_b": 72, "labels_pr": [411, 708, 709, 718, 719, 721, 735, 740, 741, 759, 761, 790, 799], "labels_tru": [73, 82, 88, 97, 411, 708, 709, 718, 719, 721, 735, 740, 741, 759, 761, 790, 799], "labels_uniqu": 96, "labelshufflesplit": [1041, 1042], "labelspread": [2, 325, 331, 332, 333, 335, 336, 903, 905, 1006, 1018, 1037, 1042, 1043, 1046, 1047, 1050, 1051, 1052], "labelspreadingifittedlabelspread": 333, "labex": 0, "labl": 150, "laboratori": [374, 1024], "lacchia": 1043, "lack": [43, 64, 346, 379, 391, 415, 833, 923, 1020, 1050], "lacost": [662, 1001], "lacouth": 1049, "lacrosse91": 1049, "lad": 1049, "lag": [42, 43, 147, 150, 184, 216, 495, 566, 705, 746, 749, 750, 752, 794, 825, 830, 831, 834, 1026], "lagacheri": 1040, "lagard": 1039, "lagat": 1046, "lagged_count_": 52, "lagged_count_1d": 52, "lagged_count_1d_1h": 52, "lagged_count_7d": 52, "lagged_count_7d_1h": 52, "lagged_df": 52, "lagged_max_24h": 52, "lagged_max_7d": 52, "lagged_mean_24h": 52, "lagged_mean_7d": 52, "lagged_min_24h": 52, "lagged_min_7d": 52, "lai": [51, 317, 346, 1011], "laid": [0, 186, 379], "lakhotia": [1046, 1047], "lakshmi": 1046, "lakshmikanth": 1043, "lakshya": [1044, 1045, 1046], "lal": 904, "lalliacqua": [1046, 1049], "lam": [322, 323, 1047, 1054], "lama": 498, "lamb": [1041, 1049], "lambda": [43, 46, 47, 49, 57, 89, 146, 195, 232, 272, 273, 316, 335, 405, 407, 411, 416, 418, 419, 648, 649, 650, 651, 872, 884, 997, 1001, 1015, 1044, 1050], "lambda_": [195, 648, 649, 884, 1001, 1043], "lambda_1": [648, 649, 1001], "lambda_2": [648, 649, 1001], "lambda_i": [1001, 1015], "lambda_init": [194, 195, 649, 1001, 1046], "lambdas_": [316, 884, 1049, 1052], "lami": 1044, "lamond": 1040, "lamp": 1029, "lamu": 1042, "lan": [662, 1051, 1052], "land": [50, 305, 383, 394, 418], "land_mask": 305, "land_refer": [50, 305], "landeau": 1053, "landmark": [885, 897, 1015], "landscap": 172, "lane": 1042, "langford": [419, 692, 1002], "langl": [997, 1005, 1019, 1020], "languag": [0, 355, 384, 416, 419, 1019, 1024, 1025, 1029], "language_level": 380, "lanigan": 1043, "lanl": 55, "lannuzel": 1048, "lanterni": 1050, "lanzani": 1042, "lapack": [366, 367, 377, 536, 539, 545, 692, 1051], "lapack_lit": 385, "lapack_svd_driv": 1051, "laplac": [2, 172, 421, 614, 615, 843, 844, 845, 847, 1007], "laplacian": [2, 234, 371, 408, 443, 455, 465, 624, 643, 647, 695, 699, 769, 770, 778, 904, 1001, 1002, 1018, 1031, 1037, 1042], "laplacian_kernel": [2, 769, 1003, 1041], "laptop": [52, 387, 471, 906, 1050, 1051, 1052], "lar": [0, 2, 124, 169, 184, 193, 199, 200, 203, 205, 208, 376, 401, 474, 475, 481, 505, 535, 541, 543, 546, 547, 549, 550, 552, 655, 656, 657, 658, 659, 660, 667, 668, 669, 682, 685, 686, 687, 688, 689, 690, 1006, 1026, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1049, 1054], "laradji": [0, 1042], "larg": [0, 2, 38, 43, 51, 52, 53, 59, 63, 64, 72, 74, 78, 81, 82, 83, 85, 86, 88, 105, 107, 121, 125, 138, 140, 141, 147, 150, 151, 153, 165, 176, 177, 189, 190, 194, 195, 203, 205, 214, 216, 218, 219, 220, 232, 246, 251, 266, 269, 275, 278, 281, 294, 301, 309, 312, 314, 324, 325, 328, 342, 347, 349, 354, 355, 366, 374, 379, 385, 388, 391, 392, 393, 397, 405, 411, 413, 415, 416, 417, 418, 420, 422, 424, 445, 447, 449, 450, 453, 454, 455, 456, 461, 465, 476, 478, 503, 518, 538, 540, 542, 544, 545, 548, 551, 553, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 586, 593, 638, 645, 647, 650, 651, 654, 656, 657, 658, 661, 662, 663, 668, 675, 676, 678, 681, 683, 689, 691, 693, 695, 696, 697, 699, 750, 783, 784, 804, 812, 814, 818, 822, 833, 843, 844, 845, 846, 847, 848, 849, 854, 865, 866, 873, 877, 878, 886, 888, 900, 901, 908, 909, 913, 914, 916, 917, 918, 919, 951, 952, 994, 997, 999, 1001, 1002, 1004, 1007, 1008, 1009, 1013, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "larger": [43, 46, 64, 72, 74, 77, 81, 88, 111, 113, 119, 130, 138, 148, 150, 172, 177, 178, 183, 187, 188, 192, 195, 199, 229, 230, 231, 239, 245, 247, 257, 263, 266, 273, 275, 281, 282, 289, 292, 294, 307, 308, 310, 312, 342, 346, 354, 355, 372, 374, 379, 385, 393, 408, 409, 411, 412, 413, 415, 416, 418, 419, 421, 443, 446, 452, 453, 455, 457, 459, 519, 531, 545, 548, 565, 566, 567, 571, 572, 586, 593, 647, 656, 676, 677, 678, 679, 683, 691, 696, 708, 723, 740, 801, 853, 854, 885, 887, 888, 889, 897, 902, 951, 952, 975, 978, 997, 998, 1001, 1002, 1004, 1005, 1008, 1009, 1013, 1015, 1019, 1020, 1040, 1041, 1044, 1045, 1046, 1049, 1050, 1053, 1054, 1055], "largest": [113, 123, 141, 169, 216, 376, 411, 413, 416, 446, 531, 545, 561, 562, 563, 564, 568, 569, 592, 713, 801, 802, 823, 846, 878, 916, 917, 918, 919, 952, 1002, 1005, 1015, 1020, 1021], "largest_clust": [411, 446], "largest_coef": [113, 531], "larrald": 1053, "lars_path": [2, 202, 388, 535, 541, 543, 546, 547, 549, 550, 552, 654, 655, 656, 657, 658, 659, 660, 667, 668, 669, 687, 688, 689, 690, 1001, 1036, 1038, 1041, 1045, 1047], "lars_path_gram": [2, 686, 1001, 1045], "larscv": [2, 402, 654, 669, 686, 687, 1043, 1049, 1053], "larson": [1041, 1045, 1046, 1048, 1050], "larsson": [1048, 1049, 1050], "lasagna": 1042, "laska": 1042, "lasso": [2, 42, 55, 99, 130, 155, 160, 184, 187, 193, 205, 213, 222, 262, 324, 328, 349, 366, 391, 413, 414, 416, 418, 419, 420, 474, 475, 481, 505, 528, 535, 541, 543, 546, 547, 549, 550, 552, 601, 650, 651, 653, 654, 655, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 674, 676, 682, 685, 686, 687, 688, 689, 690, 725, 727, 728, 829, 830, 831, 869, 888, 994, 1005, 1006, 1019, 1026, 1027, 1031, 1036, 1040, 1041, 1042, 1044, 1045, 1047, 1049, 1050, 1054], "lasso_cd": [535, 541, 546, 552], "lasso_cv": 160, "lasso_lar": [130, 535, 541, 546, 552, 1046], "lasso_lars_": [201, 203], "lasso_path": [2, 202, 655, 656, 657, 658, 659, 660, 667, 686, 687, 1001, 1036, 1038, 1040, 1049], "lasso_pipelin": 155, "lassocolumntransform": 155, "lassocv": [2, 53, 155, 160, 187, 199, 203, 402, 418, 420, 655, 656, 658, 659, 660, 667, 688, 1001, 1036, 1039, 1043, 1046, 1047, 1049, 1050, 1053, 1054, 1055], "lassocvlassocv": 155, "lassolar": [2, 655, 656, 657, 659, 660, 667, 668, 669, 686, 687, 688, 1001, 1006, 1036, 1037, 1039, 1043, 1046, 1047, 1049], "lassolars": [2, 201, 203, 420, 655, 658, 659, 1001, 1036, 1043, 1045, 1049, 1050], "lassolarscv": [2, 203, 402, 420, 656, 657, 658, 660, 667, 669, 686, 687, 688, 1001, 1036, 1043, 1049, 1053], "lassolarsic__criterion": [201, 203], "last": [43, 58, 79, 91, 147, 187, 194, 214, 215, 222, 227, 241, 263, 275, 283, 284, 317, 323, 325, 334, 357, 366, 374, 377, 381, 383, 384, 387, 393, 397, 405, 411, 412, 419, 423, 441, 445, 450, 462, 467, 470, 471, 519, 537, 563, 564, 565, 566, 587, 588, 591, 597, 598, 601, 614, 686, 687, 689, 690, 701, 702, 704, 705, 706, 711, 786, 801, 802, 807, 808, 823, 848, 849, 853, 868, 869, 873, 881, 887, 923, 955, 979, 993, 994, 1000, 1001, 1002, 1004, 1006, 1009, 1019, 1025, 1036, 1042, 1043, 1044, 1045, 1050, 1052, 1053], "last_hour": [43, 52], "last_mean": 979, "last_n": 979, "last_var": 979, "lat": [50, 305, 502, 768], "late": [318, 368], "latenc": [42, 46, 47, 184, 365, 528, 569, 676, 682, 834, 888, 914, 969, 978, 1024, 1026, 1031, 1039], "latent": [2, 42, 45, 55, 131, 184, 310, 354, 414, 419, 421, 491, 536, 540, 542, 543, 544, 547, 548, 592, 595, 864, 1004, 1024, 1026, 1030, 1031, 1038, 1041], "latentdirichletalloc": [2, 54, 368, 384, 416, 1024, 1041, 1043, 1050, 1051], "later": [0, 50, 86, 135, 140, 148, 171, 188, 192, 194, 251, 266, 289, 305, 355, 362, 377, 385, 391, 392, 405, 418, 854, 877, 878, 886, 888, 997, 1015, 1039, 1042, 1044, 1048], "latest": [321, 322, 323, 324, 325, 326, 327, 328, 329, 377, 379, 383, 385, 387, 1021, 1050], "latestst": 383, "latex": 1036, "latexpdf": 379, "latin": [47, 419], "latitud": [305, 312, 374, 502, 703, 768], "lattarini": 1038, "latter": [43, 54, 262, 272, 281, 282, 300, 317, 349, 368, 376, 393, 410, 415, 418, 419, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 746, 801, 802, 803, 804, 807, 808, 813, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 971, 1008, 1013, 1045], "laughlin": 1043, "launch": [353, 354, 397, 1029], "laur": 1036, "lauren": [0, 363, 696, 700, 1002, 1048, 1051], "laurent": [1039, 1040, 1043, 1044, 1051, 1052], "laurenz": 1048, "lauritzen": 1044, "laveen": 1049, "law": 1029, "lawrenc": 266, "lawson": [1043, 1044, 1045], "lawton": 1044, "layer": [2, 43, 67, 143, 153, 162, 173, 175, 184, 221, 230, 252, 306, 309, 310, 314, 315, 336, 347, 366, 387, 418, 518, 519, 526, 571, 834, 864, 865, 866, 869, 888, 1010, 1026, 1027, 1031, 1042], "layout": [135, 312, 391, 908, 909, 910, 913, 935, 1020, 1039, 1041, 1053], "layton": [0, 401, 1036, 1037, 1038, 1039, 1041], "lazaru": 1054, "lazebnik": [762, 763, 1003], "lazi": [52, 394, 419, 1019, 1040], "lazyfram": 105, "lazz": 1051, "lb": [875, 1016], "lbfg": [307, 381, 652, 653, 662, 663, 673, 676, 678, 684, 691, 839, 842, 865, 866, 1001, 1009, 1040, 1041, 1043, 1044, 1049, 1050, 1051, 1053, 1055], "lbfgsb": 662, "lbfin": 1046, "lc": [51, 237, 244], "lceil": [408, 1011], "lda": [54, 69, 118, 120, 123, 125, 127, 131, 184, 301, 362, 376, 407, 508, 540, 545, 553, 554, 857, 1024, 1026, 1027, 1030, 1031, 1041], "lda_featur": 384, "lda_model": 384, "lda_np": 407, "ldavid": 1042, "ldflag": 377, "ldirer": 1043, "ldl": [169, 376], "ldot": [1001, 1005, 1007, 1009, 1019], "ldwy4": [1053, 1054], "le": [662, 876, 996, 1001, 1008, 1016, 1018, 1044, 1048, 1049, 1053], "le_": 573, "lead": [0, 46, 62, 64, 67, 72, 85, 88, 94, 104, 141, 144, 145, 147, 168, 169, 187, 188, 189, 194, 199, 203, 205, 214, 218, 246, 248, 251, 266, 272, 273, 275, 279, 285, 297, 298, 309, 312, 314, 317, 318, 323, 342, 349, 354, 357, 362, 366, 367, 373, 378, 387, 388, 392, 393, 408, 409, 410, 411, 413, 415, 416, 417, 418, 420, 455, 465, 468, 471, 500, 519, 531, 539, 542, 543, 544, 547, 551, 555, 561, 562, 563, 564, 567, 568, 569, 570, 610, 634, 650, 651, 654, 656, 657, 658, 664, 665, 666, 667, 683, 695, 699, 750, 801, 807, 808, 836, 848, 849, 853, 872, 879, 889, 900, 901, 906, 908, 916, 917, 918, 919, 994, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1015, 1018, 1019, 1021, 1029, 1039, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055], "leader": [379, 1029], "leadership": 0, "leaf": [76, 140, 151, 153, 357, 361, 411, 418, 422, 444, 445, 446, 447, 448, 449, 453, 460, 466, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 916, 917, 918, 919, 920, 921, 1008, 1021, 1039, 1041, 1043, 1047, 1050], "leaf_id": 361, "leaf_rot": 190, "leaf_siz": [422, 447, 449, 453, 458, 459, 460, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 1008], "leagu": 374, "leak": [140, 277, 353, 362, 412, 415, 868, 893, 894, 896, 897, 898, 899, 1015, 1036, 1043, 1046, 1052, 1053, 1054], "leakag": [392, 393, 412, 1031], "lean": 405, "leandro": [1045, 1049], "lear": 1029, "learn": [2, 15, 26, 29, 30, 32, 38, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 330, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 367, 371, 372, 373, 374, 376, 378, 382, 385, 386, 387, 388, 392, 393, 396, 398, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 419, 420, 421, 425, 426, 428, 429, 430, 431, 433, 434, 435, 440, 441, 442, 445, 446, 449, 450, 452, 453, 460, 467, 468, 470, 471, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 512, 513, 514, 516, 518, 519, 520, 521, 522, 524, 525, 526, 528, 529, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 580, 585, 586, 587, 588, 591, 592, 593, 594, 595, 597, 598, 603, 606, 607, 614, 615, 618, 623, 626, 630, 632, 634, 636, 638, 642, 644, 645, 647, 648, 649, 650, 652, 656, 661, 662, 672, 673, 680, 681, 682, 684, 692, 693, 694, 695, 696, 700, 701, 704, 705, 706, 712, 717, 721, 722, 725, 727, 728, 730, 736, 739, 745, 746, 747, 752, 760, 782, 783, 784, 788, 789, 791, 792, 799, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 843, 844, 845, 846, 847, 850, 852, 857, 864, 865, 866, 867, 868, 869, 871, 873, 875, 878, 880, 881, 882, 883, 886, 887, 888, 889, 892, 900, 901, 903, 904, 905, 906, 908, 909, 910, 913, 916, 917, 918, 919, 924, 926, 937, 946, 947, 957, 970, 971, 994, 995, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1026, 1028, 1031, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "learn_rat": 1037, "learnalgorithm": 399, "learner": [2, 47, 136, 145, 155, 368, 558, 563, 564, 565, 566, 586, 593, 634, 850, 851, 856, 858, 859, 1007, 1010, 1021, 1024, 1025, 1052], "learning_curv": [2, 274, 326, 402, 810, 1000, 1039, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1053, 1055], "learning_decai": 540, "learning_method": [54, 384, 540], "learning_offset": [54, 540], "learning_r": [46, 135, 145, 146, 147, 148, 149, 150, 239, 292, 308, 310, 322, 324, 418, 557, 558, 563, 564, 565, 566, 672, 680, 681, 682, 696, 864, 865, 866, 1002, 1012, 1019, 1037, 1045, 1049], "learning_rate_": [696, 866], "learning_rate_init": [188, 308, 309, 865, 866], "learningcurvedisplai": [2, 247, 274, 326, 1000, 1051, 1052], "learnt": [150, 187, 319, 362, 393, 415, 889, 994, 1015], "least": [2, 37, 44, 52, 54, 111, 112, 114, 115, 123, 124, 138, 148, 167, 169, 179, 184, 186, 193, 194, 197, 199, 204, 207, 210, 214, 216, 218, 219, 222, 231, 232, 245, 251, 272, 285, 289, 291, 317, 323, 324, 342, 354, 355, 366, 372, 374, 376, 378, 379, 383, 385, 387, 391, 393, 394, 402, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 447, 451, 453, 459, 460, 461, 464, 477, 484, 485, 486, 487, 488, 498, 520, 535, 541, 543, 545, 546, 547, 549, 550, 551, 552, 553, 561, 562, 563, 564, 566, 568, 569, 570, 597, 598, 606, 639, 647, 650, 652, 654, 655, 656, 657, 658, 659, 660, 661, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 680, 682, 683, 684, 686, 687, 688, 689, 690, 691, 696, 701, 716, 720, 722, 789, 805, 809, 810, 816, 818, 819, 820, 822, 823, 825, 829, 832, 833, 834, 865, 866, 869, 880, 888, 913, 916, 917, 918, 919, 944, 967, 995, 998, 1002, 1005, 1008, 1017, 1019, 1020, 1021, 1025, 1026, 1027, 1029, 1031, 1036, 1038, 1039, 1042, 1043, 1047], "least_absolute_devi": [1046, 1048, 1049], "least_angl": 388, "least_squar": 1049, "leastangle_2002": [169, 376], "leastsquareserror": 1045, "leav": [2, 86, 135, 140, 148, 188, 190, 232, 279, 317, 361, 362, 366, 376, 378, 384, 393, 411, 418, 444, 445, 448, 449, 466, 507, 561, 562, 563, 564, 565, 566, 568, 569, 570, 677, 679, 806, 811, 812, 813, 814, 822, 823, 848, 849, 916, 917, 918, 919, 994, 1002, 1008, 1012, 1021, 1036, 1043, 1045, 1047, 1048, 1052], "leaveonegroupout": [2, 277, 415, 805, 812, 813, 1042], "leaveonelabelout": 1042, "leaveoneout": [2, 277, 415, 1054], "leavepgroupsout": [2, 415, 806, 1042], "leaveplabelout": 1042, "leaveplabelsout": 1042, "leavepout": [2, 415, 812], "leaves_parallel": 920, "lebedev": [1042, 1043], "lebel": 1051, "lebourgeoi": 1029, "lectur": [411, 648, 997, 1023], "lecture2": 648, "lecun": [1009, 1019], "led": 1036, "ledoit": [2, 49, 65, 70, 108, 109, 112, 113, 184, 301, 476, 478, 482, 483, 516, 553, 999, 1026], "ledoit_wolf": [2, 113, 413, 1049], "ledoit_wolf_shrinkag": [2, 1049], "ledoitwolf": [2, 69, 108, 110, 113, 128, 149, 184, 303, 413, 472, 473, 477, 478, 479, 480, 804, 1026, 1040], "lee": [416, 1036, 1037, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1055], "leepei": 1040, "leereev": 1043, "leeuw": 639, "lefebvr": [1049, 1050], "lefevr": [416, 542], "left": [45, 46, 51, 53, 54, 61, 69, 70, 74, 77, 79, 84, 88, 95, 97, 104, 107, 112, 113, 119, 123, 124, 135, 138, 140, 141, 142, 144, 147, 150, 155, 157, 174, 180, 183, 187, 190, 207, 214, 215, 216, 218, 225, 227, 228, 231, 232, 241, 245, 249, 251, 252, 257, 259, 260, 263, 268, 269, 270, 271, 273, 281, 282, 284, 295, 297, 298, 305, 307, 310, 312, 325, 327, 328, 332, 341, 342, 346, 361, 374, 379, 381, 383, 408, 411, 414, 415, 417, 418, 419, 421, 428, 434, 449, 475, 485, 486, 487, 488, 497, 502, 553, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 591, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 639, 643, 647, 655, 659, 801, 802, 804, 807, 808, 811, 818, 825, 881, 888, 916, 917, 918, 919, 920, 938, 952, 975, 978, 994, 997, 999, 1001, 1003, 1005, 1007, 1012, 1017, 1019, 1021, 1043, 1045, 1050, 1055], "left_h": 312, "left_impur": [561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919], "leftarrow": [411, 1009, 1019], "leftmost": 1009, "legaci": [373, 383, 393, 946, 947, 1036, 1043, 1048], "legarreta": [1047, 1049, 1050], "legend": [43, 46, 47, 48, 50, 52, 61, 63, 69, 72, 75, 94, 104, 105, 107, 109, 110, 111, 112, 115, 116, 118, 123, 125, 128, 129, 130, 135, 136, 137, 138, 139, 141, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 165, 171, 172, 176, 177, 178, 179, 180, 187, 188, 192, 194, 195, 197, 201, 202, 203, 204, 208, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 231, 232, 237, 242, 244, 245, 246, 247, 249, 252, 259, 266, 267, 269, 271, 272, 274, 275, 276, 277, 279, 282, 284, 285, 286, 287, 289, 295, 297, 298, 299, 304, 308, 313, 317, 322, 325, 328, 333, 341, 344, 346, 348, 353, 357, 358, 359, 360, 704, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "legend_el": [118, 151, 227, 275, 295, 346], "legend_handl": 299, "legend_lin": 48, "legend_titl": 220, "legitim": [266, 1002], "legitimate_accept": 266, "legitimate_refus": 266, "lego": 1024, "lehoucq": 416, "leibler": [54, 234, 416, 542, 544, 551, 696, 1002, 1043], "leibniz": 1005, "leig": 1042, "leightonzhang": 1042, "leinweb": [1044, 1045], "leisur": 43, "lejeun": 1043, "lekhwani": 1045, "leland": [1042, 1043, 1044, 1046, 1047, 1052], "lemaitr": [0, 400, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "lemir": 1047, "lemma": [37, 245, 371, 538, 545, 553, 900, 901, 902, 999, 1031, 1039], "lemmat": 419, "lemmatoken": 419, "lemo": [1052, 1053], "len": [46, 47, 49, 50, 55, 57, 66, 67, 68, 72, 73, 76, 78, 79, 82, 83, 84, 88, 93, 94, 95, 96, 97, 98, 102, 104, 124, 130, 131, 133, 138, 141, 143, 144, 150, 161, 162, 167, 171, 179, 183, 188, 190, 213, 214, 232, 237, 241, 244, 245, 246, 248, 250, 251, 257, 259, 260, 267, 270, 272, 273, 280, 281, 283, 287, 291, 292, 299, 301, 302, 307, 313, 314, 315, 318, 327, 329, 331, 332, 335, 342, 348, 351, 353, 354, 355, 361, 391, 393, 418, 421, 429, 433, 435, 440, 448, 453, 459, 467, 511, 519, 554, 573, 574, 586, 601, 636, 637, 786, 804, 818, 830, 834, 836, 838, 839, 889, 903, 904, 1045, 1048], "lenail": [1044, 1048], "lend": 1029, "lene": 1052, "length": [2, 102, 118, 119, 129, 131, 143, 169, 171, 172, 173, 176, 177, 179, 192, 198, 248, 249, 252, 255, 295, 323, 326, 339, 355, 372, 376, 379, 387, 388, 393, 412, 416, 418, 419, 421, 448, 493, 512, 513, 516, 519, 527, 555, 567, 585, 586, 593, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 636, 650, 651, 654, 655, 656, 657, 658, 660, 661, 664, 665, 666, 667, 685, 688, 785, 804, 807, 808, 818, 834, 836, 839, 840, 842, 850, 851, 852, 854, 856, 895, 921, 934, 936, 940, 958, 959, 975, 978, 1004, 1011, 1015, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1052], "length_scal": [171, 172, 175, 176, 177, 178, 180, 421, 616, 619, 622, 623, 625, 626, 627, 628], "length_scale_bound": [171, 177, 178, 180, 421, 615, 619, 623, 626, 627], "length_scale_grid": 177, "lengthi": [379, 391], "lenient": [882, 1025, 1053], "lenz": [1047, 1051], "leo": 1053, "leogrin": 1054, "leon": [680, 681, 682, 1036, 1054], "leonardo": 1049, "leonenko": [611, 612], "leonieborn": 1042, "leopoldo": 1049, "leq": [174, 416, 418, 1001, 1005, 1008, 1019, 1020, 1021], "lera": 1043, "leriqu": [1042, 1044], "lernen": 453, "lesne": 1050, "less": [43, 44, 47, 64, 85, 86, 93, 119, 121, 124, 131, 135, 142, 147, 148, 150, 171, 178, 187, 197, 199, 214, 216, 218, 247, 251, 258, 260, 266, 272, 273, 281, 283, 286, 287, 313, 316, 317, 318, 323, 325, 329, 346, 353, 354, 362, 366, 368, 374, 379, 381, 391, 393, 405, 411, 415, 416, 418, 419, 423, 442, 444, 446, 448, 451, 453, 455, 460, 463, 465, 466, 485, 486, 487, 500, 519, 535, 539, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 594, 600, 623, 631, 638, 651, 665, 680, 682, 696, 705, 725, 726, 727, 728, 729, 740, 756, 768, 783, 784, 789, 799, 801, 802, 806, 807, 808, 814, 832, 843, 844, 845, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 871, 883, 885, 886, 888, 891, 897, 898, 908, 909, 916, 917, 918, 919, 940, 955, 994, 995, 997, 998, 999, 1002, 1004, 1005, 1008, 1010, 1015, 1019, 1020, 1021, 1024, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1046, 1050, 1051, 1053], "lessen": [220, 662, 663], "lesser": [307, 393, 445, 545, 1001], "let": [43, 44, 52, 86, 88, 97, 103, 107, 118, 121, 126, 142, 144, 147, 148, 150, 152, 171, 177, 178, 183, 187, 188, 189, 196, 203, 214, 216, 232, 234, 238, 248, 255, 266, 267, 272, 275, 279, 285, 286, 329, 353, 355, 361, 362, 374, 379, 381, 385, 391, 405, 408, 410, 411, 415, 418, 419, 448, 494, 504, 508, 514, 538, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 685, 688, 874, 881, 882, 1001, 1002, 1003, 1004, 1005, 1012, 1013, 1015, 1020, 1021, 1029, 1046, 1055], "letelli": 1042, "letter": [169, 179, 374, 376, 383, 419, 792, 793, 810, 827, 1005], "leu": 1050, "leung": 1047, "lev_metr": 391, "levarag": 328, "level": [43, 48, 50, 51, 64, 70, 76, 86, 121, 140, 143, 162, 169, 170, 171, 172, 175, 178, 180, 184, 187, 188, 225, 226, 227, 228, 229, 232, 241, 245, 246, 261, 266, 272, 275, 281, 282, 298, 305, 340, 341, 343, 344, 346, 349, 354, 361, 366, 374, 376, 379, 381, 385, 391, 393, 396, 397, 402, 409, 416, 419, 421, 425, 457, 471, 497, 498, 500, 507, 525, 535, 540, 541, 549, 550, 551, 565, 566, 571, 572, 615, 619, 626, 627, 629, 670, 671, 672, 680, 681, 682, 691, 694, 696, 698, 704, 706, 720, 727, 732, 789, 829, 830, 831, 833, 836, 837, 864, 865, 866, 906, 921, 994, 1001, 1005, 1006, 1008, 1013, 1019, 1021, 1024, 1025, 1026, 1039, 1047, 1050, 1051, 1052, 1055], "levelnam": 121, "leven": 391, "levenshtein": [329, 391], "levenshtein_dist": 329, "levequ": [846, 888], "leverag": [43, 47, 72, 82, 116, 232, 329, 353, 354, 366, 367, 377, 393, 415, 418, 883, 994, 1001, 1039, 1051, 1054], "levesqu": 1042, "levi": [538, 1043], "levinson": [1044, 1045], "levitski": [1051, 1052, 1053, 1055], "levitskii": 1049, "lewi": [374, 1043, 1047], "lex": [411, 455, 465], "lexicograph": [393, 571, 792, 798, 850, 858], "lexicon": 1015, "lexsort": 61, "lf": 387, "lfw": [2, 45, 374, 497, 498, 1036], "lfw_home": 374, "lfw_pairs_train": [374, 497], "lfw_peopl": [45, 374, 498], "lg2012": 418, "lgtm": 1043, "li": [0, 334, 374, 400, 401, 643, 646, 700, 730, 760, 901, 994, 997, 1005, 1008, 1015, 1017, 1020, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "liabil": 232, "liac": [326, 373, 379, 500, 1051, 1052], "liam": [1044, 1045], "liang": [1042, 1047, 1048, 1053, 1054], "liau": 1039, "lib": [367, 377, 397, 1024], "liberti": 263, "libisel": 1054, "liblinear": [207, 340, 385, 662, 663, 792, 908, 909, 910, 913, 914, 1001, 1005, 1020, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1052], "libomp": [377, 1048], "librari": [45, 266, 272, 324, 326, 359, 362, 371, 373, 374, 377, 378, 379, 380, 385, 387, 391, 392, 393, 397, 405, 407, 467, 662, 908, 909, 910, 911, 913, 914, 1001, 1005, 1020, 1021, 1024, 1025, 1029, 1034, 1039, 1043, 1044, 1045, 1046, 1047, 1049, 1053], "libsvm": [2, 192, 340, 372, 385, 490, 512, 567, 908, 909, 910, 911, 912, 913, 914, 1020, 1031, 1036, 1038, 1044, 1047, 1050], "libsvmtool": [192, 373, 490, 512, 513], "licenc": 373, "licens": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 373, 391, 393, 1021, 1029], "lichman": 376, "liddel": 1044, "lidston": [843, 844, 845, 847, 1007], "lie": [52, 93, 115, 168, 187, 246, 312, 333, 340, 342, 416, 418, 610, 856, 858, 859, 860, 908, 909, 999, 1002, 1005, 1015, 1020], "lieg": 418, "lieret": 1051, "lieu": [1042, 1043], "life": [52, 150, 265, 329, 387, 1002], "lifecycl": [1024, 1025], "lifo": 923, "lift": 397, "light": [138, 374], "lighter": [366, 704, 706, 786, 793, 1052], "lightfm": 1024, "lightgbm": [150, 418, 565, 566, 1024, 1045, 1052], "lightgreen": [157, 220, 231], "lightgrei": 49, "lightweight": [380, 804, 818, 829, 830], "ligo": 1043, "lihaitao": 1054, "lik_max": 109, "lik_min": 109, "like": [0, 2, 43, 51, 52, 85, 88, 91, 93, 102, 119, 124, 128, 130, 133, 135, 137, 142, 147, 150, 151, 171, 177, 187, 195, 214, 248, 263, 266, 272, 275, 276, 279, 280, 287, 301, 310, 312, 317, 318, 321, 334, 342, 346, 353, 354, 362, 366, 368, 371, 373, 374, 378, 379, 381, 383, 386, 387, 388, 391, 392, 393, 402, 405, 407, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 519, 523, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 583, 585, 586, 587, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 930, 932, 939, 940, 954, 958, 967, 968, 975, 976, 977, 989, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1005, 1007, 1008, 1009, 1011, 1012, 1015, 1020, 1021, 1025, 1029, 1033, 1036, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "likelihood": [2, 69, 90, 108, 110, 111, 112, 113, 128, 149, 171, 172, 173, 175, 176, 177, 178, 180, 184, 201, 232, 261, 264, 272, 278, 303, 310, 312, 381, 393, 409, 413, 416, 418, 421, 440, 472, 473, 474, 475, 476, 477, 478, 479, 480, 519, 536, 540, 545, 553, 554, 555, 614, 615, 635, 649, 662, 716, 745, 801, 802, 804, 831, 834, 853, 864, 884, 896, 910, 911, 913, 914, 1001, 1004, 1007, 1015, 1020, 1026, 1039, 1040, 1045, 1051], "likewis": [249, 411, 527], "lil": [393, 557, 558, 875, 930, 958, 1008], "lil_matrix": 55, "lili": [1044, 1045], "lilian": [1041, 1042, 1053], "lim": [174, 538], "lima": [1049, 1050], "limit": [43, 47, 55, 64, 72, 77, 90, 99, 113, 135, 142, 148, 155, 182, 187, 188, 189, 194, 214, 215, 231, 245, 279, 314, 318, 324, 349, 355, 362, 367, 380, 381, 384, 391, 393, 394, 409, 410, 411, 414, 416, 420, 449, 466, 471, 563, 564, 565, 566, 636, 654, 683, 686, 687, 692, 782, 825, 856, 858, 859, 860, 881, 882, 906, 910, 911, 912, 913, 914, 994, 1001, 1002, 1004, 1005, 1012, 1013, 1015, 1025, 1031, 1044, 1046, 1049, 1050, 1053, 1055], "limits_": 1008, "lin": [0, 538, 662, 1020, 1041, 1042, 1043, 1044], "lin_clf": 1020, "linalg": [70, 87, 109, 110, 113, 128, 130, 200, 257, 258, 259, 262, 263, 328, 379, 385, 416, 454, 455, 456, 465, 525, 536, 539, 545, 548, 661, 676, 678, 691, 695, 699, 950], "linalgerror": 1046, "linalgwarn": 1055, "lincoln": 374, "lindenbaum": 538, "lindenstrauss": [37, 184, 240, 371, 492, 506, 900, 901, 902, 1022, 1026, 1031], "lindgren": 1054, "lindquist": 1051, "line": [48, 50, 52, 55, 75, 78, 93, 102, 111, 121, 126, 135, 141, 146, 170, 182, 183, 184, 187, 188, 201, 203, 204, 206, 209, 210, 212, 215, 217, 222, 223, 225, 226, 228, 241, 245, 246, 249, 251, 269, 276, 278, 279, 285, 298, 302, 305, 313, 323, 341, 344, 346, 347, 350, 351, 353, 373, 374, 377, 379, 380, 381, 383, 384, 385, 386, 387, 391, 416, 417, 418, 441, 490, 491, 492, 512, 513, 546, 557, 558, 559, 560, 614, 617, 618, 636, 674, 690, 704, 705, 706, 810, 827, 999, 1005, 1009, 1012, 1019, 1024, 1026, 1028, 1038, 1047, 1049, 1052, 1053], "line0": [51, 237], "line1": [46, 51, 237], "line2": [46, 51, 237, 350], "line2d": [48, 111, 228, 298, 341, 344, 810, 827], "line_": [386, 441, 702, 704, 705, 706, 810, 827], "line_bin": 313, "line_fig": 141, "line_i": 217, "line_kw": [150, 152, 252, 274, 322, 328, 636, 810, 827], "line_kwarg": [155, 705], "line_profil": 385, "line_trac": 141, "line_x": [217, 231], "line_y_ransac": 217, "linea": 399, "linear": [2, 12, 44, 48, 49, 51, 52, 53, 64, 65, 66, 67, 72, 85, 90, 106, 107, 109, 110, 111, 112, 113, 116, 118, 121, 126, 129, 138, 140, 153, 155, 158, 160, 162, 164, 169, 175, 177, 182, 183, 185, 186, 188, 192, 195, 197, 199, 200, 201, 203, 204, 209, 211, 212, 215, 216, 218, 219, 222, 226, 228, 230, 231, 232, 233, 236, 238, 244, 245, 247, 249, 250, 253, 262, 265, 268, 269, 270, 272, 275, 277, 278, 279, 280, 281, 282, 285, 287, 297, 298, 300, 301, 302, 310, 312, 313, 314, 317, 319, 323, 324, 337, 339, 342, 343, 344, 347, 349, 350, 353, 359, 360, 367, 371, 375, 376, 377, 381, 382, 384, 393, 396, 399, 409, 411, 414, 415, 416, 417, 418, 419, 420, 421, 423, 445, 447, 458, 468, 470, 478, 485, 486, 487, 500, 505, 506, 516, 519, 525, 528, 536, 537, 538, 539, 540, 543, 545, 547, 548, 552, 553, 554, 558, 570, 586, 593, 597, 598, 610, 613, 618, 624, 635, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 692, 693, 694, 695, 696, 697, 705, 711, 720, 723, 754, 757, 769, 771, 778, 789, 804, 815, 819, 831, 834, 848, 849, 853, 857, 864, 865, 866, 869, 873, 874, 875, 878, 881, 883, 885, 886, 887, 888, 897, 901, 908, 909, 910, 911, 912, 913, 914, 994, 996, 997, 998, 1000, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1019, 1020, 1026, 1027, 1029, 1030, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050], "linear_baselin": 323, "linear_kernel": [2, 407, 765, 769, 1003, 1044, 1055], "linear_model": [2, 43, 46, 47, 49, 53, 62, 64, 66, 87, 103, 105, 107, 116, 140, 155, 157, 158, 160, 161, 167, 168, 169, 171, 182, 184, 186, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 241, 242, 243, 244, 248, 250, 253, 255, 266, 268, 275, 280, 281, 285, 286, 287, 291, 310, 313, 314, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 335, 353, 362, 366, 368, 378, 379, 381, 385, 387, 388, 392, 393, 402, 407, 410, 412, 418, 431, 436, 441, 468, 541, 543, 546, 547, 549, 550, 552, 571, 572, 573, 574, 601, 635, 636, 638, 639, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 704, 705, 792, 803, 818, 827, 829, 830, 831, 833, 835, 839, 840, 841, 842, 866, 883, 887, 908, 909, 912, 915, 944, 946, 947, 948, 988, 997, 1001, 1005, 1006, 1011, 1013, 1015, 1019, 1026, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "linear_model_preprocessor": 214, "linear_pca": 412, "linear_preprocessor": 155, "linear_regress": [216, 287], "linear_sum_assign": [408, 723], "linear_svc": 1020, "linear_svm": 246, "linear_svm_scor": 246, "linear_svm_tim": 246, "lineardiscriminantanalysi": [2, 69, 70, 129, 235, 301, 362, 407, 540, 554, 857, 999, 1006, 1008, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1048, 1050, 1051, 1052], "linearli": [67, 126, 137, 169, 187, 194, 228, 235, 241, 281, 282, 314, 317, 346, 353, 366, 376, 391, 416, 418, 519, 557, 646, 711, 877, 878, 1005, 1008, 1011, 1020, 1043, 1052], "linearly_separ": [67, 307], "linearmodel": 1049, "linearoper": [328, 691], "linearregress": [2, 116, 158, 186, 194, 204, 209, 210, 211, 212, 217, 220, 231, 244, 248, 250, 268, 287, 313, 362, 379, 391, 392, 412, 418, 468, 574, 636, 639, 650, 653, 656, 658, 675, 676, 691, 1001, 1005, 1006, 1015, 1040, 1041, 1045, 1048, 1049, 1050, 1052], "linearregressionifittedlinearregress": 244, "linearregressionlinearregress": 158, "linearsvc": [2, 62, 64, 102, 104, 165, 166, 184, 192, 246, 269, 271, 279, 314, 321, 337, 339, 343, 344, 349, 353, 366, 381, 385, 409, 419, 420, 440, 516, 571, 581, 635, 643, 647, 656, 676, 677, 678, 679, 680, 691, 739, 746, 831, 836, 909, 910, 913, 915, 1001, 1005, 1006, 1020, 1026, 1036, 1037, 1038, 1042, 1044, 1047, 1052], "linearsvc__c": 314, "linearsvclinearsvc": [104, 166, 279], "linearsvr": [2, 572, 914, 1020, 1040, 1042, 1047, 1052], "linecollect": [51, 237, 244, 636], "linen": [51, 237], "lineno": 385, "lineplot": [150, 272], "liner": [381, 834], "lines_": [386, 636, 810, 827], "linestyl": [49, 50, 69, 93, 105, 111, 128, 130, 135, 146, 157, 160, 162, 171, 174, 176, 178, 180, 189, 190, 201, 202, 203, 214, 215, 216, 220, 224, 226, 227, 232, 249, 251, 266, 269, 271, 275, 276, 281, 285, 286, 297, 305, 308, 313, 340, 343, 344, 346, 347, 349], "linewidth": [61, 69, 70, 72, 75, 91, 105, 109, 116, 119, 123, 136, 147, 150, 152, 171, 175, 179, 203, 204, 208, 209, 210, 212, 215, 217, 220, 228, 231, 241, 249, 251, 281, 285, 298, 302, 313, 322, 328, 340, 341, 343, 359], "linger": 216, "linguist": [720, 905, 1018], "lingyi1110": 1051, "link": [51, 55, 135, 187, 188, 194, 214, 218, 232, 257, 266, 275, 302, 357, 367, 373, 378, 379, 380, 381, 383, 387, 393, 409, 411, 413, 416, 418, 421, 565, 566, 614, 652, 673, 684, 692, 709, 933, 935, 1001, 1008, 1021, 1022, 1024, 1028, 1034, 1036, 1039, 1040, 1043, 1044, 1047, 1053], "link_thickness_i": 302, "linkag": [71, 74, 75, 76, 79, 81, 85, 88, 89, 90, 100, 184, 190, 443, 444, 448, 449, 466, 516, 518, 526, 888, 1024, 1026, 1039, 1044, 1047], "linkage_matrix": 76, "linkage_tre": 1040, "linkedin": 383, "linker": 380, "linnerrud": [372, 1031], "linnerud": [2, 376, 509], "linprog": [674, 1001], "linspac": [43, 47, 49, 50, 53, 61, 63, 72, 73, 75, 77, 82, 88, 111, 112, 122, 130, 136, 147, 171, 172, 174, 175, 176, 177, 178, 180, 188, 194, 195, 197, 199, 204, 208, 214, 215, 216, 220, 224, 225, 226, 227, 228, 232, 239, 241, 244, 245, 247, 249, 261, 272, 274, 275, 279, 280, 281, 282, 287, 297, 298, 304, 305, 313, 315, 325, 326, 341, 342, 345, 346, 347, 349, 350, 351, 635, 636, 810, 832, 848, 849], "lint": [379, 387], "linter": 583, "linthresh": [194, 199], "linu": [1052, 1053, 1054], "linux": [379, 381, 382, 387, 1024, 1036], "lipoprotein": [169, 376], "lippert": 1001, "lippmann": 374, "lipschitz": [37, 1017], "lisa": [1044, 1045, 1047, 1048, 1050, 1051], "lise": 1050, "list": [0, 2, 43, 47, 49, 51, 52, 53, 55, 57, 58, 62, 68, 75, 79, 82, 95, 102, 130, 131, 139, 141, 146, 155, 190, 218, 251, 252, 267, 270, 272, 273, 275, 276, 281, 301, 314, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 335, 345, 354, 355, 368, 373, 374, 377, 378, 379, 381, 382, 384, 385, 386, 387, 388, 391, 392, 393, 394, 397, 398, 402, 409, 411, 412, 415, 417, 418, 419, 434, 436, 440, 453, 459, 460, 467, 468, 469, 470, 474, 475, 481, 485, 486, 487, 491, 492, 493, 494, 496, 497, 500, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 518, 519, 520, 521, 522, 523, 524, 527, 536, 554, 555, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 593, 595, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 636, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 685, 688, 690, 691, 696, 700, 701, 703, 714, 715, 716, 717, 720, 722, 729, 737, 746, 750, 758, 782, 785, 787, 792, 798, 801, 802, 804, 807, 808, 810, 815, 816, 818, 827, 829, 830, 831, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 872, 876, 879, 881, 882, 887, 889, 905, 909, 911, 914, 916, 917, 918, 919, 922, 929, 930, 934, 935, 936, 940, 943, 944, 945, 947, 955, 956, 959, 970, 975, 978, 988, 994, 995, 1001, 1005, 1007, 1008, 1009, 1012, 1013, 1016, 1021, 1024, 1025, 1029, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "list_param": 379, "listedcolormap": [67, 70, 143, 300, 303, 307, 314], "listen": 353, "listinfo": 387, "lite": 1036, "liter": [379, 1029], "literatur": [176, 272, 289, 354, 376, 379, 385, 387, 391, 392, 411, 414, 416, 418, 446, 450, 452, 505, 540, 542, 544, 551, 559, 560, 592, 595, 712, 801, 994, 997, 1001, 1005, 1046], "litsidi": [1051, 1052], "littl": [187, 188, 189, 190, 241, 374, 419, 465, 648, 804, 818, 952, 995, 1002, 1004, 1020, 1021, 1037, 1048, 1053], "lituiev": 1049, "liu": [0, 369, 390, 400, 567, 730, 760, 1005, 1011, 1039, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "liutong": 1044, "live": [50, 102, 187, 266, 305, 374, 379, 411, 502, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 1028], "livesei": 353, "livni": [411, 445], "lizao": 1044, "lizsz": 1042, "lj2017": 411, "lk": 1039, "lkjcalc": 1044, "lkubin": 1047, "ll": [50, 88, 267, 285, 305, 379, 391, 536, 545, 997, 1008, 1021], "llcrnrlat": [50, 305], "llcrnrlon": [50, 305], "lle": [234, 235, 236, 238, 534, 693, 697, 1002, 1048], "lle_hessian": 234, "lle_ltsa": 234, "lle_method": 234, "lle_mod": 234, "lle_standard": 234, "lloyd": [411, 446, 450, 452, 462, 1050, 1051], "llvm": 377, "lm": 196, "lmbda": 316, "lmbda_bc": 316, "lmbda_yj": 316, "lml": [172, 173, 177, 421], "ln": [383, 1001, 1009, 1015], "loa": [170, 178, 184, 421, 500, 615, 619, 626, 627, 629, 1026], "load": [2, 10, 43, 45, 50, 51, 52, 54, 63, 68, 80, 86, 103, 104, 121, 131, 140, 142, 143, 145, 151, 152, 155, 156, 158, 166, 167, 176, 187, 188, 192, 196, 210, 211, 214, 222, 230, 243, 244, 248, 250, 251, 252, 253, 255, 262, 266, 268, 270, 272, 277, 279, 284, 286, 289, 292, 296, 301, 308, 309, 310, 322, 323, 325, 326, 328, 333, 334, 335, 358, 361, 366, 371, 374, 376, 382, 385, 392, 405, 414, 415, 416, 418, 485, 486, 487, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 536, 538, 547, 848, 849, 952, 1015, 1025, 1031, 1036, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "load_ames_h": 155, "load_boston": [1042, 1044, 1049], "load_breast_canc": [2, 169, 190, 334, 357, 384, 596, 599, 600, 602, 678, 679, 792, 1005, 1041, 1042, 1047], "load_cont": 507, "load_dataset": 353, "load_diabet": [2, 46, 148, 158, 160, 169, 183, 201, 202, 203, 210, 211, 252, 268, 326, 418, 562, 566, 572, 677, 705, 829, 830, 831, 917, 919, 1013, 1042, 1047, 1050], "load_digit": [2, 68, 84, 85, 91, 104, 105, 161, 167, 205, 221, 235, 245, 246, 270, 271, 274, 280, 294, 296, 301, 308, 310, 327, 331, 332, 385, 412, 423, 448, 449, 536, 537, 538, 539, 603, 604, 642, 643, 672, 692, 693, 694, 695, 697, 699, 1042, 1047], "load_fil": [2, 373, 374, 1038, 1050], "load_iri": [2, 66, 76, 106, 118, 125, 127, 129, 131, 143, 156, 162, 165, 173, 198, 207, 223, 255, 259, 265, 277, 278, 279, 281, 282, 295, 300, 303, 308, 321, 323, 326, 336, 338, 339, 342, 345, 358, 361, 392, 405, 411, 412, 415, 418, 420, 431, 565, 571, 605, 606, 614, 623, 624, 626, 627, 635, 662, 663, 715, 792, 804, 807, 808, 810, 818, 836, 857, 903, 904, 905, 916, 918, 920, 921, 922, 995, 1000, 1005, 1006, 1007, 1008, 1012, 1015, 1021, 1042, 1044, 1047], "load_lfw_pair": 1041, "load_linnerud": [2, 841, 1042, 1047], "load_mnist": [222, 292], "load_mtpl2": 232, "load_sample_imag": [2, 587, 588, 591, 1045], "load_svmlight_fil": [2, 373, 1036, 1037, 1042, 1043, 1044, 1051], "load_win": [2, 48, 254, 317, 852, 860, 1033, 1047], "loader": [2, 273, 335, 353, 372, 373, 374, 502, 503, 512, 1025, 1036, 1041, 1043, 1044, 1047], "loan": [418, 538, 1001, 1029], "loayza": 1050, "lobpcg": [80, 455, 465, 692, 695, 699, 1046, 1049, 1050, 1051], "loc": [43, 46, 47, 48, 61, 63, 69, 75, 104, 107, 110, 111, 112, 115, 118, 123, 125, 128, 129, 130, 135, 137, 138, 139, 146, 147, 148, 149, 150, 152, 155, 157, 158, 165, 171, 172, 178, 180, 187, 188, 197, 202, 204, 208, 214, 215, 216, 217, 220, 221, 224, 227, 228, 231, 232, 237, 244, 245, 246, 247, 249, 251, 259, 260, 267, 270, 271, 272, 275, 276, 279, 282, 285, 286, 287, 295, 297, 298, 308, 313, 316, 317, 322, 325, 328, 333, 341, 344, 346, 348, 349, 353, 358, 360, 818, 885, 897], "loc_a": 316, "loc_b": 316, "local": [2, 43, 48, 51, 58, 74, 85, 90, 94, 121, 124, 140, 141, 152, 169, 176, 177, 184, 188, 215, 228, 233, 236, 238, 241, 245, 251, 293, 302, 341, 359, 360, 367, 376, 377, 379, 383, 385, 387, 397, 411, 416, 418, 419, 421, 450, 455, 465, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 506, 542, 544, 548, 551, 553, 563, 564, 567, 570, 614, 615, 692, 693, 694, 695, 696, 697, 699, 700, 762, 763, 851, 854, 857, 859, 869, 878, 901, 904, 912, 970, 1003, 1004, 1008, 1009, 1021, 1026, 1028, 1030, 1031, 1040, 1044, 1048, 1051, 1054, 1055], "local_filenam": 495, "localcach": 397, "locally_linear_embed": [2, 238, 1002, 1055], "locallylinearembed": [2, 51, 234, 235, 236, 325, 692, 694, 696, 1002, 1008, 1041, 1042, 1050, 1051, 1052, 1055], "localoutlierfactor": [2, 241, 251, 298, 299, 325, 393, 567, 912, 1011, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1055], "localoutlierfactor__n_neighbor": 251, "locat": [48, 62, 86, 87, 104, 111, 112, 208, 305, 323, 342, 372, 374, 377, 379, 383, 384, 387, 388, 397, 398, 411, 413, 417, 451, 463, 464, 472, 473, 474, 475, 476, 477, 478, 479, 491, 504, 505, 508, 509, 516, 519, 989, 995, 1001, 1006, 1011, 1015, 1021, 1044], "location_": [111, 112, 472, 473, 474, 475, 476, 477, 478, 479], "location_reweight": [472, 477], "lock": [382, 397, 404, 405, 970, 1054], "loev": 538, "lof": [2, 48, 184, 228, 241, 251, 293, 341, 567, 854, 912, 1011, 1026], "lof_kw": 251, "lofti": [1046, 1047], "log": [2, 43, 58, 62, 63, 64, 109, 121, 135, 145, 147, 155, 165, 169, 172, 173, 175, 176, 177, 180, 201, 203, 207, 214, 219, 224, 232, 245, 247, 261, 266, 302, 317, 353, 374, 376, 377, 379, 387, 388, 393, 408, 409, 411, 412, 413, 416, 418, 419, 421, 451, 454, 463, 468, 473, 474, 475, 476, 477, 478, 479, 536, 540, 545, 553, 554, 555, 557, 559, 561, 563, 566, 568, 594, 595, 597, 598, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 646, 649, 652, 662, 663, 673, 675, 680, 684, 726, 745, 759, 801, 802, 804, 807, 808, 818, 843, 844, 845, 846, 847, 848, 849, 853, 864, 865, 872, 873, 902, 905, 910, 913, 915, 916, 918, 950, 994, 997, 999, 1001, 1002, 1007, 1008, 1010, 1013, 1015, 1019, 1021, 1024, 1025, 1038, 1039, 1040, 1045, 1046, 1047, 1050, 1053, 1054, 1055], "log10": [165, 177, 187, 207, 273, 342], "log1p": [107, 244, 872, 1005, 1015], "log2": [139, 224, 253, 561, 562, 563, 564, 568, 569, 916, 917, 918, 919, 1006], "log_": 1005, "log_2": [408, 567, 1011], "log_bas": 730, "log_den": 297, "log_dens": 853, "log_likelihood": [109, 614, 615, 801, 802], "log_likelihood_gradi": [614, 615], "log_logist": 1053, "log_loss": [2, 62, 63, 146, 149, 172, 317, 335, 353, 393, 409, 418, 561, 563, 565, 568, 650, 662, 680, 916, 918, 994, 1001, 1005, 1019, 1021, 1038, 1040, 1042, 1050, 1051, 1052, 1053], "log_marginal_likelihood": [172, 173, 175, 177, 180, 421, 614, 615, 1046], "log_marginal_likelihood_value_": [614, 615], "log_prob": [801, 802, 803, 826], "log_reg": [255, 325], "log_reg_input_featur": 325, "log_scal": 1052, "log_scale_transform": [214, 232], "log_scaled_numer": [214, 232], "log_y_prob": 865, "logaddexp": 1053, "logan": [1050, 1051, 1052], "logarithm": [2, 107, 155, 187, 218, 245, 273, 342, 393, 420, 463, 594, 662, 663, 680, 708, 730, 745, 755, 759, 760, 761, 795, 803, 826, 839, 848, 849, 950, 1021, 1043], "logcosh": [423, 537], "logdet": 950, "logged_in": 374, "logger": 1047, "logic": [133, 367, 380, 381, 386, 407, 418, 1021, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "logical_and": [53, 147], "logical_not": [57, 97, 130, 217], "logical_or": [216, 222, 281, 385], "logical_xor": [53, 175, 346], "loginov": 1042, "logist": [2, 62, 64, 66, 101, 103, 107, 118, 131, 140, 161, 167, 184, 193, 202, 209, 211, 212, 218, 220, 223, 225, 231, 242, 244, 255, 266, 280, 283, 285, 286, 291, 303, 309, 310, 317, 325, 338, 339, 349, 350, 353, 393, 394, 409, 412, 418, 420, 421, 440, 492, 500, 506, 508, 516, 545, 563, 565, 614, 635, 650, 661, 662, 663, 670, 672, 680, 745, 804, 818, 834, 837, 864, 865, 866, 868, 888, 915, 937, 939, 1005, 1009, 1010, 1019, 1020, 1026, 1027, 1029, 1031, 1040, 1043, 1044, 1046, 1047], "logistic__c": 105, "logistic_regress": [266, 827, 835], "logistic_regression_path": [1044, 1045], "logisticregress": [2, 62, 66, 103, 105, 140, 157, 161, 167, 168, 169, 198, 204, 205, 206, 207, 221, 229, 230, 242, 243, 253, 255, 266, 275, 281, 286, 310, 314, 321, 322, 323, 324, 325, 327, 329, 353, 366, 379, 381, 385, 387, 392, 402, 409, 410, 412, 418, 420, 431, 436, 441, 571, 573, 601, 635, 638, 647, 656, 663, 676, 677, 678, 679, 680, 691, 704, 792, 803, 818, 827, 833, 835, 839, 840, 842, 893, 894, 896, 897, 898, 899, 915, 946, 947, 948, 988, 1001, 1005, 1006, 1015, 1019, 1020, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "logisticregression__c": [266, 314], "logisticregressioncv": [2, 64, 317, 393, 402, 662, 1001, 1006, 1040, 1041, 1042, 1044, 1045, 1046, 1050, 1051, 1053, 1054, 1055], "logisticregressionifittedlogisticregress": 310, "logisticregressionlogisticregress": [103, 140, 242, 243, 253, 255, 266, 286, 322, 325], "logit": [2, 409, 421, 662, 663, 1001], "loglik_lw": 109, "loglik_oa": 109, "loglik_r": 109, "loglike_": 536, "loglog": [109, 245], "logloss": 1047, "lognorm": [147, 177, 196, 261, 316, 1015], "logo": [0, 415, 811], "logprob": 853, "logreg": [198, 842], "logspac": [43, 51, 64, 105, 109, 128, 160, 169, 172, 177, 187, 207, 218, 219, 245, 247, 261, 266, 273, 285, 296, 307, 314, 317, 342, 349, 827, 835, 1000, 1001], "logsumexp": [302, 1043], "loguniform": [45, 171, 280, 994, 1046], "logx": [218, 349], "lohit": 1053, "loic": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "loki": [367, 1005, 1044, 1047], "lomp": 377, "lon": 768, "london": [412, 419, 469], "londschien": [1049, 1053], "lone": [1051, 1052], "long": [0, 30, 43, 50, 51, 79, 95, 147, 176, 183, 187, 189, 214, 248, 249, 251, 275, 305, 312, 322, 353, 354, 362, 367, 377, 379, 387, 391, 393, 394, 405, 411, 456, 502, 542, 680, 681, 682, 807, 808, 843, 844, 845, 846, 847, 865, 866, 876, 1005, 1011, 1015, 1016, 1018, 1019, 1023, 1038, 1042, 1048, 1050], "long_term_trend_kernel": 176, "long_titl": 346, "longer": [0, 43, 70, 86, 138, 187, 188, 202, 309, 324, 379, 381, 411, 415, 418, 419, 452, 540, 567, 1000, 1004, 1005, 1007, 1010, 1020, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "longest": 292, "longitud": [305, 312, 374, 502, 703, 768], "longpathsen": 397, "longstand": [1037, 1043], "loo": [393, 812, 1047], "look": [43, 44, 64, 86, 88, 121, 124, 126, 147, 148, 171, 176, 177, 183, 187, 188, 216, 234, 238, 241, 248, 263, 266, 267, 272, 274, 286, 309, 328, 353, 354, 362, 367, 368, 373, 374, 379, 380, 381, 383, 385, 387, 391, 392, 411, 414, 416, 417, 418, 419, 451, 491, 492, 561, 562, 563, 564, 568, 569, 606, 607, 635, 663, 696, 888, 916, 917, 918, 919, 1001, 1002, 1015, 1019, 1020, 1022, 1036, 1044, 1046], "lookup": [388, 969, 1045], "loop": [46, 47, 138, 147, 187, 267, 277, 353, 361, 366, 379, 380, 385, 411, 415, 420, 650, 651, 656, 657, 663, 664, 665, 666, 667, 994, 1018, 1019, 1039, 1040, 1043, 1048, 1049, 1052, 1053], "loopym": 1046, "loos": [263, 269, 1020, 1044], "looser": 207, "lopusz": 1047, "lorain": 326, "lorek": 1043, "lorentzen": [0, 400, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "lorenz": [214, 232, 1041, 1053], "lorenz_curv": [214, 232], "lose": [218, 231, 355, 374, 393, 414, 419, 421, 951, 952, 995, 1001], "losi": [0, 401, 1036], "loss": [2, 25, 46, 52, 61, 62, 63, 64, 130, 141, 146, 147, 148, 149, 171, 172, 184, 193, 197, 204, 207, 216, 218, 219, 221, 222, 226, 232, 247, 266, 280, 308, 309, 317, 324, 328, 329, 335, 339, 340, 344, 346, 349, 353, 391, 393, 409, 416, 421, 467, 468, 500, 512, 513, 536, 542, 543, 544, 547, 551, 556, 557, 558, 562, 563, 564, 565, 566, 569, 647, 650, 653, 662, 663, 670, 671, 672, 673, 674, 675, 676, 680, 681, 682, 683, 707, 710, 713, 726, 727, 738, 739, 744, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 794, 795, 800, 804, 807, 808, 818, 830, 831, 834, 865, 866, 868, 869, 872, 873, 881, 882, 883, 888, 908, 909, 914, 915, 917, 919, 952, 956, 998, 1001, 1009, 1013, 1018, 1019, 1020, 1021, 1026, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "loss_": [308, 865, 866, 1009, 1050], "loss_curve_": [308, 865, 866], "loss_func": 52, "loss_funct": 52, "loss_function_": 1053, "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 52, "lossfunct": 1045, "lossi": 411, "lossili": 393, "lost": [58, 90, 113, 374, 380, 391, 405, 1002, 1005], "lostanlen": 1046, "lostcoast": 1046, "lot": [43, 113, 150, 187, 218, 374, 379, 380, 381, 387, 416, 418, 807, 808, 900, 901, 994, 1017, 1019, 1020, 1024, 1025, 1029, 1036, 1041, 1043, 1044, 1045, 1046, 1048], "lot_area": 251, "lotan": 1029, "lotconfig": 144, "lotfrontag": 107, "loui": [326, 1041, 1042, 1046, 1048, 1050, 1052, 1053], "louib": [1044, 1045], "loupp": [0, 401, 418, 559, 560, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "lourida": 1042, "low": [2, 37, 43, 50, 51, 72, 83, 112, 116, 123, 125, 128, 135, 138, 151, 169, 189, 207, 209, 214, 216, 218, 228, 234, 236, 241, 245, 251, 257, 258, 260, 263, 265, 266, 272, 274, 278, 279, 298, 299, 309, 316, 318, 319, 327, 334, 341, 342, 353, 361, 375, 376, 379, 384, 387, 391, 393, 397, 408, 409, 410, 415, 416, 419, 445, 447, 452, 471, 525, 528, 539, 586, 593, 607, 683, 696, 700, 709, 730, 746, 793, 853, 882, 889, 906, 952, 969, 994, 1000, 1001, 1002, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1015, 1017, 1020, 1021, 1027, 1031, 1037, 1040, 1041, 1042, 1044, 1045, 1050, 1051], "low_cardin": 318, "low_cardinality_featur": 318, "low_cardinalityindex": 318, "low_i": 209, "low_x": 209, "lower": [37, 44, 52, 63, 64, 67, 69, 91, 110, 116, 118, 121, 123, 128, 135, 138, 141, 143, 147, 150, 151, 167, 171, 173, 175, 177, 179, 187, 188, 189, 199, 200, 202, 204, 214, 215, 216, 217, 227, 234, 238, 244, 245, 250, 259, 263, 266, 271, 272, 274, 275, 279, 280, 282, 285, 286, 295, 296, 298, 299, 314, 317, 325, 329, 334, 342, 353, 354, 355, 358, 374, 379, 393, 409, 410, 411, 414, 415, 416, 417, 418, 419, 422, 447, 451, 467, 470, 502, 513, 536, 538, 545, 548, 563, 564, 565, 566, 567, 592, 593, 595, 607, 615, 617, 618, 619, 621, 623, 624, 626, 627, 629, 636, 637, 639, 641, 681, 683, 716, 720, 729, 732, 738, 743, 801, 802, 854, 856, 858, 859, 860, 862, 889, 908, 909, 910, 911, 912, 915, 938, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1019, 1020, 1021, 1038, 1039, 1044, 1051, 1053], "lower_bound": 271, "lower_bound_": [801, 802, 1044], "lowercas": [419, 427, 445, 446, 448, 450, 452, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 592, 593, 595, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 869, 874, 900, 901, 1049], "lowest": [2, 107, 116, 188, 199, 262, 373, 411, 415, 639, 641, 807, 808, 811, 915, 916, 1002, 1005, 1021, 1051], "loyal": 1041, "loyola": [0, 369, 1049, 1050], "lo\u00efc": [0, 400, 1044, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "lp_model": [331, 332], "lpgo": [415, 813], "lpo": 814, "lprun": 385, "lr": [62, 64, 140, 157, 158, 217, 243, 244, 268, 275, 392, 402, 418, 572, 573, 574, 716, 988], "lr_": 1005, "lr__c": 418, "lr_base": 275, "lrap": [743, 1005], "lrjball": [1046, 1047], "lrlinearregress": 158, "ls100": 336, "ls2010": 997, "ls30": 336, "ls50": 336, "ls_pipelin": 335, "lsa": [2, 416, 548, 1038], "lsa_vector": 354, "lshforest": [1040, 1043], "lsi": 416, "lsqr": [69, 319, 553, 676, 678, 691, 999, 1037, 1043, 1050], "lstrip": [67, 79, 95, 241, 307, 314], "lstsq": [130, 379, 661, 674], "lsturtew": 1049, "lsvc": 420, "lsvm": 192, "lsvm_score": 192, "lsvm_time": 192, "lt": [103, 104, 140, 155, 187, 262, 270, 284, 379, 399], "ltd": [266, 374], "ltg": [169, 376, 505], "ltorgo": 374, "ltsa": [234, 235, 236, 693, 697, 1002, 1055], "lu": [545, 548, 951, 952, 1042, 1043, 1044, 1045, 1052, 1053, 1054], "luangkot": 1043, "luca": [1036, 1046, 1047, 1048, 1049], "lucca": 1049, "luce": 1039, "lucen": 419, "lucgiffon": 1047, "luci": [0, 369, 390, 400, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "luciano": [1044, 1051], "lucieclair": 1050, "lucija": 1044, "lucio": 1045, "lucki": 362, "lucyleeow": 1047, "ludwig": 1036, "luessi": 1038, "lui": [662, 1037, 1039, 1040, 1044, 1053], "luiz": 1050, "luk": 1045, "luka": [1040, 1047, 1053, 1054], "luke": 1044, "lukowski": 1051, "luk\u00e1\u0161": 1053, "luna": 1050, "lunt": 1039, "luo": 1040, "lupo": 1048, "luqi": 1045, "luqu": 1046, "lurk": 1036, "lustig": 1001, "lutz": [1042, 1046, 1049, 1053], "luxburg": [411, 455, 465, 695], "luzgin": 1046, "lv_ep": 246, "lvdmaaten": [696, 1043], "lw": [93, 109, 110, 112, 125, 129, 130, 208, 215, 217, 220, 224, 231, 237, 260, 267, 282, 297, 312, 333, 348], "lw_cov_": 113, "lw_mse": 110, "lw_prec_": 113, "lw_score": 128, "lw_shrinkag": 110, "lwda": 453, "lx": 1008, "ly": [246, 856, 858, 859, 860, 1040], "ly648499246": 1049, "lynch": [1037, 1043], "lyon": [1042, 1043], "lyra": [1037, 1040, 1041], "lyrl2004": [374, 501], "l\u00e9o": 1044, "l\u00e9on": [1019, 1050, 1051, 1052], "l\u00e9onard": [1046, 1051], "l\u00e9one": 1042, "l\u00e9oni": 1042, "l\u00f3pez": [1040, 1044, 1045, 1048], "l\u00f6fstedt": 1043, "l\u00f6ning": 1048, "m": [0, 43, 47, 50, 57, 63, 64, 79, 91, 92, 96, 97, 98, 111, 112, 121, 135, 158, 197, 214, 232, 272, 276, 305, 328, 335, 338, 348, 353, 366, 367, 373, 374, 376, 377, 379, 383, 385, 393, 397, 408, 409, 411, 413, 416, 418, 420, 422, 447, 448, 449, 453, 460, 476, 477, 504, 517, 532, 536, 538, 540, 545, 643, 649, 653, 668, 675, 689, 690, 693, 697, 712, 720, 730, 745, 760, 762, 763, 801, 802, 854, 879, 952, 983, 984, 995, 997, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1015, 1019, 1021, 1029, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054], "m1": [377, 407], "m11": 374, "m2": 407, "m2012": 998, "m2019": 1012, "m_max": 173, "ma": [113, 318, 342, 1001, 1042, 1047], "maascha": 1051, "maaten": [696, 700, 1002], "mabel": [1044, 1048], "mabu": 1049, "mac": [57, 318, 335, 374, 379, 712, 1005], "macaulei": 318, "macbook": 1044, "macdonald": [1046, 1047], "mach": [277, 409, 415, 597, 598], "machado": [409, 727], "machin": [0, 2, 39, 43, 45, 47, 48, 52, 64, 96, 105, 141, 161, 165, 166, 169, 171, 176, 185, 189, 204, 209, 226, 254, 266, 272, 275, 278, 289, 306, 312, 317, 319, 323, 326, 329, 338, 343, 346, 349, 353, 355, 366, 367, 372, 373, 374, 376, 379, 382, 386, 391, 392, 393, 396, 399, 405, 409, 411, 415, 416, 418, 419, 421, 440, 442, 451, 474, 475, 481, 506, 508, 514, 520, 521, 522, 534, 536, 538, 545, 548, 559, 560, 561, 562, 563, 564, 568, 569, 570, 597, 598, 614, 615, 618, 623, 626, 638, 642, 643, 645, 647, 648, 649, 654, 655, 658, 659, 660, 661, 662, 663, 680, 686, 687, 696, 712, 717, 729, 739, 745, 747, 789, 792, 801, 833, 834, 848, 849, 854, 857, 864, 865, 866, 868, 886, 888, 894, 908, 909, 910, 911, 913, 914, 918, 919, 994, 995, 997, 998, 1001, 1002, 1003, 1005, 1006, 1008, 1011, 1012, 1013, 1015, 1019, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1036, 1038, 1048, 1049, 1050, 1051, 1053], "machineri": 957, "maciej": 1047, "maci\u00e0": [1005, 1049, 1051], "mackai": [648, 649, 1001], "mackenbach": 1047, "maco": [380, 382, 397, 407, 1044, 1048, 1050], "macosx": 1036, "macro": [45, 68, 102, 166, 270, 310, 321, 331, 332, 374, 415, 711, 717, 733, 734, 742, 787, 788, 791, 792, 826, 1005, 1036, 1044, 1052], "macro_roc_auc_ovo": 281, "macro_roc_auc_ovr": 281, "macroscop": 411, "macsween": [1045, 1046], "mad": [675, 1042], "madan": 1048, "made": [0, 52, 64, 102, 112, 126, 135, 141, 158, 178, 187, 188, 214, 232, 251, 263, 276, 318, 322, 342, 358, 366, 374, 376, 379, 383, 393, 394, 402, 411, 418, 419, 423, 446, 449, 450, 452, 462, 500, 507, 592, 593, 595, 634, 635, 660, 669, 683, 689, 690, 739, 787, 804, 807, 808, 818, 822, 823, 824, 845, 848, 849, 1006, 1011, 1021, 1024, 1029, 1036, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1049, 1050, 1054], "madelon": 519, "madhura": [1045, 1047, 1048, 1051, 1052], "madinak": 1051, "madsen": [1042, 1044], "mae": [43, 52, 155, 214, 216, 562, 569, 749, 917, 919, 1005, 1021, 1043, 1044, 1048, 1049], "mae_test": 187, "mae_train": 187, "maennel": 1051, "magali": 1050, "magazin": [112, 420], "magda": 1047, "magenta": [109, 149], "maggi": [1050, 1054], "maggiecheg": [1046, 1050], "maggio": [1047, 1048, 1049], "magic": [248, 380, 385, 421, 620, 625, 628], "magnesium": 376, "magnitud": [43, 130, 137, 172, 183, 187, 231, 251, 277, 312, 317, 324, 329, 366, 374, 385, 411, 418, 421, 617, 656, 708, 888, 1001, 1005, 1009, 1015, 1019, 1021, 1038, 1045, 1054], "mahajan": [1044, 1046, 1053], "mahal": 111, "mahal_emp_cov": 111, "mahal_robust_cov": 111, "mahalanobi": [108, 112, 184, 217, 411, 413, 453, 460, 472, 473, 474, 475, 476, 477, 478, 479, 703, 782, 783, 784, 999, 1008, 1011, 1026, 1044, 1047, 1048], "mahalanobisdist": 703, "mahapatra": 1043, "mahdavi": 643, "maheshakya": [0, 1039, 1040, 1041], "mahieux": 1029, "mahimkar": 1054, "mahmood": 1054, "mahout": 845, "mai": [0, 2, 25, 47, 57, 62, 74, 79, 80, 89, 103, 116, 121, 144, 145, 150, 169, 175, 177, 179, 187, 190, 192, 195, 199, 203, 218, 220, 239, 248, 251, 275, 277, 279, 280, 286, 307, 317, 332, 342, 346, 349, 353, 354, 355, 362, 366, 367, 368, 371, 373, 374, 375, 376, 378, 379, 381, 383, 384, 387, 391, 393, 394, 397, 402, 405, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 434, 442, 443, 444, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 462, 465, 468, 472, 475, 485, 486, 487, 490, 491, 492, 500, 512, 513, 519, 538, 539, 542, 544, 545, 548, 551, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 578, 585, 598, 601, 606, 614, 615, 621, 624, 638, 639, 641, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 680, 681, 682, 683, 685, 688, 690, 692, 693, 695, 696, 697, 699, 701, 709, 715, 716, 719, 720, 722, 723, 725, 726, 727, 728, 730, 742, 760, 767, 789, 790, 804, 806, 807, 808, 809, 818, 819, 820, 823, 824, 829, 833, 836, 841, 842, 843, 844, 845, 847, 850, 851, 852, 854, 856, 858, 859, 860, 866, 867, 868, 871, 873, 883, 885, 886, 887, 888, 889, 891, 897, 900, 901, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 932, 934, 935, 941, 955, 956, 994, 995, 997, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "maikia": [1044, 1045, 1047, 1048], "mail": [374, 379, 383, 387, 391, 394, 1044, 1045], "mailhot": 1036, "mailman": 387, "main": [2, 37, 48, 68, 95, 116, 125, 144, 184, 241, 281, 291, 320, 349, 353, 366, 367, 368, 372, 377, 379, 381, 383, 385, 387, 391, 392, 393, 396, 397, 409, 411, 416, 418, 419, 421, 507, 529, 534, 553, 554, 629, 717, 838, 908, 909, 994, 1002, 1004, 1005, 1012, 1017, 1025, 1028, 1036, 1039, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "mainak": 1043, "maingret": 1047, "mainli": [64, 86, 135, 138, 171, 281, 289, 366, 381, 409, 615, 1007, 1012], "maint": 383, "maintain": [88, 219, 232, 234, 248, 272, 367, 378, 382, 385, 386, 387, 391, 393, 394, 397, 411, 418, 443, 445, 877, 878, 884, 885, 888, 893, 896, 897, 899, 1001, 1002, 1015, 1024, 1025, 1031, 1051, 1055], "mainten": [0, 379, 387, 391, 397, 404, 1001, 1025, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "mainy": 1048, "mair": 639, "mairal": [416, 535, 541], "maisonneuv": 1048, "maithreyi": 1046, "maj": 573, "major": [2, 49, 54, 70, 141, 266, 279, 312, 316, 321, 322, 323, 324, 325, 326, 327, 328, 346, 355, 366, 374, 378, 379, 383, 385, 391, 394, 405, 411, 415, 417, 419, 555, 573, 574, 698, 920, 922, 1005, 1008, 1019, 1025, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "majorfeatur": 383, "make": [0, 2, 43, 46, 47, 50, 52, 54, 55, 58, 59, 62, 63, 64, 74, 75, 78, 79, 89, 94, 95, 100, 105, 126, 135, 141, 144, 147, 150, 153, 166, 169, 171, 176, 179, 186, 187, 188, 189, 194, 199, 200, 203, 206, 207, 208, 210, 214, 215, 216, 218, 220, 232, 235, 243, 245, 247, 248, 249, 251, 257, 259, 262, 263, 266, 267, 272, 274, 275, 281, 282, 283, 286, 291, 301, 309, 312, 313, 318, 325, 327, 329, 342, 351, 353, 354, 355, 362, 366, 367, 368, 373, 374, 377, 378, 380, 381, 382, 383, 384, 385, 387, 391, 393, 397, 402, 405, 408, 409, 411, 412, 413, 415, 416, 418, 419, 420, 423, 443, 444, 445, 446, 448, 450, 452, 454, 455, 456, 461, 462, 463, 465, 491, 507, 518, 519, 526, 527, 531, 536, 538, 545, 555, 556, 559, 560, 565, 566, 587, 588, 611, 612, 635, 653, 659, 660, 675, 695, 699, 734, 741, 746, 772, 773, 785, 801, 802, 804, 806, 809, 815, 819, 820, 823, 824, 830, 831, 838, 839, 842, 875, 884, 887, 888, 892, 896, 898, 899, 900, 901, 914, 922, 927, 934, 935, 946, 952, 959, 965, 990, 995, 997, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "make_": 1045, "make_biclust": [2, 59, 517, 1038], "make_blob": [2, 61, 63, 69, 73, 77, 78, 79, 82, 88, 89, 90, 92, 93, 95, 96, 97, 206, 226, 241, 260, 315, 322, 325, 340, 343, 344, 350, 375, 382, 418, 519, 700, 714, 796, 797, 924, 1044, 1047, 1050], "make_cbar": 283, "make_checkerboard": [2, 58, 515, 1038], "make_circl": [2, 67, 79, 95, 126, 153, 239, 307, 308, 314, 333, 375, 1037, 1044, 1047], "make_classif": [2, 62, 64, 67, 139, 140, 142, 166, 168, 269, 275, 283, 284, 302, 307, 314, 321, 323, 327, 329, 349, 362, 375, 382, 407, 410, 418, 440, 441, 490, 516, 557, 559, 561, 568, 609, 611, 670, 701, 702, 704, 706, 803, 826, 827, 832, 833, 835, 838, 865, 868, 908, 915, 994, 1005, 1006, 1015, 1020, 1042, 1043, 1044, 1046], "make_column_selector": [2, 103, 144, 155, 251, 412, 467, 470, 1046], "make_column_transform": [2, 144, 155, 187, 243, 322, 412, 467, 469, 1044], "make_data": [70, 94], "make_dataset": 1045, "make_default": 974, "make_ellips": 259, "make_estim": 251, "make_friedman1": [2, 375, 418, 543, 547, 597, 598, 636], "make_friedman2": [2, 375, 615, 617, 618, 619, 620, 621, 625, 628, 629], "make_friedman3": [2, 375], "make_gaussian_quantil": [2, 135, 137, 375, 473, 477, 478, 479, 484, 524], "make_hastie_10_2": [2, 149, 276, 375, 418, 563, 1012], "make_heatmap": 283, "make_low_rank_matrix": [2, 327, 329, 528], "make_ml_clf": 119, "make_moon": [2, 67, 79, 95, 241, 272, 307, 308, 314, 375, 994, 1043, 1047], "make_multilabel_classif": [2, 119, 249, 375, 519, 540, 792, 839, 840, 1005, 1038, 1039, 1041, 1047], "make_pipelin": [2, 43, 67, 91, 116, 140, 144, 155, 165, 166, 169, 182, 183, 187, 188, 192, 194, 201, 203, 214, 215, 220, 228, 232, 235, 241, 242, 243, 251, 252, 253, 255, 266, 269, 279, 286, 292, 301, 307, 314, 317, 318, 319, 321, 322, 323, 324, 325, 326, 354, 362, 392, 402, 412, 415, 571, 680, 682, 860, 868, 893, 894, 896, 897, 898, 899, 908, 909, 910, 911, 913, 914, 995, 1008, 1015, 1019, 1020, 1039, 1046, 1049], "make_plot": 312, "make_regress": [2, 49, 107, 194, 196, 197, 200, 217, 218, 285, 322, 328, 362, 375, 382, 392, 558, 560, 564, 569, 610, 612, 613, 639, 650, 651, 653, 655, 656, 657, 659, 664, 665, 666, 667, 668, 669, 671, 675, 683, 685, 686, 687, 689, 690, 691, 866, 909, 926, 1005, 1006, 1008], "make_s_curv": [2, 234, 239], "make_scor": [2, 52, 147, 150, 266, 276, 329, 402, 410, 415, 715, 804, 826, 830, 831, 1005, 1045, 1053, 1055], "make_sparse_coded_sign": [2, 213, 535, 541, 549, 550, 1050, 1052], "make_sparse_spd_matrix": [2, 113, 481, 533, 1053], "make_sparse_uncorrel": [2, 375], "make_spd_matrix": [2, 531], "make_subplot": 141, "make_swiss_rol": [2, 100, 238, 1050], "make_union": [2, 412, 867, 1039, 1043], "makedir": 1043, "maker": [186, 187], "makhija": 1051, "makoeppel": 1049, "maksym": 1051, "maladier": 1051, "maladi\u00e8r": [1051, 1052], "malcolm": 1044, "maldonado": [1046, 1049], "male": [103, 187, 326, 384, 881, 882, 1015], "malem": 1053, "malet": 1036, "malform": [55, 1040], "malic": [317, 376], "malic_acid": 48, "malici": 405, "malign": [169, 376, 504], "malik": [411, 455, 465, 695], "mallat": [668, 689, 690, 1001], "mallatpursuit93": [668, 689, 690], "mallow": [735, 1042], "maloo": [1044, 1045], "malt": [1049, 1050, 1051, 1053], "maltimor": 1046, "malu": 232, "malzer": 449, "mal\u00e9zieux": 1049, "mamba": 405, "mame": 1053, "mammal": 50, "mammalian": 416, "man": [416, 594, 773, 843, 847, 1003, 1005, 1007], "manag": [0, 2, 116, 255, 365, 373, 377, 380, 381, 383, 387, 391, 393, 394, 405, 418, 453, 471, 630, 906, 999, 1021, 1024, 1025, 1029, 1031, 1049, 1052, 1055], "manaileng": 1049, "manasimj": 1054, "mandal": 1046, "mandatori": [379, 419], "mandatorili": 1043, "mandera": 1039, "mandi": [1047, 1050], "mandjev": 1050, "mandyam": 1046, "mangasarian": [169, 376], "mangipudi": 1042, "manh": 1044, "manhattan": [411, 444, 448, 453, 460, 703, 766, 775, 782, 783, 784, 855, 1003, 1008, 1040, 1045, 1052], "manhattan_dist": [2, 453, 460, 692, 766, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 1036, 1046, 1051, 1052], "manhattandist": 703, "mani": [43, 46, 49, 57, 88, 89, 106, 109, 113, 135, 141, 142, 143, 148, 165, 169, 189, 214, 234, 245, 258, 265, 266, 272, 280, 284, 285, 292, 312, 317, 318, 321, 322, 323, 324, 325, 327, 328, 329, 353, 362, 366, 368, 374, 376, 378, 379, 381, 392, 393, 394, 397, 405, 408, 409, 411, 412, 413, 416, 418, 419, 420, 421, 423, 507, 545, 557, 558, 561, 562, 563, 564, 568, 569, 570, 610, 613, 631, 643, 654, 658, 662, 663, 670, 671, 672, 680, 681, 682, 696, 699, 778, 782, 804, 808, 818, 865, 866, 881, 886, 888, 908, 916, 917, 918, 919, 994, 995, 997, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1018, 1020, 1022, 1023, 1024, 1025, 1029, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1051, 1052], "manideep": 1054, "manifest": [387, 1002, 1008], "manifold": [2, 51, 74, 85, 100, 140, 237, 238, 239, 245, 292, 302, 321, 325, 326, 333, 372, 393, 411, 416, 418, 506, 529, 534, 548, 553, 570, 692, 693, 694, 695, 696, 697, 698, 699, 700, 857, 869, 878, 901, 937, 1008, 1026, 1030, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1053], "manimaran": [1045, 1047, 1048, 1049, 1050], "manipul": [2, 373, 407, 511, 1024, 1042], "manish": 1047, "maniteja": [1042, 1043, 1044], "mankoo": 1051, "mann": 1046, "mannbi": 1044, "manner": [43, 107, 121, 166, 188, 192, 259, 325, 326, 367, 379, 385, 411, 416, 418, 419, 713, 848, 849, 994, 1005, 1021, 1039, 1046], "mannila": 1017, "manning2008": 1005, "manoharan": [1043, 1044], "manoj": [0, 169, 401, 1039, 1040, 1041, 1042, 1043], "manraj": 1043, "mansi": 1051, "mansingh": 1050, "mansouri": 1052, "mantovani": 1051, "manu": 374, "manual": [2, 43, 80, 88, 187, 188, 190, 215, 225, 274, 292, 334, 340, 353, 355, 366, 367, 374, 379, 383, 384, 391, 392, 397, 405, 411, 415, 416, 417, 440, 452, 571, 803, 826, 858, 881, 887, 994, 999, 1000, 1001, 1004, 1005, 1008, 1015, 1025, 1044, 1046, 1052, 1054], "manuel": [1036, 1040, 1044, 1045, 1048, 1049, 1054], "manufactur": [187, 418], "manvendra": [1042, 1043], "maocx": 1046, "map": [2, 23, 37, 43, 44, 49, 50, 55, 57, 63, 86, 116, 126, 139, 146, 149, 153, 171, 184, 192, 214, 232, 234, 236, 240, 248, 251, 273, 276, 281, 300, 303, 305, 311, 312, 335, 342, 346, 354, 355, 373, 374, 380, 391, 393, 402, 405, 409, 411, 412, 415, 416, 418, 419, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 500, 502, 506, 513, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 766, 769, 801, 802, 803, 804, 807, 808, 815, 816, 818, 826, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 896, 897, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 958, 961, 962, 994, 997, 1002, 1005, 1007, 1017, 1020, 1021, 1026, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053], "mapd": 1005, "mape": [2, 52, 750, 1005], "mape_cv_mean": 144, "mape_cv_std": 144, "mapi": 52, "mar": 51, "marc": [1043, 1045, 1046, 1052, 1055], "march": [176, 730, 760, 1005, 1036, 1040, 1044, 1046, 1051], "marchand": 1050, "marchman": [1037, 1038], "marco": [1042, 1044, 1045, 1049, 1050, 1051, 1054], "marcofalk": 1043, "marcogorelli": [1044, 1045], "marcolini": 1049, "marcom": 1050, "marcu": [1044, 1053], "mare": 1053, "marek": [1036, 1053], "maren": [0, 369, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "margeta": 1044, "margin": [30, 43, 51, 62, 64, 137, 162, 172, 173, 174, 175, 176, 177, 184, 187, 188, 193, 224, 225, 227, 249, 251, 272, 289, 312, 315, 318, 337, 338, 340, 341, 342, 344, 346, 350, 351, 376, 409, 416, 418, 421, 516, 614, 615, 635, 649, 680, 739, 837, 885, 897, 910, 913, 1001, 1005, 1007, 1011, 1012, 1015, 1019, 1020, 1026, 1043, 1045], "marguli": 1046, "mari": [102, 1044, 1045, 1046, 1047, 1050], "maria": [169, 411, 1047, 1048, 1049, 1050, 1051], "mariam": 1048, "mariana": 1047, "mariangela": 1049, "mariano": 272, "mariel": 1047, "marielaraj": 1049, "marija": [1047, 1048, 1054], "marijn": 1048, "marin": [532, 1054], "marina": 411, "marinelm": 1045, "mario": [409, 1040, 1042, 1050, 1051, 1052], "marit": [328, 500], "mari\u00e9": [0, 369, 1045, 1046, 1047, 1048, 1049, 1050], "mark": [2, 70, 91, 119, 164, 183, 276, 283, 371, 379, 383, 387, 388, 393, 411, 539, 611, 612, 615, 636, 662, 861, 862, 903, 904, 921, 927, 942, 947, 952, 1001, 1029, 1031, 1036, 1037, 1042, 1044, 1045, 1052, 1053, 1054], "markdown": 382, "marker": [49, 50, 55, 64, 66, 70, 72, 73, 77, 85, 88, 91, 92, 93, 96, 97, 115, 119, 123, 141, 154, 178, 179, 192, 201, 207, 209, 211, 212, 214, 216, 217, 229, 231, 235, 257, 259, 260, 266, 267, 272, 274, 275, 276, 299, 312, 317, 333, 357, 382, 383, 419, 1044, 1046, 1047, 1052], "markeredgecolor": [82, 88, 94, 96, 97], "markeredgewidth": [111, 276], "markerfacecolor": [82, 88, 94, 96, 97], "markers": [82, 88, 91, 94, 96, 97, 147, 174, 178, 244, 266, 325], "markerstyl": 266, "market": [42, 80, 85, 150, 184, 234, 235, 411, 413, 457, 474, 475, 693, 1002, 1026, 1029], "marketplac": 1029, "markham": [1040, 1047, 1048], "markiwanchyshyn": 1044, "marko": [1036, 1045, 1046, 1052], "markou": 1049, "markov": [421, 615, 1010, 1024, 1036], "markovtsev": 1044, "marktab": 1041, "marku": [411, 453, 460, 1044, 1046, 1047, 1048], "marmo": [0, 370, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "maron": [411, 445], "marr": 187, "marr_unmarri": 187, "marreddi": 1050, "marri": 187, "marriott": 51, "marsgui": 1044, "marsh": 1047, "marshal": 376, "marsi": 1039, "marsland": 534, "marslast": 534, "marszalek": [762, 763, 1003], "mart": [51, 1046], "martel": 1050, "martha": 318, "martian": 1046, "martin": [0, 369, 725, 727, 728, 1001, 1005, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1054], "martin1997": 1005, "martina": [1046, 1048], "martinbpr": [1041, 1042], "martinez": 1043, "martino": 1041, "martinosorb": 1041, "martinsson": [55, 539, 545, 952], "martynov": 1049, "mart\u00edn": [1049, 1050], "marufo": 1051, "marufur": 1043, "marvin": [1051, 1052], "marwaha": 1044, "marx": 1015, "maryanmorel": [1041, 1042], "marzinotto": [1044, 1045], "mar\u00eda": [1050, 1051, 1052], "mas_vnr_typ": 251, "masafumi": 1041, "masanori": [1051, 1052], "masashi": [1046, 1048], "masecchia": 1036, "mash": 419, "mask": [2, 53, 77, 99, 214, 222, 251, 270, 271, 335, 388, 393, 412, 418, 467, 472, 477, 565, 566, 585, 589, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 633, 634, 636, 637, 653, 675, 804, 807, 808, 818, 976, 995, 1012, 1036, 1039, 1041, 1042, 1044, 1046, 1054], "mask_al": 995, "mask_false_neg": 266, "mask_false_posit": 266, "mask_missing_values_onli": 995, "mask_out": 53, "mask_test": 232, "mask_train": [188, 232], "mask_true_neg": 266, "mask_true_posit": 266, "mask_y_pr": 66, "maskani": [1044, 1046, 1047, 1048], "masked_arrai": [342, 804, 818], "masked_equ": 113, "maskedarrai": [276, 1042], "mason": 1040, "mass": [169, 252, 376, 449, 801, 1001, 1012], "massachusett": 374, "massia": [0, 1047, 1049, 1050], "massich": [1043, 1044, 1045, 1046], "massil": 1042, "masstran": 1045, "master": [51, 292, 326, 379, 1029], "masurel": 1037, "masvnrarea": [107, 155], "masvnrtyp": [144, 155], "mat": [373, 419], "match": [2, 43, 58, 72, 87, 121, 122, 124, 127, 130, 141, 184, 192, 193, 214, 236, 244, 251, 346, 355, 374, 377, 381, 411, 416, 418, 419, 432, 452, 467, 469, 495, 512, 513, 519, 530, 535, 541, 546, 552, 555, 571, 572, 576, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 662, 668, 669, 689, 690, 703, 707, 708, 709, 717, 719, 723, 738, 782, 783, 784, 790, 848, 849, 853, 857, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 908, 915, 921, 938, 1002, 1004, 1005, 1007, 1008, 1026, 1027, 1031, 1036, 1042, 1043, 1044, 1046, 1048, 1049, 1052, 1054], "matchingdist": 703, "matchmak": 1029, "matcovici": 1046, "mate": 353, "matem\u00e1tica": 1001, "mateo": 1049, "materi": [53, 187, 328, 394, 545, 585, 898, 899], "matern": [2, 180, 421, 1047, 1051], "mateusz": [1040, 1047, 1048, 1053, 1054], "math": [82, 102, 150, 169, 251, 272, 273, 376, 397, 768], "mathbb": [121, 138, 174, 414, 1005, 1012, 1020], "mathbf": [174, 346, 416, 1001, 1005, 1009, 1010, 1019], "mathcal": [218, 349, 416, 418, 631, 700, 997, 999, 1001, 1005, 1019, 1049], "mathemat": [37, 135, 187, 201, 231, 275, 371, 376, 379, 393, 396, 411, 413, 416, 417, 421, 553, 554, 561, 568, 639, 650, 660, 796, 797, 802, 866, 910, 913, 916, 918, 1001, 1005, 1009, 1015, 1017, 1027, 1029, 1031, 1050], "matheu": 1042, "mathew": 1051, "mathi": 1049, "mathia": 1050, "mathieu": [0, 401, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1049], "mathrm": [411, 413, 416, 420, 1001, 1021], "mathschi": 1048, "mathur": [1043, 1045, 1046, 1051, 1052, 1054], "mathurin": [0, 1047, 1049, 1050], "mathurinm": [1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "matjansen": 1050, "mato": 1048, "matplotlib": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 190, 192, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 325, 326, 328, 331, 332, 333, 334, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 373, 375, 379, 386, 397, 404, 441, 506, 635, 636, 701, 702, 704, 705, 706, 810, 827, 922, 1000, 1024, 1033, 1045, 1048, 1049, 1050, 1051, 1054], "matric": [2, 37, 70, 74, 75, 111, 113, 121, 219, 258, 259, 261, 262, 263, 292, 305, 322, 328, 335, 353, 354, 371, 373, 381, 382, 391, 392, 393, 411, 412, 413, 414, 416, 419, 420, 426, 453, 454, 456, 467, 476, 484, 485, 486, 487, 530, 538, 539, 542, 544, 545, 548, 551, 553, 554, 559, 560, 567, 570, 585, 586, 593, 647, 650, 651, 656, 657, 662, 668, 676, 678, 691, 758, 764, 772, 778, 782, 783, 784, 785, 796, 801, 802, 834, 852, 855, 860, 871, 875, 877, 880, 883, 885, 886, 888, 891, 893, 895, 897, 898, 899, 900, 901, 910, 911, 913, 914, 930, 952, 959, 968, 975, 977, 978, 995, 997, 999, 1002, 1003, 1004, 1006, 1008, 1009, 1017, 1019, 1020, 1024, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "matrix": [2, 8, 11, 42, 45, 46, 48, 52, 53, 57, 58, 59, 68, 70, 74, 76, 79, 87, 95, 102, 110, 111, 112, 113, 115, 121, 122, 123, 131, 178, 184, 190, 193, 200, 215, 219, 242, 245, 246, 248, 262, 264, 266, 279, 309, 325, 328, 331, 332, 346, 353, 354, 355, 361, 366, 374, 375, 376, 379, 381, 385, 388, 391, 392, 393, 408, 412, 413, 414, 419, 420, 421, 422, 423, 433, 434, 441, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 457, 460, 462, 463, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 496, 500, 501, 504, 505, 506, 507, 508, 509, 512, 513, 514, 523, 525, 527, 528, 530, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 589, 590, 592, 593, 594, 595, 597, 598, 607, 608, 609, 610, 611, 612, 613, 615, 624, 633, 634, 635, 637, 639, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 711, 716, 717, 718, 719, 720, 722, 726, 733, 734, 735, 738, 742, 743, 744, 745, 758, 759, 762, 763, 764, 765, 767, 768, 770, 771, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 791, 792, 796, 797, 800, 801, 802, 803, 804, 807, 808, 818, 826, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 871, 872, 873, 874, 875, 877, 879, 880, 881, 883, 885, 886, 887, 888, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 925, 930, 932, 933, 934, 935, 940, 949, 950, 951, 952, 953, 956, 958, 959, 967, 968, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 993, 995, 997, 999, 1001, 1002, 1006, 1007, 1008, 1009, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "matrixorz": 1039, "matshow": [58, 59, 99, 167, 309, 506], "matsubara": 1005, "matt": [1039, 1040, 1041, 1046, 1047, 1051, 1052], "matteo": [1040, 1042, 1050], "matter": [130, 263, 346, 362, 411, 412, 418, 571, 672, 680, 682, 1001, 1040], "matthew": [2, 378, 384, 540, 747, 1036, 1039, 1043, 1045, 1049, 1050, 1054], "matthews_corrcoef": [2, 1005, 1036, 1042, 1043, 1050], "matthia": [1036, 1038, 1039, 1042, 1043, 1044, 1048, 1051], "matthieu": [0, 401, 1036, 1040, 1051], "matti": [1037, 1040, 1041], "matur": [379, 1024, 1025], "mat\u00e9rn": 623, "mat\u00eda": 1050, "maud": 1039, "mauna": 176, "maura": 1047, "mauroantonioserrano": 1051, "mav": 1054, "mavani": 1044, "mavroforaki": [1040, 1042], "max": [43, 47, 49, 50, 51, 52, 55, 57, 62, 64, 67, 69, 75, 79, 85, 91, 95, 100, 104, 105, 108, 110, 113, 121, 124, 128, 131, 135, 137, 143, 149, 153, 160, 161, 162, 164, 165, 169, 173, 175, 176, 183, 184, 187, 197, 201, 203, 207, 209, 216, 217, 220, 228, 230, 232, 237, 245, 249, 270, 271, 272, 283, 291, 292, 294, 298, 299, 303, 305, 307, 309, 312, 314, 315, 317, 324, 329, 334, 336, 350, 366, 411, 413, 416, 472, 473, 474, 475, 476, 477, 478, 479, 480, 516, 540, 559, 560, 561, 562, 563, 564, 567, 568, 569, 610, 631, 635, 636, 652, 653, 673, 676, 678, 684, 695, 696, 700, 703, 708, 709, 761, 796, 797, 804, 865, 866, 877, 878, 880, 887, 894, 895, 916, 917, 918, 919, 1001, 1003, 1008, 1015, 1019, 1020, 1026, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "max_": [411, 1005], "max_abs_": 877, "max_abs_scal": 1015, "max_bin": [324, 325, 418, 565, 566, 1053], "max_categori": [318, 325, 327, 881, 882, 1015, 1050, 1052], "max_cluster_s": 449, "max_column": 232, "max_degre": [883, 1049], "max_depth": [46, 67, 136, 137, 140, 143, 144, 145, 146, 147, 148, 149, 153, 154, 156, 182, 235, 269, 284, 289, 323, 324, 357, 359, 360, 361, 392, 393, 410, 418, 557, 558, 561, 562, 563, 564, 565, 566, 568, 569, 570, 715, 807, 808, 832, 916, 917, 918, 919, 920, 921, 922, 994, 1012, 1021, 1045, 1047], "max_df": [54, 273, 335, 353, 354, 592, 595, 1047, 1054], "max_dist": 245, "max_doc_update_it": 540, "max_ep": [411, 453, 458, 459, 460], "max_error": [2, 407, 1005, 1045, 1055], "max_estim": 139, "max_featur": [54, 67, 139, 149, 250, 269, 284, 323, 418, 420, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 592, 595, 601, 916, 917, 918, 919, 994, 1001, 1036, 1038, 1039, 1043, 1044, 1047, 1050, 1053], "max_features_": [563, 564, 601, 916, 917, 918, 919, 1050], "max_fpr": [792, 1005, 1044], "max_fun": [865, 866, 1046], "max_i": [249, 1007], "max_idf": 1049, "max_it": [43, 47, 52, 54, 55, 62, 64, 66, 67, 104, 105, 121, 124, 140, 141, 144, 150, 157, 160, 161, 182, 183, 187, 188, 194, 200, 206, 207, 221, 222, 223, 226, 227, 229, 234, 235, 236, 237, 239, 252, 253, 257, 258, 259, 260, 263, 285, 302, 307, 308, 309, 318, 323, 324, 325, 331, 332, 339, 353, 354, 385, 393, 418, 423, 443, 446, 450, 451, 452, 457, 462, 464, 474, 475, 481, 485, 486, 487, 535, 536, 537, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 565, 566, 631, 642, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 676, 678, 680, 681, 682, 683, 684, 686, 687, 691, 692, 693, 694, 696, 697, 698, 801, 802, 818, 857, 865, 866, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 995, 997, 1001, 1008, 1009, 1018, 1019, 1037, 1040, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1054], "max_iter": 332, "max_iter_list": 150, "max_iter_predict": 614, "max_j": [650, 656], "max_leaf_nod": [135, 141, 149, 214, 324, 361, 418, 561, 562, 563, 564, 565, 566, 568, 569, 570, 916, 917, 918, 919, 1039, 1045, 1047], "max_n": [592, 593, 595, 1036], "max_n_alpha": [655, 659], "max_nbyt": 970, "max_no_improv": [77, 94, 97, 452, 541, 542, 543, 550, 1050, 1051], "max_patch": [83, 419, 587, 588, 1044], "max_resourc": [147, 807, 808, 994], "max_resources_": [807, 808], "max_sampl": [151, 182, 418, 559, 560, 561, 562, 567, 568, 569, 638, 1046, 1049, 1052], "max_samples_": 567, "max_skip": 675, "max_subpopul": [231, 683, 1050], "max_thread": [367, 380], "max_train_s": [43, 52, 415, 825, 1043], "max_trial": [675, 1001], "max_val": 938, "max_valu": [631, 1047, 1048], "max_x": 249, "maxabs_scal": [2, 393, 877, 1044], "maxabsscal": [2, 368, 407, 872, 893, 995, 1015, 1041, 1044, 1045, 1046, 1047, 1052, 1053], "maxent": [2, 662, 663, 1001], "maxent_du": 662, "maxi": 1051, "maxim": [115, 116, 118, 121, 131, 147, 194, 262, 263, 266, 273, 277, 281, 282, 285, 286, 302, 317, 323, 342, 346, 357, 361, 376, 393, 408, 410, 411, 414, 416, 418, 420, 421, 553, 598, 614, 615, 648, 649, 652, 673, 683, 684, 724, 804, 807, 808, 818, 877, 883, 893, 999, 1001, 1004, 1005, 1008, 1010, 1020, 1039, 1041, 1046, 1049, 1051, 1054], "maxima": 411, "maximesaur": [1051, 1052], "maximis": [160, 258, 300, 999, 1008], "maximum": [2, 43, 47, 50, 64, 69, 72, 90, 109, 110, 111, 112, 113, 123, 135, 137, 140, 141, 143, 150, 172, 174, 177, 178, 184, 193, 201, 251, 266, 282, 294, 298, 299, 305, 312, 337, 338, 340, 341, 344, 354, 357, 359, 360, 366, 374, 384, 385, 392, 393, 408, 409, 411, 413, 414, 416, 418, 419, 421, 422, 423, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 457, 460, 462, 464, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 485, 486, 487, 502, 513, 515, 516, 517, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 587, 588, 601, 614, 631, 635, 636, 639, 641, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 678, 680, 681, 682, 683, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 720, 748, 785, 801, 804, 807, 808, 810, 818, 825, 832, 857, 864, 865, 866, 872, 873, 877, 878, 880, 883, 884, 885, 887, 896, 897, 902, 903, 904, 905, 908, 909, 913, 916, 917, 918, 919, 920, 922, 931, 938, 994, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1015, 1019, 1020, 1021, 1026, 1043, 1044, 1046, 1047, 1050, 1051, 1053], "maxin": [1046, 1047], "maxsiz": 621, "maxval": [515, 517], "maxwel": [0, 369, 1046, 1049, 1050, 1051, 1052], "maxwelllzh": 1051, "may_share_memori": 1053, "mayb": [106, 309, 393, 419, 1020, 1025], "mayer": [418, 1048, 1050, 1053, 1054], "mayer2022": 418, "mayilvahanan": 411, "mayorov": [1039, 1040, 1041, 1042], "mayur": 1044, "mazari": 1044, "mb": [47, 245, 266, 353, 355, 374, 385, 500, 910, 911, 912, 913, 914, 1020, 1026, 1032], "mbilling": 1041, "mbillingr": 1046, "mbk": [77, 97], "mbk_means_cluster_cent": 97, "mbk_means_label": 97, "mbk_means_labels_uniqu": 77, "mblondel": [373, 512], "mbnmf": 54, "mc4229": 1047, "mc_clf": 1012, "mcar": 150, "mcc": [2, 747, 1005, 1050], "mccall": 102, "mccallum": [843, 1007], "mccarthi": [0, 363, 1036, 1044], "mcclish": [281, 792], "mcconaghi": 1029, "mccullagh": 1001, "mcculloh": [1041, 1042], "mcd": [2, 51, 111, 112, 413, 472, 477], "mcdermott": [1038, 1053], "mcdonald": 51, "mcdowel": 1044, "mcfadden": 1005, "mcfee": [1041, 1042], "mcgibbon": [1038, 1039, 1042], "mcgushion": 1045, "mcinn": [411, 1042, 1043, 1044, 1046, 1047, 1052], "mcivor": [1051, 1052], "mcm": [758, 1005], "mcm_": 758, "mcmahon": 1053, "mcsherri": [730, 760, 1005], "mctiernan": [1050, 1051], "mcve": [384, 391], "md": [2, 234, 235, 236, 237, 383, 692, 696, 698, 1030, 1031, 1036, 1048, 1051], "md5": 1048, "md5_checksum": 373, "md_scale": 234, "mdarii": 1052, "mdbecker": 1029, "mdi": [142, 148, 184, 185, 190, 418, 420, 467, 500, 568, 634, 638, 834, 868, 882, 1013, 1026], "mdi_import": [189, 190], "mds_result": 698, "me": 353, "me1": 289, "me2": 289, "me3": 289, "mea": 91, "mean": [2, 43, 44, 47, 50, 52, 53, 54, 57, 61, 62, 64, 70, 71, 72, 73, 75, 77, 79, 80, 82, 83, 86, 87, 88, 93, 103, 110, 111, 112, 113, 116, 119, 121, 124, 125, 126, 127, 128, 135, 137, 138, 141, 143, 144, 147, 148, 150, 155, 156, 157, 168, 169, 171, 176, 177, 178, 180, 182, 184, 187, 188, 195, 197, 203, 205, 207, 210, 214, 216, 220, 221, 223, 229, 230, 231, 232, 237, 239, 241, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 257, 258, 259, 260, 262, 263, 266, 268, 269, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 303, 312, 315, 317, 318, 319, 321, 324, 327, 329, 334, 342, 345, 346, 349, 351, 352, 353, 355, 362, 366, 371, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 391, 392, 393, 402, 408, 409, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 434, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 462, 463, 464, 465, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 491, 505, 506, 516, 523, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 587, 592, 593, 594, 595, 598, 601, 606, 610, 611, 612, 613, 614, 615, 617, 626, 631, 632, 634, 636, 637, 638, 639, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 688, 692, 693, 694, 695, 696, 697, 698, 699, 708, 709, 711, 713, 716, 717, 720, 721, 728, 730, 733, 734, 735, 740, 741, 742, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 778, 782, 783, 785, 787, 788, 789, 791, 792, 794, 795, 796, 797, 799, 801, 802, 803, 804, 807, 808, 810, 818, 822, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 855, 856, 858, 859, 861, 862, 864, 865, 866, 867, 869, 870, 872, 873, 877, 878, 880, 884, 886, 888, 889, 894, 896, 897, 899, 901, 903, 904, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 930, 934, 935, 937, 978, 979, 985, 989, 994, 995, 996, 999, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1018, 1019, 1020, 1021, 1026, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "mean_": [122, 276, 536, 537, 538, 543, 545, 547, 888, 1015, 1044], "mean_absolute_error": [2, 52, 214, 216, 232, 407, 1005, 1037, 1039, 1055], "mean_absolute_percentage_error": [2, 52, 144, 407, 1005, 1048, 1050, 1055], "mean_auc": 282, "mean_change_tol": 540, "mean_fit_tim": [141, 294, 804, 818], "mean_fpr": 282, "mean_gamma_devi": [2, 407, 1005, 1046, 1055], "mean_impute_scor": 183, "mean_l1_ratio": 1039, "mean_pinball_loss": [2, 52, 147, 150, 324, 1001, 1005, 1049], "mean_pinball_loss_95p": 1005, "mean_poisson_devi": [2, 214, 407, 1005, 1046, 1055], "mean_precis": 270, "mean_precision_": 801, "mean_precision_prior": [257, 263, 801], "mean_precision_prior_": 801, "mean_predict": [52, 178], "mean_predictions_gpr": 171, "mean_prior": 801, "mean_prior_": 801, "mean_recal": 270, "mean_scor": [104, 281, 284, 354, 1049], "mean_score_tim": [141, 270, 273, 804, 818], "mean_shift": [2, 1041, 1044], "mean_square_error": 1037, "mean_squared_error": [2, 46, 145, 147, 148, 210, 214, 216, 218, 220, 232, 362, 407, 418, 756, 1005, 1037, 1039, 1046, 1047, 1053, 1055], "mean_squared_log_error": [2, 407, 715, 1005, 1043, 1049, 1053, 1055], "mean_test_": 276, "mean_test_precis": [270, 276], "mean_test_recal": 270, "mean_test_scor": [103, 104, 105, 113, 141, 160, 168, 262, 271, 272, 273, 280, 283, 284, 294, 342, 475, 598, 804, 818, 994, 1042, 1049], "mean_tim": 1042, "mean_tpr": [281, 282], "mean_train_precis": [804, 818], "mean_train_scor": [804, 818, 1042], "mean_tweedie_devi": [2, 232, 407, 1005, 1046, 1055], "mean_variance_axi": [2, 388, 1042, 1049], "mean_y_pr": 176, "meaning": [72, 190, 239, 301, 329, 355, 408, 410, 415, 419, 420, 552, 733, 734, 742, 787, 788, 791, 857, 1009, 1019, 1020, 1036, 1052], "meaningfulli": [214, 1005], "meaningless": [188, 419, 910, 913, 1039], "means_": [70, 257, 258, 259, 260, 262, 263, 553, 554, 801, 802], "means_init": [259, 260, 802], "meanshift": [2, 79, 325, 411, 443, 1039, 1040, 1041, 1044, 1046, 1047, 1050, 1051, 1052, 1054], "meant": [90, 150, 169, 251, 329, 374, 388, 477, 497, 681, 854, 927, 970, 971, 993, 995, 1009, 1011, 1015, 1037], "meanwhil": [391, 1020], "measur": [2, 27, 43, 46, 47, 49, 50, 52, 57, 62, 72, 73, 82, 91, 93, 94, 122, 138, 139, 147, 151, 158, 169, 171, 176, 184, 186, 187, 188, 192, 203, 208, 213, 214, 218, 220, 232, 264, 270, 272, 278, 279, 317, 346, 353, 354, 366, 374, 376, 381, 385, 393, 408, 413, 415, 416, 417, 418, 419, 452, 455, 465, 502, 519, 542, 544, 551, 555, 561, 562, 563, 564, 567, 568, 569, 608, 611, 612, 615, 631, 635, 662, 694, 696, 702, 706, 708, 709, 711, 713, 716, 717, 720, 721, 724, 729, 730, 731, 733, 735, 740, 741, 743, 744, 747, 751, 759, 760, 761, 786, 787, 788, 790, 791, 792, 793, 796, 799, 829, 831, 834, 854, 885, 897, 916, 917, 918, 919, 925, 995, 1001, 1003, 1008, 1010, 1011, 1013, 1019, 1021, 1026, 1036, 1039, 1041, 1042, 1044, 1046], "mechan": [74, 248, 350, 353, 367, 379, 381, 405, 409, 411, 419, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 1003, 1021, 1029], "mecopur": 1053, "med": [57, 102, 281, 374, 1015], "meda": [107, 187, 1005], "media": [411, 1029], "median": [2, 43, 52, 72, 103, 107, 111, 112, 147, 182, 183, 187, 216, 220, 231, 243, 251, 312, 322, 324, 325, 374, 413, 418, 420, 443, 457, 461, 464, 477, 556, 558, 562, 569, 601, 631, 634, 639, 674, 675, 683, 725, 757, 855, 886, 898, 917, 919, 995, 1015, 1021, 1039, 1040], "median_absolute_error": [2, 107, 187, 1005, 1040, 1046, 1048], "median_predict": 52, "medic": [275, 415, 716, 1001, 1029], "medicin": [275, 716, 1005], "medina": [1036, 1038], "medinc": [312, 323, 374, 493], "medium": [42, 184, 247, 319, 342, 411, 647, 882, 998, 1001], "medoid": 449, "medoids_": 449, "medri": 1039, "meekail": [0, 400, 1050, 1051, 1052, 1053], "meer": [96, 411, 451], "meet": [379, 391, 394, 420, 576, 607, 865, 866, 905, 1005, 1018, 1029, 1044, 1045, 1046], "megabyt": 1050, "megasari": 1048, "meghann": [1044, 1046], "mehak": 1043, "mehdi": [1040, 1049], "mehgarg": 1051, "mehmet": [1043, 1049], "mehmetcanakbai": 1051, "mehrdad": 1050, "mehta": [1040, 1041, 1042, 1044, 1045, 1046, 1047, 1051, 1052], "mehul": 1043, "mei": [1041, 1046], "meier": 1043, "meila": 411, "mein": 419, "meinshausen": 199, "meirel": 1047, "meketon": 1043, "melani": [1029, 1043, 1044], "melderi": 1044, "melemo2": 1050, "meli": [1049, 1050, 1051], "melissa": 1044, "mellon": 903, "melnik": 1051, "melsyt": [1044, 1045], "mem": [87, 385, 512, 513, 1026], "member": [0, 353, 354, 374, 379, 382, 394, 411, 426, 445, 449, 451, 454, 456, 496, 559, 560, 561, 562, 567, 568, 569, 570, 585, 662, 663, 670, 671, 672, 680, 681, 682, 708, 709, 719, 721, 735, 740, 741, 761, 790, 799, 804, 908, 1001, 1008, 1036, 1048, 1051], "membership": [30, 89, 394, 408, 411, 515, 516, 517, 518, 519, 523, 526, 1020], "memit": 385, "memmap": [367, 374, 393, 416, 512, 538, 1044, 1053], "memoiz": [104, 374, 393], "memor": 189, "memori": [2, 47, 87, 103, 104, 125, 187, 188, 266, 294, 318, 321, 323, 325, 326, 329, 353, 354, 355, 367, 368, 373, 379, 382, 388, 391, 393, 405, 411, 412, 415, 416, 419, 422, 423, 444, 445, 446, 447, 448, 449, 450, 452, 453, 457, 460, 462, 471, 476, 482, 500, 507, 512, 513, 537, 538, 539, 542, 545, 559, 560, 561, 562, 567, 568, 569, 570, 585, 586, 592, 593, 595, 650, 651, 652, 656, 657, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 680, 681, 682, 683, 684, 685, 688, 782, 783, 784, 785, 804, 810, 818, 827, 829, 830, 831, 832, 835, 836, 837, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 868, 869, 886, 888, 898, 899, 901, 906, 908, 909, 916, 917, 918, 919, 935, 973, 989, 1001, 1007, 1008, 1015, 1017, 1018, 1020, 1021, 1025, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "memory_profil": [385, 397, 404], "memoryerror": [1044, 1048], "memoryview": 380, "memorywis": 405, "men": 376, "menes": 1051, "meng": [1036, 1037, 1040, 1042, 1043], "menoci": 1054, "menon": 409, "mensch": [1041, 1042, 1043, 1044], "mention": [88, 116, 135, 232, 286, 322, 362, 366, 379, 383, 384, 391, 411, 700, 900, 901, 994, 999, 1001, 1025, 1028, 1029, 1043, 1044, 1045], "menu": 397, "menuet": 1045, "mercer": 997, "mere": [43, 272, 393, 835, 1019], "merg": [74, 76, 80, 84, 324, 377, 379, 382, 387, 391, 394, 411, 443, 444, 445, 448, 449, 466, 824, 1036, 1043], "merit": [379, 383, 394], "meritocrat": 394, "merritt": 1042, "mersenn": 1047, "merz": 409, "mesfer": 1049, "mesh": [91, 143, 153, 173, 246, 300, 307, 314, 336, 338], "meshgrid": [50, 63, 77, 91, 111, 143, 153, 172, 173, 174, 175, 177, 188, 225, 226, 227, 228, 239, 241, 261, 298, 305, 307, 314, 315, 336, 341, 342, 346, 347, 350, 351, 635], "meshulam": 1039, "meson": [377, 382, 397, 404, 1055], "mess": 1050, "messag": [73, 79, 95, 102, 121, 248, 353, 354, 374, 377, 378, 382, 383, 384, 387, 388, 411, 443, 457, 471, 543, 547, 552, 578, 631, 716, 804, 807, 808, 810, 818, 827, 832, 835, 837, 857, 865, 866, 906, 933, 934, 935, 938, 942, 967, 988, 993, 1005, 1015, 1036, 1040, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "met": [248, 381, 420, 538, 545, 631, 675, 1001, 1005, 1044], "meta": [2, 7, 30, 31, 89, 102, 134, 158, 184, 214, 277, 281, 286, 288, 291, 327, 328, 360, 362, 373, 377, 381, 383, 391, 393, 402, 409, 420, 421, 431, 440, 446, 447, 450, 452, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 500, 537, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 585, 586, 592, 594, 595, 601, 607, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 804, 805, 806, 811, 813, 820, 822, 826, 831, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 925, 957, 964, 993, 994, 1006, 1025, 1026, 1027, 1031, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1050, 1051, 1053], "meta_clf_sample_weight": 248, "meta_est": 248, "meta_meta_est": 248, "metaclassifi": [248, 249], "metaclassifierifittedmetaclassifi": 248, "metadata": [2, 61, 133, 184, 196, 240, 266, 329, 354, 373, 374, 405, 425, 428, 431, 434, 435, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 491, 492, 500, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 960, 961, 962, 963, 964, 988, 1005, 1024, 1025, 1026, 1031, 1052], "metadata_rout": [2, 248, 440, 446, 447, 450, 452, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 537, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 594, 595, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 960, 961, 962, 963, 964], "metadatarequest": [2, 248, 425, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 472, 473, 474, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 568, 569, 570, 585, 586, 587, 592, 593, 594, 595, 596, 599, 600, 602, 603, 604, 607, 614, 615, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 656, 658, 660, 661, 662, 664, 666, 668, 670, 671, 672, 673, 674, 676, 678, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 961, 963, 1053], "metadatarout": [2, 248, 440, 467, 468, 475, 559, 560, 567, 571, 572, 573, 574, 597, 598, 601, 606, 631, 651, 655, 657, 659, 663, 665, 667, 669, 675, 677, 679, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 867, 868, 905, 963, 1053], "metaestim": [2, 89, 393, 905, 925, 965, 1040, 1049, 1050, 1053], "metaestimatormixin": [2, 248], "metaireau": [1036, 1039], "metal": 407, "metaregressor": 248, "metatransfom": 1041, "meteorologi": 409, "meth_nam": 316, "method": [2, 5, 8, 14, 18, 30, 32, 36, 43, 47, 51, 52, 55, 57, 58, 61, 62, 63, 64, 71, 72, 74, 75, 76, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 94, 98, 101, 104, 110, 111, 114, 116, 121, 124, 126, 129, 130, 131, 133, 135, 140, 142, 148, 155, 164, 165, 169, 182, 192, 202, 203, 215, 222, 231, 233, 235, 237, 238, 239, 241, 245, 247, 248, 249, 251, 255, 256, 259, 266, 274, 277, 279, 280, 281, 286, 289, 292, 298, 299, 301, 312, 316, 319, 321, 323, 324, 345, 353, 354, 355, 361, 362, 366, 367, 368, 371, 376, 377, 379, 380, 381, 385, 386, 388, 391, 392, 396, 402, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 428, 429, 430, 433, 434, 435, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 462, 465, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 508, 516, 518, 526, 529, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 709, 714, 715, 726, 735, 736, 739, 740, 745, 746, 767, 772, 773, 778, 782, 787, 792, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 896, 897, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 923, 925, 928, 937, 941, 942, 952, 960, 961, 962, 963, 964, 965, 970, 973, 988, 989, 992, 993, 994, 995, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1026, 1029, 1030, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "method_map": [248, 961], "method_max_it": [549, 550, 1046], "method_nam": [248, 961, 964], "methodmap": [2, 248, 961], "methodmetadatarequest": 960, "methodol": 1015, "methodolog": [415, 1028], "methodologi": [545, 881, 995, 1005, 1029], "methodpair": 962, "metric": [2, 13, 43, 45, 46, 50, 52, 57, 58, 59, 61, 62, 63, 66, 68, 71, 73, 77, 79, 81, 82, 85, 91, 93, 97, 102, 107, 113, 135, 140, 145, 146, 148, 149, 150, 155, 166, 169, 172, 182, 184, 186, 187, 189, 199, 203, 209, 210, 214, 216, 218, 220, 232, 237, 242, 245, 246, 251, 254, 264, 265, 268, 269, 270, 272, 273, 275, 279, 281, 282, 286, 291, 292, 294, 302, 305, 310, 312, 317, 321, 322, 324, 325, 326, 327, 328, 329, 331, 332, 334, 335, 353, 354, 362, 366, 371, 374, 379, 381, 391, 392, 393, 396, 402, 406, 409, 410, 416, 417, 418, 421, 422, 428, 440, 444, 447, 448, 449, 453, 457, 458, 459, 460, 465, 472, 524, 539, 553, 554, 555, 557, 559, 561, 562, 563, 565, 566, 568, 569, 571, 573, 582, 606, 614, 624, 632, 635, 638, 642, 643, 644, 645, 646, 647, 662, 663, 667, 670, 672, 678, 679, 680, 692, 694, 696, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 833, 836, 837, 838, 839, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 874, 880, 903, 904, 908, 910, 913, 916, 918, 925, 995, 997, 1000, 1002, 1006, 1008, 1011, 1013, 1024, 1025, 1026, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "metric_kwarg": [783, 784], "metric_obj": 703, "metric_param": [422, 447, 449, 453, 458, 459, 460, 692, 696, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 1040, 1043, 1050], "metsi": [843, 1007], "metzen": [0, 400, 1036, 1039, 1040, 1041, 1042], "mexican": 130, "meyer89": 1047, "mferrari3": [1044, 1045], "mgrid": [53, 162], "mhg": 1041, "mi": [64, 72, 164, 411, 611, 612, 708, 759, 761, 995, 1005, 1019], "mia": 1051, "miao": 1049, "mib": [366, 471, 906], "mic": [889, 1015], "micah": 1046, "micci": [889, 1015], "mice": [373, 631, 995], "miceprotein": 373, "michael": [376, 409, 411, 453, 632, 641, 695, 801, 995, 1001, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1050, 1051, 1053, 1054], "michal": [1040, 1043, 1049, 1050], "michali": 411, "michalkrawczyk": [1049, 1050], "micha\u0142": 1047, "micha\u0142owski": 1045, "michel": [0, 401, 1036, 1038, 1039, 1041, 1043, 1050, 1051], "michelbach": 1040, "michiaki": 1042, "micka\u00ebl": [1044, 1045], "micky774": [1050, 1051], "micro": [49, 305, 335, 366, 383, 711, 717, 733, 734, 742, 787, 788, 791, 792, 1005, 1036, 1044, 1045, 1051, 1054], "micro_roc_auc_ovr": 281, "microarrai": [408, 454, 517, 632, 995], "microcontrol": 1024, "microphon": 122, "microryzomi": [50, 305, 374, 502], "microryzomys_minutu": 502, "microryzomys_minutus_0": 50, "microsoft": [0, 51, 377, 380, 397], "mid": [63, 342, 1005, 1007], "middl": [43, 61, 70, 93, 126, 199, 350, 376, 1012, 1015], "mideast": [57, 374], "midina": 1043, "midnight": 43, "midpoint": 342, "midpointnorm": 342, "midvidi": 1049, "midwest": [169, 376], "might": [0, 43, 44, 52, 67, 77, 79, 93, 95, 102, 143, 150, 153, 166, 177, 183, 187, 188, 189, 192, 214, 232, 241, 266, 272, 274, 286, 295, 308, 323, 329, 346, 351, 362, 366, 367, 373, 377, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 397, 405, 409, 410, 412, 415, 416, 417, 418, 419, 421, 436, 446, 491, 500, 505, 507, 512, 519, 527, 540, 559, 560, 561, 565, 566, 568, 583, 584, 586, 614, 615, 631, 654, 658, 659, 660, 662, 663, 680, 682, 696, 761, 798, 806, 807, 808, 821, 824, 832, 857, 873, 888, 901, 920, 922, 924, 926, 930, 934, 935, 952, 973, 994, 995, 997, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1012, 1013, 1015, 1020, 1021, 1037, 1039, 1044, 1045, 1047, 1050, 1051, 1052, 1053], "mignon": [1036, 1039, 1040, 1043], "migrat": [379, 1036], "miguel": [1046, 1054], "miguelbarao": 1046, "miguelcsilva": 1054, "mihael": [411, 453, 460], "mihevc": 1046, "mike": 1043, "mikebenfield": 1043, "miketip": [538, 545], "mikhail": [1037, 1038, 1039, 1042, 1043, 1051, 1052], "miki": [1053, 1054], "mikulski": 1047, "milajev": 1040, "milan": 1048, "milana2": 1050, "mileag": 366, "milen": 1043, "mileston": 383, "militari": 102, "mill": 1046, "millawel": 1050, "miller": [374, 1044, 1045, 1049], "million": [77, 89, 176, 192, 419, 696, 1002, 1020, 1029, 1050, 1051], "millman": [0, 401, 1045, 1052, 1053], "milman": 1044, "miln": 374, "miltenberg": 1051, "milton": 1053, "milutinov": 1045, "mimic": [182, 214, 353, 822], "mimicri": 353, "min": [43, 49, 50, 51, 52, 53, 62, 64, 67, 85, 91, 107, 121, 124, 135, 137, 143, 146, 147, 153, 162, 169, 173, 175, 176, 177, 183, 187, 197, 201, 203, 209, 216, 217, 220, 235, 245, 246, 249, 291, 298, 299, 305, 307, 309, 312, 314, 315, 317, 329, 336, 350, 388, 411, 414, 416, 485, 486, 488, 516, 538, 539, 542, 544, 545, 553, 554, 567, 631, 635, 636, 658, 659, 660, 661, 686, 687, 708, 761, 784, 807, 808, 857, 865, 866, 878, 887, 894, 952, 969, 996, 1001, 1005, 1008, 1015, 1042, 1045, 1047, 1048, 1051], "min_": [324, 411, 418, 878, 1001, 1015, 1019, 1020, 1021], "min_arg": 52, "min_batch_s": 955, "min_bin_freq": [451, 464], "min_c": 1007, "min_categori": [844, 1048], "min_cluster_s": [79, 98, 327, 411, 449, 453, 459, 1045], "min_degre": [883, 1049], "min_df": [54, 57, 102, 273, 335, 353, 354, 419, 592, 595, 1036, 1038, 1047, 1054], "min_dist": 245, "min_estim": 139, "min_faces_per_person": [45, 374, 498], "min_features_to_select": [168, 598, 1044], "min_frequ": [325, 327, 881, 882, 1015, 1050, 1052], "min_grad_norm": [696, 1042], "min_i": 249, "min_idf": 1049, "min_impurity_decreas": [561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919, 1021, 1043], "min_impurity_split": 1043, "min_max_axi": 1045, "min_max_scal": 1015, "min_n": [592, 593, 595, 1036], "min_n_compon": 245, "min_po": [2, 388], "min_resourc": [147, 807, 808, 994], "min_resources_": [807, 808], "min_sampl": [79, 82, 98, 391, 393, 411, 422, 447, 449, 453, 458, 459, 460, 675, 1001, 1045, 1049], "min_sample_split": 1051, "min_samples_leaf": [141, 146, 147, 189, 321, 324, 357, 418, 561, 562, 563, 564, 565, 566, 568, 569, 570, 916, 917, 918, 919, 1021, 1042], "min_samples_split": [147, 148, 149, 276, 284, 313, 323, 418, 561, 562, 563, 564, 568, 569, 570, 807, 808, 916, 917, 918, 919, 994, 1021, 1042], "min_val": [931, 938], "min_valu": [631, 1047, 1048], "min_w": 1001, "min_weight_fraction_leaf": [561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919, 1021, 1039, 1042, 1043], "min_x": 249, "mina": [1046, 1047], "mincovdet": [2, 111, 112, 413, 472, 473, 476, 478, 479, 1011, 1036, 1043, 1055], "mind": [126, 150, 186, 187, 188, 232, 316, 317, 353, 354, 362, 379, 405, 413, 415, 418, 650, 651, 708, 1001, 1020, 1024], "minden": [411, 455, 465], "mine": [0, 272, 354, 374, 411, 422, 447, 515, 567, 724, 738, 744, 787, 1001, 1005, 1011, 1017], "ming": [567, 1011, 1040, 1044, 1045, 1046, 1050], "minghui": [1043, 1044], "mingw": 1039, "minh": 1044, "mini": [2, 47, 97, 121, 325, 368, 393, 419, 443, 445, 450, 452, 454, 456, 535, 537, 540, 541, 542, 543, 544, 546, 547, 549, 550, 1009, 1010, 1036, 1047, 1049], "mini_batch": [454, 456], "minibatch": [47, 79, 411, 416, 452, 538, 680, 864, 865, 866, 1036], "minibatch_iter": 47, "minibatch_kmean": 354, "minibatch_s": [47, 368], "minibatchdictionarylearn": [2, 121, 124, 368, 416, 535, 542, 546, 549, 550, 1037, 1039, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "minibatchkmean": [2, 57, 71, 73, 78, 79, 83, 91, 92, 94, 96, 184, 354, 368, 411, 416, 443, 445, 450, 516, 783, 1026, 1037, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "minibatchnmf": [2, 54, 368, 416, 1050, 1052, 1053, 1054], "minibatchsparsepca": [2, 535, 537, 541, 544, 546, 547, 549, 550, 1036, 1037, 1047, 1049, 1050, 1051, 1052, 1053], "miniforg": [377, 387, 397, 398], "miniforge3": [377, 387], "minim": [2, 43, 51, 52, 64, 90, 99, 109, 110, 147, 171, 179, 194, 210, 212, 214, 216, 218, 222, 232, 234, 244, 245, 257, 262, 266, 273, 281, 282, 312, 321, 324, 339, 346, 349, 357, 378, 379, 382, 387, 391, 393, 405, 409, 411, 413, 416, 418, 443, 444, 448, 449, 453, 466, 542, 544, 551, 561, 562, 563, 564, 568, 569, 613, 614, 615, 645, 650, 653, 661, 662, 671, 675, 676, 678, 682, 683, 691, 696, 698, 699, 752, 784, 855, 857, 866, 884, 896, 902, 916, 917, 918, 919, 1001, 1002, 1005, 1008, 1009, 1015, 1017, 1018, 1019, 1020, 1024, 1027, 1031, 1040, 1045, 1046], "minima": [177, 201, 416, 450, 696, 1002, 1044], "minimal_reproduc": 387, "minimalist": [384, 419, 1028], "minimis": [52, 271, 411, 415, 662, 663, 1021], "minimum": [2, 48, 88, 90, 111, 147, 148, 150, 168, 203, 224, 245, 251, 282, 298, 299, 381, 388, 397, 404, 408, 411, 418, 419, 444, 448, 449, 453, 457, 459, 472, 473, 476, 477, 478, 479, 515, 517, 545, 556, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 598, 631, 635, 636, 639, 641, 672, 675, 680, 682, 683, 686, 687, 696, 709, 729, 783, 784, 807, 808, 829, 844, 865, 866, 877, 878, 881, 882, 883, 887, 901, 902, 915, 916, 917, 918, 919, 931, 934, 935, 938, 955, 1002, 1005, 1009, 1011, 1015, 1017, 1021, 1036, 1039, 1043, 1044, 1048, 1049, 1053], "minimum_cluster_s": 411, "minka": [128, 545, 1001], "minknowski": 1049, "minkowski": [422, 447, 453, 458, 459, 460, 692, 703, 782, 783, 784, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 1008, 1036, 1039, 1050, 1051, 1052], "minkowski_dist": [453, 460, 692, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862], "minkowskidist": [703, 1049], "minmax_scal": [2, 310, 312, 878, 1041, 1044], "minmaxscal": [2, 43, 44, 104, 165, 167, 192, 235, 251, 308, 323, 368, 407, 412, 467, 894, 995, 1015, 1038, 1041, 1044, 1046, 1047, 1048, 1052, 1053, 1055], "minmaxscalerminmaxscal": 104, "minnesota": 411, "minor": [251, 266, 275, 279, 374, 383, 394, 500, 1005, 1036, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "minu": [272, 764, 1005], "minut": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 374, 379, 1002, 1023], "minutu": [50, 305, 374, 502], "minval": [515, 517], "minwoo": 1036, "minyushkin": 1042, "miola": 1051, "miott": [1036, 1039], "miotto": 1047, "mir": 419, "miroslav": [1037, 1038, 1041], "mirror": [845, 994], "mirza": 1049, "misa": 1051, "misc": [57, 86, 124, 273, 335, 353, 354, 355, 374], "misc_featur": 251, "miscalibr": 64, "miscellan": [372, 373, 1026, 1042, 1043, 1050, 1051, 1053, 1054, 1055], "miscfeatur": 155, "misclassif": [46, 135, 266, 346, 800, 1019, 1020, 1021, 1037], "misclassifi": [70, 135, 265, 266, 346, 353, 1020], "misclassification_error": 135, "misdetect": 1053, "mish": 419, "mishra": [1048, 1049], "mislabel": [265, 418, 1007], "mislead": [72, 142, 148, 187, 380, 396, 418, 557, 558, 561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919, 1031, 1049], "mismatch": [79, 1004, 1045], "misread": 239, "miss": [2, 20, 103, 155, 169, 189, 243, 253, 266, 272, 292, 322, 326, 329, 362, 366, 371, 374, 376, 378, 379, 384, 393, 407, 410, 411, 412, 413, 449, 475, 493, 500, 502, 505, 561, 562, 565, 566, 568, 569, 570, 631, 632, 633, 634, 643, 649, 676, 694, 698, 731, 773, 830, 851, 869, 877, 878, 882, 884, 885, 888, 889, 893, 896, 897, 899, 916, 917, 918, 919, 925, 1001, 1002, 1005, 1024, 1025, 1026, 1027, 1029, 1031, 1038, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "missclassif": 135, "missforest": [182, 995], "missing": [150, 418, 631, 632, 634, 1045], "missing_featur": [182, 183], "missing_fract": 150, "missing_fraction_list": 150, "missing_r": 183, "missing_sampl": [182, 183], "missing_valu": [182, 183, 253, 393, 631, 632, 633, 634, 773, 995, 1044, 1045], "missingind": [2, 631, 632, 634, 995, 1044, 1045, 1046, 1050, 1052], "mission": [0, 354, 1029], "misspecifi": 64, "misspel": 419, "mistak": [135, 166, 286, 332, 362, 411, 415, 739, 879, 893, 894, 896, 897, 898, 899, 1001, 1006], "misti": [43, 188], "mit": [289, 374, 385, 411, 421, 614, 615, 618, 623, 626, 647, 670, 671, 680, 845, 998], "mitar": 1045, "mitig": [64, 88, 150, 189, 319, 367, 368, 1002, 1021, 1048], "mitra": [1046, 1047, 1051], "mitrov": 1045, "mitzi": [1049, 1050], "miwojc": 1050, "mix": [2, 43, 95, 101, 102, 122, 123, 144, 184, 187, 214, 243, 253, 255, 273, 312, 318, 373, 381, 391, 393, 412, 416, 423, 467, 469, 470, 500, 537, 542, 544, 551, 604, 608, 634, 650, 651, 656, 662, 663, 664, 665, 666, 667, 672, 680, 682, 685, 804, 818, 834, 868, 881, 882, 888, 889, 968, 975, 978, 1001, 1010, 1026, 1048, 1050, 1051], "mixed_encoded_preprocessor": 318, "mixed_pip": 318, "mixed_target": 318, "mixin": [2, 379, 393, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 605, 946, 1038, 1047, 1051], "mixing_": [122, 123, 537], "mixtur": [2, 46, 48, 70, 79, 88, 90, 98, 119, 174, 183, 201, 259, 260, 283, 302, 328, 374, 375, 393, 411, 416, 417, 421, 627, 801, 802, 804, 1025, 1026, 1030, 1031, 1036, 1040, 1041, 1042, 1043], "mizil": [62, 64, 409, 440, 442], "mizuki": 1050, "mk": 1021, "mkdir": [47, 385, 387], "mkdtemp": [87, 412], "mkl": [366, 367, 377, 387, 391, 1036], "mkl_num_thread": 367, "mksol": 102, "ml": [47, 169, 289, 373, 376, 384, 504, 506, 514, 1001, 1003, 1024, 1025, 1029], "ml_map": 399, "mlant": 1050, "mlb": [374, 879], "mlc": 376, "mlcomp": 1036, "mld": 47, "mldata": [1036, 1044], "mle": [111, 128, 545, 1044, 1047], "mlewis1729": 1043, "mlflow": 1024, "mlg": 1040, "mlinari\u0107": 1051, "mline": [48, 111, 228, 298, 341, 344], "mljar": 1024, "mlle": [693, 697, 1002], "mlliou112": 1043, "mlo": 176, "mlondschien": 1049, "mlop": 1024, "mlp": [184, 188, 252, 306, 308, 500, 834, 865, 866, 1009, 1026], "mlp_disp": 252, "mlp_model": 188, "mlp_preprocessor": 188, "mlpclassifi": [2, 67, 149, 161, 184, 306, 307, 309, 368, 506, 508, 518, 526, 864, 866, 878, 1006, 1009, 1026, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "mlpregressor": [2, 43, 188, 252, 368, 864, 865, 1009, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "mlpregressormlpregressor": 252, "mlxtend": 1024, "mm": 192, "mm_bunch": 50, "mmap_mod": [405, 970], "mmm": 51, "mmse": [110, 413, 424, 478], "mn193": 1053, "mnb": 1007, "mnist": [184, 193, 205, 207, 222, 229, 292, 306, 308, 500, 662, 834, 865, 888, 937, 1001, 1009, 1026], "mnist_10000": 292, "mnist_20000": 292, "mnist_784": [222, 230, 292, 309], "mo": [326, 1047], "mobil": 387, "mock": 1046, "mockdatafram": 1046, "modal": [2, 241, 477, 954], "mode": [2, 48, 49, 80, 81, 111, 214, 241, 292, 294, 310, 321, 377, 379, 383, 387, 388, 391, 408, 414, 418, 422, 446, 447, 450, 452, 455, 462, 465, 474, 475, 481, 485, 490, 512, 513, 561, 565, 568, 596, 599, 600, 602, 603, 604, 614, 631, 648, 649, 662, 663, 670, 672, 677, 678, 679, 680, 683, 686, 687, 693, 697, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 864, 908, 910, 913, 916, 918, 940, 951, 952, 954, 1008, 1011, 1024, 1037, 1045, 1050, 1053], "model": [2, 7, 8, 21, 28, 34, 37, 40, 42, 44, 45, 48, 49, 51, 53, 54, 58, 59, 61, 62, 64, 70, 74, 75, 76, 82, 87, 88, 89, 91, 94, 101, 103, 104, 105, 109, 113, 116, 120, 121, 130, 131, 134, 135, 136, 138, 140, 143, 146, 147, 149, 150, 152, 154, 155, 158, 160, 162, 163, 165, 166, 174, 175, 177, 178, 179, 180, 183, 185, 186, 190, 195, 197, 200, 202, 204, 205, 207, 209, 210, 211, 215, 216, 218, 219, 220, 222, 226, 227, 229, 230, 231, 241, 244, 249, 257, 259, 260, 261, 265, 267, 268, 270, 273, 275, 276, 277, 278, 280, 281, 286, 287, 289, 292, 294, 295, 296, 298, 301, 305, 313, 316, 318, 319, 321, 323, 325, 326, 327, 329, 331, 332, 339, 341, 342, 343, 344, 345, 347, 349, 351, 354, 355, 358, 359, 360, 362, 371, 373, 374, 382, 385, 393, 396, 402, 407, 408, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 421, 430, 434, 436, 440, 445, 452, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 491, 492, 493, 500, 502, 504, 505, 506, 507, 513, 526, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 592, 593, 597, 598, 601, 606, 610, 613, 614, 615, 619, 631, 636, 637, 638, 639, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 705, 710, 715, 725, 726, 727, 728, 738, 739, 745, 754, 757, 789, 792, 793, 796, 801, 802, 803, 804, 807, 808, 809, 810, 818, 819, 820, 821, 825, 826, 827, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 853, 854, 855, 857, 859, 864, 865, 866, 868, 869, 871, 873, 875, 880, 881, 883, 884, 885, 887, 888, 889, 893, 894, 896, 897, 898, 899, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 923, 988, 995, 997, 998, 999, 1002, 1003, 1006, 1008, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1055], "model_1": 272, "model_1_scor": 272, "model_2": 272, "model_2_scor": 272, "model__estimator__max_depth": 994, "model_coef": 186, "model_color": 348, "model_detail": 143, "model_displai": 140, "model_fixed_threshold": 266, "model_from_prevision_vers": 405, "model_i": 272, "model_i_scor": 272, "model_idx": 251, "model_k": 272, "model_k_scor": 272, "model_l1": 349, "model_l2": 349, "model_nam": [141, 251, 291], "model_no_cf": 319, "model_param": 229, "model_prop": 43, "model_scor": [272, 291], "model_select": [2, 43, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 87, 103, 104, 105, 106, 107, 109, 116, 126, 128, 135, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 160, 165, 166, 168, 171, 182, 183, 184, 186, 187, 189, 190, 192, 199, 209, 214, 216, 221, 222, 229, 230, 232, 242, 247, 248, 251, 253, 254, 255, 259, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 294, 295, 296, 300, 301, 307, 309, 310, 314, 316, 317, 318, 319, 321, 322, 323, 326, 327, 328, 329, 334, 335, 342, 345, 349, 357, 361, 362, 379, 381, 384, 392, 393, 402, 407, 410, 412, 415, 418, 440, 441, 562, 564, 571, 572, 583, 663, 701, 702, 704, 706, 746, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 857, 865, 866, 868, 916, 917, 918, 919, 994, 995, 1000, 1005, 1007, 1008, 1013, 1015, 1020, 1025, 1026, 1033, 1040, 1042, 1043], "model_selection_tut": 160, "model_step": 43, "model_titl": 143, "model_with_cf": 319, "moder": [272, 379, 421, 457, 1011], "modern": [43, 150, 419, 471, 507, 594, 694, 698, 734, 906, 1002, 1024, 1025, 1052], "modif": [379, 414, 418, 419, 449, 1018, 1053, 1054], "modifi": [107, 199, 224, 234, 235, 236, 248, 251, 327, 351, 379, 381, 393, 408, 411, 418, 421, 446, 450, 457, 462, 471, 485, 486, 487, 488, 499, 514, 585, 614, 615, 617, 623, 680, 682, 693, 697, 723, 733, 734, 772, 787, 788, 791, 932, 986, 987, 1001, 1018, 1019, 1025, 1030, 1031, 1036, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1055], "modified_fil": 379, "modified_hub": [46, 680, 1019], "modified_huber_loss": 224, "modified_tol": [693, 697], "modrak": [1051, 1052], "modroiu": 1005, "modul": [7, 11, 16, 30, 31, 71, 72, 82, 86, 108, 114, 117, 120, 121, 134, 163, 170, 181, 184, 185, 191, 193, 229, 233, 234, 256, 264, 288, 289, 290, 293, 306, 308, 309, 311, 330, 337, 352, 356, 359, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 391, 393, 396, 397, 405, 409, 411, 414, 418, 419, 420, 422, 447, 507, 539, 583, 584, 663, 944, 994, 999, 1001, 1003, 1005, 1006, 1009, 1011, 1012, 1015, 1017, 1019, 1021, 1022, 1029, 1037, 1038, 1039, 1041, 1042, 1046, 1050], "modulo": [419, 1047], "moeller": 1042, "mogavero": 1046, "moham": [1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054], "mohamedbsh": 1051, "mohammad": [1044, 1045], "mohit": [1050, 1053], "mohn": [1044, 1048], "mohr": 1042, "moin": 1048, "mois\u00e9": 1017, "moitra": [1036, 1037, 1038], "mojca": 1047, "mojdeh": 1053, "mola": [1047, 1053], "molden": 1038, "molecul": 1002, "molin": 1051, "molla": [1037, 1038], "molnar": [188, 1012], "moment": [366, 416, 421, 443, 619, 627, 865, 866, 968, 1009, 1010], "momentum": [308, 865, 866, 1009], "mon": [43, 150, 188], "mona": [170, 178, 184, 421, 500, 615, 619, 626, 627, 629, 1026], "monaf": 1051, "monei": [0, 232, 1029], "monitor": [145, 199, 222, 382, 393, 557, 558, 563, 564, 565, 566, 1009, 1028, 1039, 1044, 1046, 1048], "mono": [650, 651, 656, 657, 664, 665, 666, 667, 685, 688], "monografia": 1001, "monomi": 215, "monotoinc": 322, "monoton": [2, 22, 43, 62, 134, 184, 188, 232, 244, 252, 322, 409, 561, 562, 563, 564, 565, 566, 568, 569, 636, 639, 640, 698, 710, 884, 896, 910, 913, 916, 917, 918, 919, 1002, 1006, 1015, 1020, 1026, 1043, 1047, 1051, 1053], "monotonic_cst": [150, 152, 322, 324, 328, 418, 561, 562, 565, 566, 568, 569, 916, 917, 918, 919, 1051, 1054], "mont": [246, 421, 615, 645, 646, 997, 1010], "montecchio": 1040, "montesel": 1054, "month": [0, 43, 176, 188, 318, 374, 379, 383, 394, 1036], "month_co": 43, "month_sin": 43, "monthli": [176, 394, 1005], "montoya": 1043, "montreal": 326, "moodi": 1041, "moon": [272, 308, 314, 353, 354, 526], "moonkyung94": 1050, "moor": [0, 739, 1005, 1029, 1053], "moosmann": 570, "moradizadeh": 1050, "morai": 1054, "moral": [57, 353, 662, 1044, 1048, 1049, 1054], "morawiec": [1043, 1044], "more": [0, 2, 11, 36, 43, 45, 46, 47, 50, 51, 52, 53, 57, 62, 63, 64, 66, 67, 72, 74, 75, 78, 79, 80, 82, 85, 86, 88, 90, 93, 100, 107, 111, 118, 119, 121, 124, 127, 128, 135, 136, 138, 141, 142, 144, 146, 147, 148, 149, 150, 151, 155, 167, 169, 171, 177, 180, 183, 184, 187, 188, 190, 192, 194, 195, 199, 200, 203, 205, 208, 212, 214, 215, 216, 218, 229, 230, 231, 232, 234, 238, 241, 246, 247, 248, 249, 251, 253, 257, 259, 260, 262, 263, 265, 266, 270, 272, 273, 274, 275, 279, 281, 286, 289, 291, 292, 294, 295, 302, 307, 308, 310, 312, 313, 314, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 332, 339, 342, 346, 347, 349, 351, 353, 354, 355, 357, 358, 361, 362, 366, 367, 368, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 385, 386, 387, 392, 393, 394, 397, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 434, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 924, 926, 927, 948, 950, 952, 954, 967, 970, 988, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1027, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "moreau": [1042, 1043, 1044, 1045, 1046], "moreov": [160, 177, 314, 325, 362, 411, 415, 421, 901, 974, 1005, 1013, 1029, 1044, 1050, 1051], "moreyra": 1049, "morgan": [1017, 1021], "mori": 1051, "morikko": 1043, "morina": 1049, "moritz": [1049, 1051], "morn": 43, "moroz": 1042, "morril": 1036, "mors": 1047, "moslei": 1005, "mosley2013": 1005, "mosold": 155, "most": [2, 11, 43, 45, 47, 51, 53, 57, 61, 64, 85, 86, 88, 95, 109, 115, 116, 129, 135, 141, 142, 148, 150, 155, 164, 165, 166, 168, 169, 176, 183, 186, 187, 188, 189, 190, 192, 199, 214, 215, 232, 248, 252, 257, 263, 266, 269, 270, 275, 279, 280, 282, 286, 289, 291, 301, 312, 318, 319, 321, 324, 327, 329, 332, 342, 346, 353, 354, 355, 362, 366, 367, 368, 374, 375, 377, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 397, 402, 405, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 446, 447, 449, 453, 459, 460, 463, 471, 500, 507, 525, 528, 536, 538, 543, 547, 553, 555, 565, 566, 570, 571, 592, 593, 595, 597, 608, 615, 631, 634, 653, 662, 676, 678, 680, 682, 691, 692, 696, 699, 729, 732, 762, 763, 767, 789, 798, 801, 802, 807, 808, 823, 836, 837, 850, 851, 852, 854, 856, 857, 858, 859, 860, 883, 885, 893, 894, 896, 897, 898, 899, 906, 925, 951, 952, 954, 967, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1053, 1055], "most_common": 57, "most_frequ": [275, 555, 631, 634, 858, 995, 1005, 1044, 1046, 1048], "mostli": [0, 2, 80, 102, 214, 232, 317, 381, 387, 391, 393, 416, 418, 419, 525, 783, 784, 1020, 1024, 1029, 1044, 1045, 1046, 1052], "mother": 1002, "motiv": [130, 379, 381, 393, 997, 1005, 1015, 1029, 1049], "motmoti": 1046, "motoda": 411, "motor": 232, "motorcycl": [57, 374], "mottl": [1044, 1045], "moudgalya": [1052, 1053], "moufad": 1051, "moulavi": [411, 449], "mount": 387, "mountain": 1044, "mountford": [1052, 1053], "mous": 373, "mouseid": 373, "moussa": 1042, "move": [64, 143, 273, 310, 342, 378, 379, 385, 409, 411, 553, 554, 575, 576, 577, 579, 581, 582, 946, 947, 971, 1036, 1037, 1041, 1044, 1046, 1049, 1050, 1055], "moveabl": 412, "movelikeriv": 1045, "movement": 374, "movi": 419, "movie_entri": 419, "moya": 1048, "mp": 1001, "mpce": 57, "mpl": [70, 257, 258, 259, 263, 312], "mpl_toolkit": [50, 100, 118, 127, 188, 211, 234, 236, 305], "mplot3d": [100, 118, 127, 188, 211, 234, 236], "mpoemsl": 1050, "mppca": [538, 545], "mprun": 385, "mpy": 419, "mr": [326, 1037, 1040, 1050], "mrandrewandrad": 1042, "mrastgoo": [1051, 1053], "mrg": 387, "mridul": 1042, "mrinal": 1050, "mrinaltyagi": 1050, "mrl09": 416, "mrmjauh": 1043, "mro": [381, 428, 434, 1046, 1047], "mrs2008": 594, "msabati": 1050, "msc": 376, "mschaffenroth": 1046, "mse": [44, 46, 109, 110, 145, 147, 148, 182, 183, 214, 216, 218, 220, 287, 328, 651, 657, 1005, 1021, 1047, 1049], "mse_path_": [203, 651, 655, 657, 659, 665, 667], "mse_valu": 46, "mses_california": 183, "mses_diabet": 183, "msft": 51, "msg": [292, 988], "msle": 1005, "msm": [169, 376], "mssubclass": 155, "mst": 411, "msvc": 1039, "msvcp140": 1050, "mt19937": [279, 284, 937, 1047], "mthorrel": [1043, 1046], "mtrand": 362, "mtse": 683, "mu": [54, 111, 112, 272, 416, 424, 476, 478, 479, 482, 483, 484, 544, 551, 999, 1001, 1043, 1046], "mu_i": 1007, "mu_j": 411, "mu_k": 999, "muayyad": 1044, "much": [37, 43, 45, 46, 48, 52, 57, 62, 75, 88, 111, 113, 119, 124, 130, 140, 147, 148, 155, 156, 157, 171, 182, 183, 187, 188, 189, 190, 192, 211, 212, 216, 245, 248, 251, 266, 272, 274, 275, 278, 283, 285, 309, 313, 317, 318, 319, 323, 324, 326, 342, 347, 353, 354, 362, 366, 367, 368, 374, 379, 380, 381, 384, 387, 391, 392, 397, 405, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 450, 451, 500, 538, 539, 540, 542, 563, 564, 565, 566, 662, 663, 670, 671, 672, 680, 681, 682, 696, 783, 784, 807, 808, 822, 883, 901, 908, 994, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1017, 1018, 1020, 1021, 1025, 1029, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "mudd": 1049, "mueller": [0, 400, 1029, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "muhammad": [1044, 1045, 1049], "mukherje": 1047, "mula": 1048, "multi": [2, 50, 67, 134, 136, 143, 153, 156, 158, 162, 173, 175, 184, 193, 199, 200, 203, 206, 213, 221, 230, 233, 236, 240, 241, 249, 252, 264, 269, 281, 291, 306, 313, 314, 315, 321, 326, 336, 347, 353, 356, 357, 358, 359, 361, 367, 374, 376, 382, 388, 393, 397, 411, 418, 419, 421, 428, 440, 455, 465, 472, 477, 499, 500, 508, 509, 514, 518, 519, 523, 524, 526, 545, 553, 554, 555, 557, 559, 561, 562, 563, 565, 568, 569, 571, 573, 614, 635, 637, 647, 650, 651, 656, 657, 661, 662, 664, 665, 666, 667, 670, 672, 676, 677, 678, 679, 680, 685, 688, 694, 707, 717, 724, 738, 744, 746, 787, 803, 804, 818, 826, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 855, 856, 858, 864, 865, 866, 869, 875, 888, 892, 903, 904, 908, 910, 913, 916, 917, 918, 920, 921, 922, 924, 928, 934, 937, 940, 994, 1006, 1008, 1012, 1015, 1019, 1024, 1025, 1026, 1027, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1052, 1053, 1054], "multi_class": [206, 281, 321, 614, 662, 663, 792, 908, 924, 1001, 1006, 1020, 1036, 1040, 1044, 1049, 1051, 1054], "multi_confus": 758, "multi_label": [924, 926], "multi_layer_regressor": 418, "multi_output": [388, 928, 934, 993], "multi_target_forest": 1006, "multialign": 284, "multiarch": 387, "multiclass": [2, 31, 63, 66, 141, 193, 206, 230, 242, 249, 251, 254, 264, 269, 277, 279, 282, 291, 310, 339, 350, 374, 375, 381, 382, 384, 393, 402, 411, 418, 440, 455, 465, 492, 500, 508, 561, 563, 565, 568, 571, 572, 598, 606, 614, 635, 636, 637, 662, 663, 670, 672, 677, 678, 679, 680, 706, 710, 712, 733, 734, 738, 739, 742, 747, 758, 787, 788, 791, 792, 793, 798, 804, 805, 807, 808, 809, 810, 818, 820, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 875, 889, 908, 910, 913, 916, 918, 966, 967, 968, 999, 1001, 1015, 1016, 1020, 1021, 1026, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1051, 1052, 1053], "multicollinear": [142, 148, 184, 185, 189, 278, 334, 414, 504, 568, 638, 659, 834, 1001, 1013, 1026], "multicor": [1048, 1049], "multidimension": [2, 414, 692, 694, 696, 698, 1002, 1008], "multigrid": 465, "multiindex": 1050, "multilabel": [2, 30, 31, 115, 117, 184, 240, 279, 289, 290, 334, 374, 381, 382, 393, 406, 485, 490, 500, 501, 512, 513, 519, 527, 545, 561, 568, 571, 662, 678, 679, 707, 711, 717, 730, 733, 734, 738, 739, 742, 743, 758, 760, 787, 788, 791, 792, 798, 800, 834, 837, 839, 841, 865, 872, 875, 879, 881, 892, 913, 916, 918, 926, 940, 966, 967, 968, 1016, 1026, 1027, 1031, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054], "multilabel_": [837, 1041], "multilabel_confusion_matrix": [2, 717, 733, 734, 742, 788, 791, 1005, 1045], "multilabelbinar": [2, 393, 837, 872, 881, 1006, 1039, 1041, 1042, 1044, 1045], "multilay": [391, 1003], "multilearn": 1024, "multimetr": [715, 994, 1046, 1051, 1055], "multimetric_": [804, 807, 808, 818], "multimod": 241, "multinomi": [2, 47, 66, 184, 193, 205, 207, 223, 229, 249, 267, 281, 309, 350, 374, 375, 379, 416, 418, 500, 516, 527, 555, 557, 563, 565, 635, 662, 663, 745, 834, 837, 843, 844, 845, 846, 847, 888, 937, 1005, 1021, 1026, 1027, 1031, 1036, 1040, 1042, 1043, 1044, 1049, 1050, 1054], "multinomialdevi": 1047, "multinomialhmm": 1036, "multinomialnb": [2, 47, 368, 374, 419, 843, 844, 845, 846, 1007, 1038, 1040, 1043, 1044, 1048, 1049, 1051], "multiouput": 1046, "multioutput": [2, 41, 154, 281, 291, 393, 402, 434, 468, 485, 486, 487, 555, 558, 560, 561, 562, 564, 566, 568, 569, 572, 574, 615, 636, 637, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 792, 794, 795, 829, 837, 839, 840, 841, 842, 851, 859, 866, 875, 909, 911, 914, 916, 917, 918, 919, 940, 967, 968, 1005, 1026, 1027, 1031, 1036, 1037, 1038, 1042, 1043, 1049, 1050, 1055], "multioutput_arrai": 379, "multioutputclassifi": [2, 402, 792, 837, 839, 841, 1005, 1043, 1045, 1046, 1047, 1048, 1052, 1053], "multioutputregressor": [2, 154, 402, 434, 468, 485, 486, 487, 558, 560, 562, 564, 566, 569, 572, 574, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 840, 842, 851, 859, 866, 909, 911, 914, 917, 919, 1042, 1043, 1045, 1047, 1048, 1052, 1053], "multipl": [2, 25, 52, 80, 101, 104, 119, 130, 135, 141, 143, 145, 165, 184, 187, 208, 246, 266, 272, 277, 280, 284, 289, 291, 294, 321, 327, 345, 366, 367, 368, 373, 375, 376, 379, 381, 382, 383, 384, 391, 393, 405, 411, 412, 413, 414, 416, 418, 419, 420, 421, 422, 423, 447, 463, 467, 469, 470, 472, 477, 491, 494, 496, 499, 500, 501, 507, 508, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 555, 557, 558, 559, 560, 563, 564, 565, 566, 567, 585, 603, 611, 612, 614, 615, 631, 636, 638, 643, 644, 645, 646, 650, 651, 654, 656, 657, 658, 661, 664, 665, 666, 667, 670, 671, 672, 675, 677, 680, 682, 683, 693, 694, 696, 697, 698, 715, 725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 792, 794, 795, 797, 801, 802, 804, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 830, 831, 832, 834, 838, 839, 840, 841, 842, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 870, 873, 885, 889, 897, 900, 901, 908, 909, 910, 913, 930, 946, 951, 952, 975, 978, 997, 1000, 1001, 1002, 1006, 1007, 1008, 1012, 1013, 1018, 1019, 1021, 1024, 1025, 1026, 1036, 1037, 1039, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "multipleloc": [234, 297], "multiplex": 1021, "multipli": [187, 218, 232, 272, 361, 366, 388, 393, 416, 418, 419, 424, 467, 478, 519, 542, 544, 545, 551, 561, 565, 568, 650, 652, 656, 658, 662, 663, 664, 666, 672, 673, 674, 676, 680, 681, 682, 684, 690, 691, 693, 697, 768, 910, 913, 916, 918, 940, 980, 981, 982, 994, 997, 1001, 1005, 1019, 1047], "multiprocess": [391, 393, 970, 1008, 1036, 1044, 1050], "multirespons": 1001, "multiscal": 465, "multisurfac": [169, 376], "multitarget": 388, "multitask": [291, 419, 1006], "multitaskelasticnet": [2, 650, 651, 656, 665, 666, 667, 685, 1001, 1006, 1036, 1043, 1044, 1047, 1049], "multitaskelasticnetcv": [2, 402, 650, 651, 656, 664, 666, 667, 685, 1001, 1006, 1039, 1046, 1047, 1049, 1053], "multitasklasso": [2, 208, 656, 664, 667, 1001, 1006, 1036, 1044, 1047, 1049], "multitasklassocv": [2, 402, 665, 666, 1006, 1039, 1046, 1047, 1049, 1053], "multithread": [366, 411, 778, 782, 908, 909, 910, 911, 912, 913, 914], "multivari": [2, 121, 187, 371, 413, 416, 419, 476, 520, 521, 522, 631, 632, 633, 634, 653, 675, 682, 683, 843, 844, 845, 846, 847, 999, 1001, 1004, 1007, 1024, 1031], "multivariate_norm": [113, 116, 257, 424, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484], "multiwai": 1021, "muma": 112, "mungui": 1049, "munoz": [1042, 1048], "muoki": 1048, "murad": 1039, "murashkin": 1040, "murata": [1049, 1050], "murder": 353, "murezzda": 1052, "murmurhash": 388, "murmurhash3": [2, 419, 586, 593, 969], "murmurhash3_32": [2, 388], "murmurhash3_x86_32": [388, 969], "murphi": [409, 647, 998], "murrai": [1042, 1043], "music": 1029, "must": [88, 187, 188, 190, 196, 199, 231, 232, 241, 252, 267, 298, 313, 318, 353, 362, 374, 378, 379, 380, 381, 383, 385, 387, 393, 394, 402, 407, 409, 411, 412, 415, 416, 418, 419, 420, 421, 422, 432, 441, 444, 447, 448, 449, 450, 452, 453, 454, 458, 460, 462, 464, 465, 467, 469, 470, 472, 477, 490, 512, 513, 516, 527, 535, 541, 542, 543, 544, 545, 547, 548, 551, 557, 558, 563, 564, 565, 566, 571, 572, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 614, 615, 621, 624, 631, 632, 633, 634, 635, 636, 637, 642, 646, 647, 652, 653, 656, 662, 663, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 686, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 703, 707, 710, 713, 739, 750, 768, 775, 778, 782, 785, 792, 796, 797, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 811, 813, 814, 816, 818, 819, 820, 822, 823, 825, 829, 832, 834, 835, 843, 844, 845, 846, 847, 850, 851, 852, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 868, 871, 872, 873, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 908, 909, 910, 911, 912, 913, 914, 915, 921, 979, 988, 990, 993, 994, 995, 1001, 1002, 1003, 1005, 1008, 1009, 1011, 1012, 1019, 1020, 1021, 1036, 1039, 1043, 1047, 1049, 1050, 1053], "mutat": [362, 993, 1044], "mutual": [2, 72, 73, 82, 88, 91, 163, 184, 393, 418, 420, 449, 596, 599, 600, 603, 604, 610, 611, 612, 613, 708, 709, 719, 759, 761, 790, 799, 806, 821, 824, 994, 1001, 1005, 1006, 1026, 1036, 1042, 1052], "mutual_info_classif": [2, 104, 420, 596, 599, 600, 603, 604, 1042, 1048, 1051, 1054], "mutual_info_regress": [2, 164, 325, 420, 596, 599, 600, 603, 604, 613, 1042, 1043, 1048, 1050, 1051, 1052, 1054], "mutual_info_scor": [2, 72, 411, 708, 1005, 1044, 1047, 1048], "mu\u00f1oz": [1049, 1051], "mwestt": 1045, "my": [373, 379, 384, 387, 500], "my_custom_loss_func": 1005, "my_data": 384, "my_dataset": 490, "my_estim": [381, 412], "my_extra_param": 381, "my_featur": 379, "my_fil": 385, "my_func": [380, 385], "my_g": [423, 537], "my_group": [248, 402], "my_kernel": [338, 1020], "my_memb": [94, 96, 97], "my_other_weight": [248, 402], "my_pipelin": 1045, "my_script": 367, "my_test_script": 387, "my_token": 419, "my_weight": [248, 402], "myatt": [1045, 1046], "mycach": [512, 513], "mycluster": 429, "myenugula": 1054, "myer": [1039, 1043], "myestim": [381, 425, 427, 428, 430, 431, 432, 433, 434], "myestimator0": 427, "myestimator1": 427, "mymultioutputestim": 381, "mypi": [379, 383, 397, 404, 1047], "myself": 379, "mysvmlightfil": 512, "mytransform": [381, 435], "m\u00e9hault": [1044, 1045], "m\u00f6rtberg": 1042, "m\u00fcller": [0, 394, 416, 539, 874, 1009, 1015, 1019, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050], "n": [2, 43, 44, 46, 47, 49, 50, 54, 55, 57, 68, 69, 72, 74, 75, 91, 102, 107, 111, 115, 119, 121, 124, 126, 128, 130, 131, 135, 137, 138, 142, 157, 164, 167, 169, 171, 175, 180, 188, 190, 195, 199, 210, 214, 215, 218, 229, 231, 232, 234, 244, 245, 246, 249, 257, 259, 260, 270, 272, 275, 277, 278, 279, 281, 282, 285, 292, 295, 297, 310, 314, 316, 317, 323, 326, 328, 332, 346, 349, 361, 366, 373, 376, 377, 379, 383, 385, 387, 388, 393, 397, 398, 402, 408, 409, 411, 414, 415, 416, 417, 418, 419, 421, 422, 447, 448, 450, 451, 453, 472, 474, 477, 481, 492, 519, 520, 521, 522, 527, 532, 542, 544, 545, 551, 561, 562, 563, 564, 567, 568, 569, 570, 592, 593, 594, 595, 611, 612, 618, 631, 653, 675, 683, 696, 700, 703, 710, 711, 759, 809, 812, 814, 819, 820, 823, 844, 848, 849, 853, 873, 900, 902, 916, 917, 918, 919, 931, 950, 955, 956, 979, 983, 984, 994, 997, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1019, 1020, 1021, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054], "n1": 124, "n2": 124, "n4": 124, "n_": [111, 112, 190, 272, 324, 411, 416, 418, 650, 656, 689, 700, 997, 1001, 1005, 1007, 1008, 1012, 1015, 1017, 1020, 1021], "n_alpha": [219, 475, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 677, 679, 685, 686, 687, 688, 1039], "n_atom": 1037, "n_averag": 69, "n_bar": 183, "n_batch_iter_": 540, "n_best": 454, "n_bin": [61, 62, 64, 86, 214, 232, 313, 315, 319, 441, 442, 873, 1015], "n_bins_": 873, "n_bootstrap": [275, 1037], "n_bulk_repeat": 49, "n_byte": 245, "n_c": [411, 663], "n_call": [848, 849], "n_candid": [807, 808, 994], "n_candidates_": [284, 807, 808, 994], "n_candidates_0": 994, "n_candidates_i": 994, "n_categori": [319, 844, 882, 1015], "n_categorical_featur": [144, 565, 566, 636, 637], "n_categories_": 844, "n_center": [77, 516], "n_channel": [587, 588, 591], "n_class": [2, 45, 72, 119, 135, 137, 142, 143, 166, 168, 229, 235, 246, 249, 259, 279, 280, 281, 301, 302, 321, 358, 361, 362, 375, 379, 381, 393, 418, 440, 491, 492, 506, 519, 523, 527, 553, 554, 555, 557, 559, 561, 563, 565, 568, 571, 573, 597, 598, 608, 614, 638, 643, 662, 663, 670, 671, 672, 678, 679, 680, 681, 701, 711, 720, 722, 726, 739, 742, 745, 758, 792, 798, 803, 804, 807, 808, 818, 826, 829, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 850, 855, 857, 858, 865, 868, 875, 876, 879, 882, 889, 892, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 918, 920, 921, 939, 940, 1001, 1005, 1006, 1009, 1016, 1019, 1020, 1041, 1042, 1043, 1045, 1046, 1047, 1053], "n_classes_": [555, 557, 559, 561, 563, 568, 614, 836, 837, 916, 918, 1037, 1046, 1048], "n_classes_pr": [718, 759], "n_classes_tru": [718, 759], "n_classifi": [66, 573, 574], "n_cluster": [2, 57, 58, 59, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 121, 325, 354, 379, 393, 411, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 462, 463, 464, 465, 466, 515, 517, 714, 796, 797, 1036, 1040, 1042, 1044, 1045, 1047, 1050], "n_clusters_": [73, 82, 88, 96, 444, 448], "n_clusters_list": 78, "n_clusters_per_class": [67, 139, 166, 168, 269, 302, 307, 314, 375, 384, 519, 609, 611], "n_clusters_rang": 72, "n_clusters_tru": 94, "n_col": [45, 57, 121, 250, 426, 454, 456, 515, 517, 636], "n_column": [408, 454, 456], "n_column_clust": [454, 456, 517], "n_comp": [131, 192], "n_comparison": 272, "n_compon": [43, 44, 45, 51, 54, 79, 85, 90, 91, 92, 102, 104, 105, 106, 115, 116, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 153, 192, 213, 234, 235, 236, 237, 238, 239, 241, 245, 246, 249, 253, 257, 258, 259, 260, 261, 262, 263, 271, 296, 301, 310, 317, 323, 325, 328, 329, 354, 381, 384, 385, 393, 412, 414, 416, 423, 454, 455, 465, 467, 485, 486, 487, 488, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 643, 644, 645, 646, 692, 693, 694, 695, 696, 697, 698, 699, 700, 801, 802, 857, 864, 867, 900, 901, 902, 952, 997, 999, 1002, 1004, 1008, 1037, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1053, 1054, 1055], "n_components_": [105, 128, 393, 444, 448, 538, 542, 543, 544, 545, 546, 547, 900, 901, 1045, 1047], "n_components_fa": 128, "n_components_pca": 128, "n_components_pca_ml": 128, "n_components_rang": 245, "n_connected_compon": 466, "n_connected_components_": [444, 448, 1045], "n_core": 141, "n_core_sampl": [422, 447], "n_cpu": [367, 393], "n_cv": [415, 440], "n_cv_alpha": [655, 659], "n_cv_fold": [144, 318, 810, 827, 832, 835], "n_digit": 91, "n_dim": [481, 531, 533, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 1053], "n_dimens": [801, 802], "n_dimensions_of_x": [910, 911, 912, 913, 914], "n_dir": 53, "n_e": 411, "n_element": [421, 621], "n_encoded_featur": [881, 882], "n_error": 299, "n_error_outli": [228, 298, 341], "n_error_outliers_sgd": 228, "n_error_test": [228, 298, 341], "n_error_test_sgd": 228, "n_error_train": [228, 341], "n_error_train_sgd": 228, "n_estim": [46, 49, 63, 67, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 153, 154, 157, 182, 190, 235, 250, 254, 259, 269, 284, 314, 321, 323, 366, 392, 393, 418, 420, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 636, 807, 808, 994, 1011, 1012, 1033, 1044, 1052], "n_estimators_": [145, 563, 564], "n_estimators_ful": 145, "n_exampl": 47, "n_face": 250, "n_featur": [45, 47, 54, 62, 63, 64, 66, 67, 68, 69, 70, 75, 85, 91, 93, 94, 109, 110, 111, 112, 113, 119, 121, 128, 135, 137, 139, 141, 142, 166, 168, 169, 182, 183, 192, 194, 197, 199, 200, 208, 209, 213, 217, 218, 229, 231, 235, 241, 245, 246, 248, 257, 262, 269, 275, 279, 281, 282, 284, 285, 302, 307, 314, 321, 322, 323, 325, 327, 328, 329, 349, 353, 354, 355, 362, 366, 372, 373, 375, 379, 381, 384, 391, 392, 393, 402, 411, 413, 414, 416, 418, 419, 422, 423, 424, 426, 428, 429, 430, 433, 434, 435, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 462, 463, 464, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 492, 493, 494, 496, 498, 505, 508, 512, 513, 516, 519, 520, 523, 525, 527, 528, 530, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 702, 704, 705, 706, 714, 729, 762, 763, 764, 765, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 926, 952, 979, 980, 981, 982, 983, 984, 985, 986, 987, 993, 997, 1001, 1006, 1008, 1009, 1015, 1019, 1020, 1021, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "n_feature_influ": 49, "n_features_": [168, 597, 598, 1049, 1051], "n_features_a": 857, "n_features_b": 857, "n_features_in_": [381, 393, 432, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 631, 632, 633, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 993, 1047, 1049, 1051, 1054], "n_features_max": 69, "n_features_missing_ind": 634, "n_features_new": [435, 445, 448, 536, 538, 540, 541, 543, 546, 547, 553, 571, 573, 574, 586, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 632, 634, 639, 642, 643, 644, 645, 646, 857, 864, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 900, 901], "n_features_opt": 104, "n_features_out": 634, "n_features_out_": 887, "n_features_rang": 69, "n_features_to_comput": 1044, "n_features_to_select": [167, 169, 323, 420, 597, 606, 1048, 1050], "n_features_to_select_": 606, "n_features_with_miss": 633, "n_features_with_missing_": 631, "n_fold": [160, 651, 655, 657, 659, 663, 665, 667, 1037, 1038, 1042], "n_gram_rang": 1036, "n_group": [415, 813, 1042], "n_i": [1007, 1015], "n_imag": 270, "n_index": [850, 851, 852, 854, 856, 858, 859], "n_inform": [62, 64, 67, 139, 142, 166, 168, 194, 199, 217, 218, 269, 275, 285, 302, 307, 314, 321, 349, 375, 384, 519, 528, 557, 558, 559, 560, 568, 569, 609, 610, 611, 612, 613, 650, 651, 656, 664, 665, 666, 669, 685, 686, 687, 838, 926, 1006, 1044], "n_init": [57, 77, 78, 83, 90, 91, 94, 97, 234, 235, 236, 237, 322, 325, 354, 411, 446, 450, 452, 454, 455, 456, 462, 465, 694, 698, 801, 802, 1036, 1044, 1050, 1051, 1052], "n_init_rang": 94, "n_inlier": 241, "n_input_features_": 1049, "n_instanc": [49, 637], "n_iter": [45, 55, 103, 150, 171, 222, 273, 280, 292, 310, 344, 381, 385, 392, 423, 457, 481, 536, 537, 548, 549, 550, 551, 650, 651, 656, 657, 664, 665, 666, 667, 685, 686, 687, 688, 689, 690, 691, 696, 698, 807, 808, 816, 818, 864, 866, 951, 952, 994, 1019, 1037, 1042, 1043, 1044, 1048, 1050, 1051, 1052, 1054], "n_iter_": [43, 124, 150, 222, 260, 393, 443, 450, 451, 452, 474, 475, 485, 486, 487, 535, 536, 537, 540, 541, 542, 543, 544, 547, 565, 566, 631, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 682, 683, 684, 694, 696, 801, 802, 857, 865, 866, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 1040, 1043, 1044, 1046, 1049, 1050, 1052], "n_iter_no_chang": [46, 141, 145, 150, 222, 324, 353, 384, 393, 418, 563, 564, 565, 566, 670, 671, 672, 680, 681, 682, 865, 866, 1019, 1044, 1047], "n_iter_search": 280, "n_iter_without_progress": [235, 696, 1041, 1042], "n_iterations_": [284, 807, 808], "n_iters_": 1042, "n_job": [52, 87, 104, 105, 141, 142, 147, 148, 155, 168, 169, 182, 187, 188, 189, 190, 235, 237, 253, 266, 271, 273, 274, 276, 285, 289, 292, 321, 322, 323, 326, 349, 367, 379, 393, 418, 422, 440, 447, 449, 451, 453, 455, 458, 459, 460, 461, 464, 467, 470, 475, 535, 539, 540, 541, 543, 546, 547, 549, 550, 552, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 598, 606, 611, 612, 614, 636, 638, 643, 651, 655, 657, 659, 661, 662, 663, 665, 667, 669, 670, 672, 680, 683, 692, 693, 694, 695, 696, 697, 698, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 867, 870, 903, 904, 970, 994, 1005, 1006, 1008, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1054], "n_k": [411, 554], "n_kernel": 616, "n_kernel_param": [614, 615], "n_knot": [43, 215, 324, 887, 1015, 1049], "n_l1_ratio": [651, 663, 665, 1039], "n_l1_ratios_": 663, "n_label": [51, 119, 249, 393, 490, 527, 717, 724, 730, 743, 744, 758, 760, 796, 797, 824, 1005, 1042, 1044], "n_labeled_point": [331, 332], "n_layer": [865, 866], "n_layers_": [865, 866], "n_leav": [466, 916, 917, 918, 919], "n_leaves_": [444, 448], "n_left": 567, "n_local_tri": 463, "n_m": 1021, "n_mask": 214, "n_missing_featur": 633, "n_missing_sampl": 183, "n_nearest_featur": [183, 631], "n_neighbor": [51, 79, 95, 100, 156, 182, 234, 235, 236, 238, 241, 251, 292, 294, 295, 298, 299, 300, 301, 304, 317, 321, 323, 353, 418, 455, 606, 611, 612, 632, 692, 693, 695, 697, 699, 700, 850, 851, 852, 854, 856, 857, 861, 903, 904, 995, 1002, 1008, 1011, 1018, 1043, 1050, 1052, 1053], "n_neighbors_": [695, 854], "n_neighbors_list": [251, 294], "n_neighbour": 1050, "n_node": [361, 444, 448, 466, 561, 562, 568, 569, 570, 916, 917, 918, 919, 958], "n_node_sampl": 361, "n_nodes_ptr": [561, 562, 568, 569, 570], "n_noise_": 82, "n_nonzero": 130, "n_nonzero_coef": [213, 530, 535, 541, 546, 549, 550, 552, 654, 668, 689, 690, 1054], "n_nonzero_coefs_": [668, 669, 1054], "n_nonzero_column": 355, "n_numerical_featur": 144, "n_order": 195, "n_original_featur": [596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607], "n_out": 570, "n_outlier": [111, 112, 151, 217, 241, 299], "n_output": [361, 393, 418, 428, 434, 435, 440, 445, 448, 468, 472, 485, 486, 487, 536, 538, 540, 541, 543, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 586, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 632, 634, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 682, 683, 725, 727, 732, 749, 750, 752, 754, 755, 757, 758, 789, 792, 794, 795, 803, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 855, 857, 858, 859, 864, 865, 866, 867, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 900, 901, 903, 904, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 940, 975, 1005, 1006, 1021, 1043, 1046], "n_output_featur": 632, "n_output_features_": 883, "n_outputs_": [555, 556, 561, 562, 568, 569, 570, 865, 866, 916, 917, 918, 919], "n_oversampl": [454, 456, 545, 548, 952, 1050], "n_pack": [2, 955, 956], "n_patch": [587, 588, 591], "n_permut": [278, 415, 833], "n_pixel": [250, 270], "n_point": [267, 848, 849], "n_points_per_clust": 98, "n_popul": [388, 973], "n_possible_iterations_": [807, 808], "n_predict": 49, "n_pt": 53, "n_q": 411, "n_quantil": [107, 188, 316, 885, 897, 1045], "n_quantiles_": 885, "n_queri": [692, 850, 851, 852, 854, 856, 858, 859, 860], "n_random_featur": 203, "n_redund": [62, 64, 67, 142, 166, 168, 269, 275, 302, 307, 314, 375, 384, 440, 519, 557, 559, 568, 838], "n_refin": 475, "n_region": 80, "n_regions_plu": 80, "n_regressor": 574, "n_relevant_featur": 208, "n_remaining_candidates_": [807, 808], "n_repeat": [138, 142, 148, 168, 187, 189, 190, 272, 286, 289, 321, 415, 519, 638, 819, 820, 1013], "n_required_iterations_": [807, 808], "n_resourc": 994, "n_resources_": [284, 807, 808, 994], "n_resources_0": 994, "n_resources_i": 994, "n_restarts_optim": [177, 178, 421, 614, 615], "n_retri": [491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 1050, 1054], "n_row": [45, 57, 121, 408, 426, 454, 456, 515, 517], "n_row_clust": [454, 456, 517], "n_run": [72, 94, 192, 354], "n_sampl": [45, 46, 49, 54, 61, 62, 63, 64, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 82, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 107, 109, 110, 111, 112, 113, 116, 119, 121, 122, 126, 128, 135, 137, 138, 139, 140, 141, 142, 146, 147, 148, 149, 151, 152, 161, 162, 168, 169, 180, 182, 183, 186, 194, 196, 197, 199, 200, 201, 204, 206, 208, 209, 213, 214, 215, 217, 218, 222, 226, 229, 231, 232, 234, 235, 236, 237, 238, 239, 241, 245, 246, 248, 251, 258, 260, 261, 262, 263, 269, 270, 272, 275, 276, 279, 281, 282, 283, 284, 285, 287, 292, 302, 314, 315, 316, 319, 322, 323, 325, 327, 328, 329, 333, 340, 343, 344, 349, 353, 354, 362, 372, 376, 379, 381, 384, 388, 391, 392, 393, 402, 410, 411, 413, 414, 415, 416, 418, 422, 423, 424, 426, 428, 429, 430, 433, 434, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 498, 505, 508, 512, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 625, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 774, 775, 776, 777, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 924, 926, 939, 940, 952, 954, 956, 966, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 993, 994, 997, 1001, 1005, 1006, 1008, 1009, 1015, 1016, 1017, 1019, 1020, 1021, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "n_samples1": 874, "n_samples2": 874, "n_samples_": 545, "n_samples_1": [344, 1020], "n_samples_2": [344, 1020], "n_samples_a": [796, 797], "n_samples_fit": [434, 468, 485, 486, 487, 558, 560, 562, 564, 566, 569, 572, 574, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 692, 841, 842, 850, 851, 852, 854, 856, 858, 859, 860, 866, 909, 911, 914, 917, 919], "n_samples_fit_": [292, 850, 851, 852, 854, 856, 858, 859, 860], "n_samples_i": [616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 784, 785], "n_samples_per_cent": 94, "n_samples_rang": [110, 245], "n_samples_seen": 888, "n_samples_seen_": [538, 877, 878, 888, 1044], "n_samples_test": [285, 910, 911, 912, 913, 914, 1008, 1015], "n_samples_train": [285, 910, 911, 912, 913, 914], "n_samples_transform": [292, 852, 860], "n_samples_x": [615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 784, 785], "n_seed": 464, "n_selected_featur": [596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607], "n_skips_": 1043, "n_skips_invalid_data_": 675, "n_skips_invalid_model_": 675, "n_skips_no_inliers_": 675, "n_spline": [43, 887], "n_split": [43, 52, 141, 146, 150, 182, 183, 187, 259, 267, 272, 274, 277, 282, 286, 289, 328, 334, 342, 349, 362, 415, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 831, 1042, 1044, 1054], "n_splits_": [804, 807, 808, 818], "n_steps_": [124, 452, 541, 542, 1049], "n_subpopulation_": 683, "n_subsampl": [683, 940], "n_subsets_of_featur": 598, "n_support_": [910, 911, 912, 913, 914, 1020, 1046], "n_support_vector": 46, "n_sv": [910, 911, 912, 913, 914, 1020, 1046], "n_svd_vec": [454, 456], "n_t": [561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919], "n_t_l": [561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919], "n_t_r": [561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919], "n_target": [393, 414, 485, 486, 487, 488, 528, 560, 615, 647, 650, 651, 654, 655, 656, 657, 658, 660, 661, 664, 665, 666, 667, 668, 669, 675, 676, 677, 678, 679, 685, 688, 689, 690, 691, 1006, 1048, 1050, 1052], "n_task": [208, 1001], "n_test": [47, 49, 69, 138, 272, 1036, 1039], "n_test_docu": 47, "n_test_po": 47, "n_threshold": [639, 731, 786, 793], "n_tick": [810, 827, 832, 835], "n_top": 280, "n_top_word": 54, "n_topic": [384, 540, 1043], "n_tot": 703, "n_total_sampl": [331, 332], "n_train": [47, 49, 69, 138, 272, 1036, 1039], "n_train_po": 47, "n_transformed_featur": 868, "n_tree": 46, "n_trees_per_iter": 565, "n_trees_per_iteration_": [563, 564, 565, 566], "n_trials_": 675, "n_uncorrelated_featur": 278, "n_unequ": 703, "n_unique_categori": 318, "n_unique_label": [733, 734, 742, 787, 788, 791, 968], "n_unique_tick": [810, 832], "n_valu": [827, 835, 1044], "n_values_": 1044, "n_values_feature_j": 637, "n_x": [87, 589], "n_y": [87, 589, 1007, 1015], "n_z": 589, "na": [631, 632, 633, 634, 773, 782, 932, 934, 935, 1046, 1047, 1050, 1051, 1052, 1053], "nabarun": 1044, "nabla": 1009, "nabsolut": 220, "nacross": 286, "nada": 57, "nadeau": [272, 1044], "nadia": 1048, "nadim": 1049, "nadirhan": 1050, "nadya": 1042, "nagarajan": [649, 1001], "nagarjuna": [1043, 1044], "nagasaka": 1049, "naghshhnejad": [1046, 1047], "naipawat": [1050, 1051], "naiv": [2, 32, 64, 67, 153, 272, 274, 291, 353, 355, 374, 409, 418, 419, 440, 548, 843, 844, 845, 846, 847, 999, 1000, 1008, 1013, 1027, 1031, 1036, 1037, 1038, 1039, 1044, 1046, 1049, 1051], "naive_bay": [2, 47, 61, 62, 64, 67, 153, 157, 273, 274, 353, 362, 368, 374, 418, 440, 573, 843, 844, 845, 846, 847, 869, 999, 1006, 1007, 1037, 1038, 1040, 1041, 1042, 1043], "naive_linear_pipelin": 43, "naive_linear_predict": 43, "naivebay": 368, "naivebayesna": 399, "naivelycalibratedlinearsvc": [62, 64], "najera": 1043, "najork": [730, 760, 1005], "naka": 1049, "nakamura": 1050, "nakano": [1043, 1044], "nalepa": 1043, "naman": 1053, "name": [2, 43, 45, 46, 48, 49, 50, 51, 55, 57, 62, 64, 66, 67, 72, 79, 91, 95, 103, 105, 107, 113, 122, 127, 138, 139, 140, 141, 144, 147, 150, 155, 187, 188, 189, 203, 212, 214, 216, 218, 220, 221, 229, 231, 232, 234, 235, 241, 247, 248, 250, 251, 255, 259, 266, 267, 269, 270, 273, 275, 276, 279, 281, 282, 286, 289, 292, 300, 301, 307, 308, 314, 316, 318, 325, 326, 329, 335, 347, 353, 354, 355, 367, 368, 373, 374, 377, 379, 381, 383, 384, 386, 387, 393, 397, 402, 408, 411, 415, 418, 419, 421, 425, 427, 432, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 514, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 580, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 701, 702, 703, 704, 706, 712, 713, 715, 717, 736, 737, 746, 783, 784, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 816, 818, 822, 826, 827, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 933, 934, 935, 938, 943, 944, 945, 947, 960, 961, 962, 964, 967, 974, 988, 992, 993, 994, 999, 1001, 1005, 1006, 1012, 1013, 1015, 1021, 1025, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "name_to_color": 318, "named_estim": [571, 572, 573, 574], "named_estimators_": [571, 572, 573, 574, 1044, 1046], "named_step": [105, 116, 167, 412, 597, 598, 601, 868, 869, 908, 909, 1001, 1043, 1045], "named_transform": [867, 1051], "named_transformers_": 467, "namedtupl": [2, 621, 1052], "namespac": 407, "namiya": 1043, "nan": [2, 107, 144, 150, 182, 183, 187, 232, 251, 253, 255, 267, 275, 318, 321, 326, 327, 328, 329, 366, 371, 388, 393, 418, 449, 471, 500, 559, 560, 561, 565, 566, 568, 597, 598, 601, 607, 610, 613, 631, 632, 633, 634, 639, 716, 717, 718, 720, 725, 726, 727, 728, 732, 733, 734, 773, 782, 787, 788, 789, 791, 804, 807, 808, 810, 818, 827, 830, 831, 832, 835, 877, 878, 882, 884, 885, 888, 889, 893, 896, 897, 899, 925, 932, 933, 934, 935, 979, 994, 1005, 1015, 1021, 1031, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1055], "nan_euclidean": [632, 766, 782], "nan_euclidean_dist": [2, 321, 766, 995, 1046], "nandana": [1042, 1043, 1044], "nandiyawar": 1055, "nanshan": 1049, "nanta": 1039, "nanxin": 1044, "nanyang": 376, "naois": [1051, 1053], "naoki": [1038, 1048], "naoya": [1042, 1043, 1044, 1045], "naozin555": 1049, "napa": 318, "narasimhan": 855, "nardelli": 1039, "narendra": [1047, 1053], "narendramukherje": 1047, "narendran": 1044, "narin": [1043, 1044], "narinek": [1043, 1044], "narr": [379, 393, 662, 908, 913, 1036, 1037], "narrai": 598, "narrow": [52, 138, 147, 312, 314, 384, 848, 849], "nartayxd": 1050, "nasa": [102, 353, 354, 376], "nasdaq": 51, "naser": 1046, "nasir": 1044, "nass": 1051, "nastegiano": 1050, "nat": [611, 612, 708, 759, 761, 1050], "natasha": 1046, "natchiappan": [1049, 1050], "nate": [1042, 1043, 1049], "nath": [1044, 1055], "nathan": [539, 1044, 1048, 1051, 1054], "nathaniel": [1043, 1044, 1046], "nathansquan": 1050, "nati": 1051, "nation": [50, 111, 305, 374, 855], "nativ": [43, 150, 154, 176, 182, 266, 367, 374, 393, 405, 418, 500, 565, 566, 840, 841, 1001, 1005, 1006, 1024, 1046, 1048], "native_result": 144, "natl": [693, 697, 1002], "natur": [43, 64, 67, 141, 147, 178, 187, 188, 192, 199, 214, 215, 231, 232, 238, 251, 257, 263, 281, 291, 353, 379, 381, 393, 416, 418, 419, 422, 447, 453, 460, 555, 594, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 696, 708, 745, 759, 761, 850, 851, 852, 854, 856, 858, 859, 860, 887, 950, 1001, 1002, 1004, 1005, 1008, 1010, 1015, 1019, 1024, 1036, 1044], "naul": [1041, 1042], "nav": 51, "navarret": [1044, 1045, 1046], "navarro": 1051, "navi": [69, 102, 110, 125, 129, 130, 154, 194, 217, 225, 237, 258, 259, 260, 263, 279, 281, 297, 304, 333, 360], "navig": [387, 1038], "navin": 904, "navistar": 51, "navkal": 1044, "navractil": 1005, "navratil2007": 1005, "nawazish": [1051, 1052], "naziya": 1054, "nb": [47, 128, 153, 362, 845, 1007], "nbclaim": 232, "nber": 49, "nbr": [856, 1008], "nbrown": 1054, "nbrs_": [692, 693], "nbsp": [147, 203], "nbviewer": [51, 63, 103, 104, 140, 142, 151, 152, 155, 158, 166, 176, 187, 188, 189, 196, 242, 243, 244, 248, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 310, 318, 322, 323, 325, 326, 328, 333, 361], "nbyte": [86, 245], "nca": [235, 300, 301, 302, 857, 1008], "nca_pip": 1008, "ncall": 385, "ncanip": 857, "nclass": 267, "ncluster": 79, "ncol": [43, 44, 52, 66, 68, 70, 86, 90, 99, 121, 126, 131, 145, 188, 214, 215, 216, 222, 232, 234, 235, 244, 251, 266, 268, 274, 275, 283, 285, 286, 292, 295, 308, 313, 314, 316, 317, 326, 348, 349, 354, 375], "ncorrect": 272, "ncsu": [169, 376], "ncv": [454, 456], "nd": [1049, 1053], "ndarrai": [86, 91, 118, 214, 255, 270, 271, 272, 379, 380, 381, 385, 386, 407, 419, 422, 423, 426, 427, 429, 432, 433, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 501, 504, 505, 506, 507, 508, 509, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 704, 705, 706, 719, 722, 725, 726, 727, 728, 731, 732, 742, 749, 750, 752, 755, 757, 758, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 793, 794, 795, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 931, 932, 933, 934, 939, 940, 949, 951, 952, 953, 954, 959, 966, 968, 969, 973, 976, 977, 979, 980, 981, 982, 985, 990, 991, 993, 1005, 1020, 1025, 1039, 1043, 1046, 1047, 1050, 1051, 1052, 1053], "ndata": 278, "ndataset": [229, 314], "ndbscan": 98, "ndcg": [730, 760, 1005, 1043], "ndcg_score": [2, 730, 1005, 1043, 1046, 1051, 1052], "ndenumer": 226, "ndepend": 188, "ndim": [650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 934, 935], "ndimag": [53, 80, 81, 87, 310], "ndingwal": 1043, "ndirangu": [1046, 1050], "ne": [1005, 1008], "neal": [1001, 1049], "near_uniqu": 319, "nearbi": [411, 1008], "nearer": [2, 852, 860, 1008], "nearest": [2, 33, 51, 53, 67, 68, 74, 75, 83, 84, 87, 91, 94, 99, 104, 109, 113, 121, 124, 151, 161, 175, 183, 196, 205, 226, 230, 236, 239, 250, 251, 265, 275, 296, 298, 301, 302, 309, 310, 317, 338, 342, 347, 351, 371, 376, 388, 391, 393, 411, 417, 418, 422, 425, 435, 447, 449, 451, 453, 455, 460, 464, 465, 500, 506, 508, 611, 612, 631, 632, 634, 635, 639, 692, 693, 695, 696, 700, 796, 797, 804, 834, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 868, 869, 873, 888, 978, 1002, 1011, 1020, 1025, 1026, 1027, 1031, 1036, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1048], "nearest_neighbor": [79, 455, 695], "nearest_neighbor_algorithm": [850, 858, 859], "nearest_neighbors_algorithm": [851, 856], "nearestcentroid": [2, 303, 353, 1006, 1008, 1036, 1040, 1043, 1048, 1051], "nearestneighbor": [2, 292, 325, 397, 411, 422, 447, 449, 451, 464, 692, 693, 697, 850, 851, 852, 854, 858, 859, 860, 1008, 1036, 1040, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "nearli": [37, 62, 275, 374, 393, 768, 1005, 1008, 1017], "neat": 1036, "necess": [1002, 1008], "necessari": [46, 53, 139, 199, 214, 219, 257, 266, 272, 273, 279, 294, 346, 359, 366, 374, 377, 378, 379, 380, 381, 382, 383, 387, 391, 411, 413, 418, 455, 465, 491, 492, 494, 496, 497, 498, 499, 501, 538, 648, 649, 650, 656, 660, 661, 664, 665, 666, 667, 668, 669, 675, 677, 679, 680, 695, 699, 799, 871, 880, 891, 895, 901, 994, 997, 1001, 1004, 1007, 1015, 1021, 1036, 1044], "necessarili": [43, 67, 104, 124, 187, 214, 222, 232, 246, 247, 258, 279, 314, 353, 354, 373, 405, 407, 409, 411, 418, 631, 856, 858, 859, 860, 999, 1002, 1004, 1005], "need": [0, 30, 43, 48, 51, 68, 80, 86, 88, 90, 113, 123, 133, 141, 144, 146, 147, 148, 150, 155, 169, 171, 176, 182, 183, 187, 201, 216, 231, 232, 235, 241, 244, 246, 248, 251, 252, 257, 258, 262, 263, 266, 270, 272, 274, 275, 277, 289, 291, 292, 294, 317, 321, 328, 334, 342, 353, 354, 362, 366, 367, 368, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 402, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 427, 440, 444, 448, 452, 467, 468, 470, 507, 545, 555, 576, 586, 587, 592, 593, 594, 595, 631, 639, 642, 643, 644, 646, 653, 670, 672, 675, 680, 683, 696, 715, 724, 725, 726, 727, 728, 785, 789, 801, 802, 804, 807, 808, 818, 819, 820, 829, 837, 840, 848, 849, 865, 868, 871, 875, 880, 881, 885, 903, 910, 913, 925, 961, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1020, 1021, 1025, 1029, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "needl": [169, 376], "needs_proba": [1045, 1053], "needs_threshold": 1053, "neeraj": 1043, "neg": [2, 42, 43, 45, 61, 93, 107, 109, 116, 141, 146, 147, 152, 184, 186, 187, 193, 204, 210, 212, 214, 232, 261, 262, 266, 269, 272, 275, 279, 281, 282, 286, 292, 312, 316, 325, 329, 353, 385, 393, 394, 411, 415, 418, 419, 420, 422, 423, 434, 443, 447, 455, 468, 472, 485, 486, 487, 491, 535, 537, 539, 540, 541, 542, 544, 546, 548, 551, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 592, 595, 596, 599, 600, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 681, 682, 683, 684, 691, 702, 703, 708, 709, 716, 717, 719, 720, 722, 723, 725, 726, 727, 728, 731, 733, 734, 735, 739, 742, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 786, 787, 788, 789, 791, 794, 795, 797, 801, 802, 810, 827, 829, 834, 841, 842, 851, 854, 859, 866, 875, 884, 886, 887, 892, 896, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 935, 950, 952, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1019, 1020, 1026, 1030, 1031, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055], "neg_": [810, 827, 1042], "neg_brier_scor": [1005, 1046], "neg_label": [266, 286, 875, 892], "neg_log_loss": [64, 266, 1005], "neg_lr": 275, "neg_lr_bas": 275, "neg_lr_base_std": 275, "neg_max_error": [1005, 1055], "neg_mean_absolute_error": [43, 155, 216, 1005], "neg_mean_absolute_percentage_error": [52, 144, 1005, 1013], "neg_mean_gamma_devi": 1005, "neg_mean_pinball_loss_05p_scor": 147, "neg_mean_pinball_loss_95p_scor": 147, "neg_mean_poisson_devi": 1005, "neg_mean_squared_error": [182, 183, 216, 247, 287, 328, 831, 1005, 1013, 1042], "neg_mean_squared_log_error": 1005, "neg_median_absolute_error": 1005, "neg_root_mean_squared_error": [43, 150, 318, 1005], "neg_root_mean_squared_log_error": 1005, "neg_root_mean_squared_log_error_scor": 1053, "negat": [393, 810, 827, 1005], "negate_scor": [247, 810, 827], "negative_class": 716, "negative_likelihood_ratio": [275, 716], "negative_linestyl": 241, "negative_loglik": 109, "negative_mahal_dist": 472, "negative_outlier_factor": 854, "negative_outlier_factor_": [251, 299, 854, 1011], "neglig": [187, 1008, 1039, 1053], "neigh": [785, 850, 851, 852, 854, 856, 858, 859, 860], "neigh_dist": [850, 851, 852, 854, 856, 858, 859, 860], "neigh_ind": [850, 851, 852, 854, 856, 858, 859, 860], "neighbor": [2, 51, 67, 74, 79, 81, 93, 99, 104, 150, 151, 153, 156, 161, 182, 183, 196, 235, 236, 238, 239, 241, 250, 251, 265, 275, 296, 297, 298, 299, 301, 302, 303, 305, 309, 323, 325, 326, 353, 371, 376, 388, 391, 393, 397, 411, 417, 418, 419, 422, 425, 435, 444, 447, 448, 449, 451, 453, 455, 460, 461, 464, 466, 500, 506, 508, 567, 574, 606, 611, 612, 631, 632, 635, 692, 693, 694, 695, 696, 697, 699, 700, 785, 804, 834, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 868, 869, 888, 904, 912, 978, 1006, 1011, 1025, 1026, 1027, 1030, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043], "neighbor_feat_idx": 631, "neighborhood": [2, 88, 113, 129, 161, 184, 234, 292, 293, 294, 295, 303, 304, 376, 393, 411, 416, 422, 447, 453, 460, 506, 508, 519, 545, 553, 632, 635, 700, 834, 850, 851, 854, 856, 857, 858, 859, 860, 862, 868, 869, 888, 1002, 1011, 1026, 1027, 1031, 1045], "neighborhoodcomponentanalysi": 301, "neighborhoodcomponentsanalysi": [2, 235, 300, 301, 302, 1008, 1045, 1050, 1054], "neighbors_algorithm": [692, 693], "neighborsbas": [1048, 1051], "neighborsclassifi": [856, 858, 859, 860, 1036], "neighborsregressor": 1036, "neighbour": [449, 465, 696, 1010], "neighbourhood": [857, 1008], "neighbourhood_components_analysi": 857, "neil": 1048, "neill": 1048, "neither": [183, 187, 321, 353, 362, 391, 409, 440, 598, 632, 938, 1008, 1021], "nelder": 1001, "nell": [0, 400, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1048], "nelson": [0, 1042, 1043, 1048, 1054], "nemour": 51, "neo": 1044, "nep": 1046, "neptun": 1024, "neq": [411, 1005, 1007, 1015], "ness": [183, 232], "nest": [126, 135, 184, 203, 248, 264, 266, 267, 289, 328, 367, 385, 393, 397, 411, 415, 421, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 465, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 508, 523, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 809, 818, 826, 830, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 1005, 1008, 1026, 1036, 1037, 1040, 1042, 1043, 1044, 1050], "nested_lin": 277, "nested_scor": 277, "nesterov": [308, 865, 866, 1009, 1052, 1053], "nesterovs_momentum": [308, 865, 866], "nestor": 1051, "net": [2, 25, 67, 184, 193, 199, 200, 203, 205, 208, 225, 248, 285, 385, 415, 474, 475, 481, 505, 528, 561, 562, 563, 564, 568, 569, 570, 650, 651, 656, 661, 662, 663, 664, 665, 666, 667, 672, 680, 682, 685, 686, 688, 864, 916, 917, 918, 919, 994, 1005, 1010, 1019, 1026, 1027, 1029, 1031, 1036, 1041, 1045, 1046, 1048], "netbsd": 1036, "neto": [594, 734, 1054], "nettei": 1049, "network": [34, 45, 251, 309, 366, 367, 368, 373, 374, 383, 393, 394, 405, 411, 416, 418, 423, 500, 537, 539, 571, 572, 700, 745, 865, 866, 1001, 1003, 1005, 1019, 1021, 1024, 1027, 1030, 1031, 1036, 1050, 1054], "networkx": [55, 388], "neural": [34, 44, 45, 67, 272, 309, 393, 405, 415, 416, 418, 423, 537, 539, 542, 544, 551, 571, 572, 643, 649, 700, 745, 801, 857, 864, 865, 866, 874, 997, 1001, 1002, 1003, 1005, 1008, 1011, 1015, 1019, 1021, 1024, 1027, 1029, 1030, 1031, 1036, 1048], "neural_network": [2, 67, 184, 188, 252, 306, 307, 308, 309, 310, 368, 391, 864, 865, 866, 1006, 1009, 1026, 1038, 1053], "neuro": 1024, "neurodebian": 0, "neuroimag": [1023, 1029], "neuron": [865, 866, 1003, 1009], "neutral": 720, "nevalu": 155, "never": [141, 249, 329, 362, 379, 388, 391, 405, 410, 411, 412, 414, 415, 453, 460, 527, 559, 560, 561, 568, 868, 869, 993, 997, 1015, 1046, 1049], "nevertheless": [43, 190, 418], "new": [2, 43, 46, 47, 49, 83, 89, 91, 93, 102, 103, 118, 128, 135, 137, 139, 140, 141, 145, 147, 150, 154, 155, 166, 169, 171, 177, 183, 189, 190, 214, 220, 228, 241, 248, 255, 266, 271, 274, 279, 291, 296, 298, 318, 322, 325, 328, 329, 332, 335, 341, 346, 362, 367, 368, 373, 374, 376, 377, 378, 381, 382, 383, 385, 387, 388, 392, 393, 394, 397, 405, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 436, 440, 441, 443, 445, 446, 448, 450, 451, 452, 455, 465, 466, 467, 475, 485, 486, 487, 508, 512, 513, 538, 545, 548, 559, 560, 561, 562, 567, 568, 569, 570, 585, 606, 634, 635, 639, 644, 645, 646, 649, 650, 656, 692, 693, 694, 701, 702, 704, 705, 706, 792, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 838, 854, 877, 878, 883, 884, 885, 887, 888, 889, 896, 897, 905, 923, 932, 937, 974, 979, 994, 995, 997, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1015, 1017, 1018, 1019, 1020, 1025, 1029, 1031, 1034, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "new_data": [296, 381], "new_valu": [571, 572, 573, 574], "newaxi": [51, 53, 57, 61, 77, 113, 130, 136, 172, 196, 204, 210, 215, 216, 217, 219, 220, 231, 244, 246, 287, 297, 304, 359, 360, 408, 540, 1001], "newei": 1044, "newer": [171, 378, 397, 416], "newgroups20": 229, "newli": [377, 392, 418, 466, 1012, 1042, 1043, 1051], "newsgroup": [2, 46, 54, 57, 245, 273, 335, 354, 355, 372, 408, 419, 491, 492, 1031], "newsgroups_test": 374, "newsgroups_train": [374, 491], "newsgroups_vector": 492, "newsl": [889, 1015], "newslett": 373, "newswir": 374, "newton": [214, 232, 310, 614, 652, 662, 663, 673, 684, 865, 866, 1001, 1040, 1041, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "newton_cg": 1046, "next": [46, 62, 93, 111, 143, 144, 148, 158, 178, 186, 190, 207, 211, 214, 242, 248, 250, 254, 255, 259, 267, 278, 291, 317, 318, 319, 323, 332, 353, 357, 361, 362, 377, 379, 381, 383, 399, 405, 408, 411, 412, 415, 418, 512, 513, 614, 638, 696, 702, 704, 706, 785, 801, 802, 834, 970, 994, 998, 1004, 1005, 1015, 1029, 1033, 1036, 1049, 1050], "nezar": 1046, "nff": 703, "nfit": 332, "nfkd": [592, 593, 595, 1046], "nfor": 249, "nfrom": 176, "nft": 703, "ng": [411, 416, 695, 854, 1009, 1011, 1047], "ngiam": 1009, "ngo": 1048, "ngram_rang": [273, 335, 419, 592, 593, 595], "ngram_vector": 419, "ngroup": 267, "ngshya": 1047, "nguyen": [1046, 1047, 1050, 1051], "nguy\u1ec5n": 1051, "ni": [1042, 1047], "nic": 1049, "nice": [43, 100, 215, 248, 312, 366, 416], "nicer": 635, "nichol": 1040, "nichola": [1044, 1045, 1047], "nicholson": [1042, 1043, 1044], "nick": [169, 376, 1036, 1042, 1043, 1044, 1045], "nicki": 1050, "nickledav": 1042, "nicknam": 374, "nico": [1042, 1049], "nicol": 1043, "nicola": [0, 169, 400, 662, 1001, 1018, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "nicolashug": 1045, "nicolasservel": 1047, "nicolau": 1044, "nicula": [0, 121, 400, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045], "niculescu": [62, 64, 409, 440, 442], "nidhin": 1046, "niederb\u00fchl": 1044, "niederhut": [1044, 1046], "nielsen": [747, 1044], "nielsenmarkus11": [1043, 1044], "nigam": [843, 1007], "nigel": 1049, "night": 52, "nightli": [0, 367, 382, 383], "nightwalkx": 1052, "nihal": 1051, "nihar": 1044, "niket": 1050, "nikhil": 1050, "nikita": [1043, 1044, 1046, 1049, 1050, 1051], "nikla": [1046, 1047], "nikolai": [1039, 1040, 1041, 1042, 1044, 1045, 1050, 1052], "nil": 1048, "nilearn": 1024, "nilesh": 1044, "nilotp": [639, 641], "nima": 1051, "nima10khodaveisi": 1051, "ninertia": 97, "ningchi": 1042, "ninh": 192, "ninja": [377, 1029], "nip": [128, 376, 519, 545, 570, 645, 1005], "nipal": [414, 486, 487], "nipy_spectr": [51, 74, 80, 81, 84, 85, 93, 94, 127], "nirvan": [1044, 1048], "nishan": 1046, "nishihara": 1048, "nishu": 1052, "nist": [376, 1005], "nistir": 376, "nit": 379, "nithish": 1054, "nitinramvelraj": 1051, "nitish": 1043, "nitya": 1046, "niuk": 1052, "niyogi": 1002, "nizam": 1044, "nizhibitski": 1037, "nk": 700, "nkish": 1047, "nkmean": 79, "nl": [52, 385], "nl1_ratio": 205, "nlasso": 199, "nlathia": 1042, "nlearn": 308, "nlog": 177, "nlogn": 696, "nlp": [374, 416, 419, 843, 847, 1003, 1029], "nls_max_it": 1041, "nltk": [419, 1023, 1024], "nm": 366, "nmcd": 111, "nmd": 237, "nmean": 125, "nmf": [2, 11, 54, 104, 385, 419, 539, 542, 548, 551, 1030, 1031, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "nmf_estim": 121, "nmi": [72, 411, 721, 740, 741, 761], "nmixtur": 79, "nmle": 111, "nmse": [44, 287], "nmslib": 292, "nmslib_": 292, "nmslibtransform": 292, "nn": [250, 419, 699], "nn_candid": 284, "nn_compon": [245, 246], "nn_sampl": [245, 284], "nndsvd": [416, 542, 544, 551, 1045, 1048], "nndsvda": [54, 416, 542, 544, 551, 1045, 1048], "nndsvdar": [416, 542, 544, 551, 1045], "nneq": 703, "nnl": [209, 661], "nnlnr": [1051, 1052], "nnmf": [419, 1030, 1031, 1036], "nntp": [353, 374], "nnz": [200, 354, 374, 703], "no_chang": 905, "no_interact": [565, 566, 1051], "no_mathjax": 379, "no_structur": [79, 95], "no_valid": [927, 993], "no_weight": 227, "no_weights_handl": 227, "noa": [1047, 1053], "noah": 1001, "noc": 51, "noced": 662, "nodar": 1049, "node": [2, 51, 76, 144, 148, 199, 321, 327, 328, 357, 361, 387, 388, 411, 413, 416, 418, 444, 445, 448, 466, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 654, 658, 660, 686, 687, 696, 848, 849, 916, 917, 918, 919, 920, 922, 958, 1008, 1010, 1011, 1012, 1021, 1039, 1040, 1041, 1042, 1043, 1045, 1048, 1049, 1050, 1051, 1053, 1055], "node_count": [321, 357, 361, 916, 917, 918, 919], "node_depth": 361, "node_id": [361, 920, 922], "node_idx": 361, "node_ind": 361, "node_index": 361, "node_position_model": 51, "noel": [0, 401, 1036, 1037, 1038, 1039, 1040, 1048], "noelano": 1048, "nof": 151, "nogil": 380, "noinfo": 251, "noir": 318, "nois": [44, 49, 53, 58, 59, 64, 67, 69, 75, 79, 82, 85, 87, 88, 94, 95, 100, 107, 116, 121, 122, 124, 126, 128, 136, 138, 147, 152, 153, 170, 171, 172, 176, 180, 184, 194, 196, 197, 199, 203, 204, 209, 212, 213, 216, 217, 218, 219, 231, 237, 239, 241, 243, 244, 247, 272, 280, 285, 287, 304, 307, 308, 314, 319, 322, 328, 348, 359, 360, 362, 375, 381, 384, 409, 411, 416, 418, 420, 421, 422, 447, 449, 455, 515, 517, 518, 519, 520, 521, 522, 526, 528, 529, 534, 536, 538, 545, 610, 611, 612, 613, 615, 617, 618, 619, 620, 621, 625, 626, 628, 629, 648, 649, 653, 654, 655, 657, 658, 659, 660, 667, 668, 669, 675, 683, 689, 690, 696, 885, 897, 903, 926, 998, 1000, 1001, 1002, 1005, 1008, 1018, 1026, 1037, 1042, 1047, 1049, 1050], "noise_coef": 87, "noise_kernel": 176, "noise_level": [171, 176, 177, 616, 629], "noise_level_bound": [176, 177, 629], "noise_level_grid": 177, "noise_std": 178, "noise_vari": [201, 536, 660, 1001, 1050], "noise_variance_": [121, 201, 536, 538, 545, 660, 1043, 1050], "noise_variance_init": 536, "noiseless": [124, 1003], "noisi": [44, 69, 82, 88, 95, 122, 135, 165, 171, 177, 199, 213, 216, 237, 244, 263, 273, 279, 281, 282, 285, 317, 359, 360, 362, 411, 419, 421, 422, 447, 449, 453, 525, 528, 952, 1000, 1002, 1008, 1020], "noisier": 1002, "noisili": 188, "noisy_circl": [79, 95], "noisy_moon": [79, 95], "noiz": 115, "nolan": 1053, "noll": [214, 232], "nomenclatur": [1001, 1042], "nomin": [188, 373, 393, 394, 418, 419, 585, 586, 720, 1015, 1025], "non": [0, 2, 25, 42, 44, 45, 48, 49, 52, 53, 61, 62, 64, 69, 70, 72, 82, 90, 95, 103, 107, 111, 113, 122, 123, 124, 126, 137, 144, 152, 153, 155, 165, 166, 168, 175, 177, 183, 184, 186, 187, 188, 189, 190, 193, 194, 199, 200, 202, 204, 207, 208, 210, 212, 213, 215, 216, 220, 228, 229, 230, 232, 237, 238, 242, 243, 244, 245, 247, 251, 257, 259, 263, 264, 265, 266, 267, 272, 281, 289, 292, 296, 298, 310, 312, 314, 316, 317, 322, 323, 324, 325, 327, 328, 335, 337, 339, 344, 345, 346, 349, 350, 353, 354, 355, 361, 362, 366, 367, 371, 374, 375, 379, 380, 381, 384, 385, 387, 388, 391, 393, 394, 405, 409, 411, 412, 415, 417, 418, 419, 420, 421, 423, 440, 444, 448, 449, 453, 455, 459, 465, 466, 467, 468, 470, 471, 491, 500, 501, 507, 508, 512, 530, 536, 539, 540, 542, 544, 548, 551, 553, 555, 556, 557, 561, 562, 563, 564, 565, 566, 568, 569, 570, 576, 592, 593, 595, 596, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 635, 639, 642, 647, 654, 656, 661, 662, 663, 664, 668, 669, 670, 671, 672, 673, 676, 680, 681, 682, 689, 690, 691, 692, 693, 694, 695, 696, 698, 702, 703, 706, 710, 711, 716, 719, 721, 723, 724, 730, 731, 732, 739, 741, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 782, 786, 789, 792, 793, 794, 795, 798, 801, 802, 804, 805, 809, 811, 812, 813, 814, 816, 822, 830, 834, 837, 856, 858, 859, 860, 863, 868, 869, 871, 872, 873, 876, 880, 881, 882, 883, 884, 885, 887, 888, 895, 896, 897, 898, 899, 901, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 933, 934, 935, 950, 952, 956, 959, 967, 994, 995, 996, 997, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1026, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "non_determinist": [381, 927, 1050], "non_neg": [586, 1043], "non_negative_factor": [2, 1045, 1047, 1048, 1049, 1053], "non_nest": 277, "non_nested_scor": 277, "non_nested_scores_lin": 277, "non_noisy_label": 327, "non_outliers_mask": 312, "non_zero": [46, 51], "nonblasdotwarn": 1048, "none": [43, 47, 48, 49, 52, 55, 63, 66, 69, 74, 76, 77, 79, 85, 87, 88, 89, 95, 123, 126, 130, 139, 143, 144, 146, 149, 150, 162, 169, 172, 178, 179, 190, 194, 214, 215, 222, 225, 232, 234, 247, 248, 249, 251, 265, 267, 272, 273, 284, 297, 299, 303, 316, 319, 323, 324, 332, 335, 340, 342, 343, 346, 347, 348, 353, 354, 374, 375, 376, 379, 381, 386, 388, 393, 402, 405, 411, 415, 418, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 704, 705, 706, 707, 711, 712, 713, 715, 716, 717, 718, 720, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 738, 739, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 927, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 944, 946, 951, 952, 955, 956, 958, 959, 963, 964, 967, 970, 973, 975, 978, 979, 985, 988, 989, 991, 993, 994, 1001, 1005, 1015, 1018, 1021, 1031, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "nonecheck": 380, "nonetheless": [393, 1005], "nonexist": 636, "nonflavanoid": 376, "nonlinear": [287, 324, 648, 692, 693, 697, 700, 874, 1001, 1002, 1010, 1015], "nonmetr": [694, 698, 1002], "nonneg": [411, 416, 456, 542, 544, 551, 885], "nonner": 1047, "nono": 399, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 399, "nonoisomapisomapspectralembeddingspectr": 399, "nonojustlookingjust": 399, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 399, "nonolinearsvclinear": 399, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 399, "nonopredict": 399, "nonopredictingstructurepredict": 399, "nonosvcsvcensembleclassifiersensembl": 399, "nonosvr": 399, "nonotoughlucktough": 399, "nonoverlap": 376, "nonparametr": [420, 421, 611, 612], "nonzero": [55, 57, 130, 213, 245, 276, 355, 408, 422, 447, 527, 528, 535, 541, 546, 552, 592, 595, 689, 690, 703, 850, 851, 854, 856, 858, 859, 1005], "nonzero_coef": 1001, "noptic": 98, "noptimum": 177, "noqa": [100, 118, 127, 147, 169, 182, 183, 188, 211, 234, 236, 283, 284, 323, 353, 383, 583, 584, 631, 807, 808, 994, 1045], "nor": [147, 275, 353, 362, 366, 384, 391, 409, 419, 440, 449, 598, 938, 1009, 1021, 1047], "norbert": [0, 369, 1038, 1048, 1049, 1050], "nordbi": 1053, "nore\u00f1a": 1049, "norm": [2, 51, 53, 54, 55, 66, 70, 75, 87, 124, 174, 177, 194, 199, 200, 205, 237, 257, 258, 259, 261, 263, 269, 273, 297, 312, 342, 354, 385, 388, 393, 411, 419, 420, 445, 446, 450, 462, 463, 467, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 492, 535, 538, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 593, 594, 595, 601, 647, 650, 651, 656, 657, 661, 662, 663, 664, 665, 666, 667, 668, 676, 678, 680, 682, 685, 688, 689, 690, 694, 696, 697, 698, 774, 845, 880, 895, 908, 910, 913, 986, 987, 998, 1001, 1003, 1005, 1015, 1019, 1039, 1041, 1043, 1047], "norm1": 467, "norm2": 467, "norm_diag": 531, "norm_laplacian": 699, "norm_ord": [601, 1043], "norm_y_weight": 1048, "normal": [2, 25, 36, 44, 49, 51, 55, 57, 58, 63, 65, 70, 72, 75, 79, 80, 90, 94, 95, 99, 105, 107, 109, 110, 111, 115, 116, 122, 135, 136, 138, 141, 146, 147, 150, 151, 152, 164, 174, 177, 178, 183, 184, 186, 187, 193, 194, 195, 196, 197, 199, 204, 207, 209, 212, 216, 217, 218, 220, 228, 232, 237, 251, 257, 262, 263, 265, 266, 269, 272, 278, 297, 298, 301, 311, 313, 317, 322, 325, 328, 329, 334, 342, 354, 355, 362, 371, 374, 375, 376, 379, 384, 388, 392, 393, 407, 408, 409, 411, 412, 414, 417, 418, 419, 423, 443, 452, 454, 455, 456, 465, 467, 468, 478, 485, 486, 487, 492, 500, 516, 519, 523, 530, 531, 537, 540, 545, 546, 548, 552, 553, 556, 557, 558, 561, 562, 563, 564, 566, 567, 568, 569, 570, 583, 584, 586, 592, 593, 594, 595, 615, 629, 631, 643, 662, 663, 673, 676, 680, 684, 691, 695, 699, 701, 707, 708, 710, 722, 728, 730, 738, 740, 745, 749, 753, 754, 756, 759, 760, 761, 765, 774, 798, 799, 800, 807, 808, 834, 836, 845, 847, 853, 854, 857, 868, 869, 872, 873, 876, 878, 881, 882, 883, 884, 885, 886, 888, 893, 894, 896, 897, 898, 899, 903, 904, 916, 917, 918, 919, 951, 952, 956, 980, 981, 986, 987, 997, 999, 1001, 1002, 1003, 1004, 1007, 1011, 1016, 1018, 1020, 1021, 1026, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "normalis": [187, 615, 792], "normalization_": [643, 997], "normalize_compon": [1044, 1046], "normalize_i": [176, 180, 421, 615, 1050], "normalized_discounted_cumulative_gain": 760, "normalized_mutual_info_scor": [2, 72, 411, 740, 759, 799, 1005, 1044, 1050], "normalized_stress": [234, 694, 698, 1002, 1051], "normalized_weight": 196, "norms_squar": 690, "north": [376, 411], "northern": 318, "northrop": 51, "northwestern": 662, "norvan": 1046, "nose": [376, 1039, 1043], "nosetest": 1038, "not_memb": 187, "notabl": [248, 312, 373, 393, 410, 500, 732, 881, 1002, 1004, 1008, 1040, 1043, 1050], "notarstefano": [1044, 1045], "notat": [151, 393, 412, 416, 419, 594, 716, 1001, 1005, 1045, 1052], "notch": 1029, "note": [0, 30, 43, 44, 46, 47, 50, 51, 53, 57, 58, 63, 64, 68, 72, 86, 99, 103, 104, 111, 113, 115, 116, 119, 124, 138, 139, 141, 143, 147, 148, 152, 169, 171, 178, 182, 186, 187, 188, 189, 190, 192, 201, 203, 207, 214, 215, 216, 218, 222, 228, 230, 232, 234, 235, 236, 238, 241, 242, 244, 246, 247, 248, 249, 251, 258, 266, 267, 268, 272, 275, 278, 280, 286, 291, 292, 294, 298, 299, 308, 312, 313, 316, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 334, 336, 342, 346, 353, 361, 366, 367, 373, 376, 377, 379, 380, 381, 383, 385, 386, 391, 392, 393, 397, 402, 405, 406, 409, 411, 413, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 434, 436, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 462, 463, 464, 465, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 490, 493, 500, 502, 513, 519, 523, 531, 534, 537, 538, 542, 543, 544, 545, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 601, 603, 604, 606, 607, 608, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 633, 634, 636, 637, 639, 640, 642, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 700, 703, 704, 711, 712, 717, 719, 724, 725, 726, 727, 728, 732, 733, 734, 736, 738, 742, 745, 750, 758, 759, 762, 767, 768, 772, 774, 778, 782, 786, 787, 788, 789, 791, 792, 793, 796, 797, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 924, 925, 927, 930, 940, 942, 951, 952, 964, 967, 979, 988, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1031, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "notebook": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 380, 381, 385, 412, 471, 906, 1021, 1023, 1024, 1025, 1047, 1050], "notes_neighbor": 1036, "notfittederror": [2, 133, 393, 857, 988, 1040, 1042, 1045, 1046, 1052, 1053], "noth": [57, 102, 329, 353, 354, 384, 546, 718, 871, 880, 935, 1015], "nothman": [0, 394, 400, 419, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054], "notic": [46, 52, 62, 63, 70, 86, 90, 111, 138, 140, 141, 147, 150, 168, 194, 199, 241, 254, 269, 270, 272, 273, 275, 281, 282, 292, 317, 346, 353, 354, 355, 362, 381, 384, 394, 410, 415, 418, 500, 545, 567, 994, 1004, 1005, 1011, 1033, 1049], "notif": 383, "notifi": [2, 576, 577, 578, 1034, 1046], "notimplementederror": [557, 558, 895, 1043, 1053], "notin": 411, "notion": [281, 346, 354, 368, 391, 411, 416, 418, 1001, 1005], "notmatthancock": [1044, 1046], "noto": 1049, "notplancha": 1054, "noun": 393, "nouri": [366, 1037, 1039], "novak": 1039, "novarti": 51, "novaya": [1046, 1049], "novel": [228, 298, 341, 362, 409, 994], "novelti": [184, 228, 241, 251, 293, 299, 341, 854, 1026, 1027, 1030, 1031, 1036, 1044], "novemb": [169, 214, 232, 376, 383, 1041, 1042, 1044], "novic": 1038, "now": [43, 44, 46, 52, 55, 58, 86, 90, 103, 116, 126, 135, 136, 140, 142, 143, 144, 147, 148, 155, 158, 169, 171, 176, 177, 178, 183, 186, 187, 188, 189, 192, 194, 196, 200, 201, 203, 215, 216, 218, 238, 246, 248, 266, 268, 272, 275, 283, 284, 285, 286, 289, 295, 317, 322, 323, 325, 326, 327, 328, 329, 333, 342, 353, 354, 355, 362, 366, 368, 374, 379, 380, 381, 385, 391, 392, 393, 397, 408, 411, 415, 416, 418, 419, 423, 431, 497, 512, 513, 516, 540, 553, 583, 584, 586, 631, 634, 653, 657, 662, 667, 688, 730, 760, 801, 802, 807, 808, 840, 855, 867, 868, 979, 995, 1001, 1005, 1011, 1014, 1015, 1020, 1021, 1025, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "nowadai": 379, "nozawa": [1051, 1052], "np": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 119, 122, 123, 124, 125, 127, 128, 130, 131, 136, 137, 138, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 162, 164, 165, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 194, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 239, 241, 244, 245, 246, 247, 248, 249, 250, 251, 253, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 291, 292, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 310, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 358, 359, 360, 361, 362, 366, 373, 374, 379, 381, 384, 385, 388, 391, 393, 402, 408, 411, 412, 415, 416, 417, 418, 419, 421, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 488, 497, 500, 501, 504, 508, 512, 513, 514, 518, 519, 520, 521, 522, 523, 524, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 565, 567, 568, 569, 570, 573, 574, 585, 586, 589, 590, 592, 593, 597, 598, 601, 605, 608, 610, 613, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 640, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 691, 695, 696, 698, 699, 703, 706, 707, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 747, 748, 752, 757, 758, 759, 760, 767, 773, 777, 782, 785, 786, 787, 788, 790, 791, 792, 793, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 830, 831, 832, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 858, 859, 860, 864, 865, 872, 873, 875, 876, 881, 882, 883, 884, 885, 887, 888, 889, 896, 897, 900, 901, 902, 903, 904, 905, 908, 910, 911, 913, 914, 916, 917, 918, 919, 925, 930, 931, 932, 933, 934, 935, 937, 939, 940, 950, 951, 952, 958, 959, 966, 967, 969, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 994, 995, 1000, 1001, 1003, 1005, 1006, 1008, 1009, 1011, 1015, 1016, 1017, 1019, 1020, 1021, 1037, 1039, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "npach": [1051, 1052], "npo": 237, "npolynomi": 43, "nprior": 257, "npropag": 79, "nqy18": 419, "nreceiv": 281, "nrow": [43, 44, 66, 68, 70, 90, 99, 105, 121, 150, 180, 188, 214, 216, 222, 232, 234, 235, 238, 251, 266, 274, 275, 292, 314, 316, 317, 326, 332, 348, 349, 375], "nsampl": [381, 801, 802], "nswdemand": 150, "nswprice": 150, "nt": 55, "nt_uri": 55, "ntest": 301, "ntf": 703, "nth": [279, 711, 1005], "nthe": [188, 270, 361], "ntime": [50, 283], "nto": [220, 281], "ntol": 169, "ntrain": 83, "ntree": 43, "ntrue": [45, 331, 332], "ntt": 703, "ntu": [192, 373, 490, 512, 513, 662], "ntwo": 375, "nu": [2, 46, 48, 50, 180, 228, 241, 341, 366, 418, 421, 623, 681, 910, 911, 912, 1011, 1019, 1020, 1047, 1051], "nuanc": 393, "nuc": 289, "nuclear": [169, 376], "nuclei": [169, 376], "nudge_dataset": 310, "nuff": 1043, "nugmanov": [1044, 1045], "nuisanc": 421, "nukariya": [1048, 1049], "null": [79, 103, 187, 188, 189, 266, 272, 278, 411, 415, 500, 652, 673, 684, 708, 735, 761, 799, 833, 1001, 1002, 1005, 1020, 1046], "null_count": 52, "nullabl": [631, 632, 633, 634, 1047, 1051], "nullformatt": [234, 236, 239, 292], "nullloc": 297, "num": [43, 51, 103, 169, 171, 176, 177, 178, 188, 189, 216, 279, 280, 325, 327, 328, 418, 500, 636], "num_col": 255, "num_cor": 385, "num_depend": 266, "num_featur": [1003, 1051], "num_linear_processor": 155, "num_missing_cel": 150, "num_pip": 255, "num_preprocess": 467, "num_proc": [243, 322], "num_sampl": [804, 818, 1051], "num_selector": 155, "num_sent": 102, "num_thread": 292, "num_tree_processor": 155, "num_trial": 277, "numba": [292, 1025], "number": [2, 43, 44, 46, 47, 49, 51, 52, 53, 57, 58, 62, 63, 64, 68, 69, 71, 73, 74, 76, 78, 79, 80, 81, 82, 83, 86, 87, 88, 90, 94, 95, 96, 100, 102, 103, 104, 105, 107, 113, 115, 116, 119, 121, 123, 125, 126, 128, 135, 136, 138, 141, 143, 145, 146, 147, 148, 151, 155, 157, 165, 166, 167, 169, 179, 180, 183, 184, 187, 188, 192, 199, 203, 213, 214, 215, 216, 221, 222, 228, 229, 230, 231, 232, 234, 241, 245, 249, 251, 252, 257, 258, 260, 262, 263, 265, 266, 267, 270, 271, 272, 273, 274, 277, 278, 279, 280, 281, 285, 289, 292, 294, 298, 299, 312, 314, 315, 318, 321, 322, 323, 324, 325, 326, 327, 329, 335, 342, 347, 349, 354, 355, 357, 361, 362, 367, 368, 371, 373, 374, 375, 376, 377, 379, 382, 383, 385, 386, 387, 388, 391, 392, 393, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 434, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 585, 586, 587, 588, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 707, 708, 709, 711, 716, 717, 718, 720, 722, 724, 728, 732, 733, 734, 735, 738, 739, 742, 744, 756, 759, 778, 782, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 934, 935, 938, 951, 952, 955, 956, 973, 975, 978, 979, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "number_norm": 57, "numbernormalizingvector": 57, "numer": [2, 43, 52, 57, 99, 103, 107, 144, 155, 169, 176, 179, 188, 189, 203, 214, 232, 251, 253, 255, 279, 302, 318, 324, 328, 355, 373, 374, 376, 382, 384, 385, 391, 392, 393, 407, 411, 413, 418, 419, 420, 421, 423, 424, 443, 446, 450, 462, 474, 475, 478, 481, 492, 493, 494, 500, 504, 505, 506, 508, 509, 514, 535, 537, 539, 544, 545, 551, 565, 566, 571, 585, 594, 615, 621, 624, 631, 634, 636, 637, 650, 656, 658, 676, 691, 694, 698, 718, 782, 792, 798, 804, 807, 808, 810, 818, 827, 830, 831, 832, 835, 843, 844, 845, 846, 847, 865, 866, 871, 876, 881, 882, 889, 920, 921, 922, 934, 935, 951, 952, 994, 995, 1001, 1002, 1006, 1013, 1015, 1016, 1021, 1028, 1029, 1036, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "numeric_featur": [103, 325], "numeric_onli": 188, "numeric_preprocessor": 253, "numeric_transform": [103, 325], "numerical_column": [187, 189, 470], "numerical_columns_subset": 144, "numerical_featur": [188, 318], "numerical_pip": 189, "numerical_transform": 103, "numfocu": 0, "numpi": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 136, 137, 138, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 162, 164, 165, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 194, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 239, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 291, 292, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 310, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 358, 359, 360, 361, 362, 366, 372, 373, 374, 377, 379, 380, 381, 382, 385, 387, 388, 391, 392, 393, 397, 402, 404, 405, 407, 408, 411, 412, 415, 416, 417, 418, 419, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 488, 493, 497, 498, 500, 507, 510, 512, 513, 525, 531, 535, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 573, 574, 585, 586, 589, 590, 592, 593, 595, 605, 608, 622, 631, 632, 633, 634, 635, 636, 637, 647, 650, 651, 653, 656, 657, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 676, 680, 681, 682, 688, 691, 692, 695, 696, 697, 698, 699, 703, 706, 707, 710, 711, 713, 716, 718, 730, 731, 733, 734, 736, 738, 739, 742, 743, 758, 760, 777, 783, 785, 786, 787, 788, 791, 792, 793, 798, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 831, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 910, 911, 913, 914, 916, 930, 931, 932, 933, 937, 939, 949, 950, 951, 952, 956, 958, 959, 966, 967, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 991, 994, 995, 1000, 1001, 1003, 1005, 1006, 1008, 1011, 1015, 1017, 1020, 1021, 1023, 1025, 1036, 1039, 1040, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "numpydoc": [379, 393, 397, 404], "nune": 1037, "nuniformli": 151, "nuniqu": 318, "nurseit": 1053, "nusvc": [2, 366, 440, 911, 1006, 1020, 1036, 1037, 1038, 1041, 1044, 1046, 1047, 1048, 1050], "nusvr": [2, 46, 366, 914, 1020, 1038, 1044, 1046, 1047, 1048, 1050, 1051], "nutshel": 1003, "nv": 51, "nvidia": [0, 391], "nvirginica": 281, "nwanna": 1051, "nweight": 157, "nwith": [72, 90, 94, 168, 354], "nx": [50, 305, 374, 502], "nxorabl": 1046, "ny": [50, 52, 271, 305, 374, 376, 502, 995, 1017], "nyc": [1023, 1029], "nymark": 1051, "nystroem": [2, 43, 182, 228, 241, 246, 371, 644, 645, 646, 681, 874, 913, 914, 1031, 1037, 1043, 1046, 1048, 1049, 1050], "nystroem_approx_svm": 246, "nystroem_scor": 246, "nystroem_tim": 246, "nystrom": [883, 1045, 1046], "nystr\u00f6m": [43, 997], "nyu": [0, 857], "nz": 534, "nzw": 1044, "n\u00e1jera": [1040, 1041, 1042, 1043], "n\u00e1pole": 1049, "o": [0, 55, 57, 64, 66, 73, 82, 88, 93, 94, 96, 97, 113, 115, 123, 152, 169, 179, 201, 207, 212, 214, 229, 247, 257, 266, 272, 274, 281, 312, 313, 317, 322, 325, 328, 335, 346, 357, 366, 374, 376, 379, 387, 397, 411, 413, 416, 418, 422, 424, 447, 450, 451, 453, 476, 478, 503, 538, 608, 631, 670, 671, 696, 836, 864, 879, 920, 973, 997, 999, 1001, 1002, 1005, 1006, 1008, 1009, 1019, 1020, 1021, 1036, 1039, 1042, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "oa": [2, 49, 65, 70, 108, 112, 113, 128, 149, 184, 301, 303, 413, 472, 473, 476, 477, 479, 480, 516, 553, 804, 999, 1026], "oa_ms": 110, "oa_shrinkag": 110, "oak": 318, "oarc": 1001, "ob2019": 1005, "obaja": 1040, "obatin": 317, "obei": [393, 1003], "obj": [248, 405, 571, 572, 942, 961, 963, 964, 965, 970], "obj_func": [614, 615], "object": [2, 43, 50, 53, 54, 57, 63, 64, 79, 83, 95, 99, 102, 103, 124, 133, 150, 155, 160, 168, 176, 184, 188, 199, 210, 214, 230, 232, 240, 248, 252, 254, 255, 266, 270, 279, 281, 282, 284, 305, 318, 324, 325, 327, 328, 331, 354, 355, 362, 372, 373, 374, 379, 380, 382, 384, 385, 386, 388, 392, 393, 394, 402, 405, 411, 412, 413, 416, 419, 420, 421, 425, 427, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 715, 722, 736, 737, 746, 762, 763, 785, 786, 793, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 923, 934, 935, 936, 937, 938, 941, 942, 946, 948, 957, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 989, 990, 992, 1001, 1002, 1003, 1004, 1008, 1011, 1012, 1015, 1018, 1019, 1020, 1024, 1025, 1026, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "object_nam": [248, 961, 964], "obozinski": 416, "obscur": [1012, 1052], "observ": [2, 43, 44, 46, 48, 50, 52, 53, 58, 61, 64, 70, 72, 75, 78, 86, 95, 103, 109, 111, 112, 113, 122, 123, 126, 128, 135, 138, 139, 141, 142, 147, 150, 151, 154, 169, 171, 174, 176, 177, 178, 180, 187, 188, 189, 194, 195, 209, 210, 212, 214, 215, 216, 218, 228, 232, 238, 239, 244, 245, 251, 266, 268, 272, 274, 275, 279, 285, 286, 292, 295, 298, 305, 317, 327, 329, 334, 341, 342, 346, 347, 353, 354, 355, 359, 360, 374, 376, 393, 397, 409, 411, 413, 414, 415, 416, 417, 420, 421, 444, 446, 448, 449, 450, 452, 462, 463, 472, 473, 474, 475, 476, 477, 478, 479, 528, 536, 555, 556, 567, 614, 615, 650, 656, 661, 705, 720, 722, 762, 825, 846, 854, 887, 889, 1001, 1004, 1005, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1028, 1037, 1049, 1050, 1051, 1052], "observatori": 176, "obsolet": [1036, 1052], "obstruct": 1043, "obtain": [22, 43, 46, 48, 51, 52, 58, 64, 88, 90, 91, 103, 106, 107, 126, 128, 135, 144, 147, 148, 153, 160, 169, 173, 175, 187, 188, 199, 214, 216, 218, 228, 238, 251, 257, 258, 259, 266, 268, 272, 273, 274, 278, 281, 285, 295, 317, 324, 340, 346, 354, 355, 361, 362, 374, 376, 381, 393, 405, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 440, 445, 472, 500, 536, 537, 559, 560, 561, 562, 563, 564, 567, 568, 569, 597, 610, 618, 649, 663, 665, 670, 672, 676, 678, 680, 681, 691, 712, 716, 730, 743, 760, 797, 810, 827, 833, 836, 837, 840, 854, 865, 885, 897, 910, 913, 916, 917, 952, 994, 995, 997, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1015, 1019, 1020, 1042, 1044, 1047, 1049, 1050, 1051, 1052, 1053], "obviat": 997, "obviou": [187, 346, 362, 366, 379, 408, 416], "obvious": [183, 366], "oc": 1051, "occas": 379, "occasion": [394, 731, 1045], "occup": [187, 312, 328, 500], "occupation_cler": 187, "occupation_manag": 187, "occupation_oth": 187, "occupation_profession": 187, "occupation_sal": 187, "occupation_servic": 187, "occupi": [411, 1005], "occur": [54, 102, 145, 214, 218, 232, 349, 362, 379, 387, 394, 408, 411, 413, 415, 419, 447, 512, 513, 576, 585, 594, 631, 675, 802, 804, 807, 808, 810, 818, 827, 830, 831, 832, 835, 878, 939, 1005, 1007, 1015, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "occurr": [2, 214, 318, 354, 355, 374, 379, 383, 411, 419, 573, 574, 585, 593, 594, 621, 631, 632, 633, 634, 787, 843, 871, 1007, 1037, 1042], "ocean": 305, "ocsvm": [48, 228], "oct": [696, 773, 1002, 1008], "octob": [110, 374, 1036, 1043, 1049, 1050, 1052], "od280": 376, "od315": 376, "odd": [275, 418, 518, 716, 1005, 1043, 1044], "ofcategoriesknownnumb": 399, "off": [44, 51, 53, 72, 74, 75, 81, 85, 86, 109, 113, 115, 121, 141, 150, 168, 169, 184, 218, 235, 246, 250, 264, 265, 271, 273, 274, 275, 285, 289, 312, 329, 332, 334, 336, 342, 351, 353, 374, 379, 381, 393, 410, 411, 413, 420, 445, 500, 557, 558, 563, 564, 592, 595, 638, 660, 662, 696, 719, 801, 802, 804, 807, 808, 818, 820, 826, 831, 869, 888, 956, 1004, 1010, 1020, 1025, 1026, 1036, 1040, 1041, 1043], "offer": [43, 141, 202, 381, 387, 391, 392, 393, 397, 405, 415, 416, 418, 419, 994, 995, 1006, 1009, 1021, 1024, 1025, 1029, 1042, 1054, 1055], "offic": 1029, "offici": [374, 381, 391, 393, 397, 497, 501, 1024, 1044, 1045, 1048], "offlin": [266, 366, 379], "offset": [138, 192, 391, 413, 416, 472, 512, 513, 567, 636, 637, 645, 646, 648, 649, 681, 732, 779, 781, 854, 912, 1005, 1019, 1044, 1055], "offset_": [472, 567, 681, 854, 912, 1044], "offset_init": 681, "offsetbox": 235, "offsetimag": 235, "ofmulticlass": 1020, "often": [43, 57, 61, 62, 64, 69, 102, 106, 141, 150, 153, 175, 182, 187, 188, 215, 232, 235, 251, 259, 274, 277, 312, 317, 342, 351, 353, 354, 355, 366, 367, 373, 374, 376, 379, 381, 384, 387, 391, 392, 393, 396, 399, 405, 409, 411, 412, 413, 415, 416, 418, 419, 421, 423, 471, 525, 528, 537, 540, 636, 650, 651, 656, 657, 664, 665, 666, 667, 676, 678, 691, 732, 878, 886, 894, 906, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1015, 1018, 1019, 1021, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "og": 419, "ogbonna": 1049, "ogordon100": 1049, "ogrid": 53, "ogu": 419, "ogura": 1051, "oh": [881, 1046], "ohad": 1050, "ohayon": [1044, 1045, 1052], "ohio": 374, "ohno": 409, "oj_lappi": 1048, "oja": [423, 537], "ojala": [278, 415, 833], "ojeda": 1050, "ok": [49, 379, 1011], "okal": 1040, "okbalefthand": 1042, "okhlopkov": [1042, 1043], "okon": 1050, "okroshiashvili": 1049, "ol": [194, 204, 209, 211, 212, 220, 231, 324, 660, 1001], "ol2001": 995, "olatunji": 1051, "old": [232, 379, 383, 385, 411, 471, 540, 650, 656, 906, 1002, 1025, 1036, 1041, 1042, 1044, 1049, 1050, 1051], "olden": 1044, "older": [248, 378, 383, 405, 467, 1028, 1034, 1039, 1046, 1048], "oldest": 500, "oldid": 1005, "oldja": 1048, "oleg": 1046, "oleggio": 1040, "olegovich": 1043, "oleh": [1048, 1050], "oleksandr": [1044, 1045, 1046, 1047, 1050], "oleksii": 1053, "olemiss": 683, "olga": [632, 995], "oli": 1043, "oliblum90": [1043, 1044], "olicairn": 1047, "olimpio": 1044, "oliph": 1036, "oliv": [1044, 1045, 1047, 1048, 1049], "oliveira": [1042, 1044, 1046, 1050], "olivetti": [2, 121, 372, 416, 499, 1031, 1036, 1044], "olivetti_fac": 499, "olivi": [0, 394, 400, 904, 1018, 1023, 1025, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "oll": 1051, "olr": 194, "olsen": 1043, "olshen": [916, 917, 1021], "olson": 1042, "olszewski": 1049, "olvi": [169, 376], "om": 1043, "omar": [0, 400, 1046, 1051, 1052, 1053, 1054, 1055], "omarmanzoor": 1052, "omega": [349, 414, 999], "omega_": 999, "omega_k": [414, 999], "omer": 1041, "omit": [142, 186, 187, 336, 384, 424, 478, 538, 670, 672, 680, 811, 813, 836, 837, 840, 843, 844, 845, 846, 847, 865, 1003, 1010], "omohundro": 1008, "omp": [2, 124, 130, 213, 416, 535, 541, 546, 552, 668, 669, 689, 690, 1027, 1031, 1036, 1044], "omp_cv": 213, "omp_get_max_thread": 380, "omp_num_thread": 367, "omtcyfz": 1043, "onc": [2, 43, 47, 83, 166, 169, 171, 176, 235, 248, 251, 266, 270, 273, 285, 286, 289, 292, 318, 321, 325, 353, 355, 361, 362, 366, 368, 373, 374, 377, 379, 383, 384, 385, 386, 387, 392, 393, 394, 405, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 452, 454, 456, 475, 512, 513, 542, 548, 555, 563, 564, 594, 595, 601, 615, 623, 631, 651, 655, 657, 659, 665, 667, 669, 670, 671, 672, 680, 681, 682, 701, 716, 720, 722, 740, 785, 805, 809, 812, 822, 826, 843, 844, 845, 846, 847, 920, 1001, 1002, 1008, 1015, 1019, 1020, 1021, 1033, 1036, 1044, 1046, 1047, 1048, 1049, 1053], "one": [0, 2, 30, 43, 47, 48, 49, 52, 54, 55, 62, 63, 64, 68, 69, 70, 72, 75, 81, 86, 88, 90, 91, 93, 94, 97, 99, 103, 112, 118, 121, 124, 126, 130, 140, 141, 145, 147, 150, 151, 155, 158, 168, 169, 171, 178, 179, 182, 186, 187, 188, 189, 190, 192, 194, 195, 199, 203, 204, 206, 207, 208, 210, 214, 216, 223, 224, 229, 232, 236, 241, 248, 249, 251, 255, 259, 262, 266, 268, 269, 270, 272, 273, 275, 276, 279, 280, 281, 282, 289, 291, 292, 297, 310, 313, 314, 317, 318, 321, 323, 324, 325, 329, 334, 341, 342, 350, 353, 354, 355, 357, 361, 362, 366, 367, 368, 373, 374, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 396, 397, 399, 402, 405, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 447, 448, 449, 450, 452, 453, 454, 455, 456, 458, 459, 460, 463, 465, 467, 472, 477, 490, 491, 493, 494, 496, 497, 498, 499, 500, 504, 505, 506, 507, 508, 509, 512, 513, 514, 516, 518, 538, 543, 544, 545, 547, 551, 555, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573, 585, 587, 588, 592, 593, 594, 595, 614, 615, 619, 620, 624, 631, 634, 636, 637, 638, 639, 647, 651, 652, 653, 654, 658, 661, 662, 663, 665, 670, 672, 673, 675, 677, 678, 679, 680, 682, 684, 692, 696, 699, 703, 707, 713, 715, 724, 733, 734, 738, 742, 754, 755, 758, 767, 775, 778, 782, 783, 784, 785, 787, 788, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 807, 808, 810, 811, 812, 814, 816, 818, 822, 823, 826, 827, 829, 831, 832, 834, 835, 836, 837, 838, 840, 841, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 864, 868, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 887, 888, 889, 892, 894, 908, 910, 911, 912, 913, 914, 916, 917, 918, 919, 927, 930, 940, 944, 954, 975, 994, 995, 997, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "one_class": 249, "one_d_arrai": 925, "one_d_label": 928, "one_hot": [318, 329], "one_hot_encod": [43, 144], "one_hot_encoder_": 570, "one_hot_linear_pipelin": 43, "one_hot_linear_predict": 43, "one_hot_poly_pipelin": 43, "one_hot_poly_predict": 43, "one_hot_result": 144, "one_hot_tim": 43, "one_imag": [419, 588, 591], "one_vs_on": [421, 614, 1006], "one_vs_rest": [614, 1006], "oneclasssvm": [2, 48, 50, 228, 241, 324, 341, 567, 681, 854, 1011, 1019, 1020, 1038, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "oned": 397, "onehot": [253, 313, 314, 412, 873, 1015], "onehot_categor": [214, 232], "onehotencod": [2, 43, 103, 140, 144, 155, 187, 188, 214, 232, 243, 251, 253, 255, 318, 322, 324, 327, 328, 329, 373, 393, 412, 418, 469, 470, 570, 585, 586, 871, 875, 876, 879, 882, 889, 995, 1015, 1037, 1040, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "onehotencoderonehotencod": [103, 140, 155, 187, 188, 243, 253, 322, 325], "ones": [43, 50, 70, 78, 88, 103, 112, 145, 151, 171, 192, 199, 218, 219, 241, 244, 248, 272, 280, 283, 299, 316, 332, 351, 366, 367, 379, 387, 393, 411, 413, 415, 418, 426, 429, 433, 453, 536, 570, 585, 614, 615, 622, 648, 649, 662, 663, 674, 680, 707, 800, 806, 811, 822, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 883, 887, 958, 1001, 1005, 1010, 1011, 1015, 1020, 1036, 1044, 1045, 1046], "onetoonefeaturemixin": [2, 381, 435], "onevsoneclassifi": [2, 289, 402, 837, 838, 1037, 1039, 1040, 1042, 1043, 1045, 1048, 1050, 1053], "onevsrestclassifi": [2, 66, 206, 229, 249, 279, 281, 289, 402, 409, 662, 663, 836, 838, 908, 1037, 1038, 1040, 1042, 1043, 1049, 1050, 1053, 1054], "ong": 712, "ongari": 1053, "onggo": 1052, "ongo": [327, 380, 394], "onli": [2, 25, 30, 43, 46, 50, 53, 54, 58, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 82, 86, 88, 91, 99, 102, 103, 104, 106, 107, 112, 118, 124, 125, 127, 131, 135, 137, 142, 143, 144, 146, 154, 155, 164, 165, 166, 169, 171, 173, 178, 180, 183, 184, 186, 187, 188, 192, 193, 198, 199, 203, 210, 214, 215, 217, 220, 222, 223, 232, 234, 235, 241, 243, 245, 247, 248, 252, 255, 257, 258, 259, 262, 263, 266, 268, 270, 272, 274, 275, 278, 279, 280, 281, 283, 284, 285, 286, 289, 291, 292, 298, 300, 303, 305, 309, 312, 313, 317, 318, 323, 324, 331, 332, 334, 338, 339, 342, 346, 347, 349, 350, 353, 354, 355, 357, 358, 361, 362, 366, 367, 368, 372, 373, 374, 376, 377, 379, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 397, 402, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 431, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 492, 493, 494, 496, 498, 500, 501, 504, 505, 506, 507, 508, 509, 512, 513, 514, 516, 520, 523, 527, 528, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 703, 711, 713, 717, 730, 733, 734, 738, 740, 741, 742, 745, 747, 760, 762, 764, 778, 782, 783, 784, 785, 787, 788, 791, 792, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 818, 822, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 924, 925, 927, 928, 929, 930, 932, 933, 934, 935, 938, 940, 944, 952, 954, 958, 960, 965, 970, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1025, 1026, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "onlin": [2, 44, 45, 47, 54, 71, 84, 121, 124, 184, 193, 222, 228, 250, 266, 308, 368, 374, 378, 384, 393, 411, 416, 419, 421, 445, 449, 450, 452, 499, 506, 535, 540, 541, 542, 543, 549, 550, 586, 588, 662, 670, 671, 672, 680, 682, 834, 843, 844, 845, 846, 847, 850, 851, 856, 858, 859, 877, 878, 888, 908, 909, 997, 1001, 1009, 1011, 1023, 1026, 1027, 1029, 1031, 1036, 1040, 1041, 1043, 1051], "onlineldavb": 540, "only_non_neg": 1049, "only_physical_cor": 141, "onnx": [1024, 1025, 1031], "onnxruntim": 405, "onto": [116, 235, 236, 246, 312, 391, 416, 419, 423, 449, 451, 464, 537, 543, 547, 631, 632, 634, 692, 999, 1003, 1008], "onward": [882, 1040, 1054, 1055], "onx": 405, "oob": [134, 146, 184, 418, 519, 568, 1025, 1026, 1038, 1049, 1053], "oob_best_it": 146, "oob_color": 146, "oob_decision_function_": [559, 561, 568], "oob_error": 139, "oob_improvement_": [146, 418, 563, 564, 1038], "oob_lin": 146, "oob_prediction_": [560, 562, 569], "oob_scor": [139, 418, 559, 560, 561, 562, 568, 569, 1041, 1043], "oob_score_": [139, 559, 560, 561, 562, 563, 564, 568, 569, 1038, 1052], "oob_scores_": [563, 564, 1052], "op": [383, 430, 662, 663, 670, 671, 672, 680, 681, 682, 865, 866, 908, 1015], "opaqu": 1013, "open": [0, 47, 51, 55, 236, 373, 374, 377, 378, 379, 383, 385, 391, 392, 394, 405, 412, 419, 490, 500, 512, 513, 995, 1024, 1029, 1039, 1043, 1044, 1046, 1052], "open_pric": 51, "openbla": [366, 367, 377, 387, 391, 1049, 1053, 1054], "openblas_num_thread": 367, "opencv": 374, "opengraph": [379, 397, 404], "openml": [2, 43, 52, 103, 155, 176, 187, 214, 222, 230, 232, 242, 266, 286, 289, 291, 309, 372, 397, 500, 1031, 1044, 1046, 1049], "openml1": 52, "openml100": 373, "openmp": [322, 377, 382, 391, 393, 411, 418, 1047, 1049, 1052, 1054], "opentsn": 696, "oper": [2, 19, 53, 169, 179, 184, 242, 247, 254, 264, 266, 267, 269, 274, 279, 355, 366, 367, 376, 377, 379, 382, 385, 391, 393, 394, 397, 405, 407, 410, 415, 416, 418, 419, 420, 424, 445, 451, 464, 471, 478, 485, 486, 487, 488, 508, 537, 538, 545, 555, 556, 570, 576, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 620, 625, 628, 634, 639, 647, 662, 693, 697, 706, 710, 711, 712, 731, 778, 785, 786, 792, 793, 823, 834, 837, 848, 849, 871, 875, 880, 891, 892, 906, 913, 916, 954, 977, 1001, 1008, 1015, 1020, 1024, 1026, 1029, 1040, 1042, 1043, 1044, 1046, 1047, 1052, 1055], "operand": 421, "operation": [232, 1029], "operatornam": [416, 745, 1001, 1005, 1021], "opinion": 394, "opitz": 1005, "opportun": [538, 1019], "oppos": [100, 248, 407, 411, 904, 1008, 1020, 1036, 1054], "opposit": [62, 86, 100, 126, 187, 188, 203, 266, 279, 393, 409, 413, 415, 420, 446, 450, 452, 472, 542, 544, 551, 567, 716, 734, 854, 912, 1036], "opposite_lof_scor": 854, "opt": [377, 381], "opta": 901, "optic": [2, 71, 79, 184, 325, 372, 422, 447, 449, 458, 459, 460, 506, 1026, 1030, 1031, 1045, 1049, 1050, 1051, 1052, 1053, 1054], "optim": [46, 52, 53, 64, 86, 87, 90, 93, 104, 109, 110, 121, 145, 146, 148, 150, 168, 169, 171, 172, 175, 176, 177, 178, 179, 199, 201, 203, 207, 222, 230, 247, 251, 266, 270, 277, 280, 285, 286, 289, 291, 296, 310, 312, 317, 325, 329, 334, 344, 349, 353, 354, 355, 362, 366, 373, 376, 379, 381, 382, 391, 393, 397, 406, 408, 410, 411, 413, 415, 416, 418, 420, 421, 422, 447, 450, 451, 452, 453, 455, 460, 464, 465, 475, 476, 482, 535, 538, 539, 541, 543, 547, 561, 562, 563, 564, 578, 614, 615, 623, 624, 639, 642, 644, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 686, 687, 688, 691, 694, 696, 698, 699, 705, 723, 727, 734, 803, 804, 818, 826, 850, 851, 852, 854, 856, 857, 858, 859, 860, 865, 866, 884, 896, 900, 901, 908, 909, 910, 911, 912, 913, 914, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1019, 1020, 1021, 1024, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052], "optima": 421, "optimis": [381, 411, 1008, 1039, 1049, 1051], "optimist": [52, 203, 277, 353, 362, 711, 1001, 1005], "optimum": [94, 177, 187, 192, 266, 285, 410, 416, 475, 1001, 1004], "option": [2, 43, 66, 80, 85, 128, 141, 148, 177, 183, 196, 199, 215, 251, 266, 275, 281, 322, 329, 353, 357, 362, 368, 373, 374, 375, 377, 379, 380, 382, 384, 385, 387, 388, 391, 393, 394, 397, 405, 411, 412, 414, 415, 416, 418, 419, 422, 435, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 462, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 691, 692, 693, 694, 696, 698, 699, 715, 717, 721, 733, 734, 739, 740, 741, 761, 762, 763, 768, 770, 771, 775, 778, 779, 780, 781, 782, 785, 787, 788, 791, 796, 797, 799, 803, 805, 806, 807, 808, 810, 811, 813, 822, 826, 827, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 900, 901, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 942, 990, 994, 995, 1001, 1004, 1005, 1008, 1015, 1018, 1020, 1021, 1025, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "option_context": 232, "ora": 1049, "oracl": [2, 69, 214, 232, 424, 472, 473, 476, 477, 478, 479, 999, 1036], "orallo": 1005, "orang": [46, 48, 86, 111, 119, 122, 123, 128, 135, 149, 150, 152, 178, 183, 201, 203, 224, 249, 260, 266, 303, 322, 328, 360, 1006, 1053], "orazbayev": 1050, "orbit": [353, 354], "order": [2, 43, 53, 58, 61, 64, 81, 88, 97, 98, 104, 109, 130, 143, 144, 148, 150, 162, 176, 186, 187, 190, 192, 203, 207, 210, 214, 215, 220, 228, 232, 236, 245, 248, 251, 255, 259, 267, 270, 272, 279, 291, 310, 312, 317, 318, 319, 323, 324, 329, 349, 353, 355, 362, 366, 367, 374, 379, 380, 381, 383, 384, 385, 388, 393, 397, 398, 402, 405, 411, 412, 413, 415, 416, 417, 418, 419, 421, 423, 440, 443, 446, 449, 450, 452, 453, 458, 459, 460, 462, 467, 491, 492, 493, 499, 501, 519, 538, 539, 543, 544, 545, 547, 551, 555, 557, 559, 560, 561, 562, 563, 567, 568, 569, 570, 571, 585, 592, 595, 597, 598, 601, 610, 611, 612, 614, 626, 631, 635, 644, 662, 663, 669, 680, 689, 690, 692, 693, 697, 701, 703, 704, 706, 708, 716, 717, 722, 726, 730, 733, 734, 742, 744, 745, 746, 758, 760, 782, 786, 787, 788, 791, 792, 793, 798, 803, 804, 805, 807, 808, 809, 811, 815, 818, 822, 823, 826, 829, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 858, 865, 868, 879, 881, 882, 883, 887, 888, 889, 892, 893, 894, 896, 897, 898, 899, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 934, 935, 940, 952, 968, 973, 995, 1001, 1002, 1005, 1006, 1008, 1009, 1015, 1018, 1019, 1020, 1021, 1025, 1036, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "order_": [839, 842], "order_centroid": 354, "ordered_sampl": 232, "ordereddict": 139, "ordering_": [98, 411, 453, 458, 459, 460], "ordin": [43, 86, 103, 155, 251, 315, 318, 319, 323, 326, 373, 393, 418, 500, 571, 713, 873, 876, 881, 882, 889, 1001, 1002, 1015, 1025, 1044, 1050], "ordinal_encod": [144, 251], "ordinal_result": 144, "ordinalencod": [2, 144, 155, 188, 189, 214, 251, 318, 326, 373, 393, 585, 844, 876, 881, 889, 995, 1007, 1015, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "ordinalencoderordinalencod": [155, 188, 189, 318], "ordinari": [2, 123, 138, 184, 193, 194, 197, 199, 204, 210, 216, 217, 219, 231, 324, 639, 650, 656, 658, 659, 660, 661, 676, 682, 686, 687, 691, 1019, 1026, 1027, 1031], "ordinarili": [391, 393], "ordowski": 1005, "oregon": 318, "oren": 1044, "oresti": 1045, "orfano": [1049, 1050, 1051, 1052, 1053], "org": [43, 51, 52, 55, 61, 63, 103, 104, 140, 142, 151, 152, 155, 158, 166, 176, 187, 188, 189, 192, 196, 214, 222, 230, 232, 242, 243, 244, 248, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 291, 309, 310, 318, 322, 323, 325, 326, 328, 333, 361, 367, 372, 377, 379, 382, 385, 387, 394, 415, 599, 640, 672, 675, 680, 699, 709, 773, 850, 851, 856, 857, 858, 859, 886, 902, 916, 917, 946, 947, 1001, 1005, 1021, 1031, 1044, 1048], "organ": [0, 50, 52, 102, 111, 353, 373, 378, 379, 394, 856, 1024], "ori": 1042, "orient": [66, 121, 187, 234, 312, 393, 920, 1002], "orig": [53, 299], "orig_coin": [80, 81], "orig_data_ax": 126, "origin": [43, 44, 53, 58, 59, 80, 81, 84, 89, 91, 106, 107, 118, 121, 123, 124, 130, 150, 153, 165, 166, 169, 171, 173, 175, 176, 182, 183, 188, 192, 201, 203, 218, 234, 235, 236, 238, 239, 245, 246, 247, 251, 263, 266, 269, 275, 285, 295, 300, 310, 313, 317, 327, 332, 346, 353, 355, 362, 367, 374, 376, 378, 379, 381, 383, 384, 391, 393, 405, 408, 411, 412, 415, 416, 418, 419, 421, 422, 423, 424, 436, 440, 444, 446, 447, 448, 449, 450, 452, 453, 462, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 497, 498, 499, 505, 523, 535, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 580, 585, 586, 588, 592, 594, 595, 598, 611, 612, 614, 615, 618, 634, 636, 639, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 696, 700, 705, 732, 767, 773, 803, 805, 806, 811, 813, 822, 826, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 858, 859, 865, 866, 868, 871, 872, 873, 874, 875, 876, 877, 880, 881, 882, 884, 885, 886, 887, 888, 897, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 932, 934, 935, 939, 940, 963, 975, 978, 998, 999, 1001, 1002, 1004, 1005, 1008, 1011, 1016, 1017, 1018, 1019, 1022, 1024, 1029, 1039, 1040, 1042, 1044, 1046, 1048, 1050, 1052], "original_param": 149, "original_sklearn_vers": [405, 580], "original_space_centroid": 354, "orii": 1038, "orphan": [451, 464, 1036], "orr": [1009, 1019], "orr\u00f9": 1039, "orthogon": [2, 37, 87, 122, 123, 124, 130, 184, 193, 416, 530, 535, 541, 543, 546, 547, 552, 668, 669, 689, 690, 1017, 1026, 1027, 1031, 1036], "orthogonal_mp": [2, 552, 668, 669, 690, 1001], "orthogonal_mp_gram": [2, 668, 669, 689, 1050], "orthogonalmatchingpursuit": [2, 213, 669, 689, 690, 1001, 1006, 1036, 1038, 1041, 1044, 1049, 1054], "orthogonalmatchingpursuitcv": [2, 213, 402, 668, 1038, 1049, 1053], "orthonorm": [2, 45, 388, 951, 997], "orthotrop": 1008, "ortiz": [1046, 1052], "os": 1054, "osa": 1044, "osaid": 1044, "osborn": [1039, 1040], "oscar": [1039, 1043], "oscil": [152, 188, 219, 411, 443], "oscillatori": [215, 1015], "osei": 1050, "osendorf": [1036, 1037], "oserror": [397, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502], "osindero": [864, 1010], "osman": [1045, 1051], "osx": 366, "other": [0, 2, 25, 43, 47, 51, 52, 61, 64, 66, 67, 69, 72, 75, 79, 85, 90, 99, 101, 103, 104, 116, 123, 124, 126, 128, 138, 140, 141, 143, 144, 147, 148, 150, 151, 157, 164, 182, 183, 184, 186, 187, 188, 189, 192, 194, 202, 207, 214, 218, 232, 234, 235, 236, 238, 241, 242, 243, 245, 247, 248, 251, 252, 259, 262, 266, 267, 269, 272, 273, 274, 281, 282, 286, 289, 297, 298, 299, 311, 312, 316, 317, 319, 321, 322, 324, 328, 329, 331, 342, 346, 348, 351, 353, 354, 357, 361, 362, 366, 371, 372, 374, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 392, 393, 394, 397, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 440, 446, 447, 449, 450, 451, 452, 453, 455, 460, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 491, 500, 501, 507, 537, 538, 539, 545, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 593, 594, 595, 601, 606, 614, 615, 616, 617, 624, 631, 632, 634, 639, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 694, 696, 700, 703, 708, 722, 767, 778, 782, 789, 796, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 818, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 863, 865, 866, 868, 869, 871, 873, 874, 875, 877, 878, 880, 881, 882, 884, 885, 886, 887, 888, 889, 896, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 946, 947, 961, 993, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1025, 1026, 1027, 1028, 1029, 1031, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1049, 1050, 1051, 1052, 1053, 1055], "other_parti": 266, "other_payment_plan": 266, "other_scor": 384, "otherwis": [50, 89, 95, 137, 180, 183, 196, 216, 222, 266, 305, 346, 349, 362, 368, 381, 383, 385, 393, 402, 411, 413, 415, 419, 421, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 456, 457, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 500, 531, 537, 538, 539, 540, 542, 544, 545, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 594, 595, 601, 606, 614, 615, 618, 635, 636, 637, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 690, 694, 696, 700, 701, 702, 704, 706, 707, 711, 713, 717, 718, 728, 730, 731, 732, 733, 734, 742, 745, 756, 758, 759, 760, 770, 778, 782, 785, 786, 787, 788, 789, 791, 792, 793, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 818, 822, 823, 826, 827, 832, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 865, 866, 868, 871, 872, 873, 874, 875, 879, 880, 887, 888, 889, 890, 893, 894, 895, 897, 898, 899, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 923, 934, 935, 937, 941, 951, 952, 963, 965, 988, 990, 993, 1000, 1001, 1002, 1005, 1008, 1009, 1011, 1012, 1015, 1017, 1019, 1020, 1024, 1029, 1038, 1044, 1045, 1046, 1049, 1052], "ott": 1040, "oudshoorn": [631, 995], "ought": 366, "our": [0, 43, 44, 46, 50, 51, 52, 77, 86, 89, 102, 103, 111, 112, 116, 121, 122, 135, 136, 142, 144, 145, 147, 148, 164, 169, 171, 176, 177, 178, 184, 186, 187, 188, 189, 190, 214, 218, 232, 236, 238, 248, 265, 266, 272, 275, 278, 279, 285, 295, 309, 312, 318, 322, 324, 329, 336, 339, 345, 347, 349, 353, 354, 355, 362, 367, 378, 383, 384, 387, 391, 392, 393, 394, 402, 411, 415, 418, 419, 421, 422, 447, 453, 567, 648, 696, 712, 724, 730, 742, 760, 850, 851, 852, 854, 856, 858, 859, 860, 994, 995, 1001, 1002, 1005, 1011, 1015, 1018, 1019, 1020, 1025, 1028, 1029, 1043, 1044, 1046, 1047, 1050, 1051, 1053], "our_rand_r": 1045, "oura": [1049, 1050, 1051], "ourselv": 1029, "ouss1508": [1051, 1052], "out": [0, 2, 42, 43, 46, 48, 49, 51, 52, 54, 55, 63, 66, 75, 83, 88, 102, 103, 128, 134, 139, 141, 142, 148, 149, 162, 184, 186, 187, 189, 199, 214, 216, 218, 222, 232, 251, 257, 259, 266, 270, 272, 275, 280, 284, 285, 289, 291, 317, 318, 324, 334, 336, 338, 339, 342, 349, 353, 365, 374, 376, 377, 379, 381, 382, 383, 385, 391, 393, 399, 405, 411, 414, 416, 418, 419, 421, 427, 437, 438, 439, 445, 446, 448, 449, 450, 452, 475, 485, 486, 487, 488, 503, 519, 520, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 592, 593, 595, 608, 611, 612, 638, 643, 644, 645, 646, 655, 659, 670, 672, 677, 679, 680, 692, 693, 696, 705, 731, 745, 804, 806, 807, 808, 809, 811, 812, 813, 814, 818, 834, 843, 844, 845, 846, 847, 852, 857, 860, 864, 865, 866, 874, 878, 885, 897, 900, 901, 923, 966, 968, 973, 993, 995, 999, 1000, 1004, 1005, 1006, 1008, 1013, 1015, 1025, 1026, 1027, 1029, 1031, 1036, 1038, 1040, 1042, 1044, 1045, 1048, 1049, 1052, 1054], "out_activation_": [865, 866], "out_bounds_predict": 216, "out_fil": [920, 1021], "out_of_bound": [244, 639], "out_of_cluster_doc": 57, "outcom": [43, 141, 187, 285, 393, 399, 418, 573, 662, 713, 746, 798, 836, 903, 904, 905, 910, 913, 1001, 1005, 1021, 1028, 1040, 1044, 1046], "outdat": 382, "outer": [58, 126, 277, 333, 454, 518, 644, 654, 655, 658, 997, 1037], "outer_cv": [277, 328], "outer_numb": 333, "outermost": 346, "outli": [48, 111, 393, 472, 477, 1001, 1011], "outlier": [2, 42, 70, 79, 87, 111, 112, 147, 151, 171, 184, 193, 212, 216, 217, 218, 219, 220, 228, 240, 293, 311, 316, 319, 341, 351, 374, 393, 411, 413, 418, 433, 449, 467, 469, 472, 473, 476, 477, 478, 479, 493, 494, 496, 500, 514, 516, 526, 528, 567, 635, 643, 653, 674, 675, 676, 680, 681, 682, 683, 696, 706, 834, 854, 858, 869, 877, 878, 880, 881, 882, 884, 885, 886, 887, 888, 893, 894, 895, 896, 897, 898, 899, 911, 912, 914, 1005, 1019, 1020, 1024, 1026, 1027, 1030, 1031, 1036, 1041, 1042, 1044, 1055], "outlier_detector": [251, 433], "outlier_label": [858, 1046], "outlier_label_": 858, "outlier_mask": 217, "outlier_plot": 111, "outliermixin": [2, 1053], "outliers_": 653, "outliers_cov": 111, "outliers_fract": 241, "outliers_index": 112, "outliers_offset": 112, "outlin": [99, 143, 379, 381, 393, 394, 396, 411, 994, 1031], "outlying": 1011, "outperform": [109, 116, 150, 155, 289, 317, 391, 415, 418, 455, 465, 1007, 1015], "output": [2, 30, 31, 51, 54, 62, 64, 72, 86, 92, 124, 134, 135, 136, 138, 143, 155, 158, 171, 179, 182, 183, 184, 187, 210, 240, 248, 252, 255, 260, 265, 266, 270, 272, 275, 279, 281, 282, 286, 289, 292, 313, 316, 318, 319, 321, 324, 325, 327, 329, 354, 355, 356, 357, 359, 361, 372, 373, 374, 376, 379, 381, 385, 387, 391, 392, 393, 409, 410, 411, 412, 414, 415, 418, 419, 420, 421, 427, 432, 435, 440, 444, 445, 446, 448, 449, 450, 452, 453, 455, 462, 463, 465, 466, 467, 468, 469, 470, 471, 485, 486, 487, 488, 491, 494, 496, 497, 498, 499, 500, 501, 507, 509, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 615, 631, 632, 633, 634, 635, 636, 637, 639, 642, 643, 644, 645, 646, 650, 651, 654, 656, 657, 658, 661, 662, 664, 665, 666, 667, 670, 671, 672, 675, 677, 678, 680, 682, 683, 685, 686, 687, 688, 692, 693, 694, 696, 698, 700, 703, 704, 717, 718, 725, 727, 728, 730, 732, 739, 749, 750, 752, 754, 755, 756, 757, 758, 760, 765, 771, 776, 789, 792, 794, 795, 801, 802, 803, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 826, 829, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 851, 852, 853, 857, 858, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 896, 897, 900, 901, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 928, 929, 934, 935, 937, 940, 952, 953, 960, 961, 963, 971, 991, 994, 995, 997, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1012, 1015, 1020, 1026, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "output_dict": [717, 1044, 1048], "output_distribut": [107, 312, 316, 412, 884, 885, 896, 897, 1015], "output_fil": 490, "output_indices_": [467, 1049], "output_label": 333, "output_label_arrai": 333, "outputcodeclassifi": [2, 289, 402, 836, 837, 1043, 1048, 1052, 1053], "outputs_2d_": [850, 858, 1046], "outreach": 394, "outsid": [45, 48, 57, 143, 215, 216, 244, 255, 405, 419, 449, 639, 887, 1011, 1044], "outward": 312, "outweigh": 1040, "ouvert": [762, 763, 1003], "ova": [223, 670, 672, 680, 1019], "ovb": [186, 187], "over": [0, 2, 30, 43, 46, 47, 48, 58, 61, 63, 64, 67, 72, 83, 88, 89, 104, 105, 106, 121, 138, 141, 145, 150, 151, 164, 168, 171, 179, 182, 186, 188, 197, 208, 214, 222, 232, 241, 251, 266, 272, 273, 275, 277, 279, 280, 281, 284, 297, 305, 307, 308, 314, 324, 325, 327, 331, 353, 354, 366, 367, 368, 374, 375, 378, 379, 380, 381, 385, 392, 393, 407, 409, 411, 412, 415, 416, 417, 418, 419, 423, 449, 452, 467, 475, 513, 537, 538, 540, 541, 542, 543, 550, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 585, 586, 592, 593, 595, 598, 606, 634, 636, 637, 638, 648, 649, 650, 651, 656, 657, 662, 664, 665, 666, 667, 669, 670, 671, 672, 680, 681, 682, 689, 690, 701, 720, 722, 743, 767, 792, 797, 801, 804, 807, 808, 810, 815, 816, 818, 827, 829, 830, 831, 832, 833, 835, 864, 865, 866, 867, 883, 887, 908, 916, 918, 925, 931, 940, 946, 947, 994, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "overal": [43, 78, 135, 138, 141, 145, 155, 176, 232, 266, 269, 292, 317, 318, 354, 366, 378, 379, 385, 408, 409, 418, 450, 452, 467, 474, 475, 481, 553, 889, 1002, 1005, 1021, 1029, 1046], "overallqu": 155, "overcom": [142, 218, 366, 419], "overcomplet": 416, "overconstrain": 150, "overestim": [128, 362, 415], "overfit": [43, 64, 140, 145, 147, 150, 184, 188, 189, 190, 194, 215, 218, 241, 259, 264, 266, 267, 273, 277, 285, 286, 307, 313, 314, 316, 317, 318, 319, 342, 349, 357, 359, 360, 374, 393, 409, 410, 415, 418, 440, 491, 492, 565, 566, 571, 572, 661, 804, 807, 808, 818, 826, 830, 831, 865, 866, 868, 883, 887, 1000, 1009, 1011, 1013, 1015, 1021, 1026, 1029, 1039], "overflow": [378, 387, 391, 407, 1028, 1039, 1043, 1044, 1045, 1046, 1047, 1049], "overflowerror": 1046, "overhead": [47, 292, 367, 368, 379, 385, 388, 391, 393, 418, 444, 448, 452, 538, 703, 840, 841, 843, 844, 845, 846, 847, 848, 849, 1007, 1008, 1039, 1044, 1045, 1048], "overlai": [387, 636], "overlaid": 1012, "overlap": [2, 51, 52, 72, 88, 118, 148, 168, 237, 259, 354, 408, 411, 415, 418, 419, 591, 796, 797, 805, 806, 809, 811, 812, 813, 814, 821, 822, 824, 1002, 1015, 1042], "overli": [52, 62, 63, 203, 277, 362, 416, 1005], "overlin": [272, 408], "overparameter": 1001, "overrid": [381, 419, 449, 453, 460, 546, 552, 592, 593, 595, 597, 598, 601, 660, 668, 689, 690, 810, 827, 850, 851, 852, 854, 856, 858, 859, 860, 1036, 1044, 1046, 1050, 1052], "overridden": [381, 393, 421, 546, 552, 620, 625, 628, 698, 1044, 1045, 1052], "oversampl": [548, 1036], "oversc": 1051, "overset": [416, 1012], "overst": 187, "oversubscript": [782, 1050], "overview": [107, 184, 277, 288, 291, 380, 382, 392, 393, 500, 738, 747, 804, 820, 831, 836, 837, 838, 916, 1007, 1019, 1026, 1030, 1031], "overwhelm": 379, "overwrit": [150, 449, 500, 635, 1036, 1047, 1052, 1053], "overwrite_": 1036, "overwritten": [445, 536, 537, 538, 540, 545, 552, 611, 612, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 676, 678, 683, 685, 686, 687, 688, 690, 974, 1049], "ovo": [289, 321, 792, 836, 910, 913, 1005, 1006, 1020], "ovo_tpr": 281, "ovo_tre": 289, "ovr": [2, 66, 206, 229, 289, 291, 321, 350, 662, 663, 792, 837, 908, 910, 913, 1005, 1006, 1020, 1036, 1041, 1042, 1044, 1045, 1046, 1050, 1051], "ovr_jaccard_scor": 291, "ovr_tre": 289, "ow": 93, "owen": [653, 1045, 1046], "own": [2, 16, 52, 70, 141, 232, 248, 262, 292, 294, 333, 354, 367, 373, 382, 384, 387, 388, 397, 410, 411, 423, 427, 443, 457, 537, 561, 568, 650, 801, 802, 850, 851, 852, 854, 856, 858, 859, 860, 882, 916, 918, 940, 946, 1001, 1007, 1008, 1011, 1015, 1020, 1024, 1029, 1043, 1044, 1046, 1053], "own_telephon": 266, "owner": [248, 374, 376, 960, 961], "ownership": 381, "oyamada": 1041, "oyindamola": 1051, "oywa": 1046, "ozga": 1044, "ozsvald": 1038, "p": [0, 2, 50, 53, 61, 63, 64, 76, 94, 111, 112, 115, 119, 128, 146, 165, 169, 174, 192, 226, 231, 232, 234, 236, 245, 272, 278, 279, 305, 373, 374, 376, 377, 384, 387, 408, 409, 410, 411, 413, 414, 416, 418, 420, 421, 422, 424, 445, 447, 449, 450, 453, 458, 459, 460, 472, 474, 477, 478, 481, 502, 532, 538, 542, 544, 545, 551, 553, 554, 555, 557, 559, 560, 561, 562, 563, 565, 568, 569, 570, 594, 596, 597, 598, 599, 600, 602, 603, 604, 608, 609, 610, 611, 612, 613, 619, 620, 631, 644, 647, 692, 694, 696, 698, 703, 709, 719, 728, 745, 756, 790, 792, 806, 812, 813, 814, 817, 833, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 864, 868, 869, 884, 896, 902, 918, 919, 920, 998, 999, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1019, 1020, 1036, 1037, 1039, 1042, 1044, 1051, 1052, 1053], "p0": 63, "p1": [63, 157], "p1d": 63, "p2": [63, 157, 232], "p3": 157, "p4": 157, "p5": 952, "p592": 139, "p_": [165, 1005, 1008, 1021], "p_c": [119, 527], "p_e": 720, "p_grid": 277, "p_i": [1005, 1008], "p_k": [279, 1005], "p_n": [279, 711, 1005], "p_o": 720, "p_val": 272, "p_val_uncorrect": 272, "p_valu": [608, 609, 610], "p_w": 119, "p_w_c": [119, 527], "pa": [670, 671, 905, 1001, 1005, 1018], "pab": [1051, 1052], "pablo": [1046, 1049, 1050], "pabloduque0": 1049, "pace": 374, "pacha": 1044, "pacif": 272, "pack": [388, 1044], "packag": [0, 80, 86, 182, 248, 292, 367, 372, 373, 376, 377, 379, 380, 381, 383, 387, 388, 391, 393, 397, 398, 405, 413, 418, 419, 455, 481, 650, 651, 995, 1001, 1004, 1008, 1015, 1021, 1029, 1036, 1042, 1044, 1045, 1046], "packet": 366, "packg": 397, "pacman": 397, "paczuski": [1044, 1045], "pad": [121, 143, 182, 188, 234, 251, 353, 358, 419, 592, 593, 595], "page": [0, 51, 55, 63, 103, 104, 140, 142, 151, 152, 155, 158, 166, 169, 176, 187, 188, 189, 196, 234, 242, 243, 244, 248, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 310, 318, 322, 323, 325, 326, 328, 333, 361, 366, 374, 376, 379, 381, 383, 385, 387, 394, 411, 413, 476, 520, 521, 522, 632, 648, 838, 903, 952, 995, 1001, 1005, 1006, 1034, 1036, 1040, 1041], "page_links_en": 55, "page_links_filenam": 55, "page_links_url": 55, "pagerank": [55, 952], "pagh": [192, 997], "pai": [0, 187, 232, 266, 379], "paid": 1001, "pain": 391, "paint": [920, 922], "pair": [2, 49, 52, 72, 79, 91, 97, 126, 137, 139, 143, 147, 162, 175, 179, 195, 198, 206, 223, 226, 232, 245, 267, 272, 279, 281, 336, 338, 340, 342, 343, 344, 346, 354, 358, 374, 391, 393, 408, 409, 412, 415, 419, 421, 440, 443, 444, 448, 453, 460, 466, 474, 475, 481, 497, 512, 513, 586, 596, 599, 600, 602, 603, 604, 614, 617, 618, 619, 621, 623, 624, 626, 627, 629, 631, 636, 637, 647, 649, 696, 703, 704, 709, 710, 711, 719, 735, 744, 762, 763, 767, 770, 773, 774, 775, 776, 777, 778, 780, 782, 783, 784, 785, 786, 790, 836, 848, 849, 923, 1005, 1006, 1007, 1008, 1015, 1021, 1036, 1048, 1049, 1051, 1052, 1053], "pair_confusion_matrix": [2, 411, 1048], "pair_list": 281, "pair_scor": 281, "paired_cosine_dist": [2, 407, 1055], "paired_dist": [2, 767, 773, 782, 1040], "paired_euclidean_dist": [2, 407, 1055], "paired_manhattan_dist": 2, "pairidx": 358, "pairplot": [186, 187], "pairwis": [2, 37, 97, 186, 187, 245, 251, 281, 321, 325, 326, 353, 366, 371, 393, 407, 411, 416, 421, 449, 457, 461, 464, 465, 471, 490, 512, 513, 539, 565, 566, 624, 642, 643, 644, 645, 646, 647, 692, 694, 696, 698, 700, 703, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 792, 796, 797, 836, 852, 856, 860, 874, 906, 925, 997, 1005, 1008, 1017, 1020, 1031, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1051, 1052, 1053, 1054, 1055], "pairwise_bayesian": 272, "pairwise_bayesian_df": 272, "pairwise_comp_df": 272, "pairwise_dist": [2, 75, 329, 393, 411, 422, 447, 449, 453, 460, 692, 700, 766, 775, 783, 784, 796, 797, 852, 854, 856, 860, 1003, 1036, 1040, 1042, 1044, 1045, 1047, 1048, 1053, 1054, 1055], "pairwise_dist_chunk_s": [471, 906], "pairwise_distance_funct": [696, 700, 782, 785, 1008], "pairwise_distances_argmin": [2, 97, 325, 784, 1044, 1050, 1051, 1052, 1053], "pairwise_distances_argmin_min": [2, 325, 783, 1039, 1044, 1050, 1051, 1052, 1053], "pairwise_distances_chunk": [2, 366, 782, 1044, 1047, 1053], "pairwise_indices_": 836, "pairwise_kernel": [2, 393, 421, 455, 465, 647, 769, 874, 1003, 1036, 1043, 1053], "pairwise_kernel_funct": [624, 647, 778], "pairwise_kernels_kwarg": 624, "pairwise_t_test": 272, "pairwisedistancesreduct": 367, "pairwisekernel": [2, 421], "paislei": [416, 540], "pakdd": 411, "pal": [1044, 1050], "palacio": 1049, "palafox": 1036, "palett": [187, 272], "palevioletr": [228, 298, 341], "palioura": [843, 1007], "paliw": 1044, "palladium": 1029, "palmol": 51, "pami": [376, 411, 729], "pamnani": 1044, "pan": 399, "panchal": 1048, "pancholi": 1043, "panda": [2, 43, 51, 62, 102, 103, 104, 135, 141, 142, 144, 147, 150, 152, 168, 176, 182, 186, 187, 188, 189, 190, 194, 199, 203, 214, 218, 222, 232, 251, 252, 255, 262, 266, 270, 272, 273, 275, 283, 284, 286, 289, 317, 318, 319, 321, 324, 325, 349, 353, 354, 373, 374, 377, 378, 379, 381, 382, 387, 393, 397, 404, 412, 435, 445, 446, 448, 450, 452, 467, 469, 471, 485, 486, 487, 488, 492, 493, 494, 496, 500, 504, 505, 506, 508, 509, 514, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 565, 566, 570, 571, 572, 573, 574, 585, 586, 587, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 636, 637, 639, 642, 643, 644, 645, 646, 692, 693, 696, 804, 807, 808, 818, 834, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 906, 930, 994, 995, 1015, 1024, 1025, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "pandata": [1051, 1052], "pandei": [1043, 1048], "panel": [263, 297, 312, 417, 1024], "panga": [1051, 1052], "panico": [1044, 1048], "pankaj": 1048, "pano": 1042, "panpiort8": [1046, 1048], "paolo": [0, 401, 1036, 1040, 1046, 1054], "papadopoulo": [1049, 1050, 1051, 1052, 1053], "papapanagiot": 1043, "paper": [0, 169, 192, 266, 272, 376, 385, 391, 411, 413, 418, 445, 452, 481, 508, 538, 545, 567, 645, 662, 670, 671, 675, 680, 683, 696, 792, 845, 854, 857, 900, 901, 1001, 1005, 1008, 1011, 1020, 1036, 1043, 1044], "paper355": 675, "papier": [668, 689, 690], "par": 1015, "paraboloid": 1001, "paradi": 1051, "paradigm": 1001, "paragraph": [419, 507], "paralel": 1052, "parallel": [2, 53, 139, 141, 143, 188, 216, 273, 322, 323, 325, 347, 361, 365, 371, 377, 379, 380, 382, 383, 391, 393, 412, 422, 423, 440, 447, 449, 451, 452, 453, 455, 460, 461, 464, 467, 470, 475, 535, 537, 538, 539, 541, 543, 545, 546, 547, 549, 550, 552, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 593, 598, 606, 611, 612, 614, 636, 638, 643, 662, 692, 693, 694, 695, 696, 697, 698, 785, 804, 807, 808, 810, 815, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 867, 870, 903, 904, 971, 974, 1025, 1031, 1036, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1055], "parallel_backend": [2, 367, 422, 440, 447, 449, 451, 453, 455, 460, 461, 464, 467, 470, 475, 535, 539, 540, 541, 543, 546, 547, 549, 550, 552, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 598, 606, 611, 612, 614, 636, 638, 643, 651, 655, 657, 659, 661, 662, 663, 665, 667, 669, 670, 672, 680, 683, 692, 693, 694, 695, 696, 697, 698, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 854, 856, 858, 859, 861, 862, 867, 870, 903, 904, 1044, 1054], "parallel_batch_queri": 292, "parallel_coordin": 273, "parallel_help": 1046, "parallelbackendbas": 974, "parallelis": [273, 471, 906, 1043], "param": [79, 88, 94, 95, 103, 145, 146, 148, 149, 234, 247, 248, 270, 272, 280, 284, 296, 308, 328, 375, 379, 381, 393, 402, 418, 421, 425, 428, 434, 435, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 816, 818, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 960, 961, 964, 993, 994, 1042, 1046, 1047, 1049, 1050, 1053, 1054, 1055], "param1": 381, "param2": 381, "param3": 381, "param_": 141, "param_c": [283, 804], "param_classifier__c": 103, "param_covariance_typ": 262, "param_degre": 804, "param_dist": [280, 284, 323], "param_distribut": [103, 171, 273, 280, 284, 323, 392, 808, 816, 818, 1052], "param_gamma": [283, 804, 818], "param_grid": [43, 45, 103, 104, 105, 106, 141, 147, 247, 253, 262, 266, 270, 271, 272, 276, 277, 280, 283, 289, 294, 314, 328, 342, 393, 402, 412, 418, 746, 804, 807, 815, 816, 994, 1005], "param_kernel": [804, 818], "param_list": 816, "param_min_samples_split": 276, "param_n_compon": 262, "param_nam": [141, 273, 285, 327, 349, 402, 827, 835, 1000], "param_pca__n_compon": 105, "param_preprocessor__cat__selector__percentil": 103, "param_preprocessor__num__imputer__strategi": 103, "param_rang": [285, 327, 349, 827, 835, 1000, 1052], "param_reduce_dim__n_compon": 271, "param_valu": 46, "paramet": [2, 25, 27, 43, 44, 48, 49, 50, 53, 54, 64, 70, 79, 87, 88, 91, 93, 94, 95, 103, 104, 105, 110, 112, 113, 119, 121, 133, 135, 139, 141, 143, 144, 145, 148, 149, 150, 160, 166, 169, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 187, 188, 194, 195, 196, 197, 199, 201, 202, 203, 205, 214, 216, 218, 219, 222, 231, 232, 238, 239, 241, 243, 246, 247, 248, 257, 258, 259, 260, 262, 263, 265, 266, 271, 272, 273, 274, 276, 277, 280, 283, 284, 289, 292, 294, 295, 298, 299, 305, 307, 308, 310, 312, 313, 314, 316, 317, 321, 322, 324, 325, 326, 327, 335, 337, 339, 344, 346, 347, 348, 350, 351, 353, 354, 355, 357, 358, 359, 360, 362, 366, 367, 368, 371, 372, 374, 382, 384, 386, 387, 388, 391, 402, 406, 409, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1021, 1024, 1025, 1026, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "parameter": [357, 421, 618, 619, 626, 627, 801, 802, 1001, 1002, 1010, 1015, 1021], "parameter_grid": 273, "parameter_nam": [571, 572, 573, 574], "parametergrid": [2, 804, 1038, 1044], "parameters_str": 88, "parametersampl": [2, 818, 1038, 1044, 1048], "parametr": [2, 48, 61, 62, 113, 244, 296, 316, 324, 409, 412, 417, 418, 440, 555, 557, 639, 689, 700, 884, 896, 946, 947, 1001, 1004, 1007, 1008, 1015, 1018, 1021, 1044, 1046, 1049], "parametrize_with_check": [2, 321, 381, 927, 946, 1046, 1047, 1055], "params_str": 284, "parcel": [87, 100, 411], "parch": [189, 326], "pardeep": 1048, "parel": 1040, "parent": [47, 186, 248, 361, 379, 383, 393, 411, 445, 466, 961, 962, 1036, 1053], "parent_hourly_wag": 186, "parenthes": 942, "parenthesi": [76, 379], "paresh": [1045, 1046], "pareto": 216, "pargent": 1015, "pari": [0, 376, 412, 469, 768, 876, 1016, 1050], "pariet": [1029, 1036], "parikh": [1045, 1050, 1051, 1052, 1053, 1054], "parimi": 1054, "paris_in_radian": 768, "paristech": 0, "pariti": 1021, "parizi": 1051, "park": [1041, 1046, 1048, 1051, 1052], "parmet": 1053, "parmind": 1043, "parquet": 52, "parra": 1044, "parri": [1041, 1042, 1043], "parrot": 353, "pars": [47, 55, 366, 373, 374, 380, 512], "parse_vers": [148, 190, 321, 674], "parser": [47, 150, 266, 286, 321, 325, 500, 1051, 1052], "parsifalxu": 1054, "parsimoni": [416, 1015], "parsing_tim": 47, "parson": [1047, 1049], "part": [0, 44, 45, 67, 71, 84, 94, 103, 113, 121, 124, 138, 141, 143, 147, 153, 160, 161, 162, 166, 176, 184, 194, 248, 250, 260, 266, 267, 269, 287, 307, 314, 317, 319, 355, 368, 374, 376, 379, 381, 385, 387, 392, 393, 397, 399, 407, 409, 410, 411, 415, 416, 418, 419, 421, 449, 452, 497, 498, 499, 525, 535, 541, 546, 578, 588, 589, 590, 617, 629, 797, 873, 891, 893, 894, 895, 896, 897, 898, 899, 994, 995, 997, 1002, 1006, 1023, 1024, 1025, 1026, 1027, 1029, 1031, 1036, 1044, 1045, 1047, 1049, 1051, 1055], "part3": 415, "part_of_speech": 419, "partev": [1050, 1051, 1052, 1053], "parthiv": 1048, "parti": [232, 289, 327, 367, 378, 381, 391, 405, 806, 813, 1036, 1047, 1052, 1053, 1055], "partial": [2, 43, 47, 51, 83, 114, 115, 152, 184, 185, 232, 240, 323, 326, 376, 379, 393, 396, 413, 414, 416, 418, 421, 467, 485, 486, 487, 488, 500, 505, 538, 540, 545, 566, 593, 636, 637, 661, 792, 834, 836, 837, 864, 865, 866, 869, 881, 882, 885, 888, 917, 1002, 1009, 1019, 1026, 1031, 1033, 1037, 1044, 1045, 1049, 1053], "partial_correl": 51, "partial_depend": [2, 188, 636, 1012, 1037, 1045, 1046, 1047, 1048, 1051, 1052], "partial_fit": [47, 83, 121, 325, 368, 381, 393, 411, 416, 445, 452, 538, 540, 541, 542, 593, 601, 662, 663, 670, 671, 672, 680, 681, 682, 836, 837, 840, 841, 843, 844, 845, 846, 847, 864, 865, 866, 877, 878, 888, 908, 993, 1001, 1007, 1009, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1051, 1052, 1053], "partial_fit_": 1049, "partial_fit_classifi": 47, "partial_fit_param": [601, 836, 837, 840, 841], "partialdependencedisplai": [2, 150, 152, 188, 252, 322, 323, 324, 326, 328, 386, 637, 1012, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "particip": [378, 379, 394, 1029], "particl": 1010, "particular": [0, 43, 50, 53, 64, 72, 74, 75, 93, 103, 109, 119, 126, 129, 144, 147, 150, 151, 175, 182, 187, 188, 214, 216, 222, 246, 266, 269, 273, 275, 281, 292, 301, 305, 312, 321, 322, 325, 354, 355, 362, 366, 367, 373, 374, 377, 378, 379, 381, 383, 384, 385, 387, 388, 392, 393, 397, 411, 412, 415, 416, 418, 419, 420, 421, 449, 472, 476, 500, 548, 567, 613, 657, 662, 667, 676, 678, 688, 691, 716, 732, 789, 840, 933, 935, 995, 997, 999, 1001, 1005, 1008, 1009, 1010, 1011, 1013, 1015, 1025, 1029, 1036, 1039, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1053], "particularli": [58, 67, 102, 103, 106, 130, 153, 187, 215, 243, 272, 286, 314, 322, 329, 351, 362, 366, 379, 381, 388, 393, 411, 412, 414, 417, 419, 500, 810, 827, 845, 952, 973, 1001, 1002, 1005, 1007, 1013, 1025, 1029, 1036, 1041, 1043, 1044, 1050], "partit": [80, 99, 102, 151, 153, 272, 309, 393, 408, 409, 411, 415, 418, 452, 454, 456, 465, 515, 561, 562, 563, 564, 567, 568, 569, 708, 709, 719, 790, 856, 916, 917, 918, 919, 1004, 1008, 1011, 1015, 1021], "partli": [80, 405, 773], "partnership": 1029, "parvu": 376, "pasbi": [1043, 1044], "pascal": 1005, "pascual": 1039, "paskov": 1043, "pass": [2, 43, 46, 47, 58, 59, 70, 73, 141, 150, 152, 166, 196, 199, 215, 242, 244, 245, 248, 251, 252, 254, 262, 266, 270, 273, 319, 321, 324, 329, 347, 355, 362, 366, 367, 368, 374, 379, 380, 381, 384, 385, 386, 387, 388, 391, 393, 402, 405, 407, 410, 411, 412, 415, 416, 418, 419, 421, 422, 423, 428, 429, 433, 434, 440, 441, 443, 445, 446, 447, 449, 450, 451, 452, 453, 455, 457, 460, 462, 463, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 491, 494, 496, 499, 500, 501, 507, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 585, 586, 592, 593, 594, 595, 597, 598, 601, 606, 611, 612, 614, 615, 621, 624, 630, 635, 636, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 715, 736, 737, 746, 767, 778, 782, 783, 784, 785, 792, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 879, 880, 881, 882, 883, 885, 887, 888, 889, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 927, 928, 933, 934, 935, 942, 946, 947, 951, 952, 954, 956, 959, 961, 964, 965, 974, 975, 978, 988, 993, 994, 995, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1012, 1015, 1018, 1019, 1020, 1025, 1029, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "passiv": [2, 47, 221, 670, 671, 1027, 1031, 1037], "passiveaggress": [368, 419], "passiveaggressiveclassifi": [2, 47, 221, 366, 368, 1001, 1006, 1037, 1040, 1041, 1043, 1044, 1047, 1049, 1054], "passiveaggressiveregressor": [2, 368, 1001, 1037, 1040, 1043, 1044, 1047, 1049, 1054], "passo": [0, 401, 1036, 1037], "passthrough": [43, 104, 144, 187, 188, 214, 232, 251, 318, 326, 412, 467, 470, 571, 572, 867, 868, 1015, 1045, 1047, 1050, 1051, 1053], "passthrough_numer": [214, 232], "passthroughpassthrough": [188, 318], "past": [50, 52, 383, 384, 387, 391, 394, 415, 416, 418, 542, 559, 560, 682, 1029, 1052], "pat": [632, 995], "patch": [2, 70, 83, 251, 257, 258, 259, 262, 263, 267, 374, 391, 416, 418, 559, 560, 587, 588, 591, 1036, 1044], "patch_height": [587, 588, 591], "patch_siz": [83, 124, 419, 587, 588, 591], "patch_width": [587, 588, 591], "patchextractor": [2, 419, 1052], "patel": [1044, 1046, 1047, 1048, 1050], "path": [2, 47, 55, 184, 193, 199, 200, 203, 205, 208, 218, 230, 285, 349, 357, 373, 377, 379, 383, 387, 388, 393, 405, 444, 448, 453, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 512, 513, 552, 561, 562, 567, 568, 569, 570, 597, 598, 601, 650, 651, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 685, 686, 687, 688, 689, 690, 692, 868, 869, 915, 916, 917, 918, 919, 958, 994, 1001, 1002, 1011, 1025, 1026, 1036, 1037, 1040, 1042, 1043, 1045, 1046, 1048, 1049, 1051, 1052], "path_length": 958, "path_method": [692, 1002], "pathak": [1051, 1052], "patheffect": 75, "pathlib": [47, 1051, 1052], "pathlik": [500, 1052], "patholog": [85, 1004, 1042], "pathwai": 380, "pati": 1038, "patienc": [387, 393], "patient": [46, 158, 169, 183, 376, 387, 410, 415, 1001], "patil": [1050, 1053], "paton": 1049, "patric": [1048, 1049], "patricio": 1050, "patrick": [1043, 1044, 1049, 1050, 1053, 1054], "patrini": [1041, 1042, 1043], "pattaniyil": 1046, "pattern": [43, 52, 58, 96, 113, 115, 118, 120, 128, 171, 182, 184, 188, 199, 218, 248, 251, 324, 346, 353, 354, 355, 362, 376, 379, 381, 394, 408, 411, 412, 416, 418, 419, 451, 467, 469, 508, 536, 538, 545, 559, 560, 642, 712, 729, 745, 773, 792, 793, 801, 888, 997, 999, 1001, 1005, 1006, 1012, 1020, 1022, 1025, 1026, 1029, 1048], "patterson": [498, 1041], "paul": [374, 1039, 1042, 1043, 1044, 1045, 1049, 1050], "paula": [1046, 1047, 1054], "pauli": 1041, "paulo": [1043, 1049, 1051], "paus": 80, "pava": 639, "pavel": [1037, 1045], "pavlo": [1044, 1045], "pavlyk": [1044, 1045, 1046, 1047], "pawel": 1045, "pawe\u0142": [1039, 1043, 1048, 1049], "payn": 1046, "pazzani": 64, "pb_q": [324, 1001], "pbl": 147, "pc": [57, 335, 355, 374], "pca": [2, 11, 42, 45, 68, 69, 84, 101, 102, 104, 106, 107, 116, 120, 123, 130, 131, 161, 184, 211, 235, 237, 244, 246, 249, 253, 271, 280, 283, 292, 296, 301, 310, 324, 362, 371, 381, 393, 407, 411, 412, 417, 427, 476, 479, 487, 500, 506, 508, 518, 536, 537, 538, 539, 543, 544, 547, 548, 553, 647, 662, 692, 694, 696, 700, 804, 830, 834, 857, 864, 867, 868, 870, 878, 886, 888, 997, 999, 1002, 1008, 1015, 1019, 1021, 1026, 1030, 1031, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1047, 1049, 1050, 1051, 1053, 1054], "pca0": 427, "pca1": [412, 427], "pca2": [412, 427], "pca_2": 116, "pca__n_compon": 105, "pca_back_proj_ax": 126, "pca_estim": 121, "pca_proj_ax": 126, "pca_scor": 128, "pcapca": [104, 253], "pcd": [864, 1010], "pchelintsev": 1048, "pclass": [103, 189, 255, 321, 325, 326], "pcolor": 172, "pcolormesh": [70, 153, 162, 198, 295, 300, 338, 342, 346, 635], "pcr": [116, 414], "pd": [43, 51, 62, 103, 104, 135, 141, 142, 147, 152, 168, 182, 186, 187, 188, 189, 190, 194, 199, 203, 214, 218, 222, 232, 252, 255, 262, 270, 272, 273, 275, 283, 284, 286, 289, 317, 318, 319, 324, 325, 349, 353, 354, 384, 393, 412, 467, 469, 631, 632, 633, 634, 636, 782, 932, 934, 935, 994, 995, 1012, 1015, 1047, 1049, 1050, 1051, 1053], "pd2000": 1005, "pd_": 1012, "pd_line_kw": 636, "pd_result": 636, "pdb": 387, "pdbcl": 387, "pdf": [169, 272, 297, 312, 376, 379, 411, 420, 445, 452, 535, 538, 541, 545, 645, 648, 653, 662, 668, 670, 671, 675, 680, 683, 686, 687, 689, 690, 696, 845, 857, 864, 901, 903, 1001, 1018, 1021, 1028, 1032, 1036], "pdist": [696, 782, 785], "pdp": [2, 636, 1012, 1050], "pdp_lim": 636, "pdp_line_kw": 636, "pe": 587, "pe_tran": 587, "peai": 1045, "peak": [43, 52, 64, 188, 409, 415, 1050], "pear": 1006, "pearson": [2, 610, 613, 1049], "pearu": 1036, "pedersen": [1040, 1052], "pedigo": [1048, 1049], "pedregosa": [0, 401, 1036, 1037, 1038, 1039, 1040, 1042], "pedro": [1037, 1039, 1040, 1044], "peek": [188, 379, 1012], "peer": 1029, "peev": [1044, 1047], "pegaso": 1019, "pei": [411, 1043], "peixinho": 1050, "pelennor": 1050, "penal": [2, 53, 66, 113, 155, 199, 203, 207, 214, 218, 230, 232, 285, 317, 349, 411, 413, 416, 418, 420, 472, 473, 474, 475, 476, 477, 478, 479, 481, 565, 566, 651, 656, 657, 665, 667, 680, 709, 719, 738, 790, 799, 881, 908, 909, 915, 1001, 1005, 1007, 1009, 1019, 1020], "penalis": [212, 229, 700], "penalti": [2, 25, 46, 49, 66, 113, 184, 193, 194, 199, 202, 203, 207, 214, 218, 221, 229, 230, 243, 280, 285, 307, 324, 335, 347, 353, 366, 387, 391, 413, 416, 420, 474, 475, 476, 477, 478, 479, 481, 506, 535, 541, 542, 543, 544, 546, 547, 551, 552, 601, 647, 650, 651, 652, 653, 656, 657, 658, 661, 662, 663, 664, 665, 666, 672, 673, 674, 676, 680, 682, 684, 685, 691, 818, 888, 908, 909, 911, 913, 914, 915, 994, 1001, 1004, 1009, 1015, 1019, 1020, 1026, 1038, 1041, 1043, 1045, 1046, 1048, 1049, 1051, 1052], "peng": [683, 1001, 1042, 1043, 1044, 1046, 1048], "peopl": [2, 45, 102, 187, 250, 275, 353, 354, 367, 368, 374, 376, 378, 379, 383, 394, 417, 497, 498, 645, 845, 1024], "pep": [51, 387, 1036], "pep073": 380, "pep257": 393, "pep440": 383, "pep8": [381, 383, 387], "pepsi": 51, "per": [43, 49, 58, 70, 86, 97, 140, 141, 144, 176, 178, 187, 188, 214, 229, 232, 251, 255, 258, 266, 268, 279, 281, 312, 318, 323, 328, 329, 349, 353, 355, 366, 374, 375, 379, 384, 385, 388, 391, 393, 409, 411, 415, 416, 417, 418, 419, 421, 449, 451, 453, 460, 464, 467, 471, 490, 500, 504, 506, 507, 508, 512, 514, 516, 519, 527, 536, 538, 539, 540, 543, 545, 547, 553, 554, 565, 566, 573, 587, 592, 595, 614, 615, 636, 637, 645, 646, 662, 663, 670, 671, 672, 675, 677, 678, 679, 680, 682, 696, 700, 717, 720, 724, 726, 745, 758, 762, 763, 785, 787, 801, 802, 829, 836, 837, 838, 840, 841, 844, 846, 864, 867, 873, 875, 877, 878, 881, 882, 888, 889, 906, 908, 909, 910, 911, 912, 913, 914, 939, 940, 952, 979, 994, 997, 1001, 1004, 1005, 1006, 1009, 1012, 1019, 1020, 1021, 1025, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1052, 1053], "perc": 267, "percal": 385, "percent": [135, 496, 604, 1018], "percent10": [251, 496], "percentag": [2, 52, 87, 129, 144, 205, 232, 267, 275, 278, 415, 420, 538, 545, 548, 553, 597, 598, 652, 673, 684, 707, 738, 750, 822, 823, 824, 838, 920, 922, 1006, 1021, 1038, 1042, 1048, 1049], "percentil": [2, 49, 52, 103, 147, 150, 251, 255, 312, 366, 596, 599, 600, 602, 603, 604, 607, 610, 636, 637, 752, 1015, 1041, 1049], "percentile_5_predict": 52, "percentile_95_predict": 52, "percentile_perf_in_u": 49, "percentiles_class": 267, "percept": [164, 188, 1012], "perceptron": [2, 47, 67, 143, 153, 162, 173, 175, 184, 221, 224, 230, 252, 306, 314, 315, 336, 347, 368, 391, 419, 518, 519, 526, 670, 680, 834, 864, 865, 866, 869, 888, 1003, 1006, 1010, 1019, 1026, 1027, 1031, 1040, 1042, 1043, 1044, 1048], "percol": 74, "perdisci": [411, 445], "perdok": 1051, "pere": 1053, "peredachi": [611, 612], "pereira": [1041, 1044, 1045, 1055], "peretti": 1051, "perez": [1044, 1051], "perf_count": 251, "perfect": [58, 63, 72, 102, 112, 124, 126, 210, 214, 353, 354, 379, 411, 415, 557, 558, 694, 698, 708, 709, 712, 721, 730, 732, 735, 741, 747, 760, 761, 789, 790, 799, 1001, 1005, 1008, 1020, 1029, 1050], "perfectli": [63, 64, 72, 275, 287, 346, 396, 411, 418, 441, 571, 610, 708, 709, 719, 721, 740, 741, 761, 790, 799, 881, 1000, 1002, 1005, 1020, 1049, 1050], "perform": [2, 25, 27, 29, 30, 41, 43, 46, 52, 57, 61, 62, 63, 68, 71, 73, 75, 82, 86, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 106, 109, 116, 124, 130, 133, 135, 141, 144, 145, 146, 148, 149, 150, 154, 155, 160, 164, 167, 168, 169, 172, 180, 182, 183, 184, 187, 188, 189, 190, 192, 199, 203, 214, 216, 218, 220, 221, 222, 231, 232, 235, 236, 238, 241, 246, 249, 251, 258, 259, 262, 264, 266, 267, 268, 269, 270, 272, 273, 274, 277, 278, 280, 281, 283, 285, 286, 289, 291, 292, 305, 310, 312, 314, 316, 318, 319, 321, 327, 328, 330, 332, 333, 342, 345, 346, 349, 353, 355, 362, 365, 367, 368, 374, 376, 381, 382, 383, 385, 387, 388, 391, 392, 393, 396, 402, 405, 406, 407, 408, 409, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 429, 433, 443, 445, 446, 447, 449, 450, 451, 453, 455, 457, 458, 462, 464, 471, 472, 485, 486, 487, 488, 498, 506, 516, 519, 535, 536, 537, 539, 541, 546, 547, 548, 549, 550, 552, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 585, 586, 587, 592, 593, 594, 595, 598, 605, 606, 607, 614, 615, 631, 634, 635, 642, 644, 649, 655, 658, 659, 660, 662, 668, 669, 670, 671, 672, 674, 677, 679, 680, 681, 682, 686, 687, 689, 691, 693, 694, 697, 698, 701, 707, 708, 709, 711, 712, 716, 717, 730, 733, 734, 742, 744, 746, 759, 760, 761, 782, 787, 788, 790, 791, 792, 798, 799, 800, 801, 802, 804, 807, 808, 815, 816, 818, 822, 829, 830, 831, 833, 834, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 855, 857, 863, 864, 865, 866, 868, 869, 871, 874, 875, 877, 878, 880, 881, 882, 884, 885, 888, 889, 891, 893, 894, 895, 897, 898, 899, 903, 904, 906, 910, 911, 912, 913, 914, 916, 917, 918, 919, 934, 935, 977, 988, 993, 994, 995, 997, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "performancetip": 385, "perhap": [102, 143, 376, 378, 387, 393, 417, 1025], "perimet": [169, 376], "period": [2, 52, 150, 171, 176, 180, 383, 393, 394, 409, 421, 619, 825, 887, 1044, 1049, 1051], "periodic_spline_transform": 43, "periodicity_bound": [171, 176, 180, 619], "peripheri": 411, "perla": 1039, "perm_scores_iri": 278, "perm_scores_rand": 278, "perm_sorted_idx": 190, "permalink": 383, "perman": 387, "permiss": [378, 383, 394, 397, 398, 1029, 1051], "permit": [412, 470, 592, 593, 595, 804, 807, 808, 818, 830, 869, 870, 1005, 1006, 1007, 1042], "permut": [2, 58, 59, 72, 112, 148, 162, 164, 184, 185, 230, 264, 272, 319, 334, 396, 406, 411, 418, 420, 467, 500, 504, 508, 563, 564, 568, 569, 631, 634, 638, 683, 708, 709, 721, 740, 741, 759, 761, 799, 821, 823, 833, 834, 868, 882, 913, 916, 917, 952, 973, 975, 978, 1005, 1019, 1026, 1031, 1036, 1042, 1049, 1051], "permutation_import": [2, 142, 148, 189, 190, 321, 418, 557, 558, 561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919, 1013, 1046, 1048, 1049, 1053], "permutation_scor": 833, "permutation_test_scor": [2, 278, 402, 415, 1036, 1043, 1048, 1055], "permuted_categori": 319, "perp_tol": 540, "perpendicular": [70, 347], "perperogl": 1015, "perplex": [184, 233, 234, 236, 238, 292, 518, 529, 540, 696, 1002, 1026, 1041, 1043, 1050], "perri": 1046, "perrin": 1042, "perrot": [0, 1036], "persian": 1024, "persist": [387, 391, 416, 449, 614, 615, 864, 1010, 1024, 1031, 1042, 1045], "persola": 1044, "person": [45, 187, 266, 275, 374, 378, 415, 419, 497, 498, 499, 1015, 1044], "personal_statu": 266, "perspect": [88, 93, 214, 286, 366, 374, 391, 394, 534, 647, 908, 998], "pertin": 214, "perturb": [187, 231, 310, 416, 418, 1004], "peru": [50, 305, 374, 502], "pervas": [362, 379], "pessimist": [146, 418], "pessoa": 1049, "pestrickland": 1042, "pet": [324, 328, 792, 1005], "pet_cat": 324, "pet_dog": 324, "pet_fish": 324, "petal": [118, 129, 131, 143, 255, 323, 326, 376, 412, 921, 1021], "petal_col": 326, "petar": 1051, "pete": [1043, 1047, 1048], "peter": [0, 96, 401, 411, 451, 453, 460, 653, 796, 797, 1001, 1005, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1051, 1052, 1053], "peterlongo": 1053, "peterson": [1036, 1038], "petfood": 1029, "petrov": [1043, 1044, 1052], "petrushev": 1045, "pe\u00f1a": 1040, "pfaffel": 1049, "pfahring": [839, 1006], "pfe": 51, "pfister": 1015, "pfizer": 51, "pft": 215, "pg": [51, 385, 653, 1001, 1041], "pg_i": 653, "pgithub": 1048, "ph": 1048, "pham": [192, 997, 1043], "phan": 416, "pharmaceut": 376, "phase": [43, 199, 208, 366, 631, 997, 1002, 1008, 1029, 1044, 1046], "phase_nois": 75, "phd": [0, 411, 418, 1025, 1029], "phenol": 376, "phenomena": 176, "phenomenon": [354, 1015], "phi": [75, 416, 418, 747, 874, 997, 1005, 1015, 1020], "phi_coeffici": 1005, "phil": [1041, 1052], "philipp": [1038, 1039, 1042, 1051], "phillip": [2, 50, 305, 374, 502], "phlypo": 1039, "phongpanagnam": 1049, "phongpanangam": 1049, "photogrammetr": 1001, "php": 1005, "phrase": 419, "phy": [611, 612], "phyo": 1050, "physic": [2, 102, 141, 367, 509, 969, 1001, 1052], "physician": 410, "physiolog": [275, 376], "pi": [43, 53, 70, 74, 75, 122, 130, 152, 154, 164, 171, 195, 199, 201, 208, 215, 236, 257, 258, 259, 262, 263, 287, 305, 322, 328, 360, 397, 417, 421, 520, 521, 522, 619, 646, 999, 1000, 1001, 1007], "pianomania": 1041, "pick": [88, 93, 190, 249, 280, 325, 331, 374, 379, 383, 411, 418, 446, 463, 527, 677, 918, 919, 994, 1001, 1002, 1004, 1019, 1047], "pickl": [383, 393, 419, 593, 848, 849, 1024, 1025, 1031, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "pickleabl": [872, 1042], "pickup": 1044, "pico": [1039, 1040], "pict": [838, 1006], "pictur": [51, 55, 59, 71, 86, 99, 124, 184, 245, 263, 374, 394, 411, 416, 419, 465, 497, 498, 525, 1025, 1026], "piec": [70, 81, 215, 367, 1004], "piecewis": [130, 324, 408, 996, 1001, 1015, 1021], "pierr": [1036, 1044, 1045, 1047, 1049, 1051, 1053, 1054], "pierreablin": 1044, "pierreattard": [1049, 1050], "pierretallott": [1044, 1045, 1046], "pierron": 1039, "piet": [1050, 1051], "pieter": [55, 1042, 1043, 1050], "pietro": [1036, 1039, 1053], "pietruh": 1044, "pig": 787, "pillow": [379, 397, 404], "pim": 1045, "pin": [385, 405], "pinaki": 1044, "pinbal": [2, 52, 147, 150, 324, 418, 566, 674, 727, 752, 1001, 1049, 1050], "pinball_loss_05": 52, "pinball_loss_50": 52, "pinball_loss_95": 52, "ping": [901, 1017, 1042, 1043], "pink": 195, "pinki": 1050, "pinot": 318, "pinto": 1036, "pintor": 1047, "pinvh": [1043, 1045], "piontek": 1052, "piotr": [1044, 1045, 1054], "pip": [292, 321, 322, 323, 324, 325, 326, 327, 328, 329, 367, 377, 379, 383, 385, 387, 397, 405, 407, 1021], "pip3": [377, 397], "pipe": [104, 105, 144, 167, 248, 253, 271, 318, 323, 324, 392, 402, 412, 419, 594, 868, 893, 894, 896, 897, 898, 899, 994, 1015], "pipe_sgd": 228, "pipegraph": 391, "pipelin": [2, 7, 43, 67, 87, 91, 103, 106, 107, 116, 140, 141, 144, 161, 163, 165, 167, 168, 169, 182, 183, 188, 189, 192, 194, 201, 203, 214, 215, 220, 228, 232, 235, 240, 241, 242, 244, 246, 251, 252, 255, 264, 266, 269, 271, 272, 279, 280, 283, 286, 287, 292, 294, 295, 300, 301, 307, 310, 314, 317, 319, 321, 322, 323, 324, 325, 326, 327, 335, 353, 354, 362, 366, 371, 373, 374, 379, 382, 393, 402, 405, 415, 419, 421, 425, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 491, 506, 519, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 609, 611, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 701, 702, 704, 705, 706, 717, 801, 802, 803, 804, 805, 806, 807, 808, 811, 813, 818, 822, 826, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 995, 997, 1001, 1008, 1009, 1014, 1015, 1019, 1020, 1024, 1025, 1026, 1027, 1029, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1053], "pipelineifittedpipelin": [103, 140, 166, 187, 189, 242, 252, 255, 279, 325], "pipelineinot": [155, 243, 253, 273, 286, 318, 322], "pipelinepipelin": [103, 104, 253, 266], "pita": 1053, "pitfal": [169, 184, 185, 186, 189, 210, 218, 219, 272, 323, 392, 393, 396, 415, 468, 470, 500, 657, 676, 677, 705, 757, 819, 831, 834, 869, 881, 888, 1001, 1026, 1031], "pitkin": [188, 1012], "pitt": 57, "pitter": 1051, "pivot": [80, 283, 284], "pivot_t": 283, "pixel": [2, 44, 45, 53, 58, 68, 81, 86, 121, 167, 192, 245, 270, 309, 310, 376, 411, 416, 419, 420, 497, 498, 499, 589, 590, 611, 612, 1008, 1010, 1021], "pixelwis": 121, "pixi": 405, "piyg": 314, "pkdd": 0, "pkg": 377, "pkgsrc": 397, "pkl": 405, "pl": [2, 52, 105, 116, 176, 328, 376, 414, 485, 486, 487, 488, 1041], "place": [2, 43, 93, 242, 252, 296, 366, 379, 380, 381, 384, 386, 394, 409, 419, 421, 444, 445, 448, 449, 485, 486, 487, 519, 585, 594, 632, 634, 635, 772, 785, 801, 891, 893, 894, 895, 896, 897, 898, 899, 983, 984, 1024, 1036, 1043, 1046, 1047, 1049, 1053, 1054, 1055], "placehold": [57, 383, 631, 632, 633, 634, 819, 820, 823, 824, 993, 995], "plagre": 1043, "plai": [122, 148, 173, 198, 223, 265, 303, 338, 339, 366], "plain": [344, 421, 661, 1019], "plan": [51, 373, 377, 379, 380, 394, 405, 1015, 1039], "planar": 411, "plane": [51, 169, 226, 246, 298, 344, 346, 347, 351, 376, 455, 465, 999, 1001, 1020], "plant": [278, 281, 282, 372, 1005, 1031], "plasma": 312, "plasma_r": 312, "plateau": [141, 145, 168, 266, 270, 274], "platform": [382, 393, 394, 1024, 1028, 1029, 1041, 1044, 1045, 1047, 1049, 1050, 1053, 1054], "platt": [409, 440, 910, 911, 913, 914, 1020], "platypu": 353, "pldtc325": 1043, "pleas": [0, 2, 51, 55, 63, 103, 104, 140, 142, 148, 151, 152, 155, 158, 166, 176, 187, 188, 189, 196, 218, 242, 243, 244, 246, 248, 251, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 292, 302, 310, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 333, 346, 361, 367, 373, 374, 377, 379, 380, 381, 383, 387, 391, 392, 393, 397, 402, 405, 407, 411, 418, 419, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 500, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 631, 632, 633, 634, 635, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 1005, 1009, 1015, 1019, 1020, 1024, 1025, 1028, 1036, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "pleasant": [378, 1029], "plenti": 62, "plgreenliru": 1047, "plo": [373, 611, 612], "plot": [2, 43, 44, 45, 50, 51, 52, 54, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 78, 87, 88, 89, 91, 92, 93, 94, 95, 98, 104, 105, 106, 107, 110, 111, 112, 116, 117, 121, 124, 125, 128, 129, 130, 131, 134, 135, 137, 138, 139, 140, 142, 145, 146, 147, 149, 150, 152, 153, 154, 162, 164, 165, 167, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 184, 185, 186, 187, 189, 190, 192, 193, 197, 198, 201, 202, 203, 204, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 224, 226, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 249, 250, 255, 257, 258, 259, 261, 263, 264, 265, 266, 267, 272, 273, 275, 277, 278, 282, 283, 284, 285, 286, 287, 289, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 322, 325, 326, 327, 328, 332, 333, 334, 336, 337, 338, 342, 343, 344, 347, 348, 349, 350, 351, 354, 355, 356, 357, 359, 360, 361, 379, 382, 388, 391, 396, 397, 406, 409, 411, 413, 415, 417, 418, 441, 444, 449, 453, 459, 467, 474, 500, 505, 506, 508, 516, 527, 557, 561, 564, 566, 568, 569, 573, 574, 614, 626, 635, 636, 637, 661, 662, 676, 680, 701, 702, 704, 705, 706, 707, 722, 731, 739, 765, 786, 788, 791, 792, 793, 804, 810, 821, 827, 829, 830, 831, 832, 835, 837, 846, 850, 866, 869, 881, 882, 883, 885, 888, 908, 910, 913, 916, 917, 922, 998, 999, 1001, 1002, 1004, 1005, 1008, 1009, 1011, 1019, 1020, 1021, 1024, 1025, 1026, 1031, 1037, 1039, 1040, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "plot_": [324, 397], "plot_2d": [119, 234], "plot_3d": 234, "plot_accuraci": 47, "plot_adaboost_multiclass": [135, 1026], "plot_adaboost_regress": [136, 1026], "plot_adaboost_twoclass": [137, 1026], "plot_adjusted_for_chance_measur": [72, 1026], "plot_affinity_propag": [73, 443, 457, 1026], "plot_agglomerative_clust": [74, 1026], "plot_agglomerative_clustering_metr": [75, 1026], "plot_agglomerative_dendrogram": [76, 1026], "plot_all_sc": [312, 1026], "plot_anomaly_comparison": [241, 1026], "plot_ard": [194, 648, 1026], "plot_arg": 308, "plot_bayesian_ridge_curvefit": [195, 1026], "plot_benchmark_throughput": 49, "plot_bias_vari": [138, 1026], "plot_bicluster_newsgroup": [57, 1026], "plot_birch_vs_minibatchkmean": [77, 1026], "plot_bisect_kmean": [78, 1026], "plot_caching_nearest_neighbor": [294, 1026], "plot_calibr": [61, 379, 1026], "plot_calibration_curv": [62, 1026], "plot_calibration_multiclass": [63, 1026], "plot_causal_interpret": [186, 1026], "plot_chance_level": [251, 266, 279, 281, 282, 704, 706, 1052], "plot_classif": [295, 1026], "plot_classification_prob": [66, 1026], "plot_classifier_chain_yeast": [291, 1026], "plot_classifier_comparison": [67, 1026], "plot_clust": 85, "plot_cluster_comparison": [79, 1026], "plot_coin_segment": [80, 1026], "plot_coin_ward_segment": [81, 1026], "plot_color": [137, 358], "plot_column_transform": [102, 1026], "plot_column_transformer_mixed_typ": [103, 1026], "plot_compare_calibr": [64, 1026], "plot_compare_cross_decomposit": [115, 1026], "plot_compare_gpr_krr": [171, 1026], "plot_compare_method": [234, 1026], "plot_compare_reduct": [104, 1026], "plot_concentration_prior": [257, 1026], "plot_confusion_matrix": [265, 321, 1026, 1046, 1047, 1048, 1049], "plot_cost_complexity_prun": [357, 1026], "plot_cost_sensitive_learn": [266, 1026], "plot_covariance_estim": [109, 1026], "plot_custom_kernel": [338, 1026], "plot_cv_diabet": [160, 1026], "plot_cv_indic": [267, 1026], "plot_cv_predict": [268, 1026], "plot_cyclical_feature_engin": [43, 1026], "plot_dbscan": [82, 422, 447, 1026], "plot_decision_funct": 351, "plot_dendrogram": 76, "plot_det": [269, 1026], "plot_det_curv": [1048, 1049], "plot_dict_face_patch": [83, 1026], "plot_digit": 44, "plot_digits_agglomer": [84, 1026], "plot_digits_classif": [68, 1026], "plot_digits_classification_exercis": [161, 1026], "plot_digits_denois": [44, 1026], "plot_digits_kde_sampl": [296, 1026], "plot_digits_linkag": [85, 1026], "plot_digits_pip": [105, 1026], "plot_discret": [313, 1026], "plot_discretization_classif": [314, 1026], "plot_discretization_strategi": [315, 1026], "plot_display_object_visu": [242, 1026], "plot_distribut": 312, "plot_document_classification_20newsgroup": [353, 1026], "plot_document_clust": [354, 1026], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [196, 1026], "plot_ellips": [70, 257], "plot_embed": 235, "plot_ensemble_oob": [139, 1026], "plot_estimator_represent": [243, 1026], "plot_f_test_vs_mi": [164, 1026], "plot_face_compress": [86, 1026], "plot_face_recognit": [45, 1026], "plot_faces_decomposit": [121, 1026], "plot_feature_agglomeration_vs_univariate_select": [87, 1026], "plot_feature_effect": 353, "plot_feature_select": [165, 1026], "plot_feature_selection_pipelin": [166, 1026], "plot_feature_transform": [140, 1026], "plot_feature_union": [106, 1026], "plot_fig": 211, "plot_forest_hist_grad_boosting_comparison": [141, 1026], "plot_forest_import": [142, 1026], "plot_forest_iri": [143, 1026], "plot_galleri": [45, 121], "plot_gmm": [258, 1026], "plot_gmm_covari": [259, 1026], "plot_gmm_init": [260, 1026], "plot_gmm_pdf": [261, 1026], "plot_gmm_select": [262, 1026], "plot_gmm_sin": [263, 1026], "plot_gpc": [172, 1026], "plot_gpc_iri": [173, 1026], "plot_gpc_isoprob": [174, 1026], "plot_gpc_xor": [175, 1026], "plot_gpr_co2": [176, 1026], "plot_gpr_noisi": [177, 1026], "plot_gpr_noisy_target": [178, 1026], "plot_gpr_on_structured_data": [179, 1026], "plot_gpr_prior_posterior": [180, 1026], "plot_gpr_sampl": 180, "plot_gradient_boosting_categor": [144, 1026], "plot_gradient_boosting_early_stop": [145, 1026], "plot_gradient_boosting_oob": [146, 1026], "plot_gradient_boosting_quantil": [147, 1026], "plot_gradient_boosting_regress": [148, 1026], "plot_gradient_boosting_regular": [149, 1026], "plot_grid_search_digit": [270, 1026], "plot_grid_search_refit_cal": [271, 1026], "plot_grid_search_stat": [272, 1026], "plot_grid_search_text_feature_extract": [273, 1026], "plot_hashing_vs_dict_vector": [355, 1026], "plot_hdbscan": [88, 1026], "plot_hgbt_regress": [150, 1026], "plot_huber_vs_ridg": [197, 1026], "plot_hyperplan": [206, 223, 249], "plot_ica_blind_source_separ": [122, 1026], "plot_ica_vs_pca": [123, 1026], "plot_idx": 143, "plot_image_denois": [124, 1026], "plot_incremental_pca": [125, 1026], "plot_indic": 275, "plot_inductive_clust": [89, 1026], "plot_influ": 46, "plot_info": 144, "plot_iris_dataset": [118, 1026], "plot_iris_dtc": [358, 1026], "plot_iris_exercis": [162, 1026], "plot_iris_logist": [198, 1026], "plot_iris_svc": [339, 1026], "plot_isolation_forest": [151, 1026], "plot_isotonic_regress": [244, 1026], "plot_iterative_imputer_variants_comparison": [182, 1026], "plot_johnson_lindenstrauss_bound": [245, 1026], "plot_kde_1d": [297, 1026], "plot_kernel_approxim": [246, 1026], "plot_kernel_pca": [126, 1026], "plot_kernel_ridge_regress": [247, 1026], "plot_kind": 43, "plot_kmeans_assumpt": [90, 1026], "plot_kmeans_digit": [91, 1026], "plot_kmeans_plusplu": [92, 1026], "plot_kmeans_silhouette_analysi": [93, 1026], "plot_kmeans_stability_low_dim_dens": [94, 1026], "plot_label_propagation_digit": [331, 1026], "plot_label_propagation_digits_active_learn": [332, 1026], "plot_label_propagation_structur": [333, 1026], "plot_lasso_and_elasticnet": [199, 1026], "plot_lasso_dense_vs_sparse_data": [200, 1026], "plot_lasso_lars_": [201, 1026], "plot_lasso_lasso_lars_elasticnet_path": [202, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 1026], "plot_lasso_model_select": [203, 651, 657, 1026], "plot_lda": [69, 1026], "plot_lda_qda": [70, 1026], "plot_learning_curv": [274, 1026], "plot_likelihood_ratio": [275, 1026], "plot_linear_model_coefficient_interpret": [187, 1026], "plot_linearsvc_support_vector": [340, 1026], "plot_linkage_comparison": [95, 1026], "plot_lle_digit": [235, 1026], "plot_lof_novelty_detect": [298, 1026], "plot_lof_outlier_detect": [299, 1026], "plot_logist": [204, 1026], "plot_logistic_l1_l2_spars": [205, 1026], "plot_logistic_multinomi": [206, 1026], "plot_logistic_path": [207, 1026], "plot_lw_vs_oa": [110, 1026], "plot_mahalanobis_dist": [111, 1026], "plot_manifold_spher": [236, 1026], "plot_map_data_to_norm": [316, 1026], "plot_md": [237, 1026], "plot_mean_shift": [96, 1026], "plot_metadata_rout": [248, 1026], "plot_method": [48, 70, 198, 228, 295, 300, 338, 340, 341, 343, 344, 346, 635], "plot_mini_batch_kmean": [97, 1026], "plot_missing_valu": [183, 1026], "plot_mlp_alpha": [307, 1026], "plot_mlp_training_curv": [308, 1026], "plot_mnist_filt": [309, 1026], "plot_model_complexity_influ": [46, 1026], "plot_monotonic_constraint": [152, 1026], "plot_multi_metric_evalu": [276, 1026], "plot_multi_task_lasso_support": [208, 1026], "plot_multiclass_overview": [289, 1026], "plot_multilabel": [249, 1026], "plot_multioutput_face_complet": [250, 1026], "plot_n_features_influ": 49, "plot_nca_classif": [300, 1026], "plot_nca_dim_reduct": [301, 1026], "plot_nca_illustr": [302, 1026], "plot_nearest_centroid": [303, 1026], "plot_nested_cross_validation_iri": [277, 1026], "plot_nnl": [209, 1026], "plot_num": [79, 95, 241], "plot_obs_pr": 232, "plot_ol": [210, 1026], "plot_ols_3d": [211, 1026], "plot_ols_ridge_vari": [212, 1026], "plot_omp": [213, 1026], "plot_on_dataset": 308, "plot_oneclass": [341, 1026], "plot_opt": [98, 1026], "plot_out_of_core_classif": [47, 1026], "plot_outlier_detection_bench": [251, 1026], "plot_outlier_detection_win": [48, 1026], "plot_partial_depend": [188, 321, 322, 323, 1026, 1041, 1045, 1046, 1047, 1048, 1049, 1050], "plot_partial_dependence_visualization_api": [252, 1026], "plot_pca_iri": [127, 1026], "plot_pca_vs_fa_model_select": [128, 1026], "plot_pca_vs_lda": [129, 1026], "plot_pcr_vs_pl": [116, 1026], "plot_permutation_import": [189, 190, 1026], "plot_permutation_importance_multicollinear": [190, 1026], "plot_permutation_tests_for_classif": [278, 1026], "plot_pipeline_displai": [253, 1026], "plot_poisson_regression_non_normal_loss": [214, 1026], "plot_polynomial_interpol": [215, 883, 887, 1026], "plot_precision_recal": [279, 1026], "plot_precision_recall_curv": [321, 1046, 1048, 1049], "plot_prediction_lat": [49, 1026], "plot_quantile_regress": [216, 1026], "plot_random_forest_embed": [153, 1026], "plot_random_forest_regression_multioutput": [154, 1026], "plot_random_multilabel_dataset": [119, 1026], "plot_randomized_search": [280, 1026], "plot_rang": 137, "plot_ransac": [217, 1026], "plot_rbf_paramet": [342, 1026], "plot_rbm_logistic_classif": [310, 1026], "plot_regress": [304, 1026], "plot_release_highlights_0_22_0": [321, 1026], "plot_release_highlights_0_23_0": [322, 1026], "plot_release_highlights_0_24_0": [323, 1026], "plot_release_highlights_1_0_0": [324, 1026], "plot_release_highlights_1_1_0": [325, 1026], "plot_release_highlights_1_2_0": [326, 1026], "plot_release_highlights_1_3_0": [327, 1026], "plot_release_highlights_1_4_0": [328, 1026], "plot_release_highlights_1_5_0": [329, 1026], "plot_result": [70, 144, 257, 258, 263], "plot_rfe_digit": [167, 1026], "plot_rfe_with_cross_valid": [168, 1026], "plot_ridge_coeff": [218, 1026], "plot_ridge_path": [219, 1026], "plot_robust_fit": [220, 1026], "plot_robust_vs_empirical_covari": [112, 1026], "plot_roc": [281, 1026], "plot_roc_crossv": [282, 1026], "plot_roc_curv": [321, 1046, 1048], "plot_roc_curve_visualization_api": [254, 1026], "plot_roc_pr_curv": 266, "plot_sampl": [123, 263], "plot_scalable_poly_kernel": [192, 1026], "plot_scaling_import": [317, 1026], "plot_scatt": 89, "plot_segmentation_toi": [99, 1026], "plot_select_from_model_diabet": [169, 1026], "plot_self_training_varying_threshold": [334, 1026], "plot_semi_supervised_newsgroup": [335, 1026], "plot_semi_supervised_versus_svm_iri": [336, 1026], "plot_separating_hyperplan": [343, 1026], "plot_separating_hyperplane_unbalanc": [344, 1026], "plot_set_output": [255, 1026], "plot_sgd_comparison": [221, 1026], "plot_sgd_early_stop": [222, 1026], "plot_sgd_iri": [223, 1026], "plot_sgd_loss_funct": [224, 1026], "plot_sgd_penalti": [225, 1026], "plot_sgd_separating_hyperplan": [226, 1026], "plot_sgd_weighted_sampl": [227, 1026], "plot_sgdocsvm_vs_ocsvm": [228, 1026], "plot_sparse_cod": [130, 1026], "plot_sparse_cov": [113, 1026], "plot_sparse_logistic_regression_20newsgroup": [229, 1026], "plot_sparse_logistic_regression_mnist": [230, 1026], "plot_species_distribut": 50, "plot_species_distribution_model": [50, 1026], "plot_species_kd": [305, 1026], "plot_spectral_biclust": [58, 1026], "plot_spectral_coclust": [59, 1026], "plot_stack_predictor": [155, 1026], "plot_step": [137, 143, 358], "plot_step_coars": 143, "plot_stock_market": [51, 1026], "plot_subfigur": 249, "plot_successive_halving_heatmap": [283, 1026], "plot_successive_halving_iter": [284, 1026], "plot_surfac": [188, 211], "plot_svm_anova": [345, 1026], "plot_svm_kernel": [346, 1026], "plot_svm_margin": [347, 1026], "plot_svm_regress": [348, 1026], "plot_svm_scale_c": [349, 1026], "plot_svm_tie_break": [350, 1026], "plot_swissrol": [238, 1026], "plot_t_sne_perplex": [239, 1026], "plot_target_encod": [318, 1026], "plot_target_encoder_cross_v": [319, 1026], "plot_theilsen": [231, 1026], "plot_time_series_lagged_featur": [52, 1026], "plot_titl": 257, "plot_tomography_l1_reconstruct": [53, 1026], "plot_top_word": 54, "plot_topics_extraction_with_nmf_lda": [54, 1026], "plot_train_error_vs_test_error": [285, 1026], "plot_training_data_with_decision_boundari": 346, "plot_transformed_target": [107, 1026], "plot_tre": [2, 358, 361, 1021, 1045, 1047, 1048, 1049, 1051, 1052, 1054], "plot_tree_regress": [359, 1026], "plot_tree_regression_multioutput": [360, 1026], "plot_tuned_decision_threshold": [286, 1026], "plot_tweedie_regression_insurance_claim": [232, 1026], "plot_underfitting_overfit": [287, 1026], "plot_unveil_tree_structur": [361, 1026], "plot_varimax_fa": [131, 1026], "plot_voting_decision_region": [156, 1026], "plot_voting_proba": [157, 1026], "plot_voting_regressor": [158, 1026], "plot_ward_structured_vs_unstructur": [100, 1026], "plot_weighted_sampl": [351, 1026], "plotli": [141, 273, 379, 397, 404], "pls1": [414, 487], "pls2": [414, 487], "plsca": [115, 486], "plscanon": [2, 115, 485, 487, 488, 1006, 1027, 1031, 1040, 1044, 1046, 1048, 1050, 1054], "plsregress": [2, 115, 116, 1006, 1027, 1031, 1043, 1046, 1048, 1050, 1052, 1054, 1055], "plssvd": [2, 485, 486, 1027, 1031, 1048, 1050, 1054], "plsw2a": 414, "plt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 190, 192, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 325, 326, 328, 331, 332, 333, 334, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 375, 386, 441, 506, 635, 636, 701, 702, 704, 705, 706, 810, 827, 922, 1012, 1033], "plu": [279, 376, 384, 683, 839, 842, 1006, 1019], "plug": [416, 1001, 1029], "plugin": 397, "plural": 1042, "pm": [180, 188, 282, 418, 1005], "pmlr": 700, "pmml": 1024, "png": [0, 68, 920], "pnucci": 1052, "po": [148, 237, 419], "podshumok": [1042, 1043], "poesio": 720, "poetri": 405, "poh": [1044, 1045], "point": [2, 8, 37, 43, 48, 50, 52, 53, 63, 67, 72, 73, 75, 76, 82, 85, 88, 91, 93, 97, 100, 111, 112, 115, 118, 119, 120, 122, 124, 126, 135, 137, 141, 143, 144, 145, 150, 153, 168, 169, 173, 178, 179, 184, 187, 188, 189, 194, 198, 203, 206, 208, 210, 212, 214, 215, 216, 218, 220, 223, 226, 227, 231, 232, 234, 235, 236, 237, 238, 241, 244, 246, 259, 263, 264, 265, 269, 273, 274, 275, 279, 281, 282, 289, 291, 292, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 313, 314, 316, 318, 329, 331, 332, 334, 336, 338, 342, 343, 344, 346, 347, 350, 351, 353, 354, 355, 358, 362, 366, 367, 368, 373, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 387, 391, 393, 394, 407, 410, 411, 416, 417, 418, 419, 422, 423, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 463, 464, 472, 475, 477, 500, 502, 508, 516, 518, 519, 523, 526, 529, 534, 537, 539, 545, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 614, 615, 632, 635, 636, 637, 641, 642, 643, 648, 649, 655, 659, 661, 662, 674, 675, 677, 679, 680, 682, 683, 686, 687, 692, 693, 694, 695, 696, 697, 698, 705, 710, 711, 714, 717, 721, 727, 729, 735, 740, 741, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 768, 783, 784, 794, 795, 801, 802, 804, 818, 820, 826, 829, 831, 838, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 865, 866, 869, 873, 878, 887, 888, 902, 903, 904, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 932, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1018, 1020, 1021, 1024, 1025, 1026, 1031, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "pointer": [379, 387, 445, 1045], "pointplot": 150, "points_color": 234, "pointwis": [138, 178, 422, 447], "poisson": [2, 43, 52, 184, 193, 249, 375, 418, 467, 468, 500, 527, 556, 562, 566, 569, 652, 673, 676, 684, 710, 728, 749, 753, 754, 756, 834, 868, 869, 872, 873, 881, 882, 883, 888, 917, 919, 956, 1001, 1021, 1026, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "poisson_gbrt": 214, "poisson_glm": 214, "poissonregressor": [2, 214, 232, 322, 325, 652, 684, 1001, 1047, 1050, 1051, 1055], "pokorni": 1051, "pola": 52, "polar": [105, 176, 379, 397, 404, 435, 445, 446, 448, 450, 452, 467, 471, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 565, 566, 570, 571, 572, 573, 574, 585, 586, 587, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 906, 1053, 1054], "pole": 236, "poli": [43, 162, 192, 272, 339, 346, 348, 455, 539, 624, 769, 778, 804, 883, 910, 911, 912, 913, 914, 1001, 1015], "polici": [150, 186, 187, 214, 232, 266, 382, 393, 539, 545, 1001, 1051], "policyhold": [214, 232, 1001], "polit": [57, 353, 374, 378, 1001, 1006], "pollak": 1054, "polli": 353, "pollut": [353, 732, 789, 1005, 1011], "polmauri": 1043, "poloso": 1050, "polycollect": [810, 827], "polynomi": [2, 54, 182, 184, 191, 193, 214, 220, 246, 253, 272, 287, 297, 323, 324, 339, 348, 371, 375, 455, 494, 624, 643, 644, 645, 647, 649, 676, 769, 778, 779, 834, 869, 878, 880, 883, 887, 908, 910, 911, 912, 913, 914, 1000, 1020, 1026, 1027, 1031, 1048, 1049], "polynomial_featur": 287, "polynomial_kernel": [2, 407, 769, 1003, 1053, 1055], "polynomialcountsketch": [2, 192, 643, 645, 997, 1048, 1050, 1053], "polynomialfeatur": [2, 43, 194, 214, 215, 220, 253, 287, 323, 346, 887, 1001, 1015, 1040, 1044, 1045, 1046, 1049, 1050, 1052, 1053], "polynomialfeaturespolynomialfeatur": 253, "polysemi": 416, "polytop": 519, "pomegran": 1024, "ponc": [416, 535, 541], "poncho": 1029, "pone": 373, "ponnuthurai": 376, "ponzi": 318, "pooch": [86, 379, 397, 404], "pooja": [1051, 1052, 1053], "pool": [281, 391, 448, 639, 973, 1025, 1047], "pooling_func": [448, 1044], "poolqc": 144, "poolsawat": [1050, 1051], "poor": [188, 192, 278, 334, 409, 415, 416, 694, 698, 742, 845, 848, 849, 999, 1000, 1002, 1007, 1025, 1043, 1044, 1045, 1047, 1049], "poor_scor": [924, 926], "poorer": [144, 362, 416], "poorest": 1007, "poorli": [62, 64, 95, 109, 116, 138, 149, 238, 367, 411, 418, 532, 634, 1001, 1002, 1042], "poorna": [1046, 1048], "pop": [361, 391, 923, 1044], "popa": [1046, 1047], "popitem": 923, "popo": 1039, "popul": [104, 109, 111, 150, 187, 214, 251, 275, 312, 374, 388, 393, 413, 443, 493, 716, 722, 850, 851, 852, 854, 856, 858, 859, 860, 973, 1005, 1011, 1015, 1021], "popular": [6, 10, 182, 238, 374, 377, 384, 387, 391, 393, 417, 418, 419, 421, 455, 465, 995, 997, 1001, 1003, 1010, 1019, 1025], "port": [377, 397, 1046], "portabl": [405, 1024], "portfolio": [214, 232, 999], "portion": [45, 47, 112, 145, 169, 281, 366, 374, 376, 379, 385, 393, 792, 829, 846, 994, 1004, 1008], "portland": [411, 422, 447], "portnoi": [1001, 1053], "portrait": [45, 416], "pos_class": 47, "pos_label": [242, 251, 266, 286, 393, 410, 441, 442, 702, 704, 706, 710, 711, 713, 731, 733, 734, 742, 786, 787, 788, 791, 793, 803, 875, 892, 1005, 1044, 1048, 1050, 1054], "pos_lr": 275, "pos_lr_bas": 275, "pos_lr_base_std": 275, "pos_tagg": 419, "pos_vector": 419, "pos_window": 419, "pose": [218, 280, 1001], "posit": [0, 2, 43, 45, 47, 50, 51, 61, 62, 64, 100, 131, 150, 152, 157, 167, 180, 186, 187, 199, 202, 209, 214, 215, 216, 218, 232, 237, 245, 251, 266, 269, 272, 275, 279, 281, 282, 285, 286, 312, 322, 323, 327, 329, 353, 361, 366, 374, 378, 379, 381, 386, 388, 393, 394, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 423, 441, 442, 445, 449, 450, 452, 467, 470, 498, 502, 504, 508, 512, 513, 514, 529, 531, 533, 534, 535, 537, 539, 540, 541, 546, 549, 550, 552, 553, 554, 561, 565, 566, 567, 568, 596, 597, 598, 599, 600, 602, 603, 604, 606, 610, 614, 615, 624, 635, 636, 647, 650, 651, 652, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 673, 676, 677, 678, 679, 681, 684, 685, 686, 687, 688, 691, 694, 702, 704, 706, 711, 713, 716, 717, 719, 720, 722, 724, 726, 728, 731, 733, 734, 735, 739, 740, 742, 743, 744, 745, 747, 748, 756, 758, 762, 770, 786, 787, 788, 791, 792, 793, 801, 802, 803, 807, 808, 831, 848, 849, 850, 852, 854, 856, 858, 860, 861, 871, 872, 875, 881, 884, 887, 892, 896, 900, 901, 903, 904, 908, 909, 912, 913, 914, 916, 918, 925, 928, 931, 950, 952, 969, 971, 996, 997, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1015, 1020, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "position": 393, "positive_class": [47, 716], "positive_cod": [121, 535, 541, 546, 549, 550], "positive_dict": [121, 535, 541, 549, 550], "positive_featur": 384, "positive_likelihood_ratio": [275, 716], "positive_onli": [925, 928], "posix": [367, 391], "posixpath": 52, "possa": 1043, "possibl": [30, 43, 52, 55, 63, 64, 72, 82, 88, 103, 109, 121, 138, 141, 150, 152, 171, 187, 188, 189, 190, 214, 231, 232, 246, 248, 266, 272, 273, 274, 275, 277, 278, 279, 281, 282, 291, 321, 342, 349, 353, 354, 362, 366, 367, 368, 372, 373, 374, 379, 380, 381, 382, 383, 385, 387, 391, 392, 393, 397, 402, 405, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 421, 423, 425, 434, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 465, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 500, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 713, 725, 726, 727, 728, 732, 746, 760, 782, 787, 789, 792, 801, 802, 803, 804, 806, 807, 808, 810, 816, 817, 818, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 932, 934, 935, 938, 944, 975, 978, 994, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1013, 1015, 1020, 1021, 1025, 1029, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052], "possibli": [90, 116, 169, 214, 229, 346, 354, 376, 378, 387, 405, 411, 418, 419, 454, 456, 593, 843, 844, 845, 846, 847, 913, 914, 916, 917, 918, 919, 994, 997, 1002, 1008, 1015, 1051, 1055], "post": [2, 46, 54, 57, 102, 168, 169, 184, 242, 264, 276, 279, 289, 325, 329, 334, 353, 354, 355, 356, 361, 366, 374, 378, 379, 384, 392, 406, 411, 451, 491, 492, 500, 504, 555, 561, 562, 563, 564, 565, 568, 569, 662, 704, 706, 716, 722, 746, 788, 791, 803, 804, 820, 826, 831, 834, 869, 888, 906, 916, 917, 918, 919, 1005, 1021, 1026, 1028, 1029, 1031, 1047], "post1": [377, 397, 403, 404, 1034], "poster": [353, 378, 379], "posterior": [170, 171, 172, 177, 184, 194, 266, 272, 286, 416, 421, 553, 554, 556, 614, 615, 617, 618, 619, 623, 626, 627, 631, 648, 649, 712, 801, 803, 826, 999, 1024, 1026, 1042, 1045], "posteriori": [1001, 1007], "postfit_hook": 46, "postiv": 279, "postpon": [381, 383], "postprocess": [61, 409, 539, 545], "postprocessor": 1047, "postscript": 920, "potenti": [2, 43, 64, 88, 109, 150, 183, 186, 188, 194, 266, 298, 299, 307, 327, 328, 346, 355, 366, 367, 377, 393, 397, 402, 410, 411, 415, 418, 419, 471, 485, 486, 487, 488, 500, 528, 553, 561, 562, 565, 566, 568, 569, 577, 610, 615, 638, 767, 826, 898, 899, 906, 916, 917, 918, 919, 1011, 1019, 1021, 1024, 1039, 1046, 1047, 1050, 1053, 1054], "poughon": 1043, "poundal": 102, "pour": 1005, "pourbozorg": [1044, 1045, 1046], "pow": [680, 681, 682, 865, 866], "powel": [45, 374], "power": [2, 43, 46, 55, 141, 145, 186, 215, 232, 263, 275, 280, 296, 312, 313, 316, 331, 339, 366, 367, 392, 409, 411, 414, 417, 418, 419, 422, 447, 485, 486, 487, 536, 539, 545, 548, 634, 684, 698, 728, 751, 753, 756, 850, 851, 858, 859, 861, 862, 883, 884, 885, 896, 897, 951, 952, 1001, 1002, 1005, 1013, 1015, 1019, 1020, 1029, 1039, 1042, 1044, 1046, 1047, 1049, 1053], "power_iteration_norm": [407, 545, 548, 951, 952, 1050], "power_t": [680, 681, 682, 865, 866, 1019], "power_transform": [2, 884, 897, 1044], "powers_": 883, "powershel": 377, "powertransform": [2, 316, 885, 896, 995, 1015, 1044, 1047, 1050, 1052, 1055], "pox": 289, "poznik": [1049, 1050, 1051], "pp": [0, 96, 169, 271, 376, 411, 413, 419, 422, 423, 447, 451, 455, 465, 515, 537, 538, 545, 594, 639, 647, 668, 689, 690, 724, 730, 734, 744, 760, 773, 787, 843, 845, 847, 864, 884, 896, 998, 1005, 1007, 1008, 1018], "pp2013": 997, "pp84": 421, "ppc64le": 387, "ppf": 272, "ppm": 176, "pprint": [55, 147, 248, 273, 374, 947], "pq": [52, 326], "pr": [0, 157, 367, 379, 382, 383, 387, 419, 745, 1005, 1028, 1046, 1048], "pr_displai": 242, "pr_number": 387, "prabakaran": [1044, 1045, 1048, 1050, 1051], "prabhakar": 416, "practic": [64, 86, 103, 111, 116, 124, 141, 144, 145, 150, 171, 186, 187, 192, 199, 216, 241, 247, 273, 280, 298, 299, 323, 329, 342, 346, 367, 379, 381, 382, 383, 385, 387, 392, 393, 411, 413, 415, 416, 417, 418, 419, 421, 450, 455, 465, 525, 528, 593, 636, 637, 674, 801, 847, 901, 908, 994, 995, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1024, 1025, 1027, 1029, 1030, 1031, 1038, 1042, 1044, 1046, 1048], "practicalswift": 1042, "practis": 219, "practition": [139, 218], "pradeep": [1044, 1045], "pragmat": 379, "prakash": [1041, 1043, 1049], "pramod": 1050, "pranayanchuri": 1049, "prang": 380, "prasanth": 1051, "pratama": 1047, "pratap": [1040, 1043, 1050], "prathmesh": 1045, "pratik": 1043, "pratiqu": 376, "pravar": 1044, "pravarmahajan": [1043, 1044], "pre": [44, 103, 187, 203, 285, 312, 355, 377, 379, 393, 397, 410, 413, 415, 416, 418, 419, 420, 422, 423, 446, 447, 450, 462, 537, 539, 694, 716, 767, 803, 871, 913, 1005, 1010, 1015, 1020, 1021, 1024, 1025, 1031, 1039, 1044, 1050, 1054, 1055], "pre_dispatch": [804, 810, 818, 827, 829, 830, 831, 832, 835, 970, 1039], "preambl": 88, "prec": [113, 242, 531, 1005], "prec_": 113, "prec_macro": 415, "preced": [367, 379, 383, 490, 1005, 1036], "precipit": 409, "precis": [2, 8, 45, 52, 62, 68, 102, 107, 113, 121, 166, 177, 178, 184, 192, 242, 264, 265, 266, 270, 310, 312, 331, 332, 379, 381, 393, 407, 408, 409, 410, 411, 413, 416, 418, 446, 472, 473, 474, 475, 476, 477, 478, 479, 481, 508, 527, 536, 538, 545, 548, 648, 649, 650, 652, 654, 655, 656, 658, 659, 660, 673, 676, 678, 684, 686, 687, 691, 703, 704, 710, 711, 712, 717, 731, 733, 734, 735, 743, 745, 767, 786, 787, 788, 791, 792, 801, 802, 826, 834, 837, 848, 849, 854, 869, 888, 892, 908, 913, 920, 922, 952, 999, 1001, 1008, 1009, 1020, 1026, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "precision_": [51, 113, 472, 473, 474, 475, 476, 477, 478, 479], "precision_macro": 415, "precision_recall_curv": [2, 242, 279, 704, 710, 711, 731, 1005, 1037, 1038, 1042, 1049, 1050, 1052, 1054], "precision_recall_fscore_support": [2, 717, 733, 734, 788, 791, 1005, 1040, 1044, 1046, 1052], "precision_scor": [2, 62, 266, 279, 712, 791, 1005, 1036, 1038, 1039, 1040, 1041, 1046, 1052], "precision_threshold": 270, "precisionrecalldisplai": [2, 266, 279, 324, 786, 788, 791, 1005, 1046, 1049, 1052, 1053, 1054], "precisions_": [801, 802], "precisions_cholesky_": [801, 802, 1050], "precisions_init": [802, 1050, 1052], "precompil": 377, "precomput": [120, 121, 122, 184, 193, 213, 237, 248, 292, 294, 381, 388, 391, 393, 411, 419, 422, 434, 443, 444, 447, 448, 449, 453, 455, 460, 468, 474, 485, 486, 487, 528, 535, 539, 541, 544, 545, 546, 552, 558, 560, 562, 564, 566, 569, 572, 574, 614, 615, 624, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 685, 686, 688, 689, 692, 694, 695, 696, 700, 778, 782, 785, 796, 797, 804, 818, 841, 842, 850, 851, 852, 854, 855, 856, 858, 859, 860, 866, 909, 910, 911, 912, 913, 914, 917, 919, 925, 980, 981, 982, 997, 1001, 1003, 1008, 1020, 1025, 1026, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "precompute_dist": [1040, 1047], "precompute_gram": 1038, "precomputed_nearest_neighbor": [455, 695], "precondit": [411, 455, 465, 699, 1021, 1052], "pred": [43, 46, 50, 52, 68, 350, 353, 374, 652, 673, 684, 701, 706, 710, 722, 733, 734, 742, 787, 788, 791, 792, 1005], "pred1": 158, "pred2": 158, "pred3": 158, "pred4": 158, "pred_background": 50, "pred_decis": [739, 1005, 1049], "pred_entropi": [331, 332], "pred_nam": 45, "pred_ort": 405, "pred_scor": 46, "pred_test": 50, "pred_typ": 49, "predecessor": [135, 453, 458, 459, 460, 1053], "predecessor_": [453, 460], "predecessor_correct": [453, 459], "predefin": [2, 276, 817, 994, 1008, 1051, 1053], "predefinedsplit": [2, 415, 1040], "predetermin": [411, 1002], "predict": [2, 5, 13, 27, 42, 45, 46, 47, 50, 60, 62, 63, 64, 66, 68, 70, 72, 79, 89, 90, 91, 95, 102, 103, 104, 105, 107, 115, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 148, 150, 151, 152, 153, 154, 155, 156, 157, 166, 167, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 187, 188, 189, 190, 192, 194, 197, 198, 199, 206, 209, 210, 211, 212, 215, 216, 217, 218, 220, 221, 222, 223, 228, 229, 231, 232, 241, 242, 244, 246, 248, 250, 258, 259, 260, 261, 262, 263, 264, 265, 270, 272, 274, 275, 278, 281, 282, 286, 287, 289, 291, 295, 298, 299, 300, 303, 304, 310, 312, 313, 317, 318, 321, 322, 323, 324, 325, 327, 328, 329, 332, 334, 335, 336, 338, 339, 341, 342, 346, 348, 349, 350, 353, 354, 358, 359, 360, 361, 362, 365, 367, 371, 374, 376, 379, 381, 386, 388, 393, 396, 402, 405, 406, 407, 409, 411, 412, 414, 416, 418, 419, 420, 425, 428, 433, 434, 440, 441, 442, 443, 445, 446, 447, 450, 451, 452, 468, 472, 485, 486, 487, 490, 505, 512, 528, 538, 545, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 581, 586, 597, 598, 606, 610, 614, 615, 617, 618, 619, 620, 626, 629, 631, 632, 634, 635, 636, 637, 638, 639, 641, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 701, 702, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 716, 718, 719, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 739, 742, 745, 746, 747, 750, 752, 754, 756, 760, 786, 787, 788, 789, 790, 791, 792, 793, 797, 798, 800, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 854, 855, 858, 859, 865, 866, 868, 875, 888, 889, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 927, 978, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1031, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "predict_ecoc": 1040, "predict_joint_log_proba": [843, 844, 845, 846, 847, 1051], "predict_log_proba": [381, 393, 553, 554, 555, 557, 559, 561, 563, 568, 597, 598, 662, 663, 680, 803, 804, 807, 808, 818, 826, 829, 839, 843, 844, 845, 846, 847, 865, 868, 905, 910, 913, 916, 918, 1020, 1036, 1049, 1053, 1055], "predict_ovo": 1040, "predict_ovr": 1040, "predict_param": [248, 468, 571, 572, 597, 598, 1049], "predict_proba": [30, 61, 62, 63, 64, 66, 70, 153, 157, 169, 172, 173, 174, 175, 266, 281, 286, 291, 307, 314, 317, 321, 323, 329, 353, 381, 386, 393, 409, 410, 418, 440, 441, 553, 554, 555, 557, 559, 561, 563, 565, 568, 571, 573, 597, 598, 614, 623, 624, 626, 627, 635, 636, 637, 662, 663, 680, 702, 704, 706, 726, 745, 746, 792, 801, 802, 803, 804, 807, 808, 818, 826, 829, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 850, 858, 865, 868, 875, 903, 904, 905, 910, 913, 916, 918, 927, 1001, 1005, 1007, 1009, 1012, 1018, 1019, 1020, 1021, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055], "predict_proba_ovr": 1040, "predicted_label": [331, 332], "prediction_df": 150, "prediction_perform": 46, "prediction_performance_comput": 46, "prediction_performance_label": 46, "prediction_pow": 46, "prediction_tim": [46, 47], "prediction_titl": 45, "predictionerrordisplai": [2, 43, 52, 107, 155, 187, 268, 326, 1005, 1051, 1053], "predictions_kr": 171, "predictive_analyt": 1021, "predictive_word": 353, "predictor": [2, 107, 134, 144, 158, 182, 184, 214, 232, 243, 268, 381, 392, 393, 412, 414, 415, 418, 421, 469, 470, 485, 486, 487, 500, 520, 521, 522, 559, 560, 566, 569, 572, 606, 614, 634, 636, 637, 652, 657, 661, 673, 677, 684, 705, 829, 831, 840, 841, 868, 869, 881, 882, 888, 978, 1001, 1006, 1026, 1037, 1043, 1046], "predispatch": [810, 827, 832, 835], "predit": 116, "predomin": [381, 1037], "prefer": [73, 79, 88, 150, 263, 281, 312, 362, 366, 367, 368, 379, 380, 381, 393, 411, 415, 416, 418, 419, 443, 457, 474, 475, 481, 490, 512, 513, 631, 636, 637, 658, 662, 663, 705, 730, 732, 746, 761, 762, 839, 857, 883, 908, 909, 958, 970, 994, 997, 999, 1001, 1005, 1010, 1020, 1021, 1024, 1028, 1037, 1043, 1045, 1049, 1050, 1053], "prefetch": 970, "prefit": [63, 266, 393, 409, 410, 420, 440, 571, 572, 601, 803, 826, 1025, 1048, 1049, 1050, 1055], "prefix": [2, 55, 102, 273, 294, 321, 379, 383, 385, 387, 421, 427, 445, 446, 448, 450, 452, 467, 470, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 643, 644, 645, 646, 692, 693, 696, 810, 832, 852, 857, 860, 864, 867, 868, 874, 900, 901, 1042, 1043, 1049, 1051, 1054], "prein": [0, 369, 1048, 1049, 1050], "preiss": 1049, "preliminari": 465, "prematur": 1049, "prepar": [215, 248, 353, 366, 383, 385, 387, 927, 1021, 1029, 1044, 1052], "prepend": [187, 1036], "preprint": 376, "preprocess": [2, 43, 44, 45, 49, 64, 67, 77, 79, 82, 86, 88, 91, 95, 102, 103, 104, 105, 107, 116, 121, 131, 140, 144, 165, 167, 169, 176, 189, 192, 194, 196, 201, 203, 205, 214, 215, 220, 230, 232, 235, 242, 243, 252, 255, 266, 269, 279, 281, 286, 287, 295, 300, 301, 307, 308, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 335, 342, 345, 354, 368, 371, 373, 376, 379, 384, 392, 393, 405, 407, 408, 411, 412, 415, 418, 419, 420, 467, 468, 469, 470, 492, 571, 585, 586, 592, 593, 595, 634, 662, 663, 676, 678, 680, 682, 691, 837, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 908, 909, 910, 911, 913, 914, 995, 1001, 1006, 1009, 1016, 1019, 1020, 1022, 1024, 1026, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "preprocessor": [103, 155, 187, 214, 243, 251, 253, 318, 322, 324, 325, 326, 328, 412, 419, 592, 593, 595, 1024, 1036, 1039, 1044, 1046], "preprocessor__cat__selector__percentil": 103, "preprocessor__num__imputer__strategi": 103, "preprocessor_list": 251, "prescrib": 393, "presenc": [2, 48, 93, 95, 111, 112, 133, 186, 190, 199, 218, 251, 312, 377, 380, 393, 413, 416, 716, 730, 760, 773, 837, 871, 879, 881, 888, 988, 995, 1001, 1005, 1006, 1019, 1028, 1039, 1040, 1042, 1046, 1048, 1050], "present": [0, 2, 43, 44, 52, 78, 82, 119, 121, 128, 140, 141, 147, 150, 151, 168, 169, 177, 180, 194, 197, 199, 203, 214, 241, 244, 248, 262, 266, 270, 275, 278, 281, 282, 292, 312, 315, 317, 354, 376, 377, 381, 384, 391, 393, 402, 409, 411, 413, 416, 418, 419, 429, 430, 433, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 492, 493, 494, 495, 496, 500, 504, 505, 506, 507, 508, 509, 514, 535, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 553, 554, 565, 566, 567, 570, 573, 574, 585, 586, 587, 592, 593, 595, 621, 631, 632, 633, 634, 654, 658, 681, 692, 693, 694, 695, 716, 733, 734, 742, 773, 787, 788, 791, 801, 802, 804, 807, 808, 816, 818, 832, 850, 851, 852, 854, 856, 858, 859, 860, 867, 872, 880, 881, 882, 883, 884, 886, 889, 900, 901, 912, 920, 922, 923, 952, 988, 1004, 1005, 1006, 1007, 1012, 1015, 1023, 1025, 1039, 1044, 1046, 1047, 1048, 1050, 1051, 1053, 1055], "preserv": [37, 43, 126, 238, 245, 267, 382, 415, 416, 418, 419, 585, 592, 593, 595, 650, 656, 700, 778, 782, 822, 823, 824, 892, 929, 934, 935, 995, 1001, 1002, 1015, 1017, 1024, 1036, 1039, 1040, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055], "preserves_dtyp": 929, "preservs": 1050, "preset": [670, 672, 680, 1009], "presort": [1041, 1046], "press": [374, 411, 416, 421, 422, 447, 594, 614, 615, 618, 623, 626, 647, 843, 847, 998, 1001, 1003, 1007], "pressur": [169, 376], "preston": [1041, 1042, 1043], "presum": [187, 291, 411, 419, 843], "prettenhof": [0, 401, 1036, 1037, 1038, 1039, 1040, 1041], "pretti": [188, 238, 270, 353, 366, 379, 391, 865, 866, 1009, 1045], "preuss": 1052, "prev_scor": 55, "preval": [135, 321, 393, 704, 716, 1005], "prevalence_pos_label": [279, 704], "prevent": [43, 88, 145, 147, 166, 186, 215, 218, 312, 318, 319, 342, 353, 357, 362, 379, 381, 383, 391, 392, 405, 407, 411, 416, 419, 445, 452, 491, 492, 565, 566, 594, 595, 615, 732, 789, 865, 866, 893, 894, 896, 897, 898, 899, 1005, 1007, 1010, 1011, 1015, 1021, 1038, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054], "previou": [43, 78, 86, 103, 121, 138, 144, 145, 147, 155, 171, 176, 177, 186, 187, 188, 199, 200, 215, 245, 247, 248, 266, 272, 275, 279, 312, 317, 325, 353, 354, 355, 362, 366, 374, 379, 381, 383, 384, 385, 387, 391, 393, 394, 397, 410, 411, 418, 419, 471, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 634, 650, 652, 656, 657, 662, 664, 666, 670, 671, 672, 673, 680, 681, 682, 684, 711, 823, 839, 842, 857, 865, 866, 905, 922, 1001, 1005, 1009, 1015, 1025, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "previous": [46, 86, 90, 103, 135, 177, 187, 266, 270, 279, 286, 325, 374, 387, 391, 397, 411, 416, 419, 443, 446, 457, 528, 538, 545, 653, 662, 663, 670, 671, 672, 680, 681, 682, 908, 1001, 1015, 1024, 1033, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "previous_loss": [670, 671, 672, 681], "previs": 242, "price": [51, 107, 144, 145, 150, 155, 251, 318, 995, 1001, 1002, 1029], "priceless": 379, "prieur": 1049, "primal": [662, 663, 681, 908, 909, 1019, 1020], "primari": [393, 416, 519, 925, 1012, 1028, 1029], "primarili": [263, 277, 379, 393, 407, 411, 962, 1029, 1045, 1046], "primat": 353, "primdal": 1044, "primit": 1051, "princ": 1049, "princip": [2, 42, 114, 115, 118, 123, 125, 126, 127, 129, 153, 184, 234, 246, 249, 301, 317, 323, 371, 411, 414, 423, 487, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 554, 661, 692, 693, 694, 696, 697, 834, 857, 869, 888, 951, 952, 1002, 1008, 1026, 1030, 1031, 1036], "principl": [135, 178, 297, 355, 379, 391, 393, 394, 415, 418, 952, 994, 1004, 1008, 1019, 1043], "print": [2, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 66, 68, 73, 77, 78, 80, 81, 82, 83, 85, 86, 91, 93, 94, 96, 100, 102, 103, 105, 106, 107, 111, 115, 116, 119, 121, 124, 128, 129, 131, 135, 138, 141, 142, 143, 144, 146, 148, 150, 160, 161, 165, 166, 168, 169, 171, 172, 174, 176, 180, 186, 188, 189, 190, 192, 199, 200, 202, 205, 206, 209, 210, 214, 216, 217, 218, 221, 222, 229, 230, 232, 235, 236, 239, 243, 245, 247, 248, 251, 255, 260, 265, 266, 270, 271, 272, 273, 275, 277, 280, 281, 285, 292, 296, 303, 305, 308, 309, 310, 314, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 332, 335, 342, 353, 354, 355, 357, 361, 362, 366, 373, 374, 377, 380, 381, 387, 393, 402, 405, 412, 415, 418, 419, 421, 467, 470, 471, 475, 481, 493, 498, 506, 516, 517, 545, 548, 553, 554, 563, 564, 565, 566, 568, 569, 573, 574, 581, 587, 588, 589, 591, 592, 593, 595, 616, 621, 622, 634, 650, 651, 653, 654, 656, 657, 658, 660, 664, 665, 666, 667, 670, 671, 680, 681, 688, 700, 717, 721, 741, 799, 801, 802, 803, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 826, 830, 831, 832, 833, 835, 837, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 865, 866, 867, 868, 869, 870, 878, 884, 888, 896, 906, 907, 908, 909, 910, 913, 915, 921, 933, 938, 965, 988, 995, 1005, 1006, 1007, 1008, 1013, 1021, 1036, 1038, 1044, 1045, 1047, 1051, 1055], "print_changed_onli": [471, 906, 1045, 1047, 1048], "print_datafram": 270, "print_progress": 970, "print_rout": 248, "printabl": 1028, "prior": [2, 42, 46, 55, 80, 81, 90, 98, 99, 100, 119, 170, 171, 177, 183, 184, 189, 194, 196, 199, 256, 258, 262, 263, 266, 272, 283, 302, 379, 381, 393, 397, 402, 411, 414, 416, 418, 421, 468, 527, 540, 552, 553, 554, 555, 563, 615, 617, 618, 619, 623, 626, 627, 634, 648, 649, 650, 651, 655, 656, 658, 659, 660, 664, 665, 666, 676, 682, 685, 720, 801, 843, 844, 845, 846, 847, 868, 869, 883, 910, 913, 971, 994, 997, 999, 1001, 1004, 1005, 1007, 1013, 1021, 1022, 1026, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1052], "prior_k": 553, "priori": [214, 231, 281, 291, 312, 393, 411, 418, 592, 598, 1004, 1052], "priorit": [410, 1025, 1043], "prioriti": [378, 636, 836, 837, 1025, 1039], "priors_": [553, 554], "privaci": 1024, "privat": [0, 381, 383, 393, 394, 930, 1029, 1036, 1044, 1046, 1047, 1049, 1050, 1055], "privileg": [251, 387], "priyam": 1051, "priyank": 1054, "priyansh": 1054, "priyash": 1054, "prng": 113, "pro": [405, 1004], "proanthocyanin": 376, "prob_pos_clf": 61, "prob_pos_isoton": 61, "prob_pos_sigmoid": 61, "prob_pr": [441, 442], "prob_tru": [441, 442], "proba": [62, 64, 157, 440, 916, 918], "proba_": [910, 913, 1047], "proba_map": 88, "proba_neg_class": [62, 64], "proba_pos_class": [62, 64], "probabilist": [54, 64, 66, 113, 120, 121, 130, 131, 170, 171, 174, 177, 178, 184, 247, 266, 353, 393, 409, 417, 418, 440, 476, 479, 536, 538, 539, 545, 563, 592, 593, 614, 626, 647, 649, 680, 707, 745, 804, 830, 875, 910, 911, 913, 914, 998, 999, 1001, 1004, 1005, 1010, 1015, 1020, 1021, 1024, 1026, 1029, 1036, 1039, 1043], "probabilisticpca": [1036, 1039], "probabilities_": [88, 449], "probabilities_or_label": 573, "probabl": [0, 2, 5, 30, 52, 60, 64, 65, 70, 88, 107, 119, 134, 148, 150, 156, 164, 170, 171, 172, 173, 184, 187, 190, 206, 226, 229, 230, 234, 238, 242, 244, 245, 266, 272, 274, 275, 278, 279, 282, 286, 289, 291, 310, 312, 316, 321, 323, 329, 334, 336, 348, 349, 366, 374, 375, 381, 385, 391, 393, 410, 411, 415, 416, 419, 420, 421, 437, 438, 439, 440, 441, 442, 449, 450, 452, 508, 516, 519, 527, 531, 553, 554, 555, 557, 559, 561, 563, 565, 568, 571, 573, 574, 597, 598, 614, 617, 618, 626, 631, 635, 636, 637, 662, 663, 675, 680, 696, 702, 704, 706, 707, 710, 711, 713, 716, 720, 724, 726, 730, 731, 733, 743, 744, 745, 760, 786, 788, 791, 792, 793, 798, 801, 802, 803, 804, 807, 808, 818, 826, 833, 834, 837, 839, 840, 843, 844, 845, 846, 847, 850, 853, 858, 864, 865, 889, 901, 902, 903, 904, 905, 908, 910, 913, 916, 918, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1021, 1025, 1026, 1027, 1031, 1036, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1050], "probable_clust": 89, "probas_pr": [786, 1054], "probb_": [910, 913, 1047], "probe": 1013, "probinette4": 1048, "probl": [611, 612], "problem": [2, 11, 25, 42, 43, 44, 45, 50, 52, 53, 54, 63, 72, 87, 88, 90, 99, 121, 135, 138, 141, 147, 148, 171, 184, 189, 192, 194, 199, 200, 203, 207, 208, 214, 216, 218, 231, 232, 236, 241, 242, 249, 251, 254, 270, 272, 277, 281, 282, 286, 287, 289, 291, 292, 297, 304, 316, 324, 328, 329, 339, 342, 346, 349, 350, 353, 354, 361, 362, 366, 374, 375, 376, 377, 378, 380, 381, 384, 385, 387, 388, 391, 393, 399, 409, 410, 411, 413, 415, 417, 418, 419, 420, 421, 422, 423, 447, 450, 452, 453, 455, 460, 465, 468, 481, 507, 512, 513, 519, 520, 521, 522, 527, 528, 532, 535, 537, 541, 543, 546, 547, 548, 549, 550, 551, 552, 555, 556, 561, 565, 568, 571, 575, 577, 593, 614, 635, 647, 652, 654, 656, 658, 659, 660, 661, 662, 663, 668, 669, 670, 672, 673, 676, 677, 678, 679, 680, 681, 683, 684, 689, 690, 691, 692, 693, 695, 697, 699, 712, 720, 723, 733, 734, 739, 742, 743, 787, 788, 791, 792, 801, 802, 805, 806, 807, 808, 809, 811, 812, 813, 814, 819, 820, 821, 822, 823, 824, 828, 836, 837, 838, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 874, 875, 881, 889, 892, 898, 899, 908, 909, 916, 918, 940, 952, 995, 996, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1015, 1019, 1022, 1025, 1027, 1029, 1030, 1031, 1036, 1037, 1039, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "problemat": [43, 187, 266, 268, 412, 995, 1044], "proc": [64, 110, 409, 419, 453, 693, 697, 843, 994, 1002, 1007, 1011], "proce": [83, 166, 196, 377, 383, 414, 415, 418, 443, 881, 1001], "procedur": [25, 80, 89, 141, 147, 169, 195, 201, 262, 274, 315, 319, 342, 353, 362, 379, 391, 392, 393, 394, 409, 413, 415, 416, 418, 420, 535, 541, 542, 544, 549, 550, 551, 557, 558, 559, 560, 563, 564, 597, 599, 606, 613, 648, 676, 678, 691, 732, 789, 865, 866, 885, 897, 925, 975, 994, 1001, 1007, 1015, 1018, 1019, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "proceed": [111, 169, 374, 376, 411, 422, 442, 447, 515, 700, 712, 730, 760, 855, 905, 1005, 1017, 1018, 1019], "process": [0, 2, 19, 37, 43, 44, 57, 63, 66, 67, 70, 80, 81, 83, 99, 102, 104, 106, 110, 112, 122, 123, 125, 135, 143, 145, 147, 152, 153, 162, 186, 194, 197, 216, 218, 224, 225, 226, 227, 247, 248, 249, 251, 257, 258, 261, 263, 266, 272, 274, 275, 284, 289, 307, 312, 315, 323, 327, 332, 336, 346, 347, 351, 354, 355, 357, 366, 367, 368, 374, 378, 379, 381, 383, 385, 388, 391, 392, 393, 405, 411, 412, 413, 415, 416, 417, 418, 419, 420, 424, 451, 452, 478, 500, 508, 527, 538, 539, 540, 541, 542, 565, 566, 567, 592, 593, 595, 614, 615, 617, 618, 619, 621, 622, 623, 626, 627, 629, 631, 636, 637, 643, 647, 668, 676, 689, 690, 707, 727, 745, 785, 801, 803, 804, 807, 808, 818, 826, 829, 830, 831, 840, 841, 857, 871, 875, 877, 878, 879, 888, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 970, 994, 997, 1001, 1005, 1008, 1015, 1017, 1019, 1021, 1024, 1025, 1026, 1027, 1029, 1031, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1055], "process_rout": [2, 248, 1053], "processor": [103, 155, 187, 422, 440, 447, 449, 451, 453, 455, 460, 461, 464, 467, 470, 475, 535, 539, 540, 541, 543, 546, 547, 549, 550, 552, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 598, 606, 611, 612, 614, 636, 638, 643, 651, 655, 657, 659, 661, 662, 663, 665, 667, 669, 670, 672, 680, 683, 692, 693, 694, 695, 696, 697, 698, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 850, 851, 854, 856, 858, 859, 861, 862, 867, 870, 903, 904], "procter": 51, "prod": [354, 625], "prod_": 1007, "prod_i": 997, "proding": 1052, "produc": [52, 53, 62, 63, 79, 90, 102, 124, 147, 148, 149, 151, 199, 278, 310, 334, 362, 367, 374, 375, 379, 381, 384, 393, 394, 411, 412, 415, 416, 418, 443, 446, 449, 455, 523, 540, 563, 567, 585, 592, 597, 598, 636, 637, 806, 807, 808, 816, 821, 824, 829, 873, 883, 910, 913, 996, 997, 1001, 1003, 1004, 1005, 1008, 1011, 1012, 1016, 1018, 1019, 1020, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "product": [2, 58, 103, 121, 156, 171, 176, 188, 346, 362, 366, 381, 382, 385, 388, 408, 416, 418, 454, 542, 544, 551, 586, 593, 594, 595, 617, 618, 637, 644, 668, 669, 689, 690, 765, 767, 779, 781, 880, 883, 900, 901, 953, 994, 997, 1001, 1003, 1015, 1017, 1019, 1020, 1024, 1029, 1031, 1044], "production": 1029, "prof": 385, "profession": 187, "professor": 1029, "profil": [214, 366, 379, 382, 525, 528, 1001, 1029], "profile_default": 385, "profit": [0, 266, 329, 1053], "prog": [169, 376], "prognosi": [169, 376], "program": [0, 83, 169, 354, 362, 367, 368, 376, 377, 379, 381, 385, 391, 512, 639, 674, 898, 899, 1001, 1020, 1021, 1024, 1025, 1028, 1036, 1038], "programmat": [381, 503, 1045], "progress": [43, 46, 47, 121, 158, 169, 183, 207, 297, 325, 376, 383, 384, 394, 402, 407, 411, 563, 564, 696, 837, 839, 842, 857, 865, 866, 1029, 1036, 1038, 1045, 1050], "prohibit": [186, 251, 415, 418, 631, 1010, 1018, 1043], "proj": [53, 653], "proj_gradi": 385, "proj_oper": 53, "project": [2, 37, 45, 47, 50, 53, 55, 69, 91, 100, 118, 120, 121, 123, 125, 127, 131, 175, 177, 179, 180, 184, 188, 211, 234, 235, 236, 238, 240, 242, 246, 249, 258, 296, 301, 305, 310, 339, 354, 366, 371, 373, 377, 378, 379, 384, 385, 388, 393, 394, 397, 408, 414, 416, 417, 423, 443, 449, 454, 455, 465, 477, 485, 486, 487, 488, 492, 506, 508, 535, 537, 538, 539, 541, 543, 545, 546, 547, 548, 552, 553, 577, 586, 593, 645, 646, 653, 676, 678, 692, 695, 699, 700, 838, 857, 885, 900, 901, 902, 951, 952, 999, 1001, 1002, 1003, 1006, 1008, 1009, 1011, 1018, 1021, 1026, 1029, 1031, 1036, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "projected_data": 245, "projected_dist": 245, "projectedgradientnmf": 1041, "prokopi": [1041, 1044], "prolifer": 381, "prolin": [57, 317, 376], "promin": [124, 393], "promis": [393, 1025], "promot": [187, 445, 712, 1024, 1047, 1049, 1053], "prompt": [377, 379, 383, 397, 404, 419], "prone": [64, 214, 259, 316, 391, 409], "pronounc": [74, 75, 85, 176], "proof": [391, 418, 902, 1017], "prop": [105, 112, 220, 259, 298, 341, 361], "propag": [2, 58, 68, 71, 72, 82, 88, 96, 167, 184, 330, 374, 443, 457, 506, 516, 518, 701, 708, 709, 717, 718, 721, 722, 741, 797, 799, 868, 882, 903, 904, 905, 970, 971, 1009, 1026, 1027, 1030, 1031, 1036, 1048, 1051], "proper": [64, 88, 203, 232, 266, 368, 381, 385, 409, 418, 452, 545, 557, 680, 952, 979, 1000, 1001, 1002, 1005, 1020, 1036, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "properli": [43, 52, 62, 88, 152, 176, 267, 285, 321, 368, 377, 379, 383, 387, 417, 908, 909, 910, 911, 912, 913, 914, 994, 1039, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "properti": [51, 62, 178, 179, 216, 231, 258, 294, 317, 361, 366, 372, 379, 381, 397, 408, 409, 411, 413, 416, 418, 420, 421, 426, 445, 448, 454, 455, 456, 467, 468, 546, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 595, 597, 598, 601, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 636, 650, 656, 659, 664, 666, 678, 679, 703, 708, 709, 712, 803, 804, 807, 808, 818, 826, 836, 837, 867, 868, 881, 882, 883, 889, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 997, 1000, 1001, 1002, 1005, 1006, 1008, 1011, 1015, 1018, 1020, 1021, 1022, 1025, 1041, 1045, 1046, 1049, 1050, 1053, 1054], "property_magnitud": 266, "propon": 102, "proport": [54, 63, 75, 150, 168, 200, 214, 221, 227, 241, 251, 266, 275, 279, 295, 299, 302, 349, 351, 361, 366, 374, 409, 411, 413, 415, 416, 418, 419, 441, 442, 449, 472, 477, 519, 553, 554, 559, 561, 563, 564, 565, 566, 567, 568, 587, 588, 592, 595, 631, 636, 662, 663, 670, 671, 672, 678, 679, 680, 682, 700, 705, 716, 726, 805, 806, 807, 808, 821, 824, 834, 854, 865, 866, 882, 908, 909, 910, 913, 914, 916, 918, 920, 922, 940, 994, 1004, 1005, 1008, 1011, 1019, 1020, 1021, 1041, 1053], "propos": [90, 109, 110, 292, 374, 379, 381, 391, 393, 411, 413, 418, 423, 453, 539, 611, 612, 680, 681, 682, 865, 866, 1001, 1004, 1008, 1019, 1043], "proprietari": 1021, "propto": [417, 1007], "prorokovi\u0107": 1054, "protect": [380, 383, 970], "protein": 373, "protocol": [405, 1005, 1024, 1039, 1052, 1053], "protocol_typ": 251, "prototyp": 1029, "prove": [122, 1029], "proven": [272, 999, 1003, 1029], "provenc": 318, "provid": [0, 2, 30, 31, 44, 47, 50, 52, 61, 64, 66, 70, 72, 77, 88, 93, 112, 121, 142, 150, 153, 155, 171, 177, 187, 188, 194, 200, 201, 203, 215, 218, 235, 239, 242, 243, 248, 262, 266, 272, 273, 274, 278, 302, 305, 309, 312, 316, 321, 322, 324, 326, 340, 346, 349, 353, 354, 357, 361, 362, 366, 368, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 387, 388, 391, 392, 393, 396, 397, 402, 405, 407, 408, 410, 411, 412, 413, 415, 416, 418, 419, 420, 421, 422, 423, 425, 432, 440, 443, 445, 446, 447, 449, 450, 452, 453, 455, 462, 463, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 495, 497, 498, 500, 502, 505, 536, 537, 538, 539, 542, 544, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 594, 595, 597, 598, 605, 609, 614, 615, 631, 636, 637, 638, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 694, 698, 703, 715, 726, 739, 745, 746, 768, 778, 782, 792, 796, 798, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 820, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 865, 866, 868, 871, 873, 874, 875, 878, 879, 880, 883, 885, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 924, 926, 940, 946, 957, 961, 963, 980, 981, 982, 993, 994, 995, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1028, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "provinc": 318, "provost": [792, 1005], "proxi": [186, 187, 416, 420, 864, 1041], "prun": 385, "prune": [184, 356, 361, 420, 504, 561, 562, 563, 564, 568, 569, 597, 648, 834, 916, 917, 918, 919, 1008, 1026, 1027, 1031, 1036, 1039, 1046, 1047], "przybocki": 1005, "ps_lsvm_score": 192, "ps_lsvm_time": 192, "pseudo": [215, 310, 381, 415, 423, 443, 455, 457, 465, 472, 473, 474, 476, 477, 478, 479, 537, 565, 566, 567, 631, 638, 643, 645, 646, 650, 651, 656, 657, 664, 665, 666, 667, 681, 695, 699, 807, 808, 816, 818, 857, 864, 900, 901, 905, 908, 909, 910, 913, 951, 952, 1001, 1017, 1041, 1050], "pseudo_likelihood": 864, "pseudocount": [540, 1044], "psf": 379, "psi": 416, "psi_1": 416, "psi_2": 416, "psi_n": 416, "pspachtholz": [1046, 1047, 1048], "psycholog": [411, 709, 720], "psychometrica": 639, "psychometrika": [694, 698, 1002], "pt": [50, 374, 420, 884, 1015], "pt_i": 302, "pt_j": 302, "ptocca": 1046, "ptp": 51, "pts_": 50, "pts_test": 50, "pts_train": 50, "pub": [239, 903], "public": [0, 110, 373, 379, 381, 383, 384, 391, 392, 393, 394, 415, 418, 471, 668, 675, 689, 690, 696, 906, 1001, 1009, 1036, 1041, 1042, 1047, 1048, 1049, 1052], "publicli": [379, 1046], "publish": [373, 374, 381, 383, 387, 393, 1017, 1025, 1048], "pubu": [228, 245, 298, 341], "pubu_r": 111, "puerta": 1051, "puggioni": 1040, "puhuk": [1050, 1051], "pujalt": 1050, "pulapakura": [1053, 1054], "pulchritud": 353, "pulido": 1049, "pulkit": [1044, 1045, 1047], "pull": [102, 324, 367, 377, 382, 393, 394, 1028, 1046], "puls": 376, "punctuat": [419, 592, 593, 595], "puneet": 1043, "puneeth": [1053, 1054], "puor": 124, "puor_r": 175, "pure": [111, 112, 116, 199, 214, 393, 411, 476, 482, 500, 561, 562, 563, 564, 568, 569, 570, 709, 719, 790, 799, 916, 917, 918, 919, 1015], "pure_emp_cov": 112, "pure_loc": 112, "pure_x": 112, "purepremium": 232, "puriti": [137, 920, 922], "purna": 1050, "purpl": [109, 119, 238], "purport": 1043, "purpos": [48, 51, 72, 116, 145, 150, 182, 228, 229, 230, 234, 236, 249, 260, 262, 266, 268, 269, 342, 343, 349, 353, 354, 362, 374, 379, 392, 393, 394, 397, 404, 408, 411, 412, 416, 418, 419, 420, 421, 830, 831, 868, 925, 1002, 1005, 1006, 1008, 1011, 1024, 1048, 1050, 1054], "pursu": 187, "pursuit": [2, 87, 122, 124, 130, 184, 193, 416, 477, 530, 535, 541, 546, 552, 668, 669, 689, 690, 1026, 1027, 1031, 1036], "push": [64, 379, 383, 409, 1028], "pushd": 387, "put": [75, 91, 162, 171, 173, 242, 246, 253, 257, 286, 307, 314, 325, 336, 347, 351, 368, 381, 383, 384, 387, 405, 421, 446, 450, 462, 519, 618, 651, 665, 801, 885, 889, 897, 910, 911, 912, 913, 914, 942, 995, 1002, 1004, 1005, 1006, 1012, 1015], "putnam": 1042, "putschblo": 1049, "pvalu": [2, 596, 599, 600, 602, 603, 604, 833], "pvalue_iri": 278, "pvalue_rand": 278, "pvalues_": [165, 596, 599, 600, 602, 603, 604, 1036], "pvnguyen": 1040, "pwalchessen": 1048, "pwd": 387, "px": [141, 273], "pxd": 379, "py": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 367, 379, 380, 383, 385, 387, 393, 397, 411, 419, 422, 443, 447, 450, 457, 534, 648, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 883, 887, 947, 1005, 1024, 1026, 1036, 1038, 1042, 1046, 1050], "py3": 397, "py39": 397, "pyamg": [80, 397, 404, 411, 455, 465, 695, 699], "pyarrow": [397, 404], "pybrain": 1036, "pycon": [405, 1023], "pyd": 380, "pydata": [43, 379, 387, 397, 404, 405, 1023, 1029], "pydata_2013": 1029, "pydebug": 385, "pyflak": 381, "pyfunc": [703, 1008], "pyfuncdist": 703, "pymc": 1024, "pynndesc": 292, "pynndescenttransform": 292, "pyodid": 379, "pyoxid": 1049, "pypi": [367, 377, 381, 383, 385, 397, 1021, 1044, 1048, 1050, 1051, 1053], "pyplot": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 190, 192, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 325, 326, 328, 331, 332, 333, 334, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 375, 379, 386, 441, 506, 635, 636, 701, 702, 704, 705, 706, 810, 827, 1033, 1050], "pyplpt": 373, "pypy3": 1044, "pysniak": 1039, "pystruct": 391, "pytabl": 373, "pytb": 387, "pytest": [2, 321, 367, 377, 379, 381, 382, 397, 404, 407, 927, 946, 947, 1046, 1049], "python": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 366, 368, 373, 377, 379, 380, 381, 382, 383, 384, 387, 388, 391, 393, 397, 398, 404, 405, 407, 412, 419, 500, 512, 513, 585, 703, 815, 882, 1005, 1015, 1020, 1021, 1025, 1028, 1029, 1031, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053], "python2": 1044, "python3": [377, 397], "python37": 397, "pythonsoftwarefound": 397, "pythonx": 377, "pytorch": [45, 329, 391, 1024, 1025, 1052, 1053], "pytorch_enable_mps_fallback": 407, "pyx": [379, 380, 385, 387], "p\u00e9rez": 1044, "p\u00f6lsterl": [1043, 1046, 1049], "q": [51, 103, 115, 147, 214, 324, 408, 411, 416, 951, 1001, 1020], "q1": 513, "q327": 376, "q_": 1020, "q_m": 1021, "q_max": [886, 898], "q_min": [886, 898], "qaiser": 1053, "qda": [67, 376, 553, 554, 1027, 1031, 1041], "qdeffens": [1046, 1049], "qemu": 387, "qi": [513, 1048], "qian": [1042, 1047], "qiang": 1040, "qianm": 1048, "qid": [490, 512, 513, 1037, 1042], "qimu": 1042, "qin": [0, 376, 400, 419, 1043, 1044, 1045, 1046, 1047, 1055], "qingi": 1044, "qizhi": 1047, "qmarcou": 1053, "qn": 513, "qodari": [1054, 1055], "qp": 1020, "qr": [80, 216, 407, 538, 545, 548, 951, 952, 1002, 1042, 1053], "qt": [316, 885], "qtconsol": 385, "quad": [421, 1008, 1019], "quadcontourset": 635, "quadmesh": 635, "quadrant": 312, "quadrat": [2, 12, 43, 48, 65, 69, 111, 112, 113, 176, 184, 228, 251, 262, 274, 324, 443, 461, 464, 553, 554, 627, 635, 652, 662, 663, 673, 680, 684, 720, 913, 914, 1001, 1002, 1005, 1008, 1011, 1015, 1019, 1020, 1026, 1027, 1031, 1037], "quadraticdiscriminantanalysi": [2, 67, 70, 553, 999, 1006, 1008, 1036, 1041, 1043, 1051, 1055], "quadro": 1049, "quadv": 1050, "qualifi": 384, "qualit": [44, 45, 86, 88, 94, 141, 147, 214, 326, 374, 411, 442, 705, 1051], "qualiti": [0, 13, 27, 45, 58, 61, 72, 80, 82, 91, 124, 143, 150, 187, 220, 265, 270, 279, 280, 281, 346, 379, 387, 391, 393, 406, 411, 413, 416, 455, 465, 472, 477, 561, 562, 563, 564, 568, 569, 747, 818, 900, 901, 916, 917, 918, 919, 952, 1000, 1002, 1010, 1017, 1021, 1024, 1025, 1029, 1031], "quang": 1047, "quansight": 0, "quantifi": [13, 27, 43, 72, 82, 109, 176, 232, 266, 279, 329, 381, 393, 406, 577, 871, 1000, 1013, 1015, 1031], "quantil": [2, 79, 86, 96, 135, 137, 184, 193, 312, 315, 316, 375, 391, 418, 441, 442, 461, 523, 556, 557, 564, 566, 661, 674, 727, 749, 752, 754, 831, 873, 885, 886, 887, 897, 898, 1005, 1015, 1026, 1027, 1031, 1036, 1040, 1043, 1045, 1049, 1050, 1052, 1054], "quantile_list": 52, "quantile_rang": [312, 886, 898, 1042], "quantile_regress": 216, "quantile_transform": [2, 107, 885, 896, 1015, 1043, 1044, 1045, 1054], "quantileregressor": [2, 324, 1001, 1005, 1049, 1050, 1051], "quantiles_": [885, 1015, 1046], "quantiletransform": [2, 107, 188, 316, 412, 468, 884, 897, 995, 1015, 1043, 1044, 1045, 1046, 1047, 1052, 1054], "quantiletransformerquantiletransform": 188, "quantit": [43, 44, 45, 52, 62, 94, 147, 150, 158, 169, 268, 287, 376], "quantiti": [51, 144, 272, 323, 366, 393, 411, 418, 725, 726, 727, 728, 789, 864, 994, 996, 999, 1001, 1041], "quantiz": [71, 124, 184, 374, 446, 450, 452, 873, 1015, 1026], "quantum": 1003, "quartil": 886, "quartimax": [536, 1048], "quasi": [381, 865, 866, 1001], "quazi": [1043, 1044], "queensland": 376, "quentin": [1043, 1044, 1045, 1052, 1053], "queqichao": 1040, "queri": [194, 295, 305, 366, 417, 422, 447, 449, 453, 460, 556, 614, 615, 632, 648, 649, 730, 760, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 1005, 1008, 1021, 1024, 1028, 1038, 1040, 1041, 1044], "query_id": [490, 512, 513], "query_radiu": [848, 849], "question": [0, 160, 186, 266, 272, 349, 378, 379, 384, 387, 405, 415, 418, 837, 910, 913, 1001, 1004, 1005, 1011, 1029], "queue": [47, 1008, 1039], "quick": [43, 126, 254, 379, 381, 385, 397, 610, 834, 1005, 1006, 1015, 1029, 1033], "quicker": 1004, "quickest": 377, "quickli": [74, 252, 308, 321, 376, 379, 380, 415, 418, 696, 782, 1001, 1008, 1009, 1029, 1047], "quinlan": 1021, "quinonez": 1044, "quintana": 1005, "quit": [43, 52, 64, 86, 90, 116, 138, 160, 169, 187, 188, 212, 232, 266, 280, 289, 324, 353, 366, 384, 392, 411, 419, 1000, 1002, 1007, 1029, 1044], "quiver": 123, "quot": [37, 51, 52, 54, 102, 273, 353, 354, 367, 373, 374, 377, 379, 383, 397, 398, 407, 491, 492, 500, 1005, 1017, 1020, 1051], "quota": [1049, 1050], "quotat": 374, "quotient": 1005, "r": [0, 2, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 74, 78, 98, 107, 109, 110, 111, 112, 116, 121, 128, 131, 135, 138, 139, 143, 147, 148, 149, 158, 165, 172, 173, 174, 178, 179, 180, 182, 183, 187, 197, 199, 202, 203, 214, 221, 224, 232, 239, 244, 247, 257, 260, 263, 271, 272, 275, 277, 278, 279, 282, 285, 291, 294, 295, 299, 303, 305, 318, 325, 344, 346, 355, 362, 374, 376, 380, 383, 391, 393, 405, 408, 409, 411, 413, 414, 415, 416, 418, 419, 428, 434, 440, 449, 454, 456, 468, 472, 477, 481, 485, 486, 487, 502, 508, 517, 524, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 592, 593, 594, 595, 598, 610, 613, 614, 615, 631, 639, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 689, 690, 696, 700, 720, 725, 726, 727, 728, 732, 734, 785, 789, 792, 803, 804, 818, 821, 826, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 858, 859, 865, 866, 879, 884, 896, 903, 904, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 921, 970, 995, 997, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1015, 1019, 1020, 1021, 1024, 1036, 1040, 1043, 1046, 1047, 1048, 1049, 1051, 1053], "r0": [807, 808], "r1": 574, "r11": [214, 232], "r2": [107, 136, 141, 155, 186, 188, 209, 247, 285, 412, 418, 558, 574, 677, 831, 866, 926, 1005, 1013, 1045], "r2007": 418, "r22": 214, "r25": 232, "r26": 214, "r2_score": [2, 107, 186, 199, 209, 210, 407, 418, 434, 468, 485, 486, 487, 558, 560, 562, 564, 566, 569, 572, 574, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 728, 732, 841, 842, 851, 859, 866, 909, 911, 914, 917, 919, 994, 1005, 1037, 1039, 1045, 1049, 1050, 1054], "r2_score_ard": 199, "r2_score_enet": 199, "r2_score_lasso": 199, "r2_score_nnl": 209, "r2_score_ol": 209, "r2_with_abl": 186, "r2_without_": 186, "r3": 574, "r72": 214, "r73": 232, "r82": 214, "r93": 214, "r_": [50, 130, 227, 228, 258, 279, 298, 299, 341, 347, 351, 411, 711, 1005, 1021], "r_0": 994, "r_k": 279, "r_multi": 1013, "r_n": [279, 711, 1005], "r_regress": [2, 420, 610, 1049, 1050, 1053], "r_squar": 392, "raamana": [1044, 1045], "rabbit": [325, 327, 1015], "raccoon": [86, 124, 416], "raccoon_fac": [86, 124], "race": [187, 328, 374, 500, 1039], "race_hispan": 187, "race_oth": 187, "race_whit": 187, "rachel": [1048, 1051], "rachelcjordan": 1047, "rachez": [1041, 1042], "rachit": [1042, 1048, 1051], "rachum": 1048, "radar": 1029, "radford": 1001, "radhakrishnan": 1044, "radial": [2, 44, 126, 171, 176, 178, 342, 346, 371, 455, 626, 695, 1003, 1020, 1031], "radian": [305, 703, 768], "radii": [848, 849], "radiu": [2, 169, 299, 342, 376, 411, 445, 453, 692, 768, 785, 848, 849, 850, 851, 852, 856, 858, 859, 860, 862, 1008, 1038, 1040, 1050, 1053], "radius1": 99, "radius2": 99, "radius3": 99, "radius4": 99, "radius_neighbor": [325, 856, 858, 859, 860, 1040, 1045, 1046, 1048, 1049, 1050, 1051], "radius_neighbors_graph": [2, 411, 422, 447, 850, 851, 852, 854, 856, 858, 859, 860, 861, 1008, 1040, 1045, 1048], "radiusneighborsclassifi": [2, 325, 850, 851, 856, 859, 1006, 1008, 1036, 1038, 1042, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "radiusneighborsregressor": [2, 325, 850, 851, 856, 858, 1006, 1008, 1036, 1038, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "radiusneighborstransform": [2, 321, 852, 1008, 1046, 1048, 1050, 1051], "radostin": [1044, 1045], "raduspaimoc": 1047, "raf": 1045, "rafael": [1029, 1037, 1038, 1040, 1043], "rafal": [1051, 1052], "rafei": 1048, "raff": 1039, "raffaello": 1045, "rafiqu": [1044, 1045], "raghav": [0, 401, 1040, 1041, 1042, 1043, 1044, 1048], "raghavan": [416, 594, 843, 847, 1003, 1005, 1007], "raghu": [411, 445], "raghunathan": [1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "raghuv": [1051, 1052], "raghuwanshi": 1050, "rah": 645, "rahiel": 1040, "rahil": [1050, 1051, 1052, 1053, 1054], "rahimi": [645, 997], "rahmaan": 1046, "rahman": [1043, 1044, 1048], "rahn": [1043, 1046], "rahul": [1048, 1053], "rai": [0, 401, 1005, 1036, 1046, 1048, 1049], "raimundo": 1044, "rain": [43, 52, 188, 410, 1001], "rainbow": [61, 236], "rainfal": 1001, "rais": [2, 133, 215, 248, 249, 266, 275, 316, 324, 379, 381, 383, 384, 385, 388, 391, 393, 402, 405, 412, 415, 440, 446, 447, 450, 452, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 513, 537, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 580, 581, 585, 586, 592, 593, 594, 595, 607, 614, 615, 621, 633, 636, 639, 640, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 700, 702, 706, 713, 715, 716, 717, 718, 720, 731, 733, 734, 742, 782, 786, 787, 788, 791, 792, 793, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 818, 822, 826, 827, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 857, 858, 859, 863, 865, 866, 867, 868, 871, 872, 873, 874, 875, 880, 881, 882, 886, 887, 888, 895, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 927, 932, 934, 935, 937, 938, 956, 961, 965, 988, 989, 990, 991, 993, 994, 1005, 1015, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "raisadz": 1054, "raise_exc": [715, 1055], "raise_except": 990, "raise_warn": [275, 716, 990], "raj": [1053, 1054], "rajagopalan": [0, 401, 1044, 1048], "rajaona": [1042, 1043], "rajat": [1039, 1046], "rajdeep": 1045, "rajendra": 1044, "raji": [1051, 1052], "rakotoarison": [1043, 1044, 1046], "ralf": [1039, 1042, 1043, 1051, 1052, 1054], "ralph": 1054, "ram": [55, 86, 368, 405, 418, 900, 901, 1007, 1020, 1042, 1048, 1051, 1052], "ramakrishnan": [411, 445], "ramana": [1042, 1043], "ramanath": 1041, "ramesh": [374, 1029, 1039, 1042, 1046], "rameshwar": [1043, 1044], "ramil": [1044, 1045], "rammig": [1029, 1042], "ramo": 1051, "rampin": 1043, "ramyanp": [1048, 1049], "ramzi": 1048, "ram\u00edrez": 1005, "rand": [2, 53, 61, 72, 73, 74, 75, 79, 82, 91, 95, 128, 138, 152, 154, 164, 194, 199, 236, 237, 241, 247, 248, 287, 304, 322, 323, 328, 335, 336, 348, 354, 359, 360, 388, 402, 548, 708, 709, 719, 761, 785, 790, 900, 901, 903, 904, 905, 1017, 1036, 1047, 1048], "rand_index": 709, "rand_scor": [2, 72, 411, 719, 1005, 1048], "randal": [888, 1040, 1050], "randi": 1042, "randint": [50, 72, 112, 119, 146, 183, 189, 237, 244, 248, 250, 284, 323, 328, 381, 384, 392, 402, 808, 825, 843, 844, 845, 847, 994, 995], "randn": [53, 69, 70, 74, 87, 98, 99, 111, 112, 124, 128, 151, 164, 171, 175, 186, 189, 203, 208, 209, 213, 227, 228, 231, 258, 261, 262, 267, 279, 281, 282, 287, 298, 299, 319, 322, 323, 328, 341, 346, 347, 351, 381, 384, 647, 674, 676, 682, 691, 825, 911, 914], "randolf": 1054, "random": [2, 14, 37, 43, 44, 45, 46, 50, 51, 52, 53, 58, 59, 61, 62, 63, 64, 67, 69, 70, 72, 74, 75, 79, 83, 85, 87, 90, 91, 93, 94, 95, 97, 98, 99, 103, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 119, 122, 123, 124, 127, 128, 134, 136, 138, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 158, 162, 164, 165, 168, 171, 172, 175, 177, 178, 180, 182, 183, 184, 185, 186, 194, 195, 196, 197, 199, 203, 204, 208, 209, 212, 213, 214, 215, 216, 217, 220, 221, 223, 227, 228, 231, 232, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 250, 251, 257, 258, 260, 261, 262, 263, 264, 267, 269, 270, 271, 272, 273, 275, 277, 279, 281, 282, 283, 284, 287, 291, 292, 297, 298, 299, 304, 307, 313, 315, 316, 319, 322, 323, 325, 327, 329, 331, 332, 335, 336, 341, 342, 344, 345, 346, 347, 348, 351, 353, 354, 359, 360, 366, 367, 371, 375, 382, 384, 391, 392, 393, 402, 406, 407, 409, 411, 419, 420, 424, 436, 443, 446, 450, 452, 454, 455, 456, 457, 461, 462, 463, 465, 467, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 491, 492, 493, 494, 496, 499, 500, 501, 506, 507, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 539, 540, 542, 543, 544, 545, 548, 551, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 586, 587, 588, 593, 611, 612, 614, 615, 631, 634, 636, 638, 643, 644, 645, 646, 647, 650, 651, 653, 654, 656, 657, 658, 662, 664, 665, 666, 667, 674, 675, 676, 680, 681, 682, 683, 691, 693, 694, 695, 696, 697, 698, 699, 705, 708, 709, 712, 735, 747, 785, 792, 797, 801, 802, 804, 806, 807, 808, 809, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 833, 834, 839, 841, 842, 843, 844, 845, 847, 848, 849, 853, 857, 864, 865, 866, 868, 871, 873, 882, 885, 889, 897, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 937, 949, 951, 952, 973, 975, 978, 995, 997, 1000, 1002, 1004, 1005, 1009, 1010, 1011, 1013, 1015, 1020, 1021, 1025, 1026, 1027, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "random_": 203, "random_02": 203, "random_05": 203, "random_08": 203, "random_11": 203, "random_cat": [189, 1013], "random_choice_csc": 1046, "random_forest": 140, "random_from_data": [260, 801, 802, 1004], "random_label": 72, "random_num": [189, 1013], "random_offset_": [645, 646], "random_project": [2, 235, 245, 900, 901, 902, 1017, 1022, 1037, 1042, 1052, 1053], "random_sampl": [199, 848, 849, 853], "random_se": [49, 119, 143], "random_search": [273, 280], "random_st": [43, 44, 45, 46, 49, 51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 73, 77, 78, 79, 80, 82, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 107, 113, 116, 119, 121, 123, 126, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 160, 165, 166, 168, 171, 177, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 196, 197, 200, 206, 213, 214, 217, 218, 220, 221, 222, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 246, 249, 250, 251, 252, 254, 255, 257, 259, 260, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 289, 291, 292, 295, 296, 300, 301, 302, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 334, 340, 342, 343, 344, 349, 350, 353, 354, 357, 361, 362, 375, 381, 384, 388, 392, 393, 407, 410, 411, 412, 415, 416, 418, 419, 423, 436, 440, 441, 443, 446, 450, 452, 454, 455, 456, 457, 461, 462, 463, 465, 472, 477, 481, 490, 491, 494, 496, 499, 501, 507, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 587, 588, 597, 598, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 636, 637, 638, 639, 642, 643, 644, 645, 646, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 678, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 714, 739, 792, 796, 797, 801, 802, 803, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 853, 857, 864, 865, 866, 868, 873, 885, 889, 897, 900, 901, 908, 909, 910, 913, 915, 916, 917, 918, 919, 921, 922, 924, 926, 927, 949, 951, 952, 973, 975, 978, 994, 995, 997, 1000, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1015, 1020, 1021, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "random_state_": [381, 540, 631, 857, 1050], "random_tre": 570, "random_tree_embed": 140, "random_unlabeled_point": [323, 903, 904, 905], "random_weights_": [645, 646], "randomforest": [49, 143, 366, 418, 916, 917, 1041], "randomforestclassifi": [2, 63, 64, 67, 89, 139, 140, 141, 142, 143, 157, 189, 190, 253, 254, 269, 284, 321, 323, 328, 353, 362, 392, 393, 409, 418, 420, 561, 562, 563, 565, 570, 571, 573, 807, 808, 826, 838, 918, 994, 995, 1006, 1013, 1029, 1033, 1040, 1041, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "randomforestclassifierifittedrandomforestclassifi": [63, 142, 328], "randomforestclassifierinot": 328, "randomforestclassifierrandomforestclassifi": [63, 189, 253, 284], "randomforestregressor": [2, 49, 141, 154, 155, 158, 182, 183, 323, 328, 392, 418, 561, 562, 564, 566, 570, 572, 574, 636, 637, 918, 995, 1006, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "randomforestregressorrandomforestregressor": [155, 158], "randomgeek78": 1050, "randomized_range_find": [2, 388, 1037, 1042], "randomized_svd": [2, 55, 388, 454, 456, 536, 545, 548, 550, 1036, 1037, 1042, 1049, 1050, 1051], "randomized_svd_low_rank": 1043, "randomizedlasso": 1043, "randomizedlogisticregress": 1043, "randomizedpca": [1029, 1036, 1038, 1039, 1041, 1042, 1043], "randomizedsearchcv": [2, 45, 103, 171, 273, 280, 323, 362, 392, 402, 407, 579, 994, 1005, 1019, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1053, 1054, 1055], "randomizedsearchcvinot": 103, "randomli": [2, 52, 72, 83, 94, 103, 117, 138, 150, 151, 182, 184, 188, 231, 245, 249, 262, 267, 278, 289, 291, 331, 334, 362, 367, 388, 391, 392, 411, 415, 418, 421, 452, 461, 519, 527, 535, 541, 549, 550, 555, 563, 564, 565, 566, 567, 568, 569, 614, 615, 675, 683, 694, 698, 720, 801, 802, 864, 902, 916, 917, 918, 919, 1004, 1006, 1008, 1011, 1013, 1017, 1021, 1026, 1047, 1051, 1053, 1055], "randomst": [2, 44, 53, 58, 59, 61, 67, 70, 72, 79, 83, 94, 95, 112, 113, 116, 121, 123, 128, 136, 146, 147, 150, 151, 152, 154, 165, 171, 172, 175, 177, 178, 180, 182, 183, 186, 189, 194, 195, 196, 197, 199, 203, 208, 215, 216, 221, 228, 237, 241, 247, 248, 257, 260, 267, 275, 278, 279, 281, 282, 283, 284, 304, 307, 313, 315, 316, 319, 322, 323, 325, 327, 328, 331, 332, 336, 345, 359, 360, 381, 384, 388, 393, 402, 416, 423, 424, 443, 446, 450, 452, 454, 455, 456, 457, 461, 462, 463, 465, 472, 473, 477, 478, 479, 481, 482, 483, 484, 491, 494, 496, 499, 501, 507, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 587, 588, 611, 612, 614, 615, 631, 636, 638, 643, 644, 645, 646, 647, 650, 651, 653, 654, 656, 657, 658, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 675, 676, 678, 680, 681, 682, 683, 691, 693, 694, 695, 696, 697, 698, 699, 705, 785, 797, 801, 802, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 826, 832, 833, 834, 838, 839, 842, 843, 844, 845, 847, 848, 849, 853, 857, 864, 865, 866, 873, 885, 889, 897, 900, 901, 903, 904, 905, 908, 909, 910, 913, 914, 916, 917, 918, 919, 937, 951, 952, 973, 975, 978, 1015, 1031], "randomtreesembed": [2, 140, 153, 235, 418, 918, 995, 1037, 1044, 1045, 1049, 1050, 1051], "randomtreesembedding_": 570, "randomtreesembeddingrandomtreesembed": 140, "rang": [2, 43, 44, 45, 46, 47, 49, 51, 55, 57, 58, 62, 63, 64, 68, 69, 72, 73, 75, 77, 80, 81, 83, 84, 88, 93, 94, 96, 97, 109, 110, 112, 113, 135, 137, 138, 139, 142, 147, 150, 154, 164, 167, 168, 172, 187, 188, 192, 199, 203, 204, 208, 212, 214, 215, 218, 221, 222, 230, 232, 235, 237, 244, 245, 250, 251, 257, 259, 262, 263, 266, 267, 271, 272, 273, 275, 276, 277, 279, 280, 281, 283, 284, 285, 287, 291, 296, 302, 304, 305, 310, 312, 317, 318, 321, 325, 326, 332, 342, 349, 353, 354, 358, 361, 367, 373, 374, 376, 379, 381, 385, 388, 393, 405, 411, 415, 418, 421, 443, 464, 472, 474, 475, 476, 477, 478, 479, 481, 484, 494, 498, 499, 518, 531, 545, 557, 558, 563, 564, 567, 592, 593, 595, 633, 636, 642, 644, 652, 653, 673, 675, 680, 681, 682, 684, 696, 716, 735, 750, 792, 834, 840, 854, 856, 858, 859, 864, 878, 885, 886, 887, 893, 894, 897, 898, 901, 902, 951, 952, 994, 1001, 1005, 1009, 1019, 1025, 1029, 1041, 1042, 1043, 1044, 1046, 1049, 1052], "range_n_clust": 93, "range_n_outli": 112, "rangeindex": [187, 266, 500], "rangl": [997, 1005, 1019, 1020], "ranjanikrishnan": 1049, "rank": [2, 43, 55, 62, 111, 125, 128, 142, 167, 189, 190, 232, 270, 272, 280, 375, 406, 408, 409, 413, 414, 416, 418, 419, 512, 513, 525, 528, 553, 554, 597, 598, 610, 652, 661, 673, 684, 700, 724, 730, 731, 743, 744, 760, 792, 798, 807, 808, 952, 994, 996, 997, 1002, 1013, 1015, 1029, 1031, 1037, 1042, 1045, 1046, 1050, 1051, 1054], "rank_": 661, "rank_t": 804, "rank_test_": 276, "rank_test_precis": [270, 276], "rank_test_recal": 270, "rank_test_scor": [272, 280, 804, 818, 1042], "rankdata": 1043, "ranked_exposur": [214, 232], "ranked_frequ": 214, "ranked_pure_premium": 232, "ranking_": [167, 597, 598], "rankylau": 1044, "ransac": [2, 184, 193, 220, 231, 528, 653, 661, 675, 682, 683, 1026], "ransacregressor": [2, 217, 220, 231, 402, 653, 682, 683, 1001, 1006, 1039, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1054], "rao": [415, 1048, 1051], "raphael": 1053, "rapha\u00ebl": 1046, "raphson": [652, 673, 684], "rapid": 1029, "rapidli": [218, 274, 1020, 1029], "rare": [64, 188, 318, 362, 383, 391, 393, 396, 409, 411, 415, 593, 652, 662, 663, 673, 684, 908, 939, 1001, 1015, 1029, 1043, 1044, 1045, 1049, 1051, 1054], "rarer": [353, 355, 419], "raschka": [1041, 1042, 1043, 1044, 1045, 1048], "rashchedrin": 1043, "rasmu": [192, 1043], "rasmussen": [176, 421, 614, 615, 618, 623, 626], "raspberri": 397, "raster": 102, "rastgoo": 1053, "rastogi": 1044, "rastrojo": [411, 709], "rasul": [1041, 1043, 1044], "rat": [50, 305, 374, 502], "rate": [2, 43, 135, 139, 144, 150, 164, 188, 214, 221, 232, 245, 251, 266, 269, 272, 281, 282, 308, 309, 310, 368, 379, 410, 411, 412, 416, 420, 449, 469, 540, 557, 558, 563, 564, 565, 566, 596, 599, 600, 602, 603, 604, 610, 648, 649, 672, 680, 681, 682, 696, 702, 706, 731, 786, 793, 864, 865, 866, 902, 994, 1001, 1002, 1005, 1008, 1009, 1019, 1021, 1029, 1040, 1044, 1045], "rather": [51, 64, 86, 113, 135, 138, 150, 182, 187, 214, 215, 228, 251, 286, 316, 317, 353, 354, 362, 367, 375, 377, 379, 381, 384, 385, 387, 391, 392, 393, 394, 411, 415, 416, 418, 419, 421, 451, 464, 466, 467, 470, 569, 585, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 633, 650, 651, 656, 657, 664, 665, 666, 667, 785, 818, 839, 841, 842, 871, 908, 909, 920, 925, 952, 999, 1001, 1002, 1005, 1007, 1008, 1012, 1025, 1036, 1037, 1038, 1039, 1043, 1044, 1045, 1046, 1051, 1052, 1054, 1055], "ratio": [2, 46, 86, 99, 105, 129, 184, 245, 247, 260, 264, 366, 379, 411, 413, 415, 418, 453, 459, 497, 498, 519, 545, 553, 554, 555, 635, 662, 714, 716, 720, 729, 734, 740, 743, 786, 787, 788, 791, 799, 831, 834, 854, 901, 973, 999, 1011, 1021, 1026, 1051, 1053], "ration": [2, 176, 266, 627, 1003], "rationalquadrat": [2, 176, 180, 421, 620], "raton": 1001, "raul": [1038, 1039], "rausch": [1044, 1045, 1048], "rauwuckl": 1048, "ravel": [2, 44, 53, 55, 57, 63, 77, 86, 87, 91, 111, 130, 136, 138, 143, 147, 153, 154, 155, 162, 171, 173, 175, 176, 177, 178, 187, 194, 204, 205, 207, 214, 227, 228, 235, 239, 241, 245, 247, 251, 255, 259, 261, 266, 275, 279, 281, 286, 292, 297, 298, 304, 305, 307, 308, 309, 310, 314, 315, 325, 329, 336, 342, 347, 348, 350, 351, 353, 359, 360, 468, 497, 498, 499, 635, 722, 991, 1005, 1052], "ravi": [1048, 1051], "raw": [2, 17, 43, 51, 52, 54, 72, 112, 123, 155, 176, 187, 192, 310, 319, 333, 355, 366, 374, 381, 387, 393, 409, 411, 413, 416, 419, 472, 477, 505, 506, 507, 563, 564, 565, 567, 586, 592, 593, 594, 595, 638, 681, 694, 698, 709, 790, 854, 912, 1002, 1005, 1009, 1011, 1012, 1015, 1018, 1037, 1041, 1044, 1047, 1053], "raw_coef_": [908, 909], "raw_covariance_": [413, 472, 477], "raw_data": 355, "raw_docu": [592, 595], "raw_location_": [413, 472, 477], "raw_model": 319, "raw_pixel_classifi": 310, "raw_support_": [472, 477], "raw_target_regr": 412, "raw_valu": [725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 1005, 1044, 1047], "raw_x": [419, 586], "raytheon": 51, "raz": 1050, "ra\u00fal": 1045, "rb": [47, 405], "rbf": [2, 44, 45, 46, 49, 50, 66, 67, 126, 156, 162, 171, 172, 173, 175, 176, 177, 178, 179, 180, 184, 192, 228, 240, 241, 247, 270, 272, 274, 277, 298, 336, 337, 339, 348, 371, 399, 412, 416, 418, 455, 465, 506, 508, 539, 545, 614, 615, 616, 617, 620, 622, 623, 624, 625, 627, 628, 635, 643, 644, 645, 646, 647, 680, 695, 769, 778, 780, 804, 815, 818, 824, 868, 888, 903, 904, 908, 910, 911, 912, 913, 914, 994, 997, 998, 1002, 1005, 1011, 1015, 1018, 1026, 1031, 1042, 1047], "rbf_featur": [645, 997], "rbf_kernel": [2, 407, 769, 1003, 1040, 1055], "rbf_svc": [336, 1020], "rbfsampler": [2, 246, 643, 644, 646, 997, 1040, 1050, 1051], "rbm": [2, 310, 864, 865, 866, 1010], "rbm_features_classifi": 310, "rc": [228, 383], "rceil": [408, 1011], "rcond": 130, "rcparam": [47, 241, 246, 319], "rcv1": [2, 372, 501, 1031, 1041], "rcwoolston": 1047, "rd": 419, "rd9e56ef97513": 2, "rda": 376, "rdbu": [67, 70, 121, 230, 307, 342, 347], "rdbu_r": [87, 113, 131, 342], "rdownload": 47, "rdylbu": [143, 358], "re": [43, 47, 53, 63, 64, 89, 102, 103, 135, 144, 174, 186, 187, 232, 248, 258, 262, 275, 277, 281, 322, 353, 355, 367, 379, 380, 387, 392, 394, 402, 409, 415, 419, 472, 473, 474, 475, 476, 477, 478, 479, 495, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 650, 656, 664, 666, 806, 821, 824, 916, 917, 918, 919, 1001, 1006, 1008, 1015, 1020, 1025, 1029, 1036, 1040, 1041, 1043, 1045, 1055], "reach": [94, 141, 145, 169, 177, 214, 216, 230, 232, 266, 274, 325, 342, 361, 384, 394, 397, 411, 416, 420, 453, 460, 512, 513, 597, 598, 631, 648, 649, 650, 651, 656, 657, 658, 659, 660, 664, 665, 666, 667, 670, 671, 672, 680, 681, 682, 683, 685, 686, 687, 688, 733, 734, 787, 801, 802, 865, 866, 905, 994, 1005, 1009, 1019, 1021, 1029, 1047, 1051, 1052, 1053], "reachability_": [98, 411, 453, 458, 459, 460], "reachabl": [2, 88, 98, 449, 453, 458, 459, 460, 854, 958], "react": 304, "reactiv": 385, "read": [47, 52, 55, 121, 234, 279, 321, 322, 323, 325, 327, 366, 373, 380, 381, 382, 383, 384, 386, 387, 391, 392, 393, 399, 405, 411, 422, 423, 424, 425, 428, 434, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 462, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 617, 618, 619, 620, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 948, 994, 1001, 1005, 1006, 1024, 1029, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1053, 1054], "read_byt": 47, "read_csv": [51, 384, 500, 1051], "read_csv_kwarg": [500, 1052], "read_parquet": 52, "readabl": [113, 273, 324, 384, 385, 387, 538, 1045, 1048, 1049, 1050, 1051], "reader": [45, 77, 324, 368, 379], "readi": [43, 46, 176, 215, 266, 374, 379, 383, 387, 467], "readili": [325, 416, 1021, 1029], "readm": [387, 419, 497], "readonli": [908, 909, 1049, 1051, 1052], "readonly_memmap": 1053, "readthedoc": 393, "real": [52, 67, 70, 88, 90, 102, 106, 109, 111, 112, 135, 150, 174, 187, 218, 238, 241, 251, 265, 266, 278, 287, 296, 299, 313, 314, 341, 346, 355, 366, 372, 373, 376, 383, 385, 388, 391, 392, 393, 408, 409, 411, 413, 415, 416, 418, 419, 472, 492, 493, 497, 498, 499, 500, 501, 504, 505, 508, 514, 555, 556, 559, 560, 561, 562, 563, 564, 568, 569, 596, 598, 599, 600, 601, 602, 603, 604, 635, 703, 708, 728, 732, 756, 759, 761, 789, 799, 833, 865, 866, 910, 911, 912, 913, 914, 917, 919, 995, 996, 997, 1002, 1005, 1007, 1009, 1010, 1011, 1021, 1023, 1026, 1031, 1036, 1049, 1053], "real_cov": [109, 110, 424, 473, 476, 477, 478, 479, 482, 483, 484], "real_data": 296, "realist": [43, 47, 274, 281, 282, 339, 374, 1005], "realiti": 375, "realiz": [214, 1029], "realli": [109, 189, 203, 383, 384, 385, 1005, 1011, 1029, 1050], "reappli": 418, "rearrang": [58, 59, 408], "reason": [43, 47, 51, 64, 77, 86, 102, 147, 150, 169, 187, 188, 192, 214, 215, 222, 232, 241, 245, 246, 248, 251, 266, 269, 272, 273, 278, 285, 289, 292, 313, 317, 346, 354, 355, 362, 366, 367, 368, 374, 378, 379, 380, 381, 383, 387, 391, 392, 393, 394, 410, 411, 412, 413, 416, 418, 419, 512, 536, 578, 642, 650, 656, 658, 676, 691, 696, 767, 804, 818, 852, 857, 864, 883, 905, 924, 926, 927, 994, 995, 1000, 1001, 1002, 1005, 1007, 1008, 1009, 1011, 1015, 1019, 1020, 1021, 1029, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "reassign": [83, 379, 450, 452, 1037, 1041], "reassignment_ratio": 452, "rebalanc": 393, "rebas": 383, "rebecca": 1043, "rebekah": [1044, 1045, 1046], "reboul": 1046, "rebuild": [366, 377, 405, 419, 445], "rebuilt": [68, 377, 848, 849], "rec": [57, 355, 374, 645], "rec_l1": 53, "rec_l2": 53, "rec_macro": 415, "recal": [2, 45, 62, 68, 102, 113, 126, 166, 184, 242, 251, 264, 266, 270, 289, 310, 331, 332, 379, 393, 410, 411, 508, 608, 704, 710, 711, 712, 716, 717, 731, 733, 734, 735, 786, 787, 788, 791, 792, 826, 834, 837, 869, 888, 892, 908, 1001, 1021, 1026, 1039, 1040, 1043, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "recalcul": [252, 254, 411, 1033, 1036], "recall_macro": [415, 1005], "recall_scor": [2, 62, 266, 279, 415, 712, 788, 1005, 1036, 1038, 1039, 1040, 1041, 1046, 1052], "recant": 394, "receiv": [0, 2, 57, 160, 184, 242, 248, 254, 264, 266, 267, 269, 274, 355, 362, 379, 381, 387, 393, 410, 415, 418, 508, 662, 706, 710, 712, 731, 786, 792, 793, 823, 834, 836, 837, 875, 913, 1006, 1009, 1010, 1019, 1026, 1046, 1047], "recent": [52, 248, 377, 384, 387, 393, 411, 471, 542, 569, 1019, 1029, 1039, 1048], "recht": [645, 997], "recip": [383, 405, 1002, 1029], "reciproc": [375, 1005], "reckon": 374, "recogn": [43, 44, 65, 84, 86, 116, 124, 167, 184, 215, 265, 296, 324, 331, 332, 385, 402, 411, 419, 506, 701, 717, 834, 913, 1005, 1026, 1053], "recognit": [42, 48, 54, 121, 184, 250, 310, 317, 372, 384, 416, 498, 506, 536, 538, 545, 701, 712, 717, 745, 773, 792, 793, 801, 818, 834, 888, 913, 997, 1001, 1005, 1006, 1010, 1020, 1022, 1026, 1031, 1036], "recommend": [116, 182, 231, 242, 248, 268, 281, 316, 323, 346, 366, 367, 373, 374, 377, 379, 381, 385, 387, 391, 397, 405, 414, 415, 416, 418, 420, 441, 450, 452, 454, 463, 500, 512, 539, 542, 548, 553, 565, 566, 573, 586, 587, 593, 610, 615, 635, 636, 642, 662, 663, 674, 680, 696, 701, 702, 704, 706, 810, 816, 818, 827, 864, 871, 873, 880, 887, 888, 893, 894, 896, 897, 898, 899, 901, 910, 913, 952, 993, 994, 1002, 1005, 1007, 1009, 1012, 1015, 1017, 1019, 1020, 1021, 1023, 1029, 1031, 1038, 1039, 1045, 1046, 1047, 1048, 1050, 1052], "recompil": [380, 385, 397], "recomput": [88, 89, 252, 254, 294, 321, 472, 477, 1001, 1017, 1041, 1052], "reconstruct": [2, 42, 55, 58, 99, 121, 122, 126, 184, 213, 237, 238, 325, 405, 416, 419, 485, 486, 487, 535, 537, 539, 541, 542, 543, 544, 546, 547, 549, 550, 552, 587, 591, 656, 676, 692, 693, 697, 900, 901, 1001, 1002, 1026, 1050], "reconstruct_from_patches_2d": [2, 124, 419, 587], "reconstruction_err_": [542, 544], "reconstruction_error": 692, "reconstruction_error_": 693, "record": [2, 50, 122, 139, 150, 189, 248, 266, 318, 355, 366, 379, 405, 411, 413, 453, 460, 502, 624, 647, 696, 775, 778, 782, 783, 784, 785, 831, 854, 1049, 1050], "recov": [75, 98, 113, 122, 123, 128, 144, 171, 186, 199, 213, 214, 218, 234, 285, 355, 413, 417, 420, 423, 463, 537, 563, 1001, 1002, 1004, 1025, 1042], "recoveri": [51, 113, 199, 213, 413, 420], "recreat": 252, "rect": [47, 85, 194], "rect_colorbar": 312, "rect_histi": 312, "rect_histx": 312, "rect_scatt": 312, "rectangl": 47, "rectangular": [374, 393, 952, 1025], "rectifi": [865, 866], "recurs": [2, 18, 52, 151, 160, 163, 166, 169, 184, 267, 270, 271, 277, 286, 296, 357, 381, 411, 415, 443, 444, 445, 448, 466, 506, 519, 567, 597, 598, 601, 606, 636, 637, 662, 823, 868, 878, 1005, 1008, 1011, 1012, 1021, 1026, 1027, 1031, 1036, 1046, 1047], "recursionerror": 1054, "red": [48, 49, 50, 63, 69, 70, 93, 111, 119, 121, 122, 123, 138, 155, 158, 180, 192, 194, 195, 204, 212, 239, 252, 267, 278, 305, 308, 313, 317, 318, 333, 342, 360, 377, 393, 411, 416, 1006], "reda": 1042, "redden": 1047, "reddi": [1043, 1044, 1045, 1050, 1053], "redefin": [58, 147, 187], "redesign": [391, 1036], "redirects_en": 55, "redirects_filenam": 55, "redirects_url": 55, "redistribut": 445, "redo": 354, "reduc": [2, 37, 43, 46, 77, 80, 81, 86, 103, 104, 109, 138, 147, 149, 150, 153, 166, 187, 194, 195, 199, 212, 218, 219, 222, 243, 245, 248, 251, 273, 279, 289, 301, 314, 317, 318, 326, 354, 355, 362, 371, 373, 376, 379, 385, 391, 393, 405, 409, 410, 411, 413, 415, 416, 418, 419, 420, 422, 447, 448, 453, 460, 463, 497, 538, 548, 553, 559, 560, 561, 562, 567, 568, 569, 570, 577, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 614, 631, 647, 656, 676, 677, 678, 679, 691, 696, 699, 785, 804, 807, 808, 810, 818, 827, 829, 830, 831, 832, 835, 877, 878, 885, 897, 900, 901, 908, 909, 916, 917, 918, 919, 994, 997, 999, 1000, 1001, 1002, 1005, 1008, 1017, 1018, 1020, 1022, 1036, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1050, 1052, 1054], "reduce_dim": [104, 253, 271, 412], "reduce_dim__k": 104, "reduce_dim__n_compon": [104, 271, 412], "reduce_func": [785, 1047], "reduced_data": 91, "reducer_label": 104, "reduct": [2, 11, 45, 57, 87, 90, 101, 105, 116, 121, 129, 138, 153, 184, 233, 235, 236, 239, 245, 249, 293, 300, 302, 325, 339, 362, 366, 371, 411, 412, 414, 416, 418, 420, 471, 485, 486, 487, 488, 506, 534, 536, 538, 539, 542, 543, 544, 545, 548, 551, 553, 557, 558, 561, 562, 563, 564, 568, 569, 570, 603, 611, 692, 693, 694, 695, 696, 697, 785, 804, 834, 850, 857, 864, 868, 869, 878, 888, 906, 908, 916, 917, 918, 919, 997, 1002, 1017, 1021, 1024, 1025, 1026, 1027, 1029, 1031, 1037, 1038, 1039, 1042, 1050, 1051, 1052], "redund": [62, 64, 131, 168, 258, 263, 328, 362, 375, 378, 379, 384, 393, 409, 519, 638, 1025, 1048], "redundantli": 393, "ref": [379, 387, 995, 1042], "ref_lin": 441, "refactor": [325, 431, 1036, 1038, 1039, 1040, 1046, 1049, 1050, 1051], "refer": [43, 44, 72, 73, 93, 96, 103, 111, 118, 135, 148, 150, 155, 169, 176, 180, 189, 201, 232, 248, 251, 266, 272, 277, 278, 279, 286, 295, 302, 312, 321, 322, 323, 324, 325, 326, 327, 328, 329, 354, 367, 373, 374, 376, 377, 379, 380, 381, 382, 384, 385, 386, 387, 391, 392, 393, 394, 397, 402, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 460, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 502, 507, 515, 517, 519, 520, 521, 522, 523, 524, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 548, 551, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 594, 597, 598, 599, 606, 611, 612, 614, 615, 618, 623, 626, 627, 631, 632, 635, 636, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 651, 653, 655, 657, 659, 660, 662, 665, 667, 669, 670, 671, 672, 675, 677, 679, 680, 682, 683, 686, 687, 692, 693, 694, 695, 696, 697, 698, 699, 700, 705, 708, 709, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 735, 738, 739, 740, 741, 742, 744, 745, 747, 760, 762, 763, 773, 787, 789, 790, 792, 793, 796, 797, 799, 801, 802, 804, 805, 806, 807, 808, 809, 810, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 839, 843, 844, 845, 847, 850, 853, 854, 855, 857, 864, 865, 866, 868, 873, 874, 875, 877, 878, 880, 881, 882, 884, 885, 886, 888, 889, 896, 901, 902, 903, 904, 905, 906, 908, 910, 911, 913, 914, 916, 917, 918, 919, 939, 946, 947, 952, 970, 994, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1028, 1036, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "referenc": [376, 379, 381, 387, 393, 900, 901, 1008, 1043, 1049], "references_": 885, "refin": [62, 113, 475, 713, 1005], "refit": [142, 160, 166, 168, 184, 264, 271, 273, 276, 279, 280, 284, 393, 410, 415, 421, 506, 571, 572, 631, 663, 669, 717, 804, 807, 808, 818, 826, 834, 913, 994, 1001, 1005, 1026, 1043, 1044, 1045, 1054], "refit_strategi": 270, "refit_time_": [804, 807, 808, 818, 1044], "reflect": [51, 75, 80, 81, 111, 119, 122, 144, 188, 189, 214, 232, 281, 296, 354, 375, 378, 379, 383, 393, 396, 408, 453, 459, 1002, 1005, 1011, 1013, 1037, 1045, 1054], "reformul": 378, "refrain": [215, 379], "refurbish": 7, "refus": [266, 391, 898, 899], "reg": [148, 187, 195, 248, 313, 322, 347, 418, 562, 564, 572, 654, 655, 657, 658, 659, 660, 661, 667, 668, 669, 674, 675, 682, 683, 693, 697, 919, 1001, 1041], "reg1": [158, 418], "reg2": [158, 418], "reg3": [158, 418], "reg_covar": [257, 801, 802], "reg_nnl": 209, "reg_ol": 209, "reg_param": [554, 1055], "regard": [0, 11, 44, 46, 50, 52, 86, 88, 103, 118, 126, 161, 171, 176, 188, 189, 203, 211, 216, 236, 247, 251, 274, 281, 282, 295, 354, 374, 379, 380, 384, 391, 393, 399, 405, 411, 416, 418, 419, 421, 446, 450, 455, 462, 465, 505, 618, 623, 660, 662, 705, 747, 802, 810, 826, 827, 832, 850, 851, 998, 1001, 1005, 1007, 1008, 1010, 1012, 1019, 1020, 1021, 1043, 1046], "regardless": [232, 273, 274, 275, 367, 379, 411, 539, 636, 637, 662, 708, 719, 1005, 1017, 1044, 1051, 1052], "regedit": 397, "regener": 873, "regex": [272, 355, 467, 469], "regexp": [592, 593, 595], "regim": [43, 393, 908, 909, 1004], "region": [51, 55, 59, 62, 71, 81, 82, 86, 89, 99, 124, 156, 178, 184, 187, 214, 232, 241, 245, 246, 263, 304, 315, 342, 349, 376, 386, 393, 411, 418, 421, 451, 453, 459, 465, 591, 1002, 1005, 1008, 1011, 1015, 1019, 1021, 1026], "region_1": 318, "region_2": 318, "regist": [2, 199, 353, 385, 974], "register_parallel_backend": [2, 1044, 1054], "registri": [377, 397, 1024], "regr": [210, 412, 558, 560, 569, 650, 651, 671, 841, 866, 909, 911, 914, 1020], "regr_1": [136, 359, 360], "regr_2": [136, 359, 360], "regr_3": 360, "regr_multirf": 154, "regr_rf": 154, "regress": [2, 14, 19, 22, 24, 31, 40, 46, 49, 53, 62, 64, 66, 87, 101, 103, 111, 112, 114, 118, 122, 123, 124, 131, 134, 135, 138, 140, 141, 142, 145, 146, 149, 150, 154, 155, 161, 167, 169, 170, 172, 180, 182, 183, 184, 186, 187, 188, 189, 190, 193, 196, 197, 199, 200, 202, 204, 208, 209, 211, 215, 217, 218, 219, 220, 223, 225, 230, 237, 240, 242, 250, 251, 252, 255, 266, 268, 280, 283, 285, 286, 287, 291, 293, 295, 303, 309, 310, 312, 313, 317, 323, 324, 325, 326, 328, 337, 338, 339, 349, 350, 353, 356, 357, 361, 367, 368, 371, 372, 374, 376, 379, 381, 384, 387, 388, 391, 392, 393, 406, 409, 413, 414, 415, 416, 418, 420, 434, 440, 467, 468, 477, 487, 492, 493, 496, 500, 505, 506, 508, 509, 516, 520, 521, 522, 528, 532, 535, 539, 541, 543, 545, 546, 547, 549, 550, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 574, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 610, 613, 614, 615, 618, 619, 626, 627, 629, 635, 636, 637, 638, 639, 641, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 698, 705, 710, 725, 727, 728, 732, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 789, 794, 795, 804, 807, 808, 810, 818, 827, 831, 832, 834, 835, 837, 839, 841, 842, 850, 851, 856, 858, 859, 865, 866, 868, 869, 872, 873, 875, 881, 882, 883, 885, 888, 889, 892, 897, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 922, 926, 928, 934, 937, 939, 956, 994, 995, 997, 1000, 1002, 1012, 1013, 1015, 1016, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "regression_data": 46, "regression_model": 1043, "regression_test": 387, "regressioncriterion": 1044, "regressionregressionramdomizedpcaramdom": 399, "regressor": [2, 30, 43, 107, 116, 148, 154, 155, 158, 171, 176, 183, 184, 187, 193, 195, 197, 199, 214, 215, 217, 220, 231, 232, 248, 275, 287, 297, 317, 322, 323, 366, 379, 381, 391, 393, 409, 412, 421, 434, 437, 438, 439, 468, 485, 486, 487, 488, 528, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 569, 570, 571, 572, 573, 574, 609, 610, 613, 615, 636, 637, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 682, 683, 705, 836, 837, 840, 841, 842, 851, 859, 864, 865, 866, 869, 875, 883, 888, 889, 909, 911, 914, 916, 917, 918, 919, 922, 926, 927, 928, 941, 944, 946, 994, 995, 1001, 1005, 1006, 1008, 1013, 1019, 1024, 1026, 1027, 1031, 1036, 1037, 1041, 1042, 1043, 1045, 1046, 1049, 1050, 1051, 1053, 1055], "regressor_": [187, 468, 597, 598, 601], "regressor__sample_weight": 214, "regressor_tag": [927, 941], "regressor_with_": 186, "regressor_without_": 186, "regressorchain": [2, 402, 839, 841, 1044, 1047, 1051], "regressormixin": [2, 248, 381, 393, 468, 928, 1047], "regressortag": [2, 927, 941], "regul": 0, "regular": [2, 62, 64, 67, 71, 75, 90, 91, 92, 93, 94, 103, 105, 110, 126, 134, 143, 145, 146, 148, 153, 160, 162, 171, 172, 173, 175, 178, 180, 182, 184, 186, 193, 194, 195, 197, 199, 201, 202, 203, 205, 209, 210, 212, 214, 221, 228, 230, 232, 247, 258, 264, 265, 268, 273, 274, 276, 297, 298, 306, 308, 309, 310, 314, 315, 316, 317, 318, 319, 336, 337, 339, 341, 342, 343, 346, 347, 353, 355, 357, 366, 379, 391, 392, 409, 411, 413, 414, 416, 417, 418, 421, 440, 446, 450, 474, 475, 479, 481, 482, 483, 484, 508, 516, 518, 519, 524, 526, 528, 532, 542, 543, 544, 547, 551, 552, 554, 563, 565, 566, 592, 593, 595, 642, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 693, 697, 739, 745, 754, 801, 802, 821, 827, 834, 835, 865, 866, 869, 888, 908, 909, 910, 911, 913, 914, 915, 994, 995, 997, 998, 999, 1000, 1002, 1004, 1010, 1011, 1015, 1018, 1019, 1020, 1026, 1027, 1029, 1031, 1036, 1037, 1038, 1040, 1041, 1045, 1046, 1048, 1049, 1054], "regularis": [218, 424, 476, 478], "regularli": [143, 289, 391, 1007], "regulatori": 150, "rehan": 1051, "rehman": 1044, "reiichiro": [1043, 1044], "reilli": 1053, "reimburs": 266, "reimplement": [385, 391, 393, 1042, 1046], "reinforc": 1025, "reinit": 387, "reiniti": 391, "reinstal": 397, "reintroduc": 1052, "reitsam": 1048, "reject": [249, 266, 393, 394, 527, 675, 731, 934, 935, 1001, 1005, 1044], "rel": [43, 45, 47, 55, 58, 64, 88, 94, 126, 142, 176, 190, 192, 195, 214, 232, 260, 285, 298, 299, 313, 322, 325, 342, 346, 353, 354, 374, 378, 381, 387, 393, 409, 411, 415, 418, 419, 421, 443, 446, 450, 452, 462, 525, 528, 535, 538, 541, 545, 549, 550, 561, 562, 563, 564, 568, 569, 570, 608, 653, 662, 663, 675, 676, 678, 694, 698, 733, 750, 751, 804, 807, 808, 810, 818, 827, 832, 835, 848, 849, 853, 865, 866, 877, 878, 888, 904, 908, 909, 910, 913, 915, 916, 917, 918, 919, 1001, 1002, 1005, 1007, 1008, 1009, 1011], "relabel": [378, 822, 823, 905], "relat": [8, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 373, 374, 375, 378, 379, 383, 384, 386, 387, 388, 391, 393, 394, 396, 402, 405, 410, 411, 412, 413, 414, 415, 416, 418, 421, 453, 467, 472, 500, 553, 554, 566, 567, 643, 677, 681, 696, 705, 727, 747, 825, 831, 866, 867, 869, 872, 873, 878, 881, 883, 884, 887, 896, 912, 994, 997, 999, 1005, 1006, 1008, 1009, 1012, 1015, 1020, 1021, 1022, 1025, 1026, 1028, 1031, 1036, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1052], "relate_point": 302, "relationship": [2, 43, 52, 58, 135, 136, 150, 177, 186, 187, 194, 199, 202, 214, 216, 217, 279, 286, 291, 313, 319, 328, 393, 411, 413, 415, 465, 500, 640, 718, 1002, 1005, 1007, 1008, 1012, 1013, 1041], "relative_tim": 260, "relax": [46, 411, 419, 456, 1018, 1043], "releas": [0, 54, 88, 103, 133, 139, 140, 142, 152, 169, 182, 183, 188, 189, 192, 214, 215, 216, 243, 248, 253, 254, 255, 266, 267, 284, 286, 294, 318, 334, 361, 367, 377, 379, 380, 382, 387, 391, 393, 419, 446, 449, 450, 467, 470, 493, 494, 500, 505, 506, 508, 516, 519, 525, 528, 542, 545, 565, 566, 568, 569, 571, 603, 606, 632, 634, 636, 638, 644, 650, 652, 656, 662, 673, 684, 692, 701, 705, 706, 721, 722, 736, 746, 752, 782, 792, 799, 803, 804, 805, 807, 808, 810, 818, 826, 827, 830, 831, 834, 850, 852, 869, 873, 878, 881, 882, 883, 887, 888, 889, 905, 906, 908, 913, 916, 917, 947, 1021, 1026, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "release_highlight": 1026, "relev": [46, 48, 57, 108, 112, 169, 184, 194, 208, 217, 272, 273, 279, 362, 366, 368, 374, 376, 378, 379, 381, 384, 385, 393, 394, 402, 413, 414, 420, 421, 440, 446, 447, 450, 452, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 537, 538, 545, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 594, 595, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 730, 744, 760, 803, 805, 806, 807, 808, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 886, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 1005, 1006, 1011, 1022, 1025, 1026, 1039, 1044, 1050], "reli": [126, 141, 144, 169, 190, 201, 203, 289, 292, 322, 326, 353, 366, 367, 381, 384, 387, 388, 391, 393, 407, 408, 411, 416, 418, 419, 553, 597, 601, 611, 612, 782, 832, 835, 873, 957, 970, 994, 997, 999, 1001, 1005, 1008, 1013, 1015, 1020, 1029, 1044, 1045, 1046, 1050, 1052, 1053], "reliabl": [2, 62, 64, 409, 415, 441, 442, 650, 1021, 1029], "relianc": [126, 218], "religion": [57, 273, 353, 354, 355, 374, 1006], "reloc": 1045, "relova": 1049, "relu": [865, 866], "remain": [47, 62, 64, 103, 135, 142, 146, 148, 168, 187, 214, 218, 230, 257, 270, 274, 278, 281, 408, 411, 412, 413, 415, 419, 449, 467, 470, 519, 520, 525, 532, 538, 574, 614, 615, 767, 773, 807, 808, 809, 812, 814, 843, 844, 845, 847, 956, 994, 995, 997, 1004, 1005, 1009, 1015, 1021, 1025, 1038, 1044, 1050, 1053], "remaind": [43, 144, 187, 203, 214, 216, 232, 251, 326, 357, 412, 467, 470, 1036, 1043, 1044, 1045, 1048, 1049, 1052, 1054], "remaining_column": 467, "remark": [88, 116, 169, 266, 368, 379, 1015], "remedi": 231, "rememb": [88, 381, 383, 384, 397, 419, 1008, 1012, 1021], "remi": 1043, "remind": [248, 394], "reminisc": 124, "remot": [192, 332, 379, 382], "remov": [1, 2, 44, 54, 55, 87, 88, 102, 107, 167, 169, 182, 183, 187, 190, 273, 312, 319, 321, 322, 323, 328, 353, 354, 357, 362, 371, 374, 378, 379, 380, 381, 383, 384, 388, 393, 397, 404, 411, 412, 415, 418, 419, 421, 422, 431, 445, 447, 448, 453, 460, 485, 486, 487, 488, 491, 492, 531, 538, 539, 542, 544, 545, 557, 571, 572, 573, 574, 583, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 615, 634, 648, 658, 659, 660, 662, 663, 677, 679, 683, 696, 713, 746, 782, 783, 784, 786, 804, 807, 808, 810, 818, 827, 832, 833, 835, 855, 867, 868, 872, 873, 885, 886, 888, 897, 905, 923, 932, 934, 935, 946, 947, 995, 1002, 1008, 1021, 1027, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "remove_zero_eig": [539, 1038, 1045], "rempfler": 1047, "renaissance0n": 1054, "renam": [148, 190, 262, 273, 321, 379, 383, 411, 450, 462, 467, 474, 475, 481, 531, 540, 557, 558, 559, 560, 561, 562, 567, 568, 569, 570, 782, 881, 932, 934, 935, 1036, 1037, 1038, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "rename_axi": 272, "render": [51, 63, 86, 103, 104, 140, 142, 151, 152, 155, 158, 166, 176, 187, 188, 189, 196, 209, 218, 242, 243, 244, 248, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 310, 318, 322, 323, 325, 326, 328, 333, 361, 379, 381, 383, 384, 385, 393, 555, 593, 635, 704, 706, 885, 897, 920, 922, 1004, 1021, 1049, 1053], "rene": 1049, "renni": [2, 843, 845, 1007, 1044], "renorm": 63, "rent": 43, "rental": [43, 52, 188, 1012], "reorder": [58, 127, 393, 701, 722, 1025, 1044], "reordered_data": 58, "reordered_row": 58, "reorgan": 1042, "rep": 376, "reparameter": 1020, "reparametr": 349, "repartit": 43, "repeat": [2, 49, 69, 99, 110, 112, 146, 169, 171, 177, 178, 188, 192, 216, 266, 267, 272, 273, 284, 289, 332, 354, 355, 381, 388, 393, 394, 408, 409, 411, 416, 419, 420, 592, 597, 611, 612, 619, 631, 638, 663, 809, 819, 820, 823, 940, 995, 1004, 1021, 1031, 1044, 1046], "repeatedkfold": [2, 187, 415, 809, 820, 1043], "repeatedli": [135, 325, 362, 393, 411, 418, 421, 512, 550, 670, 671, 680, 681, 682, 785, 995, 1009], "repeatedstratifiedkfold": [2, 272, 286, 289, 415, 819, 823, 1043, 1055], "repercuss": 317, "repetit": [272, 286, 289, 384, 415, 819, 820, 1013, 1050], "replac": [2, 43, 62, 111, 125, 135, 150, 171, 176, 178, 182, 188, 200, 215, 255, 275, 292, 314, 319, 323, 344, 377, 379, 383, 385, 388, 393, 405, 412, 415, 418, 419, 444, 448, 467, 507, 519, 559, 560, 567, 586, 592, 593, 594, 595, 611, 612, 631, 634, 638, 643, 645, 732, 789, 810, 816, 818, 827, 867, 868, 871, 891, 904, 905, 911, 924, 926, 973, 975, 978, 994, 995, 997, 1001, 1005, 1015, 1020, 1021, 1024, 1025, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055], "replai": [807, 808], "repli": [54, 353, 378, 379, 382], "replic": [272, 378, 381, 1031], "repo": [379, 383, 1025, 1028], "report": [0, 2, 43, 47, 52, 68, 102, 107, 166, 179, 201, 266, 270, 280, 286, 289, 321, 331, 362, 374, 378, 380, 381, 382, 385, 387, 391, 393, 397, 405, 411, 415, 615, 653, 662, 668, 689, 690, 704, 717, 733, 734, 742, 787, 788, 791, 837, 846, 865, 866, 903, 921, 946, 1001, 1008, 1013, 1024, 1025, 1028, 1037, 1040, 1043, 1044, 1046, 1047, 1049, 1051, 1052], "reporthook": 47, "repositori": [43, 47, 52, 192, 266, 327, 372, 374, 376, 377, 379, 381, 383, 387, 391, 394, 397, 508, 1024, 1028, 1031], "repr": [581, 1047, 1048, 1050], "repreat": 272, "repres": [43, 47, 49, 51, 52, 54, 58, 63, 68, 70, 79, 82, 83, 86, 121, 123, 129, 130, 142, 151, 187, 194, 206, 216, 218, 219, 223, 236, 238, 246, 251, 260, 265, 266, 269, 272, 275, 279, 297, 314, 346, 353, 355, 361, 368, 371, 374, 376, 381, 391, 392, 393, 394, 405, 409, 411, 415, 416, 417, 418, 419, 420, 441, 445, 449, 455, 466, 467, 473, 474, 475, 476, 477, 478, 479, 491, 493, 494, 496, 498, 500, 502, 504, 505, 506, 508, 509, 514, 531, 538, 540, 542, 544, 545, 551, 554, 559, 567, 585, 592, 595, 598, 633, 636, 638, 644, 680, 682, 701, 703, 705, 715, 734, 747, 793, 804, 806, 817, 818, 821, 824, 826, 831, 833, 834, 837, 838, 844, 850, 851, 852, 854, 855, 856, 858, 859, 860, 865, 866, 875, 881, 882, 905, 908, 909, 934, 935, 956, 995, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1016, 1018, 1019, 1021, 1042, 1044, 1047, 1048, 1051, 1054], "represent": [2, 43, 51, 55, 58, 63, 86, 103, 104, 121, 124, 140, 142, 151, 152, 153, 155, 158, 166, 176, 187, 189, 192, 196, 199, 234, 235, 236, 242, 244, 248, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 289, 302, 310, 318, 323, 325, 326, 328, 333, 354, 355, 361, 362, 371, 373, 382, 393, 405, 411, 412, 416, 417, 418, 425, 466, 535, 539, 541, 544, 546, 552, 570, 592, 594, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 647, 650, 656, 662, 663, 664, 666, 670, 671, 672, 680, 681, 682, 773, 801, 802, 810, 827, 864, 877, 881, 882, 886, 888, 901, 908, 920, 922, 925, 931, 948, 970, 997, 1002, 1004, 1006, 1008, 1009, 1010, 1012, 1015, 1020, 1025, 1036, 1037, 1040, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "reproduc": [44, 51, 93, 135, 187, 192, 201, 281, 289, 310, 367, 378, 379, 381, 382, 387, 391, 393, 411, 415, 416, 419, 423, 443, 457, 463, 472, 477, 491, 494, 496, 499, 501, 507, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 555, 557, 558, 559, 560, 563, 564, 565, 566, 567, 611, 612, 614, 615, 638, 643, 644, 645, 646, 650, 651, 654, 656, 657, 658, 664, 665, 666, 667, 670, 671, 672, 675, 680, 682, 683, 693, 694, 696, 697, 698, 797, 801, 802, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 832, 833, 834, 838, 839, 842, 853, 857, 864, 865, 866, 873, 885, 889, 897, 900, 901, 908, 909, 910, 913, 951, 952, 975, 978, 997, 1024, 1028, 1036, 1044, 1049, 1050], "reproduct": [391, 1001], "request": [2, 47, 55, 80, 214, 232, 248, 324, 367, 373, 377, 378, 382, 393, 394, 402, 405, 416, 419, 420, 440, 446, 447, 450, 452, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 537, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 585, 586, 592, 594, 595, 603, 604, 614, 615, 636, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 703, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 960, 961, 963, 1005, 1008, 1028, 1042, 1043, 1044, 1053, 1054], "request_rout": 248, "requir": [30, 31, 43, 46, 53, 62, 80, 86, 88, 90, 91, 100, 102, 118, 125, 127, 140, 141, 144, 145, 148, 150, 151, 155, 169, 188, 199, 203, 211, 214, 234, 236, 242, 245, 248, 251, 255, 266, 273, 281, 283, 286, 292, 294, 312, 317, 323, 324, 353, 354, 355, 373, 376, 377, 379, 380, 381, 385, 387, 391, 393, 394, 397, 398, 402, 405, 407, 411, 412, 413, 415, 416, 418, 419, 420, 422, 428, 434, 440, 441, 442, 447, 449, 453, 455, 460, 465, 467, 470, 472, 485, 486, 487, 500, 512, 525, 528, 539, 545, 553, 554, 555, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 576, 583, 584, 585, 606, 614, 615, 623, 631, 636, 637, 638, 647, 650, 651, 656, 657, 662, 663, 670, 671, 672, 675, 678, 679, 680, 681, 682, 690, 693, 695, 696, 697, 699, 703, 728, 733, 734, 751, 753, 756, 767, 787, 788, 791, 803, 804, 807, 808, 811, 813, 818, 826, 831, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 865, 868, 869, 870, 872, 882, 883, 884, 888, 896, 900, 901, 903, 904, 908, 909, 910, 913, 916, 917, 918, 919, 925, 927, 928, 934, 935, 941, 946, 947, 961, 964, 970, 990, 993, 994, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1019, 1020, 1021, 1025, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "requires_fit": [927, 988, 1055], "requires_i": [428, 434, 993, 1047], "requires_positive_x": [1046, 1051], "requires_vector_input": [616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "requisit": 381, "rerais": 1053, "rerun": [51, 63, 77, 103, 104, 140, 142, 151, 152, 155, 158, 166, 176, 187, 188, 189, 196, 242, 243, 244, 248, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 310, 318, 322, 323, 325, 326, 328, 333, 361, 387], "resampl": [2, 85, 147, 187, 232, 296, 388, 391, 393, 559, 560, 978, 1025, 1045, 1049], "resampled_arrai": 975, "rescal": [43, 80, 81, 88, 126, 196, 201, 237, 251, 312, 351, 413, 418, 423, 472, 473, 474, 475, 476, 477, 478, 479, 537, 542, 650, 653, 656, 880, 886, 910, 911, 912, 913, 914, 1005, 1015, 1040, 1041, 1055], "rescaled_coin": [80, 81], "rescu": [405, 419], "research": [0, 169, 186, 266, 272, 278, 289, 374, 376, 391, 411, 505, 517, 639, 649, 696, 739, 833, 838, 994, 1002, 1006, 1008, 1020, 1025, 1029], "resembl": [74, 218, 248], "reserv": [266, 318, 379, 565, 566, 1029], "reserva": 318, "reservoir": 973, "reservoir_sampl": 973, "reset": [255, 362, 387, 538, 680, 681, 682, 848, 849, 877, 878, 888, 993, 1038], "reset_n_cal": [848, 849], "reshama": [0, 364, 369, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1054], "reshap": [2, 43, 44, 45, 53, 61, 68, 80, 81, 83, 84, 86, 87, 91, 104, 111, 115, 121, 124, 130, 138, 143, 153, 162, 167, 171, 173, 174, 175, 176, 177, 178, 180, 194, 205, 211, 227, 228, 230, 231, 235, 237, 239, 241, 246, 250, 261, 270, 296, 298, 305, 307, 309, 310, 313, 314, 315, 319, 321, 324, 325, 327, 328, 336, 341, 342, 347, 350, 351, 391, 408, 416, 418, 419, 448, 468, 588, 635, 736, 834, 883, 887, 1001, 1015, 1021, 1041], "resid": 374, "residence_sinc": 266, "residenti": 155, "residu": [2, 107, 210, 216, 268, 434, 468, 485, 486, 487, 556, 558, 560, 562, 564, 566, 569, 572, 574, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 675, 676, 677, 678, 682, 683, 689, 690, 705, 748, 789, 841, 842, 851, 859, 866, 909, 911, 914, 917, 919, 1001, 1005, 1048, 1049, 1051], "residual_metr": 1042, "residual_threshold": [231, 675, 1001, 1049], "residual_vs_predict": [43, 52, 107, 268, 326, 705], "residues_": 1041, "resign": 394, "resili": 419, "resist": [111, 112, 379], "resiz": [45, 80, 81, 252, 374, 497, 498], "resolut": [43, 50, 55, 130, 188, 304, 305, 342, 394, 409, 1046], "resolv": [55, 378, 379, 383, 387, 394, 419, 449, 455, 465, 695, 699, 952, 995, 1005, 1043, 1045, 1046, 1049, 1054], "resort": [274, 374, 405, 559, 1046], "resourc": [55, 77, 147, 150, 182, 214, 309, 323, 365, 382, 391, 393, 410, 418, 807, 808, 994, 1006, 1025, 1029, 1031, 1044, 1049, 1050, 1055], "resourcewarn": 1039, "resp": [374, 418, 601, 801, 802, 1019, 1044], "respect": [64, 88, 100, 118, 126, 135, 139, 141, 143, 152, 179, 192, 194, 199, 203, 216, 228, 231, 234, 236, 242, 245, 247, 251, 262, 266, 281, 298, 299, 310, 317, 325, 339, 346, 361, 366, 367, 374, 375, 379, 409, 411, 414, 416, 418, 419, 421, 449, 467, 470, 473, 474, 475, 476, 477, 478, 479, 538, 544, 545, 551, 557, 565, 566, 601, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 632, 640, 647, 675, 694, 698, 716, 732, 786, 789, 801, 802, 844, 854, 865, 866, 920, 922, 993, 994, 998, 999, 1001, 1002, 1005, 1008, 1009, 1010, 1011, 1015, 1020, 1024, 1028, 1029, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "respond": [187, 379, 411], "respons": [0, 25, 169, 188, 210, 214, 217, 248, 282, 285, 353, 376, 379, 393, 411, 412, 418, 449, 467, 485, 486, 487, 571, 572, 635, 636, 637, 678, 679, 702, 704, 706, 746, 801, 802, 1006, 1012, 1053], "response_method": [48, 66, 70, 89, 137, 151, 156, 198, 206, 223, 228, 266, 275, 295, 300, 303, 317, 329, 338, 339, 341, 346, 358, 635, 636, 637, 702, 704, 706, 746, 803, 826, 1005, 1053, 1055], "rest": [2, 30, 62, 66, 144, 148, 184, 193, 199, 223, 229, 248, 251, 260, 289, 321, 335, 339, 350, 385, 393, 421, 516, 614, 635, 648, 662, 663, 680, 758, 792, 836, 837, 838, 857, 908, 910, 913, 1001, 1005, 1006, 1009, 1012, 1020, 1026, 1029, 1040, 1041, 1050, 1051, 1052, 1054], "restart": [90, 177, 382, 387, 450, 535, 541, 542, 547, 549, 550, 614, 615, 1002, 1049], "restor": [1039, 1044, 1045, 1046, 1047, 1051], "restrict": [2, 64, 99, 100, 105, 161, 182, 184, 204, 231, 306, 381, 385, 391, 409, 411, 418, 419, 468, 497, 506, 536, 585, 614, 657, 658, 659, 660, 662, 686, 687, 717, 786, 792, 793, 834, 856, 858, 859, 860, 862, 864, 865, 866, 868, 894, 1005, 1021, 1026, 1030, 1031, 1036, 1038, 1046, 1048, 1053], "restructuredtext": 379, "result": [0, 2, 27, 37, 43, 44, 45, 48, 52, 53, 57, 61, 62, 63, 66, 68, 70, 72, 75, 77, 78, 79, 80, 86, 87, 88, 93, 95, 99, 103, 105, 107, 112, 116, 121, 124, 126, 127, 131, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 154, 162, 168, 169, 171, 173, 175, 177, 179, 182, 187, 188, 189, 190, 195, 200, 202, 203, 204, 209, 215, 216, 218, 222, 228, 229, 232, 234, 235, 238, 241, 244, 246, 252, 257, 262, 263, 265, 266, 267, 270, 272, 273, 275, 278, 279, 280, 281, 283, 284, 286, 289, 292, 294, 298, 307, 308, 309, 312, 313, 314, 317, 321, 323, 325, 326, 327, 328, 329, 331, 334, 336, 342, 346, 347, 349, 353, 355, 359, 360, 361, 366, 367, 368, 373, 374, 376, 379, 381, 383, 384, 385, 387, 391, 392, 393, 394, 405, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 436, 443, 444, 446, 448, 449, 450, 453, 454, 455, 456, 457, 458, 460, 462, 465, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 492, 512, 513, 515, 517, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 583, 584, 585, 586, 588, 592, 593, 595, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 634, 635, 636, 638, 640, 644, 647, 656, 657, 662, 668, 669, 670, 671, 679, 680, 681, 682, 690, 693, 694, 695, 696, 697, 698, 699, 712, 714, 715, 716, 721, 729, 730, 732, 733, 734, 735, 736, 740, 741, 742, 758, 760, 761, 768, 775, 778, 782, 783, 784, 785, 787, 788, 789, 791, 797, 798, 801, 802, 804, 806, 807, 808, 809, 814, 818, 819, 820, 823, 824, 829, 835, 836, 837, 839, 840, 841, 842, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 872, 873, 881, 882, 885, 886, 889, 897, 901, 905, 908, 910, 913, 916, 917, 918, 919, 920, 921, 934, 935, 951, 952, 954, 959, 969, 970, 975, 978, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1024, 1025, 1028, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "results_df": [222, 272, 318], "results_for_preval": 275, "results_sc": 349, "retail": 1029, "retain": [2, 194, 393, 411, 414, 415, 419, 440, 446, 447, 450, 452, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 498, 537, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 699, 700, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 881, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 1018, 1036], "retbin": 1015, "retent": [596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607], "retrac": 248, "retract": 379, "retrain": [405, 1025, 1052, 1054], "retri": [189, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 1044, 1050, 1054, 1055], "retriev": [2, 116, 187, 218, 279, 354, 361, 383, 393, 416, 419, 420, 471, 500, 594, 597, 598, 630, 657, 667, 688, 703, 730, 734, 736, 737, 760, 785, 843, 847, 880, 906, 1001, 1003, 1005, 1007, 1024, 1025, 1041, 1046, 1048, 1050, 1053], "return": [2, 30, 43, 45, 46, 47, 49, 50, 52, 53, 55, 57, 61, 62, 64, 69, 70, 72, 75, 86, 89, 94, 102, 107, 119, 128, 130, 133, 135, 138, 140, 146, 147, 150, 151, 155, 169, 174, 177, 179, 183, 190, 194, 195, 201, 203, 206, 214, 215, 222, 223, 224, 232, 248, 251, 254, 255, 260, 262, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 279, 287, 292, 297, 302, 305, 310, 312, 314, 317, 321, 329, 338, 342, 353, 355, 357, 361, 366, 372, 373, 374, 379, 380, 381, 385, 386, 388, 391, 393, 409, 410, 411, 412, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 930, 931, 932, 934, 935, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 973, 974, 975, 976, 977, 978, 979, 985, 988, 989, 990, 991, 992, 993, 995, 1005, 1008, 1012, 1013, 1020, 1021, 1025, 1033, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "return_a": [589, 590, 970, 1039], "return_cent": [516, 1047], "return_cod": 550, "return_cost": [474, 475, 481], "return_count": [334, 354, 860], "return_cov": [393, 571, 572, 615, 868], "return_dist": [87, 466, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 1008, 1040], "return_distribut": [119, 527], "return_estim": [43, 187, 286, 328, 415, 831, 1044], "return_ind": 527, "return_indic": [415, 831, 1052], "return_inner_stat": 1050, "return_intercept": [691, 1045], "return_invers": [149, 381], "return_log": [848, 849], "return_model": [1038, 1040], "return_n_it": [423, 457, 462, 481, 549, 550, 650, 651, 656, 657, 664, 665, 666, 667, 685, 686, 687, 688, 689, 690, 691, 698, 1050], "return_norm": [895, 1043], "return_path": [686, 687, 689, 690], "return_std": [171, 176, 177, 178, 180, 194, 195, 393, 556, 571, 572, 615, 617, 618, 619, 620, 629, 631, 648, 649, 868, 1043, 1044, 1048, 1053], "return_sum_weight": 985, "return_tim": [274, 832, 1046], "return_train_scor": [141, 276, 286, 318, 415, 804, 807, 808, 818, 831, 1042, 1043, 1045], "return_x_i": [44, 46, 54, 91, 102, 103, 104, 105, 121, 141, 144, 158, 160, 161, 165, 182, 183, 189, 190, 192, 201, 202, 203, 205, 210, 211, 221, 229, 230, 242, 250, 251, 254, 255, 268, 271, 274, 279, 280, 289, 291, 294, 301, 308, 309, 310, 317, 321, 323, 325, 326, 327, 328, 334, 345, 355, 357, 372, 384, 385, 392, 405, 411, 412, 415, 418, 420, 423, 431, 449, 491, 492, 493, 494, 496, 498, 499, 500, 501, 504, 505, 506, 508, 509, 514, 536, 537, 538, 539, 562, 565, 566, 571, 572, 596, 599, 600, 602, 603, 604, 605, 606, 614, 623, 624, 626, 627, 642, 643, 662, 663, 672, 677, 678, 679, 692, 693, 694, 695, 697, 699, 705, 715, 792, 807, 808, 810, 836, 841, 852, 857, 860, 917, 918, 919, 995, 1000, 1005, 1006, 1007, 1008, 1015, 1033, 1042, 1044, 1046, 1049], "return_x_mean": 423, "reuben": 1036, "reus": [52, 171, 207, 266, 273, 321, 355, 381, 393, 411, 412, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 638, 650, 652, 653, 656, 662, 664, 666, 670, 671, 672, 673, 680, 681, 682, 684, 865, 866, 1013, 1017, 1029, 1043, 1053], "reuter": [366, 374], "reuters21578": 47, "reuterspars": 47, "rev": [379, 611, 612], "revamp": [381, 1046], "reveal": [43, 52, 187, 189, 353, 385, 408, 1002, 1052], "revers": [107, 169, 219, 272, 538, 545, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 615, 793, 868, 1005, 1036, 1037, 1046, 1048, 1052], "revert": [122, 407, 634, 636, 637, 1043, 1048, 1053], "review": [289, 318, 366, 374, 381, 382, 384, 385, 391, 394, 415, 416, 539, 545, 1005, 1015], "revillet": 1036, "revis": [394, 674], "revisit": [411, 422, 447], "revolv": 1002, "reward": 379, "reweight": [135, 354, 393, 413, 418, 594, 595, 652, 673, 684], "reweight_covari": [472, 477], "rewrit": [385, 391, 1021, 1036], "rewritten": [379, 653, 1038, 1040], "rey": 1051, "reza": 1046, "rezazadeh": 1049, "rf": [140, 141, 154, 157, 158, 189, 321, 362, 418, 571, 573, 574], "rf_123": 362, "rf__n_estim": 418, "rf_appli": 140, "rf_applyfunctiontransform": 140, "rf_cst": 328, "rf_inst": 362, "rf_leaves_yield": 140, "rf_model": 140, "rf_no_cst": 328, "rf_pipelin": 155, "rfc": [64, 254, 321, 1033], "rfc_disp": [254, 321, 1033], "rfe": [2, 167, 168, 402, 420, 598, 601, 606, 1036, 1040, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055], "rfecv": [2, 168, 402, 420, 597, 601, 606, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055], "rfrandomforestregressor": 158, "rgb": [374, 419, 497, 498, 587, 588, 591], "rgr_lasso": 53, "rgr_ridg": 53, "rhinehart": 1043, "rho": [225, 416, 681, 1001, 1019, 1037], "rho_k": 417, "ri": [411, 709, 790], "ribeiro": [594, 734, 1049], "ricardo": [1039, 1049, 1050, 1053], "ricardojnf": 1049, "riccadonna": 747, "riccardo": [1047, 1053], "rice": [50, 305, 374, 502, 1049], "rich": [85, 150, 387, 391, 411, 442, 1029, 1047, 1050], "richard": [374, 420, 662, 1037, 1046, 1048, 1050, 1051, 1054], "richardscottoz": 1049, "richer": [85, 130, 411], "richi": 1044, "rick": 1047, "ricker": 130, "ricker_funct": 130, "ricker_matrix": 130, "rickiepark": 1043, "rid": [48, 1019], "riddel": [1039, 1041, 1043], "ridg": [2, 24, 44, 49, 53, 87, 107, 122, 123, 138, 155, 160, 169, 170, 176, 177, 178, 182, 184, 186, 187, 188, 193, 194, 199, 204, 207, 210, 214, 215, 240, 250, 285, 313, 348, 349, 353, 366, 391, 407, 416, 418, 421, 528, 539, 543, 547, 615, 619, 626, 629, 647, 648, 649, 651, 653, 661, 665, 677, 678, 679, 682, 691, 705, 754, 804, 810, 818, 841, 914, 1005, 1006, 1013, 1015, 1019, 1020, 1026, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1049, 1050, 1051, 1052, 1054], "ridge_alpha": [543, 547, 1043], "ridge_cv": 107, "ridge_cv_with_trans_target": 107, "ridge_glm": 214, "ridge_regress": [2, 1044, 1045, 1051], "ridgeclassifi": [2, 353, 366, 676, 677, 679, 1001, 1006, 1041, 1045, 1049, 1050, 1051, 1054], "ridgeclassifiercv": [2, 402, 677, 678, 792, 1001, 1005, 1006, 1044, 1046, 1047, 1049, 1050, 1054, 1055], "ridgecv": [2, 43, 107, 155, 169, 187, 250, 393, 402, 418, 572, 647, 676, 679, 1001, 1006, 1036, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1055], "ridgecvridgecv": [155, 187], "ridgeridg": 187, "ridgewai": [146, 418], "riedmann": 1048, "ries": 1050, "rifkin": 1001, "right": [45, 46, 50, 51, 53, 54, 67, 70, 74, 77, 78, 79, 84, 86, 93, 95, 97, 110, 111, 113, 118, 119, 123, 124, 126, 128, 130, 135, 137, 138, 139, 147, 148, 149, 150, 157, 165, 171, 174, 183, 190, 202, 204, 215, 216, 217, 218, 220, 221, 224, 225, 241, 244, 245, 257, 259, 260, 262, 263, 266, 267, 268, 272, 275, 279, 282, 283, 285, 286, 297, 305, 307, 310, 312, 314, 317, 327, 328, 332, 342, 344, 346, 349, 351, 353, 358, 361, 362, 379, 381, 387, 391, 392, 394, 408, 410, 411, 414, 416, 417, 418, 421, 467, 485, 486, 487, 488, 538, 545, 548, 561, 562, 563, 564, 565, 566, 568, 569, 570, 591, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 639, 680, 682, 873, 916, 917, 918, 919, 920, 938, 952, 994, 997, 999, 1001, 1003, 1005, 1007, 1008, 1012, 1017, 1019, 1020, 1021, 1025, 1029, 1031, 1038, 1044, 1050, 1052, 1053, 1055], "right_impur": [561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919], "rightarrow": [421, 623, 1009], "rijn": [373, 1044], "rileran": 1050, "rio": [1046, 1048, 1049, 1050], "ripe": 318, "rise": 176, "rishabh": 1050, "rishi": 1048, "rishikesh": 1043, "risk": [16, 48, 88, 150, 214, 218, 232, 313, 349, 362, 378, 379, 393, 405, 410, 415, 418, 571, 572, 893, 894, 896, 897, 898, 899, 1001, 1005, 1029, 1043], "riski": 232, "riskiest": [214, 232], "ritchi": 1047, "rithvik": 1048, "ritter": [1050, 1051], "ritual": 353, "rival": [43, 905, 1018], "rk": 98, "rkf": [415, 819], "rl2007": 1001, "rlm": 1046, "rm": [111, 174, 383, 387, 413], "rmse": [43, 52, 112, 150, 318, 1005, 1047], "rmse_": 318, "rmse_test_mean": 318, "rmse_test_scor": 318, "rmse_test_std": 318, "rmse_train_mean": 318, "rmse_train_scor": 318, "rmse_train_std": 318, "rmsle": 1005, "rmtree": [87, 104, 412], "rna": 391, "rnd": 313, "rng": [44, 58, 59, 67, 70, 72, 79, 83, 95, 112, 116, 121, 123, 128, 136, 147, 150, 151, 152, 154, 171, 172, 175, 177, 178, 180, 182, 183, 186, 189, 194, 195, 196, 197, 199, 203, 208, 215, 216, 221, 228, 241, 247, 248, 250, 257, 267, 275, 278, 283, 284, 304, 307, 316, 319, 322, 323, 325, 327, 328, 331, 332, 336, 345, 359, 360, 362, 367, 381, 384, 402, 424, 473, 477, 478, 479, 481, 482, 483, 484, 647, 653, 674, 676, 682, 691, 816, 843, 844, 845, 847, 848, 849, 853, 856, 858, 859, 860, 885, 897, 900, 901, 903, 904, 905, 914], "ro": 63, "road": 391, "rob": [1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1048, 1051], "robert": [0, 169, 201, 289, 376, 401, 416, 532, 539, 632, 660, 725, 727, 728, 739, 874, 995, 1001, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1051, 1054], "roberto": [411, 445, 1054], "robertson": 1049, "robin": [182, 183, 631, 995, 1042, 1045, 1050, 1051], "robinson": 1049, "robl": 1043, "robson": 1046, "robust": [2, 48, 70, 94, 96, 108, 110, 145, 147, 169, 183, 184, 187, 188, 193, 204, 216, 218, 231, 241, 251, 287, 312, 327, 368, 376, 387, 411, 418, 419, 449, 451, 472, 473, 476, 477, 478, 479, 528, 538, 563, 564, 653, 661, 674, 675, 682, 683, 754, 838, 869, 883, 885, 886, 897, 903, 950, 1005, 1009, 1011, 1015, 1018, 1019, 1024, 1026, 1027, 1029, 1030, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1052], "robust_contour": 111, "robust_cov": 111, "robust_mah": 111, "robust_scal": [2, 886, 897, 1044], "robustli": [8, 217], "robustscal": [2, 251, 885, 898, 995, 1015, 1041, 1042, 1044, 1046, 1047, 1048, 1052], "roc": [2, 50, 62, 140, 169, 184, 240, 242, 251, 252, 264, 266, 267, 274, 328, 329, 386, 409, 410, 415, 508, 514, 568, 662, 706, 710, 711, 712, 731, 786, 792, 793, 823, 834, 837, 875, 913, 1011, 1026, 1033, 1038, 1039, 1041, 1042, 1046, 1048, 1052], "roc_auc": [50, 169, 272, 276, 281, 282, 386, 638, 706, 737, 1005, 1033], "roc_auc_ovo": [1005, 1046], "roc_auc_ovo_weight": [1005, 1046], "roc_auc_ovr": [1005, 1046], "roc_auc_ovr_weight": [1005, 1046], "roc_auc_scor": [2, 62, 169, 272, 281, 321, 328, 706, 710, 711, 712, 793, 1005, 1038, 1039, 1044, 1046, 1050, 1051, 1055], "roc_curv": [2, 50, 242, 269, 281, 706, 710, 731, 786, 792, 1005, 1036, 1037, 1038, 1041, 1042, 1044, 1049, 1052, 1054], "roc_displai": 242, "rocchio": [353, 855], "rocco": [1049, 1050, 1051], "roccurvedisplai": [2, 140, 251, 254, 266, 269, 281, 282, 321, 386, 792, 793, 1011, 1033, 1046, 1052, 1053, 1054], "rock": 112, "rocklin": [378, 384], "roddi": [1045, 1046], "rodent": [50, 305, 374, 502], "roderick": 995, "rodion": 1049, "rodrigo": [1044, 1054], "rodrigu": [1043, 1044, 1049], "rodr\u00edguez": 318, "roeder": 1046, "roehr": [1052, 1053], "roei": 1048, "roeschk": 1045, "roger": [727, 1043, 1044, 1048], "rogerstanimoto": [453, 460, 703, 782, 783, 784, 1008], "rogerstanimotodist": 703, "rohan": [1041, 1042, 1044, 1045, 1049], "rohit": [1039, 1040, 1044, 1045], "roi": [1036, 1050], "roi_siz": 87, "roic": 1051, "rok": 1046, "rokem": [1036, 1042], "rokhlin": [539, 545, 952], "roland": [1038, 1039], "rolando": [1037, 1038], "role": [0, 281, 366, 378, 416], "roll": [2, 100, 184, 233, 234, 239, 382, 411, 534, 696, 697, 946, 1026, 1029, 1046, 1051], "rolling_max": 52, "rolling_mean": 52, "rolling_min": 52, "romain": [1043, 1048], "roman": [0, 400, 631, 922, 1038, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "roman4oo": 1051, "romaniuk": 1040, "romero": 1054, "romijnd": 1048, "romuald": 1045, "ron": [0, 401, 1036], "ronald": [374, 1009, 1039, 1049], "ronan": [1036, 1039, 1044], "ronchetti": [653, 1001], "rong": 1020, "ronrubin": [668, 689, 690, 1001], "ronsin": [1044, 1045, 1053], "room": [312, 374, 384, 411, 1028], "roopam": [1044, 1045], "root": [2, 43, 111, 150, 169, 196, 361, 376, 379, 387, 411, 445, 505, 545, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 643, 794, 795, 916, 917, 918, 919, 920, 922, 1005, 1011, 1021, 1038, 1044, 1045, 1046, 1047, 1050, 1051, 1055], "root_": 445, "root_mean_squared_error": [2, 52, 150, 407, 1005, 1053, 1055], "root_mean_squared_log_error": [2, 407, 1005, 1053, 1055], "rope": 272, "rope_interv": 272, "rope_prob": 272, "rori": 1047, "rosa": 1051, "rosal": 415, "rosati": 1054, "rose": 374, "rosenberg": [411, 721, 741, 799], "rosenfeld": 1044, "ross": [538, 611, 612, 1021, 1050, 1051], "rosset": [135, 418, 523, 557], "rossi": 1039, "rosslimlinyang_ijcv": 538, "rostamizadeh": 994, "rostomyan": 1044, "rotat": [47, 75, 115, 120, 123, 126, 128, 146, 157, 184, 190, 237, 283, 284, 291, 342, 348, 414, 416, 421, 423, 508, 536, 545, 554, 618, 701, 888, 920, 1001, 1026, 1047, 1048], "rotation_mod": 283, "rotations_": 554, "roth": [1041, 1044, 1051], "rough": [25, 399, 1011], "roughli": [135, 147, 203, 263, 282, 292, 317, 366, 393, 416, 419, 523, 1002, 1036], "rouli": 1039, "round": [46, 48, 62, 115, 141, 150, 182, 183, 221, 232, 272, 278, 314, 316, 353, 393, 453, 459, 460, 568, 569, 597, 598, 601, 631, 696, 717, 806, 816, 873, 905, 920, 922, 995, 1009, 1021, 1038, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1052, 1053], "rounded_list": 816, "rouseeuw1984": 477, "rousseeuw": [111, 112, 411, 413, 472, 477, 796, 797, 1011], "rousseuw": [111, 112], "rout": [2, 61, 133, 184, 196, 240, 266, 329, 425, 428, 431, 434, 435, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 961, 962, 963, 964, 988, 1026, 1031, 1050, 1052], "route_param": [248, 961], "routed_param": [248, 964], "routemappingpair": 961, "router": [2, 248, 393, 402, 961, 962, 963, 964], "routerconsumerclassifi": 248, "routerconsumerclassifierifittedrouterconsumerclassifi": 248, "routin": [328, 368, 373, 376, 379, 380, 381, 382, 387, 391, 393, 420, 676, 678, 691, 851, 910, 911, 912, 913, 914, 1002, 1008, 1015, 1016, 1019, 1029, 1036, 1050, 1051, 1052], "routing_info": 961, "routlei": 1042, "rouvinen": 1041, "roux": [662, 1001, 1018], "row": [2, 43, 57, 58, 59, 62, 64, 70, 79, 93, 107, 118, 119, 141, 143, 153, 156, 182, 214, 215, 216, 242, 245, 251, 252, 266, 314, 361, 366, 374, 381, 388, 392, 393, 408, 411, 414, 419, 426, 445, 446, 450, 452, 453, 454, 456, 459, 460, 462, 467, 471, 491, 493, 494, 496, 497, 498, 499, 504, 505, 506, 508, 509, 514, 515, 517, 530, 538, 546, 552, 555, 594, 595, 624, 632, 636, 647, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 696, 700, 701, 714, 722, 723, 729, 762, 763, 767, 770, 772, 773, 774, 775, 777, 778, 780, 782, 783, 784, 785, 801, 802, 837, 843, 844, 845, 846, 847, 853, 856, 857, 858, 859, 860, 863, 874, 878, 880, 881, 883, 893, 894, 895, 898, 899, 902, 906, 925, 930, 934, 935, 952, 975, 978, 982, 984, 986, 987, 990, 991, 994, 995, 997, 999, 1001, 1003, 1005, 1006, 1008, 1015, 1016, 1019, 1020, 1025, 1043, 1044, 1045, 1046, 1051], "row_compl": 57, "row_id_attribut": 373, "row_idx": [59, 214], "row_idx_shuffl": 58, "row_ind": [426, 454, 456], "row_indic": 150, "row_labels_": [57, 58, 59, 408, 454, 456], "row_norm": 260, "rowan": 1051, "rowei": [693, 697, 857, 1002, 1008], "rows_": [57, 408, 426, 454, 456], "royal": [545, 631, 884, 896, 1019], "rp": 245, "rpath": 377, "rr2007": 997, "rragundez": 1044, "rsalakhu": 648, "rsh": [284, 323], "rskf": 820, "rsme": 1005, "rsnegrin": 1050, "rsplit": [45, 55, 273], "rst": [367, 379, 387, 1036], "rstride": 188, "rt": 140, "rt_model": 140, "rtn": 51, "rtol": [381, 848, 849, 853], "ruben": 1051, "rubi": 1048, "rubia": 1039, "rubial": 1049, "rubin": 995, "rubinstein": [668, 689, 690], "rubric": 1002, "ruchitagard": 1046, "rudi": 1042, "rudresh": 1051, "ruff": [379, 397, 404], "ruifeng": [1042, 1043, 1048], "ruin": 379, "ruiter": 1051, "rule": [2, 13, 27, 43, 64, 141, 192, 266, 358, 361, 362, 366, 376, 379, 380, 381, 391, 393, 394, 406, 409, 410, 411, 415, 416, 418, 420, 540, 553, 554, 555, 556, 557, 565, 566, 573, 574, 598, 606, 638, 649, 662, 663, 670, 671, 672, 677, 679, 680, 681, 682, 710, 711, 715, 804, 807, 808, 810, 818, 826, 827, 830, 831, 832, 833, 835, 857, 908, 921, 994, 999, 1007, 1008, 1019, 1021, 1025, 1031, 1038, 1041, 1048, 1053], "ruleset": 1021, "rumelhart": 1009, "rumsfeld": [45, 374], "run": [43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 377, 379, 380, 381, 383, 384, 385, 386, 387, 391, 393, 394, 397, 398, 405, 407, 411, 413, 415, 418, 421, 422, 423, 440, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 465, 467, 470, 471, 474, 475, 535, 536, 537, 538, 539, 541, 543, 545, 546, 547, 549, 550, 552, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 586, 596, 598, 599, 600, 602, 603, 604, 606, 614, 615, 634, 638, 644, 650, 651, 653, 655, 656, 657, 659, 660, 664, 665, 666, 667, 686, 687, 692, 693, 694, 695, 696, 697, 698, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 840, 841, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 865, 866, 867, 870, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 925, 927, 946, 947, 975, 978, 994, 1004, 1006, 1009, 1018, 1020, 1021, 1024, 1025, 1029, 1036, 1039, 1041, 1043, 1044, 1045, 1046, 1050, 1051, 1052, 1055], "run_histori": 47, "run_id": 94, "run_tim": [229, 230], "rung": 1015, "runnabl": [54, 383, 384], "runtim": [30, 47, 49, 91, 135, 200, 229, 231, 246, 310, 314, 367, 381, 382, 391, 393, 405, 411, 418, 453, 567, 683, 818, 908, 909, 910, 911, 912, 913, 914, 1019, 1020, 1039, 1043, 1044, 1050, 1051, 1053, 1054, 1055], "runtime_histori": 47, "runtimewarn": 180, "runxfail": 387, "rupesh": 1039, "rush": [43, 52, 379], "rushabh": 1047, "rushil": [1051, 1052], "russ": [632, 995], "russel": [1042, 1043], "russellrao": [453, 460, 703, 782, 783, 784, 1008], "russellraodist": 703, "russian": 419, "ruth": 1046, "rutter": 1049, "ruusmann": 1042, "rv": [0, 808, 816, 818, 994, 1036, 1037, 1040, 1041, 1042, 1043, 1044], "rv_discrete_frozen": 284, "rvd": [472, 477], "rvdriessen": [472, 477], "rw2006": [421, 614, 615], "rwelsch427": 1054, "ryad": 1042, "ryan": [1039, 1042, 1044, 1045], "ryb": 358, "ryder": 51, "ryotaro": 1048, "r\u00e9my": 1042, "r\u00fcdiger": [1044, 1045, 1047], "s1": [122, 169, 179, 201, 203, 376], "s2": [122, 169, 179, 201, 203, 376, 554], "s22": 502, "s3": [57, 122, 169, 201, 203, 376], "s4": [169, 201, 203, 376], "s5": [169, 201, 203, 376, 1013], "s6": [169, 201, 203, 376], "s_": [122, 276, 1001, 1002, 1013, 1015], "s__p": 868, "s_color": 234, "s_hessian": 234, "s_i": [411, 1001, 1015], "s_ica_": 123, "s_isomap": 234, "s_j": 411, "s_ltsa": 234, "s_mod": 234, "s_pca_": 123, "s_point": 234, "s_scale": 234, "s_spectral": 234, "s_standard": 234, "s_t_sne": 234, "sa": [374, 496], "saaba": 1041, "saad": 1054, "sabharw": 1046, "sabri": 1051, "sach": 51, "sachdev": 1051, "sachdeva": 1043, "sachin": [1043, 1044, 1050], "sackei": 1046, "saclai": 0, "sacr": 1024, "sad": [822, 823], "sadak": 1048, "sadhana": 1044, "sadli": 147, "sadra": 1052, "sad\u0142ocha": 1049, "saeed": 1005, "saeger": [1041, 1042, 1043], "safari": 1015, "safe": [2, 72, 187, 203, 266, 354, 379, 381, 411, 412, 436, 468, 512, 513, 571, 572, 597, 601, 778, 782, 832, 833, 835, 867, 902, 970, 976, 1008, 1042, 1043, 1044, 1049, 1050], "safe_copi": 1043, "safe_index": [388, 1046], "safe_mask": [2, 388], "safe_realloc": 1039, "safe_sparse_dot": [2, 388, 1046], "safe_sqr": [2, 388], "safeguard": 405, "safer": [354, 362, 377, 411, 415, 1036], "safest": [214, 232, 362, 373], "safeti": [102, 391, 412, 970, 1025, 1046], "safikh": 1051, "safiuddin": 1051, "sag": [206, 221, 662, 663, 676, 678, 691, 1001, 1019, 1041, 1042, 1043, 1045, 1046], "sag_solv": 1045, "saga": [66, 205, 229, 230, 662, 663, 676, 678, 691, 818, 1001, 1043, 1045], "sagar": 1046, "sagnik": 1044, "saha": 1050, "sahil": 1052, "sahin": 1046, "sahu": 1048, "sai": [200, 241, 349, 353, 354, 379, 409, 411, 412, 416, 418, 419, 449, 450, 504, 508, 514, 681, 994, 1011, 1018, 1029, 1053, 1054], "said": [150, 187, 241, 273, 374, 379, 796, 1003, 1011], "saihttam": 1042, "sailesh": [1043, 1044], "saint": 1042, "saito": [416, 542, 544, 551, 1043], "saiw": 1042, "sake": [43, 64, 147, 150, 183, 187, 214, 317, 346, 353, 355, 387, 391, 674], "saket": [1040, 1041, 1048], "sakinaouisrani": 1050, "salahuddin": 1051, "salakhutdinov": [648, 857, 1008], "salamin": 1040, "sale": [144, 251, 272, 1005, 1029], "saleem": 1046, "salerno": 376, "salim": [1053, 1054], "sallisaw": [412, 469], "salman": [0, 400, 1051, 1052, 1053, 1054, 1055], "salt": [67, 246, 314, 1050], "salvator": [1036, 1050, 1051, 1053, 1054], "salz": 1043, "salzmann": [214, 232], "sam": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "sambhav": 1047, "same": [2, 25, 43, 46, 47, 52, 58, 63, 70, 72, 75, 79, 86, 88, 90, 91, 97, 102, 103, 104, 119, 121, 123, 126, 128, 130, 136, 138, 142, 144, 147, 148, 150, 153, 169, 171, 187, 188, 190, 200, 201, 203, 208, 214, 215, 216, 222, 232, 248, 252, 262, 266, 267, 268, 269, 270, 272, 273, 275, 277, 278, 280, 285, 286, 292, 295, 297, 309, 312, 313, 315, 317, 318, 321, 323, 334, 342, 353, 354, 355, 361, 362, 366, 367, 368, 373, 374, 376, 378, 379, 381, 383, 385, 387, 388, 391, 392, 393, 394, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 432, 436, 441, 442, 449, 453, 459, 468, 472, 473, 474, 475, 476, 477, 478, 479, 481, 497, 499, 500, 502, 508, 512, 513, 535, 536, 539, 540, 541, 542, 543, 544, 547, 551, 553, 555, 556, 557, 558, 561, 563, 564, 565, 566, 568, 569, 571, 572, 593, 594, 606, 607, 610, 614, 615, 617, 626, 631, 632, 633, 636, 637, 650, 653, 656, 657, 659, 662, 663, 667, 670, 671, 672, 676, 677, 678, 679, 680, 681, 682, 688, 691, 703, 708, 709, 716, 717, 719, 721, 730, 735, 736, 740, 759, 760, 761, 782, 783, 784, 790, 792, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 812, 813, 818, 822, 823, 826, 827, 829, 830, 831, 832, 833, 834, 835, 850, 851, 852, 856, 858, 859, 860, 871, 872, 873, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 890, 897, 908, 909, 916, 918, 929, 936, 940, 952, 970, 975, 978, 979, 989, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1024, 1025, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "same_kind": 1053, "samesh": [1046, 1047], "samm": [135, 418, 557, 1052, 1053], "samoocha": 1044, "sampl": [2, 27, 30, 37, 43, 44, 47, 50, 53, 61, 62, 63, 64, 68, 69, 70, 72, 74, 76, 77, 78, 80, 82, 86, 89, 90, 91, 92, 93, 98, 111, 112, 113, 116, 118, 119, 121, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 150, 151, 156, 157, 158, 166, 168, 169, 171, 175, 176, 177, 178, 180, 182, 184, 187, 188, 192, 193, 199, 200, 201, 203, 214, 216, 218, 221, 222, 224, 225, 226, 228, 230, 231, 232, 234, 241, 245, 246, 248, 249, 251, 257, 258, 260, 261, 262, 263, 264, 266, 267, 271, 272, 274, 275, 276, 278, 280, 284, 286, 287, 291, 292, 296, 297, 298, 299, 301, 302, 303, 305, 310, 312, 314, 315, 316, 317, 319, 321, 323, 324, 326, 328, 329, 331, 333, 334, 335, 336, 337, 338, 340, 342, 344, 346, 347, 349, 350, 353, 354, 358, 361, 366, 372, 374, 375, 378, 379, 381, 382, 391, 392, 402, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 428, 429, 430, 433, 434, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 459, 460, 461, 464, 465, 466, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 614, 615, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 691, 692, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 739, 740, 741, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 767, 768, 772, 773, 774, 775, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 871, 872, 873, 874, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 930, 934, 935, 939, 940, 952, 956, 973, 975, 978, 979, 982, 985, 993, 994, 995, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "sample_i": [180, 421, 615, 1050], "sample_id": [361, 374, 501], "sample_interv": 642, "sample_interval_": 1052, "sample_posterior": [183, 631, 995], "sample_s": [91, 246, 354, 797], "sample_score_mean": 276, "sample_score_std": 276, "sample_silhouette_valu": 93, "sample_step": 642, "sample_weight": [61, 196, 214, 227, 232, 248, 322, 327, 328, 351, 379, 393, 402, 411, 418, 422, 428, 434, 440, 446, 447, 450, 452, 462, 463, 468, 472, 485, 486, 487, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 614, 615, 636, 637, 638, 639, 641, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 701, 702, 704, 706, 707, 711, 712, 713, 716, 717, 720, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 738, 739, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 800, 803, 804, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 873, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 964, 992, 1005, 1019, 1020, 1021, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "sample_weight1": 248, "sample_weight2": 248, "sample_weight_const": 351, "sample_weight_last_ten": 351, "sample_weight_vect": 940, "sample_without_replac": [2, 388, 1042], "samples_weight": 227, "samplewis": [758, 1005], "samson": 1043, "samuel": [700, 1029, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "samuela": 1039, "samu\u00ebl": 1043, "san": [169, 376, 419, 1017], "sanchez": [1044, 1045], "sandbox": 405, "sandeep": 1048, "sander": [411, 422, 447, 449, 453, 460, 854, 1011, 1045, 1046], "sandi": 1049, "sandip": [1053, 1054], "sandra": [1045, 1051], "sandro": [1044, 1051], "sandrocasagrand": [1044, 1045], "sandrovskii": 1043, "sangam": 1051, "sangamswadik": 1051, "sangeeth": 1045, "saniti": [382, 872, 1005, 1036, 1037], "sanjabi": 1046, "sanjai": 1050, "sanjai_3": [1051, 1052], "sanjoi": [902, 1017], "sano": 1050, "sanofi": 51, "santa": [179, 1051], "santana": [1047, 1050], "santhanam": 1044, "santhosh": 1047, "santhoshbala18": 1047, "santi": [1041, 1043, 1044], "santiago": 1047, "sap": 51, "sapiro": [416, 535, 541], "saqib": 1044, "sara": 1049, "sarah": [1043, 1045, 1048], "sarahremu": [1051, 1054], "sarajpoor": 1051, "sarat": 1047, "sarawagi": 787, "sarra": 1046, "sartaj": 1042, "sasank": 1042, "sashka": [1051, 1052], "sass": [379, 397, 404], "sassenhagen": [1048, 1053], "sat": [43, 150, 188, 419], "satellit": 1008, "satisfi": [411, 654, 658, 703, 721, 740, 741, 848, 849], "satish": 1044, "sato": 1039, "satrajit": [0, 401, 1036, 1037], "satur": [72, 187, 312], "sauerbrei": 1015, "sauerkraut": 419, "saul": [693, 697, 1002, 1043, 1044, 1046], "saurabh": [1040, 1041, 1042, 1043, 1044, 1048], "sauvignon": 318, "saval": 1045, "savard": 1036, "save": [86, 102, 104, 251, 310, 378, 379, 383, 385, 386, 387, 393, 405, 415, 423, 471, 495, 538, 539, 631, 848, 849, 906, 1001, 1005, 1015, 1021, 1029, 1036, 1039, 1043, 1046, 1054], "savings_statu": 266, "savkomax": 1051, "saw": [122, 215, 218], "sawtooth": 122, "say_hello": 965, "sc": [373, 411], "scaja": 1053, "scala": 1025, "scalabl": [77, 79, 95, 184, 191, 246, 264, 326, 354, 379, 411, 418, 419, 451, 494, 506, 593, 644, 810, 821, 832, 834, 846, 869, 878, 880, 908, 910, 913, 914, 997, 1000, 1002, 1005, 1018, 1020, 1026, 1029, 1036, 1039, 1040, 1046, 1047, 1050, 1051], "scalar": [2, 121, 324, 329, 385, 393, 407, 412, 421, 423, 467, 470, 528, 537, 619, 620, 621, 626, 627, 631, 632, 634, 742, 746, 930, 938, 997, 1009, 1011, 1015, 1019, 1024, 1046, 1047, 1050, 1052, 1055], "scalarmapp": 66, "scale": [2, 36, 43, 44, 51, 62, 64, 72, 75, 78, 80, 81, 89, 91, 94, 103, 104, 110, 113, 116, 123, 126, 145, 152, 169, 171, 172, 173, 176, 177, 178, 184, 188, 192, 195, 196, 201, 205, 214, 216, 218, 228, 229, 230, 232, 233, 236, 241, 247, 251, 262, 269, 272, 273, 274, 275, 279, 295, 297, 308, 309, 310, 311, 312, 316, 322, 325, 327, 328, 336, 337, 339, 342, 346, 362, 365, 366, 371, 372, 373, 376, 379, 384, 388, 391, 392, 393, 411, 412, 416, 418, 419, 420, 421, 449, 450, 453, 454, 460, 467, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 505, 514, 518, 519, 528, 538, 542, 544, 545, 551, 553, 554, 565, 566, 586, 594, 595, 601, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 635, 636, 645, 648, 649, 650, 651, 653, 656, 662, 663, 664, 665, 666, 676, 678, 680, 681, 682, 685, 691, 692, 693, 694, 696, 698, 703, 707, 720, 745, 751, 761, 763, 773, 779, 781, 818, 821, 834, 835, 836, 848, 849, 850, 865, 866, 869, 872, 877, 878, 880, 883, 885, 886, 888, 893, 894, 895, 897, 898, 900, 901, 908, 909, 910, 911, 912, 913, 914, 979, 980, 981, 982, 985, 994, 997, 998, 1001, 1005, 1006, 1007, 1008, 1009, 1013, 1019, 1020, 1025, 1026, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "scale_": [653, 877, 878, 886, 888, 898, 1015, 1041], "scaled_clf": 317, "scaled_pca": 317, "scaled_x_train": 317, "scaler": [45, 103, 105, 151, 167, 184, 230, 231, 246, 251, 253, 255, 286, 295, 300, 311, 316, 317, 326, 342, 345, 362, 384, 412, 415, 493, 662, 663, 676, 678, 691, 868, 877, 878, 880, 884, 885, 886, 888, 893, 894, 895, 896, 897, 898, 899, 1009, 1015, 1019, 1026, 1036, 1041, 1044, 1049], "scaler2": 255, "scalewai": 387, "scaling_": 554, "scalings_": [553, 554], "scanpi": 1053, "scatter": [43, 48, 50, 51, 61, 66, 67, 70, 73, 74, 77, 78, 79, 82, 85, 89, 90, 91, 92, 93, 95, 100, 111, 116, 119, 123, 125, 126, 127, 129, 136, 137, 141, 143, 151, 153, 154, 156, 162, 164, 171, 172, 173, 175, 177, 178, 179, 180, 186, 187, 192, 195, 198, 204, 206, 210, 211, 212, 215, 216, 217, 223, 226, 227, 228, 231, 234, 235, 236, 237, 238, 239, 241, 246, 247, 249, 257, 258, 259, 260, 261, 262, 263, 267, 273, 275, 287, 292, 295, 298, 299, 300, 301, 302, 303, 304, 307, 312, 314, 315, 317, 325, 333, 336, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 350, 351, 353, 358, 359, 360, 375, 413, 635, 705, 999, 1001], "scatter_": 705, "scatter_fig": 141, "scatter_kwarg": [43, 52, 107, 155, 187, 705], "scatter_trac": 141, "scatterplot": [115, 194, 272], "scatterpoint": [125, 129, 237, 259, 333], "scenario": [90, 102, 150, 171, 192, 218, 275, 362, 386, 397, 410, 415, 418, 541, 547, 549, 550, 999, 1005, 1015, 1046], "scene": [376, 387, 1008, 1010, 1049], "schapir": [50, 289, 305, 374, 418, 502, 557, 558], "schedul": [150, 308, 367, 383, 680, 681, 682, 865, 866, 1019, 1029, 1043], "scheidegg": 1036, "scheme": [281, 297, 318, 319, 374, 383, 393, 411, 415, 417, 419, 570, 594, 662, 663, 709, 817, 851, 875, 876, 879, 881, 885, 889, 892, 897, 908, 913, 994, 1001, 1015, 1019, 1036, 1044, 1047, 1048, 1053, 1054], "scherer": 1042, "scheubrein": 1048, "schloss": 1005, "schl\u00fcter": [1036, 1044], "schmerler": 1051, "schmid": [762, 763, 1003], "schmidt": [662, 1001, 1039], "schmitt": [1046, 1047], "schmitz": 1053, "schneider": [353, 1049, 1054], "schoelkopf": 904, "schoentgen": [1044, 1045], "schofield": 1036, "schole": 1048, "scholkopf1997": 416, "scholkopf1998": 1015, "scholz": 1054, "school": [102, 176, 187, 376, 411, 792, 1005], "schreiber": [0, 401, 1041, 1042, 1043], "schroeder": [45, 374], "schubert": [411, 422, 447, 453, 1040, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1054], "schucker": 1042, "schuder": [1044, 1045, 1046], "schuetz": [843, 847], "schuldt": 1040, "schult": 55, "schulz": 1036, "schumach": [1039, 1040, 1041], "schut": 1036, "schwardt": 1036, "schwartz": [1036, 1038, 1050], "schwetlick": [1047, 1048], "sch\u00f6lkopf": [44, 416, 539, 874, 1011, 1015, 1020], "sch\u00f6nberger": [1038, 1039], "sch\u00fctze": [416, 594, 1003, 1005, 1007], "sci": [57, 102, 353, 354, 355, 374, 391, 491, 693, 697, 879, 1002, 1015], "scibol": 1047, "scienc": [0, 73, 111, 169, 179, 187, 289, 373, 376, 391, 411, 443, 457, 542, 544, 551, 692, 693, 697, 855, 995, 997, 1001, 1002, 1005, 1008, 1017, 1025, 1029, 1044], "scientif": [0, 68, 246, 373, 377, 391, 397, 411, 455, 465, 505, 1029, 1031], "scientist": [995, 1029], "scikera": 1024, "scikit": [2, 15, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 367, 368, 371, 373, 374, 375, 376, 378, 379, 382, 385, 386, 387, 388, 392, 393, 398, 399, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 425, 426, 428, 429, 430, 431, 433, 434, 435, 441, 446, 449, 450, 453, 460, 467, 468, 470, 471, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 516, 519, 525, 528, 542, 545, 565, 566, 568, 569, 571, 580, 585, 586, 587, 593, 603, 606, 615, 630, 632, 634, 636, 638, 642, 644, 650, 652, 656, 662, 673, 684, 692, 701, 704, 705, 706, 721, 722, 736, 746, 752, 782, 783, 784, 792, 799, 803, 804, 805, 806, 807, 808, 809, 810, 818, 821, 822, 823, 824, 825, 826, 827, 830, 831, 834, 836, 837, 850, 852, 868, 869, 871, 873, 875, 878, 880, 881, 882, 883, 887, 888, 889, 892, 905, 906, 908, 913, 916, 917, 924, 926, 946, 947, 957, 970, 971, 994, 995, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1018, 1019, 1020, 1021, 1023, 1026, 1028, 1031, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "scikit_learn": 1024, "scikit_learn_data": [52, 374, 489, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503], "scipi": [0, 2, 45, 53, 55, 57, 76, 80, 81, 86, 87, 109, 110, 113, 122, 124, 128, 146, 171, 187, 190, 200, 204, 258, 262, 263, 269, 272, 280, 284, 292, 297, 302, 310, 322, 323, 328, 329, 331, 332, 366, 373, 374, 377, 379, 381, 385, 387, 388, 391, 392, 393, 397, 404, 405, 407, 408, 411, 416, 419, 453, 454, 455, 456, 460, 465, 466, 500, 507, 512, 536, 538, 539, 545, 548, 585, 586, 589, 590, 592, 593, 614, 615, 652, 653, 657, 661, 662, 663, 667, 670, 671, 672, 673, 674, 676, 678, 680, 681, 682, 684, 688, 691, 695, 696, 699, 723, 764, 767, 782, 783, 784, 785, 796, 797, 808, 816, 818, 834, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 871, 880, 881, 886, 887, 888, 891, 895, 898, 899, 908, 910, 911, 913, 914, 949, 953, 954, 959, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 994, 995, 1001, 1003, 1006, 1008, 1009, 1015, 1019, 1020, 1023, 1025, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1055], "sckit": 1052, "scls19fr": 1041, "scognamiglio": 418, "scope": [45, 57, 266, 366, 368, 379, 391, 419, 1024, 1025], "score": [0, 2, 13, 27, 43, 45, 47, 50, 52, 58, 59, 61, 62, 63, 64, 67, 68, 69, 72, 91, 93, 102, 103, 104, 105, 106, 107, 109, 113, 116, 128, 133, 135, 137, 143, 144, 145, 146, 147, 150, 151, 154, 155, 161, 164, 165, 166, 169, 182, 184, 186, 187, 188, 189, 190, 192, 199, 205, 206, 209, 214, 216, 220, 222, 230, 232, 241, 246, 247, 248, 251, 255, 261, 264, 266, 270, 272, 273, 274, 275, 276, 277, 280, 281, 283, 284, 285, 286, 287, 289, 291, 299, 300, 301, 307, 308, 309, 310, 314, 317, 318, 319, 321, 322, 323, 324, 328, 329, 331, 332, 334, 335, 342, 349, 353, 354, 357, 362, 374, 379, 381, 384, 392, 393, 405, 406, 407, 408, 409, 410, 412, 414, 416, 418, 420, 428, 430, 434, 440, 446, 450, 452, 455, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 506, 508, 536, 540, 545, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 613, 614, 615, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 702, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 746, 759, 760, 761, 786, 787, 788, 789, 790, 791, 792, 793, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 818, 823, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 857, 858, 859, 864, 865, 866, 868, 888, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 924, 926, 954, 994, 997, 1001, 1003, 1008, 1011, 1013, 1015, 1019, 1025, 1026, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "score_clf1": 69, "score_clf2": 69, "score_clf3": 69, "score_df": 62, "score_differ": 277, "score_estim": [214, 232], "score_full_data": 182, "score_func": [72, 103, 104, 420, 596, 599, 600, 602, 603, 604, 746, 1036, 1038, 1053], "score_iri": 278, "score_iterative_imput": 182, "score_label": [232, 278], "score_mean": 345, "score_nam": [62, 72, 247, 274, 327, 354, 810, 827], "score_param": [597, 598, 663, 1053], "score_rand": 278, "score_sampl": [261, 297, 298, 299, 305, 393, 417, 472, 536, 545, 567, 681, 801, 802, 804, 807, 808, 818, 853, 854, 864, 868, 912, 1011, 1039, 1044, 1046, 1048], "score_simple_imput": 182, "score_std": 345, "score_tim": [274, 415, 831, 832], "score_times_nb": 274, "score_times_svm": 274, "score_typ": [247, 274, 285, 327, 810, 827, 1052], "score_valu": 354, "scorer": [2, 150, 155, 232, 248, 266, 276, 328, 381, 393, 402, 410, 415, 418, 420, 565, 566, 598, 606, 638, 663, 677, 679, 715, 736, 737, 746, 804, 807, 808, 810, 818, 826, 827, 830, 831, 832, 833, 835, 962, 994, 1001, 1005, 1013, 1025, 1040, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "scorer1_nam": 415, "scorer2_nam": 415, "scorer_": [804, 807, 808, 818], "scorer_nam": [276, 804, 818], "scores_": [194, 195, 596, 599, 600, 602, 603, 604, 648, 649, 663, 1036, 1046], "scores_df": 52, "scores_glm_pure_premium": 232, "scores_matrix": 283, "scores_max": 55, "scores_product_model": 232, "scores_std": 160, "scoring_cal": 715, "scoring_inner_cv": 328, "scoring_on_bootstrap": 275, "scoring_weight": 402, "scott": [417, 853, 1036, 1037, 1042, 1044, 1045, 1046, 1051, 1052], "scottlog": 1054, "scratch": [380, 445, 1005, 1038], "screen": [48, 1049], "screenporch": 144, "screenshot": 377, "script": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 367, 379, 380, 381, 382, 383, 385, 391, 393, 397, 405, 419, 1025, 1028], "scroll": 399, "scrollbar": 384, "scrutin": 281, "scsi": 57, "scullei": 411, "sdenton4": 1039, "sdg_param": 335, "se": [169, 236, 376, 397], "seabold": [1039, 1041, 1042], "seaborn": [72, 136, 150, 186, 187, 194, 199, 262, 272, 379, 397, 404, 1024], "seagreen": 208, "seal": 1042, "seamu": 1038, "sean": [1048, 1049, 1051], "seanpwilliam": 1043, "sear": 1042, "search": [2, 45, 52, 64, 80, 87, 103, 104, 105, 106, 147, 164, 166, 168, 169, 171, 184, 232, 247, 248, 262, 264, 266, 271, 273, 276, 277, 279, 284, 291, 292, 294, 296, 310, 314, 326, 342, 348, 353, 362, 376, 377, 379, 381, 391, 393, 406, 411, 412, 415, 418, 419, 420, 422, 446, 451, 453, 455, 460, 461, 464, 467, 474, 475, 481, 506, 519, 526, 561, 562, 563, 564, 568, 569, 570, 583, 603, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 632, 657, 680, 692, 693, 696, 697, 717, 732, 789, 792, 804, 807, 808, 815, 816, 818, 820, 834, 835, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 868, 913, 916, 917, 918, 919, 958, 992, 998, 1000, 1002, 1005, 1008, 1009, 1019, 1021, 1025, 1026, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1048, 1050, 1051, 1053, 1055], "search_05p": 147, "search_95p": 147, "search_cv": 103, "searchcv": [392, 1051], "searchforpass": 1052, "searchgrid": 1025, "searchsort": 50, "season": [43, 52, 176, 188, 215, 378], "seasonal_kernel": 176, "seasoncountcatu32": 52, "sebastian": [1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "sebastien": 1044, "sebastin": [1043, 1044], "sebasti\u00e1n": 1042, "seberg": 1037, "sec": [49, 222, 236, 239, 292], "sec65": 1051, "secant": 646, "second": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 374, 381, 385, 393, 408, 410, 411, 415, 416, 418, 419, 421, 467, 470, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 508, 514, 557, 587, 592, 593, 594, 595, 625, 628, 635, 636, 703, 716, 720, 762, 763, 767, 768, 770, 771, 778, 779, 780, 781, 782, 785, 804, 807, 808, 818, 832, 838, 839, 842, 845, 856, 858, 859, 860, 865, 866, 994, 995, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1012, 1015, 1016, 1021, 1051], "secondari": [639, 1040], "secondli": [377, 391, 411, 418, 661, 1001], "sect": 44, "section": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 72, 121, 126, 138, 145, 150, 155, 160, 161, 162, 176, 180, 186, 187, 188, 190, 194, 199, 201, 203, 216, 238, 242, 248, 251, 253, 266, 270, 272, 275, 281, 317, 318, 319, 323, 353, 354, 355, 362, 372, 374, 377, 379, 380, 381, 383, 384, 385, 386, 387, 394, 402, 409, 410, 412, 414, 415, 416, 418, 419, 420, 421, 442, 446, 462, 538, 618, 623, 626, 641, 649, 792, 802, 910, 913, 994, 999, 1001, 1005, 1006, 1008, 1009, 1011, 1012, 1019, 1020, 1021, 1022, 1036, 1038, 1039, 1040, 1043], "sector": 187, "sector_construct": 187, "sector_manufactur": 187, "sector_oth": 187, "secur": [383, 393, 1024, 1025, 1029, 1031], "sed": [383, 1036], "sedamaki": 1050, "sedykh": 1051, "see": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 52, 58, 61, 62, 64, 72, 79, 82, 83, 86, 88, 90, 91, 95, 97, 98, 100, 101, 111, 116, 118, 121, 126, 127, 131, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 148, 150, 152, 155, 160, 165, 166, 167, 169, 171, 176, 177, 178, 182, 184, 187, 188, 190, 192, 194, 195, 196, 199, 205, 215, 216, 217, 218, 220, 231, 232, 234, 236, 243, 245, 248, 251, 252, 253, 255, 258, 259, 260, 265, 266, 267, 269, 271, 272, 273, 274, 275, 277, 279, 281, 282, 283, 286, 287, 289, 292, 298, 299, 301, 305, 312, 318, 319, 321, 322, 323, 324, 325, 326, 327, 333, 342, 346, 349, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 368, 371, 372, 373, 374, 376, 377, 378, 379, 381, 383, 385, 386, 387, 391, 392, 393, 399, 405, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 490, 491, 494, 496, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 615, 618, 623, 626, 627, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 705, 710, 712, 715, 717, 747, 767, 778, 782, 783, 784, 785, 792, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 927, 951, 952, 973, 975, 978, 988, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "seed": [2, 46, 50, 63, 64, 70, 74, 75, 79, 85, 87, 90, 92, 93, 97, 98, 103, 109, 110, 111, 119, 122, 127, 138, 143, 162, 164, 189, 204, 209, 212, 217, 220, 223, 227, 231, 237, 258, 260, 261, 262, 263, 275, 278, 287, 297, 298, 299, 346, 347, 351, 354, 362, 367, 381, 388, 391, 393, 411, 415, 416, 446, 450, 451, 453, 455, 460, 462, 463, 464, 465, 474, 475, 476, 540, 548, 557, 558, 559, 560, 563, 564, 631, 650, 651, 656, 657, 664, 665, 666, 667, 681, 693, 695, 697, 699, 801, 802, 808, 839, 842, 857, 911, 937, 951, 952, 969, 973, 994, 995, 1000, 1002, 1040, 1041, 1045, 1046, 1052], "seeger": [643, 997], "seek": [234, 236, 238, 378, 379, 391, 394, 512, 513, 1002], "seel": 1050, "seem": [43, 48, 52, 80, 88, 147, 150, 177, 188, 214, 238, 241, 273, 289, 308, 316, 349, 353, 354, 378, 379, 384, 410, 415, 505, 1001, 1005], "seemingli": [232, 362, 391], "seen": [55, 62, 75, 88, 99, 113, 124, 130, 142, 147, 150, 187, 188, 210, 238, 244, 248, 308, 312, 342, 353, 374, 381, 383, 392, 393, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 427, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 525, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 627, 631, 632, 633, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 979, 985, 994, 1000, 1005, 1008, 1009, 1015, 1021, 1029, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "segfault": [367, 380, 1036, 1044, 1049], "segment": [51, 53, 55, 59, 71, 81, 86, 124, 184, 237, 244, 374, 387, 411, 419, 455, 465, 512, 513, 695, 864, 1005, 1026, 1029, 1044, 1046, 1048], "seguin": 1041, "sei": 419, "seismic_r": [194, 199], "sejourn": 1045, "sel": [402, 420], "seladu": 1052, "seldom": 908, "sele": [1050, 1051], "selecci\u00f3n": 318, "select": [2, 18, 29, 43, 46, 48, 49, 52, 58, 70, 71, 79, 84, 88, 90, 95, 101, 103, 106, 113, 119, 120, 121, 130, 131, 135, 137, 144, 147, 150, 155, 164, 166, 176, 178, 187, 188, 190, 192, 193, 195, 197, 199, 200, 202, 213, 218, 222, 229, 232, 235, 241, 245, 247, 251, 256, 257, 258, 259, 266, 270, 271, 272, 273, 277, 285, 286, 296, 312, 317, 318, 323, 327, 329, 331, 332, 335, 337, 342, 349, 353, 354, 355, 362, 366, 374, 376, 377, 379, 381, 383, 387, 392, 393, 408, 411, 412, 413, 416, 418, 419, 421, 446, 448, 449, 450, 452, 454, 456, 461, 462, 463, 467, 469, 470, 475, 476, 479, 491, 492, 496, 497, 500, 501, 504, 505, 506, 508, 516, 519, 536, 538, 539, 544, 545, 548, 553, 555, 562, 563, 564, 567, 569, 585, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 631, 635, 636, 649, 650, 651, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 675, 677, 680, 682, 686, 687, 695, 696, 701, 716, 720, 722, 758, 792, 796, 797, 801, 802, 804, 807, 808, 809, 810, 818, 830, 831, 832, 834, 836, 850, 851, 852, 854, 856, 858, 859, 860, 868, 869, 873, 878, 884, 888, 905, 908, 909, 913, 916, 917, 918, 919, 930, 973, 974, 999, 1000, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1015, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "select__k": 994, "select_dtyp": [107, 144, 326, 469], "selected_featur": 190, "selected_features_nam": 190, "selectfdr": [2, 420, 596, 600, 602, 603, 604, 610, 1040, 1042, 1043, 1052], "selectfpr": [2, 379, 420, 596, 599, 602, 603, 604, 610, 1052], "selectfrommodel": [2, 169, 393, 402, 597, 606, 607, 1027, 1031, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1052, 1053], "selectfw": [2, 420, 596, 599, 600, 603, 604, 610, 1052], "selectkbest": [2, 104, 106, 165, 166, 325, 362, 379, 402, 412, 420, 585, 596, 599, 600, 602, 604, 610, 994, 1037, 1042, 1052, 1053], "selectkbestselectkbest": [166, 325], "selector": [2, 52, 103, 165, 166, 251, 349, 387, 419, 420, 469, 585, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 1038, 1046, 1048, 1052], "selectormixin": [2, 1047], "selectpercentil": [2, 87, 103, 255, 345, 420, 596, 599, 600, 602, 603, 607, 610, 1037, 1042, 1052, 1053], "selectpercentileselectpercentil": [103, 255], "self": [2, 47, 57, 62, 64, 89, 98, 119, 133, 179, 184, 190, 248, 286, 292, 330, 336, 342, 353, 373, 379, 380, 381, 384, 385, 386, 387, 411, 419, 421, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 504, 512, 513, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 707, 801, 802, 803, 804, 805, 806, 807, 808, 811, 813, 818, 822, 823, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 957, 961, 962, 964, 965, 970, 978, 993, 1008, 1025, 1026, 1027, 1029, 1031, 1038, 1043, 1050], "self_request": 248, "self_training_clf": 334, "self_training_model": [323, 905], "selftrain": 335, "selftrainingclassifi": [2, 323, 334, 335, 336, 402, 1018, 1048, 1053, 1055], "selftrainingclassifierifittedselftrainingclassifi": 323, "seljak": 1051, "sell": 107, "selvan": 1048, "semant": [54, 353, 354, 393, 548, 1030, 1031, 1038], "semi": [2, 38, 57, 67, 115, 153, 162, 173, 246, 249, 314, 323, 339, 342, 346, 374, 393, 491, 508, 539, 592, 594, 680, 733, 834, 868, 872, 903, 904, 905, 913, 1003, 1008, 1011, 1026, 1027, 1031, 1036, 1048, 1051], "semi_supervis": [2, 184, 323, 325, 330, 331, 332, 333, 334, 335, 336, 402, 903, 904, 905, 1006, 1018, 1026, 1037, 1042, 1043, 1050, 1051], "semiconductor": 1029, "semidefinit": [180, 1015, 1020], "semilogi": [202, 245], "semilogx": [160, 202, 203], "semin": 418, "seminar": 1005, "semisupervis": [331, 393], "sen": [2, 184, 193, 217, 220, 312, 653, 661, 675, 682, 683, 1026], "send": [379, 383, 394, 411, 423, 537], "sender": [353, 374], "sendyk": 1045, "seng": 1048, "senger": [0, 1052, 1053, 1054, 1055], "senior": [1015, 1029], "sens": [42, 43, 52, 55, 62, 88, 99, 177, 184, 187, 192, 245, 312, 318, 332, 342, 353, 362, 366, 379, 380, 393, 411, 413, 415, 420, 465, 472, 473, 474, 475, 476, 477, 478, 479, 656, 659, 660, 676, 805, 815, 905, 999, 1001, 1008, 1009, 1011, 1015, 1018, 1026], "sensibl": [85, 182, 285, 289, 354, 381, 1001, 1015], "sensit": [43, 79, 88, 111, 112, 138, 147, 184, 188, 216, 217, 218, 241, 242, 251, 264, 276, 279, 286, 312, 329, 342, 367, 368, 394, 410, 413, 418, 455, 465, 500, 555, 565, 662, 696, 704, 706, 716, 717, 722, 746, 788, 791, 792, 803, 804, 826, 834, 869, 888, 906, 1000, 1001, 1002, 1004, 1005, 1009, 1011, 1019, 1020, 1026, 1040, 1054], "sensor": 199, "sent": [150, 411, 837, 1021], "sentenc": [102, 353, 355, 374, 394, 419], "seoeun": 1052, "sep": [119, 281], "sepal": [118, 129, 131, 143, 173, 198, 255, 295, 323, 326, 339, 376, 1015], "sepal_col": 326, "separ": [52, 53, 61, 62, 66, 67, 75, 88, 93, 95, 99, 105, 111, 120, 121, 123, 126, 135, 137, 140, 153, 169, 174, 183, 184, 188, 189, 192, 193, 213, 215, 235, 249, 259, 272, 275, 281, 282, 312, 314, 317, 323, 334, 337, 338, 340, 341, 342, 346, 347, 353, 362, 366, 375, 376, 381, 384, 387, 391, 393, 405, 409, 411, 412, 413, 416, 418, 419, 421, 467, 516, 523, 537, 542, 544, 545, 551, 553, 585, 592, 593, 595, 614, 635, 642, 650, 651, 677, 680, 681, 694, 698, 729, 736, 749, 750, 752, 757, 796, 823, 840, 841, 867, 868, 910, 912, 913, 918, 919, 994, 995, 997, 999, 1001, 1002, 1004, 1011, 1012, 1015, 1019, 1020, 1026, 1036, 1039, 1041, 1042, 1046, 1048, 1049, 1052, 1053], "seper": 557, "septemb": [738, 1005, 1036, 1039, 1042, 1044, 1049, 1052, 1054], "seq": 637, "seq_dataset": [1036, 1046], "seqlearn": 391, "sequenc": [2, 51, 135, 143, 201, 237, 381, 393, 412, 415, 416, 418, 419, 507, 516, 557, 558, 565, 566, 573, 574, 585, 586, 592, 593, 595, 650, 804, 807, 815, 834, 868, 892, 955, 956, 967, 975, 978, 1036, 1039, 1041, 1042], "sequencekernel": 179, "sequenti": [2, 52, 143, 163, 166, 184, 208, 273, 323, 377, 416, 418, 419, 504, 505, 538, 597, 601, 606, 607, 609, 610, 650, 651, 656, 657, 662, 664, 665, 666, 667, 677, 792, 868, 869, 888, 995, 1013, 1019, 1026, 1027, 1031, 1036, 1045, 1048], "sequentialfeatureselector": [2, 169, 402, 420, 597, 601, 607, 1048, 1049, 1050, 1051, 1052, 1055], "sergei": [411, 1038, 1042, 1043, 1044, 1045, 1046], "sergeyf": 1038, "sergio": [1036, 1038, 1039, 1048, 1051], "sergiodsr": 1047, "sergul": [1043, 1044, 1047], "seri": [2, 42, 43, 51, 58, 113, 142, 147, 150, 184, 186, 189, 190, 197, 214, 216, 218, 234, 255, 277, 286, 319, 325, 331, 371, 374, 384, 393, 411, 492, 493, 494, 495, 496, 500, 504, 505, 506, 508, 509, 514, 545, 566, 694, 698, 705, 746, 749, 750, 752, 794, 825, 830, 831, 834, 930, 996, 1001, 1002, 1006, 1008, 1019, 1024, 1026, 1039, 1042, 1043, 1044, 1048, 1051, 1053, 1054], "serial": [393, 405, 425, 960, 1024, 1025, 1036, 1044, 1048, 1053], "serializetostr": 405, "serious": 1007, "serum": [169, 376], "serv": [102, 125, 135, 177, 266, 275, 346, 412, 555, 997, 1031, 1050], "server": [0, 169, 366, 376, 377, 379, 500, 1028, 1044], "servic": [0, 43, 242, 251, 379, 383, 405, 1029, 1044], "sess": 405, "session": [381, 385, 391, 397, 1023, 1029], "set": [2, 3, 8, 19, 27, 37, 42, 43, 44, 45, 46, 47, 50, 52, 53, 58, 62, 63, 64, 66, 67, 70, 72, 76, 77, 79, 80, 82, 83, 86, 87, 88, 90, 91, 93, 95, 97, 98, 99, 102, 103, 105, 111, 112, 113, 116, 118, 120, 121, 125, 126, 129, 133, 135, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 157, 160, 165, 166, 169, 171, 177, 178, 179, 184, 186, 187, 188, 189, 190, 194, 199, 201, 202, 203, 205, 207, 209, 210, 211, 213, 214, 215, 216, 219, 222, 227, 228, 232, 234, 235, 236, 241, 242, 243, 244, 246, 247, 248, 251, 255, 257, 259, 261, 262, 265, 267, 270, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 285, 287, 289, 291, 294, 298, 299, 300, 301, 302, 305, 308, 309, 310, 312, 314, 316, 317, 318, 319, 321, 323, 324, 328, 331, 332, 335, 336, 339, 341, 344, 346, 349, 353, 354, 355, 359, 360, 361, 362, 366, 367, 368, 371, 372, 374, 376, 377, 379, 381, 383, 384, 386, 387, 392, 393, 394, 397, 402, 405, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 428, 435, 436, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 491, 492, 497, 499, 500, 501, 503, 506, 507, 508, 512, 513, 514, 519, 527, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 583, 584, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 701, 702, 703, 704, 705, 706, 707, 715, 717, 718, 720, 723, 725, 727, 730, 731, 732, 733, 734, 735, 738, 742, 744, 749, 750, 752, 754, 755, 757, 760, 783, 784, 786, 787, 788, 789, 791, 793, 794, 795, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 934, 935, 941, 946, 947, 952, 956, 960, 961, 973, 974, 975, 978, 979, 985, 988, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "set1": [272, 301, 302], "set_": [248, 402, 1054], "set_alpha": [70, 257, 258, 259, 262, 263], "set_arrai": [51, 237, 244], "set_aspect": [43, 123, 174, 225, 259, 350], "set_autoscaley_on": 77, "set_axis_bgcolor": 113, "set_axis_off": 68, "set_axisbelow": 49, "set_box_aspect": 70, "set_clim": 296, "set_clip_box": [70, 257, 258, 259, 262, 263], "set_color": [46, 225], "set_config": [2, 248, 253, 255, 266, 319, 322, 328, 366, 367, 402, 412, 440, 446, 447, 450, 452, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 537, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 594, 595, 597, 598, 601, 606, 614, 615, 630, 631, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 805, 806, 811, 813, 822, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 1045, 1047, 1050, 1052], "set_constrained_layout_pad": 121, "set_edgecolor": 121, "set_facecolor": [113, 257], "set_fit_request": [248, 328, 402, 440, 446, 447, 450, 452, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 592, 595, 639, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 694, 840, 841, 843, 844, 845, 846, 847, 853, 873, 874, 887, 888, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919], "set_fmt_str_length": 52, "set_i": 90, "set_index": [62, 135, 147, 203, 232, 272, 318, 354], "set_inverse_transform_request": [537, 585, 875, 888], "set_label": [75, 174, 245], "set_label_posit": 46, "set_linewidth": [51, 237, 244], "set_major_formatt": [234, 236, 239, 292, 297], "set_major_loc": [234, 297], "set_output": [184, 188, 240, 253, 317, 318, 382, 435, 445, 446, 448, 450, 452, 467, 471, 485, 486, 487, 488, 500, 508, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 570, 571, 572, 573, 574, 585, 586, 587, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 662, 692, 693, 696, 834, 852, 857, 860, 864, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 906, 1026, 1051, 1052, 1053, 1055], "set_param": [124, 131, 139, 144, 147, 188, 189, 195, 201, 203, 207, 218, 222, 246, 251, 255, 266, 285, 295, 321, 345, 354, 382, 393, 411, 412, 418, 421, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 995, 1011, 1036, 1042, 1043, 1044, 1049, 1050], "set_partial_fit_request": [452, 538, 670, 671, 672, 680, 681, 682, 836, 837, 840, 841, 843, 844, 845, 846, 847, 865, 888], "set_path_effect": 75, "set_posit": [100, 127, 225, 312], "set_predict_proba_request": [916, 918], "set_predict_request": [248, 485, 486, 487, 556, 615, 639, 648, 649, 916, 917, 918, 919], "set_printopt": 265, "set_prop_cycl": 215, "set_score_request": [248, 266, 328, 402, 440, 446, 450, 452, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 683, 684, 803, 826, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 850, 851, 855, 858, 859, 865, 866, 868, 903, 904, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 1005], "set_siz": 299, "set_size_inch": [93, 160, 252], "set_split_request": [805, 806, 811, 813, 822], "set_start_method": 391, "set_stat": 994, "set_tick_param": 257, "set_ticklabel": [118, 127, 211, 353], "set_titl": [47, 49, 54, 62, 64, 66, 67, 68, 70, 77, 78, 86, 88, 90, 93, 97, 98, 104, 107, 111, 118, 119, 126, 131, 135, 140, 142, 145, 151, 153, 155, 156, 180, 182, 183, 186, 187, 188, 189, 190, 194, 195, 203, 205, 212, 214, 215, 216, 222, 234, 235, 238, 239, 244, 246, 247, 251, 252, 257, 265, 266, 267, 268, 269, 272, 274, 275, 279, 283, 284, 286, 289, 291, 292, 295, 296, 297, 302, 307, 308, 312, 313, 314, 315, 316, 317, 321, 325, 331, 332, 339, 346, 349, 350, 351, 353, 357, 375], "set_transform_request": [248, 485, 486, 487, 537, 586, 592, 594, 595, 639, 871, 874, 880, 888], "set_vis": [54, 70, 296, 302, 312], "set_xlabel": [46, 49, 86, 93, 104, 105, 107, 118, 119, 126, 145, 180, 182, 183, 186, 188, 189, 190, 192, 203, 209, 211, 212, 214, 216, 229, 230, 246, 266, 272, 274, 278, 283, 284, 286, 289, 297, 312, 313, 317, 334, 354, 355, 357], "set_xlim": [67, 77, 93, 107, 111, 119, 140, 153, 183, 188, 212, 214, 219, 246, 257, 276, 278, 289, 297, 307, 312, 314, 315, 316, 317, 322, 328, 350], "set_xscal": [203, 219], "set_xtick": [43, 47, 49, 67, 78, 93, 97, 131, 153, 157, 188, 190, 205, 230, 246, 257, 283, 284, 291, 307, 309, 314, 315, 339], "set_xticklabel": [47, 49, 111, 131, 157, 174, 188, 190, 283, 284, 291], "set_ylabel": [46, 47, 49, 66, 70, 86, 93, 98, 104, 105, 107, 111, 118, 119, 126, 131, 135, 142, 145, 180, 188, 192, 203, 205, 209, 211, 212, 214, 216, 218, 229, 246, 257, 266, 272, 274, 278, 283, 284, 286, 291, 297, 312, 313, 317, 321, 334, 349, 354, 357], "set_ylim": [47, 49, 67, 77, 93, 104, 119, 140, 152, 153, 180, 188, 195, 212, 214, 215, 246, 257, 276, 291, 297, 307, 312, 314, 315, 317, 322, 328, 334, 350], "set_yscal": [145, 214], "set_ytick": [43, 67, 78, 93, 97, 131, 153, 182, 183, 190, 205, 230, 257, 283, 307, 309, 314, 315, 339, 355], "set_yticklabel": [131, 174, 182, 183, 190, 283, 355], "set_zlabel": [118, 211], "set_zord": 123, "setattr": 381, "setdefault": [55, 923], "setdiff1d": 348, "seth": 1042, "sethdandridg": 1040, "setminu": 1021, "setosa": [118, 127, 129, 281, 282, 376, 508], "setp": [47, 49, 283, 287], "settabl": 1005, "settingwithcopywarn": 188, "setup": [279, 281, 366, 377, 381, 385, 387, 1008], "setuptool": 1054, "seuclidean": [453, 460, 703, 782, 783, 784, 1008, 1044, 1047, 1048], "seuclideandist": 703, "seung": 416, "seven": [374, 998], "seventh": [515, 1017], "sever": [0, 43, 48, 51, 52, 62, 64, 67, 70, 72, 88, 89, 90, 94, 106, 138, 150, 153, 155, 158, 166, 169, 171, 176, 177, 184, 187, 192, 199, 203, 214, 218, 233, 234, 237, 238, 239, 245, 259, 267, 272, 277, 286, 292, 294, 308, 312, 324, 349, 353, 354, 366, 373, 374, 376, 379, 381, 384, 387, 391, 393, 408, 411, 412, 415, 417, 418, 419, 421, 450, 452, 467, 490, 503, 512, 513, 542, 559, 560, 563, 564, 567, 568, 569, 574, 592, 593, 595, 614, 649, 650, 656, 692, 693, 694, 695, 696, 697, 801, 802, 804, 807, 808, 818, 836, 837, 843, 844, 845, 846, 847, 867, 868, 875, 892, 916, 917, 918, 919, 937, 994, 997, 1002, 1005, 1006, 1008, 1013, 1015, 1019, 1021, 1022, 1023, 1024, 1026, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1049, 1052, 1053], "sevin": 1044, "sewook": 1046, "sex": [103, 169, 187, 189, 201, 203, 255, 326, 328, 376, 500, 1013], "sex_mal": 187, "seyedsaman": 1050, "sf": [169, 272, 323, 374, 420, 496, 606], "sfm": 169, "sfs_backward": 169, "sfs_forward": 169, "sfu": [411, 445], "sgd": [2, 46, 47, 50, 130, 137, 146, 147, 156, 174, 175, 184, 193, 196, 205, 206, 221, 228, 241, 248, 261, 280, 305, 308, 309, 324, 343, 344, 347, 351, 353, 358, 362, 368, 508, 516, 635, 653, 670, 671, 672, 675, 680, 681, 682, 683, 865, 866, 994, 1009, 1026, 1027, 1031, 1036, 1039, 1040, 1041, 1043, 1047, 1049], "sgdclassifi": [2, 25, 46, 47, 221, 222, 223, 224, 225, 226, 227, 246, 280, 335, 344, 353, 362, 366, 368, 385, 393, 409, 419, 642, 644, 645, 646, 650, 662, 670, 672, 908, 913, 997, 1001, 1006, 1019, 1020, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "sgdoneclasssvm": [2, 228, 241, 324, 912, 1011, 1019, 1049, 1051, 1052, 1053, 1054], "sgdregressor": [2, 25, 49, 225, 366, 368, 391, 650, 653, 671, 675, 680, 683, 866, 909, 914, 1001, 1019, 1038, 1040, 1042, 1043, 1044, 1047, 1049, 1050, 1051, 1052, 1054], "sgi": 353, "sgkf": [415, 822], "sgm": 47, "sgml": [47, 366], "sh": [283, 387, 994], "sh_color": 238, "sh_err": 238, "sh_lle": 238, "sh_point": 238, "sh_tsne": 238, "sha256": [47, 52, 495, 1051, 1055], "shack": [1046, 1047, 1048], "shade": [58, 86, 167, 198, 295, 300, 338, 416], "shader": 407, "shadi": [1051, 1052], "shadow": [125, 129, 130, 237, 333, 348, 355, 419], "shafer": 102, "shagun": 1042, "shah": [1040, 1041, 1042, 1048, 1054], "shaharyar": 1054, "shahebaz": 1044, "shahriar": 1038, "shaikh": [0, 364, 369, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1054], "shail": 1048, "shakerimoff": 1050, "shalev": [670, 671, 1001, 1019], "shalil": 1044, "shall": 176, "shallow": [385, 418, 565, 566, 923], "shamsi": 1044, "shandeng123": 1050, "shane": [1045, 1048, 1051], "shanghai": [693, 697, 1002], "shangwu": [1044, 1045], "shankar": 1046, "shanmuga": 1042, "shanno": 1001, "shannon": [561, 568, 916, 918, 1002, 1021], "shantanu": 787, "shao": [1048, 1049, 1050], "shape": [2, 43, 44, 45, 47, 48, 49, 50, 52, 53, 55, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 76, 80, 81, 84, 85, 86, 87, 88, 91, 93, 94, 99, 102, 106, 107, 111, 121, 122, 124, 136, 141, 142, 143, 144, 147, 148, 149, 150, 153, 154, 162, 165, 167, 172, 173, 175, 176, 177, 178, 182, 183, 184, 188, 189, 201, 203, 214, 216, 221, 223, 226, 227, 228, 229, 230, 233, 235, 236, 237, 241, 244, 245, 246, 247, 248, 250, 251, 257, 259, 261, 262, 263, 270, 272, 274, 275, 278, 279, 281, 282, 292, 297, 298, 302, 305, 307, 309, 314, 315, 321, 323, 326, 327, 328, 333, 334, 336, 339, 342, 345, 346, 347, 350, 351, 353, 354, 361, 366, 372, 373, 374, 379, 381, 393, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 931, 936, 939, 940, 946, 950, 952, 954, 958, 959, 966, 968, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 993, 995, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1026, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1052, 1053], "shape_fit_": [910, 911, 912, 913, 914], "shape_img": 589, "sharad": 1044, "sharan": [1043, 1044], "share": [70, 115, 153, 187, 262, 353, 361, 362, 366, 367, 381, 387, 405, 411, 416, 419, 553, 672, 708, 712, 801, 802, 807, 808, 999, 1012, 1028, 1036, 1038, 1044, 1046, 1048, 1051], "shared_yax": 141, "sharedmem": 1044, "sharei": [43, 52, 70, 107, 119, 126, 131, 156, 180, 188, 214, 216, 222, 274, 283, 285, 286, 297, 313, 318, 348, 349, 354, 375], "sharex": [43, 46, 54, 70, 105, 119, 126, 156, 180, 188, 216, 274, 285, 286, 297, 334, 375], "sharma": [1040, 1042, 1044, 1045, 1047, 1048, 1050, 1053, 1054], "sharmadharmp": 1050, "sharon": [45, 374], "sharova": 1043, "sharp": [43, 188, 1012, 1015], "sharper": 730, "shashank": [1042, 1048], "shaun": 1037, "shawpan": 1042, "shaymernaturalint": 1050, "she": [379, 898, 899, 1046], "shea": [1044, 1045], "shebanov": [1044, 1045], "sheep": 1029, "sheer": [379, 1029], "sheerman": 1036, "sheet": 1038, "sheetscikit": 399, "shekhar": 1042, "shell": [380, 387, 391], "shellyfung": 1051, "shen": 1049, "sheng": 1046, "shengxiduan": 1042, "shenhanc78": 1044, "sheni": 1048, "shenk": 1044, "shenoi": 1043, "sherlock": [632, 995], "sheth": 1044, "shetti": 1049, "shi": [411, 455, 465, 695], "shibata": 1046, "shiebler": 1042, "shield": 393, "shift": [2, 52, 71, 73, 79, 82, 97, 184, 194, 237, 262, 297, 310, 312, 346, 413, 417, 443, 451, 461, 464, 472, 516, 519, 693, 697, 854, 877, 1015, 1026, 1030, 1031, 1036, 1040, 1044], "shifted_gaussian": 261, "shifted_opposite_lof_scor": 854, "shih": [845, 1007], "shiki": 1047, "shilt": 1039, "shinehid": 1049, "shinitski": 1053, "shinnar": 1049, "shinsuk": 1051, "ship": [57, 155, 183, 358, 367, 377, 397, 419, 1001, 1036, 1045], "shiqiao": [0, 401, 1036, 1037], "shirsat": 1051, "shiva": [1051, 1052], "shivam": [1044, 1045, 1046], "shivamgargsya": [1043, 1047, 1049], "shivan": 1041, "shivram": 1044, "shiyu": 1045, "shleifer": [1042, 1043], "shmelkov": 1041, "shoaib": 1051, "shoemak": 1047, "shogo": [1051, 1052], "shooter23": [1048, 1049], "shop": 1029, "short": [44, 118, 144, 151, 205, 270, 309, 353, 379, 387, 415, 419, 423, 1001, 1002, 1008, 1028, 1041, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "short_nam": 55, "shortcom": 1001, "shortcut": [387, 405, 421], "shorten": [379, 1020, 1049], "shorten_param": 273, "shorter": [43, 177, 260, 391, 411, 416, 453, 460, 567, 701, 1007, 1011, 1047], "shortest": [2, 74, 384, 388, 692, 958, 1002, 1049], "shortest_path": 1049, "shorthand": [91, 393, 412, 470, 565, 566, 869, 870, 1039], "shortlog": 383, "shortname_slic": 55, "shota": 1042, "should": [43, 44, 45, 47, 48, 52, 54, 55, 62, 64, 67, 72, 86, 133, 135, 138, 141, 144, 147, 150, 169, 182, 187, 192, 194, 195, 199, 214, 232, 241, 246, 247, 248, 251, 266, 272, 275, 278, 279, 281, 286, 289, 292, 313, 314, 319, 333, 342, 349, 354, 362, 366, 367, 368, 374, 377, 378, 379, 381, 383, 384, 386, 387, 388, 392, 393, 397, 402, 405, 407, 409, 410, 411, 413, 415, 416, 418, 419, 420, 421, 422, 423, 425, 428, 434, 440, 443, 445, 446, 447, 448, 450, 452, 453, 455, 457, 460, 461, 462, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 490, 500, 507, 512, 513, 520, 525, 527, 528, 531, 536, 537, 538, 540, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 593, 594, 595, 597, 598, 601, 606, 611, 612, 614, 615, 624, 631, 632, 633, 635, 636, 637, 639, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 691, 693, 694, 695, 696, 697, 698, 699, 700, 705, 713, 731, 732, 746, 770, 775, 778, 782, 783, 784, 785, 786, 789, 792, 793, 796, 803, 805, 806, 811, 812, 813, 814, 821, 822, 823, 824, 826, 830, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 865, 866, 868, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 887, 888, 889, 891, 895, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 934, 938, 940, 944, 952, 957, 961, 965, 970, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 993, 994, 995, 999, 1000, 1001, 1002, 1005, 1006, 1008, 1010, 1011, 1012, 1015, 1018, 1019, 1020, 1021, 1025, 1028, 1029, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "shouldn": [258, 263, 379], "show": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 179, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 331, 332, 333, 334, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 357, 358, 359, 360, 361, 367, 368, 375, 379, 385, 391, 392, 397, 398, 402, 408, 409, 410, 413, 415, 416, 417, 418, 420, 421, 441, 506, 563, 597, 598, 635, 636, 701, 702, 704, 705, 706, 717, 810, 827, 850, 868, 920, 921, 922, 994, 997, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1019, 1020, 1025, 1038, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055], "show_top10": 374, "show_vers": [2, 366, 377, 379, 387, 397, 398, 1044], "show_weight": 921, "show_with_diff": 124, "showcas": [133, 136, 141, 144, 147, 148, 150, 184, 381], "shown": [62, 90, 133, 137, 141, 147, 180, 186, 188, 199, 204, 212, 232, 239, 241, 246, 251, 259, 272, 275, 278, 281, 289, 297, 308, 309, 312, 313, 314, 331, 349, 353, 354, 379, 384, 394, 409, 411, 412, 415, 416, 417, 419, 421, 441, 463, 636, 702, 704, 705, 706, 717, 804, 818, 920, 922, 1001, 1002, 1005, 1008, 1015, 1019, 1020, 1021, 1040, 1045, 1046, 1047, 1050], "shown_imag": 235, "shrankhla": 1051, "shreekant": 1055, "shreesha": [1052, 1053], "shreya": 1046, "shrink": [63, 113, 121, 148, 188, 199, 209, 212, 218, 234, 261, 285, 312, 349, 416, 563, 564, 680, 682, 855, 865, 866, 910, 911, 912, 913, 914, 1008, 1020], "shrink_threshold": [303, 855, 1008, 1036, 1048], "shrinkag": [2, 69, 108, 110, 113, 128, 149, 184, 303, 424, 472, 473, 476, 477, 478, 479, 480, 482, 483, 484, 543, 547, 553, 565, 566, 804, 1001, 1015, 1026, 1027, 1031, 1036, 1040, 1041, 1043], "shrinkage_": [109, 110, 476, 478], "shrinkage_coeffici": 483, "shroff": 1054, "shrunk": [2, 109, 128, 312, 319, 327, 424, 476, 478, 479, 482, 483, 484, 553, 889, 999, 1019, 1030, 1031], "shrunk_cov": [424, 482, 484], "shrunk_cov_scor": 128, "shrunk_covari": [2, 413, 1053], "shrunkcovari": [2, 109, 128, 413, 472, 473, 476, 477, 478], "shrunken": [855, 1036], "shruti": 1055, "shu": [1037, 1040, 1044], "shuangchi": [1050, 1051], "shubernetskii": 1038, "shubh": 1047, "shubhal": 1053, "shubham": [1043, 1046, 1054], "shubhanshu": 1048, "shubhraneel": 1050, "shuckle16": 1042, "shuffl": [2, 49, 52, 54, 58, 59, 61, 64, 68, 93, 94, 121, 141, 142, 143, 150, 155, 183, 199, 222, 223, 228, 241, 273, 277, 278, 285, 292, 319, 331, 332, 333, 334, 344, 353, 354, 362, 374, 388, 393, 406, 472, 477, 491, 492, 494, 496, 499, 501, 507, 515, 516, 517, 518, 519, 523, 526, 528, 535, 541, 543, 544, 550, 551, 557, 558, 559, 560, 568, 569, 571, 572, 606, 609, 611, 662, 663, 670, 671, 672, 676, 678, 680, 681, 682, 691, 804, 806, 807, 808, 809, 810, 818, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 838, 865, 866, 889, 908, 909, 910, 913, 951, 952, 973, 975, 1000, 1001, 1006, 1013, 1019, 1020, 1031, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "shuffle_param": 349, "shuffled_arrai": 978, "shufflesplit": [2, 267, 274, 349, 415, 806, 812, 814, 824, 834, 1036, 1037, 1039, 1041, 1042], "shuhei": 1049, "shuhua": 1048, "shutil": [87, 104, 412], "shuttl": 354, "shuzh": 1046, "shwartz": [670, 671, 1001, 1019], "shwed": 1044, "shyam": 1049, "si": 102, "siam": [411, 415, 455, 463, 465, 539, 545], "siang": 1039, "siavash": 1049, "siavrez": 1050, "sibsp": [189, 326], "sid": 1043, "siddharth": [1043, 1047], "siddiqui": 1054, "side": [43, 64, 92, 147, 207, 218, 232, 236, 244, 266, 312, 346, 353, 362, 374, 391, 409, 412, 415, 416, 419, 428, 434, 519, 804, 818, 1001, 1002, 1005, 1007, 1020, 1045], "sidebar": 379, "sidhpura": 1051, "siebert": 1044, "sierra": [535, 541], "sievert": 1046, "siftikha": 1044, "sig": 122, "sigh": 353, "sigkdd": [373, 374, 515, 680, 889, 1015, 1017], "sigma": [53, 80, 81, 87, 111, 128, 147, 270, 272, 408, 413, 416, 418, 618, 653, 999, 1001, 1003, 1007, 1010], "sigma2": [538, 545], "sigma_": [413, 648, 649, 1049, 1053], "sigma_0": [174, 175, 180, 421, 618], "sigma_0_bound": [180, 618], "sigma_i": [1007, 1015], "sigma_k": [416, 999], "sigmod": [411, 453, 460, 854, 1011], "sigmoid": [2, 61, 62, 63, 64, 371, 418, 440, 455, 539, 565, 624, 643, 647, 769, 778, 781, 865, 866, 910, 911, 912, 913, 914, 1010, 1020, 1031, 1049, 1053], "sigmoid_kernel": [2, 407, 769, 1003, 1055], "sign": [75, 110, 116, 122, 125, 137, 199, 262, 307, 349, 379, 411, 416, 419, 548, 586, 593, 610, 639, 640, 662, 663, 670, 672, 678, 679, 680, 681, 739, 746, 908, 912, 950, 952, 969, 1001, 1005, 1010, 1015, 1019, 1020, 1036, 1040, 1045, 1049, 1051, 1054], "signal": [2, 11, 53, 112, 121, 122, 123, 130, 145, 147, 171, 176, 177, 184, 193, 194, 200, 201, 202, 203, 208, 213, 215, 263, 285, 324, 411, 413, 419, 420, 421, 424, 478, 507, 525, 530, 535, 538, 541, 545, 549, 550, 629, 648, 649, 650, 651, 656, 657, 667, 668, 676, 688, 689, 690, 789, 825, 834, 882, 1001, 1005, 1022, 1026, 1029, 1030, 1031], "signatur": [248, 353, 354, 374, 491, 492, 561, 562, 568, 569, 598, 614, 615, 663, 677, 679, 715, 746, 810, 827, 830, 832, 835, 881, 964, 994, 1043, 1049, 1053], "signif": [45, 997], "signifi": [411, 585, 815, 1010], "signific": [2, 43, 88, 141, 147, 164, 165, 167, 184, 218, 232, 264, 272, 291, 292, 353, 362, 373, 374, 391, 411, 414, 415, 418, 508, 536, 538, 553, 631, 662, 663, 670, 671, 672, 680, 681, 682, 823, 833, 908, 910, 911, 912, 913, 914, 994, 1004, 1005, 1008, 1026, 1036, 1038, 1039, 1040, 1044], "significantli": [43, 61, 62, 64, 72, 109, 110, 135, 141, 145, 147, 150, 169, 187, 188, 189, 214, 218, 222, 230, 232, 266, 272, 292, 322, 323, 354, 355, 362, 367, 383, 411, 416, 418, 419, 424, 472, 477, 482, 483, 542, 544, 551, 562, 569, 650, 651, 656, 657, 664, 665, 666, 667, 688, 696, 848, 849, 997, 1001, 1002, 1008, 1013, 1020, 1036, 1038, 1039, 1043, 1044, 1049, 1050, 1051], "sijaranamu": 1042, "silenc": [248, 1055], "silent": [248, 419, 585, 864, 1015, 1041, 1042, 1044, 1045, 1049, 1050], "silhouett": [2, 58, 71, 73, 82, 90, 91, 184, 354, 450, 516, 796, 797, 1026, 1036, 1040], "silhouette_avg": 93, "silhouette_sampl": [2, 93, 797, 1040, 1042, 1044, 1052], "silhouette_scor": [2, 73, 82, 91, 93, 354, 379, 411, 1036, 1040, 1042, 1044, 1046, 1050], "silicon": 377, "silk": 1050, "sillanp\u00e4\u00e4": 1036, "silva": [409, 692, 1002, 1047, 1049, 1054], "silverman": [417, 853, 1051], "silverthorn": 1036, "silvestrin": 1053, "sim": 416, "sim4n6": 1051, "simd": [393, 1051], "similar": [2, 43, 44, 46, 51, 55, 58, 62, 63, 70, 72, 82, 84, 90, 93, 107, 116, 121, 125, 135, 147, 168, 171, 178, 186, 187, 188, 189, 199, 214, 216, 228, 234, 236, 237, 238, 241, 247, 248, 263, 266, 269, 272, 275, 278, 279, 280, 289, 291, 292, 312, 324, 341, 346, 349, 354, 355, 362, 366, 371, 373, 375, 378, 379, 381, 384, 385, 387, 388, 391, 393, 405, 408, 409, 411, 414, 415, 416, 418, 419, 420, 421, 422, 443, 446, 447, 453, 455, 457, 458, 507, 512, 513, 540, 586, 593, 594, 595, 614, 681, 696, 699, 707, 709, 719, 723, 729, 732, 733, 735, 738, 742, 744, 759, 764, 765, 790, 796, 797, 800, 801, 802, 830, 835, 880, 901, 904, 908, 909, 910, 911, 925, 935, 994, 997, 998, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1031, 1036, 1040, 1041, 1042, 1044, 1048, 1049], "similarli": [43, 51, 72, 88, 119, 151, 188, 190, 199, 203, 214, 242, 251, 266, 272, 307, 312, 327, 329, 342, 362, 367, 375, 377, 381, 384, 393, 405, 407, 408, 414, 415, 419, 733, 734, 742, 787, 788, 791, 826, 1000, 1002, 1003, 1005, 1012, 1019, 1020, 1022, 1044, 1050, 1052], "simmon": 1029, "simon": [1001, 1029, 1039, 1040, 1049, 1050, 1051, 1052], "simona": [1047, 1048, 1049], "simonamaggio": [1047, 1048, 1049], "simoncw": 1046, "simonpl": 1041, "simpl": [2, 13, 37, 43, 64, 88, 103, 107, 109, 115, 116, 121, 141, 145, 178, 184, 188, 199, 215, 231, 254, 273, 289, 293, 296, 305, 325, 338, 353, 355, 358, 362, 377, 379, 381, 382, 383, 384, 386, 391, 392, 393, 394, 402, 408, 411, 412, 413, 415, 416, 417, 418, 419, 420, 425, 432, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 465, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 518, 526, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 790, 792, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 960, 997, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1015, 1017, 1019, 1021, 1025, 1026, 1029, 1033, 1036], "simplefilt": 405, "simpleimput": [2, 103, 155, 182, 183, 189, 243, 253, 255, 322, 325, 362, 393, 631, 632, 633, 995, 1015, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "simpleimputersimpleimput": [103, 155, 189, 243, 253, 322, 325], "simplepipelin": 248, "simpler": [148, 190, 232, 321, 342, 366, 378, 411, 416, 1001, 1006, 1041], "simplest": [86, 415, 1002], "simplex": [63, 674, 801, 883], "simpli": [74, 116, 153, 171, 179, 238, 249, 251, 281, 305, 323, 324, 366, 374, 379, 381, 384, 391, 393, 413, 414, 415, 416, 418, 419, 488, 699, 766, 769, 875, 927, 954, 997, 1005, 1006, 1007, 1008, 1019, 1043, 1044, 1045], "simplic": [43, 53, 67, 199, 346, 353, 355, 393, 417, 1008, 1009, 1010, 1020], "simplif": [375, 378, 384, 1036, 1042], "simplifi": [43, 103, 201, 248, 342, 378, 380, 384, 411, 414, 519, 566, 867, 868, 1005, 1007, 1015], "simplist": [214, 419], "simul": [110, 123, 150, 187, 208, 249, 272, 1029], "simultan": [58, 88, 122, 276, 280, 327, 349, 360, 371, 408, 411, 994, 1005, 1006, 1021, 1029, 1043], "sin": [43, 53, 57, 74, 122, 136, 146, 147, 152, 154, 164, 171, 177, 178, 180, 194, 195, 199, 208, 215, 220, 236, 247, 263, 304, 313, 322, 328, 348, 359, 360, 421, 520, 619, 703, 768], "sin_transform": 43, "sina": 1049, "sinayev": 1038, "sinc": [0, 43, 44, 50, 52, 62, 70, 72, 82, 86, 88, 99, 102, 103, 104, 122, 144, 160, 166, 169, 171, 176, 187, 188, 190, 192, 197, 214, 216, 218, 231, 242, 246, 247, 248, 259, 262, 266, 268, 272, 274, 275, 281, 282, 285, 286, 289, 291, 292, 294, 295, 318, 324, 325, 336, 339, 342, 349, 353, 354, 355, 362, 367, 374, 377, 379, 380, 381, 383, 384, 387, 391, 392, 393, 397, 402, 405, 409, 411, 412, 413, 414, 415, 416, 418, 419, 421, 428, 431, 440, 445, 448, 449, 453, 456, 459, 472, 485, 486, 487, 488, 500, 531, 540, 542, 544, 551, 553, 554, 555, 556, 557, 559, 561, 563, 565, 566, 567, 568, 571, 573, 592, 593, 595, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 636, 637, 642, 655, 659, 662, 663, 670, 672, 677, 678, 679, 680, 683, 696, 711, 713, 739, 746, 782, 786, 793, 803, 804, 807, 808, 818, 826, 832, 833, 835, 836, 837, 838, 839, 843, 844, 845, 846, 847, 850, 855, 858, 865, 866, 868, 873, 898, 899, 903, 904, 905, 908, 910, 913, 916, 918, 932, 934, 935, 952, 961, 994, 997, 998, 999, 1001, 1002, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1019, 1020, 1021, 1029, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "sinclert": 1044, "sind": 419, "sine": [2, 43, 171, 176, 177, 184, 208, 220, 256, 257, 258, 259, 261, 262, 359, 375, 619, 801, 802, 1004, 1021, 1026], "singer": [289, 670, 671, 739, 1001, 1005, 1019, 1020], "singh": [1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "singl": [2, 30, 31, 70, 74, 85, 86, 88, 91, 94, 95, 104, 123, 134, 135, 136, 143, 144, 154, 169, 171, 177, 182, 184, 188, 190, 192, 199, 214, 216, 218, 252, 254, 262, 266, 268, 281, 289, 309, 325, 327, 342, 353, 354, 355, 358, 360, 362, 366, 367, 373, 374, 379, 384, 386, 387, 388, 391, 392, 393, 402, 409, 410, 412, 414, 415, 416, 418, 419, 420, 436, 440, 443, 444, 448, 449, 450, 452, 457, 467, 469, 470, 497, 498, 500, 510, 513, 538, 557, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 586, 596, 603, 604, 606, 610, 631, 636, 638, 647, 670, 671, 677, 680, 681, 682, 694, 696, 698, 714, 715, 725, 726, 727, 728, 729, 740, 741, 742, 745, 778, 789, 801, 802, 804, 807, 808, 818, 825, 826, 830, 831, 833, 834, 837, 845, 848, 849, 853, 865, 866, 867, 877, 878, 881, 882, 883, 888, 889, 903, 904, 916, 917, 918, 919, 928, 930, 968, 991, 994, 1000, 1001, 1002, 1005, 1006, 1008, 1010, 1012, 1013, 1015, 1019, 1020, 1021, 1024, 1026, 1029, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "single_output": [381, 928], "single_prior": 180, "single_source_shortest_path_length": [2, 388], "singleton": [367, 812, 937, 1049, 1052], "singular": [2, 121, 388, 408, 411, 414, 454, 456, 485, 486, 487, 488, 525, 528, 538, 542, 544, 545, 548, 551, 553, 554, 661, 676, 677, 678, 691, 952, 1001, 1002, 1004, 1030, 1031, 1042, 1043, 1054], "singular_": 661, "singular_values_": [538, 545, 548, 1043], "sinha": [1044, 1053, 1054], "sinhrk": [1040, 1041], "sink": [645, 997], "sinoisoid": 147, "sinusoid": [122, 136, 147, 199, 247, 649, 998], "sio": 405, "siola": [1051, 1052], "sip\u0151cz": [1046, 1047, 1048, 1052, 1054], "siqi": 1050, "siqueira": 1046, "sir": 376, "sister": 1024, "site": [377, 379, 387, 397, 418, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 1029, 1044], "situat": [62, 79, 90, 104, 186, 187, 220, 241, 275, 379, 387, 405, 413, 415, 416, 418, 471, 532, 538, 586, 881, 884, 896, 906, 999, 1001, 1007, 1008, 1018, 1021, 1044], "situp": 376, "sivamani": 1046, "sivaprasad": [1039, 1040], "six": [169, 215, 235, 316, 376, 1045], "sixteenth": 1017, "sixth": 374, "size": [37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 61, 64, 67, 69, 72, 74, 75, 77, 79, 80, 81, 85, 87, 88, 90, 91, 93, 94, 95, 99, 100, 105, 109, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 125, 128, 130, 138, 146, 147, 150, 151, 152, 165, 171, 173, 174, 177, 178, 184, 186, 188, 189, 194, 195, 196, 197, 200, 204, 209, 212, 215, 216, 217, 220, 227, 228, 234, 239, 241, 244, 245, 246, 247, 248, 250, 251, 259, 265, 268, 270, 272, 274, 275, 277, 278, 279, 289, 298, 299, 300, 307, 310, 313, 314, 315, 316, 319, 322, 325, 327, 328, 332, 336, 338, 340, 341, 342, 349, 351, 353, 354, 355, 357, 366, 367, 368, 374, 375, 379, 384, 388, 391, 392, 393, 397, 402, 408, 409, 411, 413, 415, 416, 419, 421, 422, 424, 447, 448, 449, 451, 452, 453, 460, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 497, 498, 499, 519, 531, 538, 540, 542, 544, 551, 561, 562, 563, 564, 565, 566, 568, 569, 587, 591, 592, 598, 636, 637, 647, 661, 670, 671, 683, 687, 696, 699, 709, 723, 742, 744, 747, 785, 797, 806, 809, 810, 814, 821, 824, 825, 826, 829, 832, 834, 843, 844, 845, 847, 850, 851, 852, 853, 854, 856, 858, 859, 860, 865, 866, 883, 885, 897, 902, 906, 910, 911, 912, 913, 914, 916, 917, 918, 919, 922, 951, 955, 956, 967, 968, 970, 973, 979, 995, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1015, 1017, 1019, 1020, 1021, 1028, 1029, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1051, 1052, 1054, 1055], "size_cluster_i": 93, "size_mb": 353, "sizeabl": [806, 821, 824], "sk": 554, "skaft": 1050, "skeleton": 1039, "sketch": [2, 23, 192, 368, 371, 388, 643, 644, 645, 969, 1031, 1048], "skew": [2, 48, 147, 217, 245, 251, 312, 327, 371, 409, 415, 643, 644, 645, 646, 884, 896, 1001, 1015, 1031, 1039, 1043, 1052], "skewed": [646, 1043], "skewedchi2sampl": [2, 642, 643, 644, 645, 997, 1043, 1050, 1051], "skf": [259, 415, 823], "skfold": 334, "skforecast": 1024, "skill": 1005, "skimag": [80, 81, 373], "skip": [367, 379, 388, 407, 419, 471, 650, 651, 656, 664, 665, 666, 675, 685, 906, 927, 1040, 1043, 1046, 1048, 1050, 1052, 1055], "skip_check_arrai": 993, "skip_complet": 631, "skip_comput": 1046, "skip_parameter_valid": [471, 906, 1052], "skipper": [1039, 1041, 1042], "skiptestwarn": 927, "skl2onnx": 405, "sklear": 380, "sklearn": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 367, 368, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 391, 392, 393, 396, 397, 398, 402, 405, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "sklearn2pmml": 1024, "sklearn_api": 0, "sklearn_assume_finit": 366, "sklearn_cache_": 321, "sklearn_enable_debug_cython_direct": 380, "sklearn_fail_no_openmp": 377, "sklearn_graph_cache_": 294, "sklearn_is_fit": [133, 1026], "sklearn_run_float32_test": 379, "sklearn_site_joblib": 1044, "sklearn_warning_as_error": 367, "sklearnex": 397, "skop": [1024, 1031], "skorch": 1024, "sktime": [52, 1024], "sl": 214, "slack": 1019, "slai": 353, "slama": [1046, 1048], "slep": [379, 393], "slep000": 394, "slep009": [1047, 1049, 1050], "slep010": [381, 1047], "slep011": 1025, "slep018": [255, 381, 1051], "slep020": 394, "slice": [2, 43, 52, 55, 143, 150, 223, 236, 246, 300, 303, 324, 325, 338, 374, 380, 388, 412, 467, 470, 497, 498, 512, 550, 643, 778, 782, 785, 925, 930, 955, 956, 975, 1048, 1050, 1054], "slice_": [497, 498, 1051], "sliceabl": 959, "slide": [273, 648, 1001, 1023], "slight": [144, 219, 323, 405, 418, 452, 1046], "slightli": [43, 62, 64, 97, 113, 138, 141, 144, 147, 151, 155, 169, 171, 172, 173, 189, 194, 214, 232, 237, 239, 248, 251, 280, 286, 292, 321, 339, 355, 378, 379, 409, 411, 418, 419, 421, 423, 449, 592, 593, 595, 642, 662, 807, 808, 908, 910, 913, 951, 952, 994, 1001, 1015, 1019, 1020, 1021, 1045, 1049, 1050, 1052, 1054, 1055], "slishak": 1050, "sloan": 0, "slogdet": 950, "slope": [188, 212, 216, 231, 411, 494, 727, 752, 1003, 1005], "sloppili": 419, "sloth": [50, 305, 374, 502], "slow": [294, 312, 353, 366, 373, 377, 379, 416, 419, 450, 703, 882, 883, 887, 910, 913, 952, 1002, 1008, 1025, 1043], "slower": [104, 124, 141, 144, 182, 247, 281, 355, 393, 418, 419, 420, 449, 454, 456, 542, 544, 551, 559, 560, 561, 562, 567, 568, 569, 570, 592, 593, 595, 635, 636, 637, 647, 663, 676, 678, 691, 696, 708, 836, 840, 841, 998, 1002, 1003, 1004, 1006, 1008, 1021, 1040, 1047], "slowest": [144, 951, 952], "slowli": [391, 393, 548, 952], "slug": 102, "smacof": [2, 694, 1051], "small": [37, 38, 41, 44, 50, 52, 59, 64, 74, 82, 86, 88, 102, 109, 113, 116, 126, 136, 138, 144, 146, 147, 176, 178, 187, 188, 195, 200, 204, 205, 215, 218, 220, 229, 231, 232, 259, 266, 272, 279, 284, 286, 294, 305, 308, 310, 312, 314, 316, 323, 331, 336, 342, 347, 349, 353, 354, 368, 372, 374, 376, 379, 382, 388, 391, 393, 405, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 424, 444, 446, 448, 449, 450, 452, 461, 462, 466, 478, 500, 502, 542, 544, 545, 551, 559, 560, 561, 565, 566, 567, 568, 586, 593, 594, 606, 611, 612, 654, 658, 659, 660, 662, 663, 683, 686, 687, 807, 808, 822, 833, 836, 865, 866, 873, 901, 910, 913, 952, 994, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1024, 1025, 1029, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "smaller": [2, 37, 47, 61, 75, 80, 88, 113, 135, 150, 169, 176, 177, 182, 202, 203, 205, 218, 245, 289, 298, 299, 307, 312, 329, 342, 349, 354, 379, 408, 411, 413, 415, 416, 418, 420, 442, 443, 449, 453, 457, 459, 518, 538, 539, 561, 562, 563, 564, 565, 566, 568, 569, 597, 614, 623, 637, 650, 651, 653, 654, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 676, 678, 686, 687, 696, 713, 801, 807, 808, 854, 857, 881, 882, 900, 901, 908, 916, 917, 918, 919, 952, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1015, 1017, 1019, 1020, 1021, 1025, 1044, 1049, 1053], "smallest": [111, 112, 214, 292, 329, 357, 374, 411, 413, 420, 531, 545, 634, 658, 659, 660, 686, 687, 694, 698, 699, 804, 807, 808, 818, 823, 878, 931, 1021, 1049], "smallest_ab": 329, "smallest_coef": [113, 531], "smari": [1045, 1046, 1047], "smart": [248, 446, 462, 463, 594], "smartphon": 1029, "smedbergm": 1042, "smedemark": 1046, "smile": [107, 374, 1050], "sminchisescu": [646, 997], "smirnov": 1048, "smith": [1042, 1043, 1044, 1045, 1046, 1048], "sml": [864, 1010], "smo": [908, 909], "smola": [416, 419, 539, 874, 1015, 1020], "smolskii": 1051, "smooth": [43, 80, 81, 87, 169, 176, 207, 215, 230, 318, 342, 376, 394, 411, 417, 418, 421, 451, 452, 541, 542, 543, 550, 561, 562, 563, 564, 568, 569, 570, 594, 595, 623, 626, 680, 843, 844, 845, 847, 885, 889, 897, 916, 917, 918, 919, 1001, 1007, 1015, 1019, 1020, 1021], "smooth_idf": [419, 594, 595], "smoothened_coin": [80, 81], "smoother": [43, 44, 147, 188, 309, 417], "smoothli": 373, "smt": 1052, "smtp": [374, 496], "smujjiga": 1046, "sn": [72, 136, 150, 186, 187, 194, 199, 262, 272], "snake": [325, 327, 586, 889, 1015], "snapshot": [405, 563, 564, 1025], "sne": [51, 184, 233, 234, 235, 236, 238, 292, 518, 529, 696, 1026, 1030, 1031], "snippet": [133, 362, 379, 384, 387, 391, 407, 418, 419, 420, 995, 1015, 1028, 1049], "snowhit": 1047, "snr": 87, "snuderl": 1040, "sny": 51, "snyder": [696, 1002], "so": [30, 37, 43, 48, 51, 52, 55, 64, 77, 88, 89, 94, 98, 112, 141, 143, 144, 145, 146, 150, 154, 171, 176, 187, 189, 192, 195, 214, 215, 241, 248, 251, 266, 272, 285, 289, 292, 298, 299, 302, 308, 309, 313, 318, 319, 322, 334, 342, 353, 355, 361, 362, 366, 367, 368, 373, 374, 377, 378, 379, 381, 383, 384, 385, 387, 388, 393, 402, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 424, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 500, 512, 513, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 699, 709, 712, 720, 730, 760, 782, 792, 801, 802, 803, 804, 807, 808, 810, 811, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 898, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 952, 970, 979, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1015, 1017, 1018, 1019, 1020, 1024, 1025, 1029, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053], "soar": 1051, "sobkevich": 1048, "sobolev": 1040, "soc": [57, 374], "socastro": [1046, 1052, 1055], "socg2006": 450, "social": [187, 383, 394, 411, 1029], "societi": [169, 376, 411, 413, 472, 477, 545, 631, 884, 896, 1001, 1019], "sodhani": 1042, "soft": [2, 130, 156, 157, 379, 393, 573, 574, 904, 912, 1019, 1029, 1041], "softmax": [418, 565, 662, 663, 1001, 1008, 1009], "softw": 1001, "softwar": [0, 169, 366, 376, 379, 387, 391, 393, 405, 419, 631, 639, 662, 995, 1029], "soil_typ": 251, "sokalmichen": [453, 460, 703, 782, 783, 784, 1008], "sokalmichenerdist": 703, "sokalsneath": [453, 460, 703, 782, 783, 784, 1008], "sokalsneathdist": 703, "sok\u00f3\u0142": [1053, 1054], "sole": [100, 379, 391, 411], "soledad": 1048, "soler": [0, 401], "solid": [50, 67, 69, 146, 174, 226, 227, 241, 251, 305, 314, 1029], "solntz": 353, "solosil": 1049, "solut": [80, 194, 199, 203, 205, 219, 228, 241, 247, 285, 324, 342, 377, 393, 405, 408, 410, 411, 413, 415, 416, 419, 420, 452, 454, 456, 535, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 553, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 614, 650, 652, 654, 656, 658, 659, 660, 662, 664, 666, 668, 669, 670, 671, 672, 673, 676, 678, 680, 681, 682, 683, 684, 686, 687, 689, 690, 691, 801, 802, 818, 857, 865, 866, 998, 999, 1001, 1002, 1004, 1009, 1011, 1019, 1020, 1023, 1029, 1036, 1039, 1049, 1050, 1051], "solutu": 1044, "solutusimmensu": 1044, "solv": [2, 44, 45, 99, 171, 203, 246, 272, 291, 378, 379, 380, 381, 384, 391, 399, 411, 413, 415, 416, 421, 450, 456, 465, 481, 535, 541, 542, 543, 547, 549, 550, 551, 552, 639, 641, 650, 656, 658, 659, 668, 669, 674, 676, 678, 681, 689, 690, 691, 723, 838, 908, 909, 912, 952, 996, 999, 1001, 1002, 1005, 1006, 1019, 1020, 1021, 1023, 1024, 1029, 1042, 1046, 1049], "solvabl": 411, "solver": [54, 66, 69, 70, 80, 99, 184, 193, 203, 205, 206, 207, 214, 222, 229, 230, 232, 307, 308, 309, 310, 319, 328, 329, 353, 385, 391, 393, 397, 407, 411, 423, 455, 465, 474, 475, 481, 506, 537, 539, 544, 545, 548, 551, 553, 650, 651, 652, 656, 657, 662, 663, 664, 665, 666, 667, 670, 672, 673, 674, 676, 678, 680, 684, 685, 688, 691, 692, 693, 695, 697, 699, 792, 818, 834, 839, 842, 865, 866, 910, 911, 912, 913, 914, 999, 1002, 1005, 1006, 1009, 1019, 1020, 1026, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "solver_": [676, 678], "solver_opt": 674, "somani": 1048, "some": [0, 42, 43, 44, 47, 48, 52, 57, 61, 62, 64, 72, 79, 83, 86, 88, 89, 91, 95, 100, 103, 106, 109, 111, 112, 116, 121, 136, 137, 141, 144, 147, 148, 150, 151, 152, 155, 156, 165, 171, 173, 176, 177, 178, 179, 180, 182, 183, 184, 187, 188, 189, 190, 192, 194, 196, 198, 199, 201, 202, 203, 204, 208, 209, 214, 215, 218, 222, 223, 228, 231, 232, 234, 236, 241, 245, 248, 251, 258, 259, 260, 265, 266, 267, 272, 273, 274, 275, 278, 280, 286, 289, 291, 295, 298, 303, 308, 309, 312, 317, 322, 323, 324, 325, 326, 327, 328, 329, 338, 339, 341, 342, 349, 351, 353, 354, 355, 361, 362, 366, 367, 368, 372, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 397, 402, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 434, 440, 446, 447, 450, 452, 454, 456, 462, 466, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 500, 503, 512, 513, 519, 527, 528, 537, 538, 540, 545, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 585, 586, 592, 594, 595, 610, 613, 614, 615, 636, 637, 639, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 693, 694, 696, 697, 701, 702, 704, 705, 706, 711, 712, 719, 724, 730, 731, 742, 743, 744, 750, 758, 760, 761, 767, 786, 788, 791, 792, 793, 798, 801, 803, 805, 806, 811, 813, 822, 823, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 934, 935, 961, 994, 995, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1029, 1033, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "some_funct": [379, 942], "some_integ": 415, "some_iter": 379, "some_param": 379, "somebodi": 394, "someestim": 378, "somehow": 188, "someon": [379, 383, 393, 1036], "someth": [187, 235, 289, 353, 379, 382, 383, 387, 419, 924, 926, 1005, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "sometim": [104, 155, 186, 266, 272, 309, 354, 362, 367, 368, 379, 381, 385, 392, 393, 411, 413, 416, 418, 419, 452, 538, 539, 542, 544, 545, 873, 874, 875, 923, 1000, 1001, 1002, 1005, 1010, 1015, 1016, 1020, 1033, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1052], "somewhat": [349, 362, 368, 379, 416, 418, 910, 913, 1001, 1020, 1021], "somewher": [385, 1005], "sommer": 1054, "somya": 1044, "son": [376, 995], "song": 1002, "soni": [51, 1046, 1048], "sonni": 1041, "sonniv": [1051, 1052], "sonoiya": 1046, "sonoma": 318, "soon": [112, 393, 1055], "sooner": 1053, "sophist": [995, 1007], "sorbaro": 1041, "sorensen": 416, "soriano": 1045, "sornarajah": 1041, "sorri": 1044, "sorro": 1045, "sorski": [1050, 1051], "sort": [2, 43, 47, 49, 51, 58, 61, 93, 102, 105, 133, 138, 144, 147, 154, 169, 176, 194, 199, 214, 215, 232, 250, 272, 273, 276, 287, 304, 348, 353, 359, 360, 379, 383, 387, 388, 393, 415, 418, 419, 421, 538, 545, 559, 570, 585, 598, 614, 621, 701, 716, 722, 733, 734, 742, 758, 787, 788, 791, 793, 804, 831, 843, 844, 845, 846, 847, 848, 849, 856, 858, 859, 860, 863, 873, 879, 881, 882, 885, 887, 889, 897, 910, 913, 952, 958, 1001, 1008, 1011, 1015, 1029, 1036, 1040, 1046, 1047, 1048, 1050, 1051, 1054], "sort_graph_by_row_valu": [2, 388, 1051], "sort_index": 289, "sort_result": [848, 849, 856, 858, 859, 860, 1048], "sort_valu": [103, 189, 190, 255, 262, 272, 283, 318, 319], "sorted_idx": [148, 321], "sorted_importances_idx": 189, "sortofamudkip": [1051, 1052], "sought": 785, "soumirai": 1046, "sound": [169, 362], "sounder": 1042, "sourav": [1043, 1046], "sourc": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 373, 376, 378, 379, 380, 382, 383, 385, 387, 388, 391, 392, 397, 405, 408, 412, 416, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 993, 1002, 1015, 1021, 1024, 1026, 1029, 1046, 1050, 1054, 1055], "south": [50, 150, 187, 305, 374, 417], "south_y": 187, "sp": [43, 187, 328, 995], "sp_version": 674, "space": [2, 37, 43, 47, 49, 57, 67, 80, 86, 90, 91, 93, 94, 96, 98, 102, 103, 106, 116, 121, 123, 129, 131, 140, 143, 147, 153, 166, 169, 171, 177, 192, 199, 215, 234, 235, 236, 238, 245, 246, 247, 251, 252, 258, 263, 280, 283, 284, 292, 301, 302, 314, 323, 346, 353, 354, 355, 361, 362, 366, 371, 374, 375, 376, 379, 386, 391, 392, 393, 408, 411, 414, 416, 417, 418, 419, 421, 446, 450, 451, 452, 455, 465, 467, 468, 469, 470, 485, 486, 487, 491, 502, 536, 538, 539, 542, 543, 544, 545, 547, 548, 553, 577, 586, 592, 593, 595, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 636, 637, 642, 644, 645, 646, 647, 692, 693, 694, 696, 697, 698, 700, 703, 804, 807, 808, 810, 818, 827, 838, 848, 849, 856, 857, 858, 859, 868, 873, 874, 880, 885, 900, 901, 902, 921, 956, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1030, 1031, 1036, 1037, 1039, 1044, 1045, 1046, 1050, 1051, 1052], "spacek": 1041, "spain": 318, "spam": [585, 713, 745, 843, 1005, 1007, 1029], "span": [52, 88, 109, 147, 246, 266, 269, 374, 411, 419, 553, 640, 804, 807, 1005], "spanish": 1024, "spannbauer": 1048, "sparciti": 354, "spare": [373, 678, 679], "spark": [374, 1025], "sparrai": 1053, "spars": [2, 25, 45, 46, 47, 51, 53, 55, 57, 66, 74, 75, 87, 88, 90, 102, 108, 109, 110, 120, 122, 140, 153, 184, 193, 194, 201, 202, 203, 206, 208, 209, 213, 230, 245, 247, 273, 279, 285, 292, 310, 322, 326, 329, 335, 352, 355, 361, 366, 371, 373, 374, 375, 379, 381, 382, 383, 384, 391, 392, 393, 405, 411, 412, 418, 419, 421, 422, 426, 433, 441, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 460, 462, 463, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 490, 491, 492, 500, 501, 507, 512, 527, 528, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 589, 590, 592, 593, 594, 595, 597, 598, 607, 608, 609, 610, 611, 612, 613, 633, 634, 635, 637, 642, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 699, 700, 701, 702, 704, 705, 706, 707, 716, 717, 718, 733, 734, 735, 738, 742, 743, 744, 758, 759, 764, 765, 767, 768, 770, 771, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 796, 797, 800, 803, 804, 807, 808, 818, 825, 826, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 871, 872, 873, 875, 877, 878, 879, 880, 881, 883, 885, 886, 887, 888, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 925, 930, 932, 933, 934, 935, 940, 949, 952, 953, 956, 958, 959, 967, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 993, 995, 998, 1001, 1002, 1003, 1005, 1006, 1008, 1018, 1020, 1021, 1025, 1026, 1027, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "sparse_cg": [353, 676, 678, 691, 1001, 1037, 1043, 1045, 1046, 1050, 1052], "sparse_coef_": [650, 656, 664, 666, 1036], "sparse_encod": [2, 546, 654, 655, 656, 657, 658, 659, 660, 667, 668, 669, 686, 687, 688, 689, 690, 1036, 1043, 1044, 1046, 1050], "sparse_encode_parallel": 1036, "sparse_format": [531, 1053], "sparse_func": [1042, 1048], "sparse_input_": 875, "sparse_lasso": 200, "sparse_output": [43, 144, 255, 318, 325, 328, 570, 875, 879, 881, 887, 892, 1015, 1051, 1052], "sparse_output_": [467, 555], "sparse_symmetric_arrai": 990, "sparse_threshold": [188, 467, 470, 1044], "sparsearrai": 1047, "sparsecod": [2, 130, 416, 535, 541, 544, 552, 1043, 1044, 1046, 1048, 1050], "sparsecodingmixin": 1036, "sparsefunc": [2, 388, 979, 980, 981, 982, 983, 984, 985, 1049], "sparsefuncs_fast": [2, 388, 986, 987], "sparsepca": [2, 121, 535, 537, 538, 539, 541, 543, 544, 545, 546, 549, 550, 1036, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1054], "sparser": [88, 194, 205, 285, 416, 474, 481, 543, 547, 1001, 1008, 1019], "sparserandomproject": [2, 235, 245, 900, 1017, 1037, 1042, 1050, 1052, 1053], "sparsetool": 1043, "sparsifi": [46, 199, 366, 662, 663, 670, 671, 672, 680, 681, 682, 908, 988, 1038], "sparsiti": [2, 53, 66, 113, 127, 184, 193, 199, 202, 207, 225, 229, 230, 247, 349, 354, 366, 393, 413, 416, 418, 420, 505, 506, 531, 535, 541, 542, 543, 544, 547, 549, 550, 551, 650, 656, 661, 662, 680, 682, 725, 727, 728, 877, 883, 888, 893, 998, 1001, 1008, 1015, 1026, 1038], "sparsity_en_lr": 205, "sparsity_l1_lr": 205, "sparsity_l2_lr": 205, "sparsity_ratio": 366, "spatial": [81, 82, 88, 190, 199, 231, 309, 374, 393, 411, 422, 447, 449, 453, 455, 460, 683, 696, 764, 767, 782, 783, 784, 785, 796, 797, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 1001, 1008, 1015, 1038, 1042, 1049, 1052], "spawn": [366, 391, 804, 818, 829, 830, 831, 1047], "spdx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361], "speak": [354, 366, 379, 1019], "spearman": [190, 639, 640, 996], "spearmanr": 190, "spec": [1051, 1052], "speci": [2, 42, 118, 184, 251, 293, 353, 372, 417, 502, 710, 793, 853, 912, 923, 1005, 1011, 1026, 1031, 1036], "special": [146, 187, 204, 232, 289, 302, 318, 342, 373, 375, 381, 385, 391, 393, 411, 414, 416, 467, 470, 557, 559, 563, 829, 920, 994, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1021, 1043, 1046, 1048, 1050, 1055], "special_charact": [920, 1021], "species_nam": [50, 305], "specif": [2, 43, 50, 51, 58, 64, 70, 79, 88, 95, 98, 102, 104, 141, 150, 155, 176, 179, 184, 187, 188, 192, 218, 232, 266, 267, 272, 289, 312, 321, 322, 326, 329, 346, 353, 354, 355, 362, 366, 367, 374, 379, 382, 384, 385, 387, 391, 393, 397, 405, 407, 411, 412, 415, 416, 418, 419, 420, 421, 435, 500, 507, 538, 555, 561, 568, 571, 572, 573, 574, 578, 592, 595, 597, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 629, 644, 647, 650, 651, 656, 662, 676, 691, 701, 703, 716, 717, 804, 805, 806, 811, 812, 813, 818, 831, 844, 925, 944, 946, 947, 967, 980, 981, 982, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1019, 1021, 1022, 1023, 1028, 1036, 1040, 1044, 1045, 1046, 1047, 1050, 1051, 1053], "specifi": [2, 43, 58, 64, 88, 121, 144, 145, 150, 172, 175, 177, 178, 179, 203, 215, 222, 257, 266, 280, 366, 367, 373, 379, 381, 387, 388, 392, 393, 402, 405, 409, 411, 412, 415, 416, 418, 420, 421, 423, 425, 440, 444, 448, 453, 455, 466, 467, 470, 472, 473, 475, 476, 477, 478, 479, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 507, 519, 531, 535, 537, 541, 542, 544, 545, 550, 551, 556, 561, 563, 564, 565, 566, 568, 571, 572, 587, 588, 597, 598, 601, 606, 614, 615, 624, 635, 636, 637, 642, 647, 650, 651, 652, 655, 656, 657, 659, 660, 662, 663, 664, 665, 666, 667, 669, 672, 673, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 691, 695, 702, 704, 706, 713, 715, 733, 734, 742, 746, 758, 775, 783, 784, 787, 788, 791, 804, 807, 808, 810, 811, 813, 817, 818, 821, 826, 827, 828, 829, 830, 831, 832, 833, 835, 839, 842, 843, 844, 846, 847, 848, 849, 853, 858, 881, 882, 883, 886, 887, 889, 904, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 947, 954, 988, 995, 1001, 1002, 1004, 1005, 1008, 1012, 1013, 1015, 1018, 1019, 1020, 1036, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "spector": 415, "spectral": [2, 53, 56, 71, 79, 80, 82, 88, 102, 184, 235, 236, 333, 335, 353, 354, 355, 379, 419, 452, 454, 455, 456, 465, 472, 473, 474, 475, 476, 477, 478, 479, 491, 515, 517, 595, 692, 693, 694, 695, 696, 699, 723, 799, 1008, 1018, 1026, 1030, 1031, 1036, 1037], "spectral_clust": [2, 80, 99, 1044, 1046, 1048, 1049, 1050, 1051, 1053], "spectral_embed": [2, 393, 1002, 1037, 1040, 1042, 1044, 1046, 1049, 1050, 1051, 1053], "spectralbiclust": [2, 408, 456, 1038, 1042, 1043, 1047], "spectralclust": [2, 79, 325, 411, 443, 1008, 1036, 1037, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "spectralcoclust": [2, 57, 59, 408, 454, 1038, 1043, 1047], "spectralembed": [2, 85, 234, 235, 236, 692, 693, 694, 696, 1002, 1037, 1042, 1046, 1050, 1051, 1053], "spectrum": [105, 528, 548, 699, 952, 1029, 1044], "speech": [419, 1005], "speed": [80, 81, 90, 102, 124, 133, 141, 183, 188, 200, 203, 207, 251, 292, 323, 332, 353, 355, 368, 379, 382, 388, 391, 393, 407, 409, 411, 416, 418, 419, 422, 446, 447, 450, 451, 452, 453, 455, 460, 462, 463, 464, 465, 535, 536, 614, 631, 636, 637, 638, 643, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 685, 688, 696, 801, 802, 810, 832, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 883, 952, 994, 997, 1002, 1004, 1006, 1019, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "speedi": 366, "speedup": [328, 366, 416, 418, 654, 658, 661, 1036, 1037, 1038, 1039, 1051, 1055], "speer": 1038, "spell": 419, "spend": 419, "spent": [292, 318, 380, 385, 832, 1051], "sperret6": 1054, "sphere": [135, 184, 233, 234, 237, 238, 239, 292, 354, 417, 523, 593, 692, 693, 694, 695, 696, 768, 937, 999, 1003, 1008, 1026], "sphere_data": 236, "spheric": [70, 90, 115, 151, 236, 259, 261, 262, 305, 375, 768, 801, 802, 1001, 1004, 1008], "sphinx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 367, 383, 393, 397, 404, 1036, 1043], "sphinxcontrib": [379, 397, 404], "sphinxext": [379, 397, 404], "sphx_glr_auto_examples_cluster_plot_cluster_iri": [411, 450], "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1036, "spidlen": [696, 1002], "spie": [169, 376], "spielman": 1046, "spike": 188, "spikebh": 1050, "spikhalskii": 1041, "spiki": 43, "spin": 387, "spine": [46, 54, 70, 225, 312], "spirit": 416, "spite": 1007, "spline": [2, 184, 193, 194, 287, 297, 520, 521, 522, 676, 869, 883, 887, 1024, 1026, 1049], "spline_": 43, "splines_df": 43, "splinetransform": [2, 43, 215, 251, 324, 883, 1015, 1049, 1051, 1052], "split": [2, 43, 44, 45, 50, 52, 54, 55, 61, 63, 64, 67, 68, 102, 126, 135, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 160, 165, 186, 187, 190, 199, 209, 210, 214, 217, 222, 232, 242, 251, 258, 259, 265, 266, 267, 270, 272, 277, 279, 282, 286, 289, 295, 301, 307, 309, 313, 314, 319, 325, 327, 334, 342, 353, 355, 361, 374, 386, 392, 393, 397, 402, 409, 410, 411, 416, 418, 419, 420, 440, 445, 446, 475, 476, 482, 483, 501, 535, 541, 543, 546, 550, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 592, 593, 595, 598, 606, 651, 655, 657, 659, 665, 667, 669, 677, 679, 699, 708, 709, 721, 735, 741, 761, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 842, 848, 849, 865, 866, 889, 893, 894, 896, 897, 898, 899, 916, 917, 918, 919, 975, 994, 997, 1001, 1002, 1008, 1011, 1012, 1013, 1015, 1019, 1021, 1025, 1031, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "split0_test_precis": [804, 818], "split0_test_scor": [804, 818, 1042], "split0_train_scor": [804, 818, 1042], "split1_test_scor": [804, 818], "split1_train_scor": [804, 818], "split2_test_scor": 804, "split_cod": 416, "split_sign": [535, 541, 546], "splitter": [43, 248, 327, 328, 393, 402, 415, 440, 475, 568, 569, 571, 572, 598, 606, 651, 655, 657, 659, 663, 665, 667, 669, 677, 679, 804, 806, 807, 808, 809, 810, 818, 819, 820, 823, 824, 827, 828, 829, 830, 831, 832, 833, 835, 839, 842, 916, 917, 918, 919, 1021, 1025, 1042, 1043, 1044, 1045, 1052, 1053, 1054, 1055], "splot": [258, 263], "splt": 215, "sply88": 1050, "spmatrix": 1053, "spolski": 419, "sport": [57, 374], "spot": [86, 243, 411], "spottabl": 385, "spread": [43, 75, 236, 273, 312, 331, 332, 333, 336, 349, 366, 379, 411, 455, 465, 519, 885, 897, 905, 1005], "spring": [43, 52, 188], "springboard": 1024, "springer": [138, 139, 149, 176, 271, 409, 411, 415, 416, 418, 524, 539, 563, 564, 694, 698, 700, 709, 724, 730, 744, 745, 760, 801, 916, 917, 1002, 1005, 1006, 1012, 1021], "sprint": [378, 379, 1036], "spuriou": [342, 387, 1015, 1049, 1050, 1051], "spy": 208, "sq": 773, "sqeuclidean": [73, 453, 460, 782, 783, 784], "sqft": 251, "sql": 373, "sqr": 75, "sqrt": [51, 111, 112, 113, 124, 130, 139, 160, 190, 194, 196, 237, 239, 253, 257, 258, 259, 262, 263, 272, 347, 349, 411, 418, 419, 421, 466, 472, 473, 474, 475, 476, 477, 478, 479, 542, 544, 551, 561, 562, 563, 564, 568, 569, 623, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 703, 735, 767, 768, 773, 888, 901, 916, 917, 918, 919, 997, 1001, 1002, 1005, 1007, 1017, 1050], "squar": [2, 43, 44, 52, 94, 103, 110, 111, 112, 114, 115, 122, 123, 131, 138, 148, 150, 151, 169, 171, 176, 184, 186, 187, 193, 194, 196, 197, 199, 203, 204, 210, 214, 216, 219, 224, 231, 232, 244, 245, 247, 260, 287, 316, 323, 324, 326, 339, 353, 371, 376, 379, 385, 388, 393, 411, 413, 414, 416, 417, 418, 422, 423, 434, 443, 445, 446, 447, 449, 450, 452, 453, 457, 460, 462, 463, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 505, 535, 541, 543, 545, 547, 549, 550, 551, 553, 556, 558, 560, 562, 563, 564, 566, 569, 572, 574, 594, 595, 596, 599, 600, 602, 603, 604, 608, 609, 610, 613, 615, 619, 626, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 686, 687, 689, 690, 691, 692, 694, 696, 698, 700, 713, 725, 726, 727, 728, 754, 755, 762, 763, 767, 773, 774, 789, 794, 795, 834, 841, 842, 850, 851, 854, 855, 856, 858, 859, 866, 869, 888, 908, 909, 911, 913, 914, 915, 917, 919, 950, 977, 990, 996, 998, 999, 1008, 1009, 1013, 1019, 1021, 1026, 1027, 1031, 1036, 1039, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055], "square_dist": 1048, "squared_epsilon_insensit": [671, 680, 682, 909, 1001, 1042], "squared_error": [46, 52, 130, 147, 148, 324, 418, 562, 563, 564, 566, 569, 675, 680, 682, 697, 917, 919, 1019, 1021, 1049, 1052, 1053], "squared_hing": [221, 349, 670, 680, 908, 915, 1001, 1020], "squared_loss": [391, 1049], "squareform": 190, "squash": [251, 383, 421, 535, 541, 546, 552], "squeez": [107, 177, 178, 251, 292, 312, 1055], "sr": 1029, "sr_color": 238, "sr_err": 238, "sr_lle": 238, "sr_point": 238, "sr_tsne": 238, "srajan": 1044, "sre": 1051, "srebro": 1019, "srep30750": 411, "sri": [675, 1001, 1043, 1044], "sridharan": 1041, "sriharsha": [1044, 1045], "srikantan": 1001, "srimukh": 1048, "srinath": [1050, 1051], "srinivasan": [1044, 1047], "sripada": 1048, "srivastava": [1039, 1051, 1054], "srivatsan": [1042, 1043, 1046], "srvanrel": 1042, "sr\u0161e\u0148": 1054, "ss": 415, "sse": 446, "sseg": 1041, "ssrn": [214, 232], "sss": 824, "ssvm": 391, "st": [81, 100, 272, 326, 1039, 1042, 1044], "st30": 336, "st50": 336, "st_pipelin": 335, "sta4273": 648, "stabil": [72, 139, 145, 187, 235, 277, 312, 349, 354, 393, 408, 449, 654, 658, 674, 846, 865, 866, 884, 896, 951, 995, 1001, 1004, 1015, 1025, 1036, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "stabilis": 194, "stabl": [43, 64, 187, 208, 212, 216, 292, 322, 349, 354, 377, 379, 383, 388, 393, 397, 415, 419, 423, 474, 475, 481, 537, 545, 659, 676, 678, 691, 696, 728, 756, 951, 952, 1001, 1007, 1008, 1015, 1025, 1032, 1036, 1037, 1042, 1047, 1049, 1053], "stack": [2, 14, 107, 134, 144, 158, 182, 184, 214, 243, 268, 297, 361, 378, 387, 391, 393, 417, 467, 469, 470, 500, 519, 566, 569, 571, 572, 616, 631, 632, 634, 657, 677, 705, 829, 831, 869, 873, 881, 882, 888, 978, 995, 1025, 1026, 1027, 1028, 1031, 1036, 1039, 1043, 1044, 1045, 1046, 1047], "stack_method": [418, 571], "stack_method_": [418, 571, 572], "stacking_regressor": 155, "stackingclassifi": [2, 321, 362, 393, 402, 418, 572, 995, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1055], "stackingregressor": [2, 155, 321, 393, 402, 418, 571, 995, 1046, 1047, 1048, 1049, 1050, 1053, 1055], "stackingregressorinot": 155, "stackoverflow": [384, 387, 391], "stade": 1040, "stage": [0, 46, 63, 104, 135, 140, 145, 148, 266, 383, 393, 407, 411, 418, 451, 557, 558, 563, 564, 565, 566, 592, 593, 595, 606, 1002, 1015, 1023, 1044, 1048], "staged_decision_funct": [557, 563, 565], "staged_predict": [135, 145, 148, 418, 557, 558, 563, 564, 565, 566, 1036, 1048], "staged_predict_proba": [146, 149, 557, 563, 565, 1036], "staged_scor": [557, 558], "stagewis": 135, "stagg": 1049, "stai": [43, 52, 63, 72, 130, 187, 354, 378, 379, 383, 393, 394, 1010, 1028, 1042], "stairstep": 279, "stalei": [1045, 1046], "stall": [378, 382], "stallei": 1048, "stan": [846, 1053], "stand": [275, 355, 383, 391, 416, 535, 541, 549, 550, 600, 613, 682, 709, 721, 740, 741, 761, 790, 792, 799, 1004, 1005, 1011], "standalon": [385, 662, 908], "standard": [2, 50, 51, 52, 58, 63, 68, 70, 88, 94, 102, 103, 105, 111, 112, 116, 122, 135, 138, 140, 141, 142, 143, 151, 155, 169, 171, 176, 178, 180, 187, 194, 202, 203, 212, 214, 223, 234, 235, 236, 246, 251, 262, 266, 267, 270, 271, 272, 273, 275, 312, 317, 340, 353, 366, 367, 371, 372, 373, 375, 376, 377, 379, 381, 382, 384, 385, 388, 391, 393, 397, 405, 407, 411, 413, 414, 415, 419, 421, 449, 467, 471, 475, 491, 500, 505, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 526, 528, 529, 534, 536, 539, 545, 556, 594, 598, 615, 638, 648, 649, 676, 677, 678, 679, 680, 682, 691, 693, 697, 792, 810, 825, 827, 845, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 872, 877, 878, 881, 884, 885, 886, 888, 896, 897, 898, 899, 906, 908, 909, 934, 994, 997, 1001, 1002, 1005, 1007, 1008, 1009, 1011, 1019, 1020, 1025, 1029, 1031, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1054], "standard_coef_": 1047, "standard_intercept_": 1047, "standard_norm": [362, 691], "standard_scal": 253, "standard_t": 123, "standardscal": [2, 45, 49, 67, 79, 82, 88, 91, 95, 103, 105, 116, 131, 155, 169, 187, 194, 201, 203, 205, 214, 230, 232, 242, 243, 251, 252, 253, 255, 266, 269, 279, 286, 295, 300, 301, 307, 314, 317, 321, 322, 324, 325, 326, 328, 329, 342, 345, 362, 368, 379, 381, 384, 388, 392, 412, 415, 432, 469, 470, 571, 680, 682, 868, 869, 872, 885, 899, 908, 909, 910, 911, 913, 914, 995, 1002, 1009, 1015, 1019, 1020, 1022, 1038, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "standardscalerifittedstandardscal": 255, "standardscalerstandardscal": [103, 155, 187, 242, 243, 252, 253, 255, 266, 279, 286, 322, 325], "standpoint": 83, "stanford": [169, 376, 653, 686, 687, 843, 846, 847, 901, 1003], "stanislav": [1051, 1052], "stanlei": [1050, 1051, 1052], "stap": 1044, "stapl": 1040, "star": [70, 119, 158, 379], "stareh": 1047, "start": [0, 43, 46, 49, 51, 52, 58, 63, 86, 91, 97, 100, 106, 116, 124, 140, 145, 147, 166, 169, 176, 178, 188, 192, 195, 196, 203, 214, 215, 216, 222, 232, 234, 238, 242, 246, 248, 260, 266, 272, 280, 292, 325, 327, 332, 353, 361, 362, 366, 367, 368, 379, 380, 381, 383, 384, 385, 391, 393, 397, 408, 411, 415, 416, 420, 421, 443, 445, 453, 457, 459, 542, 614, 621, 636, 649, 657, 663, 670, 671, 672, 680, 681, 682, 694, 698, 785, 786, 793, 801, 802, 804, 807, 808, 818, 850, 851, 852, 854, 856, 864, 958, 988, 994, 1001, 1004, 1009, 1010, 1019, 1025, 1029, 1039, 1041, 1044, 1046, 1048, 1049, 1050, 1051, 1052], "start_": 47, "start_bodi": 47, "start_d": 47, "start_idx": [51, 237], "start_reut": 47, "start_tim": [46, 49, 57, 142, 145, 155, 171, 203, 235], "start_titl": 47, "start_top": 47, "startstart": 399, "startswith": [52, 102, 235, 305], "startup": 1029, "stat": [2, 45, 47, 49, 102, 111, 169, 171, 190, 269, 272, 280, 284, 297, 323, 331, 332, 376, 388, 392, 413, 477, 596, 599, 600, 602, 603, 604, 608, 609, 610, 613, 686, 687, 808, 816, 818, 916, 917, 954, 994, 1001, 1015, 1043, 1045, 1049], "stat_learn_tut_index": [160, 161, 162], "state": [37, 86, 90, 102, 104, 111, 150, 216, 245, 253, 258, 266, 278, 323, 362, 367, 368, 379, 381, 385, 387, 391, 393, 394, 410, 418, 419, 424, 443, 446, 450, 452, 457, 462, 478, 548, 593, 683, 807, 808, 816, 818, 820, 848, 849, 855, 903, 904, 937, 994, 995, 1001, 1007, 1010, 1017, 1025, 1029, 1038, 1040, 1042, 1044, 1046, 1049, 1052], "state_to_print": 380, "stateless": [102, 354, 368, 393, 419, 586, 587, 593, 642, 871, 872, 880, 927, 988, 1015, 1052, 1055], "statement": [187, 381, 384, 387, 391, 393, 416], "static": [379, 381, 385, 387, 650, 651, 656, 657, 664, 665, 666, 667], "station": 176, "stationari": [175, 421, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "statist": [2, 47, 52, 112, 135, 138, 139, 149, 164, 168, 169, 184, 186, 187, 188, 189, 199, 201, 218, 264, 266, 269, 271, 274, 281, 289, 291, 312, 318, 323, 362, 372, 374, 376, 385, 393, 409, 410, 411, 412, 413, 415, 416, 418, 420, 436, 472, 477, 497, 498, 520, 521, 522, 524, 526, 545, 557, 563, 564, 566, 608, 609, 610, 613, 631, 634, 638, 639, 648, 653, 660, 694, 698, 700, 714, 720, 725, 727, 728, 735, 747, 792, 804, 820, 838, 865, 866, 884, 885, 886, 888, 893, 896, 897, 899, 913, 916, 917, 979, 994, 995, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1012, 1013, 1015, 1019, 1020, 1021, 1022, 1023, 1026, 1041, 1044, 1047, 1048, 1050, 1051, 1054], "statistician": [393, 888], "statisticmonthhourtempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64": 52, "statistics_": 634, "statlearnspars": [725, 727, 728], "statlib": 374, "statnikov": 1005, "statsmodel": [1001, 1024], "statu": [52, 133, 328, 373, 397, 500, 848, 849, 1054], "statweb": [653, 686, 687], "staub": 1042, "staubda": 1039, "std": [43, 50, 51, 52, 72, 80, 83, 87, 94, 99, 110, 112, 113, 122, 123, 124, 142, 143, 144, 150, 155, 177, 180, 182, 183, 187, 195, 202, 223, 245, 270, 271, 272, 274, 275, 277, 280, 282, 286, 287, 318, 334, 345, 354, 362, 393, 411, 415, 418, 519, 610, 613, 833, 888, 899, 1015, 1044, 1048], "std_": [276, 1041], "std_auc": 282, "std_display_styl": [247, 274, 810, 827], "std_error": 160, "std_fit_tim": [141, 294, 804, 818], "std_i": 187, "std_precis": 270, "std_predict": 178, "std_predictions_gpr": 171, "std_recal": 270, "std_scaler": 329, "std_score": [354, 1049], "std_score_tim": [141, 273, 804, 818], "std_test_precis": 270, "std_test_recal": 270, "std_test_scor": [103, 105, 141, 160, 168, 271, 272, 273, 280, 294, 475, 598, 804, 818, 1042, 1049], "std_time": 1042, "std_tpr": 282, "std_train_scor": [804, 818, 1042], "std_y_pr": 176, "stderr": [51, 837], "stdin": 387, "stdout": [47, 121, 222, 837, 857, 865, 866], "stds_california": 183, "stds_diabet": 183, "steadi": [903, 904], "steelblu": [122, 123, 157], "steep": [2, 172, 188, 281, 282, 411, 415, 421, 453, 459], "stef": [631, 995], "stefan": [1039, 1040, 1044, 1046], "stefani": [0, 1049, 1051, 1052, 1053, 1054, 1055], "stefanini": 1050, "stefano": 1038, "steffen": 1054, "stehl": [1050, 1051], "stein": 1042, "steinbach": [411, 1051, 1053], "steinfurt": [1046, 1048], "steingold": [1043, 1044], "steinlei": [411, 709], "steinley2004": 709, "stella": [411, 455, 465], "stellalin7": 1051, "stem": [138, 145, 189, 213, 263, 285, 415, 419, 997, 1007], "step": [52, 58, 63, 69, 77, 87, 88, 91, 100, 102, 103, 104, 105, 106, 112, 116, 124, 128, 135, 140, 143, 144, 145, 155, 166, 167, 168, 173, 176, 187, 189, 214, 222, 232, 242, 243, 246, 252, 255, 263, 266, 270, 273, 279, 281, 286, 292, 294, 295, 300, 307, 310, 314, 317, 318, 322, 325, 336, 338, 342, 354, 355, 357, 362, 366, 374, 377, 378, 379, 381, 382, 384, 387, 391, 393, 405, 408, 409, 411, 413, 414, 416, 418, 419, 420, 445, 450, 452, 540, 541, 542, 543, 550, 567, 592, 593, 595, 597, 598, 601, 610, 631, 648, 652, 670, 671, 673, 680, 682, 683, 684, 698, 704, 801, 802, 804, 807, 808, 818, 839, 840, 841, 842, 864, 865, 866, 868, 869, 871, 908, 909, 910, 911, 913, 914, 951, 952, 975, 979, 995, 1001, 1004, 1009, 1010, 1015, 1019, 1021, 1022, 1024, 1028, 1036, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1052, 1054], "stephan": [712, 1039, 1045, 1046, 1048], "stephani": 1047, "stephen": [1029, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049], "stepwis": [150, 639, 658, 659, 660, 686, 687, 1001], "stern": [792, 1005], "steve": [1038, 1040, 1044, 1049, 1051], "steven": [1038, 1039, 1041, 1043, 1044, 1049, 1051, 1052, 1054], "steward": 1043, "stewart": [1041, 1046, 1049, 1051, 1054], "stick": [48, 801, 1004], "stijn": 1043, "stikhin": 1046, "still": [43, 52, 64, 68, 79, 86, 88, 90, 95, 113, 118, 125, 147, 150, 155, 171, 177, 186, 187, 189, 190, 194, 199, 202, 214, 216, 232, 246, 275, 281, 285, 312, 323, 324, 327, 353, 354, 362, 368, 373, 378, 379, 383, 384, 385, 387, 393, 411, 415, 418, 419, 422, 443, 447, 457, 477, 500, 631, 636, 639, 641, 662, 663, 721, 760, 782, 785, 796, 797, 806, 807, 808, 821, 824, 886, 888, 908, 932, 957, 994, 995, 999, 1001, 1004, 1005, 1008, 1011, 1013, 1020, 1021, 1023, 1025, 1028, 1029, 1036, 1038, 1041, 1042, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1054, 1055], "stine": [1044, 1045], "stochast": [2, 46, 91, 145, 146, 149, 161, 184, 192, 193, 201, 236, 238, 241, 246, 298, 300, 301, 306, 309, 324, 341, 411, 416, 418, 465, 491, 500, 506, 507, 508, 518, 526, 540, 548, 563, 564, 608, 631, 635, 643, 662, 663, 672, 676, 678, 680, 681, 682, 683, 691, 692, 693, 694, 696, 834, 857, 864, 865, 866, 869, 878, 912, 951, 952, 978, 994, 1008, 1009, 1011, 1026, 1027, 1030, 1031, 1036, 1037, 1040, 1041, 1043, 1045, 1047], "stochastic_gradi": [1038, 1039, 1045], "stock": [42, 80, 85, 184, 234, 235, 411, 413, 457, 474, 475, 693, 1002, 1026], "stogbauer": [611, 612], "stojanov": [1050, 1051], "stolbunov": 1041, "stone": [379, 916, 917, 1021], "stop": [43, 51, 55, 79, 95, 134, 135, 141, 176, 178, 184, 188, 193, 201, 216, 316, 322, 379, 381, 387, 388, 393, 411, 416, 418, 420, 443, 444, 446, 448, 450, 452, 455, 457, 465, 466, 474, 475, 481, 485, 486, 487, 493, 500, 512, 513, 536, 540, 541, 542, 543, 544, 547, 549, 550, 551, 557, 558, 561, 562, 563, 564, 565, 566, 568, 569, 592, 593, 595, 606, 621, 631, 648, 649, 650, 652, 653, 656, 660, 662, 663, 670, 671, 672, 673, 675, 680, 681, 682, 684, 695, 696, 699, 718, 754, 801, 802, 834, 865, 866, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 958, 978, 994, 1001, 1009, 1010, 1020, 1021, 1025, 1026, 1027, 1029, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "stop_n_inli": [675, 1001], "stop_prob": 675, "stop_scor": [675, 1001], "stop_word": [54, 57, 353, 354, 419, 592, 593, 595], "stop_words_": 1054, "stopiter": 1048, "stopword": 492, "storag": [0, 355, 393, 662, 663, 670, 671, 672, 680, 681, 682, 908, 1008, 1020, 1039, 1044], "storch": 1045, "store": [2, 68, 86, 87, 102, 104, 112, 118, 166, 179, 192, 200, 203, 218, 235, 242, 252, 262, 266, 277, 281, 331, 355, 361, 366, 373, 374, 379, 381, 386, 387, 388, 391, 393, 405, 407, 412, 414, 416, 418, 419, 421, 422, 441, 443, 447, 449, 453, 460, 467, 470, 472, 473, 476, 477, 478, 479, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 507, 512, 538, 539, 545, 553, 554, 559, 560, 561, 562, 567, 568, 569, 570, 573, 574, 589, 593, 614, 615, 631, 635, 636, 639, 653, 654, 658, 664, 665, 666, 667, 670, 671, 677, 679, 680, 681, 682, 692, 693, 694, 696, 701, 702, 704, 705, 706, 785, 801, 802, 804, 810, 818, 826, 827, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 863, 879, 886, 888, 889, 903, 904, 905, 934, 935, 961, 962, 975, 978, 990, 995, 997, 1001, 1006, 1008, 1017, 1020, 1021, 1024, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "store_cent": [449, 1053], "store_covari": [70, 553, 554, 1041, 1043], "store_cv_result": [266, 677, 679, 826, 1054], "store_cv_valu": [677, 679, 1044, 1047, 1054], "store_precis": [69, 110, 472, 473, 476, 477, 478, 479], "stori": [186, 272, 289, 374, 1004], "stork": 999, "stott": 1044, "stoyanov": [1044, 1045], "str": [47, 49, 52, 91, 93, 129, 131, 143, 167, 232, 251, 272, 284, 292, 302, 340, 353, 373, 374, 388, 419, 422, 423, 427, 432, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 460, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 580, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 621, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 696, 700, 701, 702, 703, 704, 706, 711, 713, 715, 717, 731, 733, 734, 736, 737, 742, 746, 775, 778, 782, 783, 784, 785, 786, 787, 788, 791, 793, 796, 797, 803, 804, 805, 806, 807, 808, 810, 811, 813, 815, 816, 818, 822, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 927, 929, 930, 933, 934, 935, 938, 942, 944, 948, 960, 961, 962, 964, 967, 988, 989, 992, 1051], "str_": [51, 281, 497, 504, 508, 514, 876], "strai": 1010, "straight": [126, 204, 210, 212, 269, 346, 366], "straightforward": [313, 378, 410, 416, 1029], "straka": 1048, "strateg": 394, "strategi": [2, 30, 43, 52, 85, 87, 91, 94, 103, 144, 149, 150, 155, 161, 166, 168, 182, 183, 184, 189, 199, 203, 214, 222, 232, 243, 251, 253, 264, 266, 271, 273, 275, 276, 277, 279, 280, 281, 282, 284, 286, 291, 306, 309, 311, 313, 314, 318, 319, 321, 322, 325, 355, 365, 381, 385, 392, 393, 405, 410, 415, 418, 419, 420, 423, 440, 441, 442, 448, 450, 455, 465, 475, 506, 508, 516, 518, 526, 537, 542, 555, 556, 565, 566, 568, 569, 571, 572, 592, 593, 595, 596, 598, 606, 631, 632, 634, 638, 649, 651, 655, 657, 659, 665, 667, 669, 677, 679, 695, 699, 708, 715, 717, 736, 759, 761, 799, 804, 806, 807, 808, 810, 818, 821, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 865, 866, 873, 878, 889, 903, 908, 910, 913, 916, 917, 918, 919, 975, 994, 995, 1004, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1019, 1020, 1021, 1026, 1031, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1054], "stratif": [805, 806, 812, 813, 820, 822, 823, 824, 975, 1045], "stratifi": [2, 44, 126, 142, 151, 165, 189, 229, 242, 251, 255, 266, 267, 272, 275, 281, 295, 300, 301, 321, 381, 393, 410, 555, 563, 571, 572, 606, 663, 670, 672, 680, 803, 804, 807, 808, 810, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 842, 857, 865, 975, 1005, 1008, 1041, 1042, 1043, 1045, 1046, 1049], "stratifiedgroupkfold": [2, 267, 1049], "stratifiedkfold": [2, 168, 259, 267, 278, 282, 334, 415, 440, 571, 572, 598, 606, 663, 677, 804, 805, 807, 808, 809, 810, 812, 814, 818, 822, 824, 827, 828, 829, 830, 831, 832, 833, 835, 889, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1049], "stratifiedshufflesplit": [2, 267, 342, 415, 1036, 1037, 1042, 1043, 1049], "stream": [47, 411, 416, 419, 465, 593, 877, 878, 888, 997, 1044, 1047], "stream_reuters_docu": 47, "streamhandl": 1047, "streamlin": 1001, "street": [155, 169, 376], "strehl": 411, "strength": [51, 155, 178, 202, 214, 218, 273, 285, 321, 366, 414, 418, 449, 571, 572, 647, 652, 653, 656, 662, 663, 673, 676, 677, 678, 679, 680, 682, 684, 691, 787, 865, 866, 908, 909, 913, 914, 994, 1001, 1008, 1011, 1019, 1020], "stress": [694, 698, 1002, 1051], "stress_": 694, "stretch": [238, 261], "stretched_gaussian": 261, "strickland": 1042, "strict": [362, 377, 393, 407, 416, 507, 539, 592, 593, 595, 1001, 1036, 1045, 1048, 1054], "stricter": 182, "strictli": [64, 214, 232, 248, 312, 327, 354, 384, 393, 409, 414, 416, 418, 419, 512, 513, 539, 545, 548, 565, 566, 592, 595, 606, 646, 674, 675, 677, 679, 699, 704, 743, 770, 804, 807, 808, 814, 818, 831, 857, 884, 896, 900, 901, 903, 904, 908, 909, 913, 914, 950, 994, 996, 1001, 1005, 1015, 1019, 1037, 1047, 1052], "striebel": [1042, 1043], "strife": 1002, "strike": [145, 188, 218], "string": [2, 47, 103, 143, 179, 232, 243, 266, 276, 324, 329, 355, 366, 373, 374, 379, 380, 381, 385, 393, 412, 415, 418, 419, 420, 422, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 490, 492, 493, 500, 509, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 621, 624, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 703, 713, 715, 723, 736, 766, 769, 775, 778, 782, 783, 784, 785, 796, 797, 801, 802, 804, 807, 808, 810, 818, 826, 827, 831, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 925, 932, 934, 935, 943, 944, 945, 968, 988, 989, 994, 995, 1005, 1018, 1020, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "strip": [54, 232, 354, 366, 373, 374, 500], "strip_acc": [592, 593, 595], "strip_accents_unicod": 1046, "stripe": 315, "stripplot": 187, "strive": [378, 394, 1029], "strong": [32, 43, 52, 87, 171, 184, 186, 187, 193, 207, 211, 212, 218, 219, 220, 247, 291, 319, 349, 409, 416, 418, 528, 653, 676, 998, 999, 1001, 1002, 1004, 1012, 1020, 1026], "stronger": [273, 647, 656, 662, 663, 676, 677, 678, 679, 680, 682, 691], "strongest": [55, 207], "strongli": [62, 64, 113, 116, 124, 144, 148, 187, 197, 229, 248, 278, 353, 379, 396, 397, 409, 418, 662, 740, 799, 1001, 1002, 1031, 1045, 1052], "stroudsburg": [905, 1018], "strubel": 1049, "struct": [377, 393, 1039], "structur": [0, 2, 42, 48, 52, 53, 54, 55, 58, 59, 71, 75, 76, 78, 79, 80, 85, 86, 87, 88, 89, 95, 99, 113, 131, 151, 170, 184, 211, 234, 235, 238, 243, 248, 263, 267, 278, 297, 317, 322, 325, 330, 342, 346, 356, 357, 358, 366, 374, 376, 379, 381, 384, 391, 393, 394, 397, 408, 411, 413, 414, 415, 416, 418, 419, 420, 421, 444, 445, 448, 449, 453, 454, 455, 456, 457, 460, 465, 466, 474, 475, 500, 507, 508, 512, 515, 517, 518, 525, 534, 539, 545, 548, 567, 614, 615, 616, 620, 621, 622, 693, 700, 713, 717, 834, 856, 861, 888, 900, 901, 904, 916, 917, 918, 919, 922, 951, 952, 975, 978, 1002, 1004, 1005, 1008, 1010, 1011, 1015, 1018, 1021, 1024, 1025, 1026, 1036, 1037, 1039, 1040, 1042, 1046], "struggl": [378, 394, 411], "stuck": [94, 696, 1002], "student": [0, 123, 272, 1002, 1025, 1029], "studi": [43, 64, 93, 147, 214, 232, 275, 278, 279, 286, 353, 374, 376, 415, 420, 700, 712, 762, 763, 833, 1003, 1005, 1019], "studio": [377, 1029], "study_135": 373, "study_14": 373, "study_34": 373, "study_98": 373, "study_99": 373, "stuff": 1029, "stump": [137, 418, 563, 1047], "stupp": [1042, 1043], "stupperich": 1048, "sturla": 1038, "style": [112, 147, 203, 222, 232, 276, 379, 386, 411, 419, 446, 450, 462, 704, 810, 827, 934, 935, 948, 1036, 1039, 1050], "st\u00e9fan": 380, "st\u00e9phan": 1046, "st\u00e9phane": [1045, 1046, 1050, 1051], "su": [725, 727, 728], "sub": [47, 72, 86, 88, 90, 93, 102, 130, 248, 250, 257, 323, 331, 332, 339, 342, 350, 374, 379, 381, 385, 393, 412, 418, 419, 440, 446, 447, 450, 452, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 537, 538, 540, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 592, 594, 595, 601, 614, 615, 631, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 867, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 925, 962, 1001, 1005, 1019, 1046, 1050, 1052, 1053], "sub_sampl": 540, "subclass": [133, 381, 421, 578, 970, 1041, 1044, 1049, 1053], "subclust": [411, 445], "subcluster_centers_": [77, 445], "subcluster_labels_": 445, "subcompon": [121, 416], "subdirectori": 379, "subdivid": [374, 421], "subestim": 381, "subestimator__c": 381, "subestimator__class_weight": 381, "subestimator__du": 381, "subestimator__fit_intercept": 381, "subestimator__intercept_sc": 381, "subestimator__l1_ratio": 381, "subestimator__max_it": 381, "subestimator__multi_class": 381, "subestimator__n_job": 381, "subestimator__penalti": 381, "subestimator__random_st": 381, "subestimator__solv": 381, "subestimator__tol": 381, "subestimator__verbos": 381, "subestimator__warm_start": 381, "subexpress": 52, "subfold": [2, 377, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 507, 1049], "subgraph": 408, "subhash": 1050, "subhodeep": [1036, 1037, 1038], "subi": [1045, 1046, 1051], "subject": [16, 102, 152, 263, 275, 353, 374, 379, 381, 383, 391, 393, 394, 409, 413, 415, 416, 499, 662, 663, 689, 826, 871, 927, 974, 996, 1001, 1020, 1023, 1045, 1046, 1049, 1051], "subject_body_extractor": 102, "subject_body_transform": 102, "subjectbodi": 102, "subjectbodyextractor": 102, "sublinear": [416, 594, 595], "sublinear_tf": [353, 416, 419, 594, 595], "submatric": 408, "submatrix": [408, 426, 454, 456], "submiss": 379, "submit": [376, 377, 378, 381, 382, 383, 384, 387, 393, 394, 397], "submitt": 378, "submodel": 415, "submodul": [383, 997, 1003, 1036], "subobject": [425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919], "suboptim": [415, 704, 706, 786, 793, 1008, 1044, 1052], "subpackag": [379, 383, 1040, 1045], "subplot": [43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 66, 67, 68, 70, 74, 78, 79, 83, 84, 86, 87, 88, 89, 90, 93, 95, 98, 99, 105, 107, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 126, 130, 131, 135, 137, 138, 140, 141, 142, 143, 144, 145, 148, 150, 152, 153, 155, 156, 157, 164, 173, 175, 180, 182, 183, 187, 188, 190, 192, 195, 198, 205, 206, 208, 209, 212, 213, 214, 215, 216, 218, 222, 227, 228, 230, 232, 234, 235, 238, 239, 241, 242, 244, 246, 247, 249, 250, 251, 252, 257, 258, 259, 260, 262, 263, 266, 267, 268, 269, 272, 274, 275, 277, 278, 279, 281, 282, 283, 285, 286, 287, 291, 292, 294, 295, 296, 297, 300, 301, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 325, 326, 334, 336, 339, 340, 341, 342, 346, 348, 349, 350, 351, 353, 354, 355, 357, 358, 375, 386], "subplot_kw": [234, 296], "subplot_spec": 386, "subplot_titl": 141, "subplots_adjust": [45, 46, 53, 54, 74, 77, 79, 83, 84, 87, 95, 97, 111, 113, 119, 123, 124, 130, 137, 138, 155, 187, 213, 214, 229, 232, 241, 249, 257, 259, 260, 263, 267, 283, 297, 305, 307, 310, 314, 323, 332, 339, 342], "subpopul": [231, 683, 1001], "subproblem": 1041, "subrahmanyam": [1036, 1039], "subramaniam": [1051, 1052, 1053], "subramaniyan": 1048, "subramanyam": 1043, "subrat": 1048, "subrat93": 1048, "subsampl": [130, 146, 149, 188, 231, 268, 319, 323, 461, 563, 564, 565, 566, 567, 636, 683, 705, 807, 808, 834, 873, 885, 897, 930, 940, 997, 1001, 1025, 1036, 1046, 1050, 1052, 1053, 1054], "subscrib": 1034, "subscript": [367, 1049], "subsect": [25, 367, 379], "subsequ": [46, 68, 91, 107, 124, 135, 166, 201, 216, 274, 277, 292, 294, 342, 362, 379, 381, 383, 385, 393, 407, 411, 412, 418, 421, 440, 500, 512, 557, 558, 563, 565, 566, 670, 672, 680, 807, 808, 836, 837, 840, 843, 844, 845, 846, 847, 865, 883, 887, 995, 1004, 1006, 1045, 1046, 1050, 1052, 1054], "subset": [2, 46, 57, 58, 63, 64, 68, 102, 103, 111, 112, 142, 143, 144, 145, 160, 166, 169, 188, 190, 203, 215, 229, 230, 231, 232, 244, 246, 250, 251, 266, 270, 273, 275, 281, 282, 284, 289, 317, 318, 323, 331, 335, 353, 354, 355, 362, 374, 379, 387, 391, 393, 408, 409, 411, 412, 415, 418, 419, 421, 428, 440, 452, 467, 469, 470, 472, 491, 492, 496, 497, 501, 512, 553, 554, 555, 557, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 573, 606, 614, 633, 643, 644, 645, 646, 655, 659, 662, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 701, 707, 708, 715, 717, 720, 722, 735, 738, 759, 761, 797, 800, 803, 806, 826, 832, 834, 836, 837, 838, 839, 843, 844, 845, 846, 847, 850, 855, 858, 865, 874, 903, 904, 908, 910, 913, 916, 918, 930, 973, 994, 1001, 1005, 1006, 1016, 1018, 1020, 1021, 1039, 1044, 1045, 1047, 1049, 1054, 1055], "subset_featur": 103, "subset_label": 232, "subsidi": 187, "subspac": [128, 414, 418, 455, 519, 559, 560, 695, 699, 952, 999, 1008, 1011, 1017, 1029], "substanti": [160, 294, 298, 299, 313, 379, 854, 1011, 1040, 1043], "substitut": [402, 988, 1025, 1042], "subtl": [351, 362, 1004, 1025], "subtleti": 1031, "subtract": [176, 187, 251, 414, 416, 446, 450, 462, 538, 648, 649, 1043, 1053], "subtre": [561, 562, 563, 564, 568, 569, 916, 917, 918, 919, 1021], "subwindow": 1021, "succe": [128, 150, 199, 286], "succeed": 379, "success": [2, 83, 164, 184, 264, 276, 279, 280, 348, 362, 406, 411, 415, 416, 418, 519, 568, 583, 804, 807, 808, 825, 913, 1008, 1026, 1029, 1031, 1048], "successfulli": [43, 53, 316, 378, 383, 405, 411, 419, 1019], "successor": [453, 459, 1021, 1024], "suchak": 1049, "sudo": [377, 397], "suen": 1009, "suffer": [116, 189, 292, 312, 354, 366, 411, 418, 548, 767, 1000, 1001, 1005, 1008, 1045], "suffic": [90, 91, 381], "suffici": [2, 64, 88, 155, 222, 287, 342, 366, 393, 411, 420, 536, 661, 686, 687, 820, 823, 824, 1006, 1008, 1025, 1045, 1051, 1052], "suffix": [397, 831, 1005, 1046], "suganthan": 376, "sugar": [169, 376], "suggest": [111, 124, 138, 142, 187, 190, 272, 342, 366, 378, 379, 386, 393, 415, 416, 418, 472, 477, 569, 649, 833, 999, 1001, 1002, 1010, 1013, 1020, 1040, 1047, 1050, 1053], "suh": 1044, "suha": 1054, "suit": [58, 121, 153, 187, 214, 215, 241, 262, 324, 325, 327, 353, 367, 379, 381, 384, 385, 387, 397, 399, 405, 414, 416, 418, 453, 455, 507, 681, 845, 889, 946, 994, 997, 1002, 1005, 1007, 1008, 1019, 1024, 1025, 1029, 1043, 1050], "suitabl": [139, 147, 199, 200, 218, 308, 355, 373, 374, 385, 388, 405, 411, 416, 419, 455, 465, 471, 490, 509, 512, 631, 639, 843, 844, 847, 882, 883, 906, 969, 973, 999, 1001, 1004, 1015, 1017, 1019, 1024, 1050, 1051], "sullivan": [1039, 1040, 1041], "sultan": 1050, "sum": [2, 30, 47, 55, 57, 63, 94, 112, 119, 124, 130, 146, 147, 165, 169, 179, 187, 196, 210, 214, 218, 229, 232, 235, 237, 251, 266, 281, 292, 299, 302, 325, 329, 335, 346, 347, 349, 353, 354, 355, 361, 376, 385, 393, 408, 409, 411, 413, 414, 416, 417, 418, 419, 421, 434, 445, 446, 450, 452, 462, 467, 468, 485, 486, 487, 519, 524, 527, 535, 538, 540, 541, 545, 548, 549, 550, 553, 554, 556, 558, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 573, 574, 594, 595, 615, 617, 627, 629, 639, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 680, 681, 682, 683, 685, 688, 694, 698, 700, 703, 713, 714, 723, 730, 745, 760, 762, 763, 767, 792, 836, 837, 841, 842, 851, 855, 859, 866, 867, 887, 888, 908, 909, 911, 914, 916, 917, 918, 919, 954, 979, 985, 990, 1001, 1005, 1006, 1007, 1008, 1020, 1021, 1039, 1040, 1042, 1044, 1045, 1047, 1052, 1053], "sum_": [272, 281, 349, 408, 409, 411, 416, 417, 418, 542, 544, 551, 700, 759, 999, 1001, 1002, 1005, 1007, 1009, 1010, 1012, 1013, 1015, 1019, 1020, 1021], "sum_gradi": 418, "sum_h": 1010, "sum_hessian": 418, "sum_i": [324, 418, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 996, 997, 1001, 1003, 1005, 1010], "sum_j": [650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 1001, 1005, 1010], "sum_k": [418, 553, 1021], "sum_m": 418, "sum_n": [279, 711, 1005], "sum_n_compon": [467, 867], "sum_over_featur": [1036, 1051], "sum_weight": 985, "sumit": 1050, "summar": [214, 263, 279, 281, 355, 379, 381, 396, 418, 525, 662, 698, 710, 711, 1001, 1002, 1005, 1011, 1031], "summari": [52, 169, 325, 361, 362, 376, 391, 565, 566, 696, 717, 792, 921, 1003, 1006, 1024, 1055], "summaris": [243, 322], "summat": [1007, 1009], "summer": [0, 43, 52, 176, 1036], "sun": [43, 150, 188, 1044, 1049, 1050], "sundai": 43, "sundaramahalingam": 1053, "sung": 1047, "sunglok": 1001, "sunita": 787, "sunitha": 1048, "sunmi": 1047, "super": [57, 62, 64, 381, 419, 1044], "superflu": 416, "superimpos": 416, "superior": 418, "superposit": 199, "supersed": [378, 1041], "superset": [415, 825, 1005], "supervis": [2, 27, 32, 34, 38, 57, 62, 64, 67, 72, 82, 87, 91, 115, 116, 129, 140, 150, 153, 162, 173, 235, 246, 249, 259, 272, 301, 314, 323, 334, 339, 342, 346, 354, 366, 374, 381, 392, 393, 409, 411, 414, 415, 416, 418, 419, 421, 440, 442, 467, 491, 507, 508, 557, 592, 594, 597, 598, 638, 680, 733, 805, 806, 809, 811, 812, 813, 814, 819, 820, 821, 822, 823, 824, 828, 829, 830, 831, 833, 834, 857, 867, 868, 872, 882, 889, 903, 904, 905, 913, 999, 1002, 1005, 1007, 1008, 1011, 1015, 1016, 1020, 1021, 1022, 1024, 1025, 1026, 1028, 1031, 1036, 1042, 1048], "supervised_learning_tut": [161, 162], "supp": 387, "suppli": [150, 391, 411, 650, 934, 935, 1008, 1029, 1040, 1042, 1044, 1049], "support": [2, 39, 43, 45, 46, 47, 48, 49, 61, 66, 68, 80, 102, 103, 104, 134, 139, 154, 155, 165, 166, 176, 188, 215, 224, 225, 226, 232, 246, 247, 248, 254, 265, 270, 277, 279, 289, 292, 310, 312, 316, 325, 329, 331, 332, 335, 336, 338, 339, 342, 343, 344, 345, 346, 347, 349, 366, 367, 368, 373, 377, 379, 381, 383, 384, 385, 386, 388, 389, 392, 393, 394, 405, 411, 415, 416, 419, 420, 421, 440, 443, 453, 455, 456, 467, 469, 470, 472, 477, 490, 500, 516, 542, 544, 545, 548, 551, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 617, 618, 619, 621, 623, 624, 626, 627, 629, 631, 635, 636, 637, 647, 649, 661, 662, 663, 674, 675, 676, 678, 679, 680, 681, 682, 691, 694, 698, 703, 711, 717, 733, 734, 742, 747, 782, 783, 784, 787, 788, 791, 792, 804, 807, 808, 810, 818, 826, 831, 832, 840, 841, 846, 848, 849, 852, 854, 860, 868, 869, 873, 879, 881, 882, 884, 888, 896, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 930, 940, 946, 947, 992, 994, 995, 997, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1019, 1024, 1025, 1026, 1027, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "support_": [247, 348, 472, 477, 597, 598, 606, 910, 911, 912, 913, 914, 1020], "support_fract": [48, 472, 477], "support_reweight": [472, 477], "support_vector": [340, 346], "support_vector_indic": 340, "support_vectors_": [46, 49, 343, 346, 347, 910, 911, 912, 913, 914, 1020], "suppos": [248, 275, 331, 366, 367, 379, 381, 383, 385, 413, 418, 419, 420, 561, 565, 568, 662, 663, 670, 672, 678, 679, 680, 854, 908, 910, 913, 916, 918, 940, 1009, 1045, 1047, 1053], "suppress": [187, 366, 387, 696, 1008, 1043], "suptitl": [43, 44, 52, 54, 68, 69, 70, 74, 75, 83, 86, 90, 93, 100, 107, 121, 124, 131, 135, 143, 144, 152, 155, 180, 187, 188, 190, 208, 213, 229, 230, 234, 235, 236, 250, 260, 266, 268, 285, 286, 310, 312, 314, 321, 323, 331, 332, 336, 348, 349, 358], "surac": 1046, "sure": [2, 63, 89, 207, 220, 248, 249, 266, 362, 366, 367, 373, 377, 378, 379, 380, 381, 383, 384, 387, 391, 397, 409, 412, 419, 497, 527, 653, 934, 935, 946, 957, 990, 995, 1002, 1019, 1024, 1025, 1043, 1044, 1046, 1051, 1055], "suresh": 1050, "surf": 188, "surfac": [67, 118, 125, 134, 135, 136, 137, 139, 156, 184, 198, 206, 223, 278, 295, 338, 339, 356, 357, 359, 360, 361, 418, 508, 557, 561, 568, 635, 768, 916, 922, 999, 1004, 1019, 1020, 1021, 1026], "surface_": 635, "surgan12": 1045, "surpass": [135, 346, 865, 866], "surplu": 415, "surpris": [86, 188, 377, 1001, 1024, 1038], "surprisingli": [232, 374, 419], "surrend": 57, "surrog": 1029, "surround": [249, 379, 854, 1011], "survei": [187, 414], "surviv": [103, 189, 994, 1024], "surya": [1049, 1050], "suscept": 405, "susik": 1040, "suspect": 43, "suspici": 374, "sustain": 0, "sutherland": [1038, 1040, 1041, 1043, 1044, 1045, 1046], "sutiono": 1047, "suzuki": [1047, 1048], "sv": 1020, "sv_ind": 247, "sv_ratio": 247, "svc": [2, 45, 62, 64, 66, 67, 68, 102, 106, 145, 156, 162, 172, 184, 192, 205, 246, 249, 253, 265, 270, 272, 274, 277, 278, 279, 282, 283, 314, 316, 317, 321, 323, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 350, 351, 353, 366, 381, 385, 393, 409, 412, 415, 418, 437, 438, 439, 440, 471, 519, 559, 701, 702, 704, 706, 804, 821, 835, 837, 868, 905, 906, 908, 910, 911, 914, 992, 994, 1000, 1003, 1005, 1006, 1015, 1026, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1054], "svc__c": [314, 868], "svc_disp": [254, 321, 1033], "svc_isoton": 62, "svc_sigmoid": 62, "svcifittedsvc": 254, "svcsvc": [253, 270, 272, 323], "svd": [2, 70, 128, 153, 235, 354, 388, 407, 414, 423, 454, 456, 485, 486, 488, 525, 536, 537, 538, 539, 543, 544, 545, 548, 550, 553, 554, 668, 676, 677, 678, 689, 690, 691, 867, 952, 999, 1038, 1042, 1043, 1049, 1051, 1054], "svd__n_compon": 867, "svd_lapack_driv": 952, "svd_method": [57, 454, 456, 536, 1039], "svd_solver": [45, 102, 121, 128, 328, 329, 407, 416, 539, 545, 1042, 1054], "sven": [1050, 1051], "svg": [0, 399], "svm": [2, 42, 46, 48, 49, 50, 54, 62, 64, 66, 67, 68, 102, 104, 106, 121, 133, 143, 153, 156, 159, 163, 168, 169, 173, 175, 179, 184, 193, 196, 198, 206, 207, 224, 225, 226, 227, 241, 247, 249, 250, 253, 254, 265, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 282, 283, 287, 298, 303, 304, 307, 314, 315, 321, 323, 330, 334, 335, 337, 340, 348, 349, 353, 366, 374, 381, 385, 393, 412, 415, 416, 418, 420, 437, 438, 439, 440, 498, 508, 516, 519, 545, 559, 560, 567, 571, 572, 581, 597, 598, 603, 604, 609, 635, 643, 647, 672, 680, 681, 682, 693, 701, 702, 704, 706, 717, 739, 746, 765, 804, 818, 824, 830, 831, 834, 836, 837, 854, 868, 869, 881, 883, 888, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 992, 994, 997, 1000, 1002, 1003, 1005, 1006, 1010, 1018, 1020, 1022, 1026, 1027, 1031, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1043], "svm1": 412, "svm2": 412, "svm__c": 106, "svm_weight": 165, "svm_weights_select": 165, "svmlight": [2, 372, 490, 512, 513, 1031, 1036, 1037, 1043, 1045], "svmlight_file_test": 513, "svmlight_file_train": 513, "svmsgd": 1019, "svr": [2, 46, 49, 184, 240, 321, 337, 366, 399, 437, 438, 439, 560, 571, 572, 597, 598, 647, 682, 804, 810, 909, 911, 913, 998, 1026, 1036, 1038, 1040, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1054], "svr_fit": 247, "svr_lin": 348, "svr_poli": 348, "svr_predict": 247, "svr_rbf": 348, "sw": 292, "sw_test": [61, 322], "sw_train": [61, 322], "swap": [2, 411, 416, 720, 740, 983, 984, 1036], "swapnil": 1050, "swart": 55, "sweep": 864, "swier": [1047, 1048], "swiss": [2, 100, 184, 233, 234, 239, 411, 534, 696, 697, 1026, 1050], "switch": [365, 682, 708, 721, 741, 759, 761, 799, 848, 849, 951, 952, 1005, 1008, 1031, 1036], "swpeas": 1049, "swu": 1040, "sy": [47, 51, 57, 222, 245, 292, 335, 355, 374, 391, 621], "syd": 1051, "sydnei": 0, "syhw": [1037, 1038], "sylvain": [0, 369, 1040, 1045, 1046, 1047, 1048, 1049, 1050], "sylvainlan": [1044, 1045, 1046, 1047, 1048], "symbol": [51, 355, 367, 381, 385, 413, 419, 503, 586, 592, 593, 595, 920, 922, 1024], "symbol_dict": 51, "symlink": 383, "symlognorm": [194, 199], "symmetr": [2, 79, 147, 180, 190, 216, 393, 409, 411, 455, 465, 466, 477, 523, 531, 533, 694, 698, 699, 708, 709, 719, 720, 721, 726, 728, 732, 740, 741, 759, 761, 767, 789, 799, 801, 802, 990, 994, 1001, 1005, 1008, 1052], "symmetri": [169, 376, 703, 881, 884, 896, 1003], "symmetric_arrai": 990, "symposium": [169, 376, 411, 463], "symptomat": 266, "synchron": [379, 419], "syndrom": 373, "synonym": [393, 850, 851, 852, 858, 859, 860], "synonymi": 416, "syntax": [367, 379, 384, 387, 412, 471, 867, 868, 906, 994, 1047, 1049], "synthet": [43, 53, 62, 64, 67, 70, 72, 77, 82, 142, 147, 153, 171, 176, 178, 188, 204, 216, 231, 307, 314, 349, 362, 366, 372, 382, 394, 411, 413, 420, 662, 663, 908, 909, 915, 999, 1042], "synthetic_feature_weight": [662, 663], "syonekura": 1044, "system": [44, 126, 199, 272, 279, 329, 362, 366, 367, 368, 374, 376, 379, 380, 381, 382, 387, 391, 397, 405, 411, 416, 418, 422, 447, 474, 475, 481, 539, 543, 547, 554, 643, 649, 654, 655, 658, 659, 660, 686, 687, 730, 760, 773, 801, 857, 903, 904, 1001, 1005, 1008, 1017, 1024, 1025, 1029, 1036, 1044, 1045], "systemat": [43, 150, 272, 716, 732, 924, 926, 1005, 1051], "sysuresh": 1050, "szabo": [1038, 1039], "szepieniec": 1042, "szlam": [416, 951, 952], "szpak": [1043, 1046], "szyma\u0144ski": [1044, 1045], "s\u00e1nchez": 1048, "s\u00e3o": 1054, "s\u00e4ger": [1039, 1042], "s\u00e9bastien": [1029, 1042, 1044], "s\u00e9rgio": 1055, "s\u00f6nke": 1046, "s\u00f8ren": 1053, "s\u0142apek": 1047, "t": [2, 16, 47, 50, 51, 55, 63, 64, 70, 74, 75, 77, 78, 79, 85, 87, 91, 102, 104, 109, 110, 111, 113, 115, 119, 122, 123, 128, 130, 131, 135, 138, 139, 146, 147, 148, 149, 150, 154, 155, 169, 172, 174, 175, 176, 179, 180, 184, 187, 188, 189, 190, 194, 196, 199, 208, 211, 212, 213, 214, 215, 232, 233, 235, 236, 237, 238, 248, 249, 258, 261, 263, 266, 271, 272, 285, 286, 291, 292, 305, 309, 321, 324, 325, 327, 331, 332, 334, 338, 339, 342, 343, 347, 353, 354, 355, 360, 361, 362, 366, 367, 373, 374, 376, 379, 381, 383, 385, 387, 392, 393, 397, 402, 405, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 424, 428, 431, 434, 436, 440, 450, 451, 453, 459, 466, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 499, 500, 517, 518, 519, 523, 524, 529, 534, 536, 538, 545, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 594, 595, 598, 611, 612, 614, 615, 631, 632, 634, 635, 636, 637, 639, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 699, 700, 708, 714, 720, 721, 730, 740, 741, 759, 760, 761, 771, 792, 793, 798, 799, 803, 804, 807, 808, 818, 826, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 854, 855, 858, 859, 864, 865, 866, 874, 877, 878, 879, 881, 882, 888, 889, 901, 903, 904, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 927, 952, 953, 968, 994, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1019, 1020, 1021, 1026, 1030, 1031, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "t0": [45, 47, 50, 54, 55, 74, 77, 79, 80, 83, 85, 91, 95, 97, 124, 199, 200, 229, 230, 231, 236, 239, 241, 245, 247, 273, 328, 353, 354, 355, 680, 681, 682], "t1": [79, 80, 95, 229, 236, 239, 241], "t15h": 1043, "t_": [670, 671, 672, 680, 681, 682, 865, 866, 1019], "t_0": 1019, "t_batch": 97, "t_i": 1007, "t_k": [418, 1005, 1021], "t_m": 1021, "t_mini_batch": [77, 97], "t_p": 279, "t_post": 272, "t_sne": [234, 1044], "t_stat": 272, "t_stat_uncorrect": 272, "t_t": 1021, "taa": 179, "taac": 179, "tab": [46, 48, 70, 86, 111, 135, 150, 152, 155, 171, 176, 178, 201, 203, 266, 322, 328, 412, 1043], "tab10": [246, 262], "tab20b": 43, "taba": 1055, "tabea": [1051, 1052], "tabibian": 1042, "tabl": [91, 232, 272, 379, 380, 388, 411, 419, 586, 662, 684, 804, 818, 845, 969, 1001, 1005, 1006, 1011, 1024, 1037], "tabular": [43, 52, 188, 381, 418, 1013, 1024], "tacit": 393, "tacitli": 1038, "tackl": [148, 272, 367, 379, 411, 845, 1007, 1029], "tadej": [1037, 1038], "tae": 1048, "taehoon": [1043, 1044], "taemin": 1001, "tag": [2, 47, 82, 103, 241, 333, 373, 378, 382, 383, 387, 391, 393, 407, 419, 428, 434, 500, 836, 924, 925, 926, 928, 929, 941, 957, 988, 993, 1025, 1028, 1041, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1055], "tahar": 1043, "tahiri": 1048, "taifi": 1042, "tail": [52, 147, 183, 187, 214, 216, 272, 312, 525, 528, 1001], "tail_strength": [329, 525, 528], "takanori": 1044, "take": [2, 44, 47, 52, 58, 66, 80, 86, 88, 90, 99, 107, 111, 119, 121, 135, 143, 171, 173, 176, 180, 187, 192, 198, 218, 222, 223, 238, 248, 259, 260, 266, 267, 273, 277, 281, 282, 291, 292, 295, 298, 299, 300, 302, 303, 312, 325, 329, 334, 338, 339, 342, 351, 354, 355, 358, 366, 367, 368, 373, 374, 377, 379, 381, 384, 385, 386, 387, 391, 393, 394, 402, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 423, 440, 446, 449, 450, 452, 453, 455, 460, 461, 462, 464, 466, 472, 523, 537, 542, 543, 544, 550, 551, 585, 596, 599, 600, 602, 603, 604, 614, 615, 620, 624, 625, 628, 636, 647, 653, 675, 677, 678, 679, 680, 683, 695, 696, 703, 709, 711, 713, 723, 733, 734, 742, 747, 760, 775, 778, 782, 783, 784, 785, 787, 788, 791, 792, 804, 805, 809, 810, 818, 822, 832, 850, 851, 852, 854, 856, 857, 858, 859, 860, 872, 882, 903, 904, 908, 909, 910, 911, 912, 913, 914, 938, 974, 994, 997, 1001, 1002, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1015, 1020, 1021, 1029, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "takeawai": 291, "taken": [37, 43, 46, 67, 77, 86, 88, 149, 169, 176, 187, 245, 246, 260, 278, 289, 314, 374, 376, 378, 379, 383, 393, 411, 415, 419, 423, 443, 537, 565, 566, 587, 588, 650, 651, 654, 656, 657, 658, 662, 663, 664, 665, 666, 667, 681, 683, 685, 688, 699, 881, 882, 902, 905, 911, 912, 963, 1005, 1007, 1015, 1017, 1042, 1045, 1048, 1049], "takeshi": [1044, 1049, 1050, 1051], "takeuchi": 374, "takingitcasu": [1044, 1045], "talbot": 277, "talgatomarov": 1047, "talk": [57, 102, 273, 353, 354, 355, 374, 393, 405, 1029, 1031], "talli": 417, "tallott": 1044, "talwalkar": 994, "tamara": [374, 1053, 1055], "tamer": 1051, "tami": 91, "tamir": [1047, 1050], "tamirlan1": 1047, "tamper": 47, "tampermonkei": 387, "tan": [865, 866, 1009, 1043], "tandfonlin": 411, "tang": [376, 1046, 1047, 1048], "tangent": [234, 346, 693, 697, 1003, 1030, 1031], "tanh": [346, 781, 865, 866, 1003, 1020], "tanjina": 1053, "tann": [1044, 1049], "tao": [1052, 1053], "tar": [47, 383], "taranjeet": 1042, "tarashanski": 1053, "tarbal": [383, 1051], "tarcusx": 1044, "tarfil": 47, "target": [2, 43, 45, 52, 55, 57, 63, 66, 68, 69, 85, 101, 103, 105, 106, 116, 118, 125, 127, 129, 136, 143, 144, 145, 147, 148, 150, 152, 154, 155, 156, 158, 162, 164, 167, 169, 171, 173, 176, 177, 183, 184, 186, 187, 188, 189, 194, 198, 199, 207, 210, 214, 216, 218, 219, 222, 223, 235, 242, 244, 245, 246, 247, 250, 251, 252, 259, 265, 266, 268, 270, 273, 275, 277, 278, 281, 282, 286, 289, 291, 292, 295, 300, 303, 304, 308, 311, 312, 322, 323, 325, 327, 331, 332, 335, 336, 338, 339, 342, 346, 348, 353, 354, 358, 359, 360, 361, 362, 366, 368, 371, 372, 373, 374, 375, 376, 379, 381, 383, 384, 387, 388, 392, 396, 405, 411, 414, 415, 418, 421, 435, 440, 441, 442, 445, 448, 467, 468, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 512, 514, 524, 528, 535, 536, 538, 540, 541, 543, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 577, 586, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 701, 702, 704, 705, 706, 711, 712, 713, 716, 717, 722, 724, 725, 727, 728, 730, 731, 732, 733, 734, 739, 742, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 855, 857, 858, 859, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 889, 892, 897, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 927, 928, 934, 966, 967, 968, 993, 996, 997, 998, 1001, 1002, 1005, 1009, 1012, 1013, 1019, 1020, 1021, 1025, 1026, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "target_class": 317, "target_column": [492, 493, 500], "target_encod": 319, "target_filenam": [505, 509], "target_gener": 177, "target_idx": 636, "target_mean_": [889, 1015], "target_nam": [45, 57, 66, 85, 118, 125, 129, 186, 223, 235, 259, 265, 273, 281, 282, 295, 318, 335, 353, 358, 372, 374, 491, 492, 494, 496, 497, 498, 500, 501, 504, 506, 507, 508, 509, 514, 717, 1005, 1021, 1046], "target_opset": 405, "target_tag": [381, 927, 941], "target_test": [266, 513], "target_train": [266, 513], "target_typ": [318, 889, 938, 967, 1053], "target_type_": 889, "targetencod": [2, 318, 319, 393, 881, 882, 995, 1015, 1024, 1052, 1053], "targetencodertargetencod": 318, "targets_test": 246, "targets_train": 246, "targettag": [2, 927], "tari": 91, "tashai": [1044, 1045], "task": [2, 38, 43, 46, 124, 142, 148, 150, 168, 179, 184, 193, 199, 200, 203, 213, 214, 230, 234, 251, 266, 269, 286, 291, 346, 355, 366, 368, 374, 376, 378, 379, 384, 385, 388, 391, 392, 393, 416, 418, 419, 420, 421, 451, 464, 497, 509, 519, 596, 599, 600, 602, 603, 604, 608, 609, 610, 613, 636, 637, 650, 651, 656, 657, 664, 665, 666, 667, 678, 685, 688, 731, 733, 734, 758, 786, 788, 791, 793, 805, 809, 822, 828, 970, 971, 1002, 1005, 1006, 1007, 1008, 1016, 1018, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1036, 1041, 1045, 1051], "tast": 1036, "tata": 1053, "tau": 1015, "tau_0": 540, "tavenard": 1048, "tax": 0, "taxonom": 376, "taylor": [418, 1044, 1046, 1047, 1050], "tb": 387, "tc": [169, 376, 394], "tcg": 179, "tch": [169, 376], "tcompl": 91, "tcpdump": 374, "tda": 1024, "teach": 379, "teacher": 102, "teal": [215, 224, 279], "team": [374, 382, 391, 393, 394, 1024, 1029, 1036], "teas": 187, "tech": [51, 376, 846], "technic": [179, 187, 215, 235, 325, 374, 376, 379, 393, 418, 656, 668, 689, 690, 903, 994, 1001, 1002, 1008], "technion": [668, 689, 690, 1001], "techniqu": [11, 26, 51, 56, 102, 104, 123, 131, 136, 145, 161, 168, 169, 183, 184, 186, 222, 236, 238, 277, 289, 296, 324, 332, 346, 357, 368, 376, 391, 393, 405, 409, 411, 415, 416, 417, 418, 419, 420, 450, 451, 452, 453, 538, 558, 681, 693, 694, 697, 698, 730, 760, 997, 1001, 1002, 1004, 1005, 1008, 1011, 1013, 1017, 1019, 1021, 1025, 1029, 1049], "technolog": 376, "technologi": [169, 376, 411, 1024, 1029], "technometr": [376, 413, 472, 477, 1011], "tediou": [155, 266], "teen": 1015, "teevan": [845, 1007], "teh": [864, 1010], "tejesh95": 1040, "telecom": 1029, "telenczuk": [169, 1045, 1048, 1049, 1051], "tell": [171, 187, 188, 248, 272, 342, 347, 367, 374, 411, 419, 567, 583, 994, 999, 1012], "temp": [43, 188], "temp_fold": 970, "temperatur": [188, 419, 1012], "tempfil": [87, 294, 321, 412, 1008], "templat": [379, 383, 384, 393, 394, 561, 562, 567, 568, 569, 570, 1024], "templateclassifi": 381, "tempor": [52, 150, 199, 1024, 1025], "temporari": [87, 102, 104, 366, 471, 691, 785, 906, 1008, 1039, 1040, 1043, 1049, 1050], "temporarili": [411, 1041], "temporarydirectori": [294, 321], "tempt": 187, "temptat": [362, 379], "ten": [54, 57, 135, 141, 150, 169, 235, 263, 374, 376, 418, 524, 913, 1045], "tenavi": 1050, "tend": [43, 51, 64, 72, 74, 78, 85, 88, 90, 167, 169, 187, 188, 203, 214, 219, 232, 251, 257, 260, 269, 273, 285, 291, 310, 346, 355, 366, 368, 379, 381, 393, 409, 411, 413, 416, 418, 420, 440, 451, 657, 854, 885, 897, 952, 1001, 1002, 1008, 1021], "tendenc": [150, 239, 1001, 1002, 1004, 1007, 1010], "tenenbaum": [692, 1002], "tenenhau": 376, "tensor": [2, 192, 371, 407, 416, 542, 544, 551, 643, 644, 645, 1031, 1048, 1054], "tensorflow": [45, 391], "tensorsketch": 997, "tent": 385, "tenur": 1029, "teon": 1048, "terenc": [1048, 1049], "term": [2, 43, 53, 54, 62, 68, 91, 126, 138, 141, 144, 147, 176, 186, 199, 201, 202, 203, 214, 216, 218, 228, 231, 232, 251, 266, 270, 274, 292, 307, 324, 346, 349, 353, 355, 368, 379, 381, 391, 409, 411, 413, 415, 416, 418, 446, 450, 452, 455, 462, 465, 528, 539, 542, 544, 548, 551, 553, 592, 593, 594, 595, 608, 611, 612, 636, 637, 644, 646, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 677, 678, 679, 680, 682, 684, 691, 699, 734, 742, 787, 788, 791, 865, 866, 883, 887, 890, 908, 909, 910, 911, 912, 913, 914, 994, 996, 997, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1015, 1019, 1020, 1044, 1050, 1051, 1052], "term1": 419, "term2": 419, "term3": 419, "termin": [367, 384, 385, 387, 397, 411, 425, 451, 464, 557, 558, 562, 563, 564, 567, 569, 670, 671, 672, 680, 682, 865, 866, 917, 919, 1011, 1021], "terminalipythonapp": 385, "terminalpdb": 387, "termination_condition_": 905, "terminologi": [393, 1044], "terraza": 1048, "terri": 1040, "terrycojon": 1040, "tesson": 411, "test": [2, 43, 45, 47, 49, 50, 52, 61, 62, 63, 64, 67, 68, 69, 102, 103, 115, 126, 135, 138, 140, 141, 142, 146, 147, 148, 149, 150, 160, 162, 163, 165, 168, 171, 172, 184, 186, 187, 188, 189, 190, 192, 199, 203, 207, 209, 210, 214, 215, 216, 218, 219, 221, 222, 229, 230, 232, 238, 242, 247, 248, 250, 259, 264, 265, 266, 267, 270, 271, 272, 273, 274, 276, 277, 279, 280, 282, 283, 284, 286, 291, 295, 300, 301, 307, 309, 314, 317, 318, 319, 328, 335, 342, 349, 355, 362, 366, 367, 373, 374, 376, 382, 383, 384, 385, 391, 392, 393, 396, 397, 404, 406, 407, 409, 410, 412, 413, 416, 418, 419, 420, 421, 428, 430, 431, 434, 437, 438, 439, 440, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 491, 492, 497, 501, 502, 506, 508, 528, 535, 541, 543, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 596, 598, 599, 600, 602, 603, 604, 606, 608, 609, 610, 612, 613, 614, 615, 631, 632, 634, 639, 640, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 716, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 855, 858, 859, 865, 866, 868, 893, 894, 896, 897, 898, 899, 903, 904, 906, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 924, 925, 926, 927, 933, 944, 946, 947, 1000, 1001, 1004, 1005, 1008, 1009, 1013, 1015, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1055], "test_": [52, 155, 415], "test_0": 43, "test_4": 43, "test_accuraci": [259, 273, 286], "test_auc": 831, "test_ax": 126, "test_balanced_accuraci": 286, "test_best_it": 146, "test_check_estim": 947, "test_color": 146, "test_common": [379, 387], "test_dataset": 373, "test_devi": 149, "test_enable_hist_gradient_boost": 383, "test_fn": 1005, "test_fold": [415, 817], "test_fract": 1036, "test_idx": [52, 393], "test_import": 189, "test_index": [259, 334, 415, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825], "test_indx": 415, "test_lin": 146, "test_logist": [379, 387], "test_ms": 328, "test_neg_mean_absolute_error": [43, 216], "test_neg_mean_squared_error": [216, 831], "test_neg_root_mean_squared_error": 43, "test_negative_likelihood_ratio": 275, "test_positive_likelihood_ratio": 275, "test_prec_macro": 415, "test_precision_macro": 415, "test_r2": 831, "test_rec_macro": 415, "test_recall_macro": 415, "test_requiring_mpl_fixtur": 379, "test_result": 189, "test_scor": [144, 146, 148, 150, 222, 271, 274, 285, 289, 318, 349, 357, 392, 415, 810, 827, 831, 832, 835], "test_scores_mean": 285, "test_scores_nb": 274, "test_scores_svm": 274, "test_set": 409, "test_siz": [43, 44, 45, 49, 52, 61, 62, 64, 67, 68, 103, 140, 145, 146, 148, 149, 150, 154, 186, 192, 199, 209, 214, 221, 222, 229, 230, 266, 269, 270, 274, 279, 281, 285, 291, 300, 301, 307, 309, 310, 314, 316, 317, 323, 342, 349, 362, 384, 415, 702, 806, 821, 824, 825, 834, 836, 857, 995, 1007, 1008, 1036, 1037, 1042, 1043, 1048], "test_sklearn_compatible_estim": [321, 947], "test_sparsifi": 387, "test_stat": 47, "test_tim": [247, 353], "test_tp": 1005, "test_val": 380, "test_your_test_nam": 367, "tested_neg": 286, "tested_posit": 286, "testpypi": 383, "teunp": 1050, "texa": [51, 102], "text": [2, 42, 45, 46, 49, 50, 51, 54, 57, 67, 68, 72, 75, 79, 86, 90, 91, 93, 94, 95, 97, 102, 111, 112, 115, 141, 145, 167, 190, 195, 208, 209, 241, 245, 252, 253, 257, 259, 264, 271, 272, 278, 279, 283, 297, 300, 302, 307, 314, 324, 330, 332, 348, 357, 366, 368, 371, 372, 373, 379, 384, 391, 393, 399, 409, 411, 412, 414, 415, 416, 418, 421, 450, 452, 467, 471, 490, 491, 492, 503, 507, 512, 525, 540, 548, 568, 592, 593, 594, 595, 619, 629, 656, 662, 670, 672, 678, 680, 701, 707, 709, 711, 717, 721, 733, 734, 741, 797, 799, 804, 818, 834, 843, 845, 847, 850, 855, 868, 869, 871, 872, 880, 904, 905, 906, 908, 920, 921, 922, 949, 994, 997, 1001, 1003, 1005, 1006, 1007, 1009, 1012, 1015, 1017, 1019, 1020, 1023, 1025, 1026, 1029, 1031, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "text1": 419, "text2": 419, "text2d": 238, "text3": 419, "text3d": 127, "text_": 701, "text_kw": [701, 1051], "text_preprocess": 467, "text_stat": 102, "text_stats_transform": 102, "textbook": [419, 594], "textcoord": [48, 192], "textrm": 1020, "texttt": 1005, "textual": [416, 425, 1021, 1045], "textur": [169, 376, 762, 763, 1003], "tf": [2, 54, 57, 245, 353, 354, 355, 374, 416, 525, 548, 592, 593, 594, 595, 847, 855, 880, 994, 1003, 1007, 1015, 1024], "tf_feature_nam": 54, "tf_vector": 54, "tfid": 594, "tfidf": [54, 102, 335, 419, 595], "tfidf_feature_nam": 54, "tfidf_vector": 54, "tfidftransform": [2, 335, 354, 355, 419, 492, 595, 1043, 1044, 1050, 1052, 1053, 1054], "tfidfvector": [2, 54, 57, 102, 273, 353, 374, 416, 419, 492, 592, 593, 594, 1036, 1038, 1044, 1045, 1046, 1049, 1050, 1054, 1055], "tfidfvectorizertfidfvector": 273, "tfifi": 1049, "tfrac": 421, "tgct": 179, "tgz": 45, "th": [135, 324, 361, 392, 411, 415, 418, 426, 444, 448, 449, 454, 456, 462, 466, 475, 554, 561, 562, 563, 564, 565, 566, 568, 569, 570, 597, 598, 636, 652, 653, 673, 675, 684, 700, 722, 784, 825, 889, 939, 995, 1001, 1005, 1009, 1012, 1019, 1020, 1051], "th0rwa": [1046, 1047], "thakur": [1039, 1040], "thaler": 1042, "than": [2, 25, 43, 44, 46, 50, 51, 53, 57, 64, 66, 67, 75, 79, 81, 86, 88, 104, 107, 111, 113, 116, 119, 121, 124, 126, 128, 135, 137, 138, 140, 141, 142, 143, 144, 147, 150, 167, 169, 171, 177, 182, 187, 188, 189, 192, 194, 199, 200, 203, 214, 216, 220, 230, 231, 232, 238, 241, 247, 248, 249, 251, 258, 266, 269, 270, 272, 273, 274, 275, 278, 281, 286, 289, 291, 292, 298, 299, 310, 312, 316, 317, 318, 319, 323, 325, 327, 329, 332, 346, 353, 354, 355, 362, 366, 367, 368, 373, 374, 375, 377, 378, 379, 381, 384, 385, 387, 393, 394, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 457, 460, 463, 466, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 497, 498, 500, 513, 518, 519, 527, 535, 538, 539, 540, 541, 542, 544, 545, 546, 548, 551, 552, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 585, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 631, 632, 634, 638, 644, 646, 647, 648, 650, 651, 656, 657, 659, 662, 663, 664, 665, 666, 667, 670, 671, 672, 675, 676, 678, 680, 681, 682, 683, 686, 691, 696, 698, 700, 708, 709, 716, 724, 725, 726, 727, 728, 739, 740, 743, 768, 783, 784, 785, 787, 789, 799, 801, 802, 804, 807, 808, 814, 818, 823, 825, 826, 829, 830, 831, 832, 833, 836, 838, 839, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 862, 865, 866, 871, 881, 882, 883, 885, 886, 888, 891, 897, 898, 902, 905, 908, 909, 910, 913, 914, 916, 917, 918, 919, 920, 925, 940, 952, 954, 955, 961, 967, 973, 975, 978, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1024, 1025, 1028, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "thanh": 1054, "thank": [0, 43, 55, 62, 88, 116, 189, 192, 214, 281, 353, 354, 378, 387, 1024, 1029, 1036, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "tharak": 1053, "thebabush": [1053, 1054], "thedevpanda": 1051, "thei": [0, 8, 25, 30, 31, 43, 52, 63, 72, 83, 90, 113, 123, 133, 136, 142, 144, 146, 148, 150, 151, 165, 168, 169, 171, 172, 176, 187, 188, 199, 200, 203, 209, 214, 215, 232, 235, 238, 241, 247, 248, 251, 265, 269, 272, 273, 275, 281, 286, 289, 292, 294, 308, 312, 317, 323, 325, 346, 353, 354, 359, 360, 362, 366, 367, 368, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 387, 388, 391, 392, 393, 394, 402, 405, 408, 410, 411, 412, 413, 414, 416, 418, 420, 421, 423, 443, 445, 449, 456, 457, 470, 500, 512, 513, 537, 539, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 601, 614, 623, 633, 647, 650, 651, 656, 662, 663, 664, 665, 666, 674, 676, 680, 682, 685, 691, 766, 767, 769, 772, 778, 793, 804, 818, 837, 843, 844, 845, 846, 847, 865, 868, 870, 876, 887, 888, 910, 913, 916, 917, 918, 919, 923, 994, 995, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1029, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "theil": [2, 184, 193, 217, 220, 312, 653, 661, 675, 682, 683, 1026], "theilsen": 220, "theilsenregressor": [2, 220, 231, 653, 675, 682, 1001, 1040, 1048, 1050, 1055], "theirs": 353, "them": [16, 43, 44, 47, 68, 74, 75, 82, 86, 88, 89, 93, 98, 99, 102, 103, 116, 121, 123, 126, 136, 151, 164, 169, 171, 182, 183, 187, 188, 189, 192, 194, 199, 202, 209, 215, 216, 218, 232, 245, 248, 251, 252, 266, 270, 272, 273, 275, 281, 285, 289, 294, 312, 317, 319, 324, 335, 342, 355, 361, 366, 368, 374, 379, 380, 381, 382, 383, 387, 391, 393, 394, 396, 402, 405, 409, 410, 411, 412, 415, 416, 418, 419, 421, 447, 450, 452, 453, 460, 467, 470, 497, 498, 512, 571, 572, 573, 574, 611, 612, 620, 624, 625, 628, 636, 643, 668, 696, 772, 775, 778, 782, 783, 784, 785, 793, 804, 818, 825, 833, 868, 872, 877, 878, 882, 886, 888, 889, 898, 899, 905, 916, 917, 946, 947, 961, 970, 994, 995, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1015, 1020, 1021, 1023, 1024, 1028, 1029, 1036, 1037, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "themat": 393, "theme": [374, 379, 397, 404, 1036], "themrmax": [1042, 1043], "themselv": [64, 187, 312, 375, 381, 387, 393, 402, 408, 411, 418, 419, 421, 449, 619, 796, 1021, 1046], "theodor": 1041, "theofilo": 1043, "theoptip": [1046, 1047], "theorem": [32, 171, 349, 1007], "theoret": [37, 72, 90, 171, 266, 411, 418, 557, 558, 643, 708, 730, 760, 908, 994, 1001, 1002, 1004, 1005, 1007, 1017, 1019, 1020, 1029], "theori": [8, 144, 247, 262, 349, 376, 411, 415, 418, 694, 698, 730, 760, 900, 901, 952, 994, 1001, 1002, 1004, 1005, 1006, 1020, 1021], "theotheo": 1046, "thereaft": [187, 194], "therebi": [43, 187, 415, 418, 997, 1046], "therefor": [43, 48, 53, 58, 61, 64, 70, 72, 85, 86, 103, 104, 107, 111, 116, 126, 130, 135, 138, 140, 147, 150, 153, 155, 168, 186, 189, 214, 218, 230, 231, 257, 262, 263, 266, 273, 275, 285, 286, 289, 291, 295, 309, 312, 317, 331, 342, 349, 350, 353, 354, 361, 366, 373, 377, 381, 384, 391, 402, 405, 407, 411, 412, 413, 415, 416, 418, 419, 440, 539, 545, 553, 555, 557, 558, 563, 564, 568, 569, 608, 610, 662, 663, 669, 672, 675, 680, 682, 683, 705, 716, 739, 761, 801, 868, 869, 881, 885, 889, 897, 924, 995, 999, 1001, 1002, 1005, 1007, 1008, 1009, 1010, 1013, 1015, 1020, 1021, 1025, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "therein": 672, "thereof": 393, "theriley106": 1044, "thesi": [0, 376, 411, 418], "theta": [172, 173, 175, 177, 179, 180, 249, 416, 421, 527, 540, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 696, 1007, 1021], "theta0": 172, "theta1": 172, "theta_": [846, 1007], "theta_c": [249, 527], "theta_d": 416, "theta_i": 1007, "theta_l": 421, "theta_opt": [614, 615], "thi": [0, 2, 7, 11, 30, 31, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 399, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 485, 486, 487, 488, 490, 492, 493, 497, 498, 500, 501, 502, 503, 505, 506, 507, 509, 512, 513, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 581, 583, 584, 585, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 706, 707, 708, 710, 711, 713, 715, 716, 717, 718, 720, 721, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 740, 741, 742, 743, 744, 745, 747, 752, 758, 759, 760, 761, 762, 763, 765, 766, 767, 769, 772, 773, 778, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 924, 925, 927, 928, 929, 930, 934, 935, 940, 941, 942, 944, 946, 947, 952, 954, 957, 960, 961, 962, 963, 964, 965, 967, 970, 971, 974, 975, 978, 979, 988, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1029, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "thibault": 1045, "thibaut": 1050, "thibsej": 1045, "thick": [93, 302, 1008], "thierno": 1046, "thierri": [0, 1029, 1042, 1043, 1050], "thij": [1048, 1051, 1052], "thin": [236, 624], "thing": [48, 70, 235, 267, 353, 367, 368, 374, 378, 379, 381, 391, 394, 411, 413, 419, 563, 564, 1001, 1015, 1029, 1042], "think": [44, 72, 187, 188, 353, 354, 379, 387, 417, 1004, 1025, 1029], "thinner": 100, "third": [70, 143, 148, 164, 169, 179, 232, 241, 263, 289, 297, 314, 327, 367, 374, 378, 381, 391, 394, 405, 419, 538, 592, 593, 594, 595, 806, 807, 808, 813, 850, 851, 852, 854, 856, 886, 898, 994, 1016, 1036, 1047, 1052, 1053, 1055], "thirion": [0, 400, 1036, 1042, 1043, 1049], "thirteen": 376, "thirti": 1023, "thiruvenkadam": 1050, "this_centroid": 77, "this_cov": 113, "this_cv": 267, "this_di": 51, "this_dx": 51, "this_i": [61, 220], "this_max_it": 229, "this_p": 63, "this_prec": 113, "this_scor": 345, "this_sw": 61, "this_x": [61, 212, 220], "thoma": [0, 128, 367, 369, 394, 400, 904, 1001, 1015, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "thomas9292": 1048, "thomaz": 1047, "thomo": 91, "thompson": [1039, 1051, 1052], "thorben": 1048, "thorough": 1029, "thoroughli": 1010, "thorsten": 1029, "those": [43, 46, 51, 55, 57, 88, 93, 103, 136, 147, 150, 167, 169, 186, 187, 188, 189, 190, 214, 216, 218, 232, 239, 245, 248, 250, 251, 263, 265, 266, 272, 275, 278, 289, 308, 312, 317, 329, 339, 342, 353, 354, 355, 366, 367, 373, 379, 381, 383, 384, 385, 386, 391, 393, 394, 397, 408, 409, 410, 411, 415, 416, 418, 419, 421, 451, 453, 464, 467, 471, 498, 499, 500, 507, 561, 562, 568, 569, 573, 574, 585, 696, 701, 716, 722, 740, 804, 807, 808, 816, 818, 825, 850, 851, 852, 854, 856, 857, 858, 859, 860, 908, 909, 910, 913, 916, 917, 918, 919, 964, 994, 997, 1001, 1004, 1005, 1007, 1008, 1009, 1012, 1015, 1021, 1023, 1024, 1029, 1036, 1039, 1042, 1043, 1044, 1049, 1050, 1051, 1052, 1053, 1054], "though": [88, 141, 169, 192, 194, 251, 278, 297, 314, 316, 354, 355, 362, 366, 373, 376, 379, 383, 392, 393, 411, 416, 417, 418, 419, 420, 703, 811, 813, 908, 994, 995, 997, 1002, 1005, 1008, 1013, 1015, 1019, 1044], "thought": [234, 297, 393, 411, 449, 1002, 1006], "thoui": [0, 401, 1036], "thousand": [77, 141, 150, 245, 247, 316, 354, 374, 411, 418, 865, 866, 913, 1002, 1045, 1047], "thread": [292, 322, 325, 377, 379, 391, 393, 411, 418, 567, 840, 841, 970, 971, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053], "threadpoolctl": [41, 367, 377, 397, 404], "threadsaf": 1049, "three": [43, 46, 63, 70, 75, 76, 80, 88, 91, 109, 118, 135, 140, 142, 144, 145, 146, 156, 157, 158, 166, 169, 179, 187, 199, 206, 211, 214, 216, 223, 225, 247, 248, 257, 260, 291, 318, 319, 322, 367, 372, 375, 376, 383, 397, 405, 408, 411, 415, 416, 417, 419, 454, 465, 502, 713, 954, 998, 1000, 1001, 1002, 1005, 1008, 1015, 1019, 1020, 1023, 1036], "three_d_arrai": 925, "thresh": 1040, "threshold": [2, 50, 62, 77, 98, 119, 124, 130, 169, 184, 188, 190, 209, 242, 244, 264, 269, 270, 271, 276, 279, 291, 327, 328, 330, 358, 361, 393, 406, 411, 416, 418, 420, 444, 445, 448, 449, 472, 500, 504, 512, 513, 535, 541, 546, 552, 553, 554, 555, 565, 567, 592, 595, 597, 601, 606, 607, 648, 662, 671, 675, 680, 682, 696, 702, 704, 706, 707, 710, 711, 722, 724, 730, 731, 743, 744, 746, 760, 786, 788, 791, 792, 793, 798, 801, 802, 803, 804, 823, 826, 834, 843, 854, 855, 869, 871, 873, 875, 888, 891, 903, 904, 905, 906, 913, 920, 922, 978, 1001, 1005, 1008, 1009, 1011, 1015, 1018, 1020, 1021, 1025, 1026, 1031, 1036, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055], "threshold_": [601, 1043], "threshold_lambda": 648, "threshold_sign": 361, "thriller": [419, 879], "thrive": [0, 379], "throat": [50, 305, 374, 502], "through": [0, 2, 46, 52, 70, 140, 169, 179, 187, 218, 234, 246, 267, 272, 275, 297, 316, 317, 340, 347, 355, 361, 376, 379, 381, 386, 388, 393, 394, 397, 402, 410, 411, 414, 416, 418, 420, 421, 428, 434, 449, 467, 470, 475, 539, 545, 561, 562, 565, 568, 569, 570, 585, 597, 598, 601, 651, 655, 657, 659, 662, 663, 665, 667, 669, 672, 680, 681, 692, 695, 724, 810, 827, 884, 896, 900, 901, 916, 917, 918, 919, 959, 962, 994, 995, 1002, 1005, 1007, 1008, 1009, 1011, 1013, 1015, 1019, 1020, 1021, 1029, 1036, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055], "throughout": [327, 362, 393, 631, 805, 865, 866, 1039, 1044], "throughput": [365, 1024, 1031, 1039], "throw": [2, 309, 388, 933, 1040, 1043, 1044, 1045, 1046, 1050], "thrown": [715, 1045, 1046], "thu": [43, 44, 61, 62, 63, 64, 75, 86, 88, 93, 109, 113, 124, 126, 138, 140, 141, 144, 150, 165, 171, 176, 177, 188, 199, 201, 203, 214, 216, 232, 241, 247, 252, 259, 266, 270, 272, 277, 278, 279, 285, 286, 295, 319, 321, 324, 357, 362, 366, 367, 374, 381, 385, 391, 393, 402, 409, 410, 411, 415, 416, 418, 419, 421, 422, 440, 442, 466, 519, 531, 557, 558, 559, 560, 561, 562, 567, 568, 569, 570, 607, 610, 614, 626, 631, 636, 637, 647, 649, 662, 681, 709, 722, 729, 750, 792, 799, 804, 806, 811, 813, 818, 825, 839, 842, 877, 908, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1025, 1029, 1036, 1038, 1042, 1044, 1045, 1046, 1048, 1052], "thuan": 1047, "thukarama": 1051, "thumb": [13, 141, 192, 366, 379, 380, 391, 411, 662, 663, 670, 671, 672, 680, 681, 682, 908, 1005], "thumbnail": 1036, "th\u00e9ophil": 1052, "ti": [102, 214, 259, 262, 270, 350, 366, 387, 409, 411, 603, 604, 639, 724, 730, 760, 801, 802, 910, 913, 916, 1004, 1005, 1020, 1037, 1039, 1040, 1044, 1046, 1050, 1051, 1052], "tiago": [1037, 1041], "tialo": [1053, 1054, 1055], "tian": [411, 445, 1041, 1042, 1043], "tianqi": 418, "tiao": [1041, 1042], "tib": [686, 687], "tibshirani": [138, 139, 149, 169, 201, 271, 376, 415, 418, 524, 563, 564, 632, 660, 725, 727, 728, 838, 855, 916, 917, 995, 999, 1001, 1006, 1012, 1021], "tic": [169, 188, 251, 283, 1007], "tic_bwd": 169, "tic_fwd": 169, "ticconi": 1042, "tick": [47, 78, 93, 174, 252, 283, 379, 636, 832], "tick_bottom": 312, "tick_label": [148, 190, 321], "tick_labels_dict": [148, 190, 321], "tick_labels_parameter_nam": [148, 190, 321], "tick_left": 312, "tick_param": [46, 54, 158, 257, 272, 316, 334], "tick_right": 46, "ticker": [234, 236, 239, 292], "ticket": [326, 379], "tidelift": 0, "tie": [184, 206, 337, 391, 418, 516, 836, 913, 1006, 1020, 1021, 1026, 1037, 1052], "tieleman": [864, 1010], "tien": 1041, "tiernei": [1044, 1045, 1046], "tight": [75, 130, 137, 143, 162, 165, 202, 206, 207, 208, 219, 223, 226, 231, 236, 239, 261, 292, 298, 299, 303, 304, 338, 342, 345, 347, 358, 586, 696, 1048], "tight_layout": [45, 47, 62, 64, 67, 75, 85, 88, 98, 105, 107, 116, 121, 122, 123, 131, 135, 137, 142, 143, 145, 148, 153, 155, 157, 173, 175, 180, 182, 186, 187, 189, 190, 194, 195, 199, 204, 212, 214, 222, 225, 229, 232, 234, 246, 251, 267, 268, 284, 291, 292, 294, 304, 313, 314, 315, 316, 317, 321, 325, 340, 354, 357, 358, 375], "tijanajovanov": 1048, "tikhonov": [178, 421, 676], "tild": [874, 1013, 1015], "tilen": 1046, "till": [411, 445, 792, 1005], "tim": [0, 400, 1036, 1041, 1042, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1054, 1055], "time": [0, 2, 37, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 402, 405, 407, 408, 409, 411, 413, 414, 416, 418, 419, 422, 440, 444, 446, 447, 448, 449, 450, 453, 455, 458, 460, 461, 462, 464, 465, 466, 467, 468, 470, 471, 475, 495, 500, 503, 505, 523, 527, 538, 540, 542, 544, 545, 551, 566, 571, 572, 573, 574, 594, 614, 623, 631, 632, 633, 634, 638, 643, 644, 647, 650, 654, 656, 658, 664, 666, 668, 670, 671, 676, 677, 678, 680, 681, 682, 689, 690, 694, 696, 698, 705, 746, 749, 750, 752, 794, 798, 801, 802, 804, 806, 807, 808, 809, 811, 813, 818, 819, 820, 823, 825, 829, 830, 831, 832, 833, 834, 836, 838, 843, 844, 845, 846, 847, 848, 849, 856, 858, 859, 860, 864, 865, 866, 867, 868, 869, 870, 872, 873, 875, 878, 881, 883, 887, 892, 900, 901, 905, 906, 910, 913, 914, 922, 946, 947, 954, 970, 994, 995, 997, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1029, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "time_dens": 328, "time_spars": 328, "time_step": [199, 866], "timeit": [229, 260, 385], "timeout": [500, 970, 1050], "timer": [260, 385], "times_init": 260, "timescal": 246, "timeseri": 43, "timeseriessplit": [2, 43, 52, 150, 199, 267, 415, 1042, 1043, 1048], "timo": 1048, "timofei": 1051, "timotheemathieu": 1049, "timothi": [1041, 1049], "timsaur": 1046, "tinertia": 91, "ting": [567, 1011, 1044, 1045], "tingshan": 1049, "tini": [1038, 1051, 1054], "tinoco": 1053, "tinta": 318, "tip": [362, 365, 379, 382, 385, 406, 419, 538, 545, 649, 696, 1001, 1027, 1028, 1030, 1031, 1039], "tiphain": 1047, "tirth": [1046, 1047], "titan": [103, 189, 255, 321, 325, 326, 1013], "titl": [0, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 68, 72, 73, 74, 76, 79, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 109, 110, 112, 113, 115, 116, 118, 121, 122, 123, 124, 125, 128, 129, 130, 136, 137, 138, 141, 143, 144, 147, 148, 150, 151, 154, 157, 158, 162, 164, 165, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 187, 194, 195, 197, 199, 201, 202, 203, 206, 207, 213, 214, 216, 218, 219, 220, 222, 223, 228, 231, 232, 234, 235, 236, 241, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 271, 272, 273, 275, 276, 277, 281, 282, 285, 287, 294, 295, 298, 299, 300, 301, 303, 304, 305, 312, 316, 317, 318, 319, 333, 336, 338, 339, 340, 341, 342, 345, 346, 350, 351, 353, 358, 359, 360, 375, 378, 379, 383, 387, 412, 1005, 1028], "title_bow": 412, "titles_opt": 265, "titov": [1044, 1046, 1049, 1050], "titu": 1047, "tiwari": 1048, "tiziano": 1036, "tjoa": 1040, "tkammi": 1042, "tkdd": 567, "tliu68": 1049, "tm": [51, 1008], "tmp": 383, "tmpdir": [294, 321], "tn": [266, 329, 716, 722, 1005], "tn_c": 281, "tnr": 266, "tnwei": 1048, "to_british": 419, "to_fram": 107, "to_list": 190, "to_numpi": [176, 266], "to_onnx": 405, "to_replac": [43, 188], "toarrai": [46, 328, 335, 361, 412, 419, 570, 586, 592, 594, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 881, 898, 899, 953, 975, 976, 978, 986, 987, 995, 1008, 1015, 1053], "toastedcornflak": [1042, 1043], "toastedyeast": [1050, 1051], "tobia": [1044, 1049, 1051], "tobychees": [1043, 1044], "toc": [169, 251], "toc_bwd": 169, "toc_fwd": 169, "toccac": 1046, "tocsc": 200, "tocsr": 55, "toctre": [379, 397, 404], "tod": [411, 422, 447], "todai": 176, "todens": [979, 980, 981, 982, 983, 984, 985], "todo": [80, 245, 383, 387, 411, 1055], "toeplitz": 110, "togeth": [43, 51, 84, 93, 103, 143, 155, 171, 177, 187, 196, 235, 238, 251, 268, 318, 325, 345, 358, 362, 381, 391, 392, 393, 411, 418, 419, 420, 426, 454, 456, 571, 572, 598, 693, 719, 804, 818, 868, 869, 882, 1001, 1002, 1005, 1006, 1012, 1015, 1021, 1022, 1029, 1042, 1053], "toi": [48, 58, 71, 74, 75, 76, 77, 81, 82, 85, 86, 88, 89, 90, 100, 111, 116, 125, 138, 151, 156, 157, 184, 197, 204, 218, 228, 240, 251, 257, 298, 299, 308, 339, 348, 372, 385, 391, 411, 418, 419, 443, 444, 445, 447, 449, 451, 452, 453, 455, 461, 472, 516, 518, 526, 567, 643, 681, 730, 760, 802, 854, 861, 869, 888, 912, 1002, 1004, 1005, 1011, 1015, 1026, 1031], "tok": [355, 419], "token": [2, 57, 355, 366, 374, 383, 419, 540, 592, 593, 594, 595, 1036, 1044, 1048, 1054], "token_featur": 419, "token_freq": 355, "token_pattern": [355, 419, 592, 593, 595], "tokoroten": 1041, "tokyo": [876, 1016], "tol": [46, 49, 55, 105, 121, 145, 150, 169, 182, 195, 205, 207, 221, 222, 228, 230, 241, 252, 258, 260, 310, 324, 349, 353, 381, 385, 418, 423, 446, 450, 452, 455, 462, 465, 474, 475, 481, 485, 486, 487, 535, 536, 537, 539, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 553, 554, 563, 564, 565, 566, 606, 631, 642, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 676, 678, 680, 681, 682, 683, 684, 686, 687, 689, 690, 691, 692, 693, 695, 697, 699, 801, 802, 818, 857, 865, 866, 903, 904, 908, 909, 910, 911, 912, 913, 914, 990, 1001, 1019, 1020, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054], "tola": 1046, "told": 419, "toledano": 1044, "toler": [80, 105, 150, 182, 205, 207, 230, 231, 346, 355, 374, 381, 388, 411, 423, 446, 450, 455, 462, 465, 474, 475, 481, 485, 486, 487, 535, 536, 537, 539, 540, 544, 545, 546, 547, 548, 549, 551, 552, 563, 564, 565, 566, 631, 650, 651, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 680, 682, 683, 685, 686, 687, 688, 692, 693, 694, 695, 697, 698, 699, 848, 849, 853, 857, 865, 866, 903, 904, 908, 909, 910, 911, 912, 913, 914, 990, 1001, 1005, 1019, 1020, 1048, 1049, 1050, 1051], "toleranbc": 1045, "tolist": [43, 146, 182, 271, 323, 374], "tom": [0, 400, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "tom1092": 1049, "toma": 1040, "tomasz": 1049, "tomato": 215, "tomatti": 1051, "tomdlt": 1042, "tomiock": [1051, 1052], "tommaso": 1049, "tommi": [1043, 1044, 1045], "tomographi": [42, 55, 99, 184, 656, 676, 1001, 1026], "tomohiro": 1049, "tomorrow": 410, "tom\u00e1": [1049, 1050], "tongyu": 1053, "toni": [45, 374, 567, 888, 1011, 1049, 1050], "tonk": 1043, "too": [43, 46, 51, 52, 55, 64, 79, 83, 88, 90, 95, 102, 106, 113, 125, 147, 150, 182, 187, 189, 199, 215, 218, 235, 245, 251, 258, 265, 266, 270, 279, 285, 309, 318, 342, 353, 359, 360, 366, 376, 379, 385, 387, 391, 393, 409, 411, 413, 415, 418, 419, 420, 423, 440, 452, 542, 683, 696, 711, 843, 844, 845, 846, 847, 873, 886, 888, 1000, 1002, 1004, 1005, 1007, 1008, 1012, 1037, 1040, 1043, 1044, 1045, 1046, 1048, 1054], "took": [0, 43, 77, 280], "tool": [21, 29, 41, 48, 50, 52, 145, 187, 248, 266, 270, 275, 362, 372, 373, 374, 377, 379, 381, 382, 384, 385, 386, 387, 392, 393, 394, 396, 397, 402, 405, 411, 412, 413, 490, 696, 705, 994, 1000, 1001, 1005, 1011, 1015, 1020, 1022, 1024, 1025, 1029, 1043, 1046, 1049, 1050, 1051], "toolbox": [391, 1024, 1029], "toolchain": 377, "toolkit": [366, 1024, 1029], "toolset": 1029, "tooth": 122, "tootoonian": 1049, "top": [2, 45, 51, 53, 54, 55, 70, 72, 74, 76, 77, 78, 79, 84, 95, 97, 103, 123, 133, 140, 141, 143, 150, 155, 158, 187, 214, 216, 225, 229, 241, 251, 252, 257, 259, 260, 263, 269, 273, 281, 282, 297, 312, 314, 318, 322, 328, 331, 332, 342, 346, 353, 362, 379, 381, 385, 391, 408, 409, 411, 416, 417, 418, 490, 591, 592, 595, 603, 730, 760, 798, 920, 922, 994, 997, 1001, 1003, 1013, 1024, 1029, 1050, 1055], "top10": 374, "top5": 353, "top_featur": 54, "top_features_ind": 54, "top_indic": 353, "top_k_accuraci": 1005, "top_k_accuracy_scor": [2, 1005, 1048, 1050], "tophat": [297, 417, 848, 849, 853], "topic": [42, 45, 46, 47, 102, 184, 353, 354, 355, 374, 375, 415, 416, 419, 491, 501, 540, 542, 544, 551, 592, 595, 1001, 1006, 1024, 1025, 1026, 1041, 1043], "topic_d": 47, "topic_idx": 54, "topic_word_prior": [416, 540], "topic_word_prior_": 540, "topisan": 1046, "toplak": 1052, "topolog": [466, 1024], "topologi": [238, 239], "torch": [407, 1054], "torgo": 373, "toro": 318, "toronto": [538, 648, 864], "torr": [1045, 1054], "torrella": [1045, 1046, 1052, 1055], "tortois": 1001, "tosequ": 1054, "toshihiro": [1042, 1043, 1049], "toshniw": 1048, "tot": 51, "total": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 358, 359, 360, 361, 367, 373, 374, 376, 385, 393, 408, 411, 417, 419, 422, 434, 447, 468, 485, 486, 487, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 504, 505, 506, 508, 509, 514, 516, 518, 519, 523, 526, 527, 540, 548, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 574, 587, 588, 594, 598, 600, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 680, 681, 682, 683, 701, 708, 709, 717, 733, 734, 735, 738, 742, 743, 761, 773, 787, 788, 791, 798, 799, 800, 804, 818, 829, 830, 831, 841, 842, 843, 844, 851, 853, 859, 866, 883, 887, 909, 911, 914, 916, 917, 918, 919, 952, 994, 1001, 1002, 1005, 1006, 1007, 1008, 1015, 1019, 1020, 1021, 1026, 1037, 1042, 1044, 1052, 1053], "total_cel": 150, "total_fit_tim": 47, "total_sampl": [334, 540], "total_sz_mb": 47, "total_vect_tim": 47, "totalbsmtsf": 155, "totrmsabvgrd": 144, "tottim": 385, "tour": [0, 400, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "tournament": 994, "toward": [0, 63, 64, 96, 113, 142, 147, 154, 171, 189, 194, 218, 219, 239, 251, 285, 349, 379, 393, 411, 451, 455, 465, 680, 682, 699, 882, 1004, 1019, 1021, 1023, 1025], "toyota": 51, "tp": [329, 411, 716, 722, 733, 734, 735, 786, 787, 788, 791, 920, 1005], "tp_c": 281, "tpng": 920, "tpot": 1024, "tpr": [50, 242, 251, 266, 269, 281, 282, 386, 706, 710, 793, 1005, 1033, 1036, 1052], "tpr_a": 281, "tpr_b": 281, "tpr_score": 266, "tprs_lower": 282, "tprs_upper": 282, "tr": [267, 376, 383, 411, 413, 472, 473, 474, 475, 476, 477, 478, 479], "trace": [387, 411, 424, 476, 478, 479, 482, 483, 484, 693, 697, 1002, 1047], "traceback": [379, 384, 387, 391, 471, 715, 1028, 1053], "traceord": 141, "tracer0tong": 1042, "trach": 1036, "track": [133, 139, 146, 332, 379, 382, 383, 407, 538, 973, 1006, 1024, 1025, 1043, 1046], "tracker": [378, 382, 387, 391, 394, 397, 405, 1025], "tracking_select": 973, "tractabl": [43, 415, 545, 638, 1024, 1049], "trade": [37, 94, 109, 141, 150, 189, 218, 271, 273, 274, 285, 342, 353, 393, 410, 411, 413, 557, 558, 563, 564, 638, 660, 696, 804, 807, 808, 818, 831, 1002, 1009, 1017, 1019, 1020, 1025], "tradeoff": [88, 138, 184, 246, 254, 264, 279, 280, 281, 282, 353, 366, 379, 387, 417, 519, 568, 702, 706, 731, 793, 834, 869, 888, 908, 1002, 1026, 1045, 1048], "tradit": [55, 88, 214, 229, 354, 368, 409, 418, 419, 636, 698, 1001, 1004, 1015, 1024, 1029], "tradition": 1021, "traffic": 1029, "trail": [381, 988], "train": [2, 43, 44, 45, 46, 47, 49, 50, 52, 61, 63, 64, 66, 67, 68, 69, 89, 91, 97, 98, 102, 103, 107, 115, 116, 118, 119, 121, 124, 125, 126, 133, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 152, 155, 156, 157, 160, 166, 171, 172, 173, 176, 177, 178, 179, 180, 184, 186, 187, 188, 189, 190, 192, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 214, 215, 216, 219, 221, 222, 223, 226, 228, 229, 232, 241, 244, 246, 250, 259, 261, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 291, 292, 295, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 312, 314, 316, 317, 321, 324, 328, 330, 331, 332, 335, 336, 338, 341, 348, 349, 355, 356, 359, 360, 362, 366, 367, 368, 371, 374, 376, 381, 384, 391, 392, 393, 407, 409, 410, 411, 412, 413, 414, 416, 418, 419, 420, 421, 423, 440, 443, 444, 446, 447, 450, 452, 454, 455, 456, 457, 462, 468, 472, 473, 475, 476, 477, 478, 479, 485, 486, 487, 488, 490, 491, 492, 497, 500, 501, 502, 504, 508, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 631, 632, 634, 635, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 692, 693, 695, 696, 700, 707, 745, 792, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 873, 874, 877, 878, 881, 882, 886, 887, 888, 889, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 978, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1031, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "train_0": 43, "train_4": 43, "train_accuraci": [259, 286], "train_auc": 831, "train_ax": 126, "train_balanced_accuraci": 286, "train_cover_std": 50, "train_dataset": [187, 373], "train_errors_with": 145, "train_errors_without": 145, "train_fract": 1036, "train_idx": [52, 187, 393], "train_import": 189, "train_index": [259, 334, 415, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825], "train_indx": 415, "train_pr": 145, "train_prec_macro": 415, "train_r2": 831, "train_rec_macro": 415, "train_result": 189, "train_sampl": [64, 229, 230], "train_scor": [222, 318, 349, 357, 810, 827, 831, 832, 835, 1000], "train_score_": [148, 418, 563, 564, 565, 566], "train_set": 409, "train_siz": [44, 46, 49, 135, 154, 172, 192, 230, 247, 251, 274, 285, 323, 326, 349, 806, 810, 821, 824, 832, 834, 1000, 1036, 1037, 1042, 1043], "train_size_ab": 832, "train_size_idx": 349, "train_sizes_ab": 832, "train_test_s": 247, "train_test_split": [2, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 103, 107, 116, 126, 135, 140, 142, 145, 146, 147, 148, 149, 150, 151, 154, 165, 166, 186, 187, 189, 190, 192, 199, 209, 214, 221, 222, 229, 230, 232, 242, 251, 254, 255, 265, 266, 269, 270, 275, 279, 281, 285, 291, 295, 300, 301, 307, 309, 310, 314, 316, 317, 319, 321, 322, 323, 328, 329, 335, 357, 361, 362, 384, 392, 407, 412, 415, 418, 440, 441, 562, 564, 571, 572, 701, 702, 704, 706, 803, 804, 826, 836, 839, 857, 865, 866, 868, 918, 919, 994, 995, 1005, 1007, 1008, 1013, 1015, 1020, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1049, 1053, 1054], "train_tim": [229, 247, 353, 354], "trainabl": 381, "traine": 1029, "training_data": 171, "training_data_": 1046, "training_idx": 179, "training_indic": 178, "training_noisy_target": 171, "training_sample_indic": 171, "training_tim": [145, 353], "training_time_early_stop": 145, "training_time_ful": 145, "trajectori": 139, "tran": 110, "trans_data": 236, "transact": [96, 266, 329, 376, 411, 413, 422, 424, 447, 451, 478, 538, 542, 544, 551, 567, 648, 668, 689, 690, 729, 730, 760, 773, 1001, 1005], "transax": [79, 95, 238, 241, 259, 300, 314], "transcript": 379, "transcriptom": 696, "transduc": 332, "transduct": [393, 411, 903, 904, 1025], "transduction_": [331, 332, 333, 903, 904, 905], "transfer": [150, 402, 407, 1001, 1025], "transform": [2, 7, 20, 23, 35, 37, 43, 44, 45, 47, 49, 53, 62, 79, 80, 81, 84, 87, 90, 95, 101, 105, 106, 116, 118, 123, 124, 126, 127, 129, 130, 134, 139, 141, 144, 154, 155, 166, 177, 183, 184, 187, 188, 189, 192, 206, 214, 215, 222, 228, 230, 232, 235, 238, 241, 243, 244, 246, 248, 249, 251, 255, 259, 268, 269, 270, 273, 281, 291, 292, 294, 300, 301, 302, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 326, 328, 329, 342, 345, 346, 353, 355, 362, 373, 374, 375, 376, 379, 381, 384, 388, 393, 402, 405, 407, 409, 411, 413, 414, 415, 416, 418, 419, 420, 421, 427, 432, 435, 440, 444, 445, 446, 448, 450, 452, 455, 467, 468, 469, 470, 471, 485, 486, 487, 488, 491, 492, 500, 507, 512, 513, 518, 519, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 561, 563, 565, 568, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 640, 642, 643, 644, 645, 646, 657, 662, 667, 677, 680, 688, 692, 693, 694, 695, 696, 698, 705, 706, 717, 757, 758, 789, 804, 807, 808, 818, 834, 837, 843, 852, 857, 860, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 906, 908, 910, 913, 914, 927, 929, 941, 944, 946, 994, 995, 997, 999, 1001, 1002, 1005, 1006, 1009, 1019, 1020, 1022, 1024, 1025, 1026, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "transform_algorithm": [124, 130, 535, 541, 546, 1052], "transform_alpha": [124, 130, 535, 541, 546, 1049], "transform_dur": 292, "transform_func": 273, "transform_list": 867, "transform_max_it": [535, 541, 542, 546, 1046], "transform_method": 416, "transform_n_nonzero_coef": [124, 130, 535, 541, 546], "transform_n_nozero_coef": 130, "transform_output": [255, 266, 319, 471, 906, 1051, 1052], "transformed_grid": 153, "transformedtargetregressor": [2, 107, 187, 214, 391, 402, 412, 597, 598, 601, 1006, 1044, 1046, 1049, 1054, 1055], "transformedtargetregressortransformedtargetregressor": 187, "transformer_": [248, 468], "transformer_list": [106, 412, 867, 870, 995, 1047, 1048], "transformer_nam": [292, 467], "transformer_tag": [927, 941], "transformer_weight": [102, 467, 470, 867, 1041, 1048], "transformermixin": [2, 248, 292, 381, 393, 468, 1044, 1051, 1052, 1053], "transformers_": [467, 470, 1053, 1054], "transformertag": [2, 927, 941], "transfus": 242, "transit": [55, 349, 383, 405, 1047], "transitive_target": 55, "translat": [107, 381, 421, 531, 618, 877, 878, 894, 1002, 1005, 1029], "transluc": 160, "transpar": [67, 314, 989, 1029], "transpos": [62, 272, 423, 542, 544, 551, 664, 665, 666, 667, 792, 952, 990, 997, 1005, 1017, 1036, 1050], "transposit": 952, "trapezoid": [2, 279, 710, 711, 1005], "travel": 0, "travers": [361, 1008, 1012, 1054, 1055], "travi": [1036, 1044], "treat": [43, 45, 103, 144, 155, 182, 187, 214, 281, 318, 323, 328, 334, 362, 379, 391, 393, 408, 418, 419, 445, 565, 566, 592, 593, 595, 611, 612, 636, 642, 649, 675, 678, 733, 734, 742, 758, 787, 788, 791, 792, 877, 878, 884, 885, 888, 889, 893, 896, 897, 899, 908, 909, 961, 995, 997, 1001, 1005, 1006, 1012, 1015, 1019, 1021, 1040, 1048, 1052, 1053], "treatment": [112, 186, 373, 410, 416, 472, 477, 1021], "tree": [2, 43, 46, 52, 63, 64, 67, 76, 79, 88, 95, 118, 125, 134, 137, 138, 139, 141, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 158, 169, 179, 182, 188, 190, 198, 222, 223, 235, 248, 250, 251, 252, 269, 276, 278, 289, 291, 292, 295, 297, 305, 312, 313, 317, 322, 323, 325, 362, 366, 374, 376, 385, 392, 393, 396, 409, 410, 411, 417, 422, 440, 444, 445, 446, 447, 448, 449, 451, 453, 460, 466, 500, 504, 508, 518, 519, 523, 548, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 635, 636, 637, 638, 662, 692, 696, 706, 707, 715, 746, 752, 792, 794, 810, 825, 831, 832, 834, 843, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 869, 872, 881, 916, 917, 918, 919, 920, 921, 922, 947, 995, 1002, 1005, 1006, 1011, 1012, 1024, 1025, 1026, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "tree_": [321, 357, 361, 853, 916, 917, 918, 919, 1053], "tree_copi": [848, 849], "tree_disp": 252, "tree_importance_sorted_idx": 190, "tree_optim": 289, "tree_preprocessor": [155, 214], "tree_stat": [848, 849], "treelit": 1024, "trein": 1039, "tremend": [318, 418], "trend": [152, 176, 188, 244, 308, 1029, 1043], "trent": [1029, 1042], "trevor": [169, 201, 326, 376, 632, 660, 725, 727, 728, 995, 1001, 1017, 1040, 1041, 1044, 1045, 1046, 1048], "trevorstephen": [1040, 1042], "tri": [99, 129, 234, 285, 301, 346, 367, 381, 384, 391, 394, 409, 452, 454, 456, 635, 636, 637, 674, 696, 702, 704, 706, 818, 1010, 1038, 1044, 1048, 1054], "triag": [0, 379, 382, 394], "trial": [43, 277, 450, 452, 463, 675, 801, 802, 1001, 1042], "triangl": [393, 416, 446, 450, 462, 703, 1003, 1008], "triangular": [411, 466, 615, 1002], "tribe": 374, "trick": [2, 171, 247, 302, 346, 355, 365, 368, 382, 391, 412, 586, 593, 647, 676, 997, 998, 1009, 1019, 1020, 1031, 1037, 1045, 1053], "tricki": [409, 1002], "trickiest": 379, "trigg": 570, "trigger": [103, 104, 379, 383, 393, 405, 412, 865, 866, 868, 869, 934, 935, 952, 1001, 1044, 1050, 1051], "triglycerid": [169, 376], "trim": [229, 411, 848, 849], "trimeta": 1047, "trinh": 1051, "tripl": 384, "triplet": 513, "tripramudya": 1052, "trishnendu": 1044, "tristan": 1001, "triu": 51, "trivial": [48, 216, 266, 357, 379, 411, 822, 910, 913, 1002, 1025, 1036], "troillard": [1052, 1053], "tropp": [539, 545], "troubl": [66, 419], "troubleshoot": 419, "troyanskaya": [632, 995], "true": [2, 43, 44, 45, 46, 47, 49, 50, 52, 54, 55, 63, 64, 66, 68, 70, 72, 79, 82, 83, 86, 87, 88, 90, 91, 93, 96, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 119, 121, 122, 123, 124, 126, 131, 133, 135, 139, 141, 144, 146, 147, 149, 150, 151, 152, 155, 156, 158, 160, 161, 165, 168, 171, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 199, 201, 202, 203, 205, 207, 209, 210, 211, 214, 216, 217, 218, 221, 222, 228, 229, 230, 232, 234, 237, 238, 241, 242, 245, 247, 248, 249, 250, 251, 254, 255, 257, 260, 262, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 297, 298, 301, 305, 307, 308, 309, 310, 313, 317, 318, 319, 321, 323, 325, 326, 327, 328, 329, 332, 334, 335, 336, 345, 346, 348, 349, 350, 353, 354, 355, 357, 358, 361, 362, 366, 367, 372, 374, 375, 377, 379, 380, 381, 384, 385, 386, 388, 392, 393, 396, 402, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 428, 430, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 462, 464, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 523, 526, 527, 528, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 715, 716, 717, 718, 719, 722, 723, 724, 728, 730, 731, 732, 733, 734, 735, 737, 738, 739, 742, 743, 744, 745, 746, 747, 756, 758, 760, 765, 771, 773, 782, 786, 787, 788, 789, 790, 791, 792, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 818, 822, 823, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 927, 928, 932, 933, 934, 935, 941, 946, 947, 952, 953, 965, 966, 969, 970, 974, 975, 976, 977, 985, 990, 992, 993, 994, 995, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "true_": [201, 541, 640], "true_coef": [186, 199, 209, 285, 650, 651, 656, 664, 665, 666, 685, 686, 687], "true_cov": [472, 474, 475, 481], "true_den": 297, "true_fac": 250, "true_fun": 287, "true_h": 325, "true_k": 354, "true_label": [327, 331, 332], "true_nam": 45, "true_relev": [730, 760], "true_w": 325, "true_weight": 194, "trujillo": [1050, 1051], "truli": [275, 368, 716, 1005], "truncat": [2, 105, 153, 235, 388, 538, 539, 543, 544, 545, 548, 680, 682, 730, 760, 801, 857, 921, 952, 994, 1004, 1005, 1019, 1030, 1031, 1042, 1044], "truncate_mod": 76, "truncatedsvd": [2, 153, 235, 354, 416, 538, 539, 543, 544, 545, 696, 867, 870, 1038, 1043, 1047, 1048, 1050, 1054], "truong": 1042, "trust": [0, 51, 63, 103, 104, 112, 135, 140, 142, 151, 152, 155, 158, 166, 176, 187, 188, 189, 190, 196, 242, 243, 244, 248, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 310, 318, 322, 323, 325, 326, 328, 333, 361, 394, 405, 409, 1050], "trustworthi": [2, 325, 1044, 1045, 1050, 1051, 1052, 1053], "truth": [2, 27, 58, 68, 75, 82, 90, 91, 94, 109, 113, 116, 124, 128, 151, 179, 199, 208, 214, 215, 251, 263, 275, 354, 393, 411, 707, 708, 709, 712, 716, 717, 718, 719, 721, 722, 725, 727, 728, 730, 732, 733, 734, 738, 740, 741, 742, 743, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 787, 788, 789, 790, 791, 794, 795, 799, 800, 1005, 1044, 1050], "truthi": [2, 965], "try": [43, 45, 50, 51, 52, 54, 62, 63, 74, 86, 103, 104, 124, 135, 140, 141, 142, 143, 150, 151, 152, 155, 158, 166, 171, 176, 177, 183, 186, 187, 188, 189, 192, 194, 196, 203, 242, 243, 244, 248, 252, 253, 254, 255, 258, 259, 262, 266, 270, 272, 273, 279, 284, 286, 289, 292, 305, 310, 318, 322, 323, 325, 326, 328, 333, 344, 349, 353, 354, 361, 374, 377, 378, 379, 381, 384, 385, 387, 391, 393, 397, 399, 402, 405, 411, 414, 415, 418, 419, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 507, 571, 581, 593, 662, 677, 679, 693, 697, 803, 804, 807, 808, 816, 818, 826, 829, 830, 831, 833, 886, 888, 891, 893, 894, 895, 896, 897, 898, 899, 908, 927, 933, 988, 994, 1001, 1002, 1011, 1020, 1021, 1025, 1028, 1029, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "tr\u00e9segni": [0, 1038], "ts_cv": [43, 52, 150], "tscv": [415, 825], "tseng": 411, "tsetogl": 1051, "tsilhouett": 91, "tslearn": 1024, "tsne": [2, 184, 234, 235, 236, 238, 239, 293, 294, 325, 393, 425, 435, 500, 692, 693, 694, 852, 856, 869, 978, 1002, 1008, 1026, 1039, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "tsne_param": 292, "tsoumaka": [724, 738, 744, 1005], "tspeng": [1051, 1052], "tsuga": 1049, "tsujii": 1019, "tsukada": 1048, "tsuruoka": 1019, "tsutomu": 1047, "tt": [156, 267, 468], "ttang131": 1046, "ttime": 91, "tttthomasssss": 1040, "tube": [914, 1020], "tue": [43, 52, 150, 188, 1042], "tuft": 452, "tuhin": 1054, "tuk": 1054, "tulio": [1044, 1045], "tulken": 1046, "tulloch": [1039, 1040], "tumor": [169, 376, 410], "tune": [2, 43, 64, 79, 88, 103, 126, 135, 141, 150, 168, 169, 171, 182, 184, 188, 203, 218, 219, 231, 238, 242, 251, 264, 265, 275, 276, 277, 279, 289, 294, 313, 334, 342, 346, 349, 353, 362, 366, 367, 368, 392, 393, 406, 409, 411, 415, 418, 420, 421, 455, 465, 500, 555, 563, 564, 565, 598, 617, 618, 619, 621, 623, 624, 626, 627, 629, 647, 662, 663, 694, 698, 704, 706, 722, 746, 788, 791, 803, 804, 820, 826, 831, 834, 864, 869, 888, 906, 913, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1011, 1019, 1020, 1024, 1026, 1031, 1036, 1050, 1052, 1054, 1055], "tuned_classifi": 329, "tuned_model": [266, 286], "tuned_model_coef": 286, "tuned_param": 46, "tuned_paramet": [109, 160, 270], "tunedthresholdclassifiercv": [2, 266, 286, 410, 803, 1054], "tunedthresholdclassifiercvifittedtunedthresholdclassifiercv": 266, "tupl": [47, 82, 88, 130, 188, 232, 372, 373, 374, 393, 415, 423, 436, 454, 456, 467, 470, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 504, 505, 506, 508, 509, 512, 514, 515, 516, 517, 518, 526, 537, 565, 566, 571, 572, 573, 574, 586, 587, 588, 591, 592, 593, 595, 631, 636, 637, 638, 715, 716, 723, 746, 785, 787, 801, 804, 818, 831, 848, 849, 867, 868, 878, 879, 883, 886, 894, 898, 910, 911, 912, 913, 914, 923, 935, 936, 938, 943, 944, 945, 946, 970, 971, 988, 993, 1012, 1042, 1043, 1047, 1048, 1049, 1054], "tur": 1054, "turn": [2, 30, 43, 68, 109, 182, 183, 187, 199, 229, 230, 246, 272, 296, 329, 355, 366, 367, 368, 374, 391, 393, 394, 411, 412, 414, 416, 419, 420, 421, 585, 586, 593, 611, 612, 837, 841, 910, 913, 937, 995, 999, 1007, 1010, 1015, 1029, 1041, 1043, 1044, 1049], "turquois": [125, 129, 130, 149, 220, 231, 237, 259, 260, 279], "tushar": 1054, "tutori": [112, 160, 161, 162, 203, 216, 232, 272, 379, 380, 385, 387, 405, 411, 455, 465, 695, 1020, 1031, 1039], "tuveri": 1051, "tuzova": 1044, "tv": 91, "tw": [192, 373, 490, 512, 513, 662, 1020], "tweak": [2, 113, 248, 415, 970, 1004, 1047], "tweedi": [2, 184, 193, 214, 467, 500, 556, 652, 673, 684, 710, 728, 749, 751, 753, 754, 756, 834, 869, 872, 873, 881, 888, 1001, 1026, 1046, 1047, 1049], "tweedie_pow": 232, "tweedieregressor": [2, 43, 322, 325, 652, 673, 1001, 1047, 1050, 1051, 1055], "tweet": 1029, "twelfth": 700, "twenti": [57, 245, 376, 408, 411], "twice": [64, 266, 284, 286, 353, 355, 381, 421, 623, 734, 736, 954, 1045, 1053], "twine": 383, "twinx": 334, "twister": 1047, "twitter": 383, "two": [2, 37, 43, 46, 48, 50, 54, 58, 61, 63, 66, 70, 72, 74, 75, 78, 88, 93, 97, 102, 103, 107, 111, 115, 116, 118, 119, 121, 123, 124, 126, 129, 134, 135, 136, 143, 144, 145, 147, 150, 151, 152, 153, 156, 166, 169, 171, 172, 173, 174, 177, 178, 182, 183, 184, 187, 188, 189, 194, 198, 199, 201, 203, 204, 205, 210, 214, 215, 216, 222, 223, 226, 231, 232, 236, 238, 239, 241, 246, 248, 249, 251, 257, 258, 259, 261, 262, 263, 266, 267, 269, 273, 279, 289, 295, 297, 300, 301, 303, 305, 312, 314, 317, 321, 322, 324, 325, 329, 333, 338, 339, 342, 343, 344, 346, 350, 353, 354, 355, 358, 362, 372, 373, 374, 375, 376, 377, 379, 381, 383, 385, 386, 387, 391, 393, 394, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 444, 445, 446, 447, 448, 450, 453, 454, 455, 456, 460, 462, 467, 472, 473, 474, 475, 476, 477, 478, 479, 491, 493, 494, 496, 497, 498, 500, 502, 504, 505, 506, 507, 508, 509, 511, 514, 518, 523, 526, 540, 542, 544, 548, 551, 553, 554, 557, 564, 574, 585, 588, 594, 595, 596, 599, 600, 602, 603, 604, 605, 606, 607, 610, 611, 612, 614, 615, 624, 625, 628, 632, 635, 636, 643, 647, 649, 674, 675, 677, 696, 703, 707, 708, 709, 716, 719, 720, 723, 725, 726, 727, 728, 735, 736, 739, 740, 742, 745, 747, 758, 759, 761, 767, 768, 775, 778, 781, 782, 783, 784, 785, 789, 790, 798, 799, 800, 801, 837, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 865, 866, 872, 873, 880, 881, 882, 883, 902, 903, 904, 908, 909, 916, 918, 919, 967, 983, 984, 990, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "two_d_arrai": 925, "two_d_label": 928, "two_mean": 79, "two_point_correl": [848, 849], "twoclass_output": 137, "twosigmajab": 1044, "twx": 51, "tx": 414, "tx_k": [414, 999], "txn": 51, "txt": [353, 373, 497, 507], "ty": 414, "ty_k": 414, "tyagi": 1050, "tygert": [539, 545, 952], "tyler": [1043, 1049, 1050, 1051], "type": [2, 46, 52, 86, 87, 98, 101, 102, 112, 118, 119, 130, 143, 144, 146, 176, 183, 184, 186, 187, 188, 192, 199, 214, 216, 243, 248, 253, 255, 256, 258, 259, 262, 263, 266, 267, 273, 278, 279, 281, 282, 283, 285, 286, 289, 302, 318, 328, 346, 353, 355, 361, 362, 367, 372, 373, 374, 376, 379, 382, 383, 384, 385, 391, 392, 397, 399, 405, 408, 412, 419, 435, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 500, 512, 513, 519, 571, 576, 585, 586, 592, 593, 595, 604, 608, 621, 631, 633, 634, 642, 660, 662, 676, 678, 683, 691, 693, 696, 697, 703, 705, 711, 718, 720, 733, 734, 737, 742, 787, 788, 791, 792, 801, 802, 804, 810, 818, 827, 832, 834, 835, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 868, 869, 870, 873, 875, 881, 882, 888, 889, 906, 910, 911, 912, 913, 914, 929, 930, 932, 934, 935, 938, 943, 944, 967, 968, 991, 995, 997, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1015, 1017, 1021, 1026, 1028, 1029, 1036, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "type_check": 383, "type_filt": 944, "type_of_target": [2, 393, 875, 889, 1006, 1050, 1051, 1053, 1054], "type_of_target_": 889, "typed_ndarrai": 379, "typeerror": [248, 324, 384, 715, 938, 961, 988, 1043, 1044, 1047, 1049, 1053], "typic": [25, 62, 64, 125, 133, 145, 192, 199, 214, 218, 232, 247, 274, 275, 279, 281, 282, 298, 299, 323, 342, 354, 366, 372, 373, 374, 377, 381, 382, 388, 392, 393, 405, 407, 409, 411, 412, 415, 416, 418, 419, 421, 446, 450, 452, 500, 545, 555, 559, 560, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 633, 642, 644, 647, 658, 659, 660, 675, 686, 687, 716, 875, 882, 886, 889, 951, 952, 957, 961, 964, 989, 994, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1011, 1013, 1029, 1045, 1049, 1052, 1053], "typo": [379, 394, 402, 1036], "tzu": 1040, "t\u00e9l\u00e9com": 0, "u": [43, 49, 50, 51, 52, 55, 70, 83, 85, 89, 118, 121, 128, 144, 145, 150, 171, 180, 186, 187, 188, 211, 215, 218, 222, 232, 235, 238, 245, 248, 254, 255, 258, 259, 263, 266, 267, 272, 275, 279, 285, 286, 318, 346, 353, 361, 367, 374, 379, 383, 385, 387, 391, 397, 402, 408, 411, 414, 416, 418, 419, 434, 466, 468, 485, 486, 487, 535, 541, 549, 550, 554, 556, 558, 560, 562, 564, 566, 569, 572, 574, 592, 593, 595, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 685, 688, 693, 697, 708, 724, 744, 759, 841, 842, 851, 859, 866, 888, 902, 909, 911, 914, 917, 919, 952, 997, 999, 1004, 1005, 1012, 1015, 1029, 1033, 1046], "u2uwz2": [169, 376], "u_": [408, 485, 486, 487], "u_1": [408, 997], "u_2": [408, 997], "u_i": [411, 485, 486, 487, 759], "u_init": 547, "u_k": [414, 416], "uai": 1017, "ubuntu": [366, 377, 385, 387], "uchida": 1046, "uci": [47, 169, 266, 317, 373, 376, 504, 506, 508, 514], "ucl": 1018, "ucla": 1001, "udi": 1036, "udit": 1050, "ufmay": 1048, "ufunc": [187, 1053], "ugli": [223, 300, 303, 338], "ugo": 1050, "ugurcaliskan": 1040, "ugurthemast": [1039, 1040], "uhmann": 1049, "uieda": 1049, "uint": 1047, "uint32": [374, 501], "uint8": [86, 124, 373, 501, 510, 511, 1048], "uk": 1018, "ulloa": 1042, "ulrik": [411, 455, 465, 695], "ulterior": 52, "ultim": [88, 238, 380], "umar": [1044, 1045], "umass": [45, 57, 374], "umberto": 1048, "umbrella": 410, "umpi": 419, "un": [51, 379, 409, 419, 423, 537, 593, 799, 871, 880, 891, 895, 1045], "unabl": [51, 63, 103, 104, 140, 142, 151, 152, 155, 158, 166, 176, 186, 187, 188, 189, 196, 199, 214, 242, 243, 244, 248, 252, 253, 254, 255, 262, 266, 270, 272, 273, 279, 284, 286, 310, 318, 322, 323, 325, 326, 328, 333, 361, 368, 888, 1015, 1045], "unadjust": [411, 1005, 1048], "unaffect": 1008, "unalt": 1005, "unambigu": [281, 1006, 1042], "unanim": 394, "unavail": [393, 662, 663, 965, 1043, 1049], "unbalanc": [2, 184, 275, 337, 340, 343, 415, 516, 635, 913, 939, 940, 994, 1019, 1026], "unbias": [109, 409, 413, 416, 440, 554, 660, 676, 678, 691, 1001], "unbound": [72, 1004, 1050, 1054], "uncalibr": [61, 62, 63, 440], "uncent": 196, "uncertain": [272, 332, 378], "uncertainti": [62, 150, 171, 178, 194, 274, 409, 411, 571, 572, 647, 868, 995, 1017], "uncertainty_index": [331, 332], "unchang": [177, 187, 232, 279, 418, 435, 440, 445, 446, 447, 448, 449, 450, 452, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 696, 767, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 855, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 993, 1008, 1044, 1050, 1052], "unclaim": 382, "unclear": [378, 379, 505], "unclust": 449, "uncommon": [413, 662, 908, 1020], "uncompress": [47, 512, 513], "unconstrain": [150, 152, 188, 322, 328, 374, 1019], "uncorrect": [272, 599, 602], "uncorrel": [2, 278, 375, 532, 538, 545, 1005], "uncorrupt": 44, "uncov": [131, 699], "undefin": [52, 275, 393, 716, 733, 742, 787, 973, 1005, 1044, 1048, 1052, 1055], "undefinedmetricwarn": [2, 310, 733, 734, 787, 788, 791, 1045], "under": [2, 43, 46, 50, 61, 62, 64, 76, 100, 109, 110, 128, 144, 147, 188, 202, 214, 241, 251, 272, 279, 281, 282, 313, 327, 373, 379, 381, 383, 385, 387, 393, 397, 405, 409, 411, 413, 415, 416, 419, 420, 449, 454, 456, 473, 474, 475, 476, 477, 478, 479, 495, 536, 543, 545, 547, 658, 659, 660, 706, 710, 711, 712, 719, 758, 792, 793, 801, 802, 853, 960, 1001, 1002, 1003, 1005, 1008, 1015, 1019, 1020, 1021, 1024, 1025, 1036, 1038, 1039, 1041, 1044, 1048], "underdetermin": 199, "underestim": [52, 147, 188, 214, 232, 272, 379], "underfit": [43, 70, 147, 171, 184, 189, 215, 218, 264, 285, 307, 318, 349, 418, 661, 804, 807, 808, 818, 830, 831, 868, 883, 1000, 1001, 1026], "underflow": [1044, 1049], "undergo": 278, "undergrad": 1029, "underli": [64, 89, 111, 154, 169, 187, 190, 215, 217, 218, 248, 266, 277, 296, 297, 346, 360, 367, 379, 391, 393, 396, 402, 407, 409, 411, 413, 415, 416, 417, 418, 420, 421, 440, 454, 455, 456, 465, 467, 468, 474, 475, 481, 528, 559, 560, 568, 569, 571, 572, 573, 574, 597, 598, 601, 606, 662, 663, 669, 672, 677, 679, 684, 695, 699, 803, 804, 807, 808, 818, 826, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 851, 853, 905, 908, 916, 917, 918, 919, 969, 993, 1001, 1002, 1006, 1011, 1018, 1020, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053, 1054, 1055], "underrepres": 379, "underscor": [242, 355, 381, 393, 988, 1036, 1046, 1049], "underset": [416, 1001, 1008, 1021], "understand": [43, 48, 52, 76, 135, 176, 184, 188, 248, 266, 267, 270, 286, 323, 324, 339, 346, 353, 356, 357, 362, 378, 379, 380, 385, 391, 396, 411, 418, 419, 508, 834, 865, 866, 916, 917, 918, 919, 922, 994, 995, 1002, 1004, 1021, 1023, 1024, 1026, 1029, 1036, 1050], "understood": [273, 379, 411, 961], "undertak": 391, "undesir": [90, 172, 421, 826], "undistinguish": 415, "undistort": 124, "undo": [273, 878, 1040], "undocu": 1043, "unequ": [90, 1044], "uneth": 186, "uneven": [85, 267, 411, 415], "unevenli": [90, 214, 267], "unexpect": [90, 248, 362, 379, 384, 387, 397, 405, 539, 700, 1005, 1020, 1038, 1044, 1045, 1048, 1050, 1052, 1054], "unexpectedli": [393, 1044], "unfair": 362, "unfinish": [378, 379], "unfit": [2, 89, 412, 436, 467, 573, 574, 606, 615, 1044, 1046, 1053], "unfold": [126, 382, 1002], "unfortun": [147, 186, 187, 232, 387, 391, 418, 512, 513], "unhandl": 1045, "unhelp": 379, "unicod": [355, 419, 490, 507, 586, 592, 593, 595, 969, 1036, 1044, 1048], "unicodedata": [592, 593, 595], "unicodedecodeerror": [419, 592, 593, 595], "unifi": [289, 380, 388, 391, 392, 418, 641, 1024, 1036], "unifom": 295, "uniform": [2, 58, 67, 72, 86, 146, 147, 151, 165, 172, 177, 180, 194, 195, 228, 239, 241, 244, 280, 295, 298, 299, 304, 307, 313, 315, 316, 319, 325, 327, 341, 381, 384, 405, 411, 441, 442, 555, 573, 574, 614, 615, 632, 643, 653, 654, 658, 672, 680, 681, 682, 703, 725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 808, 816, 818, 843, 844, 847, 850, 851, 858, 859, 873, 885, 887, 897, 939, 954, 994, 995, 1004, 1005, 1008, 1042, 1044, 1046, 1050, 1052, 1055], "uniform_averag": [434, 468, 485, 486, 487, 558, 560, 562, 564, 566, 569, 572, 574, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 841, 842, 851, 859, 866, 909, 911, 914, 917, 919, 1005, 1045, 1055], "uniform_labelings_scor": 72, "uniformli": [72, 141, 147, 164, 241, 257, 321, 381, 520, 521, 522, 555, 646, 808, 816, 818, 887, 994, 995, 1005, 1008, 1015, 1040, 1045], "unigram": [273, 374, 419, 592, 593, 595, 1043], "unilev": 51, "unimod": [241, 477], "unimport": [420, 1013], "uninform": [62, 64, 319, 375, 384, 419, 994, 1001, 1044], "uniniti": 387, "uninstal": 377, "unintention": 1015, "unintuit": 90, "union": [102, 187, 412, 742, 758, 867, 1043], "union_not_memb": 187, "uniqu": [2, 43, 61, 66, 77, 81, 90, 91, 96, 100, 105, 142, 148, 149, 150, 187, 189, 199, 229, 232, 259, 281, 301, 318, 319, 327, 334, 353, 354, 355, 373, 381, 388, 393, 411, 412, 415, 418, 419, 443, 453, 457, 459, 467, 470, 500, 553, 554, 555, 557, 558, 561, 562, 563, 564, 565, 566, 568, 569, 570, 614, 637, 638, 639, 670, 672, 680, 701, 713, 715, 758, 786, 804, 806, 818, 831, 836, 837, 840, 846, 855, 858, 860, 865, 867, 879, 881, 882, 889, 892, 908, 910, 916, 917, 918, 919, 939, 952, 967, 968, 1001, 1006, 1015, 1029, 1044, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "unique_label": [2, 82, 88, 354, 381, 388], "unit": [2, 63, 102, 111, 187, 192, 214, 232, 297, 309, 312, 329, 354, 374, 379, 381, 385, 387, 388, 416, 419, 423, 467, 492, 493, 523, 528, 536, 537, 538, 545, 546, 593, 594, 595, 611, 612, 615, 662, 663, 680, 689, 703, 774, 855, 864, 865, 866, 872, 878, 880, 884, 886, 888, 894, 895, 896, 898, 899, 908, 909, 1001, 1003, 1004, 1005, 1010, 1015, 1021, 1040, 1044, 1050, 1051], "unit_eig_vec": 257, "unit_vari": [886, 898, 1048], "unitari": 952, "uniti": 30, "univ": [693, 697, 1002], "univ_select": 106, "univari": [2, 18, 48, 49, 71, 84, 104, 106, 163, 164, 166, 184, 197, 213, 229, 337, 371, 411, 412, 419, 448, 508, 529, 534, 596, 599, 600, 602, 603, 604, 606, 609, 610, 611, 612, 613, 631, 632, 633, 634, 649, 804, 809, 830, 834, 868, 869, 878, 883, 887, 888, 908, 913, 1001, 1020, 1022, 1026, 1027, 1031, 1036, 1042], "univers": [0, 179, 187, 353, 374, 376, 382, 411, 416, 419, 594, 792, 843, 847, 903, 1001, 1003, 1005, 1007], "unix": 419, "unknown": [52, 89, 187, 248, 272, 331, 333, 368, 374, 393, 405, 408, 419, 875, 881, 882, 967, 1004, 1015, 1040, 1044, 1048, 1049], "unknown_typ": 405, "unknown_v": 155, "unknown_valu": [144, 155, 189, 251, 318, 882, 1015, 1048, 1050, 1051], "unlabel": [38, 45, 249, 323, 331, 332, 333, 335, 336, 393, 411, 903, 904, 905, 1004, 1048], "unlabeled_indic": 332, "unlabeled_set": 331, "unless": [186, 248, 258, 263, 379, 382, 391, 393, 405, 409, 411, 414, 422, 440, 447, 449, 451, 453, 455, 460, 461, 464, 467, 470, 475, 492, 500, 512, 513, 535, 539, 540, 541, 543, 546, 547, 549, 550, 551, 552, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 598, 606, 611, 612, 614, 615, 636, 638, 643, 650, 651, 655, 656, 657, 659, 661, 662, 663, 665, 667, 669, 670, 672, 680, 683, 692, 693, 694, 695, 696, 697, 698, 713, 718, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 854, 856, 858, 859, 861, 862, 865, 866, 867, 870, 889, 893, 894, 896, 897, 898, 899, 903, 904, 916, 917, 918, 919, 927, 930, 934, 935, 952, 1001, 1004, 1006, 1036, 1038, 1042, 1044, 1047, 1048, 1053, 1054], "unlik": [88, 89, 141, 187, 188, 234, 236, 262, 312, 340, 379, 381, 385, 391, 393, 402, 405, 413, 415, 416, 419, 449, 453, 539, 654, 655, 658, 659, 660, 686, 687, 789, 825, 848, 849, 888, 899, 911, 1001, 1004, 1005, 1012, 1020, 1036, 1042], "unlimit": [561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919], "unlucki": 362, "unmaintain": 1036, "unmarri": 187, "unmeaning": 1043, "unmix": [122, 423, 537], "unmixing_matrix": 537, "unmodifi": [381, 393], "unnecessari": [141, 257, 384, 431, 446, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 709, 1008, 1015, 1025, 1029, 1039, 1041, 1046, 1047, 1049, 1052], "unnecessarili": [238, 1043, 1046], "unnorm": [393, 540, 1002, 1042, 1043], "unobserv": [150, 186, 187, 416], "unord": [411, 418, 1015], "unpack": 381, "unpen": [409, 652, 673, 684, 1001], "unpickl": [2, 393, 580, 848, 849, 1042, 1048, 1052], "unpleas": 1038, "unpract": 1004, "unprefix": 1042, "unprocess": [453, 592, 593, 595], "unprotect": 970, "unprun": [561, 562, 568, 569, 916, 917, 918, 919], "unquot": 232, "unrealist": 374, "unreason": [232, 415], "unreg": 347, "unregular": [881, 904, 1045], "unrel": [318, 367, 379, 384, 387, 419, 519], "unreli": [266, 412], "unrepresent": 923, "unrestrict": 497, "unrol": 238, "unrot": 131, "unsaf": 538, "unsampl": 997, "unscal": [312, 317, 1001, 1005, 1044, 1050], "unscaled_clf": 317, "unseen": [109, 145, 166, 203, 218, 222, 298, 346, 368, 371, 381, 392, 393, 411, 415, 854, 885, 897, 996, 1005, 1011, 1013, 1015, 1021, 1039, 1044, 1048], "unseen_featur": [419, 585], "unset": [367, 393, 1044], "unsetmetadatapassederror": [402, 1055], "unshad": 416, "unshifft": 681, "unshift": 912, "unsign": [86, 125, 374, 586, 969], "unsmooth": 417, "unsort": [1008, 1037, 1040, 1044], "unspecifi": [603, 604, 1002], "unstabl": [74, 99, 187, 407, 411, 413, 414, 693, 697, 951, 952, 1021, 1040, 1041, 1043, 1048, 1050, 1052, 1055], "unstack": [232, 275], "unstructur": [53, 71, 74, 75, 76, 81, 184, 211, 238, 309, 411, 444, 448, 466, 507, 534, 861, 1017, 1026, 1029, 1040], "unsuccess": 50, "unsupervis": [2, 6, 27, 34, 45, 51, 72, 82, 104, 105, 116, 121, 140, 153, 241, 249, 298, 299, 341, 353, 354, 362, 371, 374, 381, 392, 393, 411, 414, 416, 417, 418, 419, 420, 435, 445, 448, 536, 538, 540, 541, 543, 546, 547, 553, 567, 570, 571, 573, 574, 586, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 632, 634, 638, 639, 642, 643, 644, 645, 646, 681, 804, 807, 808, 810, 818, 827, 832, 835, 850, 851, 854, 856, 857, 858, 859, 864, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 889, 900, 901, 905, 912, 1002, 1005, 1011, 1018, 1027, 1031, 1036, 1039, 1049, 1053], "unsupport": [402, 405, 497, 1044, 1049], "unsur": 909, "untangl": 126, "untar": 47, "unterthin": [1039, 1040, 1041], "until": [88, 169, 222, 284, 323, 325, 384, 393, 394, 408, 411, 415, 420, 512, 513, 561, 562, 563, 564, 568, 569, 570, 597, 650, 651, 656, 657, 662, 663, 664, 665, 666, 667, 670, 671, 672, 675, 680, 681, 682, 698, 801, 802, 807, 808, 865, 866, 905, 908, 916, 917, 918, 919, 979, 994, 1001, 1002, 1010, 1018, 1021, 1039, 1043, 1044, 1050, 1055], "untransform": [346, 467, 470, 1016], "untru": 1005, "untrust": 405, "untun": [147, 329], "unus": [118, 127, 188, 211, 234, 236, 466, 583, 767, 775, 994, 1002, 1036, 1044, 1046, 1047, 1049, 1051], "unusu": [64, 408, 1011, 1015, 1044], "unveil": 1042, "unvendor": 1044, "unwant": [215, 353], "unweight": [183, 227, 466, 651, 657, 682, 711, 717, 733, 734, 742, 787, 788, 791, 792, 843, 844, 845, 846, 847, 995], "unwieldi": 879, "uoa": 901, "up": [2, 47, 50, 72, 79, 80, 81, 85, 88, 90, 95, 102, 111, 112, 119, 133, 140, 150, 183, 187, 188, 194, 199, 207, 215, 230, 231, 259, 266, 274, 277, 292, 305, 310, 313, 318, 325, 329, 332, 339, 346, 349, 353, 355, 368, 373, 374, 379, 383, 385, 386, 387, 388, 391, 393, 394, 409, 411, 416, 418, 419, 446, 450, 451, 452, 453, 455, 459, 462, 463, 464, 512, 513, 540, 553, 554, 561, 562, 563, 564, 565, 566, 568, 569, 570, 614, 631, 636, 637, 643, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 685, 686, 687, 688, 696, 709, 773, 801, 802, 806, 807, 808, 810, 832, 882, 883, 886, 898, 916, 917, 918, 919, 922, 952, 955, 956, 994, 997, 1001, 1002, 1005, 1008, 1015, 1019, 1020, 1025, 1028, 1029, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "upadhyai": [1042, 1043, 1044, 1045], "upcast": [1046, 1050], "upcom": [176, 377], "updat": [47, 79, 95, 135, 141, 149, 246, 321, 355, 378, 379, 382, 387, 393, 405, 411, 416, 418, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 466, 468, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 811, 813, 818, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 979, 1001, 1008, 1009, 1010, 1019, 1028, 1029, 1037, 1043, 1044, 1045, 1047, 1049, 1051, 1052, 1054, 1055], "update_environments_and_lock_fil": 379, "update_from": 299, "update_func": 299, "update_h": 551, "update_layout": [141, 273], "update_legend_marker_s": 299, "update_terminal_region": 1045, "upgrad": [321, 322, 323, 324, 325, 326, 327, 328, 329, 397, 1025, 1036, 1041, 1044], "upload": [373, 377, 383, 391, 675], "upload_d": 373, "upon": [232, 239, 248, 305, 374, 379, 391, 393, 405, 565, 566, 631, 634, 675, 793, 801, 802, 848, 849, 994, 1001, 1021, 1050], "upper": [43, 46, 48, 61, 104, 107, 110, 111, 112, 123, 137, 138, 139, 146, 147, 148, 149, 155, 157, 165, 175, 177, 180, 187, 208, 214, 220, 221, 224, 228, 231, 232, 245, 249, 250, 271, 272, 273, 286, 297, 298, 308, 317, 334, 341, 344, 346, 348, 411, 417, 466, 592, 593, 595, 599, 617, 618, 619, 621, 623, 624, 626, 627, 629, 636, 637, 639, 641, 654, 658, 681, 739, 792, 881, 882, 910, 911, 912, 938, 1004, 1005, 1008, 1015, 1019, 1020, 1021, 1044], "upperbound": 738, "uppercas": [393, 1049], "uppercase_initi": 419, "upperlimit": 708, "upright": 374, "upstream": [366, 379, 383, 387, 391, 1015, 1045], "upward": [453, 459], "ur": 1047, "urbanowicz": 1005, "urbanowicz2015": 1005, "urcrnrlat": [50, 305], "urcrnrlon": [50, 305], "uri": 55, "url": [51, 52, 55, 169, 373, 376, 381, 383, 495], "urllib": [47, 55], "urlopen": 55, "urlretriev": 47, "urlu": 1054, "urvang": [1044, 1046], "us": [0, 2, 15, 16, 19, 25, 27, 30, 37, 42, 43, 46, 47, 48, 50, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 116, 118, 119, 120, 123, 125, 126, 128, 129, 130, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 210, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 226, 229, 231, 232, 234, 235, 236, 237, 239, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 331, 332, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 349, 352, 355, 357, 359, 360, 365, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 386, 388, 392, 393, 394, 396, 397, 398, 399, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 497, 498, 500, 502, 503, 507, 512, 513, 515, 518, 519, 520, 523, 524, 526, 527, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 727, 728, 730, 731, 732, 733, 734, 736, 739, 740, 741, 742, 743, 745, 746, 747, 749, 750, 752, 754, 755, 757, 759, 760, 761, 762, 763, 767, 768, 770, 771, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 925, 927, 930, 933, 934, 935, 937, 940, 942, 947, 949, 951, 952, 956, 957, 960, 961, 962, 964, 967, 971, 973, 975, 976, 978, 980, 981, 982, 988, 993, 994, 995, 997, 998, 1000, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "usa": [271, 374, 905, 995, 1002, 1017, 1018], "usabl": [150, 373, 379, 381, 393, 405, 419, 804, 1036, 1043, 1050, 1051], "usag": [41, 77, 86, 103, 106, 115, 125, 133, 166, 187, 188, 242, 246, 248, 265, 266, 301, 303, 309, 338, 355, 366, 374, 378, 379, 382, 386, 387, 389, 393, 394, 397, 405, 411, 415, 416, 421, 422, 447, 449, 453, 464, 467, 474, 492, 498, 500, 527, 538, 539, 545, 553, 565, 566, 595, 613, 644, 652, 662, 663, 664, 670, 671, 672, 673, 680, 681, 682, 683, 684, 694, 782, 785, 796, 797, 864, 865, 867, 908, 916, 917, 918, 919, 927, 952, 994, 995, 997, 1004, 1005, 1006, 1008, 1020, 1027, 1028, 1031, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "usd": 251, "use_encoded_valu": [144, 155, 189, 251, 318, 882, 1015, 1048], "use_group": 267, "use_idf": [416, 419, 594, 595], "usecas": [322, 325, 327, 411, 566], "useless": [54, 143, 275, 385, 420, 519, 532, 662, 716, 1001, 1015, 1045], "user": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 52, 62, 64, 88, 101, 121, 141, 148, 180, 184, 187, 190, 201, 234, 248, 262, 269, 279, 281, 289, 292, 298, 299, 302, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 362, 366, 367, 373, 377, 378, 379, 381, 383, 385, 386, 387, 391, 392, 393, 397, 399, 402, 405, 409, 411, 412, 413, 415, 416, 418, 419, 420, 422, 423, 424, 425, 428, 434, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 948, 952, 994, 995, 1001, 1002, 1004, 1005, 1006, 1008, 1015, 1019, 1024, 1025, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "user_guid": 43, "user_r": 412, "userguid": 1043, "usernam": 397, "userscript": 387, "userwarn": [79, 95, 242, 384, 716, 1015, 1042, 1044, 1049, 1054], "ushtanit": [1048, 1049], "using_kernels_tut": 162, "usp": 44, "usr": 377, "usual": [43, 52, 75, 109, 110, 112, 146, 147, 149, 155, 186, 188, 200, 214, 215, 265, 266, 269, 272, 281, 282, 286, 313, 324, 342, 362, 366, 367, 377, 379, 381, 383, 387, 391, 392, 393, 397, 402, 408, 411, 412, 415, 416, 418, 419, 420, 453, 459, 542, 544, 546, 551, 563, 564, 611, 612, 634, 644, 662, 663, 670, 671, 672, 680, 681, 682, 696, 730, 762, 810, 832, 836, 908, 925, 952, 994, 995, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1015, 1019, 1020, 1021, 1051], "utc": 1005, "utf": [353, 355, 419, 490, 507, 586, 592, 593, 595], "util": [2, 4, 10, 17, 35, 38, 47, 49, 50, 88, 89, 94, 133, 135, 148, 155, 190, 214, 222, 230, 236, 244, 248, 250, 260, 278, 280, 292, 314, 321, 334, 342, 346, 353, 367, 373, 374, 379, 380, 381, 382, 391, 392, 393, 407, 410, 411, 412, 415, 416, 419, 440, 446, 447, 450, 452, 456, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 537, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 581, 585, 586, 592, 594, 595, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 804, 805, 806, 811, 813, 822, 826, 828, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 1000, 1003, 1005, 1006, 1015, 1016, 1024, 1029, 1031, 1036, 1037, 1039, 1040, 1042, 1043], "utilis": 1042, "utkarsh": [1042, 1043, 1044, 1045], "utl": 420, "utstat": 648, "uttam": 1049, "uv": [121, 416], "uw": [169, 376, 1048], "uwha": [1049, 1050], "v": [0, 2, 30, 43, 48, 52, 53, 55, 57, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 88, 91, 102, 107, 108, 111, 113, 114, 115, 121, 123, 124, 128, 139, 141, 142, 147, 148, 149, 165, 171, 184, 185, 190, 193, 203, 211, 212, 213, 214, 215, 218, 219, 223, 229, 238, 245, 258, 259, 262, 263, 264, 268, 289, 303, 319, 321, 339, 350, 354, 362, 367, 371, 376, 379, 385, 387, 393, 407, 408, 409, 413, 414, 416, 419, 420, 434, 444, 448, 455, 465, 466, 467, 468, 473, 476, 477, 478, 479, 480, 485, 486, 487, 500, 516, 528, 534, 535, 541, 545, 549, 550, 554, 556, 558, 560, 562, 564, 566, 568, 569, 572, 574, 585, 593, 597, 598, 604, 610, 615, 634, 635, 638, 639, 643, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 680, 682, 683, 692, 699, 703, 705, 708, 721, 740, 741, 743, 758, 759, 761, 792, 799, 804, 809, 816, 818, 830, 834, 836, 837, 838, 841, 842, 843, 851, 859, 861, 864, 866, 868, 869, 872, 875, 881, 882, 883, 888, 889, 892, 902, 908, 909, 910, 911, 913, 914, 917, 919, 923, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1010, 1013, 1015, 1019, 1020, 1022, 1026, 1031, 1036, 1039, 1040, 1041, 1044, 1046, 1047, 1050, 1051, 1054], "v0": [474, 475, 481, 516, 592, 593, 595, 804, 818, 867, 870, 1037, 1044, 1045, 1046], "v1": [266, 326, 373, 397, 801, 802, 1048, 1051, 1052, 1053, 1054], "v10": 266, "v11": 266, "v12": 266, "v13": 266, "v14": 266, "v15": 266, "v16": 266, "v17": 266, "v18": 266, "v19": 266, "v2": [266, 374, 501, 668, 689, 690, 1001], "v20": 266, "v21": 266, "v22": 266, "v23": 266, "v24": 266, "v25": 266, "v26": 266, "v27": 266, "v28": 266, "v3": 266, "v4": 266, "v5": [266, 1044], "v6": 266, "v7": 266, "v8": 266, "v9": 266, "v_": [408, 419], "v_1": 408, "v_2": 408, "v_i": 1010, "v_ih_j": 1010, "v_init": 547, "v_j": [411, 759, 1010], "v_k": [414, 416, 535, 541, 549, 550], "v_measur": [740, 799], "v_measure_scor": [2, 57, 72, 73, 82, 91, 327, 354, 411, 721, 740, 741, 761, 1005, 1045], "v_new": 864, "va": [47, 145, 167, 283, 300, 302, 348], "vac": 289, "vacaliuc": [1044, 1045], "vacat": 374, "vachan": 1047, "vadim": [1044, 1048, 1049], "vaerenbergh": [1051, 1052], "vaggi": [1038, 1039], "vaillant": 1048, "val": [105, 226, 272, 954], "val_errors_with": 145, "val_errors_without": 145, "val_pr": 145, "val_scor": 146, "vale": 1046, "valencia": [1050, 1052], "valentin": [1039, 1041, 1051, 1052], "valero": 51, "valgrind": 382, "valid": [2, 47, 52, 53, 63, 64, 87, 88, 89, 90, 103, 104, 106, 107, 109, 113, 128, 133, 139, 141, 143, 144, 145, 146, 147, 150, 159, 163, 166, 167, 169, 179, 184, 187, 189, 193, 199, 200, 201, 202, 208, 214, 216, 222, 232, 248, 250, 254, 259, 262, 264, 269, 272, 273, 274, 276, 278, 279, 280, 281, 284, 285, 286, 287, 289, 296, 310, 313, 318, 321, 323, 328, 334, 342, 349, 357, 367, 374, 379, 382, 391, 392, 393, 405, 406, 409, 411, 412, 413, 416, 417, 418, 419, 420, 425, 427, 440, 445, 446, 448, 449, 450, 452, 453, 460, 466, 467, 471, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 497, 505, 506, 508, 519, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 576, 579, 581, 586, 587, 593, 597, 598, 601, 606, 636, 638, 642, 643, 644, 645, 646, 647, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 696, 703, 705, 706, 710, 717, 732, 766, 769, 778, 782, 783, 784, 789, 796, 797, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 842, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 871, 872, 874, 880, 888, 900, 901, 903, 904, 906, 908, 910, 913, 915, 916, 917, 918, 919, 925, 927, 934, 935, 936, 937, 938, 946, 959, 961, 964, 988, 989, 990, 991, 992, 993, 995, 1004, 1005, 1006, 1008, 1009, 1013, 1015, 1017, 1019, 1020, 1021, 1025, 1026, 1029, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "valid_metr": [848, 849, 1008, 1052], "valid_scor": 1000, "validate_data": [2, 1055], "validate_metadata": [248, 961], "validate_separ": 993, "validation_curv": [2, 327, 349, 402, 827, 1000, 1043, 1044, 1045, 1048, 1052, 1055], "validation_fract": [145, 150, 222, 324, 418, 563, 564, 565, 566, 670, 671, 672, 680, 682, 865, 866, 1019, 1044, 1050], "validation_score_": [150, 565, 566], "validation_scores_": [865, 866, 1051], "validationcurvedisplai": [2, 285, 1000, 1052], "validationerror": 1050, "vallei": 318, "vall\u00e9": 1043, "valu": [2, 20, 27, 43, 44, 46, 50, 51, 52, 53, 55, 58, 59, 63, 64, 68, 72, 75, 77, 79, 80, 86, 88, 93, 94, 95, 99, 103, 105, 107, 109, 111, 113, 121, 124, 131, 133, 135, 137, 139, 140, 141, 142, 144, 147, 148, 151, 152, 154, 155, 164, 165, 167, 168, 171, 174, 175, 177, 179, 186, 187, 188, 189, 190, 192, 194, 195, 197, 199, 200, 201, 203, 204, 205, 207, 212, 214, 215, 216, 218, 220, 229, 232, 233, 236, 237, 241, 242, 243, 244, 245, 246, 247, 251, 254, 255, 257, 263, 265, 266, 268, 270, 272, 273, 275, 277, 278, 279, 281, 283, 284, 285, 286, 292, 295, 304, 305, 307, 308, 310, 312, 313, 314, 315, 316, 317, 318, 319, 323, 329, 334, 342, 346, 347, 349, 353, 354, 355, 357, 362, 366, 367, 368, 371, 372, 373, 374, 376, 380, 381, 382, 384, 385, 386, 388, 391, 392, 393, 396, 397, 402, 408, 409, 411, 412, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 434, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 490, 493, 494, 497, 500, 501, 502, 505, 512, 513, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 773, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 815, 816, 818, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 929, 931, 932, 933, 934, 935, 938, 939, 940, 942, 944, 952, 954, 961, 964, 965, 966, 967, 968, 980, 981, 982, 994, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1019, 1020, 1026, 1027, 1029, 1030, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "valuabl": [145, 266, 379, 995, 1029], "valuat": 418, "value_count": [43, 52, 188, 266, 286, 289], "value_kei": [391, 923], "value_typ": [421, 621], "valueerror": [2, 248, 249, 381, 385, 402, 471, 581, 607, 621, 639, 675, 718, 840, 858, 867, 873, 887, 933, 935, 937, 938, 989, 990, 991, 1015, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054], "values_format": [701, 1046], "vamsi": 1051, "van": [0, 373, 400, 413, 472, 477, 538, 631, 696, 700, 995, 1002, 1005, 1011, 1029, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "vandana": 1047, "vander": 195, "vandermond": [215, 1015], "vanderpla": [0, 401, 1023, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "vang": 1049, "vanilla": [214, 407, 410, 411, 450, 452, 463, 633], "vanilla_model": 266, "vanilla_model_coef": 286, "vanrel": 1042, "vanschoren": [373, 1048], "vapnik": [597, 598], "var": [115, 116, 138, 169, 195, 272, 376, 380, 420, 645, 649, 910, 911, 912, 913, 914, 1005, 1044], "var_": [538, 846, 888, 1049], "var_smooth": [846, 1044], "varanasi": [1036, 1039], "vardhan": 1040, "varepsilon": [411, 1019, 1020], "vari": [46, 52, 64, 67, 70, 79, 80, 88, 95, 98, 107, 119, 141, 142, 143, 153, 162, 168, 173, 175, 184, 187, 188, 190, 202, 203, 205, 208, 212, 221, 239, 246, 251, 262, 268, 272, 275, 286, 306, 312, 314, 315, 317, 327, 330, 336, 342, 345, 347, 362, 366, 368, 374, 393, 405, 444, 448, 449, 504, 512, 518, 519, 526, 563, 564, 568, 569, 650, 651, 654, 655, 656, 657, 658, 659, 664, 665, 666, 667, 685, 688, 707, 767, 823, 827, 832, 834, 835, 865, 869, 873, 888, 905, 913, 916, 917, 978, 997, 1000, 1001, 1005, 1008, 1009, 1018, 1021, 1026, 1029, 1043, 1044, 1052], "variabl": [2, 43, 48, 50, 51, 52, 72, 102, 138, 142, 144, 147, 148, 150, 164, 169, 178, 179, 182, 183, 188, 189, 192, 199, 203, 214, 218, 219, 232, 236, 248, 251, 263, 266, 272, 275, 282, 289, 291, 317, 318, 319, 362, 366, 368, 374, 376, 377, 379, 381, 383, 384, 387, 393, 402, 407, 411, 412, 413, 414, 416, 418, 419, 420, 453, 485, 486, 487, 490, 503, 505, 512, 519, 536, 538, 540, 545, 548, 557, 563, 564, 608, 610, 611, 612, 644, 654, 655, 658, 659, 665, 686, 687, 699, 713, 751, 805, 806, 809, 811, 812, 813, 814, 819, 820, 821, 822, 823, 824, 828, 829, 830, 831, 833, 836, 840, 841, 871, 882, 885, 889, 897, 909, 994, 995, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1019, 1021, 1024, 1025, 1036, 1041, 1044, 1046, 1049, 1051, 1055], "varianc": [2, 37, 43, 44, 52, 64, 79, 88, 90, 95, 105, 109, 111, 115, 116, 118, 121, 122, 123, 126, 128, 129, 131, 134, 149, 150, 178, 184, 187, 193, 195, 197, 199, 203, 204, 210, 214, 216, 219, 232, 262, 266, 269, 272, 275, 281, 282, 286, 301, 307, 312, 317, 329, 354, 362, 371, 375, 388, 408, 409, 411, 413, 414, 415, 416, 417, 418, 423, 444, 448, 452, 466, 525, 528, 536, 537, 538, 545, 548, 553, 554, 559, 560, 562, 563, 564, 569, 607, 611, 612, 615, 629, 647, 648, 649, 656, 660, 661, 664, 666, 676, 677, 678, 679, 680, 691, 714, 732, 789, 801, 802, 846, 857, 872, 878, 884, 886, 888, 894, 896, 898, 899, 917, 919, 979, 980, 981, 985, 999, 1000, 1001, 1003, 1008, 1009, 1010, 1013, 1017, 1019, 1020, 1021, 1022, 1026, 1027, 1031, 1036, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "variance_weight": [732, 789, 1005], "variances_": 607, "variancethreshold": [2, 420, 873, 995, 1039, 1046, 1049, 1052], "variant": [2, 64, 78, 121, 181, 183, 184, 272, 324, 325, 354, 355, 385, 411, 414, 416, 419, 421, 452, 463, 493, 497, 498, 516, 519, 547, 563, 564, 569, 619, 623, 626, 627, 631, 634, 642, 643, 645, 649, 676, 708, 805, 809, 811, 812, 813, 822, 830, 851, 869, 905, 995, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1019, 1025, 1026, 1036, 1044], "variat": [2, 43, 46, 51, 72, 98, 119, 152, 169, 176, 177, 183, 184, 187, 219, 256, 258, 263, 269, 283, 291, 302, 322, 342, 376, 405, 415, 416, 446, 450, 462, 540, 647, 676, 678, 679, 801, 802, 822, 823, 825, 994, 1005, 1015, 1018, 1021, 1024, 1026, 1030, 1031, 1039, 1041, 1042], "variegatu": [50, 305, 374, 502], "variet": 318, "varieti": [25, 62, 182, 259, 318, 342, 387, 411, 413, 419, 647, 1008, 1021, 1024, 1029, 1038, 1051, 1052], "varimax": [131, 416, 536, 1048], "variou": [4, 41, 43, 51, 71, 72, 74, 88, 89, 91, 93, 94, 95, 112, 115, 124, 184, 187, 193, 222, 224, 233, 234, 235, 236, 245, 289, 292, 308, 316, 322, 331, 332, 353, 355, 361, 362, 366, 373, 374, 375, 376, 379, 381, 384, 392, 394, 409, 411, 413, 440, 444, 475, 506, 518, 519, 529, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 598, 606, 651, 655, 657, 659, 662, 665, 667, 669, 670, 672, 677, 679, 680, 695, 696, 703, 804, 807, 808, 810, 818, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 868, 908, 909, 994, 995, 1002, 1005, 1008, 1012, 1015, 1019, 1021, 1024, 1026, 1028, 1029, 1036, 1039, 1040, 1053], "varma": [1045, 1055], "varoquaux": [0, 394, 400, 1023, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "varun": [1042, 1043, 1044, 1050, 1051], "varunchaduvula": 1054, "vasani": 1047, "vasilei": [1029, 1043], "vasileva": 1050, "vasiloudi": 1041, "vassard": 1050, "vassilvitskii": [411, 450, 463], "vast": [266, 379], "vastli": 317, "vathsala": [1043, 1044, 1045, 1046], "vatsan": 1042, "vavrova": 1043, "vazelh": [1044, 1045, 1046], "vazirgianni": 411, "vb": 540, "vbgmm": [1036, 1040, 1042], "vc": 377, "vcvarsal": 377, "vd": 1054, "ve": [354, 379, 419, 1029, 1043], "veal": 57, "veb2009": 411, "veb2010": 411, "vec": [121, 419, 542, 544, 551], "veclib": [366, 391], "vect": [47, 102, 273, 335, 419], "vect__": 273, "vect__max_df": 273, "vect__min_df": 273, "vect__ngram_rang": 273, "vect__norm": 273, "vector": [2, 17, 39, 46, 47, 48, 49, 51, 54, 57, 58, 63, 66, 68, 71, 75, 104, 121, 123, 124, 165, 171, 179, 196, 218, 219, 226, 230, 246, 247, 254, 270, 272, 273, 277, 298, 310, 312, 329, 336, 338, 339, 342, 343, 344, 345, 346, 347, 349, 351, 354, 366, 368, 374, 384, 385, 388, 391, 393, 408, 409, 411, 413, 414, 415, 416, 418, 421, 422, 423, 440, 446, 447, 448, 450, 452, 453, 454, 456, 467, 468, 470, 471, 485, 486, 487, 488, 490, 492, 501, 513, 516, 525, 528, 535, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 553, 554, 555, 556, 571, 572, 573, 574, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 624, 626, 627, 629, 635, 642, 644, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 676, 677, 678, 679, 680, 681, 682, 690, 691, 692, 693, 695, 696, 697, 699, 703, 723, 739, 767, 772, 773, 774, 775, 777, 778, 779, 781, 782, 803, 804, 807, 808, 818, 826, 832, 835, 836, 837, 843, 844, 845, 846, 847, 850, 851, 852, 854, 855, 856, 858, 859, 860, 865, 866, 873, 875, 880, 888, 892, 895, 906, 908, 909, 910, 911, 912, 913, 914, 915, 934, 949, 951, 952, 967, 973, 994, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1015, 1019, 1021, 1026, 1027, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1054], "vectori": [393, 1046], "vectorizer2": 592, "vectorizer_param": 335, "vectorizermixin": 1046, "vectorizing_tim": 47, "vectors_test": 374, "ved": 1053, "vedaldi": [642, 997], "veenhui": [1051, 1052, 1053, 1054, 1055], "veerkhar": 1051, "veerlosar": 1046, "veghit": 1052, "vehag": [214, 232], "vehbrand": [214, 232], "vehga": [214, 232], "vehicl": [214, 232], "vehpow": [214, 232], "vel": 376, "velkov": 1038, "veloc": 379, "vembu": 409, "vempati": 997, "vendor": [248, 1041, 1044, 1045], "venezuela": [50, 305, 374, 502], "venkat": [0, 401], "venkatachalam": [1046, 1047, 1048, 1049, 1050, 1053, 1054], "venkatesh": 1046, "venna": 700, "venthur": 1044, "venu": [0, 393], "venv": [377, 397], "vera": [1050, 1051], "verbos": [49, 77, 83, 87, 97, 102, 104, 106, 155, 273, 309, 310, 312, 324, 335, 353, 377, 383, 393, 443, 446, 450, 452, 455, 457, 462, 465, 467, 470, 474, 475, 481, 535, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 597, 598, 631, 636, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 694, 696, 698, 769, 782, 801, 802, 804, 807, 808, 810, 818, 827, 829, 830, 831, 832, 833, 835, 837, 839, 842, 857, 864, 865, 866, 867, 868, 869, 870, 905, 908, 909, 910, 911, 912, 913, 914, 970, 1025, 1038, 1039, 1041, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1054, 1055], "verbose_feature_names_out": [144, 187, 188, 189, 255, 318, 324, 325, 326, 328, 412, 467, 470, 867, 1049, 1053, 1054, 1055], "verbose_interv": [801, 802], "veri": [43, 52, 62, 64, 74, 75, 77, 79, 83, 85, 93, 95, 111, 112, 113, 115, 119, 124, 147, 153, 160, 176, 182, 187, 188, 189, 203, 214, 215, 216, 219, 222, 232, 238, 241, 247, 248, 251, 257, 266, 274, 275, 278, 279, 281, 282, 292, 309, 312, 324, 331, 334, 342, 346, 351, 353, 355, 362, 366, 374, 378, 379, 384, 385, 387, 391, 392, 393, 405, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 421, 445, 450, 455, 465, 474, 475, 481, 504, 508, 514, 545, 561, 562, 565, 566, 568, 569, 571, 572, 593, 594, 626, 654, 655, 658, 659, 660, 668, 686, 687, 689, 695, 696, 699, 709, 747, 750, 796, 801, 804, 806, 812, 814, 818, 821, 824, 848, 849, 873, 877, 878, 879, 888, 900, 901, 910, 913, 916, 917, 918, 919, 927, 952, 994, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1036, 1041, 1042, 1044, 1047, 1049, 1051, 1052, 1053], "verif": [374, 1005, 1029], "verifi": [86, 93, 133, 150, 187, 214, 379, 384, 405, 407, 495, 988, 1008], "verlag": 700, "vermeil": 1044, "veronda": 1037, "verrier": 1051, "versa": [187, 269, 353, 411, 421, 445, 611, 612, 837, 1040], "versatil": [421, 1020, 1029], "versicolor": [118, 281, 282, 508], "versicolour": [118, 127, 129, 376], "version": [2, 7, 43, 66, 80, 86, 88, 103, 121, 126, 135, 150, 173, 183, 188, 189, 192, 199, 212, 215, 222, 228, 230, 248, 251, 255, 291, 309, 317, 321, 322, 323, 324, 326, 327, 328, 329, 342, 353, 366, 374, 378, 380, 381, 382, 383, 385, 387, 388, 391, 393, 394, 397, 398, 402, 404, 405, 411, 412, 414, 416, 418, 419, 421, 422, 423, 429, 431, 433, 434, 435, 436, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 508, 509, 512, 513, 514, 516, 518, 526, 527, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 708, 711, 712, 713, 715, 717, 718, 720, 722, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 738, 743, 744, 745, 746, 747, 750, 757, 758, 761, 762, 763, 765, 770, 771, 773, 782, 786, 787, 788, 789, 791, 793, 794, 795, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 817, 818, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 894, 896, 897, 898, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 932, 934, 935, 946, 947, 951, 952, 960, 961, 962, 963, 964, 967, 970, 971, 974, 979, 985, 990, 991, 993, 994, 997, 999, 1002, 1005, 1007, 1009, 1011, 1013, 1018, 1019, 1021, 1024, 1025, 1028, 1032, 1034], "versionchang": 379, "versionwarn": 383, "versu": [67, 123, 134, 153, 155, 162, 173, 184, 187, 193, 223, 229, 241, 246, 247, 249, 260, 264, 267, 289, 298, 300, 314, 330, 335, 339, 341, 342, 346, 411, 415, 418, 421, 508, 538, 560, 614, 635, 643, 662, 663, 670, 672, 678, 679, 680, 681, 787, 804, 809, 830, 840, 869, 904, 905, 912, 913, 917, 994, 1001, 1005, 1006, 1011, 1018, 1019, 1020, 1026, 1044], "vert": [148, 189, 190, 321, 1019], "vertex": [55, 63, 411, 456, 1049], "vertic": [45, 55, 93, 146, 190, 203, 245, 246, 276, 291, 312, 315, 347, 348, 393, 408, 411, 416, 519, 701, 785], "verticalalign": [51, 63, 74, 75], "vese": 1048, "vesteghem": 1046, "veto": 394, "vettigli": 1045, "vga": 57, "vh": 952, "vi": [45, 47, 374, 703, 1044, 1047], "via": [0, 2, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 371, 376, 377, 380, 381, 383, 387, 391, 392, 393, 394, 397, 402, 408, 409, 411, 412, 414, 415, 416, 420, 421, 440, 505, 539, 543, 545, 547, 550, 563, 564, 571, 572, 601, 615, 620, 625, 628, 631, 642, 643, 644, 645, 660, 670, 672, 675, 677, 680, 691, 693, 696, 697, 713, 804, 818, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 846, 854, 865, 867, 868, 869, 888, 889, 994, 999, 1001, 1002, 1004, 1005, 1006, 1012, 1013, 1019, 1020, 1025, 1026, 1029, 1031, 1036, 1040, 1041, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "viacheslav": 1042, "viard": 1047, "vibrantabhi19": 1043, "vicdemand": 150, "vice": [187, 269, 353, 411, 421, 445, 611, 612, 837, 1040], "vicent": [1049, 1050, 1051], "vicpric": 150, "victoireloui": 1050, "victor": [411, 455, 465, 1043, 1046], "victoria": 150, "video": [326, 373, 382, 507, 1006, 1029, 1031], "vie": 1042, "viega": 1005, "view": [43, 77, 80, 109, 123, 150, 188, 211, 253, 366, 368, 379, 411, 419, 540, 649, 661, 848, 849, 923, 1001, 1002], "view_init": [188, 234, 236, 238], "viewabl": 379, "vighnesh": [1041, 1042, 1044], "vignesh": 1052, "vigni": 1053, "vijai": [1029, 1039], "vijalapuram": 1044, "vijeth": [1052, 1053], "vijitbenjaronk": [1043, 1044], "vika": [1048, 1050], "vikram": [1042, 1051, 1052], "vikrant": 1050, "vila": [1046, 1048], "vilhelm": [1043, 1044], "villalba": [1041, 1044, 1048], "villanova": [1048, 1049], "villaz\u00f3n": 1048, "villu": 1042, "vil\u00e9m": 1049, "vinayak": [1040, 1041, 1042, 1044, 1045, 1051, 1052], "vincent": [0, 401, 1029, 1036, 1038, 1040, 1041, 1043, 1046, 1051, 1052, 1053], "vineet": 1054, "vineyard": 318, "vinh": [411, 708], "vinh10a": 411, "viniciu": [1048, 1049], "vinit": 1044, "vink": [1047, 1049], "vinod": 1044, "vin\u00edciu": 1044, "viola": [374, 1044], "violat": [62, 342, 387, 391, 393, 639, 938, 1012, 1019, 1021], "violet": [128, 1052], "violeta": 1048, "vipin": 411, "viraj": 1044, "virchan": 1054, "virgil": [0, 401, 1036, 1037, 1039, 1055], "virgilefritsch": 1036, "virginica": [118, 127, 129, 281, 282, 376, 508, 1005], "viridi": [66, 73, 292, 701], "viridis_r": 273, "virshup": 1053, "virtanen": 1041, "virtual": [380, 397, 415, 1029], "virtualenv": [377, 379], "visag": 1029, "visconti": 1040, "vishaal": [1044, 1045], "vishal": 1051, "vishwakarma": 1050, "visibl": [52, 187, 188, 216, 351, 373, 379, 411, 864, 1010, 1041, 1051], "vision": [538, 762, 763, 997, 1001, 1003, 1021, 1024, 1029, 1037], "visit": [361, 379, 1012, 1028], "visual": [2, 27, 42, 43, 48, 52, 58, 62, 66, 68, 78, 80, 82, 85, 90, 93, 94, 111, 115, 120, 123, 125, 128, 130, 140, 141, 148, 150, 151, 153, 157, 158, 167, 179, 183, 184, 188, 190, 199, 205, 214, 216, 232, 234, 235, 239, 240, 243, 246, 252, 253, 262, 264, 265, 268, 269, 273, 274, 277, 279, 281, 282, 297, 301, 302, 304, 306, 308, 312, 316, 317, 321, 323, 332, 346, 371, 375, 377, 385, 386, 408, 413, 415, 416, 417, 418, 441, 444, 448, 449, 457, 474, 475, 500, 506, 508, 511, 514, 518, 526, 536, 538, 545, 568, 570, 635, 637, 649, 662, 693, 696, 701, 702, 704, 705, 706, 722, 731, 786, 793, 805, 806, 809, 810, 821, 822, 823, 824, 825, 827, 834, 865, 869, 873, 877, 878, 880, 884, 885, 886, 888, 908, 910, 911, 913, 914, 922, 948, 1000, 1002, 1003, 1008, 1009, 1011, 1012, 1015, 1021, 1024, 1026, 1031, 1039, 1046, 1047, 1048, 1050], "visualis": [121, 124, 131, 249, 548, 805, 806, 809, 821, 822, 823, 824, 825, 1008, 1025], "visualize_group": 267, "vitor": 1051, "vivek": [1043, 1044, 1045, 1053], "viz": [282, 386], "vjacheslav": 1040, "vlad": [0, 121, 400, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045], "vladimir": [539, 952, 1001, 1046, 1050, 1053], "vlahava": [724, 744, 1005], "vlajic": [1047, 1048, 1054], "vlasio": [1029, 1043], "vlasovet": 1049, "vlb": 57, "vliet": 1048, "vline": [109, 123, 201, 203, 215, 272, 285, 313], "vlines_": 636, "vlo": 51, "vmax": [66, 84, 113, 121, 124, 131, 174, 177, 194, 199, 205, 230, 246, 261, 267, 309, 342], "vmin": [66, 75, 113, 121, 124, 131, 174, 177, 194, 199, 205, 230, 246, 261, 267, 309, 342], "vnherdeiro": 1046, "vo": [1042, 1050], "voc": 1005, "vocabulari": [119, 229, 353, 354, 391, 419, 592, 593, 594, 595, 1007, 1036, 1038, 1041, 1044, 1047, 1049], "vocabulary_": [355, 419, 585, 592, 595, 1036], "void": 380, "vol": [64, 179, 199, 266, 278, 376, 411, 477, 563, 564, 632, 639, 649, 668, 689, 690, 801, 833, 845, 995, 1007, 1008], "volgen": [408, 723], "voltag": 57, "volum": [0, 99, 110, 169, 176, 374, 376, 411, 413, 476, 538, 773, 1001, 1020, 1029], "volume11": 411, "volume2": 680, "volume7": [670, 671], "volunt": 387, "voluntari": 353, "von": [411, 455, 465, 695, 1043, 1044], "voronoi": [80, 99, 411], "voss": 1044, "vote": [2, 14, 134, 136, 141, 155, 156, 157, 184, 291, 346, 393, 394, 505, 559, 560, 561, 564, 568, 569, 573, 574, 661, 836, 850, 851, 856, 858, 1006, 1008, 1026, 1027, 1031, 1036, 1039, 1041, 1046], "votingclassifi": [2, 63, 64, 134, 184, 223, 358, 402, 418, 508, 568, 574, 635, 662, 846, 850, 913, 916, 994, 995, 1026, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1053, 1054], "votingregressor": [2, 158, 402, 418, 573, 995, 1045, 1046, 1047, 1050, 1053, 1054], "votingregressorifittedvotingregressor": 158, "voxel": [80, 99, 589], "vp": 1029, "vq": 91, "vqean3": [1044, 1045], "vredevoogd": [1038, 1039], "vrigazov": 1051, "vrishank": [1043, 1044], "vs_buildtool": 377, "vstack": [51, 63, 90, 98, 174, 175, 197, 257, 261, 292, 305, 347, 635, 1006, 1044], "vstolbunov": 1041, "vt": 554, "vufg": 1044, "vukolov": [1044, 1045], "vulner": 405, "vuw": 534, "vvz2010": 997, "vx": 72, "vya": [1044, 1045, 1046], "vyom": [1051, 1052], "vz2010": 997, "v\u00e1zquez": 1039, "v\u0103n": 1051, "w": [2, 45, 51, 53, 66, 70, 75, 77, 91, 97, 127, 130, 169, 182, 213, 218, 231, 248, 249, 257, 258, 259, 262, 263, 283, 310, 324, 325, 346, 347, 349, 355, 362, 367, 374, 376, 385, 405, 411, 412, 416, 418, 419, 423, 428, 434, 440, 468, 472, 475, 477, 485, 486, 487, 527, 542, 544, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 592, 593, 595, 598, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 697, 703, 729, 730, 760, 803, 804, 818, 826, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 850, 851, 854, 855, 858, 859, 865, 866, 901, 903, 904, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 949, 954, 1001, 1005, 1009, 1010, 1015, 1017, 1019, 1020, 1046, 1050, 1051, 1052, 1053], "w0": 119, "w1": [119, 418, 661], "w1992": 418, "w2": 418, "w3": 418, "w_": [416, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 1001, 1005, 1007, 1010], "w_0": 1001, "w_1": [418, 1001, 1009], "w_1x_1": 1009, "w_2": [418, 1001, 1009], "w_2x_2": 1009, "w_3": 1001, "w_4": 1001, "w_5": 1001, "w_i": [418, 996, 1005], "w_ij": 664, "w_init": [423, 537], "w_intercept": [908, 909], "w_j": [650, 656, 1005, 1019], "w_k": [411, 418, 1001], "w_l": 1001, "w_mx_m": 1009, "w_n": 418, "w_new": 416, "w_p": 1001, "w_pad": [121, 143, 358], "w_x_1": [908, 909], "w_x_n": [908, 909], "wa": [0, 43, 47, 53, 64, 75, 102, 103, 111, 116, 119, 152, 155, 169, 180, 187, 192, 218, 238, 248, 251, 263, 265, 266, 268, 270, 272, 278, 279, 286, 289, 309, 317, 321, 322, 326, 333, 334, 353, 355, 361, 362, 366, 374, 376, 377, 379, 383, 384, 393, 397, 402, 405, 407, 408, 410, 411, 414, 415, 419, 423, 435, 443, 444, 445, 446, 448, 449, 450, 452, 453, 457, 460, 463, 467, 471, 472, 477, 485, 486, 487, 488, 519, 527, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 557, 558, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 662, 663, 668, 676, 678, 683, 689, 690, 692, 693, 696, 717, 733, 734, 782, 787, 788, 791, 801, 802, 804, 807, 808, 818, 831, 833, 845, 852, 855, 857, 860, 864, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 900, 901, 905, 906, 932, 934, 935, 946, 947, 971, 992, 993, 994, 995, 1004, 1005, 1008, 1011, 1015, 1018, 1021, 1024, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "wadawson": 1040, "wadsworth": [916, 917, 1021], "waelbenamara": 1047, "wagner": 1050, "wai": [0, 2, 37, 43, 55, 64, 83, 93, 103, 106, 140, 146, 151, 153, 169, 178, 187, 189, 190, 215, 218, 219, 229, 232, 243, 244, 247, 248, 251, 252, 267, 272, 279, 281, 312, 313, 324, 326, 327, 362, 366, 367, 368, 373, 375, 377, 378, 381, 382, 383, 387, 388, 393, 394, 397, 402, 405, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 426, 446, 447, 454, 455, 456, 462, 463, 465, 466, 472, 500, 559, 560, 567, 576, 593, 603, 604, 615, 636, 670, 671, 680, 681, 682, 703, 708, 710, 721, 740, 741, 758, 759, 761, 767, 778, 782, 792, 799, 829, 837, 854, 875, 881, 886, 892, 918, 919, 975, 978, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1024, 1025, 1028, 1029, 1036, 1038, 1044, 1049, 1050, 1054, 1055], "waijean": 1049, "wainwright": [725, 727, 728], "waist": 376, "wait": [55, 377, 379, 383, 393, 670, 671, 672, 680, 682, 1048], "waithera": 1046, "wal": 51, "waldo": 326, "wale": 150, "walk": [411, 417, 1039], "walker": 1040, "wall": 411, "wallach": [1040, 1041], "walli": 1044, "wallygauz": 1044, "walsh": [1048, 1050], "walt": [1039, 1040, 1044], "walter": 1042, "walton": 326, "wan": 1044, "wang": [416, 540, 683, 693, 697, 730, 760, 1001, 1002, 1005, 1039, 1041, 1042, 1043, 1044, 1048, 1051, 1052, 1054], "wangz10": 1041, "want": [0, 30, 43, 51, 58, 61, 62, 63, 88, 97, 103, 169, 183, 187, 214, 215, 216, 248, 251, 263, 266, 272, 287, 289, 295, 309, 336, 339, 353, 362, 366, 367, 368, 377, 378, 379, 380, 381, 383, 384, 385, 391, 392, 393, 394, 397, 402, 405, 409, 410, 411, 412, 413, 418, 419, 420, 504, 507, 508, 514, 539, 553, 658, 659, 660, 662, 663, 670, 672, 678, 679, 680, 768, 803, 826, 854, 857, 873, 880, 901, 908, 994, 1001, 1004, 1005, 1006, 1009, 1011, 1015, 1016, 1020, 1024, 1025, 1036, 1050, 1054], "ward": [0, 2, 53, 59, 71, 74, 75, 76, 79, 80, 85, 86, 87, 89, 95, 184, 190, 211, 238, 401, 419, 444, 448, 466, 534, 861, 1026, 1036, 1039, 1041], "ward__n_clust": 87, "ward_tre": [2, 87, 444, 448, 1036, 1040], "wardagglom": 1041, "wardagglomer": 1039, "wardclust": 1039, "wareh": 738, "warm": [382, 393, 535, 541, 547, 549, 550, 614, 657, 663, 670, 671, 672, 680, 681, 682, 1001, 1025, 1046, 1048, 1050], "warm_start": [139, 175, 207, 324, 381, 385, 393, 418, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 614, 650, 652, 653, 656, 662, 664, 666, 670, 671, 672, 673, 680, 681, 682, 684, 801, 802, 857, 865, 866, 1011, 1027, 1031, 1036, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1050, 1052], "warn": [2, 15, 79, 95, 104, 177, 214, 229, 248, 275, 292, 308, 309, 316, 366, 367, 379, 382, 383, 384, 393, 405, 419, 500, 554, 557, 558, 561, 562, 563, 564, 568, 569, 570, 575, 576, 577, 578, 579, 580, 582, 606, 640, 697, 716, 717, 720, 733, 734, 742, 787, 788, 791, 858, 872, 873, 881, 911, 912, 913, 914, 916, 917, 918, 919, 934, 935, 942, 952, 961, 974, 990, 991, 1005, 1015, 1036, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "warn_for": 787, "warn_on_dtyp": 1045, "warn_when_not_sort": 863, "warner": [51, 1051, 1052], "warshal": [692, 1002], "warshaw": 1042, "warut": [1043, 1044], "wase": [1053, 1054], "wasn": [102, 248, 1045], "waspa": 542, "wast": [141, 385, 415, 416, 994], "watanab": [1053, 1054], "watch": [52, 367], "watchtheblur": 1048, "water": 50, "waterburi": [1044, 1045], "waterland": 1039, "waterponei": [1042, 1043], "watson": [318, 412], "wattai": 1051, "wav": 373, "wave": [208, 379, 1004], "waveform": 75, "wavelet": [53, 130, 416], "wavfil": 373, "waweru": 1053, "wa\u00ebl": 1054, "wb": [55, 405], "wchathura": 1051, "wclf": 344, "wconnel": 1047, "wdbc": [169, 376], "wderos": 1047, "wdevazelh": 1044, "wdisp": 344, "we": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 61, 62, 63, 64, 66, 68, 70, 72, 75, 76, 77, 79, 81, 82, 83, 86, 88, 89, 90, 91, 95, 97, 98, 99, 102, 103, 104, 105, 107, 109, 111, 112, 113, 116, 118, 119, 121, 122, 123, 124, 126, 128, 129, 131, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 155, 157, 158, 160, 164, 165, 166, 168, 169, 171, 173, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 198, 199, 200, 201, 203, 205, 207, 209, 211, 214, 215, 216, 217, 218, 220, 222, 223, 226, 227, 228, 229, 230, 232, 234, 235, 238, 239, 241, 242, 244, 245, 246, 248, 249, 251, 252, 254, 255, 257, 258, 259, 260, 262, 263, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 297, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 368, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 391, 392, 393, 394, 402, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 453, 472, 473, 474, 475, 476, 477, 478, 479, 505, 527, 535, 536, 538, 541, 549, 550, 553, 565, 566, 567, 573, 574, 586, 587, 593, 615, 621, 631, 636, 637, 642, 644, 655, 659, 662, 663, 670, 672, 677, 678, 679, 680, 681, 696, 722, 724, 730, 750, 760, 768, 785, 803, 810, 826, 827, 829, 850, 851, 852, 854, 856, 857, 858, 859, 860, 871, 880, 881, 882, 888, 893, 894, 896, 897, 898, 899, 901, 904, 908, 912, 927, 946, 947, 957, 968, 970, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1033, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1054], "wea": 409, "weak": [115, 145, 148, 218, 232, 278, 415, 558, 563, 564, 634, 1008, 1029, 1052], "weak_learn": 135, "weak_learners_info": 135, "weak_learners_misclassification_error": 135, "weaker": [107, 565, 566], "weakest": [357, 1021], "weaklearn": 557, "weakli": 99, "weather": [43, 52, 176, 188, 410, 1001, 1005], "web": [2, 169, 373, 374, 376, 379, 387, 405, 411, 419, 495, 525, 901, 952, 1005, 1015, 1032, 1036, 1055], "weber": 1043, "weblog": 411, "webpag": [55, 192, 379], "websit": [373, 374, 376, 379, 382, 394, 397, 1009, 1019, 1028, 1029, 1037, 1038, 1039], "wed": [43, 150, 188], "weed": 608, "week": [43, 52, 150, 328, 378, 379, 394, 500, 1029, 1050], "weekdai": [43, 188], "weekday_co": 43, "weekday_sin": 43, "weekend": [43, 150], "weezel": [1051, 1052], "wegelin": 414, "wehenkel": [418, 561, 562, 569, 570, 918, 919], "wei": [0, 401, 1019, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1049, 1052], "weibul": 316, "weidemann": 1050, "weigh": [415, 1043], "weight": [2, 45, 50, 53, 54, 57, 61, 68, 87, 102, 131, 147, 156, 157, 165, 166, 175, 176, 183, 184, 187, 193, 199, 203, 205, 214, 218, 219, 221, 224, 225, 226, 228, 229, 230, 232, 248, 253, 257, 261, 266, 270, 275, 279, 281, 295, 304, 305, 306, 307, 308, 310, 317, 319, 321, 324, 328, 329, 331, 332, 337, 342, 344, 346, 347, 349, 350, 353, 354, 355, 361, 362, 375, 376, 388, 391, 393, 410, 411, 413, 414, 416, 417, 420, 422, 428, 434, 440, 443, 446, 447, 449, 450, 452, 456, 462, 463, 466, 467, 468, 470, 472, 477, 485, 486, 487, 500, 519, 528, 542, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 590, 593, 594, 595, 597, 601, 606, 607, 614, 615, 632, 636, 637, 638, 639, 641, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 693, 697, 701, 702, 704, 706, 707, 711, 712, 713, 716, 717, 720, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 738, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 762, 763, 773, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 826, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 864, 865, 866, 867, 870, 873, 887, 888, 889, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 939, 940, 954, 979, 985, 995, 996, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1015, 1018, 1019, 1020, 1021, 1025, 1026, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "weight_concentration_": 801, "weight_concentration_prior": [257, 263, 801, 1004], "weight_concentration_prior_": 801, "weight_concentration_prior_typ": [257, 263, 801, 1004, 1042], "weight_vector": [1036, 1046], "weighted_acc": 402, "weighted_mod": [2, 388], "weighted_n_node_sampl": 361, "weightedmetaregressor": 248, "weights_": [257, 801, 802, 1050], "weights_handl": 227, "weights_init": 802, "weijiadu": 1050, "weinberg": 419, "weinsberg": 1036, "weinstein": 1037, "weisberg": 1001, "weiss": [0, 401, 411, 695, 1036], "weitzenfeld": 1029, "weka": 845, "welch": 1042, "welcom": [378, 379, 387, 394, 1025], "welind": 1036, "well": [0, 8, 43, 48, 51, 58, 61, 62, 64, 70, 74, 86, 90, 91, 95, 102, 109, 116, 135, 136, 138, 141, 145, 147, 153, 155, 169, 176, 178, 186, 187, 188, 189, 192, 199, 201, 212, 214, 215, 216, 218, 222, 234, 235, 236, 239, 241, 245, 248, 251, 259, 266, 272, 279, 281, 283, 289, 292, 295, 297, 298, 299, 319, 322, 323, 324, 325, 326, 327, 328, 329, 346, 349, 353, 354, 355, 362, 374, 376, 378, 379, 383, 385, 387, 388, 391, 392, 393, 394, 405, 409, 411, 413, 415, 416, 418, 420, 422, 425, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 462, 463, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 704, 725, 726, 727, 728, 789, 792, 796, 799, 801, 802, 803, 804, 807, 808, 818, 826, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 950, 951, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1018, 1019, 1021, 1022, 1024, 1025, 1029, 1036, 1037, 1040, 1042, 1043, 1044, 1047, 1054], "wellcom": 0, "wen": 1051, "wenbo": [1046, 1048], "wendi": 1046, "wendling": 1043, "weng": 1020, "wenhao": [1044, 1045], "wenhua": 1042, "wenjian": 1042, "wenliwyan": 1047, "went": [383, 1005], "were": [0, 43, 68, 102, 103, 106, 111, 112, 141, 144, 147, 150, 166, 169, 176, 183, 214, 215, 218, 242, 251, 279, 281, 283, 309, 310, 317, 322, 323, 325, 326, 327, 328, 329, 334, 346, 353, 355, 361, 362, 373, 374, 376, 379, 380, 381, 383, 387, 391, 393, 402, 408, 412, 418, 419, 467, 470, 471, 500, 565, 566, 606, 807, 808, 823, 832, 855, 905, 906, 994, 997, 1005, 1006, 1021, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "weren": [353, 882, 1045], "werman": 1048, "werneck": 1044, "werner": [1043, 1048], "werror": 387, "wersd\u00f6rfer": 1038, "weslei": [594, 734], "westermann": [0, 369, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "western": 419, "weston": [44, 416, 539, 597, 598, 904], "westov": 1044, "wetter": 188, "weyb": 1054, "wfc": 51, "wget": 387, "wh": [416, 542, 544, 551], "wh_i": 416, "what": [0, 2, 43, 48, 51, 52, 75, 85, 86, 116, 122, 126, 143, 186, 187, 203, 220, 222, 230, 243, 248, 255, 309, 353, 355, 357, 362, 367, 374, 377, 379, 380, 381, 383, 385, 387, 392, 393, 394, 396, 410, 411, 417, 418, 419, 507, 540, 592, 593, 595, 650, 656, 700, 893, 894, 896, 897, 898, 899, 916, 917, 918, 919, 1004, 1005, 1006, 1008, 1021, 1025, 1036, 1043, 1054], "whatnot": 353, "whats_new": [383, 387], "wheel": [377, 379, 383, 397, 399, 1046, 1048, 1050], "wheeler": [1047, 1048], "wheelhouse_upload": 383, "when": [0, 2, 43, 48, 49, 50, 52, 58, 61, 62, 63, 64, 70, 74, 75, 78, 89, 93, 100, 102, 103, 104, 109, 111, 112, 116, 121, 124, 125, 126, 128, 138, 141, 143, 144, 145, 147, 150, 151, 155, 156, 157, 166, 171, 182, 186, 187, 188, 189, 190, 194, 195, 199, 203, 205, 207, 211, 214, 216, 218, 219, 230, 241, 242, 243, 247, 248, 255, 258, 260, 268, 271, 272, 273, 274, 275, 279, 281, 282, 285, 286, 289, 292, 294, 295, 298, 299, 300, 312, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 328, 329, 333, 334, 336, 342, 345, 346, 349, 353, 354, 355, 357, 361, 362, 366, 367, 368, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 397, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 427, 434, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 512, 513, 514, 516, 519, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 579, 580, 582, 585, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 610, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 705, 706, 708, 709, 711, 712, 716, 717, 720, 731, 732, 733, 734, 736, 738, 739, 742, 750, 752, 755, 758, 759, 761, 765, 767, 771, 772, 773, 775, 778, 782, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 799, 801, 802, 803, 804, 807, 808, 809, 810, 818, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 894, 895, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 927, 929, 930, 933, 934, 935, 942, 946, 950, 951, 952, 953, 955, 956, 957, 962, 965, 973, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1025, 1028, 1029, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "whenev": [178, 186, 266, 362, 373, 387, 393, 397, 409, 485, 486, 487, 500, 632, 634, 996, 1004, 1025, 1046, 1055], "where": [47, 50, 51, 53, 55, 57, 58, 61, 62, 63, 68, 86, 88, 90, 111, 116, 119, 121, 124, 130, 131, 135, 137, 139, 141, 144, 145, 147, 150, 152, 166, 167, 169, 171, 177, 180, 183, 187, 194, 199, 206, 215, 218, 223, 224, 225, 227, 231, 232, 234, 236, 237, 241, 242, 245, 248, 249, 251, 253, 263, 266, 268, 269, 272, 274, 278, 279, 281, 283, 284, 286, 289, 291, 310, 312, 314, 315, 316, 317, 318, 319, 321, 323, 324, 329, 332, 333, 340, 346, 349, 350, 351, 353, 357, 358, 362, 366, 367, 368, 373, 375, 376, 378, 379, 381, 383, 385, 386, 387, 391, 392, 393, 394, 397, 402, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 434, 440, 447, 450, 451, 455, 464, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 490, 500, 530, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 586, 587, 588, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 613, 614, 615, 617, 619, 623, 626, 627, 629, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 692, 695, 696, 697, 700, 711, 715, 716, 720, 729, 733, 734, 735, 743, 745, 759, 767, 772, 773, 774, 777, 785, 786, 787, 788, 791, 792, 796, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 851, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 871, 878, 881, 883, 884, 887, 888, 894, 896, 902, 903, 904, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 925, 943, 944, 945, 946, 952, 957, 961, 964, 989, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1019, 1020, 1021, 1025, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "wherea": [52, 70, 86, 100, 111, 151, 228, 251, 273, 274, 275, 281, 295, 317, 346, 349, 350, 368, 394, 415, 418, 447, 449, 569, 662, 663, 806, 822, 836, 997, 1004, 1006, 1008, 1015, 1021, 1049, 1054], "wherein": 393, "whether": [2, 47, 49, 52, 103, 133, 151, 174, 179, 187, 188, 214, 218, 232, 235, 242, 248, 266, 270, 312, 361, 362, 367, 374, 377, 378, 379, 381, 383, 384, 385, 393, 402, 410, 411, 412, 413, 415, 416, 418, 420, 423, 443, 445, 454, 456, 457, 462, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 490, 491, 494, 496, 500, 501, 507, 512, 513, 518, 526, 531, 535, 536, 541, 542, 543, 544, 546, 549, 550, 552, 556, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 585, 592, 593, 594, 595, 601, 606, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 633, 635, 636, 637, 639, 640, 641, 642, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 694, 698, 699, 701, 702, 704, 706, 708, 715, 716, 746, 765, 771, 778, 782, 786, 793, 803, 804, 807, 808, 809, 810, 818, 822, 823, 826, 827, 828, 831, 832, 834, 837, 839, 842, 843, 844, 845, 847, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 865, 866, 872, 889, 895, 908, 909, 910, 911, 912, 913, 914, 920, 922, 924, 925, 926, 927, 928, 932, 934, 935, 936, 938, 946, 947, 951, 952, 960, 961, 977, 988, 992, 993, 994, 995, 1000, 1001, 1005, 1010, 1011, 1017, 1019, 1020, 1029, 1043, 1044, 1045, 1053, 1055], "whi": [187, 189], "which": [0, 2, 43, 46, 49, 51, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 70, 72, 74, 75, 78, 79, 80, 82, 86, 88, 89, 90, 91, 98, 100, 102, 103, 104, 107, 109, 111, 112, 116, 118, 119, 123, 125, 126, 131, 135, 138, 139, 140, 141, 144, 146, 147, 150, 151, 153, 154, 155, 156, 157, 158, 160, 164, 166, 168, 169, 171, 172, 176, 177, 178, 182, 183, 186, 187, 188, 190, 192, 194, 195, 199, 203, 207, 214, 215, 216, 218, 220, 222, 228, 230, 231, 232, 234, 235, 236, 238, 241, 242, 245, 246, 247, 248, 249, 251, 252, 257, 258, 262, 263, 265, 266, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 286, 287, 289, 291, 292, 297, 298, 299, 308, 312, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 342, 346, 349, 351, 353, 354, 355, 357, 361, 362, 366, 367, 368, 371, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 399, 402, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 463, 465, 466, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 490, 527, 535, 536, 537, 538, 541, 542, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 583, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 614, 615, 616, 617, 618, 619, 621, 623, 626, 631, 632, 633, 634, 636, 637, 638, 644, 646, 647, 648, 651, 652, 653, 655, 656, 657, 658, 659, 660, 662, 663, 665, 667, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 711, 713, 720, 721, 723, 724, 727, 729, 730, 738, 739, 740, 741, 746, 747, 760, 762, 782, 783, 784, 785, 786, 787, 793, 801, 802, 803, 804, 807, 808, 809, 810, 812, 814, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 865, 868, 872, 875, 879, 881, 882, 883, 886, 887, 888, 889, 890, 892, 900, 901, 903, 904, 905, 908, 910, 913, 914, 916, 917, 918, 919, 920, 924, 926, 929, 930, 934, 935, 941, 944, 946, 947, 951, 952, 954, 957, 960, 961, 962, 964, 973, 976, 979, 985, 988, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "whichev": [411, 418, 449, 548, 565, 566, 637, 654, 658, 660, 668, 686, 687, 701], "whidou": 1049, "while": [0, 2, 25, 43, 46, 47, 49, 51, 55, 58, 61, 64, 70, 72, 74, 78, 79, 88, 95, 99, 102, 105, 107, 119, 125, 126, 135, 138, 141, 142, 145, 150, 152, 155, 169, 172, 177, 179, 180, 182, 186, 187, 188, 189, 192, 194, 196, 199, 202, 203, 208, 214, 216, 218, 230, 241, 244, 245, 248, 249, 258, 259, 263, 265, 266, 267, 271, 272, 273, 275, 279, 280, 281, 282, 283, 285, 294, 312, 313, 314, 317, 318, 319, 321, 324, 327, 328, 339, 342, 353, 355, 361, 362, 367, 371, 372, 373, 374, 375, 378, 379, 381, 383, 384, 385, 387, 388, 391, 393, 394, 405, 409, 410, 411, 414, 415, 416, 418, 419, 420, 421, 422, 423, 447, 467, 470, 471, 486, 488, 500, 525, 536, 556, 561, 562, 563, 564, 568, 569, 570, 571, 572, 573, 574, 579, 586, 592, 593, 594, 595, 598, 601, 606, 610, 638, 647, 650, 651, 653, 660, 661, 662, 663, 680, 681, 682, 683, 712, 734, 758, 778, 782, 792, 798, 801, 804, 805, 806, 809, 810, 811, 812, 813, 814, 818, 819, 820, 822, 827, 829, 830, 831, 832, 833, 835, 843, 854, 856, 858, 859, 860, 867, 868, 869, 870, 871, 884, 896, 901, 906, 908, 909, 916, 917, 918, 919, 930, 956, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1017, 1020, 1021, 1024, 1025, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "whilst": [139, 236], "whisker": 49, "white": [2, 91, 93, 121, 176, 187, 228, 234, 298, 310, 314, 336, 341, 416, 419, 629, 1021, 1036, 1039, 1042, 1046, 1050], "whitekernel": [2, 171, 176, 177, 421, 615, 616, 618, 1047], "whiten": [45, 121, 122, 123, 296, 416, 423, 537, 538, 545, 886, 888, 1015, 1040, 1042, 1050, 1051, 1054], "whiten_solv": [423, 537, 1051, 1054], "whitening_": 537, "whitespac": 419, "whl": 383, "who": [0, 102, 187, 367, 374, 379, 386, 394, 397, 850, 851, 852, 854, 856, 858, 859, 860, 1024, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "whole": [49, 83, 106, 150, 158, 183, 215, 251, 269, 276, 304, 342, 346, 357, 366, 379, 391, 392, 412, 414, 418, 421, 452, 486, 542, 559, 560, 561, 562, 567, 568, 569, 570, 574, 689, 690, 804, 807, 808, 818, 832, 843, 844, 845, 846, 847, 994, 1005, 1015, 1044, 1046], "whose": [2, 88, 110, 111, 112, 169, 176, 214, 242, 340, 374, 387, 388, 393, 409, 411, 413, 418, 420, 421, 424, 440, 441, 442, 451, 464, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 519, 538, 542, 544, 545, 548, 551, 553, 576, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 644, 675, 699, 722, 804, 811, 818, 833, 854, 873, 900, 901, 951, 983, 984, 999, 1006, 1010, 1011, 1012, 1020, 1039, 1044, 1045, 1047, 1050], "why": [64, 72, 85, 121, 135, 141, 150, 187, 189, 192, 203, 266, 269, 272, 289, 353, 354, 379, 387, 393, 411, 413, 416, 422, 447, 450, 454, 1005, 1007, 1020, 1039], "wick": 1048, "wide": [64, 93, 94, 118, 138, 245, 313, 391, 411, 416, 419, 994, 1001, 1024, 1029, 1036, 1038, 1052], "widehat": 174, "wider": [52, 216, 419, 921, 1001], "widetild": 1021, "width": [47, 49, 52, 86, 111, 118, 123, 124, 129, 130, 131, 138, 143, 144, 147, 157, 165, 173, 179, 198, 255, 257, 271, 295, 312, 314, 315, 318, 323, 326, 339, 376, 412, 441, 442, 455, 467, 497, 498, 510, 525, 590, 873, 921, 1015, 1019, 1021, 1044], "wiesel": [413, 424, 478], "wignal": [1039, 1040, 1046, 1047], "wijewardena": [0, 1039, 1040, 1041], "wiki": [55, 61, 385, 387, 599, 640, 672, 675, 699, 709, 850, 851, 856, 857, 858, 859, 886, 902, 916, 917, 1001, 1005, 1021], "wikic": 997, "wikipedia": [37, 42, 61, 184, 387, 411, 599, 611, 612, 640, 660, 672, 675, 686, 687, 699, 708, 709, 711, 713, 716, 720, 722, 730, 733, 734, 735, 738, 739, 742, 747, 760, 787, 789, 790, 792, 793, 796, 797, 850, 851, 856, 857, 858, 859, 886, 902, 916, 917, 952, 997, 1001, 1005, 1008, 1017, 1021, 1026, 1036, 1043], "wikipedia_principal_eigenvector": [55, 1026], "wikipediadet2017": 1005, "wikipediamcc2021": 1005, "wil": 1048, "wild": [2, 45, 372, 497, 498, 512, 513, 1031, 1036], "wilderness_area": 251, "wildli": [297, 1004], "wilei": [376, 995], "wilhelm": [1040, 1042, 1046], "wilk": 409, "wilksch": 1051, "willamett": 318, "willard": 1048, "willdarnel": 1046, "willduan": 1043, "william": [169, 374, 376, 421, 614, 615, 618, 623, 626, 643, 997, 1005, 1009, 1043, 1044, 1045, 1046, 1051, 1052], "williamson": 1046, "willing": [186, 269, 410], "willocx": 1046, "willpeppo": 1048, "wilson": [111, 376, 1036, 1039], "wiman": 1036, "wimld": 1050, "win": [52, 266], "winata": [1046, 1048], "wind": [188, 1006], "windber": 1047, "windiana42": 1052, "window": [57, 335, 374, 379, 381, 382, 387, 419, 1036, 1039, 1043, 1047, 1049, 1050, 1054], "windowsapp": 397, "windowserror": 1052, "windspe": [43, 188], "wine": [2, 48, 254, 317, 318, 372, 514, 1031], "wine_review": 318, "wineri": 318, "winn": 1005, "winter": [43, 52], "winterman": 1037, "wip": [387, 397], "wipf": [649, 1001], "wire": [385, 538, 545], "wiryadi": [1048, 1054], "wisc": [169, 376, 903], "wisconsin": [2, 169, 190, 372, 504, 1013, 1031, 1041], "wise": [2, 46, 63, 179, 215, 241, 282, 312, 354, 366, 393, 409, 411, 415, 416, 420, 461, 535, 538, 541, 545, 549, 550, 553, 554, 557, 559, 560, 563, 564, 596, 599, 600, 602, 603, 604, 610, 644, 656, 704, 758, 836, 855, 885, 898, 899, 902, 977, 979, 980, 981, 982, 985, 997, 999, 1001, 1005, 1006, 1019, 1025, 1036, 1041, 1044, 1045, 1046], "wish": [373, 379, 381, 386, 388, 397, 411, 952, 1043], "wishart": 801, "wissen": 453, "with_cent": [886, 898], "with_error": 705, "with_mean": [384, 888, 899, 1015, 1044, 1049], "with_scal": [886, 898], "with_std": [888, 899, 1015, 1044], "withheld": 415, "within": [2, 41, 43, 58, 93, 140, 142, 145, 150, 154, 166, 168, 169, 210, 215, 216, 226, 232, 248, 252, 270, 271, 275, 312, 313, 323, 340, 343, 346, 349, 355, 362, 366, 374, 379, 383, 388, 391, 393, 394, 402, 407, 408, 409, 411, 412, 415, 417, 418, 422, 447, 451, 464, 466, 467, 469, 472, 477, 519, 553, 571, 572, 573, 574, 597, 598, 636, 696, 700, 703, 714, 729, 785, 801, 802, 809, 810, 822, 823, 832, 833, 848, 849, 850, 851, 856, 858, 859, 860, 867, 868, 869, 881, 889, 893, 894, 896, 897, 898, 899, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 999, 1001, 1002, 1008, 1011, 1015, 1018, 1020, 1021, 1025, 1029, 1038, 1039, 1043, 1044, 1049, 1050, 1052, 1053, 1054, 1055], "without": [2, 43, 44, 52, 53, 61, 71, 77, 79, 81, 85, 88, 89, 95, 99, 100, 107, 126, 141, 145, 146, 149, 150, 152, 155, 161, 165, 169, 178, 184, 186, 187, 188, 199, 203, 222, 241, 245, 248, 249, 251, 252, 254, 265, 266, 273, 277, 279, 289, 292, 293, 294, 295, 301, 302, 303, 304, 312, 313, 317, 319, 321, 346, 349, 354, 368, 374, 375, 377, 379, 380, 381, 383, 384, 385, 388, 391, 392, 393, 402, 405, 411, 412, 416, 418, 419, 420, 421, 436, 442, 444, 449, 461, 472, 477, 495, 500, 508, 519, 536, 538, 559, 560, 567, 583, 584, 615, 631, 635, 638, 643, 663, 696, 704, 785, 807, 808, 809, 816, 818, 833, 834, 850, 857, 861, 867, 868, 871, 874, 877, 878, 880, 884, 885, 886, 888, 893, 908, 930, 973, 994, 995, 997, 999, 1001, 1002, 1005, 1008, 1011, 1015, 1019, 1020, 1021, 1024, 1025, 1026, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055], "withstrok": 75, "witten": 415, "wittenau": 1041, "wk": 709, "wl": 377, "wminkowski": [1048, 1050], "wmt": 51, "wnl": 419, "wo": 419, "wojdyla": [1051, 1052], "wolberg": [169, 376], "wolf": [2, 49, 65, 70, 108, 109, 112, 113, 184, 301, 476, 478, 482, 483, 516, 553, 999, 1026, 1043], "wolframalpha": 1046, "wolodzko": 1049, "wolosonovich": 1044, "wolpert": [418, 571, 572], "wolsza": 1054, "wompner": 1044, "won": [155, 309, 354, 383, 387, 411, 471, 500, 631, 632, 634, 691, 708, 721, 740, 741, 759, 761, 799, 1004, 1015, 1041, 1042, 1047], "wonder": [353, 377], "wonpil": 1001, "wood": 1045, "woolam": 1036, "word": [47, 54, 57, 102, 171, 202, 245, 249, 342, 354, 355, 366, 374, 375, 379, 381, 384, 393, 408, 410, 411, 413, 414, 415, 416, 456, 515, 527, 538, 540, 545, 592, 593, 595, 700, 837, 847, 905, 999, 1003, 1007, 1010, 1015, 1018, 1019, 1029, 1036, 1044], "word_col": 57, "word_scor": 57, "word_token": 419, "wordnetlemmat": 419, "work": [0, 3, 43, 48, 52, 55, 68, 79, 85, 100, 109, 138, 144, 158, 169, 177, 178, 186, 187, 188, 203, 218, 231, 248, 270, 289, 298, 299, 318, 322, 324, 325, 327, 344, 346, 354, 355, 362, 367, 368, 373, 374, 377, 379, 380, 381, 382, 383, 384, 385, 387, 392, 393, 394, 405, 407, 408, 409, 411, 412, 413, 416, 418, 419, 420, 423, 424, 425, 426, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 463, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 487, 488, 508, 512, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 699, 712, 778, 782, 783, 784, 785, 792, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 952, 956, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1011, 1012, 1015, 1018, 1019, 1024, 1025, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "workabl": 384, "workaround": [318, 379, 804, 818], "workclass": [328, 500], "worker": [367, 393, 419, 970, 971, 1051], "workflow": [379, 382, 383, 392, 415, 1028, 1031], "working_memori": [366, 367, 471, 785, 906, 1044], "workingdai": [43, 188], "workload": 1024, "workshop": [0, 411, 419, 843, 1007, 1023], "workstat": 387, "world": [0, 88, 102, 106, 187, 218, 238, 251, 266, 353, 366, 372, 376, 411, 416, 419, 969, 995, 1005, 1007, 1023, 1025, 1029, 1031, 1036], "worldwid": 1029, "wornbb": 1047, "worri": [87, 1002], "wors": [43, 116, 135, 172, 188, 220, 272, 280, 291, 317, 362, 409, 411, 421, 434, 468, 485, 486, 487, 556, 558, 560, 562, 564, 566, 569, 572, 574, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 682, 683, 684, 709, 725, 726, 727, 728, 732, 789, 841, 842, 851, 859, 866, 909, 911, 914, 917, 919, 1005, 1015, 1045], "worse_prob": 272, "worsen": 145, "worst": [169, 214, 318, 376, 411, 447, 450, 712, 733, 734, 787, 788, 791, 796, 797, 833, 1005, 1029, 1036, 1049], "worth": [88, 143, 188, 214, 379, 387, 1029], "worthwhil": [104, 393], "would": [0, 25, 43, 45, 48, 52, 63, 64, 68, 86, 88, 91, 102, 109, 111, 112, 116, 119, 126, 135, 147, 169, 171, 176, 177, 187, 188, 189, 190, 192, 199, 204, 214, 215, 216, 229, 232, 241, 248, 251, 259, 266, 268, 272, 273, 278, 280, 282, 286, 289, 292, 298, 304, 309, 312, 313, 317, 318, 324, 327, 334, 342, 346, 349, 350, 353, 355, 361, 362, 366, 374, 375, 379, 380, 381, 385, 387, 388, 391, 392, 393, 394, 402, 405, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 434, 449, 468, 471, 485, 486, 487, 492, 531, 536, 538, 540, 545, 548, 556, 558, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 574, 587, 588, 591, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 682, 683, 704, 706, 712, 716, 717, 724, 760, 782, 786, 789, 793, 804, 806, 818, 833, 841, 842, 851, 859, 866, 893, 894, 896, 897, 898, 899, 900, 901, 906, 908, 909, 911, 914, 916, 917, 918, 919, 961, 964, 994, 995, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1020, 1024, 1025, 1029, 1033, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "wp": [419, 661, 675], "wpd": 353, "wprd": 419, "wrap": [121, 140, 147, 292, 329, 373, 381, 393, 405, 435, 512, 661, 662, 663, 680, 834, 892, 995, 1005, 1008, 1020, 1024, 1036, 1041, 1044, 1046, 1047, 1049, 1051], "wraparound": 380, "wrapper": [2, 64, 292, 385, 388, 415, 421, 548, 624, 672, 675, 746, 908, 1001, 1021, 1024, 1040, 1048, 1055], "wrath": 412, "write": [47, 55, 148, 183, 190, 248, 321, 353, 366, 367, 373, 377, 378, 379, 383, 384, 385, 387, 388, 391, 393, 405, 407, 412, 416, 419, 1016, 1025, 1037, 1049, 1053], "writeabl": [934, 935, 1054], "writer": 353, "written": [41, 44, 46, 65, 84, 86, 124, 167, 184, 221, 265, 296, 324, 331, 332, 367, 376, 379, 380, 381, 385, 387, 391, 393, 412, 417, 490, 506, 512, 701, 717, 834, 913, 920, 999, 1001, 1005, 1009, 1010, 1019, 1026, 1045], "wrong": [93, 214, 266, 298, 353, 362, 376, 379, 381, 419, 508, 730, 760, 797, 1005, 1011, 1020, 1039, 1041, 1043, 1044, 1045, 1046, 1049, 1053, 1054], "wrongli": [214, 342, 1054], "wrote": [155, 374], "ws2001": 997, "wspace": [53, 54, 74, 79, 95, 111, 121, 137, 214, 232, 241, 257, 259, 260, 263, 297, 305, 332, 339], "wstate": 1049, "wtv": 385, "wtw": 385, "wu": [1020, 1040, 1048], "wurp": [1050, 1051], "wuthrich": [214, 232], "ww": 416, "www": [45, 103, 192, 214, 230, 232, 286, 291, 309, 373, 374, 379, 387, 411, 415, 445, 452, 490, 512, 513, 535, 538, 541, 545, 648, 662, 668, 675, 689, 690, 857, 864, 916, 917, 1001, 1018], "www4": [169, 376], "wyseguy7": 1042, "w\u00fcthrich": 409, "x": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 61, 62, 63, 64, 66, 67, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 234, 235, 236, 239, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 372, 373, 374, 375, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 402, 405, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 497, 498, 499, 502, 504, 505, 506, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 714, 715, 729, 736, 739, 746, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 792, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 927, 929, 930, 931, 932, 933, 934, 935, 938, 949, 951, 952, 953, 954, 964, 965, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1025, 1033, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "x0": [51, 206, 223, 237, 255, 312, 339, 393, 432, 467, 571, 572, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889], "x00": 419, "x006": 1037, "x00a": 419, "x00b": 419, "x00c": 419, "x00d": 419, "x00e": 419, "x00f": 419, "x00g": 419, "x00h": 419, "x00i": 419, "x00l": 419, "x00n": 419, "x00o": 419, "x00r": 419, "x00t": 419, "x00u": 419, "x00z": 419, "x0_cat": [325, 1015], "x0_infrequent_sklearn": [325, 1015], "x0_label": 312, "x0_rabbit": [325, 1015], "x0_str_femal": 881, "x0_str_male": 881, "x0l": 1040, "x1": [51, 115, 137, 146, 174, 226, 237, 312, 339, 381, 393, 432, 467, 513, 571, 572, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 631, 632, 633, 634, 703, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889], "x110": 1051, "x1_int_1": 881, "x1_int_2": 881, "x1_int_3": 881, "x1_label": 312, "x2": [115, 137, 146, 174, 226, 255, 381, 412, 592, 633, 703], "x27": [63, 103, 104, 140, 155, 158, 166, 187, 188, 189, 242, 243, 252, 253, 255, 262, 266, 270, 272, 273, 279, 284, 286, 310, 318, 322, 323, 325, 333], "x2_tr": 633, "x3": [146, 255, 412], "x64": 377, "x8": 86, "x86": 377, "x86_64": [382, 397], "x9ft": 419, "x_": [164, 172, 263, 272, 321, 381, 411, 414, 416, 631, 639, 768, 863, 903, 904, 1001, 1007, 1012, 1042], "x_0": [215, 661], "x_1": [121, 164, 174, 211, 215, 414, 416, 418, 421, 617, 629, 661, 881, 908, 909, 1001, 1007, 1009, 1015, 1019], "x_1d": 325, "x_1x_2": 1015, "x_1x_2x_3": 1015, "x_1x_3": 1015, "x_2": [164, 174, 211, 416, 418, 419, 421, 617, 629, 1001, 1009, 1015], "x_20": 335, "x_2d": 342, "x_2x_3": 1015, "x_3": [164, 1015], "x_6": 881, "x_7": 881, "x_a": 316, "x_adult": 328, "x_aniso": [79, 90, 95], "x_axi": [123, 222, 276], "x_b": 316, "x_bimod": 316, "x_bin": 313, "x_bound": [421, 621], "x_c": [485, 486, 488, 1012], "x_calib": 440, "x_california": 183, "x_cardiotocographi": 251, "x_center": 196, "x_check": 935, "x_chisq": 316, "x_cluster": 860, "x_convert": 934, "x_copi": 1047, "x_cu": 407, "x_d": [421, 618], "x_dens": [328, 548], "x_df": 152, "x_diabet": 183, "x_different_covari": 70, "x_digit": [105, 161, 308, 412], "x_dist_graph": 852, "x_embed": [301, 302, 696, 700, 857, 1008], "x_error": 220, "x_errors_larg": 220, "x_featur": [106, 644, 645, 646, 997], "x_filter": 90, "x_fit": 692, "x_fit_": [539, 647], "x_forestcov": 251, "x_full": [182, 183, 312], "x_full_train": 140, "x_gaussian": 316, "x_hashed_lsa": 354, "x_hat": [535, 541, 549, 550], "x_hetero": 128, "x_homo": 128, "x_i": [52, 111, 139, 164, 187, 215, 324, 349, 411, 416, 417, 418, 421, 618, 619, 623, 626, 627, 629, 843, 844, 847, 996, 997, 1001, 1007, 1008, 1009, 1015, 1019, 1020, 1021], "x_idx_sort": 1048, "x_imput": 634, "x_indic": 165, "x_inform": 319, "x_inlier": 299, "x_inv": [592, 595], "x_ipca": 125, "x_iri": 277, "x_isotropic_covari": 70, "x_j": [411, 421, 618, 619, 623, 626, 627, 629, 996, 997, 1001, 1008, 1020, 1021], "x_k": [414, 416, 999, 1008], "x_label": 183, "x_leav": [561, 562, 563, 564, 568, 569, 570, 916, 917, 918, 919], "x_left_lower_corn": [50, 305, 374, 502], "x_legend": 47, "x_list": 315, "x_loadings_": [485, 486, 487], "x_lognorm": [316, 1015], "x_lsa": 354, "x_m": 1009, "x_max": [67, 85, 91, 137, 143, 153, 162, 173, 246, 307, 314, 336, 346, 347], "x_max_": 639, "x_mean": 423, "x_mean_": 1048, "x_min": [67, 85, 91, 137, 143, 147, 153, 162, 173, 203, 246, 307, 314, 336, 346, 347], "x_min_": 639, "x_miss": [150, 182, 183], "x_miss_california": 183, "x_miss_diabet": 183, "x_n": [121, 416, 908, 909, 1007, 1009, 1019], "x_near_unique_categori": 319, "x_new": [89, 412, 416, 420, 435, 445, 446, 448, 450, 452, 535, 536, 537, 538, 539, 540, 541, 543, 545, 546, 547, 548, 553, 571, 573, 574, 586, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 632, 634, 639, 642, 643, 644, 645, 646, 692, 693, 694, 695, 696, 857, 864, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 900, 901, 1017], "x_new_again": 1017, "x_new_invers": 1017, "x_norm_squar": [767, 1041, 1053], "x_normal": 1015, "x_np": 407, "x_offset": 196, "x_offset_": [648, 649, 1048], "x_origin": [538, 543, 545, 547, 548, 634, 900, 901], "x_out": [326, 872, 881, 882], "x_outlier": [197, 228, 298, 299, 341], "x_p": [411, 449, 1001], "x_pca": 125, "x_plot": [194, 215, 220, 247, 275, 297, 317], "x_plot_ext": 215, "x_plot_scal": 317, "x_po": 291, "x_q": 411, "x_r": [129, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607], "x_r2": 129, "x_rand": 278, "x_random": 203, "x_reconstruct": [325, 485, 486, 487, 587], "x_reconstructed_kernel_pca": [44, 126], "x_reconstructed_pca": [44, 126], "x_red": 85, "x_reduc": [84, 118, 153, 448], "x_restor": 84, "x_right": 70, "x_rope": 272, "x_rotations_": [414, 485, 486, 487], "x_scale": [196, 878, 894, 1015], "x_scale_": [648, 649, 1048], "x_scaler": 49, "x_score": [299, 485, 486, 487, 488], "x_scores_": [487, 1048], "x_select": 362, "x_shared_covari": 70, "x_shuffl": 319, "x_size": 112, "x_sp": 200, "x_spars": [328, 538, 975, 978], "x_sparse_embed": 570, "x_squared_norm": [260, 463], "x_src": 297, "x_std": [878, 894, 1015], "x_std_": 1048, "x_t": [467, 631, 867], "x_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 109, 115, 116, 126, 135, 138, 140, 142, 146, 147, 148, 149, 150, 151, 154, 161, 162, 165, 166, 176, 179, 186, 187, 188, 189, 190, 192, 195, 199, 204, 209, 211, 212, 220, 221, 222, 228, 229, 230, 232, 242, 244, 250, 254, 255, 259, 265, 266, 269, 270, 275, 279, 281, 285, 287, 291, 295, 298, 300, 301, 304, 307, 309, 310, 314, 316, 317, 319, 321, 322, 323, 328, 329, 334, 335, 341, 353, 357, 359, 360, 361, 362, 366, 373, 381, 384, 392, 405, 412, 415, 418, 441, 473, 474, 475, 476, 477, 478, 479, 513, 562, 563, 564, 571, 572, 701, 702, 704, 706, 803, 826, 834, 836, 839, 857, 865, 866, 868, 882, 918, 919, 995, 1005, 1007, 1008, 1009, 1011, 1015, 1019, 1020, 1021, 1033, 1036], "x_test_df": 255, "x_test_kernel_pca": 126, "x_test_maxab": 1015, "x_test_minmax": 1015, "x_test_miss": 150, "x_test_no_cf_encod": 319, "x_test_noisi": 44, "x_test_np": 255, "x_test_pca": [45, 126], "x_test_r": 115, "x_test_scal": 255, "x_test_sel": 190, "x_test_select": 362, "x_test_text": 47, "x_test_tran": 1015, "x_test_transform": [362, 415], "x_text": 47, "x_tfidf": 354, "x_thresholds_": [244, 639, 1048], "x_torch": 407, "x_tr": [871, 877, 880, 881, 882, 886, 888, 891, 893, 894, 898, 899], "x_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 109, 115, 116, 126, 135, 138, 142, 145, 146, 147, 148, 149, 150, 151, 154, 161, 162, 165, 166, 177, 178, 179, 180, 186, 187, 188, 189, 190, 192, 195, 199, 209, 211, 212, 215, 221, 222, 228, 229, 230, 232, 242, 250, 254, 255, 259, 261, 265, 266, 269, 270, 275, 279, 281, 285, 291, 295, 298, 300, 301, 304, 307, 309, 310, 314, 316, 317, 319, 321, 322, 323, 328, 329, 334, 335, 341, 353, 357, 361, 362, 366, 373, 381, 384, 392, 412, 415, 418, 440, 441, 513, 562, 563, 564, 571, 572, 701, 702, 704, 706, 803, 826, 834, 836, 839, 857, 865, 866, 868, 882, 918, 919, 995, 1005, 1007, 1008, 1009, 1011, 1013, 1015, 1019, 1020, 1033], "x_train_": 615, "x_train_ensembl": 140, "x_train_linear": 140, "x_train_maxab": 1015, "x_train_minmax": 1015, "x_train_miss": 150, "x_train_no_cf_encod": 319, "x_train_noisi": 44, "x_train_pca": 45, "x_train_preprocess": 187, "x_train_r": 115, "x_train_sel": 190, "x_train_select": 362, "x_train_std_transform": 317, "x_train_text": 47, "x_train_tran": 1015, "x_train_transform": [317, 362, 415], "x_train_valid": 63, "x_tran": [316, 327, 407, 445, 467, 884, 889, 896, 929, 1015], "x_trans_bc": 316, "x_trans_qt": 316, "x_trans_yj": 316, "x_transform": [125, 153, 248, 488, 535, 536, 537, 538, 539, 541, 543, 547, 570, 642, 643, 692, 693, 694, 695], "x_transformed_fit_": 539, "x_true": 237, "x_uniform": 316, "x_val": [145, 1013], "x_valid": 63, "x_valu": 334, "x_vari": 90, "x_weibul": 316, "x_weights_": [414, 485, 486, 487, 488], "x_wrong": 70, "xa": 585, "xanchor": 273, "xarg": 1036, "xavier": [865, 866, 1044, 1045, 1046, 1048, 1049, 1054], "xaxi": [118, 127, 141, 211, 234, 236, 239, 292, 297, 353], "xaxis2": 141, "xb": [115, 887], "xbar_": 553, "xbc": 419, "xc3": 419, "xcjason": 1046, "xcode": 377, "xd": 530, "xdang": 683, "xerox": 51, "xerr": [182, 183, 354], "xethan": 1048, "xfail": [387, 927], "xfc": 419, "xfcche": 419, "xfea": 419, "xff": 419, "xgamma": 689, "xgboost": [150, 152, 418, 1024], "xgrid": [50, 305], "xhan": 1045, "xhy": 1043, "xi": [2, 79, 98, 376, 411, 414, 419, 453, 459, 513, 1019, 1047], "xi_i": 1019, "xi_k": 414, "xiang": 1054, "xiangyin": 1049, "xiao": [0, 390, 400, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "xiaojin": 903, "xiaoyu": 1048, "xiaoyuchai": 1049, "xin": [683, 1001, 1044], "xinfan": [1036, 1037, 1040], "xing": [1044, 1045], "xinv": 873, "xinyu": 411, "xinyuliu12": 1045, "xiong": [1044, 1045, 1050], "xj": 409, "xk": [98, 554], "xlabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 76, 94, 109, 110, 112, 113, 115, 116, 118, 123, 128, 136, 137, 139, 144, 146, 147, 148, 149, 150, 154, 158, 160, 164, 165, 168, 171, 172, 173, 174, 176, 177, 178, 187, 194, 197, 198, 199, 201, 202, 203, 204, 207, 208, 214, 216, 217, 219, 221, 223, 224, 228, 232, 245, 247, 249, 251, 267, 271, 272, 276, 277, 281, 282, 285, 287, 294, 295, 298, 299, 318, 319, 339, 341, 342, 345, 353, 358, 359, 360, 635], "xlim": [51, 63, 79, 91, 95, 105, 109, 110, 111, 123, 137, 138, 139, 154, 160, 172, 173, 187, 194, 204, 206, 213, 220, 223, 228, 241, 249, 258, 263, 267, 281, 287, 298, 299, 341, 346, 347, 350, 360], "xm": [51, 237], "xmax": [50, 109, 204, 206, 223, 224, 305], "xmin": [50, 109, 204, 206, 223, 224, 305], "xn": 513, "xom": 51, "xor": [170, 172, 173, 174, 184, 224, 225, 227, 261, 315, 347, 351, 614, 618, 626, 1001, 1021, 1026, 1043], "xp": [414, 883], "xpreprocessor": 377, "xrang": 1042, "xred": [448, 1052], "xrot": 53, "xrx": 51, "xs_sp": 200, "xsat": 1046, "xscale": [172, 177, 247], "xt": [158, 292, 393, 448, 542, 544, 631, 633, 804, 807, 808, 818, 852, 860, 868, 873, 878, 885, 897, 932, 1052, 1054], "xtick": [43, 45, 47, 50, 66, 70, 75, 79, 80, 83, 84, 85, 91, 92, 95, 113, 115, 124, 144, 146, 150, 173, 174, 175, 179, 198, 204, 210, 227, 241, 249, 258, 259, 260, 263, 271, 272, 287, 296, 305, 310, 318, 331, 342, 345, 347, 701], "xtick_period": 188, "xtick_start": 188, "xticklabel": [43, 49, 144, 150, 188, 318], "xticks_label": 146, "xticks_po": 146, "xticks_rot": [45, 701], "xtrain": 305, "xu": [411, 414, 422, 447, 1019, 1049, 1050, 1053, 1054, 1055], "xue": [0, 1040, 1041, 1042, 1044, 1045, 1048], "xuefeng": [1053, 1054, 1055], "xueqin": [683, 1001], "xun": [1046, 1048], "xuniu": 1051, "xval": 183, "xw": [213, 324, 650, 651, 653, 656, 657, 658, 659, 660, 664, 665, 666, 667, 676, 685, 686, 687, 688, 1001], "xx": [77, 91, 111, 143, 147, 153, 162, 173, 174, 175, 188, 221, 224, 225, 226, 227, 228, 239, 241, 249, 261, 298, 307, 314, 315, 336, 341, 342, 346, 347, 350, 351], "xx0": [137, 635], "xx1": [137, 635], "xx_coarser": 143, "xxx": 393, "xy": [48, 63, 82, 279, 305, 347, 397, 650, 651, 654, 655, 656, 657, 658, 659, 664, 665, 666, 667, 668, 685, 686, 687, 688, 690], "xycoord": [48, 63], "xyguo": [1042, 1044], "xytext": [48, 63, 192], "xyz": 378, "y": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 66, 67, 69, 70, 74, 75, 77, 78, 79, 85, 87, 89, 90, 93, 94, 95, 98, 99, 103, 104, 106, 107, 112, 115, 116, 119, 123, 125, 126, 127, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 186, 187, 188, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 232, 234, 235, 236, 239, 242, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 257, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 291, 292, 294, 295, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 371, 372, 373, 374, 375, 377, 379, 381, 383, 384, 386, 387, 388, 392, 393, 402, 405, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 490, 502, 504, 506, 509, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 587, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 701, 702, 703, 704, 705, 706, 710, 715, 730, 736, 739, 745, 746, 760, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 792, 793, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 927, 928, 934, 939, 940, 964, 966, 967, 968, 975, 978, 991, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1019, 1020, 1021, 1025, 1031, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "y0": [51, 237], "y1": [51, 137, 237, 513, 720, 1006, 1007], "y1_label": 46, "y2": [137, 720, 1006], "y2_label": 46, "y3": 1006, "y_": [244, 258, 262, 263, 304, 381, 414, 416, 641, 652, 673, 684, 733, 734, 742, 768, 787, 788, 791, 1001, 1005, 1042], "y_1": [136, 359, 360, 414, 1005, 1009, 1019], "y_2": [136, 359, 360, 1009], "y_20": 335, "y_2d": 342, "y_3": 360, "y_30": 336, "y_50": 336, "y_adult": 328, "y_all": [670, 672, 680, 836, 837, 865], "y_ard": 194, "y_ard_std": 194, "y_axi": [123, 222], "y_bia": 138, "y_brr": 194, "y_brr_std": 194, "y_c": [485, 486, 488], "y_calib": 440, "y_california": 183, "y_coclust": 57, "y_convert": 934, "y_cov": 615, "y_cu": 407, "y_decis": [328, 839], "y_dens": 1006, "y_diabet": 183, "y_different_covari": 70, "y_digit": [105, 161, 308, 412], "y_error": [138, 220], "y_errors_larg": 220, "y_filter": 90, "y_full": [182, 183, 312], "y_full_train": 140, "y_grid_pr": 153, "y_hat": 468, "y_high": 147, "y_i": [139, 324, 349, 409, 418, 996, 997, 1001, 1005, 1009, 1019, 1020, 1021], "y_indic": 879, "y_iri": 277, "y_isotropic_covari": 70, "y_j": [997, 1005, 1007, 1015, 1020], "y_k": [414, 1015], "y_kmean": 57, "y_kr": 247, "y_l": 1005, "y_label": 232, "y_left_lower_corn": [50, 305, 374, 502], "y_limit": 144, "y_loadings_": [485, 486, 487], "y_loc": 353, "y_log_prob": 839, "y_log_proba": 868, "y_low": 147, "y_lower": [93, 147], "y_mask": 335, "y_max": [67, 91, 137, 143, 153, 162, 173, 232, 246, 307, 314, 336, 346, 347, 639, 641], "y_mean": [176, 177, 180, 615, 648, 649], "y_mean_": 1048, "y_med": 147, "y_min": [67, 91, 137, 143, 153, 162, 173, 246, 307, 314, 336, 346, 347, 639, 641], "y_miss": [182, 183], "y_miss_california": 183, "y_miss_diabet": 183, "y_multirf": 154, "y_n": [1005, 1009, 1019], "y_new": 89, "y_nois": 138, "y_noisi": 213, "y_norm_squar": 767, "y_normal": 216, "y_np": 407, "y_numer": [934, 993], "y_observ": 329, "y_onehot_test": 281, "y_org": 939, "y_outlier": 197, "y_pareto": 216, "y_plot": [194, 215, 220, 275], "y_plot_ext": 215, "y_po": 355, "y_pred": [43, 45, 46, 52, 62, 66, 68, 70, 79, 90, 95, 102, 107, 135, 147, 148, 150, 155, 166, 187, 214, 216, 221, 224, 229, 231, 232, 241, 242, 251, 266, 268, 270, 275, 299, 303, 310, 317, 329, 334, 335, 362, 379, 386, 393, 418, 434, 442, 468, 485, 486, 487, 553, 556, 558, 560, 561, 562, 564, 566, 568, 569, 571, 572, 574, 615, 635, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 683, 684, 701, 702, 704, 705, 706, 707, 712, 716, 717, 722, 725, 726, 727, 728, 732, 733, 734, 738, 740, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 787, 788, 789, 791, 792, 794, 795, 800, 804, 807, 808, 818, 829, 839, 841, 842, 851, 859, 866, 868, 908, 909, 910, 911, 912, 913, 914, 917, 919, 1005, 1007, 1042, 1043, 1045, 1047, 1051, 1052, 1053], "y_pred_ard": 199, "y_pred_bin": 214, "y_pred_chain": 291, "y_pred_empti": [733, 734], "y_pred_enet": 199, "y_pred_ensembl": 291, "y_pred_lasso": 199, "y_pred_lr": 216, "y_pred_nnl": 209, "y_pred_ol": 209, "y_pred_outli": [228, 298, 341], "y_pred_outliers_sgd": 228, "y_pred_ovr": 291, "y_pred_product": 232, "y_pred_qr": 216, "y_pred_ridg": 107, "y_pred_ridge_with_trans_target": 107, "y_pred_scal": 317, "y_pred_seg": 214, "y_pred_test": [228, 298, 341], "y_pred_test_sgd": 228, "y_pred_tot": 232, "y_pred_train": [228, 341], "y_pred_train_sgd": 228, "y_pred_with_": 186, "y_pred_without_": 186, "y_predict": [138, 381, 1036], "y_prob": [62, 64, 174, 441, 442, 713, 839, 865, 1005, 1050, 1054], "y_proba": [146, 149, 317, 393, 713, 868, 1054], "y_proba_sc": 317, "y_rand": 336, "y_reconstruct": [485, 486, 487], "y_rf": 154, "y_right": 70, "y_rotations_": [414, 485, 486, 487], "y_sampl": [180, 615], "y_scaler": 49, "y_score": [242, 279, 281, 393, 485, 486, 487, 711, 724, 730, 731, 743, 744, 760, 786, 792, 793, 798, 804, 807, 808, 818, 868, 1005, 1042, 1050, 1052, 1054], "y_scores_": [487, 1048], "y_shared_covari": 70, "y_spars": 1006, "y_std": [177, 180, 556, 615, 648, 649, 1049], "y_std_": 1048, "y_svr": 247, "y_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 115, 116, 126, 135, 138, 140, 142, 146, 147, 148, 149, 150, 151, 154, 161, 162, 165, 166, 179, 186, 187, 188, 189, 190, 192, 199, 209, 211, 214, 220, 221, 222, 229, 230, 232, 242, 250, 254, 255, 259, 265, 266, 269, 270, 275, 279, 281, 285, 291, 295, 300, 301, 307, 309, 310, 314, 317, 319, 321, 322, 323, 328, 329, 334, 335, 353, 357, 361, 362, 373, 384, 392, 412, 415, 418, 441, 513, 562, 563, 564, 571, 572, 701, 702, 704, 706, 803, 826, 834, 836, 839, 857, 865, 866, 868, 918, 919, 1005, 1007, 1008, 1015, 1020, 1033, 1036], "y_test_pr": 259, "y_test_predict": 250, "y_test_r": 115, "y_test_tru": 334, "y_thresholds_": [244, 639, 1048], "y_torch": 407, "y_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 115, 116, 126, 135, 138, 142, 145, 146, 147, 148, 149, 150, 151, 154, 161, 162, 165, 166, 177, 178, 179, 180, 186, 187, 188, 189, 190, 192, 195, 199, 209, 211, 212, 215, 221, 222, 229, 230, 242, 250, 254, 255, 259, 265, 266, 269, 270, 275, 279, 281, 285, 291, 295, 300, 301, 307, 309, 310, 314, 317, 319, 321, 322, 323, 328, 329, 331, 332, 334, 335, 336, 353, 357, 361, 362, 366, 373, 381, 384, 392, 412, 415, 418, 440, 441, 513, 562, 563, 564, 571, 572, 701, 702, 704, 706, 803, 826, 834, 836, 839, 857, 865, 866, 868, 918, 919, 995, 1005, 1007, 1008, 1013, 1015, 1020, 1033], "y_train_": 615, "y_train_ensembl": 140, "y_train_linear": 140, "y_train_noisi": 178, "y_train_pr": 259, "y_train_r": 115, "y_train_valid": 63, "y_tran": 107, "y_transform": 488, "y_true": [43, 52, 57, 68, 92, 107, 135, 155, 174, 214, 224, 232, 251, 260, 266, 334, 379, 434, 441, 442, 468, 485, 486, 487, 556, 558, 560, 561, 562, 564, 566, 568, 569, 572, 574, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 701, 702, 704, 705, 706, 707, 711, 712, 713, 716, 717, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 800, 803, 841, 842, 851, 859, 866, 909, 911, 914, 917, 919, 1005, 1037, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1053], "y_true_bin": 214, "y_true_categor": [713, 1005], "y_true_empti": 733, "y_true_mean": 216, "y_true_seg": 214, "y_type_": 875, "y_uniqu": 61, "y_upper": [93, 147], "y_val": [145, 1013], "y_valid": 63, "y_var": 138, "y_vari": 90, "y_weights_": [414, 485, 486, 487, 488], "y_wrong": 70, "yacin": 1044, "yadav": 1050, "yagi": 1048, "yahoo": 51, "yair": [411, 695], "yakov": 1048, "yalburgi": [1043, 1044], "yaman": 1051, "yamanishi": 374, "yamin": 1036, "yaml": [383, 387], "yan": [1040, 1048], "yanchor": 273, "yang": [374, 411, 416, 538, 643, 1042, 1043, 1046, 1048, 1049, 1050, 1052, 1053], "yangarbit": 1043, "yanhong": 1051, "yanlend": 1042, "yann": [1036, 1038], "yanni": 411, "yannick": [1036, 1038], "yao": [0, 376, 390, 400, 1042, 1043, 1044, 1045, 1052, 1053, 1054, 1055], "yap": 1043, "yar": 1050, "yareyaredesuyo": 1054, "yaroslav": [0, 400, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1052, 1053, 1054, 1055], "yarowski": [323, 905, 1018], "yashika": 1048, "yasmeen": 1049, "yat2016": 411, "yate": [594, 734], "yates2011": 594, "yau": [1039, 1040, 1041, 1042, 1043], "yaxi": [46, 49, 93, 118, 127, 141, 211, 234, 236, 239, 257, 292, 297, 353], "ye": [353, 387, 393, 405, 662, 663, 875, 892, 1001], "year": [0, 43, 158, 169, 176, 186, 187, 188, 214, 215, 232, 329, 376, 378, 383, 391, 415, 419, 806, 811, 813, 887, 1001, 1005, 1025, 1029], "yearli": [43, 394], "yearremodadd": 155, "yeast": [291, 839], "yee": [1043, 1044], "yegelwel": 1048, "yeh": 1049, "yelit": 1042, "yellow": [70, 119, 342, 1006], "yellowbrick": 1024, "yellowgreen": [215, 217, 224, 359], "yen": [1042, 1043], "yenchen": [0, 1042], "yenchenlin": 1042, "yenugula": 1054, "yeo": [312, 316, 884, 896, 1015, 1044, 1050, 1052], "yep": 382, "yerr": [105, 110, 112, 142, 144, 168, 294, 318, 334], "yesy": 399, "yesyesclassificationclassificationnumb": 399, "yesyesdo": 399, "yesyesfew": 399, "yesyesllel": 399, "yesyespredict": 399, "yesyessgdclassifiersgd": 399, "yesyessgdregressorsgd": 399, "yesyestextdatatext": 399, "yet": [48, 90, 199, 232, 262, 273, 355, 368, 374, 378, 383, 391, 396, 397, 402, 415, 416, 418, 419, 421, 451, 455, 464, 465, 557, 558, 581, 782, 988, 994, 1001, 1005, 1011, 1019, 1025, 1045, 1053], "yeung": 1042, "ygrid": [50, 305], "yhoo": 51, "yi": [513, 1007, 1040, 1044, 1045, 1048], "yichuan": [1042, 1043], "yield": [47, 48, 62, 88, 109, 110, 111, 112, 147, 199, 209, 214, 229, 232, 277, 291, 307, 312, 339, 344, 353, 354, 362, 366, 368, 373, 384, 393, 408, 411, 413, 415, 416, 418, 419, 420, 440, 452, 471, 475, 512, 513, 541, 542, 543, 545, 550, 557, 558, 563, 564, 565, 566, 571, 572, 598, 606, 651, 655, 656, 657, 659, 665, 667, 669, 677, 679, 690, 730, 785, 792, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 832, 833, 835, 839, 842, 900, 901, 946, 953, 955, 956, 962, 997, 999, 1001, 1002, 1005, 1020, 1021, 1041, 1042, 1044, 1047, 1049], "yifan": 1009, "yime": 1044, "ying": [411, 455, 465, 1050], "yinglr": 1046, "yisheng": 1053, "yiyangq": 1050, "yj": [115, 316], "ylabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 94, 109, 110, 112, 113, 115, 116, 118, 123, 128, 136, 137, 139, 146, 147, 148, 149, 150, 154, 158, 160, 164, 165, 168, 171, 172, 173, 174, 176, 177, 178, 187, 194, 197, 198, 199, 201, 202, 203, 204, 207, 208, 214, 216, 217, 219, 221, 223, 224, 232, 245, 247, 249, 267, 271, 272, 275, 276, 277, 281, 282, 285, 287, 295, 319, 339, 342, 345, 353, 358, 359, 360, 635], "ylim": [51, 61, 63, 69, 72, 79, 91, 95, 109, 110, 111, 123, 137, 138, 144, 147, 154, 157, 172, 173, 187, 203, 204, 206, 207, 208, 220, 223, 224, 228, 241, 249, 258, 263, 267, 271, 275, 281, 287, 298, 299, 341, 346, 347, 350, 353, 360], "ylorbr_r": 111, "ym": [51, 237], "ymax": [47, 49, 50, 109, 203, 206, 207, 215, 223, 272, 305], "ymazari": 1044, "ymean": 195, "ymin": [50, 109, 203, 206, 207, 215, 223, 272, 305], "yml": 387, "yn": [513, 1006, 1007], "yoav": 1042, "yoch": 1049, "yogendrasingh": 1051, "yojana": 1051, "yokasr": 1046, "yoni": 1039, "yoon": 1047, "yoram": [289, 739], "york": [271, 792, 801, 995, 1005, 1017], "yoshihiro": 1046, "yoshiki": [1039, 1042], "yoshizawa": 1044, "yoshua": [865, 866, 1018], "yosshi999": 1050, "yosuk": [1048, 1049], "yotam": 1052, "you": [0, 30, 54, 58, 61, 103, 118, 143, 146, 148, 166, 169, 183, 188, 190, 201, 215, 218, 243, 248, 255, 260, 267, 272, 273, 279, 298, 321, 322, 325, 327, 328, 332, 335, 346, 353, 362, 366, 367, 368, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 392, 393, 397, 398, 399, 402, 405, 407, 409, 410, 411, 412, 413, 415, 418, 419, 420, 422, 423, 428, 440, 446, 447, 449, 450, 452, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 504, 507, 508, 513, 514, 536, 537, 538, 540, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 583, 584, 585, 586, 592, 593, 594, 595, 611, 612, 614, 615, 631, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 694, 703, 704, 789, 802, 803, 805, 806, 807, 808, 809, 811, 813, 819, 820, 822, 823, 824, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 858, 859, 865, 866, 867, 868, 871, 872, 873, 874, 875, 880, 881, 882, 887, 888, 893, 894, 896, 897, 898, 899, 901, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 927, 952, 970, 994, 995, 1000, 1001, 1005, 1006, 1009, 1011, 1012, 1015, 1016, 1019, 1020, 1021, 1023, 1024, 1028, 1029, 1036, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "youden": 1005, "younger": 232, "your": [16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 368, 373, 377, 378, 379, 380, 382, 383, 385, 387, 388, 391, 392, 393, 397, 398, 399, 405, 407, 410, 411, 412, 413, 418, 419, 422, 423, 447, 449, 507, 537, 565, 566, 606, 638, 650, 691, 715, 804, 807, 808, 810, 818, 827, 831, 833, 927, 946, 1002, 1009, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1029, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "yourlogin": 379, "yourself": [103, 378, 379, 380, 384, 387, 1009], "ypred": 1043, "yrsold": 155, "yscale": [172, 177, 214, 247, 353], "ystd": 195, "yt": 879, "ython": 0, "ytick": [45, 50, 66, 70, 75, 79, 80, 83, 84, 85, 91, 92, 95, 113, 115, 124, 148, 165, 173, 174, 175, 179, 198, 204, 210, 227, 241, 249, 258, 259, 260, 263, 267, 287, 296, 305, 310, 331, 342, 347, 353], "yticklabel": [267, 353], "ytrain": 305, "ytrue": 1043, "yu": [199, 411, 455, 465, 662, 1001, 1009, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "yuan": [1050, 1051, 1052, 1053, 1054], "yuchen": [1052, 1053], "yucheng": 1041, "yue": [1048, 1054], "yufeng": 1044, "yuichi": 1043, "yuki": 1050, "yule": [453, 460, 782, 783, 784], "yulia": 1046, "yum": 377, "yun": [1051, 1052], "yung": [1039, 1042], "yunqian": 1001, "yurchak": [0, 400, 419, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "yuri": [1039, 1041], "yusuf": [1051, 1052], "yusuk": 1049, "yusukenagasaka": 1049, "yutaro": 1048, "yuusuk": 1053, "yuval": [408, 454], "yv": 414, "yve": 1049, "yy": [77, 91, 111, 143, 153, 162, 173, 175, 188, 221, 225, 226, 227, 228, 239, 241, 249, 298, 307, 314, 315, 336, 341, 342, 346, 347, 350, 351], "yy_": 221, "yy_coars": 143, "yy_down": 347, "yy_up": 347, "yzhenman": 1049, "z": [50, 91, 143, 162, 173, 175, 188, 224, 226, 227, 234, 236, 241, 246, 261, 298, 305, 307, 314, 317, 336, 342, 347, 351, 376, 383, 408, 416, 418, 557, 558, 589, 643, 668, 675, 689, 690, 693, 697, 703, 728, 789, 888, 1001, 1002, 1009, 1010, 1051], "z_": 416, "z_1": 1001, "z_2": 1001, "z_3": 1001, "z_4": 1001, "z_5": 1001, "z_i": [139, 1009], "z_l": 1009, "z_points_coars": 143, "zablit": 1051, "zac": 1041, "zacchari": 1048, "zach": [1044, 1045, 1050], "zachariah": 1044, "zadrozni": [64, 409, 440, 680], "zaffalon": 272, "zahlii": 1049, "zain": [0, 400, 1050, 1051, 1052, 1053], "zalkow": 1041, "zambelli": 1039, "zamrii": 1046, "zanouda": 1043, "zaxi": [118, 127, 211, 234], "zayd": 1045, "zaytsev": 1039, "zdzieblo": 1053, "zebra": 716, "zedan": 1052, "zeel": 1050, "zeeshan": [1051, 1052], "zempleni": 1050, "zen": 939, "zenin": 1042, "zentrum": 1005, "zero": [2, 25, 49, 50, 53, 64, 70, 72, 75, 76, 85, 87, 110, 112, 113, 121, 124, 126, 137, 138, 146, 148, 149, 154, 166, 169, 183, 194, 199, 200, 202, 205, 207, 208, 213, 214, 215, 218, 219, 220, 224, 229, 232, 245, 248, 249, 251, 257, 261, 263, 269, 272, 277, 281, 282, 285, 297, 312, 322, 323, 346, 349, 354, 355, 357, 361, 366, 367, 374, 381, 385, 393, 409, 411, 413, 416, 418, 419, 420, 421, 424, 449, 455, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 501, 512, 513, 527, 530, 531, 535, 536, 539, 541, 542, 543, 544, 546, 547, 551, 552, 556, 561, 562, 563, 564, 565, 566, 568, 569, 570, 585, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 615, 640, 643, 647, 648, 649, 654, 662, 663, 668, 669, 670, 671, 672, 675, 680, 681, 682, 689, 690, 707, 713, 716, 717, 719, 720, 729, 733, 734, 738, 742, 744, 750, 787, 788, 789, 791, 800, 801, 819, 820, 823, 824, 837, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 871, 878, 880, 881, 883, 884, 885, 887, 888, 894, 895, 896, 897, 901, 908, 916, 917, 918, 919, 950, 979, 990, 995, 1001, 1003, 1004, 1007, 1008, 1009, 1015, 1016, 1017, 1019, 1020, 1021, 1036, 1038, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "zero_bas": [490, 512, 513], "zero_class": 249, "zero_divis": [310, 717, 720, 733, 734, 742, 787, 788, 791, 1005, 1046, 1048, 1052, 1055], "zero_impute_scor": 183, "zero_on": [379, 1037], "zero_one_loss": [2, 379, 407, 707, 738, 1005, 1037, 1038, 1039, 1053, 1054], "zero_one_scor": 1037, "zerodivisionerror": [1043, 1046, 1052], "zeros_lik": [82, 216, 281], "zeta": 1020, "zeta_i": 1020, "zev": [1042, 1043, 1044, 1045], "zeyusun": 1049, "zha": [693, 697, 1002], "zhai_pro": 1041, "zhan": 1051, "zhang": [411, 445, 668, 683, 689, 690, 693, 697, 762, 763, 1001, 1002, 1003, 1007, 1019, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1052, 1053, 1054], "zhang02c": 680, "zhang96": [411, 445], "zhao": [1046, 1048, 1049, 1050, 1051], "zhaowei": 1048, "zhaoweiwang": 1049, "zhauniarovich": 1041, "zhdanovich": 1044, "zhechev": 1051, "zhehao": [1049, 1050, 1051, 1052, 1054], "zhenfish": 1050, "zheng": [1042, 1043, 1048], "zhenq": 1044, "zhi": [567, 1011], "zhiqe": 1044, "zhou": [567, 643, 904, 1011, 1044, 1052, 1053], "zht2007": 201, "zhu": [135, 418, 523, 557, 662, 903], "zhuyi": [1044, 1045], "zhuzhunashvili": [411, 465], "ziad": 1054, "zibulevski": [668, 689, 690], "zichen": 1041, "zielinska": 1047, "zihna": [1049, 1055], "ziji": [1044, 1045], "zijlstra": 1039, "zike": 1042, "zimek": 449, "zimmer": [1040, 1050], "zinkov": [1036, 1037, 1038, 1040, 1041], "zip": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 377, 418, 832, 1015, 1032], "zisserman": [642, 997, 1005], "zito": [1036, 1049], "ziv": 1042, "zivori": 1042, "zj": [1044, 1045], "zoj613": 1048, "zolisa": 1048, "zoom": [43, 140, 312, 399], "zoom_in_percentile_rang": 312, "zorder": [51, 91, 123, 152, 162, 172, 180, 204, 212, 235, 237, 244, 247, 257, 322, 328, 347], "zou": [135, 201, 418, 523, 557, 660, 1001, 1019], "zou_et_al_criterion_resc": 201, "zoubin": 903, "zoubir": 112, "zouhar": 1049, "zsh": 367, "zuckerberg": 0, "zwinck": 1038, "zxcvbniu": 1043, "zz": 111, "zzrh2009": 418, "z\u00e9": 1044, "\u00e4yr\u00e4m\u00f6": 1001, "\u00f3scar": [1040, 1041, 1042, 1043], "\u00f6zer": 1049, "\u0142ukasz": 1051, "\u015fahin": 1050, "\u0161t\u011bp\u00e1n": 1054, "\u675c\u4e16\u6a4b": [0, 401], "\u8d75\u4e30": 1050}, "titles": ["About us", "Recently Deprecated", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "The Iris Dataset", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso on dense and sparse data", "Lasso model selection via information criteria", "Lasso, Lasso-LARS, and Elastic Net paths", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Effect of model regularization on training and test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer Information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "<span class=\"section-number\">12. </span>Choosing the right estimator", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_clusterer", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_file", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_log_loss_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "FixedThresholdClassifier", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "TunedThresholdClassifierCV", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "ClassifierTags", "InputTags", "RegressorTags", "Tags", "TargetTags", "TransformerTags", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "default_tags", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "get_tags", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "parallel_backend", "sample_without_replacement", "register_parallel_backend", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "validate_data", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "<span class=\"section-number\">13. </span>External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "Available documentation for scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6"], "titleterms": {"": [189, 317, 319, 382, 391, 418, 1005], "0": [183, 321, 322, 323, 324, 1021, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "1": [188, 211, 324, 325, 326, 327, 328, 329, 391, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "10": [100, 1036], "11": 1036, "12": 1036, "13": 1037, "14": 1038, "15": 1039, "16": 1040, "17": 1041, "18": 1042, "19": 1043, "1d": 297, "2": [211, 326, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "20": [102, 353, 374, 1044], "2018": 1025, "20newgroup": 229, "21": 1045, "22": [321, 1046], "23": [322, 1047], "24": [323, 1048], "2d": [51, 85, 123, 129, 188], "3": [63, 198, 327, 1044, 1045, 1050, 1052], "3d": 188, "4": [328, 1036, 1044, 1053], "5": [329, 1021, 1036, 1054], "6": [1036, 1055], "7": 1036, "8": 1036, "9": 1036, "99": 374, "A": [52, 58, 59, 81, 91, 96, 214, 324, 378, 385, 415], "And": [238, 394], "In": 279, "NOT": 384, "One": [206, 228, 281, 324, 341, 415, 1011, 1019], "The": [0, 116, 118, 186, 187, 214, 239, 245, 266, 270, 279, 286, 289, 374, 383, 387, 415, 419, 1004, 1005, 1017], "Will": 391, "With": 252, "__sklearn_is_fitted__": 133, "_safe_index": 930, "abil": 177, "ablat": 251, "about": [0, 187, 391], "absolut": 1005, "access": 412, "accuraci": [189, 246, 353, 357, 1005], "accuracy_scor": 707, "across": 362, "action": 379, "activ": [0, 332], "ad": 411, "adaboost": [135, 136, 137, 418], "adaboostclassifi": [135, 557], "adaboostregressor": 558, "add": [328, 391], "add_dummy_featur": 890, "addit": [418, 997], "additive_chi2_kernel": 762, "additivechi2sampl": 642, "address": 266, "adjac": 55, "adjust": 72, "adjusted_mutual_info_scor": 708, "adjusted_rand_scor": 709, "advanc": 252, "advantag": 411, "affin": [51, 73, 411, 1003], "affinity_propag": 457, "affinitypropag": 443, "agglom": [74, 75, 85], "agglomer": [84, 87, 1022], "agglomerativeclust": 444, "aggress": [994, 1001], "aic": [203, 1001], "algebra": [366, 388], "algorithm": [57, 58, 59, 73, 79, 82, 88, 96, 97, 98, 234, 241, 385, 391, 999, 1001, 1006, 1008, 1009, 1013, 1021], "alias": 387, "align": 1002, "all": [272, 281, 325, 397, 1051, 1052, 1053], "all_displai": 943, "all_estim": 944, "all_funct": 945, "alloc": [54, 416], "alpha": [160, 357], "alpin": 397, "alreadi": 55, "altern": 994, "am": [144, 251], "amount": 284, "an": [81, 92, 133, 183, 196, 203, 302, 321, 325, 387, 391, 419, 994, 1011], "anaconda": 397, "analysi": [43, 64, 69, 70, 93, 121, 128, 131, 135, 147, 188, 199, 257, 274, 275, 282, 300, 301, 302, 353, 414, 416, 999, 1008, 1022], "analyz": [52, 994], "angl": [203, 1001], "ani": 391, "anomali": 241, "anova": [166, 345], "api": [2, 41, 133, 254, 255, 321, 324, 326, 367, 381, 386, 393, 402, 407, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1053, 1054, 1055], "appli": 160, "applic": 419, "approach": [109, 203, 272], "approxim": [184, 191, 192, 246, 292, 323, 413, 997], "ar": [100, 266, 324, 391], "arch": 397, "architectur": 1025, "ard": [199, 1001], "ardregress": 648, "arff": 373, "argument": [324, 381, 1047, 1049], "arm64": 387, "arrai": [41, 326, 329, 361, 388, 407, 1053, 1054, 1055], "artifact": 405, "artwork": 0, "as_float_arrai": 932, "ask": 391, "assert": 381, "assert_all_finit": 933, "assign": 411, "assumpt": 90, "atom": [49, 366], "attent": 391, "attribut": [381, 393, 407, 994], "auc": [321, 710], "author": [383, 1036], "autom": 379, "automat": [199, 392, 1001], "auxiliari": 41, "avail": [325, 1032, 1033], "available_if": 965, "averag": [279, 281, 411, 418, 1005], "average_precision_scor": 711, "avoid": [362, 412], "aweb": 1029, "ax": 386, "b": 115, "backend": 387, "backward": 379, "bag": [138, 146, 353, 418, 419, 994], "baggingclassifi": 559, "baggingregressor": 560, "balanc": [271, 1005], "balanced_accuracy_scor": 712, "ball": 1008, "balltre": [848, 1008], "base": [4, 41, 42, 43, 115, 142, 169, 184, 199, 247, 321, 322, 324, 326, 327, 328, 379, 411, 415, 418, 420, 1001, 1013, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "baseestim": [381, 425], "baselin": [192, 214], "basi": [44, 180, 421, 997, 1001], "basic": [178, 232, 392, 413, 421], "batch": [411, 416], "bay": [61, 62, 1007], "bayesian": [25, 194, 195, 257, 272, 1001, 1004], "bayesiangaussianmixtur": 801, "bayesianridg": 649, "befor": 183, "behavior": 267, "behind": 0, "being": 187, "benchmark": [46, 49, 91, 353], "bernoulli": [1007, 1010], "bernoullinb": 843, "bernoullirbm": 864, "best": [262, 380, 391], "bestofmedia": 1029, "beta": 416, "betawork": 1029, "between": [97, 283, 1001], "bia": 138, "bic": [203, 262, 1001], "biclust": [27, 56, 57, 58, 184, 375, 408], "biclustermixin": 426, "bigger": 368, "bike": [43, 52, 188], "bin": 1015, "binar": [871, 891, 1015, 1016], "binari": [279, 291, 329, 1001, 1005], "birch": [77, 411, 445], "birchbox": 1029, "bisect": [78, 411], "bisectingkmean": [325, 446], "blind": 122, "bnp": 1029, "boil": 384, "boltzmann": [310, 1010], "bonu": 160, "book": 1029, "boost": [43, 141, 144, 145, 146, 147, 148, 149, 150, 188, 214, 321, 322, 324, 326, 327, 418], "bouldin": 411, "bound": 245, "boundari": [151, 156, 295, 336, 346], "branch": 387, "break": 350, "breast": [190, 376], "brier": 1005, "brier_score_loss": 713, "brute": [994, 1008], "bug": [378, 379, 1028, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "build": [176, 183, 377, 379, 387, 412, 1054, 1055], "bulk": [49, 366], "bunch": [391, 923], "busi": 266, "c": 385, "c4": 1021, "c5": 1021, "cach": [104, 294, 412], "calcul": [145, 157], "calibr": [5, 60, 61, 62, 63, 64, 147, 184, 214, 409, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "calibratedclassifiercv": 440, "calibration_curv": 442, "calibrationdisplai": 441, "california": 374, "calinski": 411, "calinski_harabasz_scor": 714, "call": [362, 378], "callgrind": 385, "can": [160, 391], "cancer": [190, 376], "candid": [284, 994], "canon": [115, 414], "card": 266, "cardif": 1029, "cardiotocographi": 251, "cart": 1021, "case": [349, 1001, 1005], "categor": [144, 318, 323, 328, 391, 418, 1007, 1015], "categori": [43, 325, 327, 1015], "categoricalnb": 844, "caus": 397, "causal": [186, 187], "cautiou": 187, "cca": [115, 485], "center": [121, 1015], "central": 55, "centroid": [303, 1008], "chain": [105, 253, 291, 392, 412], "chanc": 72, "chang": [248, 379, 394, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "changelog": [1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "characterist": [281, 282, 1005], "check": [187, 274, 321, 387, 407, 1044, 1045, 1046], "check_arrai": 935, "check_consistent_length": 936, "check_cv": 828, "check_estim": [946, 1055], "check_increas": 640, "check_is_fit": [381, 988], "check_memori": 989, "check_random_st": 937, "check_scalar": 938, "check_scor": 715, "check_symmetr": 990, "check_x_i": 934, "checker": 41, "checklist": 379, "chi": [997, 1003], "chi2": 608, "chi2_kernel": 763, "choic": 416, "choos": [46, 399], "ci": [379, 387], "circl": 99, "cite": 0, "claim": [214, 232], "class": [41, 63, 72, 135, 137, 157, 198, 223, 228, 275, 279, 281, 324, 341, 344, 393, 410, 415, 418, 419, 1005, 1008, 1011, 1019, 1020, 1036, 1037], "class_likelihood_ratio": 716, "classic": 25, "classif": [27, 47, 63, 65, 66, 68, 69, 102, 161, 172, 173, 174, 175, 179, 184, 230, 249, 275, 278, 279, 282, 291, 295, 303, 310, 321, 330, 335, 346, 353, 375, 421, 1001, 1005, 1006, 1008, 1009, 1019, 1020, 1021], "classifi": [25, 41, 61, 62, 64, 67, 133, 158, 198, 253, 269, 286, 291, 295, 321, 329, 336, 339, 342, 353, 361, 409, 418, 999, 1008], "classification_report": 717, "classifierchain": [839, 1006], "classifiermixin": 428, "classifiertag": 924, "classnameprefixfeaturesoutmixin": 427, "clear": 1046, "clear_data_hom": 489, "clone": [381, 436], "close": [378, 387], "cloud": 123, "cloudpickl": 405, "cluster": [6, 27, 51, 57, 59, 71, 72, 73, 74, 75, 76, 79, 81, 82, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 121, 184, 325, 327, 354, 375, 408, 411, 416, 1005, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "cluster_optics_dbscan": 458, "cluster_optics_xi": 459, "clustermixin": 429, "co": [57, 59, 408], "co2": 176, "code": [0, 46, 121, 130, 379, 381, 384, 385, 387, 416, 1040, 1041, 1042, 1043, 1044], "coeffici": [169, 187, 194, 218, 219, 285, 411, 1005], "cohen": 1005, "cohen_kappa_scor": 720, "coin": [80, 81], "column": [102, 103, 253], "column_or_1d": 991, "columntransform": [329, 412, 467], "com": 1029, "combin": [155, 242], "comment": 384, "commit": 379, "committe": 394, "common": [187, 362, 393, 407, 419, 1005], "commun": [0, 379], "compact": 243, "compar": [63, 77, 79, 95, 109, 115, 141, 154, 165, 192, 194, 200, 216, 221, 241, 247, 272, 280, 300, 308, 312, 318, 391], "comparison": [64, 67, 70, 78, 97, 111, 129, 144, 145, 164, 171, 234, 235, 247, 272, 283, 285, 289, 355, 1001], "compat": [41, 321, 379, 381, 407], "compil": [377, 385], "complement": 1007, "complementnb": 845, "complet": [250, 411], "completeness_scor": 721, "complex": [46, 243, 253, 271, 274, 333, 357, 366, 1001, 1008, 1009, 1019, 1020, 1021], "compon": [116, 121, 300, 301, 302, 416, 1008, 1022], "compos": [7, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "composit": [101, 184, 412, 994], "compoundkernel": 616, "compress": [53, 86, 366], "comput": [41, 55, 73, 81, 82, 96, 97, 100, 109, 141, 207, 219, 365, 366, 412, 415, 1012, 1026], "computation": 368, "compute_class_weight": 939, "compute_optics_graph": 460, "compute_sample_weight": 940, "concaten": 106, "concentr": 257, "concept": [393, 1001], "conclud": [43, 238], "conclus": [46, 52, 171, 199, 203, 289, 295, 319, 346], "conda": 377, "condit": [188, 323, 1012], "confid": 147, "config_context": 471, "configur": [366, 367], "confus": [265, 411, 1005], "confusion_matrix": 722, "confusionmatrixdisplai": [242, 701], "connect": [411, 419], "consensu": 1001, "consensus_scor": 723, "consider": 266, "constant": [214, 266, 995], "constantkernel": 617, "constraint": [150, 152, 326, 328, 411, 418], "construct": 247, "consum": 248, "content": 391, "conting": 411, "contingency_matrix": 718, "continu": [313, 379], "contribut": [379, 391], "contributor": [0, 378, 379, 394, 1040, 1041, 1042, 1043, 1044], "control": [362, 418, 1009], "convent": 380, "converg": 135, "convergencewarn": 575, "convex": 224, "cookbook": 180, "coordin": 203, "core": [0, 47, 368, 378, 385, 391, 394, 1007], "corpu": 419, "correl": [187, 190, 414, 1005, 1013], "cosin": 1003, "cosine_dist": 764, "cosine_similar": 765, "cost": [266, 357, 1021], "countvector": 592, "covari": [8, 70, 108, 109, 111, 112, 113, 184, 259, 413, 999, 1044, 1048, 1049, 1050, 1052, 1053, 1055], "coverag": [379, 387, 1005], "coverage_error": 724, "covertyp": [251, 374], "craft": 384, "crash": 391, "creat": [102, 128, 135, 218, 242, 279, 319, 345, 346, 391], "credit": 266, "criteria": [201, 391, 1001, 1021], "criterion": [203, 323, 994, 1019], "cross": [43, 114, 115, 160, 168, 184, 203, 266, 267, 268, 270, 271, 275, 277, 282, 319, 345, 362, 410, 414, 415, 994, 1001], "cross_decomposit": [9, 1046, 1048, 1050, 1052, 1054, 1055], "cross_val_predict": 829, "cross_val_scor": [276, 830], "cross_valid": [415, 831], "cubic": 195, "cumul": 1005, "curat": 378, "curv": [62, 64, 195, 247, 254, 263, 269, 274, 279, 281, 409, 1000], "custom": [133, 270, 329, 338, 419, 1015, 1020], "cut": [266, 286], "cv": [267, 362], "cv_results_": 994, "cython": [380, 385, 387], "d": [415, 1008], "d2_absolute_error_scor": 725, "d2_log_loss_scor": 726, "d2_pinball_scor": 727, "d2_tweedie_scor": 728, "data": [43, 46, 48, 51, 55, 58, 61, 63, 70, 73, 81, 82, 83, 88, 90, 91, 96, 97, 99, 100, 102, 107, 109, 111, 113, 115, 116, 122, 123, 126, 127, 128, 136, 142, 145, 148, 150, 151, 155, 165, 168, 169, 177, 179, 183, 186, 189, 190, 192, 195, 200, 207, 208, 218, 242, 247, 254, 262, 267, 269, 273, 278, 279, 281, 282, 285, 295, 299, 304, 310, 312, 316, 317, 318, 328, 331, 342, 345, 348, 349, 354, 355, 362, 366, 368, 384, 391, 393, 411, 412, 415, 420, 1015, 1019, 1029], "dataconversionwarn": 576, "datadimensionalitywarn": 577, "datafram": [321, 328, 391, 1053], "dataiku": 1029, "datarobot": 1029, "dataset": [10, 42, 43, 44, 47, 52, 61, 62, 68, 79, 91, 95, 102, 115, 117, 118, 119, 121, 129, 135, 141, 143, 144, 155, 160, 171, 173, 175, 176, 178, 180, 184, 186, 187, 188, 194, 197, 199, 203, 214, 216, 223, 232, 234, 235, 241, 246, 251, 252, 266, 270, 278, 279, 286, 289, 291, 319, 335, 336, 339, 346, 353, 358, 371, 372, 373, 374, 375, 376, 384, 391, 421, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "davi": 411, "davies_bouldin_scor": 729, "dbscan": [82, 411, 422, 447], "dbscan_clust": 88, "dcg_score": 730, "deal": [41, 391], "debian": 397, "debug": 387, "debugg": 385, "decis": [135, 136, 143, 151, 156, 184, 246, 266, 286, 295, 327, 329, 336, 346, 356, 357, 358, 359, 360, 361, 391, 394, 410, 1021], "decisionboundarydisplai": 635, "decisiontre": 136, "decisiontreeclassifi": 916, "decisiontreeregressor": [323, 917], "decod": 419, "decompos": 416, "decomposit": [11, 114, 115, 120, 121, 138, 184, 375, 414, 416, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "decreas": [142, 189], "deep": 391, "default": [248, 299, 379], "default_tag": 941, "defin": [72, 81, 91, 100, 234, 267, 269, 270, 355, 1005], "definit": [232, 285, 310, 1012, 1046], "deflat": 115, "delai": 971, "demand": [43, 52], "demo": [58, 59, 73, 81, 82, 88, 91, 96, 98], "demonstr": [90, 276, 315, 331], "dendrogram": 76, "denois": [44, 124], "dens": 200, "densiti": [261, 296, 297, 305, 327, 417, 949, 1020], "densitymixin": 430, "depend": [188, 248, 252, 377, 1012, 1036, 1049, 1050], "deploi": 391, "deploy": 397, "deprec": [1, 248, 379, 942, 1046], "descent": [203, 222, 228, 1001, 1019], "descript": 186, "design": 176, "det": [269, 1005], "det_curv": 731, "detail": [997, 1019, 1020], "detcurvedisplai": 702, "detect": [48, 241, 251, 269, 298, 299, 1005, 1011, 1020], "determin": [112, 199, 413, 1001, 1005], "develop": [132, 133, 184, 248, 377, 380, 381, 382, 386, 387, 388, 994, 1031, 1052], "devianc": [148, 1005], "devic": 407, "diabet": [160, 252, 286, 376], "diagnost": 376, "dict": 419, "dict_learn": 549, "dict_learning_onlin": 550, "dictionari": [83, 121, 124, 130, 416], "dictionarylearn": 535, "dictvector": [355, 585], "did": 391, "diff": 387, "differ": [75, 79, 95, 109, 180, 188, 312, 315, 318, 339, 346, 381, 391, 402, 411, 1001], "digit": [68, 85, 91, 161, 235, 310, 331, 332, 376], "dimension": [104, 234, 237, 253, 301, 317, 354, 999, 1002, 1008, 1022], "direct": 231, "directli": 391, "dirichlet": [54, 416, 1004], "discount": 1005, "discov": 41, "discret": [151, 179, 313, 314, 1015], "discrimin": [69, 70, 999], "discriminant_analysi": [12, 1044, 1045, 1048, 1050, 1051, 1052, 1055], "discuss": 378, "disk": 55, "dispatch": 389, "displai": [124, 219, 242, 243, 253, 326, 327, 328, 387, 1033, 1052], "distanc": [27, 111, 329], "distance_metr": 766, "distancemetr": 703, "distort": 124, "distribut": [50, 232, 234, 305, 316, 374, 397, 1002, 1015], "diverg": 416, "divid": 325, "do": [384, 391], "document": [0, 47, 57, 184, 323, 324, 352, 353, 354, 379, 1024, 1025, 1028, 1032, 1036, 1039, 1040, 1043, 1044], "doe": 391, "domain": 1024, "donat": 0, "dot": [180, 421], "dotproduct": 618, "down": 384, "download": [55, 155, 183, 373], "drawback": 411, "drop": [144, 1055], "dtype": 328, "dummi": [13, 1005, 1044, 1045, 1046, 1049, 1050, 1054], "dummyclassifi": 555, "dummyregressor": 556, "dump_svmlight_fil": 490, "dure": 362, "d\u00b2": 1005, "each": [279, 284, 353], "earli": [145, 150, 222], "earlier": 1036, "eas": 380, "effect": [107, 150, 186, 239, 285, 312, 317, 334, 357], "effici": [326, 328, 388], "efficiencywarn": 578, "eigenfac": [45, 121], "eigenmap": 1002, "eigenvector": 55, "elast": [196, 202, 1001], "elasticnet": [199, 322, 650], "elasticnetcv": 651, "element": 393, "elimin": [167, 168, 420, 994], "ellipsoid": [70, 258], "ellipt": 1011, "ellipticenvelop": 472, "embed": [51, 85, 234, 235, 245, 302, 418, 1002], "emeritu": 0, "empir": [94, 112, 245, 413], "empirical_covari": 480, "empiricalcovari": 473, "enable_halving_search_cv": 583, "enable_iterative_imput": 584, "encod": [86, 144, 318, 319, 327, 1015, 1016], "enet_path": 685, "enforc": [1047, 1049], "engin": [43, 52, 189, 1024, 1029], "enhanc": [326, 394, 1024, 1039, 1040, 1041, 1042, 1043], "enrich": 328, "ensembl": [14, 134, 140, 143, 184, 418, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "enthought": 397, "entir": 391, "entri": 1018, "envelop": 1011, "environ": [367, 387, 405], "equival": 272, "error": [135, 139, 145, 147, 160, 194, 218, 269, 285, 387, 397, 1001, 1005], "establish": [97, 192], "estim": [41, 101, 108, 109, 110, 111, 112, 113, 132, 133, 138, 144, 146, 154, 177, 183, 184, 194, 217, 220, 243, 248, 250, 251, 261, 280, 289, 296, 297, 305, 321, 322, 323, 326, 328, 362, 381, 391, 392, 393, 399, 407, 412, 413, 415, 417, 418, 994, 995, 999, 1001, 1005, 1020, 1024, 1037, 1044, 1045, 1046], "estimate_bandwidth": 461, "estimator_html_repr": 948, "euclidean_dist": 767, "evalu": [52, 72, 91, 94, 112, 214, 251, 266, 273, 276, 285, 310, 318, 354, 392, 406, 408, 411, 415, 418, 994, 1000, 1005], "evernot": 1029, "exact": 416, "exampl": [42, 45, 48, 86, 92, 107, 117, 127, 133, 151, 178, 184, 210, 211, 218, 347, 350, 368, 384, 391, 402, 407, 410, 419, 421, 425, 428, 431, 434, 435, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 465, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 482, 485, 486, 487, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 508, 514, 515, 516, 517, 518, 519, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 588, 591, 592, 593, 594, 595, 597, 598, 601, 603, 604, 606, 608, 609, 610, 611, 612, 614, 615, 617, 618, 619, 621, 622, 623, 626, 627, 629, 631, 632, 634, 635, 636, 637, 638, 639, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 656, 657, 659, 660, 661, 662, 663, 666, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 688, 692, 693, 694, 695, 696, 697, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 713, 716, 717, 721, 722, 723, 731, 733, 736, 738, 739, 741, 742, 745, 746, 749, 750, 752, 753, 754, 756, 757, 759, 761, 765, 782, 783, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 861, 864, 865, 866, 867, 868, 869, 872, 873, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 894, 897, 901, 902, 904, 905, 906, 908, 911, 912, 913, 914, 915, 916, 917, 922, 923, 937, 947, 949, 956, 961, 962, 963, 964, 965, 978, 988, 1036], "except": [15, 388, 1048, 1052], "execut": [362, 391], "exercis": [159, 160, 161, 162, 184], "exhaust": 994, "exist": 379, "exp": [180, 421], "expans": 194, "expect": [188, 323, 1012], "experi": [0, 72, 378], "experiment": [16, 326, 383, 407, 1052], "explain": 1005, "explained_variance_scor": 732, "explicit": 246, "explor": 43, "exponenti": 620, "export": [40, 391], "export_graphviz": 920, "export_text": 921, "expsinesquar": 619, "extend": 1001, "extens": [385, 397], "extern": [373, 1023, 1036, 1045], "extract": [54, 106, 124, 232, 273, 354, 366, 368, 419], "extract_patches_2d": 588, "extrapol": 176, "extratreeclassifi": 918, "extratreeregressor": 919, "extratreesclassifi": 561, "extratreesregressor": 562, "extrem": [384, 418], "f": [164, 1005], "f1": 279, "f1_score": 733, "f_classif": 609, "f_regress": 610, "fa": [121, 128], "face": [45, 83, 121, 250, 374, 1029], "factor": [54, 121, 128, 131, 298, 299, 416, 1011], "factoranalysi": 536, "fail": 384, "failur": [186, 994], "fast_logdet": 950, "faster": [326, 418], "fastica": [121, 122, 123, 423, 537], "fbeta_scor": 734, "featur": [43, 52, 84, 87, 106, 126, 140, 142, 144, 148, 150, 152, 153, 163, 165, 167, 168, 169, 184, 189, 190, 192, 194, 208, 211, 232, 246, 252, 273, 310, 313, 314, 317, 318, 321, 323, 324, 345, 353, 354, 366, 368, 379, 383, 402, 412, 418, 419, 420, 995, 1013, 1015, 1022, 1039, 1040, 1041, 1042, 1043], "feature_extract": [17, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "feature_select": [18, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "featureagglomer": [411, 448], "featurehash": [355, 586], "featureunion": [412, 867], "fedora": 397, "fetch_20newsgroup": 491, "fetch_20newsgroups_vector": 492, "fetch_california_h": 493, "fetch_covtyp": 494, "fetch_fil": 495, "fetch_kddcup99": 496, "fetch_lfw_pair": 497, "fetch_lfw_peopl": 498, "fetch_olivetti_fac": 499, "fetch_openml": [326, 500], "fetch_rcv1": 501, "fetch_species_distribut": 502, "file": [55, 379, 387, 397, 419], "final": [90, 171], "find": 1008, "first": [48, 72], "fit": [29, 58, 63, 90, 122, 128, 142, 147, 148, 176, 194, 195, 196, 208, 211, 216, 220, 279, 291, 299, 304, 319, 348, 362, 381, 392, 402, 407, 418, 1007, 1011], "fitfailedwarn": 579, "fix": [72, 1036, 1039, 1040, 1041, 1042, 1043, 1049], "fixedthresholdclassifi": [329, 803], "flag": 387, "flexibl": [324, 995], "float64": 407, "fold": [387, 415], "footprint": 86, "forc": [994, 1008], "forecast": [52, 176], "forest": [139, 141, 142, 154, 189, 190, 251, 254, 328, 374, 418, 1011], "forg": 377, "format": [373, 384, 391, 1006], "formul": [408, 418, 999, 1008, 1019, 1020, 1021], "four": 99, "fowlk": 411, "fowlkes_mallows_scor": 735, "framework": 1024, "free": 178, "freebsd": 377, "freez": 391, "french": 214, "frequenc": 232, "frequent": 391, "frequentist": 272, "frobeniu": 416, "from": [17, 51, 124, 169, 189, 318, 321, 367, 373, 377, 391, 419, 1005, 1046], "fruit": 378, "fulli": 186, "function": [41, 49, 70, 180, 204, 218, 219, 224, 235, 267, 286, 323, 345, 355, 388, 415, 418, 421, 997, 1001, 1005, 1020, 1053], "functiontransform": 872, "fund": 0, "futur": 391, "futurewarn": 1046, "gain": [266, 1005], "galleri": [425, 428, 431, 434, 435, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 465, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 482, 485, 486, 487, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 508, 514, 515, 516, 517, 518, 519, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 585, 586, 588, 591, 592, 593, 594, 595, 597, 598, 601, 603, 604, 606, 608, 609, 610, 611, 612, 614, 615, 617, 618, 619, 621, 622, 623, 626, 627, 629, 631, 632, 634, 635, 636, 637, 638, 639, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 656, 657, 659, 660, 661, 662, 663, 666, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 688, 692, 693, 694, 695, 696, 697, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 713, 716, 717, 721, 722, 723, 731, 733, 736, 738, 739, 741, 742, 745, 746, 749, 750, 752, 753, 754, 756, 757, 759, 761, 765, 782, 783, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 861, 864, 865, 866, 867, 868, 869, 872, 873, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 894, 897, 901, 902, 904, 905, 906, 908, 911, 912, 913, 914, 915, 916, 917, 922, 923, 937, 947, 949, 956, 961, 962, 963, 964, 965, 978, 988], "gamma": [232, 327, 1005], "gammaregressor": 652, "gaussian": [61, 62, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 256, 257, 258, 261, 262, 263, 312, 421, 1004, 1007, 1015, 1017], "gaussian_process": [19, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "gaussianmixtur": 802, "gaussiannb": 846, "gaussianprocessclassifi": 614, "gaussianprocessregressor": 615, "gaussianrandomproject": 900, "gdb": 385, "gen_batch": 955, "gen_even_slic": 956, "gener": [10, 25, 52, 58, 61, 70, 73, 81, 82, 88, 90, 96, 97, 99, 100, 109, 111, 113, 119, 122, 123, 124, 142, 151, 165, 168, 171, 177, 178, 180, 184, 193, 194, 195, 199, 208, 214, 216, 247, 262, 269, 285, 299, 304, 310, 322, 331, 348, 349, 362, 375, 379, 393, 416, 418, 1001, 1015, 1025], "genericunivariateselect": 596, "german": 266, "get": [362, 387, 391, 392], "get_config": 630, "get_data_hom": 503, "get_feature_names_out": 325, "get_param": 381, "get_routing_for_object": 963, "get_scor": 736, "get_scorer_nam": 737, "get_tag": 957, "git": 379, "github": 379, "gitter": 1028, "glm": 25, "glossari": 393, "gmm": [259, 260], "goal": 1025, "good": [379, 384], "govern": [0, 394], "gpc": [172, 173, 174, 175, 421], "gperftool": 385, "gpr": [176, 177, 421], "gprof": 385, "gpu": 391, "gradient": [43, 141, 144, 145, 146, 147, 148, 149, 150, 188, 214, 222, 228, 321, 322, 324, 326, 327, 418, 1001, 1019], "gradientboostingclassifi": [418, 563], "gradientboostingregressor": [418, 564], "gram": 196, "graph": [41, 51, 321, 388, 391, 411, 419], "graphic": [391, 1010], "graphical_lasso": 481, "graphicallasso": 474, "graphicallassocv": 475, "greek": 80, "grid": [253, 270, 272, 280, 283, 994], "grid_to_graph": 589, "gridsearchcv": [104, 160, 276, 804], "ground": [72, 194], "group": [325, 327, 415, 1029], "groupkfold": 805, "groupshufflesplit": 806, "grow": 72, "guid": [382, 1031], "guidelin": [379, 381], "halv": [283, 284, 323, 994], "halvinggridsearchcv": 807, "halvingrandomsearchcv": 808, "ham": 1005, "hamming_loss": 738, "hand": 68, "handl": [41, 190, 995], "handwritten": [91, 235, 376], "harabasz": 411, "hard": 418, "has_fit_paramet": 992, "hash": [153, 388, 419], "hashingvector": [354, 593], "haversine_dist": 768, "hdbscan": [88, 327, 411, 449], "help": [378, 391], "helper": [49, 180, 235, 388], "here": 361, "hessian": 1002, "heterogen": [102, 412], "hierarch": [76, 81, 95, 100, 327, 411], "hierarchi": 411, "higher": 367, "highlight": [184, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 1036, 1039, 1040, 1043, 1044], "hing": 1005, "hinge_loss": 739, "histgradientboost": [323, 328], "histgradientboostingclassifi": [418, 565], "histgradientboostingregressor": [325, 566], "histogram": [141, 150, 322, 324, 326, 417, 418], "histori": [0, 1034], "hmm": 391, "hoc": 286, "hole": 238, "home": 272, "homebrew": 377, "homogen": 411, "homogeneity_completeness_v_measur": 740, "homogeneity_scor": 741, "hot": 144, "hour": 52, "hourli": 186, "hous": [144, 251, 374], "how": [160, 362, 379, 385, 391], "howaboutw": 1029, "html": [243, 381], "huber": 1001, "huberregressor": [197, 653], "hug": 1029, "hyper": [29, 147, 270, 323, 994], "hyperparamet": [88, 176, 177, 273, 280, 289, 621], "hyperplan": [226, 343, 344], "i": [329, 361, 384, 391, 415, 1029], "ic": [188, 1012], "ica": [122, 416], "id3": 1021, "idf": 419, "illustr": [104, 175, 180, 302, 421], "imag": [17, 44, 81, 83, 86, 99, 124, 373, 391, 419], "img_to_graph": 590, "impact": [43, 94, 285, 1051, 1052, 1053, 1054, 1055], "implement": [133, 200, 391, 1005, 1008, 1019, 1020], "import": [142, 148, 169, 189, 190, 246, 289, 317, 321, 410, 418, 1013], "improv": [322, 323, 324, 325, 326, 328, 329, 378, 379, 1039, 1040], "impur": [142, 189, 357, 1013], "imput": [20, 181, 182, 183, 184, 321, 329, 995, 1015, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "includ": 391, "inclus": 391, "incom": 186, "inconsist": 362, "inconsistentversionwarn": 580, "incr_mean_variance_axi": 979, "increment": [125, 368, 416], "incrementalpca": 538, "independ": [121, 416], "index": [411, 959], "indic": 267, "individu": [158, 188, 323, 1012], "induct": 89, "infer": 186, "influenc": [46, 49, 366], "infonea": 1029, "inform": [164, 183, 201, 203, 383, 411, 994, 1001], "infrastructur": 0, "infrequ": [325, 327, 1015], "init": 381, "initi": [92, 94, 260], "inplace_column_scal": 980, "inplace_csr_column_scal": 981, "inplace_csr_row_normalize_l1": 986, "inplace_csr_row_normalize_l2": 987, "inplace_row_scal": 982, "inplace_swap_column": 983, "inplace_swap_row": 984, "input": [41, 366, 381, 407, 411, 1015], "inputtag": 925, "inria": 1029, "inspect": [21, 184, 185, 396, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "instal": [377, 397], "instanc": [362, 368], "instanti": 381, "instead": 266, "instruct": 377, "insur": 232, "integr": 379, "intel": 397, "interact": [43, 188, 326, 418], "interfac": [27, 402], "intern": [319, 410], "internet": 51, "interoper": 1024, "interpol": 215, "interpret": [176, 187, 218, 251, 291, 416, 418], "interv": 147, "introduc": 255, "introduct": 1002, "introductori": 178, "invari": [88, 275], "invers": [113, 413, 1017], "io": 405, "iri": [118, 127, 129, 143, 173, 223, 336, 339, 358, 376, 421], "is_classifi": 437, "is_cluster": 438, "is_multilabel": 966, "is_regressor": 439, "iso": [174, 279], "isol": 1011, "isolationforest": [151, 567], "isomap": [234, 235, 692, 1002], "isoton": [22, 244, 409, 996, 1044, 1045, 1046, 1048, 1050, 1051], "isotonic_regress": 641, "isotonicregress": 639, "issu": [378, 379, 387], "iter": [183, 284, 415], "iterativeimput": [182, 631, 995], "j": 1029, "jaccard": 1005, "jaccard_scor": 742, "job": 391, "joblib": [367, 385, 405], "johnson": [245, 1017], "johnson_lindenstrauss_min_dim": 902, "joint": 208, "k": [78, 90, 91, 92, 94, 97, 100, 115, 295, 317, 354, 411, 415, 1005, 1008, 1015], "k_mean": 462, "kappa": 1005, "kbinsdiscret": [313, 315, 873], "kcachegrind": 385, "kddcup": 374, "kddcup99": 251, "kdtree": [849, 1008], "keep": 995, "kei": 405, "kernel": [19, 43, 44, 126, 171, 176, 177, 179, 180, 184, 191, 192, 246, 247, 296, 297, 305, 323, 338, 341, 346, 348, 416, 417, 421, 622, 997, 998, 1003, 1015, 1020], "kernel_approxim": [23, 1046, 1048, 1049, 1050, 1051, 1052], "kernel_metr": 769, "kernel_ridg": [24, 1053], "kernelcenter": 874, "kerneldens": 853, "kernelpca": [126, 539], "kernelridg": 647, "keyword": [324, 1047, 1049], "kfold": 809, "kmean": [93, 97, 322, 450], "kmeans_plusplu": 463, "kneighbors_graph": 861, "kneighborsclassifi": 850, "kneighborsregressor": 851, "kneighborstransform": 852, "knn": [183, 321], "knnimput": 632, "knowledg": 380, "known": [1044, 1045], "kpca": 416, "l": 195, "l1": [53, 199, 205, 207, 230, 349, 420], "l1_min_c": 915, "l2": [218, 349], "label": [41, 72, 279, 331, 332, 333, 374, 375, 411, 415, 418, 1005, 1016, 1018], "label_binar": 892, "label_ranking_average_precision_scor": 743, "label_ranking_loss": 744, "labelbinar": [875, 1016], "labelencod": 876, "labelpropag": 903, "labelspread": 904, "lag": 52, "laplacian": 1003, "laplacian_kernel": 770, "lar": [202, 654, 1001], "larg": 419, "lars_path": 686, "lars_path_gram": 687, "larscv": 655, "lasso": [53, 199, 200, 201, 202, 203, 208, 322, 656, 1001], "lasso_path": 688, "lassocv": 657, "lassolar": 658, "lassolars": 660, "lassolarscv": 659, "latenc": [49, 366], "latent": [54, 115, 416], "latentdirichletalloc": 540, "latest": 397, "layer": [188, 307, 1009], "lda": [70, 129, 416, 999], "leakag": 362, "learn": [0, 41, 44, 51, 83, 121, 124, 170, 184, 186, 187, 188, 192, 233, 234, 235, 236, 247, 248, 266, 267, 274, 302, 308, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 365, 366, 368, 375, 377, 379, 380, 381, 383, 384, 391, 394, 397, 416, 418, 1000, 1002, 1010, 1018, 1024, 1025, 1027, 1029, 1030, 1032], "learner": [135, 418], "learning_curv": 832, "learningcurvedisplai": 810, "least": [116, 147, 203, 209, 212, 1001], "leav": [357, 415, 1001], "leaveonegroupout": 811, "leaveoneout": 812, "leavepgroupsout": 813, "leavepout": 814, "ledoit": [69, 110, 413], "ledoit_wolf": 482, "ledoit_wolf_shrinkag": 483, "ledoitwolf": [109, 476], "lemma": 1017, "length": [151, 397], "lesson": [186, 187], "level": [176, 177, 367, 411, 418], "liabil": 214, "librari": [366, 367], "libsvm": 373, "likelihood": [109, 194, 195, 275, 1005, 1010], "limit": [144, 171, 366, 397, 405, 419], "lindenstrauss": [245, 1017], "line": [160, 174], "linear": [25, 43, 62, 69, 70, 147, 171, 184, 187, 193, 194, 210, 214, 217, 220, 234, 235, 246, 322, 341, 346, 348, 366, 388, 391, 999, 1001, 1002, 1003, 1015], "linear_kernel": 771, "linear_model": [25, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "lineardiscriminantanalysi": [326, 553], "linearregress": [216, 661], "linearsvc": [340, 908], "linearsvr": 909, "link": [366, 1005], "linkag": [95, 411], "linnerrud": 376, "linux": [377, 391, 397], "list": [72, 383, 1028], "loa": 176, "load": [44, 46, 55, 83, 91, 118, 141, 144, 148, 160, 169, 189, 207, 232, 235, 242, 246, 254, 273, 281, 282, 291, 295, 317, 318, 342, 345, 353, 354, 355, 372, 373, 384, 391, 419], "load_breast_canc": 504, "load_diabet": 505, "load_digit": 506, "load_fil": 507, "load_iri": 508, "load_linnerud": 509, "load_sample_imag": [510, 511], "load_svmlight_fil": [512, 513], "load_win": 514, "loader": 10, "local": [234, 235, 298, 299, 1002, 1011], "locally_linear_embed": 697, "locallylinearembed": 693, "localoutlierfactor": 854, "lock": [379, 387], "lof": [298, 299], "log": [194, 195, 1005], "log_loss": 745, "logarithm": 1005, "logist": [105, 198, 204, 205, 206, 207, 229, 230, 1001], "logisticregress": [291, 662], "logisticregressioncv": 663, "loo": 415, "look": [52, 247, 348], "loss": [150, 214, 224, 322, 325, 327, 418, 1005, 1053], "lot": 391, "love": 1029, "low": [411, 418, 420], "lower": 367, "lpo": 415, "lsa": 354, "mac": 397, "machin": [170, 184, 186, 187, 188, 310, 337, 387, 1010, 1020], "machinali": 1029, "maco": 377, "macport": 397, "macro": 281, "mahalanobi": 111, "mail": 1028, "main": [47, 214], "maintain": [0, 379, 383, 405], "major": [418, 1044, 1045], "make": [155, 158, 183, 379, 394], "make_biclust": 515, "make_blob": [384, 516], "make_checkerboard": 517, "make_circl": 518, "make_classif": [384, 519], "make_column_selector": 469, "make_column_transform": 470, "make_friedman1": 520, "make_friedman2": 521, "make_friedman3": 522, "make_gaussian_quantil": 523, "make_hastie_10_2": 524, "make_low_rank_matrix": 525, "make_moon": 526, "make_multilabel_classif": 527, "make_pipelin": 869, "make_regress": [384, 528], "make_s_curv": 529, "make_scor": 746, "make_sparse_coded_sign": 530, "make_sparse_spd_matrix": 531, "make_sparse_uncorrel": 532, "make_spd_matrix": 533, "make_swiss_rol": 534, "make_union": 870, "mallow": 411, "manag": [367, 397], "manhattan_dist": 772, "mani": [267, 326, 367, 391, 1053, 1054, 1055], "manifold": [26, 184, 233, 234, 235, 236, 375, 1002, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "manual": [266, 410], "map": [246, 316, 1015], "mar": 1029, "margin": [194, 195, 226, 343, 347], "mark": 995, "markdown": 384, "marker": 379, "market": 51, "match": [213, 1001], "matern": 623, "mathemat": [41, 408, 418, 997, 999, 1008, 1012, 1019, 1020, 1021], "matric": [41, 388, 1015], "matrix": [54, 55, 179, 196, 265, 411, 416, 1005], "matter": 187, "matthew": 1005, "matthews_corrcoef": 747, "mat\u00e9rn": [180, 421], "max": [109, 1005], "max_error": 748, "maxabs_scal": 893, "maxabsscal": [312, 877], "maximum": [226, 343, 1010], "md": [694, 1002], "mdi": 189, "mean": [78, 90, 91, 92, 94, 96, 97, 142, 183, 189, 218, 354, 411, 1005, 1015], "mean_absolute_error": 749, "mean_absolute_percentage_error": 750, "mean_gamma_devi": 751, "mean_pinball_loss": 752, "mean_poisson_devi": 753, "mean_shift": 464, "mean_squared_error": 754, "mean_squared_log_error": 755, "mean_tweedie_devi": 756, "mean_variance_axi": 985, "meanshift": [96, 451], "measur": [155, 275, 411, 1005], "media": 1028, "median": [1001, 1005], "median_absolute_error": 757, "member": 378, "memori": [86, 328, 366, 385, 387], "merg": 383, "meson": [387, 1054], "messag": [272, 379], "meta": [41, 154, 248, 289, 323, 407, 418], "metadata": [41, 248, 327, 328, 353, 393, 402, 1053, 1054, 1055], "metadatarequest": 960, "metadatarout": 961, "metaestimatormixin": 431, "method": [95, 106, 115, 134, 171, 184, 234, 236, 260, 288, 290, 393, 405, 411, 997, 1011, 1012], "methodmap": 962, "metric": [27, 72, 75, 147, 266, 276, 407, 411, 415, 994, 1003, 1005, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "micro": [279, 281], "min_cluster_s": 88, "min_po": 931, "min_sampl": 88, "mincovdet": 477, "mini": [411, 416], "minibatchdictionarylearn": 541, "minibatchkmean": [77, 97, 121, 452], "minibatchnmf": [325, 542], "minibatchsparsepca": [121, 416, 543], "minim": [384, 1021, 1049, 1050], "minimum": [112, 413], "minmax_scal": 894, "minmaxscal": [312, 878], "misc": 1036, "miscellan": [25, 184, 240, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "mislead": 1013, "miss": [150, 181, 182, 183, 184, 321, 327, 328, 418, 995, 1015, 1021], "missingind": 633, "mix": 103, "mixin": 381, "mixtur": [28, 184, 256, 257, 258, 261, 262, 263, 1004, 1044, 1045, 1049, 1050, 1052, 1054], "mlp": 309, "mlpclassifi": [308, 865], "mlpregressor": 866, "mnist": [230, 309], "mode": [115, 366], "model": [25, 27, 29, 43, 46, 50, 52, 90, 107, 115, 122, 128, 141, 142, 144, 145, 148, 151, 168, 169, 171, 176, 184, 187, 188, 189, 192, 193, 194, 199, 201, 203, 208, 214, 217, 232, 242, 247, 251, 252, 256, 258, 262, 263, 264, 266, 271, 272, 274, 279, 285, 291, 299, 304, 310, 317, 322, 324, 328, 346, 348, 353, 366, 381, 391, 392, 394, 405, 406, 415, 994, 1000, 1001, 1004, 1005, 1007, 1009, 1010, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "model_select": [29, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "modifi": 1002, "modul": [1036, 1044, 1045, 1051, 1052, 1053, 1054, 1055], "mona": 176, "monitor": 379, "monoton": [150, 152, 328, 418], "more": [324, 391, 1009], "morgan": 1029, "most": 331, "motor": 214, "mp": 407, "much": 160, "multi": [25, 88, 135, 154, 188, 208, 223, 237, 250, 276, 279, 307, 360, 385, 1001, 1002, 1005, 1009, 1020, 1021], "multiclass": [30, 41, 184, 229, 281, 288, 289, 321, 388, 409, 1005, 1006, 1045, 1048, 1049, 1050], "multicollinear": 190, "multidimension": 234, "multilabel": [27, 119, 249, 291, 375, 388, 1005, 1006], "multilabel_confusion_matrix": 758, "multilabelbinar": [879, 1016], "multinomi": [206, 230, 1001, 1007], "multinomialnb": 847, "multioutput": [31, 184, 290, 1006, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054], "multioutputclassifi": [840, 1006], "multioutputregressor": [841, 1006], "multipl": [106, 253, 276, 362, 386, 415, 994, 995, 1005, 1044, 1045], "multitaskelasticnet": 664, "multitaskelasticnetcv": 665, "multitasklasso": 666, "multitasklassocv": 667, "multivari": [115, 995], "murmurhash3_32": 969, "mutual": [164, 411], "mutual_info_classif": 611, "mutual_info_regress": 612, "mutual_info_scor": 759, "my": 391, "n_featur": 49, "n_job": 391, "naiv": [43, 52, 61, 62, 1007], "naive_bay": [32, 1044, 1046, 1047, 1048, 1049, 1051, 1052], "name": [152, 324, 391, 412], "nan": 995, "nan_euclidean_dist": 773, "nativ": [144, 318, 321, 323, 328], "ndcg_score": 760, "nearest": [100, 184, 292, 293, 294, 295, 300, 303, 304, 321, 995, 1008], "nearestcentroid": 855, "nearestneighbor": 856, "necessari": 384, "need": 391, "neg": [54, 121, 169, 209, 416, 1001], "neighbor": [33, 100, 184, 234, 292, 293, 294, 295, 300, 304, 317, 321, 995, 1002, 1008, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "neighborhood": [300, 301, 302, 1008], "neighborhoodcomponentsanalysi": 857, "nest": [277, 412], "net": [196, 202, 1001], "netbsd": 397, "network": [184, 188, 306, 1009, 1010], "neural": [184, 188, 306, 1009, 1010], "neural_network": [34, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "new": [321, 323, 324, 326, 327, 379, 391, 1023, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "newsgroup": [102, 353, 374], "next": [52, 392], "nightli": 377, "nmf": [121, 325, 416, 544], "nnmf": 416, "nois": [177, 178, 195], "noisi": [124, 178, 218], "non": [43, 54, 121, 147, 209, 214, 218, 234, 277, 329, 341, 348, 416, 1001, 1015], "non_negative_factor": 551, "none": 362, "norm": 416, "normal": [69, 192, 214, 312, 316, 880, 895, 1005, 1015], "normalized_mutual_info_scor": 761, "note": [368, 407, 410, 415], "notfittederror": 581, "novelti": [298, 1011, 1020], "now": [321, 324, 1046], "number": [72, 93, 144, 150, 168, 284, 366, 381, 995], "numer": [187, 329, 367, 381], "numpi": [367, 384], "nusvc": 910, "nusvr": 911, "nystroem": [643, 997], "oa": [69, 109, 110, 424, 478], "object": [41, 242, 267, 381, 391, 994, 1005, 1033], "observ": 186, "obtain": [391, 415], "off": [266, 286, 1001], "offici": 1055, "okcupid": 1029, "older": 1036, "olivetti": 374, "omp": 1001, "one": [116, 144, 252, 1001, 1005], "oneclasssvm": 912, "onehotencod": [325, 881], "onetoonefeaturemixin": 432, "onevsoneclassifi": [836, 1006], "onevsrestclassifi": [291, 837, 1006], "onli": [211, 231, 1047, 1049], "onlin": [83, 221, 324, 325, 1019], "onnx": 405, "oob": 139, "openml": [44, 318, 321, 373], "openmp": [367, 380], "oper": [41, 281, 282, 378, 388, 421, 1005], "optic": [98, 376, 411, 453], "optim": [29, 41, 385, 994], "optimis": 177, "option": [381, 410], "oracl": 413, "ordin": 144, "ordinalencod": [327, 882], "ordinari": [212, 1001], "org": [373, 383, 1029], "origin": [86, 126, 278, 302, 312], "orthogon": [213, 1001], "orthogonal_mp": 689, "orthogonal_mp_gram": 690, "orthogonalmatchingpursuit": 668, "orthogonalmatchingpursuitcv": 669, "osx": [391, 397], "other": [318, 373, 391, 418, 1024, 1036], "otto": 1029, "our": [91, 267, 270, 286, 379], "out": [47, 146, 368, 387, 415, 994, 1001, 1007], "outdat": 387, "outlier": [25, 48, 197, 231, 241, 251, 298, 299, 312, 1001, 1011, 1015], "outliermixin": 433, "outlin": 1013, "output": [154, 250, 312, 326, 328, 360, 1021], "outputcodeclassifi": [838, 1006], "over": 253, "overfit": 287, "overhead": 366, "oversubscript": 367, "overview": [289, 386, 405, 411, 1011], "ovo": 281, "ovr": 281, "own": [381, 391, 1005], "p": [415, 1029], "packag": [246, 1024, 1048], "pair": 411, "pair_confusion_matrix": 719, "paired_cosine_dist": 774, "paired_dist": 775, "paired_euclidean_dist": 776, "paired_manhattan_dist": 777, "pairwis": [27, 43, 272, 329, 1003], "pairwise_dist": 782, "pairwise_distances_argmin": 783, "pairwise_distances_argmin_min": 784, "pairwise_distances_chunk": 785, "pairwise_kernel": 778, "pairwisekernel": 624, "panda": [326, 384, 391], "parallel": [41, 367, 385, 411, 418, 970, 994], "parallel_backend": 972, "paramet": [29, 41, 46, 109, 147, 270, 285, 323, 342, 349, 379, 381, 392, 393, 412, 418, 994, 1001, 1005, 1020], "parametergrid": 815, "parametersampl": 816, "parametr": 1010, "parametrize_with_check": 947, "pariba": 1029, "paristech": 1029, "pariti": 97, "parser": [326, 373], "part": [83, 420], "parti": [214, 248, 397], "partial": [116, 186, 188, 252, 1012], "partial_depend": 637, "partialdependencedisplai": 636, "partit": 192, "passiv": 1001, "passiveaggressiveclassifi": 670, "passiveaggressiveregressor": 671, "past": 0, "patch": [124, 419], "patchextractor": 587, "path": [151, 202, 207, 219, 361, 397], "pattern": 131, "pca": [44, 91, 105, 118, 121, 122, 125, 126, 127, 128, 129, 317, 328, 329, 416, 545, 1022], "pdp": 188, "peerindex": 1029, "penalti": [205, 225, 349], "peopl": [0, 391, 1036, 1037, 1038, 1039], "per": 354, "percentag": 1005, "percentil": 345, "perceptron": [188, 307, 672, 1001, 1009], "perform": [72, 78, 275, 317, 323, 325, 329, 331, 354, 366, 379, 380, 411, 415], "period": [43, 215], "permiss": 391, "permut": [142, 189, 190, 278, 321, 415, 1013], "permutation_import": 638, "permutation_test_scor": 833, "perplex": 239, "persist": 405, "phimeca": 1029, "pickl": 405, "pictur": 80, "pinbal": 1005, "pipelin": [35, 101, 102, 104, 105, 155, 166, 184, 187, 243, 248, 253, 273, 318, 345, 381, 391, 392, 412, 420, 868, 1022, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "pitfal": [187, 362], "pl": 115, "plai": 345, "plan": 391, "plant": 376, "platform": [377, 387, 397], "plot": [21, 27, 40, 46, 47, 49, 58, 61, 66, 70, 73, 76, 81, 82, 83, 90, 96, 97, 99, 100, 109, 113, 115, 118, 119, 122, 123, 136, 141, 143, 148, 151, 155, 156, 157, 158, 160, 168, 183, 188, 194, 195, 199, 206, 207, 208, 218, 219, 223, 235, 242, 246, 251, 252, 254, 262, 268, 269, 274, 276, 279, 281, 291, 299, 310, 318, 321, 323, 324, 331, 339, 340, 345, 346, 353, 358, 386, 1000, 1012, 1033], "plot_tre": 922, "pls1": 115, "pls2": 115, "plscanon": [414, 486], "plsregress": [414, 487], "plssvd": [414, 488], "point": [123, 266, 286, 302, 405], "poisson": [214, 232, 322, 323, 1005], "poissonregressor": 673, "polar": [52, 328], "polici": 379, "polynomi": [43, 192, 194, 195, 215, 346, 997, 1001, 1003, 1015], "polynomial_kernel": 779, "polynomialcountsketch": [323, 644], "polynomialfeatur": 883, "posit": [121, 324], "possibl": [90, 384], "post": [29, 266, 275, 286, 357, 410], "post1": 1046, "posterior": 180, "power": [116, 214], "power_transform": 896, "powertransform": [312, 884], "pr": 378, "practic": [272, 362, 380, 384, 1002, 1009, 1019, 1020, 1021], "pre": [275, 362, 392], "precis": [279, 1005], "precision_recall_curv": 786, "precision_recall_fscore_support": 787, "precision_scor": 788, "precisionrecalldisplai": [242, 704], "precomput": [130, 196, 321, 416], "predefin": [415, 1005], "predefinedsplit": 817, "predict": [43, 49, 52, 61, 116, 136, 147, 158, 172, 186, 195, 214, 247, 266, 268, 279, 331, 366, 391, 392, 410, 415, 421, 1005, 1016], "predictionerrordisplai": 705, "predictor": 155, "premium": 232, "prepar": [121, 136, 145, 150, 192, 234, 281, 282, 317, 342], "preprocess": [36, 148, 155, 184, 187, 188, 251, 253, 311, 355, 362, 391, 1015, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "preprocessor": 188, "preserv": 387, "preval": 275, "princip": [55, 116, 416, 1022], "prior": [53, 180, 257], "privat": 1053, "probabilist": [128, 172, 416, 421], "probabl": [61, 62, 63, 66, 157, 174, 409, 418, 1020], "problem": [187, 266, 416, 1020, 1021], "process": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 187, 362, 394, 421, 1004], "process_rout": 964, "processor": 392, "product": [180, 232, 387, 391, 405, 421, 625], "profil": 385, "project": [0, 116, 126, 129, 245, 381, 391, 1017, 1022, 1024], "pronounc": 391, "propag": [51, 73, 331, 332, 333, 411, 1018], "proper": [52, 176], "properti": 393, "propos": 394, "provid": 384, "prune": [321, 357, 1021], "public": 1046, "publica": 1029, "pull": [379, 383, 387, 391], "pure": 232, "purpos": [218, 355, 1025], "pursuit": [213, 1001], "pypi": [391, 1055], "pytest": 387, "python": [246, 367, 385, 1023, 1024], "pytorch": 407, "qda": [70, 999], "quadrat": [70, 180, 421, 999], "quadraticdiscriminantanalysi": 554, "qualit": [43, 52], "qualiti": [354, 1005], "quantifi": [354, 1005], "quantil": [52, 147, 150, 216, 324, 325, 1001], "quantile_transform": 897, "quantileregressor": [216, 674], "quantiletransform": [312, 885], "quantiz": 86, "question": [391, 1028], "r2_score": 789, "r_regress": 613, "radial": [180, 421, 997], "radius_neighbors_graph": 862, "radiusneighborsclassifi": 858, "radiusneighborsregressor": 859, "radiusneighborstransform": 860, "rand": 411, "rand_scor": 790, "random": [41, 55, 121, 139, 141, 153, 154, 189, 190, 245, 254, 278, 280, 328, 362, 381, 388, 415, 416, 418, 994, 1001, 1017, 1022], "random_project": [37, 1050], "random_st": 391, "randomforestclassifi": 568, "randomforestregressor": 569, "randomized_range_find": 951, "randomized_svd": 952, "randomizedsearchcv": 818, "randomli": 119, "randomst": 362, "randomtreesembed": 570, "rang": 1015, "rangespan": 1029, "rank": [27, 214, 1005], "ransac": [217, 1001], "ransacregressor": 675, "rate": 418, "ratio": [275, 1005], "ration": [180, 421], "rationalquadrat": 627, "rbf": [246, 341, 342, 346, 421, 626, 1003, 1020], "rbf_kernel": 780, "rbfsampler": 645, "rcv1": 374, "reachabl": 411, "read": 379, "real": [42, 48, 107, 184, 374], "recal": [279, 1005], "recall_scor": 791, "receiv": [281, 282, 1005], "recent": 1, "recogn": 68, "recognit": [45, 374, 376], "recommend": [362, 1024], "reconstruct": [44, 53, 124], "reconstruct_from_patches_2d": 591, "recov": 194, "recurs": [167, 168, 420], "redirect": 55, "reduc": [91, 366], "reduct": [104, 234, 238, 253, 301, 317, 354, 999, 1008, 1022], "refer": [2, 50, 62, 64, 112, 124, 138, 192, 199, 289, 305, 383, 421, 995], "refit": [266, 270], "regard": [266, 410], "region": [80, 272], "register_parallel_backend": 974, "regress": [25, 27, 43, 52, 105, 107, 115, 116, 136, 147, 148, 158, 171, 176, 177, 178, 179, 194, 195, 198, 203, 205, 206, 207, 210, 212, 214, 216, 229, 231, 232, 244, 247, 304, 348, 359, 360, 375, 412, 421, 996, 998, 1001, 1005, 1006, 1008, 1009, 1019, 1020, 1021], "regressor": [25, 49, 136, 147, 194, 218, 319, 321, 324, 418], "regressorchain": [842, 1006], "regressormixin": 434, "regressortag": 926, "regular": [78, 109, 149, 187, 207, 218, 219, 285, 307, 349, 1001, 1009], "reinforc": 391, "relat": [43, 47, 1013, 1024, 1043], "releas": [184, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 383, 397, 1034], "relev": [111, 199, 1001], "remark": [43, 90, 238, 245], "remot": 387, "remov": [391, 420, 1015, 1036], "repeat": [362, 412, 415], "repeatedkfold": 819, "repeatedstratifiedkfold": 820, "replac": 183, "repli": 387, "replic": 405, "report": [379, 384, 1005], "repositori": 373, "represent": [118, 188, 243, 322, 366, 381, 419], "reproduc": [362, 384], "request": [379, 383, 387, 391], "resampl": 975, "rescal": 317, "reshap": 366, "resourc": [284, 367, 379, 1023, 1028], "respect": 275, "respons": [115, 394], "rest": [206, 281], "restart": 385, "restrict": [310, 1010], "result": [46, 47, 58, 64, 73, 81, 82, 83, 90, 91, 96, 97, 100, 109, 111, 113, 122, 123, 136, 141, 155, 158, 183, 192, 199, 219, 247, 251, 276, 291, 299, 318, 348, 354, 362, 994], "retriev": [51, 321], "return": 407, "reuter": 47, "review": [378, 379, 387], "rfe": 597, "rfecv": 598, "rich": [243, 322], "ridg": [171, 195, 197, 212, 218, 219, 247, 319, 676, 998, 1001], "ridge_regress": 691, "ridgeclassifi": 678, "ridgeclassifiercv": 679, "ridgecv": 677, "right": 399, "roadmap": 1025, "robust": [25, 88, 111, 112, 194, 217, 220, 362, 413, 994, 1001], "robust_scal": 898, "robustscal": [312, 886], "roc": [254, 269, 281, 282, 321, 1005], "roc_auc_scor": 792, "roc_curv": 793, "roccurvedisplai": [242, 706], "role": 394, "roll": [238, 381], "root_mean_squared_error": 794, "root_mean_squared_log_error": 795, "rotat": 131, "rout": [41, 248, 327, 328, 393, 402, 1053, 1054, 1055], "routin": [47, 367, 388], "rule": 1005, "run": [46, 91, 276], "runtim": [328, 377], "r\u00b2": 1005, "sa": 251, "safe_mask": 976, "safe_sparse_dot": 953, "safe_sqr": 977, "sampl": [10, 41, 58, 73, 88, 96, 109, 122, 123, 165, 196, 227, 247, 273, 285, 304, 322, 348, 351, 373, 388, 393, 418, 1001], "sample_without_replac": 973, "saniti": 387, "save": 391, "scalabl": [192, 274, 322], "scale": [88, 187, 234, 237, 317, 349, 368, 899, 1002, 1011, 1015, 1022], "scaler": 312, "scatter": [115, 118], "scenario": 1001, "scientif": 1023, "scikit": [0, 41, 248, 267, 321, 322, 323, 324, 325, 326, 327, 328, 329, 365, 366, 377, 380, 381, 383, 384, 391, 394, 397, 1024, 1025, 1029, 1032], "scipi": [367, 1053], "score": [55, 115, 141, 160, 168, 183, 194, 262, 271, 278, 279, 345, 402, 411, 415, 1000, 1005, 1020], "script": 384, "search": [253, 270, 272, 280, 283, 289, 392, 994], "second": [48, 72], "secur": [405, 1054], "segment": [80, 99], "select": [25, 27, 87, 93, 104, 128, 160, 163, 165, 168, 169, 184, 201, 203, 208, 262, 264, 345, 391, 402, 406, 415, 420, 994, 1001, 1042], "selectfdr": 599, "selectfpr": 600, "selectfrommodel": [420, 601], "selectfw": 602, "selectkbest": 603, "selectormixin": 605, "selectpercentil": 604, "self": [323, 334, 1018], "selftrainingclassifi": 905, "semant": 416, "semi": [184, 330, 331, 335, 336, 1018], "semi_supervis": [38, 1046, 1047, 1048, 1052, 1055], "sen": [231, 1001], "sens": 53, "sensit": 266, "separ": [122, 226, 343, 344], "sequenc": [179, 391], "sequenti": [169, 420], "sequentialfeatureselector": [323, 606], "seri": [52, 208, 415], "serv": 405, "set": [48, 107, 109, 127, 155, 183, 218, 266, 279, 329, 342, 357, 391, 410, 415, 1001], "set_config": 906, "set_output": [255, 326, 328, 381], "set_param": 381, "setuptool": 1055, "sever": [232, 236], "sgd": [223, 224, 225, 226, 227, 1001, 1019], "sgdclassifi": 680, "sgdoneclasssvm": 681, "sgdregressor": 682, "shape": 239, "share": [43, 52, 188], "shift": [96, 411], "should": 391, "show": [160, 281], "show_vers": 907, "shrinkag": [109, 413, 418, 999], "shrunk": 413, "shrunk_covari": 484, "shrunkcovari": 479, "shrunken": 1008, "shuffl": [415, 978], "shufflesplit": 821, "sigmoid": [346, 409, 1003], "sigmoid_kernel": 781, "signal": [199, 416], "signific": 278, "silhouett": [93, 411], "silhouette_sampl": 796, "silhouette_scor": 797, "similar": [179, 1003, 1005], "simpl": [133, 171, 248, 297, 385], "simpleimput": [329, 634], "simul": 186, "sine": [180, 263, 421], "singl": [138, 155, 232, 242, 375, 411, 995], "single_source_shortest_path_length": 958, "singular": [55, 416], "sinusoid": 195, "size": 418, "sketch": 997, "skew": 997, "skewedchi2sampl": 646, "sklearn": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "sklearn_assume_finit": 367, "sklearn_build_enable_debug_symbol": 367, "sklearn_enable_debug_cython_direct": 367, "sklearn_pairwise_dist_chunk_s": 367, "sklearn_run_float32_test": 367, "sklearn_se": 367, "sklearn_skip_network_test": 367, "sklearn_tests_global_random_se": 367, "sklearn_warnings_as_error": 367, "sklearn_working_memori": 367, "skop": 405, "slep": 394, "smacof": 698, "small": 384, "sne": [239, 1002], "so": 391, "social": 1028, "soft": 418, "solido": 1029, "solut": 90, "solver": [221, 416, 1001], "some": 345, "someth": 384, "sometim": 391, "sort_graph_by_row_valu": 863, "sourc": [102, 122, 377], "space": [51, 126, 412, 994, 1002], "spars": [41, 113, 121, 130, 187, 199, 200, 229, 321, 328, 353, 354, 388, 413, 416, 420, 1015, 1017, 1019, 1053], "sparse_encod": 552, "sparsecod": 546, "sparsefunc": 1045, "sparsepca": [416, 547], "sparserandomproject": 901, "sparsiti": [205, 211, 419], "spawn": 367, "speci": [50, 305, 374], "special": 355, "specif": [281, 377, 381, 994, 1024, 1025], "specifi": [152, 391, 994], "spectral": [57, 58, 59, 99, 234, 408, 411, 1002], "spectral_clust": 465, "spectral_embed": 699, "spectralbiclust": [58, 454], "spectralclust": 455, "spectralcoclust": 456, "spectralembed": 695, "speed": [49, 385], "sphere": 236, "sphinx": 379, "spline": [43, 215, 324, 1015], "splinetransform": 887, "split": [144, 323, 362, 415], "splitter": [29, 362], "sponsor": 0, "spotifi": 1029, "sprint": 0, "squar": [116, 147, 180, 209, 212, 218, 421, 997, 1001, 1003, 1005], "stabil": 322, "stabl": 324, "stack": [155, 321, 418], "stackingclassifi": 571, "stackingregressor": 572, "stall": 379, "standard": [387, 1015], "standardscal": [312, 888], "start": 392, "statement": 1025, "statist": [272, 1024], "statlog": 266, "statu": 402, "std": [160, 194], "step": [43, 253, 383, 392, 412], "stochast": [222, 228, 234, 308, 1001, 1002, 1010, 1019], "stock": 51, "stop": [145, 150, 222, 419, 1019], "strategi": [86, 270, 289, 308, 315, 327, 329, 368, 411, 1005], "stratif": 415, "stratifi": 415, "stratifiedgroupkfold": [415, 822], "stratifiedkfold": 823, "stratifiedshufflesplit": 824, "stream": 368, "string": 391, "strip": 353, "strong": 197, "strongli": 1013, "structur": [51, 74, 81, 100, 179, 333, 361], "studi": 251, "submit": 379, "subpackag": 1025, "subsampl": 418, "subscript": 329, "subtleti": 362, "success": [283, 284, 323, 994], "sum": 628, "summar": 405, "summari": [62, 145, 203, 354, 355, 405, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "supervis": [184, 330, 331, 335, 336, 1009, 1018, 1027], "support": [0, 62, 144, 150, 184, 208, 318, 321, 322, 323, 324, 326, 327, 328, 337, 340, 348, 391, 397, 402, 407, 409, 418, 1020, 1021, 1028, 1053, 1054, 1055], "surfac": [143, 246, 358], "svc": [254, 346, 349, 913, 1020], "svd": [55, 121, 416], "svm": [39, 45, 162, 165, 166, 192, 228, 246, 324, 336, 338, 339, 341, 342, 343, 344, 345, 346, 347, 350, 351, 1001, 1011, 1019, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "svmlight": 373, "svr": [247, 348, 914, 1020], "swiss": 238, "switch": 367, "symmetr": 115, "synthet": [61, 107, 194, 199, 269, 319, 384], "system": 377, "t": [234, 239, 1002], "tabl": 391, "tag": [377, 379, 381, 927], "take": 272, "takeawai": 214, "talk": 1023, "tangent": 1002, "target": [41, 107, 178, 232, 318, 319, 391, 393, 412, 1006, 1015, 1016], "targetencod": [327, 889], "targettag": 928, "task": [25, 208, 1001, 1024], "team": [0, 378], "technic": 394, "techniqu": 235, "templat": 381, "tensor": 997, "term": [354, 393, 419], "test": [44, 109, 164, 275, 278, 285, 353, 357, 377, 379, 381, 387, 388, 415], "text": [17, 47, 184, 243, 273, 335, 352, 353, 354, 355, 374, 419, 1055], "tf": 419, "tfidftransform": 594, "tfidfvector": [354, 355, 595], "than": 391, "theil": [231, 1001], "theilsenregressor": 683, "them": [124, 378], "theoret": 245, "thi": [218, 1025], "third": [214, 248, 397], "thread": 367, "threshold": [266, 286, 329, 334, 410], "throughput": [49, 366], "tie": 350, "time": [43, 52, 141, 208, 246, 247, 353, 415, 1026], "timeseriessplit": 825, "tip": [366, 380, 387, 994, 1002, 1009, 1019, 1020, 1021], "togeth": [252, 281], "toi": [79, 95, 241, 376], "toler": 169, "tomographi": 53, "too": 367, "tool": [388, 391, 407], "top": [354, 1005], "top_k_accuracy_scor": 798, "topic": 54, "total": [153, 357, 418], "tough": 378, "track": [387, 412], "tracker": [379, 1028], "trade": 1001, "tradeoff": [269, 1005], "train": [135, 136, 145, 148, 151, 158, 168, 218, 242, 247, 251, 252, 254, 262, 285, 289, 310, 318, 319, 323, 334, 342, 346, 353, 357, 358, 361, 405, 415, 1008, 1018], "train_test_split": 834, "transform": [102, 103, 104, 107, 115, 140, 153, 253, 323, 324, 325, 371, 391, 392, 412, 1008, 1015, 1016, 1017], "transformedtargetregressor": 468, "transformermixin": 435, "transformertag": 929, "translat": 1024, "tree": [40, 135, 136, 140, 142, 143, 150, 153, 184, 189, 214, 321, 326, 327, 328, 356, 357, 358, 359, 360, 361, 391, 418, 420, 1008, 1013, 1021, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "triag": 378, "trick": [366, 385, 387, 419], "trigonometr": 43, "troubleshoot": 397, "true": [194, 195], "truncat": 416, "truncatedsvd": 548, "trust": 160, "trustworthi": 700, "truth": [72, 194], "tsne": [292, 696], "tune": [29, 147, 266, 270, 273, 286, 323, 329, 410, 994], "tunedthresholdclassifiercv": [329, 826], "tutori": [159, 184, 1023], "tweedi": [232, 1005], "tweedieregressor": [232, 684], "two": [99, 137, 200, 252, 272], "type": [103, 257, 380, 381, 393, 407, 411], "type_of_target": 967, "typic": 378, "t\u00e9l\u00e9com": 1029, "u": 0, "ubuntu": 397, "uci": 289, "unbalanc": [344, 1020], "uncertain": 331, "uncertainti": 52, "unclaim": 379, "undefinedmetricwarn": 582, "under": [179, 391, 1031, 1052], "underfit": 287, "understand": 361, "unfold": 387, "uniform": [312, 1015], "unique_label": 968, "univari": [87, 115, 165, 345, 420, 995], "univers": 381, "unlabel": 1018, "unless": 384, "unstructur": 100, "unsupervis": [1008, 1010, 1022, 1030], "unweight": 402, "up": 1011, "updat": [383, 1046], "us": [44, 45, 51, 55, 121, 122, 124, 152, 153, 155, 169, 176, 217, 228, 230, 272, 276, 281, 291, 313, 348, 353, 354, 361, 362, 368, 380, 384, 385, 387, 391, 415, 416, 419, 420, 999, 1001, 1002, 1005, 1009, 1019, 1020, 1021, 1029, 1046], "usabl": 391, "usag": [385, 391, 402, 407, 409, 412, 418, 419, 1001], "user": [1028, 1031], "util": [41, 372, 384, 388, 1033, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "v": [87, 100, 109, 110, 112, 116, 126, 168, 188, 189, 197, 206, 232, 275, 281, 287, 357, 411, 418, 995], "v_measure_scor": 799, "valgrind": [385, 387], "valid": [29, 41, 43, 160, 168, 203, 245, 266, 267, 268, 270, 271, 275, 277, 282, 345, 362, 366, 381, 388, 410, 415, 994, 1000, 1001], "validate_data": 993, "validation_curv": 835, "validationcurvedisplai": [327, 827], "valu": [150, 169, 181, 182, 183, 184, 239, 248, 321, 327, 328, 361, 379, 407, 416, 418, 995, 1005, 1013, 1015, 1021], "vanilla": [266, 286], "vari": [72, 307, 334, 411], "variabl": [25, 115, 186, 187, 367, 391], "varianc": [138, 212, 420, 1005, 1015], "variancethreshold": 607, "variant": 182, "variat": [257, 1004], "variou": [49, 85, 221, 239], "vector": [55, 62, 86, 184, 337, 340, 348, 353, 355, 419, 1020], "version": [325, 373, 377, 379, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "versu": [138, 228, 277, 336, 366], "via": [44, 52, 86, 201, 203, 232, 418, 997], "video": [379, 1023], "visual": [5, 29, 51, 91, 131, 145, 242, 247, 254, 267, 309, 322, 342, 411, 412, 1005, 1033], "vote": [158, 418], "votingclassifi": [156, 157, 573], "votingregressor": 574, "wage": [186, 187], "wai": [188, 379, 391], "ward": [81, 100, 411], "ward_tre": 466, "warm": 385, "warm_start": 1009, "warn": 388, "we": 100, "weak": [135, 418], "websit": [383, 1046], "weight": [41, 135, 194, 196, 227, 309, 322, 351, 402, 418, 419], "weighted_mod": 954, "what": [361, 391], "when": 266, "which": 1001, "whitekernel": 629, "who": 1029, "why": [391, 418], "wikipedia": 55, "wild": 374, "window": [377, 397], "wine": 376, "winpython": 397, "wisconsin": 376, "within": 104, "without": [74, 300, 353], "wolf": [69, 110, 413], "word": [353, 419], "work": [41, 184, 352, 366, 378, 391], "workflow": [378, 405], "world": [42, 107, 184, 374], "wrap": 291, "written": 68, "wrong": [187, 391], "x": 231, "x86_64": 387, "xor": [175, 346, 421], "y": [231, 391, 1016, 1018], "yeast": 289, "yep": 385, "yhat": 1029, "you": [160, 391], "your": [381, 384, 1005], "zero": 1005, "zero_one_loss": 800, "zopa": 1029}})