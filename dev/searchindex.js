Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Plot Ridge coefficients as a function of the L2 regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross Validation", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensemble methods", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.0"], "terms": {"thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 358, 359, 360, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 417, 418, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 468, 469, 470, 471, 473, 475, 476, 479, 482, 483, 484, 485, 487, 488, 489, 491, 494, 495, 501, 502, 503, 504, 505, 506, 507, 509, 510, 512, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 685, 686, 687, 688, 689, 690, 692, 693, 695, 698, 699, 700, 702, 703, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 717, 721, 722, 723, 724, 725, 726, 727, 728, 733, 739, 740, 741, 742, 743, 744, 746, 747, 748, 750, 753, 754, 759, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 904, 905, 910, 911, 913, 915, 916, 921, 923, 928, 930, 933, 934, 935, 937, 938, 941, 942, 951, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "wa": [0, 4, 8, 13, 16, 34, 40, 70, 71, 80, 86, 92, 127, 130, 159, 168, 174, 177, 223, 249, 252, 254, 256, 258, 264, 265, 296, 305, 310, 311, 315, 320, 321, 343, 345, 352, 354, 358, 367, 369, 370, 372, 376, 377, 385, 388, 391, 393, 394, 397, 400, 401, 405, 409, 426, 427, 431, 432, 436, 440, 443, 446, 455, 460, 501, 509, 521, 522, 524, 526, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 571, 572, 574, 576, 577, 588, 613, 616, 627, 636, 637, 640, 641, 642, 644, 650, 651, 671, 672, 699, 714, 715, 753, 768, 769, 772, 780, 781, 782, 785, 786, 796, 807, 809, 821, 831, 857, 858, 877, 881, 887, 888, 890, 915, 916, 934, 955, 956, 957, 966, 967, 970, 973, 977, 980, 983, 987, 993, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "start": [0, 4, 7, 10, 12, 26, 53, 58, 64, 67, 74, 86, 98, 109, 115, 121, 123, 144, 147, 155, 157, 169, 174, 178, 179, 187, 198, 199, 200, 206, 216, 219, 223, 232, 246, 258, 266, 278, 314, 319, 343, 352, 354, 358, 359, 360, 361, 365, 372, 373, 374, 376, 377, 378, 383, 385, 388, 394, 397, 401, 402, 406, 407, 409, 426, 428, 436, 440, 442, 519, 524, 596, 603, 618, 631, 639, 645, 652, 654, 662, 663, 664, 676, 680, 766, 767, 774, 780, 781, 782, 785, 786, 796, 826, 827, 828, 830, 832, 840, 926, 951, 956, 963, 966, 971, 972, 981, 988, 991, 993, 1001, 1002, 1012, 1014, 1017, 1019, 1021, 1022, 1023, 1024, 1025], "2007": [0, 38, 186, 367, 397, 406, 426, 438, 440, 446, 448, 552, 642, 677, 703, 719, 722, 743, 744, 778, 959, 963, 965, 967], "googl": [0, 17, 383, 397, 428, 986, 998, 1009], "summer": [0, 4, 48, 1009], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 358, 359, 366, 370, 371, 373, 375, 376, 381, 383, 385, 386, 388, 391, 393, 396, 397, 404, 405, 428, 429, 433, 435, 445, 482, 512, 516, 517, 523, 524, 528, 529, 531, 532, 534, 552, 558, 567, 568, 571, 572, 632, 633, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 651, 668, 669, 671, 672, 812, 813, 814, 851, 858, 935, 964, 968, 977, 979, 981, 982, 987, 988, 990, 991, 994, 1002, 1009, 1011, 1012], "david": [0, 2, 37, 57, 81, 116, 177, 182, 200, 259, 261, 305, 343, 344, 345, 367, 397, 404, 407, 448, 518, 522, 553, 554, 608, 609, 614, 710, 780, 881, 957, 963, 971, 980, 991, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "cournapeau": [0, 2, 1009, 1012], "later": [0, 11, 34, 53, 115, 124, 150, 169, 174, 177, 291, 345, 354, 378, 383, 384, 388, 391, 830, 853, 854, 862, 864, 977, 997, 1002, 1012, 1015, 1017, 1021], "year": [0, 4, 133, 147, 155, 167, 168, 169, 198, 199, 216, 344, 369, 371, 383, 401, 405, 407, 784, 789, 791, 863, 963, 967, 988, 991, 1000], "matthieu": [0, 2, 1009, 1013, 1024], "brucher": [0, 2, 1009], "work": [0, 4, 9, 17, 32, 44, 45, 48, 52, 67, 78, 113, 120, 133, 147, 156, 157, 167, 168, 169, 187, 215, 243, 245, 256, 284, 285, 306, 311, 313, 314, 332, 344, 345, 354, 359, 360, 361, 366, 367, 370, 372, 373, 374, 375, 376, 377, 378, 380, 384, 385, 386, 388, 393, 394, 395, 397, 398, 399, 402, 404, 405, 406, 409, 410, 411, 412, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 446, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 494, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 681, 694, 727, 759, 763, 764, 765, 766, 773, 780, 781, 782, 785, 786, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 872, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 921, 925, 956, 957, 959, 961, 962, 963, 964, 966, 967, 969, 970, 973, 974, 977, 980, 981, 987, 988, 991, 993, 994, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "part": [0, 31, 36, 61, 68, 71, 82, 113, 116, 119, 123, 128, 136, 137, 138, 139, 144, 155, 165, 177, 246, 253, 255, 272, 294, 302, 305, 307, 345, 360, 367, 369, 372, 374, 378, 380, 384, 385, 388, 395, 397, 401, 402, 404, 405, 407, 432, 435, 479, 480, 481, 507, 517, 523, 528, 560, 570, 571, 572, 599, 611, 776, 849, 867, 869, 870, 871, 872, 873, 874, 875, 956, 957, 959, 964, 968, 986, 987, 988, 989, 991, 995, 1002, 1004, 1009, 1017, 1018, 1020, 1022, 1024], "hi": [0, 398, 967, 1002], "thesi": [0, 369, 397, 404], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 37, 39, 48, 49, 53, 55, 57, 58, 60, 66, 67, 71, 72, 74, 75, 78, 80, 81, 82, 86, 89, 95, 97, 100, 103, 104, 109, 113, 115, 116, 117, 118, 119, 120, 123, 125, 126, 127, 128, 130, 133, 143, 144, 146, 147, 150, 154, 155, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 182, 186, 187, 189, 193, 198, 199, 200, 201, 202, 203, 206, 215, 216, 227, 228, 229, 230, 232, 233, 234, 237, 238, 239, 240, 246, 248, 252, 254, 255, 256, 258, 259, 260, 261, 263, 264, 267, 268, 270, 272, 273, 276, 278, 284, 285, 287, 297, 300, 301, 302, 303, 305, 306, 307, 310, 311, 312, 314, 315, 320, 322, 330, 338, 343, 344, 345, 348, 352, 354, 358, 359, 360, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 423, 426, 427, 428, 429, 430, 433, 434, 435, 438, 448, 449, 450, 455, 458, 461, 479, 482, 489, 494, 495, 497, 509, 520, 522, 524, 526, 527, 528, 530, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 574, 577, 588, 592, 595, 596, 597, 616, 618, 619, 620, 622, 629, 630, 631, 633, 634, 635, 637, 639, 641, 644, 645, 647, 649, 651, 652, 654, 655, 660, 661, 662, 665, 666, 670, 671, 672, 682, 685, 689, 698, 704, 706, 711, 713, 714, 719, 720, 723, 725, 727, 739, 741, 742, 766, 768, 770, 773, 777, 779, 780, 781, 782, 785, 786, 788, 796, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 826, 827, 828, 830, 831, 832, 834, 835, 836, 841, 849, 851, 857, 858, 862, 863, 865, 869, 870, 872, 873, 874, 875, 876, 877, 879, 880, 881, 884, 885, 886, 889, 892, 894, 899, 903, 905, 921, 935, 956, 957, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 988, 990, 991, 993, 1000, 1001, 1002, 1006, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "2010": [0, 47, 67, 79, 169, 263, 264, 394, 397, 399, 401, 402, 410, 461, 522, 690, 694, 705, 706, 725, 809, 841, 842, 959, 963, 967, 971, 981, 986, 1009], "fabian": [0, 2, 185, 203, 220, 290, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018], "pedregosa": [0, 2, 185, 203, 220, 290, 1009, 1010, 1011, 1012, 1013, 1015], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 66, 67, 82, 97, 101, 187, 188, 220, 232, 245, 986, 988, 991, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 66, 67, 73, 82, 89, 90, 97, 101, 102, 181, 187, 188, 195, 196, 220, 222, 230, 232, 245, 302, 334, 335, 386, 986, 991, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 183, 185, 186, 187, 189, 191, 192, 227, 230, 264, 271, 290, 386, 991, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 183, 185, 186, 187, 189, 191, 192, 227, 230, 264, 271, 290, 386, 991, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "vincent": [0, 2, 47, 67, 153, 157, 991, 1009, 1011, 1013, 1014, 1016, 1019, 1024, 1025], "michel": [0, 2, 47, 67, 1009, 1011, 1012, 1014, 1016, 1023, 1024], "inria": [0, 5, 9, 30, 37, 52, 54, 57, 75, 82, 116, 156, 177, 182, 183, 185, 189, 191, 192, 203, 220, 221, 227, 230, 259, 261, 264, 271, 290, 305, 338, 343, 344, 345, 644, 985, 1009], "took": [0, 42, 266], "leadership": 0, "made": [0, 70, 81, 89, 100, 116, 133, 157, 168, 169, 198, 216, 249, 262, 306, 311, 330, 349, 358, 367, 369, 372, 376, 385, 386, 397, 404, 405, 409, 429, 432, 433, 435, 445, 482, 489, 574, 575, 577, 616, 617, 642, 651, 671, 672, 720, 768, 782, 785, 786, 796, 800, 801, 802, 821, 824, 825, 968, 973, 983, 987, 991, 999, 1001, 1009, 1010, 1011, 1012, 1013, 1016, 1018, 1019, 1022, 1023], "first": [0, 4, 5, 7, 8, 11, 17, 25, 26, 30, 31, 32, 39, 55, 56, 58, 61, 64, 65, 66, 67, 70, 71, 72, 75, 80, 85, 86, 89, 90, 91, 100, 104, 111, 115, 117, 118, 119, 120, 122, 124, 127, 130, 131, 132, 133, 143, 144, 147, 150, 151, 152, 155, 156, 157, 158, 163, 167, 168, 169, 171, 174, 177, 179, 181, 187, 194, 195, 196, 199, 200, 206, 207, 212, 220, 223, 231, 232, 234, 235, 237, 239, 240, 245, 249, 253, 258, 260, 261, 265, 267, 269, 270, 276, 278, 280, 281, 283, 287, 288, 289, 294, 296, 300, 302, 305, 306, 307, 311, 312, 319, 322, 326, 327, 330, 332, 343, 344, 345, 348, 349, 352, 354, 359, 360, 366, 367, 369, 370, 371, 374, 376, 377, 378, 380, 383, 385, 394, 395, 397, 400, 401, 402, 404, 405, 406, 407, 409, 429, 432, 433, 436, 445, 446, 450, 458, 469, 473, 474, 476, 477, 478, 480, 483, 486, 488, 490, 494, 495, 496, 514, 519, 520, 524, 527, 539, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 568, 570, 574, 575, 576, 577, 579, 596, 597, 603, 607, 610, 617, 618, 619, 620, 632, 638, 645, 652, 654, 660, 662, 674, 681, 684, 685, 686, 688, 698, 702, 721, 748, 749, 767, 777, 780, 781, 785, 786, 787, 789, 794, 796, 803, 812, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 829, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 849, 857, 861, 862, 863, 866, 873, 874, 886, 889, 892, 893, 894, 895, 897, 899, 904, 905, 906, 923, 925, 934, 938, 941, 953, 956, 957, 961, 962, 963, 964, 966, 967, 968, 969, 970, 974, 977, 978, 981, 982, 983, 991, 993, 999, 1000, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "public": [0, 79, 366, 372, 374, 376, 377, 383, 384, 385, 386, 401, 404, 454, 650, 657, 671, 672, 678, 882, 963, 971, 1009, 1014, 1015, 1020, 1021, 1022, 1025], "releas": [0, 34, 316, 359, 361, 370, 372, 373, 375, 380, 383, 385, 405, 429, 433, 450, 453, 476, 477, 482, 487, 490, 498, 501, 510, 524, 547, 548, 550, 551, 553, 585, 588, 614, 616, 618, 620, 626, 632, 634, 638, 644, 655, 666, 674, 687, 688, 703, 733, 773, 782, 785, 786, 788, 796, 810, 826, 828, 845, 849, 854, 857, 858, 859, 863, 864, 881, 882, 884, 889, 893, 916, 935, 983, 985, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "februari": [0, 399, 459, 967, 1010, 1014], "1st": [0, 4, 60, 90, 158, 199, 305, 862, 863], "sinc": [0, 4, 5, 11, 25, 27, 37, 49, 53, 55, 66, 70, 71, 72, 96, 120, 136, 144, 147, 150, 155, 168, 169, 174, 180, 198, 200, 215, 228, 232, 233, 245, 248, 254, 258, 260, 261, 267, 268, 278, 280, 306, 313, 314, 323, 327, 330, 338, 343, 344, 345, 354, 359, 367, 370, 372, 373, 374, 376, 377, 380, 383, 384, 385, 388, 395, 397, 398, 399, 400, 401, 402, 404, 405, 407, 409, 414, 423, 427, 431, 432, 433, 435, 436, 439, 442, 455, 464, 482, 512, 519, 522, 523, 524, 525, 526, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 553, 555, 574, 575, 577, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 618, 619, 624, 630, 631, 636, 637, 640, 641, 642, 644, 645, 650, 651, 652, 654, 657, 660, 661, 662, 665, 678, 693, 695, 720, 726, 753, 774, 785, 786, 812, 813, 814, 815, 819, 820, 821, 822, 823, 826, 831, 834, 841, 842, 849, 857, 874, 875, 879, 880, 884, 886, 887, 888, 889, 890, 892, 894, 918, 921, 956, 959, 960, 961, 963, 964, 968, 969, 970, 971, 973, 975, 977, 981, 982, 983, 991, 993, 1002, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "sever": [0, 4, 9, 12, 25, 31, 37, 55, 56, 57, 61, 74, 91, 113, 121, 128, 130, 133, 144, 150, 155, 156, 165, 168, 174, 182, 187, 198, 218, 219, 225, 231, 245, 253, 258, 263, 280, 295, 300, 313, 343, 344, 358, 366, 367, 369, 372, 374, 377, 383, 385, 394, 396, 397, 398, 401, 403, 404, 405, 407, 433, 435, 450, 473, 485, 494, 495, 524, 541, 542, 545, 546, 549, 550, 551, 556, 574, 575, 577, 596, 631, 632, 638, 674, 675, 676, 677, 678, 679, 780, 781, 782, 785, 786, 796, 812, 813, 819, 820, 821, 822, 823, 843, 844, 851, 868, 892, 893, 894, 895, 907, 935, 956, 959, 964, 967, 968, 970, 975, 977, 981, 983, 984, 986, 987, 990, 991, 993, 1000, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1022, 1025], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 43, 45, 46, 47, 50, 53, 55, 57, 60, 62, 64, 65, 70, 71, 78, 80, 86, 89, 91, 92, 100, 102, 110, 117, 119, 120, 121, 123, 143, 144, 147, 150, 151, 155, 156, 157, 163, 167, 168, 169, 170, 171, 174, 177, 182, 198, 199, 200, 216, 223, 227, 229, 234, 236, 237, 244, 245, 246, 248, 252, 258, 259, 261, 264, 265, 272, 278, 280, 284, 285, 300, 305, 306, 307, 310, 312, 313, 319, 320, 321, 327, 333, 335, 343, 344, 352, 354, 358, 359, 360, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 473, 478, 480, 481, 482, 494, 495, 500, 509, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 673, 674, 675, 676, 677, 678, 685, 690, 691, 698, 701, 706, 711, 716, 721, 727, 741, 742, 743, 744, 767, 770, 771, 775, 778, 780, 781, 782, 785, 786, 787, 788, 793, 796, 800, 805, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 872, 873, 874, 875, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 904, 906, 908, 910, 921, 942, 956, 957, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 987, 988, 991, 993, 994, 997, 998, 1000, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "appear": [0, 8, 46, 48, 113, 168, 253, 255, 256, 284, 285, 294, 296, 301, 319, 343, 344, 345, 367, 370, 372, 377, 385, 399, 402, 474, 475, 541, 553, 554, 565, 596, 613, 614, 616, 683, 686, 688, 698, 702, 704, 767, 774, 783, 800, 819, 820, 821, 822, 823, 886, 889, 923, 963, 969, 973, 1009, 1017, 1021, 1022], "follow": [0, 4, 7, 19, 26, 32, 37, 45, 54, 55, 57, 63, 67, 71, 72, 92, 95, 105, 110, 113, 123, 127, 142, 155, 162, 167, 168, 169, 170, 177, 179, 182, 186, 187, 196, 198, 199, 213, 216, 228, 234, 236, 249, 258, 267, 268, 300, 306, 307, 310, 311, 313, 314, 315, 327, 338, 343, 344, 345, 348, 352, 354, 358, 359, 366, 367, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 417, 419, 427, 429, 431, 432, 433, 434, 435, 439, 447, 449, 450, 451, 454, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 501, 520, 524, 526, 527, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 567, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 617, 619, 620, 632, 638, 644, 645, 656, 657, 666, 678, 680, 685, 691, 695, 699, 704, 801, 821, 826, 827, 828, 830, 832, 834, 835, 836, 843, 847, 848, 849, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 873, 882, 884, 885, 892, 893, 894, 895, 899, 900, 920, 935, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 986, 987, 988, 993, 1002, 1006, 1009, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 142, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 168, 169, 170, 174, 176, 177, 178, 179, 180, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 227, 231, 232, 233, 234, 236, 238, 240, 243, 244, 245, 247, 248, 249, 253, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 318, 319, 321, 322, 323, 326, 327, 329, 330, 333, 334, 335, 336, 337, 338, 339, 343, 344, 345, 349, 350, 352, 354, 359, 360, 366, 367, 369, 370, 372, 373, 374, 377, 378, 383, 384, 385, 388, 389, 390, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 420, 423, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 445, 446, 448, 450, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 464, 468, 469, 470, 471, 479, 480, 482, 483, 490, 491, 492, 493, 496, 498, 502, 503, 504, 505, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 563, 567, 569, 570, 573, 579, 580, 588, 589, 593, 594, 596, 597, 598, 603, 613, 614, 615, 616, 617, 618, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 678, 679, 680, 685, 686, 688, 689, 690, 691, 693, 695, 699, 702, 703, 707, 708, 709, 711, 713, 714, 715, 716, 719, 720, 721, 722, 726, 728, 729, 730, 731, 733, 735, 736, 737, 738, 739, 741, 742, 753, 754, 760, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 843, 848, 849, 850, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 872, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 910, 919, 920, 921, 923, 924, 925, 926, 930, 931, 933, 934, 935, 941, 956, 957, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 973, 974, 977, 978, 980, 982, 983, 985, 986, 990, 993, 994, 997, 998, 1000, 1001, 1005, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1019, 1021, 1022, 1024], "month": [0, 4, 155, 169, 306, 367, 372, 376, 386, 1009], "cycl": [0, 4, 42, 44, 50, 62, 95, 183, 244, 249, 265, 267, 313, 314, 372, 376, 396, 402, 565, 566, 613, 785, 786, 900, 956, 957, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "thrive": [0, 372], "intern": [0, 26, 71, 82, 100, 116, 124, 136, 151, 162, 165, 198, 278, 280, 299, 308, 320, 345, 354, 359, 367, 369, 374, 378, 381, 383, 385, 391, 394, 397, 401, 402, 404, 405, 407, 408, 423, 425, 430, 451, 454, 497, 520, 521, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 579, 580, 596, 597, 624, 626, 629, 632, 638, 654, 658, 662, 664, 682, 694, 716, 719, 743, 744, 768, 810, 824, 825, 840, 841, 842, 844, 845, 849, 863, 865, 879, 880, 882, 884, 885, 886, 889, 892, 893, 894, 895, 935, 963, 964, 965, 967, 970, 973, 977, 979, 982, 983, 991, 1009, 1012, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 56, 57, 60, 74, 80, 81, 86, 95, 115, 119, 121, 123, 127, 132, 146, 150, 155, 156, 157, 163, 168, 169, 170, 174, 191, 195, 198, 199, 200, 204, 215, 216, 219, 227, 231, 233, 237, 240, 243, 244, 246, 248, 249, 253, 256, 257, 258, 261, 262, 264, 269, 270, 276, 284, 285, 286, 288, 296, 300, 301, 303, 305, 310, 311, 312, 313, 314, 318, 321, 330, 335, 337, 343, 352, 354, 358, 359, 360, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 383, 384, 385, 386, 388, 391, 394, 395, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 409, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 479, 480, 483, 484, 494, 495, 502, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 605, 613, 614, 615, 616, 618, 619, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 673, 674, 675, 676, 677, 678, 681, 697, 699, 706, 726, 748, 759, 763, 764, 765, 776, 780, 781, 782, 783, 785, 786, 787, 788, 789, 796, 800, 803, 808, 809, 812, 813, 815, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 844, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 899, 903, 904, 905, 923, 936, 952, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 979, 980, 981, 982, 983, 988, 991, 993, 997, 1000, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "been": [0, 4, 9, 16, 26, 44, 53, 60, 81, 100, 147, 150, 155, 157, 168, 223, 227, 229, 234, 256, 258, 264, 310, 311, 312, 313, 314, 320, 343, 354, 359, 366, 367, 369, 370, 371, 372, 374, 376, 378, 380, 381, 383, 384, 385, 386, 391, 394, 395, 397, 399, 401, 402, 404, 407, 420, 423, 455, 457, 458, 460, 464, 473, 509, 520, 522, 535, 536, 553, 554, 567, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 597, 619, 620, 644, 645, 652, 654, 659, 661, 662, 663, 664, 706, 763, 764, 765, 776, 782, 785, 786, 788, 796, 808, 809, 833, 881, 884, 957, 959, 960, 962, 963, 964, 967, 968, 970, 973, 977, 979, 981, 982, 988, 991, 993, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "lead": [0, 7, 25, 31, 37, 52, 55, 61, 72, 116, 120, 123, 146, 147, 168, 169, 170, 177, 182, 187, 189, 198, 202, 232, 258, 259, 261, 265, 283, 284, 296, 300, 302, 305, 306, 312, 330, 344, 348, 354, 358, 359, 366, 371, 380, 381, 384, 385, 391, 394, 395, 397, 399, 401, 402, 403, 404, 406, 438, 448, 451, 454, 482, 501, 513, 521, 524, 525, 526, 529, 533, 537, 543, 544, 545, 546, 549, 550, 551, 552, 592, 616, 632, 633, 636, 638, 639, 640, 646, 647, 648, 649, 665, 677, 681, 731, 780, 785, 786, 812, 824, 825, 829, 848, 855, 865, 876, 877, 882, 884, 892, 893, 894, 895, 956, 961, 963, 964, 966, 967, 968, 970, 971, 973, 975, 977, 980, 981, 983, 991, 993, 1012, 1014, 1016, 1017, 1018, 1019, 1021, 1022, 1024, 1025], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 27, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 88, 91, 92, 93, 95, 98, 100, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 133, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 169, 170, 171, 174, 177, 179, 180, 181, 182, 183, 186, 187, 189, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 204, 206, 207, 215, 216, 218, 222, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 248, 249, 252, 255, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 276, 278, 280, 283, 284, 285, 286, 287, 288, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 320, 321, 327, 328, 330, 334, 335, 336, 338, 339, 340, 343, 344, 345, 348, 350, 351, 352, 354, 358, 359, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 418, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 737, 738, 739, 740, 741, 742, 743, 744, 747, 749, 750, 751, 752, 755, 756, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 915, 916, 917, 918, 919, 920, 921, 923, 924, 930, 932, 933, 934, 935, 936, 937, 938, 941, 951, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 993, 994, 995, 997, 998, 999, 1002, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "decis": [0, 4, 16, 25, 27, 31, 34, 56, 58, 60, 108, 109, 112, 113, 115, 128, 134, 154, 168, 180, 181, 190, 207, 208, 211, 212, 227, 228, 230, 237, 261, 281, 286, 289, 294, 300, 301, 302, 305, 317, 324, 326, 327, 328, 329, 330, 331, 332, 336, 339, 340, 343, 353, 358, 361, 368, 369, 372, 385, 395, 397, 404, 423, 455, 486, 490, 505, 522, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 579, 580, 617, 618, 619, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 684, 686, 688, 689, 693, 706, 711, 712, 720, 724, 725, 727, 741, 767, 773, 774, 777, 782, 785, 786, 796, 810, 812, 813, 815, 826, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 961, 967, 968, 969, 970, 971, 973, 974, 975, 980, 981, 982, 985, 987, 988, 989, 991, 1000, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1025], "make": [0, 4, 7, 8, 11, 14, 17, 21, 25, 26, 27, 39, 40, 43, 44, 56, 61, 62, 67, 73, 100, 116, 120, 123, 128, 144, 147, 150, 155, 158, 167, 168, 169, 170, 177, 182, 184, 187, 190, 191, 192, 194, 198, 199, 200, 204, 216, 220, 229, 231, 233, 234, 243, 245, 248, 249, 253, 258, 260, 261, 267, 268, 269, 287, 296, 300, 301, 306, 314, 330, 340, 343, 344, 345, 354, 358, 359, 360, 361, 366, 367, 370, 371, 373, 374, 375, 377, 378, 380, 383, 385, 388, 391, 394, 395, 397, 398, 399, 401, 402, 404, 405, 406, 407, 409, 426, 427, 428, 429, 431, 433, 435, 437, 438, 439, 444, 445, 446, 448, 474, 489, 500, 501, 508, 509, 513, 518, 520, 527, 537, 538, 541, 542, 569, 570, 593, 594, 617, 635, 641, 642, 657, 677, 681, 715, 722, 727, 753, 754, 766, 780, 781, 782, 784, 787, 793, 797, 798, 799, 801, 802, 806, 807, 814, 815, 818, 851, 860, 863, 864, 868, 872, 874, 875, 876, 877, 890, 898, 904, 905, 915, 921, 927, 928, 953, 956, 957, 959, 961, 963, 964, 966, 967, 968, 969, 970, 972, 973, 974, 975, 977, 980, 981, 982, 983, 985, 986, 987, 988, 990, 991, 993, 998, 1000, 1002, 1006, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "process": [0, 4, 5, 19, 26, 30, 31, 45, 46, 47, 48, 50, 66, 70, 72, 74, 79, 81, 96, 97, 99, 120, 127, 136, 137, 138, 139, 160, 167, 177, 200, 234, 243, 244, 249, 258, 260, 261, 270, 300, 312, 319, 344, 345, 348, 358, 359, 360, 361, 367, 371, 372, 374, 376, 378, 381, 383, 384, 385, 391, 397, 398, 399, 401, 402, 403, 404, 405, 406, 410, 434, 435, 461, 482, 490, 509, 520, 521, 522, 523, 524, 547, 548, 549, 574, 575, 577, 596, 597, 599, 600, 601, 603, 604, 605, 608, 609, 611, 613, 618, 619, 625, 629, 650, 658, 671, 672, 689, 708, 726, 766, 780, 782, 785, 786, 796, 805, 806, 807, 816, 817, 833, 847, 851, 853, 854, 855, 864, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 933, 935, 956, 959, 963, 967, 970, 977, 979, 981, 983, 985, 986, 987, 988, 989, 991, 993, 994, 1001, 1002, 1004, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 43, 44, 55, 68, 82, 106, 126, 149, 160, 165, 219, 223, 229, 249, 253, 264, 283, 305, 311, 314, 317, 324, 330, 347, 349, 353, 358, 367, 369, 372, 374, 377, 383, 385, 386, 388, 394, 397, 399, 400, 401, 402, 404, 405, 406, 407, 427, 428, 431, 432, 436, 437, 438, 439, 440, 443, 448, 449, 458, 482, 489, 490, 494, 497, 499, 500, 507, 516, 521, 527, 530, 549, 596, 597, 598, 602, 603, 604, 675, 682, 695, 699, 810, 832, 837, 864, 876, 877, 880, 892, 893, 894, 895, 898, 920, 921, 938, 941, 964, 966, 967, 970, 972, 973, 977, 980, 983, 987, 988, 996, 1001, 1002, 1009, 1010, 1012, 1013, 1015, 1019], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 146, 147, 150, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 287, 288, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 328, 329, 330, 335, 336, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 755, 756, 758, 759, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 920, 921, 923, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 948, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "laid": [0, 167, 372], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 55, 70, 71, 103, 108, 114, 116, 117, 124, 134, 139, 165, 167, 170, 182, 198, 200, 206, 216, 243, 245, 256, 258, 261, 266, 270, 276, 305, 306, 313, 321, 323, 326, 327, 330, 343, 357, 367, 369, 370, 372, 374, 375, 376, 378, 383, 385, 397, 400, 402, 404, 407, 413, 421, 422, 428, 429, 431, 432, 433, 435, 458, 468, 469, 470, 471, 485, 501, 502, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 574, 575, 577, 590, 593, 594, 620, 625, 626, 627, 628, 637, 641, 652, 654, 659, 661, 662, 674, 675, 678, 687, 712, 726, 727, 782, 784, 785, 786, 787, 789, 790, 791, 792, 796, 810, 819, 820, 821, 822, 823, 828, 833, 836, 840, 841, 842, 850, 854, 861, 873, 876, 877, 899, 929, 931, 936, 957, 961, 962, 966, 967, 968, 970, 975, 977, 988, 989, 990, 991, 997, 1000, 1002, 1004, 1009, 1011, 1013, 1015, 1017, 1018, 1021, 1022, 1025], "document": [0, 3, 14, 15, 18, 22, 31, 45, 51, 57, 71, 73, 89, 90, 92, 95, 127, 179, 181, 195, 196, 213, 231, 234, 259, 296, 322, 335, 345, 346, 358, 359, 360, 361, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 380, 383, 385, 386, 388, 391, 394, 396, 397, 402, 405, 408, 430, 433, 434, 435, 436, 439, 443, 450, 474, 475, 485, 487, 497, 507, 509, 522, 530, 550, 574, 575, 576, 577, 580, 590, 617, 625, 629, 644, 645, 652, 654, 659, 660, 661, 662, 682, 683, 689, 691, 697, 703, 722, 743, 744, 754, 763, 764, 765, 776, 778, 782, 785, 786, 796, 806, 808, 811, 814, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 845, 856, 884, 889, 900, 903, 905, 918, 933, 956, 963, 965, 967, 968, 969, 970, 971, 975, 981, 984, 985, 986, 991, 995, 1000, 1002, 1010, 1011, 1015], "peopl": [0, 6, 70, 168, 235, 261, 343, 344, 359, 360, 367, 369, 371, 372, 376, 386, 403, 479, 480, 627, 821, 987, 998], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 32, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 92, 95, 97, 100, 103, 106, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 143, 144, 146, 147, 150, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 202, 207, 209, 216, 219, 220, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 240, 244, 245, 246, 248, 252, 253, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 276, 278, 280, 283, 284, 288, 291, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 314, 315, 318, 320, 321, 322, 323, 328, 330, 332, 334, 338, 339, 343, 344, 345, 348, 352, 354, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 388, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 417, 419, 420, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 474, 475, 479, 481, 482, 484, 486, 487, 488, 489, 490, 494, 495, 496, 498, 501, 502, 503, 504, 505, 506, 509, 510, 512, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 695, 698, 699, 701, 702, 703, 704, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 725, 726, 728, 730, 731, 733, 735, 736, 738, 739, 741, 742, 746, 747, 748, 750, 752, 753, 754, 758, 759, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 785, 786, 788, 789, 794, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 908, 909, 910, 913, 915, 920, 921, 922, 925, 926, 930, 931, 933, 935, 938, 941, 942, 946, 947, 948, 951, 953, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "current": [0, 8, 46, 155, 168, 216, 300, 310, 359, 360, 367, 370, 372, 373, 374, 377, 381, 383, 385, 386, 393, 394, 396, 397, 401, 404, 405, 406, 407, 426, 432, 436, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 518, 521, 527, 539, 540, 543, 544, 545, 546, 548, 550, 551, 552, 562, 577, 579, 596, 603, 612, 613, 632, 644, 653, 657, 661, 662, 663, 664, 773, 780, 781, 829, 833, 841, 842, 860, 872, 882, 892, 893, 894, 895, 898, 934, 942, 956, 961, 963, 967, 970, 971, 977, 988, 1000, 1017, 1021, 1023, 1024, 1025], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 24, 27, 30, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 67, 70, 71, 78, 79, 82, 85, 90, 91, 92, 95, 96, 97, 100, 101, 104, 105, 106, 109, 110, 112, 116, 117, 119, 120, 122, 123, 124, 126, 127, 128, 129, 131, 139, 142, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 165, 168, 169, 171, 174, 178, 179, 180, 182, 184, 186, 187, 188, 189, 190, 196, 198, 200, 204, 205, 207, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 227, 228, 231, 233, 234, 236, 243, 245, 246, 248, 253, 258, 259, 260, 261, 262, 265, 269, 271, 272, 278, 281, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 297, 299, 300, 303, 306, 308, 310, 312, 313, 314, 315, 319, 320, 327, 328, 329, 330, 331, 334, 335, 336, 337, 340, 343, 344, 345, 349, 350, 351, 352, 354, 358, 359, 360, 361, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 385, 386, 387, 388, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 405, 407, 409, 411, 417, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 445, 446, 449, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 475, 482, 484, 486, 490, 496, 497, 505, 511, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 558, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 673, 674, 675, 676, 677, 678, 679, 686, 687, 688, 694, 697, 702, 706, 720, 726, 727, 743, 744, 764, 765, 780, 781, 782, 784, 785, 786, 791, 796, 800, 801, 806, 807, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 899, 902, 904, 905, 908, 921, 923, 951, 955, 956, 958, 959, 961, 963, 964, 965, 968, 969, 970, 971, 972, 974, 975, 977, 979, 980, 981, 982, 983, 987, 988, 991, 993, 997, 998, 1000, 1001, 1002, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "mainten": [0, 372, 380, 383, 388, 390, 963, 988, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "j\u00e9r\u00e9mie": [0, 1, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "du": [0, 1, 2, 1009, 1010, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "boisberrang": [0, 1, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "jori": [0, 1, 1016, 1017, 1018, 1021, 1022], "van": [0, 1, 366, 399, 455, 460, 520, 613, 678, 682, 957, 964, 967, 973, 991, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025], "den": [0, 1, 1010, 1011, 1016, 1017, 1018, 1021, 1022], "bossch": [0, 1, 1016, 1017, 1018, 1022], "lo\u00efc": [0, 1, 1017, 1020, 1022, 1023, 1024], "est\u00e8v": [0, 1, 1017, 1020, 1022, 1023, 1024], "thoma": [0, 1, 103, 227, 300, 359, 362, 386, 880, 963, 977, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "j": [0, 1, 11, 17, 37, 38, 40, 43, 61, 70, 79, 80, 81, 109, 113, 114, 125, 151, 163, 169, 210, 222, 235, 243, 257, 258, 263, 269, 282, 288, 291, 304, 315, 352, 359, 366, 367, 369, 376, 378, 383, 394, 395, 397, 399, 401, 402, 404, 405, 407, 408, 423, 426, 430, 432, 439, 440, 455, 460, 484, 499, 502, 503, 504, 506, 514, 517, 520, 522, 523, 524, 526, 527, 533, 545, 546, 579, 580, 618, 619, 623, 630, 631, 634, 635, 652, 653, 655, 666, 674, 675, 676, 678, 679, 680, 682, 691, 694, 696, 700, 702, 704, 707, 708, 709, 711, 740, 741, 743, 744, 759, 763, 773, 774, 775, 776, 813, 814, 821, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 855, 864, 892, 893, 956, 957, 961, 963, 964, 965, 967, 968, 969, 970, 971, 973, 974, 975, 977, 979, 981, 982, 983, 985, 1002, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "fan": [0, 1, 359, 386, 982, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "olivi": [0, 1, 14, 17, 37, 48, 61, 187, 198, 216, 220, 259, 261, 343, 344, 345, 386, 880, 980, 986, 988, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "grisel": [0, 1, 14, 17, 37, 48, 61, 187, 198, 216, 220, 259, 261, 343, 344, 345, 386, 986, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "yaroslav": [0, 1, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1018], "halchenko": [0, 1, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1018], "tim": [0, 1, 115, 129, 1009, 1014, 1015, 1018, 1019, 1020, 1022, 1024, 1025], "head": [0, 1, 26, 71, 115, 129, 155, 168, 186, 187, 216, 240, 248, 306, 310, 315, 372, 380, 402, 991, 1014, 1015, 1024, 1025], "nicola": [0, 1, 147, 304, 644, 963, 980, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "hug": [0, 1, 147, 304, 985, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "adrin": [0, 1, 65, 339, 386, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "jalali": [0, 1, 65, 339, 386, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "julien": [0, 1, 644, 963, 991, 1009, 1012, 1016, 1017, 1021, 1022, 1023, 1024, 1025], "jerphanion": [0, 1, 1021, 1022, 1023, 1024, 1025], "guillaum": [0, 1, 5, 7, 72, 75, 100, 130, 150, 155, 156, 157, 159, 186, 187, 200, 220, 300, 991, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "lemaitr": [0, 1, 5, 7, 72, 75, 100, 130, 150, 155, 156, 157, 159, 186, 187, 200, 220, 300, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "christian": [0, 1, 19, 198, 199, 200, 216, 343, 367, 991, 1002, 1009, 1010, 1013, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "lorentzen": [0, 1, 198, 199, 200, 216, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "jan": [0, 1, 24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 199, 233, 863, 1009, 1012, 1013, 1014, 1015, 1017, 1018, 1021, 1025], "hendrik": [0, 1, 24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233, 1009, 1012, 1013, 1014, 1015], "metzen": [0, 1, 24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233, 1009, 1012, 1013, 1014, 1015], "andrea": [0, 1, 31, 74, 100, 114, 189, 232, 301, 302, 320, 338, 339, 386, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "mueller": [0, 1, 74, 100, 114, 189, 232, 320, 338, 339, 991, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "vlad": [0, 1, 95, 234, 297, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018], "nicula": [0, 1, 95, 234, 297, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018], "joel": [0, 1, 72, 386, 405, 521, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "nothman": [0, 1, 72, 386, 405, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "hanmin": [0, 1, 301, 1016, 1017, 1018, 1019, 1020], "qin": [0, 1, 301, 369, 405, 1016, 1017, 1018, 1019, 1020], "bertrand": [0, 1, 1009, 1015, 1016, 1021, 1022], "thirion": [0, 1, 1009, 1015, 1016, 1022], "tom": [0, 1, 190, 206, 278, 280, 302, 303, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "dupr\u00e9": [0, 1, 302, 303, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "la": [0, 1, 190, 206, 278, 280, 302, 303, 306, 369, 991, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "tour": [0, 1, 190, 206, 278, 280, 302, 303, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "nell": [0, 1, 39, 222, 230, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1021], "roman": [0, 1, 198, 216, 613, 898, 1011, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "yurchak": [0, 1, 198, 216, 405, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "meekail": [0, 1, 1023, 1024, 1025], "zain": [0, 1, 1023, 1024, 1025], "pleas": [0, 12, 17, 26, 71, 72, 109, 115, 117, 118, 124, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 202, 228, 229, 230, 232, 237, 238, 239, 240, 248, 256, 258, 259, 265, 270, 278, 288, 297, 306, 310, 311, 312, 313, 314, 315, 320, 352, 359, 366, 367, 370, 372, 373, 374, 376, 380, 383, 384, 385, 388, 391, 393, 396, 397, 404, 405, 432, 436, 482, 553, 554, 617, 618, 619, 636, 637, 640, 641, 642, 650, 651, 785, 786, 807, 861, 873, 886, 889, 892, 893, 894, 895, 956, 967, 971, 977, 981, 982, 987, 988, 990, 993, 1000, 1002, 1009, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "do": [0, 4, 10, 25, 42, 55, 61, 67, 74, 90, 99, 101, 102, 105, 114, 117, 119, 121, 123, 124, 130, 137, 144, 155, 162, 168, 169, 170, 195, 198, 216, 219, 221, 234, 249, 253, 256, 259, 261, 276, 278, 280, 284, 313, 323, 327, 330, 335, 338, 343, 344, 345, 352, 354, 358, 359, 360, 367, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 385, 386, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 436, 447, 489, 522, 524, 528, 530, 538, 541, 567, 568, 574, 575, 577, 631, 632, 638, 641, 642, 645, 652, 654, 662, 722, 748, 763, 767, 799, 802, 816, 817, 821, 848, 849, 851, 858, 862, 864, 869, 870, 872, 873, 874, 875, 892, 893, 894, 895, 903, 941, 956, 959, 961, 963, 964, 967, 968, 970, 971, 975, 977, 982, 983, 987, 988, 991, 993, 1000, 1001, 1002, 1009, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "email": [0, 343, 372, 383, 405, 819, 969, 991], "directli": [0, 6, 19, 27, 45, 46, 56, 71, 115, 147, 158, 182, 186, 198, 204, 216, 228, 263, 297, 300, 314, 345, 354, 358, 370, 372, 373, 374, 376, 378, 384, 385, 386, 393, 394, 395, 397, 398, 399, 400, 401, 405, 407, 428, 438, 448, 450, 455, 460, 513, 553, 554, 555, 556, 583, 597, 606, 618, 629, 632, 633, 638, 639, 646, 647, 648, 649, 650, 663, 667, 670, 676, 759, 763, 766, 775, 776, 782, 785, 786, 796, 829, 843, 844, 845, 851, 861, 863, 866, 873, 935, 956, 963, 965, 970, 972, 974, 977, 982, 983, 988, 994, 997, 998, 1009, 1017, 1018, 1020, 1021, 1022], "ask": [0, 162, 163, 258, 361, 371, 372, 376, 377, 380, 385, 386, 406, 826, 827, 828, 830, 832, 834, 835, 836, 985, 990, 1025], "assist": [0, 372, 383, 977, 991], "report": [0, 4, 8, 32, 70, 75, 144, 158, 186, 256, 266, 310, 318, 354, 367, 371, 373, 374, 375, 378, 380, 383, 385, 388, 391, 397, 401, 597, 635, 644, 650, 671, 672, 686, 699, 714, 715, 723, 768, 769, 772, 813, 822, 841, 842, 879, 897, 915, 963, 970, 987, 988, 990, 1010, 1013, 1016, 1017, 1019, 1020, 1022, 1024, 1025], "issu": [0, 4, 25, 79, 86, 198, 216, 263, 307, 359, 361, 366, 375, 376, 377, 380, 381, 383, 385, 386, 387, 388, 391, 393, 397, 399, 400, 405, 407, 435, 438, 448, 459, 468, 469, 470, 520, 525, 529, 559, 571, 572, 574, 575, 577, 597, 613, 677, 681, 754, 855, 860, 872, 911, 956, 957, 964, 970, 975, 977, 982, 987, 988, 990, 1001, 1002, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1024], "instead": [0, 4, 5, 6, 34, 48, 53, 55, 56, 57, 71, 100, 113, 118, 127, 144, 147, 150, 198, 200, 213, 216, 223, 249, 254, 255, 259, 260, 276, 283, 300, 310, 311, 312, 313, 314, 330, 332, 343, 345, 354, 358, 359, 366, 367, 370, 371, 372, 373, 374, 376, 377, 380, 381, 383, 384, 385, 391, 393, 397, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 418, 423, 426, 427, 428, 430, 431, 432, 433, 436, 442, 445, 451, 453, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 495, 496, 519, 521, 523, 525, 526, 527, 532, 533, 535, 536, 539, 540, 541, 542, 543, 544, 546, 548, 550, 551, 554, 556, 568, 569, 575, 576, 593, 594, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 613, 616, 618, 621, 624, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 656, 657, 658, 659, 662, 664, 665, 673, 676, 680, 693, 731, 759, 763, 764, 765, 768, 780, 781, 782, 786, 794, 796, 801, 802, 817, 818, 827, 835, 841, 842, 845, 846, 847, 856, 857, 862, 864, 874, 875, 878, 885, 887, 889, 890, 892, 893, 894, 895, 897, 898, 910, 916, 921, 942, 956, 957, 959, 963, 964, 966, 967, 968, 971, 972, 977, 981, 982, 983, 987, 990, 998, 1000, 1002, 1006, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "see": [0, 4, 5, 7, 24, 25, 27, 37, 44, 49, 50, 53, 55, 57, 58, 62, 64, 65, 67, 69, 80, 86, 89, 90, 95, 100, 102, 106, 111, 112, 113, 116, 117, 118, 119, 120, 122, 124, 127, 130, 136, 143, 144, 145, 147, 150, 155, 156, 157, 162, 165, 168, 169, 171, 174, 177, 178, 179, 182, 189, 199, 200, 201, 204, 215, 216, 219, 221, 229, 231, 237, 238, 240, 244, 245, 246, 252, 253, 255, 257, 258, 259, 260, 261, 265, 267, 268, 269, 272, 273, 278, 284, 285, 287, 291, 300, 306, 307, 310, 311, 312, 313, 314, 315, 320, 330, 343, 344, 345, 348, 349, 350, 351, 354, 358, 359, 360, 364, 365, 366, 367, 369, 370, 371, 372, 374, 376, 378, 379, 380, 383, 384, 385, 388, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 419, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 468, 469, 470, 471, 473, 474, 477, 478, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 570, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 595, 596, 597, 600, 605, 608, 609, 613, 614, 615, 616, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 687, 692, 694, 697, 699, 728, 748, 759, 763, 764, 765, 766, 773, 775, 776, 780, 781, 782, 784, 785, 786, 787, 788, 793, 794, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 920, 921, 936, 938, 941, 956, 957, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 986, 988, 991, 993, 995, 1000, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025], "what": [0, 4, 9, 12, 40, 45, 52, 53, 86, 96, 100, 119, 167, 168, 187, 204, 206, 214, 229, 240, 296, 343, 345, 348, 354, 359, 367, 372, 373, 374, 376, 378, 380, 384, 385, 386, 387, 397, 403, 404, 405, 489, 522, 574, 575, 577, 632, 638, 682, 869, 870, 872, 873, 874, 875, 892, 893, 894, 895, 966, 967, 968, 970, 983, 988, 990, 993, 1009, 1016], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 55, 61, 70, 71, 72, 73, 78, 85, 95, 99, 103, 104, 105, 113, 116, 120, 121, 122, 123, 124, 130, 133, 147, 150, 151, 156, 162, 168, 177, 182, 186, 187, 194, 212, 213, 214, 219, 222, 227, 232, 233, 236, 245, 249, 252, 256, 257, 258, 259, 262, 265, 266, 269, 270, 272, 273, 276, 282, 287, 301, 306, 312, 313, 330, 333, 338, 343, 344, 345, 351, 358, 359, 361, 366, 369, 371, 372, 375, 378, 384, 385, 388, 394, 395, 397, 401, 402, 404, 405, 406, 407, 418, 429, 432, 433, 435, 437, 438, 439, 445, 448, 451, 458, 468, 469, 470, 524, 531, 532, 538, 540, 542, 543, 544, 545, 546, 548, 550, 551, 552, 554, 556, 579, 580, 583, 588, 596, 597, 621, 623, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 655, 656, 657, 658, 659, 661, 662, 664, 665, 666, 674, 675, 676, 679, 680, 689, 694, 705, 706, 707, 708, 709, 713, 714, 724, 725, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 768, 769, 770, 772, 775, 776, 777, 779, 780, 781, 782, 785, 786, 796, 807, 809, 812, 817, 818, 827, 835, 841, 842, 885, 887, 890, 892, 893, 894, 895, 956, 961, 962, 963, 964, 967, 970, 971, 973, 981, 983, 987, 988, 991, 993, 998, 1002, 1009, 1012, 1015, 1017, 1018, 1019, 1022, 1023, 1024, 1025], "wai": [0, 4, 17, 27, 50, 60, 71, 74, 115, 122, 126, 128, 147, 157, 168, 170, 171, 199, 203, 213, 229, 230, 233, 237, 253, 258, 265, 267, 300, 301, 313, 315, 354, 358, 359, 360, 366, 368, 370, 371, 374, 375, 380, 381, 385, 386, 388, 391, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 412, 429, 430, 437, 438, 439, 445, 446, 448, 449, 455, 482, 541, 542, 549, 558, 575, 585, 586, 597, 618, 652, 653, 662, 663, 664, 690, 692, 703, 721, 722, 739, 740, 742, 748, 759, 763, 773, 778, 805, 813, 830, 851, 857, 862, 868, 894, 895, 938, 941, 956, 957, 961, 962, 963, 964, 965, 966, 967, 968, 970, 972, 973, 974, 975, 977, 979, 981, 982, 983, 987, 988, 990, 991, 993, 1001, 1002, 1009, 1011, 1017, 1022, 1023], "question": [0, 136, 167, 258, 338, 361, 371, 372, 377, 380, 401, 404, 813, 886, 889, 963, 966, 967, 973, 985, 991], "faq": [0, 380, 401, 678, 964, 977], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 57, 60, 69, 70, 71, 74, 78, 80, 86, 101, 105, 110, 111, 114, 118, 119, 120, 121, 123, 124, 128, 130, 144, 155, 157, 165, 168, 169, 170, 171, 174, 179, 187, 188, 194, 199, 200, 201, 202, 205, 206, 212, 216, 223, 224, 229, 232, 235, 236, 237, 239, 249, 253, 254, 256, 258, 259, 260, 265, 267, 268, 270, 271, 272, 278, 280, 282, 284, 285, 296, 305, 307, 311, 312, 313, 327, 328, 330, 333, 338, 343, 344, 348, 352, 358, 359, 360, 361, 367, 370, 371, 373, 374, 375, 377, 380, 384, 385, 386, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 419, 423, 428, 429, 430, 431, 432, 433, 435, 438, 450, 454, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 545, 552, 553, 554, 555, 556, 567, 568, 569, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 608, 609, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 674, 675, 677, 678, 690, 706, 742, 775, 782, 785, 786, 796, 807, 828, 830, 833, 836, 840, 841, 842, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 882, 889, 956, 957, 961, 962, 963, 964, 966, 967, 973, 974, 975, 977, 979, 980, 982, 983, 986, 988, 990, 991, 993, 995, 997, 1002, 1004, 1009, 1011, 1014, 1020, 1023, 1024, 1025], "you": [0, 14, 16, 24, 71, 118, 119, 122, 124, 144, 147, 163, 169, 186, 199, 200, 229, 240, 246, 253, 258, 259, 265, 273, 284, 310, 311, 314, 319, 322, 343, 354, 358, 359, 360, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 384, 385, 388, 391, 395, 396, 397, 398, 399, 401, 404, 405, 406, 408, 409, 414, 423, 430, 432, 435, 450, 453, 455, 482, 486, 489, 490, 495, 496, 518, 519, 522, 535, 536, 537, 539, 541, 543, 545, 547, 550, 553, 554, 555, 556, 565, 566, 574, 575, 577, 593, 594, 596, 613, 632, 633, 636, 637, 638, 640, 641, 642, 644, 645, 650, 651, 652, 654, 658, 660, 661, 662, 663, 664, 673, 686, 770, 781, 784, 785, 786, 787, 797, 798, 799, 801, 802, 812, 813, 814, 815, 819, 820, 821, 822, 823, 826, 827, 828, 830, 831, 832, 834, 841, 843, 844, 848, 849, 856, 857, 858, 869, 870, 872, 873, 874, 875, 877, 879, 880, 884, 886, 889, 892, 893, 894, 895, 921, 933, 956, 957, 962, 963, 967, 968, 971, 973, 974, 977, 978, 981, 982, 983, 986, 987, 990, 991, 993, 994, 997, 1000, 1002, 1009, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 70, 71, 72, 73, 78, 79, 80, 81, 82, 86, 96, 98, 99, 100, 101, 103, 105, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 142, 143, 144, 146, 147, 150, 155, 156, 157, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 182, 183, 186, 187, 189, 191, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 206, 214, 215, 216, 219, 220, 221, 227, 228, 229, 230, 231, 233, 237, 240, 243, 244, 245, 246, 248, 249, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 265, 267, 269, 270, 272, 273, 276, 278, 280, 282, 283, 284, 285, 287, 295, 296, 297, 300, 301, 302, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 319, 320, 322, 323, 327, 328, 330, 333, 338, 343, 344, 345, 350, 351, 352, 354, 358, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 384, 385, 386, 387, 388, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 418, 420, 423, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 442, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 458, 468, 469, 470, 473, 482, 485, 489, 494, 495, 498, 507, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 565, 566, 567, 568, 569, 570, 574, 575, 577, 578, 580, 583, 588, 589, 590, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 618, 620, 621, 624, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 673, 675, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 690, 693, 695, 697, 698, 704, 706, 707, 708, 709, 711, 712, 714, 715, 717, 718, 722, 723, 724, 725, 727, 728, 731, 737, 740, 741, 742, 743, 744, 748, 764, 765, 767, 768, 769, 770, 772, 773, 774, 777, 778, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 841, 842, 843, 844, 847, 848, 849, 851, 852, 853, 857, 858, 859, 862, 863, 864, 869, 876, 877, 882, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 896, 897, 900, 902, 904, 908, 910, 915, 920, 921, 927, 930, 933, 935, 937, 938, 941, 948, 951, 952, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "contribut": [0, 13, 124, 155, 182, 267, 305, 361, 369, 370, 374, 375, 376, 380, 385, 386, 388, 402, 403, 404, 407, 433, 435, 539, 540, 545, 546, 711, 714, 741, 961, 967, 970, 975, 982, 985, 987, 988, 991, 1000, 1009, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "activ": [0, 165, 206, 243, 249, 259, 317, 324, 345, 366, 367, 370, 372, 373, 378, 380, 383, 385, 386, 388, 398, 482, 488, 512, 618, 621, 623, 636, 637, 639, 640, 641, 649, 650, 651, 668, 669, 670, 671, 672, 699, 704, 780, 840, 841, 842, 880, 933, 963, 964, 965, 966, 970, 971, 972, 980], "who": [0, 70, 359, 361, 367, 372, 379, 386, 388, 826, 827, 828, 830, 832, 834, 835, 836, 985, 987, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "also": [0, 4, 7, 11, 17, 19, 24, 25, 26, 27, 32, 46, 48, 53, 57, 58, 60, 64, 70, 71, 78, 80, 85, 86, 95, 103, 105, 113, 116, 118, 120, 122, 123, 124, 128, 130, 143, 144, 145, 147, 150, 152, 155, 163, 168, 169, 170, 171, 174, 178, 179, 181, 187, 190, 191, 194, 198, 199, 200, 203, 207, 215, 216, 219, 230, 232, 237, 249, 256, 258, 259, 260, 261, 264, 265, 267, 268, 269, 278, 281, 286, 289, 291, 294, 300, 301, 302, 304, 305, 310, 311, 312, 313, 323, 326, 327, 328, 330, 332, 343, 344, 345, 348, 349, 352, 354, 358, 359, 360, 365, 366, 367, 369, 370, 371, 372, 374, 375, 378, 380, 381, 383, 384, 385, 386, 388, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 423, 424, 425, 427, 428, 431, 432, 433, 434, 436, 438, 448, 449, 451, 453, 468, 470, 478, 482, 484, 489, 494, 518, 519, 521, 522, 527, 532, 535, 537, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 597, 608, 618, 619, 621, 629, 630, 631, 632, 633, 636, 638, 639, 640, 642, 646, 647, 648, 649, 658, 662, 664, 667, 670, 673, 677, 680, 681, 685, 696, 699, 708, 714, 715, 723, 728, 748, 764, 765, 768, 769, 772, 780, 781, 782, 785, 786, 796, 799, 802, 806, 807, 808, 809, 810, 811, 813, 823, 826, 827, 828, 830, 831, 832, 834, 835, 836, 840, 841, 842, 844, 846, 847, 852, 853, 857, 861, 864, 869, 873, 886, 889, 892, 893, 894, 895, 904, 923, 931, 935, 956, 957, 959, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 978, 980, 981, 982, 983, 987, 988, 990, 991, 993, 998, 1000, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "help": [0, 4, 9, 11, 16, 55, 70, 74, 100, 106, 169, 182, 216, 219, 259, 261, 297, 327, 330, 345, 354, 358, 359, 370, 373, 374, 375, 376, 377, 378, 380, 381, 385, 386, 387, 391, 397, 398, 401, 405, 407, 419, 522, 563, 613, 636, 640, 651, 671, 672, 678, 700, 820, 892, 893, 894, 895, 957, 961, 962, 964, 966, 967, 969, 971, 977, 978, 983, 986, 987, 988, 990, 991, 1002, 1015, 1016, 1017, 1020, 1023], "triag": [0, 361, 372, 375, 386], "pr": [0, 132, 359, 372, 375, 380, 405, 726, 967, 1019, 1021], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 65, 70, 71, 72, 73, 74, 75, 79, 81, 85, 86, 88, 89, 90, 93, 95, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 144, 145, 147, 151, 152, 153, 154, 155, 158, 162, 163, 167, 168, 169, 170, 171, 174, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 249, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 276, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 294, 295, 296, 300, 301, 302, 303, 304, 305, 306, 307, 310, 312, 313, 314, 315, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 358, 359, 361, 364, 365, 367, 369, 373, 374, 375, 376, 377, 378, 380, 381, 383, 384, 391, 394, 395, 397, 401, 403, 405, 406, 407, 409, 413, 417, 418, 423, 426, 429, 432, 433, 435, 438, 440, 444, 445, 446, 448, 450, 451, 453, 455, 458, 460, 468, 469, 470, 474, 477, 478, 481, 482, 483, 489, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 524, 526, 527, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 568, 569, 570, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 596, 597, 600, 601, 604, 605, 606, 608, 609, 613, 614, 615, 616, 618, 619, 620, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 655, 656, 657, 658, 659, 661, 663, 664, 665, 666, 671, 672, 675, 676, 677, 678, 679, 680, 681, 687, 690, 692, 703, 707, 708, 709, 722, 728, 742, 763, 766, 770, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 814, 815, 816, 817, 818, 824, 825, 827, 829, 830, 832, 833, 834, 835, 836, 840, 841, 842, 844, 847, 848, 849, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 872, 873, 874, 875, 876, 877, 884, 885, 886, 887, 889, 890, 893, 895, 896, 897, 898, 915, 916, 920, 921, 924, 925, 932, 936, 938, 941, 956, 957, 959, 961, 962, 964, 966, 967, 968, 970, 972, 973, 974, 975, 979, 980, 982, 983, 985, 987, 989, 990, 991, 993, 996, 1000, 1001, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1025], "arturo": [0, 37, 57, 116, 177, 182, 259, 261, 305, 343, 344, 345, 362, 1023, 1024], "amor": [0, 37, 57, 116, 177, 182, 259, 261, 305, 343, 344, 345, 362, 1023, 1024], "juan": [0, 362, 1009, 1020, 1021, 1022, 1023, 1024], "carlo": [0, 232, 362, 404, 407, 597, 627, 628, 959, 972, 1009, 1020, 1021, 1022, 1023, 1024], "alfaro": [0, 362, 1020, 1021, 1022, 1023, 1024], "jim\u00e9nez": [0, 362, 1017, 1020, 1021, 1022, 1023, 1024], "luci": [0, 264, 362, 1020, 1021, 1022, 1023, 1024], "liu": [0, 264, 362, 549, 711, 741, 967, 973, 1012, 1015, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1025], "martin": [0, 362, 707, 708, 709, 963, 967, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "loyola": [0, 362, 1022, 1023], "sylvain": [0, 362, 1013, 1018, 1019, 1020, 1021, 1022, 1023], "mari\u00e9": [0, 362, 1018, 1019, 1020, 1021, 1022, 1023], "chiara": [0, 362, 363, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "marmo": [0, 362, 363, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "maxwel": [0, 362, 1019, 1022, 1023, 1024], "norbert": [0, 362, 1011, 1021, 1022, 1023], "prein": [0, 362, 1021, 1022, 1023], "reshama": [0, 356, 362, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "shaikh": [0, 356, 362, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "albert": [0, 227, 362, 1016, 1017, 1018, 1021, 1022], "around": [0, 4, 26, 37, 52, 85, 113, 123, 156, 169, 174, 261, 297, 318, 320, 321, 330, 333, 343, 344, 345, 354, 367, 369, 372, 378, 383, 397, 401, 402, 405, 407, 457, 458, 501, 530, 606, 626, 635, 690, 780, 788, 830, 832, 834, 835, 836, 864, 963, 964, 966, 967, 973, 977, 981, 987, 988, 991, 1000, 1002, 1013, 1014], "lauren": [0, 355, 678, 682, 964, 1021, 1024], "burk": [0, 355, 1024], "francoisgoupil": [0, 355, 1023], "longer": [0, 4, 53, 113, 169, 183, 296, 313, 372, 374, 397, 401, 404, 405, 407, 435, 522, 549, 962, 966, 967, 969, 972, 982, 991, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "mathieu": [0, 2, 24, 48, 100, 189, 199, 220, 234, 259, 343, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1022], "blondel": [0, 2, 24, 48, 100, 189, 199, 220, 234, 259, 343, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1022], "lar": [0, 2, 14, 98, 147, 165, 176, 187, 217, 343, 344, 345, 369, 457, 458, 464, 487, 517, 523, 525, 528, 529, 531, 532, 534, 637, 638, 639, 640, 641, 642, 649, 650, 651, 664, 668, 669, 670, 671, 672, 989, 1000, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1022], "buitinck": [0, 2, 14, 343, 344, 345, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "noel": [0, 2, 109, 110, 111, 112, 1009, 1010, 1011, 1012, 1013, 1021], "daw": [0, 2, 109, 110, 111, 112, 1009, 1010, 1011, 1012, 1013], "dubourg": [0, 2, 153, 157, 991, 1009, 1013], "edouard": [0, 2, 1009], "duchesnai": [0, 2, 1009], "alexand": [0, 2, 397, 402, 521, 850, 1011, 1012, 1013, 1015, 1016, 1017, 1021, 1022, 1023], "fabisch": [0, 2, 1011, 1012, 1013, 1015], "virgil": [0, 2, 9, 1009, 1010, 1012], "fritsch": [0, 2, 9, 1009, 1010, 1012], "satrajit": [0, 2, 1009, 1010], "ghosh": [0, 2, 397, 1009, 1010], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1009, 1012, 1017, 1018, 1019, 1020, 1023], "gorgolewski": [0, 2, 1009, 1012], "jaqu": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 181, 194, 195, 196, 221, 335, 338, 1009, 1010, 1011, 1012], "grobler": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 181, 194, 195, 196, 221, 335, 338, 1009, 1010, 1011, 1012], "brian": [0, 2, 46, 694, 967, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1022, 1023], "holt": [0, 2, 1009], "arnaud": [0, 2, 1010, 1011, 1012, 1013, 1014, 1015], "joli": [0, 2, 1010, 1011, 1012, 1013, 1014, 1015], "thoui": [0, 2, 1009], "rai": [0, 2, 935, 967, 1009, 1019, 1021, 1022], "jone": [0, 2, 367, 1009], "kyle": [0, 2, 99, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021], "kastner": [0, 2, 99, 1011, 1012, 1013, 1020, 1021], "manoj": [0, 2, 42, 147, 180, 1012, 1013, 1014, 1015, 1016], "kumar": [0, 2, 42, 147, 180, 367, 397, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "robert": [0, 2, 48, 72, 147, 186, 369, 402, 514, 521, 614, 642, 707, 708, 709, 720, 850, 957, 963, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1024], "layton": [0, 2, 48, 1009, 1010, 1011, 1012, 1014], "wei": [0, 2, 981, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1022, 1025], "li": [0, 2, 321, 367, 625, 628, 682, 711, 741, 877, 956, 959, 967, 970, 977, 979, 982, 1009, 1010, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "paolo": [0, 2, 1009, 1013, 1019], "losi": [0, 2, 1009], "gill": [0, 2, 113, 114, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "loupp": [0, 2, 113, 114, 404, 541, 542, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "jarrod": [0, 2, 1018], "millman": [0, 2, 1018], "passo": [0, 2, 1009, 1010], "peter": [0, 2, 11, 16, 63, 109, 122, 124, 125, 259, 343, 344, 397, 434, 436, 443, 635, 775, 776, 963, 967, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1024], "prettenhof": [0, 2, 11, 16, 109, 122, 124, 125, 259, 343, 344, 1009, 1010, 1011, 1012, 1013, 1014], "venkat": [0, 2], "raghav": [0, 2, 121, 262, 300, 1013, 1014, 1015, 1016, 1017, 1021], "rajagopalan": [0, 2, 1017, 1021], "jacob": [0, 2, 1014, 1015, 1016], "schreiber": [0, 2, 1014, 1015, 1016], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1009, 1010], "jake": [0, 2, 11, 157, 199, 219, 246, 283, 291, 986, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1023], "vanderpla": [0, 2, 11, 157, 199, 219, 246, 283, 291, 986, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "ward": [0, 2, 36, 39, 44, 52, 54, 56, 62, 68, 165, 171, 405, 427, 431, 449, 516, 837, 1009, 1012, 1014], "farlei": [0, 2, 1009], "ron": [0, 2, 245, 1009], "weiss": [0, 2, 245, 397, 677, 1009], "respons": [0, 147, 169, 194, 198, 201, 268, 343, 369, 378, 385, 396, 397, 398, 404, 407, 432, 450, 468, 469, 470, 617, 618, 619, 660, 661, 684, 686, 688, 780, 781, 968, 974, 985, 993], "If": [0, 4, 11, 16, 27, 32, 42, 49, 55, 71, 82, 98, 118, 123, 130, 159, 163, 168, 179, 198, 213, 215, 258, 265, 273, 283, 291, 300, 305, 306, 330, 338, 339, 343, 344, 345, 352, 354, 358, 359, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 385, 386, 388, 391, 394, 395, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 417, 419, 420, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 498, 500, 501, 505, 508, 509, 510, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 697, 698, 699, 700, 702, 703, 704, 711, 712, 713, 714, 715, 716, 717, 721, 723, 726, 727, 730, 731, 733, 735, 736, 738, 739, 740, 741, 742, 743, 744, 746, 748, 749, 751, 752, 753, 754, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 788, 794, 796, 799, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 913, 919, 921, 923, 925, 930, 933, 935, 936, 938, 941, 942, 948, 951, 952, 953, 954, 956, 957, 959, 961, 962, 963, 964, 965, 967, 970, 971, 973, 974, 977, 979, 981, 982, 983, 984, 987, 988, 990, 993, 994, 1000, 1001, 1002, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1021, 1022, 1023], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 86, 90, 91, 92, 94, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134, 136, 137, 138, 139, 143, 144, 146, 147, 150, 151, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 191, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 210, 213, 215, 216, 217, 219, 220, 221, 222, 224, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 318, 319, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 341, 342, 345, 346, 348, 350, 351, 352, 357, 358, 359, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 379, 381, 384, 385, 386, 387, 388, 391, 393, 394, 395, 396, 397, 398, 399, 400, 403, 407, 408, 409, 410, 413, 415, 416, 417, 418, 425, 442, 443, 445, 447, 449, 457, 464, 466, 467, 471, 479, 489, 494, 495, 502, 517, 529, 531, 532, 533, 534, 541, 558, 560, 561, 563, 564, 569, 571, 572, 578, 581, 582, 584, 587, 589, 595, 602, 606, 607, 610, 615, 622, 624, 628, 636, 637, 640, 646, 647, 649, 653, 661, 669, 671, 672, 673, 680, 681, 682, 685, 697, 700, 701, 702, 707, 708, 709, 711, 713, 715, 717, 720, 721, 724, 728, 731, 736, 741, 743, 744, 748, 749, 751, 752, 753, 754, 756, 759, 760, 761, 762, 765, 766, 768, 777, 789, 790, 791, 792, 793, 794, 795, 804, 812, 814, 816, 818, 820, 824, 825, 834, 835, 836, 838, 846, 847, 850, 852, 855, 866, 867, 869, 871, 872, 874, 875, 876, 879, 883, 885, 894, 895, 896, 897, 900, 903, 904, 905, 910, 911, 920, 921, 930, 934, 935, 936, 938, 939, 943, 944, 945, 949, 950, 956, 957, 959, 960, 962, 965, 966, 968, 969, 970, 972, 973, 974, 975, 977, 978, 979, 980, 984, 985, 986, 987, 988, 989, 990, 993, 994, 996, 997, 998, 999, 1001, 1003, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "scientif": [0, 32, 136, 137, 138, 139, 232, 361, 366, 370, 383, 388, 397, 438, 448, 487, 991, 994], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 25, 26, 27, 30, 32, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 56, 57, 58, 62, 64, 65, 66, 70, 71, 72, 73, 75, 78, 80, 81, 82, 86, 89, 90, 92, 95, 96, 97, 98, 100, 103, 104, 106, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 127, 128, 130, 132, 133, 136, 142, 143, 144, 146, 147, 150, 152, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 181, 182, 184, 186, 187, 189, 191, 193, 195, 198, 199, 200, 201, 204, 206, 207, 210, 211, 212, 213, 214, 216, 219, 220, 223, 224, 227, 228, 230, 231, 232, 234, 237, 239, 240, 243, 244, 245, 246, 248, 249, 253, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 272, 276, 278, 280, 281, 283, 286, 287, 288, 289, 291, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 323, 326, 327, 328, 330, 331, 332, 333, 335, 338, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 358, 359, 360, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 383, 384, 385, 386, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 436, 455, 456, 457, 458, 459, 460, 461, 462, 487, 509, 517, 518, 520, 523, 535, 547, 548, 549, 555, 556, 568, 569, 575, 597, 603, 613, 618, 619, 624, 626, 637, 641, 644, 645, 652, 654, 659, 660, 661, 662, 663, 678, 697, 704, 706, 711, 731, 741, 749, 766, 805, 826, 827, 828, 830, 832, 833, 834, 835, 836, 847, 856, 857, 858, 864, 869, 870, 872, 873, 874, 875, 877, 880, 884, 888, 931, 933, 956, 957, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 979, 980, 981, 982, 983, 984, 986, 987, 988, 991, 993, 997, 998, 999, 1000, 1001, 1002, 1006, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025], "would": [0, 4, 6, 9, 26, 32, 45, 53, 55, 58, 70, 78, 80, 81, 86, 92, 100, 101, 123, 147, 150, 155, 156, 168, 169, 170, 171, 174, 182, 188, 198, 199, 200, 213, 216, 227, 245, 254, 258, 259, 264, 266, 268, 278, 284, 296, 300, 301, 305, 306, 313, 321, 330, 339, 343, 345, 354, 358, 367, 368, 372, 373, 374, 378, 380, 381, 383, 384, 385, 386, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 418, 432, 451, 454, 468, 469, 470, 475, 518, 520, 522, 527, 530, 538, 540, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 554, 556, 569, 570, 573, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 597, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 656, 658, 659, 660, 661, 662, 664, 665, 686, 688, 694, 698, 699, 706, 741, 767, 770, 774, 782, 784, 796, 809, 817, 818, 827, 835, 842, 869, 870, 872, 873, 874, 875, 876, 877, 882, 884, 885, 887, 890, 892, 893, 894, 895, 956, 957, 960, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 977, 982, 987, 988, 991, 993, 998, 1000, 1002, 1006, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "appreci": [0, 372], "citat": [0, 366, 369, 383], "paper": [0, 147, 174, 258, 369, 378, 383, 397, 399, 428, 435, 464, 490, 520, 527, 549, 627, 644, 652, 653, 657, 662, 665, 678, 773, 821, 830, 833, 876, 877, 963, 967, 970, 973, 982, 1002, 1009, 1016, 1017], "machin": [0, 4, 6, 8, 9, 27, 63, 116, 143, 144, 150, 155, 166, 170, 172, 210, 239, 258, 261, 264, 293, 298, 300, 305, 307, 312, 315, 326, 331, 338, 343, 345, 358, 359, 361, 365, 366, 367, 369, 370, 372, 375, 378, 379, 383, 384, 385, 387, 391, 395, 397, 401, 402, 404, 405, 407, 423, 425, 434, 457, 458, 464, 488, 490, 496, 502, 503, 504, 516, 518, 520, 527, 530, 541, 542, 543, 544, 545, 546, 550, 551, 552, 579, 580, 596, 597, 600, 605, 608, 620, 624, 625, 627, 629, 630, 631, 636, 637, 640, 641, 642, 643, 644, 645, 662, 668, 669, 678, 694, 699, 710, 720, 726, 728, 770, 773, 780, 809, 810, 824, 825, 830, 833, 840, 841, 842, 844, 862, 864, 870, 884, 885, 886, 887, 889, 890, 894, 895, 956, 957, 959, 960, 963, 964, 965, 967, 968, 970, 973, 974, 975, 977, 981, 983, 986, 987, 988, 989, 990, 991, 994, 995, 996, 998, 1002, 1003, 1004, 1006, 1009, 1011, 1021, 1022, 1023, 1024], "pythonet": [0, 11, 78, 79, 109, 110, 125, 186, 291, 369, 394, 397, 399, 402, 404, 405, 406, 437, 484, 505, 506, 514, 521, 527, 530, 549, 668, 669, 705, 706, 819, 821, 841, 842, 877, 920, 921, 963, 964, 967, 973, 977, 979, 982, 983, 1017, 1025], "al": [0, 11, 78, 79, 109, 110, 125, 186, 291, 369, 394, 397, 399, 402, 404, 405, 406, 437, 484, 505, 506, 514, 521, 527, 530, 549, 668, 669, 705, 706, 819, 821, 841, 842, 877, 920, 921, 963, 964, 967, 973, 977, 979, 982, 983, 1017, 1022, 1025], "jmlr": [0, 397, 652, 653, 662, 690, 963, 982], "12": [0, 4, 6, 14, 15, 40, 42, 43, 53, 55, 56, 57, 73, 74, 85, 119, 120, 124, 153, 154, 155, 163, 164, 168, 169, 171, 172, 178, 182, 184, 198, 206, 216, 219, 222, 223, 225, 227, 228, 230, 231, 237, 240, 241, 245, 246, 257, 258, 260, 261, 264, 270, 274, 304, 305, 306, 315, 338, 345, 369, 370, 377, 384, 386, 397, 401, 405, 429, 433, 435, 468, 469, 470, 471, 518, 520, 527, 556, 650, 655, 657, 671, 672, 675, 678, 679, 780, 781, 783, 800, 803, 815, 836, 852, 956, 957, 963, 965, 968, 977, 981, 982, 985, 993, 998, 1007, 1010, 1012, 1016, 1017, 1019, 1020], "pp": [0, 63, 257, 369, 397, 399, 405, 408, 409, 430, 434, 438, 448, 497, 519, 520, 527, 576, 621, 629, 650, 671, 672, 706, 711, 715, 725, 741, 754, 768, 819, 821, 823, 840, 860, 872, 960, 967, 969, 970, 980], "2825": 0, "2830": 0, "2011": [0, 47, 169, 220, 378, 402, 405, 521, 524, 526, 527, 533, 576, 613, 624, 644, 715, 957, 971, 981, 986, 1009], "bibtex": 0, "entri": [0, 16, 71, 75, 130, 163, 168, 169, 254, 310, 344, 354, 376, 378, 380, 384, 385, 394, 395, 397, 402, 404, 407, 449, 458, 517, 518, 523, 531, 532, 547, 548, 574, 577, 580, 597, 606, 618, 624, 626, 633, 637, 639, 641, 642, 645, 647, 649, 650, 651, 659, 661, 668, 669, 671, 672, 685, 690, 693, 695, 698, 701, 702, 704, 711, 714, 715, 716, 719, 720, 723, 728, 741, 743, 744, 768, 770, 773, 774, 775, 776, 795, 808, 824, 825, 832, 833, 834, 835, 836, 855, 861, 873, 953, 956, 957, 963, 967, 970, 977, 982, 988, 993, 1016, 1019, 1020, 1022], "articl": [0, 17, 70, 343, 367, 371, 372, 380, 401, 410, 461, 691, 963, 967, 1002, 1022], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 78, 79, 81, 82, 85, 86, 91, 95, 96, 97, 98, 99, 103, 104, 105, 111, 112, 113, 116, 118, 119, 120, 123, 124, 126, 129, 132, 133, 139, 142, 143, 145, 146, 147, 150, 151, 152, 154, 155, 156, 157, 158, 168, 177, 178, 180, 182, 183, 185, 186, 187, 190, 191, 197, 198, 200, 202, 203, 204, 206, 207, 212, 215, 216, 219, 220, 221, 227, 231, 232, 233, 234, 235, 243, 244, 245, 246, 247, 248, 249, 252, 253, 257, 258, 259, 261, 262, 263, 267, 268, 272, 273, 280, 281, 284, 285, 286, 287, 289, 290, 291, 300, 304, 305, 306, 320, 323, 326, 327, 328, 329, 330, 333, 339, 340, 343, 349, 350, 351, 371, 372, 376, 380, 398, 967, 990, 998], "p": [0, 11, 13, 24, 26, 27, 41, 61, 80, 81, 85, 92, 103, 122, 143, 153, 174, 210, 215, 216, 219, 221, 231, 246, 258, 264, 265, 291, 366, 367, 369, 370, 377, 380, 394, 395, 397, 399, 400, 402, 404, 406, 407, 408, 410, 428, 430, 432, 433, 436, 443, 455, 457, 460, 461, 464, 484, 514, 520, 524, 526, 527, 533, 535, 536, 537, 539, 541, 542, 543, 544, 545, 547, 550, 551, 552, 576, 578, 579, 580, 581, 582, 584, 585, 586, 590, 591, 592, 593, 594, 595, 601, 602, 613, 626, 629, 674, 676, 678, 680, 685, 691, 701, 709, 726, 737, 771, 773, 784, 790, 791, 792, 795, 809, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 840, 844, 845, 860, 872, 878, 894, 895, 896, 960, 961, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 977, 981, 982, 985, 997, 1000, 1009, 1010, 1012, 1015, 1017, 1024], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 26, 32, 37, 43, 47, 48, 49, 52, 53, 55, 58, 64, 67, 71, 75, 86, 98, 113, 116, 117, 118, 120, 123, 130, 131, 138, 141, 143, 146, 147, 148, 150, 156, 157, 159, 165, 167, 168, 169, 170, 174, 182, 184, 187, 198, 199, 200, 208, 216, 220, 231, 233, 236, 240, 248, 256, 258, 259, 260, 261, 264, 265, 267, 268, 270, 278, 294, 295, 296, 302, 305, 306, 310, 312, 314, 318, 319, 338, 343, 344, 345, 354, 367, 372, 373, 374, 376, 378, 383, 395, 398, 402, 404, 405, 406, 407, 473, 494, 495, 517, 518, 523, 524, 552, 567, 568, 569, 578, 581, 582, 584, 585, 586, 590, 591, 592, 593, 594, 595, 603, 613, 618, 621, 644, 699, 708, 711, 714, 715, 741, 768, 769, 772, 773, 783, 784, 787, 789, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 808, 841, 842, 846, 855, 858, 859, 863, 864, 899, 904, 905, 959, 962, 971, 974, 975, 977, 981, 1011, 1017, 1018, 1019, 1021, 1023], "g": [0, 4, 7, 8, 9, 10, 12, 16, 24, 25, 26, 27, 32, 53, 55, 65, 70, 73, 82, 86, 103, 113, 114, 122, 123, 130, 137, 150, 151, 152, 153, 155, 157, 158, 159, 163, 167, 180, 183, 198, 199, 200, 216, 220, 224, 233, 243, 258, 262, 263, 269, 276, 284, 300, 305, 321, 337, 345, 354, 358, 364, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 383, 385, 391, 395, 396, 397, 399, 401, 402, 404, 405, 406, 407, 409, 489, 514, 517, 519, 520, 523, 527, 541, 542, 543, 544, 545, 550, 551, 553, 554, 555, 556, 567, 568, 574, 575, 577, 579, 580, 583, 590, 597, 603, 608, 609, 616, 619, 620, 650, 660, 663, 666, 672, 678, 683, 706, 713, 723, 725, 748, 770, 782, 785, 786, 788, 796, 800, 805, 806, 807, 808, 811, 814, 819, 823, 826, 827, 828, 831, 833, 834, 835, 836, 840, 847, 849, 854, 857, 860, 862, 864, 867, 869, 870, 871, 872, 873, 874, 875, 884, 892, 893, 894, 895, 920, 921, 935, 956, 957, 961, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 977, 981, 982, 983, 988, 990, 991, 1002, 1009, 1013, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 60, 68, 75, 78, 81, 86, 92, 96, 97, 98, 103, 111, 112, 117, 118, 120, 129, 133, 136, 137, 138, 139, 144, 145, 146, 150, 153, 155, 157, 158, 159, 165, 168, 169, 182, 186, 199, 208, 212, 213, 216, 220, 258, 259, 261, 265, 272, 294, 300, 302, 305, 310, 312, 315, 319, 321, 323, 330, 335, 343, 344, 345, 350, 352, 354, 358, 360, 361, 366, 367, 369, 370, 372, 374, 375, 377, 380, 383, 384, 385, 386, 387, 392, 394, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418, 423, 424, 425, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 444, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 474, 476, 477, 478, 480, 483, 486, 487, 488, 489, 490, 494, 496, 497, 498, 499, 500, 506, 508, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 556, 567, 574, 575, 576, 577, 579, 580, 583, 588, 593, 594, 597, 603, 606, 613, 618, 619, 621, 623, 624, 625, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 656, 658, 659, 661, 662, 663, 664, 665, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 690, 691, 696, 697, 698, 702, 703, 705, 707, 708, 709, 710, 711, 716, 721, 722, 725, 728, 729, 732, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 749, 751, 752, 759, 760, 761, 762, 763, 766, 773, 776, 778, 780, 781, 782, 785, 786, 788, 793, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 848, 851, 855, 860, 864, 865, 868, 869, 870, 872, 873, 874, 875, 880, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 919, 920, 921, 952, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 980, 981, 982, 983, 986, 987, 988, 993, 994, 1000, 1001, 1002, 1004, 1009, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "v": [0, 4, 16, 17, 19, 27, 30, 33, 34, 36, 37, 38, 49, 55, 58, 68, 70, 75, 77, 80, 83, 84, 85, 87, 95, 97, 98, 101, 114, 116, 123, 165, 166, 171, 172, 176, 187, 198, 213, 217, 231, 244, 245, 248, 249, 251, 254, 273, 274, 310, 327, 344, 354, 359, 364, 369, 370, 372, 378, 380, 385, 394, 395, 396, 399, 400, 402, 404, 405, 418, 427, 431, 438, 448, 449, 450, 451, 456, 459, 460, 461, 462, 463, 468, 469, 470, 482, 498, 510, 516, 517, 523, 527, 531, 532, 536, 538, 540, 542, 544, 546, 548, 550, 551, 554, 556, 567, 575, 579, 580, 586, 592, 597, 616, 617, 620, 621, 625, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 656, 658, 659, 662, 664, 665, 674, 681, 685, 687, 690, 703, 721, 722, 724, 739, 740, 742, 773, 778, 782, 787, 794, 796, 806, 810, 812, 813, 814, 817, 818, 819, 827, 835, 837, 840, 842, 844, 845, 848, 851, 857, 858, 859, 864, 868, 878, 884, 885, 886, 887, 889, 890, 893, 895, 899, 961, 962, 963, 964, 967, 968, 969, 972, 975, 981, 982, 984, 1004, 1009, 1012, 1013, 1014, 1017, 1019, 1020, 1023, 1024], "b": [0, 8, 9, 10, 24, 26, 59, 65, 80, 101, 103, 110, 112, 113, 119, 123, 124, 133, 136, 137, 151, 152, 153, 158, 163, 180, 182, 183, 198, 199, 204, 216, 234, 236, 257, 261, 263, 268, 272, 276, 313, 321, 354, 367, 369, 372, 376, 377, 378, 394, 395, 397, 400, 401, 402, 405, 423, 468, 486, 527, 532, 552, 574, 575, 576, 577, 593, 594, 596, 597, 614, 632, 633, 634, 635, 644, 655, 658, 660, 662, 666, 673, 674, 691, 705, 715, 716, 775, 776, 793, 794, 831, 857, 858, 859, 860, 863, 864, 872, 899, 921, 922, 930, 957, 959, 963, 964, 965, 967, 970, 972, 977, 981, 982, 997, 1009, 1017, 1020, 1022, 1023, 1024], "o": [0, 17, 19, 27, 30, 38, 49, 55, 60, 61, 63, 64, 82, 85, 91, 97, 127, 158, 186, 191, 196, 198, 213, 233, 243, 258, 260, 267, 300, 301, 305, 311, 314, 322, 348, 358, 367, 369, 372, 388, 397, 399, 402, 404, 408, 410, 430, 433, 434, 436, 459, 461, 520, 590, 613, 652, 653, 678, 812, 840, 855, 896, 935, 936, 959, 961, 963, 964, 967, 968, 970, 971, 981, 982, 983, 1009, 1012, 1015, 1017, 1018, 1021, 1022, 1024], "m": [0, 8, 9, 11, 19, 26, 27, 44, 58, 59, 63, 64, 65, 80, 81, 95, 133, 155, 180, 198, 216, 258, 262, 291, 322, 326, 337, 343, 358, 359, 366, 367, 369, 370, 376, 378, 385, 388, 394, 395, 397, 399, 402, 404, 406, 408, 430, 431, 432, 436, 443, 459, 460, 486, 499, 514, 518, 520, 522, 527, 625, 631, 635, 650, 657, 671, 672, 675, 679, 694, 702, 711, 726, 741, 743, 744, 780, 781, 830, 855, 921, 946, 947, 957, 959, 961, 963, 964, 965, 967, 968, 969, 970, 971, 975, 977, 981, 983, 991, 1017, 1018, 1019, 1020, 1023, 1024, 1025], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 65, 75, 78, 79, 80, 81, 86, 95, 103, 106, 110, 113, 114, 119, 123, 124, 125, 133, 143, 151, 152, 153, 157, 158, 159, 162, 163, 168, 180, 182, 183, 187, 198, 205, 208, 216, 224, 230, 233, 243, 246, 249, 257, 258, 261, 263, 264, 265, 268, 271, 273, 276, 280, 285, 289, 291, 306, 314, 332, 345, 354, 367, 369, 373, 376, 383, 385, 394, 395, 397, 399, 400, 401, 402, 404, 405, 414, 418, 423, 432, 437, 439, 451, 455, 460, 464, 468, 469, 470, 484, 490, 499, 506, 520, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 574, 575, 576, 577, 592, 595, 596, 597, 613, 621, 625, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 678, 682, 702, 707, 708, 709, 713, 715, 766, 770, 773, 782, 796, 799, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 834, 835, 841, 842, 855, 860, 872, 879, 880, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 897, 933, 957, 959, 961, 963, 964, 967, 968, 969, 970, 971, 974, 975, 977, 981, 982, 983, 987, 1002, 1009, 1013, 1016, 1019, 1020, 1021, 1022, 1024], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 30, 31, 32, 37, 38, 42, 48, 49, 50, 60, 61, 63, 70, 71, 82, 89, 92, 95, 98, 103, 105, 121, 150, 158, 198, 206, 212, 214, 216, 224, 228, 230, 231, 232, 233, 246, 257, 258, 266, 276, 284, 285, 291, 296, 318, 319, 322, 329, 330, 335, 345, 366, 367, 369, 374, 378, 383, 395, 397, 399, 400, 402, 404, 405, 407, 408, 430, 432, 433, 438, 446, 449, 474, 479, 489, 512, 520, 522, 543, 544, 551, 552, 567, 568, 576, 600, 601, 605, 608, 609, 630, 631, 634, 655, 656, 657, 666, 674, 675, 678, 679, 683, 685, 691, 694, 707, 708, 709, 711, 741, 749, 753, 763, 766, 773, 794, 819, 821, 823, 824, 825, 840, 851, 855, 857, 858, 860, 872, 877, 894, 895, 899, 959, 961, 963, 964, 965, 966, 967, 969, 975, 977, 979, 982, 983, 990, 998, 999, 1000, 1012, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023], "perrot": [0, 1009], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 53, 55, 57, 61, 70, 78, 80, 81, 82, 85, 86, 98, 100, 101, 113, 120, 122, 123, 126, 136, 143, 146, 147, 158, 167, 168, 169, 174, 178, 182, 187, 188, 198, 199, 200, 216, 219, 220, 233, 254, 258, 259, 261, 263, 264, 272, 273, 284, 291, 302, 305, 310, 312, 338, 345, 350, 351, 352, 354, 358, 359, 360, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 383, 384, 385, 388, 391, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 423, 425, 427, 430, 431, 433, 436, 440, 449, 455, 456, 457, 458, 459, 461, 462, 482, 484, 486, 487, 488, 489, 510, 519, 521, 522, 524, 526, 527, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 563, 567, 568, 574, 575, 576, 577, 579, 580, 583, 589, 590, 592, 593, 594, 595, 596, 597, 603, 608, 609, 616, 619, 620, 621, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 670, 673, 674, 676, 678, 680, 683, 685, 687, 690, 691, 694, 695, 713, 714, 715, 716, 723, 726, 727, 740, 748, 752, 770, 773, 780, 781, 782, 785, 786, 788, 795, 796, 800, 805, 806, 807, 808, 809, 811, 823, 824, 825, 826, 827, 828, 830, 834, 835, 836, 840, 841, 842, 847, 849, 852, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 884, 885, 891, 892, 893, 894, 895, 899, 915, 920, 921, 923, 926, 927, 935, 942, 953, 956, 957, 959, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 977, 978, 981, 982, 983, 988, 990, 991, 1000, 1001, 1002, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "journal": [0, 81, 169, 258, 264, 366, 367, 369, 395, 397, 399, 404, 438, 448, 459, 520, 527, 613, 621, 631, 675, 678, 679, 691, 701, 716, 719, 720, 743, 744, 771, 809, 814, 860, 872, 956, 957, 961, 963, 964, 965, 968, 974, 979, 981, 982], "research": [0, 167, 258, 264, 367, 369, 383, 397, 487, 499, 621, 631, 678, 720, 809, 814, 956, 964, 968, 970, 982, 987, 988, 991], "volum": [0, 66, 79, 155, 367, 369, 397, 399, 407, 459, 520, 754, 963, 982, 991], "page": [0, 12, 17, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 219, 228, 229, 230, 237, 238, 239, 240, 248, 256, 258, 259, 265, 270, 297, 306, 311, 312, 314, 315, 320, 352, 358, 367, 369, 372, 374, 376, 378, 380, 386, 396, 397, 399, 459, 502, 503, 504, 614, 630, 814, 879, 921, 957, 967, 968, 993, 1002, 1007, 1009, 1013, 1014], "want": [0, 4, 12, 24, 25, 26, 55, 64, 71, 147, 163, 168, 198, 199, 200, 249, 258, 272, 296, 323, 327, 343, 354, 358, 359, 360, 370, 371, 373, 374, 376, 377, 378, 383, 384, 385, 386, 388, 391, 395, 396, 397, 398, 399, 404, 405, 406, 486, 489, 490, 496, 521, 535, 640, 641, 642, 644, 645, 652, 654, 660, 661, 662, 749, 830, 833, 849, 856, 877, 884, 956, 963, 966, 967, 968, 971, 973, 977, 978, 982, 987, 988, 993, 1001, 1009, 1023], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 55, 65, 66, 78, 80, 82, 86, 91, 92, 100, 116, 119, 123, 136, 147, 150, 155, 157, 168, 169, 171, 174, 177, 187, 211, 215, 216, 221, 227, 235, 238, 240, 243, 248, 249, 257, 261, 263, 265, 267, 278, 280, 284, 285, 302, 313, 321, 327, 340, 343, 344, 348, 352, 354, 359, 360, 365, 366, 367, 368, 372, 373, 374, 376, 377, 380, 383, 384, 385, 386, 388, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 413, 426, 427, 428, 430, 431, 432, 436, 440, 442, 446, 449, 450, 451, 453, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 483, 489, 509, 517, 519, 520, 523, 524, 526, 527, 528, 530, 536, 541, 542, 543, 544, 545, 546, 550, 551, 552, 569, 571, 572, 573, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 613, 630, 631, 657, 658, 660, 671, 672, 673, 674, 678, 682, 694, 710, 714, 715, 721, 722, 726, 763, 766, 768, 780, 781, 782, 805, 812, 813, 826, 827, 828, 830, 831, 832, 834, 835, 836, 843, 844, 848, 853, 856, 857, 859, 876, 877, 880, 884, 885, 892, 894, 904, 905, 910, 916, 935, 937, 956, 962, 963, 964, 966, 967, 968, 969, 970, 973, 974, 975, 980, 981, 982, 983, 987, 991, 993, 995, 997, 1000, 1001, 1002, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "api": [0, 12, 50, 165, 226, 228, 237, 241, 278, 344, 345, 360, 361, 365, 366, 372, 373, 375, 376, 381, 382, 383, 384, 386, 388, 391, 402, 404, 405, 415, 416, 419, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 482, 490, 494, 496, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 549, 550, 552, 553, 554, 555, 556, 565, 566, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 597, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 644, 663, 674, 675, 676, 677, 678, 688, 780, 781, 785, 786, 810, 828, 830, 832, 833, 836, 840, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 882, 888, 889, 933, 935, 956, 965, 966, 967, 970, 977, 981, 987, 988, 991, 993, 997, 999, 1004, 1006, 1007, 1008, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "design": [0, 13, 80, 130, 153, 167, 168, 179, 248, 300, 306, 352, 360, 366, 372, 377, 383, 384, 385, 386, 387, 397, 404, 406, 407, 501, 514, 618, 619, 634, 651, 655, 662, 666, 671, 782, 800, 801, 819, 821, 957, 963, 964, 967, 968, 977, 987, 988, 991, 995, 1011, 1018], "mai": [0, 8, 19, 25, 39, 44, 46, 56, 71, 86, 95, 109, 120, 147, 154, 156, 158, 159, 168, 174, 178, 182, 187, 204, 224, 261, 263, 265, 266, 294, 305, 319, 330, 343, 344, 345, 354, 358, 359, 360, 364, 366, 367, 368, 369, 371, 372, 374, 376, 377, 380, 383, 385, 386, 391, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 418, 425, 426, 427, 429, 430, 431, 432, 433, 435, 437, 438, 439, 440, 445, 448, 451, 455, 458, 468, 469, 470, 473, 474, 475, 482, 494, 495, 501, 520, 521, 524, 526, 530, 533, 534, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 560, 567, 580, 583, 588, 596, 597, 603, 606, 620, 621, 623, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 656, 658, 659, 660, 662, 663, 664, 665, 667, 670, 672, 674, 675, 677, 678, 679, 681, 683, 691, 698, 701, 702, 704, 705, 707, 708, 709, 711, 723, 741, 748, 770, 771, 782, 784, 785, 786, 787, 796, 797, 798, 799, 801, 802, 805, 809, 812, 817, 818, 819, 820, 821, 823, 826, 827, 828, 830, 832, 834, 835, 836, 842, 843, 844, 847, 849, 859, 861, 862, 863, 864, 865, 867, 873, 876, 877, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 902, 924, 925, 935, 956, 957, 959, 961, 963, 964, 967, 968, 969, 970, 971, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 988, 993, 999, 1000, 1009, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "consid": [0, 4, 12, 13, 25, 39, 55, 66, 71, 81, 95, 99, 120, 121, 123, 142, 146, 147, 163, 169, 198, 200, 258, 261, 265, 269, 278, 284, 285, 300, 312, 327, 335, 338, 343, 354, 358, 359, 360, 364, 371, 372, 374, 378, 380, 383, 385, 393, 397, 402, 403, 404, 405, 406, 407, 408, 409, 424, 430, 432, 436, 443, 460, 494, 495, 507, 519, 535, 536, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 571, 572, 574, 575, 577, 579, 593, 594, 606, 618, 619, 632, 638, 644, 645, 646, 648, 657, 665, 674, 675, 676, 678, 679, 680, 682, 686, 688, 691, 693, 695, 701, 711, 715, 719, 741, 771, 773, 777, 826, 827, 828, 830, 832, 834, 835, 836, 839, 841, 842, 847, 857, 858, 865, 879, 880, 889, 890, 892, 893, 894, 895, 951, 956, 962, 963, 964, 965, 967, 968, 970, 973, 974, 975, 977, 981, 982, 983, 988, 993, 1000, 1012, 1013, 1017, 1021, 1022, 1024], "softwar": [0, 358, 369, 372, 380, 383, 385, 405, 613, 621, 644, 957, 991], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 307, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 358, 360, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 418, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 490, 492, 493, 494, 495, 496, 498, 501, 505, 507, 509, 510, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 673, 674, 675, 676, 677, 678, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 703, 704, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 748, 749, 753, 754, 756, 758, 759, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 911, 912, 913, 914, 915, 916, 919, 921, 923, 924, 925, 926, 928, 929, 930, 931, 932, 934, 935, 936, 938, 941, 955, 956, 957, 959, 961, 962, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 986, 987, 988, 991, 994, 996, 997, 998, 999, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "2013": [0, 174, 369, 397, 401, 402, 522, 711, 741, 959, 967, 986, 1010, 1011], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 66, 67, 81, 113, 170, 190, 193, 207, 208, 263, 264, 265, 295, 304, 338, 369, 370, 378, 380, 394, 395, 397, 401, 402, 404, 407, 460, 502, 503, 504, 524, 526, 533, 541, 542, 543, 544, 551, 552, 576, 593, 594, 596, 597, 601, 605, 608, 609, 620, 634, 635, 644, 655, 658, 660, 666, 673, 675, 678, 679, 691, 701, 710, 711, 716, 741, 771, 821, 855, 892, 893, 894, 895, 956, 961, 963, 964, 967, 969, 970, 971, 975, 979, 981, 983, 1001, 1012, 1017, 1021, 1022, 1023, 1024], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 397, 405, 819, 969, 986], "languag": [0, 345, 377, 391, 402, 405, 981, 987, 988, 991, 994], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 20, 21, 25, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 56, 59, 60, 62, 65, 68, 69, 71, 72, 74, 76, 79, 81, 90, 92, 94, 95, 98, 99, 104, 106, 107, 112, 113, 115, 116, 119, 120, 121, 122, 123, 127, 128, 129, 131, 133, 136, 137, 138, 139, 144, 149, 150, 151, 152, 154, 157, 159, 160, 162, 165, 168, 169, 176, 177, 180, 181, 182, 183, 187, 188, 190, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 227, 230, 231, 232, 235, 237, 240, 243, 244, 245, 246, 247, 249, 252, 256, 258, 260, 261, 262, 263, 266, 272, 276, 278, 281, 282, 284, 286, 287, 288, 289, 291, 295, 296, 299, 301, 302, 303, 307, 308, 310, 312, 314, 315, 319, 320, 322, 323, 326, 327, 329, 334, 335, 338, 343, 349, 350, 351, 352, 357, 359, 361, 364, 365, 366, 368, 369, 372, 374, 375, 378, 379, 380, 381, 384, 388, 391, 393, 394, 395, 396, 399, 402, 403, 404, 405, 408, 409, 410, 412, 414, 415, 416, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 506, 507, 508, 509, 510, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 601, 603, 604, 608, 609, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 696, 697, 699, 703, 704, 706, 710, 712, 713, 714, 715, 716, 719, 721, 722, 723, 725, 726, 727, 739, 740, 742, 746, 748, 749, 754, 768, 769, 770, 772, 773, 774, 776, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 908, 909, 910, 920, 921, 930, 933, 938, 939, 941, 942, 943, 944, 945, 948, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 994, 995, 997, 998, 1000, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "mine": [0, 258, 344, 367, 397, 408, 430, 497, 549, 706, 719, 725, 768, 963, 967, 973, 979], "108": [0, 8, 1010], "122": [0, 46, 68, 112, 113, 134, 155, 163, 169, 202, 232, 378, 968], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 55, 57, 62, 65, 70, 74, 80, 81, 97, 98, 113, 115, 116, 117, 118, 123, 124, 126, 128, 138, 139, 147, 150, 156, 163, 167, 169, 170, 171, 182, 193, 199, 200, 212, 219, 220, 221, 227, 231, 243, 249, 256, 260, 264, 265, 273, 284, 285, 294, 296, 302, 304, 305, 306, 307, 321, 327, 329, 330, 343, 344, 350, 351, 358, 367, 369, 372, 377, 380, 381, 383, 384, 394, 395, 396, 397, 401, 403, 404, 405, 406, 407, 430, 433, 435, 436, 438, 455, 468, 469, 470, 539, 540, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 630, 656, 657, 665, 675, 678, 679, 711, 716, 727, 731, 741, 774, 775, 790, 792, 824, 825, 829, 858, 859, 863, 865, 886, 888, 889, 892, 893, 894, 895, 936, 956, 961, 962, 963, 964, 966, 967, 970, 971, 973, 975, 977, 979, 982, 983, 984, 987, 988, 993, 994, 996, 1002, 1009, 1010, 1012, 1013, 1017, 1020, 1021, 1022, 1023, 1024], "qualiti": [0, 6, 24, 37, 46, 48, 49, 58, 98, 119, 168, 204, 252, 256, 265, 266, 267, 372, 380, 383, 385, 391, 392, 396, 397, 399, 402, 438, 448, 455, 460, 543, 544, 545, 546, 550, 551, 728, 796, 876, 877, 892, 893, 894, 895, 921, 962, 964, 972, 979, 983, 987, 988, 991, 997, 998, 1004], "png": [0, 32, 896], "svg": 0, "logo": [0, 401, 789], "avail": [0, 5, 11, 12, 13, 41, 56, 57, 98, 118, 121, 122, 147, 150, 155, 159, 167, 168, 169, 187, 198, 206, 216, 220, 236, 255, 256, 261, 262, 265, 283, 284, 285, 291, 305, 310, 311, 312, 313, 315, 321, 323, 354, 358, 366, 367, 369, 370, 371, 372, 373, 377, 381, 384, 385, 388, 391, 394, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 433, 436, 437, 438, 439, 455, 456, 457, 458, 459, 460, 461, 462, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 494, 521, 535, 541, 542, 543, 544, 545, 546, 550, 551, 574, 577, 579, 580, 596, 597, 618, 619, 643, 651, 656, 658, 659, 660, 662, 675, 682, 685, 717, 718, 782, 785, 786, 796, 806, 807, 812, 813, 815, 816, 817, 818, 830, 841, 842, 851, 860, 868, 872, 877, 928, 935, 957, 961, 964, 966, 967, 968, 969, 970, 973, 977, 980, 981, 982, 986, 987, 988, 991, 993, 997, 1002, 1004, 1009, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1025], "doc": [0, 4, 8, 19, 343, 345, 359, 370, 372, 376, 377, 380, 385, 388, 390, 391, 405, 574, 575, 577, 763, 766, 775, 776, 807, 1002, 1009, 1013, 1023], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 366, 369, 371, 372, 373, 375, 376, 378, 380, 381, 383, 384, 388, 391, 394, 398, 402, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 951, 952, 953, 954, 955, 964, 977, 983, 987, 991, 1001, 1002, 1019, 1023], "directori": [0, 8, 280, 366, 370, 372, 374, 378, 380, 385, 388, 398, 427, 431, 436, 472, 485, 844, 845, 1023], "driven": [0, 987, 991], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 49, 53, 55, 60, 72, 75, 78, 82, 85, 100, 103, 113, 115, 116, 120, 123, 124, 130, 144, 147, 150, 155, 156, 169, 170, 179, 187, 198, 220, 223, 224, 227, 233, 258, 265, 272, 276, 278, 283, 295, 300, 312, 338, 343, 344, 354, 358, 359, 360, 366, 367, 369, 370, 371, 372, 374, 378, 380, 383, 385, 391, 394, 395, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 426, 429, 433, 435, 437, 440, 445, 482, 494, 518, 537, 553, 567, 568, 569, 575, 592, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 616, 618, 619, 624, 629, 641, 642, 658, 673, 678, 681, 686, 748, 750, 782, 785, 786, 796, 807, 811, 812, 823, 841, 842, 847, 856, 857, 862, 886, 887, 889, 900, 936, 956, 957, 960, 961, 962, 963, 964, 966, 967, 968, 970, 971, 972, 974, 975, 977, 981, 982, 983, 993, 997, 1000, 1018, 1019, 1021, 1022, 1025], "institut": [0, 369, 970], "privat": [0, 376, 385, 386, 900, 991, 1009, 1017, 1019, 1020, 1022, 1023], "grant": [0, 372], "assur": [0, 385, 780, 781, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "sustain": 0, "like": [0, 4, 12, 19, 52, 55, 58, 60, 70, 89, 92, 98, 103, 105, 112, 117, 123, 126, 150, 156, 168, 178, 198, 249, 258, 261, 262, 265, 266, 272, 287, 297, 300, 305, 306, 310, 321, 330, 343, 344, 354, 358, 360, 364, 366, 367, 370, 371, 372, 374, 376, 379, 380, 381, 383, 384, 385, 391, 393, 395, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 501, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 565, 567, 568, 569, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 902, 909, 910, 918, 923, 930, 931, 935, 938, 939, 940, 952, 954, 956, 959, 961, 962, 963, 964, 967, 969, 970, 971, 973, 974, 977, 982, 983, 987, 988, 990, 991, 993, 1000, 1002, 1006, 1009, 1012, 1013, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1025], "thank": [0, 4, 17, 25, 55, 86, 170, 174, 198, 267, 343, 344, 371, 380, 991, 1009, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "funder": 0, "member": [0, 343, 344, 367, 372, 375, 386, 397, 412, 428, 432, 434, 437, 439, 478, 541, 542, 549, 567, 644, 645, 652, 654, 662, 663, 664, 690, 691, 701, 703, 716, 721, 722, 742, 771, 778, 782, 884, 963, 970, 993, 1009, 1021, 1024], "consortium": [0, 991], "foundat": [0, 130, 372, 395, 970], "face": [0, 3, 15, 36, 53, 68, 94, 98, 107, 118, 165, 226, 241, 365, 372, 376, 397, 402, 404, 406, 435, 458, 479, 480, 481, 507, 518, 519, 523, 525, 526, 527, 544, 570, 643, 659, 683, 699, 796, 810, 827, 864, 889, 907, 970, 983, 984, 985, 996, 1001, 1004, 1009, 1017], "2022": [0, 359, 404, 691, 977, 1023, 1024], "microsoft": [0, 12, 370, 373, 388], "m\u00fcller": [0, 31, 301, 302, 386, 402, 521, 850, 971, 977, 981, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1023], "2020": [0, 367, 1019, 1020, 1021, 1022], "quansight": 0, "lab": [0, 367, 454, 522, 882, 991, 1020], "2021": [0, 370, 372, 388, 657, 1021, 1022], "columbia": 0, "univers": [0, 158, 343, 367, 369, 375, 397, 402, 405, 576, 773, 819, 823, 879, 963, 965, 967, 969], "2016": [0, 224, 366, 397, 956, 1014, 1015], "sydnei": 0, "2017": [0, 258, 366, 395, 397, 408, 430, 967, 1015, 1016], "receiv": [0, 19, 136, 165, 251, 255, 274, 345, 354, 372, 374, 380, 385, 401, 404, 490, 644, 688, 692, 694, 712, 767, 773, 774, 801, 810, 812, 813, 851, 889, 968, 971, 972, 981, 1019, 1020], "improv": [0, 4, 24, 25, 33, 78, 79, 82, 100, 106, 110, 111, 116, 119, 121, 122, 123, 125, 130, 143, 163, 168, 174, 184, 198, 206, 216, 259, 261, 278, 297, 305, 333, 344, 354, 359, 370, 375, 377, 378, 380, 381, 383, 385, 386, 391, 396, 402, 404, 406, 435, 436, 517, 518, 520, 523, 524, 525, 527, 528, 529, 532, 540, 543, 544, 545, 546, 547, 548, 550, 551, 596, 597, 629, 638, 650, 652, 653, 654, 658, 659, 660, 661, 662, 664, 671, 673, 678, 714, 715, 769, 772, 773, 833, 841, 842, 858, 860, 872, 892, 893, 895, 921, 961, 963, 964, 967, 970, 971, 981, 982, 983, 986, 987, 988, 991, 1000, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 34, 67, 106, 127, 132, 159, 167, 168, 182, 183, 193, 198, 199, 200, 216, 222, 231, 236, 255, 258, 261, 265, 267, 268, 300, 311, 312, 343, 352, 358, 367, 371, 372, 374, 379, 381, 385, 386, 395, 397, 398, 399, 401, 402, 403, 404, 405, 406, 409, 424, 425, 428, 432, 433, 435, 450, 453, 480, 484, 486, 490, 494, 495, 496, 511, 513, 515, 516, 517, 519, 521, 522, 523, 528, 531, 532, 534, 535, 536, 547, 548, 549, 578, 579, 580, 581, 582, 584, 585, 586, 592, 596, 597, 606, 618, 629, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 655, 658, 659, 660, 661, 663, 666, 667, 668, 669, 670, 673, 676, 684, 686, 688, 693, 695, 698, 699, 701, 704, 706, 709, 712, 714, 715, 716, 720, 721, 723, 724, 725, 726, 727, 728, 729, 737, 739, 743, 751, 767, 768, 769, 772, 773, 774, 780, 781, 785, 786, 807, 824, 825, 830, 847, 848, 851, 857, 860, 863, 868, 872, 876, 877, 879, 880, 884, 885, 888, 889, 890, 901, 919, 921, 932, 934, 958, 959, 963, 965, 967, 968, 970, 971, 972, 974, 977, 982, 998, 1000, 1002, 1010, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "It": [0, 4, 7, 8, 9, 16, 25, 37, 40, 53, 55, 58, 72, 78, 80, 82, 95, 98, 99, 105, 113, 115, 116, 119, 123, 130, 147, 155, 156, 157, 162, 163, 168, 169, 170, 178, 182, 186, 187, 195, 198, 212, 215, 216, 219, 220, 227, 232, 253, 254, 256, 258, 259, 261, 264, 265, 278, 281, 284, 285, 286, 288, 289, 291, 300, 304, 305, 307, 310, 326, 330, 338, 343, 344, 345, 352, 354, 358, 359, 360, 365, 367, 369, 370, 372, 374, 376, 377, 378, 380, 381, 383, 384, 385, 388, 391, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 420, 423, 424, 427, 428, 429, 430, 431, 433, 434, 435, 438, 445, 448, 453, 454, 455, 460, 464, 471, 473, 482, 494, 501, 510, 519, 521, 522, 524, 526, 527, 535, 536, 539, 540, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 575, 582, 588, 592, 593, 594, 597, 600, 601, 605, 606, 608, 609, 613, 616, 617, 618, 619, 627, 628, 629, 632, 633, 636, 638, 639, 640, 641, 644, 646, 647, 648, 649, 652, 653, 654, 656, 657, 658, 660, 662, 663, 664, 667, 668, 669, 670, 673, 675, 677, 678, 679, 681, 682, 683, 684, 686, 688, 690, 694, 695, 696, 702, 708, 719, 727, 728, 732, 743, 744, 747, 750, 766, 768, 782, 784, 785, 786, 788, 794, 795, 796, 808, 811, 820, 821, 826, 827, 828, 830, 833, 834, 835, 836, 840, 841, 842, 846, 847, 848, 852, 853, 854, 858, 861, 863, 873, 876, 877, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 908, 921, 935, 938, 941, 943, 944, 945, 946, 947, 948, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 980, 981, 982, 983, 987, 991, 993, 999, 1000, 1001, 1002, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "provid": [0, 5, 8, 11, 24, 27, 37, 42, 55, 60, 81, 95, 112, 117, 118, 128, 130, 150, 156, 168, 169, 177, 184, 186, 187, 190, 199, 207, 220, 224, 228, 229, 248, 258, 259, 260, 264, 288, 291, 296, 300, 304, 310, 311, 313, 315, 328, 335, 343, 344, 348, 349, 354, 358, 360, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 378, 380, 381, 383, 384, 385, 387, 388, 391, 393, 394, 396, 397, 398, 399, 401, 402, 404, 405, 406, 407, 408, 409, 417, 423, 426, 428, 429, 430, 432, 433, 435, 436, 438, 445, 446, 479, 480, 482, 484, 487, 518, 519, 520, 521, 524, 526, 533, 537, 538, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 574, 577, 579, 580, 587, 591, 597, 613, 618, 619, 620, 629, 632, 633, 638, 642, 643, 644, 645, 646, 647, 648, 649, 652, 654, 657, 659, 662, 663, 664, 667, 680, 685, 697, 720, 726, 749, 759, 763, 773, 775, 777, 781, 782, 784, 785, 786, 787, 789, 790, 791, 792, 794, 795, 796, 801, 802, 803, 813, 815, 818, 819, 820, 821, 822, 823, 826, 827, 828, 830, 831, 832, 834, 835, 836, 854, 855, 859, 861, 880, 884, 885, 888, 889, 892, 893, 894, 895, 899, 910, 915, 943, 944, 945, 956, 957, 959, 962, 963, 964, 966, 967, 968, 970, 971, 972, 973, 974, 975, 977, 980, 981, 982, 983, 984, 987, 988, 991, 993, 997, 1000, 1002, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "2012": [0, 81, 395, 404, 541, 542, 549, 625, 728, 956, 960, 967, 986, 1009], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 358, 359, 360, 365, 367, 370, 372, 377, 380, 383, 385, 386, 388, 396, 397, 399, 401, 402, 405, 427, 431, 433, 435, 445, 474, 475, 478, 482, 483, 486, 487, 488, 489, 490, 491, 493, 496, 521, 523, 527, 545, 546, 553, 554, 618, 634, 636, 640, 655, 666, 707, 708, 713, 730, 731, 733, 735, 736, 738, 770, 780, 781, 793, 821, 910, 956, 963, 966, 969, 970, 974, 977, 980, 988, 1000, 1009, 1013, 1015, 1017, 1019, 1020, 1022, 1023], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 345, 348, 349, 350, 351, 352, 354, 358, 359, 360, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 383, 385, 386, 388, 393, 394, 395, 396, 397, 399, 400, 402, 404, 405, 407, 408, 423, 427, 429, 430, 431, 432, 433, 436, 438, 441, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 458, 482, 485, 487, 505, 509, 520, 522, 524, 526, 533, 548, 553, 554, 555, 556, 576, 596, 605, 613, 614, 615, 616, 620, 625, 626, 629, 632, 636, 638, 640, 646, 648, 650, 652, 653, 659, 662, 663, 664, 671, 672, 676, 678, 680, 687, 777, 780, 781, 782, 784, 785, 786, 787, 789, 791, 796, 797, 798, 801, 803, 805, 806, 807, 808, 809, 812, 814, 819, 820, 821, 822, 823, 824, 825, 832, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 848, 849, 851, 854, 857, 858, 859, 863, 868, 876, 877, 881, 882, 886, 889, 890, 898, 923, 933, 956, 957, 959, 960, 963, 964, 966, 967, 968, 969, 970, 971, 972, 974, 975, 977, 979, 980, 981, 982, 983, 987, 991, 993, 998, 1000, 1001, 1002, 1009, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "host": [0, 116, 343, 367, 372, 376, 380, 381, 877, 935, 1002, 1025], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 57, 66, 69, 72, 86, 97, 98, 100, 103, 113, 115, 116, 119, 120, 124, 126, 132, 142, 162, 163, 165, 167, 168, 169, 170, 174, 177, 191, 198, 216, 219, 220, 221, 223, 227, 228, 229, 231, 233, 237, 245, 248, 253, 255, 258, 259, 260, 267, 268, 283, 284, 285, 299, 300, 304, 305, 308, 310, 311, 313, 318, 330, 337, 340, 343, 344, 348, 352, 354, 358, 364, 365, 367, 368, 369, 372, 374, 376, 377, 378, 380, 381, 384, 385, 386, 388, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 430, 432, 434, 436, 438, 443, 450, 455, 474, 482, 483, 489, 520, 521, 527, 535, 537, 538, 546, 547, 548, 553, 554, 567, 574, 575, 577, 583, 588, 596, 597, 598, 599, 606, 613, 614, 616, 625, 629, 638, 644, 645, 657, 658, 659, 660, 661, 662, 665, 673, 678, 682, 685, 690, 704, 748, 759, 763, 770, 775, 782, 785, 786, 787, 788, 789, 791, 796, 799, 801, 804, 805, 806, 807, 808, 809, 811, 813, 831, 839, 844, 845, 856, 857, 858, 860, 864, 865, 872, 884, 885, 886, 887, 888, 889, 890, 915, 956, 957, 959, 960, 961, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 980, 981, 982, 983, 985, 988, 990, 991, 993, 997, 1000, 1001, 1004, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1022, 1023, 1024, 1025], "event": [0, 4, 16, 198, 216, 261, 395, 397, 574, 575, 622, 819, 909, 963, 968, 969, 987, 991, 1015], "pari": [0, 369, 398, 452, 749, 852, 978, 1023], "saclai": 0, "center": [0, 4, 7, 8, 9, 13, 24, 26, 33, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 56, 59, 60, 61, 63, 64, 81, 91, 100, 102, 105, 121, 122, 123, 124, 147, 163, 169, 179, 190, 192, 198, 199, 209, 210, 222, 223, 227, 228, 243, 246, 247, 253, 259, 269, 283, 286, 288, 295, 300, 302, 303, 314, 320, 328, 330, 331, 332, 337, 344, 345, 367, 368, 369, 377, 396, 397, 399, 400, 402, 403, 404, 410, 426, 428, 429, 432, 433, 434, 435, 438, 440, 445, 446, 447, 448, 449, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 487, 498, 510, 520, 521, 527, 530, 536, 592, 595, 596, 597, 618, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 676, 680, 780, 849, 850, 853, 862, 864, 874, 875, 884, 885, 961, 963, 964, 966, 974, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1023], "scienc": [0, 38, 80, 158, 366, 369, 383, 397, 426, 440, 524, 526, 533, 674, 675, 679, 831, 957, 959, 963, 964, 967, 970, 979, 988, 991, 996, 1017], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 32, 33, 37, 40, 47, 53, 55, 57, 58, 60, 61, 64, 66, 71, 81, 89, 91, 95, 98, 100, 101, 105, 110, 115, 116, 123, 126, 130, 133, 146, 147, 150, 157, 158, 162, 167, 168, 169, 170, 171, 174, 177, 178, 182, 187, 188, 190, 191, 192, 194, 198, 200, 202, 207, 208, 213, 216, 221, 227, 234, 245, 248, 254, 255, 256, 258, 259, 261, 262, 265, 266, 267, 268, 276, 278, 283, 297, 301, 302, 305, 306, 310, 312, 313, 314, 321, 329, 330, 339, 343, 344, 345, 348, 352, 354, 358, 359, 360, 366, 367, 368, 369, 371, 372, 374, 376, 377, 378, 379, 380, 381, 383, 385, 386, 387, 388, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 427, 430, 431, 432, 433, 435, 436, 437, 438, 439, 441, 442, 443, 446, 448, 450, 455, 460, 473, 474, 476, 477, 478, 479, 480, 481, 482, 486, 487, 488, 489, 490, 491, 494, 495, 496, 498, 500, 520, 525, 526, 529, 533, 537, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 555, 567, 569, 570, 574, 575, 576, 577, 596, 597, 601, 602, 606, 613, 616, 618, 619, 620, 621, 629, 633, 634, 635, 636, 640, 643, 644, 645, 647, 652, 654, 655, 657, 659, 660, 661, 662, 664, 666, 674, 678, 681, 685, 689, 695, 706, 719, 735, 736, 739, 748, 756, 759, 763, 764, 765, 766, 768, 773, 775, 776, 779, 780, 781, 782, 785, 786, 788, 789, 790, 792, 794, 796, 800, 801, 805, 807, 808, 810, 811, 812, 813, 814, 816, 817, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 840, 844, 847, 848, 849, 851, 852, 854, 855, 856, 857, 858, 863, 864, 865, 868, 870, 884, 886, 887, 888, 889, 890, 892, 893, 894, 895, 900, 910, 913, 923, 938, 956, 957, 959, 961, 962, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 981, 982, 983, 984, 986, 987, 991, 993, 997, 999, 1000, 1001, 1002, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "2014": [0, 52, 366, 402, 404, 407, 516, 593, 594, 608, 609, 644, 678, 841, 842, 920, 921, 964, 971, 991, 1012], "2015": [0, 169, 366, 407, 694, 707, 708, 709, 841, 842, 967, 974, 991, 1013, 1014], "50": [0, 4, 7, 10, 14, 16, 24, 32, 33, 38, 50, 52, 59, 60, 65, 66, 70, 71, 85, 92, 95, 98, 105, 113, 116, 123, 128, 129, 134, 151, 153, 154, 155, 156, 167, 168, 169, 178, 182, 193, 198, 201, 205, 206, 210, 212, 214, 216, 219, 223, 224, 230, 231, 233, 240, 241, 253, 258, 260, 261, 266, 271, 278, 297, 300, 304, 312, 314, 319, 321, 323, 328, 337, 338, 344, 367, 369, 372, 377, 401, 404, 405, 406, 409, 428, 459, 486, 490, 509, 519, 525, 530, 539, 540, 555, 579, 580, 601, 603, 644, 645, 652, 654, 656, 662, 663, 664, 678, 699, 782, 796, 813, 833, 884, 893, 962, 963, 967, 968, 970, 973, 977, 1009], "2018": [0, 198, 216, 405, 436, 956, 967, 985, 991, 1016, 1017], "nyu": [0, 121, 180, 833], "moor": [0, 720, 967, 991], "environ": [0, 12, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 237, 238, 239, 240, 248, 256, 258, 259, 265, 270, 297, 306, 311, 312, 314, 315, 320, 352, 358, 367, 369, 370, 372, 378, 380, 383, 388, 391, 398, 485, 987, 988, 991, 1016, 1017], "student": [0, 97, 258, 964, 988, 991], "t\u00e9l\u00e9com": [0, 985], "paristech": [0, 24, 25, 42, 227, 985], "rv": [0, 121, 262, 300, 786, 794, 796, 956, 1009, 1010, 1013, 1014, 1015, 1016, 1017], "thierri": [0, 243, 245, 991, 1015, 1016, 1023], "guillemot": [0, 243, 245, 1015, 1016], "labex": 0, "digicosm": 0, "goix": [0, 1013, 1015, 1016, 1017, 1018], "mathurin": [0, 1020, 1022, 1023], "massia": [0, 1020, 1022, 1023], "2019": [0, 169, 370, 397, 438, 448, 678, 964, 974, 977, 1017, 1018, 1019], "dure": [0, 4, 5, 12, 50, 55, 58, 72, 75, 86, 100, 114, 120, 127, 144, 150, 155, 168, 169, 171, 187, 199, 206, 256, 260, 278, 312, 313, 358, 360, 370, 372, 374, 377, 385, 386, 397, 398, 402, 404, 405, 407, 408, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 445, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 599, 600, 601, 603, 605, 606, 608, 609, 611, 613, 614, 615, 616, 618, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 686, 774, 780, 781, 782, 785, 786, 796, 805, 806, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 872, 875, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 956, 957, 959, 963, 964, 970, 977, 979, 983, 997, 1002, 1004, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "phd": [0, 397, 404, 988, 991], "chan": [0, 822, 864], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 57, 58, 60, 64, 68, 81, 124, 131, 132, 133, 151, 156, 165, 168, 178, 191, 213, 219, 220, 224, 242, 244, 245, 250, 258, 278, 312, 320, 330, 344, 354, 359, 367, 372, 374, 380, 381, 383, 385, 397, 402, 404, 406, 407, 409, 428, 429, 433, 434, 435, 436, 437, 438, 439, 445, 446, 447, 448, 464, 498, 501, 517, 518, 519, 523, 524, 526, 529, 531, 532, 533, 534, 539, 540, 545, 546, 579, 593, 594, 596, 597, 605, 606, 613, 626, 631, 632, 633, 634, 638, 639, 644, 646, 647, 648, 649, 652, 653, 654, 655, 657, 662, 663, 664, 666, 667, 670, 676, 677, 678, 680, 681, 780, 781, 814, 833, 840, 841, 842, 880, 907, 920, 921, 936, 941, 942, 959, 963, 964, 971, 972, 973, 981, 983, 987, 999, 1001, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "were": [0, 4, 32, 70, 71, 74, 80, 81, 116, 120, 123, 144, 147, 155, 163, 198, 199, 228, 267, 269, 296, 297, 305, 311, 312, 314, 315, 321, 343, 345, 352, 354, 366, 367, 369, 372, 373, 376, 383, 385, 394, 398, 404, 405, 450, 453, 454, 482, 547, 548, 574, 577, 588, 785, 786, 801, 808, 881, 882, 918, 956, 967, 968, 983, 990, 1001, 1002, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "through": [0, 7, 115, 120, 158, 168, 219, 232, 253, 258, 261, 283, 304, 305, 328, 335, 345, 352, 369, 370, 372, 374, 379, 381, 385, 386, 388, 397, 400, 402, 404, 406, 407, 432, 450, 453, 458, 521, 543, 544, 547, 550, 551, 552, 567, 579, 580, 583, 633, 637, 639, 641, 644, 645, 647, 649, 651, 654, 662, 663, 674, 677, 706, 788, 860, 872, 876, 877, 892, 893, 894, 895, 927, 956, 957, 964, 967, 969, 970, 971, 973, 975, 977, 981, 982, 983, 991, 993, 1000, 1002, 1009, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025], "program": [0, 50, 344, 354, 359, 360, 369, 370, 372, 378, 383, 494, 621, 656, 874, 875, 963, 982, 983, 987, 988, 1009, 1011], "immanuel": [0, 1009, 1010, 1014], "bayer": [0, 1009, 1010, 1014], "kemal": [0, 20, 21, 1011, 1012], "eren": [0, 20, 21, 1011, 1012], "tr\u00e9segni": [0, 1011], "hamzeh": [0, 1012, 1013], "alsalhi": [0, 1012, 1013], "issam": [0, 294, 1015], "laradji": [0, 294, 1015], "maheshakya": [0, 1012, 1013, 1014], "wijewardena": [0, 1012, 1013, 1014], "xue": [0, 1013, 1014, 1015, 1017, 1018, 1021], "nelson": [0, 1015, 1016, 1021], "yenchen": [0, 1015], "lin": [0, 520, 644, 982, 1014, 1015, 1016, 1017], "neurodebian": 0, "debian": [0, 358, 370, 378], "packag": [0, 46, 53, 162, 278, 359, 365, 366, 369, 370, 372, 373, 374, 376, 378, 381, 383, 385, 388, 399, 404, 405, 438, 464, 632, 633, 935, 957, 963, 966, 970, 977, 983, 991, 996, 1009, 1015, 1017, 1018, 1019], "dr": [0, 369, 397, 1023], "jame": [0, 369, 401, 814, 968, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1021, 1022], "haxbi": 0, "dartmouth": 0, "colleg": [0, 167], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 53, 55, 56, 58, 62, 67, 71, 74, 78, 80, 81, 86, 90, 95, 111, 112, 123, 126, 127, 130, 131, 143, 150, 152, 155, 156, 157, 158, 159, 162, 163, 165, 168, 169, 170, 171, 174, 177, 179, 181, 182, 186, 187, 188, 192, 193, 198, 199, 206, 207, 212, 215, 216, 219, 221, 227, 231, 236, 244, 245, 246, 252, 253, 258, 259, 260, 261, 264, 266, 281, 284, 289, 295, 296, 300, 305, 311, 312, 313, 314, 315, 326, 327, 329, 330, 338, 340, 343, 344, 345, 352, 354, 358, 359, 360, 365, 366, 367, 369, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 388, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 418, 429, 433, 435, 437, 439, 445, 449, 451, 454, 468, 469, 470, 485, 494, 495, 501, 509, 510, 520, 522, 527, 534, 540, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 556, 558, 560, 574, 592, 595, 597, 618, 619, 621, 625, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 656, 658, 659, 664, 665, 668, 669, 675, 678, 679, 683, 684, 686, 687, 688, 693, 694, 701, 706, 711, 712, 723, 724, 725, 731, 739, 741, 742, 748, 767, 769, 772, 773, 774, 777, 780, 800, 801, 817, 818, 819, 820, 821, 822, 823, 827, 835, 842, 844, 851, 882, 885, 887, 890, 892, 893, 894, 895, 904, 905, 935, 956, 957, 959, 962, 963, 964, 966, 967, 968, 969, 970, 971, 973, 974, 977, 980, 981, 982, 983, 986, 987, 988, 990, 991, 993, 998, 1000, 1001, 1002, 1006, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "particip": [0, 371, 372, 386, 991], "could": [0, 4, 9, 13, 27, 37, 42, 53, 71, 72, 95, 98, 111, 112, 120, 123, 144, 150, 155, 163, 167, 168, 169, 198, 199, 207, 216, 223, 232, 233, 252, 258, 281, 286, 289, 313, 326, 327, 343, 348, 360, 372, 378, 380, 385, 388, 391, 395, 401, 404, 405, 409, 460, 519, 524, 593, 594, 615, 657, 784, 789, 791, 956, 957, 963, 964, 974, 975, 977, 982, 988, 1001, 1006, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "attend": 0, "psf": [0, 372], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 49, 55, 71, 78, 95, 113, 116, 127, 150, 168, 169, 170, 198, 202, 215, 216, 232, 258, 259, 260, 261, 263, 264, 265, 267, 268, 276, 310, 330, 338, 343, 344, 354, 358, 359, 360, 365, 366, 367, 370, 372, 373, 374, 375, 376, 378, 380, 383, 384, 385, 388, 391, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 407, 409, 411, 418, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 448, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 482, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 677, 678, 695, 707, 708, 709, 713, 741, 763, 768, 770, 773, 780, 781, 782, 784, 785, 786, 788, 794, 795, 796, 800, 801, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 902, 904, 905, 908, 913, 935, 938, 941, 956, 959, 962, 963, 964, 966, 967, 968, 969, 970, 975, 977, 982, 983, 988, 991, 993, 1000, 1001, 1002, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1022, 1023, 1024, 1025], "tinyclu": 0, "french": [0, 216, 306], "associ": [0, 11, 24, 25, 80, 150, 167, 168, 246, 306, 318, 320, 343, 380, 397, 399, 401, 402, 404, 405, 432, 435, 455, 456, 457, 458, 459, 460, 461, 462, 479, 480, 481, 510, 543, 547, 550, 591, 592, 616, 631, 644, 645, 652, 654, 660, 661, 662, 675, 681, 685, 716, 724, 807, 827, 835, 849, 861, 873, 881, 890, 892, 894, 910, 966, 967, 970, 977, 980, 991, 1001, 1009, 1021, 1025], "fond": [0, 991], "de": [0, 12, 24, 25, 26, 27, 74, 114, 130, 150, 151, 153, 154, 155, 156, 157, 159, 189, 232, 233, 306, 320, 338, 369, 621, 674, 749, 963, 964, 988, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 55, 62, 66, 72, 118, 123, 130, 144, 147, 155, 162, 169, 170, 187, 198, 199, 200, 216, 220, 232, 252, 255, 258, 259, 261, 267, 330, 338, 344, 352, 358, 367, 369, 372, 377, 378, 380, 383, 386, 397, 399, 402, 405, 407, 479, 480, 486, 490, 496, 632, 633, 884, 957, 963, 964, 967, 972, 973, 974, 988, 991, 998, 1000, 1001, 1009], "our": [0, 4, 5, 7, 11, 12, 42, 53, 56, 70, 71, 80, 81, 86, 95, 96, 109, 111, 117, 120, 123, 124, 142, 147, 150, 155, 157, 167, 168, 169, 170, 171, 198, 216, 221, 223, 252, 258, 261, 264, 265, 296, 300, 306, 311, 313, 323, 327, 333, 334, 335, 338, 343, 344, 345, 354, 359, 371, 376, 377, 380, 383, 384, 385, 386, 397, 401, 404, 405, 408, 430, 436, 549, 630, 678, 694, 706, 711, 723, 741, 826, 827, 828, 830, 832, 834, 835, 836, 956, 957, 963, 964, 967, 973, 977, 980, 981, 982, 988, 991, 993, 1000, 1001, 1002, 1016, 1017, 1019, 1020, 1023, 1024], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 358, 359, 364, 369, 370, 373, 374, 376, 380, 383, 384, 385, 386, 388, 391, 394, 395, 397, 398, 400, 401, 402, 406, 407, 423, 487, 521, 525, 527, 529, 532, 545, 546, 597, 602, 607, 610, 624, 625, 626, 627, 642, 652, 654, 659, 662, 673, 675, 678, 679, 685, 695, 782, 804, 812, 813, 814, 816, 822, 830, 841, 845, 864, 956, 961, 963, 964, 966, 967, 968, 974, 975, 981, 982, 988, 991, 993, 1004, 1009, 1013, 1014, 1017, 1021, 1022, 1023, 1024, 1025], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 43, 48, 52, 53, 54, 55, 60, 64, 75, 82, 91, 95, 97, 98, 110, 115, 116, 118, 119, 123, 132, 133, 147, 155, 156, 158, 165, 167, 168, 169, 177, 182, 184, 190, 191, 192, 198, 199, 200, 201, 207, 209, 213, 215, 216, 219, 220, 227, 233, 237, 240, 244, 246, 248, 256, 259, 260, 261, 262, 264, 265, 266, 268, 270, 276, 278, 283, 296, 300, 301, 305, 310, 311, 312, 313, 315, 318, 320, 321, 322, 327, 330, 335, 339, 343, 344, 345, 349, 352, 354, 358, 359, 360, 365, 367, 368, 369, 370, 372, 374, 376, 377, 378, 380, 381, 383, 384, 385, 386, 393, 394, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 418, 419, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 489, 494, 495, 501, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 569, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 686, 687, 688, 691, 695, 699, 700, 701, 702, 703, 704, 706, 707, 708, 711, 713, 714, 715, 717, 718, 720, 721, 722, 723, 730, 731, 733, 735, 736, 738, 741, 746, 754, 759, 763, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 788, 789, 791, 792, 794, 796, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 904, 905, 906, 910, 912, 913, 914, 915, 926, 930, 935, 942, 951, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 977, 980, 981, 982, 983, 987, 988, 991, 993, 994, 996, 997, 999, 1000, 1001, 1002, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "handl": [0, 4, 71, 116, 120, 126, 130, 174, 182, 233, 260, 265, 267, 278, 285, 306, 310, 343, 345, 358, 364, 366, 370, 372, 373, 374, 381, 383, 385, 404, 405, 482, 530, 563, 567, 568, 571, 572, 574, 575, 577, 596, 621, 632, 633, 638, 644, 645, 646, 647, 648, 654, 661, 662, 664, 667, 706, 773, 848, 857, 858, 884, 889, 896, 922, 964, 967, 968, 969, 970, 973, 975, 982, 983, 987, 988, 991, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 37, 49, 57, 62, 71, 75, 80, 82, 96, 97, 98, 100, 109, 112, 120, 127, 128, 130, 143, 144, 146, 154, 156, 163, 165, 168, 169, 170, 176, 177, 182, 184, 191, 192, 197, 199, 200, 202, 204, 213, 214, 216, 217, 222, 223, 228, 229, 230, 231, 233, 243, 245, 249, 251, 252, 258, 267, 274, 278, 282, 297, 300, 302, 304, 305, 307, 311, 312, 313, 314, 322, 325, 327, 332, 333, 338, 339, 341, 343, 344, 345, 352, 354, 358, 359, 364, 367, 368, 372, 373, 374, 377, 378, 380, 381, 383, 385, 386, 395, 396, 397, 398, 401, 403, 404, 405, 406, 407, 409, 423, 427, 431, 432, 436, 438, 442, 448, 449, 450, 451, 453, 454, 474, 482, 483, 489, 490, 494, 512, 518, 521, 522, 524, 526, 530, 533, 535, 537, 538, 539, 543, 544, 545, 546, 547, 548, 550, 551, 552, 558, 574, 575, 577, 578, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 621, 624, 629, 636, 638, 643, 644, 645, 646, 650, 651, 652, 654, 655, 658, 662, 663, 664, 671, 672, 673, 674, 675, 676, 677, 678, 680, 684, 685, 688, 692, 693, 698, 701, 703, 705, 706, 711, 712, 713, 720, 722, 724, 725, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 743, 744, 767, 770, 773, 774, 777, 780, 781, 782, 783, 787, 789, 790, 791, 792, 794, 800, 806, 810, 813, 832, 834, 835, 836, 839, 844, 845, 847, 848, 849, 852, 856, 857, 858, 859, 860, 861, 863, 864, 871, 872, 873, 874, 875, 877, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 904, 905, 919, 921, 925, 927, 930, 956, 957, 958, 959, 960, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 978, 979, 980, 981, 982, 983, 988, 1000, 1001, 1002, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "profit": 0, "organ": [0, 11, 70, 80, 343, 366, 371, 372, 386, 832, 987], "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 37, 39, 40, 43, 44, 46, 49, 53, 55, 56, 57, 58, 65, 67, 70, 71, 72, 75, 78, 80, 81, 86, 92, 97, 99, 100, 101, 106, 113, 114, 115, 116, 120, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 136, 142, 144, 146, 147, 150, 151, 155, 156, 157, 162, 163, 167, 168, 169, 171, 174, 177, 178, 182, 187, 191, 198, 199, 200, 204, 206, 212, 214, 215, 216, 219, 220, 221, 223, 227, 228, 231, 232, 233, 234, 236, 237, 243, 244, 248, 249, 252, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 272, 273, 276, 278, 283, 284, 285, 295, 300, 302, 303, 304, 305, 306, 307, 310, 312, 313, 314, 315, 318, 320, 321, 322, 330, 340, 343, 344, 345, 348, 352, 354, 358, 359, 360, 364, 366, 367, 369, 370, 372, 373, 374, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 446, 448, 449, 450, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 473, 509, 517, 518, 519, 520, 523, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 565, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 596, 597, 598, 599, 600, 601, 603, 605, 608, 613, 614, 615, 616, 618, 619, 620, 626, 628, 629, 630, 633, 634, 635, 638, 640, 641, 642, 644, 645, 647, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 666, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 695, 702, 703, 705, 706, 708, 710, 711, 719, 720, 721, 722, 728, 731, 741, 743, 763, 764, 765, 766, 767, 768, 774, 780, 781, 782, 785, 786, 787, 788, 790, 792, 796, 800, 801, 802, 803, 804, 805, 806, 808, 809, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 841, 844, 848, 851, 855, 857, 858, 859, 862, 863, 864, 865, 866, 868, 876, 877, 879, 880, 881, 884, 886, 889, 890, 892, 893, 894, 895, 896, 900, 913, 916, 920, 921, 923, 935, 936, 939, 942, 948, 951, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 979, 980, 981, 982, 983, 986, 987, 988, 991, 993, 995, 997, 1000, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "manag": [0, 86, 240, 357, 366, 370, 373, 374, 376, 380, 383, 385, 386, 404, 436, 454, 612, 882, 961, 983, 988, 991, 1002, 1004, 1022, 1025], "board": 0, "scipi": [0, 6, 13, 17, 19, 34, 41, 46, 47, 53, 54, 78, 79, 82, 96, 98, 101, 103, 122, 150, 168, 171, 184, 188, 200, 244, 248, 249, 255, 258, 266, 270, 278, 283, 288, 297, 311, 312, 318, 319, 358, 366, 367, 370, 372, 374, 378, 381, 383, 384, 385, 388, 390, 397, 402, 405, 436, 437, 438, 439, 443, 448, 449, 482, 489, 494, 518, 520, 521, 527, 530, 567, 568, 571, 572, 574, 575, 596, 597, 634, 635, 639, 643, 644, 645, 649, 652, 654, 655, 656, 658, 660, 662, 663, 664, 666, 670, 673, 677, 678, 681, 685, 745, 748, 763, 764, 765, 766, 775, 776, 786, 794, 796, 810, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 847, 856, 862, 863, 864, 867, 871, 874, 875, 884, 886, 887, 889, 890, 923, 938, 941, 956, 957, 963, 965, 968, 970, 971, 977, 981, 982, 986, 988, 996, 998, 1001, 1002, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "mission": [0, 344, 991], "foster": [0, 1017], "comput": [0, 4, 6, 7, 11, 13, 26, 37, 39, 41, 42, 46, 52, 54, 57, 58, 60, 61, 70, 72, 79, 80, 81, 82, 96, 105, 109, 113, 117, 118, 122, 123, 124, 125, 146, 150, 155, 157, 158, 162, 168, 169, 170, 171, 174, 178, 179, 182, 183, 184, 185, 186, 187, 198, 200, 206, 212, 215, 216, 220, 223, 228, 230, 231, 233, 236, 237, 239, 254, 256, 258, 259, 260, 261, 265, 267, 269, 278, 280, 282, 284, 285, 287, 288, 291, 300, 310, 314, 315, 319, 321, 330, 338, 343, 344, 345, 352, 359, 360, 361, 366, 367, 369, 372, 377, 378, 379, 381, 383, 384, 385, 387, 388, 391, 392, 394, 395, 396, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 443, 445, 447, 448, 449, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 502, 517, 518, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 560, 568, 571, 572, 575, 576, 577, 579, 580, 589, 590, 591, 592, 595, 596, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 710, 711, 712, 714, 715, 716, 719, 721, 723, 724, 725, 727, 728, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 849, 850, 853, 854, 859, 860, 861, 862, 863, 864, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 918, 919, 920, 921, 932, 933, 940, 942, 948, 956, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 977, 979, 980, 981, 982, 983, 987, 988, 991, 997, 998, 1001, 1002, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "particular": [0, 4, 11, 13, 37, 39, 40, 60, 71, 78, 92, 100, 104, 120, 123, 126, 154, 162, 168, 169, 198, 200, 206, 232, 236, 255, 259, 261, 267, 278, 287, 291, 300, 310, 311, 314, 344, 345, 354, 358, 366, 367, 370, 371, 372, 374, 376, 377, 378, 380, 381, 384, 385, 388, 397, 401, 402, 404, 405, 406, 407, 432, 455, 459, 482, 530, 549, 595, 639, 644, 649, 658, 660, 670, 673, 698, 713, 770, 816, 831, 903, 905, 957, 959, 961, 963, 967, 970, 971, 972, 973, 975, 977, 988, 991, 1001, 1009, 1012, 1016, 1017, 1018, 1020, 1022, 1023, 1024], "As": [0, 4, 7, 25, 27, 30, 40, 43, 53, 55, 57, 58, 66, 82, 86, 100, 110, 111, 117, 120, 122, 124, 129, 142, 150, 155, 163, 168, 170, 174, 177, 180, 182, 187, 189, 198, 202, 206, 216, 224, 246, 253, 255, 256, 258, 259, 261, 271, 276, 283, 301, 313, 321, 330, 344, 345, 348, 350, 351, 354, 358, 359, 367, 370, 371, 372, 374, 376, 377, 384, 385, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 432, 479, 540, 548, 552, 605, 618, 641, 642, 658, 660, 673, 720, 743, 749, 826, 827, 828, 830, 832, 863, 956, 961, 963, 964, 966, 967, 968, 970, 974, 977, 981, 982, 983, 988, 991, 993, 997, 1000, 1001, 1002, 1009, 1015, 1020, 1025], "fiscal": 0, "home": [0, 12, 27, 34, 53, 112, 130, 154, 156, 158, 159, 177, 190, 207, 244, 303, 307, 310, 315, 335, 349, 367, 370, 380, 388, 396, 472, 485, 665, 991], "ensur": [0, 41, 57, 82, 92, 116, 117, 171, 198, 220, 253, 261, 296, 352, 354, 358, 359, 372, 374, 376, 377, 378, 386, 388, 395, 397, 398, 401, 409, 455, 519, 520, 527, 597, 613, 682, 691, 767, 774, 805, 877, 904, 905, 921, 927, 933, 963, 964, 967, 977, 983, 997, 1011, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "monei": [0, 216, 991], "when": [0, 4, 9, 10, 11, 24, 25, 26, 27, 39, 40, 43, 56, 60, 67, 70, 71, 72, 78, 80, 81, 86, 95, 98, 99, 100, 103, 113, 116, 119, 120, 121, 123, 126, 130, 131, 132, 144, 150, 162, 167, 168, 169, 170, 171, 177, 178, 182, 187, 189, 191, 195, 198, 200, 203, 214, 227, 228, 229, 233, 240, 244, 246, 254, 257, 258, 259, 260, 261, 265, 267, 268, 278, 280, 284, 285, 286, 300, 302, 304, 305, 306, 307, 310, 311, 312, 313, 314, 320, 321, 323, 330, 333, 334, 338, 343, 344, 345, 348, 354, 358, 359, 360, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 388, 391, 394, 395, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 413, 418, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 468, 469, 470, 471, 475, 476, 477, 478, 482, 486, 487, 488, 489, 490, 491, 494, 495, 496, 498, 501, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 564, 567, 568, 569, 570, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 592, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 686, 687, 688, 690, 691, 693, 694, 698, 699, 702, 712, 713, 714, 715, 717, 719, 720, 723, 727, 731, 733, 736, 739, 740, 742, 746, 748, 752, 753, 754, 756, 759, 763, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 778, 780, 781, 782, 785, 786, 787, 788, 796, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 871, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 903, 904, 905, 911, 915, 919, 920, 921, 922, 924, 925, 928, 935, 936, 956, 957, 959, 961, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 977, 979, 980, 981, 982, 983, 988, 991, 993, 999, 1000, 1001, 1002, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "need": [0, 4, 9, 12, 32, 46, 48, 53, 55, 57, 82, 97, 116, 120, 122, 123, 124, 130, 147, 150, 155, 162, 163, 168, 186, 200, 215, 216, 220, 227, 230, 232, 237, 243, 244, 248, 249, 256, 258, 260, 261, 263, 278, 280, 305, 310, 321, 330, 338, 343, 344, 354, 358, 359, 360, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 391, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 413, 423, 427, 431, 435, 451, 489, 527, 537, 558, 568, 569, 574, 575, 576, 577, 613, 621, 624, 625, 626, 628, 635, 652, 654, 657, 662, 665, 678, 706, 707, 708, 709, 766, 770, 780, 781, 782, 785, 786, 796, 797, 798, 805, 813, 816, 824, 825, 841, 844, 847, 851, 856, 857, 861, 879, 886, 889, 956, 957, 959, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 980, 981, 982, 983, 988, 991, 999, 1000, 1001, 1002, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "keep": [0, 6, 42, 75, 98, 100, 116, 146, 162, 167, 168, 169, 170, 171, 182, 198, 199, 200, 206, 216, 248, 253, 256, 304, 305, 313, 319, 330, 343, 344, 348, 354, 358, 359, 364, 372, 376, 384, 385, 395, 397, 398, 399, 400, 401, 402, 418, 436, 451, 468, 469, 470, 471, 479, 480, 520, 526, 527, 530, 533, 540, 542, 544, 546, 548, 551, 554, 556, 581, 584, 586, 589, 597, 620, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 662, 663, 664, 665, 694, 800, 817, 818, 827, 835, 841, 842, 880, 885, 887, 890, 893, 895, 963, 968, 972, 975, 977, 988, 991, 993, 998, 1000, 1002, 1004, 1009, 1014, 1017, 1018, 1022, 1023, 1025], "while": [0, 4, 7, 8, 10, 12, 17, 24, 27, 34, 37, 39, 43, 44, 48, 55, 62, 66, 70, 73, 75, 92, 99, 100, 110, 113, 116, 117, 127, 130, 147, 151, 156, 158, 159, 162, 167, 168, 169, 170, 174, 177, 179, 182, 187, 192, 198, 200, 214, 227, 230, 231, 234, 244, 245, 249, 252, 253, 257, 258, 259, 261, 265, 266, 267, 268, 269, 271, 280, 300, 301, 302, 305, 306, 307, 310, 313, 327, 330, 343, 345, 352, 354, 359, 364, 365, 366, 367, 368, 371, 372, 374, 376, 377, 378, 380, 381, 383, 385, 386, 391, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 409, 430, 450, 453, 454, 469, 471, 482, 507, 518, 538, 543, 544, 545, 546, 550, 551, 552, 553, 554, 555, 556, 561, 568, 574, 575, 576, 577, 580, 583, 588, 592, 620, 629, 632, 633, 635, 642, 643, 644, 645, 662, 663, 664, 665, 694, 714, 715, 723, 739, 759, 763, 768, 769, 772, 773, 777, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 799, 800, 805, 806, 807, 808, 809, 811, 819, 830, 832, 834, 835, 836, 843, 844, 845, 846, 847, 860, 872, 877, 882, 884, 885, 892, 893, 894, 895, 900, 925, 956, 957, 960, 961, 963, 964, 966, 967, 968, 969, 970, 973, 974, 977, 979, 982, 983, 987, 988, 993, 999, 1000, 1002, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 46, 70, 198, 216, 305, 380, 383, 385, 402, 404, 405, 507, 764, 765, 982, 987, 991, 1017, 1018, 1019], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 367, 372, 374, 377, 381, 386, 388, 398, 402, 404, 406, 429, 547, 548, 571, 572, 706, 924, 925, 977, 983, 987, 988, 993, 1002, 1020], "toward": [0, 26, 27, 63, 82, 117, 123, 129, 150, 170, 177, 202, 203, 224, 372, 385, 397, 434, 438, 448, 662, 664, 681, 858, 966, 981, 983, 986, 988], "cover": [0, 52, 174, 198, 216, 354, 364, 367, 372, 384, 621, 706, 777, 967, 968, 986], "travel": 0, "expens": [0, 56, 116, 130, 150, 167, 169, 228, 255, 267, 330, 343, 344, 345, 360, 378, 385, 397, 398, 401, 404, 405, 435, 454, 494, 782, 785, 786, 796, 807, 882, 884, 964, 966, 977, 982, 987, 991, 1002, 1013], "well": [0, 4, 9, 12, 24, 25, 27, 39, 48, 53, 57, 58, 62, 70, 78, 86, 111, 113, 116, 121, 123, 128, 130, 147, 155, 157, 167, 168, 169, 170, 174, 182, 186, 196, 198, 199, 200, 202, 206, 219, 220, 221, 224, 227, 231, 236, 245, 258, 265, 267, 269, 273, 278, 283, 284, 285, 307, 311, 312, 313, 314, 315, 338, 343, 344, 345, 354, 367, 369, 371, 372, 376, 378, 380, 381, 383, 384, 385, 386, 395, 397, 399, 401, 402, 404, 407, 408, 411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 445, 446, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 686, 707, 708, 709, 770, 773, 775, 778, 780, 781, 782, 785, 786, 796, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 919, 920, 956, 957, 959, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 977, 980, 981, 983, 984, 987, 988, 991, 1001, 1002, 1009, 1010, 1013, 1015, 1016, 1017, 1020], "budget": [0, 120, 819, 820, 821, 822, 823, 956], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 170, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 358, 359, 360, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 384, 385, 386, 388, 389, 390, 391, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 477, 479, 481, 482, 483, 486, 487, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 563, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 748, 749, 751, 753, 754, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 904, 905, 910, 915, 918, 919, 921, 923, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 938, 941, 942, 948, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 985, 987, 988, 990, 991, 993, 994, 997, 998, 999, 1000, 1001, 1005, 1007, 1011], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 26, 32, 37, 53, 66, 71, 72, 80, 82, 85, 86, 92, 98, 113, 114, 116, 119, 123, 124, 127, 147, 150, 157, 162, 167, 168, 169, 170, 174, 186, 187, 191, 198, 199, 200, 202, 206, 212, 214, 216, 219, 220, 221, 223, 227, 228, 230, 232, 233, 234, 244, 253, 254, 258, 261, 264, 265, 266, 276, 278, 280, 284, 285, 295, 300, 301, 304, 310, 311, 312, 313, 314, 315, 319, 321, 323, 330, 343, 352, 358, 359, 366, 369, 370, 372, 373, 374, 376, 378, 379, 383, 384, 385, 388, 392, 395, 396, 397, 399, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 454, 455, 458, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 473, 476, 482, 484, 490, 495, 501, 505, 513, 516, 520, 524, 525, 526, 527, 529, 530, 533, 535, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 571, 572, 574, 575, 576, 577, 579, 580, 583, 585, 586, 588, 589, 590, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 618, 619, 621, 622, 624, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 685, 686, 689, 693, 694, 699, 701, 706, 707, 708, 709, 713, 714, 715, 717, 719, 723, 726, 727, 731, 739, 740, 743, 748, 749, 753, 755, 759, 763, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 809, 811, 813, 816, 817, 818, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 851, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 900, 910, 911, 920, 921, 930, 935, 942, 956, 957, 959, 960, 961, 962, 964, 965, 966, 967, 968, 970, 971, 973, 974, 975, 977, 980, 981, 982, 983, 984, 986, 987, 988, 990, 993, 1000, 1001, 1002, 1004, 1007, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025], "regard": [0, 5, 7, 11, 53, 55, 71, 100, 138, 150, 155, 169, 170, 187, 195, 200, 221, 233, 260, 267, 268, 338, 344, 368, 372, 373, 377, 383, 385, 391, 396, 397, 402, 404, 405, 407, 429, 433, 438, 445, 448, 487, 600, 605, 642, 644, 687, 728, 781, 788, 808, 826, 827, 960, 963, 967, 969, 970, 972, 974, 981, 982, 983, 995, 1002, 1016, 1019], "might": [0, 4, 5, 31, 42, 44, 60, 62, 70, 110, 119, 128, 144, 156, 163, 168, 169, 170, 174, 198, 216, 227, 258, 260, 295, 312, 340, 354, 358, 359, 366, 370, 372, 373, 374, 376, 377, 378, 380, 383, 385, 386, 388, 391, 395, 398, 401, 402, 403, 404, 405, 407, 420, 429, 474, 482, 487, 489, 494, 501, 509, 522, 541, 542, 543, 550, 565, 566, 568, 596, 597, 613, 636, 640, 641, 642, 644, 645, 662, 664, 678, 742, 777, 785, 786, 808, 833, 849, 864, 877, 896, 898, 900, 904, 905, 921, 936, 956, 957, 959, 961, 963, 964, 966, 967, 969, 970, 974, 975, 977, 982, 983, 1002, 1010, 1012, 1017, 1018, 1020, 1023, 1024, 1025], "pai": [0, 216, 372], "dn": [0, 970], "continu": [0, 17, 19, 42, 120, 121, 150, 165, 169, 199, 206, 216, 220, 223, 239, 244, 248, 249, 296, 299, 305, 306, 308, 312, 313, 352, 367, 370, 374, 375, 376, 377, 380, 383, 385, 386, 388, 397, 402, 404, 454, 478, 578, 581, 582, 585, 586, 593, 594, 595, 618, 632, 633, 638, 639, 643, 646, 647, 648, 649, 711, 727, 741, 794, 796, 847, 849, 851, 853, 854, 863, 864, 865, 881, 882, 893, 930, 956, 963, 964, 967, 968, 970, 971, 977, 983, 988, 990, 991, 993, 1000, 1006, 1009, 1011, 1012, 1017, 1022, 1023, 1024], "integr": [0, 42, 71, 144, 158, 187, 296, 312, 370, 374, 375, 376, 378, 380, 385, 388, 402, 407, 432, 701, 740, 771, 942, 966, 974, 991, 996, 1010, 1012, 1013, 1021, 1022], "servic": [0, 4, 228, 372, 376, 991, 1017], "azur": [0, 372], "cirru": [0, 372], "cl": [0, 8, 12, 16, 379, 385, 894], "circlecl": 0, "free": [0, 5, 55, 155, 156, 163, 197, 248, 300, 366, 371, 372, 373, 380, 383, 388, 405, 407, 438, 595, 657, 840, 890, 956, 959, 963, 967, 988, 1017], "cpu": [0, 61, 259, 278, 315, 358, 359, 370, 378, 385, 388, 405, 482, 618, 633, 637, 639, 641, 644, 645, 647, 649, 651, 652, 654, 662, 665, 782, 796, 805, 806, 807, 828, 836, 877, 935, 967, 993, 997, 1002, 1014, 1023, 1024], "server": [0, 358, 369, 370, 482, 1017], "anaconda": [0, 359, 370, 376], "inc": [0, 70, 257, 957, 979, 991], "storag": [0, 345, 385, 644, 645, 652, 654, 662, 663, 664, 884, 970, 982, 1012, 1017], "thei": [0, 4, 26, 27, 37, 50, 57, 82, 97, 111, 117, 118, 120, 122, 124, 126, 143, 146, 150, 151, 155, 168, 169, 182, 184, 187, 193, 198, 199, 216, 220, 223, 227, 233, 252, 255, 258, 259, 261, 267, 278, 280, 295, 300, 305, 312, 314, 343, 344, 350, 351, 354, 358, 359, 360, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 380, 381, 383, 384, 385, 386, 394, 396, 397, 398, 399, 400, 402, 404, 406, 407, 409, 426, 428, 432, 433, 439, 440, 445, 453, 482, 494, 495, 519, 521, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 574, 577, 596, 605, 615, 629, 632, 633, 638, 644, 645, 646, 647, 648, 656, 658, 662, 664, 667, 673, 747, 748, 750, 753, 759, 774, 782, 796, 813, 819, 820, 821, 822, 823, 841, 844, 846, 852, 863, 864, 886, 889, 892, 893, 894, 895, 899, 956, 957, 959, 961, 963, 966, 967, 968, 969, 970, 972, 973, 974, 975, 977, 978, 979, 981, 982, 983, 991, 993, 997, 999, 1000, 1002, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "stage": [0, 7, 26, 72, 115, 121, 124, 370, 376, 393, 397, 404, 434, 539, 540, 545, 546, 547, 548, 574, 575, 577, 588, 964, 977, 986, 1017, 1021], "nightli": [0, 359, 375, 376], "build": [0, 4, 7, 17, 32, 43, 55, 67, 74, 99, 119, 121, 127, 133, 144, 146, 161, 162, 164, 165, 168, 206, 263, 266, 278, 296, 297, 301, 306, 307, 345, 354, 358, 359, 360, 368, 374, 375, 376, 377, 378, 385, 388, 390, 396, 397, 398, 401, 404, 405, 428, 476, 487, 489, 510, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 571, 572, 574, 575, 577, 613, 614, 616, 677, 699, 700, 783, 787, 791, 800, 804, 806, 845, 862, 864, 892, 893, 894, 895, 897, 917, 956, 957, 964, 967, 971, 973, 977, 982, 983, 987, 988, 991, 994, 996, 1000, 1001, 1009, 1012, 1014, 1015, 1016, 1018, 1021], "applic": [3, 5, 19, 49, 55, 80, 165, 174, 198, 215, 221, 252, 261, 300, 358, 360, 367, 369, 372, 374, 378, 380, 381, 383, 385, 395, 397, 401, 402, 403, 404, 407, 409, 430, 432, 438, 482, 484, 518, 519, 520, 539, 540, 615, 674, 675, 676, 680, 698, 714, 715, 723, 768, 769, 772, 810, 956, 963, 964, 965, 966, 967, 971, 973, 979, 983, 987, 988, 991, 1000, 1002, 1009, 1010, 1015, 1017, 1020], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 55, 57, 66, 95, 110, 113, 116, 118, 123, 124, 150, 165, 170, 174, 177, 182, 184, 187, 191, 192, 198, 200, 215, 216, 221, 227, 228, 234, 239, 256, 258, 263, 267, 268, 272, 278, 283, 290, 304, 313, 327, 330, 338, 339, 343, 344, 354, 358, 367, 368, 369, 370, 371, 373, 374, 377, 378, 381, 383, 385, 395, 396, 397, 399, 401, 403, 404, 405, 406, 407, 408, 409, 430, 433, 435, 436, 438, 443, 448, 451, 464, 489, 494, 495, 501, 502, 503, 504, 509, 510, 514, 517, 519, 523, 525, 528, 529, 530, 531, 532, 533, 534, 537, 538, 543, 547, 550, 553, 557, 559, 575, 596, 617, 629, 634, 636, 638, 640, 641, 642, 643, 644, 645, 650, 651, 652, 654, 655, 658, 659, 660, 661, 662, 663, 665, 666, 671, 672, 673, 674, 675, 677, 679, 681, 694, 702, 714, 715, 720, 724, 769, 772, 773, 780, 781, 783, 784, 785, 786, 787, 789, 790, 791, 792, 797, 798, 799, 800, 801, 802, 804, 812, 813, 814, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 850, 851, 857, 865, 868, 874, 875, 884, 885, 892, 894, 910, 921, 957, 958, 962, 963, 964, 966, 967, 968, 969, 970, 971, 975, 977, 981, 984, 988, 989, 991, 994, 995, 996, 1002, 1003, 1004, 1009, 1010, 1012, 1014, 1015, 1016, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "medium": [3, 165, 233, 273, 307, 330, 397, 402, 407, 629, 858, 960, 963], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 24, 30, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 55, 57, 58, 60, 61, 62, 66, 67, 73, 78, 79, 80, 81, 82, 85, 86, 92, 95, 96, 97, 98, 99, 101, 103, 105, 113, 122, 123, 126, 127, 143, 150, 152, 153, 156, 157, 165, 167, 169, 170, 177, 178, 179, 180, 184, 188, 193, 196, 199, 200, 201, 204, 211, 212, 219, 224, 227, 230, 231, 232, 233, 235, 236, 245, 252, 254, 256, 258, 260, 261, 263, 264, 265, 284, 285, 286, 294, 297, 301, 302, 303, 304, 307, 311, 314, 319, 323, 326, 328, 329, 330, 340, 343, 344, 345, 348, 358, 359, 360, 367, 368, 372, 377, 381, 383, 384, 385, 388, 394, 395, 396, 399, 401, 402, 405, 407, 408, 430, 431, 432, 434, 435, 436, 443, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 479, 480, 481, 501, 513, 520, 522, 524, 526, 533, 543, 544, 545, 546, 547, 548, 550, 551, 569, 573, 574, 577, 580, 618, 619, 629, 643, 652, 653, 665, 669, 678, 681, 691, 705, 723, 725, 728, 766, 776, 784, 787, 788, 792, 799, 802, 803, 805, 808, 810, 819, 820, 821, 823, 826, 827, 828, 829, 830, 832, 834, 835, 836, 841, 842, 859, 861, 873, 878, 882, 886, 887, 888, 889, 890, 892, 893, 894, 895, 898, 920, 924, 925, 930, 931, 933, 936, 942, 957, 959, 960, 962, 963, 964, 966, 967, 968, 969, 970, 971, 974, 977, 979, 981, 982, 983, 991, 996, 998, 1000, 1001, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1024, 1025], "interact": [3, 90, 124, 165, 198, 224, 229, 259, 311, 371, 373, 374, 376, 378, 383, 385, 386, 398, 545, 546, 547, 548, 618, 619, 859, 863, 956, 959, 963, 964, 965, 972, 974, 977, 986, 988, 1011, 1016, 1023, 1024], "user": [3, 25, 55, 69, 95, 116, 159, 165, 168, 186, 219, 248, 255, 265, 267, 278, 284, 285, 288, 306, 310, 311, 312, 313, 314, 315, 354, 358, 359, 361, 366, 370, 371, 372, 374, 376, 378, 379, 380, 383, 384, 385, 388, 391, 395, 396, 397, 398, 399, 401, 402, 404, 405, 406, 408, 409, 410, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 605, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 843, 844, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 917, 921, 956, 957, 963, 964, 966, 967, 968, 970, 977, 981, 985, 988, 991, 995, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "interfac": [3, 109, 165, 365, 366, 373, 374, 381, 383, 385, 401, 407, 408, 427, 431, 436, 482, 685, 782, 785, 786, 796, 844, 845, 870, 952, 956, 970, 982, 987, 988, 991, 1009, 1011, 1014, 1015, 1017, 1018, 1023], "compress": [3, 11, 15, 48, 165, 300, 367, 397, 402, 405, 638, 658, 678, 814, 938, 941, 963, 977, 1001, 1009, 1018], "sens": [3, 4, 15, 25, 55, 156, 165, 168, 174, 231, 300, 306, 319, 330, 343, 354, 358, 373, 385, 397, 399, 401, 448, 455, 456, 457, 458, 459, 460, 461, 462, 638, 641, 642, 658, 783, 793, 881, 961, 963, 970, 971, 973, 977, 980], "tomographi": [3, 15, 165, 638, 658, 963], "reconstruct": [3, 15, 95, 96, 100, 165, 197, 222, 223, 314, 402, 405, 468, 469, 470, 517, 519, 521, 523, 524, 525, 526, 528, 529, 534, 569, 573, 638, 658, 674, 675, 679, 876, 877, 963, 964, 1023], "l1": [3, 7, 15, 30, 40, 82, 85, 165, 176, 183, 187, 209, 213, 217, 229, 259, 278, 313, 381, 383, 396, 397, 399, 402, 427, 431, 436, 443, 450, 455, 456, 457, 458, 459, 460, 461, 462, 464, 482, 488, 490, 517, 523, 524, 525, 526, 528, 529, 533, 534, 544, 551, 575, 576, 577, 583, 630, 631, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 654, 656, 658, 662, 663, 664, 665, 667, 674, 720, 747, 753, 758, 763, 764, 765, 770, 796, 803, 810, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 856, 864, 871, 884, 885, 891, 893, 895, 907, 949, 963, 965, 967, 970, 977, 981, 982, 983, 1000, 1014, 1016, 1022, 1025], "prior": [3, 15, 46, 47, 57, 67, 149, 150, 160, 165, 170, 177, 179, 182, 242, 244, 248, 249, 250, 258, 372, 374, 376, 385, 388, 397, 400, 402, 404, 407, 451, 509, 522, 534, 535, 536, 537, 545, 571, 572, 597, 599, 600, 601, 605, 608, 609, 616, 630, 631, 632, 633, 637, 638, 640, 641, 642, 646, 647, 648, 658, 664, 667, 702, 780, 819, 820, 821, 822, 823, 844, 845, 859, 886, 889, 934, 956, 959, 961, 963, 966, 967, 969, 975, 983, 984, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1025], "lasso": [3, 15, 105, 130, 136, 165, 168, 176, 217, 313, 358, 383, 399, 400, 402, 404, 405, 406, 457, 458, 464, 487, 510, 517, 523, 525, 528, 529, 531, 532, 534, 583, 632, 633, 635, 636, 637, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 664, 667, 668, 669, 670, 671, 672, 707, 708, 709, 805, 806, 807, 845, 864, 956, 967, 981, 989, 997, 1000, 1004, 1009, 1013, 1014, 1015, 1017, 1018, 1020, 1022, 1023], "recognit": [3, 9, 15, 165, 297, 305, 365, 377, 402, 404, 406, 480, 488, 518, 520, 527, 683, 694, 699, 726, 754, 773, 774, 780, 796, 810, 864, 889, 959, 963, 967, 968, 972, 982, 984, 993, 996, 1004, 1009], "eigenfac": [3, 15, 165, 367, 402, 480, 527, 683, 699, 796, 810, 864, 889, 984, 996, 1009], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 70, 72, 74, 131, 135, 137, 140, 141, 145, 148, 165, 176, 191, 217, 227, 233, 234, 238, 239, 252, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 268, 269, 273, 302, 310, 312, 317, 321, 324, 325, 328, 337, 338, 341, 343, 358, 361, 367, 374, 378, 385, 391, 398, 401, 402, 404, 406, 423, 480, 490, 498, 501, 527, 541, 542, 549, 553, 554, 563, 579, 580, 585, 586, 591, 617, 625, 629, 654, 662, 663, 664, 675, 683, 684, 686, 688, 699, 720, 727, 782, 796, 802, 806, 807, 810, 812, 813, 830, 844, 845, 857, 864, 880, 881, 955, 956, 959, 962, 964, 965, 967, 968, 972, 980, 982, 984, 989, 993, 996, 997, 998, 1002, 1004, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1016], "imag": [3, 6, 13, 15, 32, 36, 46, 48, 51, 54, 58, 68, 70, 89, 94, 95, 107, 118, 145, 154, 165, 189, 220, 229, 232, 235, 256, 287, 296, 297, 311, 318, 319, 343, 344, 364, 365, 367, 369, 372, 377, 380, 383, 385, 388, 390, 397, 402, 427, 431, 438, 448, 479, 480, 481, 482, 488, 489, 492, 493, 520, 521, 523, 527, 593, 594, 677, 683, 723, 810, 854, 963, 967, 968, 970, 972, 979, 983, 987, 991, 993, 998, 999, 1001, 1002, 1004, 1009, 1012, 1017, 1018, 1022, 1024, 1025], "denois": [3, 15, 94, 107, 165, 402, 482, 521, 523, 527, 570, 573, 810, 854], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 74, 94, 105, 107, 131, 137, 139, 145, 149, 151, 152, 153, 154, 157, 160, 162, 175, 199, 212, 226, 227, 234, 238, 241, 252, 256, 258, 260, 263, 264, 268, 273, 279, 292, 313, 320, 323, 325, 327, 330, 331, 332, 335, 336, 339, 341, 354, 358, 361, 364, 374, 383, 385, 395, 397, 398, 401, 404, 405, 418, 426, 434, 438, 447, 448, 451, 468, 469, 470, 477, 482, 484, 488, 490, 500, 519, 520, 521, 527, 530, 540, 542, 544, 546, 548, 551, 554, 556, 579, 580, 596, 597, 617, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 662, 663, 664, 665, 674, 676, 677, 678, 681, 720, 743, 744, 746, 751, 752, 759, 760, 761, 762, 782, 788, 793, 796, 810, 812, 817, 818, 824, 825, 827, 829, 835, 842, 844, 845, 850, 854, 856, 857, 864, 879, 880, 884, 885, 886, 887, 888, 889, 890, 893, 895, 956, 962, 963, 964, 967, 968, 970, 973, 980, 981, 987, 989, 993, 997, 998, 1003, 1004, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "pca": [3, 6, 15, 69, 72, 74, 76, 86, 90, 94, 97, 106, 107, 165, 220, 222, 232, 234, 238, 257, 278, 282, 287, 313, 354, 364, 374, 385, 396, 397, 398, 403, 413, 459, 462, 482, 488, 490, 500, 518, 519, 520, 521, 525, 526, 529, 530, 535, 629, 644, 674, 676, 678, 782, 806, 810, 833, 840, 843, 844, 846, 854, 862, 864, 959, 961, 964, 970, 977, 981, 983, 998, 1003, 1004, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1020, 1022, 1023, 1024], "libsvm": [3, 15, 165, 174, 328, 365, 378, 473, 494, 549, 884, 885, 886, 887, 888, 889, 890, 982, 987, 1004, 1009, 1011, 1017, 1020, 1023], "gui": [3, 15, 165, 473, 888, 889, 1000, 1009, 1010, 1020], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 49, 54, 55, 56, 58, 61, 69, 71, 76, 78, 82, 86, 94, 95, 107, 108, 110, 113, 115, 119, 121, 122, 123, 125, 127, 129, 130, 133, 134, 136, 137, 139, 141, 143, 148, 153, 154, 156, 157, 158, 159, 163, 166, 167, 171, 172, 178, 180, 184, 188, 189, 191, 193, 194, 195, 199, 200, 202, 204, 206, 210, 211, 213, 214, 215, 217, 227, 230, 234, 243, 245, 246, 247, 250, 252, 253, 254, 256, 259, 261, 263, 264, 266, 267, 271, 272, 274, 276, 278, 280, 282, 284, 287, 291, 301, 304, 306, 307, 310, 312, 314, 315, 318, 319, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340, 344, 345, 349, 350, 351, 354, 361, 364, 366, 367, 375, 378, 385, 387, 393, 394, 395, 397, 398, 400, 402, 403, 404, 405, 406, 407, 416, 418, 420, 423, 428, 435, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 474, 475, 476, 482, 484, 487, 488, 489, 495, 508, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 574, 575, 577, 579, 580, 583, 588, 592, 595, 596, 597, 601, 613, 620, 621, 623, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 687, 692, 697, 707, 708, 709, 719, 720, 726, 727, 735, 738, 770, 773, 774, 775, 780, 781, 782, 785, 786, 787, 788, 796, 797, 798, 799, 803, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 829, 830, 831, 833, 835, 840, 841, 842, 844, 845, 847, 849, 851, 856, 857, 859, 860, 861, 863, 864, 865, 869, 870, 872, 873, 874, 875, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 899, 957, 959, 960, 961, 964, 965, 968, 970, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 987, 988, 989, 991, 994, 996, 998, 1002, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1014], "complex": [3, 9, 14, 15, 16, 150, 155, 162, 165, 212, 215, 226, 233, 241, 251, 267, 274, 301, 310, 313, 314, 317, 324, 330, 345, 347, 353, 368, 372, 377, 383, 398, 402, 404, 407, 408, 426, 430, 433, 434, 436, 453, 475, 486, 487, 488, 500, 520, 527, 537, 543, 544, 545, 546, 548, 550, 551, 590, 616, 624, 642, 644, 662, 663, 719, 735, 782, 810, 812, 840, 844, 845, 849, 857, 864, 880, 884, 887, 890, 892, 893, 894, 895, 956, 957, 959, 960, 962, 966, 968, 973, 977, 980, 988, 989, 991, 1004, 1010, 1012, 1018, 1019, 1022], "influenc": [3, 9, 15, 80, 81, 165, 168, 180, 243, 266, 300, 307, 330, 338, 354, 360, 399, 402, 404, 418, 426, 440, 451, 468, 469, 470, 475, 487, 540, 542, 544, 546, 548, 551, 554, 556, 597, 614, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 662, 664, 665, 719, 735, 810, 817, 818, 826, 827, 834, 835, 842, 861, 862, 873, 885, 887, 890, 893, 895, 904, 956, 961, 962, 970, 973, 977, 981, 982, 991, 1012, 1017, 1018], "core": [3, 15, 49, 55, 65, 71, 116, 118, 119, 165, 168, 169, 315, 357, 359, 361, 370, 372, 375, 380, 385, 388, 397, 402, 404, 408, 430, 432, 435, 436, 441, 443, 485, 524, 575, 580, 644, 645, 652, 654, 662, 819, 820, 821, 822, 823, 828, 836, 963, 970, 973, 982, 985, 988, 989, 991, 1000, 1002, 1004, 1011, 1013, 1014, 1016, 1019, 1023, 1024, 1025], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 34, 35, 45, 71, 72, 73, 88, 93, 98, 109, 110, 112, 114, 116, 117, 118, 119, 121, 124, 128, 135, 140, 143, 144, 145, 146, 149, 160, 168, 169, 174, 176, 190, 191, 198, 206, 217, 226, 228, 232, 236, 239, 241, 246, 251, 255, 256, 257, 258, 259, 267, 273, 274, 279, 280, 286, 288, 291, 292, 293, 298, 302, 318, 324, 326, 330, 333, 336, 338, 339, 342, 344, 345, 346, 354, 358, 360, 361, 365, 366, 367, 369, 374, 377, 381, 384, 385, 392, 395, 397, 398, 401, 402, 405, 406, 414, 423, 455, 461, 468, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 496, 498, 500, 501, 505, 506, 508, 509, 527, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 555, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 592, 595, 596, 597, 599, 600, 608, 617, 618, 619, 629, 644, 645, 652, 654, 660, 661, 662, 683, 689, 691, 694, 698, 699, 701, 702, 704, 711, 712, 714, 715, 719, 723, 726, 727, 728, 739, 741, 743, 744, 767, 768, 769, 771, 772, 773, 774, 777, 779, 782, 783, 785, 786, 787, 788, 796, 800, 801, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 826, 831, 833, 834, 840, 841, 842, 844, 848, 851, 856, 857, 858, 864, 865, 868, 870, 879, 880, 881, 884, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 907, 910, 918, 956, 957, 959, 960, 961, 964, 965, 969, 972, 974, 975, 977, 978, 980, 986, 987, 989, 990, 991, 993, 994, 998, 999, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 53, 57, 60, 62, 64, 70, 80, 81, 116, 121, 178, 192, 193, 227, 231, 237, 238, 243, 245, 251, 264, 265, 269, 274, 283, 286, 288, 294, 302, 313, 317, 319, 324, 337, 346, 348, 358, 360, 361, 364, 365, 366, 372, 377, 383, 385, 395, 397, 398, 400, 401, 402, 404, 407, 433, 435, 454, 473, 474, 475, 485, 489, 494, 507, 522, 530, 550, 601, 611, 638, 644, 652, 654, 660, 662, 683, 689, 691, 693, 699, 703, 714, 722, 776, 778, 782, 796, 810, 819, 821, 823, 826, 831, 844, 845, 847, 848, 856, 880, 881, 882, 884, 896, 897, 898, 918, 956, 959, 963, 965, 967, 968, 969, 971, 974, 977, 979, 981, 982, 986, 988, 991, 994, 1004, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025], "outlier": [3, 15, 44, 80, 81, 123, 126, 165, 176, 200, 201, 204, 217, 226, 241, 279, 292, 299, 308, 340, 367, 385, 397, 399, 404, 432, 455, 456, 459, 460, 461, 462, 476, 477, 478, 482, 496, 498, 508, 510, 549, 625, 635, 656, 657, 658, 662, 663, 664, 665, 678, 688, 830, 834, 845, 851, 853, 854, 856, 860, 861, 862, 864, 870, 873, 887, 888, 890, 967, 981, 982, 987, 989, 1003, 1004, 1009, 1014, 1015, 1017], "detect": [3, 8, 10, 15, 63, 65, 80, 82, 117, 126, 165, 179, 226, 241, 251, 258, 261, 274, 279, 292, 306, 329, 367, 370, 372, 376, 383, 385, 395, 396, 397, 399, 401, 405, 432, 435, 455, 456, 459, 460, 461, 462, 474, 475, 477, 478, 482, 496, 498, 501, 508, 523, 524, 525, 532, 549, 550, 574, 577, 582, 625, 663, 684, 688, 712, 774, 810, 830, 834, 845, 851, 864, 884, 888, 959, 963, 988, 989, 991, 997, 1002, 1003, 1004, 1009, 1012, 1015, 1016, 1017, 1019, 1021, 1022, 1024, 1025], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 25, 26, 27, 30, 31, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 55, 57, 58, 60, 62, 64, 65, 66, 70, 71, 73, 80, 81, 82, 86, 90, 94, 95, 100, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 132, 136, 143, 144, 147, 150, 156, 157, 158, 159, 165, 167, 168, 169, 170, 171, 177, 182, 183, 186, 187, 189, 191, 193, 194, 197, 198, 199, 200, 202, 203, 206, 211, 212, 216, 219, 220, 221, 227, 228, 229, 230, 232, 233, 240, 243, 245, 247, 248, 252, 253, 256, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 272, 276, 280, 284, 285, 286, 287, 288, 291, 295, 296, 297, 300, 302, 303, 304, 305, 306, 307, 310, 312, 313, 318, 319, 322, 323, 327, 329, 332, 338, 343, 344, 345, 350, 351, 354, 358, 359, 360, 364, 365, 367, 369, 370, 372, 374, 376, 377, 379, 380, 384, 385, 386, 388, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 414, 419, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 474, 475, 479, 481, 482, 483, 485, 488, 489, 490, 494, 495, 496, 501, 509, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 683, 684, 686, 687, 688, 689, 699, 700, 705, 707, 708, 711, 712, 713, 714, 715, 716, 719, 723, 725, 726, 730, 731, 733, 735, 736, 738, 741, 764, 765, 767, 768, 769, 770, 772, 774, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 904, 905, 915, 916, 921, 925, 935, 936, 937, 938, 941, 942, 948, 951, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 994, 996, 997, 998, 1001, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 56, 58, 62, 70, 71, 72, 73, 75, 85, 106, 108, 109, 110, 112, 113, 114, 116, 118, 119, 120, 121, 124, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 144, 147, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 165, 168, 169, 170, 174, 177, 180, 181, 182, 190, 193, 194, 195, 196, 199, 200, 201, 204, 205, 206, 207, 212, 213, 215, 216, 227, 228, 230, 232, 235, 244, 245, 246, 247, 248, 249, 251, 252, 256, 258, 260, 261, 264, 267, 268, 272, 274, 276, 281, 284, 285, 286, 289, 290, 297, 300, 301, 305, 306, 310, 311, 312, 313, 314, 319, 321, 322, 323, 326, 327, 329, 330, 336, 337, 338, 339, 343, 344, 349, 350, 351, 352, 354, 357, 359, 361, 364, 367, 369, 372, 374, 379, 381, 385, 387, 391, 392, 393, 395, 396, 397, 398, 402, 404, 405, 406, 414, 418, 423, 424, 425, 426, 428, 429, 430, 433, 434, 435, 451, 455, 468, 469, 470, 473, 487, 494, 510, 520, 527, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 563, 568, 579, 580, 588, 592, 596, 597, 599, 600, 601, 602, 608, 611, 613, 614, 616, 617, 618, 619, 620, 621, 623, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 698, 700, 701, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 723, 726, 727, 728, 731, 733, 735, 737, 741, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 779, 780, 781, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 830, 831, 834, 835, 841, 842, 844, 851, 864, 865, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 941, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 968, 969, 970, 971, 973, 974, 975, 977, 980, 981, 982, 983, 986, 987, 988, 990, 991, 994, 996, 997, 998, 1002, 1004, 1006, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "latenc": [3, 7, 15, 121, 165, 357, 510, 551, 658, 664, 810, 864, 890, 932, 941, 987, 1004, 1012], "speci": [3, 15, 165, 279, 292, 343, 367, 403, 484, 692, 774, 829, 888, 899, 967, 973, 1009], "distribut": [3, 4, 8, 9, 10, 15, 27, 37, 39, 44, 52, 53, 55, 57, 62, 75, 79, 80, 81, 92, 110, 112, 123, 126, 142, 150, 159, 165, 167, 168, 174, 177, 198, 200, 202, 221, 223, 227, 231, 243, 248, 249, 254, 258, 264, 266, 279, 283, 292, 299, 300, 302, 305, 308, 318, 319, 335, 338, 343, 358, 359, 367, 368, 369, 370, 372, 373, 376, 377, 378, 385, 391, 395, 396, 397, 399, 401, 402, 403, 407, 409, 433, 435, 455, 456, 457, 458, 459, 460, 461, 462, 474, 484, 489, 501, 502, 503, 504, 505, 509, 518, 519, 522, 536, 537, 538, 549, 597, 611, 626, 628, 630, 631, 634, 644, 645, 655, 665, 666, 674, 675, 676, 678, 692, 694, 709, 737, 774, 780, 781, 786, 787, 794, 796, 800, 801, 810, 820, 823, 829, 833, 840, 847, 860, 861, 862, 863, 864, 872, 873, 874, 879, 880, 888, 899, 923, 935, 956, 961, 963, 965, 966, 967, 969, 970, 972, 973, 979, 980, 985, 987, 988, 993, 997, 1001, 1003, 1004, 1009, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025], "relat": [3, 7, 12, 15, 17, 44, 62, 96, 98, 100, 165, 166, 168, 193, 236, 251, 265, 315, 343, 352, 361, 367, 368, 371, 375, 376, 377, 379, 380, 381, 383, 385, 386, 387, 391, 396, 397, 398, 399, 400, 401, 402, 404, 407, 436, 450, 455, 482, 535, 536, 548, 549, 625, 659, 663, 678, 687, 708, 728, 803, 807, 842, 843, 845, 848, 849, 854, 857, 858, 859, 860, 863, 872, 888, 956, 961, 967, 968, 970, 971, 974, 977, 982, 983, 984, 985, 988, 1004, 1009, 1013, 1014, 1015, 1017, 1018, 1021, 1022], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 25, 26, 27, 30, 33, 36, 42, 58, 60, 63, 68, 69, 70, 71, 72, 76, 80, 81, 86, 89, 90, 91, 92, 95, 97, 99, 103, 104, 106, 108, 109, 116, 119, 125, 129, 130, 131, 133, 134, 142, 144, 148, 150, 151, 152, 155, 156, 158, 162, 163, 166, 167, 168, 169, 172, 176, 181, 182, 184, 185, 187, 194, 198, 199, 200, 202, 203, 207, 213, 214, 215, 217, 226, 229, 231, 239, 240, 241, 251, 255, 258, 264, 265, 267, 268, 272, 274, 276, 281, 286, 287, 289, 293, 296, 298, 299, 300, 303, 307, 308, 309, 311, 314, 315, 325, 326, 327, 330, 338, 341, 342, 345, 346, 349, 351, 352, 354, 361, 364, 365, 366, 367, 368, 369, 370, 374, 375, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 395, 397, 399, 400, 401, 402, 403, 407, 408, 409, 410, 413, 417, 418, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 494, 495, 496, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 565, 566, 567, 568, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 604, 605, 606, 608, 609, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 672, 673, 674, 675, 676, 677, 678, 683, 687, 688, 689, 699, 707, 708, 709, 726, 743, 744, 748, 749, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 766, 770, 775, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 904, 905, 918, 932, 942, 943, 944, 948, 956, 959, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 978, 979, 980, 981, 982, 983, 986, 987, 988, 989, 990, 991, 993, 994, 998, 999, 1000, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "engin": [3, 15, 40, 115, 155, 165, 358, 366, 369, 397, 403, 405, 407, 450, 482, 548, 625, 659, 687, 803, 807, 842, 843, 845, 848, 849, 854, 857, 858, 859, 863, 957, 967, 977, 985, 1015], "topic": [3, 7, 8, 15, 70, 165, 343, 344, 345, 367, 368, 401, 402, 405, 474, 483, 522, 524, 526, 533, 574, 577, 963, 968, 987, 988, 1002, 1014, 1016], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 55, 69, 70, 71, 76, 85, 95, 165, 202, 213, 251, 274, 297, 343, 345, 354, 361, 364, 367, 369, 374, 378, 381, 383, 397, 398, 401, 402, 436, 438, 441, 442, 448, 450, 474, 475, 479, 480, 489, 490, 517, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 569, 570, 574, 575, 577, 579, 580, 583, 585, 617, 704, 773, 782, 796, 821, 843, 844, 889, 921, 931, 956, 964, 968, 972, 977, 981, 987, 991, 994, 998, 999, 1004, 1009, 1010, 1018, 1021], "neg": [3, 4, 15, 16, 24, 60, 75, 78, 86, 116, 122, 123, 127, 165, 168, 176, 198, 216, 217, 247, 248, 255, 258, 261, 265, 267, 268, 278, 300, 304, 314, 343, 378, 385, 386, 397, 401, 404, 405, 406, 408, 409, 418, 426, 430, 438, 451, 455, 468, 469, 470, 474, 517, 519, 521, 522, 523, 524, 526, 528, 530, 533, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 574, 577, 578, 581, 582, 584, 585, 586, 588, 590, 591, 592, 593, 594, 595, 597, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 655, 656, 658, 659, 663, 664, 665, 666, 673, 684, 685, 690, 691, 698, 699, 701, 704, 705, 707, 708, 709, 712, 714, 715, 716, 720, 723, 726, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 767, 768, 769, 770, 772, 776, 780, 781, 805, 810, 817, 818, 827, 830, 835, 842, 851, 860, 862, 863, 868, 872, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 919, 921, 935, 965, 967, 968, 970, 971, 972, 973, 981, 982, 1002, 1003, 1004, 1009, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 62, 70, 79, 80, 81, 82, 85, 95, 96, 97, 106, 157, 165, 171, 176, 184, 199, 203, 217, 228, 231, 232, 248, 251, 265, 274, 296, 314, 318, 319, 343, 344, 345, 352, 358, 361, 367, 368, 369, 372, 374, 378, 381, 383, 384, 385, 394, 398, 399, 400, 405, 406, 407, 408, 409, 418, 424, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 440, 443, 445, 446, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 478, 482, 483, 486, 487, 488, 489, 490, 491, 494, 495, 496, 505, 507, 509, 510, 512, 513, 515, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 571, 572, 574, 575, 576, 577, 579, 580, 589, 590, 591, 592, 593, 594, 595, 597, 606, 615, 616, 617, 619, 621, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 698, 699, 700, 701, 702, 704, 714, 715, 716, 719, 723, 724, 725, 726, 739, 740, 743, 744, 745, 746, 748, 749, 751, 752, 753, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 772, 773, 775, 776, 779, 780, 781, 782, 785, 786, 796, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 847, 848, 849, 850, 851, 853, 855, 856, 857, 859, 861, 862, 863, 864, 866, 867, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 900, 902, 903, 904, 905, 910, 919, 920, 921, 922, 925, 926, 927, 930, 931, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 953, 957, 959, 961, 963, 964, 968, 969, 970, 971, 977, 978, 979, 980, 981, 983, 984, 1001, 1002, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "factor": [3, 15, 26, 31, 44, 46, 53, 55, 62, 94, 100, 105, 107, 128, 165, 168, 224, 227, 236, 269, 270, 278, 279, 292, 294, 295, 300, 302, 312, 314, 358, 359, 378, 381, 385, 394, 396, 397, 404, 405, 407, 426, 428, 440, 455, 457, 458, 459, 460, 462, 464, 474, 490, 500, 501, 513, 518, 521, 522, 524, 526, 527, 530, 531, 532, 533, 535, 536, 547, 548, 549, 574, 577, 583, 599, 635, 636, 637, 640, 641, 642, 668, 669, 678, 705, 768, 782, 785, 786, 806, 830, 864, 878, 880, 888, 920, 921, 956, 963, 964, 970, 977, 980, 984, 987, 1003, 1004, 1009, 1010, 1012, 1013, 1015, 1023, 1025], "latent": [3, 15, 17, 106, 165, 297, 344, 400, 405, 407, 474, 518, 522, 524, 525, 526, 529, 530, 574, 577, 840, 966, 987, 1002, 1003, 1004, 1011, 1014], "dirichlet": [3, 15, 165, 243, 244, 249, 253, 405, 474, 522, 524, 526, 574, 577, 780, 987, 1003, 1004, 1009, 1014, 1015], "alloc": [3, 15, 25, 61, 165, 270, 312, 368, 372, 373, 397, 405, 429, 433, 445, 474, 522, 524, 526, 570, 574, 577, 632, 638, 646, 648, 785, 786, 788, 808, 811, 956, 977, 987, 1003, 1004, 1013, 1014, 1019, 1020], "visual": [3, 4, 9, 15, 16, 25, 30, 32, 43, 46, 49, 52, 57, 60, 61, 80, 91, 94, 97, 99, 105, 107, 116, 124, 126, 128, 132, 133, 158, 163, 165, 169, 171, 182, 189, 198, 200, 216, 224, 226, 229, 232, 237, 238, 241, 248, 251, 252, 254, 255, 259, 268, 274, 283, 287, 288, 293, 295, 298, 300, 304, 305, 310, 312, 319, 361, 364, 368, 370, 378, 379, 394, 399, 401, 402, 403, 404, 424, 427, 431, 432, 440, 458, 482, 488, 490, 493, 496, 500, 508, 518, 520, 527, 550, 552, 557, 617, 619, 644, 675, 678, 683, 684, 686, 687, 688, 704, 712, 767, 774, 783, 784, 787, 788, 799, 800, 801, 802, 803, 810, 841, 845, 864, 889, 898, 917, 962, 964, 965, 970, 971, 973, 974, 977, 983, 987, 993, 1004, 1012, 1019, 1020, 1021, 1023], "stock": [3, 15, 165, 397, 399, 440, 458, 675, 996], "market": [3, 15, 165, 397, 399, 440, 458, 675, 991, 996], "wikipedia": [3, 15, 24, 165, 380, 396, 397, 581, 593, 594, 622, 642, 654, 657, 668, 669, 681, 690, 691, 693, 695, 698, 702, 704, 711, 714, 715, 716, 719, 720, 723, 728, 741, 768, 770, 771, 773, 774, 775, 776, 826, 827, 832, 833, 834, 835, 862, 878, 892, 893, 959, 963, 967, 970, 979, 983, 1002, 1009, 1016], "princip": [3, 15, 84, 87, 94, 97, 99, 100, 102, 104, 107, 128, 165, 219, 232, 234, 287, 305, 312, 364, 397, 400, 409, 470, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 536, 643, 674, 675, 676, 678, 679, 810, 833, 845, 864, 920, 921, 964, 970, 1003, 1004, 1009], "eigenvector": [3, 15, 46, 86, 90, 165, 243, 397, 438, 448, 520, 521, 527, 536, 674, 675, 677, 681, 964, 1009, 1013, 1023], "enddownload": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 365, 367, 369, 370, 376, 377, 380, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 496, 983, 998, 1000, 1002, 1004, 1013, 1014, 1017, 1021, 1022, 1023], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 358, 359, 361, 369, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 388, 390, 391, 396, 408, 409, 413, 425, 442, 447, 457, 471, 493, 494, 517, 529, 533, 541, 558, 559, 563, 569, 578, 581, 582, 584, 587, 589, 598, 602, 606, 607, 610, 615, 624, 628, 636, 637, 640, 646, 647, 649, 653, 661, 685, 694, 701, 707, 708, 709, 711, 713, 715, 716, 720, 724, 728, 729, 731, 732, 736, 739, 741, 748, 749, 753, 754, 756, 758, 766, 768, 777, 789, 790, 791, 792, 793, 794, 795, 812, 814, 816, 818, 820, 824, 825, 834, 835, 836, 838, 846, 847, 850, 852, 855, 866, 869, 871, 872, 874, 875, 876, 879, 885, 894, 895, 896, 897, 910, 919, 921, 923, 924, 926, 929, 930, 931, 938, 955, 957, 965, 988, 989, 991, 994, 997, 998, 1002, 1004, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1022, 1024, 1025], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 358, 359, 370, 372, 373, 374, 376, 377, 378, 379, 380, 383, 385, 386, 388, 393, 397, 399, 401, 404, 407, 408, 409, 423, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 448, 450, 453, 454, 457, 458, 517, 518, 519, 520, 521, 523, 525, 527, 528, 529, 531, 532, 534, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 568, 578, 580, 581, 582, 584, 585, 586, 588, 596, 597, 620, 626, 632, 633, 635, 637, 638, 639, 641, 642, 646, 647, 648, 649, 668, 669, 674, 675, 676, 677, 678, 679, 680, 766, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 816, 817, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 841, 842, 843, 846, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 915, 916, 935, 938, 941, 956, 966, 968, 971, 980, 982, 983, 987, 988, 991, 993, 1000, 1002, 1009, 1012, 1014, 1016, 1017, 1018, 1019, 1023, 1024], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 358, 359, 360, 366, 370, 371, 372, 373, 375, 376, 378, 380, 381, 383, 384, 385, 388, 391, 396, 397, 398, 399, 404, 405, 408, 409, 430, 432, 489, 519, 547, 548, 588, 620, 632, 673, 782, 785, 786, 788, 796, 807, 809, 915, 964, 971, 977, 980, 981, 982, 983, 984, 986, 987, 990, 991, 995, 1002, 1010, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 372, 380, 977], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 373, 378, 398, 454, 882, 983, 986, 987, 988, 1020, 1023], "introduc": [4, 78, 80, 81, 100, 146, 165, 170, 177, 182, 226, 231, 241, 265, 315, 345, 365, 368, 370, 372, 374, 376, 377, 380, 383, 385, 388, 395, 397, 399, 401, 402, 404, 405, 419, 427, 428, 429, 431, 433, 435, 445, 450, 454, 468, 469, 470, 471, 482, 490, 501, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 541, 542, 552, 553, 554, 555, 556, 567, 568, 569, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 644, 650, 671, 672, 674, 675, 678, 810, 828, 833, 836, 840, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 878, 882, 961, 963, 966, 969, 970, 973, 977, 979, 981, 982, 993, 1000, 1009, 1010, 1015, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 49, 53, 57, 58, 64, 65, 66, 67, 68, 70, 71, 72, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 103, 104, 105, 109, 113, 115, 116, 119, 120, 123, 125, 130, 131, 132, 133, 136, 139, 142, 147, 149, 150, 151, 152, 155, 156, 157, 160, 162, 163, 165, 167, 168, 170, 174, 177, 178, 184, 185, 186, 187, 189, 195, 198, 199, 200, 202, 203, 204, 205, 206, 216, 219, 220, 221, 224, 227, 229, 232, 233, 236, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 272, 273, 278, 284, 285, 287, 294, 295, 299, 304, 305, 308, 310, 325, 329, 330, 334, 338, 339, 341, 343, 344, 345, 354, 358, 359, 360, 366, 367, 369, 370, 371, 372, 375, 377, 379, 381, 384, 385, 388, 391, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 420, 423, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 444, 445, 448, 450, 461, 464, 476, 479, 480, 482, 489, 490, 494, 495, 498, 500, 508, 523, 524, 525, 526, 532, 533, 535, 536, 541, 542, 549, 574, 575, 576, 577, 580, 597, 599, 600, 601, 605, 608, 609, 613, 617, 618, 619, 620, 624, 629, 630, 633, 635, 637, 639, 641, 644, 647, 652, 653, 654, 658, 660, 662, 663, 664, 666, 676, 678, 680, 684, 686, 687, 690, 691, 692, 693, 695, 701, 703, 704, 712, 713, 714, 715, 716, 719, 722, 728, 742, 743, 744, 753, 763, 767, 768, 769, 771, 772, 774, 775, 776, 778, 781, 782, 784, 785, 786, 787, 788, 791, 796, 797, 798, 799, 800, 801, 802, 805, 807, 808, 811, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 837, 840, 844, 849, 853, 854, 856, 860, 861, 862, 864, 869, 870, 871, 872, 873, 874, 875, 884, 886, 889, 892, 893, 894, 895, 931, 956, 957, 959, 960, 962, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 980, 981, 982, 983, 984, 987, 988, 991, 993, 995, 996, 997, 1001, 1002, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "strategi": [4, 52, 54, 58, 61, 71, 120, 125, 130, 146, 162, 163, 165, 170, 182, 187, 198, 206, 216, 229, 238, 251, 259, 261, 263, 267, 268, 274, 293, 298, 299, 306, 307, 308, 310, 311, 314, 345, 357, 374, 378, 384, 385, 401, 404, 405, 406, 409, 423, 424, 425, 438, 448, 458, 488, 490, 498, 500, 508, 519, 524, 537, 538, 547, 548, 553, 554, 557, 574, 575, 577, 578, 580, 588, 613, 614, 616, 620, 631, 633, 637, 639, 641, 647, 649, 651, 659, 661, 677, 681, 690, 699, 740, 742, 778, 782, 785, 786, 788, 796, 799, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 841, 849, 854, 865, 879, 884, 886, 889, 892, 893, 894, 895, 938, 956, 957, 966, 968, 969, 970, 971, 973, 975, 977, 981, 982, 983, 987, 997, 1002, 1004, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "leverag": [4, 8, 37, 49, 86, 216, 343, 344, 358, 359, 370, 401, 404, 859, 956, 963, 993, 1012, 1024], "task": [4, 7, 98, 109, 117, 118, 124, 145, 146, 158, 165, 176, 198, 214, 217, 219, 255, 345, 358, 360, 367, 369, 370, 371, 372, 376, 377, 378, 381, 383, 384, 385, 402, 404, 405, 406, 407, 434, 447, 479, 491, 501, 578, 581, 582, 584, 585, 586, 590, 591, 592, 595, 618, 619, 632, 633, 638, 639, 646, 647, 648, 649, 660, 667, 670, 712, 714, 715, 739, 767, 769, 772, 774, 783, 787, 800, 804, 933, 934, 964, 967, 968, 969, 970, 978, 980, 982, 983, 985, 986, 988, 989, 990, 991, 993, 1000, 1001, 1002, 1004, 1009, 1014, 1018, 1024], "highli": [4, 9, 72, 80, 81, 97, 106, 126, 182, 193, 203, 258, 261, 267, 295, 344, 358, 359, 372, 374, 378, 395, 397, 401, 404, 405, 438, 448, 482, 549, 657, 678, 794, 796, 840, 963, 967, 970, 971, 973, 981, 982, 986], "depend": [4, 5, 7, 37, 53, 75, 99, 116, 120, 123, 124, 127, 130, 142, 146, 156, 162, 165, 166, 168, 172, 174, 178, 182, 202, 216, 220, 226, 227, 233, 241, 248, 258, 259, 263, 264, 265, 278, 295, 300, 305, 312, 315, 327, 338, 344, 345, 354, 358, 359, 360, 365, 372, 374, 375, 380, 381, 383, 384, 385, 386, 387, 388, 390, 391, 396, 397, 399, 401, 402, 404, 405, 406, 407, 408, 424, 425, 426, 430, 432, 433, 435, 436, 438, 440, 443, 445, 446, 448, 450, 455, 470, 475, 476, 477, 479, 482, 486, 487, 488, 490, 491, 496, 520, 521, 527, 530, 537, 545, 546, 548, 574, 575, 576, 577, 588, 590, 593, 594, 597, 613, 618, 619, 624, 626, 634, 644, 645, 655, 657, 659, 662, 663, 664, 666, 673, 676, 677, 680, 681, 714, 726, 763, 766, 775, 776, 780, 781, 801, 809, 826, 827, 828, 830, 832, 833, 834, 835, 836, 842, 843, 845, 857, 858, 861, 864, 878, 885, 886, 889, 893, 902, 956, 957, 959, 960, 961, 963, 964, 966, 967, 969, 970, 971, 972, 975, 979, 981, 982, 983, 993, 1000, 1002, 1004, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1024, 1025], "busi": [4, 198, 258, 380, 383, 773, 963, 967, 991], "dai": [4, 12, 155, 169, 199, 359, 369, 372, 863, 991, 1015, 1016, 1023, 1024], "week": [4, 371, 372, 386, 991, 1023], "yearli": 4, "season": [4, 155, 169, 199, 371, 407], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 49, 53, 57, 58, 62, 64, 66, 67, 68, 70, 71, 74, 78, 86, 98, 105, 109, 110, 116, 118, 120, 122, 124, 125, 129, 130, 136, 146, 147, 151, 162, 163, 165, 168, 169, 170, 171, 174, 182, 187, 198, 200, 204, 205, 206, 215, 216, 220, 221, 223, 227, 232, 234, 236, 245, 248, 251, 253, 254, 255, 256, 258, 259, 260, 263, 264, 266, 267, 269, 271, 273, 274, 276, 278, 291, 297, 300, 302, 304, 306, 307, 310, 317, 324, 330, 333, 336, 343, 345, 354, 357, 359, 360, 367, 369, 374, 375, 376, 378, 380, 381, 383, 384, 385, 387, 391, 392, 394, 395, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 415, 426, 428, 429, 430, 432, 433, 434, 436, 438, 440, 441, 445, 447, 454, 455, 468, 469, 470, 471, 480, 488, 498, 501, 517, 518, 519, 521, 523, 525, 528, 529, 530, 531, 532, 534, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 567, 568, 569, 574, 575, 576, 577, 587, 588, 589, 596, 597, 613, 616, 617, 624, 626, 631, 637, 640, 641, 642, 644, 650, 651, 652, 653, 654, 656, 659, 661, 662, 663, 664, 668, 669, 671, 673, 675, 676, 679, 680, 683, 689, 690, 691, 693, 694, 698, 699, 711, 714, 715, 723, 725, 727, 740, 741, 742, 763, 768, 769, 771, 772, 773, 777, 778, 779, 780, 781, 782, 785, 786, 793, 794, 796, 800, 805, 806, 807, 809, 810, 813, 816, 817, 819, 820, 821, 822, 823, 824, 825, 831, 833, 839, 840, 841, 842, 844, 845, 847, 850, 851, 853, 854, 856, 857, 858, 860, 861, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 879, 880, 882, 886, 887, 888, 889, 890, 892, 893, 894, 895, 904, 905, 940, 951, 956, 957, 959, 961, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 980, 981, 982, 983, 987, 988, 991, 993, 994, 997, 1000, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 358, 359, 360, 361, 365, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 383, 384, 385, 387, 388, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 956, 957, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 987, 988, 993, 997, 998, 999, 1000, 1001, 1002, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "preprocess": [4, 5, 6, 10, 31, 42, 44, 49, 53, 55, 58, 62, 70, 71, 72, 73, 75, 86, 95, 106, 115, 120, 143, 155, 159, 170, 174, 177, 179, 186, 187, 189, 198, 199, 204, 214, 216, 220, 228, 229, 237, 240, 255, 265, 267, 272, 286, 287, 294, 295, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 322, 330, 333, 344, 360, 361, 364, 366, 369, 372, 377, 384, 385, 394, 397, 398, 401, 405, 406, 450, 451, 452, 453, 475, 553, 567, 568, 574, 575, 576, 577, 616, 644, 645, 658, 660, 662, 664, 673, 726, 813, 844, 845, 884, 885, 886, 887, 889, 890, 957, 963, 968, 971, 978, 981, 982, 984, 987, 990, 991, 993, 998, 999, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "splinetransform": [4, 199, 313, 859, 977, 1022, 1024, 1025], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 56, 58, 71, 72, 91, 92, 100, 104, 108, 109, 116, 118, 126, 131, 134, 150, 151, 154, 158, 159, 162, 165, 168, 169, 174, 176, 188, 189, 190, 206, 210, 213, 214, 217, 220, 227, 234, 236, 243, 244, 245, 251, 252, 253, 258, 260, 264, 268, 269, 274, 276, 278, 281, 283, 286, 287, 288, 289, 305, 310, 314, 318, 320, 321, 325, 326, 330, 331, 339, 341, 343, 344, 345, 360, 361, 364, 366, 367, 368, 369, 372, 373, 374, 376, 377, 378, 379, 381, 383, 384, 388, 393, 395, 397, 398, 400, 402, 406, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 447, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 486, 488, 489, 490, 494, 495, 496, 498, 500, 501, 505, 508, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 706, 712, 714, 715, 716, 720, 721, 722, 723, 724, 725, 726, 727, 728, 739, 740, 742, 767, 768, 769, 771, 772, 773, 774, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 909, 910, 911, 912, 913, 915, 916, 928, 933, 935, 937, 938, 951, 956, 957, 958, 959, 961, 962, 963, 964, 968, 969, 971, 974, 975, 977, 978, 980, 983, 988, 989, 991, 993, 997, 1000, 1002, 1004, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "extrapol": [4, 150, 177, 199, 230, 261, 863, 967, 977, 983, 1022, 1024], "option": [4, 30, 46, 52, 103, 116, 124, 156, 163, 179, 182, 199, 261, 267, 311, 343, 348, 354, 360, 366, 367, 368, 370, 372, 373, 375, 377, 378, 380, 381, 383, 385, 386, 388, 391, 397, 398, 400, 401, 402, 404, 405, 408, 419, 427, 428, 430, 431, 432, 433, 434, 435, 438, 445, 447, 448, 449, 482, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 533, 535, 548, 553, 554, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 614, 616, 618, 619, 620, 621, 624, 625, 626, 627, 628, 632, 638, 643, 644, 645, 656, 659, 661, 662, 663, 664, 666, 668, 669, 673, 674, 675, 678, 680, 681, 697, 699, 703, 714, 715, 720, 721, 722, 742, 743, 744, 749, 751, 752, 756, 759, 760, 761, 762, 763, 766, 768, 769, 772, 775, 776, 778, 785, 786, 788, 808, 810, 811, 815, 816, 817, 818, 824, 825, 828, 833, 836, 840, 843, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 861, 862, 863, 864, 876, 877, 884, 896, 898, 911, 953, 956, 957, 963, 966, 967, 970, 977, 980, 982, 983, 988, 990, 1000, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 53, 71, 72, 89, 95, 106, 109, 115, 117, 119, 126, 127, 130, 131, 133, 144, 145, 155, 168, 169, 174, 179, 194, 195, 198, 206, 214, 229, 230, 235, 236, 237, 238, 240, 248, 254, 256, 258, 263, 265, 270, 276, 278, 282, 287, 295, 296, 297, 311, 312, 314, 315, 320, 321, 322, 349, 352, 358, 361, 364, 367, 369, 375, 378, 384, 391, 396, 400, 401, 402, 404, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 518, 520, 529, 824, 825, 921, 977, 988, 994, 996, 998, 1004, 1009, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "openml": [4, 71, 130, 155, 168, 198, 206, 214, 216, 228, 276, 296, 365, 388, 482, 1004, 1017, 1019, 1022], "repositori": [4, 8, 174, 365, 367, 369, 370, 372, 374, 376, 380, 386, 388, 490, 987, 990, 1004], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 169, 172, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 306, 307, 308, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 358, 359, 360, 366, 367, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 391, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 446, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 468, 469, 470, 471, 474, 481, 482, 486, 488, 489, 490, 492, 493, 494, 496, 498, 501, 507, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 563, 565, 566, 567, 568, 569, 570, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 674, 675, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 701, 703, 704, 707, 708, 709, 711, 712, 713, 714, 715, 716, 719, 720, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 748, 749, 753, 754, 756, 758, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 872, 873, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 911, 916, 919, 921, 923, 924, 925, 926, 928, 929, 930, 931, 935, 938, 941, 955, 956, 957, 959, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 977, 978, 979, 980, 981, 982, 983, 988, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "fetch_openml": [4, 5, 71, 75, 120, 130, 155, 168, 169, 170, 198, 206, 214, 216, 228, 236, 240, 276, 278, 296, 306, 310, 314, 366, 376, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "bike_shar": 4, "bike_sharing_demand": [4, 169], "version": [4, 46, 53, 55, 71, 95, 100, 152, 163, 169, 170, 174, 177, 182, 196, 199, 200, 206, 212, 214, 236, 240, 276, 296, 303, 305, 307, 310, 311, 312, 313, 315, 330, 343, 358, 361, 367, 371, 372, 373, 374, 375, 378, 380, 381, 383, 385, 386, 388, 390, 391, 396, 397, 400, 402, 404, 405, 407, 408, 409, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 486, 487, 488, 490, 491, 494, 495, 496, 498, 500, 508, 509, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 690, 693, 694, 699, 700, 704, 707, 708, 709, 710, 712, 713, 714, 715, 716, 719, 724, 725, 726, 728, 731, 738, 739, 741, 742, 743, 744, 746, 751, 752, 753, 754, 763, 767, 768, 769, 770, 772, 774, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 796, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 902, 904, 905, 915, 916, 918, 920, 921, 930, 933, 934, 935, 937, 942, 948, 953, 954, 956, 959, 961, 964, 967, 969, 971, 973, 975, 980, 981, 983, 985, 988, 990, 1001, 1005, 1007], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 136, 139, 143, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 358, 359, 360, 366, 367, 369, 370, 372, 374, 376, 377, 378, 379, 381, 383, 384, 385, 388, 389, 390, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 446, 448, 449, 450, 451, 454, 455, 457, 458, 459, 460, 461, 464, 468, 469, 470, 471, 479, 482, 486, 487, 490, 493, 494, 495, 496, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 563, 567, 568, 570, 571, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 589, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 687, 689, 690, 691, 692, 693, 694, 699, 701, 702, 703, 704, 707, 708, 709, 710, 711, 713, 714, 715, 716, 719, 720, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 748, 749, 753, 754, 756, 758, 761, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 868, 872, 877, 878, 880, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 899, 904, 905, 910, 918, 919, 920, 921, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 935, 938, 940, 941, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 985, 993, 994, 997, 998, 999, 1000, 1001, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1025], "as_fram": [4, 5, 71, 75, 116, 120, 130, 155, 168, 169, 170, 186, 187, 198, 206, 214, 216, 236, 240, 278, 296, 305, 306, 310, 312, 314, 315, 366, 367, 475, 476, 477, 478, 482, 486, 487, 488, 490, 491, 496, 1019, 1020, 1021, 1022, 1025], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 55, 57, 58, 60, 63, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 92, 95, 96, 97, 98, 100, 106, 109, 114, 116, 120, 121, 122, 123, 125, 126, 127, 130, 131, 133, 136, 137, 138, 143, 146, 150, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 174, 182, 183, 185, 186, 187, 189, 191, 193, 194, 195, 198, 200, 201, 202, 205, 206, 212, 213, 214, 216, 219, 222, 223, 227, 228, 231, 233, 234, 235, 236, 239, 240, 243, 246, 248, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 283, 284, 287, 291, 294, 295, 296, 297, 301, 305, 306, 307, 310, 312, 314, 315, 319, 321, 322, 323, 333, 337, 338, 339, 343, 344, 345, 348, 349, 352, 354, 358, 359, 365, 367, 368, 372, 373, 374, 377, 378, 379, 381, 384, 385, 387, 391, 393, 394, 395, 397, 398, 399, 401, 402, 404, 405, 406, 407, 409, 410, 411, 414, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 445, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 505, 508, 509, 510, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 698, 699, 700, 701, 704, 706, 709, 711, 712, 713, 714, 715, 716, 719, 720, 723, 724, 725, 726, 727, 728, 735, 736, 737, 739, 741, 746, 752, 753, 754, 763, 767, 768, 769, 770, 771, 772, 773, 774, 777, 779, 780, 781, 782, 785, 786, 787, 788, 793, 794, 796, 800, 801, 804, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 902, 903, 904, 905, 915, 921, 922, 928, 929, 932, 933, 937, 938, 940, 948, 953, 955, 956, 957, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 979, 980, 981, 982, 983, 987, 993, 997, 998, 1000, 1001, 1002, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "parser": [4, 5, 8, 71, 75, 120, 130, 155, 168, 169, 170, 198, 206, 214, 216, 228, 236, 240, 276, 278, 296, 306, 310, 314, 482, 1024, 1025], "panda": [4, 5, 12, 25, 70, 71, 72, 73, 75, 116, 117, 120, 123, 127, 130, 155, 162, 167, 168, 169, 170, 177, 182, 187, 198, 206, 214, 216, 228, 236, 237, 240, 248, 256, 258, 259, 261, 269, 270, 276, 278, 296, 305, 306, 307, 310, 313, 314, 338, 343, 344, 366, 367, 370, 371, 372, 374, 375, 385, 388, 390, 398, 419, 428, 429, 431, 433, 435, 450, 452, 454, 468, 469, 470, 471, 475, 476, 477, 478, 482, 486, 487, 488, 490, 491, 496, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 552, 553, 554, 555, 556, 567, 568, 569, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 618, 619, 621, 624, 625, 626, 627, 628, 674, 675, 678, 782, 785, 786, 796, 810, 828, 833, 836, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 882, 900, 956, 957, 977, 987, 988, 1002, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "df": [4, 25, 27, 130, 167, 169, 177, 182, 198, 216, 248, 258, 304, 306, 344, 377, 405, 576, 577, 956, 957], "frame": [4, 16, 71, 155, 168, 169, 198, 306, 367, 372, 383, 386, 475, 476, 477, 478, 482, 486, 487, 488, 490, 491, 496, 987, 998, 1021], "To": [4, 8, 16, 26, 27, 32, 46, 55, 57, 78, 80, 82, 86, 90, 100, 120, 123, 124, 132, 136, 147, 155, 156, 159, 162, 163, 167, 168, 174, 179, 182, 186, 198, 199, 200, 206, 216, 231, 232, 238, 240, 248, 253, 255, 256, 258, 260, 261, 263, 265, 276, 296, 300, 305, 306, 307, 310, 311, 312, 313, 314, 315, 340, 344, 348, 354, 358, 359, 365, 366, 370, 372, 373, 374, 376, 377, 378, 380, 383, 385, 386, 391, 394, 397, 398, 399, 400, 401, 402, 404, 405, 432, 434, 435, 436, 447, 450, 453, 478, 482, 488, 489, 493, 494, 517, 523, 524, 525, 527, 529, 530, 531, 532, 543, 544, 545, 546, 550, 551, 555, 583, 613, 618, 632, 633, 638, 639, 642, 644, 645, 646, 647, 648, 649, 670, 686, 698, 713, 748, 770, 776, 785, 786, 806, 813, 855, 874, 875, 884, 885, 892, 893, 894, 895, 911, 921, 935, 954, 956, 957, 962, 963, 964, 965, 967, 968, 969, 970, 973, 974, 977, 981, 982, 983, 990, 991, 993, 997, 999, 1000, 1002, 1009, 1012, 1014, 1015, 1016, 1018, 1020], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 56, 96, 100, 123, 132, 144, 147, 150, 155, 156, 162, 168, 169, 170, 171, 191, 200, 213, 216, 219, 234, 256, 259, 260, 262, 266, 269, 276, 278, 283, 291, 301, 310, 319, 322, 327, 330, 332, 335, 340, 343, 345, 348, 359, 361, 365, 366, 367, 370, 372, 373, 374, 377, 378, 379, 380, 385, 388, 391, 393, 395, 397, 398, 399, 401, 402, 404, 405, 406, 407, 411, 412, 413, 417, 418, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 448, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 681, 685, 707, 708, 709, 711, 717, 718, 727, 741, 748, 749, 754, 770, 773, 780, 781, 782, 785, 786, 796, 805, 806, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 899, 912, 913, 914, 920, 921, 956, 962, 963, 964, 966, 967, 977, 980, 981, 982, 983, 988, 990, 997, 1000, 1001, 1002, 1006, 1009, 1012, 1015, 1017, 1020, 1022, 1023], "quick": [4, 100, 239, 372, 374, 378, 388, 592, 810, 967, 968, 977, 991, 1000, 1006], "understand": [4, 9, 90, 155, 165, 169, 253, 256, 312, 313, 327, 343, 347, 353, 354, 371, 372, 373, 378, 383, 387, 397, 404, 405, 490, 810, 841, 842, 865, 892, 893, 894, 895, 898, 956, 957, 964, 966, 983, 986, 987, 991, 1009, 1023], "pattern": [4, 16, 63, 82, 94, 107, 150, 162, 165, 169, 182, 313, 343, 344, 345, 354, 369, 372, 374, 386, 394, 397, 398, 402, 404, 405, 434, 450, 452, 490, 518, 520, 527, 541, 542, 624, 694, 710, 726, 754, 773, 774, 780, 864, 959, 961, 963, 967, 968, 974, 982, 984, 988, 991, 1021], "let": [4, 5, 53, 55, 64, 71, 75, 95, 100, 109, 117, 120, 123, 124, 127, 150, 156, 157, 163, 168, 169, 170, 179, 187, 198, 200, 216, 219, 223, 240, 253, 258, 261, 265, 343, 345, 352, 354, 367, 372, 374, 378, 383, 394, 397, 401, 404, 405, 486, 490, 496, 520, 632, 633, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 667, 670, 850, 857, 858, 963, 964, 965, 966, 967, 974, 975, 977, 982, 983, 991, 1000, 1002, 1019], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 56, 95, 103, 120, 121, 150, 159, 167, 168, 169, 195, 199, 206, 216, 220, 223, 231, 239, 240, 244, 245, 249, 253, 258, 261, 265, 304, 306, 343, 352, 359, 361, 367, 372, 376, 378, 380, 383, 388, 394, 397, 400, 402, 404, 405, 418, 449, 451, 468, 469, 470, 517, 523, 531, 532, 536, 538, 540, 542, 544, 546, 548, 551, 554, 556, 574, 575, 577, 597, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 664, 665, 667, 670, 675, 679, 690, 706, 725, 740, 817, 818, 827, 835, 842, 864, 878, 885, 887, 890, 893, 895, 921, 961, 966, 967, 974, 977, 985, 991, 1002, 1006, 1019], "look": [4, 5, 53, 55, 95, 98, 100, 123, 124, 150, 155, 156, 163, 168, 169, 200, 219, 223, 227, 249, 253, 258, 260, 296, 343, 354, 359, 360, 366, 367, 370, 372, 374, 376, 378, 380, 383, 384, 397, 400, 402, 403, 404, 405, 434, 474, 475, 543, 544, 545, 546, 550, 551, 588, 589, 617, 645, 678, 864, 892, 893, 894, 895, 963, 964, 977, 981, 982, 984, 1002, 1009, 1017, 1019], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 60, 62, 113, 114, 119, 123, 126, 131, 132, 133, 147, 155, 169, 179, 187, 198, 205, 216, 236, 261, 263, 266, 268, 276, 300, 310, 322, 343, 354, 358, 367, 369, 374, 394, 395, 399, 401, 405, 407, 408, 409, 423, 424, 427, 430, 431, 432, 433, 435, 476, 479, 480, 509, 517, 518, 519, 523, 524, 526, 527, 533, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 573, 618, 619, 634, 644, 645, 652, 653, 655, 658, 660, 662, 663, 664, 666, 673, 686, 689, 690, 692, 693, 694, 699, 706, 707, 708, 710, 711, 713, 714, 715, 719, 720, 721, 723, 724, 725, 728, 730, 731, 733, 735, 736, 738, 741, 749, 766, 767, 768, 769, 770, 772, 773, 778, 779, 780, 781, 808, 830, 850, 865, 953, 957, 962, 963, 968, 971, 973, 974, 981, 982, 983, 1000, 1002, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025], "per": [4, 10, 48, 53, 64, 91, 115, 116, 120, 155, 157, 168, 169, 198, 213, 216, 240, 244, 254, 265, 267, 300, 306, 312, 338, 343, 345, 358, 367, 368, 372, 377, 378, 381, 383, 385, 395, 397, 401, 402, 403, 404, 405, 407, 432, 434, 436, 443, 447, 450, 454, 473, 486, 488, 489, 490, 494, 496, 498, 501, 509, 518, 520, 521, 522, 525, 527, 529, 535, 536, 547, 548, 555, 569, 574, 577, 596, 597, 618, 619, 627, 628, 644, 645, 652, 654, 657, 659, 660, 661, 662, 664, 678, 682, 699, 702, 706, 726, 739, 743, 744, 766, 768, 780, 781, 805, 812, 813, 814, 816, 817, 820, 822, 840, 843, 849, 851, 853, 854, 857, 858, 864, 865, 882, 884, 885, 886, 887, 888, 889, 890, 909, 910, 921, 942, 956, 959, 963, 966, 967, 968, 971, 974, 981, 982, 983, 987, 988, 1000, 1002, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1025], "hour": [4, 168, 169, 372, 378, 964, 986], "sundai": 4, "weekend": 4, "clearli": [4, 60, 98, 169, 232, 371, 372, 383, 385, 402, 404, 968, 974], "distinguish": [4, 40, 80, 92, 100, 200, 255, 367, 374, 385, 386, 404, 407, 956, 967, 970, 973], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 75, 86, 98, 116, 123, 156, 168, 169, 170, 187, 198, 199, 206, 216, 223, 224, 233, 244, 264, 300, 302, 304, 305, 323, 343, 344, 345, 354, 360, 367, 371, 372, 373, 374, 376, 377, 380, 383, 385, 395, 396, 397, 398, 399, 401, 402, 404, 405, 407, 427, 429, 431, 432, 433, 434, 435, 445, 447, 518, 521, 543, 544, 545, 546, 550, 551, 568, 575, 580, 613, 614, 616, 625, 644, 645, 681, 686, 691, 698, 728, 746, 752, 759, 763, 766, 771, 773, 807, 844, 845, 876, 877, 892, 893, 894, 895, 921, 936, 956, 957, 959, 961, 963, 966, 967, 970, 972, 973, 975, 977, 979, 981, 982, 983, 991, 1002, 1016, 1017, 1018, 1021, 1023], "leisur": 4, "more": [4, 6, 7, 8, 11, 12, 13, 19, 25, 26, 27, 30, 31, 37, 39, 40, 43, 44, 46, 49, 52, 53, 55, 57, 60, 67, 75, 80, 89, 90, 92, 95, 98, 102, 103, 111, 113, 116, 117, 118, 120, 122, 123, 124, 125, 126, 130, 147, 150, 156, 159, 163, 168, 169, 174, 177, 178, 182, 184, 187, 189, 192, 196, 198, 199, 200, 213, 214, 215, 216, 219, 223, 227, 232, 233, 234, 238, 243, 245, 246, 248, 249, 252, 256, 258, 259, 260, 261, 265, 267, 278, 280, 288, 294, 295, 297, 300, 301, 302, 305, 306, 307, 310, 311, 312, 314, 315, 319, 327, 330, 335, 338, 340, 343, 344, 345, 348, 349, 354, 358, 359, 360, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 384, 385, 386, 388, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 560, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 917, 919, 921, 923, 930, 933, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 987, 988, 989, 990, 991, 993, 997, 998, 999, 1000, 1001, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "spread": [4, 40, 221, 259, 300, 318, 319, 320, 323, 358, 372, 397, 438, 448, 501, 861, 873, 881, 967], "peak": [4, 27, 169, 395, 401, 1023], "middl": [4, 24, 60, 100, 110, 182, 339, 369, 974, 977], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 171, 174, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 314, 315, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 366, 375, 379, 388, 390, 424, 488, 617, 618, 683, 684, 686, 687, 688, 788, 898, 987, 996, 998, 999, 1000, 1006, 1018, 1021, 1022, 1023, 1024], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 171, 174, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 314, 315, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 372, 379, 424, 488, 617, 618, 683, 684, 686, 687, 688, 788, 998, 999, 1000, 1006, 1023], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 171, 174, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 314, 315, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 379, 424, 488, 617, 618, 683, 684, 686, 687, 688, 788, 898, 974, 998, 999, 1000, 1006], "fig": [4, 5, 7, 8, 10, 14, 25, 27, 42, 43, 45, 53, 55, 57, 60, 64, 66, 73, 78, 80, 86, 90, 95, 100, 101, 102, 106, 109, 115, 116, 117, 120, 123, 124, 127, 128, 130, 132, 153, 159, 162, 169, 171, 174, 178, 186, 189, 192, 193, 195, 196, 198, 199, 206, 211, 213, 216, 219, 220, 221, 222, 223, 224, 228, 230, 236, 237, 248, 253, 254, 255, 258, 259, 260, 261, 264, 267, 268, 269, 276, 278, 280, 282, 283, 291, 295, 296, 300, 301, 302, 304, 305, 306, 310, 314, 315, 327, 337, 338, 339, 340, 343, 344, 345, 348, 379, 998], "ax": [4, 5, 7, 8, 10, 12, 14, 16, 25, 27, 30, 31, 32, 40, 42, 43, 45, 53, 55, 56, 57, 64, 66, 72, 73, 75, 80, 82, 86, 90, 92, 95, 101, 102, 106, 109, 112, 115, 117, 120, 127, 128, 130, 131, 132, 153, 154, 159, 162, 167, 168, 169, 170, 171, 174, 177, 178, 181, 182, 187, 189, 190, 193, 195, 196, 198, 199, 200, 202, 203, 206, 207, 209, 211, 213, 216, 219, 220, 221, 222, 223, 224, 228, 233, 236, 237, 239, 243, 245, 248, 253, 254, 255, 258, 260, 261, 262, 264, 265, 267, 268, 269, 270, 272, 276, 278, 280, 281, 282, 283, 286, 288, 289, 294, 295, 296, 300, 302, 303, 304, 305, 306, 310, 311, 314, 315, 326, 327, 328, 331, 332, 337, 338, 339, 340, 343, 344, 345, 348, 349, 374, 375, 402, 407, 424, 520, 527, 536, 617, 618, 683, 684, 686, 687, 688, 704, 788, 898, 967, 970, 974, 1006, 1019], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 57, 60, 62, 65, 66, 73, 75, 79, 80, 81, 82, 85, 86, 91, 92, 95, 96, 97, 98, 100, 105, 106, 110, 112, 113, 115, 116, 117, 119, 120, 124, 127, 128, 130, 131, 132, 142, 152, 154, 159, 162, 163, 168, 169, 171, 174, 178, 181, 189, 190, 192, 193, 196, 197, 198, 199, 200, 202, 206, 211, 214, 216, 219, 220, 223, 224, 227, 228, 230, 232, 233, 234, 235, 236, 237, 243, 244, 245, 246, 248, 249, 253, 254, 255, 258, 260, 261, 263, 264, 265, 267, 268, 269, 271, 272, 276, 278, 280, 281, 282, 283, 286, 287, 289, 290, 291, 294, 295, 296, 297, 301, 302, 303, 304, 305, 306, 310, 314, 315, 321, 323, 327, 328, 330, 337, 338, 339, 340, 343, 344, 345, 348, 349, 379, 998], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64, 65, 66, 73, 75, 80, 82, 85, 86, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 105, 106, 110, 112, 113, 120, 121, 122, 123, 124, 128, 130, 131, 142, 152, 154, 158, 159, 162, 163, 168, 169, 171, 174, 177, 178, 181, 182, 188, 192, 195, 196, 197, 198, 199, 200, 202, 204, 206, 209, 212, 214, 216, 219, 220, 221, 223, 224, 227, 228, 230, 232, 234, 235, 236, 237, 243, 245, 246, 249, 253, 254, 255, 260, 261, 262, 265, 267, 268, 272, 276, 278, 280, 294, 295, 297, 300, 301, 302, 303, 304, 305, 306, 314, 315, 318, 320, 328, 330, 334, 335, 337, 338, 339, 340, 343, 344, 345, 898, 998], "4": [4, 5, 6, 7, 8, 9, 10, 12, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 64, 65, 66, 70, 71, 72, 73, 74, 81, 82, 85, 86, 91, 92, 96, 97, 98, 99, 100, 101, 102, 104, 105, 109, 111, 113, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 136, 143, 150, 152, 153, 155, 156, 158, 159, 162, 163, 168, 169, 171, 174, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 195, 196, 197, 198, 199, 204, 205, 206, 208, 211, 212, 216, 219, 227, 231, 232, 233, 234, 235, 236, 238, 240, 243, 244, 245, 246, 248, 249, 253, 254, 255, 256, 258, 259, 260, 261, 263, 265, 266, 267, 269, 272, 276, 278, 280, 282, 283, 284, 285, 288, 294, 295, 296, 297, 300, 301, 303, 304, 306, 310, 311, 313, 315, 318, 319, 320, 321, 322, 327, 329, 333, 334, 335, 338, 339, 340, 343, 344, 345, 352, 354, 359, 366, 367, 369, 370, 372, 377, 378, 381, 383, 384, 385, 388, 389, 390, 395, 397, 398, 399, 401, 402, 404, 405, 406, 407, 409, 423, 425, 426, 427, 429, 431, 432, 433, 434, 435, 437, 438, 439, 445, 446, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 482, 490, 498, 499, 502, 503, 504, 514, 518, 519, 520, 521, 523, 524, 525, 526, 530, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 551, 556, 563, 567, 568, 575, 576, 577, 579, 580, 589, 593, 594, 600, 603, 605, 608, 613, 614, 615, 616, 619, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 660, 663, 665, 666, 670, 673, 675, 676, 678, 679, 684, 685, 688, 692, 693, 701, 702, 711, 712, 719, 728, 729, 731, 732, 733, 734, 736, 737, 741, 753, 754, 766, 767, 773, 774, 777, 779, 780, 781, 782, 783, 784, 787, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 808, 810, 813, 814, 815, 818, 819, 820, 821, 823, 832, 841, 842, 843, 849, 850, 851, 856, 857, 858, 859, 860, 862, 865, 868, 872, 878, 884, 885, 887, 888, 890, 892, 893, 894, 910, 918, 920, 921, 923, 925, 926, 931, 935, 938, 956, 957, 960, 961, 962, 963, 965, 967, 968, 969, 970, 977, 978, 981, 982, 985, 993, 997, 998, 999, 1000, 1002, 1005, 1007, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1022, 1023, 1024], "average_week_demand": 4, "groupbi": [4, 73, 169, 206, 216], "weekdai": [4, 169], "count": [4, 14, 25, 27, 41, 49, 53, 70, 71, 92, 131, 132, 168, 169, 198, 200, 231, 240, 267, 278, 311, 312, 344, 345, 367, 369, 376, 381, 385, 386, 395, 396, 397, 402, 404, 405, 432, 435, 475, 522, 530, 567, 574, 575, 576, 577, 580, 590, 603, 626, 683, 691, 701, 704, 714, 715, 723, 739, 768, 769, 771, 772, 819, 823, 824, 825, 833, 836, 847, 896, 898, 923, 932, 956, 959, 963, 967, 969, 970, 977, 983, 991, 1002, 1009, 1012, 1014, 1017, 1018, 1020, 1021], "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 55, 68, 71, 79, 80, 81, 82, 86, 92, 95, 98, 99, 100, 102, 103, 112, 113, 116, 119, 120, 123, 124, 130, 131, 132, 137, 146, 147, 150, 155, 157, 159, 162, 165, 168, 169, 178, 180, 187, 189, 191, 194, 198, 200, 202, 204, 205, 207, 213, 214, 215, 216, 222, 224, 227, 230, 231, 232, 233, 234, 236, 237, 238, 240, 243, 244, 245, 246, 248, 249, 254, 255, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 270, 272, 273, 276, 278, 289, 300, 303, 305, 306, 307, 310, 313, 321, 330, 333, 338, 340, 342, 343, 345, 346, 354, 358, 364, 366, 367, 369, 372, 373, 374, 376, 377, 378, 380, 381, 383, 384, 385, 394, 395, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 418, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 474, 487, 488, 490, 492, 498, 505, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 569, 574, 575, 576, 577, 580, 583, 588, 592, 593, 594, 595, 596, 597, 599, 608, 613, 614, 616, 618, 620, 621, 625, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 670, 674, 675, 676, 677, 678, 679, 680, 681, 690, 691, 693, 695, 698, 699, 702, 703, 709, 711, 714, 715, 716, 721, 722, 723, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 759, 763, 764, 766, 768, 769, 770, 772, 773, 775, 776, 778, 780, 781, 782, 785, 786, 788, 796, 800, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 830, 831, 832, 834, 835, 837, 838, 840, 841, 842, 843, 845, 846, 848, 849, 853, 854, 856, 860, 862, 864, 865, 870, 872, 873, 875, 877, 879, 880, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 900, 904, 905, 907, 941, 942, 948, 952, 956, 957, 958, 961, 963, 964, 966, 969, 970, 971, 972, 974, 975, 980, 981, 982, 983, 987, 991, 997, 1000, 1002, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "plot": [4, 5, 6, 9, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 56, 58, 59, 60, 61, 62, 65, 68, 72, 73, 75, 79, 80, 81, 86, 88, 90, 93, 95, 98, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 117, 122, 123, 125, 127, 128, 129, 134, 137, 139, 142, 143, 145, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 165, 166, 167, 168, 170, 171, 172, 174, 176, 180, 181, 183, 185, 186, 187, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 210, 211, 212, 213, 215, 216, 217, 221, 222, 223, 224, 226, 227, 230, 231, 233, 234, 235, 240, 241, 243, 244, 245, 247, 249, 251, 252, 253, 258, 259, 261, 263, 264, 268, 269, 270, 272, 274, 276, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295, 296, 300, 301, 302, 303, 304, 305, 307, 311, 314, 315, 319, 320, 323, 325, 326, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 347, 348, 350, 351, 352, 353, 361, 372, 375, 381, 383, 387, 388, 392, 395, 397, 399, 401, 403, 404, 424, 427, 432, 436, 442, 450, 457, 482, 487, 488, 490, 498, 501, 505, 509, 510, 539, 543, 546, 548, 550, 551, 555, 556, 596, 608, 617, 618, 619, 643, 644, 658, 662, 683, 684, 686, 687, 688, 689, 704, 712, 735, 767, 769, 772, 773, 774, 788, 799, 805, 806, 807, 808, 811, 822, 826, 842, 845, 857, 858, 861, 864, 884, 889, 892, 893, 898, 960, 961, 963, 964, 966, 967, 970, 971, 973, 981, 982, 983, 987, 988, 997, 998, 1000, 1004, 1010, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "_": [4, 5, 7, 8, 11, 12, 14, 25, 26, 27, 32, 33, 40, 43, 50, 53, 55, 58, 63, 67, 70, 82, 92, 95, 100, 101, 103, 105, 113, 114, 115, 142, 150, 155, 156, 157, 167, 168, 169, 174, 177, 181, 182, 183, 185, 186, 187, 190, 195, 196, 198, 200, 211, 215, 220, 223, 228, 233, 240, 253, 258, 260, 261, 262, 264, 265, 267, 281, 286, 289, 297, 302, 305, 306, 307, 311, 314, 315, 319, 320, 338, 343, 345, 349, 374, 378, 385, 402, 404, 405, 432, 518, 519, 520, 521, 522, 524, 525, 526, 529, 533, 552, 583, 638, 639, 649, 670, 674, 675, 676, 677, 682, 684, 686, 749, 782, 796, 828, 836, 857, 858, 957, 963, 964, 967, 969, 970, 971, 974, 975, 977, 982, 983, 1000, 1016], "hourli": [4, 168], "xtick": [4, 6, 8, 11, 30, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 90, 98, 120, 121, 122, 152, 153, 154, 158, 181, 188, 194, 211, 227, 234, 244, 245, 246, 249, 257, 258, 272, 282, 291, 297, 306, 318, 330, 333, 334, 335, 336, 683, 998], "24": [4, 5, 66, 165, 169, 182, 206, 217, 266, 278, 306, 308, 309, 310, 316, 318, 319, 376, 388, 397, 404, 405, 423, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 446, 448, 450, 455, 456, 457, 458, 459, 460, 461, 462, 475, 476, 477, 478, 482, 490, 501, 502, 503, 504, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 529, 530, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 567, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 599, 613, 614, 615, 616, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 684, 686, 688, 694, 700, 712, 731, 738, 780, 781, 782, 785, 786, 796, 803, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 845, 847, 848, 849, 850, 853, 854, 856, 858, 859, 860, 861, 862, 864, 874, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 915, 916, 942, 948, 956, 974, 977, 985, 1005, 1007, 1009, 1017, 1018, 1019, 1020, 1022], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 25, 26, 27, 30, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 55, 60, 61, 63, 64, 65, 78, 79, 81, 82, 110, 112, 113, 114, 117, 123, 129, 142, 146, 151, 168, 169, 174, 182, 187, 188, 192, 196, 198, 199, 205, 206, 214, 216, 220, 222, 230, 231, 235, 243, 245, 248, 249, 253, 257, 258, 259, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 276, 282, 288, 291, 297, 300, 305, 306, 310, 314, 315, 319, 330, 343, 344, 349, 352, 359, 366, 367, 369, 372, 374, 378, 381, 385, 391, 397, 401, 404, 407, 426, 447, 455, 457, 458, 459, 460, 461, 462, 464, 467, 477, 480, 481, 500, 513, 527, 539, 540, 545, 546, 549, 574, 575, 577, 615, 618, 624, 626, 634, 635, 655, 657, 662, 666, 678, 698, 716, 731, 773, 810, 816, 830, 832, 834, 835, 840, 854, 861, 862, 863, 869, 870, 873, 874, 877, 878, 920, 921, 935, 956, 963, 967, 971, 981, 988, 991, 996, 997, 998, 1000, 1014, 1015, 1016, 1017, 1019, 1022], "7": [4, 6, 8, 12, 13, 14, 16, 19, 26, 30, 32, 34, 39, 42, 44, 46, 53, 54, 55, 56, 60, 64, 65, 67, 71, 72, 74, 80, 82, 85, 98, 109, 110, 113, 119, 123, 126, 130, 131, 159, 167, 168, 169, 171, 174, 179, 180, 197, 198, 199, 200, 212, 214, 216, 219, 227, 232, 233, 238, 240, 243, 244, 247, 248, 253, 258, 262, 264, 265, 269, 271, 276, 278, 280, 283, 284, 286, 296, 297, 300, 304, 310, 313, 314, 315, 318, 319, 321, 322, 327, 329, 334, 338, 339, 344, 345, 354, 367, 369, 370, 372, 376, 377, 378, 388, 389, 390, 395, 401, 402, 404, 405, 406, 407, 425, 430, 434, 436, 437, 438, 439, 448, 457, 458, 477, 518, 519, 520, 521, 522, 524, 530, 547, 548, 574, 577, 586, 613, 614, 616, 633, 635, 644, 647, 678, 693, 707, 708, 709, 711, 713, 729, 730, 731, 735, 736, 738, 770, 777, 780, 783, 784, 789, 792, 799, 800, 803, 807, 810, 814, 824, 825, 833, 842, 843, 856, 857, 879, 880, 921, 924, 925, 931, 956, 957, 962, 963, 965, 967, 968, 970, 971, 973, 977, 981, 982, 985, 993, 997, 1000, 1005, 1007, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1022], "xticklabel": [4, 10, 120, 169, 306], "sun": [4, 169, 1017, 1022, 1023], "mon": [4, 169], "tue": [4, 169, 1015], "wed": [4, 169], "thu": [4, 5, 24, 25, 26, 27, 40, 53, 55, 60, 78, 82, 98, 100, 113, 115, 116, 118, 120, 143, 150, 155, 156, 169, 182, 186, 187, 198, 200, 216, 227, 233, 237, 245, 256, 258, 263, 264, 265, 307, 310, 313, 348, 354, 358, 359, 367, 374, 378, 383, 385, 395, 397, 401, 402, 404, 405, 407, 408, 423, 425, 449, 501, 513, 539, 540, 541, 542, 543, 544, 549, 550, 551, 589, 592, 596, 608, 613, 618, 619, 629, 631, 644, 663, 691, 704, 710, 773, 778, 784, 789, 791, 803, 815, 818, 853, 884, 958, 959, 960, 961, 962, 963, 964, 967, 968, 973, 974, 975, 977, 979, 980, 981, 982, 988, 990, 991, 1009, 1011, 1015, 1017, 1018, 1019, 1021, 1025], "fri": [4, 169, 367], "sat": [4, 169, 405], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 110, 111, 112, 114, 120, 121, 122, 123, 124, 125, 129, 133, 136, 137, 142, 143, 146, 150, 151, 152, 153, 155, 156, 157, 168, 177, 180, 181, 182, 183, 185, 186, 187, 188, 191, 192, 198, 200, 201, 202, 203, 205, 207, 208, 212, 216, 231, 233, 234, 253, 257, 258, 262, 263, 267, 268, 271, 272, 273, 280, 281, 284, 285, 306, 327, 329, 330, 333, 343, 349, 350, 351, 617], "ylabel": [4, 8, 9, 24, 25, 26, 27, 30, 33, 34, 37, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 110, 111, 112, 114, 121, 122, 123, 124, 125, 129, 133, 136, 137, 142, 143, 146, 150, 151, 152, 153, 155, 156, 157, 168, 177, 180, 181, 182, 183, 185, 186, 187, 188, 191, 192, 198, 200, 201, 202, 203, 205, 207, 208, 216, 231, 233, 234, 253, 257, 258, 261, 262, 263, 267, 268, 271, 272, 273, 281, 327, 330, 333, 343, 349, 350, 351, 617], "number": [4, 5, 7, 8, 10, 12, 13, 19, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 57, 61, 62, 63, 67, 68, 70, 71, 72, 73, 75, 82, 85, 86, 91, 92, 95, 97, 99, 100, 103, 109, 110, 111, 113, 116, 118, 119, 121, 122, 123, 124, 126, 130, 132, 143, 144, 147, 158, 159, 163, 165, 168, 169, 174, 182, 187, 197, 198, 199, 200, 205, 206, 212, 213, 214, 215, 216, 219, 227, 231, 234, 237, 243, 244, 246, 248, 249, 252, 253, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 278, 280, 284, 285, 300, 302, 303, 306, 310, 311, 312, 313, 314, 315, 322, 330, 334, 335, 338, 344, 345, 348, 352, 354, 359, 360, 364, 366, 367, 368, 369, 370, 372, 375, 376, 378, 379, 380, 381, 383, 384, 385, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 418, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 567, 568, 569, 570, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 687, 689, 690, 691, 693, 698, 699, 700, 702, 704, 706, 709, 713, 714, 715, 716, 719, 720, 723, 725, 737, 740, 759, 763, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 873, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 904, 905, 908, 920, 921, 924, 925, 935, 936, 938, 941, 942, 959, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 979, 981, 982, 983, 984, 987, 988, 990, 993, 1000, 1001, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "rental": [4, 169, 974], "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 69, 74, 76, 86, 90, 99, 102, 104, 109, 111, 118, 119, 120, 123, 124, 127, 129, 130, 131, 133, 139, 142, 145, 147, 150, 152, 155, 156, 163, 165, 167, 168, 169, 170, 171, 177, 181, 182, 191, 194, 198, 200, 203, 206, 207, 220, 228, 230, 231, 232, 233, 235, 236, 237, 245, 252, 256, 259, 261, 263, 264, 267, 268, 278, 281, 286, 289, 290, 295, 299, 300, 308, 311, 312, 314, 318, 319, 322, 323, 326, 327, 330, 334, 336, 337, 343, 344, 349, 350, 351, 352, 354, 358, 360, 361, 364, 365, 366, 367, 368, 369, 374, 376, 377, 380, 381, 384, 387, 397, 401, 404, 407, 419, 423, 424, 425, 428, 431, 450, 451, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 494, 496, 506, 510, 517, 518, 520, 522, 523, 525, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 559, 568, 569, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 683, 684, 686, 687, 688, 693, 694, 695, 698, 699, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 720, 723, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 767, 768, 769, 770, 772, 773, 774, 777, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 831, 833, 834, 835, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 861, 862, 863, 864, 865, 868, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 904, 929, 930, 931, 958, 959, 960, 963, 964, 967, 971, 974, 975, 981, 982, 983, 988, 990, 991, 993, 998, 1000, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "absolut": [4, 75, 99, 120, 147, 168, 198, 200, 204, 216, 374, 397, 399, 401, 402, 404, 405, 406, 407, 408, 430, 436, 442, 443, 517, 523, 528, 531, 532, 534, 535, 536, 544, 546, 547, 548, 551, 574, 576, 577, 579, 583, 588, 605, 613, 618, 632, 635, 636, 638, 640, 642, 657, 658, 660, 662, 664, 668, 669, 690, 703, 707, 721, 722, 730, 731, 733, 738, 740, 742, 753, 778, 784, 788, 799, 802, 808, 810, 822, 824, 825, 829, 848, 853, 856, 869, 893, 895, 953, 963, 964, 977, 981, 983, 1000, 1001, 1010, 1015, 1020, 1021, 1022, 1023], "basi": [4, 6, 13, 100, 150, 155, 157, 199, 296, 313, 330, 364, 370, 373, 397, 402, 404, 438, 520, 608, 618, 625, 677, 863, 965, 977, 982, 989, 997, 998, 1001, 1004, 1017, 1019, 1022], "max": [4, 8, 9, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 58, 62, 67, 72, 77, 82, 83, 90, 95, 98, 106, 110, 112, 119, 128, 136, 138, 139, 142, 143, 152, 154, 155, 163, 165, 168, 180, 185, 186, 187, 191, 193, 200, 201, 204, 212, 214, 216, 222, 231, 234, 256, 257, 258, 269, 271, 276, 278, 280, 284, 285, 291, 294, 296, 300, 302, 303, 305, 313, 321, 323, 329, 336, 339, 358, 397, 399, 402, 455, 456, 457, 458, 459, 460, 461, 462, 463, 498, 522, 541, 542, 543, 544, 545, 546, 549, 550, 551, 592, 613, 617, 618, 634, 635, 655, 658, 660, 666, 677, 678, 682, 685, 690, 691, 726, 742, 775, 776, 782, 841, 842, 853, 854, 856, 863, 870, 871, 892, 893, 894, 895, 935, 963, 965, 970, 977, 981, 982, 1000, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "977": [4, 401], "rescal": [4, 46, 47, 55, 100, 179, 186, 222, 300, 340, 399, 409, 455, 456, 457, 458, 459, 460, 461, 462, 519, 524, 632, 635, 638, 856, 862, 886, 887, 888, 889, 890, 967, 977, 1001, 1013, 1014], "variabl": [4, 9, 11, 12, 16, 37, 70, 113, 117, 120, 123, 124, 138, 139, 142, 147, 157, 158, 162, 163, 169, 170, 174, 182, 187, 198, 202, 203, 216, 221, 249, 258, 261, 268, 305, 306, 307, 354, 358, 360, 367, 369, 370, 372, 374, 376, 377, 380, 385, 397, 398, 399, 400, 402, 404, 405, 406, 436, 468, 469, 470, 473, 485, 487, 494, 501, 518, 520, 522, 527, 530, 539, 545, 546, 590, 592, 593, 594, 626, 636, 637, 640, 641, 647, 668, 669, 681, 695, 732, 783, 784, 787, 789, 790, 791, 792, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 809, 812, 816, 817, 847, 858, 861, 865, 873, 885, 956, 957, 959, 963, 966, 967, 968, 969, 970, 972, 974, 975, 977, 981, 983, 987, 988, 990, 993, 994, 996, 998, 1009, 1014, 1017, 1019, 1022, 1024], "rel": [4, 6, 8, 17, 27, 55, 61, 100, 117, 155, 174, 178, 198, 216, 246, 284, 285, 301, 307, 311, 314, 330, 343, 344, 367, 371, 374, 380, 385, 395, 397, 401, 404, 405, 407, 426, 429, 433, 435, 445, 507, 510, 517, 520, 523, 527, 543, 544, 545, 546, 550, 551, 552, 590, 635, 644, 645, 657, 658, 660, 676, 680, 714, 732, 782, 785, 786, 788, 796, 808, 811, 824, 825, 829, 841, 842, 853, 854, 864, 880, 884, 885, 886, 889, 891, 892, 893, 894, 895, 963, 964, 967, 969, 970, 971, 973, 990, 998], "so": [4, 9, 12, 16, 17, 42, 48, 55, 56, 61, 65, 81, 116, 119, 122, 129, 150, 155, 168, 170, 174, 178, 198, 199, 227, 258, 278, 284, 285, 288, 295, 296, 301, 306, 307, 311, 321, 330, 338, 343, 345, 352, 354, 358, 359, 360, 366, 367, 371, 372, 374, 376, 377, 378, 380, 381, 385, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 410, 411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 482, 494, 495, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 681, 691, 694, 702, 711, 726, 741, 773, 780, 781, 782, 785, 786, 788, 789, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 874, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 921, 933, 942, 956, 957, 959, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 973, 977, 979, 980, 981, 982, 988, 991, 1000, 1001, 1002, 1009, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1025], "error": [4, 5, 7, 13, 17, 27, 75, 78, 79, 81, 99, 105, 108, 109, 110, 113, 116, 117, 120, 124, 134, 150, 162, 165, 168, 182, 187, 194, 198, 200, 202, 204, 205, 212, 216, 230, 233, 249, 251, 254, 258, 259, 263, 272, 274, 284, 285, 314, 329, 338, 343, 344, 369, 370, 372, 374, 375, 376, 377, 381, 383, 385, 391, 395, 396, 397, 398, 399, 401, 402, 404, 405, 406, 407, 429, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 482, 489, 501, 510, 517, 523, 528, 529, 531, 534, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 553, 561, 578, 581, 582, 584, 585, 586, 592, 615, 618, 629, 632, 633, 634, 637, 639, 641, 647, 649, 651, 655, 657, 659, 661, 663, 664, 666, 671, 674, 675, 678, 679, 682, 684, 687, 688, 695, 698, 706, 707, 708, 712, 725, 728, 729, 730, 731, 732, 733, 735, 736, 738, 741, 749, 763, 767, 773, 774, 782, 785, 786, 788, 796, 806, 807, 808, 810, 811, 812, 813, 814, 819, 820, 821, 823, 824, 825, 831, 832, 834, 835, 836, 839, 842, 845, 857, 858, 863, 864, 882, 884, 886, 887, 888, 893, 895, 902, 903, 904, 905, 908, 930, 951, 954, 956, 957, 958, 960, 961, 962, 964, 968, 971, 975, 977, 981, 982, 983, 989, 1000, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "easili": [4, 9, 31, 144, 171, 201, 214, 232, 237, 240, 258, 260, 267, 283, 302, 372, 374, 385, 386, 398, 404, 405, 407, 435, 961, 963, 964, 977, 981, 982, 983, 994, 997, 1002, 1015], "interpret": [4, 27, 147, 157, 165, 166, 167, 169, 172, 198, 199, 214, 216, 252, 258, 260, 261, 297, 301, 304, 312, 343, 345, 358, 370, 372, 373, 378, 380, 381, 385, 387, 395, 397, 398, 403, 405, 438, 450, 451, 453, 482, 527, 558, 597, 625, 629, 639, 658, 659, 677, 678, 681, 687, 714, 738, 743, 744, 768, 775, 776, 788, 797, 807, 808, 810, 813, 845, 857, 864, 935, 961, 963, 967, 968, 974, 977, 983, 987, 993, 1001, 1009, 1010, 1014, 1017, 1022, 1023, 1024], "fraction": [4, 25, 27, 121, 123, 198, 206, 216, 338, 344, 395, 401, 404, 424, 425, 435, 436, 442, 443, 501, 513, 543, 544, 545, 546, 550, 551, 552, 576, 579, 588, 652, 653, 654, 657, 662, 663, 664, 689, 707, 708, 709, 719, 777, 779, 784, 788, 808, 809, 823, 851, 886, 887, 888, 892, 893, 894, 895, 933, 963, 967, 970, 974, 975, 977, 982, 983, 988, 1010, 1011, 1012, 1023], "maximum": [4, 8, 11, 27, 33, 37, 57, 78, 79, 80, 81, 82, 97, 115, 116, 119, 121, 151, 157, 165, 176, 186, 217, 268, 280, 284, 285, 291, 300, 325, 341, 344, 348, 350, 351, 358, 377, 378, 384, 385, 394, 395, 397, 399, 400, 402, 404, 405, 407, 408, 409, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 440, 443, 445, 447, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 468, 469, 470, 484, 495, 497, 498, 499, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 569, 570, 583, 596, 613, 617, 618, 621, 623, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 660, 662, 663, 664, 665, 668, 669, 671, 672, 673, 674, 675, 676, 678, 679, 680, 702, 729, 766, 780, 782, 785, 786, 788, 796, 803, 808, 833, 840, 841, 842, 848, 849, 853, 854, 856, 859, 860, 861, 863, 872, 873, 878, 879, 880, 881, 884, 885, 889, 892, 893, 894, 895, 896, 898, 901, 908, 956, 962, 963, 964, 966, 967, 969, 970, 971, 973, 977, 981, 982, 983, 1001, 1016, 1017, 1019, 1020, 1023, 1024], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 139, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 165, 167, 168, 169, 170, 171, 174, 176, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 222, 227, 228, 230, 232, 233, 234, 235, 236, 237, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 276, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 294, 295, 296, 297, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 340, 343, 344, 348, 349, 350, 351, 352, 358, 360, 361, 364, 367, 369, 372, 375, 377, 378, 381, 383, 385, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 413, 418, 419, 420, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 487, 495, 496, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 561, 563, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 680, 683, 684, 686, 687, 688, 697, 708, 720, 735, 773, 780, 781, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 913, 951, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 977, 978, 979, 980, 981, 982, 983, 987, 988, 989, 991, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 49, 50, 53, 54, 56, 57, 58, 61, 65, 68, 69, 76, 79, 80, 84, 87, 95, 98, 100, 104, 105, 106, 115, 117, 118, 124, 130, 142, 147, 162, 174, 185, 187, 199, 206, 215, 218, 220, 225, 227, 233, 240, 242, 250, 260, 265, 267, 278, 284, 285, 287, 300, 304, 307, 310, 312, 313, 343, 344, 345, 352, 354, 358, 359, 360, 361, 364, 369, 370, 372, 373, 374, 378, 379, 381, 383, 384, 387, 391, 393, 394, 395, 398, 399, 400, 401, 402, 403, 405, 406, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 448, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 490, 498, 500, 508, 511, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 696, 697, 716, 717, 720, 721, 726, 727, 748, 753, 754, 759, 763, 768, 773, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 872, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 899, 907, 921, 928, 933, 936, 951, 952, 955, 956, 957, 961, 962, 963, 964, 967, 968, 969, 970, 971, 972, 975, 977, 979, 980, 981, 982, 983, 984, 987, 989, 991, 993, 997, 999, 1000, 1002, 1003, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "minim": [4, 12, 57, 66, 78, 79, 123, 150, 158, 177, 194, 196, 198, 200, 206, 216, 219, 230, 231, 243, 248, 259, 267, 268, 300, 310, 313, 327, 338, 348, 361, 371, 372, 375, 380, 383, 385, 395, 397, 399, 402, 404, 426, 427, 431, 432, 436, 449, 524, 526, 533, 543, 544, 545, 546, 550, 551, 595, 596, 597, 627, 632, 635, 643, 644, 653, 657, 658, 660, 664, 665, 673, 678, 680, 681, 733, 765, 831, 833, 842, 860, 872, 878, 892, 893, 894, 895, 958, 963, 964, 967, 970, 971, 977, 979, 980, 981, 982, 987, 989, 1000, 1001, 1004, 1013, 1018, 1019], "squar": [4, 5, 61, 71, 79, 80, 81, 84, 87, 96, 106, 113, 124, 126, 147, 150, 155, 165, 168, 176, 177, 179, 182, 187, 194, 198, 200, 202, 203, 208, 215, 216, 217, 230, 231, 233, 246, 267, 268, 272, 304, 312, 313, 315, 327, 343, 364, 369, 372, 378, 381, 385, 397, 399, 400, 402, 403, 404, 408, 409, 418, 426, 428, 429, 430, 432, 433, 435, 436, 443, 445, 446, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 487, 517, 523, 525, 527, 529, 533, 535, 538, 540, 542, 544, 545, 546, 548, 551, 554, 556, 576, 577, 578, 581, 582, 584, 585, 586, 590, 591, 592, 595, 597, 601, 608, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 668, 669, 672, 673, 674, 676, 678, 680, 682, 685, 695, 707, 708, 709, 735, 736, 743, 744, 748, 754, 755, 770, 810, 817, 818, 826, 827, 830, 832, 834, 835, 842, 845, 864, 884, 885, 887, 889, 890, 891, 893, 895, 919, 940, 953, 958, 960, 961, 970, 971, 975, 981, 983, 989, 1000, 1001, 1004, 1009, 1012, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1025], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 37, 38, 44, 45, 49, 54, 55, 56, 57, 58, 61, 63, 71, 72, 74, 83, 85, 86, 95, 96, 97, 103, 105, 108, 109, 110, 115, 116, 117, 119, 121, 123, 127, 130, 131, 132, 133, 134, 136, 137, 145, 146, 147, 149, 150, 155, 157, 160, 161, 162, 164, 167, 168, 176, 179, 182, 186, 187, 193, 198, 200, 202, 203, 205, 206, 215, 216, 217, 226, 227, 228, 233, 238, 240, 241, 242, 243, 245, 246, 248, 250, 251, 252, 255, 256, 258, 259, 260, 261, 262, 263, 265, 267, 268, 269, 270, 271, 274, 278, 279, 285, 292, 300, 302, 313, 314, 333, 338, 344, 345, 349, 358, 359, 360, 361, 364, 370, 372, 375, 376, 379, 380, 381, 382, 388, 391, 392, 395, 397, 400, 402, 405, 406, 408, 409, 410, 411, 412, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 447, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 481, 482, 484, 487, 488, 510, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 561, 562, 563, 565, 566, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 674, 675, 676, 677, 678, 683, 684, 686, 687, 688, 693, 694, 697, 698, 699, 702, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 767, 768, 769, 770, 772, 773, 774, 777, 780, 781, 782, 785, 786, 787, 788, 793, 794, 796, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 872, 873, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 903, 904, 905, 907, 909, 910, 913, 915, 916, 917, 951, 955, 962, 964, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 988, 989, 991, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1021, 1022, 1023, 1024, 1025], "condit": [4, 12, 25, 27, 82, 118, 123, 165, 166, 168, 172, 187, 200, 203, 216, 261, 313, 352, 378, 383, 387, 394, 395, 397, 399, 402, 404, 406, 437, 450, 457, 458, 459, 464, 482, 499, 509, 510, 522, 525, 526, 527, 529, 531, 533, 535, 536, 548, 613, 618, 619, 629, 636, 637, 638, 640, 641, 642, 656, 658, 659, 660, 661, 668, 669, 673, 683, 698, 703, 704, 721, 722, 778, 819, 820, 821, 822, 823, 842, 845, 848, 857, 858, 861, 865, 921, 961, 963, 964, 965, 967, 969, 970, 972, 977, 983, 987, 1000, 1004, 1010, 1012, 1013, 1014, 1016, 1017, 1019, 1021, 1023, 1024, 1025], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 66, 68, 70, 71, 72, 73, 75, 78, 79, 80, 81, 89, 95, 96, 97, 98, 99, 100, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 130, 133, 137, 138, 139, 143, 147, 150, 151, 152, 155, 156, 157, 159, 161, 162, 164, 165, 167, 168, 169, 170, 174, 176, 177, 178, 181, 182, 186, 193, 198, 199, 200, 203, 205, 206, 212, 214, 215, 216, 217, 219, 220, 221, 222, 224, 227, 228, 230, 231, 232, 233, 234, 240, 243, 244, 248, 249, 252, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 271, 273, 276, 278, 281, 284, 285, 286, 289, 291, 300, 305, 306, 307, 311, 312, 313, 315, 319, 323, 326, 327, 329, 330, 332, 333, 343, 344, 345, 348, 351, 352, 354, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 417, 419, 420, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 487, 489, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 561, 562, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 596, 597, 598, 605, 608, 609, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 695, 697, 698, 704, 706, 707, 712, 714, 715, 719, 720, 722, 727, 728, 730, 731, 733, 735, 736, 738, 741, 743, 744, 748, 749, 751, 752, 753, 754, 755, 758, 760, 761, 762, 763, 766, 767, 768, 769, 772, 773, 774, 775, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 876, 877, 878, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 899, 901, 902, 904, 905, 907, 908, 911, 915, 916, 917, 919, 920, 921, 923, 925, 928, 930, 931, 932, 935, 937, 938, 941, 942, 948, 951, 953, 954, 955, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 991, 994, 996, 997, 1001, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "median": [4, 37, 71, 75, 80, 81, 123, 162, 163, 168, 200, 204, 215, 229, 300, 311, 313, 314, 367, 399, 404, 406, 426, 440, 444, 447, 460, 538, 540, 544, 551, 583, 613, 616, 621, 656, 657, 665, 707, 738, 831, 862, 874, 893, 895, 957, 977, 983, 1012, 1013], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 58, 60, 61, 96, 113, 114, 123, 126, 133, 147, 150, 155, 165, 167, 168, 169, 174, 187, 192, 197, 198, 204, 216, 251, 256, 258, 264, 265, 271, 274, 305, 343, 344, 358, 367, 369, 374, 378, 385, 394, 396, 399, 401, 402, 403, 404, 405, 435, 438, 448, 484, 501, 524, 526, 533, 537, 543, 544, 545, 546, 549, 550, 551, 590, 593, 594, 597, 613, 617, 644, 676, 678, 684, 685, 688, 690, 691, 693, 695, 698, 699, 702, 703, 706, 710, 711, 712, 714, 716, 721, 722, 724, 725, 728, 732, 740, 741, 742, 767, 768, 769, 771, 772, 774, 775, 778, 805, 807, 810, 830, 861, 873, 892, 893, 894, 895, 957, 963, 965, 970, 972, 973, 975, 981, 983, 997, 1000, 1009, 1012, 1014, 1015, 1017, 1019], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 70, 71, 85, 100, 109, 110, 113, 115, 116, 117, 118, 121, 122, 123, 124, 125, 136, 139, 141, 143, 146, 148, 150, 151, 165, 167, 168, 169, 170, 171, 174, 182, 187, 193, 194, 198, 199, 200, 205, 206, 213, 214, 216, 223, 228, 233, 235, 245, 251, 252, 253, 256, 257, 258, 259, 260, 262, 263, 265, 266, 268, 269, 270, 274, 276, 286, 287, 294, 296, 302, 305, 306, 307, 322, 330, 338, 345, 354, 358, 359, 366, 367, 369, 375, 376, 377, 378, 383, 384, 385, 387, 388, 390, 392, 395, 398, 399, 402, 404, 405, 406, 407, 414, 416, 418, 421, 422, 423, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 474, 475, 479, 483, 484, 488, 490, 510, 517, 523, 525, 529, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 578, 580, 581, 582, 584, 585, 586, 588, 590, 591, 592, 594, 595, 596, 597, 613, 614, 616, 621, 622, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 685, 698, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 831, 834, 835, 841, 842, 844, 869, 870, 872, 873, 874, 875, 879, 880, 882, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 913, 915, 916, 962, 963, 966, 967, 970, 971, 975, 977, 981, 982, 983, 987, 988, 990, 991, 994, 997, 998, 1004, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "discuss": [4, 53, 58, 168, 187, 219, 224, 261, 343, 354, 360, 367, 369, 372, 377, 378, 380, 383, 385, 386, 397, 399, 403, 404, 407, 484, 668, 669, 826, 827, 832, 834, 835, 957, 961, 963, 964, 967, 970, 977, 984, 988, 1012], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 60, 62, 66, 78, 101, 102, 119, 130, 136, 137, 147, 168, 171, 191, 234, 236, 253, 263, 270, 348, 354, 358, 359, 360, 361, 374, 377, 380, 385, 397, 399, 401, 404, 405, 407, 408, 429, 430, 433, 435, 445, 509, 518, 524, 545, 546, 568, 588, 644, 645, 658, 660, 665, 673, 674, 675, 679, 711, 741, 782, 785, 786, 796, 851, 884, 885, 892, 893, 894, 895, 957, 958, 962, 963, 964, 965, 966, 970, 977, 980, 981, 982, 994, 996, 1000, 1001, 1011, 1012, 1016, 1018, 1020], "focu": [4, 9, 27, 95, 150, 249, 288, 358, 377, 395, 404, 539, 540, 545, 547, 548, 664, 964, 970, 977, 987, 988], "intuit": [4, 31, 44, 52, 62, 100, 113, 120, 142, 150, 168, 169, 199, 200, 221, 227, 259, 283, 302, 305, 327, 330, 344, 372, 385, 395, 397, 399, 401, 403, 767, 768, 769, 772, 855, 959, 963, 964, 967, 968, 974, 977, 978, 982, 991, 1000, 1002, 1009], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 53, 55, 72, 75, 80, 82, 86, 92, 95, 98, 100, 103, 109, 110, 112, 113, 115, 116, 117, 119, 120, 123, 147, 150, 156, 159, 162, 168, 169, 170, 174, 177, 182, 184, 187, 198, 200, 204, 214, 215, 216, 223, 227, 233, 234, 244, 255, 256, 258, 259, 260, 261, 264, 267, 276, 278, 284, 285, 297, 300, 304, 305, 306, 312, 314, 319, 343, 344, 345, 354, 358, 359, 360, 366, 367, 368, 371, 372, 374, 377, 378, 380, 385, 386, 391, 394, 395, 396, 397, 399, 400, 401, 402, 404, 405, 406, 407, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 438, 440, 443, 446, 449, 450, 453, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 479, 480, 482, 495, 500, 501, 509, 517, 520, 521, 522, 523, 524, 526, 527, 528, 530, 533, 534, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 559, 567, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 613, 614, 616, 620, 626, 628, 629, 630, 631, 632, 633, 638, 639, 641, 644, 645, 646, 647, 648, 649, 652, 653, 654, 657, 658, 660, 662, 663, 664, 665, 668, 673, 678, 680, 682, 690, 691, 698, 706, 707, 708, 709, 720, 721, 724, 749, 764, 765, 766, 768, 770, 778, 780, 781, 782, 785, 786, 792, 796, 801, 803, 805, 806, 807, 808, 809, 812, 814, 815, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 838, 841, 842, 847, 857, 858, 859, 861, 862, 864, 867, 873, 874, 878, 881, 884, 885, 886, 889, 890, 892, 893, 894, 895, 896, 910, 921, 923, 924, 930, 936, 938, 941, 956, 957, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 981, 982, 983, 987, 988, 993, 997, 1000, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "root": [4, 16, 80, 147, 179, 352, 369, 372, 380, 397, 428, 487, 527, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 625, 736, 892, 893, 894, 895, 896, 898, 973, 983, 1011, 1017, 1018, 1019, 1020, 1023, 1024], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 58, 60, 64, 68, 70, 75, 82, 109, 110, 115, 122, 124, 125, 130, 144, 151, 162, 165, 167, 168, 170, 182, 187, 193, 194, 198, 200, 202, 204, 216, 222, 228, 231, 232, 236, 239, 251, 252, 254, 255, 256, 258, 259, 261, 265, 267, 268, 274, 276, 278, 280, 288, 291, 297, 300, 305, 310, 311, 313, 314, 315, 318, 319, 321, 322, 343, 344, 354, 358, 361, 364, 367, 372, 374, 383, 384, 385, 387, 392, 395, 402, 403, 404, 407, 408, 414, 423, 427, 430, 431, 432, 436, 443, 455, 506, 521, 535, 536, 537, 539, 541, 543, 544, 545, 547, 548, 550, 551, 553, 555, 564, 588, 596, 606, 614, 620, 624, 625, 626, 627, 628, 629, 644, 645, 649, 652, 654, 660, 661, 662, 674, 676, 678, 680, 682, 782, 785, 786, 788, 796, 805, 806, 807, 809, 812, 813, 814, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 850, 856, 879, 880, 884, 886, 889, 892, 894, 957, 959, 962, 968, 973, 975, 987, 988, 997, 998, 1002, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "studi": [4, 60, 123, 198, 216, 261, 264, 265, 343, 367, 369, 401, 406, 682, 694, 743, 744, 809, 965, 967, 981, 993], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 56, 57, 60, 61, 62, 65, 66, 71, 72, 73, 74, 75, 81, 85, 86, 90, 91, 92, 97, 99, 100, 101, 102, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 168, 169, 170, 171, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 216, 219, 220, 221, 224, 228, 230, 231, 232, 233, 234, 236, 237, 239, 240, 243, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 348, 349, 350, 351, 352, 354, 364, 365, 366, 367, 370, 372, 374, 377, 379, 381, 384, 385, 391, 395, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 410, 414, 415, 416, 418, 419, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 473, 484, 486, 488, 491, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 512, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 571, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 686, 687, 688, 692, 697, 711, 720, 726, 727, 741, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 773, 774, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 904, 909, 910, 929, 930, 931, 938, 941, 954, 956, 957, 958, 959, 961, 962, 963, 965, 967, 968, 969, 970, 971, 972, 974, 977, 981, 982, 983, 988, 993, 997, 998, 1000, 1004, 1006, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "hist": [4, 25, 27, 53, 75, 112, 116, 198, 200, 231, 264, 283, 300, 304, 306, 314], "bin": [4, 24, 25, 27, 53, 75, 112, 116, 198, 231, 264, 283, 300, 301, 302, 303, 304, 306, 307, 370, 380, 388, 395, 403, 404, 424, 425, 434, 447, 547, 548, 847, 849, 863, 923, 1001, 1017, 1018, 1019, 1023], "30": [4, 8, 10, 14, 19, 34, 39, 40, 54, 60, 71, 73, 78, 101, 103, 119, 123, 129, 136, 150, 151, 154, 156, 169, 174, 177, 192, 196, 198, 213, 216, 219, 220, 224, 232, 235, 247, 258, 263, 272, 278, 287, 288, 304, 305, 306, 315, 318, 319, 323, 328, 331, 333, 336, 358, 367, 369, 377, 378, 401, 405, 408, 430, 436, 443, 486, 521, 524, 525, 527, 529, 556, 578, 581, 582, 584, 634, 678, 720, 768, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 865, 880, 893, 956, 961, 967, 968, 970, 975, 998, 1009, 1010, 1016, 1017, 1018], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 73, 95, 99, 109, 119, 123, 124, 156, 157, 158, 168, 174, 177, 198, 201, 202, 206, 213, 216, 230, 231, 233, 240, 253, 282, 283, 296, 301, 302, 303, 304, 310, 313, 315, 330, 336, 339, 345, 366, 369, 372, 375, 377, 381, 382, 383, 384, 385, 394, 395, 398, 401, 402, 403, 404, 405, 406, 407, 409, 415, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 431, 434, 435, 436, 440, 443, 444, 447, 450, 451, 453, 454, 455, 457, 458, 468, 469, 470, 475, 489, 495, 502, 503, 504, 506, 510, 514, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 597, 606, 608, 613, 614, 615, 616, 617, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 671, 672, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 707, 708, 709, 713, 730, 731, 733, 735, 736, 738, 739, 746, 752, 753, 756, 757, 759, 763, 764, 765, 766, 770, 780, 781, 782, 785, 786, 788, 796, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 901, 902, 903, 904, 905, 906, 910, 915, 920, 931, 940, 942, 948, 953, 954, 957, 959, 961, 963, 964, 965, 966, 967, 969, 970, 971, 972, 974, 975, 979, 980, 981, 982, 983, 987, 988, 991, 993, 997, 998, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "annot": [4, 9, 26, 132, 174, 220, 262, 265, 343, 372, 373, 374, 397, 702, 898, 967, 983, 1018], "log": [4, 20, 25, 26, 27, 78, 95, 123, 130, 143, 147, 151, 152, 154, 155, 156, 159, 183, 186, 187, 191, 198, 202, 203, 208, 216, 231, 233, 247, 288, 305, 343, 367, 369, 370, 372, 376, 380, 381, 385, 394, 395, 397, 398, 399, 402, 404, 405, 407, 434, 437, 446, 451, 456, 457, 458, 459, 460, 461, 462, 518, 522, 527, 535, 536, 537, 539, 541, 543, 545, 548, 550, 576, 577, 579, 580, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 628, 631, 634, 644, 645, 655, 657, 662, 666, 726, 736, 740, 780, 781, 782, 785, 786, 796, 819, 820, 821, 822, 823, 824, 825, 829, 840, 841, 848, 849, 878, 881, 886, 889, 891, 892, 894, 919, 956, 959, 961, 963, 964, 969, 970, 972, 975, 977, 981, 983, 987, 988, 1000, 1011, 1012, 1013, 1018, 1019, 1020, 1023], "describ": [4, 56, 130, 168, 216, 232, 258, 267, 354, 358, 359, 365, 367, 369, 371, 372, 374, 377, 380, 385, 386, 394, 397, 399, 400, 401, 402, 404, 405, 448, 455, 459, 460, 477, 479, 481, 482, 483, 486, 487, 488, 489, 490, 491, 496, 502, 503, 504, 514, 593, 594, 631, 645, 700, 780, 781, 819, 821, 859, 921, 956, 959, 962, 963, 966, 967, 969, 973, 981, 982, 983, 990, 993, 999, 1000, 1017, 1019], "weather": [4, 155, 169, 407, 963, 967], "includ": [4, 32, 55, 80, 116, 120, 122, 167, 168, 170, 182, 198, 216, 259, 278, 295, 300, 313, 314, 330, 335, 343, 345, 354, 358, 359, 366, 368, 370, 372, 373, 374, 376, 377, 378, 380, 381, 385, 386, 388, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 430, 432, 436, 442, 452, 455, 456, 457, 458, 459, 460, 461, 462, 475, 476, 477, 482, 486, 487, 488, 490, 491, 496, 520, 527, 543, 550, 560, 618, 624, 632, 633, 638, 646, 647, 648, 651, 667, 674, 675, 683, 699, 714, 715, 720, 722, 723, 756, 768, 769, 772, 778, 782, 784, 785, 786, 795, 796, 799, 802, 807, 810, 832, 834, 835, 836, 857, 858, 859, 863, 881, 892, 894, 896, 898, 904, 905, 908, 910, 913, 956, 963, 966, 967, 968, 970, 971, 977, 981, 982, 983, 987, 988, 990, 991, 1000, 1002, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "both": [4, 5, 7, 9, 10, 14, 16, 25, 26, 42, 54, 55, 64, 71, 78, 80, 85, 86, 100, 103, 109, 113, 116, 117, 120, 129, 130, 133, 142, 143, 147, 150, 157, 159, 167, 168, 169, 170, 177, 182, 184, 186, 187, 198, 199, 200, 203, 204, 206, 216, 223, 233, 234, 243, 244, 245, 246, 247, 248, 258, 259, 260, 261, 265, 267, 269, 273, 278, 290, 300, 304, 305, 310, 312, 320, 321, 327, 332, 338, 343, 344, 345, 352, 354, 358, 359, 360, 365, 366, 367, 368, 370, 372, 374, 378, 379, 381, 383, 384, 385, 386, 388, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 407, 410, 423, 432, 433, 438, 445, 448, 454, 461, 468, 469, 470, 471, 474, 475, 482, 483, 486, 488, 491, 493, 494, 495, 520, 524, 526, 533, 537, 541, 542, 543, 549, 550, 551, 552, 553, 563, 574, 575, 577, 583, 593, 594, 613, 618, 619, 629, 643, 644, 645, 658, 660, 662, 664, 673, 685, 690, 698, 702, 716, 721, 742, 746, 752, 759, 763, 768, 773, 774, 778, 785, 786, 788, 813, 841, 842, 856, 858, 860, 872, 877, 882, 884, 885, 892, 894, 908, 922, 930, 942, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 980, 981, 982, 983, 987, 988, 990, 991, 997, 1000, 1001, 1002, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "numer": [4, 19, 66, 71, 75, 116, 118, 120, 130, 147, 155, 158, 169, 170, 187, 198, 216, 238, 240, 288, 306, 313, 345, 366, 367, 369, 375, 377, 378, 383, 384, 385, 397, 399, 404, 405, 406, 407, 409, 410, 426, 429, 433, 445, 457, 458, 461, 464, 475, 476, 477, 482, 486, 487, 488, 490, 491, 496, 517, 519, 521, 526, 533, 553, 567, 576, 597, 603, 606, 613, 616, 618, 619, 632, 638, 640, 658, 673, 676, 680, 700, 773, 777, 782, 785, 786, 788, 796, 806, 807, 808, 811, 819, 820, 821, 822, 823, 841, 842, 847, 852, 857, 858, 865, 896, 897, 898, 904, 905, 920, 921, 956, 957, 963, 964, 968, 975, 977, 978, 983, 990, 991, 993, 1002, 1009, 1010, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "categor": [4, 71, 108, 115, 130, 134, 165, 168, 169, 170, 198, 216, 238, 240, 307, 313, 315, 360, 364, 366, 367, 374, 377, 385, 398, 405, 452, 453, 475, 476, 482, 491, 547, 548, 567, 568, 593, 594, 618, 619, 634, 644, 645, 655, 666, 695, 807, 819, 820, 821, 822, 823, 845, 847, 851, 852, 855, 857, 858, 865, 879, 880, 957, 963, 974, 975, 983, 987, 988, 989, 990, 991, 1002, 1004, 1009, 1010, 1013, 1014, 1017, 1019, 1021, 1024, 1025], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 37, 38, 49, 53, 58, 66, 67, 70, 71, 86, 89, 90, 91, 102, 116, 117, 118, 141, 143, 144, 146, 147, 148, 150, 155, 165, 168, 169, 171, 174, 176, 177, 178, 182, 199, 213, 215, 216, 217, 237, 245, 246, 248, 253, 255, 258, 259, 260, 263, 265, 267, 284, 285, 288, 307, 313, 333, 338, 343, 344, 345, 349, 352, 354, 358, 361, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 377, 378, 380, 383, 384, 385, 386, 391, 394, 401, 402, 404, 405, 406, 407, 432, 438, 448, 478, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 496, 501, 510, 514, 520, 521, 524, 525, 527, 529, 543, 547, 548, 550, 573, 575, 576, 578, 579, 580, 581, 582, 585, 586, 592, 593, 594, 595, 625, 626, 642, 644, 673, 677, 681, 683, 687, 690, 691, 701, 711, 715, 728, 740, 741, 742, 771, 773, 778, 780, 781, 782, 783, 784, 785, 786, 787, 789, 791, 796, 800, 807, 819, 823, 824, 825, 829, 833, 845, 856, 861, 864, 869, 870, 872, 873, 874, 875, 880, 883, 886, 889, 892, 894, 896, 898, 957, 959, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 977, 978, 981, 983, 988, 991, 999, 1000, 1001, 1002, 1009, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "alreadi": [4, 6, 10, 16, 55, 58, 100, 130, 147, 168, 228, 234, 239, 259, 265, 278, 313, 372, 373, 377, 383, 385, 395, 399, 401, 403, 404, 409, 423, 485, 509, 519, 553, 554, 620, 632, 635, 650, 651, 652, 653, 654, 660, 662, 663, 664, 671, 672, 753, 819, 839, 847, 853, 854, 856, 861, 867, 869, 870, 871, 873, 874, 875, 881, 884, 885, 907, 956, 973, 977, 978, 988, 993, 998, 1002, 1006, 1010, 1014, 1017, 1021, 1022, 1023, 1024], "expand": [4, 16, 49, 65, 229, 306, 311, 354, 364, 404, 430, 436, 485, 543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895, 967, 1010, 1017, 1018, 1025], "complementari": [4, 405], "column": [4, 20, 21, 60, 69, 72, 75, 76, 90, 117, 119, 120, 123, 127, 130, 147, 155, 162, 165, 167, 168, 169, 170, 187, 198, 199, 206, 216, 235, 237, 248, 258, 259, 269, 270, 296, 305, 307, 312, 313, 314, 315, 343, 344, 345, 358, 366, 367, 369, 372, 374, 378, 381, 383, 384, 385, 394, 397, 398, 400, 402, 404, 405, 406, 409, 412, 437, 439, 450, 452, 453, 457, 458, 464, 473, 474, 475, 476, 477, 478, 480, 482, 486, 487, 488, 490, 491, 494, 495, 496, 497, 499, 501, 512, 517, 520, 523, 528, 530, 534, 541, 543, 544, 550, 551, 552, 553, 567, 568, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 596, 613, 616, 618, 619, 620, 632, 634, 638, 644, 646, 648, 650, 651, 655, 666, 671, 672, 683, 699, 704, 705, 714, 715, 723, 739, 748, 753, 754, 755, 758, 768, 769, 772, 773, 782, 785, 786, 796, 805, 810, 815, 818, 819, 820, 821, 822, 823, 824, 825, 844, 848, 849, 850, 851, 857, 858, 859, 863, 864, 865, 866, 868, 884, 886, 889, 892, 894, 900, 904, 905, 910, 921, 930, 943, 944, 946, 954, 956, 957, 963, 965, 967, 968, 975, 977, 982, 988, 1009, 1011, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 219, 220, 221, 224, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 358, 365, 366, 367, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 391, 395, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 473, 479, 480, 481, 484, 486, 487, 488, 491, 492, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 571, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 692, 696, 697, 710, 720, 727, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 773, 775, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 908, 920, 921, 923, 928, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 956, 957, 958, 959, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 977, 979, 980, 981, 982, 983, 988, 993, 997, 998, 1000, 1001, 1002, 1006, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025], "drop": [4, 5, 71, 75, 86, 155, 167, 168, 169, 171, 198, 216, 240, 268, 306, 312, 315, 344, 376, 380, 398, 402, 404, 450, 453, 553, 554, 555, 556, 681, 686, 688, 767, 774, 843, 857, 863, 957, 963, 967, 975, 977, 987, 1009, 1010, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 34, 37, 39, 40, 47, 48, 50, 52, 53, 54, 55, 61, 71, 72, 75, 82, 86, 91, 92, 95, 96, 97, 98, 99, 105, 110, 112, 113, 117, 119, 126, 129, 133, 139, 143, 154, 155, 159, 162, 167, 168, 179, 183, 185, 187, 190, 191, 192, 198, 202, 203, 207, 210, 212, 213, 215, 216, 220, 221, 224, 227, 231, 232, 235, 236, 243, 245, 247, 248, 254, 255, 259, 260, 265, 267, 268, 273, 276, 278, 283, 284, 285, 288, 289, 290, 297, 300, 304, 307, 319, 321, 323, 326, 329, 330, 333, 334, 335, 336, 337, 338, 340, 343, 344, 349, 350, 351, 352, 374, 381, 385, 395, 397, 405, 409, 424, 431, 450, 453, 517, 519, 522, 523, 525, 527, 529, 536, 571, 598, 617, 618, 671, 672, 687, 748, 764, 765, 766, 767, 788, 812, 853, 854, 861, 862, 864, 867, 869, 870, 871, 873, 874, 875, 898, 900, 904, 905, 923, 942, 948, 957, 967, 974, 977, 982, 999, 1001, 1017, 1019, 1021], "holidai": [4, 169], "workingdai": [4, 169], "temp": [4, 169], "feel_temp": [4, 169], "humid": [4, 169, 974], "windspe": [4, 169], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 358, 359, 366, 367, 369, 370, 372, 373, 374, 376, 377, 378, 379, 381, 383, 384, 385, 388, 389, 390, 391, 393, 394, 395, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 418, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 744, 745, 746, 748, 749, 751, 752, 753, 754, 756, 758, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 904, 905, 910, 915, 916, 918, 920, 921, 923, 924, 925, 926, 928, 929, 930, 932, 933, 935, 936, 937, 938, 941, 942, 948, 956, 957, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 985, 988, 989, 993, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007], "spring": [4, 169], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 39, 42, 44, 46, 47, 54, 55, 64, 67, 70, 71, 72, 73, 79, 81, 92, 99, 101, 104, 105, 109, 116, 117, 120, 123, 124, 133, 136, 150, 155, 156, 157, 158, 168, 169, 170, 171, 177, 178, 182, 184, 198, 199, 203, 204, 206, 214, 216, 219, 222, 234, 236, 240, 243, 255, 256, 258, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 278, 282, 288, 291, 295, 296, 300, 301, 306, 307, 310, 312, 313, 314, 315, 320, 330, 332, 338, 339, 343, 344, 366, 372, 373, 374, 377, 385, 395, 397, 398, 399, 401, 402, 404, 405, 406, 407, 409, 410, 420, 421, 422, 423, 426, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 445, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 494, 495, 496, 498, 501, 509, 510, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 623, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 680, 681, 683, 684, 685, 686, 687, 688, 689, 694, 695, 697, 698, 699, 700, 701, 704, 711, 712, 713, 714, 715, 716, 723, 727, 728, 735, 736, 739, 741, 746, 748, 752, 753, 754, 759, 763, 767, 768, 769, 770, 772, 774, 777, 779, 780, 781, 782, 785, 786, 787, 788, 793, 796, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 881, 882, 884, 885, 886, 887, 888, 889, 890, 896, 897, 898, 902, 903, 904, 905, 915, 922, 928, 929, 932, 933, 937, 938, 941, 948, 953, 954, 956, 957, 963, 967, 970, 977, 981, 982, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "6": [4, 6, 8, 9, 10, 11, 12, 16, 19, 26, 31, 32, 40, 44, 46, 49, 50, 52, 56, 57, 60, 61, 62, 63, 64, 65, 67, 73, 74, 75, 78, 79, 80, 82, 90, 95, 97, 105, 111, 123, 124, 127, 129, 136, 142, 147, 150, 153, 155, 157, 158, 159, 162, 163, 168, 169, 174, 177, 178, 179, 182, 187, 191, 196, 198, 199, 200, 202, 212, 216, 219, 220, 223, 227, 230, 231, 234, 237, 238, 243, 244, 245, 246, 248, 249, 252, 253, 257, 258, 259, 260, 261, 263, 267, 268, 269, 270, 271, 273, 276, 280, 283, 291, 294, 296, 297, 300, 302, 304, 305, 307, 310, 313, 314, 315, 318, 319, 322, 323, 330, 331, 333, 335, 338, 340, 343, 344, 345, 351, 354, 366, 367, 369, 370, 377, 378, 384, 388, 389, 390, 395, 397, 398, 401, 402, 404, 405, 406, 432, 434, 435, 436, 437, 438, 439, 448, 468, 469, 470, 471, 491, 510, 516, 524, 526, 527, 533, 549, 555, 556, 579, 580, 597, 600, 601, 611, 613, 614, 616, 630, 631, 656, 675, 679, 707, 713, 723, 730, 731, 735, 736, 738, 754, 770, 773, 780, 781, 783, 784, 789, 791, 792, 794, 799, 800, 803, 808, 810, 819, 820, 821, 823, 824, 825, 832, 834, 835, 836, 851, 852, 854, 857, 859, 862, 863, 868, 899, 921, 924, 926, 930, 956, 957, 961, 963, 964, 967, 977, 978, 981, 982, 983, 985, 993, 997, 998, 1000, 1005, 1007, 1010, 1011, 1012, 1017, 1022], "clear": [4, 16, 55, 60, 72, 168, 169, 305, 367, 371, 372, 374, 383, 384, 385, 395, 398, 403, 898, 899, 956, 961, 1020, 1021, 1022], "9": [4, 7, 9, 12, 13, 24, 26, 27, 30, 31, 32, 33, 42, 44, 50, 55, 58, 62, 64, 74, 82, 85, 91, 109, 119, 120, 121, 122, 123, 128, 130, 136, 138, 139, 153, 157, 159, 163, 167, 168, 169, 179, 180, 189, 198, 211, 212, 215, 216, 219, 222, 231, 232, 236, 240, 243, 244, 245, 246, 252, 261, 265, 267, 276, 280, 282, 283, 286, 287, 288, 294, 295, 297, 300, 302, 303, 304, 306, 307, 315, 318, 319, 321, 322, 323, 330, 334, 340, 343, 344, 345, 354, 369, 370, 378, 384, 388, 389, 390, 395, 398, 399, 401, 404, 405, 425, 429, 436, 443, 468, 469, 470, 471, 476, 506, 513, 520, 524, 525, 526, 533, 546, 553, 556, 569, 577, 593, 594, 613, 616, 620, 625, 633, 644, 647, 678, 695, 708, 711, 726, 733, 754, 763, 764, 765, 780, 783, 785, 786, 800, 803, 808, 810, 813, 821, 822, 826, 827, 832, 835, 841, 842, 850, 856, 859, 921, 925, 956, 963, 967, 971, 977, 981, 982, 985, 993, 997, 1002, 1005, 1007, 1010, 1011, 1012, 1014, 1023, 1025], "84": [4, 6, 8, 70, 144, 189, 216, 297, 302, 318, 354, 369, 404, 405, 773, 796, 962, 967, 977, 998], "14": [4, 11, 35, 38, 49, 60, 62, 63, 66, 74, 81, 100, 142, 169, 182, 187, 189, 216, 221, 227, 232, 257, 263, 264, 272, 276, 278, 297, 303, 304, 312, 315, 316, 337, 340, 359, 367, 369, 370, 384, 388, 389, 390, 397, 401, 484, 496, 539, 540, 571, 572, 621, 629, 678, 796, 800, 850, 960, 963, 967, 977, 982, 985, 993, 1007, 1009, 1010, 1012, 1013, 1017, 1022], "395": [4, 62, 68], "81": [4, 50, 240, 318, 319, 397, 773, 782, 796, 967, 968, 970, 977], "0000": [4, 315], "02": [4, 12, 44, 50, 52, 58, 62, 64, 68, 76, 82, 85, 95, 98, 107, 112, 119, 134, 152, 157, 160, 167, 168, 172, 179, 216, 227, 231, 234, 241, 253, 259, 265, 274, 277, 283, 294, 297, 298, 300, 302, 308, 323, 326, 341, 344, 349, 353, 366, 369, 377, 401, 427, 431, 583, 644, 662, 782, 796, 863, 879, 893, 963], "13": [4, 6, 10, 11, 44, 74, 100, 105, 119, 121, 122, 124, 162, 168, 174, 184, 207, 213, 252, 259, 262, 264, 292, 297, 300, 304, 330, 343, 345, 346, 367, 369, 372, 378, 384, 401, 409, 496, 499, 518, 519, 537, 538, 568, 621, 625, 719, 800, 828, 843, 850, 876, 877, 963, 967, 968, 973, 974, 977, 982, 985, 993, 1007, 1009, 1011, 1012, 1015, 1016, 1017, 1018, 1021], "635": [4, 602], "80": [4, 6, 11, 16, 27, 67, 81, 101, 130, 139, 144, 169, 177, 234, 297, 302, 306, 318, 333, 334, 335, 343, 350, 354, 367, 369, 372, 395, 401, 406, 430, 496, 527, 699, 782, 796, 865, 878, 897, 956, 962, 963, 967, 974, 980, 983, 1002], "75": [4, 6, 7, 8, 10, 33, 44, 55, 82, 113, 144, 157, 158, 163, 168, 174, 177, 180, 189, 205, 216, 240, 245, 246, 258, 267, 271, 283, 300, 313, 340, 343, 354, 435, 537, 644, 692, 698, 719, 724, 730, 738, 741, 777, 782, 862, 874, 881, 897, 967, 969, 977, 983, 986, 998, 1011], "17374": 4, "19": [4, 9, 155, 168, 223, 224, 225, 248, 304, 305, 319, 369, 376, 385, 397, 398, 405, 408, 430, 478, 502, 503, 504, 522, 526, 527, 533, 535, 536, 543, 544, 545, 546, 550, 551, 552, 568, 575, 634, 644, 645, 652, 653, 654, 657, 658, 660, 662, 664, 673, 693, 766, 770, 782, 796, 807, 812, 813, 815, 816, 830, 831, 850, 861, 882, 886, 889, 892, 893, 894, 895, 956, 967, 977, 985, 1005, 1007, 1009, 1010, 1011, 1012, 1014, 1017], "misti": [4, 169], "10": [4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 17, 20, 25, 26, 27, 30, 31, 32, 34, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 82, 85, 86, 92, 95, 97, 98, 99, 100, 101, 105, 106, 107, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 127, 128, 131, 133, 134, 137, 139, 144, 147, 151, 152, 154, 156, 157, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 182, 188, 189, 191, 192, 196, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 214, 215, 216, 220, 221, 227, 230, 231, 232, 233, 235, 236, 237, 239, 246, 247, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 266, 269, 272, 274, 276, 283, 294, 295, 296, 297, 300, 301, 303, 304, 305, 310, 311, 312, 313, 314, 318, 319, 320, 322, 328, 330, 332, 333, 334, 335, 337, 338, 340, 343, 344, 345, 354, 358, 366, 367, 368, 369, 372, 374, 377, 378, 383, 384, 385, 388, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 410, 424, 429, 433, 435, 437, 438, 439, 445, 446, 448, 461, 478, 479, 486, 487, 488, 490, 496, 497, 498, 499, 502, 506, 507, 510, 514, 517, 521, 522, 523, 524, 525, 527, 528, 530, 532, 534, 538, 541, 542, 543, 544, 547, 548, 550, 551, 552, 553, 554, 556, 568, 569, 579, 580, 585, 586, 597, 603, 605, 613, 616, 618, 620, 621, 626, 628, 629, 630, 635, 645, 650, 651, 652, 653, 655, 656, 658, 659, 661, 662, 663, 664, 671, 672, 677, 678, 691, 701, 711, 727, 741, 754, 780, 781, 782, 783, 784, 785, 786, 793, 796, 797, 798, 799, 800, 802, 803, 808, 810, 812, 813, 819, 820, 821, 823, 824, 825, 831, 840, 841, 842, 850, 854, 857, 858, 861, 873, 881, 887, 890, 892, 893, 897, 921, 925, 931, 935, 937, 953, 956, 957, 963, 964, 965, 967, 968, 970, 971, 973, 974, 977, 981, 982, 985, 993, 997, 998, 1000, 1001, 1002, 1006, 1007, 1010, 1011, 1012, 1017, 1019, 1020, 1021, 1023, 1024], "66": [4, 92, 223, 306, 369, 397, 518, 618, 698, 768, 769, 778, 863, 967, 979], "880": 4, "60": [4, 6, 16, 42, 59, 73, 82, 198, 210, 216, 219, 220, 240, 246, 266, 271, 297, 319, 333, 343, 366, 397, 401, 436, 443, 699, 782, 967, 977, 998, 1009, 1012], "11": [4, 9, 19, 74, 81, 97, 140, 147, 153, 168, 169, 182, 198, 199, 200, 203, 221, 255, 263, 264, 270, 282, 284, 304, 312, 315, 329, 333, 366, 369, 370, 378, 384, 397, 400, 401, 404, 436, 443, 468, 469, 470, 471, 487, 503, 504, 598, 636, 642, 656, 701, 707, 708, 709, 763, 764, 765, 783, 786, 800, 803, 809, 836, 893, 931, 963, 965, 977, 981, 982, 985, 993, 1000, 1002, 1007, 1011, 1015, 1017, 1018, 1020, 1023, 1024], "0014": 4, "17375": 4, "20": [4, 7, 8, 14, 16, 19, 25, 26, 27, 33, 34, 39, 40, 43, 46, 47, 50, 54, 55, 61, 67, 78, 82, 92, 95, 101, 103, 105, 110, 112, 116, 119, 120, 123, 126, 130, 131, 133, 139, 142, 143, 144, 156, 160, 167, 169, 170, 174, 175, 180, 187, 188, 190, 194, 195, 197, 198, 199, 202, 207, 210, 211, 212, 213, 215, 222, 231, 236, 245, 247, 248, 258, 259, 261, 262, 264, 269, 270, 272, 278, 282, 283, 284, 285, 286, 289, 297, 304, 305, 306, 311, 312, 313, 314, 318, 319, 322, 327, 329, 333, 335, 340, 341, 344, 345, 350, 351, 365, 369, 372, 374, 376, 377, 378, 388, 397, 404, 405, 427, 432, 433, 435, 450, 451, 455, 457, 458, 464, 474, 475, 476, 477, 478, 480, 482, 483, 486, 488, 490, 491, 498, 501, 502, 509, 517, 522, 523, 528, 531, 532, 534, 538, 541, 542, 545, 546, 547, 548, 549, 555, 556, 568, 575, 578, 580, 583, 585, 615, 616, 631, 635, 644, 652, 653, 654, 662, 664, 682, 690, 694, 699, 702, 710, 711, 724, 741, 742, 752, 775, 776, 780, 781, 782, 796, 806, 807, 808, 811, 813, 816, 817, 818, 821, 822, 829, 830, 841, 842, 843, 844, 846, 848, 849, 857, 858, 859, 860, 865, 879, 880, 882, 883, 888, 896, 902, 904, 905, 956, 963, 967, 970, 973, 974, 977, 980, 985, 990, 991, 994, 1000, 1004, 1005, 1007, 1009, 1015, 1018, 1021, 1023, 1024], "17376": 4, "21": [4, 168, 187, 198, 199, 216, 217, 248, 278, 297, 302, 304, 322, 369, 370, 374, 376, 388, 394, 404, 405, 427, 431, 460, 518, 547, 548, 549, 555, 556, 574, 575, 577, 613, 655, 673, 739, 782, 784, 796, 807, 850, 857, 859, 865, 882, 898, 963, 968, 977, 985, 1005, 1007, 1009, 1010, 1012, 1016, 1017, 1019], "17377": 4, "22": [4, 42, 165, 168, 169, 172, 215, 224, 248, 297, 300, 304, 309, 316, 319, 345, 372, 376, 377, 388, 394, 423, 434, 458, 474, 475, 481, 482, 490, 501, 510, 517, 523, 528, 531, 532, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 580, 613, 614, 618, 620, 631, 633, 637, 639, 641, 644, 645, 647, 649, 651, 655, 674, 678, 688, 690, 699, 742, 754, 763, 768, 769, 773, 782, 783, 787, 796, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 828, 830, 832, 834, 835, 836, 841, 842, 843, 845, 848, 864, 884, 886, 887, 888, 889, 890, 892, 893, 894, 895, 915, 916, 967, 977, 985, 1005, 1007, 1009, 1012, 1017, 1020, 1022], "56": [4, 216, 231, 378, 699, 720, 967, 977, 1005, 1009], "8": [4, 5, 6, 7, 8, 9, 12, 13, 19, 25, 26, 27, 31, 32, 34, 37, 43, 44, 45, 48, 50, 53, 55, 60, 62, 64, 65, 70, 72, 74, 75, 81, 85, 90, 91, 92, 95, 96, 99, 100, 104, 106, 113, 115, 116, 120, 122, 123, 125, 128, 131, 132, 136, 146, 147, 151, 153, 155, 156, 158, 159, 163, 167, 168, 169, 171, 174, 177, 178, 183, 184, 189, 192, 198, 199, 205, 206, 208, 214, 216, 219, 220, 221, 223, 224, 228, 232, 233, 234, 236, 238, 239, 240, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 258, 259, 261, 262, 263, 265, 268, 269, 276, 280, 282, 286, 290, 294, 296, 297, 300, 302, 303, 304, 305, 306, 310, 315, 318, 319, 320, 322, 323, 327, 330, 334, 335, 337, 339, 343, 344, 345, 351, 354, 359, 366, 367, 369, 370, 372, 377, 378, 388, 389, 390, 395, 397, 401, 402, 404, 405, 406, 407, 425, 429, 430, 433, 435, 436, 438, 448, 455, 456, 457, 458, 459, 460, 461, 462, 469, 470, 471, 473, 476, 488, 489, 500, 517, 520, 524, 526, 529, 531, 533, 535, 536, 541, 542, 551, 556, 568, 574, 575, 576, 577, 614, 615, 634, 644, 656, 662, 675, 678, 679, 680, 681, 688, 692, 693, 695, 701, 707, 712, 713, 714, 726, 730, 731, 735, 736, 738, 767, 768, 770, 773, 774, 778, 780, 783, 784, 789, 792, 799, 800, 803, 810, 813, 822, 824, 825, 831, 841, 842, 843, 849, 856, 865, 886, 889, 919, 921, 925, 956, 957, 963, 964, 965, 967, 970, 975, 977, 981, 985, 991, 993, 997, 998, 999, 1000, 1001, 1005, 1006, 1007, 1010, 1011, 1012, 1016, 1017, 1022, 1023, 1025], "9981": 4, "17378": 4, "23": [4, 19, 26, 34, 50, 92, 98, 165, 224, 240, 248, 297, 304, 309, 312, 313, 316, 319, 344, 369, 370, 372, 378, 388, 389, 390, 404, 410, 418, 426, 433, 438, 440, 448, 451, 453, 454, 461, 468, 469, 470, 476, 478, 486, 487, 488, 490, 491, 496, 498, 500, 508, 510, 524, 525, 526, 529, 533, 540, 542, 544, 546, 547, 548, 551, 554, 555, 556, 593, 594, 597, 613, 616, 618, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 655, 656, 658, 659, 661, 664, 665, 666, 703, 715, 763, 810, 816, 817, 818, 827, 835, 842, 845, 857, 864, 872, 873, 882, 885, 887, 890, 893, 895, 902, 904, 905, 915, 916, 921, 967, 985, 1005, 1007, 1009, 1010, 1016, 1017, 1018, 1021], "65": [4, 8, 33, 169, 198, 267, 306, 397, 425, 488, 583, 726, 775, 776, 974, 998, 1009, 1010, 1011], "17379": [4, 1021], "row": [4, 19, 20, 21, 25, 27, 44, 60, 75, 90, 92, 116, 119, 128, 131, 162, 198, 199, 200, 228, 231, 236, 237, 302, 352, 358, 367, 374, 381, 384, 385, 394, 397, 400, 405, 412, 428, 429, 433, 435, 436, 437, 439, 442, 443, 445, 450, 454, 474, 476, 477, 478, 479, 480, 481, 486, 487, 488, 490, 491, 496, 497, 499, 520, 528, 534, 537, 576, 577, 606, 618, 629, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 678, 682, 683, 696, 704, 705, 710, 743, 744, 748, 751, 753, 754, 755, 756, 758, 759, 761, 763, 764, 765, 766, 780, 781, 813, 819, 820, 821, 822, 823, 829, 832, 833, 834, 835, 836, 839, 850, 854, 856, 859, 871, 874, 875, 878, 882, 900, 904, 905, 921, 938, 941, 945, 947, 949, 950, 954, 956, 957, 961, 963, 965, 967, 968, 970, 977, 978, 981, 982, 988, 1016, 1017, 1018, 1019, 1024], "onli": [4, 7, 11, 13, 14, 24, 25, 26, 27, 30, 33, 37, 39, 40, 45, 49, 53, 55, 58, 66, 70, 71, 72, 74, 75, 81, 90, 98, 99, 106, 110, 112, 117, 118, 119, 120, 122, 129, 130, 142, 143, 144, 147, 150, 152, 155, 157, 159, 163, 165, 167, 168, 169, 174, 176, 181, 182, 187, 194, 198, 199, 201, 204, 206, 207, 216, 217, 219, 220, 227, 229, 231, 233, 237, 240, 243, 244, 245, 248, 249, 254, 256, 258, 260, 261, 264, 265, 266, 267, 269, 270, 278, 281, 284, 286, 289, 291, 296, 300, 301, 305, 306, 312, 313, 318, 319, 321, 326, 327, 330, 335, 338, 339, 343, 344, 345, 348, 349, 352, 354, 358, 359, 360, 365, 366, 367, 369, 370, 372, 374, 376, 377, 378, 379, 380, 381, 383, 385, 386, 388, 391, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 413, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 475, 476, 477, 478, 480, 482, 483, 486, 487, 488, 489, 490, 491, 494, 495, 496, 498, 502, 505, 509, 510, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 693, 695, 699, 711, 714, 715, 719, 721, 722, 723, 726, 727, 728, 741, 743, 745, 759, 763, 764, 765, 766, 768, 769, 772, 773, 775, 776, 777, 780, 781, 782, 784, 785, 786, 788, 796, 800, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 902, 904, 905, 908, 910, 913, 921, 923, 926, 928, 933, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 977, 978, 979, 981, 982, 983, 987, 988, 991, 1000, 1001, 1002, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1024, 1025], "present": [4, 5, 43, 49, 92, 95, 103, 115, 116, 123, 126, 146, 156, 159, 177, 180, 182, 187, 198, 227, 230, 248, 256, 261, 264, 267, 268, 278, 300, 303, 305, 344, 369, 370, 374, 377, 383, 385, 397, 399, 402, 404, 405, 415, 416, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 475, 476, 477, 478, 482, 486, 487, 488, 489, 490, 491, 496, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 535, 536, 549, 552, 555, 556, 567, 568, 569, 574, 575, 577, 603, 613, 614, 615, 616, 636, 640, 663, 674, 675, 676, 677, 698, 714, 715, 723, 727, 754, 768, 769, 772, 780, 781, 782, 785, 786, 794, 796, 808, 826, 827, 828, 830, 832, 834, 835, 836, 843, 848, 856, 857, 858, 859, 860, 862, 876, 877, 888, 896, 898, 899, 921, 951, 966, 967, 968, 969, 974, 977, 986, 988, 1012, 1017, 1019, 1020, 1021, 1023, 1024], "date": [4, 70, 155, 169, 367, 369, 372, 376, 386, 398, 988], "datetim": [4, 17, 155, 169], "http": [4, 6, 7, 8, 12, 17, 24, 71, 124, 130, 147, 159, 163, 174, 198, 206, 214, 216, 224, 228, 236, 276, 278, 296, 366, 367, 369, 370, 372, 376, 377, 378, 380, 383, 385, 386, 388, 397, 401, 406, 428, 435, 438, 448, 473, 478, 482, 486, 488, 494, 495, 496, 516, 517, 520, 522, 523, 527, 581, 622, 627, 630, 635, 644, 650, 652, 653, 654, 657, 662, 665, 668, 669, 671, 672, 677, 678, 681, 691, 707, 708, 709, 743, 744, 754, 819, 821, 822, 823, 826, 827, 832, 833, 834, 835, 840, 862, 877, 878, 879, 892, 893, 963, 965, 967, 970, 980, 983, 990, 991, 998, 1014, 1019], "pydata": [4, 986, 991], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 61, 66, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 159, 168, 169, 170, 174, 179, 189, 190, 198, 206, 214, 216, 220, 228, 229, 230, 232, 237, 238, 239, 240, 248, 256, 258, 259, 261, 265, 270, 276, 296, 297, 306, 311, 312, 314, 315, 318, 319, 320, 323, 343, 344, 345, 352, 359, 365, 370, 372, 375, 378, 380, 386, 388, 401, 581, 622, 654, 657, 662, 681, 691, 754, 826, 827, 832, 833, 834, 835, 862, 878, 892, 893, 963, 967, 983, 985, 1004, 1017, 1021], "stabl": [4, 159, 168, 192, 196, 200, 278, 311, 344, 370, 372, 376, 378, 381, 385, 388, 401, 405, 409, 457, 458, 464, 519, 641, 658, 660, 673, 678, 709, 737, 920, 921, 963, 969, 970, 977, 988, 1005, 1009, 1010, 1015, 1020, 1022], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 147, 155, 159, 168, 169, 170, 174, 179, 228, 230, 237, 238, 239, 240, 248, 256, 258, 259, 265, 270, 297, 306, 311, 312, 314, 315, 320, 352, 367, 369, 372, 373, 376, 380, 386, 398, 401, 405, 473, 494, 495, 644, 819, 823, 917, 965, 987, 988, 1020, 1021, 1022, 1023, 1024], "compon": [4, 5, 17, 44, 58, 62, 70, 73, 84, 85, 87, 94, 96, 97, 99, 100, 102, 103, 104, 106, 107, 128, 155, 165, 167, 182, 219, 231, 232, 234, 243, 244, 247, 248, 249, 257, 259, 279, 292, 297, 305, 312, 358, 364, 367, 372, 374, 378, 381, 383, 396, 397, 398, 400, 405, 407, 409, 411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 448, 449, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 488, 490, 501, 507, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 559, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 681, 714, 715, 723, 768, 769, 772, 780, 781, 782, 785, 786, 796, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 920, 921, 959, 964, 977, 979, 982, 987, 988, 989, 991, 996, 1002, 1003, 1004, 1009, 1011, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "now": [4, 5, 7, 17, 53, 57, 71, 86, 100, 109, 111, 115, 117, 119, 120, 123, 124, 130, 133, 147, 150, 155, 156, 157, 163, 167, 168, 169, 170, 174, 177, 179, 184, 186, 187, 199, 200, 223, 232, 254, 258, 261, 269, 270, 305, 311, 312, 314, 315, 320, 330, 338, 343, 344, 345, 354, 358, 360, 367, 372, 373, 374, 378, 383, 384, 385, 394, 397, 401, 402, 404, 405, 409, 479, 494, 495, 498, 522, 535, 565, 566, 568, 613, 616, 635, 639, 644, 649, 670, 711, 741, 780, 781, 785, 786, 816, 831, 942, 956, 957, 963, 967, 973, 976, 977, 982, 983, 986, 988, 993, 1000, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "introspect": [4, 6, 71, 378, 545, 546, 574, 575, 577, 977, 998], "value_count": [4, 169], "11413": 4, "4544": 4, "rain": [4, 169, 963], "1419": 4, "heavy_rain": [4, 169], "name": [4, 6, 7, 10, 11, 12, 17, 19, 25, 27, 30, 31, 34, 37, 44, 45, 58, 62, 71, 73, 75, 82, 96, 102, 113, 114, 115, 116, 120, 121, 123, 130, 168, 169, 170, 187, 196, 198, 200, 204, 205, 213, 215, 216, 219, 220, 227, 233, 235, 236, 240, 245, 253, 255, 256, 259, 261, 262, 265, 267, 268, 278, 286, 287, 294, 295, 302, 304, 306, 314, 315, 322, 335, 343, 344, 345, 359, 360, 366, 367, 370, 372, 374, 376, 377, 379, 380, 385, 388, 391, 394, 397, 398, 401, 404, 405, 407, 411, 413, 417, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 474, 475, 476, 477, 478, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 496, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 562, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 677, 678, 683, 684, 685, 686, 688, 694, 695, 699, 717, 718, 764, 765, 780, 781, 782, 785, 786, 788, 794, 796, 807, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 903, 904, 905, 908, 912, 913, 914, 916, 930, 937, 951, 955, 956, 961, 963, 967, 968, 974, 975, 977, 983, 988, 997, 998, 1000, 1002, 1009, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 65, 70, 71, 122, 124, 125, 126, 151, 152, 153, 163, 168, 169, 200, 216, 236, 240, 243, 256, 262, 266, 285, 291, 306, 313, 314, 319, 352, 366, 367, 372, 374, 383, 385, 393, 398, 401, 412, 415, 428, 429, 433, 434, 435, 436, 437, 439, 450, 452, 453, 455, 458, 460, 474, 475, 476, 477, 482, 483, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 500, 508, 528, 543, 544, 545, 546, 549, 550, 551, 552, 567, 568, 571, 572, 574, 575, 577, 579, 580, 588, 592, 613, 614, 615, 616, 618, 619, 626, 627, 630, 631, 632, 638, 642, 643, 646, 647, 648, 649, 650, 651, 657, 659, 661, 683, 691, 700, 701, 716, 723, 726, 740, 771, 788, 805, 807, 808, 820, 824, 825, 827, 835, 849, 855, 857, 858, 864, 865, 878, 886, 887, 888, 889, 890, 892, 893, 894, 895, 901, 902, 904, 905, 932, 942, 943, 944, 945, 948, 954, 957, 977, 980, 982, 993, 1010, 1012, 1013, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "int64": [4, 13, 54, 71, 168, 169, 306, 352, 385, 405, 415, 428, 434, 436, 574, 626, 700, 701, 820, 1017, 1020, 1022, 1024, 1025], "cannot": [4, 40, 56, 75, 82, 95, 100, 118, 168, 169, 182, 198, 216, 300, 330, 360, 371, 373, 378, 385, 386, 397, 398, 399, 401, 402, 404, 405, 407, 451, 507, 524, 525, 526, 529, 533, 596, 599, 600, 601, 603, 605, 606, 608, 609, 611, 637, 641, 668, 678, 697, 703, 763, 785, 786, 831, 832, 834, 835, 836, 844, 845, 854, 855, 866, 902, 904, 905, 956, 957, 961, 963, 964, 968, 973, 977, 982, 983, 988, 991, 997, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 56, 58, 64, 70, 71, 75, 85, 86, 90, 95, 98, 100, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 127, 130, 131, 132, 136, 144, 150, 151, 152, 155, 156, 157, 158, 159, 165, 167, 168, 169, 170, 171, 174, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 198, 199, 200, 202, 205, 206, 207, 210, 212, 213, 216, 227, 230, 232, 235, 236, 245, 247, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 272, 273, 274, 276, 278, 281, 284, 285, 286, 287, 289, 291, 294, 295, 296, 300, 302, 304, 305, 310, 313, 317, 318, 319, 322, 323, 324, 326, 329, 337, 338, 345, 347, 350, 351, 353, 354, 358, 359, 360, 364, 369, 374, 377, 383, 384, 385, 391, 393, 395, 397, 398, 399, 400, 402, 404, 405, 406, 407, 409, 423, 426, 427, 429, 430, 433, 435, 437, 438, 439, 440, 445, 451, 455, 456, 458, 459, 460, 461, 462, 468, 469, 470, 471, 473, 474, 475, 479, 483, 484, 486, 490, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 613, 614, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 673, 674, 675, 677, 678, 682, 689, 726, 773, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 844, 849, 850, 853, 854, 857, 858, 862, 863, 864, 865, 869, 870, 872, 873, 874, 875, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 941, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 977, 981, 982, 983, 987, 988, 989, 991, 994, 997, 998, 1004, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 25, 26, 27, 31, 32, 34, 36, 37, 49, 56, 67, 68, 70, 75, 81, 82, 94, 100, 105, 107, 109, 113, 114, 115, 116, 118, 119, 125, 127, 128, 129, 130, 136, 137, 138, 139, 144, 147, 150, 153, 155, 159, 162, 163, 166, 170, 172, 173, 175, 184, 186, 187, 212, 216, 223, 225, 226, 227, 232, 234, 239, 251, 255, 257, 258, 261, 263, 264, 266, 272, 274, 278, 282, 283, 284, 285, 286, 291, 293, 296, 297, 298, 300, 301, 305, 307, 309, 316, 317, 321, 323, 324, 329, 336, 338, 343, 344, 345, 348, 349, 350, 351, 354, 359, 361, 364, 365, 366, 367, 369, 371, 375, 378, 379, 380, 381, 384, 385, 387, 391, 392, 393, 394, 395, 397, 398, 399, 401, 403, 405, 406, 407, 411, 412, 414, 415, 416, 418, 419, 423, 424, 425, 428, 429, 432, 433, 435, 436, 443, 445, 450, 451, 453, 454, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 494, 495, 496, 498, 500, 501, 502, 503, 504, 506, 508, 510, 511, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 557, 562, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 585, 588, 589, 596, 597, 600, 605, 608, 612, 614, 616, 618, 620, 624, 626, 627, 629, 630, 631, 632, 634, 638, 643, 644, 654, 655, 662, 663, 664, 666, 674, 675, 676, 677, 678, 682, 686, 687, 688, 694, 699, 703, 704, 707, 708, 709, 711, 720, 726, 728, 733, 741, 763, 764, 765, 770, 773, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 826, 828, 833, 840, 841, 842, 843, 845, 847, 849, 851, 854, 856, 857, 858, 859, 862, 863, 864, 868, 876, 877, 879, 880, 881, 882, 884, 885, 886, 889, 892, 893, 894, 895, 907, 915, 916, 933, 934, 956, 957, 959, 960, 961, 963, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 978, 981, 982, 983, 984, 986, 990, 995, 997, 998, 1004, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "simplifi": [4, 71, 186, 330, 371, 373, 377, 397, 400, 501, 548, 843, 844, 967, 969, 977], "represent": [4, 12, 17, 20, 26, 53, 71, 72, 95, 98, 109, 115, 117, 118, 126, 127, 128, 130, 133, 144, 155, 168, 170, 174, 179, 182, 219, 220, 221, 228, 230, 237, 238, 239, 240, 248, 256, 258, 259, 265, 270, 288, 297, 306, 312, 314, 315, 320, 344, 345, 352, 354, 364, 366, 374, 385, 391, 397, 398, 402, 403, 404, 449, 517, 521, 523, 526, 528, 534, 552, 574, 576, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 616, 629, 632, 638, 644, 645, 646, 648, 652, 654, 662, 663, 664, 754, 780, 781, 788, 840, 853, 857, 858, 862, 864, 877, 884, 896, 898, 901, 917, 933, 959, 964, 966, 968, 970, 971, 972, 974, 977, 982, 988, 993, 994, 996, 1000, 1002, 1009, 1010, 1013, 1020, 1021, 1022, 1023, 1024, 1025], "collaps": [4, 169, 300, 330, 383], "those": [4, 7, 12, 17, 19, 55, 60, 71, 111, 123, 147, 159, 167, 169, 170, 171, 198, 200, 216, 224, 231, 235, 236, 249, 252, 258, 261, 264, 295, 300, 305, 327, 330, 343, 344, 345, 358, 359, 366, 372, 374, 376, 377, 378, 379, 383, 385, 386, 388, 394, 395, 397, 401, 402, 404, 405, 407, 434, 436, 447, 450, 454, 480, 481, 482, 489, 543, 544, 550, 551, 555, 556, 567, 678, 683, 698, 704, 721, 782, 785, 786, 794, 796, 803, 826, 827, 828, 830, 832, 833, 834, 835, 836, 886, 889, 892, 893, 894, 895, 956, 959, 963, 966, 967, 969, 970, 971, 974, 977, 983, 986, 987, 991, 993, 1002, 1009, 1012, 1015, 1016, 1017, 1022, 1023, 1024, 1025], "replac": [4, 25, 80, 99, 150, 157, 162, 169, 184, 199, 236, 261, 278, 302, 307, 312, 332, 370, 372, 374, 376, 378, 381, 385, 391, 398, 401, 404, 405, 427, 431, 489, 501, 541, 542, 549, 568, 574, 575, 576, 577, 593, 594, 613, 616, 620, 625, 627, 713, 770, 794, 796, 843, 844, 847, 867, 880, 887, 936, 938, 941, 956, 957, 963, 967, 977, 982, 983, 987, 988, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1024], "to_replac": [4, 169], "valu": [4, 5, 7, 9, 11, 12, 13, 16, 17, 19, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 55, 60, 61, 62, 66, 71, 73, 75, 78, 80, 82, 95, 98, 106, 112, 114, 115, 116, 117, 118, 120, 123, 124, 126, 127, 129, 130, 142, 143, 146, 147, 150, 153, 154, 156, 158, 159, 164, 167, 168, 169, 170, 171, 174, 177, 178, 180, 182, 184, 186, 187, 188, 189, 191, 196, 198, 199, 200, 202, 204, 213, 216, 218, 222, 225, 227, 228, 229, 230, 231, 232, 233, 236, 239, 240, 243, 249, 252, 254, 256, 258, 259, 261, 263, 264, 265, 267, 269, 270, 271, 273, 278, 291, 294, 295, 297, 300, 301, 302, 303, 304, 305, 306, 307, 312, 321, 330, 335, 338, 343, 344, 345, 348, 352, 354, 358, 359, 360, 361, 364, 365, 366, 367, 369, 373, 374, 375, 377, 378, 379, 381, 383, 384, 385, 387, 388, 394, 395, 396, 397, 398, 399, 400, 401, 405, 406, 407, 408, 409, 410, 411, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 473, 476, 477, 479, 482, 483, 484, 487, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 754, 756, 759, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 794, 796, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 905, 908, 909, 910, 911, 913, 921, 923, 928, 929, 930, 931, 935, 943, 944, 945, 956, 959, 960, 961, 962, 963, 964, 966, 968, 969, 970, 971, 972, 973, 974, 978, 980, 981, 982, 989, 991, 993, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "inplac": [4, 169, 216, 270, 440, 468, 469, 470, 471, 839, 847, 850, 853, 854, 856, 860, 861, 862, 864, 867, 869, 870, 871, 872, 873, 874, 875, 940, 943, 944, 945, 949, 950, 1018], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 53, 86, 92, 100, 113, 115, 117, 120, 123, 144, 150, 156, 165, 166, 170, 172, 184, 189, 198, 199, 200, 206, 216, 231, 237, 244, 245, 248, 249, 265, 278, 305, 343, 344, 354, 358, 359, 372, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 393, 395, 397, 398, 399, 401, 404, 405, 406, 418, 450, 451, 453, 454, 455, 468, 469, 470, 482, 509, 518, 522, 524, 527, 538, 540, 541, 542, 544, 546, 548, 549, 551, 553, 554, 556, 558, 571, 572, 574, 575, 577, 581, 583, 592, 597, 613, 618, 619, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 660, 661, 664, 665, 681, 690, 691, 702, 720, 773, 777, 817, 818, 819, 820, 821, 822, 823, 827, 830, 835, 842, 845, 850, 857, 858, 861, 864, 865, 874, 875, 882, 884, 885, 886, 887, 888, 889, 890, 893, 895, 930, 956, 963, 967, 969, 973, 977, 981, 982, 983, 990, 998, 1001, 1002, 1004, 1009, 1010, 1011, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "balanc": [4, 6, 53, 66, 165, 203, 251, 261, 274, 300, 360, 383, 385, 395, 401, 402, 404, 488, 501, 520, 526, 527, 533, 543, 547, 550, 626, 644, 645, 652, 654, 660, 661, 662, 689, 694, 714, 728, 767, 772, 782, 783, 800, 844, 884, 886, 889, 892, 894, 909, 910, 956, 982, 983, 998, 1009, 1011, 1014, 1015, 1018, 1019, 1023], "fall": [4, 123, 157, 257, 258, 372, 374, 396, 397, 405, 420, 432, 433, 494, 495, 712, 713, 777, 861, 873, 966, 967, 977, 993, 1001, 1018], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 24, 47, 55, 64, 65, 72, 78, 89, 105, 118, 119, 120, 124, 139, 155, 167, 168, 171, 174, 187, 191, 194, 198, 199, 204, 212, 216, 221, 231, 240, 245, 253, 256, 258, 265, 276, 297, 300, 305, 306, 307, 312, 313, 338, 343, 345, 354, 358, 359, 367, 372, 374, 377, 378, 381, 385, 388, 391, 397, 398, 399, 401, 402, 403, 404, 405, 407, 409, 426, 429, 432, 433, 435, 436, 441, 442, 443, 445, 450, 474, 475, 476, 481, 483, 501, 520, 521, 525, 526, 527, 529, 533, 537, 539, 541, 542, 543, 545, 549, 550, 553, 567, 574, 577, 579, 580, 583, 592, 593, 594, 596, 608, 613, 617, 626, 644, 645, 651, 662, 671, 672, 674, 675, 679, 683, 685, 686, 688, 690, 698, 699, 704, 711, 714, 715, 723, 725, 726, 739, 741, 763, 767, 768, 769, 772, 773, 774, 777, 782, 783, 785, 786, 787, 789, 793, 796, 800, 801, 805, 812, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 834, 841, 844, 855, 857, 858, 859, 863, 864, 865, 868, 869, 870, 872, 873, 874, 875, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 904, 905, 910, 921, 931, 936, 957, 963, 964, 967, 968, 970, 971, 977, 980, 981, 982, 983, 988, 997, 999, 1000, 1002, 1009, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "sensit": [4, 44, 55, 80, 81, 113, 123, 169, 200, 201, 227, 300, 330, 359, 360, 386, 399, 404, 438, 448, 678, 698, 699, 773, 962, 963, 964, 966, 967, 971, 973, 981, 982, 993, 1001, 1013], "splitter": [4, 385, 401, 423, 458, 553, 554, 580, 588, 633, 637, 639, 641, 647, 649, 651, 659, 661, 782, 784, 785, 786, 787, 788, 796, 797, 798, 799, 801, 802, 804, 805, 806, 807, 808, 809, 811, 815, 818, 892, 893, 894, 895, 983, 988, 1015, 1016, 1017, 1018, 1025], "evalu": [4, 5, 6, 10, 11, 24, 32, 36, 49, 55, 68, 71, 72, 98, 109, 117, 118, 120, 121, 123, 143, 153, 165, 171, 174, 178, 187, 200, 205, 216, 226, 241, 251, 252, 255, 256, 258, 261, 263, 264, 265, 267, 269, 270, 272, 274, 276, 287, 291, 305, 307, 312, 330, 343, 354, 361, 365, 367, 374, 378, 385, 387, 396, 398, 405, 406, 407, 433, 435, 474, 477, 478, 479, 482, 495, 506, 522, 537, 547, 548, 549, 553, 554, 577, 580, 588, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 617, 618, 619, 620, 633, 639, 645, 659, 661, 683, 685, 687, 688, 689, 690, 691, 697, 699, 700, 701, 703, 704, 711, 712, 721, 722, 727, 739, 740, 741, 742, 771, 778, 780, 781, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 815, 821, 824, 825, 830, 842, 844, 851, 869, 870, 872, 873, 874, 875, 886, 889, 892, 907, 915, 941, 959, 963, 965, 969, 970, 973, 974, 975, 978, 981, 983, 987, 991, 993, 994, 997, 998, 1000, 1003, 1004, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022], "forecast": [4, 258, 395, 967, 987], "realist": [4, 8, 260, 267, 268, 327, 967], "gap": [4, 343, 367, 401, 457, 458, 464, 574, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 803, 892, 893, 894, 895, 963, 964, 1017, 1021, 1023], "between": [4, 5, 8, 9, 11, 12, 37, 38, 39, 40, 42, 43, 53, 60, 61, 66, 85, 98, 100, 104, 109, 113, 116, 120, 123, 142, 150, 155, 156, 158, 165, 167, 168, 169, 170, 177, 182, 184, 189, 193, 194, 198, 199, 200, 202, 203, 206, 216, 219, 227, 232, 236, 251, 254, 257, 258, 259, 260, 261, 263, 264, 265, 267, 274, 280, 284, 285, 287, 288, 300, 305, 307, 313, 321, 330, 338, 343, 344, 345, 352, 354, 358, 359, 367, 372, 374, 381, 383, 384, 385, 386, 391, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 417, 426, 427, 430, 431, 432, 436, 438, 439, 440, 442, 443, 444, 449, 455, 456, 457, 458, 459, 460, 461, 462, 477, 479, 480, 481, 482, 483, 484, 488, 500, 501, 507, 510, 513, 520, 522, 523, 524, 525, 526, 527, 532, 533, 535, 539, 540, 545, 546, 548, 549, 550, 551, 570, 574, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 588, 590, 591, 592, 593, 594, 595, 606, 613, 618, 619, 620, 625, 628, 631, 632, 633, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 656, 662, 664, 665, 667, 670, 674, 676, 678, 680, 681, 682, 685, 687, 689, 690, 691, 693, 695, 696, 700, 701, 702, 703, 705, 709, 710, 711, 714, 715, 716, 719, 721, 722, 728, 737, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 775, 776, 778, 779, 780, 781, 782, 784, 785, 791, 799, 800, 802, 809, 810, 812, 814, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 848, 851, 852, 854, 855, 857, 858, 861, 862, 863, 865, 870, 873, 874, 878, 889, 892, 893, 894, 895, 897, 918, 936, 956, 959, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 981, 982, 983, 984, 988, 1000, 1001, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "side": [4, 16, 27, 59, 123, 191, 216, 221, 230, 300, 343, 354, 367, 383, 395, 398, 401, 402, 405, 501, 963, 964, 967, 969, 982, 1018], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 70, 100, 109, 115, 116, 117, 119, 122, 123, 124, 125, 126, 136, 143, 167, 168, 182, 193, 194, 198, 201, 206, 216, 228, 244, 245, 252, 253, 256, 258, 263, 265, 268, 287, 294, 296, 301, 302, 307, 314, 321, 330, 343, 345, 352, 367, 379, 384, 385, 388, 395, 397, 402, 404, 405, 423, 428, 429, 458, 459, 465, 466, 483, 517, 523, 525, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 574, 575, 577, 580, 588, 633, 637, 639, 641, 647, 649, 651, 659, 661, 681, 690, 691, 703, 716, 722, 742, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 818, 824, 825, 841, 842, 865, 869, 870, 872, 873, 874, 875, 892, 893, 894, 895, 938, 956, 963, 964, 970, 973, 974, 975, 977, 981, 983, 988, 993, 997, 998, 1000, 1001, 1002, 1004, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "limit": [4, 8, 17, 37, 42, 57, 66, 82, 117, 118, 124, 130, 162, 168, 169, 170, 177, 198, 199, 215, 231, 265, 302, 306, 313, 345, 354, 359, 373, 374, 377, 383, 385, 386, 395, 397, 400, 402, 406, 432, 449, 454, 545, 546, 547, 548, 618, 636, 644, 645, 665, 668, 669, 674, 763, 803, 832, 834, 835, 836, 857, 858, 882, 886, 887, 888, 889, 890, 935, 956, 963, 964, 966, 967, 974, 975, 977, 988, 993, 1004, 1017, 1019, 1022, 1023], "cv": [4, 12, 24, 25, 26, 54, 71, 72, 73, 74, 78, 103, 116, 120, 122, 136, 137, 146, 162, 163, 168, 187, 197, 200, 254, 256, 257, 258, 259, 260, 261, 263, 264, 268, 272, 306, 307, 315, 330, 338, 384, 385, 395, 401, 404, 423, 458, 553, 554, 580, 588, 633, 637, 639, 641, 645, 647, 649, 651, 659, 661, 782, 784, 785, 786, 787, 788, 796, 797, 798, 799, 801, 802, 804, 805, 806, 807, 808, 809, 811, 815, 818, 865, 892, 893, 956, 959, 962, 963, 967, 977, 988, 997, 998, 1002, 1011, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1025], "fold": [4, 67, 74, 78, 116, 119, 122, 136, 146, 168, 187, 245, 253, 254, 256, 258, 259, 261, 268, 321, 338, 354, 367, 375, 376, 384, 385, 397, 406, 423, 458, 479, 522, 553, 554, 580, 588, 633, 637, 639, 641, 645, 647, 649, 651, 659, 661, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 815, 818, 865, 886, 889, 956, 963, 967, 977, 982, 997, 1009, 1011, 1013, 1014, 1015, 1017, 1018, 1020, 1021], "1000": [4, 7, 8, 14, 26, 31, 37, 50, 72, 75, 85, 105, 113, 115, 117, 122, 123, 127, 132, 138, 142, 156, 174, 184, 190, 201, 221, 230, 231, 233, 243, 247, 256, 258, 264, 267, 269, 283, 285, 301, 304, 311, 312, 314, 331, 332, 339, 343, 344, 377, 378, 384, 395, 405, 423, 459, 465, 466, 517, 518, 523, 528, 529, 531, 532, 534, 539, 550, 618, 632, 633, 637, 638, 639, 641, 646, 647, 648, 649, 652, 653, 654, 658, 662, 663, 664, 673, 678, 684, 687, 749, 861, 873, 879, 884, 885, 956, 960, 982, 997, 1000, 1016, 1018], "datapoint": [4, 42, 52, 56, 154, 157, 181, 232, 233, 253, 258, 276, 336, 407, 432, 488, 543, 544, 545, 546, 550, 551, 552, 597, 892, 893, 894, 895, 960], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 53, 113, 116, 120, 123, 147, 162, 168, 174, 177, 178, 182, 198, 200, 216, 227, 232, 233, 258, 261, 264, 265, 267, 278, 301, 302, 307, 320, 330, 338, 344, 354, 358, 359, 360, 367, 370, 371, 372, 374, 376, 377, 379, 380, 381, 384, 385, 388, 391, 395, 397, 399, 401, 402, 404, 405, 406, 407, 408, 409, 411, 426, 428, 429, 430, 431, 433, 435, 436, 438, 440, 443, 444, 445, 448, 449, 450, 453, 460, 468, 469, 470, 471, 473, 482, 489, 494, 495, 502, 507, 509, 510, 513, 518, 519, 522, 535, 543, 544, 547, 548, 549, 550, 551, 553, 567, 568, 571, 572, 574, 575, 577, 579, 580, 583, 588, 593, 594, 606, 613, 614, 615, 617, 618, 619, 621, 624, 625, 626, 629, 631, 632, 633, 634, 635, 638, 639, 640, 642, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 670, 673, 675, 676, 677, 678, 679, 680, 681, 682, 687, 695, 712, 713, 751, 756, 759, 763, 764, 765, 766, 767, 770, 773, 774, 775, 784, 790, 792, 799, 800, 801, 802, 806, 810, 812, 813, 824, 825, 826, 827, 828, 829, 830, 832, 834, 841, 842, 847, 848, 851, 852, 853, 855, 856, 857, 858, 865, 867, 871, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 904, 908, 910, 913, 921, 928, 933, 936, 938, 941, 942, 943, 944, 945, 946, 947, 948, 956, 957, 961, 962, 963, 964, 967, 968, 970, 972, 973, 974, 977, 980, 981, 982, 983, 988, 990, 991, 998, 1002, 1006, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "enough": [4, 37, 44, 62, 116, 119, 150, 162, 169, 170, 187, 198, 232, 234, 304, 343, 345, 354, 370, 372, 376, 386, 395, 396, 397, 399, 401, 404, 553, 554, 575, 782, 785, 786, 788, 796, 808, 921, 956, 961, 964, 966, 973, 977, 982, 987, 991, 1015, 1025], "quantifi": [4, 37, 49, 78, 155, 216, 265, 374, 385, 392, 396, 559, 847, 962, 975, 977, 1004], "repres": [4, 8, 10, 12, 14, 26, 32, 44, 48, 49, 50, 53, 91, 95, 97, 104, 105, 117, 118, 126, 168, 177, 185, 190, 200, 202, 203, 207, 221, 223, 232, 236, 246, 252, 255, 258, 261, 265, 283, 302, 343, 345, 352, 360, 364, 367, 369, 374, 383, 384, 385, 386, 391, 395, 397, 401, 402, 403, 404, 405, 406, 424, 428, 432, 438, 449, 456, 457, 458, 459, 460, 461, 462, 474, 476, 477, 478, 480, 482, 484, 486, 487, 488, 490, 491, 496, 520, 522, 524, 526, 527, 533, 541, 549, 567, 574, 577, 615, 618, 620, 626, 662, 664, 683, 687, 715, 728, 774, 782, 784, 795, 796, 799, 802, 807, 809, 810, 813, 814, 820, 826, 827, 828, 830, 831, 832, 834, 835, 836, 841, 842, 851, 857, 858, 881, 904, 905, 925, 957, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 975, 977, 978, 980, 981, 983, 993, 998, 999, 1001, 1015, 1017, 1020, 1021, 1024], "bit": [4, 48, 53, 78, 98, 196, 200, 300, 330, 344, 354, 358, 367, 370, 404, 405, 568, 575, 644, 814, 904, 905, 964, 968, 986, 995, 1002, 1009, 1012, 1015, 1017, 1018, 1021, 1022, 1023], "less": [4, 5, 8, 52, 53, 60, 92, 95, 98, 106, 117, 123, 124, 150, 157, 168, 180, 182, 198, 200, 202, 233, 244, 246, 258, 259, 267, 269, 272, 301, 304, 305, 306, 312, 314, 343, 344, 354, 358, 360, 367, 372, 374, 383, 385, 397, 401, 402, 404, 405, 409, 425, 427, 429, 431, 434, 436, 438, 443, 446, 448, 449, 468, 469, 470, 482, 501, 517, 521, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 576, 582, 605, 613, 620, 633, 647, 662, 664, 678, 687, 707, 708, 709, 710, 721, 737, 749, 764, 765, 770, 778, 780, 781, 784, 785, 786, 792, 808, 819, 820, 821, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 847, 859, 861, 862, 864, 867, 873, 874, 884, 885, 892, 893, 894, 895, 910, 924, 956, 957, 959, 960, 961, 964, 966, 967, 970, 972, 977, 981, 982, 983, 987, 1000, 1002, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1019, 1023, 1024], "half": [4, 24, 98, 232, 235, 256, 258, 270, 367, 368, 402, 449, 508, 548, 579, 583, 588, 755, 843, 851, 967, 970, 983], "contigu": [4, 21, 374, 383, 394, 401, 405, 429, 433, 435, 445, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 766, 801, 824, 825, 884, 886, 887, 888, 889, 890, 982, 1012, 1019, 1023], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 71, 72, 73, 74, 75, 78, 86, 100, 103, 109, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 129, 130, 136, 137, 143, 144, 146, 150, 162, 163, 165, 167, 168, 170, 171, 174, 182, 193, 198, 200, 205, 206, 213, 214, 216, 228, 233, 238, 239, 240, 245, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 280, 282, 286, 287, 294, 296, 297, 302, 304, 305, 306, 307, 310, 311, 312, 315, 321, 322, 330, 333, 338, 348, 352, 354, 361, 372, 374, 377, 384, 385, 398, 401, 404, 423, 424, 544, 546, 553, 554, 565, 645, 683, 684, 686, 688, 727, 812, 815, 833, 841, 842, 844, 892, 893, 894, 895, 956, 957, 962, 967, 969, 970, 975, 977, 982, 988, 997, 998, 1002, 1006, 1015, 1016], "timeseriessplit": [4, 182, 253, 401, 1015, 1016, 1021], "ts_cv": 4, "n_split": [4, 110, 116, 122, 162, 163, 168, 245, 253, 258, 260, 263, 268, 321, 330, 338, 354, 401, 783, 784, 785, 786, 787, 789, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 807, 997, 1015, 1017], "5": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 70, 71, 73, 74, 75, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 109, 110, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 136, 137, 139, 142, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 190, 192, 193, 195, 196, 198, 199, 200, 201, 202, 204, 206, 209, 210, 211, 212, 213, 214, 216, 220, 221, 222, 224, 227, 230, 231, 232, 233, 234, 235, 237, 238, 240, 243, 244, 245, 246, 247, 248, 249, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 269, 270, 271, 272, 273, 276, 278, 280, 282, 283, 284, 285, 287, 288, 290, 291, 294, 295, 296, 297, 300, 302, 303, 304, 305, 307, 310, 311, 312, 313, 314, 315, 318, 319, 321, 322, 323, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 367, 369, 370, 372, 374, 377, 378, 383, 384, 385, 388, 389, 390, 395, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 423, 424, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 444, 448, 450, 452, 455, 458, 464, 468, 469, 470, 471, 476, 479, 480, 490, 502, 503, 507, 509, 510, 512, 514, 517, 519, 520, 522, 523, 524, 525, 526, 529, 530, 531, 532, 533, 538, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 568, 578, 579, 580, 583, 588, 596, 599, 600, 601, 602, 605, 606, 608, 609, 611, 613, 614, 615, 616, 617, 618, 619, 620, 624, 627, 629, 630, 631, 632, 633, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 656, 658, 662, 663, 664, 666, 667, 670, 674, 675, 677, 678, 681, 682, 685, 689, 691, 693, 695, 698, 699, 707, 708, 709, 711, 712, 713, 715, 720, 723, 724, 726, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 754, 766, 767, 769, 770, 772, 773, 774, 777, 779, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 841, 842, 843, 844, 849, 850, 851, 853, 854, 856, 857, 858, 859, 860, 861, 863, 864, 865, 872, 873, 878, 884, 885, 886, 887, 888, 889, 890, 892, 894, 910, 919, 920, 921, 923, 925, 926, 930, 931, 935, 938, 956, 957, 959, 962, 963, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 979, 981, 982, 985, 989, 993, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1010, 1011, 1012, 1014, 1016, 1017, 1019, 1023, 1024, 1025], "48": [4, 45, 72, 76, 102, 155, 172, 240, 306, 369, 378, 397, 496, 583, 731, 808, 819, 956, 969, 977, 1005], "max_train_s": [4, 401, 803, 1016], "10000": [4, 11, 30, 43, 63, 72, 73, 124, 136, 184, 191, 198, 206, 214, 231, 233, 271, 312, 327, 354, 360, 404, 405, 547, 548, 630, 665, 861, 890, 979, 998, 1002], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 71, 109, 115, 121, 122, 124, 125, 129, 167, 174, 182, 193, 198, 205, 206, 213, 214, 255, 256, 260, 265, 267, 271, 276, 286, 287, 294, 296, 297, 302, 304, 305, 312, 330, 338, 354, 377, 401, 684, 784, 799, 802, 803, 810, 812, 833, 957, 969, 970, 997, 998, 1009, 1010, 1015, 1016, 1021], "manual": [4, 46, 55, 168, 169, 171, 199, 209, 260, 278, 321, 328, 343, 345, 358, 359, 367, 372, 376, 377, 384, 388, 397, 401, 402, 403, 423, 435, 553, 834, 857, 863, 956, 961, 963, 966, 967, 970, 977, 988, 993, 994, 1002, 1017, 1019, 1025], "inspect": [4, 31, 56, 61, 112, 117, 124, 126, 127, 131, 144, 150, 155, 156, 168, 169, 170, 171, 181, 190, 207, 237, 258, 261, 270, 281, 286, 289, 305, 310, 311, 312, 313, 315, 326, 327, 328, 331, 332, 343, 349, 359, 361, 374, 385, 397, 398, 404, 405, 450, 539, 540, 543, 544, 545, 546, 550, 551, 552, 813, 844, 845, 892, 893, 894, 895, 955, 967, 968, 971, 974, 975, 982, 987, 1002, 1004, 1012], "variou": [4, 12, 36, 37, 55, 58, 60, 61, 68, 81, 85, 98, 165, 168, 176, 208, 217, 218, 219, 220, 225, 231, 304, 311, 343, 345, 352, 354, 358, 366, 367, 368, 369, 372, 374, 377, 384, 386, 395, 396, 397, 399, 423, 427, 458, 488, 500, 501, 511, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 580, 588, 633, 637, 639, 641, 644, 647, 649, 651, 652, 654, 659, 661, 662, 677, 678, 685, 782, 785, 786, 788, 796, 804, 805, 806, 807, 808, 809, 810, 811, 844, 884, 885, 956, 957, 964, 967, 970, 974, 977, 981, 983, 987, 991, 1001, 1002, 1009, 1012, 1013], "check": [4, 5, 8, 17, 46, 53, 56, 99, 116, 130, 150, 165, 167, 169, 170, 184, 186, 187, 198, 220, 244, 251, 267, 274, 313, 320, 338, 352, 358, 359, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 383, 385, 388, 391, 398, 429, 437, 438, 451, 488, 494, 495, 517, 522, 523, 534, 547, 548, 632, 633, 638, 639, 646, 647, 648, 649, 662, 664, 667, 673, 675, 678, 679, 788, 799, 808, 822, 840, 848, 889, 892, 893, 894, 895, 904, 905, 906, 915, 916, 927, 928, 929, 951, 952, 953, 955, 962, 963, 964, 967, 982, 983, 988, 991, 1009, 1010, 1012, 1016, 1020, 1021, 1022, 1023, 1024], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 16, 17, 19, 25, 32, 40, 44, 49, 62, 70, 105, 106, 114, 116, 122, 130, 137, 171, 237, 253, 256, 258, 259, 261, 262, 267, 271, 287, 302, 306, 310, 311, 312, 313, 314, 315, 322, 333, 344, 345, 360, 366, 367, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 395, 396, 397, 398, 401, 403, 404, 405, 418, 420, 423, 436, 442, 443, 450, 451, 452, 457, 458, 464, 468, 469, 470, 474, 475, 476, 477, 478, 482, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 509, 518, 536, 537, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 574, 575, 577, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 618, 620, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 656, 658, 659, 664, 665, 667, 670, 678, 682, 683, 685, 696, 698, 699, 702, 704, 710, 718, 731, 739, 763, 766, 768, 773, 777, 780, 781, 782, 785, 786, 788, 793, 794, 796, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 848, 852, 855, 857, 858, 863, 865, 881, 885, 887, 890, 892, 893, 894, 895, 898, 900, 904, 905, 906, 910, 912, 913, 914, 916, 924, 925, 927, 938, 941, 951, 956, 957, 963, 967, 969, 970, 971, 974, 975, 978, 983, 985, 987, 988, 991, 993, 997, 999, 1002, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "train_0": 4, "test_0": 4, "iloc": [4, 130, 168, 169, 216, 258], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 19, 24, 26, 42, 45, 54, 55, 80, 85, 91, 101, 103, 105, 110, 114, 123, 143, 144, 151, 162, 168, 178, 188, 227, 245, 258, 291, 294, 297, 300, 302, 315, 318, 319, 343, 351, 354, 358, 378, 401, 404, 405, 430, 463, 487, 490, 556, 583, 664, 719, 779, 799, 810, 836, 854, 859, 861, 862, 865, 873, 874, 876, 877, 962, 963, 967, 968, 970, 977, 998, 1009, 1011, 1017, 1020], "760": [4, 266, 274, 321, 324], "68": [4, 42, 189, 297, 318, 397, 521, 527, 576, 1009], "27": [4, 6, 19, 31, 47, 54, 130, 134, 224, 318, 319, 339, 369, 397, 405, 407, 510, 699, 773, 774, 865, 885, 967, 977, 1001, 1009, 1011], "9993": [4, 639, 641, 1017], "12380": 4, "32": [4, 5, 51, 167, 170, 235, 310, 314, 319, 343, 366, 370, 377, 385, 394, 404, 405, 431, 550, 551, 568, 575, 620, 662, 863, 865, 904, 905, 932, 975, 977, 1001, 1009, 1012, 1015, 1017, 1018, 1021, 1022, 1023], "000": [4, 5, 15, 16, 17, 21, 25, 27, 42, 74, 151, 170, 174, 231, 256, 258, 260, 278, 292, 305, 313, 343, 344, 354, 367, 378, 404, 405, 476, 547, 548, 630, 663, 981, 1002, 1020], "77": [4, 6, 44, 174, 267, 319, 366, 369, 520, 693], "0028": 4, "12381": 4, "72": [4, 6, 7, 46, 98, 116, 153, 377, 808], "9995": 4, "12382": 4, "240": [4, 44, 975, 1009], "82": [4, 30, 53, 58, 92, 144, 201, 289, 297, 318, 773, 782, 796, 967, 970, 998, 1009], "9980": [4, 1017], "12383": 4, "13374": 4, "34": [4, 92, 123, 150, 283, 297, 318, 319, 369, 401, 407, 506, 556, 583, 635, 653, 702, 749, 998, 1009], "44": [4, 85, 155, 168, 169, 182, 282, 407, 766, 865, 885, 888, 967, 974, 1009], "40": [4, 14, 54, 66, 78, 90, 95, 101, 126, 132, 150, 182, 189, 190, 192, 215, 221, 223, 234, 247, 259, 284, 290, 296, 302, 318, 319, 328, 329, 331, 333, 335, 337, 352, 359, 367, 401, 432, 481, 503, 504, 824, 825, 829, 841, 842, 956, 968, 977, 1009, 1010], "150": [4, 6, 90, 92, 114, 123, 136, 220, 224, 227, 271, 369, 401, 406, 490, 588, 805, 806, 807, 967, 997, 998, 999], "53": [4, 53, 397, 404, 521, 527, 775, 776], "15": [4, 6, 7, 12, 13, 14, 30, 31, 34, 40, 44, 53, 54, 55, 61, 62, 66, 68, 73, 74, 80, 82, 92, 105, 110, 114, 116, 119, 120, 123, 142, 144, 146, 150, 154, 162, 167, 168, 169, 187, 195, 200, 212, 216, 221, 224, 227, 245, 246, 253, 261, 263, 266, 269, 270, 272, 281, 282, 286, 294, 295, 300, 302, 304, 319, 322, 324, 328, 330, 333, 337, 340, 349, 366, 367, 372, 384, 401, 404, 405, 426, 440, 476, 483, 517, 523, 541, 542, 584, 630, 638, 647, 649, 654, 662, 664, 678, 726, 800, 813, 836, 865, 956, 962, 963, 964, 967, 970, 971, 977, 982, 985, 993, 998, 1005, 1007, 1011, 1021, 1023, 1024], "0013": 4, "13375": 4, "39": [4, 236, 240, 367, 369, 370, 376, 397, 405, 481, 893], "49": [4, 92, 107, 366, 367, 369, 377, 397, 436, 443, 699, 711, 741, 749, 780, 782, 865, 962, 967, 977, 1012], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 97, 156, 168, 216, 333, 369, 378, 404, 405, 541, 542, 556, 720, 967, 1002, 1009], "08": [4, 15, 44, 50, 83, 98, 134, 164, 168, 169, 182, 217, 241, 274, 297, 308, 369, 517, 529, 531, 549, 627, 644, 782, 841, 842, 863, 973], "910": 4, "42": [4, 5, 6, 24, 25, 26, 27, 31, 46, 56, 78, 92, 97, 103, 117, 118, 120, 123, 124, 126, 130, 143, 144, 163, 168, 170, 171, 174, 177, 187, 190, 192, 193, 200, 204, 205, 206, 212, 213, 215, 220, 227, 233, 236, 239, 257, 259, 262, 278, 284, 285, 286, 294, 301, 302, 303, 305, 307, 310, 312, 314, 321, 328, 330, 343, 344, 354, 359, 374, 377, 378, 385, 397, 401, 404, 405, 408, 423, 430, 474, 478, 510, 517, 523, 530, 543, 544, 551, 552, 553, 554, 556, 663, 780, 784, 808, 810, 824, 825, 829, 833, 836, 876, 877, 879, 880, 881, 894, 895, 970, 977, 998, 1002, 1005, 1006, 1009], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 55, 71, 92, 112, 132, 168, 169, 177, 186, 227, 305, 318, 319, 530, 634, 635, 642, 688, 692, 693, 712, 726, 741, 767, 774, 817, 956, 963, 967, 973, 974, 977, 998, 1002, 1009, 1011], "26": [4, 42, 46, 54, 80, 97, 155, 168, 217, 224, 235, 260, 271, 274, 319, 378, 556, 634, 714, 768, 860, 872, 921, 967, 977, 1009, 1012, 1013, 1021], "47": [4, 85, 194, 367, 479, 480, 521, 527, 962], "16": [4, 5, 10, 15, 19, 27, 43, 50, 51, 54, 66, 74, 80, 95, 98, 142, 159, 169, 191, 197, 198, 199, 216, 219, 220, 224, 232, 235, 260, 261, 262, 282, 297, 300, 304, 310, 344, 350, 367, 369, 370, 378, 384, 388, 389, 390, 401, 402, 405, 428, 457, 458, 464, 483, 488, 520, 521, 556, 575, 581, 582, 593, 594, 625, 636, 637, 640, 641, 642, 643, 668, 669, 795, 800, 810, 859, 885, 893, 956, 963, 967, 977, 982, 985, 993, 1002, 1005, 1007, 1009, 1010, 1014, 1015, 1017, 1018], "9979": 4, "2331": 4, "31": [4, 70, 79, 216, 224, 259, 274, 283, 313, 318, 319, 394, 405, 486, 547, 548, 583, 635, 657, 665, 932, 968, 1009], "060": [4, 6, 736], "0032": 4, "2332": 4, "2333": 4, "78": [4, 53, 174, 216, 297, 302, 319, 479, 480, 639, 641, 650, 651, 782, 788, 808, 967, 988, 998], "275": [4, 319, 1012], "2334": 4, "96": [4, 32, 48, 62, 157, 227, 256, 297, 302, 305, 306, 318, 319, 369, 401, 956, 962, 967, 977, 1009], "515": 4, "64": [4, 32, 48, 53, 58, 89, 95, 155, 168, 220, 231, 232, 235, 256, 267, 282, 287, 349, 358, 359, 369, 370, 378, 402, 481, 488, 585, 586, 632, 644, 674, 675, 676, 677, 885, 970, 999, 1005, 1009, 1011, 1017, 1018, 1021, 1022, 1023], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1018], "12329": 4, "46": [4, 53, 190, 198, 354, 378, 579, 580, 702, 888, 893, 962, 977, 1005], "12330": [4, 1017], "52": [4, 46, 155, 177, 198, 619, 780, 962, 1009], "last": [4, 44, 58, 89, 121, 123, 168, 177, 198, 199, 206, 211, 227, 249, 261, 269, 270, 305, 312, 314, 321, 348, 358, 367, 370, 374, 376, 377, 380, 385, 388, 397, 398, 405, 409, 424, 428, 433, 445, 450, 454, 501, 519, 545, 546, 547, 548, 569, 570, 573, 579, 580, 583, 596, 668, 669, 671, 672, 683, 684, 686, 687, 688, 693, 767, 780, 781, 785, 786, 801, 824, 825, 829, 844, 845, 849, 857, 863, 899, 924, 942, 956, 962, 963, 964, 966, 968, 971, 981, 988, 993, 1000, 1009, 1016, 1017, 1018, 1023, 1025], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 8, 32, 54, 97, 119, 197, 234, 271, 297, 302, 318, 319, 404, 649, 773, 962, 967, 968, 977, 1002, 1009], "665": 4, "16380": 4, "71": [4, 216, 322, 369, 496, 715, 967, 1000, 1011], "16381": 4, "76": [4, 8, 174, 198, 297, 319, 343, 354, 369, 378, 766, 1000], "16382": 4, "16383": 4, "18": [4, 7, 8, 19, 40, 44, 49, 53, 60, 62, 74, 92, 98, 103, 110, 123, 159, 168, 209, 221, 227, 232, 236, 241, 258, 304, 306, 319, 343, 344, 345, 372, 378, 398, 401, 402, 405, 433, 445, 478, 486, 487, 488, 490, 491, 496, 521, 522, 524, 526, 527, 543, 544, 545, 546, 549, 550, 551, 552, 555, 557, 558, 559, 560, 561, 563, 564, 575, 580, 585, 586, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 632, 635, 644, 645, 657, 700, 704, 716, 719, 720, 726, 728, 780, 781, 803, 817, 840, 841, 842, 848, 854, 862, 863, 874, 884, 885, 892, 893, 894, 895, 896, 920, 921, 956, 965, 967, 977, 985, 1005, 1007, 1009, 1010, 1013, 1014, 1016, 1017, 1019, 1020], "940": 4, "6331": 4, "28": [4, 66, 123, 168, 214, 224, 267, 296, 318, 319, 346, 369, 378, 397, 401, 436, 443, 977, 998, 1009, 1012, 1015], "790": [4, 70], "89": [4, 32, 155, 189, 297, 318, 319, 967, 977, 1002, 1009, 1012, 1020], "6332": 4, "6333": 4, "88": [4, 6, 32, 189, 257, 297, 318, 319, 348, 367, 369, 399, 459, 844, 998, 1009], "820": [4, 824, 825], "79": [4, 6, 30, 32, 80, 81, 98, 174, 297, 319, 369, 377, 399, 460, 510, 583, 822, 1009, 1011], "6334": 4, "6335": 4, "70": [4, 6, 11, 66, 71, 73, 169, 243, 258, 319, 367, 369, 401, 479, 480, 699, 711, 741, 782, 796, 956, 977, 998, 1005], "33": [4, 50, 80, 98, 107, 198, 315, 319, 367, 369, 370, 376, 377, 378, 388, 389, 390, 397, 405, 518, 634, 698, 699, 714, 715, 723, 728, 768, 769, 772, 788, 808, 810, 812, 895, 963, 967, 977, 998, 1009, 1017], "335": 4, "74": [4, 8, 112, 214, 318, 319, 369, 576, 782, 796, 863], "16326": [4, 1021], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 155, 199, 367, 376, 380], "tree": [4, 7, 26, 27, 31, 41, 44, 55, 62, 108, 109, 112, 113, 114, 116, 120, 121, 122, 123, 124, 126, 130, 131, 134, 158, 162, 169, 171, 220, 235, 237, 262, 278, 283, 291, 300, 301, 305, 312, 353, 354, 358, 361, 367, 369, 378, 384, 385, 387, 395, 397, 403, 408, 423, 427, 428, 429, 430, 431, 432, 434, 436, 443, 449, 481, 486, 490, 500, 501, 505, 530, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 617, 618, 619, 620, 644, 674, 678, 688, 689, 773, 788, 808, 810, 819, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 845, 848, 857, 916, 957, 964, 967, 968, 973, 974, 987, 988, 989, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "often": [4, 19, 24, 25, 33, 70, 74, 116, 128, 154, 162, 168, 169, 199, 216, 220, 245, 260, 263, 300, 305, 330, 340, 343, 344, 345, 358, 359, 366, 367, 369, 372, 374, 377, 380, 383, 384, 385, 387, 391, 395, 397, 398, 399, 401, 402, 404, 405, 407, 409, 454, 507, 510, 519, 522, 618, 632, 633, 638, 639, 646, 647, 648, 649, 658, 660, 673, 713, 854, 862, 870, 882, 956, 957, 959, 962, 963, 964, 965, 966, 967, 969, 970, 972, 973, 974, 977, 980, 981, 983, 993, 995, 1000, 1001, 1002, 1010, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "flexibl": [4, 25, 120, 162, 198, 301, 327, 345, 374, 379, 401, 407, 660, 884, 885, 956, 961, 963, 967, 971, 977, 988, 991, 1018, 1022], "effici": [4, 5, 12, 13, 42, 46, 53, 55, 95, 116, 128, 174, 187, 191, 200, 206, 283, 343, 358, 364, 366, 372, 374, 375, 377, 378, 383, 385, 391, 394, 396, 397, 402, 403, 404, 407, 409, 428, 429, 432, 433, 435, 436, 438, 440, 443, 445, 447, 448, 482, 519, 520, 521, 524, 526, 527, 530, 549, 552, 560, 574, 577, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 620, 624, 626, 641, 644, 645, 650, 652, 654, 659, 661, 662, 663, 664, 665, 671, 672, 674, 685, 711, 741, 748, 764, 765, 780, 781, 782, 796, 813, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 849, 861, 873, 877, 884, 893, 895, 921, 935, 956, 959, 961, 963, 964, 966, 967, 968, 970, 971, 972, 973, 975, 977, 978, 979, 980, 981, 982, 987, 991, 993, 997, 1000, 1001, 1002, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "heteorogen": 4, "tabular": [4, 169, 374, 975], "mix": [4, 62, 69, 76, 96, 97, 165, 198, 300, 366, 374, 383, 385, 398, 402, 409, 450, 452, 453, 482, 519, 524, 526, 533, 586, 590, 616, 632, 633, 638, 644, 645, 646, 647, 648, 649, 654, 662, 664, 667, 782, 796, 810, 844, 857, 858, 864, 865, 931, 938, 941, 963, 972, 1001, 1021, 1023, 1024], "long": [4, 11, 12, 44, 62, 110, 123, 155, 163, 168, 170, 198, 234, 261, 291, 300, 311, 343, 344, 354, 359, 372, 380, 383, 385, 386, 391, 396, 397, 407, 439, 484, 524, 662, 663, 664, 785, 786, 819, 820, 821, 822, 823, 841, 842, 852, 967, 973, 977, 978, 980, 981, 986, 990, 1011, 1015, 1021, 1023], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 56, 57, 58, 59, 60, 65, 80, 81, 82, 86, 90, 92, 95, 99, 100, 104, 105, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 126, 131, 132, 133, 144, 146, 150, 155, 156, 157, 159, 162, 165, 168, 169, 174, 176, 182, 184, 186, 187, 198, 200, 202, 206, 212, 214, 215, 216, 217, 219, 227, 231, 232, 234, 236, 243, 244, 246, 247, 248, 249, 251, 253, 258, 260, 261, 262, 264, 266, 270, 272, 274, 276, 278, 281, 282, 283, 284, 285, 287, 288, 289, 300, 302, 303, 304, 305, 307, 310, 312, 313, 315, 318, 320, 321, 322, 323, 325, 326, 328, 330, 332, 338, 341, 343, 344, 349, 352, 358, 361, 365, 367, 368, 371, 372, 374, 375, 383, 384, 394, 395, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 414, 416, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 442, 443, 444, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 570, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 596, 597, 613, 614, 615, 616, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 673, 674, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 745, 746, 748, 749, 753, 754, 755, 756, 758, 759, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 904, 905, 909, 910, 921, 925, 936, 938, 941, 942, 945, 948, 956, 957, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 987, 988, 990, 993, 999, 1000, 1001, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "larg": [4, 12, 13, 21, 26, 37, 39, 43, 47, 49, 50, 52, 53, 55, 73, 75, 95, 99, 113, 115, 116, 123, 126, 128, 143, 155, 156, 170, 177, 178, 187, 189, 198, 200, 203, 204, 216, 232, 255, 261, 264, 267, 280, 287, 296, 300, 302, 313, 314, 330, 335, 344, 345, 358, 367, 372, 378, 381, 383, 384, 385, 388, 391, 396, 399, 401, 402, 403, 404, 406, 407, 408, 410, 428, 430, 432, 433, 436, 437, 438, 439, 444, 448, 459, 461, 485, 500, 520, 522, 524, 526, 530, 533, 535, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 568, 574, 575, 577, 620, 627, 629, 636, 640, 643, 644, 645, 650, 657, 658, 660, 663, 665, 671, 673, 675, 677, 678, 679, 681, 731, 764, 765, 782, 790, 792, 796, 800, 809, 819, 820, 821, 822, 823, 824, 825, 830, 841, 842, 849, 853, 854, 862, 864, 876, 877, 884, 885, 889, 890, 892, 893, 894, 895, 920, 921, 956, 959, 961, 963, 964, 966, 969, 970, 971, 975, 977, 980, 981, 982, 983, 987, 988, 991, 998, 1000, 1001, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "here": [4, 8, 9, 12, 13, 17, 24, 57, 58, 66, 78, 82, 89, 90, 92, 97, 98, 100, 102, 103, 104, 106, 110, 113, 116, 120, 124, 130, 144, 147, 150, 158, 159, 168, 169, 170, 174, 177, 182, 187, 191, 198, 204, 213, 214, 216, 219, 221, 227, 232, 237, 244, 245, 246, 252, 255, 256, 258, 260, 261, 263, 267, 268, 270, 278, 280, 287, 295, 296, 297, 302, 305, 312, 314, 318, 320, 330, 338, 340, 345, 348, 354, 358, 359, 360, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 380, 383, 384, 391, 393, 394, 397, 398, 400, 401, 402, 403, 404, 405, 408, 410, 423, 426, 427, 428, 429, 430, 431, 433, 435, 438, 450, 458, 461, 522, 524, 525, 529, 530, 553, 554, 555, 556, 567, 568, 570, 574, 577, 580, 588, 614, 616, 633, 637, 639, 641, 647, 649, 651, 659, 661, 675, 677, 681, 685, 698, 711, 731, 741, 777, 782, 785, 786, 788, 796, 804, 805, 806, 807, 808, 809, 811, 820, 824, 825, 848, 856, 859, 862, 876, 877, 887, 933, 956, 959, 963, 964, 965, 966, 967, 970, 973, 977, 979, 980, 981, 982, 987, 988, 990, 991, 993, 994, 1000, 1009, 1017, 1022], "ordin": [4, 53, 71, 130, 303, 306, 307, 312, 315, 366, 385, 404, 482, 553, 695, 849, 852, 857, 858, 865, 963, 964, 977, 988, 1017, 1023], "encod": [4, 8, 11, 48, 55, 71, 95, 115, 130, 165, 168, 169, 170, 197, 198, 267, 299, 301, 302, 303, 308, 312, 314, 315, 330, 343, 345, 364, 366, 368, 374, 377, 383, 385, 398, 401, 402, 404, 405, 407, 450, 473, 482, 489, 512, 517, 523, 525, 526, 528, 530, 531, 532, 534, 537, 548, 552, 553, 555, 567, 574, 575, 577, 616, 634, 644, 645, 655, 658, 666, 720, 784, 789, 791, 807, 810, 844, 845, 847, 849, 851, 852, 855, 857, 858, 865, 868, 882, 956, 957, 963, 964, 967, 969, 970, 972, 981, 987, 988, 1004, 1010, 1011, 1017, 1021, 1023, 1024, 1025], "know": [4, 53, 66, 120, 144, 147, 150, 159, 168, 216, 234, 258, 276, 314, 318, 338, 344, 358, 372, 383, 391, 397, 400, 401, 402, 405, 486, 490, 496, 632, 638, 644, 645, 711, 741, 782, 796, 869, 870, 872, 873, 874, 875, 892, 893, 894, 895, 956, 966, 967, 968, 970, 979, 1015, 1016, 1019, 1021], "treat": [4, 6, 71, 120, 130, 162, 168, 198, 267, 306, 312, 321, 354, 372, 383, 385, 394, 404, 405, 428, 547, 548, 574, 575, 577, 593, 594, 618, 624, 631, 657, 660, 739, 773, 853, 854, 860, 861, 864, 865, 869, 872, 873, 875, 957, 959, 963, 967, 968, 974, 977, 981, 983, 998, 1013, 1021, 1025], "dedic": [4, 256, 340, 370, 376, 378, 383, 386, 393, 397, 570, 658, 660, 673, 956, 987, 993, 1017], "rule": [4, 116, 174, 349, 352, 354, 358, 369, 372, 373, 374, 383, 385, 386, 392, 395, 396, 397, 401, 402, 404, 406, 522, 535, 536, 537, 538, 539, 547, 548, 555, 556, 588, 620, 631, 644, 645, 652, 654, 662, 663, 664, 692, 693, 782, 785, 786, 788, 796, 807, 809, 833, 884, 897, 956, 961, 969, 970, 981, 983, 988, 993, 1000, 1004, 1011, 1014, 1021], "pass": [4, 7, 8, 20, 21, 38, 116, 120, 127, 144, 179, 182, 199, 228, 230, 231, 237, 239, 248, 256, 259, 307, 310, 313, 335, 345, 354, 358, 359, 360, 367, 372, 373, 374, 377, 378, 379, 380, 381, 383, 385, 391, 393, 397, 398, 401, 402, 404, 405, 407, 408, 409, 423, 424, 426, 429, 430, 432, 433, 435, 436, 438, 440, 443, 445, 446, 448, 450, 451, 453, 454, 455, 458, 460, 474, 477, 478, 481, 483, 489, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 567, 568, 574, 575, 577, 579, 580, 583, 593, 594, 596, 597, 603, 606, 612, 617, 618, 620, 625, 626, 627, 628, 629, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 656, 657, 658, 662, 663, 664, 665, 667, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 717, 718, 727, 748, 759, 763, 764, 765, 766, 773, 775, 776, 780, 781, 782, 784, 785, 786, 787, 788, 794, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 848, 849, 851, 855, 857, 858, 859, 861, 864, 865, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 904, 905, 911, 915, 916, 920, 921, 923, 925, 927, 928, 935, 937, 938, 941, 956, 957, 963, 965, 967, 968, 969, 970, 971, 974, 977, 980, 981, 982, 988, 991, 993, 997, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "explicitli": [4, 46, 53, 117, 150, 157, 162, 163, 199, 230, 303, 307, 310, 345, 354, 359, 366, 368, 372, 373, 374, 376, 383, 385, 393, 401, 405, 407, 521, 535, 536, 565, 566, 583, 613, 634, 644, 645, 655, 666, 695, 712, 767, 773, 774, 785, 786, 815, 818, 824, 825, 850, 874, 875, 935, 956, 957, 959, 961, 963, 964, 967, 969, 970, 977, 991, 1002, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023], "logic": [4, 359, 373, 374, 379, 393, 404, 983, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "integ": [4, 17, 48, 53, 71, 168, 198, 216, 311, 312, 354, 358, 366, 367, 369, 374, 377, 381, 384, 385, 397, 398, 401, 402, 404, 405, 420, 423, 448, 450, 453, 458, 473, 482, 484, 487, 488, 489, 491, 494, 495, 498, 500, 501, 505, 508, 536, 545, 546, 547, 548, 549, 553, 554, 558, 568, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 618, 619, 630, 637, 641, 645, 651, 659, 661, 662, 685, 700, 720, 782, 784, 785, 786, 787, 789, 791, 796, 797, 798, 799, 801, 802, 804, 807, 815, 818, 820, 823, 824, 825, 849, 857, 858, 863, 864, 865, 868, 878, 880, 892, 893, 894, 895, 900, 930, 931, 932, 936, 957, 963, 968, 970, 977, 980, 982, 983, 993, 1000, 1002, 1009, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "lexicograph": [4, 385, 553, 773, 777, 826, 834], "ad": [4, 13, 75, 103, 105, 109, 116, 121, 143, 150, 156, 157, 177, 182, 200, 223, 233, 258, 259, 260, 300, 311, 312, 313, 314, 315, 322, 344, 371, 372, 376, 378, 383, 385, 386, 402, 404, 405, 406, 407, 427, 428, 429, 431, 433, 435, 438, 445, 448, 450, 500, 508, 518, 521, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 568, 575, 576, 577, 579, 588, 593, 594, 597, 599, 613, 615, 627, 628, 634, 636, 640, 644, 645, 655, 662, 664, 666, 681, 699, 700, 714, 715, 760, 762, 768, 769, 772, 774, 780, 781, 782, 796, 805, 812, 822, 841, 842, 843, 857, 863, 866, 881, 892, 893, 894, 895, 911, 956, 960, 962, 963, 964, 968, 970, 971, 973, 988, 991, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "benefit": [4, 56, 74, 75, 168, 212, 223, 230, 232, 280, 314, 358, 372, 381, 385, 395, 397, 434, 447, 454, 494, 553, 554, 644, 645, 652, 654, 662, 663, 664, 882, 884, 956, 962, 970, 975, 977, 988, 991, 1009, 1012, 1013, 1014, 1021, 1022, 1023, 1024], "prevent": [4, 55, 110, 123, 144, 167, 199, 300, 306, 307, 330, 343, 348, 354, 372, 374, 376, 383, 384, 397, 402, 405, 428, 435, 474, 475, 576, 577, 597, 713, 770, 841, 842, 869, 870, 872, 873, 874, 875, 967, 969, 972, 973, 977, 983, 1000, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "ani": [4, 8, 9, 13, 19, 30, 44, 46, 55, 57, 67, 127, 142, 147, 155, 156, 157, 167, 168, 169, 170, 187, 198, 216, 227, 230, 231, 244, 248, 249, 258, 259, 261, 264, 267, 291, 300, 301, 304, 307, 310, 312, 313, 315, 330, 345, 354, 358, 359, 360, 366, 367, 369, 370, 372, 374, 376, 377, 378, 380, 384, 385, 386, 388, 393, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 420, 426, 432, 434, 435, 436, 438, 440, 442, 443, 447, 450, 453, 474, 475, 494, 495, 509, 520, 523, 525, 532, 537, 543, 544, 545, 546, 550, 551, 552, 553, 554, 555, 556, 565, 566, 568, 574, 575, 577, 579, 589, 596, 597, 606, 613, 618, 619, 631, 634, 644, 645, 652, 654, 655, 662, 663, 664, 665, 666, 678, 682, 685, 686, 690, 702, 703, 705, 709, 721, 722, 737, 740, 742, 759, 763, 764, 765, 766, 775, 776, 778, 782, 785, 786, 794, 795, 813, 816, 824, 825, 830, 834, 843, 844, 848, 849, 853, 855, 857, 858, 865, 874, 875, 878, 881, 884, 892, 893, 894, 895, 896, 898, 900, 904, 905, 937, 951, 956, 957, 959, 962, 963, 964, 967, 968, 969, 970, 973, 974, 975, 977, 979, 980, 981, 982, 983, 987, 993, 995, 999, 1000, 1002, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "unknown": [4, 16, 56, 168, 258, 318, 320, 360, 367, 385, 391, 394, 405, 851, 857, 858, 930, 966, 977, 993, 1013, 1017, 1021, 1022], "sake": [4, 123, 163, 168, 198, 305, 343, 345, 380, 383, 656, 685], "simplic": [4, 13, 31, 182, 343, 345, 385, 403, 970, 971, 972, 982], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 71, 72, 98, 109, 115, 116, 117, 118, 119, 126, 127, 130, 133, 144, 150, 155, 163, 167, 168, 169, 170, 174, 177, 179, 187, 228, 229, 230, 237, 238, 239, 240, 244, 245, 248, 256, 258, 259, 265, 270, 278, 291, 297, 306, 311, 312, 314, 315, 320, 332, 343, 344, 352, 367, 370, 371, 372, 374, 377, 378, 380, 383, 385, 391, 397, 400, 401, 404, 405, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 489, 553, 563, 575, 644, 659, 661, 675, 679, 782, 785, 786, 794, 796, 805, 806, 807, 809, 862, 864, 884, 956, 963, 964, 973, 982, 983, 988, 990, 991, 993, 995, 998, 1000, 1001, 1002, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "default": [4, 14, 25, 27, 30, 42, 45, 46, 48, 53, 55, 59, 95, 116, 143, 150, 162, 169, 177, 178, 187, 198, 199, 216, 229, 231, 238, 240, 246, 253, 261, 267, 276, 278, 300, 303, 304, 307, 310, 311, 315, 339, 343, 344, 345, 348, 354, 358, 359, 366, 367, 370, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 391, 395, 397, 398, 401, 402, 404, 405, 406, 408, 409, 410, 411, 413, 414, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 693, 694, 695, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 719, 720, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 908, 910, 911, 913, 915, 920, 921, 922, 923, 924, 925, 926, 930, 932, 935, 936, 937, 938, 940, 941, 942, 948, 951, 953, 954, 956, 957, 959, 961, 963, 966, 967, 968, 970, 971, 973, 974, 977, 979, 981, 982, 983, 993, 997, 1000, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "hyper": [4, 71, 116, 252, 258, 263, 297, 330, 354, 374, 383, 384, 385, 392, 401, 404, 406, 454, 630, 631, 786, 794, 796, 840, 882, 962, 963, 967, 970, 981, 982, 993, 1004, 1009, 1023], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 44, 54, 55, 58, 60, 61, 62, 71, 72, 73, 79, 81, 82, 92, 95, 112, 114, 116, 119, 124, 125, 136, 137, 144, 147, 150, 154, 155, 156, 157, 158, 159, 162, 163, 165, 168, 169, 177, 178, 179, 180, 182, 183, 185, 186, 187, 189, 190, 198, 200, 202, 203, 206, 207, 215, 216, 223, 224, 227, 229, 232, 233, 236, 243, 244, 245, 246, 248, 249, 252, 257, 258, 259, 262, 263, 266, 269, 270, 271, 273, 278, 280, 284, 285, 291, 294, 295, 297, 300, 301, 302, 310, 311, 313, 314, 315, 322, 325, 327, 332, 335, 339, 340, 341, 343, 344, 345, 348, 349, 350, 351, 354, 358, 359, 360, 361, 364, 365, 367, 375, 377, 378, 379, 380, 381, 383, 392, 395, 397, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 562, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 966, 969, 970, 971, 972, 973, 974, 975, 977, 979, 980, 981, 983, 987, 988, 994, 996, 998, 999, 1000, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "pipelin": [4, 31, 54, 58, 71, 74, 76, 86, 115, 120, 141, 143, 148, 162, 163, 169, 170, 174, 177, 186, 187, 198, 199, 204, 212, 216, 220, 226, 227, 228, 232, 237, 240, 241, 251, 255, 257, 265, 272, 274, 278, 280, 286, 287, 294, 297, 302, 305, 307, 310, 311, 312, 313, 314, 315, 322, 343, 344, 354, 358, 361, 364, 366, 367, 372, 375, 385, 401, 405, 407, 411, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 474, 488, 501, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 591, 593, 596, 597, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 683, 684, 686, 687, 688, 699, 780, 781, 782, 785, 786, 796, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 956, 957, 963, 970, 971, 976, 977, 981, 982, 987, 988, 989, 991, 994, 996, 1004, 1009, 1010, 1012, 1013, 1014, 1015, 1016], "make_pipelin": [4, 31, 58, 86, 115, 120, 130, 143, 144, 162, 163, 168, 169, 174, 177, 186, 187, 198, 199, 204, 212, 216, 220, 227, 228, 229, 237, 238, 240, 255, 265, 278, 287, 294, 302, 305, 306, 307, 310, 311, 312, 313, 314, 315, 344, 354, 384, 398, 401, 553, 662, 664, 836, 844, 869, 870, 872, 873, 874, 875, 884, 885, 886, 887, 889, 890, 957, 970, 977, 981, 982, 1012, 1019, 1022], "ordinalencod": [4, 120, 130, 169, 170, 198, 306, 315, 366, 385, 404, 567, 820, 852, 857, 865, 969, 977, 1017, 1018, 1021, 1022, 1023, 1024, 1025], "compos": [4, 5, 25, 69, 70, 71, 75, 86, 112, 120, 130, 165, 168, 169, 170, 198, 200, 216, 229, 238, 240, 306, 311, 313, 314, 315, 361, 384, 397, 398, 401, 407, 501, 598, 966, 1009], "columntransform": [4, 70, 71, 130, 168, 169, 170, 198, 216, 229, 238, 240, 306, 311, 313, 314, 315, 364, 366, 383, 384, 452, 453, 615, 849, 956, 957, 988, 1004, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "ensembl": [4, 7, 10, 26, 27, 31, 56, 109, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 162, 163, 169, 170, 171, 198, 220, 227, 235, 236, 238, 239, 255, 270, 276, 302, 306, 310, 311, 312, 313, 315, 343, 354, 358, 361, 376, 377, 384, 385, 395, 397, 401, 406, 423, 490, 501, 618, 619, 621, 644, 688, 785, 786, 810, 814, 845, 848, 857, 888, 892, 894, 895, 956, 967, 968, 973, 974, 983, 987, 988, 989, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "histgradientboostingregressor": [4, 7, 116, 120, 123, 124, 127, 130, 162, 169, 198, 306, 310, 311, 312, 313, 315, 376, 404, 546, 551, 618, 619, 621, 957, 974, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "cross_valid": [4, 120, 130, 168, 200, 254, 261, 306, 372, 384, 561, 805, 806, 967, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1024, 1025], "categorical_column": [4, 120, 168, 170, 453], "ordinal_encod": [4, 120], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 57, 62, 69, 74, 76, 86, 89, 97, 98, 100, 102, 104, 105, 108, 120, 130, 134, 144, 156, 163, 165, 168, 169, 170, 174, 190, 198, 199, 206, 212, 214, 216, 220, 223, 227, 229, 232, 234, 240, 245, 255, 256, 259, 267, 278, 280, 286, 287, 288, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 315, 330, 333, 343, 345, 354, 361, 366, 367, 368, 369, 372, 374, 377, 381, 385, 393, 395, 396, 397, 399, 402, 404, 405, 406, 407, 413, 417, 419, 423, 427, 428, 429, 431, 433, 435, 438, 450, 451, 452, 453, 454, 468, 469, 470, 471, 474, 475, 482, 489, 494, 495, 500, 501, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 543, 545, 547, 550, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 622, 624, 625, 626, 627, 628, 639, 644, 649, 659, 662, 670, 674, 675, 676, 677, 678, 680, 687, 688, 699, 738, 739, 770, 782, 785, 786, 796, 810, 813, 819, 828, 833, 836, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 882, 884, 886, 889, 890, 913, 915, 956, 957, 959, 961, 963, 964, 967, 968, 971, 981, 982, 984, 987, 988, 989, 993, 998, 999, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "remaind": [4, 120, 168, 187, 198, 200, 216, 315, 338, 348, 398, 450, 453, 1009, 1016, 1017, 1018, 1021, 1022], "passthrough": [4, 72, 120, 168, 169, 198, 216, 306, 315, 398, 450, 453, 553, 554, 843, 844, 977, 1018, 1020, 1023, 1024], "short": [4, 5, 120, 126, 189, 256, 296, 343, 372, 380, 401, 405, 409, 963, 964, 970, 1014, 1019, 1020, 1021, 1022, 1023, 1024], "easier": [4, 44, 62, 66, 82, 120, 177, 183, 229, 255, 256, 300, 330, 343, 354, 367, 372, 374, 377, 380, 383, 388, 399, 401, 454, 501, 882, 915, 962, 967, 974, 983, 988, 991, 1002, 1018, 1023], "specifi": [4, 55, 95, 120, 121, 151, 154, 156, 157, 158, 159, 187, 199, 206, 243, 266, 358, 359, 366, 370, 372, 374, 381, 384, 385, 391, 397, 398, 401, 402, 404, 406, 407, 409, 411, 423, 427, 431, 436, 438, 449, 450, 453, 455, 456, 458, 459, 460, 461, 462, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 489, 501, 517, 519, 523, 524, 526, 527, 532, 533, 538, 543, 545, 546, 547, 548, 550, 553, 554, 569, 570, 579, 580, 583, 588, 596, 597, 606, 617, 618, 619, 624, 629, 632, 633, 634, 637, 638, 639, 641, 642, 644, 645, 646, 647, 648, 649, 651, 654, 655, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 673, 677, 684, 685, 686, 688, 695, 697, 714, 715, 723, 739, 756, 764, 765, 768, 769, 772, 782, 784, 785, 786, 788, 789, 791, 795, 796, 799, 804, 805, 806, 807, 808, 809, 811, 815, 818, 819, 820, 822, 823, 824, 825, 829, 857, 858, 859, 862, 863, 880, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 916, 923, 951, 957, 963, 964, 966, 967, 970, 974, 975, 977, 980, 981, 982, 997, 1001, 1009, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1025], "next": [4, 7, 25, 60, 80, 119, 120, 124, 133, 157, 167, 171, 191, 195, 198, 228, 235, 239, 240, 245, 253, 264, 276, 305, 306, 307, 312, 319, 343, 348, 352, 354, 361, 370, 372, 374, 376, 394, 397, 398, 401, 404, 494, 495, 596, 620, 678, 684, 686, 688, 766, 780, 781, 810, 933, 956, 960, 966, 967, 977, 991, 1006, 1009, 1022, 1023], "verbose_feature_names_out": [4, 120, 168, 169, 170, 240, 306, 313, 314, 315, 398, 450, 453, 1022], "categorical_featur": [4, 71, 120, 169, 306, 312, 313, 314, 315, 377, 404, 547, 548, 618, 619, 974, 1017, 1021, 1024], "random_st": [4, 5, 6, 7, 10, 12, 14, 19, 20, 21, 24, 25, 26, 27, 30, 31, 38, 42, 43, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 70, 71, 75, 82, 86, 92, 95, 97, 100, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 136, 143, 144, 146, 150, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 179, 180, 184, 190, 197, 198, 201, 202, 204, 205, 206, 210, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 232, 234, 235, 236, 237, 239, 240, 243, 245, 246, 249, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 276, 278, 282, 286, 287, 288, 294, 295, 296, 297, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 321, 328, 330, 331, 332, 338, 339, 343, 344, 348, 352, 354, 374, 377, 381, 384, 385, 393, 397, 398, 401, 402, 404, 405, 409, 420, 423, 424, 426, 429, 433, 435, 437, 438, 439, 440, 444, 445, 446, 448, 455, 460, 474, 477, 478, 481, 483, 489, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 569, 570, 579, 580, 593, 594, 596, 597, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 618, 619, 620, 621, 624, 625, 626, 627, 628, 632, 633, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 660, 662, 663, 664, 665, 673, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 720, 773, 776, 780, 781, 784, 785, 786, 787, 788, 794, 796, 797, 798, 799, 800, 801, 802, 808, 809, 810, 812, 814, 815, 816, 817, 818, 829, 833, 840, 841, 842, 844, 849, 861, 865, 873, 876, 877, 884, 885, 886, 889, 892, 893, 894, 895, 897, 898, 920, 921, 936, 938, 941, 956, 957, 959, 962, 967, 968, 969, 970, 971, 974, 975, 977, 982, 983, 993, 997, 998, 1002, 1006, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "set_output": [4, 120, 165, 169, 226, 241, 305, 306, 375, 419, 428, 429, 431, 433, 435, 450, 454, 468, 469, 470, 471, 482, 490, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 552, 553, 554, 555, 556, 567, 568, 569, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 644, 674, 675, 678, 810, 828, 833, 836, 840, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 882, 1024], "across": [4, 55, 61, 67, 85, 116, 136, 168, 187, 192, 220, 253, 255, 258, 278, 300, 305, 373, 374, 381, 385, 391, 396, 397, 401, 405, 409, 423, 426, 436, 438, 440, 443, 446, 448, 455, 458, 460, 474, 477, 478, 481, 483, 489, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 553, 554, 574, 577, 580, 588, 593, 594, 596, 597, 618, 619, 620, 625, 626, 627, 628, 632, 633, 636, 638, 639, 640, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 662, 664, 665, 671, 672, 675, 676, 677, 678, 679, 680, 681, 690, 691, 703, 716, 742, 773, 776, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 794, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 829, 833, 840, 841, 842, 849, 853, 854, 861, 862, 864, 865, 873, 876, 877, 879, 880, 884, 885, 886, 889, 892, 893, 920, 921, 938, 941, 956, 963, 965, 967, 977, 981, 983, 988, 991, 1002, 1009, 1012, 1015, 1016, 1017, 1018, 1019], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 56, 58, 61, 70, 75, 92, 95, 97, 98, 101, 103, 105, 113, 115, 120, 121, 122, 123, 130, 153, 156, 158, 159, 163, 178, 186, 187, 190, 195, 198, 199, 206, 207, 208, 216, 219, 220, 234, 236, 243, 244, 245, 246, 248, 249, 253, 256, 257, 258, 259, 261, 266, 269, 272, 278, 283, 285, 288, 291, 295, 297, 300, 302, 305, 306, 310, 322, 326, 330, 340, 343, 344, 345, 358, 367, 372, 374, 378, 379, 383, 398, 401, 405, 409, 494, 519, 583, 596, 597, 766, 857, 911, 916, 928, 967, 974, 982, 998], "cv_result": [4, 71, 116, 256, 257, 259, 261, 796, 807, 967], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 58, 60, 70, 71, 72, 73, 74, 75, 78, 82, 86, 103, 109, 112, 119, 120, 122, 123, 126, 129, 130, 137, 138, 143, 144, 147, 162, 165, 167, 168, 169, 170, 171, 174, 182, 189, 190, 193, 198, 200, 204, 206, 214, 216, 227, 232, 233, 236, 240, 247, 251, 256, 258, 259, 260, 261, 262, 263, 266, 267, 269, 270, 271, 272, 273, 274, 276, 285, 286, 287, 294, 295, 296, 297, 302, 305, 306, 307, 310, 311, 312, 313, 318, 319, 321, 322, 330, 338, 343, 344, 348, 354, 367, 372, 374, 377, 384, 385, 391, 392, 394, 395, 396, 398, 400, 402, 404, 406, 414, 416, 418, 423, 429, 433, 435, 438, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 488, 490, 518, 522, 527, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 578, 579, 580, 581, 582, 584, 585, 586, 588, 589, 590, 592, 595, 596, 597, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 684, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 721, 722, 723, 724, 725, 727, 740, 741, 742, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 785, 786, 788, 796, 801, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 829, 830, 831, 833, 834, 835, 840, 841, 842, 844, 864, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 923, 956, 959, 963, 965, 970, 973, 975, 977, 981, 988, 996, 998, 1000, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "neg_mean_absolute_error": [4, 130, 200, 967], "neg_root_mean_squared_error": [4, 306, 967], "mae": [4, 130, 198, 200, 544, 551, 730, 893, 895, 967, 983, 1016, 1017, 1021, 1022], "test_neg_mean_absolute_error": [4, 200], "rmse": [4, 81, 306, 735, 1020], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 58, 60, 61, 63, 67, 70, 71, 73, 74, 75, 80, 85, 86, 92, 95, 98, 103, 104, 106, 113, 116, 117, 118, 119, 120, 122, 124, 136, 138, 143, 144, 146, 147, 150, 151, 153, 155, 159, 167, 169, 170, 171, 174, 182, 183, 184, 185, 189, 190, 193, 194, 198, 200, 201, 205, 206, 213, 214, 216, 220, 221, 224, 229, 231, 233, 236, 240, 246, 252, 256, 257, 258, 259, 261, 263, 266, 267, 271, 278, 282, 289, 291, 295, 296, 297, 302, 305, 307, 310, 311, 312, 314, 318, 319, 322, 330, 343, 344, 345, 348, 352, 354, 358, 366, 367, 370, 373, 374, 380, 385, 391, 398, 401, 404, 405, 407, 450, 453, 454, 458, 464, 488, 498, 527, 530, 535, 536, 545, 546, 547, 548, 550, 551, 555, 556, 563, 569, 570, 574, 575, 577, 598, 603, 616, 632, 633, 635, 636, 638, 639, 640, 642, 646, 647, 648, 649, 652, 653, 662, 663, 670, 699, 703, 722, 778, 780, 781, 783, 784, 787, 789, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 813, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 841, 842, 843, 844, 845, 846, 854, 860, 864, 872, 882, 883, 884, 885, 886, 889, 897, 908, 928, 935, 957, 967, 968, 969, 970, 975, 983, 993, 997, 998, 1000, 1001, 1002, 1009, 1011, 1017, 1018, 1020, 1024], "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 58, 71, 73, 75, 86, 117, 118, 143, 147, 150, 151, 152, 154, 159, 167, 169, 170, 178, 182, 184, 190, 198, 200, 204, 213, 214, 216, 220, 231, 233, 256, 258, 259, 261, 264, 266, 269, 278, 294, 322, 343, 344, 345, 975, 998], "std": [4, 11, 12, 37, 46, 50, 54, 61, 66, 79, 81, 82, 96, 97, 98, 117, 119, 120, 130, 137, 159, 162, 163, 168, 178, 183, 207, 231, 256, 257, 258, 260, 261, 263, 266, 268, 272, 273, 306, 321, 333, 344, 354, 385, 397, 401, 404, 501, 592, 595, 864, 875, 977, 1001, 1017, 1021], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 34, 37, 39, 40, 58, 70, 75, 80, 85, 92, 95, 98, 100, 103, 105, 106, 112, 113, 117, 121, 132, 142, 147, 150, 154, 159, 169, 178, 182, 194, 198, 199, 213, 215, 216, 219, 230, 231, 232, 234, 243, 245, 246, 256, 258, 261, 263, 264, 265, 267, 268, 278, 283, 297, 302, 304, 305, 312, 315, 319, 338, 352, 358, 366, 369, 370, 372, 376, 378, 381, 385, 388, 394, 395, 397, 400, 401, 402, 403, 404, 405, 407, 408, 430, 431, 433, 434, 436, 455, 457, 460, 464, 475, 501, 502, 503, 504, 509, 514, 524, 526, 527, 533, 543, 544, 545, 546, 549, 550, 551, 552, 574, 575, 576, 577, 593, 594, 600, 613, 635, 657, 665, 678, 682, 685, 692, 693, 740, 787, 790, 792, 797, 798, 801, 820, 824, 825, 829, 849, 876, 878, 892, 893, 894, 895, 919, 924, 925, 942, 946, 947, 956, 959, 961, 963, 964, 967, 968, 969, 970, 971, 973, 974, 977, 979, 981, 982, 983, 993, 1000, 1002, 1009, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "044": [4, 256, 736, 967], "003": 4, "068": [4, 193, 217, 258], "005": [4, 258, 262, 266, 283, 300, 344, 378], "quit": [4, 53, 57, 86, 113, 136, 147, 168, 169, 196, 216, 266, 313, 343, 358, 377, 384, 397, 405, 962, 964, 969, 991, 1017], "good": [4, 9, 25, 27, 40, 44, 46, 49, 52, 53, 55, 58, 74, 81, 86, 105, 116, 119, 122, 123, 151, 155, 162, 168, 182, 187, 198, 199, 204, 213, 224, 227, 231, 236, 244, 246, 252, 258, 264, 273, 297, 305, 306, 312, 318, 323, 330, 343, 344, 354, 358, 359, 360, 371, 373, 374, 375, 378, 383, 385, 391, 394, 395, 397, 399, 401, 402, 404, 405, 406, 407, 423, 425, 430, 520, 545, 547, 548, 576, 616, 626, 633, 634, 642, 644, 645, 647, 655, 666, 676, 680, 708, 716, 727, 749, 809, 878, 921, 956, 962, 963, 964, 967, 968, 970, 971, 972, 974, 975, 977, 981, 982, 983, 988, 991, 993, 997, 1000, 1002, 1015], "trial": [4, 263, 433, 435, 446, 657, 780, 781, 963, 1015], "without": [4, 5, 13, 24, 36, 42, 55, 56, 67, 68, 75, 100, 116, 122, 125, 127, 130, 143, 147, 157, 165, 167, 168, 169, 182, 187, 206, 227, 231, 234, 237, 239, 252, 259, 263, 265, 279, 292, 300, 301, 305, 307, 310, 338, 344, 360, 367, 368, 370, 372, 373, 374, 376, 377, 378, 381, 383, 384, 385, 391, 397, 398, 402, 404, 405, 406, 407, 420, 425, 427, 432, 444, 455, 460, 482, 490, 501, 518, 520, 541, 542, 549, 565, 566, 597, 613, 617, 620, 625, 645, 678, 686, 766, 785, 786, 787, 794, 796, 809, 810, 826, 833, 837, 843, 844, 847, 850, 853, 854, 856, 860, 861, 862, 864, 869, 884, 900, 935, 936, 956, 957, 961, 963, 964, 967, 970, 973, 977, 981, 982, 983, 987, 988, 993, 994, 1002, 1006, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025], "tune": [4, 44, 55, 71, 100, 116, 146, 150, 162, 169, 187, 203, 215, 223, 252, 263, 280, 301, 330, 343, 354, 358, 359, 360, 384, 385, 392, 396, 397, 401, 404, 406, 407, 438, 448, 545, 546, 580, 599, 600, 601, 603, 605, 606, 608, 609, 611, 629, 645, 676, 680, 840, 961, 962, 963, 964, 966, 967, 970, 971, 973, 981, 994, 1004, 1009, 1023, 1025], "just": [4, 31, 70, 86, 95, 116, 120, 147, 188, 195, 220, 232, 258, 265, 269, 278, 294, 330, 343, 344, 354, 367, 371, 372, 373, 374, 376, 377, 380, 383, 384, 385, 394, 397, 398, 401, 404, 406, 407, 409, 454, 519, 521, 528, 532, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 565, 570, 596, 597, 632, 638, 643, 644, 646, 648, 652, 653, 654, 662, 663, 664, 833, 841, 842, 956, 963, 966, 967, 968, 971, 975, 977, 981, 988, 1000, 1009, 1013, 1015, 1017, 1021], "had": [4, 9, 47, 123, 155, 300, 306, 313, 354, 372, 373, 405, 408, 430, 957, 967, 991, 993, 1009, 1010, 1016, 1017, 1018, 1019, 1020, 1024], "explicit": [4, 165, 169, 174, 226, 241, 358, 359, 360, 371, 373, 383, 385, 386, 398, 405, 411, 458, 485, 487, 488, 527, 537, 538, 624, 625, 627, 662, 782, 783, 790, 828, 836, 844, 884, 889, 931, 935, 959, 961, 963, 967, 977, 983, 987, 1009, 1013, 1018, 1019, 1022], "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 56, 60, 65, 66, 70, 71, 86, 95, 97, 100, 109, 110, 111, 126, 142, 147, 150, 162, 163, 168, 169, 170, 174, 177, 182, 193, 199, 200, 216, 231, 237, 256, 258, 259, 261, 267, 280, 300, 305, 307, 313, 322, 330, 345, 352, 358, 360, 367, 370, 372, 373, 374, 375, 376, 380, 383, 385, 386, 387, 391, 395, 396, 397, 398, 401, 402, 404, 405, 407, 430, 433, 435, 436, 443, 450, 453, 479, 480, 494, 532, 553, 554, 555, 556, 593, 594, 602, 606, 607, 610, 618, 625, 650, 678, 753, 756, 759, 763, 764, 765, 766, 774, 782, 796, 803, 809, 848, 858, 862, 864, 865, 874, 875, 881, 892, 893, 933, 956, 957, 963, 966, 967, 968, 970, 971, 972, 977, 982, 983, 986, 987, 990, 991, 993, 1000, 1001, 1002, 1009, 1010, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "But": [4, 9, 53, 167, 199, 200, 258, 278, 300, 372, 383, 397, 400, 403, 404, 448, 731, 892, 893, 956, 967, 982, 988], "much": [4, 6, 7, 9, 19, 25, 39, 40, 55, 80, 82, 92, 98, 105, 115, 123, 124, 130, 131, 132, 150, 162, 163, 168, 169, 170, 171, 174, 195, 196, 200, 231, 258, 260, 261, 264, 269, 296, 301, 305, 306, 312, 313, 315, 330, 335, 343, 344, 354, 358, 360, 367, 372, 373, 374, 377, 380, 383, 384, 388, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 433, 434, 482, 520, 521, 522, 524, 545, 546, 547, 548, 644, 645, 652, 654, 662, 663, 664, 678, 764, 765, 785, 786, 800, 859, 877, 884, 956, 959, 962, 963, 964, 966, 967, 968, 970, 971, 973, 975, 979, 980, 982, 983, 988, 991, 997, 998, 1000, 1001, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "monoton": [4, 25, 108, 134, 165, 169, 216, 230, 311, 395, 547, 548, 618, 621, 622, 680, 692, 860, 872, 886, 889, 964, 968, 977, 982, 1016, 1020, 1024], "relationship": [4, 111, 156, 167, 168, 177, 182, 198, 200, 201, 265, 301, 307, 385, 397, 399, 401, 407, 448, 622, 700, 964, 967, 969, 970, 974, 975, 1000, 1014], "case": [4, 7, 8, 25, 27, 37, 49, 52, 55, 57, 61, 66, 71, 72, 81, 86, 100, 103, 113, 115, 116, 123, 124, 130, 144, 146, 147, 150, 157, 168, 169, 182, 184, 187, 189, 198, 199, 200, 203, 206, 212, 214, 215, 216, 227, 231, 232, 233, 237, 248, 252, 255, 257, 258, 259, 261, 264, 265, 267, 278, 285, 296, 300, 302, 305, 307, 310, 313, 343, 344, 345, 352, 354, 358, 359, 360, 366, 367, 370, 372, 373, 374, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 423, 426, 429, 430, 432, 433, 437, 439, 449, 450, 453, 460, 482, 494, 495, 501, 525, 527, 528, 529, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 567, 568, 574, 577, 579, 580, 583, 588, 592, 595, 596, 597, 611, 613, 614, 616, 618, 633, 634, 639, 642, 643, 644, 645, 647, 649, 652, 654, 655, 658, 660, 661, 662, 666, 668, 669, 670, 671, 672, 673, 685, 689, 694, 695, 698, 704, 706, 707, 708, 711, 713, 714, 719, 720, 723, 727, 728, 730, 731, 733, 735, 738, 739, 741, 748, 763, 766, 768, 770, 773, 774, 777, 779, 781, 782, 785, 786, 788, 796, 800, 804, 805, 806, 807, 808, 809, 811, 813, 821, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 844, 851, 853, 854, 857, 858, 859, 862, 863, 864, 865, 868, 874, 875, 876, 877, 884, 886, 889, 892, 893, 899, 900, 910, 921, 922, 935, 956, 957, 959, 961, 962, 964, 965, 966, 968, 969, 970, 971, 973, 974, 977, 981, 982, 983, 987, 988, 990, 991, 993, 1002, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "usual": [4, 40, 78, 79, 81, 122, 123, 125, 130, 167, 169, 184, 198, 199, 252, 255, 258, 267, 268, 301, 313, 330, 354, 358, 359, 370, 372, 374, 380, 383, 384, 385, 394, 397, 398, 401, 402, 404, 405, 406, 436, 442, 524, 526, 528, 533, 545, 546, 593, 594, 616, 626, 644, 645, 652, 654, 662, 663, 664, 678, 711, 743, 788, 808, 812, 884, 921, 956, 957, 959, 962, 963, 964, 966, 967, 968, 971, 972, 973, 974, 977, 981, 982, 983, 993, 999, 1000, 1024], "hot": [4, 71, 115, 118, 130, 168, 198, 267, 301, 302, 306, 312, 330, 385, 404, 405, 537, 552, 567, 634, 644, 645, 655, 666, 847, 849, 851, 852, 855, 857, 858, 865, 963, 977, 1017, 1023, 1024], "For": [4, 8, 9, 12, 13, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 55, 57, 58, 60, 67, 73, 80, 86, 91, 96, 113, 115, 116, 118, 123, 124, 126, 128, 143, 144, 147, 150, 152, 157, 162, 163, 168, 169, 182, 186, 187, 198, 199, 202, 203, 206, 215, 216, 219, 221, 224, 227, 228, 230, 231, 232, 240, 248, 255, 258, 259, 265, 273, 276, 278, 288, 294, 296, 297, 302, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 321, 323, 330, 332, 338, 343, 344, 345, 348, 349, 352, 354, 358, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 391, 393, 394, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 408, 413, 418, 423, 426, 428, 429, 430, 431, 432, 433, 435, 436, 437, 440, 442, 443, 444, 446, 447, 448, 450, 451, 452, 454, 458, 460, 468, 469, 470, 471, 475, 482, 484, 489, 500, 501, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 567, 569, 570, 571, 572, 574, 575, 577, 578, 579, 580, 583, 588, 593, 594, 595, 596, 597, 600, 605, 608, 609, 613, 614, 615, 616, 617, 618, 619, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 673, 674, 675, 678, 679, 681, 685, 687, 690, 692, 693, 714, 715, 723, 726, 727, 748, 754, 763, 768, 769, 772, 773, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 796, 804, 805, 806, 807, 808, 809, 811, 813, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 850, 853, 854, 856, 857, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 904, 910, 930, 951, 956, 957, 959, 960, 961, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 981, 982, 983, 986, 990, 991, 993, 1000, 1001, 1002, 1009, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "consist": [4, 7, 26, 32, 37, 56, 57, 70, 80, 90, 92, 95, 116, 120, 126, 133, 147, 153, 155, 158, 163, 198, 216, 233, 264, 267, 296, 305, 310, 313, 338, 344, 354, 358, 365, 367, 369, 372, 374, 378, 379, 380, 381, 384, 385, 386, 395, 397, 399, 403, 404, 405, 407, 415, 416, 418, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 476, 483, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 577, 597, 613, 614, 615, 616, 621, 624, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 660, 663, 664, 665, 673, 674, 675, 676, 677, 686, 720, 780, 781, 789, 812, 813, 814, 816, 817, 818, 819, 827, 828, 830, 832, 835, 836, 842, 847, 848, 849, 851, 855, 856, 859, 860, 862, 863, 865, 876, 877, 880, 884, 885, 887, 888, 890, 893, 895, 904, 906, 927, 938, 941, 956, 959, 960, 961, 963, 964, 966, 967, 968, 970, 971, 977, 980, 982, 983, 986, 987, 988, 991, 993, 1000, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "scale": [4, 5, 12, 25, 27, 37, 40, 43, 46, 47, 56, 58, 61, 71, 72, 79, 82, 86, 97, 100, 101, 127, 147, 150, 151, 152, 155, 156, 157, 159, 165, 169, 174, 178, 179, 186, 198, 200, 212, 213, 214, 216, 218, 221, 225, 227, 233, 248, 255, 258, 259, 260, 265, 295, 296, 297, 299, 300, 308, 311, 314, 323, 325, 327, 330, 341, 354, 357, 358, 364, 365, 366, 369, 372, 377, 381, 383, 384, 385, 396, 397, 398, 402, 404, 406, 407, 432, 433, 436, 437, 443, 450, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 487, 496, 500, 501, 510, 520, 524, 526, 527, 533, 535, 536, 547, 548, 568, 576, 577, 583, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 617, 618, 627, 630, 631, 632, 633, 635, 638, 644, 645, 646, 647, 648, 658, 660, 662, 663, 664, 667, 673, 674, 675, 676, 678, 680, 685, 689, 702, 726, 732, 742, 744, 754, 760, 762, 788, 796, 799, 810, 811, 812, 824, 825, 826, 841, 842, 845, 848, 853, 854, 856, 859, 861, 862, 864, 869, 870, 871, 873, 874, 876, 877, 884, 885, 886, 887, 888, 889, 890, 943, 944, 945, 956, 959, 960, 963, 967, 968, 969, 970, 971, 975, 981, 982, 988, 991, 993, 1000, 1001, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "same": [4, 7, 8, 16, 26, 34, 37, 40, 44, 53, 55, 57, 58, 64, 70, 71, 72, 92, 95, 97, 100, 103, 105, 111, 113, 117, 120, 121, 123, 124, 128, 147, 150, 168, 169, 171, 184, 186, 187, 192, 198, 199, 200, 206, 216, 236, 237, 248, 253, 254, 255, 256, 258, 259, 261, 263, 264, 266, 271, 278, 283, 296, 300, 301, 303, 305, 306, 310, 312, 321, 330, 338, 343, 344, 345, 352, 354, 358, 359, 360, 366, 367, 369, 371, 372, 374, 376, 378, 381, 383, 384, 385, 386, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 417, 420, 424, 425, 432, 436, 442, 451, 455, 456, 457, 458, 459, 460, 461, 462, 464, 479, 481, 482, 484, 490, 494, 495, 517, 518, 521, 522, 523, 524, 525, 526, 529, 533, 535, 537, 538, 539, 540, 543, 545, 546, 547, 548, 550, 551, 553, 554, 575, 576, 588, 589, 592, 596, 597, 599, 608, 613, 614, 615, 618, 619, 632, 635, 638, 639, 641, 644, 645, 649, 652, 653, 654, 658, 659, 660, 661, 662, 663, 664, 670, 673, 685, 690, 691, 698, 699, 701, 703, 711, 716, 717, 721, 740, 741, 742, 763, 764, 765, 771, 773, 775, 777, 778, 780, 781, 782, 783, 785, 786, 788, 790, 791, 796, 800, 801, 805, 806, 807, 808, 809, 810, 811, 826, 827, 828, 832, 834, 835, 836, 847, 848, 849, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 873, 884, 885, 892, 894, 906, 910, 921, 933, 938, 941, 942, 952, 956, 957, 959, 961, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 977, 981, 982, 983, 988, 997, 1002, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "minmaxscal": [4, 5, 72, 143, 174, 220, 295, 312, 360, 398, 450, 870, 957, 977, 1011, 1014, 1017, 1019, 1020, 1021, 1025], "although": [4, 9, 25, 117, 130, 167, 195, 216, 227, 245, 276, 354, 360, 374, 385, 397, 398, 402, 405, 482, 799, 802, 855, 966, 968, 969, 970, 973, 983, 993, 1000, 1001, 1002, 1009, 1017, 1024], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 40, 46, 53, 55, 57, 70, 72, 73, 86, 106, 115, 116, 119, 125, 130, 147, 156, 168, 169, 182, 195, 198, 204, 216, 219, 220, 221, 224, 227, 230, 231, 232, 234, 245, 246, 253, 258, 260, 261, 265, 267, 268, 276, 278, 291, 300, 302, 304, 306, 307, 313, 314, 321, 322, 328, 330, 338, 340, 343, 344, 345, 358, 366, 370, 372, 373, 374, 376, 380, 384, 385, 391, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 420, 426, 428, 432, 433, 435, 436, 440, 442, 453, 459, 465, 473, 485, 489, 494, 513, 521, 523, 524, 525, 527, 530, 532, 535, 536, 543, 544, 545, 546, 547, 548, 550, 551, 567, 568, 569, 574, 575, 577, 579, 580, 583, 588, 592, 596, 618, 624, 635, 636, 637, 640, 641, 642, 645, 657, 668, 669, 684, 686, 688, 693, 713, 714, 715, 719, 721, 723, 728, 731, 763, 768, 769, 772, 773, 777, 782, 785, 786, 796, 841, 845, 846, 847, 849, 851, 853, 856, 857, 858, 861, 864, 865, 873, 876, 877, 881, 884, 885, 892, 893, 894, 895, 899, 904, 908, 921, 924, 925, 933, 935, 951, 956, 957, 959, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 973, 975, 977, 981, 982, 983, 1002, 1009, 1010, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 32, 37, 40, 42, 43, 44, 45, 46, 48, 53, 54, 55, 60, 62, 66, 71, 73, 75, 81, 86, 95, 98, 100, 102, 106, 113, 114, 115, 117, 120, 123, 124, 126, 128, 129, 139, 146, 147, 150, 152, 154, 158, 162, 168, 169, 170, 171, 178, 183, 184, 187, 188, 193, 199, 200, 202, 206, 212, 213, 216, 219, 220, 223, 227, 230, 232, 237, 243, 248, 249, 252, 253, 256, 258, 259, 261, 264, 265, 266, 267, 269, 270, 273, 278, 280, 284, 294, 295, 296, 300, 301, 302, 305, 310, 312, 314, 315, 318, 321, 323, 330, 334, 335, 338, 343, 345, 350, 351, 358, 359, 360, 366, 367, 369, 372, 374, 376, 377, 378, 380, 383, 384, 385, 386, 391, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 420, 426, 427, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 443, 445, 448, 450, 453, 455, 456, 457, 458, 459, 460, 461, 462, 465, 475, 494, 495, 497, 499, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 565, 566, 567, 568, 570, 574, 575, 577, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 616, 617, 618, 620, 622, 626, 629, 638, 639, 644, 650, 651, 652, 653, 662, 663, 664, 672, 675, 676, 677, 678, 679, 680, 681, 694, 696, 698, 703, 710, 711, 713, 714, 715, 716, 717, 721, 722, 723, 739, 741, 742, 749, 756, 759, 763, 764, 765, 766, 768, 769, 770, 772, 776, 777, 780, 781, 782, 784, 785, 786, 787, 792, 796, 797, 798, 799, 801, 802, 805, 811, 812, 813, 815, 816, 817, 818, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 848, 849, 857, 858, 861, 862, 865, 873, 877, 881, 884, 886, 889, 892, 893, 894, 895, 896, 897, 904, 905, 920, 921, 923, 927, 932, 938, 941, 957, 959, 961, 963, 964, 966, 967, 968, 970, 971, 972, 973, 974, 975, 977, 979, 981, 982, 983, 987, 988, 990, 993, 997, 998, 1000, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 71, 82, 86, 115, 118, 123, 147, 151, 154, 157, 168, 169, 171, 178, 184, 191, 198, 204, 206, 216, 233, 244, 255, 258, 259, 264, 276, 278, 295, 296, 297, 300, 304, 305, 306, 307, 320, 330, 338, 343, 344, 345, 348, 354, 358, 359, 367, 374, 377, 380, 383, 384, 385, 391, 394, 395, 397, 401, 402, 403, 404, 405, 407, 410, 418, 433, 434, 447, 451, 461, 468, 469, 470, 520, 522, 538, 540, 542, 544, 546, 548, 551, 554, 556, 574, 577, 593, 594, 597, 618, 619, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 658, 659, 662, 663, 664, 665, 666, 675, 685, 695, 698, 699, 707, 708, 709, 731, 748, 770, 773, 777, 782, 796, 808, 812, 817, 818, 827, 830, 832, 834, 835, 836, 842, 853, 854, 862, 864, 865, 869, 870, 872, 873, 874, 875, 885, 887, 890, 893, 895, 931, 957, 959, 960, 961, 962, 963, 964, 965, 967, 968, 970, 972, 974, 977, 982, 983, 991, 1001, 1015, 1016, 1018, 1019, 1020, 1021, 1023, 1025], "compar": [4, 5, 19, 24, 25, 27, 36, 37, 43, 49, 54, 55, 57, 58, 64, 68, 72, 81, 84, 86, 87, 98, 103, 105, 108, 110, 111, 113, 119, 120, 123, 128, 130, 134, 147, 154, 162, 163, 165, 168, 170, 171, 176, 180, 182, 186, 187, 193, 195, 198, 201, 204, 206, 208, 215, 216, 217, 219, 220, 223, 226, 229, 232, 237, 239, 241, 245, 246, 251, 253, 255, 263, 265, 267, 269, 274, 279, 283, 287, 288, 292, 293, 298, 299, 301, 305, 308, 312, 343, 344, 345, 352, 354, 360, 367, 369, 372, 374, 394, 395, 397, 399, 400, 401, 402, 404, 406, 407, 426, 427, 428, 430, 431, 432, 434, 435, 436, 438, 444, 449, 450, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 476, 482, 488, 490, 498, 500, 508, 510, 514, 517, 523, 537, 538, 547, 548, 549, 550, 551, 557, 617, 625, 630, 631, 639, 641, 643, 644, 649, 652, 654, 662, 663, 670, 681, 691, 698, 701, 716, 723, 728, 771, 781, 782, 787, 796, 807, 810, 817, 826, 830, 833, 837, 841, 844, 845, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 865, 870, 873, 886, 888, 889, 956, 959, 960, 961, 963, 964, 966, 967, 968, 969, 970, 971, 973, 977, 978, 981, 982, 983, 986, 987, 1000, 1001, 1009, 1011, 1016, 1017, 1022], "onehotencod": [4, 71, 115, 120, 130, 168, 169, 198, 216, 229, 238, 240, 306, 311, 313, 366, 385, 398, 404, 452, 453, 552, 567, 568, 847, 851, 852, 855, 858, 865, 977, 1010, 1013, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 71, 73, 75, 86, 115, 130, 132, 133, 136, 138, 146, 147, 150, 162, 165, 167, 168, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 227, 228, 229, 230, 235, 238, 240, 254, 261, 266, 267, 271, 272, 276, 297, 301, 302, 305, 307, 310, 311, 312, 313, 314, 322, 343, 354, 358, 360, 361, 371, 372, 374, 378, 380, 381, 384, 385, 398, 404, 424, 451, 523, 525, 528, 529, 531, 532, 534, 553, 554, 555, 556, 583, 617, 618, 620, 621, 624, 626, 627, 628, 629, 686, 687, 773, 796, 805, 806, 807, 815, 816, 817, 818, 842, 859, 863, 884, 885, 888, 891, 916, 959, 962, 963, 967, 968, 973, 975, 977, 981, 997, 998, 1000, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "ridgecv": [4, 75, 130, 147, 168, 235, 385, 404, 554, 629, 658, 661, 963, 1009, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 139, 142, 143, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 224, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 297, 300, 301, 302, 303, 304, 305, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 349, 350, 351, 352, 354, 358, 365, 366, 367, 370, 372, 373, 374, 375, 376, 378, 380, 381, 383, 384, 385, 388, 390, 391, 393, 394, 397, 398, 401, 402, 403, 404, 405, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 446, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 471, 476, 479, 480, 482, 489, 492, 494, 495, 517, 520, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 555, 556, 567, 568, 574, 575, 577, 613, 614, 615, 616, 617, 618, 619, 629, 632, 633, 635, 638, 639, 643, 644, 645, 646, 647, 648, 649, 652, 654, 656, 658, 662, 663, 664, 670, 674, 677, 678, 679, 681, 685, 688, 689, 692, 693, 695, 698, 700, 711, 712, 714, 715, 719, 720, 723, 724, 739, 741, 758, 764, 766, 767, 768, 769, 772, 773, 774, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 810, 812, 813, 816, 817, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 847, 848, 851, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 884, 886, 887, 889, 890, 892, 907, 919, 921, 925, 926, 927, 929, 930, 936, 938, 941, 954, 956, 957, 962, 963, 965, 967, 968, 970, 973, 977, 979, 982, 983, 986, 988, 990, 993, 996, 997, 998, 1000, 1001, 1002, 1009, 1012, 1013, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 139, 142, 143, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 224, 227, 230, 231, 232, 233, 234, 235, 236, 238, 243, 244, 245, 246, 247, 248, 249, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 297, 300, 301, 302, 303, 304, 305, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 349, 350, 351, 352, 354, 358, 366, 367, 372, 374, 377, 378, 381, 383, 385, 394, 397, 398, 401, 402, 403, 404, 405, 407, 410, 412, 415, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 446, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 471, 482, 483, 494, 495, 506, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 543, 544, 545, 546, 547, 549, 550, 551, 552, 555, 556, 567, 568, 571, 572, 574, 575, 579, 580, 583, 592, 595, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 654, 656, 657, 658, 660, 661, 662, 663, 664, 667, 668, 669, 670, 677, 678, 681, 688, 689, 692, 693, 695, 698, 699, 700, 701, 711, 712, 714, 715, 719, 720, 723, 724, 726, 739, 741, 748, 754, 758, 763, 766, 767, 768, 769, 772, 773, 774, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 810, 811, 812, 813, 816, 817, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 834, 835, 836, 840, 841, 848, 849, 851, 857, 858, 859, 860, 861, 863, 864, 865, 872, 873, 876, 877, 879, 880, 881, 884, 886, 887, 889, 890, 892, 893, 894, 895, 902, 904, 905, 907, 909, 910, 919, 921, 926, 929, 930, 932, 936, 938, 941, 943, 944, 945, 956, 957, 962, 963, 965, 967, 968, 970, 971, 973, 977, 978, 979, 981, 982, 983, 993, 997, 998, 1000, 1001, 1002, 1010, 1012, 1015, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "one_hot_encod": [4, 120], "handle_unknown": [4, 71, 115, 120, 130, 169, 170, 229, 238, 240, 306, 311, 314, 857, 858, 977, 1013, 1017, 1021, 1022], "ignor": [4, 6, 8, 17, 44, 49, 55, 62, 71, 112, 115, 120, 127, 130, 169, 186, 190, 198, 207, 213, 229, 238, 240, 249, 295, 296, 305, 306, 311, 314, 335, 344, 349, 372, 374, 376, 378, 385, 388, 397, 398, 404, 405, 415, 416, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 446, 447, 450, 453, 455, 456, 457, 458, 459, 460, 461, 462, 469, 470, 474, 489, 494, 495, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 537, 543, 544, 545, 546, 549, 550, 551, 552, 565, 567, 568, 569, 574, 575, 576, 577, 588, 589, 597, 613, 614, 615, 616, 618, 619, 621, 625, 629, 635, 636, 637, 640, 641, 642, 644, 650, 651, 662, 663, 664, 674, 675, 676, 677, 678, 693, 699, 700, 711, 714, 715, 723, 740, 741, 748, 754, 759, 763, 768, 769, 772, 773, 780, 781, 783, 784, 785, 787, 789, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 828, 829, 830, 832, 833, 836, 843, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 876, 877, 884, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 918, 942, 963, 964, 967, 969, 973, 977, 982, 998, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "sparse_output": [4, 120, 240, 306, 314, 552, 851, 855, 857, 868, 977, 1024], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 37, 40, 42, 45, 52, 56, 60, 65, 75, 82, 86, 95, 97, 98, 100, 101, 102, 104, 105, 110, 112, 113, 119, 123, 126, 127, 129, 130, 131, 147, 150, 153, 155, 156, 157, 158, 159, 162, 163, 168, 177, 178, 179, 180, 182, 183, 184, 186, 187, 192, 193, 195, 196, 198, 199, 200, 202, 203, 207, 210, 211, 216, 219, 220, 223, 232, 233, 239, 243, 258, 259, 260, 261, 262, 265, 266, 268, 270, 271, 273, 276, 278, 281, 283, 286, 288, 294, 296, 300, 301, 302, 303, 305, 307, 311, 313, 314, 320, 322, 327, 328, 331, 332, 335, 339, 340, 343, 358, 367, 374, 378, 383, 399, 400, 402, 404, 406, 407, 409, 432, 457, 458, 464, 513, 517, 519, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 546, 581, 582, 584, 597, 599, 601, 602, 609, 617, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 673, 708, 733, 819, 820, 821, 823, 841, 842, 880, 892, 893, 894, 895, 956, 962, 963, 967, 969, 971, 975, 980, 981, 982, 983, 997, 1000, 1002, 1006, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1021, 1022, 1023, 1024, 1025], "logspac": [4, 12, 73, 78, 103, 136, 137, 147, 151, 156, 168, 191, 202, 203, 231, 233, 247, 259, 271, 273, 282, 294, 302, 305, 330, 338, 962, 963, 997, 998, 1000], "naive_linear_pipelin": 4, "142": [4, 58, 404], "014": [4, 58, 344, 378], "184": [4, 198, 297, 378, 1000], "020": [4, 344, 975], "three": [4, 7, 26, 40, 41, 46, 55, 58, 78, 90, 91, 110, 115, 117, 120, 122, 131, 132, 133, 144, 158, 168, 182, 190, 195, 198, 200, 207, 209, 233, 243, 246, 306, 307, 311, 334, 359, 365, 369, 376, 388, 394, 397, 401, 402, 403, 405, 437, 448, 484, 695, 923, 960, 962, 963, 964, 967, 970, 977, 981, 982, 986, 993, 1001, 1009], "higher": [4, 57, 80, 98, 103, 113, 115, 116, 123, 126, 150, 152, 157, 158, 168, 169, 170, 174, 198, 199, 216, 223, 224, 249, 252, 256, 258, 261, 272, 283, 305, 330, 343, 344, 345, 354, 358, 367, 370, 374, 394, 397, 399, 404, 406, 407, 408, 430, 434, 435, 457, 464, 495, 518, 525, 529, 534, 539, 540, 543, 544, 545, 546, 547, 548, 550, 551, 552, 559, 574, 577, 593, 594, 605, 613, 617, 621, 623, 632, 633, 638, 639, 646, 647, 648, 649, 662, 664, 665, 690, 709, 713, 737, 770, 780, 782, 785, 786, 788, 796, 803, 808, 811, 830, 833, 859, 876, 877, 878, 886, 887, 888, 889, 890, 897, 959, 963, 964, 966, 967, 970, 974, 977, 981, 982, 1000, 1002, 1010, 1015, 1017, 1024], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 30, 46, 47, 48, 51, 56, 58, 74, 75, 95, 97, 98, 105, 128, 143, 144, 150, 152, 154, 155, 162, 163, 169, 174, 186, 187, 219, 220, 221, 223, 224, 231, 232, 233, 249, 255, 261, 286, 297, 301, 305, 319, 336, 343, 345, 354, 367, 369, 371, 372, 374, 376, 377, 383, 385, 391, 394, 397, 398, 401, 402, 404, 405, 407, 408, 409, 410, 420, 427, 429, 430, 431, 432, 433, 436, 445, 449, 450, 451, 461, 468, 469, 470, 479, 480, 481, 487, 505, 517, 520, 521, 523, 524, 525, 526, 527, 529, 530, 539, 540, 541, 542, 545, 547, 548, 549, 551, 553, 554, 555, 556, 559, 562, 567, 570, 580, 593, 594, 600, 616, 618, 624, 627, 628, 629, 635, 657, 678, 682, 687, 713, 748, 754, 809, 830, 844, 848, 849, 852, 853, 857, 858, 860, 861, 862, 864, 873, 876, 877, 878, 881, 886, 889, 902, 904, 905, 909, 910, 938, 941, 960, 961, 963, 964, 966, 967, 970, 973, 978, 979, 980, 981, 984, 987, 991, 993, 1002, 1012, 1013, 1015, 1017, 1019, 1021, 1023, 1025], "mere": [4, 258, 385, 811, 981], "min": [4, 9, 10, 11, 12, 13, 25, 27, 31, 52, 58, 75, 90, 95, 98, 112, 119, 122, 123, 128, 139, 152, 154, 155, 156, 163, 168, 180, 186, 187, 193, 200, 201, 204, 212, 220, 231, 232, 234, 276, 284, 285, 291, 294, 296, 300, 302, 303, 305, 323, 329, 336, 339, 381, 397, 400, 402, 468, 469, 470, 471, 498, 520, 521, 524, 526, 527, 535, 536, 549, 613, 617, 618, 640, 641, 642, 643, 668, 669, 690, 726, 742, 765, 785, 786, 833, 841, 842, 854, 863, 870, 921, 932, 963, 967, 970, 977, 1015, 1018, 1020, 1021, 1024], "properli": [4, 25, 55, 127, 155, 253, 310, 360, 370, 372, 376, 380, 388, 403, 884, 885, 886, 887, 888, 889, 890, 956, 1012, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "automat": [4, 8, 12, 46, 63, 65, 71, 103, 136, 146, 177, 201, 243, 244, 256, 259, 300, 307, 311, 315, 322, 332, 359, 361, 367, 370, 372, 374, 376, 380, 385, 388, 393, 397, 398, 399, 402, 404, 405, 406, 419, 436, 438, 442, 448, 450, 451, 453, 482, 485, 501, 527, 535, 537, 543, 547, 550, 569, 574, 577, 580, 588, 629, 631, 632, 633, 638, 639, 644, 645, 646, 647, 648, 649, 652, 653, 654, 658, 660, 661, 662, 664, 667, 670, 673, 674, 677, 681, 784, 799, 802, 810, 820, 841, 842, 845, 846, 848, 857, 858, 865, 876, 877, 884, 885, 886, 889, 892, 894, 898, 910, 938, 941, 956, 958, 961, 966, 971, 977, 981, 983, 987, 988, 997, 1009, 1012, 1013, 1014, 1020, 1023, 1024, 1025], "term": [4, 13, 14, 25, 32, 58, 100, 113, 116, 120, 123, 155, 167, 182, 186, 187, 198, 200, 202, 212, 215, 216, 256, 260, 278, 294, 313, 338, 343, 345, 360, 361, 372, 374, 376, 383, 391, 395, 396, 397, 399, 401, 402, 404, 407, 429, 433, 435, 438, 445, 448, 510, 521, 524, 526, 530, 533, 535, 574, 575, 576, 577, 590, 593, 594, 618, 619, 626, 628, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 660, 661, 662, 664, 666, 673, 681, 841, 842, 859, 863, 866, 884, 885, 886, 887, 888, 889, 890, 956, 958, 961, 962, 963, 964, 967, 968, 969, 971, 972, 977, 981, 982, 993, 1002, 1017, 1023, 1024, 1025], "raw": [4, 12, 14, 37, 81, 97, 130, 155, 168, 174, 297, 307, 320, 345, 358, 367, 380, 385, 395, 396, 397, 399, 402, 405, 455, 460, 487, 488, 489, 545, 546, 547, 549, 568, 574, 575, 576, 577, 620, 663, 676, 680, 691, 771, 830, 888, 964, 967, 971, 973, 974, 977, 980, 999, 1001, 1010, 1014, 1017, 1020], "recogn": [4, 29, 35, 86, 118, 165, 199, 313, 378, 397, 405, 488, 683, 699, 810, 889, 967, 993], "increas": [4, 7, 14, 26, 37, 43, 55, 57, 58, 61, 75, 98, 111, 113, 116, 119, 127, 143, 150, 154, 155, 156, 159, 168, 169, 174, 178, 180, 189, 198, 199, 200, 202, 216, 224, 231, 244, 245, 258, 259, 260, 265, 271, 294, 301, 302, 305, 312, 319, 330, 338, 344, 345, 348, 358, 359, 360, 371, 380, 381, 395, 397, 399, 402, 404, 405, 408, 426, 430, 432, 438, 449, 457, 458, 464, 518, 522, 539, 540, 545, 546, 547, 548, 553, 554, 574, 577, 613, 621, 622, 623, 631, 636, 637, 640, 641, 642, 644, 645, 652, 654, 662, 663, 664, 668, 669, 671, 672, 678, 692, 693, 698, 767, 774, 785, 786, 813, 832, 834, 835, 836, 839, 841, 842, 858, 884, 885, 921, 956, 958, 962, 963, 964, 966, 967, 970, 977, 981, 982, 983, 991, 1009, 1011, 1014, 1018, 1020, 1021, 1024], "strong": [4, 165, 167, 168, 176, 191, 195, 202, 204, 217, 233, 307, 396, 402, 404, 407, 510, 635, 658, 960, 961, 963, 964, 966, 974, 982, 1000], "similar": [4, 5, 7, 12, 17, 25, 26, 37, 49, 51, 57, 60, 75, 86, 95, 99, 123, 146, 150, 157, 167, 168, 169, 170, 182, 198, 200, 212, 219, 221, 222, 223, 227, 233, 249, 255, 258, 261, 264, 265, 266, 276, 278, 300, 313, 329, 338, 344, 345, 354, 358, 364, 366, 368, 370, 371, 372, 374, 377, 378, 381, 383, 385, 391, 394, 395, 397, 400, 401, 402, 404, 405, 406, 407, 408, 426, 427, 429, 430, 431, 436, 438, 440, 441, 489, 494, 495, 522, 568, 575, 576, 577, 596, 663, 678, 681, 689, 691, 701, 705, 710, 713, 714, 716, 719, 723, 725, 740, 745, 746, 771, 775, 776, 779, 780, 781, 806, 811, 856, 877, 880, 884, 885, 886, 887, 905, 956, 959, 960, 962, 963, 964, 966, 968, 970, 971, 973, 974, 977, 979, 980, 981, 982, 983, 987, 988, 993, 1001, 1004, 1009, 1013, 1014, 1015, 1017, 1021, 1022], "magnitud": [4, 105, 112, 151, 163, 168, 215, 263, 300, 305, 313, 358, 367, 378, 397, 404, 407, 599, 638, 690, 864, 963, 967, 971, 977, 981, 983, 1011, 1018], "discret": [4, 46, 105, 108, 134, 149, 160, 165, 169, 198, 216, 299, 303, 308, 360, 364, 367, 368, 376, 384, 385, 397, 402, 404, 405, 407, 424, 425, 434, 438, 446, 447, 448, 478, 500, 501, 506, 508, 539, 545, 557, 574, 575, 578, 581, 582, 585, 586, 593, 594, 596, 597, 598, 602, 603, 604, 643, 644, 727, 779, 782, 793, 810, 819, 820, 823, 845, 849, 857, 858, 861, 864, 873, 884, 889, 892, 893, 930, 956, 963, 964, 965, 967, 968, 970, 983, 987, 993, 1004, 1011, 1014, 1022, 1023, 1024], "manner": [4, 75, 95, 144, 169, 174, 245, 314, 315, 359, 372, 378, 397, 402, 404, 405, 695, 824, 825, 956, 967, 983, 1012, 1019], "uniqu": [4, 16, 24, 30, 42, 47, 48, 57, 58, 63, 67, 117, 118, 124, 125, 168, 170, 182, 213, 216, 245, 267, 287, 306, 307, 321, 343, 344, 345, 366, 374, 381, 385, 397, 398, 401, 404, 405, 426, 436, 440, 442, 450, 453, 482, 535, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 550, 551, 552, 596, 619, 620, 621, 652, 654, 662, 683, 695, 739, 767, 782, 784, 796, 807, 812, 813, 816, 822, 831, 836, 841, 855, 857, 858, 865, 868, 884, 886, 892, 893, 894, 895, 909, 921, 930, 931, 963, 968, 977, 991, 1000, 1017, 1020, 1021, 1023, 1024, 1025], "decid": [4, 11, 57, 60, 71, 249, 255, 258, 265, 367, 372, 386, 405, 407, 436, 443, 545, 546, 597, 621, 632, 633, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 657, 667, 670, 780, 826, 827, 828, 830, 832, 834, 835, 836, 847, 966, 973, 991, 1022, 1025], "therebi": [4, 168, 401, 404, 959, 1019], "assumpt": [4, 9, 25, 27, 36, 68, 78, 79, 98, 155, 165, 167, 198, 227, 300, 378, 383, 384, 387, 395, 396, 397, 399, 401, 402, 405, 407, 433, 437, 439, 474, 489, 498, 518, 520, 527, 636, 640, 781, 782, 785, 786, 796, 821, 876, 877, 961, 963, 967, 968, 969, 970, 972, 973, 974, 977, 980, 983, 1016, 1022], "impli": [4, 150, 343, 344, 345, 402, 404, 407, 460, 559, 568, 596, 597, 608, 720, 908, 963, 964, 1002, 1020], "give": [4, 12, 13, 24, 25, 39, 44, 49, 60, 62, 64, 70, 71, 75, 97, 122, 150, 155, 159, 162, 168, 169, 187, 189, 195, 198, 199, 200, 227, 249, 255, 260, 267, 280, 284, 287, 297, 313, 314, 322, 358, 360, 367, 369, 371, 372, 374, 378, 380, 383, 384, 385, 386, 391, 394, 395, 396, 397, 398, 399, 402, 404, 405, 409, 420, 432, 433, 435, 437, 445, 458, 482, 485, 489, 519, 524, 535, 536, 537, 538, 543, 544, 550, 551, 552, 579, 580, 583, 593, 594, 624, 633, 647, 651, 662, 706, 715, 721, 724, 777, 782, 785, 786, 796, 805, 806, 807, 809, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 861, 862, 864, 865, 873, 963, 967, 970, 971, 972, 974, 975, 977, 981, 982, 983, 987, 991, 993, 995, 1000, 1001, 1002, 1009, 1013, 1016, 1017, 1019, 1020, 1021, 1023, 1025], "lot": [4, 82, 168, 367, 372, 373, 374, 380, 402, 404, 785, 786, 876, 877, 956, 979, 981, 982, 987, 988, 991, 1001, 1002, 1009, 1014, 1016, 1017, 1018, 1019, 1021], "addit": [4, 5, 7, 12, 13, 14, 66, 71, 82, 95, 98, 110, 114, 116, 117, 120, 121, 146, 155, 156, 157, 163, 168, 169, 177, 182, 187, 199, 200, 223, 237, 260, 267, 272, 276, 300, 311, 312, 320, 345, 350, 354, 358, 359, 364, 365, 366, 367, 368, 370, 371, 372, 374, 377, 378, 380, 383, 384, 386, 388, 391, 396, 397, 399, 401, 402, 405, 406, 407, 408, 419, 427, 428, 430, 431, 432, 436, 443, 455, 460, 482, 489, 518, 520, 522, 523, 525, 527, 528, 529, 535, 539, 540, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 568, 569, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 597, 598, 605, 614, 616, 617, 621, 624, 625, 626, 627, 628, 629, 630, 631, 656, 673, 674, 678, 684, 685, 688, 727, 743, 744, 773, 775, 780, 781, 788, 813, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 861, 862, 863, 864, 866, 876, 877, 884, 885, 915, 921, 935, 956, 961, 963, 967, 968, 970, 971, 974, 977, 979, 980, 981, 982, 983, 987, 993, 1004, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "level": [4, 9, 11, 12, 16, 27, 41, 53, 95, 115, 119, 139, 147, 149, 154, 155, 157, 160, 165, 168, 169, 209, 210, 211, 212, 213, 216, 227, 231, 232, 247, 258, 261, 267, 268, 284, 291, 328, 329, 331, 332, 334, 336, 344, 352, 358, 367, 369, 370, 372, 378, 385, 387, 388, 395, 402, 405, 411, 440, 454, 479, 480, 489, 507, 517, 522, 523, 533, 547, 548, 553, 554, 597, 608, 611, 652, 653, 654, 662, 663, 664, 673, 676, 678, 680, 686, 688, 702, 708, 713, 770, 805, 806, 807, 809, 812, 813, 840, 841, 842, 882, 897, 956, 963, 967, 968, 970, 975, 981, 983, 987, 988, 1002, 1012, 1020, 1023, 1024, 1025], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": [4, 184, 201, 217], "011": [4, 266, 278, 344, 378], "131": [4, 13, 56, 110, 378, 967, 1010], "rate": [4, 109, 114, 120, 142, 169, 198, 205, 216, 231, 236, 255, 258, 265, 267, 268, 295, 296, 297, 360, 372, 397, 398, 402, 406, 432, 452, 522, 539, 540, 545, 546, 547, 548, 578, 581, 582, 584, 585, 586, 592, 630, 631, 654, 662, 663, 664, 678, 684, 688, 712, 767, 774, 840, 841, 842, 878, 956, 963, 964, 967, 970, 971, 981, 983, 991, 1013, 1017, 1018], "better": [4, 5, 9, 19, 24, 31, 50, 55, 74, 75, 78, 79, 80, 81, 86, 90, 95, 98, 113, 116, 122, 123, 130, 142, 154, 155, 156, 158, 159, 162, 170, 178, 182, 184, 187, 198, 199, 200, 206, 213, 215, 216, 223, 232, 233, 248, 252, 258, 260, 261, 264, 267, 268, 297, 304, 305, 314, 315, 330, 343, 344, 345, 348, 354, 358, 367, 371, 372, 373, 374, 376, 377, 378, 380, 385, 387, 391, 395, 397, 399, 401, 402, 403, 404, 405, 407, 435, 436, 524, 526, 533, 545, 546, 547, 548, 593, 594, 616, 657, 663, 678, 695, 710, 719, 724, 727, 748, 781, 809, 819, 820, 821, 822, 823, 824, 825, 830, 841, 842, 861, 862, 865, 873, 876, 877, 884, 885, 935, 956, 957, 959, 960, 961, 963, 964, 966, 967, 969, 970, 971, 975, 977, 980, 981, 983, 988, 990, 991, 995, 997, 1002, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "confirm": [4, 86, 113, 120, 123, 170, 198, 200, 261, 264, 267, 305, 345, 376, 956, 977, 1017], "progress": [4, 7, 8, 95, 133, 147, 163, 191, 283, 314, 369, 372, 376, 377, 386, 388, 393, 397, 545, 546, 678, 813, 815, 818, 833, 841, 842, 991, 1000, 1002, 1009, 1011, 1018, 1023], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 60, 62, 80, 81, 82, 85, 92, 98, 101, 123, 128, 136, 155, 162, 168, 169, 170, 187, 198, 199, 200, 203, 206, 216, 223, 227, 233, 243, 260, 261, 264, 265, 267, 268, 273, 278, 296, 300, 313, 318, 321, 330, 340, 343, 345, 354, 358, 367, 371, 372, 374, 377, 378, 380, 383, 384, 385, 391, 395, 397, 399, 401, 402, 403, 404, 405, 406, 407, 428, 433, 438, 448, 457, 458, 464, 486, 490, 496, 543, 544, 547, 548, 550, 551, 553, 554, 575, 576, 608, 636, 637, 640, 641, 642, 650, 668, 669, 671, 677, 678, 681, 691, 728, 731, 775, 780, 782, 790, 792, 796, 799, 802, 824, 825, 849, 853, 854, 855, 864, 876, 877, 886, 889, 892, 893, 894, 895, 921, 956, 959, 960, 962, 963, 964, 965, 966, 967, 970, 971, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 1000, 1001, 1009, 1014, 1015, 1017, 1020, 1022, 1024, 1025], "new": [4, 7, 8, 10, 50, 56, 58, 60, 70, 71, 103, 109, 112, 114, 115, 116, 123, 129, 130, 144, 147, 150, 156, 163, 170, 171, 198, 204, 212, 227, 257, 260, 265, 282, 284, 306, 311, 314, 319, 322, 329, 344, 354, 359, 360, 366, 367, 369, 370, 371, 374, 375, 376, 378, 380, 381, 384, 385, 386, 388, 395, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 486, 487, 488, 490, 491, 494, 495, 496, 498, 509, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 560, 567, 568, 569, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 690, 694, 699, 700, 704, 707, 708, 709, 710, 712, 713, 714, 715, 716, 719, 724, 725, 726, 728, 731, 738, 739, 742, 746, 751, 752, 754, 763, 767, 768, 769, 770, 772, 773, 774, 780, 781, 782, 785, 786, 788, 795, 796, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 902, 904, 905, 907, 915, 916, 920, 921, 930, 933, 935, 937, 942, 948, 954, 956, 957, 959, 963, 967, 968, 970, 971, 972, 973, 977, 979, 980, 981, 982, 988, 991, 993, 994, 997, 1000, 1002, 1007, 1011, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 367, 372, 964, 986], "1440": 4, "caus": [4, 25, 27, 123, 151, 168, 196, 198, 203, 216, 307, 345, 354, 370, 377, 395, 397, 402, 403, 405, 407, 429, 433, 435, 445, 495, 518, 568, 575, 596, 597, 819, 820, 821, 823, 848, 857, 859, 862, 863, 904, 905, 956, 957, 963, 967, 975, 977, 980, 988, 993, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025], "signific": [4, 55, 116, 123, 143, 165, 216, 251, 258, 274, 276, 278, 343, 354, 366, 367, 383, 397, 400, 401, 404, 490, 518, 520, 535, 536, 613, 644, 645, 652, 654, 662, 663, 664, 801, 809, 884, 886, 887, 888, 889, 890, 966, 967, 970, 1009, 1011, 1012, 1013, 1017], "overfit": [4, 115, 123, 165, 169, 170, 177, 227, 245, 251, 253, 259, 263, 273, 274, 294, 301, 302, 304, 305, 306, 307, 330, 348, 350, 351, 367, 385, 395, 401, 404, 423, 474, 475, 553, 554, 643, 782, 785, 786, 796, 806, 807, 841, 842, 844, 859, 863, 962, 971, 973, 975, 977, 983, 991, 1000, 1012], "avoid": [4, 7, 12, 44, 57, 62, 72, 115, 116, 168, 169, 200, 207, 216, 222, 253, 259, 263, 281, 286, 288, 289, 304, 305, 326, 327, 344, 359, 370, 372, 373, 374, 376, 377, 378, 385, 386, 388, 391, 395, 397, 399, 401, 404, 405, 408, 426, 428, 430, 438, 448, 454, 479, 480, 481, 485, 494, 495, 520, 525, 529, 532, 571, 572, 620, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 675, 677, 679, 681, 698, 775, 782, 783, 787, 793, 796, 805, 806, 807, 844, 847, 853, 854, 856, 861, 862, 863, 864, 867, 869, 870, 871, 873, 874, 875, 877, 882, 921, 961, 964, 966, 967, 970, 971, 973, 975, 977, 982, 983, 988, 1002, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "kbinsdiscret": [4, 53, 165, 198, 216, 299, 302, 307, 308, 315, 498, 643, 847, 863, 893, 977, 1017, 1021, 1022, 1023, 1025], "re": [4, 8, 13, 26, 56, 70, 71, 120, 153, 167, 216, 244, 248, 261, 263, 267, 311, 343, 345, 359, 372, 373, 376, 380, 384, 386, 395, 401, 405, 455, 456, 457, 458, 459, 460, 461, 462, 541, 542, 547, 548, 549, 632, 638, 646, 648, 784, 799, 802, 892, 893, 894, 895, 963, 968, 970, 977, 982, 988, 991, 1002, 1009, 1013, 1014, 1016, 1018], "fine": [4, 37, 119, 214, 249, 256, 350, 351, 369, 376, 385, 405, 432, 921, 970, 973, 988, 1019], "grain": [4, 31, 37, 232, 249, 302, 378, 405, 432, 988], "still": [4, 32, 44, 53, 55, 57, 62, 82, 99, 118, 120, 123, 130, 150, 156, 167, 168, 170, 177, 182, 198, 200, 216, 232, 261, 267, 300, 312, 313, 343, 344, 354, 360, 366, 371, 372, 374, 376, 377, 378, 380, 383, 385, 397, 401, 404, 405, 408, 426, 430, 440, 460, 482, 613, 618, 621, 623, 703, 741, 763, 766, 775, 776, 785, 786, 799, 802, 862, 864, 884, 902, 956, 957, 961, 963, 966, 970, 973, 975, 982, 983, 986, 988, 991, 1009, 1011, 1014, 1015, 1017, 1018, 1019, 1022, 1023, 1024, 1025], "express": [4, 7, 12, 116, 150, 155, 168, 258, 259, 306, 312, 327, 345, 366, 367, 372, 373, 378, 397, 402, 405, 436, 442, 443, 574, 575, 577, 702, 782, 788, 796, 805, 806, 807, 808, 811, 831, 963, 967, 971, 977, 978, 983, 1017], "advantag": [4, 5, 39, 55, 57, 95, 100, 198, 199, 227, 244, 259, 314, 354, 385, 395, 401, 402, 405, 407, 427, 431, 446, 520, 575, 635, 660, 661, 748, 812, 813, 814, 844, 845, 884, 885, 886, 887, 888, 889, 890, 956, 959, 962, 963, 964, 967, 968, 970, 971, 977, 981, 982, 983, 1012], "final": [4, 26, 40, 42, 55, 70, 71, 80, 82, 86, 91, 100, 109, 111, 113, 115, 120, 121, 124, 130, 133, 144, 155, 163, 167, 169, 174, 177, 182, 186, 187, 195, 198, 200, 215, 216, 220, 227, 240, 247, 256, 264, 278, 306, 307, 310, 311, 330, 358, 360, 370, 372, 373, 376, 384, 385, 394, 395, 397, 398, 401, 404, 405, 423, 428, 433, 434, 438, 445, 448, 450, 522, 541, 542, 553, 554, 556, 613, 633, 639, 645, 665, 676, 680, 705, 782, 812, 813, 844, 845, 881, 884, 956, 957, 963, 964, 967, 970, 973, 974, 977, 980, 991, 1000, 1014, 1017, 1018, 1019, 1020, 1022], "observ": [4, 5, 7, 9, 11, 13, 16, 24, 27, 37, 40, 43, 53, 62, 71, 78, 80, 81, 82, 96, 97, 100, 103, 109, 113, 114, 116, 117, 123, 126, 129, 138, 139, 147, 150, 153, 155, 156, 157, 159, 168, 169, 170, 177, 178, 193, 194, 196, 198, 199, 200, 202, 212, 216, 223, 224, 230, 231, 254, 258, 260, 261, 265, 278, 284, 291, 305, 321, 329, 330, 335, 338, 343, 344, 345, 350, 351, 367, 369, 385, 388, 395, 397, 398, 399, 400, 401, 402, 403, 406, 407, 427, 429, 431, 432, 433, 435, 445, 446, 455, 456, 457, 458, 459, 460, 461, 462, 510, 518, 537, 538, 549, 596, 597, 632, 638, 643, 687, 702, 704, 743, 803, 822, 830, 863, 865, 963, 966, 967, 971, 972, 973, 974, 977, 980, 981, 982, 983, 990, 994, 996, 997, 999, 1010, 1022, 1023, 1024, 1025], "complet": [4, 37, 38, 39, 44, 49, 52, 58, 62, 86, 128, 142, 144, 147, 165, 170, 171, 204, 226, 227, 241, 256, 305, 307, 310, 344, 354, 367, 372, 376, 377, 380, 383, 398, 401, 402, 404, 405, 427, 431, 435, 438, 448, 449, 450, 453, 481, 522, 523, 524, 525, 530, 532, 544, 555, 556, 567, 573, 574, 575, 577, 613, 614, 615, 616, 631, 635, 643, 657, 659, 690, 691, 701, 702, 703, 716, 721, 722, 742, 771, 778, 812, 815, 818, 827, 843, 844, 845, 846, 907, 952, 956, 961, 963, 967, 968, 970, 977, 982, 983, 993, 1002, 1009, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "induct": [4, 36, 68, 123, 165, 385, 397, 404, 411, 427, 498, 550, 613, 617, 879, 880, 928, 951, 963, 980, 1011], "bia": [4, 27, 78, 108, 117, 118, 123, 134, 165, 168, 170, 177, 178, 180, 202, 263, 294, 338, 354, 367, 374, 385, 395, 399, 403, 404, 407, 510, 542, 545, 546, 593, 594, 600, 628, 634, 635, 644, 645, 655, 656, 666, 841, 842, 857, 859, 863, 869, 870, 872, 873, 874, 875, 893, 962, 963, 966, 967, 971, 972, 975, 981, 1000], "preserv": [4, 48, 100, 223, 231, 253, 374, 375, 396, 401, 402, 405, 567, 574, 575, 577, 632, 638, 682, 685, 759, 763, 800, 801, 802, 868, 904, 905, 957, 963, 964, 977, 979, 997, 1009, 1012, 1013, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025], "smooth": [4, 46, 47, 54, 155, 191, 199, 214, 306, 330, 369, 386, 397, 403, 407, 434, 435, 523, 524, 525, 532, 543, 544, 545, 546, 550, 551, 552, 576, 577, 605, 608, 662, 819, 820, 821, 823, 861, 865, 873, 892, 893, 894, 895, 963, 969, 977, 981, 982, 983, 1002], "local": [4, 39, 57, 61, 95, 98, 116, 127, 155, 156, 165, 169, 199, 218, 221, 223, 225, 227, 236, 279, 292, 350, 351, 359, 369, 370, 372, 376, 378, 380, 388, 397, 402, 404, 405, 407, 433, 438, 448, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 488, 524, 526, 530, 533, 535, 545, 546, 549, 552, 596, 597, 674, 675, 676, 677, 678, 679, 681, 682, 743, 744, 827, 830, 833, 835, 845, 854, 877, 880, 888, 933, 965, 966, 970, 971, 983, 1001, 1003, 1004, 1013, 1017, 1021, 1024], "attempt": [4, 54, 169, 194, 204, 253, 343, 358, 371, 385, 397, 409, 432, 436, 443, 454, 617, 674, 675, 679, 800, 826, 827, 828, 830, 832, 834, 835, 836, 862, 864, 882, 904, 905, 963, 964, 970, 983, 993, 1016, 1021], "each": [4, 7, 8, 10, 11, 12, 14, 17, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 55, 58, 60, 61, 70, 71, 73, 74, 75, 85, 86, 89, 91, 92, 95, 96, 100, 103, 104, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 143, 145, 147, 152, 154, 159, 162, 163, 167, 168, 169, 171, 174, 177, 184, 185, 187, 192, 196, 198, 199, 200, 202, 203, 206, 213, 216, 220, 227, 228, 231, 232, 233, 234, 237, 238, 240, 243, 246, 248, 252, 253, 254, 256, 258, 259, 261, 263, 264, 267, 268, 276, 278, 281, 283, 287, 289, 291, 294, 295, 297, 300, 301, 302, 303, 305, 306, 307, 310, 312, 313, 314, 318, 319, 320, 323, 330, 336, 338, 344, 345, 348, 349, 352, 354, 358, 359, 360, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 378, 380, 381, 383, 384, 385, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 414, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 505, 508, 509, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 693, 694, 696, 699, 705, 710, 713, 714, 715, 723, 724, 730, 731, 733, 735, 736, 738, 739, 743, 744, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 759, 761, 763, 764, 765, 766, 768, 769, 770, 772, 773, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 910, 915, 916, 921, 923, 924, 935, 943, 944, 945, 948, 957, 959, 961, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 991, 993, 997, 999, 1000, 1001, 1002, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "sine": [4, 150, 155, 156, 165, 192, 204, 242, 250, 350, 368, 601, 780, 781, 966, 983], "cosin": [4, 40, 272, 278, 283, 364, 367, 385, 397, 402, 403, 427, 431, 436, 443, 521, 576, 577, 606, 682, 745, 746, 747, 750, 755, 756, 759, 763, 764, 765, 824, 825, 829, 856, 970, 983, 1004, 1019], "match": [4, 37, 45, 95, 98, 102, 116, 165, 174, 176, 198, 217, 221, 230, 345, 367, 370, 374, 376, 397, 402, 404, 405, 417, 435, 450, 452, 494, 495, 501, 512, 517, 523, 528, 534, 537, 553, 554, 558, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 644, 650, 651, 671, 672, 685, 689, 690, 691, 699, 701, 705, 719, 763, 764, 765, 771, 824, 825, 829, 833, 847, 848, 849, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 884, 891, 897, 908, 935, 964, 966, 967, 969, 970, 989, 993, 1002, 1004, 1009, 1015, 1016, 1017, 1019, 1021, 1022, 1025], "togeth": [4, 12, 51, 60, 71, 119, 130, 150, 156, 168, 179, 220, 223, 254, 306, 314, 333, 349, 354, 374, 376, 383, 384, 385, 391, 397, 404, 405, 412, 437, 439, 553, 554, 675, 701, 782, 796, 844, 845, 858, 963, 964, 968, 974, 977, 983, 984, 991, 994, 996, 1015], "equival": [4, 14, 55, 57, 120, 126, 146, 150, 155, 168, 182, 216, 248, 267, 278, 305, 345, 354, 358, 370, 378, 381, 384, 385, 397, 398, 399, 400, 401, 402, 404, 406, 407, 427, 429, 430, 431, 432, 433, 435, 436, 443, 455, 460, 495, 520, 527, 544, 547, 548, 549, 551, 574, 577, 599, 602, 605, 607, 610, 632, 633, 634, 638, 640, 644, 645, 652, 653, 654, 655, 658, 662, 663, 666, 669, 673, 674, 679, 694, 695, 708, 719, 726, 732, 733, 734, 746, 755, 764, 765, 780, 781, 785, 786, 790, 792, 815, 818, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 841, 847, 853, 854, 856, 859, 860, 861, 862, 864, 872, 874, 875, 908, 919, 953, 956, 961, 963, 964, 965, 967, 973, 977, 981, 982, 983, 1017, 1018, 1019, 1020, 1022, 1023], "importantli": [4, 13, 96, 169, 174, 300, 397], "jump": [4, 199, 300, 369, 372, 405, 863], "functiontransform": [4, 70, 115, 198, 216, 322, 451, 977, 1014, 1015, 1017, 1022, 1023, 1024], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 56, 61, 70, 75, 92, 101, 103, 105, 113, 115, 122, 123, 126, 130, 153, 156, 158, 163, 177, 178, 186, 187, 190, 198, 199, 206, 207, 208, 216, 236, 239, 240, 246, 248, 253, 254, 255, 256, 257, 258, 259, 261, 262, 265, 272, 278, 283, 288, 291, 297, 300, 302, 305, 310, 326, 330, 343, 345, 348, 352, 358, 365, 366, 367, 372, 373, 374, 378, 379, 381, 383, 385, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 933, 934, 936, 937, 938, 939, 940, 941, 942, 948, 951, 952, 953, 954, 955, 957, 967, 970, 974, 975, 982, 983, 988, 993, 998, 1000, 1002, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "lambda": [4, 7, 8, 10, 19, 56, 73, 122, 137, 178, 216, 258, 259, 304, 322, 393, 397, 402, 404, 405, 630, 631, 632, 633, 848, 860, 963, 977, 997, 1017, 1023], "sin": [4, 13, 19, 39, 96, 111, 122, 123, 127, 129, 142, 150, 156, 157, 159, 177, 178, 182, 192, 199, 204, 221, 233, 249, 290, 301, 311, 337, 350, 351, 407, 502, 601, 685, 749, 1001], "pi": [4, 13, 34, 39, 40, 96, 105, 127, 129, 142, 150, 178, 182, 186, 192, 199, 221, 243, 244, 245, 248, 249, 272, 291, 311, 351, 388, 403, 407, 502, 503, 504, 601, 628, 961, 962, 963, 969, 1001], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 127, 129, 155, 165, 168, 199, 221, 258, 272, 314, 351, 376, 403, 405, 435, 437, 439, 474, 497, 577, 685, 705, 749, 778, 962, 977, 991, 1003, 1004], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 57, 62, 69, 76, 86, 98, 100, 123, 125, 127, 146, 150, 151, 155, 157, 165, 166, 168, 169, 171, 172, 182, 198, 199, 200, 203, 204, 218, 223, 225, 240, 244, 248, 258, 259, 260, 263, 266, 267, 297, 299, 301, 308, 311, 317, 324, 330, 335, 338, 339, 340, 343, 344, 345, 354, 359, 370, 372, 374, 377, 383, 385, 395, 397, 398, 402, 403, 404, 405, 407, 408, 432, 436, 451, 464, 476, 482, 486, 500, 510, 511, 543, 544, 545, 546, 550, 551, 552, 574, 575, 576, 577, 592, 595, 635, 643, 644, 645, 659, 673, 677, 678, 687, 689, 738, 770, 780, 787, 793, 801, 810, 830, 841, 842, 848, 853, 854, 856, 860, 861, 862, 864, 865, 870, 873, 881, 884, 885, 889, 892, 893, 894, 895, 904, 905, 921, 933, 941, 956, 961, 963, 964, 966, 967, 968, 974, 977, 980, 982, 983, 998, 1000, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "expans": [4, 162, 312, 436, 859, 1018], "synthet": [4, 13, 25, 27, 31, 37, 42, 49, 117, 123, 128, 150, 155, 157, 169, 188, 200, 215, 294, 302, 338, 354, 358, 365, 375, 386, 397, 399, 406, 644, 645, 884, 885, 891, 961, 1000, 1015], "beyond": [4, 27, 199, 200, 358, 360, 371, 372, 383, 395, 404, 889, 964, 968, 977, 982, 988, 1017], "pd": [4, 12, 25, 71, 72, 73, 116, 117, 123, 127, 155, 162, 167, 168, 169, 170, 177, 182, 187, 198, 206, 216, 236, 237, 240, 248, 256, 258, 259, 261, 269, 270, 305, 306, 307, 313, 314, 338, 343, 344, 377, 385, 398, 450, 452, 613, 614, 615, 616, 618, 763, 902, 904, 905, 956, 957, 974, 977, 1020, 1022, 1023, 1024], "hour_df": 4, "datafram": [4, 25, 70, 71, 72, 73, 116, 120, 123, 127, 155, 162, 167, 168, 169, 170, 177, 182, 187, 206, 216, 237, 240, 248, 256, 258, 259, 261, 269, 270, 305, 306, 307, 313, 314, 315, 338, 343, 344, 366, 367, 372, 374, 377, 385, 398, 419, 428, 429, 431, 433, 435, 450, 452, 453, 454, 468, 469, 470, 471, 475, 476, 477, 478, 482, 486, 487, 488, 490, 491, 496, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 552, 553, 554, 555, 556, 567, 568, 569, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 674, 675, 678, 782, 785, 786, 796, 810, 828, 833, 836, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 882, 900, 927, 938, 941, 956, 957, 988, 1002, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "arang": [4, 11, 13, 16, 40, 58, 60, 65, 73, 79, 80, 103, 106, 109, 119, 120, 121, 122, 124, 125, 128, 132, 143, 150, 152, 157, 158, 162, 163, 171, 182, 198, 201, 203, 207, 222, 230, 232, 253, 258, 261, 266, 269, 276, 278, 291, 294, 302, 313, 318, 319, 321, 323, 330, 337, 343, 345, 350, 351, 352, 354, 383, 394, 401, 405, 451, 530, 810, 859, 863, 962, 963, 971, 977, 981, 998], "reshap": [4, 5, 6, 9, 13, 16, 24, 30, 32, 34, 46, 47, 48, 50, 51, 53, 54, 58, 72, 80, 85, 95, 98, 105, 113, 118, 119, 128, 139, 145, 150, 152, 153, 154, 155, 156, 157, 159, 177, 189, 195, 211, 212, 214, 215, 220, 222, 224, 227, 232, 235, 247, 256, 282, 284, 291, 294, 296, 297, 301, 302, 303, 307, 310, 313, 314, 323, 329, 330, 334, 335, 336, 339, 340, 383, 394, 402, 404, 405, 431, 451, 570, 617, 810, 859, 863, 963, 977, 983, 998, 1001, 1014], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 53, 58, 62, 90, 96, 99, 106, 128, 174, 189, 214, 216, 219, 220, 221, 222, 223, 224, 230, 231, 234, 236, 240, 278, 282, 295, 300, 301, 305, 306, 307, 310, 313, 315, 330, 343, 344, 345, 354, 364, 367, 374, 377, 378, 385, 393, 398, 402, 405, 406, 413, 419, 428, 429, 431, 433, 435, 450, 452, 454, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 674, 675, 676, 677, 678, 828, 833, 836, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 882, 957, 959, 963, 968, 970, 977, 978, 979, 993, 998, 1001, 1002, 1013, 1014, 1015, 1017, 1018, 1019, 1021, 1023, 1025], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 49, 53, 61, 62, 68, 94, 107, 128, 165, 192, 199, 204, 219, 221, 224, 227, 230, 231, 327, 330, 366, 368, 372, 374, 381, 385, 397, 398, 402, 405, 407, 427, 438, 448, 450, 453, 474, 476, 477, 478, 479, 480, 486, 487, 488, 490, 496, 500, 519, 527, 535, 570, 572, 621, 629, 643, 658, 677, 723, 764, 805, 809, 813, 851, 900, 904, 905, 920, 930, 953, 954, 961, 963, 964, 967, 974, 978, 983, 993, 999, 1009, 1013, 1016, 1017, 1018, 1021, 1023], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 56, 57, 58, 59, 60, 62, 67, 80, 86, 90, 91, 92, 97, 99, 100, 101, 102, 104, 111, 112, 116, 119, 126, 128, 129, 131, 139, 142, 150, 151, 152, 154, 156, 157, 158, 159, 167, 168, 174, 178, 181, 188, 190, 194, 195, 196, 199, 200, 201, 207, 210, 211, 212, 215, 219, 220, 221, 222, 223, 224, 227, 232, 233, 234, 243, 244, 245, 246, 247, 248, 249, 253, 259, 261, 272, 278, 284, 285, 286, 287, 288, 289, 290, 294, 300, 302, 303, 305, 314, 320, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 339, 340, 343, 349, 350, 351, 399, 617, 687, 961, 963, 1000], "color": [4, 7, 8, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 78, 79, 80, 81, 82, 86, 91, 92, 95, 96, 97, 99, 102, 103, 104, 105, 109, 111, 116, 119, 120, 121, 122, 125, 126, 127, 128, 130, 132, 136, 139, 150, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 168, 170, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 190, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 215, 216, 220, 221, 222, 224, 227, 231, 232, 233, 234, 237, 243, 244, 245, 246, 247, 248, 249, 253, 257, 259, 261, 262, 263, 264, 265, 267, 268, 269, 271, 273, 276, 280, 281, 283, 284, 285, 286, 289, 290, 291, 294, 300, 301, 302, 304, 305, 306, 311, 320, 321, 323, 328, 329, 330, 331, 332, 334, 336, 337, 339, 349, 350, 366, 367, 369, 380, 397, 404, 405, 433, 479, 480, 492, 569, 570, 764, 941, 981, 983, 1014, 1019, 1021], "map": [4, 5, 10, 11, 17, 19, 26, 53, 100, 114, 122, 125, 128, 137, 150, 165, 174, 198, 219, 221, 226, 241, 259, 262, 267, 281, 286, 289, 291, 299, 300, 308, 322, 330, 336, 344, 345, 366, 373, 383, 385, 395, 396, 397, 398, 401, 402, 404, 405, 411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 482, 484, 488, 495, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 747, 750, 780, 781, 782, 785, 786, 793, 794, 796, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 872, 873, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 926, 956, 959, 964, 967, 969, 979, 982, 983, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "space": [4, 8, 10, 19, 31, 46, 48, 53, 57, 58, 60, 61, 63, 65, 70, 71, 74, 86, 95, 97, 104, 106, 115, 119, 123, 128, 144, 150, 156, 174, 182, 199, 219, 220, 221, 223, 231, 232, 233, 236, 237, 244, 249, 266, 269, 270, 278, 287, 288, 302, 312, 343, 344, 345, 352, 354, 358, 364, 367, 368, 369, 372, 379, 383, 384, 385, 394, 396, 397, 400, 402, 403, 404, 405, 407, 429, 433, 434, 435, 438, 448, 450, 451, 452, 453, 468, 469, 470, 484, 518, 520, 521, 524, 525, 526, 527, 529, 530, 535, 559, 568, 574, 575, 577, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 624, 626, 627, 628, 629, 674, 675, 676, 678, 679, 680, 682, 685, 782, 785, 786, 796, 814, 824, 825, 832, 833, 834, 835, 844, 849, 850, 856, 861, 876, 877, 878, 897, 925, 959, 960, 961, 962, 963, 965, 967, 968, 970, 971, 972, 973, 977, 978, 979, 980, 981, 982, 983, 987, 988, 993, 1000, 1002, 1003, 1004, 1009, 1010, 1012, 1017, 1018, 1019, 1023, 1024], "akin": [4, 199, 385], "sort": [4, 8, 10, 12, 19, 20, 24, 60, 70, 113, 120, 123, 129, 147, 177, 182, 198, 199, 216, 235, 258, 259, 262, 272, 290, 337, 343, 350, 351, 372, 376, 380, 381, 385, 401, 404, 405, 407, 520, 527, 541, 552, 567, 596, 603, 683, 698, 704, 714, 715, 723, 739, 768, 769, 772, 774, 782, 807, 819, 820, 821, 822, 823, 824, 825, 832, 834, 835, 836, 839, 849, 855, 857, 858, 861, 863, 865, 873, 886, 889, 921, 926, 963, 970, 973, 977, 991, 1002, 1009, 1013, 1019, 1020, 1021, 1023, 1024], "analog": [4, 19, 125, 378, 404, 967, 968, 982, 1018], "clock": 4, "25th": [4, 862], "back": [4, 100, 238, 359, 372, 374, 386, 391, 398, 405, 420, 429, 432, 433, 445, 468, 469, 470, 494, 495, 519, 520, 521, 524, 526, 527, 530, 567, 616, 644, 645, 652, 654, 662, 663, 664, 713, 849, 851, 852, 853, 857, 858, 859, 861, 862, 864, 876, 877, 884, 963, 967, 971, 988, 993, 1002, 1012, 1017, 1019, 1020, 1023], "natur": [4, 31, 116, 123, 157, 168, 169, 174, 182, 198, 199, 215, 216, 223, 243, 249, 267, 343, 372, 374, 385, 402, 404, 405, 408, 430, 436, 443, 537, 576, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 678, 690, 726, 740, 742, 826, 827, 828, 830, 832, 834, 835, 836, 863, 919, 963, 964, 966, 967, 970, 972, 977, 981, 987, 990, 1009, 1017], "sp": [4, 168, 957, 1001], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 56, 57, 59, 60, 61, 65, 71, 72, 74, 86, 90, 91, 92, 100, 101, 102, 110, 112, 113, 119, 120, 126, 128, 129, 131, 132, 137, 139, 145, 151, 152, 153, 154, 158, 174, 181, 183, 188, 189, 190, 191, 193, 195, 196, 202, 205, 207, 209, 210, 211, 212, 214, 215, 219, 220, 221, 223, 224, 232, 233, 234, 238, 244, 246, 247, 248, 249, 252, 253, 255, 256, 257, 258, 261, 263, 267, 269, 278, 281, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295, 297, 300, 301, 302, 305, 310, 311, 312, 313, 314, 315, 320, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 343, 349, 350, 351, 358, 359, 366, 367, 369, 370, 372, 373, 374, 375, 377, 380, 381, 383, 388, 394, 395, 397, 398, 399, 400, 401, 402, 404, 406, 410, 423, 428, 429, 432, 433, 435, 445, 454, 461, 509, 514, 520, 524, 526, 527, 533, 535, 536, 576, 593, 594, 596, 617, 625, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 658, 659, 665, 671, 672, 674, 675, 678, 679, 694, 700, 701, 704, 716, 720, 726, 727, 743, 744, 782, 796, 809, 819, 820, 821, 822, 823, 824, 825, 831, 833, 840, 855, 857, 858, 859, 863, 879, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 899, 904, 905, 930, 956, 959, 960, 963, 964, 965, 967, 969, 970, 972, 974, 977, 979, 981, 982, 983, 987, 991, 993, 997, 998, 1000, 1001, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022], "colorbar": [4, 11, 30, 40, 95, 106, 118, 126, 145, 151, 153, 154, 156, 169, 219, 231, 247, 269, 300, 330, 683, 1021], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 53, 80, 98, 207, 217, 313, 344, 346, 520, 956, 967, 977], "166": [4, 288, 292, 297, 378, 967, 1009], "simpl": [4, 16, 27, 55, 71, 75, 78, 85, 86, 95, 116, 121, 157, 165, 169, 182, 199, 215, 239, 259, 279, 292, 314, 326, 343, 345, 349, 354, 370, 372, 374, 375, 376, 377, 379, 383, 384, 385, 386, 394, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 411, 417, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 448, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 500, 508, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 771, 773, 780, 781, 782, 785, 786, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 959, 961, 962, 963, 964, 966, 967, 970, 977, 979, 981, 983, 988, 991, 993, 1002, 1006, 1009], "wors": [4, 86, 151, 169, 204, 258, 266, 305, 354, 395, 397, 407, 418, 451, 468, 469, 470, 538, 540, 542, 544, 546, 548, 551, 554, 556, 596, 597, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 655, 656, 658, 659, 664, 665, 666, 691, 707, 708, 709, 713, 770, 817, 818, 827, 835, 842, 885, 887, 890, 893, 895, 967, 977, 1018], "further": [4, 25, 42, 71, 78, 86, 95, 113, 119, 121, 146, 150, 155, 168, 170, 177, 182, 219, 224, 255, 258, 259, 265, 315, 330, 344, 352, 358, 372, 383, 385, 396, 397, 399, 402, 404, 405, 407, 438, 448, 501, 518, 521, 568, 600, 608, 614, 644, 645, 652, 654, 662, 663, 664, 677, 681, 722, 759, 763, 766, 775, 776, 820, 826, 827, 834, 835, 862, 864, 884, 886, 889, 921, 966, 967, 969, 970, 971, 973, 977, 981, 982, 1000, 1002, 1018, 1022], "analyz": [4, 7, 17, 182, 260, 267, 315, 343, 345, 377, 378, 397, 405, 489, 574, 575, 577, 773, 964, 967, 974, 975, 983, 1002, 1009, 1018], "reason": [4, 8, 12, 42, 53, 70, 123, 147, 168, 169, 174, 198, 199, 206, 216, 227, 231, 232, 236, 255, 258, 259, 264, 278, 301, 305, 344, 345, 354, 358, 359, 360, 367, 371, 372, 374, 376, 380, 383, 384, 385, 386, 397, 398, 399, 402, 404, 405, 407, 494, 518, 560, 624, 632, 638, 640, 658, 673, 678, 748, 782, 796, 828, 833, 840, 859, 881, 956, 957, 962, 963, 964, 967, 969, 970, 971, 973, 977, 981, 982, 991, 1002, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "disappoint": 4, "outcom": [4, 116, 168, 385, 404, 555, 644, 695, 727, 777, 812, 879, 880, 881, 886, 889, 963, 967, 983, 990, 1002, 1013, 1017, 1019], "altern": [4, 26, 71, 86, 117, 118, 124, 130, 170, 182, 198, 216, 228, 246, 249, 267, 310, 343, 344, 345, 354, 367, 375, 376, 378, 383, 385, 386, 388, 392, 394, 395, 397, 398, 399, 401, 402, 404, 405, 407, 427, 428, 431, 432, 433, 438, 444, 449, 485, 524, 526, 527, 533, 539, 540, 543, 544, 545, 546, 550, 551, 552, 568, 574, 575, 577, 603, 606, 629, 678, 692, 694, 756, 759, 763, 766, 784, 813, 848, 854, 857, 870, 877, 879, 892, 893, 894, 895, 934, 935, 961, 963, 964, 966, 967, 970, 971, 975, 977, 979, 980, 982, 983, 988, 997, 1002, 1004, 1014, 1016, 1022, 1023], "larger": [4, 7, 27, 37, 39, 42, 47, 55, 80, 82, 92, 105, 113, 124, 151, 156, 157, 163, 168, 169, 174, 178, 182, 213, 214, 215, 224, 231, 233, 243, 249, 259, 261, 267, 268, 278, 280, 294, 295, 297, 300, 330, 344, 345, 365, 367, 372, 378, 383, 385, 394, 395, 397, 398, 399, 401, 402, 404, 405, 407, 426, 429, 435, 436, 438, 440, 442, 501, 513, 527, 530, 547, 548, 549, 553, 554, 568, 575, 629, 638, 658, 659, 660, 661, 665, 673, 678, 690, 705, 721, 780, 829, 830, 861, 863, 864, 865, 873, 878, 920, 921, 938, 941, 959, 960, 963, 964, 966, 967, 970, 971, 975, 977, 981, 982, 1000, 1002, 1013, 1014, 1017, 1018, 1019, 1022, 1023], "periodic_spline_transform": 4, "n_spline": [4, 863], "none": [4, 8, 9, 10, 16, 17, 26, 33, 39, 41, 42, 44, 52, 53, 54, 55, 56, 62, 97, 100, 105, 114, 119, 120, 122, 125, 139, 151, 157, 158, 171, 177, 198, 199, 206, 209, 216, 219, 233, 234, 252, 258, 259, 270, 283, 285, 289, 303, 304, 307, 312, 313, 319, 322, 328, 330, 331, 334, 335, 337, 343, 344, 367, 369, 372, 374, 379, 381, 385, 397, 401, 404, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 489, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 689, 693, 694, 695, 697, 698, 699, 700, 702, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 717, 719, 720, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 903, 904, 905, 907, 908, 909, 910, 913, 915, 920, 921, 924, 925, 926, 927, 930, 933, 935, 936, 938, 941, 942, 948, 951, 952, 954, 956, 963, 967, 977, 980, 983, 993, 997, 1002, 1004, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "degre": [4, 16, 34, 97, 112, 155, 162, 167, 169, 174, 177, 182, 186, 187, 199, 233, 238, 243, 244, 245, 248, 249, 258, 272, 297, 312, 313, 327, 337, 402, 406, 432, 438, 484, 521, 527, 625, 626, 629, 642, 760, 780, 782, 830, 859, 863, 886, 887, 888, 889, 890, 959, 960, 962, 963, 964, 965, 967, 968, 970, 973, 974, 977, 980, 982, 1000, 1012, 1018, 1022, 1023], "n_knot": [4, 199, 313, 863, 977, 1022], "include_bia": [4, 177, 272, 859, 863, 1023], "knot": [4, 199, 313, 863, 977, 1022], "linspac": [4, 8, 9, 10, 11, 13, 24, 26, 30, 34, 37, 38, 40, 42, 49, 55, 80, 81, 96, 105, 111, 121, 123, 150, 151, 153, 154, 155, 156, 157, 159, 169, 177, 178, 180, 182, 188, 192, 198, 199, 200, 204, 208, 209, 210, 211, 212, 216, 224, 227, 230, 231, 233, 234, 247, 258, 260, 261, 265, 266, 267, 268, 272, 283, 284, 290, 291, 301, 303, 314, 315, 329, 330, 333, 335, 336, 338, 339, 340, 617, 618, 788, 808, 824, 825, 1001], "again": [4, 67, 72, 123, 154, 156, 158, 159, 168, 223, 259, 343, 354, 376, 381, 385, 386, 397, 398, 399, 404, 405, 458, 553, 554, 620, 633, 637, 639, 641, 647, 649, 651, 678, 956, 963, 967, 981, 1006, 1009, 1017], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 41, 46, 47, 48, 51, 52, 53, 54, 55, 58, 60, 61, 66, 70, 74, 75, 80, 95, 96, 98, 101, 111, 116, 117, 118, 119, 120, 123, 124, 125, 128, 129, 139, 143, 145, 151, 152, 154, 156, 157, 162, 163, 165, 169, 170, 186, 187, 198, 200, 205, 207, 210, 211, 212, 213, 214, 218, 220, 222, 225, 227, 230, 231, 232, 233, 235, 236, 243, 245, 247, 248, 249, 256, 258, 260, 261, 264, 265, 267, 268, 278, 283, 284, 288, 291, 294, 296, 302, 303, 310, 312, 315, 320, 321, 323, 327, 329, 330, 333, 334, 335, 336, 339, 340, 343, 344, 352, 358, 365, 366, 367, 372, 374, 385, 394, 395, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 415, 416, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 906, 909, 910, 915, 919, 921, 923, 926, 929, 931, 936, 938, 942, 943, 944, 945, 946, 947, 948, 957, 962, 963, 967, 968, 969, 970, 971, 973, 977, 978, 979, 980, 981, 982, 983, 998, 999, 1001, 1002, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1025], "concat": [4, 162, 167, 187, 216, 857], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 58, 80, 82, 89, 90, 95, 98, 102, 106, 112, 118, 119, 139, 145, 153, 154, 169, 177, 181, 182, 189, 190, 207, 210, 211, 212, 214, 220, 221, 222, 231, 232, 235, 252, 253, 278, 281, 282, 284, 286, 287, 289, 291, 294, 296, 297, 300, 302, 318, 319, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 340, 349, 683, 998, 999], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 31, 32, 34, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 60, 61, 67, 80, 82, 89, 90, 95, 98, 102, 112, 118, 119, 139, 145, 153, 154, 169, 181, 190, 207, 210, 211, 212, 214, 220, 221, 222, 228, 231, 232, 235, 240, 252, 253, 278, 282, 284, 288, 291, 294, 296, 297, 300, 302, 312, 315, 318, 319, 323, 326, 327, 328, 329, 330, 331, 332, 334, 336, 339, 340, 349, 369, 398, 683, 897, 967, 977, 983, 998, 999], "tab20b": 4, "stai": [4, 26, 37, 105, 168, 344, 371, 372, 376, 385, 386, 972, 1015], "midnight": 4, "fewer": [4, 13, 26, 55, 110, 119, 121, 198, 358, 373, 397, 406, 407, 434, 447, 539, 580, 682, 814, 925, 963, 968, 970, 1014, 1015, 1016], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 53, 55, 62, 78, 85, 86, 104, 116, 117, 124, 130, 142, 143, 144, 146, 147, 155, 163, 167, 168, 169, 170, 171, 174, 182, 198, 199, 216, 237, 243, 249, 255, 256, 261, 265, 266, 268, 287, 300, 306, 307, 310, 313, 319, 330, 343, 344, 345, 354, 358, 359, 360, 367, 368, 370, 372, 374, 376, 377, 378, 380, 383, 385, 386, 388, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 429, 430, 432, 436, 442, 443, 446, 454, 482, 489, 507, 510, 518, 520, 525, 529, 535, 537, 547, 548, 552, 553, 574, 575, 577, 579, 590, 597, 613, 616, 635, 644, 658, 660, 662, 664, 673, 674, 678, 681, 710, 713, 731, 743, 744, 748, 770, 777, 780, 781, 785, 786, 801, 812, 813, 826, 827, 828, 830, 832, 833, 834, 835, 836, 859, 861, 869, 870, 872, 873, 874, 875, 882, 920, 921, 923, 930, 935, 956, 957, 961, 962, 963, 964, 965, 966, 967, 968, 970, 973, 974, 975, 980, 981, 982, 983, 986, 987, 988, 991, 998, 1000, 1002, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1024], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 6, 369], "132": [4, 8, 13, 56, 73, 76, 110, 184, 346, 404], "013": [4, 344], "successfulli": [4, 13, 304, 371, 376, 397, 405, 981], "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 71, 72, 78, 113, 121, 123, 125, 128, 144, 168, 177, 178, 182, 196, 203, 206, 229, 231, 236, 259, 265, 287, 302, 305, 306, 315, 344, 345, 354, 364, 366, 369, 372, 378, 383, 385, 395, 396, 397, 399, 401, 402, 404, 405, 406, 408, 430, 431, 436, 443, 446, 479, 520, 530, 535, 541, 542, 543, 544, 549, 550, 551, 559, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 596, 613, 629, 638, 658, 659, 660, 661, 673, 678, 681, 766, 782, 785, 786, 788, 796, 805, 806, 807, 808, 811, 861, 873, 876, 877, 892, 893, 894, 895, 956, 959, 961, 962, 963, 964, 967, 970, 979, 980, 984, 993, 1001, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1023, 1025], "choic": [4, 7, 40, 46, 55, 65, 70, 78, 103, 150, 151, 157, 162, 187, 199, 236, 252, 256, 258, 261, 283, 307, 312, 343, 344, 354, 358, 370, 374, 377, 383, 388, 397, 399, 401, 403, 404, 406, 407, 438, 448, 457, 458, 459, 460, 461, 462, 464, 524, 526, 527, 533, 545, 624, 633, 634, 642, 644, 645, 647, 655, 666, 678, 691, 813, 826, 827, 832, 834, 835, 861, 864, 873, 875, 884, 885, 908, 956, 961, 963, 964, 965, 967, 968, 973, 975, 980, 981, 982, 983, 1016, 1019, 1020, 1024, 1025], "arbitrari": [4, 55, 86, 95, 96, 97, 115, 157, 177, 198, 215, 216, 256, 300, 304, 306, 312, 343, 352, 359, 372, 383, 385, 398, 401, 402, 404, 405, 409, 432, 436, 441, 443, 451, 518, 519, 545, 546, 567, 625, 634, 655, 666, 674, 774, 783, 784, 789, 791, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 848, 850, 863, 956, 958, 959, 963, 964, 967, 970, 977, 988, 1002, 1009, 1010, 1013, 1015, 1016, 1017, 1019, 1023, 1025], "held": [4, 8, 71, 103, 124, 170, 206, 245, 261, 266, 276, 404, 545, 546, 547, 548, 687, 782, 785, 786, 796, 841, 842, 854, 956, 957, 966, 975, 1002], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 55, 58, 60, 64, 67, 80, 81, 85, 90, 91, 92, 94, 98, 100, 101, 107, 112, 116, 119, 120, 128, 152, 157, 158, 165, 168, 169, 170, 177, 181, 187, 190, 192, 194, 196, 198, 199, 200, 204, 207, 210, 211, 215, 216, 219, 220, 221, 222, 223, 227, 230, 232, 236, 245, 249, 252, 255, 259, 260, 265, 267, 268, 276, 278, 281, 282, 283, 284, 285, 286, 287, 289, 291, 294, 301, 302, 304, 306, 318, 319, 323, 326, 329, 330, 331, 332, 334, 335, 339, 340, 343, 344, 345, 349, 354, 358, 359, 360, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 380, 383, 385, 386, 396, 397, 402, 403, 404, 405, 408, 409, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 444, 446, 447, 455, 458, 460, 484, 490, 498, 500, 501, 505, 508, 511, 516, 519, 521, 527, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 596, 597, 614, 617, 618, 619, 623, 624, 625, 630, 631, 637, 641, 643, 656, 657, 659, 661, 662, 664, 665, 668, 669, 674, 675, 676, 677, 678, 679, 680, 685, 687, 692, 693, 696, 699, 703, 708, 710, 716, 721, 722, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 749, 764, 765, 780, 781, 782, 796, 805, 814, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 849, 863, 878, 879, 880, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 902, 959, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 977, 979, 980, 982, 983, 987, 988, 997, 1000, 1001, 1002, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1025], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 115, 300], "insight": [4, 7, 168, 169, 199, 200, 216, 296, 300, 343, 352, 395, 782, 785, 786, 796, 807, 974, 983, 991], "last_hour": 4, "slice": [4, 17, 119, 207, 221, 224, 232, 281, 286, 289, 313, 314, 326, 367, 373, 374, 381, 398, 450, 453, 479, 480, 494, 532, 625, 759, 763, 766, 900, 924, 925, 938, 1021, 1023], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 53, 57, 60, 67, 75, 95, 98, 106, 119, 120, 127, 130, 159, 168, 169, 192, 197, 213, 214, 219, 220, 221, 235, 246, 254, 297, 300, 302, 310, 312, 318, 319, 323, 337, 338, 349], "label": [4, 6, 7, 11, 12, 13, 16, 20, 24, 25, 26, 27, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 73, 75, 78, 79, 80, 81, 85, 86, 91, 92, 97, 99, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 137, 143, 150, 151, 155, 156, 157, 158, 159, 162, 165, 168, 171, 174, 177, 178, 180, 181, 182, 186, 187, 188, 192, 198, 199, 200, 201, 204, 205, 206, 207, 208, 213, 215, 216, 220, 221, 222, 227, 232, 233, 234, 236, 237, 245, 252, 253, 256, 257, 259, 260, 261, 262, 264, 267, 268, 269, 270, 271, 272, 273, 276, 283, 285, 287, 290, 295, 297, 300, 301, 305, 310, 311, 314, 317, 321, 322, 323, 324, 337, 338, 343, 344, 348, 349, 350, 351, 360, 364, 365, 366, 371, 372, 374, 377, 381, 385, 386, 394, 395, 396, 407, 408, 414, 415, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 451, 455, 473, 474, 475, 479, 480, 481, 482, 488, 489, 494, 495, 498, 500, 501, 505, 508, 509, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 555, 556, 578, 579, 580, 581, 582, 584, 585, 586, 590, 591, 592, 595, 596, 617, 644, 645, 652, 653, 654, 659, 660, 661, 662, 663, 664, 683, 684, 686, 688, 689, 690, 691, 693, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 710, 711, 712, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 739, 740, 741, 742, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 830, 831, 833, 834, 841, 842, 844, 848, 851, 852, 855, 857, 858, 868, 879, 880, 881, 884, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 904, 909, 910, 930, 931, 938, 956, 963, 964, 968, 969, 970, 971, 973, 974, 977, 981, 982, 983, 987, 989, 993, 998, 1000, 1001, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "actual": [4, 27, 46, 60, 75, 86, 110, 116, 174, 187, 198, 206, 245, 254, 261, 345, 354, 358, 360, 369, 370, 372, 374, 377, 378, 383, 384, 385, 395, 397, 402, 405, 406, 420, 495, 501, 502, 513, 521, 524, 526, 533, 548, 549, 630, 631, 634, 644, 645, 652, 653, 654, 655, 656, 658, 660, 662, 663, 664, 666, 673, 677, 681, 687, 690, 695, 701, 707, 708, 709, 770, 780, 785, 786, 801, 802, 830, 861, 884, 890, 912, 913, 914, 942, 959, 966, 967, 970, 974, 975, 1016, 1017, 1023, 1024, 1025], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 56, 80, 81, 92, 95, 110, 119, 142, 150, 151, 155, 156, 159, 163, 168, 169, 177, 186, 187, 188, 190, 194, 198, 199, 200, 204, 207, 210, 211, 216, 227, 243, 246, 281, 283, 294, 295, 297, 323, 340, 349, 350, 351, 372, 388, 390, 397, 404, 407, 541, 542, 617, 973, 974, 983, 987, 993], "One": [4, 9, 12, 24, 30, 49, 55, 91, 100, 103, 118, 120, 123, 126, 165, 168, 171, 176, 213, 217, 227, 237, 248, 258, 265, 268, 287, 301, 325, 327, 341, 344, 358, 369, 372, 384, 385, 397, 400, 402, 403, 404, 405, 408, 430, 435, 458, 460, 464, 498, 552, 617, 625, 644, 652, 654, 659, 661, 662, 663, 773, 789, 790, 812, 813, 814, 845, 846, 857, 888, 930, 957, 959, 963, 964, 965, 966, 967, 968, 970, 971, 974, 975, 977, 982, 989, 1004, 1013, 1015, 1022, 1024], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 61, 72, 73, 75, 78, 79, 80, 81, 85, 86, 97, 99, 103, 104, 105, 109, 110, 111, 112, 113, 114, 116, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 133, 143, 150, 151, 155, 156, 157, 158, 159, 168, 169, 174, 177, 178, 180, 183, 186, 187, 188, 192, 198, 199, 200, 201, 204, 205, 206, 207, 208, 211, 212, 213, 215, 216, 222, 230, 231, 232, 233, 234, 237, 245, 253, 255, 257, 258, 260, 261, 262, 263, 265, 267, 268, 270, 271, 272, 273, 283, 284, 285, 290, 295, 301, 305, 311, 314, 320, 329, 332, 337, 343, 348, 349, 350, 351, 686, 998], "draw": [4, 7, 16, 60, 159, 168, 194, 237, 260, 265, 330, 379, 400, 402, 403, 404, 541, 542, 543, 544, 549, 550, 551, 552, 597, 620, 687, 788, 896, 898, 966, 987, 996, 1022, 1023], "conclus": [4, 100, 168, 170, 198, 200, 258, 260, 354, 404, 996], "abov": [4, 25, 26, 37, 44, 66, 70, 112, 115, 116, 121, 123, 133, 146, 147, 168, 169, 171, 184, 198, 200, 204, 209, 231, 234, 258, 264, 283, 302, 305, 306, 311, 313, 344, 345, 352, 354, 358, 359, 360, 366, 367, 369, 370, 371, 372, 374, 376, 378, 383, 385, 386, 397, 398, 399, 401, 402, 403, 405, 407, 427, 431, 450, 453, 475, 481, 482, 483, 509, 576, 620, 690, 740, 782, 794, 796, 805, 847, 848, 861, 867, 873, 881, 930, 956, 957, 959, 961, 963, 964, 967, 970, 972, 974, 977, 981, 982, 983, 988, 993, 994, 1000, 1001, 1002, 1015], "problemat": [4, 254, 398, 957, 1017], "captur": [4, 9, 12, 37, 39, 86, 123, 127, 142, 155, 168, 177, 182, 198, 249, 311, 330, 380, 397, 404, 405, 406, 557, 574, 575, 577, 830, 934, 967, 972, 980, 984, 1000, 1021], "big": [4, 44, 60, 62, 202, 203, 220, 249, 359, 372, 378, 386, 399, 405, 409, 524, 547, 548, 550, 551, 788, 808, 819, 820, 821, 822, 823, 988, 991, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "goe": [4, 37, 115, 352, 372, 404, 457, 458, 464, 543, 544, 550, 551, 552, 892, 893, 894, 895, 977, 981], "artifact": [4, 13, 46, 47, 300, 360, 376], "discontinu": [4, 383], "fail": [4, 54, 66, 96, 103, 158, 159, 177, 182, 258, 310, 359, 370, 372, 374, 375, 380, 386, 388, 400, 401, 426, 458, 460, 662, 663, 664, 841, 842, 915, 956, 964, 1009, 1010, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024], "intra": [4, 574, 577, 775, 776], "variat": [4, 12, 37, 127, 155, 156, 165, 168, 203, 242, 244, 249, 250, 255, 276, 311, 330, 369, 401, 402, 407, 429, 433, 445, 522, 629, 658, 660, 661, 780, 781, 800, 801, 803, 956, 967, 977, 980, 983, 987, 998, 1000, 1003, 1004, 1012, 1014, 1015], "harmon": [4, 37, 265, 344, 397, 521, 527, 714, 715, 721, 768, 778, 967], "phase": [4, 182, 192, 358, 613, 959, 964, 970, 991, 1017, 1019], "potenti": [4, 55, 78, 163, 167, 169, 177, 284, 285, 294, 345, 358, 359, 385, 388, 397, 401, 404, 405, 454, 468, 469, 470, 471, 482, 510, 535, 543, 544, 547, 548, 550, 551, 559, 592, 597, 620, 748, 874, 875, 882, 892, 893, 894, 895, 935, 973, 981, 983, 987, 1002, 1012, 1019, 1020, 1023], "fix": [4, 8, 25, 34, 46, 71, 105, 115, 116, 119, 150, 151, 155, 158, 168, 182, 200, 216, 249, 261, 294, 310, 311, 312, 313, 314, 315, 344, 358, 359, 366, 368, 370, 371, 372, 374, 375, 380, 383, 385, 386, 397, 398, 401, 402, 404, 405, 407, 438, 448, 458, 490, 498, 517, 523, 526, 528, 534, 535, 545, 546, 550, 551, 574, 577, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 616, 639, 649, 656, 670, 673, 677, 681, 693, 770, 780, 796, 803, 826, 827, 829, 832, 834, 835, 851, 868, 892, 893, 921, 934, 956, 963, 966, 967, 970, 977, 988, 990, 1002, 1007, 1008, 1010, 1011, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025], "two": [4, 7, 9, 11, 14, 24, 26, 30, 34, 37, 39, 40, 43, 55, 60, 64, 70, 71, 75, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 104, 108, 111, 118, 119, 120, 123, 126, 127, 128, 131, 134, 144, 147, 150, 151, 152, 153, 156, 157, 162, 163, 165, 168, 169, 170, 177, 181, 182, 186, 187, 188, 189, 194, 198, 199, 200, 206, 207, 210, 215, 216, 221, 223, 224, 227, 232, 234, 236, 243, 244, 245, 247, 248, 249, 253, 255, 259, 265, 281, 283, 286, 287, 289, 291, 300, 302, 305, 310, 311, 313, 314, 320, 326, 327, 330, 331, 332, 339, 343, 344, 345, 349, 354, 365, 366, 367, 368, 369, 370, 372, 374, 376, 378, 379, 380, 383, 385, 386, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 427, 428, 429, 430, 431, 433, 436, 437, 438, 439, 443, 445, 450, 455, 456, 457, 458, 459, 460, 461, 462, 474, 476, 477, 478, 479, 480, 482, 484, 486, 487, 488, 489, 490, 491, 493, 496, 500, 505, 508, 522, 524, 526, 530, 533, 535, 536, 539, 546, 556, 567, 570, 576, 577, 578, 581, 582, 584, 585, 586, 588, 589, 592, 593, 594, 596, 597, 606, 607, 610, 614, 617, 618, 625, 629, 631, 656, 657, 659, 678, 685, 689, 690, 691, 698, 701, 702, 705, 707, 708, 709, 716, 717, 720, 721, 723, 726, 728, 739, 740, 742, 748, 749, 756, 759, 762, 763, 764, 765, 766, 770, 771, 777, 778, 779, 780, 813, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 841, 842, 848, 849, 856, 857, 858, 859, 878, 879, 880, 884, 892, 894, 895, 930, 946, 947, 953, 956, 957, 959, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 993, 997, 1000, 1001, 1002, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "onc": [4, 8, 50, 144, 147, 150, 220, 256, 259, 278, 306, 310, 314, 343, 345, 352, 354, 358, 360, 366, 367, 372, 376, 377, 378, 379, 380, 384, 385, 386, 397, 398, 400, 401, 402, 404, 405, 406, 407, 435, 437, 439, 458, 494, 495, 524, 530, 537, 545, 546, 576, 577, 583, 597, 605, 613, 633, 637, 639, 641, 647, 649, 651, 652, 653, 654, 662, 663, 664, 683, 698, 702, 704, 721, 766, 783, 787, 790, 800, 819, 820, 821, 822, 823, 896, 963, 964, 970, 977, 981, 982, 983, 993, 1002, 1006, 1009, 1017, 1019, 1020, 1021, 1022], "specif": [4, 11, 12, 27, 44, 55, 62, 65, 70, 72, 116, 130, 155, 158, 168, 169, 174, 216, 253, 258, 300, 310, 311, 315, 343, 344, 345, 354, 358, 359, 367, 372, 375, 377, 378, 380, 383, 385, 388, 393, 396, 397, 398, 401, 402, 404, 405, 406, 407, 482, 489, 520, 537, 543, 550, 553, 554, 555, 556, 560, 574, 577, 579, 583, 598, 599, 600, 601, 603, 604, 605, 606, 608, 609, 611, 626, 629, 632, 633, 638, 644, 658, 673, 683, 698, 699, 731, 782, 783, 784, 789, 790, 791, 796, 807, 820, 913, 915, 916, 930, 943, 944, 945, 961, 963, 964, 966, 967, 969, 970, 972, 974, 977, 981, 983, 984, 985, 986, 1002, 1004, 1009, 1013, 1017, 1018, 1019, 1020, 1023, 1024], "furthermor": [4, 37, 116, 156, 169, 170, 237, 239, 278, 343, 344, 358, 360, 379, 397, 402, 404, 405, 548, 576, 592, 605, 690, 721, 731, 740, 742, 778, 884, 963, 975, 1012, 1016], "enforc": [4, 12, 53, 95, 155, 192, 287, 358, 372, 399, 402, 404, 407, 494, 513, 517, 523, 525, 528, 529, 531, 532, 534, 547, 548, 863, 904, 905, 957, 964, 1011, 1017, 1019, 1021, 1025], "behav": [4, 12, 48, 52, 57, 253, 300, 312, 330, 354, 372, 378, 383, 384, 397, 401, 864, 963, 977, 982, 984, 988, 1002, 1009, 1016, 1018, 1022, 1023], "similarli": [4, 12, 37, 55, 92, 126, 169, 182, 187, 198, 228, 258, 294, 300, 330, 354, 359, 368, 370, 374, 377, 385, 394, 400, 401, 405, 962, 964, 965, 967, 974, 981, 982, 984, 993, 997, 1017, 1023, 1025], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 53, 56, 58, 113, 144, 147, 163, 169, 170, 181, 182, 229, 254, 256, 267, 269, 270, 281, 289, 310, 323, 326, 327, 333, 343, 344, 345, 357, 358, 359, 366, 367, 369, 370, 371, 372, 374, 376, 377, 378, 380, 381, 383, 385, 388, 394, 395, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 411, 419, 420, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 448, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 474, 477, 478, 481, 482, 483, 489, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 563, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 596, 597, 606, 613, 614, 615, 616, 618, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 693, 706, 714, 715, 723, 756, 759, 763, 764, 765, 766, 768, 769, 772, 773, 774, 775, 776, 780, 781, 782, 784, 785, 786, 787, 788, 789, 791, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 873, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 904, 905, 907, 915, 916, 920, 921, 935, 936, 937, 938, 941, 951, 952, 956, 957, 963, 964, 967, 969, 970, 973, 975, 977, 981, 982, 983, 988, 990, 993, 1000, 1001, 1002, 1004, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "shorter": [4, 156, 246, 383, 397, 402, 407, 436, 443, 549, 683, 969, 973, 1002, 1020], "necessarili": [4, 31, 72, 98, 168, 198, 206, 216, 232, 233, 244, 302, 343, 344, 366, 376, 395, 397, 404, 613, 832, 834, 835, 836, 961, 964, 966, 967], "59": [4, 68, 174, 182, 216, 297, 369, 378, 398, 496, 967, 1005, 1009], "37": [4, 15, 182, 261, 318, 367, 404, 510, 702, 864, 977, 1009], "creat": [4, 5, 8, 11, 16, 21, 26, 27, 30, 32, 37, 39, 41, 43, 44, 46, 49, 52, 58, 60, 62, 71, 72, 80, 86, 97, 100, 112, 115, 119, 120, 123, 126, 129, 145, 146, 150, 152, 155, 156, 157, 159, 163, 167, 169, 177, 179, 181, 184, 194, 199, 200, 210, 211, 221, 232, 237, 239, 248, 253, 254, 256, 258, 268, 276, 281, 286, 288, 289, 302, 304, 305, 310, 313, 314, 323, 326, 327, 331, 332, 335, 338, 339, 340, 345, 348, 350, 351, 354, 359, 367, 368, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 384, 385, 388, 395, 397, 398, 401, 403, 404, 405, 407, 424, 437, 439, 451, 452, 485, 501, 502, 503, 504, 532, 539, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 574, 575, 577, 583, 614, 616, 617, 618, 619, 683, 684, 686, 687, 688, 767, 774, 782, 784, 788, 792, 796, 800, 805, 806, 814, 845, 857, 886, 889, 892, 893, 894, 895, 899, 902, 924, 925, 940, 952, 957, 963, 966, 967, 968, 970, 974, 977, 978, 979, 981, 982, 983, 987, 988, 991, 998, 1000, 1001, 1006, 1009, 1010, 1012, 1015, 1019, 1022, 1023, 1024, 1025], "turn": [4, 32, 78, 162, 163, 168, 182, 213, 214, 232, 258, 282, 345, 358, 360, 367, 383, 385, 386, 396, 397, 398, 400, 402, 405, 406, 407, 567, 568, 575, 593, 594, 813, 817, 886, 889, 907, 957, 961, 969, 972, 977, 991, 1002, 1014, 1016, 1017, 1022], "downstream": [4, 80, 307, 345, 405, 517, 520, 523, 527, 528, 592, 857, 977, 1019], "freedom": [4, 97, 155, 186, 187, 189, 258, 527, 642, 780, 963, 1012], "underfit": [4, 123, 150, 165, 170, 251, 273, 274, 294, 306, 404, 643, 782, 785, 786, 796, 806, 807, 844, 859, 962, 963], "approxim": [4, 5, 27, 33, 46, 53, 80, 99, 100, 105, 114, 122, 123, 151, 168, 175, 178, 194, 198, 199, 212, 216, 226, 227, 230, 233, 241, 249, 258, 263, 272, 279, 287, 292, 300, 302, 303, 305, 310, 313, 343, 345, 350, 351, 354, 361, 364, 369, 381, 383, 385, 394, 395, 398, 400, 401, 402, 404, 407, 409, 410, 411, 419, 435, 455, 456, 459, 460, 461, 462, 468, 469, 470, 477, 482, 488, 507, 510, 519, 520, 521, 522, 524, 525, 526, 527, 529, 530, 531, 532, 533, 545, 546, 568, 575, 596, 597, 605, 624, 625, 626, 627, 628, 643, 644, 645, 658, 660, 662, 663, 665, 673, 678, 743, 744, 749, 780, 783, 800, 805, 809, 810, 824, 825, 828, 832, 834, 835, 836, 840, 844, 845, 850, 854, 856, 857, 861, 873, 884, 889, 890, 920, 921, 941, 960, 961, 962, 963, 964, 966, 970, 971, 972, 973, 974, 975, 979, 981, 982, 983, 987, 988, 1002, 1004, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023], "especi": [4, 8, 55, 56, 120, 123, 168, 198, 306, 315, 334, 344, 354, 359, 366, 372, 380, 383, 385, 395, 397, 405, 429, 435, 487, 524, 543, 544, 545, 546, 550, 551, 552, 632, 633, 634, 636, 638, 639, 640, 644, 645, 646, 647, 648, 649, 655, 666, 681, 691, 731, 819, 820, 821, 822, 823, 892, 893, 894, 895, 963, 969, 970, 975, 977, 991, 1012, 1017, 1021, 1022, 1023], "sharp": [4, 169, 974, 977], "rush": [4, 372], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 80, 95, 125, 150, 157, 168, 169, 213, 216, 258, 265, 269, 314, 343, 344, 354, 371, 395, 397, 399, 402, 404, 405, 406, 423, 429, 433, 437, 439, 445, 517, 524, 526, 528, 529, 531, 532, 533, 593, 594, 620, 785, 786, 824, 825, 920, 921, 959, 964, 967, 983, 1023], "tend": [4, 12, 27, 37, 39, 43, 52, 55, 57, 168, 169, 187, 198, 202, 203, 216, 243, 246, 255, 259, 276, 297, 345, 358, 360, 372, 374, 385, 395, 397, 399, 402, 404, 406, 423, 434, 639, 830, 861, 873, 921, 963, 964, 970, 983, 1002], "under": [4, 7, 11, 24, 25, 27, 41, 67, 78, 79, 103, 120, 123, 169, 198, 227, 236, 258, 265, 267, 268, 301, 338, 366, 372, 374, 376, 378, 380, 385, 388, 391, 395, 397, 399, 401, 402, 405, 406, 432, 437, 439, 456, 457, 458, 459, 460, 461, 462, 518, 525, 527, 529, 640, 641, 642, 688, 692, 693, 694, 701, 727, 739, 773, 774, 780, 781, 829, 963, 964, 965, 967, 970, 977, 981, 982, 983, 987, 988, 1002, 1009, 1011, 1012, 1014, 1017, 1021], "These": [4, 5, 7, 27, 51, 95, 97, 101, 115, 119, 165, 169, 187, 198, 199, 200, 202, 228, 265, 276, 278, 282, 297, 300, 307, 309, 314, 319, 321, 354, 358, 359, 365, 368, 369, 372, 374, 376, 379, 381, 383, 385, 388, 391, 394, 395, 396, 397, 400, 402, 404, 405, 406, 407, 428, 432, 434, 484, 494, 495, 501, 524, 553, 554, 588, 589, 654, 662, 663, 692, 718, 741, 763, 777, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 829, 830, 849, 956, 958, 961, 963, 964, 967, 968, 978, 980, 982, 987, 993, 997, 1002, 1009, 1015, 1017, 1018, 1019, 1022], "systemat": [4, 258, 374, 698, 713, 967, 1024], "reveal": [4, 168, 170, 343, 378, 394, 964, 1025], "form": [4, 9, 19, 32, 42, 60, 67, 95, 133, 157, 158, 168, 233, 249, 258, 318, 354, 366, 369, 372, 374, 376, 385, 386, 394, 396, 397, 400, 401, 402, 403, 404, 405, 407, 409, 411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 445, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 685, 780, 781, 782, 785, 786, 787, 790, 792, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 910, 956, 958, 960, 961, 963, 964, 967, 968, 971, 972, 973, 977, 982, 987, 993, 1000, 1015, 1019, 1021], "explain": [4, 5, 12, 56, 73, 85, 86, 104, 123, 150, 155, 156, 169, 170, 198, 216, 227, 249, 268, 271, 306, 343, 344, 359, 370, 372, 376, 391, 393, 400, 402, 407, 479, 507, 510, 520, 527, 530, 535, 611, 634, 642, 655, 666, 707, 708, 709, 713, 770, 963, 970, 983, 986, 987, 998, 1000, 1001, 1020, 1022, 1023], "lack": [4, 372, 374, 383, 401, 809, 899, 982, 1023], "deriv": [4, 19, 105, 106, 122, 155, 158, 170, 186, 187, 191, 199, 359, 367, 374, 399, 401, 403, 404, 405, 407, 409, 427, 431, 432, 451, 519, 592, 603, 608, 634, 655, 662, 666, 841, 842, 857, 863, 884, 885, 961, 963, 964, 967, 971, 973, 982, 1009, 1010, 1011, 1016, 1017, 1018, 1024], "address": [4, 48, 343, 367, 372, 397, 405, 643, 963, 964, 969, 970, 971, 972, 973, 977, 991, 1000, 1017], "section": [4, 37, 95, 100, 113, 130, 136, 137, 138, 139, 155, 159, 167, 168, 169, 177, 182, 186, 187, 200, 223, 228, 238, 256, 258, 261, 267, 305, 306, 307, 312, 343, 344, 345, 354, 365, 367, 370, 372, 373, 374, 376, 377, 378, 379, 380, 386, 391, 395, 396, 398, 400, 401, 402, 404, 405, 406, 407, 425, 429, 445, 520, 600, 605, 608, 623, 631, 773, 781, 886, 889, 956, 961, 963, 967, 968, 970, 971, 973, 974, 981, 982, 984, 986, 1000, 1002, 1009, 1011, 1012, 1013, 1016], "margin": [4, 12, 25, 27, 151, 152, 154, 155, 156, 165, 168, 169, 176, 217, 258, 300, 306, 325, 328, 330, 332, 341, 369, 395, 396, 402, 404, 407, 498, 596, 597, 617, 631, 662, 720, 813, 861, 873, 886, 889, 963, 967, 969, 973, 974, 977, 981, 982, 1000, 1016, 1018], "construct": [4, 11, 70, 72, 110, 112, 114, 118, 130, 216, 228, 238, 240, 276, 291, 301, 303, 311, 314, 366, 369, 374, 381, 385, 397, 401, 402, 404, 405, 408, 420, 427, 428, 430, 431, 436, 438, 443, 449, 451, 453, 505, 521, 527, 530, 541, 542, 567, 573, 625, 674, 676, 677, 796, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 843, 844, 845, 846, 848, 889, 903, 905, 920, 921, 930, 956, 957, 959, 963, 964, 967, 968, 970, 977, 980, 982, 983, 988, 993, 997, 1014, 1016, 1017, 1020, 1023], "polynomialfeatur": [4, 177, 198, 199, 204, 238, 272, 312, 863, 963, 977, 1013, 1017, 1018, 1019, 1022, 1023, 1025], "coars": [4, 119, 378, 434, 447], "too": [4, 7, 12, 17, 44, 50, 55, 57, 62, 70, 74, 82, 99, 123, 162, 170, 182, 199, 220, 231, 244, 252, 256, 265, 273, 296, 306, 330, 343, 350, 351, 358, 369, 372, 378, 380, 383, 385, 397, 399, 401, 404, 405, 406, 409, 423, 435, 524, 574, 577, 665, 678, 693, 819, 820, 821, 822, 823, 849, 862, 864, 962, 964, 966, 967, 969, 970, 974, 1000, 1010, 1013, 1016, 1017, 1018, 1019, 1021], "mani": [4, 7, 10, 19, 55, 56, 74, 78, 82, 116, 117, 118, 119, 121, 124, 143, 147, 170, 198, 219, 231, 244, 252, 258, 265, 266, 270, 278, 300, 305, 306, 310, 311, 312, 313, 314, 343, 354, 358, 360, 367, 369, 371, 372, 384, 385, 386, 388, 394, 395, 397, 398, 399, 402, 404, 405, 406, 407, 409, 489, 539, 540, 543, 544, 545, 546, 550, 551, 552, 574, 577, 592, 595, 613, 625, 636, 640, 644, 645, 652, 654, 662, 663, 664, 678, 681, 685, 759, 763, 782, 786, 796, 841, 842, 857, 862, 864, 884, 892, 893, 894, 895, 956, 957, 959, 963, 964, 966, 967, 968, 969, 970, 973, 974, 975, 977, 980, 982, 984, 986, 987, 988, 991, 1000, 1002, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1024, 1025], "featureunion": [4, 74, 364, 385, 396, 450, 615, 846, 957, 988, 991, 1004, 1010, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025], "hour_workday_interact": 4, "interaction_onli": [4, 859, 963, 977], "combin": [4, 12, 25, 27, 61, 70, 71, 73, 74, 95, 104, 105, 108, 121, 125, 134, 150, 156, 163, 165, 168, 182, 198, 215, 216, 223, 227, 232, 258, 259, 267, 269, 270, 287, 295, 306, 312, 313, 315, 333, 345, 349, 358, 364, 368, 369, 372, 377, 384, 385, 394, 395, 397, 398, 401, 402, 403, 404, 405, 406, 407, 409, 410, 431, 450, 452, 453, 459, 461, 462, 465, 466, 467, 475, 482, 494, 495, 501, 507, 510, 512, 517, 523, 524, 526, 528, 533, 535, 546, 548, 551, 553, 554, 596, 600, 602, 607, 610, 616, 620, 629, 632, 633, 638, 639, 644, 645, 646, 647, 648, 649, 652, 654, 658, 659, 660, 661, 662, 664, 665, 667, 670, 687, 715, 773, 782, 785, 786, 793, 794, 805, 807, 811, 843, 845, 849, 857, 858, 859, 864, 884, 941, 956, 959, 960, 963, 967, 968, 970, 973, 977, 980, 981, 984, 991, 998, 1000, 1002, 1009, 1014, 1017, 1020, 1021, 1022, 1024, 1025], "ones": [4, 11, 34, 43, 55, 71, 81, 126, 150, 174, 182, 203, 227, 230, 258, 266, 269, 285, 304, 319, 340, 358, 359, 372, 380, 385, 397, 399, 401, 404, 436, 518, 552, 567, 596, 597, 630, 631, 644, 645, 656, 662, 689, 779, 784, 789, 800, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 859, 863, 926, 963, 967, 972, 973, 977, 982, 1000, 1009, 1017, 1018, 1019], "previou": [4, 43, 53, 71, 95, 113, 120, 123, 130, 150, 155, 156, 167, 168, 169, 182, 184, 199, 231, 233, 258, 261, 265, 300, 305, 314, 343, 344, 345, 354, 358, 367, 372, 374, 377, 378, 380, 383, 385, 386, 388, 397, 404, 405, 454, 532, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 616, 632, 634, 638, 639, 644, 646, 648, 652, 653, 654, 655, 662, 663, 664, 666, 693, 801, 815, 818, 833, 841, 842, 881, 898, 963, 967, 971, 977, 988, 993, 1002, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "nice": [4, 67, 199, 300, 358, 402, 1002], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "078": [4, 6], "009": [4, 266, 344, 378], "104": [4, 24], "highlight": [4, 80, 92, 150, 151, 156, 216, 304, 316, 343, 345, 361, 372, 376, 377, 380, 383, 407, 429, 433, 450, 453, 476, 477, 482, 487, 490, 498, 501, 510, 524, 547, 548, 550, 551, 553, 585, 588, 614, 616, 618, 620, 626, 632, 634, 638, 644, 655, 666, 674, 687, 688, 703, 733, 773, 782, 785, 786, 788, 796, 810, 826, 828, 845, 849, 854, 857, 858, 859, 863, 864, 881, 882, 884, 889, 893, 916, 964, 967, 975, 977, 982, 1019, 1020, 1021, 1022, 1023, 1024], "anoth": [4, 37, 95, 100, 125, 147, 150, 158, 163, 168, 187, 206, 224, 227, 237, 244, 258, 260, 261, 264, 268, 288, 343, 345, 348, 354, 358, 360, 366, 367, 370, 372, 374, 378, 383, 385, 391, 394, 397, 401, 402, 404, 405, 406, 408, 428, 430, 438, 441, 448, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 494, 524, 526, 533, 659, 662, 678, 695, 705, 788, 843, 844, 865, 956, 962, 963, 964, 967, 968, 970, 973, 977, 981, 982, 993, 1000, 1001, 1002, 1018, 1019], "either": [4, 10, 30, 71, 116, 119, 120, 168, 186, 188, 228, 253, 262, 267, 283, 343, 352, 358, 359, 364, 367, 370, 372, 373, 374, 378, 385, 391, 395, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 428, 433, 438, 473, 482, 498, 510, 519, 520, 522, 530, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 568, 569, 570, 574, 575, 576, 577, 579, 580, 583, 588, 593, 594, 596, 597, 608, 613, 616, 618, 619, 636, 640, 642, 650, 662, 664, 668, 669, 676, 683, 684, 688, 692, 693, 697, 698, 706, 709, 711, 712, 713, 720, 724, 725, 727, 737, 741, 754, 759, 763, 767, 770, 773, 774, 777, 782, 785, 786, 788, 796, 804, 805, 806, 807, 808, 809, 811, 814, 874, 875, 881, 884, 885, 892, 893, 894, 895, 899, 928, 956, 963, 967, 968, 969, 970, 971, 972, 975, 977, 981, 982, 993, 1001, 1002, 1009, 1012, 1018, 1019, 1020, 1023], "after": [4, 17, 20, 21, 26, 46, 53, 55, 70, 71, 75, 81, 97, 110, 121, 128, 130, 133, 143, 147, 155, 157, 159, 162, 168, 174, 191, 198, 236, 237, 240, 246, 258, 267, 278, 286, 288, 300, 301, 304, 305, 343, 344, 360, 367, 369, 370, 371, 372, 374, 376, 378, 379, 380, 383, 385, 391, 393, 394, 395, 397, 398, 401, 402, 405, 406, 407, 409, 428, 433, 436, 437, 438, 439, 442, 448, 501, 518, 522, 539, 540, 545, 546, 547, 548, 583, 613, 616, 644, 645, 652, 653, 654, 659, 661, 662, 663, 664, 678, 698, 711, 741, 777, 780, 781, 785, 786, 833, 840, 844, 857, 863, 884, 889, 890, 956, 957, 961, 963, 967, 971, 972, 977, 979, 981, 982, 983, 988, 993, 1000, 1002, 1009, 1012, 1016, 1017, 1020, 1021, 1024], "quadrat": [4, 29, 35, 155, 159, 165, 212, 260, 313, 396, 426, 444, 447, 535, 536, 609, 634, 644, 645, 655, 662, 666, 702, 889, 890, 963, 964, 967, 970, 973, 977, 981, 982, 989, 1004, 1010], "tractabl": [4, 401, 620, 987, 1022], "nystr\u00f6m": 4, "latter": [4, 14, 248, 258, 267, 268, 286, 305, 338, 360, 369, 372, 385, 401, 404, 405, 411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 727, 780, 781, 782, 785, 786, 791, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 934, 970, 1018], "kernel_approxim": [4, 162, 165, 173, 174, 212, 227, 232, 312, 361, 663, 743, 744, 850, 959, 993, 1010, 1016, 1025], "nystroem": [4, 162, 212, 227, 232, 364, 626, 627, 628, 663, 850, 889, 890, 1004, 1010, 1016, 1019, 1021, 1022, 1023], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 139, 174, 258, 327, 334, 337, 438, 521, 606, 750, 759, 782, 859, 886, 887, 888, 889, 890, 963, 977, 1000], "n_compon": [4, 5, 6, 12, 14, 44, 52, 57, 58, 59, 70, 72, 73, 74, 85, 86, 90, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 128, 174, 197, 219, 220, 221, 222, 223, 224, 227, 231, 232, 234, 238, 243, 244, 245, 246, 247, 248, 249, 257, 282, 287, 297, 305, 312, 314, 344, 374, 377, 378, 385, 400, 402, 409, 437, 438, 448, 450, 468, 469, 470, 471, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 625, 626, 627, 628, 674, 675, 676, 677, 678, 679, 680, 681, 682, 780, 781, 833, 840, 843, 876, 877, 878, 921, 959, 961, 964, 966, 970, 998, 1001, 1010, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023], "300": [4, 20, 21, 34, 38, 50, 58, 98, 110, 111, 112, 116, 163, 188, 224, 227, 231, 247, 261, 288, 303, 312, 318, 336, 338, 374, 429, 433, 434, 445, 447, 625, 630, 631, 665, 676, 678, 680, 841, 963, 1019], "053": [4, 269, 274, 369, 378], "002": [4, 12, 147, 344, 369], "076": [4, 14, 233, 331, 341, 872], "004": 4, "almost": [4, 116, 121, 122, 200, 206, 272, 305, 321, 354, 365, 367, 376, 378, 383, 384, 385, 397, 401, 402, 456, 457, 458, 459, 461, 462, 463, 780, 956, 962, 963, 966, 967, 982, 1001, 1002, 1017, 1022], "rival": [4, 881, 980], "intermedi": [4, 7, 52, 55, 115, 123, 330, 405, 545, 546, 605, 844, 967, 1021], "compound": [4, 216, 405, 596, 598, 666, 709, 737, 963, 1002], "one_hot_poly_pipelin": 4, "082": [4, 198, 217], "006": [4, 378], "111": [4, 7, 8, 16, 67, 90, 101, 102, 109, 180, 195, 213, 217, 223, 258, 278, 326, 341, 836, 1012], "competit": [4, 123, 343, 404, 630, 970], "low": [4, 11, 12, 37, 50, 81, 86, 97, 99, 103, 113, 126, 147, 170, 191, 193, 198, 200, 212, 219, 221, 227, 231, 236, 243, 244, 246, 249, 252, 258, 260, 264, 265, 273, 284, 285, 296, 304, 306, 307, 321, 329, 330, 343, 352, 368, 369, 372, 377, 380, 385, 388, 394, 395, 396, 401, 402, 405, 428, 435, 454, 507, 510, 521, 568, 575, 589, 665, 678, 682, 691, 711, 727, 774, 829, 858, 865, 882, 921, 932, 935, 956, 959, 962, 963, 964, 966, 967, 970, 972, 973, 974, 975, 977, 979, 982, 983, 989, 1004, 1010, 1013, 1014, 1015, 1017, 1018, 1023, 1024], "rank": [4, 17, 25, 80, 99, 103, 117, 145, 170, 171, 216, 256, 258, 266, 368, 392, 394, 395, 399, 400, 402, 404, 405, 494, 495, 507, 510, 535, 536, 579, 580, 592, 634, 643, 655, 666, 682, 685, 706, 711, 712, 724, 725, 741, 777, 785, 786, 921, 956, 958, 959, 964, 975, 977, 991, 1004, 1010, 1015, 1018, 1019, 1023, 1024], "fact": [4, 11, 19, 25, 81, 86, 123, 170, 231, 240, 343, 366, 379, 383, 385, 400, 402, 403, 404, 405, 635, 654, 656, 690, 961, 963, 970, 977, 981, 982, 988, 991, 1023], "smoother": [4, 5, 123, 169, 296, 403], "allow": [4, 56, 58, 74, 75, 99, 100, 113, 114, 128, 150, 155, 157, 159, 192, 198, 216, 220, 228, 231, 237, 239, 240, 243, 258, 276, 310, 311, 312, 313, 315, 335, 343, 352, 354, 358, 366, 370, 372, 373, 374, 376, 379, 381, 385, 386, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 427, 430, 431, 432, 450, 452, 453, 509, 510, 520, 539, 540, 545, 546, 547, 548, 553, 554, 568, 569, 575, 579, 580, 583, 589, 596, 597, 601, 613, 614, 616, 620, 624, 629, 632, 633, 638, 639, 644, 646, 647, 648, 649, 662, 664, 667, 668, 669, 670, 674, 678, 747, 750, 759, 763, 766, 775, 776, 780, 781, 782, 784, 785, 786, 789, 791, 793, 796, 803, 810, 830, 839, 846, 847, 850, 851, 856, 868, 877, 879, 880, 881, 884, 885, 892, 893, 894, 895, 902, 904, 905, 915, 916, 931, 956, 957, 959, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 977, 979, 980, 981, 982, 983, 987, 988, 991, 993, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 53, 55, 57, 65, 73, 80, 81, 95, 97, 99, 100, 106, 121, 130, 150, 154, 156, 158, 159, 169, 182, 186, 187, 200, 206, 219, 221, 223, 224, 230, 248, 257, 258, 259, 269, 286, 287, 288, 305, 310, 332, 333, 338, 343, 344, 348, 359, 369, 370, 372, 373, 374, 377, 378, 381, 383, 384, 385, 386, 394, 397, 399, 400, 402, 404, 405, 406, 408, 427, 430, 431, 432, 436, 437, 438, 439, 448, 517, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 544, 551, 568, 575, 596, 597, 633, 636, 639, 640, 641, 642, 644, 645, 657, 674, 693, 714, 715, 723, 767, 768, 769, 772, 773, 777, 782, 796, 826, 827, 828, 830, 832, 834, 835, 836, 857, 858, 863, 876, 877, 878, 892, 893, 895, 901, 920, 921, 923, 956, 957, 959, 962, 963, 964, 966, 967, 968, 971, 973, 977, 981, 982, 983, 986, 988, 991, 993, 995, 997, 998, 1000, 1001, 1002, 1009, 1016, 1017, 1018, 1019, 1021, 1023, 1024], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 53, 54, 55, 57, 59, 66, 70, 71, 72, 75, 95, 98, 100, 109, 115, 116, 120, 122, 123, 124, 125, 143, 150, 153, 154, 155, 156, 157, 158, 163, 165, 167, 168, 169, 176, 177, 180, 182, 185, 196, 198, 199, 204, 206, 211, 212, 214, 216, 217, 219, 228, 230, 233, 237, 239, 240, 248, 256, 258, 259, 260, 261, 266, 267, 272, 278, 294, 300, 310, 311, 313, 314, 323, 327, 328, 329, 330, 331, 332, 336, 338, 340, 343, 344, 349, 354, 358, 359, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 388, 391, 395, 397, 398, 399, 400, 402, 403, 405, 406, 408, 409, 423, 426, 429, 430, 431, 433, 434, 436, 438, 440, 443, 444, 445, 446, 447, 450, 451, 454, 455, 457, 458, 460, 464, 474, 475, 477, 478, 481, 483, 489, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 558, 561, 567, 568, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 593, 594, 595, 596, 597, 601, 603, 605, 606, 608, 609, 613, 614, 617, 618, 619, 620, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 684, 685, 686, 688, 689, 690, 692, 697, 698, 702, 705, 707, 708, 709, 713, 717, 719, 720, 723, 725, 726, 727, 735, 740, 742, 746, 747, 748, 750, 753, 756, 759, 763, 764, 765, 766, 767, 768, 770, 774, 775, 776, 777, 779, 780, 781, 782, 784, 785, 786, 787, 788, 793, 794, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 853, 854, 856, 860, 861, 862, 863, 864, 865, 868, 870, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 902, 911, 913, 914, 915, 920, 921, 933, 934, 935, 937, 938, 941, 942, 951, 956, 957, 958, 960, 962, 964, 965, 968, 970, 971, 972, 973, 974, 975, 977, 980, 981, 983, 987, 988, 989, 993, 996, 997, 998, 1002, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "abl": [4, 5, 9, 24, 47, 55, 61, 82, 86, 99, 100, 127, 156, 168, 182, 187, 198, 214, 216, 223, 264, 269, 330, 354, 358, 359, 360, 366, 370, 372, 374, 376, 377, 383, 397, 399, 401, 405, 471, 489, 520, 809, 856, 956, 957, 963, 966, 967, 968, 973, 977, 980, 983, 984, 988, 993, 1001, 1002, 1015, 1016, 1020], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 174, 182, 280, 338, 345, 358, 393, 399, 405, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 792, 824, 825, 892, 893, 894, 895, 956, 967, 970, 983, 991, 996, 1000, 1012, 1013], "depth": [4, 109, 115, 120, 124, 126, 131, 348, 350, 351, 352, 358, 370, 372, 376, 384, 404, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 824, 825, 829, 892, 893, 894, 895, 896, 898, 926, 972, 973, 983, 1011, 1012, 1020], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 70, 71, 72, 73, 110, 116, 117, 121, 122, 128, 143, 144, 146, 151, 171, 174, 198, 206, 213, 214, 245, 256, 257, 258, 259, 260, 262, 264, 273, 280, 286, 287, 288, 297, 302, 305, 318, 319, 321, 330, 333, 354, 358, 374, 384, 385, 396, 397, 401, 404, 405, 406, 414, 423, 435, 455, 457, 458, 464, 518, 520, 527, 535, 536, 537, 539, 541, 543, 544, 545, 547, 550, 551, 553, 555, 596, 620, 644, 645, 652, 654, 657, 660, 661, 662, 678, 683, 689, 694, 699, 704, 719, 723, 728, 739, 748, 772, 777, 779, 808, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 826, 831, 833, 834, 841, 879, 880, 884, 886, 889, 892, 894, 920, 921, 956, 961, 962, 963, 964, 968, 970, 971, 975, 979, 981, 983, 997, 1002, 1017, 1018], "On": [4, 12, 17, 26, 67, 71, 72, 85, 86, 100, 109, 113, 115, 117, 118, 123, 126, 127, 130, 133, 142, 144, 154, 155, 168, 169, 170, 179, 186, 187, 200, 228, 229, 230, 231, 233, 237, 238, 239, 240, 243, 245, 248, 253, 254, 255, 256, 258, 259, 260, 261, 263, 265, 270, 297, 300, 302, 304, 305, 306, 311, 312, 314, 315, 320, 330, 352, 358, 370, 373, 374, 376, 383, 385, 391, 395, 397, 401, 402, 404, 406, 407, 629, 642, 677, 720, 746, 865, 956, 960, 963, 966, 967, 969, 973, 980, 982, 997, 1000], "contrari": [4, 13, 168, 220, 224, 243, 261, 300, 343, 366, 397, 482, 530, 592, 799, 865, 963, 969, 973], "significantli": [4, 24, 25, 37, 78, 79, 116, 121, 147, 168, 169, 170, 198, 206, 214, 216, 258, 278, 311, 312, 344, 345, 354, 359, 376, 397, 402, 404, 405, 410, 455, 460, 465, 466, 524, 526, 533, 544, 551, 632, 633, 638, 639, 646, 647, 648, 649, 670, 678, 824, 825, 959, 963, 964, 970, 975, 982, 1009, 1011, 1012, 1016, 1017, 1022, 1023, 1024], "over": [4, 7, 8, 9, 16, 24, 26, 27, 31, 37, 50, 55, 56, 72, 74, 95, 113, 116, 126, 142, 146, 150, 158, 162, 167, 169, 180, 192, 198, 206, 216, 227, 258, 259, 261, 263, 265, 266, 267, 270, 283, 291, 294, 295, 302, 313, 314, 318, 343, 344, 358, 359, 360, 367, 368, 371, 372, 373, 374, 378, 384, 385, 393, 395, 396, 397, 398, 401, 402, 403, 404, 405, 407, 409, 432, 435, 450, 458, 495, 519, 520, 522, 523, 524, 525, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 567, 568, 574, 575, 577, 580, 588, 618, 619, 620, 630, 631, 632, 633, 638, 639, 644, 646, 647, 648, 649, 651, 652, 653, 654, 662, 663, 664, 671, 672, 683, 702, 704, 724, 748, 773, 776, 780, 782, 785, 786, 788, 793, 794, 796, 805, 806, 807, 808, 809, 811, 840, 841, 842, 843, 859, 863, 884, 901, 910, 935, 956, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 980, 981, 982, 983, 987, 988, 991, 998, 1001, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1022], "compet": 4, "access": [4, 49, 78, 244, 249, 343, 352, 358, 359, 372, 373, 374, 380, 383, 385, 386, 397, 399, 400, 404, 405, 407, 436, 443, 450, 522, 553, 554, 555, 556, 603, 685, 842, 843, 844, 899, 963, 966, 967, 973, 974, 975, 981, 982, 988, 991, 993, 1001, 1002, 1009, 1011, 1015, 1016, 1017, 1018, 1021, 1023, 1024, 1025], "requir": [4, 7, 13, 25, 45, 46, 48, 53, 55, 57, 58, 67, 70, 90, 99, 101, 102, 115, 116, 120, 124, 126, 130, 147, 169, 182, 187, 195, 198, 216, 219, 221, 228, 231, 240, 259, 267, 269, 278, 280, 300, 305, 312, 313, 343, 344, 345, 366, 369, 370, 372, 374, 376, 378, 380, 383, 385, 386, 388, 393, 396, 397, 398, 399, 401, 402, 404, 405, 406, 407, 408, 414, 423, 424, 425, 430, 432, 436, 438, 443, 448, 450, 453, 455, 468, 469, 470, 482, 494, 507, 510, 521, 527, 535, 536, 537, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 558, 565, 566, 567, 596, 597, 605, 613, 618, 619, 620, 629, 644, 645, 652, 654, 657, 660, 661, 662, 663, 664, 672, 675, 677, 678, 679, 681, 685, 709, 714, 715, 727, 732, 734, 737, 748, 769, 772, 782, 785, 786, 789, 791, 796, 807, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 834, 835, 836, 841, 844, 845, 846, 848, 858, 859, 860, 862, 864, 872, 876, 877, 879, 880, 884, 885, 886, 889, 892, 893, 894, 895, 933, 953, 956, 961, 962, 963, 964, 967, 968, 969, 970, 971, 973, 974, 977, 981, 982, 983, 988, 993, 1000, 1002, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "geograph": [4, 11, 291, 367, 484], "repartit": 4, "immobil": 4, "quant": 4, "predictionerrordisplai": [4, 75, 130, 168, 254, 315, 967, 1024], "nrow": [4, 5, 32, 57, 66, 73, 95, 159, 169, 198, 200, 206, 216, 219, 220, 223, 260, 261, 278, 302, 304, 305, 315, 319, 337, 338, 998], "ncol": [4, 5, 32, 53, 57, 66, 95, 100, 106, 169, 198, 199, 200, 206, 216, 219, 220, 230, 254, 260, 261, 269, 278, 295, 301, 302, 304, 305, 315, 337, 338, 344], "sharex": [4, 7, 14, 73, 92, 100, 131, 159, 169, 200, 236, 260, 283, 321, 998], "sharei": [4, 75, 92, 100, 106, 131, 159, 169, 198, 200, 206, 236, 260, 269, 283, 301, 306, 337, 338, 344], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 75, 130, 168, 254, 315, 687], "residual_vs_predict": [4, 75, 254, 315, 687], "axis_idx": 4, "kind": [4, 9, 12, 24, 25, 75, 104, 116, 130, 142, 168, 169, 248, 252, 254, 267, 307, 312, 315, 327, 330, 343, 359, 360, 365, 367, 372, 374, 378, 383, 384, 395, 397, 400, 401, 402, 404, 405, 406, 474, 475, 489, 494, 495, 507, 510, 574, 618, 619, 687, 913, 963, 969, 974, 983, 1012, 1021, 1023, 1024], "enumer": [4, 8, 9, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 34, 37, 39, 40, 41, 42, 43, 44, 45, 50, 55, 59, 60, 61, 62, 70, 79, 81, 82, 86, 96, 98, 105, 109, 113, 116, 121, 122, 124, 125, 136, 152, 154, 159, 171, 178, 180, 189, 198, 220, 221, 224, 227, 232, 235, 236, 243, 244, 245, 246, 248, 249, 253, 260, 261, 267, 268, 283, 287, 288, 290, 297, 302, 303, 318, 319, 321, 323, 328, 330, 337, 338, 343, 349, 367, 545, 546, 550, 551, 766, 783, 784, 787, 789, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803], "pred": [4, 7, 11, 32, 339, 343, 367, 634, 655, 666, 683, 688, 692, 704, 714, 715, 723, 768, 769, 772, 773, 967], "zip": [4, 5, 8, 12, 24, 26, 31, 32, 37, 38, 40, 42, 45, 49, 55, 63, 64, 65, 75, 86, 92, 95, 96, 99, 104, 105, 106, 110, 112, 114, 130, 131, 156, 162, 165, 168, 169, 170, 183, 189, 190, 198, 206, 207, 219, 231, 244, 248, 249, 256, 260, 261, 262, 265, 267, 278, 283, 286, 294, 295, 296, 302, 304, 305, 306, 322, 327, 338, 339, 349, 370, 404, 808, 977, 1002, 1005], "disp": [4, 32, 112, 126, 127, 252, 261, 305, 311, 327, 332, 424, 617, 683, 686, 687, 833], "from_predict": [4, 32, 75, 130, 168, 236, 254, 265, 267, 313, 318, 343, 379, 424, 617, 684, 704, 712, 767, 769, 772, 773, 774, 967, 1006, 1022, 1023, 1024, 1025], "y_true": [4, 19, 32, 59, 75, 130, 153, 198, 208, 216, 246, 321, 372, 418, 424, 425, 451, 468, 469, 470, 538, 540, 542, 543, 544, 546, 548, 550, 551, 554, 556, 597, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 664, 665, 683, 684, 686, 687, 688, 689, 693, 694, 695, 698, 699, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 767, 768, 769, 770, 772, 773, 774, 777, 779, 817, 818, 827, 835, 842, 885, 887, 890, 893, 895, 967, 1010, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024], "y_pred": [4, 6, 7, 25, 30, 32, 34, 44, 57, 62, 70, 75, 109, 123, 124, 130, 144, 168, 198, 200, 205, 208, 213, 215, 216, 227, 228, 236, 254, 256, 261, 285, 289, 297, 305, 321, 322, 354, 372, 379, 385, 404, 418, 425, 451, 468, 469, 470, 535, 538, 540, 542, 543, 544, 546, 548, 550, 551, 553, 554, 556, 597, 617, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 683, 684, 686, 687, 688, 689, 694, 698, 699, 704, 707, 708, 709, 713, 714, 715, 719, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 768, 769, 770, 772, 773, 779, 782, 785, 786, 796, 805, 815, 817, 818, 827, 835, 842, 844, 884, 885, 886, 887, 888, 889, 890, 893, 895, 967, 969, 998, 1015, 1016, 1018, 1020, 1024, 1025], "scatter_kwarg": [4, 75, 130, 168, 687], "set_xtick": [4, 8, 10, 16, 31, 34, 43, 60, 64, 106, 128, 132, 169, 171, 189, 214, 232, 243, 269, 270, 276, 294, 296, 302, 303, 327], "num": [4, 12, 71, 147, 150, 155, 156, 157, 169, 170, 200, 265, 266, 314, 618], "set_ytick": [4, 16, 31, 34, 43, 60, 64, 106, 128, 162, 163, 171, 189, 214, 243, 269, 294, 296, 302, 303, 327, 345], "loc": [4, 7, 8, 9, 24, 26, 33, 40, 72, 75, 79, 80, 81, 85, 97, 99, 103, 104, 105, 109, 112, 113, 114, 121, 122, 123, 124, 125, 127, 130, 132, 133, 137, 143, 150, 151, 157, 159, 168, 169, 180, 183, 188, 192, 198, 199, 200, 201, 204, 205, 208, 211, 212, 215, 216, 222, 230, 231, 232, 233, 234, 245, 246, 253, 256, 257, 258, 261, 262, 265, 268, 271, 272, 273, 283, 284, 295, 301, 304, 305, 311, 314, 320, 329, 332, 337, 343, 349, 351, 796, 861, 873], "upper": [4, 7, 9, 24, 72, 75, 79, 80, 81, 109, 112, 113, 114, 122, 123, 124, 125, 130, 132, 143, 154, 156, 159, 168, 192, 198, 204, 205, 208, 212, 215, 216, 231, 234, 235, 257, 258, 259, 283, 284, 295, 305, 321, 329, 332, 337, 397, 403, 449, 574, 575, 577, 581, 599, 600, 601, 603, 605, 606, 608, 609, 611, 618, 619, 621, 623, 636, 640, 663, 720, 857, 858, 886, 887, 888, 908, 966, 967, 970, 977, 981, 982, 983, 1017], "bbox_to_anchor": [4, 37, 159, 263, 337], "set_aspect": [4, 153, 209, 245, 339], "equal": [4, 11, 12, 26, 37, 39, 53, 60, 80, 86, 110, 123, 153, 168, 199, 200, 202, 209, 215, 237, 245, 248, 252, 256, 258, 267, 288, 302, 306, 330, 332, 339, 344, 367, 368, 372, 374, 385, 394, 395, 397, 401, 402, 404, 405, 410, 423, 426, 427, 428, 429, 431, 433, 435, 440, 445, 446, 449, 455, 460, 465, 466, 489, 498, 501, 505, 518, 519, 520, 525, 527, 529, 530, 535, 536, 537, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 574, 579, 580, 583, 585, 586, 593, 594, 611, 614, 615, 618, 619, 620, 621, 623, 627, 628, 631, 635, 644, 645, 657, 685, 689, 704, 706, 714, 753, 768, 772, 773, 777, 779, 782, 783, 785, 786, 795, 796, 800, 805, 812, 816, 817, 824, 825, 826, 827, 832, 833, 834, 835, 836, 841, 842, 847, 848, 849, 856, 859, 862, 863, 864, 865, 867, 874, 881, 884, 885, 891, 892, 893, 894, 895, 910, 921, 942, 948, 961, 963, 967, 968, 970, 971, 973, 977, 981, 982, 983, 1001, 1002, 1010, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "adjust": [4, 9, 36, 38, 49, 58, 68, 78, 123, 165, 227, 232, 239, 259, 310, 322, 338, 344, 379, 397, 402, 404, 405, 510, 539, 540, 543, 545, 547, 548, 550, 644, 645, 652, 654, 660, 661, 662, 690, 691, 694, 700, 701, 740, 742, 771, 778, 819, 820, 822, 823, 854, 876, 877, 884, 885, 886, 889, 892, 894, 910, 966, 967, 971, 977, 1000, 1006, 1009, 1015, 1025], "box": [4, 10, 30, 55, 169, 170, 220, 300, 304, 379, 402, 404, 498, 541, 542, 860, 872, 896, 898, 967, 968, 974, 977, 983, 987, 993, 1017], "showseem": [4, 9, 46, 55, 123, 169, 198, 223, 227, 259, 295, 304, 343, 344, 371, 372, 377, 401, 487, 963, 967], "regim": [4, 385, 884, 885, 966], "overal": [4, 43, 48, 113, 116, 130, 155, 216, 255, 278, 305, 306, 344, 358, 371, 372, 378, 394, 395, 404, 407, 433, 435, 450, 457, 458, 464, 535, 865, 964, 967, 983, 991, 1019], "closer": [4, 27, 37, 98, 100, 129, 150, 169, 177, 345, 395, 397, 402, 435, 539, 614, 698, 826, 827, 832, 834, 835, 836, 982, 1016], "diagon": [4, 25, 40, 82, 85, 216, 236, 245, 248, 249, 252, 330, 394, 397, 399, 407, 439, 457, 458, 464, 467, 497, 499, 513, 518, 536, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 636, 637, 640, 641, 642, 668, 669, 687, 701, 775, 780, 781, 828, 836, 961, 963, 966, 967, 970, 977, 1015, 1017, 1018, 1019], "obtain": [4, 7, 9, 12, 27, 48, 55, 57, 58, 71, 74, 75, 100, 103, 120, 123, 124, 128, 136, 147, 152, 154, 168, 169, 182, 198, 200, 212, 223, 243, 244, 245, 254, 258, 259, 260, 264, 267, 305, 313, 328, 344, 345, 352, 354, 367, 369, 383, 385, 391, 395, 397, 399, 400, 402, 404, 405, 406, 407, 423, 428, 455, 482, 518, 519, 541, 542, 543, 544, 545, 546, 549, 550, 551, 579, 592, 600, 631, 645, 647, 652, 654, 658, 660, 662, 663, 673, 694, 698, 711, 724, 741, 776, 788, 809, 812, 813, 816, 830, 841, 861, 873, 886, 889, 892, 893, 921, 957, 959, 961, 963, 964, 966, 967, 968, 970, 971, 973, 974, 977, 981, 982, 1015, 1017, 1020, 1022, 1023, 1024], "slightli": [4, 25, 64, 82, 113, 120, 123, 126, 130, 147, 150, 151, 152, 170, 177, 198, 216, 222, 224, 266, 278, 310, 327, 345, 371, 372, 383, 395, 397, 404, 405, 407, 409, 432, 574, 575, 577, 624, 644, 785, 786, 884, 886, 889, 920, 921, 956, 963, 977, 981, 982, 1018, 1022, 1023], "cost": [4, 39, 98, 116, 150, 165, 174, 219, 232, 260, 267, 310, 330, 344, 345, 347, 353, 372, 378, 380, 383, 397, 404, 464, 486, 523, 524, 525, 532, 543, 544, 545, 546, 550, 551, 588, 596, 605, 613, 632, 633, 638, 639, 646, 647, 648, 649, 654, 658, 660, 662, 664, 673, 674, 678, 810, 884, 885, 886, 889, 892, 893, 894, 895, 921, 959, 963, 964, 967, 970, 980, 981, 982, 989, 1004, 1015, 1018, 1019], "durat": [4, 8, 198, 216, 280, 345, 359, 933, 934, 963], "regressor": [4, 75, 86, 124, 129, 130, 133, 150, 155, 163, 165, 168, 176, 178, 180, 182, 198, 201, 215, 216, 217, 311, 312, 358, 372, 374, 383, 385, 395, 398, 407, 418, 422, 451, 468, 469, 470, 471, 510, 537, 538, 539, 540, 541, 542, 543, 544, 546, 548, 551, 552, 553, 554, 555, 556, 591, 592, 595, 597, 618, 619, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 653, 655, 656, 658, 659, 664, 665, 687, 812, 813, 816, 817, 818, 827, 835, 840, 841, 842, 845, 851, 859, 864, 865, 885, 887, 890, 892, 893, 894, 895, 898, 913, 915, 956, 957, 963, 967, 968, 970, 975, 981, 987, 989, 997, 1004, 1009, 1010, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1024], "mlpregressor": [4, 169, 237, 360, 840, 841, 971, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "hidden": [4, 169, 296, 297, 380, 394, 402, 840, 841, 842, 971, 972, 987, 1009, 1020], "layer": [4, 165, 214, 237, 293, 296, 297, 298, 358, 380, 404, 500, 501, 508, 553, 810, 840, 841, 842, 845, 864, 972, 989, 1004, 1015], "cyclic": [4, 632, 633, 638, 639, 646, 647, 648, 649, 1021], "within": [4, 60, 115, 117, 118, 129, 144, 146, 147, 194, 199, 200, 210, 216, 237, 256, 257, 261, 271, 300, 301, 312, 328, 331, 338, 345, 354, 358, 367, 372, 376, 381, 383, 385, 386, 394, 395, 397, 398, 401, 403, 404, 408, 430, 434, 447, 449, 450, 455, 460, 501, 535, 553, 554, 555, 556, 579, 580, 618, 678, 682, 685, 696, 710, 766, 780, 781, 787, 788, 800, 801, 808, 809, 824, 825, 826, 827, 832, 834, 835, 836, 843, 844, 845, 857, 865, 869, 870, 872, 873, 874, 875, 886, 887, 888, 889, 890, 892, 893, 894, 895, 956, 961, 963, 964, 970, 973, 977, 980, 982, 983, 988, 991, 993, 997, 1000, 1002, 1011, 1012, 1016, 1017, 1022, 1023], "finer": [4, 37, 280, 330, 359, 397, 401, 956, 970, 1019], "resolut": [4, 11, 17, 105, 169, 290, 291, 330, 386, 395, 993, 1019], "taken": [4, 7, 31, 42, 53, 55, 125, 155, 168, 231, 232, 246, 264, 302, 367, 369, 371, 372, 376, 385, 391, 396, 397, 401, 405, 407, 409, 426, 519, 569, 570, 632, 633, 636, 638, 639, 640, 644, 645, 646, 647, 648, 649, 663, 665, 667, 670, 681, 857, 858, 878, 881, 887, 888, 967, 969, 977, 979, 1015, 1018, 1021, 1022], "everi": [4, 95, 162, 196, 199, 220, 233, 244, 249, 267, 313, 354, 367, 370, 372, 374, 376, 380, 385, 397, 399, 401, 402, 405, 426, 440, 494, 517, 522, 525, 531, 543, 545, 546, 550, 576, 577, 589, 632, 633, 635, 638, 639, 645, 646, 647, 648, 649, 650, 651, 652, 654, 658, 659, 660, 661, 662, 671, 672, 673, 678, 682, 739, 756, 764, 765, 795, 833, 892, 894, 896, 898, 910, 960, 962, 967, 968, 969, 977, 983, 991, 997, 1009, 1013, 1015, 1018, 1022], "offer": [4, 116, 374, 380, 383, 384, 388, 401, 402, 404, 405, 956, 957, 968, 971, 983, 987, 988, 991, 1015], "view": [4, 16, 30, 42, 46, 78, 97, 169, 195, 238, 358, 360, 372, 397, 405, 522, 631, 643, 824, 825, 899, 963, 964], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 55, 57, 61, 78, 79, 80, 81, 82, 91, 96, 97, 98, 105, 111, 112, 123, 126, 160, 163, 177, 182, 188, 227, 231, 245, 246, 250, 283, 291, 304, 327, 361, 364, 368, 374, 377, 385, 397, 399, 402, 403, 409, 438, 455, 456, 457, 458, 459, 460, 461, 462, 482, 490, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 516, 518, 530, 535, 536, 549, 596, 597, 599, 600, 601, 603, 604, 605, 608, 609, 611, 613, 629, 630, 658, 663, 666, 689, 709, 726, 737, 761, 780, 781, 782, 796, 819, 820, 821, 822, 823, 824, 825, 829, 860, 864, 872, 876, 877, 878, 961, 963, 964, 965, 973, 989, 991, 1001, 1003, 1004, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1019, 1021, 1023], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 57, 58, 60, 61, 62, 64, 65, 66, 71, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 101, 102, 103, 108, 111, 113, 115, 117, 118, 119, 122, 123, 125, 126, 127, 130, 133, 134, 139, 142, 143, 146, 150, 151, 154, 156, 157, 159, 162, 163, 165, 166, 167, 172, 177, 178, 179, 180, 182, 187, 188, 192, 193, 196, 197, 198, 199, 200, 201, 204, 205, 207, 211, 212, 215, 216, 219, 220, 222, 223, 224, 226, 227, 232, 233, 235, 236, 241, 243, 244, 246, 247, 248, 249, 251, 253, 255, 258, 259, 261, 263, 265, 267, 268, 269, 270, 272, 274, 276, 278, 283, 284, 285, 290, 294, 301, 303, 304, 307, 311, 312, 314, 318, 319, 322, 323, 329, 330, 332, 333, 335, 336, 337, 338, 340, 343, 344, 350, 351, 358, 359, 361, 364, 368, 375, 377, 383, 384, 385, 392, 395, 397, 405, 406, 420, 426, 429, 433, 435, 437, 438, 439, 440, 444, 445, 446, 448, 450, 455, 456, 457, 458, 459, 460, 461, 462, 474, 475, 476, 477, 478, 481, 482, 483, 488, 489, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 521, 522, 524, 525, 526, 527, 530, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 559, 568, 569, 570, 575, 593, 594, 596, 597, 613, 616, 618, 620, 625, 626, 627, 628, 629, 632, 633, 635, 636, 638, 639, 640, 644, 646, 647, 648, 649, 656, 657, 658, 662, 663, 664, 665, 675, 676, 677, 678, 679, 680, 681, 687, 690, 691, 694, 716, 728, 766, 776, 780, 781, 782, 784, 785, 786, 787, 794, 796, 797, 798, 799, 800, 801, 802, 803, 809, 810, 815, 817, 818, 819, 820, 821, 823, 824, 825, 829, 833, 840, 841, 842, 844, 847, 849, 858, 861, 865, 873, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 907, 920, 921, 938, 941, 957, 959, 962, 964, 966, 967, 971, 972, 973, 975, 977, 982, 983, 987, 988, 989, 993, 997, 998, 1000, 1001, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "constant": [4, 105, 113, 153, 157, 163, 168, 186, 199, 200, 202, 216, 229, 238, 261, 290, 295, 297, 301, 303, 311, 338, 340, 354, 364, 374, 381, 385, 394, 404, 407, 418, 432, 451, 468, 469, 470, 497, 499, 520, 524, 526, 533, 535, 536, 537, 538, 540, 542, 544, 546, 548, 551, 554, 556, 576, 592, 595, 597, 599, 613, 616, 618, 619, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 673, 675, 679, 681, 707, 708, 709, 713, 760, 762, 770, 817, 818, 827, 835, 841, 842, 849, 860, 863, 872, 884, 885, 886, 887, 888, 889, 890, 891, 893, 895, 961, 963, 964, 967, 969, 970, 977, 981, 983, 1004, 1012, 1017, 1019, 1021, 1022, 1023], "varianc": [4, 5, 27, 44, 55, 57, 62, 73, 78, 80, 85, 86, 95, 96, 97, 100, 103, 104, 106, 108, 125, 134, 157, 159, 165, 168, 176, 178, 182, 187, 198, 200, 203, 216, 217, 248, 255, 258, 261, 267, 268, 271, 287, 294, 300, 305, 344, 354, 364, 368, 381, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 407, 409, 427, 431, 435, 449, 507, 510, 518, 519, 520, 527, 530, 535, 536, 541, 542, 544, 545, 546, 551, 589, 593, 594, 597, 611, 629, 630, 631, 638, 642, 643, 646, 648, 658, 659, 660, 661, 662, 673, 696, 713, 770, 780, 781, 822, 833, 848, 854, 860, 862, 864, 870, 872, 874, 875, 893, 895, 942, 943, 944, 948, 961, 962, 963, 965, 970, 971, 972, 979, 981, 982, 983, 984, 989, 998, 1000, 1001, 1004, 1009, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "poisson": [4, 165, 176, 217, 234, 368, 404, 450, 451, 482, 509, 538, 544, 548, 551, 634, 655, 658, 666, 692, 709, 730, 734, 735, 737, 810, 844, 845, 848, 849, 857, 858, 859, 864, 893, 895, 925, 963, 983, 1019, 1020, 1021, 1022, 1023, 1025], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 100, 131, 139, 174, 212, 227, 232, 233, 256, 258, 260, 263, 269, 273, 312, 318, 319, 321, 323, 327, 329, 330, 333, 334, 336, 337, 340, 400, 402, 407, 438, 521, 548, 605, 606, 625, 626, 627, 629, 630, 631, 634, 666, 671, 677, 709, 732, 737, 744, 751, 760, 761, 762, 780, 793, 796, 879, 880, 881, 886, 887, 888, 889, 890, 956, 959, 962, 963, 965, 980, 982, 993, 997, 998, 1000, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1023, 1024, 1025], "achiev": [4, 12, 17, 19, 27, 31, 98, 110, 119, 121, 128, 158, 174, 198, 206, 255, 258, 265, 305, 321, 330, 333, 338, 343, 354, 358, 360, 366, 367, 369, 374, 378, 383, 385, 394, 395, 397, 401, 402, 404, 405, 539, 544, 551, 626, 635, 662, 664, 693, 725, 748, 785, 786, 820, 864, 956, 957, 959, 963, 967, 977, 980, 982, 990, 1002, 1022], "gridsearchcv": [4, 54, 69, 71, 73, 74, 76, 78, 103, 116, 165, 233, 238, 248, 251, 256, 257, 258, 259, 263, 266, 269, 274, 280, 282, 297, 302, 312, 330, 354, 359, 374, 383, 385, 398, 401, 488, 506, 526, 527, 561, 585, 593, 639, 689, 727, 793, 796, 844, 854, 884, 892, 956, 963, 967, 971, 981, 982, 987, 988, 997, 998, 1002, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024], "tweedieregressor": [4, 311, 314, 634, 655, 963, 1020, 1023, 1024], "power": [4, 7, 17, 116, 121, 167, 199, 216, 249, 261, 266, 282, 300, 301, 304, 318, 327, 358, 359, 384, 395, 397, 400, 403, 404, 405, 408, 430, 468, 469, 470, 518, 521, 527, 530, 616, 666, 680, 709, 732, 734, 737, 826, 827, 834, 835, 837, 838, 859, 860, 861, 872, 873, 920, 921, 963, 964, 967, 975, 977, 981, 982, 991, 1012, 1015, 1017, 1019, 1020, 1022], "param_grid": [4, 6, 71, 72, 73, 74, 116, 123, 233, 238, 248, 256, 257, 258, 262, 263, 266, 269, 280, 302, 330, 385, 398, 404, 727, 782, 785, 793, 794, 956, 967, 997, 998], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 349, 350, 351, 352, 353, 359, 366, 367, 369, 378, 385, 394, 397, 403, 405, 408, 418, 430, 451, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 483, 486, 487, 488, 490, 491, 496, 498, 500, 501, 505, 508, 509, 522, 523, 530, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 554, 556, 569, 570, 576, 580, 582, 597, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 662, 663, 664, 665, 683, 690, 691, 699, 714, 715, 716, 719, 723, 724, 742, 754, 768, 769, 772, 777, 778, 779, 782, 796, 805, 806, 807, 817, 818, 819, 820, 827, 829, 835, 842, 859, 863, 885, 887, 890, 892, 893, 894, 895, 921, 956, 963, 964, 967, 968, 969, 970, 977, 981, 982, 983, 998, 1002, 1010, 1015, 1017, 1025], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 354, 359, 372, 373, 374, 375, 376, 378, 383, 385, 388, 405, 988, 990, 1002], "492": [4, 15, 86, 87, 629, 960, 1000], "secondplot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 359, 370, 372, 373, 376, 378, 380, 385, 388, 405, 408, 426, 430, 440, 447, 451, 484, 516, 630, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 853, 854, 856, 859, 860, 861, 862, 863, 864, 869, 870, 871, 872, 873, 874, 875, 916, 967, 987, 1000, 1002, 1009, 1011, 1015, 1019, 1023], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 373, 398, 454, 882, 983, 987, 988, 1020, 1023], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 367, 372, 374, 385, 388, 390, 998, 1009, 1013, 1016], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 372, 376, 385, 388, 390, 1002, 1009, 1016], "kernelpca": [5, 398, 402, 519, 520, 527, 530, 674, 676, 678, 850, 977, 1010, 1011, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "take": [5, 8, 27, 30, 46, 53, 55, 57, 66, 75, 80, 90, 92, 95, 110, 119, 150, 152, 155, 159, 168, 174, 181, 206, 207, 223, 245, 246, 253, 259, 263, 267, 268, 276, 278, 281, 284, 285, 286, 288, 289, 300, 314, 321, 326, 327, 330, 340, 344, 345, 349, 358, 359, 360, 366, 367, 370, 372, 374, 377, 378, 379, 380, 383, 385, 386, 395, 397, 398, 400, 401, 402, 404, 405, 406, 407, 409, 423, 429, 432, 433, 435, 436, 438, 443, 444, 445, 447, 449, 455, 505, 519, 524, 525, 526, 532, 533, 567, 578, 581, 582, 584, 585, 586, 596, 597, 602, 606, 607, 610, 618, 629, 635, 657, 659, 660, 661, 662, 665, 677, 678, 685, 691, 693, 695, 705, 714, 715, 723, 727, 728, 741, 756, 759, 763, 764, 765, 766, 768, 769, 772, 773, 782, 783, 787, 788, 796, 800, 808, 826, 827, 828, 830, 832, 833, 834, 835, 836, 848, 858, 879, 880, 884, 885, 886, 887, 888, 889, 890, 908, 937, 956, 959, 963, 964, 966, 967, 968, 970, 972, 973, 974, 977, 982, 983, 991, 993, 997, 999, 1006, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "exact": [5, 7, 82, 100, 116, 155, 202, 232, 278, 354, 358, 359, 366, 372, 374, 381, 383, 384, 385, 397, 404, 406, 407, 420, 468, 469, 470, 474, 482, 520, 521, 527, 547, 548, 624, 628, 632, 678, 782, 796, 805, 806, 807, 886, 889, 956, 959, 963, 964, 973, 977, 981, 982, 1016, 1017, 1019], "usp": 5, "digit": [5, 29, 35, 36, 51, 68, 72, 88, 93, 135, 140, 145, 165, 189, 205, 214, 218, 223, 225, 231, 232, 256, 257, 260, 282, 287, 293, 295, 296, 298, 317, 324, 365, 372, 378, 397, 403, 404, 406, 427, 431, 433, 488, 527, 530, 535, 552, 644, 674, 675, 676, 677, 678, 683, 690, 691, 699, 703, 704, 722, 776, 778, 806, 810, 826, 833, 840, 844, 845, 854, 864, 870, 877, 880, 889, 896, 897, 898, 956, 962, 964, 967, 970, 972, 980, 993, 997, 1000, 1001, 1004, 1013], "reproduc": [5, 12, 60, 110, 168, 174, 186, 267, 297, 359, 361, 371, 372, 374, 375, 380, 383, 385, 391, 397, 401, 402, 405, 409, 426, 440, 446, 455, 460, 474, 477, 478, 481, 483, 489, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 537, 539, 540, 541, 542, 545, 546, 547, 548, 549, 593, 594, 596, 597, 620, 625, 626, 627, 628, 632, 633, 636, 638, 639, 640, 646, 647, 648, 649, 652, 653, 654, 657, 662, 664, 665, 675, 676, 678, 679, 680, 776, 780, 781, 784, 785, 786, 787, 788, 794, 796, 797, 798, 799, 800, 801, 802, 808, 809, 810, 814, 815, 818, 829, 833, 840, 841, 842, 849, 861, 865, 873, 876, 877, 884, 885, 886, 889, 920, 921, 938, 941, 959, 987, 990, 1009, 1017, 1022, 1023], "sect": 5, "bak\u0131r": [5, 402, 521], "g\u00f6khan": [5, 402, 521], "h": [5, 6, 48, 58, 95, 96, 109, 110, 111, 128, 152, 168, 245, 283, 286, 294, 302, 314, 323, 326, 345, 369, 378, 395, 397, 399, 402, 403, 404, 405, 408, 430, 505, 518, 521, 524, 526, 533, 539, 553, 554, 568, 576, 593, 594, 675, 679, 690, 694, 742, 819, 823, 824, 825, 830, 840, 855, 864, 959, 961, 963, 964, 965, 967, 969, 971, 972, 981, 983, 998, 1015, 1020, 1024, 1025], "jason": [5, 402, 521, 880, 1015, 1017, 1021, 1024], "weston": [5, 402, 521, 579, 580, 880], "bernhard": [5, 402, 521, 815, 850, 880, 968, 973, 982, 1015], "sch\u00f6lkopf": [5, 402, 521, 850, 973, 977, 982], "pre": [5, 71, 120, 168, 187, 300, 345, 361, 370, 372, 385, 388, 399, 401, 402, 404, 405, 406, 408, 409, 429, 430, 433, 445, 519, 521, 676, 698, 748, 847, 889, 967, 972, 977, 982, 983, 987, 988, 1004, 1012, 1017, 1023], "advanc": [5, 165, 226, 228, 241, 258, 360, 397, 402, 475, 487, 521, 618, 625, 768, 780, 833, 842, 845, 864, 893, 959, 970, 977, 991, 1006, 1011], "neural": [5, 6, 31, 258, 296, 361, 383, 385, 391, 401, 402, 404, 409, 519, 521, 524, 526, 533, 553, 554, 625, 631, 682, 726, 780, 833, 840, 841, 842, 850, 959, 963, 964, 965, 967, 970, 973, 977, 981, 983, 987, 989, 991, 998, 1003, 1004, 1009, 1021], "system": [5, 100, 182, 258, 265, 354, 358, 359, 360, 367, 369, 372, 373, 374, 375, 380, 383, 388, 397, 402, 404, 408, 430, 457, 458, 464, 521, 525, 529, 536, 625, 631, 636, 637, 640, 641, 642, 668, 669, 711, 741, 754, 780, 833, 879, 880, 935, 963, 967, 970, 979, 987, 988, 991, 1002, 1009, 1017, 1018], "2004": [5, 147, 258, 367, 369, 397, 399, 402, 459, 521, 593, 594, 675, 679, 691, 728, 768, 880, 961, 963, 964, 969, 982, 1000], "449": [5, 111, 134, 154, 160, 402, 521], "456": [5, 402, 521], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 56, 57, 61, 65, 66, 67, 70, 71, 72, 74, 75, 82, 95, 97, 99, 100, 101, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 129, 130, 147, 150, 151, 153, 154, 155, 156, 157, 159, 163, 174, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 191, 192, 198, 199, 200, 202, 203, 205, 206, 213, 214, 215, 216, 219, 220, 221, 222, 224, 227, 230, 232, 233, 234, 236, 243, 245, 246, 257, 259, 261, 262, 264, 271, 276, 278, 280, 283, 290, 291, 294, 297, 300, 301, 303, 304, 305, 318, 319, 320, 321, 323, 338, 343, 344, 345, 366, 372, 376, 380, 383, 385, 386, 401, 437, 520, 851, 959, 985, 987, 1012], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 57, 75, 82, 116, 156, 177, 182, 183, 185, 189, 191, 192, 203, 220, 221, 227, 230, 259, 261, 264, 271, 290, 305, 338, 343, 344, 345, 517, 523, 644, 650, 671, 672, 743, 744, 965, 967], "licenc": [5, 366], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 129, 130, 147, 150, 151, 153, 154, 155, 156, 157, 159, 163, 174, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 203, 205, 206, 214, 215, 216, 220, 221, 222, 224, 227, 230, 232, 233, 234, 236, 243, 245, 259, 262, 264, 271, 276, 278, 280, 286, 287, 288, 290, 291, 294, 297, 300, 301, 302, 303, 304, 305, 318, 319, 320, 321, 323, 334, 335, 338, 339, 343, 344, 345, 378], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 129, 130, 147, 150, 151, 153, 154, 155, 156, 157, 159, 163, 174, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 203, 205, 206, 214, 215, 216, 220, 221, 227, 232, 233, 234, 236, 243, 245, 259, 264, 271, 276, 278, 280, 286, 287, 288, 290, 291, 294, 300, 301, 302, 303, 304, 305, 334, 335, 338, 339, 343, 344, 345], "normal": [5, 12, 17, 19, 26, 29, 34, 35, 37, 40, 44, 46, 57, 61, 62, 66, 73, 75, 78, 79, 80, 85, 86, 96, 101, 110, 111, 113, 116, 122, 123, 126, 127, 142, 153, 156, 157, 163, 165, 167, 168, 176, 177, 178, 179, 180, 182, 188, 191, 193, 196, 200, 201, 202, 204, 212, 217, 222, 236, 243, 248, 249, 252, 255, 258, 264, 283, 284, 299, 301, 305, 308, 311, 314, 321, 330, 344, 345, 354, 361, 364, 367, 368, 369, 372, 377, 381, 384, 385, 394, 395, 397, 398, 400, 403, 404, 405, 409, 426, 435, 437, 438, 439, 448, 450, 451, 461, 468, 469, 470, 475, 482, 498, 501, 505, 512, 513, 519, 522, 527, 528, 530, 534, 535, 538, 539, 540, 543, 544, 545, 546, 548, 549, 550, 551, 552, 565, 566, 568, 574, 575, 576, 577, 597, 611, 613, 625, 636, 637, 640, 641, 642, 644, 645, 650, 651, 655, 658, 662, 666, 673, 677, 681, 683, 689, 690, 692, 704, 709, 711, 719, 721, 726, 730, 734, 735, 737, 740, 741, 742, 746, 755, 777, 778, 779, 785, 786, 810, 812, 821, 823, 829, 830, 833, 844, 845, 848, 849, 852, 853, 854, 857, 858, 859, 860, 861, 862, 864, 869, 870, 872, 873, 874, 875, 879, 880, 892, 893, 894, 895, 920, 921, 925, 943, 944, 949, 950, 956, 961, 963, 964, 965, 966, 969, 973, 978, 980, 982, 983, 998, 1000, 1001, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "pixel": [5, 6, 13, 32, 47, 48, 53, 95, 108, 134, 145, 165, 174, 231, 256, 296, 297, 369, 397, 402, 404, 405, 406, 479, 480, 481, 550, 571, 572, 593, 594, 620, 970, 972, 983, 998, 1001], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 71, 75, 86, 100, 109, 115, 117, 121, 122, 123, 124, 125, 126, 129, 143, 144, 167, 168, 170, 171, 174, 182, 193, 198, 205, 206, 213, 214, 216, 228, 239, 240, 252, 255, 256, 261, 265, 267, 271, 276, 286, 287, 294, 296, 297, 302, 304, 305, 307, 310, 311, 312, 322, 348, 352, 354, 377, 384, 398, 401, 404, 423, 424, 544, 546, 553, 554, 683, 684, 686, 688, 782, 812, 815, 833, 841, 842, 844, 894, 895, 956, 957, 967, 969, 970, 975, 977, 982, 998, 1006, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1022], "data_id": [5, 120, 155, 168, 198, 216, 228, 306, 366, 482], "41082": 5, "return_x_i": [5, 7, 14, 58, 70, 71, 72, 73, 95, 116, 120, 121, 133, 136, 137, 138, 143, 162, 163, 170, 174, 183, 185, 186, 187, 189, 194, 195, 205, 213, 214, 228, 235, 239, 240, 254, 257, 260, 265, 266, 273, 276, 280, 287, 295, 296, 297, 305, 310, 312, 314, 315, 321, 333, 345, 348, 365, 377, 378, 384, 391, 397, 398, 401, 404, 406, 432, 474, 475, 476, 477, 478, 480, 481, 482, 483, 486, 487, 488, 490, 491, 496, 518, 519, 520, 521, 544, 547, 548, 553, 554, 578, 581, 582, 584, 585, 586, 588, 596, 605, 606, 608, 609, 624, 625, 644, 645, 654, 659, 660, 661, 674, 675, 676, 677, 687, 773, 785, 786, 788, 812, 817, 828, 833, 836, 893, 894, 895, 957, 962, 967, 968, 969, 970, 977, 993, 997, 998, 1000, 1001, 1006, 1015, 1017, 1019, 1022], "idea": [5, 53, 80, 81, 116, 147, 155, 168, 199, 219, 283, 330, 348, 358, 359, 372, 377, 378, 399, 400, 401, 402, 403, 404, 406, 593, 594, 963, 964, 967, 970, 973, 986, 991, 1002], "noisi": [5, 33, 49, 55, 62, 96, 143, 150, 156, 182, 197, 200, 202, 222, 230, 249, 259, 265, 267, 268, 305, 350, 351, 354, 397, 405, 408, 430, 432, 436, 507, 510, 921, 962, 964, 970, 982, 987], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 30, 34, 37, 42, 50, 53, 57, 61, 66, 71, 72, 75, 79, 80, 95, 97, 98, 105, 111, 116, 126, 129, 132, 151, 155, 158, 159, 168, 169, 171, 174, 177, 178, 180, 182, 184, 188, 189, 190, 192, 197, 198, 199, 200, 207, 208, 209, 211, 213, 214, 216, 221, 222, 224, 230, 231, 232, 233, 237, 243, 245, 249, 253, 254, 256, 258, 261, 263, 268, 269, 272, 283, 284, 285, 297, 301, 302, 304, 306, 307, 313, 314, 316, 322, 323, 328, 329, 331, 332, 333, 337, 338, 340, 343, 344, 348, 351, 352, 353, 358, 360, 367, 369, 372, 374, 377, 378, 394, 397, 398, 401, 402, 403, 404, 405, 423, 427, 431, 435, 457, 458, 464, 476, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 514, 516, 517, 520, 522, 523, 525, 530, 531, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 596, 617, 618, 619, 625, 626, 627, 628, 632, 633, 634, 635, 638, 639, 644, 645, 646, 647, 648, 649, 651, 653, 655, 657, 666, 667, 670, 674, 675, 676, 677, 679, 731, 780, 781, 784, 808, 809, 814, 819, 820, 821, 823, 824, 825, 829, 841, 842, 860, 862, 865, 874, 956, 957, 960, 964, 967, 968, 974, 977, 979, 993, 997, 1001, 1002, 1017, 1018, 1019, 1022, 1023], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 55, 61, 62, 67, 75, 86, 95, 96, 98, 100, 103, 111, 113, 123, 127, 128, 149, 150, 155, 160, 165, 177, 179, 180, 182, 187, 188, 193, 196, 197, 200, 201, 203, 215, 222, 224, 227, 229, 230, 233, 258, 266, 271, 272, 290, 294, 295, 302, 307, 311, 337, 350, 351, 354, 368, 374, 377, 395, 397, 402, 404, 406, 408, 430, 432, 438, 497, 499, 500, 501, 502, 503, 504, 508, 510, 511, 516, 518, 520, 527, 593, 594, 597, 599, 600, 601, 602, 603, 607, 608, 610, 611, 630, 631, 635, 636, 637, 639, 640, 641, 642, 649, 650, 651, 657, 665, 678, 861, 873, 879, 960, 962, 963, 964, 967, 970, 980, 1000, 1001, 1010, 1015, 1020, 1022, 1023], "approach": [5, 8, 58, 63, 66, 99, 147, 150, 162, 168, 171, 180, 186, 198, 200, 206, 216, 219, 306, 343, 344, 345, 360, 371, 372, 378, 381, 385, 388, 391, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 423, 429, 432, 434, 438, 448, 506, 518, 568, 575, 621, 644, 645, 660, 661, 813, 829, 921, 956, 957, 963, 964, 967, 968, 970, 971, 977, 981, 982, 986, 987, 991, 995, 1000, 1001, 1013, 1025], "copi": [5, 12, 17, 44, 62, 75, 98, 113, 162, 163, 168, 169, 170, 184, 191, 204, 214, 216, 220, 278, 318, 319, 321, 323, 344, 349, 359, 369, 372, 374, 376, 377, 378, 383, 385, 420, 423, 426, 428, 429, 430, 432, 433, 435, 440, 445, 468, 469, 470, 471, 486, 488, 496, 518, 519, 520, 521, 527, 534, 539, 540, 545, 547, 548, 558, 576, 583, 593, 594, 596, 597, 614, 616, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 657, 658, 660, 665, 667, 670, 671, 672, 717, 754, 775, 782, 796, 824, 825, 839, 847, 850, 853, 854, 855, 856, 860, 861, 862, 864, 867, 869, 870, 871, 872, 873, 874, 875, 879, 880, 884, 886, 887, 888, 889, 890, 899, 902, 904, 905, 938, 940, 941, 977, 982, 983, 988, 994, 997, 1002, 1009, 1012, 1015, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "add": [5, 12, 16, 17, 25, 26, 27, 32, 33, 40, 44, 54, 75, 80, 81, 86, 96, 119, 122, 143, 147, 150, 155, 156, 157, 162, 163, 180, 187, 193, 199, 201, 213, 222, 227, 231, 233, 265, 267, 268, 278, 290, 302, 304, 310, 312, 313, 333, 337, 338, 344, 358, 370, 371, 372, 373, 374, 376, 378, 380, 385, 388, 395, 401, 404, 405, 406, 501, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 588, 613, 614, 616, 618, 644, 645, 680, 683, 803, 824, 825, 881, 911, 935, 956, 957, 966, 973, 977, 980, 981, 988, 1000, 1001, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "corrupt": [5, 103, 182, 204, 215, 383, 840, 963, 975], "uncorrupt": 5, "base": [5, 12, 14, 17, 25, 26, 27, 49, 56, 57, 58, 67, 70, 71, 75, 80, 95, 96, 109, 111, 116, 122, 123, 124, 128, 130, 133, 141, 144, 148, 150, 155, 156, 158, 169, 170, 171, 176, 187, 198, 199, 206, 215, 216, 217, 219, 227, 234, 255, 256, 261, 278, 291, 297, 300, 301, 303, 305, 312, 314, 323, 328, 344, 348, 358, 359, 361, 366, 367, 368, 369, 370, 373, 374, 375, 380, 385, 386, 387, 395, 398, 402, 403, 405, 407, 408, 409, 423, 430, 432, 433, 434, 435, 436, 438, 442, 443, 447, 449, 450, 451, 452, 453, 473, 487, 494, 495, 518, 519, 521, 522, 523, 524, 525, 527, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 564, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 592, 593, 594, 596, 597, 602, 603, 604, 607, 610, 618, 619, 621, 622, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 650, 655, 657, 658, 659, 660, 661, 666, 668, 669, 671, 672, 673, 676, 678, 690, 703, 711, 720, 721, 722, 724, 726, 740, 741, 742, 770, 778, 782, 784, 785, 786, 788, 789, 791, 796, 800, 801, 802, 803, 808, 810, 814, 815, 818, 826, 827, 828, 830, 832, 834, 835, 836, 841, 842, 846, 849, 856, 857, 859, 863, 865, 873, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 907, 915, 935, 936, 956, 958, 959, 961, 962, 964, 967, 968, 969, 970, 971, 972, 973, 974, 977, 979, 980, 981, 982, 983, 986, 987, 988, 989, 991, 997, 1004, 1005, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020], "solv": [5, 6, 66, 150, 187, 232, 258, 371, 372, 373, 374, 377, 383, 397, 399, 401, 402, 407, 433, 439, 448, 464, 517, 523, 524, 525, 529, 531, 532, 533, 534, 621, 623, 632, 638, 640, 641, 650, 651, 656, 658, 660, 663, 671, 672, 673, 814, 884, 885, 888, 921, 958, 961, 963, 964, 967, 968, 981, 982, 983, 986, 987, 991, 995, 998, 1002, 1015, 1019, 1022], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 109, 110, 113, 117, 121, 122, 123, 124, 125, 126, 129, 138, 139, 143, 144, 156, 157, 158, 159, 167, 168, 169, 170, 171, 174, 178, 182, 193, 195, 196, 199, 205, 206, 212, 213, 214, 216, 228, 235, 239, 240, 245, 247, 252, 255, 256, 261, 265, 267, 271, 276, 284, 286, 287, 294, 296, 297, 302, 304, 305, 307, 310, 311, 312, 321, 322, 329, 343, 348, 352, 354, 358, 366, 374, 377, 384, 398, 401, 404, 423, 424, 495, 544, 545, 546, 553, 554, 683, 684, 686, 688, 810, 812, 815, 833, 841, 842, 844, 858, 894, 895, 957, 967, 969, 970, 971, 973, 975, 977, 981, 982, 997, 998, 1006], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 109, 110, 113, 115, 117, 121, 122, 123, 124, 125, 126, 129, 138, 139, 143, 144, 155, 158, 167, 168, 169, 170, 171, 174, 178, 182, 188, 193, 195, 196, 204, 205, 206, 212, 213, 214, 216, 228, 230, 235, 239, 240, 245, 252, 255, 256, 261, 265, 267, 271, 272, 276, 284, 286, 287, 294, 296, 297, 302, 304, 305, 307, 310, 311, 312, 321, 322, 329, 343, 348, 350, 351, 352, 354, 358, 366, 374, 377, 384, 398, 401, 404, 424, 456, 457, 458, 459, 460, 461, 462, 495, 544, 545, 546, 553, 554, 683, 684, 686, 688, 810, 812, 815, 833, 841, 842, 844, 858, 894, 895, 957, 967, 969, 970, 971, 973, 977, 981, 982, 983, 997, 998, 1000, 1006, 1009], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 109, 110, 113, 117, 121, 122, 123, 124, 125, 126, 129, 138, 139, 143, 144, 156, 157, 158, 159, 167, 168, 169, 170, 171, 174, 178, 182, 193, 195, 196, 199, 205, 206, 213, 214, 228, 235, 239, 240, 245, 252, 255, 256, 261, 265, 267, 271, 276, 286, 287, 294, 296, 297, 302, 305, 307, 310, 311, 312, 318, 319, 321, 322, 323, 343, 348, 352, 354, 358, 366, 374, 377, 384, 398, 401, 404, 423, 424, 544, 545, 546, 553, 554, 683, 684, 686, 688, 810, 812, 815, 833, 841, 842, 844, 894, 895, 957, 967, 969, 970, 975, 977, 982, 997, 998, 1006], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 109, 110, 113, 115, 117, 121, 122, 123, 124, 125, 126, 129, 138, 139, 143, 144, 158, 167, 168, 169, 170, 171, 174, 182, 193, 195, 198, 204, 205, 206, 213, 214, 216, 228, 235, 239, 240, 245, 252, 255, 256, 261, 265, 267, 271, 276, 286, 287, 294, 296, 297, 302, 305, 307, 310, 311, 312, 321, 322, 343, 348, 352, 354, 366, 377, 384, 398, 401, 404, 424, 544, 545, 546, 553, 554, 683, 684, 686, 688, 810, 812, 815, 833, 841, 842, 844, 894, 895, 967, 969, 970, 977, 982, 997, 998, 1006, 1009], "stratifi": [5, 100, 117, 126, 143, 170, 213, 228, 240, 253, 258, 261, 267, 286, 287, 310, 374, 385, 537, 545, 553, 554, 588, 645, 652, 654, 662, 782, 785, 786, 788, 796, 797, 798, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 815, 818, 833, 841, 938, 967, 970, 997, 1014, 1015, 1016, 1018, 1019, 1022], "train_siz": [5, 7, 10, 129, 151, 174, 214, 233, 260, 271, 312, 315, 338, 784, 788, 799, 802, 808, 810, 962, 997, 1009, 1010, 1015, 1016], "1_000": [5, 48, 72, 100, 150, 155, 157, 169, 231, 255, 687], "rng": [5, 20, 21, 31, 37, 50, 81, 86, 95, 97, 103, 111, 123, 126, 127, 129, 150, 151, 154, 156, 157, 159, 162, 163, 167, 170, 177, 178, 179, 180, 182, 187, 192, 199, 200, 205, 212, 227, 233, 235, 236, 243, 253, 261, 264, 269, 270, 294, 304, 307, 311, 312, 314, 318, 319, 323, 333, 338, 350, 351, 354, 359, 374, 377, 456, 460, 461, 462, 629, 635, 656, 658, 664, 794, 819, 820, 821, 823, 824, 825, 829, 832, 834, 835, 836, 861, 873, 876, 877, 879, 880, 881, 890, 993], "randomst": [5, 13, 20, 21, 24, 31, 37, 50, 61, 81, 82, 86, 95, 97, 103, 111, 122, 123, 126, 127, 129, 143, 150, 151, 154, 156, 157, 159, 162, 163, 167, 170, 177, 178, 179, 180, 182, 187, 192, 199, 200, 205, 212, 222, 227, 233, 236, 243, 246, 253, 261, 264, 265, 267, 268, 269, 270, 294, 301, 303, 304, 307, 311, 312, 314, 318, 319, 323, 333, 338, 350, 351, 374, 377, 381, 385, 402, 409, 426, 429, 433, 435, 437, 438, 439, 440, 444, 445, 446, 448, 455, 456, 460, 461, 462, 474, 477, 478, 481, 483, 489, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 569, 570, 593, 594, 596, 597, 613, 618, 620, 625, 626, 627, 628, 629, 632, 633, 635, 636, 638, 639, 640, 644, 645, 646, 647, 648, 649, 652, 653, 654, 656, 657, 658, 660, 662, 663, 664, 665, 673, 675, 676, 677, 678, 679, 680, 681, 687, 766, 776, 780, 781, 784, 785, 786, 787, 788, 794, 796, 797, 798, 799, 800, 801, 802, 808, 809, 810, 814, 815, 818, 819, 820, 821, 823, 824, 825, 829, 833, 840, 841, 842, 849, 861, 865, 873, 876, 877, 879, 880, 881, 884, 885, 886, 889, 890, 892, 893, 894, 895, 907, 920, 921, 936, 938, 941, 977, 993, 1004], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 98, 216, 269, 365, 374, 375, 384, 385, 401, 454, 561, 882, 997, 998, 1009, 1016, 1017, 1018, 1022], "qualit": [5, 6, 53, 55, 61, 116, 123, 198, 315, 367, 397, 425, 687, 998, 1024], "assess": [5, 37, 60, 121, 123, 168, 198, 216, 236, 254, 255, 257, 261, 395, 404, 687, 728, 966, 967, 973, 988, 1024], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 49, 53, 55, 70, 78, 82, 86, 91, 100, 111, 113, 120, 122, 123, 155, 157, 168, 169, 178, 184, 188, 189, 199, 204, 213, 215, 216, 245, 258, 265, 270, 280, 291, 295, 297, 300, 302, 304, 312, 318, 323, 330, 335, 343, 344, 360, 365, 367, 369, 372, 375, 381, 385, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 427, 429, 431, 432, 433, 435, 444, 445, 449, 461, 482, 484, 524, 526, 533, 541, 542, 543, 547, 548, 550, 568, 575, 576, 588, 593, 594, 636, 640, 641, 642, 644, 645, 665, 668, 669, 731, 785, 786, 800, 809, 812, 841, 842, 849, 877, 886, 889, 921, 956, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 974, 975, 977, 979, 980, 983, 988, 991, 1000, 1001, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1025], "img": [5, 50, 66, 492, 572], "ravel": [5, 9, 13, 16, 17, 19, 26, 30, 34, 42, 53, 54, 58, 80, 105, 111, 113, 119, 123, 128, 129, 130, 139, 150, 152, 154, 155, 156, 157, 168, 177, 188, 189, 191, 198, 211, 212, 220, 224, 227, 231, 233, 240, 245, 247, 261, 265, 267, 278, 283, 284, 290, 291, 294, 295, 296, 297, 302, 303, 314, 323, 329, 330, 334, 335, 336, 337, 339, 340, 343, 350, 351, 451, 479, 480, 481, 617, 704, 954, 967], "imshow": [5, 6, 13, 30, 32, 40, 46, 47, 48, 50, 51, 53, 54, 58, 82, 89, 95, 98, 106, 152, 153, 154, 158, 171, 189, 214, 220, 235, 269, 282, 297, 318, 319, 330, 336, 339, 366, 618, 683, 998, 999, 1023], "grei": [5, 34, 268, 300, 367], "off": [5, 12, 13, 37, 39, 40, 47, 48, 52, 53, 78, 82, 85, 95, 116, 220, 232, 235, 252, 257, 259, 260, 300, 319, 323, 330, 340, 343, 367, 372, 374, 397, 399, 404, 406, 428, 539, 540, 545, 546, 574, 577, 620, 642, 678, 701, 780, 781, 782, 785, 786, 796, 807, 925, 966, 972, 982, 988, 1009, 1013, 1014, 1016], "fontsiz": [5, 8, 10, 14, 34, 50, 60, 91, 98, 119, 142, 153, 154, 156, 159, 169, 178, 188, 197, 209, 220, 221, 246, 253, 262, 263, 264, 269, 270, 297, 304, 337, 898], "mse": [5, 7, 78, 79, 123, 124, 162, 163, 198, 200, 204, 272, 633, 639, 735, 967, 983, 1020, 1022], "quantit": [5, 6, 25, 61, 123, 133, 147, 254, 272, 369, 998], "nmse": [5, 272], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 62, 64, 67, 85, 92, 98, 105, 123, 129, 130, 142, 168, 169, 171, 174, 178, 187, 189, 194, 198, 213, 214, 215, 216, 227, 231, 257, 261, 262, 264, 266, 267, 268, 286, 287, 294, 302, 305, 314, 330, 343, 344, 354, 398, 401, 404, 808], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 57, 74, 75, 86, 95, 100, 104, 109, 113, 115, 128, 130, 133, 136, 137, 139, 142, 145, 147, 154, 156, 162, 163, 166, 167, 169, 172, 174, 180, 182, 184, 186, 187, 188, 193, 195, 196, 199, 200, 206, 210, 212, 214, 215, 216, 217, 218, 221, 223, 225, 230, 233, 234, 235, 238, 252, 254, 255, 256, 258, 261, 263, 264, 265, 266, 267, 268, 272, 283, 286, 287, 297, 300, 301, 302, 307, 312, 313, 325, 327, 330, 331, 332, 334, 335, 338, 339, 341, 343, 350, 351, 359, 361, 364, 368, 369, 370, 374, 375, 377, 385, 387, 397, 400, 401, 402, 403, 404, 405, 406, 407, 409, 428, 441, 451, 453, 461, 468, 469, 470, 482, 487, 488, 498, 501, 507, 510, 518, 519, 520, 521, 522, 525, 527, 529, 530, 534, 535, 536, 540, 552, 568, 575, 579, 580, 592, 595, 600, 606, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 673, 674, 675, 676, 677, 678, 679, 687, 693, 702, 735, 738, 750, 752, 759, 770, 782, 793, 797, 807, 810, 824, 825, 829, 833, 840, 841, 842, 845, 850, 851, 854, 857, 859, 861, 862, 863, 864, 873, 877, 884, 885, 886, 887, 888, 889, 890, 956, 958, 959, 960, 962, 967, 970, 971, 972, 973, 974, 975, 981, 982, 987, 989, 991, 993, 996, 997, 1002, 1003, 1004, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1023], "radial": [5, 100, 150, 155, 157, 330, 364, 438, 608, 677, 965, 982, 1004], "rbf": [5, 6, 10, 11, 16, 30, 31, 100, 131, 139, 150, 151, 152, 154, 155, 156, 157, 159, 165, 212, 226, 227, 233, 241, 256, 258, 260, 263, 323, 325, 327, 334, 336, 337, 341, 364, 398, 402, 404, 438, 488, 490, 521, 527, 596, 597, 598, 599, 602, 605, 606, 607, 609, 610, 625, 626, 627, 628, 629, 662, 677, 750, 759, 761, 782, 793, 796, 802, 844, 864, 879, 880, 884, 886, 887, 888, 889, 890, 956, 959, 960, 964, 967, 973, 977, 980, 993, 998, 1004, 1015, 1020], "decomposit": [5, 6, 14, 17, 58, 70, 72, 73, 74, 86, 87, 90, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 128, 134, 219, 220, 222, 232, 234, 238, 257, 282, 287, 305, 314, 344, 360, 361, 365, 378, 381, 385, 394, 395, 398, 404, 435, 437, 438, 439, 448, 468, 469, 470, 481, 535, 542, 597, 636, 637, 638, 639, 640, 641, 642, 649, 650, 651, 658, 659, 660, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 780, 781, 833, 840, 843, 846, 862, 893, 920, 921, 963, 964, 967, 984, 987, 989, 996, 998, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "kernel_pca": [5, 100, 398], "400": [5, 26, 50, 95, 109, 125, 129, 150, 163, 204, 224, 270, 295, 344, 367, 402, 481, 1002], "1e": [5, 6, 7, 10, 17, 26, 46, 95, 150, 153, 155, 156, 157, 158, 159, 162, 168, 178, 191, 198, 199, 205, 212, 216, 222, 227, 233, 237, 243, 246, 249, 256, 266, 269, 296, 307, 313, 322, 328, 330, 338, 343, 378, 409, 429, 433, 438, 445, 448, 457, 458, 464, 468, 469, 470, 517, 518, 519, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 545, 546, 547, 548, 578, 583, 597, 599, 600, 601, 605, 606, 608, 609, 611, 613, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 639, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 673, 675, 676, 677, 678, 679, 680, 681, 713, 726, 770, 780, 781, 796, 819, 820, 821, 822, 823, 824, 825, 833, 841, 842, 849, 879, 880, 884, 885, 886, 887, 888, 889, 890, 953, 956, 967, 971, 975, 977, 981, 998, 1002, 1017, 1022, 1023, 1024], "fit_inverse_transform": [5, 100, 521, 1018], "5e": [5, 95, 183, 581, 582, 584], "inde": [5, 7, 25, 39, 40, 53, 55, 58, 82, 86, 100, 113, 146, 147, 150, 168, 170, 177, 182, 186, 187, 198, 200, 260, 261, 265, 267, 278, 300, 305, 344, 354, 358, 371, 377, 384, 385, 386, 397, 399, 404, 553, 554, 963, 977, 981, 1023], "least": [5, 14, 80, 81, 84, 87, 98, 121, 124, 147, 158, 165, 176, 177, 182, 191, 198, 200, 203, 206, 215, 216, 217, 231, 258, 276, 305, 312, 313, 330, 344, 345, 358, 365, 367, 369, 371, 372, 376, 378, 380, 383, 385, 386, 396, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 430, 434, 436, 442, 443, 444, 447, 460, 468, 469, 470, 471, 480, 502, 517, 523, 525, 527, 528, 529, 531, 532, 533, 534, 535, 543, 544, 545, 546, 548, 550, 551, 552, 579, 588, 621, 629, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 649, 650, 651, 652, 653, 654, 655, 657, 658, 660, 662, 664, 665, 666, 668, 669, 670, 671, 672, 673, 678, 683, 698, 702, 704, 770, 783, 787, 788, 794, 796, 797, 798, 800, 801, 803, 805, 808, 809, 810, 841, 842, 845, 856, 864, 889, 892, 893, 894, 895, 913, 930, 957, 960, 964, 967, 970, 979, 981, 982, 983, 988, 989, 991, 1000, 1004, 1009, 1011, 1012, 1015, 1016, 1020], "hope": [5, 216, 385, 396, 1018], "remov": [5, 14, 16, 17, 34, 54, 55, 70, 75, 147, 162, 163, 168, 171, 177, 259, 300, 307, 310, 311, 312, 343, 344, 348, 354, 364, 367, 371, 372, 373, 376, 377, 381, 385, 397, 398, 401, 404, 405, 407, 408, 423, 428, 430, 433, 435, 436, 443, 445, 464, 474, 475, 512, 520, 521, 523, 525, 527, 532, 539, 540, 541, 542, 553, 554, 555, 556, 565, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 597, 616, 619, 624, 630, 631, 636, 637, 640, 641, 642, 644, 650, 651, 657, 678, 726, 753, 763, 764, 765, 808, 831, 843, 844, 848, 849, 857, 861, 862, 864, 873, 887, 888, 890, 899, 915, 916, 918, 957, 964, 970, 983, 989, 994, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "think": [5, 37, 169, 343, 344, 372, 403, 966, 988, 990, 991, 993], "happen": [5, 115, 186, 300, 306, 344, 354, 358, 359, 370, 371, 372, 376, 377, 378, 383, 385, 386, 388, 397, 399, 401, 404, 423, 501, 558, 644, 770, 862, 864, 884, 963, 967, 968, 982, 988, 1002, 1017, 1021, 1022, 1024, 1025], "ridg": [5, 10, 13, 54, 75, 130, 147, 149, 160, 162, 165, 168, 169, 176, 177, 182, 198, 199, 217, 226, 235, 241, 343, 358, 361, 383, 402, 404, 510, 521, 525, 529, 597, 601, 608, 611, 629, 630, 631, 633, 635, 643, 647, 659, 660, 661, 664, 673, 687, 735, 782, 788, 796, 817, 890, 962, 967, 975, 977, 981, 982, 989, 1000, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1022, 1023, 1024], "x_reconstructed_kernel_pca": [5, 100], "inverse_transform": [5, 51, 54, 100, 144, 282, 344, 402, 405, 431, 451, 468, 469, 470, 519, 520, 521, 524, 525, 526, 527, 529, 530, 567, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 616, 782, 785, 786, 796, 844, 848, 849, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 864, 876, 877, 977, 978, 979, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "x_reconstructed_pca": [5, 100], "lower": [5, 16, 26, 30, 31, 33, 58, 79, 86, 95, 97, 103, 109, 110, 113, 116, 119, 123, 126, 150, 152, 154, 156, 158, 169, 170, 182, 183, 184, 188, 198, 199, 200, 201, 211, 219, 223, 230, 231, 235, 245, 249, 257, 258, 260, 261, 265, 266, 268, 271, 282, 284, 285, 302, 305, 314, 321, 330, 336, 343, 344, 345, 349, 367, 372, 395, 396, 397, 400, 401, 402, 403, 404, 405, 408, 430, 434, 450, 453, 484, 495, 518, 520, 527, 530, 539, 545, 546, 547, 548, 549, 574, 575, 577, 589, 597, 599, 600, 601, 603, 605, 606, 608, 609, 611, 618, 619, 621, 623, 663, 665, 698, 702, 710, 713, 719, 724, 780, 781, 830, 832, 834, 835, 836, 838, 865, 886, 887, 888, 891, 908, 962, 963, 964, 966, 967, 968, 970, 971, 972, 973, 974, 975, 979, 981, 982, 983, 1000, 1011, 1012, 1017, 1024], "analysi": [5, 7, 9, 25, 29, 35, 36, 57, 63, 68, 94, 96, 97, 99, 100, 102, 104, 107, 120, 165, 168, 187, 220, 242, 250, 255, 258, 259, 263, 279, 292, 300, 305, 344, 361, 364, 367, 369, 372, 374, 386, 394, 397, 399, 404, 405, 409, 425, 433, 434, 459, 461, 462, 468, 469, 471, 488, 490, 498, 501, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 541, 542, 617, 624, 674, 676, 677, 678, 679, 696, 705, 710, 711, 741, 773, 774, 775, 776, 780, 782, 806, 810, 826, 833, 844, 845, 850, 860, 864, 872, 920, 921, 957, 963, 964, 966, 967, 977, 986, 987, 989, 991, 994, 1003, 1004, 1009, 1010, 1011, 1013, 1018], "favor": [5, 82, 116, 243, 249, 383, 399, 404, 619, 715, 790, 792, 843, 956, 975, 1011, 1013, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1025], "background": [5, 11, 47, 66, 126, 297, 302, 367, 372, 380, 397, 479, 480, 964, 972, 981, 1019], "139": [5, 15, 92, 93, 216, 240, 241, 278, 378, 404, 438, 448, 677, 681, 968], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 67, 68, 71, 72, 73, 74, 75, 80, 81, 82, 86, 93, 94, 98, 99, 100, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 149, 158, 160, 162, 163, 170, 171, 174, 176, 179, 181, 183, 184, 185, 186, 188, 189, 190, 191, 194, 195, 197, 201, 202, 205, 206, 210, 211, 212, 213, 214, 215, 217, 221, 223, 224, 226, 228, 231, 233, 234, 235, 236, 239, 240, 241, 243, 245, 246, 247, 249, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 273, 276, 278, 280, 281, 282, 286, 287, 288, 289, 291, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 324, 325, 326, 328, 330, 331, 332, 333, 334, 338, 339, 340, 341, 344, 345, 347, 348, 350, 351, 352, 353, 354, 359, 360, 361, 374, 375, 376, 378, 384, 385, 387, 388, 391, 393, 394, 395, 397, 398, 401, 402, 403, 404, 405, 406, 412, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 445, 455, 456, 459, 460, 461, 462, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 532, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 569, 570, 574, 575, 576, 578, 579, 580, 581, 582, 584, 585, 586, 588, 589, 596, 597, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 614, 617, 618, 619, 620, 621, 624, 625, 626, 629, 631, 632, 633, 635, 637, 638, 639, 641, 643, 644, 645, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 665, 674, 675, 676, 677, 678, 683, 684, 686, 687, 688, 689, 690, 694, 714, 740, 742, 772, 773, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 840, 841, 842, 844, 845, 848, 849, 857, 858, 862, 864, 866, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 904, 905, 909, 910, 956, 957, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 979, 980, 981, 982, 983, 987, 988, 990, 991, 994, 996, 997, 998, 1001, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "excerpt": [6, 979, 998], "wild": [6, 365, 479, 480, 494, 495, 998, 1004, 1009], "aka": [6, 294, 343, 383, 405, 438, 522, 524, 526, 530, 533, 567, 568, 601, 608, 637, 638, 640, 641, 642, 644, 645, 648, 652, 653, 654, 656, 662, 663, 664, 726, 851, 855, 857, 963, 971, 981, 993, 998, 1011, 1023], "lfw": [6, 367, 479, 480, 998, 1009], "vi": [6, 8, 367, 685, 998, 1017, 1020], "www": [6, 71, 174, 198, 214, 216, 228, 276, 296, 366, 367, 372, 380, 388, 397, 401, 428, 435, 473, 494, 495, 517, 520, 523, 527, 630, 644, 650, 657, 671, 672, 833, 840, 892, 893, 963, 980, 998], "umass": [6, 19, 367, 998], "edu": [6, 8, 11, 17, 46, 121, 147, 157, 174, 180, 219, 246, 257, 283, 291, 304, 343, 344, 366, 367, 369, 397, 435, 473, 488, 494, 495, 496, 520, 627, 630, 635, 644, 652, 653, 662, 665, 668, 669, 819, 821, 822, 823, 833, 840, 877, 879, 892, 893, 963, 965, 998], "funnel": [6, 479, 480, 998], "tgz": [6, 998], "233mb": [6, 998], "randomizedsearchcv": [6, 71, 150, 259, 266, 312, 354, 384, 561, 956, 967, 981, 987, 998, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024], "fetch_lfw_peopl": [6, 367, 998, 1024], "classification_report": [6, 32, 70, 144, 256, 297, 318, 319, 967, 998, 1002, 1011, 1013, 1017, 1018, 1019, 1021, 1025], "confusionmatrixdisplai": [6, 32, 252, 313, 318, 343, 617, 704, 967, 998, 1019, 1020, 1022, 1023, 1024], "standardscal": [6, 10, 31, 44, 49, 55, 58, 62, 71, 73, 86, 106, 130, 168, 177, 186, 187, 189, 198, 214, 216, 228, 229, 237, 238, 240, 255, 265, 286, 287, 294, 302, 305, 310, 311, 313, 314, 315, 330, 333, 354, 360, 372, 374, 377, 381, 384, 398, 401, 417, 452, 453, 553, 636, 637, 640, 641, 642, 650, 651, 662, 664, 844, 845, 848, 861, 875, 884, 885, 886, 887, 889, 890, 957, 964, 971, 977, 981, 982, 984, 998, 1011, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1025], "svc": [6, 16, 25, 27, 30, 31, 32, 70, 74, 131, 137, 139, 145, 165, 174, 232, 234, 238, 252, 256, 258, 260, 263, 264, 265, 268, 269, 273, 302, 310, 312, 321, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 343, 358, 374, 378, 385, 391, 395, 398, 401, 404, 454, 501, 541, 683, 684, 686, 688, 782, 799, 811, 813, 844, 881, 882, 884, 886, 955, 956, 962, 965, 967, 968, 977, 993, 997, 998, 1000, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "stat": [6, 8, 10, 70, 80, 101, 147, 150, 171, 255, 258, 266, 270, 283, 312, 318, 319, 369, 381, 384, 399, 460, 578, 581, 582, 584, 585, 586, 590, 591, 592, 595, 668, 669, 786, 794, 796, 892, 893, 923, 956, 963, 977, 998, 1016, 1018, 1022], "loguniform": [6, 150, 266, 956, 998, 1019], "disk": [6, 13, 367, 370, 372, 377, 385, 391, 998], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 61, 62, 64, 70, 72, 81, 85, 92, 96, 97, 110, 122, 124, 126, 129, 132, 137, 144, 147, 151, 152, 153, 158, 168, 177, 179, 182, 191, 192, 195, 198, 199, 205, 215, 220, 221, 227, 231, 237, 240, 243, 244, 245, 247, 248, 253, 254, 256, 258, 259, 262, 263, 267, 276, 291, 303, 310, 313, 314, 319, 326, 333, 343, 351, 352, 354, 358, 359, 365, 366, 367, 372, 373, 374, 375, 377, 378, 380, 382, 383, 384, 385, 391, 394, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 501, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 567, 568, 569, 570, 572, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 904, 905, 906, 909, 910, 918, 919, 920, 921, 922, 923, 925, 926, 927, 929, 930, 931, 938, 939, 940, 941, 942, 943, 944, 945, 953, 954, 957, 962, 963, 965, 967, 968, 970, 971, 973, 974, 977, 978, 979, 981, 982, 983, 986, 991, 997, 998, 999, 1000, 1001, 1002, 1004, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "lfw_peopl": [6, 367, 998], "min_faces_per_person": [6, 367, 480, 998], "resiz": [6, 46, 47, 237, 367, 479, 480, 998], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 67, 70, 75, 78, 79, 80, 81, 82, 86, 92, 95, 96, 100, 103, 109, 110, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 138, 139, 146, 147, 159, 162, 163, 167, 177, 179, 180, 182, 184, 186, 188, 190, 192, 193, 197, 198, 199, 201, 202, 206, 210, 213, 215, 216, 219, 220, 221, 222, 223, 224, 227, 231, 232, 244, 246, 247, 248, 249, 255, 256, 258, 261, 262, 265, 267, 268, 269, 270, 271, 272, 278, 288, 302, 303, 304, 307, 311, 312, 314, 320, 328, 331, 332, 338, 343, 344, 354, 365, 369, 372, 374, 377, 381, 383, 384, 385, 397, 399, 400, 401, 402, 404, 408, 409, 410, 412, 414, 415, 416, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 487, 490, 494, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 755, 756, 757, 758, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 909, 910, 921, 923, 925, 929, 936, 938, 941, 942, 943, 944, 945, 946, 947, 948, 956, 959, 963, 967, 968, 970, 971, 977, 978, 979, 981, 982, 983, 993, 998, 999, 1000, 1001, 1002, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "w": [6, 12, 13, 16, 30, 34, 40, 42, 45, 48, 58, 64, 102, 105, 162, 197, 202, 215, 234, 243, 244, 245, 248, 249, 269, 297, 313, 314, 335, 338, 345, 354, 367, 369, 378, 391, 397, 398, 402, 404, 405, 409, 414, 418, 423, 451, 455, 458, 460, 468, 469, 470, 509, 524, 526, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 574, 575, 577, 596, 597, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 679, 685, 710, 711, 741, 782, 796, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 826, 827, 830, 831, 834, 835, 841, 842, 877, 879, 880, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 918, 923, 963, 967, 971, 972, 977, 979, 981, 982, 998, 1002, 1019, 1023, 1024, 1025], "info": [6, 42, 71, 95, 168, 169, 256, 369, 371, 376, 385, 405, 998], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 40, 52, 58, 60, 61, 78, 79, 80, 81, 82, 91, 92, 95, 103, 110, 112, 114, 116, 117, 144, 146, 147, 162, 163, 174, 177, 180, 182, 184, 192, 193, 197, 201, 202, 213, 215, 220, 227, 231, 232, 243, 248, 255, 261, 265, 267, 268, 270, 271, 288, 294, 302, 310, 311, 312, 314, 338, 343, 344, 345, 354, 358, 365, 366, 372, 374, 377, 383, 384, 385, 397, 399, 400, 402, 404, 405, 408, 409, 410, 412, 414, 415, 416, 418, 419, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 444, 445, 446, 447, 449, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 480, 487, 490, 494, 495, 498, 501, 502, 505, 507, 509, 510, 512, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 696, 710, 743, 744, 745, 746, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 775, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 921, 942, 943, 944, 945, 946, 947, 948, 959, 963, 968, 970, 971, 977, 981, 982, 983, 993, 998, 999, 1001, 1002, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "id": [6, 19, 216, 291, 352, 366, 367, 372, 380, 399, 401, 405, 480, 481, 482, 896, 898, 916, 998, 1002, 1017, 1018, 1021], "person": [6, 261, 367, 371, 401, 405, 479, 480, 481, 977, 998, 1017], "target_nam": [6, 19, 52, 99, 104, 167, 207, 220, 245, 252, 259, 267, 268, 281, 306, 322, 343, 349, 365, 367, 474, 475, 477, 478, 479, 480, 482, 483, 486, 488, 489, 490, 491, 496, 699, 967, 983, 993, 998, 1002, 1019], "n_class": [6, 30, 37, 91, 92, 110, 112, 117, 119, 144, 146, 213, 220, 232, 234, 245, 265, 266, 267, 287, 288, 310, 349, 354, 372, 374, 385, 404, 423, 474, 475, 488, 501, 505, 509, 535, 536, 537, 539, 541, 543, 545, 547, 550, 553, 555, 579, 580, 590, 596, 620, 625, 644, 645, 652, 653, 654, 660, 661, 662, 663, 683, 693, 702, 704, 720, 723, 726, 739, 773, 777, 782, 785, 786, 796, 805, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 826, 831, 833, 834, 841, 844, 851, 852, 855, 858, 868, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 894, 896, 897, 909, 910, 963, 967, 968, 971, 978, 981, 982, 990, 998, 1014, 1015, 1016, 1018, 1019, 1020], "1288": [6, 367], "1850": [6, 367], "scaler": [6, 71, 73, 165, 214, 232, 238, 240, 286, 299, 305, 308, 315, 330, 333, 354, 377, 398, 401, 476, 644, 645, 658, 660, 673, 844, 853, 854, 856, 860, 861, 862, 864, 869, 870, 871, 872, 873, 874, 875, 971, 977, 981, 998, 1009, 1014, 1017, 1022], "unlabel": [6, 234, 312, 318, 319, 320, 322, 323, 385, 396, 397, 879, 880, 881, 966, 993, 996, 998, 1000, 1021], "unsupervis": [6, 12, 37, 49, 72, 73, 86, 95, 115, 128, 227, 234, 284, 285, 329, 343, 344, 354, 361, 364, 367, 374, 384, 385, 396, 397, 400, 402, 403, 404, 405, 419, 428, 431, 518, 520, 522, 523, 525, 528, 529, 535, 549, 552, 553, 555, 556, 568, 569, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 614, 616, 620, 621, 624, 625, 626, 627, 628, 663, 727, 782, 785, 786, 788, 796, 808, 811, 826, 827, 830, 832, 833, 834, 835, 840, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 861, 862, 863, 864, 865, 876, 877, 881, 888, 964, 967, 973, 980, 989, 993, 994, 996, 998, 1004, 1009, 1012, 1022], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 55, 57, 58, 62, 69, 71, 73, 74, 76, 85, 86, 92, 95, 103, 110, 115, 128, 138, 139, 150, 152, 153, 157, 165, 182, 194, 199, 215, 218, 220, 221, 223, 225, 227, 231, 232, 234, 244, 245, 279, 282, 292, 302, 327, 343, 354, 358, 364, 367, 368, 369, 372, 381, 385, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 431, 433, 435, 451, 455, 459, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483, 486, 487, 488, 490, 491, 496, 501, 505, 518, 520, 521, 524, 525, 526, 527, 530, 533, 535, 549, 552, 559, 585, 593, 617, 626, 627, 628, 638, 674, 675, 676, 677, 678, 679, 680, 682, 685, 696, 710, 780, 781, 782, 810, 824, 825, 826, 829, 832, 833, 840, 844, 845, 848, 854, 859, 864, 876, 877, 878, 884, 888, 921, 953, 958, 959, 962, 963, 968, 969, 973, 979, 980, 981, 982, 983, 989, 991, 993, 994, 996, 998, 999, 1001, 1002, 1003, 1004, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1021, 1024], "reduct": [6, 19, 54, 57, 69, 73, 76, 86, 95, 113, 128, 165, 218, 220, 221, 225, 231, 234, 279, 292, 314, 327, 354, 358, 364, 396, 397, 398, 400, 402, 404, 406, 454, 468, 469, 470, 471, 488, 516, 518, 520, 521, 524, 525, 526, 527, 530, 533, 535, 539, 540, 543, 544, 545, 546, 550, 551, 552, 585, 593, 644, 645, 674, 675, 676, 677, 678, 679, 766, 782, 810, 826, 833, 840, 844, 845, 854, 864, 882, 884, 892, 893, 894, 895, 959, 964, 979, 983, 988, 989, 991, 998, 1004, 1010, 1011, 1012, 1015, 1023, 1024, 1025], "top": [6, 12, 13, 14, 16, 17, 30, 34, 37, 39, 41, 42, 43, 44, 45, 51, 62, 64, 71, 91, 97, 115, 116, 119, 130, 133, 168, 198, 200, 209, 213, 227, 236, 237, 243, 245, 246, 249, 255, 259, 267, 268, 283, 300, 302, 306, 311, 318, 319, 330, 343, 354, 370, 372, 378, 383, 394, 395, 397, 402, 403, 404, 473, 573, 574, 577, 585, 711, 741, 777, 896, 898, 956, 959, 963, 965, 975, 991, 998, 1001, 1002, 1023], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 58, 62, 64, 98, 182, 184, 213, 214, 215, 221, 224, 227, 231, 233, 259, 343, 344, 345, 662, 663, 664, 998], "svd_solver": [6, 95, 103, 402, 521, 527, 998, 1015], "whiten": [6, 95, 96, 97, 282, 402, 409, 519, 520, 527, 862, 864, 998, 1013, 1015, 1023, 1024], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 53, 98, 144, 147, 155, 168, 169, 174, 177, 182, 184, 215, 233, 248, 256, 259, 262, 267, 278, 303, 312, 343, 344, 345, 354, 359, 366, 370, 372, 374, 376, 379, 380, 381, 383, 385, 397, 399, 401, 402, 404, 427, 428, 431, 436, 438, 458, 468, 469, 470, 471, 475, 521, 547, 548, 568, 592, 614, 616, 618, 620, 629, 630, 631, 645, 726, 780, 781, 782, 796, 801, 802, 848, 862, 952, 956, 957, 960, 963, 964, 967, 969, 970, 971, 977, 980, 981, 982, 983, 988, 993, 997, 998, 1000, 1002, 1009, 1011, 1016, 1019, 1021, 1025], "components_": [6, 14, 58, 86, 95, 97, 98, 101, 106, 231, 232, 297, 305, 314, 385, 398, 402, 430, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 529, 530, 625, 833, 840, 876, 877, 979, 998, 1013, 1015, 1021, 1024], "project": [6, 8, 11, 13, 17, 27, 34, 45, 53, 58, 67, 90, 94, 95, 97, 99, 101, 102, 107, 112, 154, 156, 158, 159, 165, 169, 177, 190, 195, 207, 219, 220, 221, 223, 226, 232, 234, 241, 244, 282, 287, 291, 303, 307, 310, 327, 335, 344, 349, 358, 361, 364, 366, 370, 371, 377, 378, 381, 385, 386, 388, 394, 400, 402, 403, 409, 426, 432, 437, 438, 448, 460, 468, 469, 470, 471, 475, 488, 490, 517, 519, 520, 521, 523, 525, 527, 528, 529, 530, 534, 535, 559, 568, 575, 627, 628, 635, 658, 660, 674, 677, 681, 682, 814, 833, 861, 876, 877, 878, 920, 921, 961, 963, 964, 965, 968, 970, 971, 973, 980, 983, 985, 990, 991, 993, 998, 1001, 1004, 1009, 1010, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "orthonorm": [6, 381, 920, 998], "x_train_pca": [6, 998], "x_test_pca": [6, 100, 998], "966": 6, "010": [6, 137, 140, 344, 378, 975], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 35, 56, 70, 71, 72, 73, 100, 109, 111, 112, 114, 117, 118, 119, 122, 128, 131, 132, 143, 144, 146, 165, 170, 174, 176, 188, 189, 190, 196, 205, 207, 210, 213, 217, 227, 232, 239, 252, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 273, 275, 277, 280, 281, 286, 287, 289, 294, 297, 302, 312, 313, 317, 318, 319, 321, 322, 324, 325, 326, 329, 331, 332, 333, 338, 339, 340, 341, 345, 367, 369, 372, 374, 377, 383, 385, 397, 398, 401, 405, 406, 407, 414, 421, 423, 424, 425, 474, 475, 482, 490, 498, 500, 501, 508, 517, 522, 523, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 579, 580, 588, 592, 596, 608, 615, 617, 618, 619, 635, 644, 645, 652, 654, 657, 658, 659, 660, 661, 662, 683, 684, 686, 688, 689, 693, 694, 695, 698, 699, 704, 706, 711, 712, 714, 715, 719, 720, 723, 724, 725, 726, 727, 728, 739, 741, 767, 768, 769, 772, 773, 774, 777, 779, 782, 785, 786, 788, 796, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 831, 832, 834, 835, 840, 841, 842, 844, 845, 851, 864, 865, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 913, 915, 956, 957, 959, 962, 963, 964, 967, 968, 969, 972, 975, 977, 980, 981, 982, 983, 987, 988, 989, 991, 993, 994, 996, 997, 998, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "1e3": [6, 7, 10, 150, 156, 162, 233, 269, 956, 998], "1e5": [6, 155, 179, 181, 188, 269, 599, 600, 601, 605, 606, 608, 609, 611, 873, 878, 979, 998, 1000], "clf": [6, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 58, 63, 71, 90, 101, 102, 114, 122, 125, 126, 131, 136, 139, 143, 144, 146, 152, 154, 171, 188, 190, 191, 195, 196, 202, 205, 207, 210, 211, 212, 214, 222, 228, 229, 232, 234, 236, 240, 247, 255, 259, 263, 264, 266, 269, 270, 281, 284, 285, 286, 289, 294, 302, 305, 310, 311, 312, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 348, 349, 352, 358, 367, 384, 385, 391, 398, 401, 404, 406, 424, 535, 536, 539, 541, 543, 545, 547, 549, 550, 553, 579, 580, 583, 618, 620, 624, 625, 626, 627, 628, 630, 631, 634, 638, 644, 645, 646, 647, 648, 652, 654, 655, 658, 659, 660, 661, 662, 663, 666, 683, 684, 686, 688, 773, 782, 785, 786, 796, 812, 813, 814, 816, 819, 820, 821, 822, 823, 830, 831, 841, 884, 886, 888, 889, 892, 896, 898, 957, 959, 963, 967, 968, 970, 971, 973, 974, 981, 982, 983, 993, 997, 998, 1002], "class_weight": [6, 332, 385, 543, 547, 550, 644, 645, 652, 654, 660, 661, 662, 663, 884, 886, 887, 888, 889, 890, 891, 892, 894, 956, 981, 982, 998, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1023, 1024], "n_iter": [6, 17, 71, 150, 177, 206, 219, 220, 224, 259, 266, 278, 297, 332, 374, 378, 384, 409, 440, 464, 518, 519, 523, 525, 530, 531, 532, 533, 630, 631, 632, 633, 638, 639, 646, 647, 648, 649, 667, 668, 669, 670, 671, 672, 673, 678, 680, 785, 786, 794, 796, 840, 842, 920, 921, 956, 981, 998, 1010, 1015, 1016, 1017, 1021, 1023, 1024, 1025], "found": [6, 19, 20, 21, 106, 117, 146, 150, 154, 156, 158, 159, 202, 234, 256, 259, 260, 261, 305, 310, 313, 315, 330, 345, 358, 360, 366, 369, 371, 372, 374, 383, 385, 386, 394, 397, 400, 401, 402, 404, 405, 407, 420, 427, 430, 431, 445, 458, 543, 544, 545, 546, 550, 551, 574, 576, 596, 597, 614, 622, 633, 637, 639, 641, 647, 649, 651, 657, 658, 660, 662, 664, 673, 674, 698, 705, 782, 785, 786, 796, 821, 826, 827, 833, 855, 857, 858, 892, 893, 894, 895, 899, 951, 955, 956, 959, 963, 964, 966, 968, 969, 970, 971, 977, 981, 982, 983, 988, 990, 993, 998, 1002, 1009, 1012, 1013, 1016, 1017, 1019, 1023], "grid": [6, 8, 10, 11, 25, 26, 27, 42, 54, 61, 71, 72, 74, 78, 82, 119, 121, 128, 154, 165, 167, 168, 169, 187, 216, 224, 232, 233, 237, 243, 248, 251, 255, 257, 259, 262, 263, 274, 276, 280, 282, 283, 291, 297, 302, 303, 305, 327, 330, 336, 343, 374, 379, 383, 385, 392, 398, 401, 403, 404, 405, 407, 434, 447, 450, 458, 484, 488, 501, 508, 617, 618, 619, 633, 636, 639, 640, 642, 645, 647, 649, 662, 699, 713, 727, 770, 773, 782, 785, 786, 793, 796, 798, 810, 811, 889, 960, 962, 967, 970, 974, 988, 993, 994, 996, 998, 1000, 1004, 1009, 1012, 1013, 1014, 1016, 1017, 1023], "search": [6, 46, 54, 71, 72, 73, 74, 123, 144, 150, 165, 216, 233, 248, 251, 259, 262, 263, 270, 274, 278, 280, 282, 297, 302, 315, 330, 343, 354, 361, 369, 370, 372, 374, 383, 385, 392, 397, 398, 401, 404, 405, 406, 407, 408, 429, 434, 436, 438, 443, 444, 447, 450, 457, 458, 464, 488, 501, 508, 543, 544, 545, 546, 550, 551, 552, 565, 585, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 614, 639, 662, 674, 675, 678, 679, 699, 713, 770, 773, 782, 785, 786, 793, 794, 796, 798, 810, 811, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 889, 892, 893, 894, 895, 926, 955, 960, 962, 964, 967, 970, 971, 981, 983, 987, 988, 993, 994, 996, 998, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1023, 1024], "best_estimator_": [6, 54, 73, 74, 78, 103, 233, 248, 259, 262, 282, 782, 785, 786, 796, 956, 997, 998, 1016], "76823": 6, "03433306453": 6, "003418945823095797": 6, "from_estim": [6, 25, 27, 31, 56, 112, 115, 126, 127, 131, 169, 181, 190, 207, 233, 237, 239, 252, 255, 260, 261, 265, 268, 281, 286, 289, 305, 310, 311, 312, 313, 315, 326, 327, 328, 331, 332, 349, 379, 395, 619, 704, 712, 767, 769, 772, 773, 774, 962, 967, 974, 998, 1006, 1022, 1023, 1024, 1025], "display_label": [6, 252, 683, 998, 1021], "xticks_rot": [6, 683, 998], "vertic": [6, 17, 60, 122, 171, 187, 231, 232, 262, 276, 300, 303, 335, 337, 385, 394, 397, 402, 501, 683, 766, 998], "tight_layout": [6, 8, 25, 27, 31, 34, 40, 52, 55, 65, 73, 75, 86, 95, 96, 106, 112, 117, 119, 124, 128, 130, 132, 152, 154, 159, 162, 167, 168, 170, 171, 177, 178, 182, 188, 196, 198, 206, 209, 213, 216, 219, 232, 236, 253, 254, 270, 276, 278, 280, 290, 301, 302, 303, 304, 305, 310, 314, 328, 344, 348, 349, 998], "precis": [6, 25, 32, 70, 75, 82, 95, 144, 156, 157, 165, 174, 228, 251, 252, 256, 274, 297, 300, 318, 319, 372, 374, 385, 394, 395, 396, 397, 399, 402, 404, 429, 455, 456, 457, 458, 459, 460, 461, 462, 464, 490, 509, 518, 520, 527, 530, 630, 631, 632, 634, 636, 637, 638, 640, 641, 642, 655, 658, 660, 666, 668, 669, 673, 686, 692, 693, 694, 699, 712, 714, 715, 716, 724, 748, 767, 768, 769, 772, 773, 780, 781, 810, 813, 824, 825, 830, 845, 864, 868, 884, 889, 896, 898, 921, 961, 963, 970, 971, 982, 998, 1002, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "recal": [6, 25, 32, 70, 100, 144, 165, 228, 251, 256, 274, 297, 318, 319, 372, 385, 397, 490, 590, 686, 692, 693, 694, 698, 699, 712, 714, 715, 716, 767, 768, 769, 772, 773, 810, 813, 845, 864, 868, 884, 963, 983, 998, 1002, 1012, 1013, 1016, 1018, 1019, 1021, 1022, 1023, 1025], "f1": [6, 25, 32, 70, 144, 256, 297, 318, 319, 322, 401, 699, 714, 715, 723, 768, 967, 968, 998, 1002, 1013, 1025], "support": [6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 70, 72, 108, 114, 121, 129, 134, 143, 144, 169, 199, 208, 209, 210, 216, 232, 233, 239, 252, 256, 263, 265, 278, 297, 300, 304, 314, 318, 319, 322, 323, 326, 327, 330, 331, 333, 335, 338, 341, 358, 359, 360, 361, 366, 370, 372, 374, 376, 377, 378, 379, 381, 382, 384, 385, 386, 397, 401, 402, 405, 407, 423, 426, 436, 438, 439, 450, 452, 453, 455, 460, 473, 482, 498, 524, 526, 527, 530, 533, 535, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 599, 600, 601, 603, 605, 606, 608, 609, 611, 613, 617, 618, 619, 629, 631, 643, 644, 645, 656, 657, 658, 660, 661, 662, 663, 664, 673, 676, 680, 693, 699, 714, 715, 723, 728, 753, 763, 764, 765, 768, 769, 772, 773, 782, 785, 786, 788, 796, 807, 808, 816, 817, 822, 824, 825, 828, 830, 831, 836, 844, 845, 849, 855, 857, 858, 860, 864, 872, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 910, 915, 916, 955, 956, 957, 959, 960, 961, 963, 966, 967, 968, 969, 970, 971, 973, 974, 977, 978, 981, 985, 987, 988, 989, 991, 993, 996, 998, 1002, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "ariel": [6, 367, 1009, 1015], "sharon": [6, 367], "69": [6, 189, 305, 319, 397, 457, 458, 593, 594, 741, 967, 977, 1000], "colin": [6, 367, 1015], "powel": [6, 367], "87": [6, 32, 70, 159, 256, 297, 319, 583, 653, 773, 782, 860, 872, 967, 1002], "donald": [6, 367, 397, 710, 957], "rumsfeld": [6, 367], "63": [6, 8, 98, 343, 369, 404, 543, 544, 551, 552, 711, 782, 796, 894, 895, 967], "georg": [6, 367, 397, 1015, 1021, 1022, 1023, 1024], "bush": [6, 367], "95": [6, 8, 14, 30, 32, 44, 52, 57, 67, 91, 101, 102, 119, 123, 157, 168, 177, 198, 200, 205, 216, 245, 246, 249, 258, 259, 283, 291, 297, 302, 306, 314, 319, 330, 354, 404, 513, 618, 619, 622, 633, 647, 733, 881, 963, 967, 968, 980, 1002, 1012], "91": [6, 8, 32, 51, 155, 297, 318, 319, 404, 962, 998, 1002], "146": [6, 404], "gerhard": [6, 367], "schroeder": [6, 367], "hugo": [6, 367, 1015, 1020, 1021, 1022, 1023], "chavez": [6, 367], "90": [6, 8, 10, 14, 32, 74, 105, 106, 122, 123, 124, 144, 155, 171, 178, 189, 195, 197, 200, 205, 216, 243, 267, 269, 297, 302, 306, 318, 319, 354, 358, 372, 378, 401, 549, 766, 782, 808, 813, 865, 962, 967, 998, 1002, 1024], "toni": [6, 367, 549, 864, 973, 1022, 1023], "blair": [6, 367], "93": [6, 8, 32, 198, 240, 256, 297, 319, 343, 369, 773, 782, 808, 892, 962, 967, 998, 1002], "83": [6, 8, 30, 34, 39, 70, 297, 318, 369, 374, 407, 693, 771, 967, 998, 1002, 1012], "322": [6, 91, 457, 458], "macro": [6, 32, 70, 144, 256, 297, 310, 318, 319, 367, 401, 693, 699, 714, 715, 723, 768, 769, 772, 773, 967, 1002, 1009, 1017, 1025], "avg": [6, 32, 70, 144, 256, 297, 318, 319, 555, 690, 699, 967, 998, 1002, 1025], "weight": [6, 13, 14, 19, 24, 32, 54, 70, 106, 110, 123, 131, 132, 143, 144, 155, 163, 165, 168, 176, 182, 187, 189, 198, 202, 203, 212, 213, 214, 216, 217, 238, 243, 256, 261, 265, 267, 281, 290, 293, 294, 297, 298, 305, 307, 310, 313, 318, 319, 325, 332, 341, 343, 344, 345, 354, 368, 369, 381, 383, 385, 397, 399, 400, 402, 403, 406, 408, 414, 418, 423, 426, 429, 430, 432, 433, 435, 439, 445, 446, 449, 450, 451, 453, 455, 460, 468, 469, 470, 482, 501, 510, 524, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 572, 575, 576, 577, 579, 583, 588, 589, 596, 597, 614, 620, 621, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 675, 679, 683, 684, 686, 688, 689, 693, 694, 695, 698, 699, 702, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 719, 720, 721, 723, 724, 725, 726, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 754, 767, 768, 769, 770, 772, 773, 774, 777, 778, 779, 780, 781, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 846, 849, 863, 864, 865, 879, 880, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 909, 910, 923, 942, 948, 957, 958, 963, 964, 966, 967, 969, 970, 971, 972, 974, 977, 980, 981, 982, 983, 988, 993, 1000, 1002, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "85": [6, 8, 16, 17, 32, 50, 55, 70, 98, 144, 213, 216, 269, 297, 319, 354, 404, 425, 486, 541, 542, 583, 638, 644, 730, 738, 773, 782, 808, 967, 968, 998, 1009], "plot_galleri": [6, 95, 998], "n_row": [6, 19, 95, 394, 412, 437, 439, 497, 499, 998], "n_col": [6, 19, 95, 235, 412, 437, 439, 497, 499, 618, 998], "portrait": [6, 402, 998], "figur": [6, 7, 8, 9, 10, 12, 13, 16, 24, 25, 26, 27, 30, 31, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 58, 59, 61, 62, 63, 64, 65, 67, 78, 82, 85, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 121, 122, 123, 124, 125, 128, 129, 133, 136, 137, 139, 142, 143, 146, 151, 152, 153, 154, 157, 158, 163, 168, 169, 170, 177, 182, 183, 188, 191, 192, 195, 197, 199, 200, 202, 204, 209, 212, 213, 214, 215, 221, 222, 223, 227, 231, 232, 233, 234, 235, 237, 243, 245, 246, 249, 252, 257, 262, 263, 272, 283, 287, 288, 291, 294, 297, 300, 302, 303, 307, 310, 312, 318, 319, 320, 328, 330, 334, 335, 349, 350, 351, 372, 397, 403, 404, 405, 407, 424, 617, 618, 683, 684, 686, 687, 688, 788, 898, 956, 960, 963, 966, 967, 970, 971, 974, 981, 982, 983, 998, 1000, 1001, 1022], "subplots_adjust": [6, 7, 13, 14, 30, 34, 39, 42, 44, 45, 50, 51, 54, 62, 64, 80, 82, 91, 92, 97, 98, 105, 110, 112, 113, 130, 168, 197, 198, 213, 216, 227, 234, 243, 245, 246, 249, 253, 269, 271, 283, 291, 294, 297, 302, 312, 319, 327, 330, 998], "bottom": [6, 8, 12, 13, 14, 30, 37, 39, 42, 44, 45, 51, 53, 62, 64, 91, 92, 121, 128, 133, 198, 209, 227, 243, 245, 246, 249, 255, 258, 269, 283, 300, 319, 321, 330, 372, 395, 397, 403, 573, 896, 961, 963, 967, 988, 998, 1001], "left": [6, 7, 12, 13, 14, 16, 24, 33, 39, 42, 44, 45, 51, 55, 62, 64, 72, 75, 81, 82, 91, 92, 97, 98, 110, 113, 115, 116, 117, 120, 123, 130, 132, 153, 159, 163, 168, 183, 191, 198, 199, 200, 202, 209, 211, 212, 215, 216, 227, 231, 234, 236, 237, 243, 245, 246, 249, 254, 255, 256, 257, 259, 267, 268, 270, 283, 284, 291, 294, 297, 300, 314, 319, 329, 330, 352, 372, 374, 376, 394, 397, 400, 401, 403, 404, 405, 407, 432, 458, 468, 469, 470, 471, 479, 484, 535, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 573, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 621, 625, 629, 637, 641, 780, 781, 782, 785, 786, 789, 796, 857, 864, 892, 893, 894, 895, 896, 908, 921, 938, 941, 956, 959, 961, 963, 965, 967, 969, 974, 979, 981, 983, 997, 998, 1000, 1001, 1016, 1018, 1023], "01": [6, 8, 10, 13, 15, 16, 28, 35, 40, 44, 51, 62, 68, 76, 85, 95, 97, 98, 113, 121, 122, 124, 127, 128, 134, 147, 155, 159, 160, 168, 169, 179, 182, 189, 205, 210, 211, 216, 217, 219, 220, 227, 231, 232, 233, 237, 241, 245, 249, 250, 252, 257, 258, 259, 263, 265, 266, 274, 283, 292, 295, 300, 308, 311, 316, 332, 341, 344, 350, 351, 353, 367, 369, 377, 397, 406, 435, 457, 501, 518, 525, 529, 581, 582, 584, 628, 632, 640, 644, 664, 682, 701, 782, 796, 878, 936, 963, 967, 971, 977, 979, 981, 998, 1002], "right": [6, 7, 11, 12, 13, 14, 16, 31, 39, 42, 43, 44, 45, 51, 53, 60, 62, 64, 79, 80, 82, 91, 92, 97, 98, 100, 103, 105, 109, 110, 112, 113, 114, 123, 124, 125, 132, 143, 150, 153, 163, 188, 199, 200, 201, 202, 204, 205, 208, 209, 227, 230, 231, 243, 245, 246, 248, 249, 253, 254, 258, 261, 265, 268, 269, 271, 283, 291, 294, 297, 300, 302, 305, 319, 330, 332, 338, 340, 343, 349, 352, 354, 361, 372, 383, 386, 394, 397, 400, 402, 403, 404, 407, 450, 468, 469, 470, 471, 520, 527, 530, 543, 544, 545, 546, 547, 548, 550, 551, 552, 573, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 613, 621, 662, 664, 849, 892, 893, 894, 895, 896, 908, 921, 956, 959, 961, 963, 965, 967, 969, 970, 974, 979, 981, 982, 983, 987, 988, 991, 994, 998, 1000, 1001, 1011, 1017, 1023, 1025], "99": [6, 25, 32, 44, 51, 62, 95, 216, 227, 231, 243, 245, 256, 259, 297, 300, 319, 359, 365, 369, 376, 401, 404, 405, 478, 633, 647, 657, 773, 831, 936, 962, 967, 977, 981, 998, 1004, 1011], "hspace": [6, 13, 14, 44, 45, 62, 95, 216, 227, 243, 245, 246, 249, 283, 312, 319, 327, 998], "grai": [6, 13, 46, 47, 50, 51, 53, 95, 98, 125, 196, 198, 216, 231, 234, 235, 265, 296, 369, 402, 479, 480, 488, 507, 998, 1001, 1020], "ytick": [6, 11, 30, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 90, 98, 121, 124, 137, 143, 152, 153, 154, 158, 181, 188, 194, 211, 227, 234, 244, 245, 246, 249, 253, 272, 282, 291, 297, 318, 330, 334, 335, 336, 343, 998], "portion": [6, 8, 81, 267, 358, 367, 369, 372, 378, 385, 773, 805, 822, 956, 966, 970, 998, 1002], "pred_nam": [6, 998], "rsplit": [6, 17, 259, 998], "true_nam": [6, 998], "ntrue": [6, 318, 319, 998], "prediction_titl": [6, 998], "signif": [6, 998], "eigenface_titl": [6, 998], "convolut": [6, 158, 998], "network": [6, 296, 358, 359, 360, 361, 366, 367, 383, 385, 386, 391, 397, 402, 404, 409, 482, 519, 521, 553, 554, 682, 726, 841, 842, 935, 963, 965, 967, 981, 983, 987, 989, 998, 1003, 1004, 1009, 1023], "famili": [6, 358, 360, 385, 397, 400, 402, 404, 405, 406, 578, 581, 582, 584, 585, 586, 592, 841, 842, 860, 872, 963, 977, 981, 998, 1000, 1013, 1023], "outsid": [6, 9, 19, 119, 199, 200, 230, 240, 383, 405, 432, 621, 863, 973, 998, 1017], "scope": [6, 19, 358, 360, 372, 383, 405, 987, 988, 998], "scikit": [6, 8, 10, 12, 16, 17, 31, 32, 50, 70, 115, 116, 130, 144, 147, 159, 163, 165, 168, 186, 187, 216, 226, 239, 251, 255, 274, 278, 283, 285, 309, 316, 343, 344, 348, 349, 354, 359, 360, 361, 364, 366, 367, 368, 369, 371, 372, 375, 378, 379, 380, 381, 384, 385, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 411, 412, 414, 415, 416, 418, 419, 424, 429, 433, 436, 443, 445, 450, 451, 453, 454, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 489, 490, 498, 501, 510, 524, 547, 548, 550, 551, 553, 562, 567, 568, 569, 571, 572, 575, 585, 588, 597, 612, 614, 616, 618, 620, 624, 626, 632, 634, 638, 644, 655, 666, 674, 686, 687, 688, 703, 733, 763, 764, 765, 773, 782, 783, 784, 785, 786, 787, 788, 796, 799, 800, 801, 802, 803, 810, 812, 813, 826, 828, 845, 847, 849, 851, 854, 856, 857, 858, 859, 863, 864, 868, 881, 882, 884, 889, 893, 915, 916, 933, 934, 956, 957, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 977, 980, 981, 982, 983, 986, 990, 996, 997, 998, 1000, 1001, 1004, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "librari": [6, 258, 313, 315, 350, 354, 364, 366, 367, 370, 371, 372, 373, 378, 383, 384, 385, 388, 393, 644, 884, 885, 886, 887, 889, 890, 935, 963, 967, 982, 983, 987, 988, 991, 998, 1002, 1007, 1012, 1016, 1017, 1018, 1019, 1020, 1022], "reader": [6, 42, 313, 360, 372, 998], "pytorch": [6, 383, 987, 988, 998, 1025], "tensorflow": [6, 383, 987, 998], "implement": [6, 7, 13, 16, 17, 46, 56, 81, 95, 116, 163, 174, 182, 183, 187, 212, 216, 219, 227, 233, 256, 258, 267, 278, 280, 283, 303, 310, 311, 312, 313, 314, 343, 345, 358, 359, 360, 366, 367, 369, 370, 372, 373, 374, 377, 378, 380, 381, 385, 388, 391, 393, 394, 396, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 423, 428, 429, 430, 432, 433, 434, 435, 436, 461, 479, 482, 494, 518, 519, 520, 521, 522, 524, 527, 528, 529, 539, 540, 541, 543, 544, 547, 548, 549, 553, 558, 568, 574, 575, 577, 579, 583, 587, 596, 597, 618, 619, 626, 627, 631, 632, 639, 643, 644, 645, 649, 650, 654, 657, 658, 660, 661, 662, 663, 664, 670, 671, 672, 673, 674, 677, 678, 681, 693, 697, 706, 720, 723, 763, 767, 773, 774, 780, 782, 785, 786, 788, 796, 800, 801, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 819, 820, 821, 822, 823, 826, 827, 829, 832, 834, 835, 840, 841, 842, 844, 866, 874, 875, 881, 884, 885, 886, 887, 888, 889, 890, 920, 921, 932, 935, 936, 938, 956, 957, 959, 961, 963, 964, 965, 966, 968, 969, 971, 972, 973, 977, 979, 980, 983, 984, 985, 987, 988, 989, 991, 993, 998, 999, 1000, 1001, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "050": [6, 15, 42, 68, 181, 217, 975], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 55, 61, 68, 70, 72, 114, 124, 144, 158, 165, 199, 239, 240, 245, 249, 251, 261, 264, 267, 272, 274, 280, 283, 290, 299, 302, 304, 307, 308, 312, 317, 319, 320, 323, 324, 328, 338, 343, 344, 345, 354, 360, 367, 368, 372, 377, 383, 393, 397, 401, 404, 433, 488, 498, 506, 683, 689, 699, 727, 781, 782, 849, 880, 892, 956, 957, 961, 967, 968, 969, 970, 977, 980, 983, 986], "diabet": [7, 124, 133, 135, 140, 147, 163, 165, 185, 186, 187, 194, 195, 254, 365, 404, 487, 638, 639, 782, 787, 805, 806, 807, 975, 993, 997, 1004], "regress": [7, 10, 13, 25, 27, 30, 54, 69, 71, 76, 80, 81, 84, 87, 98, 108, 113, 115, 116, 121, 129, 134, 147, 149, 160, 162, 163, 165, 167, 168, 169, 176, 180, 182, 184, 188, 192, 193, 195, 199, 201, 202, 203, 214, 217, 226, 228, 235, 240, 241, 254, 271, 272, 276, 279, 292, 297, 301, 305, 312, 313, 314, 315, 325, 341, 343, 347, 353, 359, 360, 361, 364, 365, 367, 369, 372, 374, 377, 380, 381, 383, 384, 385, 392, 395, 399, 400, 401, 402, 406, 418, 423, 450, 451, 460, 470, 475, 476, 478, 482, 487, 488, 490, 491, 498, 502, 503, 504, 510, 514, 517, 521, 523, 525, 527, 528, 529, 531, 532, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 551, 552, 553, 556, 557, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 592, 595, 596, 597, 600, 601, 608, 609, 611, 617, 618, 619, 620, 621, 623, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 687, 692, 707, 708, 709, 713, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 770, 782, 785, 786, 788, 796, 807, 808, 810, 811, 815, 817, 818, 826, 827, 832, 834, 835, 841, 842, 844, 845, 848, 849, 851, 857, 858, 859, 861, 864, 865, 868, 873, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 898, 904, 907, 909, 925, 956, 957, 959, 962, 964, 974, 975, 977, 978, 987, 988, 989, 990, 991, 993, 996, 999, 1004, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "patient": [7, 133, 147, 163, 369, 380, 401, 963, 1000], "diseas": [7, 133, 147, 163, 261, 369, 698, 967, 1000], "newsgroup": [7, 14, 19, 231, 259, 322, 344, 345, 365, 394, 405, 474, 475, 994, 1004], "post": [7, 14, 19, 70, 165, 314, 343, 344, 345, 347, 353, 358, 367, 371, 372, 376, 377, 384, 397, 434, 474, 475, 486, 698, 810, 892, 967, 983, 991, 1002, 1020], "written": [7, 29, 35, 89, 165, 205, 313, 359, 369, 372, 373, 374, 378, 380, 383, 385, 398, 403, 473, 488, 494, 683, 699, 810, 889, 896, 961, 963, 967, 971, 972, 981, 986, 993, 994, 999, 1002, 1018], "about": [7, 11, 29, 44, 53, 57, 62, 70, 86, 89, 119, 144, 159, 165, 167, 168, 171, 215, 227, 255, 256, 258, 260, 265, 283, 305, 310, 312, 313, 314, 315, 319, 343, 345, 352, 354, 358, 359, 361, 365, 367, 371, 372, 376, 377, 378, 384, 385, 386, 391, 401, 402, 405, 407, 424, 478, 480, 481, 482, 483, 486, 487, 488, 490, 491, 496, 501, 547, 548, 579, 580, 593, 594, 600, 619, 626, 662, 664, 728, 782, 796, 813, 905, 957, 963, 964, 966, 968, 970, 973, 974, 977, 978, 980, 982, 983, 985, 987, 991, 993, 994, 1000, 1002, 1014, 1015, 1025], "sgdclassifi": [7, 8, 205, 206, 207, 208, 209, 210, 211, 232, 266, 322, 332, 343, 354, 358, 360, 378, 385, 395, 396, 405, 624, 626, 627, 628, 632, 644, 652, 654, 884, 889, 959, 963, 968, 981, 982, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1025], "stochast": [7, 58, 122, 125, 165, 174, 176, 217, 221, 223, 227, 232, 286, 287, 293, 298, 313, 397, 402, 404, 448, 474, 482, 488, 489, 490, 500, 508, 522, 530, 545, 546, 557, 590, 613, 625, 644, 645, 654, 658, 660, 662, 663, 664, 665, 673, 674, 675, 676, 678, 810, 833, 840, 841, 842, 845, 854, 888, 920, 921, 941, 956, 970, 971, 973, 989, 1003, 1004, 1009, 1010, 1013, 1014, 1016, 1018, 1020], "gradient": [7, 46, 66, 108, 115, 127, 130, 133, 134, 155, 156, 165, 176, 217, 227, 232, 300, 306, 385, 397, 407, 438, 448, 452, 453, 474, 476, 482, 487, 489, 490, 501, 506, 539, 540, 545, 546, 547, 548, 550, 551, 557, 572, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 620, 621, 625, 634, 635, 644, 645, 654, 655, 658, 660, 662, 663, 664, 666, 673, 678, 680, 681, 726, 727, 733, 735, 782, 785, 786, 787, 807, 810, 840, 841, 842, 845, 857, 858, 888, 941, 964, 967, 970, 971, 972, 973, 987, 989, 1004, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1024], "descent": [7, 13, 165, 176, 183, 217, 227, 232, 313, 402, 404, 457, 458, 464, 474, 482, 489, 517, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 557, 625, 632, 633, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 654, 658, 660, 662, 663, 664, 667, 668, 669, 670, 673, 680, 810, 841, 842, 845, 884, 888, 941, 964, 971, 973, 982, 989, 1000, 1004, 1009, 1012, 1013, 1014, 1016, 1018, 1020, 1022, 1023, 1024], "nusvr": [7, 358, 890, 982, 1011, 1017, 1019, 1020, 1021, 1023, 1024], "nu": [7, 9, 11, 159, 212, 227, 329, 358, 404, 407, 605, 663, 886, 887, 888, 973, 981, 982, 1020, 1024], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 68, 72, 89, 95, 97, 143, 150, 158, 179, 185, 202, 203, 210, 214, 232, 233, 236, 239, 256, 258, 259, 263, 284, 297, 300, 323, 326, 327, 329, 330, 331, 333, 334, 335, 338, 340, 341, 344, 358, 360, 361, 377, 378, 381, 383, 385, 394, 395, 397, 399, 400, 401, 402, 404, 407, 408, 409, 423, 429, 430, 431, 433, 435, 436, 437, 439, 450, 451, 453, 454, 468, 469, 470, 471, 473, 475, 483, 495, 498, 507, 510, 517, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 535, 536, 537, 538, 553, 554, 555, 556, 567, 568, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 603, 604, 605, 606, 608, 609, 611, 617, 624, 626, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 658, 659, 660, 661, 662, 663, 664, 672, 673, 674, 675, 677, 678, 679, 681, 685, 705, 720, 748, 753, 754, 755, 756, 758, 759, 760, 762, 763, 782, 785, 786, 796, 808, 811, 812, 813, 819, 820, 821, 822, 823, 826, 827, 828, 830, 831, 832, 834, 835, 836, 841, 842, 849, 851, 856, 864, 868, 871, 882, 884, 885, 886, 887, 888, 889, 890, 891, 904, 918, 920, 921, 930, 936, 956, 959, 960, 961, 963, 964, 965, 967, 968, 969, 971, 972, 973, 977, 981, 983, 989, 993, 996, 999, 1002, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1020, 1022], "gradientboostingregressor": [7, 123, 124, 130, 133, 358, 377, 383, 404, 540, 548, 618, 619, 963, 967, 968, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "forward": [7, 147, 312, 358, 372, 406, 494, 495, 525, 529, 539, 545, 546, 571, 572, 588, 671, 672, 848, 963, 988, 1021], "wise": [7, 26, 48, 158, 199, 227, 268, 300, 344, 358, 385, 395, 397, 401, 402, 406, 444, 517, 520, 523, 527, 531, 532, 535, 536, 539, 541, 542, 545, 546, 578, 581, 582, 584, 585, 586, 592, 626, 638, 686, 739, 812, 861, 874, 875, 878, 940, 942, 943, 944, 945, 948, 959, 961, 967, 968, 981, 988, 1009, 1014, 1017, 1018, 1019], "fashion": [7, 115, 121, 206, 267, 359, 385, 394, 395, 397, 402, 404, 539, 543, 544, 545, 546, 550, 551, 552, 588, 613, 810, 833, 848, 851, 857, 868, 892, 893, 894, 895, 938, 957, 963, 967, 977, 1018], "notic": [7, 25, 26, 53, 57, 80, 113, 115, 116, 123, 146, 177, 182, 227, 239, 255, 256, 258, 259, 261, 267, 268, 278, 305, 343, 344, 345, 354, 377, 386, 401, 482, 527, 549, 956, 966, 967, 973, 1002, 1006, 1022], "faster": [7, 19, 39, 64, 73, 95, 110, 115, 116, 120, 123, 147, 169, 174, 184, 198, 200, 213, 214, 216, 233, 278, 280, 296, 311, 313, 314, 343, 344, 345, 358, 366, 372, 380, 381, 385, 396, 397, 402, 406, 407, 409, 429, 433, 435, 437, 438, 439, 448, 494, 517, 518, 519, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 539, 545, 546, 547, 548, 629, 632, 633, 638, 639, 644, 645, 646, 647, 648, 649, 658, 660, 670, 673, 677, 681, 685, 711, 741, 763, 764, 765, 824, 825, 829, 841, 842, 859, 861, 863, 873, 877, 921, 936, 956, 960, 963, 968, 970, 971, 974, 979, 981, 982, 983, 987, 990, 998, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "10_000": [7, 25, 75, 115, 123, 167, 174, 231, 261, 278, 545, 546, 550, 551, 861], "vari": [7, 34, 44, 46, 55, 62, 75, 116, 117, 119, 146, 165, 168, 169, 187, 189, 192, 196, 224, 232, 248, 254, 258, 261, 293, 298, 300, 305, 317, 324, 330, 333, 354, 358, 360, 367, 385, 427, 431, 432, 486, 494, 500, 501, 508, 545, 546, 550, 551, 632, 633, 636, 637, 638, 639, 640, 641, 646, 647, 648, 649, 667, 670, 689, 748, 801, 808, 810, 811, 841, 845, 849, 864, 881, 889, 892, 893, 941, 959, 962, 963, 967, 970, 971, 980, 983, 991, 1016, 1017, 1025], "relev": [7, 9, 19, 77, 83, 145, 165, 177, 192, 258, 259, 265, 354, 358, 360, 367, 369, 371, 372, 374, 376, 377, 378, 385, 386, 399, 400, 406, 407, 456, 460, 520, 527, 631, 641, 711, 725, 741, 785, 786, 813, 862, 864, 896, 897, 898, 967, 968, 973, 984, 988, 1012, 1017, 1021, 1023], "select": [7, 9, 36, 44, 55, 57, 62, 68, 69, 71, 74, 76, 82, 92, 94, 107, 112, 118, 120, 123, 130, 137, 144, 148, 155, 157, 168, 169, 171, 174, 176, 178, 182, 206, 213, 216, 217, 220, 227, 231, 233, 242, 243, 250, 256, 257, 258, 259, 263, 282, 300, 305, 306, 312, 318, 319, 322, 325, 330, 338, 341, 343, 344, 345, 354, 358, 359, 361, 367, 369, 370, 372, 374, 380, 384, 385, 394, 397, 398, 399, 402, 404, 405, 407, 429, 431, 432, 433, 435, 437, 439, 444, 445, 446, 450, 452, 453, 458, 459, 462, 474, 475, 478, 479, 482, 483, 487, 488, 490, 498, 501, 518, 520, 521, 526, 527, 530, 535, 537, 544, 545, 546, 549, 551, 567, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 613, 617, 618, 631, 632, 633, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 657, 659, 662, 664, 668, 669, 677, 678, 683, 698, 702, 704, 739, 775, 776, 780, 781, 782, 785, 786, 787, 788, 796, 806, 807, 808, 810, 812, 826, 827, 828, 830, 832, 834, 835, 836, 844, 845, 849, 854, 860, 864, 881, 884, 885, 889, 892, 893, 894, 895, 900, 936, 937, 961, 962, 964, 967, 968, 970, 971, 973, 977, 980, 981, 982, 983, 984, 987, 988, 989, 991, 993, 994, 996, 1000, 1001, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025], "ham": [7, 436, 443, 567, 685, 689, 695, 719, 726, 763, 764, 765, 779, 970], "loss": [7, 24, 25, 26, 27, 116, 121, 122, 123, 124, 125, 150, 151, 165, 176, 180, 188, 191, 200, 203, 205, 206, 210, 216, 217, 233, 266, 295, 296, 305, 313, 322, 327, 328, 332, 338, 343, 383, 385, 395, 396, 402, 407, 450, 451, 482, 494, 495, 518, 524, 525, 526, 529, 533, 538, 539, 540, 544, 545, 546, 547, 548, 551, 629, 632, 635, 644, 645, 652, 653, 654, 655, 656, 657, 658, 662, 663, 664, 665, 689, 692, 695, 708, 719, 720, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 779, 782, 785, 786, 796, 806, 807, 810, 841, 842, 844, 845, 848, 849, 857, 858, 859, 864, 884, 885, 890, 891, 893, 895, 921, 925, 960, 963, 971, 975, 980, 981, 982, 983, 1002, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "eustach": [7, 8, 10, 991, 1011, 1012], "diemert": [7, 8, 10, 991, 1011, 1012], "maria": [7, 124, 130, 147, 163, 397, 1020, 1021, 1022, 1023, 1024], "telenczuk": [7, 124, 130, 147, 163, 1018, 1021, 1022, 1024], "github": [7, 8, 12, 26, 71, 72, 109, 115, 117, 118, 124, 126, 127, 130, 133, 144, 155, 163, 168, 169, 170, 179, 228, 229, 230, 237, 238, 239, 240, 248, 256, 258, 259, 265, 270, 278, 297, 306, 311, 312, 314, 315, 320, 352, 366, 370, 371, 375, 376, 377, 378, 380, 383, 385, 386, 388, 391, 393, 438, 448, 494, 522, 677, 678, 681, 970, 986, 987, 990, 991, 1002, 1014, 1019], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 57, 65, 70, 71, 109, 110, 111, 112, 113, 114, 115, 121, 122, 124, 125, 129, 130, 150, 153, 155, 157, 159, 163, 178, 198, 200, 205, 215, 216, 220, 222, 224, 230, 243, 245, 246, 259, 262, 278, 300, 301, 304, 305, 343, 344, 366, 367, 370, 372, 376, 377, 378, 380, 383, 388, 397, 428, 438, 448, 494, 520, 522, 527, 657, 677, 681, 691, 970, 985, 990, 1014, 1016, 1019], "maikia": [7, 124, 130, 163, 1017, 1018, 1020, 1021], "lemaitre58": [7, 130, 150, 155, 157, 159, 220, 300], "gmail": [7, 11, 14, 16, 24, 42, 48, 57, 65, 70, 71, 109, 110, 111, 112, 113, 114, 115, 121, 122, 124, 125, 129, 130, 150, 153, 155, 157, 159, 178, 198, 200, 215, 216, 220, 222, 230, 243, 245, 246, 259, 262, 300, 305, 343, 344], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 129, 130, 147, 150, 151, 153, 154, 155, 156, 157, 159, 163, 174, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 203, 205, 206, 214, 215, 216, 220, 221, 222, 224, 227, 230, 232, 233, 234, 236, 243, 245, 259, 262, 264, 271, 276, 278, 280, 286, 287, 288, 290, 291, 294, 297, 300, 301, 302, 303, 304, 305, 318, 319, 320, 321, 323, 334, 335, 338, 339, 343, 344, 345, 366, 385, 391, 983, 991], "mean_squared_error": [7, 123, 124, 194, 198, 200, 202, 204, 216, 354, 404, 727, 737, 967, 1010, 1012, 1019, 1020], "hamming_loss": [7, 689, 779, 967, 1011, 1015, 1018], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 54, 57, 59, 60, 62, 64, 65, 71, 78, 79, 80, 92, 96, 101, 102, 113, 119, 139, 142, 170, 188, 193, 196, 201, 204, 207, 211, 215, 222, 244, 246, 247, 248, 249, 261, 264, 272, 283, 284, 285, 290, 335, 336, 340, 344, 354, 359, 374, 381, 383, 385, 397, 401, 402, 429, 433, 434, 436, 438, 443, 445, 446, 447, 448, 457, 458, 459, 522, 530, 539, 540, 541, 542, 545, 546, 613, 632, 633, 638, 639, 646, 647, 648, 649, 663, 675, 677, 679, 681, 780, 781, 786, 815, 818, 833, 887, 907, 920, 921, 932, 936, 956, 957, 962, 964, 1000, 1013, 1014, 1018, 1019, 1025], "fetch_20newsgroups_vector": [7, 213, 231, 367, 1009, 1019, 1021], "spars": [7, 12, 13, 17, 39, 40, 54, 55, 57, 77, 83, 94, 107, 115, 128, 165, 176, 193, 197, 214, 217, 231, 233, 259, 278, 311, 315, 338, 342, 345, 346, 352, 358, 364, 366, 367, 368, 372, 374, 375, 376, 377, 383, 384, 385, 396, 397, 398, 404, 405, 407, 408, 412, 424, 426, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 443, 445, 446, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 473, 474, 475, 482, 483, 489, 494, 509, 510, 512, 513, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 567, 568, 571, 572, 574, 575, 576, 577, 579, 580, 589, 590, 591, 592, 593, 594, 595, 615, 616, 617, 619, 624, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 698, 699, 700, 714, 715, 716, 719, 723, 724, 725, 739, 740, 745, 746, 748, 749, 751, 752, 753, 755, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 772, 775, 776, 779, 782, 785, 786, 796, 803, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 847, 848, 849, 851, 853, 854, 855, 856, 857, 859, 861, 862, 864, 866, 867, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 900, 902, 903, 904, 905, 910, 918, 921, 922, 925, 926, 927, 930, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 953, 957, 960, 963, 964, 965, 967, 968, 970, 980, 982, 983, 988, 989, 1000, 1001, 1002, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "generate_data": [7, 33], "load_diabet": [7, 124, 133, 136, 147, 163, 183, 185, 186, 187, 194, 195, 237, 254, 315, 404, 544, 548, 554, 659, 687, 805, 806, 807, 893, 895, 975, 997, 1000, 1015, 1020, 1023], "elif": [7, 8, 16, 34, 178, 200, 234, 236, 245, 283, 860], "subset": [7, 19, 26, 27, 32, 70, 71, 80, 81, 117, 119, 120, 136, 144, 169, 187, 199, 213, 214, 215, 216, 230, 232, 235, 236, 256, 259, 261, 267, 268, 270, 305, 306, 312, 318, 322, 343, 344, 345, 354, 367, 372, 380, 383, 385, 394, 395, 397, 398, 401, 404, 405, 407, 414, 423, 435, 450, 452, 453, 455, 474, 475, 478, 479, 483, 494, 535, 536, 537, 539, 541, 542, 543, 545, 547, 548, 549, 550, 553, 555, 588, 596, 615, 625, 626, 627, 628, 637, 641, 644, 652, 654, 657, 660, 661, 662, 663, 664, 665, 683, 689, 690, 699, 702, 704, 716, 719, 740, 742, 776, 779, 784, 808, 810, 812, 813, 814, 815, 819, 820, 821, 822, 823, 826, 831, 834, 841, 850, 879, 880, 884, 886, 889, 892, 894, 900, 936, 956, 963, 967, 968, 978, 980, 982, 983, 1002, 1012, 1017, 1018, 1020, 1022], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 59, 80, 108, 114, 131, 134, 163, 165, 171, 194, 203, 215, 232, 257, 258, 264, 268, 272, 276, 328, 335, 354, 358, 379, 385, 394, 395, 397, 401, 402, 404, 408, 424, 427, 429, 430, 431, 432, 434, 436, 437, 439, 441, 442, 457, 458, 464, 467, 522, 533, 539, 550, 555, 583, 597, 606, 618, 619, 620, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 658, 659, 660, 661, 665, 667, 670, 674, 676, 678, 680, 693, 702, 714, 715, 720, 721, 723, 729, 739, 749, 754, 756, 757, 758, 759, 763, 766, 768, 769, 772, 773, 774, 775, 776, 778, 789, 791, 805, 809, 822, 824, 825, 862, 863, 864, 870, 874, 884, 885, 910, 923, 959, 961, 963, 964, 965, 967, 969, 970, 971, 975, 977, 980, 982, 997, 1000, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "given": [7, 10, 11, 27, 37, 49, 58, 60, 78, 85, 96, 100, 116, 126, 128, 130, 150, 157, 168, 169, 182, 198, 199, 216, 220, 227, 231, 232, 235, 237, 254, 258, 259, 260, 261, 267, 284, 285, 286, 302, 306, 313, 338, 343, 344, 345, 351, 358, 360, 367, 371, 372, 374, 376, 378, 380, 381, 383, 385, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 414, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 442, 444, 445, 446, 447, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 467, 468, 469, 470, 473, 482, 487, 489, 491, 509, 522, 524, 525, 526, 529, 533, 535, 536, 537, 538, 539, 540, 541, 543, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 574, 575, 576, 577, 579, 587, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 617, 618, 630, 632, 635, 637, 638, 639, 641, 644, 645, 647, 649, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 673, 674, 677, 683, 684, 685, 686, 687, 688, 690, 691, 692, 698, 700, 703, 704, 706, 709, 711, 712, 719, 721, 722, 725, 737, 740, 741, 743, 744, 749, 759, 763, 766, 767, 769, 772, 773, 774, 777, 778, 780, 781, 782, 785, 786, 788, 794, 796, 800, 806, 807, 808, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 851, 854, 855, 857, 858, 859, 860, 861, 863, 864, 870, 871, 873, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 894, 899, 908, 909, 910, 951, 955, 956, 959, 961, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 977, 980, 981, 982, 983, 991, 993, 997, 998, 1000, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "round": [7, 9, 25, 85, 116, 162, 163, 205, 216, 258, 264, 302, 304, 343, 436, 442, 443, 550, 551, 579, 580, 583, 613, 678, 699, 784, 794, 849, 881, 896, 898, 957, 971, 983, 1011, 1013, 1015, 1017, 1018, 1020, 1022, 1023, 1025], "changing_param": 7, "collect": [7, 9, 10, 12, 16, 19, 25, 80, 114, 126, 133, 147, 155, 163, 171, 186, 191, 212, 222, 230, 261, 265, 284, 329, 332, 344, 345, 358, 367, 369, 376, 388, 401, 402, 404, 405, 407, 432, 450, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 555, 556, 567, 569, 570, 574, 575, 576, 577, 618, 784, 788, 789, 791, 938, 941, 956, 962, 963, 967, 973, 978, 988, 991, 997, 1002, 1011, 1021], "chang": [7, 16, 25, 26, 95, 99, 100, 113, 116, 124, 151, 162, 167, 168, 171, 199, 200, 202, 203, 237, 238, 253, 258, 265, 268, 304, 310, 311, 312, 313, 314, 315, 319, 330, 345, 354, 358, 359, 360, 367, 370, 374, 375, 376, 377, 380, 383, 385, 397, 401, 404, 405, 407, 420, 423, 426, 433, 435, 438, 440, 445, 448, 454, 457, 458, 464, 479, 480, 482, 490, 494, 495, 498, 499, 500, 508, 512, 517, 521, 522, 523, 524, 525, 526, 532, 533, 535, 536, 537, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 574, 575, 577, 579, 580, 583, 588, 596, 597, 599, 600, 601, 603, 605, 606, 608, 609, 611, 613, 621, 630, 631, 633, 635, 636, 637, 639, 640, 641, 642, 644, 645, 647, 649, 650, 651, 656, 658, 660, 665, 673, 678, 686, 690, 693, 698, 702, 703, 714, 715, 721, 722, 726, 740, 741, 742, 763, 769, 770, 772, 778, 780, 781, 782, 783, 784, 785, 786, 787, 796, 800, 801, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 816, 817, 819, 820, 821, 823, 824, 825, 830, 831, 843, 846, 848, 849, 857, 872, 873, 878, 879, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 902, 904, 905, 916, 921, 933, 934, 935, 937, 956, 957, 958, 966, 967, 968, 970, 977, 980, 981, 982, 983, 985, 988, 993, 1000, 1002, 1007, 1008], "affect": [7, 25, 80, 157, 167, 168, 202, 223, 237, 261, 268, 305, 354, 358, 359, 360, 368, 385, 387, 395, 397, 400, 401, 403, 405, 408, 410, 430, 436, 443, 459, 461, 465, 535, 536, 555, 698, 773, 782, 785, 786, 787, 796, 800, 801, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 864, 865, 875, 889, 966, 970, 982, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 376, 395, 401, 819, 969, 1023], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 16, 17, 25, 33, 37, 40, 44, 50, 61, 71, 103, 110, 113, 114, 116, 121, 123, 137, 163, 171, 191, 202, 203, 205, 206, 213, 216, 232, 233, 258, 261, 267, 268, 271, 276, 294, 295, 306, 321, 330, 333, 343, 344, 345, 348, 352, 378, 385, 398, 405, 644, 645, 884, 885, 891, 911, 977, 997], "start_tim": [7, 10, 19, 117, 118, 130, 150, 187, 220], "elapsed_tim": [7, 39, 67, 117, 118, 130, 215], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 53, 60, 61, 65, 66, 67, 71, 98, 102, 139, 158, 168, 184, 188, 222, 257, 258, 262, 266, 338, 345, 358, 366, 367, 372, 381, 385, 397, 398, 405, 406, 408, 409, 410, 414, 416, 418, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 473, 478, 479, 480, 482, 484, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 569, 570, 574, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 596, 597, 599, 600, 601, 602, 603, 605, 606, 608, 609, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 744, 751, 754, 760, 761, 762, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 788, 796, 799, 802, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 844, 847, 850, 851, 857, 858, 860, 862, 864, 865, 866, 867, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 902, 904, 905, 908, 918, 919, 930, 942, 948, 953, 957, 967, 968, 970, 971, 977, 982, 983, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 113, 122, 124, 213, 214, 216, 305], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 68, 94, 107, 127, 165, 197, 344, 345, 365, 366, 367, 374, 383, 385, 397, 405, 435, 450, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 496, 512, 517, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 553, 554, 555, 556, 567, 568, 570, 573, 574, 575, 618, 619, 620, 650, 671, 672, 687, 699, 782, 785, 786, 793, 794, 796, 807, 843, 848, 857, 892, 893, 894, 895, 899, 909, 956, 963, 967, 982, 993, 1002, 1003, 1004, 1009, 1017, 1020, 1021, 1022, 1023, 1024], "necessari": [7, 13, 114, 182, 198, 203, 243, 258, 259, 265, 280, 350, 358, 367, 370, 371, 372, 373, 374, 375, 376, 380, 383, 397, 399, 404, 438, 448, 474, 475, 477, 478, 479, 480, 481, 483, 520, 630, 631, 632, 638, 642, 643, 646, 647, 648, 649, 650, 651, 657, 659, 661, 662, 677, 681, 778, 847, 856, 867, 871, 877, 956, 959, 963, 966, 969, 977, 983, 1002, 1009, 1017], "defin": [7, 9, 12, 27, 53, 55, 57, 66, 70, 71, 73, 86, 95, 100, 109, 110, 111, 130, 147, 150, 157, 158, 159, 169, 170, 177, 199, 202, 206, 215, 216, 227, 231, 237, 239, 243, 248, 258, 259, 261, 265, 267, 268, 269, 270, 278, 300, 311, 330, 338, 343, 344, 358, 368, 371, 372, 373, 374, 378, 379, 381, 383, 384, 385, 391, 392, 393, 394, 396, 397, 398, 399, 401, 402, 403, 404, 405, 407, 413, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 445, 449, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 475, 505, 506, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 613, 614, 615, 616, 618, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 682, 683, 685, 694, 696, 702, 707, 708, 709, 710, 713, 716, 723, 726, 730, 731, 733, 735, 736, 738, 739, 742, 745, 751, 766, 770, 775, 776, 780, 781, 782, 785, 786, 788, 796, 807, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 871, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 908, 910, 913, 919, 951, 956, 957, 963, 964, 965, 966, 968, 969, 970, 972, 973, 974, 975, 977, 979, 981, 982, 983, 988, 998, 1001, 1004, 1006, 1011, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1025], "complexity_label": [7, 10], "type": [7, 16, 53, 54, 69, 70, 76, 81, 90, 105, 119, 122, 155, 165, 167, 168, 169, 174, 182, 198, 200, 240, 242, 245, 248, 250, 253, 264, 265, 267, 268, 334, 338, 343, 345, 352, 354, 359, 361, 365, 366, 367, 369, 370, 372, 373, 375, 376, 377, 378, 383, 384, 388, 391, 393, 394, 398, 405, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 482, 494, 495, 501, 553, 558, 567, 568, 571, 572, 574, 575, 577, 586, 590, 603, 613, 615, 616, 624, 642, 644, 658, 660, 665, 673, 675, 678, 679, 687, 693, 700, 702, 714, 715, 723, 726, 768, 769, 772, 773, 780, 781, 782, 788, 796, 808, 810, 811, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 844, 845, 846, 849, 851, 857, 858, 864, 865, 882, 886, 887, 888, 889, 890, 900, 902, 904, 905, 908, 912, 913, 930, 931, 938, 941, 954, 957, 959, 964, 966, 967, 968, 969, 970, 971, 977, 979, 983, 990, 991, 995, 1000, 1001, 1002, 1009, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 85, 143, 144, 147, 167, 168, 177, 180, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 197, 201, 202, 203, 207, 213, 214, 234, 240, 271, 307, 314, 328, 335, 339, 343, 354, 367, 374, 385, 400, 406, 451, 468, 469, 470, 535, 579, 580, 583, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 884, 885, 886, 887, 888, 889, 890, 951, 961, 963, 981, 982, 1000, 1009, 1011, 1014, 1016, 1021, 1023], "toarrai": [7, 322, 352, 398, 405, 552, 568, 574, 576, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 857, 874, 875, 938, 941, 957, 970, 977], "count_nonzero": [7, 10, 358], "configur": [7, 10, 71, 72, 169, 238, 240, 307, 343, 357, 370, 372, 374, 378, 380, 383, 385, 388, 393, 398, 405, 406, 419, 428, 429, 431, 433, 435, 438, 448, 450, 454, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 552, 553, 554, 555, 556, 567, 568, 569, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 612, 613, 614, 615, 616, 618, 621, 624, 625, 626, 627, 628, 674, 675, 676, 677, 678, 680, 681, 773, 828, 833, 836, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 882, 933, 934, 964, 967, 977, 982, 987, 1002, 1004, 1013, 1016, 1017, 1018, 1019, 1021, 1023, 1024], "penalti": [7, 10, 30, 82, 165, 176, 177, 182, 187, 191, 198, 213, 214, 217, 229, 266, 294, 313, 322, 335, 343, 358, 380, 383, 396, 399, 402, 406, 457, 458, 459, 460, 461, 462, 464, 488, 517, 523, 524, 525, 526, 528, 529, 533, 534, 583, 629, 632, 633, 634, 635, 638, 639, 640, 643, 644, 645, 646, 647, 648, 654, 655, 656, 658, 662, 664, 666, 667, 673, 796, 864, 884, 885, 887, 889, 890, 891, 956, 963, 966, 971, 977, 981, 982, 1000, 1002, 1011, 1014, 1016, 1018, 1019, 1021, 1022, 1024, 1025], "elasticnet": [7, 10, 179, 189, 266, 271, 358, 378, 383, 402, 633, 638, 643, 644, 645, 646, 647, 648, 649, 654, 662, 664, 667, 963, 981, 1009, 1010, 1013, 1014, 1015, 1017, 1018, 1020, 1021, 1022, 1023], "001": [7, 13, 32, 44, 62, 150, 168, 182, 207, 227, 243, 256, 258, 260, 321, 344, 369, 378, 401, 522, 523, 525, 532, 613, 630, 631, 632, 633, 638, 639, 646, 647, 648, 649, 652, 653, 654, 662, 663, 664, 665, 667, 670, 675, 676, 679, 680, 780, 781, 841, 842, 879, 880, 886, 887, 888, 889, 890, 956, 993, 1002], "modified_hub": [7, 662, 981], "fit_intercept": [7, 177, 178, 184, 203, 212, 227, 266, 307, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 884, 885, 891, 963, 981, 1013, 1017, 1018, 1019, 1021, 1022, 1023], "tol": [7, 10, 17, 73, 95, 121, 162, 178, 189, 191, 205, 206, 212, 214, 227, 237, 244, 246, 297, 313, 338, 343, 374, 378, 404, 409, 429, 433, 435, 438, 445, 448, 457, 458, 464, 468, 469, 470, 517, 518, 519, 521, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 535, 536, 545, 546, 547, 548, 588, 613, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 658, 660, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 674, 675, 677, 679, 681, 780, 781, 796, 833, 841, 842, 879, 880, 884, 885, 886, 887, 888, 889, 890, 953, 963, 981, 982, 998, 1002, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "n_iter_no_chang": [7, 116, 121, 206, 313, 343, 377, 385, 404, 545, 546, 547, 548, 652, 653, 654, 662, 663, 664, 841, 842, 981, 1017, 1020], "l1_ratio": [7, 10, 14, 182, 183, 189, 266, 271, 358, 383, 402, 524, 526, 533, 632, 633, 638, 644, 645, 646, 647, 648, 649, 654, 662, 664, 667, 963, 981, 1010, 1012, 1014, 1021, 1023], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 58, 60, 78, 79, 82, 95, 98, 144, 165, 166, 167, 172, 176, 182, 183, 184, 185, 189, 191, 192, 193, 194, 195, 196, 200, 201, 213, 216, 217, 240, 296, 307, 312, 313, 314, 343, 344, 345, 358, 368, 372, 374, 385, 387, 396, 399, 400, 402, 406, 407, 410, 418, 438, 451, 453, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 482, 510, 512, 513, 517, 521, 523, 525, 528, 529, 534, 538, 540, 542, 544, 546, 548, 551, 554, 556, 568, 575, 579, 583, 595, 597, 600, 613, 621, 622, 625, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 677, 687, 689, 702, 705, 714, 719, 723, 728, 735, 738, 760, 762, 770, 771, 775, 776, 779, 797, 807, 810, 817, 818, 827, 835, 842, 845, 857, 864, 884, 885, 886, 887, 888, 889, 890, 893, 895, 958, 961, 963, 981, 982, 1000, 1009, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1023], "misclassif": [7, 779, 981, 982, 983, 1010], "ratio": [7, 53, 66, 73, 104, 165, 231, 233, 246, 251, 274, 358, 372, 397, 399, 401, 404, 436, 442, 479, 480, 501, 527, 535, 536, 537, 617, 644, 696, 698, 702, 710, 715, 721, 724, 767, 768, 769, 772, 778, 807, 810, 830, 877, 936, 961, 973, 983, 998, 1024], "sparsifi": [7, 182, 358, 644, 645, 652, 654, 662, 663, 664, 884, 951, 1011], "05": [7, 8, 14, 24, 26, 30, 37, 44, 52, 60, 62, 64, 65, 67, 68, 75, 85, 91, 100, 113, 116, 121, 123, 128, 136, 140, 143, 148, 155, 158, 159, 168, 172, 178, 179, 197, 200, 212, 217, 223, 224, 225, 227, 243, 245, 246, 249, 258, 259, 265, 267, 268, 269, 274, 283, 286, 291, 300, 302, 310, 314, 316, 319, 321, 324, 335, 341, 346, 369, 406, 436, 442, 578, 581, 582, 584, 599, 600, 601, 605, 606, 608, 609, 611, 618, 619, 635, 676, 680, 741, 782, 833, 884, 885, 963, 971, 977], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 55, 60, 61, 62, 63, 64, 65, 70, 72, 98, 101, 105, 106, 110, 113, 116, 119, 120, 121, 138, 139, 145, 146, 150, 158, 163, 169, 171, 197, 198, 216, 222, 227, 230, 231, 232, 235, 236, 243, 245, 246, 253, 256, 258, 259, 266, 267, 269, 272, 276, 278, 285, 287, 288, 294, 301, 302, 303, 306, 318, 319, 322, 330, 337, 340, 343, 344, 345, 352, 383, 385, 407, 423, 431, 436, 442, 450, 493, 501, 536, 555, 556, 568, 583, 618, 619, 767, 782, 796, 806, 810, 812, 815, 879, 880, 1000, 1001, 1002, 1018, 1021], "support_vectors_": [7, 10, 16, 331, 334, 335, 886, 887, 888, 889, 890, 982], "squared_error": [7, 105, 123, 124, 313, 404, 544, 545, 546, 548, 551, 657, 662, 664, 679, 893, 895, 981, 983, 1022, 1025], "learning_r": [7, 109, 110, 122, 123, 124, 125, 224, 278, 295, 297, 311, 313, 404, 539, 540, 545, 546, 547, 548, 654, 662, 663, 664, 678, 840, 841, 842, 964, 974, 981, 1010, 1018, 1022], "max_depth": [7, 31, 109, 110, 111, 112, 115, 119, 122, 123, 124, 125, 128, 129, 131, 162, 220, 255, 270, 312, 313, 348, 350, 351, 352, 384, 385, 404, 539, 540, 543, 544, 545, 546, 547, 548, 550, 551, 552, 785, 786, 808, 892, 893, 894, 895, 896, 897, 898, 956, 974, 983, 1018, 1020], "n_estim": [7, 10, 26, 31, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 128, 129, 132, 162, 171, 220, 235, 239, 245, 255, 270, 302, 310, 312, 358, 384, 385, 404, 406, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 618, 785, 786, 956, 973, 974, 1006, 1017, 1025], "n_tree": 7, "loop": [7, 8, 113, 123, 168, 253, 263, 343, 352, 358, 372, 373, 378, 397, 401, 406, 632, 633, 638, 639, 645, 646, 647, 648, 649, 956, 980, 981, 997, 1012, 1013, 1016, 1021, 1022], "previous": [7, 53, 57, 71, 156, 168, 256, 265, 314, 367, 380, 383, 388, 397, 402, 405, 426, 429, 440, 510, 520, 527, 635, 644, 645, 652, 654, 662, 663, 664, 884, 935, 963, 977, 987, 1006, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "subsequ": [7, 32, 58, 75, 98, 144, 186, 200, 260, 263, 278, 280, 330, 354, 372, 374, 378, 385, 397, 398, 404, 407, 423, 482, 494, 539, 540, 545, 547, 548, 652, 654, 662, 785, 786, 812, 813, 816, 819, 820, 821, 822, 823, 841, 859, 863, 957, 966, 968, 1018, 1019, 1023, 1025], "relax": [7, 397, 405, 439, 980, 1016], "sgd": [7, 8, 165, 176, 205, 212, 217, 227, 266, 295, 296, 313, 343, 354, 360, 490, 498, 617, 635, 652, 653, 654, 657, 662, 663, 664, 665, 841, 842, 956, 971, 989, 1004, 1009, 1012, 1013, 1014, 1016, 1020, 1022], "svr": [7, 10, 165, 226, 241, 310, 325, 341, 358, 542, 553, 554, 579, 580, 629, 664, 782, 788, 885, 887, 889, 960, 1000, 1009, 1011, 1013, 1014, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "optim": [7, 13, 27, 53, 54, 57, 60, 72, 78, 79, 95, 109, 122, 124, 146, 150, 151, 154, 155, 156, 157, 158, 159, 182, 186, 187, 191, 206, 214, 233, 256, 263, 266, 271, 276, 282, 297, 300, 305, 314, 321, 332, 338, 343, 344, 345, 354, 358, 361, 366, 369, 372, 374, 375, 383, 385, 388, 392, 394, 397, 399, 401, 402, 404, 406, 407, 408, 430, 434, 435, 436, 438, 443, 447, 448, 458, 459, 465, 517, 520, 521, 523, 525, 529, 543, 544, 545, 546, 560, 596, 597, 605, 606, 621, 624, 626, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 667, 668, 669, 670, 673, 676, 678, 680, 681, 687, 708, 715, 782, 796, 826, 827, 828, 830, 832, 833, 834, 835, 836, 841, 842, 860, 872, 876, 877, 884, 885, 886, 887, 888, 889, 890, 959, 960, 961, 962, 963, 967, 968, 969, 970, 971, 972, 981, 982, 983, 987, 991, 997, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1025], "few": [7, 14, 19, 39, 46, 52, 99, 120, 153, 156, 157, 187, 196, 198, 200, 216, 233, 243, 260, 261, 265, 296, 300, 304, 310, 311, 312, 313, 314, 315, 318, 338, 345, 358, 367, 368, 369, 372, 374, 384, 386, 391, 394, 395, 397, 401, 402, 404, 406, 407, 423, 435, 547, 548, 574, 577, 641, 678, 681, 877, 921, 935, 963, 964, 966, 967, 970, 971, 980, 982, 983, 991, 993, 1000, 1001, 1002, 1015, 1025], "drawn": [7, 52, 80, 113, 146, 150, 159, 167, 237, 265, 282, 343, 368, 397, 403, 404, 407, 409, 455, 456, 457, 458, 459, 460, 461, 462, 501, 509, 519, 541, 542, 549, 597, 613, 618, 627, 820, 876, 877, 894, 895, 963, 977, 979, 1012], "boost": [7, 108, 109, 110, 111, 115, 127, 130, 133, 134, 165, 306, 378, 385, 406, 434, 452, 453, 476, 482, 487, 490, 501, 506, 539, 540, 545, 546, 547, 548, 550, 551, 618, 619, 620, 621, 726, 727, 733, 735, 782, 785, 786, 787, 807, 810, 845, 857, 858, 963, 967, 987, 989, 1004, 1009, 1010, 1012, 1014, 1015, 1016, 1018, 1022], "detriment": [7, 146, 359, 406, 963], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 57, 60, 65, 67, 73, 75, 80, 92, 120, 163, 171, 198, 228, 230, 237, 243, 261, 269, 301, 305, 306, 321, 343, 344, 998], "add_subplot": [7, 16, 25, 27, 42, 45, 64, 67, 90, 101, 102, 109, 169, 195, 213, 221, 223, 318, 319, 379], "line1": [7, 12, 222], "tab": [7, 53, 127, 130, 150, 155, 157, 186, 187, 311, 398, 1016], "blue": [7, 20, 21, 26, 34, 92, 95, 113, 117, 125, 127, 130, 132, 145, 155, 157, 174, 178, 186, 187, 194, 196, 222, 231, 252, 253, 258, 295, 305, 311, 320, 369, 397, 402], "set_xlabel": [7, 10, 45, 53, 60, 72, 73, 75, 90, 92, 100, 109, 159, 162, 163, 167, 169, 170, 174, 187, 193, 195, 196, 198, 200, 213, 214, 232, 258, 260, 264, 269, 270, 283, 300, 301, 305, 321, 344, 345, 348], "y1_label": 7, "set_ylabel": [7, 8, 10, 45, 53, 60, 65, 72, 73, 75, 80, 90, 92, 100, 106, 109, 117, 159, 169, 174, 187, 189, 193, 195, 196, 198, 200, 213, 232, 243, 258, 260, 264, 269, 270, 276, 283, 300, 301, 305, 310, 321, 338, 344, 348, 998], "spine": [7, 14, 209, 300], "set_color": [7, 209], "get_color": 7, "yaxi": [7, 10, 45, 60, 90, 101, 102, 116, 195, 219, 221, 224, 243, 278, 283, 343], "tick_param": [7, 14, 133, 243, 258, 304, 321], "ax2": [7, 57, 60, 65, 67, 80, 92, 120, 163, 171, 198, 228, 237, 243, 261, 269, 288, 301, 305, 306, 321, 343], "frameon": [7, 204], "line2": [7, 12, 222, 339], "orang": [7, 53, 92, 96, 97, 103, 125, 127, 157, 163, 186, 187, 208, 234, 246, 281, 289, 311, 351, 968], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 16, 25, 61, 162, 198, 200, 240, 253, 260, 302, 322, 343, 344, 345, 379, 383, 857], "prediction_perform": 7, "4948": 7, "2675": 7, "056574": 7, "1847": 7, "3264": 7, "044876": 7, "997": [7, 40], "3383": 7, "034836": 7, "802": [7, 369], "3582": 7, "032144": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000180": 7, "5289": 7, "8022": [7, 385, 459, 1018], "000258": 7, "5193": 7, "8353": 7, "000415": 7, "124": [7, 404, 1011], "5131": [7, 1014], "3279": 7, "000641": 7, "178": [7, 51, 68, 195, 217, 236, 241, 254, 274, 369, 378, 496, 828], "5149": 7, "0779": 7, "000877": 7, "4066": 7, "4812": 7, "000162": 7, "3551": 7, "1723": 7, "000184": 7, "3445": 7, "2171": 7, "000222": 7, "3433": 7, "0358": 7, "3456": 7, "0602": 7, "000297": 7, "deduc": 7, "guarante": [7, 8, 80, 81, 168, 206, 231, 276, 278, 300, 344, 354, 360, 366, 380, 381, 397, 401, 402, 405, 432, 522, 631, 644, 645, 654, 658, 660, 662, 664, 673, 680, 799, 802, 824, 825, 862, 864, 877, 878, 891, 959, 963, 964, 966, 970, 975, 979, 983, 1001, 1019], "aspect": [7, 58, 86, 95, 154, 169, 219, 227, 287, 336, 358, 359, 360, 372, 385, 386, 397, 644, 645, 983, 991], "926": [7, 15, 256, 274], "plot_model_complexity_influ": [7, 15], "doesn": [8, 198, 244, 296, 330, 380, 385, 388, 397, 405, 406, 410, 420, 461, 618, 619, 652, 654, 662, 702, 808, 811, 816, 826, 827, 841, 966, 967, 983, 1013], "t": [8, 11, 12, 16, 17, 26, 30, 34, 39, 40, 42, 43, 44, 52, 54, 58, 70, 72, 78, 79, 80, 82, 85, 92, 96, 97, 101, 103, 105, 106, 109, 110, 113, 114, 121, 122, 123, 124, 125, 129, 130, 147, 151, 153, 154, 155, 158, 159, 165, 168, 169, 170, 171, 177, 179, 182, 185, 192, 195, 196, 197, 198, 199, 216, 218, 220, 221, 222, 223, 225, 234, 244, 247, 249, 257, 258, 278, 290, 291, 296, 310, 313, 314, 318, 319, 321, 326, 327, 330, 331, 334, 335, 338, 343, 344, 345, 351, 352, 354, 358, 359, 366, 367, 369, 372, 374, 376, 378, 380, 383, 384, 385, 388, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 410, 414, 418, 420, 423, 433, 434, 436, 442, 449, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 481, 482, 499, 500, 501, 505, 506, 511, 516, 518, 520, 527, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 576, 577, 580, 593, 594, 596, 597, 613, 614, 616, 617, 618, 619, 621, 625, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 682, 690, 696, 702, 703, 711, 721, 722, 740, 741, 742, 752, 773, 774, 777, 778, 782, 785, 786, 796, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 830, 831, 834, 835, 840, 841, 842, 850, 855, 857, 858, 864, 865, 877, 879, 880, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 921, 931, 956, 961, 963, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 981, 982, 983, 990, 993, 1000, 1001, 1002, 1003, 1004, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "memori": [8, 54, 71, 72, 99, 121, 168, 169, 280, 306, 310, 312, 314, 315, 343, 344, 345, 359, 360, 366, 372, 375, 381, 385, 398, 401, 402, 405, 408, 409, 427, 428, 429, 430, 431, 432, 433, 435, 436, 440, 443, 445, 454, 459, 465, 482, 489, 494, 519, 520, 521, 524, 541, 542, 543, 544, 549, 550, 551, 567, 568, 574, 575, 577, 632, 633, 634, 638, 639, 644, 645, 646, 647, 648, 649, 652, 654, 655, 662, 663, 664, 665, 666, 667, 670, 763, 764, 765, 766, 782, 788, 796, 805, 806, 807, 808, 811, 812, 813, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 844, 845, 862, 864, 874, 875, 877, 882, 884, 885, 892, 893, 894, 895, 905, 936, 952, 963, 969, 970, 977, 979, 980, 982, 983, 987, 988, 991, 993, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "onlin": [8, 14, 36, 68, 95, 98, 165, 176, 212, 217, 360, 367, 371, 377, 385, 397, 402, 405, 407, 428, 432, 433, 435, 481, 488, 517, 522, 523, 524, 525, 531, 532, 568, 570, 644, 652, 653, 654, 662, 664, 810, 819, 820, 821, 822, 823, 826, 827, 832, 834, 835, 853, 854, 864, 884, 885, 959, 963, 971, 973, 986, 989, 991, 1000, 1004, 1009, 1013, 1014, 1016, 1024], "partial_fit": [8, 50, 95, 314, 360, 374, 385, 397, 402, 428, 435, 520, 522, 523, 524, 575, 583, 644, 645, 652, 653, 654, 662, 663, 664, 812, 813, 816, 817, 819, 820, 821, 822, 823, 840, 841, 842, 853, 854, 864, 884, 963, 969, 971, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1022, 1023, 1024, 1025], "fed": [8, 130, 354, 367, 405, 956, 972, 977, 1020], "batch": [8, 11, 64, 95, 99, 291, 314, 360, 381, 385, 405, 426, 428, 433, 435, 437, 439, 517, 519, 520, 522, 523, 524, 525, 526, 528, 529, 531, 532, 650, 671, 672, 787, 800, 801, 819, 820, 821, 822, 823, 841, 842, 853, 854, 864, 865, 877, 924, 933, 971, 972, 981, 1009, 1013, 1014, 1017, 1018, 1019, 1020, 1022, 1024, 1025], "remain": [8, 25, 27, 71, 117, 122, 124, 146, 168, 198, 214, 243, 256, 260, 264, 267, 394, 397, 398, 399, 401, 405, 432, 450, 453, 501, 502, 507, 514, 520, 556, 596, 597, 748, 754, 784, 785, 786, 787, 790, 792, 819, 820, 821, 823, 925, 956, 957, 966, 967, 971, 977, 983, 988, 1011, 1017, 1023], "hashingvector": [8, 345, 360, 475, 574, 576, 1010, 1016, 1017, 1018, 1019, 1022], "where": [8, 11, 12, 13, 16, 17, 19, 24, 25, 26, 32, 53, 55, 57, 80, 86, 92, 95, 98, 101, 105, 106, 109, 112, 114, 116, 120, 121, 123, 127, 144, 147, 150, 156, 159, 163, 168, 177, 182, 190, 199, 207, 208, 209, 211, 215, 216, 219, 221, 222, 227, 228, 231, 234, 238, 249, 254, 255, 258, 260, 264, 265, 267, 269, 270, 297, 300, 302, 303, 304, 305, 306, 307, 310, 312, 313, 319, 320, 328, 338, 339, 340, 343, 348, 349, 354, 358, 359, 360, 366, 368, 369, 371, 372, 374, 376, 378, 379, 380, 383, 384, 385, 386, 388, 391, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418, 423, 430, 433, 434, 438, 447, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 473, 482, 517, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 568, 569, 570, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 595, 596, 597, 599, 601, 605, 608, 609, 611, 613, 614, 615, 616, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 674, 677, 678, 679, 682, 693, 698, 702, 710, 714, 715, 716, 724, 727, 740, 748, 753, 754, 755, 758, 766, 767, 768, 769, 772, 775, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 809, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 827, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 847, 854, 857, 859, 860, 863, 864, 870, 872, 878, 879, 880, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 912, 913, 914, 915, 921, 952, 956, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 981, 982, 983, 988, 990, 993, 994, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "word": [8, 14, 19, 70, 150, 231, 234, 330, 344, 345, 358, 367, 368, 372, 374, 377, 385, 394, 397, 399, 400, 401, 402, 439, 497, 509, 520, 522, 527, 574, 575, 577, 682, 813, 823, 881, 961, 965, 969, 972, 977, 980, 981, 991, 1000, 1001, 1009, 1017], "federicov": 8, "itertool": [8, 42, 44, 62, 131, 169, 183, 244, 249, 258, 265, 267, 404], "pathlib": [8, 1024], "path": [8, 16, 17, 165, 176, 183, 187, 217, 348, 366, 370, 372, 376, 380, 381, 385, 427, 431, 436, 472, 473, 474, 485, 486, 487, 489, 490, 491, 494, 495, 534, 543, 544, 549, 550, 551, 552, 579, 580, 583, 632, 633, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 667, 668, 669, 670, 671, 672, 674, 844, 845, 891, 892, 893, 894, 895, 926, 956, 963, 964, 973, 987, 988, 1009, 1010, 1013, 1015, 1016, 1018, 1019, 1021, 1022, 1024, 1025], "hashlib": 8, "sha256": [8, 1024], "tarfil": 8, "sy": [8, 12, 16, 19, 206, 231, 278, 322, 345, 367, 383, 603], "rcparam": [8, 227, 232, 307], "htmlparser": 8, "urllib": [8, 17], "request": [8, 17, 46, 198, 216, 313, 359, 366, 370, 371, 375, 385, 386, 391, 402, 405, 406, 435, 558, 597, 618, 685, 970, 1002, 1015, 1016, 1017], "urlretriev": 8, "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 66, 70, 98, 165, 259, 322, 342, 343, 344, 345, 360, 361, 367, 397, 398, 405, 450, 489, 530, 857, 965, 1001, 1002, 1009, 1010, 1011, 1012, 1015, 1016], "passiveaggressiveclassifi": [8, 205, 358, 360, 963, 968, 1010, 1013, 1014, 1016, 1017, 1020, 1022], "perceptron": [8, 165, 205, 208, 214, 237, 293, 298, 360, 383, 405, 500, 501, 508, 652, 662, 810, 840, 841, 842, 845, 864, 965, 968, 972, 981, 989, 1004, 1013, 1015, 1016, 1017, 1021], "naive_bay": [8, 24, 25, 27, 31, 128, 132, 259, 260, 343, 354, 360, 361, 367, 398, 404, 423, 555, 845, 961, 968, 969, 1002, 1010, 1011, 1013, 1014, 1015, 1016], "multinomialnb": [8, 360, 367, 398, 405, 819, 820, 821, 822, 969, 1002, 1011, 1013, 1016, 1017, 1021, 1022, 1024], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 71, 126, 153, 156, 158, 168, 169, 198, 216, 220, 228, 256, 300, 352, 354, 359, 367, 370, 371, 372, 374, 376, 377, 378, 385, 397, 398, 399, 401, 402, 404, 406, 409, 426, 428, 437, 439, 440, 445, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 473, 474, 477, 478, 482, 483, 489, 494, 495, 500, 508, 513, 517, 518, 523, 524, 525, 526, 528, 531, 532, 534, 538, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 567, 574, 575, 576, 577, 583, 588, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 617, 618, 619, 621, 622, 623, 624, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 676, 680, 681, 683, 684, 686, 688, 690, 698, 727, 746, 752, 759, 763, 767, 774, 782, 785, 786, 787, 788, 796, 800, 801, 804, 807, 808, 810, 813, 815, 818, 819, 820, 821, 823, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 841, 842, 848, 865, 871, 884, 885, 886, 887, 888, 889, 890, 896, 898, 902, 904, 905, 906, 908, 920, 921, 940, 951, 955, 956, 957, 962, 963, 967, 972, 973, 979, 981, 982, 991, 1016, 1017, 1018], "builder": [8, 10, 376], "__file__": [8, 10, 1022], "global": [8, 10, 42, 57, 95, 198, 219, 220, 240, 267, 296, 311, 354, 358, 359, 378, 383, 385, 397, 407, 428, 438, 448, 454, 576, 612, 618, 674, 677, 678, 681, 693, 714, 715, 723, 768, 769, 772, 773, 800, 865, 880, 882, 935, 937, 956, 964, 967, 973, 977, 983, 991, 1017, 1024], "21578": [8, 1022], "uci": [8, 305, 366, 369, 486, 488, 490, 496], "ml": [8, 366, 369, 377, 486, 488, 496, 963, 965, 987, 988, 991], "uncompress": [8, 494, 495, 1002], "reuterspars": 8, "util": [8, 10, 11, 48, 55, 56, 61, 89, 130, 198, 200, 206, 214, 221, 230, 235, 246, 264, 266, 278, 302, 310, 321, 330, 343, 359, 361, 366, 367, 370, 372, 373, 374, 375, 383, 384, 385, 393, 397, 398, 401, 402, 405, 439, 454, 557, 558, 559, 563, 656, 685, 782, 804, 810, 811, 851, 956, 962, 965, 967, 968, 977, 978, 987, 991, 994, 1004, 1009, 1010, 1012, 1013, 1015, 1016], "pars": [8, 17, 358, 366, 367, 373, 494], "sgml": [8, 358], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 68, 76, 83, 87, 93, 107, 134, 140, 148, 160, 164, 172, 175, 217, 225, 241, 250, 274, 277, 292, 298, 308, 316, 324, 341, 343, 344, 346, 353, 358, 360, 366, 367, 369, 370, 372, 376, 377, 378, 380, 383, 391, 398, 402, 473, 479, 480, 482, 489, 494, 495, 520, 565, 566, 574, 575, 577, 896, 970, 983, 987, 990, 994, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024], "yield": [8, 9, 25, 45, 55, 78, 79, 80, 81, 121, 123, 182, 193, 198, 213, 216, 263, 276, 294, 300, 327, 332, 343, 344, 354, 358, 360, 366, 377, 385, 394, 397, 399, 401, 402, 404, 405, 406, 407, 423, 435, 454, 458, 494, 495, 523, 524, 525, 527, 532, 539, 540, 545, 546, 547, 548, 553, 554, 580, 588, 633, 637, 638, 639, 641, 647, 649, 651, 659, 661, 672, 685, 711, 766, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 811, 815, 818, 876, 877, 915, 922, 924, 925, 959, 961, 963, 964, 967, 982, 983, 997, 1014, 1015, 1017, 1020, 1022], "__init__": [8, 16, 56, 158, 278, 330, 372, 374, 376, 377, 378, 379, 385, 405, 411, 928, 1010, 1015, 1017, 1022, 1023, 1024, 1025], "self": [8, 16, 19, 25, 27, 56, 158, 165, 278, 317, 323, 324, 330, 343, 366, 372, 373, 374, 377, 378, 379, 380, 397, 405, 407, 411, 414, 418, 419, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 486, 494, 495, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 689, 780, 781, 782, 785, 786, 796, 801, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 928, 933, 941, 970, 988, 989, 991, 1004, 1011, 1016, 1023], "latin": [8, 405], "_reset": 8, "handle_starttag": 8, "tag": [8, 49, 71, 227, 320, 366, 371, 375, 376, 380, 383, 385, 405, 482, 812, 988, 990, 1014, 1018, 1019, 1020, 1023, 1024, 1025], "attr": [8, 56], "start_": 8, "getattr": [8, 300, 374, 385, 1025], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 70, 147, 237, 315, 369], "topic_d": 8, "fd": 8, "chunk": [8, 50, 358, 359, 397, 402, 408, 430, 435, 454, 524, 763, 766, 812, 813, 819, 820, 821, 822, 823, 882, 969, 1016, 1017, 1018, 1019, 1020], "feed": [8, 86, 199, 345, 367, 377, 383, 397, 405, 857, 968], "decod": [8, 291, 367, 385, 489, 555, 574, 575, 577, 1009, 1010], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 60, 66, 78, 79, 82, 100, 113, 120, 123, 126, 130, 150, 151, 154, 155, 156, 157, 158, 159, 168, 170, 182, 204, 220, 227, 233, 236, 243, 249, 258, 259, 284, 285, 300, 310, 330, 335, 344, 354, 367, 372, 374, 380, 383, 385, 386, 395, 396, 397, 400, 401, 404, 407, 436, 441, 458, 494, 495, 518, 549, 614, 629, 633, 647, 658, 660, 673, 691, 731, 780, 800, 801, 819, 820, 821, 823, 830, 905, 956, 960, 961, 963, 964, 966, 967, 968, 970, 973, 974, 977, 982, 991, 1000, 1012, 1016, 1017, 1018], "handle_data": 8, "start_reut": 8, "attribut": [8, 25, 32, 49, 71, 104, 117, 118, 121, 143, 147, 198, 206, 236, 248, 256, 257, 262, 270, 287, 291, 313, 345, 352, 360, 361, 365, 366, 367, 369, 372, 375, 379, 383, 393, 394, 395, 397, 398, 399, 400, 402, 404, 405, 406, 407, 412, 413, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 496, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 683, 684, 686, 687, 688, 721, 778, 780, 781, 782, 785, 786, 788, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 899, 928, 951, 961, 963, 968, 970, 971, 973, 977, 980, 981, 982, 983, 991, 993, 999, 1002, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "end_reut": 8, "sub": [8, 37, 48, 53, 55, 57, 60, 70, 105, 235, 243, 312, 318, 319, 327, 330, 339, 367, 372, 374, 378, 398, 404, 405, 522, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 657, 963, 967, 981, 1002, 1019, 1023], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 72, 82, 95, 98, 110, 113, 116, 119, 121, 122, 124, 125, 147, 159, 162, 165, 177, 178, 206, 213, 245, 246, 251, 253, 269, 274, 294, 296, 297, 302, 312, 319, 321, 322, 330, 372, 374, 378, 380, 381, 384, 385, 392, 397, 400, 402, 404, 406, 409, 423, 426, 427, 429, 431, 433, 434, 435, 438, 440, 445, 447, 448, 449, 457, 458, 464, 468, 469, 470, 501, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 539, 540, 545, 546, 547, 548, 550, 553, 554, 567, 568, 574, 575, 577, 579, 580, 588, 596, 613, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 815, 818, 833, 840, 841, 842, 843, 844, 848, 855, 857, 859, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 899, 920, 921, 927, 933, 957, 963, 964, 966, 967, 970, 971, 972, 980, 981, 982, 983, 988, 991, 997, 1001, 1002, 1004, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "archiv": [8, 366, 367, 369, 370, 391, 397, 428, 488, 496, 743, 744, 965, 982, 1002], "exist": [8, 9, 17, 19, 53, 216, 258, 296, 300, 366, 371, 374, 375, 378, 383, 385, 386, 388, 391, 397, 401, 402, 404, 405, 407, 412, 420, 423, 437, 439, 454, 485, 535, 541, 542, 543, 544, 550, 551, 571, 575, 583, 589, 618, 619, 631, 662, 663, 664, 666, 684, 686, 688, 747, 750, 754, 783, 784, 787, 789, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 829, 844, 849, 857, 858, 951, 959, 964, 966, 967, 971, 973, 974, 977, 987, 991, 1001, 1009, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "str": [8, 10, 16, 58, 60, 104, 106, 119, 216, 236, 258, 270, 278, 288, 328, 343, 366, 367, 381, 405, 408, 409, 413, 417, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 443, 450, 451, 452, 453, 454, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 537, 547, 548, 552, 553, 554, 555, 556, 562, 567, 568, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 603, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 645, 652, 653, 657, 659, 661, 662, 664, 674, 675, 678, 682, 683, 684, 685, 686, 688, 693, 695, 697, 699, 712, 714, 715, 717, 718, 723, 756, 759, 763, 764, 765, 766, 767, 768, 769, 772, 774, 775, 776, 782, 785, 786, 788, 793, 794, 796, 805, 806, 807, 808, 809, 811, 816, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 882, 896, 897, 898, 900, 903, 904, 905, 908, 911, 913, 917, 930, 951, 952, 955, 1024], "kei": [8, 9, 10, 17, 19, 42, 116, 120, 130, 162, 167, 216, 239, 259, 261, 262, 311, 312, 313, 314, 315, 360, 365, 374, 377, 378, 379, 383, 385, 386, 388, 397, 398, 401, 407, 450, 458, 547, 548, 553, 554, 555, 556, 574, 577, 580, 603, 612, 618, 619, 620, 645, 782, 785, 786, 794, 796, 807, 843, 844, 899, 909, 932, 988, 1002, 1006, 1015, 1021, 1022, 1024, 1025], "download_url": 8, "ic": [8, 312, 366, 369, 387, 488, 496, 618, 619, 1004, 1021, 1022], "databas": [8, 305, 358, 360, 367, 369, 397, 402, 404, 405, 408, 428, 430, 496, 541, 542, 877, 979], "reuters21578": 8, "mld": 8, "tar": [8, 376], "gz": [8, 376, 388, 494, 495], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 16, 19, 41, 44, 49, 55, 56, 62, 82, 99, 113, 119, 123, 158, 168, 169, 187, 200, 216, 220, 227, 231, 233, 234, 235, 258, 259, 262, 269, 278, 283, 291, 294, 295, 302, 343, 344, 352, 372, 376, 378, 404, 405, 407, 409, 423, 435, 494, 506, 519, 555, 611, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 656, 658, 659, 660, 662, 665, 667, 668, 669, 670, 689, 695, 753, 773, 777, 779, 785, 786, 810, 848, 857, 860, 871, 884, 885, 899, 929, 931, 933, 954, 983], "mkdir": [8, 378, 380], "parent": [8, 167, 372, 376, 385, 397, 428, 449, 1009], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 134, 140, 148, 160, 164, 172, 175, 217, 225, 231, 241, 250, 274, 277, 292, 298, 308, 316, 324, 341, 343, 345, 346, 353, 367, 378, 886, 887, 888, 889, 890, 982, 1005], "1e6": [8, 10, 191, 231, 343, 345, 358, 522, 878, 967, 979], "current_sz_mb": 8, "stdout": [8, 95, 206, 813, 833, 841, 842], "write": [8, 17, 163, 343, 358, 359, 366, 370, 371, 375, 376, 377, 378, 380, 381, 383, 385, 388, 398, 402, 405, 978, 988, 1002, 1010, 1022], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 322, 367, 378, 391, 474, 486, 489, 490, 493, 574, 575, 577, 1002, 1009, 1014, 1017, 1018], "reporthook": 8, "tamper": 8, "assert": [8, 17, 48, 96, 231, 258, 267, 359, 375, 988], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 221, 366, 367, 371, 372, 376, 378, 383, 384, 386, 388, 391, 398, 405, 473, 482, 494, 495, 957, 991, 996, 1012, 1016, 1017, 1019], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 405, 489, 574, 575, 577, 1011], "alternate_sign": [8, 405, 568, 575, 1016], "data_stream": 8, "binari": [8, 13, 25, 27, 109, 114, 116, 126, 128, 144, 158, 168, 174, 189, 191, 198, 206, 220, 228, 239, 255, 256, 261, 267, 273, 276, 282, 330, 336, 352, 354, 366, 367, 368, 374, 376, 377, 385, 388, 391, 394, 395, 396, 397, 404, 405, 407, 423, 424, 425, 438, 473, 486, 494, 495, 506, 509, 535, 536, 539, 541, 545, 547, 548, 552, 553, 554, 567, 574, 575, 577, 579, 580, 588, 596, 613, 614, 615, 616, 618, 619, 644, 645, 652, 654, 659, 660, 661, 662, 686, 689, 693, 694, 695, 698, 699, 701, 704, 706, 712, 714, 715, 719, 720, 723, 724, 725, 726, 727, 728, 767, 768, 769, 772, 773, 774, 777, 779, 782, 783, 785, 786, 787, 788, 796, 800, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 819, 830, 840, 851, 855, 857, 865, 868, 884, 886, 889, 930, 957, 968, 969, 970, 971, 972, 974, 975, 977, 978, 979, 981, 982, 983, 990, 993, 1006, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1023, 1024], "acq": 8, "chosen": [8, 46, 73, 130, 151, 168, 169, 187, 199, 202, 215, 234, 252, 253, 255, 261, 344, 354, 358, 383, 397, 399, 400, 404, 407, 426, 432, 435, 437, 439, 440, 446, 482, 509, 521, 543, 544, 545, 546, 550, 551, 633, 639, 642, 644, 645, 647, 649, 657, 662, 663, 664, 665, 666, 676, 680, 777, 780, 781, 782, 785, 786, 796, 814, 833, 884, 885, 892, 893, 894, 895, 921, 956, 959, 961, 963, 964, 966, 968, 973, 974, 981, 997, 998, 1000, 1001, 1017, 1025], "evenli": [8, 39, 52, 123, 253, 405, 925, 1002], "care": [8, 55, 124, 358, 360, 376, 378, 383, 385, 386, 397, 399, 405, 423, 446, 455, 626, 644, 645, 652, 654, 662, 663, 664, 681, 884, 964, 982, 991, 1025], "all_class": 8, "positive_class": [8, 698], "partial_fit_classifi": 8, "max_it": [8, 14, 17, 25, 30, 31, 72, 73, 95, 98, 115, 116, 132, 136, 138, 159, 162, 163, 168, 169, 177, 184, 190, 191, 205, 206, 207, 210, 211, 213, 219, 220, 221, 222, 237, 238, 243, 244, 245, 246, 249, 271, 288, 294, 295, 296, 306, 312, 313, 314, 318, 319, 327, 343, 344, 378, 385, 404, 409, 426, 429, 433, 434, 435, 440, 445, 447, 457, 458, 464, 468, 469, 470, 517, 518, 519, 521, 522, 523, 524, 525, 526, 529, 531, 532, 533, 534, 547, 548, 613, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 658, 660, 662, 663, 664, 665, 666, 668, 669, 673, 674, 675, 676, 679, 680, 780, 781, 796, 833, 841, 842, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 957, 959, 963, 970, 971, 980, 981, 998, 1002, 1010, 1013, 1016, 1017, 1018, 1019, 1021, 1023, 1024, 1025], "nb": [8, 103, 128, 354, 821, 969], "multinomi": [8, 30, 165, 176, 213, 217, 234, 253, 267, 367, 368, 372, 402, 404, 482, 498, 509, 537, 539, 545, 547, 555, 617, 644, 645, 726, 810, 818, 819, 820, 821, 822, 823, 864, 907, 967, 968, 983, 989, 1002, 1004, 1009, 1013, 1015, 1016, 1017, 1022, 1023], "passiv": [8, 205, 652, 653, 989, 1004, 1010], "aggress": [8, 205, 652, 653, 785, 786, 989, 1004, 1010], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 397, 402, 435, 520, 662, 840, 841, 842, 987, 1009], "tupl": [8, 48, 49, 55, 105, 169, 216, 365, 366, 367, 374, 385, 401, 409, 420, 437, 439, 450, 453, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 490, 491, 494, 496, 497, 498, 499, 500, 508, 519, 532, 547, 548, 553, 554, 555, 556, 568, 569, 570, 573, 574, 575, 577, 613, 618, 619, 620, 698, 705, 766, 768, 780, 782, 796, 807, 824, 825, 843, 844, 854, 855, 859, 862, 870, 874, 886, 887, 888, 889, 890, 899, 905, 906, 908, 912, 913, 914, 915, 934, 951, 974, 1015, 1016, 1020, 1021, 1022], "x_text": 8, "befor": [8, 12, 25, 42, 70, 72, 75, 86, 130, 143, 157, 159, 161, 164, 165, 168, 169, 171, 179, 182, 186, 187, 191, 258, 265, 280, 301, 304, 305, 307, 313, 333, 354, 358, 359, 367, 370, 372, 374, 375, 377, 378, 380, 381, 383, 385, 386, 387, 391, 395, 397, 398, 399, 401, 402, 406, 409, 410, 429, 433, 434, 435, 445, 447, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 476, 487, 520, 523, 524, 525, 526, 527, 530, 532, 533, 547, 548, 551, 553, 555, 556, 563, 574, 575, 577, 597, 613, 614, 616, 631, 636, 637, 640, 641, 642, 650, 651, 652, 653, 654, 657, 662, 664, 673, 678, 680, 780, 781, 787, 788, 800, 801, 803, 806, 808, 810, 824, 825, 832, 833, 834, 835, 836, 839, 844, 845, 848, 851, 858, 862, 863, 864, 865, 869, 870, 872, 873, 874, 875, 881, 892, 893, 921, 951, 957, 963, 964, 967, 973, 977, 981, 982, 983, 988, 1002, 1009, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "exclud": [8, 19, 167, 300, 372, 376, 385, 432, 450, 452, 714, 715, 723, 768, 769, 772, 795, 803, 859, 942, 967, 970, 1018, 1025], "invalid": [8, 198, 385, 432, 564, 657, 698, 759, 963, 967, 1015, 1017, 1019, 1020, 1022, 1023, 1025], "assign": [8, 17, 37, 46, 49, 57, 58, 60, 115, 126, 128, 143, 152, 211, 216, 227, 232, 234, 294, 302, 307, 323, 338, 344, 367, 372, 374, 385, 394, 401, 402, 404, 405, 406, 407, 426, 427, 428, 429, 431, 432, 433, 434, 435, 438, 440, 442, 445, 446, 447, 448, 501, 522, 547, 548, 579, 580, 593, 594, 596, 644, 645, 652, 653, 654, 662, 663, 664, 690, 691, 701, 702, 703, 706, 716, 724, 728, 740, 742, 771, 776, 777, 778, 782, 785, 786, 788, 791, 796, 805, 806, 807, 808, 811, 828, 834, 836, 837, 838, 851, 879, 880, 884, 885, 886, 887, 888, 889, 890, 961, 966, 967, 968, 969, 970, 971, 972, 977, 980, 991, 993, 1002, 1009, 1014, 1016, 1017], "format": [8, 11, 12, 19, 20, 21, 48, 54, 58, 61, 70, 80, 95, 105, 113, 119, 122, 124, 136, 142, 143, 171, 174, 178, 184, 189, 198, 216, 253, 263, 265, 266, 269, 272, 282, 283, 286, 287, 304, 310, 337, 348, 352, 358, 365, 371, 372, 374, 375, 380, 381, 384, 385, 398, 401, 404, 405, 419, 428, 429, 431, 433, 435, 436, 438, 445, 450, 454, 468, 469, 470, 471, 473, 475, 482, 483, 484, 494, 495, 496, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 537, 543, 544, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 570, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 632, 638, 644, 645, 646, 648, 652, 654, 662, 663, 664, 674, 675, 678, 683, 699, 706, 724, 725, 736, 753, 775, 813, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 871, 876, 877, 882, 884, 896, 904, 905, 926, 929, 933, 938, 941, 943, 944, 945, 946, 947, 948, 957, 967, 970, 975, 977, 978, 981, 983, 987, 993, 994, 1004, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1024], "islic": [8, 44, 62], "asarrai": [8, 17, 198, 216, 297, 320, 343, 344, 374, 385, 393, 571, 572, 711, 741, 832, 834, 835, 836, 977, 982], "int": [8, 10, 13, 16, 17, 19, 37, 44, 62, 81, 113, 122, 126, 138, 139, 151, 152, 153, 159, 163, 167, 179, 189, 191, 198, 216, 224, 227, 233, 236, 243, 253, 256, 257, 258, 278, 283, 285, 291, 307, 319, 345, 367, 372, 374, 383, 385, 395, 398, 401, 405, 408, 409, 412, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 474, 477, 478, 480, 481, 482, 483, 488, 489, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 593, 594, 596, 597, 603, 613, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 686, 687, 688, 689, 690, 691, 693, 695, 699, 711, 712, 714, 715, 716, 719, 723, 741, 742, 754, 759, 763, 764, 765, 766, 767, 768, 769, 772, 774, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 873, 874, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 904, 905, 907, 908, 920, 921, 923, 924, 925, 926, 932, 936, 938, 941, 946, 947, 963, 974, 1009, 1015, 1019, 1020], "iter_minibatch": 8, "minibatch_s": [8, 360], "statist": [8, 81, 109, 113, 114, 125, 136, 137, 138, 139, 142, 146, 147, 165, 167, 168, 169, 170, 182, 186, 251, 255, 257, 260, 267, 274, 300, 306, 312, 354, 361, 365, 367, 369, 372, 378, 385, 395, 397, 398, 399, 401, 402, 404, 406, 420, 455, 460, 479, 480, 502, 503, 504, 506, 508, 527, 532, 545, 546, 548, 590, 591, 592, 595, 613, 616, 620, 621, 630, 635, 642, 676, 680, 682, 696, 702, 707, 708, 709, 716, 728, 773, 782, 798, 814, 841, 842, 860, 861, 862, 864, 869, 872, 873, 875, 889, 892, 893, 942, 956, 957, 961, 963, 964, 966, 967, 968, 969, 974, 977, 981, 982, 983, 984, 985, 986, 994, 1000, 1001, 1014, 1017, 1020, 1021, 1023, 1024], "test_stat": 8, "n_test": [8, 10, 33, 113, 258, 1009, 1012], "n_test_po": 8, "hold": [8, 16, 26, 27, 198, 259, 352, 365, 372, 373, 374, 395, 397, 401, 404, 405, 407, 489, 547, 548, 575, 618, 619, 620, 721, 782, 785, 786, 796, 820, 851, 852, 857, 858, 865, 868, 957, 961, 967, 971, 981, 982, 983, 990, 993, 1002, 1017, 1021], "n_test_docu": 8, "tick": [8, 43, 60, 153, 237, 269, 618, 808], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 61, 81, 92, 98, 105, 122, 123, 143, 147, 158, 168, 179, 185, 194, 198, 213, 216, 220, 222, 267, 278, 285, 288, 314, 322, 335, 338, 343, 344, 345, 352, 369, 378, 385, 394, 395, 396, 397, 399, 400, 402, 403, 404, 405, 407, 418, 428, 429, 433, 435, 445, 450, 451, 468, 469, 470, 501, 506, 509, 517, 520, 522, 523, 527, 530, 531, 532, 535, 536, 538, 540, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 576, 577, 597, 599, 609, 611, 621, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 656, 658, 659, 662, 663, 664, 665, 667, 670, 676, 680, 682, 685, 695, 696, 705, 711, 726, 741, 743, 744, 748, 773, 812, 813, 817, 818, 827, 831, 835, 842, 843, 863, 864, 884, 885, 887, 890, 892, 893, 894, 895, 923, 942, 948, 953, 963, 967, 968, 969, 970, 982, 983, 1000, 1012, 1013, 1015, 1017, 1018, 1020], "cls_name": [8, 10], "string": [8, 27, 71, 119, 158, 216, 229, 262, 313, 345, 358, 366, 367, 372, 373, 374, 378, 385, 391, 398, 401, 404, 405, 406, 408, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 473, 475, 476, 482, 491, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 567, 568, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 603, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 685, 695, 697, 705, 717, 747, 750, 756, 759, 763, 764, 765, 766, 775, 776, 780, 781, 782, 785, 786, 788, 796, 807, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 902, 904, 905, 912, 913, 914, 931, 935, 951, 952, 956, 957, 967, 980, 982, 993, 1000, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "n_train": [8, 10, 33, 113, 258, 1009, 1012], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 55, 179, 261, 358, 394, 399, 406, 494, 495, 535, 583, 613, 616, 630, 857, 861, 873, 957, 963, 1017, 1021], "mini": [8, 64, 95, 314, 360, 385, 405, 426, 428, 433, 435, 437, 439, 517, 519, 522, 523, 524, 525, 526, 528, 529, 531, 532, 971, 972, 1009, 1020, 1022], "smaller": [8, 24, 40, 46, 55, 82, 155, 156, 159, 162, 183, 187, 189, 202, 231, 284, 285, 294, 300, 330, 338, 344, 372, 394, 396, 397, 399, 401, 402, 404, 406, 407, 425, 426, 432, 436, 440, 442, 500, 520, 521, 543, 544, 545, 546, 550, 551, 579, 596, 605, 619, 632, 633, 635, 636, 638, 639, 640, 642, 644, 645, 646, 647, 648, 649, 658, 660, 668, 669, 678, 695, 780, 785, 786, 830, 833, 857, 858, 876, 877, 884, 892, 893, 894, 895, 921, 961, 963, 964, 966, 967, 968, 970, 971, 973, 977, 979, 981, 982, 983, 988, 1002, 1017, 1022], "bigger": [8, 40, 60, 211, 258, 297, 340, 344, 357, 359, 405, 424, 425, 494, 524, 830, 997, 1004], "overhead": [8, 278, 359, 360, 372, 378, 381, 383, 385, 404, 427, 431, 435, 520, 685, 816, 817, 819, 820, 821, 822, 823, 824, 825, 935, 969, 970, 1012, 1017, 1018, 1021], "partial": [8, 12, 50, 84, 87, 127, 165, 166, 172, 216, 226, 241, 312, 315, 369, 385, 387, 399, 400, 402, 404, 407, 450, 468, 469, 470, 471, 482, 487, 520, 522, 527, 548, 575, 618, 619, 643, 773, 810, 812, 813, 840, 841, 842, 845, 857, 858, 861, 864, 893, 964, 971, 981, 1002, 1004, 1006, 1010, 1017, 1018, 1022], "stream": [8, 397, 402, 405, 448, 575, 853, 854, 864, 959, 987, 1017, 1020], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 55, 75, 114, 116, 120, 123, 130, 168, 196, 200, 206, 220, 233, 235, 245, 255, 261, 314, 319, 344, 365, 372, 373, 374, 381, 398, 450, 512, 547, 548, 574, 575, 577, 618, 794, 857, 879, 880, 899, 900, 926, 959, 980, 988, 993], "updat": [8, 16, 44, 62, 110, 116, 125, 232, 310, 345, 370, 371, 372, 376, 380, 385, 397, 402, 404, 411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 449, 451, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 780, 781, 782, 785, 786, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 899, 942, 963, 970, 971, 972, 981, 990, 991, 1010, 1016, 1017, 1018, 1020, 1022, 1024, 1025], "accumul": [8, 50, 117, 118, 187, 376, 378, 397, 405, 967, 1010, 1017], "acc_histori": 8, "run_histori": 8, "878": 8, "962": [8, 133, 134], "915": 8, "62": [8, 98, 110, 169, 174, 216, 252, 297, 315, 319, 354, 367, 397, 479, 480, 824, 825, 1005, 1012], "1548": 8, "855": 8, "1535": 8, "877": [8, 256], "1484": 8, "933": [8, 74, 401], "1477": 8, "3911": 8, "517": [8, 438, 448, 1000], "938": [8, 194, 770, 967, 997], "2243": 8, "936": [8, 423, 967], "2240": 8, "885": [8, 240, 300, 308, 369], "2229": 8, "941": [8, 170, 172, 187, 217], "2225": 8, "6821": 8, "891": 8, "952": [8, 49, 163, 164], "2408": 8, "2405": 8, "900": [8, 50, 74, 75], "2399": 8, "953": [8, 49], "2396": 8, "9759": 8, "1276": 8, "949": 8, "2481": 8, "2479": 8, "909": 8, "2474": 8, "958": [8, 76], "2472": 8, "11680": 8, "1499": 8, "944": [8, 337, 341, 997], "2383": 8, "956": [8, 997], "2382": 8, "2378": 8, "950": 8, "2377": 8, "14625": 8, "1865": 8, "965": [8, 967], "03": [8, 12, 28, 35, 52, 80, 83, 85, 95, 134, 148, 155, 168, 179, 216, 225, 231, 241, 243, 249, 259, 274, 292, 308, 319, 344, 369, 405, 733, 782, 963, 967], "2426": 8, "903": 8, "2425": 8, "924": [8, 73], "04": [8, 15, 30, 40, 42, 54, 67, 68, 76, 83, 97, 105, 134, 155, 160, 164, 168, 172, 179, 197, 216, 234, 243, 249, 258, 259, 271, 274, 291, 292, 298, 337, 369, 404, 406, 457, 458, 773, 782, 796, 963, 967, 971, 981], "2422": 8, "957": [8, 407, 713, 967], "2420": 8, "17360": [8, 1020], "2179": 8, "2462": 8, "2461": 8, "932": 8, "06": [8, 15, 22, 52, 67, 68, 85, 168, 189, 197, 198, 250, 258, 259, 274, 297, 298, 302, 337, 378, 468, 469, 470, 630, 631, 675, 679, 780, 781, 782, 796, 893, 963, 977, 979], "2458": 8, "2457": 8, "curv": [8, 11, 23, 28, 37, 75, 78, 113, 115, 116, 122, 165, 176, 177, 188, 198, 216, 217, 219, 221, 224, 226, 228, 236, 237, 241, 242, 250, 251, 258, 268, 274, 295, 310, 350, 379, 392, 396, 401, 403, 423, 424, 425, 488, 496, 501, 507, 511, 550, 618, 631, 644, 684, 686, 688, 692, 693, 694, 695, 712, 714, 726, 727, 767, 769, 772, 773, 774, 780, 781, 788, 799, 808, 810, 811, 822, 845, 864, 884, 889, 963, 964, 966, 967, 973, 983, 989, 991, 1004, 1006, 1011, 1012, 1015, 1019, 1021, 1022, 1023, 1024, 1025], "evolut": [8, 10, 270, 358, 360, 532], "cours": [8, 9, 174, 358, 372, 374, 402, 405, 406, 957, 962, 963, 991], "valid": [8, 13, 26, 54, 55, 56, 71, 74, 78, 82, 103, 114, 116, 119, 120, 121, 122, 123, 135, 140, 141, 145, 147, 148, 158, 165, 168, 170, 176, 182, 186, 198, 200, 206, 216, 217, 235, 245, 248, 251, 255, 258, 259, 260, 262, 264, 266, 267, 272, 274, 282, 297, 299, 301, 306, 308, 310, 312, 321, 330, 338, 348, 359, 367, 372, 375, 383, 384, 385, 391, 392, 395, 397, 398, 399, 402, 403, 404, 405, 406, 407, 413, 423, 428, 429, 431, 432, 433, 435, 436, 443, 449, 450, 454, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 479, 487, 488, 490, 501, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 558, 561, 563, 568, 569, 575, 579, 580, 583, 588, 618, 620, 624, 625, 626, 627, 628, 629, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 678, 685, 687, 688, 692, 699, 713, 747, 750, 759, 763, 764, 765, 770, 775, 776, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 818, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 856, 864, 865, 876, 877, 879, 880, 882, 884, 886, 889, 891, 892, 893, 894, 895, 904, 905, 908, 915, 927, 957, 966, 967, 968, 971, 975, 977, 979, 981, 982, 983, 987, 988, 991, 993, 996, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "consumpt": [8, 358, 520, 543, 544, 550, 551, 782, 796, 805, 806, 807, 892, 893, 894, 895, 933, 993, 1009, 1011, 1015, 1017, 1018, 1023], "queue": [8, 970, 1012], "up": [8, 11, 37, 44, 46, 47, 48, 52, 55, 57, 62, 70, 80, 81, 89, 92, 115, 163, 169, 177, 182, 191, 199, 214, 215, 236, 245, 260, 263, 278, 291, 297, 301, 306, 314, 319, 327, 343, 345, 360, 366, 367, 372, 376, 378, 379, 380, 381, 383, 385, 386, 395, 397, 402, 404, 405, 429, 433, 434, 435, 436, 438, 442, 445, 446, 447, 494, 495, 522, 535, 536, 543, 544, 545, 546, 547, 548, 550, 551, 552, 596, 613, 618, 619, 625, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 667, 668, 669, 670, 678, 691, 754, 780, 781, 784, 785, 786, 788, 808, 858, 859, 862, 874, 892, 893, 894, 895, 898, 921, 924, 925, 956, 963, 964, 967, 970, 977, 981, 982, 988, 990, 991, 1001, 1002, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025], "amount": [8, 12, 45, 53, 66, 78, 81, 95, 99, 111, 113, 156, 168, 182, 216, 232, 312, 318, 321, 323, 330, 338, 345, 358, 359, 360, 383, 396, 397, 399, 402, 404, 405, 406, 429, 440, 455, 524, 525, 527, 529, 549, 582, 632, 633, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 651, 667, 670, 678, 785, 786, 824, 825, 830, 865, 880, 881, 894, 895, 962, 963, 966, 969, 971, 977, 979, 980, 981, 982, 1000, 1001, 1022], "learner": [8, 109, 111, 121, 130, 360, 543, 544, 545, 546, 550, 551, 552, 568, 575, 616, 826, 827, 832, 834, 835, 969, 972, 983, 987, 988, 1002], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 62, 86, 153, 202, 203, 207, 209, 227, 239, 262, 286, 288, 301, 326, 328, 331, 332, 974, 1006], "set_ylim": [8, 10, 16, 31, 42, 60, 72, 92, 109, 115, 127, 128, 159, 169, 171, 178, 196, 198, 199, 232, 243, 262, 265, 276, 283, 294, 300, 302, 303, 305, 311, 321, 339], "runtim": [8, 10, 58, 184, 213, 215, 232, 297, 302, 359, 374, 375, 383, 385, 396, 397, 404, 436, 549, 665, 796, 884, 885, 886, 887, 888, 889, 890, 981, 982, 1012, 1016, 1017, 1023, 1024], "gcf": [8, 974], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 72, 116, 117, 120, 121, 124, 132, 143, 147, 158, 162, 169, 177, 243, 248, 257, 259, 263, 276, 305, 306, 314, 315, 344, 374, 400, 567, 618, 634, 655, 666, 967, 974, 981, 983, 1015, 1016, 1017, 1018], "width": [8, 10, 16, 45, 53, 80, 90, 97, 98, 104, 105, 106, 113, 119, 120, 123, 132, 143, 152, 158, 181, 240, 243, 257, 300, 302, 303, 306, 312, 315, 327, 369, 398, 424, 425, 438, 450, 479, 480, 492, 507, 572, 849, 897, 977, 981, 983, 999, 1000, 1017], "set_xticklabel": [8, 10, 80, 106, 132, 153, 169, 171, 269, 270, 276], "ymax": [8, 10, 11, 78, 185, 187, 190, 191, 199, 207, 258, 291], "set_titl": [8, 10, 14, 25, 27, 31, 32, 42, 43, 45, 53, 55, 57, 60, 64, 65, 72, 75, 80, 90, 92, 100, 106, 115, 117, 126, 128, 130, 131, 159, 162, 163, 167, 168, 169, 170, 177, 178, 187, 189, 196, 198, 199, 200, 206, 219, 220, 223, 224, 230, 232, 233, 236, 237, 243, 252, 253, 254, 255, 258, 260, 261, 265, 269, 270, 276, 278, 282, 283, 288, 294, 295, 300, 301, 302, 303, 304, 305, 310, 314, 318, 319, 327, 338, 339, 340, 343, 348], "autolabel": [8, 121], "attach": [8, 121, 343, 420, 829, 1010, 1020], "rect": [8, 52, 121, 177], "height": [8, 14, 53, 98, 120, 147, 171, 300, 306, 343, 403, 432, 479, 480, 492, 572], "get_height": [8, 121], "get_x": [8, 121], "get_width": [8, 121], "va": [8, 121, 269, 286, 288, 337], "setp": [8, 10, 269, 272], "rotat": [8, 40, 94, 97, 100, 107, 122, 132, 165, 171, 222, 269, 270, 276, 330, 337, 400, 402, 407, 409, 490, 518, 527, 536, 600, 683, 864, 896, 963, 1020, 1021], "read": [8, 17, 95, 219, 265, 310, 311, 312, 314, 358, 366, 370, 373, 374, 375, 376, 377, 379, 380, 383, 384, 385, 397, 408, 409, 410, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 445, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 599, 600, 601, 602, 605, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 917, 956, 963, 967, 968, 987, 991, 1002, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022], "feat": [8, 10, 376, 405], "extr": 8, "hash": [8, 108, 134, 165, 344, 345, 358, 360, 364, 372, 375, 383, 404, 500, 530, 543, 552, 567, 568, 575, 626, 819, 932, 959, 1002, 1004, 1010, 1013, 1016], "vect": [8, 70, 259, 322, 405, 1002], "045": [8, 15, 150, 160, 221, 708], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 56, 57, 70, 71, 74, 75, 78, 80, 86, 92, 97, 101, 109, 110, 113, 118, 121, 125, 127, 129, 130, 142, 147, 149, 150, 151, 152, 155, 156, 157, 158, 160, 165, 167, 169, 170, 174, 187, 194, 195, 198, 200, 202, 206, 212, 215, 216, 219, 220, 222, 224, 227, 229, 230, 232, 233, 235, 258, 265, 270, 271, 279, 292, 305, 309, 310, 312, 321, 330, 331, 335, 336, 338, 339, 344, 345, 351, 354, 358, 369, 372, 377, 380, 384, 400, 402, 404, 405, 501, 596, 597, 599, 600, 601, 605, 608, 609, 833, 956, 963, 967, 970, 973, 979, 980, 981, 982, 991, 993], "robust": [9, 61, 63, 77, 83, 123, 163, 165, 168, 169, 176, 200, 215, 217, 227, 300, 360, 369, 374, 380, 397, 404, 405, 432, 434, 455, 456, 459, 460, 461, 462, 510, 520, 545, 546, 635, 643, 656, 657, 664, 665, 735, 814, 845, 859, 861, 862, 873, 879, 919, 967, 971, 973, 977, 980, 981, 987, 989, 991, 1003, 1004, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1025], "covari": [9, 12, 29, 33, 35, 79, 83, 85, 103, 106, 126, 150, 157, 159, 227, 242, 244, 247, 248, 249, 250, 361, 381, 385, 397, 400, 402, 407, 468, 469, 470, 471, 490, 501, 505, 513, 518, 520, 527, 532, 534, 535, 536, 549, 596, 597, 599, 608, 609, 630, 631, 636, 640, 642, 668, 669, 672, 675, 679, 780, 781, 782, 801, 966, 973, 977, 989, 1003, 1004, 1009, 1011, 1012, 1013, 1014, 1016, 1018], "wine": [9, 239, 305, 306, 365, 496, 1004], "tool": [9, 11, 168, 256, 261, 354, 365, 366, 367, 370, 372, 374, 375, 376, 377, 378, 379, 380, 384, 385, 386, 387, 388, 391, 396, 397, 398, 399, 473, 678, 687, 956, 962, 963, 967, 973, 977, 982, 984, 987, 988, 991, 993, 1002, 1016, 1019, 1022, 1023, 1024], "purpos": [9, 12, 16, 37, 86, 162, 212, 213, 214, 219, 221, 234, 246, 248, 254, 255, 330, 331, 343, 344, 354, 367, 372, 374, 384, 385, 386, 388, 390, 394, 397, 398, 402, 404, 405, 406, 407, 532, 624, 806, 807, 844, 964, 967, 968, 970, 973, 985, 987, 993, 1021, 1023], "awar": [9, 14, 109, 144, 159, 327, 343, 370, 374, 383, 386, 401, 405, 553, 554, 634, 640, 641, 642, 644, 645, 655, 666, 830, 859, 973, 977, 983, 1006, 1009, 1010, 1023], "thing": [9, 220, 253, 343, 359, 360, 367, 371, 372, 374, 383, 397, 399, 405, 545, 546, 963, 977, 991, 1015], "trivial": [9, 200, 348, 372, 397, 800, 886, 889, 964, 988, 1009], "dimens": [9, 12, 14, 37, 40, 53, 82, 85, 90, 95, 152, 154, 156, 158, 159, 169, 181, 182, 196, 202, 221, 223, 227, 231, 232, 237, 244, 245, 282, 283, 287, 303, 343, 344, 345, 367, 369, 373, 385, 396, 397, 402, 403, 407, 409, 428, 429, 431, 433, 434, 435, 438, 450, 451, 468, 469, 470, 479, 480, 501, 510, 511, 515, 516, 519, 527, 535, 568, 569, 570, 571, 573, 575, 583, 597, 605, 608, 627, 630, 645, 676, 677, 678, 680, 681, 685, 749, 805, 824, 825, 829, 843, 876, 877, 878, 886, 887, 888, 889, 890, 904, 905, 906, 930, 938, 941, 957, 959, 961, 963, 964, 965, 968, 970, 971, 973, 979, 982, 993, 1000, 1001, 1016, 1018, 1019, 1021], "below": [9, 25, 26, 27, 32, 55, 60, 70, 75, 80, 89, 90, 95, 114, 117, 118, 123, 142, 167, 169, 181, 194, 195, 198, 200, 214, 215, 220, 224, 229, 238, 240, 253, 256, 261, 263, 264, 265, 300, 304, 310, 311, 312, 313, 314, 315, 334, 335, 343, 352, 354, 359, 365, 366, 370, 372, 374, 376, 377, 381, 385, 386, 388, 397, 399, 400, 401, 402, 404, 405, 406, 407, 432, 434, 457, 458, 464, 477, 478, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 496, 517, 523, 528, 534, 568, 581, 582, 583, 584, 585, 586, 619, 632, 638, 644, 645, 653, 659, 661, 678, 685, 691, 728, 748, 780, 781, 782, 793, 796, 813, 844, 847, 857, 858, 861, 867, 873, 956, 957, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 981, 982, 983, 984, 987, 995, 1002, 1005, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "main": [9, 16, 32, 62, 86, 99, 120, 165, 227, 267, 309, 338, 343, 358, 359, 360, 365, 370, 372, 374, 376, 378, 380, 383, 384, 385, 387, 388, 395, 396, 397, 402, 404, 405, 407, 489, 511, 516, 535, 536, 611, 699, 814, 956, 964, 966, 967, 974, 979, 988, 990, 999, 1002, 1009, 1012, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "empir": [9, 24, 25, 36, 68, 77, 80, 82, 83, 165, 216, 264, 300, 395, 401, 404, 407, 433, 435, 446, 455, 456, 457, 460, 463, 464, 518, 520, 525, 527, 529, 535, 537, 551, 576, 589, 625, 635, 653, 657, 664, 665, 702, 707, 708, 709, 809, 819, 820, 821, 823, 842, 865, 907, 941, 959, 961, 967, 969, 971, 977, 979, 981, 1003, 1004], "heterogen": [9, 24, 55, 69, 71, 76, 165, 169, 198, 240, 305, 310, 364, 366, 383, 450, 474, 530, 567, 577, 699, 844, 848, 884, 964, 974, 977, 987, 1004, 1013, 1017, 1019, 1020], "mode": [9, 10, 46, 47, 80, 198, 227, 278, 280, 297, 310, 372, 375, 380, 381, 383, 394, 400, 404, 408, 429, 430, 433, 435, 438, 445, 448, 457, 458, 464, 468, 473, 494, 495, 543, 547, 550, 578, 581, 582, 584, 585, 586, 596, 613, 630, 631, 644, 645, 652, 654, 659, 660, 661, 662, 665, 668, 669, 675, 679, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 840, 884, 886, 889, 892, 894, 910, 920, 921, 923, 970, 973, 987, 993, 994, 1001, 1010, 1018, 1023], "stick": [9, 780, 966], "bias": [9, 27, 82, 98, 123, 129, 167, 168, 170, 202, 263, 367, 387, 395, 404, 510, 535, 840, 864, 875, 962, 966, 975, 981, 983], "yet": [9, 57, 182, 216, 248, 259, 345, 360, 367, 371, 376, 383, 387, 388, 401, 402, 404, 405, 407, 434, 438, 447, 448, 563, 763, 951, 956, 963, 967, 973, 981, 988, 1018], "extent": [9, 30, 58, 152, 153, 154, 231, 336, 339, 426, 521, 682, 780, 967], "assum": [9, 55, 57, 157, 163, 167, 168, 187, 198, 216, 227, 230, 236, 249, 258, 267, 300, 345, 359, 371, 372, 374, 376, 378, 383, 384, 385, 387, 391, 394, 395, 397, 399, 401, 402, 404, 405, 407, 408, 413, 417, 423, 425, 430, 432, 436, 443, 449, 455, 456, 457, 458, 459, 460, 461, 462, 489, 494, 495, 518, 528, 534, 535, 547, 548, 553, 554, 573, 574, 575, 577, 606, 618, 629, 630, 632, 633, 638, 644, 645, 646, 647, 648, 652, 653, 654, 657, 658, 662, 663, 664, 667, 671, 673, 674, 678, 695, 711, 720, 726, 741, 749, 754, 759, 763, 766, 782, 785, 786, 796, 820, 826, 827, 830, 831, 832, 834, 835, 840, 851, 864, 943, 944, 945, 957, 961, 963, 965, 966, 967, 969, 970, 972, 973, 974, 977, 981, 982, 983, 1015, 1021], "parametr": [9, 24, 25, 82, 230, 282, 304, 313, 395, 398, 403, 404, 423, 537, 539, 621, 671, 682, 860, 872, 915, 916, 963, 966, 969, 970, 977, 980, 983, 1017, 1019, 1022], "therefor": [9, 13, 24, 37, 52, 53, 71, 72, 75, 80, 86, 100, 105, 110, 113, 115, 123, 128, 130, 146, 167, 170, 198, 214, 215, 243, 248, 249, 259, 261, 296, 300, 305, 318, 330, 339, 343, 344, 352, 358, 366, 370, 377, 383, 397, 398, 399, 401, 402, 404, 405, 423, 482, 521, 535, 537, 539, 540, 545, 546, 550, 551, 590, 592, 644, 645, 651, 654, 657, 662, 664, 665, 687, 698, 720, 742, 780, 844, 845, 857, 861, 865, 873, 884, 885, 957, 961, 963, 964, 967, 969, 970, 971, 972, 975, 977, 982, 983, 988, 993, 1000, 1001, 1002, 1018, 1019, 1022, 1023, 1024, 1025], "minimum": [9, 55, 57, 80, 123, 124, 146, 187, 208, 231, 268, 284, 285, 374, 381, 388, 390, 394, 397, 404, 405, 427, 431, 432, 436, 440, 442, 455, 456, 459, 460, 461, 462, 497, 499, 527, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 580, 613, 617, 618, 621, 623, 654, 657, 662, 664, 665, 668, 669, 678, 691, 710, 764, 765, 785, 786, 805, 820, 841, 842, 853, 854, 857, 858, 859, 863, 877, 878, 891, 892, 893, 894, 895, 901, 904, 905, 908, 924, 964, 967, 971, 973, 977, 979, 983, 1009, 1012, 1016, 1017, 1021, 1022], "determin": [9, 11, 13, 19, 46, 55, 80, 112, 116, 155, 168, 177, 178, 194, 201, 258, 300, 305, 345, 352, 354, 371, 372, 374, 381, 384, 385, 394, 395, 397, 401, 402, 404, 405, 406, 407, 418, 423, 427, 428, 429, 431, 433, 435, 436, 442, 445, 446, 447, 451, 455, 456, 458, 459, 460, 461, 462, 468, 469, 470, 474, 477, 478, 481, 483, 489, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 523, 525, 528, 529, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 551, 553, 554, 556, 568, 569, 570, 574, 577, 580, 588, 593, 594, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 613, 621, 622, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 673, 675, 676, 678, 679, 680, 693, 697, 708, 714, 715, 723, 768, 769, 770, 772, 773, 776, 782, 784, 785, 786, 788, 796, 804, 805, 806, 807, 808, 809, 811, 815, 817, 818, 820, 827, 829, 830, 835, 840, 841, 842, 848, 849, 857, 858, 859, 861, 865, 873, 884, 885, 887, 890, 893, 895, 898, 919, 930, 936, 938, 941, 956, 959, 961, 966, 970, 972, 973, 977, 980, 981, 983, 993, 1009, 1014, 1017, 1018, 1020, 1021, 1022], "concentr": [9, 100, 110, 128, 155, 165, 224, 242, 249, 250, 302, 320, 368, 372, 404, 407, 429, 505, 780, 966, 973], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 57, 59, 61, 62, 68, 80, 91, 102, 112, 119, 126, 171, 224, 243, 244, 245, 246, 259, 284, 285, 287, 303, 311, 315, 332, 342, 343, 345, 346, 360, 361, 365, 367, 369, 372, 374, 377, 383, 385, 392, 403, 405, 411, 412, 415, 474, 488, 489, 490, 497, 498, 499, 500, 501, 508, 516, 527, 530, 550, 552, 575, 576, 577, 617, 677, 678, 681, 690, 691, 696, 703, 705, 710, 716, 721, 722, 740, 742, 763, 764, 771, 775, 776, 778, 780, 781, 836, 837, 845, 849, 856, 864, 913, 915, 928, 935, 951, 957, 964, 966, 970, 973, 975, 977, 980, 984, 987, 988, 991, 993, 996, 999, 1002, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "outli": [9, 80, 385, 455, 460, 963, 973], "skew": [9, 123, 201, 231, 300, 364, 401, 625, 626, 627, 628, 860, 872, 963, 977, 1004, 1012, 1016, 1025], "Of": [9, 25, 27, 162, 358, 374, 397, 405, 957], "screen": [9, 1022], "presenc": [9, 60, 62, 80, 81, 167, 182, 300, 370, 373, 385, 399, 402, 698, 711, 741, 754, 813, 847, 855, 857, 951, 957, 963, 967, 968, 981, 1012, 1013, 1015, 1019, 1021, 1023], "mixtur": [9, 44, 55, 57, 245, 246, 250, 361, 367, 368, 385, 397, 402, 403, 407, 609, 782, 987, 988, 1003, 1004, 1009, 1013, 1014, 1015, 1016], "univari": [9, 36, 68, 72, 74, 141, 142, 148, 165, 213, 325, 341, 364, 396, 397, 398, 405, 431, 490, 511, 516, 578, 581, 582, 584, 585, 586, 588, 591, 592, 593, 594, 595, 613, 614, 615, 616, 631, 782, 787, 806, 810, 844, 845, 854, 859, 863, 864, 884, 889, 963, 982, 984, 989, 1001, 1004, 1009, 1015], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 56, 58, 62, 71, 73, 75, 86, 95, 96, 102, 104, 106, 115, 116, 123, 143, 150, 168, 170, 182, 187, 203, 212, 219, 220, 221, 227, 232, 258, 259, 261, 270, 276, 287, 300, 304, 305, 311, 330, 345, 352, 354, 358, 364, 372, 374, 380, 383, 384, 385, 394, 395, 396, 397, 398, 399, 401, 402, 404, 405, 406, 407, 409, 426, 432, 438, 448, 450, 451, 453, 455, 460, 468, 469, 470, 471, 494, 495, 502, 503, 504, 510, 517, 518, 519, 520, 521, 523, 525, 527, 528, 529, 534, 535, 536, 539, 540, 543, 544, 545, 546, 550, 551, 552, 574, 575, 576, 577, 613, 618, 619, 624, 625, 627, 628, 644, 645, 654, 662, 663, 664, 677, 687, 693, 711, 741, 743, 744, 766, 773, 775, 776, 782, 796, 810, 813, 819, 820, 821, 822, 823, 833, 843, 844, 853, 860, 861, 864, 869, 870, 872, 873, 874, 875, 880, 891, 892, 893, 894, 895, 904, 910, 913, 920, 921, 939, 957, 959, 963, 964, 965, 966, 967, 969, 971, 973, 977, 981, 982, 983, 984, 986, 991, 1010, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1023], "ellipticenvelop": [9, 227, 456, 459, 460, 461, 462, 549, 973, 1009, 1012, 1016, 1017, 1022], "oneclasssvm": [9, 11, 16, 212, 227, 313, 329, 549, 663, 830, 973, 981, 982, 1011, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "font_manag": [9, 81, 284, 329], "load_win": [9, 239, 305, 828, 836, 1006, 1020], "support_fract": [9, 455, 460], "contamin": [9, 80, 81, 227, 236, 284, 285, 455, 549, 830, 973, 1017, 1025], "ocsvm": [9, 212], "legend1": 9, "legend2": 9, "x1": [9, 12, 16, 34, 85, 91, 112, 122, 153, 210, 222, 236, 300, 327, 374, 385, 417, 450, 495, 553, 554, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 685, 749, 847, 848, 849, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 1001], "frontier": [9, 212, 284, 329, 973, 1000], "xx1": [9, 112, 617], "yy1": 9, "meshgrid": [9, 11, 16, 26, 30, 34, 42, 58, 80, 119, 128, 151, 152, 153, 154, 156, 169, 209, 210, 211, 212, 224, 227, 247, 284, 291, 294, 302, 303, 323, 329, 330, 335, 336, 339, 340, 617], "500": [9, 10, 44, 50, 57, 60, 61, 63, 85, 86, 103, 105, 114, 116, 124, 146, 150, 174, 211, 212, 220, 237, 238, 243, 244, 248, 258, 261, 271, 278, 284, 290, 304, 311, 329, 336, 340, 358, 404, 455, 456, 460, 461, 462, 468, 469, 470, 597, 599, 600, 602, 607, 610, 611, 636, 637, 640, 641, 642, 666, 668, 669, 842, 956, 982], "clf_name": [9, 10, 343], "z1": 9, "decision_funct": [9, 11, 16, 25, 27, 56, 112, 126, 139, 210, 211, 212, 228, 236, 265, 284, 285, 294, 302, 328, 329, 330, 334, 335, 336, 340, 374, 385, 395, 404, 423, 455, 535, 536, 539, 541, 545, 547, 549, 553, 579, 580, 617, 618, 619, 644, 645, 652, 654, 660, 661, 662, 663, 684, 686, 688, 693, 706, 711, 712, 720, 724, 725, 727, 741, 767, 773, 774, 777, 782, 785, 786, 796, 805, 812, 813, 814, 815, 830, 844, 851, 881, 884, 886, 888, 889, 963, 967, 973, 974, 981, 982, 1000, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022], "c_": [9, 11, 16, 25, 26, 27, 30, 34, 58, 80, 96, 101, 119, 122, 127, 128, 137, 139, 152, 196, 211, 212, 214, 227, 236, 284, 303, 305, 323, 329, 330, 334, 336, 339, 340, 397, 645, 700, 701, 704, 967, 997, 1000, 1001], "contour": [9, 11, 16, 34, 46, 47, 80, 119, 139, 153, 154, 156, 209, 210, 211, 212, 227, 232, 247, 284, 291, 328, 329, 331, 332, 334, 335, 336, 369, 617, 618, 973, 981], "linewidth": [9, 24, 33, 34, 37, 40, 58, 73, 78, 86, 92, 111, 123, 127, 150, 154, 158, 187, 188, 192, 193, 194, 196, 199, 201, 204, 212, 215, 227, 234, 236, 267, 271, 284, 288, 301, 311, 328, 329, 331, 336, 350, 998], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 43, 85, 94, 101, 107, 165, 380, 402, 519, 527, 678, 967, 986, 987, 1001], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 70, 73, 74, 102, 116, 123, 125, 196, 204, 227, 235, 245, 256, 257, 259, 262, 265, 267, 278, 282, 302, 306, 314, 322, 330, 344, 345, 360, 364, 366, 374, 383, 385, 398, 401, 408, 409, 411, 419, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 482, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 683, 684, 686, 687, 688, 699, 747, 750, 756, 764, 765, 780, 781, 782, 785, 786, 788, 793, 794, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 899, 909, 910, 926, 956, 967, 977, 997, 998, 1002, 1004, 1009, 1015, 1016], "boxstyl": [9, 302], "fc": [9, 283, 367], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 265, 291, 335, 388, 632, 633, 636, 638, 639, 640, 646, 647, 648, 649, 650, 667, 668, 669, 670, 672], "xycoord": [9, 26], "textcoord": [9, 174], "xytext": [9, 26, 174], "bbox": [9, 12, 34, 45, 102, 243, 244, 245, 248, 249, 302], "arrowprop": [9, 26], "xlim": [9, 12, 26, 34, 44, 58, 62, 73, 78, 79, 80, 90, 97, 110, 112, 113, 114, 129, 136, 151, 152, 168, 177, 188, 190, 197, 204, 207, 212, 227, 234, 244, 249, 253, 268, 272, 284, 285, 329, 334, 335, 339, 351], "ylim": [9, 12, 24, 26, 33, 34, 37, 44, 58, 62, 78, 79, 80, 90, 97, 110, 112, 113, 120, 121, 123, 129, 132, 137, 151, 152, 168, 185, 187, 188, 190, 191, 192, 204, 207, 208, 212, 227, 234, 244, 249, 253, 257, 261, 268, 271, 272, 273, 284, 285, 329, 334, 335, 339, 343, 351], "prop": [9, 73, 81, 204, 245, 284, 329, 352, 998], "fontproperti": [9, 81, 284, 329], "ash": [9, 369, 1012, 1015], "malic_acid": 9, "abil": [9, 61, 80, 123, 156, 162, 167, 168, 170, 198, 216, 227, 343, 360, 388, 404, 405, 767, 768, 769, 772, 964, 967, 970, 973, 983, 988, 1009, 1011, 1016, 1018, 1022, 1023], "locat": [9, 25, 53, 54, 72, 80, 81, 192, 291, 312, 330, 365, 370, 372, 376, 377, 380, 381, 388, 397, 399, 403, 434, 446, 447, 455, 456, 457, 458, 459, 460, 461, 462, 474, 486, 487, 490, 491, 498, 501, 952, 957, 963, 968, 973, 977, 983, 1017], "hard": [9, 198, 227, 231, 258, 260, 360, 371, 383, 385, 397, 402, 405, 520, 527, 555, 662, 886, 887, 888, 889, 890, 963, 980, 982, 983, 988, 1000, 1001, 1002, 1018, 1019], "due": [9, 26, 27, 53, 55, 60, 75, 113, 150, 168, 169, 177, 182, 189, 196, 198, 200, 215, 216, 231, 244, 266, 267, 278, 305, 306, 343, 344, 345, 372, 378, 385, 388, 395, 397, 401, 402, 404, 407, 429, 432, 433, 445, 521, 525, 529, 530, 560, 657, 782, 785, 786, 790, 792, 796, 805, 806, 809, 812, 816, 817, 849, 853, 854, 864, 957, 963, 964, 966, 967, 968, 970, 974, 981, 988, 1001, 1009, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "banana": [9, 967], "anywai": [9, 343, 374, 651, 671, 672], "rid": [9, 981], "difficulti": [9, 27, 216, 300, 360, 372, 395, 841, 842, 966, 970], "bandwidth": [9, 44, 63, 233, 282, 283, 291, 383, 385, 397, 403, 434, 444, 447, 824, 825, 829, 960, 973, 987, 1020, 1024], "compromis": [9, 169, 358, 372, 633, 665, 970, 1012], "risk": [9, 55, 198, 216, 301, 338, 354, 371, 372, 385, 396, 401, 404, 553, 554, 869, 870, 872, 873, 874, 875, 963, 967, 991, 1016], "x2": [9, 16, 85, 91, 112, 122, 153, 210, 236, 374, 398, 574, 615, 685, 749, 1001], "xx2": 9, "yy2": 9, "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 369], "402": [9, 15, 262], "plot_outlier_detection_win": [9, 15], "goal": [10, 17, 52, 57, 86, 162, 169, 174, 198, 213, 216, 235, 236, 255, 256, 343, 359, 360, 367, 374, 377, 378, 385, 386, 387, 402, 404, 406, 528, 534, 576, 579, 724, 967, 970, 972, 973, 981, 982, 983, 985, 991, 993, 996, 1000, 1002, 1017], "boxplot": [10, 80, 124, 168, 171, 310], "defaultdict": [10, 19, 25, 171, 261, 344, 345], "gc": 10, "make_regress": [10, 75, 177, 179, 180, 184, 201, 202, 271, 311, 354, 368, 374, 375, 384, 540, 542, 546, 551, 621, 632, 633, 635, 637, 639, 641, 649, 650, 651, 653, 657, 665, 842, 885, 967, 968, 970], "randomforestregressor": [10, 116, 129, 130, 133, 162, 163, 312, 384, 404, 543, 544, 546, 548, 552, 554, 556, 618, 619, 894, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025], "sgdregressor": [10, 209, 358, 360, 383, 396, 632, 635, 653, 657, 662, 665, 842, 885, 890, 963, 981, 1011, 1013, 1015, 1016, 1017, 1020, 1022, 1023, 1024, 1025], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 60, 61, 95, 109, 116, 117, 119, 130, 163, 182, 206, 207, 212, 227, 259, 263, 264, 271, 278, 307, 318, 319, 320, 321, 332, 343, 344, 354, 367, 381, 385, 392, 455, 460, 474, 475, 477, 478, 481, 483, 489, 497, 498, 499, 500, 501, 505, 508, 510, 517, 523, 525, 526, 532, 533, 539, 540, 541, 542, 550, 551, 553, 554, 588, 644, 645, 652, 653, 654, 658, 660, 662, 663, 664, 673, 782, 784, 785, 786, 787, 788, 796, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 814, 841, 842, 865, 884, 885, 886, 889, 920, 921, 936, 938, 962, 963, 968, 975, 981, 982, 997, 1002, 1004, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 64, 70, 72, 74, 130, 185, 259, 296, 297, 300, 313, 322, 343, 370, 376, 385, 391, 426, 429, 433, 435, 438, 440, 445, 448, 450, 453, 457, 458, 464, 517, 522, 523, 524, 525, 526, 529, 531, 532, 533, 534, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 579, 580, 613, 618, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 676, 678, 680, 750, 763, 780, 781, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 813, 815, 818, 833, 840, 841, 842, 843, 844, 845, 846, 881, 884, 885, 886, 887, 888, 889, 890, 933, 988, 1011, 1012, 1014, 1016, 1017, 1018, 1020, 1021, 1023, 1024], "n_instanc": [10, 619], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 79, 81, 82, 95, 98, 100, 109, 112, 113, 122, 124, 125, 129, 144, 163, 177, 182, 184, 189, 191, 192, 197, 198, 199, 202, 203, 204, 208, 213, 216, 231, 234, 243, 247, 249, 255, 258, 263, 267, 268, 283, 300, 311, 312, 338, 344, 345, 348, 352, 358, 359, 367, 374, 378, 385, 395, 396, 397, 399, 402, 404, 405, 406, 407, 410, 432, 438, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 473, 483, 494, 495, 509, 512, 513, 517, 518, 521, 523, 524, 525, 526, 528, 529, 533, 534, 538, 543, 544, 545, 546, 547, 548, 550, 551, 552, 567, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 597, 622, 625, 629, 630, 631, 636, 644, 645, 650, 651, 652, 654, 657, 662, 663, 664, 671, 672, 689, 695, 698, 699, 701, 702, 710, 714, 715, 719, 723, 725, 731, 768, 769, 770, 772, 779, 780, 797, 798, 801, 802, 813, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 847, 854, 856, 857, 859, 860, 861, 863, 864, 870, 871, 872, 873, 877, 884, 892, 893, 894, 895, 919, 953, 957, 963, 965, 966, 969, 970, 971, 977, 978, 979, 981, 982, 983, 993, 1000, 1002, 1009, 1011, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "atomic_benchmark": 10, "percentil": [10, 71, 123, 240, 300, 358, 578, 581, 582, 584, 585, 586, 589, 592, 618, 619, 733, 977, 1014, 1022], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 74, 121, 133, 163, 199, 236, 255, 262, 330, 348, 358, 370, 372, 383, 384, 398, 400, 404, 407, 435, 469, 524, 541, 542, 543, 544, 549, 550, 551, 552, 556, 671, 672, 782, 785, 786, 796, 808, 819, 820, 821, 822, 823, 956, 967, 977, 1002, 1017, 1019], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 66, 79, 81, 122, 147, 150, 156, 157, 169, 174, 200, 253, 258, 259, 270, 319, 338, 344, 345, 374, 381, 385, 386, 394, 395, 396, 397, 402, 405, 406, 407, 574, 579, 593, 594, 601, 613, 620, 645, 787, 797, 798, 801, 910, 957, 966, 1004, 1017, 1019], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 58, 64, 100, 112, 114, 119, 123, 139, 154, 158, 178, 181, 190, 207, 210, 216, 231, 253, 258, 265, 267, 323, 326, 328, 330, 331, 332, 334, 336, 344, 349, 367, 383, 385, 394, 395, 398, 401, 405, 407, 423, 426, 427, 431, 436, 443, 449, 457, 458, 464, 479, 494, 495, 568, 578, 581, 582, 584, 585, 586, 596, 599, 600, 601, 603, 605, 606, 608, 609, 611, 613, 618, 619, 629, 678, 686, 691, 692, 693, 701, 716, 725, 743, 744, 748, 751, 754, 755, 756, 757, 758, 759, 761, 763, 764, 765, 766, 767, 771, 812, 824, 825, 899, 967, 968, 969, 970, 977, 983, 1009, 1021, 1022, 1024, 1025], "contain": [10, 19, 24, 27, 33, 40, 49, 56, 58, 70, 71, 112, 114, 118, 126, 156, 168, 169, 171, 174, 189, 216, 227, 236, 237, 240, 248, 256, 258, 264, 267, 268, 276, 284, 285, 287, 300, 313, 319, 322, 343, 344, 365, 366, 367, 369, 372, 374, 376, 377, 378, 379, 380, 381, 384, 385, 391, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 409, 411, 419, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 488, 489, 490, 494, 495, 496, 500, 501, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 672, 674, 675, 676, 677, 678, 682, 683, 684, 686, 687, 688, 695, 698, 720, 721, 722, 753, 757, 764, 765, 773, 777, 780, 781, 782, 785, 786, 788, 796, 800, 801, 807, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 903, 904, 905, 924, 925, 927, 930, 934, 936, 956, 957, 959, 965, 968, 971, 973, 977, 978, 980, 983, 993, 1002, 1009, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "generate_dataset": 10, "coef": [10, 54, 105, 167, 168, 177, 182, 185, 189, 190, 192, 197, 201, 202, 203, 207, 214, 240, 271, 296, 339, 510, 632, 633, 635, 638, 639, 645, 646, 647, 648, 649, 655, 658, 660, 666, 667, 668, 669, 670, 671, 672, 673, 971], "random_se": [10, 92, 119], "x_scaler": 10, "y_scaler": 10, "ok": [10, 372, 973], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 291, 322, 358, 693, 699, 714, 715, 723, 768, 769, 772, 773, 967, 1009, 1017, 1018, 1024], "bp": [10, 124, 147, 186, 187, 369, 975], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "red": [10, 11, 26, 33, 34, 60, 80, 92, 95, 96, 97, 113, 130, 133, 159, 174, 177, 178, 188, 196, 224, 237, 253, 264, 291, 295, 301, 305, 306, 320, 330, 351, 370, 385, 397, 402, 968], "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 55, 58, 59, 60, 63, 64, 85, 91, 92, 97, 101, 116, 129, 157, 158, 174, 186, 191, 193, 195, 196, 198, 200, 201, 213, 215, 220, 243, 245, 246, 253, 258, 260, 261, 262, 285, 300, 305, 320, 348, 372, 376, 405, 1017, 1019, 1020], "linestyl": [10, 11, 16, 33, 60, 73, 80, 103, 105, 110, 122, 132, 136, 139, 150, 153, 155, 157, 159, 170, 183, 185, 186, 187, 198, 199, 200, 204, 208, 210, 211, 216, 234, 236, 255, 257, 261, 262, 267, 283, 291, 295, 301, 328, 331, 332, 334, 335, 336, 998], "major": [10, 14, 116, 265, 300, 304, 310, 311, 312, 313, 314, 315, 345, 358, 367, 371, 372, 375, 378, 383, 386, 397, 401, 403, 405, 407, 537, 555, 556, 680, 714, 715, 723, 768, 769, 772, 896, 898, 967, 970, 981, 988, 991, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 206, 379, 424, 562, 684, 686, 688, 903], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 650, 671, 672, 963, 967], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 206, 221, 224, 278], "1e2": [10, 150, 157, 233, 249, 330, 731], "randomforest": [10, 119, 358, 404, 892, 893, 1014], "0001": [10, 206, 256, 374, 409, 429, 433, 445, 457, 458, 464, 519, 524, 526, 533, 535, 536, 545, 546, 632, 633, 634, 635, 638, 639, 644, 645, 646, 647, 648, 649, 654, 655, 658, 660, 662, 664, 666, 673, 675, 679, 841, 842, 884, 885, 956], "250": [10, 65, 123, 174, 219, 479, 678, 956, 979, 1016], "046": [10, 15, 344], "plot_prediction_lat": [10, 15], "conserv": [11, 568, 575, 876, 877, 966, 979], "biologi": 11, "south": [11, 168, 291, 403], "american": [11, 12, 70, 81, 367, 397, 399, 403, 404, 405, 455, 460, 716, 864], "mammal": 11, "past": [11, 376, 377, 380, 383, 386, 401, 402, 404, 524, 541, 542, 664, 991, 994, 1025], "environment": [11, 182, 216], "unsuccess": 11, "cast": [11, 53, 198, 220, 366, 385, 386, 405, 482, 630, 631, 632, 638, 642, 643, 646, 647, 648, 649, 650, 651, 659, 661, 932, 1016, 1017, 1018, 1019, 1022, 1024], "densiti": [11, 49, 55, 60, 65, 75, 101, 105, 147, 165, 184, 198, 213, 216, 223, 227, 231, 242, 249, 250, 258, 264, 279, 284, 285, 292, 300, 330, 343, 369, 381, 385, 397, 404, 408, 416, 430, 432, 434, 436, 438, 450, 453, 484, 488, 522, 527, 535, 536, 780, 781, 782, 824, 825, 829, 830, 877, 961, 963, 966, 970, 972, 973, 979, 987, 989, 993, 1003, 1004, 1011, 1013, 1017, 1018, 1024, 1025], "phillip": [11, 291, 484], "2006": [11, 291, 404, 407, 448, 484, 543, 544, 551, 552, 596, 597, 600, 605, 608, 635, 652, 653, 726, 773, 774, 780, 819, 877, 894, 895, 963, 967, 969, 972, 979, 980], "basemap": [11, 291], "coast": [11, 291], "line": [11, 17, 40, 43, 60, 70, 95, 100, 116, 122, 149, 160, 162, 163, 165, 168, 169, 186, 187, 188, 190, 193, 194, 196, 199, 200, 201, 206, 207, 209, 210, 227, 231, 232, 234, 236, 255, 262, 264, 265, 288, 291, 301, 312, 329, 334, 335, 339, 340, 343, 366, 367, 370, 372, 373, 374, 376, 377, 378, 379, 380, 383, 402, 403, 404, 424, 473, 474, 475, 494, 495, 528, 539, 540, 541, 542, 596, 599, 600, 618, 656, 672, 686, 687, 688, 788, 935, 961, 967, 971, 974, 981, 987, 990, 1000, 1002, 1011, 1020, 1022, 1025], "nation": [11, 80, 291, 367, 831], "boundari": [11, 13, 25, 26, 27, 31, 34, 58, 60, 108, 112, 119, 128, 134, 151, 154, 165, 169, 181, 199, 227, 232, 234, 261, 281, 286, 288, 289, 291, 294, 300, 302, 305, 317, 324, 327, 328, 330, 332, 339, 340, 349, 368, 395, 404, 405, 407, 436, 442, 490, 522, 535, 536, 555, 574, 575, 577, 617, 813, 826, 832, 834, 835, 836, 863, 880, 881, 888, 889, 892, 908, 961, 970, 973, 977, 980, 981, 982, 1009, 1011, 1013, 1022, 1023, 1024], "america": [11, 12, 80, 291, 831, 977], "bradypu": [11, 291, 484], "variegatu": [11, 291, 484], "brown": [11, 92, 291, 484, 614, 957, 1014, 1016, 1017, 1018, 1021], "throat": [11, 291, 484], "sloth": [11, 291, 484], "microryzomi": [11, 291, 484], "minutu": [11, 291, 484], "known": [11, 17, 25, 27, 39, 49, 57, 58, 81, 104, 105, 130, 155, 157, 163, 182, 198, 199, 216, 227, 258, 260, 267, 287, 291, 301, 313, 318, 327, 344, 360, 369, 370, 372, 375, 380, 383, 385, 388, 393, 394, 395, 397, 398, 399, 400, 401, 402, 404, 405, 407, 424, 449, 468, 470, 484, 494, 495, 530, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 574, 575, 577, 580, 595, 608, 619, 644, 645, 658, 668, 669, 680, 690, 696, 699, 704, 714, 728, 740, 742, 778, 813, 819, 820, 821, 822, 823, 826, 831, 834, 840, 868, 892, 893, 894, 895, 957, 959, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 977, 982, 983, 993, 998, 1000, 1001], "forest": [11, 27, 31, 108, 115, 119, 125, 126, 128, 130, 133, 134, 162, 165, 166, 172, 174, 227, 236, 255, 291, 312, 343, 354, 365, 384, 385, 395, 406, 449, 450, 476, 477, 481, 482, 484, 501, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 616, 620, 782, 787, 810, 817, 844, 858, 888, 892, 893, 894, 956, 957, 968, 975, 987, 988, 989, 1004, 1006, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1018], "rice": [11, 291, 484, 1022], "rat": [11, 291, 484], "rodent": [11, 291, 484], "live": [11, 70, 168, 291, 372, 397, 484, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611], "peru": [11, 291, 484], "colombia": [11, 291, 484], "ecuador": [11, 291, 484], "venezuela": [11, 291, 484], "entropi": [11, 238, 270, 291, 312, 318, 319, 354, 397, 404, 409, 484, 519, 543, 550, 593, 594, 644, 703, 721, 722, 726, 778, 892, 894, 963, 964, 967, 971, 983, 1011, 1013, 1017, 1018, 1023, 1025], "anderson": [11, 291, 484, 1015, 1021], "schapir": [11, 291, 404, 484, 539, 540], "ecolog": [11, 291, 484], "190": [11, 122, 216, 267, 291, 378, 484], "231": [11, 37, 68, 291, 397, 408, 430, 484, 570], "259": [11, 221, 291, 404, 484, 553, 554], "________________________________________________________________________________": [11, 54, 343], "coastlin": [11, 291, 369], "coverag": [11, 123, 198, 216, 291, 375, 393, 484, 613, 706], "area": [11, 34, 126, 198, 216, 236, 255, 258, 265, 267, 268, 330, 335, 339, 369, 372, 376, 383, 397, 404, 405, 688, 692, 693, 694, 727, 773, 774, 964, 967, 970, 986, 1011], "roc": [11, 25, 115, 165, 226, 228, 236, 237, 241, 251, 274, 379, 395, 401, 490, 496, 550, 644, 688, 692, 693, 694, 712, 727, 767, 773, 774, 801, 810, 813, 851, 889, 973, 1006, 1011, 1012, 1014, 1015, 1019, 1021, 1025], "868443": 11, "993919": 11, "elaps": [11, 47, 67, 116, 117, 118, 358, 450, 453, 555, 556, 843, 844, 845, 846], "73": [11, 262, 319, 384, 782, 796, 830, 893, 977, 998, 1009, 1011], "astro": [11, 157, 219, 246], "washington": [11, 157, 219, 246, 283, 291], "bunch": [11, 365, 366, 367, 450, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 496, 553, 554, 555, 556, 618, 619, 620, 843, 844, 892, 893, 894, 895, 991, 1002, 1014, 1016, 1019, 1021, 1025], "fetch_species_distribut": [11, 291, 1018], "ll": [11, 55, 118, 253, 291, 372, 383, 518, 527, 970, 983, 993], "otherwis": [11, 56, 62, 112, 159, 163, 179, 200, 206, 291, 354, 360, 374, 376, 378, 385, 397, 399, 401, 405, 407, 420, 421, 422, 424, 426, 427, 428, 431, 432, 437, 439, 440, 450, 453, 468, 469, 470, 471, 482, 512, 521, 522, 524, 526, 527, 533, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 574, 576, 577, 583, 588, 596, 597, 600, 617, 618, 619, 630, 631, 632, 638, 644, 645, 646, 648, 651, 652, 653, 654, 659, 661, 662, 663, 664, 671, 672, 676, 678, 682, 683, 684, 686, 688, 689, 693, 695, 699, 700, 709, 711, 712, 713, 714, 715, 723, 726, 737, 739, 740, 741, 751, 759, 763, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 784, 785, 786, 787, 788, 796, 800, 801, 808, 813, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 839, 841, 842, 848, 849, 851, 855, 864, 865, 866, 869, 870, 871, 873, 874, 875, 884, 885, 886, 887, 888, 889, 890, 897, 899, 905, 907, 920, 921, 928, 951, 953, 962, 963, 964, 967, 970, 971, 973, 974, 977, 979, 981, 982, 987, 991, 993, 1011, 1017, 1018, 1019, 1022], "improvis": [11, 291], "mpl_toolkit": [11, 45, 67, 90, 101, 102, 169, 195, 219, 221, 291], "except": [11, 16, 44, 53, 98, 116, 206, 213, 227, 266, 278, 291, 295, 296, 300, 302, 315, 361, 365, 372, 374, 375, 376, 377, 383, 385, 391, 394, 398, 401, 402, 404, 405, 407, 418, 446, 451, 454, 468, 469, 470, 495, 540, 542, 543, 544, 546, 548, 550, 551, 554, 556, 597, 613, 616, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 664, 665, 673, 697, 763, 789, 817, 818, 824, 825, 827, 830, 835, 841, 842, 848, 862, 864, 882, 885, 887, 890, 893, 895, 925, 953, 963, 967, 982, 993, 1001, 1002, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022], "importerror": [11, 16, 53, 98, 278, 291, 380, 482], "construct_grid": [11, 291], "object": [11, 13, 14, 19, 26, 44, 50, 62, 66, 70, 71, 98, 130, 136, 145, 146, 155, 165, 169, 182, 194, 198, 214, 216, 226, 237, 239, 240, 241, 256, 270, 291, 306, 313, 314, 318, 344, 345, 354, 365, 366, 367, 372, 373, 375, 377, 378, 379, 381, 384, 385, 386, 391, 397, 398, 399, 402, 405, 406, 407, 411, 413, 417, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 697, 704, 717, 718, 727, 743, 744, 766, 767, 774, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 899, 904, 905, 906, 907, 908, 911, 915, 917, 927, 928, 930, 932, 933, 935, 952, 953, 955, 963, 964, 965, 966, 970, 973, 974, 977, 980, 981, 982, 987, 988, 993, 994, 996, 997, 1000, 1002, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "func": [11, 75, 115, 168, 178, 216, 291, 372, 398, 451, 685, 848, 977, 1013, 1015, 1017, 1018], "xgrid": [11, 291], "ygrid": [11, 291], "correspond": [11, 13, 16, 26, 32, 41, 53, 65, 78, 82, 97, 113, 116, 117, 119, 126, 143, 146, 147, 151, 156, 159, 168, 187, 190, 198, 199, 207, 216, 228, 233, 240, 248, 257, 259, 261, 262, 267, 268, 291, 305, 312, 313, 314, 344, 348, 349, 354, 359, 366, 367, 368, 371, 372, 374, 376, 379, 380, 384, 385, 386, 394, 395, 397, 399, 400, 401, 402, 404, 405, 406, 407, 412, 417, 423, 425, 427, 431, 434, 437, 439, 445, 447, 449, 450, 458, 468, 469, 470, 476, 477, 478, 479, 480, 481, 482, 520, 527, 530, 531, 532, 535, 536, 538, 541, 543, 545, 546, 547, 550, 568, 570, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 603, 616, 618, 619, 621, 629, 630, 631, 632, 633, 634, 638, 644, 645, 646, 647, 648, 654, 655, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 669, 673, 676, 677, 678, 680, 689, 696, 699, 709, 710, 719, 723, 737, 739, 759, 763, 767, 773, 774, 777, 779, 780, 781, 782, 785, 786, 788, 796, 805, 813, 816, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 833, 841, 842, 851, 855, 857, 858, 861, 865, 873, 886, 889, 892, 893, 894, 895, 909, 915, 942, 956, 957, 959, 960, 961, 963, 964, 966, 967, 968, 970, 971, 972, 973, 974, 977, 978, 981, 982, 986, 993, 999, 1002, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "coordin": [11, 12, 13, 54, 100, 129, 154, 183, 219, 259, 291, 358, 402, 407, 429, 433, 434, 435, 447, 457, 458, 464, 517, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 536, 600, 632, 633, 637, 638, 639, 640, 641, 642, 644, 646, 647, 648, 649, 667, 668, 669, 670, 674, 675, 676, 679, 680, 692, 749, 754, 884, 963, 964, 982, 1000, 1009, 1012, 1013, 1014, 1018, 1020, 1022, 1023, 1024], "corner": [11, 13, 26, 53, 167, 255, 259, 267, 268, 291, 372, 484, 896, 898, 967, 1023], "cell": [11, 12, 26, 32, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 237, 238, 239, 240, 248, 256, 258, 259, 265, 270, 291, 297, 306, 311, 312, 314, 315, 320, 352, 369, 377, 678, 967, 968, 1015, 1023], "xmin": [11, 78, 188, 190, 207, 208, 291], "x_left_lower_corn": [11, 291, 484], "grid_siz": [11, 61, 291, 484], "xmax": [11, 78, 188, 190, 207, 208, 291], "nx": [11, 34, 291, 484], "ymin": [11, 78, 185, 187, 190, 191, 199, 207, 258, 291], "y_left_lower_corn": [11, 291, 484], "ny": [11, 34, 257, 291, 369, 484, 957, 979], "create_species_bunch": 11, "species_nam": [11, 291], "record": [11, 96, 114, 170, 306, 345, 358, 372, 397, 399, 436, 443, 484, 606, 629, 678, 756, 759, 763, 764, 765, 766, 807, 830, 1022, 1023], "join": [11, 12, 19, 55, 162, 216, 258, 302, 367, 386, 449, 1002, 1009, 1017], "ascii": [11, 291, 405, 473, 574, 575, 577], "pt": [11, 367, 406, 860, 977], "desir": [11, 24, 112, 147, 163, 198, 200, 300, 304, 365, 372, 374, 376, 380, 391, 394, 397, 400, 401, 402, 406, 489, 524, 526, 530, 533, 553, 579, 588, 589, 650, 656, 671, 672, 694, 721, 824, 825, 829, 849, 851, 854, 855, 857, 858, 860, 861, 865, 868, 870, 872, 873, 908, 936, 959, 961, 964, 970, 977, 981, 982, 983, 993, 1009, 1017, 1018, 1019, 1022], "pts_": 11, "ix": [11, 267, 337], "searchsort": 11, "dd": [11, 12, 128, 291, 484], "ii": [11, 96, 169, 205, 253, 369, 405, 568, 569, 575, 624, 652, 653, 847, 856, 963, 977, 986], "lat": [11, 291, 484], "cov_": [11, 82], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 37, 81, 92, 122, 163, 170, 222, 230, 235, 270, 312, 374, 377, 384, 786, 803, 819, 820, 821, 823, 956, 957], "land": [11, 291, 386, 404], "water": 11, "land_refer": [11, 291], "standard": [11, 12, 26, 32, 34, 55, 61, 70, 71, 73, 80, 81, 86, 96, 110, 113, 115, 116, 117, 118, 119, 126, 130, 147, 150, 155, 157, 159, 168, 177, 183, 187, 196, 198, 207, 219, 220, 221, 232, 248, 253, 256, 257, 258, 259, 261, 300, 305, 328, 343, 358, 359, 364, 365, 366, 368, 369, 370, 372, 374, 375, 377, 378, 381, 383, 385, 388, 391, 393, 397, 399, 400, 401, 405, 407, 432, 454, 458, 474, 482, 487, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 510, 511, 516, 518, 521, 527, 538, 576, 580, 597, 620, 630, 631, 636, 637, 640, 641, 642, 650, 651, 658, 659, 660, 661, 662, 664, 673, 675, 679, 773, 788, 803, 821, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 848, 853, 854, 857, 860, 861, 862, 864, 872, 873, 874, 875, 882, 884, 885, 904, 956, 959, 963, 964, 967, 969, 970, 971, 973, 981, 982, 988, 991, 993, 998, 1000, 1001, 1002, 1004, 1015, 1016, 1017, 1018, 1020, 1021, 1022], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 291], "llcrnrlat": [11, 291], "urcrnrlat": [11, 291], "llcrnrlon": [11, 291], "urcrnrlon": [11, 291], "drawcoastlin": [11, 291], "drawcountri": [11, 291], "9998": [11, 291], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 56, 60, 63, 65, 68, 74, 75, 80, 90, 91, 92, 95, 102, 103, 109, 112, 119, 123, 126, 128, 129, 131, 132, 136, 139, 143, 144, 151, 153, 154, 158, 163, 165, 168, 169, 170, 180, 181, 183, 192, 195, 202, 210, 212, 231, 233, 234, 235, 243, 246, 258, 261, 262, 267, 268, 271, 278, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 301, 302, 303, 304, 310, 314, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 342, 343, 345, 346, 354, 359, 366, 367, 369, 372, 380, 381, 385, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 426, 429, 432, 433, 434, 435, 436, 437, 438, 439, 445, 446, 448, 455, 458, 474, 488, 490, 492, 498, 509, 517, 523, 527, 530, 531, 532, 535, 536, 539, 541, 543, 544, 545, 567, 575, 576, 577, 578, 580, 581, 582, 584, 585, 586, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 617, 625, 626, 634, 636, 637, 639, 640, 641, 642, 644, 645, 649, 650, 651, 652, 653, 655, 665, 666, 668, 669, 670, 671, 672, 674, 677, 681, 682, 690, 691, 694, 703, 711, 722, 728, 741, 743, 744, 746, 751, 754, 759, 760, 761, 762, 764, 776, 777, 778, 780, 781, 783, 787, 789, 790, 791, 794, 797, 798, 800, 801, 803, 808, 819, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 845, 849, 850, 851, 855, 856, 857, 859, 860, 864, 872, 877, 891, 899, 907, 916, 921, 941, 956, 957, 959, 960, 961, 963, 964, 965, 966, 969, 971, 972, 973, 975, 980, 981, 982, 983, 987, 990, 997, 1003, 1004, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "solid": [11, 16, 31, 33, 122, 153, 210, 211, 227, 291, 302, 991], "z": [11, 16, 34, 58, 101, 119, 139, 152, 154, 169, 208, 210, 211, 212, 219, 221, 227, 232, 247, 284, 291, 294, 302, 305, 323, 329, 330, 334, 335, 336, 340, 369, 394, 402, 404, 539, 540, 571, 625, 650, 657, 671, 672, 675, 679, 685, 709, 770, 864, 963, 964, 971, 972, 1024], "float64": [11, 13, 48, 53, 71, 122, 124, 125, 168, 169, 269, 314, 315, 359, 366, 372, 374, 385, 405, 457, 458, 464, 482, 483, 494, 495, 528, 567, 568, 575, 577, 627, 644, 659, 661, 723, 849, 857, 858, 886, 887, 889, 890, 893, 895, 902, 904, 938, 941, 943, 944, 945, 982, 993, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "idx": [11, 16, 19, 30, 45, 55, 105, 112, 116, 119, 131, 159, 169, 171, 182, 190, 197, 198, 207, 220, 236, 349, 398, 401], "9999": [11, 216, 291, 321, 484, 613, 1017], "coverages_land": 11, "contourf": [11, 16, 119, 212, 232, 284, 291, 294, 302, 303, 323, 329, 335, 340, 617, 618], "pts_train": 11, "pts_test": 11, "auc": [11, 25, 198, 216, 236, 255, 258, 262, 265, 267, 268, 395, 688, 694, 773, 967, 1014, 1017, 1021], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 34, 101, 105, 211, 212, 244, 265, 284, 285, 329, 335, 340, 397, 693, 967, 983], "fpr": [11, 228, 236, 255, 267, 268, 379, 578, 582, 684, 688, 692, 712, 774, 967, 1006, 1009, 1025], "tpr": [11, 228, 236, 255, 267, 268, 379, 688, 692, 774, 967, 1006, 1009, 1025], "threshold": [11, 25, 42, 65, 98, 105, 147, 165, 169, 171, 193, 228, 230, 255, 256, 257, 265, 276, 317, 324, 349, 352, 385, 397, 402, 404, 406, 427, 428, 431, 432, 455, 486, 494, 495, 517, 523, 528, 534, 535, 536, 549, 574, 577, 579, 583, 588, 589, 630, 653, 657, 662, 664, 678, 684, 686, 688, 689, 692, 693, 706, 711, 712, 724, 725, 741, 767, 773, 774, 777, 780, 781, 801, 819, 830, 831, 847, 849, 851, 867, 879, 880, 881, 889, 896, 898, 941, 963, 967, 970, 971, 973, 977, 980, 982, 983, 988, 1009, 1013, 1014, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1025], "roc_curv": [11, 228, 255, 267, 688, 692, 712, 767, 773, 967, 1009, 1010, 1011, 1014, 1015, 1017, 1022, 1025], "roc_auc": [11, 258, 262, 267, 268, 379, 620, 688, 967, 1006], "ntime": [11, 269], "913": [11, 15, 404, 545], "plot_species_distribution_model": [11, 15, 484], "emploi": [12, 150, 233, 399, 405, 407, 436, 464, 568, 575, 975, 991, 1001, 1015], "techniqu": [12, 70, 72, 97, 106, 111, 121, 138, 146, 163, 167, 206, 221, 223, 263, 282, 313, 319, 348, 360, 369, 383, 385, 395, 396, 397, 401, 402, 403, 404, 405, 406, 433, 434, 435, 436, 520, 540, 663, 675, 679, 680, 711, 741, 959, 963, 964, 966, 967, 970, 973, 975, 979, 981, 983, 988, 991, 996, 1001, 1002, 1022], "histor": [12, 198, 988], "quot": [12, 14, 70, 259, 343, 344, 359, 366, 367, 370, 376, 396, 474, 475, 482, 967, 979, 982, 1002, 1024], "quantiti": [12, 120, 258, 265, 312, 358, 385, 397, 404, 707, 708, 709, 770, 840, 956, 958, 961, 963, 1014], "daili": [12, 991], "price": [12, 75, 120, 130, 306, 957, 963, 991, 998], "link": [12, 17, 168, 169, 177, 198, 216, 243, 261, 288, 348, 359, 370, 371, 372, 373, 376, 380, 385, 395, 397, 399, 402, 407, 547, 548, 596, 634, 655, 666, 674, 691, 903, 905, 963, 970, 983, 984, 987, 990, 996, 1000, 1002, 1007, 1009, 1012, 1013, 1016, 1017, 1020], "fluctuat": [12, 60, 198, 265, 1017], "normalesup": [12, 32, 46, 66, 232], "2003": [12, 394, 397, 402, 405, 437, 438, 448, 499, 501, 675, 679, 819, 821, 963, 964, 969, 979, 1017], "2008": [12, 399, 401, 402, 464, 520, 549, 576, 631, 650, 671, 672, 678, 702, 711, 741, 814, 819, 823, 840, 961, 964, 965, 967, 968, 969, 972, 973, 982], "calm": 12, "ago": [12, 988], "tech": [12, 369, 822], "firm": [12, 397], "crash": [12, 372, 454, 874, 875, 882, 977, 1013, 1017], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 380, 840, 972, 1000], "msft": 12, "ibm": [12, 19, 322, 345, 367], "twx": 12, "warner": [12, 1024], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 1002], "amzn": 12, "amazon": 12, "tm": [12, 970], "toyota": 12, "caj": 12, "canon": [12, 385, 395, 404, 468, 469, 471, 753, 988, 989, 1004], "sne": [12, 165, 218, 219, 220, 221, 223, 225, 500, 511, 678, 1003, 1004], "soni": [12, 1019, 1021], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 841, 842, 971], "boe": 12, "ko": [12, 26, 151], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 80, 81, 399, 455, 460], "mcdonald": 12, "pep": [12, 380, 1009], "pepsi": 12, "kellogg": 12, "un": [12, 372, 395, 405, 409, 519, 575, 778, 847, 856, 867, 871, 1018], "unilev": 12, "mar": [12, 985], "marriott": 12, "pg": [12, 378, 635, 963, 1014], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 958, 969, 1021], "electr": [12, 369, 397], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 991], "chase": [12, 1009], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 991], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 358, 370, 383, 968, 985], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 70], "instrument": [12, 70, 96, 167], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1019], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 133], "dynam": [12, 169, 541, 542, 549, 565, 566, 662, 663, 664, 983, 987, 991, 1015, 1021], "rtn": 12, "raytheon": 12, "cat": [12, 71, 169, 170, 313, 314, 315, 367, 405, 568, 698, 704, 739, 768, 865, 967, 977, 1018, 1019, 1021], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 345, 359, 374, 378, 399, 405, 485, 568, 574, 575, 577, 896, 898, 987], "fetch": [12, 17, 130, 168, 216, 365, 366, 367, 372, 376, 377, 380, 396, 402, 482, 541, 542, 549, 574, 575, 577, 1017], "histori": [12, 361, 532, 545, 546, 985, 1009], "stderr": [12, 813], "url": [12, 17, 147, 366, 369, 376], "githubusercont": 12, "master": [12, 16, 278, 315, 372, 376, 991, 1014], "financi": [12, 397, 404, 963], "csv": [12, 366, 369, 377, 990, 1017, 1022], "read_csv": [12, 377, 1024], "close_pric": 12, "vstack": [12, 26, 57, 65, 153, 154, 180, 243, 247, 278, 291, 335, 617, 968, 1017], "q": [12, 71, 85, 123, 198, 313, 394, 397, 402, 920, 963, 982], "open_pric": 12, "carri": [12, 31, 163, 258, 261, 266, 295, 302, 345, 386, 391, 405, 543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895, 991, 1001], "invers": [12, 54, 77, 83, 165, 248, 267, 330, 344, 345, 364, 385, 396, 398, 400, 401, 402, 405, 409, 431, 451, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 513, 519, 520, 521, 525, 527, 529, 543, 547, 550, 575, 576, 577, 614, 630, 631, 644, 645, 652, 654, 660, 661, 662, 663, 664, 666, 709, 728, 737, 780, 781, 826, 827, 834, 835, 841, 842, 844, 848, 851, 857, 858, 860, 876, 877, 884, 885, 886, 889, 890, 892, 894, 910, 961, 963, 967, 970, 971, 977, 981, 982, 1000, 1002, 1003, 1004, 1009, 1012, 1017, 1020, 1021, 1023], "correl": [12, 27, 82, 85, 86, 106, 127, 143, 146, 155, 165, 166, 167, 169, 170, 172, 182, 187, 193, 216, 258, 276, 306, 311, 312, 338, 365, 368, 369, 377, 385, 387, 394, 399, 401, 406, 407, 436, 443, 468, 469, 471, 479, 480, 486, 510, 550, 592, 595, 613, 620, 621, 622, 668, 669, 728, 742, 763, 764, 765, 810, 824, 825, 861, 862, 864, 873, 958, 963, 968, 974, 977, 981, 983, 988, 989, 1004, 1009, 1010, 1011, 1022, 1023], "condition": [12, 27, 198, 395, 399, 743, 961], "connect": [12, 39, 44, 47, 51, 54, 62, 66, 67, 370, 372, 381, 385, 399, 427, 431, 438, 448, 449, 571, 572, 681, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 965, 970, 972, 980, 1013, 1022], "edge_model": 12, "graphicallassocv": [12, 82, 399, 457, 459, 460, 461, 462, 464, 1017, 1021, 1023, 1025], "seri": [12, 82, 117, 167, 170, 180, 198, 219, 236, 240, 263, 307, 314, 318, 364, 367, 377, 385, 397, 475, 476, 477, 478, 482, 486, 487, 488, 490, 491, 496, 527, 676, 680, 803, 900, 958, 963, 964, 968, 970, 981, 987, 1012, 1015, 1016, 1017, 1021, 1024], "rather": [12, 53, 82, 113, 162, 168, 198, 199, 212, 304, 305, 343, 344, 354, 359, 368, 372, 374, 377, 378, 380, 383, 384, 385, 386, 397, 401, 402, 404, 405, 407, 434, 447, 449, 551, 567, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 615, 632, 633, 638, 639, 646, 647, 648, 649, 766, 796, 815, 817, 818, 847, 884, 885, 896, 921, 961, 963, 964, 967, 969, 970, 974, 988, 997, 1000, 1009, 1010, 1011, 1012, 1016, 1017, 1018, 1019, 1024, 1025], "former": [12, 345, 404, 405, 551, 784, 791, 800, 969, 1009, 1015, 1018], "recoveri": [12, 82, 182, 197, 399], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 237, 238, 239, 240, 248, 256, 258, 259, 265, 270, 297, 306, 311, 312, 314, 315, 320, 352, 380], "trust": [12, 26, 71, 72, 81, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 237, 238, 239, 240, 248, 256, 258, 259, 265, 270, 297, 306, 311, 312, 314, 315, 320, 352, 376, 386, 391, 395, 997, 1023], "unabl": [12, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 167, 168, 169, 170, 179, 182, 198, 228, 229, 230, 237, 238, 239, 240, 248, 256, 258, 259, 265, 270, 297, 306, 311, 312, 314, 315, 320, 352, 360, 864, 977, 1018], "render": [12, 26, 53, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 193, 228, 229, 230, 237, 238, 239, 240, 248, 256, 258, 259, 265, 270, 297, 306, 311, 312, 314, 315, 320, 352, 372, 376, 377, 378, 385, 537, 575, 617, 686, 688, 861, 873, 896, 898, 966, 983, 1022], "nbviewer": [12, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 237, 238, 239, 240, 248, 256, 258, 259, 265, 270, 297, 306, 311, 312, 314, 315, 320, 352], "graphicallassocvgraphicallassocv": 12, "group": [12, 37, 40, 55, 58, 60, 132, 169, 171, 198, 220, 249, 253, 306, 320, 344, 352, 367, 377, 385, 386, 397, 403, 404, 405, 420, 432, 481, 574, 575, 577, 580, 704, 773, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 811, 857, 858, 894, 895, 963, 964, 966, 967, 968, 977, 983, 984, 985, 987, 993, 996, 997, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1025], "amongst": [12, 983], "indic": [12, 19, 25, 26, 27, 48, 59, 60, 66, 75, 86, 95, 115, 155, 158, 163, 167, 169, 195, 221, 231, 252, 260, 261, 264, 265, 278, 291, 318, 319, 322, 343, 344, 345, 352, 359, 367, 372, 373, 374, 376, 380, 381, 383, 385, 394, 395, 397, 399, 401, 402, 404, 405, 407, 408, 412, 423, 426, 430, 436, 437, 438, 439, 441, 442, 443, 446, 450, 453, 458, 473, 494, 495, 497, 498, 499, 509, 518, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 567, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 606, 613, 614, 615, 616, 618, 619, 625, 633, 636, 637, 639, 640, 641, 647, 649, 651, 659, 661, 668, 669, 676, 678, 680, 682, 689, 693, 698, 699, 704, 705, 706, 710, 713, 714, 715, 716, 719, 723, 724, 725, 726, 739, 756, 763, 764, 765, 766, 768, 769, 770, 772, 773, 775, 776, 777, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 815, 817, 818, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 848, 851, 855, 857, 865, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 900, 904, 905, 910, 925, 930, 931, 957, 962, 963, 964, 967, 968, 969, 970, 971, 974, 975, 977, 978, 981, 982, 988, 993, 997, 1000, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1019, 1020, 1022, 1024, 1025], "reflect": [12, 40, 46, 47, 80, 92, 96, 120, 169, 170, 198, 216, 267, 282, 344, 368, 371, 376, 385, 387, 394, 436, 442, 964, 967, 973, 975, 1001, 1010, 1018], "properti": [12, 25, 157, 158, 200, 215, 244, 280, 305, 352, 358, 361, 365, 372, 374, 388, 394, 395, 397, 399, 402, 404, 406, 407, 412, 428, 431, 437, 438, 439, 450, 451, 528, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 576, 577, 579, 580, 583, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 618, 632, 638, 641, 646, 648, 660, 661, 685, 690, 691, 694, 782, 785, 786, 796, 812, 813, 843, 844, 857, 858, 859, 865, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 956, 959, 962, 963, 964, 967, 968, 970, 973, 977, 980, 982, 983, 984, 988, 993, 1014, 1018, 1019, 1022, 1023], "impact": [12, 25, 36, 37, 68, 75, 143, 165, 167, 168, 169, 200, 216, 252, 305, 315, 344, 354, 358, 359, 365, 383, 386, 395, 397, 402, 433, 435, 522, 526, 533, 576, 652, 653, 654, 658, 660, 662, 663, 664, 678, 777, 782, 785, 786, 796, 807, 824, 825, 861, 873, 907, 921, 938, 941, 956, 966, 974, 982, 1016, 1019, 1022], "affinity_propag": [12, 44], "covariance_": [12, 34, 80, 82, 455, 456, 457, 458, 459, 460, 461, 462, 535, 536, 961, 1016], "n_label": [12, 92, 234, 385, 473, 509, 699, 706, 711, 724, 725, 739, 741, 775, 776, 802, 967, 1015, 1017], "lai": [12, 305, 973], "canva": [12, 16], "manifold": [12, 39, 52, 67, 222, 223, 224, 225, 278, 310, 314, 315, 320, 361, 365, 385, 397, 402, 404, 488, 511, 516, 530, 535, 552, 833, 845, 854, 877, 907, 970, 1003, 1004, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1025], "dens": [12, 55, 165, 176, 217, 314, 315, 322, 358, 381, 385, 397, 402, 404, 406, 429, 432, 433, 435, 450, 453, 482, 509, 510, 520, 521, 530, 552, 571, 572, 593, 594, 615, 638, 643, 644, 645, 652, 654, 658, 659, 662, 663, 664, 673, 674, 675, 678, 679, 745, 746, 752, 764, 775, 841, 842, 849, 856, 857, 859, 861, 862, 864, 873, 874, 875, 876, 877, 884, 885, 886, 887, 889, 890, 922, 938, 941, 957, 960, 963, 964, 967, 968, 970, 973, 977, 979, 980, 981, 982, 983, 1009, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025], "eigen_solv": [12, 44, 46, 66, 219, 220, 402, 438, 448, 521, 674, 675, 677, 679, 681, 964, 1010, 1019, 1022, 1023, 1024], "arpack": [12, 19, 44, 46, 66, 220, 402, 437, 438, 439, 448, 521, 527, 530, 674, 675, 677, 679, 681, 964, 1015, 1016, 1021], "don": [12, 54, 70, 121, 168, 220, 234, 258, 278, 321, 327, 331, 338, 343, 344, 358, 366, 372, 374, 376, 378, 380, 383, 384, 398, 405, 632, 638, 812, 892, 893, 894, 895, 931, 956, 963, 966, 968, 971, 973, 981, 990, 1002, 1013, 1018, 1025], "control": [12, 16, 61, 99, 100, 116, 136, 155, 157, 182, 199, 206, 230, 231, 259, 261, 280, 311, 313, 348, 350, 351, 358, 359, 365, 368, 372, 374, 377, 380, 383, 385, 388, 391, 396, 397, 400, 401, 402, 403, 406, 407, 420, 426, 435, 440, 457, 458, 464, 517, 522, 523, 524, 525, 526, 529, 531, 532, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 579, 580, 582, 600, 605, 611, 613, 618, 620, 625, 627, 628, 632, 633, 635, 636, 637, 638, 640, 641, 642, 658, 660, 662, 663, 668, 669, 673, 678, 687, 695, 780, 781, 782, 784, 785, 786, 787, 788, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 810, 811, 814, 815, 818, 841, 842, 863, 865, 876, 877, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 898, 933, 954, 956, 963, 964, 966, 967, 968, 970, 973, 974, 977, 979, 981, 982, 983, 987, 988, 989, 1000, 1004, 1009, 1011, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "neighbor": [12, 31, 39, 44, 47, 60, 128, 131, 138, 162, 163, 220, 221, 223, 227, 235, 236, 282, 283, 284, 285, 287, 288, 289, 291, 292, 312, 314, 315, 343, 361, 364, 369, 381, 385, 388, 397, 403, 404, 405, 408, 411, 419, 427, 430, 431, 434, 436, 438, 443, 444, 447, 449, 482, 488, 490, 549, 556, 588, 593, 594, 613, 614, 617, 674, 675, 676, 677, 678, 679, 682, 766, 782, 810, 844, 845, 864, 880, 888, 941, 968, 973, 988, 989, 996, 1001, 1003, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1016], "node": [12, 41, 120, 124, 182, 310, 348, 352, 380, 381, 397, 399, 402, 404, 427, 428, 431, 449, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 636, 640, 642, 668, 669, 678, 824, 825, 892, 893, 894, 895, 896, 898, 926, 935, 970, 972, 973, 974, 983, 1012, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024], "plane": [12, 210, 232, 284, 329, 332, 334, 335, 340, 369, 438, 448, 961, 963, 982, 1000], "node_position_model": 12, "locallylinearembed": [12, 219, 220, 221, 314, 674, 676, 678, 964, 970, 1014, 1015, 1023, 1024, 1025], "n_neighbor": [12, 44, 62, 67, 131, 162, 219, 220, 221, 223, 227, 236, 278, 280, 281, 284, 285, 286, 287, 290, 305, 310, 312, 343, 404, 438, 588, 593, 594, 614, 674, 675, 677, 679, 682, 826, 827, 828, 830, 832, 833, 837, 879, 880, 957, 964, 970, 973, 980, 1016, 1023, 1025], "output": [12, 14, 16, 25, 27, 37, 53, 59, 98, 108, 113, 119, 120, 130, 134, 138, 139, 150, 158, 162, 163, 165, 168, 194, 226, 240, 241, 246, 252, 256, 258, 261, 265, 267, 268, 278, 301, 304, 306, 307, 310, 313, 314, 344, 345, 347, 352, 353, 365, 366, 367, 369, 372, 374, 378, 380, 383, 384, 385, 395, 396, 397, 398, 400, 401, 404, 405, 406, 413, 417, 419, 423, 427, 428, 429, 431, 432, 433, 435, 436, 438, 445, 446, 448, 449, 450, 451, 452, 453, 454, 468, 469, 470, 471, 474, 477, 478, 479, 480, 481, 482, 483, 489, 491, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 597, 613, 614, 615, 616, 617, 618, 619, 621, 624, 625, 626, 627, 628, 632, 633, 636, 638, 639, 640, 643, 644, 646, 647, 648, 649, 652, 653, 654, 657, 659, 660, 662, 664, 665, 667, 668, 669, 670, 674, 675, 676, 678, 680, 682, 685, 686, 699, 700, 707, 708, 709, 711, 713, 720, 727, 730, 731, 733, 735, 736, 737, 738, 739, 741, 746, 752, 757, 770, 773, 780, 781, 784, 785, 786, 787, 788, 794, 796, 797, 798, 799, 800, 801, 802, 805, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 827, 828, 829, 833, 834, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 872, 873, 876, 877, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 905, 907, 910, 921, 922, 934, 954, 956, 957, 959, 961, 963, 964, 967, 968, 969, 970, 971, 974, 977, 982, 989, 993, 994, 996, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "edg": [12, 26, 46, 66, 98, 120, 222, 265, 380, 385, 394, 397, 399, 439, 547, 548, 571, 572, 574, 575, 577, 780, 821, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 849, 897, 977, 980, 991, 1015, 1017, 1020, 1023], "displai": [12, 25, 27, 34, 37, 46, 48, 60, 71, 81, 82, 85, 86, 89, 95, 116, 121, 126, 127, 130, 165, 168, 169, 183, 185, 202, 216, 226, 227, 236, 241, 247, 255, 259, 260, 265, 272, 288, 306, 311, 312, 334, 349, 358, 372, 375, 379, 381, 388, 398, 402, 405, 406, 424, 450, 453, 454, 482, 527, 550, 616, 617, 618, 644, 673, 683, 684, 686, 687, 688, 699, 704, 767, 774, 782, 788, 796, 810, 844, 845, 857, 859, 864, 882, 889, 896, 897, 898, 912, 933, 954, 967, 971, 987, 1004, 1018, 1020, 1021, 1023, 1024, 1025], "strength": [12, 130, 157, 198, 202, 259, 310, 358, 400, 404, 432, 553, 554, 629, 634, 635, 638, 644, 645, 655, 658, 659, 660, 661, 662, 664, 666, 673, 768, 841, 842, 884, 885, 889, 890, 956, 963, 970, 973, 981, 982], "plan": [12, 366, 370, 372, 373, 386, 977, 1012], "fair": [12, 404, 676, 680, 813, 968, 991], "crucial": [12, 167, 253, 358, 371, 372, 386, 397, 407, 982], "challeng": [12, 130, 150, 169, 177, 216, 227, 360, 367, 368, 397, 399, 448, 458, 967, 973, 991, 993], "overlap": [12, 37, 55, 110, 124, 146, 222, 245, 344, 370, 394, 397, 401, 404, 405, 573, 775, 776, 783, 787, 789, 790, 791, 792, 800, 964, 977, 1015], "heurist": [12, 14, 122, 343, 359, 397, 406, 435, 438, 447, 448, 494, 495, 523, 525, 532, 662, 663, 664, 677, 681, 785, 786, 886, 887, 888, 889, 890, 909, 964, 965, 970, 981, 983, 991, 1000, 1009, 1010, 1014, 1018, 1021, 1022], "direct": [12, 85, 86, 90, 95, 97, 101, 104, 147, 204, 243, 249, 255, 287, 297, 305, 330, 335, 370, 372, 373, 376, 380, 386, 388, 397, 400, 402, 405, 406, 438, 448, 457, 458, 464, 520, 527, 535, 574, 575, 577, 588, 627, 674, 833, 961, 963, 968, 970, 972, 988, 1001, 1009, 1012], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 58, 61, 82, 89, 95, 98, 154, 163, 189, 210, 214, 235, 282, 284, 287, 288, 292, 297, 329, 330, 334, 335, 336, 340, 361, 364, 369, 381, 385, 397, 403, 404, 408, 411, 419, 430, 432, 434, 436, 438, 443, 447, 448, 482, 488, 490, 593, 594, 613, 614, 616, 617, 621, 674, 675, 677, 678, 682, 775, 776, 782, 810, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 844, 845, 849, 864, 941, 964, 973, 982, 988, 989, 996, 1004, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1021], "along": [12, 13, 56, 59, 66, 86, 117, 123, 185, 198, 232, 262, 307, 310, 344, 345, 354, 376, 378, 380, 381, 385, 388, 391, 394, 402, 404, 405, 406, 407, 409, 519, 536, 573, 597, 598, 616, 632, 633, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 662, 664, 667, 668, 669, 670, 671, 672, 764, 765, 775, 782, 796, 853, 854, 857, 858, 861, 862, 863, 864, 869, 870, 871, 873, 874, 875, 900, 923, 942, 948, 956, 963, 970, 977, 980, 991, 1009, 1014, 1015, 1017, 1021, 1022], "linecollect": [12, 222, 230, 618], "facecolor": [12, 16, 26, 34, 45, 60, 95, 102, 112, 139, 158, 219, 234, 258, 285, 302, 328, 331, 334, 335, 337], "partial_correl": 12, "precision_": [12, 82, 455, 456, 457, 458, 459, 460, 461, 462], "sqrt": [12, 80, 81, 82, 98, 101, 105, 114, 136, 177, 179, 222, 224, 238, 243, 244, 245, 248, 249, 258, 335, 397, 404, 405, 407, 449, 455, 456, 457, 458, 459, 460, 461, 462, 524, 526, 533, 543, 544, 545, 546, 550, 551, 605, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 685, 716, 748, 749, 754, 864, 877, 892, 893, 894, 895, 959, 963, 964, 967, 969, 979, 1023], "diag": [12, 82, 158, 245, 248, 402, 407, 518, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 780, 781, 963, 1024], "newaxi": [12, 13, 19, 24, 42, 82, 105, 111, 151, 179, 188, 194, 199, 200, 201, 203, 204, 215, 230, 232, 272, 283, 290, 338, 350, 351, 394, 522, 963], "ab": [12, 17, 40, 75, 99, 106, 112, 120, 130, 143, 147, 171, 185, 189, 209, 211, 214, 216, 222, 258, 300, 328, 340, 397, 524, 526, 533, 613, 731, 824, 825, 859, 967], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 60, 61, 102], "start_idx": [12, 222], "end_idx": [12, 222], "sequenc": [12, 119, 186, 222, 374, 385, 398, 401, 402, 404, 405, 489, 498, 547, 548, 555, 556, 567, 568, 574, 575, 577, 632, 782, 785, 793, 810, 868, 924, 925, 930, 938, 941, 987, 1009, 1012, 1014, 1015], "line0": [12, 222], "linen": [12, 222], "x0": [12, 34, 190, 207, 222, 300, 327, 385, 417, 450, 553, 554, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 847, 848, 849, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865], "y0": [12, 222], "y1": [12, 91, 112, 222, 495, 702, 749, 968, 969], "xm": [12, 222], "ym": [12, 222], "segment": [12, 36, 47, 68, 165, 222, 230, 367, 380, 397, 405, 438, 448, 494, 495, 677, 840, 967, 987, 991, 1017, 1019, 1021], "stop": [12, 17, 44, 62, 108, 116, 134, 155, 157, 165, 169, 176, 200, 217, 311, 372, 374, 380, 381, 385, 397, 402, 404, 406, 426, 427, 429, 431, 433, 435, 438, 440, 448, 449, 457, 458, 464, 468, 469, 470, 482, 490, 494, 495, 501, 506, 518, 522, 523, 524, 525, 526, 529, 531, 532, 533, 539, 540, 543, 544, 545, 546, 547, 548, 550, 551, 557, 574, 575, 577, 588, 603, 613, 630, 631, 632, 634, 635, 638, 642, 644, 645, 652, 653, 654, 655, 657, 662, 663, 664, 666, 677, 678, 681, 700, 780, 781, 810, 841, 842, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 926, 941, 956, 963, 971, 972, 982, 983, 988, 989, 991, 1004, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025], "lc": [12, 222, 230], "zorder": [12, 34, 58, 97, 127, 139, 151, 159, 188, 196, 220, 222, 230, 233, 243, 311, 334, 335], "hot_r": [12, 300], "norm": [12, 13, 14, 17, 34, 40, 54, 98, 101, 153, 156, 177, 182, 184, 189, 222, 243, 244, 245, 247, 249, 255, 259, 283, 300, 330, 344, 378, 381, 385, 397, 405, 406, 428, 429, 433, 445, 446, 450, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 475, 517, 520, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 575, 576, 577, 583, 629, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 658, 660, 662, 664, 667, 670, 671, 672, 676, 678, 679, 680, 755, 821, 856, 871, 884, 886, 889, 949, 950, 960, 963, 965, 967, 977, 981, 1012, 1014, 1016, 1020], "set_arrai": [12, 222, 230], "set_linewidth": [12, 222, 230], "add_collect": [12, 222, 230], "index": [12, 14, 17, 30, 37, 38, 39, 40, 41, 49, 50, 58, 71, 72, 115, 117, 121, 144, 147, 155, 162, 167, 168, 169, 170, 198, 216, 237, 240, 244, 245, 249, 253, 256, 257, 258, 259, 261, 269, 270, 278, 300, 305, 306, 307, 314, 318, 319, 344, 345, 367, 369, 370, 372, 374, 376, 381, 383, 385, 394, 398, 401, 402, 404, 405, 412, 429, 433, 434, 435, 436, 437, 439, 440, 443, 445, 446, 450, 453, 489, 495, 543, 544, 545, 546, 550, 551, 552, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 603, 618, 619, 626, 683, 690, 691, 698, 702, 704, 716, 723, 742, 764, 765, 771, 773, 777, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 810, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 857, 892, 893, 894, 895, 925, 938, 941, 946, 947, 967, 969, 970, 971, 981, 983, 987, 1000, 1002, 1009, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "dx": [12, 13, 512, 685], "dy": [12, 685], "this_dx": 12, "argmin": [12, 122, 257, 374, 399, 517, 523, 531, 532, 671, 764, 765, 983], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 62, 102, 227, 243, 294, 302], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 56, 60, 67, 90, 91, 92, 102, 112, 119, 126, 128, 129, 131, 132, 139, 142, 151, 152, 154, 158, 169, 181, 190, 200, 207, 210, 211, 212, 231, 232, 233, 234, 243, 246, 258, 261, 272, 281, 284, 285, 286, 289, 294, 302, 303, 305, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 340, 349, 350, 351, 617], "ptp": 12, "453": [12, 15], "plot_stock_market": [12, 15], "parallel": [13, 108, 114, 116, 119, 134, 165, 169, 200, 259, 311, 312, 314, 335, 352, 357, 364, 372, 373, 375, 376, 383, 385, 398, 406, 408, 409, 423, 430, 432, 434, 435, 436, 438, 443, 444, 447, 450, 453, 458, 481, 517, 519, 520, 521, 523, 525, 527, 528, 529, 531, 532, 534, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 575, 580, 588, 596, 618, 620, 625, 644, 674, 675, 676, 677, 678, 679, 680, 759, 763, 766, 782, 785, 786, 788, 793, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 843, 846, 879, 880, 935, 937, 988, 997, 1002, 1004, 1009, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1025], "acquir": [13, 118, 260, 1021], "angl": [13, 34, 98, 147, 243, 244, 245, 248, 249, 369, 402, 517, 523, 525, 528, 529, 531, 532, 534, 636, 637, 638, 639, 640, 641, 642, 649, 650, 651, 664, 668, 669, 670, 671, 672, 678, 964, 965, 989, 1004, 1009], "Such": [13, 126, 150, 155, 167, 177, 182, 187, 199, 261, 343, 385, 386, 401, 402, 404, 541, 542, 642, 957, 967, 970, 977, 983, 1000, 1019, 1024], "ct": [13, 158, 240, 398, 450, 452, 453], "cellular": 13, "materi": [13, 386, 567, 874, 875, 986], "haar": 13, "wavelet": [13, 105, 402], "sparsiti": [13, 82, 165, 176, 182, 191, 213, 214, 217, 233, 344, 358, 385, 399, 402, 404, 406, 487, 488, 513, 517, 523, 524, 525, 526, 529, 531, 532, 533, 632, 638, 643, 644, 662, 664, 707, 708, 709, 853, 859, 864, 869, 960, 963, 970, 977, 996, 1001, 1011], "oper": [13, 19, 158, 165, 233, 251, 255, 265, 274, 345, 358, 359, 369, 370, 372, 375, 378, 383, 385, 386, 388, 391, 393, 401, 402, 404, 405, 406, 410, 434, 447, 454, 461, 468, 469, 470, 471, 490, 519, 520, 527, 537, 538, 552, 558, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 602, 607, 610, 616, 621, 629, 644, 675, 679, 688, 692, 693, 694, 712, 759, 766, 767, 773, 774, 801, 810, 813, 824, 825, 847, 851, 856, 867, 868, 882, 889, 892, 923, 935, 940, 963, 970, 977, 982, 987, 991, 1000, 1013, 1015, 1016, 1017, 1019, 1020, 1025], "fidel": 13, "penal": [13, 30, 82, 130, 182, 187, 191, 198, 214, 216, 305, 338, 397, 399, 402, 406, 455, 456, 457, 458, 459, 460, 461, 462, 464, 633, 638, 639, 647, 649, 662, 691, 701, 719, 771, 778, 857, 884, 891, 963, 967, 969, 971, 981, 982, 1000], "account": [13, 55, 97, 104, 155, 162, 168, 216, 258, 287, 338, 340, 344, 358, 368, 372, 385, 386, 391, 397, 400, 401, 402, 404, 405, 449, 553, 554, 613, 614, 616, 618, 619, 635, 659, 665, 690, 693, 713, 714, 715, 723, 728, 741, 768, 769, 772, 773, 783, 787, 800, 858, 959, 961, 965, 967, 968, 969, 970, 977, 981, 983, 1014, 1016, 1017, 1018, 1021, 1022, 1024], "call": [13, 17, 46, 48, 50, 54, 71, 92, 115, 122, 144, 150, 154, 156, 158, 159, 167, 169, 186, 198, 199, 216, 237, 239, 240, 258, 259, 267, 272, 273, 278, 280, 305, 307, 312, 313, 343, 344, 345, 352, 358, 359, 360, 367, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 395, 397, 398, 399, 400, 401, 402, 404, 405, 407, 409, 418, 426, 429, 432, 433, 435, 436, 437, 438, 439, 440, 443, 446, 448, 450, 451, 454, 455, 460, 468, 469, 470, 474, 477, 478, 481, 483, 489, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 563, 568, 569, 571, 572, 574, 575, 577, 583, 588, 593, 594, 596, 597, 600, 603, 606, 613, 614, 615, 616, 617, 618, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 675, 676, 677, 678, 679, 680, 681, 683, 685, 686, 687, 690, 717, 727, 740, 756, 759, 763, 764, 765, 766, 776, 780, 781, 782, 784, 785, 786, 787, 788, 794, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 833, 835, 840, 841, 842, 843, 844, 847, 848, 849, 851, 853, 854, 856, 861, 864, 865, 868, 873, 874, 875, 876, 877, 881, 884, 885, 886, 887, 889, 890, 893, 895, 911, 915, 920, 921, 933, 934, 935, 938, 941, 951, 956, 957, 959, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 975, 977, 979, 980, 982, 983, 987, 991, 993, 997, 1000, 1001, 1002, 1004, 1006, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "algorithm": [13, 17, 18, 22, 29, 36, 37, 42, 43, 45, 46, 56, 57, 61, 62, 66, 68, 79, 85, 95, 97, 109, 110, 111, 112, 116, 165, 174, 185, 187, 201, 214, 221, 223, 226, 230, 236, 241, 244, 245, 246, 249, 255, 258, 267, 278, 284, 285, 287, 291, 300, 302, 305, 310, 311, 312, 315, 329, 343, 344, 354, 358, 360, 365, 366, 367, 368, 369, 372, 373, 374, 375, 380, 381, 384, 385, 387, 393, 394, 396, 397, 399, 400, 401, 402, 404, 405, 407, 408, 409, 410, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 455, 460, 461, 464, 468, 469, 470, 474, 489, 497, 498, 499, 500, 501, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 531, 532, 533, 534, 539, 540, 541, 542, 545, 546, 549, 577, 589, 590, 596, 597, 621, 623, 625, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 660, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 690, 691, 694, 703, 705, 720, 722, 728, 759, 763, 764, 776, 778, 780, 781, 812, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 840, 845, 849, 851, 864, 868, 880, 884, 885, 886, 887, 888, 889, 890, 892, 893, 904, 920, 921, 923, 932, 936, 942, 957, 959, 962, 964, 965, 967, 969, 972, 973, 977, 980, 981, 982, 986, 987, 988, 989, 991, 993, 996, 997, 999, 1001, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "computation": [13, 78, 95, 116, 122, 130, 150, 278, 343, 357, 373, 396, 397, 398, 401, 402, 404, 407, 524, 618, 619, 657, 748, 782, 784, 785, 786, 796, 807, 963, 964, 966, 974, 975, 979, 1001, 1004, 1013], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 68, 79, 94, 96, 97, 107, 116, 123, 128, 133, 141, 148, 149, 160, 165, 170, 180, 182, 184, 186, 189, 196, 213, 218, 221, 225, 226, 230, 241, 245, 251, 253, 255, 274, 276, 294, 302, 304, 305, 310, 312, 323, 327, 342, 344, 346, 354, 367, 369, 385, 395, 399, 400, 402, 406, 423, 424, 429, 432, 433, 435, 474, 490, 498, 500, 501, 508, 511, 527, 535, 536, 539, 550, 551, 567, 568, 574, 575, 576, 577, 592, 594, 596, 597, 601, 608, 611, 617, 625, 629, 644, 658, 674, 675, 676, 677, 678, 690, 723, 728, 764, 773, 782, 785, 788, 796, 798, 810, 819, 822, 826, 841, 845, 853, 854, 856, 860, 861, 862, 864, 869, 870, 871, 872, 873, 874, 875, 884, 886, 887, 889, 890, 892, 956, 961, 964, 967, 969, 970, 973, 982, 1006], "l2": [13, 30, 40, 82, 85, 165, 176, 182, 183, 189, 198, 209, 213, 214, 216, 217, 259, 278, 300, 322, 343, 344, 374, 381, 383, 397, 399, 402, 405, 427, 431, 436, 443, 510, 524, 526, 533, 544, 547, 548, 551, 575, 576, 577, 629, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 658, 662, 664, 666, 667, 672, 673, 674, 720, 735, 746, 747, 763, 764, 765, 796, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 841, 842, 856, 864, 871, 884, 885, 889, 890, 891, 893, 895, 950, 956, 960, 963, 965, 970, 971, 977, 981, 983, 1000, 1002, 1011, 1013, 1014, 1016, 1018], "produc": [13, 25, 26, 44, 57, 70, 98, 123, 124, 125, 126, 182, 264, 297, 321, 354, 367, 368, 372, 374, 377, 385, 386, 397, 398, 401, 402, 404, 426, 429, 432, 438, 505, 522, 545, 549, 567, 574, 579, 580, 618, 619, 784, 785, 786, 794, 799, 802, 805, 849, 859, 886, 889, 958, 959, 963, 965, 966, 967, 970, 973, 974, 978, 980, 981, 982, 993, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 55, 60, 62, 66, 73, 80, 94, 95, 100, 107, 110, 112, 115, 118, 128, 163, 165, 169, 170, 174, 176, 199, 217, 220, 234, 245, 258, 261, 267, 268, 300, 302, 305, 312, 321, 325, 330, 334, 335, 341, 343, 354, 358, 368, 369, 374, 377, 380, 383, 385, 395, 397, 398, 399, 402, 404, 405, 407, 450, 498, 505, 519, 524, 526, 527, 533, 535, 567, 574, 575, 577, 596, 617, 624, 632, 633, 659, 662, 663, 676, 680, 710, 717, 730, 731, 733, 738, 775, 801, 816, 817, 843, 844, 886, 888, 889, 894, 895, 956, 957, 959, 961, 963, 964, 966, 973, 974, 977, 981, 982, 998, 1000, 1001, 1009, 1012, 1014, 1015, 1019, 1021, 1022, 1025], "central": [13, 200, 397, 973, 987], "emmanuel": [13, 66, 1009, 1016, 1017, 1018], "gouillart": [13, 66, 1009], "nsup": 13, "ndimag": [13, 46, 47, 54, 297, 1001], "_weight": [13, 216], "orig": [13, 285], "floor_x": 13, "floor": 13, "astyp": [13, 37, 41, 44, 45, 53, 60, 62, 66, 81, 102, 120, 122, 139, 167, 188, 189, 216, 222, 233, 236, 269, 278, 307, 405, 957, 963, 1016], "hstack": [13, 33, 34, 42, 132, 143, 224, 235, 253, 333, 401, 843], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 139, 334], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 301, 333, 621], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 122, 132, 344, 824, 825], "mask": [13, 42, 66, 118, 198, 206, 256, 257, 322, 381, 385, 398, 404, 455, 460, 547, 548, 567, 571, 572, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 615, 616, 618, 619, 635, 657, 782, 785, 786, 796, 939, 957, 974, 1009, 1012, 1014, 1015, 1017, 1019], "logical_and": [13, 123], "proj_oper": 13, "coo_matrix": [13, 184, 438, 571, 572, 938, 941], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 58, 62, 103, 113, 127, 129, 142, 177, 182, 221, 222, 227, 233, 272, 290, 311, 312, 322, 323, 337, 338, 344, 350, 351, 381, 530, 690, 691, 701, 742, 766, 771, 876, 877, 879, 880, 881, 979, 993, 1009, 1020, 1021], "gaussian_filt": [13, 46, 47, 54, 1001], "sigma": [13, 46, 47, 54, 80, 103, 123, 256, 258, 394, 399, 402, 404, 600, 635, 961, 963, 965, 969, 972, 1001], "logical_xor": [13, 154, 336], "binary_eros": 13, "128": [13, 14, 198, 358, 522], "proj": [13, 635], "randn": [13, 33, 34, 39, 54, 65, 66, 80, 81, 98, 103, 126, 142, 150, 154, 167, 170, 187, 192, 193, 197, 211, 212, 215, 244, 247, 248, 253, 265, 267, 268, 272, 284, 285, 307, 311, 312, 329, 335, 336, 338, 340, 374, 377, 629, 656, 658, 664, 803, 887, 890], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 54, 58, 71, 74, 78, 82, 87, 103, 116, 119, 120, 122, 123, 135, 140, 141, 145, 147, 148, 168, 169, 176, 182, 186, 198, 200, 216, 217, 245, 246, 248, 251, 255, 258, 259, 260, 262, 264, 267, 272, 273, 274, 282, 297, 299, 301, 306, 308, 310, 312, 321, 330, 338, 361, 367, 374, 375, 381, 383, 384, 385, 391, 392, 395, 398, 399, 402, 404, 405, 406, 407, 423, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 479, 487, 488, 490, 501, 527, 553, 554, 561, 579, 580, 583, 588, 592, 595, 628, 629, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 658, 659, 660, 661, 662, 664, 665, 667, 668, 669, 670, 671, 672, 687, 688, 692, 699, 713, 726, 770, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 818, 844, 845, 849, 864, 865, 882, 884, 886, 889, 927, 966, 967, 970, 971, 975, 977, 982, 983, 987, 988, 989, 991, 993, 996, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "lassocv": [13, 130, 136, 168, 182, 187, 404, 406, 637, 638, 640, 641, 642, 649, 670, 963, 997, 1009, 1012, 1016, 1019, 1020, 1022, 1023], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 58, 82, 89, 95, 98, 154, 157, 165, 176, 189, 214, 217, 230, 235, 267, 282, 290, 297, 319, 330, 336, 407, 621, 631, 639, 649, 658, 670, 686, 693, 827, 835, 845, 859, 863, 958, 963, 967, 977, 1016, 1021], "133": [13, 56, 60, 68, 110, 247, 250], "wspace": [13, 14, 39, 44, 45, 62, 80, 95, 110, 112, 198, 216, 227, 243, 245, 246, 249, 283, 291, 319, 327], "656": [13, 15, 367], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 72, 378, 396, 405, 521, 524, 530, 533, 1003, 1004, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "latentdirichletalloc": [14, 360, 377, 402, 987, 1014, 1016, 1023, 1024], "corpu": [14, 344, 345, 367, 402, 574, 575, 576, 577, 1002, 1010], "frobeniu": [14, 98, 429, 433, 445, 455, 456, 457, 458, 459, 460, 461, 462, 517, 523, 524, 526, 531, 532, 533, 963, 1016], "kullback": [14, 219, 402, 524, 526, 533, 678, 964, 1016], "leibler": [14, 219, 402, 524, 526, 533, 678, 964, 1016], "diverg": [14, 122, 219, 224, 283, 524, 526, 533, 678, 840, 964, 966, 967, 972, 974, 1016, 1017, 1022], "probabilist": [14, 27, 30, 82, 94, 107, 149, 150, 153, 157, 160, 165, 343, 385, 395, 403, 404, 423, 459, 462, 518, 520, 521, 527, 545, 574, 575, 596, 608, 629, 631, 662, 689, 726, 782, 806, 851, 886, 887, 889, 890, 960, 961, 963, 966, 967, 972, 977, 982, 983, 987, 991, 1009, 1012, 1016], "semant": [14, 343, 344, 385, 530, 1002, 1003, 1004, 1011], "runnabl": [14, 376, 377], "coupl": [14, 52, 53, 55, 220, 366, 367, 394, 395, 397, 406, 575, 890, 956, 982], "ten": [14, 19, 110, 116, 147, 220, 249, 367, 369, 404, 506, 889, 1018], "polynomi": [14, 162, 165, 173, 175, 176, 198, 204, 217, 238, 258, 272, 312, 313, 327, 334, 337, 364, 368, 438, 477, 606, 625, 626, 627, 629, 658, 750, 759, 760, 810, 845, 854, 856, 859, 863, 884, 886, 887, 888, 889, 890, 962, 982, 989, 1004, 1021, 1022], "lda": [14, 33, 34, 94, 107, 165, 287, 354, 369, 393, 490, 522, 527, 535, 536, 833, 987, 989, 1003, 1004, 1014], "proport": [14, 26, 40, 146, 184, 198, 205, 211, 227, 261, 285, 288, 340, 358, 367, 395, 397, 399, 401, 402, 404, 405, 424, 425, 432, 455, 460, 501, 535, 536, 541, 543, 545, 546, 547, 548, 549, 550, 569, 570, 574, 577, 613, 618, 644, 645, 652, 653, 654, 660, 661, 662, 664, 682, 687, 698, 783, 784, 785, 786, 799, 802, 810, 830, 841, 842, 858, 884, 885, 886, 889, 890, 892, 894, 896, 898, 910, 956, 966, 967, 970, 973, 981, 982, 983, 1014], "114": [14, 41, 68, 315, 1009], "tf": [14, 19, 231, 343, 344, 345, 367, 402, 507, 530, 574, 575, 576, 577, 823, 831, 856, 956, 965, 969, 977, 987, 1002], "idf": [14, 19, 231, 343, 344, 345, 367, 402, 507, 530, 574, 575, 576, 577, 823, 831, 856, 956, 965, 969, 977, 1002, 1009], "263": 14, "261": 14, "2000": [14, 26, 40, 50, 75, 96, 103, 121, 174, 246, 249, 258, 294, 314, 344, 367, 369, 397, 398, 404, 409, 438, 448, 519, 520, 545, 675, 677, 679, 728, 773, 780, 830, 860, 872, 964, 967, 973, 979, 993, 1001], "094": [14, 221, 458], "minibatchnmf": [14, 360, 402, 1023, 1025], "batch_siz": [14, 19, 42, 64, 95, 98, 99, 344, 402, 435, 520, 522, 523, 524, 525, 532, 840, 841, 842, 924, 925, 933, 1010, 1017, 1020, 1022, 1023], "086": [14, 15], "243": [14, 49, 68, 570], "789": [14, 143, 404], "ensta": [14, 17, 37, 48, 61, 198, 216, 220, 259, 261, 343, 344, 345], "chyi": [14, 1012, 1013, 1014, 1015, 1016], "kwei": [14, 1012, 1013, 1014, 1015, 1016], "yau": [14, 1012, 1013, 1014, 1015, 1016], "chyikwei": 14, "tfidfvector": [14, 19, 70, 259, 343, 367, 402, 405, 475, 574, 575, 576, 1009, 1011, 1017, 1018, 1019, 1022, 1023], "countvector": [14, 322, 345, 367, 377, 398, 402, 405, 475, 522, 568, 575, 576, 577, 1002, 1009, 1011, 1014, 1017, 1018, 1019, 1020, 1021, 1022], "fetch_20newsgroup": [14, 19, 70, 259, 322, 343, 344, 345, 367, 475, 1002, 1014, 1019], "n_top_word": 14, "init": [14, 42, 45, 58, 59, 61, 64, 169, 178, 219, 220, 222, 223, 224, 244, 246, 278, 344, 375, 380, 397, 402, 404, 429, 433, 435, 437, 439, 445, 446, 524, 526, 533, 534, 545, 546, 618, 619, 676, 678, 680, 833, 964, 1009, 1018, 1021, 1023, 1024], "nndsvda": [14, 402, 524, 526, 533, 1018, 1021], "plot_top_word": 14, "feature_nam": [14, 19, 106, 117, 124, 127, 147, 168, 170, 171, 207, 237, 281, 300, 310, 311, 312, 327, 343, 349, 365, 367, 377, 398, 476, 477, 478, 482, 486, 487, 488, 490, 491, 496, 568, 617, 618, 619, 896, 897, 898, 975, 983, 1025], "flatten": [14, 32, 222, 232, 256, 304, 327, 339, 378, 488, 555, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 833], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 122, 124, 170, 171, 198, 216, 310, 318, 319, 343, 344, 367, 975], "top_featur": 14, "barh": [14, 124, 162, 163, 167, 168, 170, 171, 240, 307, 343, 344, 345], "fontdict": [14, 39], "invert_yaxi": [14, 163, 345], "labels": [14, 304], "set_vis": [14, 282, 288, 300], "filter": [14, 46, 47, 204, 216, 256, 258, 280, 343, 374, 378, 381, 396, 397, 405, 434, 474, 475, 489, 574, 577, 581, 582, 583, 584, 759, 819, 913, 932, 969, 970, 999, 1002, 1019], "useless": [14, 119, 261, 378, 406, 501, 514, 644, 698, 963, 977, 1018], "earli": [14, 44, 62, 108, 110, 116, 119, 134, 165, 176, 217, 311, 385, 404, 427, 431, 435, 449, 482, 490, 501, 506, 522, 523, 524, 525, 532, 539, 540, 545, 546, 547, 548, 557, 613, 631, 642, 652, 653, 654, 662, 664, 678, 810, 841, 842, 941, 964, 970, 977, 986, 988, 991, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024], "strip": [14, 216, 344, 358, 366, 367, 482], "header": [14, 70, 259, 343, 344, 367, 370, 405, 474, 475, 782, 785, 786, 796], "footer": [14, 70, 259, 343, 344, 367, 474, 475], "repli": [14, 343, 371, 372, 375], "common": [14, 17, 19, 98, 144, 147, 165, 166, 172, 253, 265, 312, 343, 345, 352, 358, 361, 366, 372, 374, 380, 383, 384, 387, 394, 395, 396, 397, 398, 401, 403, 406, 407, 451, 453, 482, 576, 618, 639, 658, 659, 687, 731, 738, 754, 797, 807, 810, 845, 847, 855, 856, 857, 862, 864, 869, 870, 872, 873, 874, 875, 923, 956, 957, 963, 970, 973, 977, 982, 983, 987, 988, 991, 993, 1004, 1009, 1017, 1019, 1020, 1024], "english": [14, 19, 70, 343, 344, 345, 377, 405, 574, 575, 577, 987, 988, 1002, 1022], "occur": [14, 70, 198, 216, 354, 372, 374, 380, 386, 394, 397, 399, 401, 405, 494, 495, 558, 567, 574, 576, 577, 613, 657, 781, 782, 785, 786, 788, 796, 806, 807, 808, 811, 909, 967, 969, 977, 1002, 1009, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 259, 322, 343, 344, 574, 577, 1020], "min_df": [14, 19, 70, 259, 322, 343, 344, 405, 574, 577, 1009, 1011, 1020], "max_featur": [14, 31, 114, 125, 235, 255, 270, 312, 404, 406, 541, 542, 543, 544, 545, 546, 549, 550, 551, 574, 577, 583, 892, 893, 894, 895, 956, 963, 1009, 1011, 1012, 1016, 1017, 1020, 1023], "stop_word": [14, 19, 343, 344, 405, 574, 575, 577], "tfidf": [14, 70, 322, 405, 577, 1002], "tf_vector": 14, "beta_loss": [14, 524, 526, 533, 1016], "alpha_w": [14, 402, 524, 526, 533, 1022], "00005": 14, "alpha_h": [14, 402, 524, 526, 533, 1022], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 168, 170, 313, 343, 344, 345, 367, 374, 385, 398, 405, 413, 417, 419, 428, 429, 431, 433, 435, 450, 453, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 552, 553, 554, 555, 556, 567, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 674, 675, 678, 828, 833, 836, 840, 843, 844, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 977, 1022, 1023, 1024, 1025], "solver": [14, 30, 33, 34, 46, 66, 165, 176, 187, 189, 190, 191, 198, 200, 213, 214, 216, 217, 294, 295, 296, 297, 307, 343, 378, 383, 385, 388, 393, 397, 409, 438, 448, 457, 458, 464, 488, 519, 521, 526, 527, 530, 533, 535, 632, 633, 634, 638, 639, 644, 645, 646, 647, 648, 649, 652, 654, 655, 656, 658, 660, 662, 666, 667, 670, 673, 674, 675, 677, 679, 681, 773, 796, 810, 815, 818, 841, 842, 886, 887, 888, 889, 890, 961, 964, 967, 971, 981, 982, 987, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "mu": [14, 80, 81, 258, 402, 410, 459, 461, 462, 465, 466, 467, 526, 533, 961, 963, 1016, 1019], "mbnmf": 14, "learning_method": [14, 377, 522], "learning_offset": [14, 522], "tf_feature_nam": 14, "plot_topics_extraction_with_nmf_lda": [14, 15], "208": [15, 278, 369], "execut": [15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 134, 140, 148, 160, 162, 164, 172, 175, 182, 187, 217, 225, 233, 241, 250, 263, 274, 277, 292, 298, 308, 316, 324, 341, 346, 353, 359, 372, 378, 391, 397, 402, 408, 429, 447, 782, 788, 796, 805, 806, 807, 808, 811, 829, 933, 934, 977, 980, 994, 1002, 1011, 1014, 1017], "auto_examples_appl": 15, "00": [15, 22, 28, 32, 35, 68, 76, 80, 83, 87, 93, 98, 107, 134, 140, 148, 155, 160, 164, 168, 169, 172, 175, 189, 216, 217, 225, 231, 241, 250, 256, 259, 274, 277, 292, 297, 298, 308, 316, 318, 319, 324, 341, 344, 346, 353, 366, 369, 378, 397, 404, 405, 699, 701, 773, 782, 796, 808, 893, 963, 967, 977, 979, 981, 1001], "09": [15, 35, 97, 105, 168, 231, 234, 250, 271, 297, 346, 397, 720, 822, 967, 977, 981], "07": [15, 22, 28, 105, 134, 168, 194, 216, 217, 267, 274, 305, 324, 341, 354, 367, 397, 517, 547, 548, 678, 967, 981], "real": [15, 31, 55, 57, 70, 74, 78, 80, 108, 134, 153, 168, 223, 236, 252, 264, 272, 282, 301, 302, 345, 358, 361, 365, 366, 369, 376, 378, 381, 383, 384, 385, 394, 395, 397, 399, 401, 402, 404, 405, 455, 475, 476, 479, 480, 481, 482, 483, 486, 487, 490, 496, 506, 537, 538, 539, 541, 542, 543, 544, 545, 546, 550, 551, 578, 580, 581, 582, 583, 584, 585, 586, 685, 690, 709, 713, 737, 740, 742, 770, 778, 779, 809, 810, 841, 842, 886, 887, 888, 889, 890, 892, 893, 895, 957, 958, 959, 964, 967, 969, 971, 972, 973, 983, 986, 1004, 1009, 1022], "svm_gui": [15, 16, 1000], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 81, 169, 322, 343, 344, 345, 367, 378, 396, 397, 399, 402, 775, 776, 780, 814, 896, 967, 968, 974, 987, 1002], "frontend": [16, 378], "mainli": [16, 27, 53, 113, 150, 267, 358, 374, 395, 597, 969, 974], "intend": [16, 57, 58, 99, 199, 343, 372, 373, 374, 379, 383, 401, 454, 568, 659, 685, 853, 854, 864, 882, 962, 963, 967, 971, 978], "didact": [16, 372, 988], "click": [16, 229, 238, 259, 311, 372, 380, 991, 993, 995], "region": [16, 25, 36, 47, 49, 53, 56, 66, 68, 131, 157, 165, 168, 198, 216, 227, 231, 232, 249, 303, 330, 369, 379, 385, 397, 404, 407, 434, 436, 442, 448, 573, 964, 967, 970, 973, 977, 981, 983, 1001], "induc": [16, 26, 56, 168, 182, 189, 191, 196, 199, 213, 233, 345, 394, 396, 402, 404, 407, 432, 435, 525, 529, 539, 543, 544, 545, 546, 550, 551, 552, 629, 711, 741, 857, 892, 893, 894, 895, 960, 967, 981, 1000], "mous": [16, 366], "button": [16, 372, 380, 1000], "prettenho": 16, "tkagg": 16, "backend": [16, 359, 385, 454, 882, 933, 935, 937, 967, 1012, 1017, 1018, 1019, 1020], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 34, 313, 361, 375, 376, 381, 385, 409, 423, 427, 431, 433, 435, 436, 443, 445, 464, 512, 519, 522, 523, 525, 532, 539, 540, 541, 542, 555, 556, 565, 566, 568, 613, 619, 624, 630, 631, 636, 637, 640, 641, 642, 644, 650, 651, 657, 678, 726, 741, 753, 763, 764, 765, 785, 786, 819, 820, 821, 823, 831, 843, 857, 886, 887, 888, 889, 890, 900, 915, 916, 918, 956, 957, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "contourset": 16, "tkinter": 16, "tk": 16, "dump_svmlight_fil": [16, 1009, 1010, 1014, 1024], "y_min": [16, 31, 34, 58, 90, 112, 119, 128, 139, 152, 232, 294, 302, 323, 334, 335, 621, 623], "y_max": [16, 31, 34, 58, 90, 112, 119, 128, 139, 152, 216, 232, 294, 302, 323, 334, 335, 621, 623], "x_min": [16, 31, 34, 52, 58, 90, 112, 119, 123, 128, 139, 152, 187, 232, 294, 302, 323, 334, 335], "x_max": [16, 31, 34, 52, 58, 90, 112, 119, 128, 139, 152, 232, 294, 302, 323, 334, 335], "notifi": [16, 558, 559, 560, 990, 1007, 1019], "regist": [16, 34, 182, 343, 378, 935, 937], "surfac": [16, 108, 134, 165, 190, 207, 326, 327, 347, 353, 404, 490, 539, 543, 550, 617, 749, 892, 898, 961, 966, 981, 982, 983], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 174, 337, 438, 521, 625, 626, 629, 760, 762, 886, 887, 888, 889, 890, 965, 982], "kernel_map": 16, "hasattr": [16, 44, 56, 62, 82, 119, 216, 231, 294, 302, 343, 385, 928, 1019], "decision_surfac": 16, "delta": [16, 400, 438], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 117, 136, 165, 251, 257, 259, 262, 274, 385, 401, 407, 488, 553, 613, 645, 651, 699, 782, 785, 786, 796, 810, 889, 956, 963, 967, 1016, 1017, 1018], "docstr": [16, 372, 374, 378, 385, 434, 447, 458, 685, 687, 911, 956, 967, 970, 971, 981, 1009, 1016, 1017, 1022, 1023], "set_xlim": [16, 31, 42, 60, 75, 80, 92, 115, 128, 163, 169, 196, 198, 203, 232, 243, 262, 264, 265, 283, 294, 300, 302, 303, 304, 305, 311, 339], "attributeerror": [16, 398, 545, 563, 928, 1001, 1018, 1019, 1021, 1025], "get_tk_widget": 16, "pack": [16, 381, 1017], "fill": [16, 34, 119, 136, 170, 253, 283, 349, 385, 398, 402, 501, 513, 524, 526, 533, 573, 616, 896, 898, 957, 970, 983], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 66, 101, 105, 113, 123, 151, 182, 208, 283, 288, 291, 311, 312, 395, 397, 398, 403, 409, 438, 451, 507, 519, 522, 601, 602, 608, 627, 744, 751, 761, 841, 842, 860, 961, 963, 965, 969, 970, 971, 980, 981, 982, 1000], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 216, 372, 378, 397, 522, 632, 638, 964, 988, 990, 1009, 1014, 1015, 1017, 1022, 1023, 1024], "isinst": [16, 119, 216, 385], "lineset": 16, "support_vector": [16, 328], "place": [16, 60, 228, 237, 282, 358, 370, 372, 373, 374, 377, 379, 386, 395, 405, 407, 427, 431, 432, 468, 469, 470, 501, 567, 576, 614, 616, 617, 753, 766, 780, 946, 947, 987, 1009, 1016, 1019, 1020, 1022], "circl": [16, 60, 100, 128, 129, 139, 224, 234, 285, 288, 295, 300, 302, 320, 351, 368, 376, 380, 397, 438, 448, 500, 508, 749, 982], "dash": [16, 33, 80, 110, 122, 132, 150, 153, 155, 168, 185, 190, 193, 199, 200, 207, 210, 211, 236, 258, 268, 332, 336, 981], "bone": [16, 211, 340], "rais": [16, 199, 234, 261, 304, 313, 372, 374, 376, 377, 378, 381, 383, 385, 391, 398, 401, 409, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 495, 519, 536, 545, 553, 559, 562, 563, 574, 575, 577, 589, 603, 615, 618, 621, 622, 657, 682, 684, 688, 695, 697, 698, 699, 700, 712, 714, 715, 723, 741, 763, 767, 768, 769, 772, 773, 774, 780, 781, 782, 785, 786, 788, 796, 806, 807, 808, 811, 816, 831, 833, 834, 839, 843, 848, 849, 857, 858, 862, 863, 864, 871, 887, 888, 889, 890, 899, 902, 904, 905, 907, 908, 925, 928, 951, 952, 953, 954, 967, 977, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "valueerror": [16, 234, 374, 378, 409, 454, 519, 563, 589, 603, 621, 657, 700, 816, 834, 843, 849, 863, 903, 907, 908, 952, 953, 954, 977, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 231, 358, 359, 370, 372, 376, 378, 380, 388, 405, 494, 987, 1002, 1011], "anchor": [16, 269], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 165, 176, 190, 207, 217, 234, 261, 325, 327, 330, 335, 341, 498, 617, 644, 645, 652, 654, 660, 661, 662, 663, 884, 886, 888, 889, 981, 982], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 376, 644, 645, 652, 654, 662, 663, 664, 841, 842, 884, 977], "add_opt": 16, "action": [16, 313, 343, 371, 375, 376, 388, 977, 1019], "store": [16, 32, 53, 54, 70, 72, 81, 90, 144, 158, 174, 184, 187, 220, 228, 237, 248, 263, 267, 318, 345, 352, 358, 366, 367, 372, 374, 379, 380, 381, 383, 385, 398, 400, 402, 404, 405, 407, 408, 424, 426, 430, 432, 436, 443, 455, 456, 459, 460, 461, 462, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 489, 494, 520, 521, 527, 535, 536, 541, 542, 549, 555, 556, 575, 596, 597, 613, 617, 618, 621, 624, 635, 636, 640, 646, 647, 648, 649, 652, 653, 659, 661, 662, 663, 664, 674, 675, 676, 678, 683, 684, 686, 687, 688, 766, 780, 781, 782, 788, 796, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 839, 855, 862, 864, 865, 879, 880, 881, 904, 905, 938, 941, 957, 959, 963, 970, 979, 982, 983, 987, 993, 1002, 1006, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "dest": [16, 315], "dump": [16, 17, 391, 473, 824, 825], "argv": [16, 231], "opt": [16, 370, 374], "arg": [16, 295, 373, 385, 402, 404, 411, 557, 558, 559, 560, 561, 562, 563, 564, 603, 685, 848, 963, 969, 970], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 322, 383], "classic": [17, 193, 223, 236, 243, 249, 369, 376, 399, 401, 402, 429, 433, 435, 445, 478, 486, 490, 496, 618, 619, 894, 895, 961, 963, 969, 977, 996, 1009, 1010, 1014, 1023], "graph": [17, 25, 39, 44, 46, 66, 67, 158, 219, 255, 278, 280, 321, 358, 372, 375, 385, 394, 399, 408, 427, 430, 431, 438, 439, 443, 448, 449, 457, 458, 464, 497, 571, 572, 674, 677, 678, 681, 767, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 839, 880, 964, 967, 970, 972, 980, 983, 987, 991, 998, 1001, 1009, 1016, 1017, 1019, 1022, 1024], "vertex": [17, 26, 397, 439, 1022], "en": [17, 24, 380, 386, 517, 523, 581, 622, 650, 654, 657, 671, 672, 681, 691, 826, 827, 832, 833, 834, 835, 862, 878, 892, 893, 963, 967, 982, 983], "wiki": [17, 24, 378, 380, 581, 622, 654, 657, 681, 691, 826, 827, 832, 833, 834, 835, 862, 878, 892, 893, 963, 983], "eigenvector_centr": 17, "webpag": [17, 174, 372], "pagerank": 17, "insid": [17, 19, 26, 169, 200, 258, 320, 330, 360, 366, 367, 374, 378, 397, 405, 574, 575, 577, 863, 935, 974, 991], "accord": [17, 24, 26, 37, 49, 78, 116, 122, 147, 151, 181, 198, 216, 231, 310, 344, 354, 372, 374, 383, 384, 385, 386, 394, 397, 399, 401, 402, 404, 405, 407, 423, 436, 438, 442, 446, 448, 451, 455, 490, 502, 503, 504, 511, 516, 518, 521, 522, 524, 526, 536, 539, 540, 547, 548, 549, 552, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 627, 628, 630, 631, 635, 644, 645, 656, 666, 677, 681, 720, 764, 765, 782, 783, 784, 785, 786, 789, 790, 791, 796, 805, 819, 820, 821, 822, 823, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 847, 854, 862, 874, 876, 877, 884, 885, 886, 887, 889, 890, 961, 963, 967, 969, 970, 977, 980, 981, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "tradit": [17, 55, 198, 213, 344, 360, 395, 404, 405, 618, 680, 963, 966, 977, 991], "power_iter": 17, "martinsson": [17, 521, 527, 921], "dbpedia": 17, "content": [17, 305, 343, 345, 367, 376, 378, 391, 396, 405, 472, 489, 494, 495, 574, 575, 577, 657, 898, 976, 991, 1002, 1010, 1019], "bz2": [17, 494, 495], "bz2file": 17, "pprint": [17, 123, 259, 367, 916], "randomized_svd": [17, 381, 437, 439, 518, 527, 530, 532, 1009, 1010, 1015, 1022, 1023, 1024], "urlopen": 17, "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 123, 162, 198, 296, 312, 357, 361, 375, 384, 404, 785, 786, 968, 985, 988, 991, 994, 1004, 1017, 1022, 1023], "wait": [17, 372, 376, 385, 652, 653, 654, 662, 664, 1021], "wb": 17, "index_map": 17, "setdefault": [17, 899], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 70, 259, 280, 310, 372, 376, 378, 380, 407, 413, 428, 429, 431, 433, 435, 450, 453, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 625, 626, 627, 628, 674, 675, 678, 788, 808, 828, 833, 836, 840, 844, 850, 876, 877, 1015, 1016, 1022, 1024], "get_redirect": 17, "transit": [17, 376, 1020], "malform": [17, 1013], "1000000": [17, 522], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 55, 66, 82, 98, 105, 117, 123, 168, 169, 194, 223, 230, 295, 300, 330, 343, 367, 374, 376, 384, 395, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 413, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 507, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 609, 613, 614, 615, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 780, 781, 782, 785, 786, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 942, 948, 956, 962, 970, 971, 977, 983, 991, 997, 998, 1000, 1001, 1021, 1022, 1023, 1024, 1025], "break": [17, 39, 46, 70, 81, 165, 187, 204, 245, 313, 319, 325, 341, 343, 345, 372, 374, 376, 378, 384, 397, 455, 498, 625, 759, 763, 766, 780, 857, 864, 869, 886, 889, 963, 966, 975, 977, 982, 988, 1009, 1010, 1016, 1017, 1019, 1021, 1025], "get_adjacency_matrix": 17, "resolv": [17, 371, 372, 376, 380, 386, 405, 432, 438, 448, 677, 681, 921, 957, 967, 1016, 1018, 1019, 1022], "lil_matrix": 17, "float32": [17, 122, 222, 297, 315, 359, 367, 372, 374, 393, 543, 544, 545, 546, 549, 550, 551, 552, 579, 580, 626, 627, 644, 748, 849, 892, 893, 894, 895, 902, 943, 944, 945, 983, 993, 1002, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "del": [17, 378, 1021, 1022], "convert": [17, 34, 46, 48, 66, 71, 98, 155, 171, 198, 219, 239, 244, 245, 248, 249, 291, 358, 366, 381, 383, 385, 391, 405, 426, 429, 430, 433, 435, 436, 437, 438, 445, 450, 451, 482, 520, 527, 539, 540, 543, 544, 545, 546, 549, 550, 551, 552, 558, 567, 568, 574, 575, 576, 577, 579, 580, 592, 613, 614, 615, 616, 632, 638, 644, 645, 646, 648, 652, 654, 656, 660, 662, 663, 664, 678, 685, 763, 839, 848, 849, 851, 855, 857, 858, 859, 861, 884, 892, 893, 894, 895, 902, 904, 905, 927, 952, 953, 956, 963, 964, 965, 967, 977, 978, 982, 983, 1002, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1020, 1021, 1024, 1025], "csr": [17, 345, 358, 366, 367, 381, 383, 385, 405, 408, 429, 432, 433, 435, 436, 445, 483, 494, 509, 539, 540, 543, 544, 550, 551, 552, 616, 644, 678, 685, 700, 753, 775, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 839, 847, 851, 853, 855, 856, 859, 862, 864, 867, 868, 869, 871, 874, 877, 892, 893, 894, 895, 900, 904, 905, 927, 930, 942, 943, 944, 945, 946, 947, 948, 970, 977, 981, 1009, 1010, 1015, 1017, 1018, 1024, 1025], "tocsr": 17, "convers": [17, 123, 189, 343, 354, 360, 366, 372, 374, 380, 383, 391, 405, 558, 839, 848, 856, 904, 905, 953, 964, 988, 991, 1017, 1018, 1019, 1022, 1025], "5m": 17, "ram": [17, 53, 360, 404, 876, 877, 969, 982, 1002, 1015, 1021, 1024], "5000000": 17, "strongest": [17, 191], "highest": [17, 19, 26, 82, 143, 147, 256, 258, 269, 312, 343, 372, 383, 395, 397, 401, 404, 406, 423, 541, 543, 550, 578, 581, 582, 584, 585, 586, 589, 590, 592, 621, 623, 711, 741, 777, 780, 782, 785, 786, 796, 881, 892, 923, 956, 963, 967, 968, 971, 981, 983, 1021], "centrality_scor": 17, "networkx": [17, 381], "copyright": [17, 82], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 369], "dan": [17, 1009, 1013, 1014, 1015, 1017, 1018], "schult": 17, "dschult": 17, "pieter": [17, 1015, 1016, 1023], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 105, 197, 231, 262, 345, 394, 408, 430, 509, 510, 517, 523, 528, 534, 574, 577, 671, 672, 685, 826, 827, 830, 832, 834, 835, 963, 967], "indptr": [17, 278, 352, 1017, 1025], "dangl": 17, "isclos": 17, "guess": [17, 119, 401, 404, 405, 464, 518, 524, 526, 527, 533, 967, 981], "prev_scor": 17, "dot": [17, 32, 33, 34, 44, 49, 54, 57, 62, 78, 79, 80, 82, 85, 86, 96, 97, 98, 103, 105, 113, 150, 151, 157, 158, 168, 179, 182, 190, 192, 193, 205, 232, 244, 245, 247, 248, 262, 326, 328, 358, 374, 378, 381, 385, 394, 402, 405, 519, 524, 526, 533, 576, 577, 600, 632, 633, 636, 638, 639, 640, 643, 646, 647, 648, 649, 667, 668, 669, 670, 673, 746, 748, 856, 896, 922, 965, 969, 977, 981, 982, 1001, 1018], "converg": [17, 57, 61, 78, 79, 110, 121, 123, 150, 156, 159, 191, 200, 202, 206, 214, 244, 246, 295, 296, 300, 305, 319, 360, 381, 385, 394, 397, 402, 405, 407, 409, 426, 429, 432, 433, 434, 435, 438, 440, 445, 446, 447, 448, 457, 458, 464, 468, 469, 470, 519, 521, 522, 523, 524, 525, 532, 539, 557, 596, 630, 631, 632, 633, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 654, 658, 660, 662, 664, 668, 669, 673, 674, 676, 677, 680, 681, 780, 781, 833, 841, 842, 879, 880, 886, 957, 962, 963, 964, 966, 971, 981, 1009, 1012, 1013, 1014, 1016, 1017, 1020, 1022, 1023, 1024, 1025], "l_inf": 17, "scores_max": 17, "err": [17, 85, 99], "6f": [17, 99, 263, 722, 778], "concern": [18, 36, 77, 84, 88, 94, 108, 141, 149, 161, 165, 173, 176, 218, 242, 248, 275, 279, 293, 299, 317, 325, 342, 347, 358, 374, 396, 964, 979], "modul": [18, 36, 37, 49, 53, 77, 84, 88, 94, 95, 108, 141, 149, 159, 161, 165, 166, 173, 176, 213, 218, 219, 242, 251, 275, 279, 293, 295, 296, 299, 317, 325, 342, 347, 350, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 383, 385, 387, 388, 391, 394, 395, 396, 397, 400, 404, 405, 406, 408, 430, 489, 521, 565, 566, 645, 879, 913, 956, 961, 963, 965, 967, 968, 971, 973, 974, 977, 979, 981, 983, 984, 991, 996, 997, 1002, 1010, 1011, 1012, 1014, 1015, 1019, 1021, 1023], "demo": [18, 22, 36, 68, 126, 165, 182, 204, 248, 259, 267, 305, 343, 344, 374, 394, 397, 405, 426, 427, 430, 432, 433, 434, 436, 437, 439, 441, 444, 488, 497, 498, 499, 527, 690, 691, 703, 705, 722, 776, 778, 845, 864], "spectral": [18, 22, 36, 44, 46, 49, 55, 68, 165, 220, 221, 372, 405, 435, 437, 438, 439, 448, 455, 456, 457, 458, 459, 460, 461, 462, 474, 497, 499, 577, 674, 675, 676, 677, 678, 681, 705, 778, 970, 980, 1003, 1004, 1009, 1010], "twenti": [19, 231, 369, 394, 397, 1002], "comp": [19, 85, 86, 98, 106, 297, 322, 343, 344, 345, 367, 1002], "window": [19, 322, 367, 372, 374, 375, 405, 987, 1009, 1012, 1016, 1020, 1022, 1023], "misc": [19, 53, 98, 259, 322, 343, 344, 345, 367, 1001], "categori": [19, 44, 62, 70, 71, 120, 130, 168, 169, 198, 206, 213, 236, 259, 295, 296, 302, 306, 307, 312, 315, 322, 343, 344, 345, 366, 367, 381, 396, 397, 398, 404, 405, 407, 474, 482, 483, 489, 547, 548, 634, 644, 645, 655, 666, 728, 743, 744, 820, 857, 858, 865, 957, 963, 964, 965, 969, 975, 993, 1002, 1015, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "noth": [19, 70, 343, 344, 377, 528, 574, 575, 577, 700, 847, 856, 905, 977], "frequenc": [19, 27, 150, 169, 182, 192, 198, 231, 311, 312, 343, 344, 345, 367, 383, 395, 401, 402, 404, 405, 406, 537, 543, 545, 546, 547, 550, 574, 575, 576, 577, 590, 644, 645, 650, 652, 654, 660, 661, 662, 671, 672, 813, 848, 857, 858, 884, 886, 889, 892, 894, 910, 963, 964, 969, 977, 981, 983, 1011, 1013, 1014, 1020], "dhillon": [19, 394, 437, 439, 497], "cut": [19, 43, 46, 65, 66, 221, 376, 383, 394, 397, 432, 438, 439, 448, 574, 577, 677, 681, 977], "minibatchkmean": [19, 36, 44, 50, 61, 68, 165, 344, 360, 397, 402, 426, 428, 433, 498, 764, 1010, 1015, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1025], "coclust": [19, 394, 437, 499], "55": [19, 46, 168, 174, 193, 198, 207, 216, 221, 319, 377, 397, 401, 477, 583, 782, 788, 796, 808, 967, 1009], "4415": 19, "45": [19, 40, 64, 73, 143, 155, 170, 187, 198, 216, 265, 269, 270, 319, 330, 354, 401, 404, 405, 550, 551, 613, 620, 773, 780, 888, 957, 967, 975, 986, 998, 1005, 1009, 1012], "3015": 19, "talk": [19, 70, 259, 343, 344, 345, 361, 367, 385, 391, 991, 994, 1002], "polit": [19, 343, 367, 371, 963, 968], "mideast": [19, 367], "cosmo": 19, "angmar": 19, "alfalfa": 19, "alphalpha": 19, "prolin": [19, 305, 369], "benson": 19, "1948": 19, "4325": 19, "gun": [19, 367], "17": [19, 39, 52, 74, 80, 109, 134, 151, 168, 197, 220, 225, 231, 261, 294, 298, 304, 367, 370, 377, 388, 389, 390, 397, 401, 407, 430, 447, 473, 483, 509, 517, 522, 526, 533, 535, 536, 541, 545, 546, 555, 556, 583, 614, 635, 643, 644, 645, 652, 655, 658, 660, 673, 678, 714, 715, 725, 746, 751, 769, 772, 774, 800, 822, 833, 848, 853, 854, 862, 864, 870, 886, 889, 892, 893, 894, 895, 956, 957, 968, 970, 977, 985, 1005, 1007, 1009, 1010, 1011, 1012, 1015, 1018, 1023], "sci": [19, 70, 343, 344, 345, 367, 383, 675, 679, 855, 964, 977, 1002], "med": [19, 70, 267, 367, 977, 1002], "geb": 19, "gordon": [19, 246, 1015, 1019, 1021, 1023], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1259": 19, "3534": 19, "soc": [19, 367, 1002], "religion": [19, 259, 343, 344, 345, 367, 968, 1002], "alt": [19, 259, 322, 343, 344, 345, 367, 380, 1002], "atheism": [19, 259, 322, 343, 344, 345, 367, 1002], "god": [19, 343, 344, 1002], "jesu": [19, 343, 344], "kent": 19, "belief": [19, 258, 840, 972], "christ": 19, "faith": [19, 156, 335], "moral": [19, 71, 343, 644, 1017, 1021, 1022], "775": 19, "1623": 19, "pc": [19, 322, 345, 367], "hardwar": [19, 322, 345, 358, 359, 367, 370, 985, 987, 1023, 1024], "scsi": 19, "nada": 19, "vga": 19, "esdi": 19, "isa": 19, "kth": [19, 803], "s3": [19, 96, 147, 186, 187, 369, 1001], "vlb": 19, "bmug": 19, "2180": 19, "2802": 19, "mac": [19, 306, 322, 367, 372, 694, 967], "electron": [19, 367, 369, 524, 526, 533, 613], "voltag": 19, "ship": [19, 130, 163, 349, 359, 370, 388, 405, 963, 1009, 1018], "circuit": [19, 964], "mpce": 19, "kolstad": 19, "spectralcoclust": [19, 21, 394, 437, 1011, 1016, 1020], "v_measure_scor": [19, 37, 38, 49, 58, 344, 397, 703, 721, 722, 742, 967, 1018], "number_norm": 19, "token": [19, 345, 358, 367, 376, 405, 522, 574, 575, 576, 577, 1009, 1017, 1021], "placehold": [19, 376, 613, 614, 615, 616, 797, 798, 801, 802, 957], "begin": [19, 150, 253, 260, 276, 313, 343, 354, 372, 377, 378, 385, 394, 397, 404, 539, 540, 545, 547, 548, 652, 653, 662, 663, 664, 956, 963, 967, 977, 979, 981, 1017, 1023, 1024], "By": [19, 45, 95, 126, 127, 177, 267, 300, 310, 343, 359, 372, 378, 379, 385, 397, 398, 400, 401, 402, 403, 404, 406, 424, 427, 431, 432, 436, 450, 453, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 510, 512, 535, 536, 543, 544, 545, 546, 550, 551, 571, 572, 574, 575, 577, 592, 595, 618, 619, 657, 659, 661, 663, 676, 678, 680, 683, 686, 688, 689, 704, 714, 715, 719, 723, 768, 769, 772, 777, 779, 785, 786, 830, 844, 845, 857, 858, 860, 862, 872, 874, 887, 888, 892, 893, 894, 895, 904, 905, 935, 956, 957, 959, 963, 967, 974, 977, 979, 983, 993, 997, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1023], "isdigit": [19, 405], "numbernormalizingvector": 19, "build_token": [19, 405, 574, 575, 577], "super": [19, 25, 27, 374, 405, 1017], "forsal": [19, 345, 367], "rec": [19, 345, 367, 627], "auto": [19, 25, 27, 33, 44, 45, 48, 57, 58, 60, 92, 95, 143, 144, 154, 174, 181, 219, 220, 221, 222, 224, 232, 236, 238, 255, 257, 265, 278, 281, 286, 302, 310, 311, 312, 313, 314, 315, 326, 327, 328, 333, 336, 337, 345, 366, 367, 372, 374, 404, 406, 407, 408, 427, 430, 431, 432, 433, 435, 436, 438, 443, 445, 448, 482, 494, 495, 521, 527, 530, 535, 543, 544, 547, 548, 549, 550, 551, 553, 554, 579, 580, 583, 588, 593, 594, 615, 617, 618, 619, 621, 625, 632, 633, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 658, 659, 660, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 686, 688, 720, 726, 785, 786, 812, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 841, 842, 857, 858, 865, 876, 877, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 920, 921, 933, 936, 958, 961, 963, 964, 967, 968, 970, 977, 982, 987, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "motorcycl": [19, 367], "sport": [19, 367], "basebal": [19, 367], "hockei": [19, 367], "crypt": [19, 367], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 95, 314, 344, 372, 385, 397, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 445, 446, 447, 448, 449, 497, 499, 1001, 1009, 1013, 1015, 1017, 1018, 1020, 1023], "svd_method": [19, 437, 439, 518, 1012], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 57, 58, 61, 68, 165, 246, 249, 303, 314, 344, 381, 397, 426, 429, 434, 435, 438, 448, 498, 775, 776, 780, 781, 849, 970, 977, 988, 1001, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "20000": [19, 97], "n_init": [19, 42, 43, 44, 45, 48, 50, 57, 58, 60, 61, 64, 95, 219, 220, 221, 222, 311, 314, 344, 397, 429, 433, 435, 437, 438, 439, 445, 448, 676, 680, 780, 781, 1001, 1009, 1017, 1023, 1024], "y_coclust": 19, "row_labels_": [19, 20, 21, 394, 437, 439], "y_kmean": 19, "fit_predict": [19, 56, 57, 60, 227, 285, 374, 385, 397, 415, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 455, 549, 663, 780, 781, 830, 836, 844, 888, 973, 1014, 1017, 1018, 1022, 1024], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 55, 59, 63, 64, 70, 116, 131, 219, 236, 339, 497, 499], "get_indic": [19, 412, 437, 439], "float_info": 19, "row_compl": 19, "logical_not": [19, 64, 105, 201], "rows_": [19, 394, 412, 437, 439], "col_compl": 19, "columns_": [19, 394, 412, 437, 439], "ident": [19, 64, 122, 193, 198, 216, 227, 231, 323, 343, 367, 374, 385, 394, 397, 398, 399, 401, 407, 410, 424, 425, 438, 450, 451, 459, 461, 462, 465, 466, 467, 474, 489, 537, 545, 546, 550, 551, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 629, 665, 666, 685, 690, 691, 721, 770, 778, 784, 787, 797, 798, 799, 801, 802, 826, 827, 833, 841, 842, 848, 849, 861, 873, 892, 893, 960, 961, 964, 967, 970, 971, 982, 1013, 1017, 1018, 1019, 1023], "most_common": 19, "counter": [19, 265, 397, 662, 663, 664, 1022], "itemgett": 19, "revers": [19, 75, 147, 203, 258, 520, 527, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 597, 774, 844, 967, 1009, 1010, 1019, 1021, 1025], "best_idx": [19, 257], "get_shap": [19, 412, 437, 439], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 58], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "781": [19, 22, 109, 134], "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 394, 437, 439, 497, 499], "make_checkerboard": [20, 497, 1011], "rearrang": [20, 21, 394], "outer": [20, 100, 263, 320, 437, 500, 626, 636, 637, 640, 959, 1010], "product": [20, 71, 95, 131, 150, 155, 169, 354, 358, 374, 375, 378, 381, 391, 394, 402, 404, 437, 524, 526, 533, 568, 575, 576, 577, 599, 600, 619, 626, 650, 651, 671, 672, 746, 748, 760, 762, 856, 859, 876, 877, 922, 956, 959, 963, 965, 977, 979, 981, 982, 987, 991, 1017], "consensu": [20, 21, 37, 371, 372, 386, 394, 397, 635, 657, 664, 665, 705, 967], "kemaleren": [20, 21], "spectralbiclust": [20, 394, 439, 1011, 1015, 1016, 1020], "consensus_scor": [20, 21, 394, 1011], "matshow": [20, 21, 66, 118, 145, 296, 488], "row_idx": [20, 21, 198], "permut": [20, 21, 37, 81, 118, 124, 139, 165, 166, 172, 214, 251, 274, 307, 387, 392, 397, 404, 450, 482, 486, 490, 545, 546, 550, 551, 613, 616, 620, 665, 690, 691, 703, 721, 722, 740, 742, 778, 799, 801, 809, 810, 844, 858, 889, 892, 893, 921, 936, 938, 941, 967, 981, 997, 1000, 1004, 1009, 1015, 1022, 1024], "col_idx": [20, 21], "biclusters_": [20, 21, 412, 437, 439], "1f": [20, 30, 50, 53, 98, 178, 198, 231, 243, 245, 265, 310, 344, 345], "fit_data": [20, 21], "column_labels_": [20, 21, 394, 437, 439], "572": [20, 22], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 361, 405, 412, 435, 437, 439, 474, 497, 499, 577, 705, 778, 967, 1003, 1004, 1011, 1015, 1016], "make_biclust": [21, 499, 1011], "implant": 21, "372": [21, 22], "plot_spectral_coclust": [21, 22], "725": [22, 303, 308], "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 35, 55, 75, 92, 108, 109, 110, 131, 134, 142, 149, 150, 151, 152, 160, 165, 168, 219, 223, 228, 231, 258, 261, 264, 265, 268, 300, 304, 310, 312, 321, 323, 358, 361, 367, 368, 374, 378, 383, 385, 397, 401, 402, 405, 406, 407, 421, 422, 423, 424, 425, 432, 433, 435, 490, 498, 501, 509, 513, 535, 536, 537, 539, 541, 543, 545, 547, 548, 550, 553, 555, 556, 579, 580, 596, 599, 600, 608, 613, 618, 619, 644, 645, 657, 662, 678, 684, 686, 688, 689, 692, 693, 695, 698, 702, 706, 711, 712, 714, 724, 725, 726, 727, 741, 767, 769, 772, 773, 774, 777, 780, 781, 782, 785, 786, 796, 809, 810, 813, 815, 816, 819, 820, 821, 822, 823, 826, 829, 834, 840, 841, 877, 878, 879, 880, 881, 884, 886, 889, 892, 894, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 977, 979, 980, 981, 983, 988, 989, 990, 1002, 1004, 1009, 1011, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1023], "confid": [24, 25, 26, 27, 155, 157, 244, 258, 261, 321, 386, 395, 407, 622, 644, 645, 652, 654, 657, 660, 661, 662, 684, 688, 693, 706, 711, 712, 724, 725, 741, 774, 812, 851, 884, 886, 889, 963, 966, 967, 968, 973, 980, 981, 982, 991, 1002, 1019], "being": [24, 27, 45, 52, 55, 82, 86, 90, 100, 114, 127, 150, 155, 168, 170, 174, 192, 252, 258, 304, 305, 330, 343, 345, 370, 371, 372, 374, 376, 377, 383, 385, 386, 391, 397, 399, 401, 404, 405, 406, 407, 408, 410, 427, 428, 430, 431, 436, 442, 455, 461, 479, 509, 555, 626, 635, 642, 658, 660, 673, 676, 680, 698, 704, 714, 719, 721, 768, 774, 780, 824, 825, 830, 832, 834, 835, 836, 859, 877, 922, 956, 957, 963, 966, 967, 970, 973, 974, 975, 977, 979, 981, 982, 983, 1009, 1010, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1025], "postprocess": [24, 395, 521, 527], "brier": [24, 25, 395, 695], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 364, 404, 423, 438, 521, 547, 606, 625, 629, 750, 759, 762, 841, 842, 886, 887, 888, 889, 890, 972, 982, 1000, 1004, 1022], "isoton": [24, 25, 165, 226, 241, 361, 423, 643, 907, 989, 1004, 1010, 1011, 1012, 1013, 1015, 1022, 1025], "belong": [24, 27, 55, 60, 236, 258, 310, 320, 366, 367, 394, 395, 397, 400, 401, 404, 412, 426, 429, 433, 434, 435, 437, 439, 509, 698, 716, 789, 795, 805, 831, 851, 865, 963, 966, 967, 969, 970, 971, 973, 982, 987, 993, 1000], "mblondel": [24, 48, 189, 220, 259, 343, 366, 494], "telecom": [24, 25, 42, 227, 991], "balaz": [24, 1013], "kegl": [24, 1013], "jhm": [24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233], "informatik": [24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233, 967], "uni": [24, 25, 26, 27, 74, 114, 150, 151, 153, 154, 155, 156, 157, 159, 189, 232, 233, 320, 338], "bremen": [24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233], "style": [24, 26, 81, 123, 187, 206, 216, 262, 372, 379, 397, 405, 429, 433, 445, 686, 788, 904, 905, 1009, 1012, 1023], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 91, 190, 210, 227, 246, 303, 311, 314, 328, 331, 332, 339, 368, 374, 375, 404, 501, 1017, 1020, 1023], "50000": 24, "n_bin": [24, 25, 27, 53, 198, 216, 301, 303, 307, 424, 425, 849, 977], "calibration_curv": [24, 395, 423, 424, 1018, 1023], "blob": [24, 33, 42, 44, 57, 62, 64, 91, 397, 434, 498, 1014], "sample_weight": [24, 179, 198, 211, 216, 311, 340, 372, 385, 397, 404, 408, 414, 418, 423, 429, 430, 433, 435, 445, 446, 451, 455, 468, 469, 470, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 596, 597, 620, 621, 623, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 683, 684, 686, 688, 689, 693, 694, 695, 698, 699, 702, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 719, 720, 723, 724, 725, 726, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 767, 768, 769, 770, 772, 773, 774, 777, 779, 782, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 829, 831, 834, 835, 841, 842, 844, 849, 863, 864, 879, 880, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 955, 967, 981, 982, 983, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "sw_train": [24, 311], "sw_test": [24, 311], "calibratedclassifiercv": [24, 25, 26, 354, 385, 395, 662, 956, 982, 988, 1013, 1015, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "brier_score_loss": [24, 25, 395, 967, 1017, 1018, 1019], "gaussiannb": [24, 25, 27, 31, 132, 260, 354, 395, 404, 423, 555, 819, 820, 821, 823, 845, 961, 968, 969, 1013, 1014, 1015, 1017, 1022, 1025], "With": [24, 34, 44, 67, 75, 100, 121, 143, 165, 169, 198, 200, 226, 228, 233, 234, 240, 241, 258, 282, 358, 361, 367, 372, 374, 385, 397, 398, 401, 404, 406, 423, 425, 487, 568, 618, 619, 644, 753, 842, 845, 847, 858, 864, 865, 891, 893, 960, 963, 964, 967, 968, 970, 971, 974, 981, 983, 993, 994, 1001, 1006, 1012, 1016, 1017, 1019, 1021, 1023], "itself": [24, 49, 55, 123, 126, 169, 182, 196, 239, 267, 278, 307, 330, 344, 358, 360, 371, 372, 374, 376, 385, 396, 397, 408, 426, 427, 430, 431, 432, 455, 456, 457, 458, 459, 460, 461, 462, 513, 517, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 537, 552, 555, 569, 578, 581, 582, 584, 585, 586, 588, 589, 625, 626, 627, 628, 629, 631, 641, 675, 677, 775, 776, 819, 820, 821, 822, 823, 824, 825, 829, 837, 838, 849, 850, 851, 879, 880, 959, 963, 964, 966, 970, 971, 975, 987, 1013, 1024], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 128, 132, 151, 152, 153, 154, 267, 294, 302, 305, 310, 312, 343, 374, 379, 385, 395, 396, 404, 423, 424, 535, 536, 537, 539, 541, 543, 545, 547, 550, 553, 555, 579, 580, 596, 605, 606, 608, 609, 617, 618, 619, 644, 645, 662, 684, 686, 688, 726, 727, 773, 780, 781, 782, 785, 786, 796, 805, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 826, 834, 841, 844, 851, 879, 880, 881, 886, 889, 892, 894, 963, 967, 969, 971, 974, 980, 981, 982, 983, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 112, 125, 182, 190, 204, 206, 207, 319, 335, 338, 349, 369, 380, 383, 388, 397, 460, 545, 546, 576, 577, 621, 631, 650, 662, 664, 671, 672, 780, 963], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": [24, 102, 107, 185, 217, 223, 225], "109": [24, 53, 191, 217, 233, 241, 968, 1011], "y_uniqu": 24, "rainbow": [24, 221], "this_i": [24, 204], "this_x": [24, 196, 204, 1000], "this_sw": 24, "lexsort": 24, "51": [24, 92, 155, 216, 278, 397, 398, 766, 962, 963, 1005], "uncalibr": [24, 25, 26, 423], "gnb": [24, 25, 27, 132, 404, 555, 969], "422": [24, 28, 291, 292, 579, 580, 711, 741, 967], "plot_calibr": [24, 28], "reliabl": [25, 27, 395, 401, 424, 425, 632, 983, 991], "diagram": [25, 27, 71, 238, 311, 395, 397, 424, 425, 454, 882, 977, 1020, 1021], "redund": [25, 27, 106, 146, 244, 249, 354, 368, 371, 372, 377, 385, 395, 501, 620, 988, 1002, 1021], "uninform": [25, 27, 307, 368, 377, 405, 956, 963, 1017], "rest": [25, 30, 120, 124, 165, 176, 182, 213, 217, 246, 310, 322, 327, 378, 385, 396, 407, 498, 596, 617, 630, 644, 645, 662, 739, 773, 812, 813, 814, 833, 884, 886, 889, 963, 967, 968, 971, 974, 982, 991, 1013, 1014, 1023, 1024, 1025], "make_classif": [25, 27, 31, 91, 114, 115, 117, 121, 144, 146, 255, 261, 269, 270, 288, 294, 302, 310, 312, 338, 354, 368, 375, 393, 423, 424, 498, 539, 541, 543, 550, 652, 683, 684, 686, 688, 808, 814, 841, 844, 884, 956, 967, 968, 977, 982, 1015, 1016, 1017, 1019], "100_000": [25, 27, 168], "n_inform": [25, 27, 31, 91, 114, 117, 144, 146, 177, 182, 201, 255, 261, 271, 288, 294, 302, 310, 338, 374, 377, 501, 510, 539, 540, 541, 542, 550, 551, 651, 814, 968, 1017], "n_redund": [25, 27, 31, 91, 117, 144, 146, 255, 261, 288, 294, 302, 377, 423, 501, 539, 541, 550, 814], "logisticregress": [25, 27, 30, 71, 73, 115, 132, 138, 146, 181, 188, 189, 190, 191, 205, 213, 214, 228, 229, 238, 240, 261, 267, 276, 297, 302, 310, 311, 312, 313, 314, 343, 358, 372, 374, 378, 380, 384, 395, 398, 404, 406, 424, 553, 555, 583, 617, 620, 629, 638, 645, 658, 659, 660, 661, 662, 673, 686, 773, 796, 815, 816, 818, 869, 870, 872, 873, 874, 875, 891, 916, 963, 967, 968, 977, 981, 982, 998, 1000, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "baselin": [25, 120, 123, 133, 147, 177, 216, 268, 276, 312, 344, 369, 397, 406, 537, 538, 620, 967, 970, 1002, 1025], "regular": [25, 36, 68, 71, 73, 79, 100, 108, 134, 157, 162, 165, 176, 177, 178, 182, 183, 185, 186, 187, 189, 198, 212, 216, 217, 233, 244, 252, 259, 262, 271, 283, 284, 293, 296, 297, 298, 305, 306, 325, 327, 329, 330, 331, 341, 343, 345, 348, 358, 372, 383, 384, 395, 397, 399, 400, 402, 403, 404, 407, 423, 429, 433, 457, 458, 462, 464, 465, 466, 467, 490, 498, 500, 501, 506, 508, 510, 514, 524, 525, 526, 529, 533, 534, 536, 545, 547, 548, 574, 575, 577, 624, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 679, 720, 726, 735, 780, 781, 799, 810, 811, 841, 842, 845, 864, 884, 885, 886, 887, 889, 890, 891, 956, 957, 959, 960, 961, 964, 966, 972, 973, 977, 980, 981, 982, 989, 991, 997, 998, 1000, 1004, 1009, 1010, 1011, 1013, 1014, 1018, 1019, 1021, 1022], "logist": [25, 27, 30, 69, 71, 76, 115, 138, 165, 176, 217, 228, 240, 276, 297, 305, 314, 343, 385, 386, 395, 398, 404, 406, 407, 423, 475, 482, 488, 490, 498, 527, 545, 547, 557, 596, 617, 632, 643, 644, 645, 652, 654, 662, 726, 782, 796, 810, 840, 841, 842, 844, 864, 891, 907, 909, 967, 971, 972, 981, 982, 989, 991, 998, 1004, 1013, 1016, 1017, 1019, 1020], "guid": [25, 55, 69, 95, 116, 159, 165, 168, 169, 186, 219, 265, 284, 285, 288, 306, 310, 311, 312, 313, 314, 315, 361, 370, 371, 372, 377, 378, 379, 384, 385, 386, 396, 398, 404, 408, 409, 410, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 605, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 843, 844, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 917, 968, 995, 1002, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1019], "gridspec": [25, 27, 65, 243, 379], "calibrationdisplai": [25, 27, 395, 1022, 1023], "lr": [25, 27, 115, 132, 133, 201, 213, 229, 230, 254, 261, 384, 404, 554, 555, 556, 698], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 335], "dark2": [25, 27, 220], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 108, 134, 165, 198, 231, 264, 283, 300, 312, 395, 476, 545, 546, 547, 548, 550, 551, 628, 743, 744, 782, 787, 959, 965, 977, 989, 1003, 1004, 1021, 1024], "grid_posit": [25, 27], "y_prob": [25, 27, 153, 424, 425, 695, 815, 841, 967, 1023], "poorli": [25, 62, 78, 86, 113, 125, 223, 359, 397, 404, 514, 616, 963, 964, 1015], "violat": [25, 330, 380, 383, 385, 621, 908, 974, 981, 983], "independ": [25, 27, 37, 46, 96, 97, 99, 115, 119, 157, 169, 235, 258, 261, 263, 267, 276, 300, 307, 310, 344, 354, 358, 359, 368, 374, 376, 384, 385, 388, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 409, 435, 450, 474, 489, 501, 502, 503, 504, 506, 518, 519, 521, 523, 525, 526, 532, 533, 537, 538, 590, 593, 594, 611, 626, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 658, 659, 660, 661, 690, 691, 703, 721, 722, 740, 742, 778, 784, 809, 813, 815, 817, 818, 856, 860, 861, 862, 864, 868, 869, 870, 871, 873, 874, 875, 878, 886, 887, 888, 889, 890, 915, 956, 959, 961, 963, 964, 967, 968, 969, 972, 974, 977, 982, 983, 1003, 1004, 1009, 1010, 1015, 1017, 1019, 1024], "overli": [25, 26, 187, 263, 354, 402, 967], "typic": [25, 27, 99, 110, 174, 182, 198, 216, 233, 260, 261, 265, 267, 268, 284, 285, 312, 330, 344, 358, 365, 366, 367, 370, 374, 375, 381, 384, 385, 395, 396, 397, 398, 401, 402, 404, 405, 407, 429, 433, 435, 482, 537, 539, 541, 542, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 615, 624, 626, 629, 640, 641, 642, 657, 668, 669, 698, 851, 858, 862, 865, 920, 921, 952, 956, 960, 963, 964, 966, 967, 968, 969, 973, 975, 991, 1002, 1018, 1022, 1025], "transpos": [25, 258, 409, 512, 524, 526, 533, 646, 647, 648, 649, 773, 921, 953, 967, 979, 1001, 1009, 1023], "nearli": [25, 261, 367, 385, 396, 749, 967, 970, 979, 1002], "albeit": 25, "strongli": [25, 27, 82, 86, 98, 120, 124, 168, 180, 213, 264, 343, 372, 387, 388, 395, 404, 644, 721, 778, 963, 964, 1004, 1018], "plenti": 25, "greater": [25, 92, 112, 168, 215, 232, 246, 264, 276, 284, 285, 348, 358, 368, 377, 385, 395, 397, 400, 404, 427, 431, 435, 438, 449, 458, 522, 527, 543, 544, 545, 546, 547, 548, 550, 551, 552, 579, 580, 583, 596, 597, 614, 626, 628, 631, 650, 652, 653, 657, 662, 663, 664, 678, 695, 698, 706, 720, 721, 724, 727, 773, 778, 780, 781, 814, 826, 827, 834, 835, 841, 842, 847, 862, 874, 878, 881, 892, 893, 894, 895, 921, 936, 956, 962, 963, 964, 967, 968, 973, 977, 982, 983, 1012, 1017, 1020, 1022, 1023, 1024], "exploit": [25, 276, 968, 988, 1012], "precision_scor": [25, 265, 694, 772, 967, 1009, 1011, 1012, 1013, 1014, 1019, 1025], "recall_scor": [25, 265, 401, 694, 769, 967, 1009, 1011, 1012, 1013, 1014, 1019, 1025], "f1_score": [25, 265, 322, 367, 723, 967, 1009, 1011, 1012, 1013, 1014, 1018, 1019, 1025], "log_loss": [25, 26, 122, 125, 151, 305, 322, 343, 385, 395, 404, 543, 545, 547, 550, 632, 644, 662, 892, 894, 956, 963, 967, 981, 983, 1011, 1013, 1015, 1023, 1024, 1025], "roc_auc_scor": [25, 258, 267, 310, 688, 692, 693, 694, 774, 967, 1011, 1012, 1017, 1019, 1023, 1024], "score_nam": [25, 37, 233, 260, 344, 788], "score_df": 25, "set_index": [25, 123, 155, 187, 216, 258, 306, 344], "decim": [25, 156, 457, 458, 897, 1016, 1017], "098921": 25, "323178": 25, "937457": 25, "872009": 25, "851408": 25, "861586": 25, "117608": 25, "782755": 25, "940374": 25, "857400": 25, "875941": 25, "866571": 25, "098332": 25, "370738": 25, "938613": 25, "883065": 25, "836224": 25, "859007": 25, "108880": 25, "368896": 25, "940201": 25, "861106": 25, "871277": 25, "866161": 25, "refin": [25, 82, 458, 695, 967, 1002], "alter": [25, 163, 374, 385, 714, 715, 723, 768, 769, 772, 1014, 1018, 1021], "uncertainti": [25, 150, 157, 177, 260, 395, 397, 553, 554, 629, 844, 957, 979], "linearsvc": [25, 27, 70, 72, 143, 144, 165, 174, 232, 255, 257, 265, 302, 310, 325, 327, 338, 341, 343, 358, 374, 378, 395, 405, 406, 423, 498, 553, 563, 617, 625, 629, 638, 658, 659, 660, 661, 662, 673, 720, 727, 807, 812, 885, 886, 889, 891, 963, 967, 968, 1009, 1010, 1011, 1015, 1017, 1020, 1025], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 216, 230, 300, 330, 621, 662, 726, 854, 977, 1013, 1020, 1021], "proba_neg_class": [25, 27], "proba": [25, 27, 30, 132, 423, 892, 894], "dual": [25, 27, 70, 72, 143, 144, 174, 232, 255, 257, 265, 302, 310, 327, 328, 338, 343, 405, 406, 457, 458, 464, 553, 554, 597, 625, 632, 633, 638, 639, 644, 645, 646, 647, 648, 649, 667, 670, 720, 812, 824, 825, 884, 885, 886, 889, 967, 968, 982, 1011, 1020, 1023, 1025], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 53, 67, 100, 168, 169, 187, 265, 385, 395, 399, 401, 406, 429, 433, 435, 455, 524, 526, 533, 549, 698, 715, 830, 888, 1009], "behavior": [25, 27, 37, 39, 52, 162, 165, 168, 169, 198, 216, 249, 251, 261, 274, 296, 300, 302, 307, 330, 354, 359, 366, 369, 372, 374, 376, 380, 381, 385, 395, 397, 401, 405, 522, 537, 552, 652, 653, 654, 662, 663, 664, 687, 714, 715, 768, 769, 772, 783, 784, 787, 799, 800, 801, 802, 803, 821, 857, 956, 963, 968, 973, 977, 991, 993, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "hing": [25, 205, 208, 210, 266, 327, 328, 332, 385, 652, 662, 720, 884, 891, 963, 981, 982, 1002], "focus": [25, 78, 187, 367, 383, 404, 964, 977, 987], "far": [25, 60, 82, 120, 151, 157, 168, 198, 216, 330, 343, 345, 372, 381, 407, 706, 864, 942, 972, 973, 982, 991, 1000], "awai": [25, 26, 27, 60, 78, 119, 150, 151, 155, 201, 335, 367, 395, 407, 614, 826, 827, 834, 835, 966, 967, 982, 1000], "shown": [25, 48, 57, 89, 110, 112, 116, 123, 159, 167, 169, 182, 188, 196, 216, 224, 227, 232, 245, 258, 261, 264, 267, 283, 295, 296, 300, 301, 302, 318, 343, 344, 372, 377, 386, 395, 397, 398, 401, 402, 403, 405, 407, 424, 446, 618, 684, 686, 687, 688, 699, 782, 796, 896, 898, 962, 963, 964, 967, 970, 975, 977, 981, 982, 983, 1002, 1013, 1018, 1019, 1020, 1023], "varieti": [25, 162, 245, 306, 330, 380, 383, 396, 397, 399, 404, 405, 629, 970, 983, 987, 991, 1011, 1024, 1025], "niculescu": [25, 27, 395, 423, 425], "mizil": [25, 27, 395, 423, 425], "caruana": [25, 27, 395, 423, 425], "144943": 25, "465660": 25, "937597": 25, "872186": 25, "851792": 25, "861868": 25, "099820": 25, "376999": 25, "936480": 25, "853174": 25, "877981": 25, "865400": 25, "098758": 25, "321301": 25, "937532": 25, "873724": 25, "848743": 25, "861053": 25, "deal": [25, 57, 71, 162, 168, 182, 223, 345, 372, 377, 396, 398, 405, 406, 407, 460, 482, 689, 694, 748, 772, 850, 921, 963, 991, 999, 1012, 1024, 1025], "situat": [25, 44, 57, 72, 167, 168, 204, 227, 261, 372, 380, 399, 401, 402, 404, 454, 514, 520, 568, 857, 860, 872, 882, 961, 963, 969, 970, 980, 983, 1017], "supervis": [25, 27, 37, 49, 54, 58, 86, 104, 115, 138, 139, 220, 234, 245, 258, 287, 312, 321, 324, 344, 358, 361, 367, 374, 384, 385, 395, 397, 400, 401, 402, 404, 405, 407, 423, 425, 450, 474, 489, 490, 539, 574, 576, 579, 580, 620, 662, 714, 783, 784, 787, 789, 790, 791, 792, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 809, 810, 833, 843, 844, 848, 858, 865, 879, 880, 881, 889, 961, 964, 967, 969, 970, 973, 977, 978, 982, 983, 984, 987, 988, 990, 993, 994, 996, 1002, 1004, 1009, 1015, 1021], "icml": [25, 27, 395, 397, 405, 423, 425, 819, 821, 840, 967, 969, 981, 986], "2005": [25, 27, 81, 369, 395, 423, 425, 833, 963, 970, 980], "432": [25, 28, 258, 399], "plot_calibration_curv": [25, 28], "simplex": [26, 656, 780, 859], "arrow": [26, 1023], "green": [26, 34, 81, 92, 113, 127, 132, 150, 174, 224, 295, 301, 305, 311, 385, 968, 1017, 1018, 1020, 1021], "600": [26, 50, 129, 130, 367, 666], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 210, 227, 246, 303, 332, 498], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 56, 114, 115, 116, 117, 118, 119, 132, 170, 171, 238, 239, 255, 270, 310, 312, 343, 354, 384, 385, 395, 404, 406, 543, 544, 545, 547, 552, 553, 555, 785, 786, 814, 894, 956, 968, 991, 1006, 1013, 1014, 1017, 1018, 1019, 1022, 1023, 1024, 1025], "concaten": [26, 39, 50, 61, 69, 76, 81, 112, 126, 158, 165, 177, 180, 220, 227, 236, 243, 247, 248, 254, 265, 267, 268, 283, 297, 304, 307, 319, 343, 398, 450, 453, 490, 495, 517, 523, 527, 528, 585, 766, 782, 843, 844, 846, 849, 857, 889, 968, 997, 1010], "randomforestclassifierrandomforestclassifi": [26, 117, 118, 170, 238, 270], "cal_clf": 26, "prefit": [26, 385, 395, 406, 423, 553, 554, 583, 988, 1021, 1022, 1023], "x27": [26, 71, 72, 109, 115, 130, 133, 144, 168, 169, 170, 228, 229, 237, 238, 240, 248, 256, 258, 259, 265, 270, 297, 306, 311, 312, 314, 320], "calibratedclassifiercvcalibratedclassifiercv": 26, "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "perfect": [26, 37, 70, 81, 98, 100, 194, 198, 343, 344, 372, 376, 397, 401, 539, 540, 676, 680, 690, 691, 694, 703, 711, 713, 716, 722, 728, 741, 742, 770, 771, 778, 963, 967, 970, 982, 991, 1000, 1023], "ro": 26, "bo": [26, 1021], "unit": [26, 70, 80, 168, 174, 198, 216, 283, 296, 300, 344, 367, 372, 373, 374, 378, 380, 381, 402, 405, 409, 450, 475, 476, 505, 510, 518, 519, 520, 527, 528, 575, 576, 577, 597, 644, 645, 662, 671, 685, 755, 831, 840, 841, 842, 848, 854, 856, 860, 862, 864, 870, 871, 872, 874, 875, 884, 885, 963, 965, 966, 972, 977, 983, 987, 1000, 1013, 1017, 1023, 1024], "mid": [26, 330, 967, 969], "frac": [26, 80, 81, 258, 265, 267, 313, 394, 395, 397, 399, 402, 403, 404, 405, 407, 418, 449, 451, 468, 469, 470, 540, 542, 544, 546, 548, 551, 554, 556, 597, 601, 605, 608, 609, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 655, 656, 658, 659, 664, 665, 666, 682, 740, 754, 817, 818, 827, 835, 842, 885, 887, 890, 893, 895, 959, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 974, 975, 977, 979, 981, 982, 983, 1000], "shrink": [26, 82, 95, 124, 169, 182, 193, 196, 219, 247, 300, 402, 545, 546, 662, 664, 831, 841, 842, 886, 887, 888, 889, 890, 970, 982, 1000], "perfectli": [26, 37, 261, 272, 387, 397, 404, 424, 553, 592, 690, 691, 701, 703, 721, 722, 742, 771, 778, 857, 962, 964, 967, 982, 1022, 1023], "incur": [26, 605, 884, 982, 1017], "correct": [26, 27, 57, 81, 158, 168, 182, 187, 198, 216, 243, 252, 258, 265, 267, 330, 332, 343, 354, 369, 372, 374, 376, 386, 395, 396, 397, 401, 402, 404, 405, 436, 442, 455, 460, 474, 487, 489, 621, 653, 662, 664, 689, 690, 694, 698, 699, 704, 707, 708, 709, 713, 714, 715, 719, 723, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 768, 769, 770, 772, 777, 779, 812, 813, 814, 821, 829, 855, 952, 963, 967, 968, 982, 993, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "decreas": [26, 39, 46, 55, 58, 66, 75, 127, 146, 158, 168, 169, 206, 230, 231, 260, 265, 271, 294, 302, 305, 310, 348, 358, 360, 372, 395, 397, 404, 427, 431, 449, 507, 520, 521, 527, 543, 544, 545, 546, 547, 548, 550, 551, 552, 588, 621, 622, 623, 662, 663, 664, 692, 698, 712, 767, 774, 841, 842, 892, 893, 894, 895, 956, 958, 963, 964, 967, 970, 971, 974, 975, 981, 982, 991, 1000, 1011, 1016, 1019, 1022], "cal_scor": 26, "327": [26, 34, 35, 715, 1000], "549": [26, 227, 241], "p1d": 26, "p0": 26, "p1": [26, 132], "p2": [26, 132, 216], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 395, 423], "this_p": 26, "sure": [26, 56, 191, 204, 234, 354, 358, 359, 366, 370, 371, 372, 373, 374, 376, 377, 380, 383, 395, 398, 405, 479, 509, 635, 904, 905, 915, 953, 957, 964, 981, 987, 988, 1016, 1017, 1019, 1024], "renorm": 26, "step": [26, 33, 42, 54, 55, 58, 67, 70, 71, 72, 73, 74, 81, 86, 98, 103, 115, 119, 120, 130, 144, 145, 146, 152, 155, 168, 170, 198, 206, 216, 228, 229, 232, 237, 240, 249, 256, 259, 265, 267, 278, 280, 286, 294, 297, 302, 305, 306, 311, 314, 323, 326, 330, 344, 345, 348, 354, 358, 361, 367, 370, 371, 372, 374, 376, 377, 380, 383, 385, 394, 395, 397, 399, 400, 402, 404, 405, 406, 428, 433, 435, 522, 523, 524, 525, 532, 549, 574, 575, 577, 579, 580, 583, 592, 613, 630, 634, 652, 653, 655, 662, 664, 665, 666, 680, 686, 780, 781, 782, 785, 786, 796, 816, 817, 818, 840, 841, 842, 844, 845, 847, 884, 885, 886, 887, 889, 890, 920, 921, 938, 942, 957, 963, 966, 971, 972, 977, 981, 983, 984, 987, 990, 998, 1002, 1009, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1025], "multiclass": [26, 30, 116, 165, 176, 217, 234, 251, 265, 268, 274, 276, 327, 339, 361, 367, 368, 374, 375, 377, 385, 397, 404, 423, 438, 448, 475, 490, 545, 547, 553, 554, 557, 580, 588, 596, 617, 618, 619, 644, 645, 652, 654, 659, 660, 661, 662, 688, 692, 694, 714, 715, 719, 720, 723, 728, 739, 768, 769, 772, 773, 774, 777, 782, 783, 785, 786, 787, 788, 796, 800, 804, 805, 806, 807, 808, 809, 810, 811, 851, 865, 884, 886, 889, 961, 963, 978, 982, 983, 989, 990, 1002, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1024, 1025], "argmax": [26, 103, 257, 271, 374, 404, 555, 812, 892, 982, 1022], "974": [26, 28], "plot_calibration_multiclass": [26, 28], "gave": [27, 395, 782, 785, 786, 796, 851], "four": [27, 143, 158, 174, 180, 199, 245, 246, 319, 327, 368, 372, 385, 543, 550, 705, 892, 894, 910, 963, 965, 966, 967, 977, 986], "naiv": [27, 31, 128, 258, 260, 343, 345, 361, 367, 395, 404, 405, 423, 530, 819, 820, 821, 822, 823, 961, 962, 970, 989, 1004, 1009, 1010, 1011, 1012, 1017, 1019, 1022, 1024], "bay": [27, 31, 113, 128, 150, 187, 248, 260, 343, 361, 367, 395, 402, 404, 405, 407, 522, 535, 536, 642, 819, 820, 821, 822, 823, 865, 961, 962, 963, 977, 989, 1002, 1004, 1009, 1010, 1011, 1012, 1017, 1019, 1022, 1024], "train_sampl": [27, 213, 214], "against": [27, 37, 86, 105, 113, 124, 142, 174, 189, 190, 207, 215, 267, 306, 310, 330, 367, 372, 386, 395, 397, 401, 405, 424, 495, 528, 534, 537, 662, 664, 740, 742, 773, 784, 789, 791, 809, 813, 933, 959, 963, 967, 968, 970, 982, 986, 993], "rfc": [27, 239, 310, 1006], "circleci": [27, 34, 53, 112, 154, 156, 158, 159, 177, 190, 207, 244, 303, 307, 310, 335, 349, 372], "1158": 27, "userwarn": [27, 44, 62, 112, 159, 190, 207, 335, 349, 377, 698, 977, 1015, 1017, 1022], "redundantli": [27, 385], "keyword": [27, 343, 366, 372, 374, 377, 379, 385, 397, 408, 411, 424, 430, 431, 436, 438, 443, 450, 453, 489, 521, 524, 526, 545, 546, 553, 554, 555, 556, 606, 614, 617, 618, 625, 629, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 674, 678, 683, 684, 686, 687, 688, 759, 763, 764, 765, 766, 775, 776, 788, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 844, 848, 916, 918, 934, 956, 964, 967, 970, 980, 1009, 1013, 1015, 1016, 1017, 1019, 1021, 1023, 1024, 1025], "argument": [27, 72, 199, 228, 231, 359, 366, 367, 372, 373, 375, 377, 378, 380, 381, 383, 385, 397, 398, 401, 402, 404, 406, 408, 409, 411, 424, 426, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 443, 445, 447, 449, 454, 479, 489, 494, 519, 521, 522, 524, 526, 537, 545, 546, 553, 554, 555, 556, 563, 567, 568, 574, 575, 577, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 617, 625, 629, 632, 633, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 652, 654, 662, 667, 670, 674, 678, 682, 684, 685, 686, 687, 688, 700, 705, 720, 727, 748, 764, 765, 788, 812, 813, 816, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 841, 844, 848, 882, 898, 902, 911, 916, 918, 934, 935, 936, 937, 951, 956, 959, 963, 964, 965, 967, 970, 974, 975, 982, 983, 993, 997, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1024, 1025], "fmt": [27, 61, 209], "preced": [27, 276, 359, 372, 473, 967, 1009], "contrast": [27, 104, 169, 200, 233, 258, 260, 287, 305, 344, 385, 395, 397, 398, 400, 404, 407, 435, 438, 448, 605, 629, 796, 840, 957, 960, 962, 963, 967, 970, 972, 975, 977, 980, 981, 983, 1019], "push": [27, 372, 376, 395, 990], "equat": [27, 338, 372, 397, 402, 404, 543, 544, 545, 546, 550, 551, 552, 576, 613, 668, 669, 673, 748, 864, 892, 893, 894, 895, 957, 964, 967, 972, 1017], "twice": [27, 270, 343, 345, 374, 407, 605, 715, 717, 923, 1018], "approx": [27, 95, 232, 402, 404, 405, 967, 974, 981], "rare": [27, 169, 306, 354, 376, 383, 385, 387, 395, 397, 401, 575, 634, 644, 645, 655, 666, 884, 909, 935, 963, 977, 991, 1016, 1017, 1018, 1022, 1024], "explan": [27, 86, 358, 371, 372, 395, 405, 956, 966, 968, 983, 991, 1012], "bag": [27, 70, 108, 114, 116, 125, 134, 165, 170, 344, 345, 368, 395, 502, 503, 504, 541, 542, 543, 544, 545, 546, 549, 550, 551, 726, 787, 810, 893, 965, 968, 989, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1022, 1023, 1025], "underli": [27, 56, 80, 129, 147, 199, 201, 263, 282, 283, 351, 359, 383, 385, 387, 393, 395, 397, 399, 401, 402, 403, 404, 406, 407, 423, 437, 438, 439, 448, 450, 451, 457, 458, 464, 510, 553, 554, 555, 556, 579, 580, 583, 588, 644, 654, 666, 677, 681, 782, 785, 786, 796, 812, 813, 814, 815, 816, 817, 818, 829, 884, 892, 893, 894, 895, 932, 963, 964, 968, 973, 980, 982, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1025], "restrict": [27, 66, 67, 162, 165, 215, 293, 298, 374, 378, 383, 395, 397, 404, 405, 451, 479, 488, 518, 567, 596, 639, 640, 641, 642, 644, 668, 669, 699, 767, 773, 774, 810, 832, 834, 835, 836, 838, 840, 841, 842, 844, 870, 967, 983, 1003, 1004, 1009, 1011, 1019, 1021], "interv": [27, 108, 134, 157, 165, 182, 198, 199, 200, 216, 258, 307, 367, 385, 395, 401, 404, 407, 424, 425, 502, 503, 504, 543, 544, 546, 548, 550, 551, 621, 622, 624, 663, 727, 733, 735, 786, 803, 810, 847, 849, 863, 886, 887, 888, 908, 959, 963, 967, 977, 983, 1016, 1020], "move": [27, 119, 259, 297, 330, 371, 372, 376, 378, 395, 397, 535, 536, 557, 558, 559, 561, 563, 564, 934, 1001, 1009, 1010, 1014, 1017, 1019, 1022, 1023], "characterist": [27, 44, 62, 147, 155, 165, 227, 251, 255, 274, 300, 354, 367, 369, 377, 395, 401, 404, 407, 489, 490, 609, 624, 644, 688, 692, 694, 712, 767, 773, 774, 801, 810, 813, 851, 889, 963], "difficult": [27, 55, 168, 206, 372, 380, 395, 402, 404, 539, 540, 545, 547, 548, 962, 964, 966, 970, 972, 974, 983, 991, 1009, 1023], "bayesian": [27, 54, 165, 176, 182, 186, 217, 242, 244, 248, 249, 250, 402, 423, 510, 514, 518, 630, 631, 642, 643, 780, 781, 845, 847, 859, 864, 956, 987, 989, 1003, 1004, 1015, 1022], "domingo": [27, 773, 967], "pazzani": 27, "proc": [27, 79, 395, 405, 436, 675, 679, 819, 956, 964, 969, 973], "13th": 27, "intl": [27, 401], "1996": [27, 397, 404, 408, 430, 502, 503, 504, 541, 542, 977], "zadrozni": [27, 395, 423, 662], "bianca": 27, "charl": [27, 749, 1009, 1012, 1015, 1019, 1021, 1024], "elkan": [27, 311, 395, 423, 429, 433, 445, 662, 1015, 1019, 1020, 1022, 1023], "vol": [27, 158, 182, 264, 369, 397, 460, 545, 546, 614, 621, 631, 650, 671, 672, 780, 809, 821, 957, 969, 970], "2001": [27, 155, 170, 257, 394, 397, 404, 423, 437, 438, 439, 448, 497, 545, 546, 550, 551, 614, 620, 625, 631, 677, 682, 720, 773, 865, 877, 909, 957, 963, 967, 973, 975, 977, 979, 982], "561": [27, 28, 397], "plot_compare_calibr": [27, 28], "389": [28, 202, 217, 579, 580, 1002], "auto_examples_calibr": 28, "calibr": [28, 30, 216, 361, 385, 498, 501, 550, 555, 644, 662, 695, 714, 726, 769, 772, 773, 810, 822, 881, 884, 956, 963, 967, 980, 982, 989, 1004, 1006, 1013, 1015], "discrimin": [29, 35, 104, 142, 144, 165, 174, 213, 220, 234, 287, 361, 369, 395, 404, 461, 498, 535, 536, 552, 768, 833, 956, 964, 967, 970, 981, 983, 989, 1000, 1004, 1012], "ellipsoid": [29, 35, 165, 242, 243, 250, 535, 536, 780, 781, 961, 966], "ledoit": [29, 35, 77, 78, 82, 83, 165, 459, 461, 465, 466, 498, 535, 961], "wolf": [29, 35, 77, 78, 82, 83, 165, 459, 461, 465, 466, 498, 535, 961, 1016], "oa": [29, 35, 77, 83, 165, 399, 455, 456, 459, 460, 462, 463, 498, 535, 782, 961], "hand": [29, 35, 86, 89, 97, 100, 116, 123, 142, 155, 165, 168, 169, 191, 205, 223, 230, 231, 233, 255, 260, 267, 330, 358, 366, 367, 369, 372, 374, 378, 380, 384, 391, 402, 403, 404, 406, 488, 629, 683, 699, 773, 810, 865, 889, 956, 960, 963, 967, 969, 971, 975, 980, 982, 991, 993, 996, 999, 1000], "built": [30, 86, 111, 119, 121, 170, 206, 261, 291, 310, 349, 358, 370, 372, 373, 374, 376, 378, 380, 381, 383, 384, 385, 388, 391, 396, 397, 398, 401, 404, 406, 431, 489, 539, 540, 541, 542, 547, 548, 574, 575, 579, 583, 625, 626, 627, 628, 629, 632, 633, 638, 644, 646, 647, 648, 649, 658, 659, 660, 661, 667, 785, 786, 793, 815, 818, 824, 825, 894, 895, 951, 963, 967, 968, 980, 981, 983, 987, 991, 1002, 1009, 1012, 1013, 1015, 1021], "enabl": [30, 50, 72, 121, 169, 206, 221, 302, 311, 313, 314, 339, 370, 372, 377, 380, 383, 385, 388, 393, 396, 397, 398, 402, 404, 405, 435, 520, 521, 527, 545, 546, 547, 548, 549, 565, 566, 576, 577, 588, 596, 780, 781, 782, 785, 844, 845, 857, 858, 881, 884, 885, 886, 887, 888, 889, 890, 899, 934, 957, 959, 964, 966, 967, 970, 977, 978, 981, 982, 988, 991, 1009, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "troubl": [30, 405], "ovr": [30, 190, 213, 276, 310, 339, 644, 645, 773, 813, 884, 886, 889, 963, 967, 968, 982, 1009, 1014, 1015, 1017, 1018, 1019, 1023, 1024], "gpc": [30, 149, 160, 165, 490, 596, 597, 599, 600, 605, 606, 608, 609, 689, 726, 989, 1004, 1019], "accuracy_scor": [30, 110, 151, 262, 305, 321, 343, 354, 384, 543, 550, 694, 714, 715, 719, 723, 727, 768, 769, 772, 777, 779, 956, 967, 1010, 1011, 1012, 1021], "gaussian_process": [30, 31, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 361, 385, 407, 629, 968, 1012, 1015, 1016], "gaussianprocessclassifi": [30, 31, 151, 152, 153, 154, 158, 385, 407, 597, 605, 606, 608, 609, 968, 1015, 1017, 1019, 1023], "iri": [30, 41, 45, 74, 88, 93, 94, 99, 106, 107, 108, 121, 131, 134, 139, 143, 149, 160, 165, 176, 181, 191, 217, 240, 245, 252, 263, 264, 267, 268, 281, 289, 295, 312, 317, 324, 325, 326, 330, 333, 341, 347, 352, 353, 365, 366, 384, 397, 398, 401, 402, 404, 482, 490, 527, 535, 539, 543, 550, 596, 608, 617, 662, 782, 796, 879, 880, 881, 884, 889, 892, 896, 897, 898, 956, 957, 961, 966, 967, 970, 974, 977, 980, 981, 982, 983, 993, 1000, 1001, 1004, 1022], "load_iri": [30, 41, 45, 74, 90, 99, 102, 104, 106, 119, 121, 131, 139, 143, 152, 181, 191, 207, 240, 245, 252, 263, 264, 265, 267, 268, 281, 286, 289, 295, 310, 312, 315, 323, 326, 327, 330, 333, 349, 352, 384, 391, 397, 398, 401, 404, 406, 547, 553, 588, 596, 605, 606, 608, 609, 617, 644, 645, 773, 782, 785, 786, 788, 796, 812, 833, 879, 880, 881, 892, 894, 896, 897, 898, 957, 962, 967, 968, 969, 970, 974, 977, 983, 993, 999, 1000, 1001, 1015, 1017, 1020], "saga": [30, 189, 213, 214, 644, 645, 658, 660, 673, 796, 963, 1016, 1018], "multi_class": [30, 190, 213, 267, 310, 555, 596, 644, 645, 773, 818, 884, 963, 968, 982, 1009, 1013, 1017, 1022, 1024], "n_classifi": [30, 555, 556], "xx": [30, 34, 42, 58, 80, 119, 123, 128, 139, 152, 153, 154, 169, 185, 205, 208, 209, 210, 211, 212, 224, 227, 234, 247, 284, 294, 302, 303, 323, 329, 330, 334, 335, 336, 339, 340, 376], "yy": [30, 34, 42, 58, 80, 119, 128, 139, 152, 154, 169, 205, 209, 210, 211, 212, 224, 227, 234, 284, 294, 302, 303, 323, 329, 330, 334, 335, 336, 339, 340], "xfull": 30, "imshow_handl": 30, "cax": [30, 153, 269], "orient": [30, 95, 168, 219, 300, 385, 896, 964], "horizont": [30, 95, 219, 232, 300, 303, 377, 385, 450, 501, 683, 687], "203": [30, 35, 53], "plot_classification_prob": [30, 35], "salt": [31, 232, 302, 1023], "convei": [31, 224, 302, 1000], "particularli": [31, 70, 71, 74, 105, 128, 199, 229, 258, 302, 311, 340, 354, 358, 372, 381, 385, 397, 398, 400, 403, 405, 482, 788, 821, 921, 935, 936, 963, 964, 967, 969, 988, 991, 1001, 1009, 1014, 1016, 1017, 1023], "linearli": [31, 100, 112, 168, 177, 212, 220, 227, 267, 268, 302, 305, 334, 343, 358, 369, 383, 402, 404, 501, 628, 693, 967, 970, 973, 982, 1000, 1016, 1025], "semi": [31, 234, 302, 312, 324, 361, 367, 385, 474, 490, 521, 574, 576, 662, 714, 810, 844, 848, 879, 880, 881, 889, 965, 970, 973, 989, 1004, 1009, 1021, 1024], "transpar": [31, 302, 952, 991], "ga\u00ebl": [31, 45, 51, 73, 89, 90, 102, 181, 195, 196, 302, 334, 335, 386, 991], "modifi": [31, 45, 51, 73, 75, 89, 90, 181, 182, 195, 196, 208, 219, 220, 221, 245, 335, 340, 370, 372, 374, 376, 385, 397, 404, 407, 429, 433, 440, 445, 454, 468, 469, 470, 471, 481, 496, 567, 596, 597, 599, 605, 662, 664, 675, 679, 714, 715, 753, 768, 769, 772, 902, 963, 980, 981, 988, 999, 1003, 1004, 1009, 1011, 1012, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1024], "listedcolormap": [31, 119, 281, 286, 289, 294, 302], "make_moon": [31, 44, 62, 227, 258, 294, 295, 302, 368, 956, 1016, 1020], "make_circl": [31, 44, 62, 100, 128, 224, 294, 295, 302, 320, 368, 1010, 1017, 1020], "neural_network": [31, 165, 169, 237, 293, 294, 295, 296, 297, 360, 361, 383, 968, 971, 1011], "mlpclassifi": [31, 165, 293, 294, 296, 298, 360, 488, 490, 500, 508, 557, 840, 842, 854, 968, 971, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "kneighborsclassifi": [31, 131, 138, 280, 281, 286, 287, 305, 312, 314, 343, 404, 588, 827, 831, 832, 833, 834, 835, 968, 970, 1000, 1009, 1019, 1021, 1022, 1023, 1024, 1025], "decisiontreeclassifi": [31, 109, 110, 112, 119, 131, 262, 348, 349, 352, 385, 404, 539, 541, 543, 545, 547, 550, 617, 788, 808, 893, 894, 896, 897, 898, 957, 968, 983, 1010, 1011, 1013, 1014, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "adaboostclassifi": [31, 109, 110, 112, 119, 404, 540, 545, 547, 1011, 1012, 1015, 1016, 1018, 1019, 1022, 1024, 1025], "discriminant_analysi": [31, 33, 34, 104, 220, 287, 354, 361, 393, 522, 833, 961, 968, 1009, 1012, 1013, 1014, 1015, 1016], "quadraticdiscriminantanalysi": [31, 34, 535, 961, 968, 970, 1009, 1014, 1016, 1024], "decisionboundarydisplai": [31, 56, 112, 126, 131, 181, 190, 207, 261, 281, 286, 289, 305, 326, 327, 328, 331, 332, 349, 1023, 1024], "net": [31, 165, 176, 182, 189, 209, 217, 271, 378, 396, 401, 457, 458, 464, 487, 510, 543, 544, 545, 546, 550, 551, 552, 632, 633, 638, 643, 644, 645, 646, 647, 648, 649, 654, 662, 664, 667, 670, 840, 892, 893, 894, 895, 956, 967, 972, 981, 989, 991, 1004, 1009, 1014, 1018, 1019, 1021], "adaboost": [31, 108, 119, 134, 165, 505, 506, 539, 540, 545, 617, 689, 779, 810, 892, 893, 989, 1004, 1011], "qda": [31, 34, 369, 535, 536, 989, 1004, 1014], "025": [31, 200, 255, 676, 680], "n_clusters_per_class": [31, 91, 114, 144, 146, 255, 288, 294, 302, 377, 501], "uniform": [31, 37, 53, 122, 123, 126, 143, 151, 156, 159, 177, 178, 212, 224, 227, 230, 266, 281, 284, 285, 290, 294, 301, 303, 304, 307, 314, 329, 374, 377, 397, 424, 425, 537, 555, 556, 596, 597, 614, 625, 635, 636, 640, 654, 662, 663, 664, 685, 707, 708, 713, 730, 731, 733, 735, 736, 738, 770, 786, 794, 796, 819, 820, 823, 826, 827, 834, 835, 849, 861, 863, 873, 909, 923, 956, 957, 966, 967, 970, 1015, 1017, 1019, 1023, 1025], "linearly_separ": [31, 294], "ds_cnt": [31, 302, 303], "rdbu": [31, 95, 214, 294, 330, 335], "cm_bright": [31, 294, 302], "ff0000": [31, 286, 294], "0000ff": [31, 286, 294], "ep": [31, 44, 46, 49, 55, 65, 181, 183, 222, 231, 383, 397, 408, 430, 436, 441, 457, 458, 464, 617, 632, 633, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 667, 668, 669, 670, 676, 680, 700, 726, 836, 876, 877, 878, 979, 1024, 1025], "lstrip": [31, 44, 62, 227, 294, 302], "069": [31, 35, 256], "plot_classifier_comparison": [31, 35, 302], "8x8": [32, 89, 189, 231, 287, 297, 369, 488, 999], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 58, 72, 73, 89, 137, 138, 145, 189, 205, 220, 231, 232, 256, 257, 260, 266, 273, 280, 282, 287, 295, 297, 318, 319, 378, 398, 431, 432, 518, 519, 520, 521, 585, 586, 624, 625, 654, 674, 675, 676, 677, 993, 997, 998, 999, 1000, 1001, 1015, 1020], "set_axis_off": 32, "gray_r": [32, 89, 98, 153, 220, 297, 318, 319, 999], "entir": [32, 162, 198, 206, 297, 300, 311, 352, 354, 366, 373, 374, 385, 391, 397, 401, 403, 405, 458, 478, 520, 574, 575, 576, 577, 633, 637, 639, 641, 644, 645, 647, 649, 651, 652, 654, 662, 668, 669, 719, 779, 812, 813, 816, 841, 843, 844, 857, 869, 870, 872, 873, 874, 875, 936, 956, 957, 967, 977, 981, 983, 1000, 1018, 1019], "97": [32, 105, 171, 234, 249, 297, 319, 330, 369, 378, 384, 401, 644, 968, 977, 1009], "98": [32, 34, 42, 44, 54, 62, 64, 82, 98, 227, 256, 294, 297, 302, 319, 369, 376, 401, 404, 645, 819, 962, 969, 997, 1002], "86": [32, 70, 144, 189, 302, 318, 319, 773, 892, 967, 998], "92": [32, 34, 50, 98, 144, 174, 256, 297, 318, 319, 330, 367, 369, 524, 526, 533, 548, 583, 782, 796, 962, 1002], "899": [32, 256, 322], "confus": [32, 165, 251, 267, 274, 318, 319, 343, 385, 454, 490, 617, 638, 683, 699, 701, 704, 714, 715, 723, 739, 769, 772, 810, 882, 889, 1002, 1009, 1010, 1014, 1018, 1019, 1021, 1022, 1023, 1024], "figure_": [32, 169, 237, 310, 312, 379, 424, 617, 618, 683, 684, 686, 687, 688, 788], "confusion_matrix": [32, 228, 252, 318, 319, 683, 699, 739, 807, 967, 1002, 1010, 1015, 1016, 1019, 1020, 1022], "ground": [32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 126, 158, 182, 192, 198, 199, 249, 261, 344, 385, 396, 397, 689, 690, 691, 694, 698, 699, 700, 701, 703, 704, 707, 708, 709, 713, 714, 715, 719, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 768, 769, 770, 771, 772, 778, 779, 967, 980, 993, 1001, 1017], "truth": [32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 103, 126, 158, 182, 192, 198, 199, 249, 261, 344, 385, 396, 397, 689, 690, 691, 694, 698, 699, 700, 701, 703, 704, 707, 708, 709, 711, 713, 714, 715, 719, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 768, 769, 770, 771, 772, 778, 779, 967, 993, 1001, 1017, 1023], "gt": [32, 71, 72, 115, 130, 168, 248, 256, 270, 370, 372, 376], "rebuilt": [32, 824, 825], "498": [32, 35, 302, 308], "plot_digits_classif": [32, 35], "oracl": [33, 198, 216, 410, 455, 456, 459, 460, 461, 462, 961, 1009], "shrinkag": [33, 77, 79, 82, 83, 103, 125, 165, 289, 410, 455, 456, 459, 460, 461, 462, 463, 465, 466, 467, 525, 529, 535, 547, 548, 782, 963, 977, 989, 1004, 1009, 1013, 1014, 1016], "lineardiscriminantanalysi": [33, 34, 104, 220, 287, 354, 393, 522, 536, 833, 961, 968, 970, 1009, 1012, 1013, 1014, 1015, 1016, 1018, 1021, 1023, 1024, 1025], "200": [33, 34, 44, 50, 54, 60, 75, 98, 112, 121, 123, 129, 143, 148, 154, 184, 193, 199, 202, 203, 204, 210, 215, 220, 238, 243, 259, 265, 267, 268, 300, 303, 320, 322, 329, 330, 351, 354, 367, 374, 383, 402, 404, 409, 426, 440, 454, 457, 458, 519, 520, 521, 524, 525, 526, 529, 533, 570, 635, 637, 657, 665, 678, 796, 841, 842, 882, 886, 887, 888, 889, 890, 982], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 131, 132, 404, 555], "lsqr": [33, 307, 535, 658, 660, 673, 961, 1010, 1016, 1023], "clf2": [33, 131, 132, 374, 391, 404, 555], "store_precis": [33, 79, 455, 456, 459, 460, 461, 462], "assume_cent": [33, 79, 399, 410, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466], "clf3": [33, 131, 132, 374, 404, 555], "covariance_estim": [33, 535, 961, 1021], "features_samples_ratio": 33, "gold": [33, 192, 199, 201, 204, 208, 212, 215, 244, 249, 265, 284, 329, 378], "navi": [33, 70, 79, 99, 104, 105, 129, 177, 201, 209, 222, 244, 245, 246, 249, 265, 267, 273, 283, 290, 320, 351], "163": [33, 35, 369, 975], "plot_lda": [33, 35], "doubl": [34, 116, 270, 372, 385, 402, 524, 526, 533, 685, 824, 825, 835, 951, 957, 982, 983, 1009, 1019, 1020], "deviat": [34, 61, 80, 113, 116, 117, 118, 119, 147, 150, 155, 157, 159, 168, 177, 204, 255, 256, 257, 258, 259, 261, 284, 285, 300, 305, 364, 368, 369, 377, 381, 385, 401, 404, 436, 458, 487, 497, 498, 499, 500, 502, 503, 504, 508, 510, 511, 516, 538, 580, 597, 620, 630, 631, 657, 709, 737, 788, 830, 853, 854, 864, 873, 874, 875, 963, 967, 973, 977, 1000, 1015, 1016, 1017, 1020, 1021, 1022], "own": [34, 116, 216, 248, 278, 280, 320, 344, 359, 366, 375, 376, 377, 380, 381, 388, 396, 397, 409, 413, 426, 440, 519, 543, 550, 632, 780, 781, 826, 827, 828, 830, 832, 834, 835, 836, 858, 892, 894, 910, 915, 935, 963, 969, 970, 973, 977, 982, 991, 1001, 1002, 1016, 1017, 1019], "mpl": [34, 243, 244, 245, 249, 300], "linearsegmentedcolormap": 34, "red_blue_class": 34, "register_cmap": 34, "plot_lda_qda": [34, 35], "matplotlibdeprecationwarn": 34, "minor": [34, 261, 265, 367, 375, 386, 482, 967, 1009, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "dataset_fixed_cov": 34, "dim": [34, 207, 231, 281, 286, 287, 289, 326, 327, 513, 685], "dataset_cov": 34, "matric": [34, 40, 80, 82, 95, 203, 244, 245, 247, 248, 249, 278, 291, 311, 322, 343, 344, 364, 366, 374, 375, 383, 384, 385, 396, 397, 398, 399, 400, 402, 405, 406, 412, 436, 437, 439, 450, 459, 468, 469, 470, 520, 521, 524, 526, 527, 530, 533, 535, 536, 541, 542, 549, 552, 567, 568, 575, 629, 644, 650, 658, 660, 673, 739, 745, 753, 759, 763, 764, 765, 766, 775, 780, 781, 810, 828, 831, 836, 847, 851, 853, 856, 859, 861, 862, 864, 867, 869, 871, 873, 874, 875, 876, 877, 886, 887, 889, 890, 900, 921, 927, 931, 938, 940, 941, 957, 961, 964, 965, 966, 968, 970, 971, 979, 981, 982, 987, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "linalg": [34, 54, 78, 79, 82, 101, 103, 105, 184, 243, 244, 245, 248, 249, 372, 378, 402, 437, 438, 439, 448, 518, 521, 527, 530, 643, 658, 660, 673, 677, 681, 919], "plot_data": 34, "fig_index": 34, "splot": [34, 244, 249], "tp": [34, 397, 698, 704, 716, 767, 768, 769, 772, 896, 967], "tp0": 34, "tp1": 34, "x0_tp": 34, "x0_fp": 34, "x1_tp": 34, "x1_fp": 34, "990000": 34, "dark": [34, 113, 168, 330, 367], "000099": 34, "pcolormesh": [34, 128, 139, 181, 281, 286, 326, 330, 334, 617], "white": [34, 58, 60, 95, 155, 168, 212, 219, 284, 297, 302, 323, 329, 402, 405, 407, 611, 983, 1009, 1012, 1015, 1019, 1023], "means_": [34, 243, 244, 245, 246, 248, 249, 535, 536, 780, 781], "yellow": [34, 92, 330, 968], "markers": [34, 49, 55, 58, 61, 63, 64, 123, 153, 157, 230, 314], "markeredgecolor": [34, 49, 55, 61, 63, 64], "plot_ellips": [34, 243], "cov": [34, 82, 86, 112, 248, 372, 385, 388, 390, 400, 410, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 505, 518, 520, 527, 534], "eigh": [34, 243, 244, 245, 248, 249, 402, 409, 519, 521, 1024], "arctan": [34, 244, 249, 368, 504], "180": [34, 243, 244, 245, 248, 249, 287, 291, 344, 378, 407, 488], "ell": [34, 243, 244, 245, 249, 394], "patch": [34, 50, 243, 244, 245, 248, 249, 253, 367, 376, 383, 402, 404, 541, 542, 569, 570, 573, 1009, 1017], "ellips": [34, 227, 243, 244, 245, 248, 249, 973], "set_clip_box": [34, 243, 244, 245, 248, 249], "set_alpha": [34, 109, 243, 244, 245, 248, 249], "add_artist": [34, 220, 243, 244, 245, 248, 249], "plot_lda_cov": 34, "plot_qda_cov": 34, "svd": [34, 101, 103, 128, 220, 344, 381, 393, 400, 409, 437, 439, 468, 469, 471, 518, 519, 520, 521, 525, 526, 527, 530, 532, 535, 536, 650, 658, 659, 660, 671, 672, 673, 843, 921, 961, 1002, 1011, 1015, 1016, 1022, 1024], "store_covari": [34, 535, 536, 1014, 1016], "tight": [34, 40, 105, 112, 119, 139, 143, 183, 185, 190, 191, 192, 202, 203, 207, 210, 212, 215, 221, 224, 247, 278, 284, 285, 289, 290, 326, 329, 330, 333, 334, 335, 349, 568, 678, 1021], "260": [35, 79, 83, 245, 250, 257, 351, 353, 1022], "auto_examples_classif": 35, "handwritten": [36, 68, 165, 218, 223, 225, 231, 256, 296, 297, 318, 319, 365, 397, 404, 433, 488, 527, 530, 535, 552, 674, 675, 676, 677, 678, 690, 691, 703, 722, 776, 778, 833, 845, 854, 864, 877, 964, 970, 993, 1004], "hierarch": [36, 40, 54, 68, 165, 171, 314, 385, 405, 427, 429, 431, 432, 490, 498, 500, 508, 516, 533, 716, 837, 864, 984, 988, 1003, 1004, 1009, 1012, 1013, 1025], "coin": [36, 68, 165, 397, 405, 427, 448, 979, 1001], "shift": [36, 44, 68, 165, 177, 222, 248, 283, 297, 300, 399, 403, 426, 434, 444, 447, 455, 498, 501, 675, 679, 830, 853, 977, 1003, 1004, 1009, 1013, 1017], "chanc": [36, 49, 68, 165, 198, 206, 213, 216, 258, 264, 267, 268, 306, 344, 354, 371, 397, 401, 686, 688, 690, 691, 694, 702, 740, 742, 771, 778, 809, 967, 975, 983, 1025], "agglom": [36, 44, 47, 68, 165, 397, 427, 431, 488, 677, 763, 837, 1012], "bisect": [36, 68, 165, 429, 433, 498, 1023], "quantiz": [36, 68, 165, 366, 367, 397, 429, 433, 435, 492, 764, 849, 941, 977], "birch": [36, 44, 68, 165, 314, 360, 385, 432, 435, 498, 1003, 1004, 1013, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025], "toi": [36, 49, 53, 57, 68, 86, 99, 113, 126, 131, 132, 165, 180, 188, 212, 226, 241, 243, 295, 327, 337, 365, 378, 383, 404, 405, 426, 427, 428, 430, 432, 434, 435, 436, 438, 444, 455, 498, 500, 508, 549, 625, 663, 711, 741, 781, 830, 837, 845, 864, 888, 964, 966, 967, 973, 977, 1004], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 56, 67, 68, 165, 171, 426, 427, 431, 432, 449, 498, 500, 508, 864, 987, 1001, 1012, 1017, 1020], "dbscan": [36, 44, 55, 65, 68, 165, 383, 385, 432, 436, 438, 441, 498, 690, 691, 703, 722, 776, 778, 836, 864, 970, 1003, 1004, 1009, 1011, 1013, 1014, 1016, 1017, 1018, 1025], "hdbscan": [36, 44, 68, 165, 430, 498, 864, 957, 987, 1003, 1004, 1025], "optic": [36, 44, 68, 165, 314, 365, 408, 430, 432, 441, 442, 443, 488, 1003, 1004, 1018, 1022, 1023, 1024, 1025], "affin": [36, 44, 68, 165, 300, 364, 374, 385, 396, 402, 426, 427, 431, 438, 440, 448, 498, 521, 677, 681, 690, 691, 703, 722, 776, 778, 880, 961, 964, 967, 1003, 1004, 1009, 1010, 1013, 1019, 1020, 1022, 1024], "propag": [36, 68, 165, 317, 324, 367, 396, 426, 440, 488, 498, 500, 683, 690, 691, 699, 700, 703, 704, 722, 776, 778, 844, 858, 879, 880, 881, 933, 934, 971, 989, 1003, 1004, 1009, 1021, 1024], "agglomer": [36, 68, 165, 364, 397, 405, 431, 488, 586, 592, 631, 782, 787, 844, 1004], "unstructur": [36, 68, 165, 296, 397, 427, 431, 449, 489, 516, 837, 979, 991, 1013], "dendrogram": [36, 68, 165, 171, 397, 427, 431, 490, 1021], "pictur": [36, 68, 165, 231, 249, 367, 386, 397, 402, 405, 448, 479, 480, 507, 988], "greek": [36, 68, 165, 397, 448], "silhouett": [36, 38, 49, 57, 58, 68, 165, 344, 372, 433, 498, 775, 776, 1009, 1013], "embed": [36, 44, 46, 68, 115, 150, 165, 218, 221, 223, 225, 226, 241, 278, 287, 378, 385, 396, 397, 427, 438, 448, 475, 488, 530, 535, 552, 568, 625, 674, 675, 676, 677, 678, 679, 680, 681, 682, 833, 845, 854, 876, 877, 878, 959, 970, 973, 979, 984, 1003, 1004, 1009, 1010, 1020, 1021, 1023], "explor": [37, 113, 114, 223, 224, 259, 260, 266, 267, 307, 312, 330, 344, 354, 366, 369, 371, 378, 391, 397, 404, 458, 782, 785, 793, 865, 956, 963, 964, 966, 972, 974, 975, 977, 991, 996, 1002, 1015], "uniformli": [37, 116, 123, 142, 227, 243, 310, 374, 502, 503, 504, 537, 628, 786, 794, 796, 863, 956, 957, 967, 970, 977, 1013, 1018], "divid": [37, 43, 48, 91, 95, 144, 155, 198, 243, 344, 354, 368, 369, 394, 397, 401, 402, 455, 456, 457, 458, 459, 460, 461, 462, 498, 505, 520, 527, 636, 637, 640, 641, 642, 650, 651, 662, 663, 664, 705, 711, 719, 723, 741, 777, 779, 841, 842, 886, 889, 921, 924, 925, 956, 964, 966, 967, 970, 977, 981, 1002, 1009, 1016, 1017, 1020], "randomli": [37, 48, 50, 61, 71, 88, 93, 113, 126, 162, 165, 169, 202, 215, 231, 234, 248, 253, 264, 276, 318, 354, 359, 381, 383, 384, 397, 401, 404, 407, 435, 444, 498, 501, 505, 509, 517, 523, 531, 532, 537, 545, 546, 549, 550, 551, 596, 597, 657, 665, 676, 680, 702, 780, 781, 840, 878, 892, 893, 894, 895, 966, 968, 970, 973, 975, 979, 983, 1000, 1002, 1020, 1024], "quiroz": [37, 57, 116, 177, 182, 259, 261, 305, 343, 344, 345], "fundament": [37, 49, 81, 344, 370, 384, 400, 482, 524, 526, 533, 694, 963, 967], "homogen": [37, 38, 39, 44, 46, 49, 55, 58, 344, 367, 383, 385, 399, 404, 407, 432, 600, 690, 703, 716, 721, 722, 742, 778, 964, 965, 967, 1018], "frequent": [37, 163, 261, 267, 268, 344, 361, 369, 372, 405, 537, 576, 616, 834, 857, 858, 861, 873, 957, 959, 967, 981, 985, 988], "ari": [37, 58, 344, 397, 691, 1014, 1020], "mutual": [37, 38, 49, 55, 58, 141, 148, 165, 404, 406, 432, 578, 581, 582, 585, 586, 592, 593, 594, 595, 690, 691, 701, 740, 742, 771, 778, 956, 963, 967, 968, 1009, 1015, 1025], "mi": [37, 142, 397, 593, 594, 690, 740, 742, 957, 967, 981], "theoret": [37, 57, 150, 396, 397, 404, 539, 540, 625, 690, 711, 741, 884, 956, 964, 966, 967, 969, 979, 981, 982, 990, 991], "nmi": [37, 397, 703, 721, 722, 742], "ami": [37, 49, 58, 397, 690], "score_func": [37, 71, 72, 578, 581, 582, 584, 585, 586, 727, 1009, 1011], "rand_scor": [37, 397, 701, 967, 1021], "adjusted_rand_scor": [37, 38, 49, 58, 344, 397, 690, 701, 727, 742, 771, 967, 1022], "mutual_info_scor": [37, 397, 690, 967, 1017, 1020, 1021], "normalized_mutual_info_scor": [37, 397, 721, 740, 778, 967, 1017, 1023], "adjusted_mutual_info_scor": [37, 38, 49, 58, 397, 691, 701, 740, 742, 771, 967, 1009, 1017, 1021, 1025], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 61, 174, 344], "seaborn": [37, 109, 111, 167, 168, 177, 182, 248, 258, 281, 372, 388, 390, 987], "sn": [37, 109, 111, 167, 168, 177, 182, 248, 258, 281], "color_palett": [37, 109, 111, 248], "colorblind": [37, 109, 111], "vx": 37, "errorbar": [37, 61, 79, 81, 146, 156, 157, 280, 321, 333, 788], "refer": [37, 38, 60, 63, 71, 124, 130, 147, 159, 216, 265, 288, 300, 310, 311, 312, 313, 314, 315, 344, 359, 361, 370, 372, 373, 374, 376, 377, 378, 379, 380, 383, 384, 385, 386, 388, 391, 398, 408, 409, 410, 423, 424, 425, 426, 428, 430, 432, 433, 434, 436, 437, 438, 439, 440, 443, 448, 449, 450, 453, 455, 458, 459, 460, 461, 484, 489, 497, 499, 501, 502, 503, 504, 505, 506, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 530, 533, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 576, 579, 580, 581, 588, 593, 594, 596, 597, 600, 605, 608, 609, 613, 614, 617, 618, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 633, 635, 637, 639, 641, 642, 644, 647, 649, 651, 652, 653, 654, 657, 659, 661, 662, 664, 665, 668, 669, 674, 675, 676, 677, 678, 679, 680, 681, 682, 687, 690, 691, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 719, 720, 721, 722, 723, 725, 726, 728, 741, 743, 744, 754, 768, 770, 771, 773, 774, 775, 776, 778, 780, 781, 782, 784, 785, 786, 788, 796, 804, 805, 806, 807, 808, 809, 811, 814, 815, 819, 820, 821, 823, 829, 830, 831, 833, 840, 841, 842, 850, 851, 860, 861, 865, 872, 877, 878, 879, 880, 881, 884, 886, 887, 889, 890, 892, 893, 894, 895, 909, 921, 933, 978, 988, 993, 997, 1001, 1002, 1009, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "satur": [37, 168, 300], "uniform_labelings_scor": 37, "nwith": [37, 57, 61, 146, 344], "constantli": [37, 198, 991], "unbound": [37, 966, 1023], "cardin": [37, 117, 118, 124, 170, 306, 307, 397, 404, 449, 539, 540, 543, 544, 545, 546, 550, 551, 552, 665, 857, 858, 865, 892, 893, 894, 895, 967, 968, 975, 977, 1023, 1024], "why": [37, 52, 95, 116, 168, 170, 174, 187, 255, 258, 343, 344, 372, 380, 385, 397, 399, 402, 408, 430, 433, 437, 967, 969, 982, 997, 1000, 1012], "chart": [37, 263, 968, 995, 1012], "henc": [37, 60, 72, 168, 202, 231, 267, 330, 343, 344, 358, 367, 374, 376, 378, 385, 397, 401, 404, 405, 473, 494, 525, 527, 528, 529, 549, 576, 629, 632, 638, 646, 648, 658, 673, 690, 691, 695, 701, 716, 742, 771, 778, 801, 802, 819, 820, 821, 822, 823, 859, 964, 966, 967, 968, 973, 974, 977, 988, 1016, 1017, 1020, 1021, 1023], "safe": [37, 168, 187, 344, 372, 374, 397, 398, 420, 494, 495, 574, 577, 759, 763, 878, 933, 939, 970, 1015, 1016, 1017, 1022, 1023], "stabil": [37, 114, 168, 202, 220, 263, 300, 344, 385, 394, 432, 636, 640, 656, 822, 841, 842, 860, 872, 920, 957, 963, 966, 977, 988, 993, 1009, 1013, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "mislead": [37, 117, 118, 124, 168, 373, 387, 404, 539, 540, 543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895, 1004, 1022], "meaning": [37, 224, 287, 345, 394, 401, 405, 406, 407, 534, 714, 715, 723, 768, 769, 772, 833, 971, 981, 982, 1009, 1025], "plot_adjusted_for_chance_measur": [37, 68], "brendan": [38, 426, 440], "frei": [38, 426, 440, 1019], "delbert": [38, 426, 440], "dueck": [38, 426, 440], "messag": [38, 44, 62, 70, 95, 343, 344, 367, 370, 371, 372, 376, 377, 380, 381, 397, 426, 440, 454, 525, 529, 534, 560, 613, 698, 782, 785, 786, 788, 796, 808, 811, 813, 833, 841, 842, 882, 903, 904, 905, 908, 911, 930, 951, 967, 977, 1009, 1013, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "feb": [38, 426, 440], "affinitypropag": [38, 44, 314, 397, 1009, 1012, 1013, 1017, 1020, 1022, 1023, 1024, 1025], "labels_tru": [38, 49, 55, 64, 397, 690, 691, 700, 701, 703, 716, 721, 722, 740, 742, 771, 778], "af": 38, "prefer": [38, 44, 55, 249, 267, 300, 354, 358, 359, 360, 370, 372, 373, 374, 385, 397, 401, 402, 404, 405, 426, 440, 457, 458, 464, 473, 494, 495, 613, 618, 619, 640, 644, 645, 687, 711, 713, 742, 743, 833, 859, 884, 885, 926, 933, 956, 959, 961, 963, 967, 972, 982, 983, 987, 1000, 1010, 1016, 1018, 1022, 1023], "cluster_centers_indic": [38, 440], "cluster_centers_indices_": [38, 426], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 55, 58, 61, 62, 63, 65, 67, 314, 344, 372, 385, 397, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 441, 1001, 1014], "n_clusters_": [38, 49, 55, 63, 427, 431], "homogeneity_scor": [38, 49, 58, 344, 397, 703, 721, 778, 967], "completeness_scor": [38, 49, 58, 311, 344, 397, 721, 722, 778, 967], "silhouette_scor": [38, 49, 58, 60, 344, 372, 397, 1009, 1013, 1015, 1017, 1019, 1023], "sqeuclidean": [38, 436, 443, 763, 764, 765], "872": [38, 216, 217, 975], "912": 38, "871": [38, 80, 81, 399, 460], "753": [38, 343], "cycler": 38, "viridi": [38, 278, 683], "class_memb": 38, "cluster_cent": [38, 61, 63, 64, 447], "346": [38, 68, 270, 274, 404, 487, 541, 542], "plot_affinity_propag": [38, 68, 426, 440], "impos": [39, 57, 127, 192, 306, 383, 397, 402, 404, 405, 513, 643, 963], "simpli": [39, 86, 128, 150, 158, 223, 234, 267, 291, 312, 313, 358, 367, 372, 374, 377, 383, 385, 399, 400, 401, 402, 404, 405, 471, 681, 747, 750, 851, 923, 959, 967, 968, 969, 970, 981, 994, 1002, 1016, 1017, 1018], "There": [39, 46, 116, 150, 216, 223, 236, 249, 253, 255, 258, 343, 365, 367, 369, 372, 373, 374, 377, 383, 385, 386, 388, 394, 396, 397, 402, 404, 405, 406, 432, 438, 448, 520, 539, 540, 545, 546, 574, 575, 577, 592, 631, 957, 963, 964, 965, 966, 967, 970, 974, 977, 981, 982, 983, 986, 990, 1001, 1009, 1017], "singl": [39, 48, 52, 53, 55, 58, 61, 62, 72, 108, 111, 119, 120, 121, 129, 134, 147, 150, 156, 162, 165, 169, 171, 174, 182, 198, 200, 237, 239, 248, 254, 267, 296, 314, 330, 343, 344, 345, 349, 351, 354, 358, 359, 366, 367, 372, 377, 379, 380, 381, 383, 384, 385, 395, 396, 398, 400, 401, 402, 404, 405, 406, 420, 423, 426, 427, 431, 432, 433, 435, 440, 450, 452, 453, 479, 480, 482, 492, 495, 520, 539, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 568, 578, 585, 586, 588, 592, 613, 618, 620, 629, 652, 653, 659, 662, 663, 664, 676, 678, 680, 696, 707, 708, 709, 710, 721, 722, 723, 726, 759, 770, 780, 781, 782, 785, 786, 796, 803, 806, 807, 809, 810, 813, 821, 824, 825, 829, 841, 842, 843, 853, 854, 857, 858, 859, 864, 865, 879, 880, 892, 893, 894, 895, 900, 931, 935, 954, 956, 962, 963, 964, 967, 968, 970, 972, 974, 975, 977, 981, 982, 983, 987, 991, 993, 1000, 1002, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "unstabl": [39, 66, 168, 397, 399, 400, 675, 679, 920, 921, 983, 1013, 1014, 1016, 1021, 1023], "quickli": [39, 237, 295, 310, 369, 372, 373, 401, 404, 678, 963, 970, 971, 991, 1002, 1020], "fight": [39, 991], "percol": 39, "distanc": [39, 40, 55, 57, 60, 61, 65, 67, 77, 81, 83, 100, 162, 165, 171, 184, 199, 219, 221, 224, 231, 278, 280, 281, 286, 288, 290, 291, 300, 305, 310, 314, 315, 343, 344, 358, 369, 381, 383, 385, 394, 397, 399, 402, 403, 407, 408, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 441, 442, 443, 444, 445, 447, 448, 449, 454, 455, 456, 457, 458, 459, 460, 461, 462, 524, 526, 533, 593, 594, 601, 605, 606, 608, 609, 614, 644, 645, 652, 654, 660, 661, 662, 663, 664, 674, 675, 676, 678, 679, 680, 681, 682, 685, 689, 710, 719, 743, 745, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 763, 764, 765, 766, 775, 776, 779, 813, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 863, 878, 882, 884, 886, 888, 889, 890, 892, 893, 894, 895, 957, 961, 964, 965, 967, 973, 977, 979, 981, 982, 988, 1000, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "merg": [39, 41, 46, 51, 313, 370, 372, 375, 380, 383, 386, 397, 426, 427, 428, 431, 432, 449, 802, 1001, 1009, 1016], "exagger": [39, 168, 678, 964], "behaviour": [39, 100, 199, 200, 216, 332, 372, 385, 397, 404, 545, 546, 550, 551, 588, 882, 892, 893, 940, 956, 957, 967, 977, 1017, 1020, 1021, 1024], "shortest": [39, 377, 381, 674, 926, 964, 1022], "mechan": [39, 339, 343, 359, 374, 397, 405, 450, 843, 965, 983, 991], "resembl": 39, "brittl": [39, 397], "pronounc": [39, 40, 52, 155], "kneighbors_graph": [39, 44, 62, 67, 278, 385, 397, 427, 431, 826, 827, 828, 830, 832, 834, 835, 836, 838, 970, 1009, 1013, 1018], "geometri": [39, 397, 964, 970], "instabl": [39, 168, 288, 438, 521, 525, 529, 681, 1016, 1019, 1022], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 56, 62, 67, 385, 397, 426, 428, 431, 1001, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1024], "1500": [39, 50, 57, 62, 67, 92, 219, 223, 243], "knn_graph": 39, "include_self": [39, 44, 67, 837, 838, 1013], "107": [39, 68, 315, 397, 879, 968, 1011], "plot_agglomerative_clust": [39, 68], "waveform": 40, "euclidean": [40, 57, 58, 184, 231, 278, 286, 310, 315, 344, 394, 396, 397, 402, 403, 404, 405, 407, 426, 427, 430, 431, 432, 436, 438, 443, 446, 449, 517, 523, 575, 601, 605, 608, 609, 662, 664, 676, 678, 681, 682, 685, 747, 748, 754, 755, 756, 757, 763, 764, 765, 766, 775, 776, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 878, 957, 961, 965, 968, 970, 979, 988, 1013, 1016, 1017, 1018, 1019, 1025], "cityblock": [40, 44, 397, 436, 443, 747, 763, 764, 765, 970], "invari": [40, 369, 385, 397, 407, 600, 675, 732, 800, 801, 963, 964, 967, 982, 988, 1017, 1020, 1021, 1022], "ie": [40, 66, 96, 426, 690, 753, 963, 977], "inter": [40, 117, 354, 404, 702, 927], "character": [40, 216, 348, 397, 401, 964], "ill": [40, 82, 203, 457, 458, 464, 636, 637, 640, 641, 642, 668, 669, 963, 966, 1001, 1019], "recov": [40, 65, 82, 96, 97, 103, 120, 150, 167, 182, 197, 198, 219, 345, 399, 403, 406, 409, 446, 519, 545, 963, 964, 966, 988, 1001, 1015], "put": [40, 58, 139, 150, 152, 232, 238, 243, 294, 302, 314, 323, 334, 335, 340, 360, 374, 376, 377, 380, 407, 429, 433, 445, 501, 600, 633, 647, 780, 861, 865, 873, 886, 887, 888, 889, 890, 911, 957, 964, 966, 967, 968, 974, 977, 990, 994, 996, 1002, 1021], "cc": [40, 370], "patheffect": 40, "pairwise_dist": [40, 385, 397, 408, 427, 430, 431, 432, 436, 443, 674, 682, 747, 756, 764, 765, 775, 776, 828, 830, 832, 836, 965, 1009, 1013, 1015, 1017, 1018, 1020, 1021], "sqr": 40, "sign": [40, 79, 86, 96, 99, 112, 182, 248, 294, 338, 372, 397, 402, 405, 530, 568, 575, 592, 621, 622, 644, 645, 652, 654, 660, 661, 662, 663, 720, 727, 884, 888, 919, 921, 932, 963, 967, 972, 977, 981, 982, 1001, 1009, 1013, 1018, 1022, 1024], "phi": [40, 402, 728, 850, 959, 967, 977, 982], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "f7bd01": 40, "377eb8": [40, 44, 62, 63, 227], "f781bf": [40, 44, 62, 63], "set_label": [40, 153, 231], "avg_dist": [40, 766], "set_path_effect": 40, "withstrok": 40, "foreground": [40, 66], "cividi": 40, "vmin": [40, 82, 95, 98, 106, 153, 156, 177, 182, 189, 214, 232, 247, 253, 296, 330], "interclass": 40, "127": [40, 68, 122, 169, 243, 250, 344, 1009], "plot_agglomerative_clustering_metr": [40, 68], "hierarchi": [41, 171, 436, 442, 449, 972, 1001], "plot_dendrogram": 41, "kwarg": [41, 98, 374, 379, 411, 424, 450, 521, 524, 526, 603, 617, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 684, 685, 686, 688, 727, 824, 825, 843, 844, 848, 899, 918, 1016, 1020, 1022], "children_": [41, 427, 431, 449], "current_count": 41, "child_idx": 41, "leaf": [41, 115, 126, 128, 348, 352, 397, 404, 408, 427, 428, 429, 430, 431, 432, 436, 443, 449, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 892, 893, 894, 895, 896, 897, 970, 983, 1012, 1014, 1016, 1020, 1023], "linkage_matrix": 41, "column_stack": [41, 294, 302], "distances_": [41, 427, 431, 1021], "distance_threshold": [41, 427, 431, 1018, 1021], "truncate_mod": 41, "parenthesi": [41, 372], "plot_agglomerative_dendrogram": [41, 68], "scalabl": [42, 44, 62, 165, 173, 175, 251, 274, 315, 344, 372, 397, 404, 405, 434, 477, 488, 575, 626, 788, 799, 808, 810, 822, 845, 854, 856, 884, 886, 889, 890, 959, 962, 964, 967, 980, 982, 991, 1009, 1012, 1013, 1019, 1020, 1023, 1024], "hundr": [42, 122, 220, 304, 367, 401, 404, 547, 548, 964, 1020], "thousand": [42, 116, 231, 233, 304, 344, 367, 397, 404, 841, 842, 889, 964, 1002, 1018, 1020], "million": [42, 56, 155, 174, 405, 407, 678, 964, 982, 991, 1023, 1024], "chose": [42, 168, 997], "usag": [42, 53, 71, 74, 85, 99, 121, 144, 168, 169, 228, 232, 252, 281, 287, 289, 296, 326, 345, 358, 371, 372, 374, 375, 379, 380, 382, 385, 386, 388, 397, 401, 402, 407, 408, 430, 432, 436, 475, 547, 548, 595, 634, 644, 645, 646, 652, 654, 655, 662, 663, 664, 665, 666, 763, 766, 775, 776, 884, 892, 893, 894, 895, 921, 956, 959, 966, 967, 968, 970, 982, 989, 993, 997, 1004, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "enjoi": 42, "edit": [42, 369, 371, 372, 375, 376, 380, 383, 388, 516, 520, 814, 961, 963, 968, 974, 1002], "158": [42, 404, 655], "manojkumarsivaraj334": 42, "joblib": [42, 54, 72, 116, 278, 311, 367, 370, 372, 375, 381, 383, 385, 388, 390, 391, 396, 398, 408, 423, 427, 430, 431, 432, 434, 436, 438, 443, 444, 447, 450, 453, 458, 494, 517, 521, 522, 523, 525, 528, 529, 531, 532, 534, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 580, 588, 596, 618, 620, 625, 633, 637, 639, 641, 643, 644, 645, 647, 649, 651, 652, 654, 662, 665, 674, 675, 676, 677, 678, 679, 680, 759, 763, 766, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 826, 827, 830, 832, 834, 835, 837, 838, 843, 844, 845, 846, 879, 880, 933, 934, 935, 937, 952, 967, 988, 1009, 1010, 1012, 1014, 1016, 1017, 1018, 1020, 1021, 1024], "cpu_count": [42, 116, 278, 935], "n_center": [42, 498], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 57, 58, 165, 279, 292, 303, 314, 344, 368, 397, 428, 429, 432, 433, 434, 435, 438, 445, 446, 448, 490, 535, 617, 831, 989, 1004, 1009, 1013, 1016, 1021, 1025], "subcluster_centers_": [42, 428], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 64], "256": [42, 48, 53, 122, 209, 217, 306, 359, 367, 397, 404, 435, 454, 523, 532, 549, 840, 872, 882, 1002, 1023], "max_no_improv": [42, 61, 64, 435, 523, 524, 525, 532, 1023, 1024], "t_mini_batch": [42, 64], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 58, 60, 61, 63, 64, 95, 314, 344, 426, 429, 433, 434, 435, 1001], "plot_birch_vs_minibatchkmean": [42, 68], "bisectingkmean": [43, 397, 1023, 1024, 1025], "__doc__": [43, 75, 155, 236, 246, 385], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 62], "variant": [43, 95, 161, 164, 165, 258, 313, 314, 344, 345, 378, 397, 400, 402, 405, 407, 435, 446, 476, 479, 480, 498, 501, 529, 545, 546, 551, 601, 605, 608, 609, 613, 616, 624, 625, 627, 631, 658, 690, 783, 787, 789, 790, 791, 800, 806, 827, 845, 881, 957, 963, 964, 965, 966, 967, 969, 970, 981, 988, 1002, 1009, 1017], "algorithm_nam": 43, "algo": [43, 105], "hide": [43, 380, 819, 820, 821, 822, 823, 1012, 1017], "flat": [43, 95, 101, 169, 219, 220, 221, 256, 397, 405, 426, 432, 434, 447, 495, 974, 1001, 1009, 1010, 1025], "label_out": 43, "160": [43, 68, 234, 956, 1000], "plot_bisect_kmean": [43, 68], "null": [44, 71, 168, 169, 170, 258, 264, 397, 401, 634, 655, 666, 690, 716, 742, 778, 809, 963, 964, 967, 982, 1019], "mismatch": [44, 966, 1018], "warn": [44, 53, 62, 72, 198, 213, 261, 278, 295, 296, 303, 304, 307, 310, 358, 361, 372, 375, 376, 377, 385, 391, 405, 409, 433, 435, 445, 482, 519, 536, 539, 540, 543, 544, 545, 546, 550, 551, 552, 557, 558, 559, 560, 561, 562, 564, 588, 622, 656, 676, 679, 680, 698, 699, 714, 715, 723, 768, 769, 772, 819, 820, 821, 823, 848, 849, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 904, 905, 911, 921, 933, 935, 937, 953, 954, 956, 967, 977, 1000, 1009, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "noisy_circl": [44, 62], "noisy_moon": [44, 62], "no_structur": [44, 62], "anisotropicli": [44, 62], "170": [44, 57, 58, 62, 378], "x_aniso": [44, 57, 62], "aniso": [44, 62], "plot_num": [44, 62, 227], "default_bas": [44, 62], "quantil": [44, 53, 63, 91, 110, 112, 165, 176, 217, 300, 303, 304, 383, 404, 424, 425, 444, 505, 538, 546, 548, 643, 656, 708, 730, 733, 735, 807, 849, 861, 862, 863, 873, 874, 967, 977, 989, 1004, 1009, 1013, 1016, 1018, 1022, 1023, 1025], "damp": [44, 397, 426, 440], "min_sampl": [44, 49, 65, 383, 385, 397, 408, 430, 432, 436, 442, 443, 657, 963, 1018, 1022], "xi": [44, 65, 369, 397, 400, 405, 436, 442, 495, 981, 1020], "min_cluster_s": [44, 65, 397, 432, 436, 442, 1018], "allow_single_clust": [44, 432], "hdbscan_min_cluster_s": 44, "hdbscan_min_sampl": 44, "220": [44, 1009], "i_dataset": [44, 62, 227], "algo_param": [44, 62], "param": [44, 55, 61, 62, 71, 122, 124, 125, 219, 233, 256, 258, 266, 270, 282, 295, 372, 374, 385, 404, 407, 411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 674, 675, 676, 677, 678, 780, 781, 782, 785, 786, 794, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 956, 1015, 1019, 1020, 1022, 1023], "estimate_bandwidth": [44, 63, 397, 434, 447], "symmetr": [44, 123, 159, 171, 200, 385, 395, 397, 438, 448, 449, 460, 505, 513, 515, 676, 680, 681, 690, 691, 701, 702, 703, 709, 713, 721, 722, 740, 742, 748, 770, 778, 780, 781, 953, 956, 963, 967, 970], "meanshift": [44, 314, 397, 426, 1012, 1013, 1014, 1017, 1019, 1020, 1023, 1024, 1025], "bin_seed": [44, 63, 434, 447, 1020], "two_mean": 44, "spectralclust": [44, 314, 397, 426, 970, 1009, 1010, 1019, 1021, 1022, 1023, 1024, 1025], "nearest_neighbor": [44, 438, 677], "average_linkag": 44, "gmm": [44, 165, 242, 244, 247, 248, 249, 250, 490, 498, 781, 801, 966, 1009, 1010, 1013, 1014, 1015], "gaussianmixtur": [44, 57, 244, 245, 246, 247, 248, 249, 403, 780, 1015, 1017, 1018, 1022, 1023], "covariance_typ": [44, 244, 245, 247, 248, 249, 780, 781], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 62, 296, 380, 381], "catch_warn": [44, 62, 295, 296], "filterwarn": [44, 62, 213, 295, 296, 372, 977], "fulli": [44, 55, 117, 123, 358, 366, 367, 385, 397, 403, 404, 406, 429, 433, 543, 544, 550, 551, 892, 893, 894, 895, 896, 898, 956, 957, 963, 972, 980, 987, 1022, 1023], "t1": [44, 46, 62, 213, 221, 224, 227], "ff7f00": [44, 62, 227], "4daf4a": [44, 62], "a65628": [44, 62], "984ea3": [44, 62], "999999": [44, 62], "e41a1c": [44, 62], "dede00": [44, 62, 63], "000000": [44, 168, 187, 216, 258, 304, 722], "transax": [44, 62, 223, 227, 245, 286, 302], "545": [44, 68], "plot_cluster_comparison": [44, 68], "bad": [45, 60, 61, 151, 168, 343, 354, 372, 397, 407, 678, 731, 956, 963, 964, 969, 975, 1001, 1009], "eight": [45, 1002], "deliv": [45, 358, 991], "though": [45, 55, 116, 147, 174, 177, 264, 283, 302, 304, 344, 345, 354, 358, 366, 369, 372, 374, 384, 385, 397, 402, 403, 404, 405, 406, 685, 789, 791, 884, 956, 957, 959, 964, 967, 970, 977, 981, 1002, 1017], "3d": [45, 48, 67, 90, 101, 102, 195, 219, 221, 223, 405, 492, 572, 930, 1016, 1017, 1019], "mplot3d": [45, 67, 90, 101, 102, 169, 195, 219, 221], "noqa": [45, 67, 90, 101, 102, 123, 162, 163, 169, 195, 219, 221, 269, 270, 312, 376, 565, 566, 613, 785, 786, 956, 1018], "f401": [45, 67, 90, 101, 102, 169, 195, 219, 221], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "est": [45, 130, 168, 235, 302, 312, 354, 391, 404, 548, 720, 849, 956, 967, 977, 981, 1020, 1021], "elev": [45, 67, 90, 101, 102, 169, 195, 219, 223], "azim": [45, 67, 90, 101, 102, 169, 195, 219, 223], "134": [45, 53, 102, 122, 258, 1012], "xaxi": [45, 90, 101, 102, 116, 195, 219, 221, 224, 278, 283, 343], "set_ticklabel": [45, 90, 101, 102, 195, 343], "zaxi": [45, 90, 101, 102, 195, 219], "petal": [45, 90, 104, 106, 119, 240, 312, 315, 369, 398, 897, 983, 999, 1000], "sepal": [45, 90, 104, 106, 119, 152, 181, 240, 312, 315, 327, 369, 977, 999, 1000], "length": [45, 70, 89, 90, 92, 104, 106, 119, 150, 151, 152, 155, 156, 158, 174, 181, 234, 237, 240, 312, 315, 327, 345, 365, 369, 372, 380, 381, 385, 398, 402, 404, 405, 407, 431, 476, 494, 495, 498, 501, 509, 537, 549, 567, 568, 575, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 618, 632, 633, 636, 637, 638, 639, 640, 642, 643, 646, 647, 648, 649, 667, 670, 766, 782, 785, 786, 796, 810, 812, 815, 816, 818, 826, 827, 828, 830, 832, 871, 897, 904, 906, 910, 926, 927, 938, 941, 966, 973, 977, 993, 999, 1000, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1025], "set_zlabel": [45, 90, 195], "setosa": [45, 90, 102, 104, 267, 268, 369, 490, 993, 1000], "versicolour": [45, 90, 102, 104, 369, 1000], "virginica": [45, 90, 102, 104, 267, 268, 369, 490, 967, 1000], "text3d": [45, 102], "reorder": [45, 102, 385, 683, 704, 988, 1017], "365": [45, 65, 68, 333, 341, 399, 459], "plot_cluster_iri": [45, 68], "voxel": [46, 66, 571], "multipl": [46, 69, 76, 92, 105, 116, 118, 119, 165, 168, 192, 232, 258, 270, 280, 310, 358, 359, 360, 366, 368, 369, 372, 374, 375, 376, 377, 383, 385, 396, 397, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 430, 446, 450, 452, 453, 455, 460, 474, 477, 478, 481, 482, 483, 489, 490, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 537, 539, 540, 541, 542, 545, 546, 547, 548, 549, 567, 585, 593, 594, 596, 597, 613, 618, 620, 625, 626, 627, 628, 632, 633, 636, 638, 639, 640, 643, 646, 647, 648, 649, 652, 653, 654, 657, 659, 662, 664, 665, 675, 676, 678, 679, 680, 707, 708, 713, 730, 731, 733, 735, 736, 738, 770, 773, 776, 780, 781, 782, 784, 785, 786, 787, 788, 794, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 810, 814, 815, 816, 817, 818, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 846, 849, 861, 865, 873, 876, 877, 884, 885, 886, 889, 900, 915, 920, 921, 938, 941, 959, 962, 963, 964, 968, 969, 970, 974, 975, 977, 980, 981, 983, 987, 988, 993, 1002, 1009, 1010, 1012, 1015, 1016, 1019, 1020, 1021, 1022, 1024, 1025], "partli": [46, 754], "procedur": [46, 56, 116, 123, 147, 178, 186, 248, 260, 303, 307, 330, 343, 354, 372, 374, 383, 384, 385, 386, 395, 396, 399, 401, 402, 404, 406, 517, 523, 524, 526, 531, 532, 533, 539, 540, 541, 542, 545, 546, 579, 581, 588, 595, 630, 658, 660, 673, 713, 770, 841, 842, 861, 873, 938, 956, 963, 969, 975, 977, 980, 981, 982, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "solut": [46, 177, 182, 187, 189, 202, 203, 212, 227, 233, 313, 330, 370, 374, 385, 394, 397, 399, 401, 402, 405, 406, 407, 435, 437, 439, 517, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 535, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 596, 632, 634, 636, 638, 640, 641, 642, 644, 646, 648, 650, 651, 652, 653, 654, 655, 658, 660, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 780, 781, 796, 833, 841, 842, 960, 961, 963, 964, 966, 971, 973, 981, 982, 986, 991, 997, 1000, 1002, 1009, 1012, 1022, 1023, 1024], "closest": [46, 64, 374, 397, 426, 428, 429, 433, 434, 435, 445, 639, 764, 765, 814, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 958, 961, 968, 970, 1000], "partit": [46, 66, 70, 126, 128, 258, 296, 394, 395, 397, 401, 404, 435, 437, 439, 448, 497, 543, 544, 545, 546, 549, 550, 551, 690, 691, 701, 771, 832, 892, 893, 894, 895, 966, 970, 973, 977, 983, 1002], "cluster_qr": [46, 397, 438, 448, 1023], "qr": [46, 200, 520, 527, 530, 920, 921, 964, 1015], "pivot": [46, 269, 270], "cheung": [46, 1010], "andrew": [46, 397, 448, 677, 681, 703, 722, 778, 859, 971, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "knyazev": [46, 397, 438, 448, 681, 1019, 1022, 1023], "ucdenv": 46, "skimag": [46, 47, 366, 1001], "spectral_clust": [46, 66, 1017, 1019, 1021, 1022, 1023, 1024], "orig_coin": [46, 47], "speed": [46, 47, 57, 70, 98, 116, 163, 169, 184, 187, 191, 236, 278, 312, 319, 343, 345, 360, 361, 372, 375, 381, 383, 385, 395, 397, 402, 404, 405, 408, 429, 430, 433, 434, 435, 436, 438, 443, 445, 446, 447, 448, 517, 518, 596, 613, 618, 619, 620, 625, 632, 633, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 667, 670, 678, 780, 781, 788, 808, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 859, 921, 956, 964, 966, 968, 981, 991, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "down": [46, 47, 81, 213, 214, 221, 231, 232, 261, 297, 300, 354, 366, 375, 380, 399, 402, 429, 436, 442, 576, 579, 580, 625, 635, 759, 763, 766, 859, 862, 863, 874, 886, 889, 896, 963, 993, 1001, 1017], "alias": [46, 47, 370, 372, 375, 433, 445, 1009, 1013, 1023], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 1001], "anti_alias": [46, 47, 1001], "img_to_graph": [46, 66, 405, 1012, 1022], "exponenti": [46, 75, 150, 155, 283, 288, 403, 404, 407, 435, 522, 540, 545, 600, 605, 608, 625, 629, 743, 744, 824, 825, 829, 841, 842, 859, 959, 963, 967, 982, 1000, 1016, 1022], "beta": [46, 85, 167, 378, 395, 397, 400, 522, 524, 526, 533, 630, 714, 715, 721, 727, 768, 778, 780, 967, 1000, 1011, 1014, 1016, 1018, 1019], "voronoi": [46, 66, 397], "n_region": 46, "extra": [46, 119, 235, 278, 345, 370, 371, 373, 376, 385, 404, 405, 424, 429, 433, 445, 450, 518, 543, 544, 552, 576, 577, 686, 687, 688, 805, 828, 894, 895, 911, 966, 970, 1009, 1012, 1014, 1015, 1017, 1022, 1024], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 438, 448, 674, 677, 681, 1019, 1022, 1023, 1024], "amg": [46, 66, 397, 438, 448, 677, 681, 1019, 1023, 1024], "pyamg": [46, 388, 390, 397, 438, 448, 677, 681], "toler": [46, 73, 162, 189, 191, 214, 215, 345, 367, 374, 381, 397, 409, 429, 433, 438, 445, 448, 457, 458, 464, 468, 469, 470, 517, 518, 519, 521, 522, 526, 527, 528, 529, 530, 531, 533, 534, 545, 546, 547, 548, 613, 632, 633, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 662, 664, 665, 667, 668, 669, 670, 674, 675, 676, 677, 679, 680, 681, 824, 825, 829, 833, 841, 842, 879, 880, 884, 885, 886, 887, 888, 889, 890, 953, 963, 967, 981, 982, 998, 1021, 1022, 1023, 1024], "eigen_tol": [46, 438, 448, 677, 681, 1010, 1023, 1024], "todo": [46, 231, 376, 380, 385, 397, 1025], "21243": 46, "assign_label": [46, 397, 438, 448], "individu": [46, 60, 80, 108, 113, 130, 134, 142, 159, 165, 166, 172, 198, 216, 228, 261, 263, 310, 338, 359, 373, 376, 379, 381, 385, 387, 394, 398, 401, 404, 405, 423, 438, 448, 450, 482, 487, 489, 495, 541, 542, 545, 546, 548, 549, 551, 553, 554, 555, 556, 589, 595, 596, 618, 619, 629, 631, 643, 644, 645, 654, 657, 658, 659, 660, 661, 662, 663, 664, 673, 698, 705, 713, 719, 735, 736, 770, 782, 796, 812, 816, 817, 819, 820, 821, 822, 823, 842, 845, 853, 854, 856, 857, 858, 861, 863, 864, 869, 870, 871, 884, 885, 967, 968, 977, 982, 997, 1002, 1004, 1010, 1013, 1015, 1021, 1023], "comment": [46, 343, 370, 371, 372, 373, 375, 376, 380, 473, 565, 967], "paus": 46, "21194": [46, 1022], "plot_coin_segment": [46, 68], "spatial": [47, 49, 55, 171, 182, 215, 296, 367, 385, 397, 408, 430, 432, 436, 438, 443, 665, 678, 685, 745, 748, 763, 764, 765, 766, 775, 776, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 963, 970, 977, 1011, 1015, 1022, 1025], "constrain": [47, 95, 120, 127, 169, 189, 294, 311, 328, 330, 365, 385, 396, 397, 402, 404, 495, 547, 548, 621, 644, 676, 680, 809, 963, 966, 1013], "piec": [47, 199, 359, 966], "grid_to_graph": [47, 51, 54, 397, 405, 1001, 1022], "st": [47, 67, 258, 315, 1012, 1015, 1017], "168": [47, 1009], "4697": 47, "397": [47, 68, 367], "plot_coin_ward_segment": [47, 68], "vq": [48, 58], "palac": 48, "china": [48, 397, 492, 493, 570], "615": 48, "literatur": [48, 155, 258, 344, 369, 372, 378, 380, 383, 384, 397, 400, 402, 404, 429, 433, 435, 487, 522, 524, 526, 533, 541, 542, 574, 577, 694, 780, 956, 959, 963, 967, 1019], "codebook": [48, 552, 814], "palett": [48, 168, 258, 281], "byte": [48, 53, 405, 473, 489, 494, 495, 568, 574, 575, 577, 932, 1000, 1002, 1009, 1016, 1017, 1024], "wherea": [48, 53, 67, 80, 109, 126, 202, 212, 259, 260, 261, 267, 305, 339, 360, 386, 401, 404, 551, 644, 645, 784, 800, 812, 959, 966, 968, 970, 977, 983, 1022], "rgb": [48, 367, 405, 479, 480, 569, 570, 573], "gif": 48, "pick": [48, 55, 60, 171, 234, 266, 314, 318, 367, 372, 376, 397, 404, 429, 446, 509, 659, 894, 895, 956, 963, 964, 966, 981, 1020], "019": [48, 369, 378, 457], "040": [48, 194, 217], "083": [48, 256, 344], "robertlayton": 48, "pairwise_distances_argmin": [48, 64, 314, 765, 1017, 1023, 1024, 1025], "load_sample_imag": [48, 569, 570, 1018], "n_color": 48, "photo": 48, "jpg": [48, 492, 570], "255": [48, 98, 278, 296, 306, 313, 367, 479, 480, 547, 548], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 237], "book": [48, 70, 429, 433, 435, 814, 819, 823, 963, 964, 965, 968, 985, 1021], "alongsid": [48, 372, 378, 385, 388, 406, 967, 974, 987, 988], "535": [48, 68, 70, 76], "plot_color_quant": [48, 68], "750": [49, 55, 87, 118, 258], "math": [49, 70, 236, 258, 259, 369, 372, 388, 749], "db": [49, 55, 397], "n_noise_": 49, "come": [49, 67, 70, 80, 86, 100, 101, 150, 232, 310, 338, 343, 344, 358, 360, 365, 369, 372, 373, 376, 380, 383, 385, 388, 397, 401, 404, 405, 425, 436, 442, 458, 536, 691, 778, 803, 886, 889, 956, 957, 961, 964, 966, 970, 973, 982, 993, 1009, 1020, 1023, 1025], "handi": [49, 71, 344, 345, 373, 1025], "883": 49, "917": 49, "916": 49, "626": [49, 184], "unique_label": [49, 55, 344, 374, 381], "core_samples_mask": 49, "zeros_lik": [49, 200, 267], "bool": [49, 66, 81, 163, 216, 352, 372, 409, 410, 411, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 505, 508, 509, 510, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 684, 686, 688, 689, 693, 694, 695, 697, 698, 699, 700, 711, 712, 713, 714, 715, 716, 723, 726, 727, 735, 736, 739, 741, 746, 748, 752, 753, 754, 759, 763, 767, 768, 769, 770, 772, 774, 777, 779, 780, 781, 782, 785, 786, 787, 788, 796, 800, 801, 804, 807, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 915, 921, 922, 929, 932, 938, 940, 948, 953, 954, 955, 957, 1018, 1021, 1022], "core_sample_indices_": [49, 430], "class_member_mask": 49, "markerfacecolor": [49, 55, 61, 63, 64], "plot_dbscan": [49, 68, 408, 430], "constitut": [50, 385, 401, 404, 436, 442, 574, 575, 577, 971], "standpoint": 50, "proce": [50, 144, 179, 370, 376, 400, 401, 404, 426, 963], "reassign": [50, 372, 433, 435, 1010, 1014], "success": [50, 165, 251, 265, 274, 354, 392, 397, 401, 402, 404, 501, 550, 565, 782, 785, 786, 803, 889, 970, 991, 997, 1001, 1004, 1021], "becom": [50, 55, 57, 72, 80, 200, 260, 278, 301, 305, 330, 343, 354, 366, 372, 374, 376, 380, 385, 386, 397, 399, 404, 405, 407, 426, 436, 440, 441, 443, 567, 574, 575, 577, 605, 613, 644, 645, 662, 664, 858, 884, 885, 891, 962, 963, 964, 966, 970, 977, 982, 1000, 1002, 1010, 1017, 1018, 1021, 1022, 1023, 1024], "fetch_olivetti_fac": [50, 95, 118, 235, 367, 1017, 1018, 1019], "extract_patches_2d": [50, 98, 405, 1017], "patch_siz": [50, 98, 405, 569, 570], "buffer": [50, 1022], "max_patch": [50, 405, 569, 570, 1017], "4i": 50, "dt": [50, 98, 109, 131, 404, 405, 983], "2400": 50, "700": [50, 312], "800": [50, 121, 313, 367, 570, 678], "1100": 50, "1200": [50, 122, 300, 404], "1300": 50, "1400": [50, 460], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 313], "2200": [50, 367, 479], "2300": [50, 187], "ntrain": 50, "829": [50, 68], "plot_dict_face_patch": [50, 68], "agglo": [51, 431, 1001], "featureagglomer": [51, 54, 426, 427, 984, 1001, 1012, 1018, 1019, 1022, 1023], "x_reduc": [51, 90, 128, 431, 1001], "x_restor": 51, "images_restor": 51, "vmax": [51, 82, 95, 98, 106, 153, 156, 177, 182, 189, 214, 232, 247, 253, 296, 330], "plot_digits_agglomer": [51, 68], "rich": [52, 380, 383, 397, 425, 991, 1020, 1023], "richer": [52, 105, 397], "uneven": [52, 253, 397, 401], "patholog": [52, 966, 1015], "clean": [52, 71, 197, 354, 364, 370, 403, 973, 977, 1019], "fring": [52, 397], "sensibl": [52, 162, 344, 374, 963, 977], "resampl": [52, 123, 155, 168, 216, 282, 381, 383, 541, 542, 941, 988, 1018, 1022], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 219, 220, 221, 674, 675, 676, 678, 964, 1010, 1015, 1019, 1023, 1024], "583": [52, 68, 174, 175, 397, 1000], "plot_digits_linkag": [52, 68], "raccoon": [53, 98, 402], "addition": [53, 72, 112, 168, 198, 216, 311, 313, 344, 372, 383, 395, 405, 596, 597, 632, 638, 657, 861, 956, 957, 967, 975, 987, 1015], "adapt": [53, 55, 109, 122, 123, 153, 243, 244, 302, 359, 370, 371, 372, 381, 397, 404, 407, 501, 502, 503, 504, 662, 663, 664, 841, 842, 963, 969, 971, 977, 981, 987, 988, 1017, 1018, 1025], "pooch": [53, 372, 388, 390], "instal": [53, 240, 278, 310, 311, 312, 313, 314, 315, 358, 359, 361, 372, 373, 375, 376, 378, 380, 383, 384, 390, 393, 397, 405, 438, 448, 482, 677, 681, 935, 983, 985, 1002, 1016, 1017, 1018, 1022, 1023], "raccoon_fac": [53, 98], "nbyte": [53, 231], "768": [53, 271, 274], "1024": [53, 105, 435, 454, 524, 882, 1022], "uint8": [53, 98, 366, 483, 492, 493, 1021], "786432": 53, "unsign": [53, 99, 367, 568, 932], "786": [53, 71], "kilobyt": 53, "shade": [53, 181, 281, 286, 326, 402], "behind": [53, 80, 374, 376, 380, 396, 399, 404, 966, 970, 979], "simplest": [53, 401, 964, 967, 1000, 1001], "certainli": [53, 70, 344], "compressed_raccoon_uniform": 53, "_discret": [53, 303, 307], "237": [53, 178, 217, 303, 307, 1000], "futurewarn": [53, 177, 303, 307, 310, 372, 380, 1016, 1017, 1018, 1020, 1022, 1025], "onward": [53, 303, 307, 858, 1013], "subsampl": [53, 105, 122, 125, 169, 198, 215, 216, 254, 303, 307, 312, 444, 545, 546, 547, 548, 549, 618, 665, 687, 785, 786, 810, 849, 861, 873, 900, 910, 959, 963, 988, 990, 1009, 1019, 1023, 1025], "200_000": [53, 303, 307, 849, 1025], "silenc": [53, 303, 307, 482], "disabl": [53, 114, 303, 307, 343, 370, 372, 405, 435, 446, 454, 523, 524, 525, 532, 545, 546, 547, 548, 843, 882, 904, 905, 977, 1015, 1018, 1022, 1024], "spot": [53, 229, 397], "leav": [53, 115, 124, 169, 171, 216, 265, 305, 352, 354, 358, 369, 371, 377, 385, 397, 404, 407, 427, 428, 431, 432, 449, 489, 543, 544, 545, 546, 547, 548, 550, 551, 552, 659, 661, 784, 789, 790, 791, 792, 800, 801, 824, 825, 873, 892, 893, 894, 895, 956, 964, 970, 974, 983, 997, 1000, 1009, 1016, 1018, 1020, 1021], "bin_edg": 53, "bin_edges_": [53, 301, 849], "bin_cent": [53, 198], "625": [53, 55, 68, 198, 694], "875": [53, 151, 655], "375": [53, 435, 735, 967], "140": [53, 404, 496, 502, 503, 504, 541, 542, 968], "171": [53, 369, 378, 773, 967], "234": [53, 819, 823, 841, 842, 969], "axvlin": [53, 60, 73, 82, 103, 122, 132, 168, 170, 187, 264, 998], "get_ybound": 53, "state": [53, 57, 70, 72, 80, 200, 231, 238, 244, 264, 312, 354, 359, 360, 372, 374, 378, 380, 383, 385, 386, 396, 405, 410, 426, 429, 433, 435, 440, 445, 461, 530, 575, 665, 785, 786, 794, 796, 798, 824, 825, 831, 879, 880, 907, 956, 957, 963, 969, 972, 979, 987, 988, 991, 1011, 1013, 1015, 1017, 1019, 1022], "compressed_raccoon_kmean": 53, "9141241": 53, "3627656": 53, "65000752": 53, "26055499": 53, "68738405": 53, "159": [53, 367, 1009], "79431128": 53, "185": [53, 159, 290, 292, 369, 378, 841, 842], "18557327": 53, "224": [53, 85, 128, 397, 710], "01945707": 53, "save": [53, 70, 72, 297, 371, 372, 376, 378, 379, 380, 385, 391, 401, 409, 454, 520, 521, 613, 824, 825, 882, 963, 967, 983, 991, 1002, 1009, 1012, 1016, 1019], "verifi": [53, 60, 168, 198, 372, 377, 951, 970], "6291456": 53, "surpris": [53, 169, 963, 987, 1011], "x8": 53, "ndarrai": [53, 58, 90, 198, 240, 256, 257, 258, 372, 373, 374, 378, 379, 393, 405, 408, 409, 412, 413, 415, 417, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 686, 687, 688, 701, 704, 707, 708, 709, 712, 713, 723, 730, 731, 733, 735, 736, 738, 739, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 774, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 902, 903, 904, 909, 910, 920, 921, 922, 923, 926, 927, 929, 931, 932, 936, 939, 940, 942, 943, 944, 945, 948, 953, 954, 967, 982, 988, 1012, 1016, 1019, 1020, 1023, 1024, 1025], "practic": [53, 71, 80, 86, 98, 116, 120, 150, 167, 168, 174, 182, 200, 227, 233, 259, 266, 284, 285, 312, 330, 359, 361, 372, 374, 375, 378, 380, 384, 385, 397, 399, 401, 402, 403, 404, 405, 407, 433, 438, 448, 507, 510, 575, 618, 619, 656, 780, 823, 877, 884, 956, 957, 961, 966, 967, 968, 969, 970, 973, 974, 977, 987, 988, 989, 991, 993, 1002, 1003, 1004, 1011, 1015, 1017, 1019, 1021], "gain": [53, 221, 265, 278, 280, 319, 343, 344, 352, 371, 378, 380, 383, 404, 518, 543, 547, 548, 550, 711, 741, 780, 781, 813, 892, 894, 968, 972, 980, 983, 1012, 1016, 1019], "708": [53, 68, 524, 526, 533, 735], "plot_face_compress": [53, 68], "anova": [54, 141, 148, 165, 325, 341, 398, 490, 501, 578, 581, 582, 584, 585, 586, 590, 591, 592, 595, 699, 806, 810, 844, 845, 864, 884, 889, 982], "bayesianridg": [54, 162, 177, 178, 182, 312, 613, 630, 963, 1016, 1017, 1018, 1019, 1022, 1023, 1025], "shutil": [54, 72, 398], "tempfil": [54, 280, 310, 398, 970], "feature_select": [54, 71, 72, 74, 141, 142, 143, 144, 145, 146, 147, 165, 240, 312, 314, 333, 354, 361, 385, 398, 406, 567, 956, 1009, 1010, 1012, 1013, 1014, 1015, 1016], "kfold": [54, 116, 122, 136, 253, 263, 354, 401, 423, 458, 553, 554, 580, 588, 633, 637, 639, 641, 647, 649, 651, 659, 782, 785, 786, 788, 790, 792, 796, 801, 803, 804, 805, 806, 807, 808, 809, 811, 815, 818, 865, 997, 1010, 1011, 1012, 1014, 1015, 1017, 1019], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 78, 269, 407, 987], "cachedir": [54, 72, 381, 398], "mkdtemp": [54, 398], "mem": [54, 378, 494], "n_x": [54, 571], "n_y": [54, 571, 969, 977], "parcel": [54, 67, 397], "ward__n_clust": 54, "n_job": [54, 72, 73, 116, 117, 118, 123, 124, 130, 137, 146, 162, 168, 169, 170, 220, 222, 238, 257, 259, 260, 262, 273, 278, 310, 311, 312, 315, 359, 372, 385, 404, 408, 423, 430, 432, 434, 436, 438, 443, 444, 447, 450, 453, 458, 517, 521, 522, 523, 525, 528, 529, 531, 532, 534, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 580, 588, 596, 618, 620, 625, 633, 637, 639, 641, 643, 644, 645, 647, 649, 651, 652, 654, 662, 665, 674, 675, 676, 677, 678, 679, 680, 759, 763, 766, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 843, 846, 879, 880, 933, 935, 956, 967, 968, 970, 997, 998, 1002, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 427, 431, 1009, 1013], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 95, 109, 113, 114, 125, 229, 252, 257, 265, 267, 311, 344, 348, 352, 361, 369, 371, 372, 374, 381, 386, 394, 396, 397, 401, 402, 404, 405, 408, 430, 432, 438, 450, 473, 494, 498, 500, 506, 508, 512, 513, 517, 523, 524, 526, 536, 543, 544, 545, 546, 550, 551, 552, 553, 554, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 603, 618, 644, 645, 652, 654, 662, 663, 664, 693, 703, 712, 719, 721, 731, 748, 754, 763, 767, 773, 774, 814, 824, 825, 826, 827, 828, 830, 832, 834, 835, 839, 841, 842, 847, 863, 864, 867, 871, 884, 889, 892, 893, 894, 895, 923, 924, 925, 938, 940, 941, 961, 963, 967, 968, 971, 974, 977, 978, 979, 983, 991, 993, 1014, 1015, 1017, 1019, 1020, 1021, 1023, 1025], "return_dist": [54, 449, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 970, 1013], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 142, 406, 578, 581, 582, 584, 585, 586, 590, 591, 595, 1012, 1016, 1023], "cach": [54, 165, 259, 278, 279, 292, 358, 359, 367, 385, 427, 431, 436, 454, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 494, 782, 826, 828, 844, 845, 882, 886, 887, 888, 889, 890, 952, 970, 982, 1012, 1016, 1017, 1018, 1019, 1021, 1022, 1024], "selectpercentil": [54, 71, 240, 333, 406, 578, 581, 582, 584, 585, 589, 592, 1010, 1015, 1025], "percentag": [54, 104, 120, 189, 216, 253, 261, 264, 401, 406, 520, 527, 530, 535, 579, 580, 634, 655, 666, 689, 719, 731, 800, 801, 802, 814, 896, 898, 968, 983, 1011, 1015, 1021, 1022], "anova__percentil": [54, 333], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "112": [54, 118, 367, 369, 1011], "638768": 54, "rdbu_r": [54, 82, 106, 330], "temporari": [54, 70, 72, 358, 454, 673, 766, 882, 970, 1012, 1013, 1016, 1022, 1023], "worri": [54, 964, 994], "rmtree": [54, 72, 398], "ignore_error": 54, "554": [54, 68, 206, 214, 296], "plot_feature_agglomeration_vs_univariate_select": [54, 68], "perspect": [55, 60, 198, 358, 367, 383, 386, 516, 629, 884, 960], "certain": [55, 168, 203, 215, 258, 278, 304, 354, 367, 368, 370, 376, 387, 397, 402, 406, 624, 635, 639, 644, 649, 670, 849, 884, 956, 959, 963, 964, 967, 968, 971, 977, 982, 987, 993, 997, 1014, 1018, 1021, 1024], "conveni": [55, 364, 380, 383, 398, 401, 405, 407, 412, 429, 433, 435, 437, 439, 450, 475, 597, 662, 664, 685, 713, 770, 843, 844, 941, 957, 959, 963, 964, 974, 991, 1002, 1009], "ground_truth": [55, 285], "proba_map": 55, "class_index": 55, "ci": [55, 359, 375, 376, 380, 969, 1015, 1017], "preambl": 55, "parameters_str": 55, "greatest": [55, 388, 397, 851, 1017], "remark": [55, 86, 147, 360, 372, 977], "unlik": [55, 56, 116, 168, 169, 219, 221, 248, 300, 328, 372, 374, 378, 383, 385, 399, 401, 402, 405, 432, 436, 521, 636, 637, 640, 641, 642, 668, 669, 770, 803, 824, 825, 864, 875, 887, 963, 966, 967, 974, 982, 1009, 1015], "bi": [55, 405], "isotrop": [55, 57, 61, 100, 152, 154, 219, 221, 397, 399, 407, 498, 505, 518, 601, 605, 606, 608, 609], "worth": [55, 119, 169, 198, 372, 380, 991], "rememb": [55, 374, 377, 388, 405, 970, 974, 983], "hardli": [55, 593, 594], "proper": [55, 187, 216, 360, 378, 395, 404, 435, 527, 539, 662, 921, 942, 962, 963, 964, 967, 982, 1009, 1019, 1020, 1021, 1022, 1023, 1024], "must": [55, 168, 169, 171, 179, 182, 215, 216, 227, 237, 253, 284, 301, 306, 343, 354, 367, 371, 372, 373, 374, 376, 378, 380, 385, 386, 393, 395, 397, 398, 401, 402, 404, 405, 406, 407, 408, 417, 424, 427, 430, 431, 432, 433, 435, 436, 437, 441, 443, 445, 447, 448, 450, 452, 453, 455, 460, 473, 494, 495, 498, 509, 517, 523, 524, 525, 526, 527, 529, 530, 533, 539, 540, 545, 546, 547, 548, 553, 554, 567, 568, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 596, 597, 603, 606, 613, 614, 615, 616, 618, 619, 624, 628, 629, 634, 635, 638, 644, 645, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 685, 689, 692, 695, 720, 731, 749, 756, 759, 763, 766, 773, 775, 776, 777, 779, 780, 781, 782, 783, 785, 786, 787, 789, 791, 792, 794, 796, 797, 798, 800, 801, 803, 808, 810, 811, 819, 820, 821, 822, 823, 826, 827, 828, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 844, 847, 848, 849, 851, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 884, 885, 886, 887, 888, 889, 890, 891, 897, 935, 942, 951, 953, 956, 957, 963, 964, 965, 967, 970, 971, 973, 974, 981, 982, 983, 993, 1002, 1009, 1012, 1016, 1020, 1022, 1023], "maintain": [55, 203, 216, 219, 258, 359, 361, 371, 375, 378, 379, 380, 383, 385, 388, 397, 404, 426, 428, 853, 854, 860, 861, 864, 869, 872, 873, 875, 963, 964, 977, 987, 988, 993, 1004, 1024], "mitig": [55, 170, 307, 359, 360, 964, 983, 1000, 1001, 1021], "great": [55, 167, 168, 196, 354, 372, 383, 402, 749, 988, 991, 1009, 1016], "appropri": [55, 57, 103, 155, 168, 267, 338, 348, 354, 370, 372, 374, 380, 385, 396, 397, 401, 403, 404, 408, 430, 436, 443, 475, 476, 477, 482, 486, 487, 488, 490, 491, 496, 563, 568, 577, 578, 581, 582, 584, 585, 586, 658, 660, 673, 695, 826, 827, 828, 830, 832, 834, 835, 836, 951, 963, 966, 967, 977, 1013, 1016, 1022, 1025], "immedi": [55, 372, 383, 782, 796, 805, 806, 1017], "hdb": [55, 432], "probabilities_": [55, 432], "capabl": [55, 56, 86, 155, 223, 374, 385, 388, 968, 971, 982, 983, 991, 1009, 1018], "constraint": [55, 57, 67, 95, 108, 134, 165, 193, 253, 295, 296, 297, 311, 372, 383, 402, 405, 473, 494, 495, 547, 548, 618, 621, 800, 801, 936, 956, 958, 963, 964, 981, 1013, 1016, 1017, 1020, 1022, 1024], "reachabl": [55, 65, 432, 436, 441, 442, 443, 830, 926], "extend": [55, 56, 67, 199, 247, 265, 330, 369, 370, 383, 385, 395, 396, 397, 402, 404, 617, 706, 813, 816, 817, 849, 851, 868, 899, 959, 967, 968, 982, 988, 989, 1004, 1014, 1015, 1016, 1017, 1019, 1024], "fragment": [55, 98], "sparser": [55, 177, 189, 402, 457, 464, 525, 529, 963, 970, 981], "Not": [55, 136, 169, 358, 372, 383, 397, 415, 416, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 455, 456, 457, 458, 459, 460, 461, 462, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 549, 552, 555, 556, 567, 568, 569, 574, 575, 577, 613, 614, 615, 616, 663, 674, 675, 676, 677, 679, 753, 777, 780, 781, 782, 785, 786, 796, 821, 824, 825, 828, 829, 830, 832, 836, 848, 856, 859, 860, 862, 876, 877, 888, 967, 973, 987, 1018], "mention": [55, 86, 216, 311, 354, 358, 372, 376, 377, 383, 385, 397, 682, 876, 877, 956, 961, 963, 988, 991, 1002, 1016, 1017, 1018], "until": [55, 121, 147, 206, 270, 312, 314, 377, 385, 386, 394, 397, 401, 406, 407, 494, 495, 543, 544, 545, 546, 550, 551, 552, 579, 632, 633, 638, 639, 644, 645, 646, 647, 648, 649, 652, 654, 657, 662, 663, 664, 680, 780, 781, 785, 786, 841, 842, 881, 884, 892, 893, 894, 895, 942, 956, 963, 964, 972, 980, 983, 1002, 1012, 1016, 1017, 1023], "tradeoff": [55, 113, 165, 232, 251, 265, 266, 274, 343, 358, 380, 403, 501, 550, 684, 688, 712, 774, 810, 845, 864, 884, 964, 1000, 1018, 1021], "comfort": [55, 404], "epsilon": [55, 65, 180, 222, 233, 337, 402, 432, 441, 629, 635, 653, 662, 664, 731, 841, 842, 885, 887, 890, 960, 963, 967, 971, 981, 982, 1000, 1009], "incap": 55, "simultan": [55, 96, 262, 266, 351, 364, 394, 397, 956, 967, 968, 983, 991, 1016], "suffici": [55, 121, 130, 206, 272, 330, 358, 385, 397, 406, 518, 532, 643, 668, 669, 801, 802, 968, 970, 988, 1018, 1024, 1025], "intervent": 55, "inaccess": 55, "ultim": [55, 223, 373], "world": [55, 70, 74, 168, 223, 236, 343, 358, 361, 365, 369, 397, 402, 405, 957, 967, 969, 986, 988, 991, 996, 1004, 1009], "whose": [55, 79, 80, 81, 147, 155, 198, 328, 367, 380, 381, 385, 395, 397, 399, 404, 406, 407, 410, 423, 424, 425, 434, 447, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 501, 520, 524, 526, 527, 530, 533, 535, 558, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 626, 657, 681, 704, 782, 789, 796, 809, 830, 849, 876, 877, 920, 946, 947, 961, 968, 972, 973, 974, 982, 1012, 1017, 1018, 1020, 1023], "respect": [55, 67, 100, 114, 116, 119, 127, 158, 174, 177, 182, 187, 200, 212, 215, 219, 221, 228, 231, 233, 248, 267, 284, 285, 297, 305, 314, 327, 358, 359, 367, 368, 372, 395, 397, 400, 402, 404, 405, 407, 432, 450, 453, 456, 457, 458, 459, 460, 461, 462, 520, 526, 527, 533, 539, 547, 548, 583, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 622, 629, 657, 676, 680, 698, 713, 767, 770, 780, 781, 820, 830, 841, 842, 896, 898, 956, 960, 961, 963, 964, 967, 970, 971, 972, 973, 977, 982, 987, 991, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "neighborhood": [55, 82, 165, 219, 279, 292, 369, 385, 397, 402, 408, 430, 432, 436, 443, 488, 490, 501, 527, 535, 614, 617, 682, 810, 826, 827, 830, 832, 833, 834, 835, 836, 838, 844, 845, 864, 964, 973, 989, 1004, 1018], "recomput": [55, 56, 237, 239, 280, 310, 455, 460, 963, 979, 1014, 1025], "span": [55, 78, 123, 232, 255, 367, 397, 405, 535, 622, 782, 785, 967, 1001], "cut_dist": [55, 432], "plot_hdbscan": [55, 68], "intract": [56, 402, 964, 972], "inferenti": 56, "meta": [56, 70, 108, 133, 134, 165, 198, 267, 354, 366, 370, 374, 376, 383, 385, 393, 395, 396, 406, 407, 451, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 556, 561, 583, 589, 810, 817, 956, 968, 988, 989, 1004, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1023, 1024], "chirag": 56, "nagpal": 56, "christo": [56, 1018, 1019, 1021, 1023], "arida": [56, 1018, 1019, 1021, 1023], "baseestim": [56, 278, 372, 384, 385, 419, 618, 619, 913, 1009, 1016, 1019, 1021, 1023, 1024], "clone": [56, 123, 158, 169, 297, 354, 370, 372, 375, 376, 378, 380, 385, 395, 398, 407, 423, 451, 555, 556, 583, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 788, 808, 811, 815, 818, 844, 845, 881, 988, 1009, 1015, 1017, 1021, 1025], "metaestim": [56, 385, 881, 1013, 1022, 1023], "available_if": [56, 385, 1022, 1023], "check_is_fit": [56, 374, 381, 385, 1019, 1022, 1023], "5000": [56, 184, 213, 214, 216, 312, 865], "_classifier_ha": 56, "deleg": [56, 378, 420, 897, 1013, 1015, 1021], "unfit": [56, 398, 420, 450, 555, 556, 588, 597, 1017, 1019], "classifier_": 56, "inductivecluster": 56, "clusterer_": 56, "plot_scatt": 56, "cluster_label": [56, 60], "x_new": [56, 398, 402, 406, 419, 428, 429, 431, 433, 435, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 535, 553, 555, 556, 568, 569, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 614, 616, 621, 624, 625, 626, 627, 628, 674, 675, 676, 677, 678, 833, 840, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 876, 877, 979, 993], "y_new": 56, "declar": [56, 220, 354, 372, 373, 374, 378, 385, 429, 432, 433, 445, 457, 458, 464, 676, 680, 1016, 1020], "membership": [56, 386, 394, 396, 397, 497, 498, 499, 500, 501, 505, 508, 982], "inductive_learn": 56, "probable_clust": 56, "response_method": [56, 112, 126, 131, 181, 190, 207, 261, 281, 286, 289, 305, 326, 327, 349, 617, 618, 619, 684, 686, 688], "356": [56, 68, 975], "plot_inductive_clust": [56, 68], "meant": [57, 147, 367, 374, 381, 460, 479, 663, 830, 933, 934, 957, 971, 973, 977, 1010], "unintuit": 57, "possibli": [57, 86, 147, 198, 213, 344, 369, 371, 380, 391, 397, 404, 405, 437, 439, 575, 819, 820, 821, 822, 823, 889, 890, 892, 893, 894, 895, 956, 959, 964, 970, 977, 1024], "undesir": [57, 151, 407], "phil": [57, 1014], "roth": [57, 1014, 1017, 1024], "mr": [57, 315, 1010, 1013, 1023], "spheric": [57, 85, 126, 221, 245, 247, 248, 291, 368, 749, 780, 781, 963, 966, 970, 987], "anisotrop": [57, 152, 407, 603, 605, 608], "ellipt": [57, 963], "60834549": 57, "63667341": 57, "40887718": 57, "85253229": 57, "x_vari": 57, "y_vari": 57, "unequ": [57, 1017], "x_filter": 57, "unevenli": [57, 198, 253], "y_filter": 57, "set_i": 57, "scenario": [57, 70, 150, 174, 261, 354, 379, 388, 401, 404, 523, 529, 531, 532, 961, 967, 977, 1019], "criteria": [57, 116, 165, 176, 187, 206, 217, 248, 258, 380, 397, 406, 452, 468, 469, 470, 487, 543, 544, 545, 546, 550, 551, 632, 638, 642, 644, 645, 657, 678, 845, 864, 884, 885, 892, 893, 894, 895, 957, 966, 971, 981, 1001, 1012, 1017, 1020], "knowledg": [57, 118, 168, 215, 236, 258, 361, 367, 372, 375, 378, 384, 385, 397, 401, 404, 408, 430, 497, 541, 542, 549, 706, 721, 725, 768, 813, 967, 968, 979, 1002], "consequ": [57, 103, 216, 258, 259, 300, 327, 354, 402, 404, 547, 548, 552, 641, 642, 957, 963, 967, 983, 1018, 1020, 1025], "likelihood": [57, 77, 79, 80, 81, 83, 103, 150, 151, 152, 154, 155, 156, 157, 159, 165, 186, 216, 247, 251, 258, 264, 274, 297, 300, 374, 385, 395, 399, 402, 404, 407, 423, 455, 456, 457, 458, 459, 460, 461, 462, 463, 501, 518, 522, 527, 535, 536, 537, 596, 597, 617, 631, 644, 698, 726, 780, 781, 782, 807, 810, 829, 840, 860, 872, 886, 887, 889, 890, 963, 966, 969, 977, 982, 1012, 1013, 1018, 1024], "inertia": [57, 58, 61, 344, 397, 429, 433, 435, 438, 445, 446, 448, 449, 1020], "common_param": [57, 123, 169, 233, 260, 261], "unexpect": [57, 354, 372, 377, 380, 391, 521, 682, 967, 982, 1011, 1017, 1018, 1021, 1023, 1025], "suffic": [57, 58, 374, 1002], "detail": [57, 111, 113, 117, 119, 124, 130, 169, 186, 187, 224, 229, 232, 233, 238, 240, 249, 256, 265, 284, 285, 306, 310, 311, 312, 313, 314, 315, 348, 350, 351, 354, 358, 359, 360, 364, 365, 366, 367, 370, 372, 374, 376, 377, 378, 380, 383, 384, 385, 386, 388, 391, 396, 397, 400, 401, 402, 404, 406, 407, 408, 419, 420, 423, 429, 430, 432, 433, 434, 436, 438, 443, 444, 445, 447, 448, 450, 452, 453, 454, 458, 482, 510, 517, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 534, 535, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 580, 588, 596, 600, 605, 608, 617, 618, 619, 620, 625, 631, 633, 637, 639, 641, 642, 643, 644, 645, 647, 649, 651, 652, 654, 658, 660, 662, 664, 665, 673, 674, 675, 676, 677, 678, 679, 680, 681, 687, 699, 759, 763, 764, 765, 766, 781, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 822, 826, 827, 829, 830, 832, 834, 835, 837, 838, 843, 846, 848, 849, 861, 865, 873, 879, 880, 882, 886, 889, 892, 893, 894, 895, 915, 933, 956, 957, 961, 965, 966, 967, 968, 970, 971, 973, 980, 989, 990, 991, 993, 999, 1002, 1004, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "propos": [57, 78, 79, 278, 367, 372, 374, 383, 385, 397, 399, 404, 409, 410, 436, 461, 521, 593, 594, 662, 663, 664, 841, 842, 963, 966, 970, 981, 985, 1016], "inflat": [57, 167, 168, 170, 397, 401, 967, 977], "allevi": [57, 177, 182, 397, 969], "fastest": [57, 256, 345, 433, 656, 658, 660, 673, 920, 921, 966], "lost": [57, 82, 367, 373, 383, 964, 967], "restart": [57, 375, 380, 433, 517, 523, 524, 529, 531, 532, 596, 597, 964, 1022], "221": [57, 68, 85, 128, 197, 217, 1012], "plot_kmeans_assumpt": [57, 68], "judg": [58, 204, 397, 997], "definit": [58, 81, 186, 198, 265, 278, 344, 372, 373, 374, 385, 387, 397, 399, 400, 402, 513, 515, 521, 597, 614, 678, 694, 704, 713, 743, 780, 781, 956, 959, 961, 963, 965, 967, 970, 981, 986, 1004, 1013, 1017, 1024], "shorthand": [58, 385, 398, 453, 547, 548, 845, 846, 1012], "homo": 58, "compl": 58, "mea": 58, "context": [58, 236, 240, 278, 358, 359, 366, 371, 373, 384, 385, 397, 398, 403, 404, 405, 407, 408, 423, 430, 432, 434, 436, 438, 443, 444, 447, 450, 453, 454, 458, 517, 521, 522, 523, 525, 528, 529, 530, 531, 532, 534, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 580, 588, 596, 612, 613, 616, 618, 620, 625, 633, 637, 639, 641, 643, 644, 645, 647, 649, 651, 652, 654, 662, 665, 674, 675, 676, 677, 678, 679, 680, 759, 763, 766, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 826, 827, 830, 832, 834, 835, 837, 838, 843, 846, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 957, 963, 967, 973, 977, 981, 988, 991, 1000, 1009, 1016, 1017, 1022, 1025], "n_digit": 58, "1797": [58, 89, 256, 297, 318, 369, 431, 488, 518, 519, 520, 521, 585, 586, 674, 675, 676, 677, 970, 999], "bench_k_mean": 58, "tabl": [58, 216, 258, 372, 373, 376, 381, 397, 405, 568, 644, 666, 782, 796, 821, 932, 963, 967, 968, 973, 987, 1010], "fit_tim": [58, 120, 187, 206, 260, 401, 807, 808], "inertia_": [58, 61, 64, 429, 433, 435, 1020], "clustering_metr": 58, "sample_s": [58, 232, 344, 776], "formatter_result": 58, "determinist": [58, 123, 359, 368, 374, 385, 397, 429, 433, 435, 437, 438, 439, 444, 445, 448, 537, 545, 546, 550, 551, 569, 570, 677, 681, 793, 794, 840, 892, 893, 959, 963, 1010, 1013, 1015, 1017, 1018, 1021, 1024], "ttime": 58, "tinertia": 58, "thomo": 58, "tcompl": 58, "tv": 58, "tari": 58, "tami": 58, "tsilhouett": 58, "__________________________________________________________________________________": 58, "043": [58, 378], "69545": 58, "598": [58, 103, 151, 322, 324, 527], "645": 58, "621": [58, 754], "469": [58, 169], "617": [58, 112, 134, 261, 397, 754], "152": [58, 378], "047": [58, 378], "69735": 58, "681": [58, 378], "723": [58, 233], "701": 58, "574": [58, 520, 527], "698": 58, "72686": 58, "636": [58, 182, 344, 378], "658": [58, 86], "647": [58, 319, 322, 324], "521": 58, "643": [58, 256], "reduced_data": 58, "mesh": [58, 119, 128, 152, 232, 286, 294, 302, 323, 326], "169": [58, 297], "mark": [58, 92, 142, 163, 262, 269, 364, 372, 374, 376, 380, 381, 385, 397, 521, 593, 594, 597, 618, 644, 837, 838, 879, 880, 897, 911, 916, 921, 963, 991, 1004, 1009, 1010, 1015, 1017, 1018], "344": [58, 68, 150], "plot_kmeans_digit": [58, 68], "kmeans_plusplu": [59, 397, 1021], "4000": [59, 125, 246], "centers_init": 59, "4eacc5": [59, 64], "ff9c34": [59, 64], "4e9a06": [59, 64], "cluster_data": 59, "079": [59, 68, 369], "plot_kmeans_plusplu": [59, 68], "wrong": [60, 198, 284, 343, 354, 369, 372, 374, 405, 490, 711, 741, 776, 967, 973, 982, 1012, 1014, 1016, 1017, 1018, 1019, 1022], "wide": [60, 61, 113, 231, 301, 383, 397, 402, 405, 956, 963, 987, 991, 1002, 1009, 1011, 1025], "ambival": 60, "thick": [60, 288, 970], "ow": 60, "7049787496083262": 60, "5882004012129721": 60, "6505186632729437": 60, "561464362648773": 60, "4857596147013469": 60, "silhouette_sampl": [60, 776, 1013, 1015, 1017, 1025], "distinct": [60, 258, 320, 343, 345, 367, 374, 377, 385, 386, 401, 404, 405, 575, 783, 792, 800, 858, 859, 879, 880, 956, 963, 970, 973, 1002, 1017], "center_box": [60, 498], "range_n_clust": 60, "set_size_inch": [60, 136, 237], "lie": [60, 85, 146, 168, 232, 300, 320, 328, 330, 402, 404, 592, 832, 834, 835, 836, 961, 964, 967, 977, 982], "insert": [60, 168, 198, 383, 397, 473, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 899], "blank": [60, 377, 957, 983], "demarc": 60, "silhouette_avg": 60, "sample_silhouette_valu": 60, "y_lower": [60, 123], "aggreg": [60, 114, 216, 261, 267, 307, 314, 397, 404, 520, 541, 542, 707, 708, 713, 730, 731, 733, 735, 736, 738, 770, 968, 970, 977], "ith_cluster_silhouette_valu": 60, "size_cluster_i": 60, "y_upper": [60, 123], "fill_betweenx": 60, "2nd": [60, 90, 158, 305, 397, 408, 430, 516, 977, 1024], "lw": [60, 78, 79, 81, 99, 104, 105, 192, 199, 201, 204, 208, 215, 222, 246, 253, 268, 273, 283, 300, 320, 337], "fontweight": [60, 193], "bold": [60, 123, 187, 193, 372], "plot_kmeans_silhouette_analysi": [60, 68], "reach": [61, 116, 147, 198, 200, 214, 216, 260, 314, 330, 352, 377, 386, 388, 397, 402, 406, 436, 443, 494, 495, 579, 580, 613, 630, 631, 632, 633, 638, 639, 640, 641, 642, 646, 647, 648, 649, 652, 653, 654, 662, 663, 664, 665, 667, 668, 669, 670, 714, 715, 768, 780, 781, 841, 842, 881, 956, 967, 971, 981, 983, 991, 1020, 1024, 1025], "optimum": [61, 156, 168, 174, 271, 402, 458, 963, 966], "stuck": [61, 678, 964], "check_random_st": [61, 214, 221, 230, 235, 374, 381, 385], "trade": [61, 78, 116, 170, 257, 259, 260, 330, 343, 396, 397, 399, 539, 540, 545, 546, 620, 642, 678, 782, 785, 786, 796, 807, 964, 971, 979, 981, 982, 988], "n_init_rang": 61, "n_samples_per_cent": 61, "make_data": 61, "n_clusters_tru": 61, "init_s": [61, 344, 435], "factori": [61, 258, 405, 727, 937, 967], "empti": [61, 70, 105, 210, 321, 358, 367, 374, 376, 397, 409, 469, 519, 547, 548, 617, 793, 849, 891, 899, 904, 905, 911, 957, 982, 1000, 1011, 1013, 1017, 1018, 1020, 1021, 1023, 1024, 1025], "run_id": 61, "km": [61, 314, 344], "my_memb": [61, 63, 64], "660": [61, 68, 159], "plot_kmeans_stability_low_dim_dens": [61, 68], "fast": [62, 174, 182, 187, 213, 214, 232, 233, 301, 345, 358, 367, 372, 381, 397, 399, 401, 402, 404, 405, 407, 409, 432, 433, 455, 460, 494, 518, 519, 521, 524, 526, 530, 533, 550, 551, 552, 574, 575, 577, 618, 619, 626, 644, 645, 658, 660, 673, 685, 782, 796, 805, 806, 816, 817, 824, 825, 829, 840, 921, 936, 959, 963, 966, 969, 970, 972, 973, 983, 987, 991, 1002, 1009, 1010, 1015, 1016, 1019, 1020], "globular": [62, 397], "cleanli": [62, 1009], "plot_linkage_comparison": [62, 68], "dorin": [63, 434], "comaniciu": [63, 397, 434], "meer": [63, 397, 434], "ieee": [63, 79, 81, 369, 397, 399, 406, 410, 434, 461, 520, 549, 650, 671, 672, 710, 754, 963, 967, 973], "transact": [63, 369, 397, 399, 408, 410, 430, 434, 461, 520, 524, 526, 533, 549, 630, 650, 671, 672, 710, 711, 741, 754, 963, 967], "intellig": [63, 343, 369, 397, 404, 434, 541, 542, 624, 682, 710, 814, 841, 842, 968, 979, 988, 991], "2002": [63, 395, 397, 404, 423, 434, 579, 580, 711, 741, 831, 879, 959, 967], "603": [63, 338, 341, 434], "619": [63, 129, 134, 344, 434], "labels_uniqu": 63, "473": [63, 68, 345], "plot_mean_shift": [63, 68, 447], "3000": [64, 110, 222, 876, 877], "k_mean": [64, 381, 385, 1001, 1017], "t_batch": 64, "pairwis": [64, 167, 168, 231, 267, 310, 314, 315, 343, 358, 364, 374, 385, 397, 402, 407, 432, 444, 447, 448, 454, 473, 494, 495, 521, 547, 548, 606, 624, 625, 626, 627, 628, 629, 674, 676, 678, 680, 682, 685, 763, 766, 773, 775, 776, 812, 828, 830, 832, 836, 850, 882, 967, 970, 979, 982, 1004, 1009, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025], "k_means_cluster_cent": 64, "mbk_means_cluster_cent": 64, "k_means_label": 64, "mbk_means_label": 64, "ninertia": 64, "bbbbbb": 64, "201": [64, 68, 122, 369, 570], "plot_mini_batch_kmean": [64, 68], "shane": [65, 1018, 1021, 1024], "grigsbi": 65, "refug": 65, "rocktalu": 65, "cluster_optics_dbscan": [65, 397], "n_points_per_clust": 65, "c1": [65, 120, 158, 230, 306], "c2": [65, 120, 158, 230, 306], "c3": [65, 120, 306], "c4": [65, 306, 989, 1004], "c5": [65, 989, 1004], "c6": 65, "clust": [65, 436, 443], "labels_050": 65, "reachability_": [65, 397, 436, 441, 442, 443], "core_dist": [65, 441], "core_distances_": [65, 436, 441, 443], "ordering_": [65, 397, 436, 441, 442, 443], "labels_200": 65, "ax3": [65, 321], "ax4": 65, "klass": 65, "xk": [65, 536], "rk": 65, "full_lik": 65, "noptic": 65, "ndbscan": 65, "plot_opt": [65, 68], "tri": [66, 104, 219, 287, 359, 374, 377, 383, 386, 395, 404, 435, 437, 439, 617, 618, 619, 656, 678, 684, 686, 688, 796, 935, 972, 990, 993, 1011, 1017, 1021], "intens": [66, 98, 278, 369, 373, 402, 429, 433, 445, 593, 594, 618, 619, 784, 956, 974, 991, 1017], "weakli": 66, "outlin": [66, 119, 372, 374, 385, 386, 387, 397, 956, 1004], "center1": 66, "center2": 66, "center3": 66, "67": [66, 168, 216, 297, 369, 502, 503, 504, 613, 653, 699, 796, 957, 967, 981, 1005, 1009], "58": [66, 79, 221, 297, 335, 369, 399, 410, 461, 749, 977, 998], "center4": 66, "radius1": 66, "radius2": 66, "radius3": 66, "radius4": 66, "circle1": 66, "circle2": 66, "circle3": 66, "circle4": 66, "label_im": 66, "cleaner": 66, "536": [66, 68, 155, 278], "plot_segmentation_toi": [66, 68], "swiss": [67, 165, 218, 225, 397, 516, 678, 679, 1023], "roll": [67, 165, 218, 225, 375, 397, 516, 678, 679, 915, 991, 1019, 1024], "sole": [67, 383, 397], "oppos": [67, 372, 376, 393, 397, 880, 970, 982, 993, 1009], "make_swiss_rol": [67, 223, 1023], "thinner": 67, "fig1": 67, "set_posit": [67, 101, 102, 209, 300], "jet": 67, "fig2": 67, "121": [67, 112, 163, 202, 232, 655, 977], "381": [67, 68], "plot_ward_structured_vs_unstructur": [67, 68], "967": [68, 74, 967, 971], "auto_examples_clust": 68, "chain": [69, 76, 165, 275, 277, 278, 354, 361, 364, 383, 385, 396, 407, 482, 488, 527, 597, 613, 644, 723, 782, 810, 813, 815, 816, 817, 818, 844, 845, 864, 956, 957, 968, 972, 984, 987, 991, 1002, 1004], "raster": 70, "caption": 70, "serv": [70, 99, 156, 261, 398, 532, 537, 624, 959, 1023], "matt": [70, 1012, 1013, 1014, 1019, 1020, 1024], "terri": [70, 1013], "truncatedsvd": [70, 128, 220, 344, 402, 520, 521, 525, 526, 527, 678, 843, 846, 964, 1011, 1016, 1020, 1021, 1023], "dictvector": [70, 165, 342, 344, 346, 367, 405, 474, 568, 574, 575, 576, 577, 857, 1009, 1010, 1013, 1019, 1021, 1022, 1025], "compris": [70, 123, 256, 343, 344, 345, 367, 383, 402, 404, 501, 789, 964], "subject": [70, 127, 249, 261, 343, 367, 372, 374, 376, 383, 385, 386, 395, 396, 399, 401, 402, 481, 644, 645, 671, 847, 884, 885, 935, 937, 958, 963, 982, 986, 1002, 1018, 1019, 1022, 1024], "mccall": 70, "mksol": 70, "dseg": 70, "ti": [70, 198, 245, 248, 256, 339, 358, 395, 397, 585, 586, 621, 706, 711, 741, 780, 781, 886, 889, 892, 966, 967, 982, 1010, 1012, 1013, 1017, 1019, 1023, 1024], "fred": [70, 1009, 1022], "575": [70, 198, 224, 225, 344], "3539": 70, "1993apr6": 70, "131900": 70, "8407": 70, "perhap": [70, 119, 369, 371, 380, 385, 403, 988], "militari": 70, "slug": 70, "school": [70, 369, 397, 773, 967], "physic": [70, 116, 359, 491, 932, 963, 1025], "teacher": 70, "ex": [70, 370, 373, 388, 1013, 1014], "fighter": 70, "jock": 70, "wasn": [70, 1018], "poundal": 70, "flink": 70, "funni": 70, "propon": 70, "si": 70, "insist": 70, "safeti": [70, 383, 398, 933, 988, 1019], "ball": [70, 283, 291, 397, 403, 434, 678, 824, 825, 829, 832, 834, 835, 836, 1009, 1011, 1014, 1020], "mari": [70, 1017, 1018, 1019, 1020, 1023], "shafer": 70, "nasa": [70, 343, 344, 369], "am": [70, 75, 80, 130, 169, 343, 377, 399, 460, 479, 1016], "dryden": 70, "stateless": [70, 344, 360, 374, 385, 405, 568, 569, 575, 624, 847, 848, 856, 977, 1025], "subject_body_extractor": 70, "startswith": [70, 220, 291], "subject_body_transform": 70, "sentenc": [70, 343, 345, 367, 386, 405], "text_stat": 70, "num_sent": 70, "text_stats_transform": 70, "subjectbodyextractor": 70, "subjectbodi": 70, "union": [70, 168, 398, 482, 723, 739, 843, 1016], "body_bow": 70, "pull": [70, 313, 359, 370, 375, 385, 386, 1019], "body_stat": 70, "transformer_weight": [70, 450, 453, 843, 1014, 1021], "396": [70, 344, 369, 1002], "394": [70, 159, 344], "plot_column_transform": [70, 76], "imput": [71, 130, 164, 170, 229, 238, 240, 311, 314, 361, 364, 376, 384, 385, 398, 404, 476, 487, 551, 566, 625, 631, 658, 806, 827, 845, 903, 905, 987, 988, 1004, 1011, 1012], "miss": [71, 130, 164, 170, 229, 238, 258, 278, 311, 315, 354, 358, 361, 364, 367, 369, 371, 372, 374, 376, 377, 385, 396, 397, 398, 399, 432, 458, 476, 482, 484, 487, 547, 548, 551, 552, 613, 614, 615, 616, 625, 631, 658, 676, 680, 712, 754, 806, 827, 845, 853, 854, 858, 860, 861, 864, 865, 869, 872, 873, 875, 963, 964, 967, 987, 988, 989, 991, 1004, 1011, 1013, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "chi": [71, 80, 110, 304, 364, 406, 505, 578, 581, 582, 584, 585, 586, 590, 591, 592, 595, 624, 625, 626, 627, 628, 743, 744, 1004, 1009, 1014, 1015], "dispatch": [71, 361, 393, 454, 782, 796, 805, 806, 807, 882, 933, 934, 997, 1004, 1024], "processor": [71, 130, 168, 361, 408, 423, 430, 432, 434, 436, 438, 443, 444, 447, 450, 453, 458, 517, 521, 522, 523, 525, 528, 529, 531, 532, 534, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 580, 588, 596, 618, 620, 625, 633, 637, 639, 641, 643, 644, 645, 647, 649, 651, 652, 654, 662, 665, 674, 675, 676, 677, 678, 679, 680, 759, 763, 766, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 826, 827, 830, 832, 834, 835, 837, 838, 843, 846, 879, 880], "pedro": [71, 1010, 1012, 1013, 1017], "simpleimput": [71, 130, 162, 163, 170, 229, 238, 240, 311, 314, 354, 385, 613, 614, 615, 957, 977, 1017, 1018, 1020, 1021, 1023, 1024, 1025], "chi2": [71, 405, 406, 438, 567, 578, 581, 582, 584, 585, 586, 591, 592, 595, 606, 624, 625, 626, 627, 628, 629, 744, 750, 759, 1009, 1016, 1023], "40945": 71, "titan": [71, 170, 240, 310, 314, 315], "surviv": [71, 170, 956, 987], "ag": [71, 147, 168, 170, 186, 187, 198, 216, 237, 238, 240, 300, 313, 314, 315, 367, 369, 991, 993, 1000], "fare": [71, 170, 240, 314, 315, 1013, 1014], "embark": [71, 170, 240, 310, 314, 315], "sex": [71, 147, 168, 170, 186, 187, 240, 315, 369, 975, 1000], "femal": [71, 168, 315, 377, 857, 858, 977], "male": [71, 168, 315, 377, 857, 858, 977], "pclass": [71, 170, 240, 310, 314, 315], "numeric_featur": [71, 314], "numeric_transform": [71, 314], "categorical_transform": 71, "selector": [71, 143, 144, 380, 405, 452, 567, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 1011, 1019, 1021, 1025], "preprocessor": [71, 130, 168, 198, 229, 238, 306, 311, 313, 314, 315, 398, 405, 574, 575, 577, 987, 1002, 1009, 1012, 1017, 1019], "798": [71, 159, 404], "lt": [71, 72, 115, 130, 168, 248, 256, 270, 370, 372], "0x7f71f3959700": 71, "pipelinepipelin": [71, 72, 115, 130, 144, 168, 170, 228, 229, 237, 238, 240, 259, 265, 306, 311, 314], "columntransformercolumntransform": [71, 130, 168, 169, 170, 229, 238, 306, 311, 314], "simpleimputersimpleimput": [71, 130, 170, 229, 238, 311, 314], "standardscalerstandardscal": [71, 130, 168, 228, 229, 237, 238, 240, 265, 311, 314], "onehotencoderonehotencod": [71, 115, 130, 168, 169, 229, 238, 311, 314], "selectpercentileselectpercentil": [71, 240], "logisticregressionlogisticregress": [71, 115, 228, 229, 238, 240, 297, 311, 314], "make_column_selector": [71, 120, 130, 398, 450, 453, 1019], "subset_featur": 71, "Then": [71, 109, 111, 115, 118, 130, 133, 144, 168, 174, 182, 186, 198, 223, 228, 239, 260, 261, 343, 366, 372, 376, 378, 380, 388, 394, 395, 397, 400, 402, 405, 406, 556, 579, 705, 741, 782, 796, 844, 957, 966, 967, 973, 982, 1002, 1018], "1047": 71, "1118": 71, "684": [71, 80], "1045": 71, "841": 71, "1046": [71, 248], "kb": [71, 168, 169], "numerical_transform": 71, "yourself": [71, 371, 372, 373, 377, 380, 971], "dtype_exclud": [71, 452], "dtype_includ": [71, 120, 130, 398, 452], "_column_transform": [71, 130], "0x7f71e0db6790": 71, "0x7f71e0db6f40": 71, "exactli": [71, 167, 177, 182, 191, 198, 249, 266, 301, 343, 372, 374, 394, 397, 401, 402, 405, 410, 432, 439, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 501, 512, 576, 577, 601, 662, 664, 689, 691, 748, 783, 800, 805, 959, 963, 964, 965, 967, 968, 983, 1001, 1002, 1009, 1015, 1016, 1022], "hyperparamet": [71, 109, 150, 151, 157, 158, 162, 165, 169, 177, 182, 187, 212, 216, 227, 251, 256, 261, 263, 274, 280, 297, 343, 374, 385, 397, 401, 402, 404, 407, 488, 521, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 629, 639, 645, 651, 659, 662, 713, 770, 782, 796, 956, 961, 962, 963, 966, 967, 969, 971, 973, 981, 988, 1002, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025], "cartesian": [71, 394, 619, 970, 1024], "preprocessor__num__imputer__strategi": 71, "preprocessor__cat__selector__percentil": 71, "classifier__c": 71, "search_cv": 71, "param_distribut": [71, 150, 259, 266, 270, 312, 384, 786, 794, 796], "randomizedsearchcvrandomizedsearchcv": 71, "trigger": [71, 72, 376, 398, 841, 842, 844, 845, 904, 905, 921, 963, 1002, 1017, 1023, 1024], "best_params_": [71, 73, 123, 150, 233, 248, 256, 262, 312, 330, 384, 782, 785, 786, 796, 956, 998, 1002], "best_score_": [71, 73, 233, 259, 262, 263, 330, 659, 661, 782, 785, 786, 796, 997, 998, 1002, 1020], "cv_results_": [71, 72, 73, 82, 116, 136, 146, 248, 256, 257, 258, 259, 262, 266, 269, 270, 280, 330, 458, 580, 782, 785, 786, 796, 1002, 1015, 1019, 1021, 1022], "sort_valu": [71, 170, 240, 248, 258, 269, 306, 307], "mean_test_scor": [71, 72, 73, 82, 116, 136, 146, 248, 257, 258, 259, 266, 269, 270, 280, 330, 458, 580, 782, 796, 956, 1015, 1022], "ascend": [71, 170, 306, 404, 436, 442, 613, 621, 896, 897, 898, 981, 1019, 1025], "std_test_scor": [71, 73, 116, 136, 146, 257, 258, 259, 266, 280, 458, 580, 782, 796, 1015, 1022], "param_preprocessor__num__imputer__strategi": 71, "param_preprocessor__cat__selector__percentil": 71, "param_classifier__c": 71, "786015": 71, "031020": 71, "785063": 71, "030498": 71, "783149": 71, "030462": 71, "227": [71, 76, 258, 397, 710], "plot_column_transformer_mixed_typ": [71, 76], "instanti": [72, 153, 313, 375, 404, 436, 553, 554, 588, 616, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 911, 973, 999, 1009, 1017, 1021, 1025], "memoiz": [72, 367, 385], "costli": [72, 78, 117, 162, 259, 339, 359, 373, 378, 397, 429, 613, 790, 792, 876, 877, 921, 967, 970, 979, 988], "mcgibbon": [72, 1011, 1012, 1015], "selectkbest": [72, 74, 143, 144, 314, 354, 372, 398, 406, 567, 578, 581, 582, 584, 586, 592, 956, 1010, 1015, 1025], "mutual_info_classif": [72, 406, 578, 581, 582, 585, 586, 1015, 1021, 1024], "pipe": [72, 73, 120, 238, 257, 306, 312, 313, 384, 398, 405, 576, 844, 869, 870, 872, 873, 874, 875, 956, 977, 998], "reduce_dim": [72, 238, 257, 398], "popul": [72, 78, 80, 168, 198, 261, 300, 367, 381, 385, 399, 426, 698, 704, 826, 827, 828, 830, 832, 834, 835, 836, 936, 967, 973, 977, 983], "n_features_opt": 72, "c_option": 72, "iterated_pow": [72, 518, 521, 527, 1015], "reduce_dim__n_compon": [72, 257, 398], "classify__c": 72, "reduce_dim__k": 72, "reducer_label": 72, "kbest": [72, 578], "0x7f71f390e5e0": 72, "gridsearchcvgridsearchcv": [72, 238, 248, 256, 258], "minmaxscalerminmaxscal": 72, "passthroughpassthroughlinearsvclinearsvc": 72, "mean_scor": [72, 267, 270, 344, 1022], "alphabet": [72, 385, 726], "eas": [72, 248, 305, 372, 375, 378, 963, 981, 987, 988, 991, 1020, 1021, 1023], "sometim": [72, 130, 167, 258, 296, 344, 354, 359, 360, 372, 374, 376, 378, 384, 385, 388, 397, 399, 402, 404, 405, 435, 520, 521, 524, 526, 527, 849, 850, 851, 899, 962, 963, 964, 967, 972, 977, 978, 982, 993, 1001, 1006, 1010, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025], "worthwhil": [72, 385], "slower": [72, 98, 116, 120, 162, 233, 267, 345, 404, 405, 406, 432, 437, 439, 524, 526, 533, 541, 542, 544, 549, 551, 574, 575, 577, 617, 618, 619, 629, 645, 658, 660, 673, 678, 690, 812, 816, 817, 960, 964, 965, 966, 968, 970, 983, 1002, 1013, 1020], "constructor": [72, 230, 359, 374, 385, 396, 398, 405, 450, 453, 535, 536, 541, 553, 554, 555, 556, 567, 568, 574, 575, 583, 654, 662, 663, 826, 827, 828, 830, 831, 832, 834, 835, 836, 843, 844, 845, 846, 935, 956, 968, 977, 982, 988, 993, 1009, 1010, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1023, 1024], "folder": [72, 367, 370, 372, 376, 380, 388, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 489, 970, 1002], "cached_pip": [72, 398], "delet": [72, 319, 321, 376, 377, 455, 460, 472], "exit": [72, 278, 376, 380, 454], "benefici": [72, 74, 78, 95, 128, 300, 301, 370, 964], "416": [72, 76, 344, 724, 967], "plot_compare_reduct": [72, 76], "logistic__c": [73, 998], "046415888336127774": 73, "pca__n_compon": [73, 998], "truncat": [73, 128, 220, 381, 520, 521, 525, 526, 527, 530, 662, 664, 711, 741, 780, 833, 897, 921, 956, 966, 967, 981, 998, 1002, 1003, 1004, 1015, 1017], "x_digit": [73, 138, 295, 398, 997, 998, 1000], "y_digit": [73, 138, 295, 398, 997, 998, 1000], "__": [73, 259, 385, 398, 411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 780, 781, 782, 785, 786, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 956, 998, 1017, 1018], "spectrum": [73, 510, 530, 681, 921, 991, 998, 1017], "ax0": [73, 75, 198, 230, 344, 998], "n_components_": [73, 103, 385, 427, 431, 520, 524, 525, 526, 527, 528, 529, 876, 877, 998, 1018, 1020], "explained_variance_ratio_": [73, 104, 344, 402, 520, 527, 530, 535, 998, 1012, 1015], "named_step": [73, 86, 398, 579, 580, 583, 844, 845, 884, 885, 963, 998, 1016, 1018], "components_col": 73, "param_pca__n_compon": 73, "best_clf": 73, "nlargest": 73, "yerr": [73, 79, 81, 117, 120, 146, 280, 306, 321], "val": [73, 210, 258, 923], "plot_digits_pip": [73, 76], "candid": [74, 248, 256, 259, 266, 312, 360, 372, 376, 397, 404, 434, 436, 782, 785, 786, 794, 796, 963, 970, 983, 1015], "features__pca__n_compon": 74, "features__univ_select__k": 74, "svm__c": 74, "867": [74, 103, 107], "transformer_list": [74, 398, 843, 846, 957, 1020, 1021], "univ_select": 74, "amuel": [74, 114, 189, 232, 320, 338], "ai": [74, 114, 189, 232, 320, 338, 401], "bonn": [74, 114, 189, 232, 320, 338], "mayb": [74, 296, 385, 405, 982, 988], "combined_featur": 74, "x_featur": [74, 626, 627, 628, 959], "grid_search": [74, 116, 238, 248, 256, 266, 398, 1011, 1012, 1013, 1014, 1015, 1016], "403": [74, 76, 262], "plot_feature_union": [74, 76], "overview": [75, 373, 375, 384, 385, 719, 728, 969, 981, 1003, 1004], "transformedtargetregressor": [75, 168, 198, 383, 398, 579, 580, 583, 1017, 1019, 1022], "hous": [75, 130, 162, 163, 300, 312, 365, 476, 1004], "translat": [75, 374, 407, 513, 600, 853, 854, 870, 964, 967, 985, 991], "lowest": [75, 86, 169, 182, 248, 366, 397, 401, 621, 623, 785, 786, 789, 891, 892, 964, 967, 983, 1024], "logarithm": [75, 130, 168, 231, 259, 330, 385, 406, 446, 576, 644, 645, 662, 690, 711, 726, 736, 740, 741, 742, 788, 824, 825, 919, 983, 997, 1016], "log1p": [75, 230, 848, 967, 977], "expm1": 75, "y_tran": 75, "At": [75, 203, 270, 318, 321, 358, 359, 376, 386, 388, 393, 400, 404, 423, 426, 451, 574, 575, 577, 588, 812, 814, 851, 931, 956, 963, 966, 968, 972, 981, 991], "meda": [75, 168, 967], "median_absolute_error": [75, 168, 967, 1013, 1019, 1021], "r2_score": [75, 167, 182, 193, 194, 404, 418, 451, 468, 469, 470, 540, 542, 544, 546, 548, 551, 554, 556, 597, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 664, 665, 709, 713, 817, 818, 827, 835, 842, 885, 887, 890, 893, 895, 956, 967, 1010, 1012, 1018, 1022, 1023], "compute_scor": [75, 103, 177, 178, 630, 631, 1018], "r2": [75, 111, 116, 130, 167, 169, 193, 233, 374, 398, 404, 540, 556, 659, 807, 842, 967, 975, 1018], "ridge_cv": 75, "y_pred_ridg": 75, "ridge_cv_with_trans_target": 75, "inverse_func": [75, 168, 398, 451, 848, 977, 1017], "y_pred_ridge_with_trans_target": 75, "sell": 75, "quantile_transform": [75, 861, 872, 977, 1016, 1017, 1018], "house_pric": [75, 130], "select_dtyp": [75, 120, 315, 452], "nan": [75, 120, 162, 163, 168, 216, 238, 253, 261, 306, 310, 315, 358, 364, 374, 381, 385, 404, 432, 454, 482, 541, 542, 543, 547, 548, 550, 579, 580, 583, 589, 592, 595, 613, 614, 615, 616, 621, 698, 699, 700, 707, 708, 709, 713, 714, 715, 754, 763, 768, 769, 770, 772, 782, 785, 786, 788, 796, 806, 807, 808, 811, 853, 854, 858, 860, 861, 864, 865, 869, 872, 873, 875, 902, 903, 904, 905, 942, 956, 967, 977, 983, 1004, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025], "inf": [75, 153, 288, 381, 397, 407, 432, 436, 443, 447, 457, 458, 464, 539, 540, 545, 546, 579, 580, 583, 592, 593, 594, 605, 613, 621, 623, 634, 635, 636, 638, 655, 657, 658, 662, 666, 673, 713, 715, 731, 763, 770, 774, 840, 849, 856, 902, 904, 905, 919, 967, 977, 1016, 1018, 1019, 1020, 1021, 1023, 1024, 1025], "lotfrontag": 75, "garageyrblt": 75, "masvnrarea": [75, 130], "to_fram": 75, "n_quantil": [75, 169, 304, 861, 873, 1018], "output_distribut": [75, 300, 304, 398, 860, 861, 872, 873, 977], "squeez": [75, 156, 157, 278, 300, 1001], "quantiletransform": [75, 169, 304, 398, 451, 860, 873, 957, 977, 1016, 1017, 1018, 1019, 1020, 1025], "weaker": 75, "residu": [75, 194, 200, 254, 418, 451, 468, 469, 470, 538, 540, 542, 544, 546, 548, 551, 554, 556, 597, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 657, 658, 659, 660, 664, 665, 671, 672, 687, 729, 770, 817, 818, 827, 835, 842, 885, 887, 890, 893, 895, 963, 967, 1000, 1021, 1022, 1024], "smile": [75, 367, 1023], "244": [75, 76, 570], "plot_transformed_target": [75, 76, 451], "57": [76, 150, 168, 214, 225, 267, 297, 369, 370, 388, 389, 390, 398, 691, 766, 817, 967, 977, 1009], "auto_examples_compos": 76, "mahalanobi": [77, 83, 165, 397, 399, 436, 443, 455, 456, 457, 458, 459, 460, 461, 462, 685, 763, 764, 765, 831, 961, 973, 1017, 1020, 1021], "ledoitwolf": [77, 79, 83, 103, 165, 399, 455, 456, 460, 461, 462, 463, 782, 1013], "empiricalcovari": [78, 80, 81, 399, 455, 459, 460, 461, 462, 973], "unbias": [78, 395, 399, 402, 423, 536, 642, 658, 660, 673, 963, 997], "shrunk": [78, 103, 300, 410, 459, 461, 462, 465, 466, 467, 535, 865, 961, 981, 1003, 1004], "base_x_train": 78, "base_x_test": 78, "coloring_matrix": [78, 79], "shrunkcovari": [78, 103, 399, 455, 456, 459, 460, 461], "empirical_covari": [78, 399, 1025], "log_likelihood": [78, 596, 597, 780, 781], "negative_loglik": 78, "real_cov": [78, 79, 456, 459, 460, 461, 462], "emp_cov": [78, 80, 82, 464, 467], "loglik_r": 78, "inv": [78, 82, 295], "formula": [78, 79, 394, 397, 399, 410, 459, 461, 502, 503, 504, 576, 629, 632, 633, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 662, 664, 690, 714, 740, 749, 956, 961, 963, 967, 972, 973, 977, 981, 1014, 1016, 1018], "asymptot": [78, 79, 187, 358, 399, 460, 522, 715, 963, 966, 1019], "criterion": [78, 79, 171, 186, 206, 248, 270, 311, 374, 381, 385, 397, 402, 427, 431, 435, 438, 445, 448, 518, 523, 525, 532, 539, 540, 543, 544, 545, 546, 550, 551, 552, 592, 613, 630, 631, 634, 642, 652, 653, 654, 655, 657, 658, 660, 662, 663, 664, 666, 677, 681, 696, 781, 881, 886, 887, 888, 889, 890, 892, 893, 894, 895, 963, 966, 967, 975, 980, 983, 989, 1001, 1004, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1025], "chen": [78, 79, 399, 404, 410, 461, 711, 741, 959, 967, 1012, 1015, 1016, 1017, 1019, 1022, 1023, 1024], "Its": [78, 109, 256, 260, 368, 374, 385, 402, 407, 524, 962, 963, 972, 975, 981, 987, 991, 1012], "tuned_paramet": [78, 136, 256], "loglik_lw": 78, "loglik_oa": 78, "unseen": [78, 121, 144, 187, 206, 271, 284, 360, 364, 374, 384, 385, 397, 401, 830, 861, 873, 958, 967, 973, 975, 977, 983, 993, 1012, 1017, 1021], "loglog": [78, 231], "lik_max": 78, "amax": [78, 121], "lik_min": 78, "amin": 78, "vline": [78, 97, 185, 186, 187, 199, 258, 271, 301], "shrinkage_": [78, 79, 459, 461], "magenta": [78, 125], "purpl": [78, 92, 223], "cyan": [78, 113, 168, 281, 289], "realli": [78, 170, 187, 376, 377, 378, 967, 973, 991, 1023], "interestingli": [78, 147, 977], "outperform": [78, 86, 130, 305, 383, 401, 404, 438, 448, 969, 977], "491": [78, 83, 682], "plot_covariance_estim": [78, 83], "inspir": [79, 127, 169, 216, 372, 383, 404, 547, 548, 909, 957, 987, 1018], "mmse": [79, 399, 410, 461], "tran": 79, "octob": [79, 367, 1009, 1016, 1022, 1023], "toeplitz": 79, "choleski": [79, 198, 216, 381, 457, 458, 464, 513, 597, 634, 636, 637, 640, 641, 642, 644, 645, 655, 658, 660, 666, 668, 669, 673, 780, 781, 963, 1012, 1016, 1018, 1021, 1024], "simul": [79, 97, 168, 192, 234, 258, 991], "n_samples_rang": [79, 231], "lw_mse": 79, "oa_ms": 79, "lw_shrinkag": 79, "oa_shrinkag": 79, "error_norm": [79, 81, 455, 456, 457, 458, 459, 460, 461, 462], "darkorang": [79, 99, 104, 105, 199, 209, 222, 244, 245, 246, 249, 265, 267, 273, 281, 283, 289, 290, 320, 350], "plot_lw_vs_oa": [79, 83], "x_i": [80, 114, 142, 168, 199, 313, 338, 397, 402, 403, 404, 407, 600, 601, 605, 608, 609, 611, 819, 820, 823, 958, 959, 963, 969, 970, 971, 977, 981, 982, 983], "d_": [80, 397, 402, 634, 655, 666, 763, 964, 969], "mle": [80, 103, 527, 1017, 1020], "resist": [80, 81, 372], "erron": [80, 81, 402, 963, 1010, 1017, 1021], "breakdown": [80, 81, 215, 665, 963], "n_": [80, 81, 258, 313, 397, 402, 404, 632, 638, 671, 682, 959, 963, 967, 969, 970, 974, 977, 979, 982, 983], "smallest": [80, 81, 198, 278, 348, 367, 397, 399, 406, 513, 527, 616, 640, 641, 642, 668, 669, 676, 680, 681, 782, 785, 786, 796, 801, 983, 1022], "pure": [80, 81, 86, 182, 198, 385, 397, 459, 465, 482, 543, 544, 545, 546, 550, 551, 552, 691, 701, 771, 778, 892, 893, 894, 895, 977], "rousseuw": [80, 81], "rousseeuw": [80, 81, 397, 399, 455, 460, 775, 776, 973], "ass": [80, 81, 399, 460], "1984": [80, 81, 399, 460, 892, 893, 983], "wilson": [80, 369, 1009, 1012], "hilferti": 80, "1931": 80, "proceed": [80, 367, 369, 397, 408, 425, 430, 497, 682, 694, 711, 741, 831, 881, 967, 979, 980, 981], "academi": [80, 831], "688": [80, 345], "n_outlier": [80, 81, 126, 201, 227, 285], "gen_cov": 80, "ey": [80, 81, 245, 249, 330, 367, 520, 527, 536], "outliers_cov": 80, "mincovdet": [80, 81, 399, 455, 456, 459, 461, 462, 973, 1009, 1016], "robust_cov": 80, "nmcd": 80, "nmle": 80, "26253567e": 80, "06695631e": 80, "22747343e": 80, "23773583": 80, "24640578": 80, "51963999": 80, "inlier": [80, 126, 201, 227, 236, 300, 385, 399, 455, 549, 657, 663, 830, 861, 873, 887, 888, 890, 963, 973, 1016, 1017, 1022], "inlier_plot": 80, "outlier_plot": 80, "get_xlim": [80, 193, 203, 300], "zz": 80, "mahal_emp_cov": 80, "emp_cov_contour": 80, "pubu_r": 80, "mahal_robust_cov": 80, "robust_contour": 80, "ylorbr_r": 80, "dist": [80, 220, 231, 376, 455, 456, 457, 458, 459, 460, 461, 462, 685, 748, 754, 824, 825], "borderaxespad": 80, "cubic": [80, 407], "suggest": [80, 98, 113, 117, 168, 171, 258, 330, 358, 371, 372, 379, 385, 401, 402, 404, 455, 460, 551, 631, 809, 961, 963, 964, 972, 982, 1002, 1013, 1020, 1023], "emp_mah": 80, "markeredgewidth": [80, 262], "rm": [80, 153, 376, 380, 399], "mahal": 80, "robust_mah": 80, "location_": [80, 81, 455, 456, 457, 458, 459, 460, 461, 462], "332": [80, 83, 231, 344, 872], "plot_mahalanobis_dist": [80, 83], "aim": [81, 163, 286, 320, 360, 367, 370, 372, 385, 391, 397, 399, 405, 434, 963, 967, 970, 977, 982, 987, 993, 1001, 1023], "compens": [81, 167, 169, 174, 198, 216, 259, 399, 402], "soon": [81, 385, 1000], "5n_": 81, "johanna": 81, "hardin": 81, "rock": 81, "decemb": [81, 155, 367, 650, 671, 672, 1009, 1017, 1019, 1021, 1024], "928": [81, 423], "946": 81, "zoubir": 81, "koivunen": 81, "chakhchoukh": 81, "muma": 81, "signal": [81, 95, 96, 97, 105, 123, 150, 155, 156, 165, 176, 197, 199, 217, 249, 313, 396, 397, 399, 405, 406, 407, 410, 461, 489, 507, 512, 517, 520, 523, 527, 611, 630, 631, 632, 633, 638, 639, 649, 650, 658, 670, 671, 672, 770, 803, 810, 858, 963, 967, 984, 991, 996, 1003, 1004], "tutori": [81, 136, 137, 138, 139, 187, 200, 216, 258, 361, 372, 373, 378, 380, 384, 391, 397, 438, 448, 677, 982, 1000, 1012], "treatment": [81, 167, 366, 402, 455, 460], "concept": [81, 116, 121, 267, 361, 372, 383, 396, 397, 403, 405, 959, 967, 970, 983, 991], "magazin": [81, 406], "29": [81, 98, 151, 155, 189, 198, 215, 224, 259, 315, 319, 369, 370, 388, 389, 390, 404, 545, 546, 676, 680, 766, 780, 836, 963, 964, 981], "61": [81, 159, 169, 216, 366, 369, 378, 398, 527, 546, 699], "range_n_outli": 81, "err_loc_mcd": 81, "err_cov_mcd": 81, "err_loc_emp_ful": 81, "err_cov_emp_ful": 81, "err_loc_emp_pur": 81, "err_cov_emp_pur": 81, "outliers_index": 81, "outliers_offset": 81, "inliers_mask": 81, "pure_x": 81, "pure_loc": 81, "pure_emp_cov": 81, "font_prop": 81, "hat": [81, 105, 254, 258, 283, 313, 370, 395, 399, 403, 404, 958, 963, 964, 967, 969, 971], "_2": [81, 155, 402, 405, 517, 523, 531, 532, 632, 638, 963, 971, 981, 982], "x_size": 81, "059": [81, 83, 344], "plot_robust_vs_empirical_covari": [81, 83], "graphicallasso": [82, 399, 455, 456, 458, 459, 460, 461, 462, 464, 1017, 1025], "largest": [82, 97, 116, 200, 369, 397, 399, 402, 429, 513, 527, 543, 544, 545, 546, 550, 551, 574, 695, 780, 781, 801, 822, 892, 893, 894, 895, 921, 964, 967, 977, 982, 983], "invert": [82, 100, 144, 220, 344, 345, 383, 399, 405, 616, 675, 679, 977, 1018], "fairli": [82, 122, 221, 273, 295, 380, 397, 545, 546, 685, 968, 1000], "tweak": [82, 401, 933, 966, 1002, 1020], "readabl": [82, 259, 313, 377, 378, 380, 391, 520, 1018, 1021, 1022, 1023, 1024], "make_sparse_spd_matrix": [82, 515], "prng": 82, "prec": [82, 228, 513, 967], "smallest_coef": [82, 513], "largest_coef": [82, 513], "multivariate_norm": [82, 86, 243, 455, 456, 457, 458, 459, 460, 461, 462], "ledoit_wolf": [82, 399, 1022], "prec_": 82, "lw_cov_": 82, "lw_prec_": 82, "this_cov": 82, "this_prec": 82, "ma": [82, 306, 330, 963, 1015, 1020], "masked_equ": 82, "set_facecolor": [82, 243], "set_axis_bgcolor": 82, "alpha_": [82, 136, 168, 178, 186, 187, 458, 597, 630, 631, 633, 637, 639, 641, 642, 647, 649, 659, 661, 963, 983, 997, 1009, 1016], "634": [82, 83], "plot_sparse_cov": [82, 83], "778": 83, "auto_examples_covari": 83, "cross_decomposit": [84, 85, 86, 165, 234, 361, 1013, 1014, 1016, 1017, 1018], "plscanon": [85, 468, 470, 471, 989, 1004, 1013, 1017, 1019, 1021, 1023], "plsregress": [85, 86, 989, 1004, 1016, 1019, 1021, 1023], "share": [85, 128, 168, 248, 343, 352, 354, 358, 359, 374, 380, 397, 402, 405, 535, 654, 690, 694, 780, 781, 785, 786, 961, 974, 1009, 1011, 1017, 1019, 1021, 1024], "appar": [85, 969, 991], "scatterplot": [85, 177, 258, 281], "maxim": [85, 86, 95, 106, 123, 177, 248, 249, 259, 263, 267, 268, 288, 305, 312, 330, 348, 352, 369, 385, 394, 397, 400, 402, 406, 407, 535, 596, 597, 630, 631, 634, 655, 665, 666, 706, 782, 785, 786, 796, 853, 859, 869, 961, 963, 967, 970, 972, 982, 997, 1000, 1012, 1014, 1019, 1022, 1024], "weak": [85, 109, 121, 124, 216, 264, 401, 543, 544, 545, 550, 551, 552, 616, 970, 991], "var": [85, 86, 101, 113, 147, 178, 258, 369, 373, 406, 627, 631, 886, 887, 888, 889, 890, 967, 1017], "corr": [85, 171, 258], "corrcoef": [85, 106], "plsca": [85, 469], "x_train_r": 85, "y_train_r": 85, "x_test_r": 85, "y_test_r": 85, "222": [85, 128, 332, 341, 982], "223": [85, 128, 369], "yj": [85, 304], "noiz": 85, "xb": [85, 863], "50210309": 85, "55301008": 85, "72528805": 85, "03429511": 85, "83576671": 85, "74902647": 85, "03916339": 85, "84652988": 85, "78629756": 85, "11231897": 85, "1905275": 85, "33508757": 85, "35433161": 85, "32686504": 85, "39877158": 85, "47827435": 85, "38004088": 85, "35574845": 85, "exce": [85, 276, 311, 407, 428, 501, 588, 635, 644, 1018, 1021, 1023], "258": [85, 87, 221], "plot_compare_cross_decomposit": [85, 87], "pcr": [86, 400], "pl": [86, 202, 369, 400, 468, 469, 470, 471, 1014], "greedili": [86, 147, 397, 401, 406, 446], "despit": [86, 196, 198, 216, 233, 287, 385, 399, 613, 614, 616, 963, 970, 991, 1017, 1018], "suffer": [86, 118, 170, 278, 300, 344, 358, 397, 404, 407, 530, 748, 962, 963, 967, 970, 1001, 1018], "dive": [86, 372, 378], "explained_variance_": [86, 520, 527, 530, 1001, 1016], "onto": [86, 220, 221, 232, 300, 383, 402, 405, 409, 432, 434, 447, 519, 525, 529, 613, 614, 616, 674, 961, 965, 970], "recommend": [86, 118, 162, 215, 228, 254, 267, 304, 312, 358, 359, 361, 366, 370, 372, 374, 378, 380, 383, 388, 400, 401, 402, 404, 406, 424, 433, 435, 437, 446, 482, 494, 521, 524, 530, 535, 547, 548, 555, 568, 569, 575, 592, 597, 617, 618, 624, 656, 662, 678, 683, 684, 686, 688, 788, 794, 796, 840, 847, 849, 856, 863, 864, 869, 870, 872, 873, 874, 875, 877, 886, 889, 921, 935, 956, 964, 967, 969, 971, 974, 977, 979, 981, 982, 983, 986, 991, 1004, 1011, 1012, 1018, 1019, 1020, 1021, 1023], "linearregress": [86, 133, 167, 177, 188, 193, 194, 195, 196, 201, 204, 215, 230, 235, 254, 272, 301, 354, 372, 383, 384, 398, 404, 451, 556, 618, 621, 632, 635, 638, 640, 657, 658, 673, 963, 967, 977, 1000, 1013, 1014, 1018, 1021, 1022, 1023, 1025], "retriev": [86, 168, 202, 265, 344, 352, 376, 385, 398, 402, 405, 406, 454, 482, 576, 579, 580, 612, 639, 649, 670, 711, 715, 717, 718, 741, 766, 819, 823, 856, 882, 933, 963, 965, 967, 969, 987, 988, 1001, 1014, 1019, 1021, 1023], "026": [86, 229, 241], "predit": 86, "pca_2": 86, "673": [86, 343, 346, 378], "plot_pcr_vs_pl": [86, 87], "auto_examples_cross_decomposit": 87, "multilabel": [88, 93, 165, 226, 241, 265, 276, 367, 374, 375, 385, 392, 468, 473, 483, 494, 495, 501, 509, 527, 543, 550, 553, 660, 661, 689, 693, 699, 711, 714, 715, 719, 720, 723, 724, 739, 741, 768, 769, 772, 773, 777, 779, 813, 817, 841, 848, 851, 855, 857, 868, 889, 892, 894, 910, 929, 930, 931, 978, 989, 990, 1002, 1004, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1022, 1023, 1024], "096": [89, 93, 285, 292], "plot_digits_last_imag": [89, 93], "iris": [90, 264, 265, 999], "150x4": 90, "unus": [90, 101, 102, 169, 195, 219, 221, 449, 565, 748, 756, 956, 964, 1009, 1017, 1019, 1020, 1022, 1024], "plai": [90, 96, 124, 152, 181, 207, 252, 281, 289, 326, 327, 358, 383, 1002], "set1": [90, 258, 287, 288], "getter": [90, 455, 456, 457, 458, 459, 460, 461, 462, 579, 580, 583], "110": [90, 177, 195, 205, 230, 306, 423, 961, 962], "3rd": [90, 158, 819, 862, 969, 977], "156": [90, 93, 168, 369], "plot_iris_dataset": [90, 93], "easi": [91, 169, 206, 216, 246, 256, 258, 330, 343, 354, 367, 378, 380, 383, 384, 397, 404, 486, 490, 496, 851, 956, 962, 966, 974, 977, 987, 988, 991, 1002, 1019, 1024], "make_gaussian_quantil": [91, 110, 112, 368, 456, 460, 461, 462, 506], "321": 91, "323": 91, "y2": [91, 112, 702, 749, 968], "324": [91, 152, 160, 367], "multi": [91, 108, 109, 134, 165, 176, 214, 217, 218, 221, 225, 226, 227, 234, 237, 241, 251, 255, 267, 274, 276, 293, 298, 310, 315, 343, 347, 353, 359, 367, 369, 374, 375, 381, 385, 388, 397, 404, 405, 407, 414, 423, 438, 448, 455, 460, 481, 482, 490, 491, 496, 500, 501, 505, 506, 508, 527, 535, 536, 537, 539, 541, 543, 544, 545, 547, 550, 551, 553, 555, 596, 617, 619, 629, 632, 633, 638, 639, 643, 644, 646, 647, 648, 649, 652, 654, 658, 659, 660, 661, 662, 667, 670, 676, 689, 699, 706, 714, 719, 725, 727, 768, 782, 796, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 831, 832, 834, 840, 841, 842, 845, 851, 864, 868, 879, 880, 884, 886, 889, 892, 893, 894, 896, 897, 898, 904, 907, 910, 956, 968, 970, 974, 977, 981, 987, 988, 989, 993, 999, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1025], "325": 91, "326": 91, "353": [91, 93, 1002], "plot_random_dataset": [91, 93], "make_multilabel_classif": [92, 234, 368, 501, 522, 773, 815, 816, 967, 1011, 1012, 1014, 1020], "star": [92, 133, 372], "degener": [92, 244, 409, 426, 440, 519, 706, 963, 967, 1018, 1022, 1023], "vocabulari": [92, 213, 343, 344, 383, 405, 574, 575, 576, 577, 969, 993, 1002, 1009, 1011, 1014, 1017, 1020, 1022], "757": [92, 256, 278, 369], "w0": 92, "w1": [92, 404, 643], "make_ml_clf": 92, "ff3333": 92, "0198e1": 92, "bf5fff": 92, "fcd116": 92, "ff7216": 92, "4dbd33": 92, "87421f": 92, "plot_2d": [92, 219], "p_c": [92, 509], "p_w_c": [92, 509], "allow_unlabel": [92, 234, 509], "return_distribut": [92, 509], "sep": [92, 267], "p_w": 92, "plot_random_multilabel_dataset": [92, 93], "743": [93, 256, 1000], "auto_examples_dataset": 93, "blind": [94, 107, 165, 343, 402, 519, 527], "fastica": [94, 107, 165, 402, 518, 521, 527, 1001, 1009, 1011, 1017, 1023, 1024], "increment": [94, 107, 165, 261, 376, 378, 428, 433, 449, 490, 519, 520, 521, 522, 525, 527, 530, 588, 632, 644, 652, 788, 808, 816, 817, 819, 820, 821, 822, 823, 853, 854, 864, 884, 885, 942, 963, 969, 1012, 1013], "fa": [94, 106, 107, 165, 378, 402, 459, 462, 518, 527, 782, 806], "precomput": [94, 107, 165, 176, 217, 222, 278, 280, 374, 381, 383, 385, 397, 405, 408, 418, 426, 427, 430, 431, 432, 436, 438, 443, 451, 457, 468, 469, 470, 510, 517, 521, 523, 526, 528, 534, 540, 542, 544, 546, 548, 551, 554, 556, 596, 597, 606, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 664, 665, 667, 668, 670, 671, 674, 676, 677, 678, 682, 759, 763, 766, 775, 776, 817, 818, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 842, 885, 886, 887, 888, 889, 890, 893, 895, 943, 944, 945, 959, 965, 970, 982, 988, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1022, 1023, 1024, 1025], "olivetti": [95, 118, 365, 402, 481, 1004, 1009, 1017], "chapter": [95, 354, 374, 397, 402, 404, 407, 516, 518, 520, 600, 605, 608, 629, 957, 960, 963, 982, 983], "decompos": [95, 99, 113, 302, 396, 520, 524, 695, 805, 921, 962, 963, 967, 984, 1003, 1004], "basicconfig": 95, "asctim": 95, "levelnam": 95, "faces_cent": 95, "image_shap": [95, 235], "constrained_layout": [95, 169, 219, 306, 307, 315], "set_constrained_layout_pad": 95, "w_pad": [95, 119, 349], "h_pad": [95, 119, 349], "set_edgecolor": 95, "vec": [95, 405, 524, 526, 533], "im": [95, 106, 269, 282, 990], "pad": [95, 119, 162, 169, 219, 236, 343, 349, 405, 574, 575, 577], "initialis": [95, 524, 526, 533, 1009, 1017, 1018], "mathbb": [95, 113, 153, 400, 967, 974, 982], "4096": [95, 367, 402, 481], "human": [95, 169, 343, 391, 397, 402, 841, 842, 967, 974, 1018], "friendli": [95, 359, 372, 380, 402, 877, 979, 980, 987, 988], "visualis": [95, 98, 106, 234, 530, 970, 988], "64x64": [95, 367, 402], "singular": [95, 381, 394, 397, 400, 437, 439, 468, 469, 470, 471, 507, 510, 520, 524, 526, 527, 530, 533, 535, 536, 643, 658, 659, 660, 673, 921, 963, 964, 966, 1003, 1004, 1015, 1016], "scalar": [95, 313, 378, 385, 398, 407, 409, 450, 453, 510, 519, 601, 602, 603, 608, 609, 613, 614, 723, 727, 900, 908, 959, 971, 973, 977, 981, 987, 1019, 1020, 1023, 1025], "noise_variance_": [95, 186, 518, 520, 527, 642, 1016, 1023], "pixelwis": 95, "pca_estim": 95, "nmf_estim": 95, "multivari": [95, 168, 364, 399, 402, 405, 459, 502, 503, 504, 613, 614, 615, 616, 635, 657, 664, 665, 819, 820, 821, 822, 823, 961, 963, 966, 969, 987, 993, 1001, 1004], "subcompon": [95, 402], "ica_estim": 95, "15e": 95, "sparsepca": [95, 517, 519, 520, 521, 523, 525, 526, 527, 528, 531, 532, 1009, 1016, 1017, 1019, 1020, 1022, 1023, 1024], "batch_pca_estim": 95, "minibatchdictionarylearn": [95, 98, 360, 402, 517, 524, 528, 531, 532, 1010, 1012, 1019, 1020, 1022, 1023, 1024, 1025], "batch_dict_estim": 95, "That": [95, 147, 187, 227, 258, 262, 344, 345, 359, 366, 380, 385, 401, 406, 407, 429, 432, 433, 543, 550, 579, 800, 892, 893, 956, 964, 965, 967, 973, 983, 1018, 1019], "enhanc": [95, 371, 372, 376, 383, 385, 397, 967, 985, 1007, 1008, 1009, 1010, 1011, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "consum": [95, 354, 366, 374, 385, 397, 401, 404, 435, 785, 786, 844, 845, 963, 991, 1014], "kmeans_estim": 95, "heteroscedast": [95, 103, 123, 200, 402, 860, 872], "fa_estim": 95, "factoranalysi": [95, 103, 106, 402, 530, 1010, 1012, 1021, 1023], "wrap": [95, 115, 123, 278, 366, 374, 385, 419, 494, 571, 572, 643, 662, 727, 810, 868, 957, 967, 970, 982, 987, 1009, 1014, 1017, 1019, 1020, 1022, 1024], "suit": [95, 128, 168, 198, 199, 227, 248, 313, 314, 343, 359, 372, 374, 377, 378, 380, 383, 388, 400, 402, 404, 407, 436, 438, 489, 663, 821, 865, 915, 956, 959, 964, 967, 969, 970, 981, 987, 988, 991, 995, 1016, 1023], "colormap": [95, 112, 158, 190, 207, 330, 335, 349, 683, 1022], "uv": [95, 402], "x_1": [95, 142, 153, 195, 199, 400, 402, 404, 407, 599, 611, 643, 857, 963, 969, 971, 977, 981], "x_n": [95, 402, 969, 971, 981], "dict_pos_dict_estim": 95, "positive_dict": [95, 517, 523, 531, 532], "dict_pos_code_estim": 95, "fit_algorithm": [95, 517, 523, 1024, 1025], "cd": [95, 369, 370, 372, 376, 378, 402, 457, 458, 464, 517, 523, 525, 526, 529, 531, 532, 533, 963, 1002, 1014, 1024], "positive_cod": [95, 517, 523, 528, 531, 532], "dict_pos_estim": 95, "890": [95, 107, 256], "plot_faces_decomposit": [95, 107], "imagin": [96, 150, 401, 402, 405, 963], "microphon": 96, "s1": [96, 147, 158, 186, 187, 369, 1001], "sinusoid": [96, 111, 123, 182, 233, 407, 960, 1001], "s2": [96, 147, 158, 186, 187, 369, 536, 1001], "sawtooth": [96, 1001], "saw": [96, 199, 1001], "tooth": [96, 1001], "s_": [96, 262, 964, 975, 1001], "a_": [96, 394, 397, 524, 526, 533, 963, 1001], "mixing_": [96, 97, 519, 1001], "prove": [96, 991], "revert": [96, 616, 618, 619, 1016, 1021], "unmix": [96, 409, 519], "allclos": [96, 127, 979, 1001], "mean_": [96, 262, 518, 519, 520, 525, 527, 529, 864, 977, 1001, 1017], "orthogon": [96, 97, 98, 165, 176, 217, 396, 402, 512, 517, 523, 525, 528, 529, 534, 650, 651, 671, 672, 979, 989, 1004, 1009], "steelblu": [96, 97, 132], "sig": 96, "377": [96, 106, 107], "plot_ica_blind_source_separ": [96, 107], "ica": [97, 396, 409, 983, 1003, 1004], "geometr": [97, 397, 674, 690, 716, 742, 964, 1017], "identifi": [97, 104, 123, 124, 167, 168, 198, 201, 246, 248, 256, 261, 267, 287, 307, 312, 343, 344, 366, 367, 371, 372, 376, 377, 385, 397, 398, 401, 404, 405, 432, 436, 443, 473, 482, 494, 495, 541, 542, 549, 592, 629, 635, 685, 698, 759, 809, 830, 849, 879, 880, 956, 963, 967, 973, 980, 991, 1000, 1016, 1018, 1023, 1024], "standard_t": 97, "s_pca_": 97, "s_ica_": 97, "plot_sampl": [97, 249], "axis_list": 97, "x_axi": [97, 206, 262], "y_axi": [97, 206], "quiver": 97, "hline": 97, "set_zord": 97, "288": [97, 107, 521, 527], "plot_ica_vs_pca": [97, 107], "firstli": [98, 358, 383, 643, 1002], "undistort": 98, "noiseless": [98, 965], "pursuit": [98, 165, 176, 217, 402, 460, 512, 517, 523, 528, 534, 650, 651, 671, 672, 989, 1004, 1009], "omp": [98, 105, 197, 402, 517, 523, 528, 534, 650, 651, 671, 672, 989, 1004, 1009, 1017], "promin": [98, 385], "reminisc": 98, "downsampl": [98, 236], "075": [98, 210, 217, 343], "show_with_diff": 98, "puor": 98, "22692": 98, "dico": 98, "n_iter_": [98, 206, 246, 385, 426, 433, 434, 435, 457, 458, 468, 469, 470, 517, 518, 519, 522, 523, 524, 525, 526, 529, 547, 548, 613, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 662, 663, 664, 665, 666, 676, 678, 780, 781, 833, 841, 842, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 1013, 1016, 1017, 1019, 1022, 1023, 1025], "n_steps_": [98, 435, 523, 524, 1022], "reconstruct_from_patches_2d": [98, 405, 569], "intercept": [98, 190, 207, 215, 339, 385, 468, 469, 470, 535, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 859, 863, 866, 884, 885, 891, 963, 965, 967, 972, 981, 982, 1012, 1014, 1018, 1019], "transform_algorithm": [98, 105, 517, 523, 528, 1025], "n1": 98, "atom": [98, 105, 402, 517, 523, 525, 528, 529, 531, 532, 639, 649, 670, 963, 1009, 1022], "transform_n_nonzero_coef": [98, 105, 517, 523, 528], "n2": 98, "n4": 98, "transform_alpha": [98, 105, 517, 523, 528, 1022], "set_param": [98, 106, 114, 120, 123, 169, 170, 178, 186, 187, 191, 202, 206, 232, 271, 310, 333, 344, 375, 385, 397, 398, 404, 407, 411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 780, 781, 782, 785, 786, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 957, 973, 993, 1000, 1009, 1015, 1016, 1017, 1022, 1023], "021": [98, 107], "plot_image_denois": [98, 107], "ipca": [99, 519, 520], "flip": [99, 568, 727, 921, 969, 1013, 1022], "incrementalpca": [99, 360, 402, 519, 521, 525, 527, 530, 1013, 1016, 1017, 1019, 1020, 1023], "x_ipca": 99, "x_pca": 99, "turquois": [99, 104, 105, 125, 204, 215, 222, 245, 246, 265], "x_transform": [99, 128, 471, 517, 518, 519, 520, 521, 523, 525, 529, 552, 624, 625, 674, 675, 676, 677], "nmean": 99, "shadow": [99, 104, 105, 222, 320, 337, 345, 405], "scatterpoint": [99, 104, 222, 245, 320], "247": [99, 107, 864], "plot_incremental_pca": [99, 107], "kernal": 100, "nest": [100, 110, 165, 187, 251, 274, 359, 378, 385, 388, 397, 401, 407, 411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 448, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 490, 505, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 780, 781, 782, 785, 786, 787, 796, 806, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 935, 956, 967, 970, 1009, 1010, 1013, 1015, 1016, 1017, 1023], "train_ax": 100, "test_ax": 100, "straight": [100, 188, 194, 196, 255, 358], "inner": [100, 123, 259, 263, 320, 358, 405, 429, 500, 532, 568, 575, 634, 655, 666, 760, 762, 959, 967, 977, 982, 1010, 1013, 1023], "x_test_kernel_pca": 100, "orig_data_ax": 100, "pca_proj_ax": 100, "kernel_pca_proj_ax": 100, "unfold": [100, 375, 964], "untangl": 100, "mind": [100, 167, 168, 169, 216, 304, 305, 343, 344, 354, 372, 391, 399, 401, 404, 632, 633, 690, 963, 982, 987, 993, 1000], "investig": [100, 106, 163, 338, 372, 963], "pca_back_proj_ax": 100, "kernel_pca_back_proj_ax": 100, "reli": [100, 116, 120, 147, 171, 186, 187, 278, 311, 315, 343, 358, 359, 374, 377, 380, 381, 383, 385, 393, 394, 397, 402, 404, 405, 535, 571, 572, 579, 583, 593, 594, 808, 811, 849, 933, 956, 959, 961, 963, 967, 970, 977, 982, 991, 1017, 1018, 1019, 1023, 1025], "analyt": [100, 402, 407, 518, 606, 694, 957, 961, 967, 986, 991], "kernelridg": [100, 150, 233, 658, 960, 1013], "relianc": 100, "607": [100, 107], "plot_kernel_pca": [100, 107], "aid": [101, 255, 397, 775, 776, 964, 991, 1009, 1021], "kevin": [101, 629, 1011, 1013, 1015, 1016, 1019, 1020, 1021, 1023, 1024], "hugh": [101, 859, 1011, 1022], "pdf": [101, 147, 258, 283, 300, 369, 372, 397, 406, 428, 435, 517, 520, 523, 527, 627, 630, 635, 644, 650, 652, 653, 657, 662, 665, 668, 669, 671, 672, 678, 821, 822, 833, 840, 877, 879, 963, 980, 983, 990, 1005, 1009], "30000": [101, 367], "pdf_z": 101, "plot_fig": [101, 195], "fig_num": [101, 195], "pca_scor": [101, 103], "vt": [101, 536], "full_matric": 101, "x_pca_axi": 101, "y_pca_axi": 101, "z_pca_axi": 101, "x_pca_plan": 101, "y_pca_plan": 101, "z_pca_plan": 101, "plot_surfac": [101, 169, 195], "164": [101, 107, 404], "plot_pca_3d": [101, 107], "cla": 102, "plot_pca_iri": [102, 107], "homoscedast": [103, 230, 304, 967, 1017], "succe": [103, 182], "subspac": [103, 400, 404, 438, 501, 541, 542, 677, 681, 921, 961, 970, 973, 979, 991, 1001], "overestim": [103, 354, 401], "circumst": [103, 216, 970, 987], "nip": [103, 369, 501, 527, 552, 627, 967], "604": [103, 527], "minka": [103, 527, 963], "deni": [103, 1011, 1012, 1016, 1017, 1018, 1024], "engemann": [103, 1011, 1012, 1016], "x_homo": 103, "x_hetero": 103, "cross_val_scor": [103, 137, 162, 163, 165, 251, 254, 263, 272, 274, 333, 354, 372, 374, 383, 401, 404, 506, 561, 689, 727, 782, 805, 807, 892, 893, 956, 967, 997, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1021, 1022], "fa_scor": 103, "shrunk_cov_scor": 103, "lw_score": 103, "n_components_pca": 103, "n_components_fa": 103, "n_components_pca_ml": 103, "axhlin": [103, 136, 188, 257, 261], "violet": 103, "plot_pca_vs_fa_model_select": [103, 107], "flower": [104, 267, 492, 493, 967, 987], "92461872": 104, "05306648": 104, "x_r": [104, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "x_r2": 104, "239": [104, 107, 1009], "plot_pca_vs_lda": [104, 107], "ricker": 105, "sparsecod": [105, 402, 517, 523, 526, 534, 1016, 1017, 1019, 1021, 1023], "mexican": 105, "piecewis": [105, 313, 394, 958, 963, 977, 983], "matter": [105, 249, 354, 397, 404, 553, 654, 662, 664, 963, 1013], "motiv": [105, 372, 374, 385, 404, 959, 967, 977, 991, 1022], "heavier": [105, 399, 963], "ricker_funct": 105, "ricker_matrix": 105, "d_fix": 105, "d_multi": 105, "first_quart": 105, "transform_n_nozero_coef": 105, "lasso_lar": [105, 517, 523, 528, 534, 1019], "n_nonzero": 105, "coder": [105, 528, 702], "flatnonzero": [105, 186, 257, 266, 267, 766], "soft": [105, 131, 132, 372, 385, 555, 556, 880, 888, 981, 991, 1014], "debias": 105, "lstsq": [105, 372, 643, 656], "rcond": 105, "302": [105, 107, 258, 613], "plot_sparse_cod": [105, 107], "uncov": [106, 681], "inher": [106, 193, 354, 397, 402, 957, 959, 961, 962, 964, 968], "varimax": [106, 402, 518, 1021], "jona": [106, 1021], "sassenhagen": [106, 1021], "set_yticklabel": [106, 153, 162, 163, 171, 269, 345], "n_comp": [106, 174], "unrot": 106, "52106591": 106, "37741762": 106, "26934744": 106, "92329566": 106, "5804131": 106, "02449161": 106, "56485654": 106, "06694199": 106, "88096009": 106, "4472869": 106, "41691605": 106, "55390036": 106, "99918858": 106, "01915283": 106, "96228895": 106, "05840206": 106, "98633022": 106, "05752333": 106, "16052385": 106, "67443065": 106, "90809432": 106, "41726413": 106, "85857475": 106, "43847489": 106, "plot_varimax_fa": [106, 107], "465": 107, "auto_examples_decomposit": 107, "predictor": [108, 134, 165, 198, 216, 374, 384, 385, 398, 400, 401, 404, 407, 452, 453, 468, 469, 470, 482, 502, 503, 504, 541, 542, 548, 551, 554, 588, 596, 616, 618, 619, 634, 639, 643, 655, 659, 666, 687, 805, 807, 816, 817, 845, 857, 858, 864, 941, 963, 968, 1010, 1016, 1019], "stack": [108, 134, 165, 283, 352, 371, 380, 383, 385, 403, 450, 452, 453, 482, 501, 548, 551, 553, 554, 598, 613, 614, 616, 639, 659, 687, 805, 807, 845, 849, 857, 858, 864, 941, 957, 987, 988, 989, 990, 1004, 1012, 1016, 1017, 1018, 1019, 1020], "versu": [108, 130, 134, 165, 168, 176, 207, 213, 217, 233, 246, 251, 274, 286, 317, 324, 397, 401, 404, 407, 490, 506, 520, 539, 542, 596, 625, 644, 645, 652, 654, 660, 661, 662, 663, 768, 779, 782, 787, 806, 810, 816, 845, 880, 881, 888, 889, 892, 893, 956, 963, 967, 968, 973, 980, 981, 982, 1000, 1017], "isolationforest": [108, 134, 165, 227, 236, 617, 810, 888, 973, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1025], "oob": [108, 122, 134, 165, 404, 501, 550, 988, 1011, 1022], "votingclassifi": [108, 134, 165, 490, 550, 556, 617, 644, 822, 826, 889, 892, 956, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023], "vote": [108, 116, 131, 132, 134, 165, 276, 385, 386, 487, 541, 542, 543, 546, 550, 551, 555, 556, 643, 812, 826, 827, 832, 834, 968, 970, 989, 1000, 1004, 1012, 1014, 1019], "hasti": [109, 110, 113, 114, 121, 125, 147, 186, 257, 369, 401, 404, 505, 506, 539, 545, 546, 614, 642, 707, 708, 709, 814, 831, 877, 892, 893, 957, 961, 963, 968, 974, 979, 981, 983], "2009": [109, 110, 113, 114, 125, 182, 397, 401, 402, 404, 405, 505, 506, 514, 517, 523, 524, 526, 527, 530, 533, 539, 545, 546, 621, 657, 665, 682, 815, 892, 893, 920, 921, 963, 967, 968, 974, 983], "tibshirani": [109, 113, 114, 125, 147, 186, 257, 369, 401, 404, 506, 545, 546, 614, 642, 707, 708, 709, 814, 831, 892, 893, 957, 961, 963, 968, 974, 983], "friedman": [109, 113, 114, 125, 257, 399, 401, 404, 464, 502, 503, 504, 506, 544, 545, 546, 551, 579, 580, 814, 892, 893, 895, 961, 963, 968, 974, 983], "ed": [109, 114, 125, 397, 404, 506, 545, 546, 979, 1009, 1016], "springer": [109, 113, 114, 125, 257, 395, 397, 401, 402, 404, 506, 521, 545, 546, 676, 680, 682, 691, 706, 711, 725, 726, 741, 780, 892, 893, 964, 967, 968, 974, 983], "zhu": [109, 110, 404, 505, 539, 644, 879], "zou": [109, 110, 186, 404, 505, 539, 642, 963, 981], "rosset": [109, 110, 404, 505, 539], "make_hastie_10_2": [109, 121, 125, 262, 368, 404, 545, 974], "12_000": 109, "Be": [109, 144, 159, 343, 372, 399, 553, 554, 634, 640, 641, 642, 644, 645, 655, 666, 690, 800, 801, 859, 977, 1006, 1010], "stump": [109, 112, 404, 545, 1020], "2_000": 109, "dt_stump": 109, "min_samples_leaf": [109, 116, 122, 123, 170, 310, 313, 348, 404, 543, 544, 545, 546, 547, 548, 550, 551, 552, 892, 893, 894, 895, 983, 1015], "dt_stump_err": 109, "dt_err": 109, "ada_discret": 109, "adaboostclassifieradaboostclassifi": 109, "decisiontreeclassifierdecisiontreeclassifi": [109, 352], "ada_r": 109, "zero_one_loss": [109, 372, 689, 719, 967, 1010, 1011, 1012], "ada_discrete_err": 109, "staged_predict": [109, 110, 124, 404, 539, 540, 545, 546, 547, 548, 1009, 1021], "ada_discrete_err_train": 109, "ada_real_err": 109, "ada_real_err_train": 109, "leg": 109, "fancybox": [109, 337], "get_fram": 109, "plot_adaboost_hastie_10_2": [109, 134], "sphere": [110, 165, 218, 219, 225, 344, 403, 505, 575, 674, 675, 676, 677, 678, 749, 907, 961, 965, 970], "roughli": [110, 123, 187, 249, 268, 278, 305, 358, 385, 402, 405, 505, 964, 1009], "samm": [110, 112, 404, 539], "13000": 110, "bdt_real": 110, "bdt_discret": 110, "real_test_error": 110, "discrete_test_error": 110, "real_test_predict": 110, "discrete_test_predict": 110, "n_trees_discret": 110, "n_trees_real": 110, "termin": [110, 359, 377, 378, 380, 388, 397, 434, 447, 539, 540, 544, 545, 546, 549, 551, 652, 653, 654, 662, 664, 841, 842, 893, 895, 973, 983], "alwai": [110, 116, 120, 123, 177, 198, 216, 224, 231, 261, 264, 268, 307, 327, 344, 354, 358, 359, 366, 372, 373, 374, 378, 384, 385, 388, 395, 397, 398, 401, 404, 405, 406, 407, 418, 429, 435, 450, 451, 453, 455, 468, 469, 470, 474, 482, 494, 495, 530, 535, 537, 538, 540, 542, 544, 545, 546, 547, 548, 550, 551, 554, 556, 567, 574, 575, 577, 580, 597, 613, 614, 616, 618, 619, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 657, 658, 659, 662, 664, 665, 678, 681, 691, 695, 701, 707, 708, 709, 717, 719, 720, 724, 767, 770, 771, 780, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 817, 818, 827, 828, 835, 836, 842, 849, 857, 862, 864, 877, 885, 886, 887, 889, 890, 892, 893, 895, 922, 956, 957, 959, 961, 963, 966, 967, 970, 973, 975, 979, 980, 982, 983, 991, 993, 1000, 1009, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "crop": [110, 380, 1024], "discrete_estimator_error": 110, "estimator_errors_": [110, 539, 540], "real_estimator_error": 110, "discrete_estimator_weight": 110, "estimator_weights_": [110, 539, 540], "611": [110, 134, 256, 258, 527], "plot_adaboost_multiclass": [110, 134], "1d": [111, 113, 165, 169, 199, 231, 279, 292, 337, 350, 372, 379, 381, 384, 385, 398, 403, 450, 453, 603, 619, 639, 643, 646, 649, 670, 689, 698, 699, 705, 714, 715, 719, 723, 727, 768, 769, 772, 779, 826, 827, 828, 829, 830, 832, 834, 835, 836, 849, 900, 904, 905, 930, 954, 968, 993, 1000, 1009, 1014, 1015, 1016, 1018, 1022, 1023], "299": [111, 666], "drucker": [111, 404, 540], "1997": [111, 367, 402, 404, 407, 521, 540, 676, 680, 963, 964, 967], "dummi": [111, 198, 216, 261, 361, 374, 377, 392, 857, 866, 977, 983, 1004, 1010, 1012, 1013, 1014, 1016], "decisiontreeregressor": [111, 113, 237, 301, 310, 350, 351, 377, 540, 542, 544, 545, 546, 548, 551, 618, 619, 892, 895, 897, 916, 957, 983, 1010, 1011, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "adaboostregressor": [111, 404, 539, 548, 1011, 1012, 1015, 1018, 1019, 1022, 1024, 1025], "regr_1": [111, 350, 351], "regr_2": [111, 350, 351], "y_1": [111, 350, 351, 400, 967, 971, 981], "y_2": [111, 350, 351, 971], "plot_adaboost_regress": [111, 134], "puriti": [112, 896, 898], "plot_adaboost_twoclass": [112, 134], "bdt": 112, "plot_color": [112, 349], "br": 112, "plot_step": [112, 119, 349], "class_nam": [112, 252, 896, 897, 898, 983, 1025], "xx0": [112, 617], "twoclass_output": 112, "plot_rang": 112, "irreduc": [113, 967], "light": [113, 367], "beam": [113, 1009], "pointwis": [113, 157, 408, 430], "offset": [113, 174, 383, 399, 402, 455, 494, 495, 549, 618, 619, 627, 628, 630, 631, 663, 713, 760, 762, 830, 888, 967, 981, 1000, 1017], "narrow": [113, 123, 300, 302, 377, 824, 825], "bootstrap": [113, 114, 122, 162, 261, 270, 312, 401, 404, 540, 541, 542, 543, 544, 549, 550, 551, 910, 938, 963, 1009, 1010, 1012, 1014, 1017, 1019, 1022], "stem": [113, 170, 197, 249, 401, 405, 959, 969], "0255": 113, "0003": 113, "0152": 113, "0098": 113, "0196": 113, "0004": [113, 305], "0092": 113, "baggingregressor": [113, 404, 541, 895, 957, 1012, 1015, 1017, 1020, 1024, 1025], "n_repeat": [113, 117, 124, 146, 168, 170, 171, 258, 310, 401, 501, 620, 797, 798, 975], "knn": [113, 131, 138, 162, 286, 287, 290, 305, 312, 320, 343, 404, 588, 833, 879, 880, 970, 980, 1000, 1015], "y_predict": [113, 374, 1009], "y_error": [113, 204], "y_nois": 113, "y_bia": 113, "y_var": 113, "plot_bias_vari": [113, 134], "z_i": [114, 971], "y_i": [114, 313, 338, 395, 404, 958, 959, 963, 967, 971, 981, 982, 983], "whilst": [114, 221], "practition": 114, "suitabl": [114, 123, 182, 184, 295, 345, 366, 367, 378, 381, 397, 402, 405, 438, 448, 454, 473, 491, 494, 613, 621, 819, 820, 823, 858, 859, 882, 932, 936, 961, 963, 966, 977, 979, 981, 987, 990, 1002, 1023, 1024], "p592": 114, "593": 114, "kian": [114, 1014, 1024], "ho": [114, 404, 541, 542, 967, 1014, 1017, 1018, 1023], "hui": [114, 186, 524, 526, 533, 642, 963], "ordereddict": 114, "123": [114, 132, 354, 404, 502, 503, 504, 541, 542, 817, 968, 975], "warm_start": [114, 154, 191, 313, 374, 378, 385, 404, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 596, 632, 634, 635, 638, 644, 646, 648, 652, 653, 654, 655, 662, 663, 664, 666, 780, 781, 833, 841, 842, 973, 989, 1004, 1009, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1023, 1025], "track": [114, 122, 319, 372, 375, 376, 388, 393, 520, 936, 968, 987, 988, 1016, 1019], "trajectori": 114, "ensemble_clf": 114, "oob_scor": [114, 404, 541, 542, 543, 544, 550, 551, 1014, 1016], "log2": [114, 208, 238, 543, 544, 545, 546, 550, 551, 892, 893, 894, 895, 968], "error_r": 114, "min_estim": 114, "max_estim": 114, "oob_error": 114, "oob_score_": [114, 541, 542, 543, 544, 545, 546, 550, 551, 1011, 1025], "clf_err": 114, "801": [114, 134], "plot_ensemble_oob": [114, 134], "betatim": [115, 129, 1024], "leak": [115, 263, 343, 354, 398, 401, 844, 869, 870, 872, 873, 874, 875, 977, 1009, 1016, 1019], "80_000": 115, "x_full_train": 115, "y_full_train": 115, "x_train_ensembl": 115, "x_train_linear": 115, "y_train_ensembl": 115, "y_train_linear": 115, "gradientboostingclassifi": [115, 121, 122, 125, 302, 354, 383, 404, 539, 547, 618, 619, 968, 974, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025], "random_forest": 115, "gradient_boost": [115, 1010, 1011, 1012, 1018], "histgradientboostingclassifi": [115, 116, 310, 311, 312, 313, 315, 359, 404, 545, 550, 618, 619, 957, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "randomtreesembed": [115, 128, 220, 404, 894, 1010, 1017, 1018, 1022, 1023, 1024], "random_tree_embed": 115, "rt_model": 115, "randomtreesembeddingrandomtreesembed": 115, "rf_appli": 115, "rf_leaves_yield": 115, "kw_arg": [115, 848, 977, 1015], "rf_model": 115, "0x7f71e125b310": 115, "functiontransformerfunctiontransform": 115, "gbdt_appli": 115, "gbdt_leaves_yield": 115, "gbdt_model": 115, "0x7f71c7e749d0": 115, "roccurvedisplai": [115, 236, 239, 255, 267, 268, 310, 379, 773, 774, 973, 1006, 1019, 1025], "rt": 115, "rf": [115, 116, 129, 132, 133, 170, 310, 354, 404, 553, 555, 556], "gbdt": [115, 169, 310, 311, 377, 404], "model_displai": 115, "415": [115, 134], "plot_feature_transform": [115, 134], "hgbt": [116, 404], "fetch_california_h": [116, 162, 163, 300, 312, 367, 384, 398, 1018, 1020], "20640": [116, 163, 367, 476], "n_core": 116, "only_physical_cor": 116, "unnecessari": [116, 243, 377, 429, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 691, 970, 977, 988, 991, 1012, 1014, 1019, 1020, 1022, 1025], "max_leaf_nod": [116, 125, 198, 313, 352, 404, 543, 544, 545, 546, 547, 548, 550, 551, 552, 892, 893, 894, 895, 1012, 1018, 1020], "early_stop": [116, 169, 206, 294, 313, 343, 385, 404, 547, 548, 652, 653, 654, 662, 663, 664, 841, 842, 981, 1017, 1020, 1023, 1024], "return_train_scor": [116, 262, 306, 401, 782, 785, 786, 796, 807, 1015, 1016, 1018], "wast": [116, 378, 401, 402, 956], "plotli": [116, 259, 372, 388, 390], "cursor": [116, 259], "px": [116, 259], "make_subplot": 116, "shared_yax": 116, "subplot_titl": 116, "model_nam": [116, 236, 276], "colors_list": 116, "param_nam": [116, 259, 273, 338, 811, 962, 1002], "param_": 116, "scatter_fig": 116, "mean_fit_tim": [116, 280, 782, 796], "error_x": [116, 259], "std_fit_tim": [116, 280, 782, 796], "error_i": [116, 259], "hover_data": [116, 259], "line_fig": 116, "scatter_trac": 116, "line_trac": 116, "add_trac": 116, "mean_score_tim": [116, 256, 259, 782, 796], "std_score_tim": [116, 259, 782, 796], "update_layout": [116, 259], "xaxis2": 116, "traceord": 116, "borderwidth": 116, "plateau": [116, 146, 256, 260], "earlier": [116, 169, 366, 372, 400, 815, 818, 977, 985, 1007, 1010, 1022, 1024], "never": [116, 234, 354, 372, 381, 383, 391, 397, 398, 400, 401, 436, 443, 509, 532, 541, 542, 543, 550, 844, 845, 959, 1019, 1022], "hgbdt": 116, "sightli": 116, "domin": [116, 163, 198, 203, 267, 305, 367, 378, 395, 864, 969, 977, 983], "ever": [116, 129, 381, 404, 991], "disput": 116, "thumb": [116, 174, 358, 372, 373, 383, 397, 644, 645, 652, 654, 662, 663, 664, 884, 967], "54": [116, 134, 174, 182, 198, 201, 367, 369, 397, 477, 1010, 1011], "408": [116, 134], "plot_forest_hist_grad_boosting_comparison": [116, 134], "artifici": [117, 120, 127, 163, 219, 233, 297, 343, 367, 368, 369, 377, 394, 396, 397, 401, 402, 407, 521, 682, 814, 841, 842, 960, 964, 966, 968, 974, 979, 983, 988, 991, 1009], "feature_importances_": [117, 118, 124, 147, 170, 171, 385, 404, 406, 539, 540, 543, 544, 545, 546, 550, 551, 552, 579, 580, 583, 892, 893, 894, 895, 1011, 1014, 1018], "estimators_": [117, 119, 234, 310, 385, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 812, 813, 814, 815, 816, 817, 818, 1010, 1016, 1023], "008": [117, 159, 369, 378], "forest_import": 117, "mdi": [117, 124, 165, 166, 171, 172, 404, 450, 482, 550, 616, 620, 810, 844, 858, 975], "overcom": [117, 358, 405], "permutation_import": [117, 118, 124, 170, 171, 310, 404, 539, 540, 543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895, 975, 1019, 1021, 1022], "importances_mean": [117, 124, 170, 171, 310, 620, 975], "818": [117, 206, 217], "importances_std": [117, 620, 975], "omit": [117, 167, 168, 323, 377, 410, 461, 520, 652, 654, 662, 789, 791, 812, 813, 816, 819, 820, 821, 822, 823, 841, 965, 972], "338": [117, 134], "plot_forest_import": [117, 134], "hotter": 118, "job": [118, 246, 372, 376, 380, 404, 408, 423, 430, 432, 434, 436, 438, 443, 444, 447, 450, 453, 454, 458, 517, 521, 522, 523, 525, 528, 529, 531, 532, 534, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 588, 596, 620, 625, 643, 674, 675, 676, 677, 678, 679, 680, 759, 763, 766, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 843, 846, 879, 880, 882, 933, 991, 995], "five": [118, 244, 319, 322, 367, 517, 525, 531, 964, 970, 982, 991, 1009], "drawback": [118, 215, 959, 962], "img_shap": 118, "imp_reshap": 118, "met": [118, 374, 406, 520, 527, 613, 657, 963, 967, 1017], "313": [118, 134, 1000], "plot_forest_importances_fac": [118, 134], "third": [119, 124, 142, 147, 158, 216, 227, 249, 283, 302, 359, 367, 371, 383, 386, 405, 520, 574, 575, 576, 577, 784, 785, 786, 791, 826, 827, 828, 830, 832, 862, 874, 935, 956, 978, 985, 1009, 1020], "fourth": [119, 993], "descend": [119, 613, 1019], "extratreesclassifi": [119, 128, 404, 406, 544, 550, 552, 894, 895, 968, 1012, 1013, 1017, 1018, 1019, 1022, 1023, 1024, 1025], "decisiontre": [119, 1014], "consol": [119, 370, 994], "extratre": [119, 128, 358, 1012], "sequenti": [119, 141, 148, 165, 192, 259, 312, 370, 402, 404, 405, 487, 520, 579, 583, 588, 589, 591, 592, 632, 633, 638, 639, 646, 647, 648, 649, 659, 844, 957, 975, 981, 987, 989, 1004, 1009, 1018, 1021], "9266666666666666": 119, "8666666666666667": 119, "9933333333333333": 119, "rdylbu": [119, 349], "plot_step_coars": 119, "plot_idx": 119, "model_titl": 119, "model_detail": 119, "blend": [119, 130, 306, 385, 401, 987], "estimator_alpha": 119, "coarser": [119, 123], "regularli": [119, 383, 969], "xx_coarser": 119, "yy_coars": 119, "z_points_coars": 119, "cs_point": 119, "450": [119, 134, 348, 353], "plot_forest_iri": [119, 134], "equidist": [120, 678], "lowa": 120, "sale": [120, 258, 967, 991], "42165": 120, "categorical_columns_subset": 120, "bldgtype": 120, "garagefinish": 120, "lotconfig": 120, "masvnrtyp": [120, 130], "housestyl": [120, 130], "fireplacequ": 120, "extercond": 120, "exterqu": [120, 130], "poolqc": 120, "numerical_columns_subset": 120, "3ssnporch": 120, "fireplac": 120, "bsmthalfbath": 120, "halfbath": 120, "garagecar": [120, 130], "totrmsabvgrd": 120, "bsmtfinsf1": [120, 130], "bsmtfinsf2": 120, "grlivarea": 120, "screenporch": 120, "n_categorical_featur": [120, 547, 548, 618, 619], "n_numerical_featur": 120, "1460": [120, 130], "make_column_transform": [120, 130, 168, 229, 311, 398, 450, 452, 1017], "dropper": 120, "hist_drop": 120, "hist_one_hot": 120, "etc": [120, 198, 216, 253, 262, 263, 354, 358, 360, 372, 374, 376, 377, 383, 384, 385, 394, 398, 401, 405, 475, 489, 543, 544, 550, 551, 654, 662, 678, 704, 756, 782, 796, 815, 818, 848, 859, 892, 893, 894, 895, 896, 898, 904, 905, 915, 956, 957, 961, 967, 970, 987, 988, 991, 1009, 1016, 1018, 1019], "use_encoded_valu": [120, 130, 170, 306, 858, 977, 1021], "unknown_valu": [120, 130, 170, 306, 858, 977, 1021, 1023, 1024], "hist_ordin": 120, "n_unique_categori": [120, 306], "hist_n": 120, "mean_absolute_percentage_error": [120, 967, 1021, 1023], "neg_mean_absolute_percentage_error": [120, 967, 975], "n_cv_fold": [120, 306, 788, 808, 811], "dropped_result": 120, "one_hot_result": 120, "ordinal_result": 120, "native_result": 120, "plot_result": [120, 243, 244, 249], "figure_titl": 120, "plot_info": 120, "test_scor": [120, 122, 124, 206, 257, 260, 273, 306, 338, 348, 384, 401, 788, 807, 808, 811], "y_limit": 120, "mape_cv_mean": 120, "mape_cv_std": 120, "c0": [120, 230, 306], "slowest": [120, 920, 921], "theori": [120, 233, 248, 338, 369, 396, 397, 401, 404, 676, 680, 711, 741, 876, 877, 921, 956, 963, 964, 966, 967, 968, 982, 983], "poorer": [120, 354, 402], "slight": [120, 203, 312, 404, 435, 1019], "acf": 120, "bde": 120, "isol": [120, 126, 227, 236, 344, 370, 372, 378, 388, 549, 830, 888, 1018, 1019], "bcde": 120, "histgradientboostingregressor__max_depth": 120, "histgradientboostingregressor__max_it": 120, "altogeth": [120, 378, 1017], "085": [120, 134, 344], "plot_gradient_boosting_categor": [120, 134], "validation_fract": [121, 206, 313, 404, 545, 546, 547, 548, 652, 653, 654, 662, 664, 841, 842, 981, 1017, 1023], "denot": [121, 381, 385, 388, 395, 397, 401, 404, 574, 575, 577, 782, 788, 796, 857, 858, 952, 956, 959, 963, 965, 967, 968, 977, 980, 993], "kept": [121, 248, 278, 338, 366, 376, 391, 407, 482, 521, 524, 526, 527, 532, 533, 583, 596, 597, 605, 606, 630, 681, 780, 781, 905, 977, 1017, 1018], "asid": [121, 206, 391, 545, 546, 547, 548, 652, 653, 654, 662, 664, 841, 842], "n_estimators_": [121, 545, 546], "vighnesh": [121, 1014, 1015, 1017], "birodkar": [121, 1014, 1015, 1017], "vighneshbirodkar": 121, "rvraghav93": [121, 262, 300], "data_list": 121, "n_gb": 121, "score_gb": 121, "time_gb": 121, "n_gbe": 121, "gbe": 121, "gb": [121, 133, 404, 539, 619], "bar_width": 121, "bar1": 121, "crimson": 121, "bar2": 121, "coral": 121, "n_est": 121, "max_i": [121, 234, 969], "895": [121, 134, 172], "plot_gradient_boosting_early_stop": [121, 134], "fly": [122, 377, 380, 494, 495, 568, 1009, 1011, 1018], "pessimist": [122, 404], "cumul": [122, 198, 216, 397, 711, 720, 741, 861, 873, 977, 981, 1016, 1018, 1019], "demand": [122, 405, 782, 796, 805, 806], "6820": 122, "special": [122, 168, 188, 216, 288, 306, 330, 366, 368, 374, 378, 383, 385, 397, 400, 402, 450, 453, 539, 541, 545, 805, 896, 956, 961, 963, 965, 966, 967, 968, 970, 983, 1016, 1019, 1021, 1023], "expit": [122, 188, 404, 547, 963, 1016], "ridgewai": [122, 404], "gbm": [122, 404, 1012], "x3": [122, 236, 398, 1001], "binomi": [122, 125, 404, 539, 545, 547, 963, 1023], "acc": 122, "heldout_scor": 122, "devianc": [122, 125, 198, 216, 404, 539, 544, 545, 547, 548, 551, 634, 655, 666, 707, 708, 709, 732, 734, 737, 893, 895, 963, 983, 1010, 1019, 1020, 1022, 1023, 1025], "y_proba": [122, 125, 305, 385, 844], "staged_predict_proba": [122, 125, 539, 545, 547, 1009], "cv_estim": 122, "cv_clf": 122, "val_scor": 122, "cv_score": 122, "cumsum": [122, 198, 216, 1016], "oob_improvement_": [122, 404, 545, 546, 1011], "oob_best_it": 122, "test_best_it": 122, "cv_best_it": 122, "brew": [122, 370, 388], "oob_color": 122, "174": [122, 289, 292, 297, 378, 570], "212": [122, 263, 321, 369, 455, 486, 973, 1000], "test_color": 122, "cv_color": 122, "253": [122, 520], "192": [122, 239, 241, 378, 1009], "oob_lin": 122, "test_lin": 122, "cv_line": 122, "dashdot": [122, 150, 153], "xticks_po": 122, "tolist": [122, 162, 171, 257, 312, 367], "xticks_label": 122, "478": [122, 134, 240], "plot_gradient_boosting_oob": [122, 134], "atleast_2d": [123, 374], "expected_i": 123, "amplitud": [123, 155, 157, 192, 407, 963], "lognorm": [123, 156, 179, 247, 304, 977], "tail": [123, 163, 168, 198, 200, 258, 300, 507, 510, 963], "imposs": [123, 345, 988], "mean_pinball_loss": [123, 313, 963, 967, 1022], "all_model": 123, "min_samples_split": [123, 124, 125, 262, 270, 301, 312, 404, 543, 544, 545, 546, 550, 551, 552, 785, 786, 892, 893, 894, 895, 956, 983, 1015], "gbr": 123, "gbr_l": 123, "5th": [123, 158, 397], "95th": [123, 733], "y_med": 123, "fill_between": [123, 136, 150, 155, 157, 159, 177, 178, 216, 258, 260, 261, 262, 268, 273, 788], "unfortun": [123, 167, 168, 216, 380, 383, 404, 494, 495], "sinoisoid": 123, "highlight_min": [123, 187], "font": [123, 187, 212, 232, 896, 898], "pbl": 123, "nbsp": [123, 187], "715413": 123, "750348": 123, "127128": 123, "253445": 123, "379763": 123, "933253": 123, "305438": 123, "622811": 123, "940184": 123, "827917": 123, "909909": 123, "145957": 123, "382005": 123, "667219": 123, "asymmetr": [123, 200, 385, 1014], "signficiantli": 123, "nor": [123, 261, 343, 354, 358, 377, 383, 405, 423, 432, 580, 908, 971, 983, 1020], "917281": 123, "767498": 123, "617715": 123, "692901": 123, "144204": 123, "245961": 123, "347717": 123, "648026": 123, "412021": 123, "607752": 123, "803483": 123, "874771": 123, "354394": 123, "355445": 123, "356497": 123, "852774": 123, "underestim": [123, 169, 198, 216, 258, 372], "extrem": [123, 198, 200, 235, 300, 307, 321, 344, 372, 375, 397, 402, 543, 544, 550, 551, 552, 618, 619, 665, 709, 737, 894, 895, 896, 898, 967, 969], "coverage_fract": 123, "y_low": 123, "y_high": 123, "868": [123, 143], "hypothesi": [123, 258, 264, 338, 401, 676, 680, 809, 964], "pinbal": [123, 313, 548, 656, 708, 733, 963, 1022, 1023], "experiment": [123, 162, 163, 198, 269, 270, 312, 313, 361, 372, 374, 375, 382, 383, 385, 401, 482, 535, 613, 682, 785, 786, 935, 937, 956, 957, 963, 966, 967, 987, 988, 996, 1004, 1017, 1018, 1021, 1022, 1023, 1024, 1025], "enable_halving_search_cv": [123, 269, 270, 312, 376, 785, 786, 956], "halvingrandomsearchcv": [123, 270, 312, 565, 785, 956, 1021, 1023, 1024], "make_scor": [123, 262, 401, 782, 806, 807, 967, 1018], "neg_mean_pinball_loss_05p_scor": 123, "greater_is_bett": [123, 727, 967], "search_05p": 123, "max_resourc": [123, 785, 786, 956], "min_resourc": [123, 785, 786], "redefin": [123, 168], "neg_mean_pinball_loss_95p_scor": 123, "search_95p": 123, "estimator__alpha": 123, "did": [123, 150, 168, 171, 198, 206, 216, 244, 367, 613, 698, 801, 886, 1001, 1010, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1024], "untun": 123, "joint": [123, 165, 169, 176, 217, 219, 398, 597, 638, 648, 678, 819, 820, 821, 822, 823, 884, 963, 964, 968, 972, 974, 978, 1009], "9026666666666666": 123, "796": 123, "sadli": 123, "682": [123, 134, 378], "plot_gradient_boosting_quantil": [123, 134], "tackl": [124, 258, 359, 372, 397, 821, 969, 991, 996], "katrina": [124, 1020], "ni": [124, 1015, 1020], "nilichen": 124, "reg": [124, 168, 178, 301, 311, 335, 404, 544, 546, 554, 636, 637, 639, 640, 641, 642, 643, 649, 650, 651, 656, 657, 664, 665, 675, 679, 895, 963, 1014], "3025": 124, "7877": 124, "train_score_": [124, 404, 545, 546, 547, 548], "impur": [124, 352, 387, 404, 406, 539, 540, 543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895, 896, 898, 983, 1004, 1014, 1015, 1016, 1017], "feature_import": 124, "sorted_idx": [124, 310], "po": [124, 222, 405], "align": [124, 163, 219, 243, 269, 345, 385, 675, 679, 970, 981, 1003, 1004, 1025], "vert": [124, 170, 171, 310, 981], "407": [124, 134, 147, 310, 316, 369], "plot_gradient_boosting_regress": [124, 134], "consider": [125, 151, 154, 253, 259, 265, 372, 407, 605, 782, 796, 956, 969, 973, 981, 991], "return_invers": [125, 374], "original_param": 125, "test_devi": 125, "787": [125, 134, 341], "plot_gradient_boosting_regular": [125, 134], "anomali": [126, 165, 226, 236, 241, 284, 285, 367, 396, 455, 498, 508, 549, 625, 663, 830, 845, 888, 973, 1015, 1016], "recurs": [126, 141, 148, 165, 348, 374, 396, 397, 401, 426, 427, 428, 431, 449, 488, 501, 549, 579, 580, 583, 588, 618, 619, 644, 801, 889, 967, 970, 973, 974, 983, 989, 1001, 1004, 1009, 1019, 1020], "deform": [126, 248, 340], "notat": [126, 385, 398, 402, 405, 576, 698, 963, 967, 993, 1018, 1025], "120": [126, 220, 250, 406, 576, 1009], "cluster_1": 126, "cluster_2": 126, "legend_el": [126, 211, 261], "nuniformli": 126, "max_sampl": [126, 162, 404, 541, 542, 543, 544, 549, 550, 551, 620, 1019, 1022, 1025], "isolationforestisolationforest": 126, "ax_": [126, 252, 261, 265, 305, 310, 379, 424, 617, 683, 684, 686, 687, 688, 788], "nof": 126, "547": [126, 134], "plot_isolation_forest": [126, 134], "trend": [127, 155, 169, 230, 295, 407, 991, 1016], "xgboost": [127, 404, 987], "partialdependencedisplai": [127, 169, 237, 311, 312, 313, 315, 379, 619, 974, 1019, 1020, 1021, 1022, 1023, 1024], "f_0": 127, "f_1": [127, 265, 967], "gbdt_no_cst": [127, 311], "histgradientboostingregressorhistgradientboostingregressor": [127, 130, 306, 315], "gbdt_with_monotonic_cst": 127, "monotonic_cst": [127, 311, 313, 404, 547, 548, 1024], "line_kw": [127, 237, 260, 311, 618, 788], "unconstrain": [127, 169, 311, 367, 981], "axes_": [127, 237, 311, 379, 618], "f_idx": 127, "oscil": [127, 169, 203, 397, 426], "x_df": 127, "gbdt_with_monotonic_cst_df": 127, "651": [127, 134, 378], "plot_monotonic_constraint": [127, 134], "excel": [128, 366, 372, 676, 680, 963, 991], "bernoullinb": [128, 360, 820, 821, 822, 823, 968, 969, 1010, 1011, 1013, 1016, 1021, 1022, 1024], "hasher": [128, 345, 405], "transformed_grid": 128, "y_grid_pr": 128, "388": [128, 134, 274], "plot_random_forest_embed": [128, 134], "multioutput": [129, 267, 276, 361, 374, 385, 418, 451, 468, 469, 470, 537, 540, 542, 543, 544, 546, 548, 550, 551, 554, 556, 597, 618, 619, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 664, 665, 707, 708, 713, 730, 731, 733, 735, 736, 738, 770, 773, 805, 813, 827, 835, 842, 851, 885, 887, 890, 892, 893, 894, 895, 910, 930, 931, 967, 989, 1004, 1009, 1010, 1011, 1015, 1016, 1022, 1023], "multioutputregressor": [129, 418, 451, 468, 469, 470, 540, 542, 544, 546, 548, 551, 554, 556, 597, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 664, 665, 816, 818, 827, 835, 842, 885, 887, 890, 893, 895, 1015, 1016, 1018, 1020, 1021, 1025], "nativ": [129, 162, 359, 367, 385, 404, 547, 548, 816, 817, 935, 963, 967, 987, 1019, 1021], "centr": 129, "regr_multirf": 129, "regr_rf": 129, "y_multirf": 129, "y_rf": 129, "cornflowerblu": [129, 192, 201, 208, 244, 246, 249, 265, 267, 281, 283, 289, 350, 351], "plot_random_forest_regression_multioutput": [129, 134], "compil": [130, 278, 345, 358, 359, 372, 373, 374, 375, 380, 381, 383, 987, 1009], "dean": [130, 1017, 1023], "cock": [130, 1018], "becam": [130, 386, 1017], "kaggl": [130, 384], "residenti": 130, "iowa": 130, "won": [130, 296, 344, 376, 397, 454, 482, 613, 614, 616, 673, 690, 703, 721, 722, 740, 742, 778, 966, 977, 1014, 1015, 1020], "load_ames_h": 130, "yrsold": 130, "heatingqc": 130, "street": [130, 369], "yearremodadd": 130, "heat": [130, 330, 397, 438, 448, 681], "bsmtunfsf": 130, "mssubclass": 130, "condition2": 130, "garagetyp": 130, "overallqu": 130, "totalbsmtsf": 130, "miscfeatur": 130, "mosold": 130, "cat_selector": 130, "num_selector": 130, "besid": [130, 230, 372, 377, 575, 956, 1017], "cat_tree_processor": 130, "encoded_missing_valu": [130, 170, 858, 977, 1023, 1024], "num_tree_processor": 130, "add_ind": [130, 163, 613, 614, 616, 957, 1018, 1021], "tree_preprocessor": [130, 198], "0x7f71c792fac0": 130, "0x7f71c792f9d0": 130, "ordinalencoderordinalencod": [130, 169, 170, 306], "cat_linear_processor": 130, "num_linear_processor": 130, "linear_preprocessor": 130, "tediou": 130, "wrote": [130, 367], "lasso_pipelin": 130, "lassocvlassocv": 130, "rf_pipelin": 130, "randomforestregressorrandomforestregressor": 130, "gbdt_pipelin": 130, "stackingregressor": [130, 310, 404, 553, 1019, 1020, 1021, 1022, 1023], "stacking_regressor": 130, "final_estim": [130, 310, 404, 553, 554], "unknown_v": 130, "stackingregressorstackingregressor": 130, "forestcolumntransform": 130, "lassocolumntransform": 130, "boostingcolumntransform": 130, "final_estimatorridgecvridgecv": 130, "cross_val_predict": [130, 254, 310, 395, 401, 404, 423, 553, 554, 806, 807, 1013, 1014, 1015, 1016, 1018, 1020, 1022], "scorer": [130, 216, 262, 374, 385, 401, 404, 547, 548, 580, 588, 620, 645, 659, 661, 697, 717, 718, 727, 782, 785, 786, 788, 796, 806, 807, 808, 811, 956, 963, 967, 975, 988, 1013, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "test_": [130, 401], "line_kwarg": [130, 687], "nevalu": 130, "935": [130, 134, 1016], "plot_stack_predictor": [130, 134], "exemplari": 131, "eclf": [131, 132, 404], "axarr": [131, 300], "tt": [131, 253, 451], "557": [131, 134], "plot_voting_decision_region": [131, 134], "examplari": 132, "class1_1": 132, "class2_1": 132, "lightgreen": [132, 204, 215], "p3": 132, "p4": 132, "nweight": 132, "349": [132, 134, 378], "plot_voting_proba": [132, 134], "votingregressor": [133, 404, 555, 1018, 1019, 1020, 1023], "cohort": 133, "reg1": [133, 404], "reg2": [133, 404], "reg3": [133, 404], "ereg": [133, 404], "votingregressorvotingregressor": 133, "gbgradientboostingregressorgradientboostingregressor": 133, "rfrandomforestregressorrandomforestregressor": 133, "lrlinearregressionlinearregress": 133, "xt": [133, 278, 385, 613, 615, 782, 785, 786, 796, 828, 836, 844, 849, 854, 861, 873, 902], "pred1": 133, "pred2": 133, "pred3": 133, "pred4": 133, "labelbottom": [133, 258], "plot_voting_regressor": [133, 134], "646": [134, 158], "auto_examples_ensembl": 134, "n_fold": [136, 633, 637, 639, 641, 645, 647, 649, 1010, 1011, 1015], "scores_std": [136, 137, 997], "semilogx": [136, 137, 187, 271, 273], "std_error": 136, "transluc": 136, "999999999999999e": 136, "31622776601683794": 136, "answer": [136, 167, 258, 372, 383, 711, 741, 967, 991], "extern": [136, 150, 360, 361, 365, 369, 372, 374, 377, 383, 385, 394, 397, 405, 406, 407, 579, 596, 597, 703, 722, 778, 963, 966, 967, 970, 983, 988, 994, 1000, 1004, 1017, 1021], "lasso_cv": 136, "k_fold": [136, 997], "maximis": [136, 244, 286, 961, 970], "5f": [136, 314], "moreov": [136, 156, 302, 314, 354, 376, 397, 401, 407, 877, 937, 967, 991, 1017, 1023, 1024], "substanti": [136, 280, 284, 285, 301, 372, 830, 973, 1013, 1016], "05968": 136, "54209": 136, "04520": 136, "15521": 136, "07880": 136, "45192": 136, "637": [136, 140, 284, 292], "plot_cv_diabet": [136, 140], "this_scor": [137, 333], "plot_cv_digit": [137, 140], "961111": 138, "933333": [138, 833], "148": [138, 140, 1012], "plot_digits_classification_exercis": [138, 140], "200j": [139, 334], "666": [139, 140, 153, 826, 957], "plot_iris_exercis": [139, 140], "461": [140, 378], "auto_examples_exercis": 140, "exercis": [140, 360, 361, 369, 372, 487, 488, 490, 491, 638, 639, 644, 782, 787, 806, 826, 889, 994, 1012], "elimin": [141, 148, 165, 396, 397, 401, 434, 488, 501, 579, 580, 583, 588, 644, 785, 786, 801, 889, 953, 967, 989, 991, 1004, 1009], "x_2": [142, 153, 195, 402, 404, 405, 407, 599, 611, 963, 971, 977], "x_3": [142, 977], "irrelev": [142, 182, 354, 378, 399, 404, 406, 590, 725, 967], "agre": [142, 380, 386, 396, 397, 771, 993], "percept": [142, 169, 974], "correctli": [142, 146, 198, 216, 265, 267, 272, 288, 307, 320, 330, 372, 381, 402, 404, 414, 423, 455, 479, 535, 536, 537, 539, 541, 543, 545, 547, 550, 553, 555, 596, 644, 652, 654, 660, 661, 662, 689, 777, 779, 812, 813, 814, 815, 819, 820, 821, 822, 823, 826, 831, 834, 841, 864, 879, 880, 884, 886, 887, 888, 889, 890, 892, 894, 922, 964, 967, 970, 971, 977, 982, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "mutual_info_regress": [142, 314, 406, 578, 581, 582, 585, 586, 595, 1015, 1016, 1021, 1023, 1024, 1025], "f_test": 142, "x_": [142, 151, 249, 258, 310, 374, 397, 400, 402, 613, 621, 879, 880, 963, 969, 974, 1015], "265": [142, 148, 720, 819, 823, 969], "plot_f_test_vs_mi": [142, 148], "examin": [143, 378, 380, 397, 833], "f_classif": [143, 144, 333, 406, 578, 581, 582, 584, 585, 586, 590, 592, 595], "log10": [143, 156, 168, 183, 191, 259, 330], "pvalues_": [143, 578, 581, 582, 584, 585, 586, 1009], "x_indic": 143, "p_": [143, 967, 970, 983], "svm_weight": 143, "clf_select": 143, "svm_weights_select": 143, "get_support": [143, 147, 312, 567, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 1011], "plot_feature_select": [143, 148], "mistak": [144, 319, 354, 397, 401, 720, 855, 869, 870, 872, 873, 874, 875, 963, 968], "anova_filt": 144, "anova_svm": 144, "selectkbestselectkbest": [144, 314], "linearsvclinearsvc": [144, 265], "75788833": 144, "27161955": 144, "26113448": 144, "015": [144, 148, 266, 348, 975], "plot_feature_selection_pipelin": [144, 148], "rfe": [145, 146, 406, 580, 583, 588, 1009, 1013, 1019, 1020, 1021, 1022, 1023, 1025], "n_features_to_select": [145, 147, 312, 406, 579, 588, 1021, 1023], "ranking_": [145, 579, 580], "920": [145, 148], "plot_rfe_digit": [145, 148], "introduct": [146, 216, 256, 361, 372, 401, 402, 405, 576, 773, 774, 819, 823, 963, 965, 967, 969, 986, 994, 1000, 1003, 1004], "class_sep": [146, 288, 501], "rfecv": [146, 406, 579, 583, 588, 1013, 1015, 1017, 1019, 1020, 1021, 1022, 1025], "stratifiedkfold": [146, 245, 253, 264, 268, 321, 401, 423, 553, 554, 580, 588, 645, 659, 782, 783, 785, 786, 787, 788, 790, 792, 796, 800, 802, 804, 805, 806, 807, 808, 809, 811, 865, 997, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1022], "min_features_to_select": [146, 580, 1017], "n_features_": [146, 527, 579, 580, 1022, 1024], "n_score": 146, "538": [146, 148], "plot_rfe_with_cross_valid": [146, 148], "selectfrommodel": [147, 385, 579, 588, 589, 989, 1004, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1025], "sequentialfeatureselect": 147, "greedi": [147, 404, 406, 433, 435, 446, 545, 546, 588, 963, 983], "442": [147, 163, 344, 369, 487, 1000], "descript": [147, 168, 306, 365, 366, 371, 372, 376, 377, 380, 385, 397, 405, 438, 448, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 493, 496, 530, 616, 662, 747, 750, 763, 967, 981, 982, 988, 990, 1002, 1019, 1020, 1021, 1022, 1023, 1024], "descr": [147, 365, 366, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 493, 496, 999, 1017], "_diabetes_dataset": 147, "mass": [147, 237, 369, 432, 780, 963, 974], "blood": [147, 228, 369, 1000], "pressur": [147, 369, 1000], "six": [147, 199, 220, 304, 369, 1018], "serum": [147, 369], "bmi": [147, 186, 187, 237, 369, 975], "tc": [147, 369, 386], "cholesterol": [147, 369], "ldl": [147, 369], "lipoprotein": [147, 369], "hdl": [147, 369], "s4": [147, 186, 187, 369], "tch": [147, 369], "s5": [147, 186, 187, 369, 975], "ltg": [147, 369, 487], "triglycerid": [147, 369], "s6": [147, 186, 187, 369], "glu": [147, 369], "sugar": [147, 369], "www4": [147, 369], "ncsu": [147, 369], "boo": [147, 369], "bradlei": [147, 369, 963], "efron": [147, 369, 668, 669, 963], "trevor": [147, 186, 315, 369, 614, 642, 707, 708, 709, 957, 963, 979, 1013, 1014, 1017, 1018, 1019, 1021], "iain": [147, 369, 963], "johnston": [147, 369, 963, 1018], "annal": [147, 182, 186, 369, 404, 460, 502, 503, 504, 545, 546, 642, 963], "499": [147, 369, 378], "web": [147, 366, 367, 369, 372, 375, 380, 397, 404, 405, 507, 877, 967, 977, 1005, 1009], "stanford": [147, 369, 635, 668, 669, 819, 822, 823, 877, 965], "leastangle_2002": [147, 369], "pitfal": [147, 165, 166, 170, 172, 312, 361, 384, 385, 387, 401, 451, 453, 482, 639, 658, 659, 687, 738, 797, 807, 810, 845, 857, 864, 963, 1004], "accept": [147, 150, 255, 310, 330, 343, 345, 354, 358, 359, 366, 372, 374, 381, 383, 384, 385, 386, 391, 393, 397, 402, 405, 423, 427, 430, 431, 434, 447, 450, 453, 494, 495, 541, 542, 547, 548, 555, 556, 567, 568, 579, 580, 583, 614, 621, 625, 629, 665, 712, 727, 763, 780, 781, 785, 786, 826, 827, 834, 835, 848, 902, 904, 905, 908, 963, 965, 967, 970, 975, 977, 982, 987, 988, 997, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "tic": [147, 169, 269, 969], "sfm": 147, "toc": 147, "sequentialfeatureselector": [147, 406, 579, 583, 589, 1021, 1022, 1023, 1024, 1025], "sf": [147, 236, 258, 312, 367, 406, 478, 588], "backward": [147, 312, 375, 385, 406, 482, 563, 588, 600, 601, 604, 605, 606, 608, 609, 897, 900, 967, 971, 988, 1009, 1012, 1017, 1018, 1019, 1021, 1023, 1025], "tic_fwd": 147, "sfs_forward": 147, "toc_fwd": 147, "tic_bwd": 147, "sfs_backward": 147, "toc_bwd": 147, "187": [147, 258, 378, 570, 968, 1000, 1011], "599": [147, 666], "isn": [147, 310, 343, 345, 354, 359, 372, 380, 501, 547, 548, 580, 777, 785, 786, 857, 970, 982, 1019], "sound": [147, 354], "finish": [147, 246, 964], "expos": [147, 313, 315, 359, 365, 369, 385, 395, 404, 406, 407, 423, 450, 539, 540, 553, 554, 555, 556, 579, 580, 588, 597, 782, 785, 786, 796, 813, 814, 815, 816, 817, 818, 899, 935, 963, 967, 969, 997, 999, 1001, 1006, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "876": [147, 148], "plot_select_from_model_diabet": [147, 148], "813": [148, 237, 241], "auto_examples_feature_select": 148, "basic": [149, 160, 163, 165, 196, 307, 335, 358, 360, 361, 372, 374, 376, 383, 385, 397, 401, 402, 404, 597, 608, 880, 892, 893, 894, 895, 956, 957, 970, 981, 986, 987, 988, 991, 1000], "introductori": [149, 160, 165, 226, 597, 608, 991], "gpr": [149, 159, 160, 165, 482, 596, 597, 599, 600, 601, 602, 607, 608, 609, 610, 611, 989, 1004, 1019], "mauna": [149, 160, 165, 482, 597, 601, 608, 609, 611], "loa": [149, 160, 165, 482, 597, 601, 608, 609, 611], "co2": [149, 160, 165, 482, 597, 601, 608, 609, 611, 1016], "xor": [149, 160, 165, 336, 596, 600, 608, 963, 983, 1016], "posterior": [149, 150, 151, 160, 165, 177, 258, 402, 407, 535, 536, 538, 596, 597, 599, 600, 601, 605, 608, 609, 613, 630, 631, 694, 780, 961, 987, 1015, 1018], "iso": [149, 160, 165, 221, 596, 599, 600], "trick": [150, 233, 288, 345, 357, 360, 361, 375, 383, 398, 407, 568, 575, 629, 658, 959, 960, 971, 981, 982, 1000, 1001, 1004, 1010, 1018], "drastic": [150, 231, 266, 397, 401, 970, 980], "theorem": [150, 396, 407, 969], "period": [150, 155, 159, 376, 385, 386, 395, 407, 601, 803, 863, 1017, 1022, 1024], "reus": [150, 191, 259, 310, 345, 374, 385, 397, 398, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 620, 632, 634, 635, 638, 644, 646, 648, 652, 653, 654, 655, 662, 663, 664, 666, 841, 842, 975, 979, 991, 1016], "training_sample_indic": 150, "training_data": 150, "training_noisy_target": 150, "newer": [150, 371, 388, 402], "expsinesquar": [150, 155, 159, 407], "emb": [150, 220, 231, 287, 365, 366, 448, 681, 964], "kernel_ridg": [150, 233, 361, 1013], "length_scal": [150, 151, 154, 155, 156, 157, 159, 407, 598, 601, 605, 607, 608, 609, 610], "tell": [150, 168, 169, 258, 330, 335, 359, 367, 397, 405, 549, 565, 956, 961, 974, 1002], "1e0": [150, 233, 249, 266, 956], "kernel__length_scal": 150, "kernel__period": 150, "1e1": [150, 156, 198, 233, 330], "kernel_ridge_tun": 150, "9915849773450223": 150, "7986499491396728": 150, "607275806426108": 150, "predictions_kr": 150, "gaussianprocessregressor": [150, 155, 156, 157, 158, 159, 407, 596, 599, 600, 601, 602, 603, 607, 610, 611, 629, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "whitekernel": [150, 155, 156, 407, 597, 598, 600, 1020], "periodicity_bound": [150, 155, 159, 601], "029": [150, 182, 344, 975], "kernel_": [150, 151, 152, 153, 154, 155, 156, 157, 159, 596, 597], "675": 150, "noise_level": [150, 155, 156, 407, 598, 611], "182": [150, 297, 378, 404], "mean_predictions_gpr": 150, "std_predictions_gpr": 150, "return_std": [150, 155, 156, 157, 159, 177, 178, 385, 538, 553, 554, 597, 599, 600, 601, 602, 611, 613, 630, 631, 844, 1016, 1017, 1021], "formul": [150, 159, 267, 372, 399, 402, 405, 407, 410, 461, 535, 536, 543, 550, 636, 637, 640, 641, 642, 644, 645, 651, 656, 748, 754, 781, 886, 889, 892, 894, 967, 968, 977, 989, 1004], "forc": [150, 183, 278, 304, 343, 366, 370, 376, 392, 401, 404, 436, 443, 482, 592, 595, 632, 633, 638, 639, 643, 646, 647, 648, 649, 658, 659, 660, 667, 670, 673, 739, 763, 766, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 886, 887, 888, 889, 890, 902, 904, 905, 977, 1004, 1014, 1017, 1018, 1019, 1021, 1022, 1023], "capac": [150, 170], "length_scale_bound": [150, 156, 157, 159, 407, 597, 601, 605, 608, 609], "attenu": 150, "plot_compare_gpr_krr": [150, 160], "arbitrarili": [151, 244, 249, 343, 385, 407, 418, 451, 468, 469, 470, 538, 540, 542, 544, 546, 548, 551, 554, 556, 597, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 655, 656, 658, 659, 664, 665, 666, 707, 708, 709, 731, 770, 774, 817, 818, 827, 835, 842, 865, 885, 887, 890, 893, 895, 967, 970, 977, 983], "lml": [151, 152, 156, 407], "exhibit": [151, 203, 343, 387, 401, 402, 404, 407, 975], "steep": [151, 169, 267, 268, 397, 401, 407, 436, 442], "laplac": [151, 407, 596, 597, 819, 820, 821, 823, 969], "214": [151, 272, 274, 328, 334, 341, 407, 570], "319": [151, 1002], "gp_fix": 151, "gp_opt": 151, "log_marginal_likelihood": [151, 152, 154, 156, 159, 407, 596, 597, 1019], "theta": [151, 152, 154, 156, 158, 159, 234, 402, 407, 509, 522, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 678, 969, 983], "landscap": [151, 407], "theta0": 151, "theta1": 151, "pcolor": 151, "xscale": [151, 156, 233], "yscale": [151, 156, 198, 233, 343], "970": [151, 160], "plot_gpc": [151, 160], "gpc_rbf_isotrop": 152, "gpc_rbf_anisotrop": 152, "m_max": 152, "plot_gpc_iri": [152, 160], "0256": 153, "dotproduct": [153, 154, 159, 407, 597, 611], "sigma_0": [153, 154, 159, 407, 600], "constantkernel": [153, 159, 407, 597, 603, 607, 610], "lim": [153, 520], "experi": [153, 157, 167, 168, 169, 170, 174, 200, 305, 338, 344, 345, 359, 366, 372, 375, 396, 401, 501, 713, 770, 963, 968, 979, 985, 986, 987, 991, 1000, 1002], "61611719": 153, "00099547": 153, "10469096": 153, "32782448": 153, "00000000": 153, "50000000": 153, "17289014": 153, "6984743": 153, "3109306": 153, "93271427": 153, "03823144": 153, "10584743": 153, "87600388": 153, "74310541": 153, "21301203": 153, "26386883": 153, "gp": [153, 158, 407, 596, 597, 608, 1015], "cb": [153, 231, 247], "widehat": 153, "mathbf": [153, 402, 963, 967, 971, 972, 981], "leq": [153, 402, 404, 963, 967, 970, 981, 982, 983], "clim": 153, "clabel": [153, 209], "334": [153, 240], "145": [153, 160, 264, 274, 397], "plot_gpc_isoprob": [153, 160], "stationari": [154, 407, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611], "coincid": [154, 200, 407], "430": [154, 156, 159, 409, 519], "convergencewarn": [154, 156, 158, 159, 206, 213, 244, 295, 296, 302, 381, 385, 780, 781, 1017, 1018, 1021], "k1__constant_valu": [154, 159], "bound": [154, 156, 158, 159, 165, 200, 216, 226, 241, 257, 370, 379, 397, 402, 405, 407, 408, 430, 475, 488, 498, 509, 522, 581, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 621, 623, 636, 640, 644, 663, 691, 720, 780, 781, 824, 825, 861, 873, 876, 877, 878, 886, 887, 888, 891, 908, 935, 963, 966, 967, 970, 979, 981, 982, 984, 1017, 1020, 1021, 1023], "100000": [154, 233, 243, 372, 599, 600, 601, 605, 606, 608, 609, 611, 873, 960, 1000, 1002], "puor_r": [154, 336], "plot_gpc_xor": [154, 160], "rw2006": [155, 407, 596, 597], "ascent": [155, 407], "monthli": [155, 386, 407, 967], "atmospher": [155, 407], "ppm": 155, "observatori": [155, 407], "hawaii": [155, 407], "1958": [155, 402, 404, 407, 518], "air": [155, 749], "41187": 155, "flag": [155, 370, 372, 373, 375, 450, 596, 597, 613, 659, 661, 713, 770, 982, 1015, 1019, 1020, 1022, 1023, 1024], "station": [155, 344], "mlo": 155, "316": [155, 159, 212, 217, 597, 600, 611, 860], "317": 155, "co2_data": 155, "to_datetim": 155, "timestamp": 155, "march": [155, 711, 741, 967, 1009, 1013, 1017, 1019, 1024], "dropna": 155, "nfrom": 155, "upcom": [155, 370], "to_numpi": 155, "rise": [155, 407], "irregular": [155, 397, 407, 970], "long_term_trend_kernel": 155, "decai": [155, 407, 530, 841, 842, 921, 967, 981, 1013], "seasonal_kernel": 155, "ration": [155, 609, 965], "diffus": [155, 407], "accommod": [155, 407, 1017], "rationalquadrat": [155, 159, 407, 602], "irregularities_kernel": 155, "shall": [155, 407], "phenomena": [155, 407], "noise_kernel": 155, "noise_level_bound": [155, 156, 611], "co2_kernel": 155, "subtract": [155, 168, 400, 402, 407, 429, 433, 445, 520, 630, 631, 636, 637, 640, 641, 642, 650, 651, 1016], "normalize_i": [155, 407, 597, 1023], "y_mean": [155, 156, 159, 597, 630, 631], "gaussianprocessregressorgaussianprocessregressor": 155, "futur": [155, 199, 239, 313, 372, 374, 376, 383, 385, 386, 391, 401, 405, 482, 520, 621, 935, 937, 967, 968, 982, 983, 991, 1006, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "todai": [155, 383, 1002], "current_month": 155, "mean_y_pr": 155, "std_y_pr": 155, "968": [155, 167, 256], "188": [155, 369, 378, 570], "0367": 155, "6ppm": 155, "960": [155, 160], "plot_gpr_co2": [155, 160], "target_gener": 156, "add_nois": 156, "minima": [156, 186, 402, 433, 678, 964, 1001, 1017], "y_std": [156, 159, 538, 597, 630, 631, 1022], "k1__k2__length_scal": [156, 407], "noptimum": 156, "nlog": 156, "length_scale_grid": 156, "noise_level_grid": 156, "newshap": 156, "741": [156, 160], "plot_gpr_noisi": [156, 160], "principl": [157, 283, 305, 345, 372, 383, 385, 386, 401, 404, 407, 921, 956, 966, 970, 981, 1016], "tikhonov": [157, 407, 658], "training_indic": 157, "n_restarts_optim": [157, 407, 596, 597], "43": [157, 195, 231, 258, 278, 369, 377, 782, 796, 865], "mean_predict": 157, "std_predict": 157, "whenev": [157, 167, 354, 366, 380, 385, 388, 395, 468, 469, 470, 482, 614, 616, 958, 966, 988, 1019], "noise_std": 157, "y_train_noisi": 157, "543": [157, 160, 182], "plot_gpr_noisy_target": [157, 160], "gene": [158, 366, 394, 437, 499, 579, 580, 831, 864], "letter": [158, 367, 369, 376, 405, 773, 774, 967], "among": [158, 169, 174, 198, 248, 276, 352, 360, 367, 374, 385, 386, 395, 396, 400, 433, 435, 498, 505, 777, 809, 827, 832, 834, 886, 889, 892, 893, 894, 895, 956, 959, 967, 968, 974, 977, 982, 1009, 1015, 1016, 1019], "brighter": 158, "4th": [158, 369], "6th": 158, "haussler": 158, "1999": [158, 367, 395, 397, 399, 402, 404, 423, 436, 443, 455, 460, 520, 527, 541, 542, 545, 546, 708, 878, 886, 887, 889, 890, 973, 979], "technic": [158, 199, 220, 314, 367, 369, 372, 385, 404, 638, 650, 671, 672, 879, 963, 964, 970], "depart": [158, 397], "california": [158, 162, 163, 300, 306, 312, 365, 369, 476, 1004], "santa": [158, 1024], "cruz": 158, "generickernelmixin": [158, 1019], "sequencekernel": 158, "baseline_similar": 158, "baseline_similarity_bound": 158, "hyperparameter_baseline_similar": 158, "_f": [158, 963], "_g": 158, "__call__": [158, 330, 385, 405, 407, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 1016], "eval_gradi": [158, 407, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611], "is_stationari": [158, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611], "clone_with_theta": [158, 407, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611], "agct": 158, "agc": 158, "aact": 158, "taa": 158, "aaa": 158, "gaaca": 158, "training_idx": 158, "cga": 158, "taac": 158, "tcg": 158, "cttt": 158, "tgct": 158, "atag": 158, "ctc": 158, "420": [158, 322], "232": [158, 160, 967], "plot_gpr_on_structured_data": [158, 160], "plot_gpr_sampl": 159, "gpr_model": 159, "y_sampl": [159, 597], "sample_i": [159, 407, 597, 1023], "single_prior": 159, "pm": [159, 169, 268, 404, 967], "dev": [159, 168, 216, 263, 268, 370, 372, 376, 378, 380, 967, 991, 1005, 1016, 1021, 1024], "594": [159, 198], "279": [159, 963], "067": 159, "alpha_bound": [159, 609], "1e15": 159, "_gpr": 159, "476": 159, "523": [159, 510], "runtimewarn": 159, "semidefinit": [159, 977, 982], "21e": 159, "799": [159, 344], "791": 159, "sigma_0_bound": [159, 600], "lbfg": [159, 294, 374, 634, 635, 644, 645, 655, 658, 660, 666, 673, 815, 818, 841, 842, 963, 971, 1013, 1014, 1016, 1017, 1022, 1023, 1024], "statu": [159, 366, 376, 388, 482, 824, 825], "abnormal_termination_in_lnsrch": 159, "6576930005": 159, "matern": [159, 407, 1020, 1024], "609": [159, 344, 378], "484": 159, "398": [159, 160, 633, 1002], "plot_gpr_prior_posterior": [159, 160], "807": [160, 235, 241, 256, 258], "auto_examples_gaussian_process": 160, "iterativeimput": [161, 163, 164, 165, 476, 551, 566, 614, 615, 616, 625, 631, 658, 806, 827, 845, 1018, 1019, 1020, 1021, 1023, 1024, 1025], "robin": [162, 163, 613, 957, 1015, 1018, 1023, 1024], "kneighborsregressor": [162, 235, 290, 314, 404, 556, 826, 832, 834, 835, 970, 1009, 1011, 1013, 1019, 1021, 1022, 1023, 1024, 1025], "mimic": [162, 198, 343, 800], "missforest": [162, 957], "popular": [162, 223, 367, 370, 377, 380, 383, 385, 396, 403, 404, 405, 407, 438, 448, 957, 959, 963, 965, 972, 981, 988, 997, 1002], "enable_iterative_imput": [162, 163, 376, 613, 957, 1018], "x_full": [162, 163, 300], "y_full": [162, 163, 300], "2k": 162, "br_estim": 162, "score_full_data": 162, "neg_mean_squared_error": [162, 163, 200, 233, 272, 807, 967, 975, 1015], "x_miss": [162, 163], "y_miss": [162, 163], "missing_sampl": [162, 163], "missing_featur": [162, 163], "score_simple_imput": 162, "missing_valu": [162, 163, 238, 385, 613, 614, 615, 616, 754, 957, 1017, 1018], "score_iterative_imput": 162, "stricter": 162, "impute_estim": 162, "__class__": [162, 198, 200, 260, 302, 343, 344, 345, 379], "xerr": [162, 163, 344], "035": [162, 164], "plot_iterative_imputer_variants_comparison": [162, 164], "ness": [163, 216], "auxiliari": [163, 370, 991, 1024], "district": [163, 367], "neither": [163, 168, 310, 343, 354, 383, 423, 580, 614, 908, 970, 983], "feel": [163, 300, 371, 372, 380, 397, 432, 983], "x_diabet": [163, 997], "y_diabet": [163, 997], "x_california": 163, "y_california": 163, "add_missing_valu": 163, "missing_r": 163, "n_missing_sampl": 163, "x_miss_california": 163, "y_miss_california": 163, "x_miss_diabet": 163, "y_miss_diabet": 163, "knnimput": [163, 310, 613, 616, 957, 1019, 1020, 1023, 1024, 1025], "get_scores_for_imput": 163, "impute_scor": 163, "x_label": 163, "mses_california": 163, "stds_california": 163, "mses_diabet": 163, "stds_diabet": 163, "get_full_scor": 163, "full_scor": 163, "get_impute_zero_scor": 163, "fill_valu": [163, 229, 238, 311, 613, 616, 977, 1017, 1025], "zero_impute_scor": 163, "unweight": [163, 211, 449, 633, 639, 664, 693, 699, 714, 715, 723, 768, 769, 772, 773, 819, 820, 821, 822, 823, 957], "get_impute_knn_scor": 163, "knn_impute_scor": 163, "get_impute_mean": 163, "mean_impute_scor": 163, "obvious": [163, 358, 1002], "get_impute_it": 163, "n_nearest_featur": [163, 613], "sample_posterior": [163, 613, 957], "iterative_impute_scor": 163, "n_bar": 163, "xval": 163, "plot_missing_valu": [163, 164], "987": [164, 344], "auto_examples_imput": 164, "prune": [165, 347, 353, 406, 486, 543, 544, 545, 546, 550, 551, 579, 630, 810, 892, 893, 894, 895, 970, 989, 1004, 1009, 1012, 1019, 1020], "elast": [165, 176, 182, 189, 209, 217, 271, 396, 457, 458, 464, 487, 510, 632, 633, 638, 643, 644, 645, 646, 647, 648, 649, 654, 662, 664, 667, 670, 956, 967, 981, 989, 1004, 1009, 1014, 1018, 1019], "gram": [165, 176, 217, 374, 402, 405, 475, 510, 534, 574, 575, 576, 577, 632, 633, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 651, 667, 668, 669, 670, 671, 672, 752, 760, 762, 956, 977, 1002, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1022, 1023], "huberregressor": [165, 176, 204, 217, 510, 656, 657, 658, 664, 665, 963, 1015, 1016, 1017, 1018], "aic": [165, 176, 186, 217, 248, 487, 637, 639, 640, 641, 642, 781, 845, 864, 956, 963, 1009, 1016, 1022, 1023], "bic": [165, 176, 186, 217, 406, 487, 637, 639, 640, 641, 642, 781, 845, 864, 956, 963, 966, 1009, 1016, 1022, 1023], "mnist": [165, 176, 206, 217, 278, 293, 298, 482, 557, 644, 810, 841, 864, 907, 963, 971], "20newgroup": [165, 176, 217, 475, 557, 644, 810, 963], "ordinari": [165, 176, 177, 182, 200, 201, 203, 215, 217, 313, 621, 632, 638, 640, 641, 642, 643, 658, 664, 668, 669, 673, 981, 989, 1004], "spline": [165, 176, 217, 502, 503, 504, 658, 845, 859, 863, 987, 1022], "ransac": [165, 176, 204, 215, 217, 510, 635, 643, 657, 664, 665], "convex": [165, 176, 217, 219, 339, 344, 397, 399, 402, 410, 432, 438, 448, 459, 461, 462, 465, 466, 467, 644, 662, 678, 963, 964, 970, 971, 981, 1022], "theil": [165, 176, 204, 217, 635, 643, 657, 664, 665], "sen": [165, 176, 204, 217, 635, 643, 657, 664, 665], "tweedi": [165, 176, 217, 450, 482, 538, 634, 655, 666, 692, 709, 730, 732, 734, 735, 737, 810, 845, 848, 849, 857, 864, 963, 1019, 1020, 1022], "insur": [165, 176, 198, 217, 450, 482, 538, 634, 655, 666, 692, 730, 735, 737, 810, 845, 848, 849, 857, 864, 963], "claim": [165, 176, 217, 372, 450, 482, 538, 634, 655, 666, 692, 730, 735, 737, 810, 845, 848, 849, 857, 864, 963], "failur": [165, 166, 168, 172, 372, 380, 643, 770, 810, 904, 905, 990, 991, 1022, 1023], "infer": [165, 166, 168, 172, 244, 248, 249, 258, 349, 366, 374, 383, 396, 401, 402, 482, 494, 495, 501, 520, 522, 535, 536, 539, 545, 546, 618, 621, 643, 695, 708, 726, 770, 780, 781, 810, 820, 858, 865, 879, 880, 892, 893, 894, 895, 930, 957, 963, 967, 972, 977, 980, 983, 987, 988, 996, 1010, 1014, 1015, 1020, 1023], "causal": [165, 166, 172, 643, 770, 810], "multicollinear": [165, 166, 172, 400, 486, 550, 620, 641, 810, 963, 975], "isomap": [165, 218, 221, 225, 310, 314, 404, 488, 530, 535, 552, 675, 676, 677, 678, 833, 845, 854, 877, 970, 1003, 1004, 1017, 1019, 1022, 1023, 1024, 1025], "And": [165, 218, 225, 258, 343, 380, 391, 397, 401, 405, 516, 574, 575, 577, 678, 679, 963, 967, 985, 1016], "hole": [165, 218, 225, 516, 678, 679, 1023], "perplex": [165, 218, 219, 223, 225, 278, 500, 511, 522, 678, 964, 1014, 1016, 1023], "johnson": [165, 226, 241, 300, 304, 364, 396, 475, 488, 860, 872, 876, 877, 878, 977, 984, 1004, 1017, 1023], "lindenstrauss": [165, 226, 241, 364, 396, 475, 488, 876, 877, 878, 984, 1004], "halv": [165, 251, 274, 392, 501, 550, 565, 782, 785, 786, 889, 1004, 1021], "custom": [165, 237, 251, 259, 274, 280, 285, 310, 325, 330, 341, 343, 345, 364, 367, 370, 374, 379, 380, 381, 383, 384, 385, 396, 397, 398, 401, 407, 454, 475, 479, 480, 488, 490, 524, 526, 533, 535, 543, 544, 550, 551, 557, 559, 588, 617, 676, 699, 782, 810, 848, 882, 889, 951, 956, 961, 967, 970, 987, 988, 991, 1002, 1004, 1009, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1024, 1025], "det": [165, 251, 274, 399, 501, 550, 684, 688, 712, 774, 810, 845, 864, 884, 919, 1021], "tsne": [165, 219, 220, 221, 223, 224, 279, 292, 314, 385, 411, 419, 482, 674, 675, 676, 828, 832, 845, 941, 964, 970, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "novelti": [165, 227, 279, 285, 292, 329, 830, 989, 1003, 1004, 1009, 1017], "lof": [165, 227, 236, 279, 292, 549, 830, 888, 973], "boltzmann": [165, 293, 298, 488, 644, 699, 810, 840, 841, 842, 844, 870, 1003, 1004, 1011], "mlp": [165, 169, 237, 293, 295, 298, 482, 557, 810, 841, 842, 971], "semi_supervis": [165, 312, 314, 317, 318, 319, 320, 321, 322, 323, 361, 968, 980, 1010, 1015, 1016, 1023, 1024], "tie": [165, 325, 341, 383, 404, 498, 812, 889, 968, 982, 983, 1010, 1025], "unbalanc": [165, 261, 325, 341, 401, 498, 617, 889, 909, 910, 956, 981], "featurehash": [165, 342, 344, 346, 360, 367, 405, 450, 474, 567, 574, 575, 576, 577, 857, 1010, 1015, 1016, 1017, 1023, 1024], "auto_examples_python": 165, "auto_examples_jupyt": 165, "unless": [167, 244, 249, 372, 374, 375, 383, 385, 395, 397, 400, 408, 423, 430, 432, 434, 436, 438, 443, 444, 447, 450, 453, 458, 475, 482, 494, 495, 517, 521, 522, 523, 525, 528, 529, 531, 532, 533, 534, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 580, 588, 596, 597, 618, 620, 625, 632, 633, 637, 638, 639, 641, 643, 644, 645, 647, 649, 651, 652, 654, 662, 665, 674, 675, 676, 677, 678, 679, 680, 695, 700, 759, 763, 766, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 826, 827, 830, 832, 834, 835, 837, 838, 841, 842, 843, 846, 869, 870, 872, 873, 874, 875, 879, 880, 892, 893, 894, 895, 900, 904, 905, 921, 935, 963, 966, 968, 1009, 1011, 1015, 1017, 1020, 1021], "willing": [167, 255], "econom": [167, 168, 258], "educ": [167, 168, 372, 702, 968], "earn": [167, 168, 386], "polici": [167, 168, 198, 216, 385, 521, 527, 963, 1024], "maker": [167, 168], "ovb": [167, 168], "parent_hourly_wag": 167, "college_degre": 167, "true_coef": [167, 182, 193], "hourly_wag": 167, "stori": [167, 258, 367, 966], "pairplot": [167, 168], "diag_kind": [167, 168], "kde": [167, 168, 282, 283, 291, 403, 829], "features_nam": [167, 1016], "regressor_with_": 167, "y_pred_with_": 167, "r2_with_abl": 167, "975": [167, 982], "model_coef": 167, "intellectu": 167, "proxi": [167, 168, 402, 840, 997, 1014], "inadvert": [167, 385], "iq": 167, "regressor_without_": 167, "y_pred_without_": 167, "r2_without_": 167, "incorrect": [167, 265, 321, 354, 372, 397, 593, 594, 618, 619, 719, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "brought": [167, 539, 540, 543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895], "unobserv": [167, 168, 402], "confound": [167, 168], "conduct": [167, 258, 407, 987, 1023], "prohibit": [167, 401, 404, 613, 972, 980, 1016], "uneth": 167, "iv": [167, 967], "659": [167, 172], "plot_causal_interpret": [167, 172], "hint": [168, 358, 373, 377, 391, 434, 967, 1000], "aris": [168, 261, 338, 359, 377, 397, 701, 963, 964, 1021], "mathemat": [168, 186, 215, 261, 364, 369, 372, 385, 387, 396, 399, 402, 403, 535, 536, 543, 550, 621, 632, 642, 775, 776, 781, 842, 886, 889, 892, 894, 967, 977, 979, 989, 991, 1000, 1004, 1023], "survei": [168, 400], "1985": [168, 397, 691, 701, 771], "534": 168, "race": [168, 367, 1012], "occup": [168, 300], "sector": 168, "marr": 168, "not_memb": 168, "marri": 168, "freq": [168, 182, 345], "378": [168, 404, 1002, 1009], "289": 168, "438": [168, 975], "440": 168, "411": [168, 399, 409, 459, 519], "350": 168, "018727": 168, "822097": 168, "833333": 168, "615373": 168, "379710": 168, "726573": 168, "thereaft": [168, 177], "hispan": 168, "manufactur": 168, "unmarri": 168, "dollar": [168, 367], "exploratori": [168, 991], "emul": [168, 380], "train_dataset": [168, 366], "rangeindex": 168, "533": [168, 189, 217], "normalis": [168, 597, 1002], "numerical_column": [168, 170, 453], "if_binari": [168, 240, 857, 977, 1020], "prepend": [168, 1009], "exp10": 168, "ufunc": 168, "passthroughpassthroughtransformedtargetregressor": 168, "transformedtargetregressortransformedtargetregressor": 168, "ridgeridg": 168, "mae_train": 168, "mae_test": 168, "learnt": [168, 354, 385, 401, 956], "obviou": [168, 354, 358, 394, 402], "regressor_": [168, 451, 579, 580, 583], "race_hispan": 168, "013519": 168, "race_oth": 168, "009075": 168, "race_whit": 168, "022594": 168, "occupation_cler": 168, "000045": 168, "occupation_manag": 168, "090528": 168, "occupation_oth": 168, "025102": 168, "occupation_profession": 168, "071964": 168, "occupation_sal": 168, "046636": 168, "occupation_servic": 168, "091053": 168, "sector_construct": 168, "000198": 168, "sector_manufactur": 168, "031255": 168, "sector_oth": 168, "031025": 168, "marr_unmarri": 168, "032405": 168, "union_not_memb": 168, "117154": 168, "sex_mal": 168, "090808": 168, "south_y": 168, "033823": 168, "054699": 168, "035005": 168, "030867": 168, "adimension": 168, "Their": [168, 367, 369, 386, 397, 630, 1009], "visibl": [168, 169, 200, 340, 366, 372, 397, 840, 972, 1014, 1024], "gaug": 168, "decad": [168, 988], "x_train_preprocess": 168, "multipli": [168, 216, 258, 358, 381, 385, 402, 404, 405, 410, 450, 461, 501, 524, 526, 527, 533, 543, 547, 550, 632, 634, 638, 640, 644, 645, 646, 648, 654, 655, 656, 658, 662, 663, 664, 666, 672, 673, 675, 679, 749, 886, 887, 888, 889, 890, 892, 894, 910, 943, 944, 945, 956, 963, 967, 981, 1020], "coef_i": 168, "std_i": 168, "emphas": [168, 340, 378, 402, 967], "perturb": [168, 215, 297, 402, 404, 966], "caution": [168, 376, 426, 440, 1017], "repeatedkfold": [168, 401, 787, 798, 1016], "cv_model": 168, "return_estim": [168, 401, 807, 1017], "train_idx": [168, 385], "stripplot": 168, "whi": [168, 170], "collinear": [168, 171, 203, 216, 404, 553, 634, 655, 666, 857, 963, 1009], "teas": 168, "apart": [168, 313, 330, 383, 385, 398, 400, 406, 710, 982, 991, 1017], "vice": [168, 255, 343, 397, 407, 428, 593, 594, 813, 1013], "versa": [168, 255, 343, 397, 407, 428, 593, 594, 813, 1013], "column_to_drop": 168, "said": [168, 227, 259, 367, 372, 775, 965, 973, 993, 1000], "unchang": [168, 216, 265, 404, 419, 428, 429, 431, 432, 433, 435, 450, 454, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 552, 553, 554, 555, 556, 567, 568, 569, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 674, 675, 678, 748, 819, 820, 821, 823, 828, 833, 836, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 873, 876, 877, 882, 970, 993, 1017, 1023], "neglig": [168, 970, 1012], "littl": [168, 169, 170, 171, 227, 367, 405, 448, 630, 782, 796, 921, 957, 964, 966, 982, 983, 1000, 1010, 1021], "ridgecvridgecv": 168, "alon": [168, 264, 330, 385, 391, 395, 634, 655, 666, 727, 1016, 1018], "suppress": [168, 310, 358, 380, 678, 970, 1016], "themselv": [168, 300, 368, 380, 385, 394, 397, 404, 405, 407, 432, 601, 775, 983, 1002, 1019], "bring": [168, 300, 402, 662, 664, 964, 991], "entic": 168, "pursu": 168, "tempt": 168, "conclud": [168, 178, 216, 258, 345, 354, 386], "deflat": [168, 400, 409, 519], "presum": [168, 276, 397, 405, 819], "respond": [168, 372, 397], "816": [168, 172, 259, 457, 458], "plot_linear_model_coefficient_interpret": [168, 172], "complement": [169, 268, 343, 618, 619, 784, 799, 802, 810, 819, 820, 821, 822, 823, 974, 989, 1004, 1017], "molnar": [169, 974], "christoph": [169, 402, 407, 518, 596, 597, 600, 605, 608, 780, 963, 968, 1010, 1014, 1017, 1020, 1021, 1022, 1023, 1024], "goldstein": [169, 974], "kapeln": [169, 974], "bleich": [169, 974], "pitkin": [169, 974], "peek": [169, 372, 974], "settingwithcopywarn": 169, "2284": 169, "904": [169, 256, 398], "287": [169, 979], "1747": 169, "1729": 169, "mask_train": [169, 216], "accordingli": [169, 372, 376, 377, 1016, 1017, 1024], "8640": 169, "115": [169, 220, 225, 975], "nomin": [169, 366, 385, 386, 404, 405, 567, 568, 702, 977, 988], "numerical_featur": [169, 306], "xtick_start": 169, "xtick_period": 169, "average_bike_rent": 169, "numeric_onli": 169, "decor": [169, 310, 372, 373, 374, 381, 788, 911, 915, 916, 928, 934, 1019, 1022, 1025], "strike": 169, "mlp_preprocessor": 169, "quantiletransformerquantiletransform": 169, "catindex": 169, "hgbdt_preprocessor": 169, "sparse_threshold": [169, 450, 453, 1017], "passthroughpassthrough": 169, "mlp_model": 169, "hidden_layer_s": [169, 237, 294, 296, 841, 842, 971], "learning_rate_init": [169, 295, 296, 841, 842], "756": [169, 267, 274, 292], "forget": [169, 354, 359, 366, 376, 383, 402, 964, 990], "poor": [169, 174, 264, 273, 321, 395, 401, 402, 676, 680, 723, 821, 824, 825, 961, 962, 964, 969, 988, 993, 1016, 1017, 1018, 1020, 1022], "grid_resolut": [169, 312, 328, 617, 618, 619], "features_info": 169, "948": [169, 770, 967], "hgbdt_model": 169, "cheaper": [169, 397, 407, 659, 959, 963], "138": [169, 214, 378, 404, 407, 967], "temperatur": [169, 405, 974], "wind": [169, 968], "meaningless": [169, 405, 886, 889, 1012], "celsiu": [169, 974], "interaction_cst": [169, 315, 404, 547, 548, 1024], "hgbdt_model_without_interact": 169, "histgradientboostingregressor__interaction_cst": 169, "38": [169, 189, 197, 252, 267, 283, 404, 618, 715, 865, 967, 977, 1009, 1010, 1011], "heatmap": [169, 171, 177, 182, 269, 315, 330, 618, 974], "412": [169, 482, 963], "slope": [169, 196, 200, 215, 397, 708, 733, 965, 967], "dry": 169, "wetter": 169, "361": [169, 367, 404, 541, 542], "spike": 169, "degrad": [169, 227, 300, 344, 403], "somehow": 169, "forbidden": [169, 404], "noisili": 169, "309": 169, "partial_depend": [169, 618, 974, 1010, 1018, 1019, 1020, 1021, 1024, 1025], "grid_valu": [169, 619, 1025], "add_ax": [169, 223, 269], "surf": 169, "rstride": 169, "cstride": 169, "bupu": 169, "nthe": [169, 256, 352], "pretti": [169, 223, 256, 343, 358, 372, 383, 841, 842, 971, 1018], "view_init": [169, 219, 221, 223], "clb": 169, "ndepend": 169, "746": [169, 172, 262, 274, 369], "plot_partial_depend": [169, 172, 310, 311, 312, 1014, 1018, 1019, 1020, 1021, 1022, 1023], "breiman": [170, 401, 404, 502, 503, 504, 541, 542, 550, 551, 620, 892, 893, 975, 983], "random_num": 170, "random_cat": 170, "sibsp": [170, 315], "parch": [170, 315], "categorical_encod": 170, "numerical_pip": 170, "memor": 170, "814": [170, 179, 217, 1000], "mdi_import": 170, "sorted_importances_idx": 170, "retri": [170, 482, 1017, 1023], "classifier__min_samples_leaf": 170, "anymor": [170, 198, 260, 310, 311, 330, 354, 376, 398, 656, 1015, 1018, 1021, 1022, 1023, 1025], "810": 170, "832": [170, 404, 541, 542], "train_result": 170, "test_result": 170, "train_import": 170, "test_import": 170, "plot_permutation_import": [170, 172], "wisconsin": [171, 365, 486, 1004, 1014], "spearman": [171, 621, 622, 958], "spearmanr": 171, "squareform": 171, "load_breast_canc": [171, 321, 348, 377, 578, 581, 582, 584, 660, 661, 773, 967, 1014, 1015, 1020], "012": [171, 174], "contradict": [171, 988], "perm_sorted_idx": 171, "tree_importance_sorted_idx": 171, "tree_indic": 171, "fill_diagon": [171, 222], "distance_matrix": 171, "dist_linkag": 171, "dendro": 171, "leaf_rot": 171, "dendro_idx": 171, "ivl": 171, "cluster_id": [171, 344], "fcluster": 171, "cluster_id_to_feature_id": 171, "selected_featur": 171, "x_train_sel": 171, "x_test_sel": 171, "clf_sel": 171, "734": [171, 172], "plot_permutation_importance_multicollinear": [171, 172], "auto_examples_inspect": 172, "polynomialcountsketch": [174, 625, 627, 959, 1021, 1023], "covtyp": 174, "tensor": [174, 364, 393, 402, 524, 526, 533, 625, 626, 627, 1004, 1021], "sketch": [174, 360, 364, 381, 396, 625, 626, 627, 932, 1004, 1021], "daniel": [174, 315, 358, 865, 977, 991, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1021, 1023], "lopez": 174, "sanchez": [174, 1017, 1018], "lope": 174, "usal": 174, "581": 174, "cartograph": 174, "remot": [174, 319, 372, 375], "fetch_covtyp": [174, 236, 312, 367, 1018, 1021, 1023], "5_000": 174, "mm": 174, "lsvm": 174, "lsvm_time": 174, "lsvm_score": 174, "condens": [174, 432], "compact": [174, 300, 358, 369, 824, 825, 983, 1011], "ps_lsvm_time": 174, "ps_lsvm_score": 174, "ksvm": 174, "ksvm_time": 174, "ksvm_score": 174, "pham": [174, 959, 1016], "ninh": 174, "rasmu": [174, 1016], "pagh": [174, 959], "kdd": [174, 367, 395, 423, 979], "doi": [174, 198, 216, 372, 397, 662], "1145": [174, 397, 662], "2487575": 174, "2487591": 174, "csie": [174, 366, 473, 494, 495, 644], "ntu": [174, 366, 473, 494, 495, 644], "tw": [174, 366, 473, 494, 495, 644, 982], "cjlin": [174, 366, 473, 494, 495, 644, 1012], "libsvmtool": [174, 366, 473, 494, 495], "plot_scalable_poly_kernel": [174, 175], "auto_examples_kernel_approxim": 175, "ard": [177, 630, 631], "ol": [177, 188, 193, 195, 196, 204, 215, 313, 642, 963], "true_weight": 177, "ardregress": [177, 182, 631, 963, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1025], "olr": 177, "brr": 177, "_bay": 177, "renam": [177, 248, 259, 372, 376, 397, 427, 431, 433, 445, 457, 458, 464, 522, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 857, 1009, 1010, 1011, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "symlognorm": [177, 182], "linthresh": [177, 182], "10e": [177, 182], "cbar_kw": [177, 182], "seismic_r": [177, 182], "stabilis": 177, "retain": [177, 385, 397, 400, 401, 405, 480, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 681, 682, 800, 857, 956, 980, 1009], "ard_scor": 177, "scores_": [177, 178, 578, 581, 582, 584, 585, 586, 630, 631, 645, 1009, 1019], "brr_score": 177, "cutoff": [177, 926, 977, 1018], "full_data": 177, "input_featur": [177, 374, 385, 413, 417, 428, 429, 431, 433, 435, 450, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 552, 553, 554, 555, 556, 567, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 674, 675, 678, 828, 833, 836, 840, 843, 844, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 1025], "x_plot": [177, 199, 204, 233, 261, 283, 305], "y_plot": [177, 199, 204, 261], "ard_poli": 177, "brr_poli": 177, "y_ard": 177, "y_ard_std": 177, "y_brr": 177, "y_brr_std": 177, "queri": [177, 291, 358, 376, 403, 408, 430, 432, 436, 443, 538, 596, 597, 614, 630, 631, 711, 741, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 967, 970, 983, 987, 1011, 1013, 1014, 1017], "lambda_init": [177, 178, 631, 963, 1019], "intrins": [177, 385, 402, 404, 970, 975, 981, 1021], "622": [177, 217, 225, 527], "plot_ard": [177, 217, 630], "alpha_init": [178, 631, 963, 1019], "yoshihiro": [178, 1019], "uchida": [178, 1019], "nimbus1after2a1sun7show": 178, "1234": [178, 246, 261, 372], "n_order": 178, "vander": 178, "ymean": 178, "ystd": 178, "pink": 178, "_init": 178, "lambda_": [178, 630, 631, 860, 963, 1016], "plot_bayesian_ridge_curvefit": [178, 217], "normalized_weight": 179, "x_offset": 179, "x_center": 179, "x_scale": [179, 854, 870, 977], "uncent": 179, "incorrectli": [179, 404, 405, 539, 545, 547, 719, 725, 967, 1010, 1015, 1017, 1018, 1020, 1025], "lm": 179, "98809919e": 179, "48938813e": 179, "03237920e": 179, "25349312e": 179, "53959628e": 179, "67451144e": 179, "00768662e": 179, "19112072e": 179, "07963978e": 179, "47987268e": 179, "76195467e": 179, "00393284e": 179, "07582983e": 179, "66670169e": 179, "65799352e": 179, "99891212e": 179, "58195950e": 179, "58667835e": 179, "98350372e": 179, "60836363e": 179, "00911944e": 179, "elasticnetelasticnet": 179, "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [179, 217], "huber": [180, 208, 396, 404, 546, 635, 662, 664, 981, 1009, 1011, 1012, 1021], "mks542": 180, "x_outlier": [180, 212, 284, 285, 329], "y_outlier": 180, "epsilon_valu": 180, "intercept_": [180, 188, 190, 207, 234, 328, 335, 339, 374, 385, 468, 469, 470, 535, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 884, 885, 886, 887, 888, 889, 890, 961, 963, 981, 982, 1009, 1016, 1021, 1023], "coef_ridg": 180, "plot_huber_vs_ridg": [180, 217], "logreg": [181, 818], "plot_method": [181, 281, 286, 326, 328, 331, 332, 617], "plot_iris_logist": [181, 217], "underdetermin": 182, "time_step": [182, 842], "anti": [182, 354, 592, 819, 969], "9502547": 182, "8059798": 182, "63394388": 182, "70359377": 182, "62241605": 182, "84077985": 182, "30506066": 182, "63327171": 182, "74495357": 182, "02456369": 182, "random_sampl": [182, 824, 825, 829], "sensor": 182, "monitor": [182, 206, 375, 385, 539, 540, 545, 546, 547, 548, 971, 1012, 1017, 1019, 1021], "superposit": 182, "tempor": [182, 987, 988], "y_pred_lasso": 182, "r2_score_lasso": 182, "480": 182, "y_pred_ard": 182, "r2_score_ard": 182, "elasticnetcv": [182, 385, 632, 638, 646, 647, 648, 649, 667, 963, 1009, 1012, 1020, 1022, 1023], "enet": [182, 271], "y_pred_enet": 182, "r2_score_enet": 182, "nlasso": 182, "meinshausen": 182, "yu": [182, 397, 438, 448, 644, 963, 971, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "246": [182, 975, 1009], "270": [182, 244, 319], "410": [182, 217], "plot_lasso_and_elasticnet": [182, 217], "penalis": [183, 196, 213, 682], "lasso_path": [183, 637, 638, 639, 640, 641, 642, 649, 668, 669, 963, 1009, 1011, 1013, 1022], "enet_path": [183, 385, 633, 1011, 1013, 1022], "alphas_lasso": 183, "coefs_lasso": 183, "alphas_positive_lasso": 183, "coefs_positive_lasso": 183, "alphas_enet": 183, "coefs_enet": 183, "alphas_positive_enet": 183, "coefs_positive_enet": 183, "neg_log_alphas_lasso": 183, "neg_log_alphas_enet": 183, "coef_l": 183, "neg_log_alphas_positive_lasso": 183, "coef_pl": 183, "neg_log_alphas_positive_enet": 183, "coef_p": 183, "318": [183, 217, 307, 308, 436], "plot_lasso_coordinate_descent_path": [183, 217, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670], "sai": [184, 227, 338, 343, 344, 372, 395, 397, 398, 402, 404, 405, 432, 433, 486, 490, 496, 663, 956, 973, 980, 991, 999, 1000, 1002], "x_sp": 184, "sparse_lasso": 184, "dense_lasso": 184, "coeff_diff": 184, "2e": [184, 272], "032": 184, "01e": 184, "xs_sp": 184, "tocsc": 184, "nnz": [184, 344, 367, 685], "764": [184, 707, 967], "65e": 184, "plot_lasso_dense_vs_sparse_data": [184, 217], "lars_path": [185, 381, 517, 523, 525, 528, 529, 531, 532, 534, 636, 637, 638, 639, 640, 641, 642, 649, 650, 651, 669, 670, 671, 672, 963, 1009, 1011, 1014, 1018, 1020], "plot_lasso_lar": [185, 217], "zht2007": 186, "lassolars": [186, 187, 406, 637, 640, 641, 963, 1009, 1016, 1018, 1022, 1023], "2173": [186, 642, 963], "2192": [186, 642, 963], "038076": [186, 187], "050680": [186, 187], "061696": [186, 187], "021872": [186, 187], "044223": [186, 187], "034821": [186, 187], "043401": [186, 187], "002592": [186, 187], "019907": [186, 187], "017646": [186, 187], "001882": [186, 187], "044642": [186, 187], "051474": [186, 187], "026328": [186, 187], "008449": [186, 187], "019163": [186, 187], "074412": [186, 187], "039493": [186, 187], "068332": [186, 187], "092204": [186, 187], "085299": [186, 187], "044451": [186, 187], "005670": [186, 187], "045599": [186, 187], "034194": [186, 187], "032356": [186, 187], "002861": [186, 187], "025930": [186, 187], "089063": [186, 187], "011595": [186, 187], "036656": [186, 187], "012191": [186, 187], "024991": [186, 187], "036038": [186, 187], "034309": [186, 187], "022688": [186, 187], "009362": [186, 187], "005383": [186, 187], "036385": [186, 187], "003935": [186, 187], "015596": [186, 187], "008142": [186, 187], "031988": [186, 187], "046641": [186, 187], "linearlars": 186, "akaik": [186, 187, 248, 642, 781, 956, 963], "lasso_lars_": [186, 187], "zou_et_al_criterion_resc": 186, "noise_vari": [186, 518, 642, 963, 1023], "aic_criterion": 186, "criterion_": [186, 187, 642], "index_alpha_path_a": 186, "alphas_": [186, 187, 633, 636, 637, 639, 640, 641, 642, 647, 649, 668, 669, 1009, 1012, 1022], "lassolarsic__criterion": [186, 187], "bic_criterion": 186, "index_alpha_path_b": 186, "103": [186, 217, 276, 278, 367, 404, 483, 541, 542, 1009], "plot_lasso_lars_": [186, 217], "n_random_featur": 187, "x_random": 187, "random_": 187, "02d": 187, "random_02": 187, "random_05": 187, "random_08": 187, "random_11": 187, "647689": 187, "234137": 187, "469474": 187, "465730": 187, "012831": 187, "412304": 187, "067528": 187, "110923": 187, "601707": 187, "057711": 187, "208864": 187, "196861": 187, "478522": 187, "057122": 187, "324084": 187, "611676": 187, "331263": 187, "185659": 187, "812526": 187, "003533": 187, "alpha_a": 187, "alpha_b": 187, "160030": 187, "5244": 187, "764779": 187, "300343": 187, "5208": 187, "250639": 187, "5212": 187, "341949": 187, "542052": 187, "4928": 187, "018900": 187, "4936": 187, "201520": 187, "034077": 187, "4869": 187, "678359": 187, "4881": [187, 1014], "952289": 187, "189631": 187, "4815": 187, "437362": 187, "4831": [187, 641], "802601": 187, "329616": 187, "4810": 187, "423641": 187, "4830": 187, "880191": 187, "306012": 187, "4803": 187, "573491": 187, "4828": 187, "121351": 187, "124225": 187, "4804": 187, "126502": 187, "4832": 187, "765671": 187, "820705": 187, "621645": 187, "4836": 187, "352124": 187, "750389": 187, "4805": 187, "012521": 187, "4841": 187, "834310": 187, "570655": 187, "290075": 187, "4846": 187, "203174": 187, "550213": 187, "4807": 187, "075887": 187, "4852": 187, "080295": 187, "358295": 187, "4806": 187, "878051": 187, "4855": 187, "973770": 187, "259297": 187, "706026": 187, "4860": 187, "893055": 187, "237703": 187, "4809": [187, 261], "440409": 187, "4866": 187, "718747": 187, "850031": 187, "989341": 187, "4867": 187, "358990": 187, "384338": 187, "4801": 187, "702266": 187, "163224": 187, "296575": 187, "4802": 187, "594754": 187, "4872": 187, "147022": 187, "031555": 187, "236720": 187, "4874": 187, "880298": 187, "618263": 187, "4798": 187, "484109": 187, "4876": 187, "218997": 187, "526599": 187, "4799": 187, "543841": 187, "370039": 187, "586798": 187, "4794": 187, "238744": 187, "4880": 187, "156252": 187, "445978": 187, "4795": 187, "589715": 187, "4885": 187, "598533": 187, "259031": 187, "4796": 187, "966981": 187, "4891": 187, "067109": 187, "032179": 187, "662409": 187, "4894": 187, "853846": 187, "019069": 187, "652739": 187, "4888": 187, "752867": 187, "626286": 187, "817724": 187, "set_xscal": [187, 202, 203], "optimist": [187, 263, 343, 354, 693, 963, 967], "badli": [187, 198, 343, 360, 864, 963, 977], "lassolarscv": [187, 406, 638, 639, 640, 642, 649, 651, 668, 669, 670, 963, 1009, 1016, 1022], "3800": 187, "mse_path_": [187, 633, 637, 639, 641, 647, 649], "cv_alphas_": [187, 637, 641, 1021], "kink": 187, "heavili": [187, 358, 359, 372, 380, 635, 641, 984], "efficaci": 187, "plot_lasso_model_select": [187, 217, 633, 639], "092": [188, 217, 295, 298], "plot_logist": [188, 217], "axes_row": 189, "clf_l1_lr": 189, "clf_l2_lr": 189, "clf_en_lr": 189, "coef_l1_lr": 189, "coef_l2_lr": 189, "coef_en_lr": 189, "sparsity_l1_lr": 189, "sparsity_l2_lr": 189, "sparsity_en_lr": 189, "nl1_ratio": 189, "plot_logistic_l1_l2_spars": [189, 217], "995": 190, "plot_logistic_multinomi": [190, 217], "976": 190, "dupr": [190, 206, 278, 280, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "m4x": [190, 214], "sag": [190, 205, 644, 645, 658, 660, 673, 963, 981, 987, 1014, 1015, 1016, 1018, 1019], "bry": [190, 207], "classes_": [190, 207, 228, 267, 318, 319, 372, 374, 385, 423, 424, 535, 536, 537, 539, 541, 543, 545, 547, 550, 553, 555, 579, 580, 596, 644, 645, 652, 654, 660, 661, 662, 683, 686, 688, 773, 782, 785, 786, 796, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 826, 831, 834, 841, 844, 851, 852, 855, 879, 880, 881, 884, 886, 889, 892, 894, 897, 967, 978, 981, 1010, 1013, 1014, 1016, 1019, 1021], "plot_hyperplan": [190, 207, 234], "204": [190, 217, 975, 980], "looser": 191, "liblinear": [191, 328, 378, 644, 645, 773, 884, 885, 886, 889, 890, 967, 982, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1025], "l1_min_c": [191, 963, 982, 1009], "intercept_sc": [191, 644, 645, 884, 885, 891, 963], "coefs_": [191, 296, 841, 842, 971, 1014], "plot_logistic_path": [191, 217], "jointli": [192, 265, 396, 397, 402, 963], "instant": 192, "wave": [192, 372, 966], "n_task": [192, 963], "n_relevant_featur": 192, "multitasklasso": [192, 638, 646, 649, 963, 1009, 1017, 1020, 1022], "coef_lasso_": 192, "coef_multi_task_lasso_": 192, "spy": 192, "feature_to_plot": 192, "seagreen": 192, "284": [192, 217, 635], "plot_multi_task_lasso_support": [192, 217], "reg_nnl": 193, "y_pred_nnl": 193, "r2_score_nnl": 193, "nnl": [193, 643], "8225220806196526": 193, "reg_ol": 193, "y_pred_ol": 193, "r2_score_ol": 193, "7436926291700356": 193, "low_x": 193, "high_x": 193, "low_i": 193, "high_i": 193, "get_ylim": [193, 300, 301], "847222222222214": 193, "plot_nnl": [193, 217], "23786125": 194, "2548": 194, "diabetes_x": [194, 1000], "diabetes_i": [194, 1000], "diabetes_x_train": [194, 1000], "diabetes_x_test": [194, 1000], "diabetes_y_train": [194, 1000], "diabetes_y_test": [194, 1000], "regr": [194, 398, 540, 542, 551, 632, 633, 653, 817, 842, 885, 887, 890, 982, 1000], "diabetes_y_pr": 194, "plot_ol": [194, 217], "plot_ols_3d": [195, 217], "greatli": [196, 232, 315, 372, 380, 438, 970, 983, 1015, 1023], "276": [196, 217, 258], "plot_ols_ridge_vari": [196, 217], "orthogonalmatchingpursuit": [197, 651, 671, 672, 963, 1009, 1011, 1014, 1017, 1022], "orthogonalmatchingpursuitcv": [197, 650, 1011, 1022], "make_sparse_coded_sign": [197, 517, 523, 1023, 1025], "512": 197, "n_nonzero_coef": [197, 512, 517, 523, 528, 534, 636, 650, 671, 672], "xw": [197, 313, 632, 633, 635, 638, 639, 640, 641, 642, 646, 647, 648, 649, 658, 667, 668, 669, 670, 963], "_0": [197, 671, 963, 967, 982], "distort": [197, 231, 369, 395, 396, 861, 873, 878, 964, 977, 979], "y_noisi": 197, "idx_r": 197, "omp_cv": 197, "plot_omp": [197, 217], "gbrt": [198, 404], "contract": [198, 216, 359, 385, 988], "compani": [198, 216, 397, 991], "policyhold": [198, 216, 963], "vehicl": [198, 216], "driver": [198, 216, 1024], "exposur": [198, 216, 963], "car": 198, "accid": [198, 216], "noll": [198, 216], "salzmann": [198, 216], "wuthrich": [198, 216], "novemb": [198, 216, 369, 1014, 1015, 1017], "2139": [198, 216], "ssrn": [198, 216], "3164764": [198, 216], "ch": [198, 200, 216, 321, 323], "rth": [198, 216], "41214": [198, 216], "idpol": [198, 216], "claimnb": [198, 216], "vehpow": [198, 216], "vehag": [198, 216], "drivag": [198, 216], "bonusmalu": [198, 216], "vehbrand": [198, 216], "vehga": [198, 216], "b12": [198, 216], "1217": 198, "r82": 198, "77000": 198, "75000": 198, "diesel": [198, 216], "r22": 198, "09000": 198, "r72": 198, "84000": 198, "678008": 198, "6114326": 198, "00274": 198, "3317": 198, "r93": 198, "678009": 198, "6114327": 198, "41": [198, 308, 367, 369, 407, 455, 478, 517, 607, 610, 621, 644, 650, 671, 672, 766, 819, 969, 973], "9850": 198, "r11": [198, 216], "678010": 198, "6114328": 198, "1323": 198, "678011": 198, "6114329": 198, "r26": 198, "678012": 198, "6114330": 198, "678013": [198, 216], "10070308464041304": 198, "log_scale_transform": [198, 216], "linear_model_preprocessor": 198, "passthrough_numer": [198, 216], "binned_numer": [198, 216], "2e5": [198, 216], "log_scaled_numer": [198, 216], "onehot_categor": [198, 216], "imbalanc": [198, 261, 265, 267, 344, 383, 395, 401, 689, 694, 772, 783, 787, 821, 967, 969, 975, 987], "simplist": [198, 405], "pertin": 198, "dummyregressor": [198, 216, 537, 967, 1010, 1012, 1013, 1016, 1017, 1019, 1022, 1023], "df_train": [198, 216], "df_test": [198, 216], "regressor__sample_weight": 198, "mean_absolute_error": [198, 200, 216, 967, 1010, 1012], "mean_poisson_devi": [198, 967, 1019], "score_estim": [198, 216], "n_mask": 198, "564": 198, "189": [198, 203, 217, 378, 881, 980], "comonli": 198, "ridge_glm": 198, "strictli": [198, 216, 300, 344, 377, 385, 395, 400, 402, 405, 494, 495, 521, 527, 530, 547, 548, 574, 577, 628, 656, 657, 681, 686, 724, 751, 782, 785, 786, 792, 796, 807, 833, 860, 872, 876, 877, 879, 880, 884, 885, 889, 890, 919, 956, 958, 963, 967, 977, 981, 1010, 1020, 1025], "domain": [198, 306, 385, 387, 401, 621, 707, 708, 709, 783, 784, 789, 790, 791, 963, 988], "560": [198, 503, 504], "186": [198, 297, 330, 341, 378, 773, 967], "595": 198, "223745": 198, "597": 198, "glm": [198, 216, 311, 634, 655, 666, 963, 1009, 1020], "vanilla": [198, 397, 433, 435, 446, 615], "poissonregressor": [198, 216, 311, 314, 634, 666, 963, 1020, 1023, 1024], "poisson_glm": 198, "newton": [198, 216, 297, 596, 634, 644, 645, 655, 666, 841, 842, 963, 1013, 1014, 1016, 1020, 1021, 1022, 1023, 1024], "deep": [198, 374, 385, 404, 411, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 754, 780, 781, 782, 785, 786, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 971, 972, 987, 988, 991, 1014, 1020, 1021, 1023], "implicit": [198, 385, 404, 405, 558, 668, 669, 961, 966, 987, 1018], "concis": [198, 377, 1020, 1022], "poisson_gbrt": 198, "566": 198, "prone": [198, 245, 304, 383, 395], "set_yscal": 198, "5e5": 198, "realiz": [198, 991], "priori": [198, 215, 267, 276, 300, 385, 397, 404, 574, 580, 966, 1025], "wrongli": [198, 330], "gen_even_slic": [198, 381, 924], "_mean_frequency_by_risk_group": 198, "y_true_bin": 198, "y_pred_bin": 198, "idx_sort": 198, "sl": 198, "y_true_seg": 198, "y_pred_seg": 198, "11935": 198, "11933": 198, "11932": 198, "12196": 198, "11931": 198, "portfolio": [198, 216, 961], "riskiest": [198, 216], "safest": [198, 216, 354, 366], "irrespect": [198, 231, 267, 278, 592], "lorenz": [198, 216, 1014], "summar": [198, 249, 265, 267, 345, 372, 374, 387, 404, 507, 644, 680, 692, 693, 963, 964, 967, 973], "gini": [198, 216, 238, 270, 312, 539, 540, 543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895, 956, 975, 983, 1017, 1018, 1025], "lorenz_curv": [198, 216], "ranked_frequ": 198, "ranked_exposur": [198, 216], "cumulated_claim": 198, "cumulated_exposur": 198, "cum_exposur": 198, "cum_claim": [198, 216], "0x7f71c5ec1490": 198, "worst": [198, 306, 369, 397, 433, 694, 714, 715, 768, 769, 772, 775, 776, 809, 967, 991, 1009, 1022], "occurr": [198, 306, 344, 345, 367, 372, 397, 405, 555, 556, 567, 575, 576, 603, 613, 614, 615, 616, 768, 819, 847, 969, 1010, 1015], "circumstanti": 198, "extractor": [198, 297, 360, 367, 385, 405, 489, 956, 1009], "discrim": 198, "profil": [198, 358, 372, 375, 507, 510, 963, 991], "ideal": [198, 200, 216, 255, 258, 265, 267, 268, 354, 371, 372, 376, 377, 380, 383, 385, 395, 711, 741, 956, 966, 981, 982, 988], "meaningfulli": [198, 967], "plot_poisson_regression_non_normal_loss": [198, 217], "monomi": 199, "vandermond": [199, 977], "x_0": [199, 643], "pseudo": [199, 297, 374, 401, 409, 426, 438, 440, 448, 455, 456, 457, 459, 460, 461, 462, 519, 547, 548, 549, 613, 620, 625, 627, 628, 632, 633, 638, 639, 646, 647, 648, 649, 663, 677, 681, 785, 786, 794, 796, 833, 840, 876, 877, 881, 884, 885, 886, 889, 920, 921, 963, 979, 1014, 1023], "consecut": [199, 395, 401, 405, 429, 433, 435, 436, 438, 442, 445, 448, 523, 524, 525, 532, 588, 631, 652, 653, 654, 662, 663, 664, 780, 781, 787, 819, 820, 821, 822, 823, 841, 842, 956, 977, 1002, 1017], "basis_1": 199, "basis_2": 199, "infinit": [199, 243, 261, 358, 407, 432, 608, 609, 763, 780, 902, 904, 905, 959, 966, 977, 982, 1017, 1019, 1022, 1023, 1024], "malt": [199, 1022, 1023, 1024], "londschien": [199, 1022], "prepar": [199, 343, 358, 374, 375, 378, 380, 983, 991, 1017], "set_prop_cycl": 199, "teal": [199, 208, 265], "yellowgreen": [199, 201, 208, 350], "tomato": 199, "unwant": [199, 343], "oscillatori": [199, 977], "danger": [199, 401], "pft": 199, "splt": 199, "bsplines_": [199, 863], "refrain": [199, 372], "dec": [199, 663, 863, 888, 982], "31st": [199, 863], "advis": [199, 354, 370, 372, 397, 405, 423, 632, 638, 640, 646, 648, 658, 673, 959, 963, 969, 971, 982, 1023], "x_plot_ext": 199, "y_plot_ext": 199, "460": [199, 217], "plot_polynomial_interpol": [199, 217, 859, 863], "pareto": 200, "dale": [200, 1022], "mail": [200, 305, 367, 372, 376, 380, 383, 386, 985, 1017, 1018], "ru": 200, "glemaitre58": 200, "y_true_mean": 200, "y_normal": 200, "y_pareto": 200, "huge": [200, 203, 358, 378, 613, 1012], "heavi": [200, 394, 988], "sp_version": [200, 656], "parse_vers": [200, 656], "incompat": [200, 376, 482, 957, 1017, 1018], "older": [200, 371, 376, 1012, 1019, 1021], "recent": [200, 361, 370, 373, 377, 380, 385, 388, 397, 454, 524, 551, 981, 991, 1012, 1021], "interior": [200, 656, 963, 1024], "out_bounds_predict": 200, "bool_": 200, "logical_or": [200, 206, 267, 378], "hit": [200, 378], "wider": [200, 405, 897, 963], "asymmetri": [200, 343], "linger": 200, "linear_regress": [200, 272], "quantile_regress": 200, "y_pred_lr": 200, "y_pred_qr": 200, "805": 200, "486": 200, "670": 200, "cv_results_lr": 200, "cv_results_qr": 200, "test_neg_mean_squared_error": [200, 807], "732": 200, "690": 200, "679": [200, 884], "129": [200, 998, 1009], "605": [200, 217], "plot_quantile_regress": [200, 217], "robustli": [201, 396], "faulti": [201, 1009], "1903908407869": 201, "17236387": 201, "08533159": 201, "ransacregressor": [201, 204, 215, 635, 664, 665, 963, 1012, 1014, 1015, 1016, 1017, 1020, 1022, 1023], "inlier_mask": 201, "inlier_mask_": [201, 657], "outlier_mask": 201, "line_x": [201, 215], "line_i": 201, "line_y_ransac": 201, "estimator_": [201, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 579, 580, 583, 657, 951, 1024], "plot_ransac": [201, 217], "regularis": [202, 410, 459, 461], "eventu": [202, 246, 396, 397, 406, 579, 991], "simpler": [202, 216, 330, 358, 371, 397, 402, 963, 968, 1000, 1014], "stronger": [202, 259, 629, 638, 644, 645, 658, 659, 660, 661, 662, 664, 673], "kornel": [202, 1015], "kielczewski": [202, 1015], "plusnet": 202, "plot_ridge_coeff": [202, 217], "practis": 203, "10x10": 203, "hilbert": [203, 850, 959, 977], "n_alpha": [203, 458, 632, 633, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 659, 661, 667, 668, 669, 670, 1012], "plot_ridge_path": [203, 217], "theilsen": 204, "lessen": [204, 644, 645, 884, 885], "theilsenregressor": [204, 215, 635, 657, 664, 963, 1013, 1021, 1023], "x_error": 204, "y_errors_larg": 204, "x_errors_larg": 204, "deviant": [204, 973], "legend_titl": 204, "nabsolut": 204, "nto": [204, 267], "905": [204, 217, 256], "plot_robust_fit": [204, 217], "asgd": [205, 981], "rob": [205, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1021, 1024], "zinkov": [205, 1009, 1010, 1011, 1013, 1014], "heldout": 205, "squared_hing": [205, 338, 652, 662, 884, 891, 963], "0e4": 205, "yy_": 205, "308": [205, 217, 621], "plot_sgd_comparison": [205, 217], "_test": [206, 302, 374, 1022], "ignore_warn": [206, 302, 1015], "load_mnist": [206, 278], "class_0": [206, 369, 496], "class_1": [206, 369, 496], "mnist_784": [206, 214, 278, 296], "fit_and_scor": 206, "train_scor": [206, 273, 306, 338, 348, 788, 807, 808, 811, 962], "estimator_dict": 206, "flush": 206, "results_df": [206, 258, 306], "group_df": 206, "plot_sgd_early_stop": [206, 217], "ova": [207, 652, 654, 662, 981], "plot_sgd_iri": [207, 217], "ugli": [207, 281, 286, 289, 326], "modified_huber_loss": 208, "darkorchid": 208, "106": [208, 217, 240, 369, 860, 961, 1010], "plot_sgd_loss_funct": [208, 217], "l1_color": 209, "l2_color": 209, "elastic_net_color": 209, "1001": 209, "rho": [209, 402, 663, 963, 981, 1010], "elastic_net": 209, "dpi": [209, 898, 1022], "elastic_net_contour": 209, "l2_contour": 209, "l1_contour": 209, "inlin": [209, 372, 373, 983], "plot_sgd_penalti": [209, 217], "ndenumer": 210, "plot_sgd_separating_hyperplan": [210, 217], "no_weight": 211, "samples_weight": 211, "no_weights_handl": 211, "weights_handl": 211, "077": [211, 217, 278], "plot_sgd_weighted_sampl": [211, 217], "sgdoneclasssvm": [212, 227, 313, 888, 973, 981, 1022, 1024, 1025], "rc": [212, 376], "novel": [212, 284, 329, 354, 395, 956], "abnorm": [212, 227, 284, 329, 367, 478, 549, 830, 973, 1017], "y_pred_train": [212, 329], "y_pred_test": [212, 284, 329], "y_pred_outli": [212, 284, 329], "n_error_train": [212, 329], "n_error_test": [212, 284, 329], "n_error_outli": [212, 284, 329], "clf_sgd": 212, "pipe_sgd": 212, "y_pred_train_sgd": 212, "y_pred_test_sgd": 212, "y_pred_outliers_sgd": 212, "n_error_train_sgd": 212, "n_error_test_sgd": 212, "n_error_outliers_sgd": 212, "z_sgd": 212, "pubu": [212, 231, 284, 329], "darkr": [212, 284, 329], "palevioletr": [212, 284, 329], "b1": [212, 284, 329], "b2": [212, 284, 329], "blueviolet": [212, 284, 329], "plot_sgdocsvm_vs_ocsvm": [212, 217], "newgroups20": 213, "trim": [213, 397, 824, 825], "20newsgroup": [213, 365, 1009], "4500": 213, "130107": [213, 231, 475], "epoch": [213, 385, 522, 652, 653, 654, 662, 663, 664, 841, 842, 981, 1016, 1017, 1022], "5960": 213, "26593496": 213, "43348936": 213, "26362917": 213, "31973683": 213, "37815029": 213, "2928359": 213, "27054655": 213, "62717609": 213, "19522393": 213, "30897646": 213, "34586917": 213, "28207552": 213, "34125758": 213, "29898468": 213, "34279478": 213, "59489497": 213, "38353048": 213, "35278655": 213, "19829832": 213, "14603365": 213, "6440": 213, "36047253": 213, "1268187": 213, "10606655": 213, "17985197": 213, "5395559": 213, "07993421": 213, "06686804": 213, "21443888": 213, "11528972": 213, "2075215": 213, "10914094": 213, "11144673": 213, "13988486": 213, "09684337": 213, "26286057": 213, "11682692": 213, "55800226": 213, "17370318": 213, "11452112": 213, "516": 213, "arthur": [213, 214, 397, 433, 446, 1014, 1015, 1016, 1017, 1018, 1021, 1023], "mensch": [213, 214, 1014, 1015, 1016, 1017], "timeit": [213, 246, 378], "default_tim": [213, 246], "model_param": 213, "this_max_it": 213, "train_tim": [213, 233, 343, 344], "ndataset": [213, 302], "run_tim": [213, 214], "569": [213, 217, 321, 369, 486, 578, 581, 582, 584], "plot_sparse_logistic_regression_20newsgroup": [213, 217], "8253": 214, "l1_plot": 214, "211": [214, 217, 263, 315, 321, 860, 872], "plot_sparse_logistic_regression_mnist": [214, 217], "subpopul": [215, 665, 963], "residual_threshold": [215, 657, 963, 1022], "remedi": 215, "max_subpopul": [215, 665, 1023], "lose": [215, 345, 367, 385, 400, 405, 407, 532, 920, 921, 957, 963, 1002], "florian": [215, 991, 1009, 1013, 1015, 1019], "wilhelm": [215, 1013, 1015, 1019], "indigo": 215, "573": [215, 217, 405], "plot_theilsen": [215, 217], "motor": 216, "parti": [216, 359, 371, 383, 784, 791, 935, 985, 1009, 1020], "liabil": 216, "functool": 216, "mean_tweedie_devi": [216, 967, 1019], "load_mtpl2": 216, "fremtpl2freq": 216, "df_freq": 216, "fremtpl2sev": 216, "41215": 216, "df_sev": 216, "claimamount": 216, "fillna": 216, "unquot": 216, "field": [216, 369, 394, 397, 398, 405, 484, 487, 603, 963, 965, 974, 982, 987, 990, 1002, 1010], "column_nam": 216, "plot_obs_pr": 216, "y_label": 216, "fill_legend": 216, "df_": 216, "tweedie_pow": 216, "d\u00b2": 216, "subset_label": 216, "score_label": [216, 264], "est_freq": 216, "est_sev": 216, "unstack": [216, 261], "fremtpl2": 216, "unreason": [216, 401], "exception": 216, "200000": 216, "column_tran": [216, 398], "purepremium": 216, "indirectli": 216, "avgclaimamount": 216, "fmax": 216, "option_context": 216, "max_column": 216, "414": [216, 263, 274, 398, 711, 741, 860, 872, 967], "424": 216, "463": 216, "27000": 216, "303": [216, 621], "404": 216, "333333": 216, "r25": 216, "1981": [216, 963], "14156": 216, "142857": 216, "4792": 216, "1456": 216, "10403": 216, "928571": 216, "10834": 216, "17474": 216, "193548": 216, "225806": 216, "r73": 216, "3986": 216, "12860": [216, 1018], "5417": 216, "seemingli": [216, 354, 383], "169504": 216, "6237": 216, "upon": [216, 224, 291, 367, 372, 383, 385, 391, 547, 548, 613, 616, 657, 774, 780, 781, 824, 825, 956, 963, 983, 993, 1002, 1023], "glm_freq": 216, "0201": 216, "0219": 216, "1379": 216, "1378": 216, "2441": 216, "2246": 216, "surprisingli": [216, 367, 405], "bonu": [216, 372, 997, 1002], "malu": 216, "younger": 216, "infti": [216, 407, 605, 963, 977, 1016], "gammaregressor": [216, 311, 314, 666, 963, 1020, 1023, 1024], "mask_test": 216, "glm_sev": 216, "400000e": 216, "700000e": 216, "756746e": 216, "744042e": 216, "801770e": 216, "030677e": 216, "dummy_sev": 216, "000000e": 216, "756687e": 216, "744497e": 216, "803882e": 216, "033764e": 216, "avgclaim": 216, "nbclaim": 216, "1951": 216, "1940": 216, "1978": [216, 963], "apriori": 216, "regardless": [216, 259, 260, 261, 359, 372, 397, 521, 644, 690, 701, 967, 979, 1017, 1024, 1025], "glm_pure_premium": 216, "999": [216, 258, 376, 404, 703, 841, 842], "scores_product_model": 216, "scores_glm_pure_premium": 216, "expand_frame_repr": 216, "690000e": 216, "420000e": 216, "669930e": 216, "617050e": 216, "640770e": 216, "640880e": 216, "7000": 216, "695740e": 216, "683980e": 216, "682880e": 216, "692270e": 216, "8000": [216, 261, 262], "046010e": 216, "040530e": 216, "037600e": 216, "045390e": 216, "9000": 216, "387580e": 216, "385000e": 216, "382120e": 216, "387830e": 216, "9900": 216, "015716e": 216, "015414e": 216, "015347e": 216, "015587e": 216, "9990": 216, "914573e": 216, "914370e": 216, "914538e": 216, "914387e": 216, "904751e": 216, "904556e": 216, "904747e": 216, "904558e": 216, "730119e": 216, "722128e": 216, "739865e": 216, "731249e": 216, "295040e": 216, "212197e": 216, "295505e": 216, "213056e": 216, "917618e": 216, "299546e": 216, "916555e": 216, "313276e": 216, "951751e": 216, "325198e": 216, "riski": 216, "operation": [216, 991], "develop": [216, 256, 258, 310, 343, 358, 361, 367, 371, 372, 378, 383, 385, 386, 387, 391, 394, 396, 399, 400, 404, 405, 419, 479, 782, 963, 970, 983, 985, 987, 988, 990, 991, 1000, 1009, 1017, 1018, 1019, 1022, 1024, 1025], "ranked_pure_premium": 216, "cumulated_claim_amount": 216, "cumulated_sampl": 216, "y_pred_product": 216, "y_pred_tot": 216, "ordered_sampl": 216, "plot_tweedie_regression_insurance_claim": [216, 217], "826": 217, "auto_examples_linear_model": 217, "md": [219, 220, 221, 222, 376, 674, 678, 680, 1003, 1004, 1009, 1021, 1024], "seek": [219, 221, 223, 371, 372, 383, 386, 494, 495, 964, 994, 996], "ticker": [219, 221, 224, 278], "s_point": 219, "s_color": 219, "make_s_curv": [219, 224], "plot_3d": 219, "points_color": 219, "subplot_kw": [219, 282], "set_major_loc": [219, 283], "multipleloc": [219, 283], "add_2d_scatt": 219, "set_major_formatt": [219, 221, 224, 278, 283], "nullformatt": [219, 221, 224, 278], "lle": [219, 220, 221, 223, 516, 675, 679, 964, 1021], "thought": [219, 283, 385, 397, 432, 964, 968], "analys": [219, 352, 402, 785, 786, 964, 987, 991], "lle_standard": 219, "s_standard": 219, "lle_ltsa": 219, "ltsa": [219, 220, 221, 675, 679, 964], "s_ltsa": 219, "lle_hessian": 219, "hessian": [219, 220, 221, 404, 634, 644, 645, 655, 666, 675, 679, 963, 971, 1003, 1004, 1024], "s_hessian": 219, "lle_mod": 219, "s_mod": 219, "lle_method": 219, "tangent": [219, 675, 679, 965, 1003, 1004], "eigenmap": [219, 675, 677, 679, 681, 1003, 1004, 1010], "isometr": [219, 674, 676, 677, 678, 964], "geodes": [219, 674, 964], "s_isomap": 219, "md_scale": 219, "normalized_stress": [219, 220, 221, 222, 676, 680, 964, 1024], "s_scale": 219, "laplacian": [219, 364, 394, 426, 438, 448, 606, 625, 629, 677, 681, 750, 751, 759, 880, 963, 964, 980, 1004, 1010, 1015], "s_spectral": 219, "t_sne": [219, 1017], "s_t_sne": 219, "036": [219, 225, 378, 458], "plot_compare_method": [219, 225], "offsetbox": 220, "plot_embed": 220, "425": [220, 265, 274, 601], "shown_imag": 220, "someth": [220, 343, 372, 374, 375, 376, 380, 405, 967, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "4e": 220, "imagebox": 220, "annotationbbox": 220, "offsetimag": 220, "neighborhoodcomponentsanalysi": [220, 286, 287, 288, 970, 1018, 1023], "random_project": [220, 231, 361, 979, 984, 1010, 1015, 1025], "sparserandomproject": [220, 231, 876, 979, 1010, 1015, 1023, 1025], "embeed": 220, "n_iter_without_progress": [220, 678, 1014, 1015], "nca": [220, 286, 287, 288, 833, 970], "plot_lle_digit": [220, 225], "pole": 221, "thin": [221, 606], "earth": [221, 344, 749, 987], "058": [221, 256, 369], "251": [221, 369], "sphere_data": 221, "trans_data": 221, "2g": [221, 224, 683, 1020], "252": [221, 369, 520, 860, 872], "257": [221, 256], "se": [221, 369, 388], "585": [221, 225, 1000], "plot_manifold_spher": [221, 225], "euclidean_dist": [222, 231, 374, 436, 443, 674, 747, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 1009, 1014, 1017, 1018], "finfo": [222, 457, 458, 464, 592, 636, 637, 640, 641, 642, 668, 669, 726, 1024], "x_true": 222, "dissimilar": [222, 385, 394, 438, 676, 680, 964, 1015, 1025], "embedding_": [222, 385, 674, 675, 676, 677, 678], "nmd": 222, "npo": 222, "226": [222, 225, 397, 408, 430], "plot_md": [222, 225], "sr_point": 223, "sr_color": 223, "ambient": 223, "text2d": 223, "unrol": 223, "unnecessarili": [223, 1016, 1019], "clump": 223, "sr_lle": 223, "sr_err": 223, "locally_linear_embed": [223, 964], "sr_tsne": 223, "stretch": [223, 247], "byproduct": 223, "sh_point": 223, "sh_color": 223, "topologi": [223, 224], "sh_lle": 223, "sh_err": 223, "sh_tsne": 223, "plot_swissrol": [223, 225], "tendenc": [224, 963, 964, 966, 969, 972], "clearer": [224, 982], "distil": 224, "pub": [224, 822, 879], "misread": 224, "narin": [224, 1016, 1017], "kokhlikyan": [224, 1016, 1017], "plot_t_sne_perplex": [224, 225], "auto_examples_manifold": 225, "cope": [227, 360, 367, 963], "multimod": 227, "inli": [227, 963, 973], "unimod": [227, 460], "localoutlierfactor": [227, 236, 284, 285, 314, 385, 549, 888, 973, 1016, 1017, 1019, 1023, 1024, 1025], "modal": [227, 460, 923], "hypercub": [227, 501], "decent": [227, 257, 367, 969], "handpick": 227, "absenc": [227, 261, 385, 698, 847, 966, 967], "negative_linestyl": 227, "outliers_fract": 227, "n_inlier": 227, "anomaly_algorithm": 227, "blobs_param": 227, "plot_anomaly_comparison": [227, 241], "transfus": 228, "1464": 228, "donat": 228, "confust": 228, "cm_displai": 228, "y_score": [228, 265, 267, 385, 468, 469, 470, 693, 706, 711, 712, 724, 725, 741, 767, 773, 774, 777, 782, 785, 786, 796, 844, 967, 1015, 1023, 1025], "pos_label": [228, 236, 385, 424, 425, 684, 686, 688, 692, 693, 695, 712, 714, 715, 723, 767, 768, 769, 772, 774, 851, 868, 967, 1017, 1021, 1023], "roc_displai": 228, "previs": 228, "precision_recall_curv": [228, 265, 686, 692, 693, 712, 967, 1010, 1011, 1015, 1022, 1023, 1025], "pr_displai": 228, "easlii": 228, "428": [228, 241], "plot_display_object_visu": [228, 241], "summaris": [229, 311], "composit": [229, 311, 361, 364, 401, 644, 773, 957, 963, 976, 1004, 1010], "num_proc": [229, 311], "cat_proc": [229, 311], "feat1": [229, 311, 405], "feat3": [229, 311, 405], "feat0": [229, 311], "feat2": [229, 311, 405], "plot_estimator_represent": [229, 241], "isotonicregress": [230, 958, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1021, 1023, 1024, 1025], "ir": [230, 402, 576, 711, 741, 819, 823, 965, 967], "out_of_bound": [230, 621], "y_": [230, 244, 248, 249, 290, 374, 400, 402, 623, 634, 655, 666, 714, 715, 723, 768, 769, 772, 963, 967, 1015], "linearregressionlinearregress": 230, "x_thresholds_": [230, 621, 1021], "y_thresholds_": [230, 621, 1021], "198": [230, 233, 241, 1009], "plot_isotonic_regress": [230, 241], "lemma": [231, 364, 396, 520, 527, 535, 876, 877, 878, 961, 1004, 1012], "johnson_lindenstrauss_min_dim": [231, 979, 1010], "achliopta": [231, 877, 878, 979], "_compon": [231, 522], "geq": [231, 395, 402, 404, 963, 967, 977, 981, 982], "_sampl": [231, 402, 524, 526, 533], "admiss": [231, 359], "eps_rang": 231, "min_n_compon": 231, "nn_sampl": [231, 270], "semilogi": 231, "nn_compon": [231, 232], "100k": 231, "n_components_rang": 231, "rp": 231, "projected_data": 231, "n_byte": 231, "projected_dist": 231, "min_dist": 231, "max_dist": 231, "hexbin": 231, "gridsiz": 231, "262": [231, 1009], "298": [231, 975], "939": [231, 654, 997], "063": [231, 256, 258, 423], "271": 231, "jl": [231, 877], "436": [231, 344], "687": [231, 241, 979], "plot_johnson_lindenstrauss_bound": [231, 241], "rbfsampler": [232, 625, 626, 628, 959, 993, 1013, 1023, 1024], "mont": [232, 407, 597, 627, 628, 959, 972], "fourier": [232, 396, 624, 625, 626, 627, 628, 743, 744, 959], "acceler": [232, 315, 358, 383, 397, 454, 678, 882, 964, 987, 991, 1018, 1022, 1024], "data_train": [232, 259, 343], "targets_train": 232, "data_test": [232, 259, 343], "targets_test": 232, "kernel_svm": 232, "linear_svm": 232, "feature_map_fouri": 232, "feature_map_nystroem": [232, 625], "fourier_approx_svm": 232, "feature_map": [232, 300], "nystroem_approx_svm": 232, "kernel_svm_tim": 232, "kernel_svm_scor": 232, "linear_svm_tim": 232, "linear_svm_scor": 232, "fourier_scor": 232, "nystroem_scor": 232, "fourier_tim": 232, "nystroem_tim": 232, "feature_map__n_compon": 232, "timescal": 232, "ly": [232, 832, 834, 835, 836, 1013], "flat_grid": 232, "lv_ep": 232, "tab10": [232, 248], "707": [232, 241, 860, 872], "plot_kernel_approxim": [232, 241], "krr": [233, 407, 629, 960], "insensit": [233, 629, 662, 664, 773, 885, 960, 981, 982, 1009], "fifth": [233, 960, 993], "kr": [233, 258, 1023], "svr_fit": 233, "kr_fit": 233, "sv_ratio": 233, "support_": [233, 337, 455, 460, 579, 580, 588, 886, 887, 888, 889, 890, 982], "y_svr": 233, "svr_predict": 233, "y_kr": 233, "kr_predict": 233, "09999999999999999": [233, 266, 330], "737": [233, 510], "525": [233, 425, 614, 957], "340": [233, 318, 344], "118": [233, 349, 353, 576], "sv_ind": 233, "arithmet": [233, 378, 380, 397, 537, 634, 655, 666, 690, 703, 721, 722, 742, 778, 967, 1017], "test_tim": [233, 343], "train_test_s": 233, "learningcurvedisplai": [233, 260, 315, 962, 1024], "negate_scor": [233, 788], "std_display_styl": [233, 260, 788], "get_legend_handles_label": [233, 260, 265], "plot_kernel_ridge_regress": [233, 241], "theta_c": [234, 509], "reject": [234, 385, 386, 509, 657, 712, 904, 905, 963, 967, 1017], "likewis": [234, 397, 509], "surround": [234, 372, 830, 973], "cca": [234, 400, 469, 471, 1013, 1017, 1018, 1019, 1021, 1023], "onevsrestclassifi": [234, 265, 267, 276, 395, 812, 814, 884, 993, 1010, 1011, 1013, 1015, 1016, 1022, 1023], "metaclassifi": 234, "min_x": 234, "max_x": 234, "plot_subfigur": 234, "min_i": 234, "zero_class": 234, "one_class": 234, "nfor": 234, "218": [234, 241, 369, 457, 701, 771], "plot_multilabel": [234, 241], "extratreesregressor": [235, 404, 543, 551, 552, 894, 895, 1012, 1015, 1017, 1018, 1019, 1022, 1023, 1024, 1025], "n_face": 235, "face_id": 235, "n_pixel": [235, 256], "nn": [235, 405, 681, 1000], "y_test_predict": 235, "true_fac": 235, "completed_fac": 235, "plot_multioutput_face_complet": [235, 241], "benchmark": [236, 278, 312, 344, 345, 358, 365, 367, 372, 383, 388, 390, 395, 454, 501, 882], "iforest": 236, "pharuj": 236, "rajborirug": 236, "ra": 236, "kmitl": 236, "ac": [236, 516, 650, 671, 672, 963, 980, 1002], "th": [236, 313, 352, 384, 397, 401, 404, 412, 427, 431, 437, 439, 445, 449, 458, 543, 544, 545, 546, 547, 548, 550, 551, 552, 579, 580, 618, 634, 635, 655, 657, 666, 682, 704, 765, 803, 865, 909, 957, 963, 967, 971, 974, 981, 982, 1024], "preprocess_dataset": 236, "fetch_kddcup99": [236, 367, 1016, 1017, 1018, 1021, 1022], "labelbinar": [236, 267, 385, 726, 813, 848, 857, 868, 968, 993, 1012, 1013, 1014, 1018, 1023], "dataset_nam": [236, 278], "smtp": [236, 367, 478], "sa": [236, 367, 478], "percent10": [236, 478], "lb": [236, 851, 978], "forestcov": 236, "glass": [236, 367], "wdbc": [236, 369], "cardiotocographi": 236, "tablewar": 236, "x_mal": 236, "y_mal": 236, "x_ben": 236, "y_ben": 236, "x_mal2": 236, "y_mal2": 236, "compute_predict": 236, "negative_outlier_factor_": [236, 285, 830, 973], "datasets_nam": 236, "models_nam": 236, "ceil": [236, 543, 544, 545, 546, 549, 550, 551, 552, 580, 657, 785, 786, 892, 893, 894, 895, 981], "model_idx": 236, "plot_chance_level": [236, 265, 267, 268, 686, 688, 1025], "chance_level_kw": [236, 686, 688, 1025], "plot_outlier_detection_bench": [236, 241], "recalcul": [237, 239, 397, 1006, 1009], "mlpregressormlpregressor": 237, "tree_disp": 237, "mlp_disp": 237, "0x7f71c7ed64f0": 237, "plot_partial_dependence_visualization_api": [237, 241], "set_config": [238, 240, 307, 311, 358, 359, 398, 454, 612, 1018, 1020, 1023, 1025], "deactiv": [238, 366, 370, 373, 378, 388, 398, 785, 786, 1023], "standard_scal": 238, "polynomialfeaturespolynomialfeatur": 238, "pcapca": 238, "svcsvc": [238, 239, 256, 258, 312], "numeric_preprocessor": 238, "imputation_mean": 238, "categorical_preprocessor": [238, 306], "imputation_const": 238, "onehot": [238, 301, 302, 398, 849, 977], "gender": [238, 857, 977], "classifier__n_estim": 238, "classifier__max_featur": 238, "classifier__max_depth": 238, "classifier__criterion": 238, "093": [238, 241, 457, 1014], "plot_pipeline_displai": [238, 241], "svc_disp": [239, 310, 1006], "rfc_disp": [239, 310, 1006], "plot_roc_curve_visualization_api": [239, 241], "transform_output": [240, 307, 454, 882, 1024], "slep018": [240, 374, 1024], "x_test_scal": 240, "894264": 240, "798301": 240, "271411": 240, "327605": 240, "244466": 240, "086944": 240, "327407": 240, "459074": 240, "660797": 240, "462234": 240, "576989": 240, "159419": 240, "933197": 240, "427329": 240, "414810": 240, "039497": 240, "275851": 240, "scaler2": 240, "x_test_np": 240, "x_test_df": 240, "feature_names_in_": [240, 307, 313, 385, 417, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 613, 614, 615, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 780, 781, 782, 785, 786, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 1022, 1023, 1024, 1025], "num_pip": 240, "num_col": 240, "7621951219512195": 240, "log_reg": [240, 314], "config_context": [240, 358, 359, 393, 612, 882, 1016, 1022, 1025], "reset": [240, 354, 380, 520, 662, 663, 664, 824, 825, 853, 854, 864, 1011], "133660": 240, "438059": 240, "894273": 240, "506893": 240, "000619": 240, "182778": 240, "671": [240, 979], "548540": 240, "461032": 240, "817": 240, "487001": 240, "13366001": 240, "4380594": 240, "89427284": 240, "50689261": 240, "00061876": 240, "18277786": 240, "54853974": 240, "46103177": 240, "48700054": 240, "plot_set_output": [240, 241], "143": [241, 369, 457, 458, 979, 1009, 1010], "auto_examples_miscellan": 241, "bayesiangaussianmixtur": [243, 244, 249, 781, 1015, 1017, 1018, 1022, 1023], "weight_concentration_prior_typ": [243, 249, 780, 966, 1015], "dirichlet_distribut": [243, 780, 966, 1015], "dirichlet_process": [243, 249, 780, 966, 1015], "weight_concentration_prior": [243, 249, 780, 966], "finit": [243, 249, 358, 367, 385, 454, 524, 537, 568, 592, 595, 596, 597, 644, 713, 763, 770, 780, 805, 882, 902, 904, 905, 963, 966, 967, 991, 993, 1000, 1016, 1017, 1021, 1023, 1024], "covar": [243, 244, 249], "eig_val": 243, "eig_vec": 243, "unit_eig_vec": 243, "arctan2": [243, 245, 248], "56b4e9": 243, "plot_titl": 243, "weights_": [243, 780, 781, 1023], "covariances_": [243, 244, 245, 248, 249, 780, 781, 1016], "get_xaxi": [243, 288, 300], "set_tick_param": 243, "007": [243, 266, 278, 344], "labelleft": 243, "0072b2": 243, "f0e442": 243, "d55e00": 243, "mean_precision_prior": [243, 249, 780], "nprior": 243, "gamma_0": [243, 249], "reg_covar": [243, 780, 781], "init_param": [243, 246, 249, 780, 781], "concentrations_prior": 243, "plot_concentration_prior": [243, 250], "_base": [244, 374], "color_it": [244, 248, 249], "dp": [244, 249], "shouldn": [244, 249, 372], "em": [244, 245, 249, 429, 433, 445, 522, 780, 781, 966, 1023], "dpgmm": [244, 249, 1009, 1013, 1015], "217": [244, 250, 344, 521, 527], "plot_gmm": [244, 250], "ronweiss": 245, "make_ellips": 245, "datalim": 245, "skf": [245, 401, 801], "train_index": [245, 321, 401, 783, 784, 787, 789, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803], "test_index": [245, 321, 401, 783, 784, 787, 789, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803], "cov_typ": 245, "means_init": [245, 246, 781], "y_train_pr": 245, "train_accuraci": 245, "y_test_pr": 245, "test_accuraci": [245, 259], "plot_gmm_covari": [245, 250], "random_from_data": [246, 780, 781, 966], "diamond": 246, "colour": [246, 369, 405, 573, 968], "walsh": [246, 1021, 1023], "extmath": [246, 343, 381, 439, 1015, 1016, 1019, 1024], "row_norm": 246, "_samples_gener": 246, "timer": [246, 378], "x_squared_norm": [246, 446], "get_initial_mean": 246, "times_init": 246, "relative_tim": 246, "ini": 246, "init_tim": 246, "2fx": 246, "638": [246, 250, 378], "plot_gmm_init": [246, 250], "shifted_gaussian": 247, "stretched_gaussian": 247, "score_sampl": [247, 283, 284, 285, 291, 385, 403, 455, 518, 527, 549, 663, 780, 781, 782, 785, 786, 796, 829, 830, 840, 844, 888, 973, 1012, 1017, 1019, 1021], "plot_gmm_pdf": [247, 250], "component_1": 248, "component_2": 248, "best_parameters_": 248, "gmm_bic_scor": 248, "callabl": [248, 262, 385, 401, 405, 406, 408, 409, 427, 429, 430, 431, 432, 433, 435, 436, 438, 443, 445, 446, 450, 451, 452, 453, 517, 519, 521, 523, 525, 531, 532, 543, 544, 545, 546, 547, 548, 550, 551, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 596, 597, 606, 614, 620, 625, 629, 645, 652, 657, 659, 661, 674, 677, 678, 682, 697, 705, 717, 727, 756, 759, 763, 764, 765, 766, 775, 776, 782, 785, 786, 788, 796, 806, 807, 808, 809, 811, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 848, 857, 879, 880, 886, 887, 888, 889, 890, 928, 934, 937, 951, 956, 967, 977, 1009, 1013, 1016, 1017, 1018, 1019, 1021, 1023, 1025], "0x7f71e0ad3e50": 248, "gaussianmixturegaussianmixtur": 248, "param_n_compon": 248, "param_covariance_typ": 248, "829429": 248, "1084": 248, "038689": 248, "1114": 248, "517272": 248, "1148": 248, "512281": 248, "1179": 248, "977890": 248, "catplot": 248, "hue": [248, 258, 281, 305, 369], "eigenvalu": [248, 394, 397, 399, 438, 448, 455, 456, 457, 458, 459, 460, 461, 462, 521, 527, 535, 659, 674, 675, 677, 679, 681, 850, 964, 977, 1011, 1015, 1018, 1019, 1020, 1021], "273": [248, 250], "plot_gmm_select": [248, 250], "loos": [249, 255, 982, 1017], "liberti": 249, "judgment": [249, 967], "panel": [249, 283, 300, 403, 987], "primarili": [249, 263, 372, 385, 393, 397, 991, 1018, 1019], "covariance_prior": [249, 780], "472": [249, 250], "plot_gmm_sin": [249, 250], "auto_examples_mixtur": 250, "mislabel": [252, 404, 969], "imbal": [252, 261, 401, 693, 714, 715, 723, 768, 769, 772, 773, 967], "misclassifi": [252, 343, 982], "life": [252, 380, 964], "set_printopt": 252, "titles_opt": 252, "206": [252, 274, 301, 308], "plot_confusion_matrix": [252, 274, 310, 1019, 1020, 1021, 1022], "shufflesplit": [253, 260, 338, 401, 784, 790, 792, 802, 810, 997, 1009, 1010, 1012, 1014, 1015], "groupshufflesplit": [253, 401, 997, 1015], "groupkfold": [253, 263, 401, 580, 782, 785, 786, 787, 788, 789, 790, 791, 796, 800, 805, 806, 807, 808, 811, 997, 1015, 1022], "stratifiedshufflesplit": [253, 330, 401, 997, 1009, 1010, 1015, 1016, 1022], "stratifiedgroupkfold": [253, 1022], "1338": 253, "cmap_data": 253, "cmap_cv": 253, "coolwarm": [253, 327], "n_point": [253, 824, 825], "percentiles_class": 253, "perc": 253, "group_prior": 253, "visualize_group": 253, "yticklabel": [253, 343], "ngroup": 253, "nclass": 253, "plot_cv_indic": [253, 274], "tr": [253, 369, 376, 397, 399, 455, 456, 457, 458, 459, 460, 461, 462, 822], "this_cv": 253, "173": [253, 274, 378, 570], "plot_cv_predict": [254, 274], "fnr": [255, 684, 712], "det_curv": [255, 684, 767, 774, 967, 1021, 1022], "commonli": [255, 365, 385, 397, 398, 407, 600, 743, 744, 780, 813, 856, 964, 965, 967, 968, 970, 1025], "detcurvedisplai": [255, 313, 712, 1021, 1022], "ax_roc": 255, "ax_det": 255, "feedback": [255, 371, 372, 373, 386, 987, 1017], "194": [255, 274, 297], "plot_det": [255, 274], "n_imag": 256, "print_datafram": 256, "filtered_cv_result": 256, "mean_precis": 256, "std_precis": 256, "mean_recal": 256, "std_recal": 256, "mean_test_precis": [256, 262], "std_test_precis": 256, "mean_test_recal": 256, "std_test_recal": 256, "03f": 256, "refit_strategi": 256, "best_index": [256, 262], "precision_threshold": 256, "high_precision_cv_result": 256, "rank_test_recal": 256, "rank_test_precis": [256, 262], "best_recall_std": 256, "best_recal": 256, "best_recall_threshold": 256, "high_recall_cv_result": 256, "fastest_top_recall_high_precision_index": 256, "idxmin": 256, "854": 256, "061": 256, "039": [256, 736, 766, 967], "780": 256, "889": [256, 423], "074": [256, 294, 298], "073": [256, 457, 458], "695": 256, "065": [256, 378], "066": [256, 634], "028": 256, "744": [256, 278], "618": 256, "005794": 256, "877206": 256, "069196": 256, "0x7f71c7c34e50": 256, "plot_grid_search_digit": [256, 274], "minimis": [257, 397, 401, 644, 645, 983], "219": 257, "york": [257, 773, 780, 957, 967, 979], "usa": [257, 367, 881, 957, 964, 979, 980], "best_index_": [257, 262, 782, 785, 786, 796], "wenhao": [257, 1017, 1018], "zhang": [257, 397, 428, 650, 665, 671, 672, 675, 679, 743, 744, 963, 964, 965, 969, 981, 1013, 1014, 1016, 1017, 1018, 1019, 1021], "wenhaoz": 257, "ucla": [257, 963], "lower_bound": 257, "best_score_idx": 257, "best_low_complex": 257, "fewest": [257, 613], "candidate_idx": 257, "param_reduce_dim__n_compon": 257, "364": [257, 274, 457, 458, 1010], "plot_grid_search_refit_cal": [257, 274], "moon": [258, 295, 302, 343, 344, 508], "moder": [258, 372, 407, 440, 973], "352": [258, 378], "repeatedstratifiedkfold": [258, 401, 797, 801, 1016], "repetit": [258, 377, 401, 797, 798, 975, 1023], "rank_test_scor": [258, 266, 782, 796, 1015], "rename_axi": 258, "9400": 258, "079297": 258, "9300": 258, "077846": 258, "3_poli": 258, "9044": [258, 1016], "098776": 258, "2_poli": 258, "6852": 258, "169106": 258, "certainti": [258, 374, 727, 967], "repreat": 258, "model_scor": [258, 276], "regex": [258, 345, 450, 452], "_test_scor": [258, 458, 580, 1022], "lineplot": 258, "labelpad": 258, "882561": 258, "783392": 258, "351390": 258, "746492": 258, "298688": 258, "355440": 258, "nadeau": [258, 1017], "bengio": [258, 841, 842, 956, 980], "framework": [258, 358, 374, 383, 385, 391, 397, 623, 674, 780, 963, 964, 971, 985, 988, 991, 1009, 1015], "diebold": 258, "mariano": 258, "proven": [258, 961, 965, 991], "replic": [258, 371, 374], "cdot": [258, 394, 397, 402, 403, 407, 600, 601, 605, 608, 609, 850, 959, 961, 967, 971, 977], "sum_": [258, 267, 338, 394, 395, 397, 402, 403, 404, 524, 526, 533, 682, 740, 961, 963, 964, 967, 969, 971, 972, 974, 975, 977, 981, 982, 983], "ij": [258, 288, 394, 397, 402, 524, 526, 533, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 963, 964, 967, 969, 972, 982], "corrected_std": 258, "crossvalid": [258, 272], "corrected_var": 258, "ddof": [258, 864, 875], "compute_corrected_ttest": 258, "t_stat": 258, "p_val": 258, "model_1_scor": 258, "model_2_scor": 258, "ncorrect": 258, "uncorrect": [258, 581, 584], "t_stat_uncorrect": 258, "p_val_uncorrect": 258, "convent": [258, 361, 372, 374, 375, 376, 378, 385, 415, 416, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 455, 456, 457, 458, 459, 460, 461, 462, 494, 495, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 533, 549, 552, 555, 556, 567, 568, 569, 574, 575, 577, 613, 614, 615, 616, 663, 674, 675, 676, 677, 704, 780, 781, 812, 813, 828, 830, 832, 836, 848, 856, 859, 860, 862, 876, 877, 888, 915, 916, 967, 994, 1009, 1016, 1017, 1020, 1022, 1023, 1025], "benavoli": 258, "colleagu": 258, "conjug": [258, 438, 448, 658, 660, 673, 681, 963], "overlin": [258, 394], "t_post": 258, "ppf": 258, "infin": [258, 527, 668, 669, 698, 805, 891, 903, 970], "minu": [258, 745, 967], "better_prob": 258, "cdf": 258, "773": [258, 343, 634, 822], "essenti": [258, 315, 370, 374, 397, 401, 402, 495, 959, 967, 970, 988, 991, 1017], "rope": 258, "rope_interv": 258, "rope_prob": 258, "x_rope": 258, "uncertain": [258, 319, 371], "credibl": 258, "cred_interv": 258, "cred_int_df": 258, "000977": 258, "019023": 258, "005422": 258, "025422": 258, "016445": 258, "036445": 258, "bonferroni": 258, "n_comparison": 258, "pairwise_t_test": 258, "model_i": 258, "model_k": 258, "model_i_scor": 258, "model_k_scor": 258, "pairwise_comp_df": 258, "model_1": 258, "model_2": 258, "657": 258, "565": 258, "851": 258, "pairwise_bayesian": 258, "worse_prob": 258, "pairwise_bayesian_df": 258, "018": [258, 458], "882": 258, "dietterich": [258, 814, 968], "1998": [258, 367, 369, 402, 404, 541, 542, 814, 819, 850, 968, 969, 971, 977, 981], "bouckaert": 258, "frank": [258, 815, 968, 1014, 1018, 1019], "pacif": 258, "asia": [258, 977], "confer": [258, 367, 397, 402, 408, 425, 430, 436, 497, 521, 549, 682, 694, 711, 741, 840, 841, 842, 967, 973, 979, 983], "discoveri": [258, 367, 378, 381, 397, 404, 406, 408, 430, 497, 541, 542, 549, 578, 581, 582, 584, 585, 586, 592, 706, 725, 768, 967, 979, 991, 1023, 1024], "corani": 258, "dem\u0161ar": 258, "zaffalon": 258, "accompani": [258, 1017], "1995": [258, 369, 395, 404, 539, 540, 814, 881, 968], "144": [258, 378, 1009], "649": [258, 274], "plot_grid_search_stat": [258, 274], "loader": [259, 322, 343, 365, 366, 367, 484, 485, 494, 987, 988, 1002, 1009, 1014, 1016, 1017, 1020], "fetch20newsgroup": 259, "857": [259, 344], "complementnb": [259, 343, 819, 820, 822, 823, 969, 1017, 1021, 1022, 1024], "tfidfvectorizertfidfvector": 259, "complementnbcomplementnb": 259, "vect__": 259, "clf__": 259, "parameter_grid": 259, "vect__max_df": 259, "vect__min_df": 259, "vect__ngram_rang": [259, 1002], "unigram": [259, 367, 405, 574, 575, 577, 1016], "bigram": [259, 405, 574, 575, 577, 1002], "vect__norm": 259, "clf__alpha": [259, 1002], "exhaust": [259, 310, 311, 312, 313, 314, 315, 358, 369, 377, 384, 392, 397, 782, 785, 786, 796, 874, 875, 877, 963, 1002, 1004], "parallelis": [259, 454, 882, 1016], "random_search": [259, 266], "177": [259, 378], "best_paramet": 259, "get_param": [259, 375, 385, 407, 411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 780, 781, 782, 785, 786, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 956, 1019, 1020, 1021, 1023, 1024], "709": 259, "ambigu": [259, 377, 405, 558, 698, 921, 970, 1018, 1020, 1022], "shorten_param": 259, "xanchor": 259, "yanchor": 259, "autom": [259, 376, 388, 678, 956, 963, 964, 967, 987, 991], "parallel_coordin": 259, "understood": [259, 372, 397, 999], "column_result": 259, "transform_func": 259, "fromkei": [259, 899], "ngram_rang": [259, 322, 405, 574, 575, 577], "color_continuous_scal": 259, "viridis_r": 259, "slide": [259, 630, 963, 986, 987], "intersect": [259, 327, 394, 397, 723], "undo": [259, 854, 1013], "254": [259, 274], "plot_grid_search_text_feature_extract": [259, 274], "depict": [260, 404, 966], "score_typ": [260, 788], "ax_idx": 260, "resort": [260, 367, 541, 1019], "learning_curv": [260, 315, 788, 962, 1012, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1024], "return_tim": [260, 808, 1019], "test_scores_nb": 260, "fit_times_nb": 260, "score_times_nb": 260, "test_scores_svm": 260, "fit_times_svm": 260, "score_times_svm": 260, "score_tim": [260, 401, 807, 808], "rapidli": [260, 982, 991, 996], "inflect": 260, "602": [260, 274], "plot_learning_curv": [260, 274], "class_likelihood_ratio": [261, 967, 1024], "medicin": [261, 698, 967], "medic": [261, 401, 698, 963, 991], "truli": [261, 265, 360, 698, 967], "odd": [261, 404, 500, 698, 967, 1016, 1017], "suppos": [261, 318, 358, 359, 374, 378, 399, 404, 405, 406, 543, 547, 550, 644, 645, 652, 654, 660, 661, 662, 727, 830, 884, 886, 889, 892, 894, 910, 971, 1018, 1020], "physiolog": [261, 369, 1000], "hopefulli": [261, 380, 1009], "indirect": [261, 373, 385], "bio": 261, "diagnos": [261, 369, 380, 387, 398], "diagnosi": [261, 369, 831], "pos_lr": 261, "neg_lr": 261, "raise_warn": [261, 698, 953], "positive_likelihood_ratio": [261, 698], "negative_likelihood_ratio": [261, 698], "extract_scor": 261, "test_positive_likelihood_ratio": 261, "test_negative_likelihood_ratio": 261, "718894": 261, "724619": 261, "321091": 261, "054054": 261, "dummyclassifi": [261, 538, 967, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "108843": 261, "986989": 261, "268147": 261, "034278": 261, "compat": [261, 278, 311, 366, 375, 381, 382, 383, 385, 388, 405, 449, 455, 494, 552, 563, 571, 572, 575, 589, 600, 601, 604, 605, 606, 608, 609, 618, 619, 620, 644, 645, 659, 661, 759, 763, 783, 784, 787, 789, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 828, 829, 849, 857, 858, 896, 897, 900, 930, 964, 967, 970, 972, 987, 988, 991, 1004, 1009, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "diagnost": [261, 365, 385, 486, 698, 806, 807, 967, 987, 988, 1004], "most_frequ": [261, 537, 613, 616, 834, 957, 967, 1017, 1019, 1021], "undefin": [261, 385, 698, 714, 723, 726, 768, 936, 967, 1017, 1021, 1025], "373333": 261, "5557": 261, "235430": 261, "stand": [261, 345, 376, 383, 402, 517, 523, 531, 532, 582, 595, 664, 691, 703, 721, 722, 742, 771, 773, 778, 966, 967, 973], "lr_base": 261, "pos_lr_bas": 261, "pos_lr_base_std": 261, "neg_lr_bas": 261, "neg_lr_base_std": 261, "plot_indic": 261, "scoring_on_bootstrap": 261, "n_bootstrap": [261, 1010], "results_for_preval": 261, "bootstrap_indic": 261, "default_rng": 261, "2039": 261, "507943": 261, "113516": 261, "207667": 261, "009778": 261, "3419": 261, "445329": 261, "125197": 261, "198280": 261, "008907": 261, "422287": 261, "123864": 261, "192630": 261, "006340": 261, "6196": [261, 1014], "410507": 261, "163975": 261, "193761": 261, "005864": 261, "7578": [261, 1016], "335398": 261, "175224": 261, "189120": 261, "005820": 261, "8963": 261, "198284": 261, "238943": 261, "185496": 261, "005020": 261, "band": [261, 302, 977], "370": [261, 274], "plot_likelihood_ratio": [261, 274], "scorer_nam": [262, 782, 796], "predefin": [262, 795, 956, 970, 997, 1024], "maskedarrai": [262, 1015], "param_min_samples_split": 262, "sample_score_mean": 262, "sample_score_std": 262, "std_": [262, 1014], "rank_test_": 262, "best_scor": 262, "mean_test_": 262, "plot_multi_metric_evalu": [262, 274], "cawlei": [263, 967], "talbot": 263, "mach": [263, 395, 401, 579, 580], "2079": 263, "2107": 263, "007581": 263, "007833": 263, "num_trial": 263, "x_iri": [263, 1001], "y_iri": [263, 1001], "p_grid": 263, "non_nested_scor": 263, "nested_scor": 263, "leaveoneout": [263, 401, 997], "leaveonegroupout": [263, 401, 783, 790, 791, 997, 1015], "inner_cv": 263, "outer_cv": 263, "non_nest": 263, "score_differ": 263, "non_nested_scores_lin": 263, "nested_lin": 263, "difference_plot": 263, "plot_nested_cross_validation_iri": [263, 274], "permutation_test_scor": [264, 401, 1009, 1016, 1021], "plant": [264, 267, 268, 365, 967, 1004], "uncorrel": [264, 368, 514, 520, 527, 967, 1000], "n_uncorrelated_featur": 264, "x_rand": 264, "undergo": 264, "score_iri": 264, "perm_scores_iri": 264, "pvalue_iri": 264, "n_permut": [264, 401, 809], "score_rand": 264, "perm_scores_rand": 264, "pvalue_rand": 264, "evid": [264, 343, 380, 397, 401, 402, 404, 630, 780, 966], "ndata": 264, "destroi": [264, 405, 778, 853, 977], "ojala": [264, 401, 809], "garriga": [264, 401, 809], "plot_permutation_tests_for_classif": [264, 274], "t_p": 265, "plu": [265, 369, 377, 665, 815, 818, 968, 981], "f_p": 265, "f_n": 265, "denomin": [265, 405, 410, 461, 576, 690, 742, 961], "stairstep": 265, "ap": [265, 693, 694, 967], "sum_n": [265, 693, 967], "r_n": [265, 693, 967], "p_n": [265, 693, 967], "nth": [265, 693, 967], "r_k": 265, "p_k": [265, 967], "trapezoid": [265, 692, 693, 967], "binar": [265, 267, 268, 364, 366, 396, 398, 739, 819, 848, 849, 851, 855, 857, 868, 967, 969, 993, 1004, 1023, 1025], "average_precision_scor": [265, 692, 694, 727, 767, 773, 967, 1009, 1012, 1016, 1017, 1023, 1025], "differenti": [265, 404, 407, 545, 546, 605, 608], "mt19937": [265, 270, 1020], "0x7f71fde7ee40": 265, "precisionrecalldisplai": [265, 313, 767, 769, 772, 1019, 1022, 1025], "got": [265, 354, 377, 537, 635, 651, 1022, 1024], "label_binar": [265, 267, 851, 1013], "average_precis": [265, 686, 693, 727, 967], "prevalence_pos_label": [265, 686], "setup": [265, 267, 358, 370, 374, 378, 380, 970, 994], "f_score": 265, "extens": [265, 267, 283, 358, 359, 366, 367, 370, 373, 375, 376, 380, 381, 383, 391, 397, 402, 482, 489, 520, 726, 915, 923, 964, 966, 967, 986, 987, 991, 1009, 1015, 1022, 1023, 1025], "plot_precision_recal": [265, 274], "pose": [266, 963, 1001], "deem": [266, 267, 520, 975, 1022], "993": 266, "01761326452827255": 266, "14458295175799263": 266, "981": [266, 369, 967], "2610311314285183": 266, "003999234857448686": 266, "980": 266, "01672701940764589": 266, "5720620992012775": 266, "996": 266, "6666666666666666": 266, "2222222222222222": 266, "1111111111111111": 266, "n_top": 266, "param_dist": [266, 270, 312], "n_iter_search": 266, "plot_randomized_search": [266, 274], "unambigu": [267, 968, 1015], "notion": [267, 344, 360, 383, 397, 402, 404, 963, 967], "scheme": [267, 283, 306, 367, 385, 397, 401, 403, 405, 552, 576, 644, 645, 691, 795, 851, 852, 855, 857, 861, 865, 868, 873, 884, 889, 956, 963, 977, 981, 1009, 1017, 1020, 1021], "harder": [267, 268, 304, 367, 371, 374, 380, 397, 501, 547, 548, 990], "bulk": [267, 408, 430], "scrutin": 267, "y_onehot_test": 267, "class_id": [267, 268], "class_of_interest": 267, "nvirginica": 267, "versicolor": [267, 268, 490], "tp_c": 267, "fn_c": 267, "fp_c": 267, "tn_c": 267, "briefli": [267, 371, 384, 404, 956, 1019], "nreceiv": 267, "micro_roc_auc_ovr": 267, "mcclish": [267, 773], "deci": 267, "1989": [267, 621, 773, 841, 842, 963, 970], "jul": 267, "fpr_grid": 267, "mean_tpr": [267, 268], "interp": [267, 268, 330], "macro_roc_auc_ovr": 267, "deeppink": 267, "aqua": 267, "role": [267, 358, 371, 383, 402, 985], "pair_list": 267, "pair_scor": 267, "label_a": 267, "label_b": 267, "a_mask": 267, "b_mask": 267, "ab_mask": 267, "a_tru": 267, "b_true": 267, "idx_a": 267, "idx_b": 267, "fpr_a": 267, "tpr_a": 267, "fpr_b": 267, "tpr_b": 267, "macro_roc_auc_ovo": 267, "ovo_tpr": 267, "pool": [267, 383, 431, 621, 936, 988, 1020], "plot_roc": [267, 274], "mean_fpr": 268, "viz": [268, 379], "interp_tpr": 268, "mean_auc": 268, "std_auc": 268, "std_tpr": 268, "tprs_upper": 268, "tprs_lower": 268, "199": [268, 274, 633, 736, 982], "plot_roc_crossv": [268, 274], "halvinggridsearchcv": [269, 270, 312, 565, 786, 956, 1021, 1023, 1024], "1e4": [269, 645, 665, 878, 979], "gsh": 269, "gsh_time": 269, "gs_time": 269, "make_heatmap": 269, "is_sh": 269, "make_cbar": 269, "param_c": [269, 782], "param_gamma": [269, 782, 796], "sh": [269, 376, 380, 956], "scores_matrix": 269, "pivot_t": 269, "aggfunc": 269, "0e": [269, 535, 536], "get_xticklabel": 269, "rotation_mod": 269, "cbar_ax": 269, "plot_successive_halving_heatmap": [269, 274], "rsh": [270, 312], "0x7f71c58b9940": 270, "_distn_infrastructur": 270, "rv_discrete_frozen": 270, "0x7f71e0f38100": 270, "0x7f71c69270a0": 270, "halvingrandomsearchcvhalvingrandomsearchcv": 270, "params_str": 270, "drop_dupl": 270, "n_resources_": [270, 785, 786, 956], "nn_candid": 270, "n_candidates_": [270, 785, 786, 956], "n_iterations_": [270, 785, 786], "multialign": 270, "plot_successive_halving_iter": [270, 274], "n_samples_train": [271, 886, 887, 888, 889, 890], "n_samples_test": [271, 886, 887, 888, 889, 890, 970, 977], "train_error": 271, "test_error": 271, "i_alpha_optim": 271, "alpha_optim": 271, "0002652948464431897": 271, "plot_train_error_vs_test_error": [271, 274], "nonlinear": [272, 313, 630, 674, 675, 679, 682, 850, 963, 964, 972, 977], "true_fun": 272, "polynomial_featur": 272, "plot_underfitting_overfit": [272, 274], "validation_curv": [273, 338, 962, 1016, 1017, 1018, 1021], "subset_mask": 273, "isin": 273, "param_rang": [273, 338, 811, 962], "train_scores_mean": 273, "train_scores_std": 273, "test_scores_mean": 273, "test_scores_std": 273, "648": [273, 274], "plot_validation_curv": [273, 274], "auto_examples_model_select": 274, "yeast": 276, "2417": 276, "jaccard": [276, 394, 436, 443, 685, 689, 705, 714, 719, 723, 763, 764, 765, 779, 970, 1017, 1018], "arrang": [276, 618, 815, 816, 817, 818, 967], "adam": [276, 295, 841, 842, 971, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024], "kleczewski": [276, 1016, 1017], "classifierchain": [276, 385, 816, 818, 1016, 1021, 1024], "jaccard_scor": [276, 689, 714, 719, 779, 967, 1018, 1021], "40597": 276, "wrapper": [276, 278, 378, 381, 401, 407, 530, 606, 657, 884, 983, 987, 1013, 1021], "base_lr": [276, 815], "y_pred_ovr": 276, "ovr_jaccard_scor": 276, "y_pred_chain": 276, "chain_jaccard_scor": 276, "y_pred_ensembl": 276, "ensemble_jaccard_scor": 276, "x_po": 276, "510": [276, 277, 1000], "plot_classifier_chain_yeast": [276, 277], "auto_examples_multioutput": 277, "kneighborstransform": [278, 280, 310, 836, 970, 1019, 1023, 1024], "nmslib": 278, "pynndesc": 278, "pip": [278, 310, 311, 312, 313, 314, 315, 359, 370, 372, 376, 378, 388, 983], "pynndescenttransform": 278, "csr_matrix": [278, 311, 426, 430, 438, 482, 520, 530, 543, 544, 545, 546, 549, 550, 551, 552, 574, 579, 580, 700, 810, 859, 886, 887, 889, 890, 892, 893, 894, 895, 968, 977, 981, 982, 983, 1024], "transformermixin": [278, 374, 385, 451, 1017, 1024, 1025], "nmslibtransform": 278, "sw": 278, "n_samples_fit_": [278, 826, 827, 828, 830, 832, 834, 835, 836], "cosinesimil": 278, "nmslib_": 278, "adddatapointbatch": 278, "createindex": 278, "n_samples_transform": [278, 828, 836], "thread": [278, 311, 314, 370, 383, 385, 397, 404, 816, 817, 933, 934, 935, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1024, 1025], "num_thread": 278, "knnquerybatch": 278, "mnist_10000": 278, "mnist_20000": 278, "20_000": 278, "tsne_param": 278, "barnes_hut": [278, 678, 1016, 1017], "parallel_batch_queri": 278, "msg": [278, 951], "transformer_nam": 278, "longest": 278, "fit_dur": 278, "transform_dur": 278, "315": [278, 369], "823": 278, "884": 278, "769": 278, "733": 278, "448": 278, "759": 278, "numba": [278, 988], "cold": 278, "nearestneighbor": [278, 314, 388, 397, 408, 430, 432, 434, 447, 674, 675, 679, 826, 827, 828, 830, 834, 835, 836, 970, 1009, 1013, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "i_ax": 278, "int32": [278, 307, 372, 385, 429, 433, 435, 437, 439, 886, 887, 888, 889, 890, 932, 982, 1018, 1024, 1025], "828": 278, "955": [278, 401, 640], "994": 278, "brute": [278, 383, 392, 401, 408, 430, 432, 436, 443, 618, 619, 674, 675, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 974, 1004, 1013, 1017, 1021, 1024, 1025], "spent": [278, 306, 373, 378, 808, 1024], "approximate_nearest_neighbor": [278, 292], "slow": [280, 300, 343, 358, 366, 370, 372, 402, 405, 433, 685, 858, 859, 863, 886, 889, 921, 964, 970, 988, 1001, 1016], "temporarydirectori": [280, 310], "n_neighbors_list": 280, "graph_model": 280, "classifier_model": 280, "sklearn_graph_cache_": 280, "tmpdir": [280, 310], "full_model": 280, "classifier__n_neighbor": 280, "grid_model": 280, "057": [280, 292, 378, 523], "plot_caching_nearest_neighbor": [280, 292], "cmap_light": [281, 286, 289], "cmap_bold": [281, 286, 289], "darkblu": [281, 289], "neighbour": [281, 432, 448, 678, 972], "537": [281, 292], "plot_classif": [281, 292], "79269019073225": 282, "kerneldens": [282, 283, 291, 403, 1011, 1017, 1018, 1022, 1023, 1024], "new_data": [282, 374], "4x11": 282, "real_data": 282, "set_clim": 282, "559": [282, 292, 602], "plot_digits_kde_sampl": [282, 292], "block": [283, 300, 314, 367, 369, 372, 377, 380, 385, 394, 397, 400, 403, 438, 439, 448, 459, 465, 466, 474, 475, 497, 499, 681, 935, 970, 972], "wildli": [283, 966], "kd": [283, 397, 403, 970, 1017, 1018, 1019], "jakevdp": [283, 291], "aaaaff": [283, 286], "tophat": [283, 403, 824, 825, 829], "log_den": 283, "x_src": 283, "format_func": 283, "ih": 283, "epanechnikov": [283, 403, 824, 825, 829], "funcformatt": 283, "nullloc": 283, "true_den": 283, "650": [283, 292, 395], "plot_kde_1d": [283, 292], "NOT": [284, 369, 375, 792, 824, 825], "plot_lof_novelty_detect": [284, 292], "x_inlier": 285, "n_error": 285, "x_score": [285, 468, 469, 470, 471], "legend_handl": 285, "handlerpathcollect": 285, "update_legend_marker_s": 285, "update_from": 285, "set_siz": 285, "radiu": [285, 330, 369, 397, 428, 436, 674, 749, 766, 824, 825, 826, 827, 828, 832, 834, 835, 836, 838, 970, 1011, 1013, 1023], "handler_map": 285, "update_func": 285, "plot_lof_outlier_detect": [285, 292], "ffaaaa": 286, "aaffaa": 286, "00ff00": 286, "531": [286, 292], "plot_nca_classif": [286, 292], "neighborhoodcomponentanalysi": 287, "dim_reduction_method": 287, "acc_knn": 287, "x_embed": [287, 288, 678, 682, 833, 970], "ntest": 287, "742": [287, 292], "plot_nca_dim_reduct": [287, 292], "logsumexp": [288, 1016], "get_yaxi": [288, 300], "link_thickness_i": 288, "diff_embed": 288, "dist_embed": 288, "einsum": 288, "exp_dist_embed": 288, "relate_point": 288, "pt_i": 288, "pt_j": 288, "plot_nca_illustr": [288, 292], "8133333333333334": 289, "nearestcentroid": [289, 343, 968, 970, 1009, 1013, 1016, 1021, 1024], "shrink_threshold": [289, 831, 970, 1009, 1021], "plot_nearest_centroid": [289, 292], "barycent": [290, 1009], "plot_regress": [290, 292], "geospati": [291, 403], "haversin": [291, 403, 685, 747, 749, 970, 1018, 1021], "latitud": [291, 300, 367, 484, 685, 749], "longitud": [291, 300, 367, 484, 685, 749], "xtrain": 291, "ytrain": 291, "radian": [291, 685, 749], "land_mask": 291, "ball_tre": [291, 408, 430, 436, 443, 674, 675, 826, 827, 828, 829, 830, 832, 834, 835, 836, 970, 1009], "ocean": 291, "plot_species_kd": [291, 292], "auto_examples_neighbor": 292, "combat": [294, 402], "encourag": [294, 330, 371, 372, 383, 982, 987], "lesser": [294, 385, 428, 527, 963], "curvatur": 294, "complic": [294, 378, 407, 680, 970], "plot_mlp_alpha": [294, 298], "bfg": [295, 596, 597, 634, 635, 644, 655, 658, 660, 666, 673, 970, 971, 1024], "980000": 295, "096950": 295, "momentum": [295, 841, 842, 971], "049530": 295, "nesterov": [295, 841, 842, 971], "049540": 295, "360000": 295, "978444": 295, "860000": 295, "503452": 295, "504185": 295, "045311": 295, "956038": 295, "243802": 295, "992766": 295, "041297": 295, "993879": 295, "042898": 295, "638843": 295, "855465": 295, "912632": 295, "290584": 295, "909293": 295, "318387": 295, "991653": 295, "045934": 295, "840000": 295, "601052": 295, "940000": 295, "157334": 295, "154453": 295, "500000": 295, "692470": 295, "689143": 295, "689751": 295, "150527": 295, "850000": 295, "341523": 295, "336188": 295, "335919": 295, "689015": 295, "830000": 295, "512595": 295, "513034": 295, "930000": 295, "170087": 295, "schedul": [295, 359, 662, 663, 664, 841, 842, 935, 981, 991, 1016], "nesterovs_momentum": [295, 841, 842], "invscal": [295, 662, 663, 664, 841, 842, 981], "plot_arg": 295, "plot_on_dataset": 295, "nlearn": 295, "loss_": [295, 545, 841, 842, 971, 1023], "loss_curve_": [295, 841, 842], "data_set": 295, "get_lin": 295, "plot_mlp_training_curv": [295, 298], "28x28": 296, "784": 296, "throw": [296, 381, 903, 1013, 1016, 1017, 1018, 1019, 1023], "infrastructur": [296, 985, 987, 988], "44139186": 296, "19174891": 296, "13983521": 296, "11378556": 296, "09443967": 296, "07846529": 296, "06506307": 296, "05534985": 296, "986429": 296, "953061": 296, "668": [296, 298, 312, 316], "plot_mnist_filt": [296, 298], "greyscal": 297, "bernoulli": [297, 405, 406, 819, 820, 821, 822, 823, 840, 841, 842, 847, 963, 977, 989, 1004, 1009], "bernoullirbm": [297, 841, 842, 972, 977, 1011, 1012, 1021, 1023], "yann": [297, 1009, 1011], "dauphin": [297, 1011], "gabriel": [297, 1017, 1018, 1019, 1022, 1023], "synnaev": 297, "convolv": 297, "minmax_scal": [297, 300, 854, 1014, 1017], "nudge_dataset": 297, "1px": 297, "direction_vector": 297, "apply_along_axi": 297, "feature_rang": [297, 854, 870, 977, 1011, 1021], "cg": [297, 644, 645, 658, 660, 673, 963, 1013, 1014, 1016, 1020, 1022, 1023], "rbm": [297, 840, 841, 842, 972], "rbm_features_classifi": 297, "6000": [297, 613], "raw_pixel_classifi": 297, "181": [297, 378], "207": [297, 1009], "154": [297, 637, 968], "806": [297, 298, 635], "plot_rbm_logistic_classif": [297, 298], "640": [298, 395, 476, 492, 493, 569, 570, 956], "auto_examples_neural_network": 298, "incom": [300, 367, 426], "unscal": [300, 305, 963, 967, 1017, 1023], "notabl": [300, 366, 385, 482, 713, 857, 964, 966, 970, 1013, 1016, 1023], "unterthin": [300, 1012, 1013, 1014], "medinc": [300, 312, 367], "houseag": [300, 312, 367], "averoom": [300, 312, 367], "room": [300, 367, 377, 397, 990], "avebedrm": [300, 367], "bedroom": [300, 367], "aveoccup": [300, 312, 367], "features_idx": 300, "quantile_rang": [300, 862, 874, 1015], "yeo": [300, 304, 860, 872, 977, 1017, 1023], "cox": [300, 304, 860, 872, 977, 1017], "plasma": 300, "plasma_r": 300, "create_ax": 300, "bottom_h": 300, "left_h": 300, "rect_scatt": 300, "rect_histx": 300, "rect_histi": 300, "ax_scatt": 300, "ax_histx": 300, "ax_histi": 300, "ax_scatter_zoom": 300, "ax_histx_zoom": 300, "ax_histy_zoom": 300, "rect_colorbar": 300, "ax_colorbar": 300, "plot_distribut": 300, "hist_nbin": 300, "x0_label": 300, "x1_label": 300, "hist_x1": 300, "hist_x0": 300, "aesthet": [300, 983, 1014], "layout": [300, 383, 884, 885, 886, 889, 905, 982, 1012, 1014], "tick_bottom": 300, "tick_left": 300, "outward": 300, "ec": [300, 516], "make_plot": 300, "item_idx": 300, "ax_zoom_out": 300, "ax_zoom_in": 300, "zoom_in_percentile_rang": 300, "cutoffs_x0": 300, "cutoffs_x1": 300, "non_outliers_mask": 300, "colorbarbas": 300, "OR": [300, 397, 408, 430, 1020], "indistinguish": 300, "quadrant": 300, "plot_all_sc": [300, 308, 853, 854, 856, 860, 861, 862, 864, 869, 870, 871, 872, 873, 874, 875], "straightforward": [301, 371, 402, 991], "anywher": 301, "qinhanmin2005": 301, "sina": [301, 1022], "rnd": 301, "enc": [301, 303, 314, 857, 858, 977], "x_bin": 301, "line_bin": 301, "plot_discret": [301, 308], "get_nam": 302, "broader": [302, 963], "logisticregression__c": 302, "linearsvc__c": 302, "kbinsdiscretizer__n_bin": 302, "gradientboostingclassifier__learning_r": 302, "svc__c": 302, "cm_piyg": 302, "piyg": 302, "b30065": 302, "178000": 302, "est_idx": 302, "plot_discretization_classif": [302, 308], "centers_0": 303, "centers_1": 303, "x_list": 303, "grid_encod": 303, "stripe": 303, "plot_discretization_strategi": [303, 308], "powertransform": [304, 861, 872, 957, 977, 1017, 1020, 1023, 1025], "johnwon": 304, "weibul": 304, "bimod": [304, 403], "ineffect": [304, 977, 1017, 1018], "eric": [304, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "ericchang2017": 304, "northwestern": [304, 644], "contact": [304, 383, 987], "font_siz": 304, "304": [304, 369], "bc": 304, "qt": [304, 861], "x_lognorm": [304, 977], "x_chisq": 304, "chisquar": 304, "x_weibul": 304, "x_gaussian": 304, "x_uniform": 304, "loc_a": 304, "loc_b": 304, "105": 304, "x_a": 304, "x_b": 304, "x_bimod": 304, "d81b60": 304, "0188ff": 304, "ffc107": 304, "b7a2ff": 304, "2ec5ac": 304, "figaspect": 304, "axes_idx": 304, "axes_list": 304, "x_trans_bc": 304, "lmbda_bc": 304, "lambdas_": [304, 860, 1022], "x_trans_yj": 304, "lmbda_yj": 304, "x_trans_qt": 304, "ax_origin": 304, "ax_bc": 304, "ax_yj": 304, "ax_qt": 304, "x_tran": [304, 374, 393, 428, 450, 860, 865, 872, 977], "meth_nam": 304, "lmbda": 304, "054": [304, 308], "plot_map_data_to_norm": [304, 308], "involv": [305, 310, 330, 358, 360, 367, 372, 376, 385, 386, 400, 407, 685, 812, 813, 964, 968, 970, 974, 982, 987, 991, 1000, 1017], "kneighbor": [305, 314, 826, 827, 828, 830, 832, 970, 1013, 1018, 1022, 1023, 1024, 1025], "obatin": 305, "tyler": [305, 1016, 1022, 1023, 1024], "lanigan": [305, 1016], "tylerlanigan": 305, "sebastian": [305, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "raschka": [305, 1014, 1015, 1016, 1017, 1018, 1021], "sebastianraschka": 305, "alcohol": [305, 369], "malic": [305, 369], "acid": [305, 369], "scaled_x_train": 305, "x_plot_scal": 305, "fit_and_plot_model": 305, "scaled_pca": 305, "x_train_transform": [305, 354, 401], "x_train_std_transform": 305, "first_pca_compon": 305, "target_class": 305, "repercuss": 305, "logisticregressioncv": [305, 385, 644, 963, 968, 1013, 1014, 1015, 1017, 1018, 1019, 1023, 1024], "unscaled_clf": 305, "scaled_clf": 305, "y_pred_scal": 305, "y_proba_sc": 305, "0824": 305, "vastli": 305, "475": [305, 308], "plot_scaling_import": [305, 308], "targetencod": [306, 307, 857, 858, 977, 1025], "review": [306, 358, 367, 374, 375, 376, 377, 378, 383, 386, 401, 402, 521, 527, 967, 977, 994], "wine_review": 306, "42074": 306, "countri": [306, 964], "provinc": 306, "region_1": 306, "region_2": 306, "wineri": 306, "tremend": [306, 404], "variet": 306, "hail": 306, "martha": 306, "vineyard": 306, "235": 306, "napa": 306, "vallei": 306, "cabernet": 306, "sauvignon": 306, "heitz": 306, "spain": 306, "ripe": 306, "aroma": 306, "blackberri": 306, "cassi": 306, "carodorum": 306, "selecci\u00f3n": 306, "reserva": 306, "northern": 306, "toro": 306, "tinta": 306, "bodega": 306, "carmen": 306, "rodr\u00edguez": 306, "watson": [306, 398, 987], "honor": 306, "late": [306, 360], "harvest": 306, "knight": 306, "sonoma": 306, "blanc": 306, "macaulei": 306, "oak": 306, "reserv": [306, 547, 548, 991, 993], "oregon": 306, "willamett": 306, "pinot": 306, "noir": 306, "ponzi": 306, "franc": [306, 749], "b\u00e9gude": 306, "aft": [306, 1012], "br\u00fblade": 306, "provenc": 306, "bandol": 306, "one_hot": 306, "max_categori": [306, 314, 857, 858, 977, 1023, 1025], "target_typ": [306, 865, 908, 930], "evaluate_model_and_stor": 306, "rmse_test_scor": 306, "rmse_train_scor": 306, "rmse_test_mean": 306, "rmse_test_std": 306, "rmse_train_mean": 306, "rmse_train_std": 306, "nuniqu": 306, "14810": 306, "1236": 306, "632": 306, "455": 306, "workaround": [306, 372, 782, 796], "high_cardinality_featur": 306, "low_cardinality_featur": 306, "mixed_encoded_preprocessor": 306, "high_cardin": 306, "low_cardin": 306, "mixed_pip": 306, "passthroughpassthroughhigh_cardinalityindex": 306, "targetencodertargetencod": 306, "low_cardinalityindex": 306, "mixed_target": 306, "name_to_color": 306, "rmse_": 306, "_mean": 306, "_std": 306, "explod": 306, "unrel": [306, 359, 377, 380, 405, 501], "429": [306, 308], "plot_target_encod": [306, 308], "targetenocod": 307, "50_000": [307, 344], "n_categori": [307, 820, 858, 977], "kbin": [307, 315], "x_inform": 307, "permuted_categori": 307, "x_shuffl": 307, "catastroph": [307, 748, 988], "x_near_unique_categori": 307, "assembl": [307, 345, 844], "near_uniqu": 307, "raw_model": 307, "0049896314219657345": 307, "00457762158159003": 307, "model_with_cv": 307, "8000184677460285": 307, "7927845601690948": 307, "coefs_cv": 307, "target_encod": 307, "x_train_no_cv_encod": 307, "x_test_no_cv_encod": 307, "model_no_cv": 307, "858486250088675": 307, "6338211367110066": 307, "coefs_no_cv": 307, "plot_target_encoder_cross_v": [307, 308], "590": 308, "auto_examples_preprocess": 308, "announc": [310, 311, 312, 313, 314, 315, 376], "bug": [310, 311, 312, 313, 314, 315, 361, 370, 374, 375, 377, 380, 383, 385, 985, 988, 1009, 1010, 1011, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "latest": [310, 311, 312, 313, 314, 315, 370, 372, 376, 378, 380, 386, 983, 985, 1023], "upgrad": [310, 311, 312, 313, 314, 315, 388, 988, 1009, 1014, 1017], "conda": [310, 311, 312, 313, 314, 315, 359, 372, 373, 375, 376, 378, 380, 388, 390, 983], "forg": [310, 311, 312, 313, 314, 315, 359, 373, 375, 376, 380, 388], "plot_roc_curv": [310, 1019, 1021], "plot_precision_recall_curv": [310, 1019, 1021, 1022], "stackingclassifi": [310, 354, 404, 554, 1019, 1020, 1021, 1022, 1023, 1024], "_class": [310, 967], "9473684210526315": 310, "radiusneighborstransform": [310, 828, 970, 1019, 1021, 1023, 1024], "sklearn_cache_": 310, "isomap__n_neighbor": 310, "nan_euclidean_dist": [310, 747, 957, 1019], "ccp_alpha": [310, 348, 543, 544, 545, 546, 550, 551, 892, 893, 894, 895, 983, 1019], "tree_": [310, 348, 352, 829, 892, 893, 894, 895], "node_count": [310, 348, 352, 892, 893, 894, 895], "check_estim": [310, 374, 385, 916, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024], "pytest": [310, 359, 370, 372, 374, 375, 388, 390, 915, 916, 1019, 1022], "estimator_check": [310, 374, 385, 1016, 1017, 1019, 1020, 1023, 1024, 1025], "parametrize_with_check": [310, 374, 915, 1019, 1020], "test_sklearn_compatible_estim": [310, 916], "ovo": [310, 773, 812, 886, 889, 967, 968, 982], "preval": [310, 385, 686, 698, 967], "decision_function_shap": [310, 339, 886, 889, 982, 1014, 1015, 1018, 1019], "9906666666666667": 310, "plot_release_highlights_0_22_0": [310, 316], "await": 311, "lam": [311, 312, 1020], "35776189065725783": 311, "42425183539869404": 311, "openmp": [311, 370, 375, 383, 385, 397, 404, 935, 1020, 1022, 1025], "6394815436638175": 311, "10k": [311, 433], "monotoinc": 311, "gbdt_cst": 311, "999791942438998": 311, "693": [311, 316, 967], "plot_release_highlights_0_23_0": [311, 316], "art": [312, 378, 635, 678, 987, 991], "footprint": [312, 315, 358, 360, 397, 402, 541, 542, 549, 1011, 1014, 1015, 1020, 1021, 1024], "yarowski": [312, 881, 980], "selftrainingclassifi": [312, 321, 322, 323, 980, 1021], "random_unlabeled_point": [312, 879, 880, 881], "self_training_model": [312, 881], "base_estim": [312, 374, 395, 423, 539, 540, 541, 542, 657, 815, 818, 881, 956, 963, 1020, 1022, 1023, 1024, 1025], "selftrainingclassifierselftrainingclassifi": 312, "7331": [312, 1016], "linear_baselin": 312, "7137": 312, "decisiontreeregressordecisiontreeregressor": 312, "effort": [312, 372, 378, 987, 991, 1020, 1022], "plot_release_highlights_0_24_0": [312, 316], "l2_regular": [313, 404, 547, 548], "max_bin": [313, 314, 404, 547, 548], "typeerror": [313, 377, 697, 908, 951, 1016, 1017, 1020, 1022], "quantileregressor": [313, 963, 967, 1022, 1023, 1024], "min_": [313, 397, 404, 854, 963, 977, 981, 982, 983], "sum_i": [313, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 958, 959, 963, 965, 967, 972], "pb_q": [313, 963], "_1": [313, 399, 402, 405, 517, 523, 524, 526, 531, 532, 533, 632, 633, 638, 639, 640, 641, 642, 646, 647, 648, 649, 667, 668, 669, 670, 751, 963, 965, 967, 982], "get_feature_nam": [313, 1017, 1018, 1020, 1021, 1022], "pet": [313, 773, 967], "dog": [313, 314, 568, 768, 865, 977], "fish": 313, "pet_cat": 313, "pet_dog": 313, "pet_fish": 313, "plot_": [313, 388], "017": [313, 316, 344, 378, 457, 458], "plot_release_highlights_1_0_0": [313, 316], "x_1d": 314, "hist_quantil": 314, "log_reg_input_featur": 314, "gather": [314, 380, 386, 396, 397, 977, 991], "min_frequ": [314, 857, 858, 977, 1023, 1025], "rabbit": [314, 977], "snake": [314, 568, 865, 977], "infrequent_categories_": [314, 857, 858, 865, 977], "x0_cat": [314, 977], "x0_rabbit": [314, 977], "x0_infrequent_sklearn": [314, 977], "refactor": [314, 1009, 1011, 1012, 1013, 1019, 1022, 1023, 1024], "radius_neighbor": [314, 832, 834, 835, 836, 1013, 1018, 1019, 1021, 1022, 1023, 1024], "summari": [314, 354, 369, 383, 678, 699, 897, 965, 968, 987, 1002], "pairwise_distances_argmin_min": [314, 764, 1012, 1017, 1023, 1024, 1025], "radiusneighborsclassifi": [314, 826, 827, 832, 835, 968, 970, 1009, 1011, 1015, 1017, 1019, 1021, 1022, 1023, 1024, 1025], "radiusneighborsregressor": [314, 826, 827, 832, 834, 970, 1009, 1011, 1017, 1019, 1021, 1022, 1023, 1024, 1025], "trustworthi": [314, 1017, 1018, 1023, 1024, 1025], "labelpropag": [314, 320, 880, 881, 968, 980, 1010, 1015, 1016, 1019, 1020, 1021, 1023, 1024, 1025], "labelspread": [314, 318, 319, 320, 322, 323, 879, 881, 968, 980, 1010, 1015, 1016, 1019, 1020, 1023, 1024, 1025], "blog": [314, 358, 372, 378, 380, 386, 1020], "cython": [314, 358, 359, 361, 370, 372, 375, 381, 383, 388, 390, 393, 397, 404, 494, 977, 978, 981, 982, 987, 988, 1009, 1012, 1013, 1015, 1021, 1024, 1025], "readili": [314, 402, 983, 991], "true_w": 314, "true_h": 314, "x_reconstruct": [314, 468, 469, 470, 569], "00364": 314, "divis": [314, 397, 405, 576, 577, 580, 698, 699, 714, 715, 723, 731, 768, 769, 772, 967, 1001, 1013, 1017, 1018, 1021, 1025], "repeatedli": [314, 354, 385, 397, 404, 407, 494, 532, 652, 653, 662, 663, 664, 766, 957, 971, 997], "bisect_km": 314, "plot_release_highlights_1_1_0": [314, 316], "video": [315, 361, 366, 375, 489, 968, 991, 994], "sepal_col": 315, "petal_col": 315, "x_out": [315, 848, 857, 858], "052506": 315, "592373": 315, "189830": 315, "973554": 315, "416010": 315, "630382": 315, "765012": 315, "362176": 315, "021849": 315, "788808": 315, "hist_no_interact": 315, "v1": [315, 366, 388, 409, 519, 741, 780, 781, 819, 820, 821, 823, 1021, 1024, 1025], "liac": [315, 366, 372, 482, 1024, 1025], "arff": [315, 372, 482, 1021, 1024, 1025], "ticket": [315, 372], "cabin": 315, "boat": 315, "allen": [315, 1012, 1014, 1016, 1019], "elisabeth": 315, "walton": 315, "24160": 315, "3375": 315, "b5": 315, "loui": [315, 1014, 1015, 1019, 1021, 1023], "mo": [315, 1020], "allison": 315, "hudson": 315, "9167": 315, "113781": 315, "151": [315, 378, 404, 979], "5500": [315, 674, 964], "c22": 315, "c26": 315, "montreal": 315, "pq": 315, "chestervil": 315, "ON": 315, "helen": 315, "lorain": 315, "joshua": [315, 367, 1011, 1012, 1014, 1015, 1021, 1024, 1025], "creighton": 315, "135": [315, 369], "bessi": 315, "waldo": 315, "compliant": [315, 372], "cupi": [315, 393], "gpu": [315, 393, 971, 988, 1002], "changelog": [315, 376, 385], "269": [315, 316, 497], "plot_release_highlights_1_2_0": [315, 316], "153": [316, 649], "auto_examples_release_highlight": 316, "semisupervis": [318, 385], "clai": [318, 319, 320, 323, 1009], "woolam": [318, 319, 320, 323, 1009], "n_total_sampl": [318, 319], "n_labeled_point": [318, 319], "unlabeled_set": 318, "everyth": [318, 354, 376, 378, 383, 450, 927, 987, 988, 1009], "lp_model": [318, 319], "predicted_label": [318, 319], "transduction_": [318, 319, 320, 879, 880, 881], "true_label": [318, 319], "_plot": 318, "0x7f71c569a490": 318, "pred_entropi": [318, 319], "label_distributions_": [318, 319, 879, 880, 1020], "uncertainty_index": [318, 319], "image_index": [318, 319], "390": [318, 324], "plot_label_propagation_digit": [318, 324], "max_iter": 319, "______________________________________________________________________": 319, "290": [319, 674, 675, 679, 964], "330": [319, 344], "285": [319, 709], "280": 319, "unlabeled_indic": 319, "transduc": 319, "in1d": [319, 1016], "delete_indic": 319, "183": [319, 378, 968, 1009], "nfit": 319, "delete_index": 319, "plot_label_propagation_digits_active_learn": [319, 324], "label_spread": 320, "labelspreadinglabelspread": 320, "output_label": 320, "output_label_arrai": 320, "outer_numb": 320, "inner_numb": 320, "176": [320, 324, 378, 817, 968, 975], "plot_label_propagation_structur": [320, 324], "breast_canc": 321, "augment": [321, 616, 866, 991], "oliv": [321, 323, 1017, 1018, 1020, 1021, 1022], "rausch": [321, 323, 1017, 1018, 1021], "rauscho": [321, 323], "ethz": [321, 323], "total_sampl": [321, 522], "base_classifi": [321, 323, 980], "x_valu": 321, "99999": 321, "amount_label": 321, "amount_iter": 321, "self_training_clf": 321, "skfold": 321, "y_test_tru": 321, "labeled_iter_": [321, 881], "return_count": [321, 344, 836], "capsiz": 321, "twinx": 321, "plot_self_training_varying_threshold": [321, 324], "2823": 322, "2117": 322, "761": 322, "1697": 322, "1071": 322, "850": 322, "tfidftransform": [322, 344, 345, 405, 475, 577, 1002, 1016, 1017, 1023, 1025], "sdg_param": 322, "vectorizer_param": 322, "selftrain": 322, "st_pipelin": 322, "ls_pipelin": 322, "eval_and_print_metr": 322, "y_mask": 322, "x_20": 322, "y_20": 322, "plot_semi_supervised_newsgroup": [322, 324], "y_rand": 323, "y_30": 323, "y_50": 323, "ls30": 323, "ls50": 323, "ls100": 323, "st30": 323, "st50": 323, "rbf_svc": [323, 982], "color_map": 323, "971": [323, 324], "plot_semi_supervised_versus_svm_iri": [323, 324], "541": [324, 438, 448], "auto_examples_semi_supervis": 324, "my_kernel": [326, 982], "plot_custom_kernel": [326, 341], "2x2": [327, 397, 739], "230": [327, 341, 345, 570], "plot_iris_svc": [327, 341], "convention": [328, 385, 880], "support_vector_indic": 328, "plot_linearsvc_support_vector": [328, 341], "385": [329, 341], "plot_oneclass": [329, 341], "midpoint": 330, "blink": 330, "act": [330, 343, 372, 384, 403, 404, 699, 714, 715, 723, 768, 769, 772, 859, 863, 964, 967, 970, 982, 1017], "spuriou": [330, 380, 977, 1022, 1023, 1024], "c_rang": 330, "gamma_rang": 330, "midpointnorm": 330, "masked_arrai": [330, 782, 796], "x_2d": 330, "y_2d": 330, "cheat": [330, 971, 981, 1011], "c_2d_rang": 330, "gamma_2d_rang": 330, "bright": 330, "brutal": 330, "plot_rbf_paramet": [330, 341], "plot_separating_hyperplan": [331, 341], "plain": [332, 407, 643, 981], "n_samples_1": [332, 982], "n_samples_2": [332, 982], "clusters_std": 332, "wclf": 332, "wdisp": 332, "surface_": [332, 617], "plot_separating_hyperplane_unbalanc": [332, 341], "blown": 333, "score_mean": 333, "score_std": 333, "plot_svm_anova": [333, 341], "fignum": [334, 335], "plot_svm_kernel": [334, 341], "plot_svm_margin": [335, 341], "unreg": 335, "perpendicular": 335, "yy_down": 335, "yy_up": 335, "087": [335, 341], "nusvc": [336, 358, 887, 968, 1009, 1010, 1011, 1014, 1017, 1019, 1020, 1021, 1023], "505": [336, 341], "plot_svm_nonlinear": [336, 341], "svr_rbf": 337, "svr_lin": 337, "svr_poli": 337, "kernel_label": 337, "model_color": 337, "setdiff1d": 337, "plot_svm_regress": [337, 341], "mathcal": [338, 402, 404, 613, 682, 959, 961, 963, 967, 981, 1022], "omega": [338, 400, 961], "model_l1": 338, "logx": 338, "train_size_idx": 338, "results_sc": 338, "c_scale": 338, "model_l2": 338, "plot_svm_scale_c": [338, 341], "break_ti": [339, 886, 889, 982, 1019], "accent": [339, 574, 575, 577, 1019], "098": [339, 341], "plot_svm_tie_break": [339, 341], "emphasi": [340, 400, 886, 887, 888, 889, 890, 974, 987], "subtl": [340, 354, 966, 988], "plot_decision_funct": 340, "sample_weight_last_ten": 340, "sample_weight_const": 340, "clf_no_weight": 340, "clf_weight": 340, "548": [340, 341], "plot_weighted_sampl": [340, 341], "auto_examples_svm": 341, "signatur": [343, 344, 367, 474, 475, 543, 544, 550, 551, 580, 596, 597, 645, 659, 661, 697, 727, 788, 806, 808, 811, 857, 956, 1016, 1022], "size_mb": 343, "utf": [343, 345, 405, 473, 489, 568, 574, 575, 577], "load_dataset": 343, "sublinear_tf": [343, 402, 405, 576, 577], "duration_train": 343, "duration_test": 343, "data_train_size_mb": 343, "data_test_size_mb": 343, "2034": [343, 367], "98mb": 343, "1353": 343, "87mb": 343, "418": 343, "531mb": 343, "7831": 343, "278": [343, 369, 824, 825], "330mb": 343, "ridgeclassifi": [343, 358, 658, 659, 661, 963, 968, 1014, 1018, 1022, 1023, 1024], "sparse_cg": [343, 658, 660, 673, 963, 1010, 1016, 1018, 1019, 1023], "rarer": [343, 345, 405], "deeper": [343, 983], "plot_feature_effect": 343, "average_feature_effect": 343, "top5": 343, "top_indic": 343, "predictive_word": 343, "bar_siz": 343, "y_loc": 343, "keith": [343, 1009, 1014], "atheist": 343, "orbit": [343, 344], "caltech": 343, "expectedli": 343, "pollut": [343, 713, 770, 967, 973], "sender": [343, 367], "livesei": 343, "solntz": 343, "wpd": 343, "sgi": 343, "jon": [343, 1016, 1019, 1020, 1022, 1023], "nntp": [343, 367, 1002], "1qlettinn8oi": 343, "cco": 343, "allan": [343, 395, 1021], "schneider": [343, 1022], "me": 343, "instinct": 343, "happi": [343, 383, 386, 800, 801], "listen": 343, "murder": 343, "voluntari": 343, "disregard": [343, 385, 405, 418, 451, 468, 469, 470, 538, 540, 542, 544, 546, 548, 551, 554, 556, 597, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 664, 665, 707, 708, 709, 770, 817, 818, 827, 835, 842, 853, 854, 860, 861, 864, 869, 872, 873, 875, 885, 887, 890, 893, 895, 967, 1017], "beings": 343, "bahavior": 343, "theirs": 343, "mimicri": 343, "imit": 343, "parrot": 343, "polli": 343, "pulchritud": 343, "anim": [343, 405], "kill": 343, "Or": [343, 352, 401, 402, 857, 967, 973, 981], "sigh": 343, "wonder": 343, "bahaviour": 343, "believ": [343, 344, 380, 383, 991], "primat": 343, "arbitarili": 343, "poster": [343, 371, 372, 1001], "weren": [343, 858, 1018], "slai": 343, "mate": 343, "ritual": 343, "whatnot": 343, "aren": [343, 367, 376, 388, 396, 711, 741, 972, 1019, 1021], "ye": [343, 380, 385, 851, 868, 963], "child": [343, 352, 359, 383, 385, 397, 404, 428, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 892, 893, 894, 895, 935, 983, 1016], "gorilla": 343, "dolphin": 343, "platypu": 343, "writer": 343, "launch": [343, 344, 388, 991], "custom_nam": 343, "clf_descr": 343, "rocchio": [343, 831], "363": 343, "00062": 343, "5316": 343, "0398": 343, "000683": 343, "000942": 343, "704": 343, "0359": 343, "000772": 343, "752": 343, "0368": [343, 605], "000675": 343, "762": 343, "00338": 343, "00166": 343, "748": [343, 378], "00252": 343, "000616": 343, "779": 343, "training_tim": 343, "txt": [343, 366, 479, 489], "curs": [343, 344, 397, 403, 407, 969, 970, 996, 1001], "harm": [343, 374, 405, 778], "plot_document_classification_20newsgroup": [343, 346], "discov": [344, 397, 402, 405, 408, 430, 434, 993, 1024], "metadata": [344, 366, 367, 391, 474, 475, 482, 987, 988, 993], "category_s": 344, "true_k": 344, "3387": 344, "evaluations_std": 344, "fit_and_evalu": 344, "evaluation_std": 344, "score_valu": 344, "std_score": [344, 1022], "reweight": [344, 385, 399, 404, 576, 577, 634, 655, 666], "collis": [344, 345, 405, 568, 575], "x_tfidf": 344, "588": 344, "7929": [344, 1016], "prod": [344, 607], "phenomenon": [344, 977], "cluster_s": 344, "2050": 344, "711": 344, "446": [344, 407, 711, 741, 967], "485": [344, 682], "1708": 344, "3384": 344, "1887": 344, "311": 344, "1688": 344, "454": 344, "973": [344, 401], "628": 344, "358": 344, "405": 344, "380": [344, 1002], "redo": 344, "x_lsa": 344, "explained_vari": [344, 967], "439": 344, "033": [344, 975], "030": [344, 353], "minibatch_kmean": 344, "091": 344, "386": [344, 860], "072": [344, 423, 634], "301": [344, 398, 981], "027": [344, 369], "influenti": [344, 991], "original_space_centroid": 344, "order_centroid": 344, "shuttl": 344, "sparciti": 344, "lsa_vector": 344, "x_hashed_lsa": 344, "417": 344, "343": 344, "055": [344, 369, 967], "366": 344, "354": 344, "056": [344, 975], "306": [344, 613], "df_std": 344, "speak": [344, 358, 372, 981], "safer": [344, 354, 397, 401, 1009], "plot_document_clust": [344, 346], "18000": [345, 367], "raw_data": 345, "data_size_mb": 345, "3803": 345, "245mb": 345, "anyth": [345, 376, 378, 385, 401, 931, 1023], "unicod": [345, 405, 473, 489, 568, 574, 575, 577, 932, 1009, 1017, 1021], "charact": [345, 372, 377, 385, 405, 489, 494, 495, 574, 575, 577, 896, 972, 1002, 1009, 1022, 1024], "underscor": [345, 374, 385, 951, 999, 1009, 1019, 1022], "tok": [345, 405], "findal": 345, "token_freq": 345, "dict_count_vector": 345, "47928": 345, "vocabulary_": [345, 405, 567, 574, 577, 1002, 1009], "19145": 345, "n_nonzero_column": 345, "582": [345, 885], "43873": 345, "inact": [345, 366, 372], "580": [345, 824, 825], "47668": 345, "input_typ": [345, 405, 450, 568], "504": 345, "y_po": 345, "downsid": 345, "featureheash": 345, "implicitli": [345, 381, 404, 583, 618, 619, 863, 957, 959, 974, 977, 982], "token_pattern": [345, 405, 574, 575, 577], "47885": 345, "739": 345, "333": [345, 346, 826], "plot_hashing_vs_dict_vector": [345, 346], "auto_examples_text": 346, "parameter": [348, 407, 600, 601, 608, 609, 780, 781, 963, 964, 972, 977, 983], "weakest": [348, 983], "cost_complexity_pruning_path": [348, 892, 893, 894, 895], "drawstyl": [348, 686], "3272984419327777": 348, "plot_cost_complexity_prun": [348, 353], "ryb": 349, "pairidx": 349, "borderpad": 349, "handletextpad": 349, "plot_iris_dtc": [349, 353], "plot_tre": [349, 352, 983, 1018, 1020, 1021, 1022, 1024], "102": [350, 353, 378, 1000, 1011], "plot_tree_regress": [350, 353], "regr_3": 351, "y_3": 351, "plot_tree_regression_multioutput": [351, 353], "decision_path": [352, 543, 544, 550, 551, 552, 892, 893, 894, 895, 1015, 1020], "children_left": 352, "children_right": 352, "n_node_sampl": 352, "travers": [352, 970, 974], "n_node": [352, 427, 431, 449, 543, 544, 550, 551, 552, 892, 893, 894, 895, 926], "node_depth": 352, "is_leav": 352, "pop": [352, 383, 899, 997, 1017], "visit": [352, 372, 974], "node_id": [352, 896, 898], "is_split_nod": 352, "children": [352, 397, 404, 427, 431, 449, 552, 1013], "800000011920929": 352, "950000047683716": 352, "node_index": 352, "node_ind": 352, "leaf_id": 352, "sample_id": [352, 367, 483], "threshold_sign": 352, "inequ": [352, 385, 397, 429, 433, 445, 685, 964, 965, 970], "boolean": [352, 367, 372, 374, 381, 398, 404, 405, 406, 450, 547, 548, 567, 568, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 615, 618, 619, 622, 635, 657, 685, 813, 819, 840, 847, 867, 900, 951, 957, 963, 969, 974, 977, 983, 1009, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024], "common_nod": 352, "common_node_id": 352, "plot_unveil_tree_structur": [352, 353], "auto_examples_tre": 353, "x_test_transform": [354, 401], "standard_norm": 354, "unfair": 354, "x_select": 354, "gbc": 354, "x_train_select": 354, "x_test_select": 354, "tip": [354, 357, 361, 372, 375, 378, 392, 405, 520, 527, 631, 678, 963, 989, 1003, 1004, 1007, 1012], "glossari": [354, 361, 372, 374, 378, 396, 408, 409, 423, 426, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 450, 453, 455, 458, 460, 474, 477, 478, 481, 483, 489, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 569, 570, 580, 588, 593, 594, 596, 597, 613, 618, 620, 625, 626, 627, 628, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 677, 678, 679, 680, 681, 687, 759, 763, 766, 776, 780, 781, 782, 784, 785, 786, 787, 788, 794, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 826, 827, 829, 830, 832, 833, 834, 835, 837, 838, 840, 841, 842, 843, 846, 849, 861, 865, 873, 876, 877, 879, 880, 884, 885, 886, 889, 892, 893, 894, 895, 920, 921, 938, 941, 956, 957, 963, 993, 1017], "mtrand": 354, "_rand": 354, "85418642": 354, "79084103": 354, "13077794": 354, "11915045": 354, "56479934": 354, "70814003": 354, "25291366": 354, "55212743": 354, "18197458": 354, "37845099": 354, "snippet": [354, 372, 377, 380, 383, 393, 404, 405, 406, 957, 977, 990, 1022], "mutat": [354, 1017], "somewhat": [354, 360, 372, 374, 402, 404, 886, 889, 963, 982, 983], "debug": [354, 359, 373, 375, 378, 385, 387, 613, 883, 933, 987, 1002, 1017, 1021], "govern": [354, 358, 361, 372, 385, 985, 991], "implic": 354, "rf_123": 354, "rf_inst": 354, "didn": [354, 385, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "strict": [354, 370, 385, 402, 489, 521, 574, 575, 577, 963, 1009, 1018, 1021], "pervas": [354, 372], "throughout": [354, 385, 613, 783, 841, 842, 993, 1012, 1017], "codebas": [354, 372, 373, 374, 405, 1009, 1015], "unlucki": 354, "lucki": 354, "fairer": 354, "temptat": [354, 372], "throughput": [357, 987, 1004, 1012], "switch": [357, 664, 690, 703, 722, 740, 742, 778, 824, 825, 920, 921, 967, 970, 1004, 1009], "offlin": [358, 372], "bottleneck": [358, 378, 404, 434, 841, 842], "hurt": [358, 520, 1017], "toolkit": [358, 987, 991], "branch": [358, 370, 372, 375, 376, 397, 404, 428, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 892, 893, 894, 895, 897, 970, 974, 983], "sklearn_assume_finit": 358, "assume_finit": [358, 359, 454, 882], "assert_all_finit": [358, 381, 454], "nm": 358, "csc": [358, 383, 385, 405, 537, 539, 540, 656, 678, 851, 853, 859, 864, 867, 869, 875, 900, 904, 905, 930, 942, 943, 945, 946, 947, 948, 970, 977, 1017, 1018, 1020, 1023], "32bit": [358, 932], "speedup": [358, 402, 404, 636, 640, 643, 1009, 1010, 1011, 1012, 1024], "multithread": [358, 397, 884, 885, 886, 887, 888, 889, 890], "bla": [358, 359, 370, 373, 378, 1009, 1017, 1018, 1020, 1021], "sparsity_ratio": 358, "gbt": 358, "speedi": 358, "packet": 358, "reuter": [358, 367], "carefulli": [358, 402], "spawn": [358, 383, 782, 796, 805, 806, 807, 1020], "gil": [358, 359, 373, 935, 1012, 1017, 1018, 1021, 1022], "ought": 358, "lapack": [358, 359, 370, 518, 521, 527, 674, 1024], "dgemm": 358, "show_vers": [358, 370, 372, 380, 388, 1017], "atla": [358, 370], "rebuild": [358, 391, 405, 428], "openbla": [358, 359, 370, 383, 935, 1022], "mkl": [358, 359, 370, 383, 935, 1009], "veclib": [358, 383], "osx": 358, "nouri": [358, 1010, 1012], "instruct": [358, 372, 373, 374, 375, 376, 377, 380, 383, 384, 489, 574, 575, 577, 993, 1002, 1009], "ubuntu": [358, 370, 378, 380], "1gb": 358, "mib": [358, 454, 882], "working_memori": [358, 359, 454, 766, 882, 1017], "adher": [358, 374, 385, 915, 916, 1009, 1010], "pairwise_distances_chunk": [358, 763, 1017, 1020], "facilit": [358, 385, 391, 987, 988, 1015, 1018], "moment": [358, 402, 407, 426, 601, 609, 841, 842, 931, 971, 972], "000024": 358, "027400": 358, "mileag": 358, "deploi": [358, 387, 391, 988, 991], "upstream": [358, 372, 376, 380, 383, 977, 1018], "lighter": [358, 686, 688, 767, 774, 1025], "threadpoolctl": [359, 370, 388, 390], "subsect": [359, 396], "worker": [359, 385, 405, 933, 934, 935, 1024], "14228": 359, "loki": [359, 935, 967, 1017, 1020], "duplic": [359, 371, 372, 385, 397, 408, 430, 434, 435, 501, 621, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 808, 855, 953, 970, 1009, 1012, 1021, 1023, 1025], "memmap": [359, 367, 385, 402, 494, 520, 1017], "1mb": [359, 1014], "parallel_backend": [359, 408, 423, 430, 432, 434, 436, 438, 443, 444, 447, 450, 453, 458, 517, 521, 522, 523, 525, 528, 529, 531, 532, 534, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 580, 588, 596, 618, 620, 625, 633, 637, 639, 641, 643, 644, 645, 647, 649, 651, 652, 654, 662, 665, 674, 675, 676, 677, 678, 679, 680, 759, 763, 766, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 826, 827, 830, 832, 834, 835, 837, 838, 843, 846, 879, 880, 1017], "exclus": [359, 383, 402, 404, 613, 614, 616, 956, 963, 967, 968, 991, 1016, 1020], "omp_num_thread": 359, "my_script": 359, "algebra": [359, 370, 375, 383, 402, 405, 448, 850, 977], "bli": [359, 370, 383], "mkl_num_thread": 359, "openblas_num_thread": 359, "blis_num_thread": 359, "bash": [359, 380], "zsh": 359, "prompt": [359, 370, 372, 388, 390, 405, 993], "pypi": [359, 370, 372, 374, 376, 378, 388, 983, 1017, 1021, 1023, 1024], "channel": [359, 367, 370, 383, 388, 405, 479, 480, 569, 570, 572, 573], "subscript": [359, 935, 1022], "max_thread": [359, 373], "n_cpu": [359, 385], "lib": [359, 370, 388, 987], "_num_thread": 359, "singleton": [359, 790, 907, 1022], "aforement": [359, 968], "global_random_se": 359, "fixtur": [359, 372], "build_numb": 359, "disrupt": 359, "config": [359, 372, 373, 380, 612, 1017], "contributor": [359, 375, 376, 377, 380, 383, 385, 967, 985, 988, 1010, 1011, 1012], "encount": [359, 370, 391, 397, 404, 405, 482, 547, 548, 567, 819, 820, 821, 823, 857, 942, 977, 981, 987, 990, 991, 1002, 1017, 1020], "watch": 359, "annoi": 359, "test_your_test_nam": 359, "skip": [359, 372, 374, 381, 405, 454, 554, 632, 633, 638, 646, 647, 648, 657, 667, 882, 1002, 1013, 1016, 1019, 1021, 1023, 1025], "global_dtyp": 359, "boundscheck": [359, 373], "segfault": [359, 373, 1009, 1017, 1022], "posix": [359, 383], "pairwisedistancesreduct": 359, "adequ": [359, 378, 553, 993, 1022], "drive": [360, 402, 403, 404, 535, 981, 991, 1002], "passiveaggressiveregressor": [360, 963, 1010, 1013, 1016, 1017, 1020, 1022], "maxabsscal": [360, 848, 869, 957, 977, 1014, 1017, 1018, 1019, 1020, 1025], "routin": [360, 366, 369, 372, 373, 374, 375, 380, 383, 385, 406, 658, 660, 673, 685, 886, 887, 888, 889, 890, 964, 970, 977, 978, 981, 987, 991, 1009, 1023, 1024, 1025], "passiveaggress": [360, 405], "fledg": [360, 405], "naivebay": 360, "dramat": 360, "welcom": [361, 371, 372, 380, 386, 988, 990], "roadmap": [361, 985], "persist": [361, 380, 383, 402, 432, 596, 597, 840, 972, 987, 1004, 1015, 1018], "miscellan": [361, 365, 366, 1015, 1016, 1023, 1024, 1025], "craft": [361, 375], "curat": [361, 372, 375, 376], "commun": [365, 371, 375, 377, 380, 385, 388, 397, 404, 524, 526, 533, 678, 696, 856, 957, 964, 970, 977, 981, 985, 987, 991, 1017, 1018], "fetcher": [365, 1014, 1016], "linnerrud": [365, 1004], "breast": [365, 486, 1004, 1014], "cancer": [365, 486, 579, 580, 831, 1004, 1014], "covertyp": [365, 477, 1004], "rcv1": [365, 483, 1004, 1014], "kddcup": [365, 478, 1004], "svmlight": [365, 473, 494, 495, 987, 1004, 1009, 1010, 1016, 1018], "jpeg": [366, 367, 479, 480], "publish": [366, 367, 374, 376, 380, 385, 979, 988, 1021], "creativ": 366, "spare": [366, 660, 661], "pyplpt": 366, "load_svmlight_fil": [366, 1009, 1010, 1015, 1016, 1017, 1024], "test_dataset": 366, "everybodi": [366, 372], "upload": [366, 370, 376, 383, 657], "mice": [366, 613, 957], "brain": 366, "miceprotein": 366, "1080": [366, 397], "sc": [366, 397], "clara": [366, 1021], "higuera": 366, "katheleen": 366, "gardin": 366, "krzysztof": 366, "cio": 366, "protein": [366, 987], "cite": [366, 397, 985], "kj": [366, 969], "critic": [366, 372, 384, 391, 404, 678, 964, 967, 975, 982, 991, 1020], "syndrom": 366, "plo": [366, 593, 594], "ONE": [366, 593, 594], "e0129126": 366, "40966": 366, "upload_d": 366, "08t16": 366, "17928620": 366, "file_id": 366, "default_target_attribut": 366, "row_id_attribut": 366, "mouseid": 366, "ignore_attribut": 366, "genotyp": 366, "cc18": 366, "study_135": 366, "study_98": 366, "study_99": 366, "md5_checksum": 366, "3c479a6885bfa0438971388283a1ce32": 366, "websit": [366, 367, 369, 372, 386, 971, 981, 991, 1002, 1010, 1011, 1012], "4550": 366, "creator": [366, 369], "17t14": 366, "1804243": 366, "pone": 366, "0129126": 366, "openml100": 366, "study_14": 366, "study_34": 366, "earliest": [366, 964], "iris_61": 366, "iris_969": 366, "969": 366, "iris_version_3": 366, "vanschoren": [366, 1021], "rijn": [366, 1017], "bischl": 366, "torgo": 366, "acm": [366, 367, 397, 408, 430, 436, 443, 446, 497, 549, 662, 711, 741, 830, 967, 970, 973, 979], "sigkdd": [366, 367, 497, 662, 865, 977, 979], "newslett": 366, "legaci": [366, 376, 385, 935, 1009, 1016, 1021], "my": [366, 372, 377, 380, 482], "columnar": [366, 450, 987], "usabl": [366, 372, 374, 385, 391, 405, 782, 935, 1009, 1016, 1023, 1024], "io": [366, 369, 370, 372, 376, 378, 380, 385, 386, 391, 678, 987, 1007], "json": [366, 372, 388], "sql": 366, "smoothli": 366, "manipul": [366, 393, 493, 935, 987, 1015], "mat": [366, 405], "load_fil": [366, 367, 1002, 1011, 1023], "audio": [366, 489], "wish": [366, 372, 379, 381, 388, 397, 636, 637, 640, 641, 642, 650, 651, 921, 994, 1002, 1016], "imageio": 366, "wavfil": 366, "wav": 366, "hdf5": 366, "h5py": 366, "pytabl": 366, "april": [367, 650, 671, 672, 1013, 1021], "1992": [367, 369, 401, 404, 553, 554, 631, 963], "1994": [367, 369, 630], "AT": [367, 481], "laboratori": [367, 987], "cambridg": [367, 402, 576, 819, 823, 963, 965, 969], "facial": 367, "upright": 367, "frontal": 367, "movement": 367, "credit": [367, 380, 404, 963, 991], "18846": [367, 474, 475], "scikit_learn_data": [367, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "20news_hom": 367, "newsgroups_train": 367, "11314": 367, "1073": 367, "20new": [367, 1002], "34118": 367, "01327": 367, "newsgroups_test": 367, "vectors_test": 367, "class_prior": [367, 819, 820, 821, 823, 1010, 1013], "fit_prior": [367, 819, 820, 821, 823], "88213": 367, "suspici": 367, "show_top10": 367, "top10": 367, "affili": 367, "abund": 367, "clue": [367, 380, 964], "bare": [367, 964, 1002], "quotat": 367, "77310": 367, "76995": 367, "cleveland": 367, "indian": 367, "leagu": 367, "team": [367, 375, 383, 385, 985, 987, 991, 1009], "ohio": 367, "spark": [367, 988], "death": 367, "floyd": [367, 674, 964], "reckon": 367, "coloni": 367, "owner": [367, 369], "paul": [367, 1012, 1015, 1016, 1017, 1018, 1022, 1023], "dolan": 367, "nicknam": 367, "tribe": 367, "theme": [367, 1009], "mlb": [367, 855], "inappropri": [367, 401, 407, 695, 803], "nlp": [367, 402, 405, 819, 823, 965, 991], "cultur": 367, "inflammatori": 367, "famou": [367, 369, 982], "internet": [367, 377, 977, 1000], "offici": [367, 374, 385, 388, 479, 483, 987, 1002, 1017, 1018, 1021], "verif": [367, 967, 991], "identif": [367, 372, 483, 956, 994], "viola": [367, 1017], "opencv": 367, "detector": [367, 385, 830], "5749": [367, 479, 480], "13233": [367, 479, 480], "5828": [367, 479, 480], "200m": 367, "lfw_home": 367, "rectangular": [367, 385, 921, 988], "1140": 367, "fetch_lfw_pair": [367, 1014, 1024], "lfw_pairs_train": 367, "subdivid": [367, 407], "10_fold": [367, 479], "gari": [367, 1016], "huang": [367, 644, 1015, 1020], "manu": 367, "ramesh": [367, 991, 1012, 1015, 1019], "tamara": 367, "berg": [367, 1010, 1011, 1021], "erik": [367, 991, 1012], "miller": [367, 1017, 1018, 1022], "massachusett": 367, "amherst": 367, "30m": 367, "seven": [367, 960], "homepag": [367, 516, 983], "581012": [367, 477], "newswir": 367, "ltd": [367, 991], "804414": [367, 483], "47236": [367, 483], "fetch_rcv1": [367, 1014, 1018], "v2": [367, 483, 650, 671, 672, 963], "chronolog": [367, 483], "23149": [367, 483, 1023], "781265": [367, 483], "lyrl2004": [367, 483], "2286": 367, "810596": 367, "2287": 367, "2288": 367, "uint32": [367, 483], "gmil": 367, "381327": 367, "ccat": 367, "e11": 367, "ecat": 367, "m11": 367, "lewi": [367, 1016, 1020], "yang": [367, 397, 402, 520, 625, 1015, 1016, 1019, 1021, 1022, 1023], "rose": 367, "cup": [367, 967], "tcpdump": 367, "darpa": 367, "intrus": 367, "mit": [367, 378, 397, 407, 596, 597, 600, 605, 608, 629, 652, 653, 662, 821, 960], "lincoln": 367, "inject": [367, 404], "attack": 367, "unrealist": 367, "logged_in": 367, "resp": [367, 404, 583, 780, 781, 981, 1017], "4898431": [367, 478], "976158": 367, "699691": 367, "619052": 367, "95373": 367, "kddcup99": [367, 478], "richard": [367, 406, 644, 1010, 1019, 1021, 1023, 1024], "lippmann": 367, "hain": 367, "jonathan": [367, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1025], "korba": 367, "da": [367, 1024, 1025], "yamanishi": 367, "takeuchi": 367, "william": [367, 369, 407, 596, 597, 600, 605, 608, 625, 967, 971, 1016, 1017, 1018, 1019, 1024, 1025], "miln": 367, "discount": [367, 397, 711, 741, 1016, 1019], "sixth": 367, "320": [367, 956, 981, 1009], "press": [367, 397, 402, 407, 408, 430, 576, 596, 597, 600, 605, 608, 629, 819, 823, 960, 963, 965, 969], "household": 367, "statlib": 367, "dcc": 367, "ltorgo": 367, "cal_hous": 367, "1990": 367, "censu": 367, "bureau": 367, "resid": 367, "vacat": 367, "pace": 367, "kellei": [367, 1011, 1012], "ronald": [367, 971, 1012, 1022], "barri": [367, 1017], "autoregress": 367, "291": [367, 369], "297": 367, "hyperspher": [368, 987], "interleav": [368, 508], "simplif": [368, 371, 377, 1009, 1015], "realiti": 368, "make_sparse_uncorrel": 368, "make_friedman1": [368, 404, 525, 529, 579, 580, 618], "make_friedman2": [368, 597, 599, 600, 601, 602, 603, 607, 610, 611], "reciproc": [368, 967], "make_friedman3": 368, "7826": 369, "4194": 369, "9490": 369, "9565": 369, "fisher": [369, 404, 490, 622, 987], "donor": 369, "michael": [369, 395, 397, 436, 614, 623, 677, 780, 957, 963, 991, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1023, 1024], "marshal": 369, "arc": [369, 404], "juli": [369, 406, 719, 865, 977, 1012, 1016, 1017, 1018], "1988": 369, "sir": 369, "referenc": [369, 374, 375, 380, 385, 876, 877, 970, 1016, 1022], "duda": [369, 961], "hart": [369, 961, 1017], "taxonom": 369, "annual": [369, 397, 711, 741, 881, 967, 980], "eugen": [369, 1010, 1015], "179": [369, 378, 404, 1009], "1936": 369, "john": [369, 405, 522, 694, 720, 754, 859, 886, 887, 889, 890, 957, 963, 967, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1022, 1024, 1025], "wilei": [369, 957], "1950": [369, 967], "1973": [369, 395], "scene": [369, 970, 972, 1022], "q327": 369, "d83": 369, "son": [369, 957], "isbn": [369, 397, 963], "471": 369, "22361": 369, "dasarathi": 369, "1980": 369, "nose": [369, 1012, 1016], "pami": [369, 397, 710], "gate": [369, 1022], "1972": 369, "431": 369, "433": 369, "mlc": 369, "cheeseman": 369, "autoclass": 369, "conceptu": [369, 404, 965], "alpaydin": 369, "boun": 369, "nist": [369, 967], "bitmap": 369, "preprint": 369, "32x32": 369, "nonoverlap": 369, "4x4": [369, 402, 405], "garri": 369, "candela": 369, "dimmick": 369, "geist": 369, "grother": 369, "janet": 369, "handprint": 369, "nistir": 369, "5469": 369, "kaynak": 369, "msc": 369, "graduat": 369, "bogazici": 369, "cascad": 369, "kybernetika": 369, "ken": [369, 1002, 1011, 1018], "tang": [369, 1019, 1020, 1021], "ponnuthurai": 369, "suganthan": 369, "yao": [369, 1015, 1016, 1017, 1018, 1025], "kai": [369, 549, 973, 1016], "dimensionalityreduct": 369, "nanyang": 369, "technolog": 369, "claudio": [369, 1023, 1024], "gentil": [369, 1021], "linnerud": [369, 491], "men": 369, "club": 369, "waist": 369, "puls": 369, "chin": [369, 1013], "situp": 369, "tenenhau": 369, "pratiqu": 369, "alcalin": 369, "magnesium": 369, "phenol": 369, "nonflavanoid": 369, "proanthocyanin": 369, "od280": 369, "od315": 369, "dilut": 369, "class_2": [369, 496], "162": 369, "1680": 369, "chemic": 369, "grown": [369, 404, 539, 540, 541, 542, 543, 544, 550, 551, 892, 893, 894, 895, 983], "itali": 369, "cultiv": 369, "thirteen": 369, "constitu": 369, "forina": 369, "parvu": 369, "pharmaceut": 369, "food": 369, "technologi": [369, 397, 987, 991], "brigata": 369, "salerno": 369, "16147": 369, "genoa": 369, "lichman": 369, "irvin": 369, "ca": [369, 397, 428, 892, 893, 979, 983], "aeberhard": 369, "cooman": 369, "vel": 369, "rep": [369, 987], "dept": 369, "cook": [369, 1009, 1015], "north": [369, 397], "queensland": 369, "submit": [369, 370, 371, 374, 375, 376, 377, 380, 385, 386], "technometr": [369, 399, 455, 460, 973], "rda": 369, "1nn": 369, "THE": 369, "OF": 369, "chemometr": 369, "perimet": 369, "textur": [369, 743, 744, 965], "concav": 369, "symmetri": [369, 685, 857, 860, 872, 965], "fractal": 369, "malign": [369, 486], "benign": [369, 486], "2501": 369, "345": 369, "427": [369, 492, 493, 569, 570], "873": 369, "542": 369, "031": 369, "4254": 369, "071": [369, 423], "664": 369, "357": [369, 486, 885], "wolberg": 369, "nick": [369, 1009, 1015, 1016, 1017, 1018], "olvi": 369, "mangasarian": 369, "goo": [369, 486], "gl": [369, 486], "u2uwz2": [369, 486], "needl": 369, "aspir": [369, 372], "fna": 369, "nuclei": 369, "multisurfac": 369, "msm": 369, "bennett": [369, 967], "midwest": 369, "cognit": 369, "societi": [369, 397, 399, 455, 460, 527, 613, 860, 872, 963, 981], "101": [369, 830, 1010], "insepar": 369, "uw": [369, 1021], "ftp": [369, 668, 669], "wisc": [369, 879], "prog": 369, "cpo": 369, "nuclear": 369, "tumor": 369, "spie": 369, "1993": [369, 460, 650, 671, 672, 983], "symposium": [369, 397, 446], "1905": 369, "861": [369, 773, 774, 967], "870": 369, "san": [369, 405, 979], "jose": [369, 644, 967, 1017, 1019], "prognosi": 369, "570": [369, 1000], "577": 369, "august": [369, 397, 497, 520, 982, 1009, 1011, 1012, 1016, 1023], "961": [370, 388, 389, 390, 841], "wheel": [370, 372, 376, 388, 1019, 1021, 1023], "quickest": 370, "registri": [370, 388], "uninstal": 370, "git": [370, 374, 376, 378, 380, 990, 1005, 1009], "fork": [370, 372, 376, 380, 383], "miniforge3": [370, 380], "miniforg": [370, 380, 388], "env": [370, 380, 388], "virtualenv": [370, 372], "python3": [370, 388], "venv": [370, 388], "pep517": [370, 372], "dev0": [370, 376, 990, 1005], "pyx": [370, 372, 373, 378, 380], "pxd": [370, 372], "sklearn_fail_no_openmp": 370, "checkout": [370, 372, 376, 380], "cumbersom": 370, "reinstal": [370, 388], "setuptool": 370, "unix": [370, 405], "makefil": 370, "studio": [370, 991], "vs_buildtool": 370, "desktop": 370, "screenshot": 370, "secondli": [370, 372, 383, 397, 404, 643, 963, 1002], "architectur": [370, 374, 380, 383, 388, 391, 454, 882, 971, 985, 991, 1009], "cmd": 370, "powershel": 370, "struct": [370, 385, 1012], "calcsiz": 370, "distutils_use_sdk": 370, "x86": 370, "buildtool": 370, "vc": 370, "vcvarsal": 370, "bat": 370, "x64": 370, "clang": [370, 373], "confusingli": 370, "usr": 370, "gcc": [370, 373, 378, 383], "libomp": [370, 1021], "silicon": [370, 985], "m1": [370, 985], "januari": [370, 372, 388, 1009, 1010, 1019, 1021, 1024], "arm64": [370, 372, 375, 388], "llvm": 370, "toolchain": 370, "xcode": 370, "conflict": [370, 372, 376, 380, 388, 1016, 1017], "condarc": 370, "channel_prior": 370, "reactiv": [370, 378], "echo": [370, 376], "cxx": 370, "cflag": 370, "cxxflag": 370, "ldflag": 370, "subfold": [370, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 489, 1022], "fopenmp": [370, 373], "export": [370, 373, 374, 388, 391, 896, 897, 983, 987, 990, 1018], "cppflag": 370, "xpreprocessor": 370, "wl": 370, "rpath": 370, "lomp": 370, "sudo": [370, 388], "apt": [370, 380, 388], "pip3": 370, "pythonx": 370, "site": [370, 372, 375, 380, 388, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 991, 1017], "precompil": 370, "arm": [370, 380, 956], "cython3": 370, "cento": 370, "yum": 370, "devel": 370, "gnu": 370, "port": [370, 388, 1019], "pkg": 370, "build_ext": [370, 378], "build_clib": 370, "linker": [370, 373], "sysconfig": 370, "counterpart": [370, 956, 964, 982, 997], "get_config_var": 370, "sklearn_build_parallel": 370, "tracker": [371, 375, 380, 383, 386, 388, 391, 985, 988], "prioriti": [371, 618, 812, 813, 988, 1012], "guidelin": [371, 375, 377, 378, 380, 396, 397, 404], "reformul": 371, "xyz": 371, "someestim": 371, "glanc": 371, "relabel": [371, 800, 801, 881], "stall": [371, 375], "sprint": [371, 372, 985, 1009], "unfinish": [371, 372], "supersed": [371, 1014], "overflow": [371, 380, 383, 1012, 1016, 1017, 1018, 1019, 1020, 1022], "submitt": 371, "strive": [371, 386, 991], "expertis": [371, 372, 383], "unclear": [371, 372, 487], "pleasant": [371, 991], "chime": 371, "permiss": [371, 376, 386, 388, 991, 1024], "matthew": [371, 377, 522, 728, 1009, 1012, 1016, 1018, 1022, 1023], "rocklin": [371, 377], "acknowledg": [371, 595], "struggl": [371, 386, 397], "everyon": [372, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "underrepres": 372, "merit": [372, 376, 386], "teach": 372, "priceless": 372, "abid": 372, "codeofconduct": 372, "hesit": 372, "typo": [372, 386, 1009], "send": [372, 397, 409, 519], "valuabl": [372, 957, 991], "burden": [372, 856, 988], "slep": [372, 385, 985], "templat": [372, 376, 377, 385, 386, 543, 544, 549, 550, 551, 552, 987], "ecosystem": [372, 957, 986, 991], "contrib": [372, 374, 380, 383, 385, 397, 987, 988, 1025], "numpydoc": [372, 385, 388, 390], "compli": [372, 385, 915, 988], "fulfil": [372, 397, 404, 782, 785, 786, 796, 844, 848, 963], "anyon": [372, 386, 991], "gist": [372, 380, 990], "repo": [372, 376, 988], "feasibl": [372, 853, 854, 864], "traceback": [372, 377, 380, 383, 454, 990], "doubt": [372, 373, 376, 963, 973, 987], "companion": [372, 977], "transcript": 372, "inclus": [372, 374, 380, 436, 442, 739, 771, 967, 968, 1009, 1023], "yourlogin": 372, "flake8": [372, 388, 390, 565], "mypi": [372, 376, 388, 390, 1020], "synchron": [372, 405], "my_featur": 372, "commit": [372, 376, 380, 990, 1009, 1010, 1011, 1012], "modified_fil": 372, "committ": [372, 1009], "modif": [372, 400, 404, 405, 432, 980], "approv": [372, 386, 404], "mrg": [372, 380], "incomplet": [372, 388, 397, 691, 778, 957, 964, 1002, 1013, 1015], "wip": [372, 380, 388], "matur": [372, 987, 988], "broad": [372, 385, 987], "collabor": 372, "_logist": 372, "doctest": [372, 385, 994, 1009], "test_logist": [372, 380], "rst": [372, 376, 380, 1002, 1009, 1014], "test_common": [372, 380], "caught": [372, 380, 391], "editor": [372, 380, 383], "submodul": [372, 376, 378, 396, 959, 965, 1009], "intricaci": 372, "narr": [372, 385, 644, 884, 889, 1009, 1010], "unittest": 372, "tests_for_packag": 372, "static": [372, 374, 378, 380, 632, 633, 638, 639, 646, 647, 648, 649], "astropi": 372, "linux": [372, 374, 375, 380, 987, 1009], "lint": [372, 380], "aarch64": [372, 380, 388], "gh": 372, "nogil": [372, 373], "cpython": [372, 373, 378, 1024], "pyodid": 372, "sklearn_run_float32_test": 372, "lengthi": [372, 383], "etiquett": 372, "she": [372, 874, 875, 1019], "he": [372, 711, 741, 841, 842, 874, 875, 967, 1002, 1016, 1023, 1024], "shorten": [372, 982, 1022], "leader": [372, 991], "grab": 372, "familiar": [372, 403, 1017], "acquaint": 372, "experienc": 372, "abandon": 372, "someon": [372, 376, 385, 1009], "glad": 372, "restructuredtext": 372, "_build": 372, "viewabl": 372, "pillow": [372, 388, 390], "sphinxext": [372, 388, 390], "opengraph": [372, 388, 390], "vast": 372, "examples_pattern": 372, "your_regex_goes_her": 372, "no_mathjax": 372, "latexpdf": 372, "elabor": [372, 968], "paragraph": [372, 405, 489, 1002], "hood": [372, 963, 982], "colon": 372, "selectfpr": [372, 406, 578, 581, 584, 585, 586, 592, 1025], "some_param": 372, "hello": [372, 380, 928], "goodby": 372, "liter": [372, 376, 991], "array_paramet": 372, "list_param": 372, "typed_ndarrai": 372, "multioutput_arrai": 372, "bracket": [372, 963], "delimit": [372, 973, 1024], "unwritten": 372, "bibliograph": 372, "arxiv": [372, 448], "backtick": [372, 377], "nowadai": 372, "syntax": [372, 377, 380, 398, 956, 993, 1020, 1022], "_my": 372, "ref": [372, 379, 380, 957, 1015], "currentmodul": 372, "succeed": 372, "stone": [372, 892, 893, 983], "subdirectori": 372, "subpackag": [372, 376, 985, 1013, 1018], "cleanup": [372, 1009], "charg": 372, "test_requiring_mpl_fixtur": 372, "hang": [372, 990, 1019, 1020], "fruit": [372, 968], "asv": 372, "asv_benchmark": 372, "airspe": 372, "veloc": 372, "publicli": [372, 1019], "zero_on": [372, 1010], "example_funct": 372, "exampleestim": 372, "_n_cluster": 372, "versionchang": 372, "meet": [372, 383, 386, 406, 558, 589, 841, 842, 881, 967, 980, 991, 1017, 1018, 1019], "nit": 372, "retract": 372, "grammar": 372, "disambigu": [372, 812, 881, 980, 1024], "Will": [372, 483, 520, 613, 630, 631, 632, 638, 642, 643, 646, 647, 648, 649, 650, 651, 659, 661, 693, 700, 773, 849, 853, 857, 864, 1012, 1013, 1015, 1017], "clariti": [372, 380], "unhelp": 372, "extran": 372, "rewritten": [372, 635, 1011, 1013], "generos": 372, "reward": 372, "heard": 372, "ve": [372, 405, 990, 991, 1002, 1016], "enemi": 372, "courtesi": 372, "justifi": [372, 378, 395, 551], "occas": 372, "deserv": [372, 378], "digest": [372, 1024], "overwhelm": 372, "sheer": [372, 991], "myself": 372, "trickiest": 372, "buri": 372, "inherit": [372, 374, 384, 385, 563, 662, 913, 915, 963, 1009, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1025], "mixin": [372, 385, 412, 413, 414, 415, 416, 417, 418, 419, 587, 915, 1011, 1020, 1024], "classifiermixin": [372, 374, 385, 401, 1020], "grep": 372, "delai": [372, 482, 782, 796, 805, 806, 935, 1023, 1024], "some_funct": [372, 911], "some_iter": 372, "flavor": [372, 970], "pointer": [372, 380, 428, 1018], "mandatori": [372, 405], "favorit": [372, 383, 991], "Being": [372, 386, 391, 963, 970], "killer": [372, 991], "blame": 372, "migrat": [372, 1009], "ignorerevsfil": 372, "rev": [372, 593, 594], "ruin": 372, "maco": [373, 375, 388, 1017, 1021, 1023], "sklearn_enable_debug_cython_direct": 373, "scratch": [373, 428, 967, 1011], "magic": [373, 378, 407, 602, 607, 610], "gdb": [373, 375, 990], "entrypoint_to_bug_reproduc": 373, "cdef": 373, "state_to_print": 373, "test_val": 373, "unifi": [373, 381, 383, 384, 404, 623, 987, 1009], "fuse": [373, 1015, 1025], "ongo": [373, 386], "concret": [373, 386, 406, 654, 660, 661, 662, 663, 876, 877, 963, 981], "alia": [373, 376, 380, 385, 603, 941, 973, 988, 1009, 1023], "shell": [373, 380, 383, 993, 1002], "cythonx": 373, "language_level": 373, "wraparound": 373, "initializedcheck": 373, "nonecheck": 373, "cdivis": 373, "recompil": [373, 378, 388], "pep073": 373, "pathwai": 373, "memoryview": 373, "cnp": 373, "lightweight": [373, 782, 796, 805, 806, 987], "virtual": [373, 388, 401, 991], "enter": [373, 376, 397, 428, 974], "prang": 373, "void": 373, "my_func": [373, 378], "st\u00e9fan": 373, "benhel": 373, "_cython_bla": 373, "protect": [373, 376, 933], "_openmp_help": 373, "cimport": [373, 381, 1017], "omp_get_max_thread": 373, "prolifer": 374, "adopt": [374, 385, 880, 967, 981, 1017, 1024], "predomin": [374, 1010], "overrid": [374, 405, 432, 436, 443, 528, 534, 574, 575, 577, 579, 580, 583, 642, 650, 671, 672, 826, 827, 828, 830, 832, 834, 835, 836, 1009, 1017, 1019, 1023, 1025], "creation": [374, 497, 498, 499, 501, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 642, 824, 825, 991, 1016, 1017, 1018, 1022], "optimis": [374, 397, 970, 987, 1012, 1022, 1024], "param1": [374, 999], "param2": [374, 999], "param3": 374, "postpon": [374, 376], "requisit": 374, "liner": [374, 810], "ipython": [374, 377, 378, 380, 994, 1002], "session": [374, 378, 383, 388, 986, 991, 1002], "trainabl": 374, "trail": [374, 951], "overridden": [374, 385, 407, 528, 534, 602, 607, 610, 680, 1017, 1018], "n_features_in_": [374, 385, 417, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 613, 614, 615, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 780, 781, 782, 785, 786, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 1020, 1022, 1024], "slep010": [374, 1020], "duck": [374, 385, 1019], "boilerpl": [374, 991, 1002], "check_x_i": [374, 381, 1013, 1017, 1018, 1023], "check_arrai": [374, 381, 454, 520, 882, 1013, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "templateclassifi": 374, "demo_param": 374, "myestim": 374, "subestim": 374, "my_extra_param": 374, "my_estim": [374, 398], "subestimator__c": 374, "subestimator__class_weight": 374, "subestimator__du": 374, "subestimator__fit_intercept": 374, "subestimator__intercept_sc": 374, "subestimator__l1_ratio": 374, "subestimator__max_it": 374, "subestimator__multi_class": 374, "subestimator__n_job": 374, "subestimator__penalti": 374, "subestimator__random_st": 374, "subestimator__solv": 374, "subestimator__tol": 374, "subestimator__verbos": 374, "subestimator__warm_start": 374, "__c": 374, "__class_weight": 374, "unpack": 374, "easiest": [374, 380, 398, 964], "__repr__": [374, 988, 1018], "setattr": 374, "accomplish": [374, 395, 532, 964, 968, 970, 991], "deepcopi": 374, "__sklearn_clone__": [374, 420, 1025], "frozen": 374, "frozentransform": 374, "fitted_transform": [374, 450], "__getattr__": 374, "_estimator_typ": [374, 385, 1014], "regressormixin": [374, 385, 451, 1020], "clustermixin": 374, "is_classifi": [374, 385], "predict_log_proba": [374, 385, 535, 536, 537, 539, 541, 543, 545, 550, 579, 580, 644, 645, 662, 782, 785, 786, 796, 805, 819, 820, 821, 822, 823, 841, 844, 881, 886, 889, 892, 894, 982, 1009, 1022], "programmat": [374, 485, 1018], "_get_tag": [374, 1020], "allow_nan": [374, 903, 905, 1025], "binary_onli": [374, 1019, 1020], "multioutput_onli": 374, "no_valid": 374, "non_determinist": [374, 1023], "primari": [374, 385, 402, 501, 974, 991], "_safe_split": 374, "preserves_dtyp": 374, "poor_scor": 374, "requires_fit": 374, "requires_positive_x": [374, 1019, 1024], "requires_i": [374, 1020], "requires_positive_i": 374, "_skip_test": 374, "_xfail_check": 374, "check_nam": 374, "xfail": [374, 380], "skiptestwarn": 374, "x_type": 374, "2darrai": 374, "signifi": [374, 397, 567, 793, 972], "1dlabel": 374, "2dlabel": 374, "_more_tag": 374, "mymultioutputestim": 374, "_required_paramet": 374, "ridgeregress": 374, "idiosyncrat": 374, "subclass": [374, 407, 560, 933, 1014, 1017, 1022], "onetoonefeaturemixin": [374, 419], "classnameprefixfeaturesoutmixin": [374, 419, 1024], "auto_wrap_output_kei": 374, "mytransform": 374, "__init_subclass__": 374, "ownership": 374, "pep8": [374, 376, 380], "indent": [374, 933], "nsampl": [374, 780, 781], "statement": [374, 377, 380, 383, 385, 402, 985, 1002], "flow": 374, "client": 374, "corollari": 374, "foo": [374, 567, 971], "baz": [374, 567], "pyflak": 374, "asanyarrai": 374, "hadamard": 374, "choose_random_sampl": 374, "freestand": 374, "unmodifi": [374, 385], "random_state_": [374, 522, 613, 833, 1023], "gaussiannois": 374, "showcas": 374, "quasi": [374, 841, 842, 963], "assert_allclos": 374, "rtol": [374, 824, 825, 829], "atol": [374, 658, 660, 824, 825, 829], "checklist": 375, "unclaim": 375, "workflow": [375, 376, 384, 401], "boil": [375, 399], "markdown": 375, "saniti": [375, 848, 967, 1009, 1010], "outdat": 375, "diff": [375, 967], "valgrind": 375, "platform": [375, 383, 385, 386, 391, 991, 1014, 1017, 1018, 1020, 1022, 1023], "x86_64": [375, 388], "yep": 375, "gperftool": 375, "debugg": [375, 380], "gprof": 375, "callgrind": 375, "kcachegrind": 375, "warm": [375, 385, 517, 523, 529, 531, 532, 596, 639, 645, 652, 654, 662, 663, 664, 963, 988, 1019, 1021, 1023], "homebrew": [375, 388], "freebsd": 375, "rrrcn": 376, "pep101": 376, "build_tool": 376, "blocker": 376, "mileston": 376, "maint_tool": 376, "sort_whats_new": 376, "whats_miss": 376, "fixm": [376, 385], "feedstock": 376, "recip": [376, 964, 991], "yaml": 376, "whats_new": [376, 380], "v0": [376, 457, 458, 464, 498, 574, 575, 577, 782, 796, 843, 846, 1010, 1017, 1018, 1019], "freez": [376, 388, 391, 988, 991, 1017], "afterward": [376, 521, 527, 808], "0rc1": 376, "__version__": 376, "draft": [376, 386], "rebas": 376, "bugfix": [376, 1009, 1023], "backport": [376, 381, 1016], "maint": 376, "enh": 376, "blindli": 376, "invit": 376, "cherri": 376, "shortlog": 376, "f2": [376, 968], "sed": [376, 1009], "front": [376, 1016], "rc1": 376, "suffix": [376, 807, 967, 1019], "brows": 376, "3a": 376, "22wheel": 376, "pyproject": 376, "toml": 376, "oldest": [376, 482], "abi": 376, "acronym": 376, "deliveri": 376, "whl": 376, "22publish": 376, "went": [376, 967], "bot": [376, 972, 1023], "sync": 376, "testpypi": 376, "tarbal": [376, 1024], "wheelhouse_upload": 376, "twine": 376, "rrr": 376, "symlink": 376, "latestst": 376, "tmp": 376, "ln": [376, 963, 971, 977], "versionwarn": 376, "secur": [376, 385, 987, 988, 991, 1004], "twitter": 376, "linkedin": 376, "squash": [376, 407, 517, 523, 528, 534], "authorship": 376, "permalink": 376, "_hist_gradient_boost": 376, "_iter": 376, "pickl": [376, 385, 391, 405, 574, 575, 577, 824, 825, 987, 988, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024, 1025], "checker": [376, 804], "type_check": 376, "test_enable_hist_gradient_boost": 376, "enable_hist_gradient_boost": [376, 1018], "enable_my_experimental_featur": 376, "indefinit": 376, "incentiv": 376, "workabl": 377, "stackoverflow": [377, 380, 383, 990], "blogpost": 377, "mcve": [377, 380, 383], "my_data": 377, "with_mean": [377, 864, 875, 977, 1017, 1022], "default_scor": 377, "other_scor": 377, "scrollbar": 377, "tripl": 377, "fenc": 377, "qualifi": 377, "a674e682c281": 377, "lda_featur": 377, "lda_model": 377, "n_topic": [377, 522, 1016], "minimalist": [377, 405, 990], "continuous_featur": 377, "positive_featur": 377, "invest": [378, 991], "idiom": 378, "crunch": 378, "performancetip": 378, "reimplement": [378, 385, 1015, 1019], "spottabl": 378, "amen": [378, 407, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 956], "cpp": 378, "engag": [378, 386], "tent": 378, "somewher": [378, 967, 1002], "prun": 378, "14496": [378, 1018], "ncall": 378, "tottim": 378, "percal": 378, "cumtim": 378, "lineno": 378, "042": 378, "_nls_subproblem": 378, "1263": 378, "157": 378, "_po": 378, "_initialize_nmf": 378, "_spars": 378, "_neg": 378, "337": 378, "hotspot": 378, "16159": [378, 1020], "840": 378, "2833": 378, "653": [378, 597, 600, 611], "_dotbla": 378, "1397": 378, "2780": 378, "167": [378, 1009], "064": [378, 975], "1542": 378, "2734": 378, "fromnumer": 378, "1185": 378, "lapack_lit": 378, "dgesdd": 378, "rewrit": [378, 983, 1001, 1009], "shallow": [378, 404, 547, 548, 899], "4x": [378, 1024], "line_profil": 378, "wire": [378, 520, 527], "profile_default": 378, "ipython_config": 378, "terminalipythonapp": 378, "interactiveshellapp": 378, "lprun": 378, "qtconsol": 378, "_nmf": 378, "137": [378, 1010], "73153": 378, "h_init": 378, "5863": 378, "172": [378, 479, 480, 635, 963], "nl": 378, "175": [378, 977], "112141": 378, "2336": 378, "wtv": 378, "16144": 378, "336": [378, 977], "wtw": 378, "113": [378, 1012], "1880": 378, "195133": 378, "305": 378, "grad": [378, 991], "495761": 378, "777": 378, "proj_gradi": 378, "2449": 378, "130": 378, "1474": 378, "4474": 378, "inner_it": 378, "83833": 378, "hn": 378, "194239": 378, "191": [378, 968], "48858": 378, "150407": 378, "gradd": 378, "193": [378, 404, 701, 771, 980], "515390": 378, "dqd": 378, "pin": 378, "memory_profil": [378, 388, 390], "memit": 378, "mprun": 378, "1e7": 378, "402344": 378, "standalon": [378, 644, 884, 990], "bianp": 378, "conda_prefix": 378, "pydebug": 378, "extra_cflag": 378, "dpy_debug": 378, "num_cor": 378, "dbg": 378, "fortun": [378, 404, 1002, 1022, 1023], "my_fil": 378, "callgrin": 378, "prof": 378, "encapsul": [379, 398], "artist": [379, 424, 618, 684, 686, 687, 688, 788, 898], "classmethod": [379, 424, 617, 618, 683, 684, 686, 687, 688, 788], "line_": [379, 424, 684, 686, 687, 688, 788], "gridspecfromsubplotspec": 379, "subplot_spec": 379, "get_subplotspec": 379, "ax_top_left": 379, "ax_top_right": 379, "ax_bottom": 379, "bounding_ax_": [379, 618], "lines_": [379, 618, 788], "contours_": [379, 618], "advic": [380, 407, 608, 609], "forth": 380, "userscript": 380, "tampermonkei": 380, "greasemonkei": 380, "shortcut": [380, 407], "pr_number": 380, "navig": [380, 1011], "overlai": [380, 618], "codecov": 380, "test_sparsifi": 380, "pdb": 380, "ipdb": [380, 1002], "pdbcl": 380, "terminalpdb": 380, "lf": 380, "ff": 380, "tb": [380, 557, 558, 559, 560, 561, 562, 563, 564], "runxfail": 380, "werror": 380, "mailman": 380, "listinfo": 380, "crowd": [380, 386, 964, 988, 990], "imped": 380, "attent": [380, 593, 594, 981], "pytb": 380, "stdin": [380, 1002], "perman": 380, "25163598": 380, "issuenumb": 380, "1506": 380, "volunt": 380, "establish": [380, 383, 386, 957], "clarifi": [380, 386, 776], "regression_test": 380, "0008": 380, "patienc": [380, 385], "manifest": [380, 964, 970], "fault": [380, 1017, 1019, 1021], "glibc": 380, "uniniti": 380, "trace": [380, 397, 410, 459, 461, 462, 465, 466, 467, 675, 679, 964, 1020], "supp": 380, "readm": [380, 405, 479], "my_test_script": 380, "mobil": 380, "deploy": [380, 987, 988, 991], "scalewai": 380, "aw": 380, "graviton": 380, "laptop": [380, 454, 882, 1023, 1024, 1025], "workstat": 380, "qemu": 380, "docker": [380, 391, 1022, 1023], "multiarch": 380, "ppc64le": 380, "filesystem": [380, 388, 1022], "pushd": 380, "wget": 380, "arm64v8": 380, "mount": 380, "privileg": 380, "pwd": 380, "reinit": 380, "bashrc": 380, "ephemer": 380, "evolv": [381, 1024], "as_float_arrai": 381, "column_or_1d": [381, 1020, 1024], "multitarget": 381, "multi_output": [381, 904], "safe_index": [381, 1019], "check_memori": [381, 385, 1016], "5488135": 381, "71518937": 381, "60276338": 381, "54488318": 381, "has_fit_paramet": 381, "randomized_range_find": [381, 1010, 1015], "arrayfunc": 381, "cholesky_delet": 381, "min_po": 381, "least_angl": 381, "fast_logdet": 381, "safe_sparse_dot": [381, 1019], "weighted_mod": 381, "sample_without_replac": [381, 1015], "n_popul": [381, 936], "sparsefunc": [381, 1022], "mean_variance_axi": [381, 1015, 1022], "sparsefuncs_fast": 381, "inplace_csr_row_normalize_l1": 381, "inplace_csr_row_normalize_l2": 381, "inplace_csr_column_scal": 381, "sort_graph_by_row_valu": [381, 1024], "single_source_shortest_path_length": 381, "dijkstra": [381, 674, 964], "graph_shortest_path": [381, 1022], "all_estim": [381, 1019, 1020, 1024], "all_displai": [381, 1024], "all_funct": [381, 1024], "is_multilabel": 381, "dict_learn": [381, 517, 523, 532, 1010, 1017, 1019, 1022, 1023, 1025], "gen_batch": [381, 925], "safe_mask": 381, "safe_sqr": 381, "murmurhash3_32": 381, "murmurhash3_x86_32": [381, 932], "cryptograph": 381, "lookup": [381, 932, 1018], "bloom": [381, 932], "384616559": 381, "3910350737": 381, "murmurhash": 381, "graphical_lasso": [381, 457, 458, 1017, 1025], "kit": 383, "toolbox": [383, 987, 991], "multilay": [383, 965], "kera": [383, 987], "forese": 383, "redesign": [383, 1009], "pystruct": [383, 987], "ssvm": 383, "seqlearn": 383, "4143": 383, "meanwhil": [383, 982], "pipegraph": 383, "squared_loss": [383, 1022], "undertak": 383, "discourag": [383, 388, 675], "slowli": [383, 385, 530, 921], "ordinarili": [383, 385], "corrobor": 383, "proof": [383, 404, 878, 979], "road": 383, "bridg": [383, 964, 987], "reproduct": [383, 963, 990], "guidanc": [383, 407], "gitter": [383, 985, 1016, 1017], "value_kei": [383, 899], "levenshtein": 383, "dna": [383, 614, 957], "rna": 383, "pain": 383, "suppli": [383, 397, 632, 904, 905, 970, 991, 1013, 1015, 1017, 1022], "leven": 383, "acctcctagaag": 383, "acctactagaagtt": 383, "gaatattaggccga": 383, "lev_metr": 383, "multiprocess": [383, 385, 933, 935, 970, 1009, 1017, 1023], "exec": 383, "nvidia": 383, "cuda": [383, 393], "reiniti": 383, "culprit": 383, "refus": [383, 874, 875], "forkserv": 383, "joblib_start_method": 383, "set_start_method": 383, "dozen": [384, 407], "newli": [384, 404, 449, 974, 1015, 1016, 1024], "leakag": [384, 385, 398, 1004], "disclos": 384, "entail": [384, 862, 864, 981], "r_squar": 384, "searchcv": [384, 1024], "tacit": 385, "inconsist": [385, 391, 405, 494, 495, 562, 886, 889, 908, 973, 982, 1004, 1009, 1014, 1015, 1016, 1017, 1019, 1022, 1024, 1025], "elsewher": [385, 448, 449, 457, 458, 464], "formal": [385, 386, 397, 404, 824, 825, 964, 967, 968, 971], "thereof": 385, "transduct": [385, 397, 879, 880, 988], "position": 385, "serial": [385, 987, 988, 1004, 1009, 1017, 1021], "unpickl": [385, 391, 562, 824, 825, 1015, 1021, 1025], "pep257": 385, "nuanc": 385, "flaw": [385, 404], "terminologi": [385, 1017], "est1": [385, 618], "est2": [385, 618], "exemplifi": 385, "_score": [385, 782, 796, 807, 967, 1009, 1022], "_loss": [385, 967], "divers": [385, 404], "abstract": [385, 402, 407, 604, 754, 987, 1009], "notfittederror": [385, 833, 951, 1013, 1015, 1018, 1019, 1025], "descriptor": [385, 494, 495], "hoc": 385, "spectral_embed": [385, 964, 1010, 1013, 1015, 1017, 1019, 1022, 1023, 1024], "maxabs_scal": [385, 853, 1017], "astrai": 385, "readthedoc": [385, 386], "entireti": 385, "shield": 385, "n_output": [385, 404, 414, 418, 419, 423, 428, 431, 451, 455, 468, 469, 470, 518, 520, 522, 523, 525, 528, 529, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 568, 569, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 614, 616, 619, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 656, 658, 659, 660, 661, 662, 664, 665, 707, 708, 713, 730, 731, 733, 735, 736, 738, 739, 770, 773, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 831, 833, 834, 835, 840, 841, 842, 843, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 861, 862, 863, 864, 876, 877, 879, 880, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 910, 938, 967, 968, 983, 1016, 1019], "n_target": [385, 400, 468, 469, 470, 471, 510, 542, 597, 629, 632, 633, 636, 637, 638, 639, 640, 642, 643, 646, 647, 648, 649, 650, 651, 657, 658, 659, 660, 661, 667, 668, 669, 670, 671, 672, 673, 968, 1021, 1023, 1025], "synonym": [385, 826, 827, 828, 834, 835, 836], "themat": 385, "alphanumer": [385, 574, 575, 577], "statistician": [385, 864], "prescrib": 385, "baggingclassifi": [385, 404, 542, 894, 957, 1012, 1015, 1016, 1017, 1020, 1024, 1025], "estimator__max_depth": [385, 956], "improp": [385, 1016], "pairwise_kernel": [385, 407, 438, 629, 750, 850, 965, 1009, 1016], "distancemetr": [385, 403, 824, 825, 970, 1017, 1021, 1022, 1023], "di": [385, 397, 402, 517, 523, 650, 671, 672, 877, 1013, 1022], "vectori": [385, 1019], "noun": 385, "rout": [385, 1023], "fit_param": [385, 419, 423, 428, 431, 451, 518, 520, 522, 523, 525, 528, 529, 535, 553, 555, 556, 568, 569, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 614, 616, 621, 624, 625, 626, 627, 628, 782, 785, 786, 788, 796, 805, 806, 807, 808, 809, 811, 816, 817, 818, 828, 833, 836, 840, 843, 844, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 861, 862, 863, 864, 876, 877, 1016, 1019, 1020, 1021, 1023, 1025], "venu": [385, 990], "broadli": [385, 397], "consolid": [385, 386, 1009], "coo": [385, 539, 540, 678, 851, 900, 904, 905, 970, 1010], "lil": [385, 539, 540, 851, 900, 926, 970], "csgraph": [385, 1022], "absent": [385, 405, 739, 805], "densifi": [385, 402, 644, 645, 652, 654, 662, 663, 664, 884, 957, 1011], "lossili": 385, "unnorm": [385, 522, 964, 1015, 1016], "encompass": [385, 436, 442, 541, 542, 964], "is_regressor": 385, "get_n_split": [385, 783, 784, 787, 789, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803], "estimatorcv": [385, 988], "loo": [385, 790, 1020], "type_of_target": [385, 851, 865, 968, 1023, 1024], "hashabl": [385, 852, 855, 978], "labelencod": [385, 555, 858, 978, 1009, 1017, 1024], "canonic": 385, "xxx": 385, "everywher": 385, "multilabelbinar": [385, 813, 848, 857, 968, 993, 1012, 1014, 1015, 1017, 1018], "nonetheless": [385, 967], "wherein": 385, "amber": 385, "return_cov": [385, 553, 554, 597, 844], "test_idx": 385, "_idx": 385, "label1": 385, "label2": 385, "class_label": [385, 543, 547, 550, 644, 645, 652, 654, 660, 661, 662, 892, 894, 910, 982], "bincount": [385, 401, 543, 547, 550, 644, 645, 652, 654, 660, 661, 662, 884, 886, 889, 892, 894, 909, 910, 1016], "rebalanc": 385, "compute_class_weight": [385, 1012, 1023], "check_cv": [385, 1014], "obei": [385, 965], "triangl": [385, 402, 429, 433, 445, 685, 965, 970], "concurr": [385, 405, 933, 1021, 1023], "unset": [385, 1017], "get_scor": [385, 718, 1016], "check_scor": 385, "uppercas": [385, 1022], "unavail": [385, 644, 645, 928, 1016, 1022], "deadlock": 386, "meritocrat": 386, "somebodi": 386, "unanim": 386, "emeritu": [386, 985], "recant": 386, "outreach": 386, "brand": [386, 388], "social": [386, 397, 991], "strateg": 386, "entiti": [386, 711, 741], "duti": 386, "resign": 386, "occasion": [386, 712, 1018], "escal": 386, "fallback": [386, 388, 812, 813, 967], "hereaft": 386, "lazi": [386, 405, 981, 1013], "opinion": 386, "slep020": 386, "veto": 386, "appeal": 386, "revis": [386, 656], "slep000": 386, "insuffici": [387, 966, 1001], "afraid": 388, "64bit": [388, 1009], "miniconda": 388, "administr": 388, "venvpython": 388, "venvsourc": 388, "activatesourc": 388, "activatesklearn": 388, "activatepip": 388, "learnpip": 388, "learnpip3": 388, "learnconda": 388, "installedpython3": 388, "virtualenvpython3": 388, "installedpython": 388, "virtualenvpython": 388, "installedconda": 388, "environmentpython": 388, "dnf": 388, "pacman": 388, "raspberri": 388, "lock": [388, 390, 933, 935], "19137": 388, "py3": 388, "apk": 388, "bind": [388, 1009, 1016, 1017], "buster": 388, "fedora30": 388, "pkgsrc": 388, "py39": 388, "intelex": [388, 987], "oned": 388, "sklearnex": 388, "plugin": 388, "appdata": 388, "usernam": 388, "windowsapp": 388, "environmenterror": 388, "errno": 388, "pythonsoftwarefound": 388, "7_qbz5n2kfra8p0": 388, "localcach": 388, "python37": 388, "292": [388, 404, 720], "data_nam": 388, "australian": 388, "data_vers": 388, "lift": 388, "regedit": 388, "menu": 388, "hkey_local_machin": 388, "currentcontrolset": 388, "longpathsen": 388, "broken": [388, 401, 585, 586, 621, 706, 900, 967, 983, 1012, 1016, 1017, 1018, 1020, 1023], "retrain": [391, 988, 1025], "inconsistentversionwarn": [391, 1025], "simplefilt": 391, "model_from_prevision_vers": 391, "original_sklearn_vers": [391, 562], "untrust": 391, "malici": 391, "unsupport": [391, 479, 1017, 1022], "inadvis": 391, "immut": 391, "snapshot": [391, 545, 546, 988], "portabl": 391, "alex": [391, 405, 982, 1009, 1012, 1017, 1019, 1020, 1021, 1023, 1024, 1025], "gaynor": 391, "sio": 391, "obj": [391, 553, 554, 928, 933], "get_untrusted_typ": 391, "unknown_typ": 391, "exchang": [391, 990], "markup": 391, "pmml": [391, 987], "onnx": [391, 987, 988], "xml": 391, "sklearn2pmml": [391, 987], "affero": 391, "gplv3": 391, "datastructur": [393, 1017, 1021], "namespac": 393, "array_api": 393, "x_np": 393, "y_np": 393, "x_cu": 393, "y_cu": 393, "devic": [393, 401, 568], "array_api_dispatch": [393, 454, 882], "_estimator_with_converted_arrai": 393, "transfer": [393, 963, 988], "_array_api": 393, "cupy_to_ndarrai": 393, "lda_np": 393, "torch": 393, "x_torch": 393, "y_torch": 393, "submatrix": [394, 412, 437, 439], "unusu": [394, 973, 977, 1017], "submatric": 394, "bipartit": [394, 439, 497, 972], "subgraph": 394, "a_n": 394, "lceil": [394, 973], "log_2": [394, 549, 973], "rceil": [394, 973], "bmatrix": 394, "u_2": 394, "u_": [394, 468, 469, 470], "n_column": [394, 437, 439], "inderjit": [394, 439], "blockwis": [394, 963], "bistochast": [394, 437], "l_": [394, 597, 638, 726, 967], "k_": [394, 407, 602, 605, 607, 610, 759, 977], "u_1": 394, "v_1": 394, "v_2": 394, "v_": [394, 405], "kluger": [394, 437, 499], "yuval": [394, 437], "microarrai": [394, 437, 499, 614, 957], "cap": [394, 397, 740, 967, 1018], "hochreit": [394, 705], "hungarian": [394, 705], "bodenhof": [394, 705], "fabia": [394, 705], "acquisit": [394, 705], "murphi": [395, 629, 960], "discriminatori": 395, "wilk": 395, "tricki": [395, 964], "logit": [395, 407, 644, 645, 963], "f_i": 395, "train_set": 395, "test_set": 395, "disjoint": [395, 397, 398, 423, 690, 716, 740, 742, 964], "platt": [395, 423, 886, 887, 889, 890, 982], "_i": [395, 404, 958, 963, 967, 971, 982], "_j": [395, 958], "f_j": [395, 975], "meteorologi": 395, "climatologi": 395, "precipit": 395, "wea": 395, "1990a": 395, "menon": 395, "ak": [395, 1023, 1024], "jiang": [395, 1013, 1020], "xj": 395, "vembu": 395, "ohno": 395, "machado": [395, 708], "703": [395, 499], "710": 395, "kull": [395, 967], "silva": [395, 674, 964, 1020, 1022], "filho": 395, "flach": [395, 967], "mario": [395, 1013, 1015, 1023, 1024, 1025], "w\u00fcthrich": 395, "merz": 395, "2023": [395, 1024], "actuari": 395, "refurbish": 396, "rough": [396, 973, 995], "uniti": 396, "lipschitz": [396, 979], "usecas": 397, "mu_j": 397, "coher": 397, "elong": 397, "lloyd": [397, 429, 433, 435, 445, 1023, 1024], "distant": [397, 678, 695, 970], "sergei": [397, 1011, 1015, 1016, 1017, 1018, 1019], "vassilvitskii": [397, 433, 446], "eighteenth": 397, "siam": [397, 401, 438, 446, 448, 521, 527], "industri": [397, 987], "predetermin": [397, 964], "scullei": 397, "19th": 397, "exemplar": [397, 426, 440, 1001], "sent": [397, 813], "leftarrow": [397, 971, 981], "foral": [397, 407, 599], "neq": [397, 967, 969, 977], "notin": 397, "hill": [397, 434, 447, 1019], "climb": [397, 434, 447], "maxima": [397, 407], "x_j": [397, 407, 600, 601, 605, 608, 609, 611, 958, 959, 963, 970, 982, 983], "dictat": 397, "solvabl": 397, "stella": [397, 438, 448], "jianbo": [397, 438, 448, 677], "shi": [397, 438, 448, 677], "anil": [397, 438, 448], "daml": [397, 438, 448], "victor": [397, 438, 448, 1016, 1019], "minden": [397, 438, 448], "lex": [397, 438, 448], "ying": [397, 438, 448, 1023], "adjac": [397, 402, 438, 448, 571, 572, 621, 677, 681, 926, 964, 970, 1001], "adjacency_matrix": 397, "ulrik": [397, 438, 448, 677], "von": [397, 438, 448, 677, 987, 1016, 1017], "luxburg": [397, 438, 448, 677], "jitendra": [397, 438, 448, 677], "malik": [397, 438, 448, 677], "walk": [397, 403, 1012], "marina": 397, "meila": 397, "ng": [397, 402, 677, 830, 971, 973, 1020], "jordan": [397, 402, 677, 780, 1019, 1020, 1023, 1024], "yair": [397, 677], "precondit": [397, 438, 448, 681, 983], "zhuzhunashvili": [397, 448], "forbid": [397, 404], "macroscop": 397, "occupi": [397, 967], "manhattan": [397, 427, 431, 436, 443, 685, 747, 756, 763, 764, 765, 831, 965, 970, 1013, 1018, 1025], "bisecting_strategi": [397, 429], "largest_clust": [397, 429], "biggest_inertia": [397, 429], "biggest": [397, 400, 402, 429], "steinbach": [397, 1024], "karypi": 397, "vipin": 397, "egin": 397, "minnesota": 397, "june": [397, 964, 1015], "weblog": 397, "abirami": 397, "mayilvahanan": 397, "emerg": [397, 991], "ijet": 397, "jian": 397, "xinyu": 397, "gou": 397, "baod": 397, "hebei": 397, "knee": 397, "triangular": [397, 449, 597, 964], "whichev": [397, 404, 432, 530, 547, 548, 619, 636, 640, 642, 650, 668, 669, 683], "conjunct": [397, 580, 782, 785, 786, 788, 796, 805, 806, 807, 808, 811, 934, 957, 963, 1024], "extract_dbscan": 397, "radius_neighbors_graph": [397, 408, 430, 826, 827, 828, 830, 832, 834, 835, 836, 837, 970, 1013, 1018, 1021], "ester": [397, 408, 430], "kriegel": [397, 408, 430, 436, 443, 830, 973], "sander": [397, 408, 430, 432, 436, 443, 830, 973, 1018, 1019], "xu": [397, 400, 408, 430, 981, 1022, 1023], "portland": [397, 408, 430], "aaai": [397, 408, 430, 819, 969], "revisit": [397, 408, 430], "schubert": [397, 408, 430, 436, 1013, 1014, 1017, 1018, 1020, 1021, 1022, 1023], "tod": [397, 408, 430], "lj2017": 397, "d_c": 397, "x_p": [397, 963], "d_m": 397, "x_q": 397, "g_": 397, "varepsilon": [397, 981, 982], "cm2013": 397, "mst": 397, "minimum_cluster_s": 397, "campello": [397, 432], "moulavi": [397, 432], "pei": [397, 1016], "tseng": 397, "cao": 397, "motoda": 397, "pakdd": 397, "lectur": [397, 630, 959, 986], "7819": [397, 1016], "berlin": [397, 402, 521, 682, 711, 741, 967], "heidelberg": [397, 402, 521, 682, 711, 741, 967], "mcinn": [397, 1015, 1016, 1017, 1019, 1020, 1025], "heali": 397, "icdmw": 397, "max_ep": [397, 436, 441, 443], "nearbi": [397, 970], "cluster_hierarchy_": [397, 436], "planar": 397, "peripheri": 397, "wall": 397, "ankerst": [397, 436, 443], "mihael": [397, 436, 443], "marku": [397, 436, 443, 1017, 1019, 1020, 1021], "breunig": [397, 436, 443, 830, 973], "han": [397, 428, 436, 443, 1009, 1017, 1018, 1022], "j\u00f6rg": [397, 436, 443, 1017], "sigmod": [397, 436, 443, 830, 973], "cft": 397, "lossi": 397, "cf": [397, 400, 428, 686, 963, 977, 988], "subclust": [397, 428], "till": [397, 428, 773, 967], "temporarili": [397, 1014], "farthest": 397, "brc": [397, 428], "tian": [397, 428, 1014, 1015, 1016], "raghu": [397, 428], "ramakrishnan": [397, 428], "maron": [397, 428], "livni": [397, 428], "sfu": [397, 428], "coursecentr": [397, 428], "459": [397, 428], "zhang96": [397, 428], "roberto": [397, 428], "perdisci": [397, 428], "jbirch": [397, 428], "java": [397, 428, 987], "satisfi": [397, 636, 640, 685, 703, 721, 722, 824, 825], "labels_pr": [397, 690, 691, 700, 701, 703, 716, 721, 722, 740, 742, 771, 778], "unadjust": [397, 967, 1021], "swap": [397, 402, 702, 721, 946, 947, 1009], "ri": [397, 691, 771], "c_2": [397, 964], "unord": [397, 404, 977], "esp": [397, 1009], "hubert": [397, 691, 701, 771], "arabi": [397, 691, 701, 771], "steinlei": [397, 691], "psycholog": [397, 691, 702], "agreement": [397, 690, 702, 740, 742, 778, 967], "22504": 397, "10526": 397, "u_i": [397, 468, 469, 470, 740], "v_j": [397, 740, 972], "veb2009": 397, "a_i": 397, "b_j": 397, "yat2016": 397, "average_method": [397, 690, 742, 1017], "vinh": [397, 690], "veb2010": 397, "strehl": 397, "joydeep": 397, "1162": 397, "153244303321897735": 397, "epp": [397, 690], "bailei": [397, 690], "26th": [397, 711, 741, 967], "1553374": 397, "1553511": 397, "9781605585161": 397, "csail": [397, 652, 653, 662, 821], "volume11": 397, "vinh10a": 397, "algesheim": 397, "tesson": 397, "30750": 397, "1038": 397, "srep30750": 397, "rosenberg": [397, 703, 722, 778], "hirschberg": [397, 703, 722, 778], "b2011": 397, "homogeneity_completeness_v_measur": [397, 1018], "n_k": [397, 536], "n_c": [397, 645], "julia": [397, 703, 722, 778], "media": [397, 991], "hila": 397, "becker": [397, 991, 1012, 1021], "fowlkes_mallows_scor": [397, 967, 1015, 1017], "fmi": [397, 716], "fp": [397, 698, 704, 716, 767, 768, 769, 772, 967], "fn": [397, 698, 704, 716, 767, 768, 769, 772, 967, 968], "47140": 397, "fowkl": [397, 716], "1983": [397, 716, 864], "tandfonlin": 397, "01621459": 397, "10478008": 397, "kmeans_model": 397, "1987": [397, 593, 594, 775, 776], "calinski_harabasz_scor": [397, 1017], "dispers": [397, 696, 710, 963], "n_e": 397, "mathrm": [397, 399, 402, 406, 963, 983], "b_k": 397, "w_k": [397, 963], "c_q": 397, "n_q": 397, "c_e": 397, "cali\u0144ski": 397, "1974": [397, 405, 696], "dendrit": [397, 696], "davies_bouldin_scor": [397, 1017], "6619": 397, "bould": 397, "c_i": [397, 970], "c_j": [397, 972], "s_i": [397, 977], "diamet": 397, "nonneg": [397, 402, 439, 524, 526, 533, 861], "s_j": 397, "max_": [397, 967], "1979": [397, 710, 754], "halkidi": 397, "batistaki": 397, "yanni": 397, "vazirgianni": 397, "michali": 397, "contingency_matrix": [397, 740, 1017], "pair_confusion_matrix": [397, 1021], "permit": [398, 453, 574, 575, 577, 782, 785, 786, 796, 806, 845, 846, 967, 968, 969, 1015], "clf__c": 398, "pca1": [398, 413], "svm1": 398, "77484909e": 398, "07058917e": 398, "pca2": [398, 413], "svm2": 398, "raw_target_regr": 398, "bypass": [398, 585, 632, 638, 892, 893, 894, 895], "check_invers": [398, 451, 848, 977, 1017, 1023, 1024], "caller": [398, 632, 633, 638, 646, 647, 648, 667, 874, 875, 935, 943, 944, 945, 1018], "linear_pca": 398, "make_union": [398, 843, 1012, 1016], "incorpor": [398, 404, 966, 987, 991], "unreli": 398, "citi": [398, 405, 452, 1002], "london": [398, 405, 452], "sallisaw": [398, 452], "bow": 398, "moveabl": 398, "feast": 398, "grape": 398, "wrath": 398, "expert_r": 398, "user_r": 398, "city_categori": 398, "title_bow": 398, "city_london": 398, "city_pari": 398, "city_sallisaw": 398, "507": 398, "ignored_new_col": 398, "estimator_html_repr": [398, 1020, 1021, 1022, 1023], "shrunk_covari": 399, "sigma_": [399, 630, 631, 1022], "wiesel": [399, 410, 461], "eldar": [399, 410, 461], "hero": [399, 410, 461], "5016": [399, 410, 461], "5029": [399, 410, 461], "_k": [399, 961, 963], "glasso": [399, 464], "biostatist": [399, 464], "uncommon": [399, 644, 884, 982], "downweight": [399, 522], "driessen": [399, 455, 460, 973], "fastmcd": [399, 455, 460], "raw_location_": [399, 455, 460], "raw_covariance_": [399, 455, 460], "multidimension": [400, 674, 676, 678, 680, 964, 970], "plsw2a": 400, "u_k": [400, 402], "v_k": [400, 402, 517, 523, 531, 532], "x_k": [400, 402, 961, 970], "y_k": [400, 977], "xi_k": 400, "omega_k": [400, 961], "gamma_k": 400, "delta_k": 400, "nipal": [400, 469, 470], "xp": [400, 859], "x_rotations_": [400, 468, 469, 470], "y_rotations_": [400, 468, 469, 470], "ty": 400, "x_weights_": [400, 468, 469, 470, 471], "y_weights_": [400, 468, 469, 470, 471], "yv": 400, "tx": 400, "pls1": [400, 470], "pls2": [400, 470], "tx_k": [400, 961], "ty_k": 400, "ja": [400, 1016], "wegelin": 400, "methodolog": [401, 990], "academ": [401, 991], "commerci": [401, 991], "flowchart": [401, 995], "f1_macro": [401, 967, 1013], "custom_cv_2fold": 401, "custom_cv": 401, "9333": 401, "scorer1_nam": 401, "scorer2_nam": 401, "return_indic": [401, 807, 1025], "precision_macro": [401, 997], "recall_macro": [401, 967], "test_precision_macro": 401, "test_recall_macro": 401, "prec_macro": 401, "rec_macro": 401, "test_prec_macro": 401, "test_rec_macro": 401, "train_prec_macro": 401, "train_rec_macro": 401, "undistinguish": 401, "kf": [401, 787], "12883823": 401, "rkf": [401, 797], "weigh": [401, 1016], "caveat": [401, 407], "part3": 401, "spector": 401, "submodel": 401, "kohavi": 401, "jnt": 401, "bharat": [401, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "rao": [401, 1021, 1024], "fung": 401, "rosal": 401, "witten": 401, "leavepout": [401, 790, 997], "ss": 401, "gkf": 401, "sgkf": [401, 800], "suboptim": [401, 686, 688, 767, 774, 970, 1017, 1025], "leavepgroupsout": [401, 784, 997, 1015], "n_group": [401, 791, 997, 1015], "lpgo": [401, 791], "gss": [401, 784], "withheld": 401, "predefinedsplit": [401, 997, 1013], "test_fold": [401, 795], "train_indx": 401, "test_indx": 401, "autocorrel": 401, "superset": [401, 803, 967], "surplu": 401, "tscv": [401, 803], "inbuilt": 401, "some_integ": 401, "n_cv": [401, 423], "isotropi": 402, "alik": [402, 965], "halko": [402, 521, 527, 530, 920, 921], "szlam": [402, 920, 921], "disadvantag": [402, 407, 963, 964, 971, 981, 982, 983], "parsimoni": [402, 977], "jen09": 402, "mrl09": 402, "ell_1": [402, 963], "underset": [402, 963, 970, 983], "operatornam": [402, 726, 963, 967, 983], "fro": [402, 524, 526, 533, 679, 963], "gentli": 402, "spirit": 402, "mairal": [402, 517, 523], "bach": [402, 517, 522, 523, 524, 644, 963], "ponc": [402, 517, 523], "sapiro": [402, 517, 523], "jenatton": 402, "obozinski": 402, "scholkopf1997": 402, "bakir2003": 402, "smola": [402, 405, 521, 850, 977, 982], "klau": [402, 521, 850], "eigendecompos": 402, "eigensolv": [402, 438, 448, 521, 530, 681, 964], "eigsh": [402, 521, 1015, 1016], "lehoucq": 402, "sorensen": 402, "lsa": [402, 530, 1011], "synonymi": 402, "polysemi": 402, "lsi": 402, "sigma_k": [402, 961], "columnwis": 402, "sublinear": [402, 576, 577], "use_idf": [402, 405, 576, 577, 1002], "textual": [402, 983, 1018], "man": [402, 576, 754, 819, 823, 965, 967, 969], "prabhakar": 402, "raghavan": [402, 576, 819, 823, 965, 967, 969], "hinrich": 402, "sch\u00fctze": [402, 576, 965, 967, 969], "transform_method": 402, "split_cod": 402, "dictionarylearn": [402, 523, 525, 526, 528, 529, 530, 531, 532, 1010, 1014, 1016, 1019, 1022, 1023, 1024, 1025], "overcomplet": 402, "mammalian": 402, "cortex": 402, "inpaint": 402, "h_i": [402, 972], "psi": 402, "sim": [402, 1000], "wh_i": 402, "ww": 402, "superflu": 402, "psi_1": 402, "psi_2": 402, "psi_n": 402, "superimpos": 402, "plug": [402, 963, 991, 1002], "wh": [402, 524, 526, 533], "hoyer": [402, 1012], "nndsvd": [402, 524, 526, 533, 1018, 1021], "nndsvdar": [402, 524, 526, 533, 1018], "elementwis": [402, 524, 526, 533], "_featur": [402, 524, 526, 533], "kl": [402, 964, 1017], "itakura": [402, 524, 526, 533, 1016], "saito": [402, 524, 526, 533, 1016], "w_new": 402, "forget_factor": [402, 524], "lee": [402, 1009, 1010, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1024], "seung": 402, "boutsidi": 402, "gallopoulo": 402, "cichocki": [402, 524, 526, 533], "phan": 402, "fevott": [402, 524, 526, 533], "idier": [402, 524, 526, 533], "lefevr": [402, 524], "corpora": 402, "hoffman": [402, 522, 1014, 1021], "unshad": 402, "beta_k": 402, "eta": [402, 522, 662, 663, 664, 971, 981, 1014], "topic_word_prior": [402, 522], "theta_d": 402, "doc_topic_prior": [402, 522], "z_": 402, "w_": [402, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 963, 967, 969, 972], "beta_": 402, "elbo": 402, "overset": [402, 974], "e_": 402, "blei": [402, 522, 780], "wang": [402, 522, 665, 675, 679, 711, 741, 963, 964, 967, 1012, 1014, 1015, 1016, 1017, 1021, 1024], "paislei": [402, 522], "kaiser": [402, 518], "talli": 403, "disproportion": 403, "41075698": 403, "41076071": 403, "rho_k": 403, "unsmooth": 403, "scott": [403, 829, 1009, 1010, 1015, 1017, 1018, 1019, 1024], "silvermann": 403, "propto": [403, 969], "2h": 403, "angular": [403, 678, 749], "contin": [403, 700, 977], "generaliz": 404, "flavour": 404, "b1999": 404, "b1996": 404, "h1998": 404, "lg2012": 404, "bootstrap_featur": [404, 541, 542], "844": [404, 541, 542], "geurt": [404, 541, 542, 543, 544, 551, 552, 894, 895], "b1998": 404, "decoupl": [404, 969], "cancel": [404, 405, 748], "b2001": 404, "bear": [404, 987], "ernst": [404, 543, 544, 551, 552, 894, 895], "wehenkel": [404, 543, 544, 551, 552, 894, 895], "l2014": 404, "lieg": 404, "freund": [404, 539, 540], "fs1995": 404, "w_1": [404, 963, 971], "w_2": [404, 963, 971], "w_n": 404, "w_i": [404, 958, 967], "reappli": 404, "htf": 404, "zzrh2009": 404, "d1997": 404, "semin": 404, "friedman2001": 404, "shelf": 404, "ecologi": 404, "lightgbm": [404, 547, 548, 1018, 1025], "nr": 404, "f_m": 404, "h_m": 404, "f_": [404, 621, 967], "l_m": 404, "taylor": [404, 1017, 1019, 1020, 1023], "g_i": [404, 635], "absolute_error": [404, 544, 546, 548, 551, 657, 893, 895, 1022], "sum_m": 404, "softmax": [404, 547, 644, 645, 963, 970, 971], "superior": 404, "ineffici": [404, 429, 560, 812, 813, 970, 972], "r2007": 404, "friedman2002": 404, "1189": 404, "1232": 404, "367": [404, 1009], "8965": 404, "grower": [404, 547, 548], "missing": [404, 613, 614, 616, 1018], "fisher1958": 404, "loan": [404, 520, 963, 991], "nevertheless": 404, "mayer2022": 404, "mayer": [404, 1021, 1023], "bourassa": 404, "hoesli": 404, "scognamiglio": 404, "valuat": 404, "tianqi": 404, "guestrin": 404, "ke": [404, 1020, 1021], "boostingdecis": 404, "w2": 404, "w3": 404, "lr__c": 404, "rf__n_estim": 404, "w1992": 404, "knr": 404, "stack_method": [404, 553], "286": 404, "225": 404, "126": 404, "stack_method_": [404, 553, 554], "final_layer_rfr": 404, "final_layer_gbr": 404, "final_lay": 404, "multi_layer_regressor": 404, "wolpert": [404, 553, 554], "241": [404, 553, 554], "dubai": 405, "francisco": [405, 979], "movi": [405, 994], "movie_entri": 405, "thriller": [405, 855], "drama": 405, "000e": 405, "003e": 405, "011e": 405, "974e": 405, "unseen_featur": [405, 567], "speech": [405, 967], "chunker": 405, "pos_window": 405, "pos_vector": 405, "1x6": 405, "part_of_speech": 405, "token_featur": 405, "isupp": 405, "uppercase_initi": 405, "all_uppercas": 405, "raw_x": [405, 568], "pos_tagg": 405, "comprehens": [405, 743, 744, 965, 991, 1017], "murmurhash3": [405, 568, 575, 932], "weinberg": 405, "modulo": [405, 1020], "kilian": [405, 1024], "anirban": 405, "dasgupta": [405, 432, 878, 979], "langford": [405, 674, 964], "josh": [405, 1016], "attenberg": 405, "multitask": [405, 968], "punctuat": [405, 574, 575, 577], "diminish": 405, "4x9": 405, "build_analyz": [405, 574, 575, 577, 1019], "interrog": 405, "bigram_vector": 405, "cool": [405, 1009], "feature_index": 405, "him": 405, "constru": 405, "nqy18": 405, "smooth_idf": [405, 576, 577], "_n": [405, 967], "textbook": [405, 576], "6x3": 405, "81940995": 405, "57320793": 405, "47330339": 405, "88089948": 405, "58149261": 405, "81355169": 405, "term1": 405, "term2": 405, "term3": 405, "0986": [405, 848], "819": 405, "8473": 405, "8515": [405, 1016], "5243": 405, "85151335": 405, "52433293": 405, "55422893": 405, "83236428": 405, "63035731": 405, "77630514": 405, "idf_": [405, 576, 577, 1017], "western": 405, "europ": [405, 977], "koi8": 405, "russian": 405, "modern": [405, 454, 489, 576, 676, 680, 715, 882, 964, 988, 1025], "unicodedecodeerror": [405, 574, 575, 577], "told": 405, "silent": [405, 567, 840, 977, 1014, 1015, 1017, 1018, 1022, 1023], "chardet": 405, "chardetect": 405, "damag": 405, "sloppili": 405, "ftfy": 405, "mish": 405, "mash": 405, "text1": 405, "sei": 405, "mir": 405, "gegr": 405, "xc3": 405, "xbc": 405, "x9ft": 405, "mein": 405, "sauerkraut": 405, "text2": 405, "holdselig": 405, "sind": 405, "dein": 405, "ger": 405, "xfcche": 405, "text3": 405, "xff": 405, "xfea": 405, "x00u": 405, "x00f": 405, "x00": 405, "x00l": 405, "xfc": 405, "x00g": 405, "x00e": 405, "x00n": 405, "x00d": 405, "x00a": 405, "x00h": 405, "x00r": 405, "x00z": 405, "x00i": 405, "x00b": 405, "x00c": 405, "x00t": 405, "x00o": 405, "spolski": 405, "nnmf": [405, 1003, 1004, 1009], "phrase": 405, "misspel": 405, "rescu": 405, "resili": 405, "wprd": 405, "ngram_vector": 405, "char_wb": [405, 574, 575, 577], "rd": 405, "wo": 405, "wp": [405, 643, 657], "char": [405, 574, 575, 577, 1009], "jumpi": 405, "fox": 405, "1x4": 405, "umpi": 405, "1x5": 405, "mpy": 405, "fo": 405, "barrier": 405, "hv": 405, "4x10": 405, "discrep": [405, 1002, 1013], "4x1048576": 405, "collid": 405, "ingest": 405, "spend": 405, "my_token": 405, "lowercas": [405, 413, 428, 429, 431, 433, 435, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 574, 575, 577, 625, 626, 627, 628, 674, 675, 678, 828, 833, 836, 840, 845, 850, 876, 877, 1022], "lucen": 405, "build_preprocessor": [405, 574, 575, 577, 1019], "whitespac": 405, "fanci": 405, "lemmat": 405, "nltk": [405, 986, 987], "word_token": 405, "wordnetlemmat": 405, "lemmatoken": 405, "wnl": 405, "british": 405, "spell": 405, "to_british": 405, "1or": 405, "bt": 405, "1er": 405, "ing": 405, "ation": 405, "1z": 405, "ogu": 405, "og": 405, "customvector": 405, "asian": 405, "one_imag": [405, 570], "fake": 405, "assert_array_equ": 405, "patchextractor": [405, 1025], "five_imag": 405, "variancethreshold": [406, 849, 957, 1012, 1019, 1022, 1025], "sel": 406, "selectfdr": [406, 578, 582, 584, 585, 586, 592, 1013, 1015, 1016, 1025], "selectfw": [406, 578, 581, 582, 585, 586, 592, 1025], "genericunivariateselect": [406, 581, 582, 584, 585, 586, 588, 1023, 1025], "r_regress": [406, 592, 1022, 1023], "nonparametr": [406, 593, 594], "bewar": 406, "importance_gett": [406, 579, 580, 583, 1021], "unimport": 406, "lsvc": 406, "baraniuk": 406, "isr": 406, "ist": 406, "utl": 406, "aguiar": 406, "cs_note": 406, "ferri": [406, 967], "versatil": [407, 982, 991], "optima": 407, "markov": [407, 597, 972, 987, 1009], "ppmv": 407, "197": 407, "0336": 407, "4ppm": 407, "27ppm": 407, "197ppm": 407, "nuisanc": 407, "one_vs_on": [407, 596, 968], "ingredi": 407, "duv2014": 407, "theta_l": 407, "x_bound": [407, 603], "operand": 407, "k1__": 407, "k2__": 407, "constant_valu": [407, 599, 603], "constant_value_bound": [407, 597, 599, 603], "k1__k1__constant_valu": 407, "value_typ": [407, 603], "n_element": [407, 603], "k2__length_scal": 407, "k1": [407, 607, 610], "k1__k1": 407, "k1__k1__constant_value_bound": 407, "k1__k2": 407, "k1__k2__length_scale_bound": 407, "k2": [407, 607, 610], "k2__length_scale_bound": 407, "69314718": [407, 598, 977], "30258509": 407, "interoper": [407, 985, 988, 1004], "pairwisekernel": 407, "_valu": [407, 599], "_level": [407, 611], "k_1": [407, 607, 610], "k_2": [407, 607, 610], "__add__": [407, 610], "__mul___": 407, "__pow__": [407, 602], "2l": [407, 608], "bigg": [407, 605], "bessel": [407, 605], "rightarrow": [407, 605, 971], "quad": [407, 970, 981], "tfrac": 407, "3l": 407, "pp84": 407, "x_d": [407, 600], "inhomogen": [407, 600], "expon": [407, 602, 662, 663, 664, 794, 841, 842, 859, 956], "carl": [407, 596, 597, 600, 605, 608], "rasmussen": [407, 596, 597, 600, 605, 608], "duvenaud": [407, 608, 609], "cookbook": [407, 608, 609], "minkowski": [408, 430, 436, 443, 674, 685, 763, 764, 765, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 970, 1009, 1012, 1023, 1024], "metric_param": [408, 430, 432, 436, 443, 674, 678, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 1013, 1016, 1023], "leaf_siz": [408, 430, 432, 436, 443, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836], "kd_tree": [408, 430, 436, 443, 674, 675, 826, 827, 828, 829, 830, 832, 834, 835, 836, 970, 1022], "balltre": [408, 430, 432, 436, 443, 674, 675, 685, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 964, 1009, 1011, 1013, 1017, 1022, 1025], "ckdtree": [408, 430, 1011], "inhibit": [408, 430], "core_sampl": 408, "n_core_sampl": [408, 430], "attract": [408, 430, 961, 970, 987], "fun": [409, 519, 991], "logcosh": [409, 519], "fun_arg": [409, 519], "w_init": [409, 519], "whiten_solv": [409, 519, 1024], "return_x_mean": 409, "compute_sourc": 409, "return_n_it": [409, 440, 445, 464, 531, 532, 632, 633, 638, 639, 646, 647, 648, 649, 667, 668, 669, 670, 671, 672, 673, 680, 1023], "cube": [409, 519], "my_g": [409, 519], "x_mean": 409, "AS": 409, "fortran": [409, 527, 632, 633, 638, 639, 646, 647, 648, 649, 651, 667, 670, 671, 672, 904, 905, 1009, 1012, 1013, 1017], "hyvarinen": [409, 519], "oja": [409, 519], "shrunk_cov": [410, 465, 467], "eq": [410, 461, 707, 708, 709], "subobject": [411, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 780, 781, 782, 785, 786, 796, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895], "row_ind": [412, 437, 439], "intp": [412, 437, 439], "col_ind": [412, 437, 439], "get_submatrix": [412, 437, 439], "pca0": 413, "_n_features_out": 413, "class_name0": [413, 428, 429, 431, 433, 435, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 625, 626, 627, 628, 674, 675, 678, 828, 833, 836, 840, 850, 876, 877], "class_name1": [413, 428, 429, 431, 433, 435, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 625, 626, 627, 628, 674, 675, 678, 828, 833, 836, 840, 850, 876, 877], "class_name2": [413, 428, 429, 431, 433, 435, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 625, 626, 627, 628, 674, 675, 678, 828, 833, 836, 840, 850, 876, 877], "feature_names_out": [413, 417, 428, 429, 431, 433, 435, 450, 468, 469, 470, 471, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 552, 553, 554, 555, 556, 567, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 613, 614, 615, 616, 621, 624, 625, 626, 627, 628, 674, 675, 678, 828, 833, 836, 840, 843, 844, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 1023], "harsh": [414, 423, 455, 535, 536, 537, 539, 541, 543, 545, 547, 550, 553, 555, 596, 644, 652, 654, 660, 661, 662, 812, 813, 814, 815, 819, 820, 821, 822, 823, 826, 831, 834, 841, 879, 880, 884, 886, 889, 892, 894, 1019, 1021, 1024], "n_samples_fit": [418, 451, 468, 469, 470, 540, 542, 544, 546, 548, 551, 554, 556, 597, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 664, 665, 674, 817, 818, 826, 827, 828, 830, 832, 834, 835, 836, 842, 885, 887, 890, 893, 895], "uniform_averag": [418, 451, 468, 469, 470, 540, 542, 544, 546, 548, 551, 554, 556, 597, 621, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 658, 659, 664, 665, 707, 708, 713, 730, 731, 733, 735, 736, 738, 770, 817, 818, 827, 835, 842, 885, 887, 890, 893, 895, 967, 1018], "n_features_new": [419, 428, 431, 518, 520, 522, 523, 525, 528, 529, 535, 553, 555, 556, 568, 569, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 614, 616, 621, 624, 625, 626, 627, 628, 833, 840, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 861, 862, 863, 864, 876, 877], "base_clf": 423, "calibrated_clf": 423, "927": 423, "x_calib": 423, "y_calib": 423, "prob_tru": [424, 425], "prob_pr": [424, 425], "ref_lin": 424, "alexandru": 425, "22nd": 425, "convergence_it": [426, 440], "hardcod": [426, 440, 1017], "affinity_matrix_": [426, 438, 677], "cluster_center_indic": [426, 440], "compute_full_tre": [427, 431, 1013], "compute_dist": [427, 431, 1021], "inferior": [427, 431, 1020], "n_leaves_": [427, 431], "n_connected_components_": [427, 431, 1018], "branching_factor": 428, "compute_label": [428, 435], "promot": [428, 694, 987, 1020, 1022], "redistribut": 428, "overwritten": [428, 518, 519, 520, 522, 527, 534, 593, 594, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 658, 660, 665, 667, 668, 669, 670, 672, 935, 937, 1022], "root_": 428, "_cfnode": 428, "cftree": 428, "dummy_leaf_": 428, "subcluster_labels_": 428, "centroids_": [428, 432, 831], "copy_x": [429, 433, 445, 521, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 658, 660, 665, 667, 668, 669, 670, 671, 1011, 1017, 1018], "smart": [429, 445, 446, 576], "k_init": [429, 445], "sse": 429, "bisect_mean": 429, "pooling_func": [431, 1017], "xred": 431, "cluster_selection_epsilon": 432, "max_cluster_s": 432, "cluster_selection_method": 432, "eom": 432, "store_cent": 432, "kdtree": [432, 436, 443, 674, 675, 824, 826, 827, 828, 829, 830, 832, 834, 835, 836, 1011, 1013, 1017, 1021, 1022], "excess": [432, 977, 1016], "medoid": 432, "overwrit": [432, 617, 993, 1009, 1020], "medoids_": 432, "zimek": 432, "chaudhuri": 432, "jaskowiak": 432, "malzer": 432, "baum": 432, "hybrid": [432, 635, 987], "dbscan_clust": 432, "border": [432, 1019], "unclust": 432, "socg2006": 433, "min_bin_freq": [434, 447], "cluster_al": [434, 447], "get_bin_se": 434, "orphan": [434, 447, 1009], "reassignment_ratio": 435, "eec": [435, 627], "tuft": 435, "dscullei": 435, "fastkmean": 435, "55102041": 435, "48979592": 435, "06896552": 435, "cluster_method": 436, "predecessor_correct": [436, 442], "unprocess": [436, 574, 575, 577], "heap": 436, "braycurti": [436, 443, 685, 763, 764, 765, 970], "canberra": [436, 443, 685, 763, 764, 765, 970], "chebyshev": [436, 443, 685, 763, 764, 765, 970], "dice": [436, 443, 685, 763, 764, 765, 970], "kulsinski": [436, 443, 685, 763, 764, 765], "rogerstanimoto": [436, 443, 685, 763, 764, 765, 970], "russellrao": [436, 443, 685, 763, 764, 765, 970], "seuclidean": [436, 443, 685, 763, 764, 765, 831, 970, 1017, 1020, 1021], "sokalmichen": [436, 443, 685, 763, 764, 765, 970], "sokalsneath": [436, 443, 685, 763, 764, 765, 970], "yule": [436, 443, 763, 764, 765], "manhattan_dist": [436, 443, 674, 747, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 1009, 1019, 1024, 1025], "minkowski_dist": [436, 443, 674, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838], "l_p": [436, 443, 674, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838], "upward": [436, 442], "successor": [436, 442, 983, 987], "predecessor": [436, 442, 443], "predecessor_": [436, 443], "erich": [436, 1013, 1014, 1017, 1018, 1020, 1021, 1022, 1023], "gertz": 436, "lernen": 436, "wissen": 436, "daten": [436, 1017, 1018], "analysen": 436, "lwda": 436, "329": 436, "n_best": 437, "n_svd_vec": [437, 439], "mini_batch": [437, 439], "n_row_clust": [437, 439, 499], "n_column_clust": [437, 439, 499], "ncv": [437, 439], "n_oversampl": [437, 439, 527, 530, 921, 1023], "kernel_param": [438, 521, 625, 629], "precomputed_nearest_neighbor": [438, 677], "eigendecomposit": [438, 448, 659, 677, 681, 850], "dist_matrix": 438, "csc_matrix": [438, 543, 544, 549, 550, 551, 552, 861, 892, 893, 894, 895, 957, 977, 983, 1014], "best_n_it": 445, "n_local_tri": 446, "n_seed": 447, "multigrid": 448, "multiscal": 448, "preliminari": 448, "heapq": 449, "topolog": [449, 987], "n_connected_compon": 449, "n_leav": [449, 892, 893, 894, 895], "untransform": [450, 453, 978], "transformers_": 450, "remaining_column": 450, "named_transformers_": 450, "sparse_output_": [450, 537], "output_indices_": [450, 1022], "datatyp": [450, 452, 1016, 1019], "norm1": 450, "norm2": 450, "text_preprocess": 450, "num_preprocess": 450, "x_t": [450, 613, 843], "sum_n_compon": [450, 843], "transformer_": 451, "predict_param": [451, 553, 554, 844, 1022], "y_hat": 451, "90453403": 452, "50755672": 452, "30151134": 452, "print_changed_onli": [454, 882, 1018, 1020, 1021], "pairwise_dist_chunk_s": [454, 882], "enable_cython_pairwise_dist": [454, 882], "skip_parameter_valid": [454, 882, 1025], "cache_s": [454, 882, 886, 887, 888, 889, 890, 982], "get_config": [454, 766, 882, 934, 1024], "offset_": [455, 549, 663, 830, 888, 1017], "raw_support_": [455, 460], "dist_": [455, 460], "true_cov": [455, 457, 458], "7411": [455, 460, 1015], "2535": [455, 460], "3053": [455, 460], "0813": [455, 460], "0427": [455, 460], "correct_covari": [455, 460], "rvd": [455, 460], "covariance_correct": [455, 460], "comp_cov": [455, 456, 457, 458, 459, 460, 461, 462], "get_precis": [455, 456, 457, 458, 459, 460, 461, 462, 518, 520, 527], "is_inli": [455, 549, 830], "reweight_covari": [455, 460], "rvdriessen": [455, 460], "location_reweight": [455, 460], "covariance_reweight": [455, 460], "support_reweight": [455, 460], "negative_mahal_dist": 455, "7569": 456, "2818": 456, "3928": 456, "0622": [456, 462], "0193": [456, 462], "enet_tol": [457, 458, 464, 1014], "220446049250313e": [457, 458, 464, 636, 637, 640, 641, 642, 668, 669], "graphlasso": [457, 1014, 1017], "costs_": [457, 458, 1025], "dual_gap": [457, 458, 464, 632, 633, 638, 639, 646, 647, 648, 649, 667, 670], "return_cost": [457, 458, 464], "049": 457, "034": 457, "038": [457, 458, 841], "n_refin": 458, "graphlassocv": [458, 1011, 1017], "dualiti": [458, 963], "051": 458, "block_siz": [459, 465, 466, 1013], "4406": 459, "1616": 459, "0595": 459, "0075": [459, 527], "rouseeuw1984": 460, "butlerdavi": 460, "butler": [460, 1012, 1020, 1021], "davi": [460, 710, 967, 1013], "jhun": 460, "1385": 460, "7533": [461, 1016], "2763": 461, "3964": 461, "7833": 461, "2431": 461, "3889": 461, "0195": 461, "7387": 462, "2536": 462, "4110": 462, "cov_init": [464, 1025], "graph_lasso": [464, 1017], "x_loadings_": [468, 469, 470], "y_loadings_": [468, 469, 470], "plssvd": [468, 469, 989, 1004, 1021, 1023], "x_c": [468, 469, 471, 974], "y_c": [468, 469, 471], "y_reconstruct": [468, 469, 470], "x_scores_": [470, 1021], "y_scores_": [470, 1021], "y_transform": 471, "data_hom": [472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 1016], "sklearn_learn_data": [472, 485], "zero_bas": [473, 494, 495], "query_id": [473, 494, 495], "grok": 473, "qid": [473, 494, 495, 1010, 1015], "download_if_miss": [474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 1016], "ioerror": [474, 475, 476, 477, 478, 479, 480, 481, 483, 484], "stopword": [475, 1002], "target_column": [475, 476, 482], "percent": [478, 586, 980], "494021": 478, "slice_": [479, 480, 1024], "195": [479, 480], "unrestrict": 479, "2914": 480, "5748": 480, "n_retri": [482, 1023], "timeout": [482, 933, 1023], "ith": [482, 759, 763, 820, 841, 842, 857, 858], "1592": 484, "1212": 484, "1624": 484, "620": 484, "data_filenam": [487, 491], "target_filenam": [487, 491], "container_path": 489, "load_cont": 489, "allowed_extens": 489, "container_fold": 489, "category_1_fold": 489, "file_1": 489, "file_2": 489, "file_42": 489, "category_2_fold": 489, "file_43": 489, "file_44": 489, "mod": 489, "image_nam": 492, "first_img_data": 493, "backup": [494, 1009], "instantan": 494, "mycach": 494, "get_data": 494, "mysvmlightfil": 494, "xn": 495, "yn": [495, 968, 969], "q1": 495, "qn": 495, "yi": [495, 969, 1013, 1017, 1018, 1021], "qi": [495, 1021], "triplet": 495, "minval": [497, 499], "maxval": [497, 499], "seventh": [497, 979], "274": 497, "return_cent": [498, 1020], "intric": 498, "basri": 499, "gerstein": 499, "genom": 499, "716": 499, "flip_i": 501, "interdepend": 501, "polytop": 501, "guyon": [501, 579, 580, 967], "madelon": 501, "1991": [502, 503, 504], "12000": 506, "effective_rank": [507, 510], "tail_strength": [507, 510], "bell": [507, 1017, 1019, 1021, 1022], "fat": [507, 510], "crawl": [507, 913], "return_ind": 509, "make_low_rank_matrix": 510, "4967": 510, "1382": 510, "6476": 510, "2341": 510, "4694": 510, "5425": 510, "579": 510, "7674": [510, 1016], "4017": 510, "data_transpos": [512, 1023, 1025], "norm_diag": 513, "make_spd_matrix": 513, "celeux": 514, "el": [514, 1022, 1024], "anbari": 514, "marin": 514, "frequentist": 514, "n_dim": [515, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611], "marsland": 516, "vuw": 516, "nz": 516, "marslast": 516, "ch6": 516, "code_init": [517, 531], "dict_init": [517, 523, 531, 532], "callback": [517, 523, 525, 531, 532, 833, 933, 988, 1025], "split_sign": [517, 523, 528], "transform_max_it": [517, 523, 524, 528, 1019], "_fro": [517, 523, 531, 532, 632, 633, 638, 646, 647, 648, 667], "lasso_cd": [517, 523, 528, 534], "invok": [517, 523, 525, 531, 532, 553, 555, 556, 805, 881, 1021], "error_": [517, 529], "minibatchsparsepca": [517, 519, 523, 526, 528, 529, 531, 532, 1009, 1010, 1020, 1022, 1023, 1024, 1025], "sierra": [517, 523], "icml09": [517, 523], "x_hat": [517, 523], "noise_variance_init": 518, "quartimax": [518, 1021], "loglike_": 518, "barber": 518, "bishop": [518, 520, 527, 726, 780, 963, 968, 982], "get_covari": [518, 520, 527], "unmixing_matrix": 519, "whitening_": 519, "kpca": [519, 520, 521, 1003, 1004, 1009], "unsaf": 520, "singular_values_": [520, 527, 530, 1016], "var_": [520, 822, 864, 1022], "miketip": [520, 527], "mppca": [520, 527], "n_samples_seen_": [520, 853, 854, 864, 1017], "batch_size_": 520, "ross": [520, 593, 594, 983, 1023, 1024], "vision": [520, 743, 744, 959, 963, 965, 983, 987, 991, 1010], "141": [520, 884, 968], "toronto": [520, 630, 840], "dross": 520, "ivt": 520, "rosslimlinyang_ijcv": 520, "karhunen": 520, "loev": 520, "levi": [520, 1016], "lindenbaum": 520, "1371": 520, "1374": 520, "abstain": 520, "holub": 520, "opportun": [520, 981], "golub": [520, 822, 864], "x_spars": [520, 938, 941], "sigma2": [520, 527], "x_origin": [520, 525, 527, 529, 530, 616, 876, 877], "check_input": [520, 534, 632, 633, 638, 646, 647, 648, 667, 673, 892, 893, 894, 895, 1017], "remove_zero_eig": [521, 1011, 1018], "x_fit_": [521, 629], "eigenvalues_": [521, 1022], "eigenvectors_": [521, 1022], "dual_coef_": [521, 629, 886, 887, 888, 889, 890, 982, 1013], "x_transformed_fit_": 521, "gamma_": [521, 1025], "nathan": [521, 1017, 1021, 1024], "gunnar": [521, 921], "tropp": [521, 527], "vladimir": [521, 921, 963, 1019, 1023], "rokhlin": [521, 527, 921], "tygert": [521, 527, 921], "learning_decai": 522, "evaluate_everi": 522, "perp_tol": 522, "mean_change_tol": 522, "max_doc_update_it": 522, "kappa": [522, 702], "tau_0": 522, "pseudocount": [522, 1017], "exp_dirichlet_component_": 522, "n_batch_iter_": 522, "bound_": 522, "doc_topic_prior_": 522, "topic_word_prior_": 522, "franci": [522, 644, 963, 1015], "onlineldavb": 522, "chong": 522, "00360392": 522, "25499205": 522, "0036211": 522, "64236448": 522, "09541846": 522, "15297572": 522, "00362644": 522, "44412786": 522, "39568399": 522, "003586": 522, "vb": 522, "sub_sampl": 522, "doc_topic_distr": [522, 1016], "fresh_restart": 524, "fresh_restarts_max_it": 524, "_w": [524, 526, 533], "_ratio": [524, 526, 533], "_h": [524, 526, 533], "fresh": [524, 988, 1019], "reconstruction_err_": [524, 526], "andrzej": [524, 526, 533], "anh": [524, 526, 533], "ieic": [524, 526, 533], "721": [524, 526, 533], "waspa": 524, "ridge_alpha": [525, 529, 1016], "power_iteration_norm": [527, 530, 920, 921, 1023], "500x500": 527, "lu": [527, 530, 920, 921, 1015, 1016, 1017, 1018], "n_samples_": 527, "royal": [527, 613, 860, 872, 981], "methodologi": [527, 857, 957, 967, 991], "9924": 527, "30061": 527, "54980": 527, "00755": 527, "99244": 527, "ascontiguousarrai": 527, "sparse_encod": [528, 636, 637, 638, 639, 640, 641, 642, 649, 650, 651, 668, 669, 670, 671, 672, 1009, 1016, 1017, 1019, 1023], "u_init": 529, "v_init": 529, "9666": 529, "oversampl": [530, 1009], "indeterminaci": 530, "x_dens": 530, "0157": 530, "0512": 530, "0499": 530, "0479": 530, "0453": 530, "2102": 530, "2410": 530, "5981": 530, "5420": 530, "4486": 530, "3288": 530, "method_max_it": [531, 532, 1019], "dict_learning_onlin": [531, 1010, 1019, 1022, 1023], "return_cod": 532, "iter_offset": [532, 1023], "return_inner_stat": [532, 1023], "inner_stat": [532, 1023], "update_h": 533, "_n_compon": 533, "hal": [533, 644, 743, 744, 965], "copy_cov": 534, "orthogonal_mp": [534, 650, 651, 672, 963], "eigen": [535, 659, 677, 681, 961, 1015, 1018], "sum_k": [535, 983], "prior_k": 535, "c_k": 535, "priors_": [535, 536], "scalings_": [535, 536], "xbar_": 535, "reg_param": 536, "scaling_": 536, "colinear": 536, "rotations_": 536, "n_classes_": [537, 539, 541, 543, 545, 550, 596, 812, 813, 892, 894, 1010, 1019, 1021], "class_prior_": [537, 822], "n_outputs_": [537, 538, 543, 544, 550, 551, 552, 841, 842, 892, 893, 894, 895], "dummy_clf": 537, "constant_": 538, "dummy_regr": 538, "base_estimator_": [539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 596, 881, 1024], "983": [539, 713], "dok": [539, 540, 851, 1022], "staged_decision_funct": [539, 545, 547], "staged_scor": [539, 540], "7972": 540, "9771": 540, "estimators_samples_": [541, 542, 549, 1015, 1017, 1020], "estimators_features_": [541, 542, 549], "oob_decision_function_": [541, 543, 550], "oob_prediction_": [542, 544, 551], "8720": [542, 1017], "min_weight_fraction_leaf": [543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895, 983, 1012, 1015, 1016], "min_impurity_decreas": [543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895, 983, 1016], "shannon": [543, 550, 892, 894, 964, 983], "unlimit": [543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895], "n_t": [543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895], "n_t_r": [543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895], "right_impur": [543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895], "n_t_l": [543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895], "left_impur": [543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895], "balanced_subsampl": [543, 550, 1017], "subtre": [543, 544, 545, 546, 550, 551, 892, 893, 894, 895, 983], "unprun": [543, 544, 550, 551, 892, 893, 894, 895], "x_leav": [543, 544, 545, 546, 550, 551, 552, 892, 893, 894, 895], "n_nodes_ptr": [543, 544, 550, 551, 552], "friedman_ms": [544, 545, 546, 551, 893, 895, 983, 1025], "extratreeregressor": [544, 549, 552, 894, 973, 1018, 1019, 1020, 1022, 1023, 1024], "2727": 544, "dummyestim": [545, 546], "eras": [545, 546, 632, 638, 644, 646, 648, 652, 653, 654, 662, 663, 664, 841, 842], "oob_scores_": [545, 546, 1025], "init_": [545, 546], "init_estim": [545, 546], "max_features_": [545, 546, 583, 892, 893, 894, 895, 1023], "_fit_stag": [545, 546], "crossentropi": 547, "deepest": [547, 548, 1020], "no_interact": [547, 548, 1024], "do_early_stopping_": [547, 548], "n_trees_per_iteration_": [547, 548], "validation_score_": [547, 548], "is_categorical_": [547, 548], "n_trees_per_iter": 547, "max_samples_": 549, "fei": [549, 973], "ting": [549, 973, 1017, 1018], "ming": [549, 973, 1013, 1017, 1018, 1019, 1023], "zhou": [549, 625, 880, 973, 1017], "zhi": [549, 973], "hua": [549, 973], "icdm": [549, 973], "eighth": [549, 973], "tkdd": 549, "n_left": 549, "32987858": 551, "n_out": 552, "one_hot_encoder_": 552, "extratreeclassifi": [552, 895, 968, 1013, 1018, 1019, 1020, 1022, 1023, 1024], "moosmann": 552, "trigg": 552, "juri": 552, "random_tre": 552, "x_sparse_embed": 552, "randomtreesembedding_": 552, "final_estimator_": [553, 554], "named_estimators_": [553, 554, 555, 556, 1017, 1019], "named_estim": [553, 554, 555, 556], "parameter_nam": [553, 554, 555, 556], "new_valu": [553, 554, 555, 556], "linearsvr": [554, 890, 1013, 1015, 1020, 1025], "flatten_transform": [555, 1016], "le_": 555, "eclf1": 555, "array_equ": [555, 1016], "eclf2": 555, "eclf3": 555, "maj": 555, "probabilities_or_label": 555, "n_regressor": 556, "r1": 556, "r3": 556, "er": 556, "with_traceback": [557, 558, 559, 560, 561, 562, 563, 564], "__traceback__": [557, 558, 559, 560, 561, 562, 563, 564], "current_sklearn_vers": 562, "repr": [563, 1020, 1021, 1023], "linter": 565, "spam": [567, 695, 726, 819, 967, 969, 991], "feature_names_": 567, "xa": 567, "dict_typ": 567, "conform": [567, 614, 812, 813, 967, 987, 988, 1016, 1022], "1048576": [568, 575], "non_neg": [568, 1016], "eleph": 568, "bird": [568, 704, 739, 967], "patch_height": [569, 570, 573], "patch_width": [569, 570, 573], "img_height": 569, "img_width": 569, "pe": 569, "pe_tran": 569, "263758": 569, "image_height": [569, 570, 573], "image_width": [569, 570, 573], "n_channel": [569, 570, 573], "n_patch": [569, 570, 573], "272214": 570, "215": 570, "n_z": 571, "return_a": [571, 572, 1012], "_coo": [571, 572], "image_s": 573, "strip_acc": [574, 575, 577], "nfkd": [574, 575, 577, 1019], "unicodedata": [574, 575, 577], "regexp": [574, 575, 577], "min_n": [574, 575, 577, 1009], "max_n": [574, 575, 577, 1009], "fixed_vocabulary_": [574, 577], "stop_words_": [574, 577], "delattr": [574, 577, 1021], "vectorizer2": 574, "raw_docu": [574, 577], "get_stop_word": [574, 575, 577], "x_inv": [574, 577], "con": 575, "yates2011": 576, "baeza": [576, 715, 1012], "yate": [576, 715], "ribeiro": [576, 715, 1022], "neto": [576, 715], "addison": [576, 715], "weslei": [576, 715], "mrs2008": 576, "tfid": 576, "22314355": 576, "51082562": 576, "91629073": 576, "_check_stop_list": 577, "pvalu": [578, 581, 582, 584, 585, 586, 809], "k_best": [578, 881, 980], "fdr": 578, "fwe": 578, "iff": [578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 855], "retent": [578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "n_selected_featur": [578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "n_original_featur": [578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "attrgett": [579, 583], "barnhil": [579, 580], "vapnik": [579, 580], "n_subsets_of_featur": 580, "narrai": 580, "benjamini": [581, 1015, 1016], "hochberg": [581, 1015, 1016], "false_discovery_r": 581, "norm_ord": [583, 1016], "threshold_": [583, 1016], "3252302": 583, "83462377": 583, "49750423": 583, "55245": 583, "half_cal": 583, "half_selector": 583, "unspecifi": [585, 586, 784, 964], "_get_support_mask": 587, "n_features_to_select_": 588, "variances_": 589, "weed": 590, "p_valu": [590, 591, 592], "f_statist": [591, 592], "force_finit": [592, 595, 713, 770, 967, 1023], "pearson": [592, 595, 1022], "discrete_featur": [593, 594], "essenc": [593, 594, 728, 964, 967], "kraskov": [593, 594], "stogbauer": [593, 594], "grassberg": [593, 594], "phy": [593, 594], "kozachenko": [593, 594], "leonenko": [593, 594], "probl": [593, 594], "peredachi": [593, 594], "correlation_coeffici": 595, "fmin_l_bfgs_b": [596, 597], "max_iter_predict": 596, "copy_x_train": [596, 597], "one_vs_rest": [596, 968], "compoundkernel": [596, 1023], "obj_func": [596, 597], "initial_theta": [596, 597], "theta_opt": [596, 597], "func_min": [596, 597], "_posterior_mod": 596, "log_marginal_likelihood_value_": [596, 597], "9866": [596, 605, 608], "83548752": 596, "03228706": 596, "13222543": 596, "79064206": 596, "06525643": 596, "14410151": 596, "clone_kernel": [596, 597, 1019], "n_kernel_param": [596, 597], "log_likelihood_gradi": [596, 597], "x_train_": 597, "y_train_": 597, "3680": [597, 600, 611], "592": [597, 600, 611, 974], "y_cov": 597, "n_samples_x": [597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 685, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 759, 760, 761, 762, 763, 764, 765, 766], "requires_vector_input": [598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611], "51292546": 598, "09861229": [598, 977], "n_samples_i": [598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 685, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 759, 760, 761, 762, 763, 764, 765, 766], "n_kernel": 598, "k_gradient": [598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611], "k_diag": [598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611], "hyperparameter_constant_valu": 599, "3696": 599, "606": [599, 814, 968], "hyperparameter_sigma_0": 600, "edward": [600, 605, 608, 1012, 1017, 1018, 1019, 1020, 1024], "hyperparameter_length_scal": [601, 605, 608, 609], "hyperparameter_period": 601, "0144": 601, "457": 601, "3894": 601, "3467": 601, "419": 602, "namedtupl": [603, 1025], "maxsiz": 603, "mat\u00e9rn": 605, "appr": 605, "8513": 605, "1117": 605, "8086": [605, 1016], "0693": 605, "1220": 605, "gamma_bound": 606, "pairwise_kernels_kwarg": 606, "additive_chi2": [606, 624, 750, 759], "pairwise_kernel_funct": [606, 629, 759], "hyperparameter_gamma": 606, "9733": [606, 609], "8880": 606, "05663": 606, "05532": 606, "8676": [606, 1016], "07073": 606, "06165": 606, "__mul__": 607, "8354": [608, 1016], "03228": 608, "1322": 608, "7906": [608, 635], "0652": 608, "1441": 608, "hyperparameter_alpha": 609, "8881": 609, "0566": 609, "05518": 609, "8678": 609, "0707": 609, "0614": 609, "hyperparameter_noise_level": 611, "initial_strategi": 613, "imputation_ord": [613, 1019], "skip_complet": 613, "min_valu": [613, 1020, 1021], "max_valu": [613, 1020, 1021], "keep_empty_featur": [613, 614, 616, 957, 1024], "nullabl": [613, 614, 615, 616, 1020, 1024], "na": [613, 614, 615, 616, 754, 763, 902, 904, 905, 1019, 1020, 1023, 1024], "known_val": 613, "Nearness": 613, "arab": 613, "broadcast": 613, "missingind": [613, 614, 616, 957, 1017, 1018, 1019, 1023, 1025], "initial_imputer_": 613, "imputation_sequence_": 613, "feat_idx": 613, "neighbor_feat_idx": 613, "n_features_with_missing_": 613, "indicator_": [613, 614, 616], "knp": 613, "stef": [613, 957], "buuren": [613, 957], "karin": [613, 957], "groothui": [613, 957], "oudshoorn": [613, 957], "buck": 613, "1960": [613, 702], "imp_mean": [613, 616], "9584": [613, 1016], "nan_euclidean": [614, 747, 763], "_pairwise_cal": 614, "kwd": [614, 756, 759, 763, 766, 775, 776], "olga": [614, 957], "troyanskaya": [614, 957], "cantor": [614, 957], "gavin": [614, 957], "sherlock": [614, 957], "pat": [614, 957], "botstein": [614, 957], "russ": [614, 957], "altman": [614, 957], "bioinformat": [614, 957], "520": [614, 833, 957, 970], "n_output_featur": 614, "error_on_new": 615, "features_": [615, 957], "n_missing_featur": 615, "x2_tr": 615, "n_features_with_miss": 615, "statistics_": 616, "n_features_missing_ind": 616, "x_imput": 616, "n_features_out": 616, "quadcontourset": 617, "quadmesh": 617, "feature_1": [617, 897], "feature_2": 617, "nicer": 617, "pd_result": 618, "target_idx": 618, "decil": [618, 1020], "is_categor": 618, "pdp": [618, 974, 1023], "nonexist": 618, "deciles_vlines_": 618, "vlines_": 618, "deciles_hlines_": 618, "bars_": 618, "heatmaps_": 618, "pdp_lim": 618, "ice_lines_kw": 618, "pd_line_kw": 618, "contour_kw": 618, "disp1": 618, "disp2": 618, "pdp_line_kw": 618, "bar_kw": 618, "heatmap_kw": 618, "seq": 619, "n_values_feature_j": 619, "bre": [620, 983], "4666": 620, "2211": 620, "x_min_": 621, "x_max_": 621, "n_threshold": [621, 712, 767, 774], "stepwis": [621, 640, 641, 642, 668, 669, 963], "increasing_": 621, "isotonic_regress": [621, 1022], "secondari": [621, 1013], "leeuw": 621, "1977": 621, "nilotp": [621, 623], "chakravarti": [621, 623], "pava": 621, "hornik": 621, "mair": 621, "kruskal": [621, 676, 680, 964], "psychometrica": 621, "iso_reg": 621, "8628": 621, "7256": 621, "isotonicregression0": 621, "increasing_bool": 622, "fisher_transform": 622, "sample_step": 624, "sample_interv": 624, "sample_interval_": [624, 1025], "skewedchi2sampl": [624, 625, 626, 627, 959, 1016, 1023, 1024], "chi2_kernel": [624, 628, 743, 750, 965, 1010], "additive_chi2_kernel": [624, 744, 750, 959], "vedaldi": [624, 959], "zisserman": [624, 959, 967], "chi2sampl": 624, "9499": 624, "component_indices_": [625, 1022], "normalization_": 625, "additivechi2sampl": [625, 626, 627, 628, 743, 744, 959, 1023, 1025], "kernel_metr": [625, 626, 627, 628], "seeger": 625, "mahdavi": 625, "jin": [625, 1020, 1021], "data_transform": 625, "9987": 625, "fft": 626, "indexhash": 626, "bithash": 626, "indexhash_": 626, "bithash_": 626, "kitchen": [627, 959], "sink": [627, 959], "random_offset_": [627, 628], "random_weights_": [627, 628], "rahimi": [627, 959], "benjamin": [627, 1011, 1012, 1020, 1021, 1022, 1023, 1024], "recht": [627, 959], "berkelei": [627, 892, 893], "brecht": 627, "rah": 627, "rbf_featur": [627, 959], "skewed": [628, 1016], "secant": 628, "hyperbol": [628, 841, 842, 965, 971], "fuxin": 628, "catalin": 628, "ionescu": [628, 959, 1019], "cristian": 628, "sminchisescu": [628, 959], "chi2_featur": 628, "2c": [629, 638, 658, 659, 660, 661, 673, 959], "493": [629, 884, 960], "alpha_1": [630, 631, 963], "alpha_2": [630, 631, 963], "lambda_1": [630, 631, 963], "lambda_2": [630, 631, 963], "threshold_lambda": 630, "x_offset_": [630, 631, 1021], "x_scale_": [630, 631, 1021], "mackai": [630, 631, 963], "ashra": 630, "salakhutdinov": [630, 833, 970], "utstat": 630, "rsalakhu": 630, "sta4273": 630, "lecture2": 630, "computed_scor": 631, "appendix": [631, 662, 963, 977], "wipf": [631, 963], "nagarajan": [631, 963], "2_2": [632, 633, 638, 639, 640, 641, 642, 646, 647, 648, 649, 658, 667, 668, 669, 670], "glmnet": [632, 633, 1009], "sparse_coef_": [632, 638, 646, 648, 1009], "dual_gap_": [632, 633, 638, 639, 646, 647, 648, 649, 1022], "max_j": [632, 638], "w_j": [632, 638, 967, 981], "ext": 632, "83816048": 632, "55968825": 632, "451": 632, "coef_init": [632, 633, 638, 639, 646, 647, 648, 649, 652, 654, 662, 663, 664, 667, 670], "mono": [632, 633, 638, 639, 646, 647, 648, 649, 667, 670], "_21": [632, 633, 638, 639, 646, 647, 648, 649, 667, 670], "sum_j": [632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 963, 967, 972], "alpha_min": [632, 633, 636, 638, 639, 640, 642, 646, 647, 648, 649, 667, 668, 669, 670], "alpha_max": [632, 633, 638, 639, 646, 647, 648, 649, 667, 670], "ndim": [632, 633, 638, 639, 646, 647, 648, 649, 667, 670, 904, 905], "multitaskelasticnet": [632, 633, 638, 647, 648, 649, 667, 963, 1009, 1016, 1017, 1020, 1022], "multitaskelasticnetcv": [632, 633, 638, 646, 648, 649, 667, 963, 1012, 1019, 1020, 1022], "l1_ratio_": [633, 645, 647], "n_l1_ratio": [633, 645, 647, 1012], "unpen": [634, 655, 666, 963], "raphson": [634, 655, 666], "g_j": [634, 655, 666], "896": 634, "483": 634, "795": 634, "pg_i": 635, "scale_": [635, 853, 854, 862, 864, 874, 977, 1014], "outliers_": 635, "elvezio": [635, 963], "ronchetti": [635, 963], "concomit": [635, 963], "owen": [635, 1018, 1019], "statweb": [635, 668, 669], "hhu": [635, 1018], "7200": 635, "4923": 635, "1698": 635, "0106": 635, "9221": 635, "0226": 635, "fit_path": [636, 640, 641, 642, 668, 669], "jitter": [636, 640, 1020], "coef_path_": [636, 637, 640, 641, 963], "active_": [636, 637, 640, 641], "larscv": [636, 651, 668, 669, 1016, 1022], "1111": [636, 642], "max_n_alpha": [637, 641], "n_cv_alpha": [637, 641], "cv_alpha": [637, 641], "lassolar": [637, 638, 639, 641, 642, 649, 650, 651, 668, 669, 670, 963, 1000, 1009, 1010, 1012, 1016, 1019, 1020, 1022], "9996": 637, "2961": 637, "3996": 637, "2_f": 638, "_11": 638, "4951": 639, "2_fro": [639, 648, 649, 670], "coef_path": [639, 649, 670], "46874778": [639, 649, 670], "2159048": [639, 649, 670], "4425765": [639, 649, 670], "23689075": [639, 649, 670], "coef_path_lar": [639, 649, 670], "coef_path_continu": [639, 649, 670], "interp1d": [639, 649, 670], "46915237": [639, 649, 670], "23668876": [639, 649, 670], "congruenc": [640, 641, 642, 668, 669], "fragil": 641, "3972": 641, "2222": 642, "rank_": 643, "singular_": 643, "maxent": [644, 645, 963], "primal": [644, 645, 663, 884, 885, 981, 982], "synthetic_feature_weight": [644, 645], "ciyou": 644, "byrd": 644, "jorg": [644, 1012, 1021, 1023], "noced": 644, "lui": [644, 1010, 1012, 1013, 1017], "iem": 644, "lbfgsb": 644, "schmidt": [644, 963, 1012], "le": [644, 852, 958, 963, 970, 978, 980, 1017, 1021, 1022], "roux": [644, 963, 980], "00860051": 644, "defazio": [644, 963], "lacost": [644, 963], "hsiang": [644, 1013], "fu": [644, 1013], "fang": [644, 1016, 1017], "lan": [644, 1024], "chih": [644, 1014], "jen": [644, 1017], "maxent_du": 644, "cs_": 645, "l1_ratios_": 645, "coefs_paths_": [645, 1019], "coefs_path": 645, "n_l1_ratios_": 645, "w_ij": 646, "eps_": [646, 648], "45663524": 646, "45612256": 646, "0872422": 646, "fro_2": [647, 649], "multitasklassocv": [647, 1012, 1019, 1020, 1022], "52875032": 647, "46958558": 647, "00166409": 647, "60809415": 648, "94592424": 648, "41888636": 648, "87382323": 648, "9994": 649, "5713": 649, "7971": 649, "9015": [649, 1017], "n_nonzero_coefs_": [650, 651], "orthogonal_mp_gram": [650, 651, 671, 1023], "mallat": [650, 671, 672, 963], "3397": [650, 671, 672], "3415": [650, 671, 672], "papier": [650, 671, 672], "mallatpursuit93": [650, 671, 672], "rubinstein": [650, 671, 672], "zibulevski": [650, 671, 672], "elad": [650, 671, 672], "technion": [650, 671, 672, 963], "ronrubin": [650, 671, 672, 963], "ksvd": [650, 671, 672, 963], "9991": [650, 651, 1017], "3854": [650, 651], "previous_loss": [652, 653, 654, 663], "pa": [652, 653, 881, 963, 967, 980], "preset": [652, 654, 662, 971], "t_": [652, 653, 654, 662, 663, 664, 841, 842, 981], "loss_function_": [652, 654, 662, 663], "volume7": [652, 653], "crammer06a": [652, 653], "crammer": [652, 653, 720, 963, 967, 982], "dekel": [652, 653, 963], "keshat": [652, 653, 963], "shalev": [652, 653, 963, 981], "shwartz": [652, 653, 963, 981], "singer": [652, 653, 720, 963, 967, 981, 982], "26642044": 652, "45070924": 652, "67251877": 652, "64185414": 652, "84127814": 652, "intercept_init": [652, 654, 662, 664], "y_all": [652, 654, 662, 812, 813, 841], "epsilon_insensit": [653, 662, 664, 885, 963, 981], "squared_epsilon_insensit": [653, 662, 664, 885, 963, 1015], "48736655": 653, "18818427": 653, "59122734": 653, "94731329": 653, "02306214": 653, "eta0": [654, 662, 663, 664, 981], "lossfunct": [654, 662, 663, 1018], "therein": 654, "990": [655, 967], "088": [655, 975], "676": 655, "solver_opt": 656, "ipm": 656, "linprog": [656, 963], "is_data_valid": [657, 963], "is_model_valid": [657, 963], "max_trial": [657, 963], "max_skip": 657, "stop_n_inli": [657, 963], "stop_scor": [657, 963], "stop_prob": 657, "mad": [657, 1015], "costlier": 657, "n_trials_": 657, "n_skips_no_inliers_": 657, "n_skips_invalid_data_": 657, "n_skips_invalid_model_": 657, "sri": [657, 963, 1016, 1017], "bmva": 657, "bmvc": [657, 963], "paper355": 657, "9885": 657, "9417": 657, "15000": [658, 673, 841, 842], "btol": [658, 660], "gcv_mode": [659, 1011], "store_cv_valu": [659, 661, 1017, 1020], "alpha_per_target": [659, 1021], "cv_values_": [659, 661], "ridgeclassifiercv": [659, 660, 773, 967, 968, 1017, 1019, 1020, 1022, 1023], "5166": 659, "gcv": [659, 661], "9595": 660, "9630": 661, "power_t": [662, 663, 664, 841, 842, 981], "best_loss": [662, 664], "leon": [662, 663, 664, 1009], "bottou": [662, 663, 664, 971, 981], "pow": [662, 663, 664, 841, 842], "dl": 662, "775047": 662, "775151": 662, "justif": 662, "volume2": 662, "zhang02c": 662, "offset_init": 663, "unshifft": 663, "n_subsampl": [665, 910], "breakdown_": 665, "n_subpopulation_": 665, "xin": [665, 963, 1017], "dang": [665, 963], "hanxiang": [665, 963], "peng": [665, 963, 1015, 1016, 1017, 1019, 1021], "xueqin": [665, 963], "hepe": [665, 963], "olemiss": 665, "xdang": 665, "mtse": 665, "9884": 665, "5871": 665, "coeff": 666, "839": 666, "copy_gram": [668, 669, 672], "return_path": [668, 669, 671, 672], "lars_path_gram": [668, 963, 1018], "tib": [668, 669], "xgamma": 671, "norms_squar": 672, "copy_xi": 672, "return_intercept": [673, 1018], "linearoper": 673, "_preprocess_data": 673, "path_method": [674, 964], "neighbors_algorithm": [674, 675], "arnoldi": [674, 675, 679], "fw": 674, "warshal": [674, 964], "kernel_pca_": 674, "nbrs_": [674, 675], "dist_matrix_": 674, "tenenbaum": [674, 964], "reconstruction_error": 674, "frobenius_norm": 674, "d_fit": 674, "x_fit": 674, "n_queri": [674, 826, 827, 828, 830, 832, 834, 835, 836], "hessian_tol": [675, 679], "modified_tol": [675, 679], "reconstruction_error_": 675, "rowei": [675, 679, 833, 964, 970], "saul": [675, 679, 964, 1016, 1017, 1019], "2323": [675, 679, 964], "donoho": [675, 679, 964], "grime": [675, 679, 964], "natl": [675, 679, 964], "acad": [675, 679, 964], "5591": [675, 679, 964], "mlle": [675, 679, 964], "zha": [675, 679, 964], "shanghai": [675, 679, 964], "univ": [675, 679, 964], "406": [675, 679, 964], "immers": [676, 680], "nonmetr": [676, 680], "smacof": [676, 1024], "stress": [676, 680, 964, 1024], "stress_": 676, "dispar": [676, 680, 964], "dissimilarity_matrix_": 676, "psychometrika": [676, 680, 964], "1964": [676, 680, 860, 872, 964], "borg": [676, 680, 964], "groenen": [676, 680, 964], "affinity_matrix": 677, "n_neighbors_": [677, 830], "early_exagger": 678, "min_grad_norm": [678, 1015], "square_dist": [678, 1021], "der": [678, 682, 964, 1012, 1013, 1017], "maaten": [678, 682, 964], "bhtsne": [678, 1016], "opentsn": 678, "abort": 678, "pdist": [678, 685, 763, 766], "pairwise_distance_funct": [678, 682, 763, 766, 970], "barn": [678, 1014, 1016, 1019], "hut": [678, 1014, 1016, 1019], "nlogn": 678, "kl_divergence_": [678, 1016], "learning_rate_": [678, 842], "hinton": [678, 833, 840, 841, 842, 964, 970, 971, 972], "2579": 678, "2605": 678, "lvdmaaten": [678, 1016], "oct": [678, 754, 964, 970], "3221": [678, 964], "3245": [678, 964], "jmlr_2014": 678, "belkina": [678, 964], "ciccolella": [678, 964], "anno": [678, 964], "halpert": [678, 964], "spidlen": [678, 964], "snyder": [678, 964], "cappion": [678, 964], "kobak": [678, 1022], "beren": 678, "transcriptom": 678, "guttman": 680, "norm_laplacian": 681, "drop_first": 681, "nk": 682, "2n": [682, 959, 971], "3k": 682, "cosine_dist": [682, 747, 970, 1015], "jarkko": 682, "venna": 682, "samuel": [682, 991, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "kaski": 682, "icann": 682, "verlag": 682, "twelfth": 682, "pmlr": 682, "384": [682, 885], "391": 682, "im_": 683, "axesimag": 683, "text_": 683, "include_valu": 683, "values_format": [683, 1019], "im_kw": [683, 1023], "text_kw": [683, 1024], "get_metr": 685, "19615242": 685, "euclideandist": 685, "manhattandist": 685, "chebyshevdist": 685, "minkowskidist": [685, 1022], "seuclideandist": 685, "mahalanobisdist": 685, "haversinedist": 685, "arcsin": [685, 749], "hammingdist": 685, "n_unequ": 685, "n_tot": 685, "canberradist": 685, "braycurtisdist": 685, "abbrevi": 685, "ntt": 685, "ntf": 685, "nft": 685, "nff": 685, "nneq": 685, "jaccarddist": 685, "matchingdist": 685, "dicedist": 685, "kulsinskidist": [685, 1025], "rogerstanimotodist": 685, "russellraodist": 685, "sokalmichenerdist": 685, "sokalsneathdist": 685, "pyfunc": [685, 970], "pyfuncdist": 685, "dist_to_rdist": 685, "surrog": [685, 991], "cdist": [685, 1022], "rdist_to_dist": 685, "rdist": 685, "predictionrecalldisplai": [686, 967], "chance_level_": [686, 688, 1025], "drop_intermedi": [686, 688, 767, 774, 1025], "errors_lines_": 687, "with_error": 687, "scatter_": 687, "balanced_accuracy_scor": [689, 772, 967, 1017], "imperfectli": [689, 719, 967], "label_tru": [690, 703, 722, 740, 742, 778], "upperlimit": 690, "nat": [690, 740, 742, 1023], "expected_ri": 691, "discord": 691, "hubert1985": 691, "1007": 691, "2fbf01908075": 691, "steinley2004": 691, "wk": 691, "rand_index": 691, "adjusted_rand_index": 691, "chacon": 691, "chac\u00f3n": 691, "rastrojo": 691, "balanced_accuraci": [694, 967, 1017], "brodersen": 694, "ong": 694, "stephan": [694, 1012, 1018, 1019, 1021], "buhmann": 694, "20th": 694, "3121": 694, "kelleh": [694, 967], "aoif": [694, 967], "arci": [694, 967], "y_true_categor": [695, 967], "037": 695, "calinski": [696, 1015], "harabasz": 696, "allow_non": 697, "thrown": [697, 1018, 1019], "tn": [698, 704, 967], "negative_class": 698, "zebra": 698, "output_dict": [699, 1017, 1021], "zero_divis": [699, 714, 715, 723, 768, 769, 772, 1019, 1021, 1025], "precision_recall_fscore_support": [699, 714, 715, 769, 772, 967, 1013, 1017, 1019, 1025], "multilabel_confusion_matrix": [699, 714, 715, 723, 769, 772, 967, 1018], "conting": [700, 701, 716, 740, 1015], "n_classes_tru": [700, 740], "n_classes_pr": [700, 740], "cohen": [702, 1017], "p_o": 702, "p_e": 702, "artstein": 702, "poesio": 702, "linguist": [702, 881, 980], "555": 702, "596": 702, "label_pr": [703, 721, 722, 740, 742, 778], "ant": [704, 739, 967], "a_row": 705, "a_column": 705, "b_row": 705, "b_column": 705, "tsoumaka": [706, 719, 725, 967], "kataki": [706, 719, 725, 967], "vlahava": [706, 725, 967], "handbook": [706, 725, 967], "667": [706, 725, 967], "685": [706, 725, 967], "raw_valu": [707, 708, 713, 730, 731, 733, 735, 736, 738, 770, 967, 1017, 1020], "wainwright": [707, 708, 709], "su": [707, 708, 709], "statlearnspars": [707, 708, 709], "691": 707, "8125": 707, "57142857": 707, "d2": 708, "d2_absolute_error_scor": [708, 967, 1023], "koenker": [708, 963], "roger": [708, 1016, 1017, 1021], "jos\u00e9": [708, 1012, 1022], "772": 708, "487": 709, "630": 709, "bouldin": 710, "farther": 710, "log_bas": 711, "ignore_ti": [711, 741], "ndcg": [711, 741, 967, 1016], "ndcg_score": [711, 967, 1016, 1019, 1024, 1025], "sharper": 711, "discounted_cumulative_gain": 711, "dcg": [711, 741, 967, 1016], "jarvelin": [711, 741, 967], "kekalainen": [711, 741, 967], "colt": [711, 741, 967], "mcsherri": [711, 741, 967], "najork": [711, 741, 967], "european": [711, 741, 967], "421": [711, 741, 967], "groud": [711, 741], "true_relev": [711, 741], "propabl": 712, "imperfect": [713, 770, 967, 1011], "variance_weight": [713, 770, 967], "n_unique_label": [714, 715, 723, 768, 769, 772, 931], "fbeta_scor": [714, 727, 768, 967, 1011, 1012, 1013, 1014, 1019, 1025], "undefinedmetricwarn": [714, 715, 768, 769, 772, 1018], "y_true_empti": 714, "y_pred_empti": [714, 715], "66666667": [714, 767, 834, 977], "328": 715, "fowlk": [716, 1015], "mallow": [716, 1015], "get_scorer_nam": [717, 967, 1023], "forgiv": 719, "upperbound": 719, "grigorio": 719, "ioanni": 719, "wareh": 719, "septemb": [719, 967, 1009, 1012, 1015, 1017, 1022], "pred_decis": [720, 967, 1022], "disagre": [720, 974], "kobi": 720, "yoram": 720, "AND": 720, "denero": 720, "gluster": 721, "v_measur": [721, 778], "6666": [723, 967, 1015], "5833": [723, 967], "lrap": [724, 967], "209": [726, 860], "21616": 726, "needs_proba": [727, 1018], "needs_threshold": [727, 967], "ftwo_scor": [727, 967], "mcc": [728, 967, 1023], "baldi": 728, "brunak": 728, "chauvin": 728, "andersen": [728, 1023], "nielsen": [728, 1017], "gorodkin": 728, "jurman": 728, "riccadonna": 728, "furlanello": 728, "cen": 728, "mape": [731, 967], "3273": 731, "5515": 731, "6198": 731, "112589990684262": 731, "0568": 732, "4260": [734, 737], "612": 735, "822": 735, "41666667": 735, "825": 735, "msle": [736, 967], "rmsle": 736, "00462428": 736, "08377444": 736, "samplewis": [739, 967], "mcm": [739, 967], "mcm_": 739, "multi_confus": 739, "normalized_discounted_cumulative_gain": 741, "dcg_score": [741, 967, 1016, 1019], "kernel_matrix": [743, 744, 751, 761], "marszalek": [743, 744, 965], "lazebnik": [743, 744, 965], "schmid": [743, 744, 965], "ouvert": [743, 744, 965], "00171412": [743, 744, 965], "cosine_similar": [745, 750, 965, 1014], "dense_output": [746, 752, 877, 922, 1017], "linear_kernel": [746, 750, 965, 1017], "haversine_dist": [747, 1018], "y_norm_squar": 748, "x_norm_squar": [748, 1014], "paired_dist": [748, 754, 763, 1013], "41421356": [748, 754, 970], "ezeiza": 749, "airport": 749, "bueno": 749, "argentina": 749, "gaull": 749, "bsa": 749, "83333": 749, "5166646": 749, "0083899664": 749, "53844117956": 749, "bsas_in_radian": 749, "paris_in_radian": 749, "6371000": 749, "kilomet": 749, "11099": 749, "54035582": 749, "polynomial_kernel": [750, 965], "rbf_kernel": [750, 965, 1013], "laplacian_kernel": [750, 965, 1014], "sigmoid_kernel": [750, 965], "kernal_metr": 750, "sum_over_featur": [753, 1009, 1024], "componentwis": 753, "sq": 754, "dixon": [754, 1019, 1020], "cybernet": 754, "ieeexplor": 754, "4310090": 754, "filter_param": 759, "jth": [759, 763], "tanh": [762, 841, 842, 965, 982], "force_all_finit": [763, 902, 904, 905, 1020, 1023], "distance_metr": [763, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838], "metric_kwarg": [764, 765], "reduce_func": [766, 1020], "d_chunk": 766, "sought": 766, "neigh": [766, 826, 827, 828, 830, 832, 834, 835, 836], "gen": 766, "probas_pr": 767, "warn_for": 768, "shantanu": 768, "godbol": 768, "sunita": 768, "sarawagi": 768, "pig": 768, "max_fpr": [773, 967, 1017], "provost": [773, 967], "ceder": [773, 967], "stern": [773, 967], "fawcett": [773, 774, 967], "874": [773, 774, 967], "generalis": [773, 967, 988], "multioutputclassifi": [773, 813, 815, 817, 967, 1016, 1018, 1019, 1020, 1021, 1025], "n_samples_a": [775, 776], "favour": [775, 964, 966, 1018], "mean_prior": 780, "degrees_of_freedom_prior": 780, "verbose_interv": [780, 781], "wishart": 780, "emipr": 780, "precisions_": [780, 781], "precisions_cholesky_": [780, 781, 1023], "converged_": [780, 781], "lower_bound_": [780, 781, 1017], "weight_concentration_prior_": 780, "weight_concentration_": 780, "mean_precision_prior_": 780, "mean_precision_": 780, "mean_prior_": 780, "degrees_of_freedom_prior_": 780, "degrees_of_freedom_": 780, "covariance_prior_": 780, "hagai": 780, "attia": 780, "bgm": 780, "n_dimens": [780, 781], "log_prob": [780, 781], "weights_init": 781, "precisions_init": [781, 1023], "gm": 781, "pre_dispatch": [782, 788, 796, 805, 806, 807, 808, 811, 933, 1012], "error_scor": [782, 785, 786, 788, 796, 806, 807, 808, 811, 956, 1013, 1017, 1021, 1024], "explos": [782, 796, 805, 806, 807], "fitfailedwarn": [782, 785, 786, 788, 796, 806, 807, 808, 811], "param_kernel": [782, 796], "param_degre": 782, "split0_test_scor": [782, 796, 1015], "rank_t": 782, "split1_test_scor": [782, 796], "split0_train_scor": [782, 796, 1015], "split1_train_scor": [782, 796], "mean_train_scor": [782, 796, 1015], "std_train_scor": [782, 796, 1015], "split0_test_precis": [782, 796], "mean_train_precis": [782, 796], "best_estim": [782, 785, 786, 796], "scorer_": [782, 785, 786, 796], "n_splits_": [782, 785, 786, 796], "refit_time_": [782, 785, 786, 796, 1017], "multimetric_": [782, 785, 786, 796], "parametergrid": [782, 1011, 1017], "split2_test_scor": 782, "num_sampl": [782, 796, 1024], "stratif": [783, 784, 790, 791, 800, 801, 802, 938, 1018], "group_kfold": 783, "aggressive_elimin": [785, 786, 956], "r0": [785, 786], "replai": [785, 786], "n_remaining_candidates_": [785, 786], "n_candid": [785, 786, 956], "max_resources_": [785, 786], "min_resources_": [785, 786], "n_required_iterations_": [785, 786], "n_possible_iterations_": [785, 786], "exceed": [785, 786, 1015], "n_unique_tick": [788, 808], "n_tick": [788, 808, 811], "errorbar_": 788, "errorbarcontain": 788, "line2d": 788, "fill_between_": 788, "polycollect": 788, "exploit_incremental_learn": [788, 808], "log_scal": 788, "fill_between_kw": 788, "errorbar_kw": 788, "model_selectionkfold": 788, "predispatch": [788, 808, 811], "negat": [788, 967], "neg_": [788, 1015], "combinator": 792, "lpo": 792, "param_list": 794, "rounded_list": 794, "89856": 794, "923223": 794, "878964": 794, "038159": 794, "parametersampl": [796, 1011, 1017, 1021], "2652124": 797, "rskf": 798, "36851234": 798, "sizeabl": [799, 802], "sad": [800, 801], "sss": 802, "checked_cv": 804, "3315057": [806, 807], "08022103": [806, 807], "03531816": [806, 807], "test_r2": 807, "test_auc": 807, "train_r2": 807, "train_auc": 807, "3635": 807, "3573": 807, "6114": 807, "28009951": 807, "3908844": 807, "22784907": 807, "train_sizes_ab": 808, "train_size_ab": 808, "cv_train_scor": 808, "cv_test_scor": 808, "permutation_scor": 809, "n_valu": [811, 1017], "pairwise_indices_": 812, "outputcodeclassifi": [812, 813, 1016, 1021, 1025], "label_binarizer_": 813, "multilabel_": [813, 1014], "onevsoneclassifi": [813, 814, 1010, 1012, 1013, 1015, 1016, 1018, 1021, 1023], "code_s": [814, 968], "code_book_": 814, "bakiri": [814, 968], "pict": [814, 968], "order_": [815, 818], "regressorchain": [815, 817, 1017, 1020, 1024], "jess": [815, 968, 1022], "pfahring": [815, 968], "geoff": [815, 968], "holm": [815, 968], "eib": [815, 968], "8387": 815, "9431": 815, "4576": 815, "8878": 815, "3684": 815, "2640": 815, "0321": 815, "9935": 815, "0625": 815, "y_decis": 815, "load_linnerud": [817, 1015, 1020], "force_alpha": [819, 820, 821, 823, 1024], "lidston": [819, 820, 821, 823, 969], "class_count_": [819, 820, 821, 822, 823], "class_log_prior_": [819, 820, 821, 823], "feature_count_": [819, 821, 823], "feature_log_prob_": [819, 820, 821, 823], "categoricalnb": [819, 821, 822, 823, 969, 1019, 1020, 1021, 1022, 1024], "renni": [819, 821, 969, 1017], "schuetz": [819, 823], "htmledit": [819, 823, 965], "mccallum": [819, 969], "nigam": [819, 969], "metsi": [819, 969], "androutsopoulo": [819, 969], "palioura": [819, 969], "cea": [819, 969], "predict_joint_log_proba": [819, 820, 821, 822, 823, 1024], "min_categori": [820, 1021], "category_count_": 820, "n_categories_": 820, "mirror": [821, 956], "mahout": 821, "weka": 821, "feature_all_": 821, "shih": [821, 969], "teevan": [821, 969], "karger": [821, 969], "616": [821, 969, 977], "623": [821, 969], "jrenni": 821, "icml03": 821, "var_smooth": [822, 1017], "stan": 822, "levequ": [822, 864], "cstr": 822, "epsilon_": 822, "theta_": [822, 969], "clf_pf": 822, "valid_metr": [824, 825, 970], "19662693": [824, 825], "29473397": [824, 825], "tree_copi": [824, 825], "query_radiu": [824, 825], "count_onli": [824, 825], "kernel_dens": [824, 825], "94114649": [824, 825], "83281226": [824, 825], "2071716": [824, 825], "two_point_correl": [824, 825], "get_arrai": [824, 825], "get_n_cal": [824, 825], "n_call": [824, 825], "get_tree_stat": [824, 825], "tree_stat": [824, 825], "breadth_first": [824, 825, 829], "return_log": [824, 825], "k_true": [824, 825], "k_ret": [824, 825], "breadth": [824, 825, 829, 991, 1011], "dualtre": [824, 825], "sort_result": [824, 825, 832, 834, 835, 836, 1021], "radii": [824, 825], "reset_n_cal": [824, 825], "effective_metric_": [826, 827, 828, 830, 832, 834, 835, 836, 970], "callbl": 826, "effective_metric_params_": [826, 827, 828, 830, 832, 834, 835, 836], "outputs_2d_": [826, 834, 1019], "nearest_neighbor_algorithm": [826, 834, 835], "n_index": [826, 827, 828, 830, 832, 834, 835], "neigh_dist": [826, 827, 828, 830, 832, 834, 835, 836], "neigh_ind": [826, 827, 828, 830, 832, 834, 835, 836], "nearest_neighbors_algorithm": [827, 832], "nearer": [828, 836, 970], "x_dist_graph": 828, "silverman": [829, 1024], "binarytre": [829, 1013, 1017, 1021], "bandwidth_": 829, "log_dens": 829, "52955942": 829, "51462041": 829, "60244657": 829, "logprob": 829, "negative_outlier_factor": 830, "9821": 830, "0370": 830, "3697": 830, "shifted_opposite_lof_scor": 830, "opposite_lof_scor": 830, "wminkowski": [831, 1021, 1023], "narasimhan": 831, "chu": [831, 1025], "shrunken": [831, 1009], "6567": 831, "6572": 831, "nbr": [832, 970], "neighborsclassifi": [832, 834, 835, 836, 1009], "n_features_a": 833, "n_features_b": 833, "goldberg": [833, 970], "neighbourhood": [833, 970], "513": [833, 970], "ncanip": 833, "neighbourhood_components_analysi": 833, "961904": 833, "outlier_label": [834, 1019], "outlier_label_": 834, "33333333": [834, 977], "x_cluster": 836, "warn_when_not_sort": 839, "efficiencywarn": [839, 1024], "sml": [840, 972], "pcd": [840, 972], "sweep": 840, "gibb": [840, 972, 987], "intercept_hidden_": 840, "intercept_visible_": 840, "h_samples_": 840, "osindero": [840, 972], "teh": [840, 972], "1527": 840, "1554": 840, "absp": 840, "fastnc": 840, "tieleman": [840, 972], "v_new": 840, "pseudo_likelihood": 840, "relu": [841, 842], "beta_1": [841, 842], "beta_2": [841, 842], "max_fun": [841, 842, 1019], "n_layer": [841, 842], "neuron": [841, 842, 965, 971], "tan": [841, 842, 971, 1016], "rectifi": [841, 842], "kingma": [841, 842, 971], "diederik": [841, 842, 971, 1024], "jimmi": [841, 842, 971, 1015, 1017], "gradual": [841, 842, 981], "effective_learning_r": [841, 842], "best_loss_": [841, 842, 1024], "best_validation_score_": [841, 842, 1024], "validation_scores_": [841, 842, 1024], "intercepts_": [841, 842, 971], "n_layers_": [841, 842], "out_activation_": [841, 842], "geoffrei": [841, 842, 971, 1020, 1021, 1022, 1023, 1025], "connectionist": [841, 842], "glorot": [841, 842], "xavier": [841, 842, 1017, 1018, 1019, 1021, 1022], "yoshua": [841, 842, 980], "feedforward": [841, 842], "kaim": [841, 842], "delv": [841, 842], "surpass": [841, 842], "imagenet": [841, 842], "log_y_prob": 841, "named_transform": [843, 1024], "transform_list": 843, "s__p": 844, "n_transformed_featur": 844, "predict_log_proba_param": 844, "y_log_proba": 844, "predict_proba_param": 844, "analyst": 847, "x_tr": [847, 853, 856, 857, 858, 862, 864, 867, 869, 870, 874, 875], "accept_spars": [848, 904, 905, 1016], "inv_kw_arg": 848, "pickleabl": [848, 1015], "6931": 848, "3862": 848, "n_bins_": 849, "int_": 849, "regener": 849, "xinv": 849, "tild": [850, 975, 977], "k_fit_rows_": 850, "k_fit_all_": 850, "1299": [850, 977], "1319": [850, 977], "n_samples1": 850, "n_samples2": 850, "k_new": 850, "neg_label": [851, 868], "y_type_": 851, "sparse_input_": 851, "tokyo": [852, 978], "amsterdam": [852, 978], "max_abs_": 853, "x_std": [854, 870, 977], "data_min_": [854, 1014], "data_max_": [854, 1014], "data_range_": [854, 1014], "unwieldi": 855, "fi": 855, "comedi": 855, "y_indic": 855, "yt": 855, "ands": 855, "feature_name_combin": [857, 1025], "categories_": [857, 858, 865, 977, 1017, 1024], "unregular": [857, 880, 1000, 1018], "intact": [857, 1002], "infrequ": [857, 858, 865, 967, 1009, 1023, 1024, 1025], "infrequent_if_exist": [857, 977], "x_6": 857, "x_7": 857, "drop_idx_": [857, 1020, 1024], "drop_idx": 857, "gender_femal": 857, "gender_mal": 857, "group_1": 857, "group_2": 857, "group_3": 857, "drop_enc": [857, 977], "drop_binary_enc": 857, "custom_combin": 857, "custom_fnames_enc": 857, "x0_str_femal": 857, "x0_str_male": 857, "x1_int_1": 857, "x1_int_2": 857, "x1_int_3": 857, "oh": [857, 1019], "infrequent_sklearn": [857, 977], "n_encoded_featur": [857, 858], "bpo": 858, "43475": 858, "lenient": [858, 988], "min_degre": [859, 1022], "max_degre": [859, 1022], "powers_": 859, "n_output_features_": 859, "nystrom": [859, 1018, 1019], "featurewis": 860, "power_transform": [860, 873, 1017], "biometrika": [860, 872], "954": [860, 872], "959": [860, 872], "ignore_implicit_zero": [861, 873], "landmark": [861, 873, 977], "n_quantiles_": 861, "quantiles_": [861, 977, 1019], "references_": 861, "robustscal": [861, 874, 957, 977, 1014, 1015, 1017, 1019, 1020, 1021, 1025], "with_cent": [862, 874], "with_scal": [862, 874], "unit_vari": [862, 874, 1021], "iqr": [862, 874], "interquartil": [862, 874], "quartil": 862, "75th": 862, "q_min": [862, 874], "q_max": [862, 874], "center_": 862, "robust_scal": [862, 873, 1017], "interquartile_rang": 862, "bspline": 863, "n_features_out_": 863, "with_std": [864, 875, 977, 1017], "n_samples_seen": 864, "5a": 864, "randal": [864, 1013, 1023], "242": [864, 1009], "mic": [865, 977], "target_mean_": [865, 977], "target_type_": 865, "encodings_": 865, "micci": [865, 977], "barreca": [865, 977], "newsl": [865, 977], "enc_auto": 865, "enc_high_smooth": 865, "enc_low_smooth": 865, "ahead": 868, "return_norm": [871, 1016], "notimplementederror": [871, 1016], "compute_inverse_compon": [876, 877, 979], "inverse_components_": [876, 877, 979, 1023], "2759": [876, 877], "afor": [876, 877], "baserandomproject": [876, 877], "ping": [877, 979, 1015, 1016], "density_": 877, "gaussianrandomproject": [877, 979, 1010, 1023, 1025], "church": [877, 979], "kdd06_rp": 877, "cgi": 877, "uoa": 877, "gr": 877, "opta": 877, "0182": 877, "e2": [878, 963], "93lindenstrauss_lemma": 878, "sanjoi": [878, 979], "anupam": [878, 979, 1024], "gupta": [878, 979, 1016, 1017, 1020, 1021, 1022, 1023, 1025], "elementari": [878, 979], "663": [878, 975, 979], "11841": [878, 979], "1112658": [878, 979], "7894": [878, 979], "9868": [878, 979], "steadi": [879, 880], "baselabelpropag": [879, 1016], "xiaojin": 879, "zoubin": 879, "ghahramani": 879, "cmu": 879, "cald": 879, "carnegi": 879, "mellon": 879, "jerryzhu": 879, "label_prop_model": [879, 880], "clamp": [880, 980], "dengyong": 880, "bousquet": 880, "navin": 880, "lal": 880, "schoelkopf": 880, "termination_condition_": 881, "no_chang": 881, "all_label": 881, "33rd": [881, 980], "acl": [881, 980, 981], "stroudsburg": [881, 980], "196": [881, 980], "optmiz": [884, 885], "crammer_sing": [884, 968, 982, 1009], "seldom": 884, "readonli": [884, 885, 1022, 1024, 1025], "raw_coef_": [884, 885], "smo": [884, 885], "526": 884, "1693": 884, "unsur": 885, "023": [885, 975], "522": 885, "class_weight_": [886, 887, 888, 889, 890, 1024], "n_sv": [886, 887, 888, 889, 890, 982, 1019], "fit_status_": [886, 887, 888, 889, 890], "n_support_": [886, 887, 888, 889, 890, 982, 1019], "proba_": [886, 889, 1020], "probb_": [886, 889, 1020], "shape_fit_": [886, 887, 888, 889, 890], "n_dimensions_of_x": [886, 887, 888, 889, 890], "7798": 888, "0547": 888, "0556": 888, "0561": 888, "7332": 888, "unshift": 888, "impract": 889, "tube": [890, 982], "_tree": [892, 893, 894, 895, 1010, 1012], "decision_tree_learn": [892, 893, 983], "olshen": [892, 893, 983], "wadsworth": [892, 893, 983], "belmont": [892, 893, 983], "cutler": [892, 893], "cc_home": [892, 893], "htm": [892, 893], "ccp_path": [892, 893, 894, 895], "get_depth": [892, 893, 894, 895, 1018], "get_n_leav": [892, 893, 894, 895, 1018], "extra_tre": [894, 895], "8947": 894, "decision_tre": [896, 897, 898, 983], "out_fil": [896, 983], "leaves_parallel": 896, "special_charact": [896, 983], "fontnam": [896, 1022], "helvetica": [896, 898], "graphviz": [896, 983], "postscript": 896, "tpng": 896, "paint": [896, 898], "dot_data": [896, 983], "digraph": 896, "show_weight": 897, "feature_0": 897, "unrepresent": 899, "keyerror": [899, 1019], "popitem": 899, "lifo": 899, "input_nam": [903, 905, 930, 1023], "accept_large_spars": [904, 905, 1017], "ensure_2d": [904, 905], "allow_nd": [904, 905], "ensure_min_sampl": [904, 905], "ensure_min_featur": [904, 905], "y_numer": 904, "bsr": [904, 905, 1022], "x_convert": 904, "y_convert": 904, "array_convert": 905, "min_val": 908, "max_val": 908, "include_boundari": [908, 1023], "y_org": 909, "class_weight_vect": 909, "king": 909, "zen": 909, "sample_weight_vect": 910, "parenthes": 911, "type_filt": 913, "generate_onli": [915, 1019], "checks_gener": 915, "test_check_estim": 916, "check_estimators_fit_returns_self": 916, "array_lik": 919, "logdet": 919, "slogdet": 919, "6375861597263857": 919, "flip_sign": 921, "svd_lapack_driv": 921, "gesdd": 921, "p5": 921, "transposit": 921, "gesvd": 921, "conquer": 921, "unitari": 921, "vh": 921, "dot_product": 922, "deweight": 923, "min_batch_s": 924, "n_pack": [924, 925], "path_length": 926, "sliceabl": 927, "truthi": 928, "helloifeven": 928, "_x_is_even": 928, "say_hello": 928, "temp_fold": 933, "max_nbyt": 933, "1m": 933, "mmap_mod": 933, "dispatch_next": 933, "dispatch_one_batch": 933, "unprotect": 933, "prefetch": 933, "print_progress": 933, "inner_max_num_thread": 935, "backend_param": 935, "register_parallel_backend": [935, 1017], "pyiodin": 935, "dask": [935, 988, 1017], "workload": [935, 987], "register_rai": 935, "backend_nam": 935, "oversubscript": [935, 1023], "threadpool": 935, "effective_n_job": 935, "tracking_select": 936, "reservoir_sampl": 936, "reservoir": 936, "make_default": 937, "parallelbackendbas": 937, "resampled_arrai": 938, "3x2": [938, 941], "shuffled_arrai": 941, "last_mean": 942, "last_var": 942, "last_n": 942, "return_sum_weight": 948, "sum_weight": 948, "all_or_ani": [951, 1019], "is_fit": 951, "__sklearn_is_fitted__": [951, 1022, 1023], "eg": 951, "substitut": [951, 988, 1015], "raise_except": 953, "array_sym": 953, "is_paramet": 955, "enclos": 956, "set_stat": 956, "bergstra": [956, 1009, 1010], "tournament": 956, "dispos": [956, 1002], "n_resources_i": 956, "n_resources_0": 956, "n_candidates_i": 956, "n_candidates_0": 956, "r_0": 956, "n_resourc": 956, "983667": 956, "951958": 956, "947958": 956, "961009": 956, "955989": 956, "jamieson": 956, "talwalkar": 956, "desalvo": 956, "rostamizadeh": 956, "hyperband": 956, "bandit": 956, "multimetr": [956, 1019, 1024], "calibrated_forest": 956, "select__k": 956, "model__estimator__max_depth": 956, "imp": 957, "sophist": [957, 969], "14338": 957, "13286": 957, "15611": 957, "amelia": 957, "scientist": [957, 991], "roderick": 957, "rubin": 957, "1986": [957, 983], "ol2001": 957, "mask_missing_values_onli": 957, "mask_al": 957, "rr2007": 959, "2x_iy_i": 959, "vz2010": 959, "vvz2010": 959, "prod_i": 959, "ls2010": 959, "c_0": [959, 965], "tensorsketch": 959, "pp2013": 959, "wikic": 959, "ccf2002": 959, "mercer": 959, "langl": [959, 967, 981, 982], "rangl": [959, 967, 981, 982], "y_j": [959, 967, 969, 982], "obviat": 959, "dagm": 959, "vempati": 959, "jawahar": 959, "charikar": 959, "farach": 959, "colton": 959, "m2012": 960, "mu_k": 961, "cst": 961, "omega_": 961, "k0": 961, "h_l": 961, "extrema": 961, "119": [961, 1012], "honei": 961, "stork": 961, "dilemma": 962, "valid_scor": 962, "w_0": 963, "w_p": 963, "34545455": 963, "13636": [963, 1018], "rifkin": 963, "lippert": 963, "2n_": 963, "softw": 963, "kim": [963, 1017, 1018, 1019, 1023], "koh": [963, 991], "lustig": 963, "boyd": 963, "gorinevski": 963, "c_p": 963, "cherkasski": 963, "yunqian": 963, "1691": 963, "1714": 963, "ell_2": 963, "equiangular": 963, "weisberg": 963, "ell_0": [963, 967], "_coef": 963, "mp": 963, "ell_": 963, "posteriori": [963, 969], "radford": 963, "neal": [963, 1022], "50000013": 963, "49999993": 963, "lambda_i": [963, 977], "srikantan": 963, "tristan": 963, "fletcher": [963, 1009, 1013], "nomenclatur": [963, 1015], "deliber": 963, "overparameter": 963, "ldot": [963, 967, 969, 971, 981], "w_l": 963, "min_w": 963, "iverson": 963, "broyden": 963, "goldfarb": 963, "shanno": 963, "shortcom": 963, "statsmodel": [963, 987], "aaron": [963, 1012, 1013, 1014, 1019], "simon": [963, 991, 1012, 1013, 1022, 1023, 1024], "93fletcher": 963, "93goldfarb": 963, "93shanno_algorithm": 963, "noah": 963, "multirespons": 963, "edm": 963, "agricultur": 963, "rainfal": 963, "paid": 963, "bernouli": 963, "fraud": [963, 991], "cash": 963, "fraudul": [963, 991], "interrupt": 963, "drug": 963, "cure": 963, "entertain": 963, "mccullagh": 963, "nelder": 963, "boca": 963, "raton": 963, "chapman": 963, "hall": [963, 1016, 1020], "crc": 963, "31760": 963, "j\u00f8rgensen": 963, "monografia": 963, "matem\u00e1tica": 963, "2463": 963, "4337": 963, "7638": 963, "disappear": [963, 1009], "photogrammetr": 963, "hypothes": 963, "paradigm": 963, "cartographi": 963, "fischler": 963, "boll": 963, "sunglok": 963, "choi": 963, "taemin": 963, "wonpil": 963, "93sen_estim": 963, "binom": 963, "infeas": [963, 970, 972], "k\u00e4rkk\u00e4inen": 963, "\u00e4yr\u00e4m\u00f6": 963, "h_": 963, "oarc": 963, "dae": 963, "bassett": 963, "jr": 963, "econometrica": 963, "econometr": 963, "portnoi": 963, "hare": 963, "tortois": 963, "paraboloid": 963, "w_3": 963, "w_4": 963, "w_5": 963, "z_1": 963, "z_2": 963, "z_3": 963, "z_4": 963, "z_5": 963, "streamlin": 963, "gotten": [963, 977], "necess": [964, 970], "strife": 964, "mother": 964, "baloo": 964, "song": 964, "jungl": 964, "rubric": 964, "defici": [964, 981], "hlle": 964, "revolv": 964, "belkin": 964, "niyogi": 964, "1373": 964, "1396": 964, "molecul": 964, "jk": 964, "delta_": 964, "c_1": 964, "disentangl": 964, "legitim": 964, "die": 964, "noisier": 964, "5415": 964, "brief": 965, "num_featur": [965, 1024], "quantum": 965, "nutshel": 965, "36787944": 965, "89483932": 965, "58364548": 965, "51341712": 965, "83822343": 965, "7768366": 965, "facil": 966, "equi": 966, "agnost": [966, 975], "cue": 966, "came": 966, "quicker": 966, "unpract": 966, "analogi": [966, 967], "top_k_accuraci": 967, "top_k_accuracy_scor": [967, 1021, 1023], "neg_brier_scor": [967, 1019], "f1_micro": [967, 1013], "f1_weight": [967, 1013], "f1_sampl": 967, "neg_log_loss": 967, "roc_auc_ovr": [967, 1019], "roc_auc_ovo": [967, 1019], "roc_auc_ovr_weight": [967, 1019], "roc_auc_ovo_weight": [967, 1019], "explained_variance_scor": [967, 1012, 1016, 1023], "max_error": [967, 1018], "neg_mean_squared_log_error": 967, "mean_squared_log_error": [967, 1016, 1022], "neg_median_absolute_error": 967, "neg_mean_poisson_devi": 967, "neg_mean_gamma_devi": 967, "mean_gamma_devi": [967, 1019], "d2_pinball_scor": [967, 1023], "d2_tweedie_scor": [967, 1022], "invalidparametererror": 967, "_error": 967, "my_custom_loss_func": 967, "protocol": [967, 1012, 1025], "custom_scoring_funct": 967, "custom_scorer_modul": 967, "confusion_matrix_scor": 967, "test_tp": 967, "test_fn": 967, "untru": 967, "dividend": 967, "divisor": 967, "quotient": 967, "texttt": 967, "youden": 967, "informed": 967, "mosley2013": 967, "kelleher2015": 967, "guyon2015": 967, "urbanowicz2015": 967, "escalant": 967, "escalera": 967, "maci\u00e0": [967, 1022, 1024], "saeed": 967, "statnikov": 967, "viega": 967, "chalearn": 967, "automl": [967, 987], "ijcnn": 967, "moslei": 967, "ijcv": 967, "urbanowicz": 967, "exstrac": 967, "evol": 967, "intel": [967, 987], "cohen_kappa_scor": [967, 1014, 1016], "4285714285714286": 967, "manning2008": 967, "everingham2010": 967, "davis2006": 967, "flach2015": 967, "everingham": 967, "gool": 967, "winn": 967, "pascal": 967, "voc": 967, "goadrich": 967, "y_l": 967, "_l": 967, "emptyset": 967, "f_beta": 967, "hinge_loss": [967, 1013, 1021, 1022], "ne": [967, 970], "1738": 967, "matthews_corrcoef": [967, 1009, 1015, 1016, 1023], "t_k": [967, 983], "ik": 967, "ki": 967, "kk": 967, "auroc": 967, "ht2001": 967, "fc2009": 967, "pd2000": 967, "f2006": 967, "f2001": 967, "inner_clf": 967, "c\u00e8sar": 967, "hernandez": 967, "orallo": 967, "modroiu": 967, "wikipediadet2017": 967, "martin1997": 967, "navratil2007": 967, "consult": 967, "encyclopedia": 967, "utc": 967, "php": [967, 987], "detection_error_tradeoff": 967, "oldid": 967, "798982054": 967, "doddington": 967, "kamm": 967, "ordowski": 967, "przybocki": 967, "navractil": 967, "klusacek": 967, "acoust": 967, "icassp": 967, "honolulu": 967, "229": 967, "brier1950": 967, "p_i": [967, 970], "bella2012": 967, "flach2008": 967, "bella": 967, "hern\u00e1ndez": 967, "ram\u00edrez": 967, "quintana": 967, "khosrow": 967, "pour": 967, "hershei": 967, "edson": [967, 1014], "matsubara": 967, "dagstuhl": 967, "seminar": 967, "schloss": 967, "leibniz": 967, "zentrum": 967, "lr_": 967, "brenner": 967, "gefel": 967, "991": 967, "coverage_error": [967, 1013, 1023], "label_ranking_average_precision_scor": [967, 1013, 1017, 1018, 1024], "label_ranking_loss": [967, 1014], "grade": 967, "unalt": 967, "epsilon_i": 967, "908": 967, "925": [967, 997], "7083": 967, "log_": 967, "growth": [967, 1014, 1015], "commod": 967, "mapd": 967, "2e6": 967, "2666": 967, "y_n": [967, 971, 981], "elicit": 967, "2500": 967, "mean_pinball_loss_95p": 967, "skill": 967, "mcfadden": 967, "d2_tweedie_score_15": 967, "d2_pinball_score_08": 967, "heteroschedast": 967, "homoschedast": 967, "pear": 968, "y_dens": 968, "y_spars": 968, "advoc": 968, "financ": 968, "f3": 968, "y3": 968, "multi_target_forest": 968, "75474165": 968, "147": 968, "03498585": 968, "03812219": 968, "12165031": 968, "12914884": 968, "46081961": 968, "8948621": 968, "44373091": 968, "88978285": 968, "62745778": 968, "02891072": 968, "48204257": 968, "03260883": 968, "165": 968, "34867495": 968, "52003279": 968, "92529176": 968, "25719016": 968, "84253": 968, "25193977": 968, "16443186": 968, "12274212": 968, "170388": 968, "80956739": 968, "16979946": 968, "72667194": 968, "50941682": 968, "50447799": 968, "149": [968, 1009], "37967282": 968, "15699552": 968, "72850319": 968, "prod_": 969, "downarrow": 969, "spite": 969, "famous": 969, "serious": 969, "flair": 969, "2_y": 969, "mu_i": 969, "sigma_i": [969, 977], "theta_i": 969, "cnb": 969, "mnb": 969, "inventor": 969, "alpha_i": [969, 982], "cj": [969, 1012, 1013, 1014, 1015, 1016], "summat": [969, 971], "min_c": 969, "t_i": 969, "poorest": 969, "n_i": [969, 977], "satellit": 970, "kdt": 970, "farawai": 970, "invent": 970, "orthotrop": 970, "bentlei": 970, "1975": 970, "omohundro": 970, "characteris": 970, "unaffect": 970, "amort": 970, "cache_path": 970, "gettempdir": 970, "unsort": [970, 1010, 1013, 1017], "5807": 970, "nca_pip": 970, "96190476": 970, "limits_": 970, "lx": 970, "x_m": 971, "leftmost": 971, "w_1x_1": 971, "w_2x_2": 971, "w_mx_m": 971, "backpropag": 971, "998": 971, "b_1": 971, "b_2": 971, "z_l": 971, "dfrac": [971, 977], "nabla": 971, "deduct": 971, "rumelhart": 971, "jiquan": 971, "ngiam": 971, "chuan": 971, "yifan": 971, "carolin": 971, "suen": 971, "backprop": [971, 981], "lecun": [971, 981], "orr": [971, 981], "strai": 972, "v_ih_j": 972, "b_iv_i": 972, "c_jh_j": 972, "h_j": 972, "v_i": 972, "b_i": 972, "sum_h": 972, "fantasi": 972, "particl": 972, "thoroughli": 972, "hereund": 973, "1443": 973, "1471": 973, "outlying": 973, "h2009": 974, "g2015": 974, "absurd": 974, "m2019": 974, "bike": 974, "mc_clf": 974, "466": 974, "624": 974, "overlaid": 974, "obscur": [974, 1025], "cice": [974, 1023], "pd_": 974, "dx_c": 974, "footnot": [974, 987], "opaqu": 975, "x_val": 975, "y_val": 975, "probe": 975, "048": 975, "r_multi": 975, "081": 975, "1013": 975, "866": 975, "445": 975, "726": 975, "022": 975, "277": [975, 1011], "376": 975, "i_j": 975, "min_max_scal": [977, 1014], "x_train_minmax": 977, "x_test_minmax": 977, "max_abs_scal": 977, "x_train_maxab": 977, "x_test_maxab": 977, "unintention": 977, "kernelcenter": [977, 1019, 1023], "scholkopf1998": 977, "1_": 977, "x_train_tran": 977, "x_test_tran": 977, "8pt": 977, "x_normal": 977, "firefox": 977, "chrome": 977, "safari": 977, "africa": 977, "dragon": 977, "lexicon": 977, "par": 977, "sigma_c": 977, "tau": 977, "l_i": 977, "pargent": 977, "pfister": 977, "2671": 977, "2692": 977, "infant": 977, "kid": 977, "teen": 977, "adult": 977, "senior": [977, 991], "citizen": 977, "retbin": 977, "x_1x_2": 977, "x_1x_3": 977, "x_2x_3": 977, "x_1x_2x_3": 977, "rung": 977, "eiler": 977, "marx": 977, "perperogl": 977, "sauerbrei": 977, "abrahamowicz": 977, "bmc": 977, "methodol": 977, "38629436": 977, "sixteenth": 979, "uai": 979, "craig": [979, 1012, 1017], "boutili": 979, "mois\u00e9": 979, "goldszmidt": 979, "morgan": [979, 983, 985], "kaufmann": [979, 983, 1021], "ella": 979, "bingham": 979, "heikki": 979, "mannila": 979, "245": [979, 1011], "explic": 979, "3947": 979, "kenneth": [979, 1009, 1010, 1015, 1016, 1023, 1024], "12th": 979, "296": 979, "x_new_invers": 979, "x_new_again": 979, "delalleau": 980, "216": 980, "aistat": 980, "gatsbi": 980, "ucl": 980, "uk": [980, 1002], "fullpap": 980, "xi_i": 981, "slack": 981, "t_0": 981, "l\u00e9on": [981, 1023, 1024, 1025], "_init_t": 981, "basesgd": 981, "eta_0": 981, "_t": 981, "svmsgd": 981, "pegaso": 981, "srebro": 981, "tsuruoka": 981, "tsujii": 981, "ananiad": 981, "afnlp": 981, "lin_clf": 982, "grasp": [982, 988], "sv": 982, "builtin": 982, "qp": 982, "linear_svc": 982, "gram_train": 982, "gram_test": 982, "zeta": 982, "zeta_i": 982, "textrm": [982, 1000], "q_": 982, "equiv": 982, "reparameter": 982, "wu": [982, 1013, 1021], "weng": 982, "1005": 982, "rong": 982, "aug": 982, "1871": 982, "1874": 982, "ofmulticlass": 982, "fitter": 983, "pariti": 983, "multiplex": 983, "export_graphviz": [983, 1014, 1016, 1022, 1024, 1025], "export_text": [983, 1018, 1025], "dumont": 983, "subwindow": 983, "beforehand": 983, "dichotomis": 983, "quinlan": 983, "multiwai": 983, "proprietari": 983, "ruleset": 983, "q_m": 983, "n_m": 983, "t_m": 983, "setminu": 983, "mk": 983, "_m": 983, "ge0": 983, "widetild": 983, "tradition": 983, "t_t": 983, "eff": 983, "predictive_analyt": 983, "troubleshoot": 985, "artwork": 985, "fund": 985, "spotifi": 985, "betawork": 985, "evernot": 985, "aweb": 985, "yhat": 985, "rangespan": 985, "birchbox": 985, "bestofmedia": 985, "phimeca": 985, "howaboutw": 985, "peerindex": 985, "datarobot": 985, "okcupid": 985, "love": [985, 1002], "publica": 985, "machinali": 985, "solido": 985, "infonea": 985, "dataiku": 985, "otto": 985, "zopa": 985, "bnp": 985, "pariba": 985, "cardif": 985, "post1": [985, 1007], "foot": 986, "gear": 986, "neuroimag": [986, 991], "astronom": 986, "pycon": 986, "thirti": 986, "nyc": [986, 991], "sister": 987, "sklearn_panda": 987, "sklearn_xarrai": 987, "xarrai": 987, "autoviml": 987, "tpot": 987, "featuretool": 987, "neuraxl": 987, "neat": [987, 1009], "checkpoint": 987, "funki": 987, "saver": 987, "evalml": 987, "neptun": 987, "mlop": 987, "sacr": 987, "dtreeviz": 987, "eli5": 987, "mlxtend": 987, "yellowbrick": 987, "deap": 987, "evolutionari": 987, "interchang": 987, "skop": [987, 1004], "jpmml": 987, "porter": 987, "transpil": 987, "javascript": 987, "m2cgen": 987, "dart": 987, "haskel": 987, "rust": 987, "treelit": 987, "tslearn": 987, "sktime": 987, "hmmlearn": 987, "pomegran": 987, "crfsuit": 987, "skforecast": 987, "nolearn": 987, "lasagn": 987, "theano": 987, "skorch": 987, "scikera": 987, "scikit_learn": 987, "feder": 987, "lego": 987, "subsembl": 987, "lightn": 987, "sdca": 987, "adagrad": 987, "svrg": 987, "nadaraya": 987, "gplearn": 987, "genet": 987, "multilearn": 987, "seglearn": 987, "libopf": 987, "fastfm": 987, "kmode": 987, "sphereclust": 987, "mise": 987, "giotto": 987, "tda": 987, "pymc": 987, "censor": 987, "lightfm": 987, "openrec": 987, "spotlight": 987, "gensim": 987, "nilearn": 987, "neuro": 987, "astroml": 987, "astronomi": 987, "msmbuilder": 987, "dissemin": 987, "chines": 987, "persian": 987, "spanish": 987, "korean": 987, "disclaim": 987, "promis": 988, "eleven": 988, "incept": 988, "scala": 988, "reinforc": 988, "era": 988, "7242": 988, "12147": 988, "5523": 988, "10733": 988, "13902": [988, 1019], "12800": 988, "12866": 988, "15550": 988, "5853": 988, "11805": 988, "15319": 988, "11977": 988, "12852": [988, 1019], "13911": [988, 1019], "amput": 988, "6284": 988, "beginn": 988, "priorit": [988, 1016], "4497": 988, "7646": 988, "6425": 988, "6424": 988, "8480": 988, "6231": 988, "8100": 988, "6599": 988, "6715": 988, "14582": 988, "3855": 988, "13227": 988, "6323": 988, "14180": [988, 1020], "9173": 988, "13146": [988, 1019], "8614": 988, "7608": 988, "5082": 988, "8243": 988, "searchgrid": 988, "6929": 988, "__array_function__": [988, 1019], "etl": [988, 991], "8370": 988, "6451": 988, "lifecycl": 988, "8157": 988, "7382": 988, "drift": 988, "11047": [988, 1019], "9326": 988, "slep011": 988, "1626": 988, "10463": 988, "id3": [989, 1004], "cart": [989, 1004], "touch": 990, "savetxt": 990, "cloneabl": 990, "datafil": 990, "printabl": 990, "indispens": 991, "stephen": [991, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1022], "simmon": 991, "vp": 991, "athena": 991, "music": 991, "bernhardsson": 991, "pariet": [991, 1009], "lear": 991, "visag": 991, "fantast": 991, "startup": 991, "bitli": 991, "chartbeat": 991, "digg": [991, 1016], "poncho": 991, "gilad": 991, "lotan": 991, "chief": 991, "chat": 991, "bread": 991, "butter": 991, "chaumond": [991, 1017], "offic": 991, "ayzenshtat": [991, 1017], "undergrad": 991, "professor": 991, "hotel": 991, "destin": 991, "agent": 991, "melani": [991, 1016, 1017], "awesom": 991, "stuff": 991, "randomizedpca": [991, 1009, 1011, 1012, 1014, 1015, 1016], "boston": 991, "mdbecker": 991, "pydata_2013": 991, "ninja": 991, "thorough": 991, "notch": 991, "production": 991, "greg": [991, 1015, 1016, 1018, 1019], "lamp": 991, "founder": 991, "prototyp": 991, "jurgen": 991, "director": 991, "commerc": 991, "inventori": 991, "bertin": 991, "mahieux": 991, "invalu": 991, "vijai": [991, 1012], "traine": 991, "impress": 991, "traffic": 991, "tenur": 991, "matchmak": 991, "weitzenfeld": 991, "tweet": 991, "ferenc": 991, "huszar": 991, "shop": 991, "ourselv": 991, "jeremi": [991, 1014, 1015, 1016, 1017, 1020, 1021], "achin": 991, "ceo": 991, "marketplac": 991, "frid": [991, 1012], "radar": 991, "partnership": 991, "lebourgeoi": 991, "charron": [991, 1012, 1013, 1020, 1021, 1022], "cornerston": 991, "sheep": 991, "featureforg": 991, "rafael": [991, 1010, 1011, 1013, 1016], "carrascosa": [991, 1013], "law": 991, "semiconductor": 991, "fab": [991, 1019, 1020], "bleed": 991, "chip": 991, "smartphon": 991, "automobil": 991, "trent": [991, 1015], "mcconaghi": 991, "rapid": 991, "immens": 991, "thorsten": 991, "kranz": 991, "coma": 991, "dss": 991, "douetteau": 991, "b2c": 991, "retail": 991, "palladium": 991, "rammig": [991, 1015], "peer": 991, "lend": 991, "billion": 991, "gbp": 991, "grate": 991, "vlasio": [991, 1016], "vasilei": [991, 1016], "petfood": 991, "cocoa": 991, "worldwid": 991, "toolset": 991, "equip": 991, "fitzk": 991, "sr": 991, "fondat": 991, "s\u00e9bastien": [991, 1015, 1017], "conort": 991, "salmon": 993, "nine": 993, "sentiment": 994, "cli": 994, "doctest_mod": 994, "hardest": 995, "tightli": 996, "knit": 996, "x_fold": 997, "array_split": 997, "y_fold": 997, "934": 997, "train_indic": 997, "test_indic": 997, "963": 997, "922": 997, "930": 997, "96388889": 997, "92222222": 997, "9637883": 997, "93036212": 997, "96578289": 997, "92708922": 997, "96681476": 997, "96362897": 997, "93192644": 997, "0077": 997, "943": 997, "00375": 997, "lfw_": 998, "_lfw": 998, "gerhard_schroed": 998, "donald_rumsfeld": 998, "tony_blair": 998, "colin_powel": 998, "george_w_bush": 998, "282": [998, 1009], "estimated_param_": 999, "iris_x": 1000, "iris_i": 1000, "iris_x_train": 1000, "iris_y_train": 1000, "iris_x_test": 1000, "iris_y_test": 1000, "pave": 1000, "paltri": 1000, "exabyt": 1000, "30349955": 1000, "63931533": 1000, "53060544": 1000, "73698041": 1000, "13170937": 1000, "81458798": 1000, "84845219": 1000, "60648906": 1000, "51961675": 1000, "09517222": 1000, "5854": 1000, "5855": 1000, "occam": 1000, "razor": 1000, "best_alpha": [1000, 1009], "025118864315095794": 1000, "508": 1000, "knew": 1001, "taxonomist": 1001, "face_compress": 1001, "x_approx": 1001, "images_approx": 1001, "18565811e": 1001, "19346747e": 1001, "43026679e": 1001, "text_analyt": 1002, "skeleton": [1002, 1012], "sklearn_tut_workspac": 1002, "cp": 1002, "work_directori": 1002, "tutorial_hom": 1002, "fetch_data": 1002, "lang": 1002, "newsweed": 1002, "netnew": 1002, "bydat": 1002, "twenty_train": 1002, "holder": 1002, "2257": 1002, "sd345": 1002, "collier": 1002, "laserjet": 1002, "iii": [1002, 1023], "hampton": 1002, "4gb": 1002, "count_vect": 1002, "x_train_count": 1002, "35788": 1002, "4690": 1002, "downscal": 1002, "tf_transform": 1002, "x_train_tf": 1002, "tfidf_transform": 1002, "x_train_tfidf": 1002, "na\u00efv": 1002, "docs_new": 1002, "opengl": 1002, "x_new_count": 1002, "x_new_tfidf": 1002, "text_clf": 1002, "twenty_test": 1002, "docs_test": 1002, "8348": 1002, "9101": [1002, 1017], "1502": 1002, "tfidf__use_idf": 1002, "searcher": 1002, "gs_clf": 1002, "workspac": 1002, "fear": 1002, "fire": 1002, "exercise_xx_script": 1002, "arg1": 1002, "arg2": 1002, "arg3": 1002, "mortem": 1002, "charngramanalyz": 1002, "exercise_01_language_train_model": 1002, "exercise_02_senti": 1002, "movie_review": 1002, "txt_sentoken": 1002, "cpickl": 1002, "polar": 1002, "subtleti": 1004, "subscrib": 1007, "gzip": 1009, "bzip2": 1009, "decompress": 1009, "auc_scor": [1009, 1011], "kernc": [1009, 1023, 1024], "led": 1009, "probabilisticpca": [1009, 1012], "hmm": [1009, 1010, 1011, 1012, 1014], "gaussianhmm": 1009, "multinomialhmm": 1009, "n_gram_rang": 1009, "267": 1009, "alexi": [1009, 1012, 1013, 1016], "mignon": [1009, 1012, 1013, 1016], "subhodeep": [1009, 1010, 1011], "moitra": [1009, 1010, 1011], "yannick": [1009, 1011], "schwartz": [1009, 1011, 1023], "duckworth": 1009, "benediktsson": [1009, 1010, 1011], "marko": [1009, 1018, 1019, 1025], "burjek": 1009, "pinto": 1009, "abraham": [1009, 1010, 1015, 1019], "hoenig": 1009, "flyingimmidev": 1009, "francoi": [1009, 1022], "savard": 1009, "hann": 1009, "schulz": 1009, "welind": 1009, "companioni": 1009, "brandyn": 1009, "bussonni": [1009, 1021], "matthia": [1009, 1011, 1012, 1015, 1016, 1017, 1021, 1024], "pierr": [1009, 1017, 1018, 1020, 1022, 1024], "astolfi": 1009, "huiginn": 1009, "goodman": [1009, 1014], "ludwig": 1009, "schwardt": 1009, "hervieu": 1009, "sergio": [1009, 1011, 1012, 1021, 1024], "medina": [1009, 1011], "sheerman": 1009, "buguen": 1009, "seq_dataset": [1009, 1019], "weight_vector": [1009, 1019], "reuben": 1009, "costin": 1009, "_basehmm": 1009, "neighborsregressor": 1009, "gone": [1009, 1010], "vbgmm": [1009, 1013, 1015], "_pvalu": 1009, "charset": [1009, 1011], "test_fract": 1009, "train_fract": 1009, "marek": 1009, "fcostin": 1009, "adrien": 1009, "gaidon": 1009, "joona": 1009, "sillanp\u00e4\u00e4": 1009, "mccarthi": [1009, 1017], "roi": [1009, 1023], "hyunjin": 1009, "ibay": 1009, "scheidegg": 1009, "clair": 1009, "revillet": 1009, "conrad": [1009, 1010, 1024], "meng": [1009, 1010, 1013, 1015, 1016], "xinfan": [1009, 1010, 1013], "udi": 1009, "weinsberg": 1009, "janso": 1009, "palafox": 1009, "overwrite_": 1009, "copy_": 1009, "buffer_mb": 1009, "sparse_encode_parallel": 1009, "accident": [1009, 1013, 1018], "basedictionarylearn": 1009, "sparsecodingmixin": 1009, "fast_svd": 1009, "arnold": [1009, 1010], "bala": [1009, 1012], "subrahmanyam": [1009, 1012], "varanasi": [1009, 1012], "draxu": 1009, "eickenberg": [1009, 1011, 1012, 1013, 1014], "bogdan": 1009, "trach": 1009, "f\u00e9lix": [1009, 1011, 1012, 1013, 1017], "antoin": [1009, 1011, 1012, 1013, 1016], "fortin": [1009, 1011, 1012, 1013], "manuel": [1009, 1013, 1017, 1018, 1021, 1022], "caicedo": 1009, "carvaj": 1009, "tiziano": 1009, "zito": [1009, 1022], "jean": [1009, 1012, 1013, 1014, 1015, 1016, 1022], "kossaifi": [1009, 1013, 1014], "thumbnail": 1009, "univariate_select": 1009, "mldata": [1009, 1017], "pietro": [1009, 1012], "berk": 1009, "macosx": 1009, "xarg": 1009, "bscikit": 1009, "cross_val": 1009, "bcross_val": 1009, "lurk": 1009, "l1_distanc": 1009, "387": 1009, "andi": [1009, 1016], "amit": [1009, 1023, 1024], "salvator": [1009, 1023, 1024], "masecchia": 1009, "schut": 1009, "metaireau": [1009, 1012], "bryan": [1009, 1012, 1018, 1019, 1022], "silverthorn": 1009, "minwoo": 1009, "luca": [1009, 1019, 1020, 1021, 1022], "wiman": 1009, "schl\u00fcter": [1009, 1017], "malet": 1009, "miott": [1009, 1012], "feth": 1009, "arezki": 1009, "yamin": 1009, "notes_neighbor": 1009, "netbsd": 1009, "kamel": 1009, "ibn": 1009, "hassen": 1009, "derouich": 1009, "virgilefritsch": 1009, "example_gaussian_process_plot_gp_regress": 1009, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1009, "tast": 1009, "2x": 1009, "10x": 1009, "200x": 1009, "ann": [1009, 1021, 1023], "laur": 1009, "fouqu": 1009, "ronan": [1009, 1012, 1017], "amicel": [1009, 1012], "osendorf": [1009, 1010], "gmmhmm": [1009, 1010], "latex": 1009, "mlcomp": 1009, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1009, "pybrain": 1009, "116": 1009, "rokem": [1009, 1015], "100x": [1009, 1012], "obsolet": 1009, "attrselect": 1009, "unmaintain": 1009, "lite": 1009, "filo": [1009, 1012], "mailhot": 1009, "huard": 1009, "dave": [1009, 1016, 1017, 1023], "morril": 1009, "schofield": 1009, "travi": [1009, 1017], "oliph": 1009, "pearu": 1009, "peterson": [1009, 1011], "0d": 1010, "marchman": [1010, 1011], "hrishikesh": [1010, 1011], "huilgolkar": [1010, 1011], "bastiaan": [1010, 1011], "diego": [1010, 1011], "molla": [1010, 1011], "cunha": [1010, 1011], "almeida": [1010, 1011, 1022], "rolando": [1010, 1011], "espinoza": [1010, 1011], "fuent": [1010, 1011], "formerli": [1010, 1013, 1015, 1016], "beauchamp": [1010, 1013], "longstand": [1010, 1016], "shaun": 1010, "jackman": 1010, "winterman": 1010, "seberg": 1010, "n_atom": 1010, "label_propag": 1010, "learn_rat": 1010, "basegradientboost": 1010, "mean_square_error": 1010, "gmm_": 1010, "eig_tol": 1010, "chunk_siz": 1010, "zero_one_scor": 1010, "117": 1010, "aymer": 1010, "masurel": 1010, "syhw": [1010, 1011], "corei": [1010, 1017, 1018], "lynch": [1010, 1016], "shu": [1010, 1013, 1017], "tadej": [1010, 1011], "jane\u017e": [1010, 1011], "caje": 1010, "tiago": [1010, 1014], "nune": 1010, "cow": 1010, "anz": 1010, "jauvin": 1010, "jacqu": [1010, 1012], "kvam": [1010, 1012], "doug": [1010, 1011, 1021], "coleman": [1010, 1011], "dickerson": 1010, "approximateident": 1010, "veronda": 1010, "matti": [1010, 1013, 1014], "lyra": [1010, 1013, 1014], "mikhail": [1010, 1011, 1012, 1015, 1016, 1024], "korobov": [1010, 1011, 1012, 1015, 1016], "alejandro": [1010, 1015], "weinstein": 1010, "deil": [1010, 1020, 1021], "nizhibitski": 1010, "coelho": [1010, 1012, 1013, 1017], "miroslav": [1010, 1011, 1014], "batchkarov": [1010, 1014], "pavel": [1010, 1018], "bob": [1010, 1016], "dengemann": 1010, "emanuel": 1010, "x006": 1010, "justin": [1011, 1017, 1021], "stochastic_gradi": [1011, 1012, 1018], "crombach": 1011, "sheet": 1011, "jaccard_similarity_scor": [1011, 1013, 1018], "jochen": 1011, "wersd\u00f6rfer": 1011, "sinayev": 1011, "unpleas": 1011, "novic": 1011, "tini": [1011, 1024], "hyperlink": 1011, "luessi": 1011, "philipp": [1011, 1012, 1015, 1024], "gervai": [1011, 1012], "cleverless": 1011, "nosetest": 1011, "compute_import": 1011, "return_model": [1011, 1013], "itergrid": 1011, "tacitli": 1011, "charset_error": 1011, "precompute_gram": 1011, "2224": 1011, "jim": 1011, "holmstr\u00f6m": 1011, "steven": [1011, 1012, 1014, 1016, 1017, 1022, 1024], "gryze": [1011, 1014], "sergeyf": 1011, "ben": [1011, 1012, 1013, 1016, 1017, 1018, 1021], "speer": 1011, "federico": [1011, 1012, 1017, 1018, 1023], "vaggi": [1011, 1012], "raul": [1011, 1012], "garreta": [1011, 1012], "gei": 1011, "flaxman": [1011, 1013], "denton": 1011, "cockburn": 1011, "dougal": [1011, 1013, 1014, 1016, 1017, 1018, 1019], "sutherland": [1011, 1013, 1014, 1016, 1017, 1018, 1019], "ian": [1011, 1013, 1018, 1019, 1021, 1024, 1025], "ozsvald": 1011, "johann": [1011, 1012, 1017, 1019, 1020, 1023], "sch\u00f6nberger": [1011, 1012], "szabo": [1011, 1012], "roland": [1011, 1012], "imran": [1011, 1012, 1013], "haqu": [1011, 1012, 1013], "karayev": 1011, "jamestwebb": [1011, 1012], "abhijeet": 1011, "kolh": 1011, "velkov": 1011, "fazlul": 1011, "shahriar": 1011, "felix": [1011, 1016, 1017, 1019, 1021, 1022, 1023], "brockherd": 1011, "harikrishnan": 1011, "jack": [1011, 1014, 1022, 1023, 1024], "hale": [1011, 1023], "jakemick": 1011, "mcdermott": 1011, "zwinck": 1011, "vredevoogd": [1011, 1012], "pati": 1011, "ekman": [1011, 1015], "shubernetskii": 1011, "naoki": [1011, 1021], "orii": 1011, "seamu": 1011, "absher": 1011, "feldman": [1011, 1016, 1017, 1018, 1019], "stefano": 1011, "lattarini": 1011, "steve": [1011, 1013, 1017, 1022, 1024], "koch": [1011, 1017, 1018, 1020, 1021], "sturla": 1011, "molden": 1011, "jarosch": 1011, "nikolai": [1012, 1013, 1014, 1015, 1017, 1018, 1023], "mayorov": [1012, 1013, 1014, 1015], "msvc": 1012, "mingw": 1012, "resourcewarn": 1012, "calvin": [1012, 1013], "gile": [1012, 1013], "billing": [1012, 1013, 1014], "safe_realloc": 1012, "bradshaw": [1012, 1013, 1016], "pico": [1012, 1013], "restor": [1012, 1017, 1018, 1019, 1020, 1024], "raff": 1012, "__array__": [1012, 1019], "jeffrei": [1012, 1015], "blackburn": [1012, 1015], "danni": [1012, 1013, 1014], "sullivan": [1012, 1013, 1014], "wignal": [1012, 1013, 1019, 1020], "grid_tograph": 1012, "gracefulli": [1012, 1013], "gaussianprocess": 1012, "novak": 1012, "tulloch": [1012, 1013], "wardagglomer": 1012, "wardclust": 1012, "mean_l1_ratio": 1012, "phlypo": 1012, "312": 1012, "bommarito": [1012, 1013], "brook": [1012, 1013, 1021], "osborn": [1012, 1013], "eltermann": 1012, "bwignal": 1012, "ankit": [1012, 1019, 1021, 1023], "agraw": [1012, 1017, 1023, 1024], "carei": [1012, 1013, 1014, 1015, 1016], "ugurthemast": [1012, 1013], "schumach": [1012, 1013, 1014], "baptist": [1012, 1020], "lagard": 1012, "rajat": [1012, 1019], "khanduja": 1012, "pascual": 1012, "ignacio": 1012, "rossi": 1012, "s\u00e4ger": [1012, 1015], "ilambharathi": [1012, 1013], "kanniah": [1012, 1013], "sdenton4": 1012, "alyssa": [1012, 1016], "amo": 1012, "waterland": 1012, "murad": 1012, "maud": 1012, "karol": 1012, "pysniak": 1012, "cgohlk": [1012, 1013], "jacobsen": 1012, "collin": 1012, "kaushik94": 1012, "erwin": 1012, "marsi": 1012, "csytraci": 1012, "lk": 1012, "laurent": [1012, 1013, 1016, 1017, 1024, 1025], "direr": [1012, 1013, 1016, 1017], "shilt": 1012, "yoshiki": [1012, 1015], "v\u00e1zquez": 1012, "yung": [1012, 1015], "siang": 1012, "liau": 1012, "abhishek": [1012, 1013, 1019, 1023], "thakur": [1012, 1013], "rohit": [1012, 1013, 1017, 1018], "sivaprasad": [1012, 1013], "amormachin": 1012, "oscar": [1012, 1016], "carlsson": 1012, "nanta": 1012, "nardelli": 1012, "jess010": 1012, "kowalski87": 1012, "clegg": 1012, "ralf": [1012, 1015, 1016, 1024], "gommer": [1012, 1015, 1016, 1024], "rupesh": 1012, "srivastava": [1012, 1024], "ryan": [1012, 1015, 1017, 1018], "skipper": [1012, 1014, 1015], "seabold": [1012, 1014, 1015], "stefan": [1012, 1013, 1017, 1019], "walt": [1012, 1013, 1017], "riddel": [1012, 1014, 1016], "valentin": [1012, 1014, 1024, 1025], "haenel": 1012, "myer": [1012, 1016], "yoni": 1012, "meshulam": 1012, "yuri": [1012, 1014], "zaytsev": 1012, "adrinjalali": [1012, 1021], "ai8rahim": 1012, "alemagnani": 1012, "chalmerlow": 1012, "dziki": 1012, "dro\u017cd\u017c": 1012, "matrixorz": 1012, "popo": 1012, "samuela": 1012, "fran\u00e7oi": 1012, "boulogn": 1012, "ethan": [1012, 1015], "guilherm": 1012, "trein": 1012, "heuer": 1012, "ivicajov": 1012, "rouli": 1012, "eduardo": [1012, 1014, 1022, 1023], "ari\u00f1o": 1012, "rubia": 1012, "jell": 1012, "zijlstra": 1012, "eddi": 1012, "jansson": [1012, 1024], "ca\u00f1ardo": 1012, "alastuei": 1012, "joseph": [1012, 1013, 1014, 1015, 1021, 1023, 1024], "perla": 1012, "ricardo": [1012, 1022, 1023], "kenta": 1012, "sato": 1012, "medri": 1012, "luce": 1012, "pierron": 1012, "danielweitzenfeld": 1012, "thompson": [1012, 1024, 1025], "brett": [1012, 1014, 1015, 1016, 1017, 1024], "feurer": [1012, 1017], "earl": 1012, "hank": 1012, "orr\u00f9": 1012, "lunt": 1012, "kearn": 1012, "pawe\u0142": [1012, 1016, 1021, 1022], "mandera": 1012, "zambelli": 1012, "staubda": 1012, "dedupl": 1013, "heilman": [1013, 1014], "precompute_dist": [1013, 1020], "lshforest": [1013, 1016], "qiang": 1013, "luo": 1013, "clemen": 1013, "brunner": 1013, "matteo": [1013, 1015, 1023], "visconti": 1013, "oleggio": 1013, "castello": 1013, "linkage_tre": 1013, "jatin": [1013, 1015], "shah": [1013, 1014, 1015, 1021], "saurabh": [1013, 1014, 1015, 1016, 1017, 1021], "jha": [1013, 1019, 1023], "blanchard": [1013, 1014], "michal": [1013, 1016, 1022, 1023], "romaniuk": 1013, "gilmor": 1013, "stapl": 1013, "hedyati": 1013, "antoni": [1013, 1015, 1021, 1024], "parel": 1013, "herv\u00e9": 1013, "bredin": 1013, "hasil": 1013, "sharma": [1013, 1015, 1017, 1018, 1020, 1021, 1023], "ducktyp": 1013, "download_20newsgroup": 1013, "friend": 1013, "cathi": [1013, 1019], "deng": [1013, 1014, 1015], "dawson": 1013, "garret": 1013, "hanna": [1013, 1014, 1020], "wallach": [1013, 1014], "yan": [1013, 1021], "artem": [1013, 1016], "sobolev": 1013, "fit_ovr": 1013, "predict_ovr": 1013, "predict_proba_ovr": 1013, "fit_ovo": 1013, "predict_ovo": 1013, "fit_ecoc": 1013, "predict_ecoc": 1013, "lamond": 1013, "outweigh": 1013, "thresh": 1013, "akshai": [1013, 1016, 1021], "akshayah3": 1013, "aldrian": 1013, "obaja": 1013, "ander": [1013, 1019], "aagaard": 1013, "cranenburgh": 1013, "walker": 1013, "banilo": [1013, 1014], "barmalei": [1013, 1014], "benedikt": 1013, "koehler": 1013, "bhsu": 1013, "bori": [1013, 1021], "feld": 1013, "borja": 1013, "ayerdi": 1013, "boyuan": [1013, 1014, 1015], "brent": [1013, 1017, 1018], "pedersen": 1013, "celeo": 1013, "chebee7i": 1013, "stade": 1013, "schuldt": 1013, "christof": [1013, 1014], "angermuel": [1013, 1014], "daiki": 1013, "aminaka": 1013, "danfrankj": 1013, "dmitrij": 1013, "milajev": 1013, "floydsoft": 1013, "garrett": 1013, "gpassino": 1013, "gwulf": [1013, 1014], "hampu": 1013, "bengtsson": 1013, "harri": [1013, 1015, 1021, 1022], "mavroforaki": [1013, 1015], "helder": [1013, 1022, 1023], "herv": 1013, "hugu": 1013, "salamin": 1013, "ism": 1013, "dlabal": 1013, "javier": 1013, "l\u00f3pez": [1013, 1017, 1018, 1021], "pe\u00f1a": 1013, "jdcaballero": 1013, "jeff": [1013, 1015, 1022, 1023], "hammerbach": 1013, "helmu": 1013, "kaicheng": 1013, "markham": [1013, 1020, 1021], "lagacheri": 1013, "leepei": 1013, "loic": [1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "estev": [1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024], "luka": [1013, 1020], "michelbach": 1013, "krell": [1013, 1015], "ku": [1013, 1014], "mateusz": [1013, 1020, 1021], "susik": 1013, "mehdi": [1013, 1022], "cherti": 1013, "mlg": 1013, "montecchio": 1013, "okal": 1013, "billi": 1013, "\u00f3scar": [1013, 1014, 1015, 1016], "n\u00e1jera": [1013, 1014, 1015, 1016], "puggioni": 1013, "pratap": [1013, 1016, 1023], "vardhan": 1013, "pvnguyen": 1013, "queqichao": 1013, "rahiel": 1013, "kasim": 1013, "mason": 1013, "saket": [1013, 1014, 1021], "choudhari": [1013, 1014, 1023], "sam": [1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024], "nichol": 1013, "sethdandridg": 1013, "sinhrk": [1013, 1014], "snuderl": 1013, "ott": 1013, "tjoa": 1013, "swu": 1013, "zimmer": [1013, 1023], "tejesh95": 1013, "terrycojon": 1013, "delteil": 1013, "toma": 1013, "kazmar": 1013, "trevorstephen": [1013, 1015], "tttthomasssss": 1013, "tzu": 1013, "kuo": 1013, "ugurcaliskan": 1013, "vinayak": [1013, 1014, 1015, 1017, 1018, 1024], "mehta": [1013, 1014, 1015, 1017, 1018, 1019, 1020, 1024], "vjacheslav": 1013, "murashkin": 1013, "wadawson": 1013, "x0l": 1013, "vendor": [1014, 1017, 1018], "6147": 1014, "presort": [1014, 1019], "5857": 1014, "mcculloh": [1014, 1015], "6258": 1014, "giorgio": [1014, 1015, 1016], "patrini": [1014, 1015, 1016], "joe": 1014, "jevnik": 1014, "labelkfold": [1014, 1015], "labelshufflesplit": [1014, 1015], "mcfee": [1014, 1015], "3659": 1014, "4738": 1014, "projectedgradientnmf": 1014, "nls_max_it": 1014, "erick": 1014, "moodi": 1014, "4025": 1014, "mean_shift_": 1014, "mean_shift": [1014, 1017], "martino": 1014, "sorbaro": 1014, "cori": 1014, "konstantin": [1014, 1015, 1016], "shmelkov": 1014, "backlink": 1014, "jaidev": 1014, "deshpand": [1014, 1015], "dictlearn": 1014, "kashif": 1014, "rasul": [1014, 1016, 1017], "galvez": 1014, "sonni": 1014, "hu": [1014, 1017, 1019], "santi": [1014, 1016, 1017], "villalba": [1014, 1017, 1021], "5186": 1014, "stolbunov": 1014, "booster": 1014, "graham": [1014, 1015], "clenaghan": [1014, 1015], "clyde": 1014, "subproblem": 1014, "forestclassifi": 1014, "ankur": 1014, "ankan": 1014, "henri": [1014, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1024], "5431": 1014, "buddha": 1014, "prakash": [1014, 1016, 1022], "5182": 1014, "lamb": [1014, 1022], "5282": 1014, "5355": 1014, "5360": 1014, "4478": 1014, "5337": 1014, "4362": 1014, "5495": 1014, "elvi": [1014, 1015, 1016], "dohmatob": [1014, 1015, 1016], "data_min": 1014, "data_max": 1014, "data_rang": 1014, "_learntselectormixin": 1014, "gradientboost": 1014, "metatransfom": 1014, "load_lfw_pair": 1014, "wardagglom": 1014, "residues_": 1014, "indicator_matrix_": 1014, "adithya": 1014, "ganesh": 1014, "akitti": 1014, "alexei": 1014, "grigorev": 1014, "ali": [1014, 1017, 1018, 1021, 1022, 1024], "baharev": 1014, "ando": 1014, "saaba": 1014, "anish": [1014, 1015], "anthoni": [1014, 1016, 1017], "erling": 1014, "rouvinen": 1014, "rachez": [1014, 1015], "benjaminirv": 1014, "naul": [1014, 1015], "gohlk": 1014, "bourguignat": 1014, "cindi": [1014, 1022], "sridharan": 1014, "kronovet": 1014, "data1010": 1014, "dotson": 1014, "djipei": [1014, 1015], "dmitri": [1014, 1016, 1017, 1018, 1022], "spikhalskii": 1014, "donn": 1014, "duart": [1014, 1022, 1024], "caro": 1014, "larson": [1014, 1018, 1019, 1021, 1023], "fernando": [1014, 1021], "carrillo": 1014, "eckert": 1014, "zalkow": 1014, "ganiev": [1014, 1015, 1016], "ibraim": [1014, 1015, 1016], "giorgiop": 1014, "gryllo": [1014, 1017], "prokopi": [1014, 1017], "hsuan": 1014, "tien": 1014, "ishank": [1014, 1015, 1016], "gulati": [1014, 1015, 1016], "jeffrey04": [1014, 1015], "jfraj": 1014, "jiali": 1014, "mei": [1014, 1019], "kirkham": [1014, 1015, 1017], "wittenau": 1014, "loyal": 1014, "jungkook": 1014, "park": [1014, 1019, 1021, 1024], "kamalakerdadi": [1014, 1015], "kyler": 1014, "lilian": [1014, 1015], "besson": [1014, 1015], "tiao": [1014, 1015], "marktab": 1014, "spacek": 1014, "martinbpr": [1014, 1015], "martinosorb": 1014, "maryanmorel": [1014, 1015], "masafumi": 1014, "oyamada": 1014, "krump": 1014, "kolganov": 1014, "mbilling": 1014, "mhg": 1014, "patterson": 1014, "omer": 1014, "katz": [1014, 1021, 1022], "pauli": 1014, "virtanen": 1014, "fischer": [1014, 1015], "pianomania": 1014, "preston": [1014, 1015, 1016], "parri": [1014, 1015, 1016], "rohan": [1014, 1015, 1017, 1018, 1022], "ramanath": 1014, "bansod": [1014, 1015, 1016], "scls19fr": 1014, "saeger": [1014, 1015, 1016], "shivan": 1014, "sornarajah": 1014, "simonpl": 1014, "sseg": 1014, "hoover": [1014, 1015, 1016, 1018], "seguin": 1014, "theodor": 1014, "vasiloudi": 1014, "freita": [1014, 1016, 1017], "pereira": [1014, 1017, 1018], "timothi": [1014, 1022], "hopper": 1014, "tokoroten": 1014, "vstolbunov": 1014, "wangz10": 1014, "yucheng": 1014, "zhauniarovich": 1014, "zac": 1014, "stewart": [1014, 1019, 1022, 1024], "zhai_pro": 1014, "zichen": 1014, "7946": 1015, "8355": 1015, "9010": 1015, "8040": 1015, "9149": 1015, "aman": [1015, 1016, 1017, 1023, 1024], "dalmia": [1015, 1016, 1017], "nate": [1015, 1016, 1022], "guerin": [1015, 1016], "lebedev": [1015, 1016], "utilis": 1015, "6497": 1015, "7724": 1015, "bing": [1015, 1016], "explained_variance_ratio": 1015, "7632": 1015, "jpfrancoia": [1015, 1016], "7676": 1015, "moham": [1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "affan": 1015, "7756": 1015, "7786": 1015, "srivatsan": [1015, 1016, 1019], "7799": 1015, "7490": [1015, 1016], "6282": 1015, "7301": 1015, "6178": 1015, "7680": 1015, "n_iters_": 1015, "7553": 1015, "ekaterina": [1015, 1016, 1017, 1018, 1020], "krivich": [1015, 1016, 1018], "5874": 1015, "7593": 1015, "7594": 1015, "7660": 1015, "7750": 1015, "7732": 1015, "artsion": 1015, "lieu": [1015, 1016], "grid_scores_": [1015, 1021, 1022], "leaveonelabelout": 1015, "leaveplabelout": 1015, "plural": 1015, "mean_tim": 1015, "std_time": 1015, "3204": 1015, "5291": 1015, "sounder": 1015, "7295": 1015, "5299": 1015, "bravi": 1015, "fouchet": 1015, "calinski_harabaz_scor": [1015, 1017], "harabaz": 1015, "6586": 1015, "4294": 1015, "6667": 1015, "6954": 1015, "unveil": 1015, "yelit": 1015, "basebag": [1015, 1017], "staub": 1015, "5805": 1015, "5251": 1015, "imacul": 1015, "1000x": 1015, "arfa": 1015, "6691": 1015, "6913": 1015, "5762": 1015, "utkarsh": [1015, 1016, 1017, 1018], "upadhyai": [1015, 1016, 1017, 1018], "6846": 1015, "5929": 1015, "podshumok": [1015, 1016], "6173": 1015, "ryad": 1015, "zenin": 1015, "devashish": 1015, "asish": [1015, 1016], "dowl": 1015, "6697": 1015, "ori": 1015, "ziv": 1015, "sear": 1015, "merritt": 1015, "7325": 1015, "7239": 1015, "hong": [1015, 1017, 1021, 1022, 1023], "guangguo": 1015, "jensen": [1015, 1021], "7419": 1015, "gregori": [1015, 1019, 1020, 1021, 1022], "stupp": [1015, 1016], "bernardo": 1015, "stein": 1015, "sparse_func": [1015, 1021], "incr_mean_variance_axi": [1015, 1021], "7049": 1015, "7152": 1015, "load_boston": [1015, 1017, 1022], "7154": 1015, "manvendra": [1015, 1016], "singh": [1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024], "5540": 1015, "7248": 1015, "6764": 1015, "wenhua": 1015, "6817": 1015, "6902": 1015, "leonieborn": 1015, "5141": 1015, "4995": 1015, "5012": 1015, "_transform_select": 1015, "7194": 1015, "caio": [1015, 1017, 1019], "oliveira": [1015, 1017, 1019, 1023], "6182": 1015, "6121": 1015, "6472": 1015, "7350": 1015, "russel": [1015, 1016], "smith": [1015, 1016, 1017, 1018, 1019, 1021], "7159": 1015, "yichuan": [1015, 1016], "5460": 1015, "document_clust": 1015, "7353": 1015, "_search": 1015, "_check_param_grid": 1015, "xrang": 1015, "7323": 1015, "viacheslav": 1015, "kovalevskyi": 1015, "7101": 1015, "residual_metr": 1015, "6651": 1015, "reorgan": 1015, "7187": 1015, "7260": 1015, "sebasti\u00e1n": 1015, "vanrel": 1015, "leaveplabelsout": 1015, "6660": 1015, "unprefix": 1015, "7261": 1015, "aditya": [1015, 1017, 1018, 1019, 1023, 1024], "joshi": [1015, 1017, 1023], "loginov": 1015, "minyushkin": 1015, "rudi": 1015, "abadi": [1015, 1016], "saint": 1015, "alexfield": 1015, "alvaro": [1015, 1017], "ulloa": 1015, "alyssaq": 1015, "amlan": 1015, "kar": 1015, "giessel": 1015, "jackson": [1015, 1016, 1018], "murrai": [1015, 1016], "arafat": 1015, "archit": 1015, "asnt": 1015, "b0noi": 1015, "behzad": 1015, "tabibian": 1015, "kratzwald": 1015, "bhargav": 1015, "mangipudi": 1015, "blakeflei": 1015, "brandon": [1015, 1016, 1023, 1024], "carter": [1015, 1016, 1024], "camilo": 1015, "lamu": 1015, "carol": [1015, 1016], "Willing": [1015, 1016], "cass": 1015, "ceshin": 1015, "truong": 1015, "codevig": 1015, "shiebler": 1015, "hnyk": [1015, 1016], "elli": [1015, 1018], "nicholson": [1015, 1016, 1017], "thaler": 1015, "warshaw": 1015, "lasagna": 1015, "deborah": [1015, 1016], "definitelyuncertain": 1015, "didi": [1015, 1016, 1017, 1018], "zev": [1015, 1016, 1017, 1018], "dsquareindia": 1015, "edwinensa": 1015, "elia": 1015, "kuth": 1015, "fabio": 1015, "ticconi": 1015, "fisach": 1015, "donovan": 1015, "ghg": 1015, "giovanni": [1015, 1017], "cherubin": 1015, "lanzani": 1015, "glenn": 1015, "qian": [1015, 1020], "mohr": 1015, "govin": 1015, "vatsan": 1015, "reda": 1015, "gustav": 1015, "m\u00f6rtberg": 1015, "halwai": 1015, "harizo": [1015, 1016], "rajaona": [1015, 1016], "hashcode55": 1015, "hdmetor": 1015, "hobson": 1015, "lane": 1015, "bown": 1015, "igor": [1015, 1016, 1022], "andriushchenko": [1015, 1016], "inki": 1015, "hwang": 1015, "isaac": [1015, 1016, 1018, 1019], "sijaranamu": 1015, "iver": 1015, "jordal": 1015, "jackmartin": 1015, "fiedler": 1015, "routlei": 1015, "zike": 1015, "janna": 1015, "brettingen": 1015, "jarfa": 1015, "laska": 1015, "jblackburn": 1015, "levesqu": 1015, "hintz": 1015, "jeremynixon": 1015, "jeroen": 1015, "jessica": 1015, "jill": 1015, "j\u00eann": 1015, "vie": 1015, "jia": 1015, "jiyuan": 1015, "johannah": 1015, "boersma": 1015, "moeller": 1015, "striebel": [1015, 1016], "joncral": 1015, "jordi": 1015, "munoz": [1015, 1021], "jrfiedler": 1015, "juliankahnert": 1015, "juliathebrav": 1015, "kaichogami": 1015, "lyon": [1015, 1016], "kingjr": 1015, "kjell": 1015, "krishna": [1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024], "kalyan": 1015, "krishnakalyan3": 1015, "kvle": 1015, "putnam": 1015, "ldavid": 1015, "leig": 1015, "leightonzhang": 1015, "leland": [1015, 1016, 1017, 1019, 1020, 1025], "liang": [1015, 1020, 1021], "hsieh": 1015, "lizsz": 1015, "l\u00e9oni": 1015, "born": 1015, "maniteja": [1015, 1016, 1017], "nandana": [1015, 1016, 1017], "marco": [1015, 1017, 1018, 1022, 1023, 1024], "bao": [1015, 1023], "szepieniec": 1015, "madsen": [1015, 1017], "massil": 1015, "matheu": 1015, "duboi": [1015, 1017], "moroz": 1015, "scherer": 1015, "michiaki": 1015, "ariga": 1015, "moussa": 1015, "taifi": 1015, "mrandrewandrad": 1015, "mridul": 1015, "seth": 1015, "nadya": 1015, "naoya": [1015, 1016, 1017, 1018], "kanai": [1015, 1016, 1017], "nickledav": 1015, "nico": [1015, 1022], "ningchi": 1015, "nlathia": 1015, "okbalefthand": 1015, "okhlopkov": [1015, 1016], "pano": 1015, "lourida": 1015, "strickland": 1015, "perrin": 1015, "letelli": 1015, "pestrickland": 1015, "practicalswift": 1015, "qimu": 1015, "zheng": [1015, 1016, 1021], "rachit": [1015, 1021, 1024], "kansal": 1015, "ramana": [1015, 1016], "randi": 1015, "olson": 1015, "lutz": [1015, 1019, 1022], "schucker": 1015, "jain": [1015, 1016, 1017, 1021, 1023, 1024], "ruifeng": [1015, 1016, 1021], "r\u00e9my": 1015, "l\u00e9one": 1015, "saihttam": 1015, "saiw": 1015, "yeung": 1015, "shleifer": [1015, 1016], "sartaj": 1015, "sasank": 1015, "chilamkurthi": 1015, "seal": 1015, "shagun": 1015, "sodhani": 1015, "shanmuga": 1015, "shashank": [1015, 1021], "shekhar": 1015, "shawpan": 1015, "shengxiduan": 1015, "shota": 1015, "shuckle16": 1015, "smedbergm": 1015, "srvanrel": 1015, "leriqu": [1015, 1017], "taranjeet": 1015, "themrmax": [1015, 1016], "hallock": 1015, "moreau": [1015, 1016, 1017, 1018, 1019], "tkammi": 1015, "toastedcornflak": [1015, 1016], "tomdlt": 1015, "toshihiro": [1015, 1016, 1022], "kamishima": [1015, 1016], "tracer0tong": 1015, "hauck": 1015, "vo": [1015, 1023], "varun": [1015, 1016, 1017, 1023, 1024], "jewalikar": 1015, "vikram": [1015, 1024], "villu": 1015, "ruusmann": 1015, "walter": 1015, "waterponei": [1015, 1016], "wenjian": 1015, "welch": 1015, "wyseguy7": 1015, "xyguo": [1015, 1017], "yanlend": 1015, "yen": [1015, 1016], "yenchenlin": 1015, "yoav": 1015, "zivori": 1015, "10723": [1016, 1017], "9623": 1016, "undocu": 1016, "deleteri": 1016, "9677": 1016, "ashutosh": [1016, 1017, 1019, 1021], "correlation_model": 1016, "regression_model": 1016, "belatedli": 1016, "9717": 1016, "9693": 1016, "steingold": [1016, 1017], "9711": 1016, "goncalo": [1016, 1017], "rodrigu": [1016, 1017, 1022], "9641": 1016, "bourbeau": [1016, 1017, 1018], "9865": 1016, "sachin": [1016, 1017, 1023], "kelkar": [1016, 1017, 1019], "9922": 1016, "charli": [1016, 1017, 1025], "brummitt": [1016, 1017], "9945": 1016, "9830": 1016, "9600": 1016, "kerimov": [1016, 1017], "9593": 1016, "reiichiro": [1016, 1017], "nakano": [1016, 1017], "9604": 1016, "interim": 1016, "9558": 1016, "9847": 1016, "joan": [1016, 1017, 1018, 1019], "massich": [1016, 1017, 1018, 1019], "oli": 1016, "blum": 1016, "9697": 1016, "9750": 1016, "9788": 1016, "9815": 1016, "9802": 1016, "vrishank": [1016, 1017], "bhardwaj": [1016, 1017], "nagarjuna": [1016, 1017], "nathaniel": [1016, 1017, 1019], "diegodlh": [1016, 1017], "jkleint": [1016, 1017], "oliblum90": [1016, 1017], "pasbi": [1016, 1017], "lawson": [1016, 1017, 1018], "nielsenmarkus11": [1016, 1017], "excit": 1016, "cautiou": 1016, "min_impurity_split": 1016, "7823": [1016, 1017], "8446": 1016, "5279": 1016, "8363": 1016, "5295": 1016, "7388": 1016, "userguid": 1016, "7655": 1016, "karan": [1016, 1017, 1018], "desai": [1016, 1018, 1021, 1022, 1024], "7739": 1016, "gasquez": 1016, "8120": 1016, "neeraj": 1016, "gangwar": 1016, "7548": 1016, "9206": 1016, "7441": 1016, "6101": 1016, "8698": 1016, "7794": 1016, "herilalaina": [1016, 1017, 1019], "rakotoarison": [1016, 1017, 1019], "5036": 1016, "4939": 1016, "esuli": [1016, 1021], "n_skips_": 1016, "7914": 1016, "horrel": 1016, "8591": 1016, "hadrien": [1016, 1019], "7838": 1016, "8835": 1016, "8061": 1016, "cordier": 1016, "6288": 1016, "9145": 1016, "reddi": [1016, 1017, 1018, 1023], "chinthala": 1016, "7721": 1016, "crall": [1016, 1022], "7685": 1016, "tommi": [1016, 1017, 1018], "l\u00f6fstedt": 1016, "9277": 1016, "hongkahjun": 1016, "7089": 1016, "randomized_svd_low_rank": 1016, "9067": 1016, "6181": 1016, "wendling": 1016, "8065": 1016, "lejeun": 1016, "7567": 1016, "jay": 1016, "doepk": 1016, "7573": 1016, "romain": [1016, 1021], "brault": 1016, "5229": 1016, "7990": 1016, "8586": 1016, "7723": 1016, "8028": 1016, "booth": 1016, "8005": 1016, "7863": 1016, "7506": 1016, "5991": 1016, "8845": 1016, "8053": 1016, "8282": 1016, "8117": 1016, "9259": 1016, "8094": 1016, "8335": 1016, "poughon": 1016, "7880": 1016, "karnofski": 1016, "8931": 1016, "attractador": [1016, 1017], "8002": 1016, "8549": 1016, "zerodivisionerror": [1016, 1019, 1025], "7501": 1016, "dominik": 1016, "krzeminski": 1016, "7970": 1016, "8006": 1016, "p\u00f6lsterl": [1016, 1019, 1022], "8936": 1016, "8672": 1016, "mike": 1016, "benfield": 1016, "broke": 1016, "8068": 1016, "5732": 1016, "ytrue": 1016, "ypred": 1016, "8087": 1016, "7983": 1016, "8512": 1016, "8251": 1016, "aivision2020": 1016, "5814": 1016, "7849": 1016, "jair": 1016, "montoya": 1016, "martinez": 1016, "randomizedlasso": 1016, "5359": 1016, "9302": 1016, "8160": 1016, "8224": 1016, "gedeck": 1016, "vathsala": [1016, 1017, 1018, 1019], "achar": [1016, 1017, 1018, 1019], "9022": 1016, "mehmet": [1016, 1022], "basbug": 1016, "9024": 1016, "8973": 1016, "paulo": [1016, 1022, 1024], "haddad": 1016, "unmeaning": 1016, "6573": 1016, "quazi": [1016, 1017], "marufur": 1016, "rahman": [1016, 1017, 1021], "9239": 1016, "andr": [1016, 1023], "ambrosio": 1016, "boechat": 1016, "early_exager": 1016, "assertionerror": 1016, "8992": 1016, "7954": 1016, "foreman": 1016, "9105": 1016, "9108": 1016, "8306": 1016, "7872": 1016, "_c_step": 1016, "3367": 1016, "steward": 1016, "8768": 1016, "detomaso": 1016, "6507": 1016, "jayzed82": 1016, "6126": 1016, "7814": 1016, "7702": 1016, "9219": 1016, "7771": 1016, "ang": 1016, "randomizedlogisticregress": 1016, "8259": 1016, "mandatorili": 1016, "7565": 1016, "8181": 1016, "basesearchcv": [1016, 1017], "8344": 1016, "eriksson": 1016, "7661": 1016, "8295": 1016, "batula": 1016, "dylan": [1016, 1019], "werner": [1016, 1021], "meier": 1016, "7365": 1016, "aleksandr": 1016, "sandrovskii": 1016, "5697": 1016, "stijn": 1016, "tonk": 1016, "6250": 1016, "8093": 1016, "bull": 1016, "9507": 1016, "7356": 1016, "dingwal": 1016, "_check_target": 1016, "8377": 1016, "5211": 1016, "rhinehart": 1016, "8159": 1016, "8198": 1016, "fetch_": 1016, "7944": 1016, "7825": 1016, "kathleen": 1016, "7376": 1016, "yangarbit": 1016, "__getstate__": [1016, 1024], "obstruct": 1016, "8316": 1016, "holger": 1016, "8010": 1016, "7986": 1016, "najera": 1016, "9289": 1016, "makedir": 1016, "9284": 1016, "sebastin": [1016, 1017], "alert": 1016, "lgtm": 1016, "9278": 1016, "heli": 1016, "8449": 1016, "9078": 1016, "purport": 1016, "sergul": [1016, 1017, 1020], "aydor": [1016, 1017, 1020], "8922": 1016, "8137": 1016, "8139": 1016, "8995": 1016, "2879": 1016, "7459": 1016, "7812": 1016, "9100": 1016, "8481": 1016, "8174": 1016, "tahar": 1016, "zanouda": 1016, "8854": 1016, "8874": 1016, "7998": 1016, "jiacheng": 1016, "argpartit": 1016, "frombuffer_empti": 1016, "rankdata": 1016, "safe_copi": 1016, "eig": 1016, "fast_dot": 1016, "pinvh": [1016, 1018], "graph_laplacian": 1016, "sparsetool": 1016, "connected_compon": 1016, "check_decision_proba_consist": 1016, "shubham": [1016, 1019], "9019": 1016, "baseensembl": [1016, 1019], "7464": 1016, "rishikesh": 1016, "taehoon": [1016, 1017], "aashil": 1016, "balakumaran": [1016, 1017], "manoharan": [1016, 1017], "petrov": [1016, 1017], "minghui": [1016, 1017], "jc": [1016, 1017], "alexandercbooth": 1016, "chkoar": 1016, "aarshai": [1016, 1017], "gilliam": 1016, "subramanyam": 1016, "clement": [1016, 1017, 1021], "joudet": [1016, 1017], "robl": 1016, "kati": 1016, "luangkot": 1016, "lacchia": 1016, "akshay0724": 1016, "omtcyfz": 1016, "rickiepark": 1016, "jbdelafoss": 1016, "vivek": [1016, 1017, 1018], "elliott": 1016, "ldirer": 1016, "sid": 1016, "kapur": 1016, "midina": 1016, "mikebenfield": 1016, "sourav": [1016, 1019], "aseem": 1016, "bansal": 1016, "aishwaryark": 1016, "howel": 1016, "dokato": 1016, "kathi": [1016, 1019], "ferria": 1016, "nikita": [1016, 1017, 1019, 1022, 1023, 1024], "basil": 1016, "beirouti": 1016, "possa": 1016, "bednar": 1016, "janin": 1016, "harper": 1016, "artsiom": 1016, "ligo": 1016, "rahn": [1016, 1019], "seanpwilliam": 1016, "julian": [1016, 1017], "kuhlmann": [1016, 1017], "aubert": 1016, "j\u00f6rn": 1016, "hee": [1016, 1019], "shivamgargsya": [1016, 1020, 1022], "kat": 1016, "hempstalk": 1016, "kaushik": [1016, 1023, 1024, 1025], "lakshmikanth": 1016, "kennedi": [1016, 1019], "yap": 1016, "kiril": [1016, 1017, 1019, 1021], "bobyrev": 1016, "imbert": [1016, 1018, 1021, 1023], "lera": 1016, "douillard": 1016, "mainak": 1016, "tobychees": [1016, 1017], "manraj": 1016, "marc": [1016, 1018, 1019, 1025], "meketon": 1016, "marcofalk": 1016, "gilch": 1016, "mehul": 1016, "ahuja": [1016, 1023, 1024], "goetz": [1016, 1017], "dezub": 1016, "baumgartn": 1016, "vibrantabhi19": 1016, "golubin": 1016, "milen": 1016, "paskov": 1016, "antonin": 1016, "carett": 1016, "morikko": 1016, "mrmjauh": 1016, "nalepa": 1016, "namiya": 1016, "narinek": [1016, 1017], "angu": [1016, 1017, 1023], "nicol": 1016, "vavrova": 1016, "nitish": 1016, "pandei": [1016, 1021], "daniil": 1016, "olegovich": 1016, "craze": 1016, "om": 1016, "parmind": 1016, "patrick": [1016, 1017, 1022, 1023], "carlson": 1016, "ganssl": 1016, "lorek": 1016, "pete": [1016, 1020, 1021], "bachant": 1016, "csizsek": 1016, "jong": 1016, "puneet": 1016, "mathur": [1016, 1018, 1019, 1024, 1025], "quentin": [1016, 1017, 1018, 1025], "hibon": 1016, "1kastner": 1016, "rameshwar": [1016, 1017], "bhaskaran": [1016, 1017], "rebecca": 1016, "bilbro": 1016, "remi": 1016, "rampin": 1016, "pratik": 1016, "agarw": [1016, 1017, 1019], "sailesh": [1016, 1017], "choyal": [1016, 1017], "samson": 1016, "samu\u00ebl": 1016, "weber": 1016, "sarah": [1016, 1018, 1021], "abhyudai": 1016, "sharan": [1016, 1017], "yalburgi": [1016, 1017], "willduan": 1016, "siddharth": [1016, 1020], "almer": 1016, "theofilo": 1016, "papapanagiot": 1016, "alison": 1016, "boucher": 1016, "folkman": 1016, "jung": [1016, 1020, 1024], "shenoi": 1016, "vilhelm": [1016, 1017], "ehrenheim": [1016, 1017], "alan": [1016, 1017, 1020, 1022, 1023], "yee": [1016, 1017], "warut": [1016, 1017], "vijitbenjaronk": [1016, 1017], "yuichi": 1016, "fujikawa": 1016, "affanv14": 1016, "andreh7": 1016, "bradi": 1016, "salz": 1016, "campustrampu": 1016, "agamemnon": [1016, 1017, 1018, 1019, 1021, 1022], "krasouli": [1016, 1017, 1018, 1019, 1021, 1022], "ditenberg": 1016, "elena": 1016, "sharova": 1016, "filipj8": [1016, 1017], "fukatani": 1016, "guiniol": 1016, "guoci": 1016, "hakaa1": [1016, 1017], "xhy": 1016, "jakirkham": [1016, 1017, 1018, 1024], "jaroslaw": 1016, "jeroko": 1016, "jmontoyam": 1016, "josephsalmon": [1016, 1017, 1018], "jschendel": [1016, 1017], "leereev": 1016, "hahn": [1016, 1017], "mathurinm": [1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024], "mehak": 1016, "sachdeva": 1016, "mlewis1729": 1016, "mlliou112": 1016, "mthorrel": [1016, 1019], "ndingwal": 1016, "nuff": 1016, "plagre": 1016, "pldtc325": 1016, "breno": [1016, 1017], "olsen": 1016, "alfano": 1016, "burn": [1016, 1017], "polmauri": 1016, "charlton": 1016, "austin": 1016, "chayant": 1016, "t15h": 1016, "chinmaya": 1016, "pancholi": 1016, "danielsen": 1016, "chung": [1016, 1017], "pravarmahajan": [1016, 1017], "dariu": [1016, 1017], "morawiec": [1016, 1017], "haberth\u00fcr": 1016, "heryanto": 1016, "kirkbi": [1016, 1017], "rashchedrin": 1016, "gertrud": 1016, "devansh": [1016, 1017], "dickson": 1016, "baxlei": 1016, "don86": 1016, "klarup": 1016, "elizabeth": [1016, 1018, 1021], "ferriss": 1016, "ellen": 1016, "egli": 1016, "chieh": [1016, 1017], "chou": [1016, 1017], "grzegorz": [1016, 1019], "szpak": [1016, 1019], "zxcvbniu": 1016, "icyblad": 1016, "ilya": 1016, "laughlin": 1016, "iv\u00e1n": [1016, 1022], "vall\u00e9": 1016, "aur\u00e9lien": [1016, 1017, 1018, 1022, 1023], "bellet": [1016, 1017, 1018], "mahapatra": 1016, "bundl": [1017, 1018], "indexerror": [1017, 1018], "11756": [1017, 1018], "14237": [1017, 1018], "schuder": [1017, 1018, 1019], "13903": [1017, 1018], "13124": [1017, 1018], "13772": [1017, 1018], "vya": [1017, 1018, 1019], "12949": 1017, "prabakaran": [1017, 1018, 1021, 1023, 1024], "kumaresshan": [1017, 1018, 1021], "12946": 1017, "tallott": 1017, "13276": 1017, "13005": 1017, "13312": 1017, "11295": 1017, "vacaliuc": [1017, 1018], "13046": 1017, "12360": 1017, "aakanksha": 1017, "13134": 1017, "sandro": [1017, 1024], "casagrand": [1017, 1018], "12881": 1017, "13165": 1017, "13221": 1017, "bertrandhaut": [1017, 1018], "raghunathan": [1017, 1018, 1019, 1020, 1021, 1022, 1023], "dowon": [1017, 1018], "aria": [1017, 1018, 1024], "fibins": [1017, 1018], "finn": [1017, 1018], "shea": [1017, 1018], "joaak": [1017, 1018], "m\u00e9hault": [1017, 1018], "kms15": [1017, 1018], "kossori": [1017, 1018], "aruku": [1017, 1018], "lakshya": [1017, 1018, 1019], "ib\u00e1\u00f1ez": [1017, 1018, 1021], "gorelli": [1017, 1018, 1022, 1024], "marcogorelli": [1017, 1018], "mferrari3": [1017, 1018], "micka\u00ebl": [1017, 1018], "schoentgen": [1017, 1018], "pavlo": [1017, 1018], "kalli": [1017, 1018], "glaser": [1017, 1018], "pierretallott": [1017, 1018, 1019], "kapoor": [1017, 1018], "sandrocasagrand": [1017, 1018], "tashai": [1017, 1018], "vishaal": [1017, 1018], "zhuyi": [1017, 1018], "ziji": [1017, 1018], "zj": [1017, 1018], "poh": [1017, 1018], "12704": 1017, "12701": 1017, "12685": 1017, "12699": 1017, "adanhawth": [1017, 1018], "stine": [1017, 1018], "feda": [1017, 1018], "curic": [1017, 1018], "jeremiedbb": [1017, 1018, 1019], "katrin": [1017, 1018], "leinweb": [1017, 1018], "muhammad": [1017, 1018, 1022], "hassaan": [1017, 1018], "rafiqu": [1017, 1018], "paczuski": [1017, 1018], "waterburi": [1017, 1018], "shivam": [1017, 1018, 1019], "kotwalia": [1017, 1018], "12159": 1017, "12105": 1017, "11912": 1017, "12304": 1017, "12339": 1017, "12246": 1017, "10811": 1017, "feldbauer": [1017, 1018, 1019, 1020, 1023], "12441": 1017, "12517": 1017, "12234": 1017, "12165": 1017, "12388": 1017, "connor": [1017, 1022], "tann": [1017, 1022], "12393": 1017, "12122": 1017, "sharedmem": 1017, "12518": 1017, "12481": 1017, "12612": 1017, "12211": 1017, "lisa": [1017, 1018, 1020, 1021, 1023, 1024], "hannel": [1017, 1018], "melissa": 1017, "ferrari": 1017, "12451": 1017, "12171": 1017, "12365": 1017, "_encod": 1017, "12514": 1017, "12522": 1017, "12471": 1017, "marzinotto": [1017, 1018], "12317": 1017, "12338": 1017, "bauk": [1017, 1018], "12625": 1017, "sklearn_site_joblib": 1017, "12350": 1017, "12467": 1017, "unvendor": 1017, "12345": 1017, "navarret": [1017, 1018, 1019], "benjastudio": [1017, 1018], "cheuk": [1017, 1018], "connossor": [1017, 1018], "levinson": [1017, 1018], "kieker": [1017, 1018], "kataev": [1017, 1018], "dillon": [1017, 1018, 1019], "gardner": [1017, 1018], "vukolov": [1017, 1018], "caselli": [1017, 1018], "gauravahlawat": [1017, 1018], "gustavo": [1017, 1018, 1023], "haroldfox": [1017, 1018], "jacklangerman": [1017, 1018], "jacopo": [1017, 1018], "notarstefano": [1017, 1018], "janvanrijn": [1017, 1018], "jdethuren": [1017, 1018], "koen": [1017, 1018], "kushal": [1017, 1018], "chauhan": [1017, 1018, 1024], "jie": [1017, 1018, 1021], "lili": [1017, 1018], "xiong": [1017, 1018, 1023], "liam": [1017, 1018], "melsyt": [1017, 1018], "nichola": [1017, 1018, 1020], "shebanov": [1017, 1018], "oleksandr": [1017, 1018, 1019, 1020, 1023], "pavlyk": [1017, 1018, 1019, 1020], "hausamann": [1017, 1018], "pulkit": [1017, 1018, 1020], "maloo": [1017, 1018], "batista": [1017, 1018, 1022], "radostin": [1017, 1018], "stoyanov": [1017, 1018], "ramil": [1017, 1018], "nugmanov": [1017, 1018], "rebekah": [1017, 1018, 1019], "roopam": [1017, 1018], "tiernei": [1017, 1018, 1019], "sylvainlan": [1017, 1018, 1019, 1020, 1021], "takingitcasu": [1017, 1018], "tulio": [1017, 1018], "xing": [1017, 1018], "zach": [1017, 1018, 1023], "mountain": 1017, "sorri": 1017, "basemultilayerperceptron": [1017, 1019], "11924": 1017, "macbook": 1017, "9354": 1017, "9372": 1017, "astel": 1017, "10933": 1017, "hansen": 1017, "10471": 1017, "gaurav": [1017, 1018, 1019, 1020, 1021, 1023], "dhingra": [1017, 1018, 1021], "8003": 1017, "jo\u00ebl": 1017, "billaud": 1017, "10059": 1017, "braun": 1017, "9612": 1017, "jonatan": 1017, "samoocha": 1017, "8129": 1017, "margeta": 1017, "k_means_elkan": 1017, "11353": 1017, "11901": 1017, "9875": 1017, "9012": 1017, "11315": 1017, "9041": 1017, "9858": 1017, "artiem": 1017, "krinitsyn": 1017, "9908": 1017, "8617": 1017, "maskani": [1017, 1019, 1020, 1021], "filali": 1017, "konstantino": 1017, "katriopla": 1017, "10774": 1017, "catalfo": 1017, "10795": 1017, "takeshi": [1017, 1022, 1023, 1024], "yoshizawa": 1017, "11082": 1017, "sadhana": 1017, "srinivasan": [1017, 1020], "9731": 1017, "10045": 1017, "fetch_mldata": 1017, "11466": 1017, "6374": 1017, "normalize_compon": [1017, 1019], "11585": 1017, "ivan": [1017, 1018, 1021, 1024], "panico": [1017, 1021], "11420": 1017, "6452": 1017, "walli": 1017, "gauz": 1017, "9492": 1017, "8484": 1017, "9886": 1017, "underflow": [1017, 1022], "10142": 1017, "5956": 1017, "_class_mean": 1017, "_class_cov": 1017, "10898": 1017, "nanxin": 1017, "9832": 1017, "11951": 1017, "r\u00fcdiger": [1017, 1018, 1020], "busch": [1017, 1018, 1020], "9707": 1017, "wan": 1017, "7071": 1017, "9157": 1017, "11176": 1017, "forsyth": 1017, "11542": 1017, "anna": 1017, "9524": 1017, "9723": 1017, "10908": 1017, "10899": 1017, "melderi": 1017, "10101": 1017, "10\u2079": 1017, "9147": 1017, "clae": 1017, "fredrik": 1017, "mannbi": 1017, "10441": 1017, "mayur": 1017, "kulkarni": 1017, "6689": 1017, "nihar": 1017, "sheth": 1017, "11293": 1017, "9656": 1017, "greenhal": 1017, "n_features_to_comput": 1017, "9222": 1017, "hoh": 1017, "9234": 1017, "andrewww": 1017, "8075": 1017, "11211": 1017, "9484": 1017, "dalla": 1017, "card": 1017, "9043": 1017, "10112": 1017, "logistic_regression_path": [1017, 1018], "11724": 1017, "9939": 1017, "westov": 1017, "10998": 1017, "vazelh": [1017, 1018, 1019], "10071": 1017, "10153": 1017, "d\u00f6pfert": 1017, "10095": 1017, "cv_valu": 1017, "10297": 1017, "mabel": [1017, 1021], "10581": 1017, "yacin": 1017, "mazari": 1017, "10687": 1017, "10836": 1017, "aishwarya": 1017, "10397": 1017, "10992": 1017, "11327": 1017, "11905": 1017, "9837": 1017, "10593": 1017, "10610": 1017, "8554": 1017, "9775": 1017, "10827": 1017, "osa": 1017, "8066": 1017, "10587": 1017, "3840": 1017, "niederb\u00fchl": 1017, "9521": 1017, "11124": 1017, "arya": 1017, "11160": 1017, "barkhorn": 1017, "11679": 1017, "pacha": 1017, "10845": 1017, "perez": [1017, 1024], "parra": 1017, "toledano": 1017, "10999": 1017, "memoryerror": [1017, 1021], "11135": 1017, "10377": 1017, "9786": 1017, "10093": 1017, "alexryndin": 1017, "9772": 1017, "9515": 1017, "liddel": 1017, "manh": 1017, "dao": 1017, "9851": 1017, "10280": 1017, "10336": 1017, "haoran": 1017, "basemixtur": [1017, 1018], "10740": 1017, "10869": 1017, "g\u00e9ron": 1017, "9686": 1017, "11310": 1017, "_fit_and_scor": 1017, "11576": 1017, "ronsin": [1017, 1018], "_run_search": 1017, "9599": 1017, "11006": 1017, "11557": 1017, "boucaud": 1017, "iid": 1017, "9085": 1017, "10677": 1017, "zhdanovich": 1017, "10982": 1017, "juliet": 1017, "lawton": 1017, "10928": 1017, "solutu": 1017, "immensu": 1017, "9257": 1017, "8190": 1017, "alcorn": 1017, "9681": 1017, "mottl": [1017, 1018], "10005": 1017, "10346": 1017, "tobia": [1017, 1022, 1024], "10887": 1017, "11136": 1017, "4394": 1017, "9579": 1017, "kober": 1017, "9655": 1017, "bjerr": 1017, "11556": 1017, "11774": 1017, "9456": 1017, "unexpectedli": 1017, "9304": 1017, "11144": [1017, 1018], "9151": 1017, "10521": 1017, "7668": 1017, "9647": 1017, "10195": 1017, "10192": 1017, "11272": 1017, "11467": 1017, "11505": 1017, "giusepp": [1017, 1018], "costa": [1017, 1022], "10210": 1017, "11520": 1017, "11011": 1017, "11005": 1017, "11308": 1017, "11206": 1017, "11306": 1017, "10437": 1017, "lucija": 1017, "gregov": 1017, "10452": 1017, "10181": 1017, "nirvan": [1017, 1021], "anjirbag": 1017, "9399": 1017, "10913": 1017, "rodrigo": 1017, "agundez": 1017, "10458": 1017, "9816": 1017, "newei": 1017, "11042": 1017, "11235": 1017, "active_features_": 1017, "feature_indices_": 1017, "n_values_": 1017, "9726": 1017, "10829": 1017, "gilberto": 1017, "olimpio": 1017, "10655": 1017, "python2": 1017, "10412": 1017, "jiongyan": 1017, "9497": 1017, "8361": 1017, "neo": 1017, "_criterion": 1017, "classificationcriterion": 1017, "regressioncriterion": 1017, "10325": 1017, "camil": 1017, "stap": 1017, "basedecisiontre": [1017, 1018, 1021], "10536": 1017, "ohayon": [1017, 1018, 1025], "11464": 1017, "stott": 1017, "10663": 1017, "10229": 1017, "11553": 1017, "10881": 1017, "sevin": 1017, "ridge_regress": [1017, 1018, 1024], "10306": 1017, "siebert": 1017, "11741": 1017, "11166": 1017, "pypy3": 1017, "v5": 1017, "11010": 1017, "lami": 1017, "11596": 1017, "marcu": 1017, "voss": 1017, "9569": 1017, "12462": 1017, "zachariah": 1017, "10474": 1017, "10500": 1017, "9701": 1017, "9378": 1017, "check_set_param": 1017, "7738": 1017, "alvin": 1017, "chiang": 1017, "8102": 1017, "ankita": 1017, "sinha": 1017, "check_methods_subset_invari": [1017, 1023], "10428": 1017, "check_sample_weights_pandas_seri": 1017, "11558": 1017, "211217613": 1017, "absolutelynowarranti": 1017, "richi": 1017, "halford": [1017, 1024], "adelr": 1017, "adityadaflapurkar": 1017, "aidan": 1017, "fitzgerald": 1017, "aishgrt1": 1017, "akash": 1017, "shivram": 1017, "lenail": [1017, 1021], "egg": 1017, "diaz": 1017, "amanda": [1017, 1020, 1021, 1022, 1023], "aniruddha": 1017, "annaayzenshtat": 1017, "antonio": [1017, 1019], "quinonez": 1017, "anubhav": 1017, "marwaha": 1017, "arik": 1017, "pamnani": 1017, "ozga": 1017, "arunava": 1017, "geron": [1017, 1022, 1023], "ayush": [1017, 1022], "bangda": 1017, "bastian": 1017, "venthur": 1017, "benn": 1017, "koonc": 1017, "cclauss": 1017, "chadi": 1017, "kamar": 1017, "holdgraf": 1017, "hirsch": 1017, "hogan": 1017, "cnx": 1017, "cwitt": 1017, "ferreira": [1017, 1022, 1023], "gomez": [1017, 1024], "klevebr": 1017, "shwed": 1017, "mohn": [1017, 1021], "danil": 1017, "baibak": [1017, 1018], "beach": 1017, "pickup": 1017, "derek": 1017, "niederhut": [1017, 1019], "dilutedsauc": 1017, "dlovel": 1017, "dor": 1017, "dougla": 1017, "duhaim": 1017, "tuzova": 1017, "eunji": 1017, "farahsae": 1017, "raimundo": 1017, "fenx": 1017, "frankhui": 1017, "franz": 1017, "wompner": 1017, "freija": 1017, "descamp": 1017, "frsi": 1017, "calvo": [1017, 1018], "georgi": [1017, 1020], "peev": [1017, 1020], "gkevinyen5418": 1017, "vermeil": 1017, "hongh": 1017, "hossein": [1017, 1018, 1019], "pourbozorg": [1017, 1018, 1019], "hristo": [1017, 1024], "hunan": 1017, "rostomyan": 1017, "iampat": 1017, "jaewon": 1017, "malcolm": 1017, "jami": 1017, "wolosonovich": 1017, "jeb": 1017, "bearer": 1017, "jinkun": 1017, "jjabl": 1017, "johnstott": 1017, "jotasi": 1017, "julietcl": 1017, "shenk": 1017, "karl": 1017, "kasper": 1017, "primdal": 1017, "lauritzen": 1017, "ksemb": 1017, "kuai": [1017, 1018], "kyeongpil": 1017, "kang": [1017, 1019], "kye": 1017, "kyledrogo": 1017, "l\u00e9o": 1017, "liutong": 1017, "lizao": 1017, "lkjcalc": 1017, "louib": [1017, 1018], "luciano": [1017, 1024], "luke": 1017, "persola": 1017, "markiwanchyshyn": 1017, "marsgui": 1017, "gubri": [1017, 1018], "koko": [1017, 1023, 1024], "copeland": [1017, 1018], "meghann": [1017, 1019], "minh": 1017, "jamaoui": [1017, 1018, 1021], "mohammad": [1017, 1018], "shahebaz": 1017, "muayyad": 1017, "alsadi": 1017, "nabarun": 1017, "pal": [1017, 1023], "narendran": 1017, "santhanam": 1017, "suh": 1017, "eng": 1017, "av": 1017, "nicolau": 1017, "werneck": 1017, "titov": [1017, 1019, 1022, 1023], "nilesh": 1017, "kevlani": 1017, "notmatthancock": [1017, 1019], "nzw": 1017, "oren": 1017, "milman": 1017, "osaid": 1017, "rehman": 1017, "nasir": 1017, "fernand": [1017, 1023, 1024], "olden": 1017, "pierreablin": 1017, "pietruh": 1017, "pinaki": 1017, "nath": 1017, "chowdhuri": [1017, 1023], "piotr": [1017, 1018], "szyma\u0144ski": [1017, 1018], "pradeep": [1017, 1018], "raamana": [1017, 1018], "pravar": 1017, "mahajan": [1017, 1019], "qingi": 1017, "rajendra": 1017, "arora": [1017, 1024], "rankylau": 1017, "kosobrodov": 1017, "rragundez": 1017, "sagnik": 1017, "bhattacharya": 1017, "radhakrishnan": 1017, "saqib": 1017, "nizam": 1017, "shamsi": 1017, "satish": 1017, "gigant": [1017, 1019, 1024], "flennerhag": 1017, "sebastien": 1017, "shalil": 1017, "awalei": 1017, "shangwu": [1017, 1018], "sharad": 1017, "vijalapuram": 1017, "shenhanc78": 1017, "rastogi": 1017, "siftikha": 1017, "sinclert": 1017, "p\u00e9rez": 1017, "solutusimmensu": 1017, "somya": 1017, "anand": [1017, 1021], "srajan": 1017, "paliw": 1017, "sriharsha": [1017, 1018], "hatwar": [1017, 1018], "mcdowel": 1017, "syonekura": 1017, "takanori": 1017, "hayashi": 1017, "tarcusx": 1017, "theriley106": 1017, "heavei": 1017, "augspurg": [1017, 1019], "trishnendu": 1017, "ghorai": 1017, "twosigmajab": 1017, "umar": [1017, 1018], "farouk": [1017, 1018], "urvang": [1017, 1019], "patel": [1017, 1019, 1020, 1021, 1023], "vadim": [1017, 1021, 1022], "markovtsev": 1017, "vinit": 1017, "vinod": 1017, "viraj": 1017, "mavani": 1017, "navkal": 1017, "vqean3": [1017, 1018], "vufg": 1017, "wallygauz": 1017, "wdevazelh": 1017, "barnett": 1017, "rosenfeld": 1017, "yime": 1017, "ymazari": 1017, "yufeng": 1017, "griffith": [1017, 1018], "z\u00e9": 1017, "vin\u00edciu": 1017, "zhenq": 1017, "zhiqe": 1017, "xiao": [1017, 1019, 1022, 1023, 1024, 1025], "couldn": [1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "12955": 1018, "klopfer": 1018, "14197": 1018, "14024": 1018, "nicolashug": 1018, "13974": 1018, "hoang": [1018, 1019], "fhoang7": 1018, "14393": 1018, "guillem": [1018, 1019, 1024], "subi": [1018, 1019, 1024], "14087": 1018, "14067": 1018, "stalei": [1018, 1019], "14092": 1018, "14053": 1018, "13947": 1018, "instanci": 1018, "13910": 1018, "13894": 1018, "myatt": [1018, 1019], "min_max_axi": 1018, "13741": 1018, "roddi": [1018, 1019], "macsween": [1018, 1019], "14309": 1018, "13864": 1018, "paresh": [1018, 1019], "13877": 1018, "_sag": 1018, "sag_solv": 1018, "3591": 1018, "13317": 1018, "13157": 1018, "13086": 1018, "cole": 1018, "13485": 1018, "assia": 1018, "benbihi": 1018, "13651": 1018, "reloc": 1018, "13486": 1018, "13427": 1018, "couvreur": [1018, 1019], "9069": 1018, "13835": 1018, "10727": 1018, "wood": 1018, "13250": 1018, "13241": 1018, "12143": 1018, "11650": 1018, "non_negative_factor": [1018, 1020, 1021, 1022], "12988": 1018, "8769": 1018, "11000": 1018, "thibault": 1018, "sejourn": 1018, "changedbehaviourwarn": 1018, "11526": 1018, "6848": 1018, "glemaitr": [1018, 1019, 1021], "11727": 1018, "13266": 1018, "13545": 1018, "sorro": 1018, "12807": 1018, "12513": 1018, "12543": 1018, "storch": 1018, "13260": 1018, "13283": 1018, "13524": 1018, "13174": 1018, "13496": 1018, "13620": 1018, "12436": 1018, "12983": 1018, "13251": 1018, "joshuakennethjon": 1018, "12715": 1018, "13164": 1018, "12834": 1018, "leastsquareserror": 1018, "update_terminal_region": 1018, "6463": 1018, "movelikeriv": 1018, "13193": 1018, "12599": 1018, "13779": 1018, "13780": 1018, "12916": 1018, "13641": 1018, "8478": 1018, "12177": 1018, "12583": 1018, "13601": 1018, "danylo": 1018, "densif": 1018, "13240": 1018, "bartosz": 1018, "13562": 1018, "11646": 1018, "11699": 1018, "make_dataset": 1018, "13336": 1018, "toleranbc": 1018, "11754": 1018, "13397": 1018, "fagan": 1018, "12174": 1018, "12972": 1018, "lucio": 1018, "fernandez": 1018, "arjona": 1018, "coeffeci": 1018, "13279": 1018, "13328": 1018, "13389": 1018, "basesgdclassifi": 1018, "13422": 1018, "cl\u00e9ment": [1018, 1022, 1024], "doumouro": 1018, "unhandl": 1018, "13363": 1018, "12821": 1018, "13350": 1018, "j\u00e9r\u00f4me": [1018, 1019, 1020], "dock\u00e8": [1018, 1019, 1020], "9907": 1018, "12232": 1018, "sangeeth": 1018, "11179": 1018, "13151": 1018, "12568": 1018, "8216": 1018, "romuald": 1018, "menuet": 1018, "12732": 1018, "12334": 1018, "13607": 1018, "12855": 1018, "pawel": 1018, "sendyk": 1018, "13628": 1018, "13447": 1018, "10580": 1018, "sandra": [1018, 1024], "mitrov": 1018, "13554": 1018, "celelibi": 1018, "13142": 1018, "11354": 1018, "12613": 1018, "12669": 1018, "torrella": [1018, 1019, 1025], "12861": 1018, "8773": 1018, "13366": 1018, "fournier": 1018, "10440": 1018, "12222": 1018, "10058": 1018, "chiotelli": 1018, "12279": 1018, "12582": 1018, "my_pipelin": 1018, "2568": 1018, "make_": 1018, "11364": 1018, "baze": 1018, "petrushev": 1018, "__len__": 1018, "13439": 1018, "12908": 1018, "drew": 1018, "13253": 1018, "12116": 1018, "12197": 1018, "12251": 1018, "float16": 1018, "13007": 1018, "raffaello": 1018, "baluyot": 1018, "13333": 1018, "13459": 1018, "hunter": 1018, "mcgushion": 1018, "8508": 1018, "6261": 1018, "vettigli": 1018, "justglow": 1018, "12300": 1018, "11458": 1018, "mitar": 1018, "milutinov": 1018, "12344": 1018, "13549": 1018, "warn_on_dtyp": 1018, "check_pairwise_arrai": 1018, "13382": 1018, "prathmesh": 1018, "saval": 1018, "11705": 1018, "11973": 1018, "our_rand_r": 1018, "madhura": [1018, 1020, 1021, 1024], "parikh": [1018, 1023, 1024, 1025], "13531": 1018, "check_fit_idempot": 1018, "alberto": [1018, 1022, 1023], "torr": 1018, "amourav": 1018, "assiaben": 1018, "micha\u0142owski": 1018, "brentfagan": 1018, "chenal": [1018, 1019, 1021], "choe": 1018, "drewmjohnston": 1018, "dror": 1018, "atariah": 1018, "esvhd": 1018, "falak": 1018, "gandenberg": 1018, "luqi": 1018, "jf": 1018, "kulbear": 1018, "leandro": [1018, 1022], "hermida": [1018, 1022], "luk": 1018, "manimaran": [1018, 1020, 1021, 1022, 1023], "gaido": 1018, "marinelm": 1018, "masstran": 1018, "roeschk": 1018, "aftab": 1018, "abdela": 1018, "ibraheem": 1018, "mwestt": 1018, "iijima": 1018, "oresti": 1018, "osman": [1018, 1024], "flanagan": [1018, 1019], "soriano": 1018, "peai": 1018, "pim": 1018, "haan": 1018, "raf": 1018, "rajdeep": 1018, "dua": 1018, "ra\u00fal": 1018, "garc\u00eda": [1018, 1019, 1024], "lekhwani": 1018, "varma": 1018, "shiyu": 1018, "duan": [1018, 1020], "smari": [1018, 1019, 1020], "st\u00e9phane": [1018, 1019, 1023, 1024], "surgan12": 1018, "thibsej": 1018, "xhan": 1018, "xinyuliu12": 1018, "zayd": 1018, "hammoudeh": 1018, "16397": [1019, 1020], "16500": 1019, "16505": 1019, "16076": 1019, "shack": [1019, 1020, 1021], "15930": 1019, "inder128": 1019, "15810": 1019, "15898": 1019, "gargsya": 1019, "15933": 1019, "15760": 1019, "15888": 1019, "15936": 1019, "dizietasahi": 1019, "15879": 1019, "bibhash": [1019, 1020], "chandra": [1019, 1020, 1023], "mitra": [1019, 1020, 1024], "15937": 1019, "blyston": [1019, 1020], "15863": 1019, "abstractmethod": 1019, "_check_x": 1019, "basenb": 1019, "15996": 1019, "brigitta": [1019, 1020, 1021, 1025], "sip\u0151cz": [1019, 1020, 1021, 1025], "15751": 1019, "tirth": [1019, 1020], "15868": 1019, "nikla": [1019, 1020], "smedemark": 1019, "marguli": 1019, "15797": 1019, "15947": 1019, "revamp": 1019, "14849": 1019, "_name_estim": 1019, "_gb": 1019, "facto": 1019, "_birch": 1019, "9250": 1019, "12927": 1019, "deprecationwarn": 1019, "interfer": 1019, "hinder": 1019, "15080": 1019, "14464": 1019, "13575": 1019, "10482": 1019, "13726": 1019, "shuzh": 1019, "9288": 1019, "15057": 1019, "korolev": 1019, "15120": 1019, "7943": 1019, "12303": 1019, "14510": 1019, "14890": 1019, "miguel": 1019, "cabrera": 1019, "14544": 1019, "15304": 1019, "jaim": 1019, "ferrando": 1019, "huerta": 1019, "12068": 1019, "12145": 1019, "13609": 1019, "camila": 1019, "williamson": 1019, "15661": 1019, "15160": 1019, "14259": 1019, "14764": 1019, "14740": 1019, "st\u00e9phan": 1019, "tulken": 1019, "14623": 1019, "sarra": 1019, "habchi": 1019, "15257": 1019, "willocx": 1019, "12650": 1019, "13960": 1019, "multiouput": 1019, "14908": 1019, "martina": [1019, 1021], "vila": [1019, 1021], "15382": 1019, "14933": 1019, "15138": 1019, "cusick": 1019, "14406": 1019, "14012": 1019, "faouzi": [1019, 1020], "13769": 1019, "14194": 1019, "least_absolute_devi": [1019, 1021, 1022], "13896": 1019, "13933": 1019, "14710": 1019, "categorical_crossentropi": [1019, 1023], "14869": 1019, "14682": 1019, "hancock": 1019, "5963": 1019, "pablo": [1019, 1022, 1023], "dubou": 1019, "14287": 1019, "15375": 1019, "14305": 1019, "14114": 1019, "15084": 1019, "14294": 1019, "14907": 1019, "14602": 1019, "chawla": 1019, "vectorizermixin": 1019, "14430": 1019, "strip_accents_unicod": 1019, "15100": 1019, "gradi": 1019, "overflowerror": 1019, "15463": 1019, "norvan": 1019, "sahin": 1019, "14520": 1019, "11635": 1019, "alec": 1019, "13704": 1019, "15557": 1019, "14378": 1019, "masashi": [1019, 1021], "shibata": 1019, "ashim": 1019, "bhattarai": 1019, "15010": 1019, "skip_comput": 1019, "13773": 1019, "14356": 1019, "15393": 1019, "venkatachalam": [1019, 1020, 1021, 1022, 1023], "14646": 1019, "14028": 1019, "15429": 1019, "14706": 1019, "14108": 1019, "14170": 1019, "14296": 1019, "13618": 1019, "13995": 1019, "14458": 1019, "14591": 1019, "14864": 1019, "15044": 1019, "15086": 1019, "15038": 1019, "15082": 1019, "13213": 1019, "14647": 1019, "linalgerror": 1019, "13393": 1019, "13707": 1019, "training_data_": 1019, "14357": 1019, "14900": 1019, "socastro": [1019, 1025], "9951": 1019, "14936": 1019, "15083": 1019, "12789": 1019, "15274": 1019, "13938": 1019, "15049": 1019, "toccac": 1019, "ptocca": 1019, "13231": 1019, "dong": 1019, "13467": 1019, "14595": 1019, "14865": 1019, "l\u00e9onard": [1019, 1024], "binet": [1019, 1024], "14732": 1019, "14417": 1019, "15625": 1019, "12258": 1019, "14898": 1019, "matcovici": 1019, "14593": 1019, "reboul": 1019, "14549": 1019, "14704": 1019, "15096": 1019, "14629": 1019, "15488": 1019, "15490": 1019, "12569": 1019, "bicker": 1019, "9597": 1019, "wenbo": [1019, 1021], "zhao": [1019, 1021, 1022, 1023, 1024], "14336": 1019, "dexter": 1019, "9274": 1019, "perri": 1019, "13806": 1019, "ana\u00ebl": 1019, "beaugnon": 1019, "15119": 1019, "15053": 1019, "13290": 1019, "13987": 1019, "_pairwis": [1019, 1021], "13925": 1019, "robson": 1019, "15524": 1019, "xun": [1019, 1021], "12557": 1019, "14286": 1019, "15099": 1019, "baselibsvm": 1019, "_sparse_fit": 1019, "14894": 1019, "danna": 1019, "naser": 1019, "12887": 1019, "15028": 1019, "guan": 1019, "14381": 1019, "11232": 1019, "sievert": 1019, "10815": 1019, "14035": 1019, "14475": 1019, "14538": 1019, "14872": 1019, "upcast": [1019, 1023], "15094": 1019, "choose_check_classifiers_label": 1019, "enforce_estimator_tags_i": 1019, "mock": 1019, "mockdatafram": 1019, "checkingclassifi": 1019, "newton_cg": 1019, "random_choice_csc": 1019, "fast_dict": 1019, "parallel_help": 1019, "14902": 1019, "14971": 1019, "nep": 1019, "14702": 1019, "13013": 1019, "13875": 1019, "14680": 1019, "check_classifier_multioutput": 1019, "check_regressor_multioutput": 1019, "13392": 1019, "rok": 1019, "mihevc": 1019, "check_transformer_data_not_an_arrai": 1019, "mro": [1019, 1020], "14884": 1019, "alphonsu": 1019, "abbi": [1019, 1020], "popa": [1019, 1020], "abdur": 1019, "rahmaan": 1019, "janhang": 1019, "abenbihi": 1019, "abhinav": [1019, 1022], "sagar": 1019, "jana": 1019, "lagat": 1019, "alessandro": [1019, 1021, 1024], "surac": 1019, "siqueira": 1019, "alexgoryainov": 1019, "itk": [1019, 1020, 1021], "alexshack": [1019, 1020, 1021], "akinkunl": 1019, "kaseorg": 1019, "maldonado": [1019, 1022], "angela": [1019, 1020, 1024], "ambroz": [1019, 1020], "anisha": 1019, "keshavan": 1019, "gutierrez": 1019, "anuja": 1019, "archana": [1019, 1021], "alva": 1019, "arnaudstiegl": 1019, "arpanchowdhri": 1019, "ashimb9": 1019, "ayomid": 1019, "bamidel": 1019, "baran": 1019, "buluttekin": 1019, "barrycg": 1019, "bill": [1019, 1020], "mill": 1019, "biswadip": 1019, "mandal": 1019, "blackd0t": 1019, "barklei": 1019, "c56poni": 1019, "camilaagw": 1019, "cartman_nabana": 1019, "catajara": 1019, "cgsavard": [1019, 1020], "vesteghem": 1019, "dakota": 1019, "grusak": 1019, "datenbergwerk": 1019, "dormagen": 1019, "deeplook": 1019, "drgfreeman": 1019, "cashman": 1019, "edvardlindelof": 1019, "ndirangu": [1019, 1023], "eunseop": 1019, "jeong": 1019, "fanni": 1019, "federicopisanu": 1019, "divo": 1019, "flaviomorelli": 1019, "francidona": 1019, "franco": 1019, "luqu": 1019, "freder": 1019, "haas": 1019, "g0g0gadget": 1019, "altai": 1019, "vale": 1019, "rio": [1019, 1021, 1022, 1023], "ganevgv": 1019, "gdex1": 1019, "getgaurav2": 1019, "gideon": 1019, "sonoiya": 1019, "gpapadok": [1019, 1023], "mogavero": 1019, "h4dr1en": 1019, "hadshirt": 1019, "hailei": [1019, 1020], "nguyen": [1019, 1020, 1023, 1024], "hannah": [1019, 1021, 1023], "bruce": [1019, 1020], "macdonald": [1019, 1020], "honglu": 1019, "ingrid": 1019, "spielman": 1019, "a16": [1019, 1020], "jaehong": 1019, "jai": [1019, 1023], "jeromedock": 1019, "jesper": 1019, "dramsch": 1019, "joanna": 1019, "ortiz": 1019, "kanika": 1019, "sabharw": 1019, "katarina": [1019, 1021], "slama": [1019, 1021], "kellycarmodi": 1019, "eth": 1019, "kensuk": 1019, "arai": 1019, "kesshi": [1019, 1020], "kevad": 1019, "lofti": [1019, 1020], "winata": [1019, 1021], "sheng": 1019, "dolmatov": 1019, "kirthi": 1019, "shankar": 1019, "sivamani": 1019, "katyal": 1019, "lakshmi": 1019, "krishnan": 1019, "lalliacqua": [1019, 1022], "lbfin": 1019, "loopym": 1019, "lostcoast": 1019, "huynh": [1019, 1021], "lrjball": [1019, 1020], "roeder": 1019, "maggiecheg": [1019, 1023], "maithreyi": 1019, "venkatesh": 1019, "maltimor": 1019, "maocx": 1019, "douriez": [1019, 1020], "oywa": 1019, "aladago": 1019, "mbillingr": 1019, "clare": 1019, "micah": 1019, "miguelbarao": 1019, "mina": [1019, 1020], "naghshhnejad": [1019, 1020], "motmoti": 1019, "mschaffenroth": 1019, "natasha": 1019, "nezar": 1019, "nidhin": 1019, "pattaniyil": 1019, "nishan": 1019, "mann": 1019, "nitya": 1019, "mandyam": 1019, "novaya": [1019, 1022], "nxorabl": 1019, "oleg": 1019, "stikhin": 1019, "omar": [1019, 1024, 1025], "saleem": 1019, "panpiort8": [1019, 1021], "paula": [1019, 1020], "poorna": [1019, 1021], "pspachtholz": [1019, 1020, 1021], "qdeffens": [1019, 1022], "garg": [1019, 1020], "rapha\u00ebl": 1019, "bournhonesqu": 1019, "reza": 1019, "gharibi": 1019, "payn": 1019, "rlm": 1019, "juergen": [1019, 1024], "sanjabi": 1019, "ruchitagard": 1019, "ruth": 1019, "waithera": 1019, "sackei": 1019, "samesh": [1019, 1020], "lakhotia": [1019, 1020], "sewook": 1019, "dare": 1019, "shreya": 1019, "simoncw": 1019, "smujjiga": 1019, "s\u00f6nke": 1019, "behrend": 1019, "soumirai": 1019, "steinfurt": [1019, 1021], "cowlei": 1019, "th0rwa": [1019, 1020], "theoptip": [1019, 1020], "theotheo": 1019, "thierno": 1019, "ibrahima": 1019, "diop": 1019, "schmitt": [1019, 1020], "tilen": 1019, "kusterl": 1019, "timsaur": 1019, "tola": 1019, "topisan": 1019, "ttang131": 1019, "veerlosar": 1019, "luzgin": 1019, "jeanselm": 1019, "lostanlen": 1019, "vnherdeiro": 1019, "wendi": 1019, "willdarnel": 1019, "wolframalpha": 1019, "xcjason": 1019, "martian": 1019, "xsat": 1019, "yinglr": 1019, "yokasr": 1019, "maxin": [1019, 1020], "yulia": 1019, "zamrii": 1019, "feng": [1019, 1021, 1022, 1023], "17959": 1020, "17848": 1020, "17742": 1020, "17995": 1020, "thomaz": 1020, "santana": [1020, 1023], "dsouza": [1020, 1021, 1022, 1023], "17433": 1020, "17985": 1020, "multinomialdevi": 1020, "logloss": [1020, 1024], "17694": 1020, "rempfler": 1020, "tsutomu": 1020, "kusanagi": [1020, 1022], "17357": 1020, "18016": 1020, "x_copi": 1020, "17914": 1020, "15730": 1020, "forrest": [1020, 1021], "17309": 1020, "swier": [1020, 1021], "heer": 1020, "17812": 1020, "bruno": [1020, 1021, 1022], "idl": 1020, "17210": 1020, "17235": 1020, "17204": 1020, "changed_onli": 1020, "17205": 1020, "15005": [1020, 1022], "slep009": [1020, 1022, 1023], "estimator_samples_": 1020, "16149": 1020, "11950": 1020, "11514": 1020, "16075": 1020, "16484": 1020, "agglomerativecluclust": 1020, "16257": 1020, "simona": [1020, 1021, 1022], "maggio": [1020, 1021, 1022], "16801": 1020, "rcwoolston": 1020, "16431": 1020, "14048": 1020, "15963": 1020, "16084": 1020, "15950": 1020, "stephani": 1020, "15980": 1020, "wconnel": 1020, "15709": 1020, "15707": 1020, "maciej": 1020, "mikulski": 1020, "16006": 1020, "rushabh": 1020, "vasani": 1020, "streamhandl": 1020, "logger": 1020, "handler": 1020, "16451": 1020, "16280": 1020, "16837": 1020, "wornbb": 1020, "15669": 1020, "chaitanya": 1020, "16224": 1020, "schwetlick": [1020, 1021], "gelavizh": 1020, "ahmadi": 1020, "marija": [1020, 1021], "vlajic": [1020, 1021], "wheeler": [1020, 1021], "16841": 1020, "16655": 1020, "16718": 1020, "miotto": 1020, "16981": 1020, "g\u00f3rski": [1020, 1021], "14696": 1020, "14516": 1020, "15582": 1020, "16069": 1020, "bail": 1020, "16183": 1020, "16182": 1020, "santhosh": 1020, "16437": 1020, "hwan": 1020, "cho": 1020, "16539": 1020, "deros": 1020, "16692": 1020, "16663": 1020, "15834": 1020, "santiago": 1020, "mola": 1020, "16103": 1020, "divyaprabha": 1020, "selectormixin": 1020, "16132": 1020, "trimeta": 1020, "15503": 1020, "15782": 1020, "plgreenliru": 1020, "16403": 1020, "narendra": 1020, "mukherje": 1020, "16508": 1020, "15864": 1020, "14300": 1020, "15436": 1020, "15652": 1020, "15179": 1020, "angelaambroz": 1020, "15773": 1020, "15655": 1020, "14848": 1020, "absgrad": 1020, "_newton_cg": 1020, "16266": 1020, "standard_coef_": 1020, "standard_intercept_": 1020, "average_coef_": 1020, "average_intercept_": 1020, "16261": 1020, "brandt": 1020, "16849": 1020, "14264": 1020, "17021": 1020, "16323": 1020, "16362": 1020, "16442": 1020, "parson": [1020, 1022], "rick": 1020, "mackenbach": 1020, "16993": 1020, "emit": 1020, "15622": 1020, "mors": 1020, "15918": 1020, "kubin": 1020, "fit_grid_point": 1020, "16401": 1020, "pratama": 1020, "sutiono": 1020, "15953": 1020, "15959": 1020, "16111": 1020, "16090": 1020, "jayaratn": [1020, 1021, 1024], "14075": 1020, "meyer89": 1020, "16117": 1020, "15785": 1020, "16245": 1020, "16585": 1020, "15762": 1020, "16466": 1020, "16632": 1020, "maura": 1020, "pintor": 1020, "battista": 1020, "biggio": 1020, "15946": 1020, "ngshya": 1020, "32767": 1020, "mersenn": 1020, "twister": 1020, "31bit": 1020, "63bit": 1020, "crude": 1020, "postprocessor": 1020, "lemir": 1020, "13511": 1020, "kennel": 1020, "11296": 1020, "15558": 1020, "15806": 1020, "16331": 1020, "batiss": 1020, "15926": 1020, "16021": 1020, "sparsearrai": 1020, "16728": 1020, "uint": 1020, "17032": 1020, "_safe_tag": 1020, "16950": 1020, "15380": 1020, "acitiv": 1020, "16726": 1020, "16112": 1020, "16622": 1020, "17061": 1020, "aleksandra": 1020, "kocot": 1020, "alonso": [1020, 1022], "allend": [1020, 1022], "ana": [1020, 1022], "casado": 1020, "ankit810": 1020, "arunav": 1020, "konwar": 1020, "maingret": 1020, "beier": 1020, "berni": 1020, "bharathi": 1020, "brigi": [1020, 1021], "castachick": 1020, "castor": 1020, "corri": 1020, "bartelheim": 1020, "dani\u00ebl": 1020, "gelder": 1020, "daphn": 1020, "breuer": 1020, "cort": [1020, 1021, 1024], "dbauer9": 1020, "borovikova": 1020, "eln": 1020, "emili": [1020, 1021], "leung": 1020, "evgeni": 1020, "chasnovski": 1020, "fabiana": 1020, "facundo": [1020, 1023], "ferr\u00edn": 1020, "franziska": 1020, "boenisch": 1020, "bolmier": [1020, 1021, 1025], "gholdman1": 1020, "gonthier": 1020, "hao": [1020, 1021, 1023, 1024], "chun": [1020, 1021, 1023, 1024, 1025], "haoyin": [1020, 1022, 1023], "h\u00e9lion": 1020, "bourboux": 1020, "himanshu": [1020, 1023], "hirofumi": [1020, 1021], "suzuki": [1020, 1021], "huangk10": 1020, "kemenad": 1020, "hye": 1020, "sung": 1020, "indecisiveus": [1020, 1021], "inderjeet": 1020, "jjmistri": 1020, "haitz": [1020, 1022, 1023], "legarreta": [1020, 1022, 1023], "gorro\u00f1o": [1020, 1022, 1023], "judithabk6": 1020, "jumon": 1020, "kathryn": 1020, "krishnachaitanya9": 1020, "gia": 1020, "thuan": 1020, "lkubin": 1020, "lopusz": 1020, "lucgiffon": 1020, "lucyleeow": 1020, "kemk": 1020, "magda": 1020, "zielinska": 1020, "mandi": [1020, 1023], "gu": [1020, 1021, 1023], "manish": 1020, "aradwad": 1020, "maren": [1020, 1021, 1022, 1023, 1024], "westermann": [1020, 1021, 1022, 1023, 1024], "mariana": 1020, "meirel": 1020, "mariel": 1020, "mc4229": 1020, "shoemak": 1020, "micha\u0142": 1020, "s\u0142apek": 1020, "mojca": 1020, "bertoncelj": 1020, "narendramukherje": 1020, "nicolasservel": 1020, "nkish": 1020, "noa": 1020, "tamir": [1020, 1023], "olicairn": 1020, "ur": 1020, "lenz": [1020, 1024], "delanou": 1020, "qizhi": 1020, "quang": 1020, "rachelcjordan": 1020, "raduspaimoc": 1020, "riccardo": 1020, "folloni": 1020, "ritchi": 1020, "rori": 1020, "hartong": 1020, "redden": 1020, "sambhav": 1020, "kothari": 1020, "santhoshbala18": 1020, "sarat": 1020, "addep": 1020, "scibol": 1020, "kie\u00dfl": 1020, "sergiodsr": 1020, "shiki": 1020, "shubh": 1020, "chatterje": 1020, "simonamaggio": [1020, 1021, 1022], "snowhit": 1020, "stareh": 1020, "marsh": 1020, "sunmi": 1020, "yoon": 1020, "talgatomarov": 1020, "tamirlan1": 1020, "nonner": 1020, "vink": [1020, 1022], "tiphain": 1020, "viard": 1020, "titu": 1020, "vachan": 1020, "vandana": 1020, "iyer": 1020, "waelbenamara": 1020, "wderos": 1020, "wenliwyan": 1020, "windber": 1020, "19579": 1021, "19646": 1021, "stopiter": 1021, "19922": 1021, "19732": 1021, "ishikawa": [1021, 1022], "19407": 1021, "ushtanit": [1021, 1022], "19982": 1021, "19939": 1021, "halvic": 1021, "19703": 1021, "sobkevich": 1021, "villaz\u00f3n": 1021, "terraza": 1021, "fonari": [1021, 1022], "19182": 1021, "yosuk": [1021, 1022], "kobayashi": [1021, 1022], "19721": 1021, "19659": 1021, "19211": 1021, "19847": 1021, "xiaoyu": 1021, "chai": [1021, 1024], "19308": 1021, "19234": 1021, "19727": 1021, "delong": [1021, 1022], "transfrom": 1021, "19888": 1021, "19924": 1021, "19271": 1021, "zhaowei": 1021, "19580": 1021, "brice": [1021, 1022], "adamson": 1021, "wil": 1021, "yegelwel": 1021, "css": 1021, "19417": 1021, "19179": 1021, "19126": 1021, "17448": 1021, "17107": 1021, "17546": 1021, "17856": 1021, "17984": 1021, "riedmann": 1021, "francesco": [1021, 1024], "casalegno": 1021, "18052": 1021, "sean": [1021, 1022, 1024], "stallei": 1021, "17937": 1021, "counts_": 1021, "init_size_": 1021, "17864": 1021, "17616": 1021, "18167": 1021, "18256": 1021, "jayratn": 1021, "16392": 1021, "17095": 1021, "18746": 1021, "18525": 1021, "norm_y_weight": 1021, "x_mean_": 1021, "y_mean_": 1021, "x_std_": 1021, "y_std_": 1021, "18768": 1021, "18302": 1021, "md5": 1021, "checksum": 1021, "14800": 1021, "17396": 1021, "jiaxiang": 1021, "17491": 1021, "18280": 1021, "17499": 1021, "17610": 1021, "11064": 1021, "17414": 1021, "18149": 1021, "17679": 1021, "18528": 1021, "villanova": [1021, 1022], "14446": 1021, "18394": 1021, "16985": 1021, "garbag": 1021, "18334": 1021, "multicor": [1021, 1022], "18341": 1021, "egor": 1021, "smirnov": 1021, "18410": 1021, "17702": 1021, "18326": 1021, "changedbehaviorwarn": 1021, "nonblasdotwarn": 1021, "17804": 1021, "17367": 1021, "15427": 1021, "gangesh": 1021, "gudmalwar": 1021, "erin": 1021, "6545": 1021, "17159": 1021, "15361": 1021, "17878": 1021, "17090": 1021, "_check_bounds_param": 1021, "12638": 1021, "lannuzel": 1021, "17526": 1021, "ayako": 1021, "yagi": 1021, "17612": 1021, "srimukh": 1021, "sripada": 1021, "16493": 1021, "darshan": 1021, "15636": 1021, "18987": 1021, "16619": 1021, "16906": 1021, "roei": 1021, "kahni": 1021, "18293": 1021, "16289": 1021, "kishimoto": 1021, "18639": 1021, "13003": 1021, "s\u00e1nchez": 1021, "18545": 1021, "laurenz": 1021, "reitsam": 1021, "17578": 1021, "knox": 1021, "6624": 1021, "marijn": 1021, "vliet": 1021, "18121": 1021, "18607": 1021, "fhaselbeck": 1021, "18622": 1021, "haesun": [1021, 1024], "10493": 1021, "17997": 1021, "maisonneuv": 1021, "17662": 1021, "18278": 1021, "17412": 1021, "16625": 1021, "10591": 1021, "karnowski": 1021, "plot_det_curv": [1021, 1022], "18176": 1021, "10708": 1021, "15007": 1021, "hathidara": 1021, "10711": 1021, "17192": 1021, "avi": [1021, 1022], "17225": 1021, "17569": 1021, "17651": 1021, "mato": 1021, "17777": 1021, "shubhanshu": 1021, "mishra": [1021, 1022], "17826": 1021, "decal": 1021, "willard": 1021, "17935": 1021, "cari": 1021, "goltermann": 1021, "18114": 1021, "18405": 1021, "yakov": 1021, "pchelintsev": 1021, "13900": 1021, "17478": 1021, "teon": 1021, "13204": 1021, "kosic": 1021, "18527": 1021, "18343": 1021, "devi": 1021, "sandeep": 1021, "18595": 1021, "18222": 1021, "18266": 1021, "subrat": 1021, "sahu": 1021, "15126": 1021, "17987": 1021, "17233": 1021, "zolisa": 1021, "bleki": 1021, "histgradientboost": 1021, "18124": 1021, "brocchini": 1021, "armstrong": 1021, "17427": 1021, "17038": 1021, "neighborsbas": [1021, 1024], "17148": 1021, "18691": 1021, "18370": 1021, "18612": 1021, "17603": 1021, "17604": 1021, "17606": 1021, "17608": 1021, "17609": 1021, "17633": 1021, "17661": 1021, "17932": 1021, "16352": 1021, "17759": 1021, "18269": 1021, "17876": 1021, "18429": 1021, "biernat": 1021, "17317": 1021, "17406": 1021, "wick": 1021, "18406": 1021, "17833": 1021, "yashika": 1021, "18510": 1021, "18447": 1021, "16066": 1021, "18682": 1021, "16935": 1021, "17193": 1021, "16335": 1021, "14982": 1021, "11682": 1021, "patric": [1021, 1022], "15763": 1021, "16530": 1021, "shuhua": 1021, "17386": 1021, "17187": 1021, "x_idx_sort": 1021, "17614": 1021, "check_methods_sample_order_invari": [1021, 1023], "17598": 1021, "ngo": 1021, "17992": 1021, "endian": 1021, "17644": 1021, "18508": 1021, "abo7atm": 1021, "spannbauer": 1021, "deodhar": 1021, "alexandracraciun": 1021, "amy12xx": 1021, "tiwari": 1021, "choraria": 1021, "subramaniyan": 1021, "kushwaha": 1021, "atsushi": [1021, 1022], "nukariya": [1021, 1022], "aura": 1021, "autoviz": 1021, "auto_viml": 1021, "avinash": 1021, "anak": 1021, "barankaraku": 1021, "barberogaston": 1021, "beatrizsmg": 1021, "mainy": 1021, "bossan": [1021, 1023, 1024], "pedigo": [1021, 1022], "bhavika": 1021, "devnani": 1021, "biprateep": 1021, "dei": 1021, "bmaisonn": 1021, "byron": 1021, "ceethinwa": [1021, 1022], "chaitanyamog": 1021, "clmbst": 1021, "coelhudo": 1021, "crispinlogan": [1021, 1024, 1025], "cristina": 1021, "mula": 1021, "darioka": [1021, 1023, 1024], "declan": 1021, "neill": 1021, "deeksha": 1021, "madan": 1021, "fiegel": [1021, 1022, 1024], "khoo": 1021, "eschibli": 1021, "fran": [1021, 1022, 1023], "larsson": [1021, 1022, 1023], "sheni": 1021, "genvalen": [1021, 1022, 1023, 1024], "kiragu": 1021, "gesa": 1021, "stupperich": 1021, "ghislain": 1021, "vaillant": 1021, "gim": 1021, "seng": 1021, "chevali": 1021, "bohl": [1021, 1023], "schole": 1021, "hitesh": 1021, "somani": 1021, "hoda1394": 1021, "moin": 1021, "hugorichard": 1021, "isuru": 1021, "wiryadi": 1021, "j0rd1smit": 1021, "jaehyun": 1021, "ahn": 1021, "tae": 1021, "hoctor": 1021, "vese": 1021, "jeevan": 1021, "jeroenpeterbo": 1021, "jhay": 1021, "jigna": 1021, "panchal": 1021, "jim0421": 1021, "joaquin": 1021, "gorb": 1021, "moya": 1021, "kartik": 1021, "chugh": 1021, "kaylani2": 1021, "kendrick": 1021, "cetina": 1021, "kenni": 1021, "isakov": 1021, "koki": 1021, "nishihara": 1021, "krum": [1021, 1023], "arnaudov": [1021, 1023], "oldja": 1021, "guitton": 1021, "mariam": 1021, "l\u00f6ning": 1021, "scheubrein": 1021, "megasari": 1021, "mathschi": 1021, "giudic": 1021, "milan": 1021, "straka": 1021, "muoki": 1021, "caleb": 1021, "haiat": 1021, "nadia": 1021, "tahiri": 1021, "ph": 1021, "hamada": 1021, "neil": 1021, "botelho": 1021, "nil": 1021, "noelano": 1021, "oj_lappi": 1021, "oleh": [1021, 1023], "kozynet": [1021, 1023], "pankaj": 1021, "jindal": 1021, "pardeep": 1021, "parthiv": 1021, "chigurupati": 1021, "pgithub": 1021, "probinette4": 1021, "pwalchessen": 1021, "rachel": [1021, 1024], "fischoff": 1021, "toshniw": 1021, "rafei": 1021, "iqbal": 1021, "rahul": 1021, "jakhar": 1021, "rachum": 1021, "ramyanp": [1021, 1022], "rauwuckl": 1021, "ravi": [1021, 1024], "kiran": 1021, "boggavarapu": 1021, "rishi": 1021, "advani": 1021, "rithvik": 1021, "romijnd": 1021, "tavenard": 1021, "rubi": 1021, "werman": 1021, "ryotaro": 1021, "tsukada": 1021, "sadak": 1021, "khandelw": 1021, "ezebunandu": 1021, "kimbinyi": 1021, "shail": 1021, "keller": 1021, "shao": [1021, 1022, 1023], "shooter23": [1021, 1022], "soledad": 1021, "galli": 1021, "subrat93": 1021, "sunitha": 1021, "selvan": 1021, "kusanagi2": 1021, "terenc": [1021, 1022], "honl": [1021, 1022], "thij": [1021, 1024, 1025], "thomas9292": 1021, "thorben": 1021, "tijanajovanov": 1021, "timo": 1021, "tnwei": 1021, "ufmay": 1021, "umberto": 1021, "lupo": 1021, "vika": [1021, 1023], "viniciu": [1021, 1022], "fuck": [1021, 1022], "violeta": 1021, "watchtheblur": 1021, "willpeppo": 1021, "xethan": 1021, "qianm": 1021, "yue": 1021, "yutaro": 1021, "ikeda": 1021, "zacchari": 1021, "ramzi": 1021, "zoj613": 1021, "21271": 1022, "21833": 1022, "siavash": 1022, "rezazadeh": 1022, "19210": 1022, "21295": 1022, "22050": 1022, "21991": 1022, "19869": 1022, "21481": [1022, 1023], "andr\u00e9": [1022, 1023], "babino": [1022, 1023], "disconnect": 1022, "21915": 1022, "21694": 1022, "minknowski": 1022, "21741": 1022, "21871": 1022, "21845": 1022, "21517": 1022, "21917": 1022, "21552": 1022, "escap": [1022, 1024], "21493": 1022, "21199": 1022, "20638": 1022, "bohn\u00e9": 1022, "21179": 1022, "21195": 1022, "21130": 1022, "20761": 1022, "21251": 1022, "min_idf": 1022, "max_idf": 1022, "20752": 1022, "alek": [1022, 1023], "lefebvr": [1022, 1023], "21340": 1022, "21093": 1022, "21351": 1022, "cve": 1022, "28975": 1022, "21336": 1022, "_check_sample_weight": 1022, "only_non_neg": 1022, "20880": 1022, "andr\u00e1": [1022, 1023, 1024], "if_delegate_has_method": [1022, 1023], "21145": 1022, "zahlii": 1022, "21389": 1022, "20002": 1022, "19310": 1022, "least_squar": 1022, "19733": 1022, "lad": 1022, "absolute_loss": 1022, "20165": 1022, "18444": 1022, "18010": 1022, "threadsaf": 1022, "18736": 1022, "17443": 1022, "19641": 1022, "20087": 1022, "fauchereau": 1022, "19002": 1022, "19052": 1022, "yusuk": 1022, "nagasaka": 1022, "17622": 1022, "19024": 1022, "franki": 1022, "robertson": 1022, "20117": 1022, "natchiappan": [1022, 1023], "19883": 1022, "20597": 1022, "20899": 1022, "20200": 1022, "fit_": 1022, "partial_fit_": 1022, "19297": 1022, "20560": 1022, "18393": 1022, "bittarello": 1022, "19263": 1022, "19244": 1022, "18459": 1022, "nd": 1022, "18898": 1022, "ora": 1022, "phongpanagnam": 1022, "21080": 1022, "ledoit_wolf_shrinkag": 1022, "20416": 1022, "defoi": 1022, "20583": 1022, "19365": 1022, "ateif": 1022, "sara": 1022, "19669": 1022, "importlib": 1022, "pyoxid": 1022, "20297": 1022, "20209": 1022, "19011": 1022, "20729": 1022, "12069": 1022, "19046": 1022, "surya": [1022, 1023], "18433": 1022, "19198": 1022, "19159": 1022, "beno\u00eet": 1022, "mal\u00e9zieux": 1022, "19908": 1022, "20512": 1022, "20960": 1022, "cgroup": [1022, 1023], "quota": [1022, 1023], "20477": 1022, "19799": 1022, "19564": 1022, "19836": 1022, "19162": 1022, "10096": 1022, "fenil": 1022, "suchak": 1022, "20159": 1022, "murata": [1022, 1023], "20534": 1022, "19296": 1022, "19035": 1022, "19520": 1022, "18964": 1022, "19401": 1022, "relova": 1022, "17169": 1022, "dmytro": 1022, "lituiev": 1022, "20380": 1022, "pulido": 1022, "felip": [1022, 1023, 1024, 1025], "bidu": [1022, 1023], "rutter": 1022, "20515": 1022, "carsten": 1022, "allefeld": 1022, "19568": 1022, "shyam": 1022, "20207": 1022, "tomohiro": 1022, "endo": 1022, "20161": 1022, "shuhei": 1022, "kayawari": 1022, "arka204": [1022, 1024], "20431": 1022, "pfaffel": 1022, "19428": 1022, "hamoumi": 1022, "19411": 1022, "20959": 1022, "20554": 1022, "xiangyin": 1022, "kong": 1022, "9978": 1022, "10027": 1022, "16449": 1022, "20231": 1022, "naka": 1022, "19571": 1022, "20155": 1022, "oura": [1022, 1023, 1024], "19004": 1022, "midvidi": 1022, "19055": 1022, "19172": 1022, "19426": 1022, "19499": 1022, "strubel": 1022, "19616": 1022, "19391": 1022, "19390": 1022, "linearmodel": 1022, "17743": 1022, "17772": 1022, "17746": 1022, "17785": 1022, "17750": 1022, "17769": 1022, "20683": 1022, "19491": 1022, "19472": 1022, "shortest_path": 1022, "20531": 1022, "19415": 1022, "17036": 1022, "20326": 1022, "uttam": 1022, "9843": 1022, "19643": 1022, "attard": 1022, "19784": 1022, "18328": 1022, "20312": 1022, "divyanshu": 1022, "deoli": 1022, "18543": 1022, "20552": 1022, "19278": 1022, "20030": 1022, "tingshan": 1022, "18649": 1022, "rodion": 1022, "martynov": 1022, "20619": 1022, "baseshufflesplit": 1022, "20056": 1022, "pabloduque0": 1022, "prematur": 1022, "20904": 1022, "tomasz": 1022, "jakubek": [1022, 1023], "18925": 1022, "poznik": [1022, 1023, 1024], "18842": 1022, "19473": 1022, "jiefangxuanyan": 1022, "20072": 1022, "20842": 1022, "mart\u00edn": [1022, 1023], "19631": 1022, "19790": 1022, "flynn": [1022, 1024], "18368": 1022, "19483": 1022, "20526": 1022, "19069": 1022, "19041": 1022, "20250": 1022, "20652": 1022, "19934": 1022, "gleb": [1022, 1024, 1025], "levitskii": 1022, "19734": 1022, "robinson": 1022, "19752": 1022, "zhehao": [1022, 1023, 1024, 1025], "19527": 1022, "19788": 1022, "19356": 1022, "makoeppel": 1022, "19879": 1022, "19906": 1022, "20727": 1022, "20961": 1022, "n_input_features_": 1022, "20240": 1022, "20843": 1022, "18959": 1022, "wstate": 1022, "20023": 1022, "19336": 1022, "20272": 1022, "19459": 1022, "bezuidenhout": 1022, "clifford": 1022, "akai": 1022, "nettei": 1022, "19948": 1022, "20657": 1022, "19766": 1022, "20385": 1022, "_weighted_percentil": 1022, "huberlossfunct": 1022, "20528": 1022, "_safe_index": 1022, "20673": 1022, "is_scalar_nan": 1022, "assert_warn": 1022, "assert_warns_messag": 1022, "20521": 1022, "abdulelah": 1022, "mesfer": 1022, "adrian": [1022, 1023, 1024], "garcia": 1022, "badaracco": 1022, "sad\u0142ocha": 1022, "rubial": 1022, "alessia": 1022, "marcolini": 1022, "alihan": 1022, "zihna": 1022, "alin": 1022, "amol": 1022, "deshmukh": 1022, "pessoa": 1022, "anavelyz": 1022, "ashish": 1022, "ashvith": 1022, "shetti": 1022, "baam": [1022, 1023], "baptbillard": 1022, "bmalezieux": 1022, "bumblebe": 1022, "caherrera": 1022, "meli": [1022, 1023, 1024], "chrissobel": 1022, "yeh": 1022, "chuliang": 1022, "cliffordemmanuel": 1022, "conner": 1022, "shen": 1022, "dimitri": [1022, 1023, 1024], "papadopoulo": [1022, 1023, 1024], "orfano": [1022, 1023, 1024], "dmallia17": 1022, "ds_ana": 1022, "jardim": 1022, "edwinwenink": 1022, "eleni": 1022, "markou": 1022, "ericellwang": [1022, 1023], "ezri": 1022, "mudd": 1022, "fato": 1022, "morina": 1022, "hafner": 1022, "flyingdutchman23": 1022, "uwha": [1022, 1023], "bereng": 1022, "frederick": 1022, "frellwan": 1022, "vicent": [1022, 1023, 1024], "geroldcsend": 1022, "glen": 1022, "gl\u00f2ria": [1022, 1024], "mu\u00f1oz": [1022, 1024], "gregorystrubel": 1022, "groceryheist": 1022, "guiweb": 1022, "haidar": [1022, 1023], "almubarak": [1022, 1023], "moritz": [1022, 1024], "g\u00fcnther": 1022, "mirza": 1022, "harutaka": 1022, "kawamura": 1022, "hassan": 1022, "alsawadi": 1022, "geovan": [1022, 1023], "gome": [1022, 1023], "lima": [1022, 1023], "ilic": 1022, "ikko": 1022, "ashimin": 1022, "isaack": 1022, "mungui": 1022, "ishaan": 1022, "bhat": [1022, 1024], "ishan": [1022, 1023], "iwhalv": 1022, "preiss": 1022, "budarz": 1022, "jannik": 1022, "jennif": 1022, "jianzhu": 1022, "guo": 1022, "jnboehm": 1022, "johanwork": 1022, "paton": 1022, "n\u00e1pole": 1022, "julio": 1022, "julyrashchenko": 1022, "jvm": 1022, "kadatatlu": 1022, "kishor": 1022, "karen": 1022, "palacio": 1022, "kmatt10": 1022, "kobaski": 1022, "kot271828": 1022, "kunj": 1022, "kurumeyuta": 1022, "kxytim": 1022, "lacrosse91": 1022, "laveen": 1022, "bagai": 1022, "leonardo": 1022, "rocco": [1022, 1023, 1024], "uieda": 1022, "leopoldo": 1022, "corona": 1022, "lsturtew": 1022, "lucca": 1022, "quadro": 1022, "ly648499246": 1022, "mabu": 1022, "manaileng": 1022, "mariangela": 1022, "marielaraj": 1022, "hirzel": 1022, "mateo": 1022, "nore\u00f1a": 1022, "mathi": 1022, "batoul": 1022, "calcot": 1022, "prieur": 1022, "\u00f6zer": 1022, "miao": 1022, "cai": 1022, "karbownik": 1022, "michalkrawczyk": [1022, 1023], "mitzi": [1022, 1023], "mlondschien": 1022, "haseeb": [1022, 1023], "khoual": 1022, "jarir": 1022, "kanji": 1022, "nadim": 1022, "kawwa": 1022, "nanshan": 1022, "naozin555": 1022, "fultz": 1022, "nic": 1022, "annau": 1022, "stefani": [1022, 1024], "nigel": 1022, "bosch": 1022, "nodar": 1022, "okroshiashvili": 1022, "ogbonna": 1022, "chibuik": 1022, "ogordon100": 1022, "phongpanangam": 1022, "duqu": 1022, "ibieta": 1022, "jimenez": [1022, 1023], "lacouth": 1022, "olszewski": 1022, "dye": 1022, "pierreattard": [1022, 1023], "yve": 1022, "borgn": 1022, "pranayanchuri": 1022, "princ": 1022, "canuma": 1022, "putschblo": 1022, "ranjanikrishnan": 1022, "rene": 1022, "corneil": 1022, "ricardojnf": 1022, "richardscottoz": 1022, "sandi": 1022, "khosasi": 1022, "benhur": 1022, "flore": 1022, "shinehid": 1022, "shinnar": 1022, "tootoonian": 1022, "solosil": 1022, "kolawol": 1022, "stagg": 1022, "swpeas": 1022, "tfifi": 1022, "caswel": 1022, "timotheemathieu": 1022, "wolodzko": 1022, "tliu68": 1022, "uhmann": 1022, "tom1092": 1022, "tom\u00e1": [1022, 1023], "moreyra": 1022, "tommaso": 1022, "noto": 1022, "tsuga": 1022, "vang": 1022, "gkiasta": 1022, "vil\u00e9m": 1022, "zouhar": 1022, "vlasovet": 1022, "waijean": 1022, "whidou": 1022, "xiaoyuchai": 1022, "yasmeen": 1022, "alsaedi": 1022, "yoch": 1022, "yusukenagasaka": 1022, "yzhenman": 1022, "zeyusun": 1022, "zhaoweiwang": 1022, "msvcp140": 1023, "dll": 1023, "24631": 1023, "24446": 1023, "10805": 1023, "mathia": 1023, "23471": 1023, "24015": 1023, "23990": 1023, "23833": 1023, "24017": 1023, "sorski": [1023, 1024], "23395": 1023, "23636": 1023, "22063": 1023, "22059": 1023, "kurz": [1023, 1024], "23608": 1023, "23548": 1023, "24087": 1023, "23273": 1023, "23194": 1023, "23198": 1023, "lise": 1023, "kleiber": 1023, "23358": 1023, "23264": 1023, "feature_names_in": 1023, "23299": 1023, "23214": 1023, "collot": [1023, 1024], "baak": 1023, "23370": 1023, "23410": 1023, "compute_sample_weight": 1023, "23115": 1023, "22868": 1023, "multiindex": 1023, "22410": 1023, "23271": 1023, "21987": 1023, "22064": 1023, "22065": 1023, "22288": 1023, "22320": 1023, "21219": 1023, "21542": 1023, "23098": 1023, "22318": 1023, "23036": 1023, "binary_crossentropi": 1023, "23040": 1023, "23046": 1023, "22856": 1023, "21032": 1023, "18170": 1023, "21038": 1023, "14975": 1023, "22526": 1023, "23095": 1023, "silk": 1023, "20031": 1023, "krawczyk": 1023, "21148": 1023, "22255": 1023, "21881": 1023, "vassard": 1023, "22217": 1023, "21735": 1023, "22154": 1023, "22537": 1023, "iofal": 1023, "arisa": [1023, 1024], "22775": 1023, "22913": 1023, "randomgeek78": 1023, "22493": 1023, "19680": 1023, "thibaut": 1023, "22119": 1023, "22016": 1023, "22015": 1023, "19747": 1023, "attalla": 1023, "22498": 1023, "21482": 1023, "pujalt": 1023, "22412": 1023, "16605": 1023, "21901": 1023, "rileran": 1023, "23113": 1023, "ilion": 1023, "beyst": 1023, "21425": 1023, "stefanini": 1023, "16948": 1023, "patricio": 1023, "cerda": 1023, "22002": 1023, "21109": 1023, "inner_stats_": 1023, "iter_offset_": 1023, "18975": 1023, "22111": 1023, "22181": 1023, "21334": 1023, "21705": 1023, "stanlei": [1023, 1024], "21432": 1023, "22806": 1023, "jihan": 1023, "benni": 1023, "21713": 1023, "haya": 1023, "21567": 1023, "maggi": 1023, "chege": 1023, "22300": 1023, "15948": 1023, "sysuresh": 1023, "22553": 1023, "19490": 1023, "ferrin": 1023, "22120": 1023, "15984": 1023, "okon": 1023, "22696": 1023, "22486": 1023, "21800": 1023, "20567": 1023, "22159": 1023, "20811": 1023, "21814": 1023, "16748": 1023, "siqi": 1023, "22215": 1023, "23047": 1023, "22695": 1023, "22697": 1023, "21762": 1023, "22106": 1023, "gijsber": 1023, "21632": 1023, "genesi": [1023, 1025], "valencia": [1023, 1025], "22566": 1023, "22908": 1023, "23097": 1023, "23079": 1023, "20803": 1023, "23023": 1023, "21573": 1023, "21832": 1023, "20145": 1023, "22356": 1023, "18482": 1023, "gameiro": 1023, "kharsa": 1023, "22370": 1023, "17819": 1023, "22235": 1023, "21837": 1023, "wagner": 1023, "22199": 1023, "aidar": 1023, "shakerimoff": 1023, "tenavi": 1023, "nakamura": 1023, "22223": 1023, "marcom": 1023, "21617": 1023, "ritter": [1023, 1024], "21114": 1023, "21078": 1023, "21448": 1023, "16061": 1023, "19438": 1023, "18310": 1023, "elfner": 1023, "22249": 1023, "22137": 1023, "22694": 1023, "22808": 1023, "22950": 1023, "21086": 1023, "22206": 1023, "21808": 1023, "22548": 1023, "22062": 1023, "trujillo": [1023, 1024], "22148": 1023, "22240": 1023, "9087": 1023, "22525": 1023, "19689": 1023, "21606": 1023, "21341": 1023, "preservs": 1023, "21767": 1023, "21724": 1023, "yar": 1023, "khine": 1023, "phyo": 1023, "21998": 1023, "22891": 1023, "22899": 1023, "23256": 1023, "19794": 1023, "21534": 1023, "22254": 1023, "21805": 1023, "jeann": 1023, "dionisi": 1023, "22685": 1023, "n_neighbour": 1023, "18832": 1023, "23033": 1023, "21565": 1023, "17266": 1023, "22118": 1023, "ohad": 1023, "22284": 1023, "19158": 1023, "nicki": 1023, "skaft": 1023, "20753": 1023, "22108": 1023, "22635": 1023, "19085": 1023, "22866": 1023, "21576": 1023, "emil": 1023, "dugnat": 1023, "21873": 1023, "21177": 1023, "20408": 1023, "ceballo": 1023, "22058": 1023, "23034": 1023, "22203": 1023, "21026": 1023, "21880": 1023, "mrinal": 1023, "tyagi": 1023, "22982": 1023, "22508": 1023, "comb": 1023, "22604": 1023, "22212": 1023, "21430": 1023, "desislava": 1023, "vasileva": 1023, "22687": 1023, "22150": 1023, "22248": 1023, "20860": 1023, "shubhraneel": 1023, "21888": 1023, "21954": 1023, "22953": 1023, "16018": 1023, "21445": 1023, "21988": 1023, "get_output_feature_nam": 1023, "21569": 1023, "21079": 1023, "20653": 1023, "21434": 1023, "19916": 1023, "22735": 1023, "compute_inverse_transform": 1023, "21701": 1023, "22114": 1023, "21330": 1023, "21408": 1023, "22149": 1023, "21436": 1023, "22191": 1023, "22476": 1023, "21278": 1023, "21316": 1023, "clickabl": 1023, "21298": 1023, "22237": 1023, "check_scalar": 1023, "22218": 1023, "validationerror": 1023, "check_requires_y_non": 1023, "22578": 1023, "arcidiacono": [1023, 1024], "22595": 1023, "21310": 1023, "22027": 1023, "lanterni": 1023, "23077": 1023, "22188": 1023, "22830": 1023, "2357juan": [1023, 1024], "adamgonzo": 1023, "adijohar": 1023, "kumawat": 1023, "raghuwanshi": 1023, "duron": 1023, "ahmadjubair33": 1023, "aj": 1023, "druck": 1023, "peixinho": 1023, "arroyo": 1023, "alexanmv": 1023, "almeidayoel": 1023, "amar": [1023, 1024, 1025], "amrcod": 1023, "griva": [1023, 1024], "andrii": 1023, "herrou": 1023, "ducout": 1023, "arth": 1023, "arthurmello": 1023, "arturoamor": 1023, "atharva": 1023, "patil": 1023, "aufarkari": 1023, "avm19": [1023, 1024], "ayan": 1023, "bardiya": [1023, 1024], "behrouz": 1023, "ben3940": 1023, "bijil": 1023, "subhash": 1023, "bmreinig": 1023, "brenden": 1023, "kadota": 1023, "cdrig": 1023, "chalmer": 1023, "chitteti": 1023, "srinath": [1023, 1024], "chloe": 1023, "agath": 1023, "azencott": 1023, "christopherlim98": 1023, "weidemann": 1023, "combsccod": 1023, "daniela": [1023, 1024], "darren": [1023, 1024], "eargl": 1023, "gilbertson": [1023, 1024], "dea": [1023, 1024, 1025], "mar\u00eda": [1023, 1024, 1025], "denni": 1023, "osei": 1023, "dessyvv": 1023, "dev514": 1023, "diwakar": 1023, "ries": 1023, "drskd": 1023, "emiko": 1023, "sano": 1023, "emmanouil": 1023, "gionanidi": 1023, "ermolaevpa": [1023, 1024], "estefania": 1023, "barreto": 1023, "ojeda": 1023, "eyast": 1023, "fatima": 1023, "gasmi": 1023, "luna": 1023, "glushchenkov": 1023, "fkaren27": 1023, "fpgawesom": 1023, "ftorres16": [1023, 1024], "gabor": 1023, "berei": 1023, "kertesz": 1023, "gauthier": 1023, "giancarlo": 1023, "glennfrutiz": 1023, "guillermo": 1023, "fern\u00e1ndez": 1023, "hansin": [1023, 1024], "henrymooresc": [1023, 1024], "hideaki": 1023, "imamura": 1023, "hind": 1023, "hmasdev": 1023, "hvassard": 1023, "aki": [1023, 1024], "iasoon": 1023, "ingela": 1023, "cowton": 1023, "jalexand3r": 1023, "jauhar": 1023, "jaya": 1023, "kommireddi": 1023, "je": 1023, "jelfner": 1023, "jenni": 1023, "jirka": 1023, "borovec": 1023, "cipri\u00e1n": 1023, "loayza": 1023, "chazalon": 1023, "mess": 1023, "jovan": [1023, 1024], "stojanov": [1023, 1024], "jschuerz": 1023, "katotten": 1023, "ken4git": 1023, "doucet": 1023, "kimayoung": 1023, "koushik": 1023, "kranthi": 1023, "sedamaki": 1023, "krumetoft": 1023, "lesne": 1023, "casino": [1023, 1024], "logan": [1023, 1024], "lucieclair": 1023, "luiz": 1023, "magali": 1023, "mandjev": 1023, "wurp": [1023, 1024], "boerner": 1023, "wimld": 1023, "martel": 1023, "corentin": 1023, "mat\u00eda": 1023, "matjansen": 1023, "francia": 1023, "megabyt": 1023, "mehrdad": 1023, "moradizadeh": 1023, "melemo2": 1023, "micky774": [1023, 1024], "milana2": 1023, "millawel": 1023, "miwojc": 1023, "mizuki": 1023, "mlant": 1023, "mohit": 1023, "moonkyung94": 1023, "mpoemsl": 1023, "mrinaltyagi": 1023, "leu": 1023, "msabati": 1023, "nadirhan": 1023, "\u015fahin": 1023, "naipawat": [1023, 1024], "poolsawat": [1023, 1024], "nartayxd": 1023, "nastegiano": 1023, "nathansquan": 1023, "detlefsen": 1023, "niket": 1023, "nikhil": 1023, "suresh": 1023, "kondratyev": 1023, "husak": 1023, "partev": [1023, 1024], "pelennor": 1023, "piet": [1023, 1024], "br\u00f6mmel": [1023, 1024], "pinki": 1023, "poloso": 1023, "pramod": 1023, "anantharam": 1023, "puhuk": [1023, 1024], "purna": 1023, "mansingh": 1023, "quadv": 1023, "rahil": [1023, 1024, 1025], "boy": 1023, "raz": 1023, "hoshia": 1023, "rishabh": 1023, "barnowski": [1023, 1024], "rsnegrin": 1023, "yadav": 1023, "sakinaouisrani": 1023, "sanjai": 1023, "marreddi": 1023, "seel": 1023, "sele": [1023, 1024], "seyedsaman": 1023, "emami": 1023, "shandeng123": 1023, "sharmadharmp": 1023, "shaymernaturalint": 1023, "shuangchi": [1023, 1024], "siavrez": 1023, "slishak": 1023, "spikebh": 1023, "sply88": 1023, "kailasa": [1023, 1024], "sultan": 1023, "orazbayev": 1023, "sumit": 1023, "saha": 1023, "sven": [1023, 1024], "eschlbeck": 1023, "stehl": [1023, 1024], "swapnil": 1023, "teunp": 1023, "ferr\u00e9": 1023, "hjortkj\u00e6r": 1023, "thiruvenkadam": 1023, "toastedyeast": [1023, 1024], "mctiernan": [1023, 1024], "udit": 1023, "ugo": 1023, "marchand": 1023, "vera": [1023, 1024], "komey": [1023, 1024], "victoireloui": 1023, "vishwakarma": 1023, "vikrant": 1023, "khedkar": 1023, "chernyi": 1023, "weijiadu": 1023, "yuan": [1023, 1024], "yiyangq": 1023, "yosshi999": 1023, "yuki": 1023, "koyama": 1023, "zeel": 1023, "zempleni": 1023, "zhenfish": 1023, "\u8d75\u4e30": 1023, "25747": 1024, "base_estimator__": 1024, "25477": 1024, "25563": 1024, "25570": 1024, "25664": 1024, "25774": 1024, "25500": 1024, "25589": 1024, "25704": 1024, "min_sample_split": 1024, "25744": 1024, "25619": 1024, "25638": 1024, "25354": 1024, "25174": 1024, "25089": 1024, "25129": 1024, "25363": 1024, "25188": 1024, "25295": 1024, "spec": 1024, "25312": 1024, "backslash": 1024, "25511": 1024, "25172": 1024, "25341": 1024, "25094": 1024, "25250": 1024, "25370": 1024, "23101": 1024, "24873": 1024, "25694": 1024, "25274": 1024, "25296": 1024, "25147": 1024, "23619": 1024, "24354": 1024, "safiuddin": 1024, "khaja": 1024, "gsiisg": 1024, "23935": 1024, "22527": 1024, "_sgd_fast": 1024, "_plain_sgd": 1024, "oversc": 1024, "23798": 1024, "24543": 1024, "24465": 1024, "23734": 1024, "24699": 1024, "23865": 1024, "simd": 1024, "primit": 1024, "23446": 1024, "23197": 1024, "23604": 1024, "23585": 1024, "24556": 1024, "maladi\u00e8r": [1024, 1025], "24617": 1024, "sim4n6": 1024, "24688": 1024, "22054": 1024, "roic": 1024, "24264": 1024, "maladier": 1024, "14736": 1024, "hunt": 1024, "zhan": 1024, "20802": 1024, "pokorni": 1024, "22965": 1024, "22968": 1024, "23038": 1024, "23210": 1024, "24258": 1024, "23470": 1024, "21938": 1024, "23127": 1024, "19075": 1024, "ramo": 1024, "carre\u00f1o": 1024, "24951": 1024, "22268": 1024, "mohamedbsh": 1024, "23905": 1024, "11860": 1024, "ablin": 1024, "24528": 1024, "23726": 1024, "24421": 1024, "kshitij": [1024, 1025], "22554": 1024, "24218": 1024, "molin": 1024, "21020": 1024, "24856": 1024, "22014": 1024, "23252": 1024, "24538": 1024, "24889": 1024, "24146": 1024, "peretti": 1024, "nestor": 1024, "navarro": 1024, "nati": 1024, "tomatti": 1024, "24855": 1024, "24849": 1024, "20415": 1024, "24283": 1024, "24894": 1024, "23819": [1024, 1025], "edoardo": 1024, "abati": 1024, "24747": 1024, "24245": 1024, "24405": 1024, "salman": [1024, 1025], "16695": 1024, "vitor": 1024, "rosa": 1024, "18298": 1024, "25077": 1024, "24317": 1024, "24350": 1024, "24755": 1024, "levitski": [1024, 1025], "24637": 1024, "24767": 1024, "23275": 1024, "maxwelllzh": 1024, "24433": 1024, "yogendrasingh": 1024, "23637": 1024, "23877": 1024, "10168": 1024, "\u0142ukasz": 1024, "borchmann": 1024, "12285": 1024, "miltenberg": 1024, "13042": 1024, "parizi": 1024, "18094": 1024, "22562": 1024, "24714": 1024, "23834": 1024, "24051": 1024, "22518": 1024, "18020": 1024, "24338": 1024, "23442": 1024, "atukorala": 1024, "22710": 1024, "conroi": 1024, "trinh": 1024, "23461": 1024, "24365": 1024, "24630": 1024, "rushil": 1024, "24084": 1024, "iinfo": 1024, "24141": 1024, "24539": 1024, "23977": 1024, "23683": 1024, "andrei": 1024, "melnik": 1024, "16747": 1024, "18805": 1024, "hongshaoyang": 1024, "22269": 1024, "23139": 1024, "24645": 1024, "10468": 1024, "ruben": 1024, "22993": 1024, "24750": 1024, "rudresh": 1024, "veerkhar": 1024, "23874": 1024, "24075": 1024, "22665": 1024, "24683": 1024, "24058": 1024, "perdok": 1024, "20331": 1024, "23993": 1024, "22629": 1024, "24412": 1024, "22898": 1024, "23480": 1024, "21469": 1024, "lapack_svd_driv": 1024, "20617": 1024, "25067": 1024, "14862": 1024, "24512": 1024, "24667": 1024, "25080": 1024, "24523": 1024, "mia": 1024, "bajic": 1024, "3llobo": 1024, "kania": 1024, "anulekh": 1024, "admir": 1024, "demiraj": 1024, "adoublet": 1024, "ahmedbgh": 1024, "aiko": 1024, "akshita": 1024, "prasanth": 1024, "ala": 1024, "miola": 1024, "lebel": 1024, "buzenet": [1024, 1025], "kassa": 1024, "bera": 1024, "maennel": 1024, "aniket": 1024, "shirsat": 1024, "anthony22": 1024, "apostolo": 1024, "tsetogl": 1024, "aravindh": 1024, "artur": 1024, "hermano": 1024, "ashah002": 1024, "ashwin": [1024, 1025], "azaria": 1024, "gebremichael": 1024, "b0rxington": 1024, "badr": 1024, "moufad": 1024, "bart\u0142omiej": 1024, "go\u0144da": 1024, "bdegraaff": 1024, "berkecanrizai": 1024, "bernd": 1024, "fritzk": 1024, "bhoomika": 1024, "biswaroop": 1024, "cannon": 1024, "bsh": 1024, "ceh": 1024, "chalulu": 1024, "changyao": 1024, "zablit": 1024, "veenhui": 1024, "christianwaldmann": 1024, "christin": 1024, "verrier": 1024, "dangonite57": 1024, "danielgaerb": 1024, "davidblnc": 1024, "dayn": 1024, "khant": 1024, "dhanshre": 1024, "diadochokinet": 1024, "diederikwp": 1024, "litsidi": 1024, "drewhogg": 1024, "oc": 1024, "dwight": 1024, "lindquist": 1024, "eden": 1024, "brekk": 1024, "edern": 1024, "eleanor": 1024, "eliaschiavon": 1024, "emir": 1024, "fabrizio": 1024, "damicelli": 1024, "fcharra": 1024, "siola": [1024, 1025], "tuveri": 1024, "franck": 1024, "charra": 1024, "geevarghes": 1024, "georgiamaydai": 1024, "gianr": 1024, "lazz": 1024, "guitar": 1024, "gunesbayir": 1024, "harshit5674": 1024, "hasan": 1024, "yaman": 1024, "vrigazov": 1024, "htsedebenham": 1024, "humahn": 1024, "ido": 1024, "iglesi": 1024, "iliya": 1024, "zhechev": 1024, "iren": 1024, "ivanllt": 1024, "sedykh": 1024, "mcivor": 1024, "janfidor": 1024, "jiten": 1024, "sidhpura": 1024, "jkarolczak": 1024, "jo\u00e3o": 1024, "johnathanpi": 1024, "koumenti": 1024, "panga": [1024, 1025], "johnthagen": 1024, "fleme": 1024, "choo": [1024, 1025], "yun": [1024, 1025], "keat": [1024, 1025], "juanfe88": 1024, "juliaschoepp": 1024, "jygerardi": 1024, "ka00ri": 1024, "kanishk": 1024, "sachdev": 1024, "kanissh": 1024, "kendal": 1024, "kento": 1024, "nozawa": 1024, "eliasi": 1024, "kluge": 1024, "lieret": 1024, "kirandevraj": 1024, "kraig": 1024, "vamsi": 1024, "kapadni": 1024, "lingyi1110": 1024, "mantovani": 1024, "maascha": 1024, "madinak": 1024, "maksym": 1024, "mansi": 1024, "kostelac": [1024, 1025], "marvin": [1024, 1025], "krawutschk": [1024, 1025], "masanori": 1024, "kanazu": 1024, "haberland": 1024, "mauroantonioserrano": 1024, "maxi": 1024, "marufo": 1024, "maximesaur": 1024, "smolskii": 1024, "bou": 1024, "mehgarg": 1024, "mehmetcanakbai": 1024, "baji\u0107": 1024, "flak": 1024, "hornstein": 1024, "ruiter": 1024, "paradi": 1024, "iljin": 1024, "misa": 1024, "ogura": 1024, "wilksch": 1024, "mrastgoo": 1024, "naois": 1024, "holohan": 1024, "nass": 1024, "jacobi": 1024, "nawazish": 1024, "alam": 1024, "nguy\u1ec5n": 1024, "v\u0103n": 1024, "di\u1ec5n": 1024, "fanelli": 1024, "nihal": 1024, "thukarama": 1024, "jare": 1024, "nima10khodaveisi": 1024, "nima": 1024, "sarajpoor": 1024, "nitinramvelraj": 1024, "nnlnr": 1024, "npach": 1024, "nwanna": 1024, "nymark": 1024, "kho": 1024, "holman": 1024, "oll": 1024, "lukowski": 1024, "hassoun": 1024, "tamer": 1024, "ouss1508": 1024, "oyindamola": 1024, "olatunji": 1024, "pab": 1024, "pandata": 1024, "soar": 1024, "petar": 1024, "mlinari\u0107": 1024, "pooja": 1024, "subramaniam": 1024, "priyam": 1024, "kakati": 1024, "freeland": 1024, "keerti": 1024, "rafal": 1024, "wojdyla": 1024, "raghuv": 1024, "makhija": 1024, "rehan": 1024, "guha": 1024, "klima": 1024, "crockett": 1024, "homm": 1024, "roman4oo": 1024, "rowan": 1024, "mankoo": 1024, "sabri": 1024, "monaf": 1024, "safikh": 1024, "salahuddin": 1024, "yojana": 1024, "menes": 1024, "ephrem": 1024, "sangam": 1024, "sangamswadik": 1024, "sanjai_3": 1024, "sarahremu": 1024, "sashka": 1024, "savkomax": 1024, "gustafson": 1024, "sec65": 1024, "seljak": 1024, "shadi": 1024, "gewili": 1024, "shellyfung": 1024, "shinsuk": 1024, "mori": 1024, "shiva": 1024, "shoaib": 1024, "khan": 1024, "shogo": 1024, "hida": 1024, "shrankhla": 1024, "sonniv": 1024, "sortofamudkip": 1024, "stanislav": 1024, "modrak": 1024, "stellalin7": 1024, "vaerenbergh": 1024, "schmerler": 1024, "tabea": 1024, "kossen": 1024, "thedevpanda": 1024, "syd": 1024, "sre": 1024, "weezel": [1024, 1025], "bonald": 1024, "germer": 1024, "ion": 1024, "timofei": 1024, "kornev": 1024, "pitter": 1024, "tomiock": 1024, "mathew": 1024, "tspeng": 1024, "egashira": 1024, "rey": 1024, "puerta": 1024, "vishal": 1024, "vyom": 1024, "pathak": 1024, "wattai": 1024, "wchathura": 1024, "wen": 1024, "x110": 1024, "xuniu": 1024, "yanhong": 1024, "ef": 1024, "yusuf": 1024, "raji": 1024, "adil": 1024, "khwaja": 1024, "zeeshan": 1024, "lone": 1024, "25196": 1025, "24871": 1025, "25438": 1025, "yotam": 1025, "avidar": 1025, "constantini": 1025, "25752": 1025, "26337": 1025, "25294": 1025, "25308": 1025, "25291": 1025, "25367": 1025, "25402": 1025, "25044": 1025, "smt": 1025, "26082": 1025, "25815": 1025, "24568": 1025, "26121": 1025, "25805": 1025, "25251": 1025, "26385": 1025, "26033": 1025, "graphical_lasso_path": 1025, "26108": 1025, "barth\u00e9lemi": 1025, "25784": 1025, "26386": 1025, "25490": 1025, "25956": 1025, "22409": 1025, "25177": 1025, "24882": 1025, "25186": 1025, "breve": 1025, "26318": 1025, "25506": 1025, "25601": 1025, "fidor": 1025, "25931": 1025, "25629": 1025, "26242": 1025, "toplak": 1025, "sckit": 1025, "25297": 1025, "24230": 1025, "25102": 1025, "25973": 1025, "25232": 1025, "21809": 1025, "25732": 1025, "26207": 1025, "25587": 1025, "25697": 1025, "25214": 1025, "25713": 1025, "25531": 1025, "25432": 1025, "25672": 1025, "lene": 1025, "preuss": 1025, "18723": 1025, "sahil": 1025, "24677": 1025, "24668": 1025, "dberenbaum": 1025, "25987": 1025, "26019": 1025, "25299": 1025, "omarmanzoor": 1025, "17388": 1025, "24769": 1025, "26194": 1025, "26264": 1025, "barata": 1025, "onggo": 1025, "23099": 1025, "25659": 1025, "26333": 1025, "24140": 1025, "25417": 1025, "24076": 1025, "24083": 1025, "25443": 1025, "feature_union": 1025, "25093": 1025, "25220": 1025, "26325": 1025, "25334": 1025, "22506": 1025, "24935": 1025, "seladu": 1025, "25257": 1025, "25677": 1025, "26424": 1025, "25190": 1025, "26093": 1025, "23595": 1025, "26376": 1025, "25387": 1025, "26289": 1025, "check_transformers_unfitted_stateless": 1025, "20524": 1025, "niuk": 1025, "23731": 1025, "25733": 1025, "25813": 1025, "26106": 1025, "25814": 1025, "19664": 1025}, "objects": {"sklearn": [[396, 0, 0, "-", "base"], [396, 0, 0, "-", "calibration"], [396, 0, 0, "-", "cluster"], [396, 0, 0, "-", "compose"], [454, 4, 1, "", "config_context"], [396, 0, 0, "-", "covariance"], [396, 0, 0, "-", "cross_decomposition"], [396, 0, 0, "-", "datasets"], [396, 0, 0, "-", "decomposition"], [396, 0, 0, "-", "discriminant_analysis"], [396, 0, 0, "-", "dummy"], [396, 0, 0, "-", "ensemble"], [396, 0, 0, "-", "exceptions"], [396, 0, 0, "-", "experimental"], [396, 0, 0, "-", "feature_extraction"], [396, 0, 0, "-", "feature_selection"], [396, 0, 0, "-", "gaussian_process"], [612, 4, 1, "", "get_config"], [396, 0, 0, "-", "impute"], [396, 0, 0, "-", "inspection"], [396, 0, 0, "-", "isotonic"], [396, 0, 0, "-", "kernel_approximation"], [396, 0, 0, "-", "kernel_ridge"], [396, 0, 0, "-", "linear_model"], [396, 0, 0, "-", "manifold"], [396, 0, 0, "-", "metrics"], [396, 0, 0, "-", "mixture"], [396, 0, 0, "-", "model_selection"], [396, 0, 0, "-", "multiclass"], [396, 0, 0, "-", "multioutput"], [396, 0, 0, "-", "naive_bayes"], [396, 0, 0, "-", "neighbors"], [396, 0, 0, "-", "neural_network"], [396, 0, 0, "-", "pipeline"], [396, 0, 0, "-", "preprocessing"], [396, 0, 0, "-", "random_projection"], [396, 0, 0, "-", "semi_supervised"], [882, 4, 1, "", "set_config"], [883, 4, 1, "", "show_versions"], [396, 0, 0, "-", "svm"], [396, 0, 0, "-", "tree"], [396, 0, 0, "-", "utils"]], "sklearn.base": [[411, 1, 1, "", "BaseEstimator"], [412, 1, 1, "", "BiclusterMixin"], [413, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [414, 1, 1, "", "ClassifierMixin"], [415, 1, 1, "", "ClusterMixin"], [416, 1, 1, "", "DensityMixin"], [417, 1, 1, "", "OneToOneFeatureMixin"], [418, 1, 1, "", "RegressorMixin"], [419, 1, 1, "", "TransformerMixin"], [420, 4, 1, "", "clone"], [421, 4, 1, "", "is_classifier"], [422, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[411, 2, 1, "", "get_params"], [411, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[412, 3, 1, "", "biclusters_"], [412, 2, 1, "", "get_indices"], [412, 2, 1, "", "get_shape"], [412, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[413, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[414, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[415, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[416, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[417, 2, 1, "", "get_feature_names_out"]], "sklearn.base.RegressorMixin": [[418, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[419, 2, 1, "", "fit_transform"], [419, 2, 1, "", "set_output"]], "sklearn.calibration": [[423, 1, 1, "", "CalibratedClassifierCV"], [424, 1, 1, "", "CalibrationDisplay"], [425, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[423, 2, 1, "", "fit"], [423, 2, 1, "", "get_params"], [423, 2, 1, "", "predict"], [423, 2, 1, "", "predict_proba"], [423, 2, 1, "", "score"], [423, 2, 1, "", "set_params"]], "sklearn.calibration.CalibrationDisplay": [[424, 2, 1, "", "from_estimator"], [424, 2, 1, "", "from_predictions"], [424, 2, 1, "", "plot"]], "sklearn.cluster": [[426, 1, 1, "", "AffinityPropagation"], [427, 1, 1, "", "AgglomerativeClustering"], [428, 1, 1, "", "Birch"], [429, 1, 1, "", "BisectingKMeans"], [430, 1, 1, "", "DBSCAN"], [431, 1, 1, "", "FeatureAgglomeration"], [432, 1, 1, "", "HDBSCAN"], [433, 1, 1, "", "KMeans"], [434, 1, 1, "", "MeanShift"], [435, 1, 1, "", "MiniBatchKMeans"], [436, 1, 1, "", "OPTICS"], [437, 1, 1, "", "SpectralBiclustering"], [438, 1, 1, "", "SpectralClustering"], [439, 1, 1, "", "SpectralCoclustering"], [440, 4, 1, "", "affinity_propagation"], [441, 4, 1, "", "cluster_optics_dbscan"], [442, 4, 1, "", "cluster_optics_xi"], [443, 4, 1, "", "compute_optics_graph"], [408, 4, 1, "", "dbscan"], [444, 4, 1, "", "estimate_bandwidth"], [445, 4, 1, "", "k_means"], [446, 4, 1, "", "kmeans_plusplus"], [447, 4, 1, "", "mean_shift"], [448, 4, 1, "", "spectral_clustering"], [449, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[426, 2, 1, "", "fit"], [426, 2, 1, "", "fit_predict"], [426, 2, 1, "", "get_params"], [426, 2, 1, "", "predict"], [426, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[427, 2, 1, "", "fit"], [427, 2, 1, "", "fit_predict"], [427, 2, 1, "", "get_params"], [427, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[428, 2, 1, "", "fit"], [428, 2, 1, "", "fit_predict"], [428, 2, 1, "", "fit_transform"], [428, 2, 1, "", "get_feature_names_out"], [428, 2, 1, "", "get_params"], [428, 2, 1, "", "partial_fit"], [428, 2, 1, "", "predict"], [428, 2, 1, "", "set_output"], [428, 2, 1, "", "set_params"], [428, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[429, 2, 1, "", "fit"], [429, 2, 1, "", "fit_predict"], [429, 2, 1, "", "fit_transform"], [429, 2, 1, "", "get_feature_names_out"], [429, 2, 1, "", "get_params"], [429, 2, 1, "", "predict"], [429, 2, 1, "", "score"], [429, 2, 1, "", "set_output"], [429, 2, 1, "", "set_params"], [429, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[430, 2, 1, "", "fit"], [430, 2, 1, "", "fit_predict"], [430, 2, 1, "", "get_params"], [430, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[431, 2, 1, "", "fit"], [431, 3, 1, "", "fit_predict"], [431, 2, 1, "", "fit_transform"], [431, 2, 1, "", "get_feature_names_out"], [431, 2, 1, "", "get_params"], [431, 2, 1, "", "inverse_transform"], [431, 2, 1, "", "set_output"], [431, 2, 1, "", "set_params"], [431, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[432, 2, 1, "", "dbscan_clustering"], [432, 2, 1, "", "fit"], [432, 2, 1, "", "fit_predict"], [432, 2, 1, "", "get_params"], [432, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[433, 2, 1, "", "fit"], [433, 2, 1, "", "fit_predict"], [433, 2, 1, "", "fit_transform"], [433, 2, 1, "", "get_feature_names_out"], [433, 2, 1, "", "get_params"], [433, 2, 1, "", "predict"], [433, 2, 1, "", "score"], [433, 2, 1, "", "set_output"], [433, 2, 1, "", "set_params"], [433, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[434, 2, 1, "", "fit"], [434, 2, 1, "", "fit_predict"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "predict"], [434, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[435, 2, 1, "", "fit"], [435, 2, 1, "", "fit_predict"], [435, 2, 1, "", "fit_transform"], [435, 2, 1, "", "get_feature_names_out"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "partial_fit"], [435, 2, 1, "", "predict"], [435, 2, 1, "", "score"], [435, 2, 1, "", "set_output"], [435, 2, 1, "", "set_params"], [435, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[436, 2, 1, "", "fit"], [436, 2, 1, "", "fit_predict"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[437, 3, 1, "", "biclusters_"], [437, 2, 1, "", "fit"], [437, 2, 1, "", "get_indices"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "get_shape"], [437, 2, 1, "", "get_submatrix"], [437, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[438, 2, 1, "", "fit"], [438, 2, 1, "", "fit_predict"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[439, 3, 1, "", "biclusters_"], [439, 2, 1, "", "fit"], [439, 2, 1, "", "get_indices"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "get_shape"], [439, 2, 1, "", "get_submatrix"], [439, 2, 1, "", "set_params"]], "sklearn.compose": [[450, 1, 1, "", "ColumnTransformer"], [451, 1, 1, "", "TransformedTargetRegressor"], [452, 4, 1, "", "make_column_selector"], [453, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_transform"], [450, 2, 1, "", "get_feature_names_out"], [450, 2, 1, "", "get_params"], [450, 3, 1, "", "named_transformers_"], [450, 2, 1, "", "set_output"], [450, 2, 1, "", "set_params"], [450, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[451, 2, 1, "", "fit"], [451, 2, 1, "", "get_params"], [451, 3, 1, "", "n_features_in_"], [451, 2, 1, "", "predict"], [451, 2, 1, "", "score"], [451, 2, 1, "", "set_params"]], "sklearn.covariance": [[455, 1, 1, "", "EllipticEnvelope"], [456, 1, 1, "", "EmpiricalCovariance"], [457, 1, 1, "", "GraphicalLasso"], [458, 1, 1, "", "GraphicalLassoCV"], [459, 1, 1, "", "LedoitWolf"], [460, 1, 1, "", "MinCovDet"], [461, 1, 1, "", "OAS"], [462, 1, 1, "", "ShrunkCovariance"], [463, 4, 1, "", "empirical_covariance"], [464, 4, 1, "", "graphical_lasso"], [465, 4, 1, "", "ledoit_wolf"], [466, 4, 1, "", "ledoit_wolf_shrinkage"], [410, 4, 1, "", "oas"], [467, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[455, 2, 1, "", "correct_covariance"], [455, 2, 1, "", "decision_function"], [455, 2, 1, "", "error_norm"], [455, 2, 1, "", "fit"], [455, 2, 1, "", "fit_predict"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "get_precision"], [455, 2, 1, "", "mahalanobis"], [455, 2, 1, "", "predict"], [455, 2, 1, "", "reweight_covariance"], [455, 2, 1, "", "score"], [455, 2, 1, "", "score_samples"], [455, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[456, 2, 1, "", "error_norm"], [456, 2, 1, "", "fit"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "get_precision"], [456, 2, 1, "", "mahalanobis"], [456, 2, 1, "", "score"], [456, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[457, 2, 1, "", "error_norm"], [457, 2, 1, "", "fit"], [457, 2, 1, "", "get_params"], [457, 2, 1, "", "get_precision"], [457, 2, 1, "", "mahalanobis"], [457, 2, 1, "", "score"], [457, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[458, 2, 1, "", "error_norm"], [458, 2, 1, "", "fit"], [458, 2, 1, "", "get_params"], [458, 2, 1, "", "get_precision"], [458, 2, 1, "", "mahalanobis"], [458, 2, 1, "", "score"], [458, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[459, 2, 1, "", "error_norm"], [459, 2, 1, "", "fit"], [459, 2, 1, "", "get_params"], [459, 2, 1, "", "get_precision"], [459, 2, 1, "", "mahalanobis"], [459, 2, 1, "", "score"], [459, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[460, 2, 1, "", "correct_covariance"], [460, 2, 1, "", "error_norm"], [460, 2, 1, "", "fit"], [460, 2, 1, "", "get_params"], [460, 2, 1, "", "get_precision"], [460, 2, 1, "", "mahalanobis"], [460, 2, 1, "", "reweight_covariance"], [460, 2, 1, "", "score"], [460, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[461, 2, 1, "", "error_norm"], [461, 2, 1, "", "fit"], [461, 2, 1, "", "get_params"], [461, 2, 1, "", "get_precision"], [461, 2, 1, "", "mahalanobis"], [461, 2, 1, "", "score"], [461, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[462, 2, 1, "", "error_norm"], [462, 2, 1, "", "fit"], [462, 2, 1, "", "get_params"], [462, 2, 1, "", "get_precision"], [462, 2, 1, "", "mahalanobis"], [462, 2, 1, "", "score"], [462, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[468, 1, 1, "", "CCA"], [469, 1, 1, "", "PLSCanonical"], [470, 1, 1, "", "PLSRegression"], [471, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[468, 2, 1, "", "fit"], [468, 2, 1, "", "fit_transform"], [468, 2, 1, "", "get_feature_names_out"], [468, 2, 1, "", "get_params"], [468, 2, 1, "", "inverse_transform"], [468, 2, 1, "", "predict"], [468, 2, 1, "", "score"], [468, 2, 1, "", "set_output"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[469, 2, 1, "", "fit"], [469, 2, 1, "", "fit_transform"], [469, 2, 1, "", "get_feature_names_out"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "inverse_transform"], [469, 2, 1, "", "predict"], [469, 2, 1, "", "score"], [469, 2, 1, "", "set_output"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[470, 2, 1, "", "fit"], [470, 2, 1, "", "fit_transform"], [470, 2, 1, "", "get_feature_names_out"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "inverse_transform"], [470, 2, 1, "", "predict"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_output"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[471, 2, 1, "", "fit"], [471, 2, 1, "", "fit_transform"], [471, 2, 1, "", "get_feature_names_out"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "set_output"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "transform"]], "sklearn.datasets": [[472, 4, 1, "", "clear_data_home"], [473, 4, 1, "", "dump_svmlight_file"], [474, 4, 1, "", "fetch_20newsgroups"], [475, 4, 1, "", "fetch_20newsgroups_vectorized"], [476, 4, 1, "", "fetch_california_housing"], [477, 4, 1, "", "fetch_covtype"], [478, 4, 1, "", "fetch_kddcup99"], [479, 4, 1, "", "fetch_lfw_pairs"], [480, 4, 1, "", "fetch_lfw_people"], [481, 4, 1, "", "fetch_olivetti_faces"], [482, 4, 1, "", "fetch_openml"], [483, 4, 1, "", "fetch_rcv1"], [484, 4, 1, "", "fetch_species_distributions"], [485, 4, 1, "", "get_data_home"], [486, 4, 1, "", "load_breast_cancer"], [487, 4, 1, "", "load_diabetes"], [488, 4, 1, "", "load_digits"], [489, 4, 1, "", "load_files"], [490, 4, 1, "", "load_iris"], [491, 4, 1, "", "load_linnerud"], [492, 4, 1, "", "load_sample_image"], [493, 4, 1, "", "load_sample_images"], [494, 4, 1, "", "load_svmlight_file"], [495, 4, 1, "", "load_svmlight_files"], [496, 4, 1, "", "load_wine"], [497, 4, 1, "", "make_biclusters"], [498, 4, 1, "", "make_blobs"], [499, 4, 1, "", "make_checkerboard"], [500, 4, 1, "", "make_circles"], [501, 4, 1, "", "make_classification"], [502, 4, 1, "", "make_friedman1"], [503, 4, 1, "", "make_friedman2"], [504, 4, 1, "", "make_friedman3"], [505, 4, 1, "", "make_gaussian_quantiles"], [506, 4, 1, "", "make_hastie_10_2"], [507, 4, 1, "", "make_low_rank_matrix"], [508, 4, 1, "", "make_moons"], [509, 4, 1, "", "make_multilabel_classification"], [510, 4, 1, "", "make_regression"], [511, 4, 1, "", "make_s_curve"], [512, 4, 1, "", "make_sparse_coded_signal"], [513, 4, 1, "", "make_sparse_spd_matrix"], [514, 4, 1, "", "make_sparse_uncorrelated"], [515, 4, 1, "", "make_spd_matrix"], [516, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[517, 1, 1, "", "DictionaryLearning"], [518, 1, 1, "", "FactorAnalysis"], [519, 1, 1, "", "FastICA"], [520, 1, 1, "", "IncrementalPCA"], [521, 1, 1, "", "KernelPCA"], [522, 1, 1, "", "LatentDirichletAllocation"], [523, 1, 1, "", "MiniBatchDictionaryLearning"], [524, 1, 1, "", "MiniBatchNMF"], [525, 1, 1, "", "MiniBatchSparsePCA"], [526, 1, 1, "", "NMF"], [527, 1, 1, "", "PCA"], [528, 1, 1, "", "SparseCoder"], [529, 1, 1, "", "SparsePCA"], [530, 1, 1, "", "TruncatedSVD"], [531, 4, 1, "", "dict_learning"], [532, 4, 1, "", "dict_learning_online"], [409, 4, 1, "", "fastica"], [533, 4, 1, "", "non_negative_factorization"], [534, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[517, 2, 1, "", "fit"], [517, 2, 1, "", "fit_transform"], [517, 2, 1, "", "get_feature_names_out"], [517, 2, 1, "", "get_params"], [517, 2, 1, "", "set_output"], [517, 2, 1, "", "set_params"], [517, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[518, 2, 1, "", "fit"], [518, 2, 1, "", "fit_transform"], [518, 2, 1, "", "get_covariance"], [518, 2, 1, "", "get_feature_names_out"], [518, 2, 1, "", "get_params"], [518, 2, 1, "", "get_precision"], [518, 2, 1, "", "score"], [518, 2, 1, "", "score_samples"], [518, 2, 1, "", "set_output"], [518, 2, 1, "", "set_params"], [518, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[519, 2, 1, "", "fit"], [519, 2, 1, "", "fit_transform"], [519, 2, 1, "", "get_feature_names_out"], [519, 2, 1, "", "get_params"], [519, 2, 1, "", "inverse_transform"], [519, 2, 1, "", "set_output"], [519, 2, 1, "", "set_params"], [519, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[520, 2, 1, "", "fit"], [520, 2, 1, "", "fit_transform"], [520, 2, 1, "", "get_covariance"], [520, 2, 1, "", "get_feature_names_out"], [520, 2, 1, "", "get_params"], [520, 2, 1, "", "get_precision"], [520, 2, 1, "", "inverse_transform"], [520, 2, 1, "", "partial_fit"], [520, 2, 1, "", "set_output"], [520, 2, 1, "", "set_params"], [520, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[521, 2, 1, "", "fit"], [521, 2, 1, "", "fit_transform"], [521, 2, 1, "", "get_feature_names_out"], [521, 2, 1, "", "get_params"], [521, 2, 1, "", "inverse_transform"], [521, 2, 1, "", "set_output"], [521, 2, 1, "", "set_params"], [521, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[522, 2, 1, "", "fit"], [522, 2, 1, "", "fit_transform"], [522, 2, 1, "", "get_feature_names_out"], [522, 2, 1, "", "get_params"], [522, 2, 1, "", "partial_fit"], [522, 2, 1, "", "perplexity"], [522, 2, 1, "", "score"], [522, 2, 1, "", "set_output"], [522, 2, 1, "", "set_params"], [522, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[523, 2, 1, "", "fit"], [523, 2, 1, "", "fit_transform"], [523, 2, 1, "", "get_feature_names_out"], [523, 2, 1, "", "get_params"], [523, 2, 1, "", "partial_fit"], [523, 2, 1, "", "set_output"], [523, 2, 1, "", "set_params"], [523, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[524, 2, 1, "", "fit"], [524, 2, 1, "", "fit_transform"], [524, 2, 1, "", "get_feature_names_out"], [524, 2, 1, "", "get_params"], [524, 2, 1, "", "inverse_transform"], [524, 2, 1, "", "partial_fit"], [524, 2, 1, "", "set_output"], [524, 2, 1, "", "set_params"], [524, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[525, 2, 1, "", "fit"], [525, 2, 1, "", "fit_transform"], [525, 2, 1, "", "get_feature_names_out"], [525, 2, 1, "", "get_params"], [525, 2, 1, "", "inverse_transform"], [525, 2, 1, "", "set_output"], [525, 2, 1, "", "set_params"], [525, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[526, 2, 1, "", "fit"], [526, 2, 1, "", "fit_transform"], [526, 2, 1, "", "get_feature_names_out"], [526, 2, 1, "", "get_params"], [526, 2, 1, "", "inverse_transform"], [526, 2, 1, "", "set_output"], [526, 2, 1, "", "set_params"], [526, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[527, 2, 1, "", "fit"], [527, 2, 1, "", "fit_transform"], [527, 2, 1, "", "get_covariance"], [527, 2, 1, "", "get_feature_names_out"], [527, 2, 1, "", "get_params"], [527, 2, 1, "", "get_precision"], [527, 2, 1, "", "inverse_transform"], [527, 2, 1, "", "score"], [527, 2, 1, "", "score_samples"], [527, 2, 1, "", "set_output"], [527, 2, 1, "", "set_params"], [527, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[528, 2, 1, "", "fit"], [528, 2, 1, "", "fit_transform"], [528, 2, 1, "", "get_feature_names_out"], [528, 2, 1, "", "get_params"], [528, 3, 1, "", "n_components_"], [528, 3, 1, "", "n_features_in_"], [528, 2, 1, "", "set_output"], [528, 2, 1, "", "set_params"], [528, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "fit_transform"], [529, 2, 1, "", "get_feature_names_out"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "inverse_transform"], [529, 2, 1, "", "set_output"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "inverse_transform"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[535, 1, 1, "", "LinearDiscriminantAnalysis"], [536, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[535, 2, 1, "", "decision_function"], [535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "predict"], [535, 2, 1, "", "predict_log_proba"], [535, 2, 1, "", "predict_proba"], [535, 2, 1, "", "score"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[536, 2, 1, "", "decision_function"], [536, 2, 1, "", "fit"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "predict"], [536, 2, 1, "", "predict_log_proba"], [536, 2, 1, "", "predict_proba"], [536, 2, 1, "", "score"], [536, 2, 1, "", "set_params"]], "sklearn.dummy": [[537, 1, 1, "", "DummyClassifier"], [538, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "predict"], [537, 2, 1, "", "predict_log_proba"], [537, 2, 1, "", "predict_proba"], [537, 2, 1, "", "score"], [537, 2, 1, "", "set_params"]], "sklearn.dummy.DummyRegressor": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "predict"], [538, 2, 1, "", "score"], [538, 2, 1, "", "set_params"]], "sklearn.ensemble": [[539, 1, 1, "", "AdaBoostClassifier"], [540, 1, 1, "", "AdaBoostRegressor"], [541, 1, 1, "", "BaggingClassifier"], [542, 1, 1, "", "BaggingRegressor"], [543, 1, 1, "", "ExtraTreesClassifier"], [544, 1, 1, "", "ExtraTreesRegressor"], [545, 1, 1, "", "GradientBoostingClassifier"], [546, 1, 1, "", "GradientBoostingRegressor"], [547, 1, 1, "", "HistGradientBoostingClassifier"], [548, 1, 1, "", "HistGradientBoostingRegressor"], [549, 1, 1, "", "IsolationForest"], [550, 1, 1, "", "RandomForestClassifier"], [551, 1, 1, "", "RandomForestRegressor"], [552, 1, 1, "", "RandomTreesEmbedding"], [553, 1, 1, "", "StackingClassifier"], [554, 1, 1, "", "StackingRegressor"], [555, 1, 1, "", "VotingClassifier"], [556, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[539, 3, 1, "", "base_estimator_"], [539, 2, 1, "", "decision_function"], [539, 3, 1, "", "feature_importances_"], [539, 2, 1, "", "fit"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "predict"], [539, 2, 1, "", "predict_log_proba"], [539, 2, 1, "", "predict_proba"], [539, 2, 1, "", "score"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "staged_decision_function"], [539, 2, 1, "", "staged_predict"], [539, 2, 1, "", "staged_predict_proba"], [539, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[540, 3, 1, "", "base_estimator_"], [540, 3, 1, "", "feature_importances_"], [540, 2, 1, "", "fit"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "predict"], [540, 2, 1, "", "score"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "staged_predict"], [540, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[541, 3, 1, "", "base_estimator_"], [541, 2, 1, "", "decision_function"], [541, 3, 1, "", "estimators_samples_"], [541, 2, 1, "", "fit"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "predict"], [541, 2, 1, "", "predict_log_proba"], [541, 2, 1, "", "predict_proba"], [541, 2, 1, "", "score"], [541, 2, 1, "", "set_params"]], "sklearn.ensemble.BaggingRegressor": [[542, 3, 1, "", "base_estimator_"], [542, 3, 1, "", "estimators_samples_"], [542, 2, 1, "", "fit"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "predict"], [542, 2, 1, "", "score"], [542, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesClassifier": [[543, 2, 1, "", "apply"], [543, 3, 1, "", "base_estimator_"], [543, 2, 1, "", "decision_path"], [543, 3, 1, "", "feature_importances_"], [543, 2, 1, "", "fit"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "predict"], [543, 2, 1, "", "predict_log_proba"], [543, 2, 1, "", "predict_proba"], [543, 2, 1, "", "score"], [543, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesRegressor": [[544, 2, 1, "", "apply"], [544, 3, 1, "", "base_estimator_"], [544, 2, 1, "", "decision_path"], [544, 3, 1, "", "feature_importances_"], [544, 2, 1, "", "fit"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_params"]], "sklearn.ensemble.GradientBoostingClassifier": [[545, 2, 1, "", "apply"], [545, 3, 1, "", "base_estimator_"], [545, 2, 1, "", "decision_function"], [545, 3, 1, "", "feature_importances_"], [545, 2, 1, "", "fit"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "predict_log_proba"], [545, 2, 1, "", "predict_proba"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "staged_decision_function"], [545, 2, 1, "", "staged_predict"], [545, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[546, 2, 1, "", "apply"], [546, 3, 1, "", "base_estimator_"], [546, 3, 1, "", "feature_importances_"], [546, 2, 1, "", "fit"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "predict"], [546, 2, 1, "", "score"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[547, 2, 1, "", "decision_function"], [547, 2, 1, "", "fit"], [547, 2, 1, "", "get_params"], [547, 3, 1, "", "n_iter_"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "predict_proba"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "staged_decision_function"], [547, 2, 1, "", "staged_predict"], [547, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "get_params"], [548, 3, 1, "", "n_iter_"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[549, 3, 1, "", "base_estimator_"], [549, 2, 1, "", "decision_function"], [549, 3, 1, "", "estimators_samples_"], [549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_predict"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "score_samples"], [549, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[550, 2, 1, "", "apply"], [550, 3, 1, "", "base_estimator_"], [550, 2, 1, "", "decision_path"], [550, 3, 1, "", "feature_importances_"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_log_proba"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestRegressor": [[551, 2, 1, "", "apply"], [551, 3, 1, "", "base_estimator_"], [551, 2, 1, "", "decision_path"], [551, 3, 1, "", "feature_importances_"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomTreesEmbedding": [[552, 2, 1, "", "apply"], [552, 3, 1, "", "base_estimator_"], [552, 2, 1, "", "decision_path"], [552, 3, 1, "", "feature_importances_"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "fit_transform"], [552, 2, 1, "", "get_feature_names_out"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "set_output"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[553, 2, 1, "", "decision_function"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "fit_transform"], [553, 2, 1, "", "get_feature_names_out"], [553, 2, 1, "", "get_params"], [553, 3, 1, "", "n_features_in_"], [553, 3, 1, "", "named_estimators"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_output"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[554, 2, 1, "", "fit"], [554, 2, 1, "", "fit_transform"], [554, 2, 1, "", "get_feature_names_out"], [554, 2, 1, "", "get_params"], [554, 3, 1, "", "n_features_in_"], [554, 3, 1, "", "named_estimators"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_output"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[555, 2, 1, "", "fit"], [555, 2, 1, "", "fit_transform"], [555, 2, 1, "", "get_feature_names_out"], [555, 2, 1, "", "get_params"], [555, 3, 1, "", "n_features_in_"], [555, 3, 1, "", "named_estimators"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_output"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[556, 2, 1, "", "fit"], [556, 2, 1, "", "fit_transform"], [556, 2, 1, "", "get_feature_names_out"], [556, 2, 1, "", "get_params"], [556, 3, 1, "", "n_features_in_"], [556, 3, 1, "", "named_estimators"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_output"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "transform"]], "sklearn.exceptions": [[557, 1, 1, "", "ConvergenceWarning"], [558, 1, 1, "", "DataConversionWarning"], [559, 1, 1, "", "DataDimensionalityWarning"], [560, 1, 1, "", "EfficiencyWarning"], [561, 1, 1, "", "FitFailedWarning"], [562, 1, 1, "", "InconsistentVersionWarning"], [563, 1, 1, "", "NotFittedError"], [564, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[557, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[558, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[559, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[560, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[561, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[562, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[563, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[564, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[565, 0, 0, "-", "enable_halving_search_cv"], [566, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[567, 1, 1, "", "DictVectorizer"], [568, 1, 1, "", "FeatureHasher"], [396, 0, 0, "-", "image"], [396, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "inverse_transform"], [567, 2, 1, "", "restrict"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_params"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[569, 1, 1, "", "PatchExtractor"], [570, 4, 1, "", "extract_patches_2d"], [571, 4, 1, "", "grid_to_graph"], [572, 4, 1, "", "img_to_graph"], [573, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_params"], [569, 2, 1, "", "set_output"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[574, 1, 1, "", "CountVectorizer"], [575, 1, 1, "", "HashingVectorizer"], [576, 1, 1, "", "TfidfTransformer"], [577, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[574, 2, 1, "", "build_analyzer"], [574, 2, 1, "", "build_preprocessor"], [574, 2, 1, "", "build_tokenizer"], [574, 2, 1, "", "decode"], [574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_params"], [574, 2, 1, "", "get_stop_words"], [574, 2, 1, "", "inverse_transform"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[575, 2, 1, "", "build_analyzer"], [575, 2, 1, "", "build_preprocessor"], [575, 2, 1, "", "build_tokenizer"], [575, 2, 1, "", "decode"], [575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_params"], [575, 2, 1, "", "get_stop_words"], [575, 2, 1, "", "partial_fit"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_feature_names_out"], [576, 2, 1, "", "get_params"], [576, 3, 1, "", "idf_"], [576, 2, 1, "", "set_output"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[577, 2, 1, "", "build_analyzer"], [577, 2, 1, "", "build_preprocessor"], [577, 2, 1, "", "build_tokenizer"], [577, 2, 1, "", "decode"], [577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_params"], [577, 2, 1, "", "get_stop_words"], [577, 3, 1, "", "idf_"], [577, 2, 1, "", "inverse_transform"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "transform"]], "sklearn.feature_selection": [[578, 1, 1, "", "GenericUnivariateSelect"], [579, 1, 1, "", "RFE"], [580, 1, 1, "", "RFECV"], [581, 1, 1, "", "SelectFdr"], [582, 1, 1, "", "SelectFpr"], [583, 1, 1, "", "SelectFromModel"], [584, 1, 1, "", "SelectFwe"], [585, 1, 1, "", "SelectKBest"], [586, 1, 1, "", "SelectPercentile"], [587, 1, 1, "", "SelectorMixin"], [588, 1, 1, "", "SequentialFeatureSelector"], [589, 1, 1, "", "VarianceThreshold"], [590, 4, 1, "", "chi2"], [591, 4, 1, "", "f_classif"], [592, 4, 1, "", "f_regression"], [593, 4, 1, "", "mutual_info_classif"], [594, 4, 1, "", "mutual_info_regression"], [595, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_params"], [578, 2, 1, "", "get_support"], [578, 2, 1, "", "inverse_transform"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[579, 3, 1, "", "classes_"], [579, 2, 1, "", "decision_function"], [579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "get_support"], [579, 2, 1, "", "inverse_transform"], [579, 2, 1, "", "predict"], [579, 2, 1, "", "predict_log_proba"], [579, 2, 1, "", "predict_proba"], [579, 2, 1, "", "score"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[580, 3, 1, "", "classes_"], [580, 2, 1, "", "decision_function"], [580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_feature_names_out"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "get_support"], [580, 2, 1, "", "inverse_transform"], [580, 2, 1, "", "predict"], [580, 2, 1, "", "predict_log_proba"], [580, 2, 1, "", "predict_proba"], [580, 2, 1, "", "score"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "get_support"], [581, 2, 1, "", "inverse_transform"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_feature_names_out"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "get_support"], [582, 2, 1, "", "inverse_transform"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_feature_names_out"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "get_support"], [583, 2, 1, "", "inverse_transform"], [583, 3, 1, "", "n_features_in_"], [583, 2, 1, "", "partial_fit"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 3, 1, "", "threshold_"], [583, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_feature_names_out"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "get_support"], [584, 2, 1, "", "inverse_transform"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_feature_names_out"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "get_support"], [585, 2, 1, "", "inverse_transform"], [585, 2, 1, "", "set_output"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "get_support"], [586, 2, 1, "", "inverse_transform"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_feature_names_out"], [587, 2, 1, "", "get_support"], [587, 2, 1, "", "inverse_transform"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_support"], [588, 2, 1, "", "inverse_transform"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_support"], [589, 2, 1, "", "inverse_transform"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[596, 1, 1, "", "GaussianProcessClassifier"], [597, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "get_params"], [596, 3, 1, "", "kernel_"], [596, 2, 1, "", "log_marginal_likelihood"], [596, 2, 1, "", "predict"], [596, 2, 1, "", "predict_proba"], [596, 2, 1, "", "score"], [596, 2, 1, "", "set_params"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "log_marginal_likelihood"], [597, 2, 1, "", "predict"], [597, 2, 1, "", "sample_y"], [597, 2, 1, "", "score"], [597, 2, 1, "", "set_params"]], "sklearn.gaussian_process.kernels": [[598, 1, 1, "", "CompoundKernel"], [599, 1, 1, "", "ConstantKernel"], [600, 1, 1, "", "DotProduct"], [601, 1, 1, "", "ExpSineSquared"], [602, 1, 1, "", "Exponentiation"], [603, 1, 1, "", "Hyperparameter"], [604, 1, 1, "", "Kernel"], [605, 1, 1, "", "Matern"], [606, 1, 1, "", "PairwiseKernel"], [607, 1, 1, "", "Product"], [608, 1, 1, "", "RBF"], [609, 1, 1, "", "RationalQuadratic"], [610, 1, 1, "", "Sum"], [611, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[598, 2, 1, "", "__call__"], [598, 3, 1, "", "bounds"], [598, 2, 1, "", "clone_with_theta"], [598, 2, 1, "", "diag"], [598, 2, 1, "", "get_params"], [598, 3, 1, "", "hyperparameters"], [598, 2, 1, "", "is_stationary"], [598, 3, 1, "", "n_dims"], [598, 3, 1, "", "requires_vector_input"], [598, 2, 1, "", "set_params"], [598, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[599, 2, 1, "", "__call__"], [599, 3, 1, "", "bounds"], [599, 2, 1, "", "clone_with_theta"], [599, 2, 1, "", "diag"], [599, 2, 1, "", "get_params"], [599, 3, 1, "", "hyperparameters"], [599, 2, 1, "", "is_stationary"], [599, 3, 1, "", "n_dims"], [599, 3, 1, "", "requires_vector_input"], [599, 2, 1, "", "set_params"], [599, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[600, 2, 1, "", "__call__"], [600, 3, 1, "", "bounds"], [600, 2, 1, "", "clone_with_theta"], [600, 2, 1, "", "diag"], [600, 2, 1, "", "get_params"], [600, 3, 1, "", "hyperparameters"], [600, 2, 1, "", "is_stationary"], [600, 3, 1, "", "n_dims"], [600, 3, 1, "", "requires_vector_input"], [600, 2, 1, "", "set_params"], [600, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[601, 2, 1, "", "__call__"], [601, 3, 1, "", "bounds"], [601, 2, 1, "", "clone_with_theta"], [601, 2, 1, "", "diag"], [601, 2, 1, "", "get_params"], [601, 3, 1, "", "hyperparameter_length_scale"], [601, 3, 1, "", "hyperparameters"], [601, 2, 1, "", "is_stationary"], [601, 3, 1, "", "n_dims"], [601, 3, 1, "", "requires_vector_input"], [601, 2, 1, "", "set_params"], [601, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[602, 2, 1, "", "__call__"], [602, 3, 1, "", "bounds"], [602, 2, 1, "", "clone_with_theta"], [602, 2, 1, "", "diag"], [602, 2, 1, "", "get_params"], [602, 3, 1, "", "hyperparameters"], [602, 2, 1, "", "is_stationary"], [602, 3, 1, "", "n_dims"], [602, 3, 1, "", "requires_vector_input"], [602, 2, 1, "", "set_params"], [602, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[603, 2, 1, "", "__call__"], [603, 5, 1, "", "bounds"], [603, 2, 1, "", "count"], [603, 5, 1, "", "fixed"], [603, 2, 1, "", "index"], [603, 5, 1, "", "n_elements"], [603, 5, 1, "", "name"], [603, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[604, 2, 1, "", "__call__"], [604, 3, 1, "", "bounds"], [604, 2, 1, "", "clone_with_theta"], [604, 2, 1, "", "diag"], [604, 2, 1, "", "get_params"], [604, 3, 1, "", "hyperparameters"], [604, 2, 1, "", "is_stationary"], [604, 3, 1, "", "n_dims"], [604, 3, 1, "", "requires_vector_input"], [604, 2, 1, "", "set_params"], [604, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[605, 2, 1, "", "__call__"], [605, 3, 1, "", "bounds"], [605, 2, 1, "", "clone_with_theta"], [605, 2, 1, "", "diag"], [605, 2, 1, "", "get_params"], [605, 3, 1, "", "hyperparameters"], [605, 2, 1, "", "is_stationary"], [605, 3, 1, "", "n_dims"], [605, 3, 1, "", "requires_vector_input"], [605, 2, 1, "", "set_params"], [605, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[606, 2, 1, "", "__call__"], [606, 3, 1, "", "bounds"], [606, 2, 1, "", "clone_with_theta"], [606, 2, 1, "", "diag"], [606, 2, 1, "", "get_params"], [606, 3, 1, "", "hyperparameters"], [606, 2, 1, "", "is_stationary"], [606, 3, 1, "", "n_dims"], [606, 3, 1, "", "requires_vector_input"], [606, 2, 1, "", "set_params"], [606, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[607, 2, 1, "", "__call__"], [607, 3, 1, "", "bounds"], [607, 2, 1, "", "clone_with_theta"], [607, 2, 1, "", "diag"], [607, 2, 1, "", "get_params"], [607, 3, 1, "", "hyperparameters"], [607, 2, 1, "", "is_stationary"], [607, 3, 1, "", "n_dims"], [607, 3, 1, "", "requires_vector_input"], [607, 2, 1, "", "set_params"], [607, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[608, 2, 1, "", "__call__"], [608, 3, 1, "", "bounds"], [608, 2, 1, "", "clone_with_theta"], [608, 2, 1, "", "diag"], [608, 2, 1, "", "get_params"], [608, 3, 1, "", "hyperparameters"], [608, 2, 1, "", "is_stationary"], [608, 3, 1, "", "n_dims"], [608, 3, 1, "", "requires_vector_input"], [608, 2, 1, "", "set_params"], [608, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[609, 2, 1, "", "__call__"], [609, 3, 1, "", "bounds"], [609, 2, 1, "", "clone_with_theta"], [609, 2, 1, "", "diag"], [609, 2, 1, "", "get_params"], [609, 3, 1, "", "hyperparameters"], [609, 2, 1, "", "is_stationary"], [609, 3, 1, "", "n_dims"], [609, 3, 1, "", "requires_vector_input"], [609, 2, 1, "", "set_params"], [609, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[610, 2, 1, "", "__call__"], [610, 3, 1, "", "bounds"], [610, 2, 1, "", "clone_with_theta"], [610, 2, 1, "", "diag"], [610, 2, 1, "", "get_params"], [610, 3, 1, "", "hyperparameters"], [610, 2, 1, "", "is_stationary"], [610, 3, 1, "", "n_dims"], [610, 3, 1, "", "requires_vector_input"], [610, 2, 1, "", "set_params"], [610, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[611, 2, 1, "", "__call__"], [611, 3, 1, "", "bounds"], [611, 2, 1, "", "clone_with_theta"], [611, 2, 1, "", "diag"], [611, 2, 1, "", "get_params"], [611, 3, 1, "", "hyperparameters"], [611, 2, 1, "", "is_stationary"], [611, 3, 1, "", "n_dims"], [611, 3, 1, "", "requires_vector_input"], [611, 2, 1, "", "set_params"], [611, 3, 1, "", "theta"]], "sklearn.impute": [[613, 1, 1, "", "IterativeImputer"], [614, 1, 1, "", "KNNImputer"], [615, 1, 1, "", "MissingIndicator"], [616, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[613, 2, 1, "", "fit"], [613, 2, 1, "", "fit_transform"], [613, 2, 1, "", "get_feature_names_out"], [613, 2, 1, "", "get_params"], [613, 2, 1, "", "set_output"], [613, 2, 1, "", "set_params"], [613, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[614, 2, 1, "", "fit"], [614, 2, 1, "", "fit_transform"], [614, 2, 1, "", "get_feature_names_out"], [614, 2, 1, "", "get_params"], [614, 2, 1, "", "set_output"], [614, 2, 1, "", "set_params"], [614, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[615, 2, 1, "", "fit"], [615, 2, 1, "", "fit_transform"], [615, 2, 1, "", "get_feature_names_out"], [615, 2, 1, "", "get_params"], [615, 2, 1, "", "set_output"], [615, 2, 1, "", "set_params"], [615, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "fit_transform"], [616, 2, 1, "", "get_feature_names_out"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "inverse_transform"], [616, 2, 1, "", "set_output"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "transform"]], "sklearn.inspection": [[617, 1, 1, "", "DecisionBoundaryDisplay"], [618, 1, 1, "", "PartialDependenceDisplay"], [619, 4, 1, "", "partial_dependence"], [620, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[617, 2, 1, "", "from_estimator"], [617, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[618, 2, 1, "", "from_estimator"], [618, 2, 1, "", "plot"]], "sklearn.isotonic": [[621, 1, 1, "", "IsotonicRegression"], [622, 4, 1, "", "check_increasing"], [623, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "fit_transform"], [621, 2, 1, "", "get_feature_names_out"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "predict"], [621, 2, 1, "", "score"], [621, 2, 1, "", "set_output"], [621, 2, 1, "", "set_params"], [621, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[624, 1, 1, "", "AdditiveChi2Sampler"], [625, 1, 1, "", "Nystroem"], [626, 1, 1, "", "PolynomialCountSketch"], [627, 1, 1, "", "RBFSampler"], [628, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "fit_transform"], [624, 2, 1, "", "get_feature_names_out"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "set_output"], [624, 2, 1, "", "set_params"], [624, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "fit_transform"], [625, 2, 1, "", "get_feature_names_out"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "set_output"], [625, 2, 1, "", "set_params"], [625, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "fit_transform"], [626, 2, 1, "", "get_feature_names_out"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "set_output"], [626, 2, 1, "", "set_params"], [626, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "fit_transform"], [627, 2, 1, "", "get_feature_names_out"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "set_output"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_transform"], [628, 2, 1, "", "get_feature_names_out"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "set_output"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[629, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_params"]], "sklearn.linear_model": [[630, 1, 1, "", "ARDRegression"], [631, 1, 1, "", "BayesianRidge"], [632, 1, 1, "", "ElasticNet"], [633, 1, 1, "", "ElasticNetCV"], [634, 1, 1, "", "GammaRegressor"], [635, 1, 1, "", "HuberRegressor"], [636, 1, 1, "", "Lars"], [637, 1, 1, "", "LarsCV"], [638, 1, 1, "", "Lasso"], [639, 1, 1, "", "LassoCV"], [640, 1, 1, "", "LassoLars"], [641, 1, 1, "", "LassoLarsCV"], [642, 1, 1, "", "LassoLarsIC"], [643, 1, 1, "", "LinearRegression"], [644, 1, 1, "", "LogisticRegression"], [645, 1, 1, "", "LogisticRegressionCV"], [646, 1, 1, "", "MultiTaskElasticNet"], [647, 1, 1, "", "MultiTaskElasticNetCV"], [648, 1, 1, "", "MultiTaskLasso"], [649, 1, 1, "", "MultiTaskLassoCV"], [650, 1, 1, "", "OrthogonalMatchingPursuit"], [651, 1, 1, "", "OrthogonalMatchingPursuitCV"], [652, 1, 1, "", "PassiveAggressiveClassifier"], [653, 4, 1, "", "PassiveAggressiveRegressor"], [654, 1, 1, "", "Perceptron"], [655, 1, 1, "", "PoissonRegressor"], [656, 1, 1, "", "QuantileRegressor"], [657, 1, 1, "", "RANSACRegressor"], [658, 1, 1, "", "Ridge"], [659, 1, 1, "", "RidgeCV"], [660, 1, 1, "", "RidgeClassifier"], [661, 1, 1, "", "RidgeClassifierCV"], [662, 1, 1, "", "SGDClassifier"], [663, 1, 1, "", "SGDOneClassSVM"], [664, 1, 1, "", "SGDRegressor"], [665, 1, 1, "", "TheilSenRegressor"], [666, 1, 1, "", "TweedieRegressor"], [667, 4, 1, "", "enet_path"], [668, 4, 1, "", "lars_path"], [669, 4, 1, "", "lars_path_gram"], [670, 4, 1, "", "lasso_path"], [671, 4, 1, "", "orthogonal_mp"], [672, 4, 1, "", "orthogonal_mp_gram"], [673, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "predict"], [630, 2, 1, "", "score"], [630, 2, 1, "", "set_params"]], "sklearn.linear_model.BayesianRidge": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "predict"], [631, 2, 1, "", "score"], [631, 2, 1, "", "set_params"]], "sklearn.linear_model.ElasticNet": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "path"], [632, 2, 1, "", "predict"], [632, 2, 1, "", "score"], [632, 2, 1, "", "set_params"], [632, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "path"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_params"]], "sklearn.linear_model.GammaRegressor": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_params"]], "sklearn.linear_model.HuberRegressor": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_params"]], "sklearn.linear_model.Lars": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_params"]], "sklearn.linear_model.LarsCV": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_params"]], "sklearn.linear_model.Lasso": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "path"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_params"], [638, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "path"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLars": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsCV": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsIC": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_params"]], "sklearn.linear_model.LinearRegression": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_params"]], "sklearn.linear_model.LogisticRegression": [[644, 2, 1, "", "decision_function"], [644, 2, 1, "", "densify"], [644, 2, 1, "", "fit"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "predict_log_proba"], [644, 2, 1, "", "predict_proba"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[645, 2, 1, "", "decision_function"], [645, 2, 1, "", "densify"], [645, 2, 1, "", "fit"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "predict_log_proba"], [645, 2, 1, "", "predict_proba"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "path"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_params"], [646, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "path"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_params"]], "sklearn.linear_model.MultiTaskLasso": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "path"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_params"], [648, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "path"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_params"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[652, 2, 1, "", "decision_function"], [652, 2, 1, "", "densify"], [652, 2, 1, "", "fit"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "partial_fit"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[654, 2, 1, "", "decision_function"], [654, 2, 1, "", "densify"], [654, 2, 1, "", "fit"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "partial_fit"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_params"]], "sklearn.linear_model.QuantileRegressor": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_params"]], "sklearn.linear_model.RANSACRegressor": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeCV": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifier": [[660, 3, 1, "", "classes_"], [660, 2, 1, "", "decision_function"], [660, 2, 1, "", "fit"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifierCV": [[661, 3, 1, "", "classes_"], [661, 2, 1, "", "decision_function"], [661, 2, 1, "", "fit"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_params"]], "sklearn.linear_model.SGDClassifier": [[662, 2, 1, "", "decision_function"], [662, 2, 1, "", "densify"], [662, 2, 1, "", "fit"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "partial_fit"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "predict_log_proba"], [662, 2, 1, "", "predict_proba"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[663, 2, 1, "", "decision_function"], [663, 2, 1, "", "densify"], [663, 2, 1, "", "fit"], [663, 2, 1, "", "fit_predict"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "partial_fit"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score_samples"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[664, 2, 1, "", "densify"], [664, 2, 1, "", "fit"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "partial_fit"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_params"]], "sklearn.linear_model.TweedieRegressor": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_params"]], "sklearn.manifold": [[674, 1, 1, "", "Isomap"], [675, 1, 1, "", "LocallyLinearEmbedding"], [676, 1, 1, "", "MDS"], [677, 1, 1, "", "SpectralEmbedding"], [678, 1, 1, "", "TSNE"], [679, 4, 1, "", "locally_linear_embedding"], [680, 4, 1, "", "smacof"], [681, 4, 1, "", "spectral_embedding"], [682, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "fit_transform"], [674, 2, 1, "", "get_feature_names_out"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "reconstruction_error"], [674, 2, 1, "", "set_output"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[675, 2, 1, "", "fit"], [675, 2, 1, "", "fit_transform"], [675, 2, 1, "", "get_feature_names_out"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "set_output"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[676, 2, 1, "", "fit"], [676, 2, 1, "", "fit_transform"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "fit_transform"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[678, 2, 1, "", "fit"], [678, 2, 1, "", "fit_transform"], [678, 2, 1, "", "get_feature_names_out"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "set_output"], [678, 2, 1, "", "set_params"]], "sklearn.metrics": [[683, 1, 1, "", "ConfusionMatrixDisplay"], [684, 1, 1, "", "DetCurveDisplay"], [685, 1, 1, "", "DistanceMetric"], [686, 1, 1, "", "PrecisionRecallDisplay"], [687, 1, 1, "", "PredictionErrorDisplay"], [688, 1, 1, "", "RocCurveDisplay"], [689, 4, 1, "", "accuracy_score"], [690, 4, 1, "", "adjusted_mutual_info_score"], [691, 4, 1, "", "adjusted_rand_score"], [692, 4, 1, "", "auc"], [693, 4, 1, "", "average_precision_score"], [694, 4, 1, "", "balanced_accuracy_score"], [695, 4, 1, "", "brier_score_loss"], [696, 4, 1, "", "calinski_harabasz_score"], [697, 4, 1, "", "check_scoring"], [698, 4, 1, "", "class_likelihood_ratios"], [699, 4, 1, "", "classification_report"], [396, 0, 0, "-", "cluster"], [702, 4, 1, "", "cohen_kappa_score"], [703, 4, 1, "", "completeness_score"], [704, 4, 1, "", "confusion_matrix"], [705, 4, 1, "", "consensus_score"], [706, 4, 1, "", "coverage_error"], [707, 4, 1, "", "d2_absolute_error_score"], [708, 4, 1, "", "d2_pinball_score"], [709, 4, 1, "", "d2_tweedie_score"], [710, 4, 1, "", "davies_bouldin_score"], [711, 4, 1, "", "dcg_score"], [712, 4, 1, "", "det_curve"], [713, 4, 1, "", "explained_variance_score"], [714, 4, 1, "", "f1_score"], [715, 4, 1, "", "fbeta_score"], [716, 4, 1, "", "fowlkes_mallows_score"], [717, 4, 1, "", "get_scorer"], [718, 4, 1, "", "get_scorer_names"], [719, 4, 1, "", "hamming_loss"], [720, 4, 1, "", "hinge_loss"], [721, 4, 1, "", "homogeneity_completeness_v_measure"], [722, 4, 1, "", "homogeneity_score"], [723, 4, 1, "", "jaccard_score"], [724, 4, 1, "", "label_ranking_average_precision_score"], [725, 4, 1, "", "label_ranking_loss"], [726, 4, 1, "", "log_loss"], [727, 4, 1, "", "make_scorer"], [728, 4, 1, "", "matthews_corrcoef"], [729, 4, 1, "", "max_error"], [730, 4, 1, "", "mean_absolute_error"], [731, 4, 1, "", "mean_absolute_percentage_error"], [732, 4, 1, "", "mean_gamma_deviance"], [733, 4, 1, "", "mean_pinball_loss"], [734, 4, 1, "", "mean_poisson_deviance"], [735, 4, 1, "", "mean_squared_error"], [736, 4, 1, "", "mean_squared_log_error"], [737, 4, 1, "", "mean_tweedie_deviance"], [738, 4, 1, "", "median_absolute_error"], [739, 4, 1, "", "multilabel_confusion_matrix"], [740, 4, 1, "", "mutual_info_score"], [741, 4, 1, "", "ndcg_score"], [742, 4, 1, "", "normalized_mutual_info_score"], [396, 0, 0, "-", "pairwise"], [763, 4, 1, "", "pairwise_distances"], [764, 4, 1, "", "pairwise_distances_argmin"], [765, 4, 1, "", "pairwise_distances_argmin_min"], [766, 4, 1, "", "pairwise_distances_chunked"], [767, 4, 1, "", "precision_recall_curve"], [768, 4, 1, "", "precision_recall_fscore_support"], [769, 4, 1, "", "precision_score"], [770, 4, 1, "", "r2_score"], [771, 4, 1, "", "rand_score"], [772, 4, 1, "", "recall_score"], [773, 4, 1, "", "roc_auc_score"], [774, 4, 1, "", "roc_curve"], [775, 4, 1, "", "silhouette_samples"], [776, 4, 1, "", "silhouette_score"], [777, 4, 1, "", "top_k_accuracy_score"], [778, 4, 1, "", "v_measure_score"], [779, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[683, 2, 1, "", "from_estimator"], [683, 2, 1, "", "from_predictions"], [683, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[684, 2, 1, "", "from_estimator"], [684, 2, 1, "", "from_predictions"], [684, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[685, 2, 1, "", "dist_to_rdist"], [685, 2, 1, "", "get_metric"], [685, 2, 1, "", "pairwise"], [685, 2, 1, "", "rdist_to_dist"]], "sklearn.metrics.PrecisionRecallDisplay": [[686, 2, 1, "", "from_estimator"], [686, 2, 1, "", "from_predictions"], [686, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[687, 2, 1, "", "from_estimator"], [687, 2, 1, "", "from_predictions"], [687, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[688, 2, 1, "", "from_estimator"], [688, 2, 1, "", "from_predictions"], [688, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[700, 4, 1, "", "contingency_matrix"], [701, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[743, 4, 1, "", "additive_chi2_kernel"], [744, 4, 1, "", "chi2_kernel"], [745, 4, 1, "", "cosine_distances"], [746, 4, 1, "", "cosine_similarity"], [747, 4, 1, "", "distance_metrics"], [748, 4, 1, "", "euclidean_distances"], [749, 4, 1, "", "haversine_distances"], [750, 4, 1, "", "kernel_metrics"], [751, 4, 1, "", "laplacian_kernel"], [752, 4, 1, "", "linear_kernel"], [753, 4, 1, "", "manhattan_distances"], [754, 4, 1, "", "nan_euclidean_distances"], [755, 4, 1, "", "paired_cosine_distances"], [756, 4, 1, "", "paired_distances"], [757, 4, 1, "", "paired_euclidean_distances"], [758, 4, 1, "", "paired_manhattan_distances"], [759, 4, 1, "", "pairwise_kernels"], [760, 4, 1, "", "polynomial_kernel"], [761, 4, 1, "", "rbf_kernel"], [762, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[780, 1, 1, "", "BayesianGaussianMixture"], [781, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[780, 2, 1, "", "fit"], [780, 2, 1, "", "fit_predict"], [780, 2, 1, "", "get_params"], [780, 2, 1, "", "predict"], [780, 2, 1, "", "predict_proba"], [780, 2, 1, "", "sample"], [780, 2, 1, "", "score"], [780, 2, 1, "", "score_samples"], [780, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[781, 2, 1, "", "aic"], [781, 2, 1, "", "bic"], [781, 2, 1, "", "fit"], [781, 2, 1, "", "fit_predict"], [781, 2, 1, "", "get_params"], [781, 2, 1, "", "predict"], [781, 2, 1, "", "predict_proba"], [781, 2, 1, "", "sample"], [781, 2, 1, "", "score"], [781, 2, 1, "", "score_samples"], [781, 2, 1, "", "set_params"]], "sklearn.model_selection": [[782, 1, 1, "", "GridSearchCV"], [783, 1, 1, "", "GroupKFold"], [784, 1, 1, "", "GroupShuffleSplit"], [785, 1, 1, "", "HalvingGridSearchCV"], [786, 1, 1, "", "HalvingRandomSearchCV"], [787, 1, 1, "", "KFold"], [788, 1, 1, "", "LearningCurveDisplay"], [789, 1, 1, "", "LeaveOneGroupOut"], [790, 1, 1, "", "LeaveOneOut"], [791, 1, 1, "", "LeavePGroupsOut"], [792, 1, 1, "", "LeavePOut"], [793, 1, 1, "", "ParameterGrid"], [794, 1, 1, "", "ParameterSampler"], [795, 1, 1, "", "PredefinedSplit"], [796, 1, 1, "", "RandomizedSearchCV"], [797, 1, 1, "", "RepeatedKFold"], [798, 1, 1, "", "RepeatedStratifiedKFold"], [799, 1, 1, "", "ShuffleSplit"], [800, 1, 1, "", "StratifiedGroupKFold"], [801, 1, 1, "", "StratifiedKFold"], [802, 1, 1, "", "StratifiedShuffleSplit"], [803, 1, 1, "", "TimeSeriesSplit"], [804, 4, 1, "", "check_cv"], [805, 4, 1, "", "cross_val_predict"], [806, 4, 1, "", "cross_val_score"], [807, 4, 1, "", "cross_validate"], [808, 4, 1, "", "learning_curve"], [809, 4, 1, "", "permutation_test_score"], [810, 4, 1, "", "train_test_split"], [811, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[782, 3, 1, "", "classes_"], [782, 2, 1, "", "decision_function"], [782, 2, 1, "", "fit"], [782, 2, 1, "", "get_params"], [782, 2, 1, "", "inverse_transform"], [782, 3, 1, "", "n_features_in_"], [782, 2, 1, "", "predict"], [782, 2, 1, "", "predict_log_proba"], [782, 2, 1, "", "predict_proba"], [782, 2, 1, "", "score"], [782, 2, 1, "", "score_samples"], [782, 2, 1, "", "set_params"], [782, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[783, 2, 1, "", "get_n_splits"], [783, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[784, 2, 1, "", "get_n_splits"], [784, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[785, 3, 1, "", "classes_"], [785, 2, 1, "", "decision_function"], [785, 2, 1, "", "fit"], [785, 2, 1, "", "get_params"], [785, 2, 1, "", "inverse_transform"], [785, 3, 1, "", "n_features_in_"], [785, 2, 1, "", "predict"], [785, 2, 1, "", "predict_log_proba"], [785, 2, 1, "", "predict_proba"], [785, 2, 1, "", "score"], [785, 2, 1, "", "score_samples"], [785, 2, 1, "", "set_params"], [785, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[786, 3, 1, "", "classes_"], [786, 2, 1, "", "decision_function"], [786, 2, 1, "", "fit"], [786, 2, 1, "", "get_params"], [786, 2, 1, "", "inverse_transform"], [786, 3, 1, "", "n_features_in_"], [786, 2, 1, "", "predict"], [786, 2, 1, "", "predict_log_proba"], [786, 2, 1, "", "predict_proba"], [786, 2, 1, "", "score"], [786, 2, 1, "", "score_samples"], [786, 2, 1, "", "set_params"], [786, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[787, 2, 1, "", "get_n_splits"], [787, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[788, 2, 1, "", "from_estimator"], [788, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[789, 2, 1, "", "get_n_splits"], [789, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[790, 2, 1, "", "get_n_splits"], [790, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[791, 2, 1, "", "get_n_splits"], [791, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[792, 2, 1, "", "get_n_splits"], [792, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[795, 2, 1, "", "get_n_splits"], [795, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[796, 3, 1, "", "classes_"], [796, 2, 1, "", "decision_function"], [796, 2, 1, "", "fit"], [796, 2, 1, "", "get_params"], [796, 2, 1, "", "inverse_transform"], [796, 3, 1, "", "n_features_in_"], [796, 2, 1, "", "predict"], [796, 2, 1, "", "predict_log_proba"], [796, 2, 1, "", "predict_proba"], [796, 2, 1, "", "score"], [796, 2, 1, "", "score_samples"], [796, 2, 1, "", "set_params"], [796, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[797, 2, 1, "", "get_n_splits"], [797, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[798, 2, 1, "", "get_n_splits"], [798, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[799, 2, 1, "", "get_n_splits"], [799, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[800, 2, 1, "", "get_n_splits"], [800, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[801, 2, 1, "", "get_n_splits"], [801, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[803, 2, 1, "", "get_n_splits"], [803, 2, 1, "", "split"]], "sklearn.multiclass": [[812, 1, 1, "", "OneVsOneClassifier"], [813, 1, 1, "", "OneVsRestClassifier"], [814, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[812, 2, 1, "", "decision_function"], [812, 2, 1, "", "fit"], [812, 2, 1, "", "get_params"], [812, 3, 1, "", "n_classes_"], [812, 2, 1, "", "partial_fit"], [812, 2, 1, "", "predict"], [812, 2, 1, "", "score"], [812, 2, 1, "", "set_params"]], "sklearn.multiclass.OneVsRestClassifier": [[813, 2, 1, "", "decision_function"], [813, 2, 1, "", "fit"], [813, 2, 1, "", "get_params"], [813, 3, 1, "", "multilabel_"], [813, 3, 1, "", "n_classes_"], [813, 2, 1, "", "partial_fit"], [813, 2, 1, "", "predict"], [813, 2, 1, "", "predict_proba"], [813, 2, 1, "", "score"], [813, 2, 1, "", "set_params"]], "sklearn.multiclass.OutputCodeClassifier": [[814, 2, 1, "", "fit"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "predict"], [814, 2, 1, "", "score"], [814, 2, 1, "", "set_params"]], "sklearn.multioutput": [[815, 1, 1, "", "ClassifierChain"], [816, 1, 1, "", "MultiOutputClassifier"], [817, 1, 1, "", "MultiOutputRegressor"], [818, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[815, 2, 1, "", "decision_function"], [815, 2, 1, "", "fit"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "predict"], [815, 2, 1, "", "predict_proba"], [815, 2, 1, "", "score"], [815, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputClassifier": [[816, 2, 1, "", "fit"], [816, 2, 1, "", "get_params"], [816, 2, 1, "", "partial_fit"], [816, 2, 1, "", "predict"], [816, 2, 1, "", "predict_proba"], [816, 2, 1, "", "score"], [816, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputRegressor": [[817, 2, 1, "", "fit"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "partial_fit"], [817, 2, 1, "", "predict"], [817, 2, 1, "", "score"], [817, 2, 1, "", "set_params"]], "sklearn.multioutput.RegressorChain": [[818, 2, 1, "", "fit"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "predict"], [818, 2, 1, "", "score"], [818, 2, 1, "", "set_params"]], "sklearn.naive_bayes": [[819, 1, 1, "", "BernoulliNB"], [820, 1, 1, "", "CategoricalNB"], [821, 1, 1, "", "ComplementNB"], [822, 1, 1, "", "GaussianNB"], [823, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[819, 2, 1, "", "fit"], [819, 2, 1, "", "get_params"], [819, 2, 1, "", "partial_fit"], [819, 2, 1, "", "predict"], [819, 2, 1, "", "predict_joint_log_proba"], [819, 2, 1, "", "predict_log_proba"], [819, 2, 1, "", "predict_proba"], [819, 2, 1, "", "score"], [819, 2, 1, "", "set_params"]], "sklearn.naive_bayes.CategoricalNB": [[820, 2, 1, "", "fit"], [820, 2, 1, "", "get_params"], [820, 2, 1, "", "partial_fit"], [820, 2, 1, "", "predict"], [820, 2, 1, "", "predict_joint_log_proba"], [820, 2, 1, "", "predict_log_proba"], [820, 2, 1, "", "predict_proba"], [820, 2, 1, "", "score"], [820, 2, 1, "", "set_params"]], "sklearn.naive_bayes.ComplementNB": [[821, 2, 1, "", "fit"], [821, 2, 1, "", "get_params"], [821, 2, 1, "", "partial_fit"], [821, 2, 1, "", "predict"], [821, 2, 1, "", "predict_joint_log_proba"], [821, 2, 1, "", "predict_log_proba"], [821, 2, 1, "", "predict_proba"], [821, 2, 1, "", "score"], [821, 2, 1, "", "set_params"]], "sklearn.naive_bayes.GaussianNB": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "partial_fit"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "predict_joint_log_proba"], [822, 2, 1, "", "predict_log_proba"], [822, 2, 1, "", "predict_proba"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_params"]], "sklearn.naive_bayes.MultinomialNB": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "partial_fit"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "predict_joint_log_proba"], [823, 2, 1, "", "predict_log_proba"], [823, 2, 1, "", "predict_proba"], [823, 2, 1, "", "score"], [823, 2, 1, "", "set_params"]], "sklearn.neighbors": [[824, 1, 1, "", "BallTree"], [825, 1, 1, "", "KDTree"], [826, 1, 1, "", "KNeighborsClassifier"], [827, 1, 1, "", "KNeighborsRegressor"], [828, 1, 1, "", "KNeighborsTransformer"], [829, 1, 1, "", "KernelDensity"], [830, 1, 1, "", "LocalOutlierFactor"], [831, 1, 1, "", "NearestCentroid"], [832, 1, 1, "", "NearestNeighbors"], [833, 1, 1, "", "NeighborhoodComponentsAnalysis"], [834, 1, 1, "", "RadiusNeighborsClassifier"], [835, 1, 1, "", "RadiusNeighborsRegressor"], [836, 1, 1, "", "RadiusNeighborsTransformer"], [837, 4, 1, "", "kneighbors_graph"], [838, 4, 1, "", "radius_neighbors_graph"], [839, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[824, 2, 1, "", "get_arrays"], [824, 2, 1, "", "get_n_calls"], [824, 2, 1, "", "get_tree_stats"], [824, 2, 1, "", "kernel_density"], [824, 2, 1, "", "query"], [824, 2, 1, "", "query_radius"], [824, 2, 1, "", "reset_n_calls"], [824, 2, 1, "", "two_point_correlation"], [824, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KDTree": [[825, 2, 1, "", "get_arrays"], [825, 2, 1, "", "get_n_calls"], [825, 2, 1, "", "get_tree_stats"], [825, 2, 1, "", "kernel_density"], [825, 2, 1, "", "query"], [825, 2, 1, "", "query_radius"], [825, 2, 1, "", "reset_n_calls"], [825, 2, 1, "", "two_point_correlation"], [825, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KNeighborsClassifier": [[826, 2, 1, "", "fit"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "kneighbors"], [826, 2, 1, "", "kneighbors_graph"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "predict_proba"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsRegressor": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "kneighbors"], [827, 2, 1, "", "kneighbors_graph"], [827, 2, 1, "", "predict"], [827, 2, 1, "", "score"], [827, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsTransformer": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "fit_transform"], [828, 2, 1, "", "get_feature_names_out"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "kneighbors"], [828, 2, 1, "", "kneighbors_graph"], [828, 2, 1, "", "set_output"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "sample"], [829, 2, 1, "", "score"], [829, 2, 1, "", "score_samples"], [829, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[830, 2, 1, "", "decision_function"], [830, 2, 1, "", "fit"], [830, 2, 1, "", "fit_predict"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "kneighbors"], [830, 2, 1, "", "kneighbors_graph"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "score_samples"], [830, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestNeighbors": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "kneighbors"], [832, 2, 1, "", "kneighbors_graph"], [832, 2, 1, "", "radius_neighbors"], [832, 2, 1, "", "radius_neighbors_graph"], [832, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "fit_transform"], [833, 2, 1, "", "get_feature_names_out"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "set_output"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "predict_proba"], [834, 2, 1, "", "radius_neighbors"], [834, 2, 1, "", "radius_neighbors_graph"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "radius_neighbors"], [835, 2, 1, "", "radius_neighbors_graph"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "fit_transform"], [836, 2, 1, "", "get_feature_names_out"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "radius_neighbors"], [836, 2, 1, "", "radius_neighbors_graph"], [836, 2, 1, "", "set_output"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "transform"]], "sklearn.neural_network": [[840, 1, 1, "", "BernoulliRBM"], [841, 1, 1, "", "MLPClassifier"], [842, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "fit_transform"], [840, 2, 1, "", "get_feature_names_out"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "gibbs"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "score_samples"], [840, 2, 1, "", "set_output"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_log_proba"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_params"]], "sklearn.neural_network.MLPRegressor": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_params"]], "sklearn.pipeline": [[843, 1, 1, "", "FeatureUnion"], [844, 1, 1, "", "Pipeline"], [845, 4, 1, "", "make_pipeline"], [846, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[843, 3, 1, "", "feature_names_in_"], [843, 2, 1, "", "fit"], [843, 2, 1, "", "fit_transform"], [843, 2, 1, "", "get_feature_names_out"], [843, 2, 1, "", "get_params"], [843, 3, 1, "", "n_features_in_"], [843, 2, 1, "", "set_output"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[844, 3, 1, "", "classes_"], [844, 2, 1, "", "decision_function"], [844, 3, 1, "", "feature_names_in_"], [844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_predict"], [844, 2, 1, "", "fit_transform"], [844, 2, 1, "", "get_feature_names_out"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "inverse_transform"], [844, 3, 1, "", "n_features_in_"], [844, 3, 1, "", "named_steps"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_log_proba"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "score_samples"], [844, 2, 1, "", "set_output"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "transform"]], "sklearn.preprocessing": [[847, 1, 1, "", "Binarizer"], [848, 1, 1, "", "FunctionTransformer"], [849, 1, 1, "", "KBinsDiscretizer"], [850, 1, 1, "", "KernelCenterer"], [851, 1, 1, "", "LabelBinarizer"], [852, 1, 1, "", "LabelEncoder"], [853, 1, 1, "", "MaxAbsScaler"], [854, 1, 1, "", "MinMaxScaler"], [855, 1, 1, "", "MultiLabelBinarizer"], [856, 1, 1, "", "Normalizer"], [857, 1, 1, "", "OneHotEncoder"], [858, 1, 1, "", "OrdinalEncoder"], [859, 1, 1, "", "PolynomialFeatures"], [860, 1, 1, "", "PowerTransformer"], [861, 1, 1, "", "QuantileTransformer"], [862, 1, 1, "", "RobustScaler"], [863, 1, 1, "", "SplineTransformer"], [864, 1, 1, "", "StandardScaler"], [865, 1, 1, "", "TargetEncoder"], [866, 4, 1, "", "add_dummy_feature"], [867, 4, 1, "", "binarize"], [868, 4, 1, "", "label_binarize"], [869, 4, 1, "", "maxabs_scale"], [870, 4, 1, "", "minmax_scale"], [871, 4, 1, "", "normalize"], [872, 4, 1, "", "power_transform"], [873, 4, 1, "", "quantile_transform"], [874, 4, 1, "", "robust_scale"], [875, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "fit_transform"], [847, 2, 1, "", "get_feature_names_out"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "set_output"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "inverse_transform"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "inverse_transform"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_transform"], [850, 2, 1, "", "get_feature_names_out"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "set_output"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "inverse_transform"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "inverse_transform"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "inverse_transform"], [853, 2, 1, "", "partial_fit"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_transform"], [854, 2, 1, "", "get_feature_names_out"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "inverse_transform"], [854, 2, 1, "", "partial_fit"], [854, 2, 1, "", "set_output"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "inverse_transform"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_params"], [857, 3, 1, "", "infrequent_categories_"], [857, 2, 1, "", "inverse_transform"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_params"], [858, 3, 1, "", "infrequent_categories_"], [858, 2, 1, "", "inverse_transform"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_params"], [859, 3, 1, "", "powers_"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "inverse_transform"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_feature_names_out"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "inverse_transform"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "inverse_transform"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "inverse_transform"], [864, 2, 1, "", "partial_fit"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_params"], [865, 3, 1, "", "infrequent_categories_"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "transform"]], "sklearn.random_projection": [[876, 1, 1, "", "GaussianRandomProjection"], [877, 1, 1, "", "SparseRandomProjection"], [878, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[879, 1, 1, "", "LabelPropagation"], [880, 1, 1, "", "LabelSpreading"], [881, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "predict"], [879, 2, 1, "", "predict_proba"], [879, 2, 1, "", "score"], [879, 2, 1, "", "set_params"]], "sklearn.semi_supervised.LabelSpreading": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "predict"], [880, 2, 1, "", "predict_proba"], [880, 2, 1, "", "score"], [880, 2, 1, "", "set_params"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[881, 2, 1, "", "decision_function"], [881, 2, 1, "", "fit"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "predict"], [881, 2, 1, "", "predict_log_proba"], [881, 2, 1, "", "predict_proba"], [881, 2, 1, "", "score"], [881, 2, 1, "", "set_params"]], "sklearn.svm": [[884, 1, 1, "", "LinearSVC"], [885, 1, 1, "", "LinearSVR"], [886, 1, 1, "", "NuSVC"], [887, 1, 1, "", "NuSVR"], [888, 1, 1, "", "OneClassSVM"], [889, 1, 1, "", "SVC"], [890, 1, 1, "", "SVR"], [891, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[884, 2, 1, "", "decision_function"], [884, 2, 1, "", "densify"], [884, 2, 1, "", "fit"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "predict"], [884, 2, 1, "", "score"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "predict"], [885, 2, 1, "", "score"], [885, 2, 1, "", "set_params"]], "sklearn.svm.NuSVC": [[886, 3, 1, "", "coef_"], [886, 2, 1, "", "decision_function"], [886, 2, 1, "", "fit"], [886, 2, 1, "", "get_params"], [886, 3, 1, "", "n_support_"], [886, 2, 1, "", "predict"], [886, 2, 1, "", "predict_log_proba"], [886, 2, 1, "", "predict_proba"], [886, 3, 1, "", "probA_"], [886, 3, 1, "", "probB_"], [886, 2, 1, "", "score"], [886, 2, 1, "", "set_params"]], "sklearn.svm.NuSVR": [[887, 3, 1, "", "coef_"], [887, 2, 1, "", "fit"], [887, 2, 1, "", "get_params"], [887, 3, 1, "", "n_support_"], [887, 2, 1, "", "predict"], [887, 2, 1, "", "score"], [887, 2, 1, "", "set_params"]], "sklearn.svm.OneClassSVM": [[888, 3, 1, "", "coef_"], [888, 2, 1, "", "decision_function"], [888, 2, 1, "", "fit"], [888, 2, 1, "", "fit_predict"], [888, 2, 1, "", "get_params"], [888, 3, 1, "", "n_support_"], [888, 2, 1, "", "predict"], [888, 2, 1, "", "score_samples"], [888, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[889, 3, 1, "", "coef_"], [889, 2, 1, "", "decision_function"], [889, 2, 1, "", "fit"], [889, 2, 1, "", "get_params"], [889, 3, 1, "", "n_support_"], [889, 2, 1, "", "predict"], [889, 2, 1, "", "predict_log_proba"], [889, 2, 1, "", "predict_proba"], [889, 3, 1, "", "probA_"], [889, 3, 1, "", "probB_"], [889, 2, 1, "", "score"], [889, 2, 1, "", "set_params"]], "sklearn.svm.SVR": [[890, 3, 1, "", "coef_"], [890, 2, 1, "", "fit"], [890, 2, 1, "", "get_params"], [890, 3, 1, "", "n_support_"], [890, 2, 1, "", "predict"], [890, 2, 1, "", "score"], [890, 2, 1, "", "set_params"]], "sklearn.tree": [[892, 1, 1, "", "DecisionTreeClassifier"], [893, 1, 1, "", "DecisionTreeRegressor"], [894, 1, 1, "", "ExtraTreeClassifier"], [895, 1, 1, "", "ExtraTreeRegressor"], [896, 4, 1, "", "export_graphviz"], [897, 4, 1, "", "export_text"], [898, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[892, 2, 1, "", "apply"], [892, 2, 1, "", "cost_complexity_pruning_path"], [892, 2, 1, "", "decision_path"], [892, 3, 1, "", "feature_importances_"], [892, 2, 1, "", "fit"], [892, 2, 1, "", "get_depth"], [892, 2, 1, "", "get_n_leaves"], [892, 2, 1, "", "get_params"], [892, 2, 1, "", "predict"], [892, 2, 1, "", "predict_log_proba"], [892, 2, 1, "", "predict_proba"], [892, 2, 1, "", "score"], [892, 2, 1, "", "set_params"]], "sklearn.tree.DecisionTreeRegressor": [[893, 2, 1, "", "apply"], [893, 2, 1, "", "cost_complexity_pruning_path"], [893, 2, 1, "", "decision_path"], [893, 3, 1, "", "feature_importances_"], [893, 2, 1, "", "fit"], [893, 2, 1, "", "get_depth"], [893, 2, 1, "", "get_n_leaves"], [893, 2, 1, "", "get_params"], [893, 2, 1, "", "predict"], [893, 2, 1, "", "score"], [893, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeClassifier": [[894, 2, 1, "", "apply"], [894, 2, 1, "", "cost_complexity_pruning_path"], [894, 2, 1, "", "decision_path"], [894, 3, 1, "", "feature_importances_"], [894, 2, 1, "", "fit"], [894, 2, 1, "", "get_depth"], [894, 2, 1, "", "get_n_leaves"], [894, 2, 1, "", "get_params"], [894, 2, 1, "", "predict"], [894, 2, 1, "", "predict_log_proba"], [894, 2, 1, "", "predict_proba"], [894, 2, 1, "", "score"], [894, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeRegressor": [[895, 2, 1, "", "apply"], [895, 2, 1, "", "cost_complexity_pruning_path"], [895, 2, 1, "", "decision_path"], [895, 3, 1, "", "feature_importances_"], [895, 2, 1, "", "fit"], [895, 2, 1, "", "get_depth"], [895, 2, 1, "", "get_n_leaves"], [895, 2, 1, "", "get_params"], [895, 2, 1, "", "predict"], [895, 2, 1, "", "score"], [895, 2, 1, "", "set_params"]], "sklearn.utils": [[899, 1, 1, "", "Bunch"], [900, 4, 1, "", "_safe_indexing"], [902, 4, 1, "", "as_float_array"], [903, 4, 1, "", "assert_all_finite"], [904, 4, 1, "", "check_X_y"], [905, 4, 1, "", "check_array"], [906, 4, 1, "", "check_consistent_length"], [907, 4, 1, "", "check_random_state"], [908, 4, 1, "", "check_scalar"], [911, 4, 1, "", "deprecated"], [917, 4, 1, "", "estimator_html_repr"], [924, 4, 1, "", "gen_batches"], [925, 4, 1, "", "gen_even_slices"], [927, 4, 1, "", "indexable"], [932, 4, 1, "", "murmurhash3_32"], [935, 4, 1, "", "parallel_backend"], [937, 4, 1, "", "register_parallel_backend"], [938, 4, 1, "", "resample"], [939, 4, 1, "", "safe_mask"], [940, 4, 1, "", "safe_sqr"], [941, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[899, 2, 1, "", "clear"], [899, 2, 1, "", "copy"], [899, 2, 1, "", "fromkeys"], [899, 2, 1, "", "get"], [899, 2, 1, "", "items"], [899, 2, 1, "", "keys"], [899, 2, 1, "", "pop"], [899, 2, 1, "", "popitem"], [899, 2, 1, "", "setdefault"], [899, 2, 1, "", "update"], [899, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[901, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[909, 4, 1, "", "compute_class_weight"], [910, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[912, 4, 1, "", "all_displays"], [913, 4, 1, "", "all_estimators"], [914, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[915, 4, 1, "", "check_estimator"], [916, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[918, 4, 1, "", "density"], [919, 4, 1, "", "fast_logdet"], [920, 4, 1, "", "randomized_range_finder"], [921, 4, 1, "", "randomized_svd"], [922, 4, 1, "", "safe_sparse_dot"], [923, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[926, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metaestimators": [[928, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[929, 4, 1, "", "is_multilabel"], [930, 4, 1, "", "type_of_target"], [931, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[933, 1, 1, "", "Parallel"], [934, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[933, 2, 1, "", "dispatch_next"], [933, 2, 1, "", "dispatch_one_batch"], [933, 2, 1, "", "format"], [933, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[936, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[942, 4, 1, "", "incr_mean_variance_axis"], [943, 4, 1, "", "inplace_column_scale"], [944, 4, 1, "", "inplace_csr_column_scale"], [945, 4, 1, "", "inplace_row_scale"], [946, 4, 1, "", "inplace_swap_column"], [947, 4, 1, "", "inplace_swap_row"], [948, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[949, 4, 1, "", "inplace_csr_row_normalize_l1"], [950, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[951, 4, 1, "", "check_is_fitted"], [952, 4, 1, "", "check_memory"], [953, 4, 1, "", "check_symmetric"], [954, 4, 1, "", "column_or_1d"], [955, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 383], "u": 0, "histori": [0, 1007], "govern": [0, 386], "author": [0, 1009], "contributor": [0, 371, 372, 386, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "experi": [0, 37, 371, 386], "team": [0, 371, 386], "commun": [0, 372, 386], "emeritu": 0, "core": [0, 8, 360, 371, 376, 378, 383, 386, 405, 969], "develop": [0, 370, 373, 374, 375, 376, 379, 380, 381, 956], "cite": 0, "scikit": [0, 253, 310, 311, 312, 313, 314, 315, 357, 358, 370, 373, 374, 376, 377, 383, 386, 388, 985, 987, 988, 991, 993, 994, 999, 1002, 1005], "learn": [0, 5, 12, 50, 95, 98, 149, 165, 167, 168, 169, 174, 218, 219, 220, 221, 233, 253, 260, 288, 295, 310, 311, 312, 313, 314, 315, 318, 319, 320, 357, 358, 360, 368, 370, 372, 373, 374, 376, 377, 383, 386, 388, 396, 402, 404, 962, 964, 972, 980, 985, 987, 988, 989, 991, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1005], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 86, 100, 104, 231, 372, 374, 383, 396, 979, 984, 987], "infrastructur": 0, "support": [0, 25, 120, 165, 192, 306, 310, 311, 312, 313, 315, 325, 328, 337, 383, 388, 393, 395, 396, 404, 982, 983, 990, 1000, 1015], "exampl": [3, 6, 9, 53, 59, 75, 88, 102, 126, 157, 165, 194, 195, 335, 339, 360, 366, 367, 377, 383, 387, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 411, 419, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 446, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 465, 468, 469, 470, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 490, 492, 496, 497, 498, 499, 500, 501, 505, 506, 508, 509, 510, 511, 512, 513, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 567, 568, 570, 573, 574, 575, 576, 577, 579, 580, 583, 585, 586, 588, 590, 591, 592, 593, 594, 596, 597, 599, 600, 601, 603, 604, 605, 608, 609, 611, 613, 614, 616, 617, 618, 619, 620, 621, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 638, 639, 641, 642, 643, 644, 645, 648, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 674, 675, 676, 677, 678, 679, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 695, 698, 699, 703, 704, 705, 712, 714, 719, 722, 723, 726, 727, 730, 733, 734, 735, 737, 738, 740, 742, 763, 764, 767, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 813, 815, 817, 819, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 837, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 870, 873, 877, 878, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 898, 899, 907, 916, 918, 925, 928, 941, 951, 956, 959, 961, 962, 963, 964, 966, 967, 968, 970, 971, 972, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 993, 999, 1000, 1001, 1006, 1009], "base": [3, 4, 85, 117, 118, 147, 165, 182, 233, 310, 311, 313, 315, 372, 396, 397, 401, 404, 406, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 963, 975, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "real": [3, 9, 75, 109, 165, 367], "world": [3, 75, 165, 367], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 34, 44, 58, 62, 70, 85, 88, 89, 90, 91, 92, 95, 104, 116, 119, 120, 130, 136, 137, 150, 152, 154, 155, 157, 159, 165, 167, 168, 169, 177, 180, 182, 187, 198, 200, 207, 216, 219, 220, 227, 232, 237, 256, 264, 265, 307, 322, 323, 327, 343, 349, 364, 365, 366, 367, 368, 369, 377, 383, 396, 407, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 993, 999, 1000, 1002, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "time": [4, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 116, 121, 134, 140, 148, 160, 164, 172, 175, 192, 217, 225, 232, 233, 241, 250, 274, 277, 292, 298, 308, 316, 324, 341, 343, 346, 353, 401], "relat": [4, 8, 366, 372, 975, 987, 1016], "featur": [4, 51, 54, 74, 100, 115, 117, 118, 120, 124, 127, 128, 141, 143, 145, 146, 147, 165, 170, 171, 174, 177, 192, 195, 216, 232, 237, 259, 297, 301, 302, 305, 306, 310, 312, 313, 333, 343, 344, 358, 360, 372, 376, 396, 398, 404, 405, 406, 957, 975, 977, 984, 1001, 1002, 1012, 1013, 1014, 1015, 1016], "engin": [4, 170, 987, 991], "data": [4, 7, 9, 12, 17, 24, 26, 38, 47, 49, 50, 55, 57, 58, 63, 64, 66, 67, 70, 75, 78, 80, 82, 85, 86, 96, 97, 100, 101, 102, 103, 109, 111, 117, 118, 124, 126, 130, 143, 146, 147, 155, 156, 158, 163, 167, 170, 171, 174, 178, 184, 191, 192, 228, 233, 236, 239, 248, 253, 255, 259, 264, 265, 267, 268, 271, 285, 290, 297, 300, 304, 305, 306, 318, 330, 333, 337, 344, 345, 354, 358, 360, 367, 377, 383, 385, 397, 398, 400, 401, 406, 407, 977, 981, 991, 993, 996, 999, 1001, 1002], "explor": 4, "bike": [4, 169], "share": [4, 169], "demand": 4, "cross": [4, 84, 85, 136, 137, 146, 165, 187, 253, 254, 256, 257, 261, 263, 268, 307, 333, 354, 372, 396, 400, 401, 956, 963, 997], "valid": [4, 136, 137, 146, 187, 231, 253, 254, 256, 257, 261, 263, 268, 273, 307, 333, 354, 358, 374, 381, 396, 401, 951, 952, 953, 954, 955, 956, 962, 963, 970, 997], "gradient": [4, 116, 120, 121, 122, 123, 124, 125, 169, 198, 206, 212, 310, 311, 313, 315, 404, 963, 981], "boost": [4, 116, 120, 121, 122, 123, 124, 125, 169, 198, 310, 311, 313, 315, 404], "naiv": [4, 24, 25, 396, 969], "linear": [4, 25, 33, 34, 123, 150, 165, 168, 176, 177, 194, 198, 201, 204, 219, 220, 232, 311, 329, 336, 337, 358, 381, 383, 396, 961, 963, 964, 965, 977, 1000], "regress": [4, 73, 75, 85, 86, 111, 123, 124, 133, 150, 155, 156, 157, 158, 177, 178, 181, 187, 189, 190, 191, 194, 196, 198, 200, 213, 215, 216, 230, 233, 290, 337, 350, 351, 368, 396, 398, 404, 407, 958, 960, 963, 967, 968, 970, 971, 981, 982, 983, 1000], "step": [4, 238, 384, 398], "categori": [4, 314, 977], "trigonometr": 4, "period": [4, 199], "spline": [4, 199, 313, 977], "qualit": 4, "analysi": [4, 33, 34, 60, 95, 101, 103, 106, 123, 169, 182, 243, 260, 261, 268, 286, 287, 288, 343, 396, 400, 402, 961, 970, 984, 1001, 1002], "impact": [4, 61, 1024, 1025], "model": [4, 7, 11, 57, 75, 85, 96, 103, 109, 116, 117, 118, 120, 124, 126, 146, 147, 150, 155, 165, 168, 169, 170, 174, 176, 177, 182, 186, 187, 192, 198, 201, 216, 228, 233, 237, 242, 244, 248, 249, 251, 257, 258, 260, 265, 285, 290, 297, 305, 311, 313, 337, 343, 358, 374, 383, 384, 386, 391, 392, 396, 401, 956, 962, 963, 966, 967, 969, 971, 972, 993, 997, 1000, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "predict": [4, 10, 24, 86, 111, 123, 133, 151, 167, 178, 198, 233, 236, 254, 265, 318, 358, 383, 384, 400, 401, 407, 967, 978, 993, 1000], "pairwis": [4, 258, 396, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 965], "interact": [4, 169, 315, 404, 1000], "polynomi": [4, 174, 177, 178, 199, 959, 963, 965, 977, 1000], "non": [4, 14, 95, 123, 193, 198, 219, 263, 329, 336, 337, 402, 963, 977], "kernel": [4, 5, 100, 150, 155, 156, 158, 159, 165, 173, 174, 232, 233, 282, 283, 291, 312, 326, 329, 334, 337, 396, 402, 403, 407, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 959, 960, 965, 977, 982, 1000], "conclud": [4, 109, 223], "remark": [4, 57, 109, 223, 231], "imag": [5, 47, 50, 53, 66, 98, 366, 396, 405, 569, 570, 571, 572, 573], "denois": [5, 98], "us": [5, 6, 12, 17, 48, 95, 96, 98, 127, 128, 130, 185, 201, 212, 214, 258, 262, 267, 301, 337, 343, 344, 354, 360, 373, 377, 378, 380, 383, 401, 402, 404, 405, 406, 411, 419, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 446, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 465, 468, 469, 470, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 490, 492, 496, 497, 498, 499, 500, 501, 505, 506, 508, 509, 510, 511, 512, 513, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 567, 568, 570, 573, 574, 575, 576, 577, 579, 580, 583, 585, 586, 588, 590, 591, 592, 593, 594, 596, 597, 599, 600, 601, 603, 604, 605, 608, 609, 611, 613, 614, 616, 617, 618, 619, 620, 621, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 638, 639, 641, 642, 643, 644, 645, 648, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 674, 675, 676, 677, 678, 679, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 695, 698, 699, 703, 704, 705, 712, 714, 719, 722, 723, 726, 727, 730, 733, 734, 735, 737, 738, 740, 742, 763, 764, 767, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 813, 815, 817, 819, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 837, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 870, 873, 877, 878, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 898, 899, 907, 916, 918, 925, 928, 941, 951, 961, 963, 964, 967, 971, 981, 982, 983, 991, 1000, 1002, 1019], "pca": [5, 58, 73, 95, 96, 99, 100, 101, 102, 103, 104, 305, 402, 527, 984, 1001], "refer": [5, 11, 25, 27, 80, 81, 98, 113, 170, 174, 182, 186, 258, 263, 264, 291, 366, 367, 369, 394, 395, 396, 397, 399, 400, 401, 402, 404, 405, 406, 407, 956, 957, 959, 960, 961, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 979, 980, 981, 982, 983], "load": [5, 7, 17, 50, 58, 116, 118, 120, 124, 136, 147, 170, 191, 216, 220, 228, 232, 239, 259, 267, 268, 305, 306, 330, 333, 343, 344, 345, 365, 366, 377, 383, 405, 993, 1001, 1002], "via": [5, 53, 186, 187, 216, 404, 959], "openml": [5, 306, 310, 366], "basi": [5, 159, 407, 959, 963, 1000], "reconstruct": [5, 13, 98], "test": [5, 78, 142, 261, 264, 271, 343, 348, 370, 372, 374, 380, 381, 401, 993, 1000, 1002], "face": [6, 50, 95, 235, 367, 991, 998], "recognit": [6, 367, 369, 998], "eigenfac": [6, 95, 998], "svm": [6, 139, 143, 144, 174, 212, 232, 313, 323, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 396, 884, 885, 886, 887, 888, 889, 890, 891, 963, 973, 981, 1000, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "complex": [7, 229, 238, 257, 260, 320, 348, 358, 397, 963, 964, 970, 971, 981, 982, 983], "influenc": [7, 10, 358], "benchmark": [7, 10, 58, 343], "choos": [7, 956, 993, 995, 997], "paramet": [7, 78, 123, 256, 312, 330, 338, 372, 374, 384, 385, 396, 398, 404, 956, 963, 967, 982, 993, 997, 1002], "run": [7, 58, 262], "code": [7, 95, 105, 372, 374, 377, 378, 380, 402, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "plot": [7, 8, 10, 24, 30, 34, 38, 41, 47, 49, 50, 57, 63, 64, 66, 67, 78, 82, 85, 91, 92, 96, 97, 101, 109, 111, 116, 119, 124, 126, 130, 131, 132, 133, 136, 146, 163, 169, 177, 178, 182, 190, 191, 192, 202, 203, 207, 220, 228, 232, 236, 237, 239, 248, 254, 255, 260, 262, 265, 267, 271, 273, 285, 297, 306, 310, 312, 313, 318, 327, 328, 333, 343, 349, 379, 396, 962, 974, 1006], "result": [7, 8, 38, 47, 49, 50, 57, 58, 63, 64, 67, 78, 80, 82, 96, 97, 109, 111, 116, 130, 133, 163, 174, 182, 203, 233, 236, 262, 271, 285, 306, 337, 344, 354, 956], "conclus": [7, 150, 182, 187, 307], "out": [8, 122, 360, 380, 401, 405, 956, 963, 969], "classif": [8, 26, 29, 30, 32, 33, 70, 91, 138, 151, 152, 153, 154, 158, 165, 214, 234, 261, 264, 265, 268, 281, 289, 297, 310, 317, 322, 343, 368, 396, 404, 407, 963, 967, 968, 970, 971, 981, 982, 983, 1000, 1002], "text": [8, 165, 229, 259, 322, 342, 343, 344, 345, 367, 396, 405, 574, 575, 576, 577, 1002], "document": [8, 19, 165, 312, 313, 342, 343, 344, 372, 987, 988, 990, 1005, 1009, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "reuter": 8, "routin": [8, 359, 381], "main": [8, 198], "outlier": [9, 180, 215, 227, 236, 284, 285, 300, 396, 963, 973, 977], "detect": [9, 227, 236, 255, 284, 285, 967, 973, 982], "set": [9, 75, 78, 102, 130, 163, 265, 330, 348, 383, 401, 963, 993, 999, 1000, 1002], "first": [9, 37, 372], "second": [9, 37], "latenc": [10, 358], "helper": [10, 159, 220, 381], "function": [10, 34, 159, 188, 202, 203, 208, 220, 236, 253, 271, 312, 333, 345, 381, 396, 401, 404, 407, 959, 963, 967, 982, 1000], "bulk": [10, 358], "atom": [10, 358], "speed": [10, 378], "variou": [10, 52, 205, 224], "regressor": [10, 111, 123, 177, 307, 310, 313, 396, 404], "n_featur": 10, "throughput": [10, 358], "speci": [11, 291], "distribut": [11, 216, 219, 291, 304, 388, 964, 977], "visual": [12, 58, 106, 228, 233, 239, 253, 296, 311, 330, 396, 397, 398, 967, 1006], "stock": [12, 998], "market": [12, 998], "structur": [12, 39, 47, 67, 158, 320, 352, 998], "retriev": [12, 310], "from": [12, 98, 147, 170, 306, 310, 359, 366, 370, 383, 396, 405, 963, 967, 993, 1000, 1001, 1002, 1019], "internet": 12, "graph": [12, 310, 381, 383, 397, 405, 926], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 95, 165, 314, 344, 368, 394, 396, 397, 402, 408, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 700, 701, 967, 1001, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "affin": [12, 38, 397, 965], "propag": [12, 38, 318, 319, 320, 397, 980], "embed": [12, 52, 219, 220, 231, 288, 404, 964], "2d": [12, 52, 97, 104, 169], "space": [12, 100, 398, 956, 964], "compress": [13, 53, 358, 406], "sens": [13, 406], "tomographi": 13, "l1": [13, 182, 189, 191, 214, 338, 406], "prior": [13, 159, 243], "lasso": [13, 182, 183, 184, 185, 186, 187, 192, 311, 638, 963], "topic": 14, "extract": [14, 74, 98, 216, 259, 344, 358, 360, 396, 405, 1002], "neg": [14, 95, 193, 402, 963], "matrix": [14, 17, 158, 179, 252, 396, 397, 402, 967, 982], "factor": [14, 95, 103, 106, 284, 285, 402, 973], "latent": [14, 85, 402], "dirichlet": [14, 402, 966], "alloc": [14, 402], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 63, 64, 67, 68, 76, 78, 83, 87, 93, 107, 116, 134, 140, 148, 160, 164, 172, 175, 191, 203, 217, 225, 241, 250, 271, 274, 277, 292, 298, 308, 316, 324, 341, 346, 353, 357, 358, 397, 398, 401, 974], "libsvm": [16, 366], "gui": 16, "wikipedia": 17, "princip": [17, 86, 101, 402, 984, 1001], "eigenvector": 17, "download": [17, 130, 163, 366], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 388, 405, 1002], "adjac": 17, "singular": [17, 402], "vector": [17, 25, 53, 165, 325, 328, 337, 343, 345, 367, 396, 405, 982, 1000, 1001], "random": [17, 95, 114, 116, 128, 129, 170, 171, 231, 239, 264, 266, 354, 374, 381, 396, 401, 402, 404, 936, 956, 963, 979, 984], "svd": [17, 95, 402], "central": 17, "score": [17, 85, 116, 121, 136, 146, 163, 177, 248, 257, 264, 265, 333, 397, 401, 962, 967, 982, 997], "biclust": [18, 19, 20, 165, 368, 394, 396], "spectral": [19, 20, 21, 66, 219, 394, 397, 964], "co": [19, 21, 394], "algorithm": [19, 20, 21, 38, 44, 49, 55, 63, 64, 65, 219, 227, 378, 383, 961, 963, 966, 968, 970, 971, 975, 983, 1000], "A": [20, 21, 47, 58, 63, 198, 313, 371, 378, 391, 401, 996, 999], "demo": [20, 21, 38, 47, 49, 55, 58, 63, 65], "calibr": [23, 24, 25, 26, 27, 123, 165, 198, 395, 396, 423, 424, 425, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "probabl": [24, 25, 26, 30, 132, 153, 395, 396, 404, 982], "classifi": [24, 25, 27, 31, 133, 181, 238, 255, 276, 310, 323, 327, 330, 343, 352, 395, 396, 404, 961, 970, 1000, 1002], "gener": [24, 34, 38, 47, 49, 55, 57, 63, 64, 66, 67, 78, 80, 82, 91, 92, 96, 97, 98, 117, 126, 143, 146, 150, 156, 157, 159, 165, 176, 177, 178, 182, 192, 198, 200, 233, 248, 255, 271, 285, 290, 297, 311, 318, 337, 354, 368, 372, 385, 396, 402, 404, 963, 977, 988, 997], "synthet": [24, 75, 177, 182, 255, 307, 377], "gaussian": [24, 25, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 242, 243, 244, 247, 248, 249, 300, 396, 407, 966, 969, 977, 979], "bay": [24, 25, 396, 969], "curv": [25, 27, 178, 233, 239, 249, 255, 260, 265, 267, 273, 395, 962], "summari": [25, 187, 344, 345, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "3": [26, 181, 1002, 1017, 1018, 1023, 1025], "class": [26, 37, 110, 112, 132, 181, 207, 212, 261, 265, 267, 313, 329, 332, 385, 396, 401, 404, 405, 966, 967, 970, 973, 981, 982, 1009, 1010], "fit": [26, 57, 96, 103, 117, 118, 121, 123, 124, 155, 177, 178, 179, 192, 195, 200, 204, 265, 285, 290, 337, 354, 374, 384, 404, 969, 973, 993], "compar": [26, 42, 44, 62, 78, 85, 116, 121, 129, 143, 174, 177, 184, 200, 205, 227, 233, 258, 266, 286, 295, 300, 306, 383], "comparison": [27, 31, 43, 64, 80, 104, 120, 142, 150, 219, 220, 233, 258, 269, 345, 397, 407, 963], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 58, 89, 137, 138, 220, 297, 318, 319, 369, 999], "normal": [33, 174, 198, 300, 304, 396, 856, 871, 967, 977], "ledoit": [33, 79, 399], "wolf": [33, 79, 399], "oa": [33, 78, 79, 410, 461], "discrimin": [33, 34, 396, 961], "quadrat": [34, 407, 961], "covari": [34, 77, 78, 80, 81, 82, 165, 245, 396, 399, 410, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 961, 1017, 1021, 1022, 1023, 1025], "ellipsoid": [34, 244], "colormap": 34, "adjust": 37, "chanc": 37, "perform": [37, 43, 261, 305, 312, 314, 318, 344, 358, 372, 373, 397, 401, 405, 1002], "evalu": [37, 58, 61, 81, 198, 236, 259, 262, 297, 306, 344, 384, 392, 394, 397, 401, 404, 956, 962, 967, 1002], "defin": [37, 47, 58, 67, 219, 236, 253, 255, 256, 345, 967], "list": [37, 990], "metric": [37, 40, 123, 262, 396, 397, 401, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 956, 964, 965, 967, 970, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "fix": [37, 376, 1009, 1012, 1013, 1014, 1015, 1016, 1022], "ground": [37, 177], "truth": [37, 177], "label": [37, 265, 318, 319, 320, 367, 368, 397, 401, 404, 967, 978, 980], "grow": 37, "number": [37, 60, 120, 146, 270, 358, 374, 956, 957, 966], "vari": [37, 294, 321, 397], "sampl": [38, 55, 63, 78, 96, 97, 143, 179, 211, 233, 259, 271, 290, 311, 337, 340, 366, 381, 385, 396, 397, 404, 963], "agglom": [39, 40, 52, 1001], "without": [39, 121, 286, 343], "differ": [40, 44, 62, 78, 159, 169, 300, 303, 306, 327, 374, 383, 397, 963, 1000], "hierarch": [41, 47, 62, 67, 397, 1001], "dendrogram": 41, "birch": [42, 397, 428], "minibatchkmean": [42, 64, 95, 435], "bisect": [43, 397], "k": [43, 45, 48, 57, 58, 59, 61, 64, 67, 85, 305, 344, 397, 401, 967, 970, 977, 1000, 1001], "mean": [43, 45, 48, 57, 58, 59, 61, 63, 64, 117, 118, 163, 170, 344, 397, 967, 977, 1001], "regular": [43, 78, 125, 168, 191, 202, 203, 294, 338, 963, 971], "toi": [44, 62, 227, 369], "segment": [46, 66], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 258], "ward": [47, 67, 397, 1001], "an": [47, 59, 163, 179, 187, 236, 288, 310, 314, 383, 405, 956, 973, 993, 999, 1000], "color": 48, "quantiz": [48, 53, 1001], "dbscan": [49, 397, 408, 430], "onlin": [50, 205, 313, 314, 981], "dictionari": [50, 95, 98, 105, 402], "part": [50, 406], "agglomer": [51, 54, 984, 1001], "origin": [53, 100, 264, 288, 300], "encod": [53, 120, 306, 307, 977, 978], "strategi": [53, 256, 295, 303, 360, 396, 397, 967], "memori": [53, 358, 378, 380, 397], "footprint": 53, "v": [54, 67, 78, 79, 81, 86, 100, 146, 169, 170, 180, 190, 216, 261, 267, 271, 272, 348, 397, 957, 977, 993], "univari": [54, 85, 143, 333, 406, 957], "select": [54, 60, 72, 103, 136, 141, 143, 146, 147, 165, 186, 187, 192, 248, 251, 333, 383, 392, 396, 401, 406, 956, 963, 966, 997, 1015], "hdbscan": [55, 397, 432], "scale": [55, 168, 219, 222, 305, 338, 360, 405, 875, 964, 973, 977, 984], "invari": [55, 261], "multi": [55, 110, 129, 169, 192, 207, 222, 235, 262, 265, 294, 351, 378, 396, 963, 964, 967, 971, 982, 983], "hyperparamet": [55, 155, 156, 259, 266, 603], "robust": [55, 80, 81, 177, 201, 204, 354, 396, 399, 956, 963], "min_cluster_s": 55, "min_sampl": 55, "dbscan_clust": 55, "induct": 56, "demonstr": [57, 262, 303, 318], "assumpt": 57, "possibl": [57, 377], "solut": 57, "final": [57, 150], "handwritten": [58, 220, 369], "our": [58, 253, 256, 372], "reduc": [58, 358], "initi": [59, 61, 246, 966], "silhouett": [60, 397], "kmean": [60, 64, 311, 433], "empir": [61, 81, 231, 399], "linkag": [62, 397], "method": [62, 74, 85, 108, 150, 165, 219, 221, 246, 275, 385, 396, 397, 404, 959, 966, 973, 974, 1001], "shift": [63, 397], "meanshift": [63, 434], "establish": [64, 174], "pariti": 64, "between": [64, 269], "optic": [65, 369, 397, 436], "four": 66, "circl": 66, "two": [66, 112, 184, 237, 258], "unstructur": 67, "we": 67, "ar": [67, 313, 383], "nearest": [67, 165, 278, 279, 280, 281, 286, 289, 290, 310, 396, 957, 970, 1000], "neighbor": [67, 165, 219, 278, 279, 280, 281, 286, 290, 305, 310, 396, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 957, 964, 970, 1000, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "10": [67, 1009], "pipelin": [69, 70, 72, 73, 130, 144, 165, 168, 229, 238, 259, 306, 333, 374, 383, 384, 396, 398, 406, 843, 844, 845, 846, 984, 998, 1002, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "composit": [69, 165, 396, 398, 956], "estim": [69, 77, 78, 79, 80, 81, 82, 113, 120, 122, 129, 156, 163, 165, 177, 201, 204, 229, 235, 236, 247, 266, 282, 283, 291, 310, 311, 312, 315, 354, 374, 383, 384, 385, 393, 396, 398, 399, 401, 403, 404, 407, 956, 957, 961, 963, 966, 967, 982, 987, 995, 997, 999, 1010, 1017, 1018, 1019], "column": [70, 71, 238], "transform": [70, 71, 72, 75, 85, 115, 128, 238, 312, 313, 314, 364, 383, 384, 398, 400, 401, 970, 977, 978, 979, 1001], "heterogen": [70, 398], "sourc": [70, 96, 370], "20": [70, 343, 367, 1002, 1017], "newsgroup": [70, 343, 367, 1002], "creat": [70, 101, 103, 228, 265, 307, 333, 383], "mix": 71, "type": [71, 243, 374, 385, 397, 993], "dimension": [72, 219, 222, 238, 287, 305, 344, 961, 964, 970, 984, 1000], "reduct": [72, 219, 223, 238, 287, 305, 344, 961, 970, 984], "gridsearchcv": [72, 136, 262, 404, 782], "illustr": [72, 154, 159, 288, 407], "cach": [72, 280, 398], "within": 72, "chain": [73, 238, 276, 384, 398], "logist": [73, 181, 188, 189, 190, 191, 213, 214, 963, 1000], "concaten": 74, "multipl": [74, 238, 262, 354, 379, 401, 956, 957, 967, 1017, 1018], "effect": [75, 167, 224, 300, 305, 321, 348, 970], "target": [75, 157, 216, 306, 307, 383, 385, 398, 400, 968, 977, 978], "shrinkag": [78, 399, 404, 961, 1000], "ledoitwolf": [78, 459], "max": [78, 967], "likelihood": [78, 177, 178, 261, 967, 972], "approach": [78, 187, 258], "mahalanobi": [80, 970], "distanc": [80, 396, 970], "relev": [80, 182, 963], "minimum": [81, 399], "determin": [81, 182, 399, 963, 967], "spars": [82, 95, 105, 168, 182, 184, 213, 310, 343, 344, 381, 399, 402, 406, 977, 979, 981], "invers": [82, 399, 979], "decomposit": [84, 85, 94, 95, 113, 165, 368, 396, 400, 402, 409, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 1001, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "variabl": [85, 167, 168, 359, 383, 396, 1000], "canon": [85, 400], "symmetr": 85, "pl": 85, "scatter": 85, "multivari": [85, 957], "respons": [85, 386], "pls2": 85, "pls1": 85, "cca": [85, 468], "mode": [85, 358, 370], "b": 85, "deflat": 85, "compon": [86, 95, 101, 286, 287, 288, 402, 966, 970, 984, 1001], "partial": [86, 167, 169, 237, 974], "least": [86, 123, 187, 193, 196, 963], "squar": [86, 123, 159, 193, 196, 407, 959, 963, 965, 967], "The": [86, 89, 90, 167, 168, 198, 224, 231, 256, 265, 367, 376, 401, 405, 966, 967, 979, 1000, 1001], "one": [86, 120, 237, 963, 967], "power": [86, 198], "iri": [90, 102, 104, 119, 152, 207, 323, 327, 349, 369, 407, 999], "randomli": [91, 92], "multilabel": [92, 234, 368, 381, 396, 967, 968, 993], "prepar": [95, 109, 111, 174, 219, 267, 268, 305, 330, 376], "nmf": [95, 314, 402, 526], "independ": [95, 402, 1001], "fastica": [95, 96, 97, 409, 519], "minibatchsparsepca": [95, 402, 525], "center": [95, 977], "fa": [95, 103], "posit": [95, 313], "blind": 96, "separ": [96, 210, 331, 332], "ica": [96, 402, 1001], "point": [97, 288], "cloud": 97, "distort": 98, "displai": [98, 203, 228, 229, 238, 315, 380, 1006], "patch": [98, 405], "noisi": [98, 157], "them": [98, 371], "increment": [99, 360, 402], "kernelpca": [100, 521], "figur": 101, "probabilist": [103, 151, 402, 407], "lda": [104, 402, 961], "precomput": [105, 179, 310, 402], "rotat": 106, "pattern": 106, "ensembl": [108, 115, 119, 165, 314, 396, 404, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "discret": [109, 126, 158, 301, 302, 977], "versu": [109, 113, 212, 263, 323, 358], "adaboost": [109, 110, 111, 112, 404], "baselin": [109, 174, 198], "samm": 109, "r": 109, "decis": [110, 111, 119, 126, 131, 165, 232, 323, 347, 348, 349, 350, 351, 352, 383, 386, 396, 983], "tree": [110, 111, 115, 117, 118, 119, 128, 165, 170, 198, 310, 315, 347, 348, 349, 350, 351, 352, 383, 396, 404, 406, 892, 893, 894, 895, 896, 897, 898, 970, 975, 983, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "train": [111, 124, 126, 133, 146, 228, 233, 237, 239, 248, 271, 297, 306, 307, 312, 321, 330, 343, 348, 349, 352, 367, 401, 970, 980, 993, 1000, 1002], "decisiontre": 111, "singl": [113, 130, 216, 228, 368, 397, 957], "bag": [113, 122, 343, 404, 405, 956, 1002], "bia": 113, "varianc": [113, 196, 406, 967, 977], "oob": 114, "error": [114, 123, 136, 177, 255, 271, 380, 388, 963, 967], "forest": [114, 116, 117, 118, 129, 170, 171, 239, 367, 404, 973], "histogram": [116, 311, 313, 315, 403, 404], "import": [117, 118, 124, 147, 170, 171, 232, 305, 310, 404, 975], "decreas": [117, 118, 170], "impur": [117, 118, 170, 348, 975], "permut": [117, 170, 171, 264, 310, 401, 975], "pixel": 118, "parallel": [118, 359, 370, 378, 397, 404, 933, 934, 956], "mdi": [118, 170], "surfac": [119, 232, 349], "categor": [120, 306, 312, 383, 404, 969, 977], "am": 120, "hous": [120, 367], "drop": 120, "hot": 120, "ordin": 120, "nativ": [120, 306, 310, 312], "limit": [120, 150, 358, 388, 391, 405], "split": [120, 312, 354, 401], "earli": [121, 206], "stop": [121, 206, 405, 981], "interv": 123, "quantil": [123, 200, 313, 314, 963], "confid": 123, "tune": [123, 256, 259, 312, 956, 1002], "hyper": [123, 256, 312, 396, 956], "preprocess": [124, 130, 165, 168, 169, 236, 238, 299, 345, 354, 383, 396, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 977, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "devianc": [124, 967], "isolationforest": [126, 549], "boundari": [126, 131, 323], "path": [126, 185, 191, 203, 352, 388], "length": [126, 388], "monoton": [127, 404], "constraint": [127, 315, 397, 404], "name": [127, 313, 383], "specifi": [127, 383, 956], "hash": [128, 381, 405], "total": [128, 348, 404], "output": [129, 235, 300, 315, 351, 983, 1000], "meta": [129, 312, 404], "combin": [130, 228], "predictor": 130, "stack": [130, 310, 404], "make": [130, 133, 163, 372, 376, 386], "measur": [130, 261, 397, 967], "votingclassifi": [131, 132, 404, 555], "calcul": 132, "individu": [133, 169, 312, 974], "vote": [133, 404], "tutori": [135, 165, 986, 994, 996, 1002], "exercis": [135, 136, 137, 138, 139, 165, 997, 1000, 1002], "diabet": [136, 237, 369, 1000], "appli": 136, "line": [136, 153], "show": [136, 267], "std": [136, 177], "bonu": 136, "how": [136, 354, 372, 378, 383], "much": 136, "can": [136, 383], "you": [136, 383], "trust": 136, "alpha": [136, 348], "f": [142, 967], "mutual": [142, 397], "inform": [142, 163, 186, 187, 376, 397, 956, 963], "anova": [144, 333], "recurs": [145, 146, 406], "elimin": [145, 146, 406, 956], "sequenti": [147, 406], "coeffici": [147, 168, 177, 202, 203, 397, 967], "discuss": [147, 371], "process": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 168, 354, 386, 396, 407, 966, 996], "machin": [149, 165, 167, 168, 169, 297, 325, 380, 396, 972, 982, 993, 1000], "ridg": [150, 178, 180, 196, 202, 203, 233, 307, 396, 407, 658, 960, 963], "simpl": [150, 283, 378, 999], "gpc": [151, 152, 153, 154, 407], "iso": [153, 265], "xor": [154, 407], "gpr": [155, 156, 407], "mauna": [155, 407], "loa": [155, 407], "co2": [155, 407], "build": [155, 163, 370, 372, 380, 1002], "design": 155, "proper": 155, "extrapol": 155, "interpret": [155, 168, 236, 402, 404], "nois": [156, 157, 178, 407], "level": [156, 359, 397, 404, 407], "optimis": 156, "basic": [157, 216, 384, 399, 407], "introductori": 157, "free": 157, "sequenc": [158, 383], "similar": [158, 965, 967], "under": [158, 383], "posterior": 159, "cookbook": 159, "radial": [159, 407, 959, 1000], "ration": [159, 407], "quadradt": 159, "exp": [159, 407], "sine": [159, 249, 407], "dot": [159, 407], "product": [159, 216, 380, 383, 407, 607], "mat\u00e9rn": [159, 407], "miss": [161, 162, 163, 165, 310, 404, 957, 977, 983], "valu": [161, 162, 163, 165, 224, 310, 372, 402, 404, 957, 967, 975, 977, 983], "imput": [161, 162, 163, 165, 310, 396, 613, 614, 615, 616, 957, 977, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "variant": 162, "iterativeimput": [162, 613, 957], "befor": [163, 376], "replac": 163, "0": [163, 310, 311, 312, 313, 983, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "knn": [163, 310], "iter": [163, 270, 401, 956], "releas": [165, 309, 310, 311, 312, 313, 314, 315, 376, 388, 1007, 1015], "highlight": [165, 309, 310, 311, 312, 313, 314, 315, 1009, 1012, 1013, 1016, 1017], "mixtur": [165, 242, 243, 244, 247, 248, 249, 396, 780, 781, 966, 1017, 1018, 1022, 1023], "inspect": [165, 166, 387, 396, 617, 618, 619, 620, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "approxim": [165, 173, 174, 232, 278, 312, 396, 399, 959], "manifold": [165, 218, 219, 220, 221, 368, 396, 674, 675, 676, 677, 678, 679, 680, 681, 682, 964, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "miscellan": [165, 226, 396, 1017, 1018, 1019, 1020, 1021, 1022], "multioutput": [165, 275, 396, 815, 816, 817, 818, 968, 1017, 1018, 1019, 1020, 1021, 1024, 1025], "neural": [165, 169, 293, 396, 971, 972], "network": [165, 169, 293, 396, 971, 972], "semi": [165, 317, 318, 322, 323, 396, 980], "supervis": [165, 317, 318, 322, 323, 396, 971, 980, 989, 1000], "work": [165, 342, 358, 371, 383, 1002], "failur": [167, 956], "infer": [167, 966], "causal": [167, 168], "simul": 167, "hourli": 167, "wage": [167, 168], "descript": 167, "incom": 167, "fulli": 167, "observ": [167, 1000, 1001], "lesson": [167, 168], "common": [168, 354, 385, 405, 967], "pitfal": [168, 354], "matter": 168, "check": [168, 260, 310, 380, 1017, 1018, 1019], "problem": [168, 402, 982, 983, 993, 998, 1000, 1001], "correl": [168, 171, 400, 967, 975], "numer": [168, 359, 374], "wrong": [168, 383], "depend": [169, 237, 370, 974, 1009, 1022, 1023], "condit": [169, 312, 974], "expect": [169, 312, 966, 974], "preprocessor": 169, "1": [169, 195, 313, 314, 315, 383, 1002, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "wai": [169, 372, 383], "layer": [169, 294, 971], "perceptron": [169, 294, 654, 963, 971], "ic": [169, 974], "pdp": 169, "3d": 169, "represent": [169, 229, 311, 358, 405, 1001], "accuraci": [170, 232, 343, 348, 967], "": [170, 305, 307, 375, 383, 404, 967], "multicollinear": 171, "breast": [171, 369], "cancer": [171, 369], "handl": [171, 957], "scalabl": [174, 260, 311], "partit": 174, "bayesian": [177, 178, 243, 258, 396, 963, 966], "recov": 177, "weight": [177, 179, 211, 296, 311, 340, 404, 405], "true": [177, 178], "margin": [177, 178, 210, 331, 335], "log": [177, 178, 967], "expans": 177, "sinusoid": 178, "cubic": 178, "l": 178, "elast": [179, 183, 963], "net": [179, 183, 963], "gram": [179, 982], "huberregressor": [180, 635], "strong": 180, "signal": [182, 402, 1001], "automat": [182, 384, 963], "ard": [182, 963], "elasticnet": [182, 311, 632], "dens": 184, "implement": [184, 383, 397, 405, 967, 970, 981, 982], "lar": [185, 636, 963], "criteria": [186, 383, 963, 983], "aic": 187, "bic": [187, 248], "criterion": [187, 312, 956, 981], "coordin": 187, "descent": [187, 206, 212, 963, 981], "angl": [187, 963], "penalti": [189, 209, 338], "sparsiti": [189, 195, 405, 1000], "multinomi": [190, 214, 963, 969], "One": [190, 212, 267, 313, 329, 401, 973, 981], "rest": [190, 267], "joint": 192, "task": [192, 396, 963, 987], "seri": [192, 401], "onli": [195, 215, 1020, 1022], "2": [195, 315, 1002, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "ordinari": [196, 963], "orthogon": [197, 963], "match": [197, 963], "pursuit": [197, 963], "poisson": [198, 216, 311, 312, 967], "loss": [198, 208, 311, 314, 404, 967], "french": 198, "motor": 198, "third": [198, 388], "parti": [198, 388], "liabil": 198, "claim": [198, 216], "constant": [198, 957], "rank": [198, 396, 967], "takeawai": 198, "interpol": 199, "quantileregressor": [200, 656], "linearregress": [200, 643], "ransac": [201, 963], "l2": [202, 338], "solver": [205, 402, 963], "stochast": [206, 212, 219, 295, 963, 964, 972, 981], "sgd": [207, 208, 209, 210, 211, 963, 981], "convex": 208, "maximum": [210, 331, 972], "hyperplan": [210, 331, 332], "multiclass": [213, 267, 310, 381, 395, 396, 812, 813, 814, 929, 930, 931, 967, 968, 993, 1000, 1018, 1021, 1022, 1023], "20newgroup": 213, "mnist": [214, 296], "theil": [215, 963], "sen": [215, 963], "y": [215, 383, 400, 978, 980], "direct": 215, "x": 215, "tweedi": [216, 967], "insur": 216, "definit": [216, 297, 974, 1019], "frequenc": [216, 1002], "sever": [216, 221], "gamma": [216, 967], "pure": 216, "premium": 216, "tweedieregressor": [216, 666], "local": [219, 220, 284, 285, 964, 973], "isomap": [219, 220, 674, 964], "multidimension": 219, "t": [219, 224, 964], "techniqu": 220, "sphere": 221, "swiss": 223, "roll": [223, 374], "And": [223, 386], "hole": 223, "sne": [224, 964], "perplex": 224, "shape": [224, 993], "anomali": 227, "object": [228, 253, 374, 383, 956, 967, 999, 1006], "confusionmatrixdisplai": [228, 683], "roccurvedisplai": [228, 688], "precisionrecalldisplai": [228, 686], "compact": 229, "rich": [229, 311], "html": 229, "isoton": [230, 395, 396, 621, 622, 623, 958, 1017, 1018, 1019, 1021, 1023, 1024], "johnson": [231, 979], "lindenstrauss": [231, 979], "bound": 231, "theoret": [231, 963], "explicit": 232, "map": [232, 304, 977], "rbf": [232, 329, 330, 407, 608, 965, 982, 1000], "python": [232, 359, 378, 391, 982, 986, 987, 1015], "packag": [232, 987, 1021], "svr": [233, 337, 890, 982], "construct": [233, 398], "look": [233, 337], "complet": [235, 397], "advanc": 237, "With": [237, 1002], "togeth": [237, 267, 998, 1001], "grid": [238, 256, 258, 266, 269, 956, 997, 1002], "search": [238, 256, 258, 266, 269, 384, 956, 997, 1002], "over": 238, "roc": [239, 255, 267, 268, 310, 967], "api": [239, 240, 310, 313, 315, 359, 374, 379, 385, 393, 396, 407, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019], "svc": [239, 338, 889, 982], "introduc": 240, "set_output": [240, 315, 374], "concentr": 243, "variat": [243, 966], "gmm": [245, 246], "densiti": [247, 282, 283, 291, 403, 918, 982], "best": [248, 373, 383], "confus": [252, 397, 967], "behavior": 253, "indic": 253, "mani": [253, 315, 359, 383], "cv": [253, 354], "tradeoff": [255, 967], "det": [255, 967], "custom": [256, 326, 405, 977, 982], "refit": [256, 993], "balanc": [257, 967], "statist": [258, 987, 996, 999], "frequentist": 258, "practic": [258, 354, 373, 377, 963, 964, 971, 981, 982, 983], "equival": 258, "all": [258, 267, 314, 388, 998, 1024, 1025], "take": 258, "home": 258, "messag": 258, "ratio": [261, 967], "pre": [261, 354, 384], "post": [261, 348], "respect": 261, "preval": 261, "cross_val_scor": [262, 806], "nest": [263, 398, 997], "see": [263, 398], "also": [263, 376, 398], "signific": 264, "precis": [265, 967], "recal": [265, 967], "In": 265, "binari": [265, 963, 967], "averag": [265, 267, 397, 404, 967], "micro": [265, 267], "each": [265, 270, 343, 956], "f1": 265, "receiv": [267, 268, 967], "oper": [267, 268, 371, 381, 407, 967], "characterist": [267, 268, 967], "specif": [267, 370, 374, 391, 956, 987, 988], "ovr": 267, "macro": 267, "ovo": 267, "success": [269, 270, 312, 956], "halv": [269, 270, 312, 956], "candid": [270, 956], "amount": [270, 956], "resourc": [270, 359, 372, 956, 986, 990], "underfit": 272, "overfit": 272, "tsne": [278, 678], "1d": 283, "novelti": [284, 973, 982], "lof": [284, 285], "default": [285, 372], "neighborhood": [286, 287, 288, 970], "centroid": [289, 970], "mlpclassifi": [295, 841], "mlp": 296, "restrict": [297, 972], "boltzmann": [297, 972], "scaler": 300, "standardscal": [300, 864], "minmaxscal": [300, 854], "maxabsscal": [300, 853], "robustscal": [300, 862], "powertransform": [300, 860], "quantiletransform": [300, 861], "uniform": [300, 977], "kbinsdiscret": [301, 303, 849], "continu": [301, 372], "rescal": 305, "other": [306, 366, 383, 987, 1009], "intern": 307, "22": [310, 1019], "new": [310, 312, 313, 315, 372, 383, 986, 1009, 1010, 1012, 1013, 1014, 1015, 1016], "prune": [310, 348, 983], "datafram": [310, 383], "compat": [310, 372, 374, 393], "auc": [310, 692], "now": [310, 313, 1019], "23": [311, 1020], "stabil": 311, "improv": [311, 312, 313, 314, 315, 371, 372, 1012, 1013], "24": [312, 1021], "histgradientboost": 312, "self": [312, 321, 980], "sequentialfeatureselector": [312, 588], "polynomialcountsketch": [312, 626], "decisiontreeregressor": [312, 893], "keyword": [313, 1020, 1022], "argument": [313, 374, 1020, 1022], "more": [313, 367, 383, 391, 971], "flexibl": [313, 957], "stabl": 313, "histgradientboostingregressor": [314, 548], "get_feature_names_out": 314, "avail": [314, 956, 1005, 1006], "group": [314, 401, 991, 1001], "infrequ": [314, 977], "onehotencod": [314, 857], "minibatchnmf": [314, 524], "version": [314, 366, 370, 376, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "bisectingkmean": [314, 429], "divid": 314, "panda": [315, 377, 383], "enhanc": [315, 386, 987, 1012, 1013, 1014, 1015, 1016], "faster": [315, 404], "parser": [315, 366], "fetch_openml": [315, 482], "experiment": [315, 376, 393, 396, 565, 566], "arrai": [315, 381, 393, 993], "lineardiscriminantanalysi": [315, 535], "effici": [315, 381], "most": 318, "uncertain": 318, "activ": 319, "threshold": 321, "linearsvc": [328, 884, 982], "unbalanc": [332, 982], "some": 333, "plai": 333, "percentil": 333, "case": [338, 963, 967], "tie": 339, "break": 339, "word": [343, 405, 1002], "metadata": 343, "strip": 343, "quantifi": [344, 967], "qualiti": [344, 967], "tfidfvector": [344, 345, 577], "lsa": 344, "top": [344, 967], "term": [344, 385, 405], "per": 344, "hashingvector": [344, 405, 575], "featurehash": [345, 568], "dictvector": [345, 567], "special": 345, "purpos": [345, 988], "cost": [348, 983], "leav": [348, 401, 963], "understand": 352, "recommend": [354, 367, 987], "inconsist": 354, "leakag": 354, "dure": 354, "avoid": [354, 398], "control": [354, 404, 971], "none": 354, "randomst": 354, "instanc": [354, 360], "repeat": [354, 398, 401], "call": [354, 371], "splitter": [354, 396], "subtleti": 354, "get": [354, 383, 384], "reproduc": [354, 377], "across": 354, "execut": [354, 383], "configur": [358, 359], "overhead": 358, "input": [358, 374, 393, 397, 977], "tip": [358, 373, 380, 956, 964, 971, 981, 982, 983], "trick": [358, 378, 380, 405], "algebra": [358, 381], "librari": [358, 359], "reshap": [358, 999], "link": [358, 366, 967], "manag": [359, 388], "higher": 359, "joblib": [359, 378], "lower": 359, "openmp": [359, 373], "numpi": [359, 377], "scipi": 359, "oversubscript": 359, "spawn": 359, "too": 359, "thread": 359, "switch": 359, "environ": 359, "sklearn_assume_finit": 359, "sklearn_working_memori": 359, "sklearn_se": 359, "sklearn_tests_global_random_se": 359, "sklearn_skip_network_test": 359, "sklearn_run_float32_test": 359, "sklearn_enable_debug_cython_direct": 359, "sklearn_build_enable_debug_symbol": 359, "sklearn_pairwise_dist_chunk_s": 359, "computation": 360, "bigger": 360, "stream": 360, "note": [360, 398, 401, 963], "tabl": [361, 383], "Of": 361, "content": [361, 383, 993], "util": [365, 377, 381, 396, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 1002, 1006, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "svmlight": 366, "format": [366, 377, 383, 391, 968], "org": [366, 376, 991], "repositori": 366, "arff": 366, "extern": [366, 986, 993, 1009, 1018], "olivetti": 367, "usag": [367, 378, 383, 393, 395, 398, 404, 405, 963], "convert": 367, "filter": 367, "realist": 367, "consider": [367, 963], "wild": 367, "covertyp": 367, "rcv1": 367, "kddcup": 367, "99": 367, "california": 367, "plant": 369, "linnerrud": 369, "wine": 369, "wisconsin": 369, "diagnost": 369, "instal": [370, 388], "nightli": 370, "runtim": 370, "tag": [370, 372, 374], "edit": 370, "platform": [370, 380, 388], "instruct": 370, "window": [370, 388], "maco": 370, "compil": [370, 378], "conda": 370, "forg": 370, "homebrew": 370, "linux": [370, 383, 388], "system": 370, "freebsd": 370, "altern": [370, 956], "bug": [371, 372, 376, 990, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "triag": 371, "issu": [371, 372], "curat": 371, "fruit": 371, "pr": [371, 376], "help": [371, 372, 383], "review": [371, 372, 380, 1002], "member": 371, "close": 371, "tough": 371, "typic": 371, "workflow": [371, 372], "contribut": [372, 383], "submit": 372, "report": [372, 377, 967], "request": [372, 376, 380, 383], "good": [372, 377], "video": [372, 986], "git": 372, "pull": [372, 376, 380, 383], "checklist": [372, 376], "integr": 372, "ci": 372, "stall": 372, "unclaim": 372, "easi": 372, "want": 372, "guidelin": [372, 374], "write": 372, "referenc": 372, "github": 372, "action": 372, "coverag": [372, 380, 967], "matplotlib": 372, "monitor": 372, "tracker": [372, 990], "maintain": [372, 376, 386, 391], "backward": 372, "deprec": [372, 396, 911, 1019], "chang": [372, 386, 991, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "read": 372, "exist": 372, "cython": [373, 378, 380], "convent": [373, 993], "knowledg": 373, "eas": 373, "instanti": 374, "attribut": [374, 385, 956], "option": 374, "univers": 374, "your": [374, 377, 967], "own": [374, 383, 967], "templat": 374, "baseestim": [374, 411], "mixin": 374, "get_param": 374, "set_param": 374, "init": 374, "clone": [374, 420], "assert": 374, "guid": [375, 1004], "major": [376, 404, 1017, 1018], "minor": 376, "known": [376, 1017, 1018], "merg": 376, "web": 376, "site": 376, "craft": 377, "minim": [377, 983, 1022, 1023], "provid": 377, "fail": 377, "comment": 377, "boil": 377, "down": 377, "script": 377, "someth": 377, "small": 377, "do": [377, 383], "NOT": 377, "unless": 377, "i": [377, 383, 401, 991], "extrem": [377, 404], "necessari": 377, "markdown": 377, "make_regress": [377, 510], "make_classif": [377, 501], "make_blob": [377, 498], "optim": [378, 396, 956, 964], "c": 378, "profil": 378, "extens": [378, 388], "yep": 378, "gperftool": 378, "debugg": 378, "gdb": 378, "gprof": 378, "valgrind": [378, 380], "callgrind": 378, "kcachegrind": 378, "warm": 378, "restart": 378, "overview": [379, 397, 973], "ax": 379, "saniti": 380, "preserv": 380, "fold": [380, 401], "unfold": 380, "outdat": 380, "diff": 380, "remot": 380, "track": 380, "branch": 380, "pytest": 380, "alias": 380, "flag": 380, "standard": [380, 977], "repli": 380, "debug": 380, "arm64": 380, "x86_64": 380, "tool": [381, 383], "matric": [381, 977], "warn": [381, 396], "except": [381, 396, 557, 558, 559, 560, 561, 562, 563, 564, 1021, 1025], "dispatch": 382, "frequent": 383, "ask": 383, "question": [383, 990], "what": 383, "lot": 383, "peopl": [383, 1009, 1010, 1011, 1012], "pronounc": 383, "why": [383, 404], "pypi": 383, "deep": 383, "reinforc": 383, "Will": 383, "add": 383, "graphic": [383, 972], "did": 383, "remov": [383, 406, 977, 1009], "hmm": 383, "gpu": 383, "need": 383, "doe": 383, "directli": 383, "plan": 383, "so": 383, "my": 383, "ani": 383, "attent": 383, "inclus": 383, "includ": 383, "should": 383, "save": 383, "export": 383, "deploi": 383, "bunch": [383, 899], "usabl": 383, "deal": 383, "string": 383, "sometim": 383, "crash": 383, "freez": 383, "n_job": 383, "osx": [383, 388], "job": 383, "than": 383, "random_st": 383, "entir": 383, "start": 384, "processor": 384, "next": 384, "glossari": 385, "element": 385, "concept": [385, 963], "properti": 385, "role": 386, "technic": 386, "committe": 386, "propos": 386, "slep": 386, "latest": 388, "appl": 388, "silicon": 388, "m1": 388, "hardwar": 388, "alpin": 388, "arch": 388, "debian": 388, "ubuntu": 388, "fedora": 388, "netbsd": 388, "macport": 388, "mac": 388, "anaconda": 388, "enthought": 388, "deploy": 388, "intel": 388, "winpython": 388, "troubleshoot": 388, "caus": 388, "persist": 391, "serial": 391, "secur": 391, "skop": 391, "interoper": [391, 987], "pytorch": 393, "mathemat": [394, 397, 404, 959, 961, 963, 970, 971, 974, 981, 982, 983], "formul": [394, 397, 404, 961, 963, 970, 971, 981, 982, 983], "sigmoid": [395, 965], "sklearn": [396, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "compos": [396, 450, 451, 452, 453, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "cross_decomposit": [396, 468, 469, 470, 471, 1019, 1021, 1023], "loader": 396, "discriminant_analysi": [396, 535, 536, 1017, 1018, 1021, 1023, 1024, 1025], "dummi": [396, 537, 538, 967, 1017, 1018, 1019, 1022, 1023], "feature_extract": [396, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "feature_select": [396, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "gaussian_process": [396, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "kernel_approxim": [396, 624, 625, 626, 627, 628, 1019, 1021, 1022, 1023, 1024], "kernel_ridg": [396, 629], "linear_model": [396, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "classic": [396, 966], "glm": 396, "interfac": 396, "model_select": [396, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "naive_bay": [396, 819, 820, 821, 822, 823, 1017, 1019, 1020, 1021, 1022, 1024, 1025], "neural_network": [396, 840, 841, 842, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "random_project": [396, 876, 877, 878, 1023], "semi_supervis": [396, 879, 880, 881, 1019, 1020, 1021, 1025], "recent": 396, "low": [397, 404, 406], "mini": [397, 402], "batch": [397, 402], "assign": 397, "featureagglomer": [397, 431], "hierarchi": 397, "ad": 397, "connect": [397, 405, 1001], "consumpt": 397, "larg": [397, 405], "size": [397, 404], "reachabl": 397, "rand": 397, "index": [397, 927], "advantag": 397, "drawback": 397, "homogen": 397, "fowlk": 397, "mallow": 397, "calinski": 397, "harabasz": 397, "davi": 397, "bouldin": 397, "conting": 397, "pair": 397, "access": 398, "featureunion": [398, 843], "columntransform": [398, 450], "shrunk": 399, "oracl": 399, "plscanon": [400, 469], "plssvd": [400, 471], "plsregress": [400, 470], "held": 401, "cross_valid": [401, 807], "obtain": 401, "d": [401, 970], "loo": 401, "p": [401, 991], "lpo": 401, "shuffl": [401, 941], "stratif": 401, "stratifi": 401, "stratifiedgroupkfold": [401, 800], "predefin": [401, 967], "decompos": 402, "exact": 402, "sparsepca": [402, 529], "kpca": 402, "choic": [402, 966, 970], "truncat": 402, "semant": 402, "nnmf": 402, "frobeniu": 402, "norm": 402, "beta": 402, "diverg": 402, "addit": [404, 959], "weak": 404, "learner": 404, "rate": 404, "subsampl": 404, "hard": 404, "soft": 404, "dict": 405, "detail": [405, 959, 963, 981, 982], "tf": 405, "idf": 405, "decod": 405, "applic": [405, 1001], "corpu": 405, "selectfrommodel": [406, 583], "recoveri": 406, "biclustermixin": 412, "classnameprefixfeaturesoutmixin": 413, "classifiermixin": 414, "clustermixin": 415, "densitymixin": 416, "onetoonefeaturemixin": 417, "regressormixin": 418, "transformermixin": 419, "is_classifi": 421, "is_regressor": 422, "calibratedclassifiercv": 423, "calibrationdisplai": 424, "from_estim": [424, 617, 618, 683, 684, 686, 687, 688, 788], "calibration_curv": 425, "affinitypropag": 426, "agglomerativeclust": 427, "spectralbiclust": 437, "spectralclust": 438, "spectralcoclust": 439, "affinity_propag": 440, "cluster_optics_dbscan": 441, "cluster_optics_xi": 442, "compute_optics_graph": 443, "estimate_bandwidth": 444, "k_mean": 445, "kmeans_plusplu": 446, "mean_shift": 447, "spectral_clust": 448, "ward_tre": 449, "transformedtargetregressor": 451, "make_column_selector": 452, "make_column_transform": 453, "config_context": 454, "ellipticenvelop": 455, "empiricalcovari": 456, "graphicallasso": 457, "graphicallassocv": 458, "mincovdet": 460, "shrunkcovari": 462, "empirical_covari": 463, "graphical_lasso": 464, "ledoit_wolf": 465, "ledoit_wolf_shrinkag": 466, "shrunk_covari": 467, "clear_data_hom": 472, "dump_svmlight_fil": 473, "fetch_20newsgroup": 474, "fetch_20newsgroups_vector": 475, "fetch_california_h": 476, "fetch_covtyp": 477, "fetch_kddcup99": 478, "fetch_lfw_pair": 479, "fetch_lfw_peopl": 480, "fetch_olivetti_fac": 481, "fetch_rcv1": 483, "fetch_species_distribut": 484, "get_data_hom": 485, "load_breast_canc": 486, "load_diabet": 487, "load_digit": 488, "load_fil": 489, "load_iri": 490, "load_linnerud": 491, "load_sample_imag": [492, 493], "load_svmlight_fil": [494, 495], "load_win": 496, "make_biclust": 497, "make_checkerboard": 499, "make_circl": 500, "make_friedman1": 502, "make_friedman2": 503, "make_friedman3": 504, "make_gaussian_quantil": 505, "make_hastie_10_2": 506, "make_low_rank_matrix": 507, "make_moon": 508, "make_multilabel_classif": 509, "make_s_curv": 511, "make_sparse_coded_sign": 512, "make_sparse_spd_matrix": 513, "make_sparse_uncorrel": 514, "make_spd_matrix": 515, "make_swiss_rol": 516, "dictionarylearn": 517, "factoranalysi": 518, "incrementalpca": 520, "latentdirichletalloc": 522, "minibatchdictionarylearn": 523, "sparsecod": 528, "truncatedsvd": 530, "dict_learn": 531, "dict_learning_onlin": 532, "non_negative_factor": 533, "sparse_encod": 534, "quadraticdiscriminantanalysi": 536, "dummyclassifi": 537, "dummyregressor": 538, "adaboostclassifi": 539, "adaboostregressor": 540, "baggingclassifi": 541, "baggingregressor": 542, "extratreesclassifi": 543, "extratreesregressor": 544, "gradientboostingclassifi": 545, "gradientboostingregressor": 546, "histgradientboostingclassifi": 547, "randomforestclassifi": 550, "randomforestregressor": 551, "randomtreesembed": 552, "stackingclassifi": 553, "stackingregressor": 554, "votingregressor": 556, "convergencewarn": 557, "dataconversionwarn": 558, "datadimensionalitywarn": 559, "efficiencywarn": 560, "fitfailedwarn": 561, "inconsistentversionwarn": 562, "notfittederror": 563, "undefinedmetricwarn": 564, "enable_halving_search_cv": 565, "enable_iterative_imput": 566, "patchextractor": 569, "extract_patches_2d": 570, "grid_to_graph": 571, "img_to_graph": 572, "reconstruct_from_patches_2d": 573, "countvector": 574, "tfidftransform": 576, "genericunivariateselect": 578, "rfe": 579, "rfecv": 580, "selectfdr": 581, "selectfpr": 582, "selectfw": 584, "selectkbest": 585, "selectpercentil": 586, "selectormixin": 587, "variancethreshold": 589, "chi2": 590, "f_classif": 591, "f_regress": 592, "mutual_info_classif": 593, "mutual_info_regress": 594, "r_regress": 595, "gaussianprocessclassifi": 596, "gaussianprocessregressor": 597, "compoundkernel": 598, "constantkernel": 599, "dotproduct": 600, "expsinesquar": 601, "exponenti": 602, "matern": 605, "pairwisekernel": 606, "rationalquadrat": 609, "sum": 610, "whitekernel": 611, "get_config": 612, "knnimput": 614, "missingind": 615, "simpleimput": 616, "decisionboundarydisplai": 617, "partialdependencedisplai": 618, "partial_depend": 619, "permutation_import": 620, "isotonicregress": 621, "check_increas": 622, "isotonic_regress": 623, "additivechi2sampl": 624, "nystroem": [625, 959], "rbfsampler": 627, "skewedchi2sampl": 628, "kernelridg": 629, "ardregress": 630, "bayesianridg": 631, "elasticnetcv": 633, "gammaregressor": 634, "larscv": 637, "lassocv": 639, "lassolar": 640, "lassolarscv": 641, "lassolars": 642, "logisticregress": 644, "logisticregressioncv": 645, "multitaskelasticnet": 646, "multitaskelasticnetcv": 647, "multitasklasso": 648, "multitasklassocv": 649, "orthogonalmatchingpursuit": 650, "orthogonalmatchingpursuitcv": 651, "passiveaggressiveclassifi": 652, "passiveaggressiveregressor": 653, "poissonregressor": 655, "ransacregressor": 657, "ridgecv": 659, "ridgeclassifi": 660, "ridgeclassifiercv": 661, "sgdclassifi": 662, "sgdoneclasssvm": 663, "sgdregressor": 664, "theilsenregressor": 665, "enet_path": 667, "lars_path": 668, "lars_path_gram": 669, "lasso_path": 670, "orthogonal_mp": 671, "orthogonal_mp_gram": 672, "ridge_regress": 673, "locallylinearembed": 675, "md": [676, 964], "spectralembed": 677, "locally_linear_embed": 679, "smacof": 680, "spectral_embed": 681, "trustworthi": 682, "from_predict": [683, 686, 687, 688], "detcurvedisplai": 684, "distancemetr": 685, "predictionerrordisplai": 687, "accuracy_scor": 689, "adjusted_mutual_info_scor": 690, "adjusted_rand_scor": 691, "average_precision_scor": 693, "balanced_accuracy_scor": 694, "brier_score_loss": 695, "calinski_harabasz_scor": 696, "check_scor": 697, "class_likelihood_ratio": 698, "classification_report": 699, "contingency_matrix": 700, "pair_confusion_matrix": 701, "cohen_kappa_scor": 702, "completeness_scor": 703, "confusion_matrix": 704, "consensus_scor": 705, "coverage_error": 706, "d2_absolute_error_scor": 707, "d2_pinball_scor": 708, "d2_tweedie_scor": 709, "davies_bouldin_scor": 710, "dcg_score": 711, "det_curv": 712, "explained_variance_scor": 713, "f1_score": 714, "fbeta_scor": 715, "fowlkes_mallows_scor": 716, "get_scor": 717, "get_scorer_nam": 718, "hamming_loss": 719, "hinge_loss": 720, "homogeneity_completeness_v_measur": 721, "homogeneity_scor": 722, "jaccard_scor": 723, "label_ranking_average_precision_scor": 724, "label_ranking_loss": 725, "log_loss": 726, "make_scor": 727, "matthews_corrcoef": 728, "max_error": 729, "mean_absolute_error": 730, "mean_absolute_percentage_error": 731, "mean_gamma_devi": 732, "mean_pinball_loss": 733, "mean_poisson_devi": 734, "mean_squared_error": 735, "mean_squared_log_error": 736, "mean_tweedie_devi": 737, "median_absolute_error": 738, "multilabel_confusion_matrix": 739, "mutual_info_scor": 740, "ndcg_score": 741, "normalized_mutual_info_scor": 742, "additive_chi2_kernel": 743, "chi2_kernel": 744, "cosine_dist": 745, "cosine_similar": 746, "distance_metr": 747, "euclidean_dist": 748, "haversine_dist": 749, "kernel_metr": 750, "laplacian_kernel": 751, "linear_kernel": 752, "manhattan_dist": 753, "nan_euclidean_dist": 754, "paired_cosine_dist": 755, "paired_dist": 756, "paired_euclidean_dist": 757, "paired_manhattan_dist": 758, "pairwise_kernel": 759, "polynomial_kernel": 760, "rbf_kernel": 761, "sigmoid_kernel": 762, "pairwise_dist": 763, "pairwise_distances_argmin": 764, "pairwise_distances_argmin_min": 765, "pairwise_distances_chunk": 766, "precision_recall_curv": 767, "precision_recall_fscore_support": 768, "precision_scor": 769, "r2_score": 770, "rand_scor": 771, "recall_scor": 772, "roc_auc_scor": 773, "roc_curv": 774, "silhouette_sampl": 775, "silhouette_scor": 776, "top_k_accuracy_scor": 777, "v_measure_scor": 778, "zero_one_loss": 779, "bayesiangaussianmixtur": [780, 966], "gaussianmixtur": [781, 966], "groupkfold": 783, "groupshufflesplit": 784, "halvinggridsearchcv": 785, "halvingrandomsearchcv": 786, "kfold": 787, "learningcurvedisplai": 788, "leaveonegroupout": 789, "leaveoneout": 790, "leavepgroupsout": 791, "leavepout": 792, "parametergrid": 793, "parametersampl": 794, "predefinedsplit": 795, "randomizedsearchcv": 796, "repeatedkfold": 797, "repeatedstratifiedkfold": 798, "shufflesplit": 799, "stratifiedkfold": 801, "stratifiedshufflesplit": 802, "timeseriessplit": 803, "check_cv": 804, "cross_val_predict": 805, "learning_curv": 808, "permutation_test_scor": 809, "train_test_split": 810, "validation_curv": 811, "onevsoneclassifi": [812, 968], "onevsrestclassifi": [813, 968], "outputcodeclassifi": [814, 968], "classifierchain": [815, 968], "multioutputclassifi": [816, 968], "multioutputregressor": [817, 968], "regressorchain": [818, 968], "bernoullinb": 819, "categoricalnb": 820, "complementnb": 821, "gaussiannb": 822, "multinomialnb": 823, "balltre": [824, 970], "kdtree": [825, 970], "kneighborsclassifi": 826, "kneighborsregressor": 827, "kneighborstransform": 828, "kerneldens": 829, "localoutlierfactor": 830, "nearestcentroid": 831, "nearestneighbor": 832, "neighborhoodcomponentsanalysi": 833, "radiusneighborsclassifi": 834, "radiusneighborsregressor": 835, "radiusneighborstransform": 836, "kneighbors_graph": 837, "radius_neighbors_graph": 838, "sort_graph_by_row_valu": 839, "bernoullirbm": 840, "mlpregressor": 842, "make_pipelin": 845, "make_union": 846, "binar": [847, 867, 977, 978], "functiontransform": 848, "kernelcenter": 850, "labelbinar": [851, 978], "labelencod": 852, "multilabelbinar": [855, 978], "ordinalencod": 858, "polynomialfeatur": 859, "splinetransform": 863, "targetencod": 865, "add_dummy_featur": 866, "label_binar": 868, "maxabs_scal": 869, "minmax_scal": 870, "power_transform": 872, "quantile_transform": 873, "robust_scal": 874, "gaussianrandomproject": 876, "sparserandomproject": 877, "johnson_lindenstrauss_min_dim": 878, "labelpropag": 879, "labelspread": 880, "selftrainingclassifi": 881, "set_config": 882, "show_vers": 883, "linearsvr": [885, 982], "nusvc": [886, 982], "nusvr": 887, "oneclasssvm": 888, "l1_min_c": 891, "decisiontreeclassifi": 892, "extratreeclassifi": 894, "extratreeregressor": 895, "export_graphviz": 896, "export_text": 897, "plot_tre": 898, "_safe_index": 900, "arrayfunc": 901, "min_po": 901, "as_float_arrai": 902, "assert_all_finit": 903, "check_x_i": 904, "check_arrai": 905, "check_consistent_length": 906, "check_random_st": 907, "check_scalar": 908, "class_weight": [909, 910], "compute_class_weight": 909, "compute_sample_weight": 910, "discoveri": [912, 913, 914], "all_displai": 912, "all_estim": 913, "all_funct": 914, "estimator_check": [915, 916], "check_estim": 915, "parametrize_with_check": 916, "estimator_html_repr": 917, "extmath": [918, 919, 920, 921, 922, 923], "fast_logdet": 919, "randomized_range_find": 920, "randomized_svd": 921, "safe_sparse_dot": 922, "weighted_mod": 923, "gen_batch": 924, "gen_even_slic": 925, "single_source_shortest_path_length": 926, "metaestim": 928, "available_if": 928, "is_multilabel": 929, "type_of_target": 930, "unique_label": 931, "murmurhash3_32": 932, "delai": 934, "parallel_backend": 935, "sample_without_replac": 936, "register_parallel_backend": 937, "resampl": 938, "safe_mask": 939, "safe_sqr": 940, "sparsefunc": [942, 943, 944, 945, 946, 947, 948, 1018], "incr_mean_variance_axi": 942, "inplace_column_scal": 943, "inplace_csr_column_scal": 944, "inplace_row_scal": 945, "inplace_swap_column": 946, "inplace_swap_row": 947, "mean_variance_axi": 948, "sparsefuncs_fast": [949, 950], "inplace_csr_row_normalize_l1": 949, "inplace_csr_row_normalize_l2": 950, "check_is_fit": 951, "check_memori": 952, "check_symmetr": 953, "column_or_1d": 954, "has_fit_paramet": 955, "exhaust": 956, "min_resourc": 956, "aggress": [956, 963], "analyz": 956, "cv_results_": 956, "brute": [956, 970], "forc": [956, 970], "keep": 957, "mark": 957, "nan": 957, "chi": [959, 965], "skew": 959, "tensor": 959, "sketch": 959, "qda": 961, "omp": 963, "liblinear": 963, "passiv": 963, "scenario": 963, "trade": 963, "off": 963, "which": 963, "consensu": 963, "median": [963, 967], "huber": 963, "extend": 963, "introduct": [964, 993], "modifi": 964, "hessian": 964, "eigenmap": 964, "tangent": 964, "align": 964, "nonmetr": 964, "barn": 964, "hut": 964, "cosin": 965, "laplacian": 965, "pro": 966, "con": 966, "maxim": 966, "rule": 967, "cohen": 967, "kappa": 967, "ham": 967, "jaccard": 967, "hing": 967, "matthew": 967, "zero": 967, "brier": 967, "discount": 967, "cumul": 967, "gain": 967, "r\u00b2": 967, "absolut": 967, "logarithm": 967, "percentag": 967, "explain": 967, "pinbal": 967, "d\u00b2": 967, "complement": 969, "bernoulli": [969, 972], "unsupervis": [970, 972, 984, 1001, 1003], "find": 970, "ball": 970, "leaf_siz": 970, "shrunken": 970, "warm_start": 971, "parametr": 972, "up": 973, "ellipt": 973, "envelop": 973, "isol": 973, "outlin": 975, "mislead": 975, "strongli": 975, "rang": 977, "whiten": 977, "bin": 977, "lemma": 979, "unlabel": 980, "entri": 980, "id3": 983, "c4": 983, "5": [983, 1009], "c5": 983, "cart": 983, "welcom": 985, "talk": 986, "scientif": [986, 996], "framework": 987, "domain": 987, "translat": 987, "roadmap": 988, "thi": 988, "statement": 988, "2018": 988, "architectur": 988, "goal": 988, "subpackag": 988, "mail": 990, "user": [990, 1004], "gitter": 990, "who": 991, "j": 991, "morgan": 991, "spotifi": 991, "inria": 991, "betawork": 991, "hug": 991, "evernot": 991, "t\u00e9l\u00e9com": 991, "paristech": 991, "book": 991, "com": 991, "aweb": 991, "yhat": 991, "rangespan": 991, "birchbox": 991, "bestofmedia": 991, "phimeca": 991, "howaboutw": 991, "peerindex": 991, "datarobot": 991, "okcupid": 991, "love": 991, "publica": 991, "machinali": 991, "solido": 991, "infonea": 991, "dataiku": 991, "otto": 991, "zopa": 991, "mar": 991, "bnp": 991, "pariba": 991, "cardif": 991, "section": 993, "cast": 993, "updat": [993, 1019], "right": 995, "put": 998, "open": 998, "ship": 999, "would": 999, "high": 1000, "solv": [1000, 1001], "vocabulari": 1000, "curs": 1000, "iris": 1000, "same": 1000, "seek": 1001, "constrain": 1001, "inverse_transform": 1001, "setup": 1002, "token": 1002, "occurr": 1002, "languag": 1002, "identif": 1002, "sentiment": 1002, "movi": 1002, "cli": 1002, "where": 1002, "here": 1002, "12": 1009, "changelog": [1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "11": 1009, "9": 1009, "8": 1009, "7": 1009, "6": [1009, 1015], "modul": [1009, 1017, 1018, 1024, 1025], "misc": 1009, "4": [1009, 1017], "earlier": 1009, "13": 1010, "14": 1011, "15": 1012, "16": 1013, "17": 1014, "18": 1015, "last": 1015, "19": 1016, "21": 1018, "legend": [1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "post1": 1019, "websit": 1019, "clear": 1019, "public": 1019, "futurewarn": 1019, "enforc": [1020, 1022]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1009, "authors"], [1009, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [386, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [165, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [109, "concluding-remarks"], [223, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [25, "references"], [27, "references"], [81, "references"], [113, "references"], [174, "references"], [182, "references"], [186, null], [258, null], [291, "references"], [367, null], [367, null], [367, null], [369, null], [369, null], [369, null], [369, null], [369, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [405, null], [407, "references"], [957, "references"], [957, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [974, null], [977, null], [977, null], [980, null], [980, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [50, "load-the-data"], [124, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [187, "conclusion"], [307, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [49, "plot-results"], [78, "plot-results"], [96, "plot-results"], [97, "plot-results"], [116, "plot-results"], [285, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [358, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [330, "visualization"], [396, "visualization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[15, "computation-times"], [22, "computation-times"], [28, "computation-times"], [35, "computation-times"], [68, "computation-times"], [76, "computation-times"], [83, "computation-times"], [87, "computation-times"], [93, "computation-times"], [107, "computation-times"], [134, "computation-times"], [140, "computation-times"], [148, "computation-times"], [160, "computation-times"], [164, "computation-times"], [172, "computation-times"], [175, "computation-times"], [217, "computation-times"], [225, "computation-times"], [241, "computation-times"], [250, "computation-times"], [274, "computation-times"], [277, "computation-times"], [292, "computation-times"], [298, "computation-times"], [308, "computation-times"], [316, "computation-times"], [324, "computation-times"], [341, "computation-times"], [346, "computation-times"], [353, "computation-times"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Biclustering": [[18, "biclustering"], [165, "biclustering"], [368, "biclustering"], [394, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[23, "calibration"], [165, "calibration"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [177, "generate-synthetic-dataset"], [177, "id1"], [182, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Dataset": [[25, "dataset"], [27, "dataset"], [187, "dataset"], [264, "dataset"]], "Calibration curves": [[25, "calibration-curves"], [27, "calibration-curves"], [395, "calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [969, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [345, "summary"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Classification": [[29, "classification"], [32, "classification"], [158, "classification"], [165, "classification"], [404, "classification"], [404, "id18"], [963, "classification"], [970, "id4"], [971, "classification"], [981, "classification"], [982, "classification"], [983, "classification"], [1000, "classification"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Classifier comparison": [[31, "classifier-comparison"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[34, "colormap"]], "Datasets generation functions": [[34, "datasets-generation-functions"]], "Plot functions": [[34, "plot-functions"]], "Plot": [[34, "plot"]], "Clustering": [[36, "clustering"], [165, "clustering"], [397, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Generate sample data": [[38, "generate-sample-data"], [55, "generate-sample-data"], [63, "generate-sample-data"], [78, "generate-sample-data"], [96, "generate-sample-data"], [97, "generate-sample-data"], [143, "generate-sample-data"], [233, "generate-sample-data"], [271, "generate-sample-data"], [290, "generate-sample-data"], [337, "generate-sample-data"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "Plot result": [[38, "plot-result"], [63, "plot-result"], [67, "plot-result"], [67, "id2"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[45, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[47, "generate-data"], [67, "generate-data"], [80, "generate-data"], [192, "generate-data"], [297, "generate-data"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Compute clustering": [[47, "compute-clustering"], [67, "compute-clustering"], [67, "id1"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Data generation": [[49, "data-generation"], [57, "data-generation"], [126, "data-generation"], [146, "data-generation"], [156, "data-generation"], [248, "data-generation"], [318, "data-generation"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Plot the results": [[50, "plot-the-results"], [82, "plot-the-results"], [133, "plot-the-results"], [163, "plot-the-results"]], "Feature agglomeration": [[51, "feature-agglomeration"], [984, "feature-agglomeration"], [1001, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Original image": [[53, "original-image"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Encoding strategy": [[53, "encoding-strategy"]], "Memory footprint": [[53, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[55, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[55, "scale-invariance"]], "Multi-Scale Clustering": [[55, "multi-scale-clustering"]], "Hyperparameter Robustness": [[55, "hyperparameter-robustness"]], "min_cluster_size": [[55, "min-cluster-size"]], "min_samples": [[55, "min-samples"]], "dbscan_clustering": [[55, "dbscan-clustering"]], "Inductive Clustering": [[56, "inductive-clustering"]], "Demonstration of k-means assumptions": [[57, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[57, "fit-models-and-plot-results"]], "Possible solutions": [[57, "possible-solutions"]], "Final remarks": [[57, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[58, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[58, "load-the-dataset"]], "Define our evaluation benchmark": [[58, "define-our-evaluation-benchmark"]], "Run the benchmark": [[58, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[58, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[59, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[60, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[61, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[62, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[63, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[63, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[64, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[64, "generate-the-data"], [66, "generate-the-data"], [82, "generate-the-data"]], "Compute clustering with KMeans": [[64, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[64, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[64, "establishing-parity-between-clusters"]], "Plotting the results": [[64, "plotting-the-results"], [109, "plotting-the-results"], [111, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[65, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[66, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[66, "plotting-four-circles"]], "Plotting two circles": [[66, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[67, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[67, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[69, "pipelines-and-composite-estimators"], [165, "pipelines-and-composite-estimators"], [398, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[70, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[70, "newsgroups-dataset"]], "Creating transformers": [[70, "creating-transformers"]], "Classification pipeline": [[70, "classification-pipeline"]], "Column Transformer with Mixed Types": [[71, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[72, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[72, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[72, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[73, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[74, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[75, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[75, "synthetic-example"]], "Real-world data set": [[75, "real-world-data-set"]], "Covariance estimation": [[77, "covariance-estimation"], [165, "covariance-estimation"], [399, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[78, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[78, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[78, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[79, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[80, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[80, null], [170, null], [263, null], [264, null], [366, null], [367, null], [394, null], [394, null], [394, null], [395, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [399, null], [399, null], [399, null], [399, null], [401, null], [401, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [405, null], [406, null], [956, null], [956, null], [959, null], [960, null], [961, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [964, null], [964, null], [964, null], [964, null], [964, null], [964, null], [964, null], [964, null], [965, null], [965, null], [967, null], [967, null], [967, null], [967, null], [967, null], [967, null], [967, null], [967, null], [968, null], [968, null], [968, null], [969, null], [969, null], [969, null], [970, null], [970, null], [970, null], [971, null], [972, null], [973, null], [973, null], [973, null], [973, null], [975, null], [977, null], [977, null], [979, null], [979, null], [979, null], [981, null], [981, null], [982, null], [983, null], [983, null]], "Comparison of results": [[80, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[81, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[81, "minimum-covariance-determinant-estimator"]], "Evaluation": [[81, "evaluation"], [297, "evaluation"]], "Sparse inverse covariance estimation": [[82, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[82, "estimate-the-covariance"]], "Cross decomposition": [[84, "cross-decomposition"], [165, "cross-decomposition"], [400, "cross-decomposition"]], "Compare cross decomposition methods": [[85, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[85, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[85, "canonical-symmetric-pls"]], "Transform data": [[85, "transform-data"]], "Scatter plot of scores": [[85, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[85, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[85, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[85, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[86, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[86, "the-data"]], "Projection on one component and predictive power": [[86, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[88, "dataset-examples"], [165, "dataset-examples"]], "The Digit Dataset": [[89, "the-digit-dataset"]], "The Iris Dataset": [[90, "the-iris-dataset"]], "Plot randomly generated classification dataset": [[91, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[92, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[94, "decomposition"], [95, "decomposition"], [165, "decomposition"]], "Faces dataset decompositions": [[95, "faces-dataset-decompositions"]], "Dataset preparation": [[95, "dataset-preparation"], [219, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[95, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[95, "non-negative-components-nmf"]], "Independent components - FastICA": [[95, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[95, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[95, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[95, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[95, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[95, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[95, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[95, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[95, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[96, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[96, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[97, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[98, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[98, "generate-distorted-image"]], "Display the distorted image": [[98, "display-the-distorted-image"]], "Extract reference patches": [[98, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[98, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[98, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[99, "incremental-pca"], [402, "incremental-pca"]], "Kernel PCA": [[100, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[100, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[100, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[101, "principal-components-analysis-pca"]], "Create the data": [[101, "create-the-data"], [103, "create-the-data"]], "Plot the figures": [[101, "plot-the-figures"]], "PCA example with Iris Data-set": [[102, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[103, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[103, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[104, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[105, "sparse-coding-with-a-precomputed-dictionary"], [402, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[106, "factor-analysis-with-rotation-to-visualize-patterns"]], "Ensemble methods": [[108, "ensemble-methods"], [165, "ensemble-methods"], [404, "ensemble-methods"]], "Discrete versus Real AdaBoost": [[109, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[109, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[109, "adaboost-with-discrete-samme-and-real-samme-r"]], "Multi-class AdaBoosted Decision Trees": [[110, "multi-class-adaboosted-decision-trees"]], "Decision Tree Regression with AdaBoost": [[111, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[111, "preparing-the-data"], [174, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[111, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[112, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[113, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[114, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[115, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[116, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[116, "load-dataset"]], "Compute score and computation times": [[116, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[117, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[117, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[117, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[117, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[118, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[118, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[118, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[119, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[120, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[120, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[120, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[120, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[120, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[120, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[120, "model-comparison"]], "Limiting the number of splits": [[120, "limiting-the-number-of-splits"]], "Early stopping of Gradient Boosting": [[121, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[121, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[121, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[122, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[123, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[123, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[123, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[123, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[123, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[124, "gradient-boosting-regression"]], "Data preprocessing": [[124, "data-preprocessing"]], "Fit regression model": [[124, "fit-regression-model"], [290, "fit-regression-model"], [337, "fit-regression-model"]], "Plot training deviance": [[124, "plot-training-deviance"]], "Plot feature importance": [[124, "plot-feature-importance"]], "Gradient Boosting regularization": [[125, "gradient-boosting-regularization"]], "IsolationForest example": [[126, "isolationforest-example"]], "Training of the model": [[126, "training-of-the-model"]], "Plot discrete decision boundary": [[126, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[126, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[127, "monotonic-constraints"], [404, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[127, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[128, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[129, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[130, "combine-predictors-using-stacking"]], "Download the dataset": [[130, "download-the-dataset"]], "Make pipeline to preprocess the data": [[130, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[130, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[130, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[131, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[132, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[133, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[133, "training-classifiers"]], "Making predictions": [[133, "making-predictions"]], "Tutorial exercises": [[135, "tutorial-exercises"], [165, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[136, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[136, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[136, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[136, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[137, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[138, "digits-classification-exercise"]], "SVM Exercise": [[139, "svm-exercise"]], "Feature Selection": [[141, "feature-selection"], [165, "feature-selection"]], "Comparison of F-test and mutual information": [[142, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[143, "univariate-feature-selection"]], "Univariate feature selection": [[143, "id1"], [406, "univariate-feature-selection"]], "Compare with SVMs": [[143, "compare-with-svms"]], "Pipeline ANOVA SVM": [[144, "pipeline-anova-svm"]], "Recursive feature elimination": [[145, "recursive-feature-elimination"], [406, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[146, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[146, "model-training-and-selection"], [248, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[146, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[147, "model-based-and-sequential-feature-selection"]], "Loading the data": [[147, "loading-the-data"]], "Feature importance from coefficients": [[147, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[147, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[147, "selecting-features-with-sequential-feature-selection"]], "Discussion": [[147, "discussion"]], "Gaussian Process for Machine Learning": [[149, "gaussian-process-for-machine-learning"], [165, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[150, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[150, "generating-a-dataset"]], "Limitations of a simple linear model": [[150, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[150, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[150, "kernel-ridge"]], "Gaussian process regression": [[150, "gaussian-process-regression"]], "Final conclusion": [[150, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[151, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[152, "gaussian-process-classification-gpc-on-iris-dataset"], [407, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[153, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[154, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[155, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[155, "build-the-dataset"]], "Design the proper kernel": [[155, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[155, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[155, "interpretation-of-kernel-hyperparameters"]], "Gaussian process regression (GPR) with noise-level estimation": [[156, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[156, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[157, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[157, "dataset-generation"], [200, "dataset-generation"]], "Example with noise-free target": [[157, "example-with-noise-free-target"]], "Example with noisy targets": [[157, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[158, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[158, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[158, "regression"], [404, "regression"], [404, "id17"], [963, "regression"], [971, "regression"], [981, "regression"], [982, "regression"], [983, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[159, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[159, "helper-function"]], "Dataset and Gaussian process generation": [[159, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[159, "kernel-cookbook"]], "Radial Basis Function kernel": [[159, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[159, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[159, "exp-sine-squared-kernel"], [407, "exp-sine-squared-kernel"]], "Dot-product kernel": [[159, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[159, "matern-kernel"], [407, "matern-kernel"]], "Missing Value Imputation": [[161, "missing-value-imputation"], [165, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[162, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[163, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[163, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[163, "impute-the-missing-data-and-score"]], "Missing information": [[163, "missing-information"]], "Estimate the score": [[163, "estimate-the-score"]], "Replace missing values by 0": [[163, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[163, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[163, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[163, "iterative-imputation-of-the-missing-values"]], "Examples": [[165, "examples"], [360, "examples"], [367, null], [367, "examples"], [401, null], [401, null], [406, null], [406, null], [980, null], [980, null], [984, null], [984, null], [984, null], [1009, "examples"]], "Release Highlights": [[165, "release-highlights"], [309, "release-highlights"]], "Decision Trees": [[165, "decision-trees"], [347, "decision-trees"], [983, "decision-trees"]], "Gaussian Mixture Models": [[165, "gaussian-mixture-models"], [242, "gaussian-mixture-models"]], "Generalized Linear Models": [[165, "generalized-linear-models"], [176, "generalized-linear-models"], [963, "generalized-linear-models"]], "Inspection": [[165, "inspection"], [166, "inspection"], [387, "inspection"]], "Kernel Approximation": [[165, "kernel-approximation"], [173, "kernel-approximation"], [959, "kernel-approximation"]], "Manifold learning": [[165, "manifold-learning"], [218, "manifold-learning"], [964, "manifold-learning"]], "Miscellaneous": [[165, "miscellaneous"], [226, "miscellaneous"], [396, "miscellaneous"], [1017, "miscellaneous"], [1017, "id40"], [1018, "miscellaneous"], [1019, "miscellaneous"], [1020, "miscellaneous"], [1020, "id13"], [1021, "miscellaneous"], [1022, "miscellaneous"]], "Model Selection": [[165, "model-selection"], [251, "model-selection"]], "Multioutput methods": [[165, "multioutput-methods"], [275, "multioutput-methods"]], "Nearest Neighbors": [[165, "nearest-neighbors"], [279, "nearest-neighbors"], [970, "nearest-neighbors"]], "Neural Networks": [[165, "neural-networks"], [293, "neural-networks"]], "Preprocessing": [[165, "preprocessing"], [299, "preprocessing"]], "Semi Supervised Classification": [[165, "semi-supervised-classification"], [317, "semi-supervised-classification"]], "Support Vector Machines": [[165, "support-vector-machines"], [325, "support-vector-machines"], [982, "support-vector-machines"]], "Working with text documents": [[165, "working-with-text-documents"], [342, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[167, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[167, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[167, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[167, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[167, "income-prediction-with-partial-observations"]], "Lessons learned": [[167, "lessons-learned"], [168, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[168, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[168, "the-dataset-wages"]], "The machine-learning pipeline": [[168, "the-machine-learning-pipeline"]], "Processing the dataset": [[168, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[168, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[168, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[168, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[168, "preprocessing-numerical-variables"]], "Linear models with regularization": [[168, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[168, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[168, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[169, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[169, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[169, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[169, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[169, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[169, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[169, "multi-layer-perceptron"]], "Gradient boosting": [[169, "gradient-boosting"]], "Analysis of the plots": [[169, "analysis-of-the-plots"]], "ICE vs. PDP": [[169, "ice-vs-pdp"]], "2D interaction plots": [[169, "d-interaction-plots"]], "3D representation": [[169, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[170, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[170, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[170, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[170, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[171, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[171, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[171, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[174, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[174, "partitioning-the-data"]], "Feature normalization": [[174, "feature-normalization"]], "Establishing a baseline model": [[174, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[174, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[174, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[174, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[177, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[177, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[177, "fit-the-regressors"], [177, "id2"]], "Plot the true and estimated coefficients": [[177, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[177, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[177, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[177, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[178, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[178, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[178, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[178, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[179, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[180, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[181, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[182, "l1-based-models-for-sparse-signals"]], "Lasso": [[182, "lasso"], [963, "lasso"]], "Automatic Relevance Determination (ARD)": [[182, "automatic-relevance-determination-ard"]], "ElasticNet": [[182, "elasticnet"]], "Plot and analysis of the results": [[182, "plot-and-analysis-of-the-results"]], "Conclusions": [[182, "conclusions"]], "Lasso and Elastic Net": [[183, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[184, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[184, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[184, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[185, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[186, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[187, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[187, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[187, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[187, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[187, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[187, "summary-of-cross-validation-approach"]], "Logistic function": [[188, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[189, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[190, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[191, "regularization-path-of-l1-logistic-regression"]], "Load data": [[191, "load-data"]], "Compute regularization path": [[191, "compute-regularization-path"]], "Plot regularization path": [[191, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[192, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[192, "fit-models"]], "Plot support and time series": [[192, "plot-support-and-time-series"]], "Non-negative least squares": [[193, "non-negative-least-squares"]], "Linear Regression Example": [[194, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[195, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[196, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[197, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[198, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[198, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[198, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[198, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[198, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[198, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[198, "evaluation-of-the-ranking-power"]], "Main takeaways": [[198, "main-takeaways"]], "Polynomial and Spline interpolation": [[199, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[199, "periodic-splines"]], "Quantile regression": [[200, "quantile-regression"]], "Fitting a QuantileRegressor": [[200, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[200, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[201, "robust-linear-model-estimation-using-ransac"]], "Plot Ridge coefficients as a function of the L2 regularization": [[202, "plot-ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Plot Ridge coefficients as a function of the regularization": [[203, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[203, "compute-paths"]], "Display results": [[203, "display-results"]], "Robust linear estimator fitting": [[204, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[205, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[206, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[207, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[208, "sgd-convex-loss-functions"]], "SGD: Penalties": [[209, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[210, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[211, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[212, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[213, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[214, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[215, "theil-sen-regression"]], "Outliers only in the y direction": [[215, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[215, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[216, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[216, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[216, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[216, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[216, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[219, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[219, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[219, "locally-linear-embeddings"]], "Isomap Embedding": [[219, "isomap-embedding"]], "Multidimensional scaling": [[219, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[219, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[219, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[220, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[220, "load-digits-dataset"]], "Helper function to plot embedding": [[220, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[220, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[221, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[222, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[223, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[223, "swiss-roll"]], "Swiss-Hole": [[223, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[224, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[227, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[228, "visualizations-with-display-objects"]], "Load Data and train model": [[228, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[228, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[228, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[228, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[228, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[229, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[229, "compact-text-representation"]], "Rich HTML representation": [[229, "rich-html-representation"]], "Isotonic Regression": [[230, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[231, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[231, "theoretical-bounds"]], "Empirical validation": [[231, "empirical-validation"]], "Remarks": [[231, "remarks"]], "Explicit feature map approximation for RBF kernels": [[232, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[232, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[232, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[232, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[233, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[233, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[233, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[233, "look-at-the-results"], [337, "look-at-the-results"]], "Visualize training and prediction times": [[233, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[233, "visualize-the-learning-curves"]], "Multilabel classification": [[234, "multilabel-classification"], [968, "multilabel-classification"]], "Face completion with a multi-output estimators": [[235, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[236, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[236, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[236, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[236, "plot-and-interpret-results"]], "Advanced Plotting With Partial Dependence": [[237, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[237, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[237, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[237, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[237, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[238, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[238, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[238, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[238, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[238, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[238, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[239, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[239, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[239, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[239, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[240, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[243, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[244, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[245, "gmm-covariances"]], "GMM Initialization Methods": [[246, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[247, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[248, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[248, "plot-the-bic-scores"]], "Plot the best model": [[248, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[249, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[252, "confusion-matrix"], [967, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[253, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[253, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[253, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[253, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[254, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[255, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[255, "generate-synthetic-data"]], "Define the classifiers": [[255, "define-the-classifiers"]], "Plot ROC and DET curves": [[255, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[256, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[256, "the-dataset"]], "Define our grid-search strategy": [[256, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[256, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[257, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[258, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[258, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[258, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[258, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[258, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[258, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[258, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[259, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[259, "data-loading"]], "Pipeline with hyperparameter tuning": [[259, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[260, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[260, "learning-curve"]], "Complexity analysis": [[260, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[261, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[261, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[261, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[261, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[262, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[262, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[262, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[263, "nested-versus-non-nested-cross-validation"]], "See Also:": [[263, null], [398, null]], "Test with permutations the significance of a classification score": [[264, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[264, "permutation-test-score"], [401, "permutation-test-score"]], "Original data": [[264, "original-data"], [300, "original-data"]], "Random data": [[264, "random-data"]], "Precision-Recall": [[265, "precision-recall"]], "In binary classification settings": [[265, "in-binary-classification-settings"]], "Dataset and model": [[265, "dataset-and-model"]], "Plot the Precision-Recall curve": [[265, "plot-the-precision-recall-curve"]], "In multi-label settings": [[265, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[265, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[265, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[265, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[265, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[266, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[267, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[267, "load-and-prepare-data"], [268, "load-and-prepare-data"], [305, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[267, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[267, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[267, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[267, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[267, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[267, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[267, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[267, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[268, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[268, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[269, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[270, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[270, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[271, "train-error-vs-test-error"]], "Compute train and test errors": [[271, "compute-train-and-test-errors"]], "Plot results functions": [[271, "plot-results-functions"]], "Underfitting vs. Overfitting": [[272, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[273, "plotting-validation-curves"]], "Classifier Chain": [[276, "classifier-chain"]], "Approximate nearest neighbors in TSNE": [[278, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[280, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[281, "nearest-neighbors-classification"], [970, "nearest-neighbors-classification"]], "Kernel Density Estimation": [[282, "kernel-density-estimation"], [403, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[283, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[284, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[285, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[285, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[285, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[286, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[287, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[288, "neighborhood-components-analysis-illustration"]], "Original points": [[288, "original-points"]], "Learning an embedding": [[288, "learning-an-embedding"]], "Nearest Centroid Classification": [[289, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[290, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[291, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[294, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[295, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[296, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[297, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[297, "models-definition"]], "Training": [[297, "training"], [970, "training"]], "Plotting": [[297, "plotting"], [396, "plotting"], [396, "id7"], [396, "id9"]], "Compare the effect of different scalers on data with outliers": [[300, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[300, "standardscaler"]], "MinMaxScaler": [[300, "minmaxscaler"]], "MaxAbsScaler": [[300, "maxabsscaler"]], "RobustScaler": [[300, "robustscaler"]], "PowerTransformer": [[300, "powertransformer"]], "QuantileTransformer (uniform output)": [[300, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[300, "quantiletransformer-gaussian-output"]], "Normalizer": [[300, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[301, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[302, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[303, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[304, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[305, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[305, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[305, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[305, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[306, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[306, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[306, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[306, "native-categorical-feature-support"]], "Plotting the Results": [[306, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross Validation": [[307, "target-encoder-s-internal-cross-validation"]], "Create Synthetic Dataset": [[307, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[307, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[310, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[310, "new-plotting-api"]], "Stacking Classifier and Regressor": [[310, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[310, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[310, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[310, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[310, "knn-based-imputation"]], "Tree pruning": [[310, "tree-pruning"]], "Retrieve dataframes from OpenML": [[310, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[310, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[310, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[311, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[311, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[311, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[311, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[311, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[311, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[312, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[312, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[312, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[312, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[312, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[312, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[312, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[312, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[312, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[312, "new-documentation-improvements"], [313, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[313, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[313, "keyword-and-positional-arguments"]], "Spline Transformers": [[313, "spline-transformers"]], "Quantile Regressor": [[313, "quantile-regressor"]], "Feature Names Support": [[313, "feature-names-support"]], "A more flexible plotting API": [[313, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[313, "online-one-class-svm"], [981, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[313, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[314, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[314, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[314, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[314, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[314, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[314, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[314, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[315, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[315, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[315, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[315, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[315, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[315, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[315, "improved-efficiency-of-many-estimators"]], "Label Propagation digits: Demonstrating performance": [[318, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[318, "semi-supervised-learning"], [980, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[318, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[319, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[320, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[321, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[322, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[323, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[326, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[327, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[328, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[329, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[330, "rbf-svm-parameters"]], "Load and prepare data set": [[330, "load-and-prepare-data-set"]], "Train classifiers": [[330, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[331, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[332, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[333, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[333, "load-some-data-to-play-with"]], "Create the pipeline": [[333, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[333, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "SVM-Kernels": [[334, "svm-kernels"]], "SVM Margins Example": [[335, "svm-margins-example"]], "Non-linear SVM": [[336, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[337, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[338, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[338, "l1-penalty-case"]], "L2-penalty case": [[338, "l2-penalty-case"]], "SVM Tie Breaking Example": [[339, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[340, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[343, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[343, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[343, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[343, "model-without-metadata-stripping"]], "Model with metadata stripping": [[343, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[343, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[343, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[344, "clustering-text-documents-using-k-means"]], "Loading text data": [[344, "loading-text-data"]], "Quantifying the quality of clustering results": [[344, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[344, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[344, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[344, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[344, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[344, "top-terms-per-cluster"]], "HashingVectorizer": [[344, "hashingvectorizer"]], "Clustering evaluation summary": [[344, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[345, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[345, "load-data"]], "Define preprocessing functions": [[345, "define-preprocessing-functions"]], "DictVectorizer": [[345, "dictvectorizer"]], "FeatureHasher": [[345, "featurehasher"]], "Comparison with special purpose text vectorizers": [[345, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[345, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[348, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[348, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[348, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[349, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[350, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[351, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[352, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[352, "train-tree-classifier"]], "Tree structure": [[352, "tree-structure"]], "Decision path": [[352, "decision-path"]], "Common pitfalls and recommended practices": [[354, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[354, "inconsistent-preprocessing"]], "Data leakage": [[354, "data-leakage"]], "Data leakage during pre-processing": [[354, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[354, "how-to-avoid-data-leakage"]], "Controlling randomness": [[354, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[354, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Estimators": [[354, "estimators"], [354, "id2"], [374, "estimators"], [396, "estimators"]], "CV splitters": [[354, "cv-splitters"], [354, "id3"]], "Common pitfalls and subtleties": [[354, "common-pitfalls-and-subtleties"]], "General recommendations": [[354, "general-recommendations"]], "Getting reproducible results across multiple executions": [[354, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[354, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[357, "computing-with-scikit-learn"]], "Computational Performance": [[358, "computational-performance"]], "Bulk versus Atomic mode": [[358, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[358, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[358, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[358, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[358, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[358, "feature-extraction-latency"]], "Prediction Throughput": [[358, "prediction-throughput"]], "Tips and Tricks": [[358, "tips-and-tricks"]], "Linear algebra libraries": [[358, "linear-algebra-libraries"]], "Limiting Working Memory": [[358, "limiting-working-memory"]], "Model Compression": [[358, "model-compression"]], "Model Reshaping": [[358, "model-reshaping"]], "Links": [[358, "links"]], "Parallelism, resource management, and configuration": [[359, "parallelism-resource-management-and-configuration"]], "Parallelism": [[359, "parallelism"], [956, "parallelism"]], "Higher-level parallelism with joblib": [[359, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[359, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[359, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[359, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[359, "configuration-switches"]], "Python API": [[359, "python-api"]], "Environment variables": [[359, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[359, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[359, "sklearn-working-memory"]], "SKLEARN_SEED": [[359, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[359, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[359, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[359, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[359, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[359, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[359, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[360, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[360, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[360, "streaming-instances"]], "Extracting features": [[360, "extracting-features"]], "Incremental learning": [[360, "incremental-learning"]], "Notes": [[360, "notes"], [398, "notes"], [963, "notes"]], "Table Of Contents": [[361, "table-of-contents"]], "Dataset transformations": [[364, "dataset-transformations"]], "Dataset loading utilities": [[365, "dataset-loading-utilities"], [377, "dataset-loading-utilities"]], "Loading other datasets": [[366, "loading-other-datasets"]], "Sample images": [[366, "sample-images"]], "Examples:": [[366, null], [387, null], [394, null], [394, null], [395, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [398, null], [398, null], [398, null], [398, null], [398, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [400, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [403, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [406, null], [406, null], [406, null], [406, null], [956, null], [956, null], [956, null], [959, null], [959, null], [961, null], [961, null], [961, null], [962, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [964, null], [966, null], [966, null], [966, null], [966, null], [967, null], [967, null], [967, null], [967, null], [967, null], [968, null], [970, null], [970, null], [970, null], [970, null], [970, null], [971, null], [971, null], [972, null], [973, null], [973, null], [973, null], [973, null], [973, null], [973, null], [974, null], [975, null], [977, null], [977, null], [977, null], [981, null], [981, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [983, null], [983, null], [983, null], [983, null], [1006, null]], "Datasets in svmlight / libsvm format": [[366, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[366, null]], "Downloading datasets from the openml.org repository": [[366, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[366, "dataset-versions"]], "ARFF parser": [[366, "arff-parser"]], "Loading from external datasets": [[366, "loading-from-external-datasets"], [993, null]], "Real world datasets": [[367, "real-world-datasets"]], "The Olivetti faces dataset": [[367, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[367, "the-20-newsgroups-text-dataset"]], "Usage": [[367, "usage"], [367, "id2"], [395, "usage"], [398, "usage"], [398, "id1"], [404, "usage"], [404, "id26"], [404, "id32"], [404, "id33"], [404, "id35"], [963, "usage"]], "Converting text to vectors": [[367, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[367, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[367, null]], "Recommendation": [[367, null]], "The Labeled Faces in the Wild face recognition dataset": [[367, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[367, "forest-covertypes"]], "RCV1 dataset": [[367, "rcv1-dataset"]], "Kddcup 99 dataset": [[367, "kddcup-99-dataset"]], "California Housing dataset": [[367, "california-housing-dataset"]], "Generated datasets": [[368, "generated-datasets"]], "Generators for classification and clustering": [[368, "generators-for-classification-and-clustering"]], "Single label": [[368, "single-label"]], "Multilabel": [[368, "multilabel"]], "Generators for regression": [[368, "generators-for-regression"]], "Generators for manifold learning": [[368, "generators-for-manifold-learning"]], "Generators for decomposition": [[368, "generators-for-decomposition"]], "Toy datasets": [[369, "toy-datasets"]], "Iris plants dataset": [[369, "iris-plants-dataset"]], "Diabetes dataset": [[369, "diabetes-dataset"], [1000, null]], "Optical recognition of handwritten digits dataset": [[369, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[369, "linnerrud-dataset"]], "Wine recognition dataset": [[369, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[369, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[370, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[370, "installing-nightly-builds"]], "Building from source": [[370, "building-from-source"]], "Dependencies": [[370, "dependencies"]], "Runtime dependencies": [[370, "runtime-dependencies"]], "Build dependencies": [[370, "build-dependencies"]], "Test dependencies": [[370, "test-dependencies"]], "Building a specific version from a tag": [[370, "building-a-specific-version-from-a-tag"]], "Editable mode": [[370, "editable-mode"]], "Platform-specific instructions": [[370, "platform-specific-instructions"]], "Windows": [[370, "windows"]], "macOS": [[370, "macos"]], "macOS compilers from conda-forge": [[370, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[370, "macos-compilers-from-homebrew"]], "Linux": [[370, "linux"]], "Linux compilers from the system": [[370, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[370, "linux-compilers-from-conda-forge"]], "FreeBSD": [[370, "freebsd"]], "Alternative compilers": [[370, "alternative-compilers"]], "Parallel builds": [[370, "parallel-builds"]], "Bug triaging and issue curation": [[371, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[371, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[371, null]], "Working on PRs to help review": [[371, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[371, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[371, null]], "A typical workflow for triaging issues": [[371, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[372, "contributing"], [383, "contributing"]], "Our community, our values": [[372, null]], "Ways to contribute": [[372, "ways-to-contribute"]], "Contributing to related projects": [[372, null]], "Submitting a bug report or a feature request": [[372, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[372, "how-to-make-a-good-bug-report"]], "Contributing code": [[372, "contributing-code"]], "Video resources": [[372, "video-resources"]], "How to contribute": [[372, "how-to-contribute"]], "Learning git:": [[372, null]], "Pull request checklist": [[372, "pull-request-checklist"]], "Continuous Integration (CI)": [[372, "continuous-integration-ci"]], "Stalled pull requests": [[372, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[372, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[372, "issues-for-new-contributors"]], "good first issue tag": [[372, null]], "Easy tag": [[372, null]], "help wanted tag": [[372, null]], "Documentation": [[372, "documentation"], [1009, "documentation"]], "Building the documentation": [[372, "building-the-documentation"]], "Guidelines for writing documentation": [[372, "guidelines-for-writing-documentation"]], "Cross-referencing": [[372, "cross-referencing"]], "Generated documentation on GitHub Actions": [[372, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[372, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[372, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[372, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[372, "monitoring-performance"]], "Issue Tracker Tags": [[372, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[372, "maintaining-backwards-compatibility"]], "Deprecation": [[372, "deprecation"]], "Change the default value of a parameter": [[372, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[372, "code-review-guidelines"]], "Communication Guidelines": [[372, "communication-guidelines"]], "Reading the existing code base": [[372, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[373, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[373, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[373, "tips-to-ease-development"]], "Tips for performance": [[373, "tips-for-performance"]], "Using OpenMP": [[373, "using-openmp"]], "Developing scikit-learn estimators": [[374, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[374, "apis-of-scikit-learn-objects"]], "Different objects": [[374, "different-objects"]], "Instantiation": [[374, "instantiation"]], "Fitting": [[374, "fitting"]], "Estimated Attributes": [[374, "estimated-attributes"]], "Optional Arguments": [[374, "optional-arguments"]], "Universal attributes": [[374, "universal-attributes"]], "Rolling your own estimator": [[374, "rolling-your-own-estimator"]], "Project template:": [[374, null]], "BaseEstimator and mixins:": [[374, null]], "get_params and set_params": [[374, "get-params-and-set-params"]], "Parameters and init": [[374, "parameters-and-init"]], "Cloning": [[374, "cloning"]], "Pipeline compatibility": [[374, "pipeline-compatibility"]], "Estimator types": [[374, "estimator-types"]], "Specific models": [[374, "specific-models"]], "Estimator Tags": [[374, "estimator-tags"]], "Developer API for set_output": [[374, "developer-api-for-set-output"]], "Coding guidelines": [[374, "coding-guidelines"]], "Input validation": [[374, "input-validation"]], "Random Numbers": [[374, "random-numbers"]], "Numerical assertions in tests": [[374, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[375, "developer-s-guide"]], "Maintainer / core-developer information": [[376, "maintainer-core-developer-information"]], "Releasing": [[376, "releasing"]], "Before a release": [[376, "before-a-release"]], "Preparing a release PR": [[376, "preparing-a-release-pr"]], "Major version release": [[376, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[376, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[376, "making-a-release"]], "Release checklist": [[376, "release-checklist"]], "Merging Pull Requests": [[376, "merging-pull-requests"]], "The scikit-learn.org web site": [[376, "the-scikit-learn-org-web-site"]], "Experimental features": [[376, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[377, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[377, "good-practices"]], "Provide a failing code example with minimal comments": [[377, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[377, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[377, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[377, "use-markdown-formatting"]], "Synthetic dataset": [[377, "synthetic-dataset"]], "NumPy": [[377, "numpy"]], "Pandas": [[377, "pandas"]], "make_regression": [[377, "make-regression"]], "make_classification": [[377, "make-classification"]], "make_blobs": [[377, "make-blobs"]], "How to optimize for speed": [[378, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[378, "python-cython-or-c-c"]], "Profiling Python code": [[378, "profiling-python-code"]], "Memory usage profiling": [[378, "memory-usage-profiling"]], "Using Cython": [[378, "using-cython"]], "Profiling compiled extensions": [[378, "profiling-compiled-extensions"]], "Using yep and gperftools": [[378, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[378, "using-a-debugger-gdb"]], "Using gprof": [[378, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[378, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[378, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[378, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[378, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[379, "developing-with-the-plotting-api"]], "Plotting API Overview": [[379, "plotting-api-overview"]], "Plotting with Multiple Axes": [[379, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[380, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[380, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[380, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[380, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[380, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[380, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[380, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[380, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[380, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[381, "utilities-for-developers"]], "Validation Tools": [[381, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[381, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[381, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[381, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[381, "graph-routines"]], "Testing Functions": [[381, "testing-functions"]], "Multiclass and multilabel utility function": [[381, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[381, "helper-functions"]], "Hash Functions": [[381, "hash-functions"]], "Warnings and Exceptions": [[381, "warnings-and-exceptions"]], "Dispatching": [[382, "dispatching"]], "Frequently Asked Questions": [[383, "frequently-asked-questions"]], "Table of Contents": [[383, "table-of-contents"]], "About the project": [[383, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[383, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[383, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[383, "why-scikit"]], "Do you support PyPy?": [[383, "do-you-support-pypy"]], "Implementation decisions": [[383, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[383, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[383, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[383, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[383, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[383, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[383, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[383, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[383, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[383, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[383, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[383, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[383, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[383, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[383, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[383, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[383, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[383, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[383, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[383, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[383, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[383, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[384, "getting-started"]], "Fitting and predicting: estimator basics": [[384, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[384, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[384, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[384, "model-evaluation"]], "Automatic parameter searches": [[384, "automatic-parameter-searches"]], "Next steps": [[384, "next-steps"]], "Glossary of Common Terms and API Elements": [[385, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[385, "general-concepts"]], "Class APIs and Estimator Types": [[385, "class-apis-and-estimator-types"]], "Target Types": [[385, "target-types"]], "Methods": [[385, "methods"]], "Parameters": [[385, "parameters"], [404, "parameters"]], "Attributes": [[385, "attributes"]], "Data and sample properties": [[385, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[386, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[386, "roles-and-responsibilities"]], "Contributors": [[386, "contributors"]], "Core Contributors": [[386, "core-contributors"]], "Communication team": [[386, "communication-team"]], "Maintainers": [[386, "maintainers"]], "Technical Committee": [[386, "technical-committee"]], "Decision Making Process": [[386, "decision-making-process"]], "Governance Model Changes": [[386, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[386, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[388, "installing-scikit-learn"]], "Installing the latest release": [[388, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[388, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[388, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[388, "alpine-linux"]], "Arch Linux": [[388, "arch-linux"]], "Debian/Ubuntu": [[388, "debian-ubuntu"]], "Fedora": [[388, "fedora"]], "NetBSD": [[388, "netbsd"]], "MacPorts for Mac OSX": [[388, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[388, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[388, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[388, "winpython-for-windows"]], "Troubleshooting": [[388, "troubleshooting"]], "Error caused by file path length limit on Windows": [[388, "error-caused-by-file-path-length-limit-on-windows"]], "Model persistence": [[391, "model-persistence"]], "Python specific serialization": [[391, "python-specific-serialization"]], "Security & maintainability limitations": [[391, "security-maintainability-limitations"]], "A more secure format: skops": [[391, "a-more-secure-format-skops"]], "Interoperable formats": [[391, "interoperable-formats"]], "Model selection and evaluation": [[392, "model-selection-and-evaluation"]], "Array API support (experimental)": [[393, "array-api-support-experimental"]], "Example usage": [[393, "example-usage"]], "PyTorch Support": [[393, "pytorch-support"]], "Estimators with support for Array API-compatible inputs": [[393, "estimators-with-support-for-array-api-compatible-inputs"]], "Spectral Co-Clustering": [[394, "spectral-co-clustering"]], "Mathematical formulation": [[394, "mathematical-formulation"], [394, "id3"], [397, "mathematical-formulation"], [397, "id16"], [397, "id23"], [397, "id33"], [397, "id37"], [404, "mathematical-formulation"], [963, "mathematical-formulation"], [970, "mathematical-formulation"], [971, "mathematical-formulation"], [981, "mathematical-formulation"], [982, "mathematical-formulation"], [983, "mathematical-formulation"]], "Spectral Biclustering": [[394, "spectral-biclustering"]], "Biclustering evaluation": [[394, "biclustering-evaluation"]], "Probability calibration": [[395, "probability-calibration"]], "Calibrating a classifier": [[395, "calibrating-a-classifier"]], "Sigmoid": [[395, "sigmoid"]], "Isotonic": [[395, "isotonic"]], "Multiclass support": [[395, "multiclass-support"]], "API Reference": [[396, "api-reference"]], "sklearn.base: Base classes and utility functions": [[396, "module-sklearn.base"]], "Base classes": [[396, "base-classes"]], "Functions": [[396, "functions"], [396, "id1"]], "sklearn.calibration: Probability Calibration": [[396, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[396, "module-sklearn.cluster"]], "Classes": [[396, "classes"]], "sklearn.compose: Composite Estimators": [[396, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[396, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[396, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[396, "module-sklearn.datasets"]], "Loaders": [[396, "loaders"]], "Samples generator": [[396, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[396, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[396, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[396, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[396, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[396, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[396, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[396, "module-sklearn.feature_extraction"]], "From images": [[396, "module-sklearn.feature_extraction.image"]], "From text": [[396, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[396, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[396, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[396, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[396, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[396, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[396, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[396, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[396, "module-sklearn.linear_model"]], "Linear classifiers": [[396, "linear-classifiers"]], "Classical linear regressors": [[396, "classical-linear-regressors"]], "Regressors with variable selection": [[396, "regressors-with-variable-selection"]], "Bayesian regressors": [[396, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[396, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[396, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[396, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[396, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[396, "sklearn-metrics-metrics"]], "Model Selection Interface": [[396, "model-selection-interface"]], "Classification metrics": [[396, "classification-metrics"], [967, "classification-metrics"]], "Regression metrics": [[396, "regression-metrics"], [967, "regression-metrics"]], "Multilabel ranking metrics": [[396, "multilabel-ranking-metrics"], [967, "multilabel-ranking-metrics"]], "Clustering metrics": [[396, "clustering-metrics"], [967, "clustering-metrics"]], "Biclustering metrics": [[396, "biclustering-metrics"]], "Distance metrics": [[396, "distance-metrics"]], "Pairwise metrics": [[396, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[396, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[396, "module-sklearn.model_selection"]], "Splitter Classes": [[396, "splitter-classes"]], "Splitter Functions": [[396, "splitter-functions"]], "Hyper-parameter optimizers": [[396, "hyper-parameter-optimizers"]], "Model validation": [[396, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[396, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[396, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[396, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[396, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[396, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[396, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[396, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[396, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[396, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[396, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[396, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[396, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[396, "module-sklearn.utils"]], "Recently deprecated": [[396, "recently-deprecated"]], "Input data": [[397, null]], "Overview of clustering methods": [[397, "overview-of-clustering-methods"]], "K-means": [[397, "k-means"]], "Low-level parallelism": [[397, "low-level-parallelism"], [404, "low-level-parallelism"]], "Mini Batch K-Means": [[397, "mini-batch-k-means"]], "Affinity Propagation": [[397, "affinity-propagation"]], "Mean Shift": [[397, "mean-shift"]], "Spectral clustering": [[397, "spectral-clustering"]], "Different label assignment strategies": [[397, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[397, "spectral-clustering-graphs"]], "Hierarchical clustering": [[397, "hierarchical-clustering"]], "FeatureAgglomeration": [[397, null]], "Different linkage type: Ward, complete, average, and single linkage": [[397, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[397, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[397, "adding-connectivity-constraints"]], "Varying the metric": [[397, "varying-the-metric"]], "Bisecting K-Means": [[397, "bisecting-k-means"]], "DBSCAN": [[397, "dbscan"]], "Implementation": [[397, null], [970, "implementation"]], "Memory consumption for large sample sizes": [[397, null]], "HDBSCAN": [[397, "hdbscan"]], "Mutual Reachability Graph": [[397, "mutual-reachability-graph"]], "Hierarchical Clustering": [[397, "id11"]], "OPTICS": [[397, "optics"]], "Comparison with DBSCAN": [[397, null]], "Computational Complexity": [[397, null]], "BIRCH": [[397, "birch"]], "Clustering performance evaluation": [[397, "clustering-performance-evaluation"]], "Rand index": [[397, "rand-index"]], "Advantages": [[397, "advantages"], [397, "id14"], [397, "id21"], [397, "id25"], [397, "id28"], [397, "id31"], [397, "id35"], [397, "id39"]], "Drawbacks": [[397, "drawbacks"], [397, "id15"], [397, "id22"], [397, "id26"], [397, "id29"], [397, "id32"], [397, "id36"], [397, "id40"]], "Mutual Information based scores": [[397, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[397, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[397, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[397, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[397, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[397, "davies-bouldin-index"]], "Contingency Matrix": [[397, "contingency-matrix"]], "Pair Confusion Matrix": [[397, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[398, "pipeline-chaining-estimators"]], "Construction": [[398, "construction"]], "Accessing steps": [[398, "accessing-steps"]], "Nested parameters": [[398, "nested-parameters"]], "Caching transformers: avoid repeated computation": [[398, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[398, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[398, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[398, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[398, "visualizing-composite-estimators"]], "Empirical covariance": [[399, "empirical-covariance"]], "Shrunk Covariance": [[399, "shrunk-covariance"]], "Basic shrinkage": [[399, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[399, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[399, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[399, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[399, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[399, "minimum-covariance-determinant"]], "PLSCanonical": [[400, "plscanonical"]], "Transforming data": [[400, "transforming-data"]], "Predicting the targets Y": [[400, "predicting-the-targets-y"]], "PLSSVD": [[400, "plssvd"]], "PLSRegression": [[400, "plsregression"]], "Canonical Correlation Analysis": [[400, "canonical-correlation-analysis"]], "Reference:": [[400, null]], "Cross-validation: evaluating estimator performance": [[401, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[401, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[401, null]], "The cross_validate function and multiple metric evaluation": [[401, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[401, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[401, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[401, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[401, "k-fold"]], "Repeated K-Fold": [[401, "repeated-k-fold"]], "Leave One Out (LOO)": [[401, "leave-one-out-loo"]], "Leave P Out (LPO)": [[401, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[401, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[401, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[401, "stratified-k-fold"]], "Stratified Shuffle Split": [[401, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[401, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[401, "group-k-fold"]], "StratifiedGroupKFold": [[401, "stratifiedgroupkfold"]], "Leave One Group Out": [[401, "leave-one-group-out"]], "Leave P Groups Out": [[401, "leave-p-groups-out"]], "Group Shuffle Split": [[401, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[401, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[401, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[401, "cross-validation-of-time-series-data"]], "Time Series Split": [[401, "time-series-split"]], "A note on shuffling": [[401, "a-note-on-shuffling"]], "Cross validation and model selection": [[401, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[402, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[402, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[402, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[402, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[402, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[402, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[402, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[402, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[402, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[402, "dictionary-learning"]], "Generic dictionary learning": [[402, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[402, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[402, null]], "Factor Analysis": [[402, "factor-analysis"]], "Independent component analysis (ICA)": [[402, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[402, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[402, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[402, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[402, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[402, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[403, "density-estimation"]], "Density Estimation: Histograms": [[403, "density-estimation-histograms"]], "Bagging meta-estimator": [[404, "bagging-meta-estimator"]], "Forests of randomized trees": [[404, "forests-of-randomized-trees"]], "Random Forests": [[404, "random-forests"]], "Extremely Randomized Trees": [[404, "extremely-randomized-trees"]], "Parallelization": [[404, "parallelization"]], "Feature importance evaluation": [[404, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[404, "totally-random-trees-embedding"]], "AdaBoost": [[404, "adaboost"]], "Gradient Tree Boosting": [[404, "gradient-tree-boosting"]], "Fitting additional weak-learners": [[404, "fitting-additional-weak-learners"]], "Controlling the tree size": [[404, "controlling-the-tree-size"]], "Loss Functions": [[404, "loss-functions"]], "Shrinkage via learning rate": [[404, "shrinkage-via-learning-rate"]], "Subsampling": [[404, "subsampling"]], "Interpretation with feature importance": [[404, "interpretation-with-feature-importance"]], "Histogram-Based Gradient Boosting": [[404, "histogram-based-gradient-boosting"]], "Missing values support": [[404, "missing-values-support"]], "Sample weight support": [[404, "sample-weight-support"]], "Categorical Features Support": [[404, "categorical-features-support"]], "Interaction constraints": [[404, "interaction-constraints"]], "Why it\u2019s faster": [[404, "why-it-s-faster"]], "Voting Classifier": [[404, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[404, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[404, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[404, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[404, "voting-regressor"]], "Stacked generalization": [[404, "stacked-generalization"]], "Feature extraction": [[405, "feature-extraction"]], "Loading features from dicts": [[405, "loading-features-from-dicts"]], "Feature hashing": [[405, "feature-hashing"]], "Implementation details": [[405, "implementation-details"], [981, "implementation-details"], [982, "implementation-details"]], "Text feature extraction": [[405, "text-feature-extraction"]], "The Bag of Words representation": [[405, "the-bag-of-words-representation"]], "Sparsity": [[405, "sparsity"], [1000, "sparsity"]], "Common Vectorizer usage": [[405, "common-vectorizer-usage"]], "Using stop words": [[405, "using-stop-words"]], "Tf\u2013idf term weighting": [[405, "tfidf-term-weighting"]], "Decoding text files": [[405, "decoding-text-files"]], "Applications and examples": [[405, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[405, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[405, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[405, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[405, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[405, "image-feature-extraction"]], "Patch extraction": [[405, "patch-extraction"]], "Connectivity graph of an image": [[405, "connectivity-graph-of-an-image"]], "Feature selection": [[406, "feature-selection"]], "Removing features with low variance": [[406, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[406, null]], "Feature selection using SelectFromModel": [[406, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[406, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[406, "compressive-sensing"]], "Tree-based feature selection": [[406, "tree-based-feature-selection"]], "Sequential Feature Selection": [[406, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[406, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[407, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[407, "gaussian-process-regression-gpr"]], "GPR examples": [[407, "gpr-examples"]], "GPR with noise-level estimation": [[407, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[407, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[407, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[407, "gaussian-process-classification-gpc"]], "GPC examples": [[407, "gpc-examples"]], "Probabilistic predictions with GPC": [[407, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[407, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[407, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[407, "gaussian-process-kernel-api"]], "Basic kernels": [[407, "basic-kernels"]], "Kernel operators": [[407, "kernel-operators"]], "Radial basis function (RBF) kernel": [[407, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[407, "rational-quadratic-kernel"]], "Dot-Product kernel": [[407, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[408, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[409, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[410, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[411, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[411, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[412, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[413, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[414, "sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[415, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[416, "sklearn-base-densitymixin"]], "sklearn.base.OneToOneFeatureMixin": [[417, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.RegressorMixin": [[418, "sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[419, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[419, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[420, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[421, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[422, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[423, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[423, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[424, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[424, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[425, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[426, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[426, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[427, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[427, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[428, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[428, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[429, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[429, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[430, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[430, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[431, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[431, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[432, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[432, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[433, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[433, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[434, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[434, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[435, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[435, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[436, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[436, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[437, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[437, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[438, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[438, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[439, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[439, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[440, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[440, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[441, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[441, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[442, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[443, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[444, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[444, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[445, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[446, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[446, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[447, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[448, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[448, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[449, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[450, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[450, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[451, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[451, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[452, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[452, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[453, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[453, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[454, "sklearn-config-context"]], "Examples using sklearn.config_context": [[454, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[455, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[455, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[456, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[456, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[457, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[458, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[458, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[459, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[459, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[460, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[460, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[461, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[461, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[462, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[462, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[463, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[463, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[464, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[465, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[465, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[466, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[467, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[468, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[468, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[469, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[469, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[470, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[470, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[471, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[472, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[473, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[473, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[474, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[474, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[475, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[475, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[476, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[476, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[477, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[477, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[478, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[478, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[479, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[480, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[480, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[481, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[481, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[482, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[482, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[483, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[484, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[484, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[485, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[485, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[486, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[486, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[487, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[487, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[488, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[488, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[489, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[490, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[490, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[491, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[492, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[492, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[493, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[494, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[495, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[496, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[496, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[497, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[497, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[498, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[498, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[499, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[499, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[500, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[500, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[501, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[501, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[502, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[503, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[504, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[505, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[505, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[506, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[506, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[507, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[508, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[508, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[509, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[509, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[510, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[510, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[511, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[511, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[512, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[512, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[513, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[513, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[514, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[515, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[516, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[516, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[517, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[518, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[518, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[519, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[519, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[520, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[520, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[521, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[521, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[522, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[522, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[523, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[523, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[524, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[524, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[525, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[525, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[526, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[526, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[527, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[527, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[528, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[528, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[529, "sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[530, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[530, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[531, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[532, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[533, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[534, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[535, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[535, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[536, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[536, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[537, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[537, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[538, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[538, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[539, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[539, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[540, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[540, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[541, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[542, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[542, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[543, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[543, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[544, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[544, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[545, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[545, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[546, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[546, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[547, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[547, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[548, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[548, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[549, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[549, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[550, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[550, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[551, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[551, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[552, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[552, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[553, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[553, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[554, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[554, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[555, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[555, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[556, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[556, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[557, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[557, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[558, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[559, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[560, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[561, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[562, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[563, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[564, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[565, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[566, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[567, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[567, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[568, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[568, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[569, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[570, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[570, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[571, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[572, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[573, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[573, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[574, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[574, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[575, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[575, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[576, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[576, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[577, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[577, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[578, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[579, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[579, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[580, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[580, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[581, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[582, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[583, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[583, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[584, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[585, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[585, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[586, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[586, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[587, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[588, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[588, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[589, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[590, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[590, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[591, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[591, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[592, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[592, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[593, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[593, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[594, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[594, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[595, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[596, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[596, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[597, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[597, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[598, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[599, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[599, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[600, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[600, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[601, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[601, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[602, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[603, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[603, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[604, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[604, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[605, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[605, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[606, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[607, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[608, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[608, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[609, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[609, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[610, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[611, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[611, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[612, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[613, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[613, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[614, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[614, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[615, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[616, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[616, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[617, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[617, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[617, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[618, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[618, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[618, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[619, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[619, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[620, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[620, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[621, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[621, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[622, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[623, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[624, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[625, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[625, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[626, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[626, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[627, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[627, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[628, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[629, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[629, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[630, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[630, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[631, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[631, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[632, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[632, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[633, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[633, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[634, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[634, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[635, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[635, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[636, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[637, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[638, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[638, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[639, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[639, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[640, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[641, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[641, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[642, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[642, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[643, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[643, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[644, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[644, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[645, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[645, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[646, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[647, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[648, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[648, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[649, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[650, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[650, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[651, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[651, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[652, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[652, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[653, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[654, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[654, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[655, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[655, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[656, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[656, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[657, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[657, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[658, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[658, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[659, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[659, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[660, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[660, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[661, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[662, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[662, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[663, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[663, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[664, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[664, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[665, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[665, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[666, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[666, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[667, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[667, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[668, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[668, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[669, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[670, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[670, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[671, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[672, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[673, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[674, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[674, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[675, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[675, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[676, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[676, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[677, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[677, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[678, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[678, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[679, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[679, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[680, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[681, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[682, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[683, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[683, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[683, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[683, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[684, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[684, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[685, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[686, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[686, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[686, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[686, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[687, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[687, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[687, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[687, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[688, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[688, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[688, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[688, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[689, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[689, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[690, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[690, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[691, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[691, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[692, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[692, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[693, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[693, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[694, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[695, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[695, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[696, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[697, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[698, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[698, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[699, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[699, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[700, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[701, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[702, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[703, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[703, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[704, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[704, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[705, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[705, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[706, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[707, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[708, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[709, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[710, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[711, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[712, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[712, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[713, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[714, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[714, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[715, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[716, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[717, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[718, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[719, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[719, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[720, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[721, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[722, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[722, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[723, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[723, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[724, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[725, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[726, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[726, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[727, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[727, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[728, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[729, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[730, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[730, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[731, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[732, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[733, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[733, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[734, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[734, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[735, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[735, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[736, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[737, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[737, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[738, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[738, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[739, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[740, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[740, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[741, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[742, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[742, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[743, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[744, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[745, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[746, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[747, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[748, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[749, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[750, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[751, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[752, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[753, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[754, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[755, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[756, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[757, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[758, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[759, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[760, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[761, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[762, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[763, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[763, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[764, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[764, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[765, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[766, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[767, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[767, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[768, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[769, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[769, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[770, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[770, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[771, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[771, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[772, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[772, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[773, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[773, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[774, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[774, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.silhouette_samples": [[775, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[775, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[776, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[776, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[777, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[778, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[778, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[779, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[779, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[780, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[780, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[781, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[781, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[782, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[782, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[783, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[783, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[784, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[784, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[785, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[785, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[786, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[786, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[787, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[787, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[788, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[788, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[788, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[789, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[790, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[791, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[792, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[793, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[794, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[795, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[796, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[796, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[797, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[797, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[798, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[798, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[799, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[799, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[800, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[800, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[801, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[801, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[802, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[802, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[803, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[803, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.check_cv": [[804, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[805, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[805, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[806, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[806, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[807, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[807, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[808, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[808, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[809, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[809, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[810, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[810, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[811, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[811, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[812, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[813, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[813, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[814, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[815, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[815, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[816, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[817, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[817, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[818, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[819, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[819, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[820, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[821, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[821, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[822, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[822, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[823, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[823, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[824, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[825, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[826, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[826, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[827, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[827, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[828, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[828, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[829, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[829, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[830, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[830, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[831, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[831, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[832, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[832, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[833, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[833, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[834, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[835, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[836, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[837, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[837, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[838, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[839, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[840, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[840, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[841, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[841, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[842, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[842, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[843, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[843, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[844, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[844, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[845, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[845, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[846, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[847, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[848, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[848, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[849, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[849, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[850, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[851, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[851, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[852, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[853, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[853, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[854, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[854, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[855, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[856, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[856, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[857, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[857, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[858, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[858, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[859, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[859, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[860, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[860, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[861, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[861, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[862, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[862, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[863, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[863, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[864, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[864, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[865, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[865, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[866, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[867, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[868, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[868, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[869, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[870, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[870, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[871, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[872, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[873, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[873, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[874, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[875, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[876, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[877, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[877, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[878, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[878, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[879, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[880, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[880, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[881, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[881, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[882, "sklearn-set-config"]], "Examples using sklearn.set_config": [[882, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[883, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[884, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[884, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[885, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[886, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[886, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[887, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[887, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[888, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[888, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[889, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[889, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[890, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[890, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[891, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[891, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[892, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[892, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[893, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[893, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[894, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[895, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[896, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[897, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[898, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[898, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[899, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[899, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[900, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[901, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[902, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[903, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[904, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[905, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[906, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[907, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[907, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[908, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[909, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[910, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[911, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[912, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[913, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[914, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[915, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[916, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[916, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[917, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[918, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[918, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[919, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[920, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[921, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[922, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[923, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[924, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[925, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[925, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[926, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[927, "sklearn-utils-indexable"]], "sklearn.utils.metaestimators.available_if": [[928, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[928, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[929, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[930, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[931, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[932, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[933, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[934, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[935, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[936, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[937, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[938, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[939, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[940, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[941, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[941, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[942, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[943, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[944, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[945, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[946, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[947, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[948, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[949, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[950, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[951, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[951, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[952, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[953, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[954, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[955, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[956, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[956, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[956, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[956, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[956, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[956, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[956, "choosing-a-resource"]], "Exhausting the available resources": [[956, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[956, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[956, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[956, "tips-for-parameter-search"]], "Specifying an objective metric": [[956, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[956, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[956, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[956, "model-selection-development-and-evaluation"]], "Robustness to failure": [[956, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[956, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[956, "model-specific-cross-validation"]], "Information Criterion": [[956, "information-criterion"]], "Out of Bag Estimates": [[956, "out-of-bag-estimates"]], "Imputation of missing values": [[957, "imputation-of-missing-values"], [977, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[957, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[957, "univariate-feature-imputation"]], "Multivariate feature imputation": [[957, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[957, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[957, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[957, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[957, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[957, "marking-imputed-values"]], "Estimators that handle NaN values": [[957, "estimators-that-handle-nan-values"]], "Isotonic regression": [[958, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[959, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[959, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[959, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[959, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[959, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[959, "mathematical-details"]], "Kernel ridge regression": [[960, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[961, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[961, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[961, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[961, "qda"]], "LDA": [[961, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[961, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[961, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[961, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[962, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[962, "validation-curve"]], "Learning curve": [[962, "learning-curve"]], "Linear Models": [[963, "linear-models"]], "Ordinary Least Squares": [[963, "ordinary-least-squares"]], "Non-Negative Least Squares": [[963, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[963, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[963, "ridge-regression-and-classification"]], "Ridge Complexity": [[963, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[963, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[963, "setting-regularization-parameter"]], "Using cross-validation": [[963, "using-cross-validation"]], "Information-criteria based model selection": [[963, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[963, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[963, "multi-task-lasso"]], "Elastic-Net": [[963, "elastic-net"]], "Multi-task Elastic-Net": [[963, "multi-task-elastic-net"]], "Least Angle Regression": [[963, "least-angle-regression"]], "LARS Lasso": [[963, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[963, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[963, "bayesian-regression"]], "Bayesian Ridge Regression": [[963, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[963, "automatic-relevance-determination-ard"]], "Logistic regression": [[963, "logistic-regression"]], "Binary Case": [[963, "binary-case"]], "Multinomial Case": [[963, "multinomial-case"]], "Solvers": [[963, "solvers"]], "Differences from liblinear:": [[963, "liblinear-differences"]], "Practical considerations": [[963, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[963, "stochastic-gradient-descent-sgd"]], "Perceptron": [[963, "perceptron"]], "Passive Aggressive Algorithms": [[963, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[963, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[963, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[963, null]], "RANSAC: RANdom SAmple Consensus": [[963, "ransac-random-sample-consensus"]], "Details of the algorithm": [[963, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[963, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[963, "theoretical-considerations"]], "Huber Regression": [[963, "huber-regression"]], "Quantile Regression": [[963, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[963, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[964, "introduction"]], "Isomap": [[964, "isomap"]], "Complexity": [[964, "complexity"], [964, "id3"], [964, "id4"], [964, "id5"], [964, "id7"], [964, "id8"], [970, "complexity"], [971, "complexity"], [981, "complexity"], [982, "complexity"], [983, "complexity"]], "Locally Linear Embedding": [[964, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[964, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[964, "hessian-eigenmapping"]], "Spectral Embedding": [[964, "spectral-embedding"]], "Local Tangent Space Alignment": [[964, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[964, "multi-dimensional-scaling-mds"]], "Metric MDS": [[964, "metric-mds"]], "Nonmetric MDS": [[964, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[964, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[964, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[964, "barnes-hut-t-sne"]], "Tips on practical use": [[964, "tips-on-practical-use"], [983, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[965, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[965, "cosine-similarity"]], "Linear kernel": [[965, "linear-kernel"], [1000, "linear-kernel"]], "Polynomial kernel": [[965, "polynomial-kernel"], [1000, "polynomial-kernel"]], "Sigmoid kernel": [[965, "sigmoid-kernel"]], "RBF kernel": [[965, "rbf-kernel"]], "Laplacian kernel": [[965, "laplacian-kernel"]], "Chi-squared kernel": [[965, "chi-squared-kernel"]], "Gaussian mixture models": [[966, "gaussian-mixture-models"]], "Gaussian Mixture": [[966, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[966, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[966, "pros"], [966, "id2"]], "Cons": [[966, "cons"], [966, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[966, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[966, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[966, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[966, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[966, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[966, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[966, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[967, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[967, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[967, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[967, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[967, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[967, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[967, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[967, "accuracy-score"]], "Example:": [[967, null], [967, null], [967, null], [967, null], [967, null], [967, null], [967, null], [967, null], [979, null], [1000, null]], "Top-k accuracy score": [[967, "top-k-accuracy-score"]], "Balanced accuracy score": [[967, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[967, "cohen-s-kappa"]], "Classification report": [[967, "classification-report"]], "Hamming loss": [[967, "hamming-loss"]], "Precision, recall and F-measures": [[967, "precision-recall-and-f-measures"]], "Binary classification": [[967, "binary-classification"]], "Multiclass and multilabel classification": [[967, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[967, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[967, "hinge-loss"]], "Log loss": [[967, "log-loss"]], "Matthews correlation coefficient": [[967, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[967, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[967, "receiver-operating-characteristic-roc"]], "Binary case": [[967, "binary-case"]], "Multi-class case": [[967, "multi-class-case"]], "Multi-label case": [[967, "multi-label-case"]], "Detection error tradeoff (DET)": [[967, "detection-error-tradeoff-det"]], "Zero one loss": [[967, "zero-one-loss"]], "Brier score loss": [[967, "brier-score-loss"]], "Class likelihood ratios": [[967, "class-likelihood-ratios"]], "Coverage error": [[967, "coverage-error"]], "Label ranking average precision": [[967, "label-ranking-average-precision"]], "Ranking loss": [[967, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[967, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[967, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[967, "mean-absolute-error"]], "Mean squared error": [[967, "mean-squared-error"]], "Mean squared logarithmic error": [[967, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[967, "mean-absolute-percentage-error"]], "Median absolute error": [[967, "median-absolute-error"]], "Max error": [[967, "max-error"]], "Explained variance score": [[967, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[967, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[967, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[967, "pinball-loss"]], "D\u00b2 score": [[967, "d2-score"]], "D\u00b2 Tweedie score": [[967, "d2-tweedie-score"]], "D\u00b2 pinball score": [[967, "d2-pinball-score"]], "D\u00b2 absolute error score": [[967, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[967, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[967, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[968, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[968, "multiclass-classification"], [1000, null]], "Target format": [[968, "target-format"], [968, "id5"], [968, "id8"], [968, "id10"]], "OneVsRestClassifier": [[968, "onevsrestclassifier"]], "OneVsOneClassifier": [[968, "onevsoneclassifier"]], "OutputCodeClassifier": [[968, "outputcodeclassifier"]], "MultiOutputClassifier": [[968, "multioutputclassifier"]], "ClassifierChain": [[968, "classifierchain"]], "Multiclass-multioutput classification": [[968, "multiclass-multioutput-classification"]], "Multioutput regression": [[968, "multioutput-regression"]], "MultiOutputRegressor": [[968, "multioutputregressor"]], "RegressorChain": [[968, "regressorchain"]], "Naive Bayes": [[969, "naive-bayes"]], "Multinomial Naive Bayes": [[969, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[969, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[969, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[969, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[969, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[970, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[970, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[970, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[970, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[970, "nearest-neighbor-algorithms"]], "Brute Force": [[970, "brute-force"]], "K-D Tree": [[970, "k-d-tree"]], "Ball Tree": [[970, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[970, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[970, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[970, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[970, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[970, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[970, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[970, "neighborhood-components-analysis"]], "Dimensionality reduction": [[970, "dimensionality-reduction"]], "Mahalanobis distance": [[970, "mahalanobis-distance"]], "Transform": [[970, "transform"]], "Neural network models (supervised)": [[971, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[971, "multi-layer-perceptron"]], "Regularization": [[971, "regularization"]], "Algorithms": [[971, "algorithms"]], "Tips on Practical Use": [[971, "tips-on-practical-use"], [981, "tips-on-practical-use"], [982, "tips-on-practical-use"]], "More control with warm_start": [[971, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[972, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[972, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[972, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[972, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[972, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[973, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[973, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[973, "novelty-detection"]], "Scaling up the One-Class SVM": [[973, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[973, "id1"]], "Fitting an elliptic envelope": [[973, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[973, "isolation-forest"]], "Local Outlier Factor": [[973, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[973, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[974, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[974, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[974, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[974, "mathematical-definition"]], "Computation methods": [[974, "computation-methods"]], "Permutation feature importance": [[975, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[975, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[975, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[975, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[977, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[977, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[977, "scaling-features-to-a-range"]], "Scaling sparse data": [[977, "scaling-sparse-data"]], "Scaling data with outliers": [[977, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[977, null]], "Centering kernel matrices": [[977, "centering-kernel-matrices"]], "Non-linear transformation": [[977, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[977, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[977, "mapping-to-a-gaussian-distribution"]], "Normalization": [[977, "normalization"]], "Sparse input": [[977, null], [977, null]], "Encoding categorical features": [[977, "encoding-categorical-features"]], "Infrequent categories": [[977, "infrequent-categories"]], "Target Encoder": [[977, "target-encoder"]], "Discretization": [[977, "discretization"]], "K-bins discretization": [[977, "k-bins-discretization"]], "Feature binarization": [[977, "feature-binarization"]], "Generating polynomial features": [[977, "generating-polynomial-features"]], "Polynomial features": [[977, "polynomial-features"]], "Spline transformer": [[977, "spline-transformer"]], "Custom transformers": [[977, "custom-transformers"]], "Transforming the prediction target (y)": [[978, "transforming-the-prediction-target-y"]], "Label binarization": [[978, "label-binarization"]], "LabelBinarizer": [[978, "labelbinarizer"]], "MultiLabelBinarizer": [[978, "multilabelbinarizer"]], "Label encoding": [[978, "label-encoding"]], "Random Projection": [[979, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[979, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[979, "gaussian-random-projection"]], "Sparse random projection": [[979, "sparse-random-projection"]], "Inverse Transform": [[979, "inverse-transform"]], "Unlabeled entries in y": [[980, null]], "Self Training": [[980, "self-training"]], "Label Propagation": [[980, "label-propagation"]], "Stochastic Gradient Descent": [[981, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[981, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[981, "stopping-criterion"]], "SGD": [[981, "id5"]], "Multi-class classification": [[982, "multi-class-classification"]], "Scores and probabilities": [[982, "scores-and-probabilities"]], "Unbalanced problems": [[982, "unbalanced-problems"]], "Density estimation, novelty detection": [[982, "density-estimation-novelty-detection"]], "Kernel functions": [[982, "kernel-functions"]], "Parameters of the RBF Kernel": [[982, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[982, "custom-kernels"]], "Using Python functions as kernels": [[982, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[982, "using-the-gram-matrix"]], "SVC": [[982, "svc"]], "LinearSVC": [[982, "linearsvc"]], "NuSVC": [[982, "nusvc"]], "SVR": [[982, "svr"]], "LinearSVR": [[982, "linearsvr"]], "Multi-output problems": [[983, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[983, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[983, "classification-criteria"]], "Regression criteria": [[983, "regression-criteria"]], "Missing Values Support": [[983, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[983, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[984, "unsupervised-dimensionality-reduction"]], "Pipelining": [[984, null], [998, "pipelining"]], "PCA: principal component analysis": [[984, "pca-principal-component-analysis"]], "Random projections": [[984, "random-projections"]], "Feature scaling": [[984, null]], "Welcome to scikit-learn": [[985, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[986, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[986, "new-to-scientific-python"]], "External Tutorials": [[986, "external-tutorials"]], "Videos": [[986, "videos"]], "Related Projects": [[987, "related-projects"]], "Interoperability and framework enhancements": [[987, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[987, "other-estimators-and-tasks"]], "Statistical learning with Python": [[987, "statistical-learning-with-python"]], "Recommendation Engine packages": [[987, "recommendation-engine-packages"]], "Domain specific packages": [[987, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[987, "translations-of-scikit-learn-documentation"]], "Roadmap": [[988, "id1"]], "Purpose of this document": [[988, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[988, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[988, "architectural-general-goals"]], "Subpackage-specific goals": [[988, "subpackage-specific-goals"]], "Supervised learning": [[989, "supervised-learning"]], "Support": [[990, "support"]], "Mailing List": [[990, "mailing-list"]], "User questions": [[990, "user-questions"]], "Bug tracker": [[990, "bug-tracker"]], "Gitter": [[990, "gitter"]], "Documentation resources": [[990, "documentation-resources"]], "Who is using scikit-learn?": [[991, "who-is-using-scikit-learn"]], "J.P.Morgan": [[991, "id1"]], "Spotify": [[991, "id2"]], "Inria": [[991, "id3"]], "betaworks": [[991, "id4"]], "Hugging Face": [[991, "id5"]], "Evernote": [[991, "id6"]], "T\u00e9l\u00e9com ParisTech": [[991, "id7"]], "Booking.com": [[991, "id8"]], "AWeber": [[991, "id9"]], "Yhat": [[991, "id10"]], "Rangespan": [[991, "id11"]], "Birchbox": [[991, "id12"]], "Bestofmedia Group": [[991, "id13"]], "Change.org": [[991, "id14"]], "PHIMECA Engineering": [[991, "id15"]], "HowAboutWe": [[991, "id16"]], "PeerIndex": [[991, "id17"]], "DataRobot": [[991, "id18"]], "OkCupid": [[991, "id19"]], "Lovely": [[991, "id20"]], "Data Publica": [[991, "id21"]], "Machinalis": [[991, "id22"]], "solido": [[991, "id23"]], "INFONEA": [[991, "id24"]], "Dataiku": [[991, "id25"]], "Otto Group": [[991, "id26"]], "Zopa": [[991, "id27"]], "MARS": [[991, "id28"]], "BNP Paribas Cardif": [[991, "id29"]], "An introduction to machine learning with scikit-learn": [[993, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[993, null]], "Machine learning: the problem setting": [[993, "machine-learning-the-problem-setting"]], "Training set and testing set": [[993, null], [1000, null]], "Loading an example dataset": [[993, "loading-an-example-dataset"]], "Shape of the data arrays": [[993, null]], "Learning and predicting": [[993, "learning-and-predicting"]], "Choosing the parameters of the model": [[993, null]], "Conventions": [[993, "conventions"]], "Type casting": [[993, "type-casting"]], "Refitting and updating parameters": [[993, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[993, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[994, "scikit-learn-tutorials"]], "Choosing the right estimator": [[995, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[996, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[996, null]], "Model selection: choosing estimators and their parameters": [[997, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[997, "score-and-cross-validated-scores"]], "Cross-validation generators": [[997, "cross-validation-generators"]], "Exercise": [[997, null], [997, null], [1000, null], [1000, null]], "Grid-search and cross-validated estimators": [[997, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[997, "grid-search"]], "Nested cross-validation": [[997, null]], "Cross-validated estimators": [[997, "cross-validated-estimators"]], "Putting it all together": [[998, "putting-it-all-together"]], "Face recognition with eigenfaces": [[998, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[998, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[999, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[999, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[999, null]], "An example of reshaping data would be the digits dataset": [[999, null]], "Estimators objects": [[999, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1000, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[1000, null]], "Vocabulary: classification and regression": [[1000, null]], "Nearest neighbor and the curse of dimensionality": [[1000, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[1000, null]], "k-Nearest neighbors classifier": [[1000, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[1000, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[1000, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[1000, "linear-regression"]], "Shrinkage": [[1000, "shrinkage"]], "Different algorithms for the same problem": [[1000, null]], "Shrinkage and sparsity with logistic regression": [[1000, null]], "Support vector machines (SVMs)": [[1000, "support-vector-machines-svms"]], "Linear SVMs": [[1000, "linear-svms"]], "Using kernels": [[1000, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[1000, "rbf-kernel-radial-basis-function"]], "Interactive example": [[1000, null]], "Unsupervised learning: seeking representations of the data": [[1001, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[1001, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[1001, null]], "K-means clustering": [[1001, "k-means-clustering"]], "Application example: vector quantization": [[1001, null]], "Hierarchical agglomerative clustering: Ward": [[1001, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[1001, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[1001, null]], "Decompositions: from a signal to components and loadings": [[1001, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[1001, null]], "Principal component analysis: PCA": [[1001, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[1001, "independent-component-analysis-ica"]], "Working With Text Data": [[1002, "working-with-text-data"]], "Tutorial setup": [[1002, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[1002, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[1002, "extracting-features-from-text-files"]], "Bags of words": [[1002, "bags-of-words"]], "Tokenizing text with scikit-learn": [[1002, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[1002, "from-occurrences-to-frequencies"]], "Training a classifier": [[1002, "training-a-classifier"]], "Building a pipeline": [[1002, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[1002, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[1002, "parameter-tuning-using-grid-search"]], "Exercises": [[1002, "exercises"]], "Exercise 1: Language identification": [[1002, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1002, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1002, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[1002, "where-to-from-here"]], "Unsupervised learning": [[1003, "unsupervised-learning"]], "User Guide": [[1004, "user-guide"]], "Available documentation for Scikit-learn": [[1005, "available-documentation-for-scikit-learn"]], "Visualizations": [[1006, "visualizations"]], "Available Plotting Utilities": [[1006, "available-plotting-utilities"]], "Display Objects": [[1006, "display-objects"]], "Release History": [[1007, "release-history"]], "Version 0.12.1": [[1009, "version-0-12-1"]], "Changelog": [[1009, "changelog"], [1009, "id1"], [1009, "id3"], [1009, "id6"], [1009, "id9"], [1009, "id12"], [1009, "id14"], [1009, "id16"], [1009, "id18"], [1009, "id19"], [1010, "changelog"], [1010, "id1"], [1011, "changelog"], [1012, "changelog"], [1013, "changelog"], [1013, "id1"], [1014, "changelog"], [1014, "id1"], [1015, "changelog"], [1015, "id1"], [1015, "id2"], [1016, "changelog"], [1016, "id1"], [1017, "changelog"], [1017, "id1"], [1017, "id5"], [1017, "id10"], [1017, "id23"], [1018, "changelog"], [1018, "id1"], [1018, "id2"], [1018, "id7"], [1019, "changelog"], [1019, "id1"], [1019, "id4"], [1020, "changelog"], [1020, "id1"], [1020, "id4"], [1021, "changelog"], [1021, "id1"], [1021, "id4"], [1022, "changelog"], [1022, "id1"], [1022, "id7"], [1023, "changelog"], [1023, "id1"], [1023, "id7"], [1024, "changelog"], [1024, "id1"], [1024, "id9"], [1025, "changelog"]], "People": [[1009, "people"], [1009, "id2"], [1009, "id5"], [1009, "id8"], [1009, "id11"], [1009, "id13"], [1009, "id15"], [1009, "id17"], [1010, "people"], [1010, "id2"], [1011, "people"], [1012, "people"]], "Version 0.12": [[1009, "version-0-12"]], "API changes summary": [[1009, "api-changes-summary"], [1009, "id4"], [1009, "id7"], [1009, "id10"], [1010, "api-changes-summary"], [1011, "api-changes-summary"], [1012, "api-changes-summary"], [1013, "api-changes-summary"], [1014, "api-changes-summary"], [1015, "api-changes-summary"], [1015, "id5"], [1016, "api-changes-summary"]], "Version 0.11": [[1009, "version-0-11"]], "Highlights": [[1009, "highlights"], [1012, "highlights"], [1013, "highlights"], [1016, "highlights"], [1017, "highlights"]], "Other changes": [[1009, "other-changes"]], "Version 0.10": [[1009, "version-0-10"]], "Version 0.9": [[1009, "version-0-9"]], "Version 0.8": [[1009, "version-0-8"]], "Version 0.7": [[1009, "version-0-7"]], "Version 0.6": [[1009, "version-0-6"]], "Version 0.5": [[1009, "version-0-5"]], "New classes": [[1009, "new-classes"]], "Fixes": [[1009, "fixes"]], "External dependencies": [[1009, "external-dependencies"]], "Removed modules": [[1009, "removed-modules"]], "Misc": [[1009, "misc"]], "Version 0.4": [[1009, "version-0-4"]], "Earlier versions": [[1009, "earlier-versions"]], "Version 0.13.1": [[1010, "version-0-13-1"]], "Version 0.13": [[1010, "version-0-13"]], "New Estimator Classes": [[1010, "new-estimator-classes"]], "Version 0.14": [[1011, "version-0-14"]], "Version 0.15.2": [[1012, "version-0-15-2"]], "Bug fixes": [[1012, "bug-fixes"], [1012, "id1"], [1012, "id2"], [1013, "bug-fixes"], [1013, "id2"], [1014, "bug-fixes"], [1014, "id2"], [1015, "bug-fixes"], [1015, "id4"], [1016, "bug-fixes"], [1016, "id3"]], "Version 0.15.1": [[1012, "version-0-15-1"]], "Version 0.15": [[1012, "version-0-15"]], "New features": [[1012, "new-features"], [1013, "new-features"], [1014, "new-features"], [1015, "new-features"], [1016, "new-features"]], "Enhancements": [[1012, "enhancements"], [1013, "enhancements"], [1014, "enhancements"], [1015, "enhancements"], [1015, "id3"], [1016, "enhancements"], [1016, "id2"]], "Documentation improvements": [[1012, "documentation-improvements"], [1013, "documentation-improvements"]], "Version 0.16.1": [[1013, "version-0-16-1"]], "Version 0.16": [[1013, "version-0-16"]], "Code Contributors": [[1013, "code-contributors"], [1014, "code-contributors"], [1015, "code-contributors"], [1015, "id6"]], "Version 0.17.1": [[1014, "version-0-17-1"]], "Version 0.17": [[1014, "version-0-17"]], "Version 0.18.2": [[1015, "version-0-18-2"]], "Last release with Python 2.6 support": [[1015, null], [1015, null]], "Version 0.18.1": [[1015, "version-0-18-1"]], "Version 0.18": [[1015, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1015, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1016, "version-0-19-2"]], "Related changes": [[1016, "related-changes"]], "Version 0.19.1": [[1016, "version-0-19-1"]], "API changes": [[1016, "api-changes"]], "Code and Documentation Contributors": [[1016, "code-and-documentation-contributors"], [1016, "id9"], [1017, "code-and-documentation-contributors"], [1017, "id8"], [1017, "id21"], [1017, "id41"], [1018, "code-and-documentation-contributors"], [1019, "code-and-documentation-contributors"], [1020, "code-and-documentation-contributors"], [1021, "code-and-documentation-contributors"], [1022, "code-and-documentation-contributors"], [1023, "code-and-documentation-contributors"], [1024, "code-and-documentation-contributors"], [1025, "code-and-documentation-contributors"]], "Version 0.19": [[1016, "version-0-19"]], "Changed models": [[1016, "changed-models"], [1017, "changed-models"], [1017, "id9"], [1017, "id22"], [1018, "changed-models"], [1018, "id6"], [1019, "changed-models"], [1020, "changed-models"], [1020, "id3"], [1021, "changed-models"], [1022, "changed-models"], [1023, "changed-models"], [1023, "id6"], [1024, "changed-models"], [1024, "id7"], [1025, "changed-models"]], "Version 0.20.4": [[1017, "version-0-20-4"]], "sklearn.cluster": [[1017, "sklearn-cluster"], [1017, "id2"], [1017, "id11"], [1017, "id24"], [1018, "sklearn-cluster"], [1018, "id8"], [1019, "sklearn-cluster"], [1019, "id5"], [1020, "sklearn-cluster"], [1020, "id2"], [1020, "id5"], [1021, "sklearn-cluster"], [1022, "sklearn-cluster"], [1022, "id2"], [1022, "id9"], [1023, "sklearn-cluster"], [1023, "id8"], [1024, "sklearn-cluster"], [1024, "id12"], [1025, "sklearn-cluster"]], "sklearn.compose": [[1017, "sklearn-compose"], [1017, "id3"], [1017, "id6"], [1017, "id12"], [1017, "id25"], [1018, "sklearn-compose"], [1018, "id9"], [1019, "sklearn-compose"], [1020, "sklearn-compose"], [1021, "sklearn-compose"], [1021, "id5"], [1022, "sklearn-compose"], [1023, "sklearn-compose"], [1024, "sklearn-compose"]], "sklearn.decomposition": [[1017, "sklearn-decomposition"], [1017, "id4"], [1017, "id14"], [1017, "id28"], [1018, "sklearn-decomposition"], [1018, "id11"], [1019, "sklearn-decomposition"], [1020, "sklearn-decomposition"], [1020, "id6"], [1021, "sklearn-decomposition"], [1021, "id7"], [1022, "sklearn-decomposition"], [1022, "id11"], [1023, "sklearn-decomposition"], [1023, "id10"], [1024, "sklearn-decomposition"], [1024, "id14"], [1025, "sklearn-decomposition"]], "sklearn.model_selection": [[1017, "sklearn-model-selection"], [1017, "id35"], [1018, "sklearn-model-selection"], [1019, "sklearn-model-selection"], [1019, "id9"], [1019, "id13"], [1020, "sklearn-model-selection"], [1021, "sklearn-model-selection"], [1021, "id12"], [1022, "sklearn-model-selection"], [1023, "sklearn-model-selection"], [1024, "sklearn-model-selection"], [1024, "id20"], [1025, "sklearn-model-selection"]], "sklearn.neighbors": [[1017, "sklearn-neighbors"], [1017, "id7"], [1017, "id18"], [1017, "id36"], [1018, "sklearn-neighbors"], [1018, "id5"], [1018, "id17"], [1019, "sklearn-neighbors"], [1019, "id11"], [1021, "sklearn-neighbors"], [1022, "sklearn-neighbors"], [1022, "id5"], [1022, "id18"], [1023, "sklearn-neighbors"], [1024, "sklearn-neighbors"], [1025, "sklearn-neighbors"]], "Version 0.20.3": [[1017, "version-0-20-3"]], "sklearn.covariance": [[1017, "sklearn-covariance"], [1017, "id26"], [1021, "sklearn-covariance"], [1022, "sklearn-covariance"], [1023, "sklearn-covariance"], [1025, "sklearn-covariance"]], "sklearn.datasets": [[1017, "sklearn-datasets"], [1017, "id13"], [1017, "id27"], [1018, "sklearn-datasets"], [1018, "id10"], [1019, "sklearn-datasets"], [1020, "sklearn-datasets"], [1021, "sklearn-datasets"], [1022, "sklearn-datasets"], [1022, "id10"], [1023, "sklearn-datasets"], [1023, "id9"], [1024, "sklearn-datasets"], [1024, "id13"], [1025, "sklearn-datasets"]], "sklearn.feature_extraction": [[1017, "sklearn-feature-extraction"], [1017, "id15"], [1017, "id30"], [1018, "sklearn-feature-extraction"], [1019, "sklearn-feature-extraction"], [1020, "sklearn-feature-extraction"], [1020, "id8"], [1021, "sklearn-feature-extraction"], [1022, "sklearn-feature-extraction"], [1022, "id13"], [1023, "sklearn-feature-extraction"], [1024, "sklearn-feature-extraction"], [1025, "sklearn-feature-extraction"]], "sklearn.impute": [[1017, "sklearn-impute"], [1017, "id31"], [1018, "sklearn-impute"], [1018, "id13"], [1019, "sklearn-impute"], [1019, "id6"], [1020, "sklearn-impute"], [1021, "sklearn-impute"], [1022, "sklearn-impute"], [1023, "sklearn-impute"], [1023, "id12"], [1024, "sklearn-impute"], [1025, "sklearn-impute"]], "sklearn.linear_model": [[1017, "sklearn-linear-model"], [1017, "id16"], [1017, "id32"], [1018, "sklearn-linear-model"], [1018, "id15"], [1019, "sklearn-linear-model"], [1020, "sklearn-linear-model"], [1020, "id9"], [1021, "sklearn-linear-model"], [1021, "id10"], [1022, "sklearn-linear-model"], [1022, "id4"], [1022, "id15"], [1023, "sklearn-linear-model"], [1023, "id13"], [1024, "sklearn-linear-model"], [1024, "id18"], [1025, "sklearn-linear-model"]], "sklearn.preprocessing": [[1017, "sklearn-preprocessing"], [1017, "id19"], [1017, "id37"], [1018, "sklearn-preprocessing"], [1018, "id18"], [1019, "sklearn-preprocessing"], [1019, "id12"], [1020, "sklearn-preprocessing"], [1021, "sklearn-preprocessing"], [1021, "id14"], [1022, "sklearn-preprocessing"], [1022, "id20"], [1023, "sklearn-preprocessing"], [1023, "id4"], [1023, "id16"], [1024, "sklearn-preprocessing"], [1024, "id4"], [1024, "id22"], [1025, "sklearn-preprocessing"]], "sklearn.svm": [[1017, "sklearn-svm"], [1017, "id38"], [1018, "sklearn-svm"], [1019, "sklearn-svm"], [1020, "sklearn-svm"], [1021, "sklearn-svm"], [1022, "sklearn-svm"], [1022, "id21"], [1023, "sklearn-svm"], [1024, "sklearn-svm"], [1025, "sklearn-svm"]], "Version 0.20.2": [[1017, "version-0-20-2"]], "sklearn.metrics": [[1017, "sklearn-metrics"], [1017, "id17"], [1017, "id33"], [1018, "sklearn-metrics"], [1018, "id4"], [1018, "id16"], [1019, "sklearn-metrics"], [1019, "id2"], [1019, "id8"], [1020, "sklearn-metrics"], [1020, "id10"], [1021, "sklearn-metrics"], [1021, "id2"], [1021, "id11"], [1022, "sklearn-metrics"], [1022, "id17"], [1023, "sklearn-metrics"], [1023, "id3"], [1023, "id15"], [1024, "sklearn-metrics"], [1025, "sklearn-metrics"]], "sklearn.utils": [[1017, "sklearn-utils"], [1017, "id20"], [1017, "id39"], [1018, "sklearn-utils"], [1019, "sklearn-utils"], [1019, "id14"], [1020, "sklearn-utils"], [1020, "id12"], [1021, "sklearn-utils"], [1021, "id17"], [1022, "sklearn-utils"], [1022, "id6"], [1022, "id23"], [1023, "sklearn-utils"], [1023, "id18"], [1024, "sklearn-utils"], [1024, "id6"], [1024, "id24"], [1025, "sklearn-utils"]], "Version 0.20.1": [[1017, "version-0-20-1"]], "sklearn.ensemble": [[1017, "sklearn-ensemble"], [1017, "id29"], [1018, "sklearn-ensemble"], [1018, "id12"], [1019, "sklearn-ensemble"], [1020, "sklearn-ensemble"], [1020, "id7"], [1021, "sklearn-ensemble"], [1021, "id8"], [1022, "sklearn-ensemble"], [1022, "id3"], [1022, "id12"], [1023, "sklearn-ensemble"], [1024, "sklearn-ensemble"], [1024, "id3"], [1024, "id15"], [1025, "sklearn-ensemble"]], "sklearn.mixture": [[1017, "sklearn-mixture"], [1017, "id34"], [1018, "sklearn-mixture"], [1022, "sklearn-mixture"], [1023, "sklearn-mixture"]], "Version 0.20.0": [[1017, "version-0-20-0"]], "Known Major Bugs": [[1017, "known-major-bugs"], [1018, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1017, "sklearn-discriminant-analysis"], [1018, "sklearn-discriminant-analysis"], [1021, "sklearn-discriminant-analysis"], [1023, "sklearn-discriminant-analysis"], [1024, "sklearn-discriminant-analysis"], [1025, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1017, "sklearn-dummy"], [1018, "sklearn-dummy"], [1019, "sklearn-dummy"], [1022, "sklearn-dummy"], [1023, "sklearn-dummy"]], "sklearn.feature_selection": [[1017, "sklearn-feature-selection"], [1019, "sklearn-feature-selection"], [1020, "sklearn-feature-selection"], [1021, "sklearn-feature-selection"], [1022, "sklearn-feature-selection"], [1022, "id14"], [1023, "sklearn-feature-selection"], [1023, "id2"], [1023, "id11"], [1024, "sklearn-feature-selection"], [1024, "id16"], [1025, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1017, "sklearn-gaussian-process"], [1019, "sklearn-gaussian-process"], [1020, "sklearn-gaussian-process"], [1021, "sklearn-gaussian-process"], [1021, "id9"], [1022, "sklearn-gaussian-process"], [1023, "sklearn-gaussian-process"], [1024, "sklearn-gaussian-process"], [1025, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1017, "sklearn-isotonic"], [1018, "sklearn-isotonic"], [1019, "sklearn-isotonic"], [1021, "sklearn-isotonic"], [1023, "sklearn-isotonic"], [1024, "sklearn-isotonic"]], "sklearn.manifold": [[1017, "sklearn-manifold"], [1018, "sklearn-manifold"], [1019, "sklearn-manifold"], [1020, "sklearn-manifold"], [1021, "sklearn-manifold"], [1022, "sklearn-manifold"], [1022, "id16"], [1023, "sklearn-manifold"], [1023, "id14"], [1024, "sklearn-manifold"], [1024, "id19"]], "sklearn.multioutput": [[1017, "sklearn-multioutput"], [1018, "sklearn-multioutput"], [1019, "sklearn-multioutput"], [1020, "sklearn-multioutput"], [1021, "sklearn-multioutput"], [1021, "id13"], [1024, "sklearn-multioutput"], [1025, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1017, "sklearn-naive-bayes"], [1019, "sklearn-naive-bayes"], [1019, "id10"], [1020, "sklearn-naive-bayes"], [1021, "sklearn-naive-bayes"], [1022, "sklearn-naive-bayes"], [1024, "sklearn-naive-bayes"], [1025, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1017, "sklearn-neural-network"], [1018, "sklearn-neural-network"], [1019, "sklearn-neural-network"], [1020, "sklearn-neural-network"], [1021, "sklearn-neural-network"], [1022, "sklearn-neural-network"], [1023, "sklearn-neural-network"], [1024, "sklearn-neural-network"], [1024, "id21"], [1025, "sklearn-neural-network"]], "sklearn.pipeline": [[1017, "sklearn-pipeline"], [1018, "sklearn-pipeline"], [1019, "sklearn-pipeline"], [1020, "sklearn-pipeline"], [1021, "sklearn-pipeline"], [1022, "sklearn-pipeline"], [1022, "id19"], [1023, "sklearn-pipeline"], [1024, "sklearn-pipeline"], [1025, "sklearn-pipeline"]], "sklearn.tree": [[1017, "sklearn-tree"], [1018, "sklearn-tree"], [1018, "id19"], [1019, "sklearn-tree"], [1020, "sklearn-tree"], [1021, "sklearn-tree"], [1021, "id16"], [1022, "sklearn-tree"], [1022, "id22"], [1023, "sklearn-tree"], [1023, "id5"], [1023, "id17"], [1024, "sklearn-tree"], [1024, "id5"], [1024, "id23"], [1025, "sklearn-tree"]], "Multiple modules": [[1017, "multiple-modules"], [1018, "multiple-modules"]], "Changes to estimator checks": [[1017, "changes-to-estimator-checks"], [1018, "changes-to-estimator-checks"], [1019, "changes-to-estimator-checks"]], "Version 0.21.3": [[1018, "version-0-21-3"]], "Legend for changelogs": [[1018, "legend-for-changelogs"], [1019, "legend-for-changelogs"], [1020, "legend-for-changelogs"], [1021, "legend-for-changelogs"], [1022, "legend-for-changelogs"], [1023, "legend-for-changelogs"], [1024, "legend-for-changelogs"], [1025, "legend-for-changelogs"]], "sklearn.inspection": [[1018, "sklearn-inspection"], [1018, "id3"], [1018, "id14"], [1019, "sklearn-inspection"], [1019, "id7"], [1020, "sklearn-inspection"], [1020, "id11"], [1021, "sklearn-inspection"], [1022, "sklearn-inspection"], [1023, "sklearn-inspection"], [1024, "sklearn-inspection"], [1024, "id17"], [1025, "sklearn-inspection"]], "Version 0.21.2": [[1018, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1018, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1018, "version-0-21-1"]], "Version 0.21.0": [[1018, "version-0-21-0"]], "sklearn.base": [[1018, "sklearn-base"], [1019, "sklearn-base"], [1021, "sklearn-base"], [1022, "sklearn-base"], [1023, "sklearn-base"], [1024, "sklearn-base"], [1024, "id2"], [1024, "id10"], [1025, "sklearn-base"]], "sklearn.calibration": [[1018, "sklearn-calibration"], [1019, "sklearn-calibration"], [1021, "sklearn-calibration"], [1022, "sklearn-calibration"], [1022, "id8"], [1023, "sklearn-calibration"], [1024, "sklearn-calibration"], [1024, "id11"], [1025, "sklearn-calibration"]], "sklearn.externals": [[1018, "sklearn-externals"]], "sklearn.multiclass": [[1018, "sklearn-multiclass"], [1021, "sklearn-multiclass"], [1022, "sklearn-multiclass"], [1023, "sklearn-multiclass"]], "Version 0.22.2.post1": [[1019, "version-0-22-2-post1"]], "Version 0.22.1": [[1019, "version-0-22-1"]], "sklearn.semi_supervised": [[1019, "sklearn-semi-supervised"], [1020, "sklearn-semi-supervised"], [1021, "sklearn-semi-supervised"], [1021, "id3"], [1021, "id15"], [1025, "sklearn-semi-supervised"]], "Version 0.22.0": [[1019, "version-0-22-0"]], "Website update": [[1019, "website-update"]], "Clear definition of the public API": [[1019, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1019, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1019, "sklearn-cross-decomposition"], [1021, "sklearn-cross-decomposition"], [1021, "id6"], [1023, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1019, "sklearn-kernel-approximation"], [1021, "sklearn-kernel-approximation"], [1022, "sklearn-kernel-approximation"], [1023, "sklearn-kernel-approximation"], [1024, "sklearn-kernel-approximation"]], "Version 0.23.2": [[1020, "version-0-23-2"]], "Version 0.23.1": [[1020, "version-0-23-1"]], "Version 0.23.0": [[1020, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1020, "enforcing-keyword-only-arguments"], [1022, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[1021, "version-0-24-2"]], "feature_extraction": [[1021, "feature-extraction"]], "Version 0.24.1": [[1021, "version-0-24-1"]], "Packaging": [[1021, "packaging"]], "Version 0.24.0": [[1021, "version-0-24-0"]], "sklearn.exceptions": [[1021, "sklearn-exceptions"]], "Version 1.0.2": [[1022, "version-1-0-2"]], "Version 1.0.1": [[1022, "version-1-0-1"]], "Fixed models": [[1022, "fixed-models"]], "Version 1.0.0": [[1022, "version-1-0-0"]], "Minimal dependencies": [[1022, "minimal-dependencies"], [1023, "minimal-dependencies"]], "Version 1.1.3": [[1023, "version-1-1-3"]], "Version 1.1.2": [[1023, "version-1-1-2"]], "Version 1.1.1": [[1023, "version-1-1-1"]], "Version 1.1.0": [[1023, "version-1-1-0"]], "sklearn.random_projection": [[1023, "sklearn-random-projection"]], "Version 1.2.2": [[1024, "version-1-2-2"]], "Version 1.2.1": [[1024, "version-1-2-1"]], "Changes impacting all modules": [[1024, "changes-impacting-all-modules"], [1024, "id8"], [1025, "changes-impacting-all-modules"]], "Version 1.2.0": [[1024, "version-1-2-0"]], "Version 1.3.0": [[1025, "version-1-3-0"]], "sklearn": [[1025, "sklearn"]], "sklearn.exception": [[1025, "sklearn-exception"]]}, "indexentries": {"1d": [[385, "term-1d"]], "1d array": [[385, "term-1d-array"]], "2d": [[385, "term-2d"]], "2d array": [[385, "term-2d-array"]], "api": [[385, "term-API"]], "cv splitter": [[385, "term-CV-splitter"]], "slep": [[385, "term-SLEP"]], "sleps": [[385, "term-SLEPs"]], "x": [[385, "term-X"]], "xt": [[385, "term-Xt"]], "y": [[385, "term-Y"], [385, "term-y"]], "_estimator_type": [[385, "term-_estimator_type"]], "array-like": [[385, "term-array-like"]], "attribute": [[385, "term-attribute"]], "attributes": [[385, "term-attributes"]], "backwards compatibility": [[385, "term-backwards-compatibility"]], "binary": [[385, "term-binary"]], "callable": [[385, "term-callable"]], "categorical feature": [[385, "term-categorical-feature"]], "class_weight": [[385, "term-class_weight"]], "classes_": [[385, "term-classes_"]], "classifier": [[385, "term-classifier"]], "classifiers": [[385, "term-classifiers"]], "clone": [[385, "term-clone"]], "cloned": [[385, "term-cloned"]], "clusterer": [[385, "term-clusterer"]], "clusterers": [[385, "term-clusterers"]], "coef_": [[385, "term-coef_"]], "common tests": [[385, "term-common-tests"]], "components_": [[385, "term-components_"]], "continuous": [[385, "term-continuous"]], "continuous multi-output": [[385, "term-continuous-multi-output"]], "continuous multioutput": [[385, "term-continuous-multioutput"]], "cross-validation estimator": [[385, "term-cross-validation-estimator"]], "cross-validation generator": [[385, "term-cross-validation-generator"]], "cross-validation splitter": [[385, "term-cross-validation-splitter"]], "cv": [[385, "term-cv"]], "data leakage": [[385, "term-data-leakage"]], "data type": [[385, "term-data-type"]], "decision_function": [[385, "term-decision_function"]], "density estimator": [[385, "term-density-estimator"]], "deprecation": [[385, "term-deprecation"]], "dimensionality": [[385, "term-dimensionality"]], "docstring": [[385, "term-docstring"]], "double underscore": [[385, "term-double-underscore"]], "double underscore notation": [[385, "term-double-underscore-notation"]], "dtype": [[385, "term-dtype"]], "duck typing": [[385, "term-duck-typing"]], "early stopping": [[385, "term-early-stopping"]], "embedding_": [[385, "term-embedding_"]], "estimator": [[385, "term-estimator"]], "estimator instance": [[385, "term-estimator-instance"]], "estimator tags": [[385, "term-estimator-tags"]], "estimators": [[385, "term-estimators"]], "evaluation metric": [[385, "term-evaluation-metric"]], "evaluation metrics": [[385, "term-evaluation-metrics"]], "examples": [[385, "term-examples"]], "experimental": [[385, "term-experimental"]], "feature": [[385, "term-feature"]], "feature extractor": [[385, "term-feature-extractor"]], "feature extractors": [[385, "term-feature-extractors"]], "feature vector": [[385, "term-feature-vector"]], "feature_importances_": [[385, "term-feature_importances_"]], "features": [[385, "term-features"]], "fit": [[385, "term-fit"]], "fit_predict": [[385, "term-fit_predict"]], "fit_transform": [[385, "term-fit_transform"]], "fitted": [[385, "term-fitted"]], "fitting": [[385, "term-fitting"]], "function": [[385, "term-function"]], "gallery": [[385, "term-gallery"]], "get_feature_names_out": [[385, "term-get_feature_names_out"]], "get_n_splits": [[385, "term-get_n_splits"]], "get_params": [[385, "term-get_params"]], "groups": [[385, "term-groups"]], "hyper-parameter": [[385, "term-hyper-parameter"]], "hyperparameter": [[385, "term-hyperparameter"]], "imputation": [[385, "term-imputation"]], "impute": [[385, "term-impute"]], "indexable": [[385, "term-indexable"]], "induction": [[385, "term-induction"]], "inductive": [[385, "term-inductive"]], "joblib": [[385, "term-joblib"]], "kernel": [[385, "term-kernel"]], "label indicator matrix": [[385, "term-label-indicator-matrix"]], "labels_": [[385, "term-labels_"]], "leakage": [[385, "term-leakage"]], "max_iter": [[385, "term-max_iter"]], "memmapping": [[385, "term-memmapping"]], "memory": [[385, "term-memory"]], "memory map": [[385, "term-memory-map"]], "memory mapping": [[385, "term-memory-mapping"]], "meta-estimator": [[385, "term-meta-estimator"]], "meta-estimators": [[385, "term-meta-estimators"]], "metaestimator": [[385, "term-metaestimator"]], "metaestimators": [[385, "term-metaestimators"]], "metric": [[385, "term-metric"]], "missing values": [[385, "term-missing-values"]], "multi-class": [[385, "term-multi-class"]], "multi-class multi-output": [[385, "term-multi-class-multi-output"]], "multi-label": [[385, "term-multi-label"]], "multi-output": [[385, "term-multi-output"]], "multi-output continuous": [[385, "term-multi-output-continuous"]], "multi-output multi-class": [[385, "term-multi-output-multi-class"]], "multiclass": [[385, "term-multiclass"]], "multiclass multioutput": [[385, "term-multiclass-multioutput"]], "multilabel": [[385, "term-multilabel"]], "multilabel indicator matrices": [[385, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[385, "term-multilabel-indicator-matrix"]], "multioutput": [[385, "term-multioutput"]], "multioutput continuous": [[385, "term-multioutput-continuous"]], "multioutput multiclass": [[385, "term-multioutput-multiclass"]], "n_components": [[385, "term-n_components"]], "n_features": [[385, "term-n_features"]], "n_iter_": [[385, "term-n_iter_"]], "n_iter_no_change": [[385, "term-n_iter_no_change"]], "n_jobs": [[385, "term-n_jobs"]], "n_outputs": [[385, "term-n_outputs"]], "n_samples": [[385, "term-n_samples"]], "n_targets": [[385, "term-n_targets"]], "narrative docs": [[385, "term-narrative-docs"]], "narrative documentation": [[385, "term-narrative-documentation"]], "np": [[385, "term-np"]], "online learning": [[385, "term-online-learning"]], "out-of-core": [[385, "term-out-of-core"]], "outlier detector": [[385, "term-outlier-detector"]], "outlier detectors": [[385, "term-outlier-detectors"]], "outputs": [[385, "term-outputs"]], "pair": [[385, "term-pair"]], "pairwise metric": [[385, "term-pairwise-metric"]], "pairwise metrics": [[385, "term-pairwise-metrics"]], "param": [[385, "term-param"]], "parameter": [[385, "term-parameter"]], "parameters": [[385, "term-parameters"]], "params": [[385, "term-params"]], "partial_fit": [[385, "term-partial_fit"]], "pd": [[385, "term-pd"]], "pos_label": [[385, "term-pos_label"]], "precomputed": [[385, "term-precomputed"]], "predict": [[385, "term-predict"]], "predict_log_proba": [[385, "term-predict_log_proba"]], "predict_proba": [[385, "term-predict_proba"]], "predictor": [[385, "term-predictor"]], "predictors": [[385, "term-predictors"]], "random_state": [[385, "term-random_state"]], "rectangular": [[385, "term-rectangular"]], "regressor": [[385, "term-regressor"]], "regressors": [[385, "term-regressors"]], "sample": [[385, "term-sample"]], "sample properties": [[385, "term-sample-properties"]], "sample property": [[385, "term-sample-property"]], "sample_weight": [[385, "term-sample_weight"]], "samples": [[385, "term-samples"]], "scikit-learn enhancement proposals": [[385, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[385, "term-scikit-learn-contrib"]], "score": [[385, "term-score"]], "score_samples": [[385, "term-score_samples"]], "scorer": [[385, "term-scorer"]], "scoring": [[385, "term-scoring"]], "semi-supervised": [[385, "term-semi-supervised"]], "semi-supervised learning": [[385, "term-semi-supervised-learning"]], "semisupervised": [[385, "term-semisupervised"]], "set_params": [[385, "term-set_params"]], "sparse graph": [[385, "term-sparse-graph"]], "sparse matrix": [[385, "term-sparse-matrix"]], "split": [[385, "term-split"]], "stateless": [[385, "term-stateless"]], "supervised": [[385, "term-supervised"]], "supervised learning": [[385, "term-supervised-learning"]], "target": [[385, "term-target"]], "targets": [[385, "term-targets"]], "transduction": [[385, "term-transduction"]], "transductive": [[385, "term-transductive"]], "transform": [[385, "term-transform"]], "transformer": [[385, "term-transformer"]], "transformers": [[385, "term-transformers"]], "unlabeled": [[385, "term-unlabeled"]], "unlabeled data": [[385, "term-unlabeled-data"]], "unsupervised": [[385, "term-unsupervised"]], "unsupervised learning": [[385, "term-unsupervised-learning"]], "vectorizer": [[385, "term-vectorizer"]], "vectorizers": [[385, "term-vectorizers"]], "verbose": [[385, "term-verbose"]], "warm_start": [[385, "term-warm_start"]], "module": [[396, "module-sklearn.base"], [396, "module-sklearn.calibration"], [396, "module-sklearn.cluster"], [396, "module-sklearn.compose"], [396, "module-sklearn.covariance"], [396, "module-sklearn.cross_decomposition"], [396, "module-sklearn.datasets"], [396, "module-sklearn.decomposition"], [396, "module-sklearn.discriminant_analysis"], [396, "module-sklearn.dummy"], [396, "module-sklearn.ensemble"], [396, "module-sklearn.exceptions"], [396, "module-sklearn.experimental"], [396, "module-sklearn.feature_extraction"], [396, "module-sklearn.feature_extraction.image"], [396, "module-sklearn.feature_extraction.text"], [396, "module-sklearn.feature_selection"], [396, "module-sklearn.gaussian_process"], [396, "module-sklearn.impute"], [396, "module-sklearn.inspection"], [396, "module-sklearn.isotonic"], [396, "module-sklearn.kernel_approximation"], [396, "module-sklearn.kernel_ridge"], [396, "module-sklearn.linear_model"], [396, "module-sklearn.manifold"], [396, "module-sklearn.metrics"], [396, "module-sklearn.metrics.cluster"], [396, "module-sklearn.metrics.pairwise"], [396, "module-sklearn.mixture"], [396, "module-sklearn.model_selection"], [396, "module-sklearn.multiclass"], [396, "module-sklearn.multioutput"], [396, "module-sklearn.naive_bayes"], [396, "module-sklearn.neighbors"], [396, "module-sklearn.neural_network"], [396, "module-sklearn.pipeline"], [396, "module-sklearn.preprocessing"], [396, "module-sklearn.random_projection"], [396, "module-sklearn.semi_supervised"], [396, "module-sklearn.svm"], [396, "module-sklearn.tree"], [396, "module-sklearn.utils"], [565, "module-sklearn.experimental.enable_halving_search_cv"], [566, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[396, "module-sklearn.base"]], "sklearn.calibration": [[396, "module-sklearn.calibration"]], "sklearn.cluster": [[396, "module-sklearn.cluster"]], "sklearn.compose": [[396, "module-sklearn.compose"]], "sklearn.covariance": [[396, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[396, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[396, "module-sklearn.datasets"]], "sklearn.decomposition": [[396, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[396, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[396, "module-sklearn.dummy"]], "sklearn.ensemble": [[396, "module-sklearn.ensemble"]], "sklearn.exceptions": [[396, "module-sklearn.exceptions"]], "sklearn.experimental": [[396, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[396, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[396, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[396, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[396, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[396, "module-sklearn.gaussian_process"]], "sklearn.impute": [[396, "module-sklearn.impute"]], "sklearn.inspection": [[396, "module-sklearn.inspection"]], "sklearn.isotonic": [[396, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[396, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[396, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[396, "module-sklearn.linear_model"]], "sklearn.manifold": [[396, "module-sklearn.manifold"]], "sklearn.metrics": [[396, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[396, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[396, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[396, "module-sklearn.mixture"]], "sklearn.model_selection": [[396, "module-sklearn.model_selection"]], "sklearn.multiclass": [[396, "module-sklearn.multiclass"]], "sklearn.multioutput": [[396, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[396, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[396, "module-sklearn.neighbors"]], "sklearn.neural_network": [[396, "module-sklearn.neural_network"]], "sklearn.pipeline": [[396, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[396, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[396, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[396, "module-sklearn.semi_supervised"]], "sklearn.svm": [[396, "module-sklearn.svm"]], "sklearn.tree": [[396, "module-sklearn.tree"]], "sklearn.utils": [[396, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[408, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[409, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[410, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[411, "sklearn.base.BaseEstimator"]], "get_params() (sklearn.base.baseestimator method)": [[411, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[411, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[412, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[412, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[412, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[412, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[412, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[413, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[413, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[414, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[414, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[415, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[415, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[416, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[416, "sklearn.base.DensityMixin.score"]], "onetoonefeaturemixin (class in sklearn.base)": [[417, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[417, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "regressormixin (class in sklearn.base)": [[418, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[418, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[419, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[419, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[419, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[420, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[421, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[422, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[423, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[423, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[423, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[423, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[423, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[423, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[423, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "calibrationdisplay (class in sklearn.calibration)": [[424, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[424, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[424, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[424, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[425, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[426, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[426, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[426, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[426, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[426, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[426, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[427, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[427, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[427, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[427, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[427, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[428, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[428, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[428, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[428, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[428, "sklearn.cluster.Birch.get_feature_names_out"]], "get_params() (sklearn.cluster.birch method)": [[428, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[428, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[428, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[428, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[428, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[428, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[429, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[429, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[429, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[429, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[429, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[429, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[429, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[429, "sklearn.cluster.BisectingKMeans.score"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[429, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[429, "sklearn.cluster.BisectingKMeans.set_params"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[429, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[430, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[430, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[430, "sklearn.cluster.DBSCAN.fit_predict"]], "get_params() (sklearn.cluster.dbscan method)": [[430, "sklearn.cluster.DBSCAN.get_params"]], "set_params() (sklearn.cluster.dbscan method)": [[430, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[431, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[431, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[431, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[431, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[431, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[431, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[431, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[431, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[431, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[431, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[432, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[432, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[432, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[432, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_params() (sklearn.cluster.hdbscan method)": [[432, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[432, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[433, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[433, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[433, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[433, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[433, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.kmeans method)": [[433, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[433, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[433, "sklearn.cluster.KMeans.score"]], "set_output() (sklearn.cluster.kmeans method)": [[433, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[433, "sklearn.cluster.KMeans.set_params"]], "transform() (sklearn.cluster.kmeans method)": [[433, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[434, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[434, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[434, "sklearn.cluster.MeanShift.fit_predict"]], "get_params() (sklearn.cluster.meanshift method)": [[434, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[434, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[434, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[435, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[435, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[435, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[435, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[435, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[435, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[435, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[435, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[435, "sklearn.cluster.MiniBatchKMeans.score"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[435, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[435, "sklearn.cluster.MiniBatchKMeans.set_params"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[435, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[436, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[436, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[436, "sklearn.cluster.OPTICS.fit_predict"]], "get_params() (sklearn.cluster.optics method)": [[436, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[436, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[437, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[437, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[437, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[437, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[437, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[437, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[437, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[437, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[438, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[438, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[438, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_params() (sklearn.cluster.spectralclustering method)": [[438, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[438, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[439, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[439, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[439, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[439, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[439, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[439, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[439, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[439, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[440, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[441, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[442, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[443, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[444, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[445, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[446, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[447, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[448, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[449, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[450, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[450, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[450, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[450, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_params() (sklearn.compose.columntransformer method)": [[450, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[450, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[450, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[450, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[450, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[451, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[451, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[451, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[451, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[451, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[451, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[451, "sklearn.compose.TransformedTargetRegressor.set_params"]], "make_column_selector() (in module sklearn.compose)": [[452, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[453, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[454, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[455, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[455, "sklearn.covariance.EllipticEnvelope.set_params"]], "empiricalcovariance (class in sklearn.covariance)": [[456, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[456, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[456, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[456, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[456, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[456, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[456, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[456, "sklearn.covariance.EmpiricalCovariance.set_params"]], "graphicallasso (class in sklearn.covariance)": [[457, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[457, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[457, "sklearn.covariance.GraphicalLasso.fit"]], "get_params() (sklearn.covariance.graphicallasso method)": [[457, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[457, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[457, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[457, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[457, "sklearn.covariance.GraphicalLasso.set_params"]], "graphicallassocv (class in sklearn.covariance)": [[458, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[458, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[458, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[458, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[458, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[458, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[458, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[458, "sklearn.covariance.GraphicalLassoCV.set_params"]], "ledoitwolf (class in sklearn.covariance)": [[459, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[459, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[459, "sklearn.covariance.LedoitWolf.fit"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[459, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[459, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[459, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[459, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[459, "sklearn.covariance.LedoitWolf.set_params"]], "mincovdet (class in sklearn.covariance)": [[460, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[460, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[460, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[460, "sklearn.covariance.MinCovDet.fit"]], "get_params() (sklearn.covariance.mincovdet method)": [[460, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[460, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[460, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[460, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[460, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[460, "sklearn.covariance.MinCovDet.set_params"]], "oas (class in sklearn.covariance)": [[461, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[461, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[461, "sklearn.covariance.OAS.fit"]], "get_params() (sklearn.covariance.oas method)": [[461, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[461, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[461, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[461, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[461, "sklearn.covariance.OAS.set_params"]], "shrunkcovariance (class in sklearn.covariance)": [[462, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[462, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[462, "sklearn.covariance.ShrunkCovariance.fit"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[462, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[462, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[462, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[462, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[462, "sklearn.covariance.ShrunkCovariance.set_params"]], "empirical_covariance() (in module sklearn.covariance)": [[463, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[464, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[465, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[466, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[467, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[468, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[468, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[468, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[468, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.cca method)": [[468, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[468, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[468, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[468, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[468, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[468, "sklearn.cross_decomposition.CCA.set_params"]], "transform() (sklearn.cross_decomposition.cca method)": [[468, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[469, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[469, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[469, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[469, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[469, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[469, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[469, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[469, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[469, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[469, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[469, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[470, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[470, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[470, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[470, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[470, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[470, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[470, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[470, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[470, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[470, "sklearn.cross_decomposition.PLSRegression.set_params"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[470, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[471, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[471, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[471, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[471, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[471, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[471, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[471, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[471, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[472, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[473, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[474, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[475, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[476, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[477, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[478, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[479, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[480, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[481, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[482, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[483, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[484, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[485, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[486, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[487, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[488, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[489, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[490, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[491, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[492, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[493, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[494, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[495, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[496, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[497, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[498, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[499, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[500, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[501, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[502, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[503, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[504, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[505, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[506, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[507, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[508, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[517, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[517, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[517, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[517, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[517, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[517, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[517, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[517, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[518, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[518, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[518, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[518, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[518, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[518, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[518, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[518, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[518, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[518, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[518, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[518, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[519, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[519, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[519, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[519, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_params() (sklearn.decomposition.fastica method)": [[519, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[519, "sklearn.decomposition.FastICA.inverse_transform"]], "set_output() (sklearn.decomposition.fastica method)": [[519, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[519, "sklearn.decomposition.FastICA.set_params"]], "transform() (sklearn.decomposition.fastica method)": [[519, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[520, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[520, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[520, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[520, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[520, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[520, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[520, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[520, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[520, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[520, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[520, "sklearn.decomposition.IncrementalPCA.set_params"]], "transform() (sklearn.decomposition.incrementalpca method)": [[520, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[521, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[521, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[521, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[521, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.kernelpca method)": [[521, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[521, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[521, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[521, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[521, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[522, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[522, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[522, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[522, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[522, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[522, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[522, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[522, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[522, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[522, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[522, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[523, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[523, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[523, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[523, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[523, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[523, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[523, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[523, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[523, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[524, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[524, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[524, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[524, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[524, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[524, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[524, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[524, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[524, "sklearn.decomposition.MiniBatchNMF.set_params"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[524, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[525, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[525, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[525, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[525, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[525, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[525, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[525, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[525, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[525, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[526, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[526, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[526, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[526, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.nmf method)": [[526, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[526, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[526, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[526, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[526, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[527, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[527, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[527, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[527, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[527, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.pca method)": [[527, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[527, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[527, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[527, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[527, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[527, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[527, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[527, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[528, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[528, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[528, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[528, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[528, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[528, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[528, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[528, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[528, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[528, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[529, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[529, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[529, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[529, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsepca method)": [[529, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[529, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[529, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[529, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[529, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[530, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[530, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[530, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[530, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[530, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[530, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[530, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[530, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[530, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[531, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[532, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[533, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[534, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[535, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[536, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[536, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[536, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[536, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[536, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[536, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[536, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[536, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[536, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "dummyclassifier (class in sklearn.dummy)": [[537, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[537, "sklearn.dummy.DummyClassifier.fit"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[537, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[537, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[537, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[537, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[537, "sklearn.dummy.DummyClassifier.score"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[537, "sklearn.dummy.DummyClassifier.set_params"]], "dummyregressor (class in sklearn.dummy)": [[538, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[538, "sklearn.dummy.DummyRegressor.fit"]], "get_params() (sklearn.dummy.dummyregressor method)": [[538, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[538, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[538, "sklearn.dummy.DummyRegressor.score"]], "set_params() (sklearn.dummy.dummyregressor method)": [[538, "sklearn.dummy.DummyRegressor.set_params"]], "adaboostclassifier (class in sklearn.ensemble)": [[539, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[539, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[539, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[539, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[539, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[539, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[539, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[539, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[539, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[539, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[539, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[539, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[539, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[539, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[539, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[540, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[540, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[540, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[540, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[540, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[540, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[540, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[540, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[540, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[540, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[541, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[541, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[541, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[541, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[541, "sklearn.ensemble.BaggingClassifier.fit"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[541, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[541, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[541, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[541, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[541, "sklearn.ensemble.BaggingClassifier.score"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[541, "sklearn.ensemble.BaggingClassifier.set_params"]], "baggingregressor (class in sklearn.ensemble)": [[542, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[542, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[542, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[542, "sklearn.ensemble.BaggingRegressor.fit"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[542, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[542, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[542, "sklearn.ensemble.BaggingRegressor.score"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[542, "sklearn.ensemble.BaggingRegressor.set_params"]], "extratreesclassifier (class in sklearn.ensemble)": [[543, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[543, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[543, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[543, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[543, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[543, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[543, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[543, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[543, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[543, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[543, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[543, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "extratreesregressor (class in sklearn.ensemble)": [[544, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[544, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[544, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[544, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[544, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[544, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[544, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[544, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[544, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[544, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[545, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[545, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[545, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[545, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[545, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[545, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[545, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[545, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[545, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[545, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[545, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[545, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[545, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[545, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[545, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[546, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[546, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[546, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[546, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[546, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[546, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[546, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[546, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[546, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[546, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[547, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[547, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[547, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[547, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[547, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[547, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[547, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[547, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[547, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[547, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[547, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[547, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[548, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[548, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[548, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[548, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[548, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[548, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[548, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[548, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[549, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[549, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[549, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[549, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[549, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[549, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_params() (sklearn.ensemble.isolationforest method)": [[549, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[549, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[549, "sklearn.ensemble.IsolationForest.score_samples"]], "set_params() (sklearn.ensemble.isolationforest method)": [[549, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[550, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[550, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[550, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[550, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[550, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[550, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[550, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[550, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[550, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[550, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[550, "sklearn.ensemble.RandomForestClassifier.score"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[550, "sklearn.ensemble.RandomForestClassifier.set_params"]], "randomforestregressor (class in sklearn.ensemble)": [[551, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[551, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[551, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[551, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[551, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[551, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[551, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[551, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[551, "sklearn.ensemble.RandomForestRegressor.score"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[551, "sklearn.ensemble.RandomForestRegressor.set_params"]], "randomtreesembedding (class in sklearn.ensemble)": [[552, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[552, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[552, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[552, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[552, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[552, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[552, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[552, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[552, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[552, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[552, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[552, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[553, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[553, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[553, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[553, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[553, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[553, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[553, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[553, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[553, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[553, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[553, "sklearn.ensemble.StackingClassifier.score"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[553, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[553, "sklearn.ensemble.StackingClassifier.set_params"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[553, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[554, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[554, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[554, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[554, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[554, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[554, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[554, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[554, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[554, "sklearn.ensemble.StackingRegressor.score"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[554, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[554, "sklearn.ensemble.StackingRegressor.set_params"]], "transform() (sklearn.ensemble.stackingregressor method)": [[554, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[555, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[555, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[555, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[555, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[555, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[555, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[555, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[555, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[555, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[555, "sklearn.ensemble.VotingClassifier.score"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[555, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[555, "sklearn.ensemble.VotingClassifier.set_params"]], "transform() (sklearn.ensemble.votingclassifier method)": [[555, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[556, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[556, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[556, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[556, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingregressor method)": [[556, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[556, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[556, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[556, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[556, "sklearn.ensemble.VotingRegressor.score"]], "set_output() (sklearn.ensemble.votingregressor method)": [[556, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[556, "sklearn.ensemble.VotingRegressor.set_params"]], "transform() (sklearn.ensemble.votingregressor method)": [[556, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[557, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[557, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[558, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[558, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[559, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[559, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[560, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[560, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[561, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[561, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[562, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[562, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[563, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[563, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[564, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[564, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[565, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[566, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[567, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[567, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[567, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[567, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[567, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[567, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[567, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[567, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[567, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[567, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[568, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[568, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[568, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[568, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[568, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[568, "sklearn.feature_extraction.FeatureHasher.set_params"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[568, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[569, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[569, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[569, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[569, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[569, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[569, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[569, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[570, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[571, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[572, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[573, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[574, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[574, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[574, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[574, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[574, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[574, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[574, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[574, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[574, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[574, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[574, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[574, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[574, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[575, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[575, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[575, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[575, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[575, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[575, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[575, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[575, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[575, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[575, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[575, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[575, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[575, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[576, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[576, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[576, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[576, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[576, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[576, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[576, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[576, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[576, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[577, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[578, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[578, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[578, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[578, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[578, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[578, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[578, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[578, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[578, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[578, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[579, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[579, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[579, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[580, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[580, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.score"]], "set_output() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[580, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[581, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[581, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[581, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[581, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[581, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[581, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[581, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[581, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[581, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[581, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[582, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[582, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[582, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[582, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[582, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[582, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[582, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[582, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[582, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[582, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[583, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[583, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[583, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[583, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[583, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[583, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[583, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[583, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[583, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[583, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[583, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[583, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[583, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[584, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[584, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[584, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[584, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[584, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[584, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[584, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[584, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[584, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[584, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[585, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[585, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[585, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[585, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[585, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[585, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[585, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[585, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[585, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[585, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[586, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[586, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[586, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[586, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[586, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[586, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[586, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[586, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[586, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[586, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[587, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[587, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[587, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[587, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[587, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[587, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[587, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[588, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[588, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[588, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[588, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[588, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[588, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[588, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[588, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[588, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[588, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[589, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[589, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[589, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[589, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[589, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[589, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[589, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[589, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[589, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[589, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[590, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[591, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[592, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[593, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[594, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[595, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[596, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[596, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[596, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[596, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[596, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[596, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[596, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[596, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[596, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[597, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[597, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[597, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[597, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[597, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[597, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[597, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[597, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[598, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[598, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[598, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[598, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[598, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[598, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[598, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[598, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[598, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[598, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[598, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[598, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[599, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[599, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[599, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[599, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[599, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[599, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[599, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[599, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[599, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[599, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[599, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[599, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[600, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[600, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[600, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[600, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[600, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[600, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[600, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[600, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[600, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[600, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[600, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[600, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[601, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[602, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[602, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[602, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[602, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[602, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[602, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[602, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[602, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[602, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[602, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[602, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[602, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[603, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[603, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[603, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[603, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[603, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[603, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[603, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[603, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[603, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[604, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[604, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[604, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[604, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[604, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[604, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[604, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[604, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[604, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[604, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[604, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[604, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[605, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[605, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[605, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[605, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[605, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[605, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[605, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[605, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[605, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[605, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[605, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[605, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[606, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[606, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[606, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[606, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[606, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[606, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[606, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[606, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[606, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[606, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[606, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[606, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[607, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[607, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[607, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[607, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[607, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[607, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[607, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[607, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[607, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[607, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[607, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[607, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[608, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[608, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[608, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[608, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[608, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[608, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[608, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[608, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[608, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[608, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[608, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[608, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[609, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[609, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[609, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[609, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[609, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[609, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[609, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[609, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[609, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[609, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[609, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[609, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[610, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[610, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[610, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[610, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[610, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[610, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[610, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[610, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[610, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[610, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[610, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[610, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[611, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[611, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[611, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[611, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[611, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[611, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[611, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[611, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[611, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[611, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[611, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[611, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[612, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[613, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[613, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[613, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[613, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_params() (sklearn.impute.iterativeimputer method)": [[613, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[613, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[613, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[613, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[614, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[614, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[614, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[614, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_params() (sklearn.impute.knnimputer method)": [[614, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[614, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[614, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[614, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[615, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[615, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[615, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[615, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_params() (sklearn.impute.missingindicator method)": [[615, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[615, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[615, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[615, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[616, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[616, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[616, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[616, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_params() (sklearn.impute.simpleimputer method)": [[616, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[616, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[616, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[616, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[616, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[617, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[617, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[617, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[618, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[618, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[618, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[619, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[620, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[621, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[621, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[621, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[621, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[621, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[621, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[621, "sklearn.isotonic.IsotonicRegression.score"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[621, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[621, "sklearn.isotonic.IsotonicRegression.set_params"]], "transform() (sklearn.isotonic.isotonicregression method)": [[621, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[622, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[623, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[624, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[624, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[624, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[624, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[624, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[624, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[624, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[624, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[625, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[625, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[625, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[625, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[625, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[625, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[625, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[625, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[626, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[626, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[626, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[626, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[626, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[626, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[626, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[626, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[627, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[627, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[627, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[627, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[627, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[627, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[627, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[627, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[628, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[628, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[628, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[628, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[628, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[628, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[628, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[628, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[629, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[629, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[629, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[629, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[629, "sklearn.kernel_ridge.KernelRidge.score"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[629, "sklearn.kernel_ridge.KernelRidge.set_params"]], "ardregression (class in sklearn.linear_model)": [[630, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[630, "sklearn.linear_model.ARDRegression.fit"]], "get_params() (sklearn.linear_model.ardregression method)": [[630, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[630, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[630, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[630, "sklearn.linear_model.ARDRegression.set_params"]], "bayesianridge (class in sklearn.linear_model)": [[631, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[631, "sklearn.linear_model.BayesianRidge.fit"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[631, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[631, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[631, "sklearn.linear_model.BayesianRidge.score"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[631, "sklearn.linear_model.BayesianRidge.set_params"]], "elasticnet (class in sklearn.linear_model)": [[632, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[632, "sklearn.linear_model.ElasticNet.fit"]], "get_params() (sklearn.linear_model.elasticnet method)": [[632, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[632, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[632, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[632, "sklearn.linear_model.ElasticNet.score"]], "set_params() (sklearn.linear_model.elasticnet method)": [[632, "sklearn.linear_model.ElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[632, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[633, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[633, "sklearn.linear_model.ElasticNetCV.fit"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[633, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[633, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[633, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[633, "sklearn.linear_model.ElasticNetCV.score"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[633, "sklearn.linear_model.ElasticNetCV.set_params"]], "gammaregressor (class in sklearn.linear_model)": [[634, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[634, "sklearn.linear_model.GammaRegressor.fit"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[634, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[634, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[634, "sklearn.linear_model.GammaRegressor.score"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[634, "sklearn.linear_model.GammaRegressor.set_params"]], "huberregressor (class in sklearn.linear_model)": [[635, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[635, "sklearn.linear_model.HuberRegressor.fit"]], "get_params() (sklearn.linear_model.huberregressor method)": [[635, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[635, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[635, "sklearn.linear_model.HuberRegressor.score"]], "set_params() (sklearn.linear_model.huberregressor method)": [[635, "sklearn.linear_model.HuberRegressor.set_params"]], "lars (class in sklearn.linear_model)": [[636, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[636, "sklearn.linear_model.Lars.fit"]], "get_params() (sklearn.linear_model.lars method)": [[636, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[636, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[636, "sklearn.linear_model.Lars.score"]], "set_params() (sklearn.linear_model.lars method)": [[636, "sklearn.linear_model.Lars.set_params"]], "larscv (class in sklearn.linear_model)": [[637, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[637, "sklearn.linear_model.LarsCV.fit"]], "get_params() (sklearn.linear_model.larscv method)": [[637, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[637, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[637, "sklearn.linear_model.LarsCV.score"]], "set_params() (sklearn.linear_model.larscv method)": [[637, "sklearn.linear_model.LarsCV.set_params"]], "lasso (class in sklearn.linear_model)": [[638, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[638, "sklearn.linear_model.Lasso.fit"]], "get_params() (sklearn.linear_model.lasso method)": [[638, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[638, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[638, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[638, "sklearn.linear_model.Lasso.score"]], "set_params() (sklearn.linear_model.lasso method)": [[638, "sklearn.linear_model.Lasso.set_params"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[638, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[639, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[639, "sklearn.linear_model.LassoCV.fit"]], "get_params() (sklearn.linear_model.lassocv method)": [[639, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[639, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[639, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[639, "sklearn.linear_model.LassoCV.score"]], "set_params() (sklearn.linear_model.lassocv method)": [[639, "sklearn.linear_model.LassoCV.set_params"]], "lassolars (class in sklearn.linear_model)": [[640, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[640, "sklearn.linear_model.LassoLars.fit"]], "get_params() (sklearn.linear_model.lassolars method)": [[640, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[640, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[640, "sklearn.linear_model.LassoLars.score"]], "set_params() (sklearn.linear_model.lassolars method)": [[640, "sklearn.linear_model.LassoLars.set_params"]], "lassolarscv (class in sklearn.linear_model)": [[641, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[641, "sklearn.linear_model.LassoLarsCV.fit"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[641, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[641, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[641, "sklearn.linear_model.LassoLarsCV.score"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[641, "sklearn.linear_model.LassoLarsCV.set_params"]], "lassolarsic (class in sklearn.linear_model)": [[642, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[642, "sklearn.linear_model.LassoLarsIC.fit"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[642, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[642, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[642, "sklearn.linear_model.LassoLarsIC.score"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[642, "sklearn.linear_model.LassoLarsIC.set_params"]], "linearregression (class in sklearn.linear_model)": [[643, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[643, "sklearn.linear_model.LinearRegression.fit"]], "get_params() (sklearn.linear_model.linearregression method)": [[643, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[643, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[643, "sklearn.linear_model.LinearRegression.score"]], "set_params() (sklearn.linear_model.linearregression method)": [[643, "sklearn.linear_model.LinearRegression.set_params"]], "logisticregression (class in sklearn.linear_model)": [[644, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[644, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[644, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[644, "sklearn.linear_model.LogisticRegression.fit"]], "get_params() (sklearn.linear_model.logisticregression method)": [[644, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[644, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[644, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[644, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[644, "sklearn.linear_model.LogisticRegression.score"]], "set_params() (sklearn.linear_model.logisticregression method)": [[644, "sklearn.linear_model.LogisticRegression.set_params"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[644, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[645, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[645, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[645, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[645, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[645, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[645, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[645, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[645, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[645, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[645, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[645, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[646, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[646, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[646, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[646, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[646, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[646, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[646, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[646, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[647, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[647, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[647, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[647, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[647, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[647, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[647, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "multitasklasso (class in sklearn.linear_model)": [[648, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[648, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[648, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[648, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[648, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[648, "sklearn.linear_model.MultiTaskLasso.score"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[648, "sklearn.linear_model.MultiTaskLasso.set_params"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[648, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[649, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[649, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[649, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[649, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[649, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[649, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[649, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[650, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[650, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[650, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[650, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[650, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[650, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[651, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[651, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[651, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[651, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[651, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[651, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[652, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[652, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[652, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[652, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[652, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[652, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[652, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[652, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[652, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[652, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[653, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[654, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[654, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[654, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[654, "sklearn.linear_model.Perceptron.fit"]], "get_params() (sklearn.linear_model.perceptron method)": [[654, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[654, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[654, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[654, "sklearn.linear_model.Perceptron.score"]], "set_params() (sklearn.linear_model.perceptron method)": [[654, "sklearn.linear_model.Perceptron.set_params"]], "sparsify() (sklearn.linear_model.perceptron method)": [[654, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[655, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[655, "sklearn.linear_model.PoissonRegressor.fit"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[655, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[655, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[655, "sklearn.linear_model.PoissonRegressor.score"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[655, "sklearn.linear_model.PoissonRegressor.set_params"]], "quantileregressor (class in sklearn.linear_model)": [[656, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[656, "sklearn.linear_model.QuantileRegressor.fit"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[656, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[656, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[656, "sklearn.linear_model.QuantileRegressor.score"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[656, "sklearn.linear_model.QuantileRegressor.set_params"]], "ransacregressor (class in sklearn.linear_model)": [[657, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[657, "sklearn.linear_model.RANSACRegressor.fit"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[657, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[657, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[657, "sklearn.linear_model.RANSACRegressor.score"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[657, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[658, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[658, "sklearn.linear_model.Ridge.fit"]], "get_params() (sklearn.linear_model.ridge method)": [[658, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[658, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[658, "sklearn.linear_model.Ridge.score"]], "set_params() (sklearn.linear_model.ridge method)": [[658, "sklearn.linear_model.Ridge.set_params"]], "ridgecv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[659, "sklearn.linear_model.RidgeCV.fit"]], "get_params() (sklearn.linear_model.ridgecv method)": [[659, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[659, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[659, "sklearn.linear_model.RidgeCV.score"]], "set_params() (sklearn.linear_model.ridgecv method)": [[659, "sklearn.linear_model.RidgeCV.set_params"]], "ridgeclassifier (class in sklearn.linear_model)": [[660, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[660, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[660, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[660, "sklearn.linear_model.RidgeClassifier.fit"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[660, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[660, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[660, "sklearn.linear_model.RidgeClassifier.score"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[660, "sklearn.linear_model.RidgeClassifier.set_params"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[661, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[661, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[661, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[661, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[661, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[661, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[661, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[661, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "sgdclassifier (class in sklearn.linear_model)": [[662, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[662, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[662, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[662, "sklearn.linear_model.SGDClassifier.fit"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[662, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[662, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[662, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[662, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[662, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[662, "sklearn.linear_model.SGDClassifier.score"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[662, "sklearn.linear_model.SGDClassifier.set_params"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[662, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[663, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[663, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[663, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[663, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[663, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[663, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[663, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[663, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[663, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[663, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[663, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[664, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[664, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[664, "sklearn.linear_model.SGDRegressor.fit"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[664, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[664, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[664, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[664, "sklearn.linear_model.SGDRegressor.score"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[664, "sklearn.linear_model.SGDRegressor.set_params"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[664, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[665, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[665, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[665, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[665, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[665, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[665, "sklearn.linear_model.TheilSenRegressor.set_params"]], "tweedieregressor (class in sklearn.linear_model)": [[666, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[666, "sklearn.linear_model.TweedieRegressor.fit"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[666, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[666, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[666, "sklearn.linear_model.TweedieRegressor.score"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[666, "sklearn.linear_model.TweedieRegressor.set_params"]], "enet_path() (in module sklearn.linear_model)": [[667, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[668, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[669, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[670, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[671, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[672, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[673, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[674, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[674, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[674, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[674, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_params() (sklearn.manifold.isomap method)": [[674, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[674, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[674, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[674, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[674, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[675, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[675, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[675, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[675, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[675, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[675, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[675, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[675, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[676, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[676, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[676, "sklearn.manifold.MDS.fit_transform"]], "get_params() (sklearn.manifold.mds method)": [[676, "sklearn.manifold.MDS.get_params"]], "set_params() (sklearn.manifold.mds method)": [[676, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[677, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[677, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[677, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_params() (sklearn.manifold.spectralembedding method)": [[677, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[677, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[678, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[678, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[678, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[678, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_params() (sklearn.manifold.tsne method)": [[678, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[678, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[678, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[679, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[680, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[681, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[682, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[683, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[683, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[683, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[683, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[684, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[684, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[684, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[684, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[685, "sklearn.metrics.DistanceMetric"]], "dist_to_rdist() (sklearn.metrics.distancemetric method)": [[685, "sklearn.metrics.DistanceMetric.dist_to_rdist"]], "get_metric() (sklearn.metrics.distancemetric method)": [[685, "sklearn.metrics.DistanceMetric.get_metric"]], "pairwise() (sklearn.metrics.distancemetric method)": [[685, "sklearn.metrics.DistanceMetric.pairwise"]], "rdist_to_dist() (sklearn.metrics.distancemetric method)": [[685, "sklearn.metrics.DistanceMetric.rdist_to_dist"]], "precisionrecalldisplay (class in sklearn.metrics)": [[686, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[686, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[686, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[686, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[687, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[687, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[687, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[687, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[688, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[688, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[688, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[688, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[689, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[690, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[691, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[692, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[693, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[694, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[695, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[696, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[697, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[698, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[699, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[700, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[701, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[704, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[706, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[712, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[717, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[718, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[719, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[720, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[721, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[725, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[726, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[727, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[728, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[729, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[730, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[731, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[732, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[733, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[734, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[735, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[736, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[737, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[738, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[739, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[740, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[741, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[742, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[743, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[744, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[745, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[746, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[747, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[748, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[749, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[750, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[751, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[752, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[753, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[754, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[763, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[764, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[765, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[766, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[767, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[768, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[769, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[770, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[771, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[772, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[773, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[774, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[775, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[776, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[777, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[778, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[779, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[780, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[780, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[780, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[780, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[780, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[780, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[780, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[780, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[780, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[780, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[781, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[781, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[781, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[781, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[781, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[781, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[781, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[781, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[781, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[781, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[781, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[781, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[782, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[782, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[782, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[782, "sklearn.model_selection.GridSearchCV.fit"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[782, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[782, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[782, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[782, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[782, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[782, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[782, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[782, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[782, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[782, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[783, "sklearn.model_selection.GroupKFold"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[783, "sklearn.model_selection.GroupKFold.get_n_splits"]], "split() (sklearn.model_selection.groupkfold method)": [[783, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[784, "sklearn.model_selection.GroupShuffleSplit"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[784, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[784, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[785, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[785, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[785, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[785, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[785, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[785, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[785, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[785, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[785, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[785, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[785, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[785, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[785, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[785, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[786, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[786, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[787, "sklearn.model_selection.KFold"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[787, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[787, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[788, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[788, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[788, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[789, "sklearn.model_selection.LeaveOneGroupOut"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[789, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[789, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[790, "sklearn.model_selection.LeaveOneOut"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[790, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[790, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[791, "sklearn.model_selection.LeavePGroupsOut"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[791, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[791, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[792, "sklearn.model_selection.LeavePOut"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[792, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[792, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[793, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[794, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[795, "sklearn.model_selection.PredefinedSplit"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[795, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[795, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[796, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[796, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[796, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[796, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[796, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[796, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[796, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[796, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[796, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[796, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[796, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[796, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[796, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[796, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[797, "sklearn.model_selection.RepeatedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[797, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[797, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[798, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[798, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[798, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[799, "sklearn.model_selection.ShuffleSplit"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[799, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[799, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[800, "sklearn.model_selection.StratifiedGroupKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[800, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[800, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[801, "sklearn.model_selection.StratifiedKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[801, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[801, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[802, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[802, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[802, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[803, "sklearn.model_selection.TimeSeriesSplit"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[803, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[803, "sklearn.model_selection.TimeSeriesSplit.split"]], "check_cv() (in module sklearn.model_selection)": [[804, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[805, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[806, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[807, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[808, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[809, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[810, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[811, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[812, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[812, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[812, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[812, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[812, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[812, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[812, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[812, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[812, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "onevsrestclassifier (class in sklearn.multiclass)": [[813, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[813, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[813, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[813, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[813, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[813, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[813, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[813, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[813, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[813, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[813, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "outputcodeclassifier (class in sklearn.multiclass)": [[814, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[814, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[814, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[814, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[814, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[814, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "classifierchain (class in sklearn.multioutput)": [[815, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[815, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[815, "sklearn.multioutput.ClassifierChain.fit"]], "get_params() (sklearn.multioutput.classifierchain method)": [[815, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[815, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[815, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[815, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[815, "sklearn.multioutput.ClassifierChain.set_params"]], "multioutputclassifier (class in sklearn.multioutput)": [[816, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[816, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[816, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[816, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[816, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[816, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[816, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[816, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "multioutputregressor (class in sklearn.multioutput)": [[817, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[817, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[817, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[817, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[817, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[817, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[817, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "regressorchain (class in sklearn.multioutput)": [[818, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[818, "sklearn.multioutput.RegressorChain.fit"]], "get_params() (sklearn.multioutput.regressorchain method)": [[818, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[818, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[818, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[818, "sklearn.multioutput.RegressorChain.set_params"]], "bernoullinb (class in sklearn.naive_bayes)": [[819, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[819, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[819, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[819, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[819, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[819, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[819, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[819, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[819, "sklearn.naive_bayes.BernoulliNB.score"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[819, "sklearn.naive_bayes.BernoulliNB.set_params"]], "categoricalnb (class in sklearn.naive_bayes)": [[820, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[820, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[820, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[820, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[820, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[820, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[820, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[820, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[820, "sklearn.naive_bayes.CategoricalNB.score"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[820, "sklearn.naive_bayes.CategoricalNB.set_params"]], "complementnb (class in sklearn.naive_bayes)": [[821, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[821, "sklearn.naive_bayes.ComplementNB.fit"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[821, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[821, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[821, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[821, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[821, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[821, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[821, "sklearn.naive_bayes.ComplementNB.score"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[821, "sklearn.naive_bayes.ComplementNB.set_params"]], "gaussiannb (class in sklearn.naive_bayes)": [[822, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[822, "sklearn.naive_bayes.GaussianNB.fit"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[822, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[822, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[822, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[822, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[822, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[822, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[822, "sklearn.naive_bayes.GaussianNB.score"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[822, "sklearn.naive_bayes.GaussianNB.set_params"]], "multinomialnb (class in sklearn.naive_bayes)": [[823, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[823, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[823, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[823, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[823, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[823, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[823, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[823, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[823, "sklearn.naive_bayes.MultinomialNB.score"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[823, "sklearn.naive_bayes.MultinomialNB.set_params"]], "balltree (class in sklearn.neighbors)": [[824, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[824, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[824, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[824, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[824, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[824, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[824, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[824, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[824, "sklearn.neighbors.BallTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.balltree method)": [[824, "sklearn.neighbors.BallTree.valid_metrics"]], "kdtree (class in sklearn.neighbors)": [[825, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[825, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[825, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[825, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[825, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[825, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[825, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[825, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[825, "sklearn.neighbors.KDTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.kdtree method)": [[825, "sklearn.neighbors.KDTree.valid_metrics"]], "kneighborsclassifier (class in sklearn.neighbors)": [[826, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[826, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[826, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[826, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[826, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[826, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[826, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[826, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[826, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "kneighborsregressor (class in sklearn.neighbors)": [[827, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[827, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[827, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[827, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[827, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[827, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[827, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[827, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "kneighborstransformer (class in sklearn.neighbors)": [[828, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[828, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[828, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[828, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[828, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[828, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[828, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[828, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[828, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[828, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[829, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[829, "sklearn.neighbors.KernelDensity.fit"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[829, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[829, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[829, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[829, "sklearn.neighbors.KernelDensity.score_samples"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[829, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[830, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[830, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[830, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[830, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[830, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[830, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[830, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[830, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[830, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[830, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[831, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[831, "sklearn.neighbors.NearestCentroid.fit"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[831, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[831, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[831, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[831, "sklearn.neighbors.NearestCentroid.set_params"]], "nearestneighbors (class in sklearn.neighbors)": [[832, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[832, "sklearn.neighbors.NearestNeighbors.fit"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[832, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[832, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[832, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[832, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[832, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[832, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[833, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[833, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[833, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[833, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[833, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[833, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[833, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[833, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[834, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[834, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[834, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[834, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[834, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[834, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[834, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[834, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[834, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[835, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[835, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[835, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[835, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[835, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[835, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[835, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[835, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[836, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[836, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[836, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[836, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[836, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[836, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[836, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[836, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[836, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[836, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[837, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[838, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[839, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[840, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[840, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[840, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[840, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[840, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[840, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[840, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[840, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[840, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[840, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[840, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[841, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[841, "sklearn.neural_network.MLPClassifier.fit"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[841, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[841, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[841, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[841, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[841, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[841, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[841, "sklearn.neural_network.MLPClassifier.set_params"]], "mlpregressor (class in sklearn.neural_network)": [[842, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[842, "sklearn.neural_network.MLPRegressor.fit"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[842, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[842, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[842, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[842, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[842, "sklearn.neural_network.MLPRegressor.set_params"]], "featureunion (class in sklearn.pipeline)": [[843, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[843, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[843, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[843, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[843, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_params() (sklearn.pipeline.featureunion method)": [[843, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[843, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[843, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[843, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[843, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[844, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[844, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[844, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_params() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[844, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[844, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.set_params"]], "transform() (sklearn.pipeline.pipeline method)": [[844, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[845, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[846, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[847, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[847, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[847, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[847, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.binarizer method)": [[847, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[847, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[847, "sklearn.preprocessing.Binarizer.set_params"]], "transform() (sklearn.preprocessing.binarizer method)": [[847, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[848, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[848, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[848, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[848, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[848, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[848, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[848, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[848, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[848, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[849, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[849, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[849, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[849, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[849, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[849, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[849, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[849, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[849, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[850, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[850, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[850, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[850, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[850, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[850, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[850, "sklearn.preprocessing.KernelCenterer.set_params"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[850, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[851, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[851, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[851, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[851, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[851, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[851, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[851, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[851, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[852, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[852, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[852, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[852, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[852, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[852, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[852, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[852, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[853, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[853, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[853, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[853, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[853, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[853, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[853, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[853, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[853, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[853, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[854, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[854, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[854, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[854, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[854, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[854, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[854, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[854, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[854, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[854, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[855, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[855, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[855, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[855, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[855, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[855, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[855, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[855, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[856, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[856, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[856, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[856, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.normalizer method)": [[856, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[856, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[856, "sklearn.preprocessing.Normalizer.set_params"]], "transform() (sklearn.preprocessing.normalizer method)": [[856, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[857, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[857, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[857, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[857, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[857, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[857, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[857, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[857, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[857, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[857, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[858, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[858, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[858, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[858, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[858, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[858, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[858, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[858, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[858, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[858, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[859, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[859, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[859, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[859, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[859, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[859, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[859, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[859, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[859, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[860, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[860, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[860, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[860, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[860, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[860, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[860, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[860, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[860, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[861, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[861, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[861, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[861, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[861, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[861, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[861, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[861, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[861, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[862, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[862, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[862, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[862, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[862, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[862, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[862, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[862, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[862, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[863, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[863, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[863, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[863, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[863, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[863, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[863, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[863, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[864, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[864, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[864, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[864, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[864, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[864, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[864, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[864, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[864, "sklearn.preprocessing.StandardScaler.set_params"]], "transform() (sklearn.preprocessing.standardscaler method)": [[864, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[865, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[865, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[865, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[865, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[865, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[865, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[865, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[865, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[865, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[866, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[867, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[868, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[869, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[870, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[871, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[872, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[873, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[874, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[875, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[876, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[876, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[876, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[876, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[876, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[876, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[876, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[876, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[876, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[877, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[877, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[877, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[877, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[877, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[877, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[877, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[877, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[877, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[878, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[879, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[879, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[879, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[879, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[879, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[879, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[879, "sklearn.semi_supervised.LabelPropagation.set_params"]], "labelspreading (class in sklearn.semi_supervised)": [[880, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[880, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[880, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[880, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[880, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[880, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[880, "sklearn.semi_supervised.LabelSpreading.set_params"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[881, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[881, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[881, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[881, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[881, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[881, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[881, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[881, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[881, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[882, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[883, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[884, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[884, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[884, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[884, "sklearn.svm.LinearSVC.fit"]], "get_params() (sklearn.svm.linearsvc method)": [[884, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[884, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[884, "sklearn.svm.LinearSVC.score"]], "set_params() (sklearn.svm.linearsvc method)": [[884, "sklearn.svm.LinearSVC.set_params"]], "sparsify() (sklearn.svm.linearsvc method)": [[884, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[885, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[885, "sklearn.svm.LinearSVR.fit"]], "get_params() (sklearn.svm.linearsvr method)": [[885, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[885, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[885, "sklearn.svm.LinearSVR.score"]], "set_params() (sklearn.svm.linearsvr method)": [[885, "sklearn.svm.LinearSVR.set_params"]], "nusvc (class in sklearn.svm)": [[886, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[886, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[886, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[886, "sklearn.svm.NuSVC.fit"]], "get_params() (sklearn.svm.nusvc method)": [[886, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[886, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[886, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[886, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[886, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[886, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[886, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[886, "sklearn.svm.NuSVC.score"]], "set_params() (sklearn.svm.nusvc method)": [[886, "sklearn.svm.NuSVC.set_params"]], "nusvr (class in sklearn.svm)": [[887, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[887, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[887, "sklearn.svm.NuSVR.fit"]], "get_params() (sklearn.svm.nusvr method)": [[887, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[887, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[887, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[887, "sklearn.svm.NuSVR.score"]], "set_params() (sklearn.svm.nusvr method)": [[887, "sklearn.svm.NuSVR.set_params"]], "oneclasssvm (class in sklearn.svm)": [[888, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[888, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[888, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[888, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[888, "sklearn.svm.OneClassSVM.fit_predict"]], "get_params() (sklearn.svm.oneclasssvm method)": [[888, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[888, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[888, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[888, "sklearn.svm.OneClassSVM.score_samples"]], "set_params() (sklearn.svm.oneclasssvm method)": [[888, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[889, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[889, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[889, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[889, "sklearn.svm.SVC.fit"]], "get_params() (sklearn.svm.svc method)": [[889, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[889, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[889, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[889, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[889, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[889, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[889, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[889, "sklearn.svm.SVC.score"]], "set_params() (sklearn.svm.svc method)": [[889, "sklearn.svm.SVC.set_params"]], "svr (class in sklearn.svm)": [[890, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[890, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[890, "sklearn.svm.SVR.fit"]], "get_params() (sklearn.svm.svr method)": [[890, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[890, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[890, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[890, "sklearn.svm.SVR.score"]], "set_params() (sklearn.svm.svr method)": [[890, "sklearn.svm.SVR.set_params"]], "l1_min_c() (in module sklearn.svm)": [[891, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[892, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[892, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[892, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[892, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[892, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[892, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[892, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[892, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[892, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[892, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[892, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[892, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[892, "sklearn.tree.DecisionTreeClassifier.score"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[892, "sklearn.tree.DecisionTreeClassifier.set_params"]], "decisiontreeregressor (class in sklearn.tree)": [[893, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[893, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[893, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[893, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[893, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[893, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[893, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[893, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[893, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[893, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[893, "sklearn.tree.DecisionTreeRegressor.score"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[893, "sklearn.tree.DecisionTreeRegressor.set_params"]], "extratreeclassifier (class in sklearn.tree)": [[894, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[894, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[894, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[894, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[894, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[894, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[894, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[894, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[894, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[894, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[894, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[894, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[894, "sklearn.tree.ExtraTreeClassifier.score"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[894, "sklearn.tree.ExtraTreeClassifier.set_params"]], "extratreeregressor (class in sklearn.tree)": [[895, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[895, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[895, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[895, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[895, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[895, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[895, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[895, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[895, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[895, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[895, "sklearn.tree.ExtraTreeRegressor.score"]], "set_params() (sklearn.tree.extratreeregressor method)": [[895, "sklearn.tree.ExtraTreeRegressor.set_params"]], "export_graphviz() (in module sklearn.tree)": [[896, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[897, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[898, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[899, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[899, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[899, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[899, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[899, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[899, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[899, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[899, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[899, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[899, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[899, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[899, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[900, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[901, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[902, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[903, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[904, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[905, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[906, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[907, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[908, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[909, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[910, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[911, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[912, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[913, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[914, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[915, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[916, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[917, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[918, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[919, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[920, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[921, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[922, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[923, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[924, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[925, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[926, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[927, "sklearn.utils.indexable"]], "available_if() (in module sklearn.utils.metaestimators)": [[928, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[929, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[930, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[931, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[932, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[933, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[933, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[933, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[933, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[933, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[934, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[935, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[936, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[937, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[938, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[939, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[940, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[941, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[942, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[943, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[944, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[945, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[946, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[947, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[948, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[949, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[950, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[951, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[952, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[953, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[954, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[955, "sklearn.utils.validation.has_fit_parameter"]]}})